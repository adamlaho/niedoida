/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ddps_AB.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
//
void second_derivative_ee_2210_12(const double ae,
                                  const double xA,
                                  const double yA,
                                  const double zA,
                                  const double be,
                                  const double xB,
                                  const double yB,
                                  const double zB,
                                  const double ce,
                                  const double xC,
                                  const double yC,
                                  const double zC,
                                  const double de,
                                  const double xD,
                                  const double yD,
                                  const double zD,
                                  const double* const bs,
                                  double* const d2eexx,
                                  double* const d2eexy,
                                  double* const d2eexz,
                                  double* const d2eeyx,
                                  double* const d2eeyy,
                                  double* const d2eeyz,
                                  double* const d2eezx,
                                  double* const d2eezy,
                                  double* const d2eezz)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C80183 = 0 * ae;
    const double C80182 = ae * be;
    const double C80181 = 0 * be;
    const double C80180 = 0 * be;
    const double C80179 = ae + be;
    const double C80178 = 0 * be;
    const double C80177 = xA - xB;
    const double C80278 = 0 * be;
    const double C80306 = yA - yB;
    const double C80309 = zA - zB;
    const double C80329 = 0 * be;
    const double C80355 = 0 * be;
    const double C80451 = 0 * ae;
    const double C80446 = 0 * be;
    const double C80445 = 0 * be;
    const double C80493 = 0 * be;
    const double C80601 = 0 * ae;
    const double C80596 = 0 * be;
    const double C80595 = 0 * be;
    const double C80643 = 0 * be;
    const double C80825 = p + q;
    const double C80824 = p * q;
    const double C80830 = xP - xQ;
    const double C80829 = bs[2];
    const double C80835 = bs[3];
    const double C80846 = bs[4];
    const double C80867 = bs[5];
    const double C80903 = bs[6];
    const double C80952 = yP - yQ;
    const double C80996 = zP - zQ;
    const double C102 = bs[0];
    const double C82554 = ce + de;
    const double C82553 = xC - xD;
    const double C82559 = yC - yD;
    const double C82566 = zC - zD;
    const double C82854 = ce * de;
    const double C80242 = 2 * C80182;
    const double C80239 = -2 * C80181;
    const double C80238 = -2 * C80180;
    const double C80190 = C80183 / C80179;
    const double C80187 = C80181 / C80179;
    const double C80185 = 2 * C80179;
    const double C80184 = std::pow(C80179, 2);
    const double C80189 = C80182 * C80177;
    const double C80188 = C80177 * C80181;
    const double C80186 = C80177 * C80180;
    const double C82519 = C80177 * be;
    const double C82518 = C80177 * ae;
    const double C82517 = std::pow(C80177, 2);
    const double C80279 = C80278 / C80179;
    const double C80330 = C80182 * C80306;
    const double C82577 = std::pow(C80306, 2);
    const double C82631 = C80306 * be;
    const double C82629 = C80306 * ae;
    const double C80356 = C80182 * C80309;
    const double C82588 = std::pow(C80309, 2);
    const double C82671 = C80309 * be;
    const double C82669 = C80309 * ae;
    const double C80448 = C80306 * C80329;
    const double C80447 = C80329 / C80179;
    const double C80507 = -2 * C80329;
    const double C80598 = C80309 * C80355;
    const double C80597 = C80355 / C80179;
    const double C80657 = -2 * C80355;
    const double C80458 = C80451 / C80179;
    const double C80453 = C80306 * C80446;
    const double C80506 = -2 * C80446;
    const double C80494 = C80493 / C80179;
    const double C80608 = C80601 / C80179;
    const double C80603 = C80309 * C80596;
    const double C80656 = -2 * C80596;
    const double C80644 = C80643 / C80179;
    const double C80826 = 2 * C80824;
    const double C80838 = C80830 * ae;
    const double C80837 = C80830 * be;
    const double C80834 = std::pow(C80830, 2);
    const double C80955 = C80952 * be;
    const double C80954 = C80830 * C80952;
    const double C81042 = C80952 * ae;
    const double C81041 = C80952 * C80830;
    const double C81084 = std::pow(C80952, 2);
    const double C80999 = C80996 * be;
    const double C80998 = C80830 * C80996;
    const double C81105 = C80952 * C80996;
    const double C81123 = C80996 * ae;
    const double C81122 = C80996 * C80830;
    const double C81165 = C80996 * C80952;
    const double C81182 = std::pow(C80996, 2);
    const double C82857 = 2 * C82554;
    const double C82856 = std::pow(C82553, 2);
    const double C82855 = std::pow(C82559, 2);
    const double C82853 = std::pow(C82566, 2);
    const double C80246 = ae * C80239;
    const double C80245 = ae * C80238;
    const double C82531 = std::pow(C80185, -1);
    const double C82849 = std::pow(C80185, -2);
    const double C80191 = 2 * C80184;
    const double C80237 = C80184 * C80185;
    const double C80283 = 4 * C80184;
    const double C80193 = C80188 / C80179;
    const double C80192 = C80186 / C80179;
    const double C82842 = std::pow(C82518, 2);
    const double C82520 = C82517 * C80182;
    const double C82578 = C82577 * C80182;
    const double C82858 = std::pow(C82629, 2);
    const double C82589 = C82588 * C80182;
    const double C82860 = std::pow(C82669, 2);
    const double C80456 = C80448 / C80179;
    const double C80516 = ae * C80507;
    const double C80606 = C80598 / C80179;
    const double C80666 = ae * C80657;
    const double C80459 = C80453 / C80179;
    const double C80515 = ae * C80506;
    const double C80609 = C80603 / C80179;
    const double C80665 = ae * C80656;
    const double C80828 = C80826 / C80825;
    const double C120 =
        ((std::pow(xP - xQ, 2) * bs[2] * std::pow(C80826 / C80825, 2) -
          (bs[1] * C80826) / C80825) *
         C80182) /
        C80184;
    const double C103 = -(C80830 * bs[1] * C80826) / C80825;
    const double C695 = -(C80952 * bs[1] * C80826) / C80825;
    const double C1155 = -(C80996 * bs[1] * C80826) / C80825;
    const double C80841 = C80835 * C80838;
    const double C80852 = C80846 * C80838;
    const double C80875 = C80867 * C80838;
    const double C80915 = C80903 * C80838;
    const double C109 = (-(bs[1] * C80838 * C80826) / C80825) / C80179;
    const double C80840 = C80835 * C80837;
    const double C80849 = C80846 * C80837;
    const double C80871 = C80867 * C80837;
    const double C80911 = C80903 * C80837;
    const double C108 = (-(bs[1] * C80837 * C80826) / C80825) / C80179;
    const double C80848 = C80834 * C80846;
    const double C80870 = C80834 * C80867;
    const double C80910 = C80834 * C80903;
    const double C80957 = C80835 * C80955;
    const double C80962 = C80846 * C80955;
    const double C80969 = C80867 * C80955;
    const double C80980 = C80903 * C80955;
    const double C169 = (-(bs[1] * C80955 * C80826) / C80825) / C80179;
    const double C80956 = C80954 * ae;
    const double C81044 = C80835 * C81042;
    const double C81049 = C80846 * C81042;
    const double C81056 = C80867 * C81042;
    const double C81067 = C80903 * C81042;
    const double C310 = (-(bs[1] * C81042 * C80826) / C80825) / C80179;
    const double C81043 = C81041 * ae;
    const double C81086 = C81084 * C80846;
    const double C81091 = C81084 * C80867;
    const double C81096 = C81084 * C80903;
    const double C81001 = C80835 * C80999;
    const double C81006 = C80846 * C80999;
    const double C81013 = C80867 * C80999;
    const double C81024 = C80903 * C80999;
    const double C240 = (-(bs[1] * C80999 * C80826) / C80825) / C80179;
    const double C81000 = C80998 * ae;
    const double C81106 = C81105 * ae;
    const double C81125 = C80835 * C81123;
    const double C81130 = C80846 * C81123;
    const double C81137 = C80867 * C81123;
    const double C81148 = C80903 * C81123;
    const double C497 = (-(bs[1] * C81123 * C80826) / C80825) / C80179;
    const double C81124 = C81122 * ae;
    const double C81166 = C81165 * ae;
    const double C81184 = C81182 * C80846;
    const double C81189 = C81182 * C80867;
    const double C81194 = C81182 * C80903;
    const double C82890 = std::pow(C82857, -1);
    const double C82889 = C82856 * C82854;
    const double C82888 = C82855 * C82854;
    const double C82887 = C82853 * C82854;
    const double C80250 = C80177 * C80246;
    const double C80200 = C80181 / C80191;
    const double C80197 = C80180 / C80191;
    const double C80196 = C80178 / C80191;
    const double C80450 = C80329 / C80191;
    const double C80455 = C80446 / C80191;
    const double C80454 = C80445 / C80191;
    const double C80600 = C80355 / C80191;
    const double C80605 = C80596 / C80191;
    const double C80604 = C80595 / C80191;
    const double C80251 = C80246 / C80237;
    const double C80249 = C80245 / C80237;
    const double C82852 = 4 * C80237;
    const double C80285 = C80179 * C80283;
    const double C80198 = 0 - C80193;
    const double C80195 = 0 - C80192;
    const double C82521 = C82520 / C80179;
    const double C82579 = C82578 / C80179;
    const double C82590 = C82589 / C80179;
    const double C80460 = 0 - C80456;
    const double C80521 = C80516 / C80237;
    const double C80520 = C80306 * C80516;
    const double C80610 = 0 - C80606;
    const double C80671 = C80666 / C80237;
    const double C80670 = C80309 * C80666;
    const double C80463 = 0 - C80459;
    const double C80519 = C80515 / C80237;
    const double C80613 = 0 - C80609;
    const double C80669 = C80665 / C80237;
    const double C80831 = std::pow(C80828, 2);
    const double C80836 = -C80828;
    const double C80847 = std::pow(C80828, 4);
    const double C80904 = std::pow(C80828, 6);
    const double C80958 = C80956 * be;
    const double C81045 = C81043 * be;
    const double C81002 = C81000 * be;
    const double C81107 = C81106 * be;
    const double C81126 = C81124 * be;
    const double C81167 = C81166 * be;
    const double C82914 = C82889 / C82554;
    const double C82913 = C82888 / C82554;
    const double C82912 = C82887 / C82554;
    const double C80254 = C80250 / C80184;
    const double C80203 = C80198 * ae;
    const double C80202 = C80195 * ae;
    const double C82522 = -C82521;
    const double C82580 = -C82579;
    const double C82591 = -C82590;
    const double C80464 = C80460 * ae;
    const double C80524 = C80520 / C80184;
    const double C80614 = C80610 * ae;
    const double C80674 = C80670 / C80184;
    const double C80468 = C80463 * ae;
    const double C80618 = C80613 * ae;
    const double C80833 = C80829 * C80831;
    const double C121 = (ae * C80831 * C80829 * C80830 * be +
                         be * C80831 * C80829 * C80830 * ae +
                         C80830 *
                             (C80829 * C80831 + std::pow(C80830, 2) * bs[3] *
                                                    std::pow(-C80828, 3)) *
                             C80182) /
                        C80184;
    const double C175 =
        (C80831 * C80829 * C80830 * (yP - yQ) * ae * be) / C80184;
    const double C246 =
        (C80831 * C80829 * C80830 * (zP - zQ) * ae * be) / C80184;
    const double C316 = (C80831 * C80829 * C80952 * C80830 * ae * be) / C80184;
    const double C365 =
        ((std::pow(C80952, 2) * C80829 * C80831 - (bs[1] * C80826) / C80825) *
         C80182) /
        C80184;
    const double C441 = (C80831 * C80829 * C80952 * C80996 * ae * be) / C80184;
    const double C503 = (C80831 * C80829 * C80996 * C80830 * ae * be) / C80184;
    const double C551 = (C80831 * C80829 * C80996 * C80952 * ae * be) / C80184;
    const double C608 =
        ((std::pow(C80996, 2) * C80829 * C80831 - (bs[1] * C80826) / C80825) *
         C80182) /
        C80184;
    const double C110 = (C80830 * C80831 * C80829 * C80837) / C80179 -
                        (be * bs[1] * C80826) / (C80825 * C80179);
    const double C111 = (C80830 * C80831 * C80829 * C80838) / C80179 -
                        (ae * bs[1] * C80826) / (C80825 * C80179);
    const double C170 = (C80830 * C80831 * C80829 * C80955) / C80179;
    const double C241 = (C80830 * C80831 * C80829 * C80999) / C80179;
    const double C311 = (C80830 * C80831 * C80829 * C81042) / C80179;
    const double C498 = (C80830 * C80831 * C80829 * C81123) / C80179;
    const double C704 = (C80952 * C80831 * C80829 * C80837) / C80179;
    const double C705 = (C80952 * C80831 * C80829 * C80838) / C80179;
    const double C753 = (C80952 * C80831 * C80829 * C80955) / C80179 -
                        (be * bs[1] * C80826) / (C80825 * C80179);
    const double C805 = (C80952 * C80831 * C80829 * C80999) / C80179;
    const double C857 = (C80952 * C80831 * C80829 * C81042) / C80179 -
                        (ae * bs[1] * C80826) / (C80825 * C80179);
    const double C1003 = (C80952 * C80831 * C80829 * C81123) / C80179;
    const double C1164 = (C80996 * C80831 * C80829 * C80837) / C80179;
    const double C1165 = (C80996 * C80831 * C80829 * C80838) / C80179;
    const double C1213 = (C80996 * C80831 * C80829 * C80955) / C80179;
    const double C1265 = (C80996 * C80831 * C80829 * C80999) / C80179 -
                         (be * bs[1] * C80826) / (C80825 * C80179);
    const double C1317 = (C80996 * C80831 * C80829 * C81042) / C80179;
    const double C1463 = (C80996 * C80831 * C80829 * C81123) / C80179 -
                         (ae * bs[1] * C80826) / (C80825 * C80179);
    const double C80839 = std::pow(C80836, 3);
    const double C80868 = std::pow(C80836, 5);
    const double C80856 = C80847 * C80852;
    const double C80855 = C80847 * C80849;
    const double C80854 = C80848 * C80847;
    const double C80866 = C80846 * C80847;
    const double C80964 = C80847 * C80962;
    const double C81008 = C80847 * C81006;
    const double C81051 = C80847 * C81049;
    const double C81087 = C81086 * C80847;
    const double C81132 = C80847 * C81130;
    const double C81185 = C81184 * C80847;
    const double C80922 = C80904 * C80915;
    const double C80919 = C80904 * C80911;
    const double C80918 = C80910 * C80904;
    const double C80984 = C80904 * C80980;
    const double C81028 = C80904 * C81024;
    const double C81071 = C80904 * C81067;
    const double C81097 = C81096 * C80904;
    const double C81152 = C80904 * C81148;
    const double C81195 = C81194 * C80904;
    const double C80961 = C80846 * C80958;
    const double C80968 = C80867 * C80958;
    const double C80979 = C80903 * C80958;
    const double C81048 = C80846 * C81045;
    const double C81055 = C80867 * C81045;
    const double C81066 = C80903 * C81045;
    const double C81005 = C80846 * C81002;
    const double C81012 = C80867 * C81002;
    const double C81023 = C80903 * C81002;
    const double C81109 = C80846 * C81107;
    const double C81112 = C80867 * C81107;
    const double C81115 = C80903 * C81107;
    const double C81129 = C80846 * C81126;
    const double C81136 = C80867 * C81126;
    const double C81147 = C80903 * C81126;
    const double C81169 = C80846 * C81167;
    const double C81172 = C80867 * C81167;
    const double C81175 = C80903 * C81167;
    const double C82930 = -C82914;
    const double C82929 = -C82913;
    const double C82928 = -C82912;
    const double C80207 = C80203 / C80179;
    const double C80206 = C80202 / C80179;
    const double C82523 = std::exp(C82522);
    const double C82581 = std::exp(C82580);
    const double C82592 = std::exp(C82591);
    const double C80469 = C80464 / C80179;
    const double C80619 = C80614 / C80179;
    const double C80472 = C80468 / C80179;
    const double C80622 = C80618 / C80179;
    const double C104 = C80833 * C80834 - (bs[1] * C80826) / C80825;
    const double C694 = C80952 * C80830 * C80833;
    const double C1154 = C80996 * C80830 * C80833;
    const double C1653 = C80833 * C81084 - (bs[1] * C80826) / C80825;
    const double C3348 = C80996 * C80952 * C80833;
    const double C4108 = C80833 * C81182 - (bs[1] * C80826) / C80825;
    const double C80843 = C80839 * C80841;
    const double C80842 = C80839 * C80840;
    const double C80845 = C80835 * C80839;
    const double C80959 = C80839 * C80957;
    const double C81003 = C80839 * C81001;
    const double C81046 = C80839 * C81044;
    const double C81127 = C80839 * C81125;
    const double C176 = (ae * C80831 * C80829 * C80952 * be +
                         C80830 * C80839 * C80835 * C80830 * C80952 * ae * be) /
                        C80184;
    const double C247 = (ae * C80831 * C80829 * C80996 * be +
                         C80830 * C80839 * C80835 * C80830 * C80996 * ae * be) /
                        C80184;
    const double C317 = (be * C80831 * C80829 * C80952 * ae +
                         C80830 * C80839 * C80835 * C80952 * C80830 * ae * be) /
                        C80184;
    const double C366 =
        (C80830 * (C80833 + std::pow(C80952, 2) * C80835 * C80839) * C80182) /
        C80184;
    const double C442 =
        (C80830 * C80839 * C80835 * C80952 * C80996 * ae * be) / C80184;
    const double C443 =
        (C80839 * C80835 * C81107 + C80847 * C80846 * C81107 * C80834) / C80184;
    const double C504 = (be * C80831 * C80829 * C80996 * ae +
                         C80830 * C80839 * C80835 * C80996 * C80830 * ae * be) /
                        C80184;
    const double C552 =
        (C80830 * C80839 * C80835 * C80996 * C80952 * ae * be) / C80184;
    const double C553 =
        (C80839 * C80835 * C81167 + C80847 * C80846 * C81167 * C80834) / C80184;
    const double C609 =
        (C80830 * (C80833 + std::pow(C80996, 2) * C80835 * C80839) * C80182) /
        C80184;
    const double C710 =
        (C80952 * (C80833 + C80834 * C80835 * C80839) * C80182) / C80184;
    const double C758 =
        (be * C80831 * C80829 * C80838 + C80952 * C80839 * C80835 * C80958) /
        C80184;
    const double C810 = (C80952 * C80839 * C80835 * C81002) / C80184;
    const double C862 =
        (ae * C80831 * C80829 * C80837 + C80952 * C80839 * C80835 * C81045) /
        C80184;
    const double C913 =
        (ae * C80831 * C80829 * C80955 + be * C80831 * C80829 * C81042 +
         C80952 * (C80833 + C81084 * C80835 * C80839) * C80182) /
        C80184;
    const double C956 =
        (ae * C80831 * C80829 * C80999 + C80952 * C80839 * C80835 * C81107) /
        C80184;
    const double C1008 = (C80952 * C80839 * C80835 * C81126) / C80184;
    const double C1055 =
        (be * C80831 * C80829 * C81123 + C80952 * C80839 * C80835 * C81167) /
        C80184;
    const double C1106 =
        (C80952 * (C80833 + C81182 * C80835 * C80839) * C80182) / C80184;
    const double C1170 =
        (C80996 * (C80833 + C80834 * C80835 * C80839) * C80182) / C80184;
    const double C1218 = (C80996 * C80839 * C80835 * C80958) / C80184;
    const double C1270 =
        (be * C80831 * C80829 * C80838 + C80996 * C80839 * C80835 * C81002) /
        C80184;
    const double C1322 = (C80996 * C80839 * C80835 * C81045) / C80184;
    const double C1373 =
        (C80996 * (C80833 + C81084 * C80835 * C80839) * C80182) / C80184;
    const double C1416 =
        (be * C80831 * C80829 * C81042 + C80996 * C80839 * C80835 * C81107) /
        C80184;
    const double C1468 =
        (ae * C80831 * C80829 * C80837 + C80996 * C80839 * C80835 * C81126) /
        C80184;
    const double C1515 =
        (ae * C80831 * C80829 * C80955 + C80996 * C80839 * C80835 * C81167) /
        C80184;
    const double C1566 =
        (ae * C80831 * C80829 * C80999 + be * C80831 * C80829 * C81123 +
         C80996 * (C80833 + C81182 * C80835 * C80839) * C80182) /
        C80184;
    const double C80881 = C80868 * C80875;
    const double C80878 = C80868 * C80871;
    const double C80877 = C80870 * C80868;
    const double C80902 = C80867 * C80868;
    const double C80971 = C80868 * C80969;
    const double C81015 = C80868 * C81013;
    const double C81058 = C80868 * C81056;
    const double C81092 = C81091 * C80868;
    const double C81139 = C80868 * C81137;
    const double C81190 = C81189 * C80868;
    const double C80859 = C80830 * C80856;
    const double C80865 = be * C80856;
    const double C81491 = C80952 * C80856;
    const double C81888 = C80996 * C80856;
    const double C80858 = C80830 * C80855;
    const double C80864 = ae * C80855;
    const double C81506 = C80952 * C80855;
    const double C81912 = C80996 * C80855;
    const double C80876 = C80866 * ae;
    const double C80874 = C80866 * C80834;
    const double C80873 = C80830 * C80866;
    const double C80872 = C80866 * be;
    const double C81604 = C80866 * C81084;
    const double C81603 = C80952 * C80866;
    const double C81940 = C80866 * C81182;
    const double C81939 = C80996 * C80866;
    const double C80967 = ae * C80964;
    const double C80966 = C80830 * C80964;
    const double C81372 = C80952 * C80964;
    const double C81924 = C80996 * C80964;
    const double C81011 = ae * C81008;
    const double C81010 = C80830 * C81008;
    const double C81521 = C80952 * C81008;
    const double C81560 = C80996 * C81008;
    const double C81054 = be * C81051;
    const double C81053 = C80830 * C81051;
    const double C81374 = C80952 * C81051;
    const double C81904 = C80996 * C81051;
    const double C81135 = be * C81132;
    const double C81134 = C80830 * C81132;
    const double C81522 = C80952 * C81132;
    const double C81562 = C80996 * C81132;
    const double C80928 = C80830 * C80922;
    const double C81674 = C80922 * C81084;
    const double C81976 = C80952 * C80922;
    const double C82032 = C80922 * C81182;
    const double C80925 = C80830 * C80919;
    const double C81688 = C80919 * C81084;
    const double C81991 = C80952 * C80919;
    const double C82049 = C80919 * C81182;
    const double C80987 = C80984 * C80834;
    const double C81621 = C80830 * C80984;
    const double C81701 = C80952 * C80984;
    const double C82060 = C80984 * C81182;
    const double C81031 = C81028 * C80834;
    const double C81647 = C80830 * C81028;
    const double C81736 = C81028 * C81084;
    const double C82005 = C80952 * C81028;
    const double C82073 = C80996 * C81028;
    const double C81074 = C81071 * C80834;
    const double C81624 = C80830 * C81071;
    const double C81706 = C80952 * C81071;
    const double C81985 = C81071 * C81182;
    const double C81155 = C81152 * C80834;
    const double C81661 = C80830 * C81152;
    const double C81752 = C81152 * C81084;
    const double C82008 = C80952 * C81152;
    const double C82079 = C80996 * C81152;
    const double C80963 = C80847 * C80961;
    const double C80970 = C80868 * C80968;
    const double C80982 = C80904 * C80979;
    const double C81050 = C80847 * C81048;
    const double C81057 = C80868 * C81055;
    const double C81069 = C80904 * C81066;
    const double C81007 = C80847 * C81005;
    const double C81014 = C80868 * C81012;
    const double C81026 = C80904 * C81023;
    const double C81110 = C80847 * C81109;
    const double C81113 = C80868 * C81112;
    const double C81116 = C80904 * C81115;
    const double C81131 = C80847 * C81129;
    const double C81138 = C80868 * C81136;
    const double C81150 = C80904 * C81147;
    const double C81170 = C80847 * C81169;
    const double C81173 = C80868 * C81172;
    const double C81176 = C80904 * C81175;
    const double C82940 = std::exp(C82930);
    const double C82939 = std::exp(C82929);
    const double C82938 = std::exp(C82928);
    const double C80211 = C80207 - C80197;
    const double C80210 = C80206 - C80196;
    const double C16004 = C82523 * C704;
    const double C18542 = C82523 * C1164;
    const double C80194 = C80189 * C82523;
    const double C82525 = C82523 * C82518;
    const double C82524 = C82523 / C80185;
    const double C82533 = C82531 * C82523;
    const double C82845 = C82523 * C82519;
    const double C82885 = C82849 * C82523;
    const double C82879 = C82523 * C82842;
    const double C182 = C82581 * C170;
    const double C5823 = C82581 * C1213;
    const double C80331 = C80330 * C82581;
    const double C168 = -(2 * C80182 * (yA - yB) * C82581) / C80179;
    const double C364 =
        -((C82581 - (C80306 * 2 * C80182 * C80306 * C82581) / C80179) *
          C80242) /
        C80179;
    const double C82630 = C82581 / C80185;
    const double C82632 = C82581 * C82629;
    const double C82639 = C82531 * C82581;
    const double C82865 = C82581 * C82631;
    const double C82893 = C82849 * C82581;
    const double C82891 = C82581 * C82858;
    const double C253 = C82592 * C241;
    const double C2740 = C82592 * C805;
    const double C80357 = C80356 * C82592;
    const double C239 = -(2 * C80182 * (zA - zB) * C82592) / C80179;
    const double C607 =
        -((C82592 - (C80309 * 2 * C80182 * C80309 * C82592) / C80179) *
          C80242) /
        C80179;
    const double C82670 = C82592 / C80185;
    const double C82672 = C82592 * C82669;
    const double C82679 = C82531 * C82592;
    const double C82872 = C82592 * C82671;
    const double C82896 = C82849 * C82592;
    const double C82894 = C82592 * C82860;
    const double C80473 = C80469 - C80455;
    const double C80623 = C80619 - C80605;
    const double C80476 = C80472 - C80454;
    const double C80626 = C80622 - C80604;
    const double C113 =
        (C80831 * C80829 * C80838 + C80830 * (C80830 * C80843 + C80833 * ae) +
         C80830 * C80833 * ae) /
        C80179;
    const double C703 = (C80952 * (C80830 * C80843 + C80833 * ae)) / C80179;
    const double C1163 = (C80996 * (C80830 * C80843 + C80833 * ae)) / C80179;
    const double C1658 = (C80831 * C80829 * C80838 + C80843 * C81084) / C80179;
    const double C2533 =
        (2 * C80952 * C80843 + C80952 * (C80843 + C80856 * C81084)) / C80179;
    const double C3354 = (C80996 * (C80843 + C80856 * C81084)) / C80179;
    const double C3360 = (C80996 * C80952 * C80843) / C80179;
    const double C4113 = (C80831 * C80829 * C80838 + C80843 * C81182) / C80179;
    const double C5696 =
        (2 * C80996 * C80843 + C80996 * (C80843 + C80856 * C81182)) / C80179;
    const double C122 =
        ((C80833 + C80834 * C80835 * C80839) * C80182 +
         ae * (C80830 * C80842 + C80833 * be) +
         be * (C80830 * C80843 + C80833 * ae) +
         C80830 *
             (ae * C80842 + be * C80843 +
              C80830 *
                  (C80835 * C80839 + C80834 * bs[4] * std::pow(C80828, 4)) *
                  C80182)) /
        C80184;
    const double C112 =
        (C80831 * C80829 * C80837 + C80830 * (C80830 * C80842 + C80833 * be) +
         C80830 * C80833 * be) /
        C80179;
    const double C702 = (C80952 * (C80830 * C80842 + C80833 * be)) / C80179;
    const double C1162 = (C80996 * (C80830 * C80842 + C80833 * be)) / C80179;
    const double C1657 = (C80831 * C80829 * C80837 + C80842 * C81084) / C80179;
    const double C2532 =
        (2 * C80952 * C80842 + C80952 * (C80842 + C80855 * C81084)) / C80179;
    const double C3353 = (C80996 * (C80842 + C80855 * C81084)) / C80179;
    const double C3359 = (C80996 * C80952 * C80842) / C80179;
    const double C4112 = (C80831 * C80829 * C80837 + C80842 * C81182) / C80179;
    const double C5695 =
        (2 * C80996 * C80842 + C80996 * (C80842 + C80855 * C81182)) / C80179;
    const double C80853 = C80845 * ae;
    const double C80851 = C80830 * C80845;
    const double C80850 = C80845 * be;
    const double C80857 = C80845 + C80854;
    const double C81088 = C80845 + C81087;
    const double C81186 = C80845 + C81185;
    const double C81373 = C80952 * C80845;
    const double C81561 = C80996 * C80845;
    const double C367 =
        ((C80833 + C81084 * C80835 * C80839) * C80182 +
         (C80845 + C81084 * C80846 * C80847) * C80182 * C80834) /
        C80184;
    const double C610 =
        ((C80833 + C81182 * C80835 * C80839) * C80182 +
         (C80845 + C81182 * C80846 * C80847) * C80182 * C80834) /
        C80184;
    const double C105 =
        2 * C80830 * C80833 + C80830 * (C80833 + C80845 * C80834);
    const double C693 = C80952 * (C80833 + C80845 * C80834);
    const double C1153 = C80996 * (C80833 + C80845 * C80834);
    const double C2527 =
        2 * C80952 * C80833 + C80952 * (C80833 + C80845 * C81084);
    const double C3345 = C80996 * (C80833 + C80845 * C81084);
    const double C5690 =
        2 * C80996 * C80833 + C80996 * (C80833 + C80845 * C81182);
    const double C177 =
        (C80839 * C80835 * C80958 + ae * C80830 * C80959 +
         C80830 * (ae * C80959 + C80830 * C80847 * C80846 * C80958)) /
        C80184;
    const double C171 = (C80831 * C80829 * C80955 + C80959 * C80834) / C80179;
    const double C172 =
        (2 * C80830 * C80959 + C80830 * (C80959 + C80964 * C80834)) / C80179;
    const double C754 =
        (C80952 * C80830 * C80959 + C80830 * C80833 * be) / C80179;
    const double C755 = (C80952 * (C80959 + C80964 * C80834) +
                         (C80833 + C80845 * C80834) * be) /
                        C80179;
    const double C1214 = (C80996 * C80830 * C80959) / C80179;
    const double C1215 = (C80996 * (C80959 + C80964 * C80834)) / C80179;
    const double C1746 =
        (C80831 * C80829 * C80955 + C80952 * (C80952 * C80959 + C80833 * be) +
         C80952 * C80833 * be) /
        C80179;
    const double C3441 = (C80996 * (C80952 * C80959 + C80833 * be)) / C80179;
    const double C4198 = (C80831 * C80829 * C80955 + C80959 * C81182) / C80179;
    const double C5816 =
        (2 * C80996 * C80959 + C80996 * (C80959 + C80964 * C81182)) / C80179;
    const double C248 =
        (C80839 * C80835 * C81002 + ae * C80830 * C81003 +
         C80830 * (ae * C81003 + C80830 * C80847 * C80846 * C81002)) /
        C80184;
    const double C242 = (C80831 * C80829 * C80999 + C81003 * C80834) / C80179;
    const double C243 =
        (2 * C80830 * C81003 + C80830 * (C81003 + C81008 * C80834)) / C80179;
    const double C806 = (C80952 * C80830 * C81003) / C80179;
    const double C807 = (C80952 * (C81003 + C81008 * C80834)) / C80179;
    const double C1266 =
        (C80996 * C80830 * C81003 + C80830 * C80833 * be) / C80179;
    const double C1267 = (C80996 * (C81003 + C81008 * C80834) +
                          (C80833 + C80845 * C80834) * be) /
                         C80179;
    const double C1852 = (C80831 * C80829 * C80999 + C81003 * C81084) / C80179;
    const double C2733 =
        (2 * C80952 * C81003 + C80952 * (C81003 + C81008 * C81084)) / C80179;
    const double C3527 =
        (C80996 * C80952 * C81003 + C80952 * C80833 * be) / C80179;
    const double C3530 = (C80996 * (C81003 + C81008 * C81084) +
                          (C80833 + C80845 * C81084) * be) /
                         C80179;
    const double C4299 =
        (C80831 * C80829 * C80999 + C80996 * (C80996 * C81003 + C80833 * be) +
         C80996 * C80833 * be) /
        C80179;
    const double C318 =
        (C80839 * C80835 * C81045 + be * C80830 * C81046 +
         C80830 * (be * C81046 + C80830 * C80847 * C80846 * C81045)) /
        C80184;
    const double C312 = (C80831 * C80829 * C81042 + C81046 * C80834) / C80179;
    const double C313 =
        (2 * C80830 * C81046 + C80830 * (C81046 + C81051 * C80834)) / C80179;
    const double C858 =
        (C80952 * C80830 * C81046 + C80830 * C80833 * ae) / C80179;
    const double C859 = (C80952 * (C81046 + C81051 * C80834) +
                         (C80833 + C80845 * C80834) * ae) /
                        C80179;
    const double C1318 = (C80996 * C80830 * C81046) / C80179;
    const double C1319 = (C80996 * (C81046 + C81051 * C80834)) / C80179;
    const double C1950 =
        (C80831 * C80829 * C81042 + C80952 * (C80952 * C81046 + C80833 * ae) +
         C80952 * C80833 * ae) /
        C80179;
    const double C3613 = (C80996 * (C80952 * C81046 + C80833 * ae)) / C80179;
    const double C4405 = (C80831 * C80829 * C81042 + C81046 * C81182) / C80179;
    const double C5984 =
        (2 * C80996 * C81046 + C80996 * (C81046 + C81051 * C81182)) / C80179;
    const double C505 =
        (C80839 * C80835 * C81126 + be * C80830 * C81127 +
         C80830 * (be * C81127 + C80830 * C80847 * C80846 * C81126)) /
        C80184;
    const double C499 = (C80831 * C80829 * C81123 + C81127 * C80834) / C80179;
    const double C500 =
        (2 * C80830 * C81127 + C80830 * (C81127 + C81132 * C80834)) / C80179;
    const double C1004 = (C80952 * C80830 * C81127) / C80179;
    const double C1005 = (C80952 * (C81127 + C81132 * C80834)) / C80179;
    const double C1464 =
        (C80996 * C80830 * C81127 + C80830 * C80833 * ae) / C80179;
    const double C1465 = (C80996 * (C81127 + C81132 * C80834) +
                          (C80833 + C80845 * C80834) * ae) /
                         C80179;
    const double C2241 = (C80831 * C80829 * C81123 + C81127 * C81084) / C80179;
    const double C3083 =
        (2 * C80952 * C81127 + C80952 * (C81127 + C81132 * C81084)) / C80179;
    const double C3859 =
        (C80996 * C80952 * C81127 + C80952 * C80833 * ae) / C80179;
    const double C3862 = (C80996 * (C81127 + C81132 * C81084) +
                          (C80833 + C80845 * C81084) * ae) /
                         C80179;
    const double C4683 =
        (C80831 * C80829 * C81123 + C80996 * (C80996 * C81127 + C80833 * ae) +
         C80996 * C80833 * ae) /
        C80179;
    const double C184 = C82581 * C176;
    const double C255 = C82592 * C247;
    const double C375 = C82581 * C366;
    const double C448 = C82592 * C442;
    const double C450 = C82592 * C443;
    const double C558 = C82581 * C552;
    const double C560 = C82581 * C553;
    const double C618 = C82592 * C609;
    const double C15835 = C82523 * C710;
    const double C2742 = C82592 * C810;
    const double C16006 = C82523 * C862;
    const double C3006 = C82592 * C956;
    const double C16154 = C82523 * C1008;
    const double C3259 = C82592 * C1106;
    const double C18273 = C82523 * C1170;
    const double C5825 = C82581 * C1218;
    const double C18544 = C82523 * C1322;
    const double C6095 = C82581 * C1373;
    const double C18822 = C82523 * C1468;
    const double C6358 = C82581 * C1515;
    const double C80885 = C80830 * C80881;
    const double C80901 = be * C80881;
    const double C81202 = C80952 * C80881;
    const double C81256 = C80996 * C80881;
    const double C81579 = C80881 * C81084;
    const double C81890 = C80881 * C81182;
    const double C80884 = C80830 * C80878;
    const double C80900 = ae * C80878;
    const double C81201 = C80952 * C80878;
    const double C81255 = C80996 * C80878;
    const double C81591 = C80878 * C81084;
    const double C81914 = C80878 * C81182;
    const double C80883 = C80866 + C80877;
    const double C80916 = C80902 * ae;
    const double C80914 = C80902 * C80834;
    const double C80913 = C80830 * C80902;
    const double C80912 = C80902 * be;
    const double C80924 = C80902 + C80918;
    const double C81098 = C80902 + C81097;
    const double C81196 = C80902 + C81195;
    const double C81703 = C80902 * C81084;
    const double C81702 = C80952 * C80902;
    const double C81984 = C80902 * C81182;
    const double C82074 = C80996 * C80902;
    const double C80973 = C80971 * C80834;
    const double C80978 = ae * C80971;
    const double C80977 = C80830 * C80971;
    const double C81602 = C80952 * C80971;
    const double C81778 = C80996 * C80971;
    const double C81926 = C80971 * C81182;
    const double C81017 = C81015 * C80834;
    const double C81022 = ae * C81015;
    const double C81021 = C80830 * C81015;
    const double C81642 = C81015 * C81084;
    const double C81734 = C80952 * C81015;
    const double C81792 = C80996 * C81015;
    const double C81060 = C81058 * C80834;
    const double C81065 = be * C81058;
    const double C81064 = C80830 * C81058;
    const double C81605 = C80952 * C81058;
    const double C81779 = C80996 * C81058;
    const double C81905 = C81058 * C81182;
    const double C81093 = C80866 + C81092;
    const double C81141 = C81139 * C80834;
    const double C81146 = be * C81139;
    const double C81145 = C80830 * C81139;
    const double C81656 = C81139 * C81084;
    const double C81750 = C80952 * C81139;
    const double C81941 = C80996 * C81139;
    const double C81191 = C80866 + C81190;
    const double C4982 = (C80952 * C80843 + C81491 * C81182) / C80179;
    const double C80869 = C80864 + C80865;
    const double C4981 = (C80952 * C80842 + C81506 * C81182) / C80179;
    const double C80880 = C80845 + C80874;
    const double C80882 = C80873 * ae;
    const double C80879 = C80873 * be;
    const double C80906 = 2 * C80873;
    const double C81367 = C80952 * C80873;
    const double C81555 = C80996 * C80873;
    const double C81609 = C80845 + C81604;
    const double C81611 = C81603 * ae;
    const double C81608 = C81603 * be;
    const double C81704 = 2 * C81603;
    const double C81866 = C80996 * C81603;
    const double C81945 = C80845 + C81940;
    const double C81947 = C81939 * ae;
    const double C81944 = C81939 * be;
    const double C82076 = 2 * C81939;
    const double C4199 = (C80830 * C80959 + C80966 * C81182) / C80179;
    const double C1853 = (C80830 * C81003 + C81010 * C81084) / C80179;
    const double C81600 = C80967 + C81054;
    const double C4406 = (C80830 * C81046 + C81053 * C81182) / C80179;
    const double C81936 = C81011 + C81135;
    const double C2242 = (C80830 * C81127 + C81134 * C81084) / C80179;
    const double C81676 = C80881 + C81674;
    const double C81978 = C81976 * C81182;
    const double C82034 = C80881 + C82032;
    const double C81690 = C80878 + C81688;
    const double C81993 = C81991 * C81182;
    const double C82051 = C80878 + C82049;
    const double C80989 = C80971 + C80987;
    const double C81626 = C80952 * C81621;
    const double C81932 = C81621 * C81182;
    const double C82062 = C80971 + C82060;
    const double C81033 = C81015 + C81031;
    const double C81649 = C81647 * C81084;
    const double C81955 = C80996 * C81647;
    const double C82116 = C80952 * C81647;
    const double C81740 = C81015 + C81736;
    const double C82010 = C80996 * C82005;
    const double C81076 = C81058 + C81074;
    const double C81629 = C80952 * C81624;
    const double C81909 = C81624 * C81182;
    const double C81987 = C81058 + C81985;
    const double C81157 = C81139 + C81155;
    const double C81663 = C81661 * C81084;
    const double C81958 = C80996 * C81661;
    const double C82118 = C80952 * C81661;
    const double C81756 = C81139 + C81752;
    const double C82013 = C80996 * C82008;
    const double C178 =
        (2 * (ae * C80959 + C80830 * C80963) + ae * (C80959 + C80964 * C80834) +
         C80830 *
             (C80963 + ae * C80830 * C80964 +
              C80830 * (ae * C80964 + C80830 * C80868 * C80867 * C80958))) /
        C80184;
    const double C759 = (be * (C80830 * C80843 + C80833 * ae) +
                         C80952 * (ae * C80959 + C80830 * C80963)) /
                        C80184;
    const double C1219 = (C80996 * (ae * C80959 + C80830 * C80963)) / C80184;
    const double C1750 = (C80839 * C80835 * C80958 + be * C80952 * C80843 +
                          C80952 * (be * C80843 + C80952 * C80963)) /
                         C80184;
    const double C3447 = (C80996 * (be * C80843 + C80952 * C80963)) / C80184;
    const double C4202 = (C80839 * C80835 * C80958 + C80963 * C81182) / C80184;
    const double C80972 = C80830 * C80970;
    const double C81578 = C80952 * C80970;
    const double C2656 =
        (2 * (be * C80843 + C80952 * C80963) + be * (C80843 + C80856 * C81084) +
         C80952 * (C80963 + be * C80952 * C80856 +
                   C80952 * (C80865 + C80952 * C80970))) /
        C80184;
    const double C3448 = (C80996 * (C80963 + be * C80952 * C80856 +
                                    C80952 * (C80865 + C80952 * C80970))) /
                         C80184;
    const double C5063 =
        (be * C80843 + C80952 * C80963 + (C80865 + C80952 * C80970) * C81182) /
        C80184;
    const double C5819 =
        (2 * C80996 * C80963 + C80996 * (C80963 + C80970 * C81182)) / C80184;
    const double C80986 = C80830 * C80982;
    const double C81672 = C80952 * C80982;
    const double C82026 = C80982 * C81182;
    const double C30074 =
        (3 * (C80963 + C80970 * C81182) +
         C80996 * (2 * C80996 * C80970 + C80996 * (C80970 + C80982 * C81182))) /
        C80184;
    const double C319 =
        (2 * (be * C81046 + C80830 * C81050) + be * (C81046 + C81051 * C80834) +
         C80830 *
             (C81050 + be * C80830 * C81051 +
              C80830 * (be * C81051 + C80830 * C80868 * C80867 * C81045))) /
        C80184;
    const double C863 = (ae * (C80830 * C80842 + C80833 * be) +
                         C80952 * (be * C81046 + C80830 * C81050)) /
                        C80184;
    const double C1323 = (C80996 * (be * C81046 + C80830 * C81050)) / C80184;
    const double C1954 = (C80839 * C80835 * C81045 + ae * C80952 * C80842 +
                          C80952 * (ae * C80842 + C80952 * C81050)) /
                         C80184;
    const double C3619 =
        (ae * C80996 * C80842 + C80952 * C80996 * C81050) / C80184;
    const double C4409 = (C80839 * C80835 * C81045 + C81050 * C81182) / C80184;
    const double C81059 = C80830 * C81057;
    const double C81590 = C80952 * C81057;
    const double C81772 = C80996 * C81057;
    const double C2824 =
        (2 * (ae * C80842 + C80952 * C81050) + ae * (C80842 + C80855 * C81084) +
         C80952 * (C81050 + ae * C80952 * C80855 +
                   C80952 * (C80864 + C80952 * C81057))) /
        C80184;
    const double C3622 =
        (C80996 * C81050 + ae * C80996 * C80952 * C80855 +
         C80952 * (ae * C80996 * C80855 + C80952 * C80996 * C81057)) /
        C80184;
    const double C5223 = (ae * (C80842 + C80855 * C81182) +
                          C80952 * (C81050 + C81057 * C81182)) /
                         C80184;
    const double C5987 =
        (2 * C80996 * C81050 + C80996 * (C81050 + C81057 * C81182)) / C80184;
    const double C81073 = C80830 * C81069;
    const double C81686 = C80952 * C81069;
    const double C81774 = C80996 * C81069;
    const double C81827 = C81069 * C81182;
    const double C249 =
        (2 * (ae * C81003 + C80830 * C81007) + ae * (C81003 + C81008 * C80834) +
         C80830 *
             (C81007 + ae * C80830 * C81008 +
              C80830 * (ae * C81008 + C80830 * C80868 * C80867 * C81002))) /
        C80184;
    const double C811 = (C80952 * (ae * C81003 + C80830 * C81007)) / C80184;
    const double C1271 = (be * (C80830 * C80843 + C80833 * ae) +
                          C80996 * (ae * C81003 + C80830 * C81007)) /
                         C80184;
    const double C1856 = (C80839 * C80835 * C81002 + C81007 * C81084) / C80184;
    const double C3533 =
        (be * C80952 * C80843 + C80996 * C80952 * C81007) / C80184;
    const double C4303 = (C80839 * C80835 * C81002 + be * C80996 * C80843 +
                          C80996 * (be * C80843 + C80996 * C81007)) /
                         C80184;
    const double C81016 = C80830 * C81014;
    const double C81844 = C80952 * C81014;
    const double C81889 = C80996 * C81014;
    const double C2736 =
        (2 * C80952 * C81007 + C80952 * (C81007 + C81014 * C81084)) / C80184;
    const double C3536 = (be * (C80843 + C80856 * C81084) +
                          C80996 * (C81007 + C81014 * C81084)) /
                         C80184;
    const double C5143 = (C80952 * C81007 + be * C80996 * C81491 +
                          C80996 * (be * C81491 + C80996 * C80952 * C81014)) /
                         C80184;
    const double C5907 =
        (2 * (be * C80843 + C80996 * C81007) + be * (C80843 + C80856 * C81182) +
         C80996 * (C81007 + be * C80996 * C80856 +
                   C80996 * (C80865 + C80996 * C81014))) /
        C80184;
    const double C81030 = C80830 * C81026;
    const double C81682 = C81026 * C81084;
    const double C81975 = C80952 * C81026;
    const double C82030 = C80996 * C81026;
    const double C15510 =
        (3 * (C81007 + C81014 * C81084) +
         C80952 * (2 * C80952 * C81014 + C80952 * (C81014 + C81026 * C81084))) /
        C80184;
    const double C444 =
        (2 * C80830 * C81110 +
         C80830 * (C81110 + C80868 * C80867 * C81107 * C80834)) /
        C80184;
    const double C957 =
        (ae * C80830 * C81003 + C80952 * C80830 * C81110) / C80184;
    const double C1417 =
        (be * C80830 * C81046 + C80996 * C80830 * C81110) / C80184;
    const double C2155 = (C80839 * C80835 * C81107 + ae * C80952 * C81003 +
                          C80952 * (ae * C81003 + C80952 * C81110)) /
                         C80184;
    const double C3779 = (ae * (C80996 * C81003 + C80833 * be) +
                          C80952 * (be * C81046 + C80996 * C81110)) /
                         C80184;
    const double C4593 = (C80839 * C80835 * C81107 + be * C80996 * C81046 +
                          C80996 * (be * C81046 + C80996 * C81110)) /
                         C80184;
    const double C81379 = C80830 * C81113;
    const double C81641 = C80952 * C81113;
    const double C81789 = C80996 * C81113;
    const double C445 =
        (3 * (C81110 + C81113 * C80834) +
         C80830 * (2 * C80830 * C81113 +
                   C80830 * (C81113 + C80904 * C80903 * C81107 * C80834))) /
        C80184;
    const double C958 = (ae * (C81003 + C81008 * C80834) +
                         C80952 * (C81110 + C81113 * C80834)) /
                        C80184;
    const double C1418 = (be * (C81046 + C81051 * C80834) +
                          C80996 * (C81110 + C81113 * C80834)) /
                         C80184;
    const double C2156 = (C80830 * C81110 + ae * C80952 * C81010 +
                          C80952 * (ae * C81010 + C80952 * C80830 * C81113)) /
                         C80184;
    const double C3002 =
        (2 * (ae * C81003 + C80952 * C81110) + ae * (C81003 + C81008 * C81084) +
         C80952 * (C81110 + ae * C80952 * C81008 +
                   C80952 * (C81011 + C80952 * C81113))) /
        C80184;
    const double C6185 =
        (2 * (be * C81046 + C80996 * C81110) + be * (C81046 + C81051 * C81182) +
         C80996 * (C81110 + be * C80996 * C81051 +
                   C80996 * (C81054 + C80996 * C81113))) /
        C80184;
    const double C81117 = C81116 * C80834;
    const double C81646 = C80830 * C81116;
    const double C81735 = C80952 * C81116;
    const double C81793 = C80996 * C81116;
    const double C506 =
        (2 * (be * C81127 + C80830 * C81131) + be * (C81127 + C81132 * C80834) +
         C80830 *
             (C81131 + be * C80830 * C81132 +
              C80830 * (be * C81132 + C80830 * C80868 * C80867 * C81126))) /
        C80184;
    const double C1009 = (C80952 * (be * C81127 + C80830 * C81131)) / C80184;
    const double C1469 = (ae * (C80830 * C80842 + C80833 * be) +
                          C80996 * (be * C81127 + C80830 * C81131)) /
                         C80184;
    const double C2245 = (C80839 * C80835 * C81126 + C81131 * C81084) / C80184;
    const double C3865 =
        (ae * C80952 * C80842 + C80996 * C80952 * C81131) / C80184;
    const double C4687 = (C80839 * C80835 * C81126 + ae * C80996 * C80842 +
                          C80996 * (ae * C80842 + C80996 * C81131)) /
                         C80184;
    const double C81140 = C80830 * C81138;
    const double C81853 = C80952 * C81138;
    const double C81913 = C80996 * C81138;
    const double C3086 =
        (2 * C80952 * C81131 + C80952 * (C81131 + C81138 * C81084)) / C80184;
    const double C3868 = (ae * (C80842 + C80855 * C81084) +
                          C80996 * (C81131 + C81138 * C81084)) /
                         C80184;
    const double C5457 = (C80952 * C81131 + ae * C80996 * C81506 +
                          C80996 * (ae * C81506 + C80996 * C80952 * C81138)) /
                         C80184;
    const double C6265 =
        (2 * (ae * C80842 + C80996 * C81131) + ae * (C80842 + C80855 * C81182) +
         C80996 * (C81131 + ae * C80996 * C80855 +
                   C80996 * (C80864 + C80996 * C81138))) /
        C80184;
    const double C81154 = C80830 * C81150;
    const double C81747 = C81150 * C81084;
    const double C81990 = C80952 * C81150;
    const double C82047 = C80996 * C81150;
    const double C15695 =
        (3 * (C81131 + C81138 * C81084) +
         C80952 * (2 * C80952 * C81138 + C80952 * (C81138 + C81150 * C81084))) /
        C80184;
    const double C554 =
        (2 * C80830 * C81170 +
         C80830 * (C81170 + C80868 * C80867 * C81167 * C80834)) /
        C80184;
    const double C1056 =
        (be * C80830 * C81127 + C80952 * C80830 * C81170) / C80184;
    const double C1516 =
        (ae * C80830 * C80959 + C80996 * C80830 * C81170) / C80184;
    const double C2323 = (C80839 * C80835 * C81167 + be * C80952 * C81127 +
                          C80952 * (be * C81127 + C80952 * C81170)) /
                         C80184;
    const double C3945 = (ae * (C80952 * C80959 + C80833 * be) +
                          C80996 * (be * C81127 + C80952 * C81170)) /
                         C80184;
    const double C4765 = (C80839 * C80835 * C81167 + ae * C80996 * C80959 +
                          C80996 * (ae * C80959 + C80996 * C81170)) /
                         C80184;
    const double C81386 = C80830 * C81173;
    const double C81655 = C80952 * C81173;
    const double C81925 = C80996 * C81173;
    const double C555 =
        (3 * (C81170 + C81173 * C80834) +
         C80830 * (2 * C80830 * C81173 +
                   C80830 * (C81173 + C80904 * C80903 * C81167 * C80834))) /
        C80184;
    const double C1057 = (be * (C81127 + C81132 * C80834) +
                          C80952 * (C81170 + C81173 * C80834)) /
                         C80184;
    const double C1517 = (ae * (C80959 + C80964 * C80834) +
                          C80996 * (C81170 + C81173 * C80834)) /
                         C80184;
    const double C2324 = (C80830 * C81170 + be * C80952 * C81134 +
                          C80952 * (be * C81134 + C80952 * C80830 * C81173)) /
                         C80184;
    const double C3175 =
        (2 * (be * C81127 + C80952 * C81170) + be * (C81127 + C81132 * C81084) +
         C80952 * (C81170 + be * C80952 * C81132 +
                   C80952 * (C81135 + C80952 * C81173))) /
        C80184;
    const double C6354 =
        (2 * (ae * C80959 + C80996 * C81170) + ae * (C80959 + C80964 * C81182) +
         C80996 * (C81170 + ae * C80996 * C80964 +
                   C80996 * (C80967 + C80996 * C81173))) /
        C80184;
    const double C81177 = C81176 * C80834;
    const double C81660 = C80830 * C81176;
    const double C81751 = C80952 * C81176;
    const double C82058 = C80996 * C81176;
    const double C90 = -(C82940 * C82553 * de) / C82554;
    const double C91 = C82890 * C82940;
    const double C688 = -(C82939 * C82559 * de) / C82554;
    const double C689 = C82890 * C82939;
    const double C1149 = -(C82938 * C82566 * de) / C82554;
    const double C1150 = C82890 * C82938;
    const double C80216 = C80211 / C80185;
    const double C80215 = C80177 * C80211;
    const double C80240 = 2 * C80211;
    const double C80214 = C80210 + C80187;
    const double C80201 = C80194 / C80184;
    const double C80199 = 2 * C80194;
    const double C80241 = -4 * C80194;
    const double C82526 = C82525 * C82519;
    const double C82532 = C82525 / C80191;
    const double C82846 = C82531 * C82525;
    const double C82844 = C82525 / C80179;
    const double C1641 = (C82523 * std::pow(C82519, 2)) / C80184 + C82524;
    const double C82534 = C82533 * C82519;
    const double C82862 = C82533 / C80283;
    const double C82850 = C82518 * C82533;
    const double C82848 = 2 * C82533;
    const double C85 = C82533 / C82852;
    const double C44656 = C82533 / C80185;
    const double C82881 = C82845 / C80179;
    const double C1642 = (-2 * C82531 * C82845) / C80179;
    const double C82907 = C82879 / C80184;
    const double C80339 = 2 * C80331;
    const double C80452 = C80331 / C80184;
    const double C80509 = -4 * C80331;
    const double C1745 =
        ((0 * ae) / C80179 - C80331 / C80184) / C80185 + (0 * ae) / C80179;
    const double C6585 = (0 * ae) / C80179 - C80331 / C80184;
    const double C187 = C168 * C104;
    const double C185 = C168 * C111;
    const double C183 = C168 * C103;
    const double C374 = C168 * C311;
    const double C372 = C168 * C170;
    const double C559 = C168 * C498;
    const double C4208 = C168 * C1154;
    const double C5828 = C168 * C4108;
    const double C5826 = C168 * C1165;
    const double C5824 = C168 * C1155;
    const double C6094 = C168 * C1317;
    const double C6092 = C168 * C1213;
    const double C6359 = C168 * C1463;
    const double C377 = C364 * C104;
    const double C373 = C364 * C103;
    const double C4493 = C364 * C1154;
    const double C6099 = C364 * C4108;
    const double C6093 = C364 * C1155;
    const double C13256 = (C82581 * std::pow(C82631, 2)) / C80184 + C82630;
    const double C82633 = C82632 * C82631;
    const double C82638 = C82632 / C80191;
    const double C82863 = C82632 / C80179;
    const double C82859 = C82531 * C82632;
    const double C1744 =
        (((C82581 - (C80306 * 2 * C80331) / C80179) * ae) / C80179 -
         C80329 / C80191) /
            C80185 +
        ((C80306 * ((0 * ae) / C80179 - C80331 / C80184) + C82639) * ae) /
            C80179;
    const double C82640 = C82639 * C82631;
    const double C82871 = C82639 / C80283;
    const double C82869 = C82629 * C82639;
    const double C82868 = 2 * C82639;
    const double C15404 = C82639 / C82852;
    const double C44659 = C82639 / C80185;
    const double C82898 = C82865 / C80179;
    const double C13257 = (-2 * C82531 * C82865) / C80179;
    const double C82915 = C82891 / C80184;
    const double C80365 = 2 * C80357;
    const double C80602 = C80357 / C80184;
    const double C80659 = -4 * C80357;
    const double C4298 =
        ((0 * ae) / C80179 - C80357 / C80184) / C80185 + (0 * ae) / C80179;
    const double C8608 = (0 * ae) / C80179 - C80357 / C80184;
    const double C258 = C239 * C104;
    const double C256 = C239 * C111;
    const double C254 = C239 * C103;
    const double C449 = C239 * C311;
    const double C617 = C239 * C498;
    const double C615 = C239 * C241;
    const double C1862 = C239 * C694;
    const double C2745 = C239 * C1653;
    const double C2743 = C239 * C705;
    const double C2741 = C239 * C695;
    const double C3007 = C239 * C857;
    const double C3258 = C239 * C1003;
    const double C3256 = C239 * C805;
    const double C620 = C607 * C104;
    const double C616 = C607 * C103;
    const double C2420 = C607 * C694;
    const double C3261 = C607 * C1653;
    const double C3257 = C607 * C695;
    const double C25720 = (C82592 * std::pow(C82671, 2)) / C80184 + C82670;
    const double C82673 = C82672 * C82671;
    const double C82678 = C82672 / C80191;
    const double C82864 = C82672 / C80179;
    const double C82861 = C82531 * C82672;
    const double C4297 =
        (((C82592 - (C80309 * 2 * C80357) / C80179) * ae) / C80179 -
         C80355 / C80191) /
            C80185 +
        ((C80309 * ((0 * ae) / C80179 - C80357 / C80184) + C82679) * ae) /
            C80179;
    const double C82680 = C82679 * C82671;
    const double C82878 = C82679 / C80283;
    const double C82876 = C82669 * C82679;
    const double C82875 = 2 * C82679;
    const double C30021 = C82679 / C82852;
    const double C61595 = C82679 / C80185;
    const double C82903 = C82872 / C80179;
    const double C25721 = (-2 * C82531 * C82872) / C80179;
    const double C82917 = C82894 / C80184;
    const double C80478 = C80473 / C80185;
    const double C80477 = C80306 * C80473;
    const double C80508 = 2 * C80473;
    const double C80628 = C80623 / C80185;
    const double C80627 = C80309 * C80623;
    const double C80658 = 2 * C80623;
    const double C80481 = C80476 + C80447;
    const double C80631 = C80626 + C80597;
    const double C189 = C168 * C113;
    const double C260 = C239 * C113;
    const double C1864 = C239 * C703;
    const double C4210 = C168 * C1163;
    const double C2747 = C239 * C1658;
    const double C15955 = C239 * C2533;
    const double C5830 = C168 * C4113;
    const double C30902 = C168 * C5696;
    const double C19979 = C82533 * C702;
    const double C40730 = C82533 * C702;
    const double C23268 = C82533 * C1162;
    const double C44033 = C82533 * C1162;
    const double C16008 = C82523 * C1657;
    const double C16012 = C82523 * C2532;
    const double C17738 = C82523 * C3353;
    const double C17734 = C82523 * C3359;
    const double C18546 = C82523 * C4112;
    const double C30995 = C82523 * C5695;
    const double C80862 = C80859 + C80853;
    const double C81376 = C81374 + C80853;
    const double C81564 = C81562 + C80853;
    const double C1747 =
        (C80830 * C80959 + C80952 * (C80952 * C80966 + C80851 * be) +
         C80952 * C80851 * be) /
        C80179;
    const double C1951 =
        (C80830 * C81046 + C80952 * (C80952 * C81053 + C80851 * ae) +
         C80952 * C80851 * ae) /
        C80179;
    const double C3443 = (C80996 * (C80952 * C80966 + C80851 * be)) / C80179;
    const double C3528 =
        (C80996 * C80952 * C81010 + C80952 * C80851 * be) / C80179;
    const double C3614 = (C80996 * (C80952 * C81053 + C80851 * ae)) / C80179;
    const double C3860 =
        (C80996 * C80952 * C81134 + C80952 * C80851 * ae) / C80179;
    const double C4300 =
        (C80830 * C81003 + C80996 * (C80996 * C81010 + C80851 * be) +
         C80996 * C80851 * be) /
        C80179;
    const double C4684 =
        (C80830 * C81127 + C80996 * (C80996 * C81134 + C80851 * ae) +
         C80996 * C80851 * ae) /
        C80179;
    const double C1654 = C80830 * C80833 + C80851 * C81084;
    const double C2526 =
        2 * C80952 * C80851 + C80952 * (C80851 + C80873 * C81084);
    const double C3344 = C80996 * (C80851 + C80873 * C81084);
    const double C3347 = C80996 * C80952 * C80851;
    const double C4109 = C80830 * C80833 + C80851 * C81182;
    const double C5689 =
        2 * C80996 * C80851 + C80996 * (C80851 + C80873 * C81182);
    const double C80861 = C80858 + C80850;
    const double C81375 = C81372 + C80850;
    const double C81563 = C81560 + C80850;
    const double C5377 = (ae * (C81003 + C80996 * (C80996 * C81008 + C80850) +
                                C80996 * C80845 * be) +
                          C80952 * (C81110 + be * C80996 * C81051 +
                                    C80996 * (C81054 + C80996 * C81113))) /
                         C80184;
    const double C80860 = C80857 * C80182;
    const double C81089 = C81088 * C80182;
    const double C81187 = C81186 * C80182;
    const double C3780 = (be * C81046 + C80996 * C81110 +
                          ae * (C80996 * C80952 * C81008 + C81373 * be) +
                          C80952 * (ae * (C80996 * C81008 + C80850) +
                                    C80952 * (C81054 + C80996 * C81113))) /
                         C80184;
    const double C5140 =
        (C80952 * C81003 + C80996 * (C80996 * C81521 + C81373 * be) +
         C80996 * C81373 * be) /
        C80179;
    const double C5454 =
        (C80952 * C81127 + C80996 * (C80996 * C81522 + C81373 * ae) +
         C80996 * C81373 * ae) /
        C80179;
    const double C4976 = C80952 * C80833 + C81373 * C81182;
    const double C18262 =
        2 * C80996 * C81373 + C80996 * (C81373 + C81603 * C81182);
    const double C379 = C82581 * C367;
    const double C622 = C82592 * C610;
    const double C191 = C168 * C105;
    const double C262 = C239 * C105;
    const double C381 = C364 * C105;
    const double C624 = C607 * C105;
    const double C1866 = C239 * C693;
    const double C2429 = C607 * C693;
    const double C4212 = C168 * C1153;
    const double C4497 = C364 * C1153;
    const double C15953 = C239 * C2527;
    const double C16249 = C607 * C2527;
    const double C30900 = C168 * C5690;
    const double C31049 = C364 * C5690;
    const double C188 = C82581 * C177;
    const double C186 = C82581 * C171;
    const double C376 = C168 * C171;
    const double C190 = C82581 * C172;
    const double C380 = C168 * C172;
    const double C6589 = C82639 * C754;
    const double C37968 = C82639 * C754;
    const double C6597 = C82639 * C755;
    const double C37976 = C82639 * C755;
    const double C4207 = C82581 * C1214;
    const double C4492 = C168 * C1214;
    const double C4211 = C82581 * C1215;
    const double C4496 = C168 * C1215;
    const double C12470 = C82639 * C3441;
    const double C43821 = C82639 * C3441;
    const double C5827 = C82581 * C4198;
    const double C6098 = C168 * C4198;
    const double C30899 = C82581 * C5816;
    const double C31048 = C168 * C5816;
    const double C259 = C82592 * C248;
    const double C257 = C82592 * C242;
    const double C619 = C239 * C242;
    const double C261 = C82592 * C243;
    const double C623 = C239 * C243;
    const double C1861 = C82592 * C806;
    const double C2419 = C239 * C806;
    const double C1865 = C82592 * C807;
    const double C2428 = C239 * C807;
    const double C8612 = C82679 * C1266;
    const double C52463 = C82679 * C1266;
    const double C8620 = C82679 * C1267;
    const double C52471 = C82679 * C1267;
    const double C2744 = C82592 * C1852;
    const double C3260 = C239 * C1852;
    const double C15952 = C82592 * C2733;
    const double C16248 = C239 * C2733;
    const double C11642 = C82679 * C3527;
    const double C55450 = C82679 * C3527;
    const double C22224 = C82679 * C3530;
    const double C55458 = C82679 * C3530;
    const double C378 = C168 * C312;
    const double C451 = C239 * C312;
    const double C382 = C168 * C313;
    const double C453 = C239 * C313;
    const double C2161 = C239 * C858;
    const double C2165 = C239 * C859;
    const double C4494 = C168 * C1318;
    const double C4498 = C168 * C1319;
    const double C3009 = C239 * C1950;
    const double C6100 = C168 * C4405;
    const double C31050 = C168 * C5984;
    const double C561 = C168 * C499;
    const double C621 = C239 * C499;
    const double C563 = C168 * C500;
    const double C625 = C239 * C500;
    const double C2421 = C239 * C1004;
    const double C2430 = C239 * C1005;
    const double C4771 = C168 * C1464;
    const double C4775 = C168 * C1465;
    const double C3262 = C239 * C2241;
    const double C16250 = C239 * C3083;
    const double C6361 = C168 * C4683;
    const double C80888 = C80885 + C80876;
    const double C81205 = be * C81202;
    const double C81673 = 2 * C81202;
    const double C81974 = C80996 * C81202;
    const double C18266 =
        (2 * C80996 * C81491 + C80996 * (C81491 + C81202 * C81182)) / C80179;
    const double C81259 = be * C81256;
    const double C82031 = 2 * C81256;
    const double C81581 = C80856 + C81579;
    const double C81892 = C80856 + C81890;
    const double C80887 = C80884 + C80872;
    const double C80909 = C80900 + C80901;
    const double C81204 = ae * C81201;
    const double C81687 = 2 * C81201;
    const double C81989 = C80996 * C81201;
    const double C16985 =
        (C81050 + C81057 * C81182 + ae * (C81506 + C81201 * C81182) +
         C80952 * (ae * (C80855 + C80878 * C81182) +
                   C80952 * (C81057 + C81069 * C81182))) /
        C80184;
    const double C18265 =
        (2 * C80996 * C81506 + C80996 * (C81506 + C81201 * C81182)) / C80179;
    const double C81258 = ae * C81255;
    const double C82048 = 2 * C81255;
    const double C81593 = C80855 + C81591;
    const double C81916 = C80855 + C81914;
    const double C80886 = C80883 * C80182;
    const double C80933 = C80928 + C80916;
    const double C81712 = C81706 + C80916;
    const double C82086 = C82079 + C80916;
    const double C80921 = C80866 + C80914;
    const double C80923 = C80913 * ae;
    const double C80920 = C80913 * be;
    const double C81623 = C80913 * C81084;
    const double C81622 = C80952 * C80913;
    const double C81957 = C80913 * C81182;
    const double C81956 = C80996 * C80913;
    const double C80931 = C80925 + C80912;
    const double C81709 = C81701 + C80912;
    const double C82083 = C82073 + C80912;
    const double C80930 = C80924 * C80182;
    const double C81099 = C81098 * C80182;
    const double C81197 = C81196 * C80182;
    const double C81711 = C80866 + C81703;
    const double C81713 = C81702 * ae;
    const double C81710 = C81702 * be;
    const double C82007 = C81702 * C81182;
    const double C82006 = C80996 * C81702;
    const double C81986 = C80866 + C81984;
    const double C82087 = C82074 * ae;
    const double C82084 = C82074 * be;
    const double C80975 = C80964 + C80973;
    const double C80983 = 2 * C80977;
    const double C80981 = ae * C80977;
    const double C81366 = C80952 * C80977;
    const double C81930 = C80996 * C80977;
    const double C5817 =
        (2 * C80996 * C80966 + C80996 * (C80966 + C80977 * C81182)) / C80179;
    const double C81607 = C81602 + C80872;
    const double C81781 = ae * C81778;
    const double C82059 = 2 * C81778;
    const double C81928 = C80964 + C81926;
    const double C81019 = C81008 + C81017;
    const double C81027 = 2 * C81021;
    const double C81025 = ae * C81021;
    const double C81518 = C80952 * C81021;
    const double C81554 = C80996 * C81021;
    const double C2734 =
        (2 * C80952 * C81010 + C80952 * (C81010 + C81021 * C81084)) / C80179;
    const double C3531 = (C80996 * (C81010 + C81021 * C81084) +
                          (C80851 + C80873 * C81084) * be) /
                         C80179;
    const double C81644 = C81008 + C81642;
    const double C81739 = 2 * C81734;
    const double C81737 = ae * C81734;
    const double C81865 = C80996 * C81734;
    const double C81794 = C81792 + C80872;
    const double C81062 = C81051 + C81060;
    const double C81698 = C80978 + C81065;
    const double C81070 = 2 * C81064;
    const double C81068 = be * C81064;
    const double C81368 = C80952 * C81064;
    const double C81908 = C80996 * C81064;
    const double C5985 =
        (2 * C80996 * C81053 + C80996 * (C81053 + C81064 * C81182)) / C80179;
    const double C81610 = C81605 + C80876;
    const double C81782 = be * C81779;
    const double C82042 = 2 * C81779;
    const double C81906 = C81051 + C81905;
    const double C81094 = C81093 * C80182;
    const double C81143 = C81132 + C81141;
    const double C82070 = C81022 + C81146;
    const double C81151 = 2 * C81145;
    const double C81149 = be * C81145;
    const double C81519 = C80952 * C81145;
    const double C81556 = C80996 * C81145;
    const double C3084 =
        (2 * C80952 * C81134 + C80952 * (C81134 + C81145 * C81084)) / C80179;
    const double C3863 = (C80996 * (C81134 + C81145 * C81084) +
                          (C80851 + C80873 * C81084) * ae) /
                         C80179;
    const double C81658 = C81132 + C81656;
    const double C81755 = 2 * C81750;
    const double C81753 = be * C81750;
    const double C81867 = C80996 * C81750;
    const double C81946 = C81941 + C80876;
    const double C81192 = C81191 * C80182;
    const double C17742 = C82523 * C4981;
    const double C106 = 3 * (C80833 + C80845 * C80834) +
                        C80830 * (2 * C80851 + C80830 * C80880);
    const double C692 = C80952 * (2 * C80851 + C80830 * C80880);
    const double C1152 = C80996 * (2 * C80851 + C80830 * C80880);
    const double C1655 = C80833 + C80845 * C80834 + C80880 * C81084;
    const double C3346 = C80996 * C80952 * C80880;
    const double C4110 = C80833 + C80845 * C80834 + C80880 * C81182;
    const double C4975 = C80952 * C80851 + C81367 * C81182;
    const double C15407 = 3 * (C80833 + C80845 * C81084) +
                          C80952 * (2 * C81373 + C80952 * C81609);
    const double C16304 = C80996 * (2 * C81373 + C80952 * C81609);
    const double C16745 = C80833 + C80845 * C81084 + C81609 * C81182;
    const double C30022 = 3 * (C80833 + C80845 * C81182) +
                          C80996 * (2 * C81561 + C80996 * C81945);
    const double C4215 = C82581 * C4199;
    const double C4500 = C168 * C4199;
    const double C1869 = C82592 * C1853;
    const double C2423 = C239 * C1853;
    const double C4502 = C168 * C4406;
    const double C2425 = C239 * C2242;
    const double C81678 = C80952 * C81676;
    const double C81980 = C81202 + C81978;
    const double C82036 = C80996 * C82034;
    const double C81692 = C80952 * C81690;
    const double C81995 = C81201 + C81993;
    const double C82053 = C80996 * C82051;
    const double C80991 = C80830 * C80989;
    const double C81359 = C80952 * C80989;
    const double C81934 = C80977 + C81932;
    const double C82064 = C80996 * C82062;
    const double C81035 = C80830 * C81033;
    const double C81515 = C80952 * C81033;
    const double C81548 = C80996 * C81033;
    const double C81651 = C81021 + C81649;
    const double C82119 = C80996 * C82116;
    const double C81743 = C80952 * C81740;
    const double C81858 = C80996 * C81740;
    const double C81078 = C80830 * C81076;
    const double C81361 = C80952 * C81076;
    const double C81910 = C81064 + C81909;
    const double C82043 = C80996 * C81987;
    const double C81159 = C80830 * C81157;
    const double C81516 = C80952 * C81157;
    const double C81550 = C80996 * C81157;
    const double C81665 = C81145 + C81663;
    const double C82120 = C80996 * C82118;
    const double C81759 = C80952 * C81756;
    const double C81860 = C80996 * C81756;
    const double C192 = C82581 * C178;
    const double C6593 = C82639 * C759;
    const double C37972 = C82639 * C759;
    const double C4209 = C82581 * C1219;
    const double C12474 = C82639 * C3447;
    const double C43825 = C82639 * C3447;
    const double C5829 = C82581 * C4202;
    const double C80974 = C80967 + C80972;
    const double C81580 = C80865 + C81578;
    const double C18372 = C82893 * C3448;
    const double C29390 = C82893 * C3448;
    const double C33322 = C82639 * C5063;
    const double C43833 = C82639 * C5063;
    const double C30901 = C82581 * C5819;
    const double C80988 = C80978 + C80986;
    const double C81675 = C80901 + C81672;
    const double C82027 = C80970 + C82026;
    const double C30905 = C82581 * C30074;
    const double C19983 = C82533 * C863;
    const double C40734 = C82533 * C863;
    const double C23272 = C82533 * C1323;
    const double C44037 = C82533 * C1323;
    const double C16010 = C82523 * C1954;
    const double C17736 = C82523 * C3619;
    const double C18548 = C82523 * C4409;
    const double C81061 = C81054 + C81059;
    const double C81592 = C80864 + C81590;
    const double C16014 = C82523 * C2824;
    const double C17740 = C82523 * C3622;
    const double C17744 = C82523 * C5223;
    const double C30997 = C82523 * C5987;
    const double C81075 = C81065 + C81073;
    const double C81689 = C80900 + C81686;
    const double C81775 = C80952 * C81774;
    const double C81828 = C81057 + C81827;
    const double C263 = C82592 * C249;
    const double C1863 = C82592 * C811;
    const double C8616 = C82679 * C1271;
    const double C52467 = C82679 * C1271;
    const double C2746 = C82592 * C1856;
    const double C11646 = C82679 * C3533;
    const double C55454 = C82679 * C3533;
    const double C81018 = C81011 + C81016;
    const double C81891 = C80865 + C81889;
    const double C15954 = C82592 * C2736;
    const double C22228 = C82679 * C3536;
    const double C55462 = C82679 * C3536;
    const double C17644 = C82896 * C5143;
    const double C28720 = C82896 * C5143;
    const double C81032 = C81022 + C81030;
    const double C81683 = C81014 + C81682;
    const double C81977 = C80996 * C81975;
    const double C82033 = C80901 + C82030;
    const double C15958 = C82592 * C15510;
    const double C452 = C82592 * C444;
    const double C2160 = C82592 * C957;
    const double C8841 = C82679 * C1417;
    const double C52685 = C82679 * C1417;
    const double C3008 = C82592 * C2155;
    const double C11956 = C82679 * C3779;
    const double C55760 = C82679 * C3779;
    const double C3781 = (ae * (C80996 * C81010 + C80851 * be) +
                          C80952 * (be * C81053 + C80996 * C81379)) /
                         C80184;
    const double C4594 = (C80830 * C81110 + be * C80996 * C81053 +
                          C80996 * (be * C81053 + C80996 * C81379)) /
                         C80184;
    const double C81643 = C81011 + C81641;
    const double C81790 = C81054 + C81789;
    const double C454 = C82592 * C445;
    const double C2164 = C82592 * C958;
    const double C8845 = C82679 * C1418;
    const double C52689 = C82679 * C1418;
    const double C2162 = C82592 * C2156;
    const double C16106 = C82592 * C3002;
    const double C81118 = C81113 + C81117;
    const double C81648 = C80952 * C81646;
    const double C81878 = C80996 * C81646;
    const double C81738 = C81022 + C81735;
    const double C81795 = C81065 + C81793;
    const double C20201 = C82533 * C1009;
    const double C40952 = C82533 * C1009;
    const double C23570 = C82533 * C1469;
    const double C44371 = C82533 * C1469;
    const double C16156 = C82523 * C2245;
    const double C17988 = C82523 * C3865;
    const double C18824 = C82523 * C4687;
    const double C81142 = C81135 + C81140;
    const double C81915 = C80864 + C81913;
    const double C16158 = C82523 * C3086;
    const double C17992 = C82523 * C3868;
    const double C17990 = C82523 * C5457;
    const double C31151 = C82523 * C6265;
    const double C81156 = C81146 + C81154;
    const double C81748 = C81138 + C81747;
    const double C81992 = C80996 * C81990;
    const double C82050 = C80900 + C82047;
    const double C16160 = C82523 * C15695;
    const double C562 = C82581 * C554;
    const double C7059 = C82639 * C1056;
    const double C38432 = C82639 * C1056;
    const double C4770 = C82581 * C1516;
    const double C13080 = C82639 * C3945;
    const double C44477 = C82639 * C3945;
    const double C6360 = C82581 * C4765;
    const double C3947 = (ae * (C80952 * C80966 + C80851 * be) +
                          C80996 * (be * C81134 + C80952 * C81386)) /
                         C80184;
    const double C4766 = (C80830 * C81170 + ae * C80996 * C80966 +
                          C80996 * (ae * C80966 + C80996 * C81386)) /
                         C80184;
    const double C81657 = C81135 + C81655;
    const double C81927 = C80967 + C81925;
    const double C564 = C82581 * C555;
    const double C7063 = C82639 * C1057;
    const double C38436 = C82639 * C1057;
    const double C4774 = C82581 * C1517;
    const double C2332 = C82893 * C2324;
    const double C13860 = C82893 * C2324;
    const double C31198 = C82581 * C6354;
    const double C81178 = C81173 + C81177;
    const double C81662 = C80952 * C81660;
    const double C81931 = C80996 * C81660;
    const double C81754 = C81146 + C81751;
    const double C82061 = C80978 + C82058;
    const double C80220 = C80215 + 0;
    const double C80257 = C80254 + C80240;
    const double C80219 = C80214 / C80185;
    const double C80205 = C80190 - C80201;
    const double C80204 = C80177 * C80199;
    const double C1651 =
        ((-C80199 / C80179) / C80185 - (0 * be) / C80179) / C80185 -
        (0 * be) / C80179;
    const double C15405 = -C80199 / C80179;
    const double C39827 = (-C80199 / C80179) / C80185 - (0 * be) / C80179;
    const double C80247 = C80241 / C80179;
    const double C82527 = C82526 / C80184;
    const double C82882 = 2 * C82846;
    const double C19740 = C82844 * C710;
    const double C19997 = C82844 * C2824;
    const double C19993 = C82844 * C2532;
    const double C19989 = C82844 * C1954;
    const double C19985 = C82844 * C1657;
    const double C19981 = C82844 * C862;
    const double C19977 = C82844 * C704;
    const double C20207 = C82844 * C3086;
    const double C20203 = C82844 * C2245;
    const double C20199 = C82844 * C1008;
    const double C22340 = C82844 * C3622;
    const double C22336 = C82844 * C3353;
    const double C22332 = C82844 * C3619;
    const double C22328 = C82844 * C3359;
    const double C22646 = C82844 * C3868;
    const double C22642 = C82844 * C3865;
    const double C22961 = C82844 * C1170;
    const double C23270 = C82844 * C1322;
    const double C23266 = C82844 * C1164;
    const double C23568 = C82844 * C1468;
    const double C32602 = C82844 * C5223;
    const double C32598 = C82844 * C4981;
    const double C32900 = C82844 * C5457;
    const double C33528 = C82844 * C4409;
    const double C33524 = C82844 * C4112;
    const double C33844 = C82844 * C4687;
    const double C35597 = C82844 * C5987;
    const double C35593 = C82844 * C5695;
    const double C35805 = C82844 * C6265;
    const double C2541 = C1641 * C710;
    const double C2846 = C1641 * C1954;
    const double C2840 = C1641 * C1657;
    const double C2834 = C1641 * C862;
    const double C2828 = C1641 * C704;
    const double C3096 = C1641 * C2245;
    const double C3090 = C1641 * C1008;
    const double C5704 = C1641 * C1170;
    const double C6009 = C1641 * C4409;
    const double C6003 = C1641 * C4112;
    const double C5997 = C1641 * C1322;
    const double C5991 = C1641 * C1164;
    const double C6275 = C1641 * C4687;
    const double C6269 = C1641 * C1468;
    const double C11752 = C1641 * C3619;
    const double C11746 = C1641 * C3359;
    const double C12056 = C1641 * C3865;
    const double C82535 = C82534 / C80179;
    const double C82886 = C82850 / C80191;
    const double C82908 = C82844 - C82881;
    const double C39819 = -C82881;
    const double C2836 = C1642 * C863;
    const double C2830 = C1642 * C702;
    const double C3092 = C1642 * C1009;
    const double C5999 = C1642 * C1323;
    const double C5993 = C1642 * C1162;
    const double C6271 = C1642 * C1469;
    const double C82925 = C82907 + C82524;
    const double C80340 = C80306 * C80339;
    const double C13341 =
        ((-C80339 / C80179) / C80185 - (0 * be) / C80179) / C80185 -
        (0 * be) / C80179;
    const double C37964 = (-C80339 / C80179) / C80185 - (0 * be) / C80179;
    const double C80462 = C80458 - C80452;
    const double C80517 = C80509 / C80179;
    const double C2333 = C1745 * C2242;
    const double C29391 = C1745 * C3354;
    const double C29385 = C1745 * C3345;
    const double C29895 = C1745 * C3862;
    const double C6598 = C6585 * C693;
    const double C6594 = C6585 * C703;
    const double C6590 = C6585 * C694;
    const double C6829 = C6585 * C859;
    const double C6827 = C6585 * C755;
    const double C6821 = C6585 * C858;
    const double C6819 = C6585 * C754;
    const double C7064 = C6585 * C1005;
    const double C7060 = C6585 * C1004;
    const double C12475 = C6585 * C3360;
    const double C12471 = C6585 * C3348;
    const double C12776 = C6585 * C3613;
    const double C12774 = C6585 * C3441;
    const double C13081 = C6585 * C3859;
    const double C33323 = C6585 * C4982;
    const double C388 = C372 - C373;
    const double C6104 = C6092 - C6093;
    const double C13361 = C13256 * C177;
    const double C13355 = C13256 * C171;
    const double C13349 = C13256 * C176;
    const double C13343 = C13256 * C170;
    const double C13607 = C13256 * C367;
    const double C13595 = C13256 * C366;
    const double C13862 = C13256 * C553;
    const double C13856 = C13256 * C552;
    const double C18380 = C13256 * C4202;
    const double C18374 = C13256 * C4198;
    const double C18368 = C13256 * C1218;
    const double C18362 = C13256 * C1213;
    const double C18629 = C13256 * C1373;
    const double C18908 = C13256 * C4765;
    const double C18902 = C13256 * C1515;
    const double C21155 = C13256 * C1219;
    const double C21149 = C13256 * C1214;
    const double C21782 = C13256 * C1516;
    const double C82634 = C82633 / C80184;
    const double C6607 = C82863 * C178;
    const double C6603 = C82863 * C172;
    const double C6599 = C82863 * C177;
    const double C6595 = C82863 * C171;
    const double C6591 = C82863 * C176;
    const double C6587 = C82863 * C170;
    const double C6826 = C82863 * C367;
    const double C6818 = C82863 * C366;
    const double C7065 = C82863 * C554;
    const double C7061 = C82863 * C553;
    const double C7057 = C82863 * C552;
    const double C10543 = C82863 * C1215;
    const double C10539 = C82863 * C1219;
    const double C10535 = C82863 * C1214;
    const double C11195 = C82863 * C1517;
    const double C11191 = C82863 * C1516;
    const double C12472 = C82863 * C1218;
    const double C12468 = C82863 * C1213;
    const double C12773 = C82863 * C1373;
    const double C13078 = C82863 * C1515;
    const double C31441 = C82863 * C4199;
    const double C33320 = C82863 * C4202;
    const double C33316 = C82863 * C4198;
    const double C33947 = C82863 * C4765;
    const double C37334 = C82863 * C5819;
    const double C37330 = C82863 * C5816;
    const double C37748 = C82863 * C6354;
    const double C1743 =
        (((0 - (C80306 * C80329) / C80179) * ae) / C80179 - (0 * be) / C80191) /
            C80185 +
        ((C80306 * (((C82581 - (C80306 * 2 * C80331) / C80179) * ae) / C80179 -
                    C80329 / C80191) +
          C82863) *
         ae) /
            C80179 +
        (0 * ae) / C80179 - C80331 / C80184;
    const double C82892 = 2 * C82859;
    const double C1770 = C1744 * C693;
    const double C1764 = C1744 * C703;
    const double C1758 = C1744 * C694;
    const double C2058 = C1744 * C859;
    const double C2056 = C1744 * C755;
    const double C2046 = C1744 * C858;
    const double C2044 = C1744 * C754;
    const double C2337 = C1744 * C1005;
    const double C2331 = C1744 * C1004;
    const double C29401 = C1744 * C4982;
    const double C29389 = C1744 * C3360;
    const double C29383 = C1744 * C3348;
    const double C29632 = C1744 * C3613;
    const double C29630 = C1744 * C3441;
    const double C29893 = C1744 * C3859;
    const double C82641 = C82640 / C80179;
    const double C82901 = C82869 / C80191;
    const double C45261 = C44659 * C2324;
    const double C51544 = C44659 * C3448;
    const double C82919 = C82863 - C82898;
    const double C37887 = -C82898;
    const double C13357 = C13257 * C755;
    const double C13351 = C13257 * C759;
    const double C13345 = C13257 * C754;
    const double C13864 = C13257 * C1057;
    const double C13858 = C13257 * C1056;
    const double C18382 = C13257 * C5063;
    const double C18370 = C13257 * C3447;
    const double C18364 = C13257 * C3441;
    const double C18904 = C13257 * C3945;
    const double C82931 = C82915 + C82630;
    const double C80366 = C80309 * C80365;
    const double C25873 =
        ((-C80365 / C80179) / C80185 - (0 * be) / C80179) / C80185 -
        (0 * be) / C80179;
    const double C52459 = (-C80365 / C80179) / C80185 - (0 * be) / C80179;
    const double C80612 = C80608 - C80602;
    const double C80667 = C80659 / C80179;
    const double C4603 = C4298 * C4406;
    const double C17645 = C4298 * C4982;
    const double C8621 = C8608 * C1153;
    const double C8617 = C8608 * C1163;
    const double C8613 = C8608 * C1154;
    const double C8846 = C8608 * C1319;
    const double C8842 = C8608 * C1318;
    const double C9067 = C8608 * C1465;
    const double C9065 = C8608 * C1267;
    const double C9059 = C8608 * C1464;
    const double C9057 = C8608 * C1266;
    const double C11647 = C8608 * C3360;
    const double C11643 = C8608 * C3348;
    const double C11957 = C8608 * C3613;
    const double C12264 = C8608 * C3859;
    const double C12262 = C8608 * C3527;
    const double C22229 = C8608 * C3354;
    const double C22225 = C8608 * C3345;
    const double C22852 = C8608 * C3862;
    const double C22850 = C8608 * C3530;
    const double C631 = C615 - C616;
    const double C3264 = C3256 - C3257;
    const double C25893 = C25720 * C248;
    const double C25887 = C25720 * C242;
    const double C25881 = C25720 * C247;
    const double C25875 = C25720 * C241;
    const double C26127 = C25720 * C443;
    const double C26121 = C25720 * C442;
    const double C26373 = C25720 * C610;
    const double C26361 = C25720 * C609;
    const double C28728 = C25720 * C1856;
    const double C28722 = C25720 * C1852;
    const double C28716 = C25720 * C810;
    const double C28710 = C25720 * C805;
    const double C28962 = C25720 * C2155;
    const double C28956 = C25720 * C956;
    const double C29193 = C25720 * C1106;
    const double C31553 = C25720 * C811;
    const double C31547 = C25720 * C806;
    const double C31867 = C25720 * C957;
    const double C82674 = C82673 / C80184;
    const double C8630 = C82864 * C249;
    const double C8626 = C82864 * C243;
    const double C8622 = C82864 * C248;
    const double C8618 = C82864 * C242;
    const double C8614 = C82864 * C247;
    const double C8610 = C82864 * C241;
    const double C8847 = C82864 * C444;
    const double C8843 = C82864 * C443;
    const double C8839 = C82864 * C442;
    const double C9064 = C82864 * C610;
    const double C9056 = C82864 * C609;
    const double C10657 = C82864 * C807;
    const double C10653 = C82864 * C811;
    const double C10649 = C82864 * C806;
    const double C10991 = C82864 * C958;
    const double C10987 = C82864 * C957;
    const double C11644 = C82864 * C810;
    const double C11640 = C82864 * C805;
    const double C11954 = C82864 * C956;
    const double C12261 = C82864 * C1106;
    const double C21259 = C82864 * C1853;
    const double C21582 = C82864 * C2156;
    const double C22226 = C82864 * C1856;
    const double C22222 = C82864 * C1852;
    const double C22540 = C82864 * C2155;
    const double C24577 = C82864 * C2736;
    const double C24573 = C82864 * C2733;
    const double C24783 = C82864 * C3002;
    const double C4296 =
        (((0 - (C80309 * C80355) / C80179) * ae) / C80179 - (0 * be) / C80191) /
            C80185 +
        ((C80309 * (((C82592 - (C80309 * 2 * C80357) / C80179) * ae) / C80179 -
                    C80355 / C80191) +
          C82864) *
         ae) /
            C80179 +
        (0 * ae) / C80179 - C80357 / C80184;
    const double C82895 = 2 * C82861;
    const double C4323 = C4297 * C1153;
    const double C4317 = C4297 * C1163;
    const double C4311 = C4297 * C1154;
    const double C4607 = C4297 * C1319;
    const double C4601 = C4297 * C1318;
    const double C4877 = C4297 * C1465;
    const double C4875 = C4297 * C1267;
    const double C4865 = C4297 * C1464;
    const double C4863 = C4297 * C1266;
    const double C17655 = C4297 * C3354;
    const double C17649 = C4297 * C3345;
    const double C17643 = C4297 * C3360;
    const double C17637 = C4297 * C3348;
    const double C17903 = C4297 * C3613;
    const double C18164 = C4297 * C3862;
    const double C18162 = C4297 * C3530;
    const double C18152 = C4297 * C3859;
    const double C18150 = C4297 * C3527;
    const double C82681 = C82680 / C80179;
    const double C82906 = C82876 / C80191;
    const double C64875 = C61595 * C5143;
    const double C82922 = C82864 - C82903;
    const double C52324 = -C82903;
    const double C25889 = C25721 * C1267;
    const double C25883 = C25721 * C1271;
    const double C25877 = C25721 * C1266;
    const double C26129 = C25721 * C1418;
    const double C26123 = C25721 * C1417;
    const double C28730 = C25721 * C3536;
    const double C28724 = C25721 * C3530;
    const double C28718 = C25721 * C3533;
    const double C28712 = C25721 * C3527;
    const double C28958 = C25721 * C3779;
    const double C82932 = C82917 + C82670;
    const double C80482 = C80477 + 0;
    const double C80527 = C80524 + C80508;
    const double C80632 = C80627 + 0;
    const double C80677 = C80674 + C80658;
    const double C80485 = C80481 / C80185;
    const double C80635 = C80631 / C80185;
    const double C115 = (2 * (C80830 * C80843 + C80833 * ae) +
                         C80830 * (C80843 + C80830 * C80862 + C80851 * ae) +
                         (C80833 + C80845 * C80834) * ae) /
                        C80179;
    const double C701 =
        (C80952 * (C80843 + C80830 * C80862 + C80851 * ae)) / C80179;
    const double C1161 =
        (C80996 * (C80843 + C80830 * C80862 + C80851 * ae)) / C80179;
    const double C1660 =
        (C80830 * C80843 + C80833 * ae + C80862 * C81084) / C80179;
    const double C3358 = (C80996 * C80952 * C80862) / C80179;
    const double C4115 =
        (C80830 * C80843 + C80833 * ae + C80862 * C81182) / C80179;
    const double C2821 = (2 * (C80952 * C81046 + C80833 * ae) +
                          C80952 * (C81046 + C80952 * C81376 + C81373 * ae) +
                          (C80833 + C80845 * C81084) * ae) /
                         C80179;
    const double C3616 =
        (C80996 * (C81046 + C80952 * C81376 + C81373 * ae)) / C80179;
    const double C5220 =
        (C80952 * C81046 + C80833 * ae + C81376 * C81182) / C80179;
    const double C6262 = (2 * (C80996 * C81127 + C80833 * ae) +
                          C80996 * (C81127 + C80996 * C81564 + C81561 * ae) +
                          (C80833 + C80845 * C81182) * ae) /
                         C80179;
    const double C1759 = C82893 * C1747;
    const double C2048 = C1745 * C1747;
    const double C13347 = C82893 * C1747;
    const double C44748 = C44659 * C1747;
    const double C2050 = C1745 * C1951;
    const double C2163 = C239 * C1951;
    const double C10537 = C82639 * C3443;
    const double C10865 = C6585 * C3443;
    const double C21151 = C13257 * C3443;
    const double C41886 = C82639 * C3443;
    const double C54703 = C1744 * C3443;
    const double C10651 = C82679 * C3528;
    const double C11301 = C8608 * C3528;
    const double C31549 = C25721 * C3528;
    const double C42644 = C4297 * C3528;
    const double C54489 = C82679 * C3528;
    const double C10867 = C6585 * C3614;
    const double C10990 = C8608 * C3614;
    const double C42335 = C4297 * C3614;
    const double C54705 = C1744 * C3614;
    const double C11194 = C6585 * C3860;
    const double C11303 = C8608 * C3860;
    const double C42646 = C4297 * C3860;
    const double C55025 = C1744 * C3860;
    const double C4312 = C82896 * C4300;
    const double C4867 = C4298 * C4300;
    const double C25879 = C82896 * C4300;
    const double C61752 = C61595 * C4300;
    const double C4773 = C168 * C4684;
    const double C4869 = C4298 * C4684;
    const double C1760 = C1745 * C1654;
    const double C1870 = C239 * C1654;
    const double C2424 = C607 * C1654;
    const double C19219 = C239 * C2526;
    const double C19664 = C607 * C2526;
    const double C21262 = C8608 * C3344;
    const double C54382 = C1745 * C3344;
    const double C10538 = C6585 * C3347;
    const double C10652 = C8608 * C3347;
    const double C42001 = C4297 * C3347;
    const double C54380 = C1744 * C3347;
    const double C4216 = C168 * C4109;
    const double C4313 = C4298 * C4109;
    const double C4501 = C364 * C4109;
    const double C34187 = C168 * C5689;
    const double C34409 = C364 * C5689;
    const double C114 = (2 * (C80830 * C80842 + C80833 * be) +
                         C80830 * (C80842 + C80830 * C80861 + C80851 * be) +
                         (C80833 + C80845 * C80834) * be) /
                        C80179;
    const double C700 =
        (C80952 * (C80842 + C80830 * C80861 + C80851 * be)) / C80179;
    const double C1160 =
        (C80996 * (C80842 + C80830 * C80861 + C80851 * be)) / C80179;
    const double C1659 =
        (C80830 * C80842 + C80833 * be + C80861 * C81084) / C80179;
    const double C3357 = (C80996 * C80952 * C80861) / C80179;
    const double C4114 =
        (C80830 * C80842 + C80833 * be + C80861 * C81182) / C80179;
    const double C3946 = (ae * (C80959 + C80952 * C81375 + C81373 * be) +
                          C80996 * (C81170 + be * C80952 * C81132 +
                                    C80952 * (C81135 + C80952 * C81173))) /
                         C80184;
    const double C5534 =
        (be * C81127 + C80952 * C81170 + ae * C80996 * C81375 +
         C80996 * (ae * C81375 + C80996 * (C81135 + C80952 * C81173))) /
        C80184;
    const double C2653 = (2 * (C80952 * C80959 + C80833 * be) +
                          C80952 * (C80959 + C80952 * C81375 + C81373 * be) +
                          (C80833 + C80845 * C81084) * be) /
                         C80179;
    const double C3442 =
        (C80996 * (C80959 + C80952 * C81375 + C81373 * be)) / C80179;
    const double C5060 =
        (C80952 * C80959 + C80833 * be + C81375 * C81182) / C80179;
    const double C5904 = (2 * (C80996 * C81003 + C80833 * be) +
                          C80996 * (C81003 + C80996 * C81563 + C81561 * be) +
                          (C80833 + C80845 * C81182) * be) /
                         C80179;
    const double C17904 = C82896 * C5377;
    const double C28960 = C82896 * C5377;
    const double C65175 = C61595 * C5377;
    const double C123 =
        (2 * (ae * C80842 + be * C80843 + C80830 * C80860) +
         ae * (C80842 + C80830 * C80861 + C80851 * be) +
         be * (C80843 + C80830 * C80862 + C80851 * ae) +
         C80830 * (C80860 + ae * C80861 + be * C80862 +
                   C80830 * (ae * C80855 + be * C80856 +
                             C80830 *
                                 (C80846 * C80847 +
                                  C80834 * bs[5] * std::pow(C80836, 5)) *
                                 C80182))) /
        C80184;
    const double C709 = (ae * C80952 * C80842 + be * C80952 * C80843 +
                         C80830 * C80952 * C80860) /
                        C80184;
    const double C1169 = (ae * C80996 * C80842 + be * C80996 * C80843 +
                          C80830 * C80996 * C80860) /
                         C80184;
    const double C1665 =
        ((C80833 + C80834 * C80835 * C80839) * C80182 + C80860 * C81084) /
        C80184;
    const double C3366 = (C80996 * C80952 * C80860) / C80184;
    const double C4120 =
        ((C80833 + C80834 * C80835 * C80839) * C80182 + C80860 * C81182) /
        C80184;
    const double C368 =
        (2 * C80830 * C81089 +
         C80830 *
             (C81089 + (C80866 + C81084 * C80867 * C80868) * C80182 * C80834)) /
        C80184;
    const double C912 = (ae * C80830 * C80959 + be * C80830 * C81046 +
                         C80952 * C80830 * C81089) /
                        C80184;
    const double C1372 = (C80996 * C80830 * C81089) / C80184;
    const double C2035 =
        ((C80833 + C81084 * C80835 * C80839) * C80182 +
         ae * (C80952 * C80959 + C80833 * be) +
         be * (C80952 * C81046 + C80833 * ae) +
         C80952 * (ae * C80959 + be * C81046 + C80952 * C81089)) /
        C80184;
    const double C3704 = (ae * C80996 * C80959 + be * C80996 * C81046 +
                          C80952 * C80996 * C81089) /
                         C80184;
    const double C4487 =
        ((C80833 + C81084 * C80835 * C80839) * C80182 + C81089 * C81182) /
        C80184;
    const double C611 =
        (2 * C80830 * C81187 +
         C80830 *
             (C81187 + (C80866 + C81182 * C80867 * C80868) * C80182 * C80834)) /
        C80184;
    const double C1105 = (C80952 * C80830 * C81187) / C80184;
    const double C1565 = (ae * C80830 * C81003 + be * C80830 * C81127 +
                          C80996 * C80830 * C81187) /
                         C80184;
    const double C2413 =
        ((C80833 + C81182 * C80835 * C80839) * C80182 + C81187 * C81084) /
        C80184;
    const double C4030 = (ae * C80952 * C81003 + be * C80952 * C81127 +
                          C80996 * C80952 * C81187) /
                         C80184;
    const double C4854 =
        ((C80833 + C81182 * C80835 * C80839) * C80182 +
         ae * (C80996 * C81003 + C80833 * be) +
         be * (C80996 * C81127 + C80833 * ae) +
         C80996 * (ae * C81003 + be * C81127 + C80996 * C81187)) /
        C80184;
    const double C22542 = C82679 * C3780;
    const double C28964 = C25721 * C3780;
    const double C55764 = C82679 * C3780;
    const double C17638 = C82896 * C5140;
    const double C18154 = C4298 * C5140;
    const double C28714 = C82896 * C5140;
    const double C64869 = C61595 * C5140;
    const double C18156 = C4298 * C5454;
    const double C29899 = C1744 * C5454;
    const double C33950 = C6585 * C5454;
    const double C17639 = C4298 * C4976;
    const double C29395 = C1744 * C4976;
    const double C33319 = C6585 * C4976;
    const double C37333 = C6585 * C18262;
    const double C389 = C376 - C377;
    const double C390 = C380 - C381;
    const double C4508 = C4492 - C4493;
    const double C4509 = C4496 - C4497;
    const double C6105 = C6098 - C6099;
    const double C31056 = C31048 - C31049;
    const double C632 = C619 - C620;
    const double C633 = C623 - C624;
    const double C2436 = C2419 - C2420;
    const double C2438 = C2428 - C2429;
    const double C3265 = C3260 - C3261;
    const double C16256 = C16248 - C16249;
    const double C80891 = C80830 * C80888;
    const double C80907 = 2 * C80888;
    const double C80899 = be * C80888;
    const double C81493 = C80952 * C80888;
    const double C81894 = C80996 * C80888;
    const double C2531 =
        (2 * C80952 * C80862 + C80952 * (C80862 + C80888 * C81084)) / C80179;
    const double C3352 = (C80996 * (C80862 + C80888 * C81084)) / C80179;
    const double C5694 =
        (2 * C80996 * C80862 + C80996 * (C80862 + C80888 * C81182)) / C80179;
    const double C81671 = C80970 + C81205;
    const double C18461 =
        (2 * (be * C81491 + C80996 * C81844) + be * (C81491 + C81202 * C81182) +
         C80996 * (C81844 + be * C80996 * C81202 +
                   C80996 * (C81205 + C80996 * C80952 * C81026))) /
        C80184;
    const double C37337 = C6585 * C18266;
    const double C82029 = C81014 + C81259;
    const double C15410 = (3 * (C80843 + C80856 * C81084) +
                           C80952 * (2 * C81491 + C80952 * C81581)) /
                          C80179;
    const double C16308 = (C80996 * (2 * C81491 + C80952 * C81581)) / C80179;
    const double C16748 = (C80843 + C80856 * C81084 + C81581 * C81182) / C80179;
    const double C18264 =
        (2 * C80996 * C81581 + C80996 * (C81581 + C81676 * C81182)) / C80179;
    const double C30025 = (3 * (C80843 + C80856 * C81182) +
                           C80996 * (2 * C81888 + C80996 * C81892)) /
                          C80179;
    const double C80890 = C80830 * C80887;
    const double C80905 = 2 * C80887;
    const double C80898 = ae * C80887;
    const double C81508 = C80952 * C80887;
    const double C81918 = C80996 * C80887;
    const double C2530 =
        (2 * C80952 * C80861 + C80952 * (C80861 + C80887 * C81084)) / C80179;
    const double C3351 = (C80996 * (C80861 + C80887 * C81084)) / C80179;
    const double C5693 =
        (2 * C80996 * C80861 + C80996 * (C80861 + C80887 * C81182)) / C80179;
    const double C81207 = C81204 + C81205;
    const double C81685 = C81057 + C81204;
    const double C18819 =
        (2 * (ae * C81506 + C80996 * C81853) + ae * (C81506 + C81201 * C81182) +
         C80996 * (C81853 + ae * C80996 * C81201 +
                   C80996 * (C81204 + C80996 * C80952 * C81150))) /
        C80184;
    const double C17748 = C82523 * C16985;
    const double C36826 = C82523 * C18265;
    const double C81261 = C81258 + C81259;
    const double C82046 = C81138 + C81258;
    const double C16447 =
        (2 * (ae * C80996 * C80855 + C80952 * C81772) + ae * C80996 * C81593 +
         C80952 * (C81772 + ae * C80996 * C81201 +
                   C80952 * (C81258 + C80952 * C80996 * C81069))) /
        C80184;
    const double C15409 = (3 * (C80842 + C80855 * C81084) +
                           C80952 * (2 * C81506 + C80952 * C81593)) /
                          C80179;
    const double C16307 = (C80996 * (2 * C81506 + C80952 * C81593)) / C80179;
    const double C16747 = (C80842 + C80855 * C81084 + C81593 * C81182) / C80179;
    const double C18263 =
        (2 * C80996 * C81593 + C80996 * (C81593 + C81690 * C81182)) / C80179;
    const double C30024 = (3 * (C80842 + C80855 * C81182) +
                           C80996 * (2 * C81912 + C80996 * C81916)) /
                          C80179;
    const double C80889 = C80830 * C80886;
    const double C81210 = C80952 * C80886;
    const double C81264 = C80996 * C80886;
    const double C1666 =
        (ae * (C80842 + C80855 * C81084) + be * (C80843 + C80856 * C81084) +
         C80830 * (C80860 + C80886 * C81084)) /
        C80184;
    const double C2536 =
        (2 * C80952 * C80860 + C80952 * (C80860 + C80886 * C81084)) / C80184;
    const double C3363 = (C80996 * (C80860 + C80886 * C81084)) / C80184;
    const double C4121 =
        (ae * (C80842 + C80855 * C81182) + be * (C80843 + C80856 * C81182) +
         C80830 * (C80860 + C80886 * C81182)) /
        C80184;
    const double C5699 =
        (2 * C80996 * C80860 + C80996 * (C80860 + C80886 * C81182)) / C80184;
    const double C80936 = C80830 * C80933;
    const double C81584 = C80933 * C81084;
    const double C81896 = C80933 * C81182;
    const double C82106 = C80952 * C80933;
    const double C81719 = C80952 * C81712;
    const double C82090 = C80996 * C82086;
    const double C80929 = C80921 * ae;
    const double C80927 = C80830 * C80921;
    const double C80926 = C80921 * be;
    const double C81360 = C80952 * C80921;
    const double C81549 = C80996 * C80921;
    const double C2525 =
        2 * C80952 * C80880 + C80952 * (C80880 + C80921 * C81084);
    const double C3343 = C80996 * (C80880 + C80921 * C81084);
    const double C5688 =
        2 * C80996 * C80880 + C80996 * (C80880 + C80921 * C81182);
    const double C81633 = C81629 + C80923;
    const double C81963 = C81958 + C80923;
    const double C81632 = C81626 + C80920;
    const double C81960 = C81955 + C80920;
    const double C81628 = C80873 + C81623;
    const double C81630 = C81622 * ae;
    const double C81627 = C81622 * be;
    const double C82117 = C80996 * C81622;
    const double C33197 =
        2 * C80996 * C81367 + C80996 * (C81367 + C81622 * C81182);
    const double C81962 = C80873 + C81957;
    const double C81964 = C81956 * ae;
    const double C81961 = C81956 * be;
    const double C80935 = C80830 * C80931;
    const double C81596 = C80931 * C81084;
    const double C81920 = C80931 * C81182;
    const double C82112 = C80952 * C80931;
    const double C81716 = C80952 * C81709;
    const double C81999 = C81709 * C81182;
    const double C82089 = C80996 * C82083;
    const double C80934 = C80830 * C80930;
    const double C81203 = C80952 * C80930;
    const double C81257 = C80996 * C80930;
    const double C81312 = C80930 * C81084;
    const double C81450 = C80930 * C81182;
    const double C1667 =
        (C80860 + C80886 * C81084 + ae * (C80861 + C80887 * C81084) +
         be * (C80862 + C80888 * C81084) +
         C80830 * (ae * (C80855 + C80878 * C81084) +
                   be * (C80856 + C80881 * C81084) +
                   C80830 * (C80886 + C80930 * C81084))) /
        C80184;
    const double C4122 =
        (C80860 + C80886 * C81182 + ae * (C80861 + C80887 * C81182) +
         be * (C80862 + C80888 * C81182) +
         C80830 * (ae * (C80855 + C80878 * C81182) +
                   be * (C80856 + C80881 * C81182) +
                   C80830 * (C80886 + C80930 * C81182))) /
        C80184;
    const double C81100 = C81099 * C80834;
    const double C81620 = C80830 * C81099;
    const double C81699 = C80952 * C81099;
    const double C81780 = C80996 * C81099;
    const double C81830 = C81099 * C81182;
    const double C81198 = C81197 * C80834;
    const double C81668 = C80830 * C81197;
    const double C81763 = C81197 * C81084;
    const double C82004 = C80952 * C81197;
    const double C82071 = C80996 * C81197;
    const double C81720 = C81711 * ae;
    const double C81718 = C80952 * C81711;
    const double C81717 = C81711 * be;
    const double C81859 = C80996 * C81711;
    const double C18261 =
        2 * C80996 * C81609 + C80996 * (C81609 + C81711 * C81182);
    const double C82017 = C82013 + C81713;
    const double C82016 = C82010 + C81710;
    const double C82012 = C81603 + C82007;
    const double C82014 = C82006 * ae;
    const double C82011 = C82006 * be;
    const double C82080 = C81986 * ae;
    const double C82077 = C80996 * C81986;
    const double C82075 = C81986 * be;
    const double C173 = (3 * (C80959 + C80964 * C80834) +
                         C80830 * (2 * C80966 + C80830 * C80975)) /
                        C80179;
    const double C756 = (C80952 * (2 * C80966 + C80830 * C80975) +
                         (2 * C80851 + C80830 * C80880) * be) /
                        C80179;
    const double C1216 = (C80996 * (2 * C80966 + C80830 * C80975)) / C80179;
    const double C1748 =
        (C80959 + C80964 * C80834 + C80952 * (C80952 * C80975 + C80880 * be) +
         C80952 * C80880 * be) /
        C80179;
    const double C3445 = (C80996 * (C80952 * C80975 + C80880 * be)) / C80179;
    const double C4200 = (C80959 + C80964 * C80834 + C80975 * C81182) / C80179;
    const double C5818 =
        (2 * C80996 * C80975 + C80996 * (C80975 + C80989 * C81182)) / C80179;
    const double C80985 = C80970 + C80981;
    const double C6355 =
        (2 * (ae * C80966 + C80996 * C81386) + ae * (C80966 + C80977 * C81182) +
         C80996 * (C81386 + ae * C80996 * C80977 +
                   C80996 * (C80981 + C80996 * C80830 * C81176))) /
        C80184;
    const double C81369 = C81366 + C80879;
    const double C34186 = C82581 * C5817;
    const double C34408 = C168 * C5817;
    const double C81612 = C80952 * C81607;
    const double C81700 = 2 * C81607;
    const double C81696 = ae * C81607;
    const double C81997 = C80996 * C81607;
    const double C18357 =
        (2 * C80996 * C81375 + C80996 * (C81375 + C81607 * C81182)) / C80179;
    const double C82057 = C81173 + C81781;
    const double C30072 = (3 * (C80959 + C80964 * C81182) +
                           C80996 * (2 * C81924 + C80996 * C81928)) /
                          C80179;
    const double C244 = (3 * (C81003 + C81008 * C80834) +
                         C80830 * (2 * C81010 + C80830 * C81019)) /
                        C80179;
    const double C808 = (C80952 * (2 * C81010 + C80830 * C81019)) / C80179;
    const double C1268 = (C80996 * (2 * C81010 + C80830 * C81019) +
                          (2 * C80851 + C80830 * C80880) * be) /
                         C80179;
    const double C1854 = (C81003 + C81008 * C80834 + C81019 * C81084) / C80179;
    const double C2735 =
        (2 * C80952 * C81019 + C80952 * (C81019 + C81033 * C81084)) / C80179;
    const double C3529 =
        (C80996 * C80952 * C81019 + C80952 * C80880 * be) / C80179;
    const double C3532 = (C80996 * (C81019 + C81033 * C81084) +
                          (C80880 + C80921 * C81084) * be) /
                         C80179;
    const double C4301 =
        (C81003 + C81008 * C80834 + C80996 * (C80996 * C81019 + C80880 * be) +
         C80996 * C80880 * be) /
        C80179;
    const double C81029 = C81014 + C81025;
    const double C3003 =
        (2 * (ae * C81010 + C80952 * C81379) + ae * (C81010 + C81021 * C81084) +
         C80952 * (C81379 + ae * C80952 * C81021 +
                   C80952 * (C81025 + C80952 * C80830 * C81116))) /
        C80184;
    const double C5141 =
        (C80952 * C81010 + C80996 * (C80996 * C81518 + C81367 * be) +
         C80996 * C81367 * be) /
        C80179;
    const double C81557 = C81554 + C80879;
    const double C19218 = C82592 * C2734;
    const double C19663 = C239 * C2734;
    const double C21261 = C82679 * C3531;
    const double C21890 = C8608 * C3531;
    const double C54497 = C82679 * C3531;
    const double C15508 = (3 * (C81003 + C81008 * C81084) +
                           C80952 * (2 * C81521 + C80952 * C81644)) /
                          C80179;
    const double C16399 = (C80996 * (2 * C81521 + C80952 * C81644) +
                           (2 * C81373 + C80952 * C81609) * be) /
                          C80179;
    const double C16905 =
        (C81003 + C81008 * C81084 + C80996 * (C80996 * C81644 + C81609 * be) +
         C80996 * C81609 * be) /
        C80179;
    const double C81741 = C81113 + C81737;
    const double C81868 = C81865 + C81608;
    const double C81796 = ae * C81794;
    const double C81938 = C80996 * C81794;
    const double C82072 = 2 * C81794;
    const double C314 = (3 * (C81046 + C81051 * C80834) +
                         C80830 * (2 * C81053 + C80830 * C81062)) /
                        C80179;
    const double C860 = (C80952 * (2 * C81053 + C80830 * C81062) +
                         (2 * C80851 + C80830 * C80880) * ae) /
                        C80179;
    const double C1320 = (C80996 * (2 * C81053 + C80830 * C81062)) / C80179;
    const double C1952 =
        (C81046 + C81051 * C80834 + C80952 * (C80952 * C81062 + C80880 * ae) +
         C80952 * C80880 * ae) /
        C80179;
    const double C3615 = (C80996 * (C80952 * C81062 + C80880 * ae)) / C80179;
    const double C4407 = (C81046 + C81051 * C80834 + C81062 * C81182) / C80179;
    const double C5986 =
        (2 * C80996 * C81062 + C80996 * (C81062 + C81076 * C81182)) / C80179;
    const double C81072 = C81057 + C81068;
    const double C81619 = C80981 + C81068;
    const double C3782 =
        (be * C81053 + C80996 * C81379 +
         ae * (C80996 * C80952 * C81021 + C81367 * be) +
         C80952 * (ae * (C80996 * C81021 + C80879) +
                   C80952 * (C81068 + C80996 * C80830 * C81116))) /
        C80184;
    const double C5378 =
        (ae * (C81010 + C80996 * (C80996 * C81021 + C80879) +
               C80996 * C80873 * be) +
         C80952 * (C81379 + be * C80996 * C81064 +
                   C80996 * (C81068 + C80996 * C80830 * C81116))) /
        C80184;
    const double C6186 =
        (2 * (be * C81053 + C80996 * C81379) + be * (C81053 + C81064 * C81182) +
         C80996 * (C81379 + be * C80996 * C81064 +
                   C80996 * (C81068 + C80996 * C80830 * C81116))) /
        C80184;
    const double C81370 = C81368 + C80882;
    const double C34410 = C168 * C5985;
    const double C81613 = C80952 * C81610;
    const double C81705 = 2 * C81610;
    const double C81697 = be * C81610;
    const double C18537 =
        (2 * C80996 * C81376 + C80996 * (C81376 + C81610 * C81182)) / C80179;
    const double C30576 =
        (3 * (C81376 + C81610 * C81182) +
         C80996 * (2 * C80996 * C81610 + C80996 * (C81610 + C81712 * C81182))) /
        C80179;
    const double C81784 = C81781 + C81782;
    const double C81833 = C81113 + C81782;
    const double C30169 = (3 * (C81046 + C81051 * C81182) +
                           C80996 * (2 * C81904 + C80996 * C81906)) /
                          C80179;
    const double C81365 = C80830 * C81094;
    const double C81601 = C80952 * C81094;
    const double C81787 = C80996 * C81094;
    const double C369 =
        (3 * (C81089 + C81094 * C80834) +
         C80830 * (2 * C80830 * C81094 +
                   C80830 * (C81094 + (C80902 + C81084 * C80903 * C80904) *
                                          C80182 * C80834))) /
        C80184;
    const double C911 =
        (ae * (C80959 + C80964 * C80834) + be * (C81046 + C81051 * C80834) +
         C80952 * (C81089 + C81094 * C80834)) /
        C80184;
    const double C1371 = (C80996 * (C81089 + C81094 * C80834)) / C80184;
    const double C2036 =
        (C80830 * C81089 + ae * (C80952 * C80966 + C80851 * be) +
         be * (C80952 * C81053 + C80851 * ae) +
         C80952 * (ae * C80966 + be * C81053 + C80952 * C80830 * C81094)) /
        C80184;
    const double C2927 =
        (2 * (ae * C80959 + be * C81046 + C80952 * C81089) +
         ae * (C80959 + C80952 * C81375 + C81373 * be) +
         be * (C81046 + C80952 * C81376 + C81373 * ae) +
         C80952 * (C81089 + ae * C81375 + be * C81376 +
                   C80952 * (C80967 + C81054 + C80952 * C81094))) /
        C80184;
    const double C3703 =
        (C80996 * C81089 + ae * C80996 * C81375 + be * C80996 * C81376 +
         C80952 * (ae * C80996 * C80964 + be * C80996 * C81051 +
                   C80952 * C80996 * C81094)) /
        C80184;
    const double C5302 =
        (ae * (C80959 + C80964 * C81182) + be * (C81046 + C81051 * C81182) +
         C80952 * (C81089 + C81094 * C81182)) /
        C80184;
    const double C6090 =
        (2 * C80996 * C81089 + C80996 * (C81089 + C81094 * C81182)) / C80184;
    const double C17061 =
        (C81089 + C81094 * C81182 + ae * (C81375 + C81607 * C81182) +
         be * (C81376 + C81610 * C81182) +
         C80952 * (ae * (C80964 + C80971 * C81182) +
                   be * (C81051 + C81058 * C81182) +
                   C80952 * (C81094 + C81099 * C81182))) /
        C80184;
    const double C501 = (3 * (C81127 + C81132 * C80834) +
                         C80830 * (2 * C81134 + C80830 * C81143)) /
                        C80179;
    const double C1006 = (C80952 * (2 * C81134 + C80830 * C81143)) / C80179;
    const double C1466 = (C80996 * (2 * C81134 + C80830 * C81143) +
                          (2 * C80851 + C80830 * C80880) * ae) /
                         C80179;
    const double C2243 = (C81127 + C81132 * C80834 + C81143 * C81084) / C80179;
    const double C3085 =
        (2 * C80952 * C81143 + C80952 * (C81143 + C81157 * C81084)) / C80179;
    const double C3861 =
        (C80996 * C80952 * C81143 + C80952 * C80880 * ae) / C80179;
    const double C3864 = (C80996 * (C81143 + C81157 * C81084) +
                          (C80880 + C80921 * C81084) * ae) /
                         C80179;
    const double C4685 =
        (C81127 + C81132 * C80834 + C80996 * (C80996 * C81143 + C80880 * ae) +
         C80996 * C80880 * ae) /
        C80179;
    const double C81153 = C81138 + C81149;
    const double C81953 = C81025 + C81149;
    const double C3176 =
        (2 * (be * C81134 + C80952 * C81386) + be * (C81134 + C81145 * C81084) +
         C80952 * (C81386 + be * C80952 * C81145 +
                   C80952 * (C81149 + C80952 * C80830 * C81176))) /
        C80184;
    const double C5455 =
        (C80952 * C81134 + C80996 * (C80996 * C81519 + C81367 * ae) +
         C80996 * C81367 * ae) /
        C80179;
    const double C81558 = C81556 + C80882;
    const double C19665 = C239 * C3084;
    const double C21892 = C8608 * C3863;
    const double C55027 = C1745 * C3863;
    const double C15693 = (3 * (C81127 + C81132 * C81084) +
                           C80952 * (2 * C81522 + C80952 * C81658)) /
                          C80179;
    const double C16579 = (C80996 * (2 * C81522 + C80952 * C81658) +
                           (2 * C81373 + C80952 * C81609) * ae) /
                          C80179;
    const double C17213 =
        (C81127 + C81132 * C81084 + C80996 * (C80996 * C81658 + C81609 * ae) +
         C80996 * C81609 * ae) /
        C80179;
    const double C81757 = C81173 + C81753;
    const double C82003 = C81737 + C81753;
    const double C81869 = C81867 + C81611;
    const double C81949 = C80996 * C81946;
    const double C82078 = 2 * C81946;
    const double C82069 = be * C81946;
    const double C81390 = C80830 * C81192;
    const double C81864 = C80952 * C81192;
    const double C81937 = C80996 * C81192;
    const double C612 =
        (3 * (C81187 + C81192 * C80834) +
         C80830 * (2 * C80830 * C81192 +
                   C80830 * (C81192 + (C80902 + C81182 * C80903 * C80904) *
                                          C80182 * C80834))) /
        C80184;
    const double C1104 = (C80952 * (C81187 + C81192 * C80834)) / C80184;
    const double C1564 =
        (ae * (C81003 + C81008 * C80834) + be * (C81127 + C81132 * C80834) +
         C80996 * (C81187 + C81192 * C80834)) /
        C80184;
    const double C2414 = (C80830 * C81187 + C80830 * C81192 * C81084) / C80184;
    const double C3254 =
        (2 * C80952 * C81187 + C80952 * (C81187 + C81192 * C81084)) / C80184;
    const double C4029 =
        (ae * (C81003 + C81008 * C81084) + be * (C81127 + C81132 * C81084) +
         C80996 * (C81187 + C81192 * C81084)) /
        C80184;
    const double C5613 =
        (C80952 * C81187 + ae * (C80996 * C81521 + C81373 * be) +
         be * (C80996 * C81522 + C81373 * ae) +
         C80996 * (ae * C81521 + be * C81522 + C80996 * C80952 * C81192)) /
        C80184;
    const double C6437 =
        (2 * (ae * C81003 + be * C81127 + C80996 * C81187) +
         ae * (C81003 + C80996 * C81563 + C81561 * be) +
         be * (C81127 + C80996 * C81564 + C81561 * ae) +
         C80996 * (C81187 + ae * C81563 + be * C81564 +
                   C80996 * (C81011 + C81135 + C80996 * C81192))) /
        C80184;
    const double C15783 =
        (3 * (C81187 + C81192 * C81084) +
         C80952 * (2 * C80952 * C81192 + C80952 * (C81192 + C81197 * C81084))) /
        C80184;
    const double C195 = C168 * C106;
    const double C266 = C239 * C106;
    const double C385 = C364 * C106;
    const double C628 = C607 * C106;
    const double C6606 = C6585 * C692;
    const double C6678 = C239 * C692;
    const double C7141 = C607 * C692;
    const double C8539 = C168 * C1152;
    const double C8629 = C8608 * C1152;
    const double C8767 = C364 * C1152;
    const double C1772 = C1745 * C1655;
    const double C1874 = C239 * C1655;
    const double C2433 = C607 * C1655;
    const double C10546 = C6585 * C3346;
    const double C10660 = C8608 * C3346;
    const double C4220 = C168 * C4110;
    const double C4325 = C4298 * C4110;
    const double C4505 = C364 * C4110;
    const double C31444 = C6585 * C4975;
    const double C42003 = C4298 * C4975;
    const double C15957 = C239 * C15407;
    const double C16253 = C607 * C15407;
    const double C24576 = C8608 * C16304;
    const double C17651 = C4298 * C16745;
    const double C29397 = C1745 * C16745;
    const double C30904 = C168 * C30022;
    const double C31053 = C364 * C30022;
    const double C81680 = C81673 + C81678;
    const double C30444 = (3 * (C81491 + C81202 * C81182) +
                           C80996 * (2 * C81974 + C80996 * C81980)) /
                          C80179;
    const double C82038 = C82031 + C82036;
    const double C81694 = C81687 + C81692;
    const double C30443 = (3 * (C81506 + C81201 * C81182) +
                           C80996 * (2 * C81989 + C80996 * C81995)) /
                          C80179;
    const double C82055 = C82048 + C82053;
    const double C80993 = C80983 + C80991;
    const double C30073 = (3 * (C80966 + C80977 * C81182) +
                           C80996 * (2 * C81930 + C80996 * C81934)) /
                          C80179;
    const double C82066 = C82059 + C82064;
    const double C81037 = C81027 + C81035;
    const double C15509 = (3 * (C81010 + C81021 * C81084) +
                           C80952 * (2 * C81518 + C80952 * C81651)) /
                          C80179;
    const double C81745 = C81739 + C81743;
    const double C81080 = C81070 + C81078;
    const double C30170 = (3 * (C81053 + C81064 * C81182) +
                           C80996 * (2 * C81908 + C80996 * C81910)) /
                          C80179;
    const double C82044 = C82042 + C82043;
    const double C81161 = C81151 + C81159;
    const double C15694 = (3 * (C81134 + C81145 * C81084) +
                           C80952 * (2 * C81519 + C80952 * C81665)) /
                          C80179;
    const double C81761 = C81755 + C81759;
    const double C179 =
        (3 * (C80963 + ae * C80966 + C80830 * C80974) +
         ae * (2 * C80966 + C80830 * C80975) +
         C80830 * (2 * C80974 + ae * C80975 +
                   C80830 * (C80970 + ae * C80830 * C80971 +
                             C80830 * (ae * C80971 +
                                       C80830 * C80904 * C80903 * C80958)))) /
        C80184;
    const double C760 = (be * (C80843 + C80830 * C80862 + C80851 * ae) +
                         C80952 * (C80963 + ae * C80966 + C80830 * C80974)) /
                        C80184;
    const double C1220 =
        (C80996 * (C80963 + ae * C80966 + C80830 * C80974)) / C80184;
    const double C1751 = (ae * C80959 + C80830 * C80963 + be * C80952 * C80862 +
                          C80952 * (be * C80862 + C80952 * C80974)) /
                         C80184;
    const double C3449 = (C80996 * (be * C80862 + C80952 * C80974)) / C80184;
    const double C4203 =
        (ae * C80959 + C80830 * C80963 + C80974 * C81182) / C80184;
    const double C15464 =
        (3 * (C80963 + be * C81491 + C80952 * C81580) +
         be * (2 * C81491 + C80952 * C81581) +
         C80952 * (2 * C81580 + be * C81581 +
                   C80952 * (C80970 + C81205 +
                             C80952 * (C80901 + C80952 * C80982)))) /
        C80184;
    const double C80990 = C80830 * C80988;
    const double C81583 = C80952 * C80988;
    const double C5820 =
        (2 * C80996 * C80974 + C80996 * (C80974 + C80988 * C81182)) / C80184;
    const double C30075 =
        (3 * (C80974 + C80988 * C81182) +
         C80996 *
             (2 * C80996 * C80988 +
              C80996 * (C80988 + (ae * C80984 + C80830 * std::pow(C80836, 7) *
                                                    bs[7] * C80958) *
                                     C81182))) /
        C80184;
    const double C81677 = C80952 * C81675;
    const double C18359 =
        (2 * C80996 * C81580 + C80996 * (C81580 + C81675 * C81182)) / C80184;
    const double C30489 =
        (3 * (C81580 + C81675 * C81182) +
         C80996 *
             (2 * C80996 * C81675 +
              C80996 * (C81675 + (be * C80922 + C80952 * std::pow(C80836, 7) *
                                                    bs[7] * C80958) *
                                     C81182))) /
        C80184;
    const double C30897 =
        (4 * (2 * C80996 * C80970 + C80996 * C82027) +
         C80996 * (3 * C82027 +
                   C80996 * (2 * C80996 * C80982 +
                             C80996 * (C80982 + std::pow(C80836, 7) * bs[7] *
                                                    C80958 * C81182)))) /
        C80184;
    const double C320 =
        (3 * (C81050 + be * C81053 + C80830 * C81061) +
         be * (2 * C81053 + C80830 * C81062) +
         C80830 * (2 * C81061 + be * C81062 +
                   C80830 * (C81057 + be * C80830 * C81058 +
                             C80830 * (be * C81058 +
                                       C80830 * C80904 * C80903 * C81045)))) /
        C80184;
    const double C864 = (ae * (C80842 + C80830 * C80861 + C80851 * be) +
                         C80952 * (C81050 + be * C81053 + C80830 * C81061)) /
                        C80184;
    const double C1324 =
        (C80996 * (C81050 + be * C81053 + C80830 * C81061)) / C80184;
    const double C1955 = (be * C81046 + C80830 * C81050 + ae * C80952 * C80861 +
                          C80952 * (ae * C80861 + C80952 * C81061)) /
                         C80184;
    const double C3620 =
        (ae * C80996 * C80861 + C80952 * C80996 * C81061) / C80184;
    const double C4410 =
        (be * C81046 + C80830 * C81050 + C81061 * C81182) / C80184;
    const double C15556 =
        (3 * (C81050 + ae * C81506 + C80952 * C81592) +
         ae * (2 * C81506 + C80952 * C81593) +
         C80952 * (2 * C81592 + ae * C81593 +
                   C80952 * (C81057 + C81204 +
                             C80952 * (C80900 + C80952 * C81069)))) /
        C80184;
    const double C81077 = C80830 * C81075;
    const double C81595 = C80952 * C81075;
    const double C81874 = C80996 * C81075;
    const double C3623 =
        (C80996 * C81061 + ae * C80996 * C80952 * C80887 +
         C80952 * (ae * C80996 * C80887 + C80952 * C80996 * C81075)) /
        C80184;
    const double C5224 = (ae * (C80861 + C80887 * C81182) +
                          C80952 * (C81061 + C81075 * C81182)) /
                         C80184;
    const double C5988 =
        (2 * C80996 * C81061 + C80996 * (C81061 + C81075 * C81182)) / C80184;
    const double C81691 = C80952 * C81689;
    const double C81776 = C81258 + C81775;
    const double C17732 =
        (2 * (ae * (C80855 + C80878 * C81182) + C80952 * C81828) +
         ae * (C81593 + C81690 * C81182) +
         C80952 * (C81828 + ae * (C81201 + C80952 * C80919 * C81182) +
                   C80952 * (ae * (C80878 + C80919 * C81182) +
                             C80952 * (C81069 + std::pow(C80836, 7) * bs[7] *
                                                    C81045 * C81182)))) /
        C80184;
    const double C18539 =
        (ae * (2 * C80996 * C80855 + C80996 * (C80855 + C80878 * C81182)) +
         C80952 * (2 * C81772 + C80996 * C81828)) /
        C80184;
    const double C18540 =
        (2 * C81772 + C80996 * C81828 +
         ae * (2 * C80996 * C81201 +
               C80996 * (C81201 + C80952 * C80919 * C81182)) +
         C80952 * (ae * (2 * C81255 + C80996 * (C80878 + C80919 * C81182)) +
                   C80952 * (2 * C81774 +
                             C80996 * (C81069 + std::pow(C80836, 7) * bs[7] *
                                                    C81045 * C81182)))) /
        C80184;
    const double C30171 = (3 * (C81050 + C81057 * C81182) +
                           C80996 * (2 * C81772 + C80996 * C81828)) /
                          C80184;
    const double C30577 =
        (ae * (3 * C81916 +
               C80996 * (2 * C81255 + C80996 * (C80878 + C80919 * C81182))) +
         C80952 * (3 * C81828 +
                   C80996 * (2 * C81774 +
                             C80996 * (C81069 + std::pow(C80836, 7) * bs[7] *
                                                    C81045 * C81182)))) /
        C80184;
    const double C30993 =
        (4 * (2 * C81772 + C80996 * C81828) +
         C80996 * (3 * C81828 +
                   C80996 * (2 * C81774 +
                             C80996 * (C81069 + std::pow(C80836, 7) * bs[7] *
                                                    C81045 * C81182)))) /
        C80184;
    const double C250 =
        (3 * (C81007 + ae * C81010 + C80830 * C81018) +
         ae * (2 * C81010 + C80830 * C81019) +
         C80830 * (2 * C81018 + ae * C81019 +
                   C80830 * (C81014 + ae * C80830 * C81015 +
                             C80830 * (ae * C81015 +
                                       C80830 * C80904 * C80903 * C81002)))) /
        C80184;
    const double C812 =
        (C80952 * (C81007 + ae * C81010 + C80830 * C81018)) / C80184;
    const double C1272 = (be * (C80843 + C80830 * C80862 + C80851 * ae) +
                          C80996 * (C81007 + ae * C81010 + C80830 * C81018)) /
                         C80184;
    const double C1857 =
        (ae * C81003 + C80830 * C81007 + C81018 * C81084) / C80184;
    const double C3534 =
        (be * C80952 * C80862 + C80996 * C80952 * C81018) / C80184;
    const double C4304 = (ae * C81003 + C80830 * C81007 + be * C80996 * C80862 +
                          C80996 * (be * C80862 + C80996 * C81018)) /
                         C80184;
    const double C30125 =
        (3 * (C81007 + be * C81888 + C80996 * C81891) +
         be * (2 * C81888 + C80996 * C81892) +
         C80996 * (2 * C81891 + be * C81892 +
                   C80996 * (C81014 + C81259 +
                             C80996 * (C80901 + C80996 * C81026)))) /
        C80184;
    const double C81034 = C80830 * C81032;
    const double C81895 = C80996 * C81032;
    const double C82105 = C80952 * C81032;
    const double C2737 =
        (2 * C80952 * C81018 + C80952 * (C81018 + C81032 * C81084)) / C80184;
    const double C3537 = (be * (C80862 + C80888 * C81084) +
                          C80996 * (C81018 + C81032 * C81084)) /
                         C80184;
    const double C15511 =
        (3 * (C81018 + C81032 * C81084) +
         C80952 *
             (2 * C80952 * C81032 +
              C80952 * (C81032 + (ae * C81028 + C80830 * std::pow(C80836, 7) *
                                                    bs[7] * C81002) *
                                     C81084))) /
        C80184;
    const double C15950 =
        (4 * (2 * C80952 * C81014 + C80952 * C81683) +
         C80952 * (3 * C81683 +
                   C80952 * (2 * C80952 * C81026 +
                             C80952 * (C81026 + std::pow(C80836, 7) * bs[7] *
                                                    C81002 * C81084)))) /
        C80184;
    const double C16401 = (be * (2 * C81491 + C80952 * C81581) +
                           C80996 * (2 * C80952 * C81014 + C80952 * C81683)) /
                          C80184;
    const double C16907 = (C81007 + C81014 * C81084 + be * C80996 * C81581 +
                           C80996 * (be * C81581 + C80996 * C81683)) /
                          C80184;
    const double C18462 =
        (2 * (be * C81581 + C80996 * C81683) + be * (C81581 + C81676 * C81182) +
         C80996 * (C81683 + be * C80996 * C81676 +
                   C80996 * (be * C81676 +
                             C80996 * (C81026 + std::pow(C80836, 7) * bs[7] *
                                                    C81002 * C81084)))) /
        C80184;
    const double C81979 = C81205 + C81977;
    const double C82035 = C80996 * C82033;
    const double C10989 = C82679 * C3781;
    const double C31869 = C25721 * C3781;
    const double C54820 = C82679 * C3781;
    const double C4602 = C82896 * C4594;
    const double C26125 = C82896 * C4594;
    const double C61998 = C61595 * C4594;
    const double C15649 =
        (3 * (C81110 + ae * C81521 + C80952 * C81643) +
         ae * (2 * C81521 + C80952 * C81644) +
         C80952 * (2 * C81643 + ae * C81644 +
                   C80952 * (C81113 + ae * C80952 * C81015 +
                             C80952 * (C81022 + C80952 * C81116)))) /
        C80184;
    const double C16535 =
        (2 * (ae * C81563 + C80952 * C81790) +
         ae * (C80996 * C81644 + C81609 * be) +
         C80952 * (C81790 + ae * (C80996 * C81734 + C81608) +
                   C80952 * (ae * (C80996 * C81015 + C80872) +
                             C80952 * (C81065 + C80996 * C81116)))) /
        C80184;
    const double C446 =
        (4 * (2 * C80830 * C81113 + C80830 * C81118) +
         C80830 * (3 * C81118 +
                   C80830 * (2 * C80830 * C81116 +
                             C80830 * (C81116 + std::pow(C80836, 7) * bs[7] *
                                                    C81107 * C80834)))) /
        C80184;
    const double C959 = (ae * (2 * C81010 + C80830 * C81019) +
                         C80952 * (2 * C80830 * C81113 + C80830 * C81118)) /
                        C80184;
    const double C1419 = (be * (2 * C81053 + C80830 * C81062) +
                          C80996 * (2 * C80830 * C81113 + C80830 * C81118)) /
                         C80184;
    const double C2157 = (C81110 + C81113 * C80834 + ae * C80952 * C81019 +
                          C80952 * (ae * C81019 + C80952 * C81118)) /
                         C80184;
    const double C3004 =
        (2 * (ae * C81019 + C80952 * C81118) + ae * (C81019 + C81033 * C81084) +
         C80952 * (C81118 + ae * C80952 * C81033 +
                   C80952 * (ae * C81033 +
                             C80952 * (C81116 + std::pow(C80836, 7) * bs[7] *
                                                    C81107 * C80834)))) /
        C80184;
    const double C3783 = (ae * (C80996 * C81019 + C80880 * be) +
                          C80952 * (be * C81062 + C80996 * C81118)) /
                         C80184;
    const double C4595 = (C81110 + C81113 * C80834 + be * C80996 * C81062 +
                          C80996 * (be * C81062 + C80996 * C81118)) /
                         C80184;
    const double C6187 =
        (2 * (be * C81062 + C80996 * C81118) + be * (C81062 + C81076 * C81182) +
         C80996 * (C81118 + be * C80996 * C81076 +
                   C80996 * (be * C81076 +
                             C80996 * (C81116 + std::pow(C80836, 7) * bs[7] *
                                                    C81107 * C80834)))) /
        C80184;
    const double C81650 = C81025 + C81648;
    const double C81879 = C81068 + C81878;
    const double C81742 = C80952 * C81738;
    const double C81797 = C80952 * C81795;
    const double C81834 = C80996 * C81795;
    const double C17137 =
        (C81110 + be * C80996 * C81051 + C80996 * C81790 +
         ae * (C81521 + C80996 * (C80996 * C81734 + C81608) +
               C80996 * C81603 * be) +
         C80952 * (ae * (C81008 + C80996 * C81794 + C80996 * C80866 * be) +
                   C80952 * (C81113 + C81782 + C80996 * C81795))) /
        C80184;
    const double C507 =
        (3 * (C81131 + be * C81134 + C80830 * C81142) +
         be * (2 * C81134 + C80830 * C81143) +
         C80830 * (2 * C81142 + be * C81143 +
                   C80830 * (C81138 + be * C80830 * C81139 +
                             C80830 * (be * C81139 +
                                       C80830 * C80904 * C80903 * C81126)))) /
        C80184;
    const double C1010 =
        (C80952 * (C81131 + be * C81134 + C80830 * C81142)) / C80184;
    const double C1470 = (ae * (C80842 + C80830 * C80861 + C80851 * be) +
                          C80996 * (C81131 + be * C81134 + C80830 * C81142)) /
                         C80184;
    const double C2246 =
        (be * C81127 + C80830 * C81131 + C81142 * C81084) / C80184;
    const double C3866 =
        (ae * C80952 * C80861 + C80996 * C80952 * C81142) / C80184;
    const double C4688 = (be * C81127 + C80830 * C81131 + ae * C80996 * C80861 +
                          C80996 * (ae * C80861 + C80996 * C81142)) /
                         C80184;
    const double C30305 =
        (3 * (C81131 + ae * C81912 + C80996 * C81915) +
         ae * (2 * C81912 + C80996 * C81916) +
         C80996 * (2 * C81915 + ae * C81916 +
                   C80996 * (C81138 + C81258 +
                             C80996 * (C80900 + C80996 * C81150)))) /
        C80184;
    const double C81158 = C80830 * C81156;
    const double C81919 = C80996 * C81156;
    const double C82111 = C80952 * C81156;
    const double C3087 =
        (2 * C80952 * C81142 + C80952 * (C81142 + C81156 * C81084)) / C80184;
    const double C3869 = (ae * (C80861 + C80887 * C81084) +
                          C80996 * (C81142 + C81156 * C81084)) /
                         C80184;
    const double C15696 =
        (3 * (C81142 + C81156 * C81084) +
         C80952 *
             (2 * C80952 * C81156 +
              C80952 * (C81156 + (be * C81152 + C80830 * std::pow(C80836, 7) *
                                                    bs[7] * C81126) *
                                     C81084))) /
        C80184;
    const double C16152 =
        (4 * (2 * C80952 * C81138 + C80952 * C81748) +
         C80952 * (3 * C81748 +
                   C80952 * (2 * C80952 * C81150 +
                             C80952 * (C81150 + std::pow(C80836, 7) * bs[7] *
                                                    C81126 * C81084)))) /
        C80184;
    const double C16581 = (ae * (2 * C81506 + C80952 * C81593) +
                           C80996 * (2 * C80952 * C81138 + C80952 * C81748)) /
                          C80184;
    const double C17215 = (C81131 + C81138 * C81084 + ae * C80996 * C81593 +
                           C80996 * (ae * C81593 + C80996 * C81748)) /
                          C80184;
    const double C18820 =
        (2 * (ae * C81593 + C80996 * C81748) + ae * (C81593 + C81690 * C81182) +
         C80996 * (C81748 + ae * C80996 * C81690 +
                   C80996 * (ae * C81690 +
                             C80996 * (C81150 + std::pow(C80836, 7) * bs[7] *
                                                    C81126 * C81084)))) /
        C80184;
    const double C81994 = C81204 + C81992;
    const double C82052 = C80996 * C82050;
    const double C11193 = C82639 * C3947;
    const double C21784 = C13257 * C3947;
    const double C42536 = C82639 * C3947;
    const double C4772 = C82581 * C4766;
    const double C32069 = C82863 * C4766;
    const double C15739 =
        (3 * (C81170 + be * C81522 + C80952 * C81657) +
         be * (2 * C81522 + C80952 * C81658) +
         C80952 * (2 * C81657 + be * C81658 +
                   C80952 * (C81173 + be * C80952 * C81139 +
                             C80952 * (C81146 + C80952 * C81176)))) /
        C80184;
    const double C30349 =
        (3 * (C81170 + ae * C81924 + C80996 * C81927) +
         ae * (2 * C81924 + C80996 * C81928) +
         C80996 * (2 * C81927 + ae * C81928 +
                   C80996 * (C81173 + C81781 +
                             C80996 * (C80978 + C80996 * C81176)))) /
        C80184;
    const double C556 =
        (4 * (2 * C80830 * C81173 + C80830 * C81178) +
         C80830 * (3 * C81178 +
                   C80830 * (2 * C80830 * C81176 +
                             C80830 * (C81176 + std::pow(C80836, 7) * bs[7] *
                                                    C81167 * C80834)))) /
        C80184;
    const double C1058 = (be * (2 * C81134 + C80830 * C81143) +
                          C80952 * (2 * C80830 * C81173 + C80830 * C81178)) /
                         C80184;
    const double C1518 = (ae * (2 * C80966 + C80830 * C80975) +
                          C80996 * (2 * C80830 * C81173 + C80830 * C81178)) /
                         C80184;
    const double C2325 = (C81170 + C81173 * C80834 + be * C80952 * C81143 +
                          C80952 * (be * C81143 + C80952 * C81178)) /
                         C80184;
    const double C3177 =
        (2 * (be * C81143 + C80952 * C81178) + be * (C81143 + C81157 * C81084) +
         C80952 * (C81178 + be * C80952 * C81157 +
                   C80952 * (be * C81157 +
                             C80952 * (C81176 + std::pow(C80836, 7) * bs[7] *
                                                    C81167 * C80834)))) /
        C80184;
    const double C3949 = (ae * (C80952 * C80975 + C80880 * be) +
                          C80996 * (be * C81143 + C80952 * C81178)) /
                         C80184;
    const double C4767 = (C81170 + C81173 * C80834 + ae * C80996 * C80975 +
                          C80996 * (ae * C80975 + C80996 * C81178)) /
                         C80184;
    const double C6356 =
        (2 * (ae * C80975 + C80996 * C81178) + ae * (C80975 + C80989 * C81182) +
         C80996 * (C81178 + ae * C80996 * C80989 +
                   C80996 * (ae * C80989 +
                             C80996 * (C81176 + std::pow(C80836, 7) * bs[7] *
                                                    C81167 * C80834)))) /
        C80184;
    const double C81664 = C81149 + C81662;
    const double C81933 = C80981 + C81931;
    const double C81758 = C80952 * C81754;
    const double C81998 = C80996 * C81754;
    const double C82063 = C80996 * C82061;
    const double C80223 = C80220 * be;
    const double C80260 = C80257 * be;
    const double C19743 = C80205 * C703;
    const double C19741 = C80205 * C702;
    const double C19996 = C80205 * C2526;
    const double C19992 = C80205 * C1951;
    const double C19988 = C80205 * C1654;
    const double C19984 = C80205 * C858;
    const double C19980 = C80205 * C694;
    const double C20210 = C80205 * C3084;
    const double C20206 = C80205 * C2242;
    const double C20202 = C80205 * C1004;
    const double C22339 = C80205 * C3344;
    const double C22335 = C80205 * C3614;
    const double C22331 = C80205 * C3347;
    const double C22649 = C80205 * C3863;
    const double C22645 = C80205 * C3860;
    const double C22964 = C80205 * C1163;
    const double C22962 = C80205 * C1162;
    const double C23273 = C80205 * C1318;
    const double C23269 = C80205 * C1154;
    const double C23571 = C80205 * C1464;
    const double C32601 = C80205 * C4975;
    const double C33531 = C80205 * C4406;
    const double C33527 = C80205 * C4109;
    const double C33847 = C80205 * C4684;
    const double C35600 = C80205 * C5985;
    const double C35596 = C80205 * C5689;
    const double C80209 = C80177 * C80205;
    const double C80244 = 2 * C80205;
    const double C80277 = C80205 / C80185;
    const double C80208 = C80204 / C80179;
    const double C2845 = C1651 * C1655;
    const double C2839 = C1651 * C859;
    const double C2833 = C1651 * C693;
    const double C3095 = C1651 * C1005;
    const double C6008 = C1651 * C4110;
    const double C6002 = C1651 * C1319;
    const double C5996 = C1651 * C1153;
    const double C6274 = C1651 * C1465;
    const double C11751 = C1651 * C3346;
    const double C15842 = C15405 * C2533;
    const double C15840 = C15405 * C2532;
    const double C15838 = C15405 * C1658;
    const double C15836 = C15405 * C1657;
    const double C15834 = C15405 * C705;
    const double C15832 = C15405 * C704;
    const double C16017 = C15405 * C15407;
    const double C16013 = C15405 * C2527;
    const double C16011 = C15405 * C1950;
    const double C16009 = C15405 * C1653;
    const double C16007 = C15405 * C857;
    const double C16005 = C15405 * C695;
    const double C16159 = C15405 * C3083;
    const double C16157 = C15405 * C2241;
    const double C16155 = C15405 * C1003;
    const double C17460 = C15405 * C3354;
    const double C17458 = C15405 * C3353;
    const double C17455 = C15405 * C4982;
    const double C17453 = C15405 * C4981;
    const double C17451 = C15405 * C3360;
    const double C17449 = C15405 * C3359;
    const double C17747 = C15405 * C16745;
    const double C17743 = C15405 * C4976;
    const double C17739 = C15405 * C3345;
    const double C17737 = C15405 * C3613;
    const double C17735 = C15405 * C3348;
    const double C17993 = C15405 * C3862;
    const double C17991 = C15405 * C5454;
    const double C17989 = C15405 * C3859;
    const double C18276 = C15405 * C4113;
    const double C18274 = C15405 * C4112;
    const double C18272 = C15405 * C1165;
    const double C18270 = C15405 * C1164;
    const double C18549 = C15405 * C4405;
    const double C18547 = C15405 * C4108;
    const double C18545 = C15405 * C1317;
    const double C18543 = C15405 * C1155;
    const double C18825 = C15405 * C4683;
    const double C18823 = C15405 * C1463;
    const double C24648 = C15405 * C16304;
    const double C30843 = C15405 * C5696;
    const double C30841 = C15405 * C5695;
    const double C31000 = C15405 * C30022;
    const double C30998 = C15405 * C5984;
    const double C30996 = C15405 * C5690;
    const double C36606 = C15405 * C18266;
    const double C36604 = C15405 * C18265;
    const double C36827 = C15405 * C18262;
    const double C40494 = C39827 * C703;
    const double C40492 = C39827 * C702;
    const double C40747 = C39827 * C2526;
    const double C40743 = C39827 * C1951;
    const double C40739 = C39827 * C1654;
    const double C40735 = C39827 * C858;
    const double C40731 = C39827 * C694;
    const double C40961 = C39827 * C3084;
    const double C40957 = C39827 * C2242;
    const double C40953 = C39827 * C1004;
    const double C43092 = C39827 * C4975;
    const double C43088 = C39827 * C3614;
    const double C43084 = C39827 * C3347;
    const double C43394 = C39827 * C3860;
    const double C43699 = C39827 * C1163;
    const double C43697 = C39827 * C1162;
    const double C44046 = C39827 * C4406;
    const double C44042 = C39827 * C4109;
    const double C44038 = C39827 * C1318;
    const double C44034 = C39827 * C1154;
    const double C44376 = C39827 * C4684;
    const double C44372 = C39827 * C1464;
    const double C50839 = C39827 * C3344;
    const double C51141 = C39827 * C3863;
    const double C58507 = C39827 * C5985;
    const double C58503 = C39827 * C5689;
    const double C82528 = C82524 - C82527;
    const double C82909 = C82882 / C80179;
    const double C82536 = C82532 - C82535;
    const double C82926 = C82908 / C80185;
    const double C40491 = C39819 * C710;
    const double C40748 = C39819 * C2824;
    const double C40744 = C39819 * C2532;
    const double C40740 = C39819 * C1954;
    const double C40736 = C39819 * C1657;
    const double C40732 = C39819 * C862;
    const double C40728 = C39819 * C704;
    const double C40958 = C39819 * C3086;
    const double C40954 = C39819 * C2245;
    const double C40950 = C39819 * C1008;
    const double C43093 = C39819 * C5223;
    const double C43089 = C39819 * C4981;
    const double C43085 = C39819 * C3619;
    const double C43081 = C39819 * C3359;
    const double C43395 = C39819 * C5457;
    const double C43391 = C39819 * C3865;
    const double C43696 = C39819 * C1170;
    const double C44043 = C39819 * C4409;
    const double C44039 = C39819 * C4112;
    const double C44035 = C39819 * C1322;
    const double C44031 = C39819 * C1164;
    const double C44373 = C39819 * C4687;
    const double C44369 = C39819 * C1468;
    const double C50840 = C39819 * C3622;
    const double C50836 = C39819 * C3353;
    const double C51138 = C39819 * C3868;
    const double C58504 = C39819 * C5987;
    const double C58500 = C39819 * C5695;
    const double C58712 = C39819 * C6265;
    const double C14025 = C82925 * C710;
    const double C14304 = C82925 * C1954;
    const double C14298 = C82925 * C1657;
    const double C14292 = C82925 * C862;
    const double C14286 = C82925 * C704;
    const double C14538 = C82925 * C2245;
    const double C14532 = C82925 * C1008;
    const double C27143 = C82925 * C1170;
    const double C27422 = C82925 * C4409;
    const double C27416 = C82925 * C4112;
    const double C27410 = C82925 * C1322;
    const double C27404 = C82925 * C1164;
    const double C27662 = C82925 * C4687;
    const double C27656 = C82925 * C1468;
    const double C67675 = C82925 * C3619;
    const double C67669 = C82925 * C3359;
    const double C67975 = C82925 * C3865;
    const double C80341 = C80340 / C80179;
    const double C13360 = C13341 * C1655;
    const double C13348 = C13341 * C1654;
    const double C13602 = C13341 * C1951;
    const double C13600 = C13341 * C1747;
    const double C13861 = C13341 * C2242;
    const double C18379 = C13341 * C16745;
    const double C18373 = C13341 * C3354;
    const double C18367 = C13341 * C3345;
    const double C18907 = C13341 * C3862;
    const double C21154 = C13341 * C3344;
    const double C21787 = C13341 * C3863;
    const double C37985 = C37964 * C692;
    const double C37977 = C37964 * C693;
    const double C37973 = C37964 * C703;
    const double C37969 = C37964 * C694;
    const double C38204 = C37964 * C859;
    const double C38202 = C37964 * C755;
    const double C38196 = C37964 * C858;
    const double C38194 = C37964 * C754;
    const double C38437 = C37964 * C1005;
    const double C38433 = C37964 * C1004;
    const double C41895 = C37964 * C4975;
    const double C41887 = C37964 * C3347;
    const double C42212 = C37964 * C3614;
    const double C42210 = C37964 * C3443;
    const double C42537 = C37964 * C3860;
    const double C43834 = C37964 * C4982;
    const double C43830 = C37964 * C4976;
    const double C43826 = C37964 * C3360;
    const double C43822 = C37964 * C3348;
    const double C44151 = C37964 * C3613;
    const double C44149 = C37964 * C3441;
    const double C44482 = C37964 * C5454;
    const double C44478 = C37964 * C3859;
    const double C46958 = C37964 * C3346;
    const double C72308 = C37964 * C18266;
    const double C72304 = C37964 * C18262;
    const double C80467 = C80306 * C80462;
    const double C80492 = C80462 / C80185;
    const double C80513 = 2 * C80462;
    const double C392 = C388 - C374;
    const double C6106 = C6104 - C6094;
    const double C82635 = C82630 - C82634;
    const double C1774 = C1743 * C113;
    const double C1768 = C1743 * C104;
    const double C1762 = C1743 * C111;
    const double C1756 = C1743 * C103;
    const double C2054 = C1743 * C312;
    const double C2052 = C1743 * C171;
    const double C2042 = C1743 * C311;
    const double C2040 = C1743 * C170;
    const double C2335 = C1743 * C499;
    const double C2329 = C1743 * C498;
    const double C29399 = C1743 * C4113;
    const double C29393 = C1743 * C4108;
    const double C29387 = C1743 * C1165;
    const double C29381 = C1743 * C1155;
    const double C29640 = C1743 * C4405;
    const double C29638 = C1743 * C4198;
    const double C29628 = C1743 * C1317;
    const double C29626 = C1743 * C1213;
    const double C29897 = C1743 * C4683;
    const double C29891 = C1743 * C1463;
    const double C54384 = C1743 * C1163;
    const double C54378 = C1743 * C1154;
    const double C54701 = C1743 * C1318;
    const double C54699 = C1743 * C1214;
    const double C55023 = C1743 * C1464;
    const double C82916 = C82892 / C80179;
    const double C82642 = C82638 - C82641;
    const double C82933 = C82919 / C80185;
    const double C37986 = C37887 * C178;
    const double C37982 = C37887 * C172;
    const double C37978 = C37887 * C177;
    const double C37974 = C37887 * C171;
    const double C37970 = C37887 * C176;
    const double C37966 = C37887 * C170;
    const double C38201 = C37887 * C367;
    const double C38193 = C37887 * C366;
    const double C38438 = C37887 * C554;
    const double C38434 = C37887 * C553;
    const double C38430 = C37887 * C552;
    const double C41892 = C37887 * C4199;
    const double C41888 = C37887 * C1219;
    const double C41884 = C37887 * C1214;
    const double C42538 = C37887 * C4766;
    const double C42534 = C37887 * C1516;
    const double C43831 = C37887 * C4202;
    const double C43827 = C37887 * C4198;
    const double C43823 = C37887 * C1218;
    const double C43819 = C37887 * C1213;
    const double C44148 = C37887 * C1373;
    const double C44479 = C37887 * C4765;
    const double C44475 = C37887 * C1515;
    const double C46955 = C37887 * C1215;
    const double C47565 = C37887 * C1517;
    const double C72305 = C37887 * C5819;
    const double C72301 = C37887 * C5816;
    const double C72719 = C37887 * C6354;
    const double C1773 = C82931 * C177;
    const double C1767 = C82931 * C171;
    const double C1761 = C82931 * C176;
    const double C1755 = C82931 * C170;
    const double C2055 = C82931 * C367;
    const double C2043 = C82931 * C366;
    const double C2334 = C82931 * C553;
    const double C2328 = C82931 * C552;
    const double C29398 = C82931 * C4202;
    const double C29392 = C82931 * C4198;
    const double C29386 = C82931 * C1218;
    const double C29380 = C82931 * C1213;
    const double C29629 = C82931 * C1373;
    const double C29896 = C82931 * C4765;
    const double C29890 = C82931 * C1515;
    const double C54383 = C82931 * C1219;
    const double C54377 = C82931 * C1214;
    const double C55022 = C82931 * C1516;
    const double C80367 = C80366 / C80179;
    const double C25892 = C25873 * C4110;
    const double C25880 = C25873 * C4109;
    const double C26126 = C25873 * C4406;
    const double C26368 = C25873 * C4684;
    const double C26366 = C25873 * C4300;
    const double C28727 = C25873 * C16745;
    const double C28721 = C25873 * C4982;
    const double C28715 = C25873 * C4976;
    const double C29200 = C25873 * C5454;
    const double C29198 = C25873 * C5140;
    const double C31552 = C25873 * C4975;
    const double C52480 = C52459 * C1152;
    const double C52472 = C52459 * C1153;
    const double C52468 = C52459 * C1163;
    const double C52464 = C52459 * C1154;
    const double C52690 = C52459 * C1319;
    const double C52686 = C52459 * C1318;
    const double C52909 = C52459 * C1465;
    const double C52907 = C52459 * C1267;
    const double C52901 = C52459 * C1464;
    const double C52899 = C52459 * C1266;
    const double C54498 = C52459 * C3344;
    const double C54490 = C52459 * C3347;
    const double C54821 = C52459 * C3614;
    const double C55140 = C52459 * C3863;
    const double C55138 = C52459 * C3531;
    const double C55132 = C52459 * C3860;
    const double C55130 = C52459 * C3528;
    const double C55463 = C52459 * C3354;
    const double C55459 = C52459 * C3345;
    const double C55455 = C52459 * C3360;
    const double C55451 = C52459 * C3348;
    const double C55761 = C52459 * C3613;
    const double C56074 = C52459 * C3862;
    const double C56072 = C52459 * C3530;
    const double C56066 = C52459 * C3859;
    const double C56064 = C52459 * C3527;
    const double C59145 = C52459 * C3346;
    const double C69860 = C52459 * C16304;
    const double C80617 = C80309 * C80612;
    const double C80642 = C80612 / C80185;
    const double C80663 = 2 * C80612;
    const double C635 = C631 - C617;
    const double C3266 = C3264 - C3258;
    const double C82675 = C82670 - C82674;
    const double C4327 = C4296 * C113;
    const double C4321 = C4296 * C104;
    const double C4315 = C4296 * C111;
    const double C4309 = C4296 * C103;
    const double C4605 = C4296 * C312;
    const double C4599 = C4296 * C311;
    const double C4873 = C4296 * C499;
    const double C4871 = C4296 * C242;
    const double C4861 = C4296 * C498;
    const double C4859 = C4296 * C241;
    const double C17653 = C4296 * C1658;
    const double C17647 = C4296 * C1653;
    const double C17641 = C4296 * C705;
    const double C17635 = C4296 * C695;
    const double C17907 = C4296 * C1950;
    const double C17901 = C4296 * C857;
    const double C18160 = C4296 * C2241;
    const double C18158 = C4296 * C1852;
    const double C18148 = C4296 * C1003;
    const double C18146 = C4296 * C805;
    const double C42005 = C4296 * C703;
    const double C41999 = C4296 * C694;
    const double C42333 = C4296 * C858;
    const double C42642 = C4296 * C1004;
    const double C42640 = C4296 * C806;
    const double C82918 = C82895 / C80179;
    const double C82682 = C82678 - C82681;
    const double C82935 = C82922 / C80185;
    const double C52481 = C52324 * C249;
    const double C52477 = C52324 * C243;
    const double C52473 = C52324 * C248;
    const double C52469 = C52324 * C242;
    const double C52465 = C52324 * C247;
    const double C52461 = C52324 * C241;
    const double C52691 = C52324 * C444;
    const double C52687 = C52324 * C443;
    const double C52683 = C52324 * C442;
    const double C52906 = C52324 * C610;
    const double C52898 = C52324 * C609;
    const double C54495 = C52324 * C1853;
    const double C54491 = C52324 * C811;
    const double C54487 = C52324 * C806;
    const double C54822 = C52324 * C2156;
    const double C54818 = C52324 * C957;
    const double C55460 = C52324 * C1856;
    const double C55456 = C52324 * C1852;
    const double C55452 = C52324 * C810;
    const double C55448 = C52324 * C805;
    const double C55762 = C52324 * C2155;
    const double C55758 = C52324 * C956;
    const double C56063 = C52324 * C1106;
    const double C59142 = C52324 * C807;
    const double C59444 = C52324 * C958;
    const double C69861 = C52324 * C2736;
    const double C69857 = C52324 * C2733;
    const double C70063 = C52324 * C3002;
    const double C4326 = C82932 * C248;
    const double C4320 = C82932 * C242;
    const double C4314 = C82932 * C247;
    const double C4308 = C82932 * C241;
    const double C4604 = C82932 * C443;
    const double C4598 = C82932 * C442;
    const double C4874 = C82932 * C610;
    const double C4862 = C82932 * C609;
    const double C17652 = C82932 * C1856;
    const double C17646 = C82932 * C1852;
    const double C17640 = C82932 * C810;
    const double C17634 = C82932 * C805;
    const double C17906 = C82932 * C2155;
    const double C17900 = C82932 * C956;
    const double C18149 = C82932 * C1106;
    const double C42004 = C82932 * C811;
    const double C41998 = C82932 * C806;
    const double C42332 = C82932 * C957;
    const double C80486 = C80482 * be;
    const double C80530 = C80527 * be;
    const double C80636 = C80632 * be;
    const double C80680 = C80677 * be;
    const double C193 = C168 * C115;
    const double C264 = C239 * C115;
    const double C1776 = C1744 * C701;
    const double C1868 = C239 * C701;
    const double C2548 = C1651 * C701;
    const double C6602 = C6585 * C701;
    const double C37981 = C37964 * C701;
    const double C4214 = C168 * C1161;
    const double C4329 = C4297 * C1161;
    const double C5711 = C1651 * C1161;
    const double C8625 = C8608 * C1161;
    const double C52476 = C52459 * C1161;
    const double C1766 = C1745 * C1660;
    const double C1872 = C239 * C1660;
    const double C13354 = C13341 * C1660;
    const double C19751 = C80205 * C1660;
    const double C40502 = C39827 * C1660;
    const double C10542 = C6585 * C3358;
    const double C10656 = C8608 * C3358;
    const double C22004 = C80205 * C3358;
    const double C41891 = C37964 * C3358;
    const double C42007 = C4297 * C3358;
    const double C42765 = C39827 * C3358;
    const double C54386 = C1744 * C3358;
    const double C54494 = C52459 * C3358;
    const double C4218 = C168 * C4115;
    const double C4319 = C4298 * C4115;
    const double C25886 = C25873 * C4115;
    const double C33208 = C80205 * C4115;
    const double C43707 = C39827 * C4115;
    const double C16015 = C15405 * C2821;
    const double C16107 = C239 * C2821;
    const double C17741 = C15405 * C3616;
    const double C17909 = C4297 * C3616;
    const double C18636 = C13341 * C3616;
    const double C22543 = C8608 * C3616;
    const double C29636 = C1745 * C3616;
    const double C55765 = C52459 * C3616;
    const double C17745 = C15405 * C5220;
    const double C17905 = C4298 * C5220;
    const double C28961 = C25873 * C5220;
    const double C29644 = C1744 * C5220;
    const double C33637 = C6585 * C5220;
    const double C44159 = C37964 * C5220;
    const double C31152 = C15405 * C6262;
    const double C31199 = C168 * C6262;
    const double C2437 = C2423 - C2424;
    const double C4510 = C4500 - C4501;
    const double C2546 = C1651 * C700;
    const double C2832 = C82885 * C700;
    const double C14290 = C82885 * C700;
    const double C45691 = C44656 * C700;
    const double C5709 = C1651 * C1160;
    const double C5995 = C82885 * C1160;
    const double C27408 = C82885 * C1160;
    const double C49005 = C44656 * C1160;
    const double C2842 = C1642 * C1659;
    const double C19749 = C80205 * C1659;
    const double C19987 = C82533 * C1659;
    const double C40500 = C39827 * C1659;
    const double C40738 = C82533 * C1659;
    const double C11748 = C1642 * C3357;
    const double C22002 = C80205 * C3357;
    const double C22330 = C82533 * C3357;
    const double C42763 = C39827 * C3357;
    const double C43083 = C82533 * C3357;
    const double C6005 = C1642 * C4114;
    const double C33206 = C80205 * C4114;
    const double C33526 = C82533 * C4114;
    const double C43705 = C39827 * C4114;
    const double C44041 = C82533 * C4114;
    const double C18906 = C82893 * C3946;
    const double C29894 = C82893 * C3946;
    const double C52159 = C44659 * C3946;
    const double C18910 = C13257 * C5534;
    const double C33949 = C82639 * C5534;
    const double C44481 = C82639 * C5534;
    const double C18366 = C82893 * C3442;
    const double C18634 = C13341 * C3442;
    const double C29384 = C82893 * C3442;
    const double C29634 = C1745 * C3442;
    const double C51538 = C44659 * C3442;
    const double C18376 = C13257 * C5060;
    const double C29642 = C1744 * C5060;
    const double C33318 = C82639 * C5060;
    const double C33635 = C6585 * C5060;
    const double C43829 = C82639 * C5060;
    const double C44157 = C37964 * C5060;
    const double C2545 = C1642 * C709;
    const double C19744 = C82533 * C709;
    const double C40495 = C82533 * C709;
    const double C5708 = C1642 * C1169;
    const double C22965 = C82533 * C1169;
    const double C43700 = C82533 * C1169;
    const double C2553 = C1641 * C1665;
    const double C14037 = C82925 * C1665;
    const double C15839 = C82523 * C1665;
    const double C19748 = C82844 * C1665;
    const double C40499 = C39819 * C1665;
    const double C11426 = C1641 * C3366;
    const double C17452 = C82523 * C3366;
    const double C22001 = C82844 * C3366;
    const double C42762 = C39819 * C3366;
    const double C67357 = C82925 * C3366;
    const double C5716 = C1641 * C4120;
    const double C18277 = C82523 * C4120;
    const double C27155 = C82925 * C4120;
    const double C33205 = C82844 * C4120;
    const double C43704 = C39819 * C4120;
    const double C383 = C82581 * C368;
    const double C6834 = C82863 * C368;
    const double C38209 = C37887 * C368;
    const double C6822 = C82639 * C912;
    const double C13599 = C13257 * C912;
    const double C38197 = C82639 * C912;
    const double C4495 = C82581 * C1372;
    const double C10864 = C82863 * C1372;
    const double C21466 = C13256 * C1372;
    const double C42209 = C37887 * C1372;
    const double C54702 = C82931 * C1372;
    const double C12777 = C82639 * C3704;
    const double C18633 = C13257 * C3704;
    const double C44152 = C82639 * C3704;
    const double C6101 = C82581 * C4487;
    const double C18641 = C13256 * C4487;
    const double C29641 = C82931 * C4487;
    const double C33634 = C82863 * C4487;
    const double C44156 = C37887 * C4487;
    const double C626 = C82592 * C611;
    const double C9072 = C82864 * C611;
    const double C52914 = C52324 * C611;
    const double C2422 = C82592 * C1105;
    const double C11300 = C82864 * C1105;
    const double C32174 = C25720 * C1105;
    const double C42643 = C82932 * C1105;
    const double C55129 = C52324 * C1105;
    const double C9060 = C82679 * C1565;
    const double C26365 = C25721 * C1565;
    const double C52902 = C82679 * C1565;
    const double C3263 = C82592 * C2413;
    const double C18161 = C82932 * C2413;
    const double C22849 = C82864 * C2413;
    const double C29205 = C25720 * C2413;
    const double C56071 = C52324 * C2413;
    const double C12265 = C82679 * C4030;
    const double C29197 = C25721 * C4030;
    const double C56067 = C82679 * C4030;
    const double C393 = C389 - C378;
    const double C394 = C390 - C382;
    const double C4512 = C4508 - C4494;
    const double C4513 = C4509 - C4498;
    const double C6107 = C6105 - C6100;
    const double C31058 = C31056 - C31050;
    const double C636 = C632 - C621;
    const double C637 = C633 - C625;
    const double C2440 = C2436 - C2421;
    const double C2442 = C2438 - C2430;
    const double C3267 = C3265 - C3262;
    const double C16258 = C16256 - C16250;
    const double C80894 = C80856 + C80891;
    const double C2657 =
        (2 * (be * C80862 + C80952 * C80974) + be * (C80862 + C80888 * C81084) +
         C80952 * (C80974 + be * C80952 * C80888 +
                   C80952 * (C80899 + C80952 * C80988))) /
        C80184;
    const double C3450 = (C80996 * (C80974 + be * C80952 * C80888 +
                                    C80952 * (C80899 + C80952 * C80988))) /
                         C80184;
    const double C5064 =
        (be * C80862 + C80952 * C80974 + (C80899 + C80952 * C80988) * C81182) /
        C80184;
    const double C5908 =
        (2 * (be * C80862 + C80996 * C81018) + be * (C80862 + C80888 * C81182) +
         C80996 * (C81018 + be * C80996 * C80888 +
                   C80996 * (C80899 + C80996 * C81032))) /
        C80184;
    const double C5144 = (C80952 * C81018 + be * C80996 * C81493 +
                          C80996 * (be * C81493 + C80996 * C80952 * C81032)) /
                         C80184;
    const double C4980 = (C80952 * C80862 + C81493 * C81182) / C80179;
    const double C19221 = C239 * C2531;
    const double C19759 = C80205 * C2531;
    const double C40510 = C39827 * C2531;
    const double C21160 = C13341 * C3352;
    const double C21266 = C8608 * C3352;
    const double C22012 = C80205 * C3352;
    const double C50534 = C39827 * C3352;
    const double C54388 = C1745 * C3352;
    const double C54502 = C52459 * C3352;
    const double C34189 = C168 * C5694;
    const double C35387 = C80205 * C5694;
    const double C58294 = C39827 * C5694;
    const double C36758 = C82878 * C18461;
    const double C71735 = C82878 * C18461;
    const double C15846 = C15405 * C15410;
    const double C15959 = C239 * C15410;
    const double C24435 = C15405 * C16308;
    const double C24580 = C8608 * C16308;
    const double C69864 = C52459 * C16308;
    const double C17464 = C15405 * C16748;
    const double C17657 = C4298 * C16748;
    const double C18385 = C13341 * C16748;
    const double C28733 = C25873 * C16748;
    const double C29403 = C1745 * C16748;
    const double C30847 = C15405 * C30025;
    const double C30906 = C168 * C30025;
    const double C80893 = C80855 + C80890;
    const double C80908 = C80886 + C80898;
    const double C2825 =
        (2 * (ae * C80861 + C80952 * C81061) + ae * (C80861 + C80887 * C81084) +
         C80952 * (C81061 + ae * C80952 * C80887 +
                   C80952 * (C80898 + C80952 * C81075))) /
        C80184;
    const double C6266 =
        (2 * (ae * C80861 + C80996 * C81142) + ae * (C80861 + C80887 * C81182) +
         C80996 * (C81142 + ae * C80996 * C80887 +
                   C80996 * (C80898 + C80996 * C81156))) /
        C80184;
    const double C5458 = (C80952 * C81142 + ae * C80996 * C81508 +
                          C80996 * (ae * C81508 + C80996 * C80952 * C81156)) /
                         C80184;
    const double C16986 =
        (C81061 + C81075 * C81182 + ae * (C81508 + C80952 * C80931 * C81182) +
         C80952 *
             (ae * (C80887 + C80931 * C81182) +
              C80952 * (C81075 + (be * C81071 + C80830 * std::pow(C80836, 7) *
                                                    bs[7] * C81045) *
                                     C81182))) /
        C80184;
    const double C4979 = (C80952 * C80861 + C81508 * C81182) / C80179;
    const double C19757 = C80205 * C2530;
    const double C19995 = C82533 * C2530;
    const double C40508 = C39827 * C2530;
    const double C40746 = C82533 * C2530;
    const double C22010 = C80205 * C3351;
    const double C22338 = C82533 * C3351;
    const double C50532 = C39827 * C3351;
    const double C50838 = C82533 * C3351;
    const double C35385 = C80205 * C5693;
    const double C35595 = C82533 * C5693;
    const double C58292 = C39827 * C5693;
    const double C58502 = C82533 * C5693;
    const double C37036 = C82523 * C18819;
    const double C24649 = C82523 * C16447;
    const double C15844 = C15405 * C15409;
    const double C16016 = C82523 * C15409;
    const double C24433 = C15405 * C16307;
    const double C24647 = C82523 * C16307;
    const double C17462 = C15405 * C16747;
    const double C17746 = C82523 * C16747;
    const double C30845 = C15405 * C30024;
    const double C30999 = C82523 * C30024;
    const double C80892 = C80869 + C80889;
    const double C708 =
        (C80952 * C80860 + ae * C80952 * C80861 + be * C80952 * C80862 +
         C80830 *
             (ae * C80952 * C80855 + be * C80952 * C80856 + C80830 * C81210)) /
        C80184;
    const double C3365 =
        (ae * C80996 * C80952 * C80855 + be * C80996 * C80952 * C80856 +
         C80830 * C80996 * C81210) /
        C80184;
    const double C4985 = (C80952 * C80860 + C81210 * C81182) / C80184;
    const double C1168 =
        (C80996 * C80860 + ae * C80996 * C80861 + be * C80996 * C80862 +
         C80830 *
             (ae * C80996 * C80855 + be * C80996 * C80856 + C80830 * C81264)) /
        C80184;
    const double C2557 = C1642 * C1666;
    const double C19752 = C82533 * C1666;
    const double C40503 = C82533 * C1666;
    const double C15843 = C82523 * C2536;
    const double C19756 = C82844 * C2536;
    const double C40507 = C39819 * C2536;
    const double C17461 = C82523 * C3363;
    const double C22009 = C82844 * C3363;
    const double C50531 = C39819 * C3363;
    const double C5720 = C1642 * C4121;
    const double C33209 = C82533 * C4121;
    const double C43708 = C82533 * C4121;
    const double C30844 = C82523 * C5699;
    const double C35384 = C82844 * C5699;
    const double C58291 = C39819 * C5699;
    const double C80939 = C80881 + C80936;
    const double C81586 = C80888 + C81584;
    const double C81898 = C80888 + C81896;
    const double C33199 =
        (2 * C80996 * C81493 + C80996 * (C81493 + C82106 * C81182)) / C80179;
    const double C81724 = C81058 + C81719;
    const double C82093 = C81139 + C82090;
    const double C81363 = C81361 + C80929;
    const double C81552 = C81550 + C80929;
    const double C80932 = C80906 + C80927;
    const double C81362 = C81359 + C80926;
    const double C81551 = C81548 + C80926;
    const double C5379 =
        (ae * (C81019 + C80996 * (C80996 * C81033 + C80926) +
               C80996 * C80921 * be) +
         C80952 * (C81118 + be * C80996 * C81076 +
                   C80996 * (be * C81076 +
                             C80996 * (C81116 + std::pow(C80836, 7) * bs[7] *
                                                    C81107 * C80834)))) /
        C80184;
    const double C3784 =
        (be * C81062 + C80996 * C81118 +
         ae * (C80996 * C80952 * C81033 + C81360 * be) +
         C80952 * (ae * (C80996 * C81033 + C80926) +
                   C80952 * (be * C81076 +
                             C80996 * (C81116 + std::pow(C80836, 7) * bs[7] *
                                                    C81107 * C80834)))) /
        C80184;
    const double C5142 =
        (C80952 * C81019 + C80996 * (C80996 * C81515 + C81360 * be) +
         C80996 * C81360 * be) /
        C80179;
    const double C5456 =
        (C80952 * C81143 + C80996 * (C80996 * C81516 + C81360 * ae) +
         C80996 * C81360 * ae) /
        C80179;
    const double C4974 = C80952 * C80880 + C81360 * C81182;
    const double C81635 = C80952 * C81633;
    const double C81966 = C80996 * C81963;
    const double C81634 = C80952 * C81632;
    const double C81965 = C80996 * C81960;
    const double C16906 =
        (C81010 + C81021 * C81084 + C80996 * (C80996 * C81651 + C81628 * be) +
         C80996 * C81628 * be) /
        C80179;
    const double C17214 =
        (C81134 + C81145 * C81084 + C80996 * (C80996 * C81665 + C81628 * ae) +
         C80996 * C81628 * ae) /
        C80179;
    const double C20546 = (C80996 * (2 * C81518 + C80952 * C81651) +
                           (2 * C81367 + C80952 * C81628) * be) /
                          C80179;
    const double C20816 = (C80996 * (2 * C81519 + C80952 * C81665) +
                           (2 * C81367 + C80952 * C81628) * ae) /
                          C80179;
    const double C15408 = 3 * (C80851 + C80873 * C81084) +
                          C80952 * (2 * C81367 + C80952 * C81628);
    const double C16746 = C80851 + C80873 * C81084 + C81628 * C81182;
    const double C20408 = C80996 * (2 * C81367 + C80952 * C81628);
    const double C82122 = C82120 + C81630;
    const double C82121 = C82119 + C81627;
    const double C17138 =
        (C81379 + be * C80996 * C81064 + C80996 * (C81068 + C80996 * C81646) +
         ae * (C81518 + C80996 * (C80996 * C80952 * C81647 + C81627) +
               C80996 * C81622 * be) +
         C80952 * (ae * (C81021 + C80996 * (C80996 * C81647 + C80920) +
                         C80996 * C80913 * be) +
                   C80952 * (C81646 + be * C80996 * C81624 +
                             C80996 * (be * C81624 + C80996 * C80830 *
                                                         std::pow(C80836, 7) *
                                                         bs[7] * C81107)))) /
        C80184;
    const double C30023 = 3 * (C80851 + C80873 * C81182) +
                          C80996 * (2 * C81555 + C80996 * C81962);
    const double C80938 = C80878 + C80935;
    const double C81598 = C80887 + C81596;
    const double C81922 = C80887 + C81920;
    const double C33198 =
        (2 * C80996 * C81508 + C80996 * (C81508 + C82112 * C81182)) / C80179;
    const double C81722 = C80971 + C81716;
    const double C82001 = C81607 + C81999;
    const double C82092 = C81015 + C82089;
    const double C80937 = C80909 + C80934;
    const double C81206 = C80830 * C81203;
    const double C81566 = C80996 * C81203;
    const double C3364 =
        (C80996 * C81210 + ae * C80996 * C80952 * C80887 +
         be * C80996 * C80952 * C80888 +
         C80830 * (ae * C80996 * C81201 + be * C80996 * C81202 +
                   C80830 * C80996 * C81203)) /
        C80184;
    const double C4983 =
        (C81210 + C81203 * C81182 +
         ae * (C80952 * C80887 + C80952 * C80931 * C81182) +
         be * (C80952 * C80888 + C80952 * C80933 * C81182) +
         C80830 *
             (ae * (C81201 + C80952 * C80919 * C81182) +
              be * (C81202 + C80952 * C80922 * C81182) +
              C80830 * (C81203 + C80952 *
                                     (C80903 * C80904 +
                                      C80834 * bs[7] * std::pow(C80836, 7)) *
                                     C80182 * C81182))) /
        C80184;
    const double C4984 = (ae * (C80952 * C80855 + C81201 * C81182) +
                          be * (C80952 * C80856 + C81202 * C81182) +
                          C80830 * (C81210 + C81203 * C81182)) /
                         C80184;
    const double C18268 =
        (2 * C80996 * C81210 + C80996 * (C81210 + C81203 * C81182)) / C80184;
    const double C81260 = C80830 * C81257;
    const double C81313 = C80886 + C81312;
    const double C81451 = C80886 + C81450;
    const double C2561 = C82885 * C1667;
    const double C14045 = C82885 * C1667;
    const double C45446 = C44656 * C1667;
    const double C5724 = C82885 * C4122;
    const double C27163 = C82885 * C4122;
    const double C63024 = C44656 * C4122;
    const double C81101 = C81094 + C81100;
    const double C81625 = C80952 * C81620;
    const double C81876 = C80996 * C81620;
    const double C81708 = C81698 + C81699;
    const double C81783 = C80952 * C81780;
    const double C81831 = C81094 + C81830;
    const double C81199 = C81192 + C81198;
    const double C81954 = C80996 * C81668;
    const double C82115 = C80952 * C81668;
    const double C20951 =
        (ae * (2 * C81518 + C80952 * C81651) +
         be * (2 * C81519 + C80952 * C81665) +
         C80996 *
             (2 * C80952 * C81668 +
              C80952 * (C81668 + C80830 *
                                     (C80903 * C80904 +
                                      C81182 * bs[7] * std::pow(C80836, 7)) *
                                     C80182 * C81084))) /
        C80184;
    const double C81764 = C81192 + C81763;
    const double C82009 = C80996 * C82004;
    const double C82082 = C82070 + C82071;
    const double C81862 = C81860 + C81720;
    const double C81723 = C81704 + C81718;
    const double C81861 = C81858 + C81717;
    const double C82019 = C80996 * C82017;
    const double C82018 = C80996 * C82016;
    const double C30442 = 3 * (C81373 + C81603 * C81182) +
                          C80996 * (2 * C81866 + C80996 * C82012);
    const double C82085 = C82076 + C82077;
    const double C194 = C82581 * C173;
    const double C384 = C168 * C173;
    const double C6605 = C82639 * C756;
    const double C6835 = C6585 * C756;
    const double C37984 = C82639 * C756;
    const double C38210 = C37964 * C756;
    const double C8538 = C82581 * C1216;
    const double C8766 = C168 * C1216;
    const double C1771 = C82893 * C1748;
    const double C2060 = C1745 * C1748;
    const double C13359 = C82893 * C1748;
    const double C13612 = C13341 * C1748;
    const double C44760 = C44659 * C1748;
    const double C10545 = C82639 * C3445;
    const double C10873 = C6585 * C3445;
    const double C46957 = C82639 * C3445;
    const double C47261 = C37964 * C3445;
    const double C4219 = C82581 * C4200;
    const double C4504 = C168 * C4200;
    const double C34621 = C82581 * C6355;
    const double C3948 =
        (ae * (C80966 + C80952 * C81369 + C81367 * be) +
         C80996 * (C81386 + be * C80952 * C81145 +
                   C80952 * (C81149 + C80952 * C80830 * C81176))) /
        C80184;
    const double C5535 =
        (be * C81134 + C80952 * C81386 + ae * C80996 * C81369 +
         C80996 *
             (ae * C81369 + C80996 * (C81149 + C80952 * C80830 * C81176))) /
        C80184;
    const double C2654 = (2 * (C80952 * C80966 + C80851 * be) +
                          C80952 * (C80966 + C80952 * C81369 + C81367 * be) +
                          (C80851 + C80873 * C81084) * be) /
                         C80179;
    const double C3444 =
        (C80996 * (C80966 + C80952 * C81369 + C81367 * be)) / C80179;
    const double C5061 =
        (C80952 * C80966 + C80851 * be + C81369 * C81182) / C80179;
    const double C33313 =
        (2 * C80996 * C81369 + C80996 * (C81369 + C81632 * C81182)) / C80179;
    const double C34412 = C34408 - C34409;
    const double C81614 = C80964 + C81612;
    const double C81707 = C81094 + C81696;
    const double C18899 =
        (2 * (ae * C81375 + C80996 * C81657) + ae * (C81375 + C81607 * C81182) +
         C80996 * (C81657 + ae * C80996 * C81607 +
                   C80996 * (C81696 + C80996 * C81754))) /
        C80184;
    const double C37332 = C82639 * C18357;
    const double C37540 = C6585 * C18357;
    const double C72303 = C82639 * C18357;
    const double C72511 = C37964 * C18357;
    const double C30903 = C82581 * C30072;
    const double C31052 = C168 * C30072;
    const double C265 = C82592 * C244;
    const double C627 = C239 * C244;
    const double C6677 = C82592 * C808;
    const double C7140 = C239 * C808;
    const double C8628 = C82679 * C1268;
    const double C9073 = C8608 * C1268;
    const double C52479 = C82679 * C1268;
    const double C52915 = C52459 * C1268;
    const double C1873 = C82592 * C1854;
    const double C2432 = C239 * C1854;
    const double C10659 = C82679 * C3529;
    const double C11309 = C8608 * C3529;
    const double C59144 = C82679 * C3529;
    const double C59746 = C52459 * C3529;
    const double C4324 = C82896 * C4301;
    const double C4879 = C4298 * C4301;
    const double C25891 = C82896 * C4301;
    const double C26378 = C25873 * C4301;
    const double C61764 = C61595 * C4301;
    const double C19452 = C82592 * C3003;
    const double C31551 = C82896 * C5141;
    const double C32179 = C25873 * C5141;
    const double C42002 = C82896 * C5141;
    const double C42648 = C4298 * C5141;
    const double C63948 = C61595 * C5141;
    const double C5905 = (2 * (C80996 * C81010 + C80851 * be) +
                          C80996 * (C81010 + C80996 * C81557 + C81555 * be) +
                          (C80851 + C80873 * C81182) * be) /
                         C80179;
    const double C19667 = C19663 - C19664;
    const double C15956 = C82592 * C15508;
    const double C16252 = C239 * C15508;
    const double C24575 = C82679 * C16399;
    const double C24991 = C8608 * C16399;
    const double C69859 = C82679 * C16399;
    const double C70269 = C52459 * C16399;
    const double C17650 = C82896 * C16905;
    const double C18166 = C4298 * C16905;
    const double C28726 = C82896 * C16905;
    const double C29210 = C25873 * C16905;
    const double C78979 = C61595 * C16905;
    const double C18459 = (2 * (C80996 * C81521 + C81373 * be) +
                           C80996 * (C81521 + C80996 * C81868 + C81866 * be) +
                           (C81373 + C81603 * C81182) * be) /
                          C80179;
    const double C82068 = C81192 + C81796;
    const double C81943 = C81008 + C81938;
    const double C386 = C168 * C314;
    const double C455 = C239 * C314;
    const double C6837 = C6585 * C860;
    const double C6924 = C239 * C860;
    const double C38212 = C37964 * C860;
    const double C8768 = C168 * C1320;
    const double C8850 = C8608 * C1320;
    const double C52694 = C52459 * C1320;
    const double C2062 = C1745 * C1952;
    const double C2167 = C239 * C1952;
    const double C2851 = C1651 * C1952;
    const double C13614 = C13341 * C1952;
    const double C10875 = C6585 * C3615;
    const double C10994 = C8608 * C3615;
    const double C11757 = C1651 * C3615;
    const double C47263 = C37964 * C3615;
    const double C59447 = C52459 * C3615;
    const double C4506 = C168 * C4407;
    const double C4609 = C4298 * C4407;
    const double C6014 = C1651 * C4407;
    const double C26132 = C25873 * C4407;
    const double C21584 = C82679 * C3782;
    const double C54824 = C82679 * C3782;
    const double C31871 = C82896 * C5378;
    const double C42336 = C82896 * C5378;
    const double C64254 = C61595 * C5378;
    const double C34487 = C82878 * C6186;
    const double C57396 = C82878 * C6186;
    const double C2822 = (2 * (C80952 * C81053 + C80851 * ae) +
                          C80952 * (C81053 + C80952 * C81370 + C81367 * ae) +
                          (C80851 + C80873 * C81084) * ae) /
                         C80179;
    const double C3617 =
        (C80996 * (C81053 + C80952 * C81370 + C81367 * ae)) / C80179;
    const double C5221 =
        (C80952 * C81053 + C80851 * ae + C81370 * C81182) / C80179;
    const double C33521 =
        (2 * C80996 * C81370 + C80996 * (C81370 + C81633 * C81182)) / C80179;
    const double C81615 = C81051 + C81613;
    const double C36829 = C15405 * C18537;
    const double C37542 = C6585 * C18537;
    const double C72513 = C37964 * C18537;
    const double C31002 = C15405 * C30169;
    const double C31054 = C168 * C30169;
    const double C2926 =
        (2 * (ae * C80966 + be * C81053 + C80952 * C81365) +
         ae * (C80966 + C80952 * C81369 + C81367 * be) +
         be * (C81053 + C80952 * C81370 + C81367 * ae) +
         C80952 * (C81365 + ae * C81369 + be * C81370 +
                   C80952 * (C80981 + C81068 + C80952 * C80830 * C81099))) /
        C80184;
    const double C3701 =
        (C80996 * C81365 + ae * C80996 * C81369 + be * C80996 * C81370 +
         C80952 * (ae * C80996 * C80977 + be * C80996 * C81064 +
                   C80952 * C80996 * C80830 * C81099)) /
        C80184;
    const double C3702 = (ae * C80996 * C80966 + be * C80996 * C81053 +
                          C80952 * C80996 * C81365) /
                         C80184;
    const double C4488 = (C80830 * C81089 + C81365 * C81182) / C80184;
    const double C5301 =
        (ae * (C80966 + C80977 * C81182) + be * (C81053 + C81064 * C81182) +
         C80952 * (C81365 + C80830 * C81099 * C81182)) /
        C80184;
    const double C6089 =
        (2 * C80996 * C81365 + C80996 * (C81365 + C80830 * C81099 * C81182)) /
        C80184;
    const double C17062 =
        (C81365 + C81620 * C81182 + ae * (C81369 + C81632 * C81182) +
         be * (C81370 + C81633 * C81182) +
         C80952 *
             (ae * (C80977 + C81621 * C81182) +
              be * (C81064 + C81624 * C81182) +
              C80952 * (C81620 + C80830 *
                                     (C80903 * C80904 +
                                      C81084 * bs[7] * std::pow(C80836, 7)) *
                                     C80182 * C81182))) /
        C80184;
    const double C81606 = C81600 + C81601;
    const double C387 = C82581 * C369;
    const double C6830 = C82639 * C911;
    const double C13611 = C13257 * C911;
    const double C38205 = C82639 * C911;
    const double C4499 = C82581 * C1371;
    const double C10872 = C82863 * C1371;
    const double C47260 = C37887 * C1371;
    const double C2051 = C82893 * C2036;
    const double C13603 = C82893 * C2036;
    const double C45004 = C44659 * C2036;
    const double C18637 = C82893 * C3703;
    const double C29637 = C82893 * C3703;
    const double C51851 = C44659 * C3703;
    const double C18645 = C13257 * C5302;
    const double C33638 = C82639 * C5302;
    const double C44160 = C82639 * C5302;
    const double C31051 = C82581 * C6090;
    const double C37539 = C82863 * C6090;
    const double C72510 = C37887 * C6090;
    const double C18649 = C82893 * C17061;
    const double C29649 = C82893 * C17061;
    const double C79851 = C44659 * C17061;
    const double C565 = C168 * C501;
    const double C629 = C239 * C501;
    const double C7068 = C6585 * C1006;
    const double C7142 = C239 * C1006;
    const double C38441 = C37964 * C1006;
    const double C8984 = C168 * C1466;
    const double C9075 = C8608 * C1466;
    const double C52917 = C52459 * C1466;
    const double C2339 = C1745 * C2243;
    const double C2434 = C239 * C2243;
    const double C3101 = C1651 * C2243;
    const double C13867 = C13341 * C2243;
    const double C11198 = C6585 * C3861;
    const double C11311 = C8608 * C3861;
    const double C12061 = C1651 * C3861;
    const double C47568 = C37964 * C3861;
    const double C59748 = C52459 * C3861;
    const double C4777 = C168 * C4685;
    const double C4881 = C4298 * C4685;
    const double C6280 = C1651 * C4685;
    const double C26380 = C25873 * C4685;
    const double C19592 = C82871 * C3176;
    const double C40350 = C82871 * C3176;
    const double C32072 = C6585 * C5455;
    const double C32181 = C25873 * C5455;
    const double C32903 = C80205 * C5455;
    const double C42541 = C37964 * C5455;
    const double C42650 = C4298 * C5455;
    const double C43398 = C39827 * C5455;
    const double C6263 = (2 * (C80996 * C81134 + C80851 * ae) +
                          C80996 * (C81134 + C80996 * C81558 + C81555 * ae) +
                          (C80851 + C80873 * C81182) * ae) /
                         C80179;
    const double C16161 = C15405 * C15693;
    const double C16254 = C239 * C15693;
    const double C24854 = C15405 * C16579;
    const double C24993 = C8608 * C16579;
    const double C70271 = C52459 * C16579;
    const double C17995 = C15405 * C17213;
    const double C18168 = C4298 * C17213;
    const double C18913 = C13341 * C17213;
    const double C29212 = C25873 * C17213;
    const double C29901 = C1745 * C17213;
    const double C18817 = (2 * (C80996 * C81522 + C81373 * ae) +
                           C80996 * (C81522 + C80996 * C81869 + C81866 * ae) +
                           (C81373 + C81603 * C81182) * ae) /
                          C80179;
    const double C81950 = C81132 + C81949;
    const double C3253 =
        (2 * C80952 * C81390 + C80952 * (C81390 + C80830 * C81197 * C81084)) /
        C80184;
    const double C4027 =
        (ae * (C81010 + C81021 * C81084) + be * (C81134 + C81145 * C81084) +
         C80996 * (C81390 + C80830 * C81197 * C81084)) /
        C80184;
    const double C4028 = (ae * C80952 * C81010 + be * C80952 * C81134 +
                          C80996 * C80952 * C81390) /
                         C80184;
    const double C4855 =
        (C80830 * C81187 + ae * (C80996 * C81010 + C80851 * be) +
         be * (C80996 * C81134 + C80851 * ae) +
         C80996 * (ae * C81010 + be * C81134 + C80996 * C81390)) /
        C80184;
    const double C5612 =
        (C80952 * C81390 + ae * (C80996 * C81518 + C81367 * be) +
         be * (C80996 * C81519 + C81367 * ae) +
         C80996 *
             (ae * C81518 + be * C81519 + C80996 * C80952 * C80830 * C81197)) /
        C80184;
    const double C6436 =
        (2 * (ae * C81010 + be * C81134 + C80996 * C81390) +
         ae * (C81010 + C80996 * C81557 + C81555 * be) +
         be * (C81134 + C80996 * C81558 + C81555 * ae) +
         C80996 * (C81390 + ae * C81557 + be * C81558 +
                   C80996 * (C81025 + C81149 + C80996 * C80830 * C81197))) /
        C80184;
    const double C15784 =
        (3 * (C81390 + C81668 * C81084) +
         C80952 *
             (2 * C80952 * C81668 +
              C80952 * (C81668 + C80830 *
                                     (C80903 * C80904 +
                                      C81182 * bs[7] * std::pow(C80836, 7)) *
                                     C80182 * C81084))) /
        C80184;
    const double C17368 =
        (C81390 + C81668 * C81084 + ae * (C80996 * C81651 + C81628 * be) +
         be * (C80996 * C81665 + C81628 * ae) +
         C80996 *
             (ae * C81651 + be * C81665 +
              C80996 * (C81668 + C80830 *
                                     (C80903 * C80904 +
                                      C81182 * bs[7] * std::pow(C80836, 7)) *
                                     C80182 * C81084))) /
        C80184;
    const double C18988 =
        (2 * (ae * C81521 + be * C81522 + C80996 * C81864) +
         ae * (C81521 + C80996 * C81868 + C81866 * be) +
         be * (C81522 + C80996 * C81869 + C81866 * ae) +
         C80996 * (C81864 + ae * C81868 + be * C81869 +
                   C80996 * (C81737 + C81753 + C80996 * C80952 * C81197))) /
        C80184;
    const double C81942 = C81936 + C81937;
    const double C630 = C82592 * C612;
    const double C2431 = C82592 * C1104;
    const double C11308 = C82864 * C1104;
    const double C59745 = C52324 * C1104;
    const double C9068 = C82679 * C1564;
    const double C26377 = C25721 * C1564;
    const double C52910 = C82679 * C1564;
    const double C2426 = C82592 * C2414;
    const double C21889 = C82864 * C2414;
    const double C55137 = C52324 * C2414;
    const double C16251 = C82592 * C3254;
    const double C24990 = C82864 * C3254;
    const double C70268 = C52324 * C3254;
    const double C22853 = C82679 * C4029;
    const double C29209 = C25721 * C4029;
    const double C56075 = C82679 * C4029;
    const double C18157 = C82896 * C5613;
    const double C29201 = C82896 * C5613;
    const double C65482 = C61595 * C5613;
    const double C16255 = C82592 * C15783;
    const double C16402 =
        (be * (3 * C81581 + C80952 * C81680) +
         C80996 * (3 * C81683 +
                   C80952 * (2 * C80952 * C81026 +
                             C80952 * (C81026 + std::pow(C80836, 7) * bs[7] *
                                                    C81002 * C81084)))) /
        C80184;
    const double C17632 =
        (2 * C80952 * C81014 + C80952 * C81683 + be * C80996 * C81680 +
         C80996 * (be * C81680 +
                   C80996 * (2 * C80952 * C81026 +
                             C80952 * (C81026 + std::pow(C80836, 7) * bs[7] *
                                                    C81002 * C81084)))) /
        C80184;
    const double C15829 = (4 * (2 * C81491 + C80952 * C81581) +
                           C80952 * (3 * C81581 + C80952 * C81680)) /
                          C80179;
    const double C16306 = (C80996 * (3 * C81581 + C80952 * C81680)) / C80179;
    const double C17445 =
        (2 * C81491 + C80952 * C81581 + C81680 * C81182) / C80179;
    const double C30838 = (4 * (2 * C81888 + C80996 * C81892) +
                           C80996 * (3 * C81892 + C80996 * C82038)) /
                          C80179;
    const double C16582 =
        (ae * (3 * C81593 + C80952 * C81694) +
         C80996 * (3 * C81748 +
                   C80952 * (2 * C80952 * C81150 +
                             C80952 * (C81150 + std::pow(C80836, 7) * bs[7] *
                                                    C81126 * C81084)))) /
        C80184;
    const double C17986 =
        (2 * C80952 * C81138 + C80952 * C81748 + ae * C80996 * C81694 +
         C80996 * (ae * C81694 +
                   C80996 * (2 * C80952 * C81150 +
                             C80952 * (C81150 + std::pow(C80836, 7) * bs[7] *
                                                    C81126 * C81084)))) /
        C80184;
    const double C20411 =
        (ae * C80996 * C81694 + be * C80996 * C81680 +
         C80830 * C80996 *
             (2 * C81203 +
              C80952 * (C80930 + (C80903 * C80904 +
                                  C80834 * bs[7] * std::pow(C80836, 7)) *
                                     C80182 * C81084))) /
        C80184;
    const double C15828 = (4 * (2 * C81506 + C80952 * C81593) +
                           C80952 * (3 * C81593 + C80952 * C81694)) /
                          C80179;
    const double C16305 = (C80996 * (3 * C81593 + C80952 * C81694)) / C80179;
    const double C17444 =
        (2 * C81506 + C80952 * C81593 + C81694 * C81182) / C80179;
    const double C30837 = (4 * (2 * C81912 + C80996 * C81916) +
                           C80996 * (3 * C81916 + C80996 * C82055)) /
                          C80179;
    const double C1519 =
        (ae * (3 * C80975 + C80830 * C80993) +
         C80996 * (3 * C81178 +
                   C80830 * (2 * C80830 * C81176 +
                             C80830 * (C81176 + std::pow(C80836, 7) * bs[7] *
                                                    C81167 * C80834)))) /
        C80184;
    const double C4768 =
        (2 * C81386 + C80830 * C81178 + ae * C80996 * C80993 +
         C80996 * (ae * C80993 +
                   C80996 * (2 * C80830 * C81176 +
                             C80830 * (C81176 + std::pow(C80836, 7) * bs[7] *
                                                    C81167 * C80834)))) /
        C80184;
    const double C174 = (4 * (2 * C80966 + C80830 * C80975) +
                         C80830 * (3 * C80975 + C80830 * C80993)) /
                        C80179;
    const double C1217 = (C80996 * (3 * C80975 + C80830 * C80993)) / C80179;
    const double C4201 =
        (2 * C80966 + C80830 * C80975 + C80993 * C81182) / C80179;
    const double C30896 = (4 * (2 * C81924 + C80996 * C81928) +
                           C80996 * (3 * C81928 + C80996 * C82066)) /
                          C80179;
    const double C960 =
        (ae * (3 * C81019 + C80830 * C81037) +
         C80952 * (3 * C81118 +
                   C80830 * (2 * C80830 * C81116 +
                             C80830 * (C81116 + std::pow(C80836, 7) * bs[7] *
                                                    C81107 * C80834)))) /
        C80184;
    const double C2158 =
        (2 * C80830 * C81113 + C80830 * C81118 + ae * C80952 * C81037 +
         C80952 * (ae * C81037 +
                   C80952 * (2 * C80830 * C81116 +
                             C80830 * (C81116 + std::pow(C80836, 7) * bs[7] *
                                                    C81107 * C80834)))) /
        C80184;
    const double C245 = (4 * (2 * C81010 + C80830 * C81019) +
                         C80830 * (3 * C81019 + C80830 * C81037)) /
                        C80179;
    const double C809 = (C80952 * (3 * C81019 + C80830 * C81037)) / C80179;
    const double C1855 =
        (2 * C81010 + C80830 * C81019 + C81037 * C81084) / C80179;
    const double C15949 = (4 * (2 * C81521 + C80952 * C81644) +
                           C80952 * (3 * C81644 + C80952 * C81745)) /
                          C80179;
    const double C1420 =
        (be * (3 * C81062 + C80830 * C81080) +
         C80996 * (3 * C81118 +
                   C80830 * (2 * C80830 * C81116 +
                             C80830 * (C81116 + std::pow(C80836, 7) * bs[7] *
                                                    C81107 * C80834)))) /
        C80184;
    const double C4596 =
        (2 * C81379 + C80830 * C81118 + be * C80996 * C81080 +
         C80996 * (be * C81080 +
                   C80996 * (2 * C80830 * C81116 +
                             C80830 * (C81116 + std::pow(C80836, 7) * bs[7] *
                                                    C81107 * C80834)))) /
        C80184;
    const double C8133 =
        (ae * C80996 * C80993 + be * C80996 * C81080 +
         C80952 * C80996 *
             (2 * C80830 * C81099 +
              C80830 * (C81099 + (C80903 * C80904 +
                                  C81084 * bs[7] * std::pow(C80836, 7)) *
                                     C80182 * C80834))) /
        C80184;
    const double C315 = (4 * (2 * C81053 + C80830 * C81062) +
                         C80830 * (3 * C81062 + C80830 * C81080)) /
                        C80179;
    const double C1321 = (C80996 * (3 * C81062 + C80830 * C81080)) / C80179;
    const double C4408 =
        (2 * C81053 + C80830 * C81062 + C81080 * C81182) / C80179;
    const double C30992 = (4 * (2 * C81904 + C80996 * C81906) +
                           C80996 * (3 * C81906 + C80996 * C82044)) /
                          C80179;
    const double C1059 =
        (be * (3 * C81143 + C80830 * C81161) +
         C80952 * (3 * C81178 +
                   C80830 * (2 * C80830 * C81176 +
                             C80830 * (C81176 + std::pow(C80836, 7) * bs[7] *
                                                    C81167 * C80834)))) /
        C80184;
    const double C2326 =
        (2 * C80830 * C81173 + C80830 * C81178 + be * C80952 * C81161 +
         C80952 * (be * C81161 +
                   C80952 * (2 * C80830 * C81176 +
                             C80830 * (C81176 + std::pow(C80836, 7) * bs[7] *
                                                    C81167 * C80834)))) /
        C80184;
    const double C8402 =
        (ae * C80952 * C81037 + be * C80952 * C81161 +
         C80996 * C80952 *
             (2 * C80830 * C81197 +
              C80830 * (C81197 + (C80903 * C80904 +
                                  C81182 * bs[7] * std::pow(C80836, 7)) *
                                     C80182 * C80834))) /
        C80184;
    const double C502 = (4 * (2 * C81134 + C80830 * C81143) +
                         C80830 * (3 * C81143 + C80830 * C81161)) /
                        C80179;
    const double C1007 = (C80952 * (3 * C81143 + C80830 * C81161)) / C80179;
    const double C2244 =
        (2 * C81134 + C80830 * C81143 + C81161 * C81084) / C80179;
    const double C16151 = (4 * (2 * C81522 + C80952 * C81658) +
                           C80952 * (3 * C81658 + C80952 * C81761)) /
                          C80179;
    const double C196 = C82581 * C179;
    const double C6601 = C82639 * C760;
    const double C13363 = C13257 * C760;
    const double C37980 = C82639 * C760;
    const double C4213 = C82581 * C1220;
    const double C10547 = C82863 * C1220;
    const double C46959 = C37887 * C1220;
    const double C1765 = C82893 * C1751;
    const double C13353 = C82893 * C1751;
    const double C44754 = C44659 * C1751;
    const double C10541 = C82639 * C3449;
    const double C21157 = C13257 * C3449;
    const double C41890 = C82639 * C3449;
    const double C4217 = C82581 * C4203;
    const double C31445 = C82863 * C4203;
    const double C41896 = C37887 * C4203;
    const double C80992 = C80985 + C80990;
    const double C81585 = C80899 + C81583;
    const double C34188 = C82581 * C5820;
    const double C81679 = C81671 + C81677;
    const double C37336 = C82639 * C18359;
    const double C72307 = C82639 * C18359;
    const double C2838 = C82885 * C864;
    const double C14296 = C82885 * C864;
    const double C45697 = C44656 * C864;
    const double C6001 = C82885 * C1324;
    const double C27414 = C82885 * C1324;
    const double C49011 = C44656 * C1324;
    const double C2848 = C1642 * C1955;
    const double C19991 = C82533 * C1955;
    const double C40742 = C82533 * C1955;
    const double C11754 = C1642 * C3620;
    const double C22334 = C82533 * C3620;
    const double C43087 = C82533 * C3620;
    const double C6011 = C1642 * C4410;
    const double C33530 = C82533 * C4410;
    const double C44045 = C82533 * C4410;
    const double C16018 = C82523 * C15556;
    const double C81079 = C81072 + C81077;
    const double C81597 = C80898 + C81595;
    const double C30172 =
        (3 * (C81061 + C81075 * C81182) +
         C80996 *
             (2 * C81874 +
              C80996 * (C81075 + (be * C81071 + C80830 * std::pow(C80836, 7) *
                                                    bs[7] * C81045) *
                                     C81182))) /
        C80184;
    const double C22342 = C82533 * C3623;
    const double C50842 = C82533 * C3623;
    const double C32604 = C82533 * C5224;
    const double C43095 = C82533 * C5224;
    const double C35599 = C82533 * C5988;
    const double C58506 = C82533 * C5988;
    const double C81693 = C81685 + C81691;
    const double C16448 =
        (3 * (C81772 + ae * C80996 * C81201 + C80952 * C81776) +
         ae * C80996 * C81694 +
         C80952 * (2 * C81776 + ae * C80996 * C81690 +
                   C80952 * (C81774 + ae * C80996 * C80952 * C80919 +
                             C80952 * (ae * C80996 * C80919 +
                                       C80952 * C80996 * std::pow(C80836, 7) *
                                           bs[7] * C81045)))) /
        C80184;
    const double C36828 = C82523 * C18539;
    const double C31001 = C82523 * C30171;
    const double C267 = C82592 * C250;
    const double C1867 = C82592 * C812;
    const double C10661 = C82864 * C812;
    const double C59146 = C52324 * C812;
    const double C8624 = C82679 * C1272;
    const double C25895 = C25721 * C1272;
    const double C52475 = C82679 * C1272;
    const double C1871 = C82592 * C1857;
    const double C21263 = C82864 * C1857;
    const double C54499 = C52324 * C1857;
    const double C10655 = C82679 * C3534;
    const double C31555 = C25721 * C3534;
    const double C54493 = C82679 * C3534;
    const double C4318 = C82896 * C4304;
    const double C25885 = C82896 * C4304;
    const double C61758 = C61595 * C4304;
    const double C81036 = C81029 + C81034;
    const double C81897 = C80899 + C81895;
    const double C33422 =
        (2 * (be * C81493 + C80996 * C82105) + be * (C81493 + C82106 * C81182) +
         C80996 * (C82105 + be * C80996 * C82106 +
                   C80996 * (be * C82106 +
                             C80996 * C80952 *
                                 (ae * C81028 + C80830 * std::pow(C80836, 7) *
                                                    bs[7] * C81002)))) /
        C80184;
    const double C19220 = C82592 * C2737;
    const double C21265 = C82679 * C3537;
    const double C54501 = C82679 * C3537;
    const double C24579 = C82679 * C16401;
    const double C69863 = C82679 * C16401;
    const double C17656 = C82896 * C16907;
    const double C28732 = C82896 * C16907;
    const double C78985 = C61595 * C16907;
    const double C30533 =
        (3 * (C81844 + be * C81974 + C80996 * C81979) +
         be * (2 * C81974 + C80996 * C81980) +
         C80996 * (2 * C81979 + be * C81980 +
                   C80996 * (C81975 + be * C80996 * C81976 +
                             C80996 * (be * C81976 + C80996 * C80952 *
                                                         std::pow(C80836, 7) *
                                                         bs[7] * C81002)))) /
        C80184;
    const double C82037 = C82029 + C82035;
    const double C16108 = C82592 * C15649;
    const double C24785 = C82679 * C16535;
    const double C70065 = C82679 * C16535;
    const double C6923 = C82592 * C959;
    const double C8849 = C82679 * C1419;
    const double C52693 = C82679 * C1419;
    const double C2166 = C82592 * C2157;
    const double C10993 = C82679 * C3783;
    const double C59446 = C82679 * C3783;
    const double C4608 = C82896 * C4595;
    const double C26131 = C82896 * C4595;
    const double C62004 = C61595 * C4595;
    const double C15650 =
        (3 * (C81379 + ae * C81518 + C80952 * C81650) +
         ae * (2 * C81518 + C80952 * C81651) +
         C80952 * (2 * C81650 + ae * C81651 +
                   C80952 * (C81646 + ae * C80952 * C81647 +
                             C80952 * (ae * C81647 + C80952 * C80830 *
                                                         std::pow(C80836, 7) *
                                                         bs[7] * C81107)))) /
        C80184;
    const double C20749 =
        (2 * (ae * C81557 + C80952 * C81879) +
         ae * (C80996 * C81651 + C81628 * be) +
         C80952 * (C81879 + ae * (C80996 * C80952 * C81647 + C81627) +
                   C80952 * (ae * (C80996 * C81647 + C80920) +
                             C80952 * (be * C81624 + C80996 * C80830 *
                                                         std::pow(C80836, 7) *
                                                         bs[7] * C81107)))) /
        C80184;
    const double C30260 =
        (3 * (C81379 + be * C81908 + C80996 * C81879) +
         be * (2 * C81908 + C80996 * C81910) +
         C80996 * (2 * C81879 + be * C81910 +
                   C80996 * (C81646 + be * C80996 * C81624 +
                             C80996 * (be * C81624 + C80996 * C80830 *
                                                         std::pow(C80836, 7) *
                                                         bs[7] * C81107)))) /
        C80184;
    const double C81744 = C81741 + C81742;
    const double C81798 = C81796 + C81797;
    const double C81835 = C81833 + C81834;
    const double C17910 = C82896 * C17137;
    const double C28966 = C82896 * C17137;
    const double C79213 = C61595 * C17137;
    const double C3094 = C82885 * C1010;
    const double C14536 = C82885 * C1010;
    const double C45937 = C44656 * C1010;
    const double C6273 = C82885 * C1470;
    const double C27660 = C82885 * C1470;
    const double C49311 = C44656 * C1470;
    const double C3098 = C1642 * C2246;
    const double C20205 = C82533 * C2246;
    const double C40956 = C82533 * C2246;
    const double C12058 = C1642 * C3866;
    const double C22644 = C82533 * C3866;
    const double C43393 = C82533 * C3866;
    const double C6277 = C1642 * C4688;
    const double C33846 = C82533 * C4688;
    const double C44375 = C82533 * C4688;
    const double C31153 = C82523 * C30305;
    const double C81160 = C81153 + C81158;
    const double C81921 = C80898 + C81919;
    const double C33842 =
        (2 * (ae * C81508 + C80996 * C82111) + ae * (C81508 + C82112 * C81182) +
         C80996 * (C82111 + ae * C80996 * C82112 +
                   C80996 * (ae * C82112 +
                             C80996 * C80952 *
                                 (be * C81152 + C80830 * std::pow(C80836, 7) *
                                                    bs[7] * C81126)))) /
        C80184;
    const double C20209 = C82533 * C3087;
    const double C40960 = C82533 * C3087;
    const double C22648 = C82533 * C3869;
    const double C51140 = C82533 * C3869;
    const double C24853 = C82523 * C16581;
    const double C17994 = C82523 * C17215;
    const double C30707 =
        (3 * (C81853 + ae * C81989 + C80996 * C81994) +
         ae * (2 * C81989 + C80996 * C81995) +
         C80996 * (2 * C81994 + ae * C81995 +
                   C80996 * (C81990 + ae * C80996 * C81991 +
                             C80996 * (ae * C81991 + C80996 * C80952 *
                                                         std::pow(C80836, 7) *
                                                         bs[7] * C81126)))) /
        C80184;
    const double C82054 = C82046 + C82052;
    const double C31200 = C82581 * C30349;
    const double C7067 = C82639 * C1058;
    const double C38440 = C82639 * C1058;
    const double C8983 = C82581 * C1518;
    const double C2338 = C82893 * C2325;
    const double C13866 = C82893 * C2325;
    const double C45267 = C44659 * C2325;
    const double C11197 = C82639 * C3949;
    const double C47567 = C82639 * C3949;
    const double C4776 = C82581 * C4767;
    const double C15740 =
        (3 * (C81386 + be * C81519 + C80952 * C81664) +
         be * (2 * C81519 + C80952 * C81665) +
         C80952 * (2 * C81664 + be * C81665 +
                   C80952 * (C81660 + be * C80952 * C81661 +
                             C80952 * (be * C81661 + C80952 * C80830 *
                                                         std::pow(C80836, 7) *
                                                         bs[7] * C81167)))) /
        C80184;
    const double C33945 =
        (2 * (ae * C81369 + C80996 * C81664) + ae * (C81369 + C81632 * C81182) +
         C80996 * (C81664 + ae * C80996 * C81632 +
                   C80996 * (ae * C81632 +
                             C80996 * (be * C81661 + C80952 * C80830 *
                                                         std::pow(C80836, 7) *
                                                         bs[7] * C81167)))) /
        C80184;
    const double C30350 =
        (3 * (C81386 + ae * C81930 + C80996 * C81933) +
         ae * (2 * C81930 + C80996 * C81934) +
         C80996 * (2 * C81933 + ae * C81934 +
                   C80996 * (C81660 + ae * C80996 * C81621 +
                             C80996 * (ae * C81621 + C80996 * C80830 *
                                                         std::pow(C80836, 7) *
                                                         bs[7] * C81167)))) /
        C80184;
    const double C81760 = C81757 + C81758;
    const double C82000 = C81696 + C81998;
    const double C82065 = C82057 + C82063;
    const double C80225 = C80223 / C80179;
    const double C80263 = C80260 / C80179;
    const double C80213 = C80209 + C82533;
    const double C80280 = C80277 - C80279;
    const double C13263 = C80277 + (0 * ae) / C80179;
    const double C80212 = C82523 - C80208;
    const double C45438 = C82528 * C1665;
    const double C45426 = C82528 * C710;
    const double C45705 = C82528 * C1954;
    const double C45699 = C82528 * C1657;
    const double C45693 = C82528 * C862;
    const double C45687 = C82528 * C704;
    const double C45939 = C82528 * C2245;
    const double C45933 = C82528 * C1008;
    const double C47768 = C82528 * C3366;
    const double C48086 = C82528 * C3619;
    const double C48080 = C82528 * C3359;
    const double C48386 = C82528 * C3865;
    const double C48689 = C82528 * C1170;
    const double C49007 = C82528 * C1322;
    const double C49001 = C82528 * C1164;
    const double C49307 = C82528 * C1468;
    const double C63016 = C82528 * C4120;
    const double C63262 = C82528 * C4409;
    const double C63256 = C82528 * C4112;
    const double C63496 = C82528 * C4687;
    const double C82843 = C82528 * C82518;
    const double C82884 = C82848 + C82528;
    const double C14041 = C82909 * C1666;
    const double C14029 = C82909 * C709;
    const double C14306 = C82909 * C1955;
    const double C14300 = C82909 * C1659;
    const double C14294 = C82909 * C863;
    const double C14288 = C82909 * C702;
    const double C14540 = C82909 * C2246;
    const double C14534 = C82909 * C1009;
    const double C27159 = C82909 * C4121;
    const double C27147 = C82909 * C1169;
    const double C27424 = C82909 * C4410;
    const double C27418 = C82909 * C4114;
    const double C27412 = C82909 * C1323;
    const double C27406 = C82909 * C1162;
    const double C27664 = C82909 * C4688;
    const double C27658 = C82909 * C1469;
    const double C67677 = C82909 * C3620;
    const double C67671 = C82909 * C3357;
    const double C67977 = C82909 * C3866;
    const double C45442 = C82536 * C1666;
    const double C45430 = C82536 * C709;
    const double C45707 = C82536 * C1955;
    const double C45701 = C82536 * C1659;
    const double C45695 = C82536 * C863;
    const double C45689 = C82536 * C702;
    const double C45941 = C82536 * C2246;
    const double C45935 = C82536 * C1009;
    const double C48088 = C82536 * C3620;
    const double C48082 = C82536 * C3357;
    const double C48388 = C82536 * C3866;
    const double C48693 = C82536 * C1169;
    const double C49009 = C82536 * C1323;
    const double C49003 = C82536 * C1162;
    const double C49309 = C82536 * C1469;
    const double C63020 = C82536 * C4121;
    const double C63264 = C82536 * C4410;
    const double C63258 = C82536 * C4114;
    const double C63498 = C82536 * C4688;
    const double C82851 = C82536 / C80185;
    const double C82847 = C82536 * C82518;
    const double C6504 = C82926 - (C82528 * C82519) / C80179;
    const double C80342 = C82581 - C80341;
    const double C80471 = C80467 + C82639;
    const double C80495 = C80492 - C80494;
    const double C396 = C392 + C375;
    const double C6108 = C6106 + C6095;
    const double C44762 = C82635 * C177;
    const double C44756 = C82635 * C171;
    const double C44750 = C82635 * C176;
    const double C44744 = C82635 * C170;
    const double C45008 = C82635 * C367;
    const double C44996 = C82635 * C366;
    const double C45263 = C82635 * C553;
    const double C45257 = C82635 * C552;
    const double C49711 = C82635 * C1219;
    const double C49705 = C82635 * C1214;
    const double C50014 = C82635 * C1372;
    const double C50326 = C82635 * C1516;
    const double C51540 = C82635 * C1218;
    const double C51534 = C82635 * C1213;
    const double C51843 = C82635 * C1373;
    const double C52155 = C82635 * C1515;
    const double C79612 = C82635 * C4202;
    const double C79606 = C82635 * C4198;
    const double C79843 = C82635 * C4487;
    const double C80083 = C82635 * C4765;
    const double C82866 = C82635 * C82629;
    const double C82900 = C82868 + C82635;
    const double C1775 = C82916 * C760;
    const double C1769 = C82916 * C755;
    const double C1763 = C82916 * C759;
    const double C1757 = C82916 * C754;
    const double C2059 = C82916 * C911;
    const double C2047 = C82916 * C912;
    const double C2336 = C82916 * C1057;
    const double C2330 = C82916 * C1056;
    const double C29400 = C82916 * C5063;
    const double C29394 = C82916 * C5060;
    const double C29388 = C82916 * C3447;
    const double C29382 = C82916 * C3441;
    const double C29645 = C82916 * C5302;
    const double C29633 = C82916 * C3704;
    const double C29898 = C82916 * C5534;
    const double C29892 = C82916 * C3945;
    const double C54385 = C82916 * C3449;
    const double C54379 = C82916 * C3443;
    const double C55024 = C82916 * C3947;
    const double C44764 = C82642 * C760;
    const double C44758 = C82642 * C755;
    const double C44752 = C82642 * C759;
    const double C44746 = C82642 * C754;
    const double C45012 = C82642 * C911;
    const double C45000 = C82642 * C912;
    const double C45265 = C82642 * C1057;
    const double C45259 = C82642 * C1056;
    const double C49713 = C82642 * C3449;
    const double C49707 = C82642 * C3443;
    const double C50328 = C82642 * C3947;
    const double C51542 = C82642 * C3447;
    const double C51536 = C82642 * C3441;
    const double C51847 = C82642 * C3704;
    const double C52157 = C82642 * C3945;
    const double C79614 = C82642 * C5063;
    const double C79608 = C82642 * C5060;
    const double C79847 = C82642 * C5302;
    const double C80085 = C82642 * C5534;
    const double C82870 = C82642 / C80185;
    const double C82867 = C82642 * C82629;
    const double C19057 = C82933 - (C82635 * C82631) / C80179;
    const double C80368 = C82592 - C80367;
    const double C80621 = C80617 + C82679;
    const double C80645 = C80642 - C80644;
    const double C639 = C635 + C618;
    const double C3268 = C3266 + C3259;
    const double C61766 = C82675 * C248;
    const double C61760 = C82675 * C242;
    const double C61754 = C82675 * C247;
    const double C61748 = C82675 * C241;
    const double C62000 = C82675 * C443;
    const double C61994 = C82675 * C442;
    const double C62246 = C82675 * C610;
    const double C62234 = C82675 * C609;
    const double C63950 = C82675 * C811;
    const double C63944 = C82675 * C806;
    const double C64250 = C82675 * C957;
    const double C64553 = C82675 * C1105;
    const double C64871 = C82675 * C810;
    const double C64865 = C82675 * C805;
    const double C65171 = C82675 * C956;
    const double C65474 = C82675 * C1106;
    const double C78981 = C82675 * C1856;
    const double C78975 = C82675 * C1852;
    const double C79209 = C82675 * C2155;
    const double C79440 = C82675 * C2413;
    const double C82873 = C82675 * C82669;
    const double C82905 = C82875 + C82675;
    const double C4328 = C82918 * C1272;
    const double C4322 = C82918 * C1267;
    const double C4316 = C82918 * C1271;
    const double C4310 = C82918 * C1266;
    const double C4606 = C82918 * C1418;
    const double C4600 = C82918 * C1417;
    const double C4878 = C82918 * C1564;
    const double C4866 = C82918 * C1565;
    const double C17654 = C82918 * C3536;
    const double C17648 = C82918 * C3530;
    const double C17642 = C82918 * C3533;
    const double C17636 = C82918 * C3527;
    const double C17908 = C82918 * C3780;
    const double C17902 = C82918 * C3779;
    const double C18165 = C82918 * C4029;
    const double C18153 = C82918 * C4030;
    const double C42006 = C82918 * C3534;
    const double C42000 = C82918 * C3528;
    const double C42334 = C82918 * C3781;
    const double C61768 = C82682 * C1272;
    const double C61762 = C82682 * C1267;
    const double C61756 = C82682 * C1271;
    const double C61750 = C82682 * C1266;
    const double C62002 = C82682 * C1418;
    const double C61996 = C82682 * C1417;
    const double C62250 = C82682 * C1564;
    const double C62238 = C82682 * C1565;
    const double C63952 = C82682 * C3534;
    const double C63946 = C82682 * C3528;
    const double C64252 = C82682 * C3781;
    const double C64873 = C82682 * C3533;
    const double C64867 = C82682 * C3527;
    const double C65173 = C82682 * C3779;
    const double C65478 = C82682 * C4030;
    const double C78983 = C82682 * C3536;
    const double C78977 = C82682 * C3530;
    const double C79211 = C82682 * C3780;
    const double C79444 = C82682 * C4029;
    const double C82877 = C82682 / C80185;
    const double C82874 = C82682 * C82669;
    const double C34115 = C82935 - (C82675 * C82671) / C80179;
    const double C80488 = C80486 / C80179;
    const double C80533 = C80530 / C80179;
    const double C80638 = C80636 / C80179;
    const double C80683 = C80680 / C80179;
    const double C2441 = C2437 - C2425;
    const double C4514 = C4510 - C4502;
    const double C397 = C393 + C379;
    const double C398 = C394 + C383;
    const double C4516 = C4512 + C4495;
    const double C6109 = C6107 + C6101;
    const double C640 = C636 + C622;
    const double C641 = C637 + C626;
    const double C2444 = C2440 + C2422;
    const double C3269 = C3267 + C3263;
    const double C80896 = C80894 + C80882;
    const double C19150 = C82871 * C2657;
    const double C39914 = C82871 * C2657;
    const double C21159 = C82893 * C3450;
    const double C49715 = C44659 * C3450;
    const double C54387 = C82893 * C3450;
    const double C31447 = C82639 * C5064;
    const double C41898 = C82639 * C5064;
    const double C34274 = C82878 * C5908;
    const double C57190 = C82878 * C5908;
    const double C31557 = C82896 * C5144;
    const double C42008 = C82896 * C5144;
    const double C63954 = C61595 * C5144;
    const double C31448 = C6585 * C4980;
    const double C31558 = C25873 * C4980;
    const double C32296 = C80205 * C4980;
    const double C41899 = C37964 * C4980;
    const double C42009 = C4298 * C4980;
    const double C42773 = C39827 * C4980;
    const double C80895 = C80893 + C80879;
    const double C80917 = C80908 + C80899;
    const double C19999 = C82533 * C2825;
    const double C40750 = C82533 * C2825;
    const double C35807 = C82533 * C6266;
    const double C58714 = C82533 * C6266;
    const double C32902 = C82533 * C5458;
    const double C43397 = C82533 * C5458;
    const double C32294 = C80205 * C4979;
    const double C32600 = C82533 * C4979;
    const double C42771 = C39827 * C4979;
    const double C43091 = C82533 * C4979;
    const double C2549 = C82885 * C708;
    const double C14033 = C82885 * C708;
    const double C45434 = C44656 * C708;
    const double C11430 = C1642 * C3365;
    const double C22005 = C82533 * C3365;
    const double C42766 = C82533 * C3365;
    const double C47772 = C82536 * C3365;
    const double C67361 = C82909 * C3365;
    const double C17456 = C82523 * C4985;
    const double C32293 = C82844 * C4985;
    const double C42770 = C39819 * C4985;
    const double C5712 = C82885 * C1168;
    const double C27151 = C82885 * C1168;
    const double C48697 = C44656 * C1168;
    const double C80942 = C80939 + C80923;
    const double C16908 =
        (C81018 + C81032 * C81084 + be * C80996 * C81586 +
         C80996 *
             (be * C81586 +
              C80996 * (C81032 + (ae * C81028 + C80830 * std::pow(C80836, 7) *
                                                    bs[7] * C81002) *
                                     C81084))) /
        C80184;
    const double C20547 =
        (be * (2 * C81493 + C80952 * C81586) +
         C80996 *
             (2 * C80952 * C81032 +
              C80952 * (C81032 + (ae * C81028 + C80830 * std::pow(C80836, 7) *
                                                    bs[7] * C81002) *
                                     C81084))) /
        C80184;
    const double C15412 = (3 * (C80862 + C80888 * C81084) +
                           C80952 * (2 * C81493 + C80952 * C81586)) /
                          C80179;
    const double C16750 = (C80862 + C80888 * C81084 + C81586 * C81182) / C80179;
    const double C20410 = (C80996 * (2 * C81493 + C80952 * C81586)) / C80179;
    const double C30027 = (3 * (C80862 + C80888 * C81182) +
                           C80996 * (2 * C81894 + C80996 * C81898)) /
                          C80179;
    const double C81726 = C81724 + C81713;
    const double C82095 = C82093 + C82087;
    const double C2823 = (2 * (C80952 * C81062 + C80880 * ae) +
                          C80952 * (C81062 + C80952 * C81363 + C81360 * ae) +
                          (C80880 + C80921 * C81084) * ae) /
                         C80179;
    const double C3618 =
        (C80996 * (C81062 + C80952 * C81363 + C81360 * ae)) / C80179;
    const double C5222 =
        (C80952 * C81062 + C80880 * ae + C81363 * C81182) / C80179;
    const double C6264 = (2 * (C80996 * C81143 + C80880 * ae) +
                          C80996 * (C81143 + C80996 * C81552 + C81549 * ae) +
                          (C80880 + C80921 * C81182) * ae) /
                         C80179;
    const double C8200 =
        (ae * (C80996 * C81037 + C80932 * be) +
         C80952 * (be * C81080 +
                   C80996 * (2 * C80830 * C81116 +
                             C80830 * (C81116 + std::pow(C80836, 7) * bs[7] *
                                                    C81107 * C80834)))) /
        C80184;
    const double C8335 =
        (ae * (C80952 * C80993 + C80932 * be) +
         C80996 * (be * C81161 +
                   C80952 * (2 * C80830 * C81176 +
                             C80830 * (C81176 + std::pow(C80836, 7) * bs[7] *
                                                    C81167 * C80834)))) /
        C80184;
    const double C757 = (C80952 * (3 * C80975 + C80830 * C80993) +
                         (3 * C80880 + C80830 * C80932) * be) /
                        C80179;
    const double C861 = (C80952 * (3 * C81062 + C80830 * C81080) +
                         (3 * C80880 + C80830 * C80932) * ae) /
                        C80179;
    const double C1269 = (C80996 * (3 * C81019 + C80830 * C81037) +
                          (3 * C80880 + C80830 * C80932) * be) /
                         C80179;
    const double C1467 = (C80996 * (3 * C81143 + C80830 * C81161) +
                          (3 * C80880 + C80830 * C80932) * ae) /
                         C80179;
    const double C1749 =
        (2 * C80966 + C80830 * C80975 +
         C80952 * (C80952 * C80993 + C80932 * be) + C80952 * C80932 * be) /
        C80179;
    const double C1953 =
        (2 * C81053 + C80830 * C81062 +
         C80952 * (C80952 * C81080 + C80932 * ae) + C80952 * C80932 * ae) /
        C80179;
    const double C4302 =
        (2 * C81010 + C80830 * C81019 +
         C80996 * (C80996 * C81037 + C80932 * be) + C80996 * C80932 * be) /
        C80179;
    const double C4686 =
        (2 * C81134 + C80830 * C81143 +
         C80996 * (C80996 * C81161 + C80932 * ae) + C80996 * C80932 * ae) /
        C80179;
    const double C7929 = (C80996 * (C80952 * C80993 + C80932 * be)) / C80179;
    const double C7997 =
        (C80996 * C80952 * C81037 + C80952 * C80932 * be) / C80179;
    const double C8065 = (C80996 * (C80952 * C81080 + C80932 * ae)) / C80179;
    const double C8267 =
        (C80996 * C80952 * C81161 + C80952 * C80932 * ae) / C80179;
    const double C107 = 4 * (2 * C80851 + C80830 * C80880) +
                        C80830 * (3 * C80880 + C80830 * C80932);
    const double C691 = C80952 * (3 * C80880 + C80830 * C80932);
    const double C1151 = C80996 * (3 * C80880 + C80830 * C80932);
    const double C1656 = 2 * C80851 + C80830 * C80880 + C80932 * C81084;
    const double C4111 = 2 * C80851 + C80830 * C80880 + C80932 * C81182;
    const double C7859 = C80996 * C80952 * C80932;
    const double C3950 =
        (ae * (C80975 + C80952 * C81362 + C81360 * be) +
         C80996 * (C81178 + be * C80952 * C81157 +
                   C80952 * (be * C81157 +
                             C80952 * (C81176 + std::pow(C80836, 7) * bs[7] *
                                                    C81167 * C80834)))) /
        C80184;
    const double C5536 =
        (be * C81143 + C80952 * C81178 + ae * C80996 * C81362 +
         C80996 * (ae * C81362 +
                   C80996 * (be * C81157 +
                             C80952 * (C81176 + std::pow(C80836, 7) * bs[7] *
                                                    C81167 * C80834)))) /
        C80184;
    const double C2655 = (2 * (C80952 * C80975 + C80880 * be) +
                          C80952 * (C80975 + C80952 * C81362 + C81360 * be) +
                          (C80880 + C80921 * C81084) * be) /
                         C80179;
    const double C3446 =
        (C80996 * (C80975 + C80952 * C81362 + C81360 * be)) / C80179;
    const double C5062 =
        (C80952 * C80975 + C80880 * be + C81362 * C81182) / C80179;
    const double C5906 = (2 * (C80996 * C81019 + C80880 * be) +
                          C80996 * (C81019 + C80996 * C81551 + C81549 * be) +
                          (C80880 + C80921 * C81182) * be) /
                         C80179;
    const double C81637 = C81064 + C81635;
    const double C81968 = C81145 + C81966;
    const double C81636 = C80977 + C81634;
    const double C81967 = C81021 + C81965;
    const double C33841 = (2 * (C80996 * C81519 + C81367 * ae) +
                           C80996 * (C81519 + C80996 * C82122 + C82117 * ae) +
                           (C81367 + C81622 * C81182) * ae) /
                          C80179;
    const double C33421 = (2 * (C80996 * C81518 + C81367 * be) +
                           C80996 * (C81518 + C80996 * C82121 + C82117 * be) +
                           (C81367 + C81622 * C81182) * be) /
                          C80179;
    const double C80941 = C80938 + C80920;
    const double C17216 =
        (C81142 + C81156 * C81084 + ae * C80996 * C81598 +
         C80996 *
             (ae * C81598 +
              C80996 * (C81156 + (be * C81152 + C80830 * std::pow(C80836, 7) *
                                                    bs[7] * C81126) *
                                     C81084))) /
        C80184;
    const double C20615 =
        (2 * (ae * C80996 * C80887 + C80952 * C81874) + ae * C80996 * C81598 +
         C80952 * (C81874 + ae * C80996 * C80952 * C80931 +
                   C80952 * (ae * C80996 * C80931 +
                             C80952 * C80996 *
                                 (be * C81071 + C80830 * std::pow(C80836, 7) *
                                                    bs[7] * C81045)))) /
        C80184;
    const double C20817 =
        (ae * (2 * C81508 + C80952 * C81598) +
         C80996 *
             (2 * C80952 * C81156 +
              C80952 * (C81156 + (be * C81152 + C80830 * std::pow(C80836, 7) *
                                                    bs[7] * C81126) *
                                     C81084))) /
        C80184;
    const double C15411 = (3 * (C80861 + C80887 * C81084) +
                           C80952 * (2 * C81508 + C80952 * C81598)) /
                          C80179;
    const double C16749 = (C80861 + C80887 * C81084 + C81598 * C81182) / C80179;
    const double C20409 = (C80996 * (2 * C81508 + C80952 * C81598)) / C80179;
    const double C33522 =
        (ae * (2 * C81918 + C80996 * C81922) +
         C80952 *
             (2 * C81874 +
              C80996 * (C81075 + (be * C81071 + C80830 * std::pow(C80836, 7) *
                                                    bs[7] * C81045) *
                                     C81182))) /
        C80184;
    const double C30026 = (3 * (C80861 + C80887 * C81182) +
                           C80996 * (2 * C81918 + C80996 * C81922)) /
                          C80179;
    const double C81725 = C81722 + C81710;
    const double C30488 = (3 * (C81375 + C81607 * C81182) +
                           C80996 * (2 * C81997 + C80996 * C82001)) /
                          C80179;
    const double C82094 = C82092 + C82084;
    const double C80940 = C80830 * C80937;
    const double C81208 = C81207 + C81206;
    const double C30445 =
        (3 * (C81210 + C81203 * C81182) +
         C80996 *
             (2 * C81566 +
              C80996 * (C81203 + C80952 *
                                     (C80903 * C80904 +
                                      C80834 * bs[7] * std::pow(C80836, 7)) *
                                     C80182 * C81182))) /
        C80184;
    const double C33200 =
        (ae * (2 * C81989 + C80996 * C81995) +
         be * (2 * C81974 + C80996 * C81980) +
         C80830 *
             (2 * C81566 +
              C80996 * (C81203 + C80952 *
                                     (C80903 * C80904 +
                                      C80834 * bs[7] * std::pow(C80836, 7)) *
                                     C80182 * C81182))) /
        C80184;
    const double C11434 = C82885 * C3364;
    const double C47776 = C44656 * C3364;
    const double C67365 = C82885 * C3364;
    const double C32297 = C82533 * C4984;
    const double C42774 = C82533 * C4984;
    const double C36607 = C82523 * C18268;
    const double C81262 = C81261 + C81260;
    const double C2534 =
        (2 * C81210 + C80952 * C81313 +
         ae * (2 * C80952 * C80887 + C80952 * (C80887 + C80931 * C81084)) +
         be * (2 * C80952 * C80888 + C80952 * (C80888 + C80933 * C81084)) +
         C80830 * (ae * (2 * C81201 + C80952 * (C80878 + C80919 * C81084)) +
                   be * (2 * C81202 + C80952 * (C80881 + C80922 * C81084)) +
                   C80830 * (2 * C81203 +
                             C80952 * (C80930 +
                                       (C80903 * C80904 +
                                        C80834 * bs[7] * std::pow(C80836, 7)) *
                                           C80182 * C81084)))) /
        C80184;
    const double C2535 =
        (ae * (2 * C80952 * C80855 + C80952 * (C80855 + C80878 * C81084)) +
         be * (2 * C80952 * C80856 + C80952 * (C80856 + C80881 * C81084)) +
         C80830 * (2 * C81210 + C80952 * C81313)) /
        C80184;
    const double C3361 =
        (C80996 * C81313 + ae * C80996 * (C80887 + C80931 * C81084) +
         be * C80996 * (C80888 + C80933 * C81084) +
         C80830 * (ae * C80996 * (C80878 + C80919 * C81084) +
                   be * C80996 * (C80881 + C80922 * C81084) +
                   C80830 * C80996 *
                       (C80930 + (C80903 * C80904 +
                                  C80834 * bs[7] * std::pow(C80836, 7)) *
                                     C80182 * C81084))) /
        C80184;
    const double C3362 =
        (ae * C80996 * (C80855 + C80878 * C81084) +
         be * C80996 * (C80856 + C80881 * C81084) + C80830 * C80996 * C81313) /
        C80184;
    const double C15413 = (3 * (C80860 + C80886 * C81084) +
                           C80952 * (2 * C81210 + C80952 * C81313)) /
                          C80184;
    const double C15414 =
        (ae * (3 * (C80855 + C80878 * C81084) +
               C80952 * (2 * C81201 + C80952 * (C80878 + C80919 * C81084))) +
         be * (3 * (C80856 + C80881 * C81084) +
               C80952 * (2 * C81202 + C80952 * (C80881 + C80922 * C81084))) +
         C80830 * (3 * C81313 +
                   C80952 * (2 * C81203 +
                             C80952 * (C80930 +
                                       (C80903 * C80904 +
                                        C80834 * bs[7] * std::pow(C80836, 7)) *
                                           C80182 * C81084)))) /
        C80184;
    const double C15830 =
        (4 * (2 * C81210 + C80952 * C81313) +
         C80952 * (3 * C81313 +
                   C80952 * (2 * C81203 +
                             C80952 * (C80930 +
                                       (C80903 * C80904 +
                                        C80834 * bs[7] * std::pow(C80836, 7)) *
                                           C80182 * C81084)))) /
        C80184;
    const double C16309 =
        (C80996 *
         (3 * C81313 +
          C80952 * (2 * C81203 +
                    C80952 * (C80930 + (C80903 * C80904 +
                                        C80834 * bs[7] * std::pow(C80836, 7)) *
                                           C80182 * C81084)))) /
        C80184;
    const double C16310 = (C80996 * (2 * C81210 + C80952 * C81313)) / C80184;
    const double C16751 = (C80860 + C80886 * C81084 + C81313 * C81182) / C80184;
    const double C16752 =
        (ae * (C81593 + C81690 * C81182) + be * (C81581 + C81676 * C81182) +
         C80830 * (C81313 + (C80930 + (C80903 * C80904 +
                                       C80834 * bs[7] * std::pow(C80836, 7)) *
                                          C80182 * C81084) *
                                C81182)) /
        C80184;
    const double C17446 =
        (2 * C81210 + C80952 * C81313 +
         (2 * C81203 +
          C80952 * (C80930 +
                    (C80903 * C80904 + C80834 * bs[7] * std::pow(C80836, 7)) *
                        C80182 * C81084)) *
             C81182) /
        C80184;
    const double C18267 =
        (2 * C80996 * C81313 +
         C80996 * (C81313 + (C80930 + (C80903 * C80904 +
                                       C80834 * bs[7] * std::pow(C80836, 7)) *
                                          C80182 * C81084) *
                                C81182)) /
        C80184;
    const double C5697 =
        (2 * C81264 + C80996 * C81451 +
         ae * (2 * C80996 * C80887 + C80996 * (C80887 + C80931 * C81182)) +
         be * (2 * C80996 * C80888 + C80996 * (C80888 + C80933 * C81182)) +
         C80830 * (ae * (2 * C81255 + C80996 * (C80878 + C80919 * C81182)) +
                   be * (2 * C81256 + C80996 * (C80881 + C80922 * C81182)) +
                   C80830 * (2 * C81257 +
                             C80996 * (C80930 +
                                       (C80903 * C80904 +
                                        C80834 * bs[7] * std::pow(C80836, 7)) *
                                           C80182 * C81182)))) /
        C80184;
    const double C5698 =
        (ae * (2 * C80996 * C80855 + C80996 * (C80855 + C80878 * C81182)) +
         be * (2 * C80996 * C80856 + C80996 * (C80856 + C80881 * C81182)) +
         C80830 * (2 * C81264 + C80996 * C81451)) /
        C80184;
    const double C30028 = (3 * (C80860 + C80886 * C81182) +
                           C80996 * (2 * C81264 + C80996 * C81451)) /
                          C80184;
    const double C30029 =
        (ae * (3 * (C80855 + C80878 * C81182) +
               C80996 * (2 * C81255 + C80996 * (C80878 + C80919 * C81182))) +
         be * (3 * (C80856 + C80881 * C81182) +
               C80996 * (2 * C81256 + C80996 * (C80881 + C80922 * C81182))) +
         C80830 * (3 * C81451 +
                   C80996 * (2 * C81257 +
                             C80996 * (C80930 +
                                       (C80903 * C80904 +
                                        C80834 * bs[7] * std::pow(C80836, 7)) *
                                           C80182 * C81182)))) /
        C80184;
    const double C30839 =
        (4 * (2 * C81264 + C80996 * C81451) +
         C80996 * (3 * C81451 +
                   C80996 * (2 * C81257 +
                             C80996 * (C80930 +
                                       (C80903 * C80904 +
                                        C80834 * bs[7] * std::pow(C80836, 7)) *
                                           C80182 * C81182)))) /
        C80184;
    const double C370 =
        (4 * (2 * C80830 * C81094 + C80830 * C81101) +
         C80830 * (3 * C81101 +
                   C80830 * (2 * C80830 * C81099 +
                             C80830 * (C81099 +
                                       (C80903 * C80904 +
                                        C81084 * bs[7] * std::pow(C80836, 7)) *
                                           C80182 * C80834)))) /
        C80184;
    const double C909 =
        (ae * (3 * C80975 + C80830 * C80993) +
         be * (3 * C81062 + C80830 * C81080) +
         C80952 * (3 * C81101 +
                   C80830 * (2 * C80830 * C81099 +
                             C80830 * (C81099 +
                                       (C80903 * C80904 +
                                        C81084 * bs[7] * std::pow(C80836, 7)) *
                                           C80182 * C80834)))) /
        C80184;
    const double C910 = (ae * (2 * C80966 + C80830 * C80975) +
                         be * (2 * C81053 + C80830 * C81062) +
                         C80952 * (2 * C80830 * C81094 + C80830 * C81101)) /
                        C80184;
    const double C1369 =
        (C80996 *
         (3 * C81101 +
          C80830 * (2 * C80830 * C81099 +
                    C80830 * (C81099 + (C80903 * C80904 +
                                        C81084 * bs[7] * std::pow(C80836, 7)) *
                                           C80182 * C80834)))) /
        C80184;
    const double C1370 =
        (C80996 * (2 * C80830 * C81094 + C80830 * C81101)) / C80184;
    const double C2037 =
        (C81089 + C81094 * C80834 + ae * (C80952 * C80975 + C80880 * be) +
         be * (C80952 * C81062 + C80880 * ae) +
         C80952 * (ae * C80975 + be * C81062 + C80952 * C81101)) /
        C80184;
    const double C2038 =
        (2 * C80830 * C81094 + C80830 * C81101 +
         ae * (C80952 * C80993 + C80932 * be) +
         be * (C80952 * C81080 + C80932 * ae) +
         C80952 * (ae * C80993 + be * C81080 +
                   C80952 * (2 * C80830 * C81099 +
                             C80830 * (C81099 +
                                       (C80903 * C80904 +
                                        C81084 * bs[7] * std::pow(C80836, 7)) *
                                           C80182 * C80834)))) /
        C80184;
    const double C2925 =
        (2 * (ae * C80975 + be * C81062 + C80952 * C81101) +
         ae * (C80975 + C80952 * C81362 + C81360 * be) +
         be * (C81062 + C80952 * C81363 + C81360 * ae) +
         C80952 * (C81101 + ae * C81362 + be * C81363 +
                   C80952 * (ae * C80989 + be * C81076 +
                             C80952 * (C81099 +
                                       (C80903 * C80904 +
                                        C81084 * bs[7] * std::pow(C80836, 7)) *
                                           C80182 * C80834)))) /
        C80184;
    const double C3699 =
        (C80996 * C81101 + ae * C80996 * C81362 + be * C80996 * C81363 +
         C80952 * (ae * C80996 * C80989 + be * C80996 * C81076 +
                   C80952 * C80996 *
                       (C81099 + (C80903 * C80904 +
                                  C81084 * bs[7] * std::pow(C80836, 7)) *
                                     C80182 * C80834))) /
        C80184;
    const double C3700 = (ae * C80996 * C80975 + be * C80996 * C81062 +
                          C80952 * C80996 * C81101) /
                         C80184;
    const double C4489 = (C81089 + C81094 * C80834 + C81101 * C81182) / C80184;
    const double C4490 =
        (2 * C81365 + C80830 * C81101 +
         (2 * C80830 * C81099 +
          C80830 * (C81099 +
                    (C80903 * C80904 + C81084 * bs[7] * std::pow(C80836, 7)) *
                        C80182 * C80834)) *
             C81182) /
        C80184;
    const double C5300 =
        (ae * (C80975 + C80989 * C81182) + be * (C81062 + C81076 * C81182) +
         C80952 * (C81101 + (C81099 + (C80903 * C80904 +
                                       C81084 * bs[7] * std::pow(C80836, 7)) *
                                          C80182 * C80834) *
                                C81182)) /
        C80184;
    const double C6088 =
        (2 * C80996 * C81101 +
         C80996 * (C81101 + (C81099 + (C80903 * C80904 +
                                       C81084 * bs[7] * std::pow(C80836, 7)) *
                                          C80182 * C80834) *
                                C81182)) /
        C80184;
    const double C81631 = C81619 + C81625;
    const double C30216 =
        (3 * (C81365 + C81620 * C81182) +
         C80996 *
             (2 * C81876 +
              C80996 * (C81620 + C80830 *
                                     (C80903 * C80904 +
                                      C81084 * bs[7] * std::pow(C80836, 7)) *
                                     C80182 * C81182))) /
        C80184;
    const double C33629 =
        (ae * (2 * C81930 + C80996 * C81934) +
         be * (2 * C81908 + C80996 * C81910) +
         C80952 *
             (2 * C81876 +
              C80996 * (C81620 + C80830 *
                                     (C80903 * C80904 +
                                      C81084 * bs[7] * std::pow(C80836, 7)) *
                                     C80182 * C81182))) /
        C80184;
    const double C81715 = C80952 * C81708;
    const double C81785 = C81784 + C81783;
    const double C18623 =
        (2 * C81787 + C80996 * C81831 +
         ae * (2 * C80996 * C81607 + C80996 * (C81607 + C81709 * C81182)) +
         be * (2 * C80996 * C81610 + C80996 * (C81610 + C81712 * C81182)) +
         C80952 * (ae * (2 * C81778 + C80996 * (C80971 + C80984 * C81182)) +
                   be * (2 * C81779 + C80996 * (C81058 + C81071 * C81182)) +
                   C80952 * (2 * C81780 +
                             C80996 * (C81099 +
                                       (C80903 * C80904 +
                                        C81084 * bs[7] * std::pow(C80836, 7)) *
                                           C80182 * C81182)))) /
        C80184;
    const double C18624 =
        (ae * (2 * C80996 * C80964 + C80996 * (C80964 + C80971 * C81182)) +
         be * (2 * C80996 * C81051 + C80996 * (C81051 + C81058 * C81182)) +
         C80952 * (2 * C81787 + C80996 * C81831)) /
        C80184;
    const double C30215 = (3 * (C81089 + C81094 * C81182) +
                           C80996 * (2 * C81787 + C80996 * C81831)) /
                          C80184;
    const double C30620 =
        (ae * (3 * C81928 +
               C80996 * (2 * C81778 + C80996 * (C80971 + C80984 * C81182))) +
         be * (3 * C81906 +
               C80996 * (2 * C81779 + C80996 * (C81058 + C81071 * C81182))) +
         C80952 * (3 * C81831 +
                   C80996 * (2 * C81780 +
                             C80996 * (C81099 +
                                       (C80903 * C80904 +
                                        C81084 * bs[7] * std::pow(C80836, 7)) *
                                           C80182 * C81182)))) /
        C80184;
    const double C31044 =
        (4 * (2 * C81787 + C80996 * C81831) +
         C80996 * (3 * C81831 +
                   C80996 * (2 * C81780 +
                             C80996 * (C81099 +
                                       (C80903 * C80904 +
                                        C81084 * bs[7] * std::pow(C80836, 7)) *
                                           C80182 * C81182)))) /
        C80184;
    const double C613 =
        (4 * (2 * C80830 * C81192 + C80830 * C81199) +
         C80830 * (3 * C81199 +
                   C80830 * (2 * C80830 * C81197 +
                             C80830 * (C81197 +
                                       (C80903 * C80904 +
                                        C81182 * bs[7] * std::pow(C80836, 7)) *
                                           C80182 * C80834)))) /
        C80184;
    const double C1102 =
        (C80952 *
         (3 * C81199 +
          C80830 * (2 * C80830 * C81197 +
                    C80830 * (C81197 + (C80903 * C80904 +
                                        C81182 * bs[7] * std::pow(C80836, 7)) *
                                           C80182 * C80834)))) /
        C80184;
    const double C1103 =
        (C80952 * (2 * C80830 * C81192 + C80830 * C81199)) / C80184;
    const double C1562 =
        (ae * (3 * C81019 + C80830 * C81037) +
         be * (3 * C81143 + C80830 * C81161) +
         C80996 * (3 * C81199 +
                   C80830 * (2 * C80830 * C81197 +
                             C80830 * (C81197 +
                                       (C80903 * C80904 +
                                        C81182 * bs[7] * std::pow(C80836, 7)) *
                                           C80182 * C80834)))) /
        C80184;
    const double C1563 = (ae * (2 * C81010 + C80830 * C81019) +
                          be * (2 * C81134 + C80830 * C81143) +
                          C80996 * (2 * C80830 * C81192 + C80830 * C81199)) /
                         C80184;
    const double C2415 = (C81187 + C81192 * C80834 + C81199 * C81084) / C80184;
    const double C2416 =
        (2 * C80830 * C81192 + C80830 * C81199 +
         (2 * C80830 * C81197 +
          C80830 * (C81197 +
                    (C80903 * C80904 + C81182 * bs[7] * std::pow(C80836, 7)) *
                        C80182 * C80834)) *
             C81084) /
        C80184;
    const double C3252 =
        (2 * C80952 * C81199 +
         C80952 * (C81199 + (C81197 + (C80903 * C80904 +
                                       C81182 * bs[7] * std::pow(C80836, 7)) *
                                          C80182 * C80834) *
                                C81084)) /
        C80184;
    const double C4025 =
        (ae * (C81019 + C81033 * C81084) + be * (C81143 + C81157 * C81084) +
         C80996 * (C81199 + (C81197 + (C80903 * C80904 +
                                       C81182 * bs[7] * std::pow(C80836, 7)) *
                                          C80182 * C80834) *
                                C81084)) /
        C80184;
    const double C4026 = (ae * C80952 * C81019 + be * C80952 * C81143 +
                          C80996 * C80952 * C81199) /
                         C80184;
    const double C4856 =
        (C81187 + C81192 * C80834 + ae * (C80996 * C81019 + C80880 * be) +
         be * (C80996 * C81143 + C80880 * ae) +
         C80996 * (ae * C81019 + be * C81143 + C80996 * C81199)) /
        C80184;
    const double C4857 =
        (2 * C81390 + C80830 * C81199 + ae * (C80996 * C81037 + C80932 * be) +
         be * (C80996 * C81161 + C80932 * ae) +
         C80996 * (ae * C81037 + be * C81161 +
                   C80996 * (2 * C80830 * C81197 +
                             C80830 * (C81197 +
                                       (C80903 * C80904 +
                                        C81182 * bs[7] * std::pow(C80836, 7)) *
                                           C80182 * C80834)))) /
        C80184;
    const double C5611 =
        (C80952 * C81199 + ae * (C80996 * C81515 + C81360 * be) +
         be * (C80996 * C81516 + C81360 * ae) +
         C80996 * (ae * C81515 + be * C81516 +
                   C80996 * C80952 *
                       (C81197 + (C80903 * C80904 +
                                  C81182 * bs[7] * std::pow(C80836, 7)) *
                                     C80182 * C80834))) /
        C80184;
    const double C6435 =
        (2 * (ae * C81019 + be * C81143 + C80996 * C81199) +
         ae * (C81019 + C80996 * C81551 + C81549 * be) +
         be * (C81143 + C80996 * C81552 + C81549 * ae) +
         C80996 * (C81199 + ae * C81551 + be * C81552 +
                   C80996 * (ae * C81033 + be * C81157 +
                             C80996 * (C81197 +
                                       (C80903 * C80904 +
                                        C81182 * bs[7] * std::pow(C80836, 7)) *
                                           C80182 * C80834)))) /
        C80184;
    const double C81959 = C81953 + C81954;
    const double C34048 =
        (2 * (ae * C81518 + be * C81519 + C80996 * C82115) +
         ae * (C81518 + C80996 * C82121 + C82117 * be) +
         be * (C81519 + C80996 * C82122 + C82117 * ae) +
         C80996 * (C82115 + ae * C82121 + be * C82122 +
                   C80996 * (ae * C82116 + be * C82118 +
                             C80996 * C80952 * C80830 *
                                 (C80903 * C80904 +
                                  C81182 * bs[7] * std::pow(C80836, 7)) *
                                 C80182))) /
        C80184;
    const double C16246 =
        (4 * (2 * C80952 * C81192 + C80952 * C81764) +
         C80952 * (3 * C81764 +
                   C80952 * (2 * C80952 * C81197 +
                             C80952 * (C81197 +
                                       (C80903 * C80904 +
                                        C81182 * bs[7] * std::pow(C80836, 7)) *
                                           C80182 * C81084)))) /
        C80184;
    const double C16669 =
        (ae * (3 * C81644 + C80952 * C81745) +
         be * (3 * C81658 + C80952 * C81761) +
         C80996 * (3 * C81764 +
                   C80952 * (2 * C80952 * C81197 +
                             C80952 * (C81197 +
                                       (C80903 * C80904 +
                                        C81182 * bs[7] * std::pow(C80836, 7)) *
                                           C80182 * C81084)))) /
        C80184;
    const double C16670 = (ae * (2 * C81521 + C80952 * C81644) +
                           be * (2 * C81522 + C80952 * C81658) +
                           C80996 * (2 * C80952 * C81192 + C80952 * C81764)) /
                          C80184;
    const double C17367 =
        (C81187 + C81192 * C81084 + ae * (C80996 * C81644 + C81609 * be) +
         be * (C80996 * C81658 + C81609 * ae) +
         C80996 * (ae * C81644 + be * C81658 + C80996 * C81764)) /
        C80184;
    const double C82015 = C82003 + C82009;
    const double C82088 = C80996 * C82082;
    const double C18818 = (2 * (C80996 * C81658 + C81609 * ae) +
                           C80996 * (C81658 + C80996 * C81862 + C81859 * ae) +
                           (C81609 + C81711 * C81182) * ae) /
                          C80179;
    const double C18144 =
        (2 * C80952 * C81192 + C80952 * C81764 +
         ae * (C80996 * C81745 + C81723 * be) +
         be * (C80996 * C81761 + C81723 * ae) +
         C80996 * (ae * C81745 + be * C81761 +
                   C80996 * (2 * C80952 * C81197 +
                             C80952 * (C81197 +
                                       (C80903 * C80904 +
                                        C81182 * bs[7] * std::pow(C80836, 7)) *
                                           C80182 * C81084)))) /
        C80184;
    const double C16400 = (C80996 * (3 * C81644 + C80952 * C81745) +
                           (3 * C81609 + C80952 * C81723) * be) /
                          C80179;
    const double C16580 = (C80996 * (3 * C81658 + C80952 * C81761) +
                           (3 * C81609 + C80952 * C81723) * ae) /
                          C80179;
    const double C17631 =
        (2 * C81521 + C80952 * C81644 +
         C80996 * (C80996 * C81745 + C81723 * be) + C80996 * C81723 * be) /
        C80179;
    const double C17985 =
        (2 * C81522 + C80952 * C81658 +
         C80996 * (C80996 * C81761 + C81723 * ae) + C80996 * C81723 * ae) /
        C80179;
    const double C15827 = 4 * (2 * C81373 + C80952 * C81609) +
                          C80952 * (3 * C81609 + C80952 * C81723);
    const double C16303 = C80996 * (3 * C81609 + C80952 * C81723);
    const double C17443 = 2 * C81373 + C80952 * C81609 + C81723 * C81182;
    const double C18987 =
        (2 * (ae * C81644 + be * C81658 + C80996 * C81764) +
         ae * (C81644 + C80996 * C81861 + C81859 * be) +
         be * (C81658 + C80996 * C81862 + C81859 * ae) +
         C80996 * (C81764 + ae * C81861 + be * C81862 +
                   C80996 * (ae * C81740 + be * C81756 +
                             C80996 * (C81197 +
                                       (C80903 * C80904 +
                                        C81182 * bs[7] * std::pow(C80836, 7)) *
                                           C80182 * C81084)))) /
        C80184;
    const double C18460 = (2 * (C80996 * C81644 + C81609 * be) +
                           C80996 * (C81644 + C80996 * C81861 + C81859 * be) +
                           (C81609 + C81711 * C81182) * be) /
                          C80179;
    const double C82021 = C81750 + C82019;
    const double C82020 = C81734 + C82018;
    const double C30836 = 4 * (2 * C81561 + C80996 * C81945) +
                          C80996 * (3 * C81945 + C80996 * C82085);
    const double C391 = C384 - C385;
    const double C8770 = C8766 - C8767;
    const double C4511 = C4504 - C4505;
    const double C21786 = C82893 * C3948;
    const double C50330 = C44659 * C3948;
    const double C55026 = C82893 * C3948;
    const double C32071 = C82639 * C5535;
    const double C42540 = C82639 * C5535;
    const double C19142 = C82871 * C2654;
    const double C39906 = C82871 * C2654;
    const double C21153 = C82893 * C3444;
    const double C21471 = C13341 * C3444;
    const double C49709 = C44659 * C3444;
    const double C54381 = C82893 * C3444;
    const double C54707 = C1745 * C3444;
    const double C31443 = C82639 * C5061;
    const double C31759 = C6585 * C5061;
    const double C41894 = C82639 * C5061;
    const double C42218 = C37964 * C5061;
    const double C34413 = C34412 - C34410;
    const double C81616 = C81614 + C81608;
    const double C81714 = C81707 + C81697;
    const double C37750 = C82639 * C18899;
    const double C72721 = C82639 * C18899;
    const double C31057 = C31052 - C31053;
    const double C634 = C627 - C628;
    const double C7144 = C7140 - C7141;
    const double C2439 = C2432 - C2433;
    const double C34266 = C82878 * C5905;
    const double C57182 = C82878 * C5905;
    const double C19668 = C19667 - C19665;
    const double C16257 = C16252 - C16253;
    const double C36750 = C82878 * C18459;
    const double C71727 = C82878 * C18459;
    const double C82081 = C82068 + C82069;
    const double C81948 = C81943 + C81944;
    const double C19453 = C239 * C2822;
    const double C20000 = C80205 * C2822;
    const double C40751 = C39827 * C2822;
    const double C21473 = C13341 * C3617;
    const double C21585 = C8608 * C3617;
    const double C22343 = C80205 * C3617;
    const double C50843 = C39827 * C3617;
    const double C54709 = C1745 * C3617;
    const double C54825 = C52459 * C3617;
    const double C31761 = C6585 * C5221;
    const double C31872 = C25873 * C5221;
    const double C32605 = C80205 * C5221;
    const double C42220 = C37964 * C5221;
    const double C42337 = C4298 * C5221;
    const double C43096 = C39827 * C5221;
    const double C81617 = C81615 + C81611;
    const double C19373 = C82871 * C2926;
    const double C40133 = C82871 * C2926;
    const double C21474 = C82893 * C3701;
    const double C50022 = C44659 * C3701;
    const double C54710 = C82893 * C3701;
    const double C10868 = C82639 * C3702;
    const double C21470 = C13257 * C3702;
    const double C42213 = C82639 * C3702;
    const double C50018 = C82642 * C3702;
    const double C54706 = C82916 * C3702;
    const double C4503 = C82581 * C4488;
    const double C31758 = C82863 * C4488;
    const double C42217 = C37887 * C4488;
    const double C31762 = C82639 * C5301;
    const double C42221 = C82639 * C5301;
    const double C34411 = C82581 * C6089;
    const double C4517 = C4513 + C4499;
    const double C31060 = C31058 + C31051;
    const double C34622 = C168 * C6263;
    const double C35808 = C80205 * C6263;
    const double C58715 = C39827 * C6263;
    const double C37037 = C15405 * C18817;
    const double C37751 = C6585 * C18817;
    const double C72722 = C37964 * C18817;
    const double C81951 = C81950 + C81947;
    const double C19666 = C82592 * C3253;
    const double C21893 = C82679 * C4027;
    const double C55141 = C82679 * C4027;
    const double C11304 = C82679 * C4028;
    const double C32178 = C25721 * C4028;
    const double C42647 = C82918 * C4028;
    const double C55133 = C82679 * C4028;
    const double C64557 = C82682 * C4028;
    const double C4870 = C82896 * C4855;
    const double C26369 = C82896 * C4855;
    const double C62242 = C61595 * C4855;
    const double C32182 = C82896 * C5612;
    const double C42651 = C82896 * C5612;
    const double C64561 = C61595 * C5612;
    const double C34708 = C82878 * C6436;
    const double C57615 = C82878 * C6436;
    const double C37185 = C82878 * C18988;
    const double C72156 = C82878 * C18988;
    const double C2446 = C2442 + C2431;
    const double C16260 = C16258 + C16251;
    const double C180 =
        (4 * (2 * C80974 + ae * C80975 + C80830 * C80992) +
         ae * (3 * C80975 + C80830 * C80993) +
         C80830 * (3 * C80992 + ae * C80993 +
                   C80830 * (2 * C80988 + ae * C80989 +
                             C80830 * (C80982 + ae * C80830 * C80984 +
                                       C80830 * (ae * C80984 +
                                                 C80830 * std::pow(C80836, 7) *
                                                     bs[7] * C80958))))) /
        C80184;
    const double C1221 =
        (C80996 * (2 * C80974 + ae * C80975 + C80830 * C80992)) / C80184;
    const double C1222 =
        (C80996 * (3 * C80992 + ae * C80993 +
                   C80830 * (2 * C80988 + ae * C80989 +
                             C80830 * (C80982 + ae * C80830 * C80984 +
                                       C80830 * (ae * C80984 +
                                                 C80830 * std::pow(C80836, 7) *
                                                     bs[7] * C80958))))) /
        C80184;
    const double C4204 =
        (C80963 + ae * C80966 + C80830 * C80974 + C80992 * C81182) / C80184;
    const double C4205 =
        (2 * C80974 + ae * C80975 + C80830 * C80992 +
         (2 * C80988 + ae * C80989 +
          C80830 * (C80982 + ae * C80830 * C80984 +
                    C80830 * (ae * C80984 +
                              C80830 * std::pow(C80836, 7) * bs[7] * C80958))) *
             C81182) /
        C80184;
    const double C5821 =
        (2 * C80996 * C80992 +
         C80996 *
             (C80992 + (C80982 + ae * C80830 * C80984 +
                        C80830 * (ae * C80984 + C80830 * std::pow(C80836, 7) *
                                                    bs[7] * C80958)) *
                           C81182)) /
        C80184;
    const double C15465 =
        (3 * (C80974 + be * C81493 + C80952 * C81585) +
         be * (2 * C81493 + C80952 * C81586) +
         C80952 * (2 * C81585 + be * C81586 +
                   C80952 * (C80988 + be * C80952 * C80933 +
                             C80952 * (be * C80933 +
                                       C80952 * (ae * C80984 +
                                                 C80830 * std::pow(C80836, 7) *
                                                     bs[7] * C80958))))) /
        C80184;
    const double C16830 =
        (C80974 + be * C81493 + C80952 * C81585 +
         (C80988 + be * C80952 * C80933 +
          C80952 * (be * C80933 +
                    C80952 * (ae * C80984 +
                              C80830 * std::pow(C80836, 7) * bs[7] * C80958))) *
             C81182) /
        C80184;
    const double C20479 =
        (C80996 * (2 * C81585 + be * C81586 +
                   C80952 * (C80988 + be * C80952 * C80933 +
                             C80952 * (be * C80933 +
                                       C80952 * (ae * C80984 +
                                                 C80830 * std::pow(C80836, 7) *
                                                     bs[7] * C80958))))) /
        C80184;
    const double C33314 =
        (2 * C80996 * C81585 +
         C80996 *
             (C81585 + (be * C80933 +
                        C80952 * (ae * C80984 + C80830 * std::pow(C80836, 7) *
                                                    bs[7] * C80958)) *
                           C81182)) /
        C80184;
    const double C15906 =
        (4 * (2 * C81580 + be * C81581 + C80952 * C81679) +
         be * (3 * C81581 + C80952 * C81680) +
         C80952 * (3 * C81679 + be * C81680 +
                   C80952 * (2 * C81675 + be * C81676 +
                             C80952 * (C80982 + be * C80952 * C80922 +
                                       C80952 * (be * C80922 +
                                                 C80952 * std::pow(C80836, 7) *
                                                     bs[7] * C80958))))) /
        C80184;
    const double C16355 =
        (C80996 * (2 * C81580 + be * C81581 + C80952 * C81679)) / C80184;
    const double C16356 =
        (C80996 * (3 * C81679 + be * C81680 +
                   C80952 * (2 * C81675 + be * C81676 +
                             C80952 * (C80982 + be * C80952 * C80922 +
                                       C80952 * (be * C80922 +
                                                 C80952 * std::pow(C80836, 7) *
                                                     bs[7] * C80958))))) /
        C80184;
    const double C16829 =
        (C80963 + be * C81491 + C80952 * C81580 + C81679 * C81182) / C80184;
    const double C17556 =
        (2 * C81580 + be * C81581 + C80952 * C81679 +
         (2 * C81675 + be * C81676 +
          C80952 * (C80982 + be * C80952 * C80922 +
                    C80952 * (be * C80922 +
                              C80952 * std::pow(C80836, 7) * bs[7] * C80958))) *
             C81182) /
        C80184;
    const double C18360 =
        (2 * C80996 * C81679 +
         C80996 *
             (C81679 + (C80982 + be * C80952 * C80922 +
                        C80952 * (be * C80922 + C80952 * std::pow(C80836, 7) *
                                                    bs[7] * C80958)) *
                           C81182)) /
        C80184;
    const double C321 =
        (4 * (2 * C81061 + be * C81062 + C80830 * C81079) +
         be * (3 * C81062 + C80830 * C81080) +
         C80830 * (3 * C81079 + be * C81080 +
                   C80830 * (2 * C81075 + be * C81076 +
                             C80830 * (C81069 + be * C80830 * C81071 +
                                       C80830 * (be * C81071 +
                                                 C80830 * std::pow(C80836, 7) *
                                                     bs[7] * C81045))))) /
        C80184;
    const double C1325 =
        (C80996 * (2 * C81061 + be * C81062 + C80830 * C81079)) / C80184;
    const double C1326 =
        (C80996 * (3 * C81079 + be * C81080 +
                   C80830 * (2 * C81075 + be * C81076 +
                             C80830 * (C81069 + be * C80830 * C81071 +
                                       C80830 * (be * C81071 +
                                                 C80830 * std::pow(C80836, 7) *
                                                     bs[7] * C81045))))) /
        C80184;
    const double C4411 =
        (C81050 + be * C81053 + C80830 * C81061 + C81079 * C81182) / C80184;
    const double C4412 =
        (2 * C81061 + be * C81062 + C80830 * C81079 +
         (2 * C81075 + be * C81076 +
          C80830 * (C81069 + be * C80830 * C81071 +
                    C80830 * (be * C81071 +
                              C80830 * std::pow(C80836, 7) * bs[7] * C81045))) *
             C81182) /
        C80184;
    const double C5989 =
        (2 * C80996 * C81079 +
         C80996 *
             (C81079 + (C81069 + be * C80830 * C81071 +
                        C80830 * (be * C81071 + C80830 * std::pow(C80836, 7) *
                                                    bs[7] * C81045)) *
                           C81182)) /
        C80184;
    const double C15557 =
        (3 * (C81061 + ae * C81508 + C80952 * C81597) +
         ae * (2 * C81508 + C80952 * C81598) +
         C80952 * (2 * C81597 + ae * C81598 +
                   C80952 * (C81075 + ae * C80952 * C80931 +
                             C80952 * (ae * C80931 +
                                       C80952 * (be * C81071 +
                                                 C80830 * std::pow(C80836, 7) *
                                                     bs[7] * C81045))))) /
        C80184;
    const double C16002 =
        (4 * (2 * C81592 + ae * C81593 + C80952 * C81693) +
         ae * (3 * C81593 + C80952 * C81694) +
         C80952 * (3 * C81693 + ae * C81694 +
                   C80952 * (2 * C81689 + ae * C81690 +
                             C80952 * (C81069 + ae * C80952 * C80919 +
                                       C80952 * (ae * C80919 +
                                                 C80952 * std::pow(C80836, 7) *
                                                     bs[7] * C81045))))) /
        C80184;
    const double C251 =
        (4 * (2 * C81018 + ae * C81019 + C80830 * C81036) +
         ae * (3 * C81019 + C80830 * C81037) +
         C80830 * (3 * C81036 + ae * C81037 +
                   C80830 * (2 * C81032 + ae * C81033 +
                             C80830 * (C81026 + ae * C80830 * C81028 +
                                       C80830 * (ae * C81028 +
                                                 C80830 * std::pow(C80836, 7) *
                                                     bs[7] * C81002))))) /
        C80184;
    const double C813 =
        (C80952 * (2 * C81018 + ae * C81019 + C80830 * C81036)) / C80184;
    const double C814 =
        (C80952 * (3 * C81036 + ae * C81037 +
                   C80830 * (2 * C81032 + ae * C81033 +
                             C80830 * (C81026 + ae * C80830 * C81028 +
                                       C80830 * (ae * C81028 +
                                                 C80830 * std::pow(C80836, 7) *
                                                     bs[7] * C81002))))) /
        C80184;
    const double C1858 =
        (C81007 + ae * C81010 + C80830 * C81018 + C81036 * C81084) / C80184;
    const double C1859 =
        (2 * C81018 + ae * C81019 + C80830 * C81036 +
         (2 * C81032 + ae * C81033 +
          C80830 * (C81026 + ae * C80830 * C81028 +
                    C80830 * (ae * C81028 +
                              C80830 * std::pow(C80836, 7) * bs[7] * C81002))) *
             C81084) /
        C80184;
    const double C2738 =
        (2 * C80952 * C81036 +
         C80952 *
             (C81036 + (C81026 + ae * C80830 * C81028 +
                        C80830 * (ae * C81028 + C80830 * std::pow(C80836, 7) *
                                                    bs[7] * C81002)) *
                           C81084)) /
        C80184;
    const double C30126 =
        (3 * (C81018 + be * C81894 + C80996 * C81897) +
         be * (2 * C81894 + C80996 * C81898) +
         C80996 * (2 * C81897 + be * C81898 +
                   C80996 * (C81032 + be * C80996 * C80933 +
                             C80996 * (be * C80933 +
                                       C80996 * (ae * C81028 +
                                                 C80830 * std::pow(C80836, 7) *
                                                     bs[7] * C81002))))) /
        C80184;
    const double C30949 =
        (4 * (2 * C81891 + be * C81892 + C80996 * C82037) +
         be * (3 * C81892 + C80996 * C82038) +
         C80996 * (3 * C82037 + be * C82038 +
                   C80996 * (2 * C82033 + be * C82034 +
                             C80996 * (C81026 + be * C80996 * C80922 +
                                       C80996 * (be * C80922 +
                                                 C80996 * std::pow(C80836, 7) *
                                                     bs[7] * C81002))))) /
        C80184;
    const double C16104 =
        (4 * (2 * C81643 + ae * C81644 + C80952 * C81744) +
         ae * (3 * C81644 + C80952 * C81745) +
         C80952 * (3 * C81744 + ae * C81745 +
                   C80952 * (2 * C81738 + ae * C81740 +
                             C80952 * (C81116 + ae * C80952 * C81028 +
                                       C80952 * (ae * C81028 +
                                                 C80952 * std::pow(C80836, 7) *
                                                     bs[7] * C81107))))) /
        C80184;
    const double C16536 =
        (3 * (C81790 + ae * (C80996 * C81734 + C81608) + C80952 * C81798) +
         ae * (C80996 * C81745 + C81723 * be) +
         C80952 * (2 * C81798 + ae * (C80996 * C81740 + C81717) +
                   C80952 * (C81795 + ae * (C80996 * C80952 * C81028 + C81710) +
                             C80952 * (ae * (C80996 * C81028 + C80912) +
                                       C80952 * (be * C81071 +
                                                 C80996 * std::pow(C80836, 7) *
                                                     bs[7] * C81107))))) /
        C80184;
    const double C17898 =
        (2 * (ae * (C81008 + C80996 * C81794 + C80996 * C80866 * be) +
              C80952 * C81835) +
         ae * (C81644 + C80996 * (C80996 * C81740 + C81717) +
               C80996 * C81711 * be) +
         C80952 *
             (C81835 +
              ae * (C81734 + C80996 * (C80996 * C80952 * C81028 + C81710) +
                    C80996 * C81702 * be) +
              C80952 * (ae * (C81015 + C80996 * (C80996 * C81028 + C80912) +
                              C80996 * C80902 * be) +
                        C80952 * (C81116 + be * C80996 * C81071 +
                                  C80996 * (be * C81071 +
                                            C80996 * std::pow(C80836, 7) *
                                                bs[7] * C81107))))) /
        C80184;
    const double C18741 =
        (ae * (2 * C81563 +
               C80996 * (C81008 + C80996 * C81794 + C80996 * C80866 * be) +
               (C80845 + C80866 * C81182) * be) +
         C80952 *
             (2 * C81790 + be * (C81051 + C81058 * C81182) + C80996 * C81835)) /
        C80184;
    const double C18742 =
        (2 * C81790 + be * (C81051 + C81058 * C81182) + C80996 * C81835 +
         ae * (2 * (C80996 * C81734 + C81608) +
               C80996 * (C81734 + C80996 * (C80996 * C80952 * C81028 + C81710) +
                         C80996 * C81702 * be) +
               (C81603 + C81702 * C81182) * be) +
         C80952 *
             (ae * (2 * C81794 +
                    C80996 * (C81015 + C80996 * (C80996 * C81028 + C80912) +
                              C80996 * C80902 * be) +
                    (C80866 + C80902 * C81182) * be) +
              C80952 * (2 * C81795 + be * (C81058 + C81071 * C81182) +
                        C80996 * (C81116 + be * C80996 * C81071 +
                                  C80996 * (be * C81071 +
                                            C80996 * std::pow(C80836, 7) *
                                                bs[7] * C81107))))) /
        C80184;
    const double C30259 =
        (3 * (C81110 + be * C81904 + C80996 * C81790) +
         be * (2 * C81904 + C80996 * C81906) +
         C80996 * (2 * C81790 + be * C81906 + C80996 * C81835)) /
        C80184;
    const double C31105 =
        (4 * (2 * C81790 + be * C81906 + C80996 * C81835) +
         be * (3 * C81906 + C80996 * C82044) +
         C80996 * (3 * C81835 + be * C82044 +
                   C80996 * (2 * C81795 + be * C81987 +
                             C80996 * (C81116 + be * C80996 * C81071 +
                                       C80996 * (be * C81071 +
                                                 C80996 * std::pow(C80836, 7) *
                                                     bs[7] * C81107))))) /
        C80184;
    const double C508 =
        (4 * (2 * C81142 + be * C81143 + C80830 * C81160) +
         be * (3 * C81143 + C80830 * C81161) +
         C80830 * (3 * C81160 + be * C81161 +
                   C80830 * (2 * C81156 + be * C81157 +
                             C80830 * (C81150 + be * C80830 * C81152 +
                                       C80830 * (be * C81152 +
                                                 C80830 * std::pow(C80836, 7) *
                                                     bs[7] * C81126))))) /
        C80184;
    const double C1011 =
        (C80952 * (2 * C81142 + be * C81143 + C80830 * C81160)) / C80184;
    const double C1012 =
        (C80952 * (3 * C81160 + be * C81161 +
                   C80830 * (2 * C81156 + be * C81157 +
                             C80830 * (C81150 + be * C80830 * C81152 +
                                       C80830 * (be * C81152 +
                                                 C80830 * std::pow(C80836, 7) *
                                                     bs[7] * C81126))))) /
        C80184;
    const double C2247 =
        (C81131 + be * C81134 + C80830 * C81142 + C81160 * C81084) / C80184;
    const double C2248 =
        (2 * C81142 + be * C81143 + C80830 * C81160 +
         (2 * C81156 + be * C81157 +
          C80830 * (C81150 + be * C80830 * C81152 +
                    C80830 * (be * C81152 +
                              C80830 * std::pow(C80836, 7) * bs[7] * C81126))) *
             C81084) /
        C80184;
    const double C3088 =
        (2 * C80952 * C81160 +
         C80952 *
             (C81160 + (C81150 + be * C80830 * C81152 +
                        C80830 * (be * C81152 + C80830 * std::pow(C80836, 7) *
                                                    bs[7] * C81126)) *
                           C81084)) /
        C80184;
    const double C30306 =
        (3 * (C81142 + ae * C81918 + C80996 * C81921) +
         ae * (2 * C81918 + C80996 * C81922) +
         C80996 * (2 * C81921 + ae * C81922 +
                   C80996 * (C81156 + ae * C80996 * C80931 +
                             C80996 * (ae * C80931 +
                                       C80996 * (be * C81152 +
                                                 C80830 * std::pow(C80836, 7) *
                                                     bs[7] * C81126))))) /
        C80184;
    const double C31149 =
        (4 * (2 * C81915 + ae * C81916 + C80996 * C82054) +
         ae * (3 * C81916 + C80996 * C82055) +
         C80996 * (3 * C82054 + ae * C82055 +
                   C80996 * (2 * C82050 + ae * C82051 +
                             C80996 * (C81150 + ae * C80996 * C80919 +
                                       C80996 * (ae * C80919 +
                                                 C80996 * std::pow(C80836, 7) *
                                                     bs[7] * C81126))))) /
        C80184;
    const double C16203 =
        (4 * (2 * C81657 + be * C81658 + C80952 * C81760) +
         be * (3 * C81658 + C80952 * C81761) +
         C80952 * (3 * C81760 + be * C81761 +
                   C80952 * (2 * C81754 + be * C81756 +
                             C80952 * (C81176 + be * C80952 * C81152 +
                                       C80952 * (be * C81152 +
                                                 C80952 * std::pow(C80836, 7) *
                                                     bs[7] * C81167))))) /
        C80184;
    const double C30750 =
        (3 * (C81657 + ae * C81997 + C80996 * C82000) +
         ae * (2 * C81997 + C80996 * C82001) +
         C80996 * (2 * C82000 + ae * C82001 +
                   C80996 * (C81754 + ae * C80996 * C81709 +
                             C80996 * (ae * C81709 +
                                       C80996 * (be * C81152 +
                                                 C80952 * std::pow(C80836, 7) *
                                                     bs[7] * C81167))))) /
        C80184;
    const double C31196 =
        (4 * (2 * C81927 + ae * C81928 + C80996 * C82065) +
         ae * (3 * C81928 + C80996 * C82066) +
         C80996 * (3 * C82065 + ae * C82066 +
                   C80996 * (2 * C82061 + ae * C82062 +
                             C80996 * (C81176 + ae * C80996 * C80984 +
                                       C80996 * (ae * C80984 +
                                                 C80996 * std::pow(C80836, 7) *
                                                     bs[7] * C81167))))) /
        C80184;
    const double C80228 = C80219 - C80225;
    const double C80267 = C80249 - C80263;
    const double C80218 = C80213 * be;
    const double C45433 = C80280 * C701;
    const double C45431 = C80280 * C700;
    const double C45710 = C80280 * C1952;
    const double C45704 = C80280 * C1655;
    const double C45698 = C80280 * C859;
    const double C45692 = C80280 * C693;
    const double C45944 = C80280 * C2243;
    const double C45938 = C80280 * C1005;
    const double C48091 = C80280 * C3615;
    const double C48085 = C80280 * C3346;
    const double C48391 = C80280 * C3861;
    const double C48696 = C80280 * C1161;
    const double C48694 = C80280 * C1160;
    const double C49012 = C80280 * C1319;
    const double C49006 = C80280 * C1153;
    const double C49312 = C80280 * C1465;
    const double C63267 = C80280 * C4407;
    const double C63261 = C80280 * C4110;
    const double C63501 = C80280 * C4685;
    const double C80284 = 2 * C80280;
    const double C100 =
        (C80280 / C80185 + (0 * ae) / C80179) / C80185 - (0 * be) / C80179;
    const double C6516 = C80280 / C80185 - (0 * be) / C80179;
    const double C37895 = C80280 / C80185 + (0 * ae) / C80179;
    const double C14032 = C13263 * C701;
    const double C14030 = C13263 * C700;
    const double C14309 = C13263 * C1952;
    const double C14303 = C13263 * C1655;
    const double C14297 = C13263 * C859;
    const double C14291 = C13263 * C693;
    const double C14543 = C13263 * C2243;
    const double C14537 = C13263 * C1005;
    const double C27150 = C13263 * C1161;
    const double C27148 = C13263 * C1160;
    const double C27427 = C13263 * C4407;
    const double C27421 = C13263 * C4110;
    const double C27415 = C13263 * C1319;
    const double C27409 = C13263 * C1153;
    const double C27667 = C13263 * C4685;
    const double C27661 = C13263 * C1465;
    const double C67680 = C13263 * C3615;
    const double C67674 = C13263 * C3346;
    const double C67980 = C13263 * C3861;
    const double C80217 = C80212 * ae;
    const double C80248 = C80212 * C80242;
    const double C1647 =
        ((-C80180 / C80179) / C80185 - (C80198 * be) / C80179) / C80185 -
        ((C80177 * ((-C80187) / C80185 - (C80212 * be) / C80179) + C39819) *
         be) /
            C80179 +
        (-C80199 / C80179) / C80185 - (0 * be) / C80179;
    const double C1649 =
        ((-C80187) / C80185 - (C80212 * be) / C80179) / C80185 -
        ((C80177 * ((-C80199 / C80179) / C80185 - (0 * be) / C80179) + C82533) *
         be) /
            C80179;
    const double C39825 = (-C80187) / C80185 - (C80212 * be) / C80179;
    const double C82880 = C82843 / C80179;
    const double C82910 = C82884 / C80185;
    const double C82911 = C82886 + C82851;
    const double C6506 = C82851 - C82534 / C80191;
    const double C82883 = C82847 / C80179;
    const double C7217 = C6504 * C710;
    const double C7448 = C6504 * C862;
    const double C7440 = C6504 * C704;
    const double C7654 = C6504 * C1008;
    const double C9758 = C6504 * C1170;
    const double C9989 = C6504 * C1322;
    const double C9981 = C6504 * C1164;
    const double C10199 = C6504 * C1468;
    const double C80343 = C80342 * C80242;
    const double C80449 = C80342 * ae;
    const double C6584 = (C80342 * ae) / C80179 - C80329 / C80191;
    const double C13339 =
        ((-(0 * be) / C80179) / C80185 -
         ((0 - (C80306 * C80329) / C80179) * be) / C80179) /
            C80185 -
        ((C80306 * ((-C80329 / C80179) / C80185 - (C80342 * be) / C80179) +
          C37887) *
         be) /
            C80179 +
        (-C80339 / C80179) / C80185 - (0 * be) / C80179;
    const double C13340 =
        ((-C80329 / C80179) / C80185 - (C80342 * be) / C80179) / C80185 -
        ((C80306 * ((-C80339 / C80179) / C80185 - (0 * be) / C80179) + C82639) *
         be) /
            C80179;
    const double C37963 = (-C80447) / C80185 - (C80342 * be) / C80179;
    const double C80475 = C80471 * be;
    const double C44761 = C80495 * C1655;
    const double C44755 = C80495 * C1660;
    const double C44749 = C80495 * C1654;
    const double C45015 = C80495 * C1952;
    const double C45013 = C80495 * C1748;
    const double C45003 = C80495 * C1951;
    const double C45001 = C80495 * C1747;
    const double C45268 = C80495 * C2243;
    const double C45262 = C80495 * C2242;
    const double C49716 = C80495 * C3352;
    const double C49710 = C80495 * C3344;
    const double C50021 = C80495 * C3617;
    const double C50019 = C80495 * C3444;
    const double C50331 = C80495 * C3863;
    const double C51545 = C80495 * C3354;
    const double C51539 = C80495 * C3345;
    const double C51850 = C80495 * C3616;
    const double C51848 = C80495 * C3442;
    const double C52160 = C80495 * C3862;
    const double C79617 = C80495 * C16748;
    const double C79611 = C80495 * C16745;
    const double C80088 = C80495 * C17213;
    const double C80542 = 2 * C80495;
    const double C15461 =
        (C80495 / C80185 + (0 * ae) / C80179) / C80185 - (0 * be) / C80179;
    const double C19134 = C80495 / C80185 - (0 * be) / C80179;
    const double C39898 = C80495 / C80185 + (0 * ae) / C80179;
    const double C6110 = C6108 * C1641;
    const double C10063 = C6108 * C6504;
    const double C27502 = C6108 * C82925;
    const double C31046 = C6108 * C82523;
    const double C35667 = C6108 * C82844;
    const double C58574 = C6108 * C39819;
    const double C63342 = C6108 * C82528;
    const double C82897 = C82866 / C80179;
    const double C82920 = C82900 / C80185;
    const double C82921 = C82901 + C82870;
    const double C19059 = C82870 - C82640 / C80191;
    const double C82899 = C82867 / C80179;
    const double C19144 = C19057 * C176;
    const double C19136 = C19057 * C170;
    const double C19361 = C19057 * C366;
    const double C19586 = C19057 * C552;
    const double C25141 = C19057 * C1218;
    const double C25133 = C19057 * C1213;
    const double C25350 = C19057 * C1373;
    const double C25573 = C19057 * C1515;
    const double C80369 = C80368 * C80242;
    const double C80599 = C80368 * ae;
    const double C8607 = (C80368 * ae) / C80179 - C80355 / C80191;
    const double C25871 =
        ((-(0 * be) / C80179) / C80185 -
         ((0 - (C80309 * C80355) / C80179) * be) / C80179) /
            C80185 -
        ((C80309 * ((-C80355 / C80179) / C80185 - (C80368 * be) / C80179) +
          C52324) *
         be) /
            C80179 +
        (-C80365 / C80179) / C80185 - (0 * be) / C80179;
    const double C25872 =
        ((-C80355 / C80179) / C80185 - (C80368 * be) / C80179) / C80185 -
        ((C80309 * ((-C80365 / C80179) / C80185 - (0 * be) / C80179) + C82679) *
         be) /
            C80179;
    const double C52458 = (-C80597) / C80185 - (C80368 * be) / C80179;
    const double C80625 = C80621 * be;
    const double C61765 = C80645 * C4110;
    const double C61759 = C80645 * C4115;
    const double C61753 = C80645 * C4109;
    const double C62005 = C80645 * C4407;
    const double C61999 = C80645 * C4406;
    const double C62253 = C80645 * C4685;
    const double C62251 = C80645 * C4301;
    const double C62241 = C80645 * C4684;
    const double C62239 = C80645 * C4300;
    const double C63955 = C80645 * C4980;
    const double C63949 = C80645 * C4975;
    const double C64255 = C80645 * C5221;
    const double C64560 = C80645 * C5455;
    const double C64558 = C80645 * C5141;
    const double C64876 = C80645 * C4982;
    const double C64870 = C80645 * C4976;
    const double C65176 = C80645 * C5220;
    const double C65481 = C80645 * C5454;
    const double C65479 = C80645 * C5140;
    const double C78986 = C80645 * C16748;
    const double C78980 = C80645 * C16745;
    const double C79447 = C80645 * C17213;
    const double C79445 = C80645 * C16905;
    const double C80692 = 2 * C80645;
    const double C30122 =
        (C80645 / C80185 + (0 * ae) / C80179) / C80185 - (0 * be) / C80179;
    const double C34258 = C80645 / C80185 - (0 * be) / C80179;
    const double C57174 = C80645 / C80185 + (0 * ae) / C80179;
    const double C643 = C639 * C82581;
    const double C2418 = C639 * C82931;
    const double C7135 = C639 * C82863;
    const double C13942 = C639 * C13256;
    const double C19660 = C639 * C19057;
    const double C38508 = C639 * C37887;
    const double C45343 = C639 * C82635;
    const double C82902 = C82873 / C80179;
    const double C82923 = C82905 / C80185;
    const double C82924 = C82906 + C82877;
    const double C34117 = C82877 - C82680 / C80191;
    const double C82904 = C82874 / C80179;
    const double C34268 = C34115 * C247;
    const double C34260 = C34115 * C241;
    const double C34481 = C34115 * C442;
    const double C34696 = C34115 * C609;
    const double C36752 = C34115 * C810;
    const double C36744 = C34115 * C805;
    const double C36962 = C34115 * C956;
    const double C37173 = C34115 * C1106;
    const double C80489 = C80485 - C80488;
    const double C80535 = C80519 - C80533;
    const double C80639 = C80635 - C80638;
    const double C80685 = C80669 - C80683;
    const double C2445 = C2441 + C2426;
    const double C6096 = C4516 * C1642;
    const double C27503 = C4516 * C82909;
    const double C35668 = C4516 * C82533;
    const double C58575 = C4516 * C82533;
    const double C63343 = C4516 * C82536;
    const double C6111 = C6109 * C1641;
    const double C27505 = C6109 * C82925;
    const double C31047 = C6109 * C82523;
    const double C35669 = C6109 * C82844;
    const double C58576 = C6109 * C39819;
    const double C63345 = C6109 * C82528;
    const double C644 = C640 * C82581;
    const double C2427 = C640 * C82931;
    const double C7137 = C640 * C82863;
    const double C13945 = C640 * C13256;
    const double C38510 = C640 * C37887;
    const double C45346 = C640 * C82635;
    const double C645 = C641 * C82581;
    const double C7139 = C641 * C82863;
    const double C38512 = C641 * C37887;
    const double C2448 = C2444 * C82916;
    const double C7136 = C2444 * C82639;
    const double C13943 = C2444 * C13257;
    const double C38509 = C2444 * C82639;
    const double C45344 = C2444 * C82642;
    const double C761 =
        (be * (2 * C80862 + C80830 * C80896 + C80880 * ae) +
         C80952 * (2 * C80974 + ae * C80975 + C80830 * C80992)) /
        C80184;
    const double C1273 =
        (be * (2 * C80862 + C80830 * C80896 + C80880 * ae) +
         C80996 * (2 * C81018 + ae * C81019 + C80830 * C81036)) /
        C80184;
    const double C1752 =
        (C80963 + ae * C80966 + C80830 * C80974 + be * C80952 * C80896 +
         C80952 * (be * C80896 + C80952 * C80992)) /
        C80184;
    const double C3451 = (C80996 * (be * C80896 + C80952 * C80992)) / C80184;
    const double C3535 =
        (be * C80952 * C80896 + C80996 * C80952 * C81036) / C80184;
    const double C4305 =
        (C81007 + ae * C81010 + C80830 * C81018 + be * C80996 * C80896 +
         C80996 * (be * C80896 + C80996 * C81036)) /
        C80184;
    const double C117 = (3 * (C80843 + C80830 * C80862 + C80851 * ae) +
                         C80830 * (2 * C80862 + C80830 * C80896 + C80880 * ae) +
                         (2 * C80851 + C80830 * C80880) * ae) /
                        C80179;
    const double C699 =
        (C80952 * (2 * C80862 + C80830 * C80896 + C80880 * ae)) / C80179;
    const double C1159 =
        (C80996 * (2 * C80862 + C80830 * C80896 + C80880 * ae)) / C80179;
    const double C1662 =
        (C80843 + C80830 * C80862 + C80851 * ae + C80896 * C81084) / C80179;
    const double C3356 = (C80996 * C80952 * C80896) / C80179;
    const double C4117 =
        (C80843 + C80830 * C80862 + C80851 * ae + C80896 * C81182) / C80179;
    const double C124 =
        (3 * (C80860 + ae * C80861 + be * C80862 + C80830 * C80892) +
         ae * (2 * C80861 + C80830 * C80895 + C80880 * be) +
         be * (2 * C80862 + C80830 * C80896 + C80880 * ae) +
         C80830 *
             (2 * C80892 + ae * C80895 + be * C80896 +
              C80830 * (C80886 + ae * C80887 + be * C80888 +
                        C80830 * (ae * C80878 + be * C80881 +
                                  C80830 *
                                      (C80867 * C80868 +
                                       C80834 * bs[6] * std::pow(C80828, 6)) *
                                      C80182)))) /
        C80184;
    const double C865 =
        (ae * (2 * C80861 + C80830 * C80895 + C80880 * be) +
         C80952 * (2 * C81061 + be * C81062 + C80830 * C81079)) /
        C80184;
    const double C1471 =
        (ae * (2 * C80861 + C80830 * C80895 + C80880 * be) +
         C80996 * (2 * C81142 + be * C81143 + C80830 * C81160)) /
        C80184;
    const double C1956 =
        (C81050 + be * C81053 + C80830 * C81061 + ae * C80952 * C80895 +
         C80952 * (ae * C80895 + C80952 * C81079)) /
        C80184;
    const double C3621 =
        (ae * C80996 * C80895 + C80952 * C80996 * C81079) / C80184;
    const double C3867 =
        (ae * C80952 * C80895 + C80996 * C80952 * C81160) / C80184;
    const double C4689 =
        (C81131 + be * C81134 + C80830 * C81142 + ae * C80996 * C80895 +
         C80996 * (ae * C80895 + C80996 * C81160)) /
        C80184;
    const double C116 = (3 * (C80842 + C80830 * C80861 + C80851 * be) +
                         C80830 * (2 * C80861 + C80830 * C80895 + C80880 * be) +
                         (2 * C80851 + C80830 * C80880) * be) /
                        C80179;
    const double C698 =
        (C80952 * (2 * C80861 + C80830 * C80895 + C80880 * be)) / C80179;
    const double C1158 =
        (C80996 * (2 * C80861 + C80830 * C80895 + C80880 * be)) / C80179;
    const double C1661 =
        (C80842 + C80830 * C80861 + C80851 * be + C80895 * C81084) / C80179;
    const double C3355 = (C80996 * C80952 * C80895) / C80179;
    const double C4116 =
        (C80842 + C80830 * C80861 + C80851 * be + C80895 * C81182) / C80179;
    const double C80945 = C80830 * C80942;
    const double C81495 = C80952 * C80942;
    const double C2658 =
        (2 * (be * C80896 + C80952 * C80992) + be * (C80896 + C80942 * C81084) +
         C80952 * (C80992 + be * C80952 * C80942 +
                   C80952 * (be * C80942 +
                             C80952 * (C80982 + ae * C80830 * C80984 +
                                       C80830 * (ae * C80984 +
                                                 C80830 * std::pow(C80836, 7) *
                                                     bs[7] * C80958))))) /
        C80184;
    const double C3452 =
        (C80996 * (C80992 + be * C80952 * C80942 +
                   C80952 * (be * C80942 +
                             C80952 * (C80982 + ae * C80830 * C80984 +
                                       C80830 * (ae * C80984 +
                                                 C80830 * std::pow(C80836, 7) *
                                                     bs[7] * C80958))))) /
        C80184;
    const double C3538 =
        (be * (C80896 + C80942 * C81084) +
         C80996 *
             (C81036 + (C81026 + ae * C80830 * C81028 +
                        C80830 * (ae * C81028 + C80830 * std::pow(C80836, 7) *
                                                    bs[7] * C81002)) *
                           C81084)) /
        C80184;
    const double C5065 =
        (be * C80896 + C80952 * C80992 +
         (be * C80942 +
          C80952 * (C80982 + ae * C80830 * C80984 +
                    C80830 * (ae * C80984 +
                              C80830 * std::pow(C80836, 7) * bs[7] * C80958))) *
             C81182) /
        C80184;
    const double C5909 =
        (2 * (be * C80896 + C80996 * C81036) + be * (C80896 + C80942 * C81182) +
         C80996 * (C81036 + be * C80996 * C80942 +
                   C80996 * (be * C80942 +
                             C80996 * (C81026 + ae * C80830 * C81028 +
                                       C80830 * (ae * C81028 +
                                                 C80830 * std::pow(C80836, 7) *
                                                     bs[7] * C81002))))) /
        C80184;
    const double C2529 =
        (2 * C80952 * C80896 + C80952 * (C80896 + C80942 * C81084)) / C80179;
    const double C3350 = (C80996 * (C80896 + C80942 * C81084)) / C80179;
    const double C5692 =
        (2 * C80996 * C80896 + C80996 * (C80896 + C80942 * C81182)) / C80179;
    const double C81728 = C80952 * C81726;
    const double C82097 = C80996 * C82095;
    const double C81639 = C81637 + C81630;
    const double C81970 = C81968 + C81964;
    const double C81638 = C81636 + C81627;
    const double C81969 = C81967 + C81961;
    const double C80944 = C80830 * C80941;
    const double C81510 = C80952 * C80941;
    const double C1668 =
        (2 * (ae * (C80855 + C80878 * C81084) +
              be * (C80856 + C80881 * C81084) + C80830 * C81313) +
         ae * (C80895 + C80941 * C81084) + be * (C80896 + C80942 * C81084) +
         C80830 * (C81313 + ae * (C80887 + C80931 * C81084) +
                   be * (C80888 + C80933 * C81084) +
                   C80830 * (ae * (C80878 + C80919 * C81084) +
                             be * (C80881 + C80922 * C81084) +
                             C80830 * (C80930 +
                                       (C80903 * C80904 +
                                        C80834 * bs[7] * std::pow(C80836, 7)) *
                                           C80182 * C81084)))) /
        C80184;
    const double C2826 =
        (2 * (ae * C80895 + C80952 * C81079) + ae * (C80895 + C80941 * C81084) +
         C80952 * (C81079 + ae * C80952 * C80941 +
                   C80952 * (ae * C80941 +
                             C80952 * (C81069 + be * C80830 * C81071 +
                                       C80830 * (be * C81071 +
                                                 C80830 * std::pow(C80836, 7) *
                                                     bs[7] * C81045))))) /
        C80184;
    const double C3624 =
        (C80996 * C81079 + ae * C80996 * C80952 * C80941 +
         C80952 * (ae * C80996 * C80941 +
                   C80952 * C80996 *
                       (C81069 + be * C80830 * C81071 +
                        C80830 * (be * C81071 + C80830 * std::pow(C80836, 7) *
                                                    bs[7] * C81045)))) /
        C80184;
    const double C3870 =
        (ae * (C80895 + C80941 * C81084) +
         C80996 *
             (C81160 + (C81150 + be * C80830 * C81152 +
                        C80830 * (be * C81152 + C80830 * std::pow(C80836, 7) *
                                                    bs[7] * C81126)) *
                           C81084)) /
        C80184;
    const double C4123 =
        (2 * (ae * (C80855 + C80878 * C81182) +
              be * (C80856 + C80881 * C81182) + C80830 * C81451) +
         ae * (C80895 + C80941 * C81182) + be * (C80896 + C80942 * C81182) +
         C80830 * (C81451 + ae * (C80887 + C80931 * C81182) +
                   be * (C80888 + C80933 * C81182) +
                   C80830 * (ae * (C80878 + C80919 * C81182) +
                             be * (C80881 + C80922 * C81182) +
                             C80830 * (C80930 +
                                       (C80903 * C80904 +
                                        C80834 * bs[7] * std::pow(C80836, 7)) *
                                           C80182 * C81182)))) /
        C80184;
    const double C5225 =
        (ae * (C80895 + C80941 * C81182) +
         C80952 *
             (C81079 + (C81069 + be * C80830 * C81071 +
                        C80830 * (be * C81071 + C80830 * std::pow(C80836, 7) *
                                                    bs[7] * C81045)) *
                           C81182)) /
        C80184;
    const double C6267 =
        (2 * (ae * C80895 + C80996 * C81160) + ae * (C80895 + C80941 * C81182) +
         C80996 * (C81160 + ae * C80996 * C80941 +
                   C80996 * (ae * C80941 +
                             C80996 * (C81150 + be * C80830 * C81152 +
                                       C80830 * (be * C81152 +
                                                 C80830 * std::pow(C80836, 7) *
                                                     bs[7] * C81126))))) /
        C80184;
    const double C2528 =
        (2 * C80952 * C80895 + C80952 * (C80895 + C80941 * C81084)) / C80179;
    const double C3349 = (C80996 * (C80895 + C80941 * C81084)) / C80179;
    const double C5691 =
        (2 * C80996 * C80895 + C80996 * (C80895 + C80941 * C81182)) / C80179;
    const double C81727 = C80952 * C81725;
    const double C82096 = C80996 * C82094;
    const double C80943 = C80917 + C80940;
    const double C707 =
        (2 * (ae * C80952 * C80855 + be * C80952 * C80856 + C80830 * C81210) +
         ae * C80952 * C80895 + be * C80952 * C80896 +
         C80830 * (C81210 + ae * C80952 * C80887 + be * C80952 * C80888 +
                   C80830 * C81208)) /
        C80184;
    const double C1167 =
        (2 * (ae * C80996 * C80855 + be * C80996 * C80856 + C80830 * C81264) +
         ae * C80996 * C80895 + be * C80996 * C80896 +
         C80830 * (C81264 + ae * C80996 * C80887 + be * C80996 * C80888 +
                   C80830 * C81262)) /
        C80184;
    const double C19760 = C82533 * C2535;
    const double C40511 = C82533 * C2535;
    const double C22013 = C82533 * C3362;
    const double C50535 = C82533 * C3362;
    const double C15847 = C82523 * C15413;
    const double C24436 = C82523 * C16310;
    const double C17465 = C82523 * C16751;
    const double C35388 = C82533 * C5698;
    const double C58295 = C82533 * C5698;
    const double C30848 = C82523 * C30028;
    const double C6838 = C82639 * C910;
    const double C38213 = C82639 * C910;
    const double C8769 = C82581 * C1370;
    const double C2063 = C82893 * C2037;
    const double C13615 = C82893 * C2037;
    const double C45016 = C44659 * C2037;
    const double C10876 = C82639 * C3700;
    const double C47264 = C82639 * C3700;
    const double C4507 = C82581 * C4489;
    const double C37543 = C82639 * C18624;
    const double C72514 = C82639 * C18624;
    const double C31055 = C82581 * C30215;
    const double C7143 = C82592 * C1103;
    const double C9076 = C82679 * C1563;
    const double C52918 = C82679 * C1563;
    const double C2435 = C82592 * C2415;
    const double C11312 = C82679 * C4026;
    const double C59749 = C82679 * C4026;
    const double C4882 = C82896 * C4856;
    const double C26381 = C82896 * C4856;
    const double C62254 = C61595 * C4856;
    const double C24994 = C82679 * C16670;
    const double C70272 = C82679 * C16670;
    const double C18169 = C82896 * C17367;
    const double C29213 = C82896 * C17367;
    const double C79448 = C61595 * C17367;
    const double C82023 = C82021 + C82014;
    const double C82022 = C82020 + C82011;
    const double C395 = C391 - C386;
    const double C8771 = C8770 - C8768;
    const double C4515 = C4511 - C4506;
    const double C16625 =
        (ae * (2 * C81375 + C80952 * C81616 + C81609 * be) +
         C80996 * (2 * C81657 + be * C81658 + C80952 * C81760)) /
        C80184;
    const double C17291 =
        (C81170 + be * C81522 + C80952 * C81657 + ae * C80996 * C81616 +
         C80996 * (ae * C81616 + C80996 * C81760)) /
        C80184;
    const double C18900 =
        (2 * (ae * C81616 + C80996 * C81760) + ae * (C81616 + C81725 * C81182) +
         C80996 * (C81760 + ae * C80996 * C81725 +
                   C80996 * (ae * C81725 +
                             C80996 * (C81176 + be * C80952 * C81152 +
                                       C80952 * (be * C81152 +
                                                 C80952 * std::pow(C80836, 7) *
                                                     bs[7] * C81167))))) /
        C80184;
    const double C15462 =
        (3 * (C80959 + C80952 * C81375 + C81373 * be) +
         C80952 * (2 * C81375 + C80952 * C81616 + C81609 * be) +
         (2 * C81373 + C80952 * C81609) * be) /
        C80179;
    const double C16353 =
        (C80996 * (2 * C81375 + C80952 * C81616 + C81609 * be)) / C80179;
    const double C16827 =
        (C80959 + C80952 * C81375 + C81373 * be + C81616 * C81182) / C80179;
    const double C18358 =
        (2 * C80996 * C81616 + C80996 * (C81616 + C81725 * C81182)) / C80179;
    const double C81721 = C81714 + C81715;
    const double C31059 = C31057 - C31054;
    const double C638 = C634 - C629;
    const double C7145 = C7144 - C7142;
    const double C2443 = C2439 - C2434;
    const double C16259 = C16257 - C16254;
    const double C82091 = C82081 + C82088;
    const double C30663 =
        (ae *
             (3 * C81948 +
              C80996 * (2 * C81794 +
                        C80996 * (C81015 + C80996 * (C80996 * C81028 + C80912) +
                                  C80996 * C80902 * be) +
                        C81986 * be) +
              (2 * C81939 + C80996 * C81986) * be) +
         C80952 * (3 * C81835 + be * (2 * C81779 + C80996 * C81987) +
                   C80996 * (2 * C81795 + be * C81987 +
                             C80996 * (C81116 + be * C80996 * C81071 +
                                       C80996 * (be * C81071 +
                                                 C80996 * std::pow(C80836, 7) *
                                                     bs[7] * C81107))))) /
        C80184;
    const double C30123 =
        (3 * (C81003 + C80996 * C81563 + C81561 * be) +
         C80996 * (2 * C81563 + C80996 * C81948 + C81945 * be) +
         (2 * C81561 + C80996 * C81945) * be) /
        C80179;
    const double C15605 =
        (3 * (C81089 + ae * C81375 + be * C81376 + C80952 * C81606) +
         ae * (2 * C81375 + C80952 * C81616 + C81609 * be) +
         be * (2 * C81376 + C80952 * C81617 + C81609 * ae) +
         C80952 * (2 * C81606 + ae * C81616 + be * C81617 +
                   C80952 * (C81094 + ae * C81607 + be * C81610 +
                             C80952 * (C80978 + C81065 + C80952 * C81099)))) /
        C80184;
    const double C16492 =
        (2 * (ae * C80996 * C80964 + be * C80996 * C81051 + C80952 * C81787) +
         ae * C80996 * C81616 + be * C80996 * C81617 +
         C80952 * (C81787 + ae * C80996 * C81607 + be * C80996 * C81610 +
                   C80952 * C81785)) /
        C80184;
    const double C17823 =
        (2 * (ae * (C80964 + C80971 * C81182) +
              be * (C81051 + C81058 * C81182) + C80952 * C81831) +
         ae * (C81616 + C81725 * C81182) + be * (C81617 + C81726 * C81182) +
         C80952 * (C81831 + ae * (C81607 + C81709 * C81182) +
                   be * (C81610 + C81712 * C81182) +
                   C80952 * (ae * (C80971 + C80984 * C81182) +
                             be * (C81058 + C81071 * C81182) +
                             C80952 * (C81099 +
                                       (C80903 * C80904 +
                                        C81084 * bs[7] * std::pow(C80836, 7)) *
                                           C80182 * C81182)))) /
        C80184;
    const double C15554 =
        (3 * (C81046 + C80952 * C81376 + C81373 * ae) +
         C80952 * (2 * C81376 + C80952 * C81617 + C81609 * ae) +
         (2 * C81373 + C80952 * C81609) * ae) /
        C80179;
    const double C16445 =
        (C80996 * (2 * C81376 + C80952 * C81617 + C81609 * ae)) / C80179;
    const double C16983 =
        (C81046 + C80952 * C81376 + C81373 * ae + C81617 * C81182) / C80179;
    const double C18538 =
        (2 * C80996 * C81617 + C80996 * (C81617 + C81726 * C81182)) / C80179;
    const double C4518 = C4514 + C4503;
    const double C34414 = C34413 + C34411;
    const double C6097 = C4517 * C82885;
    const double C27504 = C4517 * C82885;
    const double C63344 = C4517 * C44656;
    const double C31062 = C31060 * C82523;
    const double C35671 = C31060 * C82844;
    const double C58578 = C31060 * C39819;
    const double C30398 =
        (3 * (C81187 + ae * C81563 + be * C81564 + C80996 * C81942) +
         ae * (2 * C81563 + C80996 * C81948 + C81945 * be) +
         be * (2 * C81564 + C80996 * C81951 + C81945 * ae) +
         C80996 * (2 * C81942 + ae * C81948 + be * C81951 +
                   C80996 * (C81192 + C81796 + be * C81946 +
                             C80996 * (C81022 + C81146 + C80996 * C81197)))) /
        C80184;
    const double C30303 =
        (3 * (C81127 + C80996 * C81564 + C81561 * ae) +
         C80996 * (2 * C81564 + C80996 * C81951 + C81945 * ae) +
         (2 * C81561 + C80996 * C81945) * ae) /
        C80179;
    const double C19669 = C19668 + C19666;
    const double C2450 = C2446 * C82916;
    const double C7138 = C2446 * C82639;
    const double C13946 = C2446 * C13257;
    const double C38511 = C2446 * C82639;
    const double C45347 = C2446 * C82642;
    const double C8540 = C82581 * C1221;
    const double C4221 = C82581 * C4204;
    const double C25147 = C82871 * C16355;
    const double C70425 = C82871 * C16355;
    const double C18384 = C82893 * C16829;
    const double C29402 = C82893 * C16829;
    const double C79616 = C44659 * C16829;
    const double C9995 = C82862 * C1325;
    const double C53837 = C82862 * C1325;
    const double C6013 = C82885 * C4411;
    const double C27426 = C82885 * C4411;
    const double C63266 = C44656 * C4411;
    const double C6679 = C82592 * C813;
    const double C1875 = C82592 * C1858;
    const double C36968 = C82878 * C18741;
    const double C71941 = C82878 * C18741;
    const double C7660 = C82862 * C1011;
    const double C39026 = C82862 * C1011;
    const double C3100 = C82885 * C2247;
    const double C14542 = C82885 * C2247;
    const double C45943 = C44656 * C2247;
    const double C80222 = C80218 / C80179;
    const double C7455 = C6516 * C860;
    const double C7447 = C6516 * C692;
    const double C7661 = C6516 * C1006;
    const double C9996 = C6516 * C1320;
    const double C9988 = C6516 * C1152;
    const double C10206 = C6516 * C1466;
    const double C38821 = C37895 * C860;
    const double C38813 = C37895 * C692;
    const double C39027 = C37895 * C1006;
    const double C53838 = C37895 * C1320;
    const double C53830 = C37895 * C1152;
    const double C54048 = C37895 * C1466;
    const double C80221 = C80217 / C80179;
    const double C80253 = C80248 / C80191;
    const double C80252 = C80177 * C80248;
    const double C101 = (-C80248 / C80179) / (4 * C80184 * std::pow(C80185, 2));
    const double C1652 = (-C80248 / C80179) / C80283;
    const double C6517 = (-C80248 / C80179) / (4 * C80237);
    const double C13264 = (-C80248 / C80179) / C80283;
    const double C15406 = -C80248 / C80179;
    const double C19064 = (-C80248 / C80179) / C80185;
    const double C37896 = (-C80248 / C80179) / (4 * C80237);
    const double C39828 = (-C80248 / C80179) / C80185;
    const double C44665 = (-C80248 / C80179) / C80283;
    const double C2552 = C1647 * C1658;
    const double C2550 = C1647 * C1657;
    const double C2540 = C1647 * C705;
    const double C2538 = C1647 * C704;
    const double C2847 = C1647 * C1950;
    const double C2841 = C1647 * C1653;
    const double C2835 = C1647 * C857;
    const double C2829 = C1647 * C695;
    const double C3097 = C1647 * C2241;
    const double C3091 = C1647 * C1003;
    const double C5715 = C1647 * C4113;
    const double C5713 = C1647 * C4112;
    const double C5703 = C1647 * C1165;
    const double C5701 = C1647 * C1164;
    const double C6010 = C1647 * C4405;
    const double C6004 = C1647 * C4108;
    const double C5998 = C1647 * C1317;
    const double C5992 = C1647 * C1155;
    const double C6276 = C1647 * C4683;
    const double C6270 = C1647 * C1463;
    const double C11425 = C1647 * C3360;
    const double C11423 = C1647 * C3359;
    const double C11753 = C1647 * C3613;
    const double C11747 = C1647 * C3348;
    const double C12057 = C1647 * C3859;
    const double C2556 = C1649 * C1660;
    const double C2554 = C1649 * C1659;
    const double C2544 = C1649 * C703;
    const double C2542 = C1649 * C702;
    const double C2849 = C1649 * C1951;
    const double C2843 = C1649 * C1654;
    const double C2837 = C1649 * C858;
    const double C2831 = C1649 * C694;
    const double C3099 = C1649 * C2242;
    const double C3093 = C1649 * C1004;
    const double C5719 = C1649 * C4115;
    const double C5717 = C1649 * C4114;
    const double C5707 = C1649 * C1163;
    const double C5705 = C1649 * C1162;
    const double C6012 = C1649 * C4406;
    const double C6006 = C1649 * C4109;
    const double C6000 = C1649 * C1318;
    const double C5994 = C1649 * C1154;
    const double C6278 = C1649 * C4684;
    const double C6272 = C1649 * C1464;
    const double C11429 = C1649 * C3358;
    const double C11427 = C1649 * C3357;
    const double C11755 = C1649 * C3614;
    const double C11749 = C1649 * C3347;
    const double C12059 = C1649 * C3860;
    const double C40506 = C39825 * C2533;
    const double C40504 = C39825 * C2532;
    const double C40498 = C39825 * C1658;
    const double C40496 = C39825 * C1657;
    const double C40490 = C39825 * C705;
    const double C40488 = C39825 * C704;
    const double C40749 = C39825 * C2821;
    const double C40745 = C39825 * C2527;
    const double C40741 = C39825 * C1950;
    const double C40737 = C39825 * C1653;
    const double C40733 = C39825 * C857;
    const double C40729 = C39825 * C695;
    const double C40959 = C39825 * C3083;
    const double C40955 = C39825 * C2241;
    const double C40951 = C39825 * C1003;
    const double C42769 = C39825 * C4982;
    const double C42767 = C39825 * C4981;
    const double C42761 = C39825 * C3360;
    const double C42759 = C39825 * C3359;
    const double C43094 = C39825 * C5220;
    const double C43090 = C39825 * C4976;
    const double C43086 = C39825 * C3613;
    const double C43082 = C39825 * C3348;
    const double C43396 = C39825 * C5454;
    const double C43392 = C39825 * C3859;
    const double C43703 = C39825 * C4113;
    const double C43701 = C39825 * C4112;
    const double C43695 = C39825 * C1165;
    const double C43693 = C39825 * C1164;
    const double C44044 = C39825 * C4405;
    const double C44040 = C39825 * C4108;
    const double C44036 = C39825 * C1317;
    const double C44032 = C39825 * C1155;
    const double C44374 = C39825 * C4683;
    const double C44370 = C39825 * C1463;
    const double C50530 = C39825 * C3354;
    const double C50528 = C39825 * C3353;
    const double C50841 = C39825 * C3616;
    const double C50837 = C39825 * C3345;
    const double C51139 = C39825 * C3862;
    const double C58290 = C39825 * C5696;
    const double C58288 = C39825 * C5695;
    const double C58505 = C39825 * C5984;
    const double C58501 = C39825 * C5690;
    const double C58713 = C39825 * C6262;
    const double C82937 = C82880 + C82926;
    const double C6505 = C82910 - (C82536 * C82519) / C80179;
    const double C38591 = C82911 * C708;
    const double C38818 = C82911 * C864;
    const double C38810 = C82911 * C700;
    const double C39024 = C82911 * C1010;
    const double C53608 = C82911 * C1168;
    const double C53835 = C82911 * C1324;
    const double C53827 = C82911 * C1160;
    const double C53907 = C4517 * C82911;
    const double C54045 = C82911 * C1470;
    const double C84 = C82911 / C80185 - C82534 / C80285;
    const double C7225 = C6506 * C708;
    const double C7452 = C6506 * C864;
    const double C7444 = C6506 * C700;
    const double C7658 = C6506 * C1010;
    const double C9766 = C6506 * C1168;
    const double C9993 = C6506 * C1324;
    const double C9985 = C6506 * C1160;
    const double C10065 = C4517 * C6506;
    const double C10203 = C6506 * C1470;
    const double C82927 = C82883 + C82910;
    const double C80346 = C80306 * C80343;
    const double C80512 = C80343 / C80191;
    const double C2032 =
        (ae * -2 * C80329) / C80237 +
        (((C80306 * ((-4 * C80331) / C80179 - (C80306 * C80343) / C80179) *
           ae) /
              C80179 +
          2 * ((C80342 * ae) / C80179 - C80329 / C80191)) *
         ae) /
            C80179 -
        C80343 / C80191;
    const double C2034 = (-C80343 / C80179) / C80283;
    const double C6813 = (-C80343 / C80179) / C80185;
    const double C13590 = (-C80343 / C80179) / C80283;
    const double C15604 =
        (-C80343 / C80179) / (4 * C80184 * std::pow(C80185, 2));
    const double C19356 = (-C80343 / C80179) / (4 * C80237);
    const double C38188 = (-C80343 / C80179) / C80185;
    const double C40116 = (-C80343 / C80179) / (4 * C80237);
    const double C44991 = (-C80343 / C80179) / C80283;
    const double C80457 = C80449 / C80179;
    const double C6608 = C6584 * C115;
    const double C6604 = C6584 * C105;
    const double C6600 = C6584 * C113;
    const double C6596 = C6584 * C104;
    const double C6592 = C6584 * C111;
    const double C6588 = C6584 * C103;
    const double C6833 = C6584 * C313;
    const double C6831 = C6584 * C172;
    const double C6825 = C6584 * C312;
    const double C6823 = C6584 * C171;
    const double C6817 = C6584 * C311;
    const double C6815 = C6584 * C170;
    const double C7066 = C6584 * C500;
    const double C7062 = C6584 * C499;
    const double C7058 = C6584 * C498;
    const double C10548 = C6584 * C1161;
    const double C10544 = C6584 * C1153;
    const double C10540 = C6584 * C1163;
    const double C10536 = C6584 * C1154;
    const double C10871 = C6584 * C1319;
    const double C10869 = C6584 * C1215;
    const double C10863 = C6584 * C1318;
    const double C10861 = C6584 * C1214;
    const double C11196 = C6584 * C1465;
    const double C11192 = C6584 * C1464;
    const double C12473 = C6584 * C1165;
    const double C12469 = C6584 * C1155;
    const double C12772 = C6584 * C1317;
    const double C12770 = C6584 * C1213;
    const double C13079 = C6584 * C1463;
    const double C31446 = C6584 * C4115;
    const double C31442 = C6584 * C4109;
    const double C31757 = C6584 * C4406;
    const double C31755 = C6584 * C4199;
    const double C32070 = C6584 * C4684;
    const double C33321 = C6584 * C4113;
    const double C33317 = C6584 * C4108;
    const double C33633 = C6584 * C4405;
    const double C33631 = C6584 * C4198;
    const double C33948 = C6584 * C4683;
    const double C37335 = C6584 * C5696;
    const double C37331 = C6584 * C5690;
    const double C37538 = C6584 * C5984;
    const double C37536 = C6584 * C5816;
    const double C37749 = C6584 * C6262;
    const double C13362 = C13339 * C113;
    const double C13356 = C13339 * C104;
    const double C13350 = C13339 * C111;
    const double C13344 = C13339 * C103;
    const double C13606 = C13339 * C312;
    const double C13604 = C13339 * C171;
    const double C13594 = C13339 * C311;
    const double C13592 = C13339 * C170;
    const double C13863 = C13339 * C499;
    const double C13857 = C13339 * C498;
    const double C18381 = C13339 * C4113;
    const double C18375 = C13339 * C4108;
    const double C18369 = C13339 * C1165;
    const double C18363 = C13339 * C1155;
    const double C18640 = C13339 * C4405;
    const double C18638 = C13339 * C4198;
    const double C18628 = C13339 * C1317;
    const double C18626 = C13339 * C1213;
    const double C18909 = C13339 * C4683;
    const double C18903 = C13339 * C1463;
    const double C21156 = C13339 * C1163;
    const double C21150 = C13339 * C1154;
    const double C21465 = C13339 * C1318;
    const double C21463 = C13339 * C1214;
    const double C21783 = C13339 * C1464;
    const double C13364 = C13340 * C701;
    const double C13358 = C13340 * C693;
    const double C13352 = C13340 * C703;
    const double C13346 = C13340 * C694;
    const double C13610 = C13340 * C859;
    const double C13608 = C13340 * C755;
    const double C13598 = C13340 * C858;
    const double C13596 = C13340 * C754;
    const double C13865 = C13340 * C1005;
    const double C13859 = C13340 * C1004;
    const double C18383 = C13340 * C4982;
    const double C18377 = C13340 * C4976;
    const double C18371 = C13340 * C3360;
    const double C18365 = C13340 * C3348;
    const double C18644 = C13340 * C5220;
    const double C18642 = C13340 * C5060;
    const double C18632 = C13340 * C3613;
    const double C18630 = C13340 * C3441;
    const double C18911 = C13340 * C5454;
    const double C18905 = C13340 * C3859;
    const double C21158 = C13340 * C3358;
    const double C21152 = C13340 * C3347;
    const double C21469 = C13340 * C3614;
    const double C21467 = C13340 * C3443;
    const double C21785 = C13340 * C3860;
    const double C37987 = C37963 * C115;
    const double C37983 = C37963 * C105;
    const double C37979 = C37963 * C113;
    const double C37975 = C37963 * C104;
    const double C37971 = C37963 * C111;
    const double C37967 = C37963 * C103;
    const double C38208 = C37963 * C313;
    const double C38206 = C37963 * C172;
    const double C38200 = C37963 * C312;
    const double C38198 = C37963 * C171;
    const double C38192 = C37963 * C311;
    const double C38190 = C37963 * C170;
    const double C38439 = C37963 * C500;
    const double C38435 = C37963 * C499;
    const double C38431 = C37963 * C498;
    const double C41897 = C37963 * C4115;
    const double C41893 = C37963 * C4109;
    const double C41889 = C37963 * C1163;
    const double C41885 = C37963 * C1154;
    const double C42216 = C37963 * C4406;
    const double C42214 = C37963 * C4199;
    const double C42208 = C37963 * C1318;
    const double C42206 = C37963 * C1214;
    const double C42539 = C37963 * C4684;
    const double C42535 = C37963 * C1464;
    const double C43832 = C37963 * C4113;
    const double C43828 = C37963 * C4108;
    const double C43824 = C37963 * C1165;
    const double C43820 = C37963 * C1155;
    const double C44155 = C37963 * C4405;
    const double C44153 = C37963 * C4198;
    const double C44147 = C37963 * C1317;
    const double C44145 = C37963 * C1213;
    const double C44480 = C37963 * C4683;
    const double C44476 = C37963 * C1463;
    const double C46960 = C37963 * C1161;
    const double C46956 = C37963 * C1153;
    const double C47259 = C37963 * C1319;
    const double C47257 = C37963 * C1215;
    const double C47566 = C37963 * C1465;
    const double C72306 = C37963 * C5696;
    const double C72302 = C37963 * C5690;
    const double C72509 = C37963 * C5984;
    const double C72507 = C37963 * C5816;
    const double C72720 = C37963 * C6262;
    const double C80480 = C80475 / C80179;
    const double C19151 = C19134 * C2531;
    const double C19143 = C19134 * C2526;
    const double C19372 = C19134 * C2822;
    const double C19370 = C19134 * C2654;
    const double C19593 = C19134 * C3084;
    const double C25148 = C19134 * C16308;
    const double C25140 = C19134 * C16304;
    const double C25580 = C19134 * C16579;
    const double C39915 = C39898 * C2531;
    const double C39907 = C39898 * C2526;
    const double C40132 = C39898 * C2822;
    const double C40130 = C39898 * C2654;
    const double C40351 = C39898 * C3084;
    const double C70426 = C39898 * C16308;
    const double C70418 = C39898 * C16304;
    const double C70858 = C39898 * C16579;
    const double C82941 = C82897 + C82933;
    const double C19058 = C82920 - (C82642 * C82631) / C80179;
    const double C39912 = C82921 * C1751;
    const double C39904 = C82921 * C1747;
    const double C40129 = C82921 * C2036;
    const double C40348 = C82921 * C2324;
    const double C70423 = C82921 * C3448;
    const double C70415 = C82921 * C3442;
    const double C70636 = C82921 * C3703;
    const double C70855 = C82921 * C3946;
    const double C15403 = C82921 / C80185 - C82640 / C80285;
    const double C19148 = C19059 * C1751;
    const double C19140 = C19059 * C1747;
    const double C19369 = C19059 * C2036;
    const double C19590 = C19059 * C2324;
    const double C25145 = C19059 * C3448;
    const double C25137 = C19059 * C3442;
    const double C25358 = C19059 * C3703;
    const double C25577 = C19059 * C3946;
    const double C82934 = C82899 + C82920;
    const double C80372 = C80309 * C80369;
    const double C80662 = C80369 / C80191;
    const double C4851 =
        (ae * -2 * C80355) / C80237 +
        (((C80309 * ((-4 * C80357) / C80179 - (C80309 * C80369) / C80179) *
           ae) /
              C80179 +
          2 * ((C80368 * ae) / C80179 - C80355 / C80191)) *
         ae) /
            C80179 -
        C80369 / C80191;
    const double C4853 = (-C80369 / C80179) / C80283;
    const double C9051 = (-C80369 / C80179) / C80185;
    const double C26356 = (-C80369 / C80179) / C80283;
    const double C30397 =
        (-C80369 / C80179) / (4 * C80184 * std::pow(C80185, 2));
    const double C34691 = (-C80369 / C80179) / (4 * C80237);
    const double C52893 = (-C80369 / C80179) / C80185;
    const double C57598 = (-C80369 / C80179) / (4 * C80237);
    const double C62229 = (-C80369 / C80179) / C80283;
    const double C80607 = C80599 / C80179;
    const double C8631 = C8607 * C115;
    const double C8627 = C8607 * C105;
    const double C8623 = C8607 * C113;
    const double C8619 = C8607 * C104;
    const double C8615 = C8607 * C111;
    const double C8611 = C8607 * C103;
    const double C8848 = C8607 * C313;
    const double C8844 = C8607 * C312;
    const double C8840 = C8607 * C311;
    const double C9071 = C8607 * C500;
    const double C9069 = C8607 * C243;
    const double C9063 = C8607 * C499;
    const double C9061 = C8607 * C242;
    const double C9055 = C8607 * C498;
    const double C9053 = C8607 * C241;
    const double C10662 = C8607 * C701;
    const double C10658 = C8607 * C693;
    const double C10654 = C8607 * C703;
    const double C10650 = C8607 * C694;
    const double C10992 = C8607 * C859;
    const double C10988 = C8607 * C858;
    const double C11307 = C8607 * C1005;
    const double C11305 = C8607 * C807;
    const double C11299 = C8607 * C1004;
    const double C11297 = C8607 * C806;
    const double C11645 = C8607 * C705;
    const double C11641 = C8607 * C695;
    const double C11955 = C8607 * C857;
    const double C12260 = C8607 * C1003;
    const double C12258 = C8607 * C805;
    const double C21264 = C8607 * C1660;
    const double C21260 = C8607 * C1654;
    const double C21583 = C8607 * C1951;
    const double C21888 = C8607 * C2242;
    const double C21886 = C8607 * C1853;
    const double C22227 = C8607 * C1658;
    const double C22223 = C8607 * C1653;
    const double C22541 = C8607 * C1950;
    const double C22848 = C8607 * C2241;
    const double C22846 = C8607 * C1852;
    const double C24578 = C8607 * C2533;
    const double C24574 = C8607 * C2527;
    const double C24784 = C8607 * C2821;
    const double C24989 = C8607 * C3083;
    const double C24987 = C8607 * C2733;
    const double C25894 = C25871 * C113;
    const double C25888 = C25871 * C104;
    const double C25882 = C25871 * C111;
    const double C25876 = C25871 * C103;
    const double C26128 = C25871 * C312;
    const double C26122 = C25871 * C311;
    const double C26372 = C25871 * C499;
    const double C26370 = C25871 * C242;
    const double C26360 = C25871 * C498;
    const double C26358 = C25871 * C241;
    const double C28729 = C25871 * C1658;
    const double C28723 = C25871 * C1653;
    const double C28717 = C25871 * C705;
    const double C28711 = C25871 * C695;
    const double C28963 = C25871 * C1950;
    const double C28957 = C25871 * C857;
    const double C29204 = C25871 * C2241;
    const double C29202 = C25871 * C1852;
    const double C29192 = C25871 * C1003;
    const double C29190 = C25871 * C805;
    const double C31554 = C25871 * C703;
    const double C31548 = C25871 * C694;
    const double C31868 = C25871 * C858;
    const double C32173 = C25871 * C1004;
    const double C32171 = C25871 * C806;
    const double C25896 = C25872 * C1161;
    const double C25890 = C25872 * C1153;
    const double C25884 = C25872 * C1163;
    const double C25878 = C25872 * C1154;
    const double C26130 = C25872 * C1319;
    const double C26124 = C25872 * C1318;
    const double C26376 = C25872 * C1465;
    const double C26374 = C25872 * C1267;
    const double C26364 = C25872 * C1464;
    const double C26362 = C25872 * C1266;
    const double C28731 = C25872 * C3354;
    const double C28725 = C25872 * C3345;
    const double C28719 = C25872 * C3360;
    const double C28713 = C25872 * C3348;
    const double C28965 = C25872 * C3616;
    const double C28959 = C25872 * C3613;
    const double C29208 = C25872 * C3862;
    const double C29206 = C25872 * C3530;
    const double C29196 = C25872 * C3859;
    const double C29194 = C25872 * C3527;
    const double C31556 = C25872 * C3358;
    const double C31550 = C25872 * C3347;
    const double C31870 = C25872 * C3614;
    const double C32177 = C25872 * C3860;
    const double C32175 = C25872 * C3528;
    const double C52482 = C52458 * C115;
    const double C52478 = C52458 * C105;
    const double C52474 = C52458 * C113;
    const double C52470 = C52458 * C104;
    const double C52466 = C52458 * C111;
    const double C52462 = C52458 * C103;
    const double C52692 = C52458 * C313;
    const double C52688 = C52458 * C312;
    const double C52684 = C52458 * C311;
    const double C52913 = C52458 * C500;
    const double C52911 = C52458 * C243;
    const double C52905 = C52458 * C499;
    const double C52903 = C52458 * C242;
    const double C52897 = C52458 * C498;
    const double C52895 = C52458 * C241;
    const double C54500 = C52458 * C1660;
    const double C54496 = C52458 * C1654;
    const double C54492 = C52458 * C703;
    const double C54488 = C52458 * C694;
    const double C54823 = C52458 * C1951;
    const double C54819 = C52458 * C858;
    const double C55136 = C52458 * C2242;
    const double C55134 = C52458 * C1853;
    const double C55128 = C52458 * C1004;
    const double C55126 = C52458 * C806;
    const double C55461 = C52458 * C1658;
    const double C55457 = C52458 * C1653;
    const double C55453 = C52458 * C705;
    const double C55449 = C52458 * C695;
    const double C55763 = C52458 * C1950;
    const double C55759 = C52458 * C857;
    const double C56070 = C52458 * C2241;
    const double C56068 = C52458 * C1852;
    const double C56062 = C52458 * C1003;
    const double C56060 = C52458 * C805;
    const double C59147 = C52458 * C701;
    const double C59143 = C52458 * C693;
    const double C59445 = C52458 * C859;
    const double C59744 = C52458 * C1005;
    const double C59742 = C52458 * C807;
    const double C69862 = C52458 * C2533;
    const double C69858 = C52458 * C2527;
    const double C70064 = C52458 * C2821;
    const double C70267 = C52458 * C3083;
    const double C70265 = C52458 * C2733;
    const double C80630 = C80625 / C80179;
    const double C34275 = C34258 * C5694;
    const double C34267 = C34258 * C5689;
    const double C34488 = C34258 * C5985;
    const double C34707 = C34258 * C6263;
    const double C34705 = C34258 * C5905;
    const double C36759 = C34258 * C18266;
    const double C36751 = C34258 * C18262;
    const double C36969 = C34258 * C18537;
    const double C37184 = C34258 * C18817;
    const double C37182 = C34258 * C18459;
    const double C57191 = C57174 * C5694;
    const double C57183 = C57174 * C5689;
    const double C57397 = C57174 * C5985;
    const double C57614 = C57174 * C6263;
    const double C57612 = C57174 * C5905;
    const double C71736 = C57174 * C18266;
    const double C71728 = C57174 * C18262;
    const double C71942 = C57174 * C18537;
    const double C72155 = C57174 * C18817;
    const double C72153 = C57174 * C18459;
    const double C82942 = C82902 + C82935;
    const double C34116 = C82923 - (C82682 * C82671) / C80179;
    const double C57188 = C82924 * C4304;
    const double C57180 = C82924 * C4300;
    const double C57394 = C82924 * C4594;
    const double C57611 = C82924 * C4855;
    const double C71733 = C82924 * C5143;
    const double C71725 = C82924 * C5140;
    const double C71939 = C82924 * C5377;
    const double C72152 = C82924 * C5613;
    const double C30020 = C82924 / C80185 - C82680 / C80285;
    const double C34272 = C34117 * C4304;
    const double C34264 = C34117 * C4300;
    const double C34485 = C34117 * C4594;
    const double C34704 = C34117 * C4855;
    const double C36756 = C34117 * C5143;
    const double C36748 = C34117 * C5140;
    const double C36966 = C34117 * C5377;
    const double C37181 = C34117 * C5613;
    const double C82936 = C82904 + C82923;
    const double C2449 = C2445 * C82893;
    const double C13944 = C2445 * C82893;
    const double C19662 = C2445 * C19059;
    const double C40420 = C2445 * C82921;
    const double C45345 = C2445 * C44659;
    const double C6609 = C82639 * C761;
    const double C37988 = C82639 * C761;
    const double C8632 = C82679 * C1273;
    const double C52483 = C82679 * C1273;
    const double C1777 = C82893 * C1752;
    const double C13365 = C82893 * C1752;
    const double C44766 = C44659 * C1752;
    const double C10549 = C82639 * C3451;
    const double C46961 = C82639 * C3451;
    const double C10663 = C82679 * C3535;
    const double C59148 = C82679 * C3535;
    const double C4330 = C82896 * C4305;
    const double C25897 = C82896 * C4305;
    const double C61770 = C61595 * C4305;
    const double C197 = C168 * C117;
    const double C268 = C239 * C117;
    const double C6610 = C6585 * C699;
    const double C6680 = C239 * C699;
    const double C7228 = C6516 * C699;
    const double C37989 = C37964 * C699;
    const double C38594 = C37895 * C699;
    const double C8541 = C168 * C1159;
    const double C8633 = C8608 * C1159;
    const double C9769 = C6516 * C1159;
    const double C52484 = C52459 * C1159;
    const double C53611 = C37895 * C1159;
    const double C1778 = C1745 * C1662;
    const double C1876 = C239 * C1662;
    const double C2560 = C1651 * C1662;
    const double C13366 = C13341 * C1662;
    const double C14044 = C13263 * C1662;
    const double C44767 = C80495 * C1662;
    const double C45445 = C80280 * C1662;
    const double C10550 = C6585 * C3356;
    const double C10664 = C8608 * C3356;
    const double C11433 = C1651 * C3356;
    const double C46962 = C37964 * C3356;
    const double C47775 = C80280 * C3356;
    const double C59149 = C52459 * C3356;
    const double C67364 = C13263 * C3356;
    const double C4222 = C168 * C4117;
    const double C4331 = C4298 * C4117;
    const double C5723 = C1651 * C4117;
    const double C25898 = C25873 * C4117;
    const double C27162 = C13263 * C4117;
    const double C61771 = C80645 * C4117;
    const double C63023 = C80280 * C4117;
    const double C7454 = C82862 * C865;
    const double C38820 = C82862 * C865;
    const double C10205 = C82862 * C1471;
    const double C54047 = C82862 * C1471;
    const double C2850 = C82885 * C1956;
    const double C14308 = C82885 * C1956;
    const double C45709 = C44656 * C1956;
    const double C11756 = C82885 * C3621;
    const double C48090 = C44656 * C3621;
    const double C67679 = C82885 * C3621;
    const double C12060 = C82885 * C3867;
    const double C48390 = C44656 * C3867;
    const double C67979 = C82885 * C3867;
    const double C6279 = C82885 * C4689;
    const double C27666 = C82885 * C4689;
    const double C63500 = C44656 * C4689;
    const double C7226 = C6516 * C698;
    const double C7446 = C82862 * C698;
    const double C38592 = C37895 * C698;
    const double C38812 = C82862 * C698;
    const double C9767 = C6516 * C1158;
    const double C9987 = C82862 * C1158;
    const double C53609 = C37895 * C1158;
    const double C53829 = C82862 * C1158;
    const double C2558 = C1651 * C1661;
    const double C2844 = C82885 * C1661;
    const double C14042 = C13263 * C1661;
    const double C14302 = C82885 * C1661;
    const double C45443 = C80280 * C1661;
    const double C45703 = C44656 * C1661;
    const double C11431 = C1651 * C3355;
    const double C11750 = C82885 * C3355;
    const double C47773 = C80280 * C3355;
    const double C48084 = C44656 * C3355;
    const double C67362 = C13263 * C3355;
    const double C67673 = C82885 * C3355;
    const double C5721 = C1651 * C4116;
    const double C6007 = C82885 * C4116;
    const double C27160 = C13263 * C4116;
    const double C27420 = C82885 * C4116;
    const double C63021 = C80280 * C4116;
    const double C63260 = C44656 * C4116;
    const double C80947 = C80907 + C80945;
    const double C5145 =
        (C80952 * C81036 + be * C80996 * C81495 +
         C80996 * (be * C81495 +
                   C80996 * C80952 *
                       (C81026 + ae * C80830 * C81028 +
                        C80830 * (ae * C81028 + C80830 * std::pow(C80836, 7) *
                                                    bs[7] * C81002)))) /
        C80184;
    const double C4978 = (C80952 * C80896 + C81495 * C81182) / C80179;
    const double C81730 = C81705 + C81728;
    const double C82099 = C82078 + C82097;
    const double C15555 =
        (3 * (C81053 + C80952 * C81370 + C81367 * ae) +
         C80952 * (2 * C81370 + C80952 * C81639 + C81628 * ae) +
         (2 * C81367 + C80952 * C81628) * ae) /
        C80179;
    const double C16984 =
        (C81053 + C80952 * C81370 + C81367 * ae + C81639 * C81182) / C80179;
    const double C20614 =
        (C80996 * (2 * C81370 + C80952 * C81639 + C81628 * ae)) / C80179;
    const double C30304 =
        (3 * (C81134 + C80996 * C81558 + C81555 * ae) +
         C80996 * (2 * C81558 + C80996 * C81970 + C81962 * ae) +
         (2 * C81555 + C80996 * C81962) * ae) /
        C80179;
    const double C15606 =
        (3 * (C81365 + ae * C81369 + be * C81370 + C80952 * C81631) +
         ae * (2 * C81369 + C80952 * C81638 + C81628 * be) +
         be * (2 * C81370 + C80952 * C81639 + C81628 * ae) +
         C80952 *
             (2 * C81631 + ae * C81638 + be * C81639 +
              C80952 * (C81620 + ae * C81632 + be * C81633 +
                        C80952 * (ae * C81621 + be * C81624 +
                                  C80952 * C80830 *
                                      (C80903 * C80904 +
                                       C81084 * bs[7] * std::pow(C80836, 7)) *
                                      C80182)))) /
        C80184;
    const double C17292 =
        (C81386 + be * C81519 + C80952 * C81664 + ae * C80996 * C81638 +
         C80996 * (ae * C81638 +
                   C80996 * (C81660 + be * C80952 * C81661 +
                             C80952 * (be * C81661 + C80952 * C80830 *
                                                         std::pow(C80836, 7) *
                                                         bs[7] * C81167)))) /
        C80184;
    const double C20682 =
        (2 * (ae * C80996 * C80977 + be * C80996 * C81064 + C80952 * C81876) +
         ae * C80996 * C81638 + be * C80996 * C81639 +
         C80952 * (C81876 + ae * C80996 * C81632 + be * C80996 * C81633 +
                   C80952 * (ae * C80996 * C81621 + be * C80996 * C81624 +
                             C80952 * C80996 * C80830 *
                                 (C80903 * C80904 +
                                  C81084 * bs[7] * std::pow(C80836, 7)) *
                                 C80182))) /
        C80184;
    const double C20884 =
        (ae * (2 * C81369 + C80952 * C81638 + C81628 * be) +
         C80996 * (2 * C81664 + be * C81665 +
                   C80952 * (C81660 + be * C80952 * C81661 +
                             C80952 * (be * C81661 + C80952 * C80830 *
                                                         std::pow(C80836, 7) *
                                                         bs[7] * C81167)))) /
        C80184;
    const double C15463 =
        (3 * (C80966 + C80952 * C81369 + C81367 * be) +
         C80952 * (2 * C81369 + C80952 * C81638 + C81628 * be) +
         (2 * C81367 + C80952 * C81628) * be) /
        C80179;
    const double C16828 =
        (C80966 + C80952 * C81369 + C81367 * be + C81638 * C81182) / C80179;
    const double C20478 =
        (C80996 * (2 * C81369 + C80952 * C81638 + C81628 * be)) / C80179;
    const double C30399 =
        (3 * (C81390 + ae * C81557 + be * C81558 + C80996 * C81959) +
         ae * (2 * C81557 + C80996 * C81969 + C81962 * be) +
         be * (2 * C81558 + C80996 * C81970 + C81962 * ae) +
         C80996 *
             (2 * C81959 + ae * C81969 + be * C81970 +
              C80996 * (C81668 + ae * C81960 + be * C81963 +
                        C80996 * (ae * C81647 + be * C81661 +
                                  C80996 * C80830 *
                                      (C80903 * C80904 +
                                       C81182 * bs[7] * std::pow(C80836, 7)) *
                                      C80182)))) /
        C80184;
    const double C33742 =
        (ae * (2 * C81557 + C80996 * C81969 + C81962 * be) +
         C80952 * (2 * C81879 + be * C81910 +
                   C80996 * (C81646 + be * C80996 * C81624 +
                             C80996 * (be * C81624 + C80996 * C80830 *
                                                         std::pow(C80836, 7) *
                                                         bs[7] * C81107)))) /
        C80184;
    const double C30124 =
        (3 * (C81010 + C80996 * C81557 + C81555 * be) +
         C80996 * (2 * C81557 + C80996 * C81969 + C81962 * be) +
         (2 * C81555 + C80996 * C81962) * be) /
        C80179;
    const double C80946 = C80905 + C80944;
    const double C5459 =
        (C80952 * C81160 + ae * C80996 * C81510 +
         C80996 * (ae * C81510 +
                   C80996 * C80952 *
                       (C81150 + be * C80830 * C81152 +
                        C80830 * (be * C81152 + C80830 * std::pow(C80836, 7) *
                                                    bs[7] * C81126)))) /
        C80184;
    const double C7862 =
        (2 * (ae * C80996 * C81201 + be * C80996 * C81202 + C80830 * C81566) +
         ae * C80996 * C81510 + be * C80996 * C81495 +
         C80830 * (C81566 + ae * C80996 * C80952 * C80931 +
                   be * C80996 * C80952 * C80933 +
                   C80830 * (ae * C80996 * C80952 * C80919 +
                             be * C80996 * C80952 * C80922 +
                             C80830 * C80996 * C80952 *
                                 (C80903 * C80904 +
                                  C80834 * bs[7] * std::pow(C80836, 7)) *
                                 C80182))) /
        C80184;
    const double C4977 = (C80952 * C80895 + C81510 * C81182) / C80179;
    const double C81729 = C81700 + C81727;
    const double C82098 = C82072 + C82096;
    const double C7229 = C82862 * C707;
    const double C38595 = C82862 * C707;
    const double C9770 = C82862 * C1167;
    const double C53612 = C82862 * C1167;
    const double C30706 =
        (3 * (C81522 + C80996 * C81869 + C81866 * ae) +
         C80996 * (2 * C81869 + C80996 * C82023 + C82012 * ae) +
         (2 * C81866 + C80996 * C82012) * ae) /
        C80179;
    const double C30793 =
        (3 * (C81864 + ae * C81868 + be * C81869 + C80996 * C82015) +
         ae * (2 * C81868 + C80996 * C82022 + C82012 * be) +
         be * (2 * C81869 + C80996 * C82023 + C82012 * ae) +
         C80996 *
             (2 * C82015 + ae * C82022 + be * C82023 +
              C80996 * (C82004 + ae * C82016 + be * C82017 +
                        C80996 * (ae * C82005 + be * C82008 +
                                  C80996 * C80952 *
                                      (C80903 * C80904 +
                                       C81182 * bs[7] * std::pow(C80836, 7)) *
                                      C80182)))) /
        C80184;
    const double C30532 =
        (3 * (C81521 + C80996 * C81868 + C81866 * be) +
         C80996 * (2 * C81868 + C80996 * C82022 + C82012 * be) +
         (2 * C81866 + C80996 * C82012) * be) /
        C80179;
    const double C399 = C395 + C387;
    const double C8772 = C8771 + C8769;
    const double C4519 = C4515 + C4507;
    const double C25579 = C82871 * C16625;
    const double C70857 = C82871 * C16625;
    const double C18912 = C82893 * C17291;
    const double C29900 = C82893 * C17291;
    const double C80087 = C44659 * C17291;
    const double C25139 = C82871 * C16353;
    const double C25359 = C19134 * C16353;
    const double C70417 = C82871 * C16353;
    const double C70637 = C39898 * C16353;
    const double C18378 = C82893 * C16827;
    const double C18646 = C13341 * C16827;
    const double C29396 = C82893 * C16827;
    const double C29646 = C1745 * C16827;
    const double C79610 = C44659 * C16827;
    const double C79848 = C80495 * C16827;
    const double C31061 = C31059 + C31055;
    const double C642 = C638 + C630;
    const double C7146 = C7145 + C7143;
    const double C2447 = C2443 + C2435;
    const double C16261 = C16259 + C16255;
    const double C25362 = C82871 * C16492;
    const double C70640 = C82871 * C16492;
    const double C16019 = C15405 * C15554;
    const double C16109 = C239 * C15554;
    const double C24650 = C15405 * C16445;
    const double C24786 = C8608 * C16445;
    const double C25361 = C19134 * C16445;
    const double C70066 = C52459 * C16445;
    const double C70639 = C39898 * C16445;
    const double C17749 = C15405 * C16983;
    const double C17911 = C4298 * C16983;
    const double C18648 = C13341 * C16983;
    const double C28967 = C25873 * C16983;
    const double C29648 = C1745 * C16983;
    const double C79214 = C80645 * C16983;
    const double C79850 = C80495 * C16983;
    const double C6102 = C4518 * C1642;
    const double C27506 = C4518 * C82909;
    const double C35670 = C4518 * C82533;
    const double C58577 = C4518 * C82533;
    const double C63346 = C4518 * C82536;
    const double C35672 = C34414 * C82533;
    const double C58579 = C34414 * C82533;
    const double C31154 = C15405 * C30303;
    const double C31201 = C168 * C30303;
    const double C19670 = C19669 * C82871;
    const double C40421 = C19669 * C82871;
    const double C80224 = C80221 - C80200;
    const double C80256 = C80252 / C80191;
    const double C80255 = C80252 / C80179;
    const double C2559 = C1652 * C1655;
    const double C2547 = C1652 * C693;
    const double C5722 = C1652 * C4110;
    const double C5710 = C1652 * C1153;
    const double C11432 = C1652 * C3346;
    const double C7227 = C6517 * C692;
    const double C9768 = C6517 * C1152;
    const double C14043 = C13264 * C1655;
    const double C14031 = C13264 * C693;
    const double C27161 = C13264 * C4110;
    const double C27149 = C13264 * C1153;
    const double C67363 = C13264 * C3346;
    const double C15845 = C15406 * C15407;
    const double C15841 = C15406 * C2527;
    const double C15837 = C15406 * C1653;
    const double C15833 = C15406 * C695;
    const double C17463 = C15406 * C16745;
    const double C17459 = C15406 * C3345;
    const double C17454 = C15406 * C4976;
    const double C17450 = C15406 * C3348;
    const double C18275 = C15406 * C4108;
    const double C18271 = C15406 * C1155;
    const double C24434 = C15406 * C16304;
    const double C30846 = C15406 * C30022;
    const double C30842 = C15406 * C5690;
    const double C36605 = C15406 * C18262;
    const double C19758 = C19064 * C2526;
    const double C19750 = C19064 * C1654;
    const double C19742 = C19064 * C694;
    const double C22011 = C19064 * C3344;
    const double C22003 = C19064 * C3347;
    const double C22963 = C19064 * C1154;
    const double C32295 = C19064 * C4975;
    const double C33207 = C19064 * C4109;
    const double C35386 = C19064 * C5689;
    const double C38593 = C37896 * C692;
    const double C53610 = C37896 * C1152;
    const double C40509 = C39828 * C2526;
    const double C40501 = C39828 * C1654;
    const double C40493 = C39828 * C694;
    const double C42772 = C39828 * C4975;
    const double C42764 = C39828 * C3347;
    const double C43706 = C39828 * C4109;
    const double C43698 = C39828 * C1154;
    const double C50533 = C39828 * C3344;
    const double C58293 = C39828 * C5689;
    const double C45444 = C44665 * C1655;
    const double C45432 = C44665 * C693;
    const double C47774 = C44665 * C3346;
    const double C48695 = C44665 * C1153;
    const double C63022 = C44665 * C4110;
    const double C38583 = C82937 * C710;
    const double C38814 = C82937 * C862;
    const double C38806 = C82937 * C704;
    const double C39020 = C82937 * C1008;
    const double C53600 = C82937 * C1170;
    const double C53831 = C82937 * C1322;
    const double C53823 = C82937 * C1164;
    const double C53905 = C6108 * C82937;
    const double C54041 = C82937 * C1468;
    const double C81 =
        (C82925 + 2 * C82528) / C80185 - (C82937 * C82519) / C80179;
    const double C7221 = C6505 * C709;
    const double C7450 = C6505 * C863;
    const double C7442 = C6505 * C702;
    const double C7656 = C6505 * C1009;
    const double C9762 = C6505 * C1169;
    const double C9991 = C6505 * C1323;
    const double C9983 = C6505 * C1162;
    const double C10064 = C4516 * C6505;
    const double C10201 = C6505 * C1469;
    const double C38587 = C82927 * C709;
    const double C38816 = C82927 * C863;
    const double C38808 = C82927 * C702;
    const double C39022 = C82927 * C1009;
    const double C53604 = C82927 * C1169;
    const double C53833 = C82927 * C1323;
    const double C53825 = C82927 * C1162;
    const double C53906 = C4516 * C82927;
    const double C54043 = C82927 * C1469;
    const double C82 =
        (C82909 + 2 * C82536 + C82937) / C80185 - (C82927 * C82519) / C80179;
    const double C83 = (C82885 + C82533 / C80179 + C82927) / C80185 -
                       (C82911 * C82519) / C80179;
    const double C80514 = C80346 / C80191;
    const double C80510 = C80346 / C80179;
    const double C2033 =
        (((-4 * C80331) / C80179 - C80346 / C80179) * ae) / C80191 +
        ((2 * ((0 * ae) / C80179 - C80331 / C80184) - C80346 / C80191) * ae) /
            C80179;
    const double C6812 =
        (((-4 * C80331) / C80179 - C80346 / C80179) * ae) / C80179;
    const double C13588 =
        (-(be * -2 * C80329) / C80184) / C80185 -
        ((2 * ((-C80329 / C80179) / C80185 - (C80342 * be) / C80179) -
          (C80306 * ((-4 * C80331) / C80179 - C80346 / C80179) * be) / C80179) *
         be) /
            C80179 -
        C80343 / C80191;
    const double C13589 =
        (-(((-4 * C80331) / C80179 - C80346 / C80179) * be) / C80179) / C80185 -
        ((2 * ((-C80339 / C80179) / C80185 - (0 * be) / C80179) -
          C80346 / C80191) *
         be) /
            C80179;
    const double C2053 = C2032 * C104;
    const double C2041 = C2032 * C103;
    const double C29639 = C2032 * C4108;
    const double C29627 = C2032 * C1155;
    const double C54700 = C2032 * C1154;
    const double C2061 = C2034 * C1655;
    const double C2049 = C2034 * C1654;
    const double C29647 = C2034 * C16745;
    const double C29635 = C2034 * C3345;
    const double C54708 = C2034 * C3344;
    const double C6836 = C6813 * C692;
    const double C6828 = C6813 * C693;
    const double C6820 = C6813 * C694;
    const double C10874 = C6813 * C3346;
    const double C10866 = C6813 * C3347;
    const double C12775 = C6813 * C3348;
    const double C31760 = C6813 * C4975;
    const double C33636 = C6813 * C4976;
    const double C37541 = C6813 * C18262;
    const double C13613 = C13590 * C1655;
    const double C13601 = C13590 * C1654;
    const double C18647 = C13590 * C16745;
    const double C18635 = C13590 * C3345;
    const double C21472 = C13590 * C3344;
    const double C19371 = C19356 * C2526;
    const double C25360 = C19356 * C16304;
    const double C38211 = C38188 * C692;
    const double C38203 = C38188 * C693;
    const double C38195 = C38188 * C694;
    const double C42219 = C38188 * C4975;
    const double C42211 = C38188 * C3347;
    const double C44158 = C38188 * C4976;
    const double C44150 = C38188 * C3348;
    const double C47262 = C38188 * C3346;
    const double C72512 = C38188 * C18262;
    const double C40131 = C40116 * C2526;
    const double C70638 = C40116 * C16304;
    const double C45014 = C44991 * C1655;
    const double C45002 = C44991 * C1654;
    const double C50020 = C44991 * C3344;
    const double C51849 = C44991 * C3345;
    const double C79849 = C44991 * C16745;
    const double C80461 = C80457 - C80450;
    const double C39908 = C82941 * C176;
    const double C39900 = C82941 * C170;
    const double C40121 = C82941 * C366;
    const double C40344 = C82941 * C552;
    const double C40418 = C639 * C82941;
    const double C70419 = C82941 * C1218;
    const double C70411 = C82941 * C1213;
    const double C70628 = C82941 * C1373;
    const double C70851 = C82941 * C1515;
    const double C15400 =
        (C82931 + 2 * C82635) / C80185 - (C82941 * C82631) / C80179;
    const double C19146 = C19058 * C759;
    const double C19138 = C19058 * C754;
    const double C19365 = C19058 * C912;
    const double C19588 = C19058 * C1056;
    const double C19661 = C2444 * C19058;
    const double C25143 = C19058 * C3447;
    const double C25135 = C19058 * C3441;
    const double C25354 = C19058 * C3704;
    const double C25575 = C19058 * C3945;
    const double C39910 = C82934 * C759;
    const double C39902 = C82934 * C754;
    const double C40125 = C82934 * C912;
    const double C40346 = C82934 * C1056;
    const double C40419 = C2444 * C82934;
    const double C70421 = C82934 * C3447;
    const double C70413 = C82934 * C3441;
    const double C70632 = C82934 * C3704;
    const double C70853 = C82934 * C3945;
    const double C15401 =
        (C82916 + 2 * C82642 + C82941) / C80185 - (C82934 * C82631) / C80179;
    const double C15402 = (C82893 + C82639 / C80179 + C82934) / C80185 -
                          (C82921 * C82631) / C80179;
    const double C80664 = C80372 / C80191;
    const double C80660 = C80372 / C80179;
    const double C4852 =
        (((-4 * C80357) / C80179 - C80372 / C80179) * ae) / C80191 +
        ((2 * ((0 * ae) / C80179 - C80357 / C80184) - C80372 / C80191) * ae) /
            C80179;
    const double C9050 =
        (((-4 * C80357) / C80179 - C80372 / C80179) * ae) / C80179;
    const double C26354 =
        (-(be * -2 * C80355) / C80184) / C80185 -
        ((2 * ((-C80355 / C80179) / C80185 - (C80368 * be) / C80179) -
          (C80309 * ((-4 * C80357) / C80179 - C80372 / C80179) * be) / C80179) *
         be) /
            C80179 -
        C80369 / C80191;
    const double C26355 =
        (-(((-4 * C80357) / C80179 - C80372 / C80179) * be) / C80179) / C80185 -
        ((2 * ((-C80365 / C80179) / C80185 - (0 * be) / C80179) -
          C80372 / C80191) *
         be) /
            C80179;
    const double C4872 = C4851 * C104;
    const double C4860 = C4851 * C103;
    const double C18159 = C4851 * C1653;
    const double C18147 = C4851 * C695;
    const double C42641 = C4851 * C694;
    const double C4880 = C4853 * C4110;
    const double C4868 = C4853 * C4109;
    const double C18167 = C4853 * C16745;
    const double C18155 = C4853 * C4976;
    const double C42649 = C4853 * C4975;
    const double C9074 = C9051 * C1152;
    const double C9066 = C9051 * C1153;
    const double C9058 = C9051 * C1154;
    const double C11310 = C9051 * C3346;
    const double C11302 = C9051 * C3347;
    const double C12263 = C9051 * C3348;
    const double C21891 = C9051 * C3344;
    const double C22851 = C9051 * C3345;
    const double C24992 = C9051 * C16304;
    const double C26379 = C26356 * C4110;
    const double C26367 = C26356 * C4109;
    const double C29211 = C26356 * C16745;
    const double C29199 = C26356 * C4976;
    const double C32180 = C26356 * C4975;
    const double C34706 = C34691 * C5689;
    const double C37183 = C34691 * C18262;
    const double C52916 = C52893 * C1152;
    const double C52908 = C52893 * C1153;
    const double C52900 = C52893 * C1154;
    const double C55139 = C52893 * C3344;
    const double C55131 = C52893 * C3347;
    const double C56073 = C52893 * C3345;
    const double C56065 = C52893 * C3348;
    const double C59747 = C52893 * C3346;
    const double C70270 = C52893 * C16304;
    const double C57613 = C57598 * C5689;
    const double C72154 = C57598 * C18262;
    const double C62252 = C62229 * C4110;
    const double C62240 = C62229 * C4109;
    const double C64559 = C62229 * C4975;
    const double C65480 = C62229 * C4976;
    const double C79446 = C62229 * C16745;
    const double C80611 = C80607 - C80600;
    const double C57184 = C82942 * C247;
    const double C57176 = C82942 * C241;
    const double C57390 = C82942 * C442;
    const double C57603 = C82942 * C609;
    const double C71729 = C82942 * C810;
    const double C71721 = C82942 * C805;
    const double C71935 = C82942 * C956;
    const double C72144 = C82942 * C1106;
    const double C30017 =
        (C82932 + 2 * C82675) / C80185 - (C82942 * C82671) / C80179;
    const double C34270 = C34116 * C1271;
    const double C34262 = C34116 * C1266;
    const double C34483 = C34116 * C1417;
    const double C34700 = C34116 * C1565;
    const double C36754 = C34116 * C3533;
    const double C36746 = C34116 * C3527;
    const double C36964 = C34116 * C3779;
    const double C37177 = C34116 * C4030;
    const double C57186 = C82936 * C1271;
    const double C57178 = C82936 * C1266;
    const double C57392 = C82936 * C1417;
    const double C57607 = C82936 * C1565;
    const double C71731 = C82936 * C3533;
    const double C71723 = C82936 * C3527;
    const double C71937 = C82936 * C3779;
    const double C72148 = C82936 * C4030;
    const double C30018 =
        (C82918 + 2 * C82682 + C82942) / C80185 - (C82936 * C82671) / C80179;
    const double C30019 = (C82896 + C82679 / C80179 + C82936) / C80185 -
                          (C82924 * C82671) / C80179;
    const double C80949 = C80947 + C80929;
    const double C81732 = C81730 + C81720;
    const double C82101 = C82099 + C82080;
    const double C80948 = C80946 + C80926;
    const double C81731 = C81729 + C81717;
    const double C82100 = C82098 + C82075;
    const double C10066 = C8772 * C82862;
    const double C53908 = C8772 * C82862;
    const double C6103 = C4519 * C82885;
    const double C27507 = C4519 * C82885;
    const double C63347 = C4519 * C44656;
    const double C31063 = C31061 * C82523;
    const double C646 = C642 * C82581;
    const double C7147 = C7146 * C82639;
    const double C38513 = C7146 * C82639;
    const double C2451 = C2447 * C82893;
    const double C13947 = C2447 * C82893;
    const double C45348 = C2447 * C44659;
    const double C19755 = C80224 * C2533;
    const double C19753 = C80224 * C2532;
    const double C19747 = C80224 * C1658;
    const double C19745 = C80224 * C1657;
    const double C19739 = C80224 * C705;
    const double C19737 = C80224 * C704;
    const double C19998 = C80224 * C2821;
    const double C19994 = C80224 * C2527;
    const double C19990 = C80224 * C1950;
    const double C19986 = C80224 * C1653;
    const double C19982 = C80224 * C857;
    const double C19978 = C80224 * C695;
    const double C20208 = C80224 * C3083;
    const double C20204 = C80224 * C2241;
    const double C20200 = C80224 * C1003;
    const double C22008 = C80224 * C3354;
    const double C22006 = C80224 * C3353;
    const double C22000 = C80224 * C3360;
    const double C21998 = C80224 * C3359;
    const double C22341 = C80224 * C3616;
    const double C22337 = C80224 * C3345;
    const double C22333 = C80224 * C3613;
    const double C22329 = C80224 * C3348;
    const double C22647 = C80224 * C3862;
    const double C22643 = C80224 * C3859;
    const double C22960 = C80224 * C1165;
    const double C22958 = C80224 * C1164;
    const double C23271 = C80224 * C1317;
    const double C23267 = C80224 * C1155;
    const double C23569 = C80224 * C1463;
    const double C32292 = C80224 * C4982;
    const double C32290 = C80224 * C4981;
    const double C32603 = C80224 * C5220;
    const double C32599 = C80224 * C4976;
    const double C32901 = C80224 * C5454;
    const double C33204 = C80224 * C4113;
    const double C33202 = C80224 * C4112;
    const double C33529 = C80224 * C4405;
    const double C33525 = C80224 * C4108;
    const double C33845 = C80224 * C4683;
    const double C35383 = C80224 * C5696;
    const double C35381 = C80224 * C5695;
    const double C35598 = C80224 * C5984;
    const double C35594 = C80224 * C5690;
    const double C35806 = C80224 * C6262;
    const double C80227 = C80224 / C80185;
    const double C80226 = C80177 * C80224;
    const double C80243 = 2 * C80224;
    const double C80259 = C80244 - C80256;
    const double C80258 = C80247 - C80255;
    const double C2567 = C2558 - C2559;
    const double C2564 = C2546 - C2547;
    const double C5730 = C5721 - C5722;
    const double C5727 = C5709 - C5710;
    const double C11437 = C11431 - C11432;
    const double C7233 = C7226 - C7227;
    const double C9774 = C9767 - C9768;
    const double C14051 = C14042 - C14043;
    const double C14048 = C14030 - C14031;
    const double C27169 = C27160 - C27161;
    const double C27166 = C27148 - C27149;
    const double C67368 = C67362 - C67363;
    const double C15851 = C15844 - C15845;
    const double C15850 = C15840 - C15841;
    const double C15849 = C15836 - C15837;
    const double C15848 = C15832 - C15833;
    const double C17469 = C17462 - C17463;
    const double C17468 = C17458 - C17459;
    const double C17467 = C17453 - C17454;
    const double C17466 = C17449 - C17450;
    const double C18279 = C18274 - C18275;
    const double C18278 = C18270 - C18271;
    const double C24437 = C24433 - C24434;
    const double C30850 = C30845 - C30846;
    const double C30849 = C30841 - C30842;
    const double C36608 = C36604 - C36605;
    const double C19766 = C19757 - C19758;
    const double C19764 = C19749 - C19750;
    const double C19762 = C19741 - C19742;
    const double C22017 = C22010 - C22011;
    const double C22015 = C22002 - C22003;
    const double C22967 = C22962 - C22963;
    const double C32299 = C32294 - C32295;
    const double C33211 = C33206 - C33207;
    const double C35390 = C35385 - C35386;
    const double C38599 = C38592 - C38593;
    const double C53616 = C53609 - C53610;
    const double C40517 = C40508 - C40509;
    const double C40515 = C40500 - C40501;
    const double C40513 = C40492 - C40493;
    const double C42778 = C42771 - C42772;
    const double C42776 = C42763 - C42764;
    const double C43712 = C43705 - C43706;
    const double C43710 = C43697 - C43698;
    const double C50537 = C50532 - C50533;
    const double C58297 = C58292 - C58293;
    const double C45452 = C45443 - C45444;
    const double C45449 = C45431 - C45432;
    const double C47779 = C47773 - C47774;
    const double C48700 = C48694 - C48695;
    const double C63027 = C63021 - C63022;
    const double C80518 = C80513 - C80514;
    const double C80522 = C80517 - C80510;
    const double C2057 = C2033 * C693;
    const double C2045 = C2033 * C694;
    const double C29643 = C2033 * C4976;
    const double C29631 = C2033 * C3348;
    const double C54704 = C2033 * C3347;
    const double C6832 = C6812 * C105;
    const double C6824 = C6812 * C104;
    const double C6816 = C6812 * C103;
    const double C10870 = C6812 * C1153;
    const double C10862 = C6812 * C1154;
    const double C12771 = C6812 * C1155;
    const double C31756 = C6812 * C4109;
    const double C33632 = C6812 * C4108;
    const double C37537 = C6812 * C5690;
    const double C13605 = C13588 * C104;
    const double C13593 = C13588 * C103;
    const double C18639 = C13588 * C4108;
    const double C18627 = C13588 * C1155;
    const double C21464 = C13588 * C1154;
    const double C13609 = C13589 * C693;
    const double C13597 = C13589 * C694;
    const double C18643 = C13589 * C4976;
    const double C18631 = C13589 * C3348;
    const double C21468 = C13589 * C3347;
    const double C2067 = C2052 - C2053;
    const double C2064 = C2040 - C2041;
    const double C29653 = C29638 - C29639;
    const double C29650 = C29626 - C29627;
    const double C54711 = C54699 - C54700;
    const double C2069 = C2060 - C2061;
    const double C2066 = C2048 - C2049;
    const double C29655 = C29646 - C29647;
    const double C29652 = C29634 - C29635;
    const double C54713 = C54707 - C54708;
    const double C6844 = C6835 - C6836;
    const double C6842 = C6827 - C6828;
    const double C6840 = C6819 - C6820;
    const double C10880 = C10873 - C10874;
    const double C10878 = C10865 - C10866;
    const double C12779 = C12774 - C12775;
    const double C31764 = C31759 - C31760;
    const double C33640 = C33635 - C33636;
    const double C37545 = C37540 - C37541;
    const double C13621 = C13612 - C13613;
    const double C13618 = C13600 - C13601;
    const double C18655 = C18646 - C18647;
    const double C18652 = C18634 - C18635;
    const double C21477 = C21471 - C21472;
    const double C19377 = C19370 - C19371;
    const double C25366 = C25359 - C25360;
    const double C38219 = C38210 - C38211;
    const double C38217 = C38202 - C38203;
    const double C38215 = C38194 - C38195;
    const double C42225 = C42218 - C42219;
    const double C42223 = C42210 - C42211;
    const double C44164 = C44157 - C44158;
    const double C44162 = C44149 - C44150;
    const double C47266 = C47261 - C47262;
    const double C72516 = C72511 - C72512;
    const double C40137 = C40130 - C40131;
    const double C70644 = C70637 - C70638;
    const double C45022 = C45013 - C45014;
    const double C45019 = C45001 - C45002;
    const double C50025 = C50019 - C50020;
    const double C51854 = C51848 - C51849;
    const double C79854 = C79848 - C79849;
    const double C80466 = C80461 / C80185;
    const double C80465 = C80306 * C80461;
    const double C80511 = 2 * C80461;
    const double C80668 = C80663 - C80664;
    const double C80672 = C80667 - C80660;
    const double C4876 = C4852 * C1153;
    const double C4864 = C4852 * C1154;
    const double C18163 = C4852 * C3345;
    const double C18151 = C4852 * C3348;
    const double C42645 = C4852 * C3347;
    const double C9070 = C9050 * C105;
    const double C9062 = C9050 * C104;
    const double C9054 = C9050 * C103;
    const double C11306 = C9050 * C693;
    const double C11298 = C9050 * C694;
    const double C12259 = C9050 * C695;
    const double C21887 = C9050 * C1654;
    const double C22847 = C9050 * C1653;
    const double C24988 = C9050 * C2527;
    const double C26371 = C26354 * C104;
    const double C26359 = C26354 * C103;
    const double C29203 = C26354 * C1653;
    const double C29191 = C26354 * C695;
    const double C32172 = C26354 * C694;
    const double C26375 = C26355 * C1153;
    const double C26363 = C26355 * C1154;
    const double C29207 = C26355 * C3345;
    const double C29195 = C26355 * C3348;
    const double C32176 = C26355 * C3347;
    const double C4886 = C4871 - C4872;
    const double C4883 = C4859 - C4860;
    const double C18173 = C18158 - C18159;
    const double C18170 = C18146 - C18147;
    const double C42652 = C42640 - C42641;
    const double C4888 = C4879 - C4880;
    const double C4885 = C4867 - C4868;
    const double C18175 = C18166 - C18167;
    const double C18172 = C18154 - C18155;
    const double C42654 = C42648 - C42649;
    const double C9082 = C9073 - C9074;
    const double C9080 = C9065 - C9066;
    const double C9078 = C9057 - C9058;
    const double C11316 = C11309 - C11310;
    const double C11314 = C11301 - C11302;
    const double C12267 = C12262 - C12263;
    const double C21895 = C21890 - C21891;
    const double C22855 = C22850 - C22851;
    const double C24996 = C24991 - C24992;
    const double C26387 = C26378 - C26379;
    const double C26384 = C26366 - C26367;
    const double C29219 = C29210 - C29211;
    const double C29216 = C29198 - C29199;
    const double C32185 = C32179 - C32180;
    const double C34712 = C34705 - C34706;
    const double C37189 = C37182 - C37183;
    const double C52924 = C52915 - C52916;
    const double C52922 = C52907 - C52908;
    const double C52920 = C52899 - C52900;
    const double C55145 = C55138 - C55139;
    const double C55143 = C55130 - C55131;
    const double C56079 = C56072 - C56073;
    const double C56077 = C56064 - C56065;
    const double C59751 = C59746 - C59747;
    const double C70274 = C70269 - C70270;
    const double C57619 = C57612 - C57613;
    const double C72160 = C72153 - C72154;
    const double C62260 = C62251 - C62252;
    const double C62257 = C62239 - C62240;
    const double C64564 = C64558 - C64559;
    const double C65485 = C65479 - C65480;
    const double C79451 = C79445 - C79446;
    const double C80616 = C80611 / C80185;
    const double C80615 = C80309 * C80611;
    const double C80661 = 2 * C80611;
    const double C762 =
        (be * (3 * C80896 + C80830 * C80949 + C80932 * ae) +
         C80952 * (3 * C80992 + ae * C80993 +
                   C80830 * (2 * C80988 + ae * C80989 +
                             C80830 * (C80982 + ae * C80830 * C80984 +
                                       C80830 * (ae * C80984 +
                                                 C80830 * std::pow(C80836, 7) *
                                                     bs[7] * C80958))))) /
        C80184;
    const double C1274 =
        (be * (3 * C80896 + C80830 * C80949 + C80932 * ae) +
         C80996 * (3 * C81036 + ae * C81037 +
                   C80830 * (2 * C81032 + ae * C81033 +
                             C80830 * (C81026 + ae * C80830 * C81028 +
                                       C80830 * (ae * C81028 +
                                                 C80830 * std::pow(C80836, 7) *
                                                     bs[7] * C81002))))) /
        C80184;
    const double C1753 =
        (2 * C80974 + ae * C80975 + C80830 * C80992 + be * C80952 * C80949 +
         C80952 * (be * C80949 +
                   C80952 * (2 * C80988 + ae * C80989 +
                             C80830 * (C80982 + ae * C80830 * C80984 +
                                       C80830 * (ae * C80984 +
                                                 C80830 * std::pow(C80836, 7) *
                                                     bs[7] * C80958))))) /
        C80184;
    const double C4306 =
        (2 * C81018 + ae * C81019 + C80830 * C81036 + be * C80996 * C80949 +
         C80996 * (be * C80949 +
                   C80996 * (2 * C81032 + ae * C81033 +
                             C80830 * (C81026 + ae * C80830 * C81028 +
                                       C80830 * (ae * C81028 +
                                                 C80830 * std::pow(C80836, 7) *
                                                     bs[7] * C81002))))) /
        C80184;
    const double C7930 =
        (C80996 * (be * C80949 +
                   C80952 * (2 * C80988 + ae * C80989 +
                             C80830 * (C80982 + ae * C80830 * C80984 +
                                       C80830 * (ae * C80984 +
                                                 C80830 * std::pow(C80836, 7) *
                                                     bs[7] * C80958))))) /
        C80184;
    const double C7998 =
        (be * C80952 * C80949 +
         C80996 * C80952 *
             (2 * C81032 + ae * C81033 +
              C80830 * (C81026 + ae * C80830 * C81028 +
                        C80830 * (ae * C81028 + C80830 * std::pow(C80836, 7) *
                                                    bs[7] * C81002)))) /
        C80184;
    const double C119 = (4 * (2 * C80862 + C80830 * C80896 + C80880 * ae) +
                         C80830 * (3 * C80896 + C80830 * C80949 + C80932 * ae) +
                         (3 * C80880 + C80830 * C80932) * ae) /
                        C80179;
    const double C697 =
        (C80952 * (3 * C80896 + C80830 * C80949 + C80932 * ae)) / C80179;
    const double C1157 =
        (C80996 * (3 * C80896 + C80830 * C80949 + C80932 * ae)) / C80179;
    const double C1664 =
        (2 * C80862 + C80830 * C80896 + C80880 * ae + C80949 * C81084) / C80179;
    const double C4119 =
        (2 * C80862 + C80830 * C80896 + C80880 * ae + C80949 * C81182) / C80179;
    const double C7861 = (C80996 * C80952 * C80949) / C80179;
    const double C16001 =
        (4 * (2 * C81376 + C80952 * C81617 + C81609 * ae) +
         C80952 * (3 * C81617 + C80952 * C81732 + C81723 * ae) +
         (3 * C81609 + C80952 * C81723) * ae) /
        C80179;
    const double C16446 =
        (C80996 * (3 * C81617 + C80952 * C81732 + C81723 * ae)) / C80179;
    const double C17731 =
        (2 * C81376 + C80952 * C81617 + C81609 * ae + C81732 * C81182) / C80179;
    const double C31148 =
        (4 * (2 * C81564 + C80996 * C81951 + C81945 * ae) +
         C80996 * (3 * C81951 + C80996 * C82101 + C82085 * ae) +
         (3 * C81945 + C80996 * C82085) * ae) /
        C80179;
    const double C125 =
        (4 * (2 * C80892 + ae * C80895 + be * C80896 + C80830 * C80943) +
         ae * (3 * C80895 + C80830 * C80948 + C80932 * be) +
         be * (3 * C80896 + C80830 * C80949 + C80932 * ae) +
         C80830 * (3 * C80943 + ae * C80948 + be * C80949 +
                   C80830 * (2 * C80937 + ae * C80941 + be * C80942 +
                             C80830 * (C80930 + ae * C80931 + be * C80933 +
                                       C80830 * (ae * C80919 + be * C80922 +
                                                 C80830 *
                                                     (C80903 * C80904 +
                                                      C80834 * bs[7] *
                                                          std::pow(C80836, 7)) *
                                                     C80182))))) /
        C80184;
    const double C706 =
        (3 * (C80952 * C80886 + ae * C80952 * C80887 + be * C80952 * C80888 +
              C80830 * C81208) +
         ae * C80952 * C80948 + be * C80952 * C80949 +
         C80830 *
             (2 * C81208 + ae * C80952 * C80941 + be * C80952 * C80942 +
              C80830 * (C81203 + ae * C80952 * C80931 + be * C80952 * C80933 +
                        C80830 * (ae * C80952 * C80919 + be * C80952 * C80922 +
                                  C80830 * C80952 *
                                      (C80903 * C80904 +
                                       C80834 * bs[7] * std::pow(C80836, 7)) *
                                      C80182)))) /
        C80184;
    const double C866 =
        (ae * (3 * C80895 + C80830 * C80948 + C80932 * be) +
         C80952 * (3 * C81079 + be * C81080 +
                   C80830 * (2 * C81075 + be * C81076 +
                             C80830 * (C81069 + be * C80830 * C81071 +
                                       C80830 * (be * C81071 +
                                                 C80830 * std::pow(C80836, 7) *
                                                     bs[7] * C81045))))) /
        C80184;
    const double C1166 =
        (3 * (C80996 * C80886 + ae * C80996 * C80887 + be * C80996 * C80888 +
              C80830 * C81262) +
         ae * C80996 * C80948 + be * C80996 * C80949 +
         C80830 *
             (2 * C81262 + ae * C80996 * C80941 + be * C80996 * C80942 +
              C80830 * (C81257 + ae * C80996 * C80931 + be * C80996 * C80933 +
                        C80830 * (ae * C80996 * C80919 + be * C80996 * C80922 +
                                  C80830 * C80996 *
                                      (C80903 * C80904 +
                                       C80834 * bs[7] * std::pow(C80836, 7)) *
                                      C80182)))) /
        C80184;
    const double C1472 =
        (ae * (3 * C80895 + C80830 * C80948 + C80932 * be) +
         C80996 * (3 * C81160 + be * C81161 +
                   C80830 * (2 * C81156 + be * C81157 +
                             C80830 * (C81150 + be * C80830 * C81152 +
                                       C80830 * (be * C81152 +
                                                 C80830 * std::pow(C80836, 7) *
                                                     bs[7] * C81126))))) /
        C80184;
    const double C1957 =
        (2 * C81061 + be * C81062 + C80830 * C81079 + ae * C80952 * C80948 +
         C80952 * (ae * C80948 +
                   C80952 * (2 * C81075 + be * C81076 +
                             C80830 * (C81069 + be * C80830 * C81071 +
                                       C80830 * (be * C81071 +
                                                 C80830 * std::pow(C80836, 7) *
                                                     bs[7] * C81045))))) /
        C80184;
    const double C4690 =
        (2 * C81142 + be * C81143 + C80830 * C81160 + ae * C80996 * C80948 +
         C80996 * (ae * C80948 +
                   C80996 * (2 * C81156 + be * C81157 +
                             C80830 * (C81150 + be * C80830 * C81152 +
                                       C80830 * (be * C81152 +
                                                 C80830 * std::pow(C80836, 7) *
                                                     bs[7] * C81126))))) /
        C80184;
    const double C8066 =
        (ae * C80996 * C80948 +
         C80952 * C80996 *
             (2 * C81075 + be * C81076 +
              C80830 * (C81069 + be * C80830 * C81071 +
                        C80830 * (be * C81071 + C80830 * std::pow(C80836, 7) *
                                                    bs[7] * C81045)))) /
        C80184;
    const double C8268 =
        (ae * C80952 * C80948 +
         C80996 * C80952 *
             (2 * C81156 + be * C81157 +
              C80830 * (C81150 + be * C80830 * C81152 +
                        C80830 * (be * C81152 + C80830 * std::pow(C80836, 7) *
                                                    bs[7] * C81126)))) /
        C80184;
    const double C118 = (4 * (2 * C80861 + C80830 * C80895 + C80880 * be) +
                         C80830 * (3 * C80895 + C80830 * C80948 + C80932 * be) +
                         (3 * C80880 + C80830 * C80932) * be) /
                        C80179;
    const double C696 =
        (C80952 * (3 * C80895 + C80830 * C80948 + C80932 * be)) / C80179;
    const double C1156 =
        (C80996 * (3 * C80895 + C80830 * C80948 + C80932 * be)) / C80179;
    const double C1663 =
        (2 * C80861 + C80830 * C80895 + C80880 * be + C80948 * C81084) / C80179;
    const double C4118 =
        (2 * C80861 + C80830 * C80895 + C80880 * be + C80948 * C81182) / C80179;
    const double C7860 = (C80996 * C80952 * C80948) / C80179;
    const double C16061 =
        (4 * (2 * C81606 + ae * C81616 + be * C81617 + C80952 * C81721) +
         ae * (3 * C81616 + C80952 * C81731 + C81723 * be) +
         be * (3 * C81617 + C80952 * C81732 + C81723 * ae) +
         C80952 * (3 * C81721 + ae * C81731 + be * C81732 +
                   C80952 * (2 * C81708 + ae * C81725 + be * C81726 +
                             C80952 * (C81099 + ae * C81709 + be * C81712 +
                                       C80952 * (ae * C80984 + be * C81071 +
                                                 C80952 *
                                                     (C80903 * C80904 +
                                                      C81084 * bs[7] *
                                                          std::pow(C80836, 7)) *
                                                     C80182))))) /
        C80184;
    const double C16491 =
        (3 * (C80996 * C81094 + ae * C80996 * C81607 + be * C80996 * C81610 +
              C80952 * C81785) +
         ae * C80996 * C81731 + be * C80996 * C81732 +
         C80952 *
             (2 * C81785 + ae * C80996 * C81725 + be * C80996 * C81726 +
              C80952 * (C81780 + ae * C80996 * C81709 + be * C80996 * C81712 +
                        C80952 * (ae * C80996 * C80984 + be * C80996 * C81071 +
                                  C80952 * C80996 *
                                      (C80903 * C80904 +
                                       C81084 * bs[7] * std::pow(C80836, 7)) *
                                      C80182)))) /
        C80184;
    const double C16626 =
        (ae * (3 * C81616 + C80952 * C81731 + C81723 * be) +
         C80996 * (3 * C81760 + be * C81761 +
                   C80952 * (2 * C81754 + be * C81756 +
                             C80952 * (C81176 + be * C80952 * C81152 +
                                       C80952 * (be * C81152 +
                                                 C80952 * std::pow(C80836, 7) *
                                                     bs[7] * C81167))))) /
        C80184;
    const double C18069 =
        (2 * C81657 + be * C81658 + C80952 * C81760 + ae * C80996 * C81731 +
         C80996 * (ae * C81731 +
                   C80996 * (2 * C81754 + be * C81756 +
                             C80952 * (C81176 + be * C80952 * C81152 +
                                       C80952 * (be * C81152 +
                                                 C80952 * std::pow(C80836, 7) *
                                                     bs[7] * C81167))))) /
        C80184;
    const double C15905 =
        (4 * (2 * C81375 + C80952 * C81616 + C81609 * be) +
         C80952 * (3 * C81616 + C80952 * C81731 + C81723 * be) +
         (3 * C81609 + C80952 * C81723) * be) /
        C80179;
    const double C16354 =
        (C80996 * (3 * C81616 + C80952 * C81731 + C81723 * be)) / C80179;
    const double C17555 =
        (2 * C81375 + C80952 * C81616 + C81609 * be + C81731 * C81182) / C80179;
    const double C31243 =
        (4 * (2 * C81942 + ae * C81948 + be * C81951 + C80996 * C82091) +
         ae * (3 * C81948 + C80996 * C82100 + C82085 * be) +
         be * (3 * C81951 + C80996 * C82101 + C82085 * ae) +
         C80996 * (3 * C82091 + ae * C82100 + be * C82101 +
                   C80996 * (2 * C82082 + ae * C82094 + be * C82095 +
                             C80996 * (C81197 + ae * C82083 + be * C82086 +
                                       C80996 * (ae * C81028 + be * C81152 +
                                                 C80996 *
                                                     (C80903 * C80904 +
                                                      C81182 * bs[7] *
                                                          std::pow(C80836, 7)) *
                                                     C80182))))) /
        C80184;
    const double C30948 =
        (4 * (2 * C81563 + C80996 * C81948 + C81945 * be) +
         C80996 * (3 * C81948 + C80996 * C82100 + C82085 * be) +
         (3 * C81945 + C80996 * C82085) * be) /
        C80179;
    const double C80230 = C80227 - C80222;
    const double C13261 = C80227 + (C80213 * ae) / C80179;
    const double C80229 = C80226 + C82844;
    const double C80262 = C80259 * be;
    const double C80261 = C80258 * ae;
    const double C1648 = (-(be * C80239) / C80184) / C80185 -
                         ((2 * ((-C80187) / C80185 - (C80212 * be) / C80179) -
                           (C80177 * C80258 * be) / C80179) *
                          be) /
                             C80179 -
                         C80253;
    const double C1650 =
        (-(C80258 * be) / C80179) / C80185 -
        ((2 * ((-C80199 / C80179) / C80185 - (0 * be) / C80179) - C80256) *
         be) /
            C80179;
    const double C39826 = -(C80258 * be) / C80179;
    const double C2573 = C2567 - C2560;
    const double C2570 = C2564 - C2548;
    const double C5736 = C5730 - C5723;
    const double C5733 = C5727 - C5711;
    const double C11440 = C11437 - C11433;
    const double C7237 = C7233 - C7228;
    const double C9778 = C9774 - C9769;
    const double C14057 = C14051 - C14044;
    const double C14054 = C14048 - C14032;
    const double C27175 = C27169 - C27162;
    const double C27172 = C27166 - C27150;
    const double C67371 = C67368 - C67364;
    const double C15855 = C15851 - C15846;
    const double C15854 = C15850 - C15842;
    const double C15853 = C15849 - C15838;
    const double C15852 = C15848 - C15834;
    const double C17473 = C17469 - C17464;
    const double C17472 = C17468 - C17460;
    const double C17471 = C17467 - C17455;
    const double C17470 = C17466 - C17451;
    const double C18281 = C18279 - C18276;
    const double C18280 = C18278 - C18272;
    const double C24438 = C24437 - C24435;
    const double C30852 = C30850 - C30847;
    const double C30851 = C30849 - C30843;
    const double C36609 = C36608 - C36606;
    const double C19772 = C19766 - C19759;
    const double C19770 = C19764 - C19751;
    const double C19768 = C19762 - C19743;
    const double C22021 = C22017 - C22012;
    const double C22019 = C22015 - C22004;
    const double C22969 = C22967 - C22964;
    const double C32301 = C32299 - C32296;
    const double C33213 = C33211 - C33208;
    const double C35392 = C35390 - C35387;
    const double C38603 = C38599 - C38594;
    const double C53620 = C53616 - C53611;
    const double C40523 = C40517 - C40510;
    const double C40521 = C40515 - C40502;
    const double C40519 = C40513 - C40494;
    const double C42782 = C42778 - C42773;
    const double C42780 = C42776 - C42765;
    const double C43716 = C43712 - C43707;
    const double C43714 = C43710 - C43699;
    const double C50539 = C50537 - C50534;
    const double C58299 = C58297 - C58294;
    const double C45458 = C45452 - C45445;
    const double C45455 = C45449 - C45433;
    const double C47782 = C47779 - C47775;
    const double C48703 = C48700 - C48696;
    const double C63030 = C63027 - C63023;
    const double C80523 = C80518 * be;
    const double C80525 = C80522 * ae;
    const double C38187 = -(C80522 * be) / C80179;
    const double C2068 = C2056 - C2057;
    const double C2065 = C2044 - C2045;
    const double C29654 = C29642 - C29643;
    const double C29651 = C29630 - C29631;
    const double C54712 = C54703 - C54704;
    const double C6843 = C6831 - C6832;
    const double C6841 = C6823 - C6824;
    const double C6839 = C6815 - C6816;
    const double C10879 = C10869 - C10870;
    const double C10877 = C10861 - C10862;
    const double C12778 = C12770 - C12771;
    const double C31763 = C31755 - C31756;
    const double C33639 = C33631 - C33632;
    const double C37544 = C37536 - C37537;
    const double C13619 = C13604 - C13605;
    const double C13616 = C13592 - C13593;
    const double C18653 = C18638 - C18639;
    const double C18650 = C18626 - C18627;
    const double C21475 = C21463 - C21464;
    const double C13620 = C13608 - C13609;
    const double C13617 = C13596 - C13597;
    const double C18654 = C18642 - C18643;
    const double C18651 = C18630 - C18631;
    const double C21476 = C21467 - C21468;
    const double C2073 = C2067 - C2054;
    const double C2070 = C2064 - C2042;
    const double C29659 = C29653 - C29640;
    const double C29656 = C29650 - C29628;
    const double C54714 = C54711 - C54701;
    const double C2075 = C2069 - C2062;
    const double C2072 = C2066 - C2050;
    const double C29661 = C29655 - C29648;
    const double C29658 = C29652 - C29636;
    const double C54716 = C54713 - C54709;
    const double C6850 = C6844 - C6837;
    const double C6848 = C6842 - C6829;
    const double C6846 = C6840 - C6821;
    const double C10884 = C10880 - C10875;
    const double C10882 = C10878 - C10867;
    const double C12781 = C12779 - C12776;
    const double C31766 = C31764 - C31761;
    const double C33642 = C33640 - C33637;
    const double C37547 = C37545 - C37542;
    const double C13627 = C13621 - C13614;
    const double C13624 = C13618 - C13602;
    const double C18661 = C18655 - C18648;
    const double C18658 = C18652 - C18636;
    const double C21480 = C21477 - C21473;
    const double C19381 = C19377 - C19372;
    const double C25370 = C25366 - C25361;
    const double C38225 = C38219 - C38212;
    const double C38223 = C38217 - C38204;
    const double C38221 = C38215 - C38196;
    const double C42229 = C42225 - C42220;
    const double C42227 = C42223 - C42212;
    const double C44168 = C44164 - C44159;
    const double C44166 = C44162 - C44151;
    const double C47268 = C47266 - C47263;
    const double C72518 = C72516 - C72513;
    const double C40141 = C40137 - C40132;
    const double C70648 = C70644 - C70639;
    const double C45028 = C45022 - C45015;
    const double C45025 = C45019 - C45003;
    const double C50028 = C50025 - C50021;
    const double C51857 = C51854 - C51850;
    const double C79857 = C79854 - C79850;
    const double C80484 = C80466 - C80480;
    const double C80470 = C80465 + C82863;
    const double C80673 = C80668 * be;
    const double C80675 = C80672 * ae;
    const double C52892 = -(C80672 * be) / C80179;
    const double C4887 = C4875 - C4876;
    const double C4884 = C4863 - C4864;
    const double C18174 = C18162 - C18163;
    const double C18171 = C18150 - C18151;
    const double C42653 = C42644 - C42645;
    const double C9081 = C9069 - C9070;
    const double C9079 = C9061 - C9062;
    const double C9077 = C9053 - C9054;
    const double C11315 = C11305 - C11306;
    const double C11313 = C11297 - C11298;
    const double C12266 = C12258 - C12259;
    const double C21894 = C21886 - C21887;
    const double C22854 = C22846 - C22847;
    const double C24995 = C24987 - C24988;
    const double C26385 = C26370 - C26371;
    const double C26382 = C26358 - C26359;
    const double C29217 = C29202 - C29203;
    const double C29214 = C29190 - C29191;
    const double C32183 = C32171 - C32172;
    const double C26386 = C26374 - C26375;
    const double C26383 = C26362 - C26363;
    const double C29218 = C29206 - C29207;
    const double C29215 = C29194 - C29195;
    const double C32184 = C32175 - C32176;
    const double C4892 = C4886 - C4873;
    const double C4889 = C4883 - C4861;
    const double C18179 = C18173 - C18160;
    const double C18176 = C18170 - C18148;
    const double C42655 = C42652 - C42642;
    const double C4894 = C4888 - C4881;
    const double C4891 = C4885 - C4869;
    const double C18181 = C18175 - C18168;
    const double C18178 = C18172 - C18156;
    const double C42657 = C42654 - C42650;
    const double C9088 = C9082 - C9075;
    const double C9086 = C9080 - C9067;
    const double C9084 = C9078 - C9059;
    const double C11320 = C11316 - C11311;
    const double C11318 = C11314 - C11303;
    const double C12269 = C12267 - C12264;
    const double C21897 = C21895 - C21892;
    const double C22857 = C22855 - C22852;
    const double C24998 = C24996 - C24993;
    const double C26393 = C26387 - C26380;
    const double C26390 = C26384 - C26368;
    const double C29225 = C29219 - C29212;
    const double C29222 = C29216 - C29200;
    const double C32188 = C32185 - C32181;
    const double C34716 = C34712 - C34707;
    const double C37193 = C37189 - C37184;
    const double C52930 = C52924 - C52917;
    const double C52928 = C52922 - C52909;
    const double C52926 = C52920 - C52901;
    const double C55149 = C55145 - C55140;
    const double C55147 = C55143 - C55132;
    const double C56083 = C56079 - C56074;
    const double C56081 = C56077 - C56066;
    const double C59753 = C59751 - C59748;
    const double C70276 = C70274 - C70271;
    const double C57623 = C57619 - C57614;
    const double C72164 = C72160 - C72155;
    const double C62266 = C62260 - C62253;
    const double C62263 = C62257 - C62241;
    const double C64567 = C64564 - C64560;
    const double C65488 = C65485 - C65481;
    const double C79454 = C79451 - C79447;
    const double C80634 = C80616 - C80630;
    const double C80620 = C80615 + C82864;
    const double C45441 = C80230 * C1660;
    const double C45439 = C80230 * C1659;
    const double C45429 = C80230 * C703;
    const double C45427 = C80230 * C702;
    const double C45708 = C80230 * C1951;
    const double C45702 = C80230 * C1654;
    const double C45696 = C80230 * C858;
    const double C45690 = C80230 * C694;
    const double C45942 = C80230 * C2242;
    const double C45936 = C80230 * C1004;
    const double C47771 = C80230 * C3358;
    const double C47769 = C80230 * C3357;
    const double C48089 = C80230 * C3614;
    const double C48083 = C80230 * C3347;
    const double C48389 = C80230 * C3860;
    const double C48692 = C80230 * C1163;
    const double C48690 = C80230 * C1162;
    const double C49010 = C80230 * C1318;
    const double C49004 = C80230 * C1154;
    const double C49310 = C80230 * C1464;
    const double C63019 = C80230 * C4115;
    const double C63017 = C80230 * C4114;
    const double C63265 = C80230 * C4406;
    const double C63259 = C80230 * C4109;
    const double C63499 = C80230 * C4684;
    const double C98 =
        (C80230 / C80185 + ((C80177 * C80280 + C44656) * ae) / C80179) /
            C80185 -
        ((C80177 * (C80280 / C80185 + (0 * ae) / C80179) + C82862) * be) /
            C80179;
    const double C6514 =
        C80230 / C80185 - ((C80177 * C80280 + C44656) * be) / C80179;
    const double C37893 =
        C80230 / C80185 + ((C80177 * C80280 + C44656) * ae) / C80179;
    const double C14040 = C13261 * C1660;
    const double C14038 = C13261 * C1659;
    const double C14028 = C13261 * C703;
    const double C14026 = C13261 * C702;
    const double C14307 = C13261 * C1951;
    const double C14301 = C13261 * C1654;
    const double C14295 = C13261 * C858;
    const double C14289 = C13261 * C694;
    const double C14541 = C13261 * C2242;
    const double C14535 = C13261 * C1004;
    const double C27158 = C13261 * C4115;
    const double C27156 = C13261 * C4114;
    const double C27146 = C13261 * C1163;
    const double C27144 = C13261 * C1162;
    const double C27425 = C13261 * C4406;
    const double C27419 = C13261 * C4109;
    const double C27413 = C13261 * C1318;
    const double C27407 = C13261 * C1154;
    const double C27665 = C13261 * C4684;
    const double C27659 = C13261 * C1464;
    const double C67360 = C13261 * C3358;
    const double C67358 = C13261 * C3357;
    const double C67678 = C13261 * C3614;
    const double C67672 = C13261 * C3347;
    const double C67978 = C13261 * C3860;
    const double C80231 = C80229 * be;
    const double C13259 = C80216 + (C80229 * ae) / C80179 + C80205;
    const double C80266 = C80262 / C80179;
    const double C80265 = C80261 / C80191;
    const double C80264 = C80177 * C80261;
    const double C19062 = C80261 / C80179;
    const double C2551 = C1648 * C1653;
    const double C2539 = C1648 * C695;
    const double C5714 = C1648 * C4108;
    const double C5702 = C1648 * C1155;
    const double C11424 = C1648 * C3348;
    const double C2555 = C1650 * C1654;
    const double C2543 = C1650 * C694;
    const double C5718 = C1650 * C4109;
    const double C5706 = C1650 * C1154;
    const double C11428 = C1650 * C3347;
    const double C40505 = C39826 * C2527;
    const double C40497 = C39826 * C1653;
    const double C40489 = C39826 * C695;
    const double C42768 = C39826 * C4976;
    const double C42760 = C39826 * C3348;
    const double C43702 = C39826 * C4108;
    const double C43694 = C39826 * C1155;
    const double C50529 = C39826 * C3345;
    const double C58289 = C39826 * C5690;
    const double C2579 = C2573 + C2561;
    const double C2576 = C2570 + C2549;
    const double C5742 = C5736 + C5724;
    const double C5739 = C5733 + C5712;
    const double C11443 = C11440 + C11434;
    const double C7241 = C7237 + C7229;
    const double C9782 = C9778 + C9770;
    const double C14063 = C14057 + C14045;
    const double C14060 = C14054 + C14033;
    const double C27181 = C27175 + C27163;
    const double C27178 = C27172 + C27151;
    const double C67374 = C67371 + C67365;
    const double C15859 = C15855 + C15847;
    const double C15858 = C15854 + C15843;
    const double C15857 = C15853 + C15839;
    const double C15856 = C15852 + C15835;
    const double C17477 = C17473 + C17465;
    const double C17476 = C17472 + C17461;
    const double C17475 = C17471 + C17456;
    const double C17474 = C17470 + C17452;
    const double C18283 = C18281 + C18277;
    const double C18282 = C18280 + C18273;
    const double C24439 = C24438 + C24436;
    const double C30854 = C30852 + C30848;
    const double C30853 = C30851 + C30844;
    const double C36610 = C36609 + C36607;
    const double C19778 = C19772 + C19760;
    const double C19776 = C19770 + C19752;
    const double C19774 = C19768 + C19744;
    const double C22025 = C22021 + C22013;
    const double C22023 = C22019 + C22005;
    const double C22971 = C22969 + C22965;
    const double C32303 = C32301 + C32297;
    const double C33215 = C33213 + C33209;
    const double C35394 = C35392 + C35388;
    const double C38607 = C38603 + C38595;
    const double C53624 = C53620 + C53612;
    const double C40529 = C40523 + C40511;
    const double C40527 = C40521 + C40503;
    const double C40525 = C40519 + C40495;
    const double C42786 = C42782 + C42774;
    const double C42784 = C42780 + C42766;
    const double C43720 = C43716 + C43708;
    const double C43718 = C43714 + C43700;
    const double C50541 = C50539 + C50535;
    const double C58301 = C58299 + C58295;
    const double C45464 = C45458 + C45446;
    const double C45461 = C45455 + C45434;
    const double C47785 = C47782 + C47776;
    const double C48706 = C48703 + C48697;
    const double C63033 = C63030 + C63024;
    const double C80526 = C80523 / C80179;
    const double C80529 = C80525 / C80191;
    const double C80528 = C80306 * C80525;
    const double C38207 = C38187 * C105;
    const double C38199 = C38187 * C104;
    const double C38191 = C38187 * C103;
    const double C42215 = C38187 * C4109;
    const double C42207 = C38187 * C1154;
    const double C44154 = C38187 * C4108;
    const double C44146 = C38187 * C1155;
    const double C47258 = C38187 * C1153;
    const double C72508 = C38187 * C5690;
    const double C2074 = C2068 - C2058;
    const double C2071 = C2065 - C2046;
    const double C29660 = C29654 - C29644;
    const double C29657 = C29651 - C29632;
    const double C54715 = C54712 - C54705;
    const double C6849 = C6843 - C6833;
    const double C6847 = C6841 - C6825;
    const double C6845 = C6839 - C6817;
    const double C10883 = C10879 - C10871;
    const double C10881 = C10877 - C10863;
    const double C12780 = C12778 - C12772;
    const double C31765 = C31763 - C31757;
    const double C33641 = C33639 - C33633;
    const double C37546 = C37544 - C37538;
    const double C13625 = C13619 - C13606;
    const double C13622 = C13616 - C13594;
    const double C18659 = C18653 - C18640;
    const double C18656 = C18650 - C18628;
    const double C21478 = C21475 - C21465;
    const double C13626 = C13620 - C13610;
    const double C13623 = C13617 - C13598;
    const double C18660 = C18654 - C18644;
    const double C18657 = C18651 - C18632;
    const double C21479 = C21476 - C21469;
    const double C2079 = C2073 + C2055;
    const double C2076 = C2070 + C2043;
    const double C29665 = C29659 + C29641;
    const double C29662 = C29656 + C29629;
    const double C54717 = C54714 + C54702;
    const double C2081 = C2075 + C2063;
    const double C2078 = C2072 + C2051;
    const double C29667 = C29661 + C29649;
    const double C29664 = C29658 + C29637;
    const double C54719 = C54716 + C54710;
    const double C6856 = C6850 + C6838;
    const double C6854 = C6848 + C6830;
    const double C6852 = C6846 + C6822;
    const double C10888 = C10884 + C10876;
    const double C10886 = C10882 + C10868;
    const double C12783 = C12781 + C12777;
    const double C31768 = C31766 + C31762;
    const double C33644 = C33642 + C33638;
    const double C37549 = C37547 + C37543;
    const double C13633 = C13627 + C13615;
    const double C13630 = C13624 + C13603;
    const double C18667 = C18661 + C18649;
    const double C18664 = C18658 + C18637;
    const double C21483 = C21480 + C21474;
    const double C19385 = C19381 + C19373;
    const double C25374 = C25370 + C25362;
    const double C38231 = C38225 + C38213;
    const double C38229 = C38223 + C38205;
    const double C38227 = C38221 + C38197;
    const double C42233 = C42229 + C42221;
    const double C42231 = C42227 + C42213;
    const double C44172 = C44168 + C44160;
    const double C44170 = C44166 + C44152;
    const double C47270 = C47268 + C47264;
    const double C72520 = C72518 + C72514;
    const double C40145 = C40141 + C40133;
    const double C70652 = C70648 + C70640;
    const double C45034 = C45028 + C45016;
    const double C45031 = C45025 + C45004;
    const double C50031 = C50028 + C50022;
    const double C51860 = C51857 + C51851;
    const double C79860 = C79857 + C79851;
    const double C44765 = C80484 * C701;
    const double C44759 = C80484 * C693;
    const double C44753 = C80484 * C703;
    const double C44747 = C80484 * C694;
    const double C45011 = C80484 * C859;
    const double C45009 = C80484 * C755;
    const double C44999 = C80484 * C858;
    const double C44997 = C80484 * C754;
    const double C45266 = C80484 * C1005;
    const double C45260 = C80484 * C1004;
    const double C49714 = C80484 * C3358;
    const double C49708 = C80484 * C3347;
    const double C50017 = C80484 * C3614;
    const double C50015 = C80484 * C3443;
    const double C50329 = C80484 * C3860;
    const double C51543 = C80484 * C3360;
    const double C51537 = C80484 * C3348;
    const double C51846 = C80484 * C3613;
    const double C51844 = C80484 * C3441;
    const double C52158 = C80484 * C3859;
    const double C79615 = C80484 * C4982;
    const double C79609 = C80484 * C4976;
    const double C79846 = C80484 * C5220;
    const double C79844 = C80484 * C5060;
    const double C80086 = C80484 * C5454;
    const double C15460 =
        (C80484 / C80185 + ((C80306 * C80495 + C44659) * ae) / C80179) /
            C80185 -
        ((C80306 * (C80495 / C80185 + (0 * ae) / C80179) + C82871) * be) /
            C80179;
    const double C19133 =
        C80484 / C80185 - ((C80306 * C80495 + C44659) * be) / C80179;
    const double C39897 =
        C80484 / C80185 + ((C80306 * C80495 + C44659) * ae) / C80179;
    const double C80474 = C80470 * be;
    const double C80676 = C80673 / C80179;
    const double C80679 = C80675 / C80191;
    const double C80678 = C80309 * C80675;
    const double C52912 = C52892 * C105;
    const double C52904 = C52892 * C104;
    const double C52896 = C52892 * C103;
    const double C55135 = C52892 * C1654;
    const double C55127 = C52892 * C694;
    const double C56069 = C52892 * C1653;
    const double C56061 = C52892 * C695;
    const double C59743 = C52892 * C693;
    const double C70266 = C52892 * C2527;
    const double C4893 = C4887 - C4877;
    const double C4890 = C4884 - C4865;
    const double C18180 = C18174 - C18164;
    const double C18177 = C18171 - C18152;
    const double C42656 = C42653 - C42646;
    const double C9087 = C9081 - C9071;
    const double C9085 = C9079 - C9063;
    const double C9083 = C9077 - C9055;
    const double C11319 = C11315 - C11307;
    const double C11317 = C11313 - C11299;
    const double C12268 = C12266 - C12260;
    const double C21896 = C21894 - C21888;
    const double C22856 = C22854 - C22848;
    const double C24997 = C24995 - C24989;
    const double C26391 = C26385 - C26372;
    const double C26388 = C26382 - C26360;
    const double C29223 = C29217 - C29204;
    const double C29220 = C29214 - C29192;
    const double C32186 = C32183 - C32173;
    const double C26392 = C26386 - C26376;
    const double C26389 = C26383 - C26364;
    const double C29224 = C29218 - C29208;
    const double C29221 = C29215 - C29196;
    const double C32187 = C32184 - C32177;
    const double C4898 = C4892 + C4874;
    const double C4895 = C4889 + C4862;
    const double C18185 = C18179 + C18161;
    const double C18182 = C18176 + C18149;
    const double C42658 = C42655 + C42643;
    const double C4900 = C4894 + C4882;
    const double C4897 = C4891 + C4870;
    const double C18187 = C18181 + C18169;
    const double C18184 = C18178 + C18157;
    const double C42660 = C42657 + C42651;
    const double C9094 = C9088 + C9076;
    const double C9092 = C9086 + C9068;
    const double C9090 = C9084 + C9060;
    const double C11324 = C11320 + C11312;
    const double C11322 = C11318 + C11304;
    const double C12271 = C12269 + C12265;
    const double C21899 = C21897 + C21893;
    const double C22859 = C22857 + C22853;
    const double C25000 = C24998 + C24994;
    const double C26399 = C26393 + C26381;
    const double C26396 = C26390 + C26369;
    const double C29231 = C29225 + C29213;
    const double C29228 = C29222 + C29201;
    const double C32191 = C32188 + C32182;
    const double C34720 = C34716 + C34708;
    const double C37197 = C37193 + C37185;
    const double C52936 = C52930 + C52918;
    const double C52934 = C52928 + C52910;
    const double C52932 = C52926 + C52902;
    const double C55153 = C55149 + C55141;
    const double C55151 = C55147 + C55133;
    const double C56087 = C56083 + C56075;
    const double C56085 = C56081 + C56067;
    const double C59755 = C59753 + C59749;
    const double C70278 = C70276 + C70272;
    const double C57627 = C57623 + C57615;
    const double C72168 = C72164 + C72156;
    const double C62272 = C62266 + C62254;
    const double C62269 = C62263 + C62242;
    const double C64570 = C64567 + C64561;
    const double C65491 = C65488 + C65482;
    const double C79457 = C79454 + C79448;
    const double C61769 = C80634 * C1161;
    const double C61763 = C80634 * C1153;
    const double C61757 = C80634 * C1163;
    const double C61751 = C80634 * C1154;
    const double C62003 = C80634 * C1319;
    const double C61997 = C80634 * C1318;
    const double C62249 = C80634 * C1465;
    const double C62247 = C80634 * C1267;
    const double C62237 = C80634 * C1464;
    const double C62235 = C80634 * C1266;
    const double C63953 = C80634 * C3358;
    const double C63947 = C80634 * C3347;
    const double C64253 = C80634 * C3614;
    const double C64556 = C80634 * C3860;
    const double C64554 = C80634 * C3528;
    const double C64874 = C80634 * C3360;
    const double C64868 = C80634 * C3348;
    const double C65174 = C80634 * C3613;
    const double C65477 = C80634 * C3859;
    const double C65475 = C80634 * C3527;
    const double C78984 = C80634 * C3354;
    const double C78978 = C80634 * C3345;
    const double C79212 = C80634 * C3616;
    const double C79443 = C80634 * C3862;
    const double C79441 = C80634 * C3530;
    const double C30121 =
        (C80634 / C80185 + ((C80309 * C80645 + C61595) * ae) / C80179) /
            C80185 -
        ((C80309 * (C80645 / C80185 + (0 * ae) / C80179) + C82878) * be) /
            C80179;
    const double C34257 =
        C80634 / C80185 - ((C80309 * C80645 + C61595) * be) / C80179;
    const double C57173 =
        C80634 / C80185 + ((C80309 * C80645 + C61595) * ae) / C80179;
    const double C80624 = C80620 * be;
    const double C7224 = C6514 * C701;
    const double C7222 = C6514 * C700;
    const double C7453 = C6514 * C859;
    const double C7445 = C6514 * C693;
    const double C7659 = C6514 * C1005;
    const double C9765 = C6514 * C1161;
    const double C9763 = C6514 * C1160;
    const double C9994 = C6514 * C1319;
    const double C9986 = C6514 * C1153;
    const double C10204 = C6514 * C1465;
    const double C38590 = C37893 * C701;
    const double C38588 = C37893 * C700;
    const double C38819 = C37893 * C859;
    const double C38811 = C37893 * C693;
    const double C39025 = C37893 * C1005;
    const double C53607 = C37893 * C1161;
    const double C53605 = C37893 * C1160;
    const double C53836 = C37893 * C1319;
    const double C53828 = C37893 * C1153;
    const double C54046 = C37893 * C1465;
    const double C80232 = C80231 / C80179;
    const double C14036 = C13259 * C1658;
    const double C14034 = C13259 * C1657;
    const double C14024 = C13259 * C705;
    const double C14022 = C13259 * C704;
    const double C14305 = C13259 * C1950;
    const double C14299 = C13259 * C1653;
    const double C14293 = C13259 * C857;
    const double C14287 = C13259 * C695;
    const double C14539 = C13259 * C2241;
    const double C14533 = C13259 * C1003;
    const double C27154 = C13259 * C4113;
    const double C27152 = C13259 * C4112;
    const double C27142 = C13259 * C1165;
    const double C27140 = C13259 * C1164;
    const double C27423 = C13259 * C4405;
    const double C27417 = C13259 * C4108;
    const double C27411 = C13259 * C1317;
    const double C27405 = C13259 * C1155;
    const double C27663 = C13259 * C4683;
    const double C27657 = C13259 * C1463;
    const double C67356 = C13259 * C3360;
    const double C67354 = C13259 * C3359;
    const double C67676 = C13259 * C3613;
    const double C67670 = C13259 * C3348;
    const double C67976 = C13259 * C3859;
    const double C80269 = C80265 - C80266;
    const double C13262 = C80265 + (C80259 * ae) / C80179;
    const double C80268 = C80264 / C80179;
    const double C19754 = C19062 * C2527;
    const double C19746 = C19062 * C1653;
    const double C19738 = C19062 * C695;
    const double C22007 = C19062 * C3345;
    const double C21999 = C19062 * C3348;
    const double C22959 = C19062 * C1155;
    const double C32291 = C19062 * C4976;
    const double C33203 = C19062 * C4108;
    const double C35382 = C19062 * C5690;
    const double C2565 = C2550 - C2551;
    const double C2562 = C2538 - C2539;
    const double C5728 = C5713 - C5714;
    const double C5725 = C5701 - C5702;
    const double C11435 = C11423 - C11424;
    const double C2566 = C2554 - C2555;
    const double C2563 = C2542 - C2543;
    const double C5729 = C5717 - C5718;
    const double C5726 = C5705 - C5706;
    const double C11436 = C11427 - C11428;
    const double C40516 = C40504 - C40505;
    const double C40514 = C40496 - C40497;
    const double C40512 = C40488 - C40489;
    const double C42777 = C42767 - C42768;
    const double C42775 = C42759 - C42760;
    const double C43711 = C43701 - C43702;
    const double C43709 = C43693 - C43694;
    const double C50536 = C50528 - C50529;
    const double C58296 = C58288 - C58289;
    const double C15863 = C15859 * C82592;
    const double C15862 = C15858 * C82592;
    const double C24432 = C15858 * C82864;
    const double C69723 = C15858 * C52324;
    const double C15861 = C15857 * C82592;
    const double C17457 = C15857 * C82932;
    const double C24430 = C15857 * C82864;
    const double C28559 = C15857 * C25720;
    const double C69721 = C15857 * C52324;
    const double C78824 = C15857 * C82675;
    const double C15860 = C15856 * C82592;
    const double C17448 = C15856 * C82932;
    const double C24428 = C15856 * C82864;
    const double C28556 = C15856 * C25720;
    const double C36601 = C15856 * C34115;
    const double C69719 = C15856 * C52324;
    const double C71585 = C15856 * C82942;
    const double C78821 = C15856 * C82675;
    const double C17481 = C17477 * C82896;
    const double C28561 = C17477 * C82896;
    const double C78826 = C17477 * C61595;
    const double C17480 = C17476 * C82918;
    const double C24431 = C17476 * C82679;
    const double C28560 = C17476 * C25721;
    const double C69722 = C17476 * C82679;
    const double C78825 = C17476 * C82682;
    const double C17479 = C17475 * C82896;
    const double C28558 = C17475 * C82896;
    const double C36603 = C17475 * C34117;
    const double C71587 = C17475 * C82924;
    const double C78823 = C17475 * C61595;
    const double C17478 = C17474 * C82918;
    const double C24429 = C17474 * C82679;
    const double C28557 = C17474 * C25721;
    const double C36602 = C17474 * C34116;
    const double C69720 = C17474 * C82679;
    const double C71586 = C17474 * C82936;
    const double C78822 = C17474 * C82682;
    const double C24440 = C24439 * C82679;
    const double C69724 = C24439 * C82679;
    const double C36611 = C36610 * C82878;
    const double C71588 = C36610 * C82878;
    const double C80532 = C80529 - C80526;
    const double C80531 = C80528 / C80179;
    const double C38218 = C38206 - C38207;
    const double C38216 = C38198 - C38199;
    const double C38214 = C38190 - C38191;
    const double C42224 = C42214 - C42215;
    const double C42222 = C42206 - C42207;
    const double C44163 = C44153 - C44154;
    const double C44161 = C44145 - C44146;
    const double C47265 = C47257 - C47258;
    const double C72515 = C72507 - C72508;
    const double C2080 = C2074 + C2059;
    const double C2077 = C2071 + C2047;
    const double C29666 = C29660 + C29645;
    const double C29663 = C29657 + C29633;
    const double C54718 = C54715 + C54706;
    const double C6855 = C6849 + C6834;
    const double C6853 = C6847 + C6826;
    const double C6851 = C6845 + C6818;
    const double C10887 = C10883 + C10872;
    const double C10885 = C10881 + C10864;
    const double C12782 = C12780 + C12773;
    const double C31767 = C31765 + C31758;
    const double C33643 = C33641 + C33634;
    const double C37548 = C37546 + C37539;
    const double C13631 = C13625 + C13607;
    const double C13628 = C13622 + C13595;
    const double C18665 = C18659 + C18641;
    const double C18662 = C18656 + C18629;
    const double C21481 = C21478 + C21466;
    const double C13632 = C13626 + C13611;
    const double C13629 = C13623 + C13599;
    const double C18666 = C18660 + C18645;
    const double C18663 = C18657 + C18633;
    const double C21482 = C21479 + C21470;
    const double C19149 = C19133 * C1660;
    const double C19141 = C19133 * C1654;
    const double C19368 = C19133 * C1951;
    const double C19366 = C19133 * C1747;
    const double C19591 = C19133 * C2242;
    const double C25146 = C19133 * C3354;
    const double C25138 = C19133 * C3345;
    const double C25357 = C19133 * C3616;
    const double C25355 = C19133 * C3442;
    const double C25578 = C19133 * C3862;
    const double C39913 = C39897 * C1660;
    const double C39905 = C39897 * C1654;
    const double C40128 = C39897 * C1951;
    const double C40126 = C39897 * C1747;
    const double C40349 = C39897 * C2242;
    const double C70424 = C39897 * C3354;
    const double C70416 = C39897 * C3345;
    const double C70635 = C39897 * C3616;
    const double C70633 = C39897 * C3442;
    const double C70856 = C39897 * C3862;
    const double C80479 = C80474 / C80179;
    const double C80682 = C80679 - C80676;
    const double C80681 = C80678 / C80179;
    const double C52923 = C52911 - C52912;
    const double C52921 = C52903 - C52904;
    const double C52919 = C52895 - C52896;
    const double C55144 = C55134 - C55135;
    const double C55142 = C55126 - C55127;
    const double C56078 = C56068 - C56069;
    const double C56076 = C56060 - C56061;
    const double C59750 = C59742 - C59743;
    const double C70273 = C70265 - C70266;
    const double C4899 = C4893 + C4878;
    const double C4896 = C4890 + C4866;
    const double C18186 = C18180 + C18165;
    const double C18183 = C18177 + C18153;
    const double C42659 = C42656 + C42647;
    const double C9093 = C9087 + C9072;
    const double C9091 = C9085 + C9064;
    const double C9089 = C9083 + C9056;
    const double C11323 = C11319 + C11308;
    const double C11321 = C11317 + C11300;
    const double C12270 = C12268 + C12261;
    const double C21898 = C21896 + C21889;
    const double C22858 = C22856 + C22849;
    const double C24999 = C24997 + C24990;
    const double C26397 = C26391 + C26373;
    const double C26394 = C26388 + C26361;
    const double C29229 = C29223 + C29205;
    const double C29226 = C29220 + C29193;
    const double C32189 = C32186 + C32174;
    const double C26398 = C26392 + C26377;
    const double C26395 = C26389 + C26365;
    const double C29230 = C29224 + C29209;
    const double C29227 = C29221 + C29197;
    const double C32190 = C32187 + C32178;
    const double C34273 = C34257 * C4115;
    const double C34265 = C34257 * C4109;
    const double C34486 = C34257 * C4406;
    const double C34703 = C34257 * C4684;
    const double C34701 = C34257 * C4300;
    const double C36757 = C34257 * C4982;
    const double C36749 = C34257 * C4976;
    const double C36967 = C34257 * C5220;
    const double C37180 = C34257 * C5454;
    const double C37178 = C34257 * C5140;
    const double C57189 = C57173 * C4115;
    const double C57181 = C57173 * C4109;
    const double C57395 = C57173 * C4406;
    const double C57610 = C57173 * C4684;
    const double C57608 = C57173 * C4300;
    const double C71734 = C57173 * C4982;
    const double C71726 = C57173 * C4976;
    const double C71940 = C57173 * C5220;
    const double C72151 = C57173 * C5454;
    const double C72149 = C57173 * C5140;
    const double C80629 = C80624 / C80179;
    const double C80233 = C80216 - C80232;
    const double C45440 = C80269 * C1654;
    const double C45428 = C80269 * C694;
    const double C47770 = C80269 * C3347;
    const double C48691 = C80269 * C1154;
    const double C63018 = C80269 * C4109;
    const double C99 =
        (C80269 / C80185 + ((C80284 - C80252 / C80285) * ae) / C80179) /
            C80185 -
        ((2 * (C80280 / C80185 + (0 * ae) / C80179) -
          C80252 / (C80179 * 4 * C80237)) *
         be) /
            C80179;
    const double C6515 =
        C80269 / C80185 - ((C80284 - C80252 / C80285) * be) / C80179;
    const double C37894 =
        C80269 / C80185 + ((C80284 - C80252 / C80285) * ae) / C80179;
    const double C14039 = C13262 * C1654;
    const double C14027 = C13262 * C694;
    const double C27157 = C13262 * C4109;
    const double C27145 = C13262 * C1154;
    const double C67359 = C13262 * C3347;
    const double C80270 = C80268 + C80243;
    const double C19765 = C19753 - C19754;
    const double C19763 = C19745 - C19746;
    const double C19761 = C19737 - C19738;
    const double C22016 = C22006 - C22007;
    const double C22014 = C21998 - C21999;
    const double C22966 = C22958 - C22959;
    const double C32298 = C32290 - C32291;
    const double C33210 = C33202 - C33203;
    const double C35389 = C35381 - C35382;
    const double C2571 = C2565 - C2552;
    const double C2568 = C2562 - C2540;
    const double C5734 = C5728 - C5715;
    const double C5731 = C5725 - C5703;
    const double C11438 = C11435 - C11425;
    const double C2572 = C2566 - C2556;
    const double C2569 = C2563 - C2544;
    const double C5735 = C5729 - C5719;
    const double C5732 = C5726 - C5707;
    const double C11439 = C11436 - C11429;
    const double C40522 = C40516 - C40506;
    const double C40520 = C40514 - C40498;
    const double C40518 = C40512 - C40490;
    const double C42781 = C42777 - C42769;
    const double C42779 = C42775 - C42761;
    const double C43715 = C43711 - C43703;
    const double C43713 = C43709 - C43695;
    const double C50538 = C50536 - C50530;
    const double C58298 = C58296 - C58290;
    const double C45010 = C80532 * C693;
    const double C44998 = C80532 * C694;
    const double C50016 = C80532 * C3347;
    const double C51845 = C80532 * C3348;
    const double C79845 = C80532 * C4976;
    const double C15603 =
        (C80532 / C80185 + ((C80542 - C80346 / C80285) * ae) / C80179) /
            C80185 -
        ((2 * (C80495 / C80185 + (0 * ae) / C80179) -
          C80346 / (C80179 * 4 * C80237)) *
         be) /
            C80179;
    const double C19355 =
        C80532 / C80185 - ((C80542 - C80346 / C80285) * be) / C80179;
    const double C40115 =
        C80532 / C80185 + ((C80542 - C80346 / C80285) * ae) / C80179;
    const double C80534 = C80531 + C80511;
    const double C38224 = C38218 - C38208;
    const double C38222 = C38216 - C38200;
    const double C38220 = C38214 - C38192;
    const double C42228 = C42224 - C42216;
    const double C42226 = C42222 - C42208;
    const double C44167 = C44163 - C44155;
    const double C44165 = C44161 - C44147;
    const double C47267 = C47265 - C47259;
    const double C72517 = C72515 - C72509;
    const double C80483 = C80478 - C80479;
    const double C62248 = C80682 * C1153;
    const double C62236 = C80682 * C1154;
    const double C64555 = C80682 * C3347;
    const double C65476 = C80682 * C3348;
    const double C79442 = C80682 * C3345;
    const double C30396 =
        (C80682 / C80185 + ((C80692 - C80372 / C80285) * ae) / C80179) /
            C80185 -
        ((2 * (C80645 / C80185 + (0 * ae) / C80179) -
          C80372 / (C80179 * 4 * C80237)) *
         be) /
            C80179;
    const double C34690 =
        C80682 / C80185 - ((C80692 - C80372 / C80285) * be) / C80179;
    const double C57597 =
        C80682 / C80185 + ((C80692 - C80372 / C80285) * ae) / C80179;
    const double C80684 = C80681 + C80661;
    const double C52929 = C52923 - C52913;
    const double C52927 = C52921 - C52905;
    const double C52925 = C52919 - C52897;
    const double C55148 = C55144 - C55136;
    const double C55146 = C55142 - C55128;
    const double C56082 = C56078 - C56070;
    const double C56080 = C56076 - C56062;
    const double C59752 = C59750 - C59744;
    const double C70275 = C70273 - C70267;
    const double C80633 = C80628 - C80629;
    const double C80234 = C80233 + C80205;
    const double C45451 = C45439 - C45440;
    const double C45448 = C45427 - C45428;
    const double C47778 = C47769 - C47770;
    const double C48699 = C48690 - C48691;
    const double C63026 = C63017 - C63018;
    const double C7223 = C6515 * C693;
    const double C9764 = C6515 * C1153;
    const double C38589 = C37894 * C693;
    const double C53606 = C37894 * C1153;
    const double C14050 = C14038 - C14039;
    const double C14047 = C14026 - C14027;
    const double C27168 = C27156 - C27157;
    const double C27165 = C27144 - C27145;
    const double C67367 = C67358 - C67359;
    const double C80271 = C80270 * be;
    const double C13260 = C80251 + (C80270 * ae) / C80179 - C80253;
    const double C19771 = C19765 - C19755;
    const double C19769 = C19763 - C19747;
    const double C19767 = C19761 - C19739;
    const double C22020 = C22016 - C22008;
    const double C22018 = C22014 - C22000;
    const double C22968 = C22966 - C22960;
    const double C32300 = C32298 - C32292;
    const double C33212 = C33210 - C33204;
    const double C35391 = C35389 - C35383;
    const double C2577 = C2571 + C2553;
    const double C2574 = C2568 + C2541;
    const double C5740 = C5734 + C5716;
    const double C5737 = C5731 + C5704;
    const double C11441 = C11438 + C11426;
    const double C2578 = C2572 + C2557;
    const double C2575 = C2569 + C2545;
    const double C5741 = C5735 + C5720;
    const double C5738 = C5732 + C5708;
    const double C11442 = C11439 + C11430;
    const double C40528 = C40522 + C40507;
    const double C40526 = C40520 + C40499;
    const double C40524 = C40518 + C40491;
    const double C42785 = C42781 + C42770;
    const double C42783 = C42779 + C42762;
    const double C43719 = C43715 + C43704;
    const double C43717 = C43713 + C43696;
    const double C50540 = C50538 + C50531;
    const double C58300 = C58298 + C58291;
    const double C45021 = C45009 - C45010;
    const double C45018 = C44997 - C44998;
    const double C50024 = C50015 - C50016;
    const double C51853 = C51844 - C51845;
    const double C79853 = C79844 - C79845;
    const double C19367 = C19355 * C1654;
    const double C25356 = C19355 * C3345;
    const double C40127 = C40115 * C1654;
    const double C70634 = C40115 * C3345;
    const double C80536 = C80534 * be;
    const double C38230 = C38224 + C38209;
    const double C38228 = C38222 + C38201;
    const double C38226 = C38220 + C38193;
    const double C42232 = C42228 + C42217;
    const double C42230 = C42226 + C42209;
    const double C44171 = C44167 + C44156;
    const double C44169 = C44165 + C44148;
    const double C47269 = C47267 + C47260;
    const double C72519 = C72517 + C72510;
    const double C80487 = C80483 + C80462;
    const double C62259 = C62247 - C62248;
    const double C62256 = C62235 - C62236;
    const double C64563 = C64554 - C64555;
    const double C65484 = C65475 - C65476;
    const double C79450 = C79441 - C79442;
    const double C34702 = C34690 * C4109;
    const double C37179 = C34690 * C4976;
    const double C57609 = C57597 * C4109;
    const double C72150 = C57597 * C4976;
    const double C80686 = C80684 * be;
    const double C52935 = C52929 + C52914;
    const double C52933 = C52927 + C52906;
    const double C52931 = C52925 + C52898;
    const double C55152 = C55148 + C55137;
    const double C55150 = C55146 + C55129;
    const double C56086 = C56082 + C56071;
    const double C56084 = C56080 + C56063;
    const double C59754 = C59752 + C59745;
    const double C70277 = C70275 + C70268;
    const double C80637 = C80633 + C80612;
    const double C45437 = C80234 * C1658;
    const double C45435 = C80234 * C1657;
    const double C45425 = C80234 * C705;
    const double C45423 = C80234 * C704;
    const double C45706 = C80234 * C1950;
    const double C45700 = C80234 * C1653;
    const double C45694 = C80234 * C857;
    const double C45688 = C80234 * C695;
    const double C45940 = C80234 * C2241;
    const double C45934 = C80234 * C1003;
    const double C47767 = C80234 * C3360;
    const double C47765 = C80234 * C3359;
    const double C48087 = C80234 * C3613;
    const double C48081 = C80234 * C3348;
    const double C48387 = C80234 * C3859;
    const double C48688 = C80234 * C1165;
    const double C48686 = C80234 * C1164;
    const double C49008 = C80234 * C1317;
    const double C49002 = C80234 * C1155;
    const double C49308 = C80234 * C1463;
    const double C63015 = C80234 * C4113;
    const double C63013 = C80234 * C4112;
    const double C63263 = C80234 * C4405;
    const double C63257 = C80234 * C4108;
    const double C63497 = C80234 * C4683;
    const double C92 =
        (((((0 - (C80177 * C80178) / C80179) * ae) / C80179 -
           (0 * be) / C80191 + (2 * C80180) / C80179) /
              C80185 -
          ((C80177 * C80214 + 0) * be) / C80179 + C80197 - C80207) /
             C80185 +
         ((C80177 * C80228 + 0) * ae) / C80179) /
            C80185 -
        ((C80177 * (C80228 / C80185 +
                    ((C80177 * C80234 + C82528) * ae) / C80179 + C80230) +
          C82937) *
         be) /
            C80179 +
        C80234 / C80185 + ((C80177 * C80230 + C82536) * ae) / C80179 +
        2 * (C80205 / C80185 - (0 * be) / C80179);
    const double C94 =
        (C80228 / C80185 + ((C80177 * C80234 + C82528) * ae) / C80179 +
         C80230) /
            C80185 -
        ((C80177 * (C80234 / C80185 +
                    ((C80177 * C80230 + C82536) * ae) / C80179 + 2 * C80280) +
          C82927) *
         be) /
            C80179 +
        2 * (C80230 / C80185 + ((C80177 * C80280 + C44656) * ae) / C80179);
    const double C96 = (C80234 / C80185 +
                        ((C80177 * C80230 + C82536) * ae) / C80179 + C80284) /
                           C80185 -
                       ((C80177 * (C80230 / C80185 +
                                   ((C80177 * C80280 + C44656) * ae) / C80179) +
                         C82911) *
                        be) /
                           C80179 +
                       3 * (C80280 / C80185 + (0 * ae) / C80179);
    const double C6510 =
        C80228 / C80185 - ((C80177 * C80234 + C82528) * be) / C80179 + C80230;
    const double C6512 =
        C80234 / C80185 - ((C80177 * C80230 + C82536) * be) / C80179 + C80284;
    const double C37889 =
        C80228 / C80185 + ((C80177 * C80234 + C82528) * ae) / C80179 + C80230;
    const double C37891 =
        C80234 / C80185 + ((C80177 * C80230 + C82536) * ae) / C80179 + C80284;
    const double C45457 = C45451 - C45441;
    const double C45454 = C45448 - C45429;
    const double C47781 = C47778 - C47771;
    const double C48702 = C48699 - C48692;
    const double C63029 = C63026 - C63019;
    const double C7232 = C7222 - C7223;
    const double C9773 = C9763 - C9764;
    const double C38598 = C38588 - C38589;
    const double C53615 = C53605 - C53606;
    const double C14056 = C14050 - C14040;
    const double C14053 = C14047 - C14028;
    const double C27174 = C27168 - C27158;
    const double C27171 = C27165 - C27146;
    const double C67370 = C67367 - C67360;
    const double C80272 = C80271 / C80179;
    const double C14035 = C13260 * C1653;
    const double C14023 = C13260 * C695;
    const double C27153 = C13260 * C4108;
    const double C27141 = C13260 * C1155;
    const double C67355 = C13260 * C3348;
    const double C19777 = C19771 + C19756;
    const double C19775 = C19769 + C19748;
    const double C19773 = C19767 + C19740;
    const double C22024 = C22020 + C22009;
    const double C22022 = C22018 + C22001;
    const double C22970 = C22968 + C22961;
    const double C32302 = C32300 + C32293;
    const double C33214 = C33212 + C33205;
    const double C35393 = C35391 + C35384;
    const double C45027 = C45021 - C45011;
    const double C45024 = C45018 - C44999;
    const double C50027 = C50024 - C50017;
    const double C51856 = C51853 - C51846;
    const double C79856 = C79853 - C79846;
    const double C19376 = C19366 - C19367;
    const double C25365 = C25355 - C25356;
    const double C40136 = C40126 - C40127;
    const double C70643 = C70633 - C70634;
    const double C80537 = C80536 / C80179;
    const double C44763 = C80487 * C113;
    const double C44757 = C80487 * C104;
    const double C44751 = C80487 * C111;
    const double C44745 = C80487 * C103;
    const double C45007 = C80487 * C312;
    const double C45005 = C80487 * C171;
    const double C44995 = C80487 * C311;
    const double C44993 = C80487 * C170;
    const double C45264 = C80487 * C499;
    const double C45258 = C80487 * C498;
    const double C49712 = C80487 * C1163;
    const double C49706 = C80487 * C1154;
    const double C50013 = C80487 * C1318;
    const double C50011 = C80487 * C1214;
    const double C50327 = C80487 * C1464;
    const double C51541 = C80487 * C1165;
    const double C51535 = C80487 * C1155;
    const double C51842 = C80487 * C1317;
    const double C51840 = C80487 * C1213;
    const double C52156 = C80487 * C1463;
    const double C79613 = C80487 * C4113;
    const double C79607 = C80487 * C4108;
    const double C79842 = C80487 * C4405;
    const double C79840 = C80487 * C4198;
    const double C80084 = C80487 * C4683;
    const double C15457 =
        (((((0 - (C80306 * C80445) / C80179) * ae) / C80179 -
           (0 * be) / C80191 + (2 * C80446) / C80179) /
              C80185 -
          ((C80306 * C80481 + 0) * be) / C80179 + C80455 - C80469) /
             C80185 +
         ((C80306 * C80489 + 0) * ae) / C80179) /
            C80185 -
        ((C80306 * (C80489 / C80185 +
                    ((C80306 * C80487 + C82635) * ae) / C80179 + C80484) +
          C82941) *
         be) /
            C80179 +
        C80487 / C80185 + ((C80306 * C80484 + C82642) * ae) / C80179 +
        2 * (C80462 / C80185 - (0 * be) / C80179);
    const double C15458 =
        (C80489 / C80185 + ((C80306 * C80487 + C82635) * ae) / C80179 +
         C80484) /
            C80185 -
        ((C80306 * (C80487 / C80185 +
                    ((C80306 * C80484 + C82642) * ae) / C80179 + 2 * C80495) +
          C82934) *
         be) /
            C80179 +
        2 * (C80484 / C80185 + ((C80306 * C80495 + C44659) * ae) / C80179);
    const double C15459 =
        (C80487 / C80185 + ((C80306 * C80484 + C82642) * ae) / C80179 +
         2 * C80495) /
            C80185 -
        ((C80306 *
              (C80484 / C80185 + ((C80306 * C80495 + C44659) * ae) / C80179) +
          C82921) *
         be) /
            C80179 +
        3 * (C80495 / C80185 + (0 * ae) / C80179);
    const double C19131 =
        C80489 / C80185 - ((C80306 * C80487 + C82635) * be) / C80179 + C80484;
    const double C19132 =
        C80487 / C80185 - ((C80306 * C80484 + C82642) * be) / C80179 + C80542;
    const double C39895 =
        C80489 / C80185 + ((C80306 * C80487 + C82635) * ae) / C80179 + C80484;
    const double C39896 =
        C80487 / C80185 + ((C80306 * C80484 + C82642) * ae) / C80179 + C80542;
    const double C62265 = C62259 - C62249;
    const double C62262 = C62256 - C62237;
    const double C64566 = C64563 - C64556;
    const double C65487 = C65484 - C65477;
    const double C79453 = C79450 - C79443;
    const double C34711 = C34701 - C34702;
    const double C37188 = C37178 - C37179;
    const double C57618 = C57608 - C57609;
    const double C72159 = C72149 - C72150;
    const double C80687 = C80686 / C80179;
    const double C61767 = C80637 * C113;
    const double C61761 = C80637 * C104;
    const double C61755 = C80637 * C111;
    const double C61749 = C80637 * C103;
    const double C62001 = C80637 * C312;
    const double C61995 = C80637 * C311;
    const double C62245 = C80637 * C499;
    const double C62243 = C80637 * C242;
    const double C62233 = C80637 * C498;
    const double C62231 = C80637 * C241;
    const double C63951 = C80637 * C703;
    const double C63945 = C80637 * C694;
    const double C64251 = C80637 * C858;
    const double C64552 = C80637 * C1004;
    const double C64550 = C80637 * C806;
    const double C64872 = C80637 * C705;
    const double C64866 = C80637 * C695;
    const double C65172 = C80637 * C857;
    const double C65473 = C80637 * C1003;
    const double C65471 = C80637 * C805;
    const double C78982 = C80637 * C1658;
    const double C78976 = C80637 * C1653;
    const double C79210 = C80637 * C1950;
    const double C79439 = C80637 * C2241;
    const double C79437 = C80637 * C1852;
    const double C30118 =
        (((((0 - (C80309 * C80595) / C80179) * ae) / C80179 -
           (0 * be) / C80191 + (2 * C80596) / C80179) /
              C80185 -
          ((C80309 * C80631 + 0) * be) / C80179 + C80605 - C80619) /
             C80185 +
         ((C80309 * C80639 + 0) * ae) / C80179) /
            C80185 -
        ((C80309 * (C80639 / C80185 +
                    ((C80309 * C80637 + C82675) * ae) / C80179 + C80634) +
          C82942) *
         be) /
            C80179 +
        C80637 / C80185 + ((C80309 * C80634 + C82682) * ae) / C80179 +
        2 * (C80612 / C80185 - (0 * be) / C80179);
    const double C30119 =
        (C80639 / C80185 + ((C80309 * C80637 + C82675) * ae) / C80179 +
         C80634) /
            C80185 -
        ((C80309 * (C80637 / C80185 +
                    ((C80309 * C80634 + C82682) * ae) / C80179 + 2 * C80645) +
          C82936) *
         be) /
            C80179 +
        2 * (C80634 / C80185 + ((C80309 * C80645 + C61595) * ae) / C80179);
    const double C30120 =
        (C80637 / C80185 + ((C80309 * C80634 + C82682) * ae) / C80179 +
         2 * C80645) /
            C80185 -
        ((C80309 *
              (C80634 / C80185 + ((C80309 * C80645 + C61595) * ae) / C80179) +
          C82924) *
         be) /
            C80179 +
        3 * (C80645 / C80185 + (0 * ae) / C80179);
    const double C34255 =
        C80639 / C80185 - ((C80309 * C80637 + C82675) * be) / C80179 + C80634;
    const double C34256 =
        C80637 / C80185 - ((C80309 * C80634 + C82682) * be) / C80179 + C80692;
    const double C57171 =
        C80639 / C80185 + ((C80309 * C80637 + C82675) * ae) / C80179 + C80634;
    const double C57172 =
        C80637 / C80185 + ((C80309 * C80634 + C82682) * ae) / C80179 + C80692;
    const double C7216 = C6510 * C705;
    const double C7214 = C6510 * C704;
    const double C7449 = C6510 * C857;
    const double C7441 = C6510 * C695;
    const double C7655 = C6510 * C1003;
    const double C9757 = C6510 * C1165;
    const double C9755 = C6510 * C1164;
    const double C9990 = C6510 * C1317;
    const double C9982 = C6510 * C1155;
    const double C10200 = C6510 * C1463;
    const double C7220 = C6512 * C703;
    const double C7218 = C6512 * C702;
    const double C7451 = C6512 * C858;
    const double C7443 = C6512 * C694;
    const double C7657 = C6512 * C1004;
    const double C9761 = C6512 * C1163;
    const double C9759 = C6512 * C1162;
    const double C9992 = C6512 * C1318;
    const double C9984 = C6512 * C1154;
    const double C10202 = C6512 * C1464;
    const double C38582 = C37889 * C705;
    const double C38580 = C37889 * C704;
    const double C38815 = C37889 * C857;
    const double C38807 = C37889 * C695;
    const double C39021 = C37889 * C1003;
    const double C53599 = C37889 * C1165;
    const double C53597 = C37889 * C1164;
    const double C53832 = C37889 * C1317;
    const double C53824 = C37889 * C1155;
    const double C54042 = C37889 * C1463;
    const double C38586 = C37891 * C703;
    const double C38584 = C37891 * C702;
    const double C38817 = C37891 * C858;
    const double C38809 = C37891 * C694;
    const double C39023 = C37891 * C1004;
    const double C53603 = C37891 * C1163;
    const double C53601 = C37891 * C1162;
    const double C53834 = C37891 * C1318;
    const double C53826 = C37891 * C1154;
    const double C54044 = C37891 * C1464;
    const double C45463 = C45457 + C45442;
    const double C45460 = C45454 + C45430;
    const double C47784 = C47781 + C47772;
    const double C48705 = C48702 + C48693;
    const double C63032 = C63029 + C63020;
    const double C7236 = C7232 - C7224;
    const double C9777 = C9773 - C9765;
    const double C38602 = C38598 - C38590;
    const double C53619 = C53615 - C53607;
    const double C14062 = C14056 + C14041;
    const double C14059 = C14053 + C14029;
    const double C27180 = C27174 + C27159;
    const double C27177 = C27171 + C27147;
    const double C67373 = C67370 + C67361;
    const double C80273 = C80251 - C80272;
    const double C14049 = C14034 - C14035;
    const double C14046 = C14022 - C14023;
    const double C27167 = C27152 - C27153;
    const double C27164 = C27140 - C27141;
    const double C67366 = C67354 - C67355;
    const double C45033 = C45027 + C45012;
    const double C45030 = C45024 + C45000;
    const double C50030 = C50027 + C50018;
    const double C51859 = C51856 + C51847;
    const double C79859 = C79856 + C79847;
    const double C19380 = C19376 - C19368;
    const double C25369 = C25365 - C25357;
    const double C40140 = C40136 - C40128;
    const double C70647 = C70643 - C70635;
    const double C80538 = C80521 - C80537;
    const double C19145 = C19131 * C111;
    const double C19137 = C19131 * C103;
    const double C19360 = C19131 * C311;
    const double C19358 = C19131 * C170;
    const double C19587 = C19131 * C498;
    const double C25142 = C19131 * C1165;
    const double C25134 = C19131 * C1155;
    const double C25349 = C19131 * C1317;
    const double C25347 = C19131 * C1213;
    const double C25574 = C19131 * C1463;
    const double C19147 = C19132 * C703;
    const double C19139 = C19132 * C694;
    const double C19364 = C19132 * C858;
    const double C19362 = C19132 * C754;
    const double C19589 = C19132 * C1004;
    const double C25144 = C19132 * C3360;
    const double C25136 = C19132 * C3348;
    const double C25353 = C19132 * C3613;
    const double C25351 = C19132 * C3441;
    const double C25576 = C19132 * C3859;
    const double C39909 = C39895 * C111;
    const double C39901 = C39895 * C103;
    const double C40120 = C39895 * C311;
    const double C40118 = C39895 * C170;
    const double C40345 = C39895 * C498;
    const double C70420 = C39895 * C1165;
    const double C70412 = C39895 * C1155;
    const double C70627 = C39895 * C1317;
    const double C70625 = C39895 * C1213;
    const double C70852 = C39895 * C1463;
    const double C39911 = C39896 * C703;
    const double C39903 = C39896 * C694;
    const double C40124 = C39896 * C858;
    const double C40122 = C39896 * C754;
    const double C40347 = C39896 * C1004;
    const double C70422 = C39896 * C3360;
    const double C70414 = C39896 * C3348;
    const double C70631 = C39896 * C3613;
    const double C70629 = C39896 * C3441;
    const double C70854 = C39896 * C3859;
    const double C62271 = C62265 + C62250;
    const double C62268 = C62262 + C62238;
    const double C64569 = C64566 + C64557;
    const double C65490 = C65487 + C65478;
    const double C79456 = C79453 + C79444;
    const double C34715 = C34711 - C34703;
    const double C37192 = C37188 - C37180;
    const double C57622 = C57618 - C57610;
    const double C72163 = C72159 - C72151;
    const double C80688 = C80671 - C80687;
    const double C34269 = C34255 * C111;
    const double C34261 = C34255 * C103;
    const double C34482 = C34255 * C311;
    const double C34695 = C34255 * C498;
    const double C34693 = C34255 * C241;
    const double C36753 = C34255 * C705;
    const double C36745 = C34255 * C695;
    const double C36963 = C34255 * C857;
    const double C37172 = C34255 * C1003;
    const double C37170 = C34255 * C805;
    const double C34271 = C34256 * C1163;
    const double C34263 = C34256 * C1154;
    const double C34484 = C34256 * C1318;
    const double C34699 = C34256 * C1464;
    const double C34697 = C34256 * C1266;
    const double C36755 = C34256 * C3360;
    const double C36747 = C34256 * C3348;
    const double C36965 = C34256 * C3613;
    const double C37176 = C34256 * C3859;
    const double C37174 = C34256 * C3527;
    const double C57185 = C57171 * C111;
    const double C57177 = C57171 * C103;
    const double C57391 = C57171 * C311;
    const double C57602 = C57171 * C498;
    const double C57600 = C57171 * C241;
    const double C71730 = C57171 * C705;
    const double C71722 = C57171 * C695;
    const double C71936 = C57171 * C857;
    const double C72143 = C57171 * C1003;
    const double C72141 = C57171 * C805;
    const double C57187 = C57172 * C1163;
    const double C57179 = C57172 * C1154;
    const double C57393 = C57172 * C1318;
    const double C57606 = C57172 * C1464;
    const double C57604 = C57172 * C1266;
    const double C71732 = C57172 * C3360;
    const double C71724 = C57172 * C3348;
    const double C71938 = C57172 * C3613;
    const double C72147 = C57172 * C3859;
    const double C72145 = C57172 * C3527;
    const double C7240 = C7236 + C7225;
    const double C9781 = C9777 + C9766;
    const double C38606 = C38602 + C38591;
    const double C53623 = C53619 + C53608;
    const double C80274 = C80273 - C80253;
    const double C14055 = C14049 - C14036;
    const double C14052 = C14046 - C14024;
    const double C27173 = C27167 - C27154;
    const double C27170 = C27164 - C27142;
    const double C67369 = C67366 - C67356;
    const double C19384 = C19380 + C19369;
    const double C25373 = C25369 + C25358;
    const double C40144 = C40140 + C40129;
    const double C70651 = C70647 + C70636;
    const double C80539 = C80538 - C80512;
    const double C34719 = C34715 + C34704;
    const double C37196 = C37192 + C37181;
    const double C57626 = C57622 + C57611;
    const double C72167 = C72163 + C72152;
    const double C80689 = C80688 - C80662;
    const double C45436 = C80274 * C1653;
    const double C45424 = C80274 * C695;
    const double C47766 = C80274 * C3348;
    const double C48687 = C80274 * C1155;
    const double C63014 = C80274 * C4108;
    const double C93 =
        (((ae * -2 * C80178) / C80237 -
          (((C80177 * C80245) / C80184 + 2 * C80214) * be) / C80179 -
          C80246 / C80184) /
             C80185 +
         ((C80177 * C80267 + 2 * C80228) * ae) / C80179) /
            C80185 -
        ((C80177 * (C80267 / C80185 +
                    ((C80177 * C80274 + 2 * C80234) * ae) / C80179 + C80269) +
          2 * (C80228 / C80185 + ((C80177 * C80234 + C82528) * ae) / C80179 +
               C80230)) *
         be) /
            C80179 +
        C80274 / C80185 + ((C80177 * C80269 + 2 * C80230) * ae) / C80179 +
        (-2 * C80248) / (C80179 * 4 * C80184);
    const double C95 =
        (C80267 / C80185 + ((C80177 * C80274 + 2 * C80234) * ae) / C80179 +
         C80269) /
            C80185 -
        ((C80177 * (C80274 / C80185 +
                    ((C80177 * C80269 + 2 * C80230) * ae) / C80179 +
                    (-2 * C80248) / C80285) +
          2 * (C80234 / C80185 + ((C80177 * C80230 + C82536) * ae) / C80179 +
               C80284)) *
         be) /
            C80179 +
        2 * (C80269 / C80185 + ((C80284 - C80252 / C80285) * ae) / C80179);
    const double C97 =
        (C80274 / C80185 + ((C80177 * C80269 + 2 * C80230) * ae) / C80179 +
         (-2 * C80248) / C80285) /
            C80185 -
        ((C80177 *
              (C80269 / C80185 + ((C80284 - C80252 / C80285) * ae) / C80179) +
          2 * (C80230 / C80185 + ((C80177 * C80280 + C44656) * ae) / C80179)) *
         be) /
            C80179 +
        (-3 * C80248) / (C80179 * 4 * C80237);
    const double C6511 = C80267 / C80185 -
                         ((C80177 * C80274 + 2 * C80234) * be) / C80179 +
                         C80269;
    const double C6513 = C80274 / C80185 -
                         ((C80177 * C80269 + 2 * C80230) * be) / C80179 +
                         (-2 * C80248) / C80285;
    const double C37890 = C80267 / C80185 +
                          ((C80177 * C80274 + 2 * C80234) * ae) / C80179 +
                          C80269;
    const double C37892 = C80274 / C80185 +
                          ((C80177 * C80269 + 2 * C80230) * ae) / C80179 +
                          (-2 * C80248) / C80285;
    const double C14061 = C14055 + C14037;
    const double C14058 = C14052 + C14025;
    const double C27179 = C27173 + C27155;
    const double C27176 = C27170 + C27143;
    const double C67372 = C67369 + C67357;
    const double C45006 = C80539 * C104;
    const double C44994 = C80539 * C103;
    const double C50012 = C80539 * C1154;
    const double C51841 = C80539 * C1155;
    const double C79841 = C80539 * C4108;
    const double C15600 =
        (((ae * -2 * C80445) / C80237 -
          (((C80306 * C80515) / C80184 + 2 * C80481) * be) / C80179 -
          C80516 / C80184) /
             C80185 +
         ((C80306 * C80535 + 2 * C80489) * ae) / C80179) /
            C80185 -
        ((C80306 * (C80535 / C80185 +
                    ((C80306 * C80539 + 2 * C80487) * ae) / C80179 + C80532) +
          2 * (C80489 / C80185 + ((C80306 * C80487 + C82635) * ae) / C80179 +
               C80484)) *
         be) /
            C80179 +
        C80539 / C80185 + ((C80306 * C80532 + 2 * C80484) * ae) / C80179 +
        (-2 * C80343) / C80285;
    const double C15601 =
        (C80535 / C80185 + ((C80306 * C80539 + 2 * C80487) * ae) / C80179 +
         C80532) /
            C80185 -
        ((C80306 * (C80539 / C80185 +
                    ((C80306 * C80532 + 2 * C80484) * ae) / C80179 +
                    (-2 * C80343) / C80285) +
          2 * (C80487 / C80185 + ((C80306 * C80484 + C82642) * ae) / C80179 +
               C80542)) *
         be) /
            C80179 +
        2 * (C80532 / C80185 + ((C80542 - C80346 / C80285) * ae) / C80179);
    const double C15602 =
        (C80539 / C80185 + ((C80306 * C80532 + 2 * C80484) * ae) / C80179 +
         (-2 * C80343) / C80285) /
            C80185 -
        ((C80306 *
              (C80532 / C80185 + ((C80542 - C80346 / C80285) * ae) / C80179) +
          2 * (C80484 / C80185 + ((C80306 * C80495 + C44659) * ae) / C80179)) *
         be) /
            C80179 +
        (-3 * C80343) / (C80179 * 4 * C80237);
    const double C19353 = C80535 / C80185 -
                          ((C80306 * C80539 + 2 * C80487) * be) / C80179 +
                          C80532;
    const double C19354 = C80539 / C80185 -
                          ((C80306 * C80532 + 2 * C80484) * be) / C80179 +
                          (-2 * C80343) / C80285;
    const double C40113 = C80535 / C80185 +
                          ((C80306 * C80539 + 2 * C80487) * ae) / C80179 +
                          C80532;
    const double C40114 = C80539 / C80185 +
                          ((C80306 * C80532 + 2 * C80484) * ae) / C80179 +
                          (-2 * C80343) / C80285;
    const double C62244 = C80689 * C104;
    const double C62232 = C80689 * C103;
    const double C64551 = C80689 * C694;
    const double C65472 = C80689 * C695;
    const double C79438 = C80689 * C1653;
    const double C30393 =
        (((ae * -2 * C80595) / C80237 -
          (((C80309 * C80665) / C80184 + 2 * C80631) * be) / C80179 -
          C80666 / C80184) /
             C80185 +
         ((C80309 * C80685 + 2 * C80639) * ae) / C80179) /
            C80185 -
        ((C80309 * (C80685 / C80185 +
                    ((C80309 * C80689 + 2 * C80637) * ae) / C80179 + C80682) +
          2 * (C80639 / C80185 + ((C80309 * C80637 + C82675) * ae) / C80179 +
               C80634)) *
         be) /
            C80179 +
        C80689 / C80185 + ((C80309 * C80682 + 2 * C80634) * ae) / C80179 +
        (-2 * C80369) / C80285;
    const double C30394 =
        (C80685 / C80185 + ((C80309 * C80689 + 2 * C80637) * ae) / C80179 +
         C80682) /
            C80185 -
        ((C80309 * (C80689 / C80185 +
                    ((C80309 * C80682 + 2 * C80634) * ae) / C80179 +
                    (-2 * C80369) / C80285) +
          2 * (C80637 / C80185 + ((C80309 * C80634 + C82682) * ae) / C80179 +
               C80692)) *
         be) /
            C80179 +
        2 * (C80682 / C80185 + ((C80692 - C80372 / C80285) * ae) / C80179);
    const double C30395 =
        (C80689 / C80185 + ((C80309 * C80682 + 2 * C80634) * ae) / C80179 +
         (-2 * C80369) / C80285) /
            C80185 -
        ((C80309 *
              (C80682 / C80185 + ((C80692 - C80372 / C80285) * ae) / C80179) +
          2 * (C80634 / C80185 + ((C80309 * C80645 + C61595) * ae) / C80179)) *
         be) /
            C80179 +
        (-3 * C80369) / (C80179 * 4 * C80237);
    const double C34688 = C80685 / C80185 -
                          ((C80309 * C80689 + 2 * C80637) * be) / C80179 +
                          C80682;
    const double C34689 = C80689 / C80185 -
                          ((C80309 * C80682 + 2 * C80634) * be) / C80179 +
                          (-2 * C80369) / C80285;
    const double C57595 = C80685 / C80185 +
                          ((C80309 * C80689 + 2 * C80637) * ae) / C80179 +
                          C80682;
    const double C57596 = C80689 / C80185 +
                          ((C80309 * C80682 + 2 * C80634) * ae) / C80179 +
                          (-2 * C80369) / C80285;
    const double C45450 = C45435 - C45436;
    const double C45447 = C45423 - C45424;
    const double C47777 = C47765 - C47766;
    const double C48698 = C48686 - C48687;
    const double C63025 = C63013 - C63014;
    const double C7215 = C6511 * C695;
    const double C9756 = C6511 * C1155;
    const double C7219 = C6513 * C694;
    const double C9760 = C6513 * C1154;
    const double C38581 = C37890 * C695;
    const double C53598 = C37890 * C1155;
    const double C38585 = C37892 * C694;
    const double C53602 = C37892 * C1154;
    const double C45020 = C45005 - C45006;
    const double C45017 = C44993 - C44994;
    const double C50023 = C50011 - C50012;
    const double C51852 = C51840 - C51841;
    const double C79852 = C79840 - C79841;
    const double C19359 = C19353 * C103;
    const double C25348 = C19353 * C1155;
    const double C19363 = C19354 * C694;
    const double C25352 = C19354 * C3348;
    const double C40119 = C40113 * C103;
    const double C70626 = C40113 * C1155;
    const double C40123 = C40114 * C694;
    const double C70630 = C40114 * C3348;
    const double C62258 = C62243 - C62244;
    const double C62255 = C62231 - C62232;
    const double C64562 = C64550 - C64551;
    const double C65483 = C65471 - C65472;
    const double C79449 = C79437 - C79438;
    const double C34694 = C34688 * C103;
    const double C37171 = C34688 * C695;
    const double C34698 = C34689 * C1154;
    const double C37175 = C34689 * C3348;
    const double C57601 = C57595 * C103;
    const double C72142 = C57595 * C695;
    const double C57605 = C57596 * C1154;
    const double C72146 = C57596 * C3348;
    const double C45456 = C45450 - C45437;
    const double C45453 = C45447 - C45425;
    const double C47780 = C47777 - C47767;
    const double C48701 = C48698 - C48688;
    const double C63028 = C63025 - C63015;
    const double C7230 = C7214 - C7215;
    const double C9771 = C9755 - C9756;
    const double C7231 = C7218 - C7219;
    const double C9772 = C9759 - C9760;
    const double C38596 = C38580 - C38581;
    const double C53613 = C53597 - C53598;
    const double C38597 = C38584 - C38585;
    const double C53614 = C53601 - C53602;
    const double C45026 = C45020 - C45007;
    const double C45023 = C45017 - C44995;
    const double C50026 = C50023 - C50013;
    const double C51855 = C51852 - C51842;
    const double C79855 = C79852 - C79842;
    const double C19374 = C19358 - C19359;
    const double C25363 = C25347 - C25348;
    const double C19375 = C19362 - C19363;
    const double C25364 = C25351 - C25352;
    const double C40134 = C40118 - C40119;
    const double C70641 = C70625 - C70626;
    const double C40135 = C40122 - C40123;
    const double C70642 = C70629 - C70630;
    const double C62264 = C62258 - C62245;
    const double C62261 = C62255 - C62233;
    const double C64565 = C64562 - C64552;
    const double C65486 = C65483 - C65473;
    const double C79452 = C79449 - C79439;
    const double C34709 = C34693 - C34694;
    const double C37186 = C37170 - C37171;
    const double C34710 = C34697 - C34698;
    const double C37187 = C37174 - C37175;
    const double C57616 = C57600 - C57601;
    const double C72157 = C72141 - C72142;
    const double C57617 = C57604 - C57605;
    const double C72158 = C72145 - C72146;
    const double C45462 = C45456 + C45438;
    const double C45459 = C45453 + C45426;
    const double C47783 = C47780 + C47768;
    const double C48704 = C48701 + C48689;
    const double C63031 = C63028 + C63016;
    const double C7234 = C7230 - C7216;
    const double C9775 = C9771 - C9757;
    const double C7235 = C7231 - C7220;
    const double C9776 = C9772 - C9761;
    const double C38600 = C38596 - C38582;
    const double C53617 = C53613 - C53599;
    const double C38601 = C38597 - C38586;
    const double C53618 = C53614 - C53603;
    const double C45032 = C45026 + C45008;
    const double C45029 = C45023 + C44996;
    const double C50029 = C50026 + C50014;
    const double C51858 = C51855 + C51843;
    const double C79858 = C79855 + C79843;
    const double C19378 = C19374 - C19360;
    const double C25367 = C25363 - C25349;
    const double C19379 = C19375 - C19364;
    const double C25368 = C25364 - C25353;
    const double C40138 = C40134 - C40120;
    const double C70645 = C70641 - C70627;
    const double C40139 = C40135 - C40124;
    const double C70646 = C70642 - C70631;
    const double C62270 = C62264 + C62246;
    const double C62267 = C62261 + C62234;
    const double C64568 = C64565 + C64553;
    const double C65489 = C65486 + C65474;
    const double C79455 = C79452 + C79440;
    const double C34713 = C34709 - C34695;
    const double C37190 = C37186 - C37172;
    const double C34714 = C34710 - C34699;
    const double C37191 = C37187 - C37176;
    const double C57620 = C57616 - C57602;
    const double C72161 = C72157 - C72143;
    const double C57621 = C57617 - C57606;
    const double C72162 = C72158 - C72147;
    const double C7238 = C7234 + C7217;
    const double C9779 = C9775 + C9758;
    const double C7239 = C7235 + C7221;
    const double C9780 = C9776 + C9762;
    const double C38604 = C38600 + C38583;
    const double C53621 = C53617 + C53600;
    const double C38605 = C38601 + C38587;
    const double C53622 = C53618 + C53604;
    const double C19382 = C19378 + C19361;
    const double C25371 = C25367 + C25350;
    const double C19383 = C19379 + C19365;
    const double C25372 = C25368 + C25354;
    const double C40142 = C40138 + C40121;
    const double C70649 = C70645 + C70628;
    const double C40143 = C40139 + C40125;
    const double C70650 = C70646 + C70632;
    const double C34717 = C34713 + C34696;
    const double C37194 = C37190 + C37173;
    const double C34718 = C34714 + C34700;
    const double C37195 = C37191 + C37177;
    const double C57624 = C57620 + C57603;
    const double C72165 = C72161 + C72144;
    const double C57625 = C57621 + C57607;
    const double C72166 = C72162 + C72148;
    d2eexx[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C80234 * C108 - C80274 * C102 - C80234 * C109 + C82528 * C120 +
            C80230 * C110 - C80269 * C103 - C80230 * C111 + C82536 * C121 +
            C80280 * C112 - C44665 * C104 - C80280 * C113 + C44656 * C122) *
               C82592 * C82635 +
           (C80234 * C704 - C80274 * C695 - C80234 * C705 + C82528 * C710 +
            C80230 * C702 - C80269 * C694 - C80230 * C703 + C82536 * C709 +
            C80280 * C700 - C44665 * C693 - C80280 * C701 + C44656 * C708) *
               C82592 * C82642 +
           (C80234 * C1657 - C80274 * C1653 - C80234 * C1658 + C82528 * C1665 +
            C80230 * C1659 - C80269 * C1654 - C80230 * C1660 + C82536 * C1666 +
            C80280 * C1661 - C44665 * C1655 - C80280 * C1662 + C44656 * C1667) *
               C82592 * C44659) *
              C82938 * C82939 * C90 -
          ((C80280 * C1663 - C44665 * C1656 - C80280 * C1664 + C44656 * C1668 +
            C80230 * C1661 - C80269 * C1655 - C80230 * C1662 + C82536 * C1667 +
            C80234 * C1659 - C80274 * C1654 - C80234 * C1660 + C82528 * C1666) *
               C82592 * C44659 +
           (C80280 * C698 - C44665 * C692 - C80280 * C699 + C44656 * C707 +
            C80230 * C700 - C80269 * C693 - C80230 * C701 + C82536 * C708 +
            C80234 * C702 - C80274 * C694 - C80234 * C703 + C82528 * C709) *
               C82592 * C82642 +
           (C80280 * C114 - C44665 * C105 - C80280 * C115 + C44656 * C123 +
            C80230 * C112 - C80269 * C104 - C80230 * C113 + C82536 * C122 +
            C80234 * C110 - C80274 * C103 - C80234 * C111 + C82528 * C121) *
               C82592 * C82635) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexy[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C82635 * C169 - C80487 * C102 + C82642 * C753 - C80484 * C695 +
            C44659 * C1746 - C80495 * C1653) *
               C80234 +
           (C82635 * C175 - C80487 * C109 + C82642 * C758 - C80484 * C705 +
            C44659 * C1750 - C80495 * C1658) *
               C82528 +
           (C44744 - C44745 + C44746 - C44747 + C44748 - C44749) * C80230 +
           (C44750 - C44751 + C44752 - C44753 + C44754 - C44755) * C82536 +
           (C44756 - C44757 + C44758 - C44759 + C44760 - C44761) * C80280 +
           (C44762 - C44763 + C44764 - C44765 + C44766 - C44767) * C44656) *
              C82592 * C82938 * C82939 * C90 +
          ((C44745 - C44744 + C44747 - C44746 + C44749 - C44748) * C80234 +
           (C44751 - C44750 + C44753 - C44752 + C44755 - C44754) * C82528 +
           (C44757 - C44756 + C44759 - C44758 + C44761 - C44760) * C80230 +
           (C44763 - C44762 + C44765 - C44764 + C44767 - C44766) * C82536 +
           (C80487 * C105 - C82635 * C172 + C80484 * C692 - C82642 * C756 +
            C80495 * C1656 - C44659 * C1749) *
               C80280 +
           (C80487 * C115 - C82635 * C178 + C80484 * C699 - C82642 * C761 +
            C80495 * C1664 - C44659 * C1753) *
               C44656) *
              C82592 * C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexz[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C82592 * C240 - C239 * C102) * C80234 +
                     (C82592 * C246 - C239 * C109) * C82528 +
                     (C253 - C254) * C80230 + (C255 - C256) * C82536 +
                     (C257 - C258) * C80280 + (C259 - C260) * C44656) *
                        C82635 +
                    ((C2740 - C2741) * C80234 + (C2742 - C2743) * C82528 +
                     (C1861 - C1862) * C80230 + (C1863 - C1864) * C82536 +
                     (C1865 - C1866) * C80280 + (C1867 - C1868) * C44656) *
                        C82642 +
                    ((C2744 - C2745) * C80234 + (C2746 - C2747) * C82528 +
                     (C1869 - C1870) * C80230 + (C1871 - C1872) * C82536 +
                     (C1873 - C1874) * C80280 + (C1875 - C1876) * C44656) *
                        C44659) *
                       C82938 * C82939 * C90 +
                   (((C254 - C253) * C80234 + (C256 - C255) * C82528 +
                     (C258 - C257) * C80230 + (C260 - C259) * C82536 +
                     (C262 - C261) * C80280 + (C264 - C263) * C44656) *
                        C82635 +
                    ((C1862 - C1861) * C80234 + (C1864 - C1863) * C82528 +
                     (C1866 - C1865) * C80230 + (C1868 - C1867) * C82536 +
                     (C6678 - C6677) * C80280 + (C6680 - C6679) * C44656) *
                        C82642 +
                    ((C1870 - C1869) * C80234 + (C1872 - C1871) * C82528 +
                     (C1874 - C1873) * C80230 + (C1876 - C1875) * C82536 +
                     (C239 * C1656 - C82592 * C1855) * C80280 +
                     (C239 * C1664 - C82592 * C1859) * C44656) *
                        C44659) *
                       C82938 * C82939 * C91)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C82528 * C108 - C80234 * C102 + C82536 * C110 -
                     C80230 * C103 + C44656 * C112 - C80280 * C104) *
                        C80487 +
                    (C82528 * C316 - C80234 * C310 + C82536 * C317 -
                     C80230 * C311 + C44656 * C318 - C80280 * C312) *
                        C82635 +
                    (C82528 * C704 - C80234 * C695 + C82536 * C702 -
                     C80230 * C694 + C44656 * C700 - C80280 * C693) *
                        C80484 +
                    (C82528 * C862 - C80234 * C857 + C82536 * C863 -
                     C80230 * C858 + C44656 * C864 - C80280 * C859) *
                        C82642 +
                    (C82528 * C1657 - C80234 * C1653 + C82536 * C1659 -
                     C80230 * C1654 + C44656 * C1661 - C80280 * C1655) *
                        C80495 +
                    (C82528 * C1954 - C80234 * C1950 + C82536 * C1955 -
                     C80230 * C1951 + C44656 * C1956 - C80280 * C1952) *
                        C44659) *
                       C82592 * C82938 * C82939 * C90 +
                   ((C80234 * C103 - C82528 * C110 + C80230 * C104 -
                     C82536 * C112 + C80280 * C105 - C44656 * C114) *
                        C80487 +
                    (C80234 * C311 - C82528 * C317 + C80230 * C312 -
                     C82536 * C318 + C80280 * C313 - C44656 * C319) *
                        C82635 +
                    (C80234 * C694 - C82528 * C702 + C80230 * C693 -
                     C82536 * C700 + C80280 * C692 - C44656 * C698) *
                        C80484 +
                    (C80234 * C858 - C82528 * C863 + C80230 * C859 -
                     C82536 * C864 + C80280 * C860 - C44656 * C865) *
                        C82642 +
                    (C80234 * C1654 - C82528 * C1659 + C80230 * C1655 -
                     C82536 * C1661 + C80280 * C1656 - C44656 * C1663) *
                        C80495 +
                    (C80234 * C1951 - C82528 * C1955 + C80230 * C1952 -
                     C82536 * C1956 + C80280 * C1953 - C44656 * C1957) *
                        C44659) *
                       C82592 * C82938 * C82939 * C91)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C80487 * C169 - C80539 * C102 - C80487 * C310 + C82635 * C365 +
            C80484 * C753 - C80532 * C695 - C80484 * C857 + C82642 * C913 +
            C80495 * C1746 - C44991 * C1653 - C80495 * C1950 + C44659 * C2035) *
               C82528 +
           (C45029 + C45030 + C45031) * C82536 +
           (C45032 + C45033 + C45034) * C44656) *
              C82592 * C82938 * C82939 * C90 -
          ((C80495 * C1749 - C44991 * C1656 - C80495 * C1953 + C44659 * C2038 +
            C80484 * C756 - C80532 * C692 - C80484 * C860 + C82642 * C910 +
            C80487 * C172 - C80539 * C105 - C80487 * C313 + C82635 * C368) *
               C44656 +
           (C45034 + C45033 + C45032) * C82536 +
           (C45031 + C45030 + C45029) * C82528) *
              C82592 * C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C82592 * C240 - C239 * C102) * C80487 +
                     (C82592 * C441 - C239 * C310) * C82635 +
                     (C2740 - C2741) * C80484 + (C3006 - C3007) * C82642 +
                     (C2744 - C2745) * C80495 + (C3008 - C3009) * C44659) *
                        C82528 +
                    ((C253 - C254) * C80487 + (C448 - C449) * C82635 +
                     (C1861 - C1862) * C80484 + (C2160 - C2161) * C82642 +
                     (C1869 - C1870) * C80495 + (C2162 - C2163) * C44659) *
                        C82536 +
                    ((C257 - C258) * C80487 + (C450 - C451) * C82635 +
                     (C1865 - C1866) * C80484 + (C2164 - C2165) * C82642 +
                     (C1873 - C1874) * C80495 + (C2166 - C2167) * C44659) *
                        C44656) *
                       C82938 * C82939 * C90 +
                   (((C254 - C253) * C80487 + (C449 - C448) * C82635 +
                     (C1862 - C1861) * C80484 + (C2161 - C2160) * C82642 +
                     (C1870 - C1869) * C80495 + (C2163 - C2162) * C44659) *
                        C82528 +
                    ((C258 - C257) * C80487 + (C451 - C450) * C82635 +
                     (C1866 - C1865) * C80484 + (C2165 - C2164) * C82642 +
                     (C1874 - C1873) * C80495 + (C2167 - C2166) * C44659) *
                        C82536 +
                    ((C262 - C261) * C80487 + (C453 - C452) * C82635 +
                     (C6678 - C6677) * C80484 + (C6924 - C6923) * C82642 +
                     (C239 * C1656 - C82592 * C1855) * C80495 +
                     (C239 * C1953 - C82592 * C2158) * C44659) *
                        C44656) *
                       C82938 * C82939 * C91)) /
                 (p * q * std::sqrt(p + q));
    d2eezx[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C82528 * C108 - C80234 * C102 + C82536 * C110 -
                      C80230 * C103 + C44656 * C112 - C80280 * C104) *
                         C239 +
                     (C82528 * C503 - C80234 * C497 + C82536 * C504 -
                      C80230 * C498 + C44656 * C505 - C80280 * C499) *
                         C82592) *
                        C82635 +
                    ((C82528 * C704 - C80234 * C695 + C82536 * C702 -
                      C80230 * C694 + C44656 * C700 - C80280 * C693) *
                         C239 +
                     (C82528 * C1008 - C80234 * C1003 + C82536 * C1009 -
                      C80230 * C1004 + C44656 * C1010 - C80280 * C1005) *
                         C82592) *
                        C82642 +
                    ((C82528 * C1657 - C80234 * C1653 + C82536 * C1659 -
                      C80230 * C1654 + C44656 * C1661 - C80280 * C1655) *
                         C239 +
                     (C82528 * C2245 - C80234 * C2241 + C82536 * C2246 -
                      C80230 * C2242 + C44656 * C2247 - C80280 * C2243) *
                         C82592) *
                        C44659) *
                       C82938 * C82939 * C90 +
                   (((C80234 * C103 - C82528 * C110 + C80230 * C104 -
                      C82536 * C112 + C80280 * C105 - C44656 * C114) *
                         C239 +
                     (C80234 * C498 - C82528 * C504 + C80230 * C499 -
                      C82536 * C505 + C80280 * C500 - C44656 * C506) *
                         C82592) *
                        C82635 +
                    ((C80234 * C694 - C82528 * C702 + C80230 * C693 -
                      C82536 * C700 + C80280 * C692 - C44656 * C698) *
                         C239 +
                     (C80234 * C1004 - C82528 * C1009 + C80230 * C1005 -
                      C82536 * C1010 + C80280 * C1006 - C44656 * C1011) *
                         C82592) *
                        C82642 +
                    ((C80234 * C1654 - C82528 * C1659 + C80230 * C1655 -
                      C82536 * C1661 + C80280 * C1656 - C44656 * C1663) *
                         C239 +
                     (C80234 * C2242 - C82528 * C2246 + C80230 * C2243 -
                      C82536 * C2247 + C80280 * C2244 - C44656 * C2248) *
                         C82592) *
                        C44659) *
                       C82938 * C82939 * C91)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82635 * C169 - C80487 * C102 + C82642 * C753 - C80484 * C695 +
             C44659 * C1746 - C80495 * C1653) *
                C239 +
            (C82635 * C551 - C80487 * C497 + C82642 * C1055 - C80484 * C1003 +
             C44659 * C2323 - C80495 * C2241) *
                C82592) *
               C82528 +
           ((C44744 - C44745 + C44746 - C44747 + C44748 - C44749) * C239 +
            (C45257 - C45258 + C45259 - C45260 + C45261 - C45262) * C82592) *
               C82536 +
           ((C44756 - C44757 + C44758 - C44759 + C44760 - C44761) * C239 +
            (C45263 - C45264 + C45265 - C45266 + C45267 - C45268) * C82592) *
               C44656) *
              C82938 * C82939 * C90 +
          (((C44745 - C44744 + C44747 - C44746 + C44749 - C44748) * C239 +
            (C45258 - C45257 + C45260 - C45259 + C45262 - C45261) * C82592) *
               C82528 +
           ((C44757 - C44756 + C44759 - C44758 + C44761 - C44760) * C239 +
            (C45264 - C45263 + C45266 - C45265 + C45268 - C45267) * C82592) *
               C82536 +
           ((C80487 * C105 - C82635 * C172 + C80484 * C692 - C82642 * C756 +
             C80495 * C1656 - C44659 * C1749) *
                C239 +
            (C80487 * C500 - C82635 * C554 + C80484 * C1006 - C82642 * C1058 +
             C80495 * C2244 - C44659 * C2326) *
                C82592) *
               C44656) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezz[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82635 +
            C3268 * C82642 + C3269 * C44659) *
               C82528 +
           (C45343 + C45344 + C45345) * C82536 +
           (C45346 + C45347 + C45348) * C44656) *
              C82938 * C82939 * C90 -
          (((C239 * C1855 - C607 * C1656 - C239 * C2244 + C82592 * C2416) *
                C44659 +
            C7146 * C82642 + C641 * C82635) *
               C44656 +
           (C45348 + C45347 + C45346) * C82536 +
           (C45345 + C45344 + C45343) * C82528) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexx[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C80234 * C108 - C80274 * C102 - C80234 * C109 + C82528 * C120 +
            C80230 * C110 - C80269 * C103 - C80230 * C111 + C82536 * C121 +
            C80280 * C112 - C44665 * C104 - C80280 * C113 + C44656 * C122) *
               C82592 * C82635 +
           (C45459 + C45460 + C45461) * C82592 * C82642 +
           (C45462 + C45463 + C45464) * C82592 * C44659) *
              C82938 * C688 -
          ((C80280 * C2528 - C44665 * C2525 - C80280 * C2529 + C44656 * C2534 +
            C80230 * C2530 - C80269 * C2526 - C80230 * C2531 + C82536 * C2535 +
            C80234 * C2532 - C80274 * C2527 - C80234 * C2533 + C82528 * C2536) *
               C82592 * C44659 +
           (C45464 + C45463 + C45462) * C82592 * C82642 +
           (C45461 + C45460 + C45459) * C82592 * C82635) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eexy[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C82635 * C169 - C80487 * C102 + C82642 * C753 - C80484 * C695 +
            C44659 * C1746 - C80495 * C1653) *
               C80234 +
           (C82635 * C175 - C80487 * C109 + C82642 * C758 - C80484 * C705 +
            C44659 * C1750 - C80495 * C1658) *
               C82528 +
           (C44744 - C44745 + C44746 - C44747 + C44748 - C44749) * C80230 +
           (C44750 - C44751 + C44752 - C44753 + C44754 - C44755) * C82536 +
           (C44756 - C44757 + C44758 - C44759 + C44760 - C44761) * C80280 +
           (C44762 - C44763 + C44764 - C44765 + C44766 - C44767) * C44656) *
              C82592 * C82938 * C688 +
          ((C80487 * C695 - C82635 * C753 + C80484 * C1653 - C82642 * C1746 +
            C80495 * C2527 - C44659 * C2653) *
               C80234 +
           (C80487 * C705 - C82635 * C758 + C80484 * C1658 - C82642 * C1750 +
            C80495 * C2533 - C44659 * C2656) *
               C82528 +
           (C80487 * C694 - C82635 * C754 + C80484 * C1654 - C82642 * C1747 +
            C80495 * C2526 - C44659 * C2654) *
               C80230 +
           (C80487 * C703 - C82635 * C759 + C80484 * C1660 - C82642 * C1751 +
            C80495 * C2531 - C44659 * C2657) *
               C82536 +
           (C80487 * C693 - C82635 * C755 + C80484 * C1655 - C82642 * C1748 +
            C80495 * C2525 - C44659 * C2655) *
               C80280 +
           (C80487 * C701 - C82635 * C760 + C80484 * C1662 - C82642 * C1752 +
            C80495 * C2529 - C44659 * C2658) *
               C44656) *
              C82592 * C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eexz[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C82592 * C240 - C239 * C102) * C80234 +
                     (C82592 * C246 - C239 * C109) * C82528 +
                     (C253 - C254) * C80230 + (C255 - C256) * C82536 +
                     (C257 - C258) * C80280 + (C259 - C260) * C44656) *
                        C82635 +
                    ((C2740 - C2741) * C80234 + (C2742 - C2743) * C82528 +
                     (C1861 - C1862) * C80230 + (C1863 - C1864) * C82536 +
                     (C1865 - C1866) * C80280 + (C1867 - C1868) * C44656) *
                        C82642 +
                    ((C2744 - C2745) * C80234 + (C2746 - C2747) * C82528 +
                     (C1869 - C1870) * C80230 + (C1871 - C1872) * C82536 +
                     (C1873 - C1874) * C80280 + (C1875 - C1876) * C44656) *
                        C44659) *
                       C82938 * C688 +
                   (((C2741 - C2740) * C80234 + (C2743 - C2742) * C82528 +
                     (C1862 - C1861) * C80230 + (C1864 - C1863) * C82536 +
                     (C1866 - C1865) * C80280 + (C1868 - C1867) * C44656) *
                        C82635 +
                    ((C2745 - C2744) * C80234 + (C2747 - C2746) * C82528 +
                     (C1870 - C1869) * C80230 + (C1872 - C1871) * C82536 +
                     (C1874 - C1873) * C80280 + (C1876 - C1875) * C44656) *
                        C82642 +
                    ((C15953 - C15952) * C80234 + (C15955 - C15954) * C82528 +
                     (C19219 - C19218) * C80230 + (C19221 - C19220) * C82536 +
                     (C239 * C2525 - C82592 * C2735) * C80280 +
                     (C239 * C2529 - C82592 * C2738) * C44656) *
                        C44659) *
                       C82938 * C689) *
                  C82940) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C82528 * C108 - C80234 * C102 + C82536 * C110 - C80230 * C103 +
            C44656 * C112 - C80280 * C104) *
               C80487 +
           (C82528 * C316 - C80234 * C310 + C82536 * C317 - C80230 * C311 +
            C44656 * C318 - C80280 * C312) *
               C82635 +
           (C45687 - C45688 + C45689 - C45690 + C45691 - C45692) * C80484 +
           (C45693 - C45694 + C45695 - C45696 + C45697 - C45698) * C82642 +
           (C45699 - C45700 + C45701 - C45702 + C45703 - C45704) * C80495 +
           (C45705 - C45706 + C45707 - C45708 + C45709 - C45710) * C44659) *
              C82592 * C82938 * C688 +
          ((C45688 - C45687 + C45690 - C45689 + C45692 - C45691) * C80487 +
           (C45694 - C45693 + C45696 - C45695 + C45698 - C45697) * C82635 +
           (C45700 - C45699 + C45702 - C45701 + C45704 - C45703) * C80484 +
           (C45706 - C45705 + C45708 - C45707 + C45710 - C45709) * C82642 +
           (C80234 * C2527 - C82528 * C2532 + C80230 * C2526 - C82536 * C2530 +
            C80280 * C2525 - C44656 * C2528) *
               C80495 +
           (C80234 * C2821 - C82528 * C2824 + C80230 * C2822 - C82536 * C2825 +
            C80280 * C2823 - C44656 * C2826) *
               C44659) *
              C82592 * C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyy[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C80487 * C169 - C80539 * C102 - C80487 * C310 + C82635 * C365 +
            C80484 * C753 - C80532 * C695 - C80484 * C857 + C82642 * C913 +
            C80495 * C1746 - C44991 * C1653 - C80495 * C1950 + C44659 * C2035) *
               C82528 +
           (C45029 + C45030 + C45031) * C82536 +
           (C45032 + C45033 + C45034) * C44656) *
              C82592 * C82938 * C688 -
          ((C80495 * C2655 - C44991 * C2525 - C80495 * C2823 + C44659 * C2925 +
            C80484 * C1748 - C80532 * C1655 - C80484 * C1952 + C82642 * C2037 +
            C80487 * C755 - C80539 * C693 - C80487 * C859 + C82635 * C911) *
               C44656 +
           (C80495 * C2654 - C44991 * C2526 - C80495 * C2822 + C44659 * C2926 +
            C80484 * C1747 - C80532 * C1654 - C80484 * C1951 + C82642 * C2036 +
            C80487 * C754 - C80539 * C694 - C80487 * C858 + C82635 * C912) *
               C82536 +
           (C80495 * C2653 - C44991 * C2527 - C80495 * C2821 + C44659 * C2927 +
            C80484 * C1746 - C80532 * C1653 - C80484 * C1950 + C82642 * C2035 +
            C80487 * C753 - C80539 * C695 - C80487 * C857 + C82635 * C913) *
               C82528) *
              C82592 * C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyz[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C82592 * C240 - C239 * C102) * C80487 +
                     (C82592 * C441 - C239 * C310) * C82635 +
                     (C2740 - C2741) * C80484 + (C3006 - C3007) * C82642 +
                     (C2744 - C2745) * C80495 + (C3008 - C3009) * C44659) *
                        C82528 +
                    ((C253 - C254) * C80487 + (C448 - C449) * C82635 +
                     (C1861 - C1862) * C80484 + (C2160 - C2161) * C82642 +
                     (C1869 - C1870) * C80495 + (C2162 - C2163) * C44659) *
                        C82536 +
                    ((C257 - C258) * C80487 + (C450 - C451) * C82635 +
                     (C1865 - C1866) * C80484 + (C2164 - C2165) * C82642 +
                     (C1873 - C1874) * C80495 + (C2166 - C2167) * C44659) *
                        C44656) *
                       C82938 * C688 +
                   (((C2741 - C2740) * C80487 + (C3007 - C3006) * C82635 +
                     (C2745 - C2744) * C80484 + (C3009 - C3008) * C82642 +
                     (C15953 - C15952) * C80495 + (C16107 - C16106) * C44659) *
                        C82528 +
                    ((C1862 - C1861) * C80487 + (C2161 - C2160) * C82635 +
                     (C1870 - C1869) * C80484 + (C2163 - C2162) * C82642 +
                     (C19219 - C19218) * C80495 + (C19453 - C19452) * C44659) *
                        C82536 +
                    ((C1866 - C1865) * C80487 + (C2165 - C2164) * C82635 +
                     (C1874 - C1873) * C80484 + (C2167 - C2166) * C82642 +
                     (C239 * C2525 - C82592 * C2735) * C80495 +
                     (C239 * C2823 - C82592 * C3004) * C44659) *
                        C44656) *
                       C82938 * C689) *
                  C82940) /
                 (p * q * std::sqrt(p + q));
    d2eezx[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82528 * C108 - C80234 * C102 + C82536 * C110 - C80230 * C103 +
             C44656 * C112 - C80280 * C104) *
                C239 +
            (C82528 * C503 - C80234 * C497 + C82536 * C504 - C80230 * C498 +
             C44656 * C505 - C80280 * C499) *
                C82592) *
               C82635 +
           ((C45687 - C45688 + C45689 - C45690 + C45691 - C45692) * C239 +
            (C45933 - C45934 + C45935 - C45936 + C45937 - C45938) * C82592) *
               C82642 +
           ((C45699 - C45700 + C45701 - C45702 + C45703 - C45704) * C239 +
            (C45939 - C45940 + C45941 - C45942 + C45943 - C45944) * C82592) *
               C44659) *
              C82938 * C688 +
          (((C45688 - C45687 + C45690 - C45689 + C45692 - C45691) * C239 +
            (C45934 - C45933 + C45936 - C45935 + C45938 - C45937) * C82592) *
               C82635 +
           ((C45700 - C45699 + C45702 - C45701 + C45704 - C45703) * C239 +
            (C45940 - C45939 + C45942 - C45941 + C45944 - C45943) * C82592) *
               C82642 +
           ((C80234 * C2527 - C82528 * C2532 + C80230 * C2526 - C82536 * C2530 +
             C80280 * C2525 - C44656 * C2528) *
                C239 +
            (C80234 * C3083 - C82528 * C3086 + C80230 * C3084 - C82536 * C3087 +
             C80280 * C3085 - C44656 * C3088) *
                C82592) *
               C44659) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eezy[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82635 * C169 - C80487 * C102 + C82642 * C753 - C80484 * C695 +
             C44659 * C1746 - C80495 * C1653) *
                C239 +
            (C82635 * C551 - C80487 * C497 + C82642 * C1055 - C80484 * C1003 +
             C44659 * C2323 - C80495 * C2241) *
                C82592) *
               C82528 +
           ((C44744 - C44745 + C44746 - C44747 + C44748 - C44749) * C239 +
            (C45257 - C45258 + C45259 - C45260 + C45261 - C45262) * C82592) *
               C82536 +
           ((C44756 - C44757 + C44758 - C44759 + C44760 - C44761) * C239 +
            (C45263 - C45264 + C45265 - C45266 + C45267 - C45268) * C82592) *
               C44656) *
              C82938 * C688 +
          (((C80487 * C695 - C82635 * C753 + C80484 * C1653 - C82642 * C1746 +
             C80495 * C2527 - C44659 * C2653) *
                C239 +
            (C80487 * C1003 - C82635 * C1055 + C80484 * C2241 - C82642 * C2323 +
             C80495 * C3083 - C44659 * C3175) *
                C82592) *
               C82528 +
           ((C80487 * C694 - C82635 * C754 + C80484 * C1654 - C82642 * C1747 +
             C80495 * C2526 - C44659 * C2654) *
                C239 +
            (C80487 * C1004 - C82635 * C1056 + C80484 * C2242 - C82642 * C2324 +
             C80495 * C3084 - C44659 * C3176) *
                C82592) *
               C82536 +
           ((C80487 * C693 - C82635 * C755 + C80484 * C1655 - C82642 * C1748 +
             C80495 * C2525 - C44659 * C2655) *
                C239 +
            (C80487 * C1005 - C82635 * C1057 + C80484 * C2243 - C82642 * C2325 +
             C80495 * C3085 - C44659 * C3177) *
                C82592) *
               C44656) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eezz[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82635 +
            C3268 * C82642 + C3269 * C44659) *
               C82528 +
           (C45343 + C45344 + C45345) * C82536 +
           (C45346 + C45347 + C45348) * C44656) *
              C82938 * C688 -
          (((C239 * C2735 - C607 * C2525 - C239 * C3085 + C82592 * C3252) *
                C44659 +
            C2447 * C82642 + C2446 * C82635) *
               C44656 +
           (C19669 * C44659 + C2445 * C82642 + C2444 * C82635) * C82536 +
           (C16260 * C44659 + C3269 * C82642 + C3268 * C82635) * C82528) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eexx[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C80234 * C108 - C80274 * C102 - C80234 * C109 + C82528 * C120 +
            C80230 * C110 - C80269 * C103 - C80230 * C111 + C82536 * C121 +
            C80280 * C112 - C44665 * C104 - C80280 * C113 + C44656 * C122) *
               C82592 * C82635 +
           (C45459 + C45460 + C45461) * C82592 * C82642 +
           (C45462 + C45463 + C45464) * C82592 * C44659) *
              C1149 -
          ((C80280 * C3349 - C44665 * C3343 - C80280 * C3350 + C44656 * C3361 +
            C80230 * C3351 - C80269 * C3344 - C80230 * C3352 + C82536 * C3362 +
            C80234 * C3353 - C80274 * C3345 - C80234 * C3354 + C82528 * C3363) *
               C82592 * C44659 +
           (C80280 * C3355 - C44665 * C3346 - C80280 * C3356 + C44656 * C3364 +
            C80230 * C3357 - C80269 * C3347 - C80230 * C3358 + C82536 * C3365 +
            C80234 * C3359 - C80274 * C3348 - C80234 * C3360 + C82528 * C3366) *
               C82592 * C82642 +
           (C80280 * C1160 - C44665 * C1153 - C80280 * C1161 + C44656 * C1168 +
            C80230 * C1162 - C80269 * C1154 - C80230 * C1163 + C82536 * C1169 +
            C80234 * C1164 - C80274 * C1155 - C80234 * C1165 + C82528 * C1170) *
               C82592 * C82635) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eexy[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C82635 * C169 - C80487 * C102 + C82642 * C753 - C80484 * C695 +
            C44659 * C1746 - C80495 * C1653) *
               C80234 +
           (C82635 * C175 - C80487 * C109 + C82642 * C758 - C80484 * C705 +
            C44659 * C1750 - C80495 * C1658) *
               C82528 +
           (C44744 - C44745 + C44746 - C44747 + C44748 - C44749) * C80230 +
           (C44750 - C44751 + C44752 - C44753 + C44754 - C44755) * C82536 +
           (C44756 - C44757 + C44758 - C44759 + C44760 - C44761) * C80280 +
           (C44762 - C44763 + C44764 - C44765 + C44766 - C44767) * C44656) *
              C82592 * C1149 +
          ((C80487 * C1155 - C82635 * C1213 + C80484 * C3348 - C82642 * C3441 +
            C80495 * C3345 - C44659 * C3442) *
               C80234 +
           (C80487 * C1165 - C82635 * C1218 + C80484 * C3360 - C82642 * C3447 +
            C80495 * C3354 - C44659 * C3448) *
               C82528 +
           (C80487 * C1154 - C82635 * C1214 + C80484 * C3347 - C82642 * C3443 +
            C80495 * C3344 - C44659 * C3444) *
               C80230 +
           (C80487 * C1163 - C82635 * C1219 + C80484 * C3358 - C82642 * C3449 +
            C80495 * C3352 - C44659 * C3450) *
               C82536 +
           (C80487 * C1153 - C82635 * C1215 + C80484 * C3346 - C82642 * C3445 +
            C80495 * C3343 - C44659 * C3446) *
               C80280 +
           (C80487 * C1161 - C82635 * C1220 + C80484 * C3356 - C82642 * C3451 +
            C80495 * C3350 - C44659 * C3452) *
               C44656) *
              C82592 * C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eexz[2] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C82592 * C240 - C239 * C102) * C80234 +
                     (C82592 * C246 - C239 * C109) * C82528 +
                     (C253 - C254) * C80230 + (C255 - C256) * C82536 +
                     (C257 - C258) * C80280 + (C259 - C260) * C44656) *
                        C82635 +
                    ((C2740 - C2741) * C80234 + (C2742 - C2743) * C82528 +
                     (C1861 - C1862) * C80230 + (C1863 - C1864) * C82536 +
                     (C1865 - C1866) * C80280 + (C1867 - C1868) * C44656) *
                        C82642 +
                    ((C2744 - C2745) * C80234 + (C2746 - C2747) * C82528 +
                     (C1869 - C1870) * C80230 + (C1871 - C1872) * C82536 +
                     (C1873 - C1874) * C80280 + (C1875 - C1876) * C44656) *
                        C44659) *
                       C1149 +
                   (((C239 * C1155 - C82592 * C1265) * C80234 +
                     (C239 * C1165 - C82592 * C1270) * C82528 +
                     (C239 * C1154 - C82592 * C1266) * C80230 +
                     (C239 * C1163 - C82592 * C1271) * C82536 +
                     (C239 * C1153 - C82592 * C1267) * C80280 +
                     (C239 * C1161 - C82592 * C1272) * C44656) *
                        C82635 +
                    ((C239 * C3348 - C82592 * C3527) * C80234 +
                     (C239 * C3360 - C82592 * C3533) * C82528 +
                     (C239 * C3347 - C82592 * C3528) * C80230 +
                     (C239 * C3358 - C82592 * C3534) * C82536 +
                     (C239 * C3346 - C82592 * C3529) * C80280 +
                     (C239 * C3356 - C82592 * C3535) * C44656) *
                        C82642 +
                    ((C239 * C3345 - C82592 * C3530) * C80234 +
                     (C239 * C3354 - C82592 * C3536) * C82528 +
                     (C239 * C3344 - C82592 * C3531) * C80230 +
                     (C239 * C3352 - C82592 * C3537) * C82536 +
                     (C239 * C3343 - C82592 * C3532) * C80280 +
                     (C239 * C3350 - C82592 * C3538) * C44656) *
                        C44659) *
                       C1150) *
                  C82939 * C82940) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C82528 * C108 - C80234 * C102 + C82536 * C110 - C80230 * C103 +
            C44656 * C112 - C80280 * C104) *
               C80487 +
           (C82528 * C316 - C80234 * C310 + C82536 * C317 - C80230 * C311 +
            C44656 * C318 - C80280 * C312) *
               C82635 +
           (C45687 - C45688 + C45689 - C45690 + C45691 - C45692) * C80484 +
           (C45693 - C45694 + C45695 - C45696 + C45697 - C45698) * C82642 +
           (C45699 - C45700 + C45701 - C45702 + C45703 - C45704) * C80495 +
           (C45705 - C45706 + C45707 - C45708 + C45709 - C45710) * C44659) *
              C82592 * C1149 +
          ((C80234 * C1155 - C82528 * C1164 + C80230 * C1154 - C82536 * C1162 +
            C80280 * C1153 - C44656 * C1160) *
               C80487 +
           (C80234 * C1317 - C82528 * C1322 + C80230 * C1318 - C82536 * C1323 +
            C80280 * C1319 - C44656 * C1324) *
               C82635 +
           (C80234 * C3348 - C82528 * C3359 + C80230 * C3347 - C82536 * C3357 +
            C80280 * C3346 - C44656 * C3355) *
               C80484 +
           (C80234 * C3613 - C82528 * C3619 + C80230 * C3614 - C82536 * C3620 +
            C80280 * C3615 - C44656 * C3621) *
               C82642 +
           (C80234 * C3345 - C82528 * C3353 + C80230 * C3344 - C82536 * C3351 +
            C80280 * C3343 - C44656 * C3349) *
               C80495 +
           (C80234 * C3616 - C82528 * C3622 + C80230 * C3617 - C82536 * C3623 +
            C80280 * C3618 - C44656 * C3624) *
               C44659) *
              C82592 * C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyy[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C80487 * C169 - C80539 * C102 - C80487 * C310 + C82635 * C365 +
            C80484 * C753 - C80532 * C695 - C80484 * C857 + C82642 * C913 +
            C80495 * C1746 - C44991 * C1653 - C80495 * C1950 + C44659 * C2035) *
               C82528 +
           (C45029 + C45030 + C45031) * C82536 +
           (C45032 + C45033 + C45034) * C44656) *
              C82592 * C1149 -
          ((C80495 * C3446 - C44991 * C3343 - C80495 * C3618 + C44659 * C3699 +
            C80484 * C3445 - C80532 * C3346 - C80484 * C3615 + C82642 * C3700 +
            C80487 * C1215 - C80539 * C1153 - C80487 * C1319 + C82635 * C1371) *
               C44656 +
           (C80495 * C3444 - C44991 * C3344 - C80495 * C3617 + C44659 * C3701 +
            C80484 * C3443 - C80532 * C3347 - C80484 * C3614 + C82642 * C3702 +
            C80487 * C1214 - C80539 * C1154 - C80487 * C1318 + C82635 * C1372) *
               C82536 +
           (C80495 * C3442 - C44991 * C3345 - C80495 * C3616 + C44659 * C3703 +
            C80484 * C3441 - C80532 * C3348 - C80484 * C3613 + C82642 * C3704 +
            C80487 * C1213 - C80539 * C1155 - C80487 * C1317 + C82635 * C1373) *
               C82528) *
              C82592 * C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyz[2] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C82592 * C240 - C239 * C102) * C80487 +
                     (C82592 * C441 - C239 * C310) * C82635 +
                     (C2740 - C2741) * C80484 + (C3006 - C3007) * C82642 +
                     (C2744 - C2745) * C80495 + (C3008 - C3009) * C44659) *
                        C82528 +
                    ((C253 - C254) * C80487 + (C448 - C449) * C82635 +
                     (C1861 - C1862) * C80484 + (C2160 - C2161) * C82642 +
                     (C1869 - C1870) * C80495 + (C2162 - C2163) * C44659) *
                        C82536 +
                    ((C257 - C258) * C80487 + (C450 - C451) * C82635 +
                     (C1865 - C1866) * C80484 + (C2164 - C2165) * C82642 +
                     (C1873 - C1874) * C80495 + (C2166 - C2167) * C44659) *
                        C44656) *
                       C1149 +
                   (((C239 * C1155 - C82592 * C1265) * C80487 +
                     (C239 * C1317 - C82592 * C1416) * C82635 +
                     (C239 * C3348 - C82592 * C3527) * C80484 +
                     (C239 * C3613 - C82592 * C3779) * C82642 +
                     (C239 * C3345 - C82592 * C3530) * C80495 +
                     (C239 * C3616 - C82592 * C3780) * C44659) *
                        C82528 +
                    ((C239 * C1154 - C82592 * C1266) * C80487 +
                     (C239 * C1318 - C82592 * C1417) * C82635 +
                     (C239 * C3347 - C82592 * C3528) * C80484 +
                     (C239 * C3614 - C82592 * C3781) * C82642 +
                     (C239 * C3344 - C82592 * C3531) * C80495 +
                     (C239 * C3617 - C82592 * C3782) * C44659) *
                        C82536 +
                    ((C239 * C1153 - C82592 * C1267) * C80487 +
                     (C239 * C1319 - C82592 * C1418) * C82635 +
                     (C239 * C3346 - C82592 * C3529) * C80484 +
                     (C239 * C3615 - C82592 * C3783) * C82642 +
                     (C239 * C3343 - C82592 * C3532) * C80495 +
                     (C239 * C3618 - C82592 * C3784) * C44659) *
                        C44656) *
                       C1150) *
                  C82939 * C82940) /
                 (p * q * std::sqrt(p + q));
    d2eezx[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82528 * C108 - C80234 * C102 + C82536 * C110 - C80230 * C103 +
             C44656 * C112 - C80280 * C104) *
                C239 +
            (C82528 * C503 - C80234 * C497 + C82536 * C504 - C80230 * C498 +
             C44656 * C505 - C80280 * C499) *
                C82592) *
               C82635 +
           ((C45687 - C45688 + C45689 - C45690 + C45691 - C45692) * C239 +
            (C45933 - C45934 + C45935 - C45936 + C45937 - C45938) * C82592) *
               C82642 +
           ((C45699 - C45700 + C45701 - C45702 + C45703 - C45704) * C239 +
            (C45939 - C45940 + C45941 - C45942 + C45943 - C45944) * C82592) *
               C44659) *
              C1149 +
          (((C80234 * C1155 - C82528 * C1164 + C80230 * C1154 - C82536 * C1162 +
             C80280 * C1153 - C44656 * C1160) *
                C239 +
            (C80234 * C1463 - C82528 * C1468 + C80230 * C1464 - C82536 * C1469 +
             C80280 * C1465 - C44656 * C1470) *
                C82592) *
               C82635 +
           ((C80234 * C3348 - C82528 * C3359 + C80230 * C3347 - C82536 * C3357 +
             C80280 * C3346 - C44656 * C3355) *
                C239 +
            (C80234 * C3859 - C82528 * C3865 + C80230 * C3860 - C82536 * C3866 +
             C80280 * C3861 - C44656 * C3867) *
                C82592) *
               C82642 +
           ((C80234 * C3345 - C82528 * C3353 + C80230 * C3344 - C82536 * C3351 +
             C80280 * C3343 - C44656 * C3349) *
                C239 +
            (C80234 * C3862 - C82528 * C3868 + C80230 * C3863 - C82536 * C3869 +
             C80280 * C3864 - C44656 * C3870) *
                C82592) *
               C44659) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eezy[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82635 * C169 - C80487 * C102 + C82642 * C753 - C80484 * C695 +
             C44659 * C1746 - C80495 * C1653) *
                C239 +
            (C82635 * C551 - C80487 * C497 + C82642 * C1055 - C80484 * C1003 +
             C44659 * C2323 - C80495 * C2241) *
                C82592) *
               C82528 +
           ((C44744 - C44745 + C44746 - C44747 + C44748 - C44749) * C239 +
            (C45257 - C45258 + C45259 - C45260 + C45261 - C45262) * C82592) *
               C82536 +
           ((C44756 - C44757 + C44758 - C44759 + C44760 - C44761) * C239 +
            (C45263 - C45264 + C45265 - C45266 + C45267 - C45268) * C82592) *
               C44656) *
              C1149 +
          (((C80487 * C1155 - C82635 * C1213 + C80484 * C3348 - C82642 * C3441 +
             C80495 * C3345 - C44659 * C3442) *
                C239 +
            (C80487 * C1463 - C82635 * C1515 + C80484 * C3859 - C82642 * C3945 +
             C80495 * C3862 - C44659 * C3946) *
                C82592) *
               C82528 +
           ((C80487 * C1154 - C82635 * C1214 + C80484 * C3347 - C82642 * C3443 +
             C80495 * C3344 - C44659 * C3444) *
                C239 +
            (C80487 * C1464 - C82635 * C1516 + C80484 * C3860 - C82642 * C3947 +
             C80495 * C3863 - C44659 * C3948) *
                C82592) *
               C82536 +
           ((C80487 * C1153 - C82635 * C1215 + C80484 * C3346 - C82642 * C3445 +
             C80495 * C3343 - C44659 * C3446) *
                C239 +
            (C80487 * C1465 - C82635 * C1517 + C80484 * C3861 - C82642 * C3949 +
             C80495 * C3864 - C44659 * C3950) *
                C82592) *
               C44656) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eezz[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82635 +
            C3268 * C82642 + C3269 * C44659) *
               C82528 +
           (C45343 + C45344 + C45345) * C82536 +
           (C45346 + C45347 + C45348) * C44656) *
              C1149 -
          (((C239 * C3532 - C607 * C3343 - C239 * C3864 + C82592 * C4025) *
                C44659 +
            (C239 * C3529 - C607 * C3346 - C239 * C3861 + C82592 * C4026) *
                C82642 +
            (C239 * C1267 - C607 * C1153 - C239 * C1465 + C82592 * C1564) *
                C82635) *
               C44656 +
           ((C239 * C3531 - C607 * C3344 - C239 * C3863 + C82592 * C4027) *
                C44659 +
            (C239 * C3528 - C607 * C3347 - C239 * C3860 + C82592 * C4028) *
                C82642 +
            (C239 * C1266 - C607 * C1154 - C239 * C1464 + C82592 * C1565) *
                C82635) *
               C82536 +
           ((C239 * C3530 - C607 * C3345 - C239 * C3862 + C82592 * C4029) *
                C44659 +
            (C239 * C3527 - C607 * C3348 - C239 * C3859 + C82592 * C4030) *
                C82642 +
            (C239 * C1265 - C607 * C1155 - C239 * C1463 + C82592 * C1566) *
                C82635) *
               C82528) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eexx[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39825 * C108 - C39826 * C102 - C39825 * C109 + C39819 * C120 +
             C39827 * C110 - C39828 * C103 - C39827 * C111 + C82533 * C121) *
                C82864 +
            (C43717 + C43718) * C82679) *
               C82635 +
           ((C40524 + C40525) * C82864 + (C42783 + C42784) * C82679) * C82642 +
           ((C40526 + C40527) * C82864 +
            (C39825 * C3353 - C39826 * C3345 - C39825 * C3354 + C39819 * C3363 +
             C39827 * C3351 - C39828 * C3344 - C39827 * C3352 +
             C82533 * C3362) *
                C82679) *
               C44659) *
              C82938 * C82939 * C90 -
          (((C39827 * C3349 - C39828 * C3343 - C39827 * C3350 + C82533 * C3361 +
             C39825 * C3351 - C39826 * C3344 - C39825 * C3352 +
             C39819 * C3362) *
                C82679 +
            (C39827 * C1661 - C39828 * C1655 - C39827 * C1662 + C82533 * C1667 +
             C39825 * C1659 - C39826 * C1654 - C39825 * C1660 +
             C39819 * C1666) *
                C82864) *
               C44659 +
           ((C39827 * C3355 - C39828 * C3346 - C39827 * C3356 + C82533 * C3364 +
             C39825 * C3357 - C39826 * C3347 - C39825 * C3358 +
             C39819 * C3365) *
                C82679 +
            (C39827 * C700 - C39828 * C693 - C39827 * C701 + C82533 * C708 +
             C39825 * C702 - C39826 * C694 - C39825 * C703 + C39819 * C709) *
                C82864) *
               C82642 +
           ((C39827 * C1160 - C39828 * C1153 - C39827 * C1161 + C82533 * C1168 +
             C39825 * C1162 - C39826 * C1154 - C39825 * C1163 +
             C39819 * C1169) *
                C82679 +
            (C39827 * C112 - C39828 * C104 - C39827 * C113 + C82533 * C122 +
             C39825 * C110 - C39826 * C103 - C39825 * C111 + C39819 * C121) *
                C82864) *
               C82635) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexy[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82635 * C169 - C80487 * C102 + C82642 * C753 - C80484 * C695 +
             C44659 * C1746 - C80495 * C1653) *
                C39825 +
            (C82635 * C175 - C80487 * C109 + C82642 * C758 - C80484 * C705 +
             C44659 * C1750 - C80495 * C1658) *
                C39819 +
            (C44744 - C44745 + C44746 - C44747 + C44748 - C44749) * C39827 +
            (C44750 - C44751 + C44752 - C44753 + C44754 - C44755) * C82533) *
               C82864 +
           ((C82635 * C1213 - C80487 * C1155 + C82642 * C3441 - C80484 * C3348 +
             C44659 * C3442 - C80495 * C3345) *
                C39825 +
            (C82635 * C1218 - C80487 * C1165 + C82642 * C3447 - C80484 * C3360 +
             C44659 * C3448 - C80495 * C3354) *
                C39819 +
            (C49705 - C49706 + C49707 - C49708 + C49709 - C49710) * C39827 +
            (C49711 - C49712 + C49713 - C49714 + C49715 - C49716) * C82533) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C44745 - C44744 + C44747 - C44746 + C44749 - C44748) * C39825 +
            (C44751 - C44750 + C44753 - C44752 + C44755 - C44754) * C39819 +
            (C44757 - C44756 + C44759 - C44758 + C44761 - C44760) * C39827 +
            (C44763 - C44762 + C44765 - C44764 + C44767 - C44766) * C82533) *
               C82864 +
           ((C49706 - C49705 + C49708 - C49707 + C49710 - C49709) * C39825 +
            (C49712 - C49711 + C49714 - C49713 + C49716 - C49715) * C39819 +
            (C80487 * C1153 - C82635 * C1215 + C80484 * C3346 - C82642 * C3445 +
             C80495 * C3343 - C44659 * C3446) *
                C39827 +
            (C80487 * C1161 - C82635 * C1220 + C80484 * C3356 - C82642 * C3451 +
             C80495 * C3350 - C44659 * C3452) *
                C82533) *
               C82679) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexz[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C39825 +
            (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
                C39819 +
            (C8610 - C8611 + C8612 - C8613) * C39827 +
            (C8614 - C8615 + C8616 - C8617) * C82533) *
               C82635 +
           ((C11640 - C11641 + C11642 - C11643) * C39825 +
            (C11644 - C11645 + C11646 - C11647) * C39819 +
            (C10649 - C10650 + C10651 - C10652) * C39827 +
            (C10653 - C10654 + C10655 - C10656) * C82533) *
               C82642 +
           ((C22222 - C22223 + C22224 - C22225) * C39825 +
            (C22226 - C22227 + C22228 - C22229) * C39819 +
            (C21259 - C21260 + C21261 - C21262) * C39827 +
            (C21263 - C21264 + C21265 - C21266) * C82533) *
               C44659) *
              C82938 * C82939 * C90 +
          (((C8611 - C8610 + C8613 - C8612) * C39825 +
            (C8615 - C8614 + C8617 - C8616) * C39819 +
            (C8619 - C8618 + C8621 - C8620) * C39827 +
            (C8623 - C8622 + C8625 - C8624) * C82533) *
               C82635 +
           ((C10650 - C10649 + C10652 - C10651) * C39825 +
            (C10654 - C10653 + C10656 - C10655) * C39819 +
            (C10658 - C10657 + C10660 - C10659) * C39827 +
            (C10662 - C10661 + C10664 - C10663) * C82533) *
               C82642 +
           ((C21260 - C21259 + C21262 - C21261) * C39825 +
            (C21264 - C21263 + C21266 - C21265) * C39819 +
            (C8607 * C1655 - C82864 * C1854 + C8608 * C3343 - C82679 * C3532) *
                C39827 +
            (C8607 * C1662 - C82864 * C1858 + C8608 * C3350 - C82679 * C3538) *
                C82533) *
               C44659) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C80487 +
            (C39819 * C316 - C39825 * C310 + C82533 * C317 - C39827 * C311) *
                C82635 +
            (C40728 - C40729 + C40730 - C40731) * C80484 +
            (C40732 - C40733 + C40734 - C40735) * C82642 +
            (C40736 - C40737 + C40738 - C40739) * C80495 +
            (C40740 - C40741 + C40742 - C40743) * C44659) *
               C82864 +
           ((C44031 - C44032 + C44033 - C44034) * C80487 +
            (C44035 - C44036 + C44037 - C44038) * C82635 +
            (C43081 - C43082 + C43083 - C43084) * C80484 +
            (C43085 - C43086 + C43087 - C43088) * C82642 +
            (C39819 * C3353 - C39825 * C3345 + C82533 * C3351 -
             C39827 * C3344) *
                C80495 +
            (C39819 * C3622 - C39825 * C3616 + C82533 * C3623 -
             C39827 * C3617) *
                C44659) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C39825 * C103 - C39819 * C110 + C39827 * C104 - C82533 * C112) *
                C80487 +
            (C39825 * C311 - C39819 * C317 + C39827 * C312 - C82533 * C318) *
                C82635 +
            (C39825 * C694 - C39819 * C702 + C39827 * C693 - C82533 * C700) *
                C80484 +
            (C39825 * C858 - C39819 * C863 + C39827 * C859 - C82533 * C864) *
                C82642 +
            (C39825 * C1654 - C39819 * C1659 + C39827 * C1655 -
             C82533 * C1661) *
                C80495 +
            (C39825 * C1951 - C39819 * C1955 + C39827 * C1952 -
             C82533 * C1956) *
                C44659) *
               C82864 +
           ((C39825 * C1154 - C39819 * C1162 + C39827 * C1153 -
             C82533 * C1160) *
                C80487 +
            (C39825 * C1318 - C39819 * C1323 + C39827 * C1319 -
             C82533 * C1324) *
                C82635 +
            (C39825 * C3347 - C39819 * C3357 + C39827 * C3346 -
             C82533 * C3355) *
                C80484 +
            (C39825 * C3614 - C39819 * C3620 + C39827 * C3615 -
             C82533 * C3621) *
                C82642 +
            (C39825 * C3344 - C39819 * C3351 + C39827 * C3343 -
             C82533 * C3349) *
                C80495 +
            (C39825 * C3617 - C39819 * C3623 + C39827 * C3618 -
             C82533 * C3624) *
                C44659) *
               C82679) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C80487 * C169 - C80539 * C102 - C80487 * C310 +
                      C82635 * C365 + C80484 * C753 - C80532 * C695 -
                      C80484 * C857 + C82642 * C913 + C80495 * C1746 -
                      C44991 * C1653 - C80495 * C1950 + C44659 * C2035) *
                         C39819 +
                     (C45029 + C45030 + C45031) * C82533) *
                        C82864 +
                    ((C80487 * C1213 - C80539 * C1155 - C80487 * C1317 +
                      C82635 * C1373 + C80484 * C3441 - C80532 * C3348 -
                      C80484 * C3613 + C82642 * C3704 + C80495 * C3442 -
                      C44991 * C3345 - C80495 * C3616 + C44659 * C3703) *
                         C39819 +
                     (C50029 + C50030 + C50031) * C82533) *
                        C82679) *
                       C82938 * C82939 * C90 -
                   (((C80495 * C3446 - C44991 * C3343 - C80495 * C3618 +
                      C44659 * C3699 + C80484 * C3445 - C80532 * C3346 -
                      C80484 * C3615 + C82642 * C3700 + C80487 * C1215 -
                      C80539 * C1153 - C80487 * C1319 + C82635 * C1371) *
                         C82533 +
                     (C50031 + C50030 + C50029) * C39819) *
                        C82679 +
                    ((C45034 + C45033 + C45032) * C82533 +
                     (C45031 + C45030 + C45029) * C39819) *
                        C82864) *
                       C82938 * C82939 * C91)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C80487 +
            (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
                C82635 +
            (C11640 - C11641 + C11642 - C11643) * C80484 +
            (C11954 - C11955 + C11956 - C11957) * C82642 +
            (C22222 - C22223 + C22224 - C22225) * C80495 +
            (C22540 - C22541 + C22542 - C22543) * C44659) *
               C39819 +
           ((C8610 - C8611 + C8612 - C8613) * C80487 +
            (C8839 - C8840 + C8841 - C8842) * C82635 +
            (C10649 - C10650 + C10651 - C10652) * C80484 +
            (C10987 - C10988 + C10989 - C10990) * C82642 +
            (C21259 - C21260 + C21261 - C21262) * C80495 +
            (C21582 - C21583 + C21584 - C21585) * C44659) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C8611 - C8610 + C8613 - C8612) * C80487 +
            (C8840 - C8839 + C8842 - C8841) * C82635 +
            (C10650 - C10649 + C10652 - C10651) * C80484 +
            (C10988 - C10987 + C10990 - C10989) * C82642 +
            (C21260 - C21259 + C21262 - C21261) * C80495 +
            (C21583 - C21582 + C21585 - C21584) * C44659) *
               C39819 +
           ((C8619 - C8618 + C8621 - C8620) * C80487 +
            (C8844 - C8843 + C8846 - C8845) * C82635 +
            (C10658 - C10657 + C10660 - C10659) * C80484 +
            (C10992 - C10991 + C10994 - C10993) * C82642 +
            (C8607 * C1655 - C82864 * C1854 + C8608 * C3343 - C82679 * C3532) *
                C80495 +
            (C8607 * C1952 - C82864 * C2157 + C8608 * C3618 - C82679 * C3784) *
                C44659) *
               C82533) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezx[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C8607 +
            (C39819 * C503 - C39825 * C497 + C82533 * C504 - C39827 * C498) *
                C82864 +
            (C44031 - C44032 + C44033 - C44034) * C8608 +
            (C44369 - C44370 + C44371 - C44372) * C82679) *
               C82635 +
           ((C40728 - C40729 + C40730 - C40731) * C8607 +
            (C40950 - C40951 + C40952 - C40953) * C82864 +
            (C43081 - C43082 + C43083 - C43084) * C8608 +
            (C43391 - C43392 + C43393 - C43394) * C82679) *
               C82642 +
           ((C40736 - C40737 + C40738 - C40739) * C8607 +
            (C40954 - C40955 + C40956 - C40957) * C82864 +
            (C39819 * C3353 - C39825 * C3345 + C82533 * C3351 -
             C39827 * C3344) *
                C8608 +
            (C39819 * C3868 - C39825 * C3862 + C82533 * C3869 -
             C39827 * C3863) *
                C82679) *
               C44659) *
              C82938 * C82939 * C90 +
          (((C39825 * C103 - C39819 * C110 + C39827 * C104 - C82533 * C112) *
                C8607 +
            (C39825 * C498 - C39819 * C504 + C39827 * C499 - C82533 * C505) *
                C82864 +
            (C39825 * C1154 - C39819 * C1162 + C39827 * C1153 -
             C82533 * C1160) *
                C8608 +
            (C39825 * C1464 - C39819 * C1469 + C39827 * C1465 -
             C82533 * C1470) *
                C82679) *
               C82635 +
           ((C39825 * C694 - C39819 * C702 + C39827 * C693 - C82533 * C700) *
                C8607 +
            (C39825 * C1004 - C39819 * C1009 + C39827 * C1005 -
             C82533 * C1010) *
                C82864 +
            (C39825 * C3347 - C39819 * C3357 + C39827 * C3346 -
             C82533 * C3355) *
                C8608 +
            (C39825 * C3860 - C39819 * C3866 + C39827 * C3861 -
             C82533 * C3867) *
                C82679) *
               C82642 +
           ((C39825 * C1654 - C39819 * C1659 + C39827 * C1655 -
             C82533 * C1661) *
                C8607 +
            (C39825 * C2242 - C39819 * C2246 + C39827 * C2243 -
             C82533 * C2247) *
                C82864 +
            (C39825 * C3344 - C39819 * C3351 + C39827 * C3343 -
             C82533 * C3349) *
                C8608 +
            (C39825 * C3863 - C39819 * C3869 + C39827 * C3864 -
             C82533 * C3870) *
                C82679) *
               C44659) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezy[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82635 * C169 - C80487 * C102 + C82642 * C753 - C80484 * C695 +
             C44659 * C1746 - C80495 * C1653) *
                C8607 +
            (C82635 * C551 - C80487 * C497 + C82642 * C1055 - C80484 * C1003 +
             C44659 * C2323 - C80495 * C2241) *
                C82864 +
            (C82635 * C1213 - C80487 * C1155 + C82642 * C3441 - C80484 * C3348 +
             C44659 * C3442 - C80495 * C3345) *
                C8608 +
            (C82635 * C1515 - C80487 * C1463 + C82642 * C3945 - C80484 * C3859 +
             C44659 * C3946 - C80495 * C3862) *
                C82679) *
               C39819 +
           ((C44744 - C44745 + C44746 - C44747 + C44748 - C44749) * C8607 +
            (C45257 - C45258 + C45259 - C45260 + C45261 - C45262) * C82864 +
            (C49705 - C49706 + C49707 - C49708 + C49709 - C49710) * C8608 +
            (C50326 - C50327 + C50328 - C50329 + C50330 - C50331) * C82679) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C44745 - C44744 + C44747 - C44746 + C44749 - C44748) * C8607 +
            (C45258 - C45257 + C45260 - C45259 + C45262 - C45261) * C82864 +
            (C49706 - C49705 + C49708 - C49707 + C49710 - C49709) * C8608 +
            (C50327 - C50326 + C50329 - C50328 + C50331 - C50330) * C82679) *
               C39819 +
           ((C44757 - C44756 + C44759 - C44758 + C44761 - C44760) * C8607 +
            (C45264 - C45263 + C45266 - C45265 + C45268 - C45267) * C82864 +
            (C80487 * C1153 - C82635 * C1215 + C80484 * C3346 - C82642 * C3445 +
             C80495 * C3343 - C44659 * C3446) *
                C8608 +
            (C80487 * C1465 - C82635 * C1517 + C80484 * C3861 - C82642 * C3949 +
             C80495 * C3864 - C44659 * C3950) *
                C82679) *
               C82533) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezz[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
             C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
                C82635 +
            (C12270 + C12271) * C82642 + (C22858 + C22859) * C44659) *
               C39819 +
           ((C9089 + C9090) * C82635 + (C11321 + C11322) * C82642 +
            (C21898 + C21899) * C44659) *
               C82533) *
              C82938 * C82939 * C90 -
          (((C8608 * C3532 - C9051 * C3343 - C8608 * C3864 + C82679 * C4025 +
             C8607 * C1854 - C9050 * C1655 - C8607 * C2243 + C82864 * C2415) *
                C44659 +
            (C11324 + C11323) * C82642 + (C9092 + C9091) * C82635) *
               C82533 +
           ((C21899 + C21898) * C44659 + (C11322 + C11321) * C82642 +
            (C9090 + C9089) * C82635) *
               C39819) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexx[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39825 * C108 - C39826 * C102 - C39825 * C109 + C39819 * C120 +
             C39827 * C110 - C39828 * C103 - C39827 * C111 + C82533 * C121) *
                C82864 +
            (C43717 + C43718) * C82679) *
               C82635 +
           ((C40524 + C40525) * C82864 + (C42783 + C42784) * C82679) * C82642 +
           ((C40526 + C40527) * C82864 + (C50540 + C50541) * C82679) * C44659) *
              C82938 * C688 -
          (((C39827 * C20409 - C39828 * C20408 - C39827 * C20410 +
             C82533 * C20411 + C39825 * C16307 - C39826 * C16304 -
             C39825 * C16308 + C39819 * C16310) *
                C82679 +
            (C40529 + C40528) * C82864) *
               C44659 +
           ((C50541 + C50540) * C82679 + (C40527 + C40526) * C82864) * C82642 +
           ((C42784 + C42783) * C82679 + (C40525 + C40524) * C82864) * C82635) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eexy[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82635 * C169 - C80487 * C102 + C82642 * C753 - C80484 * C695 +
             C44659 * C1746 - C80495 * C1653) *
                C39825 +
            (C82635 * C175 - C80487 * C109 + C82642 * C758 - C80484 * C705 +
             C44659 * C1750 - C80495 * C1658) *
                C39819 +
            (C44744 - C44745 + C44746 - C44747 + C44748 - C44749) * C39827 +
            (C44750 - C44751 + C44752 - C44753 + C44754 - C44755) * C82533) *
               C82864 +
           ((C82635 * C1213 - C80487 * C1155 + C82642 * C3441 - C80484 * C3348 +
             C44659 * C3442 - C80495 * C3345) *
                C39825 +
            (C82635 * C1218 - C80487 * C1165 + C82642 * C3447 - C80484 * C3360 +
             C44659 * C3448 - C80495 * C3354) *
                C39819 +
            (C49705 - C49706 + C49707 - C49708 + C49709 - C49710) * C39827 +
            (C49711 - C49712 + C49713 - C49714 + C49715 - C49716) * C82533) *
               C82679) *
              C82938 * C688 +
          (((C80487 * C695 - C82635 * C753 + C80484 * C1653 - C82642 * C1746 +
             C80495 * C2527 - C44659 * C2653) *
                C39825 +
            (C80487 * C705 - C82635 * C758 + C80484 * C1658 - C82642 * C1750 +
             C80495 * C2533 - C44659 * C2656) *
                C39819 +
            (C80487 * C694 - C82635 * C754 + C80484 * C1654 - C82642 * C1747 +
             C80495 * C2526 - C44659 * C2654) *
                C39827 +
            (C80487 * C703 - C82635 * C759 + C80484 * C1660 - C82642 * C1751 +
             C80495 * C2531 - C44659 * C2657) *
                C82533) *
               C82864 +
           ((C80487 * C3348 - C82635 * C3441 + C80484 * C3345 - C82642 * C3442 +
             C80495 * C16304 - C44659 * C16353) *
                C39825 +
            (C80487 * C3360 - C82635 * C3447 + C80484 * C3354 - C82642 * C3448 +
             C80495 * C16308 - C44659 * C16355) *
                C39819 +
            (C80487 * C3347 - C82635 * C3443 + C80484 * C3344 - C82642 * C3444 +
             C80495 * C20408 - C44659 * C20478) *
                C39827 +
            (C80487 * C3358 - C82635 * C3449 + C80484 * C3352 - C82642 * C3450 +
             C80495 * C20410 - C44659 * C20479) *
                C82533) *
               C82679) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eexz[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C39825 +
            (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
                C39819 +
            (C8610 - C8611 + C8612 - C8613) * C39827 +
            (C8614 - C8615 + C8616 - C8617) * C82533) *
               C82635 +
           ((C11640 - C11641 + C11642 - C11643) * C39825 +
            (C11644 - C11645 + C11646 - C11647) * C39819 +
            (C10649 - C10650 + C10651 - C10652) * C39827 +
            (C10653 - C10654 + C10655 - C10656) * C82533) *
               C82642 +
           ((C22222 - C22223 + C22224 - C22225) * C39825 +
            (C22226 - C22227 + C22228 - C22229) * C39819 +
            (C21259 - C21260 + C21261 - C21262) * C39827 +
            (C21263 - C21264 + C21265 - C21266) * C82533) *
               C44659) *
              C82938 * C688 +
          (((C11641 - C11640 + C11643 - C11642) * C39825 +
            (C11645 - C11644 + C11647 - C11646) * C39819 +
            (C10650 - C10649 + C10652 - C10651) * C39827 +
            (C10654 - C10653 + C10656 - C10655) * C82533) *
               C82635 +
           ((C22223 - C22222 + C22225 - C22224) * C39825 +
            (C22227 - C22226 + C22229 - C22228) * C39819 +
            (C21260 - C21259 + C21262 - C21261) * C39827 +
            (C21264 - C21263 + C21266 - C21265) * C82533) *
               C82642 +
           ((C24574 - C24573 + C24576 - C24575) * C39825 +
            (C24578 - C24577 + C24580 - C24579) * C39819 +
            (C8607 * C2526 - C82864 * C2734 + C8608 * C20408 -
             C82679 * C20546) *
                C39827 +
            (C8607 * C2531 - C82864 * C2737 + C8608 * C20410 -
             C82679 * C20547) *
                C82533) *
               C44659) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyx[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C80487 +
            (C39819 * C316 - C39825 * C310 + C82533 * C317 - C39827 * C311) *
                C82635 +
            (C40728 - C40729 + C40730 - C40731) * C80484 +
            (C40732 - C40733 + C40734 - C40735) * C82642 +
            (C40736 - C40737 + C40738 - C40739) * C80495 +
            (C40740 - C40741 + C40742 - C40743) * C44659) *
               C82864 +
           ((C44031 - C44032 + C44033 - C44034) * C80487 +
            (C44035 - C44036 + C44037 - C44038) * C82635 +
            (C43081 - C43082 + C43083 - C43084) * C80484 +
            (C43085 - C43086 + C43087 - C43088) * C82642 +
            (C50836 - C50837 + C50838 - C50839) * C80495 +
            (C50840 - C50841 + C50842 - C50843) * C44659) *
               C82679) *
              C82938 * C688 +
          (((C40729 - C40728 + C40731 - C40730) * C80487 +
            (C40733 - C40732 + C40735 - C40734) * C82635 +
            (C40737 - C40736 + C40739 - C40738) * C80484 +
            (C40741 - C40740 + C40743 - C40742) * C82642 +
            (C40745 - C40744 + C40747 - C40746) * C80495 +
            (C40749 - C40748 + C40751 - C40750) * C44659) *
               C82864 +
           ((C43082 - C43081 + C43084 - C43083) * C80487 +
            (C43086 - C43085 + C43088 - C43087) * C82635 +
            (C50837 - C50836 + C50839 - C50838) * C80484 +
            (C50841 - C50840 + C50843 - C50842) * C82642 +
            (C39825 * C16304 - C39819 * C16307 + C39827 * C20408 -
             C82533 * C20409) *
                C80495 +
            (C39825 * C16445 - C39819 * C16447 + C39827 * C20614 -
             C82533 * C20615) *
                C44659) *
               C82679) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyy[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C80487 * C169 - C80539 * C102 - C80487 * C310 + C82635 * C365 +
             C80484 * C753 - C80532 * C695 - C80484 * C857 + C82642 * C913 +
             C80495 * C1746 - C44991 * C1653 - C80495 * C1950 +
             C44659 * C2035) *
                C39819 +
            (C45029 + C45030 + C45031) * C82533) *
               C82864 +
           ((C80487 * C1213 - C80539 * C1155 - C80487 * C1317 + C82635 * C1373 +
             C80484 * C3441 - C80532 * C3348 - C80484 * C3613 + C82642 * C3704 +
             C80495 * C3442 - C44991 * C3345 - C80495 * C3616 +
             C44659 * C3703) *
                C39819 +
            (C50029 + C50030 + C50031) * C82533) *
               C82679) *
              C82938 * C688 -
          (((C80495 * C20478 - C44991 * C20408 - C80495 * C20614 +
             C44659 * C20682 + C80484 * C3444 - C80532 * C3344 -
             C80484 * C3617 + C82642 * C3701 + C80487 * C3443 - C80539 * C3347 -
             C80487 * C3614 + C82635 * C3702) *
                C82533 +
            (C80495 * C16353 - C44991 * C16304 - C80495 * C16445 +
             C44659 * C16492 + C80484 * C3442 - C80532 * C3345 -
             C80484 * C3616 + C82642 * C3703 + C80487 * C3441 - C80539 * C3348 -
             C80487 * C3613 + C82635 * C3704) *
                C39819) *
               C82679 +
           ((C80495 * C2654 - C44991 * C2526 - C80495 * C2822 + C44659 * C2926 +
             C80484 * C1747 - C80532 * C1654 - C80484 * C1951 + C82642 * C2036 +
             C80487 * C754 - C80539 * C694 - C80487 * C858 + C82635 * C912) *
                C82533 +
            (C80495 * C2653 - C44991 * C2527 - C80495 * C2821 + C44659 * C2927 +
             C80484 * C1746 - C80532 * C1653 - C80484 * C1950 + C82642 * C2035 +
             C80487 * C753 - C80539 * C695 - C80487 * C857 + C82635 * C913) *
                C39819) *
               C82864) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyz[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C80487 +
            (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
                C82635 +
            (C11640 - C11641 + C11642 - C11643) * C80484 +
            (C11954 - C11955 + C11956 - C11957) * C82642 +
            (C22222 - C22223 + C22224 - C22225) * C80495 +
            (C22540 - C22541 + C22542 - C22543) * C44659) *
               C39819 +
           ((C8610 - C8611 + C8612 - C8613) * C80487 +
            (C8839 - C8840 + C8841 - C8842) * C82635 +
            (C10649 - C10650 + C10651 - C10652) * C80484 +
            (C10987 - C10988 + C10989 - C10990) * C82642 +
            (C21259 - C21260 + C21261 - C21262) * C80495 +
            (C21582 - C21583 + C21584 - C21585) * C44659) *
               C82533) *
              C82938 * C688 +
          (((C11641 - C11640 + C11643 - C11642) * C80487 +
            (C11955 - C11954 + C11957 - C11956) * C82635 +
            (C22223 - C22222 + C22225 - C22224) * C80484 +
            (C22541 - C22540 + C22543 - C22542) * C82642 +
            (C24574 - C24573 + C24576 - C24575) * C80495 +
            (C24784 - C24783 + C24786 - C24785) * C44659) *
               C39819 +
           ((C10650 - C10649 + C10652 - C10651) * C80487 +
            (C10988 - C10987 + C10990 - C10989) * C82635 +
            (C21260 - C21259 + C21262 - C21261) * C80484 +
            (C21583 - C21582 + C21585 - C21584) * C82642 +
            (C8607 * C2526 - C82864 * C2734 + C8608 * C20408 -
             C82679 * C20546) *
                C80495 +
            (C8607 * C2822 - C82864 * C3003 + C8608 * C20614 -
             C82679 * C20749) *
                C44659) *
               C82533) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eezx[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C8607 +
            (C39819 * C503 - C39825 * C497 + C82533 * C504 - C39827 * C498) *
                C82864 +
            (C44031 - C44032 + C44033 - C44034) * C8608 +
            (C44369 - C44370 + C44371 - C44372) * C82679) *
               C82635 +
           ((C40728 - C40729 + C40730 - C40731) * C8607 +
            (C40950 - C40951 + C40952 - C40953) * C82864 +
            (C43081 - C43082 + C43083 - C43084) * C8608 +
            (C43391 - C43392 + C43393 - C43394) * C82679) *
               C82642 +
           ((C40736 - C40737 + C40738 - C40739) * C8607 +
            (C40954 - C40955 + C40956 - C40957) * C82864 +
            (C50836 - C50837 + C50838 - C50839) * C8608 +
            (C51138 - C51139 + C51140 - C51141) * C82679) *
               C44659) *
              C82938 * C688 +
          (((C40729 - C40728 + C40731 - C40730) * C8607 +
            (C40951 - C40950 + C40953 - C40952) * C82864 +
            (C43082 - C43081 + C43084 - C43083) * C8608 +
            (C43392 - C43391 + C43394 - C43393) * C82679) *
               C82635 +
           ((C40737 - C40736 + C40739 - C40738) * C8607 +
            (C40955 - C40954 + C40957 - C40956) * C82864 +
            (C50837 - C50836 + C50839 - C50838) * C8608 +
            (C51139 - C51138 + C51141 - C51140) * C82679) *
               C82642 +
           ((C40745 - C40744 + C40747 - C40746) * C8607 +
            (C40959 - C40958 + C40961 - C40960) * C82864 +
            (C39825 * C16304 - C39819 * C16307 + C39827 * C20408 -
             C82533 * C20409) *
                C8608 +
            (C39825 * C16579 - C39819 * C16581 + C39827 * C20816 -
             C82533 * C20817) *
                C82679) *
               C44659) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eezy[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82635 * C169 - C80487 * C102 + C82642 * C753 - C80484 * C695 +
             C44659 * C1746 - C80495 * C1653) *
                C8607 +
            (C82635 * C551 - C80487 * C497 + C82642 * C1055 - C80484 * C1003 +
             C44659 * C2323 - C80495 * C2241) *
                C82864 +
            (C82635 * C1213 - C80487 * C1155 + C82642 * C3441 - C80484 * C3348 +
             C44659 * C3442 - C80495 * C3345) *
                C8608 +
            (C82635 * C1515 - C80487 * C1463 + C82642 * C3945 - C80484 * C3859 +
             C44659 * C3946 - C80495 * C3862) *
                C82679) *
               C39819 +
           ((C44744 - C44745 + C44746 - C44747 + C44748 - C44749) * C8607 +
            (C45257 - C45258 + C45259 - C45260 + C45261 - C45262) * C82864 +
            (C49705 - C49706 + C49707 - C49708 + C49709 - C49710) * C8608 +
            (C50326 - C50327 + C50328 - C50329 + C50330 - C50331) * C82679) *
               C82533) *
              C82938 * C688 +
          (((C80487 * C695 - C82635 * C753 + C80484 * C1653 - C82642 * C1746 +
             C80495 * C2527 - C44659 * C2653) *
                C8607 +
            (C80487 * C1003 - C82635 * C1055 + C80484 * C2241 - C82642 * C2323 +
             C80495 * C3083 - C44659 * C3175) *
                C82864 +
            (C80487 * C3348 - C82635 * C3441 + C80484 * C3345 - C82642 * C3442 +
             C80495 * C16304 - C44659 * C16353) *
                C8608 +
            (C80487 * C3859 - C82635 * C3945 + C80484 * C3862 - C82642 * C3946 +
             C80495 * C16579 - C44659 * C16625) *
                C82679) *
               C39819 +
           ((C80487 * C694 - C82635 * C754 + C80484 * C1654 - C82642 * C1747 +
             C80495 * C2526 - C44659 * C2654) *
                C8607 +
            (C80487 * C1004 - C82635 * C1056 + C80484 * C2242 - C82642 * C2324 +
             C80495 * C3084 - C44659 * C3176) *
                C82864 +
            (C80487 * C3347 - C82635 * C3443 + C80484 * C3344 - C82642 * C3444 +
             C80495 * C20408 - C44659 * C20478) *
                C8608 +
            (C80487 * C3860 - C82635 * C3947 + C80484 * C3863 - C82642 * C3948 +
             C80495 * C20816 - C44659 * C20884) *
                C82679) *
               C82533) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eezz[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
             C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
                C82635 +
            (C12270 + C12271) * C82642 + (C22858 + C22859) * C44659) *
               C39819 +
           ((C9089 + C9090) * C82635 + (C11321 + C11322) * C82642 +
            (C21898 + C21899) * C44659) *
               C82533) *
              C82938 * C688 -
          (((C8608 * C20546 - C9051 * C20408 - C8608 * C20816 +
             C82679 * C20951 + C8607 * C2734 - C9050 * C2526 - C8607 * C3084 +
             C82864 * C3253) *
                C44659 +
            (C21899 + C21898) * C82642 + (C11322 + C11321) * C82635) *
               C82533 +
           ((C25000 + C24999) * C44659 + (C22859 + C22858) * C82642 +
            (C12271 + C12270) * C82635) *
               C39819) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eexx[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39825 * C108 - C39826 * C102 - C39825 * C109 + C39819 * C120 +
             C39827 * C110 - C39828 * C103 - C39827 * C111 + C82533 * C121) *
                C82864 +
            (C43717 + C43718) * C82679) *
               C82635 +
           ((C40524 + C40525) * C82864 + (C42783 + C42784) * C82679) * C82642 +
           ((C40526 + C40527) * C82864 + (C50540 + C50541) * C82679) * C44659) *
              C1149 -
          (((C39827 * C16749 - C39828 * C16746 - C39827 * C16750 +
             C82533 * C16752 + C39825 * C16747 - C39826 * C16745 -
             C39825 * C16748 + C39819 * C16751) *
                C82679 +
            (C50541 + C50540) * C82864) *
               C44659 +
           ((C42786 + C42785) * C82679 + (C42784 + C42783) * C82864) * C82642 +
           ((C43720 + C43719) * C82679 + (C43718 + C43717) * C82864) * C82635) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eexy[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82635 * C169 - C80487 * C102 + C82642 * C753 - C80484 * C695 +
             C44659 * C1746 - C80495 * C1653) *
                C39825 +
            (C82635 * C175 - C80487 * C109 + C82642 * C758 - C80484 * C705 +
             C44659 * C1750 - C80495 * C1658) *
                C39819 +
            (C44744 - C44745 + C44746 - C44747 + C44748 - C44749) * C39827 +
            (C44750 - C44751 + C44752 - C44753 + C44754 - C44755) * C82533) *
               C82864 +
           ((C51534 - C51535 + C51536 - C51537 + C51538 - C51539) * C39825 +
            (C51540 - C51541 + C51542 - C51543 + C51544 - C51545) * C39819 +
            (C49705 - C49706 + C49707 - C49708 + C49709 - C49710) * C39827 +
            (C49711 - C49712 + C49713 - C49714 + C49715 - C49716) * C82533) *
               C82679) *
              C1149 +
          (((C51535 - C51534 + C51537 - C51536 + C51539 - C51538) * C39825 +
            (C51541 - C51540 + C51543 - C51542 + C51545 - C51544) * C39819 +
            (C49706 - C49705 + C49708 - C49707 + C49710 - C49709) * C39827 +
            (C49712 - C49711 + C49714 - C49713 + C49716 - C49715) * C82533) *
               C82864 +
           ((C80487 * C4108 - C82635 * C4198 + C80484 * C4976 - C82642 * C5060 +
             C80495 * C16745 - C44659 * C16827) *
                C39825 +
            (C80487 * C4113 - C82635 * C4202 + C80484 * C4982 - C82642 * C5063 +
             C80495 * C16748 - C44659 * C16829) *
                C39819 +
            (C80487 * C4109 - C82635 * C4199 + C80484 * C4975 - C82642 * C5061 +
             C80495 * C16746 - C44659 * C16828) *
                C39827 +
            (C80487 * C4115 - C82635 * C4203 + C80484 * C4980 - C82642 * C5064 +
             C80495 * C16750 - C44659 * C16830) *
                C82533) *
               C82679) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eexz[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C39825 +
            (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
                C39819 +
            (C8610 - C8611 + C8612 - C8613) * C39827 +
            (C8614 - C8615 + C8616 - C8617) * C82533) *
               C82635 +
           ((C11640 - C11641 + C11642 - C11643) * C39825 +
            (C11644 - C11645 + C11646 - C11647) * C39819 +
            (C10649 - C10650 + C10651 - C10652) * C39827 +
            (C10653 - C10654 + C10655 - C10656) * C82533) *
               C82642 +
           ((C22222 - C22223 + C22224 - C22225) * C39825 +
            (C22226 - C22227 + C22228 - C22229) * C39819 +
            (C21259 - C21260 + C21261 - C21262) * C39827 +
            (C21263 - C21264 + C21265 - C21266) * C82533) *
               C44659) *
              C1149 +
          (((C8607 * C1155 - C82864 * C1265 + C8608 * C4108 - C82679 * C4299) *
                C39825 +
            (C8607 * C1165 - C82864 * C1270 + C8608 * C4113 - C82679 * C4303) *
                C39819 +
            (C8607 * C1154 - C82864 * C1266 + C8608 * C4109 - C82679 * C4300) *
                C39827 +
            (C8607 * C1163 - C82864 * C1271 + C8608 * C4115 - C82679 * C4304) *
                C82533) *
               C82635 +
           ((C8607 * C3348 - C82864 * C3527 + C8608 * C4976 - C82679 * C5140) *
                C39825 +
            (C8607 * C3360 - C82864 * C3533 + C8608 * C4982 - C82679 * C5143) *
                C39819 +
            (C8607 * C3347 - C82864 * C3528 + C8608 * C4975 - C82679 * C5141) *
                C39827 +
            (C8607 * C3358 - C82864 * C3534 + C8608 * C4980 - C82679 * C5144) *
                C82533) *
               C82642 +
           ((C8607 * C3345 - C82864 * C3530 + C8608 * C16745 -
             C82679 * C16905) *
                C39825 +
            (C8607 * C3354 - C82864 * C3536 + C8608 * C16748 -
             C82679 * C16907) *
                C39819 +
            (C8607 * C3344 - C82864 * C3531 + C8608 * C16746 -
             C82679 * C16906) *
                C39827 +
            (C8607 * C3352 - C82864 * C3537 + C8608 * C16750 -
             C82679 * C16908) *
                C82533) *
               C44659) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyx[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C80487 +
            (C39819 * C316 - C39825 * C310 + C82533 * C317 - C39827 * C311) *
                C82635 +
            (C40728 - C40729 + C40730 - C40731) * C80484 +
            (C40732 - C40733 + C40734 - C40735) * C82642 +
            (C40736 - C40737 + C40738 - C40739) * C80495 +
            (C40740 - C40741 + C40742 - C40743) * C44659) *
               C82864 +
           ((C44031 - C44032 + C44033 - C44034) * C80487 +
            (C44035 - C44036 + C44037 - C44038) * C82635 +
            (C43081 - C43082 + C43083 - C43084) * C80484 +
            (C43085 - C43086 + C43087 - C43088) * C82642 +
            (C50836 - C50837 + C50838 - C50839) * C80495 +
            (C50840 - C50841 + C50842 - C50843) * C44659) *
               C82679) *
              C1149 +
          (((C44032 - C44031 + C44034 - C44033) * C80487 +
            (C44036 - C44035 + C44038 - C44037) * C82635 +
            (C43082 - C43081 + C43084 - C43083) * C80484 +
            (C43086 - C43085 + C43088 - C43087) * C82642 +
            (C50837 - C50836 + C50839 - C50838) * C80495 +
            (C50841 - C50840 + C50843 - C50842) * C44659) *
               C82864 +
           ((C44040 - C44039 + C44042 - C44041) * C80487 +
            (C44044 - C44043 + C44046 - C44045) * C82635 +
            (C43090 - C43089 + C43092 - C43091) * C80484 +
            (C43094 - C43093 + C43096 - C43095) * C82642 +
            (C39825 * C16745 - C39819 * C16747 + C39827 * C16746 -
             C82533 * C16749) *
                C80495 +
            (C39825 * C16983 - C39819 * C16985 + C39827 * C16984 -
             C82533 * C16986) *
                C44659) *
               C82679) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyy[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C80487 * C169 - C80539 * C102 - C80487 * C310 +
                      C82635 * C365 + C80484 * C753 - C80532 * C695 -
                      C80484 * C857 + C82642 * C913 + C80495 * C1746 -
                      C44991 * C1653 - C80495 * C1950 + C44659 * C2035) *
                         C39819 +
                     (C45029 + C45030 + C45031) * C82533) *
                        C82864 +
                    ((C51858 + C51859 + C51860) * C39819 +
                     (C50029 + C50030 + C50031) * C82533) *
                        C82679) *
                       C1149 -
                   (((C80495 * C16828 - C44991 * C16746 - C80495 * C16984 +
                      C44659 * C17062 + C80484 * C5061 - C80532 * C4975 -
                      C80484 * C5221 + C82642 * C5301 + C80487 * C4199 -
                      C80539 * C4109 - C80487 * C4406 + C82635 * C4488) *
                         C82533 +
                     (C80495 * C16827 - C44991 * C16745 - C80495 * C16983 +
                      C44659 * C17061 + C80484 * C5060 - C80532 * C4976 -
                      C80484 * C5220 + C82642 * C5302 + C80487 * C4198 -
                      C80539 * C4108 - C80487 * C4405 + C82635 * C4487) *
                         C39819) *
                        C82679 +
                    ((C50031 + C50030 + C50029) * C82533 +
                     (C51860 + C51859 + C51858) * C39819) *
                        C82864) *
                       C1150) *
                  C82939 * C82940) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C80487 +
            (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
                C82635 +
            (C11640 - C11641 + C11642 - C11643) * C80484 +
            (C11954 - C11955 + C11956 - C11957) * C82642 +
            (C22222 - C22223 + C22224 - C22225) * C80495 +
            (C22540 - C22541 + C22542 - C22543) * C44659) *
               C39819 +
           ((C8610 - C8611 + C8612 - C8613) * C80487 +
            (C8839 - C8840 + C8841 - C8842) * C82635 +
            (C10649 - C10650 + C10651 - C10652) * C80484 +
            (C10987 - C10988 + C10989 - C10990) * C82642 +
            (C21259 - C21260 + C21261 - C21262) * C80495 +
            (C21582 - C21583 + C21584 - C21585) * C44659) *
               C82533) *
              C1149 +
          (((C8607 * C1155 - C82864 * C1265 + C8608 * C4108 - C82679 * C4299) *
                C80487 +
            (C8607 * C1317 - C82864 * C1416 + C8608 * C4405 - C82679 * C4593) *
                C82635 +
            (C8607 * C3348 - C82864 * C3527 + C8608 * C4976 - C82679 * C5140) *
                C80484 +
            (C8607 * C3613 - C82864 * C3779 + C8608 * C5220 - C82679 * C5377) *
                C82642 +
            (C8607 * C3345 - C82864 * C3530 + C8608 * C16745 -
             C82679 * C16905) *
                C80495 +
            (C8607 * C3616 - C82864 * C3780 + C8608 * C16983 -
             C82679 * C17137) *
                C44659) *
               C39819 +
           ((C8607 * C1154 - C82864 * C1266 + C8608 * C4109 - C82679 * C4300) *
                C80487 +
            (C8607 * C1318 - C82864 * C1417 + C8608 * C4406 - C82679 * C4594) *
                C82635 +
            (C8607 * C3347 - C82864 * C3528 + C8608 * C4975 - C82679 * C5141) *
                C80484 +
            (C8607 * C3614 - C82864 * C3781 + C8608 * C5221 - C82679 * C5378) *
                C82642 +
            (C8607 * C3344 - C82864 * C3531 + C8608 * C16746 -
             C82679 * C16906) *
                C80495 +
            (C8607 * C3617 - C82864 * C3782 + C8608 * C16984 -
             C82679 * C17138) *
                C44659) *
               C82533) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eezx[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C8607 +
            (C39819 * C503 - C39825 * C497 + C82533 * C504 - C39827 * C498) *
                C82864 +
            (C44031 - C44032 + C44033 - C44034) * C8608 +
            (C44369 - C44370 + C44371 - C44372) * C82679) *
               C82635 +
           ((C40728 - C40729 + C40730 - C40731) * C8607 +
            (C40950 - C40951 + C40952 - C40953) * C82864 +
            (C43081 - C43082 + C43083 - C43084) * C8608 +
            (C43391 - C43392 + C43393 - C43394) * C82679) *
               C82642 +
           ((C40736 - C40737 + C40738 - C40739) * C8607 +
            (C40954 - C40955 + C40956 - C40957) * C82864 +
            (C50836 - C50837 + C50838 - C50839) * C8608 +
            (C51138 - C51139 + C51140 - C51141) * C82679) *
               C44659) *
              C1149 +
          (((C44032 - C44031 + C44034 - C44033) * C8607 +
            (C44370 - C44369 + C44372 - C44371) * C82864 +
            (C44040 - C44039 + C44042 - C44041) * C8608 +
            (C44374 - C44373 + C44376 - C44375) * C82679) *
               C82635 +
           ((C43082 - C43081 + C43084 - C43083) * C8607 +
            (C43392 - C43391 + C43394 - C43393) * C82864 +
            (C43090 - C43089 + C43092 - C43091) * C8608 +
            (C43396 - C43395 + C43398 - C43397) * C82679) *
               C82642 +
           ((C50837 - C50836 + C50839 - C50838) * C8607 +
            (C51139 - C51138 + C51141 - C51140) * C82864 +
            (C39825 * C16745 - C39819 * C16747 + C39827 * C16746 -
             C82533 * C16749) *
                C8608 +
            (C39825 * C17213 - C39819 * C17215 + C39827 * C17214 -
             C82533 * C17216) *
                C82679) *
               C44659) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eezy[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82635 * C169 - C80487 * C102 + C82642 * C753 - C80484 * C695 +
             C44659 * C1746 - C80495 * C1653) *
                C8607 +
            (C82635 * C551 - C80487 * C497 + C82642 * C1055 - C80484 * C1003 +
             C44659 * C2323 - C80495 * C2241) *
                C82864 +
            (C51534 - C51535 + C51536 - C51537 + C51538 - C51539) * C8608 +
            (C52155 - C52156 + C52157 - C52158 + C52159 - C52160) * C82679) *
               C39819 +
           ((C44744 - C44745 + C44746 - C44747 + C44748 - C44749) * C8607 +
            (C45257 - C45258 + C45259 - C45260 + C45261 - C45262) * C82864 +
            (C49705 - C49706 + C49707 - C49708 + C49709 - C49710) * C8608 +
            (C50326 - C50327 + C50328 - C50329 + C50330 - C50331) * C82679) *
               C82533) *
              C1149 +
          (((C51535 - C51534 + C51537 - C51536 + C51539 - C51538) * C8607 +
            (C52156 - C52155 + C52158 - C52157 + C52160 - C52159) * C82864 +
            (C80487 * C4108 - C82635 * C4198 + C80484 * C4976 - C82642 * C5060 +
             C80495 * C16745 - C44659 * C16827) *
                C8608 +
            (C80487 * C4683 - C82635 * C4765 + C80484 * C5454 - C82642 * C5534 +
             C80495 * C17213 - C44659 * C17291) *
                C82679) *
               C39819 +
           ((C49706 - C49705 + C49708 - C49707 + C49710 - C49709) * C8607 +
            (C50327 - C50326 + C50329 - C50328 + C50331 - C50330) * C82864 +
            (C80487 * C4109 - C82635 * C4199 + C80484 * C4975 - C82642 * C5061 +
             C80495 * C16746 - C44659 * C16828) *
                C8608 +
            (C80487 * C4684 - C82635 * C4766 + C80484 * C5455 - C82642 * C5535 +
             C80495 * C17214 - C44659 * C17292) *
                C82679) *
               C82533) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eezz[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
             C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
                C82635 +
            (C12270 + C12271) * C82642 + (C22858 + C22859) * C44659) *
               C39819 +
           ((C9089 + C9090) * C82635 + (C11321 + C11322) * C82642 +
            (C21898 + C21899) * C44659) *
               C82533) *
              C1149 -
          (((C8608 * C16906 - C9051 * C16746 - C8608 * C17214 +
             C82679 * C17368 + C8607 * C3531 - C9050 * C3344 - C8607 * C3863 +
             C82864 * C4027) *
                C44659 +
            (C8608 * C5141 - C9051 * C4975 - C8608 * C5455 + C82679 * C5612 +
             C8607 * C3528 - C9050 * C3347 - C8607 * C3860 + C82864 * C4028) *
                C82642 +
            (C8608 * C4300 - C9051 * C4109 - C8608 * C4684 + C82679 * C4855 +
             C8607 * C1266 - C9050 * C1154 - C8607 * C1464 + C82864 * C1565) *
                C82635) *
               C82533 +
           ((C8608 * C16905 - C9051 * C16745 - C8608 * C17213 +
             C82679 * C17367 + C8607 * C3530 - C9050 * C3345 - C8607 * C3862 +
             C82864 * C4029) *
                C44659 +
            (C8608 * C5140 - C9051 * C4976 - C8608 * C5454 + C82679 * C5613 +
             C8607 * C3527 - C9050 * C3348 - C8607 * C3859 + C82864 * C4030) *
                C82642 +
            (C8608 * C4299 - C9051 * C4108 - C8608 * C4683 + C82679 * C4854 +
             C8607 * C1265 - C9050 * C1155 - C8607 * C1463 + C82864 * C1566) *
                C82635) *
               C39819) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eexx[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39825 * C108 - C39826 * C102 - C39825 * C109 + C39819 * C120 +
            C39827 * C110 - C39828 * C103 - C39827 * C111 + C82533 * C121) *
               C82592 * C82941 +
           (C39825 * C704 - C39826 * C695 - C39825 * C705 + C39819 * C710 +
            C39827 * C702 - C39828 * C694 - C39827 * C703 + C82533 * C709) *
               C82592 * C82934 +
           (C39825 * C1657 - C39826 * C1653 - C39825 * C1658 + C39819 * C1665 +
            C39827 * C1659 - C39828 * C1654 - C39827 * C1660 + C82533 * C1666) *
               C82592 * C82921 +
           (C39825 * C2532 - C39826 * C2527 - C39825 * C2533 + C39819 * C2536 +
            C39827 * C2530 - C39828 * C2526 - C39827 * C2531 + C82533 * C2535) *
               C82592 * C82871) *
              C82938 * C82939 * C90 -
          ((C39827 * C2528 - C39828 * C2525 - C39827 * C2529 + C82533 * C2534 +
            C39825 * C2530 - C39826 * C2526 - C39825 * C2531 + C39819 * C2535) *
               C82592 * C82871 +
           (C39827 * C1661 - C39828 * C1655 - C39827 * C1662 + C82533 * C1667 +
            C39825 * C1659 - C39826 * C1654 - C39825 * C1660 + C39819 * C1666) *
               C82592 * C82921 +
           (C39827 * C700 - C39828 * C693 - C39827 * C701 + C82533 * C708 +
            C39825 * C702 - C39826 * C694 - C39825 * C703 + C39819 * C709) *
               C82592 * C82934 +
           (C39827 * C112 - C39828 * C104 - C39827 * C113 + C82533 * C122 +
            C39825 * C110 - C39826 * C103 - C39825 * C111 + C39819 * C121) *
               C82592 * C82941) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C37889 * C108 - C37890 * C102 - C37889 * C109 + C82937 * C120 +
            C37891 * C110 - C37892 * C103 - C37891 * C111 + C82927 * C121 +
            C37893 * C112 - C37894 * C104 - C37893 * C113 + C82911 * C122 +
            C37895 * C114 - C37896 * C105 - C37895 * C115 + C82862 * C123) *
               C82592 * C37887 +
           (C37889 * C704 - C37890 * C695 - C37889 * C705 + C82937 * C710 +
            C37891 * C702 - C37892 * C694 - C37891 * C703 + C82927 * C709 +
            C37893 * C700 - C37894 * C693 - C37893 * C701 + C82911 * C708 +
            C37895 * C698 - C37896 * C692 - C37895 * C699 + C82862 * C707) *
               C82592 * C82639) *
              C82938 * C82939 * C90 -
          ((C37895 * C696 - C37896 * C691 - C37895 * C697 + C82862 * C706 +
            C37893 * C698 - C37894 * C692 - C37893 * C699 + C82911 * C707 +
            C37891 * C700 - C37892 * C693 - C37891 * C701 + C82927 * C708 +
            C37889 * C702 - C37890 * C694 - C37889 * C703 + C82937 * C709) *
               C82592 * C82639 +
           (C37895 * C116 - C37896 * C106 - C37895 * C117 + C82862 * C124 +
            C37893 * C114 - C37894 * C105 - C37893 * C115 + C82911 * C123 +
            C37891 * C112 - C37892 * C104 - C37891 * C113 + C82927 * C122 +
            C37889 * C110 - C37890 * C103 - C37889 * C111 + C82937 * C121) *
               C82592 * C37887) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39825 * C108 - C39826 * C102 - C39825 * C109 + C39819 * C120 +
             C39827 * C110 - C39828 * C103 - C39827 * C111 + C82533 * C121) *
                C82932 +
            (C39825 * C1164 - C39826 * C1155 - C39825 * C1165 + C39819 * C1170 +
             C39827 * C1162 - C39828 * C1154 - C39827 * C1163 +
             C82533 * C1169) *
                C82918 +
            (C39825 * C4112 - C39826 * C4108 - C39825 * C4113 + C39819 * C4120 +
             C39827 * C4114 - C39828 * C4109 - C39827 * C4115 +
             C82533 * C4121) *
                C82896) *
               C37887 +
           ((C40524 + C40525) * C82932 +
            (C39825 * C3359 - C39826 * C3348 - C39825 * C3360 + C39819 * C3366 +
             C39827 * C3357 - C39828 * C3347 - C39827 * C3358 +
             C82533 * C3365) *
                C82918 +
            (C39825 * C4981 - C39826 * C4976 - C39825 * C4982 + C39819 * C4985 +
             C39827 * C4979 - C39828 * C4975 - C39827 * C4980 +
             C82533 * C4984) *
                C82896) *
               C82639) *
              C82938 * C82939 * C90 -
          (((C39827 * C4977 - C39828 * C4974 - C39827 * C4978 + C82533 * C4983 +
             C39825 * C4979 - C39826 * C4975 - C39825 * C4980 +
             C39819 * C4984) *
                C82896 +
            (C39827 * C3355 - C39828 * C3346 - C39827 * C3356 + C82533 * C3364 +
             C39825 * C3357 - C39826 * C3347 - C39825 * C3358 +
             C39819 * C3365) *
                C82918 +
            (C39827 * C700 - C39828 * C693 - C39827 * C701 + C82533 * C708 +
             C39825 * C702 - C39826 * C694 - C39825 * C703 + C39819 * C709) *
                C82932) *
               C82639 +
           ((C39827 * C4116 - C39828 * C4110 - C39827 * C4117 + C82533 * C4122 +
             C39825 * C4114 - C39826 * C4109 - C39825 * C4115 +
             C39819 * C4121) *
                C82896 +
            (C39827 * C1160 - C39828 * C1153 - C39827 * C1161 + C82533 * C1168 +
             C39825 * C1162 - C39826 * C1154 - C39825 * C1163 +
             C39819 * C1169) *
                C82918 +
            (C39827 * C112 - C39828 * C104 - C39827 * C113 + C82533 * C122 +
             C39825 * C110 - C39826 * C103 - C39825 * C111 + C39819 * C121) *
                C82932) *
               C37887) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82941 * C169 - C39895 * C102 + C82934 * C753 - C39896 * C695 +
            C82921 * C1746 - C39897 * C1653 + C82871 * C2653 - C39898 * C2527) *
               C39825 +
           (C82941 * C175 - C39895 * C109 + C82934 * C758 - C39896 * C705 +
            C82921 * C1750 - C39897 * C1658 + C82871 * C2656 - C39898 * C2533) *
               C39819 +
           (C39900 - C39901 + C39902 - C39903 + C39904 - C39905 + C39906 -
            C39907) *
               C39827 +
           (C39908 - C39909 + C39910 - C39911 + C39912 - C39913 + C39914 -
            C39915) *
               C82533) *
              C82592 * C82938 * C82939 * C90 +
          ((C39901 - C39900 + C39903 - C39902 + C39905 - C39904 + C39907 -
            C39906) *
               C39825 +
           (C39909 - C39908 + C39911 - C39910 + C39913 - C39912 + C39915 -
            C39914) *
               C39819 +
           (C39895 * C104 - C82941 * C171 + C39896 * C693 - C82934 * C755 +
            C39897 * C1655 - C82921 * C1748 + C39898 * C2525 - C82871 * C2655) *
               C39827 +
           (C39895 * C113 - C82941 * C177 + C39896 * C701 - C82934 * C760 +
            C39897 * C1662 - C82921 * C1752 + C39898 * C2529 - C82871 * C2658) *
               C82533) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
               C37889 +
           (C37887 * C175 - C37963 * C109 + C82639 * C758 - C37964 * C705) *
               C82937 +
           (C37966 - C37967 + C37968 - C37969) * C37891 +
           (C37970 - C37971 + C37972 - C37973) * C82927 +
           (C37974 - C37975 + C37976 - C37977) * C37893 +
           (C37978 - C37979 + C37980 - C37981) * C82911 +
           (C37982 - C37983 + C37984 - C37985) * C37895 +
           (C37986 - C37987 + C37988 - C37989) * C82862) *
              C82592 * C82938 * C82939 * C90 +
          ((C37967 - C37966 + C37969 - C37968) * C37889 +
           (C37971 - C37970 + C37973 - C37972) * C82937 +
           (C37975 - C37974 + C37977 - C37976) * C37891 +
           (C37979 - C37978 + C37981 - C37980) * C82927 +
           (C37983 - C37982 + C37985 - C37984) * C37893 +
           (C37987 - C37986 + C37989 - C37988) * C82911 +
           (C37963 * C106 - C37887 * C173 + C37964 * C691 - C82639 * C757) *
               C37895 +
           (C37963 * C117 - C37887 * C179 + C37964 * C697 - C82639 * C762) *
               C82862) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C39825 +
            (C37887 * C175 - C37963 * C109 + C82639 * C758 - C37964 * C705) *
                C39819 +
            (C37966 - C37967 + C37968 - C37969) * C39827 +
            (C37970 - C37971 + C37972 - C37973) * C82533) *
               C82932 +
           ((C37887 * C1213 - C37963 * C1155 + C82639 * C3441 -
             C37964 * C3348) *
                C39825 +
            (C37887 * C1218 - C37963 * C1165 + C82639 * C3447 -
             C37964 * C3360) *
                C39819 +
            (C41884 - C41885 + C41886 - C41887) * C39827 +
            (C41888 - C41889 + C41890 - C41891) * C82533) *
               C82918 +
           ((C37887 * C4198 - C37963 * C4108 + C82639 * C5060 -
             C37964 * C4976) *
                C39825 +
            (C37887 * C4202 - C37963 * C4113 + C82639 * C5063 -
             C37964 * C4982) *
                C39819 +
            (C41892 - C41893 + C41894 - C41895) * C39827 +
            (C41896 - C41897 + C41898 - C41899) * C82533) *
               C82896) *
              C82938 * C82939 * C90 +
          (((C37967 - C37966 + C37969 - C37968) * C39825 +
            (C37971 - C37970 + C37973 - C37972) * C39819 +
            (C37975 - C37974 + C37977 - C37976) * C39827 +
            (C37979 - C37978 + C37981 - C37980) * C82533) *
               C82932 +
           ((C41885 - C41884 + C41887 - C41886) * C39825 +
            (C41889 - C41888 + C41891 - C41890) * C39819 +
            (C37963 * C1153 - C37887 * C1215 + C37964 * C3346 -
             C82639 * C3445) *
                C39827 +
            (C37963 * C1161 - C37887 * C1220 + C37964 * C3356 -
             C82639 * C3451) *
                C82533) *
               C82918 +
           ((C41893 - C41892 + C41895 - C41894) * C39825 +
            (C41897 - C41896 + C41899 - C41898) * C39819 +
            (C37963 * C4110 - C37887 * C4200 + C37964 * C4974 -
             C82639 * C5062) *
                C39827 +
            (C37963 * C4117 - C37887 * C4204 + C37964 * C4978 -
             C82639 * C5065) *
                C82533) *
               C82896) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C39825 +
            (C82592 * C246 - C239 * C109) * C39819 + (C253 - C254) * C39827 +
            (C255 - C256) * C82533) *
               C82941 +
           ((C2740 - C2741) * C39825 + (C2742 - C2743) * C39819 +
            (C1861 - C1862) * C39827 + (C1863 - C1864) * C82533) *
               C82934 +
           ((C2744 - C2745) * C39825 + (C2746 - C2747) * C39819 +
            (C1869 - C1870) * C39827 + (C1871 - C1872) * C82533) *
               C82921 +
           ((C15952 - C15953) * C39825 + (C15954 - C15955) * C39819 +
            (C19218 - C19219) * C39827 + (C19220 - C19221) * C82533) *
               C82871) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C39825 + (C256 - C255) * C39819 +
            (C258 - C257) * C39827 + (C260 - C259) * C82533) *
               C82941 +
           ((C1862 - C1861) * C39825 + (C1864 - C1863) * C39819 +
            (C1866 - C1865) * C39827 + (C1868 - C1867) * C82533) *
               C82934 +
           ((C1870 - C1869) * C39825 + (C1872 - C1871) * C39819 +
            (C1874 - C1873) * C39827 + (C1876 - C1875) * C82533) *
               C82921 +
           ((C19219 - C19218) * C39825 + (C19221 - C19220) * C39819 +
            (C239 * C2525 - C82592 * C2735) * C39827 +
            (C239 * C2529 - C82592 * C2738) * C82533) *
               C82871) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C37889 +
            (C82592 * C246 - C239 * C109) * C82937 + (C253 - C254) * C37891 +
            (C255 - C256) * C82927 + (C257 - C258) * C37893 +
            (C259 - C260) * C82911 + (C261 - C262) * C37895 +
            (C263 - C264) * C82862) *
               C37887 +
           ((C2740 - C2741) * C37889 + (C2742 - C2743) * C82937 +
            (C1861 - C1862) * C37891 + (C1863 - C1864) * C82927 +
            (C1865 - C1866) * C37893 + (C1867 - C1868) * C82911 +
            (C6677 - C6678) * C37895 + (C6679 - C6680) * C82862) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C37889 + (C256 - C255) * C82937 +
            (C258 - C257) * C37891 + (C260 - C259) * C82927 +
            (C262 - C261) * C37893 + (C264 - C263) * C82911 +
            (C266 - C265) * C37895 + (C268 - C267) * C82862) *
               C37887 +
           ((C1862 - C1861) * C37889 + (C1864 - C1863) * C82937 +
            (C1866 - C1865) * C37891 + (C1868 - C1867) * C82927 +
            (C6678 - C6677) * C37893 + (C6680 - C6679) * C82911 +
            (C239 * C691 - C82592 * C809) * C37895 +
            (C239 * C697 - C82592 * C814) * C82862) *
               C82639) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
             C82896 * C4299 - C4298 * C4108) *
                C39825 +
            (C82932 * C246 - C4296 * C109 + C82918 * C1270 - C4297 * C1165 +
             C82896 * C4303 - C4298 * C4113) *
                C39819 +
            (C4308 - C4309 + C4310 - C4311 + C4312 - C4313) * C39827 +
            (C4314 - C4315 + C4316 - C4317 + C4318 - C4319) * C82533) *
               C37887 +
           ((C17634 - C17635 + C17636 - C17637 + C17638 - C17639) * C39825 +
            (C17640 - C17641 + C17642 - C17643 + C17644 - C17645) * C39819 +
            (C41998 - C41999 + C42000 - C42001 + C42002 - C42003) * C39827 +
            (C42004 - C42005 + C42006 - C42007 + C42008 - C42009) * C82533) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C4309 - C4308 + C4311 - C4310 + C4313 - C4312) * C39825 +
            (C4315 - C4314 + C4317 - C4316 + C4319 - C4318) * C39819 +
            (C4321 - C4320 + C4323 - C4322 + C4325 - C4324) * C39827 +
            (C4327 - C4326 + C4329 - C4328 + C4331 - C4330) * C82533) *
               C37887 +
           ((C41999 - C41998 + C42001 - C42000 + C42003 - C42002) * C39825 +
            (C42005 - C42004 + C42007 - C42006 + C42009 - C42008) * C39819 +
            (C4296 * C693 - C82932 * C807 + C4297 * C3346 - C82918 * C3529 +
             C4298 * C4974 - C82896 * C5142) *
                C39827 +
            (C4296 * C701 - C82932 * C812 + C4297 * C3356 - C82918 * C3535 +
             C4298 * C4978 - C82896 * C5145) *
                C82533) *
               C82639) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
               C39895 +
           (C39819 * C316 - C39825 * C310 + C82533 * C317 - C39827 * C311) *
               C82941 +
           (C39819 * C704 - C39825 * C695 + C82533 * C702 - C39827 * C694) *
               C39896 +
           (C39819 * C862 - C39825 * C857 + C82533 * C863 - C39827 * C858) *
               C82934 +
           (C39819 * C1657 - C39825 * C1653 + C82533 * C1659 - C39827 * C1654) *
               C39897 +
           (C39819 * C1954 - C39825 * C1950 + C82533 * C1955 - C39827 * C1951) *
               C82921 +
           (C39819 * C2532 - C39825 * C2527 + C82533 * C2530 - C39827 * C2526) *
               C39898 +
           (C39819 * C2824 - C39825 * C2821 + C82533 * C2825 - C39827 * C2822) *
               C82871) *
              C82592 * C82938 * C82939 * C90 +
          ((C39825 * C103 - C39819 * C110 + C39827 * C104 - C82533 * C112) *
               C39895 +
           (C39825 * C311 - C39819 * C317 + C39827 * C312 - C82533 * C318) *
               C82941 +
           (C39825 * C694 - C39819 * C702 + C39827 * C693 - C82533 * C700) *
               C39896 +
           (C39825 * C858 - C39819 * C863 + C39827 * C859 - C82533 * C864) *
               C82934 +
           (C39825 * C1654 - C39819 * C1659 + C39827 * C1655 - C82533 * C1661) *
               C39897 +
           (C39825 * C1951 - C39819 * C1955 + C39827 * C1952 - C82533 * C1956) *
               C82921 +
           (C39825 * C2526 - C39819 * C2530 + C39827 * C2525 - C82533 * C2528) *
               C39898 +
           (C39825 * C2822 - C39819 * C2825 + C39827 * C2823 - C82533 * C2826) *
               C82871) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82937 * C108 - C37889 * C102 + C82927 * C110 - C37891 * C103 +
            C82911 * C112 - C37893 * C104 + C82862 * C114 - C37895 * C105) *
               C37963 +
           (C82937 * C316 - C37889 * C310 + C82927 * C317 - C37891 * C311 +
            C82911 * C318 - C37893 * C312 + C82862 * C319 - C37895 * C313) *
               C37887 +
           (C82937 * C704 - C37889 * C695 + C82927 * C702 - C37891 * C694 +
            C82911 * C700 - C37893 * C693 + C82862 * C698 - C37895 * C692) *
               C37964 +
           (C82937 * C862 - C37889 * C857 + C82927 * C863 - C37891 * C858 +
            C82911 * C864 - C37893 * C859 + C82862 * C865 - C37895 * C860) *
               C82639) *
              C82592 * C82938 * C82939 * C90 +
          ((C37889 * C103 - C82937 * C110 + C37891 * C104 - C82927 * C112 +
            C37893 * C105 - C82911 * C114 + C37895 * C106 - C82862 * C116) *
               C37963 +
           (C37889 * C311 - C82937 * C317 + C37891 * C312 - C82927 * C318 +
            C37893 * C313 - C82911 * C319 + C37895 * C314 - C82862 * C320) *
               C37887 +
           (C37889 * C694 - C82937 * C702 + C37891 * C693 - C82927 * C700 +
            C37893 * C692 - C82911 * C698 + C37895 * C691 - C82862 * C696) *
               C37964 +
           (C37889 * C858 - C82937 * C863 + C37891 * C859 - C82927 * C864 +
            C37893 * C860 - C82911 * C865 + C37895 * C861 - C82862 * C866) *
               C82639) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C37963 +
            (C39819 * C316 - C39825 * C310 + C82533 * C317 - C39827 * C311) *
                C37887 +
            (C40728 - C40729 + C40730 - C40731) * C37964 +
            (C40732 - C40733 + C40734 - C40735) * C82639) *
               C82932 +
           ((C39819 * C1164 - C39825 * C1155 + C82533 * C1162 -
             C39827 * C1154) *
                C37963 +
            (C39819 * C1322 - C39825 * C1317 + C82533 * C1323 -
             C39827 * C1318) *
                C37887 +
            (C39819 * C3359 - C39825 * C3348 + C82533 * C3357 -
             C39827 * C3347) *
                C37964 +
            (C39819 * C3619 - C39825 * C3613 + C82533 * C3620 -
             C39827 * C3614) *
                C82639) *
               C82918 +
           ((C39819 * C4112 - C39825 * C4108 + C82533 * C4114 -
             C39827 * C4109) *
                C37963 +
            (C39819 * C4409 - C39825 * C4405 + C82533 * C4410 -
             C39827 * C4406) *
                C37887 +
            (C39819 * C4981 - C39825 * C4976 + C82533 * C4979 -
             C39827 * C4975) *
                C37964 +
            (C39819 * C5223 - C39825 * C5220 + C82533 * C5224 -
             C39827 * C5221) *
                C82639) *
               C82896) *
              C82938 * C82939 * C90 +
          (((C39825 * C103 - C39819 * C110 + C39827 * C104 - C82533 * C112) *
                C37963 +
            (C39825 * C311 - C39819 * C317 + C39827 * C312 - C82533 * C318) *
                C37887 +
            (C39825 * C694 - C39819 * C702 + C39827 * C693 - C82533 * C700) *
                C37964 +
            (C39825 * C858 - C39819 * C863 + C39827 * C859 - C82533 * C864) *
                C82639) *
               C82932 +
           ((C39825 * C1154 - C39819 * C1162 + C39827 * C1153 -
             C82533 * C1160) *
                C37963 +
            (C39825 * C1318 - C39819 * C1323 + C39827 * C1319 -
             C82533 * C1324) *
                C37887 +
            (C39825 * C3347 - C39819 * C3357 + C39827 * C3346 -
             C82533 * C3355) *
                C37964 +
            (C39825 * C3614 - C39819 * C3620 + C39827 * C3615 -
             C82533 * C3621) *
                C82639) *
               C82918 +
           ((C39825 * C4109 - C39819 * C4114 + C39827 * C4110 -
             C82533 * C4116) *
                C37963 +
            (C39825 * C4406 - C39819 * C4410 + C39827 * C4407 -
             C82533 * C4411) *
                C37887 +
            (C39825 * C4975 - C39819 * C4979 + C39827 * C4974 -
             C82533 * C4977) *
                C37964 +
            (C39825 * C5221 - C39819 * C5224 + C39827 * C5222 -
             C82533 * C5225) *
                C82639) *
               C82896) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39895 * C169 - C40113 * C102 - C39895 * C310 + C82941 * C365 +
            C39896 * C753 - C40114 * C695 - C39896 * C857 + C82934 * C913 +
            C39897 * C1746 - C40115 * C1653 - C39897 * C1950 + C82921 * C2035 +
            C39898 * C2653 - C40116 * C2527 - C39898 * C2821 + C82871 * C2927) *
               C39819 +
           (C40142 + C40143 + C40144 + C40145) * C82533) *
              C82592 * C82938 * C82939 * C90 -
          ((C39898 * C2655 - C40116 * C2525 - C39898 * C2823 + C82871 * C2925 +
            C39897 * C1748 - C40115 * C1655 - C39897 * C1952 + C82921 * C2037 +
            C39896 * C755 - C40114 * C693 - C39896 * C859 + C82934 * C911 +
            C39895 * C171 - C40113 * C104 - C39895 * C312 + C82941 * C367) *
               C82533 +
           (C40145 + C40144 + C40143 + C40142) * C39819) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C37963 * C169 - C38187 * C102 - C37963 * C310 + C37887 * C365 +
            C37964 * C753 - C38188 * C695 - C37964 * C857 + C82639 * C913) *
               C82937 +
           (C38226 + C38227) * C82927 + (C38228 + C38229) * C82911 +
           (C38230 + C38231) * C82862) *
              C82592 * C82938 * C82939 * C90 -
          ((C37964 * C757 - C38188 * C691 - C37964 * C861 + C82639 * C909 +
            C37963 * C173 - C38187 * C106 - C37963 * C314 + C37887 * C369) *
               C82862 +
           (C38231 + C38230) * C82911 + (C38229 + C38228) * C82927 +
           (C38227 + C38226) * C82937) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C37963 * C169 - C38187 * C102 - C37963 * C310 + C37887 * C365 +
             C37964 * C753 - C38188 * C695 - C37964 * C857 + C82639 * C913) *
                C39819 +
            (C38226 + C38227) * C82533) *
               C82932 +
           ((C37963 * C1213 - C38187 * C1155 - C37963 * C1317 + C37887 * C1373 +
             C37964 * C3441 - C38188 * C3348 - C37964 * C3613 +
             C82639 * C3704) *
                C39819 +
            (C42230 + C42231) * C82533) *
               C82918 +
           ((C37963 * C4198 - C38187 * C4108 - C37963 * C4405 + C37887 * C4487 +
             C37964 * C5060 - C38188 * C4976 - C37964 * C5220 +
             C82639 * C5302) *
                C39819 +
            (C42232 + C42233) * C82533) *
               C82896) *
              C82938 * C82939 * C90 -
          (((C37964 * C5062 - C38188 * C4974 - C37964 * C5222 + C82639 * C5300 +
             C37963 * C4200 - C38187 * C4110 - C37963 * C4407 +
             C37887 * C4489) *
                C82533 +
            (C42233 + C42232) * C39819) *
               C82896 +
           ((C37964 * C3445 - C38188 * C3346 - C37964 * C3615 + C82639 * C3700 +
             C37963 * C1215 - C38187 * C1153 - C37963 * C1319 +
             C37887 * C1371) *
                C82533 +
            (C42231 + C42230) * C39819) *
               C82918 +
           ((C38229 + C38228) * C82533 + (C38227 + C38226) * C39819) * C82932) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C39895 +
            (C82592 * C441 - C239 * C310) * C82941 + (C2740 - C2741) * C39896 +
            (C3006 - C3007) * C82934 + (C2744 - C2745) * C39897 +
            (C3008 - C3009) * C82921 + (C15952 - C15953) * C39898 +
            (C16106 - C16107) * C82871) *
               C39819 +
           ((C253 - C254) * C39895 + (C448 - C449) * C82941 +
            (C1861 - C1862) * C39896 + (C2160 - C2161) * C82934 +
            (C1869 - C1870) * C39897 + (C2162 - C2163) * C82921 +
            (C19218 - C19219) * C39898 + (C19452 - C19453) * C82871) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C39895 + (C449 - C448) * C82941 +
            (C1862 - C1861) * C39896 + (C2161 - C2160) * C82934 +
            (C1870 - C1869) * C39897 + (C2163 - C2162) * C82921 +
            (C19219 - C19218) * C39898 + (C19453 - C19452) * C82871) *
               C39819 +
           ((C258 - C257) * C39895 + (C451 - C450) * C82941 +
            (C1866 - C1865) * C39896 + (C2165 - C2164) * C82934 +
            (C1874 - C1873) * C39897 + (C2167 - C2166) * C82921 +
            (C239 * C2525 - C82592 * C2735) * C39898 +
            (C239 * C2823 - C82592 * C3004) * C82871) *
               C82533) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C37963 +
            (C82592 * C441 - C239 * C310) * C37887 + (C2740 - C2741) * C37964 +
            (C3006 - C3007) * C82639) *
               C82937 +
           ((C253 - C254) * C37963 + (C448 - C449) * C37887 +
            (C1861 - C1862) * C37964 + (C2160 - C2161) * C82639) *
               C82927 +
           ((C257 - C258) * C37963 + (C450 - C451) * C37887 +
            (C1865 - C1866) * C37964 + (C2164 - C2165) * C82639) *
               C82911 +
           ((C261 - C262) * C37963 + (C452 - C453) * C37887 +
            (C6677 - C6678) * C37964 + (C6923 - C6924) * C82639) *
               C82862) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C37963 + (C449 - C448) * C37887 +
            (C1862 - C1861) * C37964 + (C2161 - C2160) * C82639) *
               C82937 +
           ((C258 - C257) * C37963 + (C451 - C450) * C37887 +
            (C1866 - C1865) * C37964 + (C2165 - C2164) * C82639) *
               C82927 +
           ((C262 - C261) * C37963 + (C453 - C452) * C37887 +
            (C6678 - C6677) * C37964 + (C6924 - C6923) * C82639) *
               C82911 +
           ((C266 - C265) * C37963 + (C455 - C454) * C37887 +
            (C239 * C691 - C82592 * C809) * C37964 +
            (C239 * C861 - C82592 * C960) * C82639) *
               C82862) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
             C82896 * C4299 - C4298 * C4108) *
                C37963 +
            (C82932 * C441 - C4296 * C310 + C82918 * C1416 - C4297 * C1317 +
             C82896 * C4593 - C4298 * C4405) *
                C37887 +
            (C17634 - C17635 + C17636 - C17637 + C17638 - C17639) * C37964 +
            (C17900 - C17901 + C17902 - C17903 + C17904 - C17905) * C82639) *
               C39819 +
           ((C4308 - C4309 + C4310 - C4311 + C4312 - C4313) * C37963 +
            (C4598 - C4599 + C4600 - C4601 + C4602 - C4603) * C37887 +
            (C41998 - C41999 + C42000 - C42001 + C42002 - C42003) * C37964 +
            (C42332 - C42333 + C42334 - C42335 + C42336 - C42337) * C82639) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C4309 - C4308 + C4311 - C4310 + C4313 - C4312) * C37963 +
            (C4599 - C4598 + C4601 - C4600 + C4603 - C4602) * C37887 +
            (C41999 - C41998 + C42001 - C42000 + C42003 - C42002) * C37964 +
            (C42333 - C42332 + C42335 - C42334 + C42337 - C42336) * C82639) *
               C39819 +
           ((C4321 - C4320 + C4323 - C4322 + C4325 - C4324) * C37963 +
            (C4605 - C4604 + C4607 - C4606 + C4609 - C4608) * C37887 +
            (C4296 * C693 - C82932 * C807 + C4297 * C3346 - C82918 * C3529 +
             C4298 * C4974 - C82896 * C5142) *
                C37964 +
            (C4296 * C859 - C82932 * C958 + C4297 * C3615 - C82918 * C3783 +
             C4298 * C5222 - C82896 * C5379) *
                C82639) *
               C82533) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezx[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C239 +
            (C39819 * C503 - C39825 * C497 + C82533 * C504 - C39827 * C498) *
                C82592) *
               C82941 +
           ((C39819 * C704 - C39825 * C695 + C82533 * C702 - C39827 * C694) *
                C239 +
            (C39819 * C1008 - C39825 * C1003 + C82533 * C1009 -
             C39827 * C1004) *
                C82592) *
               C82934 +
           ((C39819 * C1657 - C39825 * C1653 + C82533 * C1659 -
             C39827 * C1654) *
                C239 +
            (C39819 * C2245 - C39825 * C2241 + C82533 * C2246 -
             C39827 * C2242) *
                C82592) *
               C82921 +
           ((C39819 * C2532 - C39825 * C2527 + C82533 * C2530 -
             C39827 * C2526) *
                C239 +
            (C39819 * C3086 - C39825 * C3083 + C82533 * C3087 -
             C39827 * C3084) *
                C82592) *
               C82871) *
              C82938 * C82939 * C90 +
          (((C39825 * C103 - C39819 * C110 + C39827 * C104 - C82533 * C112) *
                C239 +
            (C39825 * C498 - C39819 * C504 + C39827 * C499 - C82533 * C505) *
                C82592) *
               C82941 +
           ((C39825 * C694 - C39819 * C702 + C39827 * C693 - C82533 * C700) *
                C239 +
            (C39825 * C1004 - C39819 * C1009 + C39827 * C1005 -
             C82533 * C1010) *
                C82592) *
               C82934 +
           ((C39825 * C1654 - C39819 * C1659 + C39827 * C1655 -
             C82533 * C1661) *
                C239 +
            (C39825 * C2242 - C39819 * C2246 + C39827 * C2243 -
             C82533 * C2247) *
                C82592) *
               C82921 +
           ((C39825 * C2526 - C39819 * C2530 + C39827 * C2525 -
             C82533 * C2528) *
                C239 +
            (C39825 * C3084 - C39819 * C3087 + C39827 * C3085 -
             C82533 * C3088) *
                C82592) *
               C82871) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82937 * C108 - C37889 * C102 + C82927 * C110 - C37891 * C103 +
             C82911 * C112 - C37893 * C104 + C82862 * C114 - C37895 * C105) *
                C239 +
            (C82937 * C503 - C37889 * C497 + C82927 * C504 - C37891 * C498 +
             C82911 * C505 - C37893 * C499 + C82862 * C506 - C37895 * C500) *
                C82592) *
               C37887 +
           ((C82937 * C704 - C37889 * C695 + C82927 * C702 - C37891 * C694 +
             C82911 * C700 - C37893 * C693 + C82862 * C698 - C37895 * C692) *
                C239 +
            (C82937 * C1008 - C37889 * C1003 + C82927 * C1009 - C37891 * C1004 +
             C82911 * C1010 - C37893 * C1005 + C82862 * C1011 -
             C37895 * C1006) *
                C82592) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C37889 * C103 - C82937 * C110 + C37891 * C104 - C82927 * C112 +
             C37893 * C105 - C82911 * C114 + C37895 * C106 - C82862 * C116) *
                C239 +
            (C37889 * C498 - C82937 * C504 + C37891 * C499 - C82927 * C505 +
             C37893 * C500 - C82911 * C506 + C37895 * C501 - C82862 * C507) *
                C82592) *
               C37887 +
           ((C37889 * C694 - C82937 * C702 + C37891 * C693 - C82927 * C700 +
             C37893 * C692 - C82911 * C698 + C37895 * C691 - C82862 * C696) *
                C239 +
            (C37889 * C1004 - C82937 * C1009 + C37891 * C1005 - C82927 * C1010 +
             C37893 * C1006 - C82911 * C1011 + C37895 * C1007 -
             C82862 * C1012) *
                C82592) *
               C82639) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C4296 +
            (C39819 * C503 - C39825 * C497 + C82533 * C504 - C39827 * C498) *
                C82932 +
            (C39819 * C1164 - C39825 * C1155 + C82533 * C1162 -
             C39827 * C1154) *
                C4297 +
            (C39819 * C1468 - C39825 * C1463 + C82533 * C1469 -
             C39827 * C1464) *
                C82918 +
            (C39819 * C4112 - C39825 * C4108 + C82533 * C4114 -
             C39827 * C4109) *
                C4298 +
            (C39819 * C4687 - C39825 * C4683 + C82533 * C4688 -
             C39827 * C4684) *
                C82896) *
               C37887 +
           ((C40728 - C40729 + C40730 - C40731) * C4296 +
            (C40950 - C40951 + C40952 - C40953) * C82932 +
            (C39819 * C3359 - C39825 * C3348 + C82533 * C3357 -
             C39827 * C3347) *
                C4297 +
            (C39819 * C3865 - C39825 * C3859 + C82533 * C3866 -
             C39827 * C3860) *
                C82918 +
            (C39819 * C4981 - C39825 * C4976 + C82533 * C4979 -
             C39827 * C4975) *
                C4298 +
            (C39819 * C5457 - C39825 * C5454 + C82533 * C5458 -
             C39827 * C5455) *
                C82896) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C39825 * C103 - C39819 * C110 + C39827 * C104 - C82533 * C112) *
                C4296 +
            (C39825 * C498 - C39819 * C504 + C39827 * C499 - C82533 * C505) *
                C82932 +
            (C39825 * C1154 - C39819 * C1162 + C39827 * C1153 -
             C82533 * C1160) *
                C4297 +
            (C39825 * C1464 - C39819 * C1469 + C39827 * C1465 -
             C82533 * C1470) *
                C82918 +
            (C39825 * C4109 - C39819 * C4114 + C39827 * C4110 -
             C82533 * C4116) *
                C4298 +
            (C39825 * C4684 - C39819 * C4688 + C39827 * C4685 -
             C82533 * C4689) *
                C82896) *
               C37887 +
           ((C39825 * C694 - C39819 * C702 + C39827 * C693 - C82533 * C700) *
                C4296 +
            (C39825 * C1004 - C39819 * C1009 + C39827 * C1005 -
             C82533 * C1010) *
                C82932 +
            (C39825 * C3347 - C39819 * C3357 + C39827 * C3346 -
             C82533 * C3355) *
                C4297 +
            (C39825 * C3860 - C39819 * C3866 + C39827 * C3861 -
             C82533 * C3867) *
                C82918 +
            (C39825 * C4975 - C39819 * C4979 + C39827 * C4974 -
             C82533 * C4977) *
                C4298 +
            (C39825 * C5455 - C39819 * C5458 + C39827 * C5456 -
             C82533 * C5459) *
                C82896) *
               C82639) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82941 * C169 - C39895 * C102 + C82934 * C753 - C39896 * C695 +
             C82921 * C1746 - C39897 * C1653 + C82871 * C2653 -
             C39898 * C2527) *
                C239 +
            (C82941 * C551 - C39895 * C497 + C82934 * C1055 - C39896 * C1003 +
             C82921 * C2323 - C39897 * C2241 + C82871 * C3175 -
             C39898 * C3083) *
                C82592) *
               C39819 +
           ((C39900 - C39901 + C39902 - C39903 + C39904 - C39905 + C39906 -
             C39907) *
                C239 +
            (C40344 - C40345 + C40346 - C40347 + C40348 - C40349 + C40350 -
             C40351) *
                C82592) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C39901 - C39900 + C39903 - C39902 + C39905 - C39904 + C39907 -
             C39906) *
                C239 +
            (C40345 - C40344 + C40347 - C40346 + C40349 - C40348 + C40351 -
             C40350) *
                C82592) *
               C39819 +
           ((C39895 * C104 - C82941 * C171 + C39896 * C693 - C82934 * C755 +
             C39897 * C1655 - C82921 * C1748 + C39898 * C2525 -
             C82871 * C2655) *
                C239 +
            (C39895 * C499 - C82941 * C553 + C39896 * C1005 - C82934 * C1057 +
             C39897 * C2243 - C82921 * C2325 + C39898 * C3085 -
             C82871 * C3177) *
                C82592) *
               C82533) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C239 +
            (C37887 * C551 - C37963 * C497 + C82639 * C1055 - C37964 * C1003) *
                C82592) *
               C82937 +
           ((C37966 - C37967 + C37968 - C37969) * C239 +
            (C38430 - C38431 + C38432 - C38433) * C82592) *
               C82927 +
           ((C37974 - C37975 + C37976 - C37977) * C239 +
            (C38434 - C38435 + C38436 - C38437) * C82592) *
               C82911 +
           ((C37982 - C37983 + C37984 - C37985) * C239 +
            (C38438 - C38439 + C38440 - C38441) * C82592) *
               C82862) *
              C82938 * C82939 * C90 +
          (((C37967 - C37966 + C37969 - C37968) * C239 +
            (C38431 - C38430 + C38433 - C38432) * C82592) *
               C82937 +
           ((C37975 - C37974 + C37977 - C37976) * C239 +
            (C38435 - C38434 + C38437 - C38436) * C82592) *
               C82927 +
           ((C37983 - C37982 + C37985 - C37984) * C239 +
            (C38439 - C38438 + C38441 - C38440) * C82592) *
               C82911 +
           ((C37963 * C106 - C37887 * C173 + C37964 * C691 - C82639 * C757) *
                C239 +
            (C37963 * C501 - C37887 * C555 + C37964 * C1007 - C82639 * C1059) *
                C82592) *
               C82862) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C4296 +
            (C37887 * C551 - C37963 * C497 + C82639 * C1055 - C37964 * C1003) *
                C82932 +
            (C37887 * C1213 - C37963 * C1155 + C82639 * C3441 -
             C37964 * C3348) *
                C4297 +
            (C37887 * C1515 - C37963 * C1463 + C82639 * C3945 -
             C37964 * C3859) *
                C82918 +
            (C37887 * C4198 - C37963 * C4108 + C82639 * C5060 -
             C37964 * C4976) *
                C4298 +
            (C37887 * C4765 - C37963 * C4683 + C82639 * C5534 -
             C37964 * C5454) *
                C82896) *
               C39819 +
           ((C37966 - C37967 + C37968 - C37969) * C4296 +
            (C38430 - C38431 + C38432 - C38433) * C82932 +
            (C41884 - C41885 + C41886 - C41887) * C4297 +
            (C42534 - C42535 + C42536 - C42537) * C82918 +
            (C41892 - C41893 + C41894 - C41895) * C4298 +
            (C42538 - C42539 + C42540 - C42541) * C82896) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C37967 - C37966 + C37969 - C37968) * C4296 +
            (C38431 - C38430 + C38433 - C38432) * C82932 +
            (C41885 - C41884 + C41887 - C41886) * C4297 +
            (C42535 - C42534 + C42537 - C42536) * C82918 +
            (C41893 - C41892 + C41895 - C41894) * C4298 +
            (C42539 - C42538 + C42541 - C42540) * C82896) *
               C39819 +
           ((C37975 - C37974 + C37977 - C37976) * C4296 +
            (C38435 - C38434 + C38437 - C38436) * C82932 +
            (C37963 * C1153 - C37887 * C1215 + C37964 * C3346 -
             C82639 * C3445) *
                C4297 +
            (C37963 * C1465 - C37887 * C1517 + C37964 * C3861 -
             C82639 * C3949) *
                C82918 +
            (C37963 * C4110 - C37887 * C4200 + C37964 * C4974 -
             C82639 * C5062) *
                C4298 +
            (C37963 * C4685 - C37887 * C4767 + C37964 * C5456 -
             C82639 * C5536) *
                C82896) *
               C82533) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82941 +
            C3268 * C82934 + C3269 * C82921 + C16260 * C82871) *
               C39819 +
           (C40418 + C40419 + C40420 + C40421) * C82533) *
              C82938 * C82939 * C90 -
          (((C239 * C2735 - C607 * C2525 - C239 * C3085 + C82592 * C3252) *
                C82871 +
            C2447 * C82921 + C2446 * C82934 + C640 * C82941) *
               C82533 +
           (C40421 + C40420 + C40419 + C40418) * C39819) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C37887 +
            C3268 * C82639) *
               C82937 +
           (C38508 + C38509) * C82927 + (C38510 + C38511) * C82911 +
           (C38512 + C38513) * C82862) *
              C82938 * C82939 * C90 -
          (((C239 * C809 - C607 * C691 - C239 * C1007 + C82592 * C1102) *
                C82639 +
            C642 * C37887) *
               C82862 +
           (C38513 + C38512) * C82911 + (C38511 + C38510) * C82927 +
           (C38509 + C38508) * C82937) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4296 * C240 - C4851 * C102 - C4296 * C497 + C82932 * C608 +
             C4297 * C1265 - C4852 * C1155 - C4297 * C1463 + C82918 * C1566 +
             C4298 * C4299 - C4853 * C4108 - C4298 * C4683 + C82896 * C4854) *
                C37887 +
            (C18182 + C18183 + C18184) * C82639) *
               C39819 +
           ((C4895 + C4896 + C4897) * C37887 +
            (C42658 + C42659 + C42660) * C82639) *
               C82533) *
              C82938 * C82939 * C90 -
          (((C4298 * C5142 - C4853 * C4974 - C4298 * C5456 + C82896 * C5611 +
             C4297 * C3529 - C4852 * C3346 - C4297 * C3861 + C82918 * C4026 +
             C4296 * C807 - C4851 * C693 - C4296 * C1005 + C82932 * C1104) *
                C82639 +
            (C4900 + C4899 + C4898) * C37887) *
               C82533 +
           ((C42660 + C42659 + C42658) * C82639 +
            (C4897 + C4896 + C4895) * C37887) *
               C39819) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexx[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39825 * C108 - C39826 * C102 - C39825 * C109 + C39819 * C120 +
            C39827 * C110 - C39828 * C103 - C39827 * C111 + C82533 * C121) *
               C82592 * C82941 +
           (C40524 + C40525) * C82592 * C82934 +
           (C40526 + C40527) * C82592 * C82921 +
           (C40528 + C40529) * C82592 * C82871) *
              C82938 * C688 -
          ((C39827 * C15411 - C39828 * C15408 - C39827 * C15412 +
            C82533 * C15414 + C39825 * C15409 - C39826 * C15407 -
            C39825 * C15410 + C39819 * C15413) *
               C82592 * C82871 +
           (C40529 + C40528) * C82592 * C82921 +
           (C40527 + C40526) * C82592 * C82934 +
           (C40525 + C40524) * C82592 * C82941) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C37889 * C108 - C37890 * C102 - C37889 * C109 + C82937 * C120 +
            C37891 * C110 - C37892 * C103 - C37891 * C111 + C82927 * C121 +
            C37893 * C112 - C37894 * C104 - C37893 * C113 + C82911 * C122 +
            C37895 * C114 - C37896 * C105 - C37895 * C115 + C82862 * C123) *
               C82592 * C37887 +
           (C38604 + C38605 + C38606 + C38607) * C82592 * C82639) *
              C82938 * C688 -
          ((C37895 * C1663 - C37896 * C1656 - C37895 * C1664 + C82862 * C1668 +
            C37893 * C1661 - C37894 * C1655 - C37893 * C1662 + C82911 * C1667 +
            C37891 * C1659 - C37892 * C1654 - C37891 * C1660 + C82927 * C1666 +
            C37889 * C1657 - C37890 * C1653 - C37889 * C1658 + C82937 * C1665) *
               C82592 * C82639 +
           (C38607 + C38606 + C38605 + C38604) * C82592 * C37887) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39825 * C108 - C39826 * C102 - C39825 * C109 + C39819 * C120 +
             C39827 * C110 - C39828 * C103 - C39827 * C111 + C82533 * C121) *
                C82932 +
            (C39825 * C1164 - C39826 * C1155 - C39825 * C1165 + C39819 * C1170 +
             C39827 * C1162 - C39828 * C1154 - C39827 * C1163 +
             C82533 * C1169) *
                C82918 +
            (C39825 * C4112 - C39826 * C4108 - C39825 * C4113 + C39819 * C4120 +
             C39827 * C4114 - C39828 * C4109 - C39827 * C4115 +
             C82533 * C4121) *
                C82896) *
               C37887 +
           ((C40524 + C40525) * C82932 + (C42783 + C42784) * C82918 +
            (C42785 + C42786) * C82896) *
               C82639) *
              C82938 * C688 -
          (((C39827 * C16749 - C39828 * C16746 - C39827 * C16750 +
             C82533 * C16752 + C39825 * C16747 - C39826 * C16745 -
             C39825 * C16748 + C39819 * C16751) *
                C82896 +
            (C39827 * C3351 - C39828 * C3344 - C39827 * C3352 + C82533 * C3362 +
             C39825 * C3353 - C39826 * C3345 - C39825 * C3354 +
             C39819 * C3363) *
                C82918 +
            (C40527 + C40526) * C82932) *
               C82639 +
           ((C42786 + C42785) * C82896 + (C42784 + C42783) * C82918 +
            (C40525 + C40524) * C82932) *
               C37887) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82941 * C169 - C39895 * C102 + C82934 * C753 - C39896 * C695 +
            C82921 * C1746 - C39897 * C1653 + C82871 * C2653 - C39898 * C2527) *
               C39825 +
           (C82941 * C175 - C39895 * C109 + C82934 * C758 - C39896 * C705 +
            C82921 * C1750 - C39897 * C1658 + C82871 * C2656 - C39898 * C2533) *
               C39819 +
           (C39900 - C39901 + C39902 - C39903 + C39904 - C39905 + C39906 -
            C39907) *
               C39827 +
           (C39908 - C39909 + C39910 - C39911 + C39912 - C39913 + C39914 -
            C39915) *
               C82533) *
              C82592 * C82938 * C688 +
          ((C39895 * C695 - C82941 * C753 + C39896 * C1653 - C82934 * C1746 +
            C39897 * C2527 - C82921 * C2653 + C39898 * C15407 -
            C82871 * C15462) *
               C39825 +
           (C39895 * C705 - C82941 * C758 + C39896 * C1658 - C82934 * C1750 +
            C39897 * C2533 - C82921 * C2656 + C39898 * C15410 -
            C82871 * C15464) *
               C39819 +
           (C39895 * C694 - C82941 * C754 + C39896 * C1654 - C82934 * C1747 +
            C39897 * C2526 - C82921 * C2654 + C39898 * C15408 -
            C82871 * C15463) *
               C39827 +
           (C39895 * C703 - C82941 * C759 + C39896 * C1660 - C82934 * C1751 +
            C39897 * C2531 - C82921 * C2657 + C39898 * C15412 -
            C82871 * C15465) *
               C82533) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
               C37889 +
           (C37887 * C175 - C37963 * C109 + C82639 * C758 - C37964 * C705) *
               C82937 +
           (C37966 - C37967 + C37968 - C37969) * C37891 +
           (C37970 - C37971 + C37972 - C37973) * C82927 +
           (C37974 - C37975 + C37976 - C37977) * C37893 +
           (C37978 - C37979 + C37980 - C37981) * C82911 +
           (C37982 - C37983 + C37984 - C37985) * C37895 +
           (C37986 - C37987 + C37988 - C37989) * C82862) *
              C82592 * C82938 * C688 +
          ((C37963 * C695 - C37887 * C753 + C37964 * C1653 - C82639 * C1746) *
               C37889 +
           (C37963 * C705 - C37887 * C758 + C37964 * C1658 - C82639 * C1750) *
               C82937 +
           (C37963 * C694 - C37887 * C754 + C37964 * C1654 - C82639 * C1747) *
               C37891 +
           (C37963 * C703 - C37887 * C759 + C37964 * C1660 - C82639 * C1751) *
               C82927 +
           (C37963 * C693 - C37887 * C755 + C37964 * C1655 - C82639 * C1748) *
               C37893 +
           (C37963 * C701 - C37887 * C760 + C37964 * C1662 - C82639 * C1752) *
               C82911 +
           (C37963 * C692 - C37887 * C756 + C37964 * C1656 - C82639 * C1749) *
               C37895 +
           (C37963 * C699 - C37887 * C761 + C37964 * C1664 - C82639 * C1753) *
               C82862) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C39825 +
            (C37887 * C175 - C37963 * C109 + C82639 * C758 - C37964 * C705) *
                C39819 +
            (C37966 - C37967 + C37968 - C37969) * C39827 +
            (C37970 - C37971 + C37972 - C37973) * C82533) *
               C82932 +
           ((C37887 * C1213 - C37963 * C1155 + C82639 * C3441 -
             C37964 * C3348) *
                C39825 +
            (C37887 * C1218 - C37963 * C1165 + C82639 * C3447 -
             C37964 * C3360) *
                C39819 +
            (C41884 - C41885 + C41886 - C41887) * C39827 +
            (C41888 - C41889 + C41890 - C41891) * C82533) *
               C82918 +
           ((C37887 * C4198 - C37963 * C4108 + C82639 * C5060 -
             C37964 * C4976) *
                C39825 +
            (C37887 * C4202 - C37963 * C4113 + C82639 * C5063 -
             C37964 * C4982) *
                C39819 +
            (C41892 - C41893 + C41894 - C41895) * C39827 +
            (C41896 - C41897 + C41898 - C41899) * C82533) *
               C82896) *
              C82938 * C688 +
          (((C37963 * C695 - C37887 * C753 + C37964 * C1653 - C82639 * C1746) *
                C39825 +
            (C37963 * C705 - C37887 * C758 + C37964 * C1658 - C82639 * C1750) *
                C39819 +
            (C37963 * C694 - C37887 * C754 + C37964 * C1654 - C82639 * C1747) *
                C39827 +
            (C37963 * C703 - C37887 * C759 + C37964 * C1660 - C82639 * C1751) *
                C82533) *
               C82932 +
           ((C37963 * C3348 - C37887 * C3441 + C37964 * C3345 -
             C82639 * C3442) *
                C39825 +
            (C37963 * C3360 - C37887 * C3447 + C37964 * C3354 -
             C82639 * C3448) *
                C39819 +
            (C37963 * C3347 - C37887 * C3443 + C37964 * C3344 -
             C82639 * C3444) *
                C39827 +
            (C37963 * C3358 - C37887 * C3449 + C37964 * C3352 -
             C82639 * C3450) *
                C82533) *
               C82918 +
           ((C37963 * C4976 - C37887 * C5060 + C37964 * C16745 -
             C82639 * C16827) *
                C39825 +
            (C37963 * C4982 - C37887 * C5063 + C37964 * C16748 -
             C82639 * C16829) *
                C39819 +
            (C37963 * C4975 - C37887 * C5061 + C37964 * C16746 -
             C82639 * C16828) *
                C39827 +
            (C37963 * C4980 - C37887 * C5064 + C37964 * C16750 -
             C82639 * C16830) *
                C82533) *
               C82896) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C39825 +
            (C82592 * C246 - C239 * C109) * C39819 + (C253 - C254) * C39827 +
            (C255 - C256) * C82533) *
               C82941 +
           ((C2740 - C2741) * C39825 + (C2742 - C2743) * C39819 +
            (C1861 - C1862) * C39827 + (C1863 - C1864) * C82533) *
               C82934 +
           ((C2744 - C2745) * C39825 + (C2746 - C2747) * C39819 +
            (C1869 - C1870) * C39827 + (C1871 - C1872) * C82533) *
               C82921 +
           ((C15952 - C15953) * C39825 + (C15954 - C15955) * C39819 +
            (C19218 - C19219) * C39827 + (C19220 - C19221) * C82533) *
               C82871) *
              C82938 * C688 +
          (((C2741 - C2740) * C39825 + (C2743 - C2742) * C39819 +
            (C1862 - C1861) * C39827 + (C1864 - C1863) * C82533) *
               C82941 +
           ((C2745 - C2744) * C39825 + (C2747 - C2746) * C39819 +
            (C1870 - C1869) * C39827 + (C1872 - C1871) * C82533) *
               C82934 +
           ((C15953 - C15952) * C39825 + (C15955 - C15954) * C39819 +
            (C19219 - C19218) * C39827 + (C19221 - C19220) * C82533) *
               C82921 +
           ((C15957 - C15956) * C39825 + (C15959 - C15958) * C39819 +
            (C239 * C15408 - C82592 * C15509) * C39827 +
            (C239 * C15412 - C82592 * C15511) * C82533) *
               C82871) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C37889 +
            (C82592 * C246 - C239 * C109) * C82937 + (C253 - C254) * C37891 +
            (C255 - C256) * C82927 + (C257 - C258) * C37893 +
            (C259 - C260) * C82911 + (C261 - C262) * C37895 +
            (C263 - C264) * C82862) *
               C37887 +
           ((C2740 - C2741) * C37889 + (C2742 - C2743) * C82937 +
            (C1861 - C1862) * C37891 + (C1863 - C1864) * C82927 +
            (C1865 - C1866) * C37893 + (C1867 - C1868) * C82911 +
            (C6677 - C6678) * C37895 + (C6679 - C6680) * C82862) *
               C82639) *
              C82938 * C688 +
          (((C2741 - C2740) * C37889 + (C2743 - C2742) * C82937 +
            (C1862 - C1861) * C37891 + (C1864 - C1863) * C82927 +
            (C1866 - C1865) * C37893 + (C1868 - C1867) * C82911 +
            (C6678 - C6677) * C37895 + (C6680 - C6679) * C82862) *
               C37887 +
           ((C2745 - C2744) * C37889 + (C2747 - C2746) * C82937 +
            (C1870 - C1869) * C37891 + (C1872 - C1871) * C82927 +
            (C1874 - C1873) * C37893 + (C1876 - C1875) * C82911 +
            (C239 * C1656 - C82592 * C1855) * C37895 +
            (C239 * C1664 - C82592 * C1859) * C82862) *
               C82639) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
             C82896 * C4299 - C4298 * C4108) *
                C39825 +
            (C82932 * C246 - C4296 * C109 + C82918 * C1270 - C4297 * C1165 +
             C82896 * C4303 - C4298 * C4113) *
                C39819 +
            (C4308 - C4309 + C4310 - C4311 + C4312 - C4313) * C39827 +
            (C4314 - C4315 + C4316 - C4317 + C4318 - C4319) * C82533) *
               C37887 +
           ((C17634 - C17635 + C17636 - C17637 + C17638 - C17639) * C39825 +
            (C17640 - C17641 + C17642 - C17643 + C17644 - C17645) * C39819 +
            (C41998 - C41999 + C42000 - C42001 + C42002 - C42003) * C39827 +
            (C42004 - C42005 + C42006 - C42007 + C42008 - C42009) * C82533) *
               C82639) *
              C82938 * C688 +
          (((C17635 - C17634 + C17637 - C17636 + C17639 - C17638) * C39825 +
            (C17641 - C17640 + C17643 - C17642 + C17645 - C17644) * C39819 +
            (C41999 - C41998 + C42001 - C42000 + C42003 - C42002) * C39827 +
            (C42005 - C42004 + C42007 - C42006 + C42009 - C42008) * C82533) *
               C37887 +
           ((C17647 - C17646 + C17649 - C17648 + C17651 - C17650) * C39825 +
            (C17653 - C17652 + C17655 - C17654 + C17657 - C17656) * C39819 +
            (C4296 * C1654 - C82932 * C1853 + C4297 * C3344 - C82918 * C3531 +
             C4298 * C16746 - C82896 * C16906) *
                C39827 +
            (C4296 * C1660 - C82932 * C1857 + C4297 * C3352 - C82918 * C3537 +
             C4298 * C16750 - C82896 * C16908) *
                C82533) *
               C82639) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
               C39895 +
           (C39819 * C316 - C39825 * C310 + C82533 * C317 - C39827 * C311) *
               C82941 +
           (C40728 - C40729 + C40730 - C40731) * C39896 +
           (C40732 - C40733 + C40734 - C40735) * C82934 +
           (C40736 - C40737 + C40738 - C40739) * C39897 +
           (C40740 - C40741 + C40742 - C40743) * C82921 +
           (C40744 - C40745 + C40746 - C40747) * C39898 +
           (C40748 - C40749 + C40750 - C40751) * C82871) *
              C82592 * C82938 * C688 +
          ((C40729 - C40728 + C40731 - C40730) * C39895 +
           (C40733 - C40732 + C40735 - C40734) * C82941 +
           (C40737 - C40736 + C40739 - C40738) * C39896 +
           (C40741 - C40740 + C40743 - C40742) * C82934 +
           (C40745 - C40744 + C40747 - C40746) * C39897 +
           (C40749 - C40748 + C40751 - C40750) * C82921 +
           (C39825 * C15407 - C39819 * C15409 + C39827 * C15408 -
            C82533 * C15411) *
               C39898 +
           (C39825 * C15554 - C39819 * C15556 + C39827 * C15555 -
            C82533 * C15557) *
               C82871) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82937 * C108 - C37889 * C102 + C82927 * C110 - C37891 * C103 +
            C82911 * C112 - C37893 * C104 + C82862 * C114 - C37895 * C105) *
               C37963 +
           (C82937 * C316 - C37889 * C310 + C82927 * C317 - C37891 * C311 +
            C82911 * C318 - C37893 * C312 + C82862 * C319 - C37895 * C313) *
               C37887 +
           (C38806 - C38807 + C38808 - C38809 + C38810 - C38811 + C38812 -
            C38813) *
               C37964 +
           (C38814 - C38815 + C38816 - C38817 + C38818 - C38819 + C38820 -
            C38821) *
               C82639) *
              C82592 * C82938 * C688 +
          ((C38807 - C38806 + C38809 - C38808 + C38811 - C38810 + C38813 -
            C38812) *
               C37963 +
           (C38815 - C38814 + C38817 - C38816 + C38819 - C38818 + C38821 -
            C38820) *
               C37887 +
           (C37889 * C1653 - C82937 * C1657 + C37891 * C1654 - C82927 * C1659 +
            C37893 * C1655 - C82911 * C1661 + C37895 * C1656 - C82862 * C1663) *
               C37964 +
           (C37889 * C1950 - C82937 * C1954 + C37891 * C1951 - C82927 * C1955 +
            C37893 * C1952 - C82911 * C1956 + C37895 * C1953 - C82862 * C1957) *
               C82639) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C37963 +
            (C39819 * C316 - C39825 * C310 + C82533 * C317 - C39827 * C311) *
                C37887 +
            (C40728 - C40729 + C40730 - C40731) * C37964 +
            (C40732 - C40733 + C40734 - C40735) * C82639) *
               C82932 +
           ((C39819 * C1164 - C39825 * C1155 + C82533 * C1162 -
             C39827 * C1154) *
                C37963 +
            (C39819 * C1322 - C39825 * C1317 + C82533 * C1323 -
             C39827 * C1318) *
                C37887 +
            (C43081 - C43082 + C43083 - C43084) * C37964 +
            (C43085 - C43086 + C43087 - C43088) * C82639) *
               C82918 +
           ((C39819 * C4112 - C39825 * C4108 + C82533 * C4114 -
             C39827 * C4109) *
                C37963 +
            (C39819 * C4409 - C39825 * C4405 + C82533 * C4410 -
             C39827 * C4406) *
                C37887 +
            (C43089 - C43090 + C43091 - C43092) * C37964 +
            (C43093 - C43094 + C43095 - C43096) * C82639) *
               C82896) *
              C82938 * C688 +
          (((C40729 - C40728 + C40731 - C40730) * C37963 +
            (C40733 - C40732 + C40735 - C40734) * C37887 +
            (C40737 - C40736 + C40739 - C40738) * C37964 +
            (C40741 - C40740 + C40743 - C40742) * C82639) *
               C82932 +
           ((C43082 - C43081 + C43084 - C43083) * C37963 +
            (C43086 - C43085 + C43088 - C43087) * C37887 +
            (C39825 * C3345 - C39819 * C3353 + C39827 * C3344 -
             C82533 * C3351) *
                C37964 +
            (C39825 * C3616 - C39819 * C3622 + C39827 * C3617 -
             C82533 * C3623) *
                C82639) *
               C82918 +
           ((C43090 - C43089 + C43092 - C43091) * C37963 +
            (C43094 - C43093 + C43096 - C43095) * C37887 +
            (C39825 * C16745 - C39819 * C16747 + C39827 * C16746 -
             C82533 * C16749) *
                C37964 +
            (C39825 * C16983 - C39819 * C16985 + C39827 * C16984 -
             C82533 * C16986) *
                C82639) *
               C82896) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39895 * C169 - C40113 * C102 - C39895 * C310 + C82941 * C365 +
            C39896 * C753 - C40114 * C695 - C39896 * C857 + C82934 * C913 +
            C39897 * C1746 - C40115 * C1653 - C39897 * C1950 + C82921 * C2035 +
            C39898 * C2653 - C40116 * C2527 - C39898 * C2821 + C82871 * C2927) *
               C39819 +
           (C40142 + C40143 + C40144 + C40145) * C82533) *
              C82592 * C82938 * C688 -
          ((C39898 * C15463 - C40116 * C15408 - C39898 * C15555 +
            C82871 * C15606 + C39897 * C2654 - C40115 * C2526 - C39897 * C2822 +
            C82921 * C2926 + C39896 * C1747 - C40114 * C1654 - C39896 * C1951 +
            C82934 * C2036 + C39895 * C754 - C40113 * C694 - C39895 * C858 +
            C82941 * C912) *
               C82533 +
           (C39898 * C15462 - C40116 * C15407 - C39898 * C15554 +
            C82871 * C15605 + C39897 * C2653 - C40115 * C2527 - C39897 * C2821 +
            C82921 * C2927 + C39896 * C1746 - C40114 * C1653 - C39896 * C1950 +
            C82934 * C2035 + C39895 * C753 - C40113 * C695 - C39895 * C857 +
            C82941 * C913) *
               C39819) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C37963 * C169 - C38187 * C102 - C37963 * C310 + C37887 * C365 +
            C37964 * C753 - C38188 * C695 - C37964 * C857 + C82639 * C913) *
               C82937 +
           (C38226 + C38227) * C82927 + (C38228 + C38229) * C82911 +
           (C38230 + C38231) * C82862) *
              C82592 * C82938 * C688 -
          ((C37964 * C1749 - C38188 * C1656 - C37964 * C1953 + C82639 * C2038 +
            C37963 * C756 - C38187 * C692 - C37963 * C860 + C37887 * C910) *
               C82862 +
           (C37964 * C1748 - C38188 * C1655 - C37964 * C1952 + C82639 * C2037 +
            C37963 * C755 - C38187 * C693 - C37963 * C859 + C37887 * C911) *
               C82911 +
           (C37964 * C1747 - C38188 * C1654 - C37964 * C1951 + C82639 * C2036 +
            C37963 * C754 - C38187 * C694 - C37963 * C858 + C37887 * C912) *
               C82927 +
           (C37964 * C1746 - C38188 * C1653 - C37964 * C1950 + C82639 * C2035 +
            C37963 * C753 - C38187 * C695 - C37963 * C857 + C37887 * C913) *
               C82937) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C37963 * C169 - C38187 * C102 - C37963 * C310 + C37887 * C365 +
             C37964 * C753 - C38188 * C695 - C37964 * C857 + C82639 * C913) *
                C39819 +
            (C38226 + C38227) * C82533) *
               C82932 +
           ((C37963 * C1213 - C38187 * C1155 - C37963 * C1317 + C37887 * C1373 +
             C37964 * C3441 - C38188 * C3348 - C37964 * C3613 +
             C82639 * C3704) *
                C39819 +
            (C42230 + C42231) * C82533) *
               C82918 +
           ((C37963 * C4198 - C38187 * C4108 - C37963 * C4405 + C37887 * C4487 +
             C37964 * C5060 - C38188 * C4976 - C37964 * C5220 +
             C82639 * C5302) *
                C39819 +
            (C42232 + C42233) * C82533) *
               C82896) *
              C82938 * C688 -
          (((C37964 * C16828 - C38188 * C16746 - C37964 * C16984 +
             C82639 * C17062 + C37963 * C5061 - C38187 * C4975 -
             C37963 * C5221 + C37887 * C5301) *
                C82533 +
            (C37964 * C16827 - C38188 * C16745 - C37964 * C16983 +
             C82639 * C17061 + C37963 * C5060 - C38187 * C4976 -
             C37963 * C5220 + C37887 * C5302) *
                C39819) *
               C82896 +
           ((C37964 * C3444 - C38188 * C3344 - C37964 * C3617 + C82639 * C3701 +
             C37963 * C3443 - C38187 * C3347 - C37963 * C3614 +
             C37887 * C3702) *
                C82533 +
            (C37964 * C3442 - C38188 * C3345 - C37964 * C3616 + C82639 * C3703 +
             C37963 * C3441 - C38187 * C3348 - C37963 * C3613 +
             C37887 * C3704) *
                C39819) *
               C82918 +
           ((C37964 * C1747 - C38188 * C1654 - C37964 * C1951 + C82639 * C2036 +
             C37963 * C754 - C38187 * C694 - C37963 * C858 + C37887 * C912) *
                C82533 +
            (C37964 * C1746 - C38188 * C1653 - C37964 * C1950 + C82639 * C2035 +
             C37963 * C753 - C38187 * C695 - C37963 * C857 + C37887 * C913) *
                C39819) *
               C82932) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C39895 +
            (C82592 * C441 - C239 * C310) * C82941 + (C2740 - C2741) * C39896 +
            (C3006 - C3007) * C82934 + (C2744 - C2745) * C39897 +
            (C3008 - C3009) * C82921 + (C15952 - C15953) * C39898 +
            (C16106 - C16107) * C82871) *
               C39819 +
           ((C253 - C254) * C39895 + (C448 - C449) * C82941 +
            (C1861 - C1862) * C39896 + (C2160 - C2161) * C82934 +
            (C1869 - C1870) * C39897 + (C2162 - C2163) * C82921 +
            (C19218 - C19219) * C39898 + (C19452 - C19453) * C82871) *
               C82533) *
              C82938 * C688 +
          (((C2741 - C2740) * C39895 + (C3007 - C3006) * C82941 +
            (C2745 - C2744) * C39896 + (C3009 - C3008) * C82934 +
            (C15953 - C15952) * C39897 + (C16107 - C16106) * C82921 +
            (C15957 - C15956) * C39898 + (C16109 - C16108) * C82871) *
               C39819 +
           ((C1862 - C1861) * C39895 + (C2161 - C2160) * C82941 +
            (C1870 - C1869) * C39896 + (C2163 - C2162) * C82934 +
            (C19219 - C19218) * C39897 + (C19453 - C19452) * C82921 +
            (C239 * C15408 - C82592 * C15509) * C39898 +
            (C239 * C15555 - C82592 * C15650) * C82871) *
               C82533) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C37963 +
            (C82592 * C441 - C239 * C310) * C37887 + (C2740 - C2741) * C37964 +
            (C3006 - C3007) * C82639) *
               C82937 +
           ((C253 - C254) * C37963 + (C448 - C449) * C37887 +
            (C1861 - C1862) * C37964 + (C2160 - C2161) * C82639) *
               C82927 +
           ((C257 - C258) * C37963 + (C450 - C451) * C37887 +
            (C1865 - C1866) * C37964 + (C2164 - C2165) * C82639) *
               C82911 +
           ((C261 - C262) * C37963 + (C452 - C453) * C37887 +
            (C6677 - C6678) * C37964 + (C6923 - C6924) * C82639) *
               C82862) *
              C82938 * C688 +
          (((C2741 - C2740) * C37963 + (C3007 - C3006) * C37887 +
            (C2745 - C2744) * C37964 + (C3009 - C3008) * C82639) *
               C82937 +
           ((C1862 - C1861) * C37963 + (C2161 - C2160) * C37887 +
            (C1870 - C1869) * C37964 + (C2163 - C2162) * C82639) *
               C82927 +
           ((C1866 - C1865) * C37963 + (C2165 - C2164) * C37887 +
            (C1874 - C1873) * C37964 + (C2167 - C2166) * C82639) *
               C82911 +
           ((C6678 - C6677) * C37963 + (C6924 - C6923) * C37887 +
            (C239 * C1656 - C82592 * C1855) * C37964 +
            (C239 * C1953 - C82592 * C2158) * C82639) *
               C82862) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
             C82896 * C4299 - C4298 * C4108) *
                C37963 +
            (C82932 * C441 - C4296 * C310 + C82918 * C1416 - C4297 * C1317 +
             C82896 * C4593 - C4298 * C4405) *
                C37887 +
            (C17634 - C17635 + C17636 - C17637 + C17638 - C17639) * C37964 +
            (C17900 - C17901 + C17902 - C17903 + C17904 - C17905) * C82639) *
               C39819 +
           ((C4308 - C4309 + C4310 - C4311 + C4312 - C4313) * C37963 +
            (C4598 - C4599 + C4600 - C4601 + C4602 - C4603) * C37887 +
            (C41998 - C41999 + C42000 - C42001 + C42002 - C42003) * C37964 +
            (C42332 - C42333 + C42334 - C42335 + C42336 - C42337) * C82639) *
               C82533) *
              C82938 * C688 +
          (((C17635 - C17634 + C17637 - C17636 + C17639 - C17638) * C37963 +
            (C17901 - C17900 + C17903 - C17902 + C17905 - C17904) * C37887 +
            (C17647 - C17646 + C17649 - C17648 + C17651 - C17650) * C37964 +
            (C17907 - C17906 + C17909 - C17908 + C17911 - C17910) * C82639) *
               C39819 +
           ((C41999 - C41998 + C42001 - C42000 + C42003 - C42002) * C37963 +
            (C42333 - C42332 + C42335 - C42334 + C42337 - C42336) * C37887 +
            (C4296 * C1654 - C82932 * C1853 + C4297 * C3344 - C82918 * C3531 +
             C4298 * C16746 - C82896 * C16906) *
                C37964 +
            (C4296 * C1951 - C82932 * C2156 + C4297 * C3617 - C82918 * C3782 +
             C4298 * C16984 - C82896 * C17138) *
                C82639) *
               C82533) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezx[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C239 +
            (C39819 * C503 - C39825 * C497 + C82533 * C504 - C39827 * C498) *
                C82592) *
               C82941 +
           ((C40728 - C40729 + C40730 - C40731) * C239 +
            (C40950 - C40951 + C40952 - C40953) * C82592) *
               C82934 +
           ((C40736 - C40737 + C40738 - C40739) * C239 +
            (C40954 - C40955 + C40956 - C40957) * C82592) *
               C82921 +
           ((C40744 - C40745 + C40746 - C40747) * C239 +
            (C40958 - C40959 + C40960 - C40961) * C82592) *
               C82871) *
              C82938 * C688 +
          (((C40729 - C40728 + C40731 - C40730) * C239 +
            (C40951 - C40950 + C40953 - C40952) * C82592) *
               C82941 +
           ((C40737 - C40736 + C40739 - C40738) * C239 +
            (C40955 - C40954 + C40957 - C40956) * C82592) *
               C82934 +
           ((C40745 - C40744 + C40747 - C40746) * C239 +
            (C40959 - C40958 + C40961 - C40960) * C82592) *
               C82921 +
           ((C39825 * C15407 - C39819 * C15409 + C39827 * C15408 -
             C82533 * C15411) *
                C239 +
            (C39825 * C15693 - C39819 * C15695 + C39827 * C15694 -
             C82533 * C15696) *
                C82592) *
               C82871) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82937 * C108 - C37889 * C102 + C82927 * C110 - C37891 * C103 +
             C82911 * C112 - C37893 * C104 + C82862 * C114 - C37895 * C105) *
                C239 +
            (C82937 * C503 - C37889 * C497 + C82927 * C504 - C37891 * C498 +
             C82911 * C505 - C37893 * C499 + C82862 * C506 - C37895 * C500) *
                C82592) *
               C37887 +
           ((C38806 - C38807 + C38808 - C38809 + C38810 - C38811 + C38812 -
             C38813) *
                C239 +
            (C39020 - C39021 + C39022 - C39023 + C39024 - C39025 + C39026 -
             C39027) *
                C82592) *
               C82639) *
              C82938 * C688 +
          (((C38807 - C38806 + C38809 - C38808 + C38811 - C38810 + C38813 -
             C38812) *
                C239 +
            (C39021 - C39020 + C39023 - C39022 + C39025 - C39024 + C39027 -
             C39026) *
                C82592) *
               C37887 +
           ((C37889 * C1653 - C82937 * C1657 + C37891 * C1654 - C82927 * C1659 +
             C37893 * C1655 - C82911 * C1661 + C37895 * C1656 -
             C82862 * C1663) *
                C239 +
            (C37889 * C2241 - C82937 * C2245 + C37891 * C2242 - C82927 * C2246 +
             C37893 * C2243 - C82911 * C2247 + C37895 * C2244 -
             C82862 * C2248) *
                C82592) *
               C82639) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C4296 +
            (C39819 * C503 - C39825 * C497 + C82533 * C504 - C39827 * C498) *
                C82932 +
            (C39819 * C1164 - C39825 * C1155 + C82533 * C1162 -
             C39827 * C1154) *
                C4297 +
            (C39819 * C1468 - C39825 * C1463 + C82533 * C1469 -
             C39827 * C1464) *
                C82918 +
            (C39819 * C4112 - C39825 * C4108 + C82533 * C4114 -
             C39827 * C4109) *
                C4298 +
            (C39819 * C4687 - C39825 * C4683 + C82533 * C4688 -
             C39827 * C4684) *
                C82896) *
               C37887 +
           ((C40728 - C40729 + C40730 - C40731) * C4296 +
            (C40950 - C40951 + C40952 - C40953) * C82932 +
            (C43081 - C43082 + C43083 - C43084) * C4297 +
            (C43391 - C43392 + C43393 - C43394) * C82918 +
            (C43089 - C43090 + C43091 - C43092) * C4298 +
            (C43395 - C43396 + C43397 - C43398) * C82896) *
               C82639) *
              C82938 * C688 +
          (((C40729 - C40728 + C40731 - C40730) * C4296 +
            (C40951 - C40950 + C40953 - C40952) * C82932 +
            (C43082 - C43081 + C43084 - C43083) * C4297 +
            (C43392 - C43391 + C43394 - C43393) * C82918 +
            (C43090 - C43089 + C43092 - C43091) * C4298 +
            (C43396 - C43395 + C43398 - C43397) * C82896) *
               C37887 +
           ((C40737 - C40736 + C40739 - C40738) * C4296 +
            (C40955 - C40954 + C40957 - C40956) * C82932 +
            (C39825 * C3345 - C39819 * C3353 + C39827 * C3344 -
             C82533 * C3351) *
                C4297 +
            (C39825 * C3862 - C39819 * C3868 + C39827 * C3863 -
             C82533 * C3869) *
                C82918 +
            (C39825 * C16745 - C39819 * C16747 + C39827 * C16746 -
             C82533 * C16749) *
                C4298 +
            (C39825 * C17213 - C39819 * C17215 + C39827 * C17214 -
             C82533 * C17216) *
                C82896) *
               C82639) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82941 * C169 - C39895 * C102 + C82934 * C753 - C39896 * C695 +
             C82921 * C1746 - C39897 * C1653 + C82871 * C2653 -
             C39898 * C2527) *
                C239 +
            (C82941 * C551 - C39895 * C497 + C82934 * C1055 - C39896 * C1003 +
             C82921 * C2323 - C39897 * C2241 + C82871 * C3175 -
             C39898 * C3083) *
                C82592) *
               C39819 +
           ((C39900 - C39901 + C39902 - C39903 + C39904 - C39905 + C39906 -
             C39907) *
                C239 +
            (C40344 - C40345 + C40346 - C40347 + C40348 - C40349 + C40350 -
             C40351) *
                C82592) *
               C82533) *
              C82938 * C688 +
          (((C39895 * C695 - C82941 * C753 + C39896 * C1653 - C82934 * C1746 +
             C39897 * C2527 - C82921 * C2653 + C39898 * C15407 -
             C82871 * C15462) *
                C239 +
            (C39895 * C1003 - C82941 * C1055 + C39896 * C2241 - C82934 * C2323 +
             C39897 * C3083 - C82921 * C3175 + C39898 * C15693 -
             C82871 * C15739) *
                C82592) *
               C39819 +
           ((C39895 * C694 - C82941 * C754 + C39896 * C1654 - C82934 * C1747 +
             C39897 * C2526 - C82921 * C2654 + C39898 * C15408 -
             C82871 * C15463) *
                C239 +
            (C39895 * C1004 - C82941 * C1056 + C39896 * C2242 - C82934 * C2324 +
             C39897 * C3084 - C82921 * C3176 + C39898 * C15694 -
             C82871 * C15740) *
                C82592) *
               C82533) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C239 +
            (C37887 * C551 - C37963 * C497 + C82639 * C1055 - C37964 * C1003) *
                C82592) *
               C82937 +
           ((C37966 - C37967 + C37968 - C37969) * C239 +
            (C38430 - C38431 + C38432 - C38433) * C82592) *
               C82927 +
           ((C37974 - C37975 + C37976 - C37977) * C239 +
            (C38434 - C38435 + C38436 - C38437) * C82592) *
               C82911 +
           ((C37982 - C37983 + C37984 - C37985) * C239 +
            (C38438 - C38439 + C38440 - C38441) * C82592) *
               C82862) *
              C82938 * C688 +
          (((C37963 * C695 - C37887 * C753 + C37964 * C1653 - C82639 * C1746) *
                C239 +
            (C37963 * C1003 - C37887 * C1055 + C37964 * C2241 -
             C82639 * C2323) *
                C82592) *
               C82937 +
           ((C37963 * C694 - C37887 * C754 + C37964 * C1654 - C82639 * C1747) *
                C239 +
            (C37963 * C1004 - C37887 * C1056 + C37964 * C2242 -
             C82639 * C2324) *
                C82592) *
               C82927 +
           ((C37963 * C693 - C37887 * C755 + C37964 * C1655 - C82639 * C1748) *
                C239 +
            (C37963 * C1005 - C37887 * C1057 + C37964 * C2243 -
             C82639 * C2325) *
                C82592) *
               C82911 +
           ((C37963 * C692 - C37887 * C756 + C37964 * C1656 - C82639 * C1749) *
                C239 +
            (C37963 * C1006 - C37887 * C1058 + C37964 * C2244 -
             C82639 * C2326) *
                C82592) *
               C82862) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C4296 +
            (C37887 * C551 - C37963 * C497 + C82639 * C1055 - C37964 * C1003) *
                C82932 +
            (C37887 * C1213 - C37963 * C1155 + C82639 * C3441 -
             C37964 * C3348) *
                C4297 +
            (C37887 * C1515 - C37963 * C1463 + C82639 * C3945 -
             C37964 * C3859) *
                C82918 +
            (C37887 * C4198 - C37963 * C4108 + C82639 * C5060 -
             C37964 * C4976) *
                C4298 +
            (C37887 * C4765 - C37963 * C4683 + C82639 * C5534 -
             C37964 * C5454) *
                C82896) *
               C39819 +
           ((C37966 - C37967 + C37968 - C37969) * C4296 +
            (C38430 - C38431 + C38432 - C38433) * C82932 +
            (C41884 - C41885 + C41886 - C41887) * C4297 +
            (C42534 - C42535 + C42536 - C42537) * C82918 +
            (C41892 - C41893 + C41894 - C41895) * C4298 +
            (C42538 - C42539 + C42540 - C42541) * C82896) *
               C82533) *
              C82938 * C688 +
          (((C37963 * C695 - C37887 * C753 + C37964 * C1653 - C82639 * C1746) *
                C4296 +
            (C37963 * C1003 - C37887 * C1055 + C37964 * C2241 -
             C82639 * C2323) *
                C82932 +
            (C37963 * C3348 - C37887 * C3441 + C37964 * C3345 -
             C82639 * C3442) *
                C4297 +
            (C37963 * C3859 - C37887 * C3945 + C37964 * C3862 -
             C82639 * C3946) *
                C82918 +
            (C37963 * C4976 - C37887 * C5060 + C37964 * C16745 -
             C82639 * C16827) *
                C4298 +
            (C37963 * C5454 - C37887 * C5534 + C37964 * C17213 -
             C82639 * C17291) *
                C82896) *
               C39819 +
           ((C37963 * C694 - C37887 * C754 + C37964 * C1654 - C82639 * C1747) *
                C4296 +
            (C37963 * C1004 - C37887 * C1056 + C37964 * C2242 -
             C82639 * C2324) *
                C82932 +
            (C37963 * C3347 - C37887 * C3443 + C37964 * C3344 -
             C82639 * C3444) *
                C4297 +
            (C37963 * C3860 - C37887 * C3947 + C37964 * C3863 -
             C82639 * C3948) *
                C82918 +
            (C37963 * C4975 - C37887 * C5061 + C37964 * C16746 -
             C82639 * C16828) *
                C4298 +
            (C37963 * C5455 - C37887 * C5535 + C37964 * C17214 -
             C82639 * C17292) *
                C82896) *
               C82533) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82941 +
            C3268 * C82934 + C3269 * C82921 + C16260 * C82871) *
               C39819 +
           (C40418 + C40419 + C40420 + C40421) * C82533) *
              C82938 * C688 -
          (((C239 * C15509 - C607 * C15408 - C239 * C15694 + C82592 * C15784) *
                C82871 +
            C19669 * C82921 + C2445 * C82934 + C2444 * C82941) *
               C82533 +
           (C16261 * C82871 + C16260 * C82921 + C3269 * C82934 +
            C3268 * C82941) *
               C39819) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C37887 +
            C3268 * C82639) *
               C82937 +
           (C38508 + C38509) * C82927 + (C38510 + C38511) * C82911 +
           (C38512 + C38513) * C82862) *
              C82938 * C688 -
          (((C239 * C1855 - C607 * C1656 - C239 * C2244 + C82592 * C2416) *
                C82639 +
            C7146 * C37887) *
               C82862 +
           (C2447 * C82639 + C2446 * C37887) * C82911 +
           (C2445 * C82639 + C2444 * C37887) * C82927 +
           (C3269 * C82639 + C3268 * C37887) * C82937) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4296 * C240 - C4851 * C102 - C4296 * C497 + C82932 * C608 +
             C4297 * C1265 - C4852 * C1155 - C4297 * C1463 + C82918 * C1566 +
             C4298 * C4299 - C4853 * C4108 - C4298 * C4683 + C82896 * C4854) *
                C37887 +
            (C18182 + C18183 + C18184) * C82639) *
               C39819 +
           ((C4895 + C4896 + C4897) * C37887 +
            (C42658 + C42659 + C42660) * C82639) *
               C82533) *
              C82938 * C688 -
          (((C4298 * C16906 - C4853 * C16746 - C4298 * C17214 +
             C82896 * C17368 + C4297 * C3531 - C4852 * C3344 - C4297 * C3863 +
             C82918 * C4027 + C4296 * C1853 - C4851 * C1654 - C4296 * C2242 +
             C82932 * C2414) *
                C82639 +
            (C42660 + C42659 + C42658) * C37887) *
               C82533 +
           ((C18187 + C18186 + C18185) * C82639 +
            (C18184 + C18183 + C18182) * C37887) *
               C39819) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39825 * C108 - C39826 * C102 - C39825 * C109 + C39819 * C120 +
            C39827 * C110 - C39828 * C103 - C39827 * C111 + C82533 * C121) *
               C82592 * C82941 +
           (C40524 + C40525) * C82592 * C82934 +
           (C40526 + C40527) * C82592 * C82921 +
           (C40528 + C40529) * C82592 * C82871) *
              C1149 -
          ((C39827 * C20409 - C39828 * C20408 - C39827 * C20410 +
            C82533 * C20411 + C39825 * C16307 - C39826 * C16304 -
            C39825 * C16308 + C39819 * C16310) *
               C82592 * C82871 +
           (C39827 * C3351 - C39828 * C3344 - C39827 * C3352 + C82533 * C3362 +
            C39825 * C3353 - C39826 * C3345 - C39825 * C3354 + C39819 * C3363) *
               C82592 * C82921 +
           (C39827 * C3357 - C39828 * C3347 - C39827 * C3358 + C82533 * C3365 +
            C39825 * C3359 - C39826 * C3348 - C39825 * C3360 + C39819 * C3366) *
               C82592 * C82934 +
           (C39827 * C1162 - C39828 * C1154 - C39827 * C1163 + C82533 * C1169 +
            C39825 * C1164 - C39826 * C1155 - C39825 * C1165 + C39819 * C1170) *
               C82592 * C82941) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C37889 * C108 - C37890 * C102 - C37889 * C109 + C82937 * C120 +
            C37891 * C110 - C37892 * C103 - C37891 * C111 + C82927 * C121 +
            C37893 * C112 - C37894 * C104 - C37893 * C113 + C82911 * C122 +
            C37895 * C114 - C37896 * C105 - C37895 * C115 + C82862 * C123) *
               C82592 * C37887 +
           (C38604 + C38605 + C38606 + C38607) * C82592 * C82639) *
              C1149 -
          ((C37895 * C7860 - C37896 * C7859 - C37895 * C7861 + C82862 * C7862 +
            C37893 * C3355 - C37894 * C3346 - C37893 * C3356 + C82911 * C3364 +
            C37891 * C3357 - C37892 * C3347 - C37891 * C3358 + C82927 * C3365 +
            C37889 * C3359 - C37890 * C3348 - C37889 * C3360 + C82937 * C3366) *
               C82592 * C82639 +
           (C37895 * C1158 - C37896 * C1152 - C37895 * C1159 + C82862 * C1167 +
            C37893 * C1160 - C37894 * C1153 - C37893 * C1161 + C82911 * C1168 +
            C37891 * C1162 - C37892 * C1154 - C37891 * C1163 + C82927 * C1169 +
            C37889 * C1164 - C37890 * C1155 - C37889 * C1165 + C82937 * C1170) *
               C82592 * C37887) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39825 * C108 - C39826 * C102 - C39825 * C109 + C39819 * C120 +
             C39827 * C110 - C39828 * C103 - C39827 * C111 + C82533 * C121) *
                C82932 +
            (C43717 + C43718) * C82918 + (C43719 + C43720) * C82896) *
               C37887 +
           ((C40524 + C40525) * C82932 + (C42783 + C42784) * C82918 +
            (C42785 + C42786) * C82896) *
               C82639) *
              C1149 -
          (((C39827 * C33198 - C39828 * C33197 - C39827 * C33199 +
             C82533 * C33200 + C39825 * C18265 - C39826 * C18262 -
             C39825 * C18266 + C39819 * C18268) *
                C82896 +
            (C42786 + C42785) * C82918 + (C42784 + C42783) * C82932) *
               C82639 +
           ((C39827 * C5693 - C39828 * C5689 - C39827 * C5694 + C82533 * C5698 +
             C39825 * C5695 - C39826 * C5690 - C39825 * C5696 +
             C39819 * C5699) *
                C82896 +
            (C43720 + C43719) * C82918 + (C43718 + C43717) * C82932) *
               C37887) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82941 * C169 - C39895 * C102 + C82934 * C753 - C39896 * C695 +
            C82921 * C1746 - C39897 * C1653 + C82871 * C2653 - C39898 * C2527) *
               C39825 +
           (C82941 * C175 - C39895 * C109 + C82934 * C758 - C39896 * C705 +
            C82921 * C1750 - C39897 * C1658 + C82871 * C2656 - C39898 * C2533) *
               C39819 +
           (C39900 - C39901 + C39902 - C39903 + C39904 - C39905 + C39906 -
            C39907) *
               C39827 +
           (C39908 - C39909 + C39910 - C39911 + C39912 - C39913 + C39914 -
            C39915) *
               C82533) *
              C82592 * C1149 +
          ((C39895 * C1155 - C82941 * C1213 + C39896 * C3348 - C82934 * C3441 +
            C39897 * C3345 - C82921 * C3442 + C39898 * C16304 -
            C82871 * C16353) *
               C39825 +
           (C39895 * C1165 - C82941 * C1218 + C39896 * C3360 - C82934 * C3447 +
            C39897 * C3354 - C82921 * C3448 + C39898 * C16308 -
            C82871 * C16355) *
               C39819 +
           (C39895 * C1154 - C82941 * C1214 + C39896 * C3347 - C82934 * C3443 +
            C39897 * C3344 - C82921 * C3444 + C39898 * C20408 -
            C82871 * C20478) *
               C39827 +
           (C39895 * C1163 - C82941 * C1219 + C39896 * C3358 - C82934 * C3449 +
            C39897 * C3352 - C82921 * C3450 + C39898 * C20410 -
            C82871 * C20479) *
               C82533) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
               C37889 +
           (C37887 * C175 - C37963 * C109 + C82639 * C758 - C37964 * C705) *
               C82937 +
           (C37966 - C37967 + C37968 - C37969) * C37891 +
           (C37970 - C37971 + C37972 - C37973) * C82927 +
           (C37974 - C37975 + C37976 - C37977) * C37893 +
           (C37978 - C37979 + C37980 - C37981) * C82911 +
           (C37982 - C37983 + C37984 - C37985) * C37895 +
           (C37986 - C37987 + C37988 - C37989) * C82862) *
              C82592 * C1149 +
          ((C37963 * C1155 - C37887 * C1213 + C37964 * C3348 - C82639 * C3441) *
               C37889 +
           (C37963 * C1165 - C37887 * C1218 + C37964 * C3360 - C82639 * C3447) *
               C82937 +
           (C37963 * C1154 - C37887 * C1214 + C37964 * C3347 - C82639 * C3443) *
               C37891 +
           (C37963 * C1163 - C37887 * C1219 + C37964 * C3358 - C82639 * C3449) *
               C82927 +
           (C37963 * C1153 - C37887 * C1215 + C37964 * C3346 - C82639 * C3445) *
               C37893 +
           (C37963 * C1161 - C37887 * C1220 + C37964 * C3356 - C82639 * C3451) *
               C82911 +
           (C37963 * C1152 - C37887 * C1216 + C37964 * C7859 - C82639 * C7929) *
               C37895 +
           (C37963 * C1159 - C37887 * C1221 + C37964 * C7861 - C82639 * C7930) *
               C82862) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C39825 +
            (C37887 * C175 - C37963 * C109 + C82639 * C758 - C37964 * C705) *
                C39819 +
            (C37966 - C37967 + C37968 - C37969) * C39827 +
            (C37970 - C37971 + C37972 - C37973) * C82533) *
               C82932 +
           ((C43819 - C43820 + C43821 - C43822) * C39825 +
            (C43823 - C43824 + C43825 - C43826) * C39819 +
            (C41884 - C41885 + C41886 - C41887) * C39827 +
            (C41888 - C41889 + C41890 - C41891) * C82533) *
               C82918 +
           ((C43827 - C43828 + C43829 - C43830) * C39825 +
            (C43831 - C43832 + C43833 - C43834) * C39819 +
            (C41892 - C41893 + C41894 - C41895) * C39827 +
            (C41896 - C41897 + C41898 - C41899) * C82533) *
               C82896) *
              C1149 +
          (((C43820 - C43819 + C43822 - C43821) * C39825 +
            (C43824 - C43823 + C43826 - C43825) * C39819 +
            (C41885 - C41884 + C41887 - C41886) * C39827 +
            (C41889 - C41888 + C41891 - C41890) * C82533) *
               C82932 +
           ((C43828 - C43827 + C43830 - C43829) * C39825 +
            (C43832 - C43831 + C43834 - C43833) * C39819 +
            (C41893 - C41892 + C41895 - C41894) * C39827 +
            (C41897 - C41896 + C41899 - C41898) * C82533) *
               C82918 +
           ((C37963 * C5690 - C37887 * C5816 + C37964 * C18262 -
             C82639 * C18357) *
                C39825 +
            (C37963 * C5696 - C37887 * C5819 + C37964 * C18266 -
             C82639 * C18359) *
                C39819 +
            (C37963 * C5689 - C37887 * C5817 + C37964 * C33197 -
             C82639 * C33313) *
                C39827 +
            (C37963 * C5694 - C37887 * C5820 + C37964 * C33199 -
             C82639 * C33314) *
                C82533) *
               C82896) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C39825 +
            (C82592 * C246 - C239 * C109) * C39819 + (C253 - C254) * C39827 +
            (C255 - C256) * C82533) *
               C82941 +
           ((C2740 - C2741) * C39825 + (C2742 - C2743) * C39819 +
            (C1861 - C1862) * C39827 + (C1863 - C1864) * C82533) *
               C82934 +
           ((C2744 - C2745) * C39825 + (C2746 - C2747) * C39819 +
            (C1869 - C1870) * C39827 + (C1871 - C1872) * C82533) *
               C82921 +
           ((C15952 - C15953) * C39825 + (C15954 - C15955) * C39819 +
            (C19218 - C19219) * C39827 + (C19220 - C19221) * C82533) *
               C82871) *
              C1149 +
          (((C239 * C1155 - C82592 * C1265) * C39825 +
            (C239 * C1165 - C82592 * C1270) * C39819 +
            (C239 * C1154 - C82592 * C1266) * C39827 +
            (C239 * C1163 - C82592 * C1271) * C82533) *
               C82941 +
           ((C239 * C3348 - C82592 * C3527) * C39825 +
            (C239 * C3360 - C82592 * C3533) * C39819 +
            (C239 * C3347 - C82592 * C3528) * C39827 +
            (C239 * C3358 - C82592 * C3534) * C82533) *
               C82934 +
           ((C239 * C3345 - C82592 * C3530) * C39825 +
            (C239 * C3354 - C82592 * C3536) * C39819 +
            (C239 * C3344 - C82592 * C3531) * C39827 +
            (C239 * C3352 - C82592 * C3537) * C82533) *
               C82921 +
           ((C239 * C16304 - C82592 * C16399) * C39825 +
            (C239 * C16308 - C82592 * C16401) * C39819 +
            (C239 * C20408 - C82592 * C20546) * C39827 +
            (C239 * C20410 - C82592 * C20547) * C82533) *
               C82871) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C37889 +
            (C82592 * C246 - C239 * C109) * C82937 + (C253 - C254) * C37891 +
            (C255 - C256) * C82927 + (C257 - C258) * C37893 +
            (C259 - C260) * C82911 + (C261 - C262) * C37895 +
            (C263 - C264) * C82862) *
               C37887 +
           ((C2740 - C2741) * C37889 + (C2742 - C2743) * C82937 +
            (C1861 - C1862) * C37891 + (C1863 - C1864) * C82927 +
            (C1865 - C1866) * C37893 + (C1867 - C1868) * C82911 +
            (C6677 - C6678) * C37895 + (C6679 - C6680) * C82862) *
               C82639) *
              C1149 +
          (((C239 * C1155 - C82592 * C1265) * C37889 +
            (C239 * C1165 - C82592 * C1270) * C82937 +
            (C239 * C1154 - C82592 * C1266) * C37891 +
            (C239 * C1163 - C82592 * C1271) * C82927 +
            (C239 * C1153 - C82592 * C1267) * C37893 +
            (C239 * C1161 - C82592 * C1272) * C82911 +
            (C239 * C1152 - C82592 * C1268) * C37895 +
            (C239 * C1159 - C82592 * C1273) * C82862) *
               C37887 +
           ((C239 * C3348 - C82592 * C3527) * C37889 +
            (C239 * C3360 - C82592 * C3533) * C82937 +
            (C239 * C3347 - C82592 * C3528) * C37891 +
            (C239 * C3358 - C82592 * C3534) * C82927 +
            (C239 * C3346 - C82592 * C3529) * C37893 +
            (C239 * C3356 - C82592 * C3535) * C82911 +
            (C239 * C7859 - C82592 * C7997) * C37895 +
            (C239 * C7861 - C82592 * C7998) * C82862) *
               C82639) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
             C82896 * C4299 - C4298 * C4108) *
                C39825 +
            (C82932 * C246 - C4296 * C109 + C82918 * C1270 - C4297 * C1165 +
             C82896 * C4303 - C4298 * C4113) *
                C39819 +
            (C4308 - C4309 + C4310 - C4311 + C4312 - C4313) * C39827 +
            (C4314 - C4315 + C4316 - C4317 + C4318 - C4319) * C82533) *
               C37887 +
           ((C17634 - C17635 + C17636 - C17637 + C17638 - C17639) * C39825 +
            (C17640 - C17641 + C17642 - C17643 + C17644 - C17645) * C39819 +
            (C41998 - C41999 + C42000 - C42001 + C42002 - C42003) * C39827 +
            (C42004 - C42005 + C42006 - C42007 + C42008 - C42009) * C82533) *
               C82639) *
              C1149 +
          (((C4296 * C1155 - C82932 * C1265 + C4297 * C4108 - C82918 * C4299 +
             C4298 * C5690 - C82896 * C5904) *
                C39825 +
            (C4296 * C1165 - C82932 * C1270 + C4297 * C4113 - C82918 * C4303 +
             C4298 * C5696 - C82896 * C5907) *
                C39819 +
            (C4296 * C1154 - C82932 * C1266 + C4297 * C4109 - C82918 * C4300 +
             C4298 * C5689 - C82896 * C5905) *
                C39827 +
            (C4296 * C1163 - C82932 * C1271 + C4297 * C4115 - C82918 * C4304 +
             C4298 * C5694 - C82896 * C5908) *
                C82533) *
               C37887 +
           ((C4296 * C3348 - C82932 * C3527 + C4297 * C4976 - C82918 * C5140 +
             C4298 * C18262 - C82896 * C18459) *
                C39825 +
            (C4296 * C3360 - C82932 * C3533 + C4297 * C4982 - C82918 * C5143 +
             C4298 * C18266 - C82896 * C18461) *
                C39819 +
            (C4296 * C3347 - C82932 * C3528 + C4297 * C4975 - C82918 * C5141 +
             C4298 * C33197 - C82896 * C33421) *
                C39827 +
            (C4296 * C3358 - C82932 * C3534 + C4297 * C4980 - C82918 * C5144 +
             C4298 * C33199 - C82896 * C33422) *
                C82533) *
               C82639) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
               C39895 +
           (C39819 * C316 - C39825 * C310 + C82533 * C317 - C39827 * C311) *
               C82941 +
           (C40728 - C40729 + C40730 - C40731) * C39896 +
           (C40732 - C40733 + C40734 - C40735) * C82934 +
           (C40736 - C40737 + C40738 - C40739) * C39897 +
           (C40740 - C40741 + C40742 - C40743) * C82921 +
           (C40744 - C40745 + C40746 - C40747) * C39898 +
           (C40748 - C40749 + C40750 - C40751) * C82871) *
              C82592 * C1149 +
          ((C39825 * C1155 - C39819 * C1164 + C39827 * C1154 - C82533 * C1162) *
               C39895 +
           (C39825 * C1317 - C39819 * C1322 + C39827 * C1318 - C82533 * C1323) *
               C82941 +
           (C39825 * C3348 - C39819 * C3359 + C39827 * C3347 - C82533 * C3357) *
               C39896 +
           (C39825 * C3613 - C39819 * C3619 + C39827 * C3614 - C82533 * C3620) *
               C82934 +
           (C39825 * C3345 - C39819 * C3353 + C39827 * C3344 - C82533 * C3351) *
               C39897 +
           (C39825 * C3616 - C39819 * C3622 + C39827 * C3617 - C82533 * C3623) *
               C82921 +
           (C39825 * C16304 - C39819 * C16307 + C39827 * C20408 -
            C82533 * C20409) *
               C39898 +
           (C39825 * C16445 - C39819 * C16447 + C39827 * C20614 -
            C82533 * C20615) *
               C82871) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82937 * C108 - C37889 * C102 + C82927 * C110 - C37891 * C103 +
            C82911 * C112 - C37893 * C104 + C82862 * C114 - C37895 * C105) *
               C37963 +
           (C82937 * C316 - C37889 * C310 + C82927 * C317 - C37891 * C311 +
            C82911 * C318 - C37893 * C312 + C82862 * C319 - C37895 * C313) *
               C37887 +
           (C38806 - C38807 + C38808 - C38809 + C38810 - C38811 + C38812 -
            C38813) *
               C37964 +
           (C38814 - C38815 + C38816 - C38817 + C38818 - C38819 + C38820 -
            C38821) *
               C82639) *
              C82592 * C1149 +
          ((C37889 * C1155 - C82937 * C1164 + C37891 * C1154 - C82927 * C1162 +
            C37893 * C1153 - C82911 * C1160 + C37895 * C1152 - C82862 * C1158) *
               C37963 +
           (C37889 * C1317 - C82937 * C1322 + C37891 * C1318 - C82927 * C1323 +
            C37893 * C1319 - C82911 * C1324 + C37895 * C1320 - C82862 * C1325) *
               C37887 +
           (C37889 * C3348 - C82937 * C3359 + C37891 * C3347 - C82927 * C3357 +
            C37893 * C3346 - C82911 * C3355 + C37895 * C7859 - C82862 * C7860) *
               C37964 +
           (C37889 * C3613 - C82937 * C3619 + C37891 * C3614 - C82927 * C3620 +
            C37893 * C3615 - C82911 * C3621 + C37895 * C8065 - C82862 * C8066) *
               C82639) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C37963 +
            (C39819 * C316 - C39825 * C310 + C82533 * C317 - C39827 * C311) *
                C37887 +
            (C40728 - C40729 + C40730 - C40731) * C37964 +
            (C40732 - C40733 + C40734 - C40735) * C82639) *
               C82932 +
           ((C44031 - C44032 + C44033 - C44034) * C37963 +
            (C44035 - C44036 + C44037 - C44038) * C37887 +
            (C43081 - C43082 + C43083 - C43084) * C37964 +
            (C43085 - C43086 + C43087 - C43088) * C82639) *
               C82918 +
           ((C44039 - C44040 + C44041 - C44042) * C37963 +
            (C44043 - C44044 + C44045 - C44046) * C37887 +
            (C43089 - C43090 + C43091 - C43092) * C37964 +
            (C43093 - C43094 + C43095 - C43096) * C82639) *
               C82896) *
              C1149 +
          (((C44032 - C44031 + C44034 - C44033) * C37963 +
            (C44036 - C44035 + C44038 - C44037) * C37887 +
            (C43082 - C43081 + C43084 - C43083) * C37964 +
            (C43086 - C43085 + C43088 - C43087) * C82639) *
               C82932 +
           ((C44040 - C44039 + C44042 - C44041) * C37963 +
            (C44044 - C44043 + C44046 - C44045) * C37887 +
            (C43090 - C43089 + C43092 - C43091) * C37964 +
            (C43094 - C43093 + C43096 - C43095) * C82639) *
               C82918 +
           ((C39825 * C5690 - C39819 * C5695 + C39827 * C5689 -
             C82533 * C5693) *
                C37963 +
            (C39825 * C5984 - C39819 * C5987 + C39827 * C5985 -
             C82533 * C5988) *
                C37887 +
            (C39825 * C18262 - C39819 * C18265 + C39827 * C33197 -
             C82533 * C33198) *
                C37964 +
            (C39825 * C18537 - C39819 * C18539 + C39827 * C33521 -
             C82533 * C33522) *
                C82639) *
               C82896) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39895 * C169 - C40113 * C102 - C39895 * C310 + C82941 * C365 +
            C39896 * C753 - C40114 * C695 - C39896 * C857 + C82934 * C913 +
            C39897 * C1746 - C40115 * C1653 - C39897 * C1950 + C82921 * C2035 +
            C39898 * C2653 - C40116 * C2527 - C39898 * C2821 + C82871 * C2927) *
               C39819 +
           (C40142 + C40143 + C40144 + C40145) * C82533) *
              C82592 * C1149 -
          ((C39898 * C20478 - C40116 * C20408 - C39898 * C20614 +
            C82871 * C20682 + C39897 * C3444 - C40115 * C3344 - C39897 * C3617 +
            C82921 * C3701 + C39896 * C3443 - C40114 * C3347 - C39896 * C3614 +
            C82934 * C3702 + C39895 * C1214 - C40113 * C1154 - C39895 * C1318 +
            C82941 * C1372) *
               C82533 +
           (C39898 * C16353 - C40116 * C16304 - C39898 * C16445 +
            C82871 * C16492 + C39897 * C3442 - C40115 * C3345 - C39897 * C3616 +
            C82921 * C3703 + C39896 * C3441 - C40114 * C3348 - C39896 * C3613 +
            C82934 * C3704 + C39895 * C1213 - C40113 * C1155 - C39895 * C1317 +
            C82941 * C1373) *
               C39819) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C37963 * C169 - C38187 * C102 - C37963 * C310 + C37887 * C365 +
            C37964 * C753 - C38188 * C695 - C37964 * C857 + C82639 * C913) *
               C82937 +
           (C38226 + C38227) * C82927 + (C38228 + C38229) * C82911 +
           (C38230 + C38231) * C82862) *
              C82592 * C1149 -
          ((C37964 * C7929 - C38188 * C7859 - C37964 * C8065 + C82639 * C8133 +
            C37963 * C1216 - C38187 * C1152 - C37963 * C1320 + C37887 * C1370) *
               C82862 +
           (C37964 * C3445 - C38188 * C3346 - C37964 * C3615 + C82639 * C3700 +
            C37963 * C1215 - C38187 * C1153 - C37963 * C1319 + C37887 * C1371) *
               C82911 +
           (C37964 * C3443 - C38188 * C3347 - C37964 * C3614 + C82639 * C3702 +
            C37963 * C1214 - C38187 * C1154 - C37963 * C1318 + C37887 * C1372) *
               C82927 +
           (C37964 * C3441 - C38188 * C3348 - C37964 * C3613 + C82639 * C3704 +
            C37963 * C1213 - C38187 * C1155 - C37963 * C1317 + C37887 * C1373) *
               C82937) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C37963 * C169 - C38187 * C102 - C37963 * C310 + C37887 * C365 +
             C37964 * C753 - C38188 * C695 - C37964 * C857 + C82639 * C913) *
                C39819 +
            (C38226 + C38227) * C82533) *
               C82932 +
           ((C44169 + C44170) * C39819 + (C42230 + C42231) * C82533) * C82918 +
           ((C44171 + C44172) * C39819 + (C42232 + C42233) * C82533) * C82896) *
              C1149 -
          (((C37964 * C33313 - C38188 * C33197 - C37964 * C33521 +
             C82639 * C33629 + C37963 * C5817 - C38187 * C5689 -
             C37963 * C5985 + C37887 * C6089) *
                C82533 +
            (C37964 * C18357 - C38188 * C18262 - C37964 * C18537 +
             C82639 * C18624 + C37963 * C5816 - C38187 * C5690 -
             C37963 * C5984 + C37887 * C6090) *
                C39819) *
               C82896 +
           ((C42233 + C42232) * C82533 + (C44172 + C44171) * C39819) * C82918 +
           ((C42231 + C42230) * C82533 + (C44170 + C44169) * C39819) * C82932) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C39895 +
            (C82592 * C441 - C239 * C310) * C82941 + (C2740 - C2741) * C39896 +
            (C3006 - C3007) * C82934 + (C2744 - C2745) * C39897 +
            (C3008 - C3009) * C82921 + (C15952 - C15953) * C39898 +
            (C16106 - C16107) * C82871) *
               C39819 +
           ((C253 - C254) * C39895 + (C448 - C449) * C82941 +
            (C1861 - C1862) * C39896 + (C2160 - C2161) * C82934 +
            (C1869 - C1870) * C39897 + (C2162 - C2163) * C82921 +
            (C19218 - C19219) * C39898 + (C19452 - C19453) * C82871) *
               C82533) *
              C1149 +
          (((C239 * C1155 - C82592 * C1265) * C39895 +
            (C239 * C1317 - C82592 * C1416) * C82941 +
            (C239 * C3348 - C82592 * C3527) * C39896 +
            (C239 * C3613 - C82592 * C3779) * C82934 +
            (C239 * C3345 - C82592 * C3530) * C39897 +
            (C239 * C3616 - C82592 * C3780) * C82921 +
            (C239 * C16304 - C82592 * C16399) * C39898 +
            (C239 * C16445 - C82592 * C16535) * C82871) *
               C39819 +
           ((C239 * C1154 - C82592 * C1266) * C39895 +
            (C239 * C1318 - C82592 * C1417) * C82941 +
            (C239 * C3347 - C82592 * C3528) * C39896 +
            (C239 * C3614 - C82592 * C3781) * C82934 +
            (C239 * C3344 - C82592 * C3531) * C39897 +
            (C239 * C3617 - C82592 * C3782) * C82921 +
            (C239 * C20408 - C82592 * C20546) * C39898 +
            (C239 * C20614 - C82592 * C20749) * C82871) *
               C82533) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C37963 +
            (C82592 * C441 - C239 * C310) * C37887 + (C2740 - C2741) * C37964 +
            (C3006 - C3007) * C82639) *
               C82937 +
           ((C253 - C254) * C37963 + (C448 - C449) * C37887 +
            (C1861 - C1862) * C37964 + (C2160 - C2161) * C82639) *
               C82927 +
           ((C257 - C258) * C37963 + (C450 - C451) * C37887 +
            (C1865 - C1866) * C37964 + (C2164 - C2165) * C82639) *
               C82911 +
           ((C261 - C262) * C37963 + (C452 - C453) * C37887 +
            (C6677 - C6678) * C37964 + (C6923 - C6924) * C82639) *
               C82862) *
              C1149 +
          (((C239 * C1155 - C82592 * C1265) * C37963 +
            (C239 * C1317 - C82592 * C1416) * C37887 +
            (C239 * C3348 - C82592 * C3527) * C37964 +
            (C239 * C3613 - C82592 * C3779) * C82639) *
               C82937 +
           ((C239 * C1154 - C82592 * C1266) * C37963 +
            (C239 * C1318 - C82592 * C1417) * C37887 +
            (C239 * C3347 - C82592 * C3528) * C37964 +
            (C239 * C3614 - C82592 * C3781) * C82639) *
               C82927 +
           ((C239 * C1153 - C82592 * C1267) * C37963 +
            (C239 * C1319 - C82592 * C1418) * C37887 +
            (C239 * C3346 - C82592 * C3529) * C37964 +
            (C239 * C3615 - C82592 * C3783) * C82639) *
               C82911 +
           ((C239 * C1152 - C82592 * C1268) * C37963 +
            (C239 * C1320 - C82592 * C1419) * C37887 +
            (C239 * C7859 - C82592 * C7997) * C37964 +
            (C239 * C8065 - C82592 * C8200) * C82639) *
               C82862) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
             C82896 * C4299 - C4298 * C4108) *
                C37963 +
            (C82932 * C441 - C4296 * C310 + C82918 * C1416 - C4297 * C1317 +
             C82896 * C4593 - C4298 * C4405) *
                C37887 +
            (C17634 - C17635 + C17636 - C17637 + C17638 - C17639) * C37964 +
            (C17900 - C17901 + C17902 - C17903 + C17904 - C17905) * C82639) *
               C39819 +
           ((C4308 - C4309 + C4310 - C4311 + C4312 - C4313) * C37963 +
            (C4598 - C4599 + C4600 - C4601 + C4602 - C4603) * C37887 +
            (C41998 - C41999 + C42000 - C42001 + C42002 - C42003) * C37964 +
            (C42332 - C42333 + C42334 - C42335 + C42336 - C42337) * C82639) *
               C82533) *
              C1149 +
          (((C4296 * C1155 - C82932 * C1265 + C4297 * C4108 - C82918 * C4299 +
             C4298 * C5690 - C82896 * C5904) *
                C37963 +
            (C4296 * C1317 - C82932 * C1416 + C4297 * C4405 - C82918 * C4593 +
             C4298 * C5984 - C82896 * C6185) *
                C37887 +
            (C4296 * C3348 - C82932 * C3527 + C4297 * C4976 - C82918 * C5140 +
             C4298 * C18262 - C82896 * C18459) *
                C37964 +
            (C4296 * C3613 - C82932 * C3779 + C4297 * C5220 - C82918 * C5377 +
             C4298 * C18537 - C82896 * C18741) *
                C82639) *
               C39819 +
           ((C4296 * C1154 - C82932 * C1266 + C4297 * C4109 - C82918 * C4300 +
             C4298 * C5689 - C82896 * C5905) *
                C37963 +
            (C4296 * C1318 - C82932 * C1417 + C4297 * C4406 - C82918 * C4594 +
             C4298 * C5985 - C82896 * C6186) *
                C37887 +
            (C4296 * C3347 - C82932 * C3528 + C4297 * C4975 - C82918 * C5141 +
             C4298 * C33197 - C82896 * C33421) *
                C37964 +
            (C4296 * C3614 - C82932 * C3781 + C4297 * C5221 - C82918 * C5378 +
             C4298 * C33521 - C82896 * C33742) *
                C82639) *
               C82533) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezx[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C239 +
            (C39819 * C503 - C39825 * C497 + C82533 * C504 - C39827 * C498) *
                C82592) *
               C82941 +
           ((C40728 - C40729 + C40730 - C40731) * C239 +
            (C40950 - C40951 + C40952 - C40953) * C82592) *
               C82934 +
           ((C40736 - C40737 + C40738 - C40739) * C239 +
            (C40954 - C40955 + C40956 - C40957) * C82592) *
               C82921 +
           ((C40744 - C40745 + C40746 - C40747) * C239 +
            (C40958 - C40959 + C40960 - C40961) * C82592) *
               C82871) *
              C1149 +
          (((C39825 * C1155 - C39819 * C1164 + C39827 * C1154 -
             C82533 * C1162) *
                C239 +
            (C39825 * C1463 - C39819 * C1468 + C39827 * C1464 -
             C82533 * C1469) *
                C82592) *
               C82941 +
           ((C39825 * C3348 - C39819 * C3359 + C39827 * C3347 -
             C82533 * C3357) *
                C239 +
            (C39825 * C3859 - C39819 * C3865 + C39827 * C3860 -
             C82533 * C3866) *
                C82592) *
               C82934 +
           ((C39825 * C3345 - C39819 * C3353 + C39827 * C3344 -
             C82533 * C3351) *
                C239 +
            (C39825 * C3862 - C39819 * C3868 + C39827 * C3863 -
             C82533 * C3869) *
                C82592) *
               C82921 +
           ((C39825 * C16304 - C39819 * C16307 + C39827 * C20408 -
             C82533 * C20409) *
                C239 +
            (C39825 * C16579 - C39819 * C16581 + C39827 * C20816 -
             C82533 * C20817) *
                C82592) *
               C82871) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82937 * C108 - C37889 * C102 + C82927 * C110 - C37891 * C103 +
             C82911 * C112 - C37893 * C104 + C82862 * C114 - C37895 * C105) *
                C239 +
            (C82937 * C503 - C37889 * C497 + C82927 * C504 - C37891 * C498 +
             C82911 * C505 - C37893 * C499 + C82862 * C506 - C37895 * C500) *
                C82592) *
               C37887 +
           ((C38806 - C38807 + C38808 - C38809 + C38810 - C38811 + C38812 -
             C38813) *
                C239 +
            (C39020 - C39021 + C39022 - C39023 + C39024 - C39025 + C39026 -
             C39027) *
                C82592) *
               C82639) *
              C1149 +
          (((C37889 * C1155 - C82937 * C1164 + C37891 * C1154 - C82927 * C1162 +
             C37893 * C1153 - C82911 * C1160 + C37895 * C1152 -
             C82862 * C1158) *
                C239 +
            (C37889 * C1463 - C82937 * C1468 + C37891 * C1464 - C82927 * C1469 +
             C37893 * C1465 - C82911 * C1470 + C37895 * C1466 -
             C82862 * C1471) *
                C82592) *
               C37887 +
           ((C37889 * C3348 - C82937 * C3359 + C37891 * C3347 - C82927 * C3357 +
             C37893 * C3346 - C82911 * C3355 + C37895 * C7859 -
             C82862 * C7860) *
                C239 +
            (C37889 * C3859 - C82937 * C3865 + C37891 * C3860 - C82927 * C3866 +
             C37893 * C3861 - C82911 * C3867 + C37895 * C8267 -
             C82862 * C8268) *
                C82592) *
               C82639) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C4296 +
            (C39819 * C503 - C39825 * C497 + C82533 * C504 - C39827 * C498) *
                C82932 +
            (C44031 - C44032 + C44033 - C44034) * C4297 +
            (C44369 - C44370 + C44371 - C44372) * C82918 +
            (C44039 - C44040 + C44041 - C44042) * C4298 +
            (C44373 - C44374 + C44375 - C44376) * C82896) *
               C37887 +
           ((C40728 - C40729 + C40730 - C40731) * C4296 +
            (C40950 - C40951 + C40952 - C40953) * C82932 +
            (C43081 - C43082 + C43083 - C43084) * C4297 +
            (C43391 - C43392 + C43393 - C43394) * C82918 +
            (C43089 - C43090 + C43091 - C43092) * C4298 +
            (C43395 - C43396 + C43397 - C43398) * C82896) *
               C82639) *
              C1149 +
          (((C44032 - C44031 + C44034 - C44033) * C4296 +
            (C44370 - C44369 + C44372 - C44371) * C82932 +
            (C44040 - C44039 + C44042 - C44041) * C4297 +
            (C44374 - C44373 + C44376 - C44375) * C82918 +
            (C39825 * C5690 - C39819 * C5695 + C39827 * C5689 -
             C82533 * C5693) *
                C4298 +
            (C39825 * C6262 - C39819 * C6265 + C39827 * C6263 -
             C82533 * C6266) *
                C82896) *
               C37887 +
           ((C43082 - C43081 + C43084 - C43083) * C4296 +
            (C43392 - C43391 + C43394 - C43393) * C82932 +
            (C43090 - C43089 + C43092 - C43091) * C4297 +
            (C43396 - C43395 + C43398 - C43397) * C82918 +
            (C39825 * C18262 - C39819 * C18265 + C39827 * C33197 -
             C82533 * C33198) *
                C4298 +
            (C39825 * C18817 - C39819 * C18819 + C39827 * C33841 -
             C82533 * C33842) *
                C82896) *
               C82639) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82941 * C169 - C39895 * C102 + C82934 * C753 - C39896 * C695 +
             C82921 * C1746 - C39897 * C1653 + C82871 * C2653 -
             C39898 * C2527) *
                C239 +
            (C82941 * C551 - C39895 * C497 + C82934 * C1055 - C39896 * C1003 +
             C82921 * C2323 - C39897 * C2241 + C82871 * C3175 -
             C39898 * C3083) *
                C82592) *
               C39819 +
           ((C39900 - C39901 + C39902 - C39903 + C39904 - C39905 + C39906 -
             C39907) *
                C239 +
            (C40344 - C40345 + C40346 - C40347 + C40348 - C40349 + C40350 -
             C40351) *
                C82592) *
               C82533) *
              C1149 +
          (((C39895 * C1155 - C82941 * C1213 + C39896 * C3348 - C82934 * C3441 +
             C39897 * C3345 - C82921 * C3442 + C39898 * C16304 -
             C82871 * C16353) *
                C239 +
            (C39895 * C1463 - C82941 * C1515 + C39896 * C3859 - C82934 * C3945 +
             C39897 * C3862 - C82921 * C3946 + C39898 * C16579 -
             C82871 * C16625) *
                C82592) *
               C39819 +
           ((C39895 * C1154 - C82941 * C1214 + C39896 * C3347 - C82934 * C3443 +
             C39897 * C3344 - C82921 * C3444 + C39898 * C20408 -
             C82871 * C20478) *
                C239 +
            (C39895 * C1464 - C82941 * C1516 + C39896 * C3860 - C82934 * C3947 +
             C39897 * C3863 - C82921 * C3948 + C39898 * C20816 -
             C82871 * C20884) *
                C82592) *
               C82533) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C239 +
            (C37887 * C551 - C37963 * C497 + C82639 * C1055 - C37964 * C1003) *
                C82592) *
               C82937 +
           ((C37966 - C37967 + C37968 - C37969) * C239 +
            (C38430 - C38431 + C38432 - C38433) * C82592) *
               C82927 +
           ((C37974 - C37975 + C37976 - C37977) * C239 +
            (C38434 - C38435 + C38436 - C38437) * C82592) *
               C82911 +
           ((C37982 - C37983 + C37984 - C37985) * C239 +
            (C38438 - C38439 + C38440 - C38441) * C82592) *
               C82862) *
              C1149 +
          (((C37963 * C1155 - C37887 * C1213 + C37964 * C3348 -
             C82639 * C3441) *
                C239 +
            (C37963 * C1463 - C37887 * C1515 + C37964 * C3859 -
             C82639 * C3945) *
                C82592) *
               C82937 +
           ((C37963 * C1154 - C37887 * C1214 + C37964 * C3347 -
             C82639 * C3443) *
                C239 +
            (C37963 * C1464 - C37887 * C1516 + C37964 * C3860 -
             C82639 * C3947) *
                C82592) *
               C82927 +
           ((C37963 * C1153 - C37887 * C1215 + C37964 * C3346 -
             C82639 * C3445) *
                C239 +
            (C37963 * C1465 - C37887 * C1517 + C37964 * C3861 -
             C82639 * C3949) *
                C82592) *
               C82911 +
           ((C37963 * C1152 - C37887 * C1216 + C37964 * C7859 -
             C82639 * C7929) *
                C239 +
            (C37963 * C1466 - C37887 * C1518 + C37964 * C8267 -
             C82639 * C8335) *
                C82592) *
               C82862) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C4296 +
            (C37887 * C551 - C37963 * C497 + C82639 * C1055 - C37964 * C1003) *
                C82932 +
            (C43819 - C43820 + C43821 - C43822) * C4297 +
            (C44475 - C44476 + C44477 - C44478) * C82918 +
            (C43827 - C43828 + C43829 - C43830) * C4298 +
            (C44479 - C44480 + C44481 - C44482) * C82896) *
               C39819 +
           ((C37966 - C37967 + C37968 - C37969) * C4296 +
            (C38430 - C38431 + C38432 - C38433) * C82932 +
            (C41884 - C41885 + C41886 - C41887) * C4297 +
            (C42534 - C42535 + C42536 - C42537) * C82918 +
            (C41892 - C41893 + C41894 - C41895) * C4298 +
            (C42538 - C42539 + C42540 - C42541) * C82896) *
               C82533) *
              C1149 +
          (((C43820 - C43819 + C43822 - C43821) * C4296 +
            (C44476 - C44475 + C44478 - C44477) * C82932 +
            (C43828 - C43827 + C43830 - C43829) * C4297 +
            (C44480 - C44479 + C44482 - C44481) * C82918 +
            (C37963 * C5690 - C37887 * C5816 + C37964 * C18262 -
             C82639 * C18357) *
                C4298 +
            (C37963 * C6262 - C37887 * C6354 + C37964 * C18817 -
             C82639 * C18899) *
                C82896) *
               C39819 +
           ((C41885 - C41884 + C41887 - C41886) * C4296 +
            (C42535 - C42534 + C42537 - C42536) * C82932 +
            (C41893 - C41892 + C41895 - C41894) * C4297 +
            (C42539 - C42538 + C42541 - C42540) * C82918 +
            (C37963 * C5689 - C37887 * C5817 + C37964 * C33197 -
             C82639 * C33313) *
                C4298 +
            (C37963 * C6263 - C37887 * C6355 + C37964 * C33841 -
             C82639 * C33945) *
                C82896) *
               C82533) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82941 +
            C3268 * C82934 + C3269 * C82921 + C16260 * C82871) *
               C39819 +
           (C40418 + C40419 + C40420 + C40421) * C82533) *
              C1149 -
          (((C239 * C20546 - C607 * C20408 - C239 * C20816 + C82592 * C20951) *
                C82871 +
            (C239 * C3531 - C607 * C3344 - C239 * C3863 + C82592 * C4027) *
                C82921 +
            (C239 * C3528 - C607 * C3347 - C239 * C3860 + C82592 * C4028) *
                C82934 +
            (C239 * C1266 - C607 * C1154 - C239 * C1464 + C82592 * C1565) *
                C82941) *
               C82533 +
           ((C239 * C16399 - C607 * C16304 - C239 * C16579 + C82592 * C16670) *
                C82871 +
            (C239 * C3530 - C607 * C3345 - C239 * C3862 + C82592 * C4029) *
                C82921 +
            (C239 * C3527 - C607 * C3348 - C239 * C3859 + C82592 * C4030) *
                C82934 +
            (C239 * C1265 - C607 * C1155 - C239 * C1463 + C82592 * C1566) *
                C82941) *
               C39819) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C37887 +
            C3268 * C82639) *
               C82937 +
           (C38508 + C38509) * C82927 + (C38510 + C38511) * C82911 +
           (C38512 + C38513) * C82862) *
              C1149 -
          (((C239 * C7997 - C607 * C7859 - C239 * C8267 + C82592 * C8402) *
                C82639 +
            (C239 * C1268 - C607 * C1152 - C239 * C1466 + C82592 * C1563) *
                C37887) *
               C82862 +
           ((C239 * C3529 - C607 * C3346 - C239 * C3861 + C82592 * C4026) *
                C82639 +
            (C239 * C1267 - C607 * C1153 - C239 * C1465 + C82592 * C1564) *
                C37887) *
               C82911 +
           ((C239 * C3528 - C607 * C3347 - C239 * C3860 + C82592 * C4028) *
                C82639 +
            (C239 * C1266 - C607 * C1154 - C239 * C1464 + C82592 * C1565) *
                C37887) *
               C82927 +
           ((C239 * C3527 - C607 * C3348 - C239 * C3859 + C82592 * C4030) *
                C82639 +
            (C239 * C1265 - C607 * C1155 - C239 * C1463 + C82592 * C1566) *
                C37887) *
               C82937) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4296 * C240 - C4851 * C102 - C4296 * C497 + C82932 * C608 +
             C4297 * C1265 - C4852 * C1155 - C4297 * C1463 + C82918 * C1566 +
             C4298 * C4299 - C4853 * C4108 - C4298 * C4683 + C82896 * C4854) *
                C37887 +
            (C18182 + C18183 + C18184) * C82639) *
               C39819 +
           ((C4895 + C4896 + C4897) * C37887 +
            (C42658 + C42659 + C42660) * C82639) *
               C82533) *
              C1149 -
          (((C4298 * C33421 - C4853 * C33197 - C4298 * C33841 +
             C82896 * C34048 + C4297 * C5141 - C4852 * C4975 - C4297 * C5455 +
             C82918 * C5612 + C4296 * C3528 - C4851 * C3347 - C4296 * C3860 +
             C82932 * C4028) *
                C82639 +
            (C4298 * C5905 - C4853 * C5689 - C4298 * C6263 + C82896 * C6436 +
             C4297 * C4300 - C4852 * C4109 - C4297 * C4684 + C82918 * C4855 +
             C4296 * C1266 - C4851 * C1154 - C4296 * C1464 + C82932 * C1565) *
                C37887) *
               C82533 +
           ((C4298 * C18459 - C4853 * C18262 - C4298 * C18817 +
             C82896 * C18988 + C4297 * C5140 - C4852 * C4976 - C4297 * C5454 +
             C82918 * C5613 + C4296 * C3527 - C4851 * C3348 - C4296 * C3859 +
             C82932 * C4030) *
                C82639 +
            (C4298 * C5904 - C4853 * C5690 - C4298 * C6262 + C82896 * C6437 +
             C4297 * C4299 - C4852 * C4108 - C4297 * C4683 + C82918 * C4854 +
             C4296 * C1265 - C4851 * C1155 - C4296 * C1463 + C82932 * C1566) *
                C37887) *
               C39819) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C80234 * C108 - C80274 * C102 - C80234 * C109 + C82528 * C120 +
             C80230 * C110 - C80269 * C103 - C80230 * C111 + C82536 * C121 +
             C80280 * C112 - C44665 * C104 - C80280 * C113 + C44656 * C122) *
                C82864 +
            (C80234 * C1164 - C80274 * C1155 - C80234 * C1165 + C82528 * C1170 +
             C80230 * C1162 - C80269 * C1154 - C80230 * C1163 + C82536 * C1169 +
             C80280 * C1160 - C44665 * C1153 - C80280 * C1161 +
             C44656 * C1168) *
                C82679) *
               C37887 +
           ((C45459 + C45460 + C45461) * C82864 +
            (C80234 * C3359 - C80274 * C3348 - C80234 * C3360 + C82528 * C3366 +
             C80230 * C3357 - C80269 * C3347 - C80230 * C3358 + C82536 * C3365 +
             C80280 * C3355 - C44665 * C3346 - C80280 * C3356 +
             C44656 * C3364) *
                C82679) *
               C82639) *
              C82938 * C82939 * C90 -
          (((C80280 * C7860 - C44665 * C7859 - C80280 * C7861 + C44656 * C7862 +
             C80230 * C3355 - C80269 * C3346 - C80230 * C3356 + C82536 * C3364 +
             C80234 * C3357 - C80274 * C3347 - C80234 * C3358 +
             C82528 * C3365) *
                C82679 +
            (C80280 * C698 - C44665 * C692 - C80280 * C699 + C44656 * C707 +
             C80230 * C700 - C80269 * C693 - C80230 * C701 + C82536 * C708 +
             C80234 * C702 - C80274 * C694 - C80234 * C703 + C82528 * C709) *
                C82864) *
               C82639 +
           ((C80280 * C1158 - C44665 * C1152 - C80280 * C1159 + C44656 * C1167 +
             C80230 * C1160 - C80269 * C1153 - C80230 * C1161 + C82536 * C1168 +
             C80234 * C1162 - C80274 * C1154 - C80234 * C1163 +
             C82528 * C1169) *
                C82679 +
            (C80280 * C114 - C44665 * C105 - C80280 * C115 + C44656 * C123 +
             C80230 * C112 - C80269 * C104 - C80230 * C113 + C82536 * C122 +
             C80234 * C110 - C80274 * C103 - C80234 * C111 + C82528 * C121) *
                C82864) *
               C37887) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexy[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C80234 +
            (C37887 * C175 - C37963 * C109 + C82639 * C758 - C37964 * C705) *
                C82528 +
            (C37966 - C37967 + C37968 - C37969) * C80230 +
            (C37970 - C37971 + C37972 - C37973) * C82536 +
            (C37974 - C37975 + C37976 - C37977) * C80280 +
            (C37978 - C37979 + C37980 - C37981) * C44656) *
               C82864 +
           ((C43819 - C43820 + C43821 - C43822) * C80234 +
            (C43823 - C43824 + C43825 - C43826) * C82528 +
            (C41884 - C41885 + C41886 - C41887) * C80230 +
            (C41888 - C41889 + C41890 - C41891) * C82536 +
            (C46955 - C46956 + C46957 - C46958) * C80280 +
            (C46959 - C46960 + C46961 - C46962) * C44656) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C37967 - C37966 + C37969 - C37968) * C80234 +
            (C37971 - C37970 + C37973 - C37972) * C82528 +
            (C37975 - C37974 + C37977 - C37976) * C80230 +
            (C37979 - C37978 + C37981 - C37980) * C82536 +
            (C37983 - C37982 + C37985 - C37984) * C80280 +
            (C37987 - C37986 + C37989 - C37988) * C44656) *
               C82864 +
           ((C41885 - C41884 + C41887 - C41886) * C80234 +
            (C41889 - C41888 + C41891 - C41890) * C82528 +
            (C46956 - C46955 + C46958 - C46957) * C80230 +
            (C46960 - C46959 + C46962 - C46961) * C82536 +
            (C37963 * C1152 - C37887 * C1216 + C37964 * C7859 -
             C82639 * C7929) *
                C80280 +
            (C37963 * C1159 - C37887 * C1221 + C37964 * C7861 -
             C82639 * C7930) *
                C44656) *
               C82679) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexz[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C80234 +
            (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
                C82528 +
            (C8610 - C8611 + C8612 - C8613) * C80230 +
            (C8614 - C8615 + C8616 - C8617) * C82536 +
            (C8618 - C8619 + C8620 - C8621) * C80280 +
            (C8622 - C8623 + C8624 - C8625) * C44656) *
               C37887 +
           ((C11640 - C11641 + C11642 - C11643) * C80234 +
            (C11644 - C11645 + C11646 - C11647) * C82528 +
            (C10649 - C10650 + C10651 - C10652) * C80230 +
            (C10653 - C10654 + C10655 - C10656) * C82536 +
            (C10657 - C10658 + C10659 - C10660) * C80280 +
            (C10661 - C10662 + C10663 - C10664) * C44656) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C8611 - C8610 + C8613 - C8612) * C80234 +
            (C8615 - C8614 + C8617 - C8616) * C82528 +
            (C8619 - C8618 + C8621 - C8620) * C80230 +
            (C8623 - C8622 + C8625 - C8624) * C82536 +
            (C8627 - C8626 + C8629 - C8628) * C80280 +
            (C8631 - C8630 + C8633 - C8632) * C44656) *
               C37887 +
           ((C10650 - C10649 + C10652 - C10651) * C80234 +
            (C10654 - C10653 + C10656 - C10655) * C82528 +
            (C10658 - C10657 + C10660 - C10659) * C80230 +
            (C10662 - C10661 + C10664 - C10663) * C82536 +
            (C8607 * C692 - C82864 * C808 + C8608 * C7859 - C82679 * C7997) *
                C80280 +
            (C8607 * C699 - C82864 * C813 + C8608 * C7861 - C82679 * C7998) *
                C44656) *
               C82639) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82528 * C108 - C80234 * C102 + C82536 * C110 - C80230 * C103 +
             C44656 * C112 - C80280 * C104) *
                C37963 +
            (C82528 * C316 - C80234 * C310 + C82536 * C317 - C80230 * C311 +
             C44656 * C318 - C80280 * C312) *
                C37887 +
            (C45687 - C45688 + C45689 - C45690 + C45691 - C45692) * C37964 +
            (C45693 - C45694 + C45695 - C45696 + C45697 - C45698) * C82639) *
               C82864 +
           ((C82528 * C1164 - C80234 * C1155 + C82536 * C1162 - C80230 * C1154 +
             C44656 * C1160 - C80280 * C1153) *
                C37963 +
            (C82528 * C1322 - C80234 * C1317 + C82536 * C1323 - C80230 * C1318 +
             C44656 * C1324 - C80280 * C1319) *
                C37887 +
            (C82528 * C3359 - C80234 * C3348 + C82536 * C3357 - C80230 * C3347 +
             C44656 * C3355 - C80280 * C3346) *
                C37964 +
            (C82528 * C3619 - C80234 * C3613 + C82536 * C3620 - C80230 * C3614 +
             C44656 * C3621 - C80280 * C3615) *
                C82639) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C80234 * C103 - C82528 * C110 + C80230 * C104 - C82536 * C112 +
             C80280 * C105 - C44656 * C114) *
                C37963 +
            (C80234 * C311 - C82528 * C317 + C80230 * C312 - C82536 * C318 +
             C80280 * C313 - C44656 * C319) *
                C37887 +
            (C80234 * C694 - C82528 * C702 + C80230 * C693 - C82536 * C700 +
             C80280 * C692 - C44656 * C698) *
                C37964 +
            (C80234 * C858 - C82528 * C863 + C80230 * C859 - C82536 * C864 +
             C80280 * C860 - C44656 * C865) *
                C82639) *
               C82864 +
           ((C80234 * C1154 - C82528 * C1162 + C80230 * C1153 - C82536 * C1160 +
             C80280 * C1152 - C44656 * C1158) *
                C37963 +
            (C80234 * C1318 - C82528 * C1323 + C80230 * C1319 - C82536 * C1324 +
             C80280 * C1320 - C44656 * C1325) *
                C37887 +
            (C80234 * C3347 - C82528 * C3357 + C80230 * C3346 - C82536 * C3355 +
             C80280 * C7859 - C44656 * C7860) *
                C37964 +
            (C80234 * C3614 - C82528 * C3620 + C80230 * C3615 - C82536 * C3621 +
             C80280 * C8065 - C44656 * C8066) *
                C82639) *
               C82679) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C37963 * C169 - C38187 * C102 - C37963 * C310 + C37887 * C365 +
             C37964 * C753 - C38188 * C695 - C37964 * C857 + C82639 * C913) *
                C82528 +
            (C38226 + C38227) * C82536 + (C38228 + C38229) * C44656) *
               C82864 +
           ((C44169 + C44170) * C82528 + (C42230 + C42231) * C82536 +
            (C47269 + C47270) * C44656) *
               C82679) *
              C82938 * C82939 * C90 -
          (((C37964 * C7929 - C38188 * C7859 - C37964 * C8065 + C82639 * C8133 +
             C37963 * C1216 - C38187 * C1152 - C37963 * C1320 +
             C37887 * C1370) *
                C44656 +
            (C47270 + C47269) * C82536 + (C42231 + C42230) * C82528) *
               C82679 +
           ((C38231 + C38230) * C44656 + (C38229 + C38228) * C82536 +
            (C38227 + C38226) * C82528) *
               C82864) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C37963 +
            (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
                C37887 +
            (C11640 - C11641 + C11642 - C11643) * C37964 +
            (C11954 - C11955 + C11956 - C11957) * C82639) *
               C82528 +
           ((C8610 - C8611 + C8612 - C8613) * C37963 +
            (C8839 - C8840 + C8841 - C8842) * C37887 +
            (C10649 - C10650 + C10651 - C10652) * C37964 +
            (C10987 - C10988 + C10989 - C10990) * C82639) *
               C82536 +
           ((C8618 - C8619 + C8620 - C8621) * C37963 +
            (C8843 - C8844 + C8845 - C8846) * C37887 +
            (C10657 - C10658 + C10659 - C10660) * C37964 +
            (C10991 - C10992 + C10993 - C10994) * C82639) *
               C44656) *
              C82938 * C82939 * C90 +
          (((C8611 - C8610 + C8613 - C8612) * C37963 +
            (C8840 - C8839 + C8842 - C8841) * C37887 +
            (C10650 - C10649 + C10652 - C10651) * C37964 +
            (C10988 - C10987 + C10990 - C10989) * C82639) *
               C82528 +
           ((C8619 - C8618 + C8621 - C8620) * C37963 +
            (C8844 - C8843 + C8846 - C8845) * C37887 +
            (C10658 - C10657 + C10660 - C10659) * C37964 +
            (C10992 - C10991 + C10994 - C10993) * C82639) *
               C82536 +
           ((C8627 - C8626 + C8629 - C8628) * C37963 +
            (C8848 - C8847 + C8850 - C8849) * C37887 +
            (C8607 * C692 - C82864 * C808 + C8608 * C7859 - C82679 * C7997) *
                C37964 +
            (C8607 * C860 - C82864 * C959 + C8608 * C8065 - C82679 * C8200) *
                C82639) *
               C44656) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezx[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82528 * C108 - C80234 * C102 + C82536 * C110 - C80230 * C103 +
             C44656 * C112 - C80280 * C104) *
                C8607 +
            (C82528 * C503 - C80234 * C497 + C82536 * C504 - C80230 * C498 +
             C44656 * C505 - C80280 * C499) *
                C82864 +
            (C82528 * C1164 - C80234 * C1155 + C82536 * C1162 - C80230 * C1154 +
             C44656 * C1160 - C80280 * C1153) *
                C8608 +
            (C82528 * C1468 - C80234 * C1463 + C82536 * C1469 - C80230 * C1464 +
             C44656 * C1470 - C80280 * C1465) *
                C82679) *
               C37887 +
           ((C45687 - C45688 + C45689 - C45690 + C45691 - C45692) * C8607 +
            (C45933 - C45934 + C45935 - C45936 + C45937 - C45938) * C82864 +
            (C82528 * C3359 - C80234 * C3348 + C82536 * C3357 - C80230 * C3347 +
             C44656 * C3355 - C80280 * C3346) *
                C8608 +
            (C82528 * C3865 - C80234 * C3859 + C82536 * C3866 - C80230 * C3860 +
             C44656 * C3867 - C80280 * C3861) *
                C82679) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C80234 * C103 - C82528 * C110 + C80230 * C104 - C82536 * C112 +
             C80280 * C105 - C44656 * C114) *
                C8607 +
            (C80234 * C498 - C82528 * C504 + C80230 * C499 - C82536 * C505 +
             C80280 * C500 - C44656 * C506) *
                C82864 +
            (C80234 * C1154 - C82528 * C1162 + C80230 * C1153 - C82536 * C1160 +
             C80280 * C1152 - C44656 * C1158) *
                C8608 +
            (C80234 * C1464 - C82528 * C1469 + C80230 * C1465 - C82536 * C1470 +
             C80280 * C1466 - C44656 * C1471) *
                C82679) *
               C37887 +
           ((C80234 * C694 - C82528 * C702 + C80230 * C693 - C82536 * C700 +
             C80280 * C692 - C44656 * C698) *
                C8607 +
            (C80234 * C1004 - C82528 * C1009 + C80230 * C1005 - C82536 * C1010 +
             C80280 * C1006 - C44656 * C1011) *
                C82864 +
            (C80234 * C3347 - C82528 * C3357 + C80230 * C3346 - C82536 * C3355 +
             C80280 * C7859 - C44656 * C7860) *
                C8608 +
            (C80234 * C3860 - C82528 * C3866 + C80230 * C3861 - C82536 * C3867 +
             C80280 * C8267 - C44656 * C8268) *
                C82679) *
               C82639) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezy[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C8607 +
            (C37887 * C551 - C37963 * C497 + C82639 * C1055 - C37964 * C1003) *
                C82864 +
            (C43819 - C43820 + C43821 - C43822) * C8608 +
            (C44475 - C44476 + C44477 - C44478) * C82679) *
               C82528 +
           ((C37966 - C37967 + C37968 - C37969) * C8607 +
            (C38430 - C38431 + C38432 - C38433) * C82864 +
            (C41884 - C41885 + C41886 - C41887) * C8608 +
            (C42534 - C42535 + C42536 - C42537) * C82679) *
               C82536 +
           ((C37974 - C37975 + C37976 - C37977) * C8607 +
            (C38434 - C38435 + C38436 - C38437) * C82864 +
            (C46955 - C46956 + C46957 - C46958) * C8608 +
            (C47565 - C47566 + C47567 - C47568) * C82679) *
               C44656) *
              C82938 * C82939 * C90 +
          (((C37967 - C37966 + C37969 - C37968) * C8607 +
            (C38431 - C38430 + C38433 - C38432) * C82864 +
            (C41885 - C41884 + C41887 - C41886) * C8608 +
            (C42535 - C42534 + C42537 - C42536) * C82679) *
               C82528 +
           ((C37975 - C37974 + C37977 - C37976) * C8607 +
            (C38435 - C38434 + C38437 - C38436) * C82864 +
            (C46956 - C46955 + C46958 - C46957) * C8608 +
            (C47566 - C47565 + C47568 - C47567) * C82679) *
               C82536 +
           ((C37983 - C37982 + C37985 - C37984) * C8607 +
            (C38439 - C38438 + C38441 - C38440) * C82864 +
            (C37963 * C1152 - C37887 * C1216 + C37964 * C7859 -
             C82639 * C7929) *
                C8608 +
            (C37963 * C1466 - C37887 * C1518 + C37964 * C8267 -
             C82639 * C8335) *
                C82679) *
               C44656) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezz[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
             C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
                C37887 +
            (C12270 + C12271) * C82639) *
               C82528 +
           ((C9089 + C9090) * C37887 + (C11321 + C11322) * C82639) * C82536 +
           ((C9091 + C9092) * C37887 + (C11323 + C11324) * C82639) * C44656) *
              C82938 * C82939 * C90 -
          (((C8608 * C7997 - C9051 * C7859 - C8608 * C8267 + C82679 * C8402 +
             C8607 * C808 - C9050 * C692 - C8607 * C1006 + C82864 * C1103) *
                C82639 +
            (C9094 + C9093) * C37887) *
               C44656 +
           ((C11324 + C11323) * C82639 + (C9092 + C9091) * C37887) * C82536 +
           ((C11322 + C11321) * C82639 + (C9090 + C9089) * C37887) * C82528) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexx[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C80234 * C108 - C80274 * C102 - C80234 * C109 + C82528 * C120 +
             C80230 * C110 - C80269 * C103 - C80230 * C111 + C82536 * C121 +
             C80280 * C112 - C44665 * C104 - C80280 * C113 + C44656 * C122) *
                C82864 +
            (C80234 * C1164 - C80274 * C1155 - C80234 * C1165 + C82528 * C1170 +
             C80230 * C1162 - C80269 * C1154 - C80230 * C1163 + C82536 * C1169 +
             C80280 * C1160 - C44665 * C1153 - C80280 * C1161 +
             C44656 * C1168) *
                C82679) *
               C37887 +
           ((C45459 + C45460 + C45461) * C82864 +
            (C47783 + C47784 + C47785) * C82679) *
               C82639) *
              C82938 * C688 -
          (((C80280 * C3349 - C44665 * C3343 - C80280 * C3350 + C44656 * C3361 +
             C80230 * C3351 - C80269 * C3344 - C80230 * C3352 + C82536 * C3362 +
             C80234 * C3353 - C80274 * C3345 - C80234 * C3354 +
             C82528 * C3363) *
                C82679 +
            (C45464 + C45463 + C45462) * C82864) *
               C82639 +
           ((C47785 + C47784 + C47783) * C82679 +
            (C45461 + C45460 + C45459) * C82864) *
               C37887) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eexy[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C80234 +
            (C37887 * C175 - C37963 * C109 + C82639 * C758 - C37964 * C705) *
                C82528 +
            (C37966 - C37967 + C37968 - C37969) * C80230 +
            (C37970 - C37971 + C37972 - C37973) * C82536 +
            (C37974 - C37975 + C37976 - C37977) * C80280 +
            (C37978 - C37979 + C37980 - C37981) * C44656) *
               C82864 +
           ((C43819 - C43820 + C43821 - C43822) * C80234 +
            (C43823 - C43824 + C43825 - C43826) * C82528 +
            (C41884 - C41885 + C41886 - C41887) * C80230 +
            (C41888 - C41889 + C41890 - C41891) * C82536 +
            (C46955 - C46956 + C46957 - C46958) * C80280 +
            (C46959 - C46960 + C46961 - C46962) * C44656) *
               C82679) *
              C82938 * C688 +
          (((C37963 * C695 - C37887 * C753 + C37964 * C1653 - C82639 * C1746) *
                C80234 +
            (C37963 * C705 - C37887 * C758 + C37964 * C1658 - C82639 * C1750) *
                C82528 +
            (C37963 * C694 - C37887 * C754 + C37964 * C1654 - C82639 * C1747) *
                C80230 +
            (C37963 * C703 - C37887 * C759 + C37964 * C1660 - C82639 * C1751) *
                C82536 +
            (C37963 * C693 - C37887 * C755 + C37964 * C1655 - C82639 * C1748) *
                C80280 +
            (C37963 * C701 - C37887 * C760 + C37964 * C1662 - C82639 * C1752) *
                C44656) *
               C82864 +
           ((C37963 * C3348 - C37887 * C3441 + C37964 * C3345 -
             C82639 * C3442) *
                C80234 +
            (C37963 * C3360 - C37887 * C3447 + C37964 * C3354 -
             C82639 * C3448) *
                C82528 +
            (C37963 * C3347 - C37887 * C3443 + C37964 * C3344 -
             C82639 * C3444) *
                C80230 +
            (C37963 * C3358 - C37887 * C3449 + C37964 * C3352 -
             C82639 * C3450) *
                C82536 +
            (C37963 * C3346 - C37887 * C3445 + C37964 * C3343 -
             C82639 * C3446) *
                C80280 +
            (C37963 * C3356 - C37887 * C3451 + C37964 * C3350 -
             C82639 * C3452) *
                C44656) *
               C82679) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eexz[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C80234 +
            (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
                C82528 +
            (C8610 - C8611 + C8612 - C8613) * C80230 +
            (C8614 - C8615 + C8616 - C8617) * C82536 +
            (C8618 - C8619 + C8620 - C8621) * C80280 +
            (C8622 - C8623 + C8624 - C8625) * C44656) *
               C37887 +
           ((C11640 - C11641 + C11642 - C11643) * C80234 +
            (C11644 - C11645 + C11646 - C11647) * C82528 +
            (C10649 - C10650 + C10651 - C10652) * C80230 +
            (C10653 - C10654 + C10655 - C10656) * C82536 +
            (C10657 - C10658 + C10659 - C10660) * C80280 +
            (C10661 - C10662 + C10663 - C10664) * C44656) *
               C82639) *
              C82938 * C688 +
          (((C11641 - C11640 + C11643 - C11642) * C80234 +
            (C11645 - C11644 + C11647 - C11646) * C82528 +
            (C10650 - C10649 + C10652 - C10651) * C80230 +
            (C10654 - C10653 + C10656 - C10655) * C82536 +
            (C10658 - C10657 + C10660 - C10659) * C80280 +
            (C10662 - C10661 + C10664 - C10663) * C44656) *
               C37887 +
           ((C22223 - C22222 + C22225 - C22224) * C80234 +
            (C22227 - C22226 + C22229 - C22228) * C82528 +
            (C21260 - C21259 + C21262 - C21261) * C80230 +
            (C21264 - C21263 + C21266 - C21265) * C82536 +
            (C8607 * C1655 - C82864 * C1854 + C8608 * C3343 - C82679 * C3532) *
                C80280 +
            (C8607 * C1662 - C82864 * C1858 + C8608 * C3350 - C82679 * C3538) *
                C44656) *
               C82639) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyx[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82528 * C108 - C80234 * C102 + C82536 * C110 - C80230 * C103 +
             C44656 * C112 - C80280 * C104) *
                C37963 +
            (C82528 * C316 - C80234 * C310 + C82536 * C317 - C80230 * C311 +
             C44656 * C318 - C80280 * C312) *
                C37887 +
            (C45687 - C45688 + C45689 - C45690 + C45691 - C45692) * C37964 +
            (C45693 - C45694 + C45695 - C45696 + C45697 - C45698) * C82639) *
               C82864 +
           ((C82528 * C1164 - C80234 * C1155 + C82536 * C1162 - C80230 * C1154 +
             C44656 * C1160 - C80280 * C1153) *
                C37963 +
            (C82528 * C1322 - C80234 * C1317 + C82536 * C1323 - C80230 * C1318 +
             C44656 * C1324 - C80280 * C1319) *
                C37887 +
            (C48080 - C48081 + C48082 - C48083 + C48084 - C48085) * C37964 +
            (C48086 - C48087 + C48088 - C48089 + C48090 - C48091) * C82639) *
               C82679) *
              C82938 * C688 +
          (((C45688 - C45687 + C45690 - C45689 + C45692 - C45691) * C37963 +
            (C45694 - C45693 + C45696 - C45695 + C45698 - C45697) * C37887 +
            (C45700 - C45699 + C45702 - C45701 + C45704 - C45703) * C37964 +
            (C45706 - C45705 + C45708 - C45707 + C45710 - C45709) * C82639) *
               C82864 +
           ((C48081 - C48080 + C48083 - C48082 + C48085 - C48084) * C37963 +
            (C48087 - C48086 + C48089 - C48088 + C48091 - C48090) * C37887 +
            (C80234 * C3345 - C82528 * C3353 + C80230 * C3344 - C82536 * C3351 +
             C80280 * C3343 - C44656 * C3349) *
                C37964 +
            (C80234 * C3616 - C82528 * C3622 + C80230 * C3617 - C82536 * C3623 +
             C80280 * C3618 - C44656 * C3624) *
                C82639) *
               C82679) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyy[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C37963 * C169 - C38187 * C102 - C37963 * C310 + C37887 * C365 +
             C37964 * C753 - C38188 * C695 - C37964 * C857 + C82639 * C913) *
                C82528 +
            (C38226 + C38227) * C82536 + (C38228 + C38229) * C44656) *
               C82864 +
           ((C44169 + C44170) * C82528 + (C42230 + C42231) * C82536 +
            (C47269 + C47270) * C44656) *
               C82679) *
              C82938 * C688 -
          (((C37964 * C3446 - C38188 * C3343 - C37964 * C3618 + C82639 * C3699 +
             C37963 * C3445 - C38187 * C3346 - C37963 * C3615 +
             C37887 * C3700) *
                C44656 +
            (C37964 * C3444 - C38188 * C3344 - C37964 * C3617 + C82639 * C3701 +
             C37963 * C3443 - C38187 * C3347 - C37963 * C3614 +
             C37887 * C3702) *
                C82536 +
            (C37964 * C3442 - C38188 * C3345 - C37964 * C3616 + C82639 * C3703 +
             C37963 * C3441 - C38187 * C3348 - C37963 * C3613 +
             C37887 * C3704) *
                C82528) *
               C82679 +
           ((C37964 * C1748 - C38188 * C1655 - C37964 * C1952 + C82639 * C2037 +
             C37963 * C755 - C38187 * C693 - C37963 * C859 + C37887 * C911) *
                C44656 +
            (C37964 * C1747 - C38188 * C1654 - C37964 * C1951 + C82639 * C2036 +
             C37963 * C754 - C38187 * C694 - C37963 * C858 + C37887 * C912) *
                C82536 +
            (C37964 * C1746 - C38188 * C1653 - C37964 * C1950 + C82639 * C2035 +
             C37963 * C753 - C38187 * C695 - C37963 * C857 + C37887 * C913) *
                C82528) *
               C82864) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyz[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C37963 +
            (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
                C37887 +
            (C11640 - C11641 + C11642 - C11643) * C37964 +
            (C11954 - C11955 + C11956 - C11957) * C82639) *
               C82528 +
           ((C8610 - C8611 + C8612 - C8613) * C37963 +
            (C8839 - C8840 + C8841 - C8842) * C37887 +
            (C10649 - C10650 + C10651 - C10652) * C37964 +
            (C10987 - C10988 + C10989 - C10990) * C82639) *
               C82536 +
           ((C8618 - C8619 + C8620 - C8621) * C37963 +
            (C8843 - C8844 + C8845 - C8846) * C37887 +
            (C10657 - C10658 + C10659 - C10660) * C37964 +
            (C10991 - C10992 + C10993 - C10994) * C82639) *
               C44656) *
              C82938 * C688 +
          (((C11641 - C11640 + C11643 - C11642) * C37963 +
            (C11955 - C11954 + C11957 - C11956) * C37887 +
            (C22223 - C22222 + C22225 - C22224) * C37964 +
            (C22541 - C22540 + C22543 - C22542) * C82639) *
               C82528 +
           ((C10650 - C10649 + C10652 - C10651) * C37963 +
            (C10988 - C10987 + C10990 - C10989) * C37887 +
            (C21260 - C21259 + C21262 - C21261) * C37964 +
            (C21583 - C21582 + C21585 - C21584) * C82639) *
               C82536 +
           ((C10658 - C10657 + C10660 - C10659) * C37963 +
            (C10992 - C10991 + C10994 - C10993) * C37887 +
            (C8607 * C1655 - C82864 * C1854 + C8608 * C3343 - C82679 * C3532) *
                C37964 +
            (C8607 * C1952 - C82864 * C2157 + C8608 * C3618 - C82679 * C3784) *
                C82639) *
               C44656) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eezx[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82528 * C108 - C80234 * C102 + C82536 * C110 - C80230 * C103 +
             C44656 * C112 - C80280 * C104) *
                C8607 +
            (C82528 * C503 - C80234 * C497 + C82536 * C504 - C80230 * C498 +
             C44656 * C505 - C80280 * C499) *
                C82864 +
            (C82528 * C1164 - C80234 * C1155 + C82536 * C1162 - C80230 * C1154 +
             C44656 * C1160 - C80280 * C1153) *
                C8608 +
            (C82528 * C1468 - C80234 * C1463 + C82536 * C1469 - C80230 * C1464 +
             C44656 * C1470 - C80280 * C1465) *
                C82679) *
               C37887 +
           ((C45687 - C45688 + C45689 - C45690 + C45691 - C45692) * C8607 +
            (C45933 - C45934 + C45935 - C45936 + C45937 - C45938) * C82864 +
            (C48080 - C48081 + C48082 - C48083 + C48084 - C48085) * C8608 +
            (C48386 - C48387 + C48388 - C48389 + C48390 - C48391) * C82679) *
               C82639) *
              C82938 * C688 +
          (((C45688 - C45687 + C45690 - C45689 + C45692 - C45691) * C8607 +
            (C45934 - C45933 + C45936 - C45935 + C45938 - C45937) * C82864 +
            (C48081 - C48080 + C48083 - C48082 + C48085 - C48084) * C8608 +
            (C48387 - C48386 + C48389 - C48388 + C48391 - C48390) * C82679) *
               C37887 +
           ((C45700 - C45699 + C45702 - C45701 + C45704 - C45703) * C8607 +
            (C45940 - C45939 + C45942 - C45941 + C45944 - C45943) * C82864 +
            (C80234 * C3345 - C82528 * C3353 + C80230 * C3344 - C82536 * C3351 +
             C80280 * C3343 - C44656 * C3349) *
                C8608 +
            (C80234 * C3862 - C82528 * C3868 + C80230 * C3863 - C82536 * C3869 +
             C80280 * C3864 - C44656 * C3870) *
                C82679) *
               C82639) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eezy[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C8607 +
            (C37887 * C551 - C37963 * C497 + C82639 * C1055 - C37964 * C1003) *
                C82864 +
            (C43819 - C43820 + C43821 - C43822) * C8608 +
            (C44475 - C44476 + C44477 - C44478) * C82679) *
               C82528 +
           ((C37966 - C37967 + C37968 - C37969) * C8607 +
            (C38430 - C38431 + C38432 - C38433) * C82864 +
            (C41884 - C41885 + C41886 - C41887) * C8608 +
            (C42534 - C42535 + C42536 - C42537) * C82679) *
               C82536 +
           ((C37974 - C37975 + C37976 - C37977) * C8607 +
            (C38434 - C38435 + C38436 - C38437) * C82864 +
            (C46955 - C46956 + C46957 - C46958) * C8608 +
            (C47565 - C47566 + C47567 - C47568) * C82679) *
               C44656) *
              C82938 * C688 +
          (((C37963 * C695 - C37887 * C753 + C37964 * C1653 - C82639 * C1746) *
                C8607 +
            (C37963 * C1003 - C37887 * C1055 + C37964 * C2241 -
             C82639 * C2323) *
                C82864 +
            (C37963 * C3348 - C37887 * C3441 + C37964 * C3345 -
             C82639 * C3442) *
                C8608 +
            (C37963 * C3859 - C37887 * C3945 + C37964 * C3862 -
             C82639 * C3946) *
                C82679) *
               C82528 +
           ((C37963 * C694 - C37887 * C754 + C37964 * C1654 - C82639 * C1747) *
                C8607 +
            (C37963 * C1004 - C37887 * C1056 + C37964 * C2242 -
             C82639 * C2324) *
                C82864 +
            (C37963 * C3347 - C37887 * C3443 + C37964 * C3344 -
             C82639 * C3444) *
                C8608 +
            (C37963 * C3860 - C37887 * C3947 + C37964 * C3863 -
             C82639 * C3948) *
                C82679) *
               C82536 +
           ((C37963 * C693 - C37887 * C755 + C37964 * C1655 - C82639 * C1748) *
                C8607 +
            (C37963 * C1005 - C37887 * C1057 + C37964 * C2243 -
             C82639 * C2325) *
                C82864 +
            (C37963 * C3346 - C37887 * C3445 + C37964 * C3343 -
             C82639 * C3446) *
                C8608 +
            (C37963 * C3861 - C37887 * C3949 + C37964 * C3864 -
             C82639 * C3950) *
                C82679) *
               C44656) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eezz[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
             C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
                C37887 +
            (C12270 + C12271) * C82639) *
               C82528 +
           ((C9089 + C9090) * C37887 + (C11321 + C11322) * C82639) * C82536 +
           ((C9091 + C9092) * C37887 + (C11323 + C11324) * C82639) * C44656) *
              C82938 * C688 -
          (((C8608 * C3532 - C9051 * C3343 - C8608 * C3864 + C82679 * C4025 +
             C8607 * C1854 - C9050 * C1655 - C8607 * C2243 + C82864 * C2415) *
                C82639 +
            (C11324 + C11323) * C37887) *
               C44656 +
           ((C21899 + C21898) * C82639 + (C11322 + C11321) * C37887) * C82536 +
           ((C22859 + C22858) * C82639 + (C12271 + C12270) * C37887) * C82528) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eexx[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C80234 * C108 - C80274 * C102 - C80234 * C109 + C82528 * C120 +
             C80230 * C110 - C80269 * C103 - C80230 * C111 + C82536 * C121 +
             C80280 * C112 - C44665 * C104 - C80280 * C113 + C44656 * C122) *
                C82864 +
            (C48704 + C48705 + C48706) * C82679) *
               C37887 +
           ((C45459 + C45460 + C45461) * C82864 +
            (C47783 + C47784 + C47785) * C82679) *
               C82639) *
              C1149 -
          (((C80280 * C4977 - C44665 * C4974 - C80280 * C4978 + C44656 * C4983 +
             C80230 * C4979 - C80269 * C4975 - C80230 * C4980 + C82536 * C4984 +
             C80234 * C4981 - C80274 * C4976 - C80234 * C4982 +
             C82528 * C4985) *
                C82679 +
            (C47785 + C47784 + C47783) * C82864) *
               C82639 +
           ((C80280 * C4116 - C44665 * C4110 - C80280 * C4117 + C44656 * C4122 +
             C80230 * C4114 - C80269 * C4109 - C80230 * C4115 + C82536 * C4121 +
             C80234 * C4112 - C80274 * C4108 - C80234 * C4113 +
             C82528 * C4120) *
                C82679 +
            (C48706 + C48705 + C48704) * C82864) *
               C37887) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eexy[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C80234 +
            (C37887 * C175 - C37963 * C109 + C82639 * C758 - C37964 * C705) *
                C82528 +
            (C37966 - C37967 + C37968 - C37969) * C80230 +
            (C37970 - C37971 + C37972 - C37973) * C82536 +
            (C37974 - C37975 + C37976 - C37977) * C80280 +
            (C37978 - C37979 + C37980 - C37981) * C44656) *
               C82864 +
           ((C43819 - C43820 + C43821 - C43822) * C80234 +
            (C43823 - C43824 + C43825 - C43826) * C82528 +
            (C41884 - C41885 + C41886 - C41887) * C80230 +
            (C41888 - C41889 + C41890 - C41891) * C82536 +
            (C46955 - C46956 + C46957 - C46958) * C80280 +
            (C46959 - C46960 + C46961 - C46962) * C44656) *
               C82679) *
              C1149 +
          (((C43820 - C43819 + C43822 - C43821) * C80234 +
            (C43824 - C43823 + C43826 - C43825) * C82528 +
            (C41885 - C41884 + C41887 - C41886) * C80230 +
            (C41889 - C41888 + C41891 - C41890) * C82536 +
            (C46956 - C46955 + C46958 - C46957) * C80280 +
            (C46960 - C46959 + C46962 - C46961) * C44656) *
               C82864 +
           ((C43828 - C43827 + C43830 - C43829) * C80234 +
            (C43832 - C43831 + C43834 - C43833) * C82528 +
            (C41893 - C41892 + C41895 - C41894) * C80230 +
            (C41897 - C41896 + C41899 - C41898) * C82536 +
            (C37963 * C4110 - C37887 * C4200 + C37964 * C4974 -
             C82639 * C5062) *
                C80280 +
            (C37963 * C4117 - C37887 * C4204 + C37964 * C4978 -
             C82639 * C5065) *
                C44656) *
               C82679) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eexz[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C80234 +
            (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
                C82528 +
            (C8610 - C8611 + C8612 - C8613) * C80230 +
            (C8614 - C8615 + C8616 - C8617) * C82536 +
            (C8618 - C8619 + C8620 - C8621) * C80280 +
            (C8622 - C8623 + C8624 - C8625) * C44656) *
               C37887 +
           ((C11640 - C11641 + C11642 - C11643) * C80234 +
            (C11644 - C11645 + C11646 - C11647) * C82528 +
            (C10649 - C10650 + C10651 - C10652) * C80230 +
            (C10653 - C10654 + C10655 - C10656) * C82536 +
            (C10657 - C10658 + C10659 - C10660) * C80280 +
            (C10661 - C10662 + C10663 - C10664) * C44656) *
               C82639) *
              C1149 +
          (((C8607 * C1155 - C82864 * C1265 + C8608 * C4108 - C82679 * C4299) *
                C80234 +
            (C8607 * C1165 - C82864 * C1270 + C8608 * C4113 - C82679 * C4303) *
                C82528 +
            (C8607 * C1154 - C82864 * C1266 + C8608 * C4109 - C82679 * C4300) *
                C80230 +
            (C8607 * C1163 - C82864 * C1271 + C8608 * C4115 - C82679 * C4304) *
                C82536 +
            (C8607 * C1153 - C82864 * C1267 + C8608 * C4110 - C82679 * C4301) *
                C80280 +
            (C8607 * C1161 - C82864 * C1272 + C8608 * C4117 - C82679 * C4305) *
                C44656) *
               C37887 +
           ((C8607 * C3348 - C82864 * C3527 + C8608 * C4976 - C82679 * C5140) *
                C80234 +
            (C8607 * C3360 - C82864 * C3533 + C8608 * C4982 - C82679 * C5143) *
                C82528 +
            (C8607 * C3347 - C82864 * C3528 + C8608 * C4975 - C82679 * C5141) *
                C80230 +
            (C8607 * C3358 - C82864 * C3534 + C8608 * C4980 - C82679 * C5144) *
                C82536 +
            (C8607 * C3346 - C82864 * C3529 + C8608 * C4974 - C82679 * C5142) *
                C80280 +
            (C8607 * C3356 - C82864 * C3535 + C8608 * C4978 - C82679 * C5145) *
                C44656) *
               C82639) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyx[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82528 * C108 - C80234 * C102 + C82536 * C110 - C80230 * C103 +
             C44656 * C112 - C80280 * C104) *
                C37963 +
            (C82528 * C316 - C80234 * C310 + C82536 * C317 - C80230 * C311 +
             C44656 * C318 - C80280 * C312) *
                C37887 +
            (C45687 - C45688 + C45689 - C45690 + C45691 - C45692) * C37964 +
            (C45693 - C45694 + C45695 - C45696 + C45697 - C45698) * C82639) *
               C82864 +
           ((C49001 - C49002 + C49003 - C49004 + C49005 - C49006) * C37963 +
            (C49007 - C49008 + C49009 - C49010 + C49011 - C49012) * C37887 +
            (C48080 - C48081 + C48082 - C48083 + C48084 - C48085) * C37964 +
            (C48086 - C48087 + C48088 - C48089 + C48090 - C48091) * C82639) *
               C82679) *
              C1149 +
          (((C49002 - C49001 + C49004 - C49003 + C49006 - C49005) * C37963 +
            (C49008 - C49007 + C49010 - C49009 + C49012 - C49011) * C37887 +
            (C48081 - C48080 + C48083 - C48082 + C48085 - C48084) * C37964 +
            (C48087 - C48086 + C48089 - C48088 + C48091 - C48090) * C82639) *
               C82864 +
           ((C80234 * C4108 - C82528 * C4112 + C80230 * C4109 - C82536 * C4114 +
             C80280 * C4110 - C44656 * C4116) *
                C37963 +
            (C80234 * C4405 - C82528 * C4409 + C80230 * C4406 - C82536 * C4410 +
             C80280 * C4407 - C44656 * C4411) *
                C37887 +
            (C80234 * C4976 - C82528 * C4981 + C80230 * C4975 - C82536 * C4979 +
             C80280 * C4974 - C44656 * C4977) *
                C37964 +
            (C80234 * C5220 - C82528 * C5223 + C80230 * C5221 - C82536 * C5224 +
             C80280 * C5222 - C44656 * C5225) *
                C82639) *
               C82679) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyy[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C37963 * C169 - C38187 * C102 - C37963 * C310 + C37887 * C365 +
             C37964 * C753 - C38188 * C695 - C37964 * C857 + C82639 * C913) *
                C82528 +
            (C38226 + C38227) * C82536 + (C38228 + C38229) * C44656) *
               C82864 +
           ((C44169 + C44170) * C82528 + (C42230 + C42231) * C82536 +
            (C47269 + C47270) * C44656) *
               C82679) *
              C1149 -
          (((C37964 * C5062 - C38188 * C4974 - C37964 * C5222 + C82639 * C5300 +
             C37963 * C4200 - C38187 * C4110 - C37963 * C4407 +
             C37887 * C4489) *
                C44656 +
            (C42233 + C42232) * C82536 + (C44172 + C44171) * C82528) *
               C82679 +
           ((C47270 + C47269) * C44656 + (C42231 + C42230) * C82536 +
            (C44170 + C44169) * C82528) *
               C82864) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyz[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C37963 +
            (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
                C37887 +
            (C11640 - C11641 + C11642 - C11643) * C37964 +
            (C11954 - C11955 + C11956 - C11957) * C82639) *
               C82528 +
           ((C8610 - C8611 + C8612 - C8613) * C37963 +
            (C8839 - C8840 + C8841 - C8842) * C37887 +
            (C10649 - C10650 + C10651 - C10652) * C37964 +
            (C10987 - C10988 + C10989 - C10990) * C82639) *
               C82536 +
           ((C8618 - C8619 + C8620 - C8621) * C37963 +
            (C8843 - C8844 + C8845 - C8846) * C37887 +
            (C10657 - C10658 + C10659 - C10660) * C37964 +
            (C10991 - C10992 + C10993 - C10994) * C82639) *
               C44656) *
              C1149 +
          (((C8607 * C1155 - C82864 * C1265 + C8608 * C4108 - C82679 * C4299) *
                C37963 +
            (C8607 * C1317 - C82864 * C1416 + C8608 * C4405 - C82679 * C4593) *
                C37887 +
            (C8607 * C3348 - C82864 * C3527 + C8608 * C4976 - C82679 * C5140) *
                C37964 +
            (C8607 * C3613 - C82864 * C3779 + C8608 * C5220 - C82679 * C5377) *
                C82639) *
               C82528 +
           ((C8607 * C1154 - C82864 * C1266 + C8608 * C4109 - C82679 * C4300) *
                C37963 +
            (C8607 * C1318 - C82864 * C1417 + C8608 * C4406 - C82679 * C4594) *
                C37887 +
            (C8607 * C3347 - C82864 * C3528 + C8608 * C4975 - C82679 * C5141) *
                C37964 +
            (C8607 * C3614 - C82864 * C3781 + C8608 * C5221 - C82679 * C5378) *
                C82639) *
               C82536 +
           ((C8607 * C1153 - C82864 * C1267 + C8608 * C4110 - C82679 * C4301) *
                C37963 +
            (C8607 * C1319 - C82864 * C1418 + C8608 * C4407 - C82679 * C4595) *
                C37887 +
            (C8607 * C3346 - C82864 * C3529 + C8608 * C4974 - C82679 * C5142) *
                C37964 +
            (C8607 * C3615 - C82864 * C3783 + C8608 * C5222 - C82679 * C5379) *
                C82639) *
               C44656) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eezx[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82528 * C108 - C80234 * C102 + C82536 * C110 - C80230 * C103 +
             C44656 * C112 - C80280 * C104) *
                C8607 +
            (C82528 * C503 - C80234 * C497 + C82536 * C504 - C80230 * C498 +
             C44656 * C505 - C80280 * C499) *
                C82864 +
            (C49001 - C49002 + C49003 - C49004 + C49005 - C49006) * C8608 +
            (C49307 - C49308 + C49309 - C49310 + C49311 - C49312) * C82679) *
               C37887 +
           ((C45687 - C45688 + C45689 - C45690 + C45691 - C45692) * C8607 +
            (C45933 - C45934 + C45935 - C45936 + C45937 - C45938) * C82864 +
            (C48080 - C48081 + C48082 - C48083 + C48084 - C48085) * C8608 +
            (C48386 - C48387 + C48388 - C48389 + C48390 - C48391) * C82679) *
               C82639) *
              C1149 +
          (((C49002 - C49001 + C49004 - C49003 + C49006 - C49005) * C8607 +
            (C49308 - C49307 + C49310 - C49309 + C49312 - C49311) * C82864 +
            (C80234 * C4108 - C82528 * C4112 + C80230 * C4109 - C82536 * C4114 +
             C80280 * C4110 - C44656 * C4116) *
                C8608 +
            (C80234 * C4683 - C82528 * C4687 + C80230 * C4684 - C82536 * C4688 +
             C80280 * C4685 - C44656 * C4689) *
                C82679) *
               C37887 +
           ((C48081 - C48080 + C48083 - C48082 + C48085 - C48084) * C8607 +
            (C48387 - C48386 + C48389 - C48388 + C48391 - C48390) * C82864 +
            (C80234 * C4976 - C82528 * C4981 + C80230 * C4975 - C82536 * C4979 +
             C80280 * C4974 - C44656 * C4977) *
                C8608 +
            (C80234 * C5454 - C82528 * C5457 + C80230 * C5455 - C82536 * C5458 +
             C80280 * C5456 - C44656 * C5459) *
                C82679) *
               C82639) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eezy[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C8607 +
            (C37887 * C551 - C37963 * C497 + C82639 * C1055 - C37964 * C1003) *
                C82864 +
            (C43819 - C43820 + C43821 - C43822) * C8608 +
            (C44475 - C44476 + C44477 - C44478) * C82679) *
               C82528 +
           ((C37966 - C37967 + C37968 - C37969) * C8607 +
            (C38430 - C38431 + C38432 - C38433) * C82864 +
            (C41884 - C41885 + C41886 - C41887) * C8608 +
            (C42534 - C42535 + C42536 - C42537) * C82679) *
               C82536 +
           ((C37974 - C37975 + C37976 - C37977) * C8607 +
            (C38434 - C38435 + C38436 - C38437) * C82864 +
            (C46955 - C46956 + C46957 - C46958) * C8608 +
            (C47565 - C47566 + C47567 - C47568) * C82679) *
               C44656) *
              C1149 +
          (((C43820 - C43819 + C43822 - C43821) * C8607 +
            (C44476 - C44475 + C44478 - C44477) * C82864 +
            (C43828 - C43827 + C43830 - C43829) * C8608 +
            (C44480 - C44479 + C44482 - C44481) * C82679) *
               C82528 +
           ((C41885 - C41884 + C41887 - C41886) * C8607 +
            (C42535 - C42534 + C42537 - C42536) * C82864 +
            (C41893 - C41892 + C41895 - C41894) * C8608 +
            (C42539 - C42538 + C42541 - C42540) * C82679) *
               C82536 +
           ((C46956 - C46955 + C46958 - C46957) * C8607 +
            (C47566 - C47565 + C47568 - C47567) * C82864 +
            (C37963 * C4110 - C37887 * C4200 + C37964 * C4974 -
             C82639 * C5062) *
                C8608 +
            (C37963 * C4685 - C37887 * C4767 + C37964 * C5456 -
             C82639 * C5536) *
                C82679) *
               C44656) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eezz[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
             C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
                C37887 +
            (C12270 + C12271) * C82639) *
               C82528 +
           ((C9089 + C9090) * C37887 + (C11321 + C11322) * C82639) * C82536 +
           ((C9091 + C9092) * C37887 + (C11323 + C11324) * C82639) * C44656) *
              C1149 -
          (((C8608 * C5142 - C9051 * C4974 - C8608 * C5456 + C82679 * C5611 +
             C8607 * C3529 - C9050 * C3346 - C8607 * C3861 + C82864 * C4026) *
                C82639 +
            (C8608 * C4301 - C9051 * C4110 - C8608 * C4685 + C82679 * C4856 +
             C8607 * C1267 - C9050 * C1153 - C8607 * C1465 + C82864 * C1564) *
                C37887) *
               C44656 +
           ((C8608 * C5141 - C9051 * C4975 - C8608 * C5455 + C82679 * C5612 +
             C8607 * C3528 - C9050 * C3347 - C8607 * C3860 + C82864 * C4028) *
                C82639 +
            (C8608 * C4300 - C9051 * C4109 - C8608 * C4684 + C82679 * C4855 +
             C8607 * C1266 - C9050 * C1154 - C8607 * C1464 + C82864 * C1565) *
                C37887) *
               C82536 +
           ((C8608 * C5140 - C9051 * C4976 - C8608 * C5454 + C82679 * C5613 +
             C8607 * C3527 - C9050 * C3348 - C8607 * C3859 + C82864 * C4030) *
                C82639 +
            (C8608 * C4299 - C9051 * C4108 - C8608 * C4683 + C82679 * C4854 +
             C8607 * C1265 - C9050 * C1155 - C8607 * C1463 + C82864 * C1566) *
                C37887) *
               C82528) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eexx[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C37889 * C108 - C37890 * C102 - C37889 * C109 + C82937 * C120 +
            C37891 * C110 - C37892 * C103 - C37891 * C111 + C82927 * C121 +
            C37893 * C112 - C37894 * C104 - C37893 * C113 + C82911 * C122 +
            C37895 * C114 - C37896 * C105 - C37895 * C115 + C82862 * C123) *
               C82592 * C37887 +
           (C37889 * C704 - C37890 * C695 - C37889 * C705 + C82937 * C710 +
            C37891 * C702 - C37892 * C694 - C37891 * C703 + C82927 * C709 +
            C37893 * C700 - C37894 * C693 - C37893 * C701 + C82911 * C708 +
            C37895 * C698 - C37896 * C692 - C37895 * C699 + C82862 * C707) *
               C82592 * C82639) *
              C82938 * C82939 * C90 -
          ((C37895 * C696 - C37896 * C691 - C37895 * C697 + C82862 * C706 +
            C37893 * C698 - C37894 * C692 - C37893 * C699 + C82911 * C707 +
            C37891 * C700 - C37892 * C693 - C37891 * C701 + C82927 * C708 +
            C37889 * C702 - C37890 * C694 - C37889 * C703 + C82937 * C709) *
               C82592 * C82639 +
           (C37895 * C116 - C37896 * C106 - C37895 * C117 + C82862 * C124 +
            C37893 * C114 - C37894 * C105 - C37893 * C115 + C82911 * C123 +
            C37891 * C112 - C37892 * C104 - C37891 * C113 + C82927 * C122 +
            C37889 * C110 - C37890 * C103 - C37889 * C111 + C82937 * C121) *
               C82592 * C37887) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C39825 * C108 - C39826 * C102 - C39825 * C109 + C39819 * C120 +
            C39827 * C110 - C39828 * C103 - C39827 * C111 + C82533 * C121) *
               C82592 * C82941 +
           (C39825 * C704 - C39826 * C695 - C39825 * C705 + C39819 * C710 +
            C39827 * C702 - C39828 * C694 - C39827 * C703 + C82533 * C709) *
               C82592 * C82934 +
           (C39825 * C1657 - C39826 * C1653 - C39825 * C1658 + C39819 * C1665 +
            C39827 * C1659 - C39828 * C1654 - C39827 * C1660 + C82533 * C1666) *
               C82592 * C82921 +
           (C39825 * C2532 - C39826 * C2527 - C39825 * C2533 + C39819 * C2536 +
            C39827 * C2530 - C39828 * C2526 - C39827 * C2531 + C82533 * C2535) *
               C82592 * C82871) *
              C82938 * C82939 * C90 -
          ((C39827 * C2528 - C39828 * C2525 - C39827 * C2529 + C82533 * C2534 +
            C39825 * C2530 - C39826 * C2526 - C39825 * C2531 + C39819 * C2535) *
               C82592 * C82871 +
           (C39827 * C1661 - C39828 * C1655 - C39827 * C1662 + C82533 * C1667 +
            C39825 * C1659 - C39826 * C1654 - C39825 * C1660 + C39819 * C1666) *
               C82592 * C82921 +
           (C39827 * C700 - C39828 * C693 - C39827 * C701 + C82533 * C708 +
            C39825 * C702 - C39826 * C694 - C39825 * C703 + C39819 * C709) *
               C82592 * C82934 +
           (C39827 * C112 - C39828 * C104 - C39827 * C113 + C82533 * C122 +
            C39825 * C110 - C39826 * C103 - C39825 * C111 + C39819 * C121) *
               C82592 * C82941) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
               C37889 +
           (C37887 * C175 - C37963 * C109 + C82639 * C758 - C37964 * C705) *
               C82937 +
           (C37966 - C37967 + C37968 - C37969) * C37891 +
           (C37970 - C37971 + C37972 - C37973) * C82927 +
           (C37974 - C37975 + C37976 - C37977) * C37893 +
           (C37978 - C37979 + C37980 - C37981) * C82911 +
           (C37982 - C37983 + C37984 - C37985) * C37895 +
           (C37986 - C37987 + C37988 - C37989) * C82862) *
              C82592 * C82938 * C82939 * C90 +
          ((C37967 - C37966 + C37969 - C37968) * C37889 +
           (C37971 - C37970 + C37973 - C37972) * C82937 +
           (C37975 - C37974 + C37977 - C37976) * C37891 +
           (C37979 - C37978 + C37981 - C37980) * C82927 +
           (C37983 - C37982 + C37985 - C37984) * C37893 +
           (C37987 - C37986 + C37989 - C37988) * C82911 +
           (C37963 * C106 - C37887 * C173 + C37964 * C691 - C82639 * C757) *
               C37895 +
           (C37963 * C117 - C37887 * C179 + C37964 * C697 - C82639 * C762) *
               C82862) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C82941 * C169 - C39895 * C102 + C82934 * C753 - C39896 * C695 +
            C82921 * C1746 - C39897 * C1653 + C82871 * C2653 - C39898 * C2527) *
               C39825 +
           (C82941 * C175 - C39895 * C109 + C82934 * C758 - C39896 * C705 +
            C82921 * C1750 - C39897 * C1658 + C82871 * C2656 - C39898 * C2533) *
               C39819 +
           (C39900 - C39901 + C39902 - C39903 + C39904 - C39905 + C39906 -
            C39907) *
               C39827 +
           (C39908 - C39909 + C39910 - C39911 + C39912 - C39913 + C39914 -
            C39915) *
               C82533) *
              C82592 * C82938 * C82939 * C90 +
          ((C39901 - C39900 + C39903 - C39902 + C39905 - C39904 + C39907 -
            C39906) *
               C39825 +
           (C39909 - C39908 + C39911 - C39910 + C39913 - C39912 + C39915 -
            C39914) *
               C39819 +
           (C39895 * C104 - C82941 * C171 + C39896 * C693 - C82934 * C755 +
            C39897 * C1655 - C82921 * C1748 + C39898 * C2525 - C82871 * C2655) *
               C39827 +
           (C39895 * C113 - C82941 * C177 + C39896 * C701 - C82934 * C760 +
            C39897 * C1662 - C82921 * C1752 + C39898 * C2529 - C82871 * C2658) *
               C82533) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[12] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C37889 +
                      (C82592 * C246 - C239 * C109) * C82937 +
                      (C253 - C254) * C37891 + (C255 - C256) * C82927 +
                      (C257 - C258) * C37893 + (C259 - C260) * C82911 +
                      (C261 - C262) * C37895 + (C263 - C264) * C82862) *
                         C37887 +
                     ((C2740 - C2741) * C37889 + (C2742 - C2743) * C82937 +
                      (C1861 - C1862) * C37891 + (C1863 - C1864) * C82927 +
                      (C1865 - C1866) * C37893 + (C1867 - C1868) * C82911 +
                      (C6677 - C6678) * C37895 + (C6679 - C6680) * C82862) *
                         C82639) *
                        C82938 * C82939 * C90 +
                    (((C254 - C253) * C37889 + (C256 - C255) * C82937 +
                      (C258 - C257) * C37891 + (C260 - C259) * C82927 +
                      (C262 - C261) * C37893 + (C264 - C263) * C82911 +
                      (C266 - C265) * C37895 + (C268 - C267) * C82862) *
                         C37887 +
                     ((C1862 - C1861) * C37889 + (C1864 - C1863) * C82937 +
                      (C1866 - C1865) * C37891 + (C1868 - C1867) * C82927 +
                      (C6678 - C6677) * C37893 + (C6680 - C6679) * C82911 +
                      (C239 * C691 - C82592 * C809) * C37895 +
                      (C239 * C697 - C82592 * C814) * C82862) *
                         C82639) *
                        C82938 * C82939 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C39825 +
                      (C82592 * C246 - C239 * C109) * C39819 +
                      (C253 - C254) * C39827 + (C255 - C256) * C82533) *
                         C82941 +
                     ((C2740 - C2741) * C39825 + (C2742 - C2743) * C39819 +
                      (C1861 - C1862) * C39827 + (C1863 - C1864) * C82533) *
                         C82934 +
                     ((C2744 - C2745) * C39825 + (C2746 - C2747) * C39819 +
                      (C1869 - C1870) * C39827 + (C1871 - C1872) * C82533) *
                         C82921 +
                     ((C15952 - C15953) * C39825 + (C15954 - C15955) * C39819 +
                      (C19218 - C19219) * C39827 + (C19220 - C19221) * C82533) *
                         C82871) *
                        C82938 * C82939 * C90 +
                    (((C254 - C253) * C39825 + (C256 - C255) * C39819 +
                      (C258 - C257) * C39827 + (C260 - C259) * C82533) *
                         C82941 +
                     ((C1862 - C1861) * C39825 + (C1864 - C1863) * C39819 +
                      (C1866 - C1865) * C39827 + (C1868 - C1867) * C82533) *
                         C82934 +
                     ((C1870 - C1869) * C39825 + (C1872 - C1871) * C39819 +
                      (C1874 - C1873) * C39827 + (C1876 - C1875) * C82533) *
                         C82921 +
                     ((C19219 - C19218) * C39825 + (C19221 - C19220) * C39819 +
                      (C239 * C2525 - C82592 * C2735) * C39827 +
                      (C239 * C2529 - C82592 * C2738) * C82533) *
                         C82871) *
                        C82938 * C82939 * C91)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C82937 * C108 - C37889 * C102 + C82927 * C110 - C37891 * C103 +
            C82911 * C112 - C37893 * C104 + C82862 * C114 - C37895 * C105) *
               C37963 +
           (C82937 * C316 - C37889 * C310 + C82927 * C317 - C37891 * C311 +
            C82911 * C318 - C37893 * C312 + C82862 * C319 - C37895 * C313) *
               C37887 +
           (C82937 * C704 - C37889 * C695 + C82927 * C702 - C37891 * C694 +
            C82911 * C700 - C37893 * C693 + C82862 * C698 - C37895 * C692) *
               C37964 +
           (C82937 * C862 - C37889 * C857 + C82927 * C863 - C37891 * C858 +
            C82911 * C864 - C37893 * C859 + C82862 * C865 - C37895 * C860) *
               C82639) *
              C82592 * C82938 * C82939 * C90 +
          ((C37889 * C103 - C82937 * C110 + C37891 * C104 - C82927 * C112 +
            C37893 * C105 - C82911 * C114 + C37895 * C106 - C82862 * C116) *
               C37963 +
           (C37889 * C311 - C82937 * C317 + C37891 * C312 - C82927 * C318 +
            C37893 * C313 - C82911 * C319 + C37895 * C314 - C82862 * C320) *
               C37887 +
           (C37889 * C694 - C82937 * C702 + C37891 * C693 - C82927 * C700 +
            C37893 * C692 - C82911 * C698 + C37895 * C691 - C82862 * C696) *
               C37964 +
           (C37889 * C858 - C82937 * C863 + C37891 * C859 - C82927 * C864 +
            C37893 * C860 - C82911 * C865 + C37895 * C861 - C82862 * C866) *
               C82639) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
               C39895 +
           (C39819 * C316 - C39825 * C310 + C82533 * C317 - C39827 * C311) *
               C82941 +
           (C39819 * C704 - C39825 * C695 + C82533 * C702 - C39827 * C694) *
               C39896 +
           (C39819 * C862 - C39825 * C857 + C82533 * C863 - C39827 * C858) *
               C82934 +
           (C39819 * C1657 - C39825 * C1653 + C82533 * C1659 - C39827 * C1654) *
               C39897 +
           (C39819 * C1954 - C39825 * C1950 + C82533 * C1955 - C39827 * C1951) *
               C82921 +
           (C39819 * C2532 - C39825 * C2527 + C82533 * C2530 - C39827 * C2526) *
               C39898 +
           (C39819 * C2824 - C39825 * C2821 + C82533 * C2825 - C39827 * C2822) *
               C82871) *
              C82592 * C82938 * C82939 * C90 +
          ((C39825 * C103 - C39819 * C110 + C39827 * C104 - C82533 * C112) *
               C39895 +
           (C39825 * C311 - C39819 * C317 + C39827 * C312 - C82533 * C318) *
               C82941 +
           (C39825 * C694 - C39819 * C702 + C39827 * C693 - C82533 * C700) *
               C39896 +
           (C39825 * C858 - C39819 * C863 + C39827 * C859 - C82533 * C864) *
               C82934 +
           (C39825 * C1654 - C39819 * C1659 + C39827 * C1655 - C82533 * C1661) *
               C39897 +
           (C39825 * C1951 - C39819 * C1955 + C39827 * C1952 - C82533 * C1956) *
               C82921 +
           (C39825 * C2526 - C39819 * C2530 + C39827 * C2525 - C82533 * C2528) *
               C39898 +
           (C39825 * C2822 - C39819 * C2825 + C39827 * C2823 - C82533 * C2826) *
               C82871) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C37963 * C169 - C38187 * C102 - C37963 * C310 + C37887 * C365 +
            C37964 * C753 - C38188 * C695 - C37964 * C857 + C82639 * C913) *
               C82937 +
           (C38226 + C38227) * C82927 + (C38228 + C38229) * C82911 +
           (C38230 + C38231) * C82862) *
              C82592 * C82938 * C82939 * C90 -
          ((C37964 * C757 - C38188 * C691 - C37964 * C861 + C82639 * C909 +
            C37963 * C173 - C38187 * C106 - C37963 * C314 + C37887 * C369) *
               C82862 +
           (C38231 + C38230) * C82911 + (C38229 + C38228) * C82927 +
           (C38227 + C38226) * C82937) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C39895 * C169 - C40113 * C102 - C39895 * C310 + C82941 * C365 +
            C39896 * C753 - C40114 * C695 - C39896 * C857 + C82934 * C913 +
            C39897 * C1746 - C40115 * C1653 - C39897 * C1950 + C82921 * C2035 +
            C39898 * C2653 - C40116 * C2527 - C39898 * C2821 + C82871 * C2927) *
               C39819 +
           (C40142 + C40143 + C40144 + C40145) * C82533) *
              C82592 * C82938 * C82939 * C90 -
          ((C39898 * C2655 - C40116 * C2525 - C39898 * C2823 + C82871 * C2925 +
            C39897 * C1748 - C40115 * C1655 - C39897 * C1952 + C82921 * C2037 +
            C39896 * C755 - C40114 * C693 - C39896 * C859 + C82934 * C911 +
            C39895 * C171 - C40113 * C104 - C39895 * C312 + C82941 * C367) *
               C82533 +
           (C40145 + C40144 + C40143 + C40142) * C39819) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[12] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C37963 +
                      (C82592 * C441 - C239 * C310) * C37887 +
                      (C2740 - C2741) * C37964 + (C3006 - C3007) * C82639) *
                         C82937 +
                     ((C253 - C254) * C37963 + (C448 - C449) * C37887 +
                      (C1861 - C1862) * C37964 + (C2160 - C2161) * C82639) *
                         C82927 +
                     ((C257 - C258) * C37963 + (C450 - C451) * C37887 +
                      (C1865 - C1866) * C37964 + (C2164 - C2165) * C82639) *
                         C82911 +
                     ((C261 - C262) * C37963 + (C452 - C453) * C37887 +
                      (C6677 - C6678) * C37964 + (C6923 - C6924) * C82639) *
                         C82862) *
                        C82938 * C82939 * C90 +
                    (((C254 - C253) * C37963 + (C449 - C448) * C37887 +
                      (C1862 - C1861) * C37964 + (C2161 - C2160) * C82639) *
                         C82937 +
                     ((C258 - C257) * C37963 + (C451 - C450) * C37887 +
                      (C1866 - C1865) * C37964 + (C2165 - C2164) * C82639) *
                         C82927 +
                     ((C262 - C261) * C37963 + (C453 - C452) * C37887 +
                      (C6678 - C6677) * C37964 + (C6924 - C6923) * C82639) *
                         C82911 +
                     ((C266 - C265) * C37963 + (C455 - C454) * C37887 +
                      (C239 * C691 - C82592 * C809) * C37964 +
                      (C239 * C861 - C82592 * C960) * C82639) *
                         C82862) *
                        C82938 * C82939 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C39895 +
                      (C82592 * C441 - C239 * C310) * C82941 +
                      (C2740 - C2741) * C39896 + (C3006 - C3007) * C82934 +
                      (C2744 - C2745) * C39897 + (C3008 - C3009) * C82921 +
                      (C15952 - C15953) * C39898 + (C16106 - C16107) * C82871) *
                         C39819 +
                     ((C253 - C254) * C39895 + (C448 - C449) * C82941 +
                      (C1861 - C1862) * C39896 + (C2160 - C2161) * C82934 +
                      (C1869 - C1870) * C39897 + (C2162 - C2163) * C82921 +
                      (C19218 - C19219) * C39898 + (C19452 - C19453) * C82871) *
                         C82533) *
                        C82938 * C82939 * C90 +
                    (((C254 - C253) * C39895 + (C449 - C448) * C82941 +
                      (C1862 - C1861) * C39896 + (C2161 - C2160) * C82934 +
                      (C1870 - C1869) * C39897 + (C2163 - C2162) * C82921 +
                      (C19219 - C19218) * C39898 + (C19453 - C19452) * C82871) *
                         C39819 +
                     ((C258 - C257) * C39895 + (C451 - C450) * C82941 +
                      (C1866 - C1865) * C39896 + (C2165 - C2164) * C82934 +
                      (C1874 - C1873) * C39897 + (C2167 - C2166) * C82921 +
                      (C239 * C2525 - C82592 * C2735) * C39898 +
                      (C239 * C2823 - C82592 * C3004) * C82871) *
                         C82533) *
                        C82938 * C82939 * C91)) /
                      (p * q * std::sqrt(p + q));
    d2eezx[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82937 * C108 - C37889 * C102 + C82927 * C110 - C37891 * C103 +
             C82911 * C112 - C37893 * C104 + C82862 * C114 - C37895 * C105) *
                C239 +
            (C82937 * C503 - C37889 * C497 + C82927 * C504 - C37891 * C498 +
             C82911 * C505 - C37893 * C499 + C82862 * C506 - C37895 * C500) *
                C82592) *
               C37887 +
           ((C82937 * C704 - C37889 * C695 + C82927 * C702 - C37891 * C694 +
             C82911 * C700 - C37893 * C693 + C82862 * C698 - C37895 * C692) *
                C239 +
            (C82937 * C1008 - C37889 * C1003 + C82927 * C1009 - C37891 * C1004 +
             C82911 * C1010 - C37893 * C1005 + C82862 * C1011 -
             C37895 * C1006) *
                C82592) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C37889 * C103 - C82937 * C110 + C37891 * C104 - C82927 * C112 +
             C37893 * C105 - C82911 * C114 + C37895 * C106 - C82862 * C116) *
                C239 +
            (C37889 * C498 - C82937 * C504 + C37891 * C499 - C82927 * C505 +
             C37893 * C500 - C82911 * C506 + C37895 * C501 - C82862 * C507) *
                C82592) *
               C37887 +
           ((C37889 * C694 - C82937 * C702 + C37891 * C693 - C82927 * C700 +
             C37893 * C692 - C82911 * C698 + C37895 * C691 - C82862 * C696) *
                C239 +
            (C37889 * C1004 - C82937 * C1009 + C37891 * C1005 - C82927 * C1010 +
             C37893 * C1006 - C82911 * C1011 + C37895 * C1007 -
             C82862 * C1012) *
                C82592) *
               C82639) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C239 +
            (C39819 * C503 - C39825 * C497 + C82533 * C504 - C39827 * C498) *
                C82592) *
               C82941 +
           ((C39819 * C704 - C39825 * C695 + C82533 * C702 - C39827 * C694) *
                C239 +
            (C39819 * C1008 - C39825 * C1003 + C82533 * C1009 -
             C39827 * C1004) *
                C82592) *
               C82934 +
           ((C39819 * C1657 - C39825 * C1653 + C82533 * C1659 -
             C39827 * C1654) *
                C239 +
            (C39819 * C2245 - C39825 * C2241 + C82533 * C2246 -
             C39827 * C2242) *
                C82592) *
               C82921 +
           ((C39819 * C2532 - C39825 * C2527 + C82533 * C2530 -
             C39827 * C2526) *
                C239 +
            (C39819 * C3086 - C39825 * C3083 + C82533 * C3087 -
             C39827 * C3084) *
                C82592) *
               C82871) *
              C82938 * C82939 * C90 +
          (((C39825 * C103 - C39819 * C110 + C39827 * C104 - C82533 * C112) *
                C239 +
            (C39825 * C498 - C39819 * C504 + C39827 * C499 - C82533 * C505) *
                C82592) *
               C82941 +
           ((C39825 * C694 - C39819 * C702 + C39827 * C693 - C82533 * C700) *
                C239 +
            (C39825 * C1004 - C39819 * C1009 + C39827 * C1005 -
             C82533 * C1010) *
                C82592) *
               C82934 +
           ((C39825 * C1654 - C39819 * C1659 + C39827 * C1655 -
             C82533 * C1661) *
                C239 +
            (C39825 * C2242 - C39819 * C2246 + C39827 * C2243 -
             C82533 * C2247) *
                C82592) *
               C82921 +
           ((C39825 * C2526 - C39819 * C2530 + C39827 * C2525 -
             C82533 * C2528) *
                C239 +
            (C39825 * C3084 - C39819 * C3087 + C39827 * C3085 -
             C82533 * C3088) *
                C82592) *
               C82871) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C239 +
            (C37887 * C551 - C37963 * C497 + C82639 * C1055 - C37964 * C1003) *
                C82592) *
               C82937 +
           ((C37966 - C37967 + C37968 - C37969) * C239 +
            (C38430 - C38431 + C38432 - C38433) * C82592) *
               C82927 +
           ((C37974 - C37975 + C37976 - C37977) * C239 +
            (C38434 - C38435 + C38436 - C38437) * C82592) *
               C82911 +
           ((C37982 - C37983 + C37984 - C37985) * C239 +
            (C38438 - C38439 + C38440 - C38441) * C82592) *
               C82862) *
              C82938 * C82939 * C90 +
          (((C37967 - C37966 + C37969 - C37968) * C239 +
            (C38431 - C38430 + C38433 - C38432) * C82592) *
               C82937 +
           ((C37975 - C37974 + C37977 - C37976) * C239 +
            (C38435 - C38434 + C38437 - C38436) * C82592) *
               C82927 +
           ((C37983 - C37982 + C37985 - C37984) * C239 +
            (C38439 - C38438 + C38441 - C38440) * C82592) *
               C82911 +
           ((C37963 * C106 - C37887 * C173 + C37964 * C691 - C82639 * C757) *
                C239 +
            (C37963 * C501 - C37887 * C555 + C37964 * C1007 - C82639 * C1059) *
                C82592) *
               C82862) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82941 * C169 - C39895 * C102 + C82934 * C753 - C39896 * C695 +
             C82921 * C1746 - C39897 * C1653 + C82871 * C2653 -
             C39898 * C2527) *
                C239 +
            (C82941 * C551 - C39895 * C497 + C82934 * C1055 - C39896 * C1003 +
             C82921 * C2323 - C39897 * C2241 + C82871 * C3175 -
             C39898 * C3083) *
                C82592) *
               C39819 +
           ((C39900 - C39901 + C39902 - C39903 + C39904 - C39905 + C39906 -
             C39907) *
                C239 +
            (C40344 - C40345 + C40346 - C40347 + C40348 - C40349 + C40350 -
             C40351) *
                C82592) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C39901 - C39900 + C39903 - C39902 + C39905 - C39904 + C39907 -
             C39906) *
                C239 +
            (C40345 - C40344 + C40347 - C40346 + C40349 - C40348 + C40351 -
             C40350) *
                C82592) *
               C39819 +
           ((C39895 * C104 - C82941 * C171 + C39896 * C693 - C82934 * C755 +
             C39897 * C1655 - C82921 * C1748 + C39898 * C2525 -
             C82871 * C2655) *
                C239 +
            (C39895 * C499 - C82941 * C553 + C39896 * C1005 - C82934 * C1057 +
             C39897 * C2243 - C82921 * C2325 + C39898 * C3085 -
             C82871 * C3177) *
                C82592) *
               C82533) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C37887 +
            C3268 * C82639) *
               C82937 +
           (C38508 + C38509) * C82927 + (C38510 + C38511) * C82911 +
           (C38512 + C38513) * C82862) *
              C82938 * C82939 * C90 -
          (((C239 * C809 - C607 * C691 - C239 * C1007 + C82592 * C1102) *
                C82639 +
            C642 * C37887) *
               C82862 +
           (C38513 + C38512) * C82911 + (C38511 + C38510) * C82927 +
           (C38509 + C38508) * C82937) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82941 +
            C3268 * C82934 + C3269 * C82921 + C16260 * C82871) *
               C39819 +
           (C40418 + C40419 + C40420 + C40421) * C82533) *
              C82938 * C82939 * C90 -
          (((C239 * C2735 - C607 * C2525 - C239 * C3085 + C82592 * C3252) *
                C82871 +
            C2447 * C82921 + C2446 * C82934 + C640 * C82941) *
               C82533 +
           (C40421 + C40420 + C40419 + C40418) * C39819) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexx[13] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C37889 * C108 - C37890 * C102 - C37889 * C109 + C82937 * C120 +
            C37891 * C110 - C37892 * C103 - C37891 * C111 + C82927 * C121 +
            C37893 * C112 - C37894 * C104 - C37893 * C113 + C82911 * C122 +
            C37895 * C114 - C37896 * C105 - C37895 * C115 + C82862 * C123) *
               C82592 * C37887 +
           (C38604 + C38605 + C38606 + C38607) * C82592 * C82639) *
              C82938 * C688 -
          ((C37895 * C1663 - C37896 * C1656 - C37895 * C1664 + C82862 * C1668 +
            C37893 * C1661 - C37894 * C1655 - C37893 * C1662 + C82911 * C1667 +
            C37891 * C1659 - C37892 * C1654 - C37891 * C1660 + C82927 * C1666 +
            C37889 * C1657 - C37890 * C1653 - C37889 * C1658 + C82937 * C1665) *
               C82592 * C82639 +
           (C38607 + C38606 + C38605 + C38604) * C82592 * C37887) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C39825 * C108 - C39826 * C102 - C39825 * C109 + C39819 * C120 +
            C39827 * C110 - C39828 * C103 - C39827 * C111 + C82533 * C121) *
               C82592 * C82941 +
           (C40524 + C40525) * C82592 * C82934 +
           (C40526 + C40527) * C82592 * C82921 +
           (C40528 + C40529) * C82592 * C82871) *
              C82938 * C688 -
          ((C39827 * C15411 - C39828 * C15408 - C39827 * C15412 +
            C82533 * C15414 + C39825 * C15409 - C39826 * C15407 -
            C39825 * C15410 + C39819 * C15413) *
               C82592 * C82871 +
           (C40529 + C40528) * C82592 * C82921 +
           (C40527 + C40526) * C82592 * C82934 +
           (C40525 + C40524) * C82592 * C82941) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[13] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
               C37889 +
           (C37887 * C175 - C37963 * C109 + C82639 * C758 - C37964 * C705) *
               C82937 +
           (C37966 - C37967 + C37968 - C37969) * C37891 +
           (C37970 - C37971 + C37972 - C37973) * C82927 +
           (C37974 - C37975 + C37976 - C37977) * C37893 +
           (C37978 - C37979 + C37980 - C37981) * C82911 +
           (C37982 - C37983 + C37984 - C37985) * C37895 +
           (C37986 - C37987 + C37988 - C37989) * C82862) *
              C82592 * C82938 * C688 +
          ((C37963 * C695 - C37887 * C753 + C37964 * C1653 - C82639 * C1746) *
               C37889 +
           (C37963 * C705 - C37887 * C758 + C37964 * C1658 - C82639 * C1750) *
               C82937 +
           (C37963 * C694 - C37887 * C754 + C37964 * C1654 - C82639 * C1747) *
               C37891 +
           (C37963 * C703 - C37887 * C759 + C37964 * C1660 - C82639 * C1751) *
               C82927 +
           (C37963 * C693 - C37887 * C755 + C37964 * C1655 - C82639 * C1748) *
               C37893 +
           (C37963 * C701 - C37887 * C760 + C37964 * C1662 - C82639 * C1752) *
               C82911 +
           (C37963 * C692 - C37887 * C756 + C37964 * C1656 - C82639 * C1749) *
               C37895 +
           (C37963 * C699 - C37887 * C761 + C37964 * C1664 - C82639 * C1753) *
               C82862) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C82941 * C169 - C39895 * C102 + C82934 * C753 - C39896 * C695 +
            C82921 * C1746 - C39897 * C1653 + C82871 * C2653 - C39898 * C2527) *
               C39825 +
           (C82941 * C175 - C39895 * C109 + C82934 * C758 - C39896 * C705 +
            C82921 * C1750 - C39897 * C1658 + C82871 * C2656 - C39898 * C2533) *
               C39819 +
           (C39900 - C39901 + C39902 - C39903 + C39904 - C39905 + C39906 -
            C39907) *
               C39827 +
           (C39908 - C39909 + C39910 - C39911 + C39912 - C39913 + C39914 -
            C39915) *
               C82533) *
              C82592 * C82938 * C688 +
          ((C39895 * C695 - C82941 * C753 + C39896 * C1653 - C82934 * C1746 +
            C39897 * C2527 - C82921 * C2653 + C39898 * C15407 -
            C82871 * C15462) *
               C39825 +
           (C39895 * C705 - C82941 * C758 + C39896 * C1658 - C82934 * C1750 +
            C39897 * C2533 - C82921 * C2656 + C39898 * C15410 -
            C82871 * C15464) *
               C39819 +
           (C39895 * C694 - C82941 * C754 + C39896 * C1654 - C82934 * C1747 +
            C39897 * C2526 - C82921 * C2654 + C39898 * C15408 -
            C82871 * C15463) *
               C39827 +
           (C39895 * C703 - C82941 * C759 + C39896 * C1660 - C82934 * C1751 +
            C39897 * C2531 - C82921 * C2657 + C39898 * C15412 -
            C82871 * C15465) *
               C82533) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[13] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C37889 +
                      (C82592 * C246 - C239 * C109) * C82937 +
                      (C253 - C254) * C37891 + (C255 - C256) * C82927 +
                      (C257 - C258) * C37893 + (C259 - C260) * C82911 +
                      (C261 - C262) * C37895 + (C263 - C264) * C82862) *
                         C37887 +
                     ((C2740 - C2741) * C37889 + (C2742 - C2743) * C82937 +
                      (C1861 - C1862) * C37891 + (C1863 - C1864) * C82927 +
                      (C1865 - C1866) * C37893 + (C1867 - C1868) * C82911 +
                      (C6677 - C6678) * C37895 + (C6679 - C6680) * C82862) *
                         C82639) *
                        C82938 * C688 +
                    (((C2741 - C2740) * C37889 + (C2743 - C2742) * C82937 +
                      (C1862 - C1861) * C37891 + (C1864 - C1863) * C82927 +
                      (C1866 - C1865) * C37893 + (C1868 - C1867) * C82911 +
                      (C6678 - C6677) * C37895 + (C6680 - C6679) * C82862) *
                         C37887 +
                     ((C2745 - C2744) * C37889 + (C2747 - C2746) * C82937 +
                      (C1870 - C1869) * C37891 + (C1872 - C1871) * C82927 +
                      (C1874 - C1873) * C37893 + (C1876 - C1875) * C82911 +
                      (C239 * C1656 - C82592 * C1855) * C37895 +
                      (C239 * C1664 - C82592 * C1859) * C82862) *
                         C82639) *
                        C82938 * C689) *
                   C82940) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C39825 +
                      (C82592 * C246 - C239 * C109) * C39819 +
                      (C253 - C254) * C39827 + (C255 - C256) * C82533) *
                         C82941 +
                     ((C2740 - C2741) * C39825 + (C2742 - C2743) * C39819 +
                      (C1861 - C1862) * C39827 + (C1863 - C1864) * C82533) *
                         C82934 +
                     ((C2744 - C2745) * C39825 + (C2746 - C2747) * C39819 +
                      (C1869 - C1870) * C39827 + (C1871 - C1872) * C82533) *
                         C82921 +
                     ((C15952 - C15953) * C39825 + (C15954 - C15955) * C39819 +
                      (C19218 - C19219) * C39827 + (C19220 - C19221) * C82533) *
                         C82871) *
                        C82938 * C688 +
                    (((C2741 - C2740) * C39825 + (C2743 - C2742) * C39819 +
                      (C1862 - C1861) * C39827 + (C1864 - C1863) * C82533) *
                         C82941 +
                     ((C2745 - C2744) * C39825 + (C2747 - C2746) * C39819 +
                      (C1870 - C1869) * C39827 + (C1872 - C1871) * C82533) *
                         C82934 +
                     ((C15953 - C15952) * C39825 + (C15955 - C15954) * C39819 +
                      (C19219 - C19218) * C39827 + (C19221 - C19220) * C82533) *
                         C82921 +
                     ((C15957 - C15956) * C39825 + (C15959 - C15958) * C39819 +
                      (C239 * C15408 - C82592 * C15509) * C39827 +
                      (C239 * C15412 - C82592 * C15511) * C82533) *
                         C82871) *
                        C82938 * C689) *
                   C82940) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[13] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C82937 * C108 - C37889 * C102 + C82927 * C110 - C37891 * C103 +
            C82911 * C112 - C37893 * C104 + C82862 * C114 - C37895 * C105) *
               C37963 +
           (C82937 * C316 - C37889 * C310 + C82927 * C317 - C37891 * C311 +
            C82911 * C318 - C37893 * C312 + C82862 * C319 - C37895 * C313) *
               C37887 +
           (C38806 - C38807 + C38808 - C38809 + C38810 - C38811 + C38812 -
            C38813) *
               C37964 +
           (C38814 - C38815 + C38816 - C38817 + C38818 - C38819 + C38820 -
            C38821) *
               C82639) *
              C82592 * C82938 * C688 +
          ((C38807 - C38806 + C38809 - C38808 + C38811 - C38810 + C38813 -
            C38812) *
               C37963 +
           (C38815 - C38814 + C38817 - C38816 + C38819 - C38818 + C38821 -
            C38820) *
               C37887 +
           (C37889 * C1653 - C82937 * C1657 + C37891 * C1654 - C82927 * C1659 +
            C37893 * C1655 - C82911 * C1661 + C37895 * C1656 - C82862 * C1663) *
               C37964 +
           (C37889 * C1950 - C82937 * C1954 + C37891 * C1951 - C82927 * C1955 +
            C37893 * C1952 - C82911 * C1956 + C37895 * C1953 - C82862 * C1957) *
               C82639) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
               C39895 +
           (C39819 * C316 - C39825 * C310 + C82533 * C317 - C39827 * C311) *
               C82941 +
           (C40728 - C40729 + C40730 - C40731) * C39896 +
           (C40732 - C40733 + C40734 - C40735) * C82934 +
           (C40736 - C40737 + C40738 - C40739) * C39897 +
           (C40740 - C40741 + C40742 - C40743) * C82921 +
           (C40744 - C40745 + C40746 - C40747) * C39898 +
           (C40748 - C40749 + C40750 - C40751) * C82871) *
              C82592 * C82938 * C688 +
          ((C40729 - C40728 + C40731 - C40730) * C39895 +
           (C40733 - C40732 + C40735 - C40734) * C82941 +
           (C40737 - C40736 + C40739 - C40738) * C39896 +
           (C40741 - C40740 + C40743 - C40742) * C82934 +
           (C40745 - C40744 + C40747 - C40746) * C39897 +
           (C40749 - C40748 + C40751 - C40750) * C82921 +
           (C39825 * C15407 - C39819 * C15409 + C39827 * C15408 -
            C82533 * C15411) *
               C39898 +
           (C39825 * C15554 - C39819 * C15556 + C39827 * C15555 -
            C82533 * C15557) *
               C82871) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[13] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C37963 * C169 - C38187 * C102 - C37963 * C310 + C37887 * C365 +
            C37964 * C753 - C38188 * C695 - C37964 * C857 + C82639 * C913) *
               C82937 +
           (C38226 + C38227) * C82927 + (C38228 + C38229) * C82911 +
           (C38230 + C38231) * C82862) *
              C82592 * C82938 * C688 -
          ((C37964 * C1749 - C38188 * C1656 - C37964 * C1953 + C82639 * C2038 +
            C37963 * C756 - C38187 * C692 - C37963 * C860 + C37887 * C910) *
               C82862 +
           (C37964 * C1748 - C38188 * C1655 - C37964 * C1952 + C82639 * C2037 +
            C37963 * C755 - C38187 * C693 - C37963 * C859 + C37887 * C911) *
               C82911 +
           (C37964 * C1747 - C38188 * C1654 - C37964 * C1951 + C82639 * C2036 +
            C37963 * C754 - C38187 * C694 - C37963 * C858 + C37887 * C912) *
               C82927 +
           (C37964 * C1746 - C38188 * C1653 - C37964 * C1950 + C82639 * C2035 +
            C37963 * C753 - C38187 * C695 - C37963 * C857 + C37887 * C913) *
               C82937) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C39895 * C169 - C40113 * C102 - C39895 * C310 + C82941 * C365 +
            C39896 * C753 - C40114 * C695 - C39896 * C857 + C82934 * C913 +
            C39897 * C1746 - C40115 * C1653 - C39897 * C1950 + C82921 * C2035 +
            C39898 * C2653 - C40116 * C2527 - C39898 * C2821 + C82871 * C2927) *
               C39819 +
           (C40142 + C40143 + C40144 + C40145) * C82533) *
              C82592 * C82938 * C688 -
          ((C39898 * C15463 - C40116 * C15408 - C39898 * C15555 +
            C82871 * C15606 + C39897 * C2654 - C40115 * C2526 - C39897 * C2822 +
            C82921 * C2926 + C39896 * C1747 - C40114 * C1654 - C39896 * C1951 +
            C82934 * C2036 + C39895 * C754 - C40113 * C694 - C39895 * C858 +
            C82941 * C912) *
               C82533 +
           (C39898 * C15462 - C40116 * C15407 - C39898 * C15554 +
            C82871 * C15605 + C39897 * C2653 - C40115 * C2527 - C39897 * C2821 +
            C82921 * C2927 + C39896 * C1746 - C40114 * C1653 - C39896 * C1950 +
            C82934 * C2035 + C39895 * C753 - C40113 * C695 - C39895 * C857 +
            C82941 * C913) *
               C39819) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[13] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C37963 +
                      (C82592 * C441 - C239 * C310) * C37887 +
                      (C2740 - C2741) * C37964 + (C3006 - C3007) * C82639) *
                         C82937 +
                     ((C253 - C254) * C37963 + (C448 - C449) * C37887 +
                      (C1861 - C1862) * C37964 + (C2160 - C2161) * C82639) *
                         C82927 +
                     ((C257 - C258) * C37963 + (C450 - C451) * C37887 +
                      (C1865 - C1866) * C37964 + (C2164 - C2165) * C82639) *
                         C82911 +
                     ((C261 - C262) * C37963 + (C452 - C453) * C37887 +
                      (C6677 - C6678) * C37964 + (C6923 - C6924) * C82639) *
                         C82862) *
                        C82938 * C688 +
                    (((C2741 - C2740) * C37963 + (C3007 - C3006) * C37887 +
                      (C2745 - C2744) * C37964 + (C3009 - C3008) * C82639) *
                         C82937 +
                     ((C1862 - C1861) * C37963 + (C2161 - C2160) * C37887 +
                      (C1870 - C1869) * C37964 + (C2163 - C2162) * C82639) *
                         C82927 +
                     ((C1866 - C1865) * C37963 + (C2165 - C2164) * C37887 +
                      (C1874 - C1873) * C37964 + (C2167 - C2166) * C82639) *
                         C82911 +
                     ((C6678 - C6677) * C37963 + (C6924 - C6923) * C37887 +
                      (C239 * C1656 - C82592 * C1855) * C37964 +
                      (C239 * C1953 - C82592 * C2158) * C82639) *
                         C82862) *
                        C82938 * C689) *
                   C82940) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C39895 +
                      (C82592 * C441 - C239 * C310) * C82941 +
                      (C2740 - C2741) * C39896 + (C3006 - C3007) * C82934 +
                      (C2744 - C2745) * C39897 + (C3008 - C3009) * C82921 +
                      (C15952 - C15953) * C39898 + (C16106 - C16107) * C82871) *
                         C39819 +
                     ((C253 - C254) * C39895 + (C448 - C449) * C82941 +
                      (C1861 - C1862) * C39896 + (C2160 - C2161) * C82934 +
                      (C1869 - C1870) * C39897 + (C2162 - C2163) * C82921 +
                      (C19218 - C19219) * C39898 + (C19452 - C19453) * C82871) *
                         C82533) *
                        C82938 * C688 +
                    (((C2741 - C2740) * C39895 + (C3007 - C3006) * C82941 +
                      (C2745 - C2744) * C39896 + (C3009 - C3008) * C82934 +
                      (C15953 - C15952) * C39897 + (C16107 - C16106) * C82921 +
                      (C15957 - C15956) * C39898 + (C16109 - C16108) * C82871) *
                         C39819 +
                     ((C1862 - C1861) * C39895 + (C2161 - C2160) * C82941 +
                      (C1870 - C1869) * C39896 + (C2163 - C2162) * C82934 +
                      (C19219 - C19218) * C39897 + (C19453 - C19452) * C82921 +
                      (C239 * C15408 - C82592 * C15509) * C39898 +
                      (C239 * C15555 - C82592 * C15650) * C82871) *
                         C82533) *
                        C82938 * C689) *
                   C82940) /
                      (p * q * std::sqrt(p + q));
    d2eezx[13] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82937 * C108 - C37889 * C102 + C82927 * C110 - C37891 * C103 +
             C82911 * C112 - C37893 * C104 + C82862 * C114 - C37895 * C105) *
                C239 +
            (C82937 * C503 - C37889 * C497 + C82927 * C504 - C37891 * C498 +
             C82911 * C505 - C37893 * C499 + C82862 * C506 - C37895 * C500) *
                C82592) *
               C37887 +
           ((C38806 - C38807 + C38808 - C38809 + C38810 - C38811 + C38812 -
             C38813) *
                C239 +
            (C39020 - C39021 + C39022 - C39023 + C39024 - C39025 + C39026 -
             C39027) *
                C82592) *
               C82639) *
              C82938 * C688 +
          (((C38807 - C38806 + C38809 - C38808 + C38811 - C38810 + C38813 -
             C38812) *
                C239 +
            (C39021 - C39020 + C39023 - C39022 + C39025 - C39024 + C39027 -
             C39026) *
                C82592) *
               C37887 +
           ((C37889 * C1653 - C82937 * C1657 + C37891 * C1654 - C82927 * C1659 +
             C37893 * C1655 - C82911 * C1661 + C37895 * C1656 -
             C82862 * C1663) *
                C239 +
            (C37889 * C2241 - C82937 * C2245 + C37891 * C2242 - C82927 * C2246 +
             C37893 * C2243 - C82911 * C2247 + C37895 * C2244 -
             C82862 * C2248) *
                C82592) *
               C82639) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C239 +
            (C39819 * C503 - C39825 * C497 + C82533 * C504 - C39827 * C498) *
                C82592) *
               C82941 +
           ((C40728 - C40729 + C40730 - C40731) * C239 +
            (C40950 - C40951 + C40952 - C40953) * C82592) *
               C82934 +
           ((C40736 - C40737 + C40738 - C40739) * C239 +
            (C40954 - C40955 + C40956 - C40957) * C82592) *
               C82921 +
           ((C40744 - C40745 + C40746 - C40747) * C239 +
            (C40958 - C40959 + C40960 - C40961) * C82592) *
               C82871) *
              C82938 * C688 +
          (((C40729 - C40728 + C40731 - C40730) * C239 +
            (C40951 - C40950 + C40953 - C40952) * C82592) *
               C82941 +
           ((C40737 - C40736 + C40739 - C40738) * C239 +
            (C40955 - C40954 + C40957 - C40956) * C82592) *
               C82934 +
           ((C40745 - C40744 + C40747 - C40746) * C239 +
            (C40959 - C40958 + C40961 - C40960) * C82592) *
               C82921 +
           ((C39825 * C15407 - C39819 * C15409 + C39827 * C15408 -
             C82533 * C15411) *
                C239 +
            (C39825 * C15693 - C39819 * C15695 + C39827 * C15694 -
             C82533 * C15696) *
                C82592) *
               C82871) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[13] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C239 +
            (C37887 * C551 - C37963 * C497 + C82639 * C1055 - C37964 * C1003) *
                C82592) *
               C82937 +
           ((C37966 - C37967 + C37968 - C37969) * C239 +
            (C38430 - C38431 + C38432 - C38433) * C82592) *
               C82927 +
           ((C37974 - C37975 + C37976 - C37977) * C239 +
            (C38434 - C38435 + C38436 - C38437) * C82592) *
               C82911 +
           ((C37982 - C37983 + C37984 - C37985) * C239 +
            (C38438 - C38439 + C38440 - C38441) * C82592) *
               C82862) *
              C82938 * C688 +
          (((C37963 * C695 - C37887 * C753 + C37964 * C1653 - C82639 * C1746) *
                C239 +
            (C37963 * C1003 - C37887 * C1055 + C37964 * C2241 -
             C82639 * C2323) *
                C82592) *
               C82937 +
           ((C37963 * C694 - C37887 * C754 + C37964 * C1654 - C82639 * C1747) *
                C239 +
            (C37963 * C1004 - C37887 * C1056 + C37964 * C2242 -
             C82639 * C2324) *
                C82592) *
               C82927 +
           ((C37963 * C693 - C37887 * C755 + C37964 * C1655 - C82639 * C1748) *
                C239 +
            (C37963 * C1005 - C37887 * C1057 + C37964 * C2243 -
             C82639 * C2325) *
                C82592) *
               C82911 +
           ((C37963 * C692 - C37887 * C756 + C37964 * C1656 - C82639 * C1749) *
                C239 +
            (C37963 * C1006 - C37887 * C1058 + C37964 * C2244 -
             C82639 * C2326) *
                C82592) *
               C82862) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82941 * C169 - C39895 * C102 + C82934 * C753 - C39896 * C695 +
             C82921 * C1746 - C39897 * C1653 + C82871 * C2653 -
             C39898 * C2527) *
                C239 +
            (C82941 * C551 - C39895 * C497 + C82934 * C1055 - C39896 * C1003 +
             C82921 * C2323 - C39897 * C2241 + C82871 * C3175 -
             C39898 * C3083) *
                C82592) *
               C39819 +
           ((C39900 - C39901 + C39902 - C39903 + C39904 - C39905 + C39906 -
             C39907) *
                C239 +
            (C40344 - C40345 + C40346 - C40347 + C40348 - C40349 + C40350 -
             C40351) *
                C82592) *
               C82533) *
              C82938 * C688 +
          (((C39895 * C695 - C82941 * C753 + C39896 * C1653 - C82934 * C1746 +
             C39897 * C2527 - C82921 * C2653 + C39898 * C15407 -
             C82871 * C15462) *
                C239 +
            (C39895 * C1003 - C82941 * C1055 + C39896 * C2241 - C82934 * C2323 +
             C39897 * C3083 - C82921 * C3175 + C39898 * C15693 -
             C82871 * C15739) *
                C82592) *
               C39819 +
           ((C39895 * C694 - C82941 * C754 + C39896 * C1654 - C82934 * C1747 +
             C39897 * C2526 - C82921 * C2654 + C39898 * C15408 -
             C82871 * C15463) *
                C239 +
            (C39895 * C1004 - C82941 * C1056 + C39896 * C2242 - C82934 * C2324 +
             C39897 * C3084 - C82921 * C3176 + C39898 * C15694 -
             C82871 * C15740) *
                C82592) *
               C82533) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[13] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C37887 +
            C3268 * C82639) *
               C82937 +
           (C38508 + C38509) * C82927 + (C38510 + C38511) * C82911 +
           (C38512 + C38513) * C82862) *
              C82938 * C688 -
          (((C239 * C1855 - C607 * C1656 - C239 * C2244 + C82592 * C2416) *
                C82639 +
            C7146 * C37887) *
               C82862 +
           (C2447 * C82639 + C2446 * C37887) * C82911 +
           (C2445 * C82639 + C2444 * C37887) * C82927 +
           (C3269 * C82639 + C3268 * C37887) * C82937) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82941 +
            C3268 * C82934 + C3269 * C82921 + C16260 * C82871) *
               C39819 +
           (C40418 + C40419 + C40420 + C40421) * C82533) *
              C82938 * C688 -
          (((C239 * C15509 - C607 * C15408 - C239 * C15694 + C82592 * C15784) *
                C82871 +
            C19669 * C82921 + C2445 * C82934 + C2444 * C82941) *
               C82533 +
           (C16261 * C82871 + C16260 * C82921 + C3269 * C82934 +
            C3268 * C82941) *
               C39819) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C37889 * C108 - C37890 * C102 - C37889 * C109 + C82937 * C120 +
            C37891 * C110 - C37892 * C103 - C37891 * C111 + C82927 * C121 +
            C37893 * C112 - C37894 * C104 - C37893 * C113 + C82911 * C122 +
            C37895 * C114 - C37896 * C105 - C37895 * C115 + C82862 * C123) *
               C82592 * C37887 +
           (C38604 + C38605 + C38606 + C38607) * C82592 * C82639) *
              C1149 -
          ((C37895 * C7860 - C37896 * C7859 - C37895 * C7861 + C82862 * C7862 +
            C37893 * C3355 - C37894 * C3346 - C37893 * C3356 + C82911 * C3364 +
            C37891 * C3357 - C37892 * C3347 - C37891 * C3358 + C82927 * C3365 +
            C37889 * C3359 - C37890 * C3348 - C37889 * C3360 + C82937 * C3366) *
               C82592 * C82639 +
           (C37895 * C1158 - C37896 * C1152 - C37895 * C1159 + C82862 * C1167 +
            C37893 * C1160 - C37894 * C1153 - C37893 * C1161 + C82911 * C1168 +
            C37891 * C1162 - C37892 * C1154 - C37891 * C1163 + C82927 * C1169 +
            C37889 * C1164 - C37890 * C1155 - C37889 * C1165 + C82937 * C1170) *
               C82592 * C37887) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C39825 * C108 - C39826 * C102 - C39825 * C109 + C39819 * C120 +
            C39827 * C110 - C39828 * C103 - C39827 * C111 + C82533 * C121) *
               C82592 * C82941 +
           (C40524 + C40525) * C82592 * C82934 +
           (C40526 + C40527) * C82592 * C82921 +
           (C40528 + C40529) * C82592 * C82871) *
              C1149 -
          ((C39827 * C20409 - C39828 * C20408 - C39827 * C20410 +
            C82533 * C20411 + C39825 * C16307 - C39826 * C16304 -
            C39825 * C16308 + C39819 * C16310) *
               C82592 * C82871 +
           (C39827 * C3351 - C39828 * C3344 - C39827 * C3352 + C82533 * C3362 +
            C39825 * C3353 - C39826 * C3345 - C39825 * C3354 + C39819 * C3363) *
               C82592 * C82921 +
           (C39827 * C3357 - C39828 * C3347 - C39827 * C3358 + C82533 * C3365 +
            C39825 * C3359 - C39826 * C3348 - C39825 * C3360 + C39819 * C3366) *
               C82592 * C82934 +
           (C39827 * C1162 - C39828 * C1154 - C39827 * C1163 + C82533 * C1169 +
            C39825 * C1164 - C39826 * C1155 - C39825 * C1165 + C39819 * C1170) *
               C82592 * C82941) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
               C37889 +
           (C37887 * C175 - C37963 * C109 + C82639 * C758 - C37964 * C705) *
               C82937 +
           (C37966 - C37967 + C37968 - C37969) * C37891 +
           (C37970 - C37971 + C37972 - C37973) * C82927 +
           (C37974 - C37975 + C37976 - C37977) * C37893 +
           (C37978 - C37979 + C37980 - C37981) * C82911 +
           (C37982 - C37983 + C37984 - C37985) * C37895 +
           (C37986 - C37987 + C37988 - C37989) * C82862) *
              C82592 * C1149 +
          ((C37963 * C1155 - C37887 * C1213 + C37964 * C3348 - C82639 * C3441) *
               C37889 +
           (C37963 * C1165 - C37887 * C1218 + C37964 * C3360 - C82639 * C3447) *
               C82937 +
           (C37963 * C1154 - C37887 * C1214 + C37964 * C3347 - C82639 * C3443) *
               C37891 +
           (C37963 * C1163 - C37887 * C1219 + C37964 * C3358 - C82639 * C3449) *
               C82927 +
           (C37963 * C1153 - C37887 * C1215 + C37964 * C3346 - C82639 * C3445) *
               C37893 +
           (C37963 * C1161 - C37887 * C1220 + C37964 * C3356 - C82639 * C3451) *
               C82911 +
           (C37963 * C1152 - C37887 * C1216 + C37964 * C7859 - C82639 * C7929) *
               C37895 +
           (C37963 * C1159 - C37887 * C1221 + C37964 * C7861 - C82639 * C7930) *
               C82862) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C82941 * C169 - C39895 * C102 + C82934 * C753 - C39896 * C695 +
            C82921 * C1746 - C39897 * C1653 + C82871 * C2653 - C39898 * C2527) *
               C39825 +
           (C82941 * C175 - C39895 * C109 + C82934 * C758 - C39896 * C705 +
            C82921 * C1750 - C39897 * C1658 + C82871 * C2656 - C39898 * C2533) *
               C39819 +
           (C39900 - C39901 + C39902 - C39903 + C39904 - C39905 + C39906 -
            C39907) *
               C39827 +
           (C39908 - C39909 + C39910 - C39911 + C39912 - C39913 + C39914 -
            C39915) *
               C82533) *
              C82592 * C1149 +
          ((C39895 * C1155 - C82941 * C1213 + C39896 * C3348 - C82934 * C3441 +
            C39897 * C3345 - C82921 * C3442 + C39898 * C16304 -
            C82871 * C16353) *
               C39825 +
           (C39895 * C1165 - C82941 * C1218 + C39896 * C3360 - C82934 * C3447 +
            C39897 * C3354 - C82921 * C3448 + C39898 * C16308 -
            C82871 * C16355) *
               C39819 +
           (C39895 * C1154 - C82941 * C1214 + C39896 * C3347 - C82934 * C3443 +
            C39897 * C3344 - C82921 * C3444 + C39898 * C20408 -
            C82871 * C20478) *
               C39827 +
           (C39895 * C1163 - C82941 * C1219 + C39896 * C3358 - C82934 * C3449 +
            C39897 * C3352 - C82921 * C3450 + C39898 * C20410 -
            C82871 * C20479) *
               C82533) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[14] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C37889 +
                      (C82592 * C246 - C239 * C109) * C82937 +
                      (C253 - C254) * C37891 + (C255 - C256) * C82927 +
                      (C257 - C258) * C37893 + (C259 - C260) * C82911 +
                      (C261 - C262) * C37895 + (C263 - C264) * C82862) *
                         C37887 +
                     ((C2740 - C2741) * C37889 + (C2742 - C2743) * C82937 +
                      (C1861 - C1862) * C37891 + (C1863 - C1864) * C82927 +
                      (C1865 - C1866) * C37893 + (C1867 - C1868) * C82911 +
                      (C6677 - C6678) * C37895 + (C6679 - C6680) * C82862) *
                         C82639) *
                        C1149 +
                    (((C239 * C1155 - C82592 * C1265) * C37889 +
                      (C239 * C1165 - C82592 * C1270) * C82937 +
                      (C239 * C1154 - C82592 * C1266) * C37891 +
                      (C239 * C1163 - C82592 * C1271) * C82927 +
                      (C239 * C1153 - C82592 * C1267) * C37893 +
                      (C239 * C1161 - C82592 * C1272) * C82911 +
                      (C239 * C1152 - C82592 * C1268) * C37895 +
                      (C239 * C1159 - C82592 * C1273) * C82862) *
                         C37887 +
                     ((C239 * C3348 - C82592 * C3527) * C37889 +
                      (C239 * C3360 - C82592 * C3533) * C82937 +
                      (C239 * C3347 - C82592 * C3528) * C37891 +
                      (C239 * C3358 - C82592 * C3534) * C82927 +
                      (C239 * C3346 - C82592 * C3529) * C37893 +
                      (C239 * C3356 - C82592 * C3535) * C82911 +
                      (C239 * C7859 - C82592 * C7997) * C37895 +
                      (C239 * C7861 - C82592 * C7998) * C82862) *
                         C82639) *
                        C1150) *
                   C82939 * C82940) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C39825 +
                      (C82592 * C246 - C239 * C109) * C39819 +
                      (C253 - C254) * C39827 + (C255 - C256) * C82533) *
                         C82941 +
                     ((C2740 - C2741) * C39825 + (C2742 - C2743) * C39819 +
                      (C1861 - C1862) * C39827 + (C1863 - C1864) * C82533) *
                         C82934 +
                     ((C2744 - C2745) * C39825 + (C2746 - C2747) * C39819 +
                      (C1869 - C1870) * C39827 + (C1871 - C1872) * C82533) *
                         C82921 +
                     ((C15952 - C15953) * C39825 + (C15954 - C15955) * C39819 +
                      (C19218 - C19219) * C39827 + (C19220 - C19221) * C82533) *
                         C82871) *
                        C1149 +
                    (((C239 * C1155 - C82592 * C1265) * C39825 +
                      (C239 * C1165 - C82592 * C1270) * C39819 +
                      (C239 * C1154 - C82592 * C1266) * C39827 +
                      (C239 * C1163 - C82592 * C1271) * C82533) *
                         C82941 +
                     ((C239 * C3348 - C82592 * C3527) * C39825 +
                      (C239 * C3360 - C82592 * C3533) * C39819 +
                      (C239 * C3347 - C82592 * C3528) * C39827 +
                      (C239 * C3358 - C82592 * C3534) * C82533) *
                         C82934 +
                     ((C239 * C3345 - C82592 * C3530) * C39825 +
                      (C239 * C3354 - C82592 * C3536) * C39819 +
                      (C239 * C3344 - C82592 * C3531) * C39827 +
                      (C239 * C3352 - C82592 * C3537) * C82533) *
                         C82921 +
                     ((C239 * C16304 - C82592 * C16399) * C39825 +
                      (C239 * C16308 - C82592 * C16401) * C39819 +
                      (C239 * C20408 - C82592 * C20546) * C39827 +
                      (C239 * C20410 - C82592 * C20547) * C82533) *
                         C82871) *
                        C1150) *
                   C82939 * C82940) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C82937 * C108 - C37889 * C102 + C82927 * C110 - C37891 * C103 +
            C82911 * C112 - C37893 * C104 + C82862 * C114 - C37895 * C105) *
               C37963 +
           (C82937 * C316 - C37889 * C310 + C82927 * C317 - C37891 * C311 +
            C82911 * C318 - C37893 * C312 + C82862 * C319 - C37895 * C313) *
               C37887 +
           (C38806 - C38807 + C38808 - C38809 + C38810 - C38811 + C38812 -
            C38813) *
               C37964 +
           (C38814 - C38815 + C38816 - C38817 + C38818 - C38819 + C38820 -
            C38821) *
               C82639) *
              C82592 * C1149 +
          ((C37889 * C1155 - C82937 * C1164 + C37891 * C1154 - C82927 * C1162 +
            C37893 * C1153 - C82911 * C1160 + C37895 * C1152 - C82862 * C1158) *
               C37963 +
           (C37889 * C1317 - C82937 * C1322 + C37891 * C1318 - C82927 * C1323 +
            C37893 * C1319 - C82911 * C1324 + C37895 * C1320 - C82862 * C1325) *
               C37887 +
           (C37889 * C3348 - C82937 * C3359 + C37891 * C3347 - C82927 * C3357 +
            C37893 * C3346 - C82911 * C3355 + C37895 * C7859 - C82862 * C7860) *
               C37964 +
           (C37889 * C3613 - C82937 * C3619 + C37891 * C3614 - C82927 * C3620 +
            C37893 * C3615 - C82911 * C3621 + C37895 * C8065 - C82862 * C8066) *
               C82639) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
               C39895 +
           (C39819 * C316 - C39825 * C310 + C82533 * C317 - C39827 * C311) *
               C82941 +
           (C40728 - C40729 + C40730 - C40731) * C39896 +
           (C40732 - C40733 + C40734 - C40735) * C82934 +
           (C40736 - C40737 + C40738 - C40739) * C39897 +
           (C40740 - C40741 + C40742 - C40743) * C82921 +
           (C40744 - C40745 + C40746 - C40747) * C39898 +
           (C40748 - C40749 + C40750 - C40751) * C82871) *
              C82592 * C1149 +
          ((C39825 * C1155 - C39819 * C1164 + C39827 * C1154 - C82533 * C1162) *
               C39895 +
           (C39825 * C1317 - C39819 * C1322 + C39827 * C1318 - C82533 * C1323) *
               C82941 +
           (C39825 * C3348 - C39819 * C3359 + C39827 * C3347 - C82533 * C3357) *
               C39896 +
           (C39825 * C3613 - C39819 * C3619 + C39827 * C3614 - C82533 * C3620) *
               C82934 +
           (C39825 * C3345 - C39819 * C3353 + C39827 * C3344 - C82533 * C3351) *
               C39897 +
           (C39825 * C3616 - C39819 * C3622 + C39827 * C3617 - C82533 * C3623) *
               C82921 +
           (C39825 * C16304 - C39819 * C16307 + C39827 * C20408 -
            C82533 * C20409) *
               C39898 +
           (C39825 * C16445 - C39819 * C16447 + C39827 * C20614 -
            C82533 * C20615) *
               C82871) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C37963 * C169 - C38187 * C102 - C37963 * C310 + C37887 * C365 +
            C37964 * C753 - C38188 * C695 - C37964 * C857 + C82639 * C913) *
               C82937 +
           (C38226 + C38227) * C82927 + (C38228 + C38229) * C82911 +
           (C38230 + C38231) * C82862) *
              C82592 * C1149 -
          ((C37964 * C7929 - C38188 * C7859 - C37964 * C8065 + C82639 * C8133 +
            C37963 * C1216 - C38187 * C1152 - C37963 * C1320 + C37887 * C1370) *
               C82862 +
           (C37964 * C3445 - C38188 * C3346 - C37964 * C3615 + C82639 * C3700 +
            C37963 * C1215 - C38187 * C1153 - C37963 * C1319 + C37887 * C1371) *
               C82911 +
           (C37964 * C3443 - C38188 * C3347 - C37964 * C3614 + C82639 * C3702 +
            C37963 * C1214 - C38187 * C1154 - C37963 * C1318 + C37887 * C1372) *
               C82927 +
           (C37964 * C3441 - C38188 * C3348 - C37964 * C3613 + C82639 * C3704 +
            C37963 * C1213 - C38187 * C1155 - C37963 * C1317 + C37887 * C1373) *
               C82937) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C39895 * C169 - C40113 * C102 - C39895 * C310 + C82941 * C365 +
            C39896 * C753 - C40114 * C695 - C39896 * C857 + C82934 * C913 +
            C39897 * C1746 - C40115 * C1653 - C39897 * C1950 + C82921 * C2035 +
            C39898 * C2653 - C40116 * C2527 - C39898 * C2821 + C82871 * C2927) *
               C39819 +
           (C40142 + C40143 + C40144 + C40145) * C82533) *
              C82592 * C1149 -
          ((C39898 * C20478 - C40116 * C20408 - C39898 * C20614 +
            C82871 * C20682 + C39897 * C3444 - C40115 * C3344 - C39897 * C3617 +
            C82921 * C3701 + C39896 * C3443 - C40114 * C3347 - C39896 * C3614 +
            C82934 * C3702 + C39895 * C1214 - C40113 * C1154 - C39895 * C1318 +
            C82941 * C1372) *
               C82533 +
           (C39898 * C16353 - C40116 * C16304 - C39898 * C16445 +
            C82871 * C16492 + C39897 * C3442 - C40115 * C3345 - C39897 * C3616 +
            C82921 * C3703 + C39896 * C3441 - C40114 * C3348 - C39896 * C3613 +
            C82934 * C3704 + C39895 * C1213 - C40113 * C1155 - C39895 * C1317 +
            C82941 * C1373) *
               C39819) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[14] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C37963 +
                      (C82592 * C441 - C239 * C310) * C37887 +
                      (C2740 - C2741) * C37964 + (C3006 - C3007) * C82639) *
                         C82937 +
                     ((C253 - C254) * C37963 + (C448 - C449) * C37887 +
                      (C1861 - C1862) * C37964 + (C2160 - C2161) * C82639) *
                         C82927 +
                     ((C257 - C258) * C37963 + (C450 - C451) * C37887 +
                      (C1865 - C1866) * C37964 + (C2164 - C2165) * C82639) *
                         C82911 +
                     ((C261 - C262) * C37963 + (C452 - C453) * C37887 +
                      (C6677 - C6678) * C37964 + (C6923 - C6924) * C82639) *
                         C82862) *
                        C1149 +
                    (((C239 * C1155 - C82592 * C1265) * C37963 +
                      (C239 * C1317 - C82592 * C1416) * C37887 +
                      (C239 * C3348 - C82592 * C3527) * C37964 +
                      (C239 * C3613 - C82592 * C3779) * C82639) *
                         C82937 +
                     ((C239 * C1154 - C82592 * C1266) * C37963 +
                      (C239 * C1318 - C82592 * C1417) * C37887 +
                      (C239 * C3347 - C82592 * C3528) * C37964 +
                      (C239 * C3614 - C82592 * C3781) * C82639) *
                         C82927 +
                     ((C239 * C1153 - C82592 * C1267) * C37963 +
                      (C239 * C1319 - C82592 * C1418) * C37887 +
                      (C239 * C3346 - C82592 * C3529) * C37964 +
                      (C239 * C3615 - C82592 * C3783) * C82639) *
                         C82911 +
                     ((C239 * C1152 - C82592 * C1268) * C37963 +
                      (C239 * C1320 - C82592 * C1419) * C37887 +
                      (C239 * C7859 - C82592 * C7997) * C37964 +
                      (C239 * C8065 - C82592 * C8200) * C82639) *
                         C82862) *
                        C1150) *
                   C82939 * C82940) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C39895 +
                      (C82592 * C441 - C239 * C310) * C82941 +
                      (C2740 - C2741) * C39896 + (C3006 - C3007) * C82934 +
                      (C2744 - C2745) * C39897 + (C3008 - C3009) * C82921 +
                      (C15952 - C15953) * C39898 + (C16106 - C16107) * C82871) *
                         C39819 +
                     ((C253 - C254) * C39895 + (C448 - C449) * C82941 +
                      (C1861 - C1862) * C39896 + (C2160 - C2161) * C82934 +
                      (C1869 - C1870) * C39897 + (C2162 - C2163) * C82921 +
                      (C19218 - C19219) * C39898 + (C19452 - C19453) * C82871) *
                         C82533) *
                        C1149 +
                    (((C239 * C1155 - C82592 * C1265) * C39895 +
                      (C239 * C1317 - C82592 * C1416) * C82941 +
                      (C239 * C3348 - C82592 * C3527) * C39896 +
                      (C239 * C3613 - C82592 * C3779) * C82934 +
                      (C239 * C3345 - C82592 * C3530) * C39897 +
                      (C239 * C3616 - C82592 * C3780) * C82921 +
                      (C239 * C16304 - C82592 * C16399) * C39898 +
                      (C239 * C16445 - C82592 * C16535) * C82871) *
                         C39819 +
                     ((C239 * C1154 - C82592 * C1266) * C39895 +
                      (C239 * C1318 - C82592 * C1417) * C82941 +
                      (C239 * C3347 - C82592 * C3528) * C39896 +
                      (C239 * C3614 - C82592 * C3781) * C82934 +
                      (C239 * C3344 - C82592 * C3531) * C39897 +
                      (C239 * C3617 - C82592 * C3782) * C82921 +
                      (C239 * C20408 - C82592 * C20546) * C39898 +
                      (C239 * C20614 - C82592 * C20749) * C82871) *
                         C82533) *
                        C1150) *
                   C82939 * C82940) /
                      (p * q * std::sqrt(p + q));
    d2eezx[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82937 * C108 - C37889 * C102 + C82927 * C110 - C37891 * C103 +
             C82911 * C112 - C37893 * C104 + C82862 * C114 - C37895 * C105) *
                C239 +
            (C82937 * C503 - C37889 * C497 + C82927 * C504 - C37891 * C498 +
             C82911 * C505 - C37893 * C499 + C82862 * C506 - C37895 * C500) *
                C82592) *
               C37887 +
           ((C38806 - C38807 + C38808 - C38809 + C38810 - C38811 + C38812 -
             C38813) *
                C239 +
            (C39020 - C39021 + C39022 - C39023 + C39024 - C39025 + C39026 -
             C39027) *
                C82592) *
               C82639) *
              C1149 +
          (((C37889 * C1155 - C82937 * C1164 + C37891 * C1154 - C82927 * C1162 +
             C37893 * C1153 - C82911 * C1160 + C37895 * C1152 -
             C82862 * C1158) *
                C239 +
            (C37889 * C1463 - C82937 * C1468 + C37891 * C1464 - C82927 * C1469 +
             C37893 * C1465 - C82911 * C1470 + C37895 * C1466 -
             C82862 * C1471) *
                C82592) *
               C37887 +
           ((C37889 * C3348 - C82937 * C3359 + C37891 * C3347 - C82927 * C3357 +
             C37893 * C3346 - C82911 * C3355 + C37895 * C7859 -
             C82862 * C7860) *
                C239 +
            (C37889 * C3859 - C82937 * C3865 + C37891 * C3860 - C82927 * C3866 +
             C37893 * C3861 - C82911 * C3867 + C37895 * C8267 -
             C82862 * C8268) *
                C82592) *
               C82639) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C239 +
            (C39819 * C503 - C39825 * C497 + C82533 * C504 - C39827 * C498) *
                C82592) *
               C82941 +
           ((C40728 - C40729 + C40730 - C40731) * C239 +
            (C40950 - C40951 + C40952 - C40953) * C82592) *
               C82934 +
           ((C40736 - C40737 + C40738 - C40739) * C239 +
            (C40954 - C40955 + C40956 - C40957) * C82592) *
               C82921 +
           ((C40744 - C40745 + C40746 - C40747) * C239 +
            (C40958 - C40959 + C40960 - C40961) * C82592) *
               C82871) *
              C1149 +
          (((C39825 * C1155 - C39819 * C1164 + C39827 * C1154 -
             C82533 * C1162) *
                C239 +
            (C39825 * C1463 - C39819 * C1468 + C39827 * C1464 -
             C82533 * C1469) *
                C82592) *
               C82941 +
           ((C39825 * C3348 - C39819 * C3359 + C39827 * C3347 -
             C82533 * C3357) *
                C239 +
            (C39825 * C3859 - C39819 * C3865 + C39827 * C3860 -
             C82533 * C3866) *
                C82592) *
               C82934 +
           ((C39825 * C3345 - C39819 * C3353 + C39827 * C3344 -
             C82533 * C3351) *
                C239 +
            (C39825 * C3862 - C39819 * C3868 + C39827 * C3863 -
             C82533 * C3869) *
                C82592) *
               C82921 +
           ((C39825 * C16304 - C39819 * C16307 + C39827 * C20408 -
             C82533 * C20409) *
                C239 +
            (C39825 * C16579 - C39819 * C16581 + C39827 * C20816 -
             C82533 * C20817) *
                C82592) *
               C82871) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C239 +
            (C37887 * C551 - C37963 * C497 + C82639 * C1055 - C37964 * C1003) *
                C82592) *
               C82937 +
           ((C37966 - C37967 + C37968 - C37969) * C239 +
            (C38430 - C38431 + C38432 - C38433) * C82592) *
               C82927 +
           ((C37974 - C37975 + C37976 - C37977) * C239 +
            (C38434 - C38435 + C38436 - C38437) * C82592) *
               C82911 +
           ((C37982 - C37983 + C37984 - C37985) * C239 +
            (C38438 - C38439 + C38440 - C38441) * C82592) *
               C82862) *
              C1149 +
          (((C37963 * C1155 - C37887 * C1213 + C37964 * C3348 -
             C82639 * C3441) *
                C239 +
            (C37963 * C1463 - C37887 * C1515 + C37964 * C3859 -
             C82639 * C3945) *
                C82592) *
               C82937 +
           ((C37963 * C1154 - C37887 * C1214 + C37964 * C3347 -
             C82639 * C3443) *
                C239 +
            (C37963 * C1464 - C37887 * C1516 + C37964 * C3860 -
             C82639 * C3947) *
                C82592) *
               C82927 +
           ((C37963 * C1153 - C37887 * C1215 + C37964 * C3346 -
             C82639 * C3445) *
                C239 +
            (C37963 * C1465 - C37887 * C1517 + C37964 * C3861 -
             C82639 * C3949) *
                C82592) *
               C82911 +
           ((C37963 * C1152 - C37887 * C1216 + C37964 * C7859 -
             C82639 * C7929) *
                C239 +
            (C37963 * C1466 - C37887 * C1518 + C37964 * C8267 -
             C82639 * C8335) *
                C82592) *
               C82862) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82941 * C169 - C39895 * C102 + C82934 * C753 - C39896 * C695 +
             C82921 * C1746 - C39897 * C1653 + C82871 * C2653 -
             C39898 * C2527) *
                C239 +
            (C82941 * C551 - C39895 * C497 + C82934 * C1055 - C39896 * C1003 +
             C82921 * C2323 - C39897 * C2241 + C82871 * C3175 -
             C39898 * C3083) *
                C82592) *
               C39819 +
           ((C39900 - C39901 + C39902 - C39903 + C39904 - C39905 + C39906 -
             C39907) *
                C239 +
            (C40344 - C40345 + C40346 - C40347 + C40348 - C40349 + C40350 -
             C40351) *
                C82592) *
               C82533) *
              C1149 +
          (((C39895 * C1155 - C82941 * C1213 + C39896 * C3348 - C82934 * C3441 +
             C39897 * C3345 - C82921 * C3442 + C39898 * C16304 -
             C82871 * C16353) *
                C239 +
            (C39895 * C1463 - C82941 * C1515 + C39896 * C3859 - C82934 * C3945 +
             C39897 * C3862 - C82921 * C3946 + C39898 * C16579 -
             C82871 * C16625) *
                C82592) *
               C39819 +
           ((C39895 * C1154 - C82941 * C1214 + C39896 * C3347 - C82934 * C3443 +
             C39897 * C3344 - C82921 * C3444 + C39898 * C20408 -
             C82871 * C20478) *
                C239 +
            (C39895 * C1464 - C82941 * C1516 + C39896 * C3860 - C82934 * C3947 +
             C39897 * C3863 - C82921 * C3948 + C39898 * C20816 -
             C82871 * C20884) *
                C82592) *
               C82533) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C37887 +
            C3268 * C82639) *
               C82937 +
           (C38508 + C38509) * C82927 + (C38510 + C38511) * C82911 +
           (C38512 + C38513) * C82862) *
              C1149 -
          (((C239 * C7997 - C607 * C7859 - C239 * C8267 + C82592 * C8402) *
                C82639 +
            (C239 * C1268 - C607 * C1152 - C239 * C1466 + C82592 * C1563) *
                C37887) *
               C82862 +
           ((C239 * C3529 - C607 * C3346 - C239 * C3861 + C82592 * C4026) *
                C82639 +
            (C239 * C1267 - C607 * C1153 - C239 * C1465 + C82592 * C1564) *
                C37887) *
               C82911 +
           ((C239 * C3528 - C607 * C3347 - C239 * C3860 + C82592 * C4028) *
                C82639 +
            (C239 * C1266 - C607 * C1154 - C239 * C1464 + C82592 * C1565) *
                C37887) *
               C82927 +
           ((C239 * C3527 - C607 * C3348 - C239 * C3859 + C82592 * C4030) *
                C82639 +
            (C239 * C1265 - C607 * C1155 - C239 * C1463 + C82592 * C1566) *
                C37887) *
               C82937) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82941 +
            C3268 * C82934 + C3269 * C82921 + C16260 * C82871) *
               C39819 +
           (C40418 + C40419 + C40420 + C40421) * C82533) *
              C1149 -
          (((C239 * C20546 - C607 * C20408 - C239 * C20816 + C82592 * C20951) *
                C82871 +
            (C239 * C3531 - C607 * C3344 - C239 * C3863 + C82592 * C4027) *
                C82921 +
            (C239 * C3528 - C607 * C3347 - C239 * C3860 + C82592 * C4028) *
                C82934 +
            (C239 * C1266 - C607 * C1154 - C239 * C1464 + C82592 * C1565) *
                C82941) *
               C82533 +
           ((C239 * C16399 - C607 * C16304 - C239 * C16579 + C82592 * C16670) *
                C82871 +
            (C239 * C3530 - C607 * C3345 - C239 * C3862 + C82592 * C4029) *
                C82921 +
            (C239 * C3527 - C607 * C3348 - C239 * C3859 + C82592 * C4030) *
                C82934 +
            (C239 * C1265 - C607 * C1155 - C239 * C1463 + C82592 * C1566) *
                C82941) *
               C39819) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C80224 * C108 - C19062 * C102 - C80224 * C109 + C82844 * C120 +
             C80205 * C110 - C19064 * C103 - C80205 * C111 + C82533 * C121) *
                C52324 +
            (C22970 + C22971) * C82679) *
               C82635 +
           ((C19773 + C19774) * C52324 + (C22022 + C22023) * C82679) * C82642 +
           ((C19775 + C19776) * C52324 + (C22024 + C22025) * C82679) * C44659) *
              C82938 * C82939 * C90 -
          (((C80205 * C3349 - C19064 * C3343 - C80205 * C3350 + C82533 * C3361 +
             C80224 * C3351 - C19062 * C3344 - C80224 * C3352 +
             C82844 * C3362) *
                C82679 +
            (C80205 * C1661 - C19064 * C1655 - C80205 * C1662 + C82533 * C1667 +
             C80224 * C1659 - C19062 * C1654 - C80224 * C1660 +
             C82844 * C1666) *
                C52324) *
               C44659 +
           ((C80205 * C3355 - C19064 * C3346 - C80205 * C3356 + C82533 * C3364 +
             C80224 * C3357 - C19062 * C3347 - C80224 * C3358 +
             C82844 * C3365) *
                C82679 +
            (C80205 * C700 - C19064 * C693 - C80205 * C701 + C82533 * C708 +
             C80224 * C702 - C19062 * C694 - C80224 * C703 + C82844 * C709) *
                C52324) *
               C82642 +
           ((C80205 * C1160 - C19064 * C1153 - C80205 * C1161 + C82533 * C1168 +
             C80224 * C1162 - C19062 * C1154 - C80224 * C1163 +
             C82844 * C1169) *
                C82679 +
            (C80205 * C112 - C19064 * C104 - C80205 * C113 + C82533 * C122 +
             C80224 * C110 - C19062 * C103 - C80224 * C111 + C82844 * C121) *
                C52324) *
               C82635) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexy[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82635 * C169 - C80487 * C102 + C82642 * C753 - C80484 * C695 +
             C44659 * C1746 - C80495 * C1653) *
                C80224 +
            (C82635 * C175 - C80487 * C109 + C82642 * C758 - C80484 * C705 +
             C44659 * C1750 - C80495 * C1658) *
                C82844 +
            (C44744 - C44745 + C44746 - C44747 + C44748 - C44749) * C80205 +
            (C44750 - C44751 + C44752 - C44753 + C44754 - C44755) * C82533) *
               C52324 +
           ((C51534 - C51535 + C51536 - C51537 + C51538 - C51539) * C80224 +
            (C51540 - C51541 + C51542 - C51543 + C51544 - C51545) * C82844 +
            (C49705 - C49706 + C49707 - C49708 + C49709 - C49710) * C80205 +
            (C49711 - C49712 + C49713 - C49714 + C49715 - C49716) * C82533) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C44745 - C44744 + C44747 - C44746 + C44749 - C44748) * C80224 +
            (C44751 - C44750 + C44753 - C44752 + C44755 - C44754) * C82844 +
            (C44757 - C44756 + C44759 - C44758 + C44761 - C44760) * C80205 +
            (C44763 - C44762 + C44765 - C44764 + C44767 - C44766) * C82533) *
               C52324 +
           ((C49706 - C49705 + C49708 - C49707 + C49710 - C49709) * C80224 +
            (C49712 - C49711 + C49714 - C49713 + C49716 - C49715) * C82844 +
            (C80487 * C1153 - C82635 * C1215 + C80484 * C3346 - C82642 * C3445 +
             C80495 * C3343 - C44659 * C3446) *
                C80205 +
            (C80487 * C1161 - C82635 * C1220 + C80484 * C3356 - C82642 * C3451 +
             C80495 * C3350 - C44659 * C3452) *
                C82533) *
               C82679) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexz[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C80224 +
            (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
                C82844 +
            (C52461 - C52462 + C52463 - C52464) * C80205 +
            (C52465 - C52466 + C52467 - C52468) * C82533) *
               C82635 +
           ((C55448 - C55449 + C55450 - C55451) * C80224 +
            (C55452 - C55453 + C55454 - C55455) * C82844 +
            (C54487 - C54488 + C54489 - C54490) * C80205 +
            (C54491 - C54492 + C54493 - C54494) * C82533) *
               C82642 +
           ((C55456 - C55457 + C55458 - C55459) * C80224 +
            (C55460 - C55461 + C55462 - C55463) * C82844 +
            (C54495 - C54496 + C54497 - C54498) * C80205 +
            (C54499 - C54500 + C54501 - C54502) * C82533) *
               C44659) *
              C82938 * C82939 * C90 +
          (((C52462 - C52461 + C52464 - C52463) * C80224 +
            (C52466 - C52465 + C52468 - C52467) * C82844 +
            (C52470 - C52469 + C52472 - C52471) * C80205 +
            (C52474 - C52473 + C52476 - C52475) * C82533) *
               C82635 +
           ((C54488 - C54487 + C54490 - C54489) * C80224 +
            (C54492 - C54491 + C54494 - C54493) * C82844 +
            (C59143 - C59142 + C59145 - C59144) * C80205 +
            (C59147 - C59146 + C59149 - C59148) * C82533) *
               C82642 +
           ((C54496 - C54495 + C54498 - C54497) * C80224 +
            (C54500 - C54499 + C54502 - C54501) * C82844 +
            (C52458 * C1655 - C52324 * C1854 + C52459 * C3343 -
             C82679 * C3532) *
                C80205 +
            (C52458 * C1662 - C52324 * C1858 + C52459 * C3350 -
             C82679 * C3538) *
                C82533) *
               C44659) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C80487 +
            (C82844 * C316 - C80224 * C310 + C82533 * C317 - C80205 * C311) *
                C82635 +
            (C19977 - C19978 + C19979 - C19980) * C80484 +
            (C19981 - C19982 + C19983 - C19984) * C82642 +
            (C19985 - C19986 + C19987 - C19988) * C80495 +
            (C19989 - C19990 + C19991 - C19992) * C44659) *
               C52324 +
           ((C23266 - C23267 + C23268 - C23269) * C80487 +
            (C23270 - C23271 + C23272 - C23273) * C82635 +
            (C22328 - C22329 + C22330 - C22331) * C80484 +
            (C22332 - C22333 + C22334 - C22335) * C82642 +
            (C22336 - C22337 + C22338 - C22339) * C80495 +
            (C22340 - C22341 + C22342 - C22343) * C44659) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C80224 * C103 - C82844 * C110 + C80205 * C104 - C82533 * C112) *
                C80487 +
            (C80224 * C311 - C82844 * C317 + C80205 * C312 - C82533 * C318) *
                C82635 +
            (C80224 * C694 - C82844 * C702 + C80205 * C693 - C82533 * C700) *
                C80484 +
            (C80224 * C858 - C82844 * C863 + C80205 * C859 - C82533 * C864) *
                C82642 +
            (C80224 * C1654 - C82844 * C1659 + C80205 * C1655 -
             C82533 * C1661) *
                C80495 +
            (C80224 * C1951 - C82844 * C1955 + C80205 * C1952 -
             C82533 * C1956) *
                C44659) *
               C52324 +
           ((C80224 * C1154 - C82844 * C1162 + C80205 * C1153 -
             C82533 * C1160) *
                C80487 +
            (C80224 * C1318 - C82844 * C1323 + C80205 * C1319 -
             C82533 * C1324) *
                C82635 +
            (C80224 * C3347 - C82844 * C3357 + C80205 * C3346 -
             C82533 * C3355) *
                C80484 +
            (C80224 * C3614 - C82844 * C3620 + C80205 * C3615 -
             C82533 * C3621) *
                C82642 +
            (C80224 * C3344 - C82844 * C3351 + C80205 * C3343 -
             C82533 * C3349) *
                C80495 +
            (C80224 * C3617 - C82844 * C3623 + C80205 * C3618 -
             C82533 * C3624) *
                C44659) *
               C82679) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C80487 * C169 - C80539 * C102 - C80487 * C310 +
                       C82635 * C365 + C80484 * C753 - C80532 * C695 -
                       C80484 * C857 + C82642 * C913 + C80495 * C1746 -
                       C44991 * C1653 - C80495 * C1950 + C44659 * C2035) *
                          C82844 +
                      (C45029 + C45030 + C45031) * C82533) *
                         C52324 +
                     ((C51858 + C51859 + C51860) * C82844 +
                      (C50029 + C50030 + C50031) * C82533) *
                         C82679) *
                        C82938 * C82939 * C90 -
                    (((C80495 * C3446 - C44991 * C3343 - C80495 * C3618 +
                       C44659 * C3699 + C80484 * C3445 - C80532 * C3346 -
                       C80484 * C3615 + C82642 * C3700 + C80487 * C1215 -
                       C80539 * C1153 - C80487 * C1319 + C82635 * C1371) *
                          C82533 +
                      (C50031 + C50030 + C50029) * C82844) *
                         C82679 +
                     ((C45034 + C45033 + C45032) * C82533 +
                      (C45031 + C45030 + C45029) * C82844) *
                         C52324) *
                        C82938 * C82939 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C80487 +
            (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
                C82635 +
            (C55448 - C55449 + C55450 - C55451) * C80484 +
            (C55758 - C55759 + C55760 - C55761) * C82642 +
            (C55456 - C55457 + C55458 - C55459) * C80495 +
            (C55762 - C55763 + C55764 - C55765) * C44659) *
               C82844 +
           ((C52461 - C52462 + C52463 - C52464) * C80487 +
            (C52683 - C52684 + C52685 - C52686) * C82635 +
            (C54487 - C54488 + C54489 - C54490) * C80484 +
            (C54818 - C54819 + C54820 - C54821) * C82642 +
            (C54495 - C54496 + C54497 - C54498) * C80495 +
            (C54822 - C54823 + C54824 - C54825) * C44659) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C52462 - C52461 + C52464 - C52463) * C80487 +
            (C52684 - C52683 + C52686 - C52685) * C82635 +
            (C54488 - C54487 + C54490 - C54489) * C80484 +
            (C54819 - C54818 + C54821 - C54820) * C82642 +
            (C54496 - C54495 + C54498 - C54497) * C80495 +
            (C54823 - C54822 + C54825 - C54824) * C44659) *
               C82844 +
           ((C52470 - C52469 + C52472 - C52471) * C80487 +
            (C52688 - C52687 + C52690 - C52689) * C82635 +
            (C59143 - C59142 + C59145 - C59144) * C80484 +
            (C59445 - C59444 + C59447 - C59446) * C82642 +
            (C52458 * C1655 - C52324 * C1854 + C52459 * C3343 -
             C82679 * C3532) *
                C80495 +
            (C52458 * C1952 - C52324 * C2157 + C52459 * C3618 -
             C82679 * C3784) *
                C44659) *
               C82533) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezx[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C52458 +
            (C82844 * C503 - C80224 * C497 + C82533 * C504 - C80205 * C498) *
                C52324 +
            (C23266 - C23267 + C23268 - C23269) * C52459 +
            (C23568 - C23569 + C23570 - C23571) * C82679) *
               C82635 +
           ((C19977 - C19978 + C19979 - C19980) * C52458 +
            (C20199 - C20200 + C20201 - C20202) * C52324 +
            (C22328 - C22329 + C22330 - C22331) * C52459 +
            (C22642 - C22643 + C22644 - C22645) * C82679) *
               C82642 +
           ((C19985 - C19986 + C19987 - C19988) * C52458 +
            (C20203 - C20204 + C20205 - C20206) * C52324 +
            (C22336 - C22337 + C22338 - C22339) * C52459 +
            (C22646 - C22647 + C22648 - C22649) * C82679) *
               C44659) *
              C82938 * C82939 * C90 +
          (((C80224 * C103 - C82844 * C110 + C80205 * C104 - C82533 * C112) *
                C52458 +
            (C80224 * C498 - C82844 * C504 + C80205 * C499 - C82533 * C505) *
                C52324 +
            (C80224 * C1154 - C82844 * C1162 + C80205 * C1153 -
             C82533 * C1160) *
                C52459 +
            (C80224 * C1464 - C82844 * C1469 + C80205 * C1465 -
             C82533 * C1470) *
                C82679) *
               C82635 +
           ((C80224 * C694 - C82844 * C702 + C80205 * C693 - C82533 * C700) *
                C52458 +
            (C80224 * C1004 - C82844 * C1009 + C80205 * C1005 -
             C82533 * C1010) *
                C52324 +
            (C80224 * C3347 - C82844 * C3357 + C80205 * C3346 -
             C82533 * C3355) *
                C52459 +
            (C80224 * C3860 - C82844 * C3866 + C80205 * C3861 -
             C82533 * C3867) *
                C82679) *
               C82642 +
           ((C80224 * C1654 - C82844 * C1659 + C80205 * C1655 -
             C82533 * C1661) *
                C52458 +
            (C80224 * C2242 - C82844 * C2246 + C80205 * C2243 -
             C82533 * C2247) *
                C52324 +
            (C80224 * C3344 - C82844 * C3351 + C80205 * C3343 -
             C82533 * C3349) *
                C52459 +
            (C80224 * C3863 - C82844 * C3869 + C80205 * C3864 -
             C82533 * C3870) *
                C82679) *
               C44659) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezy[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82635 * C169 - C80487 * C102 + C82642 * C753 - C80484 * C695 +
             C44659 * C1746 - C80495 * C1653) *
                C52458 +
            (C82635 * C551 - C80487 * C497 + C82642 * C1055 - C80484 * C1003 +
             C44659 * C2323 - C80495 * C2241) *
                C52324 +
            (C51534 - C51535 + C51536 - C51537 + C51538 - C51539) * C52459 +
            (C52155 - C52156 + C52157 - C52158 + C52159 - C52160) * C82679) *
               C82844 +
           ((C44744 - C44745 + C44746 - C44747 + C44748 - C44749) * C52458 +
            (C45257 - C45258 + C45259 - C45260 + C45261 - C45262) * C52324 +
            (C49705 - C49706 + C49707 - C49708 + C49709 - C49710) * C52459 +
            (C50326 - C50327 + C50328 - C50329 + C50330 - C50331) * C82679) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C44745 - C44744 + C44747 - C44746 + C44749 - C44748) * C52458 +
            (C45258 - C45257 + C45260 - C45259 + C45262 - C45261) * C52324 +
            (C49706 - C49705 + C49708 - C49707 + C49710 - C49709) * C52459 +
            (C50327 - C50326 + C50329 - C50328 + C50331 - C50330) * C82679) *
               C82844 +
           ((C44757 - C44756 + C44759 - C44758 + C44761 - C44760) * C52458 +
            (C45264 - C45263 + C45266 - C45265 + C45268 - C45267) * C52324 +
            (C80487 * C1153 - C82635 * C1215 + C80484 * C3346 - C82642 * C3445 +
             C80495 * C3343 - C44659 * C3446) *
                C52459 +
            (C80487 * C1465 - C82635 * C1517 + C80484 * C3861 - C82642 * C3949 +
             C80495 * C3864 - C44659 * C3950) *
                C82679) *
               C82533) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezz[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C52458 * C240 - C52892 * C102 - C52458 * C497 +
                       C52324 * C608 + C52459 * C1265 - C52893 * C1155 -
                       C52459 * C1463 + C82679 * C1566) *
                          C82635 +
                      (C56084 + C56085) * C82642 + (C56086 + C56087) * C44659) *
                         C82844 +
                     ((C52931 + C52932) * C82635 + (C55150 + C55151) * C82642 +
                      (C55152 + C55153) * C44659) *
                         C82533) *
                        C82938 * C82939 * C90 -
                    (((C52459 * C3532 - C52893 * C3343 - C52459 * C3864 +
                       C82679 * C4025 + C52458 * C1854 - C52892 * C1655 -
                       C52458 * C2243 + C52324 * C2415) *
                          C44659 +
                      (C59755 + C59754) * C82642 + (C52934 + C52933) * C82635) *
                         C82533 +
                     ((C55153 + C55152) * C44659 + (C55151 + C55150) * C82642 +
                      (C52932 + C52931) * C82635) *
                         C82844) *
                        C82938 * C82939 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C80224 * C108 - C19062 * C102 - C80224 * C109 + C82844 * C120 +
             C80205 * C110 - C19064 * C103 - C80205 * C111 + C82533 * C121) *
                C52324 +
            (C22970 + C22971) * C82679) *
               C82635 +
           ((C19773 + C19774) * C52324 + (C22022 + C22023) * C82679) * C82642 +
           ((C19775 + C19776) * C52324 + (C22024 + C22025) * C82679) * C44659) *
              C82938 * C688 -
          (((C80205 * C20409 - C19064 * C20408 - C80205 * C20410 +
             C82533 * C20411 + C80224 * C16307 - C19062 * C16304 -
             C80224 * C16308 + C82844 * C16310) *
                C82679 +
            (C19778 + C19777) * C52324) *
               C44659 +
           ((C22025 + C22024) * C82679 + (C19776 + C19775) * C52324) * C82642 +
           ((C22023 + C22022) * C82679 + (C19774 + C19773) * C52324) * C82635) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eexy[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82635 * C169 - C80487 * C102 + C82642 * C753 - C80484 * C695 +
             C44659 * C1746 - C80495 * C1653) *
                C80224 +
            (C82635 * C175 - C80487 * C109 + C82642 * C758 - C80484 * C705 +
             C44659 * C1750 - C80495 * C1658) *
                C82844 +
            (C44744 - C44745 + C44746 - C44747 + C44748 - C44749) * C80205 +
            (C44750 - C44751 + C44752 - C44753 + C44754 - C44755) * C82533) *
               C52324 +
           ((C51534 - C51535 + C51536 - C51537 + C51538 - C51539) * C80224 +
            (C51540 - C51541 + C51542 - C51543 + C51544 - C51545) * C82844 +
            (C49705 - C49706 + C49707 - C49708 + C49709 - C49710) * C80205 +
            (C49711 - C49712 + C49713 - C49714 + C49715 - C49716) * C82533) *
               C82679) *
              C82938 * C688 +
          (((C80487 * C695 - C82635 * C753 + C80484 * C1653 - C82642 * C1746 +
             C80495 * C2527 - C44659 * C2653) *
                C80224 +
            (C80487 * C705 - C82635 * C758 + C80484 * C1658 - C82642 * C1750 +
             C80495 * C2533 - C44659 * C2656) *
                C82844 +
            (C80487 * C694 - C82635 * C754 + C80484 * C1654 - C82642 * C1747 +
             C80495 * C2526 - C44659 * C2654) *
                C80205 +
            (C80487 * C703 - C82635 * C759 + C80484 * C1660 - C82642 * C1751 +
             C80495 * C2531 - C44659 * C2657) *
                C82533) *
               C52324 +
           ((C80487 * C3348 - C82635 * C3441 + C80484 * C3345 - C82642 * C3442 +
             C80495 * C16304 - C44659 * C16353) *
                C80224 +
            (C80487 * C3360 - C82635 * C3447 + C80484 * C3354 - C82642 * C3448 +
             C80495 * C16308 - C44659 * C16355) *
                C82844 +
            (C80487 * C3347 - C82635 * C3443 + C80484 * C3344 - C82642 * C3444 +
             C80495 * C20408 - C44659 * C20478) *
                C80205 +
            (C80487 * C3358 - C82635 * C3449 + C80484 * C3352 - C82642 * C3450 +
             C80495 * C20410 - C44659 * C20479) *
                C82533) *
               C82679) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eexz[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C80224 +
            (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
                C82844 +
            (C52461 - C52462 + C52463 - C52464) * C80205 +
            (C52465 - C52466 + C52467 - C52468) * C82533) *
               C82635 +
           ((C55448 - C55449 + C55450 - C55451) * C80224 +
            (C55452 - C55453 + C55454 - C55455) * C82844 +
            (C54487 - C54488 + C54489 - C54490) * C80205 +
            (C54491 - C54492 + C54493 - C54494) * C82533) *
               C82642 +
           ((C55456 - C55457 + C55458 - C55459) * C80224 +
            (C55460 - C55461 + C55462 - C55463) * C82844 +
            (C54495 - C54496 + C54497 - C54498) * C80205 +
            (C54499 - C54500 + C54501 - C54502) * C82533) *
               C44659) *
              C82938 * C688 +
          (((C55449 - C55448 + C55451 - C55450) * C80224 +
            (C55453 - C55452 + C55455 - C55454) * C82844 +
            (C54488 - C54487 + C54490 - C54489) * C80205 +
            (C54492 - C54491 + C54494 - C54493) * C82533) *
               C82635 +
           ((C55457 - C55456 + C55459 - C55458) * C80224 +
            (C55461 - C55460 + C55463 - C55462) * C82844 +
            (C54496 - C54495 + C54498 - C54497) * C80205 +
            (C54500 - C54499 + C54502 - C54501) * C82533) *
               C82642 +
           ((C69858 - C69857 + C69860 - C69859) * C80224 +
            (C69862 - C69861 + C69864 - C69863) * C82844 +
            (C52458 * C2526 - C52324 * C2734 + C52459 * C20408 -
             C82679 * C20546) *
                C80205 +
            (C52458 * C2531 - C52324 * C2737 + C52459 * C20410 -
             C82679 * C20547) *
                C82533) *
               C44659) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyx[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C80487 +
            (C82844 * C316 - C80224 * C310 + C82533 * C317 - C80205 * C311) *
                C82635 +
            (C19977 - C19978 + C19979 - C19980) * C80484 +
            (C19981 - C19982 + C19983 - C19984) * C82642 +
            (C19985 - C19986 + C19987 - C19988) * C80495 +
            (C19989 - C19990 + C19991 - C19992) * C44659) *
               C52324 +
           ((C23266 - C23267 + C23268 - C23269) * C80487 +
            (C23270 - C23271 + C23272 - C23273) * C82635 +
            (C22328 - C22329 + C22330 - C22331) * C80484 +
            (C22332 - C22333 + C22334 - C22335) * C82642 +
            (C22336 - C22337 + C22338 - C22339) * C80495 +
            (C22340 - C22341 + C22342 - C22343) * C44659) *
               C82679) *
              C82938 * C688 +
          (((C19978 - C19977 + C19980 - C19979) * C80487 +
            (C19982 - C19981 + C19984 - C19983) * C82635 +
            (C19986 - C19985 + C19988 - C19987) * C80484 +
            (C19990 - C19989 + C19992 - C19991) * C82642 +
            (C19994 - C19993 + C19996 - C19995) * C80495 +
            (C19998 - C19997 + C20000 - C19999) * C44659) *
               C52324 +
           ((C22329 - C22328 + C22331 - C22330) * C80487 +
            (C22333 - C22332 + C22335 - C22334) * C82635 +
            (C22337 - C22336 + C22339 - C22338) * C80484 +
            (C22341 - C22340 + C22343 - C22342) * C82642 +
            (C80224 * C16304 - C82844 * C16307 + C80205 * C20408 -
             C82533 * C20409) *
                C80495 +
            (C80224 * C16445 - C82844 * C16447 + C80205 * C20614 -
             C82533 * C20615) *
                C44659) *
               C82679) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyy[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C80487 * C169 - C80539 * C102 - C80487 * C310 + C82635 * C365 +
             C80484 * C753 - C80532 * C695 - C80484 * C857 + C82642 * C913 +
             C80495 * C1746 - C44991 * C1653 - C80495 * C1950 +
             C44659 * C2035) *
                C82844 +
            (C45029 + C45030 + C45031) * C82533) *
               C52324 +
           ((C51858 + C51859 + C51860) * C82844 +
            (C50029 + C50030 + C50031) * C82533) *
               C82679) *
              C82938 * C688 -
          (((C80495 * C20478 - C44991 * C20408 - C80495 * C20614 +
             C44659 * C20682 + C80484 * C3444 - C80532 * C3344 -
             C80484 * C3617 + C82642 * C3701 + C80487 * C3443 - C80539 * C3347 -
             C80487 * C3614 + C82635 * C3702) *
                C82533 +
            (C80495 * C16353 - C44991 * C16304 - C80495 * C16445 +
             C44659 * C16492 + C80484 * C3442 - C80532 * C3345 -
             C80484 * C3616 + C82642 * C3703 + C80487 * C3441 - C80539 * C3348 -
             C80487 * C3613 + C82635 * C3704) *
                C82844) *
               C82679 +
           ((C80495 * C2654 - C44991 * C2526 - C80495 * C2822 + C44659 * C2926 +
             C80484 * C1747 - C80532 * C1654 - C80484 * C1951 + C82642 * C2036 +
             C80487 * C754 - C80539 * C694 - C80487 * C858 + C82635 * C912) *
                C82533 +
            (C80495 * C2653 - C44991 * C2527 - C80495 * C2821 + C44659 * C2927 +
             C80484 * C1746 - C80532 * C1653 - C80484 * C1950 + C82642 * C2035 +
             C80487 * C753 - C80539 * C695 - C80487 * C857 + C82635 * C913) *
                C82844) *
               C52324) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyz[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C80487 +
            (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
                C82635 +
            (C55448 - C55449 + C55450 - C55451) * C80484 +
            (C55758 - C55759 + C55760 - C55761) * C82642 +
            (C55456 - C55457 + C55458 - C55459) * C80495 +
            (C55762 - C55763 + C55764 - C55765) * C44659) *
               C82844 +
           ((C52461 - C52462 + C52463 - C52464) * C80487 +
            (C52683 - C52684 + C52685 - C52686) * C82635 +
            (C54487 - C54488 + C54489 - C54490) * C80484 +
            (C54818 - C54819 + C54820 - C54821) * C82642 +
            (C54495 - C54496 + C54497 - C54498) * C80495 +
            (C54822 - C54823 + C54824 - C54825) * C44659) *
               C82533) *
              C82938 * C688 +
          (((C55449 - C55448 + C55451 - C55450) * C80487 +
            (C55759 - C55758 + C55761 - C55760) * C82635 +
            (C55457 - C55456 + C55459 - C55458) * C80484 +
            (C55763 - C55762 + C55765 - C55764) * C82642 +
            (C69858 - C69857 + C69860 - C69859) * C80495 +
            (C70064 - C70063 + C70066 - C70065) * C44659) *
               C82844 +
           ((C54488 - C54487 + C54490 - C54489) * C80487 +
            (C54819 - C54818 + C54821 - C54820) * C82635 +
            (C54496 - C54495 + C54498 - C54497) * C80484 +
            (C54823 - C54822 + C54825 - C54824) * C82642 +
            (C52458 * C2526 - C52324 * C2734 + C52459 * C20408 -
             C82679 * C20546) *
                C80495 +
            (C52458 * C2822 - C52324 * C3003 + C52459 * C20614 -
             C82679 * C20749) *
                C44659) *
               C82533) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eezx[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C52458 +
            (C82844 * C503 - C80224 * C497 + C82533 * C504 - C80205 * C498) *
                C52324 +
            (C23266 - C23267 + C23268 - C23269) * C52459 +
            (C23568 - C23569 + C23570 - C23571) * C82679) *
               C82635 +
           ((C19977 - C19978 + C19979 - C19980) * C52458 +
            (C20199 - C20200 + C20201 - C20202) * C52324 +
            (C22328 - C22329 + C22330 - C22331) * C52459 +
            (C22642 - C22643 + C22644 - C22645) * C82679) *
               C82642 +
           ((C19985 - C19986 + C19987 - C19988) * C52458 +
            (C20203 - C20204 + C20205 - C20206) * C52324 +
            (C22336 - C22337 + C22338 - C22339) * C52459 +
            (C22646 - C22647 + C22648 - C22649) * C82679) *
               C44659) *
              C82938 * C688 +
          (((C19978 - C19977 + C19980 - C19979) * C52458 +
            (C20200 - C20199 + C20202 - C20201) * C52324 +
            (C22329 - C22328 + C22331 - C22330) * C52459 +
            (C22643 - C22642 + C22645 - C22644) * C82679) *
               C82635 +
           ((C19986 - C19985 + C19988 - C19987) * C52458 +
            (C20204 - C20203 + C20206 - C20205) * C52324 +
            (C22337 - C22336 + C22339 - C22338) * C52459 +
            (C22647 - C22646 + C22649 - C22648) * C82679) *
               C82642 +
           ((C19994 - C19993 + C19996 - C19995) * C52458 +
            (C20208 - C20207 + C20210 - C20209) * C52324 +
            (C80224 * C16304 - C82844 * C16307 + C80205 * C20408 -
             C82533 * C20409) *
                C52459 +
            (C80224 * C16579 - C82844 * C16581 + C80205 * C20816 -
             C82533 * C20817) *
                C82679) *
               C44659) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eezy[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82635 * C169 - C80487 * C102 + C82642 * C753 - C80484 * C695 +
             C44659 * C1746 - C80495 * C1653) *
                C52458 +
            (C82635 * C551 - C80487 * C497 + C82642 * C1055 - C80484 * C1003 +
             C44659 * C2323 - C80495 * C2241) *
                C52324 +
            (C51534 - C51535 + C51536 - C51537 + C51538 - C51539) * C52459 +
            (C52155 - C52156 + C52157 - C52158 + C52159 - C52160) * C82679) *
               C82844 +
           ((C44744 - C44745 + C44746 - C44747 + C44748 - C44749) * C52458 +
            (C45257 - C45258 + C45259 - C45260 + C45261 - C45262) * C52324 +
            (C49705 - C49706 + C49707 - C49708 + C49709 - C49710) * C52459 +
            (C50326 - C50327 + C50328 - C50329 + C50330 - C50331) * C82679) *
               C82533) *
              C82938 * C688 +
          (((C80487 * C695 - C82635 * C753 + C80484 * C1653 - C82642 * C1746 +
             C80495 * C2527 - C44659 * C2653) *
                C52458 +
            (C80487 * C1003 - C82635 * C1055 + C80484 * C2241 - C82642 * C2323 +
             C80495 * C3083 - C44659 * C3175) *
                C52324 +
            (C80487 * C3348 - C82635 * C3441 + C80484 * C3345 - C82642 * C3442 +
             C80495 * C16304 - C44659 * C16353) *
                C52459 +
            (C80487 * C3859 - C82635 * C3945 + C80484 * C3862 - C82642 * C3946 +
             C80495 * C16579 - C44659 * C16625) *
                C82679) *
               C82844 +
           ((C80487 * C694 - C82635 * C754 + C80484 * C1654 - C82642 * C1747 +
             C80495 * C2526 - C44659 * C2654) *
                C52458 +
            (C80487 * C1004 - C82635 * C1056 + C80484 * C2242 - C82642 * C2324 +
             C80495 * C3084 - C44659 * C3176) *
                C52324 +
            (C80487 * C3347 - C82635 * C3443 + C80484 * C3344 - C82642 * C3444 +
             C80495 * C20408 - C44659 * C20478) *
                C52459 +
            (C80487 * C3860 - C82635 * C3947 + C80484 * C3863 - C82642 * C3948 +
             C80495 * C20816 - C44659 * C20884) *
                C82679) *
               C82533) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eezz[16] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C52458 * C240 - C52892 * C102 - C52458 * C497 +
                       C52324 * C608 + C52459 * C1265 - C52893 * C1155 -
                       C52459 * C1463 + C82679 * C1566) *
                          C82635 +
                      (C56084 + C56085) * C82642 + (C56086 + C56087) * C44659) *
                         C82844 +
                     ((C52931 + C52932) * C82635 + (C55150 + C55151) * C82642 +
                      (C55152 + C55153) * C44659) *
                         C82533) *
                        C82938 * C688 -
                    (((C52459 * C20546 - C52893 * C20408 - C52459 * C20816 +
                       C82679 * C20951 + C52458 * C2734 - C52892 * C2526 -
                       C52458 * C3084 + C52324 * C3253) *
                          C44659 +
                      (C55153 + C55152) * C82642 + (C55151 + C55150) * C82635) *
                         C82533 +
                     ((C70278 + C70277) * C44659 + (C56087 + C56086) * C82642 +
                      (C56085 + C56084) * C82635) *
                         C82844) *
                        C82938 * C689) *
                   C82940) /
                  (p * q * std::sqrt(p + q));
    d2eexx[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C80224 * C108 - C19062 * C102 - C80224 * C109 + C82844 * C120 +
             C80205 * C110 - C19064 * C103 - C80205 * C111 + C82533 * C121) *
                C52324 +
            (C22970 + C22971) * C82679) *
               C82635 +
           ((C19773 + C19774) * C52324 + (C22022 + C22023) * C82679) * C82642 +
           ((C19775 + C19776) * C52324 + (C22024 + C22025) * C82679) * C44659) *
              C1149 -
          (((C80205 * C16749 - C19064 * C16746 - C80205 * C16750 +
             C82533 * C16752 + C80224 * C16747 - C19062 * C16745 -
             C80224 * C16748 + C82844 * C16751) *
                C82679 +
            (C22025 + C22024) * C52324) *
               C44659 +
           ((C32303 + C32302) * C82679 + (C22023 + C22022) * C52324) * C82642 +
           ((C33215 + C33214) * C82679 + (C22971 + C22970) * C52324) * C82635) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eexy[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82635 * C169 - C80487 * C102 + C82642 * C753 - C80484 * C695 +
             C44659 * C1746 - C80495 * C1653) *
                C80224 +
            (C82635 * C175 - C80487 * C109 + C82642 * C758 - C80484 * C705 +
             C44659 * C1750 - C80495 * C1658) *
                C82844 +
            (C44744 - C44745 + C44746 - C44747 + C44748 - C44749) * C80205 +
            (C44750 - C44751 + C44752 - C44753 + C44754 - C44755) * C82533) *
               C52324 +
           ((C51534 - C51535 + C51536 - C51537 + C51538 - C51539) * C80224 +
            (C51540 - C51541 + C51542 - C51543 + C51544 - C51545) * C82844 +
            (C49705 - C49706 + C49707 - C49708 + C49709 - C49710) * C80205 +
            (C49711 - C49712 + C49713 - C49714 + C49715 - C49716) * C82533) *
               C82679) *
              C1149 +
          (((C51535 - C51534 + C51537 - C51536 + C51539 - C51538) * C80224 +
            (C51541 - C51540 + C51543 - C51542 + C51545 - C51544) * C82844 +
            (C49706 - C49705 + C49708 - C49707 + C49710 - C49709) * C80205 +
            (C49712 - C49711 + C49714 - C49713 + C49716 - C49715) * C82533) *
               C52324 +
           ((C80487 * C4108 - C82635 * C4198 + C80484 * C4976 - C82642 * C5060 +
             C80495 * C16745 - C44659 * C16827) *
                C80224 +
            (C80487 * C4113 - C82635 * C4202 + C80484 * C4982 - C82642 * C5063 +
             C80495 * C16748 - C44659 * C16829) *
                C82844 +
            (C80487 * C4109 - C82635 * C4199 + C80484 * C4975 - C82642 * C5061 +
             C80495 * C16746 - C44659 * C16828) *
                C80205 +
            (C80487 * C4115 - C82635 * C4203 + C80484 * C4980 - C82642 * C5064 +
             C80495 * C16750 - C44659 * C16830) *
                C82533) *
               C82679) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eexz[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C80224 +
            (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
                C82844 +
            (C52461 - C52462 + C52463 - C52464) * C80205 +
            (C52465 - C52466 + C52467 - C52468) * C82533) *
               C82635 +
           ((C55448 - C55449 + C55450 - C55451) * C80224 +
            (C55452 - C55453 + C55454 - C55455) * C82844 +
            (C54487 - C54488 + C54489 - C54490) * C80205 +
            (C54491 - C54492 + C54493 - C54494) * C82533) *
               C82642 +
           ((C55456 - C55457 + C55458 - C55459) * C80224 +
            (C55460 - C55461 + C55462 - C55463) * C82844 +
            (C54495 - C54496 + C54497 - C54498) * C80205 +
            (C54499 - C54500 + C54501 - C54502) * C82533) *
               C44659) *
              C1149 +
          (((C52458 * C1155 - C52324 * C1265 + C52459 * C4108 -
             C82679 * C4299) *
                C80224 +
            (C52458 * C1165 - C52324 * C1270 + C52459 * C4113 -
             C82679 * C4303) *
                C82844 +
            (C52458 * C1154 - C52324 * C1266 + C52459 * C4109 -
             C82679 * C4300) *
                C80205 +
            (C52458 * C1163 - C52324 * C1271 + C52459 * C4115 -
             C82679 * C4304) *
                C82533) *
               C82635 +
           ((C52458 * C3348 - C52324 * C3527 + C52459 * C4976 -
             C82679 * C5140) *
                C80224 +
            (C52458 * C3360 - C52324 * C3533 + C52459 * C4982 -
             C82679 * C5143) *
                C82844 +
            (C52458 * C3347 - C52324 * C3528 + C52459 * C4975 -
             C82679 * C5141) *
                C80205 +
            (C52458 * C3358 - C52324 * C3534 + C52459 * C4980 -
             C82679 * C5144) *
                C82533) *
               C82642 +
           ((C52458 * C3345 - C52324 * C3530 + C52459 * C16745 -
             C82679 * C16905) *
                C80224 +
            (C52458 * C3354 - C52324 * C3536 + C52459 * C16748 -
             C82679 * C16907) *
                C82844 +
            (C52458 * C3344 - C52324 * C3531 + C52459 * C16746 -
             C82679 * C16906) *
                C80205 +
            (C52458 * C3352 - C52324 * C3537 + C52459 * C16750 -
             C82679 * C16908) *
                C82533) *
               C44659) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyx[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C80487 +
            (C82844 * C316 - C80224 * C310 + C82533 * C317 - C80205 * C311) *
                C82635 +
            (C19977 - C19978 + C19979 - C19980) * C80484 +
            (C19981 - C19982 + C19983 - C19984) * C82642 +
            (C19985 - C19986 + C19987 - C19988) * C80495 +
            (C19989 - C19990 + C19991 - C19992) * C44659) *
               C52324 +
           ((C23266 - C23267 + C23268 - C23269) * C80487 +
            (C23270 - C23271 + C23272 - C23273) * C82635 +
            (C22328 - C22329 + C22330 - C22331) * C80484 +
            (C22332 - C22333 + C22334 - C22335) * C82642 +
            (C22336 - C22337 + C22338 - C22339) * C80495 +
            (C22340 - C22341 + C22342 - C22343) * C44659) *
               C82679) *
              C1149 +
          (((C23267 - C23266 + C23269 - C23268) * C80487 +
            (C23271 - C23270 + C23273 - C23272) * C82635 +
            (C22329 - C22328 + C22331 - C22330) * C80484 +
            (C22333 - C22332 + C22335 - C22334) * C82642 +
            (C22337 - C22336 + C22339 - C22338) * C80495 +
            (C22341 - C22340 + C22343 - C22342) * C44659) *
               C52324 +
           ((C33525 - C33524 + C33527 - C33526) * C80487 +
            (C33529 - C33528 + C33531 - C33530) * C82635 +
            (C32599 - C32598 + C32601 - C32600) * C80484 +
            (C32603 - C32602 + C32605 - C32604) * C82642 +
            (C80224 * C16745 - C82844 * C16747 + C80205 * C16746 -
             C82533 * C16749) *
                C80495 +
            (C80224 * C16983 - C82844 * C16985 + C80205 * C16984 -
             C82533 * C16986) *
                C44659) *
               C82679) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyy[17] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C80487 * C169 - C80539 * C102 - C80487 * C310 +
                       C82635 * C365 + C80484 * C753 - C80532 * C695 -
                       C80484 * C857 + C82642 * C913 + C80495 * C1746 -
                       C44991 * C1653 - C80495 * C1950 + C44659 * C2035) *
                          C82844 +
                      (C45029 + C45030 + C45031) * C82533) *
                         C52324 +
                     ((C51858 + C51859 + C51860) * C82844 +
                      (C50029 + C50030 + C50031) * C82533) *
                         C82679) *
                        C1149 -
                    (((C80495 * C16828 - C44991 * C16746 - C80495 * C16984 +
                       C44659 * C17062 + C80484 * C5061 - C80532 * C4975 -
                       C80484 * C5221 + C82642 * C5301 + C80487 * C4199 -
                       C80539 * C4109 - C80487 * C4406 + C82635 * C4488) *
                          C82533 +
                      (C80495 * C16827 - C44991 * C16745 - C80495 * C16983 +
                       C44659 * C17061 + C80484 * C5060 - C80532 * C4976 -
                       C80484 * C5220 + C82642 * C5302 + C80487 * C4198 -
                       C80539 * C4108 - C80487 * C4405 + C82635 * C4487) *
                          C82844) *
                         C82679 +
                     ((C50031 + C50030 + C50029) * C82533 +
                      (C51860 + C51859 + C51858) * C82844) *
                         C52324) *
                        C1150) *
                   C82939 * C82940) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C80487 +
            (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
                C82635 +
            (C55448 - C55449 + C55450 - C55451) * C80484 +
            (C55758 - C55759 + C55760 - C55761) * C82642 +
            (C55456 - C55457 + C55458 - C55459) * C80495 +
            (C55762 - C55763 + C55764 - C55765) * C44659) *
               C82844 +
           ((C52461 - C52462 + C52463 - C52464) * C80487 +
            (C52683 - C52684 + C52685 - C52686) * C82635 +
            (C54487 - C54488 + C54489 - C54490) * C80484 +
            (C54818 - C54819 + C54820 - C54821) * C82642 +
            (C54495 - C54496 + C54497 - C54498) * C80495 +
            (C54822 - C54823 + C54824 - C54825) * C44659) *
               C82533) *
              C1149 +
          (((C52458 * C1155 - C52324 * C1265 + C52459 * C4108 -
             C82679 * C4299) *
                C80487 +
            (C52458 * C1317 - C52324 * C1416 + C52459 * C4405 -
             C82679 * C4593) *
                C82635 +
            (C52458 * C3348 - C52324 * C3527 + C52459 * C4976 -
             C82679 * C5140) *
                C80484 +
            (C52458 * C3613 - C52324 * C3779 + C52459 * C5220 -
             C82679 * C5377) *
                C82642 +
            (C52458 * C3345 - C52324 * C3530 + C52459 * C16745 -
             C82679 * C16905) *
                C80495 +
            (C52458 * C3616 - C52324 * C3780 + C52459 * C16983 -
             C82679 * C17137) *
                C44659) *
               C82844 +
           ((C52458 * C1154 - C52324 * C1266 + C52459 * C4109 -
             C82679 * C4300) *
                C80487 +
            (C52458 * C1318 - C52324 * C1417 + C52459 * C4406 -
             C82679 * C4594) *
                C82635 +
            (C52458 * C3347 - C52324 * C3528 + C52459 * C4975 -
             C82679 * C5141) *
                C80484 +
            (C52458 * C3614 - C52324 * C3781 + C52459 * C5221 -
             C82679 * C5378) *
                C82642 +
            (C52458 * C3344 - C52324 * C3531 + C52459 * C16746 -
             C82679 * C16906) *
                C80495 +
            (C52458 * C3617 - C52324 * C3782 + C52459 * C16984 -
             C82679 * C17138) *
                C44659) *
               C82533) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eezx[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C52458 +
            (C82844 * C503 - C80224 * C497 + C82533 * C504 - C80205 * C498) *
                C52324 +
            (C23266 - C23267 + C23268 - C23269) * C52459 +
            (C23568 - C23569 + C23570 - C23571) * C82679) *
               C82635 +
           ((C19977 - C19978 + C19979 - C19980) * C52458 +
            (C20199 - C20200 + C20201 - C20202) * C52324 +
            (C22328 - C22329 + C22330 - C22331) * C52459 +
            (C22642 - C22643 + C22644 - C22645) * C82679) *
               C82642 +
           ((C19985 - C19986 + C19987 - C19988) * C52458 +
            (C20203 - C20204 + C20205 - C20206) * C52324 +
            (C22336 - C22337 + C22338 - C22339) * C52459 +
            (C22646 - C22647 + C22648 - C22649) * C82679) *
               C44659) *
              C1149 +
          (((C23267 - C23266 + C23269 - C23268) * C52458 +
            (C23569 - C23568 + C23571 - C23570) * C52324 +
            (C33525 - C33524 + C33527 - C33526) * C52459 +
            (C33845 - C33844 + C33847 - C33846) * C82679) *
               C82635 +
           ((C22329 - C22328 + C22331 - C22330) * C52458 +
            (C22643 - C22642 + C22645 - C22644) * C52324 +
            (C32599 - C32598 + C32601 - C32600) * C52459 +
            (C32901 - C32900 + C32903 - C32902) * C82679) *
               C82642 +
           ((C22337 - C22336 + C22339 - C22338) * C52458 +
            (C22647 - C22646 + C22649 - C22648) * C52324 +
            (C80224 * C16745 - C82844 * C16747 + C80205 * C16746 -
             C82533 * C16749) *
                C52459 +
            (C80224 * C17213 - C82844 * C17215 + C80205 * C17214 -
             C82533 * C17216) *
                C82679) *
               C44659) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eezy[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82635 * C169 - C80487 * C102 + C82642 * C753 - C80484 * C695 +
             C44659 * C1746 - C80495 * C1653) *
                C52458 +
            (C82635 * C551 - C80487 * C497 + C82642 * C1055 - C80484 * C1003 +
             C44659 * C2323 - C80495 * C2241) *
                C52324 +
            (C51534 - C51535 + C51536 - C51537 + C51538 - C51539) * C52459 +
            (C52155 - C52156 + C52157 - C52158 + C52159 - C52160) * C82679) *
               C82844 +
           ((C44744 - C44745 + C44746 - C44747 + C44748 - C44749) * C52458 +
            (C45257 - C45258 + C45259 - C45260 + C45261 - C45262) * C52324 +
            (C49705 - C49706 + C49707 - C49708 + C49709 - C49710) * C52459 +
            (C50326 - C50327 + C50328 - C50329 + C50330 - C50331) * C82679) *
               C82533) *
              C1149 +
          (((C51535 - C51534 + C51537 - C51536 + C51539 - C51538) * C52458 +
            (C52156 - C52155 + C52158 - C52157 + C52160 - C52159) * C52324 +
            (C80487 * C4108 - C82635 * C4198 + C80484 * C4976 - C82642 * C5060 +
             C80495 * C16745 - C44659 * C16827) *
                C52459 +
            (C80487 * C4683 - C82635 * C4765 + C80484 * C5454 - C82642 * C5534 +
             C80495 * C17213 - C44659 * C17291) *
                C82679) *
               C82844 +
           ((C49706 - C49705 + C49708 - C49707 + C49710 - C49709) * C52458 +
            (C50327 - C50326 + C50329 - C50328 + C50331 - C50330) * C52324 +
            (C80487 * C4109 - C82635 * C4199 + C80484 * C4975 - C82642 * C5061 +
             C80495 * C16746 - C44659 * C16828) *
                C52459 +
            (C80487 * C4684 - C82635 * C4766 + C80484 * C5455 - C82642 * C5535 +
             C80495 * C17214 - C44659 * C17292) *
                C82679) *
               C82533) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eezz[17] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C52458 * C240 - C52892 * C102 - C52458 * C497 +
                       C52324 * C608 + C52459 * C1265 - C52893 * C1155 -
                       C52459 * C1463 + C82679 * C1566) *
                          C82635 +
                      (C56084 + C56085) * C82642 + (C56086 + C56087) * C44659) *
                         C82844 +
                     ((C52931 + C52932) * C82635 + (C55150 + C55151) * C82642 +
                      (C55152 + C55153) * C44659) *
                         C82533) *
                        C1149 -
                    (((C52459 * C16906 - C52893 * C16746 - C52459 * C17214 +
                       C82679 * C17368 + C52458 * C3531 - C52892 * C3344 -
                       C52458 * C3863 + C52324 * C4027) *
                          C44659 +
                      (C52459 * C5141 - C52893 * C4975 - C52459 * C5455 +
                       C82679 * C5612 + C52458 * C3528 - C52892 * C3347 -
                       C52458 * C3860 + C52324 * C4028) *
                          C82642 +
                      (C52459 * C4300 - C52893 * C4109 - C52459 * C4684 +
                       C82679 * C4855 + C52458 * C1266 - C52892 * C1154 -
                       C52458 * C1464 + C52324 * C1565) *
                          C82635) *
                         C82533 +
                     ((C52459 * C16905 - C52893 * C16745 - C52459 * C17213 +
                       C82679 * C17367 + C52458 * C3530 - C52892 * C3345 -
                       C52458 * C3862 + C52324 * C4029) *
                          C44659 +
                      (C52459 * C5140 - C52893 * C4976 - C52459 * C5454 +
                       C82679 * C5613 + C52458 * C3527 - C52892 * C3348 -
                       C52458 * C3859 + C52324 * C4030) *
                          C82642 +
                      (C52459 * C4299 - C52893 * C4108 - C52459 * C4683 +
                       C82679 * C4854 + C52458 * C1265 - C52892 * C1155 -
                       C52458 * C1463 + C52324 * C1566) *
                          C82635) *
                         C82844) *
                        C1150) *
                   C82939 * C82940) /
                  (p * q * std::sqrt(p + q));
    d2eexx[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C82675 +
            C18282 * C82682 + C18283 * C61595) *
               C82635 +
           (C15856 * C82675 + C17474 * C82682 + C17475 * C61595) * C82642 +
           (C15857 * C82675 + C17476 * C82682 + C17477 * C61595) * C44659) *
              C82938 * C82939 * C90 -
          (((C15405 * C16749 - C15406 * C16746 - C15405 * C16750 +
             C82523 * C16752) *
                C61595 +
            (C15405 * C3351 - C15406 * C3344 - C15405 * C3352 +
             C82523 * C3362) *
                C82682 +
            (C15405 * C1659 - C15406 * C1654 - C15405 * C1660 +
             C82523 * C1666) *
                C82675) *
               C44659 +
           ((C15405 * C4979 - C15406 * C4975 - C15405 * C4980 +
             C82523 * C4984) *
                C61595 +
            (C15405 * C3357 - C15406 * C3347 - C15405 * C3358 +
             C82523 * C3365) *
                C82682 +
            (C15405 * C702 - C15406 * C694 - C15405 * C703 + C82523 * C709) *
                C82675) *
               C82642 +
           ((C15405 * C4114 - C15406 * C4109 - C15405 * C4115 +
             C82523 * C4121) *
                C61595 +
            (C15405 * C1162 - C15406 * C1154 - C15405 * C1163 +
             C82523 * C1169) *
                C82682 +
            (C15405 * C110 - C15406 * C103 - C15405 * C111 + C82523 * C121) *
                C82675) *
               C82635) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexy[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82635 * C169 - C80487 * C102 + C82642 * C753 - C80484 * C695 +
             C44659 * C1746 - C80495 * C1653) *
                C15405 +
            (C82635 * C175 - C80487 * C109 + C82642 * C758 - C80484 * C705 +
             C44659 * C1750 - C80495 * C1658) *
                C82523) *
               C82675 +
           ((C51534 - C51535 + C51536 - C51537 + C51538 - C51539) * C15405 +
            (C51540 - C51541 + C51542 - C51543 + C51544 - C51545) * C82523) *
               C82682 +
           ((C82635 * C4198 - C80487 * C4108 + C82642 * C5060 - C80484 * C4976 +
             C44659 * C16827 - C80495 * C16745) *
                C15405 +
            (C82635 * C4202 - C80487 * C4113 + C82642 * C5063 - C80484 * C4982 +
             C44659 * C16829 - C80495 * C16748) *
                C82523) *
               C61595) *
              C82938 * C82939 * C90 +
          (((C44745 - C44744 + C44747 - C44746 + C44749 - C44748) * C15405 +
            (C44751 - C44750 + C44753 - C44752 + C44755 - C44754) * C82523) *
               C82675 +
           ((C49706 - C49705 + C49708 - C49707 + C49710 - C49709) * C15405 +
            (C49712 - C49711 + C49714 - C49713 + C49716 - C49715) * C82523) *
               C82682 +
           ((C80487 * C4109 - C82635 * C4199 + C80484 * C4975 - C82642 * C5061 +
             C80495 * C16746 - C44659 * C16828) *
                C15405 +
            (C80487 * C4115 - C82635 * C4203 + C80484 * C4980 - C82642 * C5064 +
             C80495 * C16750 - C44659 * C16830) *
                C82523) *
               C61595) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexz[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82675 * C240 - C80637 * C102 + C82682 * C1265 - C80634 * C1155 +
             C61595 * C4299 - C80645 * C4108) *
                C15405 +
            (C82675 * C246 - C80637 * C109 + C82682 * C1270 - C80634 * C1165 +
             C61595 * C4303 - C80645 * C4113) *
                C82523) *
               C82635 +
           ((C64865 - C64866 + C64867 - C64868 + C64869 - C64870) * C15405 +
            (C64871 - C64872 + C64873 - C64874 + C64875 - C64876) * C82523) *
               C82642 +
           ((C82675 * C1852 - C80637 * C1653 + C82682 * C3530 - C80634 * C3345 +
             C61595 * C16905 - C80645 * C16745) *
                C15405 +
            (C82675 * C1856 - C80637 * C1658 + C82682 * C3536 - C80634 * C3354 +
             C61595 * C16907 - C80645 * C16748) *
                C82523) *
               C44659) *
              C82938 * C82939 * C90 +
          (((C61749 - C61748 + C61751 - C61750 + C61753 - C61752) * C15405 +
            (C61755 - C61754 + C61757 - C61756 + C61759 - C61758) * C82523) *
               C82635 +
           ((C63945 - C63944 + C63947 - C63946 + C63949 - C63948) * C15405 +
            (C63951 - C63950 + C63953 - C63952 + C63955 - C63954) * C82523) *
               C82642 +
           ((C80637 * C1654 - C82675 * C1853 + C80634 * C3344 - C82682 * C3531 +
             C80645 * C16746 - C61595 * C16906) *
                C15405 +
            (C80637 * C1660 - C82675 * C1857 + C80634 * C3352 - C82682 * C3537 +
             C80645 * C16750 - C61595 * C16908) *
                C82523) *
               C44659) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82523 * C108 - C15405 * C102) * C80487 +
                      (C82523 * C316 - C15405 * C310) * C82635 +
                      (C16004 - C16005) * C80484 + (C16006 - C16007) * C82642 +
                      (C16008 - C16009) * C80495 + (C16010 - C16011) * C44659) *
                         C82675 +
                     ((C18542 - C18543) * C80487 + (C18544 - C18545) * C82635 +
                      (C17734 - C17735) * C80484 + (C17736 - C17737) * C82642 +
                      (C17738 - C17739) * C80495 + (C17740 - C17741) * C44659) *
                         C82682 +
                     ((C18546 - C18547) * C80487 + (C18548 - C18549) * C82635 +
                      (C17742 - C17743) * C80484 + (C17744 - C17745) * C82642 +
                      (C17746 - C17747) * C80495 + (C17748 - C17749) * C44659) *
                         C61595) *
                        C82938 * C82939 * C90 +
                    (((C15405 * C103 - C82523 * C110) * C80487 +
                      (C15405 * C311 - C82523 * C317) * C82635 +
                      (C15405 * C694 - C82523 * C702) * C80484 +
                      (C15405 * C858 - C82523 * C863) * C82642 +
                      (C15405 * C1654 - C82523 * C1659) * C80495 +
                      (C15405 * C1951 - C82523 * C1955) * C44659) *
                         C82675 +
                     ((C15405 * C1154 - C82523 * C1162) * C80487 +
                      (C15405 * C1318 - C82523 * C1323) * C82635 +
                      (C15405 * C3347 - C82523 * C3357) * C80484 +
                      (C15405 * C3614 - C82523 * C3620) * C82642 +
                      (C15405 * C3344 - C82523 * C3351) * C80495 +
                      (C15405 * C3617 - C82523 * C3623) * C44659) *
                         C82682 +
                     ((C15405 * C4109 - C82523 * C4114) * C80487 +
                      (C15405 * C4406 - C82523 * C4410) * C82635 +
                      (C15405 * C4975 - C82523 * C4979) * C80484 +
                      (C15405 * C5221 - C82523 * C5224) * C82642 +
                      (C15405 * C16746 - C82523 * C16749) * C80495 +
                      (C15405 * C16984 - C82523 * C16986) * C44659) *
                         C61595) *
                        C82938 * C82939 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C80487 * C169 - C80539 * C102 - C80487 * C310 + C82635 * C365 +
            C80484 * C753 - C80532 * C695 - C80484 * C857 + C82642 * C913 +
            C80495 * C1746 - C44991 * C1653 - C80495 * C1950 + C44659 * C2035) *
               C82523 * C82675 +
           (C51858 + C51859 + C51860) * C82523 * C82682 +
           (C80487 * C4198 - C80539 * C4108 - C80487 * C4405 + C82635 * C4487 +
            C80484 * C5060 - C80532 * C4976 - C80484 * C5220 + C82642 * C5302 +
            C80495 * C16827 - C44991 * C16745 - C80495 * C16983 +
            C44659 * C17061) *
               C82523 * C61595) *
              C82938 * C82939 * C90 -
          ((C80495 * C16828 - C44991 * C16746 - C80495 * C16984 +
            C44659 * C17062 + C80484 * C5061 - C80532 * C4975 - C80484 * C5221 +
            C82642 * C5301 + C80487 * C4199 - C80539 * C4109 - C80487 * C4406 +
            C82635 * C4488) *
               C82523 * C61595 +
           (C50031 + C50030 + C50029) * C82523 * C82682 +
           (C45031 + C45030 + C45029) * C82523 * C82675) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C82675 * C240 - C80637 * C102 + C82682 * C1265 - C80634 * C1155 +
            C61595 * C4299 - C80645 * C4108) *
               C80487 +
           (C82675 * C441 - C80637 * C310 + C82682 * C1416 - C80634 * C1317 +
            C61595 * C4593 - C80645 * C4405) *
               C82635 +
           (C64865 - C64866 + C64867 - C64868 + C64869 - C64870) * C80484 +
           (C65171 - C65172 + C65173 - C65174 + C65175 - C65176) * C82642 +
           (C82675 * C1852 - C80637 * C1653 + C82682 * C3530 - C80634 * C3345 +
            C61595 * C16905 - C80645 * C16745) *
               C80495 +
           (C82675 * C2155 - C80637 * C1950 + C82682 * C3780 - C80634 * C3616 +
            C61595 * C17137 - C80645 * C16983) *
               C44659) *
              C82523 * C82938 * C82939 * C90 +
          ((C61749 - C61748 + C61751 - C61750 + C61753 - C61752) * C80487 +
           (C61995 - C61994 + C61997 - C61996 + C61999 - C61998) * C82635 +
           (C63945 - C63944 + C63947 - C63946 + C63949 - C63948) * C80484 +
           (C64251 - C64250 + C64253 - C64252 + C64255 - C64254) * C82642 +
           (C80637 * C1654 - C82675 * C1853 + C80634 * C3344 - C82682 * C3531 +
            C80645 * C16746 - C61595 * C16906) *
               C80495 +
           (C80637 * C1951 - C82675 * C2156 + C80634 * C3617 - C82682 * C3782 +
            C80645 * C16984 - C61595 * C17138) *
               C44659) *
              C82523 * C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezx[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82523 * C108 - C15405 * C102) * C80637 +
                      (C82523 * C503 - C15405 * C497) * C82675 +
                      (C18542 - C18543) * C80634 + (C18822 - C18823) * C82682 +
                      (C18546 - C18547) * C80645 + (C18824 - C18825) * C61595) *
                         C82635 +
                     ((C16004 - C16005) * C80637 + (C16154 - C16155) * C82675 +
                      (C17734 - C17735) * C80634 + (C17988 - C17989) * C82682 +
                      (C17742 - C17743) * C80645 + (C17990 - C17991) * C61595) *
                         C82642 +
                     ((C16008 - C16009) * C80637 + (C16156 - C16157) * C82675 +
                      (C17738 - C17739) * C80634 + (C17992 - C17993) * C82682 +
                      (C17746 - C17747) * C80645 + (C17994 - C17995) * C61595) *
                         C44659) *
                        C82938 * C82939 * C90 +
                    (((C15405 * C103 - C82523 * C110) * C80637 +
                      (C15405 * C498 - C82523 * C504) * C82675 +
                      (C15405 * C1154 - C82523 * C1162) * C80634 +
                      (C15405 * C1464 - C82523 * C1469) * C82682 +
                      (C15405 * C4109 - C82523 * C4114) * C80645 +
                      (C15405 * C4684 - C82523 * C4688) * C61595) *
                         C82635 +
                     ((C15405 * C694 - C82523 * C702) * C80637 +
                      (C15405 * C1004 - C82523 * C1009) * C82675 +
                      (C15405 * C3347 - C82523 * C3357) * C80634 +
                      (C15405 * C3860 - C82523 * C3866) * C82682 +
                      (C15405 * C4975 - C82523 * C4979) * C80645 +
                      (C15405 * C5455 - C82523 * C5458) * C61595) *
                         C82642 +
                     ((C15405 * C1654 - C82523 * C1659) * C80637 +
                      (C15405 * C2242 - C82523 * C2246) * C82675 +
                      (C15405 * C3344 - C82523 * C3351) * C80634 +
                      (C15405 * C3863 - C82523 * C3869) * C82682 +
                      (C15405 * C16746 - C82523 * C16749) * C80645 +
                      (C15405 * C17214 - C82523 * C17216) * C61595) *
                         C44659) *
                        C82938 * C82939 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C82635 * C169 - C80487 * C102 + C82642 * C753 - C80484 * C695 +
            C44659 * C1746 - C80495 * C1653) *
               C80637 +
           (C82635 * C551 - C80487 * C497 + C82642 * C1055 - C80484 * C1003 +
            C44659 * C2323 - C80495 * C2241) *
               C82675 +
           (C51534 - C51535 + C51536 - C51537 + C51538 - C51539) * C80634 +
           (C52155 - C52156 + C52157 - C52158 + C52159 - C52160) * C82682 +
           (C82635 * C4198 - C80487 * C4108 + C82642 * C5060 - C80484 * C4976 +
            C44659 * C16827 - C80495 * C16745) *
               C80645 +
           (C82635 * C4765 - C80487 * C4683 + C82642 * C5534 - C80484 * C5454 +
            C44659 * C17291 - C80495 * C17213) *
               C61595) *
              C82523 * C82938 * C82939 * C90 +
          ((C44745 - C44744 + C44747 - C44746 + C44749 - C44748) * C80637 +
           (C45258 - C45257 + C45260 - C45259 + C45262 - C45261) * C82675 +
           (C49706 - C49705 + C49708 - C49707 + C49710 - C49709) * C80634 +
           (C50327 - C50326 + C50329 - C50328 + C50331 - C50330) * C82682 +
           (C80487 * C4109 - C82635 * C4199 + C80484 * C4975 - C82642 * C5061 +
            C80495 * C16746 - C44659 * C16828) *
               C80645 +
           (C80487 * C4684 - C82635 * C4766 + C80484 * C5455 - C82642 * C5535 +
            C80495 * C17214 - C44659 * C17292) *
               C61595) *
              C82523 * C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezz[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C80637 * C240 - C80689 * C102 - C80637 * C497 + C82675 * C608 +
            C80634 * C1265 - C80682 * C1155 - C80634 * C1463 + C82682 * C1566 +
            C80645 * C4299 - C62229 * C4108 - C80645 * C4683 + C61595 * C4854) *
               C82635 +
           (C65489 + C65490 + C65491) * C82642 +
           (C80637 * C1852 - C80689 * C1653 - C80637 * C2241 + C82675 * C2413 +
            C80634 * C3530 - C80682 * C3345 - C80634 * C3862 + C82682 * C4029 +
            C80645 * C16905 - C62229 * C16745 - C80645 * C17213 +
            C61595 * C17367) *
               C44659) *
              C82523 * C82938 * C82939 * C90 -
          ((C80645 * C16906 - C62229 * C16746 - C80645 * C17214 +
            C61595 * C17368 + C80634 * C3531 - C80682 * C3344 - C80634 * C3863 +
            C82682 * C4027 + C80637 * C1853 - C80689 * C1654 - C80637 * C2242 +
            C82675 * C2414) *
               C44659 +
           (C64570 + C64569 + C64568) * C82642 +
           (C62269 + C62268 + C62267) * C82635) *
              C82523 * C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexx[19] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C82675 +
            C18282 * C82682 + C18283 * C61595) *
               C82635 +
           (C78821 + C78822 + C78823) * C82642 +
           (C78824 + C78825 + C78826) * C44659) *
              C82938 * C688 -
          (((C15405 * C17444 - C15406 * C17443 - C15405 * C17445 +
             C82523 * C17446) *
                C61595 +
            C24439 * C82682 + C15858 * C82675) *
               C44659 +
           (C78826 + C78825 + C78824) * C82642 +
           (C78823 + C78822 + C78821) * C82635) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eexy[19] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82635 * C169 - C80487 * C102 + C82642 * C753 - C80484 * C695 +
             C44659 * C1746 - C80495 * C1653) *
                C15405 +
            (C82635 * C175 - C80487 * C109 + C82642 * C758 - C80484 * C705 +
             C44659 * C1750 - C80495 * C1658) *
                C82523) *
               C82675 +
           ((C51534 - C51535 + C51536 - C51537 + C51538 - C51539) * C15405 +
            (C51540 - C51541 + C51542 - C51543 + C51544 - C51545) * C82523) *
               C82682 +
           ((C82635 * C4198 - C80487 * C4108 + C82642 * C5060 - C80484 * C4976 +
             C44659 * C16827 - C80495 * C16745) *
                C15405 +
            (C82635 * C4202 - C80487 * C4113 + C82642 * C5063 - C80484 * C4982 +
             C44659 * C16829 - C80495 * C16748) *
                C82523) *
               C61595) *
              C82938 * C688 +
          (((C80487 * C695 - C82635 * C753 + C80484 * C1653 - C82642 * C1746 +
             C80495 * C2527 - C44659 * C2653) *
                C15405 +
            (C80487 * C705 - C82635 * C758 + C80484 * C1658 - C82642 * C1750 +
             C80495 * C2533 - C44659 * C2656) *
                C82523) *
               C82675 +
           ((C80487 * C3348 - C82635 * C3441 + C80484 * C3345 - C82642 * C3442 +
             C80495 * C16304 - C44659 * C16353) *
                C15405 +
            (C80487 * C3360 - C82635 * C3447 + C80484 * C3354 - C82642 * C3448 +
             C80495 * C16308 - C44659 * C16355) *
                C82523) *
               C82682 +
           ((C80487 * C4976 - C82635 * C5060 + C80484 * C16745 -
             C82642 * C16827 + C80495 * C17443 - C44659 * C17555) *
                C15405 +
            (C80487 * C4982 - C82635 * C5063 + C80484 * C16748 -
             C82642 * C16829 + C80495 * C17445 - C44659 * C17556) *
                C82523) *
               C61595) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eexz[19] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82675 * C240 - C80637 * C102 + C82682 * C1265 - C80634 * C1155 +
             C61595 * C4299 - C80645 * C4108) *
                C15405 +
            (C82675 * C246 - C80637 * C109 + C82682 * C1270 - C80634 * C1165 +
             C61595 * C4303 - C80645 * C4113) *
                C82523) *
               C82635 +
           ((C64865 - C64866 + C64867 - C64868 + C64869 - C64870) * C15405 +
            (C64871 - C64872 + C64873 - C64874 + C64875 - C64876) * C82523) *
               C82642 +
           ((C78975 - C78976 + C78977 - C78978 + C78979 - C78980) * C15405 +
            (C78981 - C78982 + C78983 - C78984 + C78985 - C78986) * C82523) *
               C44659) *
              C82938 * C688 +
          (((C64866 - C64865 + C64868 - C64867 + C64870 - C64869) * C15405 +
            (C64872 - C64871 + C64874 - C64873 + C64876 - C64875) * C82523) *
               C82635 +
           ((C78976 - C78975 + C78978 - C78977 + C78980 - C78979) * C15405 +
            (C78982 - C78981 + C78984 - C78983 + C78986 - C78985) * C82523) *
               C82642 +
           ((C80637 * C2527 - C82675 * C2733 + C80634 * C16304 -
             C82682 * C16399 + C80645 * C17443 - C61595 * C17631) *
                C15405 +
            (C80637 * C2533 - C82675 * C2736 + C80634 * C16308 -
             C82682 * C16401 + C80645 * C17445 - C61595 * C17632) *
                C82523) *
               C44659) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyx[19] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82523 * C108 - C15405 * C102) * C80487 +
                      (C82523 * C316 - C15405 * C310) * C82635 +
                      (C16004 - C16005) * C80484 + (C16006 - C16007) * C82642 +
                      (C16008 - C16009) * C80495 + (C16010 - C16011) * C44659) *
                         C82675 +
                     ((C18542 - C18543) * C80487 + (C18544 - C18545) * C82635 +
                      (C17734 - C17735) * C80484 + (C17736 - C17737) * C82642 +
                      (C17738 - C17739) * C80495 + (C17740 - C17741) * C44659) *
                         C82682 +
                     ((C18546 - C18547) * C80487 + (C18548 - C18549) * C82635 +
                      (C17742 - C17743) * C80484 + (C17744 - C17745) * C82642 +
                      (C17746 - C17747) * C80495 + (C17748 - C17749) * C44659) *
                         C61595) *
                        C82938 * C688 +
                    (((C16005 - C16004) * C80487 + (C16007 - C16006) * C82635 +
                      (C16009 - C16008) * C80484 + (C16011 - C16010) * C82642 +
                      (C16013 - C16012) * C80495 + (C16015 - C16014) * C44659) *
                         C82675 +
                     ((C17735 - C17734) * C80487 + (C17737 - C17736) * C82635 +
                      (C17739 - C17738) * C80484 + (C17741 - C17740) * C82642 +
                      (C24648 - C24647) * C80495 + (C24650 - C24649) * C44659) *
                         C82682 +
                     ((C17743 - C17742) * C80487 + (C17745 - C17744) * C82635 +
                      (C17747 - C17746) * C80484 + (C17749 - C17748) * C82642 +
                      (C15405 * C17443 - C82523 * C17444) * C80495 +
                      (C15405 * C17731 - C82523 * C17732) * C44659) *
                         C61595) *
                        C82938 * C689) *
                   C82940) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[19] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C80487 * C169 - C80539 * C102 - C80487 * C310 + C82635 * C365 +
            C80484 * C753 - C80532 * C695 - C80484 * C857 + C82642 * C913 +
            C80495 * C1746 - C44991 * C1653 - C80495 * C1950 + C44659 * C2035) *
               C82523 * C82675 +
           (C51858 + C51859 + C51860) * C82523 * C82682 +
           (C80487 * C4198 - C80539 * C4108 - C80487 * C4405 + C82635 * C4487 +
            C80484 * C5060 - C80532 * C4976 - C80484 * C5220 + C82642 * C5302 +
            C80495 * C16827 - C44991 * C16745 - C80495 * C16983 +
            C44659 * C17061) *
               C82523 * C61595) *
              C82938 * C688 -
          ((C80495 * C17555 - C44991 * C17443 - C80495 * C17731 +
            C44659 * C17823 + C80484 * C16827 - C80532 * C16745 -
            C80484 * C16983 + C82642 * C17061 + C80487 * C5060 -
            C80539 * C4976 - C80487 * C5220 + C82635 * C5302) *
               C82523 * C61595 +
           (C80495 * C16353 - C44991 * C16304 - C80495 * C16445 +
            C44659 * C16492 + C80484 * C3442 - C80532 * C3345 - C80484 * C3616 +
            C82642 * C3703 + C80487 * C3441 - C80539 * C3348 - C80487 * C3613 +
            C82635 * C3704) *
               C82523 * C82682 +
           (C80495 * C2653 - C44991 * C2527 - C80495 * C2821 + C44659 * C2927 +
            C80484 * C1746 - C80532 * C1653 - C80484 * C1950 + C82642 * C2035 +
            C80487 * C753 - C80539 * C695 - C80487 * C857 + C82635 * C913) *
               C82523 * C82675) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyz[19] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C82675 * C240 - C80637 * C102 + C82682 * C1265 - C80634 * C1155 +
            C61595 * C4299 - C80645 * C4108) *
               C80487 +
           (C82675 * C441 - C80637 * C310 + C82682 * C1416 - C80634 * C1317 +
            C61595 * C4593 - C80645 * C4405) *
               C82635 +
           (C64865 - C64866 + C64867 - C64868 + C64869 - C64870) * C80484 +
           (C65171 - C65172 + C65173 - C65174 + C65175 - C65176) * C82642 +
           (C78975 - C78976 + C78977 - C78978 + C78979 - C78980) * C80495 +
           (C79209 - C79210 + C79211 - C79212 + C79213 - C79214) * C44659) *
              C82523 * C82938 * C688 +
          ((C64866 - C64865 + C64868 - C64867 + C64870 - C64869) * C80487 +
           (C65172 - C65171 + C65174 - C65173 + C65176 - C65175) * C82635 +
           (C78976 - C78975 + C78978 - C78977 + C78980 - C78979) * C80484 +
           (C79210 - C79209 + C79212 - C79211 + C79214 - C79213) * C82642 +
           (C80637 * C2527 - C82675 * C2733 + C80634 * C16304 -
            C82682 * C16399 + C80645 * C17443 - C61595 * C17631) *
               C80495 +
           (C80637 * C2821 - C82675 * C3002 + C80634 * C16445 -
            C82682 * C16535 + C80645 * C17731 - C61595 * C17898) *
               C44659) *
              C82523 * C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eezx[19] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82523 * C108 - C15405 * C102) * C80637 +
                      (C82523 * C503 - C15405 * C497) * C82675 +
                      (C18542 - C18543) * C80634 + (C18822 - C18823) * C82682 +
                      (C18546 - C18547) * C80645 + (C18824 - C18825) * C61595) *
                         C82635 +
                     ((C16004 - C16005) * C80637 + (C16154 - C16155) * C82675 +
                      (C17734 - C17735) * C80634 + (C17988 - C17989) * C82682 +
                      (C17742 - C17743) * C80645 + (C17990 - C17991) * C61595) *
                         C82642 +
                     ((C16008 - C16009) * C80637 + (C16156 - C16157) * C82675 +
                      (C17738 - C17739) * C80634 + (C17992 - C17993) * C82682 +
                      (C17746 - C17747) * C80645 + (C17994 - C17995) * C61595) *
                         C44659) *
                        C82938 * C688 +
                    (((C16005 - C16004) * C80637 + (C16155 - C16154) * C82675 +
                      (C17735 - C17734) * C80634 + (C17989 - C17988) * C82682 +
                      (C17743 - C17742) * C80645 + (C17991 - C17990) * C61595) *
                         C82635 +
                     ((C16009 - C16008) * C80637 + (C16157 - C16156) * C82675 +
                      (C17739 - C17738) * C80634 + (C17993 - C17992) * C82682 +
                      (C17747 - C17746) * C80645 + (C17995 - C17994) * C61595) *
                         C82642 +
                     ((C16013 - C16012) * C80637 + (C16159 - C16158) * C82675 +
                      (C24648 - C24647) * C80634 + (C24854 - C24853) * C82682 +
                      (C15405 * C17443 - C82523 * C17444) * C80645 +
                      (C15405 * C17985 - C82523 * C17986) * C61595) *
                         C44659) *
                        C82938 * C689) *
                   C82940) /
                  (p * q * std::sqrt(p + q));
    d2eezy[19] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C82635 * C169 - C80487 * C102 + C82642 * C753 - C80484 * C695 +
            C44659 * C1746 - C80495 * C1653) *
               C80637 +
           (C82635 * C551 - C80487 * C497 + C82642 * C1055 - C80484 * C1003 +
            C44659 * C2323 - C80495 * C2241) *
               C82675 +
           (C51534 - C51535 + C51536 - C51537 + C51538 - C51539) * C80634 +
           (C52155 - C52156 + C52157 - C52158 + C52159 - C52160) * C82682 +
           (C82635 * C4198 - C80487 * C4108 + C82642 * C5060 - C80484 * C4976 +
            C44659 * C16827 - C80495 * C16745) *
               C80645 +
           (C82635 * C4765 - C80487 * C4683 + C82642 * C5534 - C80484 * C5454 +
            C44659 * C17291 - C80495 * C17213) *
               C61595) *
              C82523 * C82938 * C688 +
          ((C80487 * C695 - C82635 * C753 + C80484 * C1653 - C82642 * C1746 +
            C80495 * C2527 - C44659 * C2653) *
               C80637 +
           (C80487 * C1003 - C82635 * C1055 + C80484 * C2241 - C82642 * C2323 +
            C80495 * C3083 - C44659 * C3175) *
               C82675 +
           (C80487 * C3348 - C82635 * C3441 + C80484 * C3345 - C82642 * C3442 +
            C80495 * C16304 - C44659 * C16353) *
               C80634 +
           (C80487 * C3859 - C82635 * C3945 + C80484 * C3862 - C82642 * C3946 +
            C80495 * C16579 - C44659 * C16625) *
               C82682 +
           (C80487 * C4976 - C82635 * C5060 + C80484 * C16745 -
            C82642 * C16827 + C80495 * C17443 - C44659 * C17555) *
               C80645 +
           (C80487 * C5454 - C82635 * C5534 + C80484 * C17213 -
            C82642 * C17291 + C80495 * C17985 - C44659 * C18069) *
               C61595) *
              C82523 * C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eezz[19] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C80637 * C240 - C80689 * C102 - C80637 * C497 + C82675 * C608 +
            C80634 * C1265 - C80682 * C1155 - C80634 * C1463 + C82682 * C1566 +
            C80645 * C4299 - C62229 * C4108 - C80645 * C4683 + C61595 * C4854) *
               C82635 +
           (C65489 + C65490 + C65491) * C82642 +
           (C79455 + C79456 + C79457) * C44659) *
              C82523 * C82938 * C688 -
          ((C80645 * C17631 - C62229 * C17443 - C80645 * C17985 +
            C61595 * C18144 + C80634 * C16399 - C80682 * C16304 -
            C80634 * C16579 + C82682 * C16670 + C80637 * C2733 -
            C80689 * C2527 - C80637 * C3083 + C82675 * C3254) *
               C44659 +
           (C79457 + C79456 + C79455) * C82642 +
           (C65491 + C65490 + C65489) * C82635) *
              C82523 * C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eexx[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C82675 +
            C18282 * C82682 + C18283 * C61595) *
               C82635 +
           (C78821 + C78822 + C78823) * C82642 +
           (C78824 + C78825 + C78826) * C44659) *
              C1149 -
          (((C15405 * C18263 - C15406 * C18261 - C15405 * C18264 +
             C82523 * C18267) *
                C61595 +
            C17477 * C82682 + C17476 * C82675) *
               C44659 +
           (C36610 * C61595 + C17475 * C82682 + C17474 * C82675) * C82642 +
           (C30853 * C61595 + C18283 * C82682 + C18282 * C82675) * C82635) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eexy[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82635 * C169 - C80487 * C102 + C82642 * C753 - C80484 * C695 +
             C44659 * C1746 - C80495 * C1653) *
                C15405 +
            (C82635 * C175 - C80487 * C109 + C82642 * C758 - C80484 * C705 +
             C44659 * C1750 - C80495 * C1658) *
                C82523) *
               C82675 +
           ((C51534 - C51535 + C51536 - C51537 + C51538 - C51539) * C15405 +
            (C51540 - C51541 + C51542 - C51543 + C51544 - C51545) * C82523) *
               C82682 +
           ((C79606 - C79607 + C79608 - C79609 + C79610 - C79611) * C15405 +
            (C79612 - C79613 + C79614 - C79615 + C79616 - C79617) * C82523) *
               C61595) *
              C1149 +
          (((C51535 - C51534 + C51537 - C51536 + C51539 - C51538) * C15405 +
            (C51541 - C51540 + C51543 - C51542 + C51545 - C51544) * C82523) *
               C82675 +
           ((C79607 - C79606 + C79609 - C79608 + C79611 - C79610) * C15405 +
            (C79613 - C79612 + C79615 - C79614 + C79617 - C79616) * C82523) *
               C82682 +
           ((C80487 * C5690 - C82635 * C5816 + C80484 * C18262 -
             C82642 * C18357 + C80495 * C18261 - C44659 * C18358) *
                C15405 +
            (C80487 * C5696 - C82635 * C5819 + C80484 * C18266 -
             C82642 * C18359 + C80495 * C18264 - C44659 * C18360) *
                C82523) *
               C61595) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eexz[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82675 * C240 - C80637 * C102 + C82682 * C1265 - C80634 * C1155 +
             C61595 * C4299 - C80645 * C4108) *
                C15405 +
            (C82675 * C246 - C80637 * C109 + C82682 * C1270 - C80634 * C1165 +
             C61595 * C4303 - C80645 * C4113) *
                C82523) *
               C82635 +
           ((C64865 - C64866 + C64867 - C64868 + C64869 - C64870) * C15405 +
            (C64871 - C64872 + C64873 - C64874 + C64875 - C64876) * C82523) *
               C82642 +
           ((C78975 - C78976 + C78977 - C78978 + C78979 - C78980) * C15405 +
            (C78981 - C78982 + C78983 - C78984 + C78985 - C78986) * C82523) *
               C44659) *
              C1149 +
          (((C80637 * C1155 - C82675 * C1265 + C80634 * C4108 - C82682 * C4299 +
             C80645 * C5690 - C61595 * C5904) *
                C15405 +
            (C80637 * C1165 - C82675 * C1270 + C80634 * C4113 - C82682 * C4303 +
             C80645 * C5696 - C61595 * C5907) *
                C82523) *
               C82635 +
           ((C80637 * C3348 - C82675 * C3527 + C80634 * C4976 - C82682 * C5140 +
             C80645 * C18262 - C61595 * C18459) *
                C15405 +
            (C80637 * C3360 - C82675 * C3533 + C80634 * C4982 - C82682 * C5143 +
             C80645 * C18266 - C61595 * C18461) *
                C82523) *
               C82642 +
           ((C80637 * C3345 - C82675 * C3530 + C80634 * C16745 -
             C82682 * C16905 + C80645 * C18261 - C61595 * C18460) *
                C15405 +
            (C80637 * C3354 - C82675 * C3536 + C80634 * C16748 -
             C82682 * C16907 + C80645 * C18264 - C61595 * C18462) *
                C82523) *
               C44659) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyx[20] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82523 * C108 - C15405 * C102) * C80487 +
                      (C82523 * C316 - C15405 * C310) * C82635 +
                      (C16004 - C16005) * C80484 + (C16006 - C16007) * C82642 +
                      (C16008 - C16009) * C80495 + (C16010 - C16011) * C44659) *
                         C82675 +
                     ((C18542 - C18543) * C80487 + (C18544 - C18545) * C82635 +
                      (C17734 - C17735) * C80484 + (C17736 - C17737) * C82642 +
                      (C17738 - C17739) * C80495 + (C17740 - C17741) * C44659) *
                         C82682 +
                     ((C18546 - C18547) * C80487 + (C18548 - C18549) * C82635 +
                      (C17742 - C17743) * C80484 + (C17744 - C17745) * C82642 +
                      (C17746 - C17747) * C80495 + (C17748 - C17749) * C44659) *
                         C61595) *
                        C1149 +
                    (((C18543 - C18542) * C80487 + (C18545 - C18544) * C82635 +
                      (C17735 - C17734) * C80484 + (C17737 - C17736) * C82642 +
                      (C17739 - C17738) * C80495 + (C17741 - C17740) * C44659) *
                         C82675 +
                     ((C18547 - C18546) * C80487 + (C18549 - C18548) * C82635 +
                      (C17743 - C17742) * C80484 + (C17745 - C17744) * C82642 +
                      (C17747 - C17746) * C80495 + (C17749 - C17748) * C44659) *
                         C82682 +
                     ((C30996 - C30995) * C80487 + (C30998 - C30997) * C82635 +
                      (C36827 - C36826) * C80484 + (C36829 - C36828) * C82642 +
                      (C15405 * C18261 - C82523 * C18263) * C80495 +
                      (C15405 * C18538 - C82523 * C18540) * C44659) *
                         C61595) *
                        C1150) *
                   C82939 * C82940) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C80487 * C169 - C80539 * C102 - C80487 * C310 + C82635 * C365 +
            C80484 * C753 - C80532 * C695 - C80484 * C857 + C82642 * C913 +
            C80495 * C1746 - C44991 * C1653 - C80495 * C1950 + C44659 * C2035) *
               C82523 * C82675 +
           (C51858 + C51859 + C51860) * C82523 * C82682 +
           (C79858 + C79859 + C79860) * C82523 * C61595) *
              C1149 -
          ((C80495 * C18358 - C44991 * C18261 - C80495 * C18538 +
            C44659 * C18623 + C80484 * C18357 - C80532 * C18262 -
            C80484 * C18537 + C82642 * C18624 + C80487 * C5816 -
            C80539 * C5690 - C80487 * C5984 + C82635 * C6090) *
               C82523 * C61595 +
           (C79860 + C79859 + C79858) * C82523 * C82682 +
           (C51860 + C51859 + C51858) * C82523 * C82675) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyz[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C82675 * C240 - C80637 * C102 + C82682 * C1265 - C80634 * C1155 +
            C61595 * C4299 - C80645 * C4108) *
               C80487 +
           (C82675 * C441 - C80637 * C310 + C82682 * C1416 - C80634 * C1317 +
            C61595 * C4593 - C80645 * C4405) *
               C82635 +
           (C64865 - C64866 + C64867 - C64868 + C64869 - C64870) * C80484 +
           (C65171 - C65172 + C65173 - C65174 + C65175 - C65176) * C82642 +
           (C78975 - C78976 + C78977 - C78978 + C78979 - C78980) * C80495 +
           (C79209 - C79210 + C79211 - C79212 + C79213 - C79214) * C44659) *
              C82523 * C1149 +
          ((C80637 * C1155 - C82675 * C1265 + C80634 * C4108 - C82682 * C4299 +
            C80645 * C5690 - C61595 * C5904) *
               C80487 +
           (C80637 * C1317 - C82675 * C1416 + C80634 * C4405 - C82682 * C4593 +
            C80645 * C5984 - C61595 * C6185) *
               C82635 +
           (C80637 * C3348 - C82675 * C3527 + C80634 * C4976 - C82682 * C5140 +
            C80645 * C18262 - C61595 * C18459) *
               C80484 +
           (C80637 * C3613 - C82675 * C3779 + C80634 * C5220 - C82682 * C5377 +
            C80645 * C18537 - C61595 * C18741) *
               C82642 +
           (C80637 * C3345 - C82675 * C3530 + C80634 * C16745 -
            C82682 * C16905 + C80645 * C18261 - C61595 * C18460) *
               C80495 +
           (C80637 * C3616 - C82675 * C3780 + C80634 * C16983 -
            C82682 * C17137 + C80645 * C18538 - C61595 * C18742) *
               C44659) *
              C82523 * C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eezx[20] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82523 * C108 - C15405 * C102) * C80637 +
                      (C82523 * C503 - C15405 * C497) * C82675 +
                      (C18542 - C18543) * C80634 + (C18822 - C18823) * C82682 +
                      (C18546 - C18547) * C80645 + (C18824 - C18825) * C61595) *
                         C82635 +
                     ((C16004 - C16005) * C80637 + (C16154 - C16155) * C82675 +
                      (C17734 - C17735) * C80634 + (C17988 - C17989) * C82682 +
                      (C17742 - C17743) * C80645 + (C17990 - C17991) * C61595) *
                         C82642 +
                     ((C16008 - C16009) * C80637 + (C16156 - C16157) * C82675 +
                      (C17738 - C17739) * C80634 + (C17992 - C17993) * C82682 +
                      (C17746 - C17747) * C80645 + (C17994 - C17995) * C61595) *
                         C44659) *
                        C1149 +
                    (((C18543 - C18542) * C80637 + (C18823 - C18822) * C82675 +
                      (C18547 - C18546) * C80634 + (C18825 - C18824) * C82682 +
                      (C30996 - C30995) * C80645 + (C31152 - C31151) * C61595) *
                         C82635 +
                     ((C17735 - C17734) * C80637 + (C17989 - C17988) * C82675 +
                      (C17743 - C17742) * C80634 + (C17991 - C17990) * C82682 +
                      (C36827 - C36826) * C80645 + (C37037 - C37036) * C61595) *
                         C82642 +
                     ((C17739 - C17738) * C80637 + (C17993 - C17992) * C82675 +
                      (C17747 - C17746) * C80634 + (C17995 - C17994) * C82682 +
                      (C15405 * C18261 - C82523 * C18263) * C80645 +
                      (C15405 * C18818 - C82523 * C18820) * C61595) *
                         C44659) *
                        C1150) *
                   C82939 * C82940) /
                  (p * q * std::sqrt(p + q));
    d2eezy[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C82635 * C169 - C80487 * C102 + C82642 * C753 - C80484 * C695 +
            C44659 * C1746 - C80495 * C1653) *
               C80637 +
           (C82635 * C551 - C80487 * C497 + C82642 * C1055 - C80484 * C1003 +
            C44659 * C2323 - C80495 * C2241) *
               C82675 +
           (C51534 - C51535 + C51536 - C51537 + C51538 - C51539) * C80634 +
           (C52155 - C52156 + C52157 - C52158 + C52159 - C52160) * C82682 +
           (C79606 - C79607 + C79608 - C79609 + C79610 - C79611) * C80645 +
           (C80083 - C80084 + C80085 - C80086 + C80087 - C80088) * C61595) *
              C82523 * C1149 +
          ((C51535 - C51534 + C51537 - C51536 + C51539 - C51538) * C80637 +
           (C52156 - C52155 + C52158 - C52157 + C52160 - C52159) * C82675 +
           (C79607 - C79606 + C79609 - C79608 + C79611 - C79610) * C80634 +
           (C80084 - C80083 + C80086 - C80085 + C80088 - C80087) * C82682 +
           (C80487 * C5690 - C82635 * C5816 + C80484 * C18262 -
            C82642 * C18357 + C80495 * C18261 - C44659 * C18358) *
               C80645 +
           (C80487 * C6262 - C82635 * C6354 + C80484 * C18817 -
            C82642 * C18899 + C80495 * C18818 - C44659 * C18900) *
               C61595) *
              C82523 * C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eezz[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C80637 * C240 - C80689 * C102 - C80637 * C497 + C82675 * C608 +
            C80634 * C1265 - C80682 * C1155 - C80634 * C1463 + C82682 * C1566 +
            C80645 * C4299 - C62229 * C4108 - C80645 * C4683 + C61595 * C4854) *
               C82635 +
           (C65489 + C65490 + C65491) * C82642 +
           (C79455 + C79456 + C79457) * C44659) *
              C82523 * C1149 -
          ((C80645 * C18460 - C62229 * C18261 - C80645 * C18818 +
            C61595 * C18987 + C80634 * C16905 - C80682 * C16745 -
            C80634 * C17213 + C82682 * C17367 + C80637 * C3530 -
            C80689 * C3345 - C80637 * C3862 + C82675 * C4029) *
               C44659 +
           (C80645 * C18459 - C62229 * C18262 - C80645 * C18817 +
            C61595 * C18988 + C80634 * C5140 - C80682 * C4976 - C80634 * C5454 +
            C82682 * C5613 + C80637 * C3527 - C80689 * C3348 - C80637 * C3859 +
            C82675 * C4030) *
               C82642 +
           (C80645 * C5904 - C62229 * C5690 - C80645 * C6262 + C61595 * C6437 +
            C80634 * C4299 - C80682 * C4108 - C80634 * C4683 + C82682 * C4854 +
            C80637 * C1265 - C80689 * C1155 - C80637 * C1463 + C82675 * C1566) *
               C82635) *
              C82523 * C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eexx[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C52324 +
            C18282 * C82679) *
               C82941 +
           (C15856 * C52324 + C17474 * C82679) * C82934 +
           (C15857 * C52324 + C17476 * C82679) * C82921 +
           (C15858 * C52324 + C24439 * C82679) * C82871) *
              C82938 * C82939 * C90 -
          (((C15405 * C20409 - C15406 * C20408 - C15405 * C20410 +
             C82523 * C20411) *
                C82679 +
            (C15405 * C2530 - C15406 * C2526 - C15405 * C2531 +
             C82523 * C2535) *
                C52324) *
               C82871 +
           ((C15405 * C3351 - C15406 * C3344 - C15405 * C3352 +
             C82523 * C3362) *
                C82679 +
            (C15405 * C1659 - C15406 * C1654 - C15405 * C1660 +
             C82523 * C1666) *
                C52324) *
               C82921 +
           ((C15405 * C3357 - C15406 * C3347 - C15405 * C3358 +
             C82523 * C3365) *
                C82679 +
            (C15405 * C702 - C15406 * C694 - C15405 * C703 + C82523 * C709) *
                C52324) *
               C82934 +
           ((C15405 * C1162 - C15406 * C1154 - C15405 * C1163 +
             C82523 * C1169) *
                C82679 +
            (C15405 * C110 - C15406 * C103 - C15405 * C111 + C82523 * C121) *
                C52324) *
               C82941) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13259 * C108 - C13260 * C102 - C13259 * C109 + C82925 * C120 +
             C13261 * C110 - C13262 * C103 - C13261 * C111 + C82909 * C121 +
             C13263 * C112 - C13264 * C104 - C13263 * C113 + C82885 * C122) *
                C52324 +
            (C27176 + C27177 + C27178) * C82679) *
               C37887 +
           ((C14058 + C14059 + C14060) * C52324 +
            (C13259 * C3359 - C13260 * C3348 - C13259 * C3360 + C82925 * C3366 +
             C13261 * C3357 - C13262 * C3347 - C13261 * C3358 + C82909 * C3365 +
             C13263 * C3355 - C13264 * C3346 - C13263 * C3356 +
             C82885 * C3364) *
                C82679) *
               C82639) *
              C82938 * C82939 * C90 -
          (((C13263 * C7860 - C13264 * C7859 - C13263 * C7861 + C82885 * C7862 +
             C13261 * C3355 - C13262 * C3346 - C13261 * C3356 + C82909 * C3364 +
             C13259 * C3357 - C13260 * C3347 - C13259 * C3358 +
             C82925 * C3365) *
                C82679 +
            (C13263 * C698 - C13264 * C692 - C13263 * C699 + C82885 * C707 +
             C13261 * C700 - C13262 * C693 - C13261 * C701 + C82909 * C708 +
             C13259 * C702 - C13260 * C694 - C13259 * C703 + C82925 * C709) *
                C52324) *
               C82639 +
           ((C13263 * C1158 - C13264 * C1152 - C13263 * C1159 + C82885 * C1167 +
             C13261 * C1160 - C13262 * C1153 - C13261 * C1161 + C82909 * C1168 +
             C13259 * C1162 - C13260 * C1154 - C13259 * C1163 +
             C82925 * C1169) *
                C82679 +
            (C13263 * C114 - C13264 * C105 - C13263 * C115 + C82885 * C123 +
             C13261 * C112 - C13262 * C104 - C13261 * C113 + C82909 * C122 +
             C13259 * C110 - C13260 * C103 - C13259 * C111 + C82925 * C121) *
                C52324) *
               C37887) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C82942 +
            C18282 * C82936 + C18283 * C82924 + C30853 * C82878) *
               C37887 +
           (C15856 * C82942 + C17474 * C82936 + C17475 * C82924 +
            C36610 * C82878) *
               C82639) *
              C82938 * C82939 * C90 -
          (((C15405 * C33198 - C15406 * C33197 - C15405 * C33199 +
             C82523 * C33200) *
                C82878 +
            (C15405 * C4979 - C15406 * C4975 - C15405 * C4980 +
             C82523 * C4984) *
                C82924 +
            (C15405 * C3357 - C15406 * C3347 - C15405 * C3358 +
             C82523 * C3365) *
                C82936 +
            (C15405 * C702 - C15406 * C694 - C15405 * C703 + C82523 * C709) *
                C82942) *
               C82639 +
           ((C15405 * C5693 - C15406 * C5689 - C15405 * C5694 +
             C82523 * C5698) *
                C82878 +
            (C15405 * C4114 - C15406 * C4109 - C15405 * C4115 +
             C82523 * C4121) *
                C82924 +
            (C15405 * C1162 - C15406 * C1154 - C15405 * C1163 +
             C82523 * C1169) *
                C82936 +
            (C15405 * C110 - C15406 * C103 - C15405 * C111 + C82523 * C121) *
                C82942) *
               C37887) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82941 * C169 - C39895 * C102 + C82934 * C753 - C39896 * C695 +
             C82921 * C1746 - C39897 * C1653 + C82871 * C2653 -
             C39898 * C2527) *
                C15405 +
            (C82941 * C175 - C39895 * C109 + C82934 * C758 - C39896 * C705 +
             C82921 * C1750 - C39897 * C1658 + C82871 * C2656 -
             C39898 * C2533) *
                C82523) *
               C52324 +
           ((C82941 * C1213 - C39895 * C1155 + C82934 * C3441 - C39896 * C3348 +
             C82921 * C3442 - C39897 * C3345 + C82871 * C16353 -
             C39898 * C16304) *
                C15405 +
            (C82941 * C1218 - C39895 * C1165 + C82934 * C3447 - C39896 * C3360 +
             C82921 * C3448 - C39897 * C3354 + C82871 * C16355 -
             C39898 * C16308) *
                C82523) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C39901 - C39900 + C39903 - C39902 + C39905 - C39904 + C39907 -
             C39906) *
                C15405 +
            (C39909 - C39908 + C39911 - C39910 + C39913 - C39912 + C39915 -
             C39914) *
                C82523) *
               C52324 +
           ((C39895 * C1154 - C82941 * C1214 + C39896 * C3347 - C82934 * C3443 +
             C39897 * C3344 - C82921 * C3444 + C39898 * C20408 -
             C82871 * C20478) *
                C15405 +
            (C39895 * C1163 - C82941 * C1219 + C39896 * C3358 - C82934 * C3449 +
             C39897 * C3352 - C82921 * C3450 + C39898 * C20410 -
             C82871 * C20479) *
                C82523) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C13259 +
            (C37887 * C175 - C37963 * C109 + C82639 * C758 - C37964 * C705) *
                C82925 +
            (C37966 - C37967 + C37968 - C37969) * C13261 +
            (C37970 - C37971 + C37972 - C37973) * C82909 +
            (C37974 - C37975 + C37976 - C37977) * C13263 +
            (C37978 - C37979 + C37980 - C37981) * C82885) *
               C52324 +
           ((C43819 - C43820 + C43821 - C43822) * C13259 +
            (C43823 - C43824 + C43825 - C43826) * C82925 +
            (C41884 - C41885 + C41886 - C41887) * C13261 +
            (C41888 - C41889 + C41890 - C41891) * C82909 +
            (C46955 - C46956 + C46957 - C46958) * C13263 +
            (C46959 - C46960 + C46961 - C46962) * C82885) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C37967 - C37966 + C37969 - C37968) * C13259 +
            (C37971 - C37970 + C37973 - C37972) * C82925 +
            (C37975 - C37974 + C37977 - C37976) * C13261 +
            (C37979 - C37978 + C37981 - C37980) * C82909 +
            (C37983 - C37982 + C37985 - C37984) * C13263 +
            (C37987 - C37986 + C37989 - C37988) * C82885) *
               C52324 +
           ((C41885 - C41884 + C41887 - C41886) * C13259 +
            (C41889 - C41888 + C41891 - C41890) * C82925 +
            (C46956 - C46955 + C46958 - C46957) * C13261 +
            (C46960 - C46959 + C46962 - C46961) * C82909 +
            (C37963 * C1152 - C37887 * C1216 + C37964 * C7859 -
             C82639 * C7929) *
                C13263 +
            (C37963 * C1159 - C37887 * C1221 + C37964 * C7861 -
             C82639 * C7930) *
                C82885) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C15405 +
            (C37887 * C175 - C37963 * C109 + C82639 * C758 - C37964 * C705) *
                C82523) *
               C82942 +
           ((C43819 - C43820 + C43821 - C43822) * C15405 +
            (C43823 - C43824 + C43825 - C43826) * C82523) *
               C82936 +
           ((C43827 - C43828 + C43829 - C43830) * C15405 +
            (C43831 - C43832 + C43833 - C43834) * C82523) *
               C82924 +
           ((C37887 * C5816 - C37963 * C5690 + C82639 * C18357 -
             C37964 * C18262) *
                C15405 +
            (C37887 * C5819 - C37963 * C5696 + C82639 * C18359 -
             C37964 * C18266) *
                C82523) *
               C82878) *
              C82938 * C82939 * C90 +
          (((C37967 - C37966 + C37969 - C37968) * C15405 +
            (C37971 - C37970 + C37973 - C37972) * C82523) *
               C82942 +
           ((C41885 - C41884 + C41887 - C41886) * C15405 +
            (C41889 - C41888 + C41891 - C41890) * C82523) *
               C82936 +
           ((C41893 - C41892 + C41895 - C41894) * C15405 +
            (C41897 - C41896 + C41899 - C41898) * C82523) *
               C82924 +
           ((C37963 * C5689 - C37887 * C5817 + C37964 * C33197 -
             C82639 * C33313) *
                C15405 +
            (C37963 * C5694 - C37887 * C5820 + C37964 * C33199 -
             C82639 * C33314) *
                C82523) *
               C82878) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C15405 +
            (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
                C82523) *
               C82941 +
           ((C55448 - C55449 + C55450 - C55451) * C15405 +
            (C55452 - C55453 + C55454 - C55455) * C82523) *
               C82934 +
           ((C55456 - C55457 + C55458 - C55459) * C15405 +
            (C55460 - C55461 + C55462 - C55463) * C82523) *
               C82921 +
           ((C52324 * C2733 - C52458 * C2527 + C82679 * C16399 -
             C52459 * C16304) *
                C15405 +
            (C52324 * C2736 - C52458 * C2533 + C82679 * C16401 -
             C52459 * C16308) *
                C82523) *
               C82871) *
              C82938 * C82939 * C90 +
          (((C52462 - C52461 + C52464 - C52463) * C15405 +
            (C52466 - C52465 + C52468 - C52467) * C82523) *
               C82941 +
           ((C54488 - C54487 + C54490 - C54489) * C15405 +
            (C54492 - C54491 + C54494 - C54493) * C82523) *
               C82934 +
           ((C54496 - C54495 + C54498 - C54497) * C15405 +
            (C54500 - C54499 + C54502 - C54501) * C82523) *
               C82921 +
           ((C52458 * C2526 - C52324 * C2734 + C52459 * C20408 -
             C82679 * C20546) *
                C15405 +
            (C52458 * C2531 - C52324 * C2737 + C52459 * C20410 -
             C82679 * C20547) *
                C82523) *
               C82871) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C13259 +
            (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
                C82925 +
            (C52461 - C52462 + C52463 - C52464) * C13261 +
            (C52465 - C52466 + C52467 - C52468) * C82909 +
            (C52469 - C52470 + C52471 - C52472) * C13263 +
            (C52473 - C52474 + C52475 - C52476) * C82885) *
               C37887 +
           ((C55448 - C55449 + C55450 - C55451) * C13259 +
            (C55452 - C55453 + C55454 - C55455) * C82925 +
            (C54487 - C54488 + C54489 - C54490) * C13261 +
            (C54491 - C54492 + C54493 - C54494) * C82909 +
            (C59142 - C59143 + C59144 - C59145) * C13263 +
            (C59146 - C59147 + C59148 - C59149) * C82885) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C52462 - C52461 + C52464 - C52463) * C13259 +
            (C52466 - C52465 + C52468 - C52467) * C82925 +
            (C52470 - C52469 + C52472 - C52471) * C13261 +
            (C52474 - C52473 + C52476 - C52475) * C82909 +
            (C52478 - C52477 + C52480 - C52479) * C13263 +
            (C52482 - C52481 + C52484 - C52483) * C82885) *
               C37887 +
           ((C54488 - C54487 + C54490 - C54489) * C13259 +
            (C54492 - C54491 + C54494 - C54493) * C82925 +
            (C59143 - C59142 + C59145 - C59144) * C13261 +
            (C59147 - C59146 + C59149 - C59148) * C82909 +
            (C52458 * C692 - C52324 * C808 + C52459 * C7859 - C82679 * C7997) *
                C13263 +
            (C52458 * C699 - C52324 * C813 + C52459 * C7861 - C82679 * C7998) *
                C82885) *
               C82639) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82942 * C240 - C57171 * C102 + C82936 * C1265 - C57172 * C1155 +
             C82924 * C4299 - C57173 * C4108 + C82878 * C5904 -
             C57174 * C5690) *
                C15405 +
            (C82942 * C246 - C57171 * C109 + C82936 * C1270 - C57172 * C1165 +
             C82924 * C4303 - C57173 * C4113 + C82878 * C5907 -
             C57174 * C5696) *
                C82523) *
               C37887 +
           ((C82942 * C805 - C57171 * C695 + C82936 * C3527 - C57172 * C3348 +
             C82924 * C5140 - C57173 * C4976 + C82878 * C18459 -
             C57174 * C18262) *
                C15405 +
            (C82942 * C810 - C57171 * C705 + C82936 * C3533 - C57172 * C3360 +
             C82924 * C5143 - C57173 * C4982 + C82878 * C18461 -
             C57174 * C18266) *
                C82523) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C57177 - C57176 + C57179 - C57178 + C57181 - C57180 + C57183 -
             C57182) *
                C15405 +
            (C57185 - C57184 + C57187 - C57186 + C57189 - C57188 + C57191 -
             C57190) *
                C82523) *
               C37887 +
           ((C57171 * C694 - C82942 * C806 + C57172 * C3347 - C82936 * C3528 +
             C57173 * C4975 - C82924 * C5141 + C57174 * C33197 -
             C82878 * C33421) *
                C15405 +
            (C57171 * C703 - C82942 * C811 + C57172 * C3358 - C82936 * C3534 +
             C57173 * C4980 - C82924 * C5144 + C57174 * C33199 -
             C82878 * C33422) *
                C82523) *
               C82639) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C39895 +
            (C82523 * C316 - C15405 * C310) * C82941 +
            (C16004 - C16005) * C39896 + (C16006 - C16007) * C82934 +
            (C16008 - C16009) * C39897 + (C16010 - C16011) * C82921 +
            (C16012 - C16013) * C39898 + (C16014 - C16015) * C82871) *
               C52324 +
           ((C18542 - C18543) * C39895 + (C18544 - C18545) * C82941 +
            (C17734 - C17735) * C39896 + (C17736 - C17737) * C82934 +
            (C17738 - C17739) * C39897 + (C17740 - C17741) * C82921 +
            (C24647 - C24648) * C39898 + (C24649 - C24650) * C82871) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C15405 * C103 - C82523 * C110) * C39895 +
            (C15405 * C311 - C82523 * C317) * C82941 +
            (C15405 * C694 - C82523 * C702) * C39896 +
            (C15405 * C858 - C82523 * C863) * C82934 +
            (C15405 * C1654 - C82523 * C1659) * C39897 +
            (C15405 * C1951 - C82523 * C1955) * C82921 +
            (C15405 * C2526 - C82523 * C2530) * C39898 +
            (C15405 * C2822 - C82523 * C2825) * C82871) *
               C52324 +
           ((C15405 * C1154 - C82523 * C1162) * C39895 +
            (C15405 * C1318 - C82523 * C1323) * C82941 +
            (C15405 * C3347 - C82523 * C3357) * C39896 +
            (C15405 * C3614 - C82523 * C3620) * C82934 +
            (C15405 * C3344 - C82523 * C3351) * C39897 +
            (C15405 * C3617 - C82523 * C3623) * C82921 +
            (C15405 * C20408 - C82523 * C20409) * C39898 +
            (C15405 * C20614 - C82523 * C20615) * C82871) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C37963 +
            (C82925 * C316 - C13259 * C310 + C82909 * C317 - C13261 * C311 +
             C82885 * C318 - C13263 * C312) *
                C37887 +
            (C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C37964 +
            (C14292 - C14293 + C14294 - C14295 + C14296 - C14297) * C82639) *
               C52324 +
           ((C27404 - C27405 + C27406 - C27407 + C27408 - C27409) * C37963 +
            (C27410 - C27411 + C27412 - C27413 + C27414 - C27415) * C37887 +
            (C82925 * C3359 - C13259 * C3348 + C82909 * C3357 - C13261 * C3347 +
             C82885 * C3355 - C13263 * C3346) *
                C37964 +
            (C82925 * C3619 - C13259 * C3613 + C82909 * C3620 - C13261 * C3614 +
             C82885 * C3621 - C13263 * C3615) *
                C82639) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C13259 * C103 - C82925 * C110 + C13261 * C104 - C82909 * C112 +
             C13263 * C105 - C82885 * C114) *
                C37963 +
            (C13259 * C311 - C82925 * C317 + C13261 * C312 - C82909 * C318 +
             C13263 * C313 - C82885 * C319) *
                C37887 +
            (C13259 * C694 - C82925 * C702 + C13261 * C693 - C82909 * C700 +
             C13263 * C692 - C82885 * C698) *
                C37964 +
            (C13259 * C858 - C82925 * C863 + C13261 * C859 - C82909 * C864 +
             C13263 * C860 - C82885 * C865) *
                C82639) *
               C52324 +
           ((C13259 * C1154 - C82925 * C1162 + C13261 * C1153 - C82909 * C1160 +
             C13263 * C1152 - C82885 * C1158) *
                C37963 +
            (C13259 * C1318 - C82925 * C1323 + C13261 * C1319 - C82909 * C1324 +
             C13263 * C1320 - C82885 * C1325) *
                C37887 +
            (C13259 * C3347 - C82925 * C3357 + C13261 * C3346 - C82909 * C3355 +
             C13263 * C7859 - C82885 * C7860) *
                C37964 +
            (C13259 * C3614 - C82925 * C3620 + C13261 * C3615 - C82909 * C3621 +
             C13263 * C8065 - C82885 * C8066) *
                C82639) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C37963 +
            (C82523 * C316 - C15405 * C310) * C37887 +
            (C16004 - C16005) * C37964 + (C16006 - C16007) * C82639) *
               C82942 +
           ((C18542 - C18543) * C37963 + (C18544 - C18545) * C37887 +
            (C17734 - C17735) * C37964 + (C17736 - C17737) * C82639) *
               C82936 +
           ((C18546 - C18547) * C37963 + (C18548 - C18549) * C37887 +
            (C17742 - C17743) * C37964 + (C17744 - C17745) * C82639) *
               C82924 +
           ((C30995 - C30996) * C37963 + (C30997 - C30998) * C37887 +
            (C36826 - C36827) * C37964 + (C36828 - C36829) * C82639) *
               C82878) *
              C82938 * C82939 * C90 +
          (((C15405 * C103 - C82523 * C110) * C37963 +
            (C15405 * C311 - C82523 * C317) * C37887 +
            (C15405 * C694 - C82523 * C702) * C37964 +
            (C15405 * C858 - C82523 * C863) * C82639) *
               C82942 +
           ((C15405 * C1154 - C82523 * C1162) * C37963 +
            (C15405 * C1318 - C82523 * C1323) * C37887 +
            (C15405 * C3347 - C82523 * C3357) * C37964 +
            (C15405 * C3614 - C82523 * C3620) * C82639) *
               C82936 +
           ((C15405 * C4109 - C82523 * C4114) * C37963 +
            (C15405 * C4406 - C82523 * C4410) * C37887 +
            (C15405 * C4975 - C82523 * C4979) * C37964 +
            (C15405 * C5221 - C82523 * C5224) * C82639) *
               C82924 +
           ((C15405 * C5689 - C82523 * C5693) * C37963 +
            (C15405 * C5985 - C82523 * C5988) * C37887 +
            (C15405 * C33197 - C82523 * C33198) * C37964 +
            (C15405 * C33521 - C82523 * C33522) * C82639) *
               C82878) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39895 * C169 - C40113 * C102 - C39895 * C310 + C82941 * C365 +
            C39896 * C753 - C40114 * C695 - C39896 * C857 + C82934 * C913 +
            C39897 * C1746 - C40115 * C1653 - C39897 * C1950 + C82921 * C2035 +
            C39898 * C2653 - C40116 * C2527 - C39898 * C2821 + C82871 * C2927) *
               C82523 * C52324 +
           (C39895 * C1213 - C40113 * C1155 - C39895 * C1317 + C82941 * C1373 +
            C39896 * C3441 - C40114 * C3348 - C39896 * C3613 + C82934 * C3704 +
            C39897 * C3442 - C40115 * C3345 - C39897 * C3616 + C82921 * C3703 +
            C39898 * C16353 - C40116 * C16304 - C39898 * C16445 +
            C82871 * C16492) *
               C82523 * C82679) *
              C82938 * C82939 * C90 -
          ((C39898 * C20478 - C40116 * C20408 - C39898 * C20614 +
            C82871 * C20682 + C39897 * C3444 - C40115 * C3344 - C39897 * C3617 +
            C82921 * C3701 + C39896 * C3443 - C40114 * C3347 - C39896 * C3614 +
            C82934 * C3702 + C39895 * C1214 - C40113 * C1154 - C39895 * C1318 +
            C82941 * C1372) *
               C82523 * C82679 +
           (C40145 + C40144 + C40143 + C40142) * C82523 * C52324) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C37963 * C169 - C38187 * C102 - C37963 * C310 + C37887 * C365 +
             C37964 * C753 - C38188 * C695 - C37964 * C857 + C82639 * C913) *
                C82925 +
            (C38226 + C38227) * C82909 + (C38228 + C38229) * C82885) *
               C52324 +
           ((C44169 + C44170) * C82925 + (C42230 + C42231) * C82909 +
            (C47269 + C47270) * C82885) *
               C82679) *
              C82938 * C82939 * C90 -
          (((C37964 * C7929 - C38188 * C7859 - C37964 * C8065 + C82639 * C8133 +
             C37963 * C1216 - C38187 * C1152 - C37963 * C1320 +
             C37887 * C1370) *
                C82885 +
            (C47270 + C47269) * C82909 + (C42231 + C42230) * C82925) *
               C82679 +
           ((C38231 + C38230) * C82885 + (C38229 + C38228) * C82909 +
            (C38227 + C38226) * C82925) *
               C52324) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C37963 * C169 - C38187 * C102 - C37963 * C310 + C37887 * C365 +
            C37964 * C753 - C38188 * C695 - C37964 * C857 + C82639 * C913) *
               C82523 * C82942 +
           (C44169 + C44170) * C82523 * C82936 +
           (C44171 + C44172) * C82523 * C82924 +
           (C37963 * C5816 - C38187 * C5690 - C37963 * C5984 + C37887 * C6090 +
            C37964 * C18357 - C38188 * C18262 - C37964 * C18537 +
            C82639 * C18624) *
               C82523 * C82878) *
              C82938 * C82939 * C90 -
          ((C37964 * C33313 - C38188 * C33197 - C37964 * C33521 +
            C82639 * C33629 + C37963 * C5817 - C38187 * C5689 - C37963 * C5985 +
            C37887 * C6089) *
               C82523 * C82878 +
           (C42233 + C42232) * C82523 * C82924 +
           (C42231 + C42230) * C82523 * C82936 +
           (C38227 + C38226) * C82523 * C82942) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
               C39895 +
           (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
               C82941 +
           (C55448 - C55449 + C55450 - C55451) * C39896 +
           (C55758 - C55759 + C55760 - C55761) * C82934 +
           (C55456 - C55457 + C55458 - C55459) * C39897 +
           (C55762 - C55763 + C55764 - C55765) * C82921 +
           (C52324 * C2733 - C52458 * C2527 + C82679 * C16399 -
            C52459 * C16304) *
               C39898 +
           (C52324 * C3002 - C52458 * C2821 + C82679 * C16535 -
            C52459 * C16445) *
               C82871) *
              C82523 * C82938 * C82939 * C90 +
          ((C52462 - C52461 + C52464 - C52463) * C39895 +
           (C52684 - C52683 + C52686 - C52685) * C82941 +
           (C54488 - C54487 + C54490 - C54489) * C39896 +
           (C54819 - C54818 + C54821 - C54820) * C82934 +
           (C54496 - C54495 + C54498 - C54497) * C39897 +
           (C54823 - C54822 + C54825 - C54824) * C82921 +
           (C52458 * C2526 - C52324 * C2734 + C52459 * C20408 -
            C82679 * C20546) *
               C39898 +
           (C52458 * C2822 - C52324 * C3003 + C52459 * C20614 -
            C82679 * C20749) *
               C82871) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C37963 +
            (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
                C37887 +
            (C55448 - C55449 + C55450 - C55451) * C37964 +
            (C55758 - C55759 + C55760 - C55761) * C82639) *
               C82925 +
           ((C52461 - C52462 + C52463 - C52464) * C37963 +
            (C52683 - C52684 + C52685 - C52686) * C37887 +
            (C54487 - C54488 + C54489 - C54490) * C37964 +
            (C54818 - C54819 + C54820 - C54821) * C82639) *
               C82909 +
           ((C52469 - C52470 + C52471 - C52472) * C37963 +
            (C52687 - C52688 + C52689 - C52690) * C37887 +
            (C59142 - C59143 + C59144 - C59145) * C37964 +
            (C59444 - C59445 + C59446 - C59447) * C82639) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C52462 - C52461 + C52464 - C52463) * C37963 +
            (C52684 - C52683 + C52686 - C52685) * C37887 +
            (C54488 - C54487 + C54490 - C54489) * C37964 +
            (C54819 - C54818 + C54821 - C54820) * C82639) *
               C82925 +
           ((C52470 - C52469 + C52472 - C52471) * C37963 +
            (C52688 - C52687 + C52690 - C52689) * C37887 +
            (C59143 - C59142 + C59145 - C59144) * C37964 +
            (C59445 - C59444 + C59447 - C59446) * C82639) *
               C82909 +
           ((C52478 - C52477 + C52480 - C52479) * C37963 +
            (C52692 - C52691 + C52694 - C52693) * C37887 +
            (C52458 * C692 - C52324 * C808 + C52459 * C7859 - C82679 * C7997) *
                C37964 +
            (C52458 * C860 - C52324 * C959 + C52459 * C8065 - C82679 * C8200) *
                C82639) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C82942 * C240 - C57171 * C102 + C82936 * C1265 - C57172 * C1155 +
            C82924 * C4299 - C57173 * C4108 + C82878 * C5904 - C57174 * C5690) *
               C37963 +
           (C82942 * C441 - C57171 * C310 + C82936 * C1416 - C57172 * C1317 +
            C82924 * C4593 - C57173 * C4405 + C82878 * C6185 - C57174 * C5984) *
               C37887 +
           (C82942 * C805 - C57171 * C695 + C82936 * C3527 - C57172 * C3348 +
            C82924 * C5140 - C57173 * C4976 + C82878 * C18459 -
            C57174 * C18262) *
               C37964 +
           (C82942 * C956 - C57171 * C857 + C82936 * C3779 - C57172 * C3613 +
            C82924 * C5377 - C57173 * C5220 + C82878 * C18741 -
            C57174 * C18537) *
               C82639) *
              C82523 * C82938 * C82939 * C90 +
          ((C57177 - C57176 + C57179 - C57178 + C57181 - C57180 + C57183 -
            C57182) *
               C37963 +
           (C57391 - C57390 + C57393 - C57392 + C57395 - C57394 + C57397 -
            C57396) *
               C37887 +
           (C57171 * C694 - C82942 * C806 + C57172 * C3347 - C82936 * C3528 +
            C57173 * C4975 - C82924 * C5141 + C57174 * C33197 -
            C82878 * C33421) *
               C37964 +
           (C57171 * C858 - C82942 * C957 + C57172 * C3614 - C82936 * C3781 +
            C57173 * C5221 - C82924 * C5378 + C57174 * C33521 -
            C82878 * C33742) *
               C82639) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezx[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C52458 +
            (C82523 * C503 - C15405 * C497) * C52324 +
            (C18542 - C18543) * C52459 + (C18822 - C18823) * C82679) *
               C82941 +
           ((C16004 - C16005) * C52458 + (C16154 - C16155) * C52324 +
            (C17734 - C17735) * C52459 + (C17988 - C17989) * C82679) *
               C82934 +
           ((C16008 - C16009) * C52458 + (C16156 - C16157) * C52324 +
            (C17738 - C17739) * C52459 + (C17992 - C17993) * C82679) *
               C82921 +
           ((C16012 - C16013) * C52458 + (C16158 - C16159) * C52324 +
            (C24647 - C24648) * C52459 + (C24853 - C24854) * C82679) *
               C82871) *
              C82938 * C82939 * C90 +
          (((C15405 * C103 - C82523 * C110) * C52458 +
            (C15405 * C498 - C82523 * C504) * C52324 +
            (C15405 * C1154 - C82523 * C1162) * C52459 +
            (C15405 * C1464 - C82523 * C1469) * C82679) *
               C82941 +
           ((C15405 * C694 - C82523 * C702) * C52458 +
            (C15405 * C1004 - C82523 * C1009) * C52324 +
            (C15405 * C3347 - C82523 * C3357) * C52459 +
            (C15405 * C3860 - C82523 * C3866) * C82679) *
               C82934 +
           ((C15405 * C1654 - C82523 * C1659) * C52458 +
            (C15405 * C2242 - C82523 * C2246) * C52324 +
            (C15405 * C3344 - C82523 * C3351) * C52459 +
            (C15405 * C3863 - C82523 * C3869) * C82679) *
               C82921 +
           ((C15405 * C2526 - C82523 * C2530) * C52458 +
            (C15405 * C3084 - C82523 * C3087) * C52324 +
            (C15405 * C20408 - C82523 * C20409) * C52459 +
            (C15405 * C20816 - C82523 * C20817) * C82679) *
               C82871) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C52458 +
            (C82925 * C503 - C13259 * C497 + C82909 * C504 - C13261 * C498 +
             C82885 * C505 - C13263 * C499) *
                C52324 +
            (C27404 - C27405 + C27406 - C27407 + C27408 - C27409) * C52459 +
            (C27656 - C27657 + C27658 - C27659 + C27660 - C27661) * C82679) *
               C37887 +
           ((C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C52458 +
            (C14532 - C14533 + C14534 - C14535 + C14536 - C14537) * C52324 +
            (C82925 * C3359 - C13259 * C3348 + C82909 * C3357 - C13261 * C3347 +
             C82885 * C3355 - C13263 * C3346) *
                C52459 +
            (C82925 * C3865 - C13259 * C3859 + C82909 * C3866 - C13261 * C3860 +
             C82885 * C3867 - C13263 * C3861) *
                C82679) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C13259 * C103 - C82925 * C110 + C13261 * C104 - C82909 * C112 +
             C13263 * C105 - C82885 * C114) *
                C52458 +
            (C13259 * C498 - C82925 * C504 + C13261 * C499 - C82909 * C505 +
             C13263 * C500 - C82885 * C506) *
                C52324 +
            (C13259 * C1154 - C82925 * C1162 + C13261 * C1153 - C82909 * C1160 +
             C13263 * C1152 - C82885 * C1158) *
                C52459 +
            (C13259 * C1464 - C82925 * C1469 + C13261 * C1465 - C82909 * C1470 +
             C13263 * C1466 - C82885 * C1471) *
                C82679) *
               C37887 +
           ((C13259 * C694 - C82925 * C702 + C13261 * C693 - C82909 * C700 +
             C13263 * C692 - C82885 * C698) *
                C52458 +
            (C13259 * C1004 - C82925 * C1009 + C13261 * C1005 - C82909 * C1010 +
             C13263 * C1006 - C82885 * C1011) *
                C52324 +
            (C13259 * C3347 - C82925 * C3357 + C13261 * C3346 - C82909 * C3355 +
             C13263 * C7859 - C82885 * C7860) *
                C52459 +
            (C13259 * C3860 - C82925 * C3866 + C13261 * C3861 - C82909 * C3867 +
             C13263 * C8267 - C82885 * C8268) *
                C82679) *
               C82639) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C57171 +
            (C82523 * C503 - C15405 * C497) * C82942 +
            (C18542 - C18543) * C57172 + (C18822 - C18823) * C82936 +
            (C18546 - C18547) * C57173 + (C18824 - C18825) * C82924 +
            (C30995 - C30996) * C57174 + (C31151 - C31152) * C82878) *
               C37887 +
           ((C16004 - C16005) * C57171 + (C16154 - C16155) * C82942 +
            (C17734 - C17735) * C57172 + (C17988 - C17989) * C82936 +
            (C17742 - C17743) * C57173 + (C17990 - C17991) * C82924 +
            (C36826 - C36827) * C57174 + (C37036 - C37037) * C82878) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C15405 * C103 - C82523 * C110) * C57171 +
            (C15405 * C498 - C82523 * C504) * C82942 +
            (C15405 * C1154 - C82523 * C1162) * C57172 +
            (C15405 * C1464 - C82523 * C1469) * C82936 +
            (C15405 * C4109 - C82523 * C4114) * C57173 +
            (C15405 * C4684 - C82523 * C4688) * C82924 +
            (C15405 * C5689 - C82523 * C5693) * C57174 +
            (C15405 * C6263 - C82523 * C6266) * C82878) *
               C37887 +
           ((C15405 * C694 - C82523 * C702) * C57171 +
            (C15405 * C1004 - C82523 * C1009) * C82942 +
            (C15405 * C3347 - C82523 * C3357) * C57172 +
            (C15405 * C3860 - C82523 * C3866) * C82936 +
            (C15405 * C4975 - C82523 * C4979) * C57173 +
            (C15405 * C5455 - C82523 * C5458) * C82924 +
            (C15405 * C33197 - C82523 * C33198) * C57174 +
            (C15405 * C33841 - C82523 * C33842) * C82878) *
               C82639) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82941 * C169 - C39895 * C102 + C82934 * C753 - C39896 * C695 +
            C82921 * C1746 - C39897 * C1653 + C82871 * C2653 - C39898 * C2527) *
               C52458 +
           (C82941 * C551 - C39895 * C497 + C82934 * C1055 - C39896 * C1003 +
            C82921 * C2323 - C39897 * C2241 + C82871 * C3175 - C39898 * C3083) *
               C52324 +
           (C82941 * C1213 - C39895 * C1155 + C82934 * C3441 - C39896 * C3348 +
            C82921 * C3442 - C39897 * C3345 + C82871 * C16353 -
            C39898 * C16304) *
               C52459 +
           (C82941 * C1515 - C39895 * C1463 + C82934 * C3945 - C39896 * C3859 +
            C82921 * C3946 - C39897 * C3862 + C82871 * C16625 -
            C39898 * C16579) *
               C82679) *
              C82523 * C82938 * C82939 * C90 +
          ((C39901 - C39900 + C39903 - C39902 + C39905 - C39904 + C39907 -
            C39906) *
               C52458 +
           (C40345 - C40344 + C40347 - C40346 + C40349 - C40348 + C40351 -
            C40350) *
               C52324 +
           (C39895 * C1154 - C82941 * C1214 + C39896 * C3347 - C82934 * C3443 +
            C39897 * C3344 - C82921 * C3444 + C39898 * C20408 -
            C82871 * C20478) *
               C52459 +
           (C39895 * C1464 - C82941 * C1516 + C39896 * C3860 - C82934 * C3947 +
            C39897 * C3863 - C82921 * C3948 + C39898 * C20816 -
            C82871 * C20884) *
               C82679) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C52458 +
            (C37887 * C551 - C37963 * C497 + C82639 * C1055 - C37964 * C1003) *
                C52324 +
            (C43819 - C43820 + C43821 - C43822) * C52459 +
            (C44475 - C44476 + C44477 - C44478) * C82679) *
               C82925 +
           ((C37966 - C37967 + C37968 - C37969) * C52458 +
            (C38430 - C38431 + C38432 - C38433) * C52324 +
            (C41884 - C41885 + C41886 - C41887) * C52459 +
            (C42534 - C42535 + C42536 - C42537) * C82679) *
               C82909 +
           ((C37974 - C37975 + C37976 - C37977) * C52458 +
            (C38434 - C38435 + C38436 - C38437) * C52324 +
            (C46955 - C46956 + C46957 - C46958) * C52459 +
            (C47565 - C47566 + C47567 - C47568) * C82679) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C37967 - C37966 + C37969 - C37968) * C52458 +
            (C38431 - C38430 + C38433 - C38432) * C52324 +
            (C41885 - C41884 + C41887 - C41886) * C52459 +
            (C42535 - C42534 + C42537 - C42536) * C82679) *
               C82925 +
           ((C37975 - C37974 + C37977 - C37976) * C52458 +
            (C38435 - C38434 + C38437 - C38436) * C52324 +
            (C46956 - C46955 + C46958 - C46957) * C52459 +
            (C47566 - C47565 + C47568 - C47567) * C82679) *
               C82909 +
           ((C37983 - C37982 + C37985 - C37984) * C52458 +
            (C38439 - C38438 + C38441 - C38440) * C52324 +
            (C37963 * C1152 - C37887 * C1216 + C37964 * C7859 -
             C82639 * C7929) *
                C52459 +
            (C37963 * C1466 - C37887 * C1518 + C37964 * C8267 -
             C82639 * C8335) *
                C82679) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
               C57171 +
           (C37887 * C551 - C37963 * C497 + C82639 * C1055 - C37964 * C1003) *
               C82942 +
           (C43819 - C43820 + C43821 - C43822) * C57172 +
           (C44475 - C44476 + C44477 - C44478) * C82936 +
           (C43827 - C43828 + C43829 - C43830) * C57173 +
           (C44479 - C44480 + C44481 - C44482) * C82924 +
           (C37887 * C5816 - C37963 * C5690 + C82639 * C18357 -
            C37964 * C18262) *
               C57174 +
           (C37887 * C6354 - C37963 * C6262 + C82639 * C18899 -
            C37964 * C18817) *
               C82878) *
              C82523 * C82938 * C82939 * C90 +
          ((C37967 - C37966 + C37969 - C37968) * C57171 +
           (C38431 - C38430 + C38433 - C38432) * C82942 +
           (C41885 - C41884 + C41887 - C41886) * C57172 +
           (C42535 - C42534 + C42537 - C42536) * C82936 +
           (C41893 - C41892 + C41895 - C41894) * C57173 +
           (C42539 - C42538 + C42541 - C42540) * C82924 +
           (C37963 * C5689 - C37887 * C5817 + C37964 * C33197 -
            C82639 * C33313) *
               C57174 +
           (C37963 * C6263 - C37887 * C6355 + C37964 * C33841 -
            C82639 * C33945) *
               C82878) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52458 * C240 - C52892 * C102 - C52458 * C497 + C52324 * C608 +
            C52459 * C1265 - C52893 * C1155 - C52459 * C1463 + C82679 * C1566) *
               C82941 +
           (C56084 + C56085) * C82934 + (C56086 + C56087) * C82921 +
           (C52458 * C2733 - C52892 * C2527 - C52458 * C3083 + C52324 * C3254 +
            C52459 * C16399 - C52893 * C16304 - C52459 * C16579 +
            C82679 * C16670) *
               C82871) *
              C82523 * C82938 * C82939 * C90 -
          ((C52459 * C20546 - C52893 * C20408 - C52459 * C20816 +
            C82679 * C20951 + C52458 * C2734 - C52892 * C2526 - C52458 * C3084 +
            C52324 * C3253) *
               C82871 +
           (C55153 + C55152) * C82921 + (C55151 + C55150) * C82934 +
           (C52932 + C52931) * C82941) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52458 * C240 - C52892 * C102 - C52458 * C497 + C52324 * C608 +
             C52459 * C1265 - C52893 * C1155 - C52459 * C1463 +
             C82679 * C1566) *
                C37887 +
            (C56084 + C56085) * C82639) *
               C82925 +
           ((C52931 + C52932) * C37887 + (C55150 + C55151) * C82639) * C82909 +
           ((C52933 + C52934) * C37887 + (C59754 + C59755) * C82639) * C82885) *
              C82938 * C82939 * C90 -
          (((C52459 * C7997 - C52893 * C7859 - C52459 * C8267 + C82679 * C8402 +
             C52458 * C808 - C52892 * C692 - C52458 * C1006 + C52324 * C1103) *
                C82639 +
            (C52936 + C52935) * C37887) *
               C82885 +
           ((C59755 + C59754) * C82639 + (C52934 + C52933) * C37887) * C82909 +
           ((C55151 + C55150) * C82639 + (C52932 + C52931) * C37887) * C82925) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C57171 * C240 - C57595 * C102 - C57171 * C497 + C82942 * C608 +
            C57172 * C1265 - C57596 * C1155 - C57172 * C1463 + C82936 * C1566 +
            C57173 * C4299 - C57597 * C4108 - C57173 * C4683 + C82924 * C4854 +
            C57174 * C5904 - C57598 * C5690 - C57174 * C6262 + C82878 * C6437) *
               C37887 +
           (C57171 * C805 - C57595 * C695 - C57171 * C1003 + C82942 * C1106 +
            C57172 * C3527 - C57596 * C3348 - C57172 * C3859 + C82936 * C4030 +
            C57173 * C5140 - C57597 * C4976 - C57173 * C5454 + C82924 * C5613 +
            C57174 * C18459 - C57598 * C18262 - C57174 * C18817 +
            C82878 * C18988) *
               C82639) *
              C82523 * C82938 * C82939 * C90 -
          ((C57174 * C33421 - C57598 * C33197 - C57174 * C33841 +
            C82878 * C34048 + C57173 * C5141 - C57597 * C4975 - C57173 * C5455 +
            C82924 * C5612 + C57172 * C3528 - C57596 * C3347 - C57172 * C3860 +
            C82936 * C4028 + C57171 * C806 - C57595 * C694 - C57171 * C1004 +
            C82942 * C1105) *
               C82639 +
           (C57627 + C57626 + C57625 + C57624) * C37887) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexx[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C52324 +
            C18282 * C82679) *
               C82941 +
           (C69719 + C69720) * C82934 + (C69721 + C69722) * C82921 +
           (C69723 + C69724) * C82871) *
              C82938 * C688 -
          (((C15405 * C16305 - C15406 * C16303 - C15405 * C16306 +
             C82523 * C16309) *
                C82679 +
            C15859 * C52324) *
               C82871 +
           (C69724 + C69723) * C82921 + (C69722 + C69721) * C82934 +
           (C69720 + C69719) * C82941) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13259 * C108 - C13260 * C102 - C13259 * C109 + C82925 * C120 +
             C13261 * C110 - C13262 * C103 - C13261 * C111 + C82909 * C121 +
             C13263 * C112 - C13264 * C104 - C13263 * C113 + C82885 * C122) *
                C52324 +
            (C27176 + C27177 + C27178) * C82679) *
               C37887 +
           ((C14058 + C14059 + C14060) * C52324 +
            (C67372 + C67373 + C67374) * C82679) *
               C82639) *
              C82938 * C688 -
          (((C13263 * C3349 - C13264 * C3343 - C13263 * C3350 + C82885 * C3361 +
             C13261 * C3351 - C13262 * C3344 - C13261 * C3352 + C82909 * C3362 +
             C13259 * C3353 - C13260 * C3345 - C13259 * C3354 +
             C82925 * C3363) *
                C82679 +
            (C14063 + C14062 + C14061) * C52324) *
               C82639 +
           ((C67374 + C67373 + C67372) * C82679 +
            (C14060 + C14059 + C14058) * C52324) *
               C37887) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C82942 +
            C18282 * C82936 + C18283 * C82924 + C30853 * C82878) *
               C37887 +
           (C71585 + C71586 + C71587 + C71588) * C82639) *
              C82938 * C688 -
          (((C15405 * C18263 - C15406 * C18261 - C15405 * C18264 +
             C82523 * C18267) *
                C82878 +
            C17477 * C82924 + C17476 * C82936 + C15857 * C82942) *
               C82639 +
           (C71588 + C71587 + C71586 + C71585) * C37887) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82941 * C169 - C39895 * C102 + C82934 * C753 - C39896 * C695 +
             C82921 * C1746 - C39897 * C1653 + C82871 * C2653 -
             C39898 * C2527) *
                C15405 +
            (C82941 * C175 - C39895 * C109 + C82934 * C758 - C39896 * C705 +
             C82921 * C1750 - C39897 * C1658 + C82871 * C2656 -
             C39898 * C2533) *
                C82523) *
               C52324 +
           ((C82941 * C1213 - C39895 * C1155 + C82934 * C3441 - C39896 * C3348 +
             C82921 * C3442 - C39897 * C3345 + C82871 * C16353 -
             C39898 * C16304) *
                C15405 +
            (C82941 * C1218 - C39895 * C1165 + C82934 * C3447 - C39896 * C3360 +
             C82921 * C3448 - C39897 * C3354 + C82871 * C16355 -
             C39898 * C16308) *
                C82523) *
               C82679) *
              C82938 * C688 +
          (((C39895 * C695 - C82941 * C753 + C39896 * C1653 - C82934 * C1746 +
             C39897 * C2527 - C82921 * C2653 + C39898 * C15407 -
             C82871 * C15462) *
                C15405 +
            (C39895 * C705 - C82941 * C758 + C39896 * C1658 - C82934 * C1750 +
             C39897 * C2533 - C82921 * C2656 + C39898 * C15410 -
             C82871 * C15464) *
                C82523) *
               C52324 +
           ((C39895 * C3348 - C82941 * C3441 + C39896 * C3345 - C82934 * C3442 +
             C39897 * C16304 - C82921 * C16353 + C39898 * C16303 -
             C82871 * C16354) *
                C15405 +
            (C39895 * C3360 - C82941 * C3447 + C39896 * C3354 - C82934 * C3448 +
             C39897 * C16308 - C82921 * C16355 + C39898 * C16306 -
             C82871 * C16356) *
                C82523) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C13259 +
            (C37887 * C175 - C37963 * C109 + C82639 * C758 - C37964 * C705) *
                C82925 +
            (C37966 - C37967 + C37968 - C37969) * C13261 +
            (C37970 - C37971 + C37972 - C37973) * C82909 +
            (C37974 - C37975 + C37976 - C37977) * C13263 +
            (C37978 - C37979 + C37980 - C37981) * C82885) *
               C52324 +
           ((C43819 - C43820 + C43821 - C43822) * C13259 +
            (C43823 - C43824 + C43825 - C43826) * C82925 +
            (C41884 - C41885 + C41886 - C41887) * C13261 +
            (C41888 - C41889 + C41890 - C41891) * C82909 +
            (C46955 - C46956 + C46957 - C46958) * C13263 +
            (C46959 - C46960 + C46961 - C46962) * C82885) *
               C82679) *
              C82938 * C688 +
          (((C37963 * C695 - C37887 * C753 + C37964 * C1653 - C82639 * C1746) *
                C13259 +
            (C37963 * C705 - C37887 * C758 + C37964 * C1658 - C82639 * C1750) *
                C82925 +
            (C37963 * C694 - C37887 * C754 + C37964 * C1654 - C82639 * C1747) *
                C13261 +
            (C37963 * C703 - C37887 * C759 + C37964 * C1660 - C82639 * C1751) *
                C82909 +
            (C37963 * C693 - C37887 * C755 + C37964 * C1655 - C82639 * C1748) *
                C13263 +
            (C37963 * C701 - C37887 * C760 + C37964 * C1662 - C82639 * C1752) *
                C82885) *
               C52324 +
           ((C37963 * C3348 - C37887 * C3441 + C37964 * C3345 -
             C82639 * C3442) *
                C13259 +
            (C37963 * C3360 - C37887 * C3447 + C37964 * C3354 -
             C82639 * C3448) *
                C82925 +
            (C37963 * C3347 - C37887 * C3443 + C37964 * C3344 -
             C82639 * C3444) *
                C13261 +
            (C37963 * C3358 - C37887 * C3449 + C37964 * C3352 -
             C82639 * C3450) *
                C82909 +
            (C37963 * C3346 - C37887 * C3445 + C37964 * C3343 -
             C82639 * C3446) *
                C13263 +
            (C37963 * C3356 - C37887 * C3451 + C37964 * C3350 -
             C82639 * C3452) *
                C82885) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C15405 +
            (C37887 * C175 - C37963 * C109 + C82639 * C758 - C37964 * C705) *
                C82523) *
               C82942 +
           ((C43819 - C43820 + C43821 - C43822) * C15405 +
            (C43823 - C43824 + C43825 - C43826) * C82523) *
               C82936 +
           ((C43827 - C43828 + C43829 - C43830) * C15405 +
            (C43831 - C43832 + C43833 - C43834) * C82523) *
               C82924 +
           ((C37887 * C5816 - C37963 * C5690 + C82639 * C18357 -
             C37964 * C18262) *
                C15405 +
            (C37887 * C5819 - C37963 * C5696 + C82639 * C18359 -
             C37964 * C18266) *
                C82523) *
               C82878) *
              C82938 * C688 +
          (((C37963 * C695 - C37887 * C753 + C37964 * C1653 - C82639 * C1746) *
                C15405 +
            (C37963 * C705 - C37887 * C758 + C37964 * C1658 - C82639 * C1750) *
                C82523) *
               C82942 +
           ((C37963 * C3348 - C37887 * C3441 + C37964 * C3345 -
             C82639 * C3442) *
                C15405 +
            (C37963 * C3360 - C37887 * C3447 + C37964 * C3354 -
             C82639 * C3448) *
                C82523) *
               C82936 +
           ((C37963 * C4976 - C37887 * C5060 + C37964 * C16745 -
             C82639 * C16827) *
                C15405 +
            (C37963 * C4982 - C37887 * C5063 + C37964 * C16748 -
             C82639 * C16829) *
                C82523) *
               C82924 +
           ((C37963 * C18262 - C37887 * C18357 + C37964 * C18261 -
             C82639 * C18358) *
                C15405 +
            (C37963 * C18266 - C37887 * C18359 + C37964 * C18264 -
             C82639 * C18360) *
                C82523) *
               C82878) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C15405 +
            (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
                C82523) *
               C82941 +
           ((C55448 - C55449 + C55450 - C55451) * C15405 +
            (C55452 - C55453 + C55454 - C55455) * C82523) *
               C82934 +
           ((C55456 - C55457 + C55458 - C55459) * C15405 +
            (C55460 - C55461 + C55462 - C55463) * C82523) *
               C82921 +
           ((C69857 - C69858 + C69859 - C69860) * C15405 +
            (C69861 - C69862 + C69863 - C69864) * C82523) *
               C82871) *
              C82938 * C688 +
          (((C55449 - C55448 + C55451 - C55450) * C15405 +
            (C55453 - C55452 + C55455 - C55454) * C82523) *
               C82941 +
           ((C55457 - C55456 + C55459 - C55458) * C15405 +
            (C55461 - C55460 + C55463 - C55462) * C82523) *
               C82934 +
           ((C69858 - C69857 + C69860 - C69859) * C15405 +
            (C69862 - C69861 + C69864 - C69863) * C82523) *
               C82921 +
           ((C52458 * C15407 - C52324 * C15508 + C52459 * C16303 -
             C82679 * C16400) *
                C15405 +
            (C52458 * C15410 - C52324 * C15510 + C52459 * C16306 -
             C82679 * C16402) *
                C82523) *
               C82871) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C13259 +
            (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
                C82925 +
            (C52461 - C52462 + C52463 - C52464) * C13261 +
            (C52465 - C52466 + C52467 - C52468) * C82909 +
            (C52469 - C52470 + C52471 - C52472) * C13263 +
            (C52473 - C52474 + C52475 - C52476) * C82885) *
               C37887 +
           ((C55448 - C55449 + C55450 - C55451) * C13259 +
            (C55452 - C55453 + C55454 - C55455) * C82925 +
            (C54487 - C54488 + C54489 - C54490) * C13261 +
            (C54491 - C54492 + C54493 - C54494) * C82909 +
            (C59142 - C59143 + C59144 - C59145) * C13263 +
            (C59146 - C59147 + C59148 - C59149) * C82885) *
               C82639) *
              C82938 * C688 +
          (((C55449 - C55448 + C55451 - C55450) * C13259 +
            (C55453 - C55452 + C55455 - C55454) * C82925 +
            (C54488 - C54487 + C54490 - C54489) * C13261 +
            (C54492 - C54491 + C54494 - C54493) * C82909 +
            (C59143 - C59142 + C59145 - C59144) * C13263 +
            (C59147 - C59146 + C59149 - C59148) * C82885) *
               C37887 +
           ((C55457 - C55456 + C55459 - C55458) * C13259 +
            (C55461 - C55460 + C55463 - C55462) * C82925 +
            (C54496 - C54495 + C54498 - C54497) * C13261 +
            (C54500 - C54499 + C54502 - C54501) * C82909 +
            (C52458 * C1655 - C52324 * C1854 + C52459 * C3343 -
             C82679 * C3532) *
                C13263 +
            (C52458 * C1662 - C52324 * C1858 + C52459 * C3350 -
             C82679 * C3538) *
                C82885) *
               C82639) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82942 * C240 - C57171 * C102 + C82936 * C1265 - C57172 * C1155 +
             C82924 * C4299 - C57173 * C4108 + C82878 * C5904 -
             C57174 * C5690) *
                C15405 +
            (C82942 * C246 - C57171 * C109 + C82936 * C1270 - C57172 * C1165 +
             C82924 * C4303 - C57173 * C4113 + C82878 * C5907 -
             C57174 * C5696) *
                C82523) *
               C37887 +
           ((C71721 - C71722 + C71723 - C71724 + C71725 - C71726 + C71727 -
             C71728) *
                C15405 +
            (C71729 - C71730 + C71731 - C71732 + C71733 - C71734 + C71735 -
             C71736) *
                C82523) *
               C82639) *
              C82938 * C688 +
          (((C71722 - C71721 + C71724 - C71723 + C71726 - C71725 + C71728 -
             C71727) *
                C15405 +
            (C71730 - C71729 + C71732 - C71731 + C71734 - C71733 + C71736 -
             C71735) *
                C82523) *
               C37887 +
           ((C57171 * C1653 - C82942 * C1852 + C57172 * C3345 - C82936 * C3530 +
             C57173 * C16745 - C82924 * C16905 + C57174 * C18261 -
             C82878 * C18460) *
                C15405 +
            (C57171 * C1658 - C82942 * C1856 + C57172 * C3354 - C82936 * C3536 +
             C57173 * C16748 - C82924 * C16907 + C57174 * C18264 -
             C82878 * C18462) *
                C82523) *
               C82639) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C39895 +
            (C82523 * C316 - C15405 * C310) * C82941 +
            (C16004 - C16005) * C39896 + (C16006 - C16007) * C82934 +
            (C16008 - C16009) * C39897 + (C16010 - C16011) * C82921 +
            (C16012 - C16013) * C39898 + (C16014 - C16015) * C82871) *
               C52324 +
           ((C18542 - C18543) * C39895 + (C18544 - C18545) * C82941 +
            (C17734 - C17735) * C39896 + (C17736 - C17737) * C82934 +
            (C17738 - C17739) * C39897 + (C17740 - C17741) * C82921 +
            (C24647 - C24648) * C39898 + (C24649 - C24650) * C82871) *
               C82679) *
              C82938 * C688 +
          (((C16005 - C16004) * C39895 + (C16007 - C16006) * C82941 +
            (C16009 - C16008) * C39896 + (C16011 - C16010) * C82934 +
            (C16013 - C16012) * C39897 + (C16015 - C16014) * C82921 +
            (C16017 - C16016) * C39898 + (C16019 - C16018) * C82871) *
               C52324 +
           ((C17735 - C17734) * C39895 + (C17737 - C17736) * C82941 +
            (C17739 - C17738) * C39896 + (C17741 - C17740) * C82934 +
            (C24648 - C24647) * C39897 + (C24650 - C24649) * C82921 +
            (C15405 * C16303 - C82523 * C16305) * C39898 +
            (C15405 * C16446 - C82523 * C16448) * C82871) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C37963 +
            (C82925 * C316 - C13259 * C310 + C82909 * C317 - C13261 * C311 +
             C82885 * C318 - C13263 * C312) *
                C37887 +
            (C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C37964 +
            (C14292 - C14293 + C14294 - C14295 + C14296 - C14297) * C82639) *
               C52324 +
           ((C27404 - C27405 + C27406 - C27407 + C27408 - C27409) * C37963 +
            (C27410 - C27411 + C27412 - C27413 + C27414 - C27415) * C37887 +
            (C67669 - C67670 + C67671 - C67672 + C67673 - C67674) * C37964 +
            (C67675 - C67676 + C67677 - C67678 + C67679 - C67680) * C82639) *
               C82679) *
              C82938 * C688 +
          (((C14287 - C14286 + C14289 - C14288 + C14291 - C14290) * C37963 +
            (C14293 - C14292 + C14295 - C14294 + C14297 - C14296) * C37887 +
            (C14299 - C14298 + C14301 - C14300 + C14303 - C14302) * C37964 +
            (C14305 - C14304 + C14307 - C14306 + C14309 - C14308) * C82639) *
               C52324 +
           ((C67670 - C67669 + C67672 - C67671 + C67674 - C67673) * C37963 +
            (C67676 - C67675 + C67678 - C67677 + C67680 - C67679) * C37887 +
            (C13259 * C3345 - C82925 * C3353 + C13261 * C3344 - C82909 * C3351 +
             C13263 * C3343 - C82885 * C3349) *
                C37964 +
            (C13259 * C3616 - C82925 * C3622 + C13261 * C3617 - C82909 * C3623 +
             C13263 * C3618 - C82885 * C3624) *
                C82639) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C37963 +
            (C82523 * C316 - C15405 * C310) * C37887 +
            (C16004 - C16005) * C37964 + (C16006 - C16007) * C82639) *
               C82942 +
           ((C18542 - C18543) * C37963 + (C18544 - C18545) * C37887 +
            (C17734 - C17735) * C37964 + (C17736 - C17737) * C82639) *
               C82936 +
           ((C18546 - C18547) * C37963 + (C18548 - C18549) * C37887 +
            (C17742 - C17743) * C37964 + (C17744 - C17745) * C82639) *
               C82924 +
           ((C30995 - C30996) * C37963 + (C30997 - C30998) * C37887 +
            (C36826 - C36827) * C37964 + (C36828 - C36829) * C82639) *
               C82878) *
              C82938 * C688 +
          (((C16005 - C16004) * C37963 + (C16007 - C16006) * C37887 +
            (C16009 - C16008) * C37964 + (C16011 - C16010) * C82639) *
               C82942 +
           ((C17735 - C17734) * C37963 + (C17737 - C17736) * C37887 +
            (C17739 - C17738) * C37964 + (C17741 - C17740) * C82639) *
               C82936 +
           ((C17743 - C17742) * C37963 + (C17745 - C17744) * C37887 +
            (C17747 - C17746) * C37964 + (C17749 - C17748) * C82639) *
               C82924 +
           ((C36827 - C36826) * C37963 + (C36829 - C36828) * C37887 +
            (C15405 * C18261 - C82523 * C18263) * C37964 +
            (C15405 * C18538 - C82523 * C18540) * C82639) *
               C82878) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39895 * C169 - C40113 * C102 - C39895 * C310 + C82941 * C365 +
            C39896 * C753 - C40114 * C695 - C39896 * C857 + C82934 * C913 +
            C39897 * C1746 - C40115 * C1653 - C39897 * C1950 + C82921 * C2035 +
            C39898 * C2653 - C40116 * C2527 - C39898 * C2821 + C82871 * C2927) *
               C82523 * C52324 +
           (C39895 * C1213 - C40113 * C1155 - C39895 * C1317 + C82941 * C1373 +
            C39896 * C3441 - C40114 * C3348 - C39896 * C3613 + C82934 * C3704 +
            C39897 * C3442 - C40115 * C3345 - C39897 * C3616 + C82921 * C3703 +
            C39898 * C16353 - C40116 * C16304 - C39898 * C16445 +
            C82871 * C16492) *
               C82523 * C82679) *
              C82938 * C688 -
          ((C39898 * C16354 - C40116 * C16303 - C39898 * C16446 +
            C82871 * C16491 + C39897 * C16353 - C40115 * C16304 -
            C39897 * C16445 + C82921 * C16492 + C39896 * C3442 -
            C40114 * C3345 - C39896 * C3616 + C82934 * C3703 + C39895 * C3441 -
            C40113 * C3348 - C39895 * C3613 + C82941 * C3704) *
               C82523 * C82679 +
           (C39898 * C15462 - C40116 * C15407 - C39898 * C15554 +
            C82871 * C15605 + C39897 * C2653 - C40115 * C2527 - C39897 * C2821 +
            C82921 * C2927 + C39896 * C1746 - C40114 * C1653 - C39896 * C1950 +
            C82934 * C2035 + C39895 * C753 - C40113 * C695 - C39895 * C857 +
            C82941 * C913) *
               C82523 * C52324) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C37963 * C169 - C38187 * C102 - C37963 * C310 + C37887 * C365 +
             C37964 * C753 - C38188 * C695 - C37964 * C857 + C82639 * C913) *
                C82925 +
            (C38226 + C38227) * C82909 + (C38228 + C38229) * C82885) *
               C52324 +
           ((C44169 + C44170) * C82925 + (C42230 + C42231) * C82909 +
            (C47269 + C47270) * C82885) *
               C82679) *
              C82938 * C688 -
          (((C37964 * C3446 - C38188 * C3343 - C37964 * C3618 + C82639 * C3699 +
             C37963 * C3445 - C38187 * C3346 - C37963 * C3615 +
             C37887 * C3700) *
                C82885 +
            (C37964 * C3444 - C38188 * C3344 - C37964 * C3617 + C82639 * C3701 +
             C37963 * C3443 - C38187 * C3347 - C37963 * C3614 +
             C37887 * C3702) *
                C82909 +
            (C37964 * C3442 - C38188 * C3345 - C37964 * C3616 + C82639 * C3703 +
             C37963 * C3441 - C38187 * C3348 - C37963 * C3613 +
             C37887 * C3704) *
                C82925) *
               C82679 +
           ((C37964 * C1748 - C38188 * C1655 - C37964 * C1952 + C82639 * C2037 +
             C37963 * C755 - C38187 * C693 - C37963 * C859 + C37887 * C911) *
                C82885 +
            (C37964 * C1747 - C38188 * C1654 - C37964 * C1951 + C82639 * C2036 +
             C37963 * C754 - C38187 * C694 - C37963 * C858 + C37887 * C912) *
                C82909 +
            (C37964 * C1746 - C38188 * C1653 - C37964 * C1950 + C82639 * C2035 +
             C37963 * C753 - C38187 * C695 - C37963 * C857 + C37887 * C913) *
                C82925) *
               C52324) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C37963 * C169 - C38187 * C102 - C37963 * C310 + C37887 * C365 +
            C37964 * C753 - C38188 * C695 - C37964 * C857 + C82639 * C913) *
               C82523 * C82942 +
           (C44169 + C44170) * C82523 * C82936 +
           (C44171 + C44172) * C82523 * C82924 +
           (C37963 * C5816 - C38187 * C5690 - C37963 * C5984 + C37887 * C6090 +
            C37964 * C18357 - C38188 * C18262 - C37964 * C18537 +
            C82639 * C18624) *
               C82523 * C82878) *
              C82938 * C688 -
          ((C37964 * C18358 - C38188 * C18261 - C37964 * C18538 +
            C82639 * C18623 + C37963 * C18357 - C38187 * C18262 -
            C37963 * C18537 + C37887 * C18624) *
               C82523 * C82878 +
           (C37964 * C16827 - C38188 * C16745 - C37964 * C16983 +
            C82639 * C17061 + C37963 * C5060 - C38187 * C4976 - C37963 * C5220 +
            C37887 * C5302) *
               C82523 * C82924 +
           (C37964 * C3442 - C38188 * C3345 - C37964 * C3616 + C82639 * C3703 +
            C37963 * C3441 - C38187 * C3348 - C37963 * C3613 + C37887 * C3704) *
               C82523 * C82936 +
           (C37964 * C1746 - C38188 * C1653 - C37964 * C1950 + C82639 * C2035 +
            C37963 * C753 - C38187 * C695 - C37963 * C857 + C37887 * C913) *
               C82523 * C82942) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
               C39895 +
           (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
               C82941 +
           (C55448 - C55449 + C55450 - C55451) * C39896 +
           (C55758 - C55759 + C55760 - C55761) * C82934 +
           (C55456 - C55457 + C55458 - C55459) * C39897 +
           (C55762 - C55763 + C55764 - C55765) * C82921 +
           (C69857 - C69858 + C69859 - C69860) * C39898 +
           (C70063 - C70064 + C70065 - C70066) * C82871) *
              C82523 * C82938 * C688 +
          ((C55449 - C55448 + C55451 - C55450) * C39895 +
           (C55759 - C55758 + C55761 - C55760) * C82941 +
           (C55457 - C55456 + C55459 - C55458) * C39896 +
           (C55763 - C55762 + C55765 - C55764) * C82934 +
           (C69858 - C69857 + C69860 - C69859) * C39897 +
           (C70064 - C70063 + C70066 - C70065) * C82921 +
           (C52458 * C15407 - C52324 * C15508 + C52459 * C16303 -
            C82679 * C16400) *
               C39898 +
           (C52458 * C15554 - C52324 * C15649 + C52459 * C16446 -
            C82679 * C16536) *
               C82871) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C37963 +
            (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
                C37887 +
            (C55448 - C55449 + C55450 - C55451) * C37964 +
            (C55758 - C55759 + C55760 - C55761) * C82639) *
               C82925 +
           ((C52461 - C52462 + C52463 - C52464) * C37963 +
            (C52683 - C52684 + C52685 - C52686) * C37887 +
            (C54487 - C54488 + C54489 - C54490) * C37964 +
            (C54818 - C54819 + C54820 - C54821) * C82639) *
               C82909 +
           ((C52469 - C52470 + C52471 - C52472) * C37963 +
            (C52687 - C52688 + C52689 - C52690) * C37887 +
            (C59142 - C59143 + C59144 - C59145) * C37964 +
            (C59444 - C59445 + C59446 - C59447) * C82639) *
               C82885) *
              C82938 * C688 +
          (((C55449 - C55448 + C55451 - C55450) * C37963 +
            (C55759 - C55758 + C55761 - C55760) * C37887 +
            (C55457 - C55456 + C55459 - C55458) * C37964 +
            (C55763 - C55762 + C55765 - C55764) * C82639) *
               C82925 +
           ((C54488 - C54487 + C54490 - C54489) * C37963 +
            (C54819 - C54818 + C54821 - C54820) * C37887 +
            (C54496 - C54495 + C54498 - C54497) * C37964 +
            (C54823 - C54822 + C54825 - C54824) * C82639) *
               C82909 +
           ((C59143 - C59142 + C59145 - C59144) * C37963 +
            (C59445 - C59444 + C59447 - C59446) * C37887 +
            (C52458 * C1655 - C52324 * C1854 + C52459 * C3343 -
             C82679 * C3532) *
                C37964 +
            (C52458 * C1952 - C52324 * C2157 + C52459 * C3618 -
             C82679 * C3784) *
                C82639) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C82942 * C240 - C57171 * C102 + C82936 * C1265 - C57172 * C1155 +
            C82924 * C4299 - C57173 * C4108 + C82878 * C5904 - C57174 * C5690) *
               C37963 +
           (C82942 * C441 - C57171 * C310 + C82936 * C1416 - C57172 * C1317 +
            C82924 * C4593 - C57173 * C4405 + C82878 * C6185 - C57174 * C5984) *
               C37887 +
           (C71721 - C71722 + C71723 - C71724 + C71725 - C71726 + C71727 -
            C71728) *
               C37964 +
           (C71935 - C71936 + C71937 - C71938 + C71939 - C71940 + C71941 -
            C71942) *
               C82639) *
              C82523 * C82938 * C688 +
          ((C71722 - C71721 + C71724 - C71723 + C71726 - C71725 + C71728 -
            C71727) *
               C37963 +
           (C71936 - C71935 + C71938 - C71937 + C71940 - C71939 + C71942 -
            C71941) *
               C37887 +
           (C57171 * C1653 - C82942 * C1852 + C57172 * C3345 - C82936 * C3530 +
            C57173 * C16745 - C82924 * C16905 + C57174 * C18261 -
            C82878 * C18460) *
               C37964 +
           (C57171 * C1950 - C82942 * C2155 + C57172 * C3616 - C82936 * C3780 +
            C57173 * C16983 - C82924 * C17137 + C57174 * C18538 -
            C82878 * C18742) *
               C82639) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezx[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C52458 +
            (C82523 * C503 - C15405 * C497) * C52324 +
            (C18542 - C18543) * C52459 + (C18822 - C18823) * C82679) *
               C82941 +
           ((C16004 - C16005) * C52458 + (C16154 - C16155) * C52324 +
            (C17734 - C17735) * C52459 + (C17988 - C17989) * C82679) *
               C82934 +
           ((C16008 - C16009) * C52458 + (C16156 - C16157) * C52324 +
            (C17738 - C17739) * C52459 + (C17992 - C17993) * C82679) *
               C82921 +
           ((C16012 - C16013) * C52458 + (C16158 - C16159) * C52324 +
            (C24647 - C24648) * C52459 + (C24853 - C24854) * C82679) *
               C82871) *
              C82938 * C688 +
          (((C16005 - C16004) * C52458 + (C16155 - C16154) * C52324 +
            (C17735 - C17734) * C52459 + (C17989 - C17988) * C82679) *
               C82941 +
           ((C16009 - C16008) * C52458 + (C16157 - C16156) * C52324 +
            (C17739 - C17738) * C52459 + (C17993 - C17992) * C82679) *
               C82934 +
           ((C16013 - C16012) * C52458 + (C16159 - C16158) * C52324 +
            (C24648 - C24647) * C52459 + (C24854 - C24853) * C82679) *
               C82921 +
           ((C16017 - C16016) * C52458 + (C16161 - C16160) * C52324 +
            (C15405 * C16303 - C82523 * C16305) * C52459 +
            (C15405 * C16580 - C82523 * C16582) * C82679) *
               C82871) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C52458 +
            (C82925 * C503 - C13259 * C497 + C82909 * C504 - C13261 * C498 +
             C82885 * C505 - C13263 * C499) *
                C52324 +
            (C27404 - C27405 + C27406 - C27407 + C27408 - C27409) * C52459 +
            (C27656 - C27657 + C27658 - C27659 + C27660 - C27661) * C82679) *
               C37887 +
           ((C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C52458 +
            (C14532 - C14533 + C14534 - C14535 + C14536 - C14537) * C52324 +
            (C67669 - C67670 + C67671 - C67672 + C67673 - C67674) * C52459 +
            (C67975 - C67976 + C67977 - C67978 + C67979 - C67980) * C82679) *
               C82639) *
              C82938 * C688 +
          (((C14287 - C14286 + C14289 - C14288 + C14291 - C14290) * C52458 +
            (C14533 - C14532 + C14535 - C14534 + C14537 - C14536) * C52324 +
            (C67670 - C67669 + C67672 - C67671 + C67674 - C67673) * C52459 +
            (C67976 - C67975 + C67978 - C67977 + C67980 - C67979) * C82679) *
               C37887 +
           ((C14299 - C14298 + C14301 - C14300 + C14303 - C14302) * C52458 +
            (C14539 - C14538 + C14541 - C14540 + C14543 - C14542) * C52324 +
            (C13259 * C3345 - C82925 * C3353 + C13261 * C3344 - C82909 * C3351 +
             C13263 * C3343 - C82885 * C3349) *
                C52459 +
            (C13259 * C3862 - C82925 * C3868 + C13261 * C3863 - C82909 * C3869 +
             C13263 * C3864 - C82885 * C3870) *
                C82679) *
               C82639) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C57171 +
            (C82523 * C503 - C15405 * C497) * C82942 +
            (C18542 - C18543) * C57172 + (C18822 - C18823) * C82936 +
            (C18546 - C18547) * C57173 + (C18824 - C18825) * C82924 +
            (C30995 - C30996) * C57174 + (C31151 - C31152) * C82878) *
               C37887 +
           ((C16004 - C16005) * C57171 + (C16154 - C16155) * C82942 +
            (C17734 - C17735) * C57172 + (C17988 - C17989) * C82936 +
            (C17742 - C17743) * C57173 + (C17990 - C17991) * C82924 +
            (C36826 - C36827) * C57174 + (C37036 - C37037) * C82878) *
               C82639) *
              C82938 * C688 +
          (((C16005 - C16004) * C57171 + (C16155 - C16154) * C82942 +
            (C17735 - C17734) * C57172 + (C17989 - C17988) * C82936 +
            (C17743 - C17742) * C57173 + (C17991 - C17990) * C82924 +
            (C36827 - C36826) * C57174 + (C37037 - C37036) * C82878) *
               C37887 +
           ((C16009 - C16008) * C57171 + (C16157 - C16156) * C82942 +
            (C17739 - C17738) * C57172 + (C17993 - C17992) * C82936 +
            (C17747 - C17746) * C57173 + (C17995 - C17994) * C82924 +
            (C15405 * C18261 - C82523 * C18263) * C57174 +
            (C15405 * C18818 - C82523 * C18820) * C82878) *
               C82639) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82941 * C169 - C39895 * C102 + C82934 * C753 - C39896 * C695 +
            C82921 * C1746 - C39897 * C1653 + C82871 * C2653 - C39898 * C2527) *
               C52458 +
           (C82941 * C551 - C39895 * C497 + C82934 * C1055 - C39896 * C1003 +
            C82921 * C2323 - C39897 * C2241 + C82871 * C3175 - C39898 * C3083) *
               C52324 +
           (C82941 * C1213 - C39895 * C1155 + C82934 * C3441 - C39896 * C3348 +
            C82921 * C3442 - C39897 * C3345 + C82871 * C16353 -
            C39898 * C16304) *
               C52459 +
           (C82941 * C1515 - C39895 * C1463 + C82934 * C3945 - C39896 * C3859 +
            C82921 * C3946 - C39897 * C3862 + C82871 * C16625 -
            C39898 * C16579) *
               C82679) *
              C82523 * C82938 * C688 +
          ((C39895 * C695 - C82941 * C753 + C39896 * C1653 - C82934 * C1746 +
            C39897 * C2527 - C82921 * C2653 + C39898 * C15407 -
            C82871 * C15462) *
               C52458 +
           (C39895 * C1003 - C82941 * C1055 + C39896 * C2241 - C82934 * C2323 +
            C39897 * C3083 - C82921 * C3175 + C39898 * C15693 -
            C82871 * C15739) *
               C52324 +
           (C39895 * C3348 - C82941 * C3441 + C39896 * C3345 - C82934 * C3442 +
            C39897 * C16304 - C82921 * C16353 + C39898 * C16303 -
            C82871 * C16354) *
               C52459 +
           (C39895 * C3859 - C82941 * C3945 + C39896 * C3862 - C82934 * C3946 +
            C39897 * C16579 - C82921 * C16625 + C39898 * C16580 -
            C82871 * C16626) *
               C82679) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C52458 +
            (C37887 * C551 - C37963 * C497 + C82639 * C1055 - C37964 * C1003) *
                C52324 +
            (C43819 - C43820 + C43821 - C43822) * C52459 +
            (C44475 - C44476 + C44477 - C44478) * C82679) *
               C82925 +
           ((C37966 - C37967 + C37968 - C37969) * C52458 +
            (C38430 - C38431 + C38432 - C38433) * C52324 +
            (C41884 - C41885 + C41886 - C41887) * C52459 +
            (C42534 - C42535 + C42536 - C42537) * C82679) *
               C82909 +
           ((C37974 - C37975 + C37976 - C37977) * C52458 +
            (C38434 - C38435 + C38436 - C38437) * C52324 +
            (C46955 - C46956 + C46957 - C46958) * C52459 +
            (C47565 - C47566 + C47567 - C47568) * C82679) *
               C82885) *
              C82938 * C688 +
          (((C37963 * C695 - C37887 * C753 + C37964 * C1653 - C82639 * C1746) *
                C52458 +
            (C37963 * C1003 - C37887 * C1055 + C37964 * C2241 -
             C82639 * C2323) *
                C52324 +
            (C37963 * C3348 - C37887 * C3441 + C37964 * C3345 -
             C82639 * C3442) *
                C52459 +
            (C37963 * C3859 - C37887 * C3945 + C37964 * C3862 -
             C82639 * C3946) *
                C82679) *
               C82925 +
           ((C37963 * C694 - C37887 * C754 + C37964 * C1654 - C82639 * C1747) *
                C52458 +
            (C37963 * C1004 - C37887 * C1056 + C37964 * C2242 -
             C82639 * C2324) *
                C52324 +
            (C37963 * C3347 - C37887 * C3443 + C37964 * C3344 -
             C82639 * C3444) *
                C52459 +
            (C37963 * C3860 - C37887 * C3947 + C37964 * C3863 -
             C82639 * C3948) *
                C82679) *
               C82909 +
           ((C37963 * C693 - C37887 * C755 + C37964 * C1655 - C82639 * C1748) *
                C52458 +
            (C37963 * C1005 - C37887 * C1057 + C37964 * C2243 -
             C82639 * C2325) *
                C52324 +
            (C37963 * C3346 - C37887 * C3445 + C37964 * C3343 -
             C82639 * C3446) *
                C52459 +
            (C37963 * C3861 - C37887 * C3949 + C37964 * C3864 -
             C82639 * C3950) *
                C82679) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
               C57171 +
           (C37887 * C551 - C37963 * C497 + C82639 * C1055 - C37964 * C1003) *
               C82942 +
           (C43819 - C43820 + C43821 - C43822) * C57172 +
           (C44475 - C44476 + C44477 - C44478) * C82936 +
           (C43827 - C43828 + C43829 - C43830) * C57173 +
           (C44479 - C44480 + C44481 - C44482) * C82924 +
           (C37887 * C5816 - C37963 * C5690 + C82639 * C18357 -
            C37964 * C18262) *
               C57174 +
           (C37887 * C6354 - C37963 * C6262 + C82639 * C18899 -
            C37964 * C18817) *
               C82878) *
              C82523 * C82938 * C688 +
          ((C37963 * C695 - C37887 * C753 + C37964 * C1653 - C82639 * C1746) *
               C57171 +
           (C37963 * C1003 - C37887 * C1055 + C37964 * C2241 - C82639 * C2323) *
               C82942 +
           (C37963 * C3348 - C37887 * C3441 + C37964 * C3345 - C82639 * C3442) *
               C57172 +
           (C37963 * C3859 - C37887 * C3945 + C37964 * C3862 - C82639 * C3946) *
               C82936 +
           (C37963 * C4976 - C37887 * C5060 + C37964 * C16745 -
            C82639 * C16827) *
               C57173 +
           (C37963 * C5454 - C37887 * C5534 + C37964 * C17213 -
            C82639 * C17291) *
               C82924 +
           (C37963 * C18262 - C37887 * C18357 + C37964 * C18261 -
            C82639 * C18358) *
               C57174 +
           (C37963 * C18817 - C37887 * C18899 + C37964 * C18818 -
            C82639 * C18900) *
               C82878) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52458 * C240 - C52892 * C102 - C52458 * C497 + C52324 * C608 +
            C52459 * C1265 - C52893 * C1155 - C52459 * C1463 + C82679 * C1566) *
               C82941 +
           (C56084 + C56085) * C82934 + (C56086 + C56087) * C82921 +
           (C70277 + C70278) * C82871) *
              C82523 * C82938 * C688 -
          ((C52459 * C16400 - C52893 * C16303 - C52459 * C16580 +
            C82679 * C16669 + C52458 * C15508 - C52892 * C15407 -
            C52458 * C15693 + C52324 * C15783) *
               C82871 +
           (C70278 + C70277) * C82921 + (C56087 + C56086) * C82934 +
           (C56085 + C56084) * C82941) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52458 * C240 - C52892 * C102 - C52458 * C497 + C52324 * C608 +
             C52459 * C1265 - C52893 * C1155 - C52459 * C1463 +
             C82679 * C1566) *
                C37887 +
            (C56084 + C56085) * C82639) *
               C82925 +
           ((C52931 + C52932) * C37887 + (C55150 + C55151) * C82639) * C82909 +
           ((C52933 + C52934) * C37887 + (C59754 + C59755) * C82639) * C82885) *
              C82938 * C688 -
          (((C52459 * C3532 - C52893 * C3343 - C52459 * C3864 + C82679 * C4025 +
             C52458 * C1854 - C52892 * C1655 - C52458 * C2243 +
             C52324 * C2415) *
                C82639 +
            (C59755 + C59754) * C37887) *
               C82885 +
           ((C55153 + C55152) * C82639 + (C55151 + C55150) * C37887) * C82909 +
           ((C56087 + C56086) * C82639 + (C56085 + C56084) * C37887) * C82925) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C57171 * C240 - C57595 * C102 - C57171 * C497 + C82942 * C608 +
            C57172 * C1265 - C57596 * C1155 - C57172 * C1463 + C82936 * C1566 +
            C57173 * C4299 - C57597 * C4108 - C57173 * C4683 + C82924 * C4854 +
            C57174 * C5904 - C57598 * C5690 - C57174 * C6262 + C82878 * C6437) *
               C37887 +
           (C72165 + C72166 + C72167 + C72168) * C82639) *
              C82523 * C82938 * C688 -
          ((C57174 * C18460 - C57598 * C18261 - C57174 * C18818 +
            C82878 * C18987 + C57173 * C16905 - C57597 * C16745 -
            C57173 * C17213 + C82924 * C17367 + C57172 * C3530 -
            C57596 * C3345 - C57172 * C3862 + C82936 * C4029 + C57171 * C1852 -
            C57595 * C1653 - C57171 * C2241 + C82942 * C2413) *
               C82639 +
           (C72168 + C72167 + C72166 + C72165) * C37887) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C52324 +
            C18282 * C82679) *
               C82941 +
           (C69719 + C69720) * C82934 + (C69721 + C69722) * C82921 +
           (C69723 + C69724) * C82871) *
              C1149 -
          (((C15405 * C17444 - C15406 * C17443 - C15405 * C17445 +
             C82523 * C17446) *
                C82679 +
            C24439 * C52324) *
               C82871 +
           (C17477 * C82679 + C17476 * C52324) * C82921 +
           (C17475 * C82679 + C17474 * C52324) * C82934 +
           (C18283 * C82679 + C18282 * C52324) * C82941) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13259 * C108 - C13260 * C102 - C13259 * C109 + C82925 * C120 +
             C13261 * C110 - C13262 * C103 - C13261 * C111 + C82909 * C121 +
             C13263 * C112 - C13264 * C104 - C13263 * C113 + C82885 * C122) *
                C52324 +
            (C27176 + C27177 + C27178) * C82679) *
               C37887 +
           ((C14058 + C14059 + C14060) * C52324 +
            (C67372 + C67373 + C67374) * C82679) *
               C82639) *
              C1149 -
          (((C13263 * C4977 - C13264 * C4974 - C13263 * C4978 + C82885 * C4983 +
             C13261 * C4979 - C13262 * C4975 - C13261 * C4980 + C82909 * C4984 +
             C13259 * C4981 - C13260 * C4976 - C13259 * C4982 +
             C82925 * C4985) *
                C82679 +
            (C67374 + C67373 + C67372) * C52324) *
               C82639 +
           ((C27181 + C27180 + C27179) * C82679 +
            (C27178 + C27177 + C27176) * C52324) *
               C37887) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C82942 +
            C18282 * C82936 + C18283 * C82924 + C30853 * C82878) *
               C37887 +
           (C71585 + C71586 + C71587 + C71588) * C82639) *
              C1149 -
          (((C15405 * C30443 - C15406 * C30442 - C15405 * C30444 +
             C82523 * C30445) *
                C82878 +
            C36610 * C82924 + C17475 * C82936 + C17474 * C82942) *
               C82639 +
           (C30854 * C82878 + C30853 * C82924 + C18283 * C82936 +
            C18282 * C82942) *
               C37887) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82941 * C169 - C39895 * C102 + C82934 * C753 - C39896 * C695 +
             C82921 * C1746 - C39897 * C1653 + C82871 * C2653 -
             C39898 * C2527) *
                C15405 +
            (C82941 * C175 - C39895 * C109 + C82934 * C758 - C39896 * C705 +
             C82921 * C1750 - C39897 * C1658 + C82871 * C2656 -
             C39898 * C2533) *
                C82523) *
               C52324 +
           ((C70411 - C70412 + C70413 - C70414 + C70415 - C70416 + C70417 -
             C70418) *
                C15405 +
            (C70419 - C70420 + C70421 - C70422 + C70423 - C70424 + C70425 -
             C70426) *
                C82523) *
               C82679) *
              C1149 +
          (((C70412 - C70411 + C70414 - C70413 + C70416 - C70415 + C70418 -
             C70417) *
                C15405 +
            (C70420 - C70419 + C70422 - C70421 + C70424 - C70423 + C70426 -
             C70425) *
                C82523) *
               C52324 +
           ((C39895 * C4108 - C82941 * C4198 + C39896 * C4976 - C82934 * C5060 +
             C39897 * C16745 - C82921 * C16827 + C39898 * C17443 -
             C82871 * C17555) *
                C15405 +
            (C39895 * C4113 - C82941 * C4202 + C39896 * C4982 - C82934 * C5063 +
             C39897 * C16748 - C82921 * C16829 + C39898 * C17445 -
             C82871 * C17556) *
                C82523) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C13259 +
            (C37887 * C175 - C37963 * C109 + C82639 * C758 - C37964 * C705) *
                C82925 +
            (C37966 - C37967 + C37968 - C37969) * C13261 +
            (C37970 - C37971 + C37972 - C37973) * C82909 +
            (C37974 - C37975 + C37976 - C37977) * C13263 +
            (C37978 - C37979 + C37980 - C37981) * C82885) *
               C52324 +
           ((C43819 - C43820 + C43821 - C43822) * C13259 +
            (C43823 - C43824 + C43825 - C43826) * C82925 +
            (C41884 - C41885 + C41886 - C41887) * C13261 +
            (C41888 - C41889 + C41890 - C41891) * C82909 +
            (C46955 - C46956 + C46957 - C46958) * C13263 +
            (C46959 - C46960 + C46961 - C46962) * C82885) *
               C82679) *
              C1149 +
          (((C43820 - C43819 + C43822 - C43821) * C13259 +
            (C43824 - C43823 + C43826 - C43825) * C82925 +
            (C41885 - C41884 + C41887 - C41886) * C13261 +
            (C41889 - C41888 + C41891 - C41890) * C82909 +
            (C46956 - C46955 + C46958 - C46957) * C13263 +
            (C46960 - C46959 + C46962 - C46961) * C82885) *
               C52324 +
           ((C43828 - C43827 + C43830 - C43829) * C13259 +
            (C43832 - C43831 + C43834 - C43833) * C82925 +
            (C41893 - C41892 + C41895 - C41894) * C13261 +
            (C41897 - C41896 + C41899 - C41898) * C82909 +
            (C37963 * C4110 - C37887 * C4200 + C37964 * C4974 -
             C82639 * C5062) *
                C13263 +
            (C37963 * C4117 - C37887 * C4204 + C37964 * C4978 -
             C82639 * C5065) *
                C82885) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C15405 +
            (C37887 * C175 - C37963 * C109 + C82639 * C758 - C37964 * C705) *
                C82523) *
               C82942 +
           ((C43819 - C43820 + C43821 - C43822) * C15405 +
            (C43823 - C43824 + C43825 - C43826) * C82523) *
               C82936 +
           ((C43827 - C43828 + C43829 - C43830) * C15405 +
            (C43831 - C43832 + C43833 - C43834) * C82523) *
               C82924 +
           ((C72301 - C72302 + C72303 - C72304) * C15405 +
            (C72305 - C72306 + C72307 - C72308) * C82523) *
               C82878) *
              C1149 +
          (((C43820 - C43819 + C43822 - C43821) * C15405 +
            (C43824 - C43823 + C43826 - C43825) * C82523) *
               C82942 +
           ((C43828 - C43827 + C43830 - C43829) * C15405 +
            (C43832 - C43831 + C43834 - C43833) * C82523) *
               C82936 +
           ((C72302 - C72301 + C72304 - C72303) * C15405 +
            (C72306 - C72305 + C72308 - C72307) * C82523) *
               C82924 +
           ((C37963 * C30022 - C37887 * C30072 + C37964 * C30442 -
             C82639 * C30488) *
                C15405 +
            (C37963 * C30025 - C37887 * C30074 + C37964 * C30444 -
             C82639 * C30489) *
                C82523) *
               C82878) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C15405 +
            (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
                C82523) *
               C82941 +
           ((C55448 - C55449 + C55450 - C55451) * C15405 +
            (C55452 - C55453 + C55454 - C55455) * C82523) *
               C82934 +
           ((C55456 - C55457 + C55458 - C55459) * C15405 +
            (C55460 - C55461 + C55462 - C55463) * C82523) *
               C82921 +
           ((C69857 - C69858 + C69859 - C69860) * C15405 +
            (C69861 - C69862 + C69863 - C69864) * C82523) *
               C82871) *
              C1149 +
          (((C52458 * C1155 - C52324 * C1265 + C52459 * C4108 -
             C82679 * C4299) *
                C15405 +
            (C52458 * C1165 - C52324 * C1270 + C52459 * C4113 -
             C82679 * C4303) *
                C82523) *
               C82941 +
           ((C52458 * C3348 - C52324 * C3527 + C52459 * C4976 -
             C82679 * C5140) *
                C15405 +
            (C52458 * C3360 - C52324 * C3533 + C52459 * C4982 -
             C82679 * C5143) *
                C82523) *
               C82934 +
           ((C52458 * C3345 - C52324 * C3530 + C52459 * C16745 -
             C82679 * C16905) *
                C15405 +
            (C52458 * C3354 - C52324 * C3536 + C52459 * C16748 -
             C82679 * C16907) *
                C82523) *
               C82921 +
           ((C52458 * C16304 - C52324 * C16399 + C52459 * C17443 -
             C82679 * C17631) *
                C15405 +
            (C52458 * C16308 - C52324 * C16401 + C52459 * C17445 -
             C82679 * C17632) *
                C82523) *
               C82871) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C13259 +
            (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
                C82925 +
            (C52461 - C52462 + C52463 - C52464) * C13261 +
            (C52465 - C52466 + C52467 - C52468) * C82909 +
            (C52469 - C52470 + C52471 - C52472) * C13263 +
            (C52473 - C52474 + C52475 - C52476) * C82885) *
               C37887 +
           ((C55448 - C55449 + C55450 - C55451) * C13259 +
            (C55452 - C55453 + C55454 - C55455) * C82925 +
            (C54487 - C54488 + C54489 - C54490) * C13261 +
            (C54491 - C54492 + C54493 - C54494) * C82909 +
            (C59142 - C59143 + C59144 - C59145) * C13263 +
            (C59146 - C59147 + C59148 - C59149) * C82885) *
               C82639) *
              C1149 +
          (((C52458 * C1155 - C52324 * C1265 + C52459 * C4108 -
             C82679 * C4299) *
                C13259 +
            (C52458 * C1165 - C52324 * C1270 + C52459 * C4113 -
             C82679 * C4303) *
                C82925 +
            (C52458 * C1154 - C52324 * C1266 + C52459 * C4109 -
             C82679 * C4300) *
                C13261 +
            (C52458 * C1163 - C52324 * C1271 + C52459 * C4115 -
             C82679 * C4304) *
                C82909 +
            (C52458 * C1153 - C52324 * C1267 + C52459 * C4110 -
             C82679 * C4301) *
                C13263 +
            (C52458 * C1161 - C52324 * C1272 + C52459 * C4117 -
             C82679 * C4305) *
                C82885) *
               C37887 +
           ((C52458 * C3348 - C52324 * C3527 + C52459 * C4976 -
             C82679 * C5140) *
                C13259 +
            (C52458 * C3360 - C52324 * C3533 + C52459 * C4982 -
             C82679 * C5143) *
                C82925 +
            (C52458 * C3347 - C52324 * C3528 + C52459 * C4975 -
             C82679 * C5141) *
                C13261 +
            (C52458 * C3358 - C52324 * C3534 + C52459 * C4980 -
             C82679 * C5144) *
                C82909 +
            (C52458 * C3346 - C52324 * C3529 + C52459 * C4974 -
             C82679 * C5142) *
                C13263 +
            (C52458 * C3356 - C52324 * C3535 + C52459 * C4978 -
             C82679 * C5145) *
                C82885) *
               C82639) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82942 * C240 - C57171 * C102 + C82936 * C1265 - C57172 * C1155 +
             C82924 * C4299 - C57173 * C4108 + C82878 * C5904 -
             C57174 * C5690) *
                C15405 +
            (C82942 * C246 - C57171 * C109 + C82936 * C1270 - C57172 * C1165 +
             C82924 * C4303 - C57173 * C4113 + C82878 * C5907 -
             C57174 * C5696) *
                C82523) *
               C37887 +
           ((C71721 - C71722 + C71723 - C71724 + C71725 - C71726 + C71727 -
             C71728) *
                C15405 +
            (C71729 - C71730 + C71731 - C71732 + C71733 - C71734 + C71735 -
             C71736) *
                C82523) *
               C82639) *
              C1149 +
          (((C57171 * C1155 - C82942 * C1265 + C57172 * C4108 - C82936 * C4299 +
             C57173 * C5690 - C82924 * C5904 + C57174 * C30022 -
             C82878 * C30123) *
                C15405 +
            (C57171 * C1165 - C82942 * C1270 + C57172 * C4113 - C82936 * C4303 +
             C57173 * C5696 - C82924 * C5907 + C57174 * C30025 -
             C82878 * C30125) *
                C82523) *
               C37887 +
           ((C57171 * C3348 - C82942 * C3527 + C57172 * C4976 - C82936 * C5140 +
             C57173 * C18262 - C82924 * C18459 + C57174 * C30442 -
             C82878 * C30532) *
                C15405 +
            (C57171 * C3360 - C82942 * C3533 + C57172 * C4982 - C82936 * C5143 +
             C57173 * C18266 - C82924 * C18461 + C57174 * C30444 -
             C82878 * C30533) *
                C82523) *
               C82639) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C39895 +
            (C82523 * C316 - C15405 * C310) * C82941 +
            (C16004 - C16005) * C39896 + (C16006 - C16007) * C82934 +
            (C16008 - C16009) * C39897 + (C16010 - C16011) * C82921 +
            (C16012 - C16013) * C39898 + (C16014 - C16015) * C82871) *
               C52324 +
           ((C18542 - C18543) * C39895 + (C18544 - C18545) * C82941 +
            (C17734 - C17735) * C39896 + (C17736 - C17737) * C82934 +
            (C17738 - C17739) * C39897 + (C17740 - C17741) * C82921 +
            (C24647 - C24648) * C39898 + (C24649 - C24650) * C82871) *
               C82679) *
              C1149 +
          (((C18543 - C18542) * C39895 + (C18545 - C18544) * C82941 +
            (C17735 - C17734) * C39896 + (C17737 - C17736) * C82934 +
            (C17739 - C17738) * C39897 + (C17741 - C17740) * C82921 +
            (C24648 - C24647) * C39898 + (C24650 - C24649) * C82871) *
               C52324 +
           ((C18547 - C18546) * C39895 + (C18549 - C18548) * C82941 +
            (C17743 - C17742) * C39896 + (C17745 - C17744) * C82934 +
            (C17747 - C17746) * C39897 + (C17749 - C17748) * C82921 +
            (C15405 * C17443 - C82523 * C17444) * C39898 +
            (C15405 * C17731 - C82523 * C17732) * C82871) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C37963 +
            (C82925 * C316 - C13259 * C310 + C82909 * C317 - C13261 * C311 +
             C82885 * C318 - C13263 * C312) *
                C37887 +
            (C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C37964 +
            (C14292 - C14293 + C14294 - C14295 + C14296 - C14297) * C82639) *
               C52324 +
           ((C27404 - C27405 + C27406 - C27407 + C27408 - C27409) * C37963 +
            (C27410 - C27411 + C27412 - C27413 + C27414 - C27415) * C37887 +
            (C67669 - C67670 + C67671 - C67672 + C67673 - C67674) * C37964 +
            (C67675 - C67676 + C67677 - C67678 + C67679 - C67680) * C82639) *
               C82679) *
              C1149 +
          (((C27405 - C27404 + C27407 - C27406 + C27409 - C27408) * C37963 +
            (C27411 - C27410 + C27413 - C27412 + C27415 - C27414) * C37887 +
            (C67670 - C67669 + C67672 - C67671 + C67674 - C67673) * C37964 +
            (C67676 - C67675 + C67678 - C67677 + C67680 - C67679) * C82639) *
               C52324 +
           ((C27417 - C27416 + C27419 - C27418 + C27421 - C27420) * C37963 +
            (C27423 - C27422 + C27425 - C27424 + C27427 - C27426) * C37887 +
            (C13259 * C4976 - C82925 * C4981 + C13261 * C4975 - C82909 * C4979 +
             C13263 * C4974 - C82885 * C4977) *
                C37964 +
            (C13259 * C5220 - C82925 * C5223 + C13261 * C5221 - C82909 * C5224 +
             C13263 * C5222 - C82885 * C5225) *
                C82639) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C37963 +
            (C82523 * C316 - C15405 * C310) * C37887 +
            (C16004 - C16005) * C37964 + (C16006 - C16007) * C82639) *
               C82942 +
           ((C18542 - C18543) * C37963 + (C18544 - C18545) * C37887 +
            (C17734 - C17735) * C37964 + (C17736 - C17737) * C82639) *
               C82936 +
           ((C18546 - C18547) * C37963 + (C18548 - C18549) * C37887 +
            (C17742 - C17743) * C37964 + (C17744 - C17745) * C82639) *
               C82924 +
           ((C30995 - C30996) * C37963 + (C30997 - C30998) * C37887 +
            (C36826 - C36827) * C37964 + (C36828 - C36829) * C82639) *
               C82878) *
              C1149 +
          (((C18543 - C18542) * C37963 + (C18545 - C18544) * C37887 +
            (C17735 - C17734) * C37964 + (C17737 - C17736) * C82639) *
               C82942 +
           ((C18547 - C18546) * C37963 + (C18549 - C18548) * C37887 +
            (C17743 - C17742) * C37964 + (C17745 - C17744) * C82639) *
               C82936 +
           ((C30996 - C30995) * C37963 + (C30998 - C30997) * C37887 +
            (C36827 - C36826) * C37964 + (C36829 - C36828) * C82639) *
               C82924 +
           ((C31000 - C30999) * C37963 + (C31002 - C31001) * C37887 +
            (C15405 * C30442 - C82523 * C30443) * C37964 +
            (C15405 * C30576 - C82523 * C30577) * C82639) *
               C82878) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39895 * C169 - C40113 * C102 - C39895 * C310 + C82941 * C365 +
            C39896 * C753 - C40114 * C695 - C39896 * C857 + C82934 * C913 +
            C39897 * C1746 - C40115 * C1653 - C39897 * C1950 + C82921 * C2035 +
            C39898 * C2653 - C40116 * C2527 - C39898 * C2821 + C82871 * C2927) *
               C82523 * C52324 +
           (C70649 + C70650 + C70651 + C70652) * C82523 * C82679) *
              C1149 -
          ((C39898 * C17555 - C40116 * C17443 - C39898 * C17731 +
            C82871 * C17823 + C39897 * C16827 - C40115 * C16745 -
            C39897 * C16983 + C82921 * C17061 + C39896 * C5060 -
            C40114 * C4976 - C39896 * C5220 + C82934 * C5302 + C39895 * C4198 -
            C40113 * C4108 - C39895 * C4405 + C82941 * C4487) *
               C82523 * C82679 +
           (C70652 + C70651 + C70650 + C70649) * C82523 * C52324) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C37963 * C169 - C38187 * C102 - C37963 * C310 + C37887 * C365 +
             C37964 * C753 - C38188 * C695 - C37964 * C857 + C82639 * C913) *
                C82925 +
            (C38226 + C38227) * C82909 + (C38228 + C38229) * C82885) *
               C52324 +
           ((C44169 + C44170) * C82925 + (C42230 + C42231) * C82909 +
            (C47269 + C47270) * C82885) *
               C82679) *
              C1149 -
          (((C37964 * C5062 - C38188 * C4974 - C37964 * C5222 + C82639 * C5300 +
             C37963 * C4200 - C38187 * C4110 - C37963 * C4407 +
             C37887 * C4489) *
                C82885 +
            (C42233 + C42232) * C82909 + (C44172 + C44171) * C82925) *
               C82679 +
           ((C47270 + C47269) * C82885 + (C42231 + C42230) * C82909 +
            (C44170 + C44169) * C82925) *
               C52324) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C37963 * C169 - C38187 * C102 - C37963 * C310 + C37887 * C365 +
            C37964 * C753 - C38188 * C695 - C37964 * C857 + C82639 * C913) *
               C82523 * C82942 +
           (C44169 + C44170) * C82523 * C82936 +
           (C44171 + C44172) * C82523 * C82924 +
           (C72519 + C72520) * C82523 * C82878) *
              C1149 -
          ((C37964 * C30488 - C38188 * C30442 - C37964 * C30576 +
            C82639 * C30620 + C37963 * C30072 - C38187 * C30022 -
            C37963 * C30169 + C37887 * C30215) *
               C82523 * C82878 +
           (C72520 + C72519) * C82523 * C82924 +
           (C44172 + C44171) * C82523 * C82936 +
           (C44170 + C44169) * C82523 * C82942) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
               C39895 +
           (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
               C82941 +
           (C55448 - C55449 + C55450 - C55451) * C39896 +
           (C55758 - C55759 + C55760 - C55761) * C82934 +
           (C55456 - C55457 + C55458 - C55459) * C39897 +
           (C55762 - C55763 + C55764 - C55765) * C82921 +
           (C69857 - C69858 + C69859 - C69860) * C39898 +
           (C70063 - C70064 + C70065 - C70066) * C82871) *
              C82523 * C1149 +
          ((C52458 * C1155 - C52324 * C1265 + C52459 * C4108 - C82679 * C4299) *
               C39895 +
           (C52458 * C1317 - C52324 * C1416 + C52459 * C4405 - C82679 * C4593) *
               C82941 +
           (C52458 * C3348 - C52324 * C3527 + C52459 * C4976 - C82679 * C5140) *
               C39896 +
           (C52458 * C3613 - C52324 * C3779 + C52459 * C5220 - C82679 * C5377) *
               C82934 +
           (C52458 * C3345 - C52324 * C3530 + C52459 * C16745 -
            C82679 * C16905) *
               C39897 +
           (C52458 * C3616 - C52324 * C3780 + C52459 * C16983 -
            C82679 * C17137) *
               C82921 +
           (C52458 * C16304 - C52324 * C16399 + C52459 * C17443 -
            C82679 * C17631) *
               C39898 +
           (C52458 * C16445 - C52324 * C16535 + C52459 * C17731 -
            C82679 * C17898) *
               C82871) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C37963 +
            (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
                C37887 +
            (C55448 - C55449 + C55450 - C55451) * C37964 +
            (C55758 - C55759 + C55760 - C55761) * C82639) *
               C82925 +
           ((C52461 - C52462 + C52463 - C52464) * C37963 +
            (C52683 - C52684 + C52685 - C52686) * C37887 +
            (C54487 - C54488 + C54489 - C54490) * C37964 +
            (C54818 - C54819 + C54820 - C54821) * C82639) *
               C82909 +
           ((C52469 - C52470 + C52471 - C52472) * C37963 +
            (C52687 - C52688 + C52689 - C52690) * C37887 +
            (C59142 - C59143 + C59144 - C59145) * C37964 +
            (C59444 - C59445 + C59446 - C59447) * C82639) *
               C82885) *
              C1149 +
          (((C52458 * C1155 - C52324 * C1265 + C52459 * C4108 -
             C82679 * C4299) *
                C37963 +
            (C52458 * C1317 - C52324 * C1416 + C52459 * C4405 -
             C82679 * C4593) *
                C37887 +
            (C52458 * C3348 - C52324 * C3527 + C52459 * C4976 -
             C82679 * C5140) *
                C37964 +
            (C52458 * C3613 - C52324 * C3779 + C52459 * C5220 -
             C82679 * C5377) *
                C82639) *
               C82925 +
           ((C52458 * C1154 - C52324 * C1266 + C52459 * C4109 -
             C82679 * C4300) *
                C37963 +
            (C52458 * C1318 - C52324 * C1417 + C52459 * C4406 -
             C82679 * C4594) *
                C37887 +
            (C52458 * C3347 - C52324 * C3528 + C52459 * C4975 -
             C82679 * C5141) *
                C37964 +
            (C52458 * C3614 - C52324 * C3781 + C52459 * C5221 -
             C82679 * C5378) *
                C82639) *
               C82909 +
           ((C52458 * C1153 - C52324 * C1267 + C52459 * C4110 -
             C82679 * C4301) *
                C37963 +
            (C52458 * C1319 - C52324 * C1418 + C52459 * C4407 -
             C82679 * C4595) *
                C37887 +
            (C52458 * C3346 - C52324 * C3529 + C52459 * C4974 -
             C82679 * C5142) *
                C37964 +
            (C52458 * C3615 - C52324 * C3783 + C52459 * C5222 -
             C82679 * C5379) *
                C82639) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C82942 * C240 - C57171 * C102 + C82936 * C1265 - C57172 * C1155 +
            C82924 * C4299 - C57173 * C4108 + C82878 * C5904 - C57174 * C5690) *
               C37963 +
           (C82942 * C441 - C57171 * C310 + C82936 * C1416 - C57172 * C1317 +
            C82924 * C4593 - C57173 * C4405 + C82878 * C6185 - C57174 * C5984) *
               C37887 +
           (C71721 - C71722 + C71723 - C71724 + C71725 - C71726 + C71727 -
            C71728) *
               C37964 +
           (C71935 - C71936 + C71937 - C71938 + C71939 - C71940 + C71941 -
            C71942) *
               C82639) *
              C82523 * C1149 +
          ((C57171 * C1155 - C82942 * C1265 + C57172 * C4108 - C82936 * C4299 +
            C57173 * C5690 - C82924 * C5904 + C57174 * C30022 -
            C82878 * C30123) *
               C37963 +
           (C57171 * C1317 - C82942 * C1416 + C57172 * C4405 - C82936 * C4593 +
            C57173 * C5984 - C82924 * C6185 + C57174 * C30169 -
            C82878 * C30259) *
               C37887 +
           (C57171 * C3348 - C82942 * C3527 + C57172 * C4976 - C82936 * C5140 +
            C57173 * C18262 - C82924 * C18459 + C57174 * C30442 -
            C82878 * C30532) *
               C37964 +
           (C57171 * C3613 - C82942 * C3779 + C57172 * C5220 - C82936 * C5377 +
            C57173 * C18537 - C82924 * C18741 + C57174 * C30576 -
            C82878 * C30663) *
               C82639) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezx[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C52458 +
            (C82523 * C503 - C15405 * C497) * C52324 +
            (C18542 - C18543) * C52459 + (C18822 - C18823) * C82679) *
               C82941 +
           ((C16004 - C16005) * C52458 + (C16154 - C16155) * C52324 +
            (C17734 - C17735) * C52459 + (C17988 - C17989) * C82679) *
               C82934 +
           ((C16008 - C16009) * C52458 + (C16156 - C16157) * C52324 +
            (C17738 - C17739) * C52459 + (C17992 - C17993) * C82679) *
               C82921 +
           ((C16012 - C16013) * C52458 + (C16158 - C16159) * C52324 +
            (C24647 - C24648) * C52459 + (C24853 - C24854) * C82679) *
               C82871) *
              C1149 +
          (((C18543 - C18542) * C52458 + (C18823 - C18822) * C52324 +
            (C18547 - C18546) * C52459 + (C18825 - C18824) * C82679) *
               C82941 +
           ((C17735 - C17734) * C52458 + (C17989 - C17988) * C52324 +
            (C17743 - C17742) * C52459 + (C17991 - C17990) * C82679) *
               C82934 +
           ((C17739 - C17738) * C52458 + (C17993 - C17992) * C52324 +
            (C17747 - C17746) * C52459 + (C17995 - C17994) * C82679) *
               C82921 +
           ((C24648 - C24647) * C52458 + (C24854 - C24853) * C52324 +
            (C15405 * C17443 - C82523 * C17444) * C52459 +
            (C15405 * C17985 - C82523 * C17986) * C82679) *
               C82871) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C52458 +
            (C82925 * C503 - C13259 * C497 + C82909 * C504 - C13261 * C498 +
             C82885 * C505 - C13263 * C499) *
                C52324 +
            (C27404 - C27405 + C27406 - C27407 + C27408 - C27409) * C52459 +
            (C27656 - C27657 + C27658 - C27659 + C27660 - C27661) * C82679) *
               C37887 +
           ((C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C52458 +
            (C14532 - C14533 + C14534 - C14535 + C14536 - C14537) * C52324 +
            (C67669 - C67670 + C67671 - C67672 + C67673 - C67674) * C52459 +
            (C67975 - C67976 + C67977 - C67978 + C67979 - C67980) * C82679) *
               C82639) *
              C1149 +
          (((C27405 - C27404 + C27407 - C27406 + C27409 - C27408) * C52458 +
            (C27657 - C27656 + C27659 - C27658 + C27661 - C27660) * C52324 +
            (C27417 - C27416 + C27419 - C27418 + C27421 - C27420) * C52459 +
            (C27663 - C27662 + C27665 - C27664 + C27667 - C27666) * C82679) *
               C37887 +
           ((C67670 - C67669 + C67672 - C67671 + C67674 - C67673) * C52458 +
            (C67976 - C67975 + C67978 - C67977 + C67980 - C67979) * C52324 +
            (C13259 * C4976 - C82925 * C4981 + C13261 * C4975 - C82909 * C4979 +
             C13263 * C4974 - C82885 * C4977) *
                C52459 +
            (C13259 * C5454 - C82925 * C5457 + C13261 * C5455 - C82909 * C5458 +
             C13263 * C5456 - C82885 * C5459) *
                C82679) *
               C82639) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C57171 +
            (C82523 * C503 - C15405 * C497) * C82942 +
            (C18542 - C18543) * C57172 + (C18822 - C18823) * C82936 +
            (C18546 - C18547) * C57173 + (C18824 - C18825) * C82924 +
            (C30995 - C30996) * C57174 + (C31151 - C31152) * C82878) *
               C37887 +
           ((C16004 - C16005) * C57171 + (C16154 - C16155) * C82942 +
            (C17734 - C17735) * C57172 + (C17988 - C17989) * C82936 +
            (C17742 - C17743) * C57173 + (C17990 - C17991) * C82924 +
            (C36826 - C36827) * C57174 + (C37036 - C37037) * C82878) *
               C82639) *
              C1149 +
          (((C18543 - C18542) * C57171 + (C18823 - C18822) * C82942 +
            (C18547 - C18546) * C57172 + (C18825 - C18824) * C82936 +
            (C30996 - C30995) * C57173 + (C31152 - C31151) * C82924 +
            (C31000 - C30999) * C57174 + (C31154 - C31153) * C82878) *
               C37887 +
           ((C17735 - C17734) * C57171 + (C17989 - C17988) * C82942 +
            (C17743 - C17742) * C57172 + (C17991 - C17990) * C82936 +
            (C36827 - C36826) * C57173 + (C37037 - C37036) * C82924 +
            (C15405 * C30442 - C82523 * C30443) * C57174 +
            (C15405 * C30706 - C82523 * C30707) * C82878) *
               C82639) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82941 * C169 - C39895 * C102 + C82934 * C753 - C39896 * C695 +
            C82921 * C1746 - C39897 * C1653 + C82871 * C2653 - C39898 * C2527) *
               C52458 +
           (C82941 * C551 - C39895 * C497 + C82934 * C1055 - C39896 * C1003 +
            C82921 * C2323 - C39897 * C2241 + C82871 * C3175 - C39898 * C3083) *
               C52324 +
           (C70411 - C70412 + C70413 - C70414 + C70415 - C70416 + C70417 -
            C70418) *
               C52459 +
           (C70851 - C70852 + C70853 - C70854 + C70855 - C70856 + C70857 -
            C70858) *
               C82679) *
              C82523 * C1149 +
          ((C70412 - C70411 + C70414 - C70413 + C70416 - C70415 + C70418 -
            C70417) *
               C52458 +
           (C70852 - C70851 + C70854 - C70853 + C70856 - C70855 + C70858 -
            C70857) *
               C52324 +
           (C39895 * C4108 - C82941 * C4198 + C39896 * C4976 - C82934 * C5060 +
            C39897 * C16745 - C82921 * C16827 + C39898 * C17443 -
            C82871 * C17555) *
               C52459 +
           (C39895 * C4683 - C82941 * C4765 + C39896 * C5454 - C82934 * C5534 +
            C39897 * C17213 - C82921 * C17291 + C39898 * C17985 -
            C82871 * C18069) *
               C82679) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C52458 +
            (C37887 * C551 - C37963 * C497 + C82639 * C1055 - C37964 * C1003) *
                C52324 +
            (C43819 - C43820 + C43821 - C43822) * C52459 +
            (C44475 - C44476 + C44477 - C44478) * C82679) *
               C82925 +
           ((C37966 - C37967 + C37968 - C37969) * C52458 +
            (C38430 - C38431 + C38432 - C38433) * C52324 +
            (C41884 - C41885 + C41886 - C41887) * C52459 +
            (C42534 - C42535 + C42536 - C42537) * C82679) *
               C82909 +
           ((C37974 - C37975 + C37976 - C37977) * C52458 +
            (C38434 - C38435 + C38436 - C38437) * C52324 +
            (C46955 - C46956 + C46957 - C46958) * C52459 +
            (C47565 - C47566 + C47567 - C47568) * C82679) *
               C82885) *
              C1149 +
          (((C43820 - C43819 + C43822 - C43821) * C52458 +
            (C44476 - C44475 + C44478 - C44477) * C52324 +
            (C43828 - C43827 + C43830 - C43829) * C52459 +
            (C44480 - C44479 + C44482 - C44481) * C82679) *
               C82925 +
           ((C41885 - C41884 + C41887 - C41886) * C52458 +
            (C42535 - C42534 + C42537 - C42536) * C52324 +
            (C41893 - C41892 + C41895 - C41894) * C52459 +
            (C42539 - C42538 + C42541 - C42540) * C82679) *
               C82909 +
           ((C46956 - C46955 + C46958 - C46957) * C52458 +
            (C47566 - C47565 + C47568 - C47567) * C52324 +
            (C37963 * C4110 - C37887 * C4200 + C37964 * C4974 -
             C82639 * C5062) *
                C52459 +
            (C37963 * C4685 - C37887 * C4767 + C37964 * C5456 -
             C82639 * C5536) *
                C82679) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
               C57171 +
           (C37887 * C551 - C37963 * C497 + C82639 * C1055 - C37964 * C1003) *
               C82942 +
           (C43819 - C43820 + C43821 - C43822) * C57172 +
           (C44475 - C44476 + C44477 - C44478) * C82936 +
           (C43827 - C43828 + C43829 - C43830) * C57173 +
           (C44479 - C44480 + C44481 - C44482) * C82924 +
           (C72301 - C72302 + C72303 - C72304) * C57174 +
           (C72719 - C72720 + C72721 - C72722) * C82878) *
              C82523 * C1149 +
          ((C43820 - C43819 + C43822 - C43821) * C57171 +
           (C44476 - C44475 + C44478 - C44477) * C82942 +
           (C43828 - C43827 + C43830 - C43829) * C57172 +
           (C44480 - C44479 + C44482 - C44481) * C82936 +
           (C72302 - C72301 + C72304 - C72303) * C57173 +
           (C72720 - C72719 + C72722 - C72721) * C82924 +
           (C37963 * C30022 - C37887 * C30072 + C37964 * C30442 -
            C82639 * C30488) *
               C57174 +
           (C37963 * C30303 - C37887 * C30349 + C37964 * C30706 -
            C82639 * C30750) *
               C82878) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52458 * C240 - C52892 * C102 - C52458 * C497 + C52324 * C608 +
            C52459 * C1265 - C52893 * C1155 - C52459 * C1463 + C82679 * C1566) *
               C82941 +
           (C56084 + C56085) * C82934 + (C56086 + C56087) * C82921 +
           (C70277 + C70278) * C82871) *
              C82523 * C1149 -
          ((C52459 * C17631 - C52893 * C17443 - C52459 * C17985 +
            C82679 * C18144 + C52458 * C16399 - C52892 * C16304 -
            C52458 * C16579 + C52324 * C16670) *
               C82871 +
           (C52459 * C16905 - C52893 * C16745 - C52459 * C17213 +
            C82679 * C17367 + C52458 * C3530 - C52892 * C3345 - C52458 * C3862 +
            C52324 * C4029) *
               C82921 +
           (C52459 * C5140 - C52893 * C4976 - C52459 * C5454 + C82679 * C5613 +
            C52458 * C3527 - C52892 * C3348 - C52458 * C3859 + C52324 * C4030) *
               C82934 +
           (C52459 * C4299 - C52893 * C4108 - C52459 * C4683 + C82679 * C4854 +
            C52458 * C1265 - C52892 * C1155 - C52458 * C1463 + C52324 * C1566) *
               C82941) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52458 * C240 - C52892 * C102 - C52458 * C497 + C52324 * C608 +
             C52459 * C1265 - C52893 * C1155 - C52459 * C1463 +
             C82679 * C1566) *
                C37887 +
            (C56084 + C56085) * C82639) *
               C82925 +
           ((C52931 + C52932) * C37887 + (C55150 + C55151) * C82639) * C82909 +
           ((C52933 + C52934) * C37887 + (C59754 + C59755) * C82639) * C82885) *
              C1149 -
          (((C52459 * C5142 - C52893 * C4974 - C52459 * C5456 + C82679 * C5611 +
             C52458 * C3529 - C52892 * C3346 - C52458 * C3861 +
             C52324 * C4026) *
                C82639 +
            (C52459 * C4301 - C52893 * C4110 - C52459 * C4685 + C82679 * C4856 +
             C52458 * C1267 - C52892 * C1153 - C52458 * C1465 +
             C52324 * C1564) *
                C37887) *
               C82885 +
           ((C52459 * C5141 - C52893 * C4975 - C52459 * C5455 + C82679 * C5612 +
             C52458 * C3528 - C52892 * C3347 - C52458 * C3860 +
             C52324 * C4028) *
                C82639 +
            (C52459 * C4300 - C52893 * C4109 - C52459 * C4684 + C82679 * C4855 +
             C52458 * C1266 - C52892 * C1154 - C52458 * C1464 +
             C52324 * C1565) *
                C37887) *
               C82909 +
           ((C52459 * C5140 - C52893 * C4976 - C52459 * C5454 + C82679 * C5613 +
             C52458 * C3527 - C52892 * C3348 - C52458 * C3859 +
             C52324 * C4030) *
                C82639 +
            (C52459 * C4299 - C52893 * C4108 - C52459 * C4683 + C82679 * C4854 +
             C52458 * C1265 - C52892 * C1155 - C52458 * C1463 +
             C52324 * C1566) *
                C37887) *
               C82925) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C57171 * C240 - C57595 * C102 - C57171 * C497 + C82942 * C608 +
            C57172 * C1265 - C57596 * C1155 - C57172 * C1463 + C82936 * C1566 +
            C57173 * C4299 - C57597 * C4108 - C57173 * C4683 + C82924 * C4854 +
            C57174 * C5904 - C57598 * C5690 - C57174 * C6262 + C82878 * C6437) *
               C37887 +
           (C72165 + C72166 + C72167 + C72168) * C82639) *
              C82523 * C1149 -
          ((C57174 * C30532 - C57598 * C30442 - C57174 * C30706 +
            C82878 * C30793 + C57173 * C18459 - C57597 * C18262 -
            C57173 * C18817 + C82924 * C18988 + C57172 * C5140 -
            C57596 * C4976 - C57172 * C5454 + C82936 * C5613 + C57171 * C3527 -
            C57595 * C3348 - C57171 * C3859 + C82942 * C4030) *
               C82639 +
           (C57174 * C30123 - C57598 * C30022 - C57174 * C30303 +
            C82878 * C30398 + C57173 * C5904 - C57597 * C5690 - C57173 * C6262 +
            C82924 * C6437 + C57172 * C4299 - C57596 * C4108 - C57172 * C4683 +
            C82936 * C4854 + C57171 * C1265 - C57595 * C1155 - C57171 * C1463 +
            C82942 * C1566) *
               C37887) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C80224 * C108 - C19062 * C102 - C80224 * C109 + C82844 * C120 +
             C80205 * C110 - C19064 * C103 - C80205 * C111 + C82533 * C121) *
                C82675 +
            (C22970 + C22971) * C82682 + (C33214 + C33215) * C61595) *
               C37887 +
           ((C19773 + C19774) * C82675 + (C22022 + C22023) * C82682 +
            (C32302 + C32303) * C61595) *
               C82639) *
              C82938 * C82939 * C90 -
          (((C80205 * C4977 - C19064 * C4974 - C80205 * C4978 + C82533 * C4983 +
             C80224 * C4979 - C19062 * C4975 - C80224 * C4980 +
             C82844 * C4984) *
                C61595 +
            (C80205 * C3355 - C19064 * C3346 - C80205 * C3356 + C82533 * C3364 +
             C80224 * C3357 - C19062 * C3347 - C80224 * C3358 +
             C82844 * C3365) *
                C82682 +
            (C80205 * C700 - C19064 * C693 - C80205 * C701 + C82533 * C708 +
             C80224 * C702 - C19062 * C694 - C80224 * C703 + C82844 * C709) *
                C82675) *
               C82639 +
           ((C80205 * C4116 - C19064 * C4110 - C80205 * C4117 + C82533 * C4122 +
             C80224 * C4114 - C19062 * C4109 - C80224 * C4115 +
             C82844 * C4121) *
                C61595 +
            (C80205 * C1160 - C19064 * C1153 - C80205 * C1161 + C82533 * C1168 +
             C80224 * C1162 - C19062 * C1154 - C80224 * C1163 +
             C82844 * C1169) *
                C82682 +
            (C80205 * C112 - C19064 * C104 - C80205 * C113 + C82533 * C122 +
             C80224 * C110 - C19062 * C103 - C80224 * C111 + C82844 * C121) *
                C82675) *
               C37887) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexy[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C80224 +
            (C37887 * C175 - C37963 * C109 + C82639 * C758 - C37964 * C705) *
                C82844 +
            (C37966 - C37967 + C37968 - C37969) * C80205 +
            (C37970 - C37971 + C37972 - C37973) * C82533) *
               C82675 +
           ((C43819 - C43820 + C43821 - C43822) * C80224 +
            (C43823 - C43824 + C43825 - C43826) * C82844 +
            (C41884 - C41885 + C41886 - C41887) * C80205 +
            (C41888 - C41889 + C41890 - C41891) * C82533) *
               C82682 +
           ((C43827 - C43828 + C43829 - C43830) * C80224 +
            (C43831 - C43832 + C43833 - C43834) * C82844 +
            (C41892 - C41893 + C41894 - C41895) * C80205 +
            (C41896 - C41897 + C41898 - C41899) * C82533) *
               C61595) *
              C82938 * C82939 * C90 +
          (((C37967 - C37966 + C37969 - C37968) * C80224 +
            (C37971 - C37970 + C37973 - C37972) * C82844 +
            (C37975 - C37974 + C37977 - C37976) * C80205 +
            (C37979 - C37978 + C37981 - C37980) * C82533) *
               C82675 +
           ((C41885 - C41884 + C41887 - C41886) * C80224 +
            (C41889 - C41888 + C41891 - C41890) * C82844 +
            (C46956 - C46955 + C46958 - C46957) * C80205 +
            (C46960 - C46959 + C46962 - C46961) * C82533) *
               C82682 +
           ((C41893 - C41892 + C41895 - C41894) * C80224 +
            (C41897 - C41896 + C41899 - C41898) * C82844 +
            (C37963 * C4110 - C37887 * C4200 + C37964 * C4974 -
             C82639 * C5062) *
                C80205 +
            (C37963 * C4117 - C37887 * C4204 + C37964 * C4978 -
             C82639 * C5065) *
                C82533) *
               C61595) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexz[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82675 * C240 - C80637 * C102 + C82682 * C1265 - C80634 * C1155 +
             C61595 * C4299 - C80645 * C4108) *
                C80224 +
            (C82675 * C246 - C80637 * C109 + C82682 * C1270 - C80634 * C1165 +
             C61595 * C4303 - C80645 * C4113) *
                C82844 +
            (C61748 - C61749 + C61750 - C61751 + C61752 - C61753) * C80205 +
            (C61754 - C61755 + C61756 - C61757 + C61758 - C61759) * C82533) *
               C37887 +
           ((C64865 - C64866 + C64867 - C64868 + C64869 - C64870) * C80224 +
            (C64871 - C64872 + C64873 - C64874 + C64875 - C64876) * C82844 +
            (C63944 - C63945 + C63946 - C63947 + C63948 - C63949) * C80205 +
            (C63950 - C63951 + C63952 - C63953 + C63954 - C63955) * C82533) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C61749 - C61748 + C61751 - C61750 + C61753 - C61752) * C80224 +
            (C61755 - C61754 + C61757 - C61756 + C61759 - C61758) * C82844 +
            (C61761 - C61760 + C61763 - C61762 + C61765 - C61764) * C80205 +
            (C61767 - C61766 + C61769 - C61768 + C61771 - C61770) * C82533) *
               C37887 +
           ((C63945 - C63944 + C63947 - C63946 + C63949 - C63948) * C80224 +
            (C63951 - C63950 + C63953 - C63952 + C63955 - C63954) * C82844 +
            (C80637 * C693 - C82675 * C807 + C80634 * C3346 - C82682 * C3529 +
             C80645 * C4974 - C61595 * C5142) *
                C80205 +
            (C80637 * C701 - C82675 * C812 + C80634 * C3356 - C82682 * C3535 +
             C80645 * C4978 - C61595 * C5145) *
                C82533) *
               C82639) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C37963 +
            (C82844 * C316 - C80224 * C310 + C82533 * C317 - C80205 * C311) *
                C37887 +
            (C19977 - C19978 + C19979 - C19980) * C37964 +
            (C19981 - C19982 + C19983 - C19984) * C82639) *
               C82675 +
           ((C23266 - C23267 + C23268 - C23269) * C37963 +
            (C23270 - C23271 + C23272 - C23273) * C37887 +
            (C22328 - C22329 + C22330 - C22331) * C37964 +
            (C22332 - C22333 + C22334 - C22335) * C82639) *
               C82682 +
           ((C33524 - C33525 + C33526 - C33527) * C37963 +
            (C33528 - C33529 + C33530 - C33531) * C37887 +
            (C32598 - C32599 + C32600 - C32601) * C37964 +
            (C32602 - C32603 + C32604 - C32605) * C82639) *
               C61595) *
              C82938 * C82939 * C90 +
          (((C80224 * C103 - C82844 * C110 + C80205 * C104 - C82533 * C112) *
                C37963 +
            (C80224 * C311 - C82844 * C317 + C80205 * C312 - C82533 * C318) *
                C37887 +
            (C80224 * C694 - C82844 * C702 + C80205 * C693 - C82533 * C700) *
                C37964 +
            (C80224 * C858 - C82844 * C863 + C80205 * C859 - C82533 * C864) *
                C82639) *
               C82675 +
           ((C80224 * C1154 - C82844 * C1162 + C80205 * C1153 -
             C82533 * C1160) *
                C37963 +
            (C80224 * C1318 - C82844 * C1323 + C80205 * C1319 -
             C82533 * C1324) *
                C37887 +
            (C80224 * C3347 - C82844 * C3357 + C80205 * C3346 -
             C82533 * C3355) *
                C37964 +
            (C80224 * C3614 - C82844 * C3620 + C80205 * C3615 -
             C82533 * C3621) *
                C82639) *
               C82682 +
           ((C80224 * C4109 - C82844 * C4114 + C80205 * C4110 -
             C82533 * C4116) *
                C37963 +
            (C80224 * C4406 - C82844 * C4410 + C80205 * C4407 -
             C82533 * C4411) *
                C37887 +
            (C80224 * C4975 - C82844 * C4979 + C80205 * C4974 -
             C82533 * C4977) *
                C37964 +
            (C80224 * C5221 - C82844 * C5224 + C80205 * C5222 -
             C82533 * C5225) *
                C82639) *
               C61595) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C37963 * C169 - C38187 * C102 - C37963 * C310 + C37887 * C365 +
             C37964 * C753 - C38188 * C695 - C37964 * C857 + C82639 * C913) *
                C82844 +
            (C38226 + C38227) * C82533) *
               C82675 +
           ((C44169 + C44170) * C82844 + (C42230 + C42231) * C82533) * C82682 +
           ((C44171 + C44172) * C82844 + (C42232 + C42233) * C82533) * C61595) *
              C82938 * C82939 * C90 -
          (((C37964 * C5062 - C38188 * C4974 - C37964 * C5222 + C82639 * C5300 +
             C37963 * C4200 - C38187 * C4110 - C37963 * C4407 +
             C37887 * C4489) *
                C82533 +
            (C42233 + C42232) * C82844) *
               C61595 +
           ((C47270 + C47269) * C82533 + (C42231 + C42230) * C82844) * C82682 +
           ((C38229 + C38228) * C82533 + (C38227 + C38226) * C82844) * C82675) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82675 * C240 - C80637 * C102 + C82682 * C1265 - C80634 * C1155 +
             C61595 * C4299 - C80645 * C4108) *
                C37963 +
            (C82675 * C441 - C80637 * C310 + C82682 * C1416 - C80634 * C1317 +
             C61595 * C4593 - C80645 * C4405) *
                C37887 +
            (C64865 - C64866 + C64867 - C64868 + C64869 - C64870) * C37964 +
            (C65171 - C65172 + C65173 - C65174 + C65175 - C65176) * C82639) *
               C82844 +
           ((C61748 - C61749 + C61750 - C61751 + C61752 - C61753) * C37963 +
            (C61994 - C61995 + C61996 - C61997 + C61998 - C61999) * C37887 +
            (C63944 - C63945 + C63946 - C63947 + C63948 - C63949) * C37964 +
            (C64250 - C64251 + C64252 - C64253 + C64254 - C64255) * C82639) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C61749 - C61748 + C61751 - C61750 + C61753 - C61752) * C37963 +
            (C61995 - C61994 + C61997 - C61996 + C61999 - C61998) * C37887 +
            (C63945 - C63944 + C63947 - C63946 + C63949 - C63948) * C37964 +
            (C64251 - C64250 + C64253 - C64252 + C64255 - C64254) * C82639) *
               C82844 +
           ((C61761 - C61760 + C61763 - C61762 + C61765 - C61764) * C37963 +
            (C62001 - C62000 + C62003 - C62002 + C62005 - C62004) * C37887 +
            (C80637 * C693 - C82675 * C807 + C80634 * C3346 - C82682 * C3529 +
             C80645 * C4974 - C61595 * C5142) *
                C37964 +
            (C80637 * C859 - C82675 * C958 + C80634 * C3615 - C82682 * C3783 +
             C80645 * C5222 - C61595 * C5379) *
                C82639) *
               C82533) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezx[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C80637 +
            (C82844 * C503 - C80224 * C497 + C82533 * C504 - C80205 * C498) *
                C82675 +
            (C23266 - C23267 + C23268 - C23269) * C80634 +
            (C23568 - C23569 + C23570 - C23571) * C82682 +
            (C33524 - C33525 + C33526 - C33527) * C80645 +
            (C33844 - C33845 + C33846 - C33847) * C61595) *
               C37887 +
           ((C19977 - C19978 + C19979 - C19980) * C80637 +
            (C20199 - C20200 + C20201 - C20202) * C82675 +
            (C22328 - C22329 + C22330 - C22331) * C80634 +
            (C22642 - C22643 + C22644 - C22645) * C82682 +
            (C32598 - C32599 + C32600 - C32601) * C80645 +
            (C32900 - C32901 + C32902 - C32903) * C61595) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C80224 * C103 - C82844 * C110 + C80205 * C104 - C82533 * C112) *
                C80637 +
            (C80224 * C498 - C82844 * C504 + C80205 * C499 - C82533 * C505) *
                C82675 +
            (C80224 * C1154 - C82844 * C1162 + C80205 * C1153 -
             C82533 * C1160) *
                C80634 +
            (C80224 * C1464 - C82844 * C1469 + C80205 * C1465 -
             C82533 * C1470) *
                C82682 +
            (C80224 * C4109 - C82844 * C4114 + C80205 * C4110 -
             C82533 * C4116) *
                C80645 +
            (C80224 * C4684 - C82844 * C4688 + C80205 * C4685 -
             C82533 * C4689) *
                C61595) *
               C37887 +
           ((C80224 * C694 - C82844 * C702 + C80205 * C693 - C82533 * C700) *
                C80637 +
            (C80224 * C1004 - C82844 * C1009 + C80205 * C1005 -
             C82533 * C1010) *
                C82675 +
            (C80224 * C3347 - C82844 * C3357 + C80205 * C3346 -
             C82533 * C3355) *
                C80634 +
            (C80224 * C3860 - C82844 * C3866 + C80205 * C3861 -
             C82533 * C3867) *
                C82682 +
            (C80224 * C4975 - C82844 * C4979 + C80205 * C4974 -
             C82533 * C4977) *
                C80645 +
            (C80224 * C5455 - C82844 * C5458 + C80205 * C5456 -
             C82533 * C5459) *
                C61595) *
               C82639) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezy[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C80637 +
            (C37887 * C551 - C37963 * C497 + C82639 * C1055 - C37964 * C1003) *
                C82675 +
            (C43819 - C43820 + C43821 - C43822) * C80634 +
            (C44475 - C44476 + C44477 - C44478) * C82682 +
            (C43827 - C43828 + C43829 - C43830) * C80645 +
            (C44479 - C44480 + C44481 - C44482) * C61595) *
               C82844 +
           ((C37966 - C37967 + C37968 - C37969) * C80637 +
            (C38430 - C38431 + C38432 - C38433) * C82675 +
            (C41884 - C41885 + C41886 - C41887) * C80634 +
            (C42534 - C42535 + C42536 - C42537) * C82682 +
            (C41892 - C41893 + C41894 - C41895) * C80645 +
            (C42538 - C42539 + C42540 - C42541) * C61595) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C37967 - C37966 + C37969 - C37968) * C80637 +
            (C38431 - C38430 + C38433 - C38432) * C82675 +
            (C41885 - C41884 + C41887 - C41886) * C80634 +
            (C42535 - C42534 + C42537 - C42536) * C82682 +
            (C41893 - C41892 + C41895 - C41894) * C80645 +
            (C42539 - C42538 + C42541 - C42540) * C61595) *
               C82844 +
           ((C37975 - C37974 + C37977 - C37976) * C80637 +
            (C38435 - C38434 + C38437 - C38436) * C82675 +
            (C46956 - C46955 + C46958 - C46957) * C80634 +
            (C47566 - C47565 + C47568 - C47567) * C82682 +
            (C37963 * C4110 - C37887 * C4200 + C37964 * C4974 -
             C82639 * C5062) *
                C80645 +
            (C37963 * C4685 - C37887 * C4767 + C37964 * C5456 -
             C82639 * C5536) *
                C61595) *
               C82533) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezz[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C80637 * C240 - C80689 * C102 - C80637 * C497 + C82675 * C608 +
             C80634 * C1265 - C80682 * C1155 - C80634 * C1463 + C82682 * C1566 +
             C80645 * C4299 - C62229 * C4108 - C80645 * C4683 +
             C61595 * C4854) *
                C37887 +
            (C65489 + C65490 + C65491) * C82639) *
               C82844 +
           ((C62267 + C62268 + C62269) * C37887 +
            (C64568 + C64569 + C64570) * C82639) *
               C82533) *
              C82938 * C82939 * C90 -
          (((C80645 * C5142 - C62229 * C4974 - C80645 * C5456 + C61595 * C5611 +
             C80634 * C3529 - C80682 * C3346 - C80634 * C3861 + C82682 * C4026 +
             C80637 * C807 - C80689 * C693 - C80637 * C1005 + C82675 * C1104) *
                C82639 +
            (C62272 + C62271 + C62270) * C37887) *
               C82533 +
           ((C64570 + C64569 + C64568) * C82639 +
            (C62269 + C62268 + C62267) * C37887) *
               C82844) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexx[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C80224 * C108 - C19062 * C102 - C80224 * C109 + C82844 * C120 +
             C80205 * C110 - C19064 * C103 - C80205 * C111 + C82533 * C121) *
                C82675 +
            (C22970 + C22971) * C82682 + (C33214 + C33215) * C61595) *
               C37887 +
           ((C19773 + C19774) * C82675 + (C22022 + C22023) * C82682 +
            (C32302 + C32303) * C61595) *
               C82639) *
              C82938 * C688 -
          (((C80205 * C16749 - C19064 * C16746 - C80205 * C16750 +
             C82533 * C16752 + C80224 * C16747 - C19062 * C16745 -
             C80224 * C16748 + C82844 * C16751) *
                C61595 +
            (C22025 + C22024) * C82682 + (C19776 + C19775) * C82675) *
               C82639 +
           ((C32303 + C32302) * C61595 + (C22023 + C22022) * C82682 +
            (C19774 + C19773) * C82675) *
               C37887) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eexy[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C80224 +
            (C37887 * C175 - C37963 * C109 + C82639 * C758 - C37964 * C705) *
                C82844 +
            (C37966 - C37967 + C37968 - C37969) * C80205 +
            (C37970 - C37971 + C37972 - C37973) * C82533) *
               C82675 +
           ((C43819 - C43820 + C43821 - C43822) * C80224 +
            (C43823 - C43824 + C43825 - C43826) * C82844 +
            (C41884 - C41885 + C41886 - C41887) * C80205 +
            (C41888 - C41889 + C41890 - C41891) * C82533) *
               C82682 +
           ((C43827 - C43828 + C43829 - C43830) * C80224 +
            (C43831 - C43832 + C43833 - C43834) * C82844 +
            (C41892 - C41893 + C41894 - C41895) * C80205 +
            (C41896 - C41897 + C41898 - C41899) * C82533) *
               C61595) *
              C82938 * C688 +
          (((C37963 * C695 - C37887 * C753 + C37964 * C1653 - C82639 * C1746) *
                C80224 +
            (C37963 * C705 - C37887 * C758 + C37964 * C1658 - C82639 * C1750) *
                C82844 +
            (C37963 * C694 - C37887 * C754 + C37964 * C1654 - C82639 * C1747) *
                C80205 +
            (C37963 * C703 - C37887 * C759 + C37964 * C1660 - C82639 * C1751) *
                C82533) *
               C82675 +
           ((C37963 * C3348 - C37887 * C3441 + C37964 * C3345 -
             C82639 * C3442) *
                C80224 +
            (C37963 * C3360 - C37887 * C3447 + C37964 * C3354 -
             C82639 * C3448) *
                C82844 +
            (C37963 * C3347 - C37887 * C3443 + C37964 * C3344 -
             C82639 * C3444) *
                C80205 +
            (C37963 * C3358 - C37887 * C3449 + C37964 * C3352 -
             C82639 * C3450) *
                C82533) *
               C82682 +
           ((C37963 * C4976 - C37887 * C5060 + C37964 * C16745 -
             C82639 * C16827) *
                C80224 +
            (C37963 * C4982 - C37887 * C5063 + C37964 * C16748 -
             C82639 * C16829) *
                C82844 +
            (C37963 * C4975 - C37887 * C5061 + C37964 * C16746 -
             C82639 * C16828) *
                C80205 +
            (C37963 * C4980 - C37887 * C5064 + C37964 * C16750 -
             C82639 * C16830) *
                C82533) *
               C61595) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eexz[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82675 * C240 - C80637 * C102 + C82682 * C1265 - C80634 * C1155 +
             C61595 * C4299 - C80645 * C4108) *
                C80224 +
            (C82675 * C246 - C80637 * C109 + C82682 * C1270 - C80634 * C1165 +
             C61595 * C4303 - C80645 * C4113) *
                C82844 +
            (C61748 - C61749 + C61750 - C61751 + C61752 - C61753) * C80205 +
            (C61754 - C61755 + C61756 - C61757 + C61758 - C61759) * C82533) *
               C37887 +
           ((C64865 - C64866 + C64867 - C64868 + C64869 - C64870) * C80224 +
            (C64871 - C64872 + C64873 - C64874 + C64875 - C64876) * C82844 +
            (C63944 - C63945 + C63946 - C63947 + C63948 - C63949) * C80205 +
            (C63950 - C63951 + C63952 - C63953 + C63954 - C63955) * C82533) *
               C82639) *
              C82938 * C688 +
          (((C64866 - C64865 + C64868 - C64867 + C64870 - C64869) * C80224 +
            (C64872 - C64871 + C64874 - C64873 + C64876 - C64875) * C82844 +
            (C63945 - C63944 + C63947 - C63946 + C63949 - C63948) * C80205 +
            (C63951 - C63950 + C63953 - C63952 + C63955 - C63954) * C82533) *
               C37887 +
           ((C80637 * C1653 - C82675 * C1852 + C80634 * C3345 - C82682 * C3530 +
             C80645 * C16745 - C61595 * C16905) *
                C80224 +
            (C80637 * C1658 - C82675 * C1856 + C80634 * C3354 - C82682 * C3536 +
             C80645 * C16748 - C61595 * C16907) *
                C82844 +
            (C80637 * C1654 - C82675 * C1853 + C80634 * C3344 - C82682 * C3531 +
             C80645 * C16746 - C61595 * C16906) *
                C80205 +
            (C80637 * C1660 - C82675 * C1857 + C80634 * C3352 - C82682 * C3537 +
             C80645 * C16750 - C61595 * C16908) *
                C82533) *
               C82639) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyx[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C37963 +
            (C82844 * C316 - C80224 * C310 + C82533 * C317 - C80205 * C311) *
                C37887 +
            (C19977 - C19978 + C19979 - C19980) * C37964 +
            (C19981 - C19982 + C19983 - C19984) * C82639) *
               C82675 +
           ((C23266 - C23267 + C23268 - C23269) * C37963 +
            (C23270 - C23271 + C23272 - C23273) * C37887 +
            (C22328 - C22329 + C22330 - C22331) * C37964 +
            (C22332 - C22333 + C22334 - C22335) * C82639) *
               C82682 +
           ((C33524 - C33525 + C33526 - C33527) * C37963 +
            (C33528 - C33529 + C33530 - C33531) * C37887 +
            (C32598 - C32599 + C32600 - C32601) * C37964 +
            (C32602 - C32603 + C32604 - C32605) * C82639) *
               C61595) *
              C82938 * C688 +
          (((C19978 - C19977 + C19980 - C19979) * C37963 +
            (C19982 - C19981 + C19984 - C19983) * C37887 +
            (C19986 - C19985 + C19988 - C19987) * C37964 +
            (C19990 - C19989 + C19992 - C19991) * C82639) *
               C82675 +
           ((C22329 - C22328 + C22331 - C22330) * C37963 +
            (C22333 - C22332 + C22335 - C22334) * C37887 +
            (C22337 - C22336 + C22339 - C22338) * C37964 +
            (C22341 - C22340 + C22343 - C22342) * C82639) *
               C82682 +
           ((C32599 - C32598 + C32601 - C32600) * C37963 +
            (C32603 - C32602 + C32605 - C32604) * C37887 +
            (C80224 * C16745 - C82844 * C16747 + C80205 * C16746 -
             C82533 * C16749) *
                C37964 +
            (C80224 * C16983 - C82844 * C16985 + C80205 * C16984 -
             C82533 * C16986) *
                C82639) *
               C61595) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyy[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C37963 * C169 - C38187 * C102 - C37963 * C310 + C37887 * C365 +
             C37964 * C753 - C38188 * C695 - C37964 * C857 + C82639 * C913) *
                C82844 +
            (C38226 + C38227) * C82533) *
               C82675 +
           ((C44169 + C44170) * C82844 + (C42230 + C42231) * C82533) * C82682 +
           ((C44171 + C44172) * C82844 + (C42232 + C42233) * C82533) * C61595) *
              C82938 * C688 -
          (((C37964 * C16828 - C38188 * C16746 - C37964 * C16984 +
             C82639 * C17062 + C37963 * C5061 - C38187 * C4975 -
             C37963 * C5221 + C37887 * C5301) *
                C82533 +
            (C37964 * C16827 - C38188 * C16745 - C37964 * C16983 +
             C82639 * C17061 + C37963 * C5060 - C38187 * C4976 -
             C37963 * C5220 + C37887 * C5302) *
                C82844) *
               C61595 +
           ((C37964 * C3444 - C38188 * C3344 - C37964 * C3617 + C82639 * C3701 +
             C37963 * C3443 - C38187 * C3347 - C37963 * C3614 +
             C37887 * C3702) *
                C82533 +
            (C37964 * C3442 - C38188 * C3345 - C37964 * C3616 + C82639 * C3703 +
             C37963 * C3441 - C38187 * C3348 - C37963 * C3613 +
             C37887 * C3704) *
                C82844) *
               C82682 +
           ((C37964 * C1747 - C38188 * C1654 - C37964 * C1951 + C82639 * C2036 +
             C37963 * C754 - C38187 * C694 - C37963 * C858 + C37887 * C912) *
                C82533 +
            (C37964 * C1746 - C38188 * C1653 - C37964 * C1950 + C82639 * C2035 +
             C37963 * C753 - C38187 * C695 - C37963 * C857 + C37887 * C913) *
                C82844) *
               C82675) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyz[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82675 * C240 - C80637 * C102 + C82682 * C1265 - C80634 * C1155 +
             C61595 * C4299 - C80645 * C4108) *
                C37963 +
            (C82675 * C441 - C80637 * C310 + C82682 * C1416 - C80634 * C1317 +
             C61595 * C4593 - C80645 * C4405) *
                C37887 +
            (C64865 - C64866 + C64867 - C64868 + C64869 - C64870) * C37964 +
            (C65171 - C65172 + C65173 - C65174 + C65175 - C65176) * C82639) *
               C82844 +
           ((C61748 - C61749 + C61750 - C61751 + C61752 - C61753) * C37963 +
            (C61994 - C61995 + C61996 - C61997 + C61998 - C61999) * C37887 +
            (C63944 - C63945 + C63946 - C63947 + C63948 - C63949) * C37964 +
            (C64250 - C64251 + C64252 - C64253 + C64254 - C64255) * C82639) *
               C82533) *
              C82938 * C688 +
          (((C64866 - C64865 + C64868 - C64867 + C64870 - C64869) * C37963 +
            (C65172 - C65171 + C65174 - C65173 + C65176 - C65175) * C37887 +
            (C80637 * C1653 - C82675 * C1852 + C80634 * C3345 - C82682 * C3530 +
             C80645 * C16745 - C61595 * C16905) *
                C37964 +
            (C80637 * C1950 - C82675 * C2155 + C80634 * C3616 - C82682 * C3780 +
             C80645 * C16983 - C61595 * C17137) *
                C82639) *
               C82844 +
           ((C63945 - C63944 + C63947 - C63946 + C63949 - C63948) * C37963 +
            (C64251 - C64250 + C64253 - C64252 + C64255 - C64254) * C37887 +
            (C80637 * C1654 - C82675 * C1853 + C80634 * C3344 - C82682 * C3531 +
             C80645 * C16746 - C61595 * C16906) *
                C37964 +
            (C80637 * C1951 - C82675 * C2156 + C80634 * C3617 - C82682 * C3782 +
             C80645 * C16984 - C61595 * C17138) *
                C82639) *
               C82533) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eezx[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C80637 +
            (C82844 * C503 - C80224 * C497 + C82533 * C504 - C80205 * C498) *
                C82675 +
            (C23266 - C23267 + C23268 - C23269) * C80634 +
            (C23568 - C23569 + C23570 - C23571) * C82682 +
            (C33524 - C33525 + C33526 - C33527) * C80645 +
            (C33844 - C33845 + C33846 - C33847) * C61595) *
               C37887 +
           ((C19977 - C19978 + C19979 - C19980) * C80637 +
            (C20199 - C20200 + C20201 - C20202) * C82675 +
            (C22328 - C22329 + C22330 - C22331) * C80634 +
            (C22642 - C22643 + C22644 - C22645) * C82682 +
            (C32598 - C32599 + C32600 - C32601) * C80645 +
            (C32900 - C32901 + C32902 - C32903) * C61595) *
               C82639) *
              C82938 * C688 +
          (((C19978 - C19977 + C19980 - C19979) * C80637 +
            (C20200 - C20199 + C20202 - C20201) * C82675 +
            (C22329 - C22328 + C22331 - C22330) * C80634 +
            (C22643 - C22642 + C22645 - C22644) * C82682 +
            (C32599 - C32598 + C32601 - C32600) * C80645 +
            (C32901 - C32900 + C32903 - C32902) * C61595) *
               C37887 +
           ((C19986 - C19985 + C19988 - C19987) * C80637 +
            (C20204 - C20203 + C20206 - C20205) * C82675 +
            (C22337 - C22336 + C22339 - C22338) * C80634 +
            (C22647 - C22646 + C22649 - C22648) * C82682 +
            (C80224 * C16745 - C82844 * C16747 + C80205 * C16746 -
             C82533 * C16749) *
                C80645 +
            (C80224 * C17213 - C82844 * C17215 + C80205 * C17214 -
             C82533 * C17216) *
                C61595) *
               C82639) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eezy[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C80637 +
            (C37887 * C551 - C37963 * C497 + C82639 * C1055 - C37964 * C1003) *
                C82675 +
            (C43819 - C43820 + C43821 - C43822) * C80634 +
            (C44475 - C44476 + C44477 - C44478) * C82682 +
            (C43827 - C43828 + C43829 - C43830) * C80645 +
            (C44479 - C44480 + C44481 - C44482) * C61595) *
               C82844 +
           ((C37966 - C37967 + C37968 - C37969) * C80637 +
            (C38430 - C38431 + C38432 - C38433) * C82675 +
            (C41884 - C41885 + C41886 - C41887) * C80634 +
            (C42534 - C42535 + C42536 - C42537) * C82682 +
            (C41892 - C41893 + C41894 - C41895) * C80645 +
            (C42538 - C42539 + C42540 - C42541) * C61595) *
               C82533) *
              C82938 * C688 +
          (((C37963 * C695 - C37887 * C753 + C37964 * C1653 - C82639 * C1746) *
                C80637 +
            (C37963 * C1003 - C37887 * C1055 + C37964 * C2241 -
             C82639 * C2323) *
                C82675 +
            (C37963 * C3348 - C37887 * C3441 + C37964 * C3345 -
             C82639 * C3442) *
                C80634 +
            (C37963 * C3859 - C37887 * C3945 + C37964 * C3862 -
             C82639 * C3946) *
                C82682 +
            (C37963 * C4976 - C37887 * C5060 + C37964 * C16745 -
             C82639 * C16827) *
                C80645 +
            (C37963 * C5454 - C37887 * C5534 + C37964 * C17213 -
             C82639 * C17291) *
                C61595) *
               C82844 +
           ((C37963 * C694 - C37887 * C754 + C37964 * C1654 - C82639 * C1747) *
                C80637 +
            (C37963 * C1004 - C37887 * C1056 + C37964 * C2242 -
             C82639 * C2324) *
                C82675 +
            (C37963 * C3347 - C37887 * C3443 + C37964 * C3344 -
             C82639 * C3444) *
                C80634 +
            (C37963 * C3860 - C37887 * C3947 + C37964 * C3863 -
             C82639 * C3948) *
                C82682 +
            (C37963 * C4975 - C37887 * C5061 + C37964 * C16746 -
             C82639 * C16828) *
                C80645 +
            (C37963 * C5455 - C37887 * C5535 + C37964 * C17214 -
             C82639 * C17292) *
                C61595) *
               C82533) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eezz[25] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C80637 * C240 - C80689 * C102 - C80637 * C497 +
                       C82675 * C608 + C80634 * C1265 - C80682 * C1155 -
                       C80634 * C1463 + C82682 * C1566 + C80645 * C4299 -
                       C62229 * C4108 - C80645 * C4683 + C61595 * C4854) *
                          C37887 +
                      (C65489 + C65490 + C65491) * C82639) *
                         C82844 +
                     ((C62267 + C62268 + C62269) * C37887 +
                      (C64568 + C64569 + C64570) * C82639) *
                         C82533) *
                        C82938 * C688 -
                    (((C80645 * C16906 - C62229 * C16746 - C80645 * C17214 +
                       C61595 * C17368 + C80634 * C3531 - C80682 * C3344 -
                       C80634 * C3863 + C82682 * C4027 + C80637 * C1853 -
                       C80689 * C1654 - C80637 * C2242 + C82675 * C2414) *
                          C82639 +
                      (C64570 + C64569 + C64568) * C37887) *
                         C82533 +
                     ((C80645 * C16905 - C62229 * C16745 - C80645 * C17213 +
                       C61595 * C17367 + C80634 * C3530 - C80682 * C3345 -
                       C80634 * C3862 + C82682 * C4029 + C80637 * C1852 -
                       C80689 * C1653 - C80637 * C2241 + C82675 * C2413) *
                          C82639 +
                      (C65491 + C65490 + C65489) * C37887) *
                         C82844) *
                        C82938 * C689) *
                   C82940) /
                  (p * q * std::sqrt(p + q));
    d2eexx[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C80224 * C108 - C19062 * C102 - C80224 * C109 + C82844 * C120 +
             C80205 * C110 - C19064 * C103 - C80205 * C111 + C82533 * C121) *
                C82675 +
            (C22970 + C22971) * C82682 + (C33214 + C33215) * C61595) *
               C37887 +
           ((C19773 + C19774) * C82675 + (C22022 + C22023) * C82682 +
            (C32302 + C32303) * C61595) *
               C82639) *
              C1149 -
          (((C80205 * C33198 - C19064 * C33197 - C80205 * C33199 +
             C82533 * C33200 + C80224 * C18265 - C19062 * C18262 -
             C80224 * C18266 + C82844 * C18268) *
                C61595 +
            (C32303 + C32302) * C82682 + (C22023 + C22022) * C82675) *
               C82639 +
           ((C35394 + C35393) * C61595 + (C33215 + C33214) * C82682 +
            (C22971 + C22970) * C82675) *
               C37887) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eexy[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C80224 +
            (C37887 * C175 - C37963 * C109 + C82639 * C758 - C37964 * C705) *
                C82844 +
            (C37966 - C37967 + C37968 - C37969) * C80205 +
            (C37970 - C37971 + C37972 - C37973) * C82533) *
               C82675 +
           ((C43819 - C43820 + C43821 - C43822) * C80224 +
            (C43823 - C43824 + C43825 - C43826) * C82844 +
            (C41884 - C41885 + C41886 - C41887) * C80205 +
            (C41888 - C41889 + C41890 - C41891) * C82533) *
               C82682 +
           ((C43827 - C43828 + C43829 - C43830) * C80224 +
            (C43831 - C43832 + C43833 - C43834) * C82844 +
            (C41892 - C41893 + C41894 - C41895) * C80205 +
            (C41896 - C41897 + C41898 - C41899) * C82533) *
               C61595) *
              C1149 +
          (((C43820 - C43819 + C43822 - C43821) * C80224 +
            (C43824 - C43823 + C43826 - C43825) * C82844 +
            (C41885 - C41884 + C41887 - C41886) * C80205 +
            (C41889 - C41888 + C41891 - C41890) * C82533) *
               C82675 +
           ((C43828 - C43827 + C43830 - C43829) * C80224 +
            (C43832 - C43831 + C43834 - C43833) * C82844 +
            (C41893 - C41892 + C41895 - C41894) * C80205 +
            (C41897 - C41896 + C41899 - C41898) * C82533) *
               C82682 +
           ((C72302 - C72301 + C72304 - C72303) * C80224 +
            (C72306 - C72305 + C72308 - C72307) * C82844 +
            (C37963 * C5689 - C37887 * C5817 + C37964 * C33197 -
             C82639 * C33313) *
                C80205 +
            (C37963 * C5694 - C37887 * C5820 + C37964 * C33199 -
             C82639 * C33314) *
                C82533) *
               C61595) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eexz[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82675 * C240 - C80637 * C102 + C82682 * C1265 - C80634 * C1155 +
             C61595 * C4299 - C80645 * C4108) *
                C80224 +
            (C82675 * C246 - C80637 * C109 + C82682 * C1270 - C80634 * C1165 +
             C61595 * C4303 - C80645 * C4113) *
                C82844 +
            (C61748 - C61749 + C61750 - C61751 + C61752 - C61753) * C80205 +
            (C61754 - C61755 + C61756 - C61757 + C61758 - C61759) * C82533) *
               C37887 +
           ((C64865 - C64866 + C64867 - C64868 + C64869 - C64870) * C80224 +
            (C64871 - C64872 + C64873 - C64874 + C64875 - C64876) * C82844 +
            (C63944 - C63945 + C63946 - C63947 + C63948 - C63949) * C80205 +
            (C63950 - C63951 + C63952 - C63953 + C63954 - C63955) * C82533) *
               C82639) *
              C1149 +
          (((C80637 * C1155 - C82675 * C1265 + C80634 * C4108 - C82682 * C4299 +
             C80645 * C5690 - C61595 * C5904) *
                C80224 +
            (C80637 * C1165 - C82675 * C1270 + C80634 * C4113 - C82682 * C4303 +
             C80645 * C5696 - C61595 * C5907) *
                C82844 +
            (C80637 * C1154 - C82675 * C1266 + C80634 * C4109 - C82682 * C4300 +
             C80645 * C5689 - C61595 * C5905) *
                C80205 +
            (C80637 * C1163 - C82675 * C1271 + C80634 * C4115 - C82682 * C4304 +
             C80645 * C5694 - C61595 * C5908) *
                C82533) *
               C37887 +
           ((C80637 * C3348 - C82675 * C3527 + C80634 * C4976 - C82682 * C5140 +
             C80645 * C18262 - C61595 * C18459) *
                C80224 +
            (C80637 * C3360 - C82675 * C3533 + C80634 * C4982 - C82682 * C5143 +
             C80645 * C18266 - C61595 * C18461) *
                C82844 +
            (C80637 * C3347 - C82675 * C3528 + C80634 * C4975 - C82682 * C5141 +
             C80645 * C33197 - C61595 * C33421) *
                C80205 +
            (C80637 * C3358 - C82675 * C3534 + C80634 * C4980 - C82682 * C5144 +
             C80645 * C33199 - C61595 * C33422) *
                C82533) *
               C82639) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyx[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C37963 +
            (C82844 * C316 - C80224 * C310 + C82533 * C317 - C80205 * C311) *
                C37887 +
            (C19977 - C19978 + C19979 - C19980) * C37964 +
            (C19981 - C19982 + C19983 - C19984) * C82639) *
               C82675 +
           ((C23266 - C23267 + C23268 - C23269) * C37963 +
            (C23270 - C23271 + C23272 - C23273) * C37887 +
            (C22328 - C22329 + C22330 - C22331) * C37964 +
            (C22332 - C22333 + C22334 - C22335) * C82639) *
               C82682 +
           ((C33524 - C33525 + C33526 - C33527) * C37963 +
            (C33528 - C33529 + C33530 - C33531) * C37887 +
            (C32598 - C32599 + C32600 - C32601) * C37964 +
            (C32602 - C32603 + C32604 - C32605) * C82639) *
               C61595) *
              C1149 +
          (((C23267 - C23266 + C23269 - C23268) * C37963 +
            (C23271 - C23270 + C23273 - C23272) * C37887 +
            (C22329 - C22328 + C22331 - C22330) * C37964 +
            (C22333 - C22332 + C22335 - C22334) * C82639) *
               C82675 +
           ((C33525 - C33524 + C33527 - C33526) * C37963 +
            (C33529 - C33528 + C33531 - C33530) * C37887 +
            (C32599 - C32598 + C32601 - C32600) * C37964 +
            (C32603 - C32602 + C32605 - C32604) * C82639) *
               C82682 +
           ((C35594 - C35593 + C35596 - C35595) * C37963 +
            (C35598 - C35597 + C35600 - C35599) * C37887 +
            (C80224 * C18262 - C82844 * C18265 + C80205 * C33197 -
             C82533 * C33198) *
                C37964 +
            (C80224 * C18537 - C82844 * C18539 + C80205 * C33521 -
             C82533 * C33522) *
                C82639) *
               C61595) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyy[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C37963 * C169 - C38187 * C102 - C37963 * C310 + C37887 * C365 +
             C37964 * C753 - C38188 * C695 - C37964 * C857 + C82639 * C913) *
                C82844 +
            (C38226 + C38227) * C82533) *
               C82675 +
           ((C44169 + C44170) * C82844 + (C42230 + C42231) * C82533) * C82682 +
           ((C44171 + C44172) * C82844 + (C42232 + C42233) * C82533) * C61595) *
              C1149 -
          (((C37964 * C33313 - C38188 * C33197 - C37964 * C33521 +
             C82639 * C33629 + C37963 * C5817 - C38187 * C5689 -
             C37963 * C5985 + C37887 * C6089) *
                C82533 +
            (C72520 + C72519) * C82844) *
               C61595 +
           ((C42233 + C42232) * C82533 + (C44172 + C44171) * C82844) * C82682 +
           ((C42231 + C42230) * C82533 + (C44170 + C44169) * C82844) * C82675) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyz[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82675 * C240 - C80637 * C102 + C82682 * C1265 - C80634 * C1155 +
             C61595 * C4299 - C80645 * C4108) *
                C37963 +
            (C82675 * C441 - C80637 * C310 + C82682 * C1416 - C80634 * C1317 +
             C61595 * C4593 - C80645 * C4405) *
                C37887 +
            (C64865 - C64866 + C64867 - C64868 + C64869 - C64870) * C37964 +
            (C65171 - C65172 + C65173 - C65174 + C65175 - C65176) * C82639) *
               C82844 +
           ((C61748 - C61749 + C61750 - C61751 + C61752 - C61753) * C37963 +
            (C61994 - C61995 + C61996 - C61997 + C61998 - C61999) * C37887 +
            (C63944 - C63945 + C63946 - C63947 + C63948 - C63949) * C37964 +
            (C64250 - C64251 + C64252 - C64253 + C64254 - C64255) * C82639) *
               C82533) *
              C1149 +
          (((C80637 * C1155 - C82675 * C1265 + C80634 * C4108 - C82682 * C4299 +
             C80645 * C5690 - C61595 * C5904) *
                C37963 +
            (C80637 * C1317 - C82675 * C1416 + C80634 * C4405 - C82682 * C4593 +
             C80645 * C5984 - C61595 * C6185) *
                C37887 +
            (C80637 * C3348 - C82675 * C3527 + C80634 * C4976 - C82682 * C5140 +
             C80645 * C18262 - C61595 * C18459) *
                C37964 +
            (C80637 * C3613 - C82675 * C3779 + C80634 * C5220 - C82682 * C5377 +
             C80645 * C18537 - C61595 * C18741) *
                C82639) *
               C82844 +
           ((C80637 * C1154 - C82675 * C1266 + C80634 * C4109 - C82682 * C4300 +
             C80645 * C5689 - C61595 * C5905) *
                C37963 +
            (C80637 * C1318 - C82675 * C1417 + C80634 * C4406 - C82682 * C4594 +
             C80645 * C5985 - C61595 * C6186) *
                C37887 +
            (C80637 * C3347 - C82675 * C3528 + C80634 * C4975 - C82682 * C5141 +
             C80645 * C33197 - C61595 * C33421) *
                C37964 +
            (C80637 * C3614 - C82675 * C3781 + C80634 * C5221 - C82682 * C5378 +
             C80645 * C33521 - C61595 * C33742) *
                C82639) *
               C82533) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eezx[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C80637 +
            (C82844 * C503 - C80224 * C497 + C82533 * C504 - C80205 * C498) *
                C82675 +
            (C23266 - C23267 + C23268 - C23269) * C80634 +
            (C23568 - C23569 + C23570 - C23571) * C82682 +
            (C33524 - C33525 + C33526 - C33527) * C80645 +
            (C33844 - C33845 + C33846 - C33847) * C61595) *
               C37887 +
           ((C19977 - C19978 + C19979 - C19980) * C80637 +
            (C20199 - C20200 + C20201 - C20202) * C82675 +
            (C22328 - C22329 + C22330 - C22331) * C80634 +
            (C22642 - C22643 + C22644 - C22645) * C82682 +
            (C32598 - C32599 + C32600 - C32601) * C80645 +
            (C32900 - C32901 + C32902 - C32903) * C61595) *
               C82639) *
              C1149 +
          (((C23267 - C23266 + C23269 - C23268) * C80637 +
            (C23569 - C23568 + C23571 - C23570) * C82675 +
            (C33525 - C33524 + C33527 - C33526) * C80634 +
            (C33845 - C33844 + C33847 - C33846) * C82682 +
            (C35594 - C35593 + C35596 - C35595) * C80645 +
            (C35806 - C35805 + C35808 - C35807) * C61595) *
               C37887 +
           ((C22329 - C22328 + C22331 - C22330) * C80637 +
            (C22643 - C22642 + C22645 - C22644) * C82675 +
            (C32599 - C32598 + C32601 - C32600) * C80634 +
            (C32901 - C32900 + C32903 - C32902) * C82682 +
            (C80224 * C18262 - C82844 * C18265 + C80205 * C33197 -
             C82533 * C33198) *
                C80645 +
            (C80224 * C18817 - C82844 * C18819 + C80205 * C33841 -
             C82533 * C33842) *
                C61595) *
               C82639) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eezy[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C80637 +
            (C37887 * C551 - C37963 * C497 + C82639 * C1055 - C37964 * C1003) *
                C82675 +
            (C43819 - C43820 + C43821 - C43822) * C80634 +
            (C44475 - C44476 + C44477 - C44478) * C82682 +
            (C43827 - C43828 + C43829 - C43830) * C80645 +
            (C44479 - C44480 + C44481 - C44482) * C61595) *
               C82844 +
           ((C37966 - C37967 + C37968 - C37969) * C80637 +
            (C38430 - C38431 + C38432 - C38433) * C82675 +
            (C41884 - C41885 + C41886 - C41887) * C80634 +
            (C42534 - C42535 + C42536 - C42537) * C82682 +
            (C41892 - C41893 + C41894 - C41895) * C80645 +
            (C42538 - C42539 + C42540 - C42541) * C61595) *
               C82533) *
              C1149 +
          (((C43820 - C43819 + C43822 - C43821) * C80637 +
            (C44476 - C44475 + C44478 - C44477) * C82675 +
            (C43828 - C43827 + C43830 - C43829) * C80634 +
            (C44480 - C44479 + C44482 - C44481) * C82682 +
            (C72302 - C72301 + C72304 - C72303) * C80645 +
            (C72720 - C72719 + C72722 - C72721) * C61595) *
               C82844 +
           ((C41885 - C41884 + C41887 - C41886) * C80637 +
            (C42535 - C42534 + C42537 - C42536) * C82675 +
            (C41893 - C41892 + C41895 - C41894) * C80634 +
            (C42539 - C42538 + C42541 - C42540) * C82682 +
            (C37963 * C5689 - C37887 * C5817 + C37964 * C33197 -
             C82639 * C33313) *
                C80645 +
            (C37963 * C6263 - C37887 * C6355 + C37964 * C33841 -
             C82639 * C33945) *
                C61595) *
               C82533) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eezz[26] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C80637 * C240 - C80689 * C102 - C80637 * C497 +
                       C82675 * C608 + C80634 * C1265 - C80682 * C1155 -
                       C80634 * C1463 + C82682 * C1566 + C80645 * C4299 -
                       C62229 * C4108 - C80645 * C4683 + C61595 * C4854) *
                          C37887 +
                      (C65489 + C65490 + C65491) * C82639) *
                         C82844 +
                     ((C62267 + C62268 + C62269) * C37887 +
                      (C64568 + C64569 + C64570) * C82639) *
                         C82533) *
                        C1149 -
                    (((C80645 * C33421 - C62229 * C33197 - C80645 * C33841 +
                       C61595 * C34048 + C80634 * C5141 - C80682 * C4975 -
                       C80634 * C5455 + C82682 * C5612 + C80637 * C3528 -
                       C80689 * C3347 - C80637 * C3860 + C82675 * C4028) *
                          C82639 +
                      (C80645 * C5905 - C62229 * C5689 - C80645 * C6263 +
                       C61595 * C6436 + C80634 * C4300 - C80682 * C4109 -
                       C80634 * C4684 + C82682 * C4855 + C80637 * C1266 -
                       C80689 * C1154 - C80637 * C1464 + C82675 * C1565) *
                          C37887) *
                         C82533 +
                     ((C80645 * C18459 - C62229 * C18262 - C80645 * C18817 +
                       C61595 * C18988 + C80634 * C5140 - C80682 * C4976 -
                       C80634 * C5454 + C82682 * C5613 + C80637 * C3527 -
                       C80689 * C3348 - C80637 * C3859 + C82675 * C4030) *
                          C82639 +
                      (C80645 * C5904 - C62229 * C5690 - C80645 * C6262 +
                       C61595 * C6437 + C80634 * C4299 - C80682 * C4108 -
                       C80634 * C4683 + C82682 * C4854 + C80637 * C1265 -
                       C80689 * C1155 - C80637 * C1463 + C82675 * C1566) *
                          C37887) *
                         C82844) *
                        C1150) *
                   C82939 * C82940) /
                  (p * q * std::sqrt(p + q));
    d2eexx[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13259 * C108 - C13260 * C102 - C13259 * C109 + C82925 * C120 +
             C13261 * C110 - C13262 * C103 - C13261 * C111 + C82909 * C121 +
             C13263 * C112 - C13264 * C104 - C13263 * C113 + C82885 * C122) *
                C52324 +
            (C27176 + C27177 + C27178) * C82679) *
               C37887 +
           ((C14058 + C14059 + C14060) * C52324 +
            (C13259 * C3359 - C13260 * C3348 - C13259 * C3360 + C82925 * C3366 +
             C13261 * C3357 - C13262 * C3347 - C13261 * C3358 + C82909 * C3365 +
             C13263 * C3355 - C13264 * C3346 - C13263 * C3356 +
             C82885 * C3364) *
                C82679) *
               C82639) *
              C82938 * C82939 * C90 -
          (((C13263 * C7860 - C13264 * C7859 - C13263 * C7861 + C82885 * C7862 +
             C13261 * C3355 - C13262 * C3346 - C13261 * C3356 + C82909 * C3364 +
             C13259 * C3357 - C13260 * C3347 - C13259 * C3358 +
             C82925 * C3365) *
                C82679 +
            (C13263 * C698 - C13264 * C692 - C13263 * C699 + C82885 * C707 +
             C13261 * C700 - C13262 * C693 - C13261 * C701 + C82909 * C708 +
             C13259 * C702 - C13260 * C694 - C13259 * C703 + C82925 * C709) *
                C52324) *
               C82639 +
           ((C13263 * C1158 - C13264 * C1152 - C13263 * C1159 + C82885 * C1167 +
             C13261 * C1160 - C13262 * C1153 - C13261 * C1161 + C82909 * C1168 +
             C13259 * C1162 - C13260 * C1154 - C13259 * C1163 +
             C82925 * C1169) *
                C82679 +
            (C13263 * C114 - C13264 * C105 - C13263 * C115 + C82885 * C123 +
             C13261 * C112 - C13262 * C104 - C13261 * C113 + C82909 * C122 +
             C13259 * C110 - C13260 * C103 - C13259 * C111 + C82925 * C121) *
                C52324) *
               C37887) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C52324 +
            C18282 * C82679) *
               C82941 +
           (C15856 * C52324 + C17474 * C82679) * C82934 +
           (C15857 * C52324 + C17476 * C82679) * C82921 +
           (C15858 * C52324 + C24439 * C82679) * C82871) *
              C82938 * C82939 * C90 -
          (((C15405 * C20409 - C15406 * C20408 - C15405 * C20410 +
             C82523 * C20411) *
                C82679 +
            (C15405 * C2530 - C15406 * C2526 - C15405 * C2531 +
             C82523 * C2535) *
                C52324) *
               C82871 +
           ((C15405 * C3351 - C15406 * C3344 - C15405 * C3352 +
             C82523 * C3362) *
                C82679 +
            (C15405 * C1659 - C15406 * C1654 - C15405 * C1660 +
             C82523 * C1666) *
                C52324) *
               C82921 +
           ((C15405 * C3357 - C15406 * C3347 - C15405 * C3358 +
             C82523 * C3365) *
                C82679 +
            (C15405 * C702 - C15406 * C694 - C15405 * C703 + C82523 * C709) *
                C52324) *
               C82934 +
           ((C15405 * C1162 - C15406 * C1154 - C15405 * C1163 +
             C82523 * C1169) *
                C82679 +
            (C15405 * C110 - C15406 * C103 - C15405 * C111 + C82523 * C121) *
                C52324) *
               C82941) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C13259 +
            (C37887 * C175 - C37963 * C109 + C82639 * C758 - C37964 * C705) *
                C82925 +
            (C37966 - C37967 + C37968 - C37969) * C13261 +
            (C37970 - C37971 + C37972 - C37973) * C82909 +
            (C37974 - C37975 + C37976 - C37977) * C13263 +
            (C37978 - C37979 + C37980 - C37981) * C82885) *
               C52324 +
           ((C43819 - C43820 + C43821 - C43822) * C13259 +
            (C43823 - C43824 + C43825 - C43826) * C82925 +
            (C41884 - C41885 + C41886 - C41887) * C13261 +
            (C41888 - C41889 + C41890 - C41891) * C82909 +
            (C46955 - C46956 + C46957 - C46958) * C13263 +
            (C46959 - C46960 + C46961 - C46962) * C82885) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C37967 - C37966 + C37969 - C37968) * C13259 +
            (C37971 - C37970 + C37973 - C37972) * C82925 +
            (C37975 - C37974 + C37977 - C37976) * C13261 +
            (C37979 - C37978 + C37981 - C37980) * C82909 +
            (C37983 - C37982 + C37985 - C37984) * C13263 +
            (C37987 - C37986 + C37989 - C37988) * C82885) *
               C52324 +
           ((C41885 - C41884 + C41887 - C41886) * C13259 +
            (C41889 - C41888 + C41891 - C41890) * C82925 +
            (C46956 - C46955 + C46958 - C46957) * C13261 +
            (C46960 - C46959 + C46962 - C46961) * C82909 +
            (C37963 * C1152 - C37887 * C1216 + C37964 * C7859 -
             C82639 * C7929) *
                C13263 +
            (C37963 * C1159 - C37887 * C1221 + C37964 * C7861 -
             C82639 * C7930) *
                C82885) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82941 * C169 - C39895 * C102 + C82934 * C753 - C39896 * C695 +
             C82921 * C1746 - C39897 * C1653 + C82871 * C2653 -
             C39898 * C2527) *
                C15405 +
            (C82941 * C175 - C39895 * C109 + C82934 * C758 - C39896 * C705 +
             C82921 * C1750 - C39897 * C1658 + C82871 * C2656 -
             C39898 * C2533) *
                C82523) *
               C52324 +
           ((C82941 * C1213 - C39895 * C1155 + C82934 * C3441 - C39896 * C3348 +
             C82921 * C3442 - C39897 * C3345 + C82871 * C16353 -
             C39898 * C16304) *
                C15405 +
            (C82941 * C1218 - C39895 * C1165 + C82934 * C3447 - C39896 * C3360 +
             C82921 * C3448 - C39897 * C3354 + C82871 * C16355 -
             C39898 * C16308) *
                C82523) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C39901 - C39900 + C39903 - C39902 + C39905 - C39904 + C39907 -
             C39906) *
                C15405 +
            (C39909 - C39908 + C39911 - C39910 + C39913 - C39912 + C39915 -
             C39914) *
                C82523) *
               C52324 +
           ((C39895 * C1154 - C82941 * C1214 + C39896 * C3347 - C82934 * C3443 +
             C39897 * C3344 - C82921 * C3444 + C39898 * C20408 -
             C82871 * C20478) *
                C15405 +
            (C39895 * C1163 - C82941 * C1219 + C39896 * C3358 - C82934 * C3449 +
             C39897 * C3352 - C82921 * C3450 + C39898 * C20410 -
             C82871 * C20479) *
                C82523) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C13259 +
            (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
                C82925 +
            (C52461 - C52462 + C52463 - C52464) * C13261 +
            (C52465 - C52466 + C52467 - C52468) * C82909 +
            (C52469 - C52470 + C52471 - C52472) * C13263 +
            (C52473 - C52474 + C52475 - C52476) * C82885) *
               C37887 +
           ((C55448 - C55449 + C55450 - C55451) * C13259 +
            (C55452 - C55453 + C55454 - C55455) * C82925 +
            (C54487 - C54488 + C54489 - C54490) * C13261 +
            (C54491 - C54492 + C54493 - C54494) * C82909 +
            (C59142 - C59143 + C59144 - C59145) * C13263 +
            (C59146 - C59147 + C59148 - C59149) * C82885) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C52462 - C52461 + C52464 - C52463) * C13259 +
            (C52466 - C52465 + C52468 - C52467) * C82925 +
            (C52470 - C52469 + C52472 - C52471) * C13261 +
            (C52474 - C52473 + C52476 - C52475) * C82909 +
            (C52478 - C52477 + C52480 - C52479) * C13263 +
            (C52482 - C52481 + C52484 - C52483) * C82885) *
               C37887 +
           ((C54488 - C54487 + C54490 - C54489) * C13259 +
            (C54492 - C54491 + C54494 - C54493) * C82925 +
            (C59143 - C59142 + C59145 - C59144) * C13261 +
            (C59147 - C59146 + C59149 - C59148) * C82909 +
            (C52458 * C692 - C52324 * C808 + C52459 * C7859 - C82679 * C7997) *
                C13263 +
            (C52458 * C699 - C52324 * C813 + C52459 * C7861 - C82679 * C7998) *
                C82885) *
               C82639) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C15405 +
            (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
                C82523) *
               C82941 +
           ((C55448 - C55449 + C55450 - C55451) * C15405 +
            (C55452 - C55453 + C55454 - C55455) * C82523) *
               C82934 +
           ((C55456 - C55457 + C55458 - C55459) * C15405 +
            (C55460 - C55461 + C55462 - C55463) * C82523) *
               C82921 +
           ((C52324 * C2733 - C52458 * C2527 + C82679 * C16399 -
             C52459 * C16304) *
                C15405 +
            (C52324 * C2736 - C52458 * C2533 + C82679 * C16401 -
             C52459 * C16308) *
                C82523) *
               C82871) *
              C82938 * C82939 * C90 +
          (((C52462 - C52461 + C52464 - C52463) * C15405 +
            (C52466 - C52465 + C52468 - C52467) * C82523) *
               C82941 +
           ((C54488 - C54487 + C54490 - C54489) * C15405 +
            (C54492 - C54491 + C54494 - C54493) * C82523) *
               C82934 +
           ((C54496 - C54495 + C54498 - C54497) * C15405 +
            (C54500 - C54499 + C54502 - C54501) * C82523) *
               C82921 +
           ((C52458 * C2526 - C52324 * C2734 + C52459 * C20408 -
             C82679 * C20546) *
                C15405 +
            (C52458 * C2531 - C52324 * C2737 + C52459 * C20410 -
             C82679 * C20547) *
                C82523) *
               C82871) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C37963 +
            (C82925 * C316 - C13259 * C310 + C82909 * C317 - C13261 * C311 +
             C82885 * C318 - C13263 * C312) *
                C37887 +
            (C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C37964 +
            (C14292 - C14293 + C14294 - C14295 + C14296 - C14297) * C82639) *
               C52324 +
           ((C27404 - C27405 + C27406 - C27407 + C27408 - C27409) * C37963 +
            (C27410 - C27411 + C27412 - C27413 + C27414 - C27415) * C37887 +
            (C82925 * C3359 - C13259 * C3348 + C82909 * C3357 - C13261 * C3347 +
             C82885 * C3355 - C13263 * C3346) *
                C37964 +
            (C82925 * C3619 - C13259 * C3613 + C82909 * C3620 - C13261 * C3614 +
             C82885 * C3621 - C13263 * C3615) *
                C82639) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C13259 * C103 - C82925 * C110 + C13261 * C104 - C82909 * C112 +
             C13263 * C105 - C82885 * C114) *
                C37963 +
            (C13259 * C311 - C82925 * C317 + C13261 * C312 - C82909 * C318 +
             C13263 * C313 - C82885 * C319) *
                C37887 +
            (C13259 * C694 - C82925 * C702 + C13261 * C693 - C82909 * C700 +
             C13263 * C692 - C82885 * C698) *
                C37964 +
            (C13259 * C858 - C82925 * C863 + C13261 * C859 - C82909 * C864 +
             C13263 * C860 - C82885 * C865) *
                C82639) *
               C52324 +
           ((C13259 * C1154 - C82925 * C1162 + C13261 * C1153 - C82909 * C1160 +
             C13263 * C1152 - C82885 * C1158) *
                C37963 +
            (C13259 * C1318 - C82925 * C1323 + C13261 * C1319 - C82909 * C1324 +
             C13263 * C1320 - C82885 * C1325) *
                C37887 +
            (C13259 * C3347 - C82925 * C3357 + C13261 * C3346 - C82909 * C3355 +
             C13263 * C7859 - C82885 * C7860) *
                C37964 +
            (C13259 * C3614 - C82925 * C3620 + C13261 * C3615 - C82909 * C3621 +
             C13263 * C8065 - C82885 * C8066) *
                C82639) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C39895 +
            (C82523 * C316 - C15405 * C310) * C82941 +
            (C16004 - C16005) * C39896 + (C16006 - C16007) * C82934 +
            (C16008 - C16009) * C39897 + (C16010 - C16011) * C82921 +
            (C16012 - C16013) * C39898 + (C16014 - C16015) * C82871) *
               C52324 +
           ((C18542 - C18543) * C39895 + (C18544 - C18545) * C82941 +
            (C17734 - C17735) * C39896 + (C17736 - C17737) * C82934 +
            (C17738 - C17739) * C39897 + (C17740 - C17741) * C82921 +
            (C24647 - C24648) * C39898 + (C24649 - C24650) * C82871) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C15405 * C103 - C82523 * C110) * C39895 +
            (C15405 * C311 - C82523 * C317) * C82941 +
            (C15405 * C694 - C82523 * C702) * C39896 +
            (C15405 * C858 - C82523 * C863) * C82934 +
            (C15405 * C1654 - C82523 * C1659) * C39897 +
            (C15405 * C1951 - C82523 * C1955) * C82921 +
            (C15405 * C2526 - C82523 * C2530) * C39898 +
            (C15405 * C2822 - C82523 * C2825) * C82871) *
               C52324 +
           ((C15405 * C1154 - C82523 * C1162) * C39895 +
            (C15405 * C1318 - C82523 * C1323) * C82941 +
            (C15405 * C3347 - C82523 * C3357) * C39896 +
            (C15405 * C3614 - C82523 * C3620) * C82934 +
            (C15405 * C3344 - C82523 * C3351) * C39897 +
            (C15405 * C3617 - C82523 * C3623) * C82921 +
            (C15405 * C20408 - C82523 * C20409) * C39898 +
            (C15405 * C20614 - C82523 * C20615) * C82871) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C37963 * C169 - C38187 * C102 - C37963 * C310 + C37887 * C365 +
             C37964 * C753 - C38188 * C695 - C37964 * C857 + C82639 * C913) *
                C82925 +
            (C38226 + C38227) * C82909 + (C38228 + C38229) * C82885) *
               C52324 +
           ((C44169 + C44170) * C82925 + (C42230 + C42231) * C82909 +
            (C47269 + C47270) * C82885) *
               C82679) *
              C82938 * C82939 * C90 -
          (((C37964 * C7929 - C38188 * C7859 - C37964 * C8065 + C82639 * C8133 +
             C37963 * C1216 - C38187 * C1152 - C37963 * C1320 +
             C37887 * C1370) *
                C82885 +
            (C47270 + C47269) * C82909 + (C42231 + C42230) * C82925) *
               C82679 +
           ((C38231 + C38230) * C82885 + (C38229 + C38228) * C82909 +
            (C38227 + C38226) * C82925) *
               C52324) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C39895 * C169 - C40113 * C102 - C39895 * C310 + C82941 * C365 +
            C39896 * C753 - C40114 * C695 - C39896 * C857 + C82934 * C913 +
            C39897 * C1746 - C40115 * C1653 - C39897 * C1950 + C82921 * C2035 +
            C39898 * C2653 - C40116 * C2527 - C39898 * C2821 + C82871 * C2927) *
               C82523 * C52324 +
           (C39895 * C1213 - C40113 * C1155 - C39895 * C1317 + C82941 * C1373 +
            C39896 * C3441 - C40114 * C3348 - C39896 * C3613 + C82934 * C3704 +
            C39897 * C3442 - C40115 * C3345 - C39897 * C3616 + C82921 * C3703 +
            C39898 * C16353 - C40116 * C16304 - C39898 * C16445 +
            C82871 * C16492) *
               C82523 * C82679) *
              C82938 * C82939 * C90 -
          ((C39898 * C20478 - C40116 * C20408 - C39898 * C20614 +
            C82871 * C20682 + C39897 * C3444 - C40115 * C3344 - C39897 * C3617 +
            C82921 * C3701 + C39896 * C3443 - C40114 * C3347 - C39896 * C3614 +
            C82934 * C3702 + C39895 * C1214 - C40113 * C1154 - C39895 * C1318 +
            C82941 * C1372) *
               C82523 * C82679 +
           (C40145 + C40144 + C40143 + C40142) * C82523 * C52324) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C37963 +
            (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
                C37887 +
            (C55448 - C55449 + C55450 - C55451) * C37964 +
            (C55758 - C55759 + C55760 - C55761) * C82639) *
               C82925 +
           ((C52461 - C52462 + C52463 - C52464) * C37963 +
            (C52683 - C52684 + C52685 - C52686) * C37887 +
            (C54487 - C54488 + C54489 - C54490) * C37964 +
            (C54818 - C54819 + C54820 - C54821) * C82639) *
               C82909 +
           ((C52469 - C52470 + C52471 - C52472) * C37963 +
            (C52687 - C52688 + C52689 - C52690) * C37887 +
            (C59142 - C59143 + C59144 - C59145) * C37964 +
            (C59444 - C59445 + C59446 - C59447) * C82639) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C52462 - C52461 + C52464 - C52463) * C37963 +
            (C52684 - C52683 + C52686 - C52685) * C37887 +
            (C54488 - C54487 + C54490 - C54489) * C37964 +
            (C54819 - C54818 + C54821 - C54820) * C82639) *
               C82925 +
           ((C52470 - C52469 + C52472 - C52471) * C37963 +
            (C52688 - C52687 + C52690 - C52689) * C37887 +
            (C59143 - C59142 + C59145 - C59144) * C37964 +
            (C59445 - C59444 + C59447 - C59446) * C82639) *
               C82909 +
           ((C52478 - C52477 + C52480 - C52479) * C37963 +
            (C52692 - C52691 + C52694 - C52693) * C37887 +
            (C52458 * C692 - C52324 * C808 + C52459 * C7859 - C82679 * C7997) *
                C37964 +
            (C52458 * C860 - C52324 * C959 + C52459 * C8065 - C82679 * C8200) *
                C82639) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
               C39895 +
           (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
               C82941 +
           (C55448 - C55449 + C55450 - C55451) * C39896 +
           (C55758 - C55759 + C55760 - C55761) * C82934 +
           (C55456 - C55457 + C55458 - C55459) * C39897 +
           (C55762 - C55763 + C55764 - C55765) * C82921 +
           (C52324 * C2733 - C52458 * C2527 + C82679 * C16399 -
            C52459 * C16304) *
               C39898 +
           (C52324 * C3002 - C52458 * C2821 + C82679 * C16535 -
            C52459 * C16445) *
               C82871) *
              C82523 * C82938 * C82939 * C90 +
          ((C52462 - C52461 + C52464 - C52463) * C39895 +
           (C52684 - C52683 + C52686 - C52685) * C82941 +
           (C54488 - C54487 + C54490 - C54489) * C39896 +
           (C54819 - C54818 + C54821 - C54820) * C82934 +
           (C54496 - C54495 + C54498 - C54497) * C39897 +
           (C54823 - C54822 + C54825 - C54824) * C82921 +
           (C52458 * C2526 - C52324 * C2734 + C52459 * C20408 -
            C82679 * C20546) *
               C39898 +
           (C52458 * C2822 - C52324 * C3003 + C52459 * C20614 -
            C82679 * C20749) *
               C82871) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezx[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C52458 +
            (C82925 * C503 - C13259 * C497 + C82909 * C504 - C13261 * C498 +
             C82885 * C505 - C13263 * C499) *
                C52324 +
            (C27404 - C27405 + C27406 - C27407 + C27408 - C27409) * C52459 +
            (C27656 - C27657 + C27658 - C27659 + C27660 - C27661) * C82679) *
               C37887 +
           ((C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C52458 +
            (C14532 - C14533 + C14534 - C14535 + C14536 - C14537) * C52324 +
            (C82925 * C3359 - C13259 * C3348 + C82909 * C3357 - C13261 * C3347 +
             C82885 * C3355 - C13263 * C3346) *
                C52459 +
            (C82925 * C3865 - C13259 * C3859 + C82909 * C3866 - C13261 * C3860 +
             C82885 * C3867 - C13263 * C3861) *
                C82679) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C13259 * C103 - C82925 * C110 + C13261 * C104 - C82909 * C112 +
             C13263 * C105 - C82885 * C114) *
                C52458 +
            (C13259 * C498 - C82925 * C504 + C13261 * C499 - C82909 * C505 +
             C13263 * C500 - C82885 * C506) *
                C52324 +
            (C13259 * C1154 - C82925 * C1162 + C13261 * C1153 - C82909 * C1160 +
             C13263 * C1152 - C82885 * C1158) *
                C52459 +
            (C13259 * C1464 - C82925 * C1469 + C13261 * C1465 - C82909 * C1470 +
             C13263 * C1466 - C82885 * C1471) *
                C82679) *
               C37887 +
           ((C13259 * C694 - C82925 * C702 + C13261 * C693 - C82909 * C700 +
             C13263 * C692 - C82885 * C698) *
                C52458 +
            (C13259 * C1004 - C82925 * C1009 + C13261 * C1005 - C82909 * C1010 +
             C13263 * C1006 - C82885 * C1011) *
                C52324 +
            (C13259 * C3347 - C82925 * C3357 + C13261 * C3346 - C82909 * C3355 +
             C13263 * C7859 - C82885 * C7860) *
                C52459 +
            (C13259 * C3860 - C82925 * C3866 + C13261 * C3861 - C82909 * C3867 +
             C13263 * C8267 - C82885 * C8268) *
                C82679) *
               C82639) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C52458 +
            (C82523 * C503 - C15405 * C497) * C52324 +
            (C18542 - C18543) * C52459 + (C18822 - C18823) * C82679) *
               C82941 +
           ((C16004 - C16005) * C52458 + (C16154 - C16155) * C52324 +
            (C17734 - C17735) * C52459 + (C17988 - C17989) * C82679) *
               C82934 +
           ((C16008 - C16009) * C52458 + (C16156 - C16157) * C52324 +
            (C17738 - C17739) * C52459 + (C17992 - C17993) * C82679) *
               C82921 +
           ((C16012 - C16013) * C52458 + (C16158 - C16159) * C52324 +
            (C24647 - C24648) * C52459 + (C24853 - C24854) * C82679) *
               C82871) *
              C82938 * C82939 * C90 +
          (((C15405 * C103 - C82523 * C110) * C52458 +
            (C15405 * C498 - C82523 * C504) * C52324 +
            (C15405 * C1154 - C82523 * C1162) * C52459 +
            (C15405 * C1464 - C82523 * C1469) * C82679) *
               C82941 +
           ((C15405 * C694 - C82523 * C702) * C52458 +
            (C15405 * C1004 - C82523 * C1009) * C52324 +
            (C15405 * C3347 - C82523 * C3357) * C52459 +
            (C15405 * C3860 - C82523 * C3866) * C82679) *
               C82934 +
           ((C15405 * C1654 - C82523 * C1659) * C52458 +
            (C15405 * C2242 - C82523 * C2246) * C52324 +
            (C15405 * C3344 - C82523 * C3351) * C52459 +
            (C15405 * C3863 - C82523 * C3869) * C82679) *
               C82921 +
           ((C15405 * C2526 - C82523 * C2530) * C52458 +
            (C15405 * C3084 - C82523 * C3087) * C52324 +
            (C15405 * C20408 - C82523 * C20409) * C52459 +
            (C15405 * C20816 - C82523 * C20817) * C82679) *
               C82871) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C52458 +
            (C37887 * C551 - C37963 * C497 + C82639 * C1055 - C37964 * C1003) *
                C52324 +
            (C43819 - C43820 + C43821 - C43822) * C52459 +
            (C44475 - C44476 + C44477 - C44478) * C82679) *
               C82925 +
           ((C37966 - C37967 + C37968 - C37969) * C52458 +
            (C38430 - C38431 + C38432 - C38433) * C52324 +
            (C41884 - C41885 + C41886 - C41887) * C52459 +
            (C42534 - C42535 + C42536 - C42537) * C82679) *
               C82909 +
           ((C37974 - C37975 + C37976 - C37977) * C52458 +
            (C38434 - C38435 + C38436 - C38437) * C52324 +
            (C46955 - C46956 + C46957 - C46958) * C52459 +
            (C47565 - C47566 + C47567 - C47568) * C82679) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C37967 - C37966 + C37969 - C37968) * C52458 +
            (C38431 - C38430 + C38433 - C38432) * C52324 +
            (C41885 - C41884 + C41887 - C41886) * C52459 +
            (C42535 - C42534 + C42537 - C42536) * C82679) *
               C82925 +
           ((C37975 - C37974 + C37977 - C37976) * C52458 +
            (C38435 - C38434 + C38437 - C38436) * C52324 +
            (C46956 - C46955 + C46958 - C46957) * C52459 +
            (C47566 - C47565 + C47568 - C47567) * C82679) *
               C82909 +
           ((C37983 - C37982 + C37985 - C37984) * C52458 +
            (C38439 - C38438 + C38441 - C38440) * C52324 +
            (C37963 * C1152 - C37887 * C1216 + C37964 * C7859 -
             C82639 * C7929) *
                C52459 +
            (C37963 * C1466 - C37887 * C1518 + C37964 * C8267 -
             C82639 * C8335) *
                C82679) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C82941 * C169 - C39895 * C102 + C82934 * C753 - C39896 * C695 +
            C82921 * C1746 - C39897 * C1653 + C82871 * C2653 - C39898 * C2527) *
               C52458 +
           (C82941 * C551 - C39895 * C497 + C82934 * C1055 - C39896 * C1003 +
            C82921 * C2323 - C39897 * C2241 + C82871 * C3175 - C39898 * C3083) *
               C52324 +
           (C82941 * C1213 - C39895 * C1155 + C82934 * C3441 - C39896 * C3348 +
            C82921 * C3442 - C39897 * C3345 + C82871 * C16353 -
            C39898 * C16304) *
               C52459 +
           (C82941 * C1515 - C39895 * C1463 + C82934 * C3945 - C39896 * C3859 +
            C82921 * C3946 - C39897 * C3862 + C82871 * C16625 -
            C39898 * C16579) *
               C82679) *
              C82523 * C82938 * C82939 * C90 +
          ((C39901 - C39900 + C39903 - C39902 + C39905 - C39904 + C39907 -
            C39906) *
               C52458 +
           (C40345 - C40344 + C40347 - C40346 + C40349 - C40348 + C40351 -
            C40350) *
               C52324 +
           (C39895 * C1154 - C82941 * C1214 + C39896 * C3347 - C82934 * C3443 +
            C39897 * C3344 - C82921 * C3444 + C39898 * C20408 -
            C82871 * C20478) *
               C52459 +
           (C39895 * C1464 - C82941 * C1516 + C39896 * C3860 - C82934 * C3947 +
            C39897 * C3863 - C82921 * C3948 + C39898 * C20816 -
            C82871 * C20884) *
               C82679) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52458 * C240 - C52892 * C102 - C52458 * C497 + C52324 * C608 +
             C52459 * C1265 - C52893 * C1155 - C52459 * C1463 +
             C82679 * C1566) *
                C37887 +
            (C56084 + C56085) * C82639) *
               C82925 +
           ((C52931 + C52932) * C37887 + (C55150 + C55151) * C82639) * C82909 +
           ((C52933 + C52934) * C37887 + (C59754 + C59755) * C82639) * C82885) *
              C82938 * C82939 * C90 -
          (((C52459 * C7997 - C52893 * C7859 - C52459 * C8267 + C82679 * C8402 +
             C52458 * C808 - C52892 * C692 - C52458 * C1006 + C52324 * C1103) *
                C82639 +
            (C52936 + C52935) * C37887) *
               C82885 +
           ((C59755 + C59754) * C82639 + (C52934 + C52933) * C37887) * C82909 +
           ((C55151 + C55150) * C82639 + (C52932 + C52931) * C37887) * C82925) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52458 * C240 - C52892 * C102 - C52458 * C497 + C52324 * C608 +
            C52459 * C1265 - C52893 * C1155 - C52459 * C1463 + C82679 * C1566) *
               C82941 +
           (C56084 + C56085) * C82934 + (C56086 + C56087) * C82921 +
           (C52458 * C2733 - C52892 * C2527 - C52458 * C3083 + C52324 * C3254 +
            C52459 * C16399 - C52893 * C16304 - C52459 * C16579 +
            C82679 * C16670) *
               C82871) *
              C82523 * C82938 * C82939 * C90 -
          ((C52459 * C20546 - C52893 * C20408 - C52459 * C20816 +
            C82679 * C20951 + C52458 * C2734 - C52892 * C2526 - C52458 * C3084 +
            C52324 * C3253) *
               C82871 +
           (C55153 + C55152) * C82921 + (C55151 + C55150) * C82934 +
           (C52932 + C52931) * C82941) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexx[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13259 * C108 - C13260 * C102 - C13259 * C109 + C82925 * C120 +
             C13261 * C110 - C13262 * C103 - C13261 * C111 + C82909 * C121 +
             C13263 * C112 - C13264 * C104 - C13263 * C113 + C82885 * C122) *
                C52324 +
            (C27176 + C27177 + C27178) * C82679) *
               C37887 +
           ((C14058 + C14059 + C14060) * C52324 +
            (C67372 + C67373 + C67374) * C82679) *
               C82639) *
              C82938 * C688 -
          (((C13263 * C3349 - C13264 * C3343 - C13263 * C3350 + C82885 * C3361 +
             C13261 * C3351 - C13262 * C3344 - C13261 * C3352 + C82909 * C3362 +
             C13259 * C3353 - C13260 * C3345 - C13259 * C3354 +
             C82925 * C3363) *
                C82679 +
            (C14063 + C14062 + C14061) * C52324) *
               C82639 +
           ((C67374 + C67373 + C67372) * C82679 +
            (C14060 + C14059 + C14058) * C52324) *
               C37887) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C52324 +
            C18282 * C82679) *
               C82941 +
           (C69719 + C69720) * C82934 + (C69721 + C69722) * C82921 +
           (C69723 + C69724) * C82871) *
              C82938 * C688 -
          (((C15405 * C16305 - C15406 * C16303 - C15405 * C16306 +
             C82523 * C16309) *
                C82679 +
            C15859 * C52324) *
               C82871 +
           (C69724 + C69723) * C82921 + (C69722 + C69721) * C82934 +
           (C69720 + C69719) * C82941) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C13259 +
            (C37887 * C175 - C37963 * C109 + C82639 * C758 - C37964 * C705) *
                C82925 +
            (C37966 - C37967 + C37968 - C37969) * C13261 +
            (C37970 - C37971 + C37972 - C37973) * C82909 +
            (C37974 - C37975 + C37976 - C37977) * C13263 +
            (C37978 - C37979 + C37980 - C37981) * C82885) *
               C52324 +
           ((C43819 - C43820 + C43821 - C43822) * C13259 +
            (C43823 - C43824 + C43825 - C43826) * C82925 +
            (C41884 - C41885 + C41886 - C41887) * C13261 +
            (C41888 - C41889 + C41890 - C41891) * C82909 +
            (C46955 - C46956 + C46957 - C46958) * C13263 +
            (C46959 - C46960 + C46961 - C46962) * C82885) *
               C82679) *
              C82938 * C688 +
          (((C37963 * C695 - C37887 * C753 + C37964 * C1653 - C82639 * C1746) *
                C13259 +
            (C37963 * C705 - C37887 * C758 + C37964 * C1658 - C82639 * C1750) *
                C82925 +
            (C37963 * C694 - C37887 * C754 + C37964 * C1654 - C82639 * C1747) *
                C13261 +
            (C37963 * C703 - C37887 * C759 + C37964 * C1660 - C82639 * C1751) *
                C82909 +
            (C37963 * C693 - C37887 * C755 + C37964 * C1655 - C82639 * C1748) *
                C13263 +
            (C37963 * C701 - C37887 * C760 + C37964 * C1662 - C82639 * C1752) *
                C82885) *
               C52324 +
           ((C37963 * C3348 - C37887 * C3441 + C37964 * C3345 -
             C82639 * C3442) *
                C13259 +
            (C37963 * C3360 - C37887 * C3447 + C37964 * C3354 -
             C82639 * C3448) *
                C82925 +
            (C37963 * C3347 - C37887 * C3443 + C37964 * C3344 -
             C82639 * C3444) *
                C13261 +
            (C37963 * C3358 - C37887 * C3449 + C37964 * C3352 -
             C82639 * C3450) *
                C82909 +
            (C37963 * C3346 - C37887 * C3445 + C37964 * C3343 -
             C82639 * C3446) *
                C13263 +
            (C37963 * C3356 - C37887 * C3451 + C37964 * C3350 -
             C82639 * C3452) *
                C82885) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82941 * C169 - C39895 * C102 + C82934 * C753 - C39896 * C695 +
             C82921 * C1746 - C39897 * C1653 + C82871 * C2653 -
             C39898 * C2527) *
                C15405 +
            (C82941 * C175 - C39895 * C109 + C82934 * C758 - C39896 * C705 +
             C82921 * C1750 - C39897 * C1658 + C82871 * C2656 -
             C39898 * C2533) *
                C82523) *
               C52324 +
           ((C82941 * C1213 - C39895 * C1155 + C82934 * C3441 - C39896 * C3348 +
             C82921 * C3442 - C39897 * C3345 + C82871 * C16353 -
             C39898 * C16304) *
                C15405 +
            (C82941 * C1218 - C39895 * C1165 + C82934 * C3447 - C39896 * C3360 +
             C82921 * C3448 - C39897 * C3354 + C82871 * C16355 -
             C39898 * C16308) *
                C82523) *
               C82679) *
              C82938 * C688 +
          (((C39895 * C695 - C82941 * C753 + C39896 * C1653 - C82934 * C1746 +
             C39897 * C2527 - C82921 * C2653 + C39898 * C15407 -
             C82871 * C15462) *
                C15405 +
            (C39895 * C705 - C82941 * C758 + C39896 * C1658 - C82934 * C1750 +
             C39897 * C2533 - C82921 * C2656 + C39898 * C15410 -
             C82871 * C15464) *
                C82523) *
               C52324 +
           ((C39895 * C3348 - C82941 * C3441 + C39896 * C3345 - C82934 * C3442 +
             C39897 * C16304 - C82921 * C16353 + C39898 * C16303 -
             C82871 * C16354) *
                C15405 +
            (C39895 * C3360 - C82941 * C3447 + C39896 * C3354 - C82934 * C3448 +
             C39897 * C16308 - C82921 * C16355 + C39898 * C16306 -
             C82871 * C16356) *
                C82523) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C13259 +
            (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
                C82925 +
            (C52461 - C52462 + C52463 - C52464) * C13261 +
            (C52465 - C52466 + C52467 - C52468) * C82909 +
            (C52469 - C52470 + C52471 - C52472) * C13263 +
            (C52473 - C52474 + C52475 - C52476) * C82885) *
               C37887 +
           ((C55448 - C55449 + C55450 - C55451) * C13259 +
            (C55452 - C55453 + C55454 - C55455) * C82925 +
            (C54487 - C54488 + C54489 - C54490) * C13261 +
            (C54491 - C54492 + C54493 - C54494) * C82909 +
            (C59142 - C59143 + C59144 - C59145) * C13263 +
            (C59146 - C59147 + C59148 - C59149) * C82885) *
               C82639) *
              C82938 * C688 +
          (((C55449 - C55448 + C55451 - C55450) * C13259 +
            (C55453 - C55452 + C55455 - C55454) * C82925 +
            (C54488 - C54487 + C54490 - C54489) * C13261 +
            (C54492 - C54491 + C54494 - C54493) * C82909 +
            (C59143 - C59142 + C59145 - C59144) * C13263 +
            (C59147 - C59146 + C59149 - C59148) * C82885) *
               C37887 +
           ((C55457 - C55456 + C55459 - C55458) * C13259 +
            (C55461 - C55460 + C55463 - C55462) * C82925 +
            (C54496 - C54495 + C54498 - C54497) * C13261 +
            (C54500 - C54499 + C54502 - C54501) * C82909 +
            (C52458 * C1655 - C52324 * C1854 + C52459 * C3343 -
             C82679 * C3532) *
                C13263 +
            (C52458 * C1662 - C52324 * C1858 + C52459 * C3350 -
             C82679 * C3538) *
                C82885) *
               C82639) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C15405 +
            (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
                C82523) *
               C82941 +
           ((C55448 - C55449 + C55450 - C55451) * C15405 +
            (C55452 - C55453 + C55454 - C55455) * C82523) *
               C82934 +
           ((C55456 - C55457 + C55458 - C55459) * C15405 +
            (C55460 - C55461 + C55462 - C55463) * C82523) *
               C82921 +
           ((C69857 - C69858 + C69859 - C69860) * C15405 +
            (C69861 - C69862 + C69863 - C69864) * C82523) *
               C82871) *
              C82938 * C688 +
          (((C55449 - C55448 + C55451 - C55450) * C15405 +
            (C55453 - C55452 + C55455 - C55454) * C82523) *
               C82941 +
           ((C55457 - C55456 + C55459 - C55458) * C15405 +
            (C55461 - C55460 + C55463 - C55462) * C82523) *
               C82934 +
           ((C69858 - C69857 + C69860 - C69859) * C15405 +
            (C69862 - C69861 + C69864 - C69863) * C82523) *
               C82921 +
           ((C52458 * C15407 - C52324 * C15508 + C52459 * C16303 -
             C82679 * C16400) *
                C15405 +
            (C52458 * C15410 - C52324 * C15510 + C52459 * C16306 -
             C82679 * C16402) *
                C82523) *
               C82871) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C37963 +
            (C82925 * C316 - C13259 * C310 + C82909 * C317 - C13261 * C311 +
             C82885 * C318 - C13263 * C312) *
                C37887 +
            (C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C37964 +
            (C14292 - C14293 + C14294 - C14295 + C14296 - C14297) * C82639) *
               C52324 +
           ((C27404 - C27405 + C27406 - C27407 + C27408 - C27409) * C37963 +
            (C27410 - C27411 + C27412 - C27413 + C27414 - C27415) * C37887 +
            (C67669 - C67670 + C67671 - C67672 + C67673 - C67674) * C37964 +
            (C67675 - C67676 + C67677 - C67678 + C67679 - C67680) * C82639) *
               C82679) *
              C82938 * C688 +
          (((C14287 - C14286 + C14289 - C14288 + C14291 - C14290) * C37963 +
            (C14293 - C14292 + C14295 - C14294 + C14297 - C14296) * C37887 +
            (C14299 - C14298 + C14301 - C14300 + C14303 - C14302) * C37964 +
            (C14305 - C14304 + C14307 - C14306 + C14309 - C14308) * C82639) *
               C52324 +
           ((C67670 - C67669 + C67672 - C67671 + C67674 - C67673) * C37963 +
            (C67676 - C67675 + C67678 - C67677 + C67680 - C67679) * C37887 +
            (C13259 * C3345 - C82925 * C3353 + C13261 * C3344 - C82909 * C3351 +
             C13263 * C3343 - C82885 * C3349) *
                C37964 +
            (C13259 * C3616 - C82925 * C3622 + C13261 * C3617 - C82909 * C3623 +
             C13263 * C3618 - C82885 * C3624) *
                C82639) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C39895 +
            (C82523 * C316 - C15405 * C310) * C82941 +
            (C16004 - C16005) * C39896 + (C16006 - C16007) * C82934 +
            (C16008 - C16009) * C39897 + (C16010 - C16011) * C82921 +
            (C16012 - C16013) * C39898 + (C16014 - C16015) * C82871) *
               C52324 +
           ((C18542 - C18543) * C39895 + (C18544 - C18545) * C82941 +
            (C17734 - C17735) * C39896 + (C17736 - C17737) * C82934 +
            (C17738 - C17739) * C39897 + (C17740 - C17741) * C82921 +
            (C24647 - C24648) * C39898 + (C24649 - C24650) * C82871) *
               C82679) *
              C82938 * C688 +
          (((C16005 - C16004) * C39895 + (C16007 - C16006) * C82941 +
            (C16009 - C16008) * C39896 + (C16011 - C16010) * C82934 +
            (C16013 - C16012) * C39897 + (C16015 - C16014) * C82921 +
            (C16017 - C16016) * C39898 + (C16019 - C16018) * C82871) *
               C52324 +
           ((C17735 - C17734) * C39895 + (C17737 - C17736) * C82941 +
            (C17739 - C17738) * C39896 + (C17741 - C17740) * C82934 +
            (C24648 - C24647) * C39897 + (C24650 - C24649) * C82921 +
            (C15405 * C16303 - C82523 * C16305) * C39898 +
            (C15405 * C16446 - C82523 * C16448) * C82871) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C37963 * C169 - C38187 * C102 - C37963 * C310 + C37887 * C365 +
             C37964 * C753 - C38188 * C695 - C37964 * C857 + C82639 * C913) *
                C82925 +
            (C38226 + C38227) * C82909 + (C38228 + C38229) * C82885) *
               C52324 +
           ((C44169 + C44170) * C82925 + (C42230 + C42231) * C82909 +
            (C47269 + C47270) * C82885) *
               C82679) *
              C82938 * C688 -
          (((C37964 * C3446 - C38188 * C3343 - C37964 * C3618 + C82639 * C3699 +
             C37963 * C3445 - C38187 * C3346 - C37963 * C3615 +
             C37887 * C3700) *
                C82885 +
            (C37964 * C3444 - C38188 * C3344 - C37964 * C3617 + C82639 * C3701 +
             C37963 * C3443 - C38187 * C3347 - C37963 * C3614 +
             C37887 * C3702) *
                C82909 +
            (C37964 * C3442 - C38188 * C3345 - C37964 * C3616 + C82639 * C3703 +
             C37963 * C3441 - C38187 * C3348 - C37963 * C3613 +
             C37887 * C3704) *
                C82925) *
               C82679 +
           ((C37964 * C1748 - C38188 * C1655 - C37964 * C1952 + C82639 * C2037 +
             C37963 * C755 - C38187 * C693 - C37963 * C859 + C37887 * C911) *
                C82885 +
            (C37964 * C1747 - C38188 * C1654 - C37964 * C1951 + C82639 * C2036 +
             C37963 * C754 - C38187 * C694 - C37963 * C858 + C37887 * C912) *
                C82909 +
            (C37964 * C1746 - C38188 * C1653 - C37964 * C1950 + C82639 * C2035 +
             C37963 * C753 - C38187 * C695 - C37963 * C857 + C37887 * C913) *
                C82925) *
               C52324) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C39895 * C169 - C40113 * C102 - C39895 * C310 + C82941 * C365 +
            C39896 * C753 - C40114 * C695 - C39896 * C857 + C82934 * C913 +
            C39897 * C1746 - C40115 * C1653 - C39897 * C1950 + C82921 * C2035 +
            C39898 * C2653 - C40116 * C2527 - C39898 * C2821 + C82871 * C2927) *
               C82523 * C52324 +
           (C39895 * C1213 - C40113 * C1155 - C39895 * C1317 + C82941 * C1373 +
            C39896 * C3441 - C40114 * C3348 - C39896 * C3613 + C82934 * C3704 +
            C39897 * C3442 - C40115 * C3345 - C39897 * C3616 + C82921 * C3703 +
            C39898 * C16353 - C40116 * C16304 - C39898 * C16445 +
            C82871 * C16492) *
               C82523 * C82679) *
              C82938 * C688 -
          ((C39898 * C16354 - C40116 * C16303 - C39898 * C16446 +
            C82871 * C16491 + C39897 * C16353 - C40115 * C16304 -
            C39897 * C16445 + C82921 * C16492 + C39896 * C3442 -
            C40114 * C3345 - C39896 * C3616 + C82934 * C3703 + C39895 * C3441 -
            C40113 * C3348 - C39895 * C3613 + C82941 * C3704) *
               C82523 * C82679 +
           (C39898 * C15462 - C40116 * C15407 - C39898 * C15554 +
            C82871 * C15605 + C39897 * C2653 - C40115 * C2527 - C39897 * C2821 +
            C82921 * C2927 + C39896 * C1746 - C40114 * C1653 - C39896 * C1950 +
            C82934 * C2035 + C39895 * C753 - C40113 * C695 - C39895 * C857 +
            C82941 * C913) *
               C82523 * C52324) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C37963 +
            (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
                C37887 +
            (C55448 - C55449 + C55450 - C55451) * C37964 +
            (C55758 - C55759 + C55760 - C55761) * C82639) *
               C82925 +
           ((C52461 - C52462 + C52463 - C52464) * C37963 +
            (C52683 - C52684 + C52685 - C52686) * C37887 +
            (C54487 - C54488 + C54489 - C54490) * C37964 +
            (C54818 - C54819 + C54820 - C54821) * C82639) *
               C82909 +
           ((C52469 - C52470 + C52471 - C52472) * C37963 +
            (C52687 - C52688 + C52689 - C52690) * C37887 +
            (C59142 - C59143 + C59144 - C59145) * C37964 +
            (C59444 - C59445 + C59446 - C59447) * C82639) *
               C82885) *
              C82938 * C688 +
          (((C55449 - C55448 + C55451 - C55450) * C37963 +
            (C55759 - C55758 + C55761 - C55760) * C37887 +
            (C55457 - C55456 + C55459 - C55458) * C37964 +
            (C55763 - C55762 + C55765 - C55764) * C82639) *
               C82925 +
           ((C54488 - C54487 + C54490 - C54489) * C37963 +
            (C54819 - C54818 + C54821 - C54820) * C37887 +
            (C54496 - C54495 + C54498 - C54497) * C37964 +
            (C54823 - C54822 + C54825 - C54824) * C82639) *
               C82909 +
           ((C59143 - C59142 + C59145 - C59144) * C37963 +
            (C59445 - C59444 + C59447 - C59446) * C37887 +
            (C52458 * C1655 - C52324 * C1854 + C52459 * C3343 -
             C82679 * C3532) *
                C37964 +
            (C52458 * C1952 - C52324 * C2157 + C52459 * C3618 -
             C82679 * C3784) *
                C82639) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
               C39895 +
           (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
               C82941 +
           (C55448 - C55449 + C55450 - C55451) * C39896 +
           (C55758 - C55759 + C55760 - C55761) * C82934 +
           (C55456 - C55457 + C55458 - C55459) * C39897 +
           (C55762 - C55763 + C55764 - C55765) * C82921 +
           (C69857 - C69858 + C69859 - C69860) * C39898 +
           (C70063 - C70064 + C70065 - C70066) * C82871) *
              C82523 * C82938 * C688 +
          ((C55449 - C55448 + C55451 - C55450) * C39895 +
           (C55759 - C55758 + C55761 - C55760) * C82941 +
           (C55457 - C55456 + C55459 - C55458) * C39896 +
           (C55763 - C55762 + C55765 - C55764) * C82934 +
           (C69858 - C69857 + C69860 - C69859) * C39897 +
           (C70064 - C70063 + C70066 - C70065) * C82921 +
           (C52458 * C15407 - C52324 * C15508 + C52459 * C16303 -
            C82679 * C16400) *
               C39898 +
           (C52458 * C15554 - C52324 * C15649 + C52459 * C16446 -
            C82679 * C16536) *
               C82871) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezx[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C52458 +
            (C82925 * C503 - C13259 * C497 + C82909 * C504 - C13261 * C498 +
             C82885 * C505 - C13263 * C499) *
                C52324 +
            (C27404 - C27405 + C27406 - C27407 + C27408 - C27409) * C52459 +
            (C27656 - C27657 + C27658 - C27659 + C27660 - C27661) * C82679) *
               C37887 +
           ((C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C52458 +
            (C14532 - C14533 + C14534 - C14535 + C14536 - C14537) * C52324 +
            (C67669 - C67670 + C67671 - C67672 + C67673 - C67674) * C52459 +
            (C67975 - C67976 + C67977 - C67978 + C67979 - C67980) * C82679) *
               C82639) *
              C82938 * C688 +
          (((C14287 - C14286 + C14289 - C14288 + C14291 - C14290) * C52458 +
            (C14533 - C14532 + C14535 - C14534 + C14537 - C14536) * C52324 +
            (C67670 - C67669 + C67672 - C67671 + C67674 - C67673) * C52459 +
            (C67976 - C67975 + C67978 - C67977 + C67980 - C67979) * C82679) *
               C37887 +
           ((C14299 - C14298 + C14301 - C14300 + C14303 - C14302) * C52458 +
            (C14539 - C14538 + C14541 - C14540 + C14543 - C14542) * C52324 +
            (C13259 * C3345 - C82925 * C3353 + C13261 * C3344 - C82909 * C3351 +
             C13263 * C3343 - C82885 * C3349) *
                C52459 +
            (C13259 * C3862 - C82925 * C3868 + C13261 * C3863 - C82909 * C3869 +
             C13263 * C3864 - C82885 * C3870) *
                C82679) *
               C82639) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C52458 +
            (C82523 * C503 - C15405 * C497) * C52324 +
            (C18542 - C18543) * C52459 + (C18822 - C18823) * C82679) *
               C82941 +
           ((C16004 - C16005) * C52458 + (C16154 - C16155) * C52324 +
            (C17734 - C17735) * C52459 + (C17988 - C17989) * C82679) *
               C82934 +
           ((C16008 - C16009) * C52458 + (C16156 - C16157) * C52324 +
            (C17738 - C17739) * C52459 + (C17992 - C17993) * C82679) *
               C82921 +
           ((C16012 - C16013) * C52458 + (C16158 - C16159) * C52324 +
            (C24647 - C24648) * C52459 + (C24853 - C24854) * C82679) *
               C82871) *
              C82938 * C688 +
          (((C16005 - C16004) * C52458 + (C16155 - C16154) * C52324 +
            (C17735 - C17734) * C52459 + (C17989 - C17988) * C82679) *
               C82941 +
           ((C16009 - C16008) * C52458 + (C16157 - C16156) * C52324 +
            (C17739 - C17738) * C52459 + (C17993 - C17992) * C82679) *
               C82934 +
           ((C16013 - C16012) * C52458 + (C16159 - C16158) * C52324 +
            (C24648 - C24647) * C52459 + (C24854 - C24853) * C82679) *
               C82921 +
           ((C16017 - C16016) * C52458 + (C16161 - C16160) * C52324 +
            (C15405 * C16303 - C82523 * C16305) * C52459 +
            (C15405 * C16580 - C82523 * C16582) * C82679) *
               C82871) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C52458 +
            (C37887 * C551 - C37963 * C497 + C82639 * C1055 - C37964 * C1003) *
                C52324 +
            (C43819 - C43820 + C43821 - C43822) * C52459 +
            (C44475 - C44476 + C44477 - C44478) * C82679) *
               C82925 +
           ((C37966 - C37967 + C37968 - C37969) * C52458 +
            (C38430 - C38431 + C38432 - C38433) * C52324 +
            (C41884 - C41885 + C41886 - C41887) * C52459 +
            (C42534 - C42535 + C42536 - C42537) * C82679) *
               C82909 +
           ((C37974 - C37975 + C37976 - C37977) * C52458 +
            (C38434 - C38435 + C38436 - C38437) * C52324 +
            (C46955 - C46956 + C46957 - C46958) * C52459 +
            (C47565 - C47566 + C47567 - C47568) * C82679) *
               C82885) *
              C82938 * C688 +
          (((C37963 * C695 - C37887 * C753 + C37964 * C1653 - C82639 * C1746) *
                C52458 +
            (C37963 * C1003 - C37887 * C1055 + C37964 * C2241 -
             C82639 * C2323) *
                C52324 +
            (C37963 * C3348 - C37887 * C3441 + C37964 * C3345 -
             C82639 * C3442) *
                C52459 +
            (C37963 * C3859 - C37887 * C3945 + C37964 * C3862 -
             C82639 * C3946) *
                C82679) *
               C82925 +
           ((C37963 * C694 - C37887 * C754 + C37964 * C1654 - C82639 * C1747) *
                C52458 +
            (C37963 * C1004 - C37887 * C1056 + C37964 * C2242 -
             C82639 * C2324) *
                C52324 +
            (C37963 * C3347 - C37887 * C3443 + C37964 * C3344 -
             C82639 * C3444) *
                C52459 +
            (C37963 * C3860 - C37887 * C3947 + C37964 * C3863 -
             C82639 * C3948) *
                C82679) *
               C82909 +
           ((C37963 * C693 - C37887 * C755 + C37964 * C1655 - C82639 * C1748) *
                C52458 +
            (C37963 * C1005 - C37887 * C1057 + C37964 * C2243 -
             C82639 * C2325) *
                C52324 +
            (C37963 * C3346 - C37887 * C3445 + C37964 * C3343 -
             C82639 * C3446) *
                C52459 +
            (C37963 * C3861 - C37887 * C3949 + C37964 * C3864 -
             C82639 * C3950) *
                C82679) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C82941 * C169 - C39895 * C102 + C82934 * C753 - C39896 * C695 +
            C82921 * C1746 - C39897 * C1653 + C82871 * C2653 - C39898 * C2527) *
               C52458 +
           (C82941 * C551 - C39895 * C497 + C82934 * C1055 - C39896 * C1003 +
            C82921 * C2323 - C39897 * C2241 + C82871 * C3175 - C39898 * C3083) *
               C52324 +
           (C82941 * C1213 - C39895 * C1155 + C82934 * C3441 - C39896 * C3348 +
            C82921 * C3442 - C39897 * C3345 + C82871 * C16353 -
            C39898 * C16304) *
               C52459 +
           (C82941 * C1515 - C39895 * C1463 + C82934 * C3945 - C39896 * C3859 +
            C82921 * C3946 - C39897 * C3862 + C82871 * C16625 -
            C39898 * C16579) *
               C82679) *
              C82523 * C82938 * C688 +
          ((C39895 * C695 - C82941 * C753 + C39896 * C1653 - C82934 * C1746 +
            C39897 * C2527 - C82921 * C2653 + C39898 * C15407 -
            C82871 * C15462) *
               C52458 +
           (C39895 * C1003 - C82941 * C1055 + C39896 * C2241 - C82934 * C2323 +
            C39897 * C3083 - C82921 * C3175 + C39898 * C15693 -
            C82871 * C15739) *
               C52324 +
           (C39895 * C3348 - C82941 * C3441 + C39896 * C3345 - C82934 * C3442 +
            C39897 * C16304 - C82921 * C16353 + C39898 * C16303 -
            C82871 * C16354) *
               C52459 +
           (C39895 * C3859 - C82941 * C3945 + C39896 * C3862 - C82934 * C3946 +
            C39897 * C16579 - C82921 * C16625 + C39898 * C16580 -
            C82871 * C16626) *
               C82679) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52458 * C240 - C52892 * C102 - C52458 * C497 + C52324 * C608 +
             C52459 * C1265 - C52893 * C1155 - C52459 * C1463 +
             C82679 * C1566) *
                C37887 +
            (C56084 + C56085) * C82639) *
               C82925 +
           ((C52931 + C52932) * C37887 + (C55150 + C55151) * C82639) * C82909 +
           ((C52933 + C52934) * C37887 + (C59754 + C59755) * C82639) * C82885) *
              C82938 * C688 -
          (((C52459 * C3532 - C52893 * C3343 - C52459 * C3864 + C82679 * C4025 +
             C52458 * C1854 - C52892 * C1655 - C52458 * C2243 +
             C52324 * C2415) *
                C82639 +
            (C59755 + C59754) * C37887) *
               C82885 +
           ((C55153 + C55152) * C82639 + (C55151 + C55150) * C37887) * C82909 +
           ((C56087 + C56086) * C82639 + (C56085 + C56084) * C37887) * C82925) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52458 * C240 - C52892 * C102 - C52458 * C497 + C52324 * C608 +
            C52459 * C1265 - C52893 * C1155 - C52459 * C1463 + C82679 * C1566) *
               C82941 +
           (C56084 + C56085) * C82934 + (C56086 + C56087) * C82921 +
           (C70277 + C70278) * C82871) *
              C82523 * C82938 * C688 -
          ((C52459 * C16400 - C52893 * C16303 - C52459 * C16580 +
            C82679 * C16669 + C52458 * C15508 - C52892 * C15407 -
            C52458 * C15693 + C52324 * C15783) *
               C82871 +
           (C70278 + C70277) * C82921 + (C56087 + C56086) * C82934 +
           (C56085 + C56084) * C82941) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13259 * C108 - C13260 * C102 - C13259 * C109 + C82925 * C120 +
             C13261 * C110 - C13262 * C103 - C13261 * C111 + C82909 * C121 +
             C13263 * C112 - C13264 * C104 - C13263 * C113 + C82885 * C122) *
                C52324 +
            (C27176 + C27177 + C27178) * C82679) *
               C37887 +
           ((C14058 + C14059 + C14060) * C52324 +
            (C67372 + C67373 + C67374) * C82679) *
               C82639) *
              C1149 -
          (((C13263 * C4977 - C13264 * C4974 - C13263 * C4978 + C82885 * C4983 +
             C13261 * C4979 - C13262 * C4975 - C13261 * C4980 + C82909 * C4984 +
             C13259 * C4981 - C13260 * C4976 - C13259 * C4982 +
             C82925 * C4985) *
                C82679 +
            (C67374 + C67373 + C67372) * C52324) *
               C82639 +
           ((C27181 + C27180 + C27179) * C82679 +
            (C27178 + C27177 + C27176) * C52324) *
               C37887) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C52324 +
            C18282 * C82679) *
               C82941 +
           (C69719 + C69720) * C82934 + (C69721 + C69722) * C82921 +
           (C69723 + C69724) * C82871) *
              C1149 -
          (((C15405 * C17444 - C15406 * C17443 - C15405 * C17445 +
             C82523 * C17446) *
                C82679 +
            C24439 * C52324) *
               C82871 +
           (C17477 * C82679 + C17476 * C52324) * C82921 +
           (C17475 * C82679 + C17474 * C52324) * C82934 +
           (C18283 * C82679 + C18282 * C52324) * C82941) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C13259 +
            (C37887 * C175 - C37963 * C109 + C82639 * C758 - C37964 * C705) *
                C82925 +
            (C37966 - C37967 + C37968 - C37969) * C13261 +
            (C37970 - C37971 + C37972 - C37973) * C82909 +
            (C37974 - C37975 + C37976 - C37977) * C13263 +
            (C37978 - C37979 + C37980 - C37981) * C82885) *
               C52324 +
           ((C43819 - C43820 + C43821 - C43822) * C13259 +
            (C43823 - C43824 + C43825 - C43826) * C82925 +
            (C41884 - C41885 + C41886 - C41887) * C13261 +
            (C41888 - C41889 + C41890 - C41891) * C82909 +
            (C46955 - C46956 + C46957 - C46958) * C13263 +
            (C46959 - C46960 + C46961 - C46962) * C82885) *
               C82679) *
              C1149 +
          (((C43820 - C43819 + C43822 - C43821) * C13259 +
            (C43824 - C43823 + C43826 - C43825) * C82925 +
            (C41885 - C41884 + C41887 - C41886) * C13261 +
            (C41889 - C41888 + C41891 - C41890) * C82909 +
            (C46956 - C46955 + C46958 - C46957) * C13263 +
            (C46960 - C46959 + C46962 - C46961) * C82885) *
               C52324 +
           ((C43828 - C43827 + C43830 - C43829) * C13259 +
            (C43832 - C43831 + C43834 - C43833) * C82925 +
            (C41893 - C41892 + C41895 - C41894) * C13261 +
            (C41897 - C41896 + C41899 - C41898) * C82909 +
            (C37963 * C4110 - C37887 * C4200 + C37964 * C4974 -
             C82639 * C5062) *
                C13263 +
            (C37963 * C4117 - C37887 * C4204 + C37964 * C4978 -
             C82639 * C5065) *
                C82885) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82941 * C169 - C39895 * C102 + C82934 * C753 - C39896 * C695 +
             C82921 * C1746 - C39897 * C1653 + C82871 * C2653 -
             C39898 * C2527) *
                C15405 +
            (C82941 * C175 - C39895 * C109 + C82934 * C758 - C39896 * C705 +
             C82921 * C1750 - C39897 * C1658 + C82871 * C2656 -
             C39898 * C2533) *
                C82523) *
               C52324 +
           ((C70411 - C70412 + C70413 - C70414 + C70415 - C70416 + C70417 -
             C70418) *
                C15405 +
            (C70419 - C70420 + C70421 - C70422 + C70423 - C70424 + C70425 -
             C70426) *
                C82523) *
               C82679) *
              C1149 +
          (((C70412 - C70411 + C70414 - C70413 + C70416 - C70415 + C70418 -
             C70417) *
                C15405 +
            (C70420 - C70419 + C70422 - C70421 + C70424 - C70423 + C70426 -
             C70425) *
                C82523) *
               C52324 +
           ((C39895 * C4108 - C82941 * C4198 + C39896 * C4976 - C82934 * C5060 +
             C39897 * C16745 - C82921 * C16827 + C39898 * C17443 -
             C82871 * C17555) *
                C15405 +
            (C39895 * C4113 - C82941 * C4202 + C39896 * C4982 - C82934 * C5063 +
             C39897 * C16748 - C82921 * C16829 + C39898 * C17445 -
             C82871 * C17556) *
                C82523) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C13259 +
            (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
                C82925 +
            (C52461 - C52462 + C52463 - C52464) * C13261 +
            (C52465 - C52466 + C52467 - C52468) * C82909 +
            (C52469 - C52470 + C52471 - C52472) * C13263 +
            (C52473 - C52474 + C52475 - C52476) * C82885) *
               C37887 +
           ((C55448 - C55449 + C55450 - C55451) * C13259 +
            (C55452 - C55453 + C55454 - C55455) * C82925 +
            (C54487 - C54488 + C54489 - C54490) * C13261 +
            (C54491 - C54492 + C54493 - C54494) * C82909 +
            (C59142 - C59143 + C59144 - C59145) * C13263 +
            (C59146 - C59147 + C59148 - C59149) * C82885) *
               C82639) *
              C1149 +
          (((C52458 * C1155 - C52324 * C1265 + C52459 * C4108 -
             C82679 * C4299) *
                C13259 +
            (C52458 * C1165 - C52324 * C1270 + C52459 * C4113 -
             C82679 * C4303) *
                C82925 +
            (C52458 * C1154 - C52324 * C1266 + C52459 * C4109 -
             C82679 * C4300) *
                C13261 +
            (C52458 * C1163 - C52324 * C1271 + C52459 * C4115 -
             C82679 * C4304) *
                C82909 +
            (C52458 * C1153 - C52324 * C1267 + C52459 * C4110 -
             C82679 * C4301) *
                C13263 +
            (C52458 * C1161 - C52324 * C1272 + C52459 * C4117 -
             C82679 * C4305) *
                C82885) *
               C37887 +
           ((C52458 * C3348 - C52324 * C3527 + C52459 * C4976 -
             C82679 * C5140) *
                C13259 +
            (C52458 * C3360 - C52324 * C3533 + C52459 * C4982 -
             C82679 * C5143) *
                C82925 +
            (C52458 * C3347 - C52324 * C3528 + C52459 * C4975 -
             C82679 * C5141) *
                C13261 +
            (C52458 * C3358 - C52324 * C3534 + C52459 * C4980 -
             C82679 * C5144) *
                C82909 +
            (C52458 * C3346 - C52324 * C3529 + C52459 * C4974 -
             C82679 * C5142) *
                C13263 +
            (C52458 * C3356 - C52324 * C3535 + C52459 * C4978 -
             C82679 * C5145) *
                C82885) *
               C82639) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C15405 +
            (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
                C82523) *
               C82941 +
           ((C55448 - C55449 + C55450 - C55451) * C15405 +
            (C55452 - C55453 + C55454 - C55455) * C82523) *
               C82934 +
           ((C55456 - C55457 + C55458 - C55459) * C15405 +
            (C55460 - C55461 + C55462 - C55463) * C82523) *
               C82921 +
           ((C69857 - C69858 + C69859 - C69860) * C15405 +
            (C69861 - C69862 + C69863 - C69864) * C82523) *
               C82871) *
              C1149 +
          (((C52458 * C1155 - C52324 * C1265 + C52459 * C4108 -
             C82679 * C4299) *
                C15405 +
            (C52458 * C1165 - C52324 * C1270 + C52459 * C4113 -
             C82679 * C4303) *
                C82523) *
               C82941 +
           ((C52458 * C3348 - C52324 * C3527 + C52459 * C4976 -
             C82679 * C5140) *
                C15405 +
            (C52458 * C3360 - C52324 * C3533 + C52459 * C4982 -
             C82679 * C5143) *
                C82523) *
               C82934 +
           ((C52458 * C3345 - C52324 * C3530 + C52459 * C16745 -
             C82679 * C16905) *
                C15405 +
            (C52458 * C3354 - C52324 * C3536 + C52459 * C16748 -
             C82679 * C16907) *
                C82523) *
               C82921 +
           ((C52458 * C16304 - C52324 * C16399 + C52459 * C17443 -
             C82679 * C17631) *
                C15405 +
            (C52458 * C16308 - C52324 * C16401 + C52459 * C17445 -
             C82679 * C17632) *
                C82523) *
               C82871) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C37963 +
            (C82925 * C316 - C13259 * C310 + C82909 * C317 - C13261 * C311 +
             C82885 * C318 - C13263 * C312) *
                C37887 +
            (C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C37964 +
            (C14292 - C14293 + C14294 - C14295 + C14296 - C14297) * C82639) *
               C52324 +
           ((C27404 - C27405 + C27406 - C27407 + C27408 - C27409) * C37963 +
            (C27410 - C27411 + C27412 - C27413 + C27414 - C27415) * C37887 +
            (C67669 - C67670 + C67671 - C67672 + C67673 - C67674) * C37964 +
            (C67675 - C67676 + C67677 - C67678 + C67679 - C67680) * C82639) *
               C82679) *
              C1149 +
          (((C27405 - C27404 + C27407 - C27406 + C27409 - C27408) * C37963 +
            (C27411 - C27410 + C27413 - C27412 + C27415 - C27414) * C37887 +
            (C67670 - C67669 + C67672 - C67671 + C67674 - C67673) * C37964 +
            (C67676 - C67675 + C67678 - C67677 + C67680 - C67679) * C82639) *
               C52324 +
           ((C27417 - C27416 + C27419 - C27418 + C27421 - C27420) * C37963 +
            (C27423 - C27422 + C27425 - C27424 + C27427 - C27426) * C37887 +
            (C13259 * C4976 - C82925 * C4981 + C13261 * C4975 - C82909 * C4979 +
             C13263 * C4974 - C82885 * C4977) *
                C37964 +
            (C13259 * C5220 - C82925 * C5223 + C13261 * C5221 - C82909 * C5224 +
             C13263 * C5222 - C82885 * C5225) *
                C82639) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C39895 +
            (C82523 * C316 - C15405 * C310) * C82941 +
            (C16004 - C16005) * C39896 + (C16006 - C16007) * C82934 +
            (C16008 - C16009) * C39897 + (C16010 - C16011) * C82921 +
            (C16012 - C16013) * C39898 + (C16014 - C16015) * C82871) *
               C52324 +
           ((C18542 - C18543) * C39895 + (C18544 - C18545) * C82941 +
            (C17734 - C17735) * C39896 + (C17736 - C17737) * C82934 +
            (C17738 - C17739) * C39897 + (C17740 - C17741) * C82921 +
            (C24647 - C24648) * C39898 + (C24649 - C24650) * C82871) *
               C82679) *
              C1149 +
          (((C18543 - C18542) * C39895 + (C18545 - C18544) * C82941 +
            (C17735 - C17734) * C39896 + (C17737 - C17736) * C82934 +
            (C17739 - C17738) * C39897 + (C17741 - C17740) * C82921 +
            (C24648 - C24647) * C39898 + (C24650 - C24649) * C82871) *
               C52324 +
           ((C18547 - C18546) * C39895 + (C18549 - C18548) * C82941 +
            (C17743 - C17742) * C39896 + (C17745 - C17744) * C82934 +
            (C17747 - C17746) * C39897 + (C17749 - C17748) * C82921 +
            (C15405 * C17443 - C82523 * C17444) * C39898 +
            (C15405 * C17731 - C82523 * C17732) * C82871) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C37963 * C169 - C38187 * C102 - C37963 * C310 + C37887 * C365 +
             C37964 * C753 - C38188 * C695 - C37964 * C857 + C82639 * C913) *
                C82925 +
            (C38226 + C38227) * C82909 + (C38228 + C38229) * C82885) *
               C52324 +
           ((C44169 + C44170) * C82925 + (C42230 + C42231) * C82909 +
            (C47269 + C47270) * C82885) *
               C82679) *
              C1149 -
          (((C37964 * C5062 - C38188 * C4974 - C37964 * C5222 + C82639 * C5300 +
             C37963 * C4200 - C38187 * C4110 - C37963 * C4407 +
             C37887 * C4489) *
                C82885 +
            (C42233 + C42232) * C82909 + (C44172 + C44171) * C82925) *
               C82679 +
           ((C47270 + C47269) * C82885 + (C42231 + C42230) * C82909 +
            (C44170 + C44169) * C82925) *
               C52324) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C39895 * C169 - C40113 * C102 - C39895 * C310 + C82941 * C365 +
            C39896 * C753 - C40114 * C695 - C39896 * C857 + C82934 * C913 +
            C39897 * C1746 - C40115 * C1653 - C39897 * C1950 + C82921 * C2035 +
            C39898 * C2653 - C40116 * C2527 - C39898 * C2821 + C82871 * C2927) *
               C82523 * C52324 +
           (C70649 + C70650 + C70651 + C70652) * C82523 * C82679) *
              C1149 -
          ((C39898 * C17555 - C40116 * C17443 - C39898 * C17731 +
            C82871 * C17823 + C39897 * C16827 - C40115 * C16745 -
            C39897 * C16983 + C82921 * C17061 + C39896 * C5060 -
            C40114 * C4976 - C39896 * C5220 + C82934 * C5302 + C39895 * C4198 -
            C40113 * C4108 - C39895 * C4405 + C82941 * C4487) *
               C82523 * C82679 +
           (C70652 + C70651 + C70650 + C70649) * C82523 * C52324) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C37963 +
            (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
                C37887 +
            (C55448 - C55449 + C55450 - C55451) * C37964 +
            (C55758 - C55759 + C55760 - C55761) * C82639) *
               C82925 +
           ((C52461 - C52462 + C52463 - C52464) * C37963 +
            (C52683 - C52684 + C52685 - C52686) * C37887 +
            (C54487 - C54488 + C54489 - C54490) * C37964 +
            (C54818 - C54819 + C54820 - C54821) * C82639) *
               C82909 +
           ((C52469 - C52470 + C52471 - C52472) * C37963 +
            (C52687 - C52688 + C52689 - C52690) * C37887 +
            (C59142 - C59143 + C59144 - C59145) * C37964 +
            (C59444 - C59445 + C59446 - C59447) * C82639) *
               C82885) *
              C1149 +
          (((C52458 * C1155 - C52324 * C1265 + C52459 * C4108 -
             C82679 * C4299) *
                C37963 +
            (C52458 * C1317 - C52324 * C1416 + C52459 * C4405 -
             C82679 * C4593) *
                C37887 +
            (C52458 * C3348 - C52324 * C3527 + C52459 * C4976 -
             C82679 * C5140) *
                C37964 +
            (C52458 * C3613 - C52324 * C3779 + C52459 * C5220 -
             C82679 * C5377) *
                C82639) *
               C82925 +
           ((C52458 * C1154 - C52324 * C1266 + C52459 * C4109 -
             C82679 * C4300) *
                C37963 +
            (C52458 * C1318 - C52324 * C1417 + C52459 * C4406 -
             C82679 * C4594) *
                C37887 +
            (C52458 * C3347 - C52324 * C3528 + C52459 * C4975 -
             C82679 * C5141) *
                C37964 +
            (C52458 * C3614 - C52324 * C3781 + C52459 * C5221 -
             C82679 * C5378) *
                C82639) *
               C82909 +
           ((C52458 * C1153 - C52324 * C1267 + C52459 * C4110 -
             C82679 * C4301) *
                C37963 +
            (C52458 * C1319 - C52324 * C1418 + C52459 * C4407 -
             C82679 * C4595) *
                C37887 +
            (C52458 * C3346 - C52324 * C3529 + C52459 * C4974 -
             C82679 * C5142) *
                C37964 +
            (C52458 * C3615 - C52324 * C3783 + C52459 * C5222 -
             C82679 * C5379) *
                C82639) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
               C39895 +
           (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
               C82941 +
           (C55448 - C55449 + C55450 - C55451) * C39896 +
           (C55758 - C55759 + C55760 - C55761) * C82934 +
           (C55456 - C55457 + C55458 - C55459) * C39897 +
           (C55762 - C55763 + C55764 - C55765) * C82921 +
           (C69857 - C69858 + C69859 - C69860) * C39898 +
           (C70063 - C70064 + C70065 - C70066) * C82871) *
              C82523 * C1149 +
          ((C52458 * C1155 - C52324 * C1265 + C52459 * C4108 - C82679 * C4299) *
               C39895 +
           (C52458 * C1317 - C52324 * C1416 + C52459 * C4405 - C82679 * C4593) *
               C82941 +
           (C52458 * C3348 - C52324 * C3527 + C52459 * C4976 - C82679 * C5140) *
               C39896 +
           (C52458 * C3613 - C52324 * C3779 + C52459 * C5220 - C82679 * C5377) *
               C82934 +
           (C52458 * C3345 - C52324 * C3530 + C52459 * C16745 -
            C82679 * C16905) *
               C39897 +
           (C52458 * C3616 - C52324 * C3780 + C52459 * C16983 -
            C82679 * C17137) *
               C82921 +
           (C52458 * C16304 - C52324 * C16399 + C52459 * C17443 -
            C82679 * C17631) *
               C39898 +
           (C52458 * C16445 - C52324 * C16535 + C52459 * C17731 -
            C82679 * C17898) *
               C82871) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezx[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C52458 +
            (C82925 * C503 - C13259 * C497 + C82909 * C504 - C13261 * C498 +
             C82885 * C505 - C13263 * C499) *
                C52324 +
            (C27404 - C27405 + C27406 - C27407 + C27408 - C27409) * C52459 +
            (C27656 - C27657 + C27658 - C27659 + C27660 - C27661) * C82679) *
               C37887 +
           ((C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C52458 +
            (C14532 - C14533 + C14534 - C14535 + C14536 - C14537) * C52324 +
            (C67669 - C67670 + C67671 - C67672 + C67673 - C67674) * C52459 +
            (C67975 - C67976 + C67977 - C67978 + C67979 - C67980) * C82679) *
               C82639) *
              C1149 +
          (((C27405 - C27404 + C27407 - C27406 + C27409 - C27408) * C52458 +
            (C27657 - C27656 + C27659 - C27658 + C27661 - C27660) * C52324 +
            (C27417 - C27416 + C27419 - C27418 + C27421 - C27420) * C52459 +
            (C27663 - C27662 + C27665 - C27664 + C27667 - C27666) * C82679) *
               C37887 +
           ((C67670 - C67669 + C67672 - C67671 + C67674 - C67673) * C52458 +
            (C67976 - C67975 + C67978 - C67977 + C67980 - C67979) * C52324 +
            (C13259 * C4976 - C82925 * C4981 + C13261 * C4975 - C82909 * C4979 +
             C13263 * C4974 - C82885 * C4977) *
                C52459 +
            (C13259 * C5454 - C82925 * C5457 + C13261 * C5455 - C82909 * C5458 +
             C13263 * C5456 - C82885 * C5459) *
                C82679) *
               C82639) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C52458 +
            (C82523 * C503 - C15405 * C497) * C52324 +
            (C18542 - C18543) * C52459 + (C18822 - C18823) * C82679) *
               C82941 +
           ((C16004 - C16005) * C52458 + (C16154 - C16155) * C52324 +
            (C17734 - C17735) * C52459 + (C17988 - C17989) * C82679) *
               C82934 +
           ((C16008 - C16009) * C52458 + (C16156 - C16157) * C52324 +
            (C17738 - C17739) * C52459 + (C17992 - C17993) * C82679) *
               C82921 +
           ((C16012 - C16013) * C52458 + (C16158 - C16159) * C52324 +
            (C24647 - C24648) * C52459 + (C24853 - C24854) * C82679) *
               C82871) *
              C1149 +
          (((C18543 - C18542) * C52458 + (C18823 - C18822) * C52324 +
            (C18547 - C18546) * C52459 + (C18825 - C18824) * C82679) *
               C82941 +
           ((C17735 - C17734) * C52458 + (C17989 - C17988) * C52324 +
            (C17743 - C17742) * C52459 + (C17991 - C17990) * C82679) *
               C82934 +
           ((C17739 - C17738) * C52458 + (C17993 - C17992) * C52324 +
            (C17747 - C17746) * C52459 + (C17995 - C17994) * C82679) *
               C82921 +
           ((C24648 - C24647) * C52458 + (C24854 - C24853) * C52324 +
            (C15405 * C17443 - C82523 * C17444) * C52459 +
            (C15405 * C17985 - C82523 * C17986) * C82679) *
               C82871) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C37887 * C169 - C37963 * C102 + C82639 * C753 - C37964 * C695) *
                C52458 +
            (C37887 * C551 - C37963 * C497 + C82639 * C1055 - C37964 * C1003) *
                C52324 +
            (C43819 - C43820 + C43821 - C43822) * C52459 +
            (C44475 - C44476 + C44477 - C44478) * C82679) *
               C82925 +
           ((C37966 - C37967 + C37968 - C37969) * C52458 +
            (C38430 - C38431 + C38432 - C38433) * C52324 +
            (C41884 - C41885 + C41886 - C41887) * C52459 +
            (C42534 - C42535 + C42536 - C42537) * C82679) *
               C82909 +
           ((C37974 - C37975 + C37976 - C37977) * C52458 +
            (C38434 - C38435 + C38436 - C38437) * C52324 +
            (C46955 - C46956 + C46957 - C46958) * C52459 +
            (C47565 - C47566 + C47567 - C47568) * C82679) *
               C82885) *
              C1149 +
          (((C43820 - C43819 + C43822 - C43821) * C52458 +
            (C44476 - C44475 + C44478 - C44477) * C52324 +
            (C43828 - C43827 + C43830 - C43829) * C52459 +
            (C44480 - C44479 + C44482 - C44481) * C82679) *
               C82925 +
           ((C41885 - C41884 + C41887 - C41886) * C52458 +
            (C42535 - C42534 + C42537 - C42536) * C52324 +
            (C41893 - C41892 + C41895 - C41894) * C52459 +
            (C42539 - C42538 + C42541 - C42540) * C82679) *
               C82909 +
           ((C46956 - C46955 + C46958 - C46957) * C52458 +
            (C47566 - C47565 + C47568 - C47567) * C52324 +
            (C37963 * C4110 - C37887 * C4200 + C37964 * C4974 -
             C82639 * C5062) *
                C52459 +
            (C37963 * C4685 - C37887 * C4767 + C37964 * C5456 -
             C82639 * C5536) *
                C82679) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C82941 * C169 - C39895 * C102 + C82934 * C753 - C39896 * C695 +
            C82921 * C1746 - C39897 * C1653 + C82871 * C2653 - C39898 * C2527) *
               C52458 +
           (C82941 * C551 - C39895 * C497 + C82934 * C1055 - C39896 * C1003 +
            C82921 * C2323 - C39897 * C2241 + C82871 * C3175 - C39898 * C3083) *
               C52324 +
           (C70411 - C70412 + C70413 - C70414 + C70415 - C70416 + C70417 -
            C70418) *
               C52459 +
           (C70851 - C70852 + C70853 - C70854 + C70855 - C70856 + C70857 -
            C70858) *
               C82679) *
              C82523 * C1149 +
          ((C70412 - C70411 + C70414 - C70413 + C70416 - C70415 + C70418 -
            C70417) *
               C52458 +
           (C70852 - C70851 + C70854 - C70853 + C70856 - C70855 + C70858 -
            C70857) *
               C52324 +
           (C39895 * C4108 - C82941 * C4198 + C39896 * C4976 - C82934 * C5060 +
            C39897 * C16745 - C82921 * C16827 + C39898 * C17443 -
            C82871 * C17555) *
               C52459 +
           (C39895 * C4683 - C82941 * C4765 + C39896 * C5454 - C82934 * C5534 +
            C39897 * C17213 - C82921 * C17291 + C39898 * C17985 -
            C82871 * C18069) *
               C82679) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52458 * C240 - C52892 * C102 - C52458 * C497 + C52324 * C608 +
             C52459 * C1265 - C52893 * C1155 - C52459 * C1463 +
             C82679 * C1566) *
                C37887 +
            (C56084 + C56085) * C82639) *
               C82925 +
           ((C52931 + C52932) * C37887 + (C55150 + C55151) * C82639) * C82909 +
           ((C52933 + C52934) * C37887 + (C59754 + C59755) * C82639) * C82885) *
              C1149 -
          (((C52459 * C5142 - C52893 * C4974 - C52459 * C5456 + C82679 * C5611 +
             C52458 * C3529 - C52892 * C3346 - C52458 * C3861 +
             C52324 * C4026) *
                C82639 +
            (C52459 * C4301 - C52893 * C4110 - C52459 * C4685 + C82679 * C4856 +
             C52458 * C1267 - C52892 * C1153 - C52458 * C1465 +
             C52324 * C1564) *
                C37887) *
               C82885 +
           ((C52459 * C5141 - C52893 * C4975 - C52459 * C5455 + C82679 * C5612 +
             C52458 * C3528 - C52892 * C3347 - C52458 * C3860 +
             C52324 * C4028) *
                C82639 +
            (C52459 * C4300 - C52893 * C4109 - C52459 * C4684 + C82679 * C4855 +
             C52458 * C1266 - C52892 * C1154 - C52458 * C1464 +
             C52324 * C1565) *
                C37887) *
               C82909 +
           ((C52459 * C5140 - C52893 * C4976 - C52459 * C5454 + C82679 * C5613 +
             C52458 * C3527 - C52892 * C3348 - C52458 * C3859 +
             C52324 * C4030) *
                C82639 +
            (C52459 * C4299 - C52893 * C4108 - C52459 * C4683 + C82679 * C4854 +
             C52458 * C1265 - C52892 * C1155 - C52458 * C1463 +
             C52324 * C1566) *
                C37887) *
               C82925) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52458 * C240 - C52892 * C102 - C52458 * C497 + C52324 * C608 +
            C52459 * C1265 - C52893 * C1155 - C52459 * C1463 + C82679 * C1566) *
               C82941 +
           (C56084 + C56085) * C82934 + (C56086 + C56087) * C82921 +
           (C70277 + C70278) * C82871) *
              C82523 * C1149 -
          ((C52459 * C17631 - C52893 * C17443 - C52459 * C17985 +
            C82679 * C18144 + C52458 * C16399 - C52892 * C16304 -
            C52458 * C16579 + C52324 * C16670) *
               C82871 +
           (C52459 * C16905 - C52893 * C16745 - C52459 * C17213 +
            C82679 * C17367 + C52458 * C3530 - C52892 * C3345 - C52458 * C3862 +
            C52324 * C4029) *
               C82921 +
           (C52459 * C5140 - C52893 * C4976 - C52459 * C5454 + C82679 * C5613 +
            C52458 * C3527 - C52892 * C3348 - C52458 * C3859 + C52324 * C4030) *
               C82934 +
           (C52459 * C4299 - C52893 * C4108 - C52459 * C4683 + C82679 * C4854 +
            C52458 * C1265 - C52892 * C1155 - C52458 * C1463 + C52324 * C1566) *
               C82941) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C80224 * C108 - C19062 * C102 - C80224 * C109 + C82844 * C120 +
            C80205 * C110 - C19064 * C103 - C80205 * C111 + C82533 * C121) *
               C82592 * C19057 +
           (C80224 * C704 - C19062 * C695 - C80224 * C705 + C82844 * C710 +
            C80205 * C702 - C19064 * C694 - C80205 * C703 + C82533 * C709) *
               C82592 * C19058 +
           (C80224 * C1657 - C19062 * C1653 - C80224 * C1658 + C82844 * C1665 +
            C80205 * C1659 - C19064 * C1654 - C80205 * C1660 + C82533 * C1666) *
               C82592 * C19059 +
           (C80224 * C2532 - C19062 * C2527 - C80224 * C2533 + C82844 * C2536 +
            C80205 * C2530 - C19064 * C2526 - C80205 * C2531 + C82533 * C2535) *
               C82592 * C82871) *
              C82938 * C82939 * C90 -
          ((C80205 * C2528 - C19064 * C2525 - C80205 * C2529 + C82533 * C2534 +
            C80224 * C2530 - C19062 * C2526 - C80224 * C2531 + C82844 * C2535) *
               C82592 * C82871 +
           (C80205 * C1661 - C19064 * C1655 - C80205 * C1662 + C82533 * C1667 +
            C80224 * C1659 - C19062 * C1654 - C80224 * C1660 + C82844 * C1666) *
               C82592 * C19059 +
           (C80205 * C700 - C19064 * C693 - C80205 * C701 + C82533 * C708 +
            C80224 * C702 - C19062 * C694 - C80224 * C703 + C82844 * C709) *
               C82592 * C19058 +
           (C80205 * C112 - C19064 * C104 - C80205 * C113 + C82533 * C122 +
            C80224 * C110 - C19062 * C103 - C80224 * C111 + C82844 * C121) *
               C82592 * C19057) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6510 * C108 - C6511 * C102 - C6510 * C109 + C6504 * C120 +
            C6512 * C110 - C6513 * C103 - C6512 * C111 + C6505 * C121 +
            C6514 * C112 - C6515 * C104 - C6514 * C113 + C6506 * C122 +
            C6516 * C114 - C6517 * C105 - C6516 * C115 + C82862 * C123) *
               C82592 * C82863 +
           (C6510 * C704 - C6511 * C695 - C6510 * C705 + C6504 * C710 +
            C6512 * C702 - C6513 * C694 - C6512 * C703 + C6505 * C709 +
            C6514 * C700 - C6515 * C693 - C6514 * C701 + C6506 * C708 +
            C6516 * C698 - C6517 * C692 - C6516 * C699 + C82862 * C707) *
               C82592 * C82639) *
              C82938 * C82939 * C90 -
          ((C6516 * C696 - C6517 * C691 - C6516 * C697 + C82862 * C706 +
            C6514 * C698 - C6515 * C692 - C6514 * C699 + C6506 * C707 +
            C6512 * C700 - C6513 * C693 - C6512 * C701 + C6505 * C708 +
            C6510 * C702 - C6511 * C694 - C6510 * C703 + C6504 * C709) *
               C82592 * C82639 +
           (C6516 * C116 - C6517 * C106 - C6516 * C117 + C82862 * C124 +
            C6514 * C114 - C6515 * C105 - C6514 * C115 + C6506 * C123 +
            C6512 * C112 - C6513 * C104 - C6512 * C113 + C6505 * C122 +
            C6510 * C110 - C6511 * C103 - C6510 * C111 + C6504 * C121) *
               C82592 * C82863) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C80224 * C108 - C19062 * C102 - C80224 * C109 + C82844 * C120 +
             C80205 * C110 - C19064 * C103 - C80205 * C111 + C82533 * C121) *
                C25720 +
            (C22970 + C22971) * C25721 +
            (C80224 * C4112 - C19062 * C4108 - C80224 * C4113 + C82844 * C4120 +
             C80205 * C4114 - C19064 * C4109 - C80205 * C4115 +
             C82533 * C4121) *
                C82896) *
               C82863 +
           ((C19773 + C19774) * C25720 + (C22022 + C22023) * C25721 +
            (C80224 * C4981 - C19062 * C4976 - C80224 * C4982 + C82844 * C4985 +
             C80205 * C4979 - C19064 * C4975 - C80205 * C4980 +
             C82533 * C4984) *
                C82896) *
               C82639) *
              C82938 * C82939 * C90 -
          (((C80205 * C4977 - C19064 * C4974 - C80205 * C4978 + C82533 * C4983 +
             C80224 * C4979 - C19062 * C4975 - C80224 * C4980 +
             C82844 * C4984) *
                C82896 +
            (C80205 * C3355 - C19064 * C3346 - C80205 * C3356 + C82533 * C3364 +
             C80224 * C3357 - C19062 * C3347 - C80224 * C3358 +
             C82844 * C3365) *
                C25721 +
            (C80205 * C700 - C19064 * C693 - C80205 * C701 + C82533 * C708 +
             C80224 * C702 - C19062 * C694 - C80224 * C703 + C82844 * C709) *
                C25720) *
               C82639 +
           ((C80205 * C4116 - C19064 * C4110 - C80205 * C4117 + C82533 * C4122 +
             C80224 * C4114 - C19062 * C4109 - C80224 * C4115 +
             C82844 * C4121) *
                C82896 +
            (C80205 * C1160 - C19064 * C1153 - C80205 * C1161 + C82533 * C1168 +
             C80224 * C1162 - C19062 * C1154 - C80224 * C1163 +
             C82844 * C1169) *
                C25721 +
            (C80205 * C112 - C19064 * C104 - C80205 * C113 + C82533 * C122 +
             C80224 * C110 - C19062 * C103 - C80224 * C111 + C82844 * C121) *
                C25720) *
               C82863) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19057 * C169 - C19131 * C102 + C19058 * C753 - C19132 * C695 +
            C19059 * C1746 - C19133 * C1653 + C82871 * C2653 - C19134 * C2527) *
               C80224 +
           (C19057 * C175 - C19131 * C109 + C19058 * C758 - C19132 * C705 +
            C19059 * C1750 - C19133 * C1658 + C82871 * C2656 - C19134 * C2533) *
               C82844 +
           (C19136 - C19137 + C19138 - C19139 + C19140 - C19141 + C19142 -
            C19143) *
               C80205 +
           (C19144 - C19145 + C19146 - C19147 + C19148 - C19149 + C19150 -
            C19151) *
               C82533) *
              C82592 * C82938 * C82939 * C90 +
          ((C19137 - C19136 + C19139 - C19138 + C19141 - C19140 + C19143 -
            C19142) *
               C80224 +
           (C19145 - C19144 + C19147 - C19146 + C19149 - C19148 + C19151 -
            C19150) *
               C82844 +
           (C19131 * C104 - C19057 * C171 + C19132 * C693 - C19058 * C755 +
            C19133 * C1655 - C19059 * C1748 + C19134 * C2525 - C82871 * C2655) *
               C80205 +
           (C19131 * C113 - C19057 * C177 + C19132 * C701 - C19058 * C760 +
            C19133 * C1662 - C19059 * C1752 + C19134 * C2529 - C82871 * C2658) *
               C82533) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
               C6510 +
           (C82863 * C175 - C6584 * C109 + C82639 * C758 - C6585 * C705) *
               C6504 +
           (C6587 - C6588 + C6589 - C6590) * C6512 +
           (C6591 - C6592 + C6593 - C6594) * C6505 +
           (C6595 - C6596 + C6597 - C6598) * C6514 +
           (C6599 - C6600 + C6601 - C6602) * C6506 +
           (C6603 - C6604 + C6605 - C6606) * C6516 +
           (C6607 - C6608 + C6609 - C6610) * C82862) *
              C82592 * C82938 * C82939 * C90 +
          ((C6588 - C6587 + C6590 - C6589) * C6510 +
           (C6592 - C6591 + C6594 - C6593) * C6504 +
           (C6596 - C6595 + C6598 - C6597) * C6512 +
           (C6600 - C6599 + C6602 - C6601) * C6505 +
           (C6604 - C6603 + C6606 - C6605) * C6514 +
           (C6608 - C6607 + C6610 - C6609) * C6506 +
           (C6584 * C106 - C82863 * C173 + C6585 * C691 - C82639 * C757) *
               C6516 +
           (C6584 * C117 - C82863 * C179 + C6585 * C697 - C82639 * C762) *
               C82862) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C80224 +
            (C82863 * C175 - C6584 * C109 + C82639 * C758 - C6585 * C705) *
                C82844 +
            (C6587 - C6588 + C6589 - C6590) * C80205 +
            (C6591 - C6592 + C6593 - C6594) * C82533) *
               C25720 +
           ((C12468 - C12469 + C12470 - C12471) * C80224 +
            (C12472 - C12473 + C12474 - C12475) * C82844 +
            (C10535 - C10536 + C10537 - C10538) * C80205 +
            (C10539 - C10540 + C10541 - C10542) * C82533) *
               C25721 +
           ((C82863 * C4198 - C6584 * C4108 + C82639 * C5060 - C6585 * C4976) *
                C80224 +
            (C82863 * C4202 - C6584 * C4113 + C82639 * C5063 - C6585 * C4982) *
                C82844 +
            (C31441 - C31442 + C31443 - C31444) * C80205 +
            (C31445 - C31446 + C31447 - C31448) * C82533) *
               C82896) *
              C82938 * C82939 * C90 +
          (((C6588 - C6587 + C6590 - C6589) * C80224 +
            (C6592 - C6591 + C6594 - C6593) * C82844 +
            (C6596 - C6595 + C6598 - C6597) * C80205 +
            (C6600 - C6599 + C6602 - C6601) * C82533) *
               C25720 +
           ((C10536 - C10535 + C10538 - C10537) * C80224 +
            (C10540 - C10539 + C10542 - C10541) * C82844 +
            (C10544 - C10543 + C10546 - C10545) * C80205 +
            (C10548 - C10547 + C10550 - C10549) * C82533) *
               C25721 +
           ((C31442 - C31441 + C31444 - C31443) * C80224 +
            (C31446 - C31445 + C31448 - C31447) * C82844 +
            (C6584 * C4110 - C82863 * C4200 + C6585 * C4974 - C82639 * C5062) *
                C80205 +
            (C6584 * C4117 - C82863 * C4204 + C6585 * C4978 - C82639 * C5065) *
                C82533) *
               C82896) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C80224 +
            (C82592 * C246 - C239 * C109) * C82844 + (C253 - C254) * C80205 +
            (C255 - C256) * C82533) *
               C19057 +
           ((C2740 - C2741) * C80224 + (C2742 - C2743) * C82844 +
            (C1861 - C1862) * C80205 + (C1863 - C1864) * C82533) *
               C19058 +
           ((C2744 - C2745) * C80224 + (C2746 - C2747) * C82844 +
            (C1869 - C1870) * C80205 + (C1871 - C1872) * C82533) *
               C19059 +
           ((C15952 - C15953) * C80224 + (C15954 - C15955) * C82844 +
            (C19218 - C19219) * C80205 + (C19220 - C19221) * C82533) *
               C82871) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C80224 + (C256 - C255) * C82844 +
            (C258 - C257) * C80205 + (C260 - C259) * C82533) *
               C19057 +
           ((C1862 - C1861) * C80224 + (C1864 - C1863) * C82844 +
            (C1866 - C1865) * C80205 + (C1868 - C1867) * C82533) *
               C19058 +
           ((C1870 - C1869) * C80224 + (C1872 - C1871) * C82844 +
            (C1874 - C1873) * C80205 + (C1876 - C1875) * C82533) *
               C19059 +
           ((C19219 - C19218) * C80224 + (C19221 - C19220) * C82844 +
            (C239 * C2525 - C82592 * C2735) * C80205 +
            (C239 * C2529 - C82592 * C2738) * C82533) *
               C82871) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C6510 +
            (C82592 * C246 - C239 * C109) * C6504 + (C253 - C254) * C6512 +
            (C255 - C256) * C6505 + (C257 - C258) * C6514 +
            (C259 - C260) * C6506 + (C261 - C262) * C6516 +
            (C263 - C264) * C82862) *
               C82863 +
           ((C2740 - C2741) * C6510 + (C2742 - C2743) * C6504 +
            (C1861 - C1862) * C6512 + (C1863 - C1864) * C6505 +
            (C1865 - C1866) * C6514 + (C1867 - C1868) * C6506 +
            (C6677 - C6678) * C6516 + (C6679 - C6680) * C82862) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C6510 + (C256 - C255) * C6504 +
            (C258 - C257) * C6512 + (C260 - C259) * C6505 +
            (C262 - C261) * C6514 + (C264 - C263) * C6506 +
            (C266 - C265) * C6516 + (C268 - C267) * C82862) *
               C82863 +
           ((C1862 - C1861) * C6510 + (C1864 - C1863) * C6504 +
            (C1866 - C1865) * C6512 + (C1868 - C1867) * C6505 +
            (C6678 - C6677) * C6514 + (C6680 - C6679) * C6506 +
            (C239 * C691 - C82592 * C809) * C6516 +
            (C239 * C697 - C82592 * C814) * C82862) *
               C82639) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
             C82896 * C4299 - C25873 * C4108) *
                C80224 +
            (C25720 * C246 - C25871 * C109 + C25721 * C1270 - C25872 * C1165 +
             C82896 * C4303 - C25873 * C4113) *
                C82844 +
            (C25875 - C25876 + C25877 - C25878 + C25879 - C25880) * C80205 +
            (C25881 - C25882 + C25883 - C25884 + C25885 - C25886) * C82533) *
               C82863 +
           ((C28710 - C28711 + C28712 - C28713 + C28714 - C28715) * C80224 +
            (C28716 - C28717 + C28718 - C28719 + C28720 - C28721) * C82844 +
            (C31547 - C31548 + C31549 - C31550 + C31551 - C31552) * C80205 +
            (C31553 - C31554 + C31555 - C31556 + C31557 - C31558) * C82533) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C25876 - C25875 + C25878 - C25877 + C25880 - C25879) * C80224 +
            (C25882 - C25881 + C25884 - C25883 + C25886 - C25885) * C82844 +
            (C25888 - C25887 + C25890 - C25889 + C25892 - C25891) * C80205 +
            (C25894 - C25893 + C25896 - C25895 + C25898 - C25897) * C82533) *
               C82863 +
           ((C31548 - C31547 + C31550 - C31549 + C31552 - C31551) * C80224 +
            (C31554 - C31553 + C31556 - C31555 + C31558 - C31557) * C82844 +
            (C25871 * C693 - C25720 * C807 + C25872 * C3346 - C25721 * C3529 +
             C25873 * C4974 - C82896 * C5142) *
                C80205 +
            (C25871 * C701 - C25720 * C812 + C25872 * C3356 - C25721 * C3535 +
             C25873 * C4978 - C82896 * C5145) *
                C82533) *
               C82639) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
               C19131 +
           (C82844 * C316 - C80224 * C310 + C82533 * C317 - C80205 * C311) *
               C19057 +
           (C82844 * C704 - C80224 * C695 + C82533 * C702 - C80205 * C694) *
               C19132 +
           (C82844 * C862 - C80224 * C857 + C82533 * C863 - C80205 * C858) *
               C19058 +
           (C82844 * C1657 - C80224 * C1653 + C82533 * C1659 - C80205 * C1654) *
               C19133 +
           (C82844 * C1954 - C80224 * C1950 + C82533 * C1955 - C80205 * C1951) *
               C19059 +
           (C82844 * C2532 - C80224 * C2527 + C82533 * C2530 - C80205 * C2526) *
               C19134 +
           (C82844 * C2824 - C80224 * C2821 + C82533 * C2825 - C80205 * C2822) *
               C82871) *
              C82592 * C82938 * C82939 * C90 +
          ((C80224 * C103 - C82844 * C110 + C80205 * C104 - C82533 * C112) *
               C19131 +
           (C80224 * C311 - C82844 * C317 + C80205 * C312 - C82533 * C318) *
               C19057 +
           (C80224 * C694 - C82844 * C702 + C80205 * C693 - C82533 * C700) *
               C19132 +
           (C80224 * C858 - C82844 * C863 + C80205 * C859 - C82533 * C864) *
               C19058 +
           (C80224 * C1654 - C82844 * C1659 + C80205 * C1655 - C82533 * C1661) *
               C19133 +
           (C80224 * C1951 - C82844 * C1955 + C80205 * C1952 - C82533 * C1956) *
               C19059 +
           (C80224 * C2526 - C82844 * C2530 + C80205 * C2525 - C82533 * C2528) *
               C19134 +
           (C80224 * C2822 - C82844 * C2825 + C80205 * C2823 - C82533 * C2826) *
               C82871) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6504 * C108 - C6510 * C102 + C6505 * C110 - C6512 * C103 +
            C6506 * C112 - C6514 * C104 + C82862 * C114 - C6516 * C105) *
               C6584 +
           (C6504 * C316 - C6510 * C310 + C6505 * C317 - C6512 * C311 +
            C6506 * C318 - C6514 * C312 + C82862 * C319 - C6516 * C313) *
               C82863 +
           (C6504 * C704 - C6510 * C695 + C6505 * C702 - C6512 * C694 +
            C6506 * C700 - C6514 * C693 + C82862 * C698 - C6516 * C692) *
               C6585 +
           (C6504 * C862 - C6510 * C857 + C6505 * C863 - C6512 * C858 +
            C6506 * C864 - C6514 * C859 + C82862 * C865 - C6516 * C860) *
               C82639) *
              C82592 * C82938 * C82939 * C90 +
          ((C6510 * C103 - C6504 * C110 + C6512 * C104 - C6505 * C112 +
            C6514 * C105 - C6506 * C114 + C6516 * C106 - C82862 * C116) *
               C6584 +
           (C6510 * C311 - C6504 * C317 + C6512 * C312 - C6505 * C318 +
            C6514 * C313 - C6506 * C319 + C6516 * C314 - C82862 * C320) *
               C82863 +
           (C6510 * C694 - C6504 * C702 + C6512 * C693 - C6505 * C700 +
            C6514 * C692 - C6506 * C698 + C6516 * C691 - C82862 * C696) *
               C6585 +
           (C6510 * C858 - C6504 * C863 + C6512 * C859 - C6505 * C864 +
            C6514 * C860 - C6506 * C865 + C6516 * C861 - C82862 * C866) *
               C82639) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C6584 +
            (C82844 * C316 - C80224 * C310 + C82533 * C317 - C80205 * C311) *
                C82863 +
            (C19977 - C19978 + C19979 - C19980) * C6585 +
            (C19981 - C19982 + C19983 - C19984) * C82639) *
               C25720 +
           ((C23266 - C23267 + C23268 - C23269) * C6584 +
            (C23270 - C23271 + C23272 - C23273) * C82863 +
            (C22328 - C22329 + C22330 - C22331) * C6585 +
            (C22332 - C22333 + C22334 - C22335) * C82639) *
               C25721 +
           ((C82844 * C4112 - C80224 * C4108 + C82533 * C4114 -
             C80205 * C4109) *
                C6584 +
            (C82844 * C4409 - C80224 * C4405 + C82533 * C4410 -
             C80205 * C4406) *
                C82863 +
            (C82844 * C4981 - C80224 * C4976 + C82533 * C4979 -
             C80205 * C4975) *
                C6585 +
            (C82844 * C5223 - C80224 * C5220 + C82533 * C5224 -
             C80205 * C5221) *
                C82639) *
               C82896) *
              C82938 * C82939 * C90 +
          (((C80224 * C103 - C82844 * C110 + C80205 * C104 - C82533 * C112) *
                C6584 +
            (C80224 * C311 - C82844 * C317 + C80205 * C312 - C82533 * C318) *
                C82863 +
            (C80224 * C694 - C82844 * C702 + C80205 * C693 - C82533 * C700) *
                C6585 +
            (C80224 * C858 - C82844 * C863 + C80205 * C859 - C82533 * C864) *
                C82639) *
               C25720 +
           ((C80224 * C1154 - C82844 * C1162 + C80205 * C1153 -
             C82533 * C1160) *
                C6584 +
            (C80224 * C1318 - C82844 * C1323 + C80205 * C1319 -
             C82533 * C1324) *
                C82863 +
            (C80224 * C3347 - C82844 * C3357 + C80205 * C3346 -
             C82533 * C3355) *
                C6585 +
            (C80224 * C3614 - C82844 * C3620 + C80205 * C3615 -
             C82533 * C3621) *
                C82639) *
               C25721 +
           ((C80224 * C4109 - C82844 * C4114 + C80205 * C4110 -
             C82533 * C4116) *
                C6584 +
            (C80224 * C4406 - C82844 * C4410 + C80205 * C4407 -
             C82533 * C4411) *
                C82863 +
            (C80224 * C4975 - C82844 * C4979 + C80205 * C4974 -
             C82533 * C4977) *
                C6585 +
            (C80224 * C5221 - C82844 * C5224 + C80205 * C5222 -
             C82533 * C5225) *
                C82639) *
               C82896) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19131 * C169 - C19353 * C102 - C19131 * C310 + C19057 * C365 +
            C19132 * C753 - C19354 * C695 - C19132 * C857 + C19058 * C913 +
            C19133 * C1746 - C19355 * C1653 - C19133 * C1950 + C19059 * C2035 +
            C19134 * C2653 - C19356 * C2527 - C19134 * C2821 + C82871 * C2927) *
               C82844 +
           (C19382 + C19383 + C19384 + C19385) * C82533) *
              C82592 * C82938 * C82939 * C90 -
          ((C19134 * C2655 - C19356 * C2525 - C19134 * C2823 + C82871 * C2925 +
            C19133 * C1748 - C19355 * C1655 - C19133 * C1952 + C19059 * C2037 +
            C19132 * C755 - C19354 * C693 - C19132 * C859 + C19058 * C911 +
            C19131 * C171 - C19353 * C104 - C19131 * C312 + C19057 * C367) *
               C82533 +
           (C19385 + C19384 + C19383 + C19382) * C82844) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6584 * C169 - C6812 * C102 - C6584 * C310 + C82863 * C365 +
            C6585 * C753 - C6813 * C695 - C6585 * C857 + C82639 * C913) *
               C6504 +
           (C6851 + C6852) * C6505 + (C6853 + C6854) * C6506 +
           (C6855 + C6856) * C82862) *
              C82592 * C82938 * C82939 * C90 -
          ((C6585 * C757 - C6813 * C691 - C6585 * C861 + C82639 * C909 +
            C6584 * C173 - C6812 * C106 - C6584 * C314 + C82863 * C369) *
               C82862 +
           (C6856 + C6855) * C6506 + (C6854 + C6853) * C6505 +
           (C6852 + C6851) * C6504) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C6584 * C169 - C6812 * C102 - C6584 * C310 + C82863 * C365 +
             C6585 * C753 - C6813 * C695 - C6585 * C857 + C82639 * C913) *
                C82844 +
            (C6851 + C6852) * C82533) *
               C25720 +
           ((C12782 + C12783) * C82844 + (C10885 + C10886) * C82533) * C25721 +
           ((C6584 * C4198 - C6812 * C4108 - C6584 * C4405 + C82863 * C4487 +
             C6585 * C5060 - C6813 * C4976 - C6585 * C5220 + C82639 * C5302) *
                C82844 +
            (C31767 + C31768) * C82533) *
               C82896) *
              C82938 * C82939 * C90 -
          (((C6585 * C5062 - C6813 * C4974 - C6585 * C5222 + C82639 * C5300 +
             C6584 * C4200 - C6812 * C4110 - C6584 * C4407 + C82863 * C4489) *
                C82533 +
            (C31768 + C31767) * C82844) *
               C82896 +
           ((C10888 + C10887) * C82533 + (C10886 + C10885) * C82844) * C25721 +
           ((C6854 + C6853) * C82533 + (C6852 + C6851) * C82844) * C25720) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C19131 +
            (C82592 * C441 - C239 * C310) * C19057 + (C2740 - C2741) * C19132 +
            (C3006 - C3007) * C19058 + (C2744 - C2745) * C19133 +
            (C3008 - C3009) * C19059 + (C15952 - C15953) * C19134 +
            (C16106 - C16107) * C82871) *
               C82844 +
           ((C253 - C254) * C19131 + (C448 - C449) * C19057 +
            (C1861 - C1862) * C19132 + (C2160 - C2161) * C19058 +
            (C1869 - C1870) * C19133 + (C2162 - C2163) * C19059 +
            (C19218 - C19219) * C19134 + (C19452 - C19453) * C82871) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C19131 + (C449 - C448) * C19057 +
            (C1862 - C1861) * C19132 + (C2161 - C2160) * C19058 +
            (C1870 - C1869) * C19133 + (C2163 - C2162) * C19059 +
            (C19219 - C19218) * C19134 + (C19453 - C19452) * C82871) *
               C82844 +
           ((C258 - C257) * C19131 + (C451 - C450) * C19057 +
            (C1866 - C1865) * C19132 + (C2165 - C2164) * C19058 +
            (C1874 - C1873) * C19133 + (C2167 - C2166) * C19059 +
            (C239 * C2525 - C82592 * C2735) * C19134 +
            (C239 * C2823 - C82592 * C3004) * C82871) *
               C82533) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C6584 +
            (C82592 * C441 - C239 * C310) * C82863 + (C2740 - C2741) * C6585 +
            (C3006 - C3007) * C82639) *
               C6504 +
           ((C253 - C254) * C6584 + (C448 - C449) * C82863 +
            (C1861 - C1862) * C6585 + (C2160 - C2161) * C82639) *
               C6505 +
           ((C257 - C258) * C6584 + (C450 - C451) * C82863 +
            (C1865 - C1866) * C6585 + (C2164 - C2165) * C82639) *
               C6506 +
           ((C261 - C262) * C6584 + (C452 - C453) * C82863 +
            (C6677 - C6678) * C6585 + (C6923 - C6924) * C82639) *
               C82862) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C6584 + (C449 - C448) * C82863 +
            (C1862 - C1861) * C6585 + (C2161 - C2160) * C82639) *
               C6504 +
           ((C258 - C257) * C6584 + (C451 - C450) * C82863 +
            (C1866 - C1865) * C6585 + (C2165 - C2164) * C82639) *
               C6505 +
           ((C262 - C261) * C6584 + (C453 - C452) * C82863 +
            (C6678 - C6677) * C6585 + (C6924 - C6923) * C82639) *
               C6506 +
           ((C266 - C265) * C6584 + (C455 - C454) * C82863 +
            (C239 * C691 - C82592 * C809) * C6585 +
            (C239 * C861 - C82592 * C960) * C82639) *
               C82862) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
             C82896 * C4299 - C25873 * C4108) *
                C6584 +
            (C25720 * C441 - C25871 * C310 + C25721 * C1416 - C25872 * C1317 +
             C82896 * C4593 - C25873 * C4405) *
                C82863 +
            (C28710 - C28711 + C28712 - C28713 + C28714 - C28715) * C6585 +
            (C28956 - C28957 + C28958 - C28959 + C28960 - C28961) * C82639) *
               C82844 +
           ((C25875 - C25876 + C25877 - C25878 + C25879 - C25880) * C6584 +
            (C26121 - C26122 + C26123 - C26124 + C26125 - C26126) * C82863 +
            (C31547 - C31548 + C31549 - C31550 + C31551 - C31552) * C6585 +
            (C31867 - C31868 + C31869 - C31870 + C31871 - C31872) * C82639) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C25876 - C25875 + C25878 - C25877 + C25880 - C25879) * C6584 +
            (C26122 - C26121 + C26124 - C26123 + C26126 - C26125) * C82863 +
            (C31548 - C31547 + C31550 - C31549 + C31552 - C31551) * C6585 +
            (C31868 - C31867 + C31870 - C31869 + C31872 - C31871) * C82639) *
               C82844 +
           ((C25888 - C25887 + C25890 - C25889 + C25892 - C25891) * C6584 +
            (C26128 - C26127 + C26130 - C26129 + C26132 - C26131) * C82863 +
            (C25871 * C693 - C25720 * C807 + C25872 * C3346 - C25721 * C3529 +
             C25873 * C4974 - C82896 * C5142) *
                C6585 +
            (C25871 * C859 - C25720 * C958 + C25872 * C3615 - C25721 * C3783 +
             C25873 * C5222 - C82896 * C5379) *
                C82639) *
               C82533) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezx[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C239 +
            (C82844 * C503 - C80224 * C497 + C82533 * C504 - C80205 * C498) *
                C82592) *
               C19057 +
           ((C82844 * C704 - C80224 * C695 + C82533 * C702 - C80205 * C694) *
                C239 +
            (C82844 * C1008 - C80224 * C1003 + C82533 * C1009 -
             C80205 * C1004) *
                C82592) *
               C19058 +
           ((C82844 * C1657 - C80224 * C1653 + C82533 * C1659 -
             C80205 * C1654) *
                C239 +
            (C82844 * C2245 - C80224 * C2241 + C82533 * C2246 -
             C80205 * C2242) *
                C82592) *
               C19059 +
           ((C82844 * C2532 - C80224 * C2527 + C82533 * C2530 -
             C80205 * C2526) *
                C239 +
            (C82844 * C3086 - C80224 * C3083 + C82533 * C3087 -
             C80205 * C3084) *
                C82592) *
               C82871) *
              C82938 * C82939 * C90 +
          (((C80224 * C103 - C82844 * C110 + C80205 * C104 - C82533 * C112) *
                C239 +
            (C80224 * C498 - C82844 * C504 + C80205 * C499 - C82533 * C505) *
                C82592) *
               C19057 +
           ((C80224 * C694 - C82844 * C702 + C80205 * C693 - C82533 * C700) *
                C239 +
            (C80224 * C1004 - C82844 * C1009 + C80205 * C1005 -
             C82533 * C1010) *
                C82592) *
               C19058 +
           ((C80224 * C1654 - C82844 * C1659 + C80205 * C1655 -
             C82533 * C1661) *
                C239 +
            (C80224 * C2242 - C82844 * C2246 + C80205 * C2243 -
             C82533 * C2247) *
                C82592) *
               C19059 +
           ((C80224 * C2526 - C82844 * C2530 + C80205 * C2525 -
             C82533 * C2528) *
                C239 +
            (C80224 * C3084 - C82844 * C3087 + C80205 * C3085 -
             C82533 * C3088) *
                C82592) *
               C82871) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6504 * C108 - C6510 * C102 + C6505 * C110 - C6512 * C103 +
             C6506 * C112 - C6514 * C104 + C82862 * C114 - C6516 * C105) *
                C239 +
            (C6504 * C503 - C6510 * C497 + C6505 * C504 - C6512 * C498 +
             C6506 * C505 - C6514 * C499 + C82862 * C506 - C6516 * C500) *
                C82592) *
               C82863 +
           ((C6504 * C704 - C6510 * C695 + C6505 * C702 - C6512 * C694 +
             C6506 * C700 - C6514 * C693 + C82862 * C698 - C6516 * C692) *
                C239 +
            (C6504 * C1008 - C6510 * C1003 + C6505 * C1009 - C6512 * C1004 +
             C6506 * C1010 - C6514 * C1005 + C82862 * C1011 - C6516 * C1006) *
                C82592) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C6510 * C103 - C6504 * C110 + C6512 * C104 - C6505 * C112 +
             C6514 * C105 - C6506 * C114 + C6516 * C106 - C82862 * C116) *
                C239 +
            (C6510 * C498 - C6504 * C504 + C6512 * C499 - C6505 * C505 +
             C6514 * C500 - C6506 * C506 + C6516 * C501 - C82862 * C507) *
                C82592) *
               C82863 +
           ((C6510 * C694 - C6504 * C702 + C6512 * C693 - C6505 * C700 +
             C6514 * C692 - C6506 * C698 + C6516 * C691 - C82862 * C696) *
                C239 +
            (C6510 * C1004 - C6504 * C1009 + C6512 * C1005 - C6505 * C1010 +
             C6514 * C1006 - C6506 * C1011 + C6516 * C1007 - C82862 * C1012) *
                C82592) *
               C82639) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C25871 +
            (C82844 * C503 - C80224 * C497 + C82533 * C504 - C80205 * C498) *
                C25720 +
            (C23266 - C23267 + C23268 - C23269) * C25872 +
            (C23568 - C23569 + C23570 - C23571) * C25721 +
            (C82844 * C4112 - C80224 * C4108 + C82533 * C4114 -
             C80205 * C4109) *
                C25873 +
            (C82844 * C4687 - C80224 * C4683 + C82533 * C4688 -
             C80205 * C4684) *
                C82896) *
               C82863 +
           ((C19977 - C19978 + C19979 - C19980) * C25871 +
            (C20199 - C20200 + C20201 - C20202) * C25720 +
            (C22328 - C22329 + C22330 - C22331) * C25872 +
            (C22642 - C22643 + C22644 - C22645) * C25721 +
            (C82844 * C4981 - C80224 * C4976 + C82533 * C4979 -
             C80205 * C4975) *
                C25873 +
            (C82844 * C5457 - C80224 * C5454 + C82533 * C5458 -
             C80205 * C5455) *
                C82896) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C80224 * C103 - C82844 * C110 + C80205 * C104 - C82533 * C112) *
                C25871 +
            (C80224 * C498 - C82844 * C504 + C80205 * C499 - C82533 * C505) *
                C25720 +
            (C80224 * C1154 - C82844 * C1162 + C80205 * C1153 -
             C82533 * C1160) *
                C25872 +
            (C80224 * C1464 - C82844 * C1469 + C80205 * C1465 -
             C82533 * C1470) *
                C25721 +
            (C80224 * C4109 - C82844 * C4114 + C80205 * C4110 -
             C82533 * C4116) *
                C25873 +
            (C80224 * C4684 - C82844 * C4688 + C80205 * C4685 -
             C82533 * C4689) *
                C82896) *
               C82863 +
           ((C80224 * C694 - C82844 * C702 + C80205 * C693 - C82533 * C700) *
                C25871 +
            (C80224 * C1004 - C82844 * C1009 + C80205 * C1005 -
             C82533 * C1010) *
                C25720 +
            (C80224 * C3347 - C82844 * C3357 + C80205 * C3346 -
             C82533 * C3355) *
                C25872 +
            (C80224 * C3860 - C82844 * C3866 + C80205 * C3861 -
             C82533 * C3867) *
                C25721 +
            (C80224 * C4975 - C82844 * C4979 + C80205 * C4974 -
             C82533 * C4977) *
                C25873 +
            (C80224 * C5455 - C82844 * C5458 + C80205 * C5456 -
             C82533 * C5459) *
                C82896) *
               C82639) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19057 * C169 - C19131 * C102 + C19058 * C753 - C19132 * C695 +
             C19059 * C1746 - C19133 * C1653 + C82871 * C2653 -
             C19134 * C2527) *
                C239 +
            (C19057 * C551 - C19131 * C497 + C19058 * C1055 - C19132 * C1003 +
             C19059 * C2323 - C19133 * C2241 + C82871 * C3175 -
             C19134 * C3083) *
                C82592) *
               C82844 +
           ((C19136 - C19137 + C19138 - C19139 + C19140 - C19141 + C19142 -
             C19143) *
                C239 +
            (C19586 - C19587 + C19588 - C19589 + C19590 - C19591 + C19592 -
             C19593) *
                C82592) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C19137 - C19136 + C19139 - C19138 + C19141 - C19140 + C19143 -
             C19142) *
                C239 +
            (C19587 - C19586 + C19589 - C19588 + C19591 - C19590 + C19593 -
             C19592) *
                C82592) *
               C82844 +
           ((C19131 * C104 - C19057 * C171 + C19132 * C693 - C19058 * C755 +
             C19133 * C1655 - C19059 * C1748 + C19134 * C2525 -
             C82871 * C2655) *
                C239 +
            (C19131 * C499 - C19057 * C553 + C19132 * C1005 - C19058 * C1057 +
             C19133 * C2243 - C19059 * C2325 + C19134 * C3085 -
             C82871 * C3177) *
                C82592) *
               C82533) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C239 +
            (C82863 * C551 - C6584 * C497 + C82639 * C1055 - C6585 * C1003) *
                C82592) *
               C6504 +
           ((C6587 - C6588 + C6589 - C6590) * C239 +
            (C7057 - C7058 + C7059 - C7060) * C82592) *
               C6505 +
           ((C6595 - C6596 + C6597 - C6598) * C239 +
            (C7061 - C7062 + C7063 - C7064) * C82592) *
               C6506 +
           ((C6603 - C6604 + C6605 - C6606) * C239 +
            (C7065 - C7066 + C7067 - C7068) * C82592) *
               C82862) *
              C82938 * C82939 * C90 +
          (((C6588 - C6587 + C6590 - C6589) * C239 +
            (C7058 - C7057 + C7060 - C7059) * C82592) *
               C6504 +
           ((C6596 - C6595 + C6598 - C6597) * C239 +
            (C7062 - C7061 + C7064 - C7063) * C82592) *
               C6505 +
           ((C6604 - C6603 + C6606 - C6605) * C239 +
            (C7066 - C7065 + C7068 - C7067) * C82592) *
               C6506 +
           ((C6584 * C106 - C82863 * C173 + C6585 * C691 - C82639 * C757) *
                C239 +
            (C6584 * C501 - C82863 * C555 + C6585 * C1007 - C82639 * C1059) *
                C82592) *
               C82862) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C25871 +
            (C82863 * C551 - C6584 * C497 + C82639 * C1055 - C6585 * C1003) *
                C25720 +
            (C12468 - C12469 + C12470 - C12471) * C25872 +
            (C13078 - C13079 + C13080 - C13081) * C25721 +
            (C82863 * C4198 - C6584 * C4108 + C82639 * C5060 - C6585 * C4976) *
                C25873 +
            (C82863 * C4765 - C6584 * C4683 + C82639 * C5534 - C6585 * C5454) *
                C82896) *
               C82844 +
           ((C6587 - C6588 + C6589 - C6590) * C25871 +
            (C7057 - C7058 + C7059 - C7060) * C25720 +
            (C10535 - C10536 + C10537 - C10538) * C25872 +
            (C11191 - C11192 + C11193 - C11194) * C25721 +
            (C31441 - C31442 + C31443 - C31444) * C25873 +
            (C32069 - C32070 + C32071 - C32072) * C82896) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C6588 - C6587 + C6590 - C6589) * C25871 +
            (C7058 - C7057 + C7060 - C7059) * C25720 +
            (C10536 - C10535 + C10538 - C10537) * C25872 +
            (C11192 - C11191 + C11194 - C11193) * C25721 +
            (C31442 - C31441 + C31444 - C31443) * C25873 +
            (C32070 - C32069 + C32072 - C32071) * C82896) *
               C82844 +
           ((C6596 - C6595 + C6598 - C6597) * C25871 +
            (C7062 - C7061 + C7064 - C7063) * C25720 +
            (C10544 - C10543 + C10546 - C10545) * C25872 +
            (C11196 - C11195 + C11198 - C11197) * C25721 +
            (C6584 * C4110 - C82863 * C4200 + C6585 * C4974 - C82639 * C5062) *
                C25873 +
            (C6584 * C4685 - C82863 * C4767 + C6585 * C5456 - C82639 * C5536) *
                C82896) *
               C82533) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C19057 +
            C3268 * C19058 + C3269 * C19059 + C16260 * C82871) *
               C82844 +
           (C19660 + C19661 + C19662 + C19670) * C82533) *
              C82938 * C82939 * C90 -
          (((C239 * C2735 - C607 * C2525 - C239 * C3085 + C82592 * C3252) *
                C82871 +
            C2447 * C19059 + C2446 * C19058 + C640 * C19057) *
               C82533 +
           (C19670 + C19662 + C19661 + C19660) * C82844) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82863 +
            C3268 * C82639) *
               C6504 +
           (C7135 + C7136) * C6505 + (C7137 + C7138) * C6506 +
           (C7139 + C7147) * C82862) *
              C82938 * C82939 * C90 -
          (((C239 * C809 - C607 * C691 - C239 * C1007 + C82592 * C1102) *
                C82639 +
            C642 * C82863) *
               C82862 +
           (C7147 + C7139) * C6506 + (C7138 + C7137) * C6505 +
           (C7136 + C7135) * C6504) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25871 * C240 - C26354 * C102 - C25871 * C497 + C25720 * C608 +
             C25872 * C1265 - C26355 * C1155 - C25872 * C1463 + C25721 * C1566 +
             C25873 * C4299 - C26356 * C4108 - C25873 * C4683 +
             C82896 * C4854) *
                C82863 +
            (C29226 + C29227 + C29228) * C82639) *
               C82844 +
           ((C26394 + C26395 + C26396) * C82863 +
            (C32189 + C32190 + C32191) * C82639) *
               C82533) *
              C82938 * C82939 * C90 -
          (((C25873 * C5142 - C26356 * C4974 - C25873 * C5456 + C82896 * C5611 +
             C25872 * C3529 - C26355 * C3346 - C25872 * C3861 + C25721 * C4026 +
             C25871 * C807 - C26354 * C693 - C25871 * C1005 + C25720 * C1104) *
                C82639 +
            (C26399 + C26398 + C26397) * C82863) *
               C82533 +
           ((C32191 + C32190 + C32189) * C82639 +
            (C26396 + C26395 + C26394) * C82863) *
               C82844) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexx[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C80224 * C108 - C19062 * C102 - C80224 * C109 + C82844 * C120 +
            C80205 * C110 - C19064 * C103 - C80205 * C111 + C82533 * C121) *
               C82592 * C19057 +
           (C19773 + C19774) * C82592 * C19058 +
           (C19775 + C19776) * C82592 * C19059 +
           (C19777 + C19778) * C82592 * C82871) *
              C82938 * C688 -
          ((C80205 * C15411 - C19064 * C15408 - C80205 * C15412 +
            C82533 * C15414 + C80224 * C15409 - C19062 * C15407 -
            C80224 * C15410 + C82844 * C15413) *
               C82592 * C82871 +
           (C19778 + C19777) * C82592 * C19059 +
           (C19776 + C19775) * C82592 * C19058 +
           (C19774 + C19773) * C82592 * C19057) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6510 * C108 - C6511 * C102 - C6510 * C109 + C6504 * C120 +
            C6512 * C110 - C6513 * C103 - C6512 * C111 + C6505 * C121 +
            C6514 * C112 - C6515 * C104 - C6514 * C113 + C6506 * C122 +
            C6516 * C114 - C6517 * C105 - C6516 * C115 + C82862 * C123) *
               C82592 * C82863 +
           (C7238 + C7239 + C7240 + C7241) * C82592 * C82639) *
              C82938 * C688 -
          ((C6516 * C1663 - C6517 * C1656 - C6516 * C1664 + C82862 * C1668 +
            C6514 * C1661 - C6515 * C1655 - C6514 * C1662 + C6506 * C1667 +
            C6512 * C1659 - C6513 * C1654 - C6512 * C1660 + C6505 * C1666 +
            C6510 * C1657 - C6511 * C1653 - C6510 * C1658 + C6504 * C1665) *
               C82592 * C82639 +
           (C7241 + C7240 + C7239 + C7238) * C82592 * C82863) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C80224 * C108 - C19062 * C102 - C80224 * C109 + C82844 * C120 +
             C80205 * C110 - C19064 * C103 - C80205 * C111 + C82533 * C121) *
                C25720 +
            (C22970 + C22971) * C25721 +
            (C80224 * C4112 - C19062 * C4108 - C80224 * C4113 + C82844 * C4120 +
             C80205 * C4114 - C19064 * C4109 - C80205 * C4115 +
             C82533 * C4121) *
                C82896) *
               C82863 +
           ((C19773 + C19774) * C25720 + (C22022 + C22023) * C25721 +
            (C32302 + C32303) * C82896) *
               C82639) *
              C82938 * C688 -
          (((C80205 * C16749 - C19064 * C16746 - C80205 * C16750 +
             C82533 * C16752 + C80224 * C16747 - C19062 * C16745 -
             C80224 * C16748 + C82844 * C16751) *
                C82896 +
            (C22025 + C22024) * C25721 + (C19776 + C19775) * C25720) *
               C82639 +
           ((C32303 + C32302) * C82896 + (C22023 + C22022) * C25721 +
            (C19774 + C19773) * C25720) *
               C82863) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19057 * C169 - C19131 * C102 + C19058 * C753 - C19132 * C695 +
            C19059 * C1746 - C19133 * C1653 + C82871 * C2653 - C19134 * C2527) *
               C80224 +
           (C19057 * C175 - C19131 * C109 + C19058 * C758 - C19132 * C705 +
            C19059 * C1750 - C19133 * C1658 + C82871 * C2656 - C19134 * C2533) *
               C82844 +
           (C19136 - C19137 + C19138 - C19139 + C19140 - C19141 + C19142 -
            C19143) *
               C80205 +
           (C19144 - C19145 + C19146 - C19147 + C19148 - C19149 + C19150 -
            C19151) *
               C82533) *
              C82592 * C82938 * C688 +
          ((C19131 * C695 - C19057 * C753 + C19132 * C1653 - C19058 * C1746 +
            C19133 * C2527 - C19059 * C2653 + C19134 * C15407 -
            C82871 * C15462) *
               C80224 +
           (C19131 * C705 - C19057 * C758 + C19132 * C1658 - C19058 * C1750 +
            C19133 * C2533 - C19059 * C2656 + C19134 * C15410 -
            C82871 * C15464) *
               C82844 +
           (C19131 * C694 - C19057 * C754 + C19132 * C1654 - C19058 * C1747 +
            C19133 * C2526 - C19059 * C2654 + C19134 * C15408 -
            C82871 * C15463) *
               C80205 +
           (C19131 * C703 - C19057 * C759 + C19132 * C1660 - C19058 * C1751 +
            C19133 * C2531 - C19059 * C2657 + C19134 * C15412 -
            C82871 * C15465) *
               C82533) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
               C6510 +
           (C82863 * C175 - C6584 * C109 + C82639 * C758 - C6585 * C705) *
               C6504 +
           (C6587 - C6588 + C6589 - C6590) * C6512 +
           (C6591 - C6592 + C6593 - C6594) * C6505 +
           (C6595 - C6596 + C6597 - C6598) * C6514 +
           (C6599 - C6600 + C6601 - C6602) * C6506 +
           (C6603 - C6604 + C6605 - C6606) * C6516 +
           (C6607 - C6608 + C6609 - C6610) * C82862) *
              C82592 * C82938 * C688 +
          ((C6584 * C695 - C82863 * C753 + C6585 * C1653 - C82639 * C1746) *
               C6510 +
           (C6584 * C705 - C82863 * C758 + C6585 * C1658 - C82639 * C1750) *
               C6504 +
           (C6584 * C694 - C82863 * C754 + C6585 * C1654 - C82639 * C1747) *
               C6512 +
           (C6584 * C703 - C82863 * C759 + C6585 * C1660 - C82639 * C1751) *
               C6505 +
           (C6584 * C693 - C82863 * C755 + C6585 * C1655 - C82639 * C1748) *
               C6514 +
           (C6584 * C701 - C82863 * C760 + C6585 * C1662 - C82639 * C1752) *
               C6506 +
           (C6584 * C692 - C82863 * C756 + C6585 * C1656 - C82639 * C1749) *
               C6516 +
           (C6584 * C699 - C82863 * C761 + C6585 * C1664 - C82639 * C1753) *
               C82862) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C80224 +
            (C82863 * C175 - C6584 * C109 + C82639 * C758 - C6585 * C705) *
                C82844 +
            (C6587 - C6588 + C6589 - C6590) * C80205 +
            (C6591 - C6592 + C6593 - C6594) * C82533) *
               C25720 +
           ((C12468 - C12469 + C12470 - C12471) * C80224 +
            (C12472 - C12473 + C12474 - C12475) * C82844 +
            (C10535 - C10536 + C10537 - C10538) * C80205 +
            (C10539 - C10540 + C10541 - C10542) * C82533) *
               C25721 +
           ((C82863 * C4198 - C6584 * C4108 + C82639 * C5060 - C6585 * C4976) *
                C80224 +
            (C82863 * C4202 - C6584 * C4113 + C82639 * C5063 - C6585 * C4982) *
                C82844 +
            (C31441 - C31442 + C31443 - C31444) * C80205 +
            (C31445 - C31446 + C31447 - C31448) * C82533) *
               C82896) *
              C82938 * C688 +
          (((C6584 * C695 - C82863 * C753 + C6585 * C1653 - C82639 * C1746) *
                C80224 +
            (C6584 * C705 - C82863 * C758 + C6585 * C1658 - C82639 * C1750) *
                C82844 +
            (C6584 * C694 - C82863 * C754 + C6585 * C1654 - C82639 * C1747) *
                C80205 +
            (C6584 * C703 - C82863 * C759 + C6585 * C1660 - C82639 * C1751) *
                C82533) *
               C25720 +
           ((C6584 * C3348 - C82863 * C3441 + C6585 * C3345 - C82639 * C3442) *
                C80224 +
            (C6584 * C3360 - C82863 * C3447 + C6585 * C3354 - C82639 * C3448) *
                C82844 +
            (C6584 * C3347 - C82863 * C3443 + C6585 * C3344 - C82639 * C3444) *
                C80205 +
            (C6584 * C3358 - C82863 * C3449 + C6585 * C3352 - C82639 * C3450) *
                C82533) *
               C25721 +
           ((C6584 * C4976 - C82863 * C5060 + C6585 * C16745 -
             C82639 * C16827) *
                C80224 +
            (C6584 * C4982 - C82863 * C5063 + C6585 * C16748 -
             C82639 * C16829) *
                C82844 +
            (C6584 * C4975 - C82863 * C5061 + C6585 * C16746 -
             C82639 * C16828) *
                C80205 +
            (C6584 * C4980 - C82863 * C5064 + C6585 * C16750 -
             C82639 * C16830) *
                C82533) *
               C82896) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C80224 +
            (C82592 * C246 - C239 * C109) * C82844 + (C253 - C254) * C80205 +
            (C255 - C256) * C82533) *
               C19057 +
           ((C2740 - C2741) * C80224 + (C2742 - C2743) * C82844 +
            (C1861 - C1862) * C80205 + (C1863 - C1864) * C82533) *
               C19058 +
           ((C2744 - C2745) * C80224 + (C2746 - C2747) * C82844 +
            (C1869 - C1870) * C80205 + (C1871 - C1872) * C82533) *
               C19059 +
           ((C15952 - C15953) * C80224 + (C15954 - C15955) * C82844 +
            (C19218 - C19219) * C80205 + (C19220 - C19221) * C82533) *
               C82871) *
              C82938 * C688 +
          (((C2741 - C2740) * C80224 + (C2743 - C2742) * C82844 +
            (C1862 - C1861) * C80205 + (C1864 - C1863) * C82533) *
               C19057 +
           ((C2745 - C2744) * C80224 + (C2747 - C2746) * C82844 +
            (C1870 - C1869) * C80205 + (C1872 - C1871) * C82533) *
               C19058 +
           ((C15953 - C15952) * C80224 + (C15955 - C15954) * C82844 +
            (C19219 - C19218) * C80205 + (C19221 - C19220) * C82533) *
               C19059 +
           ((C15957 - C15956) * C80224 + (C15959 - C15958) * C82844 +
            (C239 * C15408 - C82592 * C15509) * C80205 +
            (C239 * C15412 - C82592 * C15511) * C82533) *
               C82871) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C6510 +
            (C82592 * C246 - C239 * C109) * C6504 + (C253 - C254) * C6512 +
            (C255 - C256) * C6505 + (C257 - C258) * C6514 +
            (C259 - C260) * C6506 + (C261 - C262) * C6516 +
            (C263 - C264) * C82862) *
               C82863 +
           ((C2740 - C2741) * C6510 + (C2742 - C2743) * C6504 +
            (C1861 - C1862) * C6512 + (C1863 - C1864) * C6505 +
            (C1865 - C1866) * C6514 + (C1867 - C1868) * C6506 +
            (C6677 - C6678) * C6516 + (C6679 - C6680) * C82862) *
               C82639) *
              C82938 * C688 +
          (((C2741 - C2740) * C6510 + (C2743 - C2742) * C6504 +
            (C1862 - C1861) * C6512 + (C1864 - C1863) * C6505 +
            (C1866 - C1865) * C6514 + (C1868 - C1867) * C6506 +
            (C6678 - C6677) * C6516 + (C6680 - C6679) * C82862) *
               C82863 +
           ((C2745 - C2744) * C6510 + (C2747 - C2746) * C6504 +
            (C1870 - C1869) * C6512 + (C1872 - C1871) * C6505 +
            (C1874 - C1873) * C6514 + (C1876 - C1875) * C6506 +
            (C239 * C1656 - C82592 * C1855) * C6516 +
            (C239 * C1664 - C82592 * C1859) * C82862) *
               C82639) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
             C82896 * C4299 - C25873 * C4108) *
                C80224 +
            (C25720 * C246 - C25871 * C109 + C25721 * C1270 - C25872 * C1165 +
             C82896 * C4303 - C25873 * C4113) *
                C82844 +
            (C25875 - C25876 + C25877 - C25878 + C25879 - C25880) * C80205 +
            (C25881 - C25882 + C25883 - C25884 + C25885 - C25886) * C82533) *
               C82863 +
           ((C28710 - C28711 + C28712 - C28713 + C28714 - C28715) * C80224 +
            (C28716 - C28717 + C28718 - C28719 + C28720 - C28721) * C82844 +
            (C31547 - C31548 + C31549 - C31550 + C31551 - C31552) * C80205 +
            (C31553 - C31554 + C31555 - C31556 + C31557 - C31558) * C82533) *
               C82639) *
              C82938 * C688 +
          (((C28711 - C28710 + C28713 - C28712 + C28715 - C28714) * C80224 +
            (C28717 - C28716 + C28719 - C28718 + C28721 - C28720) * C82844 +
            (C31548 - C31547 + C31550 - C31549 + C31552 - C31551) * C80205 +
            (C31554 - C31553 + C31556 - C31555 + C31558 - C31557) * C82533) *
               C82863 +
           ((C28723 - C28722 + C28725 - C28724 + C28727 - C28726) * C80224 +
            (C28729 - C28728 + C28731 - C28730 + C28733 - C28732) * C82844 +
            (C25871 * C1654 - C25720 * C1853 + C25872 * C3344 - C25721 * C3531 +
             C25873 * C16746 - C82896 * C16906) *
                C80205 +
            (C25871 * C1660 - C25720 * C1857 + C25872 * C3352 - C25721 * C3537 +
             C25873 * C16750 - C82896 * C16908) *
                C82533) *
               C82639) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
               C19131 +
           (C82844 * C316 - C80224 * C310 + C82533 * C317 - C80205 * C311) *
               C19057 +
           (C19977 - C19978 + C19979 - C19980) * C19132 +
           (C19981 - C19982 + C19983 - C19984) * C19058 +
           (C19985 - C19986 + C19987 - C19988) * C19133 +
           (C19989 - C19990 + C19991 - C19992) * C19059 +
           (C19993 - C19994 + C19995 - C19996) * C19134 +
           (C19997 - C19998 + C19999 - C20000) * C82871) *
              C82592 * C82938 * C688 +
          ((C19978 - C19977 + C19980 - C19979) * C19131 +
           (C19982 - C19981 + C19984 - C19983) * C19057 +
           (C19986 - C19985 + C19988 - C19987) * C19132 +
           (C19990 - C19989 + C19992 - C19991) * C19058 +
           (C19994 - C19993 + C19996 - C19995) * C19133 +
           (C19998 - C19997 + C20000 - C19999) * C19059 +
           (C80224 * C15407 - C82844 * C15409 + C80205 * C15408 -
            C82533 * C15411) *
               C19134 +
           (C80224 * C15554 - C82844 * C15556 + C80205 * C15555 -
            C82533 * C15557) *
               C82871) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6504 * C108 - C6510 * C102 + C6505 * C110 - C6512 * C103 +
            C6506 * C112 - C6514 * C104 + C82862 * C114 - C6516 * C105) *
               C6584 +
           (C6504 * C316 - C6510 * C310 + C6505 * C317 - C6512 * C311 +
            C6506 * C318 - C6514 * C312 + C82862 * C319 - C6516 * C313) *
               C82863 +
           (C7440 - C7441 + C7442 - C7443 + C7444 - C7445 + C7446 - C7447) *
               C6585 +
           (C7448 - C7449 + C7450 - C7451 + C7452 - C7453 + C7454 - C7455) *
               C82639) *
              C82592 * C82938 * C688 +
          ((C7441 - C7440 + C7443 - C7442 + C7445 - C7444 + C7447 - C7446) *
               C6584 +
           (C7449 - C7448 + C7451 - C7450 + C7453 - C7452 + C7455 - C7454) *
               C82863 +
           (C6510 * C1653 - C6504 * C1657 + C6512 * C1654 - C6505 * C1659 +
            C6514 * C1655 - C6506 * C1661 + C6516 * C1656 - C82862 * C1663) *
               C6585 +
           (C6510 * C1950 - C6504 * C1954 + C6512 * C1951 - C6505 * C1955 +
            C6514 * C1952 - C6506 * C1956 + C6516 * C1953 - C82862 * C1957) *
               C82639) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C6584 +
            (C82844 * C316 - C80224 * C310 + C82533 * C317 - C80205 * C311) *
                C82863 +
            (C19977 - C19978 + C19979 - C19980) * C6585 +
            (C19981 - C19982 + C19983 - C19984) * C82639) *
               C25720 +
           ((C23266 - C23267 + C23268 - C23269) * C6584 +
            (C23270 - C23271 + C23272 - C23273) * C82863 +
            (C22328 - C22329 + C22330 - C22331) * C6585 +
            (C22332 - C22333 + C22334 - C22335) * C82639) *
               C25721 +
           ((C82844 * C4112 - C80224 * C4108 + C82533 * C4114 -
             C80205 * C4109) *
                C6584 +
            (C82844 * C4409 - C80224 * C4405 + C82533 * C4410 -
             C80205 * C4406) *
                C82863 +
            (C32598 - C32599 + C32600 - C32601) * C6585 +
            (C32602 - C32603 + C32604 - C32605) * C82639) *
               C82896) *
              C82938 * C688 +
          (((C19978 - C19977 + C19980 - C19979) * C6584 +
            (C19982 - C19981 + C19984 - C19983) * C82863 +
            (C19986 - C19985 + C19988 - C19987) * C6585 +
            (C19990 - C19989 + C19992 - C19991) * C82639) *
               C25720 +
           ((C22329 - C22328 + C22331 - C22330) * C6584 +
            (C22333 - C22332 + C22335 - C22334) * C82863 +
            (C22337 - C22336 + C22339 - C22338) * C6585 +
            (C22341 - C22340 + C22343 - C22342) * C82639) *
               C25721 +
           ((C32599 - C32598 + C32601 - C32600) * C6584 +
            (C32603 - C32602 + C32605 - C32604) * C82863 +
            (C80224 * C16745 - C82844 * C16747 + C80205 * C16746 -
             C82533 * C16749) *
                C6585 +
            (C80224 * C16983 - C82844 * C16985 + C80205 * C16984 -
             C82533 * C16986) *
                C82639) *
               C82896) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19131 * C169 - C19353 * C102 - C19131 * C310 + C19057 * C365 +
            C19132 * C753 - C19354 * C695 - C19132 * C857 + C19058 * C913 +
            C19133 * C1746 - C19355 * C1653 - C19133 * C1950 + C19059 * C2035 +
            C19134 * C2653 - C19356 * C2527 - C19134 * C2821 + C82871 * C2927) *
               C82844 +
           (C19382 + C19383 + C19384 + C19385) * C82533) *
              C82592 * C82938 * C688 -
          ((C19134 * C15463 - C19356 * C15408 - C19134 * C15555 +
            C82871 * C15606 + C19133 * C2654 - C19355 * C2526 - C19133 * C2822 +
            C19059 * C2926 + C19132 * C1747 - C19354 * C1654 - C19132 * C1951 +
            C19058 * C2036 + C19131 * C754 - C19353 * C694 - C19131 * C858 +
            C19057 * C912) *
               C82533 +
           (C19134 * C15462 - C19356 * C15407 - C19134 * C15554 +
            C82871 * C15605 + C19133 * C2653 - C19355 * C2527 - C19133 * C2821 +
            C19059 * C2927 + C19132 * C1746 - C19354 * C1653 - C19132 * C1950 +
            C19058 * C2035 + C19131 * C753 - C19353 * C695 - C19131 * C857 +
            C19057 * C913) *
               C82844) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6584 * C169 - C6812 * C102 - C6584 * C310 + C82863 * C365 +
            C6585 * C753 - C6813 * C695 - C6585 * C857 + C82639 * C913) *
               C6504 +
           (C6851 + C6852) * C6505 + (C6853 + C6854) * C6506 +
           (C6855 + C6856) * C82862) *
              C82592 * C82938 * C688 -
          ((C6585 * C1749 - C6813 * C1656 - C6585 * C1953 + C82639 * C2038 +
            C6584 * C756 - C6812 * C692 - C6584 * C860 + C82863 * C910) *
               C82862 +
           (C6585 * C1748 - C6813 * C1655 - C6585 * C1952 + C82639 * C2037 +
            C6584 * C755 - C6812 * C693 - C6584 * C859 + C82863 * C911) *
               C6506 +
           (C6585 * C1747 - C6813 * C1654 - C6585 * C1951 + C82639 * C2036 +
            C6584 * C754 - C6812 * C694 - C6584 * C858 + C82863 * C912) *
               C6505 +
           (C6585 * C1746 - C6813 * C1653 - C6585 * C1950 + C82639 * C2035 +
            C6584 * C753 - C6812 * C695 - C6584 * C857 + C82863 * C913) *
               C6504) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C6584 * C169 - C6812 * C102 - C6584 * C310 + C82863 * C365 +
             C6585 * C753 - C6813 * C695 - C6585 * C857 + C82639 * C913) *
                C82844 +
            (C6851 + C6852) * C82533) *
               C25720 +
           ((C12782 + C12783) * C82844 + (C10885 + C10886) * C82533) * C25721 +
           ((C6584 * C4198 - C6812 * C4108 - C6584 * C4405 + C82863 * C4487 +
             C6585 * C5060 - C6813 * C4976 - C6585 * C5220 + C82639 * C5302) *
                C82844 +
            (C31767 + C31768) * C82533) *
               C82896) *
              C82938 * C688 -
          (((C6585 * C16828 - C6813 * C16746 - C6585 * C16984 +
             C82639 * C17062 + C6584 * C5061 - C6812 * C4975 - C6584 * C5221 +
             C82863 * C5301) *
                C82533 +
            (C6585 * C16827 - C6813 * C16745 - C6585 * C16983 +
             C82639 * C17061 + C6584 * C5060 - C6812 * C4976 - C6584 * C5220 +
             C82863 * C5302) *
                C82844) *
               C82896 +
           ((C6585 * C3444 - C6813 * C3344 - C6585 * C3617 + C82639 * C3701 +
             C6584 * C3443 - C6812 * C3347 - C6584 * C3614 + C82863 * C3702) *
                C82533 +
            (C6585 * C3442 - C6813 * C3345 - C6585 * C3616 + C82639 * C3703 +
             C6584 * C3441 - C6812 * C3348 - C6584 * C3613 + C82863 * C3704) *
                C82844) *
               C25721 +
           ((C6585 * C1747 - C6813 * C1654 - C6585 * C1951 + C82639 * C2036 +
             C6584 * C754 - C6812 * C694 - C6584 * C858 + C82863 * C912) *
                C82533 +
            (C6585 * C1746 - C6813 * C1653 - C6585 * C1950 + C82639 * C2035 +
             C6584 * C753 - C6812 * C695 - C6584 * C857 + C82863 * C913) *
                C82844) *
               C25720) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C19131 +
            (C82592 * C441 - C239 * C310) * C19057 + (C2740 - C2741) * C19132 +
            (C3006 - C3007) * C19058 + (C2744 - C2745) * C19133 +
            (C3008 - C3009) * C19059 + (C15952 - C15953) * C19134 +
            (C16106 - C16107) * C82871) *
               C82844 +
           ((C253 - C254) * C19131 + (C448 - C449) * C19057 +
            (C1861 - C1862) * C19132 + (C2160 - C2161) * C19058 +
            (C1869 - C1870) * C19133 + (C2162 - C2163) * C19059 +
            (C19218 - C19219) * C19134 + (C19452 - C19453) * C82871) *
               C82533) *
              C82938 * C688 +
          (((C2741 - C2740) * C19131 + (C3007 - C3006) * C19057 +
            (C2745 - C2744) * C19132 + (C3009 - C3008) * C19058 +
            (C15953 - C15952) * C19133 + (C16107 - C16106) * C19059 +
            (C15957 - C15956) * C19134 + (C16109 - C16108) * C82871) *
               C82844 +
           ((C1862 - C1861) * C19131 + (C2161 - C2160) * C19057 +
            (C1870 - C1869) * C19132 + (C2163 - C2162) * C19058 +
            (C19219 - C19218) * C19133 + (C19453 - C19452) * C19059 +
            (C239 * C15408 - C82592 * C15509) * C19134 +
            (C239 * C15555 - C82592 * C15650) * C82871) *
               C82533) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C6584 +
            (C82592 * C441 - C239 * C310) * C82863 + (C2740 - C2741) * C6585 +
            (C3006 - C3007) * C82639) *
               C6504 +
           ((C253 - C254) * C6584 + (C448 - C449) * C82863 +
            (C1861 - C1862) * C6585 + (C2160 - C2161) * C82639) *
               C6505 +
           ((C257 - C258) * C6584 + (C450 - C451) * C82863 +
            (C1865 - C1866) * C6585 + (C2164 - C2165) * C82639) *
               C6506 +
           ((C261 - C262) * C6584 + (C452 - C453) * C82863 +
            (C6677 - C6678) * C6585 + (C6923 - C6924) * C82639) *
               C82862) *
              C82938 * C688 +
          (((C2741 - C2740) * C6584 + (C3007 - C3006) * C82863 +
            (C2745 - C2744) * C6585 + (C3009 - C3008) * C82639) *
               C6504 +
           ((C1862 - C1861) * C6584 + (C2161 - C2160) * C82863 +
            (C1870 - C1869) * C6585 + (C2163 - C2162) * C82639) *
               C6505 +
           ((C1866 - C1865) * C6584 + (C2165 - C2164) * C82863 +
            (C1874 - C1873) * C6585 + (C2167 - C2166) * C82639) *
               C6506 +
           ((C6678 - C6677) * C6584 + (C6924 - C6923) * C82863 +
            (C239 * C1656 - C82592 * C1855) * C6585 +
            (C239 * C1953 - C82592 * C2158) * C82639) *
               C82862) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
             C82896 * C4299 - C25873 * C4108) *
                C6584 +
            (C25720 * C441 - C25871 * C310 + C25721 * C1416 - C25872 * C1317 +
             C82896 * C4593 - C25873 * C4405) *
                C82863 +
            (C28710 - C28711 + C28712 - C28713 + C28714 - C28715) * C6585 +
            (C28956 - C28957 + C28958 - C28959 + C28960 - C28961) * C82639) *
               C82844 +
           ((C25875 - C25876 + C25877 - C25878 + C25879 - C25880) * C6584 +
            (C26121 - C26122 + C26123 - C26124 + C26125 - C26126) * C82863 +
            (C31547 - C31548 + C31549 - C31550 + C31551 - C31552) * C6585 +
            (C31867 - C31868 + C31869 - C31870 + C31871 - C31872) * C82639) *
               C82533) *
              C82938 * C688 +
          (((C28711 - C28710 + C28713 - C28712 + C28715 - C28714) * C6584 +
            (C28957 - C28956 + C28959 - C28958 + C28961 - C28960) * C82863 +
            (C28723 - C28722 + C28725 - C28724 + C28727 - C28726) * C6585 +
            (C28963 - C28962 + C28965 - C28964 + C28967 - C28966) * C82639) *
               C82844 +
           ((C31548 - C31547 + C31550 - C31549 + C31552 - C31551) * C6584 +
            (C31868 - C31867 + C31870 - C31869 + C31872 - C31871) * C82863 +
            (C25871 * C1654 - C25720 * C1853 + C25872 * C3344 - C25721 * C3531 +
             C25873 * C16746 - C82896 * C16906) *
                C6585 +
            (C25871 * C1951 - C25720 * C2156 + C25872 * C3617 - C25721 * C3782 +
             C25873 * C16984 - C82896 * C17138) *
                C82639) *
               C82533) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezx[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C239 +
            (C82844 * C503 - C80224 * C497 + C82533 * C504 - C80205 * C498) *
                C82592) *
               C19057 +
           ((C19977 - C19978 + C19979 - C19980) * C239 +
            (C20199 - C20200 + C20201 - C20202) * C82592) *
               C19058 +
           ((C19985 - C19986 + C19987 - C19988) * C239 +
            (C20203 - C20204 + C20205 - C20206) * C82592) *
               C19059 +
           ((C19993 - C19994 + C19995 - C19996) * C239 +
            (C20207 - C20208 + C20209 - C20210) * C82592) *
               C82871) *
              C82938 * C688 +
          (((C19978 - C19977 + C19980 - C19979) * C239 +
            (C20200 - C20199 + C20202 - C20201) * C82592) *
               C19057 +
           ((C19986 - C19985 + C19988 - C19987) * C239 +
            (C20204 - C20203 + C20206 - C20205) * C82592) *
               C19058 +
           ((C19994 - C19993 + C19996 - C19995) * C239 +
            (C20208 - C20207 + C20210 - C20209) * C82592) *
               C19059 +
           ((C80224 * C15407 - C82844 * C15409 + C80205 * C15408 -
             C82533 * C15411) *
                C239 +
            (C80224 * C15693 - C82844 * C15695 + C80205 * C15694 -
             C82533 * C15696) *
                C82592) *
               C82871) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6504 * C108 - C6510 * C102 + C6505 * C110 - C6512 * C103 +
             C6506 * C112 - C6514 * C104 + C82862 * C114 - C6516 * C105) *
                C239 +
            (C6504 * C503 - C6510 * C497 + C6505 * C504 - C6512 * C498 +
             C6506 * C505 - C6514 * C499 + C82862 * C506 - C6516 * C500) *
                C82592) *
               C82863 +
           ((C7440 - C7441 + C7442 - C7443 + C7444 - C7445 + C7446 - C7447) *
                C239 +
            (C7654 - C7655 + C7656 - C7657 + C7658 - C7659 + C7660 - C7661) *
                C82592) *
               C82639) *
              C82938 * C688 +
          (((C7441 - C7440 + C7443 - C7442 + C7445 - C7444 + C7447 - C7446) *
                C239 +
            (C7655 - C7654 + C7657 - C7656 + C7659 - C7658 + C7661 - C7660) *
                C82592) *
               C82863 +
           ((C6510 * C1653 - C6504 * C1657 + C6512 * C1654 - C6505 * C1659 +
             C6514 * C1655 - C6506 * C1661 + C6516 * C1656 - C82862 * C1663) *
                C239 +
            (C6510 * C2241 - C6504 * C2245 + C6512 * C2242 - C6505 * C2246 +
             C6514 * C2243 - C6506 * C2247 + C6516 * C2244 - C82862 * C2248) *
                C82592) *
               C82639) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C25871 +
            (C82844 * C503 - C80224 * C497 + C82533 * C504 - C80205 * C498) *
                C25720 +
            (C23266 - C23267 + C23268 - C23269) * C25872 +
            (C23568 - C23569 + C23570 - C23571) * C25721 +
            (C82844 * C4112 - C80224 * C4108 + C82533 * C4114 -
             C80205 * C4109) *
                C25873 +
            (C82844 * C4687 - C80224 * C4683 + C82533 * C4688 -
             C80205 * C4684) *
                C82896) *
               C82863 +
           ((C19977 - C19978 + C19979 - C19980) * C25871 +
            (C20199 - C20200 + C20201 - C20202) * C25720 +
            (C22328 - C22329 + C22330 - C22331) * C25872 +
            (C22642 - C22643 + C22644 - C22645) * C25721 +
            (C32598 - C32599 + C32600 - C32601) * C25873 +
            (C32900 - C32901 + C32902 - C32903) * C82896) *
               C82639) *
              C82938 * C688 +
          (((C19978 - C19977 + C19980 - C19979) * C25871 +
            (C20200 - C20199 + C20202 - C20201) * C25720 +
            (C22329 - C22328 + C22331 - C22330) * C25872 +
            (C22643 - C22642 + C22645 - C22644) * C25721 +
            (C32599 - C32598 + C32601 - C32600) * C25873 +
            (C32901 - C32900 + C32903 - C32902) * C82896) *
               C82863 +
           ((C19986 - C19985 + C19988 - C19987) * C25871 +
            (C20204 - C20203 + C20206 - C20205) * C25720 +
            (C22337 - C22336 + C22339 - C22338) * C25872 +
            (C22647 - C22646 + C22649 - C22648) * C25721 +
            (C80224 * C16745 - C82844 * C16747 + C80205 * C16746 -
             C82533 * C16749) *
                C25873 +
            (C80224 * C17213 - C82844 * C17215 + C80205 * C17214 -
             C82533 * C17216) *
                C82896) *
               C82639) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19057 * C169 - C19131 * C102 + C19058 * C753 - C19132 * C695 +
             C19059 * C1746 - C19133 * C1653 + C82871 * C2653 -
             C19134 * C2527) *
                C239 +
            (C19057 * C551 - C19131 * C497 + C19058 * C1055 - C19132 * C1003 +
             C19059 * C2323 - C19133 * C2241 + C82871 * C3175 -
             C19134 * C3083) *
                C82592) *
               C82844 +
           ((C19136 - C19137 + C19138 - C19139 + C19140 - C19141 + C19142 -
             C19143) *
                C239 +
            (C19586 - C19587 + C19588 - C19589 + C19590 - C19591 + C19592 -
             C19593) *
                C82592) *
               C82533) *
              C82938 * C688 +
          (((C19131 * C695 - C19057 * C753 + C19132 * C1653 - C19058 * C1746 +
             C19133 * C2527 - C19059 * C2653 + C19134 * C15407 -
             C82871 * C15462) *
                C239 +
            (C19131 * C1003 - C19057 * C1055 + C19132 * C2241 - C19058 * C2323 +
             C19133 * C3083 - C19059 * C3175 + C19134 * C15693 -
             C82871 * C15739) *
                C82592) *
               C82844 +
           ((C19131 * C694 - C19057 * C754 + C19132 * C1654 - C19058 * C1747 +
             C19133 * C2526 - C19059 * C2654 + C19134 * C15408 -
             C82871 * C15463) *
                C239 +
            (C19131 * C1004 - C19057 * C1056 + C19132 * C2242 - C19058 * C2324 +
             C19133 * C3084 - C19059 * C3176 + C19134 * C15694 -
             C82871 * C15740) *
                C82592) *
               C82533) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C239 +
            (C82863 * C551 - C6584 * C497 + C82639 * C1055 - C6585 * C1003) *
                C82592) *
               C6504 +
           ((C6587 - C6588 + C6589 - C6590) * C239 +
            (C7057 - C7058 + C7059 - C7060) * C82592) *
               C6505 +
           ((C6595 - C6596 + C6597 - C6598) * C239 +
            (C7061 - C7062 + C7063 - C7064) * C82592) *
               C6506 +
           ((C6603 - C6604 + C6605 - C6606) * C239 +
            (C7065 - C7066 + C7067 - C7068) * C82592) *
               C82862) *
              C82938 * C688 +
          (((C6584 * C695 - C82863 * C753 + C6585 * C1653 - C82639 * C1746) *
                C239 +
            (C6584 * C1003 - C82863 * C1055 + C6585 * C2241 - C82639 * C2323) *
                C82592) *
               C6504 +
           ((C6584 * C694 - C82863 * C754 + C6585 * C1654 - C82639 * C1747) *
                C239 +
            (C6584 * C1004 - C82863 * C1056 + C6585 * C2242 - C82639 * C2324) *
                C82592) *
               C6505 +
           ((C6584 * C693 - C82863 * C755 + C6585 * C1655 - C82639 * C1748) *
                C239 +
            (C6584 * C1005 - C82863 * C1057 + C6585 * C2243 - C82639 * C2325) *
                C82592) *
               C6506 +
           ((C6584 * C692 - C82863 * C756 + C6585 * C1656 - C82639 * C1749) *
                C239 +
            (C6584 * C1006 - C82863 * C1058 + C6585 * C2244 - C82639 * C2326) *
                C82592) *
               C82862) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C25871 +
            (C82863 * C551 - C6584 * C497 + C82639 * C1055 - C6585 * C1003) *
                C25720 +
            (C12468 - C12469 + C12470 - C12471) * C25872 +
            (C13078 - C13079 + C13080 - C13081) * C25721 +
            (C82863 * C4198 - C6584 * C4108 + C82639 * C5060 - C6585 * C4976) *
                C25873 +
            (C82863 * C4765 - C6584 * C4683 + C82639 * C5534 - C6585 * C5454) *
                C82896) *
               C82844 +
           ((C6587 - C6588 + C6589 - C6590) * C25871 +
            (C7057 - C7058 + C7059 - C7060) * C25720 +
            (C10535 - C10536 + C10537 - C10538) * C25872 +
            (C11191 - C11192 + C11193 - C11194) * C25721 +
            (C31441 - C31442 + C31443 - C31444) * C25873 +
            (C32069 - C32070 + C32071 - C32072) * C82896) *
               C82533) *
              C82938 * C688 +
          (((C6584 * C695 - C82863 * C753 + C6585 * C1653 - C82639 * C1746) *
                C25871 +
            (C6584 * C1003 - C82863 * C1055 + C6585 * C2241 - C82639 * C2323) *
                C25720 +
            (C6584 * C3348 - C82863 * C3441 + C6585 * C3345 - C82639 * C3442) *
                C25872 +
            (C6584 * C3859 - C82863 * C3945 + C6585 * C3862 - C82639 * C3946) *
                C25721 +
            (C6584 * C4976 - C82863 * C5060 + C6585 * C16745 -
             C82639 * C16827) *
                C25873 +
            (C6584 * C5454 - C82863 * C5534 + C6585 * C17213 -
             C82639 * C17291) *
                C82896) *
               C82844 +
           ((C6584 * C694 - C82863 * C754 + C6585 * C1654 - C82639 * C1747) *
                C25871 +
            (C6584 * C1004 - C82863 * C1056 + C6585 * C2242 - C82639 * C2324) *
                C25720 +
            (C6584 * C3347 - C82863 * C3443 + C6585 * C3344 - C82639 * C3444) *
                C25872 +
            (C6584 * C3860 - C82863 * C3947 + C6585 * C3863 - C82639 * C3948) *
                C25721 +
            (C6584 * C4975 - C82863 * C5061 + C6585 * C16746 -
             C82639 * C16828) *
                C25873 +
            (C6584 * C5455 - C82863 * C5535 + C6585 * C17214 -
             C82639 * C17292) *
                C82896) *
               C82533) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C19057 +
            C3268 * C19058 + C3269 * C19059 + C16260 * C82871) *
               C82844 +
           (C19660 + C19661 + C19662 + C19670) * C82533) *
              C82938 * C688 -
          (((C239 * C15509 - C607 * C15408 - C239 * C15694 + C82592 * C15784) *
                C82871 +
            C19669 * C19059 + C2445 * C19058 + C2444 * C19057) *
               C82533 +
           (C16261 * C82871 + C16260 * C19059 + C3269 * C19058 +
            C3268 * C19057) *
               C82844) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82863 +
            C3268 * C82639) *
               C6504 +
           (C7135 + C7136) * C6505 + (C7137 + C7138) * C6506 +
           (C7139 + C7147) * C82862) *
              C82938 * C688 -
          (((C239 * C1855 - C607 * C1656 - C239 * C2244 + C82592 * C2416) *
                C82639 +
            C7146 * C82863) *
               C82862 +
           (C2447 * C82639 + C2446 * C82863) * C6506 +
           (C2445 * C82639 + C2444 * C82863) * C6505 +
           (C3269 * C82639 + C3268 * C82863) * C6504) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25871 * C240 - C26354 * C102 - C25871 * C497 + C25720 * C608 +
             C25872 * C1265 - C26355 * C1155 - C25872 * C1463 + C25721 * C1566 +
             C25873 * C4299 - C26356 * C4108 - C25873 * C4683 +
             C82896 * C4854) *
                C82863 +
            (C29226 + C29227 + C29228) * C82639) *
               C82844 +
           ((C26394 + C26395 + C26396) * C82863 +
            (C32189 + C32190 + C32191) * C82639) *
               C82533) *
              C82938 * C688 -
          (((C25873 * C16906 - C26356 * C16746 - C25873 * C17214 +
             C82896 * C17368 + C25872 * C3531 - C26355 * C3344 -
             C25872 * C3863 + C25721 * C4027 + C25871 * C1853 - C26354 * C1654 -
             C25871 * C2242 + C25720 * C2414) *
                C82639 +
            (C32191 + C32190 + C32189) * C82863) *
               C82533 +
           ((C29231 + C29230 + C29229) * C82639 +
            (C29228 + C29227 + C29226) * C82863) *
               C82844) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C80224 * C108 - C19062 * C102 - C80224 * C109 + C82844 * C120 +
            C80205 * C110 - C19064 * C103 - C80205 * C111 + C82533 * C121) *
               C82592 * C19057 +
           (C19773 + C19774) * C82592 * C19058 +
           (C19775 + C19776) * C82592 * C19059 +
           (C19777 + C19778) * C82592 * C82871) *
              C1149 -
          ((C80205 * C20409 - C19064 * C20408 - C80205 * C20410 +
            C82533 * C20411 + C80224 * C16307 - C19062 * C16304 -
            C80224 * C16308 + C82844 * C16310) *
               C82592 * C82871 +
           (C80205 * C3351 - C19064 * C3344 - C80205 * C3352 + C82533 * C3362 +
            C80224 * C3353 - C19062 * C3345 - C80224 * C3354 + C82844 * C3363) *
               C82592 * C19059 +
           (C80205 * C3357 - C19064 * C3347 - C80205 * C3358 + C82533 * C3365 +
            C80224 * C3359 - C19062 * C3348 - C80224 * C3360 + C82844 * C3366) *
               C82592 * C19058 +
           (C80205 * C1162 - C19064 * C1154 - C80205 * C1163 + C82533 * C1169 +
            C80224 * C1164 - C19062 * C1155 - C80224 * C1165 + C82844 * C1170) *
               C82592 * C19057) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6510 * C108 - C6511 * C102 - C6510 * C109 + C6504 * C120 +
            C6512 * C110 - C6513 * C103 - C6512 * C111 + C6505 * C121 +
            C6514 * C112 - C6515 * C104 - C6514 * C113 + C6506 * C122 +
            C6516 * C114 - C6517 * C105 - C6516 * C115 + C82862 * C123) *
               C82592 * C82863 +
           (C7238 + C7239 + C7240 + C7241) * C82592 * C82639) *
              C1149 -
          ((C6516 * C7860 - C6517 * C7859 - C6516 * C7861 + C82862 * C7862 +
            C6514 * C3355 - C6515 * C3346 - C6514 * C3356 + C6506 * C3364 +
            C6512 * C3357 - C6513 * C3347 - C6512 * C3358 + C6505 * C3365 +
            C6510 * C3359 - C6511 * C3348 - C6510 * C3360 + C6504 * C3366) *
               C82592 * C82639 +
           (C6516 * C1158 - C6517 * C1152 - C6516 * C1159 + C82862 * C1167 +
            C6514 * C1160 - C6515 * C1153 - C6514 * C1161 + C6506 * C1168 +
            C6512 * C1162 - C6513 * C1154 - C6512 * C1163 + C6505 * C1169 +
            C6510 * C1164 - C6511 * C1155 - C6510 * C1165 + C6504 * C1170) *
               C82592 * C82863) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C80224 * C108 - C19062 * C102 - C80224 * C109 + C82844 * C120 +
             C80205 * C110 - C19064 * C103 - C80205 * C111 + C82533 * C121) *
                C25720 +
            (C22970 + C22971) * C25721 + (C33214 + C33215) * C82896) *
               C82863 +
           ((C19773 + C19774) * C25720 + (C22022 + C22023) * C25721 +
            (C32302 + C32303) * C82896) *
               C82639) *
              C1149 -
          (((C80205 * C33198 - C19064 * C33197 - C80205 * C33199 +
             C82533 * C33200 + C80224 * C18265 - C19062 * C18262 -
             C80224 * C18266 + C82844 * C18268) *
                C82896 +
            (C32303 + C32302) * C25721 + (C22023 + C22022) * C25720) *
               C82639 +
           ((C80205 * C5693 - C19064 * C5689 - C80205 * C5694 + C82533 * C5698 +
             C80224 * C5695 - C19062 * C5690 - C80224 * C5696 +
             C82844 * C5699) *
                C82896 +
            (C33215 + C33214) * C25721 + (C22971 + C22970) * C25720) *
               C82863) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19057 * C169 - C19131 * C102 + C19058 * C753 - C19132 * C695 +
            C19059 * C1746 - C19133 * C1653 + C82871 * C2653 - C19134 * C2527) *
               C80224 +
           (C19057 * C175 - C19131 * C109 + C19058 * C758 - C19132 * C705 +
            C19059 * C1750 - C19133 * C1658 + C82871 * C2656 - C19134 * C2533) *
               C82844 +
           (C19136 - C19137 + C19138 - C19139 + C19140 - C19141 + C19142 -
            C19143) *
               C80205 +
           (C19144 - C19145 + C19146 - C19147 + C19148 - C19149 + C19150 -
            C19151) *
               C82533) *
              C82592 * C1149 +
          ((C19131 * C1155 - C19057 * C1213 + C19132 * C3348 - C19058 * C3441 +
            C19133 * C3345 - C19059 * C3442 + C19134 * C16304 -
            C82871 * C16353) *
               C80224 +
           (C19131 * C1165 - C19057 * C1218 + C19132 * C3360 - C19058 * C3447 +
            C19133 * C3354 - C19059 * C3448 + C19134 * C16308 -
            C82871 * C16355) *
               C82844 +
           (C19131 * C1154 - C19057 * C1214 + C19132 * C3347 - C19058 * C3443 +
            C19133 * C3344 - C19059 * C3444 + C19134 * C20408 -
            C82871 * C20478) *
               C80205 +
           (C19131 * C1163 - C19057 * C1219 + C19132 * C3358 - C19058 * C3449 +
            C19133 * C3352 - C19059 * C3450 + C19134 * C20410 -
            C82871 * C20479) *
               C82533) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
               C6510 +
           (C82863 * C175 - C6584 * C109 + C82639 * C758 - C6585 * C705) *
               C6504 +
           (C6587 - C6588 + C6589 - C6590) * C6512 +
           (C6591 - C6592 + C6593 - C6594) * C6505 +
           (C6595 - C6596 + C6597 - C6598) * C6514 +
           (C6599 - C6600 + C6601 - C6602) * C6506 +
           (C6603 - C6604 + C6605 - C6606) * C6516 +
           (C6607 - C6608 + C6609 - C6610) * C82862) *
              C82592 * C1149 +
          ((C6584 * C1155 - C82863 * C1213 + C6585 * C3348 - C82639 * C3441) *
               C6510 +
           (C6584 * C1165 - C82863 * C1218 + C6585 * C3360 - C82639 * C3447) *
               C6504 +
           (C6584 * C1154 - C82863 * C1214 + C6585 * C3347 - C82639 * C3443) *
               C6512 +
           (C6584 * C1163 - C82863 * C1219 + C6585 * C3358 - C82639 * C3449) *
               C6505 +
           (C6584 * C1153 - C82863 * C1215 + C6585 * C3346 - C82639 * C3445) *
               C6514 +
           (C6584 * C1161 - C82863 * C1220 + C6585 * C3356 - C82639 * C3451) *
               C6506 +
           (C6584 * C1152 - C82863 * C1216 + C6585 * C7859 - C82639 * C7929) *
               C6516 +
           (C6584 * C1159 - C82863 * C1221 + C6585 * C7861 - C82639 * C7930) *
               C82862) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C80224 +
            (C82863 * C175 - C6584 * C109 + C82639 * C758 - C6585 * C705) *
                C82844 +
            (C6587 - C6588 + C6589 - C6590) * C80205 +
            (C6591 - C6592 + C6593 - C6594) * C82533) *
               C25720 +
           ((C12468 - C12469 + C12470 - C12471) * C80224 +
            (C12472 - C12473 + C12474 - C12475) * C82844 +
            (C10535 - C10536 + C10537 - C10538) * C80205 +
            (C10539 - C10540 + C10541 - C10542) * C82533) *
               C25721 +
           ((C33316 - C33317 + C33318 - C33319) * C80224 +
            (C33320 - C33321 + C33322 - C33323) * C82844 +
            (C31441 - C31442 + C31443 - C31444) * C80205 +
            (C31445 - C31446 + C31447 - C31448) * C82533) *
               C82896) *
              C1149 +
          (((C12469 - C12468 + C12471 - C12470) * C80224 +
            (C12473 - C12472 + C12475 - C12474) * C82844 +
            (C10536 - C10535 + C10538 - C10537) * C80205 +
            (C10540 - C10539 + C10542 - C10541) * C82533) *
               C25720 +
           ((C33317 - C33316 + C33319 - C33318) * C80224 +
            (C33321 - C33320 + C33323 - C33322) * C82844 +
            (C31442 - C31441 + C31444 - C31443) * C80205 +
            (C31446 - C31445 + C31448 - C31447) * C82533) *
               C25721 +
           ((C6584 * C5690 - C82863 * C5816 + C6585 * C18262 -
             C82639 * C18357) *
                C80224 +
            (C6584 * C5696 - C82863 * C5819 + C6585 * C18266 -
             C82639 * C18359) *
                C82844 +
            (C6584 * C5689 - C82863 * C5817 + C6585 * C33197 -
             C82639 * C33313) *
                C80205 +
            (C6584 * C5694 - C82863 * C5820 + C6585 * C33199 -
             C82639 * C33314) *
                C82533) *
               C82896) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C80224 +
            (C82592 * C246 - C239 * C109) * C82844 + (C253 - C254) * C80205 +
            (C255 - C256) * C82533) *
               C19057 +
           ((C2740 - C2741) * C80224 + (C2742 - C2743) * C82844 +
            (C1861 - C1862) * C80205 + (C1863 - C1864) * C82533) *
               C19058 +
           ((C2744 - C2745) * C80224 + (C2746 - C2747) * C82844 +
            (C1869 - C1870) * C80205 + (C1871 - C1872) * C82533) *
               C19059 +
           ((C15952 - C15953) * C80224 + (C15954 - C15955) * C82844 +
            (C19218 - C19219) * C80205 + (C19220 - C19221) * C82533) *
               C82871) *
              C1149 +
          (((C239 * C1155 - C82592 * C1265) * C80224 +
            (C239 * C1165 - C82592 * C1270) * C82844 +
            (C239 * C1154 - C82592 * C1266) * C80205 +
            (C239 * C1163 - C82592 * C1271) * C82533) *
               C19057 +
           ((C239 * C3348 - C82592 * C3527) * C80224 +
            (C239 * C3360 - C82592 * C3533) * C82844 +
            (C239 * C3347 - C82592 * C3528) * C80205 +
            (C239 * C3358 - C82592 * C3534) * C82533) *
               C19058 +
           ((C239 * C3345 - C82592 * C3530) * C80224 +
            (C239 * C3354 - C82592 * C3536) * C82844 +
            (C239 * C3344 - C82592 * C3531) * C80205 +
            (C239 * C3352 - C82592 * C3537) * C82533) *
               C19059 +
           ((C239 * C16304 - C82592 * C16399) * C80224 +
            (C239 * C16308 - C82592 * C16401) * C82844 +
            (C239 * C20408 - C82592 * C20546) * C80205 +
            (C239 * C20410 - C82592 * C20547) * C82533) *
               C82871) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C6510 +
            (C82592 * C246 - C239 * C109) * C6504 + (C253 - C254) * C6512 +
            (C255 - C256) * C6505 + (C257 - C258) * C6514 +
            (C259 - C260) * C6506 + (C261 - C262) * C6516 +
            (C263 - C264) * C82862) *
               C82863 +
           ((C2740 - C2741) * C6510 + (C2742 - C2743) * C6504 +
            (C1861 - C1862) * C6512 + (C1863 - C1864) * C6505 +
            (C1865 - C1866) * C6514 + (C1867 - C1868) * C6506 +
            (C6677 - C6678) * C6516 + (C6679 - C6680) * C82862) *
               C82639) *
              C1149 +
          (((C239 * C1155 - C82592 * C1265) * C6510 +
            (C239 * C1165 - C82592 * C1270) * C6504 +
            (C239 * C1154 - C82592 * C1266) * C6512 +
            (C239 * C1163 - C82592 * C1271) * C6505 +
            (C239 * C1153 - C82592 * C1267) * C6514 +
            (C239 * C1161 - C82592 * C1272) * C6506 +
            (C239 * C1152 - C82592 * C1268) * C6516 +
            (C239 * C1159 - C82592 * C1273) * C82862) *
               C82863 +
           ((C239 * C3348 - C82592 * C3527) * C6510 +
            (C239 * C3360 - C82592 * C3533) * C6504 +
            (C239 * C3347 - C82592 * C3528) * C6512 +
            (C239 * C3358 - C82592 * C3534) * C6505 +
            (C239 * C3346 - C82592 * C3529) * C6514 +
            (C239 * C3356 - C82592 * C3535) * C6506 +
            (C239 * C7859 - C82592 * C7997) * C6516 +
            (C239 * C7861 - C82592 * C7998) * C82862) *
               C82639) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
             C82896 * C4299 - C25873 * C4108) *
                C80224 +
            (C25720 * C246 - C25871 * C109 + C25721 * C1270 - C25872 * C1165 +
             C82896 * C4303 - C25873 * C4113) *
                C82844 +
            (C25875 - C25876 + C25877 - C25878 + C25879 - C25880) * C80205 +
            (C25881 - C25882 + C25883 - C25884 + C25885 - C25886) * C82533) *
               C82863 +
           ((C28710 - C28711 + C28712 - C28713 + C28714 - C28715) * C80224 +
            (C28716 - C28717 + C28718 - C28719 + C28720 - C28721) * C82844 +
            (C31547 - C31548 + C31549 - C31550 + C31551 - C31552) * C80205 +
            (C31553 - C31554 + C31555 - C31556 + C31557 - C31558) * C82533) *
               C82639) *
              C1149 +
          (((C25871 * C1155 - C25720 * C1265 + C25872 * C4108 - C25721 * C4299 +
             C25873 * C5690 - C82896 * C5904) *
                C80224 +
            (C25871 * C1165 - C25720 * C1270 + C25872 * C4113 - C25721 * C4303 +
             C25873 * C5696 - C82896 * C5907) *
                C82844 +
            (C25871 * C1154 - C25720 * C1266 + C25872 * C4109 - C25721 * C4300 +
             C25873 * C5689 - C82896 * C5905) *
                C80205 +
            (C25871 * C1163 - C25720 * C1271 + C25872 * C4115 - C25721 * C4304 +
             C25873 * C5694 - C82896 * C5908) *
                C82533) *
               C82863 +
           ((C25871 * C3348 - C25720 * C3527 + C25872 * C4976 - C25721 * C5140 +
             C25873 * C18262 - C82896 * C18459) *
                C80224 +
            (C25871 * C3360 - C25720 * C3533 + C25872 * C4982 - C25721 * C5143 +
             C25873 * C18266 - C82896 * C18461) *
                C82844 +
            (C25871 * C3347 - C25720 * C3528 + C25872 * C4975 - C25721 * C5141 +
             C25873 * C33197 - C82896 * C33421) *
                C80205 +
            (C25871 * C3358 - C25720 * C3534 + C25872 * C4980 - C25721 * C5144 +
             C25873 * C33199 - C82896 * C33422) *
                C82533) *
               C82639) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
               C19131 +
           (C82844 * C316 - C80224 * C310 + C82533 * C317 - C80205 * C311) *
               C19057 +
           (C19977 - C19978 + C19979 - C19980) * C19132 +
           (C19981 - C19982 + C19983 - C19984) * C19058 +
           (C19985 - C19986 + C19987 - C19988) * C19133 +
           (C19989 - C19990 + C19991 - C19992) * C19059 +
           (C19993 - C19994 + C19995 - C19996) * C19134 +
           (C19997 - C19998 + C19999 - C20000) * C82871) *
              C82592 * C1149 +
          ((C80224 * C1155 - C82844 * C1164 + C80205 * C1154 - C82533 * C1162) *
               C19131 +
           (C80224 * C1317 - C82844 * C1322 + C80205 * C1318 - C82533 * C1323) *
               C19057 +
           (C80224 * C3348 - C82844 * C3359 + C80205 * C3347 - C82533 * C3357) *
               C19132 +
           (C80224 * C3613 - C82844 * C3619 + C80205 * C3614 - C82533 * C3620) *
               C19058 +
           (C80224 * C3345 - C82844 * C3353 + C80205 * C3344 - C82533 * C3351) *
               C19133 +
           (C80224 * C3616 - C82844 * C3622 + C80205 * C3617 - C82533 * C3623) *
               C19059 +
           (C80224 * C16304 - C82844 * C16307 + C80205 * C20408 -
            C82533 * C20409) *
               C19134 +
           (C80224 * C16445 - C82844 * C16447 + C80205 * C20614 -
            C82533 * C20615) *
               C82871) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6504 * C108 - C6510 * C102 + C6505 * C110 - C6512 * C103 +
            C6506 * C112 - C6514 * C104 + C82862 * C114 - C6516 * C105) *
               C6584 +
           (C6504 * C316 - C6510 * C310 + C6505 * C317 - C6512 * C311 +
            C6506 * C318 - C6514 * C312 + C82862 * C319 - C6516 * C313) *
               C82863 +
           (C7440 - C7441 + C7442 - C7443 + C7444 - C7445 + C7446 - C7447) *
               C6585 +
           (C7448 - C7449 + C7450 - C7451 + C7452 - C7453 + C7454 - C7455) *
               C82639) *
              C82592 * C1149 +
          ((C6510 * C1155 - C6504 * C1164 + C6512 * C1154 - C6505 * C1162 +
            C6514 * C1153 - C6506 * C1160 + C6516 * C1152 - C82862 * C1158) *
               C6584 +
           (C6510 * C1317 - C6504 * C1322 + C6512 * C1318 - C6505 * C1323 +
            C6514 * C1319 - C6506 * C1324 + C6516 * C1320 - C82862 * C1325) *
               C82863 +
           (C6510 * C3348 - C6504 * C3359 + C6512 * C3347 - C6505 * C3357 +
            C6514 * C3346 - C6506 * C3355 + C6516 * C7859 - C82862 * C7860) *
               C6585 +
           (C6510 * C3613 - C6504 * C3619 + C6512 * C3614 - C6505 * C3620 +
            C6514 * C3615 - C6506 * C3621 + C6516 * C8065 - C82862 * C8066) *
               C82639) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C6584 +
            (C82844 * C316 - C80224 * C310 + C82533 * C317 - C80205 * C311) *
                C82863 +
            (C19977 - C19978 + C19979 - C19980) * C6585 +
            (C19981 - C19982 + C19983 - C19984) * C82639) *
               C25720 +
           ((C23266 - C23267 + C23268 - C23269) * C6584 +
            (C23270 - C23271 + C23272 - C23273) * C82863 +
            (C22328 - C22329 + C22330 - C22331) * C6585 +
            (C22332 - C22333 + C22334 - C22335) * C82639) *
               C25721 +
           ((C33524 - C33525 + C33526 - C33527) * C6584 +
            (C33528 - C33529 + C33530 - C33531) * C82863 +
            (C32598 - C32599 + C32600 - C32601) * C6585 +
            (C32602 - C32603 + C32604 - C32605) * C82639) *
               C82896) *
              C1149 +
          (((C23267 - C23266 + C23269 - C23268) * C6584 +
            (C23271 - C23270 + C23273 - C23272) * C82863 +
            (C22329 - C22328 + C22331 - C22330) * C6585 +
            (C22333 - C22332 + C22335 - C22334) * C82639) *
               C25720 +
           ((C33525 - C33524 + C33527 - C33526) * C6584 +
            (C33529 - C33528 + C33531 - C33530) * C82863 +
            (C32599 - C32598 + C32601 - C32600) * C6585 +
            (C32603 - C32602 + C32605 - C32604) * C82639) *
               C25721 +
           ((C80224 * C5690 - C82844 * C5695 + C80205 * C5689 -
             C82533 * C5693) *
                C6584 +
            (C80224 * C5984 - C82844 * C5987 + C80205 * C5985 -
             C82533 * C5988) *
                C82863 +
            (C80224 * C18262 - C82844 * C18265 + C80205 * C33197 -
             C82533 * C33198) *
                C6585 +
            (C80224 * C18537 - C82844 * C18539 + C80205 * C33521 -
             C82533 * C33522) *
                C82639) *
               C82896) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19131 * C169 - C19353 * C102 - C19131 * C310 + C19057 * C365 +
            C19132 * C753 - C19354 * C695 - C19132 * C857 + C19058 * C913 +
            C19133 * C1746 - C19355 * C1653 - C19133 * C1950 + C19059 * C2035 +
            C19134 * C2653 - C19356 * C2527 - C19134 * C2821 + C82871 * C2927) *
               C82844 +
           (C19382 + C19383 + C19384 + C19385) * C82533) *
              C82592 * C1149 -
          ((C19134 * C20478 - C19356 * C20408 - C19134 * C20614 +
            C82871 * C20682 + C19133 * C3444 - C19355 * C3344 - C19133 * C3617 +
            C19059 * C3701 + C19132 * C3443 - C19354 * C3347 - C19132 * C3614 +
            C19058 * C3702 + C19131 * C1214 - C19353 * C1154 - C19131 * C1318 +
            C19057 * C1372) *
               C82533 +
           (C19134 * C16353 - C19356 * C16304 - C19134 * C16445 +
            C82871 * C16492 + C19133 * C3442 - C19355 * C3345 - C19133 * C3616 +
            C19059 * C3703 + C19132 * C3441 - C19354 * C3348 - C19132 * C3613 +
            C19058 * C3704 + C19131 * C1213 - C19353 * C1155 - C19131 * C1317 +
            C19057 * C1373) *
               C82844) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6584 * C169 - C6812 * C102 - C6584 * C310 + C82863 * C365 +
            C6585 * C753 - C6813 * C695 - C6585 * C857 + C82639 * C913) *
               C6504 +
           (C6851 + C6852) * C6505 + (C6853 + C6854) * C6506 +
           (C6855 + C6856) * C82862) *
              C82592 * C1149 -
          ((C6585 * C7929 - C6813 * C7859 - C6585 * C8065 + C82639 * C8133 +
            C6584 * C1216 - C6812 * C1152 - C6584 * C1320 + C82863 * C1370) *
               C82862 +
           (C6585 * C3445 - C6813 * C3346 - C6585 * C3615 + C82639 * C3700 +
            C6584 * C1215 - C6812 * C1153 - C6584 * C1319 + C82863 * C1371) *
               C6506 +
           (C6585 * C3443 - C6813 * C3347 - C6585 * C3614 + C82639 * C3702 +
            C6584 * C1214 - C6812 * C1154 - C6584 * C1318 + C82863 * C1372) *
               C6505 +
           (C6585 * C3441 - C6813 * C3348 - C6585 * C3613 + C82639 * C3704 +
            C6584 * C1213 - C6812 * C1155 - C6584 * C1317 + C82863 * C1373) *
               C6504) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C6584 * C169 - C6812 * C102 - C6584 * C310 + C82863 * C365 +
             C6585 * C753 - C6813 * C695 - C6585 * C857 + C82639 * C913) *
                C82844 +
            (C6851 + C6852) * C82533) *
               C25720 +
           ((C12782 + C12783) * C82844 + (C10885 + C10886) * C82533) * C25721 +
           ((C33643 + C33644) * C82844 + (C31767 + C31768) * C82533) * C82896) *
              C1149 -
          (((C6585 * C33313 - C6813 * C33197 - C6585 * C33521 +
             C82639 * C33629 + C6584 * C5817 - C6812 * C5689 - C6584 * C5985 +
             C82863 * C6089) *
                C82533 +
            (C6585 * C18357 - C6813 * C18262 - C6585 * C18537 +
             C82639 * C18624 + C6584 * C5816 - C6812 * C5690 - C6584 * C5984 +
             C82863 * C6090) *
                C82844) *
               C82896 +
           ((C31768 + C31767) * C82533 + (C33644 + C33643) * C82844) * C25721 +
           ((C10886 + C10885) * C82533 + (C12783 + C12782) * C82844) * C25720) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C19131 +
            (C82592 * C441 - C239 * C310) * C19057 + (C2740 - C2741) * C19132 +
            (C3006 - C3007) * C19058 + (C2744 - C2745) * C19133 +
            (C3008 - C3009) * C19059 + (C15952 - C15953) * C19134 +
            (C16106 - C16107) * C82871) *
               C82844 +
           ((C253 - C254) * C19131 + (C448 - C449) * C19057 +
            (C1861 - C1862) * C19132 + (C2160 - C2161) * C19058 +
            (C1869 - C1870) * C19133 + (C2162 - C2163) * C19059 +
            (C19218 - C19219) * C19134 + (C19452 - C19453) * C82871) *
               C82533) *
              C1149 +
          (((C239 * C1155 - C82592 * C1265) * C19131 +
            (C239 * C1317 - C82592 * C1416) * C19057 +
            (C239 * C3348 - C82592 * C3527) * C19132 +
            (C239 * C3613 - C82592 * C3779) * C19058 +
            (C239 * C3345 - C82592 * C3530) * C19133 +
            (C239 * C3616 - C82592 * C3780) * C19059 +
            (C239 * C16304 - C82592 * C16399) * C19134 +
            (C239 * C16445 - C82592 * C16535) * C82871) *
               C82844 +
           ((C239 * C1154 - C82592 * C1266) * C19131 +
            (C239 * C1318 - C82592 * C1417) * C19057 +
            (C239 * C3347 - C82592 * C3528) * C19132 +
            (C239 * C3614 - C82592 * C3781) * C19058 +
            (C239 * C3344 - C82592 * C3531) * C19133 +
            (C239 * C3617 - C82592 * C3782) * C19059 +
            (C239 * C20408 - C82592 * C20546) * C19134 +
            (C239 * C20614 - C82592 * C20749) * C82871) *
               C82533) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C6584 +
            (C82592 * C441 - C239 * C310) * C82863 + (C2740 - C2741) * C6585 +
            (C3006 - C3007) * C82639) *
               C6504 +
           ((C253 - C254) * C6584 + (C448 - C449) * C82863 +
            (C1861 - C1862) * C6585 + (C2160 - C2161) * C82639) *
               C6505 +
           ((C257 - C258) * C6584 + (C450 - C451) * C82863 +
            (C1865 - C1866) * C6585 + (C2164 - C2165) * C82639) *
               C6506 +
           ((C261 - C262) * C6584 + (C452 - C453) * C82863 +
            (C6677 - C6678) * C6585 + (C6923 - C6924) * C82639) *
               C82862) *
              C1149 +
          (((C239 * C1155 - C82592 * C1265) * C6584 +
            (C239 * C1317 - C82592 * C1416) * C82863 +
            (C239 * C3348 - C82592 * C3527) * C6585 +
            (C239 * C3613 - C82592 * C3779) * C82639) *
               C6504 +
           ((C239 * C1154 - C82592 * C1266) * C6584 +
            (C239 * C1318 - C82592 * C1417) * C82863 +
            (C239 * C3347 - C82592 * C3528) * C6585 +
            (C239 * C3614 - C82592 * C3781) * C82639) *
               C6505 +
           ((C239 * C1153 - C82592 * C1267) * C6584 +
            (C239 * C1319 - C82592 * C1418) * C82863 +
            (C239 * C3346 - C82592 * C3529) * C6585 +
            (C239 * C3615 - C82592 * C3783) * C82639) *
               C6506 +
           ((C239 * C1152 - C82592 * C1268) * C6584 +
            (C239 * C1320 - C82592 * C1419) * C82863 +
            (C239 * C7859 - C82592 * C7997) * C6585 +
            (C239 * C8065 - C82592 * C8200) * C82639) *
               C82862) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
             C82896 * C4299 - C25873 * C4108) *
                C6584 +
            (C25720 * C441 - C25871 * C310 + C25721 * C1416 - C25872 * C1317 +
             C82896 * C4593 - C25873 * C4405) *
                C82863 +
            (C28710 - C28711 + C28712 - C28713 + C28714 - C28715) * C6585 +
            (C28956 - C28957 + C28958 - C28959 + C28960 - C28961) * C82639) *
               C82844 +
           ((C25875 - C25876 + C25877 - C25878 + C25879 - C25880) * C6584 +
            (C26121 - C26122 + C26123 - C26124 + C26125 - C26126) * C82863 +
            (C31547 - C31548 + C31549 - C31550 + C31551 - C31552) * C6585 +
            (C31867 - C31868 + C31869 - C31870 + C31871 - C31872) * C82639) *
               C82533) *
              C1149 +
          (((C25871 * C1155 - C25720 * C1265 + C25872 * C4108 - C25721 * C4299 +
             C25873 * C5690 - C82896 * C5904) *
                C6584 +
            (C25871 * C1317 - C25720 * C1416 + C25872 * C4405 - C25721 * C4593 +
             C25873 * C5984 - C82896 * C6185) *
                C82863 +
            (C25871 * C3348 - C25720 * C3527 + C25872 * C4976 - C25721 * C5140 +
             C25873 * C18262 - C82896 * C18459) *
                C6585 +
            (C25871 * C3613 - C25720 * C3779 + C25872 * C5220 - C25721 * C5377 +
             C25873 * C18537 - C82896 * C18741) *
                C82639) *
               C82844 +
           ((C25871 * C1154 - C25720 * C1266 + C25872 * C4109 - C25721 * C4300 +
             C25873 * C5689 - C82896 * C5905) *
                C6584 +
            (C25871 * C1318 - C25720 * C1417 + C25872 * C4406 - C25721 * C4594 +
             C25873 * C5985 - C82896 * C6186) *
                C82863 +
            (C25871 * C3347 - C25720 * C3528 + C25872 * C4975 - C25721 * C5141 +
             C25873 * C33197 - C82896 * C33421) *
                C6585 +
            (C25871 * C3614 - C25720 * C3781 + C25872 * C5221 - C25721 * C5378 +
             C25873 * C33521 - C82896 * C33742) *
                C82639) *
               C82533) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezx[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C239 +
            (C82844 * C503 - C80224 * C497 + C82533 * C504 - C80205 * C498) *
                C82592) *
               C19057 +
           ((C19977 - C19978 + C19979 - C19980) * C239 +
            (C20199 - C20200 + C20201 - C20202) * C82592) *
               C19058 +
           ((C19985 - C19986 + C19987 - C19988) * C239 +
            (C20203 - C20204 + C20205 - C20206) * C82592) *
               C19059 +
           ((C19993 - C19994 + C19995 - C19996) * C239 +
            (C20207 - C20208 + C20209 - C20210) * C82592) *
               C82871) *
              C1149 +
          (((C80224 * C1155 - C82844 * C1164 + C80205 * C1154 -
             C82533 * C1162) *
                C239 +
            (C80224 * C1463 - C82844 * C1468 + C80205 * C1464 -
             C82533 * C1469) *
                C82592) *
               C19057 +
           ((C80224 * C3348 - C82844 * C3359 + C80205 * C3347 -
             C82533 * C3357) *
                C239 +
            (C80224 * C3859 - C82844 * C3865 + C80205 * C3860 -
             C82533 * C3866) *
                C82592) *
               C19058 +
           ((C80224 * C3345 - C82844 * C3353 + C80205 * C3344 -
             C82533 * C3351) *
                C239 +
            (C80224 * C3862 - C82844 * C3868 + C80205 * C3863 -
             C82533 * C3869) *
                C82592) *
               C19059 +
           ((C80224 * C16304 - C82844 * C16307 + C80205 * C20408 -
             C82533 * C20409) *
                C239 +
            (C80224 * C16579 - C82844 * C16581 + C80205 * C20816 -
             C82533 * C20817) *
                C82592) *
               C82871) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6504 * C108 - C6510 * C102 + C6505 * C110 - C6512 * C103 +
             C6506 * C112 - C6514 * C104 + C82862 * C114 - C6516 * C105) *
                C239 +
            (C6504 * C503 - C6510 * C497 + C6505 * C504 - C6512 * C498 +
             C6506 * C505 - C6514 * C499 + C82862 * C506 - C6516 * C500) *
                C82592) *
               C82863 +
           ((C7440 - C7441 + C7442 - C7443 + C7444 - C7445 + C7446 - C7447) *
                C239 +
            (C7654 - C7655 + C7656 - C7657 + C7658 - C7659 + C7660 - C7661) *
                C82592) *
               C82639) *
              C1149 +
          (((C6510 * C1155 - C6504 * C1164 + C6512 * C1154 - C6505 * C1162 +
             C6514 * C1153 - C6506 * C1160 + C6516 * C1152 - C82862 * C1158) *
                C239 +
            (C6510 * C1463 - C6504 * C1468 + C6512 * C1464 - C6505 * C1469 +
             C6514 * C1465 - C6506 * C1470 + C6516 * C1466 - C82862 * C1471) *
                C82592) *
               C82863 +
           ((C6510 * C3348 - C6504 * C3359 + C6512 * C3347 - C6505 * C3357 +
             C6514 * C3346 - C6506 * C3355 + C6516 * C7859 - C82862 * C7860) *
                C239 +
            (C6510 * C3859 - C6504 * C3865 + C6512 * C3860 - C6505 * C3866 +
             C6514 * C3861 - C6506 * C3867 + C6516 * C8267 - C82862 * C8268) *
                C82592) *
               C82639) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C25871 +
            (C82844 * C503 - C80224 * C497 + C82533 * C504 - C80205 * C498) *
                C25720 +
            (C23266 - C23267 + C23268 - C23269) * C25872 +
            (C23568 - C23569 + C23570 - C23571) * C25721 +
            (C33524 - C33525 + C33526 - C33527) * C25873 +
            (C33844 - C33845 + C33846 - C33847) * C82896) *
               C82863 +
           ((C19977 - C19978 + C19979 - C19980) * C25871 +
            (C20199 - C20200 + C20201 - C20202) * C25720 +
            (C22328 - C22329 + C22330 - C22331) * C25872 +
            (C22642 - C22643 + C22644 - C22645) * C25721 +
            (C32598 - C32599 + C32600 - C32601) * C25873 +
            (C32900 - C32901 + C32902 - C32903) * C82896) *
               C82639) *
              C1149 +
          (((C23267 - C23266 + C23269 - C23268) * C25871 +
            (C23569 - C23568 + C23571 - C23570) * C25720 +
            (C33525 - C33524 + C33527 - C33526) * C25872 +
            (C33845 - C33844 + C33847 - C33846) * C25721 +
            (C80224 * C5690 - C82844 * C5695 + C80205 * C5689 -
             C82533 * C5693) *
                C25873 +
            (C80224 * C6262 - C82844 * C6265 + C80205 * C6263 -
             C82533 * C6266) *
                C82896) *
               C82863 +
           ((C22329 - C22328 + C22331 - C22330) * C25871 +
            (C22643 - C22642 + C22645 - C22644) * C25720 +
            (C32599 - C32598 + C32601 - C32600) * C25872 +
            (C32901 - C32900 + C32903 - C32902) * C25721 +
            (C80224 * C18262 - C82844 * C18265 + C80205 * C33197 -
             C82533 * C33198) *
                C25873 +
            (C80224 * C18817 - C82844 * C18819 + C80205 * C33841 -
             C82533 * C33842) *
                C82896) *
               C82639) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19057 * C169 - C19131 * C102 + C19058 * C753 - C19132 * C695 +
             C19059 * C1746 - C19133 * C1653 + C82871 * C2653 -
             C19134 * C2527) *
                C239 +
            (C19057 * C551 - C19131 * C497 + C19058 * C1055 - C19132 * C1003 +
             C19059 * C2323 - C19133 * C2241 + C82871 * C3175 -
             C19134 * C3083) *
                C82592) *
               C82844 +
           ((C19136 - C19137 + C19138 - C19139 + C19140 - C19141 + C19142 -
             C19143) *
                C239 +
            (C19586 - C19587 + C19588 - C19589 + C19590 - C19591 + C19592 -
             C19593) *
                C82592) *
               C82533) *
              C1149 +
          (((C19131 * C1155 - C19057 * C1213 + C19132 * C3348 - C19058 * C3441 +
             C19133 * C3345 - C19059 * C3442 + C19134 * C16304 -
             C82871 * C16353) *
                C239 +
            (C19131 * C1463 - C19057 * C1515 + C19132 * C3859 - C19058 * C3945 +
             C19133 * C3862 - C19059 * C3946 + C19134 * C16579 -
             C82871 * C16625) *
                C82592) *
               C82844 +
           ((C19131 * C1154 - C19057 * C1214 + C19132 * C3347 - C19058 * C3443 +
             C19133 * C3344 - C19059 * C3444 + C19134 * C20408 -
             C82871 * C20478) *
                C239 +
            (C19131 * C1464 - C19057 * C1516 + C19132 * C3860 - C19058 * C3947 +
             C19133 * C3863 - C19059 * C3948 + C19134 * C20816 -
             C82871 * C20884) *
                C82592) *
               C82533) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C239 +
            (C82863 * C551 - C6584 * C497 + C82639 * C1055 - C6585 * C1003) *
                C82592) *
               C6504 +
           ((C6587 - C6588 + C6589 - C6590) * C239 +
            (C7057 - C7058 + C7059 - C7060) * C82592) *
               C6505 +
           ((C6595 - C6596 + C6597 - C6598) * C239 +
            (C7061 - C7062 + C7063 - C7064) * C82592) *
               C6506 +
           ((C6603 - C6604 + C6605 - C6606) * C239 +
            (C7065 - C7066 + C7067 - C7068) * C82592) *
               C82862) *
              C1149 +
          (((C6584 * C1155 - C82863 * C1213 + C6585 * C3348 - C82639 * C3441) *
                C239 +
            (C6584 * C1463 - C82863 * C1515 + C6585 * C3859 - C82639 * C3945) *
                C82592) *
               C6504 +
           ((C6584 * C1154 - C82863 * C1214 + C6585 * C3347 - C82639 * C3443) *
                C239 +
            (C6584 * C1464 - C82863 * C1516 + C6585 * C3860 - C82639 * C3947) *
                C82592) *
               C6505 +
           ((C6584 * C1153 - C82863 * C1215 + C6585 * C3346 - C82639 * C3445) *
                C239 +
            (C6584 * C1465 - C82863 * C1517 + C6585 * C3861 - C82639 * C3949) *
                C82592) *
               C6506 +
           ((C6584 * C1152 - C82863 * C1216 + C6585 * C7859 - C82639 * C7929) *
                C239 +
            (C6584 * C1466 - C82863 * C1518 + C6585 * C8267 - C82639 * C8335) *
                C82592) *
               C82862) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C25871 +
            (C82863 * C551 - C6584 * C497 + C82639 * C1055 - C6585 * C1003) *
                C25720 +
            (C12468 - C12469 + C12470 - C12471) * C25872 +
            (C13078 - C13079 + C13080 - C13081) * C25721 +
            (C33316 - C33317 + C33318 - C33319) * C25873 +
            (C33947 - C33948 + C33949 - C33950) * C82896) *
               C82844 +
           ((C6587 - C6588 + C6589 - C6590) * C25871 +
            (C7057 - C7058 + C7059 - C7060) * C25720 +
            (C10535 - C10536 + C10537 - C10538) * C25872 +
            (C11191 - C11192 + C11193 - C11194) * C25721 +
            (C31441 - C31442 + C31443 - C31444) * C25873 +
            (C32069 - C32070 + C32071 - C32072) * C82896) *
               C82533) *
              C1149 +
          (((C12469 - C12468 + C12471 - C12470) * C25871 +
            (C13079 - C13078 + C13081 - C13080) * C25720 +
            (C33317 - C33316 + C33319 - C33318) * C25872 +
            (C33948 - C33947 + C33950 - C33949) * C25721 +
            (C6584 * C5690 - C82863 * C5816 + C6585 * C18262 -
             C82639 * C18357) *
                C25873 +
            (C6584 * C6262 - C82863 * C6354 + C6585 * C18817 -
             C82639 * C18899) *
                C82896) *
               C82844 +
           ((C10536 - C10535 + C10538 - C10537) * C25871 +
            (C11192 - C11191 + C11194 - C11193) * C25720 +
            (C31442 - C31441 + C31444 - C31443) * C25872 +
            (C32070 - C32069 + C32072 - C32071) * C25721 +
            (C6584 * C5689 - C82863 * C5817 + C6585 * C33197 -
             C82639 * C33313) *
                C25873 +
            (C6584 * C6263 - C82863 * C6355 + C6585 * C33841 -
             C82639 * C33945) *
                C82896) *
               C82533) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C19057 +
            C3268 * C19058 + C3269 * C19059 + C16260 * C82871) *
               C82844 +
           (C19660 + C19661 + C19662 + C19670) * C82533) *
              C1149 -
          (((C239 * C20546 - C607 * C20408 - C239 * C20816 + C82592 * C20951) *
                C82871 +
            (C239 * C3531 - C607 * C3344 - C239 * C3863 + C82592 * C4027) *
                C19059 +
            (C239 * C3528 - C607 * C3347 - C239 * C3860 + C82592 * C4028) *
                C19058 +
            (C239 * C1266 - C607 * C1154 - C239 * C1464 + C82592 * C1565) *
                C19057) *
               C82533 +
           ((C239 * C16399 - C607 * C16304 - C239 * C16579 + C82592 * C16670) *
                C82871 +
            (C239 * C3530 - C607 * C3345 - C239 * C3862 + C82592 * C4029) *
                C19059 +
            (C239 * C3527 - C607 * C3348 - C239 * C3859 + C82592 * C4030) *
                C19058 +
            (C239 * C1265 - C607 * C1155 - C239 * C1463 + C82592 * C1566) *
                C19057) *
               C82844) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82863 +
            C3268 * C82639) *
               C6504 +
           (C7135 + C7136) * C6505 + (C7137 + C7138) * C6506 +
           (C7139 + C7147) * C82862) *
              C1149 -
          (((C239 * C7997 - C607 * C7859 - C239 * C8267 + C82592 * C8402) *
                C82639 +
            (C239 * C1268 - C607 * C1152 - C239 * C1466 + C82592 * C1563) *
                C82863) *
               C82862 +
           ((C239 * C3529 - C607 * C3346 - C239 * C3861 + C82592 * C4026) *
                C82639 +
            (C239 * C1267 - C607 * C1153 - C239 * C1465 + C82592 * C1564) *
                C82863) *
               C6506 +
           ((C239 * C3528 - C607 * C3347 - C239 * C3860 + C82592 * C4028) *
                C82639 +
            (C239 * C1266 - C607 * C1154 - C239 * C1464 + C82592 * C1565) *
                C82863) *
               C6505 +
           ((C239 * C3527 - C607 * C3348 - C239 * C3859 + C82592 * C4030) *
                C82639 +
            (C239 * C1265 - C607 * C1155 - C239 * C1463 + C82592 * C1566) *
                C82863) *
               C6504) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25871 * C240 - C26354 * C102 - C25871 * C497 + C25720 * C608 +
             C25872 * C1265 - C26355 * C1155 - C25872 * C1463 + C25721 * C1566 +
             C25873 * C4299 - C26356 * C4108 - C25873 * C4683 +
             C82896 * C4854) *
                C82863 +
            (C29226 + C29227 + C29228) * C82639) *
               C82844 +
           ((C26394 + C26395 + C26396) * C82863 +
            (C32189 + C32190 + C32191) * C82639) *
               C82533) *
              C1149 -
          (((C25873 * C33421 - C26356 * C33197 - C25873 * C33841 +
             C82896 * C34048 + C25872 * C5141 - C26355 * C4975 -
             C25872 * C5455 + C25721 * C5612 + C25871 * C3528 - C26354 * C3347 -
             C25871 * C3860 + C25720 * C4028) *
                C82639 +
            (C25873 * C5905 - C26356 * C5689 - C25873 * C6263 + C82896 * C6436 +
             C25872 * C4300 - C26355 * C4109 - C25872 * C4684 + C25721 * C4855 +
             C25871 * C1266 - C26354 * C1154 - C25871 * C1464 +
             C25720 * C1565) *
                C82863) *
               C82533 +
           ((C25873 * C18459 - C26356 * C18262 - C25873 * C18817 +
             C82896 * C18988 + C25872 * C5140 - C26355 * C4976 -
             C25872 * C5454 + C25721 * C5613 + C25871 * C3527 - C26354 * C3348 -
             C25871 * C3859 + C25720 * C4030) *
                C82639 +
            (C25873 * C5904 - C26356 * C5690 - C25873 * C6262 + C82896 * C6437 +
             C25872 * C4299 - C26355 * C4108 - C25872 * C4683 + C25721 * C4854 +
             C25871 * C1265 - C26354 * C1155 - C25871 * C1463 +
             C25720 * C1566) *
                C82863) *
               C82844) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C82864 +
            C18282 * C82679) *
               C19057 +
           (C15856 * C82864 + C17474 * C82679) * C19058 +
           (C15857 * C82864 + C17476 * C82679) * C19059 +
           (C15858 * C82864 + (C15405 * C16307 - C15406 * C16304 -
                               C15405 * C16308 + C82523 * C16310) *
                                  C82679) *
               C82871) *
              C82938 * C82939 * C90 -
          (((C15405 * C20409 - C15406 * C20408 - C15405 * C20410 +
             C82523 * C20411) *
                C82679 +
            (C15405 * C2530 - C15406 * C2526 - C15405 * C2531 +
             C82523 * C2535) *
                C82864) *
               C82871 +
           ((C15405 * C3351 - C15406 * C3344 - C15405 * C3352 +
             C82523 * C3362) *
                C82679 +
            (C15405 * C1659 - C15406 * C1654 - C15405 * C1660 +
             C82523 * C1666) *
                C82864) *
               C19059 +
           ((C15405 * C3357 - C15406 * C3347 - C15405 * C3358 +
             C82523 * C3365) *
                C82679 +
            (C15405 * C702 - C15406 * C694 - C15405 * C703 + C82523 * C709) *
                C82864) *
               C19058 +
           ((C15405 * C1162 - C15406 * C1154 - C15405 * C1163 +
             C82523 * C1169) *
                C82679 +
            (C15405 * C110 - C15406 * C103 - C15405 * C111 + C82523 * C121) *
                C82864) *
               C19057) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1647 * C108 - C1648 * C102 - C1647 * C109 + C1641 * C120 +
             C1649 * C110 - C1650 * C103 - C1649 * C111 + C1642 * C121 +
             C1651 * C112 - C1652 * C104 - C1651 * C113 + C82885 * C122) *
                C82864 +
            (C5737 + C5738 + C5739) * C82679) *
               C82863 +
           ((C2574 + C2575 + C2576) * C82864 +
            (C1647 * C3359 - C1648 * C3348 - C1647 * C3360 + C1641 * C3366 +
             C1649 * C3357 - C1650 * C3347 - C1649 * C3358 + C1642 * C3365 +
             C1651 * C3355 - C1652 * C3346 - C1651 * C3356 + C82885 * C3364) *
                C82679) *
               C82639) *
              C82938 * C82939 * C90 -
          (((C1651 * C7860 - C1652 * C7859 - C1651 * C7861 + C82885 * C7862 +
             C1649 * C3355 - C1650 * C3346 - C1649 * C3356 + C1642 * C3364 +
             C1647 * C3357 - C1648 * C3347 - C1647 * C3358 + C1641 * C3365) *
                C82679 +
            (C1651 * C698 - C1652 * C692 - C1651 * C699 + C82885 * C707 +
             C1649 * C700 - C1650 * C693 - C1649 * C701 + C1642 * C708 +
             C1647 * C702 - C1648 * C694 - C1647 * C703 + C1641 * C709) *
                C82864) *
               C82639 +
           ((C1651 * C1158 - C1652 * C1152 - C1651 * C1159 + C82885 * C1167 +
             C1649 * C1160 - C1650 * C1153 - C1649 * C1161 + C1642 * C1168 +
             C1647 * C1162 - C1648 * C1154 - C1647 * C1163 + C1641 * C1169) *
                C82679 +
            (C1651 * C114 - C1652 * C105 - C1651 * C115 + C82885 * C123 +
             C1649 * C112 - C1650 * C104 - C1649 * C113 + C1642 * C122 +
             C1647 * C110 - C1648 * C103 - C1647 * C111 + C1641 * C121) *
                C82864) *
               C82863) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C34115 +
            C18282 * C34116 + C18283 * C34117 + C30853 * C82878) *
               C82863 +
           (C15856 * C34115 + C17474 * C34116 + C17475 * C34117 +
            (C15405 * C18265 - C15406 * C18262 - C15405 * C18266 +
             C82523 * C18268) *
                C82878) *
               C82639) *
              C82938 * C82939 * C90 -
          (((C15405 * C33198 - C15406 * C33197 - C15405 * C33199 +
             C82523 * C33200) *
                C82878 +
            (C15405 * C4979 - C15406 * C4975 - C15405 * C4980 +
             C82523 * C4984) *
                C34117 +
            (C15405 * C3357 - C15406 * C3347 - C15405 * C3358 +
             C82523 * C3365) *
                C34116 +
            (C15405 * C702 - C15406 * C694 - C15405 * C703 + C82523 * C709) *
                C34115) *
               C82639 +
           ((C15405 * C5693 - C15406 * C5689 - C15405 * C5694 +
             C82523 * C5698) *
                C82878 +
            (C15405 * C4114 - C15406 * C4109 - C15405 * C4115 +
             C82523 * C4121) *
                C34117 +
            (C15405 * C1162 - C15406 * C1154 - C15405 * C1163 +
             C82523 * C1169) *
                C34116 +
            (C15405 * C110 - C15406 * C103 - C15405 * C111 + C82523 * C121) *
                C34115) *
               C82863) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19057 * C169 - C19131 * C102 + C19058 * C753 - C19132 * C695 +
             C19059 * C1746 - C19133 * C1653 + C82871 * C2653 -
             C19134 * C2527) *
                C15405 +
            (C19057 * C175 - C19131 * C109 + C19058 * C758 - C19132 * C705 +
             C19059 * C1750 - C19133 * C1658 + C82871 * C2656 -
             C19134 * C2533) *
                C82523) *
               C82864 +
           ((C19057 * C1213 - C19131 * C1155 + C19058 * C3441 - C19132 * C3348 +
             C19059 * C3442 - C19133 * C3345 + C82871 * C16353 -
             C19134 * C16304) *
                C15405 +
            (C19057 * C1218 - C19131 * C1165 + C19058 * C3447 - C19132 * C3360 +
             C19059 * C3448 - C19133 * C3354 + C82871 * C16355 -
             C19134 * C16308) *
                C82523) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C19137 - C19136 + C19139 - C19138 + C19141 - C19140 + C19143 -
             C19142) *
                C15405 +
            (C19145 - C19144 + C19147 - C19146 + C19149 - C19148 + C19151 -
             C19150) *
                C82523) *
               C82864 +
           ((C19131 * C1154 - C19057 * C1214 + C19132 * C3347 - C19058 * C3443 +
             C19133 * C3344 - C19059 * C3444 + C19134 * C20408 -
             C82871 * C20478) *
                C15405 +
            (C19131 * C1163 - C19057 * C1219 + C19132 * C3358 - C19058 * C3449 +
             C19133 * C3352 - C19059 * C3450 + C19134 * C20410 -
             C82871 * C20479) *
                C82523) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C1647 +
            (C82863 * C175 - C6584 * C109 + C82639 * C758 - C6585 * C705) *
                C1641 +
            (C6587 - C6588 + C6589 - C6590) * C1649 +
            (C6591 - C6592 + C6593 - C6594) * C1642 +
            (C6595 - C6596 + C6597 - C6598) * C1651 +
            (C6599 - C6600 + C6601 - C6602) * C82885) *
               C82864 +
           ((C82863 * C1213 - C6584 * C1155 + C82639 * C3441 - C6585 * C3348) *
                C1647 +
            (C82863 * C1218 - C6584 * C1165 + C82639 * C3447 - C6585 * C3360) *
                C1641 +
            (C10535 - C10536 + C10537 - C10538) * C1649 +
            (C10539 - C10540 + C10541 - C10542) * C1642 +
            (C10543 - C10544 + C10545 - C10546) * C1651 +
            (C10547 - C10548 + C10549 - C10550) * C82885) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C6588 - C6587 + C6590 - C6589) * C1647 +
            (C6592 - C6591 + C6594 - C6593) * C1641 +
            (C6596 - C6595 + C6598 - C6597) * C1649 +
            (C6600 - C6599 + C6602 - C6601) * C1642 +
            (C6604 - C6603 + C6606 - C6605) * C1651 +
            (C6608 - C6607 + C6610 - C6609) * C82885) *
               C82864 +
           ((C10536 - C10535 + C10538 - C10537) * C1647 +
            (C10540 - C10539 + C10542 - C10541) * C1641 +
            (C10544 - C10543 + C10546 - C10545) * C1649 +
            (C10548 - C10547 + C10550 - C10549) * C1642 +
            (C6584 * C1152 - C82863 * C1216 + C6585 * C7859 - C82639 * C7929) *
                C1651 +
            (C6584 * C1159 - C82863 * C1221 + C6585 * C7861 - C82639 * C7930) *
                C82885) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C15405 +
            (C82863 * C175 - C6584 * C109 + C82639 * C758 - C6585 * C705) *
                C82523) *
               C34115 +
           ((C12468 - C12469 + C12470 - C12471) * C15405 +
            (C12472 - C12473 + C12474 - C12475) * C82523) *
               C34116 +
           ((C33316 - C33317 + C33318 - C33319) * C15405 +
            (C33320 - C33321 + C33322 - C33323) * C82523) *
               C34117 +
           ((C82863 * C5816 - C6584 * C5690 + C82639 * C18357 -
             C6585 * C18262) *
                C15405 +
            (C82863 * C5819 - C6584 * C5696 + C82639 * C18359 -
             C6585 * C18266) *
                C82523) *
               C82878) *
              C82938 * C82939 * C90 +
          (((C6588 - C6587 + C6590 - C6589) * C15405 +
            (C6592 - C6591 + C6594 - C6593) * C82523) *
               C34115 +
           ((C10536 - C10535 + C10538 - C10537) * C15405 +
            (C10540 - C10539 + C10542 - C10541) * C82523) *
               C34116 +
           ((C31442 - C31441 + C31444 - C31443) * C15405 +
            (C31446 - C31445 + C31448 - C31447) * C82523) *
               C34117 +
           ((C6584 * C5689 - C82863 * C5817 + C6585 * C33197 -
             C82639 * C33313) *
                C15405 +
            (C6584 * C5694 - C82863 * C5820 + C6585 * C33199 -
             C82639 * C33314) *
                C82523) *
               C82878) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C15405 +
            (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
                C82523) *
               C19057 +
           ((C11640 - C11641 + C11642 - C11643) * C15405 +
            (C11644 - C11645 + C11646 - C11647) * C82523) *
               C19058 +
           ((C22222 - C22223 + C22224 - C22225) * C15405 +
            (C22226 - C22227 + C22228 - C22229) * C82523) *
               C19059 +
           ((C82864 * C2733 - C8607 * C2527 + C82679 * C16399 -
             C8608 * C16304) *
                C15405 +
            (C82864 * C2736 - C8607 * C2533 + C82679 * C16401 -
             C8608 * C16308) *
                C82523) *
               C82871) *
              C82938 * C82939 * C90 +
          (((C8611 - C8610 + C8613 - C8612) * C15405 +
            (C8615 - C8614 + C8617 - C8616) * C82523) *
               C19057 +
           ((C10650 - C10649 + C10652 - C10651) * C15405 +
            (C10654 - C10653 + C10656 - C10655) * C82523) *
               C19058 +
           ((C21260 - C21259 + C21262 - C21261) * C15405 +
            (C21264 - C21263 + C21266 - C21265) * C82523) *
               C19059 +
           ((C8607 * C2526 - C82864 * C2734 + C8608 * C20408 -
             C82679 * C20546) *
                C15405 +
            (C8607 * C2531 - C82864 * C2737 + C8608 * C20410 -
             C82679 * C20547) *
                C82523) *
               C82871) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C1647 +
            (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
                C1641 +
            (C8610 - C8611 + C8612 - C8613) * C1649 +
            (C8614 - C8615 + C8616 - C8617) * C1642 +
            (C8618 - C8619 + C8620 - C8621) * C1651 +
            (C8622 - C8623 + C8624 - C8625) * C82885) *
               C82863 +
           ((C82864 * C805 - C8607 * C695 + C82679 * C3527 - C8608 * C3348) *
                C1647 +
            (C82864 * C810 - C8607 * C705 + C82679 * C3533 - C8608 * C3360) *
                C1641 +
            (C10649 - C10650 + C10651 - C10652) * C1649 +
            (C10653 - C10654 + C10655 - C10656) * C1642 +
            (C10657 - C10658 + C10659 - C10660) * C1651 +
            (C10661 - C10662 + C10663 - C10664) * C82885) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C8611 - C8610 + C8613 - C8612) * C1647 +
            (C8615 - C8614 + C8617 - C8616) * C1641 +
            (C8619 - C8618 + C8621 - C8620) * C1649 +
            (C8623 - C8622 + C8625 - C8624) * C1642 +
            (C8627 - C8626 + C8629 - C8628) * C1651 +
            (C8631 - C8630 + C8633 - C8632) * C82885) *
               C82863 +
           ((C10650 - C10649 + C10652 - C10651) * C1647 +
            (C10654 - C10653 + C10656 - C10655) * C1641 +
            (C10658 - C10657 + C10660 - C10659) * C1649 +
            (C10662 - C10661 + C10664 - C10663) * C1642 +
            (C8607 * C692 - C82864 * C808 + C8608 * C7859 - C82679 * C7997) *
                C1651 +
            (C8607 * C699 - C82864 * C813 + C8608 * C7861 - C82679 * C7998) *
                C82885) *
               C82639) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C34115 * C240 - C34255 * C102 + C34116 * C1265 - C34256 * C1155 +
             C34117 * C4299 - C34257 * C4108 + C82878 * C5904 -
             C34258 * C5690) *
                C15405 +
            (C34115 * C246 - C34255 * C109 + C34116 * C1270 - C34256 * C1165 +
             C34117 * C4303 - C34257 * C4113 + C82878 * C5907 -
             C34258 * C5696) *
                C82523) *
               C82863 +
           ((C34115 * C805 - C34255 * C695 + C34116 * C3527 - C34256 * C3348 +
             C34117 * C5140 - C34257 * C4976 + C82878 * C18459 -
             C34258 * C18262) *
                C15405 +
            (C34115 * C810 - C34255 * C705 + C34116 * C3533 - C34256 * C3360 +
             C34117 * C5143 - C34257 * C4982 + C82878 * C18461 -
             C34258 * C18266) *
                C82523) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C34261 - C34260 + C34263 - C34262 + C34265 - C34264 + C34267 -
             C34266) *
                C15405 +
            (C34269 - C34268 + C34271 - C34270 + C34273 - C34272 + C34275 -
             C34274) *
                C82523) *
               C82863 +
           ((C34255 * C694 - C34115 * C806 + C34256 * C3347 - C34116 * C3528 +
             C34257 * C4975 - C34117 * C5141 + C34258 * C33197 -
             C82878 * C33421) *
                C15405 +
            (C34255 * C703 - C34115 * C811 + C34256 * C3358 - C34116 * C3534 +
             C34257 * C4980 - C34117 * C5144 + C34258 * C33199 -
             C82878 * C33422) *
                C82523) *
               C82639) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C19131 +
            (C82523 * C316 - C15405 * C310) * C19057 +
            (C16004 - C16005) * C19132 + (C16006 - C16007) * C19058 +
            (C16008 - C16009) * C19133 + (C16010 - C16011) * C19059 +
            (C16012 - C16013) * C19134 + (C16014 - C16015) * C82871) *
               C82864 +
           ((C18542 - C18543) * C19131 + (C18544 - C18545) * C19057 +
            (C17734 - C17735) * C19132 + (C17736 - C17737) * C19058 +
            (C17738 - C17739) * C19133 + (C17740 - C17741) * C19059 +
            (C82523 * C16307 - C15405 * C16304) * C19134 +
            (C82523 * C16447 - C15405 * C16445) * C82871) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C15405 * C103 - C82523 * C110) * C19131 +
            (C15405 * C311 - C82523 * C317) * C19057 +
            (C15405 * C694 - C82523 * C702) * C19132 +
            (C15405 * C858 - C82523 * C863) * C19058 +
            (C15405 * C1654 - C82523 * C1659) * C19133 +
            (C15405 * C1951 - C82523 * C1955) * C19059 +
            (C15405 * C2526 - C82523 * C2530) * C19134 +
            (C15405 * C2822 - C82523 * C2825) * C82871) *
               C82864 +
           ((C15405 * C1154 - C82523 * C1162) * C19131 +
            (C15405 * C1318 - C82523 * C1323) * C19057 +
            (C15405 * C3347 - C82523 * C3357) * C19132 +
            (C15405 * C3614 - C82523 * C3620) * C19058 +
            (C15405 * C3344 - C82523 * C3351) * C19133 +
            (C15405 * C3617 - C82523 * C3623) * C19059 +
            (C15405 * C20408 - C82523 * C20409) * C19134 +
            (C15405 * C20614 - C82523 * C20615) * C82871) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
             C82885 * C112 - C1651 * C104) *
                C6584 +
            (C1641 * C316 - C1647 * C310 + C1642 * C317 - C1649 * C311 +
             C82885 * C318 - C1651 * C312) *
                C82863 +
            (C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C6585 +
            (C2834 - C2835 + C2836 - C2837 + C2838 - C2839) * C82639) *
               C82864 +
           ((C5991 - C5992 + C5993 - C5994 + C5995 - C5996) * C6584 +
            (C5997 - C5998 + C5999 - C6000 + C6001 - C6002) * C82863 +
            (C1641 * C3359 - C1647 * C3348 + C1642 * C3357 - C1649 * C3347 +
             C82885 * C3355 - C1651 * C3346) *
                C6585 +
            (C1641 * C3619 - C1647 * C3613 + C1642 * C3620 - C1649 * C3614 +
             C82885 * C3621 - C1651 * C3615) *
                C82639) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C1647 * C103 - C1641 * C110 + C1649 * C104 - C1642 * C112 +
             C1651 * C105 - C82885 * C114) *
                C6584 +
            (C1647 * C311 - C1641 * C317 + C1649 * C312 - C1642 * C318 +
             C1651 * C313 - C82885 * C319) *
                C82863 +
            (C1647 * C694 - C1641 * C702 + C1649 * C693 - C1642 * C700 +
             C1651 * C692 - C82885 * C698) *
                C6585 +
            (C1647 * C858 - C1641 * C863 + C1649 * C859 - C1642 * C864 +
             C1651 * C860 - C82885 * C865) *
                C82639) *
               C82864 +
           ((C1647 * C1154 - C1641 * C1162 + C1649 * C1153 - C1642 * C1160 +
             C1651 * C1152 - C82885 * C1158) *
                C6584 +
            (C1647 * C1318 - C1641 * C1323 + C1649 * C1319 - C1642 * C1324 +
             C1651 * C1320 - C82885 * C1325) *
                C82863 +
            (C1647 * C3347 - C1641 * C3357 + C1649 * C3346 - C1642 * C3355 +
             C1651 * C7859 - C82885 * C7860) *
                C6585 +
            (C1647 * C3614 - C1641 * C3620 + C1649 * C3615 - C1642 * C3621 +
             C1651 * C8065 - C82885 * C8066) *
                C82639) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C6584 +
            (C82523 * C316 - C15405 * C310) * C82863 +
            (C16004 - C16005) * C6585 + (C16006 - C16007) * C82639) *
               C34115 +
           ((C18542 - C18543) * C6584 + (C18544 - C18545) * C82863 +
            (C17734 - C17735) * C6585 + (C17736 - C17737) * C82639) *
               C34116 +
           ((C18546 - C18547) * C6584 + (C18548 - C18549) * C82863 +
            (C17742 - C17743) * C6585 + (C17744 - C17745) * C82639) *
               C34117 +
           ((C30995 - C30996) * C6584 + (C30997 - C30998) * C82863 +
            (C82523 * C18265 - C15405 * C18262) * C6585 +
            (C82523 * C18539 - C15405 * C18537) * C82639) *
               C82878) *
              C82938 * C82939 * C90 +
          (((C15405 * C103 - C82523 * C110) * C6584 +
            (C15405 * C311 - C82523 * C317) * C82863 +
            (C15405 * C694 - C82523 * C702) * C6585 +
            (C15405 * C858 - C82523 * C863) * C82639) *
               C34115 +
           ((C15405 * C1154 - C82523 * C1162) * C6584 +
            (C15405 * C1318 - C82523 * C1323) * C82863 +
            (C15405 * C3347 - C82523 * C3357) * C6585 +
            (C15405 * C3614 - C82523 * C3620) * C82639) *
               C34116 +
           ((C15405 * C4109 - C82523 * C4114) * C6584 +
            (C15405 * C4406 - C82523 * C4410) * C82863 +
            (C15405 * C4975 - C82523 * C4979) * C6585 +
            (C15405 * C5221 - C82523 * C5224) * C82639) *
               C34117 +
           ((C15405 * C5689 - C82523 * C5693) * C6584 +
            (C15405 * C5985 - C82523 * C5988) * C82863 +
            (C15405 * C33197 - C82523 * C33198) * C6585 +
            (C15405 * C33521 - C82523 * C33522) * C82639) *
               C82878) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19131 * C169 - C19353 * C102 - C19131 * C310 + C19057 * C365 +
            C19132 * C753 - C19354 * C695 - C19132 * C857 + C19058 * C913 +
            C19133 * C1746 - C19355 * C1653 - C19133 * C1950 + C19059 * C2035 +
            C19134 * C2653 - C19356 * C2527 - C19134 * C2821 + C82871 * C2927) *
               C82523 * C82864 +
           (C19131 * C1213 - C19353 * C1155 - C19131 * C1317 + C19057 * C1373 +
            C19132 * C3441 - C19354 * C3348 - C19132 * C3613 + C19058 * C3704 +
            C19133 * C3442 - C19355 * C3345 - C19133 * C3616 + C19059 * C3703 +
            C19134 * C16353 - C19356 * C16304 - C19134 * C16445 +
            C82871 * C16492) *
               C82523 * C82679) *
              C82938 * C82939 * C90 -
          ((C19134 * C20478 - C19356 * C20408 - C19134 * C20614 +
            C82871 * C20682 + C19133 * C3444 - C19355 * C3344 - C19133 * C3617 +
            C19059 * C3701 + C19132 * C3443 - C19354 * C3347 - C19132 * C3614 +
            C19058 * C3702 + C19131 * C1214 - C19353 * C1154 - C19131 * C1318 +
            C19057 * C1372) *
               C82523 * C82679 +
           (C19385 + C19384 + C19383 + C19382) * C82523 * C82864) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6584 * C169 - C6812 * C102 - C6584 * C310 + C82863 * C365 +
             C6585 * C753 - C6813 * C695 - C6585 * C857 + C82639 * C913) *
                C1641 +
            (C6851 + C6852) * C1642 + (C6853 + C6854) * C82885) *
               C82864 +
           ((C6584 * C1213 - C6812 * C1155 - C6584 * C1317 + C82863 * C1373 +
             C6585 * C3441 - C6813 * C3348 - C6585 * C3613 + C82639 * C3704) *
                C1641 +
            (C10885 + C10886) * C1642 + (C10887 + C10888) * C82885) *
               C82679) *
              C82938 * C82939 * C90 -
          (((C6585 * C7929 - C6813 * C7859 - C6585 * C8065 + C82639 * C8133 +
             C6584 * C1216 - C6812 * C1152 - C6584 * C1320 + C82863 * C1370) *
                C82885 +
            (C10888 + C10887) * C1642 + (C10886 + C10885) * C1641) *
               C82679 +
           ((C6856 + C6855) * C82885 + (C6854 + C6853) * C1642 +
            (C6852 + C6851) * C1641) *
               C82864) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C6584 * C169 - C6812 * C102 - C6584 * C310 + C82863 * C365 +
            C6585 * C753 - C6813 * C695 - C6585 * C857 + C82639 * C913) *
               C82523 * C34115 +
           (C12782 + C12783) * C82523 * C34116 +
           (C33643 + C33644) * C82523 * C34117 +
           (C6584 * C5816 - C6812 * C5690 - C6584 * C5984 + C82863 * C6090 +
            C6585 * C18357 - C6813 * C18262 - C6585 * C18537 +
            C82639 * C18624) *
               C82523 * C82878) *
              C82938 * C82939 * C90 -
          ((C6585 * C33313 - C6813 * C33197 - C6585 * C33521 + C82639 * C33629 +
            C6584 * C5817 - C6812 * C5689 - C6584 * C5985 + C82863 * C6089) *
               C82523 * C82878 +
           (C31768 + C31767) * C82523 * C34117 +
           (C10886 + C10885) * C82523 * C34116 +
           (C6852 + C6851) * C82523 * C34115) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
               C19131 +
           (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
               C19057 +
           (C11640 - C11641 + C11642 - C11643) * C19132 +
           (C11954 - C11955 + C11956 - C11957) * C19058 +
           (C22222 - C22223 + C22224 - C22225) * C19133 +
           (C22540 - C22541 + C22542 - C22543) * C19059 +
           (C82864 * C2733 - C8607 * C2527 + C82679 * C16399 - C8608 * C16304) *
               C19134 +
           (C82864 * C3002 - C8607 * C2821 + C82679 * C16535 - C8608 * C16445) *
               C82871) *
              C82523 * C82938 * C82939 * C90 +
          ((C8611 - C8610 + C8613 - C8612) * C19131 +
           (C8840 - C8839 + C8842 - C8841) * C19057 +
           (C10650 - C10649 + C10652 - C10651) * C19132 +
           (C10988 - C10987 + C10990 - C10989) * C19058 +
           (C21260 - C21259 + C21262 - C21261) * C19133 +
           (C21583 - C21582 + C21585 - C21584) * C19059 +
           (C8607 * C2526 - C82864 * C2734 + C8608 * C20408 - C82679 * C20546) *
               C19134 +
           (C8607 * C2822 - C82864 * C3003 + C8608 * C20614 - C82679 * C20749) *
               C82871) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C6584 +
            (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
                C82863 +
            (C82864 * C805 - C8607 * C695 + C82679 * C3527 - C8608 * C3348) *
                C6585 +
            (C82864 * C956 - C8607 * C857 + C82679 * C3779 - C8608 * C3613) *
                C82639) *
               C1641 +
           ((C8610 - C8611 + C8612 - C8613) * C6584 +
            (C8839 - C8840 + C8841 - C8842) * C82863 +
            (C10649 - C10650 + C10651 - C10652) * C6585 +
            (C10987 - C10988 + C10989 - C10990) * C82639) *
               C1642 +
           ((C8618 - C8619 + C8620 - C8621) * C6584 +
            (C8843 - C8844 + C8845 - C8846) * C82863 +
            (C10657 - C10658 + C10659 - C10660) * C6585 +
            (C10991 - C10992 + C10993 - C10994) * C82639) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C8611 - C8610 + C8613 - C8612) * C6584 +
            (C8840 - C8839 + C8842 - C8841) * C82863 +
            (C10650 - C10649 + C10652 - C10651) * C6585 +
            (C10988 - C10987 + C10990 - C10989) * C82639) *
               C1641 +
           ((C8619 - C8618 + C8621 - C8620) * C6584 +
            (C8844 - C8843 + C8846 - C8845) * C82863 +
            (C10658 - C10657 + C10660 - C10659) * C6585 +
            (C10992 - C10991 + C10994 - C10993) * C82639) *
               C1642 +
           ((C8627 - C8626 + C8629 - C8628) * C6584 +
            (C8848 - C8847 + C8850 - C8849) * C82863 +
            (C8607 * C692 - C82864 * C808 + C8608 * C7859 - C82679 * C7997) *
                C6585 +
            (C8607 * C860 - C82864 * C959 + C8608 * C8065 - C82679 * C8200) *
                C82639) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C34115 * C240 - C34255 * C102 + C34116 * C1265 - C34256 * C1155 +
            C34117 * C4299 - C34257 * C4108 + C82878 * C5904 - C34258 * C5690) *
               C6584 +
           (C34115 * C441 - C34255 * C310 + C34116 * C1416 - C34256 * C1317 +
            C34117 * C4593 - C34257 * C4405 + C82878 * C6185 - C34258 * C5984) *
               C82863 +
           (C34115 * C805 - C34255 * C695 + C34116 * C3527 - C34256 * C3348 +
            C34117 * C5140 - C34257 * C4976 + C82878 * C18459 -
            C34258 * C18262) *
               C6585 +
           (C34115 * C956 - C34255 * C857 + C34116 * C3779 - C34256 * C3613 +
            C34117 * C5377 - C34257 * C5220 + C82878 * C18741 -
            C34258 * C18537) *
               C82639) *
              C82523 * C82938 * C82939 * C90 +
          ((C34261 - C34260 + C34263 - C34262 + C34265 - C34264 + C34267 -
            C34266) *
               C6584 +
           (C34482 - C34481 + C34484 - C34483 + C34486 - C34485 + C34488 -
            C34487) *
               C82863 +
           (C34255 * C694 - C34115 * C806 + C34256 * C3347 - C34116 * C3528 +
            C34257 * C4975 - C34117 * C5141 + C34258 * C33197 -
            C82878 * C33421) *
               C6585 +
           (C34255 * C858 - C34115 * C957 + C34256 * C3614 - C34116 * C3781 +
            C34257 * C5221 - C34117 * C5378 + C34258 * C33521 -
            C82878 * C33742) *
               C82639) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezx[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C8607 +
            (C82523 * C503 - C15405 * C497) * C82864 +
            (C18542 - C18543) * C8608 + (C18822 - C18823) * C82679) *
               C19057 +
           ((C16004 - C16005) * C8607 + (C16154 - C16155) * C82864 +
            (C17734 - C17735) * C8608 + (C17988 - C17989) * C82679) *
               C19058 +
           ((C16008 - C16009) * C8607 + (C16156 - C16157) * C82864 +
            (C17738 - C17739) * C8608 + (C17992 - C17993) * C82679) *
               C19059 +
           ((C16012 - C16013) * C8607 + (C16158 - C16159) * C82864 +
            (C82523 * C16307 - C15405 * C16304) * C8608 +
            (C82523 * C16581 - C15405 * C16579) * C82679) *
               C82871) *
              C82938 * C82939 * C90 +
          (((C15405 * C103 - C82523 * C110) * C8607 +
            (C15405 * C498 - C82523 * C504) * C82864 +
            (C15405 * C1154 - C82523 * C1162) * C8608 +
            (C15405 * C1464 - C82523 * C1469) * C82679) *
               C19057 +
           ((C15405 * C694 - C82523 * C702) * C8607 +
            (C15405 * C1004 - C82523 * C1009) * C82864 +
            (C15405 * C3347 - C82523 * C3357) * C8608 +
            (C15405 * C3860 - C82523 * C3866) * C82679) *
               C19058 +
           ((C15405 * C1654 - C82523 * C1659) * C8607 +
            (C15405 * C2242 - C82523 * C2246) * C82864 +
            (C15405 * C3344 - C82523 * C3351) * C8608 +
            (C15405 * C3863 - C82523 * C3869) * C82679) *
               C19059 +
           ((C15405 * C2526 - C82523 * C2530) * C8607 +
            (C15405 * C3084 - C82523 * C3087) * C82864 +
            (C15405 * C20408 - C82523 * C20409) * C8608 +
            (C15405 * C20816 - C82523 * C20817) * C82679) *
               C82871) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
             C82885 * C112 - C1651 * C104) *
                C8607 +
            (C1641 * C503 - C1647 * C497 + C1642 * C504 - C1649 * C498 +
             C82885 * C505 - C1651 * C499) *
                C82864 +
            (C5991 - C5992 + C5993 - C5994 + C5995 - C5996) * C8608 +
            (C6269 - C6270 + C6271 - C6272 + C6273 - C6274) * C82679) *
               C82863 +
           ((C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C8607 +
            (C3090 - C3091 + C3092 - C3093 + C3094 - C3095) * C82864 +
            (C1641 * C3359 - C1647 * C3348 + C1642 * C3357 - C1649 * C3347 +
             C82885 * C3355 - C1651 * C3346) *
                C8608 +
            (C1641 * C3865 - C1647 * C3859 + C1642 * C3866 - C1649 * C3860 +
             C82885 * C3867 - C1651 * C3861) *
                C82679) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C1647 * C103 - C1641 * C110 + C1649 * C104 - C1642 * C112 +
             C1651 * C105 - C82885 * C114) *
                C8607 +
            (C1647 * C498 - C1641 * C504 + C1649 * C499 - C1642 * C505 +
             C1651 * C500 - C82885 * C506) *
                C82864 +
            (C1647 * C1154 - C1641 * C1162 + C1649 * C1153 - C1642 * C1160 +
             C1651 * C1152 - C82885 * C1158) *
                C8608 +
            (C1647 * C1464 - C1641 * C1469 + C1649 * C1465 - C1642 * C1470 +
             C1651 * C1466 - C82885 * C1471) *
                C82679) *
               C82863 +
           ((C1647 * C694 - C1641 * C702 + C1649 * C693 - C1642 * C700 +
             C1651 * C692 - C82885 * C698) *
                C8607 +
            (C1647 * C1004 - C1641 * C1009 + C1649 * C1005 - C1642 * C1010 +
             C1651 * C1006 - C82885 * C1011) *
                C82864 +
            (C1647 * C3347 - C1641 * C3357 + C1649 * C3346 - C1642 * C3355 +
             C1651 * C7859 - C82885 * C7860) *
                C8608 +
            (C1647 * C3860 - C1641 * C3866 + C1649 * C3861 - C1642 * C3867 +
             C1651 * C8267 - C82885 * C8268) *
                C82679) *
               C82639) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C34255 +
            (C82523 * C503 - C15405 * C497) * C34115 +
            (C18542 - C18543) * C34256 + (C18822 - C18823) * C34116 +
            (C18546 - C18547) * C34257 + (C18824 - C18825) * C34117 +
            (C30995 - C30996) * C34258 + (C31151 - C31152) * C82878) *
               C82863 +
           ((C16004 - C16005) * C34255 + (C16154 - C16155) * C34115 +
            (C17734 - C17735) * C34256 + (C17988 - C17989) * C34116 +
            (C17742 - C17743) * C34257 + (C17990 - C17991) * C34117 +
            (C82523 * C18265 - C15405 * C18262) * C34258 +
            (C82523 * C18819 - C15405 * C18817) * C82878) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C15405 * C103 - C82523 * C110) * C34255 +
            (C15405 * C498 - C82523 * C504) * C34115 +
            (C15405 * C1154 - C82523 * C1162) * C34256 +
            (C15405 * C1464 - C82523 * C1469) * C34116 +
            (C15405 * C4109 - C82523 * C4114) * C34257 +
            (C15405 * C4684 - C82523 * C4688) * C34117 +
            (C15405 * C5689 - C82523 * C5693) * C34258 +
            (C15405 * C6263 - C82523 * C6266) * C82878) *
               C82863 +
           ((C15405 * C694 - C82523 * C702) * C34255 +
            (C15405 * C1004 - C82523 * C1009) * C34115 +
            (C15405 * C3347 - C82523 * C3357) * C34256 +
            (C15405 * C3860 - C82523 * C3866) * C34116 +
            (C15405 * C4975 - C82523 * C4979) * C34257 +
            (C15405 * C5455 - C82523 * C5458) * C34117 +
            (C15405 * C33197 - C82523 * C33198) * C34258 +
            (C15405 * C33841 - C82523 * C33842) * C82878) *
               C82639) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19057 * C169 - C19131 * C102 + C19058 * C753 - C19132 * C695 +
            C19059 * C1746 - C19133 * C1653 + C82871 * C2653 - C19134 * C2527) *
               C8607 +
           (C19057 * C551 - C19131 * C497 + C19058 * C1055 - C19132 * C1003 +
            C19059 * C2323 - C19133 * C2241 + C82871 * C3175 - C19134 * C3083) *
               C82864 +
           (C19057 * C1213 - C19131 * C1155 + C19058 * C3441 - C19132 * C3348 +
            C19059 * C3442 - C19133 * C3345 + C82871 * C16353 -
            C19134 * C16304) *
               C8608 +
           (C19057 * C1515 - C19131 * C1463 + C19058 * C3945 - C19132 * C3859 +
            C19059 * C3946 - C19133 * C3862 + C82871 * C16625 -
            C19134 * C16579) *
               C82679) *
              C82523 * C82938 * C82939 * C90 +
          ((C19137 - C19136 + C19139 - C19138 + C19141 - C19140 + C19143 -
            C19142) *
               C8607 +
           (C19587 - C19586 + C19589 - C19588 + C19591 - C19590 + C19593 -
            C19592) *
               C82864 +
           (C19131 * C1154 - C19057 * C1214 + C19132 * C3347 - C19058 * C3443 +
            C19133 * C3344 - C19059 * C3444 + C19134 * C20408 -
            C82871 * C20478) *
               C8608 +
           (C19131 * C1464 - C19057 * C1516 + C19132 * C3860 - C19058 * C3947 +
            C19133 * C3863 - C19059 * C3948 + C19134 * C20816 -
            C82871 * C20884) *
               C82679) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C8607 +
            (C82863 * C551 - C6584 * C497 + C82639 * C1055 - C6585 * C1003) *
                C82864 +
            (C82863 * C1213 - C6584 * C1155 + C82639 * C3441 - C6585 * C3348) *
                C8608 +
            (C82863 * C1515 - C6584 * C1463 + C82639 * C3945 - C6585 * C3859) *
                C82679) *
               C1641 +
           ((C6587 - C6588 + C6589 - C6590) * C8607 +
            (C7057 - C7058 + C7059 - C7060) * C82864 +
            (C10535 - C10536 + C10537 - C10538) * C8608 +
            (C11191 - C11192 + C11193 - C11194) * C82679) *
               C1642 +
           ((C6595 - C6596 + C6597 - C6598) * C8607 +
            (C7061 - C7062 + C7063 - C7064) * C82864 +
            (C10543 - C10544 + C10545 - C10546) * C8608 +
            (C11195 - C11196 + C11197 - C11198) * C82679) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C6588 - C6587 + C6590 - C6589) * C8607 +
            (C7058 - C7057 + C7060 - C7059) * C82864 +
            (C10536 - C10535 + C10538 - C10537) * C8608 +
            (C11192 - C11191 + C11194 - C11193) * C82679) *
               C1641 +
           ((C6596 - C6595 + C6598 - C6597) * C8607 +
            (C7062 - C7061 + C7064 - C7063) * C82864 +
            (C10544 - C10543 + C10546 - C10545) * C8608 +
            (C11196 - C11195 + C11198 - C11197) * C82679) *
               C1642 +
           ((C6604 - C6603 + C6606 - C6605) * C8607 +
            (C7066 - C7065 + C7068 - C7067) * C82864 +
            (C6584 * C1152 - C82863 * C1216 + C6585 * C7859 - C82639 * C7929) *
                C8608 +
            (C6584 * C1466 - C82863 * C1518 + C6585 * C8267 - C82639 * C8335) *
                C82679) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
               C34255 +
           (C82863 * C551 - C6584 * C497 + C82639 * C1055 - C6585 * C1003) *
               C34115 +
           (C12468 - C12469 + C12470 - C12471) * C34256 +
           (C13078 - C13079 + C13080 - C13081) * C34116 +
           (C33316 - C33317 + C33318 - C33319) * C34257 +
           (C33947 - C33948 + C33949 - C33950) * C34117 +
           (C82863 * C5816 - C6584 * C5690 + C82639 * C18357 - C6585 * C18262) *
               C34258 +
           (C82863 * C6354 - C6584 * C6262 + C82639 * C18899 - C6585 * C18817) *
               C82878) *
              C82523 * C82938 * C82939 * C90 +
          ((C6588 - C6587 + C6590 - C6589) * C34255 +
           (C7058 - C7057 + C7060 - C7059) * C34115 +
           (C10536 - C10535 + C10538 - C10537) * C34256 +
           (C11192 - C11191 + C11194 - C11193) * C34116 +
           (C31442 - C31441 + C31444 - C31443) * C34257 +
           (C32070 - C32069 + C32072 - C32071) * C34117 +
           (C6584 * C5689 - C82863 * C5817 + C6585 * C33197 - C82639 * C33313) *
               C34258 +
           (C6584 * C6263 - C82863 * C6355 + C6585 * C33841 - C82639 * C33945) *
               C82878) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
            C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
               C19057 +
           (C12270 + C12271) * C19058 + (C22858 + C22859) * C19059 +
           (C8607 * C2733 - C9050 * C2527 - C8607 * C3083 + C82864 * C3254 +
            C8608 * C16399 - C9051 * C16304 - C8608 * C16579 +
            C82679 * C16670) *
               C82871) *
              C82523 * C82938 * C82939 * C90 -
          ((C8608 * C20546 - C9051 * C20408 - C8608 * C20816 + C82679 * C20951 +
            C8607 * C2734 - C9050 * C2526 - C8607 * C3084 + C82864 * C3253) *
               C82871 +
           (C21899 + C21898) * C19059 + (C11322 + C11321) * C19058 +
           (C9090 + C9089) * C19057) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
             C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
                C82863 +
            (C8607 * C805 - C9050 * C695 - C8607 * C1003 + C82864 * C1106 +
             C8608 * C3527 - C9051 * C3348 - C8608 * C3859 + C82679 * C4030) *
                C82639) *
               C1641 +
           ((C9089 + C9090) * C82863 + (C11321 + C11322) * C82639) * C1642 +
           ((C9091 + C9092) * C82863 + (C11323 + C11324) * C82639) * C82885) *
              C82938 * C82939 * C90 -
          (((C8608 * C7997 - C9051 * C7859 - C8608 * C8267 + C82679 * C8402 +
             C8607 * C808 - C9050 * C692 - C8607 * C1006 + C82864 * C1103) *
                C82639 +
            (C9094 + C9093) * C82863) *
               C82885 +
           ((C11324 + C11323) * C82639 + (C9092 + C9091) * C82863) * C1642 +
           ((C11322 + C11321) * C82639 + (C9090 + C9089) * C82863) * C1641) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C34255 * C240 - C34688 * C102 - C34255 * C497 + C34115 * C608 +
            C34256 * C1265 - C34689 * C1155 - C34256 * C1463 + C34116 * C1566 +
            C34257 * C4299 - C34690 * C4108 - C34257 * C4683 + C34117 * C4854 +
            C34258 * C5904 - C34691 * C5690 - C34258 * C6262 + C82878 * C6437) *
               C82863 +
           (C34255 * C805 - C34688 * C695 - C34255 * C1003 + C34115 * C1106 +
            C34256 * C3527 - C34689 * C3348 - C34256 * C3859 + C34116 * C4030 +
            C34257 * C5140 - C34690 * C4976 - C34257 * C5454 + C34117 * C5613 +
            C34258 * C18459 - C34691 * C18262 - C34258 * C18817 +
            C82878 * C18988) *
               C82639) *
              C82523 * C82938 * C82939 * C90 -
          ((C34258 * C33421 - C34691 * C33197 - C34258 * C33841 +
            C82878 * C34048 + C34257 * C5141 - C34690 * C4975 - C34257 * C5455 +
            C34117 * C5612 + C34256 * C3528 - C34689 * C3347 - C34256 * C3860 +
            C34116 * C4028 + C34255 * C806 - C34688 * C694 - C34255 * C1004 +
            C34115 * C1105) *
               C82639 +
           (C34720 + C34719 + C34718 + C34717) * C82863) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexx[34] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C82864 +
            C18282 * C82679) *
               C19057 +
           (C24428 + C24429) * C19058 + (C24430 + C24431) * C19059 +
           (C24432 + C24440) * C82871) *
              C82938 * C688 -
          (((C15405 * C16305 - C15406 * C16303 - C15405 * C16306 +
             C82523 * C16309) *
                C82679 +
            C15859 * C82864) *
               C82871 +
           (C24440 + C24432) * C19059 + (C24431 + C24430) * C19058 +
           (C24429 + C24428) * C19057) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1647 * C108 - C1648 * C102 - C1647 * C109 + C1641 * C120 +
             C1649 * C110 - C1650 * C103 - C1649 * C111 + C1642 * C121 +
             C1651 * C112 - C1652 * C104 - C1651 * C113 + C82885 * C122) *
                C82864 +
            (C5737 + C5738 + C5739) * C82679) *
               C82863 +
           ((C2574 + C2575 + C2576) * C82864 +
            (C11441 + C11442 + C11443) * C82679) *
               C82639) *
              C82938 * C688 -
          (((C1651 * C3349 - C1652 * C3343 - C1651 * C3350 + C82885 * C3361 +
             C1649 * C3351 - C1650 * C3344 - C1649 * C3352 + C1642 * C3362 +
             C1647 * C3353 - C1648 * C3345 - C1647 * C3354 + C1641 * C3363) *
                C82679 +
            (C2579 + C2578 + C2577) * C82864) *
               C82639 +
           ((C11443 + C11442 + C11441) * C82679 +
            (C2576 + C2575 + C2574) * C82864) *
               C82863) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C34115 +
            C18282 * C34116 + C18283 * C34117 + C30853 * C82878) *
               C82863 +
           (C36601 + C36602 + C36603 + C36611) * C82639) *
              C82938 * C688 -
          (((C15405 * C18263 - C15406 * C18261 - C15405 * C18264 +
             C82523 * C18267) *
                C82878 +
            C17477 * C34117 + C17476 * C34116 + C15857 * C34115) *
               C82639 +
           (C36611 + C36603 + C36602 + C36601) * C82863) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[34] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19057 * C169 - C19131 * C102 + C19058 * C753 - C19132 * C695 +
             C19059 * C1746 - C19133 * C1653 + C82871 * C2653 -
             C19134 * C2527) *
                C15405 +
            (C19057 * C175 - C19131 * C109 + C19058 * C758 - C19132 * C705 +
             C19059 * C1750 - C19133 * C1658 + C82871 * C2656 -
             C19134 * C2533) *
                C82523) *
               C82864 +
           ((C19057 * C1213 - C19131 * C1155 + C19058 * C3441 - C19132 * C3348 +
             C19059 * C3442 - C19133 * C3345 + C82871 * C16353 -
             C19134 * C16304) *
                C15405 +
            (C19057 * C1218 - C19131 * C1165 + C19058 * C3447 - C19132 * C3360 +
             C19059 * C3448 - C19133 * C3354 + C82871 * C16355 -
             C19134 * C16308) *
                C82523) *
               C82679) *
              C82938 * C688 +
          (((C19131 * C695 - C19057 * C753 + C19132 * C1653 - C19058 * C1746 +
             C19133 * C2527 - C19059 * C2653 + C19134 * C15407 -
             C82871 * C15462) *
                C15405 +
            (C19131 * C705 - C19057 * C758 + C19132 * C1658 - C19058 * C1750 +
             C19133 * C2533 - C19059 * C2656 + C19134 * C15410 -
             C82871 * C15464) *
                C82523) *
               C82864 +
           ((C19131 * C3348 - C19057 * C3441 + C19132 * C3345 - C19058 * C3442 +
             C19133 * C16304 - C19059 * C16353 + C19134 * C16303 -
             C82871 * C16354) *
                C15405 +
            (C19131 * C3360 - C19057 * C3447 + C19132 * C3354 - C19058 * C3448 +
             C19133 * C16308 - C19059 * C16355 + C19134 * C16306 -
             C82871 * C16356) *
                C82523) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C1647 +
            (C82863 * C175 - C6584 * C109 + C82639 * C758 - C6585 * C705) *
                C1641 +
            (C6587 - C6588 + C6589 - C6590) * C1649 +
            (C6591 - C6592 + C6593 - C6594) * C1642 +
            (C6595 - C6596 + C6597 - C6598) * C1651 +
            (C6599 - C6600 + C6601 - C6602) * C82885) *
               C82864 +
           ((C82863 * C1213 - C6584 * C1155 + C82639 * C3441 - C6585 * C3348) *
                C1647 +
            (C82863 * C1218 - C6584 * C1165 + C82639 * C3447 - C6585 * C3360) *
                C1641 +
            (C10535 - C10536 + C10537 - C10538) * C1649 +
            (C10539 - C10540 + C10541 - C10542) * C1642 +
            (C10543 - C10544 + C10545 - C10546) * C1651 +
            (C10547 - C10548 + C10549 - C10550) * C82885) *
               C82679) *
              C82938 * C688 +
          (((C6584 * C695 - C82863 * C753 + C6585 * C1653 - C82639 * C1746) *
                C1647 +
            (C6584 * C705 - C82863 * C758 + C6585 * C1658 - C82639 * C1750) *
                C1641 +
            (C6584 * C694 - C82863 * C754 + C6585 * C1654 - C82639 * C1747) *
                C1649 +
            (C6584 * C703 - C82863 * C759 + C6585 * C1660 - C82639 * C1751) *
                C1642 +
            (C6584 * C693 - C82863 * C755 + C6585 * C1655 - C82639 * C1748) *
                C1651 +
            (C6584 * C701 - C82863 * C760 + C6585 * C1662 - C82639 * C1752) *
                C82885) *
               C82864 +
           ((C6584 * C3348 - C82863 * C3441 + C6585 * C3345 - C82639 * C3442) *
                C1647 +
            (C6584 * C3360 - C82863 * C3447 + C6585 * C3354 - C82639 * C3448) *
                C1641 +
            (C6584 * C3347 - C82863 * C3443 + C6585 * C3344 - C82639 * C3444) *
                C1649 +
            (C6584 * C3358 - C82863 * C3449 + C6585 * C3352 - C82639 * C3450) *
                C1642 +
            (C6584 * C3346 - C82863 * C3445 + C6585 * C3343 - C82639 * C3446) *
                C1651 +
            (C6584 * C3356 - C82863 * C3451 + C6585 * C3350 - C82639 * C3452) *
                C82885) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C15405 +
            (C82863 * C175 - C6584 * C109 + C82639 * C758 - C6585 * C705) *
                C82523) *
               C34115 +
           ((C12468 - C12469 + C12470 - C12471) * C15405 +
            (C12472 - C12473 + C12474 - C12475) * C82523) *
               C34116 +
           ((C33316 - C33317 + C33318 - C33319) * C15405 +
            (C33320 - C33321 + C33322 - C33323) * C82523) *
               C34117 +
           ((C82863 * C5816 - C6584 * C5690 + C82639 * C18357 -
             C6585 * C18262) *
                C15405 +
            (C82863 * C5819 - C6584 * C5696 + C82639 * C18359 -
             C6585 * C18266) *
                C82523) *
               C82878) *
              C82938 * C688 +
          (((C6584 * C695 - C82863 * C753 + C6585 * C1653 - C82639 * C1746) *
                C15405 +
            (C6584 * C705 - C82863 * C758 + C6585 * C1658 - C82639 * C1750) *
                C82523) *
               C34115 +
           ((C6584 * C3348 - C82863 * C3441 + C6585 * C3345 - C82639 * C3442) *
                C15405 +
            (C6584 * C3360 - C82863 * C3447 + C6585 * C3354 - C82639 * C3448) *
                C82523) *
               C34116 +
           ((C6584 * C4976 - C82863 * C5060 + C6585 * C16745 -
             C82639 * C16827) *
                C15405 +
            (C6584 * C4982 - C82863 * C5063 + C6585 * C16748 -
             C82639 * C16829) *
                C82523) *
               C34117 +
           ((C6584 * C18262 - C82863 * C18357 + C6585 * C18261 -
             C82639 * C18358) *
                C15405 +
            (C6584 * C18266 - C82863 * C18359 + C6585 * C18264 -
             C82639 * C18360) *
                C82523) *
               C82878) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[34] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C15405 +
            (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
                C82523) *
               C19057 +
           ((C11640 - C11641 + C11642 - C11643) * C15405 +
            (C11644 - C11645 + C11646 - C11647) * C82523) *
               C19058 +
           ((C22222 - C22223 + C22224 - C22225) * C15405 +
            (C22226 - C22227 + C22228 - C22229) * C82523) *
               C19059 +
           ((C24573 - C24574 + C24575 - C24576) * C15405 +
            (C24577 - C24578 + C24579 - C24580) * C82523) *
               C82871) *
              C82938 * C688 +
          (((C11641 - C11640 + C11643 - C11642) * C15405 +
            (C11645 - C11644 + C11647 - C11646) * C82523) *
               C19057 +
           ((C22223 - C22222 + C22225 - C22224) * C15405 +
            (C22227 - C22226 + C22229 - C22228) * C82523) *
               C19058 +
           ((C24574 - C24573 + C24576 - C24575) * C15405 +
            (C24578 - C24577 + C24580 - C24579) * C82523) *
               C19059 +
           ((C8607 * C15407 - C82864 * C15508 + C8608 * C16303 -
             C82679 * C16400) *
                C15405 +
            (C8607 * C15410 - C82864 * C15510 + C8608 * C16306 -
             C82679 * C16402) *
                C82523) *
               C82871) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C1647 +
            (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
                C1641 +
            (C8610 - C8611 + C8612 - C8613) * C1649 +
            (C8614 - C8615 + C8616 - C8617) * C1642 +
            (C8618 - C8619 + C8620 - C8621) * C1651 +
            (C8622 - C8623 + C8624 - C8625) * C82885) *
               C82863 +
           ((C11640 - C11641 + C11642 - C11643) * C1647 +
            (C11644 - C11645 + C11646 - C11647) * C1641 +
            (C10649 - C10650 + C10651 - C10652) * C1649 +
            (C10653 - C10654 + C10655 - C10656) * C1642 +
            (C10657 - C10658 + C10659 - C10660) * C1651 +
            (C10661 - C10662 + C10663 - C10664) * C82885) *
               C82639) *
              C82938 * C688 +
          (((C11641 - C11640 + C11643 - C11642) * C1647 +
            (C11645 - C11644 + C11647 - C11646) * C1641 +
            (C10650 - C10649 + C10652 - C10651) * C1649 +
            (C10654 - C10653 + C10656 - C10655) * C1642 +
            (C10658 - C10657 + C10660 - C10659) * C1651 +
            (C10662 - C10661 + C10664 - C10663) * C82885) *
               C82863 +
           ((C8607 * C1653 - C82864 * C1852 + C8608 * C3345 - C82679 * C3530) *
                C1647 +
            (C8607 * C1658 - C82864 * C1856 + C8608 * C3354 - C82679 * C3536) *
                C1641 +
            (C8607 * C1654 - C82864 * C1853 + C8608 * C3344 - C82679 * C3531) *
                C1649 +
            (C8607 * C1660 - C82864 * C1857 + C8608 * C3352 - C82679 * C3537) *
                C1642 +
            (C8607 * C1655 - C82864 * C1854 + C8608 * C3343 - C82679 * C3532) *
                C1651 +
            (C8607 * C1662 - C82864 * C1858 + C8608 * C3350 - C82679 * C3538) *
                C82885) *
               C82639) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C34115 * C240 - C34255 * C102 + C34116 * C1265 - C34256 * C1155 +
             C34117 * C4299 - C34257 * C4108 + C82878 * C5904 -
             C34258 * C5690) *
                C15405 +
            (C34115 * C246 - C34255 * C109 + C34116 * C1270 - C34256 * C1165 +
             C34117 * C4303 - C34257 * C4113 + C82878 * C5907 -
             C34258 * C5696) *
                C82523) *
               C82863 +
           ((C36744 - C36745 + C36746 - C36747 + C36748 - C36749 + C36750 -
             C36751) *
                C15405 +
            (C36752 - C36753 + C36754 - C36755 + C36756 - C36757 + C36758 -
             C36759) *
                C82523) *
               C82639) *
              C82938 * C688 +
          (((C36745 - C36744 + C36747 - C36746 + C36749 - C36748 + C36751 -
             C36750) *
                C15405 +
            (C36753 - C36752 + C36755 - C36754 + C36757 - C36756 + C36759 -
             C36758) *
                C82523) *
               C82863 +
           ((C34255 * C1653 - C34115 * C1852 + C34256 * C3345 - C34116 * C3530 +
             C34257 * C16745 - C34117 * C16905 + C34258 * C18261 -
             C82878 * C18460) *
                C15405 +
            (C34255 * C1658 - C34115 * C1856 + C34256 * C3354 - C34116 * C3536 +
             C34257 * C16748 - C34117 * C16907 + C34258 * C18264 -
             C82878 * C18462) *
                C82523) *
               C82639) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[34] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C19131 +
            (C82523 * C316 - C15405 * C310) * C19057 +
            (C16004 - C16005) * C19132 + (C16006 - C16007) * C19058 +
            (C16008 - C16009) * C19133 + (C16010 - C16011) * C19059 +
            (C16012 - C16013) * C19134 + (C16014 - C16015) * C82871) *
               C82864 +
           ((C18542 - C18543) * C19131 + (C18544 - C18545) * C19057 +
            (C17734 - C17735) * C19132 + (C17736 - C17737) * C19058 +
            (C17738 - C17739) * C19133 + (C17740 - C17741) * C19059 +
            (C24647 - C24648) * C19134 + (C24649 - C24650) * C82871) *
               C82679) *
              C82938 * C688 +
          (((C16005 - C16004) * C19131 + (C16007 - C16006) * C19057 +
            (C16009 - C16008) * C19132 + (C16011 - C16010) * C19058 +
            (C16013 - C16012) * C19133 + (C16015 - C16014) * C19059 +
            (C16017 - C16016) * C19134 + (C16019 - C16018) * C82871) *
               C82864 +
           ((C17735 - C17734) * C19131 + (C17737 - C17736) * C19057 +
            (C17739 - C17738) * C19132 + (C17741 - C17740) * C19058 +
            (C24648 - C24647) * C19133 + (C24650 - C24649) * C19059 +
            (C15405 * C16303 - C82523 * C16305) * C19134 +
            (C15405 * C16446 - C82523 * C16448) * C82871) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
             C82885 * C112 - C1651 * C104) *
                C6584 +
            (C1641 * C316 - C1647 * C310 + C1642 * C317 - C1649 * C311 +
             C82885 * C318 - C1651 * C312) *
                C82863 +
            (C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C6585 +
            (C2834 - C2835 + C2836 - C2837 + C2838 - C2839) * C82639) *
               C82864 +
           ((C5991 - C5992 + C5993 - C5994 + C5995 - C5996) * C6584 +
            (C5997 - C5998 + C5999 - C6000 + C6001 - C6002) * C82863 +
            (C11746 - C11747 + C11748 - C11749 + C11750 - C11751) * C6585 +
            (C11752 - C11753 + C11754 - C11755 + C11756 - C11757) * C82639) *
               C82679) *
              C82938 * C688 +
          (((C2829 - C2828 + C2831 - C2830 + C2833 - C2832) * C6584 +
            (C2835 - C2834 + C2837 - C2836 + C2839 - C2838) * C82863 +
            (C2841 - C2840 + C2843 - C2842 + C2845 - C2844) * C6585 +
            (C2847 - C2846 + C2849 - C2848 + C2851 - C2850) * C82639) *
               C82864 +
           ((C11747 - C11746 + C11749 - C11748 + C11751 - C11750) * C6584 +
            (C11753 - C11752 + C11755 - C11754 + C11757 - C11756) * C82863 +
            (C1647 * C3345 - C1641 * C3353 + C1649 * C3344 - C1642 * C3351 +
             C1651 * C3343 - C82885 * C3349) *
                C6585 +
            (C1647 * C3616 - C1641 * C3622 + C1649 * C3617 - C1642 * C3623 +
             C1651 * C3618 - C82885 * C3624) *
                C82639) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C6584 +
            (C82523 * C316 - C15405 * C310) * C82863 +
            (C16004 - C16005) * C6585 + (C16006 - C16007) * C82639) *
               C34115 +
           ((C18542 - C18543) * C6584 + (C18544 - C18545) * C82863 +
            (C17734 - C17735) * C6585 + (C17736 - C17737) * C82639) *
               C34116 +
           ((C18546 - C18547) * C6584 + (C18548 - C18549) * C82863 +
            (C17742 - C17743) * C6585 + (C17744 - C17745) * C82639) *
               C34117 +
           ((C30995 - C30996) * C6584 + (C30997 - C30998) * C82863 +
            (C36826 - C36827) * C6585 + (C36828 - C36829) * C82639) *
               C82878) *
              C82938 * C688 +
          (((C16005 - C16004) * C6584 + (C16007 - C16006) * C82863 +
            (C16009 - C16008) * C6585 + (C16011 - C16010) * C82639) *
               C34115 +
           ((C17735 - C17734) * C6584 + (C17737 - C17736) * C82863 +
            (C17739 - C17738) * C6585 + (C17741 - C17740) * C82639) *
               C34116 +
           ((C17743 - C17742) * C6584 + (C17745 - C17744) * C82863 +
            (C17747 - C17746) * C6585 + (C17749 - C17748) * C82639) *
               C34117 +
           ((C36827 - C36826) * C6584 + (C36829 - C36828) * C82863 +
            (C15405 * C18261 - C82523 * C18263) * C6585 +
            (C15405 * C18538 - C82523 * C18540) * C82639) *
               C82878) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[34] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19131 * C169 - C19353 * C102 - C19131 * C310 + C19057 * C365 +
            C19132 * C753 - C19354 * C695 - C19132 * C857 + C19058 * C913 +
            C19133 * C1746 - C19355 * C1653 - C19133 * C1950 + C19059 * C2035 +
            C19134 * C2653 - C19356 * C2527 - C19134 * C2821 + C82871 * C2927) *
               C82523 * C82864 +
           (C19131 * C1213 - C19353 * C1155 - C19131 * C1317 + C19057 * C1373 +
            C19132 * C3441 - C19354 * C3348 - C19132 * C3613 + C19058 * C3704 +
            C19133 * C3442 - C19355 * C3345 - C19133 * C3616 + C19059 * C3703 +
            C19134 * C16353 - C19356 * C16304 - C19134 * C16445 +
            C82871 * C16492) *
               C82523 * C82679) *
              C82938 * C688 -
          ((C19134 * C16354 - C19356 * C16303 - C19134 * C16446 +
            C82871 * C16491 + C19133 * C16353 - C19355 * C16304 -
            C19133 * C16445 + C19059 * C16492 + C19132 * C3442 -
            C19354 * C3345 - C19132 * C3616 + C19058 * C3703 + C19131 * C3441 -
            C19353 * C3348 - C19131 * C3613 + C19057 * C3704) *
               C82523 * C82679 +
           (C19134 * C15462 - C19356 * C15407 - C19134 * C15554 +
            C82871 * C15605 + C19133 * C2653 - C19355 * C2527 - C19133 * C2821 +
            C19059 * C2927 + C19132 * C1746 - C19354 * C1653 - C19132 * C1950 +
            C19058 * C2035 + C19131 * C753 - C19353 * C695 - C19131 * C857 +
            C19057 * C913) *
               C82523 * C82864) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6584 * C169 - C6812 * C102 - C6584 * C310 + C82863 * C365 +
             C6585 * C753 - C6813 * C695 - C6585 * C857 + C82639 * C913) *
                C1641 +
            (C6851 + C6852) * C1642 + (C6853 + C6854) * C82885) *
               C82864 +
           ((C6584 * C1213 - C6812 * C1155 - C6584 * C1317 + C82863 * C1373 +
             C6585 * C3441 - C6813 * C3348 - C6585 * C3613 + C82639 * C3704) *
                C1641 +
            (C10885 + C10886) * C1642 + (C10887 + C10888) * C82885) *
               C82679) *
              C82938 * C688 -
          (((C6585 * C3446 - C6813 * C3343 - C6585 * C3618 + C82639 * C3699 +
             C6584 * C3445 - C6812 * C3346 - C6584 * C3615 + C82863 * C3700) *
                C82885 +
            (C6585 * C3444 - C6813 * C3344 - C6585 * C3617 + C82639 * C3701 +
             C6584 * C3443 - C6812 * C3347 - C6584 * C3614 + C82863 * C3702) *
                C1642 +
            (C6585 * C3442 - C6813 * C3345 - C6585 * C3616 + C82639 * C3703 +
             C6584 * C3441 - C6812 * C3348 - C6584 * C3613 + C82863 * C3704) *
                C1641) *
               C82679 +
           ((C6585 * C1748 - C6813 * C1655 - C6585 * C1952 + C82639 * C2037 +
             C6584 * C755 - C6812 * C693 - C6584 * C859 + C82863 * C911) *
                C82885 +
            (C6585 * C1747 - C6813 * C1654 - C6585 * C1951 + C82639 * C2036 +
             C6584 * C754 - C6812 * C694 - C6584 * C858 + C82863 * C912) *
                C1642 +
            (C6585 * C1746 - C6813 * C1653 - C6585 * C1950 + C82639 * C2035 +
             C6584 * C753 - C6812 * C695 - C6584 * C857 + C82863 * C913) *
                C1641) *
               C82864) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C6584 * C169 - C6812 * C102 - C6584 * C310 + C82863 * C365 +
            C6585 * C753 - C6813 * C695 - C6585 * C857 + C82639 * C913) *
               C82523 * C34115 +
           (C12782 + C12783) * C82523 * C34116 +
           (C33643 + C33644) * C82523 * C34117 +
           (C6584 * C5816 - C6812 * C5690 - C6584 * C5984 + C82863 * C6090 +
            C6585 * C18357 - C6813 * C18262 - C6585 * C18537 +
            C82639 * C18624) *
               C82523 * C82878) *
              C82938 * C688 -
          ((C6585 * C18358 - C6813 * C18261 - C6585 * C18538 + C82639 * C18623 +
            C6584 * C18357 - C6812 * C18262 - C6584 * C18537 +
            C82863 * C18624) *
               C82523 * C82878 +
           (C6585 * C16827 - C6813 * C16745 - C6585 * C16983 + C82639 * C17061 +
            C6584 * C5060 - C6812 * C4976 - C6584 * C5220 + C82863 * C5302) *
               C82523 * C34117 +
           (C6585 * C3442 - C6813 * C3345 - C6585 * C3616 + C82639 * C3703 +
            C6584 * C3441 - C6812 * C3348 - C6584 * C3613 + C82863 * C3704) *
               C82523 * C34116 +
           (C6585 * C1746 - C6813 * C1653 - C6585 * C1950 + C82639 * C2035 +
            C6584 * C753 - C6812 * C695 - C6584 * C857 + C82863 * C913) *
               C82523 * C34115) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[34] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
               C19131 +
           (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
               C19057 +
           (C11640 - C11641 + C11642 - C11643) * C19132 +
           (C11954 - C11955 + C11956 - C11957) * C19058 +
           (C22222 - C22223 + C22224 - C22225) * C19133 +
           (C22540 - C22541 + C22542 - C22543) * C19059 +
           (C24573 - C24574 + C24575 - C24576) * C19134 +
           (C24783 - C24784 + C24785 - C24786) * C82871) *
              C82523 * C82938 * C688 +
          ((C11641 - C11640 + C11643 - C11642) * C19131 +
           (C11955 - C11954 + C11957 - C11956) * C19057 +
           (C22223 - C22222 + C22225 - C22224) * C19132 +
           (C22541 - C22540 + C22543 - C22542) * C19058 +
           (C24574 - C24573 + C24576 - C24575) * C19133 +
           (C24784 - C24783 + C24786 - C24785) * C19059 +
           (C8607 * C15407 - C82864 * C15508 + C8608 * C16303 -
            C82679 * C16400) *
               C19134 +
           (C8607 * C15554 - C82864 * C15649 + C8608 * C16446 -
            C82679 * C16536) *
               C82871) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C6584 +
            (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
                C82863 +
            (C11640 - C11641 + C11642 - C11643) * C6585 +
            (C11954 - C11955 + C11956 - C11957) * C82639) *
               C1641 +
           ((C8610 - C8611 + C8612 - C8613) * C6584 +
            (C8839 - C8840 + C8841 - C8842) * C82863 +
            (C10649 - C10650 + C10651 - C10652) * C6585 +
            (C10987 - C10988 + C10989 - C10990) * C82639) *
               C1642 +
           ((C8618 - C8619 + C8620 - C8621) * C6584 +
            (C8843 - C8844 + C8845 - C8846) * C82863 +
            (C10657 - C10658 + C10659 - C10660) * C6585 +
            (C10991 - C10992 + C10993 - C10994) * C82639) *
               C82885) *
              C82938 * C688 +
          (((C11641 - C11640 + C11643 - C11642) * C6584 +
            (C11955 - C11954 + C11957 - C11956) * C82863 +
            (C8607 * C1653 - C82864 * C1852 + C8608 * C3345 - C82679 * C3530) *
                C6585 +
            (C8607 * C1950 - C82864 * C2155 + C8608 * C3616 - C82679 * C3780) *
                C82639) *
               C1641 +
           ((C10650 - C10649 + C10652 - C10651) * C6584 +
            (C10988 - C10987 + C10990 - C10989) * C82863 +
            (C8607 * C1654 - C82864 * C1853 + C8608 * C3344 - C82679 * C3531) *
                C6585 +
            (C8607 * C1951 - C82864 * C2156 + C8608 * C3617 - C82679 * C3782) *
                C82639) *
               C1642 +
           ((C10658 - C10657 + C10660 - C10659) * C6584 +
            (C10992 - C10991 + C10994 - C10993) * C82863 +
            (C8607 * C1655 - C82864 * C1854 + C8608 * C3343 - C82679 * C3532) *
                C6585 +
            (C8607 * C1952 - C82864 * C2157 + C8608 * C3618 - C82679 * C3784) *
                C82639) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C34115 * C240 - C34255 * C102 + C34116 * C1265 - C34256 * C1155 +
            C34117 * C4299 - C34257 * C4108 + C82878 * C5904 - C34258 * C5690) *
               C6584 +
           (C34115 * C441 - C34255 * C310 + C34116 * C1416 - C34256 * C1317 +
            C34117 * C4593 - C34257 * C4405 + C82878 * C6185 - C34258 * C5984) *
               C82863 +
           (C36744 - C36745 + C36746 - C36747 + C36748 - C36749 + C36750 -
            C36751) *
               C6585 +
           (C36962 - C36963 + C36964 - C36965 + C36966 - C36967 + C36968 -
            C36969) *
               C82639) *
              C82523 * C82938 * C688 +
          ((C36745 - C36744 + C36747 - C36746 + C36749 - C36748 + C36751 -
            C36750) *
               C6584 +
           (C36963 - C36962 + C36965 - C36964 + C36967 - C36966 + C36969 -
            C36968) *
               C82863 +
           (C34255 * C1653 - C34115 * C1852 + C34256 * C3345 - C34116 * C3530 +
            C34257 * C16745 - C34117 * C16905 + C34258 * C18261 -
            C82878 * C18460) *
               C6585 +
           (C34255 * C1950 - C34115 * C2155 + C34256 * C3616 - C34116 * C3780 +
            C34257 * C16983 - C34117 * C17137 + C34258 * C18538 -
            C82878 * C18742) *
               C82639) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezx[34] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C8607 +
            (C82523 * C503 - C15405 * C497) * C82864 +
            (C18542 - C18543) * C8608 + (C18822 - C18823) * C82679) *
               C19057 +
           ((C16004 - C16005) * C8607 + (C16154 - C16155) * C82864 +
            (C17734 - C17735) * C8608 + (C17988 - C17989) * C82679) *
               C19058 +
           ((C16008 - C16009) * C8607 + (C16156 - C16157) * C82864 +
            (C17738 - C17739) * C8608 + (C17992 - C17993) * C82679) *
               C19059 +
           ((C16012 - C16013) * C8607 + (C16158 - C16159) * C82864 +
            (C24647 - C24648) * C8608 + (C24853 - C24854) * C82679) *
               C82871) *
              C82938 * C688 +
          (((C16005 - C16004) * C8607 + (C16155 - C16154) * C82864 +
            (C17735 - C17734) * C8608 + (C17989 - C17988) * C82679) *
               C19057 +
           ((C16009 - C16008) * C8607 + (C16157 - C16156) * C82864 +
            (C17739 - C17738) * C8608 + (C17993 - C17992) * C82679) *
               C19058 +
           ((C16013 - C16012) * C8607 + (C16159 - C16158) * C82864 +
            (C24648 - C24647) * C8608 + (C24854 - C24853) * C82679) *
               C19059 +
           ((C16017 - C16016) * C8607 + (C16161 - C16160) * C82864 +
            (C15405 * C16303 - C82523 * C16305) * C8608 +
            (C15405 * C16580 - C82523 * C16582) * C82679) *
               C82871) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
             C82885 * C112 - C1651 * C104) *
                C8607 +
            (C1641 * C503 - C1647 * C497 + C1642 * C504 - C1649 * C498 +
             C82885 * C505 - C1651 * C499) *
                C82864 +
            (C5991 - C5992 + C5993 - C5994 + C5995 - C5996) * C8608 +
            (C6269 - C6270 + C6271 - C6272 + C6273 - C6274) * C82679) *
               C82863 +
           ((C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C8607 +
            (C3090 - C3091 + C3092 - C3093 + C3094 - C3095) * C82864 +
            (C11746 - C11747 + C11748 - C11749 + C11750 - C11751) * C8608 +
            (C12056 - C12057 + C12058 - C12059 + C12060 - C12061) * C82679) *
               C82639) *
              C82938 * C688 +
          (((C2829 - C2828 + C2831 - C2830 + C2833 - C2832) * C8607 +
            (C3091 - C3090 + C3093 - C3092 + C3095 - C3094) * C82864 +
            (C11747 - C11746 + C11749 - C11748 + C11751 - C11750) * C8608 +
            (C12057 - C12056 + C12059 - C12058 + C12061 - C12060) * C82679) *
               C82863 +
           ((C2841 - C2840 + C2843 - C2842 + C2845 - C2844) * C8607 +
            (C3097 - C3096 + C3099 - C3098 + C3101 - C3100) * C82864 +
            (C1647 * C3345 - C1641 * C3353 + C1649 * C3344 - C1642 * C3351 +
             C1651 * C3343 - C82885 * C3349) *
                C8608 +
            (C1647 * C3862 - C1641 * C3868 + C1649 * C3863 - C1642 * C3869 +
             C1651 * C3864 - C82885 * C3870) *
                C82679) *
               C82639) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C34255 +
            (C82523 * C503 - C15405 * C497) * C34115 +
            (C18542 - C18543) * C34256 + (C18822 - C18823) * C34116 +
            (C18546 - C18547) * C34257 + (C18824 - C18825) * C34117 +
            (C30995 - C30996) * C34258 + (C31151 - C31152) * C82878) *
               C82863 +
           ((C16004 - C16005) * C34255 + (C16154 - C16155) * C34115 +
            (C17734 - C17735) * C34256 + (C17988 - C17989) * C34116 +
            (C17742 - C17743) * C34257 + (C17990 - C17991) * C34117 +
            (C36826 - C36827) * C34258 + (C37036 - C37037) * C82878) *
               C82639) *
              C82938 * C688 +
          (((C16005 - C16004) * C34255 + (C16155 - C16154) * C34115 +
            (C17735 - C17734) * C34256 + (C17989 - C17988) * C34116 +
            (C17743 - C17742) * C34257 + (C17991 - C17990) * C34117 +
            (C36827 - C36826) * C34258 + (C37037 - C37036) * C82878) *
               C82863 +
           ((C16009 - C16008) * C34255 + (C16157 - C16156) * C34115 +
            (C17739 - C17738) * C34256 + (C17993 - C17992) * C34116 +
            (C17747 - C17746) * C34257 + (C17995 - C17994) * C34117 +
            (C15405 * C18261 - C82523 * C18263) * C34258 +
            (C15405 * C18818 - C82523 * C18820) * C82878) *
               C82639) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[34] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19057 * C169 - C19131 * C102 + C19058 * C753 - C19132 * C695 +
            C19059 * C1746 - C19133 * C1653 + C82871 * C2653 - C19134 * C2527) *
               C8607 +
           (C19057 * C551 - C19131 * C497 + C19058 * C1055 - C19132 * C1003 +
            C19059 * C2323 - C19133 * C2241 + C82871 * C3175 - C19134 * C3083) *
               C82864 +
           (C19057 * C1213 - C19131 * C1155 + C19058 * C3441 - C19132 * C3348 +
            C19059 * C3442 - C19133 * C3345 + C82871 * C16353 -
            C19134 * C16304) *
               C8608 +
           (C19057 * C1515 - C19131 * C1463 + C19058 * C3945 - C19132 * C3859 +
            C19059 * C3946 - C19133 * C3862 + C82871 * C16625 -
            C19134 * C16579) *
               C82679) *
              C82523 * C82938 * C688 +
          ((C19131 * C695 - C19057 * C753 + C19132 * C1653 - C19058 * C1746 +
            C19133 * C2527 - C19059 * C2653 + C19134 * C15407 -
            C82871 * C15462) *
               C8607 +
           (C19131 * C1003 - C19057 * C1055 + C19132 * C2241 - C19058 * C2323 +
            C19133 * C3083 - C19059 * C3175 + C19134 * C15693 -
            C82871 * C15739) *
               C82864 +
           (C19131 * C3348 - C19057 * C3441 + C19132 * C3345 - C19058 * C3442 +
            C19133 * C16304 - C19059 * C16353 + C19134 * C16303 -
            C82871 * C16354) *
               C8608 +
           (C19131 * C3859 - C19057 * C3945 + C19132 * C3862 - C19058 * C3946 +
            C19133 * C16579 - C19059 * C16625 + C19134 * C16580 -
            C82871 * C16626) *
               C82679) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C8607 +
            (C82863 * C551 - C6584 * C497 + C82639 * C1055 - C6585 * C1003) *
                C82864 +
            (C82863 * C1213 - C6584 * C1155 + C82639 * C3441 - C6585 * C3348) *
                C8608 +
            (C82863 * C1515 - C6584 * C1463 + C82639 * C3945 - C6585 * C3859) *
                C82679) *
               C1641 +
           ((C6587 - C6588 + C6589 - C6590) * C8607 +
            (C7057 - C7058 + C7059 - C7060) * C82864 +
            (C10535 - C10536 + C10537 - C10538) * C8608 +
            (C11191 - C11192 + C11193 - C11194) * C82679) *
               C1642 +
           ((C6595 - C6596 + C6597 - C6598) * C8607 +
            (C7061 - C7062 + C7063 - C7064) * C82864 +
            (C10543 - C10544 + C10545 - C10546) * C8608 +
            (C11195 - C11196 + C11197 - C11198) * C82679) *
               C82885) *
              C82938 * C688 +
          (((C6584 * C695 - C82863 * C753 + C6585 * C1653 - C82639 * C1746) *
                C8607 +
            (C6584 * C1003 - C82863 * C1055 + C6585 * C2241 - C82639 * C2323) *
                C82864 +
            (C6584 * C3348 - C82863 * C3441 + C6585 * C3345 - C82639 * C3442) *
                C8608 +
            (C6584 * C3859 - C82863 * C3945 + C6585 * C3862 - C82639 * C3946) *
                C82679) *
               C1641 +
           ((C6584 * C694 - C82863 * C754 + C6585 * C1654 - C82639 * C1747) *
                C8607 +
            (C6584 * C1004 - C82863 * C1056 + C6585 * C2242 - C82639 * C2324) *
                C82864 +
            (C6584 * C3347 - C82863 * C3443 + C6585 * C3344 - C82639 * C3444) *
                C8608 +
            (C6584 * C3860 - C82863 * C3947 + C6585 * C3863 - C82639 * C3948) *
                C82679) *
               C1642 +
           ((C6584 * C693 - C82863 * C755 + C6585 * C1655 - C82639 * C1748) *
                C8607 +
            (C6584 * C1005 - C82863 * C1057 + C6585 * C2243 - C82639 * C2325) *
                C82864 +
            (C6584 * C3346 - C82863 * C3445 + C6585 * C3343 - C82639 * C3446) *
                C8608 +
            (C6584 * C3861 - C82863 * C3949 + C6585 * C3864 - C82639 * C3950) *
                C82679) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
               C34255 +
           (C82863 * C551 - C6584 * C497 + C82639 * C1055 - C6585 * C1003) *
               C34115 +
           (C12468 - C12469 + C12470 - C12471) * C34256 +
           (C13078 - C13079 + C13080 - C13081) * C34116 +
           (C33316 - C33317 + C33318 - C33319) * C34257 +
           (C33947 - C33948 + C33949 - C33950) * C34117 +
           (C82863 * C5816 - C6584 * C5690 + C82639 * C18357 - C6585 * C18262) *
               C34258 +
           (C82863 * C6354 - C6584 * C6262 + C82639 * C18899 - C6585 * C18817) *
               C82878) *
              C82523 * C82938 * C688 +
          ((C6584 * C695 - C82863 * C753 + C6585 * C1653 - C82639 * C1746) *
               C34255 +
           (C6584 * C1003 - C82863 * C1055 + C6585 * C2241 - C82639 * C2323) *
               C34115 +
           (C6584 * C3348 - C82863 * C3441 + C6585 * C3345 - C82639 * C3442) *
               C34256 +
           (C6584 * C3859 - C82863 * C3945 + C6585 * C3862 - C82639 * C3946) *
               C34116 +
           (C6584 * C4976 - C82863 * C5060 + C6585 * C16745 - C82639 * C16827) *
               C34257 +
           (C6584 * C5454 - C82863 * C5534 + C6585 * C17213 - C82639 * C17291) *
               C34117 +
           (C6584 * C18262 - C82863 * C18357 + C6585 * C18261 -
            C82639 * C18358) *
               C34258 +
           (C6584 * C18817 - C82863 * C18899 + C6585 * C18818 -
            C82639 * C18900) *
               C82878) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[34] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
            C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
               C19057 +
           (C12270 + C12271) * C19058 + (C22858 + C22859) * C19059 +
           (C24999 + C25000) * C82871) *
              C82523 * C82938 * C688 -
          ((C8608 * C16400 - C9051 * C16303 - C8608 * C16580 + C82679 * C16669 +
            C8607 * C15508 - C9050 * C15407 - C8607 * C15693 +
            C82864 * C15783) *
               C82871 +
           (C25000 + C24999) * C19059 + (C22859 + C22858) * C19058 +
           (C12271 + C12270) * C19057) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
             C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
                C82863 +
            (C12270 + C12271) * C82639) *
               C1641 +
           ((C9089 + C9090) * C82863 + (C11321 + C11322) * C82639) * C1642 +
           ((C9091 + C9092) * C82863 + (C11323 + C11324) * C82639) * C82885) *
              C82938 * C688 -
          (((C8608 * C3532 - C9051 * C3343 - C8608 * C3864 + C82679 * C4025 +
             C8607 * C1854 - C9050 * C1655 - C8607 * C2243 + C82864 * C2415) *
                C82639 +
            (C11324 + C11323) * C82863) *
               C82885 +
           ((C8608 * C3531 - C9051 * C3344 - C8608 * C3863 + C82679 * C4027 +
             C8607 * C1853 - C9050 * C1654 - C8607 * C2242 + C82864 * C2414) *
                C82639 +
            (C11322 + C11321) * C82863) *
               C1642 +
           ((C8608 * C3530 - C9051 * C3345 - C8608 * C3862 + C82679 * C4029 +
             C8607 * C1852 - C9050 * C1653 - C8607 * C2241 + C82864 * C2413) *
                C82639 +
            (C12271 + C12270) * C82863) *
               C1641) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C34255 * C240 - C34688 * C102 - C34255 * C497 + C34115 * C608 +
            C34256 * C1265 - C34689 * C1155 - C34256 * C1463 + C34116 * C1566 +
            C34257 * C4299 - C34690 * C4108 - C34257 * C4683 + C34117 * C4854 +
            C34258 * C5904 - C34691 * C5690 - C34258 * C6262 + C82878 * C6437) *
               C82863 +
           (C37194 + C37195 + C37196 + C37197) * C82639) *
              C82523 * C82938 * C688 -
          ((C34258 * C18460 - C34691 * C18261 - C34258 * C18818 +
            C82878 * C18987 + C34257 * C16905 - C34690 * C16745 -
            C34257 * C17213 + C34117 * C17367 + C34256 * C3530 -
            C34689 * C3345 - C34256 * C3862 + C34116 * C4029 + C34255 * C1852 -
            C34688 * C1653 - C34255 * C2241 + C34115 * C2413) *
               C82639 +
           (C37197 + C37196 + C37195 + C37194) * C82863) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C82864 +
            C18282 * C82679) *
               C19057 +
           (C24428 + C24429) * C19058 + (C24430 + C24431) * C19059 +
           (C24432 + C24440) * C82871) *
              C1149 -
          (((C15405 * C17444 - C15406 * C17443 - C15405 * C17445 +
             C82523 * C17446) *
                C82679 +
            C24439 * C82864) *
               C82871 +
           (C17477 * C82679 + C17476 * C82864) * C19059 +
           (C17475 * C82679 + C17474 * C82864) * C19058 +
           (C18283 * C82679 + C18282 * C82864) * C19057) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1647 * C108 - C1648 * C102 - C1647 * C109 + C1641 * C120 +
             C1649 * C110 - C1650 * C103 - C1649 * C111 + C1642 * C121 +
             C1651 * C112 - C1652 * C104 - C1651 * C113 + C82885 * C122) *
                C82864 +
            (C5737 + C5738 + C5739) * C82679) *
               C82863 +
           ((C2574 + C2575 + C2576) * C82864 +
            (C11441 + C11442 + C11443) * C82679) *
               C82639) *
              C1149 -
          (((C1651 * C4977 - C1652 * C4974 - C1651 * C4978 + C82885 * C4983 +
             C1649 * C4979 - C1650 * C4975 - C1649 * C4980 + C1642 * C4984 +
             C1647 * C4981 - C1648 * C4976 - C1647 * C4982 + C1641 * C4985) *
                C82679 +
            (C11443 + C11442 + C11441) * C82864) *
               C82639 +
           ((C5742 + C5741 + C5740) * C82679 +
            (C5739 + C5738 + C5737) * C82864) *
               C82863) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C34115 +
            C18282 * C34116 + C18283 * C34117 + C30853 * C82878) *
               C82863 +
           (C36601 + C36602 + C36603 + C36611) * C82639) *
              C1149 -
          (((C15405 * C30443 - C15406 * C30442 - C15405 * C30444 +
             C82523 * C30445) *
                C82878 +
            C36610 * C34117 + C17475 * C34116 + C17474 * C34115) *
               C82639 +
           (C30854 * C82878 + C30853 * C34117 + C18283 * C34116 +
            C18282 * C34115) *
               C82863) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19057 * C169 - C19131 * C102 + C19058 * C753 - C19132 * C695 +
             C19059 * C1746 - C19133 * C1653 + C82871 * C2653 -
             C19134 * C2527) *
                C15405 +
            (C19057 * C175 - C19131 * C109 + C19058 * C758 - C19132 * C705 +
             C19059 * C1750 - C19133 * C1658 + C82871 * C2656 -
             C19134 * C2533) *
                C82523) *
               C82864 +
           ((C25133 - C25134 + C25135 - C25136 + C25137 - C25138 + C25139 -
             C25140) *
                C15405 +
            (C25141 - C25142 + C25143 - C25144 + C25145 - C25146 + C25147 -
             C25148) *
                C82523) *
               C82679) *
              C1149 +
          (((C25134 - C25133 + C25136 - C25135 + C25138 - C25137 + C25140 -
             C25139) *
                C15405 +
            (C25142 - C25141 + C25144 - C25143 + C25146 - C25145 + C25148 -
             C25147) *
                C82523) *
               C82864 +
           ((C19131 * C4108 - C19057 * C4198 + C19132 * C4976 - C19058 * C5060 +
             C19133 * C16745 - C19059 * C16827 + C19134 * C17443 -
             C82871 * C17555) *
                C15405 +
            (C19131 * C4113 - C19057 * C4202 + C19132 * C4982 - C19058 * C5063 +
             C19133 * C16748 - C19059 * C16829 + C19134 * C17445 -
             C82871 * C17556) *
                C82523) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C1647 +
            (C82863 * C175 - C6584 * C109 + C82639 * C758 - C6585 * C705) *
                C1641 +
            (C6587 - C6588 + C6589 - C6590) * C1649 +
            (C6591 - C6592 + C6593 - C6594) * C1642 +
            (C6595 - C6596 + C6597 - C6598) * C1651 +
            (C6599 - C6600 + C6601 - C6602) * C82885) *
               C82864 +
           ((C12468 - C12469 + C12470 - C12471) * C1647 +
            (C12472 - C12473 + C12474 - C12475) * C1641 +
            (C10535 - C10536 + C10537 - C10538) * C1649 +
            (C10539 - C10540 + C10541 - C10542) * C1642 +
            (C10543 - C10544 + C10545 - C10546) * C1651 +
            (C10547 - C10548 + C10549 - C10550) * C82885) *
               C82679) *
              C1149 +
          (((C12469 - C12468 + C12471 - C12470) * C1647 +
            (C12473 - C12472 + C12475 - C12474) * C1641 +
            (C10536 - C10535 + C10538 - C10537) * C1649 +
            (C10540 - C10539 + C10542 - C10541) * C1642 +
            (C10544 - C10543 + C10546 - C10545) * C1651 +
            (C10548 - C10547 + C10550 - C10549) * C82885) *
               C82864 +
           ((C6584 * C4108 - C82863 * C4198 + C6585 * C4976 - C82639 * C5060) *
                C1647 +
            (C6584 * C4113 - C82863 * C4202 + C6585 * C4982 - C82639 * C5063) *
                C1641 +
            (C6584 * C4109 - C82863 * C4199 + C6585 * C4975 - C82639 * C5061) *
                C1649 +
            (C6584 * C4115 - C82863 * C4203 + C6585 * C4980 - C82639 * C5064) *
                C1642 +
            (C6584 * C4110 - C82863 * C4200 + C6585 * C4974 - C82639 * C5062) *
                C1651 +
            (C6584 * C4117 - C82863 * C4204 + C6585 * C4978 - C82639 * C5065) *
                C82885) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C15405 +
            (C82863 * C175 - C6584 * C109 + C82639 * C758 - C6585 * C705) *
                C82523) *
               C34115 +
           ((C12468 - C12469 + C12470 - C12471) * C15405 +
            (C12472 - C12473 + C12474 - C12475) * C82523) *
               C34116 +
           ((C33316 - C33317 + C33318 - C33319) * C15405 +
            (C33320 - C33321 + C33322 - C33323) * C82523) *
               C34117 +
           ((C37330 - C37331 + C37332 - C37333) * C15405 +
            (C37334 - C37335 + C37336 - C37337) * C82523) *
               C82878) *
              C1149 +
          (((C12469 - C12468 + C12471 - C12470) * C15405 +
            (C12473 - C12472 + C12475 - C12474) * C82523) *
               C34115 +
           ((C33317 - C33316 + C33319 - C33318) * C15405 +
            (C33321 - C33320 + C33323 - C33322) * C82523) *
               C34116 +
           ((C37331 - C37330 + C37333 - C37332) * C15405 +
            (C37335 - C37334 + C37337 - C37336) * C82523) *
               C34117 +
           ((C6584 * C30022 - C82863 * C30072 + C6585 * C30442 -
             C82639 * C30488) *
                C15405 +
            (C6584 * C30025 - C82863 * C30074 + C6585 * C30444 -
             C82639 * C30489) *
                C82523) *
               C82878) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C15405 +
            (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
                C82523) *
               C19057 +
           ((C11640 - C11641 + C11642 - C11643) * C15405 +
            (C11644 - C11645 + C11646 - C11647) * C82523) *
               C19058 +
           ((C22222 - C22223 + C22224 - C22225) * C15405 +
            (C22226 - C22227 + C22228 - C22229) * C82523) *
               C19059 +
           ((C24573 - C24574 + C24575 - C24576) * C15405 +
            (C24577 - C24578 + C24579 - C24580) * C82523) *
               C82871) *
              C1149 +
          (((C8607 * C1155 - C82864 * C1265 + C8608 * C4108 - C82679 * C4299) *
                C15405 +
            (C8607 * C1165 - C82864 * C1270 + C8608 * C4113 - C82679 * C4303) *
                C82523) *
               C19057 +
           ((C8607 * C3348 - C82864 * C3527 + C8608 * C4976 - C82679 * C5140) *
                C15405 +
            (C8607 * C3360 - C82864 * C3533 + C8608 * C4982 - C82679 * C5143) *
                C82523) *
               C19058 +
           ((C8607 * C3345 - C82864 * C3530 + C8608 * C16745 -
             C82679 * C16905) *
                C15405 +
            (C8607 * C3354 - C82864 * C3536 + C8608 * C16748 -
             C82679 * C16907) *
                C82523) *
               C19059 +
           ((C8607 * C16304 - C82864 * C16399 + C8608 * C17443 -
             C82679 * C17631) *
                C15405 +
            (C8607 * C16308 - C82864 * C16401 + C8608 * C17445 -
             C82679 * C17632) *
                C82523) *
               C82871) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C1647 +
            (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
                C1641 +
            (C8610 - C8611 + C8612 - C8613) * C1649 +
            (C8614 - C8615 + C8616 - C8617) * C1642 +
            (C8618 - C8619 + C8620 - C8621) * C1651 +
            (C8622 - C8623 + C8624 - C8625) * C82885) *
               C82863 +
           ((C11640 - C11641 + C11642 - C11643) * C1647 +
            (C11644 - C11645 + C11646 - C11647) * C1641 +
            (C10649 - C10650 + C10651 - C10652) * C1649 +
            (C10653 - C10654 + C10655 - C10656) * C1642 +
            (C10657 - C10658 + C10659 - C10660) * C1651 +
            (C10661 - C10662 + C10663 - C10664) * C82885) *
               C82639) *
              C1149 +
          (((C8607 * C1155 - C82864 * C1265 + C8608 * C4108 - C82679 * C4299) *
                C1647 +
            (C8607 * C1165 - C82864 * C1270 + C8608 * C4113 - C82679 * C4303) *
                C1641 +
            (C8607 * C1154 - C82864 * C1266 + C8608 * C4109 - C82679 * C4300) *
                C1649 +
            (C8607 * C1163 - C82864 * C1271 + C8608 * C4115 - C82679 * C4304) *
                C1642 +
            (C8607 * C1153 - C82864 * C1267 + C8608 * C4110 - C82679 * C4301) *
                C1651 +
            (C8607 * C1161 - C82864 * C1272 + C8608 * C4117 - C82679 * C4305) *
                C82885) *
               C82863 +
           ((C8607 * C3348 - C82864 * C3527 + C8608 * C4976 - C82679 * C5140) *
                C1647 +
            (C8607 * C3360 - C82864 * C3533 + C8608 * C4982 - C82679 * C5143) *
                C1641 +
            (C8607 * C3347 - C82864 * C3528 + C8608 * C4975 - C82679 * C5141) *
                C1649 +
            (C8607 * C3358 - C82864 * C3534 + C8608 * C4980 - C82679 * C5144) *
                C1642 +
            (C8607 * C3346 - C82864 * C3529 + C8608 * C4974 - C82679 * C5142) *
                C1651 +
            (C8607 * C3356 - C82864 * C3535 + C8608 * C4978 - C82679 * C5145) *
                C82885) *
               C82639) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C34115 * C240 - C34255 * C102 + C34116 * C1265 - C34256 * C1155 +
             C34117 * C4299 - C34257 * C4108 + C82878 * C5904 -
             C34258 * C5690) *
                C15405 +
            (C34115 * C246 - C34255 * C109 + C34116 * C1270 - C34256 * C1165 +
             C34117 * C4303 - C34257 * C4113 + C82878 * C5907 -
             C34258 * C5696) *
                C82523) *
               C82863 +
           ((C36744 - C36745 + C36746 - C36747 + C36748 - C36749 + C36750 -
             C36751) *
                C15405 +
            (C36752 - C36753 + C36754 - C36755 + C36756 - C36757 + C36758 -
             C36759) *
                C82523) *
               C82639) *
              C1149 +
          (((C34255 * C1155 - C34115 * C1265 + C34256 * C4108 - C34116 * C4299 +
             C34257 * C5690 - C34117 * C5904 + C34258 * C30022 -
             C82878 * C30123) *
                C15405 +
            (C34255 * C1165 - C34115 * C1270 + C34256 * C4113 - C34116 * C4303 +
             C34257 * C5696 - C34117 * C5907 + C34258 * C30025 -
             C82878 * C30125) *
                C82523) *
               C82863 +
           ((C34255 * C3348 - C34115 * C3527 + C34256 * C4976 - C34116 * C5140 +
             C34257 * C18262 - C34117 * C18459 + C34258 * C30442 -
             C82878 * C30532) *
                C15405 +
            (C34255 * C3360 - C34115 * C3533 + C34256 * C4982 - C34116 * C5143 +
             C34257 * C18266 - C34117 * C18461 + C34258 * C30444 -
             C82878 * C30533) *
                C82523) *
               C82639) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C19131 +
            (C82523 * C316 - C15405 * C310) * C19057 +
            (C16004 - C16005) * C19132 + (C16006 - C16007) * C19058 +
            (C16008 - C16009) * C19133 + (C16010 - C16011) * C19059 +
            (C16012 - C16013) * C19134 + (C16014 - C16015) * C82871) *
               C82864 +
           ((C18542 - C18543) * C19131 + (C18544 - C18545) * C19057 +
            (C17734 - C17735) * C19132 + (C17736 - C17737) * C19058 +
            (C17738 - C17739) * C19133 + (C17740 - C17741) * C19059 +
            (C24647 - C24648) * C19134 + (C24649 - C24650) * C82871) *
               C82679) *
              C1149 +
          (((C18543 - C18542) * C19131 + (C18545 - C18544) * C19057 +
            (C17735 - C17734) * C19132 + (C17737 - C17736) * C19058 +
            (C17739 - C17738) * C19133 + (C17741 - C17740) * C19059 +
            (C24648 - C24647) * C19134 + (C24650 - C24649) * C82871) *
               C82864 +
           ((C18547 - C18546) * C19131 + (C18549 - C18548) * C19057 +
            (C17743 - C17742) * C19132 + (C17745 - C17744) * C19058 +
            (C17747 - C17746) * C19133 + (C17749 - C17748) * C19059 +
            (C15405 * C17443 - C82523 * C17444) * C19134 +
            (C15405 * C17731 - C82523 * C17732) * C82871) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
             C82885 * C112 - C1651 * C104) *
                C6584 +
            (C1641 * C316 - C1647 * C310 + C1642 * C317 - C1649 * C311 +
             C82885 * C318 - C1651 * C312) *
                C82863 +
            (C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C6585 +
            (C2834 - C2835 + C2836 - C2837 + C2838 - C2839) * C82639) *
               C82864 +
           ((C5991 - C5992 + C5993 - C5994 + C5995 - C5996) * C6584 +
            (C5997 - C5998 + C5999 - C6000 + C6001 - C6002) * C82863 +
            (C11746 - C11747 + C11748 - C11749 + C11750 - C11751) * C6585 +
            (C11752 - C11753 + C11754 - C11755 + C11756 - C11757) * C82639) *
               C82679) *
              C1149 +
          (((C5992 - C5991 + C5994 - C5993 + C5996 - C5995) * C6584 +
            (C5998 - C5997 + C6000 - C5999 + C6002 - C6001) * C82863 +
            (C11747 - C11746 + C11749 - C11748 + C11751 - C11750) * C6585 +
            (C11753 - C11752 + C11755 - C11754 + C11757 - C11756) * C82639) *
               C82864 +
           ((C6004 - C6003 + C6006 - C6005 + C6008 - C6007) * C6584 +
            (C6010 - C6009 + C6012 - C6011 + C6014 - C6013) * C82863 +
            (C1647 * C4976 - C1641 * C4981 + C1649 * C4975 - C1642 * C4979 +
             C1651 * C4974 - C82885 * C4977) *
                C6585 +
            (C1647 * C5220 - C1641 * C5223 + C1649 * C5221 - C1642 * C5224 +
             C1651 * C5222 - C82885 * C5225) *
                C82639) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C6584 +
            (C82523 * C316 - C15405 * C310) * C82863 +
            (C16004 - C16005) * C6585 + (C16006 - C16007) * C82639) *
               C34115 +
           ((C18542 - C18543) * C6584 + (C18544 - C18545) * C82863 +
            (C17734 - C17735) * C6585 + (C17736 - C17737) * C82639) *
               C34116 +
           ((C18546 - C18547) * C6584 + (C18548 - C18549) * C82863 +
            (C17742 - C17743) * C6585 + (C17744 - C17745) * C82639) *
               C34117 +
           ((C30995 - C30996) * C6584 + (C30997 - C30998) * C82863 +
            (C36826 - C36827) * C6585 + (C36828 - C36829) * C82639) *
               C82878) *
              C1149 +
          (((C18543 - C18542) * C6584 + (C18545 - C18544) * C82863 +
            (C17735 - C17734) * C6585 + (C17737 - C17736) * C82639) *
               C34115 +
           ((C18547 - C18546) * C6584 + (C18549 - C18548) * C82863 +
            (C17743 - C17742) * C6585 + (C17745 - C17744) * C82639) *
               C34116 +
           ((C30996 - C30995) * C6584 + (C30998 - C30997) * C82863 +
            (C36827 - C36826) * C6585 + (C36829 - C36828) * C82639) *
               C34117 +
           ((C31000 - C30999) * C6584 + (C31002 - C31001) * C82863 +
            (C15405 * C30442 - C82523 * C30443) * C6585 +
            (C15405 * C30576 - C82523 * C30577) * C82639) *
               C82878) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19131 * C169 - C19353 * C102 - C19131 * C310 + C19057 * C365 +
            C19132 * C753 - C19354 * C695 - C19132 * C857 + C19058 * C913 +
            C19133 * C1746 - C19355 * C1653 - C19133 * C1950 + C19059 * C2035 +
            C19134 * C2653 - C19356 * C2527 - C19134 * C2821 + C82871 * C2927) *
               C82523 * C82864 +
           (C25371 + C25372 + C25373 + C25374) * C82523 * C82679) *
              C1149 -
          ((C19134 * C17555 - C19356 * C17443 - C19134 * C17731 +
            C82871 * C17823 + C19133 * C16827 - C19355 * C16745 -
            C19133 * C16983 + C19059 * C17061 + C19132 * C5060 -
            C19354 * C4976 - C19132 * C5220 + C19058 * C5302 + C19131 * C4198 -
            C19353 * C4108 - C19131 * C4405 + C19057 * C4487) *
               C82523 * C82679 +
           (C25374 + C25373 + C25372 + C25371) * C82523 * C82864) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6584 * C169 - C6812 * C102 - C6584 * C310 + C82863 * C365 +
             C6585 * C753 - C6813 * C695 - C6585 * C857 + C82639 * C913) *
                C1641 +
            (C6851 + C6852) * C1642 + (C6853 + C6854) * C82885) *
               C82864 +
           ((C12782 + C12783) * C1641 + (C10885 + C10886) * C1642 +
            (C10887 + C10888) * C82885) *
               C82679) *
              C1149 -
          (((C6585 * C5062 - C6813 * C4974 - C6585 * C5222 + C82639 * C5300 +
             C6584 * C4200 - C6812 * C4110 - C6584 * C4407 + C82863 * C4489) *
                C82885 +
            (C6585 * C5061 - C6813 * C4975 - C6585 * C5221 + C82639 * C5301 +
             C6584 * C4199 - C6812 * C4109 - C6584 * C4406 + C82863 * C4488) *
                C1642 +
            (C6585 * C5060 - C6813 * C4976 - C6585 * C5220 + C82639 * C5302 +
             C6584 * C4198 - C6812 * C4108 - C6584 * C4405 + C82863 * C4487) *
                C1641) *
               C82679 +
           ((C10888 + C10887) * C82885 + (C10886 + C10885) * C1642 +
            (C12783 + C12782) * C1641) *
               C82864) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C6584 * C169 - C6812 * C102 - C6584 * C310 + C82863 * C365 +
            C6585 * C753 - C6813 * C695 - C6585 * C857 + C82639 * C913) *
               C82523 * C34115 +
           (C12782 + C12783) * C82523 * C34116 +
           (C33643 + C33644) * C82523 * C34117 +
           (C37548 + C37549) * C82523 * C82878) *
              C1149 -
          ((C6585 * C30488 - C6813 * C30442 - C6585 * C30576 + C82639 * C30620 +
            C6584 * C30072 - C6812 * C30022 - C6584 * C30169 +
            C82863 * C30215) *
               C82523 * C82878 +
           (C37549 + C37548) * C82523 * C34117 +
           (C33644 + C33643) * C82523 * C34116 +
           (C12783 + C12782) * C82523 * C34115) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
               C19131 +
           (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
               C19057 +
           (C11640 - C11641 + C11642 - C11643) * C19132 +
           (C11954 - C11955 + C11956 - C11957) * C19058 +
           (C22222 - C22223 + C22224 - C22225) * C19133 +
           (C22540 - C22541 + C22542 - C22543) * C19059 +
           (C24573 - C24574 + C24575 - C24576) * C19134 +
           (C24783 - C24784 + C24785 - C24786) * C82871) *
              C82523 * C1149 +
          ((C8607 * C1155 - C82864 * C1265 + C8608 * C4108 - C82679 * C4299) *
               C19131 +
           (C8607 * C1317 - C82864 * C1416 + C8608 * C4405 - C82679 * C4593) *
               C19057 +
           (C8607 * C3348 - C82864 * C3527 + C8608 * C4976 - C82679 * C5140) *
               C19132 +
           (C8607 * C3613 - C82864 * C3779 + C8608 * C5220 - C82679 * C5377) *
               C19058 +
           (C8607 * C3345 - C82864 * C3530 + C8608 * C16745 - C82679 * C16905) *
               C19133 +
           (C8607 * C3616 - C82864 * C3780 + C8608 * C16983 - C82679 * C17137) *
               C19059 +
           (C8607 * C16304 - C82864 * C16399 + C8608 * C17443 -
            C82679 * C17631) *
               C19134 +
           (C8607 * C16445 - C82864 * C16535 + C8608 * C17731 -
            C82679 * C17898) *
               C82871) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C6584 +
            (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
                C82863 +
            (C11640 - C11641 + C11642 - C11643) * C6585 +
            (C11954 - C11955 + C11956 - C11957) * C82639) *
               C1641 +
           ((C8610 - C8611 + C8612 - C8613) * C6584 +
            (C8839 - C8840 + C8841 - C8842) * C82863 +
            (C10649 - C10650 + C10651 - C10652) * C6585 +
            (C10987 - C10988 + C10989 - C10990) * C82639) *
               C1642 +
           ((C8618 - C8619 + C8620 - C8621) * C6584 +
            (C8843 - C8844 + C8845 - C8846) * C82863 +
            (C10657 - C10658 + C10659 - C10660) * C6585 +
            (C10991 - C10992 + C10993 - C10994) * C82639) *
               C82885) *
              C1149 +
          (((C8607 * C1155 - C82864 * C1265 + C8608 * C4108 - C82679 * C4299) *
                C6584 +
            (C8607 * C1317 - C82864 * C1416 + C8608 * C4405 - C82679 * C4593) *
                C82863 +
            (C8607 * C3348 - C82864 * C3527 + C8608 * C4976 - C82679 * C5140) *
                C6585 +
            (C8607 * C3613 - C82864 * C3779 + C8608 * C5220 - C82679 * C5377) *
                C82639) *
               C1641 +
           ((C8607 * C1154 - C82864 * C1266 + C8608 * C4109 - C82679 * C4300) *
                C6584 +
            (C8607 * C1318 - C82864 * C1417 + C8608 * C4406 - C82679 * C4594) *
                C82863 +
            (C8607 * C3347 - C82864 * C3528 + C8608 * C4975 - C82679 * C5141) *
                C6585 +
            (C8607 * C3614 - C82864 * C3781 + C8608 * C5221 - C82679 * C5378) *
                C82639) *
               C1642 +
           ((C8607 * C1153 - C82864 * C1267 + C8608 * C4110 - C82679 * C4301) *
                C6584 +
            (C8607 * C1319 - C82864 * C1418 + C8608 * C4407 - C82679 * C4595) *
                C82863 +
            (C8607 * C3346 - C82864 * C3529 + C8608 * C4974 - C82679 * C5142) *
                C6585 +
            (C8607 * C3615 - C82864 * C3783 + C8608 * C5222 - C82679 * C5379) *
                C82639) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C34115 * C240 - C34255 * C102 + C34116 * C1265 - C34256 * C1155 +
            C34117 * C4299 - C34257 * C4108 + C82878 * C5904 - C34258 * C5690) *
               C6584 +
           (C34115 * C441 - C34255 * C310 + C34116 * C1416 - C34256 * C1317 +
            C34117 * C4593 - C34257 * C4405 + C82878 * C6185 - C34258 * C5984) *
               C82863 +
           (C36744 - C36745 + C36746 - C36747 + C36748 - C36749 + C36750 -
            C36751) *
               C6585 +
           (C36962 - C36963 + C36964 - C36965 + C36966 - C36967 + C36968 -
            C36969) *
               C82639) *
              C82523 * C1149 +
          ((C34255 * C1155 - C34115 * C1265 + C34256 * C4108 - C34116 * C4299 +
            C34257 * C5690 - C34117 * C5904 + C34258 * C30022 -
            C82878 * C30123) *
               C6584 +
           (C34255 * C1317 - C34115 * C1416 + C34256 * C4405 - C34116 * C4593 +
            C34257 * C5984 - C34117 * C6185 + C34258 * C30169 -
            C82878 * C30259) *
               C82863 +
           (C34255 * C3348 - C34115 * C3527 + C34256 * C4976 - C34116 * C5140 +
            C34257 * C18262 - C34117 * C18459 + C34258 * C30442 -
            C82878 * C30532) *
               C6585 +
           (C34255 * C3613 - C34115 * C3779 + C34256 * C5220 - C34116 * C5377 +
            C34257 * C18537 - C34117 * C18741 + C34258 * C30576 -
            C82878 * C30663) *
               C82639) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezx[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C8607 +
            (C82523 * C503 - C15405 * C497) * C82864 +
            (C18542 - C18543) * C8608 + (C18822 - C18823) * C82679) *
               C19057 +
           ((C16004 - C16005) * C8607 + (C16154 - C16155) * C82864 +
            (C17734 - C17735) * C8608 + (C17988 - C17989) * C82679) *
               C19058 +
           ((C16008 - C16009) * C8607 + (C16156 - C16157) * C82864 +
            (C17738 - C17739) * C8608 + (C17992 - C17993) * C82679) *
               C19059 +
           ((C16012 - C16013) * C8607 + (C16158 - C16159) * C82864 +
            (C24647 - C24648) * C8608 + (C24853 - C24854) * C82679) *
               C82871) *
              C1149 +
          (((C18543 - C18542) * C8607 + (C18823 - C18822) * C82864 +
            (C18547 - C18546) * C8608 + (C18825 - C18824) * C82679) *
               C19057 +
           ((C17735 - C17734) * C8607 + (C17989 - C17988) * C82864 +
            (C17743 - C17742) * C8608 + (C17991 - C17990) * C82679) *
               C19058 +
           ((C17739 - C17738) * C8607 + (C17993 - C17992) * C82864 +
            (C17747 - C17746) * C8608 + (C17995 - C17994) * C82679) *
               C19059 +
           ((C24648 - C24647) * C8607 + (C24854 - C24853) * C82864 +
            (C15405 * C17443 - C82523 * C17444) * C8608 +
            (C15405 * C17985 - C82523 * C17986) * C82679) *
               C82871) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
             C82885 * C112 - C1651 * C104) *
                C8607 +
            (C1641 * C503 - C1647 * C497 + C1642 * C504 - C1649 * C498 +
             C82885 * C505 - C1651 * C499) *
                C82864 +
            (C5991 - C5992 + C5993 - C5994 + C5995 - C5996) * C8608 +
            (C6269 - C6270 + C6271 - C6272 + C6273 - C6274) * C82679) *
               C82863 +
           ((C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C8607 +
            (C3090 - C3091 + C3092 - C3093 + C3094 - C3095) * C82864 +
            (C11746 - C11747 + C11748 - C11749 + C11750 - C11751) * C8608 +
            (C12056 - C12057 + C12058 - C12059 + C12060 - C12061) * C82679) *
               C82639) *
              C1149 +
          (((C5992 - C5991 + C5994 - C5993 + C5996 - C5995) * C8607 +
            (C6270 - C6269 + C6272 - C6271 + C6274 - C6273) * C82864 +
            (C6004 - C6003 + C6006 - C6005 + C6008 - C6007) * C8608 +
            (C6276 - C6275 + C6278 - C6277 + C6280 - C6279) * C82679) *
               C82863 +
           ((C11747 - C11746 + C11749 - C11748 + C11751 - C11750) * C8607 +
            (C12057 - C12056 + C12059 - C12058 + C12061 - C12060) * C82864 +
            (C1647 * C4976 - C1641 * C4981 + C1649 * C4975 - C1642 * C4979 +
             C1651 * C4974 - C82885 * C4977) *
                C8608 +
            (C1647 * C5454 - C1641 * C5457 + C1649 * C5455 - C1642 * C5458 +
             C1651 * C5456 - C82885 * C5459) *
                C82679) *
               C82639) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C34255 +
            (C82523 * C503 - C15405 * C497) * C34115 +
            (C18542 - C18543) * C34256 + (C18822 - C18823) * C34116 +
            (C18546 - C18547) * C34257 + (C18824 - C18825) * C34117 +
            (C30995 - C30996) * C34258 + (C31151 - C31152) * C82878) *
               C82863 +
           ((C16004 - C16005) * C34255 + (C16154 - C16155) * C34115 +
            (C17734 - C17735) * C34256 + (C17988 - C17989) * C34116 +
            (C17742 - C17743) * C34257 + (C17990 - C17991) * C34117 +
            (C36826 - C36827) * C34258 + (C37036 - C37037) * C82878) *
               C82639) *
              C1149 +
          (((C18543 - C18542) * C34255 + (C18823 - C18822) * C34115 +
            (C18547 - C18546) * C34256 + (C18825 - C18824) * C34116 +
            (C30996 - C30995) * C34257 + (C31152 - C31151) * C34117 +
            (C31000 - C30999) * C34258 + (C31154 - C31153) * C82878) *
               C82863 +
           ((C17735 - C17734) * C34255 + (C17989 - C17988) * C34115 +
            (C17743 - C17742) * C34256 + (C17991 - C17990) * C34116 +
            (C36827 - C36826) * C34257 + (C37037 - C37036) * C34117 +
            (C15405 * C30442 - C82523 * C30443) * C34258 +
            (C15405 * C30706 - C82523 * C30707) * C82878) *
               C82639) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19057 * C169 - C19131 * C102 + C19058 * C753 - C19132 * C695 +
            C19059 * C1746 - C19133 * C1653 + C82871 * C2653 - C19134 * C2527) *
               C8607 +
           (C19057 * C551 - C19131 * C497 + C19058 * C1055 - C19132 * C1003 +
            C19059 * C2323 - C19133 * C2241 + C82871 * C3175 - C19134 * C3083) *
               C82864 +
           (C25133 - C25134 + C25135 - C25136 + C25137 - C25138 + C25139 -
            C25140) *
               C8608 +
           (C25573 - C25574 + C25575 - C25576 + C25577 - C25578 + C25579 -
            C25580) *
               C82679) *
              C82523 * C1149 +
          ((C25134 - C25133 + C25136 - C25135 + C25138 - C25137 + C25140 -
            C25139) *
               C8607 +
           (C25574 - C25573 + C25576 - C25575 + C25578 - C25577 + C25580 -
            C25579) *
               C82864 +
           (C19131 * C4108 - C19057 * C4198 + C19132 * C4976 - C19058 * C5060 +
            C19133 * C16745 - C19059 * C16827 + C19134 * C17443 -
            C82871 * C17555) *
               C8608 +
           (C19131 * C4683 - C19057 * C4765 + C19132 * C5454 - C19058 * C5534 +
            C19133 * C17213 - C19059 * C17291 + C19134 * C17985 -
            C82871 * C18069) *
               C82679) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C8607 +
            (C82863 * C551 - C6584 * C497 + C82639 * C1055 - C6585 * C1003) *
                C82864 +
            (C12468 - C12469 + C12470 - C12471) * C8608 +
            (C13078 - C13079 + C13080 - C13081) * C82679) *
               C1641 +
           ((C6587 - C6588 + C6589 - C6590) * C8607 +
            (C7057 - C7058 + C7059 - C7060) * C82864 +
            (C10535 - C10536 + C10537 - C10538) * C8608 +
            (C11191 - C11192 + C11193 - C11194) * C82679) *
               C1642 +
           ((C6595 - C6596 + C6597 - C6598) * C8607 +
            (C7061 - C7062 + C7063 - C7064) * C82864 +
            (C10543 - C10544 + C10545 - C10546) * C8608 +
            (C11195 - C11196 + C11197 - C11198) * C82679) *
               C82885) *
              C1149 +
          (((C12469 - C12468 + C12471 - C12470) * C8607 +
            (C13079 - C13078 + C13081 - C13080) * C82864 +
            (C6584 * C4108 - C82863 * C4198 + C6585 * C4976 - C82639 * C5060) *
                C8608 +
            (C6584 * C4683 - C82863 * C4765 + C6585 * C5454 - C82639 * C5534) *
                C82679) *
               C1641 +
           ((C10536 - C10535 + C10538 - C10537) * C8607 +
            (C11192 - C11191 + C11194 - C11193) * C82864 +
            (C6584 * C4109 - C82863 * C4199 + C6585 * C4975 - C82639 * C5061) *
                C8608 +
            (C6584 * C4684 - C82863 * C4766 + C6585 * C5455 - C82639 * C5535) *
                C82679) *
               C1642 +
           ((C10544 - C10543 + C10546 - C10545) * C8607 +
            (C11196 - C11195 + C11198 - C11197) * C82864 +
            (C6584 * C4110 - C82863 * C4200 + C6585 * C4974 - C82639 * C5062) *
                C8608 +
            (C6584 * C4685 - C82863 * C4767 + C6585 * C5456 - C82639 * C5536) *
                C82679) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
               C34255 +
           (C82863 * C551 - C6584 * C497 + C82639 * C1055 - C6585 * C1003) *
               C34115 +
           (C12468 - C12469 + C12470 - C12471) * C34256 +
           (C13078 - C13079 + C13080 - C13081) * C34116 +
           (C33316 - C33317 + C33318 - C33319) * C34257 +
           (C33947 - C33948 + C33949 - C33950) * C34117 +
           (C37330 - C37331 + C37332 - C37333) * C34258 +
           (C37748 - C37749 + C37750 - C37751) * C82878) *
              C82523 * C1149 +
          ((C12469 - C12468 + C12471 - C12470) * C34255 +
           (C13079 - C13078 + C13081 - C13080) * C34115 +
           (C33317 - C33316 + C33319 - C33318) * C34256 +
           (C33948 - C33947 + C33950 - C33949) * C34116 +
           (C37331 - C37330 + C37333 - C37332) * C34257 +
           (C37749 - C37748 + C37751 - C37750) * C34117 +
           (C6584 * C30022 - C82863 * C30072 + C6585 * C30442 -
            C82639 * C30488) *
               C34258 +
           (C6584 * C30303 - C82863 * C30349 + C6585 * C30706 -
            C82639 * C30750) *
               C82878) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
            C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
               C19057 +
           (C12270 + C12271) * C19058 + (C22858 + C22859) * C19059 +
           (C24999 + C25000) * C82871) *
              C82523 * C1149 -
          ((C8608 * C17631 - C9051 * C17443 - C8608 * C17985 + C82679 * C18144 +
            C8607 * C16399 - C9050 * C16304 - C8607 * C16579 +
            C82864 * C16670) *
               C82871 +
           (C8608 * C16905 - C9051 * C16745 - C8608 * C17213 + C82679 * C17367 +
            C8607 * C3530 - C9050 * C3345 - C8607 * C3862 + C82864 * C4029) *
               C19059 +
           (C8608 * C5140 - C9051 * C4976 - C8608 * C5454 + C82679 * C5613 +
            C8607 * C3527 - C9050 * C3348 - C8607 * C3859 + C82864 * C4030) *
               C19058 +
           (C8608 * C4299 - C9051 * C4108 - C8608 * C4683 + C82679 * C4854 +
            C8607 * C1265 - C9050 * C1155 - C8607 * C1463 + C82864 * C1566) *
               C19057) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
             C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
                C82863 +
            (C12270 + C12271) * C82639) *
               C1641 +
           ((C9089 + C9090) * C82863 + (C11321 + C11322) * C82639) * C1642 +
           ((C9091 + C9092) * C82863 + (C11323 + C11324) * C82639) * C82885) *
              C1149 -
          (((C8608 * C5142 - C9051 * C4974 - C8608 * C5456 + C82679 * C5611 +
             C8607 * C3529 - C9050 * C3346 - C8607 * C3861 + C82864 * C4026) *
                C82639 +
            (C8608 * C4301 - C9051 * C4110 - C8608 * C4685 + C82679 * C4856 +
             C8607 * C1267 - C9050 * C1153 - C8607 * C1465 + C82864 * C1564) *
                C82863) *
               C82885 +
           ((C8608 * C5141 - C9051 * C4975 - C8608 * C5455 + C82679 * C5612 +
             C8607 * C3528 - C9050 * C3347 - C8607 * C3860 + C82864 * C4028) *
                C82639 +
            (C8608 * C4300 - C9051 * C4109 - C8608 * C4684 + C82679 * C4855 +
             C8607 * C1266 - C9050 * C1154 - C8607 * C1464 + C82864 * C1565) *
                C82863) *
               C1642 +
           ((C8608 * C5140 - C9051 * C4976 - C8608 * C5454 + C82679 * C5613 +
             C8607 * C3527 - C9050 * C3348 - C8607 * C3859 + C82864 * C4030) *
                C82639 +
            (C8608 * C4299 - C9051 * C4108 - C8608 * C4683 + C82679 * C4854 +
             C8607 * C1265 - C9050 * C1155 - C8607 * C1463 + C82864 * C1566) *
                C82863) *
               C1641) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C34255 * C240 - C34688 * C102 - C34255 * C497 + C34115 * C608 +
            C34256 * C1265 - C34689 * C1155 - C34256 * C1463 + C34116 * C1566 +
            C34257 * C4299 - C34690 * C4108 - C34257 * C4683 + C34117 * C4854 +
            C34258 * C5904 - C34691 * C5690 - C34258 * C6262 + C82878 * C6437) *
               C82863 +
           (C37194 + C37195 + C37196 + C37197) * C82639) *
              C82523 * C1149 -
          ((C34258 * C30532 - C34691 * C30442 - C34258 * C30706 +
            C82878 * C30793 + C34257 * C18459 - C34690 * C18262 -
            C34257 * C18817 + C34117 * C18988 + C34256 * C5140 -
            C34689 * C4976 - C34256 * C5454 + C34116 * C5613 + C34255 * C3527 -
            C34688 * C3348 - C34255 * C3859 + C34115 * C4030) *
               C82639 +
           (C34258 * C30123 - C34691 * C30022 - C34258 * C30303 +
            C82878 * C30398 + C34257 * C5904 - C34690 * C5690 - C34257 * C6262 +
            C34117 * C6437 + C34256 * C4299 - C34689 * C4108 - C34256 * C4683 +
            C34116 * C4854 + C34255 * C1265 - C34688 * C1155 - C34255 * C1463 +
            C34115 * C1566) *
               C82863) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((C92 * C108 - C93 * C102 - C92 * C109 + C81 * C120 + C94 * C110 -
               C95 * C103 - C94 * C111 + C82 * C121 + C96 * C112 - C97 * C104 -
               C96 * C113 + C83 * C122 + C98 * C114 - C99 * C105 - C98 * C115 +
               C84 * C123 + C100 * C116 - C101 * C106 - C100 * C117 +
               C85 * C124) *
                  C82592 * C82581 * C82938 * C82939 * C90 -
              (C100 * C118 - C101 * C107 - C100 * C119 + C85 * C125 +
               C98 * C116 - C99 * C106 - C98 * C117 + C84 * C124 + C96 * C114 -
               C97 * C105 - C96 * C115 + C83 * C123 + C94 * C112 - C95 * C104 -
               C94 * C113 + C82 * C122 + C92 * C110 - C93 * C103 - C92 * C111 +
               C81 * C121) *
                  C82592 * C82581 * C82938 * C82939 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             (((C1647 * C108 - C1648 * C102 - C1647 * C109 + C1641 * C120 +
                C1649 * C110 - C1650 * C103 - C1649 * C111 + C1642 * C121 +
                C1651 * C112 - C1652 * C104 - C1651 * C113 + C82885 * C122) *
                   C82592 * C82931 +
               (C1647 * C704 - C1648 * C695 - C1647 * C705 + C1641 * C710 +
                C1649 * C702 - C1650 * C694 - C1649 * C703 + C1642 * C709 +
                C1651 * C700 - C1652 * C693 - C1651 * C701 + C82885 * C708) *
                   C82592 * C82916 +
               (C1647 * C1657 - C1648 * C1653 - C1647 * C1658 + C1641 * C1665 +
                C1649 * C1659 - C1650 * C1654 - C1649 * C1660 + C1642 * C1666 +
                C1651 * C1661 - C1652 * C1655 - C1651 * C1662 +
                C82885 * C1667) *
                   C82592 * C82893) *
                  C82938 * C82939 * C90 -
              ((C1651 * C1663 - C1652 * C1656 - C1651 * C1664 + C82885 * C1668 +
                C1649 * C1661 - C1650 * C1655 - C1649 * C1662 + C1642 * C1667 +
                C1647 * C1659 - C1648 * C1654 - C1647 * C1660 + C1641 * C1666) *
                   C82592 * C82893 +
               (C1651 * C698 - C1652 * C692 - C1651 * C699 + C82885 * C707 +
                C1649 * C700 - C1650 * C693 - C1649 * C701 + C1642 * C708 +
                C1647 * C702 - C1648 * C694 - C1647 * C703 + C1641 * C709) *
                   C82592 * C82916 +
               (C1651 * C114 - C1652 * C105 - C1651 * C115 + C82885 * C123 +
                C1649 * C112 - C1650 * C104 - C1649 * C113 + C1642 * C122 +
                C1647 * C110 - C1648 * C103 - C1647 * C111 + C1641 * C121) *
                   C82592 * C82931) *
                  C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1647 * C108 - C1648 * C102 - C1647 * C109 + C1641 * C120 +
            C1649 * C110 - C1650 * C103 - C1649 * C111 + C1642 * C121 +
            C1651 * C112 - C1652 * C104 - C1651 * C113 + C82885 * C122) *
               C82932 +
           (C1647 * C1164 - C1648 * C1155 - C1647 * C1165 + C1641 * C1170 +
            C1649 * C1162 - C1650 * C1154 - C1649 * C1163 + C1642 * C1169 +
            C1651 * C1160 - C1652 * C1153 - C1651 * C1161 + C82885 * C1168) *
               C82918 +
           (C1647 * C4112 - C1648 * C4108 - C1647 * C4113 + C1641 * C4120 +
            C1649 * C4114 - C1650 * C4109 - C1649 * C4115 + C1642 * C4121 +
            C1651 * C4116 - C1652 * C4110 - C1651 * C4117 + C82885 * C4122) *
               C82896) *
              C82581 * C82938 * C82939 * C90 -
          ((C1651 * C4118 - C1652 * C4111 - C1651 * C4119 + C82885 * C4123 +
            C1649 * C4116 - C1650 * C4110 - C1649 * C4117 + C1642 * C4122 +
            C1647 * C4114 - C1648 * C4109 - C1647 * C4115 + C1641 * C4121) *
               C82896 +
           (C1651 * C1158 - C1652 * C1152 - C1651 * C1159 + C82885 * C1167 +
            C1649 * C1160 - C1650 * C1153 - C1649 * C1161 + C1642 * C1168 +
            C1647 * C1162 - C1648 * C1154 - C1647 * C1163 + C1641 * C1169) *
               C82918 +
           (C1651 * C114 - C1652 * C105 - C1651 * C115 + C82885 * C123 +
            C1649 * C112 - C1650 * C104 - C1649 * C113 + C1642 * C122 +
            C1647 * C110 - C1648 * C103 - C1647 * C111 + C1641 * C121) *
               C82932) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13259 * C108 - C13260 * C102 - C13259 * C109 + C82925 * C120 +
            C13261 * C110 - C13262 * C103 - C13261 * C111 + C82909 * C121 +
            C13263 * C112 - C13264 * C104 - C13263 * C113 + C82885 * C122) *
               C82592 * C13256 +
           (C13259 * C704 - C13260 * C695 - C13259 * C705 + C82925 * C710 +
            C13261 * C702 - C13262 * C694 - C13261 * C703 + C82909 * C709 +
            C13263 * C700 - C13264 * C693 - C13263 * C701 + C82885 * C708) *
               C82592 * C13257 +
           (C13259 * C1657 - C13260 * C1653 - C13259 * C1658 + C82925 * C1665 +
            C13261 * C1659 - C13262 * C1654 - C13261 * C1660 + C82909 * C1666 +
            C13263 * C1661 - C13264 * C1655 - C13263 * C1662 + C82885 * C1667) *
               C82592 * C82893) *
              C82938 * C82939 * C90 -
          ((C13263 * C1663 - C13264 * C1656 - C13263 * C1664 + C82885 * C1668 +
            C13261 * C1661 - C13262 * C1655 - C13261 * C1662 + C82909 * C1667 +
            C13259 * C1659 - C13260 * C1654 - C13259 * C1660 + C82925 * C1666) *
               C82592 * C82893 +
           (C13263 * C698 - C13264 * C692 - C13263 * C699 + C82885 * C707 +
            C13261 * C700 - C13262 * C693 - C13261 * C701 + C82909 * C708 +
            C13259 * C702 - C13260 * C694 - C13259 * C703 + C82925 * C709) *
               C82592 * C13257 +
           (C13263 * C114 - C13264 * C105 - C13263 * C115 + C82885 * C123 +
            C13261 * C112 - C13262 * C104 - C13261 * C113 + C82909 * C122 +
            C13259 * C110 - C13260 * C103 - C13259 * C111 + C82925 * C121) *
               C82592 * C13256) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
               C82592 * C15400 +
           (C15405 * C704 - C15406 * C695 - C15405 * C705 + C82523 * C710) *
               C82592 * C15401 +
           (C15405 * C1657 - C15406 * C1653 - C15405 * C1658 + C82523 * C1665) *
               C82592 * C15402 +
           (C15405 * C2532 - C15406 * C2527 - C15405 * C2533 + C82523 * C2536) *
               C82592 * C15403 +
           (C15405 * C15409 - C15406 * C15407 - C15405 * C15410 +
            C82523 * C15413) *
               C82592 * C15404) *
              C82938 * C82939 * C90 -
          ((C15405 * C15411 - C15406 * C15408 - C15405 * C15412 +
            C82523 * C15414) *
               C82592 * C15404 +
           (C15405 * C2530 - C15406 * C2526 - C15405 * C2531 + C82523 * C2535) *
               C82592 * C15403 +
           (C15405 * C1659 - C15406 * C1654 - C15405 * C1660 + C82523 * C1666) *
               C82592 * C15402 +
           (C15405 * C702 - C15406 * C694 - C15405 * C703 + C82523 * C709) *
               C82592 * C15401 +
           (C15405 * C110 - C15406 * C103 - C15405 * C111 + C82523 * C121) *
               C82592 * C15400) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C82932 +
            (C15405 * C1164 - C15406 * C1155 - C15405 * C1165 +
             C82523 * C1170) *
                C82918 +
            (C15405 * C4112 - C15406 * C4108 - C15405 * C4113 +
             C82523 * C4120) *
                C82896) *
               C13256 +
           (C15856 * C82932 +
            (C15405 * C3359 - C15406 * C3348 - C15405 * C3360 +
             C82523 * C3366) *
                C82918 +
            (C15405 * C4981 - C15406 * C4976 - C15405 * C4982 +
             C82523 * C4985) *
                C82896) *
               C13257 +
           (C15857 * C82932 +
            (C15405 * C3353 - C15406 * C3345 - C15405 * C3354 +
             C82523 * C3363) *
                C82918 +
            (C15405 * C16747 - C15406 * C16745 - C15405 * C16748 +
             C82523 * C16751) *
                C82896) *
               C82893) *
              C82938 * C82939 * C90 -
          (((C15405 * C16749 - C15406 * C16746 - C15405 * C16750 +
             C82523 * C16752) *
                C82896 +
            (C15405 * C3351 - C15406 * C3344 - C15405 * C3352 +
             C82523 * C3362) *
                C82918 +
            (C15405 * C1659 - C15406 * C1654 - C15405 * C1660 +
             C82523 * C1666) *
                C82932) *
               C82893 +
           ((C15405 * C4979 - C15406 * C4975 - C15405 * C4980 +
             C82523 * C4984) *
                C82896 +
            (C15405 * C3357 - C15406 * C3347 - C15405 * C3358 +
             C82523 * C3365) *
                C82918 +
            (C15405 * C702 - C15406 * C694 - C15405 * C703 + C82523 * C709) *
                C82932) *
               C13257 +
           ((C15405 * C4114 - C15406 * C4109 - C15405 * C4115 +
             C82523 * C4121) *
                C82896 +
            (C15405 * C1162 - C15406 * C1154 - C15405 * C1163 +
             C82523 * C1169) *
                C82918 +
            (C15405 * C110 - C15406 * C103 - C15405 * C111 + C82523 * C121) *
                C82932) *
               C13256) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13259 * C108 - C13260 * C102 - C13259 * C109 + C82925 * C120 +
            C13261 * C110 - C13262 * C103 - C13261 * C111 + C82909 * C121 +
            C13263 * C112 - C13264 * C104 - C13263 * C113 + C82885 * C122) *
               C25720 +
           (C13259 * C1164 - C13260 * C1155 - C13259 * C1165 + C82925 * C1170 +
            C13261 * C1162 - C13262 * C1154 - C13261 * C1163 + C82909 * C1169 +
            C13263 * C1160 - C13264 * C1153 - C13263 * C1161 + C82885 * C1168) *
               C25721 +
           (C13259 * C4112 - C13260 * C4108 - C13259 * C4113 + C82925 * C4120 +
            C13261 * C4114 - C13262 * C4109 - C13261 * C4115 + C82909 * C4121 +
            C13263 * C4116 - C13264 * C4110 - C13263 * C4117 + C82885 * C4122) *
               C82896) *
              C82581 * C82938 * C82939 * C90 -
          ((C13263 * C4118 - C13264 * C4111 - C13263 * C4119 + C82885 * C4123 +
            C13261 * C4116 - C13262 * C4110 - C13261 * C4117 + C82909 * C4122 +
            C13259 * C4114 - C13260 * C4109 - C13259 * C4115 + C82925 * C4121) *
               C82896 +
           (C13263 * C1158 - C13264 * C1152 - C13263 * C1159 + C82885 * C1167 +
            C13261 * C1160 - C13262 * C1153 - C13261 * C1161 + C82909 * C1168 +
            C13259 * C1162 - C13260 * C1154 - C13259 * C1163 + C82925 * C1169) *
               C25721 +
           (C13263 * C114 - C13264 * C105 - C13263 * C115 + C82885 * C123 +
            C13261 * C112 - C13262 * C104 - C13261 * C113 + C82909 * C122 +
            C13259 * C110 - C13260 * C103 - C13259 * C111 + C82925 * C121) *
               C25720) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C25720 +
            C18282 * C25721 + C18283 * C82896) *
               C82931 +
           (C15856 * C25720 + C17474 * C25721 + C17475 * C82896) * C82916 +
           (C15857 * C25720 + C17476 * C25721 + C17477 * C82896) * C82893) *
              C82938 * C82939 * C90 -
          (((C15405 * C16749 - C15406 * C16746 - C15405 * C16750 +
             C82523 * C16752) *
                C82896 +
            (C15405 * C3351 - C15406 * C3344 - C15405 * C3352 +
             C82523 * C3362) *
                C25721 +
            (C15405 * C1659 - C15406 * C1654 - C15405 * C1660 +
             C82523 * C1666) *
                C25720) *
               C82893 +
           ((C15405 * C4979 - C15406 * C4975 - C15405 * C4980 +
             C82523 * C4984) *
                C82896 +
            (C15405 * C3357 - C15406 * C3347 - C15405 * C3358 +
             C82523 * C3365) *
                C25721 +
            (C15405 * C702 - C15406 * C694 - C15405 * C703 + C82523 * C709) *
                C25720) *
               C82916 +
           ((C15405 * C4114 - C15406 * C4109 - C15405 * C4115 +
             C82523 * C4121) *
                C82896 +
            (C15405 * C1162 - C15406 * C1154 - C15405 * C1163 +
             C82523 * C1169) *
                C25721 +
            (C15405 * C110 - C15406 * C103 - C15405 * C111 + C82523 * C121) *
                C25720) *
               C82931) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
               C30017 +
           C18282 * C30018 + C18283 * C30019 +
           (C15405 * C5695 - C15406 * C5690 - C15405 * C5696 + C82523 * C5699) *
               C30020 +
           (C15405 * C30024 - C15406 * C30022 - C15405 * C30025 +
            C82523 * C30028) *
               C30021) *
              C82581 * C82938 * C82939 * C90 -
          ((C15405 * C30026 - C15406 * C30023 - C15405 * C30027 +
            C82523 * C30029) *
               C30021 +
           (C15405 * C5693 - C15406 * C5689 - C15405 * C5694 + C82523 * C5698) *
               C30020 +
           (C15405 * C4114 - C15406 * C4109 - C15405 * C4115 + C82523 * C4121) *
               C30019 +
           (C15405 * C1162 - C15406 * C1154 - C15405 * C1163 + C82523 * C1169) *
               C30018 +
           (C15405 * C110 - C15406 * C103 - C15405 * C111 + C82523 * C121) *
               C30017) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C82581 * C169 - C168 * C102) * C92 +
               (C82581 * C175 - C168 * C109) * C81 + (C182 - C183) * C94 +
               (C184 - C185) * C82 + (C186 - C187) * C96 + (C188 - C189) * C83 +
               (C190 - C191) * C98 + (C192 - C193) * C84 +
               (C194 - C195) * C100 + (C196 - C197) * C85) *
                  C82592 * C82938 * C82939 * C90 +
              ((C183 - C182) * C92 + (C185 - C184) * C81 + (C187 - C186) * C94 +
               (C189 - C188) * C82 + (C191 - C190) * C96 + (C193 - C192) * C83 +
               (C195 - C194) * C98 + (C197 - C196) * C84 +
               (C168 * C107 - C82581 * C174) * C100 +
               (C168 * C119 - C82581 * C180) * C85) *
                  C82592 * C82938 * C82939 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             (((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
                C82893 * C1746 - C1745 * C1653) *
                   C1647 +
               (C82931 * C175 - C1743 * C109 + C82916 * C758 - C1744 * C705 +
                C82893 * C1750 - C1745 * C1658) *
                   C1641 +
               (C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C1649 +
               (C1761 - C1762 + C1763 - C1764 + C1765 - C1766) * C1642 +
               (C1767 - C1768 + C1769 - C1770 + C1771 - C1772) * C1651 +
               (C1773 - C1774 + C1775 - C1776 + C1777 - C1778) * C82885) *
                  C82592 * C82938 * C82939 * C90 +
              ((C1756 - C1755 + C1758 - C1757 + C1760 - C1759) * C1647 +
               (C1762 - C1761 + C1764 - C1763 + C1766 - C1765) * C1641 +
               (C1768 - C1767 + C1770 - C1769 + C1772 - C1771) * C1649 +
               (C1774 - C1773 + C1776 - C1775 + C1778 - C1777) * C1642 +
               (C1743 * C105 - C82931 * C172 + C1744 * C692 - C82916 * C756 +
                C1745 * C1656 - C82893 * C1749) *
                   C1651 +
               (C1743 * C115 - C82931 * C178 + C1744 * C699 - C82916 * C761 +
                C1745 * C1664 - C82893 * C1753) *
                   C82885) *
                  C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C1647 +
            (C82581 * C175 - C168 * C109) * C1641 + (C182 - C183) * C1649 +
            (C184 - C185) * C1642 + (C186 - C187) * C1651 +
            (C188 - C189) * C82885) *
               C82932 +
           ((C82581 * C1213 - C168 * C1155) * C1647 +
            (C82581 * C1218 - C168 * C1165) * C1641 + (C4207 - C4208) * C1649 +
            (C4209 - C4210) * C1642 + (C4211 - C4212) * C1651 +
            (C4213 - C4214) * C82885) *
               C82918 +
           ((C82581 * C4198 - C168 * C4108) * C1647 +
            (C82581 * C4202 - C168 * C4113) * C1641 + (C4215 - C4216) * C1649 +
            (C4217 - C4218) * C1642 + (C4219 - C4220) * C1651 +
            (C4221 - C4222) * C82885) *
               C82896) *
              C82938 * C82939 * C90 +
          (((C183 - C182) * C1647 + (C185 - C184) * C1641 +
            (C187 - C186) * C1649 + (C189 - C188) * C1642 +
            (C191 - C190) * C1651 + (C193 - C192) * C82885) *
               C82932 +
           ((C4208 - C4207) * C1647 + (C4210 - C4209) * C1641 +
            (C4212 - C4211) * C1649 + (C4214 - C4213) * C1642 +
            (C168 * C1152 - C82581 * C1216) * C1651 +
            (C168 * C1159 - C82581 * C1221) * C82885) *
               C82918 +
           ((C4216 - C4215) * C1647 + (C4218 - C4217) * C1641 +
            (C4220 - C4219) * C1649 + (C4222 - C4221) * C1642 +
            (C168 * C4111 - C82581 * C4201) * C1651 +
            (C168 * C4119 - C82581 * C4205) * C82885) *
               C82896) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
            C82893 * C1746 - C13341 * C1653) *
               C13259 +
           (C13256 * C175 - C13339 * C109 + C13257 * C758 - C13340 * C705 +
            C82893 * C1750 - C13341 * C1658) *
               C82925 +
           (C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C13261 +
           (C13349 - C13350 + C13351 - C13352 + C13353 - C13354) * C82909 +
           (C13355 - C13356 + C13357 - C13358 + C13359 - C13360) * C13263 +
           (C13361 - C13362 + C13363 - C13364 + C13365 - C13366) * C82885) *
              C82592 * C82938 * C82939 * C90 +
          ((C13344 - C13343 + C13346 - C13345 + C13348 - C13347) * C13259 +
           (C13350 - C13349 + C13352 - C13351 + C13354 - C13353) * C82925 +
           (C13356 - C13355 + C13358 - C13357 + C13360 - C13359) * C13261 +
           (C13362 - C13361 + C13364 - C13363 + C13366 - C13365) * C82909 +
           (C13339 * C105 - C13256 * C172 + C13340 * C692 - C13257 * C756 +
            C13341 * C1656 - C82893 * C1749) *
               C13263 +
           (C13339 * C115 - C13256 * C178 + C13340 * C699 - C13257 * C761 +
            C13341 * C1664 - C82893 * C1753) *
               C82885) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15400 * C169 - C15457 * C102 + C15401 * C753 - C15458 * C695 +
            C15402 * C1746 - C15459 * C1653 + C15403 * C2653 - C15460 * C2527 +
            C15404 * C15462 - C15461 * C15407) *
               C15405 +
           (C15400 * C175 - C15457 * C109 + C15401 * C758 - C15458 * C705 +
            C15402 * C1750 - C15459 * C1658 + C15403 * C2656 - C15460 * C2533 +
            C15404 * C15464 - C15461 * C15410) *
               C82523) *
              C82592 * C82938 * C82939 * C90 +
          ((C15457 * C103 - C15400 * C170 + C15458 * C694 - C15401 * C754 +
            C15459 * C1654 - C15402 * C1747 + C15460 * C2526 - C15403 * C2654 +
            C15461 * C15408 - C15404 * C15463) *
               C15405 +
           (C15457 * C111 - C15400 * C176 + C15458 * C703 - C15401 * C759 +
            C15459 * C1660 - C15402 * C1751 + C15460 * C2531 - C15403 * C2657 +
            C15461 * C15412 - C15404 * C15465) *
               C82523) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C15405 +
            (C13256 * C175 - C13339 * C109 + C13257 * C758 - C13340 * C705 +
             C82893 * C1750 - C13341 * C1658) *
                C82523) *
               C82932 +
           ((C13256 * C1213 - C13339 * C1155 + C13257 * C3441 - C13340 * C3348 +
             C82893 * C3442 - C13341 * C3345) *
                C15405 +
            (C13256 * C1218 - C13339 * C1165 + C13257 * C3447 - C13340 * C3360 +
             C82893 * C3448 - C13341 * C3354) *
                C82523) *
               C82918 +
           ((C13256 * C4198 - C13339 * C4108 + C13257 * C5060 - C13340 * C4976 +
             C82893 * C16827 - C13341 * C16745) *
                C15405 +
            (C13256 * C4202 - C13339 * C4113 + C13257 * C5063 - C13340 * C4982 +
             C82893 * C16829 - C13341 * C16748) *
                C82523) *
               C82896) *
              C82938 * C82939 * C90 +
          (((C13344 - C13343 + C13346 - C13345 + C13348 - C13347) * C15405 +
            (C13350 - C13349 + C13352 - C13351 + C13354 - C13353) * C82523) *
               C82932 +
           ((C13339 * C1154 - C13256 * C1214 + C13340 * C3347 - C13257 * C3443 +
             C13341 * C3344 - C82893 * C3444) *
                C15405 +
            (C13339 * C1163 - C13256 * C1219 + C13340 * C3358 - C13257 * C3449 +
             C13341 * C3352 - C82893 * C3450) *
                C82523) *
               C82918 +
           ((C13339 * C4109 - C13256 * C4199 + C13340 * C4975 - C13257 * C5061 +
             C13341 * C16746 - C82893 * C16828) *
                C15405 +
            (C13339 * C4115 - C13256 * C4203 + C13340 * C4980 - C13257 * C5064 +
             C13341 * C16750 - C82893 * C16830) *
                C82523) *
               C82896) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C13259 +
            (C82581 * C175 - C168 * C109) * C82925 + (C182 - C183) * C13261 +
            (C184 - C185) * C82909 + (C186 - C187) * C13263 +
            (C188 - C189) * C82885) *
               C25720 +
           ((C5823 - C5824) * C13259 + (C5825 - C5826) * C82925 +
            (C4207 - C4208) * C13261 + (C4209 - C4210) * C82909 +
            (C4211 - C4212) * C13263 + (C4213 - C4214) * C82885) *
               C25721 +
           ((C5827 - C5828) * C13259 + (C5829 - C5830) * C82925 +
            (C4215 - C4216) * C13261 + (C4217 - C4218) * C82909 +
            (C4219 - C4220) * C13263 + (C4221 - C4222) * C82885) *
               C82896) *
              C82938 * C82939 * C90 +
          (((C183 - C182) * C13259 + (C185 - C184) * C82925 +
            (C187 - C186) * C13261 + (C189 - C188) * C82909 +
            (C191 - C190) * C13263 + (C193 - C192) * C82885) *
               C25720 +
           ((C4208 - C4207) * C13259 + (C4210 - C4209) * C82925 +
            (C4212 - C4211) * C13261 + (C4214 - C4213) * C82909 +
            (C8539 - C8538) * C13263 + (C8541 - C8540) * C82885) *
               C25721 +
           ((C4216 - C4215) * C13259 + (C4218 - C4217) * C82925 +
            (C4220 - C4219) * C13261 + (C4222 - C4221) * C82909 +
            (C168 * C4111 - C82581 * C4201) * C13263 +
            (C168 * C4119 - C82581 * C4205) * C82885) *
               C82896) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
             C82893 * C1746 - C1745 * C1653) *
                C15405 +
            (C82931 * C175 - C1743 * C109 + C82916 * C758 - C1744 * C705 +
             C82893 * C1750 - C1745 * C1658) *
                C82523) *
               C25720 +
           ((C82931 * C1213 - C1743 * C1155 + C82916 * C3441 - C1744 * C3348 +
             C82893 * C3442 - C1745 * C3345) *
                C15405 +
            (C82931 * C1218 - C1743 * C1165 + C82916 * C3447 - C1744 * C3360 +
             C82893 * C3448 - C1745 * C3354) *
                C82523) *
               C25721 +
           ((C82931 * C4198 - C1743 * C4108 + C82916 * C5060 - C1744 * C4976 +
             C82893 * C16827 - C1745 * C16745) *
                C15405 +
            (C82931 * C4202 - C1743 * C4113 + C82916 * C5063 - C1744 * C4982 +
             C82893 * C16829 - C1745 * C16748) *
                C82523) *
               C82896) *
              C82938 * C82939 * C90 +
          (((C1756 - C1755 + C1758 - C1757 + C1760 - C1759) * C15405 +
            (C1762 - C1761 + C1764 - C1763 + C1766 - C1765) * C82523) *
               C25720 +
           ((C1743 * C1154 - C82931 * C1214 + C1744 * C3347 - C82916 * C3443 +
             C1745 * C3344 - C82893 * C3444) *
                C15405 +
            (C1743 * C1163 - C82931 * C1219 + C1744 * C3358 - C82916 * C3449 +
             C1745 * C3352 - C82893 * C3450) *
                C82523) *
               C25721 +
           ((C1743 * C4109 - C82931 * C4199 + C1744 * C4975 - C82916 * C5061 +
             C1745 * C16746 - C82893 * C16828) *
                C15405 +
            (C1743 * C4115 - C82931 * C4203 + C1744 * C4980 - C82916 * C5064 +
             C1745 * C16750 - C82893 * C16830) *
                C82523) *
               C82896) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C15405 +
            (C82581 * C175 - C168 * C109) * C82523) *
               C30017 +
           ((C5823 - C5824) * C15405 + (C5825 - C5826) * C82523) * C30018 +
           ((C5827 - C5828) * C15405 + (C5829 - C5830) * C82523) * C30019 +
           ((C82581 * C5816 - C168 * C5690) * C15405 +
            (C82581 * C5819 - C168 * C5696) * C82523) *
               C30020 +
           ((C82581 * C30072 - C168 * C30022) * C15405 +
            (C82581 * C30074 - C168 * C30025) * C82523) *
               C30021) *
              C82938 * C82939 * C90 +
          (((C183 - C182) * C15405 + (C185 - C184) * C82523) * C30017 +
           ((C4208 - C4207) * C15405 + (C4210 - C4209) * C82523) * C30018 +
           ((C4216 - C4215) * C15405 + (C4218 - C4217) * C82523) * C30019 +
           ((C168 * C5689 - C82581 * C5817) * C15405 +
            (C168 * C5694 - C82581 * C5820) * C82523) *
               C30020 +
           ((C168 * C30023 - C82581 * C30073) * C15405 +
            (C168 * C30027 - C82581 * C30075) * C82523) *
               C30021) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C82592 * C240 - C239 * C102) * C92 +
               (C82592 * C246 - C239 * C109) * C81 + (C253 - C254) * C94 +
               (C255 - C256) * C82 + (C257 - C258) * C96 + (C259 - C260) * C83 +
               (C261 - C262) * C98 + (C263 - C264) * C84 +
               (C265 - C266) * C100 + (C267 - C268) * C85) *
                  C82581 * C82938 * C82939 * C90 +
              ((C254 - C253) * C92 + (C256 - C255) * C81 + (C258 - C257) * C94 +
               (C260 - C259) * C82 + (C262 - C261) * C96 + (C264 - C263) * C83 +
               (C266 - C265) * C98 + (C268 - C267) * C84 +
               (C239 * C107 - C82592 * C245) * C100 +
               (C239 * C119 - C82592 * C251) * C85) *
                  C82581 * C82938 * C82939 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C82592 * C240 - C239 * C102) * C1647 +
                (C82592 * C246 - C239 * C109) * C1641 + (C253 - C254) * C1649 +
                (C255 - C256) * C1642 + (C257 - C258) * C1651 +
                (C259 - C260) * C82885) *
                   C82931 +
               ((C82592 * C805 - C239 * C695) * C1647 +
                (C82592 * C810 - C239 * C705) * C1641 +
                (C1861 - C1862) * C1649 + (C1863 - C1864) * C1642 +
                (C1865 - C1866) * C1651 + (C1867 - C1868) * C82885) *
                   C82916 +
               ((C82592 * C1852 - C239 * C1653) * C1647 +
                (C82592 * C1856 - C239 * C1658) * C1641 +
                (C1869 - C1870) * C1649 + (C1871 - C1872) * C1642 +
                (C1873 - C1874) * C1651 + (C1875 - C1876) * C82885) *
                   C82893) *
                  C82938 * C82939 * C90 +
              (((C254 - C253) * C1647 + (C256 - C255) * C1641 +
                (C258 - C257) * C1649 + (C260 - C259) * C1642 +
                (C262 - C261) * C1651 + (C264 - C263) * C82885) *
                   C82931 +
               ((C1862 - C1861) * C1647 + (C1864 - C1863) * C1641 +
                (C1866 - C1865) * C1649 + (C1868 - C1867) * C1642 +
                (C239 * C692 - C82592 * C808) * C1651 +
                (C239 * C699 - C82592 * C813) * C82885) *
                   C82916 +
               ((C1870 - C1869) * C1647 + (C1872 - C1871) * C1641 +
                (C1874 - C1873) * C1649 + (C1876 - C1875) * C1642 +
                (C239 * C1656 - C82592 * C1855) * C1651 +
                (C239 * C1664 - C82592 * C1859) * C82885) *
                   C82893) *
                  C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
            C82896 * C4299 - C4298 * C4108) *
               C1647 +
           (C82932 * C246 - C4296 * C109 + C82918 * C1270 - C4297 * C1165 +
            C82896 * C4303 - C4298 * C4113) *
               C1641 +
           (C4308 - C4309 + C4310 - C4311 + C4312 - C4313) * C1649 +
           (C4314 - C4315 + C4316 - C4317 + C4318 - C4319) * C1642 +
           (C4320 - C4321 + C4322 - C4323 + C4324 - C4325) * C1651 +
           (C4326 - C4327 + C4328 - C4329 + C4330 - C4331) * C82885) *
              C82581 * C82938 * C82939 * C90 +
          ((C4309 - C4308 + C4311 - C4310 + C4313 - C4312) * C1647 +
           (C4315 - C4314 + C4317 - C4316 + C4319 - C4318) * C1641 +
           (C4321 - C4320 + C4323 - C4322 + C4325 - C4324) * C1649 +
           (C4327 - C4326 + C4329 - C4328 + C4331 - C4330) * C1642 +
           (C4296 * C105 - C82932 * C243 + C4297 * C1152 - C82918 * C1268 +
            C4298 * C4111 - C82896 * C4302) *
               C1651 +
           (C4296 * C115 - C82932 * C249 + C4297 * C1159 - C82918 * C1273 +
            C4298 * C4119 - C82896 * C4306) *
               C82885) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C13259 +
            (C82592 * C246 - C239 * C109) * C82925 + (C253 - C254) * C13261 +
            (C255 - C256) * C82909 + (C257 - C258) * C13263 +
            (C259 - C260) * C82885) *
               C13256 +
           ((C2740 - C2741) * C13259 + (C2742 - C2743) * C82925 +
            (C1861 - C1862) * C13261 + (C1863 - C1864) * C82909 +
            (C1865 - C1866) * C13263 + (C1867 - C1868) * C82885) *
               C13257 +
           ((C2744 - C2745) * C13259 + (C2746 - C2747) * C82925 +
            (C1869 - C1870) * C13261 + (C1871 - C1872) * C82909 +
            (C1873 - C1874) * C13263 + (C1875 - C1876) * C82885) *
               C82893) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C13259 + (C256 - C255) * C82925 +
            (C258 - C257) * C13261 + (C260 - C259) * C82909 +
            (C262 - C261) * C13263 + (C264 - C263) * C82885) *
               C13256 +
           ((C1862 - C1861) * C13259 + (C1864 - C1863) * C82925 +
            (C1866 - C1865) * C13261 + (C1868 - C1867) * C82909 +
            (C6678 - C6677) * C13263 + (C6680 - C6679) * C82885) *
               C13257 +
           ((C1870 - C1869) * C13259 + (C1872 - C1871) * C82925 +
            (C1874 - C1873) * C13261 + (C1876 - C1875) * C82909 +
            (C239 * C1656 - C82592 * C1855) * C13263 +
            (C239 * C1664 - C82592 * C1859) * C82885) *
               C82893) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C15405 +
            (C82592 * C246 - C239 * C109) * C82523) *
               C15400 +
           ((C2740 - C2741) * C15405 + (C2742 - C2743) * C82523) * C15401 +
           ((C2744 - C2745) * C15405 + (C2746 - C2747) * C82523) * C15402 +
           ((C82592 * C2733 - C239 * C2527) * C15405 +
            (C82592 * C2736 - C239 * C2533) * C82523) *
               C15403 +
           ((C82592 * C15508 - C239 * C15407) * C15405 +
            (C82592 * C15510 - C239 * C15410) * C82523) *
               C15404) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C15405 + (C256 - C255) * C82523) * C15400 +
           ((C1862 - C1861) * C15405 + (C1864 - C1863) * C82523) * C15401 +
           ((C1870 - C1869) * C15405 + (C1872 - C1871) * C82523) * C15402 +
           ((C239 * C2526 - C82592 * C2734) * C15405 +
            (C239 * C2531 - C82592 * C2737) * C82523) *
               C15403 +
           ((C239 * C15408 - C82592 * C15509) * C15405 +
            (C239 * C15412 - C82592 * C15511) * C82523) *
               C15404) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
             C82896 * C4299 - C4298 * C4108) *
                C15405 +
            (C82932 * C246 - C4296 * C109 + C82918 * C1270 - C4297 * C1165 +
             C82896 * C4303 - C4298 * C4113) *
                C82523) *
               C13256 +
           ((C82932 * C805 - C4296 * C695 + C82918 * C3527 - C4297 * C3348 +
             C82896 * C5140 - C4298 * C4976) *
                C15405 +
            (C82932 * C810 - C4296 * C705 + C82918 * C3533 - C4297 * C3360 +
             C82896 * C5143 - C4298 * C4982) *
                C82523) *
               C13257 +
           ((C82932 * C1852 - C4296 * C1653 + C82918 * C3530 - C4297 * C3345 +
             C82896 * C16905 - C4298 * C16745) *
                C15405 +
            (C82932 * C1856 - C4296 * C1658 + C82918 * C3536 - C4297 * C3354 +
             C82896 * C16907 - C4298 * C16748) *
                C82523) *
               C82893) *
              C82938 * C82939 * C90 +
          (((C4309 - C4308 + C4311 - C4310 + C4313 - C4312) * C15405 +
            (C4315 - C4314 + C4317 - C4316 + C4319 - C4318) * C82523) *
               C13256 +
           ((C4296 * C694 - C82932 * C806 + C4297 * C3347 - C82918 * C3528 +
             C4298 * C4975 - C82896 * C5141) *
                C15405 +
            (C4296 * C703 - C82932 * C811 + C4297 * C3358 - C82918 * C3534 +
             C4298 * C4980 - C82896 * C5144) *
                C82523) *
               C13257 +
           ((C4296 * C1654 - C82932 * C1853 + C4297 * C3344 - C82918 * C3531 +
             C4298 * C16746 - C82896 * C16906) *
                C15405 +
            (C4296 * C1660 - C82932 * C1857 + C4297 * C3352 - C82918 * C3537 +
             C4298 * C16750 - C82896 * C16908) *
                C82523) *
               C82893) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
            C82896 * C4299 - C25873 * C4108) *
               C13259 +
           (C25720 * C246 - C25871 * C109 + C25721 * C1270 - C25872 * C1165 +
            C82896 * C4303 - C25873 * C4113) *
               C82925 +
           (C25875 - C25876 + C25877 - C25878 + C25879 - C25880) * C13261 +
           (C25881 - C25882 + C25883 - C25884 + C25885 - C25886) * C82909 +
           (C25887 - C25888 + C25889 - C25890 + C25891 - C25892) * C13263 +
           (C25893 - C25894 + C25895 - C25896 + C25897 - C25898) * C82885) *
              C82581 * C82938 * C82939 * C90 +
          ((C25876 - C25875 + C25878 - C25877 + C25880 - C25879) * C13259 +
           (C25882 - C25881 + C25884 - C25883 + C25886 - C25885) * C82925 +
           (C25888 - C25887 + C25890 - C25889 + C25892 - C25891) * C13261 +
           (C25894 - C25893 + C25896 - C25895 + C25898 - C25897) * C82909 +
           (C25871 * C105 - C25720 * C243 + C25872 * C1152 - C25721 * C1268 +
            C25873 * C4111 - C82896 * C4302) *
               C13263 +
           (C25871 * C115 - C25720 * C249 + C25872 * C1159 - C25721 * C1273 +
            C25873 * C4119 - C82896 * C4306) *
               C82885) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
             C82896 * C4299 - C25873 * C4108) *
                C15405 +
            (C25720 * C246 - C25871 * C109 + C25721 * C1270 - C25872 * C1165 +
             C82896 * C4303 - C25873 * C4113) *
                C82523) *
               C82931 +
           ((C25720 * C805 - C25871 * C695 + C25721 * C3527 - C25872 * C3348 +
             C82896 * C5140 - C25873 * C4976) *
                C15405 +
            (C25720 * C810 - C25871 * C705 + C25721 * C3533 - C25872 * C3360 +
             C82896 * C5143 - C25873 * C4982) *
                C82523) *
               C82916 +
           ((C25720 * C1852 - C25871 * C1653 + C25721 * C3530 - C25872 * C3345 +
             C82896 * C16905 - C25873 * C16745) *
                C15405 +
            (C25720 * C1856 - C25871 * C1658 + C25721 * C3536 - C25872 * C3354 +
             C82896 * C16907 - C25873 * C16748) *
                C82523) *
               C82893) *
              C82938 * C82939 * C90 +
          (((C25876 - C25875 + C25878 - C25877 + C25880 - C25879) * C15405 +
            (C25882 - C25881 + C25884 - C25883 + C25886 - C25885) * C82523) *
               C82931 +
           ((C25871 * C694 - C25720 * C806 + C25872 * C3347 - C25721 * C3528 +
             C25873 * C4975 - C82896 * C5141) *
                C15405 +
            (C25871 * C703 - C25720 * C811 + C25872 * C3358 - C25721 * C3534 +
             C25873 * C4980 - C82896 * C5144) *
                C82523) *
               C82916 +
           ((C25871 * C1654 - C25720 * C1853 + C25872 * C3344 - C25721 * C3531 +
             C25873 * C16746 - C82896 * C16906) *
                C15405 +
            (C25871 * C1660 - C25720 * C1857 + C25872 * C3352 - C25721 * C3537 +
             C25873 * C16750 - C82896 * C16908) *
                C82523) *
               C82893) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C30017 * C240 - C30118 * C102 + C30018 * C1265 - C30119 * C1155 +
            C30019 * C4299 - C30120 * C4108 + C30020 * C5904 - C30121 * C5690 +
            C30021 * C30123 - C30122 * C30022) *
               C15405 +
           (C30017 * C246 - C30118 * C109 + C30018 * C1270 - C30119 * C1165 +
            C30019 * C4303 - C30120 * C4113 + C30020 * C5907 - C30121 * C5696 +
            C30021 * C30125 - C30122 * C30025) *
               C82523) *
              C82581 * C82938 * C82939 * C90 +
          ((C30118 * C103 - C30017 * C241 + C30119 * C1154 - C30018 * C1266 +
            C30120 * C4109 - C30019 * C4300 + C30121 * C5689 - C30020 * C5905 +
            C30122 * C30023 - C30021 * C30124) *
               C15405 +
           (C30118 * C111 - C30017 * C247 + C30119 * C1163 - C30018 * C1271 +
            C30120 * C4115 - C30019 * C4304 + C30121 * C5694 - C30020 * C5908 +
            C30122 * C30027 - C30021 * C30126) *
               C82523) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C81 * C108 - C92 * C102 + C82 * C110 - C94 * C103 + C83 * C112 -
                C96 * C104 + C84 * C114 - C98 * C105 + C85 * C116 -
                C100 * C106) *
                   C168 +
               (C81 * C316 - C92 * C310 + C82 * C317 - C94 * C311 + C83 * C318 -
                C96 * C312 + C84 * C319 - C98 * C313 + C85 * C320 -
                C100 * C314) *
                   C82581) *
                  C82592 * C82938 * C82939 * C90 +
              ((C92 * C103 - C81 * C110 + C94 * C104 - C82 * C112 + C96 * C105 -
                C83 * C114 + C98 * C106 - C84 * C116 + C100 * C107 -
                C85 * C118) *
                   C168 +
               (C92 * C311 - C81 * C317 + C94 * C312 - C82 * C318 + C96 * C313 -
                C83 * C319 + C98 * C314 - C84 * C320 + C100 * C315 -
                C85 * C321) *
                   C82581) *
                  C82592 * C82938 * C82939 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             (((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
                C82885 * C112 - C1651 * C104) *
                   C1743 +
               (C1641 * C316 - C1647 * C310 + C1642 * C317 - C1649 * C311 +
                C82885 * C318 - C1651 * C312) *
                   C82931 +
               (C1641 * C704 - C1647 * C695 + C1642 * C702 - C1649 * C694 +
                C82885 * C700 - C1651 * C693) *
                   C1744 +
               (C1641 * C862 - C1647 * C857 + C1642 * C863 - C1649 * C858 +
                C82885 * C864 - C1651 * C859) *
                   C82916 +
               (C1641 * C1657 - C1647 * C1653 + C1642 * C1659 - C1649 * C1654 +
                C82885 * C1661 - C1651 * C1655) *
                   C1745 +
               (C1641 * C1954 - C1647 * C1950 + C1642 * C1955 - C1649 * C1951 +
                C82885 * C1956 - C1651 * C1952) *
                   C82893) *
                  C82592 * C82938 * C82939 * C90 +
              ((C1647 * C103 - C1641 * C110 + C1649 * C104 - C1642 * C112 +
                C1651 * C105 - C82885 * C114) *
                   C1743 +
               (C1647 * C311 - C1641 * C317 + C1649 * C312 - C1642 * C318 +
                C1651 * C313 - C82885 * C319) *
                   C82931 +
               (C1647 * C694 - C1641 * C702 + C1649 * C693 - C1642 * C700 +
                C1651 * C692 - C82885 * C698) *
                   C1744 +
               (C1647 * C858 - C1641 * C863 + C1649 * C859 - C1642 * C864 +
                C1651 * C860 - C82885 * C865) *
                   C82916 +
               (C1647 * C1654 - C1641 * C1659 + C1649 * C1655 - C1642 * C1661 +
                C1651 * C1656 - C82885 * C1663) *
                   C1745 +
               (C1647 * C1951 - C1641 * C1955 + C1649 * C1952 - C1642 * C1956 +
                C1651 * C1953 - C82885 * C1957) *
                   C82893) *
                  C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
             C82885 * C112 - C1651 * C104) *
                C168 +
            (C1641 * C316 - C1647 * C310 + C1642 * C317 - C1649 * C311 +
             C82885 * C318 - C1651 * C312) *
                C82581) *
               C82932 +
           ((C1641 * C1164 - C1647 * C1155 + C1642 * C1162 - C1649 * C1154 +
             C82885 * C1160 - C1651 * C1153) *
                C168 +
            (C1641 * C1322 - C1647 * C1317 + C1642 * C1323 - C1649 * C1318 +
             C82885 * C1324 - C1651 * C1319) *
                C82581) *
               C82918 +
           ((C1641 * C4112 - C1647 * C4108 + C1642 * C4114 - C1649 * C4109 +
             C82885 * C4116 - C1651 * C4110) *
                C168 +
            (C1641 * C4409 - C1647 * C4405 + C1642 * C4410 - C1649 * C4406 +
             C82885 * C4411 - C1651 * C4407) *
                C82581) *
               C82896) *
              C82938 * C82939 * C90 +
          (((C1647 * C103 - C1641 * C110 + C1649 * C104 - C1642 * C112 +
             C1651 * C105 - C82885 * C114) *
                C168 +
            (C1647 * C311 - C1641 * C317 + C1649 * C312 - C1642 * C318 +
             C1651 * C313 - C82885 * C319) *
                C82581) *
               C82932 +
           ((C1647 * C1154 - C1641 * C1162 + C1649 * C1153 - C1642 * C1160 +
             C1651 * C1152 - C82885 * C1158) *
                C168 +
            (C1647 * C1318 - C1641 * C1323 + C1649 * C1319 - C1642 * C1324 +
             C1651 * C1320 - C82885 * C1325) *
                C82581) *
               C82918 +
           ((C1647 * C4109 - C1641 * C4114 + C1649 * C4110 - C1642 * C4116 +
             C1651 * C4111 - C82885 * C4118) *
                C168 +
            (C1647 * C4406 - C1641 * C4410 + C1649 * C4407 - C1642 * C4411 +
             C1651 * C4408 - C82885 * C4412) *
                C82581) *
               C82896) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
            C82885 * C112 - C13263 * C104) *
               C13339 +
           (C82925 * C316 - C13259 * C310 + C82909 * C317 - C13261 * C311 +
            C82885 * C318 - C13263 * C312) *
               C13256 +
           (C82925 * C704 - C13259 * C695 + C82909 * C702 - C13261 * C694 +
            C82885 * C700 - C13263 * C693) *
               C13340 +
           (C82925 * C862 - C13259 * C857 + C82909 * C863 - C13261 * C858 +
            C82885 * C864 - C13263 * C859) *
               C13257 +
           (C82925 * C1657 - C13259 * C1653 + C82909 * C1659 - C13261 * C1654 +
            C82885 * C1661 - C13263 * C1655) *
               C13341 +
           (C82925 * C1954 - C13259 * C1950 + C82909 * C1955 - C13261 * C1951 +
            C82885 * C1956 - C13263 * C1952) *
               C82893) *
              C82592 * C82938 * C82939 * C90 +
          ((C13259 * C103 - C82925 * C110 + C13261 * C104 - C82909 * C112 +
            C13263 * C105 - C82885 * C114) *
               C13339 +
           (C13259 * C311 - C82925 * C317 + C13261 * C312 - C82909 * C318 +
            C13263 * C313 - C82885 * C319) *
               C13256 +
           (C13259 * C694 - C82925 * C702 + C13261 * C693 - C82909 * C700 +
            C13263 * C692 - C82885 * C698) *
               C13340 +
           (C13259 * C858 - C82925 * C863 + C13261 * C859 - C82909 * C864 +
            C13263 * C860 - C82885 * C865) *
               C13257 +
           (C13259 * C1654 - C82925 * C1659 + C13261 * C1655 - C82909 * C1661 +
            C13263 * C1656 - C82885 * C1663) *
               C13341 +
           (C13259 * C1951 - C82925 * C1955 + C13261 * C1952 - C82909 * C1956 +
            C13263 * C1953 - C82885 * C1957) *
               C82893) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C82523 * C108 - C15405 * C102) * C15457 +
           (C82523 * C316 - C15405 * C310) * C15400 +
           (C82523 * C704 - C15405 * C695) * C15458 +
           (C82523 * C862 - C15405 * C857) * C15401 +
           (C82523 * C1657 - C15405 * C1653) * C15459 +
           (C82523 * C1954 - C15405 * C1950) * C15402 +
           (C82523 * C2532 - C15405 * C2527) * C15460 +
           (C82523 * C2824 - C15405 * C2821) * C15403 +
           (C82523 * C15409 - C15405 * C15407) * C15461 +
           (C82523 * C15556 - C15405 * C15554) * C15404) *
              C82592 * C82938 * C82939 * C90 +
          ((C15405 * C103 - C82523 * C110) * C15457 +
           (C15405 * C311 - C82523 * C317) * C15400 +
           (C15405 * C694 - C82523 * C702) * C15458 +
           (C15405 * C858 - C82523 * C863) * C15401 +
           (C15405 * C1654 - C82523 * C1659) * C15459 +
           (C15405 * C1951 - C82523 * C1955) * C15402 +
           (C15405 * C2526 - C82523 * C2530) * C15460 +
           (C15405 * C2822 - C82523 * C2825) * C15403 +
           (C15405 * C15408 - C82523 * C15411) * C15461 +
           (C15405 * C15555 - C82523 * C15557) * C15404) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C13339 +
            (C82523 * C316 - C15405 * C310) * C13256 +
            (C16004 - C16005) * C13340 + (C16006 - C16007) * C13257 +
            (C16008 - C16009) * C13341 + (C16010 - C16011) * C82893) *
               C82932 +
           ((C82523 * C1164 - C15405 * C1155) * C13339 +
            (C82523 * C1322 - C15405 * C1317) * C13256 +
            (C82523 * C3359 - C15405 * C3348) * C13340 +
            (C82523 * C3619 - C15405 * C3613) * C13257 +
            (C82523 * C3353 - C15405 * C3345) * C13341 +
            (C82523 * C3622 - C15405 * C3616) * C82893) *
               C82918 +
           ((C82523 * C4112 - C15405 * C4108) * C13339 +
            (C82523 * C4409 - C15405 * C4405) * C13256 +
            (C82523 * C4981 - C15405 * C4976) * C13340 +
            (C82523 * C5223 - C15405 * C5220) * C13257 +
            (C82523 * C16747 - C15405 * C16745) * C13341 +
            (C82523 * C16985 - C15405 * C16983) * C82893) *
               C82896) *
              C82938 * C82939 * C90 +
          (((C15405 * C103 - C82523 * C110) * C13339 +
            (C15405 * C311 - C82523 * C317) * C13256 +
            (C15405 * C694 - C82523 * C702) * C13340 +
            (C15405 * C858 - C82523 * C863) * C13257 +
            (C15405 * C1654 - C82523 * C1659) * C13341 +
            (C15405 * C1951 - C82523 * C1955) * C82893) *
               C82932 +
           ((C15405 * C1154 - C82523 * C1162) * C13339 +
            (C15405 * C1318 - C82523 * C1323) * C13256 +
            (C15405 * C3347 - C82523 * C3357) * C13340 +
            (C15405 * C3614 - C82523 * C3620) * C13257 +
            (C15405 * C3344 - C82523 * C3351) * C13341 +
            (C15405 * C3617 - C82523 * C3623) * C82893) *
               C82918 +
           ((C15405 * C4109 - C82523 * C4114) * C13339 +
            (C15405 * C4406 - C82523 * C4410) * C13256 +
            (C15405 * C4975 - C82523 * C4979) * C13340 +
            (C15405 * C5221 - C82523 * C5224) * C13257 +
            (C15405 * C16746 - C82523 * C16749) * C13341 +
            (C15405 * C16984 - C82523 * C16986) * C82893) *
               C82896) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C168 +
            (C82925 * C316 - C13259 * C310 + C82909 * C317 - C13261 * C311 +
             C82885 * C318 - C13263 * C312) *
                C82581) *
               C25720 +
           ((C82925 * C1164 - C13259 * C1155 + C82909 * C1162 - C13261 * C1154 +
             C82885 * C1160 - C13263 * C1153) *
                C168 +
            (C82925 * C1322 - C13259 * C1317 + C82909 * C1323 - C13261 * C1318 +
             C82885 * C1324 - C13263 * C1319) *
                C82581) *
               C25721 +
           ((C82925 * C4112 - C13259 * C4108 + C82909 * C4114 - C13261 * C4109 +
             C82885 * C4116 - C13263 * C4110) *
                C168 +
            (C82925 * C4409 - C13259 * C4405 + C82909 * C4410 - C13261 * C4406 +
             C82885 * C4411 - C13263 * C4407) *
                C82581) *
               C82896) *
              C82938 * C82939 * C90 +
          (((C13259 * C103 - C82925 * C110 + C13261 * C104 - C82909 * C112 +
             C13263 * C105 - C82885 * C114) *
                C168 +
            (C13259 * C311 - C82925 * C317 + C13261 * C312 - C82909 * C318 +
             C13263 * C313 - C82885 * C319) *
                C82581) *
               C25720 +
           ((C13259 * C1154 - C82925 * C1162 + C13261 * C1153 - C82909 * C1160 +
             C13263 * C1152 - C82885 * C1158) *
                C168 +
            (C13259 * C1318 - C82925 * C1323 + C13261 * C1319 - C82909 * C1324 +
             C13263 * C1320 - C82885 * C1325) *
                C82581) *
               C25721 +
           ((C13259 * C4109 - C82925 * C4114 + C13261 * C4110 - C82909 * C4116 +
             C13263 * C4111 - C82885 * C4118) *
                C168 +
            (C13259 * C4406 - C82925 * C4410 + C13261 * C4407 - C82909 * C4411 +
             C13263 * C4408 - C82885 * C4412) *
                C82581) *
               C82896) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C1743 +
            (C82523 * C316 - C15405 * C310) * C82931 +
            (C16004 - C16005) * C1744 + (C16006 - C16007) * C82916 +
            (C16008 - C16009) * C1745 + (C16010 - C16011) * C82893) *
               C25720 +
           ((C18542 - C18543) * C1743 + (C18544 - C18545) * C82931 +
            (C17734 - C17735) * C1744 + (C17736 - C17737) * C82916 +
            (C17738 - C17739) * C1745 + (C17740 - C17741) * C82893) *
               C25721 +
           ((C18546 - C18547) * C1743 + (C18548 - C18549) * C82931 +
            (C17742 - C17743) * C1744 + (C17744 - C17745) * C82916 +
            (C17746 - C17747) * C1745 + (C17748 - C17749) * C82893) *
               C82896) *
              C82938 * C82939 * C90 +
          (((C15405 * C103 - C82523 * C110) * C1743 +
            (C15405 * C311 - C82523 * C317) * C82931 +
            (C15405 * C694 - C82523 * C702) * C1744 +
            (C15405 * C858 - C82523 * C863) * C82916 +
            (C15405 * C1654 - C82523 * C1659) * C1745 +
            (C15405 * C1951 - C82523 * C1955) * C82893) *
               C25720 +
           ((C15405 * C1154 - C82523 * C1162) * C1743 +
            (C15405 * C1318 - C82523 * C1323) * C82931 +
            (C15405 * C3347 - C82523 * C3357) * C1744 +
            (C15405 * C3614 - C82523 * C3620) * C82916 +
            (C15405 * C3344 - C82523 * C3351) * C1745 +
            (C15405 * C3617 - C82523 * C3623) * C82893) *
               C25721 +
           ((C15405 * C4109 - C82523 * C4114) * C1743 +
            (C15405 * C4406 - C82523 * C4410) * C82931 +
            (C15405 * C4975 - C82523 * C4979) * C1744 +
            (C15405 * C5221 - C82523 * C5224) * C82916 +
            (C15405 * C16746 - C82523 * C16749) * C1745 +
            (C15405 * C16984 - C82523 * C16986) * C82893) *
               C82896) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C168 +
            (C82523 * C316 - C15405 * C310) * C82581) *
               C30017 +
           ((C18542 - C18543) * C168 + (C18544 - C18545) * C82581) * C30018 +
           ((C18546 - C18547) * C168 + (C18548 - C18549) * C82581) * C30019 +
           ((C82523 * C5695 - C15405 * C5690) * C168 +
            (C82523 * C5987 - C15405 * C5984) * C82581) *
               C30020 +
           ((C82523 * C30024 - C15405 * C30022) * C168 +
            (C82523 * C30171 - C15405 * C30169) * C82581) *
               C30021) *
              C82938 * C82939 * C90 +
          (((C15405 * C103 - C82523 * C110) * C168 +
            (C15405 * C311 - C82523 * C317) * C82581) *
               C30017 +
           ((C15405 * C1154 - C82523 * C1162) * C168 +
            (C15405 * C1318 - C82523 * C1323) * C82581) *
               C30018 +
           ((C15405 * C4109 - C82523 * C4114) * C168 +
            (C15405 * C4406 - C82523 * C4410) * C82581) *
               C30019 +
           ((C15405 * C5689 - C82523 * C5693) * C168 +
            (C15405 * C5985 - C82523 * C5988) * C82581) *
               C30020 +
           ((C15405 * C30023 - C82523 * C30026) * C168 +
            (C15405 * C30170 - C82523 * C30172) * C82581) *
               C30021) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C81 +
               C396 * C82 + C397 * C83 + C398 * C84 + C399 * C85) *
                  C82592 * C82938 * C82939 * C90 -
              ((C168 * C174 - C364 * C107 - C168 * C315 + C82581 * C370) * C85 +
               C399 * C84 + C398 * C83 + C397 * C82 + C396 * C81) *
                  C82592 * C82938 * C82939 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             (((C1743 * C169 - C2032 * C102 - C1743 * C310 + C82931 * C365 +
                C1744 * C753 - C2033 * C695 - C1744 * C857 + C82916 * C913 +
                C1745 * C1746 - C2034 * C1653 - C1745 * C1950 +
                C82893 * C2035) *
                   C1641 +
               (C2076 + C2077 + C2078) * C1642 +
               (C2079 + C2080 + C2081) * C82885) *
                  C82592 * C82938 * C82939 * C90 -
              ((C1745 * C1749 - C2034 * C1656 - C1745 * C1953 + C82893 * C2038 +
                C1744 * C756 - C2033 * C692 - C1744 * C860 + C82916 * C910 +
                C1743 * C172 - C2032 * C105 - C1743 * C313 + C82931 * C368) *
                   C82885 +
               (C2081 + C2080 + C2079) * C1642 +
               (C2078 + C2077 + C2076) * C1641) *
                  C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C1641 +
            C396 * C1642 + C397 * C82885) *
               C82932 +
           ((C168 * C1213 - C364 * C1155 - C168 * C1317 + C82581 * C1373) *
                C1641 +
            C4516 * C1642 + C4517 * C82885) *
               C82918 +
           ((C168 * C4198 - C364 * C4108 - C168 * C4405 + C82581 * C4487) *
                C1641 +
            C4518 * C1642 + C4519 * C82885) *
               C82896) *
              C82938 * C82939 * C90 -
          (((C168 * C4201 - C364 * C4111 - C168 * C4408 + C82581 * C4490) *
                C82885 +
            C4519 * C1642 + C4518 * C1641) *
               C82896 +
           ((C168 * C1216 - C364 * C1152 - C168 * C1320 + C82581 * C1370) *
                C82885 +
            C4517 * C1642 + C4516 * C1641) *
               C82918 +
           (C398 * C82885 + C397 * C1642 + C396 * C1641) * C82932) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13339 * C169 - C13588 * C102 - C13339 * C310 + C13256 * C365 +
            C13340 * C753 - C13589 * C695 - C13340 * C857 + C13257 * C913 +
            C13341 * C1746 - C13590 * C1653 - C13341 * C1950 + C82893 * C2035) *
               C82925 +
           (C13628 + C13629 + C13630) * C82909 +
           (C13631 + C13632 + C13633) * C82885) *
              C82592 * C82938 * C82939 * C90 -
          ((C13341 * C1749 - C13590 * C1656 - C13341 * C1953 + C82893 * C2038 +
            C13340 * C756 - C13589 * C692 - C13340 * C860 + C13257 * C910 +
            C13339 * C172 - C13588 * C105 - C13339 * C313 + C13256 * C368) *
               C82885 +
           (C13633 + C13632 + C13631) * C82909 +
           (C13630 + C13629 + C13628) * C82925) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C15457 * C169 - C15600 * C102 - C15457 * C310 + C15400 * C365 +
           C15458 * C753 - C15601 * C695 - C15458 * C857 + C15401 * C913 +
           C15459 * C1746 - C15602 * C1653 - C15459 * C1950 + C15402 * C2035 +
           C15460 * C2653 - C15603 * C2527 - C15460 * C2821 + C15403 * C2927 +
           C15461 * C15462 - C15604 * C15407 - C15461 * C15554 +
           C15404 * C15605) *
              C82523 * C82592 * C82938 * C82939 * C90 -
          (C15461 * C15463 - C15604 * C15408 - C15461 * C15555 +
           C15404 * C15606 + C15460 * C2654 - C15603 * C2526 - C15460 * C2822 +
           C15403 * C2926 + C15459 * C1747 - C15602 * C1654 - C15459 * C1951 +
           C15402 * C2036 + C15458 * C754 - C15601 * C694 - C15458 * C858 +
           C15401 * C912 + C15457 * C170 - C15600 * C103 - C15457 * C311 +
           C15400 * C366) *
              C82523 * C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13339 * C169 - C13588 * C102 - C13339 * C310 + C13256 * C365 +
            C13340 * C753 - C13589 * C695 - C13340 * C857 + C13257 * C913 +
            C13341 * C1746 - C13590 * C1653 - C13341 * C1950 + C82893 * C2035) *
               C82523 * C82932 +
           (C13339 * C1213 - C13588 * C1155 - C13339 * C1317 + C13256 * C1373 +
            C13340 * C3441 - C13589 * C3348 - C13340 * C3613 + C13257 * C3704 +
            C13341 * C3442 - C13590 * C3345 - C13341 * C3616 + C82893 * C3703) *
               C82523 * C82918 +
           (C13339 * C4198 - C13588 * C4108 - C13339 * C4405 + C13256 * C4487 +
            C13340 * C5060 - C13589 * C4976 - C13340 * C5220 + C13257 * C5302 +
            C13341 * C16827 - C13590 * C16745 - C13341 * C16983 +
            C82893 * C17061) *
               C82523 * C82896) *
              C82938 * C82939 * C90 -
          ((C13341 * C16828 - C13590 * C16746 - C13341 * C16984 +
            C82893 * C17062 + C13340 * C5061 - C13589 * C4975 - C13340 * C5221 +
            C13257 * C5301 + C13339 * C4199 - C13588 * C4109 - C13339 * C4406 +
            C13256 * C4488) *
               C82523 * C82896 +
           (C13341 * C3444 - C13590 * C3344 - C13341 * C3617 + C82893 * C3701 +
            C13340 * C3443 - C13589 * C3347 - C13340 * C3614 + C13257 * C3702 +
            C13339 * C1214 - C13588 * C1154 - C13339 * C1318 + C13256 * C1372) *
               C82523 * C82918 +
           (C13630 + C13629 + C13628) * C82523 * C82932) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C82925 +
            C396 * C82909 + C397 * C82885) *
               C25720 +
           (C6108 * C82925 + C4516 * C82909 + C4517 * C82885) * C25721 +
           (C6109 * C82925 + C4518 * C82909 + C4519 * C82885) * C82896) *
              C82938 * C82939 * C90 -
          (((C168 * C4201 - C364 * C4111 - C168 * C4408 + C82581 * C4490) *
                C82885 +
            C4519 * C82909 + C4518 * C82925) *
               C82896 +
           (C8772 * C82885 + C4517 * C82909 + C4516 * C82925) * C25721 +
           (C398 * C82885 + C397 * C82909 + C396 * C82925) * C25720) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1743 * C169 - C2032 * C102 - C1743 * C310 + C82931 * C365 +
            C1744 * C753 - C2033 * C695 - C1744 * C857 + C82916 * C913 +
            C1745 * C1746 - C2034 * C1653 - C1745 * C1950 + C82893 * C2035) *
               C82523 * C25720 +
           (C1743 * C1213 - C2032 * C1155 - C1743 * C1317 + C82931 * C1373 +
            C1744 * C3441 - C2033 * C3348 - C1744 * C3613 + C82916 * C3704 +
            C1745 * C3442 - C2034 * C3345 - C1745 * C3616 + C82893 * C3703) *
               C82523 * C25721 +
           (C1743 * C4198 - C2032 * C4108 - C1743 * C4405 + C82931 * C4487 +
            C1744 * C5060 - C2033 * C4976 - C1744 * C5220 + C82916 * C5302 +
            C1745 * C16827 - C2034 * C16745 - C1745 * C16983 +
            C82893 * C17061) *
               C82523 * C82896) *
              C82938 * C82939 * C90 -
          ((C1745 * C16828 - C2034 * C16746 - C1745 * C16984 + C82893 * C17062 +
            C1744 * C5061 - C2033 * C4975 - C1744 * C5221 + C82916 * C5301 +
            C1743 * C4199 - C2032 * C4109 - C1743 * C4406 + C82931 * C4488) *
               C82523 * C82896 +
           (C1745 * C3444 - C2034 * C3344 - C1745 * C3617 + C82893 * C3701 +
            C1744 * C3443 - C2033 * C3347 - C1744 * C3614 + C82916 * C3702 +
            C1743 * C1214 - C2032 * C1154 - C1743 * C1318 + C82931 * C1372) *
               C82523 * C25721 +
           (C2078 + C2077 + C2076) * C82523 * C25720) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C82523 *
               C30017 +
           C6108 * C82523 * C30018 + C6109 * C82523 * C30019 +
           (C168 * C5816 - C364 * C5690 - C168 * C5984 + C82581 * C6090) *
               C82523 * C30020 +
           (C168 * C30072 - C364 * C30022 - C168 * C30169 + C82581 * C30215) *
               C82523 * C30021) *
              C82938 * C82939 * C90 -
          ((C168 * C30073 - C364 * C30023 - C168 * C30170 + C82581 * C30216) *
               C82523 * C30021 +
           (C168 * C5817 - C364 * C5689 - C168 * C5985 + C82581 * C6089) *
               C82523 * C30020 +
           C4518 * C82523 * C30019 + C4516 * C82523 * C30018 +
           C396 * C82523 * C30017) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C82592 * C240 - C239 * C102) * C168 +
                (C82592 * C441 - C239 * C310) * C82581) *
                   C81 +
               ((C253 - C254) * C168 + (C448 - C449) * C82581) * C82 +
               ((C257 - C258) * C168 + (C450 - C451) * C82581) * C83 +
               ((C261 - C262) * C168 + (C452 - C453) * C82581) * C84 +
               ((C265 - C266) * C168 + (C454 - C455) * C82581) * C85) *
                  C82938 * C82939 * C90 +
              (((C254 - C253) * C168 + (C449 - C448) * C82581) * C81 +
               ((C258 - C257) * C168 + (C451 - C450) * C82581) * C82 +
               ((C262 - C261) * C168 + (C453 - C452) * C82581) * C83 +
               ((C266 - C265) * C168 + (C455 - C454) * C82581) * C84 +
               ((C239 * C107 - C82592 * C245) * C168 +
                (C239 * C315 - C82592 * C446) * C82581) *
                   C85) *
                  C82938 * C82939 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C82592 * C240 - C239 * C102) * C1743 +
                (C82592 * C441 - C239 * C310) * C82931 +
                (C82592 * C805 - C239 * C695) * C1744 +
                (C82592 * C956 - C239 * C857) * C82916 +
                (C82592 * C1852 - C239 * C1653) * C1745 +
                (C82592 * C2155 - C239 * C1950) * C82893) *
                   C1641 +
               ((C253 - C254) * C1743 + (C448 - C449) * C82931 +
                (C1861 - C1862) * C1744 + (C2160 - C2161) * C82916 +
                (C1869 - C1870) * C1745 + (C2162 - C2163) * C82893) *
                   C1642 +
               ((C257 - C258) * C1743 + (C450 - C451) * C82931 +
                (C1865 - C1866) * C1744 + (C2164 - C2165) * C82916 +
                (C1873 - C1874) * C1745 + (C2166 - C2167) * C82893) *
                   C82885) *
                  C82938 * C82939 * C90 +
              (((C254 - C253) * C1743 + (C449 - C448) * C82931 +
                (C1862 - C1861) * C1744 + (C2161 - C2160) * C82916 +
                (C1870 - C1869) * C1745 + (C2163 - C2162) * C82893) *
                   C1641 +
               ((C258 - C257) * C1743 + (C451 - C450) * C82931 +
                (C1866 - C1865) * C1744 + (C2165 - C2164) * C82916 +
                (C1874 - C1873) * C1745 + (C2167 - C2166) * C82893) *
                   C1642 +
               ((C262 - C261) * C1743 + (C453 - C452) * C82931 +
                (C239 * C692 - C82592 * C808) * C1744 +
                (C239 * C860 - C82592 * C959) * C82916 +
                (C239 * C1656 - C82592 * C1855) * C1745 +
                (C239 * C1953 - C82592 * C2158) * C82893) *
                   C82885) *
                  C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
             C82896 * C4299 - C4298 * C4108) *
                C168 +
            (C82932 * C441 - C4296 * C310 + C82918 * C1416 - C4297 * C1317 +
             C82896 * C4593 - C4298 * C4405) *
                C82581) *
               C1641 +
           ((C4308 - C4309 + C4310 - C4311 + C4312 - C4313) * C168 +
            (C4598 - C4599 + C4600 - C4601 + C4602 - C4603) * C82581) *
               C1642 +
           ((C4320 - C4321 + C4322 - C4323 + C4324 - C4325) * C168 +
            (C4604 - C4605 + C4606 - C4607 + C4608 - C4609) * C82581) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C4309 - C4308 + C4311 - C4310 + C4313 - C4312) * C168 +
            (C4599 - C4598 + C4601 - C4600 + C4603 - C4602) * C82581) *
               C1641 +
           ((C4321 - C4320 + C4323 - C4322 + C4325 - C4324) * C168 +
            (C4605 - C4604 + C4607 - C4606 + C4609 - C4608) * C82581) *
               C1642 +
           ((C4296 * C105 - C82932 * C243 + C4297 * C1152 - C82918 * C1268 +
             C4298 * C4111 - C82896 * C4302) *
                C168 +
            (C4296 * C313 - C82932 * C444 + C4297 * C1320 - C82918 * C1419 +
             C4298 * C4408 - C82896 * C4596) *
                C82581) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C13339 +
            (C82592 * C441 - C239 * C310) * C13256 + (C2740 - C2741) * C13340 +
            (C3006 - C3007) * C13257 + (C2744 - C2745) * C13341 +
            (C3008 - C3009) * C82893) *
               C82925 +
           ((C253 - C254) * C13339 + (C448 - C449) * C13256 +
            (C1861 - C1862) * C13340 + (C2160 - C2161) * C13257 +
            (C1869 - C1870) * C13341 + (C2162 - C2163) * C82893) *
               C82909 +
           ((C257 - C258) * C13339 + (C450 - C451) * C13256 +
            (C1865 - C1866) * C13340 + (C2164 - C2165) * C13257 +
            (C1873 - C1874) * C13341 + (C2166 - C2167) * C82893) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C13339 + (C449 - C448) * C13256 +
            (C1862 - C1861) * C13340 + (C2161 - C2160) * C13257 +
            (C1870 - C1869) * C13341 + (C2163 - C2162) * C82893) *
               C82925 +
           ((C258 - C257) * C13339 + (C451 - C450) * C13256 +
            (C1866 - C1865) * C13340 + (C2165 - C2164) * C13257 +
            (C1874 - C1873) * C13341 + (C2167 - C2166) * C82893) *
               C82909 +
           ((C262 - C261) * C13339 + (C453 - C452) * C13256 +
            (C6678 - C6677) * C13340 + (C6924 - C6923) * C13257 +
            (C239 * C1656 - C82592 * C1855) * C13341 +
            (C239 * C1953 - C82592 * C2158) * C82893) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C82592 * C240 - C239 * C102) * C15457 +
           (C82592 * C441 - C239 * C310) * C15400 + (C2740 - C2741) * C15458 +
           (C3006 - C3007) * C15401 + (C2744 - C2745) * C15459 +
           (C3008 - C3009) * C15402 + (C82592 * C2733 - C239 * C2527) * C15460 +
           (C82592 * C3002 - C239 * C2821) * C15403 +
           (C82592 * C15508 - C239 * C15407) * C15461 +
           (C82592 * C15649 - C239 * C15554) * C15404) *
              C82523 * C82938 * C82939 * C90 +
          ((C254 - C253) * C15457 + (C449 - C448) * C15400 +
           (C1862 - C1861) * C15458 + (C2161 - C2160) * C15401 +
           (C1870 - C1869) * C15459 + (C2163 - C2162) * C15402 +
           (C239 * C2526 - C82592 * C2734) * C15460 +
           (C239 * C2822 - C82592 * C3003) * C15403 +
           (C239 * C15408 - C82592 * C15509) * C15461 +
           (C239 * C15555 - C82592 * C15650) * C15404) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
            C82896 * C4299 - C4298 * C4108) *
               C13339 +
           (C82932 * C441 - C4296 * C310 + C82918 * C1416 - C4297 * C1317 +
            C82896 * C4593 - C4298 * C4405) *
               C13256 +
           (C82932 * C805 - C4296 * C695 + C82918 * C3527 - C4297 * C3348 +
            C82896 * C5140 - C4298 * C4976) *
               C13340 +
           (C82932 * C956 - C4296 * C857 + C82918 * C3779 - C4297 * C3613 +
            C82896 * C5377 - C4298 * C5220) *
               C13257 +
           (C82932 * C1852 - C4296 * C1653 + C82918 * C3530 - C4297 * C3345 +
            C82896 * C16905 - C4298 * C16745) *
               C13341 +
           (C82932 * C2155 - C4296 * C1950 + C82918 * C3780 - C4297 * C3616 +
            C82896 * C17137 - C4298 * C16983) *
               C82893) *
              C82523 * C82938 * C82939 * C90 +
          ((C4309 - C4308 + C4311 - C4310 + C4313 - C4312) * C13339 +
           (C4599 - C4598 + C4601 - C4600 + C4603 - C4602) * C13256 +
           (C4296 * C694 - C82932 * C806 + C4297 * C3347 - C82918 * C3528 +
            C4298 * C4975 - C82896 * C5141) *
               C13340 +
           (C4296 * C858 - C82932 * C957 + C4297 * C3614 - C82918 * C3781 +
            C4298 * C5221 - C82896 * C5378) *
               C13257 +
           (C4296 * C1654 - C82932 * C1853 + C4297 * C3344 - C82918 * C3531 +
            C4298 * C16746 - C82896 * C16906) *
               C13341 +
           (C4296 * C1951 - C82932 * C2156 + C4297 * C3617 - C82918 * C3782 +
            C4298 * C16984 - C82896 * C17138) *
               C82893) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
             C82896 * C4299 - C25873 * C4108) *
                C168 +
            (C25720 * C441 - C25871 * C310 + C25721 * C1416 - C25872 * C1317 +
             C82896 * C4593 - C25873 * C4405) *
                C82581) *
               C82925 +
           ((C25875 - C25876 + C25877 - C25878 + C25879 - C25880) * C168 +
            (C26121 - C26122 + C26123 - C26124 + C26125 - C26126) * C82581) *
               C82909 +
           ((C25887 - C25888 + C25889 - C25890 + C25891 - C25892) * C168 +
            (C26127 - C26128 + C26129 - C26130 + C26131 - C26132) * C82581) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C25876 - C25875 + C25878 - C25877 + C25880 - C25879) * C168 +
            (C26122 - C26121 + C26124 - C26123 + C26126 - C26125) * C82581) *
               C82925 +
           ((C25888 - C25887 + C25890 - C25889 + C25892 - C25891) * C168 +
            (C26128 - C26127 + C26130 - C26129 + C26132 - C26131) * C82581) *
               C82909 +
           ((C25871 * C105 - C25720 * C243 + C25872 * C1152 - C25721 * C1268 +
             C25873 * C4111 - C82896 * C4302) *
                C168 +
            (C25871 * C313 - C25720 * C444 + C25872 * C1320 - C25721 * C1419 +
             C25873 * C4408 - C82896 * C4596) *
                C82581) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
            C82896 * C4299 - C25873 * C4108) *
               C1743 +
           (C25720 * C441 - C25871 * C310 + C25721 * C1416 - C25872 * C1317 +
            C82896 * C4593 - C25873 * C4405) *
               C82931 +
           (C25720 * C805 - C25871 * C695 + C25721 * C3527 - C25872 * C3348 +
            C82896 * C5140 - C25873 * C4976) *
               C1744 +
           (C25720 * C956 - C25871 * C857 + C25721 * C3779 - C25872 * C3613 +
            C82896 * C5377 - C25873 * C5220) *
               C82916 +
           (C25720 * C1852 - C25871 * C1653 + C25721 * C3530 - C25872 * C3345 +
            C82896 * C16905 - C25873 * C16745) *
               C1745 +
           (C25720 * C2155 - C25871 * C1950 + C25721 * C3780 - C25872 * C3616 +
            C82896 * C17137 - C25873 * C16983) *
               C82893) *
              C82523 * C82938 * C82939 * C90 +
          ((C25876 - C25875 + C25878 - C25877 + C25880 - C25879) * C1743 +
           (C26122 - C26121 + C26124 - C26123 + C26126 - C26125) * C82931 +
           (C25871 * C694 - C25720 * C806 + C25872 * C3347 - C25721 * C3528 +
            C25873 * C4975 - C82896 * C5141) *
               C1744 +
           (C25871 * C858 - C25720 * C957 + C25872 * C3614 - C25721 * C3781 +
            C25873 * C5221 - C82896 * C5378) *
               C82916 +
           (C25871 * C1654 - C25720 * C1853 + C25872 * C3344 - C25721 * C3531 +
            C25873 * C16746 - C82896 * C16906) *
               C1745 +
           (C25871 * C1951 - C25720 * C2156 + C25872 * C3617 - C25721 * C3782 +
            C25873 * C16984 - C82896 * C17138) *
               C82893) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C30017 * C240 - C30118 * C102 + C30018 * C1265 - C30119 * C1155 +
            C30019 * C4299 - C30120 * C4108 + C30020 * C5904 - C30121 * C5690 +
            C30021 * C30123 - C30122 * C30022) *
               C168 +
           (C30017 * C441 - C30118 * C310 + C30018 * C1416 - C30119 * C1317 +
            C30019 * C4593 - C30120 * C4405 + C30020 * C6185 - C30121 * C5984 +
            C30021 * C30259 - C30122 * C30169) *
               C82581) *
              C82523 * C82938 * C82939 * C90 +
          ((C30118 * C103 - C30017 * C241 + C30119 * C1154 - C30018 * C1266 +
            C30120 * C4109 - C30019 * C4300 + C30121 * C5689 - C30020 * C5905 +
            C30122 * C30023 - C30021 * C30124) *
               C168 +
           (C30118 * C311 - C30017 * C442 + C30119 * C1318 - C30018 * C1417 +
            C30120 * C4406 - C30019 * C4594 + C30121 * C5985 - C30020 * C6186 +
            C30122 * C30170 - C30021 * C30260) *
               C82581) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezx[36] += (0.5 * std::pow(Pi, 2.5) *
                       (((C81 * C108 - C92 * C102 + C82 * C110 - C94 * C103 +
                          C83 * C112 - C96 * C104 + C84 * C114 - C98 * C105 +
                          C85 * C116 - C100 * C106) *
                             C239 +
                         (C81 * C503 - C92 * C497 + C82 * C504 - C94 * C498 +
                          C83 * C505 - C96 * C499 + C84 * C506 - C98 * C500 +
                          C85 * C507 - C100 * C501) *
                             C82592) *
                            C82581 * C82938 * C82939 * C90 +
                        ((C92 * C103 - C81 * C110 + C94 * C104 - C82 * C112 +
                          C96 * C105 - C83 * C114 + C98 * C106 - C84 * C116 +
                          C100 * C107 - C85 * C118) *
                             C239 +
                         (C92 * C498 - C81 * C504 + C94 * C499 - C82 * C505 +
                          C96 * C500 - C83 * C506 + C98 * C501 - C84 * C507 +
                          C100 * C502 - C85 * C508) *
                             C82592) *
                            C82581 * C82938 * C82939 * C91) +
                   0.5 * std::pow(Pi, 2.5) *
                       ((((C1641 * C108 - C1647 * C102 + C1642 * C110 -
                           C1649 * C103 + C82885 * C112 - C1651 * C104) *
                              C239 +
                          (C1641 * C503 - C1647 * C497 + C1642 * C504 -
                           C1649 * C498 + C82885 * C505 - C1651 * C499) *
                              C82592) *
                             C82931 +
                         ((C1641 * C704 - C1647 * C695 + C1642 * C702 -
                           C1649 * C694 + C82885 * C700 - C1651 * C693) *
                              C239 +
                          (C1641 * C1008 - C1647 * C1003 + C1642 * C1009 -
                           C1649 * C1004 + C82885 * C1010 - C1651 * C1005) *
                              C82592) *
                             C82916 +
                         ((C1641 * C1657 - C1647 * C1653 + C1642 * C1659 -
                           C1649 * C1654 + C82885 * C1661 - C1651 * C1655) *
                              C239 +
                          (C1641 * C2245 - C1647 * C2241 + C1642 * C2246 -
                           C1649 * C2242 + C82885 * C2247 - C1651 * C2243) *
                              C82592) *
                             C82893) *
                            C82938 * C82939 * C90 +
                        (((C1647 * C103 - C1641 * C110 + C1649 * C104 -
                           C1642 * C112 + C1651 * C105 - C82885 * C114) *
                              C239 +
                          (C1647 * C498 - C1641 * C504 + C1649 * C499 -
                           C1642 * C505 + C1651 * C500 - C82885 * C506) *
                              C82592) *
                             C82931 +
                         ((C1647 * C694 - C1641 * C702 + C1649 * C693 -
                           C1642 * C700 + C1651 * C692 - C82885 * C698) *
                              C239 +
                          (C1647 * C1004 - C1641 * C1009 + C1649 * C1005 -
                           C1642 * C1010 + C1651 * C1006 - C82885 * C1011) *
                              C82592) *
                             C82916 +
                         ((C1647 * C1654 - C1641 * C1659 + C1649 * C1655 -
                           C1642 * C1661 + C1651 * C1656 - C82885 * C1663) *
                              C239 +
                          (C1647 * C2242 - C1641 * C2246 + C1649 * C2243 -
                           C1642 * C2247 + C1651 * C2244 - C82885 * C2248) *
                              C82592) *
                             C82893) *
                            C82938 * C82939 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C1641 * C108 - C1647 * C102 + C1642 * C110 -
                      C1649 * C103 + C82885 * C112 - C1651 * C104) *
                         C4296 +
                     (C1641 * C503 - C1647 * C497 + C1642 * C504 -
                      C1649 * C498 + C82885 * C505 - C1651 * C499) *
                         C82932 +
                     (C1641 * C1164 - C1647 * C1155 + C1642 * C1162 -
                      C1649 * C1154 + C82885 * C1160 - C1651 * C1153) *
                         C4297 +
                     (C1641 * C1468 - C1647 * C1463 + C1642 * C1469 -
                      C1649 * C1464 + C82885 * C1470 - C1651 * C1465) *
                         C82918 +
                     (C1641 * C4112 - C1647 * C4108 + C1642 * C4114 -
                      C1649 * C4109 + C82885 * C4116 - C1651 * C4110) *
                         C4298 +
                     (C1641 * C4687 - C1647 * C4683 + C1642 * C4688 -
                      C1649 * C4684 + C82885 * C4689 - C1651 * C4685) *
                         C82896) *
                        C82581 * C82938 * C82939 * C90 +
                    ((C1647 * C103 - C1641 * C110 + C1649 * C104 -
                      C1642 * C112 + C1651 * C105 - C82885 * C114) *
                         C4296 +
                     (C1647 * C498 - C1641 * C504 + C1649 * C499 -
                      C1642 * C505 + C1651 * C500 - C82885 * C506) *
                         C82932 +
                     (C1647 * C1154 - C1641 * C1162 + C1649 * C1153 -
                      C1642 * C1160 + C1651 * C1152 - C82885 * C1158) *
                         C4297 +
                     (C1647 * C1464 - C1641 * C1469 + C1649 * C1465 -
                      C1642 * C1470 + C1651 * C1466 - C82885 * C1471) *
                         C82918 +
                     (C1647 * C4109 - C1641 * C4114 + C1649 * C4110 -
                      C1642 * C4116 + C1651 * C4111 - C82885 * C4118) *
                         C4298 +
                     (C1647 * C4684 - C1641 * C4688 + C1649 * C4685 -
                      C1642 * C4689 + C1651 * C4686 - C82885 * C4690) *
                         C82896) *
                        C82581 * C82938 * C82939 * C91)) /
                      (p * q * std::sqrt(p + q)) +
                  (0.5 * std::pow(Pi, 2.5) *
                   ((((C82925 * C108 - C13259 * C102 + C82909 * C110 -
                       C13261 * C103 + C82885 * C112 - C13263 * C104) *
                          C239 +
                      (C82925 * C503 - C13259 * C497 + C82909 * C504 -
                       C13261 * C498 + C82885 * C505 - C13263 * C499) *
                          C82592) *
                         C13256 +
                     ((C82925 * C704 - C13259 * C695 + C82909 * C702 -
                       C13261 * C694 + C82885 * C700 - C13263 * C693) *
                          C239 +
                      (C82925 * C1008 - C13259 * C1003 + C82909 * C1009 -
                       C13261 * C1004 + C82885 * C1010 - C13263 * C1005) *
                          C82592) *
                         C13257 +
                     ((C82925 * C1657 - C13259 * C1653 + C82909 * C1659 -
                       C13261 * C1654 + C82885 * C1661 - C13263 * C1655) *
                          C239 +
                      (C82925 * C2245 - C13259 * C2241 + C82909 * C2246 -
                       C13261 * C2242 + C82885 * C2247 - C13263 * C2243) *
                          C82592) *
                         C82893) *
                        C82938 * C82939 * C90 +
                    (((C13259 * C103 - C82925 * C110 + C13261 * C104 -
                       C82909 * C112 + C13263 * C105 - C82885 * C114) *
                          C239 +
                      (C13259 * C498 - C82925 * C504 + C13261 * C499 -
                       C82909 * C505 + C13263 * C500 - C82885 * C506) *
                          C82592) *
                         C13256 +
                     ((C13259 * C694 - C82925 * C702 + C13261 * C693 -
                       C82909 * C700 + C13263 * C692 - C82885 * C698) *
                          C239 +
                      (C13259 * C1004 - C82925 * C1009 + C13261 * C1005 -
                       C82909 * C1010 + C13263 * C1006 - C82885 * C1011) *
                          C82592) *
                         C13257 +
                     ((C13259 * C1654 - C82925 * C1659 + C13261 * C1655 -
                       C82909 * C1661 + C13263 * C1656 - C82885 * C1663) *
                          C239 +
                      (C13259 * C2242 - C82925 * C2246 + C13261 * C2243 -
                       C82909 * C2247 + C13263 * C2244 - C82885 * C2248) *
                          C82592) *
                         C82893) *
                        C82938 * C82939 * C91)) /
                      (p * q * std::sqrt(p + q)) +
                  (0.5 * std::pow(Pi, 2.5) *
                   ((((C82523 * C108 - C15405 * C102) * C239 +
                      (C82523 * C503 - C15405 * C497) * C82592) *
                         C15400 +
                     ((C82523 * C704 - C15405 * C695) * C239 +
                      (C82523 * C1008 - C15405 * C1003) * C82592) *
                         C15401 +
                     ((C82523 * C1657 - C15405 * C1653) * C239 +
                      (C82523 * C2245 - C15405 * C2241) * C82592) *
                         C15402 +
                     ((C82523 * C2532 - C15405 * C2527) * C239 +
                      (C82523 * C3086 - C15405 * C3083) * C82592) *
                         C15403 +
                     ((C82523 * C15409 - C15405 * C15407) * C239 +
                      (C82523 * C15695 - C15405 * C15693) * C82592) *
                         C15404) *
                        C82938 * C82939 * C90 +
                    (((C15405 * C103 - C82523 * C110) * C239 +
                      (C15405 * C498 - C82523 * C504) * C82592) *
                         C15400 +
                     ((C15405 * C694 - C82523 * C702) * C239 +
                      (C15405 * C1004 - C82523 * C1009) * C82592) *
                         C15401 +
                     ((C15405 * C1654 - C82523 * C1659) * C239 +
                      (C15405 * C2242 - C82523 * C2246) * C82592) *
                         C15402 +
                     ((C15405 * C2526 - C82523 * C2530) * C239 +
                      (C15405 * C3084 - C82523 * C3087) * C82592) *
                         C15403 +
                     ((C15405 * C15408 - C82523 * C15411) * C239 +
                      (C15405 * C15694 - C82523 * C15696) * C82592) *
                         C15404) *
                        C82938 * C82939 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C82523 * C108 - C15405 * C102) * C4296 +
                      (C82523 * C503 - C15405 * C497) * C82932 +
                      (C82523 * C1164 - C15405 * C1155) * C4297 +
                      (C82523 * C1468 - C15405 * C1463) * C82918 +
                      (C82523 * C4112 - C15405 * C4108) * C4298 +
                      (C82523 * C4687 - C15405 * C4683) * C82896) *
                         C13256 +
                     ((C16004 - C16005) * C4296 + (C16154 - C16155) * C82932 +
                      (C82523 * C3359 - C15405 * C3348) * C4297 +
                      (C82523 * C3865 - C15405 * C3859) * C82918 +
                      (C82523 * C4981 - C15405 * C4976) * C4298 +
                      (C82523 * C5457 - C15405 * C5454) * C82896) *
                         C13257 +
                     ((C16008 - C16009) * C4296 + (C16156 - C16157) * C82932 +
                      (C82523 * C3353 - C15405 * C3345) * C4297 +
                      (C82523 * C3868 - C15405 * C3862) * C82918 +
                      (C82523 * C16747 - C15405 * C16745) * C4298 +
                      (C82523 * C17215 - C15405 * C17213) * C82896) *
                         C82893) *
                        C82938 * C82939 * C90 +
                    (((C15405 * C103 - C82523 * C110) * C4296 +
                      (C15405 * C498 - C82523 * C504) * C82932 +
                      (C15405 * C1154 - C82523 * C1162) * C4297 +
                      (C15405 * C1464 - C82523 * C1469) * C82918 +
                      (C15405 * C4109 - C82523 * C4114) * C4298 +
                      (C15405 * C4684 - C82523 * C4688) * C82896) *
                         C13256 +
                     ((C15405 * C694 - C82523 * C702) * C4296 +
                      (C15405 * C1004 - C82523 * C1009) * C82932 +
                      (C15405 * C3347 - C82523 * C3357) * C4297 +
                      (C15405 * C3860 - C82523 * C3866) * C82918 +
                      (C15405 * C4975 - C82523 * C4979) * C4298 +
                      (C15405 * C5455 - C82523 * C5458) * C82896) *
                         C13257 +
                     ((C15405 * C1654 - C82523 * C1659) * C4296 +
                      (C15405 * C2242 - C82523 * C2246) * C82932 +
                      (C15405 * C3344 - C82523 * C3351) * C4297 +
                      (C15405 * C3863 - C82523 * C3869) * C82918 +
                      (C15405 * C16746 - C82523 * C16749) * C4298 +
                      (C15405 * C17214 - C82523 * C17216) * C82896) *
                         C82893) *
                        C82938 * C82939 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C82925 * C108 - C13259 * C102 + C82909 * C110 -
                      C13261 * C103 + C82885 * C112 - C13263 * C104) *
                         C25871 +
                     (C82925 * C503 - C13259 * C497 + C82909 * C504 -
                      C13261 * C498 + C82885 * C505 - C13263 * C499) *
                         C25720 +
                     (C82925 * C1164 - C13259 * C1155 + C82909 * C1162 -
                      C13261 * C1154 + C82885 * C1160 - C13263 * C1153) *
                         C25872 +
                     (C82925 * C1468 - C13259 * C1463 + C82909 * C1469 -
                      C13261 * C1464 + C82885 * C1470 - C13263 * C1465) *
                         C25721 +
                     (C82925 * C4112 - C13259 * C4108 + C82909 * C4114 -
                      C13261 * C4109 + C82885 * C4116 - C13263 * C4110) *
                         C25873 +
                     (C82925 * C4687 - C13259 * C4683 + C82909 * C4688 -
                      C13261 * C4684 + C82885 * C4689 - C13263 * C4685) *
                         C82896) *
                        C82581 * C82938 * C82939 * C90 +
                    ((C13259 * C103 - C82925 * C110 + C13261 * C104 -
                      C82909 * C112 + C13263 * C105 - C82885 * C114) *
                         C25871 +
                     (C13259 * C498 - C82925 * C504 + C13261 * C499 -
                      C82909 * C505 + C13263 * C500 - C82885 * C506) *
                         C25720 +
                     (C13259 * C1154 - C82925 * C1162 + C13261 * C1153 -
                      C82909 * C1160 + C13263 * C1152 - C82885 * C1158) *
                         C25872 +
                     (C13259 * C1464 - C82925 * C1469 + C13261 * C1465 -
                      C82909 * C1470 + C13263 * C1466 - C82885 * C1471) *
                         C25721 +
                     (C13259 * C4109 - C82925 * C4114 + C13261 * C4110 -
                      C82909 * C4116 + C13263 * C4111 - C82885 * C4118) *
                         C25873 +
                     (C13259 * C4684 - C82925 * C4688 + C13261 * C4685 -
                      C82909 * C4689 + C13263 * C4686 - C82885 * C4690) *
                         C82896) *
                        C82581 * C82938 * C82939 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C82523 * C108 - C15405 * C102) * C25871 +
                      (C82523 * C503 - C15405 * C497) * C25720 +
                      (C18542 - C18543) * C25872 + (C18822 - C18823) * C25721 +
                      (C18546 - C18547) * C25873 + (C18824 - C18825) * C82896) *
                         C82931 +
                     ((C16004 - C16005) * C25871 + (C16154 - C16155) * C25720 +
                      (C17734 - C17735) * C25872 + (C17988 - C17989) * C25721 +
                      (C17742 - C17743) * C25873 + (C17990 - C17991) * C82896) *
                         C82916 +
                     ((C16008 - C16009) * C25871 + (C16156 - C16157) * C25720 +
                      (C17738 - C17739) * C25872 + (C17992 - C17993) * C25721 +
                      (C17746 - C17747) * C25873 + (C17994 - C17995) * C82896) *
                         C82893) *
                        C82938 * C82939 * C90 +
                    (((C15405 * C103 - C82523 * C110) * C25871 +
                      (C15405 * C498 - C82523 * C504) * C25720 +
                      (C15405 * C1154 - C82523 * C1162) * C25872 +
                      (C15405 * C1464 - C82523 * C1469) * C25721 +
                      (C15405 * C4109 - C82523 * C4114) * C25873 +
                      (C15405 * C4684 - C82523 * C4688) * C82896) *
                         C82931 +
                     ((C15405 * C694 - C82523 * C702) * C25871 +
                      (C15405 * C1004 - C82523 * C1009) * C25720 +
                      (C15405 * C3347 - C82523 * C3357) * C25872 +
                      (C15405 * C3860 - C82523 * C3866) * C25721 +
                      (C15405 * C4975 - C82523 * C4979) * C25873 +
                      (C15405 * C5455 - C82523 * C5458) * C82896) *
                         C82916 +
                     ((C15405 * C1654 - C82523 * C1659) * C25871 +
                      (C15405 * C2242 - C82523 * C2246) * C25720 +
                      (C15405 * C3344 - C82523 * C3351) * C25872 +
                      (C15405 * C3863 - C82523 * C3869) * C25721 +
                      (C15405 * C16746 - C82523 * C16749) * C25873 +
                      (C15405 * C17214 - C82523 * C17216) * C82896) *
                         C82893) *
                        C82938 * C82939 * C91)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C82523 * C108 - C15405 * C102) * C30118 +
                     (C82523 * C503 - C15405 * C497) * C30017 +
                     (C18542 - C18543) * C30119 + (C18822 - C18823) * C30018 +
                     (C18546 - C18547) * C30120 + (C18824 - C18825) * C30019 +
                     (C82523 * C5695 - C15405 * C5690) * C30121 +
                     (C82523 * C6265 - C15405 * C6262) * C30020 +
                     (C82523 * C30024 - C15405 * C30022) * C30122 +
                     (C82523 * C30305 - C15405 * C30303) * C30021) *
                        C82581 * C82938 * C82939 * C90 +
                    ((C15405 * C103 - C82523 * C110) * C30118 +
                     (C15405 * C498 - C82523 * C504) * C30017 +
                     (C15405 * C1154 - C82523 * C1162) * C30119 +
                     (C15405 * C1464 - C82523 * C1469) * C30018 +
                     (C15405 * C4109 - C82523 * C4114) * C30120 +
                     (C15405 * C4684 - C82523 * C4688) * C30019 +
                     (C15405 * C5689 - C82523 * C5693) * C30121 +
                     (C15405 * C6263 - C82523 * C6266) * C30020 +
                     (C15405 * C30023 - C82523 * C30026) * C30122 +
                     (C15405 * C30304 - C82523 * C30306) * C30021) *
                        C82581 * C82938 * C82939 * C91)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C82581 * C169 - C168 * C102) * C239 +
                (C82581 * C551 - C168 * C497) * C82592) *
                   C81 +
               ((C182 - C183) * C239 + (C558 - C559) * C82592) * C82 +
               ((C186 - C187) * C239 + (C560 - C561) * C82592) * C83 +
               ((C190 - C191) * C239 + (C562 - C563) * C82592) * C84 +
               ((C194 - C195) * C239 + (C564 - C565) * C82592) * C85) *
                  C82938 * C82939 * C90 +
              (((C183 - C182) * C239 + (C559 - C558) * C82592) * C81 +
               ((C187 - C186) * C239 + (C561 - C560) * C82592) * C82 +
               ((C191 - C190) * C239 + (C563 - C562) * C82592) * C83 +
               ((C195 - C194) * C239 + (C565 - C564) * C82592) * C84 +
               ((C168 * C107 - C82581 * C174) * C239 +
                (C168 * C502 - C82581 * C556) * C82592) *
                   C85) *
                  C82938 * C82939 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
                 C82893 * C1746 - C1745 * C1653) *
                    C239 +
                (C82931 * C551 - C1743 * C497 + C82916 * C1055 - C1744 * C1003 +
                 C82893 * C2323 - C1745 * C2241) *
                    C82592) *
                   C1641 +
               ((C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C239 +
                (C2328 - C2329 + C2330 - C2331 + C2332 - C2333) * C82592) *
                   C1642 +
               ((C1767 - C1768 + C1769 - C1770 + C1771 - C1772) * C239 +
                (C2334 - C2335 + C2336 - C2337 + C2338 - C2339) * C82592) *
                   C82885) *
                  C82938 * C82939 * C90 +
              (((C1756 - C1755 + C1758 - C1757 + C1760 - C1759) * C239 +
                (C2329 - C2328 + C2331 - C2330 + C2333 - C2332) * C82592) *
                   C1641 +
               ((C1768 - C1767 + C1770 - C1769 + C1772 - C1771) * C239 +
                (C2335 - C2334 + C2337 - C2336 + C2339 - C2338) * C82592) *
                   C1642 +
               ((C1743 * C105 - C82931 * C172 + C1744 * C692 - C82916 * C756 +
                 C1745 * C1656 - C82893 * C1749) *
                    C239 +
                (C1743 * C500 - C82931 * C554 + C1744 * C1006 - C82916 * C1058 +
                 C1745 * C2244 - C82893 * C2326) *
                    C82592) *
                   C82885) *
                  C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C4296 +
            (C82581 * C551 - C168 * C497) * C82932 +
            (C82581 * C1213 - C168 * C1155) * C4297 +
            (C82581 * C1515 - C168 * C1463) * C82918 +
            (C82581 * C4198 - C168 * C4108) * C4298 +
            (C82581 * C4765 - C168 * C4683) * C82896) *
               C1641 +
           ((C182 - C183) * C4296 + (C558 - C559) * C82932 +
            (C4207 - C4208) * C4297 + (C4770 - C4771) * C82918 +
            (C4215 - C4216) * C4298 + (C4772 - C4773) * C82896) *
               C1642 +
           ((C186 - C187) * C4296 + (C560 - C561) * C82932 +
            (C4211 - C4212) * C4297 + (C4774 - C4775) * C82918 +
            (C4219 - C4220) * C4298 + (C4776 - C4777) * C82896) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C183 - C182) * C4296 + (C559 - C558) * C82932 +
            (C4208 - C4207) * C4297 + (C4771 - C4770) * C82918 +
            (C4216 - C4215) * C4298 + (C4773 - C4772) * C82896) *
               C1641 +
           ((C187 - C186) * C4296 + (C561 - C560) * C82932 +
            (C4212 - C4211) * C4297 + (C4775 - C4774) * C82918 +
            (C4220 - C4219) * C4298 + (C4777 - C4776) * C82896) *
               C1642 +
           ((C191 - C190) * C4296 + (C563 - C562) * C82932 +
            (C168 * C1152 - C82581 * C1216) * C4297 +
            (C168 * C1466 - C82581 * C1518) * C82918 +
            (C168 * C4111 - C82581 * C4201) * C4298 +
            (C168 * C4686 - C82581 * C4768) * C82896) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C239 +
            (C13256 * C551 - C13339 * C497 + C13257 * C1055 - C13340 * C1003 +
             C82893 * C2323 - C13341 * C2241) *
                C82592) *
               C82925 +
           ((C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C239 +
            (C13856 - C13857 + C13858 - C13859 + C13860 - C13861) * C82592) *
               C82909 +
           ((C13355 - C13356 + C13357 - C13358 + C13359 - C13360) * C239 +
            (C13862 - C13863 + C13864 - C13865 + C13866 - C13867) * C82592) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C13344 - C13343 + C13346 - C13345 + C13348 - C13347) * C239 +
            (C13857 - C13856 + C13859 - C13858 + C13861 - C13860) * C82592) *
               C82925 +
           ((C13356 - C13355 + C13358 - C13357 + C13360 - C13359) * C239 +
            (C13863 - C13862 + C13865 - C13864 + C13867 - C13866) * C82592) *
               C82909 +
           ((C13339 * C105 - C13256 * C172 + C13340 * C692 - C13257 * C756 +
             C13341 * C1656 - C82893 * C1749) *
                C239 +
            (C13339 * C500 - C13256 * C554 + C13340 * C1006 - C13257 * C1058 +
             C13341 * C2244 - C82893 * C2326) *
                C82592) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15400 * C169 - C15457 * C102 + C15401 * C753 - C15458 * C695 +
            C15402 * C1746 - C15459 * C1653 + C15403 * C2653 - C15460 * C2527 +
            C15404 * C15462 - C15461 * C15407) *
               C239 +
           (C15400 * C551 - C15457 * C497 + C15401 * C1055 - C15458 * C1003 +
            C15402 * C2323 - C15459 * C2241 + C15403 * C3175 - C15460 * C3083 +
            C15404 * C15739 - C15461 * C15693) *
               C82592) *
              C82523 * C82938 * C82939 * C90 +
          ((C15457 * C103 - C15400 * C170 + C15458 * C694 - C15401 * C754 +
            C15459 * C1654 - C15402 * C1747 + C15460 * C2526 - C15403 * C2654 +
            C15461 * C15408 - C15404 * C15463) *
               C239 +
           (C15457 * C498 - C15400 * C552 + C15458 * C1004 - C15401 * C1056 +
            C15459 * C2242 - C15402 * C2324 + C15460 * C3084 - C15403 * C3176 +
            C15461 * C15694 - C15404 * C15740) *
               C82592) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
            C82893 * C1746 - C13341 * C1653) *
               C4296 +
           (C13256 * C551 - C13339 * C497 + C13257 * C1055 - C13340 * C1003 +
            C82893 * C2323 - C13341 * C2241) *
               C82932 +
           (C13256 * C1213 - C13339 * C1155 + C13257 * C3441 - C13340 * C3348 +
            C82893 * C3442 - C13341 * C3345) *
               C4297 +
           (C13256 * C1515 - C13339 * C1463 + C13257 * C3945 - C13340 * C3859 +
            C82893 * C3946 - C13341 * C3862) *
               C82918 +
           (C13256 * C4198 - C13339 * C4108 + C13257 * C5060 - C13340 * C4976 +
            C82893 * C16827 - C13341 * C16745) *
               C4298 +
           (C13256 * C4765 - C13339 * C4683 + C13257 * C5534 - C13340 * C5454 +
            C82893 * C17291 - C13341 * C17213) *
               C82896) *
              C82523 * C82938 * C82939 * C90 +
          ((C13344 - C13343 + C13346 - C13345 + C13348 - C13347) * C4296 +
           (C13857 - C13856 + C13859 - C13858 + C13861 - C13860) * C82932 +
           (C13339 * C1154 - C13256 * C1214 + C13340 * C3347 - C13257 * C3443 +
            C13341 * C3344 - C82893 * C3444) *
               C4297 +
           (C13339 * C1464 - C13256 * C1516 + C13340 * C3860 - C13257 * C3947 +
            C13341 * C3863 - C82893 * C3948) *
               C82918 +
           (C13339 * C4109 - C13256 * C4199 + C13340 * C4975 - C13257 * C5061 +
            C13341 * C16746 - C82893 * C16828) *
               C4298 +
           (C13339 * C4684 - C13256 * C4766 + C13340 * C5455 - C13257 * C5535 +
            C13341 * C17214 - C82893 * C17292) *
               C82896) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C25871 +
            (C82581 * C551 - C168 * C497) * C25720 + (C5823 - C5824) * C25872 +
            (C6358 - C6359) * C25721 + (C5827 - C5828) * C25873 +
            (C6360 - C6361) * C82896) *
               C82925 +
           ((C182 - C183) * C25871 + (C558 - C559) * C25720 +
            (C4207 - C4208) * C25872 + (C4770 - C4771) * C25721 +
            (C4215 - C4216) * C25873 + (C4772 - C4773) * C82896) *
               C82909 +
           ((C186 - C187) * C25871 + (C560 - C561) * C25720 +
            (C4211 - C4212) * C25872 + (C4774 - C4775) * C25721 +
            (C4219 - C4220) * C25873 + (C4776 - C4777) * C82896) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C183 - C182) * C25871 + (C559 - C558) * C25720 +
            (C4208 - C4207) * C25872 + (C4771 - C4770) * C25721 +
            (C4216 - C4215) * C25873 + (C4773 - C4772) * C82896) *
               C82925 +
           ((C187 - C186) * C25871 + (C561 - C560) * C25720 +
            (C4212 - C4211) * C25872 + (C4775 - C4774) * C25721 +
            (C4220 - C4219) * C25873 + (C4777 - C4776) * C82896) *
               C82909 +
           ((C191 - C190) * C25871 + (C563 - C562) * C25720 +
            (C8539 - C8538) * C25872 + (C8984 - C8983) * C25721 +
            (C168 * C4111 - C82581 * C4201) * C25873 +
            (C168 * C4686 - C82581 * C4768) * C82896) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
            C82893 * C1746 - C1745 * C1653) *
               C25871 +
           (C82931 * C551 - C1743 * C497 + C82916 * C1055 - C1744 * C1003 +
            C82893 * C2323 - C1745 * C2241) *
               C25720 +
           (C82931 * C1213 - C1743 * C1155 + C82916 * C3441 - C1744 * C3348 +
            C82893 * C3442 - C1745 * C3345) *
               C25872 +
           (C82931 * C1515 - C1743 * C1463 + C82916 * C3945 - C1744 * C3859 +
            C82893 * C3946 - C1745 * C3862) *
               C25721 +
           (C82931 * C4198 - C1743 * C4108 + C82916 * C5060 - C1744 * C4976 +
            C82893 * C16827 - C1745 * C16745) *
               C25873 +
           (C82931 * C4765 - C1743 * C4683 + C82916 * C5534 - C1744 * C5454 +
            C82893 * C17291 - C1745 * C17213) *
               C82896) *
              C82523 * C82938 * C82939 * C90 +
          ((C1756 - C1755 + C1758 - C1757 + C1760 - C1759) * C25871 +
           (C2329 - C2328 + C2331 - C2330 + C2333 - C2332) * C25720 +
           (C1743 * C1154 - C82931 * C1214 + C1744 * C3347 - C82916 * C3443 +
            C1745 * C3344 - C82893 * C3444) *
               C25872 +
           (C1743 * C1464 - C82931 * C1516 + C1744 * C3860 - C82916 * C3947 +
            C1745 * C3863 - C82893 * C3948) *
               C25721 +
           (C1743 * C4109 - C82931 * C4199 + C1744 * C4975 - C82916 * C5061 +
            C1745 * C16746 - C82893 * C16828) *
               C25873 +
           (C1743 * C4684 - C82931 * C4766 + C1744 * C5455 - C82916 * C5535 +
            C1745 * C17214 - C82893 * C17292) *
               C82896) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C82581 * C169 - C168 * C102) * C30118 +
           (C82581 * C551 - C168 * C497) * C30017 + (C5823 - C5824) * C30119 +
           (C6358 - C6359) * C30018 + (C5827 - C5828) * C30120 +
           (C6360 - C6361) * C30019 + (C82581 * C5816 - C168 * C5690) * C30121 +
           (C82581 * C6354 - C168 * C6262) * C30020 +
           (C82581 * C30072 - C168 * C30022) * C30122 +
           (C82581 * C30349 - C168 * C30303) * C30021) *
              C82523 * C82938 * C82939 * C90 +
          ((C183 - C182) * C30118 + (C559 - C558) * C30017 +
           (C4208 - C4207) * C30119 + (C4771 - C4770) * C30018 +
           (C4216 - C4215) * C30120 + (C4773 - C4772) * C30019 +
           (C168 * C5689 - C82581 * C5817) * C30121 +
           (C168 * C6263 - C82581 * C6355) * C30020 +
           (C168 * C30023 - C82581 * C30073) * C30122 +
           (C168 * C30304 - C82581 * C30350) * C30021) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) *
                   C82581 * C81 +
               C643 * C82 + C644 * C83 + C645 * C84 + C646 * C85) *
                  C82938 * C82939 * C90 -
              ((C239 * C245 - C607 * C107 - C239 * C502 + C82592 * C613) *
                   C82581 * C85 +
               C646 * C84 + C645 * C83 + C644 * C82 + C643 * C81) *
                  C82938 * C82939 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) *
                    C82931 +
                (C239 * C805 - C607 * C695 - C239 * C1003 + C82592 * C1106) *
                    C82916 +
                (C239 * C1852 - C607 * C1653 - C239 * C2241 + C82592 * C2413) *
                    C82893) *
                   C1641 +
               (C2418 + C2448 + C2449) * C1642 +
               (C2427 + C2450 + C2451) * C82885) *
                  C82938 * C82939 * C90 -
              (((C239 * C1855 - C607 * C1656 - C239 * C2244 + C82592 * C2416) *
                    C82893 +
                (C239 * C808 - C607 * C692 - C239 * C1006 + C82592 * C1103) *
                    C82916 +
                C641 * C82931) *
                   C82885 +
               (C2451 + C2450 + C2427) * C1642 +
               (C2449 + C2448 + C2418) * C1641) *
                  C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4296 * C240 - C4851 * C102 - C4296 * C497 + C82932 * C608 +
            C4297 * C1265 - C4852 * C1155 - C4297 * C1463 + C82918 * C1566 +
            C4298 * C4299 - C4853 * C4108 - C4298 * C4683 + C82896 * C4854) *
               C82581 * C1641 +
           (C4895 + C4896 + C4897) * C82581 * C1642 +
           (C4898 + C4899 + C4900) * C82581 * C82885) *
              C82938 * C82939 * C90 -
          ((C4298 * C4302 - C4853 * C4111 - C4298 * C4686 + C82896 * C4857 +
            C4297 * C1268 - C4852 * C1152 - C4297 * C1466 + C82918 * C1563 +
            C4296 * C243 - C4851 * C105 - C4296 * C500 + C82932 * C611) *
               C82581 * C82885 +
           (C4900 + C4899 + C4898) * C82581 * C1642 +
           (C4897 + C4896 + C4895) * C82581 * C1641) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C13256 +
            C3268 * C13257 + C3269 * C82893) *
               C82925 +
           (C13942 + C13943 + C13944) * C82909 +
           (C13945 + C13946 + C13947) * C82885) *
              C82938 * C82939 * C90 -
          (((C239 * C1855 - C607 * C1656 - C239 * C2244 + C82592 * C2416) *
                C82893 +
            C7146 * C13257 + C641 * C13256) *
               C82885 +
           (C13947 + C13946 + C13945) * C82909 +
           (C13944 + C13943 + C13942) * C82925) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C15400 +
           C3268 * C15401 + C3269 * C15402 +
           (C239 * C2733 - C607 * C2527 - C239 * C3083 + C82592 * C3254) *
               C15403 +
           (C239 * C15508 - C607 * C15407 - C239 * C15693 + C82592 * C15783) *
               C15404) *
              C82523 * C82938 * C82939 * C90 -
          ((C239 * C15509 - C607 * C15408 - C239 * C15694 + C82592 * C15784) *
               C15404 +
           (C239 * C2734 - C607 * C2526 - C239 * C3084 + C82592 * C3253) *
               C15403 +
           C2445 * C15402 + C2444 * C15401 + C639 * C15400) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4296 * C240 - C4851 * C102 - C4296 * C497 + C82932 * C608 +
            C4297 * C1265 - C4852 * C1155 - C4297 * C1463 + C82918 * C1566 +
            C4298 * C4299 - C4853 * C4108 - C4298 * C4683 + C82896 * C4854) *
               C13256 +
           (C4296 * C805 - C4851 * C695 - C4296 * C1003 + C82932 * C1106 +
            C4297 * C3527 - C4852 * C3348 - C4297 * C3859 + C82918 * C4030 +
            C4298 * C5140 - C4853 * C4976 - C4298 * C5454 + C82896 * C5613) *
               C13257 +
           (C4296 * C1852 - C4851 * C1653 - C4296 * C2241 + C82932 * C2413 +
            C4297 * C3530 - C4852 * C3345 - C4297 * C3862 + C82918 * C4029 +
            C4298 * C16905 - C4853 * C16745 - C4298 * C17213 +
            C82896 * C17367) *
               C82893) *
              C82523 * C82938 * C82939 * C90 -
          ((C4298 * C16906 - C4853 * C16746 - C4298 * C17214 + C82896 * C17368 +
            C4297 * C3531 - C4852 * C3344 - C4297 * C3863 + C82918 * C4027 +
            C4296 * C1853 - C4851 * C1654 - C4296 * C2242 + C82932 * C2414) *
               C82893 +
           (C4298 * C5141 - C4853 * C4975 - C4298 * C5455 + C82896 * C5612 +
            C4297 * C3528 - C4852 * C3347 - C4297 * C3860 + C82918 * C4028 +
            C4296 * C806 - C4851 * C694 - C4296 * C1004 + C82932 * C1105) *
               C13257 +
           (C4897 + C4896 + C4895) * C13256) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C25871 * C240 - C26354 * C102 - C25871 * C497 + C25720 * C608 +
            C25872 * C1265 - C26355 * C1155 - C25872 * C1463 + C25721 * C1566 +
            C25873 * C4299 - C26356 * C4108 - C25873 * C4683 + C82896 * C4854) *
               C82581 * C82925 +
           (C26394 + C26395 + C26396) * C82581 * C82909 +
           (C26397 + C26398 + C26399) * C82581 * C82885) *
              C82938 * C82939 * C90 -
          ((C25873 * C4302 - C26356 * C4111 - C25873 * C4686 + C82896 * C4857 +
            C25872 * C1268 - C26355 * C1152 - C25872 * C1466 + C25721 * C1563 +
            C25871 * C243 - C26354 * C105 - C25871 * C500 + C25720 * C611) *
               C82581 * C82885 +
           (C26399 + C26398 + C26397) * C82581 * C82909 +
           (C26396 + C26395 + C26394) * C82581 * C82925) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C25871 * C240 - C26354 * C102 - C25871 * C497 + C25720 * C608 +
            C25872 * C1265 - C26355 * C1155 - C25872 * C1463 + C25721 * C1566 +
            C25873 * C4299 - C26356 * C4108 - C25873 * C4683 + C82896 * C4854) *
               C82931 +
           (C25871 * C805 - C26354 * C695 - C25871 * C1003 + C25720 * C1106 +
            C25872 * C3527 - C26355 * C3348 - C25872 * C3859 + C25721 * C4030 +
            C25873 * C5140 - C26356 * C4976 - C25873 * C5454 + C82896 * C5613) *
               C82916 +
           (C25871 * C1852 - C26354 * C1653 - C25871 * C2241 + C25720 * C2413 +
            C25872 * C3530 - C26355 * C3345 - C25872 * C3862 + C25721 * C4029 +
            C25873 * C16905 - C26356 * C16745 - C25873 * C17213 +
            C82896 * C17367) *
               C82893) *
              C82523 * C82938 * C82939 * C90 -
          ((C25873 * C16906 - C26356 * C16746 - C25873 * C17214 +
            C82896 * C17368 + C25872 * C3531 - C26355 * C3344 - C25872 * C3863 +
            C25721 * C4027 + C25871 * C1853 - C26354 * C1654 - C25871 * C2242 +
            C25720 * C2414) *
               C82893 +
           (C25873 * C5141 - C26356 * C4975 - C25873 * C5455 + C82896 * C5612 +
            C25872 * C3528 - C26355 * C3347 - C25872 * C3860 + C25721 * C4028 +
            C25871 * C806 - C26354 * C694 - C25871 * C1004 + C25720 * C1105) *
               C82916 +
           (C26396 + C26395 + C26394) * C82931) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C30118 * C240 - C30393 * C102 - C30118 * C497 + C30017 * C608 +
           C30119 * C1265 - C30394 * C1155 - C30119 * C1463 + C30018 * C1566 +
           C30120 * C4299 - C30395 * C4108 - C30120 * C4683 + C30019 * C4854 +
           C30121 * C5904 - C30396 * C5690 - C30121 * C6262 + C30020 * C6437 +
           C30122 * C30123 - C30397 * C30022 - C30122 * C30303 +
           C30021 * C30398) *
              C82581 * C82523 * C82938 * C82939 * C90 -
          (C30122 * C30124 - C30397 * C30023 - C30122 * C30304 +
           C30021 * C30399 + C30121 * C5905 - C30396 * C5689 - C30121 * C6263 +
           C30020 * C6436 + C30120 * C4300 - C30395 * C4109 - C30120 * C4684 +
           C30019 * C4855 + C30119 * C1266 - C30394 * C1154 - C30119 * C1464 +
           C30018 * C1565 + C30118 * C241 - C30393 * C103 - C30118 * C498 +
           C30017 * C609) *
              C82581 * C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexx[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((C92 * C108 - C93 * C102 - C92 * C109 + C81 * C120 + C94 * C110 -
               C95 * C103 - C94 * C111 + C82 * C121 + C96 * C112 - C97 * C104 -
               C96 * C113 + C83 * C122 + C98 * C114 - C99 * C105 - C98 * C115 +
               C84 * C123 + C100 * C116 - C101 * C106 - C100 * C117 +
               C85 * C124) *
                  C82592 * C82581 * C82938 * C688 -
              (C100 * C696 - C101 * C691 - C100 * C697 + C85 * C706 +
               C98 * C698 - C99 * C692 - C98 * C699 + C84 * C707 + C96 * C700 -
               C97 * C693 - C96 * C701 + C83 * C708 + C94 * C702 - C95 * C694 -
               C94 * C703 + C82 * C709 + C92 * C704 - C93 * C695 - C92 * C705 +
               C81 * C710) *
                  C82592 * C82581 * C82938 * C689) *
             C82940 +
         0.5 * std::pow(Pi, 2.5) *
             (((C1647 * C108 - C1648 * C102 - C1647 * C109 + C1641 * C120 +
                C1649 * C110 - C1650 * C103 - C1649 * C111 + C1642 * C121 +
                C1651 * C112 - C1652 * C104 - C1651 * C113 + C82885 * C122) *
                   C82592 * C82931 +
               (C2574 + C2575 + C2576) * C82592 * C82916 +
               (C2577 + C2578 + C2579) * C82592 * C82893) *
                  C82938 * C688 -
              ((C1651 * C2528 - C1652 * C2525 - C1651 * C2529 + C82885 * C2534 +
                C1649 * C2530 - C1650 * C2526 - C1649 * C2531 + C1642 * C2535 +
                C1647 * C2532 - C1648 * C2527 - C1647 * C2533 + C1641 * C2536) *
                   C82592 * C82893 +
               (C2579 + C2578 + C2577) * C82592 * C82916 +
               (C2576 + C2575 + C2574) * C82592 * C82931) *
                  C82938 * C689) *
             C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1647 * C108 - C1648 * C102 - C1647 * C109 + C1641 * C120 +
            C1649 * C110 - C1650 * C103 - C1649 * C111 + C1642 * C121 +
            C1651 * C112 - C1652 * C104 - C1651 * C113 + C82885 * C122) *
               C82932 +
           (C1647 * C1164 - C1648 * C1155 - C1647 * C1165 + C1641 * C1170 +
            C1649 * C1162 - C1650 * C1154 - C1649 * C1163 + C1642 * C1169 +
            C1651 * C1160 - C1652 * C1153 - C1651 * C1161 + C82885 * C1168) *
               C82918 +
           (C1647 * C4112 - C1648 * C4108 - C1647 * C4113 + C1641 * C4120 +
            C1649 * C4114 - C1650 * C4109 - C1649 * C4115 + C1642 * C4121 +
            C1651 * C4116 - C1652 * C4110 - C1651 * C4117 + C82885 * C4122) *
               C82896) *
              C82581 * C82938 * C688 -
          ((C1651 * C4977 - C1652 * C4974 - C1651 * C4978 + C82885 * C4983 +
            C1649 * C4979 - C1650 * C4975 - C1649 * C4980 + C1642 * C4984 +
            C1647 * C4981 - C1648 * C4976 - C1647 * C4982 + C1641 * C4985) *
               C82896 +
           (C1651 * C3355 - C1652 * C3346 - C1651 * C3356 + C82885 * C3364 +
            C1649 * C3357 - C1650 * C3347 - C1649 * C3358 + C1642 * C3365 +
            C1647 * C3359 - C1648 * C3348 - C1647 * C3360 + C1641 * C3366) *
               C82918 +
           (C2576 + C2575 + C2574) * C82932) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13259 * C108 - C13260 * C102 - C13259 * C109 + C82925 * C120 +
            C13261 * C110 - C13262 * C103 - C13261 * C111 + C82909 * C121 +
            C13263 * C112 - C13264 * C104 - C13263 * C113 + C82885 * C122) *
               C82592 * C13256 +
           (C14058 + C14059 + C14060) * C82592 * C13257 +
           (C14061 + C14062 + C14063) * C82592 * C82893) *
              C82938 * C688 -
          ((C13263 * C2528 - C13264 * C2525 - C13263 * C2529 + C82885 * C2534 +
            C13261 * C2530 - C13262 * C2526 - C13261 * C2531 + C82909 * C2535 +
            C13259 * C2532 - C13260 * C2527 - C13259 * C2533 + C82925 * C2536) *
               C82592 * C82893 +
           (C14063 + C14062 + C14061) * C82592 * C13257 +
           (C14060 + C14059 + C14058) * C82592 * C13256) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
               C82592 * C15400 +
           C15860 * C15401 + C15861 * C15402 + C15862 * C15403 +
           C15863 * C15404) *
              C82938 * C688 -
          ((C15405 * C15828 - C15406 * C15827 - C15405 * C15829 +
            C82523 * C15830) *
               C82592 * C15404 +
           C15863 * C15403 + C15862 * C15402 + C15861 * C15401 +
           C15860 * C15400) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C82932 +
            (C15405 * C1164 - C15406 * C1155 - C15405 * C1165 +
             C82523 * C1170) *
                C82918 +
            (C15405 * C4112 - C15406 * C4108 - C15405 * C4113 +
             C82523 * C4120) *
                C82896) *
               C13256 +
           (C17448 + C17478 + C17479) * C13257 +
           (C17457 + C17480 + C17481) * C82893) *
              C82938 * C688 -
          (((C15405 * C17444 - C15406 * C17443 - C15405 * C17445 +
             C82523 * C17446) *
                C82896 +
            (C15405 * C16307 - C15406 * C16304 - C15405 * C16308 +
             C82523 * C16310) *
                C82918 +
            C15858 * C82932) *
               C82893 +
           (C17481 + C17480 + C17457) * C13257 +
           (C17479 + C17478 + C17448) * C13256) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13259 * C108 - C13260 * C102 - C13259 * C109 + C82925 * C120 +
            C13261 * C110 - C13262 * C103 - C13261 * C111 + C82909 * C121 +
            C13263 * C112 - C13264 * C104 - C13263 * C113 + C82885 * C122) *
               C25720 +
           (C13259 * C1164 - C13260 * C1155 - C13259 * C1165 + C82925 * C1170 +
            C13261 * C1162 - C13262 * C1154 - C13261 * C1163 + C82909 * C1169 +
            C13263 * C1160 - C13264 * C1153 - C13263 * C1161 + C82885 * C1168) *
               C25721 +
           (C13259 * C4112 - C13260 * C4108 - C13259 * C4113 + C82925 * C4120 +
            C13261 * C4114 - C13262 * C4109 - C13261 * C4115 + C82909 * C4121 +
            C13263 * C4116 - C13264 * C4110 - C13263 * C4117 + C82885 * C4122) *
               C82896) *
              C82581 * C82938 * C688 -
          ((C13263 * C4977 - C13264 * C4974 - C13263 * C4978 + C82885 * C4983 +
            C13261 * C4979 - C13262 * C4975 - C13261 * C4980 + C82909 * C4984 +
            C13259 * C4981 - C13260 * C4976 - C13259 * C4982 + C82925 * C4985) *
               C82896 +
           (C13263 * C3355 - C13264 * C3346 - C13263 * C3356 + C82885 * C3364 +
            C13261 * C3357 - C13262 * C3347 - C13261 * C3358 + C82909 * C3365 +
            C13259 * C3359 - C13260 * C3348 - C13259 * C3360 + C82925 * C3366) *
               C25721 +
           (C14060 + C14059 + C14058) * C25720) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C25720 +
            C18282 * C25721 + C18283 * C82896) *
               C82931 +
           (C28556 + C28557 + C28558) * C82916 +
           (C28559 + C28560 + C28561) * C82893) *
              C82938 * C688 -
          (((C15405 * C17444 - C15406 * C17443 - C15405 * C17445 +
             C82523 * C17446) *
                C82896 +
            C24439 * C25721 + C15858 * C25720) *
               C82893 +
           (C28561 + C28560 + C28559) * C82916 +
           (C28558 + C28557 + C28556) * C82931) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
               C30017 +
           C18282 * C30018 + C18283 * C30019 +
           (C15405 * C5695 - C15406 * C5690 - C15405 * C5696 + C82523 * C5699) *
               C30020 +
           (C15405 * C30024 - C15406 * C30022 - C15405 * C30025 +
            C82523 * C30028) *
               C30021) *
              C82581 * C82938 * C688 -
          ((C15405 * C30443 - C15406 * C30442 - C15405 * C30444 +
            C82523 * C30445) *
               C30021 +
           (C15405 * C18265 - C15406 * C18262 - C15405 * C18266 +
            C82523 * C18268) *
               C30020 +
           C17475 * C30019 + C17474 * C30018 + C15856 * C30017) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C82581 * C169 - C168 * C102) * C92 +
               (C82581 * C175 - C168 * C109) * C81 + (C182 - C183) * C94 +
               (C184 - C185) * C82 + (C186 - C187) * C96 + (C188 - C189) * C83 +
               (C190 - C191) * C98 + (C192 - C193) * C84 +
               (C194 - C195) * C100 + (C196 - C197) * C85) *
                  C82592 * C82938 * C688 +
              ((C168 * C695 - C82581 * C753) * C92 +
               (C168 * C705 - C82581 * C758) * C81 +
               (C168 * C694 - C82581 * C754) * C94 +
               (C168 * C703 - C82581 * C759) * C82 +
               (C168 * C693 - C82581 * C755) * C96 +
               (C168 * C701 - C82581 * C760) * C83 +
               (C168 * C692 - C82581 * C756) * C98 +
               (C168 * C699 - C82581 * C761) * C84 +
               (C168 * C691 - C82581 * C757) * C100 +
               (C168 * C697 - C82581 * C762) * C85) *
                  C82592 * C82938 * C689) *
             C82940 +
         0.5 * std::pow(Pi, 2.5) *
             (((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
                C82893 * C1746 - C1745 * C1653) *
                   C1647 +
               (C82931 * C175 - C1743 * C109 + C82916 * C758 - C1744 * C705 +
                C82893 * C1750 - C1745 * C1658) *
                   C1641 +
               (C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C1649 +
               (C1761 - C1762 + C1763 - C1764 + C1765 - C1766) * C1642 +
               (C1767 - C1768 + C1769 - C1770 + C1771 - C1772) * C1651 +
               (C1773 - C1774 + C1775 - C1776 + C1777 - C1778) * C82885) *
                  C82592 * C82938 * C688 +
              ((C1743 * C695 - C82931 * C753 + C1744 * C1653 - C82916 * C1746 +
                C1745 * C2527 - C82893 * C2653) *
                   C1647 +
               (C1743 * C705 - C82931 * C758 + C1744 * C1658 - C82916 * C1750 +
                C1745 * C2533 - C82893 * C2656) *
                   C1641 +
               (C1743 * C694 - C82931 * C754 + C1744 * C1654 - C82916 * C1747 +
                C1745 * C2526 - C82893 * C2654) *
                   C1649 +
               (C1743 * C703 - C82931 * C759 + C1744 * C1660 - C82916 * C1751 +
                C1745 * C2531 - C82893 * C2657) *
                   C1642 +
               (C1743 * C693 - C82931 * C755 + C1744 * C1655 - C82916 * C1748 +
                C1745 * C2525 - C82893 * C2655) *
                   C1651 +
               (C1743 * C701 - C82931 * C760 + C1744 * C1662 - C82916 * C1752 +
                C1745 * C2529 - C82893 * C2658) *
                   C82885) *
                  C82592 * C82938 * C689) *
             C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C1647 +
            (C82581 * C175 - C168 * C109) * C1641 + (C182 - C183) * C1649 +
            (C184 - C185) * C1642 + (C186 - C187) * C1651 +
            (C188 - C189) * C82885) *
               C82932 +
           ((C82581 * C1213 - C168 * C1155) * C1647 +
            (C82581 * C1218 - C168 * C1165) * C1641 + (C4207 - C4208) * C1649 +
            (C4209 - C4210) * C1642 + (C4211 - C4212) * C1651 +
            (C4213 - C4214) * C82885) *
               C82918 +
           ((C82581 * C4198 - C168 * C4108) * C1647 +
            (C82581 * C4202 - C168 * C4113) * C1641 + (C4215 - C4216) * C1649 +
            (C4217 - C4218) * C1642 + (C4219 - C4220) * C1651 +
            (C4221 - C4222) * C82885) *
               C82896) *
              C82938 * C688 +
          (((C168 * C695 - C82581 * C753) * C1647 +
            (C168 * C705 - C82581 * C758) * C1641 +
            (C168 * C694 - C82581 * C754) * C1649 +
            (C168 * C703 - C82581 * C759) * C1642 +
            (C168 * C693 - C82581 * C755) * C1651 +
            (C168 * C701 - C82581 * C760) * C82885) *
               C82932 +
           ((C168 * C3348 - C82581 * C3441) * C1647 +
            (C168 * C3360 - C82581 * C3447) * C1641 +
            (C168 * C3347 - C82581 * C3443) * C1649 +
            (C168 * C3358 - C82581 * C3449) * C1642 +
            (C168 * C3346 - C82581 * C3445) * C1651 +
            (C168 * C3356 - C82581 * C3451) * C82885) *
               C82918 +
           ((C168 * C4976 - C82581 * C5060) * C1647 +
            (C168 * C4982 - C82581 * C5063) * C1641 +
            (C168 * C4975 - C82581 * C5061) * C1649 +
            (C168 * C4980 - C82581 * C5064) * C1642 +
            (C168 * C4974 - C82581 * C5062) * C1651 +
            (C168 * C4978 - C82581 * C5065) * C82885) *
               C82896) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
            C82893 * C1746 - C13341 * C1653) *
               C13259 +
           (C13256 * C175 - C13339 * C109 + C13257 * C758 - C13340 * C705 +
            C82893 * C1750 - C13341 * C1658) *
               C82925 +
           (C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C13261 +
           (C13349 - C13350 + C13351 - C13352 + C13353 - C13354) * C82909 +
           (C13355 - C13356 + C13357 - C13358 + C13359 - C13360) * C13263 +
           (C13361 - C13362 + C13363 - C13364 + C13365 - C13366) * C82885) *
              C82592 * C82938 * C688 +
          ((C13339 * C695 - C13256 * C753 + C13340 * C1653 - C13257 * C1746 +
            C13341 * C2527 - C82893 * C2653) *
               C13259 +
           (C13339 * C705 - C13256 * C758 + C13340 * C1658 - C13257 * C1750 +
            C13341 * C2533 - C82893 * C2656) *
               C82925 +
           (C13339 * C694 - C13256 * C754 + C13340 * C1654 - C13257 * C1747 +
            C13341 * C2526 - C82893 * C2654) *
               C13261 +
           (C13339 * C703 - C13256 * C759 + C13340 * C1660 - C13257 * C1751 +
            C13341 * C2531 - C82893 * C2657) *
               C82909 +
           (C13339 * C693 - C13256 * C755 + C13340 * C1655 - C13257 * C1748 +
            C13341 * C2525 - C82893 * C2655) *
               C13263 +
           (C13339 * C701 - C13256 * C760 + C13340 * C1662 - C13257 * C1752 +
            C13341 * C2529 - C82893 * C2658) *
               C82885) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15400 * C169 - C15457 * C102 + C15401 * C753 - C15458 * C695 +
            C15402 * C1746 - C15459 * C1653 + C15403 * C2653 - C15460 * C2527 +
            C15404 * C15462 - C15461 * C15407) *
               C15405 +
           (C15400 * C175 - C15457 * C109 + C15401 * C758 - C15458 * C705 +
            C15402 * C1750 - C15459 * C1658 + C15403 * C2656 - C15460 * C2533 +
            C15404 * C15464 - C15461 * C15410) *
               C82523) *
              C82592 * C82938 * C688 +
          ((C15457 * C695 - C15400 * C753 + C15458 * C1653 - C15401 * C1746 +
            C15459 * C2527 - C15402 * C2653 + C15460 * C15407 -
            C15403 * C15462 + C15461 * C15827 - C15404 * C15905) *
               C15405 +
           (C15457 * C705 - C15400 * C758 + C15458 * C1658 - C15401 * C1750 +
            C15459 * C2533 - C15402 * C2656 + C15460 * C15410 -
            C15403 * C15464 + C15461 * C15829 - C15404 * C15906) *
               C82523) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C15405 +
            (C13256 * C175 - C13339 * C109 + C13257 * C758 - C13340 * C705 +
             C82893 * C1750 - C13341 * C1658) *
                C82523) *
               C82932 +
           ((C13256 * C1213 - C13339 * C1155 + C13257 * C3441 - C13340 * C3348 +
             C82893 * C3442 - C13341 * C3345) *
                C15405 +
            (C13256 * C1218 - C13339 * C1165 + C13257 * C3447 - C13340 * C3360 +
             C82893 * C3448 - C13341 * C3354) *
                C82523) *
               C82918 +
           ((C13256 * C4198 - C13339 * C4108 + C13257 * C5060 - C13340 * C4976 +
             C82893 * C16827 - C13341 * C16745) *
                C15405 +
            (C13256 * C4202 - C13339 * C4113 + C13257 * C5063 - C13340 * C4982 +
             C82893 * C16829 - C13341 * C16748) *
                C82523) *
               C82896) *
              C82938 * C688 +
          (((C13339 * C695 - C13256 * C753 + C13340 * C1653 - C13257 * C1746 +
             C13341 * C2527 - C82893 * C2653) *
                C15405 +
            (C13339 * C705 - C13256 * C758 + C13340 * C1658 - C13257 * C1750 +
             C13341 * C2533 - C82893 * C2656) *
                C82523) *
               C82932 +
           ((C13339 * C3348 - C13256 * C3441 + C13340 * C3345 - C13257 * C3442 +
             C13341 * C16304 - C82893 * C16353) *
                C15405 +
            (C13339 * C3360 - C13256 * C3447 + C13340 * C3354 - C13257 * C3448 +
             C13341 * C16308 - C82893 * C16355) *
                C82523) *
               C82918 +
           ((C13339 * C4976 - C13256 * C5060 + C13340 * C16745 -
             C13257 * C16827 + C13341 * C17443 - C82893 * C17555) *
                C15405 +
            (C13339 * C4982 - C13256 * C5063 + C13340 * C16748 -
             C13257 * C16829 + C13341 * C17445 - C82893 * C17556) *
                C82523) *
               C82896) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C13259 +
            (C82581 * C175 - C168 * C109) * C82925 + (C182 - C183) * C13261 +
            (C184 - C185) * C82909 + (C186 - C187) * C13263 +
            (C188 - C189) * C82885) *
               C25720 +
           ((C5823 - C5824) * C13259 + (C5825 - C5826) * C82925 +
            (C4207 - C4208) * C13261 + (C4209 - C4210) * C82909 +
            (C4211 - C4212) * C13263 + (C4213 - C4214) * C82885) *
               C25721 +
           ((C5827 - C5828) * C13259 + (C5829 - C5830) * C82925 +
            (C4215 - C4216) * C13261 + (C4217 - C4218) * C82909 +
            (C4219 - C4220) * C13263 + (C4221 - C4222) * C82885) *
               C82896) *
              C82938 * C688 +
          (((C168 * C695 - C82581 * C753) * C13259 +
            (C168 * C705 - C82581 * C758) * C82925 +
            (C168 * C694 - C82581 * C754) * C13261 +
            (C168 * C703 - C82581 * C759) * C82909 +
            (C168 * C693 - C82581 * C755) * C13263 +
            (C168 * C701 - C82581 * C760) * C82885) *
               C25720 +
           ((C168 * C3348 - C82581 * C3441) * C13259 +
            (C168 * C3360 - C82581 * C3447) * C82925 +
            (C168 * C3347 - C82581 * C3443) * C13261 +
            (C168 * C3358 - C82581 * C3449) * C82909 +
            (C168 * C3346 - C82581 * C3445) * C13263 +
            (C168 * C3356 - C82581 * C3451) * C82885) *
               C25721 +
           ((C168 * C4976 - C82581 * C5060) * C13259 +
            (C168 * C4982 - C82581 * C5063) * C82925 +
            (C168 * C4975 - C82581 * C5061) * C13261 +
            (C168 * C4980 - C82581 * C5064) * C82909 +
            (C168 * C4974 - C82581 * C5062) * C13263 +
            (C168 * C4978 - C82581 * C5065) * C82885) *
               C82896) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
             C82893 * C1746 - C1745 * C1653) *
                C15405 +
            (C82931 * C175 - C1743 * C109 + C82916 * C758 - C1744 * C705 +
             C82893 * C1750 - C1745 * C1658) *
                C82523) *
               C25720 +
           ((C82931 * C1213 - C1743 * C1155 + C82916 * C3441 - C1744 * C3348 +
             C82893 * C3442 - C1745 * C3345) *
                C15405 +
            (C82931 * C1218 - C1743 * C1165 + C82916 * C3447 - C1744 * C3360 +
             C82893 * C3448 - C1745 * C3354) *
                C82523) *
               C25721 +
           ((C82931 * C4198 - C1743 * C4108 + C82916 * C5060 - C1744 * C4976 +
             C82893 * C16827 - C1745 * C16745) *
                C15405 +
            (C82931 * C4202 - C1743 * C4113 + C82916 * C5063 - C1744 * C4982 +
             C82893 * C16829 - C1745 * C16748) *
                C82523) *
               C82896) *
              C82938 * C688 +
          (((C1743 * C695 - C82931 * C753 + C1744 * C1653 - C82916 * C1746 +
             C1745 * C2527 - C82893 * C2653) *
                C15405 +
            (C1743 * C705 - C82931 * C758 + C1744 * C1658 - C82916 * C1750 +
             C1745 * C2533 - C82893 * C2656) *
                C82523) *
               C25720 +
           ((C1743 * C3348 - C82931 * C3441 + C1744 * C3345 - C82916 * C3442 +
             C1745 * C16304 - C82893 * C16353) *
                C15405 +
            (C1743 * C3360 - C82931 * C3447 + C1744 * C3354 - C82916 * C3448 +
             C1745 * C16308 - C82893 * C16355) *
                C82523) *
               C25721 +
           ((C1743 * C4976 - C82931 * C5060 + C1744 * C16745 - C82916 * C16827 +
             C1745 * C17443 - C82893 * C17555) *
                C15405 +
            (C1743 * C4982 - C82931 * C5063 + C1744 * C16748 - C82916 * C16829 +
             C1745 * C17445 - C82893 * C17556) *
                C82523) *
               C82896) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C15405 +
            (C82581 * C175 - C168 * C109) * C82523) *
               C30017 +
           ((C5823 - C5824) * C15405 + (C5825 - C5826) * C82523) * C30018 +
           ((C5827 - C5828) * C15405 + (C5829 - C5830) * C82523) * C30019 +
           ((C82581 * C5816 - C168 * C5690) * C15405 +
            (C82581 * C5819 - C168 * C5696) * C82523) *
               C30020 +
           ((C82581 * C30072 - C168 * C30022) * C15405 +
            (C82581 * C30074 - C168 * C30025) * C82523) *
               C30021) *
              C82938 * C688 +
          (((C168 * C695 - C82581 * C753) * C15405 +
            (C168 * C705 - C82581 * C758) * C82523) *
               C30017 +
           ((C168 * C3348 - C82581 * C3441) * C15405 +
            (C168 * C3360 - C82581 * C3447) * C82523) *
               C30018 +
           ((C168 * C4976 - C82581 * C5060) * C15405 +
            (C168 * C4982 - C82581 * C5063) * C82523) *
               C30019 +
           ((C168 * C18262 - C82581 * C18357) * C15405 +
            (C168 * C18266 - C82581 * C18359) * C82523) *
               C30020 +
           ((C168 * C30442 - C82581 * C30488) * C15405 +
            (C168 * C30444 - C82581 * C30489) * C82523) *
               C30021) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C82592 * C240 - C239 * C102) * C92 +
               (C82592 * C246 - C239 * C109) * C81 + (C253 - C254) * C94 +
               (C255 - C256) * C82 + (C257 - C258) * C96 + (C259 - C260) * C83 +
               (C261 - C262) * C98 + (C263 - C264) * C84 +
               (C265 - C266) * C100 + (C267 - C268) * C85) *
                  C82581 * C82938 * C688 +
              ((C239 * C695 - C82592 * C805) * C92 +
               (C239 * C705 - C82592 * C810) * C81 +
               (C239 * C694 - C82592 * C806) * C94 +
               (C239 * C703 - C82592 * C811) * C82 +
               (C239 * C693 - C82592 * C807) * C96 +
               (C239 * C701 - C82592 * C812) * C83 +
               (C239 * C692 - C82592 * C808) * C98 +
               (C239 * C699 - C82592 * C813) * C84 +
               (C239 * C691 - C82592 * C809) * C100 +
               (C239 * C697 - C82592 * C814) * C85) *
                  C82581 * C82938 * C689) *
             C82940 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C82592 * C240 - C239 * C102) * C1647 +
                (C82592 * C246 - C239 * C109) * C1641 + (C253 - C254) * C1649 +
                (C255 - C256) * C1642 + (C257 - C258) * C1651 +
                (C259 - C260) * C82885) *
                   C82931 +
               ((C2740 - C2741) * C1647 + (C2742 - C2743) * C1641 +
                (C1861 - C1862) * C1649 + (C1863 - C1864) * C1642 +
                (C1865 - C1866) * C1651 + (C1867 - C1868) * C82885) *
                   C82916 +
               ((C2744 - C2745) * C1647 + (C2746 - C2747) * C1641 +
                (C1869 - C1870) * C1649 + (C1871 - C1872) * C1642 +
                (C1873 - C1874) * C1651 + (C1875 - C1876) * C82885) *
                   C82893) *
                  C82938 * C688 +
              (((C2741 - C2740) * C1647 + (C2743 - C2742) * C1641 +
                (C1862 - C1861) * C1649 + (C1864 - C1863) * C1642 +
                (C1866 - C1865) * C1651 + (C1868 - C1867) * C82885) *
                   C82931 +
               ((C2745 - C2744) * C1647 + (C2747 - C2746) * C1641 +
                (C1870 - C1869) * C1649 + (C1872 - C1871) * C1642 +
                (C1874 - C1873) * C1651 + (C1876 - C1875) * C82885) *
                   C82916 +
               ((C239 * C2527 - C82592 * C2733) * C1647 +
                (C239 * C2533 - C82592 * C2736) * C1641 +
                (C239 * C2526 - C82592 * C2734) * C1649 +
                (C239 * C2531 - C82592 * C2737) * C1642 +
                (C239 * C2525 - C82592 * C2735) * C1651 +
                (C239 * C2529 - C82592 * C2738) * C82885) *
                   C82893) *
                  C82938 * C689) *
             C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
            C82896 * C4299 - C4298 * C4108) *
               C1647 +
           (C82932 * C246 - C4296 * C109 + C82918 * C1270 - C4297 * C1165 +
            C82896 * C4303 - C4298 * C4113) *
               C1641 +
           (C4308 - C4309 + C4310 - C4311 + C4312 - C4313) * C1649 +
           (C4314 - C4315 + C4316 - C4317 + C4318 - C4319) * C1642 +
           (C4320 - C4321 + C4322 - C4323 + C4324 - C4325) * C1651 +
           (C4326 - C4327 + C4328 - C4329 + C4330 - C4331) * C82885) *
              C82581 * C82938 * C688 +
          ((C4296 * C695 - C82932 * C805 + C4297 * C3348 - C82918 * C3527 +
            C4298 * C4976 - C82896 * C5140) *
               C1647 +
           (C4296 * C705 - C82932 * C810 + C4297 * C3360 - C82918 * C3533 +
            C4298 * C4982 - C82896 * C5143) *
               C1641 +
           (C4296 * C694 - C82932 * C806 + C4297 * C3347 - C82918 * C3528 +
            C4298 * C4975 - C82896 * C5141) *
               C1649 +
           (C4296 * C703 - C82932 * C811 + C4297 * C3358 - C82918 * C3534 +
            C4298 * C4980 - C82896 * C5144) *
               C1642 +
           (C4296 * C693 - C82932 * C807 + C4297 * C3346 - C82918 * C3529 +
            C4298 * C4974 - C82896 * C5142) *
               C1651 +
           (C4296 * C701 - C82932 * C812 + C4297 * C3356 - C82918 * C3535 +
            C4298 * C4978 - C82896 * C5145) *
               C82885) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C13259 +
            (C82592 * C246 - C239 * C109) * C82925 + (C253 - C254) * C13261 +
            (C255 - C256) * C82909 + (C257 - C258) * C13263 +
            (C259 - C260) * C82885) *
               C13256 +
           ((C2740 - C2741) * C13259 + (C2742 - C2743) * C82925 +
            (C1861 - C1862) * C13261 + (C1863 - C1864) * C82909 +
            (C1865 - C1866) * C13263 + (C1867 - C1868) * C82885) *
               C13257 +
           ((C2744 - C2745) * C13259 + (C2746 - C2747) * C82925 +
            (C1869 - C1870) * C13261 + (C1871 - C1872) * C82909 +
            (C1873 - C1874) * C13263 + (C1875 - C1876) * C82885) *
               C82893) *
              C82938 * C688 +
          (((C2741 - C2740) * C13259 + (C2743 - C2742) * C82925 +
            (C1862 - C1861) * C13261 + (C1864 - C1863) * C82909 +
            (C1866 - C1865) * C13263 + (C1868 - C1867) * C82885) *
               C13256 +
           ((C2745 - C2744) * C13259 + (C2747 - C2746) * C82925 +
            (C1870 - C1869) * C13261 + (C1872 - C1871) * C82909 +
            (C1874 - C1873) * C13263 + (C1876 - C1875) * C82885) *
               C13257 +
           ((C239 * C2527 - C82592 * C2733) * C13259 +
            (C239 * C2533 - C82592 * C2736) * C82925 +
            (C239 * C2526 - C82592 * C2734) * C13261 +
            (C239 * C2531 - C82592 * C2737) * C82909 +
            (C239 * C2525 - C82592 * C2735) * C13263 +
            (C239 * C2529 - C82592 * C2738) * C82885) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C15405 +
            (C82592 * C246 - C239 * C109) * C82523) *
               C15400 +
           ((C2740 - C2741) * C15405 + (C2742 - C2743) * C82523) * C15401 +
           ((C2744 - C2745) * C15405 + (C2746 - C2747) * C82523) * C15402 +
           ((C15952 - C15953) * C15405 + (C15954 - C15955) * C82523) * C15403 +
           ((C15956 - C15957) * C15405 + (C15958 - C15959) * C82523) * C15404) *
              C82938 * C688 +
          (((C2741 - C2740) * C15405 + (C2743 - C2742) * C82523) * C15400 +
           ((C2745 - C2744) * C15405 + (C2747 - C2746) * C82523) * C15401 +
           ((C15953 - C15952) * C15405 + (C15955 - C15954) * C82523) * C15402 +
           ((C15957 - C15956) * C15405 + (C15959 - C15958) * C82523) * C15403 +
           ((C239 * C15827 - C82592 * C15949) * C15405 +
            (C239 * C15829 - C82592 * C15950) * C82523) *
               C15404) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
             C82896 * C4299 - C4298 * C4108) *
                C15405 +
            (C82932 * C246 - C4296 * C109 + C82918 * C1270 - C4297 * C1165 +
             C82896 * C4303 - C4298 * C4113) *
                C82523) *
               C13256 +
           ((C17634 - C17635 + C17636 - C17637 + C17638 - C17639) * C15405 +
            (C17640 - C17641 + C17642 - C17643 + C17644 - C17645) * C82523) *
               C13257 +
           ((C17646 - C17647 + C17648 - C17649 + C17650 - C17651) * C15405 +
            (C17652 - C17653 + C17654 - C17655 + C17656 - C17657) * C82523) *
               C82893) *
              C82938 * C688 +
          (((C17635 - C17634 + C17637 - C17636 + C17639 - C17638) * C15405 +
            (C17641 - C17640 + C17643 - C17642 + C17645 - C17644) * C82523) *
               C13256 +
           ((C17647 - C17646 + C17649 - C17648 + C17651 - C17650) * C15405 +
            (C17653 - C17652 + C17655 - C17654 + C17657 - C17656) * C82523) *
               C13257 +
           ((C4296 * C2527 - C82932 * C2733 + C4297 * C16304 - C82918 * C16399 +
             C4298 * C17443 - C82896 * C17631) *
                C15405 +
            (C4296 * C2533 - C82932 * C2736 + C4297 * C16308 - C82918 * C16401 +
             C4298 * C17445 - C82896 * C17632) *
                C82523) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
            C82896 * C4299 - C25873 * C4108) *
               C13259 +
           (C25720 * C246 - C25871 * C109 + C25721 * C1270 - C25872 * C1165 +
            C82896 * C4303 - C25873 * C4113) *
               C82925 +
           (C25875 - C25876 + C25877 - C25878 + C25879 - C25880) * C13261 +
           (C25881 - C25882 + C25883 - C25884 + C25885 - C25886) * C82909 +
           (C25887 - C25888 + C25889 - C25890 + C25891 - C25892) * C13263 +
           (C25893 - C25894 + C25895 - C25896 + C25897 - C25898) * C82885) *
              C82581 * C82938 * C688 +
          ((C25871 * C695 - C25720 * C805 + C25872 * C3348 - C25721 * C3527 +
            C25873 * C4976 - C82896 * C5140) *
               C13259 +
           (C25871 * C705 - C25720 * C810 + C25872 * C3360 - C25721 * C3533 +
            C25873 * C4982 - C82896 * C5143) *
               C82925 +
           (C25871 * C694 - C25720 * C806 + C25872 * C3347 - C25721 * C3528 +
            C25873 * C4975 - C82896 * C5141) *
               C13261 +
           (C25871 * C703 - C25720 * C811 + C25872 * C3358 - C25721 * C3534 +
            C25873 * C4980 - C82896 * C5144) *
               C82909 +
           (C25871 * C693 - C25720 * C807 + C25872 * C3346 - C25721 * C3529 +
            C25873 * C4974 - C82896 * C5142) *
               C13263 +
           (C25871 * C701 - C25720 * C812 + C25872 * C3356 - C25721 * C3535 +
            C25873 * C4978 - C82896 * C5145) *
               C82885) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
             C82896 * C4299 - C25873 * C4108) *
                C15405 +
            (C25720 * C246 - C25871 * C109 + C25721 * C1270 - C25872 * C1165 +
             C82896 * C4303 - C25873 * C4113) *
                C82523) *
               C82931 +
           ((C28710 - C28711 + C28712 - C28713 + C28714 - C28715) * C15405 +
            (C28716 - C28717 + C28718 - C28719 + C28720 - C28721) * C82523) *
               C82916 +
           ((C28722 - C28723 + C28724 - C28725 + C28726 - C28727) * C15405 +
            (C28728 - C28729 + C28730 - C28731 + C28732 - C28733) * C82523) *
               C82893) *
              C82938 * C688 +
          (((C28711 - C28710 + C28713 - C28712 + C28715 - C28714) * C15405 +
            (C28717 - C28716 + C28719 - C28718 + C28721 - C28720) * C82523) *
               C82931 +
           ((C28723 - C28722 + C28725 - C28724 + C28727 - C28726) * C15405 +
            (C28729 - C28728 + C28731 - C28730 + C28733 - C28732) * C82523) *
               C82916 +
           ((C25871 * C2527 - C25720 * C2733 + C25872 * C16304 -
             C25721 * C16399 + C25873 * C17443 - C82896 * C17631) *
                C15405 +
            (C25871 * C2533 - C25720 * C2736 + C25872 * C16308 -
             C25721 * C16401 + C25873 * C17445 - C82896 * C17632) *
                C82523) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C30017 * C240 - C30118 * C102 + C30018 * C1265 - C30119 * C1155 +
            C30019 * C4299 - C30120 * C4108 + C30020 * C5904 - C30121 * C5690 +
            C30021 * C30123 - C30122 * C30022) *
               C15405 +
           (C30017 * C246 - C30118 * C109 + C30018 * C1270 - C30119 * C1165 +
            C30019 * C4303 - C30120 * C4113 + C30020 * C5907 - C30121 * C5696 +
            C30021 * C30125 - C30122 * C30025) *
               C82523) *
              C82581 * C82938 * C688 +
          ((C30118 * C695 - C30017 * C805 + C30119 * C3348 - C30018 * C3527 +
            C30120 * C4976 - C30019 * C5140 + C30121 * C18262 -
            C30020 * C18459 + C30122 * C30442 - C30021 * C30532) *
               C15405 +
           (C30118 * C705 - C30017 * C810 + C30119 * C3360 - C30018 * C3533 +
            C30120 * C4982 - C30019 * C5143 + C30121 * C18266 -
            C30020 * C18461 + C30122 * C30444 - C30021 * C30533) *
               C82523) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C81 * C108 - C92 * C102 + C82 * C110 - C94 * C103 + C83 * C112 -
                C96 * C104 + C84 * C114 - C98 * C105 + C85 * C116 -
                C100 * C106) *
                   C168 +
               (C81 * C316 - C92 * C310 + C82 * C317 - C94 * C311 + C83 * C318 -
                C96 * C312 + C84 * C319 - C98 * C313 + C85 * C320 -
                C100 * C314) *
                   C82581) *
                  C82592 * C82938 * C688 +
              ((C92 * C695 - C81 * C704 + C94 * C694 - C82 * C702 + C96 * C693 -
                C83 * C700 + C98 * C692 - C84 * C698 + C100 * C691 -
                C85 * C696) *
                   C168 +
               (C92 * C857 - C81 * C862 + C94 * C858 - C82 * C863 + C96 * C859 -
                C83 * C864 + C98 * C860 - C84 * C865 + C100 * C861 -
                C85 * C866) *
                   C82581) *
                  C82592 * C82938 * C689) *
             C82940 +
         0.5 * std::pow(Pi, 2.5) *
             (((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
                C82885 * C112 - C1651 * C104) *
                   C1743 +
               (C1641 * C316 - C1647 * C310 + C1642 * C317 - C1649 * C311 +
                C82885 * C318 - C1651 * C312) *
                   C82931 +
               (C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C1744 +
               (C2834 - C2835 + C2836 - C2837 + C2838 - C2839) * C82916 +
               (C2840 - C2841 + C2842 - C2843 + C2844 - C2845) * C1745 +
               (C2846 - C2847 + C2848 - C2849 + C2850 - C2851) * C82893) *
                  C82592 * C82938 * C688 +
              ((C2829 - C2828 + C2831 - C2830 + C2833 - C2832) * C1743 +
               (C2835 - C2834 + C2837 - C2836 + C2839 - C2838) * C82931 +
               (C2841 - C2840 + C2843 - C2842 + C2845 - C2844) * C1744 +
               (C2847 - C2846 + C2849 - C2848 + C2851 - C2850) * C82916 +
               (C1647 * C2527 - C1641 * C2532 + C1649 * C2526 - C1642 * C2530 +
                C1651 * C2525 - C82885 * C2528) *
                   C1745 +
               (C1647 * C2821 - C1641 * C2824 + C1649 * C2822 - C1642 * C2825 +
                C1651 * C2823 - C82885 * C2826) *
                   C82893) *
                  C82592 * C82938 * C689) *
             C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
             C82885 * C112 - C1651 * C104) *
                C168 +
            (C1641 * C316 - C1647 * C310 + C1642 * C317 - C1649 * C311 +
             C82885 * C318 - C1651 * C312) *
                C82581) *
               C82932 +
           ((C1641 * C1164 - C1647 * C1155 + C1642 * C1162 - C1649 * C1154 +
             C82885 * C1160 - C1651 * C1153) *
                C168 +
            (C1641 * C1322 - C1647 * C1317 + C1642 * C1323 - C1649 * C1318 +
             C82885 * C1324 - C1651 * C1319) *
                C82581) *
               C82918 +
           ((C1641 * C4112 - C1647 * C4108 + C1642 * C4114 - C1649 * C4109 +
             C82885 * C4116 - C1651 * C4110) *
                C168 +
            (C1641 * C4409 - C1647 * C4405 + C1642 * C4410 - C1649 * C4406 +
             C82885 * C4411 - C1651 * C4407) *
                C82581) *
               C82896) *
              C82938 * C688 +
          (((C2829 - C2828 + C2831 - C2830 + C2833 - C2832) * C168 +
            (C2835 - C2834 + C2837 - C2836 + C2839 - C2838) * C82581) *
               C82932 +
           ((C1647 * C3348 - C1641 * C3359 + C1649 * C3347 - C1642 * C3357 +
             C1651 * C3346 - C82885 * C3355) *
                C168 +
            (C1647 * C3613 - C1641 * C3619 + C1649 * C3614 - C1642 * C3620 +
             C1651 * C3615 - C82885 * C3621) *
                C82581) *
               C82918 +
           ((C1647 * C4976 - C1641 * C4981 + C1649 * C4975 - C1642 * C4979 +
             C1651 * C4974 - C82885 * C4977) *
                C168 +
            (C1647 * C5220 - C1641 * C5223 + C1649 * C5221 - C1642 * C5224 +
             C1651 * C5222 - C82885 * C5225) *
                C82581) *
               C82896) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
            C82885 * C112 - C13263 * C104) *
               C13339 +
           (C82925 * C316 - C13259 * C310 + C82909 * C317 - C13261 * C311 +
            C82885 * C318 - C13263 * C312) *
               C13256 +
           (C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C13340 +
           (C14292 - C14293 + C14294 - C14295 + C14296 - C14297) * C13257 +
           (C14298 - C14299 + C14300 - C14301 + C14302 - C14303) * C13341 +
           (C14304 - C14305 + C14306 - C14307 + C14308 - C14309) * C82893) *
              C82592 * C82938 * C688 +
          ((C14287 - C14286 + C14289 - C14288 + C14291 - C14290) * C13339 +
           (C14293 - C14292 + C14295 - C14294 + C14297 - C14296) * C13256 +
           (C14299 - C14298 + C14301 - C14300 + C14303 - C14302) * C13340 +
           (C14305 - C14304 + C14307 - C14306 + C14309 - C14308) * C13257 +
           (C13259 * C2527 - C82925 * C2532 + C13261 * C2526 - C82909 * C2530 +
            C13263 * C2525 - C82885 * C2528) *
               C13341 +
           (C13259 * C2821 - C82925 * C2824 + C13261 * C2822 - C82909 * C2825 +
            C13263 * C2823 - C82885 * C2826) *
               C82893) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C82523 * C108 - C15405 * C102) * C15457 +
           (C82523 * C316 - C15405 * C310) * C15400 +
           (C16004 - C16005) * C15458 + (C16006 - C16007) * C15401 +
           (C16008 - C16009) * C15459 + (C16010 - C16011) * C15402 +
           (C16012 - C16013) * C15460 + (C16014 - C16015) * C15403 +
           (C16016 - C16017) * C15461 + (C16018 - C16019) * C15404) *
              C82592 * C82938 * C688 +
          ((C16005 - C16004) * C15457 + (C16007 - C16006) * C15400 +
           (C16009 - C16008) * C15458 + (C16011 - C16010) * C15401 +
           (C16013 - C16012) * C15459 + (C16015 - C16014) * C15402 +
           (C16017 - C16016) * C15460 + (C16019 - C16018) * C15403 +
           (C15405 * C15827 - C82523 * C15828) * C15461 +
           (C15405 * C16001 - C82523 * C16002) * C15404) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C13339 +
            (C82523 * C316 - C15405 * C310) * C13256 +
            (C16004 - C16005) * C13340 + (C16006 - C16007) * C13257 +
            (C16008 - C16009) * C13341 + (C16010 - C16011) * C82893) *
               C82932 +
           ((C82523 * C1164 - C15405 * C1155) * C13339 +
            (C82523 * C1322 - C15405 * C1317) * C13256 +
            (C17734 - C17735) * C13340 + (C17736 - C17737) * C13257 +
            (C17738 - C17739) * C13341 + (C17740 - C17741) * C82893) *
               C82918 +
           ((C82523 * C4112 - C15405 * C4108) * C13339 +
            (C82523 * C4409 - C15405 * C4405) * C13256 +
            (C17742 - C17743) * C13340 + (C17744 - C17745) * C13257 +
            (C17746 - C17747) * C13341 + (C17748 - C17749) * C82893) *
               C82896) *
              C82938 * C688 +
          (((C16005 - C16004) * C13339 + (C16007 - C16006) * C13256 +
            (C16009 - C16008) * C13340 + (C16011 - C16010) * C13257 +
            (C16013 - C16012) * C13341 + (C16015 - C16014) * C82893) *
               C82932 +
           ((C17735 - C17734) * C13339 + (C17737 - C17736) * C13256 +
            (C17739 - C17738) * C13340 + (C17741 - C17740) * C13257 +
            (C15405 * C16304 - C82523 * C16307) * C13341 +
            (C15405 * C16445 - C82523 * C16447) * C82893) *
               C82918 +
           ((C17743 - C17742) * C13339 + (C17745 - C17744) * C13256 +
            (C17747 - C17746) * C13340 + (C17749 - C17748) * C13257 +
            (C15405 * C17443 - C82523 * C17444) * C13341 +
            (C15405 * C17731 - C82523 * C17732) * C82893) *
               C82896) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C168 +
            (C82925 * C316 - C13259 * C310 + C82909 * C317 - C13261 * C311 +
             C82885 * C318 - C13263 * C312) *
                C82581) *
               C25720 +
           ((C82925 * C1164 - C13259 * C1155 + C82909 * C1162 - C13261 * C1154 +
             C82885 * C1160 - C13263 * C1153) *
                C168 +
            (C82925 * C1322 - C13259 * C1317 + C82909 * C1323 - C13261 * C1318 +
             C82885 * C1324 - C13263 * C1319) *
                C82581) *
               C25721 +
           ((C82925 * C4112 - C13259 * C4108 + C82909 * C4114 - C13261 * C4109 +
             C82885 * C4116 - C13263 * C4110) *
                C168 +
            (C82925 * C4409 - C13259 * C4405 + C82909 * C4410 - C13261 * C4406 +
             C82885 * C4411 - C13263 * C4407) *
                C82581) *
               C82896) *
              C82938 * C688 +
          (((C14287 - C14286 + C14289 - C14288 + C14291 - C14290) * C168 +
            (C14293 - C14292 + C14295 - C14294 + C14297 - C14296) * C82581) *
               C25720 +
           ((C13259 * C3348 - C82925 * C3359 + C13261 * C3347 - C82909 * C3357 +
             C13263 * C3346 - C82885 * C3355) *
                C168 +
            (C13259 * C3613 - C82925 * C3619 + C13261 * C3614 - C82909 * C3620 +
             C13263 * C3615 - C82885 * C3621) *
                C82581) *
               C25721 +
           ((C13259 * C4976 - C82925 * C4981 + C13261 * C4975 - C82909 * C4979 +
             C13263 * C4974 - C82885 * C4977) *
                C168 +
            (C13259 * C5220 - C82925 * C5223 + C13261 * C5221 - C82909 * C5224 +
             C13263 * C5222 - C82885 * C5225) *
                C82581) *
               C82896) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C1743 +
            (C82523 * C316 - C15405 * C310) * C82931 +
            (C16004 - C16005) * C1744 + (C16006 - C16007) * C82916 +
            (C16008 - C16009) * C1745 + (C16010 - C16011) * C82893) *
               C25720 +
           ((C18542 - C18543) * C1743 + (C18544 - C18545) * C82931 +
            (C17734 - C17735) * C1744 + (C17736 - C17737) * C82916 +
            (C17738 - C17739) * C1745 + (C17740 - C17741) * C82893) *
               C25721 +
           ((C18546 - C18547) * C1743 + (C18548 - C18549) * C82931 +
            (C17742 - C17743) * C1744 + (C17744 - C17745) * C82916 +
            (C17746 - C17747) * C1745 + (C17748 - C17749) * C82893) *
               C82896) *
              C82938 * C688 +
          (((C16005 - C16004) * C1743 + (C16007 - C16006) * C82931 +
            (C16009 - C16008) * C1744 + (C16011 - C16010) * C82916 +
            (C16013 - C16012) * C1745 + (C16015 - C16014) * C82893) *
               C25720 +
           ((C17735 - C17734) * C1743 + (C17737 - C17736) * C82931 +
            (C17739 - C17738) * C1744 + (C17741 - C17740) * C82916 +
            (C24648 - C24647) * C1745 + (C24650 - C24649) * C82893) *
               C25721 +
           ((C17743 - C17742) * C1743 + (C17745 - C17744) * C82931 +
            (C17747 - C17746) * C1744 + (C17749 - C17748) * C82916 +
            (C15405 * C17443 - C82523 * C17444) * C1745 +
            (C15405 * C17731 - C82523 * C17732) * C82893) *
               C82896) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C168 +
            (C82523 * C316 - C15405 * C310) * C82581) *
               C30017 +
           ((C18542 - C18543) * C168 + (C18544 - C18545) * C82581) * C30018 +
           ((C18546 - C18547) * C168 + (C18548 - C18549) * C82581) * C30019 +
           ((C82523 * C5695 - C15405 * C5690) * C168 +
            (C82523 * C5987 - C15405 * C5984) * C82581) *
               C30020 +
           ((C82523 * C30024 - C15405 * C30022) * C168 +
            (C82523 * C30171 - C15405 * C30169) * C82581) *
               C30021) *
              C82938 * C688 +
          (((C16005 - C16004) * C168 + (C16007 - C16006) * C82581) * C30017 +
           ((C17735 - C17734) * C168 + (C17737 - C17736) * C82581) * C30018 +
           ((C17743 - C17742) * C168 + (C17745 - C17744) * C82581) * C30019 +
           ((C15405 * C18262 - C82523 * C18265) * C168 +
            (C15405 * C18537 - C82523 * C18539) * C82581) *
               C30020 +
           ((C15405 * C30442 - C82523 * C30443) * C168 +
            (C15405 * C30576 - C82523 * C30577) * C82581) *
               C30021) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C81 +
               C396 * C82 + C397 * C83 + C398 * C84 + C399 * C85) *
                  C82592 * C82938 * C688 -
              ((C168 * C757 - C364 * C691 - C168 * C861 + C82581 * C909) * C85 +
               (C168 * C756 - C364 * C692 - C168 * C860 + C82581 * C910) * C84 +
               (C168 * C755 - C364 * C693 - C168 * C859 + C82581 * C911) * C83 +
               (C168 * C754 - C364 * C694 - C168 * C858 + C82581 * C912) * C82 +
               (C168 * C753 - C364 * C695 - C168 * C857 + C82581 * C913) *
                   C81) *
                  C82592 * C82938 * C689) *
             C82940 +
         0.5 * std::pow(Pi, 2.5) *
             (((C1743 * C169 - C2032 * C102 - C1743 * C310 + C82931 * C365 +
                C1744 * C753 - C2033 * C695 - C1744 * C857 + C82916 * C913 +
                C1745 * C1746 - C2034 * C1653 - C1745 * C1950 +
                C82893 * C2035) *
                   C1641 +
               (C2076 + C2077 + C2078) * C1642 +
               (C2079 + C2080 + C2081) * C82885) *
                  C82592 * C82938 * C688 -
              ((C1745 * C2655 - C2034 * C2525 - C1745 * C2823 + C82893 * C2925 +
                C1744 * C1748 - C2033 * C1655 - C1744 * C1952 + C82916 * C2037 +
                C1743 * C755 - C2032 * C693 - C1743 * C859 + C82931 * C911) *
                   C82885 +
               (C1745 * C2654 - C2034 * C2526 - C1745 * C2822 + C82893 * C2926 +
                C1744 * C1747 - C2033 * C1654 - C1744 * C1951 + C82916 * C2036 +
                C1743 * C754 - C2032 * C694 - C1743 * C858 + C82931 * C912) *
                   C1642 +
               (C1745 * C2653 - C2034 * C2527 - C1745 * C2821 + C82893 * C2927 +
                C1744 * C1746 - C2033 * C1653 - C1744 * C1950 + C82916 * C2035 +
                C1743 * C753 - C2032 * C695 - C1743 * C857 + C82931 * C913) *
                   C1641) *
                  C82592 * C82938 * C689) *
             C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C1641 +
            C396 * C1642 + C397 * C82885) *
               C82932 +
           ((C168 * C1213 - C364 * C1155 - C168 * C1317 + C82581 * C1373) *
                C1641 +
            C4516 * C1642 + C4517 * C82885) *
               C82918 +
           ((C168 * C4198 - C364 * C4108 - C168 * C4405 + C82581 * C4487) *
                C1641 +
            C4518 * C1642 + C4519 * C82885) *
               C82896) *
              C82938 * C688 -
          (((C168 * C5062 - C364 * C4974 - C168 * C5222 + C82581 * C5300) *
                C82885 +
            (C168 * C5061 - C364 * C4975 - C168 * C5221 + C82581 * C5301) *
                C1642 +
            (C168 * C5060 - C364 * C4976 - C168 * C5220 + C82581 * C5302) *
                C1641) *
               C82896 +
           ((C168 * C3445 - C364 * C3346 - C168 * C3615 + C82581 * C3700) *
                C82885 +
            (C168 * C3443 - C364 * C3347 - C168 * C3614 + C82581 * C3702) *
                C1642 +
            (C168 * C3441 - C364 * C3348 - C168 * C3613 + C82581 * C3704) *
                C1641) *
               C82918 +
           ((C168 * C755 - C364 * C693 - C168 * C859 + C82581 * C911) * C82885 +
            (C168 * C754 - C364 * C694 - C168 * C858 + C82581 * C912) * C1642 +
            (C168 * C753 - C364 * C695 - C168 * C857 + C82581 * C913) * C1641) *
               C82932) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13339 * C169 - C13588 * C102 - C13339 * C310 + C13256 * C365 +
            C13340 * C753 - C13589 * C695 - C13340 * C857 + C13257 * C913 +
            C13341 * C1746 - C13590 * C1653 - C13341 * C1950 + C82893 * C2035) *
               C82925 +
           (C13628 + C13629 + C13630) * C82909 +
           (C13631 + C13632 + C13633) * C82885) *
              C82592 * C82938 * C688 -
          ((C13341 * C2655 - C13590 * C2525 - C13341 * C2823 + C82893 * C2925 +
            C13340 * C1748 - C13589 * C1655 - C13340 * C1952 + C13257 * C2037 +
            C13339 * C755 - C13588 * C693 - C13339 * C859 + C13256 * C911) *
               C82885 +
           (C13341 * C2654 - C13590 * C2526 - C13341 * C2822 + C82893 * C2926 +
            C13340 * C1747 - C13589 * C1654 - C13340 * C1951 + C13257 * C2036 +
            C13339 * C754 - C13588 * C694 - C13339 * C858 + C13256 * C912) *
               C82909 +
           (C13341 * C2653 - C13590 * C2527 - C13341 * C2821 + C82893 * C2927 +
            C13340 * C1746 - C13589 * C1653 - C13340 * C1950 + C13257 * C2035 +
            C13339 * C753 - C13588 * C695 - C13339 * C857 + C13256 * C913) *
               C82925) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C15457 * C169 - C15600 * C102 - C15457 * C310 + C15400 * C365 +
           C15458 * C753 - C15601 * C695 - C15458 * C857 + C15401 * C913 +
           C15459 * C1746 - C15602 * C1653 - C15459 * C1950 + C15402 * C2035 +
           C15460 * C2653 - C15603 * C2527 - C15460 * C2821 + C15403 * C2927 +
           C15461 * C15462 - C15604 * C15407 - C15461 * C15554 +
           C15404 * C15605) *
              C82523 * C82592 * C82938 * C688 -
          (C15461 * C15905 - C15604 * C15827 - C15461 * C16001 +
           C15404 * C16061 + C15460 * C15462 - C15603 * C15407 -
           C15460 * C15554 + C15403 * C15605 + C15459 * C2653 - C15602 * C2527 -
           C15459 * C2821 + C15402 * C2927 + C15458 * C1746 - C15601 * C1653 -
           C15458 * C1950 + C15401 * C2035 + C15457 * C753 - C15600 * C695 -
           C15457 * C857 + C15400 * C913) *
              C82523 * C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13339 * C169 - C13588 * C102 - C13339 * C310 + C13256 * C365 +
            C13340 * C753 - C13589 * C695 - C13340 * C857 + C13257 * C913 +
            C13341 * C1746 - C13590 * C1653 - C13341 * C1950 + C82893 * C2035) *
               C82523 * C82932 +
           (C13339 * C1213 - C13588 * C1155 - C13339 * C1317 + C13256 * C1373 +
            C13340 * C3441 - C13589 * C3348 - C13340 * C3613 + C13257 * C3704 +
            C13341 * C3442 - C13590 * C3345 - C13341 * C3616 + C82893 * C3703) *
               C82523 * C82918 +
           (C13339 * C4198 - C13588 * C4108 - C13339 * C4405 + C13256 * C4487 +
            C13340 * C5060 - C13589 * C4976 - C13340 * C5220 + C13257 * C5302 +
            C13341 * C16827 - C13590 * C16745 - C13341 * C16983 +
            C82893 * C17061) *
               C82523 * C82896) *
              C82938 * C688 -
          ((C13341 * C17555 - C13590 * C17443 - C13341 * C17731 +
            C82893 * C17823 + C13340 * C16827 - C13589 * C16745 -
            C13340 * C16983 + C13257 * C17061 + C13339 * C5060 -
            C13588 * C4976 - C13339 * C5220 + C13256 * C5302) *
               C82523 * C82896 +
           (C13341 * C16353 - C13590 * C16304 - C13341 * C16445 +
            C82893 * C16492 + C13340 * C3442 - C13589 * C3345 - C13340 * C3616 +
            C13257 * C3703 + C13339 * C3441 - C13588 * C3348 - C13339 * C3613 +
            C13256 * C3704) *
               C82523 * C82918 +
           (C13341 * C2653 - C13590 * C2527 - C13341 * C2821 + C82893 * C2927 +
            C13340 * C1746 - C13589 * C1653 - C13340 * C1950 + C13257 * C2035 +
            C13339 * C753 - C13588 * C695 - C13339 * C857 + C13256 * C913) *
               C82523 * C82932) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C82925 +
            C396 * C82909 + C397 * C82885) *
               C25720 +
           (C6108 * C82925 + C4516 * C82909 + C4517 * C82885) * C25721 +
           (C6109 * C82925 + C4518 * C82909 + C4519 * C82885) * C82896) *
              C82938 * C688 -
          (((C168 * C5062 - C364 * C4974 - C168 * C5222 + C82581 * C5300) *
                C82885 +
            (C168 * C5061 - C364 * C4975 - C168 * C5221 + C82581 * C5301) *
                C82909 +
            (C168 * C5060 - C364 * C4976 - C168 * C5220 + C82581 * C5302) *
                C82925) *
               C82896 +
           ((C168 * C3445 - C364 * C3346 - C168 * C3615 + C82581 * C3700) *
                C82885 +
            (C168 * C3443 - C364 * C3347 - C168 * C3614 + C82581 * C3702) *
                C82909 +
            (C168 * C3441 - C364 * C3348 - C168 * C3613 + C82581 * C3704) *
                C82925) *
               C25721 +
           ((C168 * C755 - C364 * C693 - C168 * C859 + C82581 * C911) * C82885 +
            (C168 * C754 - C364 * C694 - C168 * C858 + C82581 * C912) * C82909 +
            (C168 * C753 - C364 * C695 - C168 * C857 + C82581 * C913) *
                C82925) *
               C25720) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1743 * C169 - C2032 * C102 - C1743 * C310 + C82931 * C365 +
            C1744 * C753 - C2033 * C695 - C1744 * C857 + C82916 * C913 +
            C1745 * C1746 - C2034 * C1653 - C1745 * C1950 + C82893 * C2035) *
               C82523 * C25720 +
           (C1743 * C1213 - C2032 * C1155 - C1743 * C1317 + C82931 * C1373 +
            C1744 * C3441 - C2033 * C3348 - C1744 * C3613 + C82916 * C3704 +
            C1745 * C3442 - C2034 * C3345 - C1745 * C3616 + C82893 * C3703) *
               C82523 * C25721 +
           (C1743 * C4198 - C2032 * C4108 - C1743 * C4405 + C82931 * C4487 +
            C1744 * C5060 - C2033 * C4976 - C1744 * C5220 + C82916 * C5302 +
            C1745 * C16827 - C2034 * C16745 - C1745 * C16983 +
            C82893 * C17061) *
               C82523 * C82896) *
              C82938 * C688 -
          ((C1745 * C17555 - C2034 * C17443 - C1745 * C17731 + C82893 * C17823 +
            C1744 * C16827 - C2033 * C16745 - C1744 * C16983 + C82916 * C17061 +
            C1743 * C5060 - C2032 * C4976 - C1743 * C5220 + C82931 * C5302) *
               C82523 * C82896 +
           (C1745 * C16353 - C2034 * C16304 - C1745 * C16445 + C82893 * C16492 +
            C1744 * C3442 - C2033 * C3345 - C1744 * C3616 + C82916 * C3703 +
            C1743 * C3441 - C2032 * C3348 - C1743 * C3613 + C82931 * C3704) *
               C82523 * C25721 +
           (C1745 * C2653 - C2034 * C2527 - C1745 * C2821 + C82893 * C2927 +
            C1744 * C1746 - C2033 * C1653 - C1744 * C1950 + C82916 * C2035 +
            C1743 * C753 - C2032 * C695 - C1743 * C857 + C82931 * C913) *
               C82523 * C25720) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C82523 *
               C30017 +
           C6108 * C82523 * C30018 + C6109 * C82523 * C30019 +
           (C168 * C5816 - C364 * C5690 - C168 * C5984 + C82581 * C6090) *
               C82523 * C30020 +
           (C168 * C30072 - C364 * C30022 - C168 * C30169 + C82581 * C30215) *
               C82523 * C30021) *
              C82938 * C688 -
          ((C168 * C30488 - C364 * C30442 - C168 * C30576 + C82581 * C30620) *
               C82523 * C30021 +
           (C168 * C18357 - C364 * C18262 - C168 * C18537 + C82581 * C18624) *
               C82523 * C30020 +
           (C168 * C5060 - C364 * C4976 - C168 * C5220 + C82581 * C5302) *
               C82523 * C30019 +
           (C168 * C3441 - C364 * C3348 - C168 * C3613 + C82581 * C3704) *
               C82523 * C30018 +
           (C168 * C753 - C364 * C695 - C168 * C857 + C82581 * C913) * C82523 *
               C30017) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C82592 * C240 - C239 * C102) * C168 +
                (C82592 * C441 - C239 * C310) * C82581) *
                   C81 +
               ((C253 - C254) * C168 + (C448 - C449) * C82581) * C82 +
               ((C257 - C258) * C168 + (C450 - C451) * C82581) * C83 +
               ((C261 - C262) * C168 + (C452 - C453) * C82581) * C84 +
               ((C265 - C266) * C168 + (C454 - C455) * C82581) * C85) *
                  C82938 * C688 +
              (((C239 * C695 - C82592 * C805) * C168 +
                (C239 * C857 - C82592 * C956) * C82581) *
                   C81 +
               ((C239 * C694 - C82592 * C806) * C168 +
                (C239 * C858 - C82592 * C957) * C82581) *
                   C82 +
               ((C239 * C693 - C82592 * C807) * C168 +
                (C239 * C859 - C82592 * C958) * C82581) *
                   C83 +
               ((C239 * C692 - C82592 * C808) * C168 +
                (C239 * C860 - C82592 * C959) * C82581) *
                   C84 +
               ((C239 * C691 - C82592 * C809) * C168 +
                (C239 * C861 - C82592 * C960) * C82581) *
                   C85) *
                  C82938 * C689) *
             C82940 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C82592 * C240 - C239 * C102) * C1743 +
                (C82592 * C441 - C239 * C310) * C82931 +
                (C2740 - C2741) * C1744 + (C3006 - C3007) * C82916 +
                (C2744 - C2745) * C1745 + (C3008 - C3009) * C82893) *
                   C1641 +
               ((C253 - C254) * C1743 + (C448 - C449) * C82931 +
                (C1861 - C1862) * C1744 + (C2160 - C2161) * C82916 +
                (C1869 - C1870) * C1745 + (C2162 - C2163) * C82893) *
                   C1642 +
               ((C257 - C258) * C1743 + (C450 - C451) * C82931 +
                (C1865 - C1866) * C1744 + (C2164 - C2165) * C82916 +
                (C1873 - C1874) * C1745 + (C2166 - C2167) * C82893) *
                   C82885) *
                  C82938 * C688 +
              (((C2741 - C2740) * C1743 + (C3007 - C3006) * C82931 +
                (C2745 - C2744) * C1744 + (C3009 - C3008) * C82916 +
                (C239 * C2527 - C82592 * C2733) * C1745 +
                (C239 * C2821 - C82592 * C3002) * C82893) *
                   C1641 +
               ((C1862 - C1861) * C1743 + (C2161 - C2160) * C82931 +
                (C1870 - C1869) * C1744 + (C2163 - C2162) * C82916 +
                (C239 * C2526 - C82592 * C2734) * C1745 +
                (C239 * C2822 - C82592 * C3003) * C82893) *
                   C1642 +
               ((C1866 - C1865) * C1743 + (C2165 - C2164) * C82931 +
                (C1874 - C1873) * C1744 + (C2167 - C2166) * C82916 +
                (C239 * C2525 - C82592 * C2735) * C1745 +
                (C239 * C2823 - C82592 * C3004) * C82893) *
                   C82885) *
                  C82938 * C689) *
             C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
             C82896 * C4299 - C4298 * C4108) *
                C168 +
            (C82932 * C441 - C4296 * C310 + C82918 * C1416 - C4297 * C1317 +
             C82896 * C4593 - C4298 * C4405) *
                C82581) *
               C1641 +
           ((C4308 - C4309 + C4310 - C4311 + C4312 - C4313) * C168 +
            (C4598 - C4599 + C4600 - C4601 + C4602 - C4603) * C82581) *
               C1642 +
           ((C4320 - C4321 + C4322 - C4323 + C4324 - C4325) * C168 +
            (C4604 - C4605 + C4606 - C4607 + C4608 - C4609) * C82581) *
               C82885) *
              C82938 * C688 +
          (((C4296 * C695 - C82932 * C805 + C4297 * C3348 - C82918 * C3527 +
             C4298 * C4976 - C82896 * C5140) *
                C168 +
            (C4296 * C857 - C82932 * C956 + C4297 * C3613 - C82918 * C3779 +
             C4298 * C5220 - C82896 * C5377) *
                C82581) *
               C1641 +
           ((C4296 * C694 - C82932 * C806 + C4297 * C3347 - C82918 * C3528 +
             C4298 * C4975 - C82896 * C5141) *
                C168 +
            (C4296 * C858 - C82932 * C957 + C4297 * C3614 - C82918 * C3781 +
             C4298 * C5221 - C82896 * C5378) *
                C82581) *
               C1642 +
           ((C4296 * C693 - C82932 * C807 + C4297 * C3346 - C82918 * C3529 +
             C4298 * C4974 - C82896 * C5142) *
                C168 +
            (C4296 * C859 - C82932 * C958 + C4297 * C3615 - C82918 * C3783 +
             C4298 * C5222 - C82896 * C5379) *
                C82581) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C13339 +
            (C82592 * C441 - C239 * C310) * C13256 + (C2740 - C2741) * C13340 +
            (C3006 - C3007) * C13257 + (C2744 - C2745) * C13341 +
            (C3008 - C3009) * C82893) *
               C82925 +
           ((C253 - C254) * C13339 + (C448 - C449) * C13256 +
            (C1861 - C1862) * C13340 + (C2160 - C2161) * C13257 +
            (C1869 - C1870) * C13341 + (C2162 - C2163) * C82893) *
               C82909 +
           ((C257 - C258) * C13339 + (C450 - C451) * C13256 +
            (C1865 - C1866) * C13340 + (C2164 - C2165) * C13257 +
            (C1873 - C1874) * C13341 + (C2166 - C2167) * C82893) *
               C82885) *
              C82938 * C688 +
          (((C2741 - C2740) * C13339 + (C3007 - C3006) * C13256 +
            (C2745 - C2744) * C13340 + (C3009 - C3008) * C13257 +
            (C239 * C2527 - C82592 * C2733) * C13341 +
            (C239 * C2821 - C82592 * C3002) * C82893) *
               C82925 +
           ((C1862 - C1861) * C13339 + (C2161 - C2160) * C13256 +
            (C1870 - C1869) * C13340 + (C2163 - C2162) * C13257 +
            (C239 * C2526 - C82592 * C2734) * C13341 +
            (C239 * C2822 - C82592 * C3003) * C82893) *
               C82909 +
           ((C1866 - C1865) * C13339 + (C2165 - C2164) * C13256 +
            (C1874 - C1873) * C13340 + (C2167 - C2166) * C13257 +
            (C239 * C2525 - C82592 * C2735) * C13341 +
            (C239 * C2823 - C82592 * C3004) * C82893) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C82592 * C240 - C239 * C102) * C15457 +
           (C82592 * C441 - C239 * C310) * C15400 + (C2740 - C2741) * C15458 +
           (C3006 - C3007) * C15401 + (C2744 - C2745) * C15459 +
           (C3008 - C3009) * C15402 + (C15952 - C15953) * C15460 +
           (C16106 - C16107) * C15403 + (C15956 - C15957) * C15461 +
           (C16108 - C16109) * C15404) *
              C82523 * C82938 * C688 +
          ((C2741 - C2740) * C15457 + (C3007 - C3006) * C15400 +
           (C2745 - C2744) * C15458 + (C3009 - C3008) * C15401 +
           (C15953 - C15952) * C15459 + (C16107 - C16106) * C15402 +
           (C15957 - C15956) * C15460 + (C16109 - C16108) * C15403 +
           (C239 * C15827 - C82592 * C15949) * C15461 +
           (C239 * C16001 - C82592 * C16104) * C15404) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
            C82896 * C4299 - C4298 * C4108) *
               C13339 +
           (C82932 * C441 - C4296 * C310 + C82918 * C1416 - C4297 * C1317 +
            C82896 * C4593 - C4298 * C4405) *
               C13256 +
           (C17634 - C17635 + C17636 - C17637 + C17638 - C17639) * C13340 +
           (C17900 - C17901 + C17902 - C17903 + C17904 - C17905) * C13257 +
           (C17646 - C17647 + C17648 - C17649 + C17650 - C17651) * C13341 +
           (C17906 - C17907 + C17908 - C17909 + C17910 - C17911) * C82893) *
              C82523 * C82938 * C688 +
          ((C17635 - C17634 + C17637 - C17636 + C17639 - C17638) * C13339 +
           (C17901 - C17900 + C17903 - C17902 + C17905 - C17904) * C13256 +
           (C17647 - C17646 + C17649 - C17648 + C17651 - C17650) * C13340 +
           (C17907 - C17906 + C17909 - C17908 + C17911 - C17910) * C13257 +
           (C4296 * C2527 - C82932 * C2733 + C4297 * C16304 - C82918 * C16399 +
            C4298 * C17443 - C82896 * C17631) *
               C13341 +
           (C4296 * C2821 - C82932 * C3002 + C4297 * C16445 - C82918 * C16535 +
            C4298 * C17731 - C82896 * C17898) *
               C82893) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
             C82896 * C4299 - C25873 * C4108) *
                C168 +
            (C25720 * C441 - C25871 * C310 + C25721 * C1416 - C25872 * C1317 +
             C82896 * C4593 - C25873 * C4405) *
                C82581) *
               C82925 +
           ((C25875 - C25876 + C25877 - C25878 + C25879 - C25880) * C168 +
            (C26121 - C26122 + C26123 - C26124 + C26125 - C26126) * C82581) *
               C82909 +
           ((C25887 - C25888 + C25889 - C25890 + C25891 - C25892) * C168 +
            (C26127 - C26128 + C26129 - C26130 + C26131 - C26132) * C82581) *
               C82885) *
              C82938 * C688 +
          (((C25871 * C695 - C25720 * C805 + C25872 * C3348 - C25721 * C3527 +
             C25873 * C4976 - C82896 * C5140) *
                C168 +
            (C25871 * C857 - C25720 * C956 + C25872 * C3613 - C25721 * C3779 +
             C25873 * C5220 - C82896 * C5377) *
                C82581) *
               C82925 +
           ((C25871 * C694 - C25720 * C806 + C25872 * C3347 - C25721 * C3528 +
             C25873 * C4975 - C82896 * C5141) *
                C168 +
            (C25871 * C858 - C25720 * C957 + C25872 * C3614 - C25721 * C3781 +
             C25873 * C5221 - C82896 * C5378) *
                C82581) *
               C82909 +
           ((C25871 * C693 - C25720 * C807 + C25872 * C3346 - C25721 * C3529 +
             C25873 * C4974 - C82896 * C5142) *
                C168 +
            (C25871 * C859 - C25720 * C958 + C25872 * C3615 - C25721 * C3783 +
             C25873 * C5222 - C82896 * C5379) *
                C82581) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
            C82896 * C4299 - C25873 * C4108) *
               C1743 +
           (C25720 * C441 - C25871 * C310 + C25721 * C1416 - C25872 * C1317 +
            C82896 * C4593 - C25873 * C4405) *
               C82931 +
           (C28710 - C28711 + C28712 - C28713 + C28714 - C28715) * C1744 +
           (C28956 - C28957 + C28958 - C28959 + C28960 - C28961) * C82916 +
           (C28722 - C28723 + C28724 - C28725 + C28726 - C28727) * C1745 +
           (C28962 - C28963 + C28964 - C28965 + C28966 - C28967) * C82893) *
              C82523 * C82938 * C688 +
          ((C28711 - C28710 + C28713 - C28712 + C28715 - C28714) * C1743 +
           (C28957 - C28956 + C28959 - C28958 + C28961 - C28960) * C82931 +
           (C28723 - C28722 + C28725 - C28724 + C28727 - C28726) * C1744 +
           (C28963 - C28962 + C28965 - C28964 + C28967 - C28966) * C82916 +
           (C25871 * C2527 - C25720 * C2733 + C25872 * C16304 -
            C25721 * C16399 + C25873 * C17443 - C82896 * C17631) *
               C1745 +
           (C25871 * C2821 - C25720 * C3002 + C25872 * C16445 -
            C25721 * C16535 + C25873 * C17731 - C82896 * C17898) *
               C82893) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C30017 * C240 - C30118 * C102 + C30018 * C1265 - C30119 * C1155 +
            C30019 * C4299 - C30120 * C4108 + C30020 * C5904 - C30121 * C5690 +
            C30021 * C30123 - C30122 * C30022) *
               C168 +
           (C30017 * C441 - C30118 * C310 + C30018 * C1416 - C30119 * C1317 +
            C30019 * C4593 - C30120 * C4405 + C30020 * C6185 - C30121 * C5984 +
            C30021 * C30259 - C30122 * C30169) *
               C82581) *
              C82523 * C82938 * C688 +
          ((C30118 * C695 - C30017 * C805 + C30119 * C3348 - C30018 * C3527 +
            C30120 * C4976 - C30019 * C5140 + C30121 * C18262 -
            C30020 * C18459 + C30122 * C30442 - C30021 * C30532) *
               C168 +
           (C30118 * C857 - C30017 * C956 + C30119 * C3613 - C30018 * C3779 +
            C30120 * C5220 - C30019 * C5377 + C30121 * C18537 -
            C30020 * C18741 + C30122 * C30576 - C30021 * C30663) *
               C82581) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezx[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C81 * C108 - C92 * C102 + C82 * C110 - C94 * C103 + C83 * C112 -
                C96 * C104 + C84 * C114 - C98 * C105 + C85 * C116 -
                C100 * C106) *
                   C239 +
               (C81 * C503 - C92 * C497 + C82 * C504 - C94 * C498 + C83 * C505 -
                C96 * C499 + C84 * C506 - C98 * C500 + C85 * C507 -
                C100 * C501) *
                   C82592) *
                  C82581 * C82938 * C688 +
              ((C92 * C695 - C81 * C704 + C94 * C694 - C82 * C702 + C96 * C693 -
                C83 * C700 + C98 * C692 - C84 * C698 + C100 * C691 -
                C85 * C696) *
                   C239 +
               (C92 * C1003 - C81 * C1008 + C94 * C1004 - C82 * C1009 +
                C96 * C1005 - C83 * C1010 + C98 * C1006 - C84 * C1011 +
                C100 * C1007 - C85 * C1012) *
                   C82592) *
                  C82581 * C82938 * C689) *
             C82940 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
                 C82885 * C112 - C1651 * C104) *
                    C239 +
                (C1641 * C503 - C1647 * C497 + C1642 * C504 - C1649 * C498 +
                 C82885 * C505 - C1651 * C499) *
                    C82592) *
                   C82931 +
               ((C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C239 +
                (C3090 - C3091 + C3092 - C3093 + C3094 - C3095) * C82592) *
                   C82916 +
               ((C2840 - C2841 + C2842 - C2843 + C2844 - C2845) * C239 +
                (C3096 - C3097 + C3098 - C3099 + C3100 - C3101) * C82592) *
                   C82893) *
                  C82938 * C688 +
              (((C2829 - C2828 + C2831 - C2830 + C2833 - C2832) * C239 +
                (C3091 - C3090 + C3093 - C3092 + C3095 - C3094) * C82592) *
                   C82931 +
               ((C2841 - C2840 + C2843 - C2842 + C2845 - C2844) * C239 +
                (C3097 - C3096 + C3099 - C3098 + C3101 - C3100) * C82592) *
                   C82916 +
               ((C1647 * C2527 - C1641 * C2532 + C1649 * C2526 - C1642 * C2530 +
                 C1651 * C2525 - C82885 * C2528) *
                    C239 +
                (C1647 * C3083 - C1641 * C3086 + C1649 * C3084 - C1642 * C3087 +
                 C1651 * C3085 - C82885 * C3088) *
                    C82592) *
                   C82893) *
                  C82938 * C689) *
             C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
            C82885 * C112 - C1651 * C104) *
               C4296 +
           (C1641 * C503 - C1647 * C497 + C1642 * C504 - C1649 * C498 +
            C82885 * C505 - C1651 * C499) *
               C82932 +
           (C1641 * C1164 - C1647 * C1155 + C1642 * C1162 - C1649 * C1154 +
            C82885 * C1160 - C1651 * C1153) *
               C4297 +
           (C1641 * C1468 - C1647 * C1463 + C1642 * C1469 - C1649 * C1464 +
            C82885 * C1470 - C1651 * C1465) *
               C82918 +
           (C1641 * C4112 - C1647 * C4108 + C1642 * C4114 - C1649 * C4109 +
            C82885 * C4116 - C1651 * C4110) *
               C4298 +
           (C1641 * C4687 - C1647 * C4683 + C1642 * C4688 - C1649 * C4684 +
            C82885 * C4689 - C1651 * C4685) *
               C82896) *
              C82581 * C82938 * C688 +
          ((C2829 - C2828 + C2831 - C2830 + C2833 - C2832) * C4296 +
           (C3091 - C3090 + C3093 - C3092 + C3095 - C3094) * C82932 +
           (C1647 * C3348 - C1641 * C3359 + C1649 * C3347 - C1642 * C3357 +
            C1651 * C3346 - C82885 * C3355) *
               C4297 +
           (C1647 * C3859 - C1641 * C3865 + C1649 * C3860 - C1642 * C3866 +
            C1651 * C3861 - C82885 * C3867) *
               C82918 +
           (C1647 * C4976 - C1641 * C4981 + C1649 * C4975 - C1642 * C4979 +
            C1651 * C4974 - C82885 * C4977) *
               C4298 +
           (C1647 * C5454 - C1641 * C5457 + C1649 * C5455 - C1642 * C5458 +
            C1651 * C5456 - C82885 * C5459) *
               C82896) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C239 +
            (C82925 * C503 - C13259 * C497 + C82909 * C504 - C13261 * C498 +
             C82885 * C505 - C13263 * C499) *
                C82592) *
               C13256 +
           ((C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C239 +
            (C14532 - C14533 + C14534 - C14535 + C14536 - C14537) * C82592) *
               C13257 +
           ((C14298 - C14299 + C14300 - C14301 + C14302 - C14303) * C239 +
            (C14538 - C14539 + C14540 - C14541 + C14542 - C14543) * C82592) *
               C82893) *
              C82938 * C688 +
          (((C14287 - C14286 + C14289 - C14288 + C14291 - C14290) * C239 +
            (C14533 - C14532 + C14535 - C14534 + C14537 - C14536) * C82592) *
               C13256 +
           ((C14299 - C14298 + C14301 - C14300 + C14303 - C14302) * C239 +
            (C14539 - C14538 + C14541 - C14540 + C14543 - C14542) * C82592) *
               C13257 +
           ((C13259 * C2527 - C82925 * C2532 + C13261 * C2526 - C82909 * C2530 +
             C13263 * C2525 - C82885 * C2528) *
                C239 +
            (C13259 * C3083 - C82925 * C3086 + C13261 * C3084 - C82909 * C3087 +
             C13263 * C3085 - C82885 * C3088) *
                C82592) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C239 +
            (C82523 * C503 - C15405 * C497) * C82592) *
               C15400 +
           ((C16004 - C16005) * C239 + (C16154 - C16155) * C82592) * C15401 +
           ((C16008 - C16009) * C239 + (C16156 - C16157) * C82592) * C15402 +
           ((C16012 - C16013) * C239 + (C16158 - C16159) * C82592) * C15403 +
           ((C16016 - C16017) * C239 + (C16160 - C16161) * C82592) * C15404) *
              C82938 * C688 +
          (((C16005 - C16004) * C239 + (C16155 - C16154) * C82592) * C15400 +
           ((C16009 - C16008) * C239 + (C16157 - C16156) * C82592) * C15401 +
           ((C16013 - C16012) * C239 + (C16159 - C16158) * C82592) * C15402 +
           ((C16017 - C16016) * C239 + (C16161 - C16160) * C82592) * C15403 +
           ((C15405 * C15827 - C82523 * C15828) * C239 +
            (C15405 * C16151 - C82523 * C16152) * C82592) *
               C15404) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C4296 +
            (C82523 * C503 - C15405 * C497) * C82932 +
            (C82523 * C1164 - C15405 * C1155) * C4297 +
            (C82523 * C1468 - C15405 * C1463) * C82918 +
            (C82523 * C4112 - C15405 * C4108) * C4298 +
            (C82523 * C4687 - C15405 * C4683) * C82896) *
               C13256 +
           ((C16004 - C16005) * C4296 + (C16154 - C16155) * C82932 +
            (C17734 - C17735) * C4297 + (C17988 - C17989) * C82918 +
            (C17742 - C17743) * C4298 + (C17990 - C17991) * C82896) *
               C13257 +
           ((C16008 - C16009) * C4296 + (C16156 - C16157) * C82932 +
            (C17738 - C17739) * C4297 + (C17992 - C17993) * C82918 +
            (C17746 - C17747) * C4298 + (C17994 - C17995) * C82896) *
               C82893) *
              C82938 * C688 +
          (((C16005 - C16004) * C4296 + (C16155 - C16154) * C82932 +
            (C17735 - C17734) * C4297 + (C17989 - C17988) * C82918 +
            (C17743 - C17742) * C4298 + (C17991 - C17990) * C82896) *
               C13256 +
           ((C16009 - C16008) * C4296 + (C16157 - C16156) * C82932 +
            (C17739 - C17738) * C4297 + (C17993 - C17992) * C82918 +
            (C17747 - C17746) * C4298 + (C17995 - C17994) * C82896) *
               C13257 +
           ((C16013 - C16012) * C4296 + (C16159 - C16158) * C82932 +
            (C15405 * C16304 - C82523 * C16307) * C4297 +
            (C15405 * C16579 - C82523 * C16581) * C82918 +
            (C15405 * C17443 - C82523 * C17444) * C4298 +
            (C15405 * C17985 - C82523 * C17986) * C82896) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
            C82885 * C112 - C13263 * C104) *
               C25871 +
           (C82925 * C503 - C13259 * C497 + C82909 * C504 - C13261 * C498 +
            C82885 * C505 - C13263 * C499) *
               C25720 +
           (C82925 * C1164 - C13259 * C1155 + C82909 * C1162 - C13261 * C1154 +
            C82885 * C1160 - C13263 * C1153) *
               C25872 +
           (C82925 * C1468 - C13259 * C1463 + C82909 * C1469 - C13261 * C1464 +
            C82885 * C1470 - C13263 * C1465) *
               C25721 +
           (C82925 * C4112 - C13259 * C4108 + C82909 * C4114 - C13261 * C4109 +
            C82885 * C4116 - C13263 * C4110) *
               C25873 +
           (C82925 * C4687 - C13259 * C4683 + C82909 * C4688 - C13261 * C4684 +
            C82885 * C4689 - C13263 * C4685) *
               C82896) *
              C82581 * C82938 * C688 +
          ((C14287 - C14286 + C14289 - C14288 + C14291 - C14290) * C25871 +
           (C14533 - C14532 + C14535 - C14534 + C14537 - C14536) * C25720 +
           (C13259 * C3348 - C82925 * C3359 + C13261 * C3347 - C82909 * C3357 +
            C13263 * C3346 - C82885 * C3355) *
               C25872 +
           (C13259 * C3859 - C82925 * C3865 + C13261 * C3860 - C82909 * C3866 +
            C13263 * C3861 - C82885 * C3867) *
               C25721 +
           (C13259 * C4976 - C82925 * C4981 + C13261 * C4975 - C82909 * C4979 +
            C13263 * C4974 - C82885 * C4977) *
               C25873 +
           (C13259 * C5454 - C82925 * C5457 + C13261 * C5455 - C82909 * C5458 +
            C13263 * C5456 - C82885 * C5459) *
               C82896) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C25871 +
            (C82523 * C503 - C15405 * C497) * C25720 +
            (C18542 - C18543) * C25872 + (C18822 - C18823) * C25721 +
            (C18546 - C18547) * C25873 + (C18824 - C18825) * C82896) *
               C82931 +
           ((C16004 - C16005) * C25871 + (C16154 - C16155) * C25720 +
            (C17734 - C17735) * C25872 + (C17988 - C17989) * C25721 +
            (C17742 - C17743) * C25873 + (C17990 - C17991) * C82896) *
               C82916 +
           ((C16008 - C16009) * C25871 + (C16156 - C16157) * C25720 +
            (C17738 - C17739) * C25872 + (C17992 - C17993) * C25721 +
            (C17746 - C17747) * C25873 + (C17994 - C17995) * C82896) *
               C82893) *
              C82938 * C688 +
          (((C16005 - C16004) * C25871 + (C16155 - C16154) * C25720 +
            (C17735 - C17734) * C25872 + (C17989 - C17988) * C25721 +
            (C17743 - C17742) * C25873 + (C17991 - C17990) * C82896) *
               C82931 +
           ((C16009 - C16008) * C25871 + (C16157 - C16156) * C25720 +
            (C17739 - C17738) * C25872 + (C17993 - C17992) * C25721 +
            (C17747 - C17746) * C25873 + (C17995 - C17994) * C82896) *
               C82916 +
           ((C16013 - C16012) * C25871 + (C16159 - C16158) * C25720 +
            (C24648 - C24647) * C25872 + (C24854 - C24853) * C25721 +
            (C15405 * C17443 - C82523 * C17444) * C25873 +
            (C15405 * C17985 - C82523 * C17986) * C82896) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C82523 * C108 - C15405 * C102) * C30118 +
           (C82523 * C503 - C15405 * C497) * C30017 +
           (C18542 - C18543) * C30119 + (C18822 - C18823) * C30018 +
           (C18546 - C18547) * C30120 + (C18824 - C18825) * C30019 +
           (C82523 * C5695 - C15405 * C5690) * C30121 +
           (C82523 * C6265 - C15405 * C6262) * C30020 +
           (C82523 * C30024 - C15405 * C30022) * C30122 +
           (C82523 * C30305 - C15405 * C30303) * C30021) *
              C82581 * C82938 * C688 +
          ((C16005 - C16004) * C30118 + (C16155 - C16154) * C30017 +
           (C17735 - C17734) * C30119 + (C17989 - C17988) * C30018 +
           (C17743 - C17742) * C30120 + (C17991 - C17990) * C30019 +
           (C15405 * C18262 - C82523 * C18265) * C30121 +
           (C15405 * C18817 - C82523 * C18819) * C30020 +
           (C15405 * C30442 - C82523 * C30443) * C30122 +
           (C15405 * C30706 - C82523 * C30707) * C30021) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C82581 * C169 - C168 * C102) * C239 +
                (C82581 * C551 - C168 * C497) * C82592) *
                   C81 +
               ((C182 - C183) * C239 + (C558 - C559) * C82592) * C82 +
               ((C186 - C187) * C239 + (C560 - C561) * C82592) * C83 +
               ((C190 - C191) * C239 + (C562 - C563) * C82592) * C84 +
               ((C194 - C195) * C239 + (C564 - C565) * C82592) * C85) *
                  C82938 * C688 +
              (((C168 * C695 - C82581 * C753) * C239 +
                (C168 * C1003 - C82581 * C1055) * C82592) *
                   C81 +
               ((C168 * C694 - C82581 * C754) * C239 +
                (C168 * C1004 - C82581 * C1056) * C82592) *
                   C82 +
               ((C168 * C693 - C82581 * C755) * C239 +
                (C168 * C1005 - C82581 * C1057) * C82592) *
                   C83 +
               ((C168 * C692 - C82581 * C756) * C239 +
                (C168 * C1006 - C82581 * C1058) * C82592) *
                   C84 +
               ((C168 * C691 - C82581 * C757) * C239 +
                (C168 * C1007 - C82581 * C1059) * C82592) *
                   C85) *
                  C82938 * C689) *
             C82940 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
                 C82893 * C1746 - C1745 * C1653) *
                    C239 +
                (C82931 * C551 - C1743 * C497 + C82916 * C1055 - C1744 * C1003 +
                 C82893 * C2323 - C1745 * C2241) *
                    C82592) *
                   C1641 +
               ((C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C239 +
                (C2328 - C2329 + C2330 - C2331 + C2332 - C2333) * C82592) *
                   C1642 +
               ((C1767 - C1768 + C1769 - C1770 + C1771 - C1772) * C239 +
                (C2334 - C2335 + C2336 - C2337 + C2338 - C2339) * C82592) *
                   C82885) *
                  C82938 * C688 +
              (((C1743 * C695 - C82931 * C753 + C1744 * C1653 - C82916 * C1746 +
                 C1745 * C2527 - C82893 * C2653) *
                    C239 +
                (C1743 * C1003 - C82931 * C1055 + C1744 * C2241 -
                 C82916 * C2323 + C1745 * C3083 - C82893 * C3175) *
                    C82592) *
                   C1641 +
               ((C1743 * C694 - C82931 * C754 + C1744 * C1654 - C82916 * C1747 +
                 C1745 * C2526 - C82893 * C2654) *
                    C239 +
                (C1743 * C1004 - C82931 * C1056 + C1744 * C2242 -
                 C82916 * C2324 + C1745 * C3084 - C82893 * C3176) *
                    C82592) *
                   C1642 +
               ((C1743 * C693 - C82931 * C755 + C1744 * C1655 - C82916 * C1748 +
                 C1745 * C2525 - C82893 * C2655) *
                    C239 +
                (C1743 * C1005 - C82931 * C1057 + C1744 * C2243 -
                 C82916 * C2325 + C1745 * C3085 - C82893 * C3177) *
                    C82592) *
                   C82885) *
                  C82938 * C689) *
             C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C4296 +
            (C82581 * C551 - C168 * C497) * C82932 +
            (C82581 * C1213 - C168 * C1155) * C4297 +
            (C82581 * C1515 - C168 * C1463) * C82918 +
            (C82581 * C4198 - C168 * C4108) * C4298 +
            (C82581 * C4765 - C168 * C4683) * C82896) *
               C1641 +
           ((C182 - C183) * C4296 + (C558 - C559) * C82932 +
            (C4207 - C4208) * C4297 + (C4770 - C4771) * C82918 +
            (C4215 - C4216) * C4298 + (C4772 - C4773) * C82896) *
               C1642 +
           ((C186 - C187) * C4296 + (C560 - C561) * C82932 +
            (C4211 - C4212) * C4297 + (C4774 - C4775) * C82918 +
            (C4219 - C4220) * C4298 + (C4776 - C4777) * C82896) *
               C82885) *
              C82938 * C688 +
          (((C168 * C695 - C82581 * C753) * C4296 +
            (C168 * C1003 - C82581 * C1055) * C82932 +
            (C168 * C3348 - C82581 * C3441) * C4297 +
            (C168 * C3859 - C82581 * C3945) * C82918 +
            (C168 * C4976 - C82581 * C5060) * C4298 +
            (C168 * C5454 - C82581 * C5534) * C82896) *
               C1641 +
           ((C168 * C694 - C82581 * C754) * C4296 +
            (C168 * C1004 - C82581 * C1056) * C82932 +
            (C168 * C3347 - C82581 * C3443) * C4297 +
            (C168 * C3860 - C82581 * C3947) * C82918 +
            (C168 * C4975 - C82581 * C5061) * C4298 +
            (C168 * C5455 - C82581 * C5535) * C82896) *
               C1642 +
           ((C168 * C693 - C82581 * C755) * C4296 +
            (C168 * C1005 - C82581 * C1057) * C82932 +
            (C168 * C3346 - C82581 * C3445) * C4297 +
            (C168 * C3861 - C82581 * C3949) * C82918 +
            (C168 * C4974 - C82581 * C5062) * C4298 +
            (C168 * C5456 - C82581 * C5536) * C82896) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C239 +
            (C13256 * C551 - C13339 * C497 + C13257 * C1055 - C13340 * C1003 +
             C82893 * C2323 - C13341 * C2241) *
                C82592) *
               C82925 +
           ((C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C239 +
            (C13856 - C13857 + C13858 - C13859 + C13860 - C13861) * C82592) *
               C82909 +
           ((C13355 - C13356 + C13357 - C13358 + C13359 - C13360) * C239 +
            (C13862 - C13863 + C13864 - C13865 + C13866 - C13867) * C82592) *
               C82885) *
              C82938 * C688 +
          (((C13339 * C695 - C13256 * C753 + C13340 * C1653 - C13257 * C1746 +
             C13341 * C2527 - C82893 * C2653) *
                C239 +
            (C13339 * C1003 - C13256 * C1055 + C13340 * C2241 - C13257 * C2323 +
             C13341 * C3083 - C82893 * C3175) *
                C82592) *
               C82925 +
           ((C13339 * C694 - C13256 * C754 + C13340 * C1654 - C13257 * C1747 +
             C13341 * C2526 - C82893 * C2654) *
                C239 +
            (C13339 * C1004 - C13256 * C1056 + C13340 * C2242 - C13257 * C2324 +
             C13341 * C3084 - C82893 * C3176) *
                C82592) *
               C82909 +
           ((C13339 * C693 - C13256 * C755 + C13340 * C1655 - C13257 * C1748 +
             C13341 * C2525 - C82893 * C2655) *
                C239 +
            (C13339 * C1005 - C13256 * C1057 + C13340 * C2243 - C13257 * C2325 +
             C13341 * C3085 - C82893 * C3177) *
                C82592) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15400 * C169 - C15457 * C102 + C15401 * C753 - C15458 * C695 +
            C15402 * C1746 - C15459 * C1653 + C15403 * C2653 - C15460 * C2527 +
            C15404 * C15462 - C15461 * C15407) *
               C239 +
           (C15400 * C551 - C15457 * C497 + C15401 * C1055 - C15458 * C1003 +
            C15402 * C2323 - C15459 * C2241 + C15403 * C3175 - C15460 * C3083 +
            C15404 * C15739 - C15461 * C15693) *
               C82592) *
              C82523 * C82938 * C688 +
          ((C15457 * C695 - C15400 * C753 + C15458 * C1653 - C15401 * C1746 +
            C15459 * C2527 - C15402 * C2653 + C15460 * C15407 -
            C15403 * C15462 + C15461 * C15827 - C15404 * C15905) *
               C239 +
           (C15457 * C1003 - C15400 * C1055 + C15458 * C2241 - C15401 * C2323 +
            C15459 * C3083 - C15402 * C3175 + C15460 * C15693 -
            C15403 * C15739 + C15461 * C16151 - C15404 * C16203) *
               C82592) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
            C82893 * C1746 - C13341 * C1653) *
               C4296 +
           (C13256 * C551 - C13339 * C497 + C13257 * C1055 - C13340 * C1003 +
            C82893 * C2323 - C13341 * C2241) *
               C82932 +
           (C13256 * C1213 - C13339 * C1155 + C13257 * C3441 - C13340 * C3348 +
            C82893 * C3442 - C13341 * C3345) *
               C4297 +
           (C13256 * C1515 - C13339 * C1463 + C13257 * C3945 - C13340 * C3859 +
            C82893 * C3946 - C13341 * C3862) *
               C82918 +
           (C13256 * C4198 - C13339 * C4108 + C13257 * C5060 - C13340 * C4976 +
            C82893 * C16827 - C13341 * C16745) *
               C4298 +
           (C13256 * C4765 - C13339 * C4683 + C13257 * C5534 - C13340 * C5454 +
            C82893 * C17291 - C13341 * C17213) *
               C82896) *
              C82523 * C82938 * C688 +
          ((C13339 * C695 - C13256 * C753 + C13340 * C1653 - C13257 * C1746 +
            C13341 * C2527 - C82893 * C2653) *
               C4296 +
           (C13339 * C1003 - C13256 * C1055 + C13340 * C2241 - C13257 * C2323 +
            C13341 * C3083 - C82893 * C3175) *
               C82932 +
           (C13339 * C3348 - C13256 * C3441 + C13340 * C3345 - C13257 * C3442 +
            C13341 * C16304 - C82893 * C16353) *
               C4297 +
           (C13339 * C3859 - C13256 * C3945 + C13340 * C3862 - C13257 * C3946 +
            C13341 * C16579 - C82893 * C16625) *
               C82918 +
           (C13339 * C4976 - C13256 * C5060 + C13340 * C16745 -
            C13257 * C16827 + C13341 * C17443 - C82893 * C17555) *
               C4298 +
           (C13339 * C5454 - C13256 * C5534 + C13340 * C17213 -
            C13257 * C17291 + C13341 * C17985 - C82893 * C18069) *
               C82896) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C25871 +
            (C82581 * C551 - C168 * C497) * C25720 + (C5823 - C5824) * C25872 +
            (C6358 - C6359) * C25721 + (C5827 - C5828) * C25873 +
            (C6360 - C6361) * C82896) *
               C82925 +
           ((C182 - C183) * C25871 + (C558 - C559) * C25720 +
            (C4207 - C4208) * C25872 + (C4770 - C4771) * C25721 +
            (C4215 - C4216) * C25873 + (C4772 - C4773) * C82896) *
               C82909 +
           ((C186 - C187) * C25871 + (C560 - C561) * C25720 +
            (C4211 - C4212) * C25872 + (C4774 - C4775) * C25721 +
            (C4219 - C4220) * C25873 + (C4776 - C4777) * C82896) *
               C82885) *
              C82938 * C688 +
          (((C168 * C695 - C82581 * C753) * C25871 +
            (C168 * C1003 - C82581 * C1055) * C25720 +
            (C168 * C3348 - C82581 * C3441) * C25872 +
            (C168 * C3859 - C82581 * C3945) * C25721 +
            (C168 * C4976 - C82581 * C5060) * C25873 +
            (C168 * C5454 - C82581 * C5534) * C82896) *
               C82925 +
           ((C168 * C694 - C82581 * C754) * C25871 +
            (C168 * C1004 - C82581 * C1056) * C25720 +
            (C168 * C3347 - C82581 * C3443) * C25872 +
            (C168 * C3860 - C82581 * C3947) * C25721 +
            (C168 * C4975 - C82581 * C5061) * C25873 +
            (C168 * C5455 - C82581 * C5535) * C82896) *
               C82909 +
           ((C168 * C693 - C82581 * C755) * C25871 +
            (C168 * C1005 - C82581 * C1057) * C25720 +
            (C168 * C3346 - C82581 * C3445) * C25872 +
            (C168 * C3861 - C82581 * C3949) * C25721 +
            (C168 * C4974 - C82581 * C5062) * C25873 +
            (C168 * C5456 - C82581 * C5536) * C82896) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
            C82893 * C1746 - C1745 * C1653) *
               C25871 +
           (C82931 * C551 - C1743 * C497 + C82916 * C1055 - C1744 * C1003 +
            C82893 * C2323 - C1745 * C2241) *
               C25720 +
           (C82931 * C1213 - C1743 * C1155 + C82916 * C3441 - C1744 * C3348 +
            C82893 * C3442 - C1745 * C3345) *
               C25872 +
           (C82931 * C1515 - C1743 * C1463 + C82916 * C3945 - C1744 * C3859 +
            C82893 * C3946 - C1745 * C3862) *
               C25721 +
           (C82931 * C4198 - C1743 * C4108 + C82916 * C5060 - C1744 * C4976 +
            C82893 * C16827 - C1745 * C16745) *
               C25873 +
           (C82931 * C4765 - C1743 * C4683 + C82916 * C5534 - C1744 * C5454 +
            C82893 * C17291 - C1745 * C17213) *
               C82896) *
              C82523 * C82938 * C688 +
          ((C1743 * C695 - C82931 * C753 + C1744 * C1653 - C82916 * C1746 +
            C1745 * C2527 - C82893 * C2653) *
               C25871 +
           (C1743 * C1003 - C82931 * C1055 + C1744 * C2241 - C82916 * C2323 +
            C1745 * C3083 - C82893 * C3175) *
               C25720 +
           (C1743 * C3348 - C82931 * C3441 + C1744 * C3345 - C82916 * C3442 +
            C1745 * C16304 - C82893 * C16353) *
               C25872 +
           (C1743 * C3859 - C82931 * C3945 + C1744 * C3862 - C82916 * C3946 +
            C1745 * C16579 - C82893 * C16625) *
               C25721 +
           (C1743 * C4976 - C82931 * C5060 + C1744 * C16745 - C82916 * C16827 +
            C1745 * C17443 - C82893 * C17555) *
               C25873 +
           (C1743 * C5454 - C82931 * C5534 + C1744 * C17213 - C82916 * C17291 +
            C1745 * C17985 - C82893 * C18069) *
               C82896) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C82581 * C169 - C168 * C102) * C30118 +
           (C82581 * C551 - C168 * C497) * C30017 + (C5823 - C5824) * C30119 +
           (C6358 - C6359) * C30018 + (C5827 - C5828) * C30120 +
           (C6360 - C6361) * C30019 + (C82581 * C5816 - C168 * C5690) * C30121 +
           (C82581 * C6354 - C168 * C6262) * C30020 +
           (C82581 * C30072 - C168 * C30022) * C30122 +
           (C82581 * C30349 - C168 * C30303) * C30021) *
              C82523 * C82938 * C688 +
          ((C168 * C695 - C82581 * C753) * C30118 +
           (C168 * C1003 - C82581 * C1055) * C30017 +
           (C168 * C3348 - C82581 * C3441) * C30119 +
           (C168 * C3859 - C82581 * C3945) * C30018 +
           (C168 * C4976 - C82581 * C5060) * C30120 +
           (C168 * C5454 - C82581 * C5534) * C30019 +
           (C168 * C18262 - C82581 * C18357) * C30121 +
           (C168 * C18817 - C82581 * C18899) * C30020 +
           (C168 * C30442 - C82581 * C30488) * C30122 +
           (C168 * C30706 - C82581 * C30750) * C30021) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) *
                   C82581 * C81 +
               C643 * C82 + C644 * C83 + C645 * C84 + C646 * C85) *
                  C82938 * C688 -
              ((C239 * C809 - C607 * C691 - C239 * C1007 + C82592 * C1102) *
                   C82581 * C85 +
               (C239 * C808 - C607 * C692 - C239 * C1006 + C82592 * C1103) *
                   C82581 * C84 +
               (C239 * C807 - C607 * C693 - C239 * C1005 + C82592 * C1104) *
                   C82581 * C83 +
               (C239 * C806 - C607 * C694 - C239 * C1004 + C82592 * C1105) *
                   C82581 * C82 +
               (C239 * C805 - C607 * C695 - C239 * C1003 + C82592 * C1106) *
                   C82581 * C81) *
                  C82938 * C689) *
             C82940 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) *
                    C82931 +
                C3268 * C82916 + C3269 * C82893) *
                   C1641 +
               (C2418 + C2448 + C2449) * C1642 +
               (C2427 + C2450 + C2451) * C82885) *
                  C82938 * C688 -
              (((C239 * C2735 - C607 * C2525 - C239 * C3085 + C82592 * C3252) *
                    C82893 +
                C2447 * C82916 + C2446 * C82931) *
                   C82885 +
               ((C239 * C2734 - C607 * C2526 - C239 * C3084 + C82592 * C3253) *
                    C82893 +
                C2445 * C82916 + C2444 * C82931) *
                   C1642 +
               ((C239 * C2733 - C607 * C2527 - C239 * C3083 + C82592 * C3254) *
                    C82893 +
                C3269 * C82916 + C3268 * C82931) *
                   C1641) *
                  C82938 * C689) *
             C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4296 * C240 - C4851 * C102 - C4296 * C497 + C82932 * C608 +
            C4297 * C1265 - C4852 * C1155 - C4297 * C1463 + C82918 * C1566 +
            C4298 * C4299 - C4853 * C4108 - C4298 * C4683 + C82896 * C4854) *
               C82581 * C1641 +
           (C4895 + C4896 + C4897) * C82581 * C1642 +
           (C4898 + C4899 + C4900) * C82581 * C82885) *
              C82938 * C688 -
          ((C4298 * C5142 - C4853 * C4974 - C4298 * C5456 + C82896 * C5611 +
            C4297 * C3529 - C4852 * C3346 - C4297 * C3861 + C82918 * C4026 +
            C4296 * C807 - C4851 * C693 - C4296 * C1005 + C82932 * C1104) *
               C82581 * C82885 +
           (C4298 * C5141 - C4853 * C4975 - C4298 * C5455 + C82896 * C5612 +
            C4297 * C3528 - C4852 * C3347 - C4297 * C3860 + C82918 * C4028 +
            C4296 * C806 - C4851 * C694 - C4296 * C1004 + C82932 * C1105) *
               C82581 * C1642 +
           (C4298 * C5140 - C4853 * C4976 - C4298 * C5454 + C82896 * C5613 +
            C4297 * C3527 - C4852 * C3348 - C4297 * C3859 + C82918 * C4030 +
            C4296 * C805 - C4851 * C695 - C4296 * C1003 + C82932 * C1106) *
               C82581 * C1641) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C13256 +
            C3268 * C13257 + C3269 * C82893) *
               C82925 +
           (C13942 + C13943 + C13944) * C82909 +
           (C13945 + C13946 + C13947) * C82885) *
              C82938 * C688 -
          (((C239 * C2735 - C607 * C2525 - C239 * C3085 + C82592 * C3252) *
                C82893 +
            C2447 * C13257 + C2446 * C13256) *
               C82885 +
           ((C239 * C2734 - C607 * C2526 - C239 * C3084 + C82592 * C3253) *
                C82893 +
            C2445 * C13257 + C2444 * C13256) *
               C82909 +
           ((C239 * C2733 - C607 * C2527 - C239 * C3083 + C82592 * C3254) *
                C82893 +
            C3269 * C13257 + C3268 * C13256) *
               C82925) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C15400 +
           C3268 * C15401 + C3269 * C15402 + C16260 * C15403 +
           C16261 * C15404) *
              C82523 * C82938 * C688 -
          ((C239 * C15949 - C607 * C15827 - C239 * C16151 + C82592 * C16246) *
               C15404 +
           C16261 * C15403 + C16260 * C15402 + C3269 * C15401 +
           C3268 * C15400) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4296 * C240 - C4851 * C102 - C4296 * C497 + C82932 * C608 +
            C4297 * C1265 - C4852 * C1155 - C4297 * C1463 + C82918 * C1566 +
            C4298 * C4299 - C4853 * C4108 - C4298 * C4683 + C82896 * C4854) *
               C13256 +
           (C18182 + C18183 + C18184) * C13257 +
           (C18185 + C18186 + C18187) * C82893) *
              C82523 * C82938 * C688 -
          ((C4298 * C17631 - C4853 * C17443 - C4298 * C17985 + C82896 * C18144 +
            C4297 * C16399 - C4852 * C16304 - C4297 * C16579 + C82918 * C16670 +
            C4296 * C2733 - C4851 * C2527 - C4296 * C3083 + C82932 * C3254) *
               C82893 +
           (C18187 + C18186 + C18185) * C13257 +
           (C18184 + C18183 + C18182) * C13256) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C25871 * C240 - C26354 * C102 - C25871 * C497 + C25720 * C608 +
            C25872 * C1265 - C26355 * C1155 - C25872 * C1463 + C25721 * C1566 +
            C25873 * C4299 - C26356 * C4108 - C25873 * C4683 + C82896 * C4854) *
               C82581 * C82925 +
           (C26394 + C26395 + C26396) * C82581 * C82909 +
           (C26397 + C26398 + C26399) * C82581 * C82885) *
              C82938 * C688 -
          ((C25873 * C5142 - C26356 * C4974 - C25873 * C5456 + C82896 * C5611 +
            C25872 * C3529 - C26355 * C3346 - C25872 * C3861 + C25721 * C4026 +
            C25871 * C807 - C26354 * C693 - C25871 * C1005 + C25720 * C1104) *
               C82581 * C82885 +
           (C25873 * C5141 - C26356 * C4975 - C25873 * C5455 + C82896 * C5612 +
            C25872 * C3528 - C26355 * C3347 - C25872 * C3860 + C25721 * C4028 +
            C25871 * C806 - C26354 * C694 - C25871 * C1004 + C25720 * C1105) *
               C82581 * C82909 +
           (C25873 * C5140 - C26356 * C4976 - C25873 * C5454 + C82896 * C5613 +
            C25872 * C3527 - C26355 * C3348 - C25872 * C3859 + C25721 * C4030 +
            C25871 * C805 - C26354 * C695 - C25871 * C1003 + C25720 * C1106) *
               C82581 * C82925) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C25871 * C240 - C26354 * C102 - C25871 * C497 + C25720 * C608 +
            C25872 * C1265 - C26355 * C1155 - C25872 * C1463 + C25721 * C1566 +
            C25873 * C4299 - C26356 * C4108 - C25873 * C4683 + C82896 * C4854) *
               C82931 +
           (C29226 + C29227 + C29228) * C82916 +
           (C29229 + C29230 + C29231) * C82893) *
              C82523 * C82938 * C688 -
          ((C25873 * C17631 - C26356 * C17443 - C25873 * C17985 +
            C82896 * C18144 + C25872 * C16399 - C26355 * C16304 -
            C25872 * C16579 + C25721 * C16670 + C25871 * C2733 -
            C26354 * C2527 - C25871 * C3083 + C25720 * C3254) *
               C82893 +
           (C29231 + C29230 + C29229) * C82916 +
           (C29228 + C29227 + C29226) * C82931) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C30118 * C240 - C30393 * C102 - C30118 * C497 + C30017 * C608 +
           C30119 * C1265 - C30394 * C1155 - C30119 * C1463 + C30018 * C1566 +
           C30120 * C4299 - C30395 * C4108 - C30120 * C4683 + C30019 * C4854 +
           C30121 * C5904 - C30396 * C5690 - C30121 * C6262 + C30020 * C6437 +
           C30122 * C30123 - C30397 * C30022 - C30122 * C30303 +
           C30021 * C30398) *
              C82581 * C82523 * C82938 * C688 -
          (C30122 * C30532 - C30397 * C30442 - C30122 * C30706 +
           C30021 * C30793 + C30121 * C18459 - C30396 * C18262 -
           C30121 * C18817 + C30020 * C18988 + C30120 * C5140 - C30395 * C4976 -
           C30120 * C5454 + C30019 * C5613 + C30119 * C3527 - C30394 * C3348 -
           C30119 * C3859 + C30018 * C4030 + C30118 * C805 - C30393 * C695 -
           C30118 * C1003 + C30017 * C1106) *
              C82581 * C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((C92 * C108 - C93 * C102 - C92 * C109 + C81 * C120 + C94 * C110 -
               C95 * C103 - C94 * C111 + C82 * C121 + C96 * C112 - C97 * C104 -
               C96 * C113 + C83 * C122 + C98 * C114 - C99 * C105 - C98 * C115 +
               C84 * C123 + C100 * C116 - C101 * C106 - C100 * C117 +
               C85 * C124) *
                  C82592 * C82581 * C1149 -
              (C100 * C1156 - C101 * C1151 - C100 * C1157 + C85 * C1166 +
               C98 * C1158 - C99 * C1152 - C98 * C1159 + C84 * C1167 +
               C96 * C1160 - C97 * C1153 - C96 * C1161 + C83 * C1168 +
               C94 * C1162 - C95 * C1154 - C94 * C1163 + C82 * C1169 +
               C92 * C1164 - C93 * C1155 - C92 * C1165 + C81 * C1170) *
                  C82592 * C82581 * C1150) *
             C82939 * C82940 +
         0.5 * std::pow(Pi, 2.5) *
             (((C1647 * C108 - C1648 * C102 - C1647 * C109 + C1641 * C120 +
                C1649 * C110 - C1650 * C103 - C1649 * C111 + C1642 * C121 +
                C1651 * C112 - C1652 * C104 - C1651 * C113 + C82885 * C122) *
                   C82592 * C82931 +
               (C2574 + C2575 + C2576) * C82592 * C82916 +
               (C2577 + C2578 + C2579) * C82592 * C82893) *
                  C1149 -
              ((C1651 * C3349 - C1652 * C3343 - C1651 * C3350 + C82885 * C3361 +
                C1649 * C3351 - C1650 * C3344 - C1649 * C3352 + C1642 * C3362 +
                C1647 * C3353 - C1648 * C3345 - C1647 * C3354 + C1641 * C3363) *
                   C82592 * C82893 +
               (C1651 * C3355 - C1652 * C3346 - C1651 * C3356 + C82885 * C3364 +
                C1649 * C3357 - C1650 * C3347 - C1649 * C3358 + C1642 * C3365 +
                C1647 * C3359 - C1648 * C3348 - C1647 * C3360 + C1641 * C3366) *
                   C82592 * C82916 +
               (C1651 * C1160 - C1652 * C1153 - C1651 * C1161 + C82885 * C1168 +
                C1649 * C1162 - C1650 * C1154 - C1649 * C1163 + C1642 * C1169 +
                C1647 * C1164 - C1648 * C1155 - C1647 * C1165 + C1641 * C1170) *
                   C82592 * C82931) *
                  C1150) *
             C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1647 * C108 - C1648 * C102 - C1647 * C109 + C1641 * C120 +
            C1649 * C110 - C1650 * C103 - C1649 * C111 + C1642 * C121 +
            C1651 * C112 - C1652 * C104 - C1651 * C113 + C82885 * C122) *
               C82932 +
           (C5737 + C5738 + C5739) * C82918 +
           (C5740 + C5741 + C5742) * C82896) *
              C82581 * C1149 -
          ((C1651 * C5691 - C1652 * C5688 - C1651 * C5692 + C82885 * C5697 +
            C1649 * C5693 - C1650 * C5689 - C1649 * C5694 + C1642 * C5698 +
            C1647 * C5695 - C1648 * C5690 - C1647 * C5696 + C1641 * C5699) *
               C82896 +
           (C5742 + C5741 + C5740) * C82918 +
           (C5739 + C5738 + C5737) * C82932) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13259 * C108 - C13260 * C102 - C13259 * C109 + C82925 * C120 +
            C13261 * C110 - C13262 * C103 - C13261 * C111 + C82909 * C121 +
            C13263 * C112 - C13264 * C104 - C13263 * C113 + C82885 * C122) *
               C82592 * C13256 +
           (C14058 + C14059 + C14060) * C82592 * C13257 +
           (C14061 + C14062 + C14063) * C82592 * C82893) *
              C1149 -
          ((C13263 * C3349 - C13264 * C3343 - C13263 * C3350 + C82885 * C3361 +
            C13261 * C3351 - C13262 * C3344 - C13261 * C3352 + C82909 * C3362 +
            C13259 * C3353 - C13260 * C3345 - C13259 * C3354 + C82925 * C3363) *
               C82592 * C82893 +
           (C13263 * C3355 - C13264 * C3346 - C13263 * C3356 + C82885 * C3364 +
            C13261 * C3357 - C13262 * C3347 - C13261 * C3358 + C82909 * C3365 +
            C13259 * C3359 - C13260 * C3348 - C13259 * C3360 + C82925 * C3366) *
               C82592 * C13257 +
           (C13263 * C1160 - C13264 * C1153 - C13263 * C1161 + C82885 * C1168 +
            C13261 * C1162 - C13262 * C1154 - C13261 * C1163 + C82909 * C1169 +
            C13259 * C1164 - C13260 * C1155 - C13259 * C1165 + C82925 * C1170) *
               C82592 * C13256) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
               C82592 * C15400 +
           C15860 * C15401 + C15861 * C15402 + C15862 * C15403 +
           C15863 * C15404) *
              C1149 -
          ((C15405 * C16305 - C15406 * C16303 - C15405 * C16306 +
            C82523 * C16309) *
               C82592 * C15404 +
           (C15405 * C16307 - C15406 * C16304 - C15405 * C16308 +
            C82523 * C16310) *
               C82592 * C15403 +
           (C15405 * C3353 - C15406 * C3345 - C15405 * C3354 + C82523 * C3363) *
               C82592 * C15402 +
           (C15405 * C3359 - C15406 * C3348 - C15405 * C3360 + C82523 * C3366) *
               C82592 * C15401 +
           (C15405 * C1164 - C15406 * C1155 - C15405 * C1165 + C82523 * C1170) *
               C82592 * C15400) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C82932 +
            C18282 * C82918 + C18283 * C82896) *
               C13256 +
           (C17448 + C17478 + C17479) * C13257 +
           (C17457 + C17480 + C17481) * C82893) *
              C1149 -
          (((C15405 * C18263 - C15406 * C18261 - C15405 * C18264 +
             C82523 * C18267) *
                C82896 +
            C17477 * C82918 + C17476 * C82932) *
               C82893 +
           ((C15405 * C18265 - C15406 * C18262 - C15405 * C18266 +
             C82523 * C18268) *
                C82896 +
            C17475 * C82918 + C17474 * C82932) *
               C13257 +
           ((C15405 * C5695 - C15406 * C5690 - C15405 * C5696 +
             C82523 * C5699) *
                C82896 +
            C18283 * C82918 + C18282 * C82932) *
               C13256) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13259 * C108 - C13260 * C102 - C13259 * C109 + C82925 * C120 +
            C13261 * C110 - C13262 * C103 - C13261 * C111 + C82909 * C121 +
            C13263 * C112 - C13264 * C104 - C13263 * C113 + C82885 * C122) *
               C25720 +
           (C27176 + C27177 + C27178) * C25721 +
           (C27179 + C27180 + C27181) * C82896) *
              C82581 * C1149 -
          ((C13263 * C5691 - C13264 * C5688 - C13263 * C5692 + C82885 * C5697 +
            C13261 * C5693 - C13262 * C5689 - C13261 * C5694 + C82909 * C5698 +
            C13259 * C5695 - C13260 * C5690 - C13259 * C5696 + C82925 * C5699) *
               C82896 +
           (C27181 + C27180 + C27179) * C25721 +
           (C27178 + C27177 + C27176) * C25720) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C25720 +
            C18282 * C25721 + C18283 * C82896) *
               C82931 +
           (C28556 + C28557 + C28558) * C82916 +
           (C28559 + C28560 + C28561) * C82893) *
              C1149 -
          (((C15405 * C18263 - C15406 * C18261 - C15405 * C18264 +
             C82523 * C18267) *
                C82896 +
            C17477 * C25721 + C17476 * C25720) *
               C82893 +
           ((C15405 * C18265 - C15406 * C18262 - C15405 * C18266 +
             C82523 * C18268) *
                C82896 +
            C17475 * C25721 + C17474 * C25720) *
               C82916 +
           ((C15405 * C5695 - C15406 * C5690 - C15405 * C5696 +
             C82523 * C5699) *
                C82896 +
            C18283 * C25721 + C18282 * C25720) *
               C82931) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
               C30017 +
           C18282 * C30018 + C18283 * C30019 + C30853 * C30020 +
           C30854 * C30021) *
              C82581 * C1149 -
          ((C15405 * C30837 - C15406 * C30836 - C15405 * C30838 +
            C82523 * C30839) *
               C30021 +
           C30854 * C30020 + C30853 * C30019 + C18283 * C30018 +
           C18282 * C30017) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C82581 * C169 - C168 * C102) * C92 +
               (C82581 * C175 - C168 * C109) * C81 + (C182 - C183) * C94 +
               (C184 - C185) * C82 + (C186 - C187) * C96 + (C188 - C189) * C83 +
               (C190 - C191) * C98 + (C192 - C193) * C84 +
               (C194 - C195) * C100 + (C196 - C197) * C85) *
                  C82592 * C1149 +
              ((C168 * C1155 - C82581 * C1213) * C92 +
               (C168 * C1165 - C82581 * C1218) * C81 +
               (C168 * C1154 - C82581 * C1214) * C94 +
               (C168 * C1163 - C82581 * C1219) * C82 +
               (C168 * C1153 - C82581 * C1215) * C96 +
               (C168 * C1161 - C82581 * C1220) * C83 +
               (C168 * C1152 - C82581 * C1216) * C98 +
               (C168 * C1159 - C82581 * C1221) * C84 +
               (C168 * C1151 - C82581 * C1217) * C100 +
               (C168 * C1157 - C82581 * C1222) * C85) *
                  C82592 * C1150) *
             C82939 * C82940 +
         0.5 * std::pow(Pi, 2.5) *
             (((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
                C82893 * C1746 - C1745 * C1653) *
                   C1647 +
               (C82931 * C175 - C1743 * C109 + C82916 * C758 - C1744 * C705 +
                C82893 * C1750 - C1745 * C1658) *
                   C1641 +
               (C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C1649 +
               (C1761 - C1762 + C1763 - C1764 + C1765 - C1766) * C1642 +
               (C1767 - C1768 + C1769 - C1770 + C1771 - C1772) * C1651 +
               (C1773 - C1774 + C1775 - C1776 + C1777 - C1778) * C82885) *
                  C82592 * C1149 +
              ((C1743 * C1155 - C82931 * C1213 + C1744 * C3348 -
                C82916 * C3441 + C1745 * C3345 - C82893 * C3442) *
                   C1647 +
               (C1743 * C1165 - C82931 * C1218 + C1744 * C3360 -
                C82916 * C3447 + C1745 * C3354 - C82893 * C3448) *
                   C1641 +
               (C1743 * C1154 - C82931 * C1214 + C1744 * C3347 -
                C82916 * C3443 + C1745 * C3344 - C82893 * C3444) *
                   C1649 +
               (C1743 * C1163 - C82931 * C1219 + C1744 * C3358 -
                C82916 * C3449 + C1745 * C3352 - C82893 * C3450) *
                   C1642 +
               (C1743 * C1153 - C82931 * C1215 + C1744 * C3346 -
                C82916 * C3445 + C1745 * C3343 - C82893 * C3446) *
                   C1651 +
               (C1743 * C1161 - C82931 * C1220 + C1744 * C3356 -
                C82916 * C3451 + C1745 * C3350 - C82893 * C3452) *
                   C82885) *
                  C82592 * C1150) *
             C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C1647 +
            (C82581 * C175 - C168 * C109) * C1641 + (C182 - C183) * C1649 +
            (C184 - C185) * C1642 + (C186 - C187) * C1651 +
            (C188 - C189) * C82885) *
               C82932 +
           ((C5823 - C5824) * C1647 + (C5825 - C5826) * C1641 +
            (C4207 - C4208) * C1649 + (C4209 - C4210) * C1642 +
            (C4211 - C4212) * C1651 + (C4213 - C4214) * C82885) *
               C82918 +
           ((C5827 - C5828) * C1647 + (C5829 - C5830) * C1641 +
            (C4215 - C4216) * C1649 + (C4217 - C4218) * C1642 +
            (C4219 - C4220) * C1651 + (C4221 - C4222) * C82885) *
               C82896) *
              C1149 +
          (((C5824 - C5823) * C1647 + (C5826 - C5825) * C1641 +
            (C4208 - C4207) * C1649 + (C4210 - C4209) * C1642 +
            (C4212 - C4211) * C1651 + (C4214 - C4213) * C82885) *
               C82932 +
           ((C5828 - C5827) * C1647 + (C5830 - C5829) * C1641 +
            (C4216 - C4215) * C1649 + (C4218 - C4217) * C1642 +
            (C4220 - C4219) * C1651 + (C4222 - C4221) * C82885) *
               C82918 +
           ((C168 * C5690 - C82581 * C5816) * C1647 +
            (C168 * C5696 - C82581 * C5819) * C1641 +
            (C168 * C5689 - C82581 * C5817) * C1649 +
            (C168 * C5694 - C82581 * C5820) * C1642 +
            (C168 * C5688 - C82581 * C5818) * C1651 +
            (C168 * C5692 - C82581 * C5821) * C82885) *
               C82896) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
            C82893 * C1746 - C13341 * C1653) *
               C13259 +
           (C13256 * C175 - C13339 * C109 + C13257 * C758 - C13340 * C705 +
            C82893 * C1750 - C13341 * C1658) *
               C82925 +
           (C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C13261 +
           (C13349 - C13350 + C13351 - C13352 + C13353 - C13354) * C82909 +
           (C13355 - C13356 + C13357 - C13358 + C13359 - C13360) * C13263 +
           (C13361 - C13362 + C13363 - C13364 + C13365 - C13366) * C82885) *
              C82592 * C1149 +
          ((C13339 * C1155 - C13256 * C1213 + C13340 * C3348 - C13257 * C3441 +
            C13341 * C3345 - C82893 * C3442) *
               C13259 +
           (C13339 * C1165 - C13256 * C1218 + C13340 * C3360 - C13257 * C3447 +
            C13341 * C3354 - C82893 * C3448) *
               C82925 +
           (C13339 * C1154 - C13256 * C1214 + C13340 * C3347 - C13257 * C3443 +
            C13341 * C3344 - C82893 * C3444) *
               C13261 +
           (C13339 * C1163 - C13256 * C1219 + C13340 * C3358 - C13257 * C3449 +
            C13341 * C3352 - C82893 * C3450) *
               C82909 +
           (C13339 * C1153 - C13256 * C1215 + C13340 * C3346 - C13257 * C3445 +
            C13341 * C3343 - C82893 * C3446) *
               C13263 +
           (C13339 * C1161 - C13256 * C1220 + C13340 * C3356 - C13257 * C3451 +
            C13341 * C3350 - C82893 * C3452) *
               C82885) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15400 * C169 - C15457 * C102 + C15401 * C753 - C15458 * C695 +
            C15402 * C1746 - C15459 * C1653 + C15403 * C2653 - C15460 * C2527 +
            C15404 * C15462 - C15461 * C15407) *
               C15405 +
           (C15400 * C175 - C15457 * C109 + C15401 * C758 - C15458 * C705 +
            C15402 * C1750 - C15459 * C1658 + C15403 * C2656 - C15460 * C2533 +
            C15404 * C15464 - C15461 * C15410) *
               C82523) *
              C82592 * C1149 +
          ((C15457 * C1155 - C15400 * C1213 + C15458 * C3348 - C15401 * C3441 +
            C15459 * C3345 - C15402 * C3442 + C15460 * C16304 -
            C15403 * C16353 + C15461 * C16303 - C15404 * C16354) *
               C15405 +
           (C15457 * C1165 - C15400 * C1218 + C15458 * C3360 - C15401 * C3447 +
            C15459 * C3354 - C15402 * C3448 + C15460 * C16308 -
            C15403 * C16355 + C15461 * C16306 - C15404 * C16356) *
               C82523) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C15405 +
            (C13256 * C175 - C13339 * C109 + C13257 * C758 - C13340 * C705 +
             C82893 * C1750 - C13341 * C1658) *
                C82523) *
               C82932 +
           ((C18362 - C18363 + C18364 - C18365 + C18366 - C18367) * C15405 +
            (C18368 - C18369 + C18370 - C18371 + C18372 - C18373) * C82523) *
               C82918 +
           ((C18374 - C18375 + C18376 - C18377 + C18378 - C18379) * C15405 +
            (C18380 - C18381 + C18382 - C18383 + C18384 - C18385) * C82523) *
               C82896) *
              C1149 +
          (((C18363 - C18362 + C18365 - C18364 + C18367 - C18366) * C15405 +
            (C18369 - C18368 + C18371 - C18370 + C18373 - C18372) * C82523) *
               C82932 +
           ((C18375 - C18374 + C18377 - C18376 + C18379 - C18378) * C15405 +
            (C18381 - C18380 + C18383 - C18382 + C18385 - C18384) * C82523) *
               C82918 +
           ((C13339 * C5690 - C13256 * C5816 + C13340 * C18262 -
             C13257 * C18357 + C13341 * C18261 - C82893 * C18358) *
                C15405 +
            (C13339 * C5696 - C13256 * C5819 + C13340 * C18266 -
             C13257 * C18359 + C13341 * C18264 - C82893 * C18360) *
                C82523) *
               C82896) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C13259 +
            (C82581 * C175 - C168 * C109) * C82925 + (C182 - C183) * C13261 +
            (C184 - C185) * C82909 + (C186 - C187) * C13263 +
            (C188 - C189) * C82885) *
               C25720 +
           ((C5823 - C5824) * C13259 + (C5825 - C5826) * C82925 +
            (C4207 - C4208) * C13261 + (C4209 - C4210) * C82909 +
            (C4211 - C4212) * C13263 + (C4213 - C4214) * C82885) *
               C25721 +
           ((C5827 - C5828) * C13259 + (C5829 - C5830) * C82925 +
            (C4215 - C4216) * C13261 + (C4217 - C4218) * C82909 +
            (C4219 - C4220) * C13263 + (C4221 - C4222) * C82885) *
               C82896) *
              C1149 +
          (((C5824 - C5823) * C13259 + (C5826 - C5825) * C82925 +
            (C4208 - C4207) * C13261 + (C4210 - C4209) * C82909 +
            (C4212 - C4211) * C13263 + (C4214 - C4213) * C82885) *
               C25720 +
           ((C5828 - C5827) * C13259 + (C5830 - C5829) * C82925 +
            (C4216 - C4215) * C13261 + (C4218 - C4217) * C82909 +
            (C4220 - C4219) * C13263 + (C4222 - C4221) * C82885) *
               C25721 +
           ((C168 * C5690 - C82581 * C5816) * C13259 +
            (C168 * C5696 - C82581 * C5819) * C82925 +
            (C168 * C5689 - C82581 * C5817) * C13261 +
            (C168 * C5694 - C82581 * C5820) * C82909 +
            (C168 * C5688 - C82581 * C5818) * C13263 +
            (C168 * C5692 - C82581 * C5821) * C82885) *
               C82896) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
             C82893 * C1746 - C1745 * C1653) *
                C15405 +
            (C82931 * C175 - C1743 * C109 + C82916 * C758 - C1744 * C705 +
             C82893 * C1750 - C1745 * C1658) *
                C82523) *
               C25720 +
           ((C29380 - C29381 + C29382 - C29383 + C29384 - C29385) * C15405 +
            (C29386 - C29387 + C29388 - C29389 + C29390 - C29391) * C82523) *
               C25721 +
           ((C29392 - C29393 + C29394 - C29395 + C29396 - C29397) * C15405 +
            (C29398 - C29399 + C29400 - C29401 + C29402 - C29403) * C82523) *
               C82896) *
              C1149 +
          (((C29381 - C29380 + C29383 - C29382 + C29385 - C29384) * C15405 +
            (C29387 - C29386 + C29389 - C29388 + C29391 - C29390) * C82523) *
               C25720 +
           ((C29393 - C29392 + C29395 - C29394 + C29397 - C29396) * C15405 +
            (C29399 - C29398 + C29401 - C29400 + C29403 - C29402) * C82523) *
               C25721 +
           ((C1743 * C5690 - C82931 * C5816 + C1744 * C18262 - C82916 * C18357 +
             C1745 * C18261 - C82893 * C18358) *
                C15405 +
            (C1743 * C5696 - C82931 * C5819 + C1744 * C18266 - C82916 * C18359 +
             C1745 * C18264 - C82893 * C18360) *
                C82523) *
               C82896) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C15405 +
            (C82581 * C175 - C168 * C109) * C82523) *
               C30017 +
           ((C5823 - C5824) * C15405 + (C5825 - C5826) * C82523) * C30018 +
           ((C5827 - C5828) * C15405 + (C5829 - C5830) * C82523) * C30019 +
           ((C30899 - C30900) * C15405 + (C30901 - C30902) * C82523) * C30020 +
           ((C30903 - C30904) * C15405 + (C30905 - C30906) * C82523) * C30021) *
              C1149 +
          (((C5824 - C5823) * C15405 + (C5826 - C5825) * C82523) * C30017 +
           ((C5828 - C5827) * C15405 + (C5830 - C5829) * C82523) * C30018 +
           ((C30900 - C30899) * C15405 + (C30902 - C30901) * C82523) * C30019 +
           ((C30904 - C30903) * C15405 + (C30906 - C30905) * C82523) * C30020 +
           ((C168 * C30836 - C82581 * C30896) * C15405 +
            (C168 * C30838 - C82581 * C30897) * C82523) *
               C30021) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C82592 * C240 - C239 * C102) * C92 +
               (C82592 * C246 - C239 * C109) * C81 + (C253 - C254) * C94 +
               (C255 - C256) * C82 + (C257 - C258) * C96 + (C259 - C260) * C83 +
               (C261 - C262) * C98 + (C263 - C264) * C84 +
               (C265 - C266) * C100 + (C267 - C268) * C85) *
                  C82581 * C1149 +
              ((C239 * C1155 - C82592 * C1265) * C92 +
               (C239 * C1165 - C82592 * C1270) * C81 +
               (C239 * C1154 - C82592 * C1266) * C94 +
               (C239 * C1163 - C82592 * C1271) * C82 +
               (C239 * C1153 - C82592 * C1267) * C96 +
               (C239 * C1161 - C82592 * C1272) * C83 +
               (C239 * C1152 - C82592 * C1268) * C98 +
               (C239 * C1159 - C82592 * C1273) * C84 +
               (C239 * C1151 - C82592 * C1269) * C100 +
               (C239 * C1157 - C82592 * C1274) * C85) *
                  C82581 * C1150) *
             C82939 * C82940 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C82592 * C240 - C239 * C102) * C1647 +
                (C82592 * C246 - C239 * C109) * C1641 + (C253 - C254) * C1649 +
                (C255 - C256) * C1642 + (C257 - C258) * C1651 +
                (C259 - C260) * C82885) *
                   C82931 +
               ((C2740 - C2741) * C1647 + (C2742 - C2743) * C1641 +
                (C1861 - C1862) * C1649 + (C1863 - C1864) * C1642 +
                (C1865 - C1866) * C1651 + (C1867 - C1868) * C82885) *
                   C82916 +
               ((C2744 - C2745) * C1647 + (C2746 - C2747) * C1641 +
                (C1869 - C1870) * C1649 + (C1871 - C1872) * C1642 +
                (C1873 - C1874) * C1651 + (C1875 - C1876) * C82885) *
                   C82893) *
                  C1149 +
              (((C239 * C1155 - C82592 * C1265) * C1647 +
                (C239 * C1165 - C82592 * C1270) * C1641 +
                (C239 * C1154 - C82592 * C1266) * C1649 +
                (C239 * C1163 - C82592 * C1271) * C1642 +
                (C239 * C1153 - C82592 * C1267) * C1651 +
                (C239 * C1161 - C82592 * C1272) * C82885) *
                   C82931 +
               ((C239 * C3348 - C82592 * C3527) * C1647 +
                (C239 * C3360 - C82592 * C3533) * C1641 +
                (C239 * C3347 - C82592 * C3528) * C1649 +
                (C239 * C3358 - C82592 * C3534) * C1642 +
                (C239 * C3346 - C82592 * C3529) * C1651 +
                (C239 * C3356 - C82592 * C3535) * C82885) *
                   C82916 +
               ((C239 * C3345 - C82592 * C3530) * C1647 +
                (C239 * C3354 - C82592 * C3536) * C1641 +
                (C239 * C3344 - C82592 * C3531) * C1649 +
                (C239 * C3352 - C82592 * C3537) * C1642 +
                (C239 * C3343 - C82592 * C3532) * C1651 +
                (C239 * C3350 - C82592 * C3538) * C82885) *
                   C82893) *
                  C1150) *
             C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
            C82896 * C4299 - C4298 * C4108) *
               C1647 +
           (C82932 * C246 - C4296 * C109 + C82918 * C1270 - C4297 * C1165 +
            C82896 * C4303 - C4298 * C4113) *
               C1641 +
           (C4308 - C4309 + C4310 - C4311 + C4312 - C4313) * C1649 +
           (C4314 - C4315 + C4316 - C4317 + C4318 - C4319) * C1642 +
           (C4320 - C4321 + C4322 - C4323 + C4324 - C4325) * C1651 +
           (C4326 - C4327 + C4328 - C4329 + C4330 - C4331) * C82885) *
              C82581 * C1149 +
          ((C4296 * C1155 - C82932 * C1265 + C4297 * C4108 - C82918 * C4299 +
            C4298 * C5690 - C82896 * C5904) *
               C1647 +
           (C4296 * C1165 - C82932 * C1270 + C4297 * C4113 - C82918 * C4303 +
            C4298 * C5696 - C82896 * C5907) *
               C1641 +
           (C4296 * C1154 - C82932 * C1266 + C4297 * C4109 - C82918 * C4300 +
            C4298 * C5689 - C82896 * C5905) *
               C1649 +
           (C4296 * C1163 - C82932 * C1271 + C4297 * C4115 - C82918 * C4304 +
            C4298 * C5694 - C82896 * C5908) *
               C1642 +
           (C4296 * C1153 - C82932 * C1267 + C4297 * C4110 - C82918 * C4301 +
            C4298 * C5688 - C82896 * C5906) *
               C1651 +
           (C4296 * C1161 - C82932 * C1272 + C4297 * C4117 - C82918 * C4305 +
            C4298 * C5692 - C82896 * C5909) *
               C82885) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C13259 +
            (C82592 * C246 - C239 * C109) * C82925 + (C253 - C254) * C13261 +
            (C255 - C256) * C82909 + (C257 - C258) * C13263 +
            (C259 - C260) * C82885) *
               C13256 +
           ((C2740 - C2741) * C13259 + (C2742 - C2743) * C82925 +
            (C1861 - C1862) * C13261 + (C1863 - C1864) * C82909 +
            (C1865 - C1866) * C13263 + (C1867 - C1868) * C82885) *
               C13257 +
           ((C2744 - C2745) * C13259 + (C2746 - C2747) * C82925 +
            (C1869 - C1870) * C13261 + (C1871 - C1872) * C82909 +
            (C1873 - C1874) * C13263 + (C1875 - C1876) * C82885) *
               C82893) *
              C1149 +
          (((C239 * C1155 - C82592 * C1265) * C13259 +
            (C239 * C1165 - C82592 * C1270) * C82925 +
            (C239 * C1154 - C82592 * C1266) * C13261 +
            (C239 * C1163 - C82592 * C1271) * C82909 +
            (C239 * C1153 - C82592 * C1267) * C13263 +
            (C239 * C1161 - C82592 * C1272) * C82885) *
               C13256 +
           ((C239 * C3348 - C82592 * C3527) * C13259 +
            (C239 * C3360 - C82592 * C3533) * C82925 +
            (C239 * C3347 - C82592 * C3528) * C13261 +
            (C239 * C3358 - C82592 * C3534) * C82909 +
            (C239 * C3346 - C82592 * C3529) * C13263 +
            (C239 * C3356 - C82592 * C3535) * C82885) *
               C13257 +
           ((C239 * C3345 - C82592 * C3530) * C13259 +
            (C239 * C3354 - C82592 * C3536) * C82925 +
            (C239 * C3344 - C82592 * C3531) * C13261 +
            (C239 * C3352 - C82592 * C3537) * C82909 +
            (C239 * C3343 - C82592 * C3532) * C13263 +
            (C239 * C3350 - C82592 * C3538) * C82885) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C15405 +
            (C82592 * C246 - C239 * C109) * C82523) *
               C15400 +
           ((C2740 - C2741) * C15405 + (C2742 - C2743) * C82523) * C15401 +
           ((C2744 - C2745) * C15405 + (C2746 - C2747) * C82523) * C15402 +
           ((C15952 - C15953) * C15405 + (C15954 - C15955) * C82523) * C15403 +
           ((C15956 - C15957) * C15405 + (C15958 - C15959) * C82523) * C15404) *
              C1149 +
          (((C239 * C1155 - C82592 * C1265) * C15405 +
            (C239 * C1165 - C82592 * C1270) * C82523) *
               C15400 +
           ((C239 * C3348 - C82592 * C3527) * C15405 +
            (C239 * C3360 - C82592 * C3533) * C82523) *
               C15401 +
           ((C239 * C3345 - C82592 * C3530) * C15405 +
            (C239 * C3354 - C82592 * C3536) * C82523) *
               C15402 +
           ((C239 * C16304 - C82592 * C16399) * C15405 +
            (C239 * C16308 - C82592 * C16401) * C82523) *
               C15403 +
           ((C239 * C16303 - C82592 * C16400) * C15405 +
            (C239 * C16306 - C82592 * C16402) * C82523) *
               C15404) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
             C82896 * C4299 - C4298 * C4108) *
                C15405 +
            (C82932 * C246 - C4296 * C109 + C82918 * C1270 - C4297 * C1165 +
             C82896 * C4303 - C4298 * C4113) *
                C82523) *
               C13256 +
           ((C17634 - C17635 + C17636 - C17637 + C17638 - C17639) * C15405 +
            (C17640 - C17641 + C17642 - C17643 + C17644 - C17645) * C82523) *
               C13257 +
           ((C17646 - C17647 + C17648 - C17649 + C17650 - C17651) * C15405 +
            (C17652 - C17653 + C17654 - C17655 + C17656 - C17657) * C82523) *
               C82893) *
              C1149 +
          (((C4296 * C1155 - C82932 * C1265 + C4297 * C4108 - C82918 * C4299 +
             C4298 * C5690 - C82896 * C5904) *
                C15405 +
            (C4296 * C1165 - C82932 * C1270 + C4297 * C4113 - C82918 * C4303 +
             C4298 * C5696 - C82896 * C5907) *
                C82523) *
               C13256 +
           ((C4296 * C3348 - C82932 * C3527 + C4297 * C4976 - C82918 * C5140 +
             C4298 * C18262 - C82896 * C18459) *
                C15405 +
            (C4296 * C3360 - C82932 * C3533 + C4297 * C4982 - C82918 * C5143 +
             C4298 * C18266 - C82896 * C18461) *
                C82523) *
               C13257 +
           ((C4296 * C3345 - C82932 * C3530 + C4297 * C16745 - C82918 * C16905 +
             C4298 * C18261 - C82896 * C18460) *
                C15405 +
            (C4296 * C3354 - C82932 * C3536 + C4297 * C16748 - C82918 * C16907 +
             C4298 * C18264 - C82896 * C18462) *
                C82523) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
            C82896 * C4299 - C25873 * C4108) *
               C13259 +
           (C25720 * C246 - C25871 * C109 + C25721 * C1270 - C25872 * C1165 +
            C82896 * C4303 - C25873 * C4113) *
               C82925 +
           (C25875 - C25876 + C25877 - C25878 + C25879 - C25880) * C13261 +
           (C25881 - C25882 + C25883 - C25884 + C25885 - C25886) * C82909 +
           (C25887 - C25888 + C25889 - C25890 + C25891 - C25892) * C13263 +
           (C25893 - C25894 + C25895 - C25896 + C25897 - C25898) * C82885) *
              C82581 * C1149 +
          ((C25871 * C1155 - C25720 * C1265 + C25872 * C4108 - C25721 * C4299 +
            C25873 * C5690 - C82896 * C5904) *
               C13259 +
           (C25871 * C1165 - C25720 * C1270 + C25872 * C4113 - C25721 * C4303 +
            C25873 * C5696 - C82896 * C5907) *
               C82925 +
           (C25871 * C1154 - C25720 * C1266 + C25872 * C4109 - C25721 * C4300 +
            C25873 * C5689 - C82896 * C5905) *
               C13261 +
           (C25871 * C1163 - C25720 * C1271 + C25872 * C4115 - C25721 * C4304 +
            C25873 * C5694 - C82896 * C5908) *
               C82909 +
           (C25871 * C1153 - C25720 * C1267 + C25872 * C4110 - C25721 * C4301 +
            C25873 * C5688 - C82896 * C5906) *
               C13263 +
           (C25871 * C1161 - C25720 * C1272 + C25872 * C4117 - C25721 * C4305 +
            C25873 * C5692 - C82896 * C5909) *
               C82885) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
             C82896 * C4299 - C25873 * C4108) *
                C15405 +
            (C25720 * C246 - C25871 * C109 + C25721 * C1270 - C25872 * C1165 +
             C82896 * C4303 - C25873 * C4113) *
                C82523) *
               C82931 +
           ((C28710 - C28711 + C28712 - C28713 + C28714 - C28715) * C15405 +
            (C28716 - C28717 + C28718 - C28719 + C28720 - C28721) * C82523) *
               C82916 +
           ((C28722 - C28723 + C28724 - C28725 + C28726 - C28727) * C15405 +
            (C28728 - C28729 + C28730 - C28731 + C28732 - C28733) * C82523) *
               C82893) *
              C1149 +
          (((C25871 * C1155 - C25720 * C1265 + C25872 * C4108 - C25721 * C4299 +
             C25873 * C5690 - C82896 * C5904) *
                C15405 +
            (C25871 * C1165 - C25720 * C1270 + C25872 * C4113 - C25721 * C4303 +
             C25873 * C5696 - C82896 * C5907) *
                C82523) *
               C82931 +
           ((C25871 * C3348 - C25720 * C3527 + C25872 * C4976 - C25721 * C5140 +
             C25873 * C18262 - C82896 * C18459) *
                C15405 +
            (C25871 * C3360 - C25720 * C3533 + C25872 * C4982 - C25721 * C5143 +
             C25873 * C18266 - C82896 * C18461) *
                C82523) *
               C82916 +
           ((C25871 * C3345 - C25720 * C3530 + C25872 * C16745 -
             C25721 * C16905 + C25873 * C18261 - C82896 * C18460) *
                C15405 +
            (C25871 * C3354 - C25720 * C3536 + C25872 * C16748 -
             C25721 * C16907 + C25873 * C18264 - C82896 * C18462) *
                C82523) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C30017 * C240 - C30118 * C102 + C30018 * C1265 - C30119 * C1155 +
            C30019 * C4299 - C30120 * C4108 + C30020 * C5904 - C30121 * C5690 +
            C30021 * C30123 - C30122 * C30022) *
               C15405 +
           (C30017 * C246 - C30118 * C109 + C30018 * C1270 - C30119 * C1165 +
            C30019 * C4303 - C30120 * C4113 + C30020 * C5907 - C30121 * C5696 +
            C30021 * C30125 - C30122 * C30025) *
               C82523) *
              C82581 * C1149 +
          ((C30118 * C1155 - C30017 * C1265 + C30119 * C4108 - C30018 * C4299 +
            C30120 * C5690 - C30019 * C5904 + C30121 * C30022 -
            C30020 * C30123 + C30122 * C30836 - C30021 * C30948) *
               C15405 +
           (C30118 * C1165 - C30017 * C1270 + C30119 * C4113 - C30018 * C4303 +
            C30120 * C5696 - C30019 * C5907 + C30121 * C30025 -
            C30020 * C30125 + C30122 * C30838 - C30021 * C30949) *
               C82523) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C81 * C108 - C92 * C102 + C82 * C110 - C94 * C103 + C83 * C112 -
                C96 * C104 + C84 * C114 - C98 * C105 + C85 * C116 -
                C100 * C106) *
                   C168 +
               (C81 * C316 - C92 * C310 + C82 * C317 - C94 * C311 + C83 * C318 -
                C96 * C312 + C84 * C319 - C98 * C313 + C85 * C320 -
                C100 * C314) *
                   C82581) *
                  C82592 * C1149 +
              ((C92 * C1155 - C81 * C1164 + C94 * C1154 - C82 * C1162 +
                C96 * C1153 - C83 * C1160 + C98 * C1152 - C84 * C1158 +
                C100 * C1151 - C85 * C1156) *
                   C168 +
               (C92 * C1317 - C81 * C1322 + C94 * C1318 - C82 * C1323 +
                C96 * C1319 - C83 * C1324 + C98 * C1320 - C84 * C1325 +
                C100 * C1321 - C85 * C1326) *
                   C82581) *
                  C82592 * C1150) *
             C82939 * C82940 +
         0.5 * std::pow(Pi, 2.5) *
             (((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
                C82885 * C112 - C1651 * C104) *
                   C1743 +
               (C1641 * C316 - C1647 * C310 + C1642 * C317 - C1649 * C311 +
                C82885 * C318 - C1651 * C312) *
                   C82931 +
               (C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C1744 +
               (C2834 - C2835 + C2836 - C2837 + C2838 - C2839) * C82916 +
               (C2840 - C2841 + C2842 - C2843 + C2844 - C2845) * C1745 +
               (C2846 - C2847 + C2848 - C2849 + C2850 - C2851) * C82893) *
                  C82592 * C1149 +
              ((C1647 * C1155 - C1641 * C1164 + C1649 * C1154 - C1642 * C1162 +
                C1651 * C1153 - C82885 * C1160) *
                   C1743 +
               (C1647 * C1317 - C1641 * C1322 + C1649 * C1318 - C1642 * C1323 +
                C1651 * C1319 - C82885 * C1324) *
                   C82931 +
               (C1647 * C3348 - C1641 * C3359 + C1649 * C3347 - C1642 * C3357 +
                C1651 * C3346 - C82885 * C3355) *
                   C1744 +
               (C1647 * C3613 - C1641 * C3619 + C1649 * C3614 - C1642 * C3620 +
                C1651 * C3615 - C82885 * C3621) *
                   C82916 +
               (C1647 * C3345 - C1641 * C3353 + C1649 * C3344 - C1642 * C3351 +
                C1651 * C3343 - C82885 * C3349) *
                   C1745 +
               (C1647 * C3616 - C1641 * C3622 + C1649 * C3617 - C1642 * C3623 +
                C1651 * C3618 - C82885 * C3624) *
                   C82893) *
                  C82592 * C1150) *
             C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
             C82885 * C112 - C1651 * C104) *
                C168 +
            (C1641 * C316 - C1647 * C310 + C1642 * C317 - C1649 * C311 +
             C82885 * C318 - C1651 * C312) *
                C82581) *
               C82932 +
           ((C5991 - C5992 + C5993 - C5994 + C5995 - C5996) * C168 +
            (C5997 - C5998 + C5999 - C6000 + C6001 - C6002) * C82581) *
               C82918 +
           ((C6003 - C6004 + C6005 - C6006 + C6007 - C6008) * C168 +
            (C6009 - C6010 + C6011 - C6012 + C6013 - C6014) * C82581) *
               C82896) *
              C1149 +
          (((C5992 - C5991 + C5994 - C5993 + C5996 - C5995) * C168 +
            (C5998 - C5997 + C6000 - C5999 + C6002 - C6001) * C82581) *
               C82932 +
           ((C6004 - C6003 + C6006 - C6005 + C6008 - C6007) * C168 +
            (C6010 - C6009 + C6012 - C6011 + C6014 - C6013) * C82581) *
               C82918 +
           ((C1647 * C5690 - C1641 * C5695 + C1649 * C5689 - C1642 * C5693 +
             C1651 * C5688 - C82885 * C5691) *
                C168 +
            (C1647 * C5984 - C1641 * C5987 + C1649 * C5985 - C1642 * C5988 +
             C1651 * C5986 - C82885 * C5989) *
                C82581) *
               C82896) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
            C82885 * C112 - C13263 * C104) *
               C13339 +
           (C82925 * C316 - C13259 * C310 + C82909 * C317 - C13261 * C311 +
            C82885 * C318 - C13263 * C312) *
               C13256 +
           (C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C13340 +
           (C14292 - C14293 + C14294 - C14295 + C14296 - C14297) * C13257 +
           (C14298 - C14299 + C14300 - C14301 + C14302 - C14303) * C13341 +
           (C14304 - C14305 + C14306 - C14307 + C14308 - C14309) * C82893) *
              C82592 * C1149 +
          ((C13259 * C1155 - C82925 * C1164 + C13261 * C1154 - C82909 * C1162 +
            C13263 * C1153 - C82885 * C1160) *
               C13339 +
           (C13259 * C1317 - C82925 * C1322 + C13261 * C1318 - C82909 * C1323 +
            C13263 * C1319 - C82885 * C1324) *
               C13256 +
           (C13259 * C3348 - C82925 * C3359 + C13261 * C3347 - C82909 * C3357 +
            C13263 * C3346 - C82885 * C3355) *
               C13340 +
           (C13259 * C3613 - C82925 * C3619 + C13261 * C3614 - C82909 * C3620 +
            C13263 * C3615 - C82885 * C3621) *
               C13257 +
           (C13259 * C3345 - C82925 * C3353 + C13261 * C3344 - C82909 * C3351 +
            C13263 * C3343 - C82885 * C3349) *
               C13341 +
           (C13259 * C3616 - C82925 * C3622 + C13261 * C3617 - C82909 * C3623 +
            C13263 * C3618 - C82885 * C3624) *
               C82893) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C82523 * C108 - C15405 * C102) * C15457 +
           (C82523 * C316 - C15405 * C310) * C15400 +
           (C16004 - C16005) * C15458 + (C16006 - C16007) * C15401 +
           (C16008 - C16009) * C15459 + (C16010 - C16011) * C15402 +
           (C16012 - C16013) * C15460 + (C16014 - C16015) * C15403 +
           (C16016 - C16017) * C15461 + (C16018 - C16019) * C15404) *
              C82592 * C1149 +
          ((C15405 * C1155 - C82523 * C1164) * C15457 +
           (C15405 * C1317 - C82523 * C1322) * C15400 +
           (C15405 * C3348 - C82523 * C3359) * C15458 +
           (C15405 * C3613 - C82523 * C3619) * C15401 +
           (C15405 * C3345 - C82523 * C3353) * C15459 +
           (C15405 * C3616 - C82523 * C3622) * C15402 +
           (C15405 * C16304 - C82523 * C16307) * C15460 +
           (C15405 * C16445 - C82523 * C16447) * C15403 +
           (C15405 * C16303 - C82523 * C16305) * C15461 +
           (C15405 * C16446 - C82523 * C16448) * C15404) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C13339 +
            (C82523 * C316 - C15405 * C310) * C13256 +
            (C16004 - C16005) * C13340 + (C16006 - C16007) * C13257 +
            (C16008 - C16009) * C13341 + (C16010 - C16011) * C82893) *
               C82932 +
           ((C18542 - C18543) * C13339 + (C18544 - C18545) * C13256 +
            (C17734 - C17735) * C13340 + (C17736 - C17737) * C13257 +
            (C17738 - C17739) * C13341 + (C17740 - C17741) * C82893) *
               C82918 +
           ((C18546 - C18547) * C13339 + (C18548 - C18549) * C13256 +
            (C17742 - C17743) * C13340 + (C17744 - C17745) * C13257 +
            (C17746 - C17747) * C13341 + (C17748 - C17749) * C82893) *
               C82896) *
              C1149 +
          (((C18543 - C18542) * C13339 + (C18545 - C18544) * C13256 +
            (C17735 - C17734) * C13340 + (C17737 - C17736) * C13257 +
            (C17739 - C17738) * C13341 + (C17741 - C17740) * C82893) *
               C82932 +
           ((C18547 - C18546) * C13339 + (C18549 - C18548) * C13256 +
            (C17743 - C17742) * C13340 + (C17745 - C17744) * C13257 +
            (C17747 - C17746) * C13341 + (C17749 - C17748) * C82893) *
               C82918 +
           ((C15405 * C5690 - C82523 * C5695) * C13339 +
            (C15405 * C5984 - C82523 * C5987) * C13256 +
            (C15405 * C18262 - C82523 * C18265) * C13340 +
            (C15405 * C18537 - C82523 * C18539) * C13257 +
            (C15405 * C18261 - C82523 * C18263) * C13341 +
            (C15405 * C18538 - C82523 * C18540) * C82893) *
               C82896) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C168 +
            (C82925 * C316 - C13259 * C310 + C82909 * C317 - C13261 * C311 +
             C82885 * C318 - C13263 * C312) *
                C82581) *
               C25720 +
           ((C27404 - C27405 + C27406 - C27407 + C27408 - C27409) * C168 +
            (C27410 - C27411 + C27412 - C27413 + C27414 - C27415) * C82581) *
               C25721 +
           ((C27416 - C27417 + C27418 - C27419 + C27420 - C27421) * C168 +
            (C27422 - C27423 + C27424 - C27425 + C27426 - C27427) * C82581) *
               C82896) *
              C1149 +
          (((C27405 - C27404 + C27407 - C27406 + C27409 - C27408) * C168 +
            (C27411 - C27410 + C27413 - C27412 + C27415 - C27414) * C82581) *
               C25720 +
           ((C27417 - C27416 + C27419 - C27418 + C27421 - C27420) * C168 +
            (C27423 - C27422 + C27425 - C27424 + C27427 - C27426) * C82581) *
               C25721 +
           ((C13259 * C5690 - C82925 * C5695 + C13261 * C5689 - C82909 * C5693 +
             C13263 * C5688 - C82885 * C5691) *
                C168 +
            (C13259 * C5984 - C82925 * C5987 + C13261 * C5985 - C82909 * C5988 +
             C13263 * C5986 - C82885 * C5989) *
                C82581) *
               C82896) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C1743 +
            (C82523 * C316 - C15405 * C310) * C82931 +
            (C16004 - C16005) * C1744 + (C16006 - C16007) * C82916 +
            (C16008 - C16009) * C1745 + (C16010 - C16011) * C82893) *
               C25720 +
           ((C18542 - C18543) * C1743 + (C18544 - C18545) * C82931 +
            (C17734 - C17735) * C1744 + (C17736 - C17737) * C82916 +
            (C17738 - C17739) * C1745 + (C17740 - C17741) * C82893) *
               C25721 +
           ((C18546 - C18547) * C1743 + (C18548 - C18549) * C82931 +
            (C17742 - C17743) * C1744 + (C17744 - C17745) * C82916 +
            (C17746 - C17747) * C1745 + (C17748 - C17749) * C82893) *
               C82896) *
              C1149 +
          (((C18543 - C18542) * C1743 + (C18545 - C18544) * C82931 +
            (C17735 - C17734) * C1744 + (C17737 - C17736) * C82916 +
            (C17739 - C17738) * C1745 + (C17741 - C17740) * C82893) *
               C25720 +
           ((C18547 - C18546) * C1743 + (C18549 - C18548) * C82931 +
            (C17743 - C17742) * C1744 + (C17745 - C17744) * C82916 +
            (C17747 - C17746) * C1745 + (C17749 - C17748) * C82893) *
               C25721 +
           ((C15405 * C5690 - C82523 * C5695) * C1743 +
            (C15405 * C5984 - C82523 * C5987) * C82931 +
            (C15405 * C18262 - C82523 * C18265) * C1744 +
            (C15405 * C18537 - C82523 * C18539) * C82916 +
            (C15405 * C18261 - C82523 * C18263) * C1745 +
            (C15405 * C18538 - C82523 * C18540) * C82893) *
               C82896) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C168 +
            (C82523 * C316 - C15405 * C310) * C82581) *
               C30017 +
           ((C18542 - C18543) * C168 + (C18544 - C18545) * C82581) * C30018 +
           ((C18546 - C18547) * C168 + (C18548 - C18549) * C82581) * C30019 +
           ((C30995 - C30996) * C168 + (C30997 - C30998) * C82581) * C30020 +
           ((C30999 - C31000) * C168 + (C31001 - C31002) * C82581) * C30021) *
              C1149 +
          (((C18543 - C18542) * C168 + (C18545 - C18544) * C82581) * C30017 +
           ((C18547 - C18546) * C168 + (C18549 - C18548) * C82581) * C30018 +
           ((C30996 - C30995) * C168 + (C30998 - C30997) * C82581) * C30019 +
           ((C31000 - C30999) * C168 + (C31002 - C31001) * C82581) * C30020 +
           ((C15405 * C30836 - C82523 * C30837) * C168 +
            (C15405 * C30992 - C82523 * C30993) * C82581) *
               C30021) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C81 +
               C396 * C82 + C397 * C83 + C398 * C84 + C399 * C85) *
                  C82592 * C1149 -
              ((C168 * C1217 - C364 * C1151 - C168 * C1321 + C82581 * C1369) *
                   C85 +
               (C168 * C1216 - C364 * C1152 - C168 * C1320 + C82581 * C1370) *
                   C84 +
               (C168 * C1215 - C364 * C1153 - C168 * C1319 + C82581 * C1371) *
                   C83 +
               (C168 * C1214 - C364 * C1154 - C168 * C1318 + C82581 * C1372) *
                   C82 +
               (C168 * C1213 - C364 * C1155 - C168 * C1317 + C82581 * C1373) *
                   C81) *
                  C82592 * C1150) *
             C82939 * C82940 +
         0.5 * std::pow(Pi, 2.5) *
             (((C1743 * C169 - C2032 * C102 - C1743 * C310 + C82931 * C365 +
                C1744 * C753 - C2033 * C695 - C1744 * C857 + C82916 * C913 +
                C1745 * C1746 - C2034 * C1653 - C1745 * C1950 +
                C82893 * C2035) *
                   C1641 +
               (C2076 + C2077 + C2078) * C1642 +
               (C2079 + C2080 + C2081) * C82885) *
                  C82592 * C1149 -
              ((C1745 * C3446 - C2034 * C3343 - C1745 * C3618 + C82893 * C3699 +
                C1744 * C3445 - C2033 * C3346 - C1744 * C3615 + C82916 * C3700 +
                C1743 * C1215 - C2032 * C1153 - C1743 * C1319 +
                C82931 * C1371) *
                   C82885 +
               (C1745 * C3444 - C2034 * C3344 - C1745 * C3617 + C82893 * C3701 +
                C1744 * C3443 - C2033 * C3347 - C1744 * C3614 + C82916 * C3702 +
                C1743 * C1214 - C2032 * C1154 - C1743 * C1318 +
                C82931 * C1372) *
                   C1642 +
               (C1745 * C3442 - C2034 * C3345 - C1745 * C3616 + C82893 * C3703 +
                C1744 * C3441 - C2033 * C3348 - C1744 * C3613 + C82916 * C3704 +
                C1743 * C1213 - C2032 * C1155 - C1743 * C1317 +
                C82931 * C1373) *
                   C1641) *
                  C82592 * C1150) *
             C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C1641 +
            C396 * C1642 + C397 * C82885) *
               C82932 +
           (C6110 + C6096 + C6097) * C82918 +
           (C6111 + C6102 + C6103) * C82896) *
              C1149 -
          (((C168 * C5818 - C364 * C5688 - C168 * C5986 + C82581 * C6088) *
                C82885 +
            (C168 * C5817 - C364 * C5689 - C168 * C5985 + C82581 * C6089) *
                C1642 +
            (C168 * C5816 - C364 * C5690 - C168 * C5984 + C82581 * C6090) *
                C1641) *
               C82896 +
           (C6103 + C6102 + C6111) * C82918 +
           (C6097 + C6096 + C6110) * C82932) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13339 * C169 - C13588 * C102 - C13339 * C310 + C13256 * C365 +
            C13340 * C753 - C13589 * C695 - C13340 * C857 + C13257 * C913 +
            C13341 * C1746 - C13590 * C1653 - C13341 * C1950 + C82893 * C2035) *
               C82925 +
           (C13628 + C13629 + C13630) * C82909 +
           (C13631 + C13632 + C13633) * C82885) *
              C82592 * C1149 -
          ((C13341 * C3446 - C13590 * C3343 - C13341 * C3618 + C82893 * C3699 +
            C13340 * C3445 - C13589 * C3346 - C13340 * C3615 + C13257 * C3700 +
            C13339 * C1215 - C13588 * C1153 - C13339 * C1319 + C13256 * C1371) *
               C82885 +
           (C13341 * C3444 - C13590 * C3344 - C13341 * C3617 + C82893 * C3701 +
            C13340 * C3443 - C13589 * C3347 - C13340 * C3614 + C13257 * C3702 +
            C13339 * C1214 - C13588 * C1154 - C13339 * C1318 + C13256 * C1372) *
               C82909 +
           (C13341 * C3442 - C13590 * C3345 - C13341 * C3616 + C82893 * C3703 +
            C13340 * C3441 - C13589 * C3348 - C13340 * C3613 + C13257 * C3704 +
            C13339 * C1213 - C13588 * C1155 - C13339 * C1317 + C13256 * C1373) *
               C82925) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C15457 * C169 - C15600 * C102 - C15457 * C310 + C15400 * C365 +
           C15458 * C753 - C15601 * C695 - C15458 * C857 + C15401 * C913 +
           C15459 * C1746 - C15602 * C1653 - C15459 * C1950 + C15402 * C2035 +
           C15460 * C2653 - C15603 * C2527 - C15460 * C2821 + C15403 * C2927 +
           C15461 * C15462 - C15604 * C15407 - C15461 * C15554 +
           C15404 * C15605) *
              C82523 * C82592 * C1149 -
          (C15461 * C16354 - C15604 * C16303 - C15461 * C16446 +
           C15404 * C16491 + C15460 * C16353 - C15603 * C16304 -
           C15460 * C16445 + C15403 * C16492 + C15459 * C3442 - C15602 * C3345 -
           C15459 * C3616 + C15402 * C3703 + C15458 * C3441 - C15601 * C3348 -
           C15458 * C3613 + C15401 * C3704 + C15457 * C1213 - C15600 * C1155 -
           C15457 * C1317 + C15400 * C1373) *
              C82523 * C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13339 * C169 - C13588 * C102 - C13339 * C310 + C13256 * C365 +
            C13340 * C753 - C13589 * C695 - C13340 * C857 + C13257 * C913 +
            C13341 * C1746 - C13590 * C1653 - C13341 * C1950 + C82893 * C2035) *
               C82523 * C82932 +
           (C18662 + C18663 + C18664) * C82523 * C82918 +
           (C18665 + C18666 + C18667) * C82523 * C82896) *
              C1149 -
          ((C13341 * C18358 - C13590 * C18261 - C13341 * C18538 +
            C82893 * C18623 + C13340 * C18357 - C13589 * C18262 -
            C13340 * C18537 + C13257 * C18624 + C13339 * C5816 -
            C13588 * C5690 - C13339 * C5984 + C13256 * C6090) *
               C82523 * C82896 +
           (C18667 + C18666 + C18665) * C82523 * C82918 +
           (C18664 + C18663 + C18662) * C82523 * C82932) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C82925 +
            C396 * C82909 + C397 * C82885) *
               C25720 +
           (C27502 + C27503 + C27504) * C25721 +
           (C27505 + C27506 + C27507) * C82896) *
              C1149 -
          (((C168 * C5818 - C364 * C5688 - C168 * C5986 + C82581 * C6088) *
                C82885 +
            (C168 * C5817 - C364 * C5689 - C168 * C5985 + C82581 * C6089) *
                C82909 +
            (C168 * C5816 - C364 * C5690 - C168 * C5984 + C82581 * C6090) *
                C82925) *
               C82896 +
           (C27507 + C27506 + C27505) * C25721 +
           (C27504 + C27503 + C27502) * C25720) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1743 * C169 - C2032 * C102 - C1743 * C310 + C82931 * C365 +
            C1744 * C753 - C2033 * C695 - C1744 * C857 + C82916 * C913 +
            C1745 * C1746 - C2034 * C1653 - C1745 * C1950 + C82893 * C2035) *
               C82523 * C25720 +
           (C29662 + C29663 + C29664) * C82523 * C25721 +
           (C29665 + C29666 + C29667) * C82523 * C82896) *
              C1149 -
          ((C1745 * C18358 - C2034 * C18261 - C1745 * C18538 + C82893 * C18623 +
            C1744 * C18357 - C2033 * C18262 - C1744 * C18537 + C82916 * C18624 +
            C1743 * C5816 - C2032 * C5690 - C1743 * C5984 + C82931 * C6090) *
               C82523 * C82896 +
           (C29667 + C29666 + C29665) * C82523 * C25721 +
           (C29664 + C29663 + C29662) * C82523 * C25720) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C82523 *
               C30017 +
           C31046 * C30018 + C31047 * C30019 + C31062 * C30020 +
           C31063 * C30021) *
              C1149 -
          ((C168 * C30896 - C364 * C30836 - C168 * C30992 + C82581 * C31044) *
               C82523 * C30021 +
           C31063 * C30020 + C31062 * C30019 + C31047 * C30018 +
           C31046 * C30017) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C82592 * C240 - C239 * C102) * C168 +
                (C82592 * C441 - C239 * C310) * C82581) *
                   C81 +
               ((C253 - C254) * C168 + (C448 - C449) * C82581) * C82 +
               ((C257 - C258) * C168 + (C450 - C451) * C82581) * C83 +
               ((C261 - C262) * C168 + (C452 - C453) * C82581) * C84 +
               ((C265 - C266) * C168 + (C454 - C455) * C82581) * C85) *
                  C1149 +
              (((C239 * C1155 - C82592 * C1265) * C168 +
                (C239 * C1317 - C82592 * C1416) * C82581) *
                   C81 +
               ((C239 * C1154 - C82592 * C1266) * C168 +
                (C239 * C1318 - C82592 * C1417) * C82581) *
                   C82 +
               ((C239 * C1153 - C82592 * C1267) * C168 +
                (C239 * C1319 - C82592 * C1418) * C82581) *
                   C83 +
               ((C239 * C1152 - C82592 * C1268) * C168 +
                (C239 * C1320 - C82592 * C1419) * C82581) *
                   C84 +
               ((C239 * C1151 - C82592 * C1269) * C168 +
                (C239 * C1321 - C82592 * C1420) * C82581) *
                   C85) *
                  C1150) *
             C82939 * C82940 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C82592 * C240 - C239 * C102) * C1743 +
                (C82592 * C441 - C239 * C310) * C82931 +
                (C2740 - C2741) * C1744 + (C3006 - C3007) * C82916 +
                (C2744 - C2745) * C1745 + (C3008 - C3009) * C82893) *
                   C1641 +
               ((C253 - C254) * C1743 + (C448 - C449) * C82931 +
                (C1861 - C1862) * C1744 + (C2160 - C2161) * C82916 +
                (C1869 - C1870) * C1745 + (C2162 - C2163) * C82893) *
                   C1642 +
               ((C257 - C258) * C1743 + (C450 - C451) * C82931 +
                (C1865 - C1866) * C1744 + (C2164 - C2165) * C82916 +
                (C1873 - C1874) * C1745 + (C2166 - C2167) * C82893) *
                   C82885) *
                  C1149 +
              (((C239 * C1155 - C82592 * C1265) * C1743 +
                (C239 * C1317 - C82592 * C1416) * C82931 +
                (C239 * C3348 - C82592 * C3527) * C1744 +
                (C239 * C3613 - C82592 * C3779) * C82916 +
                (C239 * C3345 - C82592 * C3530) * C1745 +
                (C239 * C3616 - C82592 * C3780) * C82893) *
                   C1641 +
               ((C239 * C1154 - C82592 * C1266) * C1743 +
                (C239 * C1318 - C82592 * C1417) * C82931 +
                (C239 * C3347 - C82592 * C3528) * C1744 +
                (C239 * C3614 - C82592 * C3781) * C82916 +
                (C239 * C3344 - C82592 * C3531) * C1745 +
                (C239 * C3617 - C82592 * C3782) * C82893) *
                   C1642 +
               ((C239 * C1153 - C82592 * C1267) * C1743 +
                (C239 * C1319 - C82592 * C1418) * C82931 +
                (C239 * C3346 - C82592 * C3529) * C1744 +
                (C239 * C3615 - C82592 * C3783) * C82916 +
                (C239 * C3343 - C82592 * C3532) * C1745 +
                (C239 * C3618 - C82592 * C3784) * C82893) *
                   C82885) *
                  C1150) *
             C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
             C82896 * C4299 - C4298 * C4108) *
                C168 +
            (C82932 * C441 - C4296 * C310 + C82918 * C1416 - C4297 * C1317 +
             C82896 * C4593 - C4298 * C4405) *
                C82581) *
               C1641 +
           ((C4308 - C4309 + C4310 - C4311 + C4312 - C4313) * C168 +
            (C4598 - C4599 + C4600 - C4601 + C4602 - C4603) * C82581) *
               C1642 +
           ((C4320 - C4321 + C4322 - C4323 + C4324 - C4325) * C168 +
            (C4604 - C4605 + C4606 - C4607 + C4608 - C4609) * C82581) *
               C82885) *
              C1149 +
          (((C4296 * C1155 - C82932 * C1265 + C4297 * C4108 - C82918 * C4299 +
             C4298 * C5690 - C82896 * C5904) *
                C168 +
            (C4296 * C1317 - C82932 * C1416 + C4297 * C4405 - C82918 * C4593 +
             C4298 * C5984 - C82896 * C6185) *
                C82581) *
               C1641 +
           ((C4296 * C1154 - C82932 * C1266 + C4297 * C4109 - C82918 * C4300 +
             C4298 * C5689 - C82896 * C5905) *
                C168 +
            (C4296 * C1318 - C82932 * C1417 + C4297 * C4406 - C82918 * C4594 +
             C4298 * C5985 - C82896 * C6186) *
                C82581) *
               C1642 +
           ((C4296 * C1153 - C82932 * C1267 + C4297 * C4110 - C82918 * C4301 +
             C4298 * C5688 - C82896 * C5906) *
                C168 +
            (C4296 * C1319 - C82932 * C1418 + C4297 * C4407 - C82918 * C4595 +
             C4298 * C5986 - C82896 * C6187) *
                C82581) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C13339 +
            (C82592 * C441 - C239 * C310) * C13256 + (C2740 - C2741) * C13340 +
            (C3006 - C3007) * C13257 + (C2744 - C2745) * C13341 +
            (C3008 - C3009) * C82893) *
               C82925 +
           ((C253 - C254) * C13339 + (C448 - C449) * C13256 +
            (C1861 - C1862) * C13340 + (C2160 - C2161) * C13257 +
            (C1869 - C1870) * C13341 + (C2162 - C2163) * C82893) *
               C82909 +
           ((C257 - C258) * C13339 + (C450 - C451) * C13256 +
            (C1865 - C1866) * C13340 + (C2164 - C2165) * C13257 +
            (C1873 - C1874) * C13341 + (C2166 - C2167) * C82893) *
               C82885) *
              C1149 +
          (((C239 * C1155 - C82592 * C1265) * C13339 +
            (C239 * C1317 - C82592 * C1416) * C13256 +
            (C239 * C3348 - C82592 * C3527) * C13340 +
            (C239 * C3613 - C82592 * C3779) * C13257 +
            (C239 * C3345 - C82592 * C3530) * C13341 +
            (C239 * C3616 - C82592 * C3780) * C82893) *
               C82925 +
           ((C239 * C1154 - C82592 * C1266) * C13339 +
            (C239 * C1318 - C82592 * C1417) * C13256 +
            (C239 * C3347 - C82592 * C3528) * C13340 +
            (C239 * C3614 - C82592 * C3781) * C13257 +
            (C239 * C3344 - C82592 * C3531) * C13341 +
            (C239 * C3617 - C82592 * C3782) * C82893) *
               C82909 +
           ((C239 * C1153 - C82592 * C1267) * C13339 +
            (C239 * C1319 - C82592 * C1418) * C13256 +
            (C239 * C3346 - C82592 * C3529) * C13340 +
            (C239 * C3615 - C82592 * C3783) * C13257 +
            (C239 * C3343 - C82592 * C3532) * C13341 +
            (C239 * C3618 - C82592 * C3784) * C82893) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C82592 * C240 - C239 * C102) * C15457 +
           (C82592 * C441 - C239 * C310) * C15400 + (C2740 - C2741) * C15458 +
           (C3006 - C3007) * C15401 + (C2744 - C2745) * C15459 +
           (C3008 - C3009) * C15402 + (C15952 - C15953) * C15460 +
           (C16106 - C16107) * C15403 + (C15956 - C15957) * C15461 +
           (C16108 - C16109) * C15404) *
              C82523 * C1149 +
          ((C239 * C1155 - C82592 * C1265) * C15457 +
           (C239 * C1317 - C82592 * C1416) * C15400 +
           (C239 * C3348 - C82592 * C3527) * C15458 +
           (C239 * C3613 - C82592 * C3779) * C15401 +
           (C239 * C3345 - C82592 * C3530) * C15459 +
           (C239 * C3616 - C82592 * C3780) * C15402 +
           (C239 * C16304 - C82592 * C16399) * C15460 +
           (C239 * C16445 - C82592 * C16535) * C15403 +
           (C239 * C16303 - C82592 * C16400) * C15461 +
           (C239 * C16446 - C82592 * C16536) * C15404) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
            C82896 * C4299 - C4298 * C4108) *
               C13339 +
           (C82932 * C441 - C4296 * C310 + C82918 * C1416 - C4297 * C1317 +
            C82896 * C4593 - C4298 * C4405) *
               C13256 +
           (C17634 - C17635 + C17636 - C17637 + C17638 - C17639) * C13340 +
           (C17900 - C17901 + C17902 - C17903 + C17904 - C17905) * C13257 +
           (C17646 - C17647 + C17648 - C17649 + C17650 - C17651) * C13341 +
           (C17906 - C17907 + C17908 - C17909 + C17910 - C17911) * C82893) *
              C82523 * C1149 +
          ((C4296 * C1155 - C82932 * C1265 + C4297 * C4108 - C82918 * C4299 +
            C4298 * C5690 - C82896 * C5904) *
               C13339 +
           (C4296 * C1317 - C82932 * C1416 + C4297 * C4405 - C82918 * C4593 +
            C4298 * C5984 - C82896 * C6185) *
               C13256 +
           (C4296 * C3348 - C82932 * C3527 + C4297 * C4976 - C82918 * C5140 +
            C4298 * C18262 - C82896 * C18459) *
               C13340 +
           (C4296 * C3613 - C82932 * C3779 + C4297 * C5220 - C82918 * C5377 +
            C4298 * C18537 - C82896 * C18741) *
               C13257 +
           (C4296 * C3345 - C82932 * C3530 + C4297 * C16745 - C82918 * C16905 +
            C4298 * C18261 - C82896 * C18460) *
               C13341 +
           (C4296 * C3616 - C82932 * C3780 + C4297 * C16983 - C82918 * C17137 +
            C4298 * C18538 - C82896 * C18742) *
               C82893) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
             C82896 * C4299 - C25873 * C4108) *
                C168 +
            (C25720 * C441 - C25871 * C310 + C25721 * C1416 - C25872 * C1317 +
             C82896 * C4593 - C25873 * C4405) *
                C82581) *
               C82925 +
           ((C25875 - C25876 + C25877 - C25878 + C25879 - C25880) * C168 +
            (C26121 - C26122 + C26123 - C26124 + C26125 - C26126) * C82581) *
               C82909 +
           ((C25887 - C25888 + C25889 - C25890 + C25891 - C25892) * C168 +
            (C26127 - C26128 + C26129 - C26130 + C26131 - C26132) * C82581) *
               C82885) *
              C1149 +
          (((C25871 * C1155 - C25720 * C1265 + C25872 * C4108 - C25721 * C4299 +
             C25873 * C5690 - C82896 * C5904) *
                C168 +
            (C25871 * C1317 - C25720 * C1416 + C25872 * C4405 - C25721 * C4593 +
             C25873 * C5984 - C82896 * C6185) *
                C82581) *
               C82925 +
           ((C25871 * C1154 - C25720 * C1266 + C25872 * C4109 - C25721 * C4300 +
             C25873 * C5689 - C82896 * C5905) *
                C168 +
            (C25871 * C1318 - C25720 * C1417 + C25872 * C4406 - C25721 * C4594 +
             C25873 * C5985 - C82896 * C6186) *
                C82581) *
               C82909 +
           ((C25871 * C1153 - C25720 * C1267 + C25872 * C4110 - C25721 * C4301 +
             C25873 * C5688 - C82896 * C5906) *
                C168 +
            (C25871 * C1319 - C25720 * C1418 + C25872 * C4407 - C25721 * C4595 +
             C25873 * C5986 - C82896 * C6187) *
                C82581) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
            C82896 * C4299 - C25873 * C4108) *
               C1743 +
           (C25720 * C441 - C25871 * C310 + C25721 * C1416 - C25872 * C1317 +
            C82896 * C4593 - C25873 * C4405) *
               C82931 +
           (C28710 - C28711 + C28712 - C28713 + C28714 - C28715) * C1744 +
           (C28956 - C28957 + C28958 - C28959 + C28960 - C28961) * C82916 +
           (C28722 - C28723 + C28724 - C28725 + C28726 - C28727) * C1745 +
           (C28962 - C28963 + C28964 - C28965 + C28966 - C28967) * C82893) *
              C82523 * C1149 +
          ((C25871 * C1155 - C25720 * C1265 + C25872 * C4108 - C25721 * C4299 +
            C25873 * C5690 - C82896 * C5904) *
               C1743 +
           (C25871 * C1317 - C25720 * C1416 + C25872 * C4405 - C25721 * C4593 +
            C25873 * C5984 - C82896 * C6185) *
               C82931 +
           (C25871 * C3348 - C25720 * C3527 + C25872 * C4976 - C25721 * C5140 +
            C25873 * C18262 - C82896 * C18459) *
               C1744 +
           (C25871 * C3613 - C25720 * C3779 + C25872 * C5220 - C25721 * C5377 +
            C25873 * C18537 - C82896 * C18741) *
               C82916 +
           (C25871 * C3345 - C25720 * C3530 + C25872 * C16745 -
            C25721 * C16905 + C25873 * C18261 - C82896 * C18460) *
               C1745 +
           (C25871 * C3616 - C25720 * C3780 + C25872 * C16983 -
            C25721 * C17137 + C25873 * C18538 - C82896 * C18742) *
               C82893) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C30017 * C240 - C30118 * C102 + C30018 * C1265 - C30119 * C1155 +
            C30019 * C4299 - C30120 * C4108 + C30020 * C5904 - C30121 * C5690 +
            C30021 * C30123 - C30122 * C30022) *
               C168 +
           (C30017 * C441 - C30118 * C310 + C30018 * C1416 - C30119 * C1317 +
            C30019 * C4593 - C30120 * C4405 + C30020 * C6185 - C30121 * C5984 +
            C30021 * C30259 - C30122 * C30169) *
               C82581) *
              C82523 * C1149 +
          ((C30118 * C1155 - C30017 * C1265 + C30119 * C4108 - C30018 * C4299 +
            C30120 * C5690 - C30019 * C5904 + C30121 * C30022 -
            C30020 * C30123 + C30122 * C30836 - C30021 * C30948) *
               C168 +
           (C30118 * C1317 - C30017 * C1416 + C30119 * C4405 - C30018 * C4593 +
            C30120 * C5984 - C30019 * C6185 + C30121 * C30169 -
            C30020 * C30259 + C30122 * C30992 - C30021 * C31105) *
               C82581) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezx[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C81 * C108 - C92 * C102 + C82 * C110 - C94 * C103 + C83 * C112 -
                C96 * C104 + C84 * C114 - C98 * C105 + C85 * C116 -
                C100 * C106) *
                   C239 +
               (C81 * C503 - C92 * C497 + C82 * C504 - C94 * C498 + C83 * C505 -
                C96 * C499 + C84 * C506 - C98 * C500 + C85 * C507 -
                C100 * C501) *
                   C82592) *
                  C82581 * C1149 +
              ((C92 * C1155 - C81 * C1164 + C94 * C1154 - C82 * C1162 +
                C96 * C1153 - C83 * C1160 + C98 * C1152 - C84 * C1158 +
                C100 * C1151 - C85 * C1156) *
                   C239 +
               (C92 * C1463 - C81 * C1468 + C94 * C1464 - C82 * C1469 +
                C96 * C1465 - C83 * C1470 + C98 * C1466 - C84 * C1471 +
                C100 * C1467 - C85 * C1472) *
                   C82592) *
                  C82581 * C1150) *
             C82939 * C82940 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
                 C82885 * C112 - C1651 * C104) *
                    C239 +
                (C1641 * C503 - C1647 * C497 + C1642 * C504 - C1649 * C498 +
                 C82885 * C505 - C1651 * C499) *
                    C82592) *
                   C82931 +
               ((C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C239 +
                (C3090 - C3091 + C3092 - C3093 + C3094 - C3095) * C82592) *
                   C82916 +
               ((C2840 - C2841 + C2842 - C2843 + C2844 - C2845) * C239 +
                (C3096 - C3097 + C3098 - C3099 + C3100 - C3101) * C82592) *
                   C82893) *
                  C1149 +
              (((C1647 * C1155 - C1641 * C1164 + C1649 * C1154 - C1642 * C1162 +
                 C1651 * C1153 - C82885 * C1160) *
                    C239 +
                (C1647 * C1463 - C1641 * C1468 + C1649 * C1464 - C1642 * C1469 +
                 C1651 * C1465 - C82885 * C1470) *
                    C82592) *
                   C82931 +
               ((C1647 * C3348 - C1641 * C3359 + C1649 * C3347 - C1642 * C3357 +
                 C1651 * C3346 - C82885 * C3355) *
                    C239 +
                (C1647 * C3859 - C1641 * C3865 + C1649 * C3860 - C1642 * C3866 +
                 C1651 * C3861 - C82885 * C3867) *
                    C82592) *
                   C82916 +
               ((C1647 * C3345 - C1641 * C3353 + C1649 * C3344 - C1642 * C3351 +
                 C1651 * C3343 - C82885 * C3349) *
                    C239 +
                (C1647 * C3862 - C1641 * C3868 + C1649 * C3863 - C1642 * C3869 +
                 C1651 * C3864 - C82885 * C3870) *
                    C82592) *
                   C82893) *
                  C1150) *
             C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
            C82885 * C112 - C1651 * C104) *
               C4296 +
           (C1641 * C503 - C1647 * C497 + C1642 * C504 - C1649 * C498 +
            C82885 * C505 - C1651 * C499) *
               C82932 +
           (C5991 - C5992 + C5993 - C5994 + C5995 - C5996) * C4297 +
           (C6269 - C6270 + C6271 - C6272 + C6273 - C6274) * C82918 +
           (C6003 - C6004 + C6005 - C6006 + C6007 - C6008) * C4298 +
           (C6275 - C6276 + C6277 - C6278 + C6279 - C6280) * C82896) *
              C82581 * C1149 +
          ((C5992 - C5991 + C5994 - C5993 + C5996 - C5995) * C4296 +
           (C6270 - C6269 + C6272 - C6271 + C6274 - C6273) * C82932 +
           (C6004 - C6003 + C6006 - C6005 + C6008 - C6007) * C4297 +
           (C6276 - C6275 + C6278 - C6277 + C6280 - C6279) * C82918 +
           (C1647 * C5690 - C1641 * C5695 + C1649 * C5689 - C1642 * C5693 +
            C1651 * C5688 - C82885 * C5691) *
               C4298 +
           (C1647 * C6262 - C1641 * C6265 + C1649 * C6263 - C1642 * C6266 +
            C1651 * C6264 - C82885 * C6267) *
               C82896) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C239 +
            (C82925 * C503 - C13259 * C497 + C82909 * C504 - C13261 * C498 +
             C82885 * C505 - C13263 * C499) *
                C82592) *
               C13256 +
           ((C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C239 +
            (C14532 - C14533 + C14534 - C14535 + C14536 - C14537) * C82592) *
               C13257 +
           ((C14298 - C14299 + C14300 - C14301 + C14302 - C14303) * C239 +
            (C14538 - C14539 + C14540 - C14541 + C14542 - C14543) * C82592) *
               C82893) *
              C1149 +
          (((C13259 * C1155 - C82925 * C1164 + C13261 * C1154 - C82909 * C1162 +
             C13263 * C1153 - C82885 * C1160) *
                C239 +
            (C13259 * C1463 - C82925 * C1468 + C13261 * C1464 - C82909 * C1469 +
             C13263 * C1465 - C82885 * C1470) *
                C82592) *
               C13256 +
           ((C13259 * C3348 - C82925 * C3359 + C13261 * C3347 - C82909 * C3357 +
             C13263 * C3346 - C82885 * C3355) *
                C239 +
            (C13259 * C3859 - C82925 * C3865 + C13261 * C3860 - C82909 * C3866 +
             C13263 * C3861 - C82885 * C3867) *
                C82592) *
               C13257 +
           ((C13259 * C3345 - C82925 * C3353 + C13261 * C3344 - C82909 * C3351 +
             C13263 * C3343 - C82885 * C3349) *
                C239 +
            (C13259 * C3862 - C82925 * C3868 + C13261 * C3863 - C82909 * C3869 +
             C13263 * C3864 - C82885 * C3870) *
                C82592) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C239 +
            (C82523 * C503 - C15405 * C497) * C82592) *
               C15400 +
           ((C16004 - C16005) * C239 + (C16154 - C16155) * C82592) * C15401 +
           ((C16008 - C16009) * C239 + (C16156 - C16157) * C82592) * C15402 +
           ((C16012 - C16013) * C239 + (C16158 - C16159) * C82592) * C15403 +
           ((C16016 - C16017) * C239 + (C16160 - C16161) * C82592) * C15404) *
              C1149 +
          (((C15405 * C1155 - C82523 * C1164) * C239 +
            (C15405 * C1463 - C82523 * C1468) * C82592) *
               C15400 +
           ((C15405 * C3348 - C82523 * C3359) * C239 +
            (C15405 * C3859 - C82523 * C3865) * C82592) *
               C15401 +
           ((C15405 * C3345 - C82523 * C3353) * C239 +
            (C15405 * C3862 - C82523 * C3868) * C82592) *
               C15402 +
           ((C15405 * C16304 - C82523 * C16307) * C239 +
            (C15405 * C16579 - C82523 * C16581) * C82592) *
               C15403 +
           ((C15405 * C16303 - C82523 * C16305) * C239 +
            (C15405 * C16580 - C82523 * C16582) * C82592) *
               C15404) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C4296 +
            (C82523 * C503 - C15405 * C497) * C82932 +
            (C18542 - C18543) * C4297 + (C18822 - C18823) * C82918 +
            (C18546 - C18547) * C4298 + (C18824 - C18825) * C82896) *
               C13256 +
           ((C16004 - C16005) * C4296 + (C16154 - C16155) * C82932 +
            (C17734 - C17735) * C4297 + (C17988 - C17989) * C82918 +
            (C17742 - C17743) * C4298 + (C17990 - C17991) * C82896) *
               C13257 +
           ((C16008 - C16009) * C4296 + (C16156 - C16157) * C82932 +
            (C17738 - C17739) * C4297 + (C17992 - C17993) * C82918 +
            (C17746 - C17747) * C4298 + (C17994 - C17995) * C82896) *
               C82893) *
              C1149 +
          (((C18543 - C18542) * C4296 + (C18823 - C18822) * C82932 +
            (C18547 - C18546) * C4297 + (C18825 - C18824) * C82918 +
            (C15405 * C5690 - C82523 * C5695) * C4298 +
            (C15405 * C6262 - C82523 * C6265) * C82896) *
               C13256 +
           ((C17735 - C17734) * C4296 + (C17989 - C17988) * C82932 +
            (C17743 - C17742) * C4297 + (C17991 - C17990) * C82918 +
            (C15405 * C18262 - C82523 * C18265) * C4298 +
            (C15405 * C18817 - C82523 * C18819) * C82896) *
               C13257 +
           ((C17739 - C17738) * C4296 + (C17993 - C17992) * C82932 +
            (C17747 - C17746) * C4297 + (C17995 - C17994) * C82918 +
            (C15405 * C18261 - C82523 * C18263) * C4298 +
            (C15405 * C18818 - C82523 * C18820) * C82896) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
            C82885 * C112 - C13263 * C104) *
               C25871 +
           (C82925 * C503 - C13259 * C497 + C82909 * C504 - C13261 * C498 +
            C82885 * C505 - C13263 * C499) *
               C25720 +
           (C27404 - C27405 + C27406 - C27407 + C27408 - C27409) * C25872 +
           (C27656 - C27657 + C27658 - C27659 + C27660 - C27661) * C25721 +
           (C27416 - C27417 + C27418 - C27419 + C27420 - C27421) * C25873 +
           (C27662 - C27663 + C27664 - C27665 + C27666 - C27667) * C82896) *
              C82581 * C1149 +
          ((C27405 - C27404 + C27407 - C27406 + C27409 - C27408) * C25871 +
           (C27657 - C27656 + C27659 - C27658 + C27661 - C27660) * C25720 +
           (C27417 - C27416 + C27419 - C27418 + C27421 - C27420) * C25872 +
           (C27663 - C27662 + C27665 - C27664 + C27667 - C27666) * C25721 +
           (C13259 * C5690 - C82925 * C5695 + C13261 * C5689 - C82909 * C5693 +
            C13263 * C5688 - C82885 * C5691) *
               C25873 +
           (C13259 * C6262 - C82925 * C6265 + C13261 * C6263 - C82909 * C6266 +
            C13263 * C6264 - C82885 * C6267) *
               C82896) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C25871 +
            (C82523 * C503 - C15405 * C497) * C25720 +
            (C18542 - C18543) * C25872 + (C18822 - C18823) * C25721 +
            (C18546 - C18547) * C25873 + (C18824 - C18825) * C82896) *
               C82931 +
           ((C16004 - C16005) * C25871 + (C16154 - C16155) * C25720 +
            (C17734 - C17735) * C25872 + (C17988 - C17989) * C25721 +
            (C17742 - C17743) * C25873 + (C17990 - C17991) * C82896) *
               C82916 +
           ((C16008 - C16009) * C25871 + (C16156 - C16157) * C25720 +
            (C17738 - C17739) * C25872 + (C17992 - C17993) * C25721 +
            (C17746 - C17747) * C25873 + (C17994 - C17995) * C82896) *
               C82893) *
              C1149 +
          (((C18543 - C18542) * C25871 + (C18823 - C18822) * C25720 +
            (C18547 - C18546) * C25872 + (C18825 - C18824) * C25721 +
            (C15405 * C5690 - C82523 * C5695) * C25873 +
            (C15405 * C6262 - C82523 * C6265) * C82896) *
               C82931 +
           ((C17735 - C17734) * C25871 + (C17989 - C17988) * C25720 +
            (C17743 - C17742) * C25872 + (C17991 - C17990) * C25721 +
            (C15405 * C18262 - C82523 * C18265) * C25873 +
            (C15405 * C18817 - C82523 * C18819) * C82896) *
               C82916 +
           ((C17739 - C17738) * C25871 + (C17993 - C17992) * C25720 +
            (C17747 - C17746) * C25872 + (C17995 - C17994) * C25721 +
            (C15405 * C18261 - C82523 * C18263) * C25873 +
            (C15405 * C18818 - C82523 * C18820) * C82896) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C82523 * C108 - C15405 * C102) * C30118 +
           (C82523 * C503 - C15405 * C497) * C30017 +
           (C18542 - C18543) * C30119 + (C18822 - C18823) * C30018 +
           (C18546 - C18547) * C30120 + (C18824 - C18825) * C30019 +
           (C30995 - C30996) * C30121 + (C31151 - C31152) * C30020 +
           (C30999 - C31000) * C30122 + (C31153 - C31154) * C30021) *
              C82581 * C1149 +
          ((C18543 - C18542) * C30118 + (C18823 - C18822) * C30017 +
           (C18547 - C18546) * C30119 + (C18825 - C18824) * C30018 +
           (C30996 - C30995) * C30120 + (C31152 - C31151) * C30019 +
           (C31000 - C30999) * C30121 + (C31154 - C31153) * C30020 +
           (C15405 * C30836 - C82523 * C30837) * C30122 +
           (C15405 * C31148 - C82523 * C31149) * C30021) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C82581 * C169 - C168 * C102) * C239 +
                (C82581 * C551 - C168 * C497) * C82592) *
                   C81 +
               ((C182 - C183) * C239 + (C558 - C559) * C82592) * C82 +
               ((C186 - C187) * C239 + (C560 - C561) * C82592) * C83 +
               ((C190 - C191) * C239 + (C562 - C563) * C82592) * C84 +
               ((C194 - C195) * C239 + (C564 - C565) * C82592) * C85) *
                  C1149 +
              (((C168 * C1155 - C82581 * C1213) * C239 +
                (C168 * C1463 - C82581 * C1515) * C82592) *
                   C81 +
               ((C168 * C1154 - C82581 * C1214) * C239 +
                (C168 * C1464 - C82581 * C1516) * C82592) *
                   C82 +
               ((C168 * C1153 - C82581 * C1215) * C239 +
                (C168 * C1465 - C82581 * C1517) * C82592) *
                   C83 +
               ((C168 * C1152 - C82581 * C1216) * C239 +
                (C168 * C1466 - C82581 * C1518) * C82592) *
                   C84 +
               ((C168 * C1151 - C82581 * C1217) * C239 +
                (C168 * C1467 - C82581 * C1519) * C82592) *
                   C85) *
                  C1150) *
             C82939 * C82940 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
                 C82893 * C1746 - C1745 * C1653) *
                    C239 +
                (C82931 * C551 - C1743 * C497 + C82916 * C1055 - C1744 * C1003 +
                 C82893 * C2323 - C1745 * C2241) *
                    C82592) *
                   C1641 +
               ((C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C239 +
                (C2328 - C2329 + C2330 - C2331 + C2332 - C2333) * C82592) *
                   C1642 +
               ((C1767 - C1768 + C1769 - C1770 + C1771 - C1772) * C239 +
                (C2334 - C2335 + C2336 - C2337 + C2338 - C2339) * C82592) *
                   C82885) *
                  C1149 +
              (((C1743 * C1155 - C82931 * C1213 + C1744 * C3348 -
                 C82916 * C3441 + C1745 * C3345 - C82893 * C3442) *
                    C239 +
                (C1743 * C1463 - C82931 * C1515 + C1744 * C3859 -
                 C82916 * C3945 + C1745 * C3862 - C82893 * C3946) *
                    C82592) *
                   C1641 +
               ((C1743 * C1154 - C82931 * C1214 + C1744 * C3347 -
                 C82916 * C3443 + C1745 * C3344 - C82893 * C3444) *
                    C239 +
                (C1743 * C1464 - C82931 * C1516 + C1744 * C3860 -
                 C82916 * C3947 + C1745 * C3863 - C82893 * C3948) *
                    C82592) *
                   C1642 +
               ((C1743 * C1153 - C82931 * C1215 + C1744 * C3346 -
                 C82916 * C3445 + C1745 * C3343 - C82893 * C3446) *
                    C239 +
                (C1743 * C1465 - C82931 * C1517 + C1744 * C3861 -
                 C82916 * C3949 + C1745 * C3864 - C82893 * C3950) *
                    C82592) *
                   C82885) *
                  C1150) *
             C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C4296 +
            (C82581 * C551 - C168 * C497) * C82932 + (C5823 - C5824) * C4297 +
            (C6358 - C6359) * C82918 + (C5827 - C5828) * C4298 +
            (C6360 - C6361) * C82896) *
               C1641 +
           ((C182 - C183) * C4296 + (C558 - C559) * C82932 +
            (C4207 - C4208) * C4297 + (C4770 - C4771) * C82918 +
            (C4215 - C4216) * C4298 + (C4772 - C4773) * C82896) *
               C1642 +
           ((C186 - C187) * C4296 + (C560 - C561) * C82932 +
            (C4211 - C4212) * C4297 + (C4774 - C4775) * C82918 +
            (C4219 - C4220) * C4298 + (C4776 - C4777) * C82896) *
               C82885) *
              C1149 +
          (((C5824 - C5823) * C4296 + (C6359 - C6358) * C82932 +
            (C5828 - C5827) * C4297 + (C6361 - C6360) * C82918 +
            (C168 * C5690 - C82581 * C5816) * C4298 +
            (C168 * C6262 - C82581 * C6354) * C82896) *
               C1641 +
           ((C4208 - C4207) * C4296 + (C4771 - C4770) * C82932 +
            (C4216 - C4215) * C4297 + (C4773 - C4772) * C82918 +
            (C168 * C5689 - C82581 * C5817) * C4298 +
            (C168 * C6263 - C82581 * C6355) * C82896) *
               C1642 +
           ((C4212 - C4211) * C4296 + (C4775 - C4774) * C82932 +
            (C4220 - C4219) * C4297 + (C4777 - C4776) * C82918 +
            (C168 * C5688 - C82581 * C5818) * C4298 +
            (C168 * C6264 - C82581 * C6356) * C82896) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C239 +
            (C13256 * C551 - C13339 * C497 + C13257 * C1055 - C13340 * C1003 +
             C82893 * C2323 - C13341 * C2241) *
                C82592) *
               C82925 +
           ((C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C239 +
            (C13856 - C13857 + C13858 - C13859 + C13860 - C13861) * C82592) *
               C82909 +
           ((C13355 - C13356 + C13357 - C13358 + C13359 - C13360) * C239 +
            (C13862 - C13863 + C13864 - C13865 + C13866 - C13867) * C82592) *
               C82885) *
              C1149 +
          (((C13339 * C1155 - C13256 * C1213 + C13340 * C3348 - C13257 * C3441 +
             C13341 * C3345 - C82893 * C3442) *
                C239 +
            (C13339 * C1463 - C13256 * C1515 + C13340 * C3859 - C13257 * C3945 +
             C13341 * C3862 - C82893 * C3946) *
                C82592) *
               C82925 +
           ((C13339 * C1154 - C13256 * C1214 + C13340 * C3347 - C13257 * C3443 +
             C13341 * C3344 - C82893 * C3444) *
                C239 +
            (C13339 * C1464 - C13256 * C1516 + C13340 * C3860 - C13257 * C3947 +
             C13341 * C3863 - C82893 * C3948) *
                C82592) *
               C82909 +
           ((C13339 * C1153 - C13256 * C1215 + C13340 * C3346 - C13257 * C3445 +
             C13341 * C3343 - C82893 * C3446) *
                C239 +
            (C13339 * C1465 - C13256 * C1517 + C13340 * C3861 - C13257 * C3949 +
             C13341 * C3864 - C82893 * C3950) *
                C82592) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15400 * C169 - C15457 * C102 + C15401 * C753 - C15458 * C695 +
            C15402 * C1746 - C15459 * C1653 + C15403 * C2653 - C15460 * C2527 +
            C15404 * C15462 - C15461 * C15407) *
               C239 +
           (C15400 * C551 - C15457 * C497 + C15401 * C1055 - C15458 * C1003 +
            C15402 * C2323 - C15459 * C2241 + C15403 * C3175 - C15460 * C3083 +
            C15404 * C15739 - C15461 * C15693) *
               C82592) *
              C82523 * C1149 +
          ((C15457 * C1155 - C15400 * C1213 + C15458 * C3348 - C15401 * C3441 +
            C15459 * C3345 - C15402 * C3442 + C15460 * C16304 -
            C15403 * C16353 + C15461 * C16303 - C15404 * C16354) *
               C239 +
           (C15457 * C1463 - C15400 * C1515 + C15458 * C3859 - C15401 * C3945 +
            C15459 * C3862 - C15402 * C3946 + C15460 * C16579 -
            C15403 * C16625 + C15461 * C16580 - C15404 * C16626) *
               C82592) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
            C82893 * C1746 - C13341 * C1653) *
               C4296 +
           (C13256 * C551 - C13339 * C497 + C13257 * C1055 - C13340 * C1003 +
            C82893 * C2323 - C13341 * C2241) *
               C82932 +
           (C18362 - C18363 + C18364 - C18365 + C18366 - C18367) * C4297 +
           (C18902 - C18903 + C18904 - C18905 + C18906 - C18907) * C82918 +
           (C18374 - C18375 + C18376 - C18377 + C18378 - C18379) * C4298 +
           (C18908 - C18909 + C18910 - C18911 + C18912 - C18913) * C82896) *
              C82523 * C1149 +
          ((C18363 - C18362 + C18365 - C18364 + C18367 - C18366) * C4296 +
           (C18903 - C18902 + C18905 - C18904 + C18907 - C18906) * C82932 +
           (C18375 - C18374 + C18377 - C18376 + C18379 - C18378) * C4297 +
           (C18909 - C18908 + C18911 - C18910 + C18913 - C18912) * C82918 +
           (C13339 * C5690 - C13256 * C5816 + C13340 * C18262 -
            C13257 * C18357 + C13341 * C18261 - C82893 * C18358) *
               C4298 +
           (C13339 * C6262 - C13256 * C6354 + C13340 * C18817 -
            C13257 * C18899 + C13341 * C18818 - C82893 * C18900) *
               C82896) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C25871 +
            (C82581 * C551 - C168 * C497) * C25720 + (C5823 - C5824) * C25872 +
            (C6358 - C6359) * C25721 + (C5827 - C5828) * C25873 +
            (C6360 - C6361) * C82896) *
               C82925 +
           ((C182 - C183) * C25871 + (C558 - C559) * C25720 +
            (C4207 - C4208) * C25872 + (C4770 - C4771) * C25721 +
            (C4215 - C4216) * C25873 + (C4772 - C4773) * C82896) *
               C82909 +
           ((C186 - C187) * C25871 + (C560 - C561) * C25720 +
            (C4211 - C4212) * C25872 + (C4774 - C4775) * C25721 +
            (C4219 - C4220) * C25873 + (C4776 - C4777) * C82896) *
               C82885) *
              C1149 +
          (((C5824 - C5823) * C25871 + (C6359 - C6358) * C25720 +
            (C5828 - C5827) * C25872 + (C6361 - C6360) * C25721 +
            (C168 * C5690 - C82581 * C5816) * C25873 +
            (C168 * C6262 - C82581 * C6354) * C82896) *
               C82925 +
           ((C4208 - C4207) * C25871 + (C4771 - C4770) * C25720 +
            (C4216 - C4215) * C25872 + (C4773 - C4772) * C25721 +
            (C168 * C5689 - C82581 * C5817) * C25873 +
            (C168 * C6263 - C82581 * C6355) * C82896) *
               C82909 +
           ((C4212 - C4211) * C25871 + (C4775 - C4774) * C25720 +
            (C4220 - C4219) * C25872 + (C4777 - C4776) * C25721 +
            (C168 * C5688 - C82581 * C5818) * C25873 +
            (C168 * C6264 - C82581 * C6356) * C82896) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
            C82893 * C1746 - C1745 * C1653) *
               C25871 +
           (C82931 * C551 - C1743 * C497 + C82916 * C1055 - C1744 * C1003 +
            C82893 * C2323 - C1745 * C2241) *
               C25720 +
           (C29380 - C29381 + C29382 - C29383 + C29384 - C29385) * C25872 +
           (C29890 - C29891 + C29892 - C29893 + C29894 - C29895) * C25721 +
           (C29392 - C29393 + C29394 - C29395 + C29396 - C29397) * C25873 +
           (C29896 - C29897 + C29898 - C29899 + C29900 - C29901) * C82896) *
              C82523 * C1149 +
          ((C29381 - C29380 + C29383 - C29382 + C29385 - C29384) * C25871 +
           (C29891 - C29890 + C29893 - C29892 + C29895 - C29894) * C25720 +
           (C29393 - C29392 + C29395 - C29394 + C29397 - C29396) * C25872 +
           (C29897 - C29896 + C29899 - C29898 + C29901 - C29900) * C25721 +
           (C1743 * C5690 - C82931 * C5816 + C1744 * C18262 - C82916 * C18357 +
            C1745 * C18261 - C82893 * C18358) *
               C25873 +
           (C1743 * C6262 - C82931 * C6354 + C1744 * C18817 - C82916 * C18899 +
            C1745 * C18818 - C82893 * C18900) *
               C82896) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C82581 * C169 - C168 * C102) * C30118 +
           (C82581 * C551 - C168 * C497) * C30017 + (C5823 - C5824) * C30119 +
           (C6358 - C6359) * C30018 + (C5827 - C5828) * C30120 +
           (C6360 - C6361) * C30019 + (C30899 - C30900) * C30121 +
           (C31198 - C31199) * C30020 + (C30903 - C30904) * C30122 +
           (C31200 - C31201) * C30021) *
              C82523 * C1149 +
          ((C5824 - C5823) * C30118 + (C6359 - C6358) * C30017 +
           (C5828 - C5827) * C30119 + (C6361 - C6360) * C30018 +
           (C30900 - C30899) * C30120 + (C31199 - C31198) * C30019 +
           (C30904 - C30903) * C30121 + (C31201 - C31200) * C30020 +
           (C168 * C30836 - C82581 * C30896) * C30122 +
           (C168 * C31148 - C82581 * C31196) * C30021) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) *
                   C82581 * C81 +
               C643 * C82 + C644 * C83 + C645 * C84 + C646 * C85) *
                  C1149 -
              ((C239 * C1269 - C607 * C1151 - C239 * C1467 + C82592 * C1562) *
                   C82581 * C85 +
               (C239 * C1268 - C607 * C1152 - C239 * C1466 + C82592 * C1563) *
                   C82581 * C84 +
               (C239 * C1267 - C607 * C1153 - C239 * C1465 + C82592 * C1564) *
                   C82581 * C83 +
               (C239 * C1266 - C607 * C1154 - C239 * C1464 + C82592 * C1565) *
                   C82581 * C82 +
               (C239 * C1265 - C607 * C1155 - C239 * C1463 + C82592 * C1566) *
                   C82581 * C81) *
                  C1150) *
             C82939 * C82940 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) *
                    C82931 +
                C3268 * C82916 + C3269 * C82893) *
                   C1641 +
               (C2418 + C2448 + C2449) * C1642 +
               (C2427 + C2450 + C2451) * C82885) *
                  C1149 -
              (((C239 * C3532 - C607 * C3343 - C239 * C3864 + C82592 * C4025) *
                    C82893 +
                (C239 * C3529 - C607 * C3346 - C239 * C3861 + C82592 * C4026) *
                    C82916 +
                (C239 * C1267 - C607 * C1153 - C239 * C1465 + C82592 * C1564) *
                    C82931) *
                   C82885 +
               ((C239 * C3531 - C607 * C3344 - C239 * C3863 + C82592 * C4027) *
                    C82893 +
                (C239 * C3528 - C607 * C3347 - C239 * C3860 + C82592 * C4028) *
                    C82916 +
                (C239 * C1266 - C607 * C1154 - C239 * C1464 + C82592 * C1565) *
                    C82931) *
                   C1642 +
               ((C239 * C3530 - C607 * C3345 - C239 * C3862 + C82592 * C4029) *
                    C82893 +
                (C239 * C3527 - C607 * C3348 - C239 * C3859 + C82592 * C4030) *
                    C82916 +
                (C239 * C1265 - C607 * C1155 - C239 * C1463 + C82592 * C1566) *
                    C82931) *
                   C1641) *
                  C1150) *
             C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4296 * C240 - C4851 * C102 - C4296 * C497 + C82932 * C608 +
            C4297 * C1265 - C4852 * C1155 - C4297 * C1463 + C82918 * C1566 +
            C4298 * C4299 - C4853 * C4108 - C4298 * C4683 + C82896 * C4854) *
               C82581 * C1641 +
           (C4895 + C4896 + C4897) * C82581 * C1642 +
           (C4898 + C4899 + C4900) * C82581 * C82885) *
              C1149 -
          ((C4298 * C5906 - C4853 * C5688 - C4298 * C6264 + C82896 * C6435 +
            C4297 * C4301 - C4852 * C4110 - C4297 * C4685 + C82918 * C4856 +
            C4296 * C1267 - C4851 * C1153 - C4296 * C1465 + C82932 * C1564) *
               C82581 * C82885 +
           (C4298 * C5905 - C4853 * C5689 - C4298 * C6263 + C82896 * C6436 +
            C4297 * C4300 - C4852 * C4109 - C4297 * C4684 + C82918 * C4855 +
            C4296 * C1266 - C4851 * C1154 - C4296 * C1464 + C82932 * C1565) *
               C82581 * C1642 +
           (C4298 * C5904 - C4853 * C5690 - C4298 * C6262 + C82896 * C6437 +
            C4297 * C4299 - C4852 * C4108 - C4297 * C4683 + C82918 * C4854 +
            C4296 * C1265 - C4851 * C1155 - C4296 * C1463 + C82932 * C1566) *
               C82581 * C1641) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C13256 +
            C3268 * C13257 + C3269 * C82893) *
               C82925 +
           (C13942 + C13943 + C13944) * C82909 +
           (C13945 + C13946 + C13947) * C82885) *
              C1149 -
          (((C239 * C3532 - C607 * C3343 - C239 * C3864 + C82592 * C4025) *
                C82893 +
            (C239 * C3529 - C607 * C3346 - C239 * C3861 + C82592 * C4026) *
                C13257 +
            (C239 * C1267 - C607 * C1153 - C239 * C1465 + C82592 * C1564) *
                C13256) *
               C82885 +
           ((C239 * C3531 - C607 * C3344 - C239 * C3863 + C82592 * C4027) *
                C82893 +
            (C239 * C3528 - C607 * C3347 - C239 * C3860 + C82592 * C4028) *
                C13257 +
            (C239 * C1266 - C607 * C1154 - C239 * C1464 + C82592 * C1565) *
                C13256) *
               C82909 +
           ((C239 * C3530 - C607 * C3345 - C239 * C3862 + C82592 * C4029) *
                C82893 +
            (C239 * C3527 - C607 * C3348 - C239 * C3859 + C82592 * C4030) *
                C13257 +
            (C239 * C1265 - C607 * C1155 - C239 * C1463 + C82592 * C1566) *
                C13256) *
               C82925) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C15400 +
           C3268 * C15401 + C3269 * C15402 + C16260 * C15403 +
           C16261 * C15404) *
              C82523 * C1149 -
          ((C239 * C16400 - C607 * C16303 - C239 * C16580 + C82592 * C16669) *
               C15404 +
           (C239 * C16399 - C607 * C16304 - C239 * C16579 + C82592 * C16670) *
               C15403 +
           (C239 * C3530 - C607 * C3345 - C239 * C3862 + C82592 * C4029) *
               C15402 +
           (C239 * C3527 - C607 * C3348 - C239 * C3859 + C82592 * C4030) *
               C15401 +
           (C239 * C1265 - C607 * C1155 - C239 * C1463 + C82592 * C1566) *
               C15400) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4296 * C240 - C4851 * C102 - C4296 * C497 + C82932 * C608 +
            C4297 * C1265 - C4852 * C1155 - C4297 * C1463 + C82918 * C1566 +
            C4298 * C4299 - C4853 * C4108 - C4298 * C4683 + C82896 * C4854) *
               C13256 +
           (C18182 + C18183 + C18184) * C13257 +
           (C18185 + C18186 + C18187) * C82893) *
              C82523 * C1149 -
          ((C4298 * C18460 - C4853 * C18261 - C4298 * C18818 + C82896 * C18987 +
            C4297 * C16905 - C4852 * C16745 - C4297 * C17213 + C82918 * C17367 +
            C4296 * C3530 - C4851 * C3345 - C4296 * C3862 + C82932 * C4029) *
               C82893 +
           (C4298 * C18459 - C4853 * C18262 - C4298 * C18817 + C82896 * C18988 +
            C4297 * C5140 - C4852 * C4976 - C4297 * C5454 + C82918 * C5613 +
            C4296 * C3527 - C4851 * C3348 - C4296 * C3859 + C82932 * C4030) *
               C13257 +
           (C4298 * C5904 - C4853 * C5690 - C4298 * C6262 + C82896 * C6437 +
            C4297 * C4299 - C4852 * C4108 - C4297 * C4683 + C82918 * C4854 +
            C4296 * C1265 - C4851 * C1155 - C4296 * C1463 + C82932 * C1566) *
               C13256) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C25871 * C240 - C26354 * C102 - C25871 * C497 + C25720 * C608 +
            C25872 * C1265 - C26355 * C1155 - C25872 * C1463 + C25721 * C1566 +
            C25873 * C4299 - C26356 * C4108 - C25873 * C4683 + C82896 * C4854) *
               C82581 * C82925 +
           (C26394 + C26395 + C26396) * C82581 * C82909 +
           (C26397 + C26398 + C26399) * C82581 * C82885) *
              C1149 -
          ((C25873 * C5906 - C26356 * C5688 - C25873 * C6264 + C82896 * C6435 +
            C25872 * C4301 - C26355 * C4110 - C25872 * C4685 + C25721 * C4856 +
            C25871 * C1267 - C26354 * C1153 - C25871 * C1465 + C25720 * C1564) *
               C82581 * C82885 +
           (C25873 * C5905 - C26356 * C5689 - C25873 * C6263 + C82896 * C6436 +
            C25872 * C4300 - C26355 * C4109 - C25872 * C4684 + C25721 * C4855 +
            C25871 * C1266 - C26354 * C1154 - C25871 * C1464 + C25720 * C1565) *
               C82581 * C82909 +
           (C25873 * C5904 - C26356 * C5690 - C25873 * C6262 + C82896 * C6437 +
            C25872 * C4299 - C26355 * C4108 - C25872 * C4683 + C25721 * C4854 +
            C25871 * C1265 - C26354 * C1155 - C25871 * C1463 + C25720 * C1566) *
               C82581 * C82925) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C25871 * C240 - C26354 * C102 - C25871 * C497 + C25720 * C608 +
            C25872 * C1265 - C26355 * C1155 - C25872 * C1463 + C25721 * C1566 +
            C25873 * C4299 - C26356 * C4108 - C25873 * C4683 + C82896 * C4854) *
               C82931 +
           (C29226 + C29227 + C29228) * C82916 +
           (C29229 + C29230 + C29231) * C82893) *
              C82523 * C1149 -
          ((C25873 * C18460 - C26356 * C18261 - C25873 * C18818 +
            C82896 * C18987 + C25872 * C16905 - C26355 * C16745 -
            C25872 * C17213 + C25721 * C17367 + C25871 * C3530 -
            C26354 * C3345 - C25871 * C3862 + C25720 * C4029) *
               C82893 +
           (C25873 * C18459 - C26356 * C18262 - C25873 * C18817 +
            C82896 * C18988 + C25872 * C5140 - C26355 * C4976 - C25872 * C5454 +
            C25721 * C5613 + C25871 * C3527 - C26354 * C3348 - C25871 * C3859 +
            C25720 * C4030) *
               C82916 +
           (C25873 * C5904 - C26356 * C5690 - C25873 * C6262 + C82896 * C6437 +
            C25872 * C4299 - C26355 * C4108 - C25872 * C4683 + C25721 * C4854 +
            C25871 * C1265 - C26354 * C1155 - C25871 * C1463 + C25720 * C1566) *
               C82931) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C30118 * C240 - C30393 * C102 - C30118 * C497 + C30017 * C608 +
           C30119 * C1265 - C30394 * C1155 - C30119 * C1463 + C30018 * C1566 +
           C30120 * C4299 - C30395 * C4108 - C30120 * C4683 + C30019 * C4854 +
           C30121 * C5904 - C30396 * C5690 - C30121 * C6262 + C30020 * C6437 +
           C30122 * C30123 - C30397 * C30022 - C30122 * C30303 +
           C30021 * C30398) *
              C82581 * C82523 * C1149 -
          (C30122 * C30948 - C30397 * C30836 - C30122 * C31148 +
           C30021 * C31243 + C30121 * C30123 - C30396 * C30022 -
           C30121 * C30303 + C30020 * C30398 + C30120 * C5904 - C30395 * C5690 -
           C30120 * C6262 + C30019 * C6437 + C30119 * C4299 - C30394 * C4108 -
           C30119 * C4683 + C30018 * C4854 + C30118 * C1265 - C30393 * C1155 -
           C30118 * C1463 + C30017 * C1566) *
              C82581 * C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[39] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C80224 * C108 - C19062 * C102 - C80224 * C109 + C82844 * C120 +
             C80205 * C110 - C19064 * C103 - C80205 * C111 + C82533 * C121) *
                C82864 +
            (C80224 * C1164 - C19062 * C1155 - C80224 * C1165 + C82844 * C1170 +
             C80205 * C1162 - C19064 * C1154 - C80205 * C1163 +
             C82533 * C1169) *
                C82679) *
               C13256 +
           ((C19773 + C19774) * C82864 +
            (C80224 * C3359 - C19062 * C3348 - C80224 * C3360 + C82844 * C3366 +
             C80205 * C3357 - C19064 * C3347 - C80205 * C3358 +
             C82533 * C3365) *
                C82679) *
               C13257 +
           ((C19775 + C19776) * C82864 +
            (C80224 * C3353 - C19062 * C3345 - C80224 * C3354 + C82844 * C3363 +
             C80205 * C3351 - C19064 * C3344 - C80205 * C3352 +
             C82533 * C3362) *
                C82679) *
               C82893) *
              C82938 * C82939 * C90 -
          (((C80205 * C3349 - C19064 * C3343 - C80205 * C3350 + C82533 * C3361 +
             C80224 * C3351 - C19062 * C3344 - C80224 * C3352 +
             C82844 * C3362) *
                C82679 +
            (C80205 * C1661 - C19064 * C1655 - C80205 * C1662 + C82533 * C1667 +
             C80224 * C1659 - C19062 * C1654 - C80224 * C1660 +
             C82844 * C1666) *
                C82864) *
               C82893 +
           ((C80205 * C3355 - C19064 * C3346 - C80205 * C3356 + C82533 * C3364 +
             C80224 * C3357 - C19062 * C3347 - C80224 * C3358 +
             C82844 * C3365) *
                C82679 +
            (C80205 * C700 - C19064 * C693 - C80205 * C701 + C82533 * C708 +
             C80224 * C702 - C19062 * C694 - C80224 * C703 + C82844 * C709) *
                C82864) *
               C13257 +
           ((C80205 * C1160 - C19064 * C1153 - C80205 * C1161 + C82533 * C1168 +
             C80224 * C1162 - C19062 * C1154 - C80224 * C1163 +
             C82844 * C1169) *
                C82679 +
            (C80205 * C112 - C19064 * C104 - C80205 * C113 + C82533 * C122 +
             C80224 * C110 - C19062 * C103 - C80224 * C111 + C82844 * C121) *
                C82864) *
               C13256) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6510 * C108 - C6511 * C102 - C6510 * C109 + C6504 * C120 +
            C6512 * C110 - C6513 * C103 - C6512 * C111 + C6505 * C121 +
            C6514 * C112 - C6515 * C104 - C6514 * C113 + C6506 * C122 +
            C6516 * C114 - C6517 * C105 - C6516 * C115 + C82862 * C123) *
               C82864 +
           (C6510 * C1164 - C6511 * C1155 - C6510 * C1165 + C6504 * C1170 +
            C6512 * C1162 - C6513 * C1154 - C6512 * C1163 + C6505 * C1169 +
            C6514 * C1160 - C6515 * C1153 - C6514 * C1161 + C6506 * C1168 +
            C6516 * C1158 - C6517 * C1152 - C6516 * C1159 + C82862 * C1167) *
               C82679) *
              C82581 * C82938 * C82939 * C90 -
          ((C6516 * C1156 - C6517 * C1151 - C6516 * C1157 + C82862 * C1166 +
            C6514 * C1158 - C6515 * C1152 - C6514 * C1159 + C6506 * C1167 +
            C6512 * C1160 - C6513 * C1153 - C6512 * C1161 + C6505 * C1168 +
            C6510 * C1162 - C6511 * C1154 - C6510 * C1163 + C6504 * C1169) *
               C82679 +
           (C6516 * C116 - C6517 * C106 - C6516 * C117 + C82862 * C124 +
            C6514 * C114 - C6515 * C105 - C6514 * C115 + C6506 * C123 +
            C6512 * C112 - C6513 * C104 - C6512 * C113 + C6505 * C122 +
            C6510 * C110 - C6511 * C103 - C6510 * C111 + C6504 * C121) *
               C82864) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C80224 * C108 - C19062 * C102 - C80224 * C109 + C82844 * C120 +
            C80205 * C110 - C19064 * C103 - C80205 * C111 + C82533 * C121) *
               C34115 +
           (C22970 + C22971) * C34116 + (C33214 + C33215) * C34117 +
           (C80224 * C5695 - C19062 * C5690 - C80224 * C5696 + C82844 * C5699 +
            C80205 * C5693 - C19064 * C5689 - C80205 * C5694 + C82533 * C5698) *
               C82878) *
              C82581 * C82938 * C82939 * C90 -
          ((C80205 * C5691 - C19064 * C5688 - C80205 * C5692 + C82533 * C5697 +
            C80224 * C5693 - C19062 * C5689 - C80224 * C5694 + C82844 * C5698) *
               C82878 +
           (C80205 * C4116 - C19064 * C4110 - C80205 * C4117 + C82533 * C4122 +
            C80224 * C4114 - C19062 * C4109 - C80224 * C4115 + C82844 * C4121) *
               C34117 +
           (C80205 * C1160 - C19064 * C1153 - C80205 * C1161 + C82533 * C1168 +
            C80224 * C1162 - C19062 * C1154 - C80224 * C1163 + C82844 * C1169) *
               C34116 +
           (C80205 * C112 - C19064 * C104 - C80205 * C113 + C82533 * C122 +
            C80224 * C110 - C19062 * C103 - C80224 * C111 + C82844 * C121) *
               C34115) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[39] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C80224 +
            (C13256 * C175 - C13339 * C109 + C13257 * C758 - C13340 * C705 +
             C82893 * C1750 - C13341 * C1658) *
                C82844 +
            (C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C80205 +
            (C13349 - C13350 + C13351 - C13352 + C13353 - C13354) * C82533) *
               C82864 +
           ((C18362 - C18363 + C18364 - C18365 + C18366 - C18367) * C80224 +
            (C18368 - C18369 + C18370 - C18371 + C18372 - C18373) * C82844 +
            (C21149 - C21150 + C21151 - C21152 + C21153 - C21154) * C80205 +
            (C21155 - C21156 + C21157 - C21158 + C21159 - C21160) * C82533) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C13344 - C13343 + C13346 - C13345 + C13348 - C13347) * C80224 +
            (C13350 - C13349 + C13352 - C13351 + C13354 - C13353) * C82844 +
            (C13356 - C13355 + C13358 - C13357 + C13360 - C13359) * C80205 +
            (C13362 - C13361 + C13364 - C13363 + C13366 - C13365) * C82533) *
               C82864 +
           ((C21150 - C21149 + C21152 - C21151 + C21154 - C21153) * C80224 +
            (C21156 - C21155 + C21158 - C21157 + C21160 - C21159) * C82844 +
            (C13339 * C1153 - C13256 * C1215 + C13340 * C3346 - C13257 * C3445 +
             C13341 * C3343 - C82893 * C3446) *
                C80205 +
            (C13339 * C1161 - C13256 * C1220 + C13340 * C3356 - C13257 * C3451 +
             C13341 * C3350 - C82893 * C3452) *
                C82533) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C6510 +
            (C82581 * C175 - C168 * C109) * C6504 + (C182 - C183) * C6512 +
            (C184 - C185) * C6505 + (C186 - C187) * C6514 +
            (C188 - C189) * C6506 + (C190 - C191) * C6516 +
            (C192 - C193) * C82862) *
               C82864 +
           ((C5823 - C5824) * C6510 + (C5825 - C5826) * C6504 +
            (C4207 - C4208) * C6512 + (C4209 - C4210) * C6505 +
            (C4211 - C4212) * C6514 + (C4213 - C4214) * C6506 +
            (C8538 - C8539) * C6516 + (C8540 - C8541) * C82862) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C183 - C182) * C6510 + (C185 - C184) * C6504 +
            (C187 - C186) * C6512 + (C189 - C188) * C6505 +
            (C191 - C190) * C6514 + (C193 - C192) * C6506 +
            (C195 - C194) * C6516 + (C197 - C196) * C82862) *
               C82864 +
           ((C4208 - C4207) * C6510 + (C4210 - C4209) * C6504 +
            (C4212 - C4211) * C6512 + (C4214 - C4213) * C6505 +
            (C8539 - C8538) * C6514 + (C8541 - C8540) * C6506 +
            (C168 * C1151 - C82581 * C1217) * C6516 +
            (C168 * C1157 - C82581 * C1222) * C82862) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C80224 +
            (C82581 * C175 - C168 * C109) * C82844 + (C182 - C183) * C80205 +
            (C184 - C185) * C82533) *
               C34115 +
           ((C5823 - C5824) * C80224 + (C5825 - C5826) * C82844 +
            (C4207 - C4208) * C80205 + (C4209 - C4210) * C82533) *
               C34116 +
           ((C5827 - C5828) * C80224 + (C5829 - C5830) * C82844 +
            (C4215 - C4216) * C80205 + (C4217 - C4218) * C82533) *
               C34117 +
           ((C30899 - C30900) * C80224 + (C30901 - C30902) * C82844 +
            (C34186 - C34187) * C80205 + (C34188 - C34189) * C82533) *
               C82878) *
              C82938 * C82939 * C90 +
          (((C183 - C182) * C80224 + (C185 - C184) * C82844 +
            (C187 - C186) * C80205 + (C189 - C188) * C82533) *
               C34115 +
           ((C4208 - C4207) * C80224 + (C4210 - C4209) * C82844 +
            (C4212 - C4211) * C80205 + (C4214 - C4213) * C82533) *
               C34116 +
           ((C4216 - C4215) * C80224 + (C4218 - C4217) * C82844 +
            (C4220 - C4219) * C80205 + (C4222 - C4221) * C82533) *
               C34117 +
           ((C34187 - C34186) * C80224 + (C34189 - C34188) * C82844 +
            (C168 * C5688 - C82581 * C5818) * C80205 +
            (C168 * C5692 - C82581 * C5821) * C82533) *
               C82878) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[39] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C80224 +
            (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
                C82844 +
            (C8610 - C8611 + C8612 - C8613) * C80205 +
            (C8614 - C8615 + C8616 - C8617) * C82533) *
               C13256 +
           ((C11640 - C11641 + C11642 - C11643) * C80224 +
            (C11644 - C11645 + C11646 - C11647) * C82844 +
            (C10649 - C10650 + C10651 - C10652) * C80205 +
            (C10653 - C10654 + C10655 - C10656) * C82533) *
               C13257 +
           ((C82864 * C1852 - C8607 * C1653 + C82679 * C3530 - C8608 * C3345) *
                C80224 +
            (C82864 * C1856 - C8607 * C1658 + C82679 * C3536 - C8608 * C3354) *
                C82844 +
            (C21259 - C21260 + C21261 - C21262) * C80205 +
            (C21263 - C21264 + C21265 - C21266) * C82533) *
               C82893) *
              C82938 * C82939 * C90 +
          (((C8611 - C8610 + C8613 - C8612) * C80224 +
            (C8615 - C8614 + C8617 - C8616) * C82844 +
            (C8619 - C8618 + C8621 - C8620) * C80205 +
            (C8623 - C8622 + C8625 - C8624) * C82533) *
               C13256 +
           ((C10650 - C10649 + C10652 - C10651) * C80224 +
            (C10654 - C10653 + C10656 - C10655) * C82844 +
            (C10658 - C10657 + C10660 - C10659) * C80205 +
            (C10662 - C10661 + C10664 - C10663) * C82533) *
               C13257 +
           ((C21260 - C21259 + C21262 - C21261) * C80224 +
            (C21264 - C21263 + C21266 - C21265) * C82844 +
            (C8607 * C1655 - C82864 * C1854 + C8608 * C3343 - C82679 * C3532) *
                C80205 +
            (C8607 * C1662 - C82864 * C1858 + C8608 * C3350 - C82679 * C3538) *
                C82533) *
               C82893) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
               C6510 +
           (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
               C6504 +
           (C8610 - C8611 + C8612 - C8613) * C6512 +
           (C8614 - C8615 + C8616 - C8617) * C6505 +
           (C8618 - C8619 + C8620 - C8621) * C6514 +
           (C8622 - C8623 + C8624 - C8625) * C6506 +
           (C8626 - C8627 + C8628 - C8629) * C6516 +
           (C8630 - C8631 + C8632 - C8633) * C82862) *
              C82581 * C82938 * C82939 * C90 +
          ((C8611 - C8610 + C8613 - C8612) * C6510 +
           (C8615 - C8614 + C8617 - C8616) * C6504 +
           (C8619 - C8618 + C8621 - C8620) * C6512 +
           (C8623 - C8622 + C8625 - C8624) * C6505 +
           (C8627 - C8626 + C8629 - C8628) * C6514 +
           (C8631 - C8630 + C8633 - C8632) * C6506 +
           (C8607 * C106 - C82864 * C244 + C8608 * C1151 - C82679 * C1269) *
               C6516 +
           (C8607 * C117 - C82864 * C250 + C8608 * C1157 - C82679 * C1274) *
               C82862) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C34115 * C240 - C34255 * C102 + C34116 * C1265 - C34256 * C1155 +
            C34117 * C4299 - C34257 * C4108 + C82878 * C5904 - C34258 * C5690) *
               C80224 +
           (C34115 * C246 - C34255 * C109 + C34116 * C1270 - C34256 * C1165 +
            C34117 * C4303 - C34257 * C4113 + C82878 * C5907 - C34258 * C5696) *
               C82844 +
           (C34260 - C34261 + C34262 - C34263 + C34264 - C34265 + C34266 -
            C34267) *
               C80205 +
           (C34268 - C34269 + C34270 - C34271 + C34272 - C34273 + C34274 -
            C34275) *
               C82533) *
              C82581 * C82938 * C82939 * C90 +
          ((C34261 - C34260 + C34263 - C34262 + C34265 - C34264 + C34267 -
            C34266) *
               C80224 +
           (C34269 - C34268 + C34271 - C34270 + C34273 - C34272 + C34275 -
            C34274) *
               C82844 +
           (C34255 * C104 - C34115 * C242 + C34256 * C1153 - C34116 * C1267 +
            C34257 * C4110 - C34117 * C4301 + C34258 * C5688 - C82878 * C5906) *
               C80205 +
           (C34255 * C113 - C34115 * C248 + C34256 * C1161 - C34116 * C1272 +
            C34257 * C4117 - C34117 * C4305 + C34258 * C5692 - C82878 * C5909) *
               C82533) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[39] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C13339 +
            (C82844 * C316 - C80224 * C310 + C82533 * C317 - C80205 * C311) *
                C13256 +
            (C19977 - C19978 + C19979 - C19980) * C13340 +
            (C19981 - C19982 + C19983 - C19984) * C13257 +
            (C19985 - C19986 + C19987 - C19988) * C13341 +
            (C19989 - C19990 + C19991 - C19992) * C82893) *
               C82864 +
           ((C82844 * C1164 - C80224 * C1155 + C82533 * C1162 -
             C80205 * C1154) *
                C13339 +
            (C82844 * C1322 - C80224 * C1317 + C82533 * C1323 -
             C80205 * C1318) *
                C13256 +
            (C82844 * C3359 - C80224 * C3348 + C82533 * C3357 -
             C80205 * C3347) *
                C13340 +
            (C82844 * C3619 - C80224 * C3613 + C82533 * C3620 -
             C80205 * C3614) *
                C13257 +
            (C82844 * C3353 - C80224 * C3345 + C82533 * C3351 -
             C80205 * C3344) *
                C13341 +
            (C82844 * C3622 - C80224 * C3616 + C82533 * C3623 -
             C80205 * C3617) *
                C82893) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C80224 * C103 - C82844 * C110 + C80205 * C104 - C82533 * C112) *
                C13339 +
            (C80224 * C311 - C82844 * C317 + C80205 * C312 - C82533 * C318) *
                C13256 +
            (C80224 * C694 - C82844 * C702 + C80205 * C693 - C82533 * C700) *
                C13340 +
            (C80224 * C858 - C82844 * C863 + C80205 * C859 - C82533 * C864) *
                C13257 +
            (C80224 * C1654 - C82844 * C1659 + C80205 * C1655 -
             C82533 * C1661) *
                C13341 +
            (C80224 * C1951 - C82844 * C1955 + C80205 * C1952 -
             C82533 * C1956) *
                C82893) *
               C82864 +
           ((C80224 * C1154 - C82844 * C1162 + C80205 * C1153 -
             C82533 * C1160) *
                C13339 +
            (C80224 * C1318 - C82844 * C1323 + C80205 * C1319 -
             C82533 * C1324) *
                C13256 +
            (C80224 * C3347 - C82844 * C3357 + C80205 * C3346 -
             C82533 * C3355) *
                C13340 +
            (C80224 * C3614 - C82844 * C3620 + C80205 * C3615 -
             C82533 * C3621) *
                C13257 +
            (C80224 * C3344 - C82844 * C3351 + C80205 * C3343 -
             C82533 * C3349) *
                C13341 +
            (C80224 * C3617 - C82844 * C3623 + C80205 * C3618 -
             C82533 * C3624) *
                C82893) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6504 * C108 - C6510 * C102 + C6505 * C110 - C6512 * C103 +
             C6506 * C112 - C6514 * C104 + C82862 * C114 - C6516 * C105) *
                C168 +
            (C6504 * C316 - C6510 * C310 + C6505 * C317 - C6512 * C311 +
             C6506 * C318 - C6514 * C312 + C82862 * C319 - C6516 * C313) *
                C82581) *
               C82864 +
           ((C6504 * C1164 - C6510 * C1155 + C6505 * C1162 - C6512 * C1154 +
             C6506 * C1160 - C6514 * C1153 + C82862 * C1158 - C6516 * C1152) *
                C168 +
            (C6504 * C1322 - C6510 * C1317 + C6505 * C1323 - C6512 * C1318 +
             C6506 * C1324 - C6514 * C1319 + C82862 * C1325 - C6516 * C1320) *
                C82581) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C6510 * C103 - C6504 * C110 + C6512 * C104 - C6505 * C112 +
             C6514 * C105 - C6506 * C114 + C6516 * C106 - C82862 * C116) *
                C168 +
            (C6510 * C311 - C6504 * C317 + C6512 * C312 - C6505 * C318 +
             C6514 * C313 - C6506 * C319 + C6516 * C314 - C82862 * C320) *
                C82581) *
               C82864 +
           ((C6510 * C1154 - C6504 * C1162 + C6512 * C1153 - C6505 * C1160 +
             C6514 * C1152 - C6506 * C1158 + C6516 * C1151 - C82862 * C1156) *
                C168 +
            (C6510 * C1318 - C6504 * C1323 + C6512 * C1319 - C6505 * C1324 +
             C6514 * C1320 - C6506 * C1325 + C6516 * C1321 - C82862 * C1326) *
                C82581) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C168 +
            (C82844 * C316 - C80224 * C310 + C82533 * C317 - C80205 * C311) *
                C82581) *
               C34115 +
           ((C23266 - C23267 + C23268 - C23269) * C168 +
            (C23270 - C23271 + C23272 - C23273) * C82581) *
               C34116 +
           ((C33524 - C33525 + C33526 - C33527) * C168 +
            (C33528 - C33529 + C33530 - C33531) * C82581) *
               C34117 +
           ((C82844 * C5695 - C80224 * C5690 + C82533 * C5693 -
             C80205 * C5689) *
                C168 +
            (C82844 * C5987 - C80224 * C5984 + C82533 * C5988 -
             C80205 * C5985) *
                C82581) *
               C82878) *
              C82938 * C82939 * C90 +
          (((C80224 * C103 - C82844 * C110 + C80205 * C104 - C82533 * C112) *
                C168 +
            (C80224 * C311 - C82844 * C317 + C80205 * C312 - C82533 * C318) *
                C82581) *
               C34115 +
           ((C80224 * C1154 - C82844 * C1162 + C80205 * C1153 -
             C82533 * C1160) *
                C168 +
            (C80224 * C1318 - C82844 * C1323 + C80205 * C1319 -
             C82533 * C1324) *
                C82581) *
               C34116 +
           ((C80224 * C4109 - C82844 * C4114 + C80205 * C4110 -
             C82533 * C4116) *
                C168 +
            (C80224 * C4406 - C82844 * C4410 + C80205 * C4407 -
             C82533 * C4411) *
                C82581) *
               C34117 +
           ((C80224 * C5689 - C82844 * C5693 + C80205 * C5688 -
             C82533 * C5691) *
                C168 +
            (C80224 * C5985 - C82844 * C5988 + C80205 * C5986 -
             C82533 * C5989) *
                C82581) *
               C82878) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[39] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13339 * C169 - C13588 * C102 - C13339 * C310 + C13256 * C365 +
             C13340 * C753 - C13589 * C695 - C13340 * C857 + C13257 * C913 +
             C13341 * C1746 - C13590 * C1653 - C13341 * C1950 +
             C82893 * C2035) *
                C82844 +
            (C13628 + C13629 + C13630) * C82533) *
               C82864 +
           ((C18662 + C18663 + C18664) * C82844 +
            (C21481 + C21482 + C21483) * C82533) *
               C82679) *
              C82938 * C82939 * C90 -
          (((C13341 * C3446 - C13590 * C3343 - C13341 * C3618 + C82893 * C3699 +
             C13340 * C3445 - C13589 * C3346 - C13340 * C3615 + C13257 * C3700 +
             C13339 * C1215 - C13588 * C1153 - C13339 * C1319 +
             C13256 * C1371) *
                C82533 +
            (C21483 + C21482 + C21481) * C82844) *
               C82679 +
           ((C13633 + C13632 + C13631) * C82533 +
            (C13630 + C13629 + C13628) * C82844) *
               C82864) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C6504 +
            C396 * C6505 + C397 * C6506 + C398 * C82862) *
               C82864 +
           (C6108 * C6504 + C4516 * C6505 + C4517 * C6506 + C8772 * C82862) *
               C82679) *
              C82938 * C82939 * C90 -
          (((C168 * C1217 - C364 * C1151 - C168 * C1321 + C82581 * C1369) *
                C82862 +
            C8772 * C6506 + C4517 * C6505 + C4516 * C6504) *
               C82679 +
           (C399 * C82862 + C398 * C6506 + C397 * C6505 + C396 * C6504) *
               C82864) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C82844 +
            C396 * C82533) *
               C34115 +
           (C6108 * C82844 + C4516 * C82533) * C34116 +
           (C6109 * C82844 + C4518 * C82533) * C34117 +
           (C31060 * C82844 + C34414 * C82533) * C82878) *
              C82938 * C82939 * C90 -
          (((C168 * C5818 - C364 * C5688 - C168 * C5986 + C82581 * C6088) *
                C82533 +
            C34414 * C82844) *
               C82878 +
           (C4519 * C82533 + C4518 * C82844) * C34117 +
           (C4517 * C82533 + C4516 * C82844) * C34116 +
           (C397 * C82533 + C396 * C82844) * C34115) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[39] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C13339 +
            (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
                C13256 +
            (C11640 - C11641 + C11642 - C11643) * C13340 +
            (C11954 - C11955 + C11956 - C11957) * C13257 +
            (C82864 * C1852 - C8607 * C1653 + C82679 * C3530 - C8608 * C3345) *
                C13341 +
            (C82864 * C2155 - C8607 * C1950 + C82679 * C3780 - C8608 * C3616) *
                C82893) *
               C82844 +
           ((C8610 - C8611 + C8612 - C8613) * C13339 +
            (C8839 - C8840 + C8841 - C8842) * C13256 +
            (C10649 - C10650 + C10651 - C10652) * C13340 +
            (C10987 - C10988 + C10989 - C10990) * C13257 +
            (C21259 - C21260 + C21261 - C21262) * C13341 +
            (C21582 - C21583 + C21584 - C21585) * C82893) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C8611 - C8610 + C8613 - C8612) * C13339 +
            (C8840 - C8839 + C8842 - C8841) * C13256 +
            (C10650 - C10649 + C10652 - C10651) * C13340 +
            (C10988 - C10987 + C10990 - C10989) * C13257 +
            (C21260 - C21259 + C21262 - C21261) * C13341 +
            (C21583 - C21582 + C21585 - C21584) * C82893) *
               C82844 +
           ((C8619 - C8618 + C8621 - C8620) * C13339 +
            (C8844 - C8843 + C8846 - C8845) * C13256 +
            (C10658 - C10657 + C10660 - C10659) * C13340 +
            (C10992 - C10991 + C10994 - C10993) * C13257 +
            (C8607 * C1655 - C82864 * C1854 + C8608 * C3343 - C82679 * C3532) *
                C13341 +
            (C8607 * C1952 - C82864 * C2157 + C8608 * C3618 - C82679 * C3784) *
                C82893) *
               C82533) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C168 +
            (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
                C82581) *
               C6504 +
           ((C8610 - C8611 + C8612 - C8613) * C168 +
            (C8839 - C8840 + C8841 - C8842) * C82581) *
               C6505 +
           ((C8618 - C8619 + C8620 - C8621) * C168 +
            (C8843 - C8844 + C8845 - C8846) * C82581) *
               C6506 +
           ((C8626 - C8627 + C8628 - C8629) * C168 +
            (C8847 - C8848 + C8849 - C8850) * C82581) *
               C82862) *
              C82938 * C82939 * C90 +
          (((C8611 - C8610 + C8613 - C8612) * C168 +
            (C8840 - C8839 + C8842 - C8841) * C82581) *
               C6504 +
           ((C8619 - C8618 + C8621 - C8620) * C168 +
            (C8844 - C8843 + C8846 - C8845) * C82581) *
               C6505 +
           ((C8627 - C8626 + C8629 - C8628) * C168 +
            (C8848 - C8847 + C8850 - C8849) * C82581) *
               C6506 +
           ((C8607 * C106 - C82864 * C244 + C8608 * C1151 - C82679 * C1269) *
                C168 +
            (C8607 * C314 - C82864 * C445 + C8608 * C1321 - C82679 * C1420) *
                C82581) *
               C82862) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C34115 * C240 - C34255 * C102 + C34116 * C1265 - C34256 * C1155 +
             C34117 * C4299 - C34257 * C4108 + C82878 * C5904 -
             C34258 * C5690) *
                C168 +
            (C34115 * C441 - C34255 * C310 + C34116 * C1416 - C34256 * C1317 +
             C34117 * C4593 - C34257 * C4405 + C82878 * C6185 -
             C34258 * C5984) *
                C82581) *
               C82844 +
           ((C34260 - C34261 + C34262 - C34263 + C34264 - C34265 + C34266 -
             C34267) *
                C168 +
            (C34481 - C34482 + C34483 - C34484 + C34485 - C34486 + C34487 -
             C34488) *
                C82581) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C34261 - C34260 + C34263 - C34262 + C34265 - C34264 + C34267 -
             C34266) *
                C168 +
            (C34482 - C34481 + C34484 - C34483 + C34486 - C34485 + C34488 -
             C34487) *
                C82581) *
               C82844 +
           ((C34255 * C104 - C34115 * C242 + C34256 * C1153 - C34116 * C1267 +
             C34257 * C4110 - C34117 * C4301 + C34258 * C5688 -
             C82878 * C5906) *
                C168 +
            (C34255 * C312 - C34115 * C443 + C34256 * C1319 - C34116 * C1418 +
             C34257 * C4407 - C34117 * C4595 + C34258 * C5986 -
             C82878 * C6187) *
                C82581) *
               C82533) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezx[39] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C8607 +
            (C82844 * C503 - C80224 * C497 + C82533 * C504 - C80205 * C498) *
                C82864 +
            (C82844 * C1164 - C80224 * C1155 + C82533 * C1162 -
             C80205 * C1154) *
                C8608 +
            (C82844 * C1468 - C80224 * C1463 + C82533 * C1469 -
             C80205 * C1464) *
                C82679) *
               C13256 +
           ((C19977 - C19978 + C19979 - C19980) * C8607 +
            (C20199 - C20200 + C20201 - C20202) * C82864 +
            (C82844 * C3359 - C80224 * C3348 + C82533 * C3357 -
             C80205 * C3347) *
                C8608 +
            (C82844 * C3865 - C80224 * C3859 + C82533 * C3866 -
             C80205 * C3860) *
                C82679) *
               C13257 +
           ((C19985 - C19986 + C19987 - C19988) * C8607 +
            (C20203 - C20204 + C20205 - C20206) * C82864 +
            (C82844 * C3353 - C80224 * C3345 + C82533 * C3351 -
             C80205 * C3344) *
                C8608 +
            (C82844 * C3868 - C80224 * C3862 + C82533 * C3869 -
             C80205 * C3863) *
                C82679) *
               C82893) *
              C82938 * C82939 * C90 +
          (((C80224 * C103 - C82844 * C110 + C80205 * C104 - C82533 * C112) *
                C8607 +
            (C80224 * C498 - C82844 * C504 + C80205 * C499 - C82533 * C505) *
                C82864 +
            (C80224 * C1154 - C82844 * C1162 + C80205 * C1153 -
             C82533 * C1160) *
                C8608 +
            (C80224 * C1464 - C82844 * C1469 + C80205 * C1465 -
             C82533 * C1470) *
                C82679) *
               C13256 +
           ((C80224 * C694 - C82844 * C702 + C80205 * C693 - C82533 * C700) *
                C8607 +
            (C80224 * C1004 - C82844 * C1009 + C80205 * C1005 -
             C82533 * C1010) *
                C82864 +
            (C80224 * C3347 - C82844 * C3357 + C80205 * C3346 -
             C82533 * C3355) *
                C8608 +
            (C80224 * C3860 - C82844 * C3866 + C80205 * C3861 -
             C82533 * C3867) *
                C82679) *
               C13257 +
           ((C80224 * C1654 - C82844 * C1659 + C80205 * C1655 -
             C82533 * C1661) *
                C8607 +
            (C80224 * C2242 - C82844 * C2246 + C80205 * C2243 -
             C82533 * C2247) *
                C82864 +
            (C80224 * C3344 - C82844 * C3351 + C80205 * C3343 -
             C82533 * C3349) *
                C8608 +
            (C80224 * C3863 - C82844 * C3869 + C80205 * C3864 -
             C82533 * C3870) *
                C82679) *
               C82893) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6504 * C108 - C6510 * C102 + C6505 * C110 - C6512 * C103 +
            C6506 * C112 - C6514 * C104 + C82862 * C114 - C6516 * C105) *
               C8607 +
           (C6504 * C503 - C6510 * C497 + C6505 * C504 - C6512 * C498 +
            C6506 * C505 - C6514 * C499 + C82862 * C506 - C6516 * C500) *
               C82864 +
           (C6504 * C1164 - C6510 * C1155 + C6505 * C1162 - C6512 * C1154 +
            C6506 * C1160 - C6514 * C1153 + C82862 * C1158 - C6516 * C1152) *
               C8608 +
           (C6504 * C1468 - C6510 * C1463 + C6505 * C1469 - C6512 * C1464 +
            C6506 * C1470 - C6514 * C1465 + C82862 * C1471 - C6516 * C1466) *
               C82679) *
              C82581 * C82938 * C82939 * C90 +
          ((C6510 * C103 - C6504 * C110 + C6512 * C104 - C6505 * C112 +
            C6514 * C105 - C6506 * C114 + C6516 * C106 - C82862 * C116) *
               C8607 +
           (C6510 * C498 - C6504 * C504 + C6512 * C499 - C6505 * C505 +
            C6514 * C500 - C6506 * C506 + C6516 * C501 - C82862 * C507) *
               C82864 +
           (C6510 * C1154 - C6504 * C1162 + C6512 * C1153 - C6505 * C1160 +
            C6514 * C1152 - C6506 * C1158 + C6516 * C1151 - C82862 * C1156) *
               C8608 +
           (C6510 * C1464 - C6504 * C1469 + C6512 * C1465 - C6505 * C1470 +
            C6514 * C1466 - C6506 * C1471 + C6516 * C1467 - C82862 * C1472) *
               C82679) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
               C34255 +
           (C82844 * C503 - C80224 * C497 + C82533 * C504 - C80205 * C498) *
               C34115 +
           (C23266 - C23267 + C23268 - C23269) * C34256 +
           (C23568 - C23569 + C23570 - C23571) * C34116 +
           (C33524 - C33525 + C33526 - C33527) * C34257 +
           (C33844 - C33845 + C33846 - C33847) * C34117 +
           (C82844 * C5695 - C80224 * C5690 + C82533 * C5693 - C80205 * C5689) *
               C34258 +
           (C82844 * C6265 - C80224 * C6262 + C82533 * C6266 - C80205 * C6263) *
               C82878) *
              C82581 * C82938 * C82939 * C90 +
          ((C80224 * C103 - C82844 * C110 + C80205 * C104 - C82533 * C112) *
               C34255 +
           (C80224 * C498 - C82844 * C504 + C80205 * C499 - C82533 * C505) *
               C34115 +
           (C80224 * C1154 - C82844 * C1162 + C80205 * C1153 - C82533 * C1160) *
               C34256 +
           (C80224 * C1464 - C82844 * C1469 + C80205 * C1465 - C82533 * C1470) *
               C34116 +
           (C80224 * C4109 - C82844 * C4114 + C80205 * C4110 - C82533 * C4116) *
               C34257 +
           (C80224 * C4684 - C82844 * C4688 + C80205 * C4685 - C82533 * C4689) *
               C34117 +
           (C80224 * C5689 - C82844 * C5693 + C80205 * C5688 - C82533 * C5691) *
               C34258 +
           (C80224 * C6263 - C82844 * C6266 + C80205 * C6264 - C82533 * C6267) *
               C82878) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[39] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C8607 +
            (C13256 * C551 - C13339 * C497 + C13257 * C1055 - C13340 * C1003 +
             C82893 * C2323 - C13341 * C2241) *
                C82864 +
            (C18362 - C18363 + C18364 - C18365 + C18366 - C18367) * C8608 +
            (C18902 - C18903 + C18904 - C18905 + C18906 - C18907) * C82679) *
               C82844 +
           ((C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C8607 +
            (C13856 - C13857 + C13858 - C13859 + C13860 - C13861) * C82864 +
            (C21149 - C21150 + C21151 - C21152 + C21153 - C21154) * C8608 +
            (C21782 - C21783 + C21784 - C21785 + C21786 - C21787) * C82679) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C13344 - C13343 + C13346 - C13345 + C13348 - C13347) * C8607 +
            (C13857 - C13856 + C13859 - C13858 + C13861 - C13860) * C82864 +
            (C21150 - C21149 + C21152 - C21151 + C21154 - C21153) * C8608 +
            (C21783 - C21782 + C21785 - C21784 + C21787 - C21786) * C82679) *
               C82844 +
           ((C13356 - C13355 + C13358 - C13357 + C13360 - C13359) * C8607 +
            (C13863 - C13862 + C13865 - C13864 + C13867 - C13866) * C82864 +
            (C13339 * C1153 - C13256 * C1215 + C13340 * C3346 - C13257 * C3445 +
             C13341 * C3343 - C82893 * C3446) *
                C8608 +
            (C13339 * C1465 - C13256 * C1517 + C13340 * C3861 - C13257 * C3949 +
             C13341 * C3864 - C82893 * C3950) *
                C82679) *
               C82533) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C8607 +
            (C82581 * C551 - C168 * C497) * C82864 + (C5823 - C5824) * C8608 +
            (C6358 - C6359) * C82679) *
               C6504 +
           ((C182 - C183) * C8607 + (C558 - C559) * C82864 +
            (C4207 - C4208) * C8608 + (C4770 - C4771) * C82679) *
               C6505 +
           ((C186 - C187) * C8607 + (C560 - C561) * C82864 +
            (C4211 - C4212) * C8608 + (C4774 - C4775) * C82679) *
               C6506 +
           ((C190 - C191) * C8607 + (C562 - C563) * C82864 +
            (C8538 - C8539) * C8608 + (C8983 - C8984) * C82679) *
               C82862) *
              C82938 * C82939 * C90 +
          (((C183 - C182) * C8607 + (C559 - C558) * C82864 +
            (C4208 - C4207) * C8608 + (C4771 - C4770) * C82679) *
               C6504 +
           ((C187 - C186) * C8607 + (C561 - C560) * C82864 +
            (C4212 - C4211) * C8608 + (C4775 - C4774) * C82679) *
               C6505 +
           ((C191 - C190) * C8607 + (C563 - C562) * C82864 +
            (C8539 - C8538) * C8608 + (C8984 - C8983) * C82679) *
               C6506 +
           ((C195 - C194) * C8607 + (C565 - C564) * C82864 +
            (C168 * C1151 - C82581 * C1217) * C8608 +
            (C168 * C1467 - C82581 * C1519) * C82679) *
               C82862) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C34255 +
            (C82581 * C551 - C168 * C497) * C34115 + (C5823 - C5824) * C34256 +
            (C6358 - C6359) * C34116 + (C5827 - C5828) * C34257 +
            (C6360 - C6361) * C34117 + (C30899 - C30900) * C34258 +
            (C31198 - C31199) * C82878) *
               C82844 +
           ((C182 - C183) * C34255 + (C558 - C559) * C34115 +
            (C4207 - C4208) * C34256 + (C4770 - C4771) * C34116 +
            (C4215 - C4216) * C34257 + (C4772 - C4773) * C34117 +
            (C34186 - C34187) * C34258 + (C34621 - C34622) * C82878) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C183 - C182) * C34255 + (C559 - C558) * C34115 +
            (C4208 - C4207) * C34256 + (C4771 - C4770) * C34116 +
            (C4216 - C4215) * C34257 + (C4773 - C4772) * C34117 +
            (C34187 - C34186) * C34258 + (C34622 - C34621) * C82878) *
               C82844 +
           ((C187 - C186) * C34255 + (C561 - C560) * C34115 +
            (C4212 - C4211) * C34256 + (C4775 - C4774) * C34116 +
            (C4220 - C4219) * C34257 + (C4777 - C4776) * C34117 +
            (C168 * C5688 - C82581 * C5818) * C34258 +
            (C168 * C6264 - C82581 * C6356) * C82878) *
               C82533) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[39] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
             C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
                C13256 +
            (C12270 + C12271) * C13257 +
            (C8607 * C1852 - C9050 * C1653 - C8607 * C2241 + C82864 * C2413 +
             C8608 * C3530 - C9051 * C3345 - C8608 * C3862 + C82679 * C4029) *
                C82893) *
               C82844 +
           ((C9089 + C9090) * C13256 + (C11321 + C11322) * C13257 +
            (C21898 + C21899) * C82893) *
               C82533) *
              C82938 * C82939 * C90 -
          (((C8608 * C3532 - C9051 * C3343 - C8608 * C3864 + C82679 * C4025 +
             C8607 * C1854 - C9050 * C1655 - C8607 * C2243 + C82864 * C2415) *
                C82893 +
            (C11324 + C11323) * C13257 + (C9092 + C9091) * C13256) *
               C82533 +
           ((C21899 + C21898) * C82893 + (C11322 + C11321) * C13257 +
            (C9090 + C9089) * C13256) *
               C82844) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
            C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
               C82581 * C6504 +
           (C9089 + C9090) * C82581 * C6505 + (C9091 + C9092) * C82581 * C6506 +
           (C9093 + C9094) * C82581 * C82862) *
              C82938 * C82939 * C90 -
          ((C8608 * C1269 - C9051 * C1151 - C8608 * C1467 + C82679 * C1562 +
            C8607 * C244 - C9050 * C106 - C8607 * C501 + C82864 * C612) *
               C82581 * C82862 +
           (C9094 + C9093) * C82581 * C6506 + (C9092 + C9091) * C82581 * C6505 +
           (C9090 + C9089) * C82581 * C6504) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C34255 * C240 - C34688 * C102 - C34255 * C497 + C34115 * C608 +
            C34256 * C1265 - C34689 * C1155 - C34256 * C1463 + C34116 * C1566 +
            C34257 * C4299 - C34690 * C4108 - C34257 * C4683 + C34117 * C4854 +
            C34258 * C5904 - C34691 * C5690 - C34258 * C6262 + C82878 * C6437) *
               C82581 * C82844 +
           (C34717 + C34718 + C34719 + C34720) * C82581 * C82533) *
              C82938 * C82939 * C90 -
          ((C34258 * C5906 - C34691 * C5688 - C34258 * C6264 + C82878 * C6435 +
            C34257 * C4301 - C34690 * C4110 - C34257 * C4685 + C34117 * C4856 +
            C34256 * C1267 - C34689 * C1153 - C34256 * C1465 + C34116 * C1564 +
            C34255 * C242 - C34688 * C104 - C34255 * C499 + C34115 * C610) *
               C82581 * C82533 +
           (C34720 + C34719 + C34718 + C34717) * C82581 * C82844) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexx[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C80224 * C108 - C19062 * C102 - C80224 * C109 + C82844 * C120 +
             C80205 * C110 - C19064 * C103 - C80205 * C111 + C82533 * C121) *
                C82864 +
            (C80224 * C1164 - C19062 * C1155 - C80224 * C1165 + C82844 * C1170 +
             C80205 * C1162 - C19064 * C1154 - C80205 * C1163 +
             C82533 * C1169) *
                C82679) *
               C13256 +
           ((C19773 + C19774) * C82864 + (C22022 + C22023) * C82679) * C13257 +
           ((C19775 + C19776) * C82864 + (C22024 + C22025) * C82679) * C82893) *
              C82938 * C688 -
          (((C80205 * C20409 - C19064 * C20408 - C80205 * C20410 +
             C82533 * C20411 + C80224 * C16307 - C19062 * C16304 -
             C80224 * C16308 + C82844 * C16310) *
                C82679 +
            (C19778 + C19777) * C82864) *
               C82893 +
           ((C22025 + C22024) * C82679 + (C19776 + C19775) * C82864) * C13257 +
           ((C22023 + C22022) * C82679 + (C19774 + C19773) * C82864) * C13256) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6510 * C108 - C6511 * C102 - C6510 * C109 + C6504 * C120 +
            C6512 * C110 - C6513 * C103 - C6512 * C111 + C6505 * C121 +
            C6514 * C112 - C6515 * C104 - C6514 * C113 + C6506 * C122 +
            C6516 * C114 - C6517 * C105 - C6516 * C115 + C82862 * C123) *
               C82864 +
           (C6510 * C1164 - C6511 * C1155 - C6510 * C1165 + C6504 * C1170 +
            C6512 * C1162 - C6513 * C1154 - C6512 * C1163 + C6505 * C1169 +
            C6514 * C1160 - C6515 * C1153 - C6514 * C1161 + C6506 * C1168 +
            C6516 * C1158 - C6517 * C1152 - C6516 * C1159 + C82862 * C1167) *
               C82679) *
              C82581 * C82938 * C688 -
          ((C6516 * C7860 - C6517 * C7859 - C6516 * C7861 + C82862 * C7862 +
            C6514 * C3355 - C6515 * C3346 - C6514 * C3356 + C6506 * C3364 +
            C6512 * C3357 - C6513 * C3347 - C6512 * C3358 + C6505 * C3365 +
            C6510 * C3359 - C6511 * C3348 - C6510 * C3360 + C6504 * C3366) *
               C82679 +
           (C7241 + C7240 + C7239 + C7238) * C82864) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C80224 * C108 - C19062 * C102 - C80224 * C109 + C82844 * C120 +
            C80205 * C110 - C19064 * C103 - C80205 * C111 + C82533 * C121) *
               C34115 +
           (C22970 + C22971) * C34116 + (C33214 + C33215) * C34117 +
           (C80224 * C5695 - C19062 * C5690 - C80224 * C5696 + C82844 * C5699 +
            C80205 * C5693 - C19064 * C5689 - C80205 * C5694 + C82533 * C5698) *
               C82878) *
              C82581 * C82938 * C688 -
          ((C80205 * C33198 - C19064 * C33197 - C80205 * C33199 +
            C82533 * C33200 + C80224 * C18265 - C19062 * C18262 -
            C80224 * C18266 + C82844 * C18268) *
               C82878 +
           (C32303 + C32302) * C34117 + (C22023 + C22022) * C34116 +
           (C19774 + C19773) * C34115) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C80224 +
            (C13256 * C175 - C13339 * C109 + C13257 * C758 - C13340 * C705 +
             C82893 * C1750 - C13341 * C1658) *
                C82844 +
            (C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C80205 +
            (C13349 - C13350 + C13351 - C13352 + C13353 - C13354) * C82533) *
               C82864 +
           ((C18362 - C18363 + C18364 - C18365 + C18366 - C18367) * C80224 +
            (C18368 - C18369 + C18370 - C18371 + C18372 - C18373) * C82844 +
            (C21149 - C21150 + C21151 - C21152 + C21153 - C21154) * C80205 +
            (C21155 - C21156 + C21157 - C21158 + C21159 - C21160) * C82533) *
               C82679) *
              C82938 * C688 +
          (((C13339 * C695 - C13256 * C753 + C13340 * C1653 - C13257 * C1746 +
             C13341 * C2527 - C82893 * C2653) *
                C80224 +
            (C13339 * C705 - C13256 * C758 + C13340 * C1658 - C13257 * C1750 +
             C13341 * C2533 - C82893 * C2656) *
                C82844 +
            (C13339 * C694 - C13256 * C754 + C13340 * C1654 - C13257 * C1747 +
             C13341 * C2526 - C82893 * C2654) *
                C80205 +
            (C13339 * C703 - C13256 * C759 + C13340 * C1660 - C13257 * C1751 +
             C13341 * C2531 - C82893 * C2657) *
                C82533) *
               C82864 +
           ((C13339 * C3348 - C13256 * C3441 + C13340 * C3345 - C13257 * C3442 +
             C13341 * C16304 - C82893 * C16353) *
                C80224 +
            (C13339 * C3360 - C13256 * C3447 + C13340 * C3354 - C13257 * C3448 +
             C13341 * C16308 - C82893 * C16355) *
                C82844 +
            (C13339 * C3347 - C13256 * C3443 + C13340 * C3344 - C13257 * C3444 +
             C13341 * C20408 - C82893 * C20478) *
                C80205 +
            (C13339 * C3358 - C13256 * C3449 + C13340 * C3352 - C13257 * C3450 +
             C13341 * C20410 - C82893 * C20479) *
                C82533) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C6510 +
            (C82581 * C175 - C168 * C109) * C6504 + (C182 - C183) * C6512 +
            (C184 - C185) * C6505 + (C186 - C187) * C6514 +
            (C188 - C189) * C6506 + (C190 - C191) * C6516 +
            (C192 - C193) * C82862) *
               C82864 +
           ((C5823 - C5824) * C6510 + (C5825 - C5826) * C6504 +
            (C4207 - C4208) * C6512 + (C4209 - C4210) * C6505 +
            (C4211 - C4212) * C6514 + (C4213 - C4214) * C6506 +
            (C8538 - C8539) * C6516 + (C8540 - C8541) * C82862) *
               C82679) *
              C82938 * C688 +
          (((C168 * C695 - C82581 * C753) * C6510 +
            (C168 * C705 - C82581 * C758) * C6504 +
            (C168 * C694 - C82581 * C754) * C6512 +
            (C168 * C703 - C82581 * C759) * C6505 +
            (C168 * C693 - C82581 * C755) * C6514 +
            (C168 * C701 - C82581 * C760) * C6506 +
            (C168 * C692 - C82581 * C756) * C6516 +
            (C168 * C699 - C82581 * C761) * C82862) *
               C82864 +
           ((C168 * C3348 - C82581 * C3441) * C6510 +
            (C168 * C3360 - C82581 * C3447) * C6504 +
            (C168 * C3347 - C82581 * C3443) * C6512 +
            (C168 * C3358 - C82581 * C3449) * C6505 +
            (C168 * C3346 - C82581 * C3445) * C6514 +
            (C168 * C3356 - C82581 * C3451) * C6506 +
            (C168 * C7859 - C82581 * C7929) * C6516 +
            (C168 * C7861 - C82581 * C7930) * C82862) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C80224 +
            (C82581 * C175 - C168 * C109) * C82844 + (C182 - C183) * C80205 +
            (C184 - C185) * C82533) *
               C34115 +
           ((C5823 - C5824) * C80224 + (C5825 - C5826) * C82844 +
            (C4207 - C4208) * C80205 + (C4209 - C4210) * C82533) *
               C34116 +
           ((C5827 - C5828) * C80224 + (C5829 - C5830) * C82844 +
            (C4215 - C4216) * C80205 + (C4217 - C4218) * C82533) *
               C34117 +
           ((C30899 - C30900) * C80224 + (C30901 - C30902) * C82844 +
            (C34186 - C34187) * C80205 + (C34188 - C34189) * C82533) *
               C82878) *
              C82938 * C688 +
          (((C168 * C695 - C82581 * C753) * C80224 +
            (C168 * C705 - C82581 * C758) * C82844 +
            (C168 * C694 - C82581 * C754) * C80205 +
            (C168 * C703 - C82581 * C759) * C82533) *
               C34115 +
           ((C168 * C3348 - C82581 * C3441) * C80224 +
            (C168 * C3360 - C82581 * C3447) * C82844 +
            (C168 * C3347 - C82581 * C3443) * C80205 +
            (C168 * C3358 - C82581 * C3449) * C82533) *
               C34116 +
           ((C168 * C4976 - C82581 * C5060) * C80224 +
            (C168 * C4982 - C82581 * C5063) * C82844 +
            (C168 * C4975 - C82581 * C5061) * C80205 +
            (C168 * C4980 - C82581 * C5064) * C82533) *
               C34117 +
           ((C168 * C18262 - C82581 * C18357) * C80224 +
            (C168 * C18266 - C82581 * C18359) * C82844 +
            (C168 * C33197 - C82581 * C33313) * C80205 +
            (C168 * C33199 - C82581 * C33314) * C82533) *
               C82878) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C80224 +
            (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
                C82844 +
            (C8610 - C8611 + C8612 - C8613) * C80205 +
            (C8614 - C8615 + C8616 - C8617) * C82533) *
               C13256 +
           ((C11640 - C11641 + C11642 - C11643) * C80224 +
            (C11644 - C11645 + C11646 - C11647) * C82844 +
            (C10649 - C10650 + C10651 - C10652) * C80205 +
            (C10653 - C10654 + C10655 - C10656) * C82533) *
               C13257 +
           ((C22222 - C22223 + C22224 - C22225) * C80224 +
            (C22226 - C22227 + C22228 - C22229) * C82844 +
            (C21259 - C21260 + C21261 - C21262) * C80205 +
            (C21263 - C21264 + C21265 - C21266) * C82533) *
               C82893) *
              C82938 * C688 +
          (((C11641 - C11640 + C11643 - C11642) * C80224 +
            (C11645 - C11644 + C11647 - C11646) * C82844 +
            (C10650 - C10649 + C10652 - C10651) * C80205 +
            (C10654 - C10653 + C10656 - C10655) * C82533) *
               C13256 +
           ((C22223 - C22222 + C22225 - C22224) * C80224 +
            (C22227 - C22226 + C22229 - C22228) * C82844 +
            (C21260 - C21259 + C21262 - C21261) * C80205 +
            (C21264 - C21263 + C21266 - C21265) * C82533) *
               C13257 +
           ((C8607 * C2527 - C82864 * C2733 + C8608 * C16304 -
             C82679 * C16399) *
                C80224 +
            (C8607 * C2533 - C82864 * C2736 + C8608 * C16308 -
             C82679 * C16401) *
                C82844 +
            (C8607 * C2526 - C82864 * C2734 + C8608 * C20408 -
             C82679 * C20546) *
                C80205 +
            (C8607 * C2531 - C82864 * C2737 + C8608 * C20410 -
             C82679 * C20547) *
                C82533) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
               C6510 +
           (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
               C6504 +
           (C8610 - C8611 + C8612 - C8613) * C6512 +
           (C8614 - C8615 + C8616 - C8617) * C6505 +
           (C8618 - C8619 + C8620 - C8621) * C6514 +
           (C8622 - C8623 + C8624 - C8625) * C6506 +
           (C8626 - C8627 + C8628 - C8629) * C6516 +
           (C8630 - C8631 + C8632 - C8633) * C82862) *
              C82581 * C82938 * C688 +
          ((C8607 * C695 - C82864 * C805 + C8608 * C3348 - C82679 * C3527) *
               C6510 +
           (C8607 * C705 - C82864 * C810 + C8608 * C3360 - C82679 * C3533) *
               C6504 +
           (C8607 * C694 - C82864 * C806 + C8608 * C3347 - C82679 * C3528) *
               C6512 +
           (C8607 * C703 - C82864 * C811 + C8608 * C3358 - C82679 * C3534) *
               C6505 +
           (C8607 * C693 - C82864 * C807 + C8608 * C3346 - C82679 * C3529) *
               C6514 +
           (C8607 * C701 - C82864 * C812 + C8608 * C3356 - C82679 * C3535) *
               C6506 +
           (C8607 * C692 - C82864 * C808 + C8608 * C7859 - C82679 * C7997) *
               C6516 +
           (C8607 * C699 - C82864 * C813 + C8608 * C7861 - C82679 * C7998) *
               C82862) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C34115 * C240 - C34255 * C102 + C34116 * C1265 - C34256 * C1155 +
            C34117 * C4299 - C34257 * C4108 + C82878 * C5904 - C34258 * C5690) *
               C80224 +
           (C34115 * C246 - C34255 * C109 + C34116 * C1270 - C34256 * C1165 +
            C34117 * C4303 - C34257 * C4113 + C82878 * C5907 - C34258 * C5696) *
               C82844 +
           (C34260 - C34261 + C34262 - C34263 + C34264 - C34265 + C34266 -
            C34267) *
               C80205 +
           (C34268 - C34269 + C34270 - C34271 + C34272 - C34273 + C34274 -
            C34275) *
               C82533) *
              C82581 * C82938 * C688 +
          ((C34255 * C695 - C34115 * C805 + C34256 * C3348 - C34116 * C3527 +
            C34257 * C4976 - C34117 * C5140 + C34258 * C18262 -
            C82878 * C18459) *
               C80224 +
           (C34255 * C705 - C34115 * C810 + C34256 * C3360 - C34116 * C3533 +
            C34257 * C4982 - C34117 * C5143 + C34258 * C18266 -
            C82878 * C18461) *
               C82844 +
           (C34255 * C694 - C34115 * C806 + C34256 * C3347 - C34116 * C3528 +
            C34257 * C4975 - C34117 * C5141 + C34258 * C33197 -
            C82878 * C33421) *
               C80205 +
           (C34255 * C703 - C34115 * C811 + C34256 * C3358 - C34116 * C3534 +
            C34257 * C4980 - C34117 * C5144 + C34258 * C33199 -
            C82878 * C33422) *
               C82533) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C13339 +
            (C82844 * C316 - C80224 * C310 + C82533 * C317 - C80205 * C311) *
                C13256 +
            (C19977 - C19978 + C19979 - C19980) * C13340 +
            (C19981 - C19982 + C19983 - C19984) * C13257 +
            (C19985 - C19986 + C19987 - C19988) * C13341 +
            (C19989 - C19990 + C19991 - C19992) * C82893) *
               C82864 +
           ((C82844 * C1164 - C80224 * C1155 + C82533 * C1162 -
             C80205 * C1154) *
                C13339 +
            (C82844 * C1322 - C80224 * C1317 + C82533 * C1323 -
             C80205 * C1318) *
                C13256 +
            (C22328 - C22329 + C22330 - C22331) * C13340 +
            (C22332 - C22333 + C22334 - C22335) * C13257 +
            (C22336 - C22337 + C22338 - C22339) * C13341 +
            (C22340 - C22341 + C22342 - C22343) * C82893) *
               C82679) *
              C82938 * C688 +
          (((C19978 - C19977 + C19980 - C19979) * C13339 +
            (C19982 - C19981 + C19984 - C19983) * C13256 +
            (C19986 - C19985 + C19988 - C19987) * C13340 +
            (C19990 - C19989 + C19992 - C19991) * C13257 +
            (C19994 - C19993 + C19996 - C19995) * C13341 +
            (C19998 - C19997 + C20000 - C19999) * C82893) *
               C82864 +
           ((C22329 - C22328 + C22331 - C22330) * C13339 +
            (C22333 - C22332 + C22335 - C22334) * C13256 +
            (C22337 - C22336 + C22339 - C22338) * C13340 +
            (C22341 - C22340 + C22343 - C22342) * C13257 +
            (C80224 * C16304 - C82844 * C16307 + C80205 * C20408 -
             C82533 * C20409) *
                C13341 +
            (C80224 * C16445 - C82844 * C16447 + C80205 * C20614 -
             C82533 * C20615) *
                C82893) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6504 * C108 - C6510 * C102 + C6505 * C110 - C6512 * C103 +
             C6506 * C112 - C6514 * C104 + C82862 * C114 - C6516 * C105) *
                C168 +
            (C6504 * C316 - C6510 * C310 + C6505 * C317 - C6512 * C311 +
             C6506 * C318 - C6514 * C312 + C82862 * C319 - C6516 * C313) *
                C82581) *
               C82864 +
           ((C6504 * C1164 - C6510 * C1155 + C6505 * C1162 - C6512 * C1154 +
             C6506 * C1160 - C6514 * C1153 + C82862 * C1158 - C6516 * C1152) *
                C168 +
            (C6504 * C1322 - C6510 * C1317 + C6505 * C1323 - C6512 * C1318 +
             C6506 * C1324 - C6514 * C1319 + C82862 * C1325 - C6516 * C1320) *
                C82581) *
               C82679) *
              C82938 * C688 +
          (((C7441 - C7440 + C7443 - C7442 + C7445 - C7444 + C7447 - C7446) *
                C168 +
            (C7449 - C7448 + C7451 - C7450 + C7453 - C7452 + C7455 - C7454) *
                C82581) *
               C82864 +
           ((C6510 * C3348 - C6504 * C3359 + C6512 * C3347 - C6505 * C3357 +
             C6514 * C3346 - C6506 * C3355 + C6516 * C7859 - C82862 * C7860) *
                C168 +
            (C6510 * C3613 - C6504 * C3619 + C6512 * C3614 - C6505 * C3620 +
             C6514 * C3615 - C6506 * C3621 + C6516 * C8065 - C82862 * C8066) *
                C82581) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C168 +
            (C82844 * C316 - C80224 * C310 + C82533 * C317 - C80205 * C311) *
                C82581) *
               C34115 +
           ((C23266 - C23267 + C23268 - C23269) * C168 +
            (C23270 - C23271 + C23272 - C23273) * C82581) *
               C34116 +
           ((C33524 - C33525 + C33526 - C33527) * C168 +
            (C33528 - C33529 + C33530 - C33531) * C82581) *
               C34117 +
           ((C82844 * C5695 - C80224 * C5690 + C82533 * C5693 -
             C80205 * C5689) *
                C168 +
            (C82844 * C5987 - C80224 * C5984 + C82533 * C5988 -
             C80205 * C5985) *
                C82581) *
               C82878) *
              C82938 * C688 +
          (((C19978 - C19977 + C19980 - C19979) * C168 +
            (C19982 - C19981 + C19984 - C19983) * C82581) *
               C34115 +
           ((C22329 - C22328 + C22331 - C22330) * C168 +
            (C22333 - C22332 + C22335 - C22334) * C82581) *
               C34116 +
           ((C32599 - C32598 + C32601 - C32600) * C168 +
            (C32603 - C32602 + C32605 - C32604) * C82581) *
               C34117 +
           ((C80224 * C18262 - C82844 * C18265 + C80205 * C33197 -
             C82533 * C33198) *
                C168 +
            (C80224 * C18537 - C82844 * C18539 + C80205 * C33521 -
             C82533 * C33522) *
                C82581) *
               C82878) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13339 * C169 - C13588 * C102 - C13339 * C310 + C13256 * C365 +
             C13340 * C753 - C13589 * C695 - C13340 * C857 + C13257 * C913 +
             C13341 * C1746 - C13590 * C1653 - C13341 * C1950 +
             C82893 * C2035) *
                C82844 +
            (C13628 + C13629 + C13630) * C82533) *
               C82864 +
           ((C18662 + C18663 + C18664) * C82844 +
            (C21481 + C21482 + C21483) * C82533) *
               C82679) *
              C82938 * C688 -
          (((C13341 * C20478 - C13590 * C20408 - C13341 * C20614 +
             C82893 * C20682 + C13340 * C3444 - C13589 * C3344 -
             C13340 * C3617 + C13257 * C3701 + C13339 * C3443 - C13588 * C3347 -
             C13339 * C3614 + C13256 * C3702) *
                C82533 +
            (C13341 * C16353 - C13590 * C16304 - C13341 * C16445 +
             C82893 * C16492 + C13340 * C3442 - C13589 * C3345 -
             C13340 * C3616 + C13257 * C3703 + C13339 * C3441 - C13588 * C3348 -
             C13339 * C3613 + C13256 * C3704) *
                C82844) *
               C82679 +
           ((C13341 * C2654 - C13590 * C2526 - C13341 * C2822 + C82893 * C2926 +
             C13340 * C1747 - C13589 * C1654 - C13340 * C1951 + C13257 * C2036 +
             C13339 * C754 - C13588 * C694 - C13339 * C858 + C13256 * C912) *
                C82533 +
            (C13341 * C2653 - C13590 * C2527 - C13341 * C2821 + C82893 * C2927 +
             C13340 * C1746 - C13589 * C1653 - C13340 * C1950 + C13257 * C2035 +
             C13339 * C753 - C13588 * C695 - C13339 * C857 + C13256 * C913) *
                C82844) *
               C82864) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C6504 +
            C396 * C6505 + C397 * C6506 + C398 * C82862) *
               C82864 +
           (C6108 * C6504 + C4516 * C6505 + C4517 * C6506 + C8772 * C82862) *
               C82679) *
              C82938 * C688 -
          (((C168 * C7929 - C364 * C7859 - C168 * C8065 + C82581 * C8133) *
                C82862 +
            (C168 * C3445 - C364 * C3346 - C168 * C3615 + C82581 * C3700) *
                C6506 +
            (C168 * C3443 - C364 * C3347 - C168 * C3614 + C82581 * C3702) *
                C6505 +
            (C168 * C3441 - C364 * C3348 - C168 * C3613 + C82581 * C3704) *
                C6504) *
               C82679 +
           ((C168 * C756 - C364 * C692 - C168 * C860 + C82581 * C910) * C82862 +
            (C168 * C755 - C364 * C693 - C168 * C859 + C82581 * C911) * C6506 +
            (C168 * C754 - C364 * C694 - C168 * C858 + C82581 * C912) * C6505 +
            (C168 * C753 - C364 * C695 - C168 * C857 + C82581 * C913) * C6504) *
               C82864) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C82844 +
            C396 * C82533) *
               C34115 +
           (C6108 * C82844 + C4516 * C82533) * C34116 +
           (C6109 * C82844 + C4518 * C82533) * C34117 +
           (C31060 * C82844 + C34414 * C82533) * C82878) *
              C82938 * C688 -
          (((C168 * C33313 - C364 * C33197 - C168 * C33521 + C82581 * C33629) *
                C82533 +
            (C168 * C18357 - C364 * C18262 - C168 * C18537 + C82581 * C18624) *
                C82844) *
               C82878 +
           ((C168 * C5061 - C364 * C4975 - C168 * C5221 + C82581 * C5301) *
                C82533 +
            (C168 * C5060 - C364 * C4976 - C168 * C5220 + C82581 * C5302) *
                C82844) *
               C34117 +
           ((C168 * C3443 - C364 * C3347 - C168 * C3614 + C82581 * C3702) *
                C82533 +
            (C168 * C3441 - C364 * C3348 - C168 * C3613 + C82581 * C3704) *
                C82844) *
               C34116 +
           ((C168 * C754 - C364 * C694 - C168 * C858 + C82581 * C912) * C82533 +
            (C168 * C753 - C364 * C695 - C168 * C857 + C82581 * C913) *
                C82844) *
               C34115) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C13339 +
            (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
                C13256 +
            (C11640 - C11641 + C11642 - C11643) * C13340 +
            (C11954 - C11955 + C11956 - C11957) * C13257 +
            (C22222 - C22223 + C22224 - C22225) * C13341 +
            (C22540 - C22541 + C22542 - C22543) * C82893) *
               C82844 +
           ((C8610 - C8611 + C8612 - C8613) * C13339 +
            (C8839 - C8840 + C8841 - C8842) * C13256 +
            (C10649 - C10650 + C10651 - C10652) * C13340 +
            (C10987 - C10988 + C10989 - C10990) * C13257 +
            (C21259 - C21260 + C21261 - C21262) * C13341 +
            (C21582 - C21583 + C21584 - C21585) * C82893) *
               C82533) *
              C82938 * C688 +
          (((C11641 - C11640 + C11643 - C11642) * C13339 +
            (C11955 - C11954 + C11957 - C11956) * C13256 +
            (C22223 - C22222 + C22225 - C22224) * C13340 +
            (C22541 - C22540 + C22543 - C22542) * C13257 +
            (C8607 * C2527 - C82864 * C2733 + C8608 * C16304 -
             C82679 * C16399) *
                C13341 +
            (C8607 * C2821 - C82864 * C3002 + C8608 * C16445 -
             C82679 * C16535) *
                C82893) *
               C82844 +
           ((C10650 - C10649 + C10652 - C10651) * C13339 +
            (C10988 - C10987 + C10990 - C10989) * C13256 +
            (C21260 - C21259 + C21262 - C21261) * C13340 +
            (C21583 - C21582 + C21585 - C21584) * C13257 +
            (C8607 * C2526 - C82864 * C2734 + C8608 * C20408 -
             C82679 * C20546) *
                C13341 +
            (C8607 * C2822 - C82864 * C3003 + C8608 * C20614 -
             C82679 * C20749) *
                C82893) *
               C82533) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C168 +
            (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
                C82581) *
               C6504 +
           ((C8610 - C8611 + C8612 - C8613) * C168 +
            (C8839 - C8840 + C8841 - C8842) * C82581) *
               C6505 +
           ((C8618 - C8619 + C8620 - C8621) * C168 +
            (C8843 - C8844 + C8845 - C8846) * C82581) *
               C6506 +
           ((C8626 - C8627 + C8628 - C8629) * C168 +
            (C8847 - C8848 + C8849 - C8850) * C82581) *
               C82862) *
              C82938 * C688 +
          (((C8607 * C695 - C82864 * C805 + C8608 * C3348 - C82679 * C3527) *
                C168 +
            (C8607 * C857 - C82864 * C956 + C8608 * C3613 - C82679 * C3779) *
                C82581) *
               C6504 +
           ((C8607 * C694 - C82864 * C806 + C8608 * C3347 - C82679 * C3528) *
                C168 +
            (C8607 * C858 - C82864 * C957 + C8608 * C3614 - C82679 * C3781) *
                C82581) *
               C6505 +
           ((C8607 * C693 - C82864 * C807 + C8608 * C3346 - C82679 * C3529) *
                C168 +
            (C8607 * C859 - C82864 * C958 + C8608 * C3615 - C82679 * C3783) *
                C82581) *
               C6506 +
           ((C8607 * C692 - C82864 * C808 + C8608 * C7859 - C82679 * C7997) *
                C168 +
            (C8607 * C860 - C82864 * C959 + C8608 * C8065 - C82679 * C8200) *
                C82581) *
               C82862) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C34115 * C240 - C34255 * C102 + C34116 * C1265 - C34256 * C1155 +
             C34117 * C4299 - C34257 * C4108 + C82878 * C5904 -
             C34258 * C5690) *
                C168 +
            (C34115 * C441 - C34255 * C310 + C34116 * C1416 - C34256 * C1317 +
             C34117 * C4593 - C34257 * C4405 + C82878 * C6185 -
             C34258 * C5984) *
                C82581) *
               C82844 +
           ((C34260 - C34261 + C34262 - C34263 + C34264 - C34265 + C34266 -
             C34267) *
                C168 +
            (C34481 - C34482 + C34483 - C34484 + C34485 - C34486 + C34487 -
             C34488) *
                C82581) *
               C82533) *
              C82938 * C688 +
          (((C34255 * C695 - C34115 * C805 + C34256 * C3348 - C34116 * C3527 +
             C34257 * C4976 - C34117 * C5140 + C34258 * C18262 -
             C82878 * C18459) *
                C168 +
            (C34255 * C857 - C34115 * C956 + C34256 * C3613 - C34116 * C3779 +
             C34257 * C5220 - C34117 * C5377 + C34258 * C18537 -
             C82878 * C18741) *
                C82581) *
               C82844 +
           ((C34255 * C694 - C34115 * C806 + C34256 * C3347 - C34116 * C3528 +
             C34257 * C4975 - C34117 * C5141 + C34258 * C33197 -
             C82878 * C33421) *
                C168 +
            (C34255 * C858 - C34115 * C957 + C34256 * C3614 - C34116 * C3781 +
             C34257 * C5221 - C34117 * C5378 + C34258 * C33521 -
             C82878 * C33742) *
                C82581) *
               C82533) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezx[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C8607 +
            (C82844 * C503 - C80224 * C497 + C82533 * C504 - C80205 * C498) *
                C82864 +
            (C82844 * C1164 - C80224 * C1155 + C82533 * C1162 -
             C80205 * C1154) *
                C8608 +
            (C82844 * C1468 - C80224 * C1463 + C82533 * C1469 -
             C80205 * C1464) *
                C82679) *
               C13256 +
           ((C19977 - C19978 + C19979 - C19980) * C8607 +
            (C20199 - C20200 + C20201 - C20202) * C82864 +
            (C22328 - C22329 + C22330 - C22331) * C8608 +
            (C22642 - C22643 + C22644 - C22645) * C82679) *
               C13257 +
           ((C19985 - C19986 + C19987 - C19988) * C8607 +
            (C20203 - C20204 + C20205 - C20206) * C82864 +
            (C22336 - C22337 + C22338 - C22339) * C8608 +
            (C22646 - C22647 + C22648 - C22649) * C82679) *
               C82893) *
              C82938 * C688 +
          (((C19978 - C19977 + C19980 - C19979) * C8607 +
            (C20200 - C20199 + C20202 - C20201) * C82864 +
            (C22329 - C22328 + C22331 - C22330) * C8608 +
            (C22643 - C22642 + C22645 - C22644) * C82679) *
               C13256 +
           ((C19986 - C19985 + C19988 - C19987) * C8607 +
            (C20204 - C20203 + C20206 - C20205) * C82864 +
            (C22337 - C22336 + C22339 - C22338) * C8608 +
            (C22647 - C22646 + C22649 - C22648) * C82679) *
               C13257 +
           ((C19994 - C19993 + C19996 - C19995) * C8607 +
            (C20208 - C20207 + C20210 - C20209) * C82864 +
            (C80224 * C16304 - C82844 * C16307 + C80205 * C20408 -
             C82533 * C20409) *
                C8608 +
            (C80224 * C16579 - C82844 * C16581 + C80205 * C20816 -
             C82533 * C20817) *
                C82679) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6504 * C108 - C6510 * C102 + C6505 * C110 - C6512 * C103 +
            C6506 * C112 - C6514 * C104 + C82862 * C114 - C6516 * C105) *
               C8607 +
           (C6504 * C503 - C6510 * C497 + C6505 * C504 - C6512 * C498 +
            C6506 * C505 - C6514 * C499 + C82862 * C506 - C6516 * C500) *
               C82864 +
           (C6504 * C1164 - C6510 * C1155 + C6505 * C1162 - C6512 * C1154 +
            C6506 * C1160 - C6514 * C1153 + C82862 * C1158 - C6516 * C1152) *
               C8608 +
           (C6504 * C1468 - C6510 * C1463 + C6505 * C1469 - C6512 * C1464 +
            C6506 * C1470 - C6514 * C1465 + C82862 * C1471 - C6516 * C1466) *
               C82679) *
              C82581 * C82938 * C688 +
          ((C7441 - C7440 + C7443 - C7442 + C7445 - C7444 + C7447 - C7446) *
               C8607 +
           (C7655 - C7654 + C7657 - C7656 + C7659 - C7658 + C7661 - C7660) *
               C82864 +
           (C6510 * C3348 - C6504 * C3359 + C6512 * C3347 - C6505 * C3357 +
            C6514 * C3346 - C6506 * C3355 + C6516 * C7859 - C82862 * C7860) *
               C8608 +
           (C6510 * C3859 - C6504 * C3865 + C6512 * C3860 - C6505 * C3866 +
            C6514 * C3861 - C6506 * C3867 + C6516 * C8267 - C82862 * C8268) *
               C82679) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
               C34255 +
           (C82844 * C503 - C80224 * C497 + C82533 * C504 - C80205 * C498) *
               C34115 +
           (C23266 - C23267 + C23268 - C23269) * C34256 +
           (C23568 - C23569 + C23570 - C23571) * C34116 +
           (C33524 - C33525 + C33526 - C33527) * C34257 +
           (C33844 - C33845 + C33846 - C33847) * C34117 +
           (C82844 * C5695 - C80224 * C5690 + C82533 * C5693 - C80205 * C5689) *
               C34258 +
           (C82844 * C6265 - C80224 * C6262 + C82533 * C6266 - C80205 * C6263) *
               C82878) *
              C82581 * C82938 * C688 +
          ((C19978 - C19977 + C19980 - C19979) * C34255 +
           (C20200 - C20199 + C20202 - C20201) * C34115 +
           (C22329 - C22328 + C22331 - C22330) * C34256 +
           (C22643 - C22642 + C22645 - C22644) * C34116 +
           (C32599 - C32598 + C32601 - C32600) * C34257 +
           (C32901 - C32900 + C32903 - C32902) * C34117 +
           (C80224 * C18262 - C82844 * C18265 + C80205 * C33197 -
            C82533 * C33198) *
               C34258 +
           (C80224 * C18817 - C82844 * C18819 + C80205 * C33841 -
            C82533 * C33842) *
               C82878) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C8607 +
            (C13256 * C551 - C13339 * C497 + C13257 * C1055 - C13340 * C1003 +
             C82893 * C2323 - C13341 * C2241) *
                C82864 +
            (C18362 - C18363 + C18364 - C18365 + C18366 - C18367) * C8608 +
            (C18902 - C18903 + C18904 - C18905 + C18906 - C18907) * C82679) *
               C82844 +
           ((C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C8607 +
            (C13856 - C13857 + C13858 - C13859 + C13860 - C13861) * C82864 +
            (C21149 - C21150 + C21151 - C21152 + C21153 - C21154) * C8608 +
            (C21782 - C21783 + C21784 - C21785 + C21786 - C21787) * C82679) *
               C82533) *
              C82938 * C688 +
          (((C13339 * C695 - C13256 * C753 + C13340 * C1653 - C13257 * C1746 +
             C13341 * C2527 - C82893 * C2653) *
                C8607 +
            (C13339 * C1003 - C13256 * C1055 + C13340 * C2241 - C13257 * C2323 +
             C13341 * C3083 - C82893 * C3175) *
                C82864 +
            (C13339 * C3348 - C13256 * C3441 + C13340 * C3345 - C13257 * C3442 +
             C13341 * C16304 - C82893 * C16353) *
                C8608 +
            (C13339 * C3859 - C13256 * C3945 + C13340 * C3862 - C13257 * C3946 +
             C13341 * C16579 - C82893 * C16625) *
                C82679) *
               C82844 +
           ((C13339 * C694 - C13256 * C754 + C13340 * C1654 - C13257 * C1747 +
             C13341 * C2526 - C82893 * C2654) *
                C8607 +
            (C13339 * C1004 - C13256 * C1056 + C13340 * C2242 - C13257 * C2324 +
             C13341 * C3084 - C82893 * C3176) *
                C82864 +
            (C13339 * C3347 - C13256 * C3443 + C13340 * C3344 - C13257 * C3444 +
             C13341 * C20408 - C82893 * C20478) *
                C8608 +
            (C13339 * C3860 - C13256 * C3947 + C13340 * C3863 - C13257 * C3948 +
             C13341 * C20816 - C82893 * C20884) *
                C82679) *
               C82533) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C8607 +
            (C82581 * C551 - C168 * C497) * C82864 + (C5823 - C5824) * C8608 +
            (C6358 - C6359) * C82679) *
               C6504 +
           ((C182 - C183) * C8607 + (C558 - C559) * C82864 +
            (C4207 - C4208) * C8608 + (C4770 - C4771) * C82679) *
               C6505 +
           ((C186 - C187) * C8607 + (C560 - C561) * C82864 +
            (C4211 - C4212) * C8608 + (C4774 - C4775) * C82679) *
               C6506 +
           ((C190 - C191) * C8607 + (C562 - C563) * C82864 +
            (C8538 - C8539) * C8608 + (C8983 - C8984) * C82679) *
               C82862) *
              C82938 * C688 +
          (((C168 * C695 - C82581 * C753) * C8607 +
            (C168 * C1003 - C82581 * C1055) * C82864 +
            (C168 * C3348 - C82581 * C3441) * C8608 +
            (C168 * C3859 - C82581 * C3945) * C82679) *
               C6504 +
           ((C168 * C694 - C82581 * C754) * C8607 +
            (C168 * C1004 - C82581 * C1056) * C82864 +
            (C168 * C3347 - C82581 * C3443) * C8608 +
            (C168 * C3860 - C82581 * C3947) * C82679) *
               C6505 +
           ((C168 * C693 - C82581 * C755) * C8607 +
            (C168 * C1005 - C82581 * C1057) * C82864 +
            (C168 * C3346 - C82581 * C3445) * C8608 +
            (C168 * C3861 - C82581 * C3949) * C82679) *
               C6506 +
           ((C168 * C692 - C82581 * C756) * C8607 +
            (C168 * C1006 - C82581 * C1058) * C82864 +
            (C168 * C7859 - C82581 * C7929) * C8608 +
            (C168 * C8267 - C82581 * C8335) * C82679) *
               C82862) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C34255 +
            (C82581 * C551 - C168 * C497) * C34115 + (C5823 - C5824) * C34256 +
            (C6358 - C6359) * C34116 + (C5827 - C5828) * C34257 +
            (C6360 - C6361) * C34117 + (C30899 - C30900) * C34258 +
            (C31198 - C31199) * C82878) *
               C82844 +
           ((C182 - C183) * C34255 + (C558 - C559) * C34115 +
            (C4207 - C4208) * C34256 + (C4770 - C4771) * C34116 +
            (C4215 - C4216) * C34257 + (C4772 - C4773) * C34117 +
            (C34186 - C34187) * C34258 + (C34621 - C34622) * C82878) *
               C82533) *
              C82938 * C688 +
          (((C168 * C695 - C82581 * C753) * C34255 +
            (C168 * C1003 - C82581 * C1055) * C34115 +
            (C168 * C3348 - C82581 * C3441) * C34256 +
            (C168 * C3859 - C82581 * C3945) * C34116 +
            (C168 * C4976 - C82581 * C5060) * C34257 +
            (C168 * C5454 - C82581 * C5534) * C34117 +
            (C168 * C18262 - C82581 * C18357) * C34258 +
            (C168 * C18817 - C82581 * C18899) * C82878) *
               C82844 +
           ((C168 * C694 - C82581 * C754) * C34255 +
            (C168 * C1004 - C82581 * C1056) * C34115 +
            (C168 * C3347 - C82581 * C3443) * C34256 +
            (C168 * C3860 - C82581 * C3947) * C34116 +
            (C168 * C4975 - C82581 * C5061) * C34257 +
            (C168 * C5455 - C82581 * C5535) * C34117 +
            (C168 * C33197 - C82581 * C33313) * C34258 +
            (C168 * C33841 - C82581 * C33945) * C82878) *
               C82533) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
             C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
                C13256 +
            (C12270 + C12271) * C13257 + (C22858 + C22859) * C82893) *
               C82844 +
           ((C9089 + C9090) * C13256 + (C11321 + C11322) * C13257 +
            (C21898 + C21899) * C82893) *
               C82533) *
              C82938 * C688 -
          (((C8608 * C20546 - C9051 * C20408 - C8608 * C20816 +
             C82679 * C20951 + C8607 * C2734 - C9050 * C2526 - C8607 * C3084 +
             C82864 * C3253) *
                C82893 +
            (C21899 + C21898) * C13257 + (C11322 + C11321) * C13256) *
               C82533 +
           ((C8608 * C16399 - C9051 * C16304 - C8608 * C16579 +
             C82679 * C16670 + C8607 * C2733 - C9050 * C2527 - C8607 * C3083 +
             C82864 * C3254) *
                C82893 +
            (C22859 + C22858) * C13257 + (C12271 + C12270) * C13256) *
               C82844) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
            C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
               C82581 * C6504 +
           (C9089 + C9090) * C82581 * C6505 + (C9091 + C9092) * C82581 * C6506 +
           (C9093 + C9094) * C82581 * C82862) *
              C82938 * C688 -
          ((C8608 * C7997 - C9051 * C7859 - C8608 * C8267 + C82679 * C8402 +
            C8607 * C808 - C9050 * C692 - C8607 * C1006 + C82864 * C1103) *
               C82581 * C82862 +
           (C8608 * C3529 - C9051 * C3346 - C8608 * C3861 + C82679 * C4026 +
            C8607 * C807 - C9050 * C693 - C8607 * C1005 + C82864 * C1104) *
               C82581 * C6506 +
           (C8608 * C3528 - C9051 * C3347 - C8608 * C3860 + C82679 * C4028 +
            C8607 * C806 - C9050 * C694 - C8607 * C1004 + C82864 * C1105) *
               C82581 * C6505 +
           (C8608 * C3527 - C9051 * C3348 - C8608 * C3859 + C82679 * C4030 +
            C8607 * C805 - C9050 * C695 - C8607 * C1003 + C82864 * C1106) *
               C82581 * C6504) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C34255 * C240 - C34688 * C102 - C34255 * C497 + C34115 * C608 +
            C34256 * C1265 - C34689 * C1155 - C34256 * C1463 + C34116 * C1566 +
            C34257 * C4299 - C34690 * C4108 - C34257 * C4683 + C34117 * C4854 +
            C34258 * C5904 - C34691 * C5690 - C34258 * C6262 + C82878 * C6437) *
               C82581 * C82844 +
           (C34717 + C34718 + C34719 + C34720) * C82581 * C82533) *
              C82938 * C688 -
          ((C34258 * C33421 - C34691 * C33197 - C34258 * C33841 +
            C82878 * C34048 + C34257 * C5141 - C34690 * C4975 - C34257 * C5455 +
            C34117 * C5612 + C34256 * C3528 - C34689 * C3347 - C34256 * C3860 +
            C34116 * C4028 + C34255 * C806 - C34688 * C694 - C34255 * C1004 +
            C34115 * C1105) *
               C82581 * C82533 +
           (C34258 * C18459 - C34691 * C18262 - C34258 * C18817 +
            C82878 * C18988 + C34257 * C5140 - C34690 * C4976 - C34257 * C5454 +
            C34117 * C5613 + C34256 * C3527 - C34689 * C3348 - C34256 * C3859 +
            C34116 * C4030 + C34255 * C805 - C34688 * C695 - C34255 * C1003 +
            C34115 * C1106) *
               C82581 * C82844) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C80224 * C108 - C19062 * C102 - C80224 * C109 + C82844 * C120 +
             C80205 * C110 - C19064 * C103 - C80205 * C111 + C82533 * C121) *
                C82864 +
            (C22970 + C22971) * C82679) *
               C13256 +
           ((C19773 + C19774) * C82864 + (C22022 + C22023) * C82679) * C13257 +
           ((C19775 + C19776) * C82864 + (C22024 + C22025) * C82679) * C82893) *
              C1149 -
          (((C80205 * C16749 - C19064 * C16746 - C80205 * C16750 +
             C82533 * C16752 + C80224 * C16747 - C19062 * C16745 -
             C80224 * C16748 + C82844 * C16751) *
                C82679 +
            (C22025 + C22024) * C82864) *
               C82893 +
           ((C80205 * C4979 - C19064 * C4975 - C80205 * C4980 + C82533 * C4984 +
             C80224 * C4981 - C19062 * C4976 - C80224 * C4982 +
             C82844 * C4985) *
                C82679 +
            (C22023 + C22022) * C82864) *
               C13257 +
           ((C80205 * C4114 - C19064 * C4109 - C80205 * C4115 + C82533 * C4121 +
             C80224 * C4112 - C19062 * C4108 - C80224 * C4113 +
             C82844 * C4120) *
                C82679 +
            (C22971 + C22970) * C82864) *
               C13256) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6510 * C108 - C6511 * C102 - C6510 * C109 + C6504 * C120 +
            C6512 * C110 - C6513 * C103 - C6512 * C111 + C6505 * C121 +
            C6514 * C112 - C6515 * C104 - C6514 * C113 + C6506 * C122 +
            C6516 * C114 - C6517 * C105 - C6516 * C115 + C82862 * C123) *
               C82864 +
           (C9779 + C9780 + C9781 + C9782) * C82679) *
              C82581 * C1149 -
          ((C6516 * C4118 - C6517 * C4111 - C6516 * C4119 + C82862 * C4123 +
            C6514 * C4116 - C6515 * C4110 - C6514 * C4117 + C6506 * C4122 +
            C6512 * C4114 - C6513 * C4109 - C6512 * C4115 + C6505 * C4121 +
            C6510 * C4112 - C6511 * C4108 - C6510 * C4113 + C6504 * C4120) *
               C82679 +
           (C9782 + C9781 + C9780 + C9779) * C82864) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C80224 * C108 - C19062 * C102 - C80224 * C109 + C82844 * C120 +
            C80205 * C110 - C19064 * C103 - C80205 * C111 + C82533 * C121) *
               C34115 +
           (C22970 + C22971) * C34116 + (C33214 + C33215) * C34117 +
           (C35393 + C35394) * C82878) *
              C82581 * C1149 -
          ((C80205 * C30026 - C19064 * C30023 - C80205 * C30027 +
            C82533 * C30029 + C80224 * C30024 - C19062 * C30022 -
            C80224 * C30025 + C82844 * C30028) *
               C82878 +
           (C35394 + C35393) * C34117 + (C33215 + C33214) * C34116 +
           (C22971 + C22970) * C34115) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C80224 +
            (C13256 * C175 - C13339 * C109 + C13257 * C758 - C13340 * C705 +
             C82893 * C1750 - C13341 * C1658) *
                C82844 +
            (C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C80205 +
            (C13349 - C13350 + C13351 - C13352 + C13353 - C13354) * C82533) *
               C82864 +
           ((C18362 - C18363 + C18364 - C18365 + C18366 - C18367) * C80224 +
            (C18368 - C18369 + C18370 - C18371 + C18372 - C18373) * C82844 +
            (C21149 - C21150 + C21151 - C21152 + C21153 - C21154) * C80205 +
            (C21155 - C21156 + C21157 - C21158 + C21159 - C21160) * C82533) *
               C82679) *
              C1149 +
          (((C18363 - C18362 + C18365 - C18364 + C18367 - C18366) * C80224 +
            (C18369 - C18368 + C18371 - C18370 + C18373 - C18372) * C82844 +
            (C21150 - C21149 + C21152 - C21151 + C21154 - C21153) * C80205 +
            (C21156 - C21155 + C21158 - C21157 + C21160 - C21159) * C82533) *
               C82864 +
           ((C18375 - C18374 + C18377 - C18376 + C18379 - C18378) * C80224 +
            (C18381 - C18380 + C18383 - C18382 + C18385 - C18384) * C82844 +
            (C13339 * C4109 - C13256 * C4199 + C13340 * C4975 - C13257 * C5061 +
             C13341 * C16746 - C82893 * C16828) *
                C80205 +
            (C13339 * C4115 - C13256 * C4203 + C13340 * C4980 - C13257 * C5064 +
             C13341 * C16750 - C82893 * C16830) *
                C82533) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C6510 +
            (C82581 * C175 - C168 * C109) * C6504 + (C182 - C183) * C6512 +
            (C184 - C185) * C6505 + (C186 - C187) * C6514 +
            (C188 - C189) * C6506 + (C190 - C191) * C6516 +
            (C192 - C193) * C82862) *
               C82864 +
           ((C5823 - C5824) * C6510 + (C5825 - C5826) * C6504 +
            (C4207 - C4208) * C6512 + (C4209 - C4210) * C6505 +
            (C4211 - C4212) * C6514 + (C4213 - C4214) * C6506 +
            (C8538 - C8539) * C6516 + (C8540 - C8541) * C82862) *
               C82679) *
              C1149 +
          (((C5824 - C5823) * C6510 + (C5826 - C5825) * C6504 +
            (C4208 - C4207) * C6512 + (C4210 - C4209) * C6505 +
            (C4212 - C4211) * C6514 + (C4214 - C4213) * C6506 +
            (C8539 - C8538) * C6516 + (C8541 - C8540) * C82862) *
               C82864 +
           ((C5828 - C5827) * C6510 + (C5830 - C5829) * C6504 +
            (C4216 - C4215) * C6512 + (C4218 - C4217) * C6505 +
            (C4220 - C4219) * C6514 + (C4222 - C4221) * C6506 +
            (C168 * C4111 - C82581 * C4201) * C6516 +
            (C168 * C4119 - C82581 * C4205) * C82862) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C80224 +
            (C82581 * C175 - C168 * C109) * C82844 + (C182 - C183) * C80205 +
            (C184 - C185) * C82533) *
               C34115 +
           ((C5823 - C5824) * C80224 + (C5825 - C5826) * C82844 +
            (C4207 - C4208) * C80205 + (C4209 - C4210) * C82533) *
               C34116 +
           ((C5827 - C5828) * C80224 + (C5829 - C5830) * C82844 +
            (C4215 - C4216) * C80205 + (C4217 - C4218) * C82533) *
               C34117 +
           ((C30899 - C30900) * C80224 + (C30901 - C30902) * C82844 +
            (C34186 - C34187) * C80205 + (C34188 - C34189) * C82533) *
               C82878) *
              C1149 +
          (((C5824 - C5823) * C80224 + (C5826 - C5825) * C82844 +
            (C4208 - C4207) * C80205 + (C4210 - C4209) * C82533) *
               C34115 +
           ((C5828 - C5827) * C80224 + (C5830 - C5829) * C82844 +
            (C4216 - C4215) * C80205 + (C4218 - C4217) * C82533) *
               C34116 +
           ((C30900 - C30899) * C80224 + (C30902 - C30901) * C82844 +
            (C34187 - C34186) * C80205 + (C34189 - C34188) * C82533) *
               C34117 +
           ((C30904 - C30903) * C80224 + (C30906 - C30905) * C82844 +
            (C168 * C30023 - C82581 * C30073) * C80205 +
            (C168 * C30027 - C82581 * C30075) * C82533) *
               C82878) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C80224 +
            (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
                C82844 +
            (C8610 - C8611 + C8612 - C8613) * C80205 +
            (C8614 - C8615 + C8616 - C8617) * C82533) *
               C13256 +
           ((C11640 - C11641 + C11642 - C11643) * C80224 +
            (C11644 - C11645 + C11646 - C11647) * C82844 +
            (C10649 - C10650 + C10651 - C10652) * C80205 +
            (C10653 - C10654 + C10655 - C10656) * C82533) *
               C13257 +
           ((C22222 - C22223 + C22224 - C22225) * C80224 +
            (C22226 - C22227 + C22228 - C22229) * C82844 +
            (C21259 - C21260 + C21261 - C21262) * C80205 +
            (C21263 - C21264 + C21265 - C21266) * C82533) *
               C82893) *
              C1149 +
          (((C8607 * C1155 - C82864 * C1265 + C8608 * C4108 - C82679 * C4299) *
                C80224 +
            (C8607 * C1165 - C82864 * C1270 + C8608 * C4113 - C82679 * C4303) *
                C82844 +
            (C8607 * C1154 - C82864 * C1266 + C8608 * C4109 - C82679 * C4300) *
                C80205 +
            (C8607 * C1163 - C82864 * C1271 + C8608 * C4115 - C82679 * C4304) *
                C82533) *
               C13256 +
           ((C8607 * C3348 - C82864 * C3527 + C8608 * C4976 - C82679 * C5140) *
                C80224 +
            (C8607 * C3360 - C82864 * C3533 + C8608 * C4982 - C82679 * C5143) *
                C82844 +
            (C8607 * C3347 - C82864 * C3528 + C8608 * C4975 - C82679 * C5141) *
                C80205 +
            (C8607 * C3358 - C82864 * C3534 + C8608 * C4980 - C82679 * C5144) *
                C82533) *
               C13257 +
           ((C8607 * C3345 - C82864 * C3530 + C8608 * C16745 -
             C82679 * C16905) *
                C80224 +
            (C8607 * C3354 - C82864 * C3536 + C8608 * C16748 -
             C82679 * C16907) *
                C82844 +
            (C8607 * C3344 - C82864 * C3531 + C8608 * C16746 -
             C82679 * C16906) *
                C80205 +
            (C8607 * C3352 - C82864 * C3537 + C8608 * C16750 -
             C82679 * C16908) *
                C82533) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
               C6510 +
           (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
               C6504 +
           (C8610 - C8611 + C8612 - C8613) * C6512 +
           (C8614 - C8615 + C8616 - C8617) * C6505 +
           (C8618 - C8619 + C8620 - C8621) * C6514 +
           (C8622 - C8623 + C8624 - C8625) * C6506 +
           (C8626 - C8627 + C8628 - C8629) * C6516 +
           (C8630 - C8631 + C8632 - C8633) * C82862) *
              C82581 * C1149 +
          ((C8607 * C1155 - C82864 * C1265 + C8608 * C4108 - C82679 * C4299) *
               C6510 +
           (C8607 * C1165 - C82864 * C1270 + C8608 * C4113 - C82679 * C4303) *
               C6504 +
           (C8607 * C1154 - C82864 * C1266 + C8608 * C4109 - C82679 * C4300) *
               C6512 +
           (C8607 * C1163 - C82864 * C1271 + C8608 * C4115 - C82679 * C4304) *
               C6505 +
           (C8607 * C1153 - C82864 * C1267 + C8608 * C4110 - C82679 * C4301) *
               C6514 +
           (C8607 * C1161 - C82864 * C1272 + C8608 * C4117 - C82679 * C4305) *
               C6506 +
           (C8607 * C1152 - C82864 * C1268 + C8608 * C4111 - C82679 * C4302) *
               C6516 +
           (C8607 * C1159 - C82864 * C1273 + C8608 * C4119 - C82679 * C4306) *
               C82862) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C34115 * C240 - C34255 * C102 + C34116 * C1265 - C34256 * C1155 +
            C34117 * C4299 - C34257 * C4108 + C82878 * C5904 - C34258 * C5690) *
               C80224 +
           (C34115 * C246 - C34255 * C109 + C34116 * C1270 - C34256 * C1165 +
            C34117 * C4303 - C34257 * C4113 + C82878 * C5907 - C34258 * C5696) *
               C82844 +
           (C34260 - C34261 + C34262 - C34263 + C34264 - C34265 + C34266 -
            C34267) *
               C80205 +
           (C34268 - C34269 + C34270 - C34271 + C34272 - C34273 + C34274 -
            C34275) *
               C82533) *
              C82581 * C1149 +
          ((C34255 * C1155 - C34115 * C1265 + C34256 * C4108 - C34116 * C4299 +
            C34257 * C5690 - C34117 * C5904 + C34258 * C30022 -
            C82878 * C30123) *
               C80224 +
           (C34255 * C1165 - C34115 * C1270 + C34256 * C4113 - C34116 * C4303 +
            C34257 * C5696 - C34117 * C5907 + C34258 * C30025 -
            C82878 * C30125) *
               C82844 +
           (C34255 * C1154 - C34115 * C1266 + C34256 * C4109 - C34116 * C4300 +
            C34257 * C5689 - C34117 * C5905 + C34258 * C30023 -
            C82878 * C30124) *
               C80205 +
           (C34255 * C1163 - C34115 * C1271 + C34256 * C4115 - C34116 * C4304 +
            C34257 * C5694 - C34117 * C5908 + C34258 * C30027 -
            C82878 * C30126) *
               C82533) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C13339 +
            (C82844 * C316 - C80224 * C310 + C82533 * C317 - C80205 * C311) *
                C13256 +
            (C19977 - C19978 + C19979 - C19980) * C13340 +
            (C19981 - C19982 + C19983 - C19984) * C13257 +
            (C19985 - C19986 + C19987 - C19988) * C13341 +
            (C19989 - C19990 + C19991 - C19992) * C82893) *
               C82864 +
           ((C23266 - C23267 + C23268 - C23269) * C13339 +
            (C23270 - C23271 + C23272 - C23273) * C13256 +
            (C22328 - C22329 + C22330 - C22331) * C13340 +
            (C22332 - C22333 + C22334 - C22335) * C13257 +
            (C22336 - C22337 + C22338 - C22339) * C13341 +
            (C22340 - C22341 + C22342 - C22343) * C82893) *
               C82679) *
              C1149 +
          (((C23267 - C23266 + C23269 - C23268) * C13339 +
            (C23271 - C23270 + C23273 - C23272) * C13256 +
            (C22329 - C22328 + C22331 - C22330) * C13340 +
            (C22333 - C22332 + C22335 - C22334) * C13257 +
            (C22337 - C22336 + C22339 - C22338) * C13341 +
            (C22341 - C22340 + C22343 - C22342) * C82893) *
               C82864 +
           ((C80224 * C4108 - C82844 * C4112 + C80205 * C4109 -
             C82533 * C4114) *
                C13339 +
            (C80224 * C4405 - C82844 * C4409 + C80205 * C4406 -
             C82533 * C4410) *
                C13256 +
            (C80224 * C4976 - C82844 * C4981 + C80205 * C4975 -
             C82533 * C4979) *
                C13340 +
            (C80224 * C5220 - C82844 * C5223 + C80205 * C5221 -
             C82533 * C5224) *
                C13257 +
            (C80224 * C16745 - C82844 * C16747 + C80205 * C16746 -
             C82533 * C16749) *
                C13341 +
            (C80224 * C16983 - C82844 * C16985 + C80205 * C16984 -
             C82533 * C16986) *
                C82893) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6504 * C108 - C6510 * C102 + C6505 * C110 - C6512 * C103 +
             C6506 * C112 - C6514 * C104 + C82862 * C114 - C6516 * C105) *
                C168 +
            (C6504 * C316 - C6510 * C310 + C6505 * C317 - C6512 * C311 +
             C6506 * C318 - C6514 * C312 + C82862 * C319 - C6516 * C313) *
                C82581) *
               C82864 +
           ((C9981 - C9982 + C9983 - C9984 + C9985 - C9986 + C9987 - C9988) *
                C168 +
            (C9989 - C9990 + C9991 - C9992 + C9993 - C9994 + C9995 - C9996) *
                C82581) *
               C82679) *
              C1149 +
          (((C9982 - C9981 + C9984 - C9983 + C9986 - C9985 + C9988 - C9987) *
                C168 +
            (C9990 - C9989 + C9992 - C9991 + C9994 - C9993 + C9996 - C9995) *
                C82581) *
               C82864 +
           ((C6510 * C4108 - C6504 * C4112 + C6512 * C4109 - C6505 * C4114 +
             C6514 * C4110 - C6506 * C4116 + C6516 * C4111 - C82862 * C4118) *
                C168 +
            (C6510 * C4405 - C6504 * C4409 + C6512 * C4406 - C6505 * C4410 +
             C6514 * C4407 - C6506 * C4411 + C6516 * C4408 - C82862 * C4412) *
                C82581) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C168 +
            (C82844 * C316 - C80224 * C310 + C82533 * C317 - C80205 * C311) *
                C82581) *
               C34115 +
           ((C23266 - C23267 + C23268 - C23269) * C168 +
            (C23270 - C23271 + C23272 - C23273) * C82581) *
               C34116 +
           ((C33524 - C33525 + C33526 - C33527) * C168 +
            (C33528 - C33529 + C33530 - C33531) * C82581) *
               C34117 +
           ((C35593 - C35594 + C35595 - C35596) * C168 +
            (C35597 - C35598 + C35599 - C35600) * C82581) *
               C82878) *
              C1149 +
          (((C23267 - C23266 + C23269 - C23268) * C168 +
            (C23271 - C23270 + C23273 - C23272) * C82581) *
               C34115 +
           ((C33525 - C33524 + C33527 - C33526) * C168 +
            (C33529 - C33528 + C33531 - C33530) * C82581) *
               C34116 +
           ((C35594 - C35593 + C35596 - C35595) * C168 +
            (C35598 - C35597 + C35600 - C35599) * C82581) *
               C34117 +
           ((C80224 * C30022 - C82844 * C30024 + C80205 * C30023 -
             C82533 * C30026) *
                C168 +
            (C80224 * C30169 - C82844 * C30171 + C80205 * C30170 -
             C82533 * C30172) *
                C82581) *
               C82878) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13339 * C169 - C13588 * C102 - C13339 * C310 + C13256 * C365 +
             C13340 * C753 - C13589 * C695 - C13340 * C857 + C13257 * C913 +
             C13341 * C1746 - C13590 * C1653 - C13341 * C1950 +
             C82893 * C2035) *
                C82844 +
            (C13628 + C13629 + C13630) * C82533) *
               C82864 +
           ((C18662 + C18663 + C18664) * C82844 +
            (C21481 + C21482 + C21483) * C82533) *
               C82679) *
              C1149 -
          (((C13341 * C16828 - C13590 * C16746 - C13341 * C16984 +
             C82893 * C17062 + C13340 * C5061 - C13589 * C4975 -
             C13340 * C5221 + C13257 * C5301 + C13339 * C4199 - C13588 * C4109 -
             C13339 * C4406 + C13256 * C4488) *
                C82533 +
            (C18667 + C18666 + C18665) * C82844) *
               C82679 +
           ((C21483 + C21482 + C21481) * C82533 +
            (C18664 + C18663 + C18662) * C82844) *
               C82864) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C6504 +
            C396 * C6505 + C397 * C6506 + C398 * C82862) *
               C82864 +
           (C10063 + C10064 + C10065 + C10066) * C82679) *
              C1149 -
          (((C168 * C4201 - C364 * C4111 - C168 * C4408 + C82581 * C4490) *
                C82862 +
            C4519 * C6506 + C4518 * C6505 + C6109 * C6504) *
               C82679 +
           (C10066 + C10065 + C10064 + C10063) * C82864) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C82844 +
            C396 * C82533) *
               C34115 +
           (C35667 + C35668) * C34116 + (C35669 + C35670) * C34117 +
           (C35671 + C35672) * C82878) *
              C1149 -
          (((C168 * C30073 - C364 * C30023 - C168 * C30170 + C82581 * C30216) *
                C82533 +
            C31061 * C82844) *
               C82878 +
           (C35672 + C35671) * C34117 + (C35670 + C35669) * C34116 +
           (C35668 + C35667) * C34115) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C13339 +
            (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
                C13256 +
            (C11640 - C11641 + C11642 - C11643) * C13340 +
            (C11954 - C11955 + C11956 - C11957) * C13257 +
            (C22222 - C22223 + C22224 - C22225) * C13341 +
            (C22540 - C22541 + C22542 - C22543) * C82893) *
               C82844 +
           ((C8610 - C8611 + C8612 - C8613) * C13339 +
            (C8839 - C8840 + C8841 - C8842) * C13256 +
            (C10649 - C10650 + C10651 - C10652) * C13340 +
            (C10987 - C10988 + C10989 - C10990) * C13257 +
            (C21259 - C21260 + C21261 - C21262) * C13341 +
            (C21582 - C21583 + C21584 - C21585) * C82893) *
               C82533) *
              C1149 +
          (((C8607 * C1155 - C82864 * C1265 + C8608 * C4108 - C82679 * C4299) *
                C13339 +
            (C8607 * C1317 - C82864 * C1416 + C8608 * C4405 - C82679 * C4593) *
                C13256 +
            (C8607 * C3348 - C82864 * C3527 + C8608 * C4976 - C82679 * C5140) *
                C13340 +
            (C8607 * C3613 - C82864 * C3779 + C8608 * C5220 - C82679 * C5377) *
                C13257 +
            (C8607 * C3345 - C82864 * C3530 + C8608 * C16745 -
             C82679 * C16905) *
                C13341 +
            (C8607 * C3616 - C82864 * C3780 + C8608 * C16983 -
             C82679 * C17137) *
                C82893) *
               C82844 +
           ((C8607 * C1154 - C82864 * C1266 + C8608 * C4109 - C82679 * C4300) *
                C13339 +
            (C8607 * C1318 - C82864 * C1417 + C8608 * C4406 - C82679 * C4594) *
                C13256 +
            (C8607 * C3347 - C82864 * C3528 + C8608 * C4975 - C82679 * C5141) *
                C13340 +
            (C8607 * C3614 - C82864 * C3781 + C8608 * C5221 - C82679 * C5378) *
                C13257 +
            (C8607 * C3344 - C82864 * C3531 + C8608 * C16746 -
             C82679 * C16906) *
                C13341 +
            (C8607 * C3617 - C82864 * C3782 + C8608 * C16984 -
             C82679 * C17138) *
                C82893) *
               C82533) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C168 +
            (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
                C82581) *
               C6504 +
           ((C8610 - C8611 + C8612 - C8613) * C168 +
            (C8839 - C8840 + C8841 - C8842) * C82581) *
               C6505 +
           ((C8618 - C8619 + C8620 - C8621) * C168 +
            (C8843 - C8844 + C8845 - C8846) * C82581) *
               C6506 +
           ((C8626 - C8627 + C8628 - C8629) * C168 +
            (C8847 - C8848 + C8849 - C8850) * C82581) *
               C82862) *
              C1149 +
          (((C8607 * C1155 - C82864 * C1265 + C8608 * C4108 - C82679 * C4299) *
                C168 +
            (C8607 * C1317 - C82864 * C1416 + C8608 * C4405 - C82679 * C4593) *
                C82581) *
               C6504 +
           ((C8607 * C1154 - C82864 * C1266 + C8608 * C4109 - C82679 * C4300) *
                C168 +
            (C8607 * C1318 - C82864 * C1417 + C8608 * C4406 - C82679 * C4594) *
                C82581) *
               C6505 +
           ((C8607 * C1153 - C82864 * C1267 + C8608 * C4110 - C82679 * C4301) *
                C168 +
            (C8607 * C1319 - C82864 * C1418 + C8608 * C4407 - C82679 * C4595) *
                C82581) *
               C6506 +
           ((C8607 * C1152 - C82864 * C1268 + C8608 * C4111 - C82679 * C4302) *
                C168 +
            (C8607 * C1320 - C82864 * C1419 + C8608 * C4408 - C82679 * C4596) *
                C82581) *
               C82862) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C34115 * C240 - C34255 * C102 + C34116 * C1265 - C34256 * C1155 +
             C34117 * C4299 - C34257 * C4108 + C82878 * C5904 -
             C34258 * C5690) *
                C168 +
            (C34115 * C441 - C34255 * C310 + C34116 * C1416 - C34256 * C1317 +
             C34117 * C4593 - C34257 * C4405 + C82878 * C6185 -
             C34258 * C5984) *
                C82581) *
               C82844 +
           ((C34260 - C34261 + C34262 - C34263 + C34264 - C34265 + C34266 -
             C34267) *
                C168 +
            (C34481 - C34482 + C34483 - C34484 + C34485 - C34486 + C34487 -
             C34488) *
                C82581) *
               C82533) *
              C1149 +
          (((C34255 * C1155 - C34115 * C1265 + C34256 * C4108 - C34116 * C4299 +
             C34257 * C5690 - C34117 * C5904 + C34258 * C30022 -
             C82878 * C30123) *
                C168 +
            (C34255 * C1317 - C34115 * C1416 + C34256 * C4405 - C34116 * C4593 +
             C34257 * C5984 - C34117 * C6185 + C34258 * C30169 -
             C82878 * C30259) *
                C82581) *
               C82844 +
           ((C34255 * C1154 - C34115 * C1266 + C34256 * C4109 - C34116 * C4300 +
             C34257 * C5689 - C34117 * C5905 + C34258 * C30023 -
             C82878 * C30124) *
                C168 +
            (C34255 * C1318 - C34115 * C1417 + C34256 * C4406 - C34116 * C4594 +
             C34257 * C5985 - C34117 * C6186 + C34258 * C30170 -
             C82878 * C30260) *
                C82581) *
               C82533) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezx[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C8607 +
            (C82844 * C503 - C80224 * C497 + C82533 * C504 - C80205 * C498) *
                C82864 +
            (C23266 - C23267 + C23268 - C23269) * C8608 +
            (C23568 - C23569 + C23570 - C23571) * C82679) *
               C13256 +
           ((C19977 - C19978 + C19979 - C19980) * C8607 +
            (C20199 - C20200 + C20201 - C20202) * C82864 +
            (C22328 - C22329 + C22330 - C22331) * C8608 +
            (C22642 - C22643 + C22644 - C22645) * C82679) *
               C13257 +
           ((C19985 - C19986 + C19987 - C19988) * C8607 +
            (C20203 - C20204 + C20205 - C20206) * C82864 +
            (C22336 - C22337 + C22338 - C22339) * C8608 +
            (C22646 - C22647 + C22648 - C22649) * C82679) *
               C82893) *
              C1149 +
          (((C23267 - C23266 + C23269 - C23268) * C8607 +
            (C23569 - C23568 + C23571 - C23570) * C82864 +
            (C80224 * C4108 - C82844 * C4112 + C80205 * C4109 -
             C82533 * C4114) *
                C8608 +
            (C80224 * C4683 - C82844 * C4687 + C80205 * C4684 -
             C82533 * C4688) *
                C82679) *
               C13256 +
           ((C22329 - C22328 + C22331 - C22330) * C8607 +
            (C22643 - C22642 + C22645 - C22644) * C82864 +
            (C80224 * C4976 - C82844 * C4981 + C80205 * C4975 -
             C82533 * C4979) *
                C8608 +
            (C80224 * C5454 - C82844 * C5457 + C80205 * C5455 -
             C82533 * C5458) *
                C82679) *
               C13257 +
           ((C22337 - C22336 + C22339 - C22338) * C8607 +
            (C22647 - C22646 + C22649 - C22648) * C82864 +
            (C80224 * C16745 - C82844 * C16747 + C80205 * C16746 -
             C82533 * C16749) *
                C8608 +
            (C80224 * C17213 - C82844 * C17215 + C80205 * C17214 -
             C82533 * C17216) *
                C82679) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6504 * C108 - C6510 * C102 + C6505 * C110 - C6512 * C103 +
            C6506 * C112 - C6514 * C104 + C82862 * C114 - C6516 * C105) *
               C8607 +
           (C6504 * C503 - C6510 * C497 + C6505 * C504 - C6512 * C498 +
            C6506 * C505 - C6514 * C499 + C82862 * C506 - C6516 * C500) *
               C82864 +
           (C9981 - C9982 + C9983 - C9984 + C9985 - C9986 + C9987 - C9988) *
               C8608 +
           (C10199 - C10200 + C10201 - C10202 + C10203 - C10204 + C10205 -
            C10206) *
               C82679) *
              C82581 * C1149 +
          ((C9982 - C9981 + C9984 - C9983 + C9986 - C9985 + C9988 - C9987) *
               C8607 +
           (C10200 - C10199 + C10202 - C10201 + C10204 - C10203 + C10206 -
            C10205) *
               C82864 +
           (C6510 * C4108 - C6504 * C4112 + C6512 * C4109 - C6505 * C4114 +
            C6514 * C4110 - C6506 * C4116 + C6516 * C4111 - C82862 * C4118) *
               C8608 +
           (C6510 * C4683 - C6504 * C4687 + C6512 * C4684 - C6505 * C4688 +
            C6514 * C4685 - C6506 * C4689 + C6516 * C4686 - C82862 * C4690) *
               C82679) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
               C34255 +
           (C82844 * C503 - C80224 * C497 + C82533 * C504 - C80205 * C498) *
               C34115 +
           (C23266 - C23267 + C23268 - C23269) * C34256 +
           (C23568 - C23569 + C23570 - C23571) * C34116 +
           (C33524 - C33525 + C33526 - C33527) * C34257 +
           (C33844 - C33845 + C33846 - C33847) * C34117 +
           (C35593 - C35594 + C35595 - C35596) * C34258 +
           (C35805 - C35806 + C35807 - C35808) * C82878) *
              C82581 * C1149 +
          ((C23267 - C23266 + C23269 - C23268) * C34255 +
           (C23569 - C23568 + C23571 - C23570) * C34115 +
           (C33525 - C33524 + C33527 - C33526) * C34256 +
           (C33845 - C33844 + C33847 - C33846) * C34116 +
           (C35594 - C35593 + C35596 - C35595) * C34257 +
           (C35806 - C35805 + C35808 - C35807) * C34117 +
           (C80224 * C30022 - C82844 * C30024 + C80205 * C30023 -
            C82533 * C30026) *
               C34258 +
           (C80224 * C30303 - C82844 * C30305 + C80205 * C30304 -
            C82533 * C30306) *
               C82878) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C8607 +
            (C13256 * C551 - C13339 * C497 + C13257 * C1055 - C13340 * C1003 +
             C82893 * C2323 - C13341 * C2241) *
                C82864 +
            (C18362 - C18363 + C18364 - C18365 + C18366 - C18367) * C8608 +
            (C18902 - C18903 + C18904 - C18905 + C18906 - C18907) * C82679) *
               C82844 +
           ((C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C8607 +
            (C13856 - C13857 + C13858 - C13859 + C13860 - C13861) * C82864 +
            (C21149 - C21150 + C21151 - C21152 + C21153 - C21154) * C8608 +
            (C21782 - C21783 + C21784 - C21785 + C21786 - C21787) * C82679) *
               C82533) *
              C1149 +
          (((C18363 - C18362 + C18365 - C18364 + C18367 - C18366) * C8607 +
            (C18903 - C18902 + C18905 - C18904 + C18907 - C18906) * C82864 +
            (C18375 - C18374 + C18377 - C18376 + C18379 - C18378) * C8608 +
            (C18909 - C18908 + C18911 - C18910 + C18913 - C18912) * C82679) *
               C82844 +
           ((C21150 - C21149 + C21152 - C21151 + C21154 - C21153) * C8607 +
            (C21783 - C21782 + C21785 - C21784 + C21787 - C21786) * C82864 +
            (C13339 * C4109 - C13256 * C4199 + C13340 * C4975 - C13257 * C5061 +
             C13341 * C16746 - C82893 * C16828) *
                C8608 +
            (C13339 * C4684 - C13256 * C4766 + C13340 * C5455 - C13257 * C5535 +
             C13341 * C17214 - C82893 * C17292) *
                C82679) *
               C82533) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C8607 +
            (C82581 * C551 - C168 * C497) * C82864 + (C5823 - C5824) * C8608 +
            (C6358 - C6359) * C82679) *
               C6504 +
           ((C182 - C183) * C8607 + (C558 - C559) * C82864 +
            (C4207 - C4208) * C8608 + (C4770 - C4771) * C82679) *
               C6505 +
           ((C186 - C187) * C8607 + (C560 - C561) * C82864 +
            (C4211 - C4212) * C8608 + (C4774 - C4775) * C82679) *
               C6506 +
           ((C190 - C191) * C8607 + (C562 - C563) * C82864 +
            (C8538 - C8539) * C8608 + (C8983 - C8984) * C82679) *
               C82862) *
              C1149 +
          (((C5824 - C5823) * C8607 + (C6359 - C6358) * C82864 +
            (C5828 - C5827) * C8608 + (C6361 - C6360) * C82679) *
               C6504 +
           ((C4208 - C4207) * C8607 + (C4771 - C4770) * C82864 +
            (C4216 - C4215) * C8608 + (C4773 - C4772) * C82679) *
               C6505 +
           ((C4212 - C4211) * C8607 + (C4775 - C4774) * C82864 +
            (C4220 - C4219) * C8608 + (C4777 - C4776) * C82679) *
               C6506 +
           ((C8539 - C8538) * C8607 + (C8984 - C8983) * C82864 +
            (C168 * C4111 - C82581 * C4201) * C8608 +
            (C168 * C4686 - C82581 * C4768) * C82679) *
               C82862) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C34255 +
            (C82581 * C551 - C168 * C497) * C34115 + (C5823 - C5824) * C34256 +
            (C6358 - C6359) * C34116 + (C5827 - C5828) * C34257 +
            (C6360 - C6361) * C34117 + (C30899 - C30900) * C34258 +
            (C31198 - C31199) * C82878) *
               C82844 +
           ((C182 - C183) * C34255 + (C558 - C559) * C34115 +
            (C4207 - C4208) * C34256 + (C4770 - C4771) * C34116 +
            (C4215 - C4216) * C34257 + (C4772 - C4773) * C34117 +
            (C34186 - C34187) * C34258 + (C34621 - C34622) * C82878) *
               C82533) *
              C1149 +
          (((C5824 - C5823) * C34255 + (C6359 - C6358) * C34115 +
            (C5828 - C5827) * C34256 + (C6361 - C6360) * C34116 +
            (C30900 - C30899) * C34257 + (C31199 - C31198) * C34117 +
            (C30904 - C30903) * C34258 + (C31201 - C31200) * C82878) *
               C82844 +
           ((C4208 - C4207) * C34255 + (C4771 - C4770) * C34115 +
            (C4216 - C4215) * C34256 + (C4773 - C4772) * C34116 +
            (C34187 - C34186) * C34257 + (C34622 - C34621) * C34117 +
            (C168 * C30023 - C82581 * C30073) * C34258 +
            (C168 * C30304 - C82581 * C30350) * C82878) *
               C82533) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
             C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
                C13256 +
            (C12270 + C12271) * C13257 + (C22858 + C22859) * C82893) *
               C82844 +
           ((C9089 + C9090) * C13256 + (C11321 + C11322) * C13257 +
            (C21898 + C21899) * C82893) *
               C82533) *
              C1149 -
          (((C8608 * C16906 - C9051 * C16746 - C8608 * C17214 +
             C82679 * C17368 + C8607 * C3531 - C9050 * C3344 - C8607 * C3863 +
             C82864 * C4027) *
                C82893 +
            (C8608 * C5141 - C9051 * C4975 - C8608 * C5455 + C82679 * C5612 +
             C8607 * C3528 - C9050 * C3347 - C8607 * C3860 + C82864 * C4028) *
                C13257 +
            (C8608 * C4300 - C9051 * C4109 - C8608 * C4684 + C82679 * C4855 +
             C8607 * C1266 - C9050 * C1154 - C8607 * C1464 + C82864 * C1565) *
                C13256) *
               C82533 +
           ((C8608 * C16905 - C9051 * C16745 - C8608 * C17213 +
             C82679 * C17367 + C8607 * C3530 - C9050 * C3345 - C8607 * C3862 +
             C82864 * C4029) *
                C82893 +
            (C8608 * C5140 - C9051 * C4976 - C8608 * C5454 + C82679 * C5613 +
             C8607 * C3527 - C9050 * C3348 - C8607 * C3859 + C82864 * C4030) *
                C13257 +
            (C8608 * C4299 - C9051 * C4108 - C8608 * C4683 + C82679 * C4854 +
             C8607 * C1265 - C9050 * C1155 - C8607 * C1463 + C82864 * C1566) *
                C13256) *
               C82844) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
            C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
               C82581 * C6504 +
           (C9089 + C9090) * C82581 * C6505 + (C9091 + C9092) * C82581 * C6506 +
           (C9093 + C9094) * C82581 * C82862) *
              C1149 -
          ((C8608 * C4302 - C9051 * C4111 - C8608 * C4686 + C82679 * C4857 +
            C8607 * C1268 - C9050 * C1152 - C8607 * C1466 + C82864 * C1563) *
               C82581 * C82862 +
           (C8608 * C4301 - C9051 * C4110 - C8608 * C4685 + C82679 * C4856 +
            C8607 * C1267 - C9050 * C1153 - C8607 * C1465 + C82864 * C1564) *
               C82581 * C6506 +
           (C8608 * C4300 - C9051 * C4109 - C8608 * C4684 + C82679 * C4855 +
            C8607 * C1266 - C9050 * C1154 - C8607 * C1464 + C82864 * C1565) *
               C82581 * C6505 +
           (C8608 * C4299 - C9051 * C4108 - C8608 * C4683 + C82679 * C4854 +
            C8607 * C1265 - C9050 * C1155 - C8607 * C1463 + C82864 * C1566) *
               C82581 * C6504) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C34255 * C240 - C34688 * C102 - C34255 * C497 + C34115 * C608 +
            C34256 * C1265 - C34689 * C1155 - C34256 * C1463 + C34116 * C1566 +
            C34257 * C4299 - C34690 * C4108 - C34257 * C4683 + C34117 * C4854 +
            C34258 * C5904 - C34691 * C5690 - C34258 * C6262 + C82878 * C6437) *
               C82581 * C82844 +
           (C34717 + C34718 + C34719 + C34720) * C82581 * C82533) *
              C1149 -
          ((C34258 * C30124 - C34691 * C30023 - C34258 * C30304 +
            C82878 * C30399 + C34257 * C5905 - C34690 * C5689 - C34257 * C6263 +
            C34117 * C6436 + C34256 * C4300 - C34689 * C4109 - C34256 * C4684 +
            C34116 * C4855 + C34255 * C1266 - C34688 * C1154 - C34255 * C1464 +
            C34115 * C1565) *
               C82581 * C82533 +
           (C34258 * C30123 - C34691 * C30022 - C34258 * C30303 +
            C82878 * C30398 + C34257 * C5904 - C34690 * C5690 - C34257 * C6262 +
            C34117 * C6437 + C34256 * C4299 - C34689 * C4108 - C34256 * C4683 +
            C34116 * C4854 + C34255 * C1265 - C34688 * C1155 - C34255 * C1463 +
            C34115 * C1566) *
               C82581 * C82844) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1647 * C108 - C1648 * C102 - C1647 * C109 + C1641 * C120 +
            C1649 * C110 - C1650 * C103 - C1649 * C111 + C1642 * C121 +
            C1651 * C112 - C1652 * C104 - C1651 * C113 + C82885 * C122) *
               C82592 * C82931 +
           (C1647 * C704 - C1648 * C695 - C1647 * C705 + C1641 * C710 +
            C1649 * C702 - C1650 * C694 - C1649 * C703 + C1642 * C709 +
            C1651 * C700 - C1652 * C693 - C1651 * C701 + C82885 * C708) *
               C82592 * C82916 +
           (C1647 * C1657 - C1648 * C1653 - C1647 * C1658 + C1641 * C1665 +
            C1649 * C1659 - C1650 * C1654 - C1649 * C1660 + C1642 * C1666 +
            C1651 * C1661 - C1652 * C1655 - C1651 * C1662 + C82885 * C1667) *
               C82592 * C82893) *
              C82938 * C82939 * C90 -
          ((C1651 * C1663 - C1652 * C1656 - C1651 * C1664 + C82885 * C1668 +
            C1649 * C1661 - C1650 * C1655 - C1649 * C1662 + C1642 * C1667 +
            C1647 * C1659 - C1648 * C1654 - C1647 * C1660 + C1641 * C1666) *
               C82592 * C82893 +
           (C1651 * C698 - C1652 * C692 - C1651 * C699 + C82885 * C707 +
            C1649 * C700 - C1650 * C693 - C1649 * C701 + C1642 * C708 +
            C1647 * C702 - C1648 * C694 - C1647 * C703 + C1641 * C709) *
               C82592 * C82916 +
           (C1651 * C114 - C1652 * C105 - C1651 * C115 + C82885 * C123 +
            C1649 * C112 - C1650 * C104 - C1649 * C113 + C1642 * C122 +
            C1647 * C110 - C1648 * C103 - C1647 * C111 + C1641 * C121) *
               C82592 * C82931) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C92 * C108 - C93 * C102 - C92 * C109 + C81 * C120 + C94 * C110 -
           C95 * C103 - C94 * C111 + C82 * C121 + C96 * C112 - C97 * C104 -
           C96 * C113 + C83 * C122 + C98 * C114 - C99 * C105 - C98 * C115 +
           C84 * C123 + C100 * C116 - C101 * C106 - C100 * C117 + C85 * C124) *
              C82592 * C82581 * C82938 * C82939 * C90 -
          (C100 * C118 - C101 * C107 - C100 * C119 + C85 * C125 + C98 * C116 -
           C99 * C106 - C98 * C117 + C84 * C124 + C96 * C114 - C97 * C105 -
           C96 * C115 + C83 * C123 + C94 * C112 - C95 * C104 - C94 * C113 +
           C82 * C122 + C92 * C110 - C93 * C103 - C92 * C111 + C81 * C121) *
              C82592 * C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13259 * C108 - C13260 * C102 - C13259 * C109 + C82925 * C120 +
            C13261 * C110 - C13262 * C103 - C13261 * C111 + C82909 * C121 +
            C13263 * C112 - C13264 * C104 - C13263 * C113 + C82885 * C122) *
               C82592 * C13256 +
           (C13259 * C704 - C13260 * C695 - C13259 * C705 + C82925 * C710 +
            C13261 * C702 - C13262 * C694 - C13261 * C703 + C82909 * C709 +
            C13263 * C700 - C13264 * C693 - C13263 * C701 + C82885 * C708) *
               C82592 * C13257 +
           (C13259 * C1657 - C13260 * C1653 - C13259 * C1658 + C82925 * C1665 +
            C13261 * C1659 - C13262 * C1654 - C13261 * C1660 + C82909 * C1666 +
            C13263 * C1661 - C13264 * C1655 - C13263 * C1662 + C82885 * C1667) *
               C82592 * C82893) *
              C82938 * C82939 * C90 -
          ((C13263 * C1663 - C13264 * C1656 - C13263 * C1664 + C82885 * C1668 +
            C13261 * C1661 - C13262 * C1655 - C13261 * C1662 + C82909 * C1667 +
            C13259 * C1659 - C13260 * C1654 - C13259 * C1660 + C82925 * C1666) *
               C82592 * C82893 +
           (C13263 * C698 - C13264 * C692 - C13263 * C699 + C82885 * C707 +
            C13261 * C700 - C13262 * C693 - C13261 * C701 + C82909 * C708 +
            C13259 * C702 - C13260 * C694 - C13259 * C703 + C82925 * C709) *
               C82592 * C13257 +
           (C13263 * C114 - C13264 * C105 - C13263 * C115 + C82885 * C123 +
            C13261 * C112 - C13262 * C104 - C13261 * C113 + C82909 * C122 +
            C13259 * C110 - C13260 * C103 - C13259 * C111 + C82925 * C121) *
               C82592 * C13256) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
               C82592 * C15400 +
           (C15405 * C704 - C15406 * C695 - C15405 * C705 + C82523 * C710) *
               C82592 * C15401 +
           (C15405 * C1657 - C15406 * C1653 - C15405 * C1658 + C82523 * C1665) *
               C82592 * C15402 +
           (C15405 * C2532 - C15406 * C2527 - C15405 * C2533 + C82523 * C2536) *
               C82592 * C15403 +
           (C15405 * C15409 - C15406 * C15407 - C15405 * C15410 +
            C82523 * C15413) *
               C82592 * C15404) *
              C82938 * C82939 * C90 -
          ((C15405 * C15411 - C15406 * C15408 - C15405 * C15412 +
            C82523 * C15414) *
               C82592 * C15404 +
           (C15405 * C2530 - C15406 * C2526 - C15405 * C2531 + C82523 * C2535) *
               C82592 * C15403 +
           (C15405 * C1659 - C15406 * C1654 - C15405 * C1660 + C82523 * C1666) *
               C82592 * C15402 +
           (C15405 * C702 - C15406 * C694 - C15405 * C703 + C82523 * C709) *
               C82592 * C15401 +
           (C15405 * C110 - C15406 * C103 - C15405 * C111 + C82523 * C121) *
               C82592 * C15400) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13259 * C108 - C13260 * C102 - C13259 * C109 + C82925 * C120 +
            C13261 * C110 - C13262 * C103 - C13261 * C111 + C82909 * C121 +
            C13263 * C112 - C13264 * C104 - C13263 * C113 + C82885 * C122) *
               C25720 +
           (C13259 * C1164 - C13260 * C1155 - C13259 * C1165 + C82925 * C1170 +
            C13261 * C1162 - C13262 * C1154 - C13261 * C1163 + C82909 * C1169 +
            C13263 * C1160 - C13264 * C1153 - C13263 * C1161 + C82885 * C1168) *
               C25721 +
           (C13259 * C4112 - C13260 * C4108 - C13259 * C4113 + C82925 * C4120 +
            C13261 * C4114 - C13262 * C4109 - C13261 * C4115 + C82909 * C4121 +
            C13263 * C4116 - C13264 * C4110 - C13263 * C4117 + C82885 * C4122) *
               C82896) *
              C82581 * C82938 * C82939 * C90 -
          ((C13263 * C4118 - C13264 * C4111 - C13263 * C4119 + C82885 * C4123 +
            C13261 * C4116 - C13262 * C4110 - C13261 * C4117 + C82909 * C4122 +
            C13259 * C4114 - C13260 * C4109 - C13259 * C4115 + C82925 * C4121) *
               C82896 +
           (C13263 * C1158 - C13264 * C1152 - C13263 * C1159 + C82885 * C1167 +
            C13261 * C1160 - C13262 * C1153 - C13261 * C1161 + C82909 * C1168 +
            C13259 * C1162 - C13260 * C1154 - C13259 * C1163 + C82925 * C1169) *
               C25721 +
           (C13263 * C114 - C13264 * C105 - C13263 * C115 + C82885 * C123 +
            C13261 * C112 - C13262 * C104 - C13261 * C113 + C82909 * C122 +
            C13259 * C110 - C13260 * C103 - C13259 * C111 + C82925 * C121) *
               C25720) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C25720 +
            C18282 * C25721 + C18283 * C82896) *
               C82931 +
           (C15856 * C25720 + C17474 * C25721 + C17475 * C82896) * C82916 +
           (C15857 * C25720 + C17476 * C25721 + C17477 * C82896) * C82893) *
              C82938 * C82939 * C90 -
          (((C15405 * C16749 - C15406 * C16746 - C15405 * C16750 +
             C82523 * C16752) *
                C82896 +
            (C15405 * C3351 - C15406 * C3344 - C15405 * C3352 +
             C82523 * C3362) *
                C25721 +
            (C15405 * C1659 - C15406 * C1654 - C15405 * C1660 +
             C82523 * C1666) *
                C25720) *
               C82893 +
           ((C15405 * C4979 - C15406 * C4975 - C15405 * C4980 +
             C82523 * C4984) *
                C82896 +
            (C15405 * C3357 - C15406 * C3347 - C15405 * C3358 +
             C82523 * C3365) *
                C25721 +
            (C15405 * C702 - C15406 * C694 - C15405 * C703 + C82523 * C709) *
                C25720) *
               C82916 +
           ((C15405 * C4114 - C15406 * C4109 - C15405 * C4115 +
             C82523 * C4121) *
                C82896 +
            (C15405 * C1162 - C15406 * C1154 - C15405 * C1163 +
             C82523 * C1169) *
                C25721 +
            (C15405 * C110 - C15406 * C103 - C15405 * C111 + C82523 * C121) *
                C25720) *
               C82931) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
            C82893 * C1746 - C1745 * C1653) *
               C1647 +
           (C82931 * C175 - C1743 * C109 + C82916 * C758 - C1744 * C705 +
            C82893 * C1750 - C1745 * C1658) *
               C1641 +
           (C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C1649 +
           (C1761 - C1762 + C1763 - C1764 + C1765 - C1766) * C1642 +
           (C1767 - C1768 + C1769 - C1770 + C1771 - C1772) * C1651 +
           (C1773 - C1774 + C1775 - C1776 + C1777 - C1778) * C82885) *
              C82592 * C82938 * C82939 * C90 +
          ((C1756 - C1755 + C1758 - C1757 + C1760 - C1759) * C1647 +
           (C1762 - C1761 + C1764 - C1763 + C1766 - C1765) * C1641 +
           (C1768 - C1767 + C1770 - C1769 + C1772 - C1771) * C1649 +
           (C1774 - C1773 + C1776 - C1775 + C1778 - C1777) * C1642 +
           (C1743 * C105 - C82931 * C172 + C1744 * C692 - C82916 * C756 +
            C1745 * C1656 - C82893 * C1749) *
               C1651 +
           (C1743 * C115 - C82931 * C178 + C1744 * C699 - C82916 * C761 +
            C1745 * C1664 - C82893 * C1753) *
               C82885) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82581 * C169 - C168 * C102) * C92 +
           (C82581 * C175 - C168 * C109) * C81 + (C182 - C183) * C94 +
           (C184 - C185) * C82 + (C186 - C187) * C96 + (C188 - C189) * C83 +
           (C190 - C191) * C98 + (C192 - C193) * C84 + (C194 - C195) * C100 +
           (C196 - C197) * C85) *
              C82592 * C82938 * C82939 * C90 +
          ((C183 - C182) * C92 + (C185 - C184) * C81 + (C187 - C186) * C94 +
           (C189 - C188) * C82 + (C191 - C190) * C96 + (C193 - C192) * C83 +
           (C195 - C194) * C98 + (C197 - C196) * C84 +
           (C168 * C107 - C82581 * C174) * C100 +
           (C168 * C119 - C82581 * C180) * C85) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
            C82893 * C1746 - C13341 * C1653) *
               C13259 +
           (C13256 * C175 - C13339 * C109 + C13257 * C758 - C13340 * C705 +
            C82893 * C1750 - C13341 * C1658) *
               C82925 +
           (C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C13261 +
           (C13349 - C13350 + C13351 - C13352 + C13353 - C13354) * C82909 +
           (C13355 - C13356 + C13357 - C13358 + C13359 - C13360) * C13263 +
           (C13361 - C13362 + C13363 - C13364 + C13365 - C13366) * C82885) *
              C82592 * C82938 * C82939 * C90 +
          ((C13344 - C13343 + C13346 - C13345 + C13348 - C13347) * C13259 +
           (C13350 - C13349 + C13352 - C13351 + C13354 - C13353) * C82925 +
           (C13356 - C13355 + C13358 - C13357 + C13360 - C13359) * C13261 +
           (C13362 - C13361 + C13364 - C13363 + C13366 - C13365) * C82909 +
           (C13339 * C105 - C13256 * C172 + C13340 * C692 - C13257 * C756 +
            C13341 * C1656 - C82893 * C1749) *
               C13263 +
           (C13339 * C115 - C13256 * C178 + C13340 * C699 - C13257 * C761 +
            C13341 * C1664 - C82893 * C1753) *
               C82885) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15400 * C169 - C15457 * C102 + C15401 * C753 - C15458 * C695 +
            C15402 * C1746 - C15459 * C1653 + C15403 * C2653 - C15460 * C2527 +
            C15404 * C15462 - C15461 * C15407) *
               C15405 +
           (C15400 * C175 - C15457 * C109 + C15401 * C758 - C15458 * C705 +
            C15402 * C1750 - C15459 * C1658 + C15403 * C2656 - C15460 * C2533 +
            C15404 * C15464 - C15461 * C15410) *
               C82523) *
              C82592 * C82938 * C82939 * C90 +
          ((C15457 * C103 - C15400 * C170 + C15458 * C694 - C15401 * C754 +
            C15459 * C1654 - C15402 * C1747 + C15460 * C2526 - C15403 * C2654 +
            C15461 * C15408 - C15404 * C15463) *
               C15405 +
           (C15457 * C111 - C15400 * C176 + C15458 * C703 - C15401 * C759 +
            C15459 * C1660 - C15402 * C1751 + C15460 * C2531 - C15403 * C2657 +
            C15461 * C15412 - C15404 * C15465) *
               C82523) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C13259 +
            (C82581 * C175 - C168 * C109) * C82925 + (C182 - C183) * C13261 +
            (C184 - C185) * C82909 + (C186 - C187) * C13263 +
            (C188 - C189) * C82885) *
               C25720 +
           ((C5823 - C5824) * C13259 + (C5825 - C5826) * C82925 +
            (C4207 - C4208) * C13261 + (C4209 - C4210) * C82909 +
            (C4211 - C4212) * C13263 + (C4213 - C4214) * C82885) *
               C25721 +
           ((C5827 - C5828) * C13259 + (C5829 - C5830) * C82925 +
            (C4215 - C4216) * C13261 + (C4217 - C4218) * C82909 +
            (C4219 - C4220) * C13263 + (C4221 - C4222) * C82885) *
               C82896) *
              C82938 * C82939 * C90 +
          (((C183 - C182) * C13259 + (C185 - C184) * C82925 +
            (C187 - C186) * C13261 + (C189 - C188) * C82909 +
            (C191 - C190) * C13263 + (C193 - C192) * C82885) *
               C25720 +
           ((C4208 - C4207) * C13259 + (C4210 - C4209) * C82925 +
            (C4212 - C4211) * C13261 + (C4214 - C4213) * C82909 +
            (C8539 - C8538) * C13263 + (C8541 - C8540) * C82885) *
               C25721 +
           ((C4216 - C4215) * C13259 + (C4218 - C4217) * C82925 +
            (C4220 - C4219) * C13261 + (C4222 - C4221) * C82909 +
            (C168 * C4111 - C82581 * C4201) * C13263 +
            (C168 * C4119 - C82581 * C4205) * C82885) *
               C82896) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
             C82893 * C1746 - C1745 * C1653) *
                C15405 +
            (C82931 * C175 - C1743 * C109 + C82916 * C758 - C1744 * C705 +
             C82893 * C1750 - C1745 * C1658) *
                C82523) *
               C25720 +
           ((C82931 * C1213 - C1743 * C1155 + C82916 * C3441 - C1744 * C3348 +
             C82893 * C3442 - C1745 * C3345) *
                C15405 +
            (C82931 * C1218 - C1743 * C1165 + C82916 * C3447 - C1744 * C3360 +
             C82893 * C3448 - C1745 * C3354) *
                C82523) *
               C25721 +
           ((C82931 * C4198 - C1743 * C4108 + C82916 * C5060 - C1744 * C4976 +
             C82893 * C16827 - C1745 * C16745) *
                C15405 +
            (C82931 * C4202 - C1743 * C4113 + C82916 * C5063 - C1744 * C4982 +
             C82893 * C16829 - C1745 * C16748) *
                C82523) *
               C82896) *
              C82938 * C82939 * C90 +
          (((C1756 - C1755 + C1758 - C1757 + C1760 - C1759) * C15405 +
            (C1762 - C1761 + C1764 - C1763 + C1766 - C1765) * C82523) *
               C25720 +
           ((C1743 * C1154 - C82931 * C1214 + C1744 * C3347 - C82916 * C3443 +
             C1745 * C3344 - C82893 * C3444) *
                C15405 +
            (C1743 * C1163 - C82931 * C1219 + C1744 * C3358 - C82916 * C3449 +
             C1745 * C3352 - C82893 * C3450) *
                C82523) *
               C25721 +
           ((C1743 * C4109 - C82931 * C4199 + C1744 * C4975 - C82916 * C5061 +
             C1745 * C16746 - C82893 * C16828) *
                C15405 +
            (C1743 * C4115 - C82931 * C4203 + C1744 * C4980 - C82916 * C5064 +
             C1745 * C16750 - C82893 * C16830) *
                C82523) *
               C82896) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C1647 +
            (C82592 * C246 - C239 * C109) * C1641 + (C253 - C254) * C1649 +
            (C255 - C256) * C1642 + (C257 - C258) * C1651 +
            (C259 - C260) * C82885) *
               C82931 +
           ((C82592 * C805 - C239 * C695) * C1647 +
            (C82592 * C810 - C239 * C705) * C1641 + (C1861 - C1862) * C1649 +
            (C1863 - C1864) * C1642 + (C1865 - C1866) * C1651 +
            (C1867 - C1868) * C82885) *
               C82916 +
           ((C82592 * C1852 - C239 * C1653) * C1647 +
            (C82592 * C1856 - C239 * C1658) * C1641 + (C1869 - C1870) * C1649 +
            (C1871 - C1872) * C1642 + (C1873 - C1874) * C1651 +
            (C1875 - C1876) * C82885) *
               C82893) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C1647 + (C256 - C255) * C1641 +
            (C258 - C257) * C1649 + (C260 - C259) * C1642 +
            (C262 - C261) * C1651 + (C264 - C263) * C82885) *
               C82931 +
           ((C1862 - C1861) * C1647 + (C1864 - C1863) * C1641 +
            (C1866 - C1865) * C1649 + (C1868 - C1867) * C1642 +
            (C239 * C692 - C82592 * C808) * C1651 +
            (C239 * C699 - C82592 * C813) * C82885) *
               C82916 +
           ((C1870 - C1869) * C1647 + (C1872 - C1871) * C1641 +
            (C1874 - C1873) * C1649 + (C1876 - C1875) * C1642 +
            (C239 * C1656 - C82592 * C1855) * C1651 +
            (C239 * C1664 - C82592 * C1859) * C82885) *
               C82893) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82592 * C240 - C239 * C102) * C92 +
           (C82592 * C246 - C239 * C109) * C81 + (C253 - C254) * C94 +
           (C255 - C256) * C82 + (C257 - C258) * C96 + (C259 - C260) * C83 +
           (C261 - C262) * C98 + (C263 - C264) * C84 + (C265 - C266) * C100 +
           (C267 - C268) * C85) *
              C82581 * C82938 * C82939 * C90 +
          ((C254 - C253) * C92 + (C256 - C255) * C81 + (C258 - C257) * C94 +
           (C260 - C259) * C82 + (C262 - C261) * C96 + (C264 - C263) * C83 +
           (C266 - C265) * C98 + (C268 - C267) * C84 +
           (C239 * C107 - C82592 * C245) * C100 +
           (C239 * C119 - C82592 * C251) * C85) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C13259 +
            (C82592 * C246 - C239 * C109) * C82925 + (C253 - C254) * C13261 +
            (C255 - C256) * C82909 + (C257 - C258) * C13263 +
            (C259 - C260) * C82885) *
               C13256 +
           ((C2740 - C2741) * C13259 + (C2742 - C2743) * C82925 +
            (C1861 - C1862) * C13261 + (C1863 - C1864) * C82909 +
            (C1865 - C1866) * C13263 + (C1867 - C1868) * C82885) *
               C13257 +
           ((C2744 - C2745) * C13259 + (C2746 - C2747) * C82925 +
            (C1869 - C1870) * C13261 + (C1871 - C1872) * C82909 +
            (C1873 - C1874) * C13263 + (C1875 - C1876) * C82885) *
               C82893) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C13259 + (C256 - C255) * C82925 +
            (C258 - C257) * C13261 + (C260 - C259) * C82909 +
            (C262 - C261) * C13263 + (C264 - C263) * C82885) *
               C13256 +
           ((C1862 - C1861) * C13259 + (C1864 - C1863) * C82925 +
            (C1866 - C1865) * C13261 + (C1868 - C1867) * C82909 +
            (C6678 - C6677) * C13263 + (C6680 - C6679) * C82885) *
               C13257 +
           ((C1870 - C1869) * C13259 + (C1872 - C1871) * C82925 +
            (C1874 - C1873) * C13261 + (C1876 - C1875) * C82909 +
            (C239 * C1656 - C82592 * C1855) * C13263 +
            (C239 * C1664 - C82592 * C1859) * C82885) *
               C82893) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C15405 +
            (C82592 * C246 - C239 * C109) * C82523) *
               C15400 +
           ((C2740 - C2741) * C15405 + (C2742 - C2743) * C82523) * C15401 +
           ((C2744 - C2745) * C15405 + (C2746 - C2747) * C82523) * C15402 +
           ((C82592 * C2733 - C239 * C2527) * C15405 +
            (C82592 * C2736 - C239 * C2533) * C82523) *
               C15403 +
           ((C82592 * C15508 - C239 * C15407) * C15405 +
            (C82592 * C15510 - C239 * C15410) * C82523) *
               C15404) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C15405 + (C256 - C255) * C82523) * C15400 +
           ((C1862 - C1861) * C15405 + (C1864 - C1863) * C82523) * C15401 +
           ((C1870 - C1869) * C15405 + (C1872 - C1871) * C82523) * C15402 +
           ((C239 * C2526 - C82592 * C2734) * C15405 +
            (C239 * C2531 - C82592 * C2737) * C82523) *
               C15403 +
           ((C239 * C15408 - C82592 * C15509) * C15405 +
            (C239 * C15412 - C82592 * C15511) * C82523) *
               C15404) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
            C82896 * C4299 - C25873 * C4108) *
               C13259 +
           (C25720 * C246 - C25871 * C109 + C25721 * C1270 - C25872 * C1165 +
            C82896 * C4303 - C25873 * C4113) *
               C82925 +
           (C25875 - C25876 + C25877 - C25878 + C25879 - C25880) * C13261 +
           (C25881 - C25882 + C25883 - C25884 + C25885 - C25886) * C82909 +
           (C25887 - C25888 + C25889 - C25890 + C25891 - C25892) * C13263 +
           (C25893 - C25894 + C25895 - C25896 + C25897 - C25898) * C82885) *
              C82581 * C82938 * C82939 * C90 +
          ((C25876 - C25875 + C25878 - C25877 + C25880 - C25879) * C13259 +
           (C25882 - C25881 + C25884 - C25883 + C25886 - C25885) * C82925 +
           (C25888 - C25887 + C25890 - C25889 + C25892 - C25891) * C13261 +
           (C25894 - C25893 + C25896 - C25895 + C25898 - C25897) * C82909 +
           (C25871 * C105 - C25720 * C243 + C25872 * C1152 - C25721 * C1268 +
            C25873 * C4111 - C82896 * C4302) *
               C13263 +
           (C25871 * C115 - C25720 * C249 + C25872 * C1159 - C25721 * C1273 +
            C25873 * C4119 - C82896 * C4306) *
               C82885) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
             C82896 * C4299 - C25873 * C4108) *
                C15405 +
            (C25720 * C246 - C25871 * C109 + C25721 * C1270 - C25872 * C1165 +
             C82896 * C4303 - C25873 * C4113) *
                C82523) *
               C82931 +
           ((C25720 * C805 - C25871 * C695 + C25721 * C3527 - C25872 * C3348 +
             C82896 * C5140 - C25873 * C4976) *
                C15405 +
            (C25720 * C810 - C25871 * C705 + C25721 * C3533 - C25872 * C3360 +
             C82896 * C5143 - C25873 * C4982) *
                C82523) *
               C82916 +
           ((C25720 * C1852 - C25871 * C1653 + C25721 * C3530 - C25872 * C3345 +
             C82896 * C16905 - C25873 * C16745) *
                C15405 +
            (C25720 * C1856 - C25871 * C1658 + C25721 * C3536 - C25872 * C3354 +
             C82896 * C16907 - C25873 * C16748) *
                C82523) *
               C82893) *
              C82938 * C82939 * C90 +
          (((C25876 - C25875 + C25878 - C25877 + C25880 - C25879) * C15405 +
            (C25882 - C25881 + C25884 - C25883 + C25886 - C25885) * C82523) *
               C82931 +
           ((C25871 * C694 - C25720 * C806 + C25872 * C3347 - C25721 * C3528 +
             C25873 * C4975 - C82896 * C5141) *
                C15405 +
            (C25871 * C703 - C25720 * C811 + C25872 * C3358 - C25721 * C3534 +
             C25873 * C4980 - C82896 * C5144) *
                C82523) *
               C82916 +
           ((C25871 * C1654 - C25720 * C1853 + C25872 * C3344 - C25721 * C3531 +
             C25873 * C16746 - C82896 * C16906) *
                C15405 +
            (C25871 * C1660 - C25720 * C1857 + C25872 * C3352 - C25721 * C3537 +
             C25873 * C16750 - C82896 * C16908) *
                C82523) *
               C82893) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
            C82885 * C112 - C1651 * C104) *
               C1743 +
           (C1641 * C316 - C1647 * C310 + C1642 * C317 - C1649 * C311 +
            C82885 * C318 - C1651 * C312) *
               C82931 +
           (C1641 * C704 - C1647 * C695 + C1642 * C702 - C1649 * C694 +
            C82885 * C700 - C1651 * C693) *
               C1744 +
           (C1641 * C862 - C1647 * C857 + C1642 * C863 - C1649 * C858 +
            C82885 * C864 - C1651 * C859) *
               C82916 +
           (C1641 * C1657 - C1647 * C1653 + C1642 * C1659 - C1649 * C1654 +
            C82885 * C1661 - C1651 * C1655) *
               C1745 +
           (C1641 * C1954 - C1647 * C1950 + C1642 * C1955 - C1649 * C1951 +
            C82885 * C1956 - C1651 * C1952) *
               C82893) *
              C82592 * C82938 * C82939 * C90 +
          ((C1647 * C103 - C1641 * C110 + C1649 * C104 - C1642 * C112 +
            C1651 * C105 - C82885 * C114) *
               C1743 +
           (C1647 * C311 - C1641 * C317 + C1649 * C312 - C1642 * C318 +
            C1651 * C313 - C82885 * C319) *
               C82931 +
           (C1647 * C694 - C1641 * C702 + C1649 * C693 - C1642 * C700 +
            C1651 * C692 - C82885 * C698) *
               C1744 +
           (C1647 * C858 - C1641 * C863 + C1649 * C859 - C1642 * C864 +
            C1651 * C860 - C82885 * C865) *
               C82916 +
           (C1647 * C1654 - C1641 * C1659 + C1649 * C1655 - C1642 * C1661 +
            C1651 * C1656 - C82885 * C1663) *
               C1745 +
           (C1647 * C1951 - C1641 * C1955 + C1649 * C1952 - C1642 * C1956 +
            C1651 * C1953 - C82885 * C1957) *
               C82893) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C108 - C92 * C102 + C82 * C110 - C94 * C103 + C83 * C112 -
            C96 * C104 + C84 * C114 - C98 * C105 + C85 * C116 - C100 * C106) *
               C168 +
           (C81 * C316 - C92 * C310 + C82 * C317 - C94 * C311 + C83 * C318 -
            C96 * C312 + C84 * C319 - C98 * C313 + C85 * C320 - C100 * C314) *
               C82581) *
              C82592 * C82938 * C82939 * C90 +
          ((C92 * C103 - C81 * C110 + C94 * C104 - C82 * C112 + C96 * C105 -
            C83 * C114 + C98 * C106 - C84 * C116 + C100 * C107 - C85 * C118) *
               C168 +
           (C92 * C311 - C81 * C317 + C94 * C312 - C82 * C318 + C96 * C313 -
            C83 * C319 + C98 * C314 - C84 * C320 + C100 * C315 - C85 * C321) *
               C82581) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
            C82885 * C112 - C13263 * C104) *
               C13339 +
           (C82925 * C316 - C13259 * C310 + C82909 * C317 - C13261 * C311 +
            C82885 * C318 - C13263 * C312) *
               C13256 +
           (C82925 * C704 - C13259 * C695 + C82909 * C702 - C13261 * C694 +
            C82885 * C700 - C13263 * C693) *
               C13340 +
           (C82925 * C862 - C13259 * C857 + C82909 * C863 - C13261 * C858 +
            C82885 * C864 - C13263 * C859) *
               C13257 +
           (C82925 * C1657 - C13259 * C1653 + C82909 * C1659 - C13261 * C1654 +
            C82885 * C1661 - C13263 * C1655) *
               C13341 +
           (C82925 * C1954 - C13259 * C1950 + C82909 * C1955 - C13261 * C1951 +
            C82885 * C1956 - C13263 * C1952) *
               C82893) *
              C82592 * C82938 * C82939 * C90 +
          ((C13259 * C103 - C82925 * C110 + C13261 * C104 - C82909 * C112 +
            C13263 * C105 - C82885 * C114) *
               C13339 +
           (C13259 * C311 - C82925 * C317 + C13261 * C312 - C82909 * C318 +
            C13263 * C313 - C82885 * C319) *
               C13256 +
           (C13259 * C694 - C82925 * C702 + C13261 * C693 - C82909 * C700 +
            C13263 * C692 - C82885 * C698) *
               C13340 +
           (C13259 * C858 - C82925 * C863 + C13261 * C859 - C82909 * C864 +
            C13263 * C860 - C82885 * C865) *
               C13257 +
           (C13259 * C1654 - C82925 * C1659 + C13261 * C1655 - C82909 * C1661 +
            C13263 * C1656 - C82885 * C1663) *
               C13341 +
           (C13259 * C1951 - C82925 * C1955 + C13261 * C1952 - C82909 * C1956 +
            C13263 * C1953 - C82885 * C1957) *
               C82893) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82523 * C108 - C15405 * C102) * C15457 +
           (C82523 * C316 - C15405 * C310) * C15400 +
           (C82523 * C704 - C15405 * C695) * C15458 +
           (C82523 * C862 - C15405 * C857) * C15401 +
           (C82523 * C1657 - C15405 * C1653) * C15459 +
           (C82523 * C1954 - C15405 * C1950) * C15402 +
           (C82523 * C2532 - C15405 * C2527) * C15460 +
           (C82523 * C2824 - C15405 * C2821) * C15403 +
           (C82523 * C15409 - C15405 * C15407) * C15461 +
           (C82523 * C15556 - C15405 * C15554) * C15404) *
              C82592 * C82938 * C82939 * C90 +
          ((C15405 * C103 - C82523 * C110) * C15457 +
           (C15405 * C311 - C82523 * C317) * C15400 +
           (C15405 * C694 - C82523 * C702) * C15458 +
           (C15405 * C858 - C82523 * C863) * C15401 +
           (C15405 * C1654 - C82523 * C1659) * C15459 +
           (C15405 * C1951 - C82523 * C1955) * C15402 +
           (C15405 * C2526 - C82523 * C2530) * C15460 +
           (C15405 * C2822 - C82523 * C2825) * C15403 +
           (C15405 * C15408 - C82523 * C15411) * C15461 +
           (C15405 * C15555 - C82523 * C15557) * C15404) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C168 +
            (C82925 * C316 - C13259 * C310 + C82909 * C317 - C13261 * C311 +
             C82885 * C318 - C13263 * C312) *
                C82581) *
               C25720 +
           ((C82925 * C1164 - C13259 * C1155 + C82909 * C1162 - C13261 * C1154 +
             C82885 * C1160 - C13263 * C1153) *
                C168 +
            (C82925 * C1322 - C13259 * C1317 + C82909 * C1323 - C13261 * C1318 +
             C82885 * C1324 - C13263 * C1319) *
                C82581) *
               C25721 +
           ((C82925 * C4112 - C13259 * C4108 + C82909 * C4114 - C13261 * C4109 +
             C82885 * C4116 - C13263 * C4110) *
                C168 +
            (C82925 * C4409 - C13259 * C4405 + C82909 * C4410 - C13261 * C4406 +
             C82885 * C4411 - C13263 * C4407) *
                C82581) *
               C82896) *
              C82938 * C82939 * C90 +
          (((C13259 * C103 - C82925 * C110 + C13261 * C104 - C82909 * C112 +
             C13263 * C105 - C82885 * C114) *
                C168 +
            (C13259 * C311 - C82925 * C317 + C13261 * C312 - C82909 * C318 +
             C13263 * C313 - C82885 * C319) *
                C82581) *
               C25720 +
           ((C13259 * C1154 - C82925 * C1162 + C13261 * C1153 - C82909 * C1160 +
             C13263 * C1152 - C82885 * C1158) *
                C168 +
            (C13259 * C1318 - C82925 * C1323 + C13261 * C1319 - C82909 * C1324 +
             C13263 * C1320 - C82885 * C1325) *
                C82581) *
               C25721 +
           ((C13259 * C4109 - C82925 * C4114 + C13261 * C4110 - C82909 * C4116 +
             C13263 * C4111 - C82885 * C4118) *
                C168 +
            (C13259 * C4406 - C82925 * C4410 + C13261 * C4407 - C82909 * C4411 +
             C13263 * C4408 - C82885 * C4412) *
                C82581) *
               C82896) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C1743 +
            (C82523 * C316 - C15405 * C310) * C82931 +
            (C16004 - C16005) * C1744 + (C16006 - C16007) * C82916 +
            (C16008 - C16009) * C1745 + (C16010 - C16011) * C82893) *
               C25720 +
           ((C18542 - C18543) * C1743 + (C18544 - C18545) * C82931 +
            (C17734 - C17735) * C1744 + (C17736 - C17737) * C82916 +
            (C17738 - C17739) * C1745 + (C17740 - C17741) * C82893) *
               C25721 +
           ((C18546 - C18547) * C1743 + (C18548 - C18549) * C82931 +
            (C17742 - C17743) * C1744 + (C17744 - C17745) * C82916 +
            (C17746 - C17747) * C1745 + (C17748 - C17749) * C82893) *
               C82896) *
              C82938 * C82939 * C90 +
          (((C15405 * C103 - C82523 * C110) * C1743 +
            (C15405 * C311 - C82523 * C317) * C82931 +
            (C15405 * C694 - C82523 * C702) * C1744 +
            (C15405 * C858 - C82523 * C863) * C82916 +
            (C15405 * C1654 - C82523 * C1659) * C1745 +
            (C15405 * C1951 - C82523 * C1955) * C82893) *
               C25720 +
           ((C15405 * C1154 - C82523 * C1162) * C1743 +
            (C15405 * C1318 - C82523 * C1323) * C82931 +
            (C15405 * C3347 - C82523 * C3357) * C1744 +
            (C15405 * C3614 - C82523 * C3620) * C82916 +
            (C15405 * C3344 - C82523 * C3351) * C1745 +
            (C15405 * C3617 - C82523 * C3623) * C82893) *
               C25721 +
           ((C15405 * C4109 - C82523 * C4114) * C1743 +
            (C15405 * C4406 - C82523 * C4410) * C82931 +
            (C15405 * C4975 - C82523 * C4979) * C1744 +
            (C15405 * C5221 - C82523 * C5224) * C82916 +
            (C15405 * C16746 - C82523 * C16749) * C1745 +
            (C15405 * C16984 - C82523 * C16986) * C82893) *
               C82896) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1743 * C169 - C2032 * C102 - C1743 * C310 + C82931 * C365 +
            C1744 * C753 - C2033 * C695 - C1744 * C857 + C82916 * C913 +
            C1745 * C1746 - C2034 * C1653 - C1745 * C1950 + C82893 * C2035) *
               C1641 +
           (C2076 + C2077 + C2078) * C1642 + (C2079 + C2080 + C2081) * C82885) *
              C82592 * C82938 * C82939 * C90 -
          ((C1745 * C1749 - C2034 * C1656 - C1745 * C1953 + C82893 * C2038 +
            C1744 * C756 - C2033 * C692 - C1744 * C860 + C82916 * C910 +
            C1743 * C172 - C2032 * C105 - C1743 * C313 + C82931 * C368) *
               C82885 +
           (C2081 + C2080 + C2079) * C1642 + (C2078 + C2077 + C2076) * C1641) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C81 +
           C396 * C82 + C397 * C83 + C398 * C84 + C399 * C85) *
              C82592 * C82938 * C82939 * C90 -
          ((C168 * C174 - C364 * C107 - C168 * C315 + C82581 * C370) * C85 +
           C399 * C84 + C398 * C83 + C397 * C82 + C396 * C81) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13339 * C169 - C13588 * C102 - C13339 * C310 + C13256 * C365 +
            C13340 * C753 - C13589 * C695 - C13340 * C857 + C13257 * C913 +
            C13341 * C1746 - C13590 * C1653 - C13341 * C1950 + C82893 * C2035) *
               C82925 +
           (C13628 + C13629 + C13630) * C82909 +
           (C13631 + C13632 + C13633) * C82885) *
              C82592 * C82938 * C82939 * C90 -
          ((C13341 * C1749 - C13590 * C1656 - C13341 * C1953 + C82893 * C2038 +
            C13340 * C756 - C13589 * C692 - C13340 * C860 + C13257 * C910 +
            C13339 * C172 - C13588 * C105 - C13339 * C313 + C13256 * C368) *
               C82885 +
           (C13633 + C13632 + C13631) * C82909 +
           (C13630 + C13629 + C13628) * C82925) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C15457 * C169 - C15600 * C102 - C15457 * C310 + C15400 * C365 +
           C15458 * C753 - C15601 * C695 - C15458 * C857 + C15401 * C913 +
           C15459 * C1746 - C15602 * C1653 - C15459 * C1950 + C15402 * C2035 +
           C15460 * C2653 - C15603 * C2527 - C15460 * C2821 + C15403 * C2927 +
           C15461 * C15462 - C15604 * C15407 - C15461 * C15554 +
           C15404 * C15605) *
              C82523 * C82592 * C82938 * C82939 * C90 -
          (C15461 * C15463 - C15604 * C15408 - C15461 * C15555 +
           C15404 * C15606 + C15460 * C2654 - C15603 * C2526 - C15460 * C2822 +
           C15403 * C2926 + C15459 * C1747 - C15602 * C1654 - C15459 * C1951 +
           C15402 * C2036 + C15458 * C754 - C15601 * C694 - C15458 * C858 +
           C15401 * C912 + C15457 * C170 - C15600 * C103 - C15457 * C311 +
           C15400 * C366) *
              C82523 * C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C82925 +
            C396 * C82909 + C397 * C82885) *
               C25720 +
           (C6108 * C82925 + C4516 * C82909 + C4517 * C82885) * C25721 +
           (C6109 * C82925 + C4518 * C82909 + C4519 * C82885) * C82896) *
              C82938 * C82939 * C90 -
          (((C168 * C4201 - C364 * C4111 - C168 * C4408 + C82581 * C4490) *
                C82885 +
            C4519 * C82909 + C4518 * C82925) *
               C82896 +
           (C8772 * C82885 + C4517 * C82909 + C4516 * C82925) * C25721 +
           (C398 * C82885 + C397 * C82909 + C396 * C82925) * C25720) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1743 * C169 - C2032 * C102 - C1743 * C310 + C82931 * C365 +
            C1744 * C753 - C2033 * C695 - C1744 * C857 + C82916 * C913 +
            C1745 * C1746 - C2034 * C1653 - C1745 * C1950 + C82893 * C2035) *
               C82523 * C25720 +
           (C1743 * C1213 - C2032 * C1155 - C1743 * C1317 + C82931 * C1373 +
            C1744 * C3441 - C2033 * C3348 - C1744 * C3613 + C82916 * C3704 +
            C1745 * C3442 - C2034 * C3345 - C1745 * C3616 + C82893 * C3703) *
               C82523 * C25721 +
           (C1743 * C4198 - C2032 * C4108 - C1743 * C4405 + C82931 * C4487 +
            C1744 * C5060 - C2033 * C4976 - C1744 * C5220 + C82916 * C5302 +
            C1745 * C16827 - C2034 * C16745 - C1745 * C16983 +
            C82893 * C17061) *
               C82523 * C82896) *
              C82938 * C82939 * C90 -
          ((C1745 * C16828 - C2034 * C16746 - C1745 * C16984 + C82893 * C17062 +
            C1744 * C5061 - C2033 * C4975 - C1744 * C5221 + C82916 * C5301 +
            C1743 * C4199 - C2032 * C4109 - C1743 * C4406 + C82931 * C4488) *
               C82523 * C82896 +
           (C1745 * C3444 - C2034 * C3344 - C1745 * C3617 + C82893 * C3701 +
            C1744 * C3443 - C2033 * C3347 - C1744 * C3614 + C82916 * C3702 +
            C1743 * C1214 - C2032 * C1154 - C1743 * C1318 + C82931 * C1372) *
               C82523 * C25721 +
           (C2078 + C2077 + C2076) * C82523 * C25720) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C1743 +
            (C82592 * C441 - C239 * C310) * C82931 +
            (C82592 * C805 - C239 * C695) * C1744 +
            (C82592 * C956 - C239 * C857) * C82916 +
            (C82592 * C1852 - C239 * C1653) * C1745 +
            (C82592 * C2155 - C239 * C1950) * C82893) *
               C1641 +
           ((C253 - C254) * C1743 + (C448 - C449) * C82931 +
            (C1861 - C1862) * C1744 + (C2160 - C2161) * C82916 +
            (C1869 - C1870) * C1745 + (C2162 - C2163) * C82893) *
               C1642 +
           ((C257 - C258) * C1743 + (C450 - C451) * C82931 +
            (C1865 - C1866) * C1744 + (C2164 - C2165) * C82916 +
            (C1873 - C1874) * C1745 + (C2166 - C2167) * C82893) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C1743 + (C449 - C448) * C82931 +
            (C1862 - C1861) * C1744 + (C2161 - C2160) * C82916 +
            (C1870 - C1869) * C1745 + (C2163 - C2162) * C82893) *
               C1641 +
           ((C258 - C257) * C1743 + (C451 - C450) * C82931 +
            (C1866 - C1865) * C1744 + (C2165 - C2164) * C82916 +
            (C1874 - C1873) * C1745 + (C2167 - C2166) * C82893) *
               C1642 +
           ((C262 - C261) * C1743 + (C453 - C452) * C82931 +
            (C239 * C692 - C82592 * C808) * C1744 +
            (C239 * C860 - C82592 * C959) * C82916 +
            (C239 * C1656 - C82592 * C1855) * C1745 +
            (C239 * C1953 - C82592 * C2158) * C82893) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C168 +
            (C82592 * C441 - C239 * C310) * C82581) *
               C81 +
           ((C253 - C254) * C168 + (C448 - C449) * C82581) * C82 +
           ((C257 - C258) * C168 + (C450 - C451) * C82581) * C83 +
           ((C261 - C262) * C168 + (C452 - C453) * C82581) * C84 +
           ((C265 - C266) * C168 + (C454 - C455) * C82581) * C85) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C168 + (C449 - C448) * C82581) * C81 +
           ((C258 - C257) * C168 + (C451 - C450) * C82581) * C82 +
           ((C262 - C261) * C168 + (C453 - C452) * C82581) * C83 +
           ((C266 - C265) * C168 + (C455 - C454) * C82581) * C84 +
           ((C239 * C107 - C82592 * C245) * C168 +
            (C239 * C315 - C82592 * C446) * C82581) *
               C85) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C13339 +
            (C82592 * C441 - C239 * C310) * C13256 + (C2740 - C2741) * C13340 +
            (C3006 - C3007) * C13257 + (C2744 - C2745) * C13341 +
            (C3008 - C3009) * C82893) *
               C82925 +
           ((C253 - C254) * C13339 + (C448 - C449) * C13256 +
            (C1861 - C1862) * C13340 + (C2160 - C2161) * C13257 +
            (C1869 - C1870) * C13341 + (C2162 - C2163) * C82893) *
               C82909 +
           ((C257 - C258) * C13339 + (C450 - C451) * C13256 +
            (C1865 - C1866) * C13340 + (C2164 - C2165) * C13257 +
            (C1873 - C1874) * C13341 + (C2166 - C2167) * C82893) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C13339 + (C449 - C448) * C13256 +
            (C1862 - C1861) * C13340 + (C2161 - C2160) * C13257 +
            (C1870 - C1869) * C13341 + (C2163 - C2162) * C82893) *
               C82925 +
           ((C258 - C257) * C13339 + (C451 - C450) * C13256 +
            (C1866 - C1865) * C13340 + (C2165 - C2164) * C13257 +
            (C1874 - C1873) * C13341 + (C2167 - C2166) * C82893) *
               C82909 +
           ((C262 - C261) * C13339 + (C453 - C452) * C13256 +
            (C6678 - C6677) * C13340 + (C6924 - C6923) * C13257 +
            (C239 * C1656 - C82592 * C1855) * C13341 +
            (C239 * C1953 - C82592 * C2158) * C82893) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82592 * C240 - C239 * C102) * C15457 +
           (C82592 * C441 - C239 * C310) * C15400 + (C2740 - C2741) * C15458 +
           (C3006 - C3007) * C15401 + (C2744 - C2745) * C15459 +
           (C3008 - C3009) * C15402 + (C82592 * C2733 - C239 * C2527) * C15460 +
           (C82592 * C3002 - C239 * C2821) * C15403 +
           (C82592 * C15508 - C239 * C15407) * C15461 +
           (C82592 * C15649 - C239 * C15554) * C15404) *
              C82523 * C82938 * C82939 * C90 +
          ((C254 - C253) * C15457 + (C449 - C448) * C15400 +
           (C1862 - C1861) * C15458 + (C2161 - C2160) * C15401 +
           (C1870 - C1869) * C15459 + (C2163 - C2162) * C15402 +
           (C239 * C2526 - C82592 * C2734) * C15460 +
           (C239 * C2822 - C82592 * C3003) * C15403 +
           (C239 * C15408 - C82592 * C15509) * C15461 +
           (C239 * C15555 - C82592 * C15650) * C15404) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
             C82896 * C4299 - C25873 * C4108) *
                C168 +
            (C25720 * C441 - C25871 * C310 + C25721 * C1416 - C25872 * C1317 +
             C82896 * C4593 - C25873 * C4405) *
                C82581) *
               C82925 +
           ((C25875 - C25876 + C25877 - C25878 + C25879 - C25880) * C168 +
            (C26121 - C26122 + C26123 - C26124 + C26125 - C26126) * C82581) *
               C82909 +
           ((C25887 - C25888 + C25889 - C25890 + C25891 - C25892) * C168 +
            (C26127 - C26128 + C26129 - C26130 + C26131 - C26132) * C82581) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C25876 - C25875 + C25878 - C25877 + C25880 - C25879) * C168 +
            (C26122 - C26121 + C26124 - C26123 + C26126 - C26125) * C82581) *
               C82925 +
           ((C25888 - C25887 + C25890 - C25889 + C25892 - C25891) * C168 +
            (C26128 - C26127 + C26130 - C26129 + C26132 - C26131) * C82581) *
               C82909 +
           ((C25871 * C105 - C25720 * C243 + C25872 * C1152 - C25721 * C1268 +
             C25873 * C4111 - C82896 * C4302) *
                C168 +
            (C25871 * C313 - C25720 * C444 + C25872 * C1320 - C25721 * C1419 +
             C25873 * C4408 - C82896 * C4596) *
                C82581) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
            C82896 * C4299 - C25873 * C4108) *
               C1743 +
           (C25720 * C441 - C25871 * C310 + C25721 * C1416 - C25872 * C1317 +
            C82896 * C4593 - C25873 * C4405) *
               C82931 +
           (C25720 * C805 - C25871 * C695 + C25721 * C3527 - C25872 * C3348 +
            C82896 * C5140 - C25873 * C4976) *
               C1744 +
           (C25720 * C956 - C25871 * C857 + C25721 * C3779 - C25872 * C3613 +
            C82896 * C5377 - C25873 * C5220) *
               C82916 +
           (C25720 * C1852 - C25871 * C1653 + C25721 * C3530 - C25872 * C3345 +
            C82896 * C16905 - C25873 * C16745) *
               C1745 +
           (C25720 * C2155 - C25871 * C1950 + C25721 * C3780 - C25872 * C3616 +
            C82896 * C17137 - C25873 * C16983) *
               C82893) *
              C82523 * C82938 * C82939 * C90 +
          ((C25876 - C25875 + C25878 - C25877 + C25880 - C25879) * C1743 +
           (C26122 - C26121 + C26124 - C26123 + C26126 - C26125) * C82931 +
           (C25871 * C694 - C25720 * C806 + C25872 * C3347 - C25721 * C3528 +
            C25873 * C4975 - C82896 * C5141) *
               C1744 +
           (C25871 * C858 - C25720 * C957 + C25872 * C3614 - C25721 * C3781 +
            C25873 * C5221 - C82896 * C5378) *
               C82916 +
           (C25871 * C1654 - C25720 * C1853 + C25872 * C3344 - C25721 * C3531 +
            C25873 * C16746 - C82896 * C16906) *
               C1745 +
           (C25871 * C1951 - C25720 * C2156 + C25872 * C3617 - C25721 * C3782 +
            C25873 * C16984 - C82896 * C17138) *
               C82893) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezx[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
             C82885 * C112 - C1651 * C104) *
                C239 +
            (C1641 * C503 - C1647 * C497 + C1642 * C504 - C1649 * C498 +
             C82885 * C505 - C1651 * C499) *
                C82592) *
               C82931 +
           ((C1641 * C704 - C1647 * C695 + C1642 * C702 - C1649 * C694 +
             C82885 * C700 - C1651 * C693) *
                C239 +
            (C1641 * C1008 - C1647 * C1003 + C1642 * C1009 - C1649 * C1004 +
             C82885 * C1010 - C1651 * C1005) *
                C82592) *
               C82916 +
           ((C1641 * C1657 - C1647 * C1653 + C1642 * C1659 - C1649 * C1654 +
             C82885 * C1661 - C1651 * C1655) *
                C239 +
            (C1641 * C2245 - C1647 * C2241 + C1642 * C2246 - C1649 * C2242 +
             C82885 * C2247 - C1651 * C2243) *
                C82592) *
               C82893) *
              C82938 * C82939 * C90 +
          (((C1647 * C103 - C1641 * C110 + C1649 * C104 - C1642 * C112 +
             C1651 * C105 - C82885 * C114) *
                C239 +
            (C1647 * C498 - C1641 * C504 + C1649 * C499 - C1642 * C505 +
             C1651 * C500 - C82885 * C506) *
                C82592) *
               C82931 +
           ((C1647 * C694 - C1641 * C702 + C1649 * C693 - C1642 * C700 +
             C1651 * C692 - C82885 * C698) *
                C239 +
            (C1647 * C1004 - C1641 * C1009 + C1649 * C1005 - C1642 * C1010 +
             C1651 * C1006 - C82885 * C1011) *
                C82592) *
               C82916 +
           ((C1647 * C1654 - C1641 * C1659 + C1649 * C1655 - C1642 * C1661 +
             C1651 * C1656 - C82885 * C1663) *
                C239 +
            (C1647 * C2242 - C1641 * C2246 + C1649 * C2243 - C1642 * C2247 +
             C1651 * C2244 - C82885 * C2248) *
                C82592) *
               C82893) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C108 - C92 * C102 + C82 * C110 - C94 * C103 + C83 * C112 -
            C96 * C104 + C84 * C114 - C98 * C105 + C85 * C116 - C100 * C106) *
               C239 +
           (C81 * C503 - C92 * C497 + C82 * C504 - C94 * C498 + C83 * C505 -
            C96 * C499 + C84 * C506 - C98 * C500 + C85 * C507 - C100 * C501) *
               C82592) *
              C82581 * C82938 * C82939 * C90 +
          ((C92 * C103 - C81 * C110 + C94 * C104 - C82 * C112 + C96 * C105 -
            C83 * C114 + C98 * C106 - C84 * C116 + C100 * C107 - C85 * C118) *
               C239 +
           (C92 * C498 - C81 * C504 + C94 * C499 - C82 * C505 + C96 * C500 -
            C83 * C506 + C98 * C501 - C84 * C507 + C100 * C502 - C85 * C508) *
               C82592) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C239 +
            (C82925 * C503 - C13259 * C497 + C82909 * C504 - C13261 * C498 +
             C82885 * C505 - C13263 * C499) *
                C82592) *
               C13256 +
           ((C82925 * C704 - C13259 * C695 + C82909 * C702 - C13261 * C694 +
             C82885 * C700 - C13263 * C693) *
                C239 +
            (C82925 * C1008 - C13259 * C1003 + C82909 * C1009 - C13261 * C1004 +
             C82885 * C1010 - C13263 * C1005) *
                C82592) *
               C13257 +
           ((C82925 * C1657 - C13259 * C1653 + C82909 * C1659 - C13261 * C1654 +
             C82885 * C1661 - C13263 * C1655) *
                C239 +
            (C82925 * C2245 - C13259 * C2241 + C82909 * C2246 - C13261 * C2242 +
             C82885 * C2247 - C13263 * C2243) *
                C82592) *
               C82893) *
              C82938 * C82939 * C90 +
          (((C13259 * C103 - C82925 * C110 + C13261 * C104 - C82909 * C112 +
             C13263 * C105 - C82885 * C114) *
                C239 +
            (C13259 * C498 - C82925 * C504 + C13261 * C499 - C82909 * C505 +
             C13263 * C500 - C82885 * C506) *
                C82592) *
               C13256 +
           ((C13259 * C694 - C82925 * C702 + C13261 * C693 - C82909 * C700 +
             C13263 * C692 - C82885 * C698) *
                C239 +
            (C13259 * C1004 - C82925 * C1009 + C13261 * C1005 - C82909 * C1010 +
             C13263 * C1006 - C82885 * C1011) *
                C82592) *
               C13257 +
           ((C13259 * C1654 - C82925 * C1659 + C13261 * C1655 - C82909 * C1661 +
             C13263 * C1656 - C82885 * C1663) *
                C239 +
            (C13259 * C2242 - C82925 * C2246 + C13261 * C2243 - C82909 * C2247 +
             C13263 * C2244 - C82885 * C2248) *
                C82592) *
               C82893) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C239 +
            (C82523 * C503 - C15405 * C497) * C82592) *
               C15400 +
           ((C82523 * C704 - C15405 * C695) * C239 +
            (C82523 * C1008 - C15405 * C1003) * C82592) *
               C15401 +
           ((C82523 * C1657 - C15405 * C1653) * C239 +
            (C82523 * C2245 - C15405 * C2241) * C82592) *
               C15402 +
           ((C82523 * C2532 - C15405 * C2527) * C239 +
            (C82523 * C3086 - C15405 * C3083) * C82592) *
               C15403 +
           ((C82523 * C15409 - C15405 * C15407) * C239 +
            (C82523 * C15695 - C15405 * C15693) * C82592) *
               C15404) *
              C82938 * C82939 * C90 +
          (((C15405 * C103 - C82523 * C110) * C239 +
            (C15405 * C498 - C82523 * C504) * C82592) *
               C15400 +
           ((C15405 * C694 - C82523 * C702) * C239 +
            (C15405 * C1004 - C82523 * C1009) * C82592) *
               C15401 +
           ((C15405 * C1654 - C82523 * C1659) * C239 +
            (C15405 * C2242 - C82523 * C2246) * C82592) *
               C15402 +
           ((C15405 * C2526 - C82523 * C2530) * C239 +
            (C15405 * C3084 - C82523 * C3087) * C82592) *
               C15403 +
           ((C15405 * C15408 - C82523 * C15411) * C239 +
            (C15405 * C15694 - C82523 * C15696) * C82592) *
               C15404) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
            C82885 * C112 - C13263 * C104) *
               C25871 +
           (C82925 * C503 - C13259 * C497 + C82909 * C504 - C13261 * C498 +
            C82885 * C505 - C13263 * C499) *
               C25720 +
           (C82925 * C1164 - C13259 * C1155 + C82909 * C1162 - C13261 * C1154 +
            C82885 * C1160 - C13263 * C1153) *
               C25872 +
           (C82925 * C1468 - C13259 * C1463 + C82909 * C1469 - C13261 * C1464 +
            C82885 * C1470 - C13263 * C1465) *
               C25721 +
           (C82925 * C4112 - C13259 * C4108 + C82909 * C4114 - C13261 * C4109 +
            C82885 * C4116 - C13263 * C4110) *
               C25873 +
           (C82925 * C4687 - C13259 * C4683 + C82909 * C4688 - C13261 * C4684 +
            C82885 * C4689 - C13263 * C4685) *
               C82896) *
              C82581 * C82938 * C82939 * C90 +
          ((C13259 * C103 - C82925 * C110 + C13261 * C104 - C82909 * C112 +
            C13263 * C105 - C82885 * C114) *
               C25871 +
           (C13259 * C498 - C82925 * C504 + C13261 * C499 - C82909 * C505 +
            C13263 * C500 - C82885 * C506) *
               C25720 +
           (C13259 * C1154 - C82925 * C1162 + C13261 * C1153 - C82909 * C1160 +
            C13263 * C1152 - C82885 * C1158) *
               C25872 +
           (C13259 * C1464 - C82925 * C1469 + C13261 * C1465 - C82909 * C1470 +
            C13263 * C1466 - C82885 * C1471) *
               C25721 +
           (C13259 * C4109 - C82925 * C4114 + C13261 * C4110 - C82909 * C4116 +
            C13263 * C4111 - C82885 * C4118) *
               C25873 +
           (C13259 * C4684 - C82925 * C4688 + C13261 * C4685 - C82909 * C4689 +
            C13263 * C4686 - C82885 * C4690) *
               C82896) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C25871 +
            (C82523 * C503 - C15405 * C497) * C25720 +
            (C18542 - C18543) * C25872 + (C18822 - C18823) * C25721 +
            (C18546 - C18547) * C25873 + (C18824 - C18825) * C82896) *
               C82931 +
           ((C16004 - C16005) * C25871 + (C16154 - C16155) * C25720 +
            (C17734 - C17735) * C25872 + (C17988 - C17989) * C25721 +
            (C17742 - C17743) * C25873 + (C17990 - C17991) * C82896) *
               C82916 +
           ((C16008 - C16009) * C25871 + (C16156 - C16157) * C25720 +
            (C17738 - C17739) * C25872 + (C17992 - C17993) * C25721 +
            (C17746 - C17747) * C25873 + (C17994 - C17995) * C82896) *
               C82893) *
              C82938 * C82939 * C90 +
          (((C15405 * C103 - C82523 * C110) * C25871 +
            (C15405 * C498 - C82523 * C504) * C25720 +
            (C15405 * C1154 - C82523 * C1162) * C25872 +
            (C15405 * C1464 - C82523 * C1469) * C25721 +
            (C15405 * C4109 - C82523 * C4114) * C25873 +
            (C15405 * C4684 - C82523 * C4688) * C82896) *
               C82931 +
           ((C15405 * C694 - C82523 * C702) * C25871 +
            (C15405 * C1004 - C82523 * C1009) * C25720 +
            (C15405 * C3347 - C82523 * C3357) * C25872 +
            (C15405 * C3860 - C82523 * C3866) * C25721 +
            (C15405 * C4975 - C82523 * C4979) * C25873 +
            (C15405 * C5455 - C82523 * C5458) * C82896) *
               C82916 +
           ((C15405 * C1654 - C82523 * C1659) * C25871 +
            (C15405 * C2242 - C82523 * C2246) * C25720 +
            (C15405 * C3344 - C82523 * C3351) * C25872 +
            (C15405 * C3863 - C82523 * C3869) * C25721 +
            (C15405 * C16746 - C82523 * C16749) * C25873 +
            (C15405 * C17214 - C82523 * C17216) * C82896) *
               C82893) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
             C82893 * C1746 - C1745 * C1653) *
                C239 +
            (C82931 * C551 - C1743 * C497 + C82916 * C1055 - C1744 * C1003 +
             C82893 * C2323 - C1745 * C2241) *
                C82592) *
               C1641 +
           ((C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C239 +
            (C2328 - C2329 + C2330 - C2331 + C2332 - C2333) * C82592) *
               C1642 +
           ((C1767 - C1768 + C1769 - C1770 + C1771 - C1772) * C239 +
            (C2334 - C2335 + C2336 - C2337 + C2338 - C2339) * C82592) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C1756 - C1755 + C1758 - C1757 + C1760 - C1759) * C239 +
            (C2329 - C2328 + C2331 - C2330 + C2333 - C2332) * C82592) *
               C1641 +
           ((C1768 - C1767 + C1770 - C1769 + C1772 - C1771) * C239 +
            (C2335 - C2334 + C2337 - C2336 + C2339 - C2338) * C82592) *
               C1642 +
           ((C1743 * C105 - C82931 * C172 + C1744 * C692 - C82916 * C756 +
             C1745 * C1656 - C82893 * C1749) *
                C239 +
            (C1743 * C500 - C82931 * C554 + C1744 * C1006 - C82916 * C1058 +
             C1745 * C2244 - C82893 * C2326) *
                C82592) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C239 +
            (C82581 * C551 - C168 * C497) * C82592) *
               C81 +
           ((C182 - C183) * C239 + (C558 - C559) * C82592) * C82 +
           ((C186 - C187) * C239 + (C560 - C561) * C82592) * C83 +
           ((C190 - C191) * C239 + (C562 - C563) * C82592) * C84 +
           ((C194 - C195) * C239 + (C564 - C565) * C82592) * C85) *
              C82938 * C82939 * C90 +
          (((C183 - C182) * C239 + (C559 - C558) * C82592) * C81 +
           ((C187 - C186) * C239 + (C561 - C560) * C82592) * C82 +
           ((C191 - C190) * C239 + (C563 - C562) * C82592) * C83 +
           ((C195 - C194) * C239 + (C565 - C564) * C82592) * C84 +
           ((C168 * C107 - C82581 * C174) * C239 +
            (C168 * C502 - C82581 * C556) * C82592) *
               C85) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C239 +
            (C13256 * C551 - C13339 * C497 + C13257 * C1055 - C13340 * C1003 +
             C82893 * C2323 - C13341 * C2241) *
                C82592) *
               C82925 +
           ((C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C239 +
            (C13856 - C13857 + C13858 - C13859 + C13860 - C13861) * C82592) *
               C82909 +
           ((C13355 - C13356 + C13357 - C13358 + C13359 - C13360) * C239 +
            (C13862 - C13863 + C13864 - C13865 + C13866 - C13867) * C82592) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C13344 - C13343 + C13346 - C13345 + C13348 - C13347) * C239 +
            (C13857 - C13856 + C13859 - C13858 + C13861 - C13860) * C82592) *
               C82925 +
           ((C13356 - C13355 + C13358 - C13357 + C13360 - C13359) * C239 +
            (C13863 - C13862 + C13865 - C13864 + C13867 - C13866) * C82592) *
               C82909 +
           ((C13339 * C105 - C13256 * C172 + C13340 * C692 - C13257 * C756 +
             C13341 * C1656 - C82893 * C1749) *
                C239 +
            (C13339 * C500 - C13256 * C554 + C13340 * C1006 - C13257 * C1058 +
             C13341 * C2244 - C82893 * C2326) *
                C82592) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15400 * C169 - C15457 * C102 + C15401 * C753 - C15458 * C695 +
            C15402 * C1746 - C15459 * C1653 + C15403 * C2653 - C15460 * C2527 +
            C15404 * C15462 - C15461 * C15407) *
               C239 +
           (C15400 * C551 - C15457 * C497 + C15401 * C1055 - C15458 * C1003 +
            C15402 * C2323 - C15459 * C2241 + C15403 * C3175 - C15460 * C3083 +
            C15404 * C15739 - C15461 * C15693) *
               C82592) *
              C82523 * C82938 * C82939 * C90 +
          ((C15457 * C103 - C15400 * C170 + C15458 * C694 - C15401 * C754 +
            C15459 * C1654 - C15402 * C1747 + C15460 * C2526 - C15403 * C2654 +
            C15461 * C15408 - C15404 * C15463) *
               C239 +
           (C15457 * C498 - C15400 * C552 + C15458 * C1004 - C15401 * C1056 +
            C15459 * C2242 - C15402 * C2324 + C15460 * C3084 - C15403 * C3176 +
            C15461 * C15694 - C15404 * C15740) *
               C82592) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C25871 +
            (C82581 * C551 - C168 * C497) * C25720 + (C5823 - C5824) * C25872 +
            (C6358 - C6359) * C25721 + (C5827 - C5828) * C25873 +
            (C6360 - C6361) * C82896) *
               C82925 +
           ((C182 - C183) * C25871 + (C558 - C559) * C25720 +
            (C4207 - C4208) * C25872 + (C4770 - C4771) * C25721 +
            (C4215 - C4216) * C25873 + (C4772 - C4773) * C82896) *
               C82909 +
           ((C186 - C187) * C25871 + (C560 - C561) * C25720 +
            (C4211 - C4212) * C25872 + (C4774 - C4775) * C25721 +
            (C4219 - C4220) * C25873 + (C4776 - C4777) * C82896) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C183 - C182) * C25871 + (C559 - C558) * C25720 +
            (C4208 - C4207) * C25872 + (C4771 - C4770) * C25721 +
            (C4216 - C4215) * C25873 + (C4773 - C4772) * C82896) *
               C82925 +
           ((C187 - C186) * C25871 + (C561 - C560) * C25720 +
            (C4212 - C4211) * C25872 + (C4775 - C4774) * C25721 +
            (C4220 - C4219) * C25873 + (C4777 - C4776) * C82896) *
               C82909 +
           ((C191 - C190) * C25871 + (C563 - C562) * C25720 +
            (C8539 - C8538) * C25872 + (C8984 - C8983) * C25721 +
            (C168 * C4111 - C82581 * C4201) * C25873 +
            (C168 * C4686 - C82581 * C4768) * C82896) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
            C82893 * C1746 - C1745 * C1653) *
               C25871 +
           (C82931 * C551 - C1743 * C497 + C82916 * C1055 - C1744 * C1003 +
            C82893 * C2323 - C1745 * C2241) *
               C25720 +
           (C82931 * C1213 - C1743 * C1155 + C82916 * C3441 - C1744 * C3348 +
            C82893 * C3442 - C1745 * C3345) *
               C25872 +
           (C82931 * C1515 - C1743 * C1463 + C82916 * C3945 - C1744 * C3859 +
            C82893 * C3946 - C1745 * C3862) *
               C25721 +
           (C82931 * C4198 - C1743 * C4108 + C82916 * C5060 - C1744 * C4976 +
            C82893 * C16827 - C1745 * C16745) *
               C25873 +
           (C82931 * C4765 - C1743 * C4683 + C82916 * C5534 - C1744 * C5454 +
            C82893 * C17291 - C1745 * C17213) *
               C82896) *
              C82523 * C82938 * C82939 * C90 +
          ((C1756 - C1755 + C1758 - C1757 + C1760 - C1759) * C25871 +
           (C2329 - C2328 + C2331 - C2330 + C2333 - C2332) * C25720 +
           (C1743 * C1154 - C82931 * C1214 + C1744 * C3347 - C82916 * C3443 +
            C1745 * C3344 - C82893 * C3444) *
               C25872 +
           (C1743 * C1464 - C82931 * C1516 + C1744 * C3860 - C82916 * C3947 +
            C1745 * C3863 - C82893 * C3948) *
               C25721 +
           (C1743 * C4109 - C82931 * C4199 + C1744 * C4975 - C82916 * C5061 +
            C1745 * C16746 - C82893 * C16828) *
               C25873 +
           (C1743 * C4684 - C82931 * C4766 + C1744 * C5455 - C82916 * C5535 +
            C1745 * C17214 - C82893 * C17292) *
               C82896) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82931 +
            (C239 * C805 - C607 * C695 - C239 * C1003 + C82592 * C1106) *
                C82916 +
            (C239 * C1852 - C607 * C1653 - C239 * C2241 + C82592 * C2413) *
                C82893) *
               C1641 +
           (C2418 + C2448 + C2449) * C1642 + (C2427 + C2450 + C2451) * C82885) *
              C82938 * C82939 * C90 -
          (((C239 * C1855 - C607 * C1656 - C239 * C2244 + C82592 * C2416) *
                C82893 +
            (C239 * C808 - C607 * C692 - C239 * C1006 + C82592 * C1103) *
                C82916 +
            C641 * C82931) *
               C82885 +
           (C2451 + C2450 + C2427) * C1642 + (C2449 + C2448 + C2418) * C1641) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82581 *
               C81 +
           C643 * C82 + C644 * C83 + C645 * C84 + C646 * C85) *
              C82938 * C82939 * C90 -
          ((C239 * C245 - C607 * C107 - C239 * C502 + C82592 * C613) * C82581 *
               C85 +
           C646 * C84 + C645 * C83 + C644 * C82 + C643 * C81) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C13256 +
            C3268 * C13257 + C3269 * C82893) *
               C82925 +
           (C13942 + C13943 + C13944) * C82909 +
           (C13945 + C13946 + C13947) * C82885) *
              C82938 * C82939 * C90 -
          (((C239 * C1855 - C607 * C1656 - C239 * C2244 + C82592 * C2416) *
                C82893 +
            C7146 * C13257 + C641 * C13256) *
               C82885 +
           (C13947 + C13946 + C13945) * C82909 +
           (C13944 + C13943 + C13942) * C82925) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C15400 +
           C3268 * C15401 + C3269 * C15402 +
           (C239 * C2733 - C607 * C2527 - C239 * C3083 + C82592 * C3254) *
               C15403 +
           (C239 * C15508 - C607 * C15407 - C239 * C15693 + C82592 * C15783) *
               C15404) *
              C82523 * C82938 * C82939 * C90 -
          ((C239 * C15509 - C607 * C15408 - C239 * C15694 + C82592 * C15784) *
               C15404 +
           (C239 * C2734 - C607 * C2526 - C239 * C3084 + C82592 * C3253) *
               C15403 +
           C2445 * C15402 + C2444 * C15401 + C639 * C15400) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C25871 * C240 - C26354 * C102 - C25871 * C497 + C25720 * C608 +
            C25872 * C1265 - C26355 * C1155 - C25872 * C1463 + C25721 * C1566 +
            C25873 * C4299 - C26356 * C4108 - C25873 * C4683 + C82896 * C4854) *
               C82581 * C82925 +
           (C26394 + C26395 + C26396) * C82581 * C82909 +
           (C26397 + C26398 + C26399) * C82581 * C82885) *
              C82938 * C82939 * C90 -
          ((C25873 * C4302 - C26356 * C4111 - C25873 * C4686 + C82896 * C4857 +
            C25872 * C1268 - C26355 * C1152 - C25872 * C1466 + C25721 * C1563 +
            C25871 * C243 - C26354 * C105 - C25871 * C500 + C25720 * C611) *
               C82581 * C82885 +
           (C26399 + C26398 + C26397) * C82581 * C82909 +
           (C26396 + C26395 + C26394) * C82581 * C82925) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C25871 * C240 - C26354 * C102 - C25871 * C497 + C25720 * C608 +
            C25872 * C1265 - C26355 * C1155 - C25872 * C1463 + C25721 * C1566 +
            C25873 * C4299 - C26356 * C4108 - C25873 * C4683 + C82896 * C4854) *
               C82931 +
           (C25871 * C805 - C26354 * C695 - C25871 * C1003 + C25720 * C1106 +
            C25872 * C3527 - C26355 * C3348 - C25872 * C3859 + C25721 * C4030 +
            C25873 * C5140 - C26356 * C4976 - C25873 * C5454 + C82896 * C5613) *
               C82916 +
           (C25871 * C1852 - C26354 * C1653 - C25871 * C2241 + C25720 * C2413 +
            C25872 * C3530 - C26355 * C3345 - C25872 * C3862 + C25721 * C4029 +
            C25873 * C16905 - C26356 * C16745 - C25873 * C17213 +
            C82896 * C17367) *
               C82893) *
              C82523 * C82938 * C82939 * C90 -
          ((C25873 * C16906 - C26356 * C16746 - C25873 * C17214 +
            C82896 * C17368 + C25872 * C3531 - C26355 * C3344 - C25872 * C3863 +
            C25721 * C4027 + C25871 * C1853 - C26354 * C1654 - C25871 * C2242 +
            C25720 * C2414) *
               C82893 +
           (C25873 * C5141 - C26356 * C4975 - C25873 * C5455 + C82896 * C5612 +
            C25872 * C3528 - C26355 * C3347 - C25872 * C3860 + C25721 * C4028 +
            C25871 * C806 - C26354 * C694 - C25871 * C1004 + C25720 * C1105) *
               C82916 +
           (C26396 + C26395 + C26394) * C82931) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexx[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1647 * C108 - C1648 * C102 - C1647 * C109 + C1641 * C120 +
            C1649 * C110 - C1650 * C103 - C1649 * C111 + C1642 * C121 +
            C1651 * C112 - C1652 * C104 - C1651 * C113 + C82885 * C122) *
               C82592 * C82931 +
           (C2574 + C2575 + C2576) * C82592 * C82916 +
           (C2577 + C2578 + C2579) * C82592 * C82893) *
              C82938 * C688 -
          ((C1651 * C2528 - C1652 * C2525 - C1651 * C2529 + C82885 * C2534 +
            C1649 * C2530 - C1650 * C2526 - C1649 * C2531 + C1642 * C2535 +
            C1647 * C2532 - C1648 * C2527 - C1647 * C2533 + C1641 * C2536) *
               C82592 * C82893 +
           (C2579 + C2578 + C2577) * C82592 * C82916 +
           (C2576 + C2575 + C2574) * C82592 * C82931) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C92 * C108 - C93 * C102 - C92 * C109 + C81 * C120 + C94 * C110 -
           C95 * C103 - C94 * C111 + C82 * C121 + C96 * C112 - C97 * C104 -
           C96 * C113 + C83 * C122 + C98 * C114 - C99 * C105 - C98 * C115 +
           C84 * C123 + C100 * C116 - C101 * C106 - C100 * C117 + C85 * C124) *
              C82592 * C82581 * C82938 * C688 -
          (C100 * C696 - C101 * C691 - C100 * C697 + C85 * C706 + C98 * C698 -
           C99 * C692 - C98 * C699 + C84 * C707 + C96 * C700 - C97 * C693 -
           C96 * C701 + C83 * C708 + C94 * C702 - C95 * C694 - C94 * C703 +
           C82 * C709 + C92 * C704 - C93 * C695 - C92 * C705 + C81 * C710) *
              C82592 * C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13259 * C108 - C13260 * C102 - C13259 * C109 + C82925 * C120 +
            C13261 * C110 - C13262 * C103 - C13261 * C111 + C82909 * C121 +
            C13263 * C112 - C13264 * C104 - C13263 * C113 + C82885 * C122) *
               C82592 * C13256 +
           (C14058 + C14059 + C14060) * C82592 * C13257 +
           (C14061 + C14062 + C14063) * C82592 * C82893) *
              C82938 * C688 -
          ((C13263 * C2528 - C13264 * C2525 - C13263 * C2529 + C82885 * C2534 +
            C13261 * C2530 - C13262 * C2526 - C13261 * C2531 + C82909 * C2535 +
            C13259 * C2532 - C13260 * C2527 - C13259 * C2533 + C82925 * C2536) *
               C82592 * C82893 +
           (C14063 + C14062 + C14061) * C82592 * C13257 +
           (C14060 + C14059 + C14058) * C82592 * C13256) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
               C82592 * C15400 +
           C15860 * C15401 + C15861 * C15402 + C15862 * C15403 +
           C15863 * C15404) *
              C82938 * C688 -
          ((C15405 * C15828 - C15406 * C15827 - C15405 * C15829 +
            C82523 * C15830) *
               C82592 * C15404 +
           C15863 * C15403 + C15862 * C15402 + C15861 * C15401 +
           C15860 * C15400) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13259 * C108 - C13260 * C102 - C13259 * C109 + C82925 * C120 +
            C13261 * C110 - C13262 * C103 - C13261 * C111 + C82909 * C121 +
            C13263 * C112 - C13264 * C104 - C13263 * C113 + C82885 * C122) *
               C25720 +
           (C13259 * C1164 - C13260 * C1155 - C13259 * C1165 + C82925 * C1170 +
            C13261 * C1162 - C13262 * C1154 - C13261 * C1163 + C82909 * C1169 +
            C13263 * C1160 - C13264 * C1153 - C13263 * C1161 + C82885 * C1168) *
               C25721 +
           (C13259 * C4112 - C13260 * C4108 - C13259 * C4113 + C82925 * C4120 +
            C13261 * C4114 - C13262 * C4109 - C13261 * C4115 + C82909 * C4121 +
            C13263 * C4116 - C13264 * C4110 - C13263 * C4117 + C82885 * C4122) *
               C82896) *
              C82581 * C82938 * C688 -
          ((C13263 * C4977 - C13264 * C4974 - C13263 * C4978 + C82885 * C4983 +
            C13261 * C4979 - C13262 * C4975 - C13261 * C4980 + C82909 * C4984 +
            C13259 * C4981 - C13260 * C4976 - C13259 * C4982 + C82925 * C4985) *
               C82896 +
           (C13263 * C3355 - C13264 * C3346 - C13263 * C3356 + C82885 * C3364 +
            C13261 * C3357 - C13262 * C3347 - C13261 * C3358 + C82909 * C3365 +
            C13259 * C3359 - C13260 * C3348 - C13259 * C3360 + C82925 * C3366) *
               C25721 +
           (C14060 + C14059 + C14058) * C25720) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C25720 +
            C18282 * C25721 + C18283 * C82896) *
               C82931 +
           (C28556 + C28557 + C28558) * C82916 +
           (C28559 + C28560 + C28561) * C82893) *
              C82938 * C688 -
          (((C15405 * C17444 - C15406 * C17443 - C15405 * C17445 +
             C82523 * C17446) *
                C82896 +
            C24439 * C25721 + C15858 * C25720) *
               C82893 +
           (C28561 + C28560 + C28559) * C82916 +
           (C28558 + C28557 + C28556) * C82931) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
            C82893 * C1746 - C1745 * C1653) *
               C1647 +
           (C82931 * C175 - C1743 * C109 + C82916 * C758 - C1744 * C705 +
            C82893 * C1750 - C1745 * C1658) *
               C1641 +
           (C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C1649 +
           (C1761 - C1762 + C1763 - C1764 + C1765 - C1766) * C1642 +
           (C1767 - C1768 + C1769 - C1770 + C1771 - C1772) * C1651 +
           (C1773 - C1774 + C1775 - C1776 + C1777 - C1778) * C82885) *
              C82592 * C82938 * C688 +
          ((C1743 * C695 - C82931 * C753 + C1744 * C1653 - C82916 * C1746 +
            C1745 * C2527 - C82893 * C2653) *
               C1647 +
           (C1743 * C705 - C82931 * C758 + C1744 * C1658 - C82916 * C1750 +
            C1745 * C2533 - C82893 * C2656) *
               C1641 +
           (C1743 * C694 - C82931 * C754 + C1744 * C1654 - C82916 * C1747 +
            C1745 * C2526 - C82893 * C2654) *
               C1649 +
           (C1743 * C703 - C82931 * C759 + C1744 * C1660 - C82916 * C1751 +
            C1745 * C2531 - C82893 * C2657) *
               C1642 +
           (C1743 * C693 - C82931 * C755 + C1744 * C1655 - C82916 * C1748 +
            C1745 * C2525 - C82893 * C2655) *
               C1651 +
           (C1743 * C701 - C82931 * C760 + C1744 * C1662 - C82916 * C1752 +
            C1745 * C2529 - C82893 * C2658) *
               C82885) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82581 * C169 - C168 * C102) * C92 +
           (C82581 * C175 - C168 * C109) * C81 + (C182 - C183) * C94 +
           (C184 - C185) * C82 + (C186 - C187) * C96 + (C188 - C189) * C83 +
           (C190 - C191) * C98 + (C192 - C193) * C84 + (C194 - C195) * C100 +
           (C196 - C197) * C85) *
              C82592 * C82938 * C688 +
          ((C168 * C695 - C82581 * C753) * C92 +
           (C168 * C705 - C82581 * C758) * C81 +
           (C168 * C694 - C82581 * C754) * C94 +
           (C168 * C703 - C82581 * C759) * C82 +
           (C168 * C693 - C82581 * C755) * C96 +
           (C168 * C701 - C82581 * C760) * C83 +
           (C168 * C692 - C82581 * C756) * C98 +
           (C168 * C699 - C82581 * C761) * C84 +
           (C168 * C691 - C82581 * C757) * C100 +
           (C168 * C697 - C82581 * C762) * C85) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
            C82893 * C1746 - C13341 * C1653) *
               C13259 +
           (C13256 * C175 - C13339 * C109 + C13257 * C758 - C13340 * C705 +
            C82893 * C1750 - C13341 * C1658) *
               C82925 +
           (C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C13261 +
           (C13349 - C13350 + C13351 - C13352 + C13353 - C13354) * C82909 +
           (C13355 - C13356 + C13357 - C13358 + C13359 - C13360) * C13263 +
           (C13361 - C13362 + C13363 - C13364 + C13365 - C13366) * C82885) *
              C82592 * C82938 * C688 +
          ((C13339 * C695 - C13256 * C753 + C13340 * C1653 - C13257 * C1746 +
            C13341 * C2527 - C82893 * C2653) *
               C13259 +
           (C13339 * C705 - C13256 * C758 + C13340 * C1658 - C13257 * C1750 +
            C13341 * C2533 - C82893 * C2656) *
               C82925 +
           (C13339 * C694 - C13256 * C754 + C13340 * C1654 - C13257 * C1747 +
            C13341 * C2526 - C82893 * C2654) *
               C13261 +
           (C13339 * C703 - C13256 * C759 + C13340 * C1660 - C13257 * C1751 +
            C13341 * C2531 - C82893 * C2657) *
               C82909 +
           (C13339 * C693 - C13256 * C755 + C13340 * C1655 - C13257 * C1748 +
            C13341 * C2525 - C82893 * C2655) *
               C13263 +
           (C13339 * C701 - C13256 * C760 + C13340 * C1662 - C13257 * C1752 +
            C13341 * C2529 - C82893 * C2658) *
               C82885) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15400 * C169 - C15457 * C102 + C15401 * C753 - C15458 * C695 +
            C15402 * C1746 - C15459 * C1653 + C15403 * C2653 - C15460 * C2527 +
            C15404 * C15462 - C15461 * C15407) *
               C15405 +
           (C15400 * C175 - C15457 * C109 + C15401 * C758 - C15458 * C705 +
            C15402 * C1750 - C15459 * C1658 + C15403 * C2656 - C15460 * C2533 +
            C15404 * C15464 - C15461 * C15410) *
               C82523) *
              C82592 * C82938 * C688 +
          ((C15457 * C695 - C15400 * C753 + C15458 * C1653 - C15401 * C1746 +
            C15459 * C2527 - C15402 * C2653 + C15460 * C15407 -
            C15403 * C15462 + C15461 * C15827 - C15404 * C15905) *
               C15405 +
           (C15457 * C705 - C15400 * C758 + C15458 * C1658 - C15401 * C1750 +
            C15459 * C2533 - C15402 * C2656 + C15460 * C15410 -
            C15403 * C15464 + C15461 * C15829 - C15404 * C15906) *
               C82523) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C13259 +
            (C82581 * C175 - C168 * C109) * C82925 + (C182 - C183) * C13261 +
            (C184 - C185) * C82909 + (C186 - C187) * C13263 +
            (C188 - C189) * C82885) *
               C25720 +
           ((C5823 - C5824) * C13259 + (C5825 - C5826) * C82925 +
            (C4207 - C4208) * C13261 + (C4209 - C4210) * C82909 +
            (C4211 - C4212) * C13263 + (C4213 - C4214) * C82885) *
               C25721 +
           ((C5827 - C5828) * C13259 + (C5829 - C5830) * C82925 +
            (C4215 - C4216) * C13261 + (C4217 - C4218) * C82909 +
            (C4219 - C4220) * C13263 + (C4221 - C4222) * C82885) *
               C82896) *
              C82938 * C688 +
          (((C168 * C695 - C82581 * C753) * C13259 +
            (C168 * C705 - C82581 * C758) * C82925 +
            (C168 * C694 - C82581 * C754) * C13261 +
            (C168 * C703 - C82581 * C759) * C82909 +
            (C168 * C693 - C82581 * C755) * C13263 +
            (C168 * C701 - C82581 * C760) * C82885) *
               C25720 +
           ((C168 * C3348 - C82581 * C3441) * C13259 +
            (C168 * C3360 - C82581 * C3447) * C82925 +
            (C168 * C3347 - C82581 * C3443) * C13261 +
            (C168 * C3358 - C82581 * C3449) * C82909 +
            (C168 * C3346 - C82581 * C3445) * C13263 +
            (C168 * C3356 - C82581 * C3451) * C82885) *
               C25721 +
           ((C168 * C4976 - C82581 * C5060) * C13259 +
            (C168 * C4982 - C82581 * C5063) * C82925 +
            (C168 * C4975 - C82581 * C5061) * C13261 +
            (C168 * C4980 - C82581 * C5064) * C82909 +
            (C168 * C4974 - C82581 * C5062) * C13263 +
            (C168 * C4978 - C82581 * C5065) * C82885) *
               C82896) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
             C82893 * C1746 - C1745 * C1653) *
                C15405 +
            (C82931 * C175 - C1743 * C109 + C82916 * C758 - C1744 * C705 +
             C82893 * C1750 - C1745 * C1658) *
                C82523) *
               C25720 +
           ((C82931 * C1213 - C1743 * C1155 + C82916 * C3441 - C1744 * C3348 +
             C82893 * C3442 - C1745 * C3345) *
                C15405 +
            (C82931 * C1218 - C1743 * C1165 + C82916 * C3447 - C1744 * C3360 +
             C82893 * C3448 - C1745 * C3354) *
                C82523) *
               C25721 +
           ((C82931 * C4198 - C1743 * C4108 + C82916 * C5060 - C1744 * C4976 +
             C82893 * C16827 - C1745 * C16745) *
                C15405 +
            (C82931 * C4202 - C1743 * C4113 + C82916 * C5063 - C1744 * C4982 +
             C82893 * C16829 - C1745 * C16748) *
                C82523) *
               C82896) *
              C82938 * C688 +
          (((C1743 * C695 - C82931 * C753 + C1744 * C1653 - C82916 * C1746 +
             C1745 * C2527 - C82893 * C2653) *
                C15405 +
            (C1743 * C705 - C82931 * C758 + C1744 * C1658 - C82916 * C1750 +
             C1745 * C2533 - C82893 * C2656) *
                C82523) *
               C25720 +
           ((C1743 * C3348 - C82931 * C3441 + C1744 * C3345 - C82916 * C3442 +
             C1745 * C16304 - C82893 * C16353) *
                C15405 +
            (C1743 * C3360 - C82931 * C3447 + C1744 * C3354 - C82916 * C3448 +
             C1745 * C16308 - C82893 * C16355) *
                C82523) *
               C25721 +
           ((C1743 * C4976 - C82931 * C5060 + C1744 * C16745 - C82916 * C16827 +
             C1745 * C17443 - C82893 * C17555) *
                C15405 +
            (C1743 * C4982 - C82931 * C5063 + C1744 * C16748 - C82916 * C16829 +
             C1745 * C17445 - C82893 * C17556) *
                C82523) *
               C82896) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C1647 +
            (C82592 * C246 - C239 * C109) * C1641 + (C253 - C254) * C1649 +
            (C255 - C256) * C1642 + (C257 - C258) * C1651 +
            (C259 - C260) * C82885) *
               C82931 +
           ((C2740 - C2741) * C1647 + (C2742 - C2743) * C1641 +
            (C1861 - C1862) * C1649 + (C1863 - C1864) * C1642 +
            (C1865 - C1866) * C1651 + (C1867 - C1868) * C82885) *
               C82916 +
           ((C2744 - C2745) * C1647 + (C2746 - C2747) * C1641 +
            (C1869 - C1870) * C1649 + (C1871 - C1872) * C1642 +
            (C1873 - C1874) * C1651 + (C1875 - C1876) * C82885) *
               C82893) *
              C82938 * C688 +
          (((C2741 - C2740) * C1647 + (C2743 - C2742) * C1641 +
            (C1862 - C1861) * C1649 + (C1864 - C1863) * C1642 +
            (C1866 - C1865) * C1651 + (C1868 - C1867) * C82885) *
               C82931 +
           ((C2745 - C2744) * C1647 + (C2747 - C2746) * C1641 +
            (C1870 - C1869) * C1649 + (C1872 - C1871) * C1642 +
            (C1874 - C1873) * C1651 + (C1876 - C1875) * C82885) *
               C82916 +
           ((C239 * C2527 - C82592 * C2733) * C1647 +
            (C239 * C2533 - C82592 * C2736) * C1641 +
            (C239 * C2526 - C82592 * C2734) * C1649 +
            (C239 * C2531 - C82592 * C2737) * C1642 +
            (C239 * C2525 - C82592 * C2735) * C1651 +
            (C239 * C2529 - C82592 * C2738) * C82885) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82592 * C240 - C239 * C102) * C92 +
           (C82592 * C246 - C239 * C109) * C81 + (C253 - C254) * C94 +
           (C255 - C256) * C82 + (C257 - C258) * C96 + (C259 - C260) * C83 +
           (C261 - C262) * C98 + (C263 - C264) * C84 + (C265 - C266) * C100 +
           (C267 - C268) * C85) *
              C82581 * C82938 * C688 +
          ((C239 * C695 - C82592 * C805) * C92 +
           (C239 * C705 - C82592 * C810) * C81 +
           (C239 * C694 - C82592 * C806) * C94 +
           (C239 * C703 - C82592 * C811) * C82 +
           (C239 * C693 - C82592 * C807) * C96 +
           (C239 * C701 - C82592 * C812) * C83 +
           (C239 * C692 - C82592 * C808) * C98 +
           (C239 * C699 - C82592 * C813) * C84 +
           (C239 * C691 - C82592 * C809) * C100 +
           (C239 * C697 - C82592 * C814) * C85) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C13259 +
            (C82592 * C246 - C239 * C109) * C82925 + (C253 - C254) * C13261 +
            (C255 - C256) * C82909 + (C257 - C258) * C13263 +
            (C259 - C260) * C82885) *
               C13256 +
           ((C2740 - C2741) * C13259 + (C2742 - C2743) * C82925 +
            (C1861 - C1862) * C13261 + (C1863 - C1864) * C82909 +
            (C1865 - C1866) * C13263 + (C1867 - C1868) * C82885) *
               C13257 +
           ((C2744 - C2745) * C13259 + (C2746 - C2747) * C82925 +
            (C1869 - C1870) * C13261 + (C1871 - C1872) * C82909 +
            (C1873 - C1874) * C13263 + (C1875 - C1876) * C82885) *
               C82893) *
              C82938 * C688 +
          (((C2741 - C2740) * C13259 + (C2743 - C2742) * C82925 +
            (C1862 - C1861) * C13261 + (C1864 - C1863) * C82909 +
            (C1866 - C1865) * C13263 + (C1868 - C1867) * C82885) *
               C13256 +
           ((C2745 - C2744) * C13259 + (C2747 - C2746) * C82925 +
            (C1870 - C1869) * C13261 + (C1872 - C1871) * C82909 +
            (C1874 - C1873) * C13263 + (C1876 - C1875) * C82885) *
               C13257 +
           ((C239 * C2527 - C82592 * C2733) * C13259 +
            (C239 * C2533 - C82592 * C2736) * C82925 +
            (C239 * C2526 - C82592 * C2734) * C13261 +
            (C239 * C2531 - C82592 * C2737) * C82909 +
            (C239 * C2525 - C82592 * C2735) * C13263 +
            (C239 * C2529 - C82592 * C2738) * C82885) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C15405 +
            (C82592 * C246 - C239 * C109) * C82523) *
               C15400 +
           ((C2740 - C2741) * C15405 + (C2742 - C2743) * C82523) * C15401 +
           ((C2744 - C2745) * C15405 + (C2746 - C2747) * C82523) * C15402 +
           ((C15952 - C15953) * C15405 + (C15954 - C15955) * C82523) * C15403 +
           ((C15956 - C15957) * C15405 + (C15958 - C15959) * C82523) * C15404) *
              C82938 * C688 +
          (((C2741 - C2740) * C15405 + (C2743 - C2742) * C82523) * C15400 +
           ((C2745 - C2744) * C15405 + (C2747 - C2746) * C82523) * C15401 +
           ((C15953 - C15952) * C15405 + (C15955 - C15954) * C82523) * C15402 +
           ((C15957 - C15956) * C15405 + (C15959 - C15958) * C82523) * C15403 +
           ((C239 * C15827 - C82592 * C15949) * C15405 +
            (C239 * C15829 - C82592 * C15950) * C82523) *
               C15404) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
            C82896 * C4299 - C25873 * C4108) *
               C13259 +
           (C25720 * C246 - C25871 * C109 + C25721 * C1270 - C25872 * C1165 +
            C82896 * C4303 - C25873 * C4113) *
               C82925 +
           (C25875 - C25876 + C25877 - C25878 + C25879 - C25880) * C13261 +
           (C25881 - C25882 + C25883 - C25884 + C25885 - C25886) * C82909 +
           (C25887 - C25888 + C25889 - C25890 + C25891 - C25892) * C13263 +
           (C25893 - C25894 + C25895 - C25896 + C25897 - C25898) * C82885) *
              C82581 * C82938 * C688 +
          ((C25871 * C695 - C25720 * C805 + C25872 * C3348 - C25721 * C3527 +
            C25873 * C4976 - C82896 * C5140) *
               C13259 +
           (C25871 * C705 - C25720 * C810 + C25872 * C3360 - C25721 * C3533 +
            C25873 * C4982 - C82896 * C5143) *
               C82925 +
           (C25871 * C694 - C25720 * C806 + C25872 * C3347 - C25721 * C3528 +
            C25873 * C4975 - C82896 * C5141) *
               C13261 +
           (C25871 * C703 - C25720 * C811 + C25872 * C3358 - C25721 * C3534 +
            C25873 * C4980 - C82896 * C5144) *
               C82909 +
           (C25871 * C693 - C25720 * C807 + C25872 * C3346 - C25721 * C3529 +
            C25873 * C4974 - C82896 * C5142) *
               C13263 +
           (C25871 * C701 - C25720 * C812 + C25872 * C3356 - C25721 * C3535 +
            C25873 * C4978 - C82896 * C5145) *
               C82885) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
             C82896 * C4299 - C25873 * C4108) *
                C15405 +
            (C25720 * C246 - C25871 * C109 + C25721 * C1270 - C25872 * C1165 +
             C82896 * C4303 - C25873 * C4113) *
                C82523) *
               C82931 +
           ((C28710 - C28711 + C28712 - C28713 + C28714 - C28715) * C15405 +
            (C28716 - C28717 + C28718 - C28719 + C28720 - C28721) * C82523) *
               C82916 +
           ((C28722 - C28723 + C28724 - C28725 + C28726 - C28727) * C15405 +
            (C28728 - C28729 + C28730 - C28731 + C28732 - C28733) * C82523) *
               C82893) *
              C82938 * C688 +
          (((C28711 - C28710 + C28713 - C28712 + C28715 - C28714) * C15405 +
            (C28717 - C28716 + C28719 - C28718 + C28721 - C28720) * C82523) *
               C82931 +
           ((C28723 - C28722 + C28725 - C28724 + C28727 - C28726) * C15405 +
            (C28729 - C28728 + C28731 - C28730 + C28733 - C28732) * C82523) *
               C82916 +
           ((C25871 * C2527 - C25720 * C2733 + C25872 * C16304 -
             C25721 * C16399 + C25873 * C17443 - C82896 * C17631) *
                C15405 +
            (C25871 * C2533 - C25720 * C2736 + C25872 * C16308 -
             C25721 * C16401 + C25873 * C17445 - C82896 * C17632) *
                C82523) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
            C82885 * C112 - C1651 * C104) *
               C1743 +
           (C1641 * C316 - C1647 * C310 + C1642 * C317 - C1649 * C311 +
            C82885 * C318 - C1651 * C312) *
               C82931 +
           (C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C1744 +
           (C2834 - C2835 + C2836 - C2837 + C2838 - C2839) * C82916 +
           (C2840 - C2841 + C2842 - C2843 + C2844 - C2845) * C1745 +
           (C2846 - C2847 + C2848 - C2849 + C2850 - C2851) * C82893) *
              C82592 * C82938 * C688 +
          ((C2829 - C2828 + C2831 - C2830 + C2833 - C2832) * C1743 +
           (C2835 - C2834 + C2837 - C2836 + C2839 - C2838) * C82931 +
           (C2841 - C2840 + C2843 - C2842 + C2845 - C2844) * C1744 +
           (C2847 - C2846 + C2849 - C2848 + C2851 - C2850) * C82916 +
           (C1647 * C2527 - C1641 * C2532 + C1649 * C2526 - C1642 * C2530 +
            C1651 * C2525 - C82885 * C2528) *
               C1745 +
           (C1647 * C2821 - C1641 * C2824 + C1649 * C2822 - C1642 * C2825 +
            C1651 * C2823 - C82885 * C2826) *
               C82893) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C108 - C92 * C102 + C82 * C110 - C94 * C103 + C83 * C112 -
            C96 * C104 + C84 * C114 - C98 * C105 + C85 * C116 - C100 * C106) *
               C168 +
           (C81 * C316 - C92 * C310 + C82 * C317 - C94 * C311 + C83 * C318 -
            C96 * C312 + C84 * C319 - C98 * C313 + C85 * C320 - C100 * C314) *
               C82581) *
              C82592 * C82938 * C688 +
          ((C92 * C695 - C81 * C704 + C94 * C694 - C82 * C702 + C96 * C693 -
            C83 * C700 + C98 * C692 - C84 * C698 + C100 * C691 - C85 * C696) *
               C168 +
           (C92 * C857 - C81 * C862 + C94 * C858 - C82 * C863 + C96 * C859 -
            C83 * C864 + C98 * C860 - C84 * C865 + C100 * C861 - C85 * C866) *
               C82581) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
            C82885 * C112 - C13263 * C104) *
               C13339 +
           (C82925 * C316 - C13259 * C310 + C82909 * C317 - C13261 * C311 +
            C82885 * C318 - C13263 * C312) *
               C13256 +
           (C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C13340 +
           (C14292 - C14293 + C14294 - C14295 + C14296 - C14297) * C13257 +
           (C14298 - C14299 + C14300 - C14301 + C14302 - C14303) * C13341 +
           (C14304 - C14305 + C14306 - C14307 + C14308 - C14309) * C82893) *
              C82592 * C82938 * C688 +
          ((C14287 - C14286 + C14289 - C14288 + C14291 - C14290) * C13339 +
           (C14293 - C14292 + C14295 - C14294 + C14297 - C14296) * C13256 +
           (C14299 - C14298 + C14301 - C14300 + C14303 - C14302) * C13340 +
           (C14305 - C14304 + C14307 - C14306 + C14309 - C14308) * C13257 +
           (C13259 * C2527 - C82925 * C2532 + C13261 * C2526 - C82909 * C2530 +
            C13263 * C2525 - C82885 * C2528) *
               C13341 +
           (C13259 * C2821 - C82925 * C2824 + C13261 * C2822 - C82909 * C2825 +
            C13263 * C2823 - C82885 * C2826) *
               C82893) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82523 * C108 - C15405 * C102) * C15457 +
           (C82523 * C316 - C15405 * C310) * C15400 +
           (C16004 - C16005) * C15458 + (C16006 - C16007) * C15401 +
           (C16008 - C16009) * C15459 + (C16010 - C16011) * C15402 +
           (C16012 - C16013) * C15460 + (C16014 - C16015) * C15403 +
           (C16016 - C16017) * C15461 + (C16018 - C16019) * C15404) *
              C82592 * C82938 * C688 +
          ((C16005 - C16004) * C15457 + (C16007 - C16006) * C15400 +
           (C16009 - C16008) * C15458 + (C16011 - C16010) * C15401 +
           (C16013 - C16012) * C15459 + (C16015 - C16014) * C15402 +
           (C16017 - C16016) * C15460 + (C16019 - C16018) * C15403 +
           (C15405 * C15827 - C82523 * C15828) * C15461 +
           (C15405 * C16001 - C82523 * C16002) * C15404) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C168 +
            (C82925 * C316 - C13259 * C310 + C82909 * C317 - C13261 * C311 +
             C82885 * C318 - C13263 * C312) *
                C82581) *
               C25720 +
           ((C82925 * C1164 - C13259 * C1155 + C82909 * C1162 - C13261 * C1154 +
             C82885 * C1160 - C13263 * C1153) *
                C168 +
            (C82925 * C1322 - C13259 * C1317 + C82909 * C1323 - C13261 * C1318 +
             C82885 * C1324 - C13263 * C1319) *
                C82581) *
               C25721 +
           ((C82925 * C4112 - C13259 * C4108 + C82909 * C4114 - C13261 * C4109 +
             C82885 * C4116 - C13263 * C4110) *
                C168 +
            (C82925 * C4409 - C13259 * C4405 + C82909 * C4410 - C13261 * C4406 +
             C82885 * C4411 - C13263 * C4407) *
                C82581) *
               C82896) *
              C82938 * C688 +
          (((C14287 - C14286 + C14289 - C14288 + C14291 - C14290) * C168 +
            (C14293 - C14292 + C14295 - C14294 + C14297 - C14296) * C82581) *
               C25720 +
           ((C13259 * C3348 - C82925 * C3359 + C13261 * C3347 - C82909 * C3357 +
             C13263 * C3346 - C82885 * C3355) *
                C168 +
            (C13259 * C3613 - C82925 * C3619 + C13261 * C3614 - C82909 * C3620 +
             C13263 * C3615 - C82885 * C3621) *
                C82581) *
               C25721 +
           ((C13259 * C4976 - C82925 * C4981 + C13261 * C4975 - C82909 * C4979 +
             C13263 * C4974 - C82885 * C4977) *
                C168 +
            (C13259 * C5220 - C82925 * C5223 + C13261 * C5221 - C82909 * C5224 +
             C13263 * C5222 - C82885 * C5225) *
                C82581) *
               C82896) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C1743 +
            (C82523 * C316 - C15405 * C310) * C82931 +
            (C16004 - C16005) * C1744 + (C16006 - C16007) * C82916 +
            (C16008 - C16009) * C1745 + (C16010 - C16011) * C82893) *
               C25720 +
           ((C18542 - C18543) * C1743 + (C18544 - C18545) * C82931 +
            (C17734 - C17735) * C1744 + (C17736 - C17737) * C82916 +
            (C17738 - C17739) * C1745 + (C17740 - C17741) * C82893) *
               C25721 +
           ((C18546 - C18547) * C1743 + (C18548 - C18549) * C82931 +
            (C17742 - C17743) * C1744 + (C17744 - C17745) * C82916 +
            (C17746 - C17747) * C1745 + (C17748 - C17749) * C82893) *
               C82896) *
              C82938 * C688 +
          (((C16005 - C16004) * C1743 + (C16007 - C16006) * C82931 +
            (C16009 - C16008) * C1744 + (C16011 - C16010) * C82916 +
            (C16013 - C16012) * C1745 + (C16015 - C16014) * C82893) *
               C25720 +
           ((C17735 - C17734) * C1743 + (C17737 - C17736) * C82931 +
            (C17739 - C17738) * C1744 + (C17741 - C17740) * C82916 +
            (C24648 - C24647) * C1745 + (C24650 - C24649) * C82893) *
               C25721 +
           ((C17743 - C17742) * C1743 + (C17745 - C17744) * C82931 +
            (C17747 - C17746) * C1744 + (C17749 - C17748) * C82916 +
            (C15405 * C17443 - C82523 * C17444) * C1745 +
            (C15405 * C17731 - C82523 * C17732) * C82893) *
               C82896) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1743 * C169 - C2032 * C102 - C1743 * C310 + C82931 * C365 +
            C1744 * C753 - C2033 * C695 - C1744 * C857 + C82916 * C913 +
            C1745 * C1746 - C2034 * C1653 - C1745 * C1950 + C82893 * C2035) *
               C1641 +
           (C2076 + C2077 + C2078) * C1642 + (C2079 + C2080 + C2081) * C82885) *
              C82592 * C82938 * C688 -
          ((C1745 * C2655 - C2034 * C2525 - C1745 * C2823 + C82893 * C2925 +
            C1744 * C1748 - C2033 * C1655 - C1744 * C1952 + C82916 * C2037 +
            C1743 * C755 - C2032 * C693 - C1743 * C859 + C82931 * C911) *
               C82885 +
           (C1745 * C2654 - C2034 * C2526 - C1745 * C2822 + C82893 * C2926 +
            C1744 * C1747 - C2033 * C1654 - C1744 * C1951 + C82916 * C2036 +
            C1743 * C754 - C2032 * C694 - C1743 * C858 + C82931 * C912) *
               C1642 +
           (C1745 * C2653 - C2034 * C2527 - C1745 * C2821 + C82893 * C2927 +
            C1744 * C1746 - C2033 * C1653 - C1744 * C1950 + C82916 * C2035 +
            C1743 * C753 - C2032 * C695 - C1743 * C857 + C82931 * C913) *
               C1641) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C81 +
           C396 * C82 + C397 * C83 + C398 * C84 + C399 * C85) *
              C82592 * C82938 * C688 -
          ((C168 * C757 - C364 * C691 - C168 * C861 + C82581 * C909) * C85 +
           (C168 * C756 - C364 * C692 - C168 * C860 + C82581 * C910) * C84 +
           (C168 * C755 - C364 * C693 - C168 * C859 + C82581 * C911) * C83 +
           (C168 * C754 - C364 * C694 - C168 * C858 + C82581 * C912) * C82 +
           (C168 * C753 - C364 * C695 - C168 * C857 + C82581 * C913) * C81) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13339 * C169 - C13588 * C102 - C13339 * C310 + C13256 * C365 +
            C13340 * C753 - C13589 * C695 - C13340 * C857 + C13257 * C913 +
            C13341 * C1746 - C13590 * C1653 - C13341 * C1950 + C82893 * C2035) *
               C82925 +
           (C13628 + C13629 + C13630) * C82909 +
           (C13631 + C13632 + C13633) * C82885) *
              C82592 * C82938 * C688 -
          ((C13341 * C2655 - C13590 * C2525 - C13341 * C2823 + C82893 * C2925 +
            C13340 * C1748 - C13589 * C1655 - C13340 * C1952 + C13257 * C2037 +
            C13339 * C755 - C13588 * C693 - C13339 * C859 + C13256 * C911) *
               C82885 +
           (C13341 * C2654 - C13590 * C2526 - C13341 * C2822 + C82893 * C2926 +
            C13340 * C1747 - C13589 * C1654 - C13340 * C1951 + C13257 * C2036 +
            C13339 * C754 - C13588 * C694 - C13339 * C858 + C13256 * C912) *
               C82909 +
           (C13341 * C2653 - C13590 * C2527 - C13341 * C2821 + C82893 * C2927 +
            C13340 * C1746 - C13589 * C1653 - C13340 * C1950 + C13257 * C2035 +
            C13339 * C753 - C13588 * C695 - C13339 * C857 + C13256 * C913) *
               C82925) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C15457 * C169 - C15600 * C102 - C15457 * C310 + C15400 * C365 +
           C15458 * C753 - C15601 * C695 - C15458 * C857 + C15401 * C913 +
           C15459 * C1746 - C15602 * C1653 - C15459 * C1950 + C15402 * C2035 +
           C15460 * C2653 - C15603 * C2527 - C15460 * C2821 + C15403 * C2927 +
           C15461 * C15462 - C15604 * C15407 - C15461 * C15554 +
           C15404 * C15605) *
              C82523 * C82592 * C82938 * C688 -
          (C15461 * C15905 - C15604 * C15827 - C15461 * C16001 +
           C15404 * C16061 + C15460 * C15462 - C15603 * C15407 -
           C15460 * C15554 + C15403 * C15605 + C15459 * C2653 - C15602 * C2527 -
           C15459 * C2821 + C15402 * C2927 + C15458 * C1746 - C15601 * C1653 -
           C15458 * C1950 + C15401 * C2035 + C15457 * C753 - C15600 * C695 -
           C15457 * C857 + C15400 * C913) *
              C82523 * C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C82925 +
            C396 * C82909 + C397 * C82885) *
               C25720 +
           (C6108 * C82925 + C4516 * C82909 + C4517 * C82885) * C25721 +
           (C6109 * C82925 + C4518 * C82909 + C4519 * C82885) * C82896) *
              C82938 * C688 -
          (((C168 * C5062 - C364 * C4974 - C168 * C5222 + C82581 * C5300) *
                C82885 +
            (C168 * C5061 - C364 * C4975 - C168 * C5221 + C82581 * C5301) *
                C82909 +
            (C168 * C5060 - C364 * C4976 - C168 * C5220 + C82581 * C5302) *
                C82925) *
               C82896 +
           ((C168 * C3445 - C364 * C3346 - C168 * C3615 + C82581 * C3700) *
                C82885 +
            (C168 * C3443 - C364 * C3347 - C168 * C3614 + C82581 * C3702) *
                C82909 +
            (C168 * C3441 - C364 * C3348 - C168 * C3613 + C82581 * C3704) *
                C82925) *
               C25721 +
           ((C168 * C755 - C364 * C693 - C168 * C859 + C82581 * C911) * C82885 +
            (C168 * C754 - C364 * C694 - C168 * C858 + C82581 * C912) * C82909 +
            (C168 * C753 - C364 * C695 - C168 * C857 + C82581 * C913) *
                C82925) *
               C25720) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1743 * C169 - C2032 * C102 - C1743 * C310 + C82931 * C365 +
            C1744 * C753 - C2033 * C695 - C1744 * C857 + C82916 * C913 +
            C1745 * C1746 - C2034 * C1653 - C1745 * C1950 + C82893 * C2035) *
               C82523 * C25720 +
           (C1743 * C1213 - C2032 * C1155 - C1743 * C1317 + C82931 * C1373 +
            C1744 * C3441 - C2033 * C3348 - C1744 * C3613 + C82916 * C3704 +
            C1745 * C3442 - C2034 * C3345 - C1745 * C3616 + C82893 * C3703) *
               C82523 * C25721 +
           (C1743 * C4198 - C2032 * C4108 - C1743 * C4405 + C82931 * C4487 +
            C1744 * C5060 - C2033 * C4976 - C1744 * C5220 + C82916 * C5302 +
            C1745 * C16827 - C2034 * C16745 - C1745 * C16983 +
            C82893 * C17061) *
               C82523 * C82896) *
              C82938 * C688 -
          ((C1745 * C17555 - C2034 * C17443 - C1745 * C17731 + C82893 * C17823 +
            C1744 * C16827 - C2033 * C16745 - C1744 * C16983 + C82916 * C17061 +
            C1743 * C5060 - C2032 * C4976 - C1743 * C5220 + C82931 * C5302) *
               C82523 * C82896 +
           (C1745 * C16353 - C2034 * C16304 - C1745 * C16445 + C82893 * C16492 +
            C1744 * C3442 - C2033 * C3345 - C1744 * C3616 + C82916 * C3703 +
            C1743 * C3441 - C2032 * C3348 - C1743 * C3613 + C82931 * C3704) *
               C82523 * C25721 +
           (C1745 * C2653 - C2034 * C2527 - C1745 * C2821 + C82893 * C2927 +
            C1744 * C1746 - C2033 * C1653 - C1744 * C1950 + C82916 * C2035 +
            C1743 * C753 - C2032 * C695 - C1743 * C857 + C82931 * C913) *
               C82523 * C25720) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C1743 +
            (C82592 * C441 - C239 * C310) * C82931 + (C2740 - C2741) * C1744 +
            (C3006 - C3007) * C82916 + (C2744 - C2745) * C1745 +
            (C3008 - C3009) * C82893) *
               C1641 +
           ((C253 - C254) * C1743 + (C448 - C449) * C82931 +
            (C1861 - C1862) * C1744 + (C2160 - C2161) * C82916 +
            (C1869 - C1870) * C1745 + (C2162 - C2163) * C82893) *
               C1642 +
           ((C257 - C258) * C1743 + (C450 - C451) * C82931 +
            (C1865 - C1866) * C1744 + (C2164 - C2165) * C82916 +
            (C1873 - C1874) * C1745 + (C2166 - C2167) * C82893) *
               C82885) *
              C82938 * C688 +
          (((C2741 - C2740) * C1743 + (C3007 - C3006) * C82931 +
            (C2745 - C2744) * C1744 + (C3009 - C3008) * C82916 +
            (C239 * C2527 - C82592 * C2733) * C1745 +
            (C239 * C2821 - C82592 * C3002) * C82893) *
               C1641 +
           ((C1862 - C1861) * C1743 + (C2161 - C2160) * C82931 +
            (C1870 - C1869) * C1744 + (C2163 - C2162) * C82916 +
            (C239 * C2526 - C82592 * C2734) * C1745 +
            (C239 * C2822 - C82592 * C3003) * C82893) *
               C1642 +
           ((C1866 - C1865) * C1743 + (C2165 - C2164) * C82931 +
            (C1874 - C1873) * C1744 + (C2167 - C2166) * C82916 +
            (C239 * C2525 - C82592 * C2735) * C1745 +
            (C239 * C2823 - C82592 * C3004) * C82893) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C168 +
            (C82592 * C441 - C239 * C310) * C82581) *
               C81 +
           ((C253 - C254) * C168 + (C448 - C449) * C82581) * C82 +
           ((C257 - C258) * C168 + (C450 - C451) * C82581) * C83 +
           ((C261 - C262) * C168 + (C452 - C453) * C82581) * C84 +
           ((C265 - C266) * C168 + (C454 - C455) * C82581) * C85) *
              C82938 * C688 +
          (((C239 * C695 - C82592 * C805) * C168 +
            (C239 * C857 - C82592 * C956) * C82581) *
               C81 +
           ((C239 * C694 - C82592 * C806) * C168 +
            (C239 * C858 - C82592 * C957) * C82581) *
               C82 +
           ((C239 * C693 - C82592 * C807) * C168 +
            (C239 * C859 - C82592 * C958) * C82581) *
               C83 +
           ((C239 * C692 - C82592 * C808) * C168 +
            (C239 * C860 - C82592 * C959) * C82581) *
               C84 +
           ((C239 * C691 - C82592 * C809) * C168 +
            (C239 * C861 - C82592 * C960) * C82581) *
               C85) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C13339 +
            (C82592 * C441 - C239 * C310) * C13256 + (C2740 - C2741) * C13340 +
            (C3006 - C3007) * C13257 + (C2744 - C2745) * C13341 +
            (C3008 - C3009) * C82893) *
               C82925 +
           ((C253 - C254) * C13339 + (C448 - C449) * C13256 +
            (C1861 - C1862) * C13340 + (C2160 - C2161) * C13257 +
            (C1869 - C1870) * C13341 + (C2162 - C2163) * C82893) *
               C82909 +
           ((C257 - C258) * C13339 + (C450 - C451) * C13256 +
            (C1865 - C1866) * C13340 + (C2164 - C2165) * C13257 +
            (C1873 - C1874) * C13341 + (C2166 - C2167) * C82893) *
               C82885) *
              C82938 * C688 +
          (((C2741 - C2740) * C13339 + (C3007 - C3006) * C13256 +
            (C2745 - C2744) * C13340 + (C3009 - C3008) * C13257 +
            (C239 * C2527 - C82592 * C2733) * C13341 +
            (C239 * C2821 - C82592 * C3002) * C82893) *
               C82925 +
           ((C1862 - C1861) * C13339 + (C2161 - C2160) * C13256 +
            (C1870 - C1869) * C13340 + (C2163 - C2162) * C13257 +
            (C239 * C2526 - C82592 * C2734) * C13341 +
            (C239 * C2822 - C82592 * C3003) * C82893) *
               C82909 +
           ((C1866 - C1865) * C13339 + (C2165 - C2164) * C13256 +
            (C1874 - C1873) * C13340 + (C2167 - C2166) * C13257 +
            (C239 * C2525 - C82592 * C2735) * C13341 +
            (C239 * C2823 - C82592 * C3004) * C82893) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82592 * C240 - C239 * C102) * C15457 +
           (C82592 * C441 - C239 * C310) * C15400 + (C2740 - C2741) * C15458 +
           (C3006 - C3007) * C15401 + (C2744 - C2745) * C15459 +
           (C3008 - C3009) * C15402 + (C15952 - C15953) * C15460 +
           (C16106 - C16107) * C15403 + (C15956 - C15957) * C15461 +
           (C16108 - C16109) * C15404) *
              C82523 * C82938 * C688 +
          ((C2741 - C2740) * C15457 + (C3007 - C3006) * C15400 +
           (C2745 - C2744) * C15458 + (C3009 - C3008) * C15401 +
           (C15953 - C15952) * C15459 + (C16107 - C16106) * C15402 +
           (C15957 - C15956) * C15460 + (C16109 - C16108) * C15403 +
           (C239 * C15827 - C82592 * C15949) * C15461 +
           (C239 * C16001 - C82592 * C16104) * C15404) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
             C82896 * C4299 - C25873 * C4108) *
                C168 +
            (C25720 * C441 - C25871 * C310 + C25721 * C1416 - C25872 * C1317 +
             C82896 * C4593 - C25873 * C4405) *
                C82581) *
               C82925 +
           ((C25875 - C25876 + C25877 - C25878 + C25879 - C25880) * C168 +
            (C26121 - C26122 + C26123 - C26124 + C26125 - C26126) * C82581) *
               C82909 +
           ((C25887 - C25888 + C25889 - C25890 + C25891 - C25892) * C168 +
            (C26127 - C26128 + C26129 - C26130 + C26131 - C26132) * C82581) *
               C82885) *
              C82938 * C688 +
          (((C25871 * C695 - C25720 * C805 + C25872 * C3348 - C25721 * C3527 +
             C25873 * C4976 - C82896 * C5140) *
                C168 +
            (C25871 * C857 - C25720 * C956 + C25872 * C3613 - C25721 * C3779 +
             C25873 * C5220 - C82896 * C5377) *
                C82581) *
               C82925 +
           ((C25871 * C694 - C25720 * C806 + C25872 * C3347 - C25721 * C3528 +
             C25873 * C4975 - C82896 * C5141) *
                C168 +
            (C25871 * C858 - C25720 * C957 + C25872 * C3614 - C25721 * C3781 +
             C25873 * C5221 - C82896 * C5378) *
                C82581) *
               C82909 +
           ((C25871 * C693 - C25720 * C807 + C25872 * C3346 - C25721 * C3529 +
             C25873 * C4974 - C82896 * C5142) *
                C168 +
            (C25871 * C859 - C25720 * C958 + C25872 * C3615 - C25721 * C3783 +
             C25873 * C5222 - C82896 * C5379) *
                C82581) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
            C82896 * C4299 - C25873 * C4108) *
               C1743 +
           (C25720 * C441 - C25871 * C310 + C25721 * C1416 - C25872 * C1317 +
            C82896 * C4593 - C25873 * C4405) *
               C82931 +
           (C28710 - C28711 + C28712 - C28713 + C28714 - C28715) * C1744 +
           (C28956 - C28957 + C28958 - C28959 + C28960 - C28961) * C82916 +
           (C28722 - C28723 + C28724 - C28725 + C28726 - C28727) * C1745 +
           (C28962 - C28963 + C28964 - C28965 + C28966 - C28967) * C82893) *
              C82523 * C82938 * C688 +
          ((C28711 - C28710 + C28713 - C28712 + C28715 - C28714) * C1743 +
           (C28957 - C28956 + C28959 - C28958 + C28961 - C28960) * C82931 +
           (C28723 - C28722 + C28725 - C28724 + C28727 - C28726) * C1744 +
           (C28963 - C28962 + C28965 - C28964 + C28967 - C28966) * C82916 +
           (C25871 * C2527 - C25720 * C2733 + C25872 * C16304 -
            C25721 * C16399 + C25873 * C17443 - C82896 * C17631) *
               C1745 +
           (C25871 * C2821 - C25720 * C3002 + C25872 * C16445 -
            C25721 * C16535 + C25873 * C17731 - C82896 * C17898) *
               C82893) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezx[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
             C82885 * C112 - C1651 * C104) *
                C239 +
            (C1641 * C503 - C1647 * C497 + C1642 * C504 - C1649 * C498 +
             C82885 * C505 - C1651 * C499) *
                C82592) *
               C82931 +
           ((C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C239 +
            (C3090 - C3091 + C3092 - C3093 + C3094 - C3095) * C82592) *
               C82916 +
           ((C2840 - C2841 + C2842 - C2843 + C2844 - C2845) * C239 +
            (C3096 - C3097 + C3098 - C3099 + C3100 - C3101) * C82592) *
               C82893) *
              C82938 * C688 +
          (((C2829 - C2828 + C2831 - C2830 + C2833 - C2832) * C239 +
            (C3091 - C3090 + C3093 - C3092 + C3095 - C3094) * C82592) *
               C82931 +
           ((C2841 - C2840 + C2843 - C2842 + C2845 - C2844) * C239 +
            (C3097 - C3096 + C3099 - C3098 + C3101 - C3100) * C82592) *
               C82916 +
           ((C1647 * C2527 - C1641 * C2532 + C1649 * C2526 - C1642 * C2530 +
             C1651 * C2525 - C82885 * C2528) *
                C239 +
            (C1647 * C3083 - C1641 * C3086 + C1649 * C3084 - C1642 * C3087 +
             C1651 * C3085 - C82885 * C3088) *
                C82592) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C108 - C92 * C102 + C82 * C110 - C94 * C103 + C83 * C112 -
            C96 * C104 + C84 * C114 - C98 * C105 + C85 * C116 - C100 * C106) *
               C239 +
           (C81 * C503 - C92 * C497 + C82 * C504 - C94 * C498 + C83 * C505 -
            C96 * C499 + C84 * C506 - C98 * C500 + C85 * C507 - C100 * C501) *
               C82592) *
              C82581 * C82938 * C688 +
          ((C92 * C695 - C81 * C704 + C94 * C694 - C82 * C702 + C96 * C693 -
            C83 * C700 + C98 * C692 - C84 * C698 + C100 * C691 - C85 * C696) *
               C239 +
           (C92 * C1003 - C81 * C1008 + C94 * C1004 - C82 * C1009 +
            C96 * C1005 - C83 * C1010 + C98 * C1006 - C84 * C1011 +
            C100 * C1007 - C85 * C1012) *
               C82592) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C239 +
            (C82925 * C503 - C13259 * C497 + C82909 * C504 - C13261 * C498 +
             C82885 * C505 - C13263 * C499) *
                C82592) *
               C13256 +
           ((C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C239 +
            (C14532 - C14533 + C14534 - C14535 + C14536 - C14537) * C82592) *
               C13257 +
           ((C14298 - C14299 + C14300 - C14301 + C14302 - C14303) * C239 +
            (C14538 - C14539 + C14540 - C14541 + C14542 - C14543) * C82592) *
               C82893) *
              C82938 * C688 +
          (((C14287 - C14286 + C14289 - C14288 + C14291 - C14290) * C239 +
            (C14533 - C14532 + C14535 - C14534 + C14537 - C14536) * C82592) *
               C13256 +
           ((C14299 - C14298 + C14301 - C14300 + C14303 - C14302) * C239 +
            (C14539 - C14538 + C14541 - C14540 + C14543 - C14542) * C82592) *
               C13257 +
           ((C13259 * C2527 - C82925 * C2532 + C13261 * C2526 - C82909 * C2530 +
             C13263 * C2525 - C82885 * C2528) *
                C239 +
            (C13259 * C3083 - C82925 * C3086 + C13261 * C3084 - C82909 * C3087 +
             C13263 * C3085 - C82885 * C3088) *
                C82592) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C239 +
            (C82523 * C503 - C15405 * C497) * C82592) *
               C15400 +
           ((C16004 - C16005) * C239 + (C16154 - C16155) * C82592) * C15401 +
           ((C16008 - C16009) * C239 + (C16156 - C16157) * C82592) * C15402 +
           ((C16012 - C16013) * C239 + (C16158 - C16159) * C82592) * C15403 +
           ((C16016 - C16017) * C239 + (C16160 - C16161) * C82592) * C15404) *
              C82938 * C688 +
          (((C16005 - C16004) * C239 + (C16155 - C16154) * C82592) * C15400 +
           ((C16009 - C16008) * C239 + (C16157 - C16156) * C82592) * C15401 +
           ((C16013 - C16012) * C239 + (C16159 - C16158) * C82592) * C15402 +
           ((C16017 - C16016) * C239 + (C16161 - C16160) * C82592) * C15403 +
           ((C15405 * C15827 - C82523 * C15828) * C239 +
            (C15405 * C16151 - C82523 * C16152) * C82592) *
               C15404) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
            C82885 * C112 - C13263 * C104) *
               C25871 +
           (C82925 * C503 - C13259 * C497 + C82909 * C504 - C13261 * C498 +
            C82885 * C505 - C13263 * C499) *
               C25720 +
           (C82925 * C1164 - C13259 * C1155 + C82909 * C1162 - C13261 * C1154 +
            C82885 * C1160 - C13263 * C1153) *
               C25872 +
           (C82925 * C1468 - C13259 * C1463 + C82909 * C1469 - C13261 * C1464 +
            C82885 * C1470 - C13263 * C1465) *
               C25721 +
           (C82925 * C4112 - C13259 * C4108 + C82909 * C4114 - C13261 * C4109 +
            C82885 * C4116 - C13263 * C4110) *
               C25873 +
           (C82925 * C4687 - C13259 * C4683 + C82909 * C4688 - C13261 * C4684 +
            C82885 * C4689 - C13263 * C4685) *
               C82896) *
              C82581 * C82938 * C688 +
          ((C14287 - C14286 + C14289 - C14288 + C14291 - C14290) * C25871 +
           (C14533 - C14532 + C14535 - C14534 + C14537 - C14536) * C25720 +
           (C13259 * C3348 - C82925 * C3359 + C13261 * C3347 - C82909 * C3357 +
            C13263 * C3346 - C82885 * C3355) *
               C25872 +
           (C13259 * C3859 - C82925 * C3865 + C13261 * C3860 - C82909 * C3866 +
            C13263 * C3861 - C82885 * C3867) *
               C25721 +
           (C13259 * C4976 - C82925 * C4981 + C13261 * C4975 - C82909 * C4979 +
            C13263 * C4974 - C82885 * C4977) *
               C25873 +
           (C13259 * C5454 - C82925 * C5457 + C13261 * C5455 - C82909 * C5458 +
            C13263 * C5456 - C82885 * C5459) *
               C82896) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C25871 +
            (C82523 * C503 - C15405 * C497) * C25720 +
            (C18542 - C18543) * C25872 + (C18822 - C18823) * C25721 +
            (C18546 - C18547) * C25873 + (C18824 - C18825) * C82896) *
               C82931 +
           ((C16004 - C16005) * C25871 + (C16154 - C16155) * C25720 +
            (C17734 - C17735) * C25872 + (C17988 - C17989) * C25721 +
            (C17742 - C17743) * C25873 + (C17990 - C17991) * C82896) *
               C82916 +
           ((C16008 - C16009) * C25871 + (C16156 - C16157) * C25720 +
            (C17738 - C17739) * C25872 + (C17992 - C17993) * C25721 +
            (C17746 - C17747) * C25873 + (C17994 - C17995) * C82896) *
               C82893) *
              C82938 * C688 +
          (((C16005 - C16004) * C25871 + (C16155 - C16154) * C25720 +
            (C17735 - C17734) * C25872 + (C17989 - C17988) * C25721 +
            (C17743 - C17742) * C25873 + (C17991 - C17990) * C82896) *
               C82931 +
           ((C16009 - C16008) * C25871 + (C16157 - C16156) * C25720 +
            (C17739 - C17738) * C25872 + (C17993 - C17992) * C25721 +
            (C17747 - C17746) * C25873 + (C17995 - C17994) * C82896) *
               C82916 +
           ((C16013 - C16012) * C25871 + (C16159 - C16158) * C25720 +
            (C24648 - C24647) * C25872 + (C24854 - C24853) * C25721 +
            (C15405 * C17443 - C82523 * C17444) * C25873 +
            (C15405 * C17985 - C82523 * C17986) * C82896) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
             C82893 * C1746 - C1745 * C1653) *
                C239 +
            (C82931 * C551 - C1743 * C497 + C82916 * C1055 - C1744 * C1003 +
             C82893 * C2323 - C1745 * C2241) *
                C82592) *
               C1641 +
           ((C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C239 +
            (C2328 - C2329 + C2330 - C2331 + C2332 - C2333) * C82592) *
               C1642 +
           ((C1767 - C1768 + C1769 - C1770 + C1771 - C1772) * C239 +
            (C2334 - C2335 + C2336 - C2337 + C2338 - C2339) * C82592) *
               C82885) *
              C82938 * C688 +
          (((C1743 * C695 - C82931 * C753 + C1744 * C1653 - C82916 * C1746 +
             C1745 * C2527 - C82893 * C2653) *
                C239 +
            (C1743 * C1003 - C82931 * C1055 + C1744 * C2241 - C82916 * C2323 +
             C1745 * C3083 - C82893 * C3175) *
                C82592) *
               C1641 +
           ((C1743 * C694 - C82931 * C754 + C1744 * C1654 - C82916 * C1747 +
             C1745 * C2526 - C82893 * C2654) *
                C239 +
            (C1743 * C1004 - C82931 * C1056 + C1744 * C2242 - C82916 * C2324 +
             C1745 * C3084 - C82893 * C3176) *
                C82592) *
               C1642 +
           ((C1743 * C693 - C82931 * C755 + C1744 * C1655 - C82916 * C1748 +
             C1745 * C2525 - C82893 * C2655) *
                C239 +
            (C1743 * C1005 - C82931 * C1057 + C1744 * C2243 - C82916 * C2325 +
             C1745 * C3085 - C82893 * C3177) *
                C82592) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C239 +
            (C82581 * C551 - C168 * C497) * C82592) *
               C81 +
           ((C182 - C183) * C239 + (C558 - C559) * C82592) * C82 +
           ((C186 - C187) * C239 + (C560 - C561) * C82592) * C83 +
           ((C190 - C191) * C239 + (C562 - C563) * C82592) * C84 +
           ((C194 - C195) * C239 + (C564 - C565) * C82592) * C85) *
              C82938 * C688 +
          (((C168 * C695 - C82581 * C753) * C239 +
            (C168 * C1003 - C82581 * C1055) * C82592) *
               C81 +
           ((C168 * C694 - C82581 * C754) * C239 +
            (C168 * C1004 - C82581 * C1056) * C82592) *
               C82 +
           ((C168 * C693 - C82581 * C755) * C239 +
            (C168 * C1005 - C82581 * C1057) * C82592) *
               C83 +
           ((C168 * C692 - C82581 * C756) * C239 +
            (C168 * C1006 - C82581 * C1058) * C82592) *
               C84 +
           ((C168 * C691 - C82581 * C757) * C239 +
            (C168 * C1007 - C82581 * C1059) * C82592) *
               C85) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C239 +
            (C13256 * C551 - C13339 * C497 + C13257 * C1055 - C13340 * C1003 +
             C82893 * C2323 - C13341 * C2241) *
                C82592) *
               C82925 +
           ((C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C239 +
            (C13856 - C13857 + C13858 - C13859 + C13860 - C13861) * C82592) *
               C82909 +
           ((C13355 - C13356 + C13357 - C13358 + C13359 - C13360) * C239 +
            (C13862 - C13863 + C13864 - C13865 + C13866 - C13867) * C82592) *
               C82885) *
              C82938 * C688 +
          (((C13339 * C695 - C13256 * C753 + C13340 * C1653 - C13257 * C1746 +
             C13341 * C2527 - C82893 * C2653) *
                C239 +
            (C13339 * C1003 - C13256 * C1055 + C13340 * C2241 - C13257 * C2323 +
             C13341 * C3083 - C82893 * C3175) *
                C82592) *
               C82925 +
           ((C13339 * C694 - C13256 * C754 + C13340 * C1654 - C13257 * C1747 +
             C13341 * C2526 - C82893 * C2654) *
                C239 +
            (C13339 * C1004 - C13256 * C1056 + C13340 * C2242 - C13257 * C2324 +
             C13341 * C3084 - C82893 * C3176) *
                C82592) *
               C82909 +
           ((C13339 * C693 - C13256 * C755 + C13340 * C1655 - C13257 * C1748 +
             C13341 * C2525 - C82893 * C2655) *
                C239 +
            (C13339 * C1005 - C13256 * C1057 + C13340 * C2243 - C13257 * C2325 +
             C13341 * C3085 - C82893 * C3177) *
                C82592) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15400 * C169 - C15457 * C102 + C15401 * C753 - C15458 * C695 +
            C15402 * C1746 - C15459 * C1653 + C15403 * C2653 - C15460 * C2527 +
            C15404 * C15462 - C15461 * C15407) *
               C239 +
           (C15400 * C551 - C15457 * C497 + C15401 * C1055 - C15458 * C1003 +
            C15402 * C2323 - C15459 * C2241 + C15403 * C3175 - C15460 * C3083 +
            C15404 * C15739 - C15461 * C15693) *
               C82592) *
              C82523 * C82938 * C688 +
          ((C15457 * C695 - C15400 * C753 + C15458 * C1653 - C15401 * C1746 +
            C15459 * C2527 - C15402 * C2653 + C15460 * C15407 -
            C15403 * C15462 + C15461 * C15827 - C15404 * C15905) *
               C239 +
           (C15457 * C1003 - C15400 * C1055 + C15458 * C2241 - C15401 * C2323 +
            C15459 * C3083 - C15402 * C3175 + C15460 * C15693 -
            C15403 * C15739 + C15461 * C16151 - C15404 * C16203) *
               C82592) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C25871 +
            (C82581 * C551 - C168 * C497) * C25720 + (C5823 - C5824) * C25872 +
            (C6358 - C6359) * C25721 + (C5827 - C5828) * C25873 +
            (C6360 - C6361) * C82896) *
               C82925 +
           ((C182 - C183) * C25871 + (C558 - C559) * C25720 +
            (C4207 - C4208) * C25872 + (C4770 - C4771) * C25721 +
            (C4215 - C4216) * C25873 + (C4772 - C4773) * C82896) *
               C82909 +
           ((C186 - C187) * C25871 + (C560 - C561) * C25720 +
            (C4211 - C4212) * C25872 + (C4774 - C4775) * C25721 +
            (C4219 - C4220) * C25873 + (C4776 - C4777) * C82896) *
               C82885) *
              C82938 * C688 +
          (((C168 * C695 - C82581 * C753) * C25871 +
            (C168 * C1003 - C82581 * C1055) * C25720 +
            (C168 * C3348 - C82581 * C3441) * C25872 +
            (C168 * C3859 - C82581 * C3945) * C25721 +
            (C168 * C4976 - C82581 * C5060) * C25873 +
            (C168 * C5454 - C82581 * C5534) * C82896) *
               C82925 +
           ((C168 * C694 - C82581 * C754) * C25871 +
            (C168 * C1004 - C82581 * C1056) * C25720 +
            (C168 * C3347 - C82581 * C3443) * C25872 +
            (C168 * C3860 - C82581 * C3947) * C25721 +
            (C168 * C4975 - C82581 * C5061) * C25873 +
            (C168 * C5455 - C82581 * C5535) * C82896) *
               C82909 +
           ((C168 * C693 - C82581 * C755) * C25871 +
            (C168 * C1005 - C82581 * C1057) * C25720 +
            (C168 * C3346 - C82581 * C3445) * C25872 +
            (C168 * C3861 - C82581 * C3949) * C25721 +
            (C168 * C4974 - C82581 * C5062) * C25873 +
            (C168 * C5456 - C82581 * C5536) * C82896) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
            C82893 * C1746 - C1745 * C1653) *
               C25871 +
           (C82931 * C551 - C1743 * C497 + C82916 * C1055 - C1744 * C1003 +
            C82893 * C2323 - C1745 * C2241) *
               C25720 +
           (C82931 * C1213 - C1743 * C1155 + C82916 * C3441 - C1744 * C3348 +
            C82893 * C3442 - C1745 * C3345) *
               C25872 +
           (C82931 * C1515 - C1743 * C1463 + C82916 * C3945 - C1744 * C3859 +
            C82893 * C3946 - C1745 * C3862) *
               C25721 +
           (C82931 * C4198 - C1743 * C4108 + C82916 * C5060 - C1744 * C4976 +
            C82893 * C16827 - C1745 * C16745) *
               C25873 +
           (C82931 * C4765 - C1743 * C4683 + C82916 * C5534 - C1744 * C5454 +
            C82893 * C17291 - C1745 * C17213) *
               C82896) *
              C82523 * C82938 * C688 +
          ((C1743 * C695 - C82931 * C753 + C1744 * C1653 - C82916 * C1746 +
            C1745 * C2527 - C82893 * C2653) *
               C25871 +
           (C1743 * C1003 - C82931 * C1055 + C1744 * C2241 - C82916 * C2323 +
            C1745 * C3083 - C82893 * C3175) *
               C25720 +
           (C1743 * C3348 - C82931 * C3441 + C1744 * C3345 - C82916 * C3442 +
            C1745 * C16304 - C82893 * C16353) *
               C25872 +
           (C1743 * C3859 - C82931 * C3945 + C1744 * C3862 - C82916 * C3946 +
            C1745 * C16579 - C82893 * C16625) *
               C25721 +
           (C1743 * C4976 - C82931 * C5060 + C1744 * C16745 - C82916 * C16827 +
            C1745 * C17443 - C82893 * C17555) *
               C25873 +
           (C1743 * C5454 - C82931 * C5534 + C1744 * C17213 - C82916 * C17291 +
            C1745 * C17985 - C82893 * C18069) *
               C82896) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82931 +
            C3268 * C82916 + C3269 * C82893) *
               C1641 +
           (C2418 + C2448 + C2449) * C1642 + (C2427 + C2450 + C2451) * C82885) *
              C82938 * C688 -
          (((C239 * C2735 - C607 * C2525 - C239 * C3085 + C82592 * C3252) *
                C82893 +
            C2447 * C82916 + C2446 * C82931) *
               C82885 +
           ((C239 * C2734 - C607 * C2526 - C239 * C3084 + C82592 * C3253) *
                C82893 +
            C2445 * C82916 + C2444 * C82931) *
               C1642 +
           ((C239 * C2733 - C607 * C2527 - C239 * C3083 + C82592 * C3254) *
                C82893 +
            C3269 * C82916 + C3268 * C82931) *
               C1641) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82581 *
               C81 +
           C643 * C82 + C644 * C83 + C645 * C84 + C646 * C85) *
              C82938 * C688 -
          ((C239 * C809 - C607 * C691 - C239 * C1007 + C82592 * C1102) *
               C82581 * C85 +
           (C239 * C808 - C607 * C692 - C239 * C1006 + C82592 * C1103) *
               C82581 * C84 +
           (C239 * C807 - C607 * C693 - C239 * C1005 + C82592 * C1104) *
               C82581 * C83 +
           (C239 * C806 - C607 * C694 - C239 * C1004 + C82592 * C1105) *
               C82581 * C82 +
           (C239 * C805 - C607 * C695 - C239 * C1003 + C82592 * C1106) *
               C82581 * C81) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C13256 +
            C3268 * C13257 + C3269 * C82893) *
               C82925 +
           (C13942 + C13943 + C13944) * C82909 +
           (C13945 + C13946 + C13947) * C82885) *
              C82938 * C688 -
          (((C239 * C2735 - C607 * C2525 - C239 * C3085 + C82592 * C3252) *
                C82893 +
            C2447 * C13257 + C2446 * C13256) *
               C82885 +
           ((C239 * C2734 - C607 * C2526 - C239 * C3084 + C82592 * C3253) *
                C82893 +
            C2445 * C13257 + C2444 * C13256) *
               C82909 +
           ((C239 * C2733 - C607 * C2527 - C239 * C3083 + C82592 * C3254) *
                C82893 +
            C3269 * C13257 + C3268 * C13256) *
               C82925) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C15400 +
           C3268 * C15401 + C3269 * C15402 + C16260 * C15403 +
           C16261 * C15404) *
              C82523 * C82938 * C688 -
          ((C239 * C15949 - C607 * C15827 - C239 * C16151 + C82592 * C16246) *
               C15404 +
           C16261 * C15403 + C16260 * C15402 + C3269 * C15401 +
           C3268 * C15400) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C25871 * C240 - C26354 * C102 - C25871 * C497 + C25720 * C608 +
            C25872 * C1265 - C26355 * C1155 - C25872 * C1463 + C25721 * C1566 +
            C25873 * C4299 - C26356 * C4108 - C25873 * C4683 + C82896 * C4854) *
               C82581 * C82925 +
           (C26394 + C26395 + C26396) * C82581 * C82909 +
           (C26397 + C26398 + C26399) * C82581 * C82885) *
              C82938 * C688 -
          ((C25873 * C5142 - C26356 * C4974 - C25873 * C5456 + C82896 * C5611 +
            C25872 * C3529 - C26355 * C3346 - C25872 * C3861 + C25721 * C4026 +
            C25871 * C807 - C26354 * C693 - C25871 * C1005 + C25720 * C1104) *
               C82581 * C82885 +
           (C25873 * C5141 - C26356 * C4975 - C25873 * C5455 + C82896 * C5612 +
            C25872 * C3528 - C26355 * C3347 - C25872 * C3860 + C25721 * C4028 +
            C25871 * C806 - C26354 * C694 - C25871 * C1004 + C25720 * C1105) *
               C82581 * C82909 +
           (C25873 * C5140 - C26356 * C4976 - C25873 * C5454 + C82896 * C5613 +
            C25872 * C3527 - C26355 * C3348 - C25872 * C3859 + C25721 * C4030 +
            C25871 * C805 - C26354 * C695 - C25871 * C1003 + C25720 * C1106) *
               C82581 * C82925) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C25871 * C240 - C26354 * C102 - C25871 * C497 + C25720 * C608 +
            C25872 * C1265 - C26355 * C1155 - C25872 * C1463 + C25721 * C1566 +
            C25873 * C4299 - C26356 * C4108 - C25873 * C4683 + C82896 * C4854) *
               C82931 +
           (C29226 + C29227 + C29228) * C82916 +
           (C29229 + C29230 + C29231) * C82893) *
              C82523 * C82938 * C688 -
          ((C25873 * C17631 - C26356 * C17443 - C25873 * C17985 +
            C82896 * C18144 + C25872 * C16399 - C26355 * C16304 -
            C25872 * C16579 + C25721 * C16670 + C25871 * C2733 -
            C26354 * C2527 - C25871 * C3083 + C25720 * C3254) *
               C82893 +
           (C29231 + C29230 + C29229) * C82916 +
           (C29228 + C29227 + C29226) * C82931) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1647 * C108 - C1648 * C102 - C1647 * C109 + C1641 * C120 +
            C1649 * C110 - C1650 * C103 - C1649 * C111 + C1642 * C121 +
            C1651 * C112 - C1652 * C104 - C1651 * C113 + C82885 * C122) *
               C82592 * C82931 +
           (C2574 + C2575 + C2576) * C82592 * C82916 +
           (C2577 + C2578 + C2579) * C82592 * C82893) *
              C1149 -
          ((C1651 * C3349 - C1652 * C3343 - C1651 * C3350 + C82885 * C3361 +
            C1649 * C3351 - C1650 * C3344 - C1649 * C3352 + C1642 * C3362 +
            C1647 * C3353 - C1648 * C3345 - C1647 * C3354 + C1641 * C3363) *
               C82592 * C82893 +
           (C1651 * C3355 - C1652 * C3346 - C1651 * C3356 + C82885 * C3364 +
            C1649 * C3357 - C1650 * C3347 - C1649 * C3358 + C1642 * C3365 +
            C1647 * C3359 - C1648 * C3348 - C1647 * C3360 + C1641 * C3366) *
               C82592 * C82916 +
           (C1651 * C1160 - C1652 * C1153 - C1651 * C1161 + C82885 * C1168 +
            C1649 * C1162 - C1650 * C1154 - C1649 * C1163 + C1642 * C1169 +
            C1647 * C1164 - C1648 * C1155 - C1647 * C1165 + C1641 * C1170) *
               C82592 * C82931) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C92 * C108 - C93 * C102 - C92 * C109 + C81 * C120 + C94 * C110 -
           C95 * C103 - C94 * C111 + C82 * C121 + C96 * C112 - C97 * C104 -
           C96 * C113 + C83 * C122 + C98 * C114 - C99 * C105 - C98 * C115 +
           C84 * C123 + C100 * C116 - C101 * C106 - C100 * C117 + C85 * C124) *
              C82592 * C82581 * C1149 -
          (C100 * C1156 - C101 * C1151 - C100 * C1157 + C85 * C1166 +
           C98 * C1158 - C99 * C1152 - C98 * C1159 + C84 * C1167 + C96 * C1160 -
           C97 * C1153 - C96 * C1161 + C83 * C1168 + C94 * C1162 - C95 * C1154 -
           C94 * C1163 + C82 * C1169 + C92 * C1164 - C93 * C1155 - C92 * C1165 +
           C81 * C1170) *
              C82592 * C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13259 * C108 - C13260 * C102 - C13259 * C109 + C82925 * C120 +
            C13261 * C110 - C13262 * C103 - C13261 * C111 + C82909 * C121 +
            C13263 * C112 - C13264 * C104 - C13263 * C113 + C82885 * C122) *
               C82592 * C13256 +
           (C14058 + C14059 + C14060) * C82592 * C13257 +
           (C14061 + C14062 + C14063) * C82592 * C82893) *
              C1149 -
          ((C13263 * C3349 - C13264 * C3343 - C13263 * C3350 + C82885 * C3361 +
            C13261 * C3351 - C13262 * C3344 - C13261 * C3352 + C82909 * C3362 +
            C13259 * C3353 - C13260 * C3345 - C13259 * C3354 + C82925 * C3363) *
               C82592 * C82893 +
           (C13263 * C3355 - C13264 * C3346 - C13263 * C3356 + C82885 * C3364 +
            C13261 * C3357 - C13262 * C3347 - C13261 * C3358 + C82909 * C3365 +
            C13259 * C3359 - C13260 * C3348 - C13259 * C3360 + C82925 * C3366) *
               C82592 * C13257 +
           (C13263 * C1160 - C13264 * C1153 - C13263 * C1161 + C82885 * C1168 +
            C13261 * C1162 - C13262 * C1154 - C13261 * C1163 + C82909 * C1169 +
            C13259 * C1164 - C13260 * C1155 - C13259 * C1165 + C82925 * C1170) *
               C82592 * C13256) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
               C82592 * C15400 +
           C15860 * C15401 + C15861 * C15402 + C15862 * C15403 +
           C15863 * C15404) *
              C1149 -
          ((C15405 * C16305 - C15406 * C16303 - C15405 * C16306 +
            C82523 * C16309) *
               C82592 * C15404 +
           (C15405 * C16307 - C15406 * C16304 - C15405 * C16308 +
            C82523 * C16310) *
               C82592 * C15403 +
           (C15405 * C3353 - C15406 * C3345 - C15405 * C3354 + C82523 * C3363) *
               C82592 * C15402 +
           (C15405 * C3359 - C15406 * C3348 - C15405 * C3360 + C82523 * C3366) *
               C82592 * C15401 +
           (C15405 * C1164 - C15406 * C1155 - C15405 * C1165 + C82523 * C1170) *
               C82592 * C15400) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13259 * C108 - C13260 * C102 - C13259 * C109 + C82925 * C120 +
            C13261 * C110 - C13262 * C103 - C13261 * C111 + C82909 * C121 +
            C13263 * C112 - C13264 * C104 - C13263 * C113 + C82885 * C122) *
               C25720 +
           (C27176 + C27177 + C27178) * C25721 +
           (C27179 + C27180 + C27181) * C82896) *
              C82581 * C1149 -
          ((C13263 * C5691 - C13264 * C5688 - C13263 * C5692 + C82885 * C5697 +
            C13261 * C5693 - C13262 * C5689 - C13261 * C5694 + C82909 * C5698 +
            C13259 * C5695 - C13260 * C5690 - C13259 * C5696 + C82925 * C5699) *
               C82896 +
           (C27181 + C27180 + C27179) * C25721 +
           (C27178 + C27177 + C27176) * C25720) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C25720 +
            C18282 * C25721 + C18283 * C82896) *
               C82931 +
           (C28556 + C28557 + C28558) * C82916 +
           (C28559 + C28560 + C28561) * C82893) *
              C1149 -
          (((C15405 * C18263 - C15406 * C18261 - C15405 * C18264 +
             C82523 * C18267) *
                C82896 +
            C17477 * C25721 + C17476 * C25720) *
               C82893 +
           ((C15405 * C18265 - C15406 * C18262 - C15405 * C18266 +
             C82523 * C18268) *
                C82896 +
            C17475 * C25721 + C17474 * C25720) *
               C82916 +
           ((C15405 * C5695 - C15406 * C5690 - C15405 * C5696 +
             C82523 * C5699) *
                C82896 +
            C18283 * C25721 + C18282 * C25720) *
               C82931) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
            C82893 * C1746 - C1745 * C1653) *
               C1647 +
           (C82931 * C175 - C1743 * C109 + C82916 * C758 - C1744 * C705 +
            C82893 * C1750 - C1745 * C1658) *
               C1641 +
           (C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C1649 +
           (C1761 - C1762 + C1763 - C1764 + C1765 - C1766) * C1642 +
           (C1767 - C1768 + C1769 - C1770 + C1771 - C1772) * C1651 +
           (C1773 - C1774 + C1775 - C1776 + C1777 - C1778) * C82885) *
              C82592 * C1149 +
          ((C1743 * C1155 - C82931 * C1213 + C1744 * C3348 - C82916 * C3441 +
            C1745 * C3345 - C82893 * C3442) *
               C1647 +
           (C1743 * C1165 - C82931 * C1218 + C1744 * C3360 - C82916 * C3447 +
            C1745 * C3354 - C82893 * C3448) *
               C1641 +
           (C1743 * C1154 - C82931 * C1214 + C1744 * C3347 - C82916 * C3443 +
            C1745 * C3344 - C82893 * C3444) *
               C1649 +
           (C1743 * C1163 - C82931 * C1219 + C1744 * C3358 - C82916 * C3449 +
            C1745 * C3352 - C82893 * C3450) *
               C1642 +
           (C1743 * C1153 - C82931 * C1215 + C1744 * C3346 - C82916 * C3445 +
            C1745 * C3343 - C82893 * C3446) *
               C1651 +
           (C1743 * C1161 - C82931 * C1220 + C1744 * C3356 - C82916 * C3451 +
            C1745 * C3350 - C82893 * C3452) *
               C82885) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82581 * C169 - C168 * C102) * C92 +
           (C82581 * C175 - C168 * C109) * C81 + (C182 - C183) * C94 +
           (C184 - C185) * C82 + (C186 - C187) * C96 + (C188 - C189) * C83 +
           (C190 - C191) * C98 + (C192 - C193) * C84 + (C194 - C195) * C100 +
           (C196 - C197) * C85) *
              C82592 * C1149 +
          ((C168 * C1155 - C82581 * C1213) * C92 +
           (C168 * C1165 - C82581 * C1218) * C81 +
           (C168 * C1154 - C82581 * C1214) * C94 +
           (C168 * C1163 - C82581 * C1219) * C82 +
           (C168 * C1153 - C82581 * C1215) * C96 +
           (C168 * C1161 - C82581 * C1220) * C83 +
           (C168 * C1152 - C82581 * C1216) * C98 +
           (C168 * C1159 - C82581 * C1221) * C84 +
           (C168 * C1151 - C82581 * C1217) * C100 +
           (C168 * C1157 - C82581 * C1222) * C85) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
            C82893 * C1746 - C13341 * C1653) *
               C13259 +
           (C13256 * C175 - C13339 * C109 + C13257 * C758 - C13340 * C705 +
            C82893 * C1750 - C13341 * C1658) *
               C82925 +
           (C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C13261 +
           (C13349 - C13350 + C13351 - C13352 + C13353 - C13354) * C82909 +
           (C13355 - C13356 + C13357 - C13358 + C13359 - C13360) * C13263 +
           (C13361 - C13362 + C13363 - C13364 + C13365 - C13366) * C82885) *
              C82592 * C1149 +
          ((C13339 * C1155 - C13256 * C1213 + C13340 * C3348 - C13257 * C3441 +
            C13341 * C3345 - C82893 * C3442) *
               C13259 +
           (C13339 * C1165 - C13256 * C1218 + C13340 * C3360 - C13257 * C3447 +
            C13341 * C3354 - C82893 * C3448) *
               C82925 +
           (C13339 * C1154 - C13256 * C1214 + C13340 * C3347 - C13257 * C3443 +
            C13341 * C3344 - C82893 * C3444) *
               C13261 +
           (C13339 * C1163 - C13256 * C1219 + C13340 * C3358 - C13257 * C3449 +
            C13341 * C3352 - C82893 * C3450) *
               C82909 +
           (C13339 * C1153 - C13256 * C1215 + C13340 * C3346 - C13257 * C3445 +
            C13341 * C3343 - C82893 * C3446) *
               C13263 +
           (C13339 * C1161 - C13256 * C1220 + C13340 * C3356 - C13257 * C3451 +
            C13341 * C3350 - C82893 * C3452) *
               C82885) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15400 * C169 - C15457 * C102 + C15401 * C753 - C15458 * C695 +
            C15402 * C1746 - C15459 * C1653 + C15403 * C2653 - C15460 * C2527 +
            C15404 * C15462 - C15461 * C15407) *
               C15405 +
           (C15400 * C175 - C15457 * C109 + C15401 * C758 - C15458 * C705 +
            C15402 * C1750 - C15459 * C1658 + C15403 * C2656 - C15460 * C2533 +
            C15404 * C15464 - C15461 * C15410) *
               C82523) *
              C82592 * C1149 +
          ((C15457 * C1155 - C15400 * C1213 + C15458 * C3348 - C15401 * C3441 +
            C15459 * C3345 - C15402 * C3442 + C15460 * C16304 -
            C15403 * C16353 + C15461 * C16303 - C15404 * C16354) *
               C15405 +
           (C15457 * C1165 - C15400 * C1218 + C15458 * C3360 - C15401 * C3447 +
            C15459 * C3354 - C15402 * C3448 + C15460 * C16308 -
            C15403 * C16355 + C15461 * C16306 - C15404 * C16356) *
               C82523) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C13259 +
            (C82581 * C175 - C168 * C109) * C82925 + (C182 - C183) * C13261 +
            (C184 - C185) * C82909 + (C186 - C187) * C13263 +
            (C188 - C189) * C82885) *
               C25720 +
           ((C5823 - C5824) * C13259 + (C5825 - C5826) * C82925 +
            (C4207 - C4208) * C13261 + (C4209 - C4210) * C82909 +
            (C4211 - C4212) * C13263 + (C4213 - C4214) * C82885) *
               C25721 +
           ((C5827 - C5828) * C13259 + (C5829 - C5830) * C82925 +
            (C4215 - C4216) * C13261 + (C4217 - C4218) * C82909 +
            (C4219 - C4220) * C13263 + (C4221 - C4222) * C82885) *
               C82896) *
              C1149 +
          (((C5824 - C5823) * C13259 + (C5826 - C5825) * C82925 +
            (C4208 - C4207) * C13261 + (C4210 - C4209) * C82909 +
            (C4212 - C4211) * C13263 + (C4214 - C4213) * C82885) *
               C25720 +
           ((C5828 - C5827) * C13259 + (C5830 - C5829) * C82925 +
            (C4216 - C4215) * C13261 + (C4218 - C4217) * C82909 +
            (C4220 - C4219) * C13263 + (C4222 - C4221) * C82885) *
               C25721 +
           ((C168 * C5690 - C82581 * C5816) * C13259 +
            (C168 * C5696 - C82581 * C5819) * C82925 +
            (C168 * C5689 - C82581 * C5817) * C13261 +
            (C168 * C5694 - C82581 * C5820) * C82909 +
            (C168 * C5688 - C82581 * C5818) * C13263 +
            (C168 * C5692 - C82581 * C5821) * C82885) *
               C82896) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
             C82893 * C1746 - C1745 * C1653) *
                C15405 +
            (C82931 * C175 - C1743 * C109 + C82916 * C758 - C1744 * C705 +
             C82893 * C1750 - C1745 * C1658) *
                C82523) *
               C25720 +
           ((C29380 - C29381 + C29382 - C29383 + C29384 - C29385) * C15405 +
            (C29386 - C29387 + C29388 - C29389 + C29390 - C29391) * C82523) *
               C25721 +
           ((C29392 - C29393 + C29394 - C29395 + C29396 - C29397) * C15405 +
            (C29398 - C29399 + C29400 - C29401 + C29402 - C29403) * C82523) *
               C82896) *
              C1149 +
          (((C29381 - C29380 + C29383 - C29382 + C29385 - C29384) * C15405 +
            (C29387 - C29386 + C29389 - C29388 + C29391 - C29390) * C82523) *
               C25720 +
           ((C29393 - C29392 + C29395 - C29394 + C29397 - C29396) * C15405 +
            (C29399 - C29398 + C29401 - C29400 + C29403 - C29402) * C82523) *
               C25721 +
           ((C1743 * C5690 - C82931 * C5816 + C1744 * C18262 - C82916 * C18357 +
             C1745 * C18261 - C82893 * C18358) *
                C15405 +
            (C1743 * C5696 - C82931 * C5819 + C1744 * C18266 - C82916 * C18359 +
             C1745 * C18264 - C82893 * C18360) *
                C82523) *
               C82896) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C1647 +
            (C82592 * C246 - C239 * C109) * C1641 + (C253 - C254) * C1649 +
            (C255 - C256) * C1642 + (C257 - C258) * C1651 +
            (C259 - C260) * C82885) *
               C82931 +
           ((C2740 - C2741) * C1647 + (C2742 - C2743) * C1641 +
            (C1861 - C1862) * C1649 + (C1863 - C1864) * C1642 +
            (C1865 - C1866) * C1651 + (C1867 - C1868) * C82885) *
               C82916 +
           ((C2744 - C2745) * C1647 + (C2746 - C2747) * C1641 +
            (C1869 - C1870) * C1649 + (C1871 - C1872) * C1642 +
            (C1873 - C1874) * C1651 + (C1875 - C1876) * C82885) *
               C82893) *
              C1149 +
          (((C239 * C1155 - C82592 * C1265) * C1647 +
            (C239 * C1165 - C82592 * C1270) * C1641 +
            (C239 * C1154 - C82592 * C1266) * C1649 +
            (C239 * C1163 - C82592 * C1271) * C1642 +
            (C239 * C1153 - C82592 * C1267) * C1651 +
            (C239 * C1161 - C82592 * C1272) * C82885) *
               C82931 +
           ((C239 * C3348 - C82592 * C3527) * C1647 +
            (C239 * C3360 - C82592 * C3533) * C1641 +
            (C239 * C3347 - C82592 * C3528) * C1649 +
            (C239 * C3358 - C82592 * C3534) * C1642 +
            (C239 * C3346 - C82592 * C3529) * C1651 +
            (C239 * C3356 - C82592 * C3535) * C82885) *
               C82916 +
           ((C239 * C3345 - C82592 * C3530) * C1647 +
            (C239 * C3354 - C82592 * C3536) * C1641 +
            (C239 * C3344 - C82592 * C3531) * C1649 +
            (C239 * C3352 - C82592 * C3537) * C1642 +
            (C239 * C3343 - C82592 * C3532) * C1651 +
            (C239 * C3350 - C82592 * C3538) * C82885) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82592 * C240 - C239 * C102) * C92 +
           (C82592 * C246 - C239 * C109) * C81 + (C253 - C254) * C94 +
           (C255 - C256) * C82 + (C257 - C258) * C96 + (C259 - C260) * C83 +
           (C261 - C262) * C98 + (C263 - C264) * C84 + (C265 - C266) * C100 +
           (C267 - C268) * C85) *
              C82581 * C1149 +
          ((C239 * C1155 - C82592 * C1265) * C92 +
           (C239 * C1165 - C82592 * C1270) * C81 +
           (C239 * C1154 - C82592 * C1266) * C94 +
           (C239 * C1163 - C82592 * C1271) * C82 +
           (C239 * C1153 - C82592 * C1267) * C96 +
           (C239 * C1161 - C82592 * C1272) * C83 +
           (C239 * C1152 - C82592 * C1268) * C98 +
           (C239 * C1159 - C82592 * C1273) * C84 +
           (C239 * C1151 - C82592 * C1269) * C100 +
           (C239 * C1157 - C82592 * C1274) * C85) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C13259 +
            (C82592 * C246 - C239 * C109) * C82925 + (C253 - C254) * C13261 +
            (C255 - C256) * C82909 + (C257 - C258) * C13263 +
            (C259 - C260) * C82885) *
               C13256 +
           ((C2740 - C2741) * C13259 + (C2742 - C2743) * C82925 +
            (C1861 - C1862) * C13261 + (C1863 - C1864) * C82909 +
            (C1865 - C1866) * C13263 + (C1867 - C1868) * C82885) *
               C13257 +
           ((C2744 - C2745) * C13259 + (C2746 - C2747) * C82925 +
            (C1869 - C1870) * C13261 + (C1871 - C1872) * C82909 +
            (C1873 - C1874) * C13263 + (C1875 - C1876) * C82885) *
               C82893) *
              C1149 +
          (((C239 * C1155 - C82592 * C1265) * C13259 +
            (C239 * C1165 - C82592 * C1270) * C82925 +
            (C239 * C1154 - C82592 * C1266) * C13261 +
            (C239 * C1163 - C82592 * C1271) * C82909 +
            (C239 * C1153 - C82592 * C1267) * C13263 +
            (C239 * C1161 - C82592 * C1272) * C82885) *
               C13256 +
           ((C239 * C3348 - C82592 * C3527) * C13259 +
            (C239 * C3360 - C82592 * C3533) * C82925 +
            (C239 * C3347 - C82592 * C3528) * C13261 +
            (C239 * C3358 - C82592 * C3534) * C82909 +
            (C239 * C3346 - C82592 * C3529) * C13263 +
            (C239 * C3356 - C82592 * C3535) * C82885) *
               C13257 +
           ((C239 * C3345 - C82592 * C3530) * C13259 +
            (C239 * C3354 - C82592 * C3536) * C82925 +
            (C239 * C3344 - C82592 * C3531) * C13261 +
            (C239 * C3352 - C82592 * C3537) * C82909 +
            (C239 * C3343 - C82592 * C3532) * C13263 +
            (C239 * C3350 - C82592 * C3538) * C82885) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C15405 +
            (C82592 * C246 - C239 * C109) * C82523) *
               C15400 +
           ((C2740 - C2741) * C15405 + (C2742 - C2743) * C82523) * C15401 +
           ((C2744 - C2745) * C15405 + (C2746 - C2747) * C82523) * C15402 +
           ((C15952 - C15953) * C15405 + (C15954 - C15955) * C82523) * C15403 +
           ((C15956 - C15957) * C15405 + (C15958 - C15959) * C82523) * C15404) *
              C1149 +
          (((C239 * C1155 - C82592 * C1265) * C15405 +
            (C239 * C1165 - C82592 * C1270) * C82523) *
               C15400 +
           ((C239 * C3348 - C82592 * C3527) * C15405 +
            (C239 * C3360 - C82592 * C3533) * C82523) *
               C15401 +
           ((C239 * C3345 - C82592 * C3530) * C15405 +
            (C239 * C3354 - C82592 * C3536) * C82523) *
               C15402 +
           ((C239 * C16304 - C82592 * C16399) * C15405 +
            (C239 * C16308 - C82592 * C16401) * C82523) *
               C15403 +
           ((C239 * C16303 - C82592 * C16400) * C15405 +
            (C239 * C16306 - C82592 * C16402) * C82523) *
               C15404) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
            C82896 * C4299 - C25873 * C4108) *
               C13259 +
           (C25720 * C246 - C25871 * C109 + C25721 * C1270 - C25872 * C1165 +
            C82896 * C4303 - C25873 * C4113) *
               C82925 +
           (C25875 - C25876 + C25877 - C25878 + C25879 - C25880) * C13261 +
           (C25881 - C25882 + C25883 - C25884 + C25885 - C25886) * C82909 +
           (C25887 - C25888 + C25889 - C25890 + C25891 - C25892) * C13263 +
           (C25893 - C25894 + C25895 - C25896 + C25897 - C25898) * C82885) *
              C82581 * C1149 +
          ((C25871 * C1155 - C25720 * C1265 + C25872 * C4108 - C25721 * C4299 +
            C25873 * C5690 - C82896 * C5904) *
               C13259 +
           (C25871 * C1165 - C25720 * C1270 + C25872 * C4113 - C25721 * C4303 +
            C25873 * C5696 - C82896 * C5907) *
               C82925 +
           (C25871 * C1154 - C25720 * C1266 + C25872 * C4109 - C25721 * C4300 +
            C25873 * C5689 - C82896 * C5905) *
               C13261 +
           (C25871 * C1163 - C25720 * C1271 + C25872 * C4115 - C25721 * C4304 +
            C25873 * C5694 - C82896 * C5908) *
               C82909 +
           (C25871 * C1153 - C25720 * C1267 + C25872 * C4110 - C25721 * C4301 +
            C25873 * C5688 - C82896 * C5906) *
               C13263 +
           (C25871 * C1161 - C25720 * C1272 + C25872 * C4117 - C25721 * C4305 +
            C25873 * C5692 - C82896 * C5909) *
               C82885) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
             C82896 * C4299 - C25873 * C4108) *
                C15405 +
            (C25720 * C246 - C25871 * C109 + C25721 * C1270 - C25872 * C1165 +
             C82896 * C4303 - C25873 * C4113) *
                C82523) *
               C82931 +
           ((C28710 - C28711 + C28712 - C28713 + C28714 - C28715) * C15405 +
            (C28716 - C28717 + C28718 - C28719 + C28720 - C28721) * C82523) *
               C82916 +
           ((C28722 - C28723 + C28724 - C28725 + C28726 - C28727) * C15405 +
            (C28728 - C28729 + C28730 - C28731 + C28732 - C28733) * C82523) *
               C82893) *
              C1149 +
          (((C25871 * C1155 - C25720 * C1265 + C25872 * C4108 - C25721 * C4299 +
             C25873 * C5690 - C82896 * C5904) *
                C15405 +
            (C25871 * C1165 - C25720 * C1270 + C25872 * C4113 - C25721 * C4303 +
             C25873 * C5696 - C82896 * C5907) *
                C82523) *
               C82931 +
           ((C25871 * C3348 - C25720 * C3527 + C25872 * C4976 - C25721 * C5140 +
             C25873 * C18262 - C82896 * C18459) *
                C15405 +
            (C25871 * C3360 - C25720 * C3533 + C25872 * C4982 - C25721 * C5143 +
             C25873 * C18266 - C82896 * C18461) *
                C82523) *
               C82916 +
           ((C25871 * C3345 - C25720 * C3530 + C25872 * C16745 -
             C25721 * C16905 + C25873 * C18261 - C82896 * C18460) *
                C15405 +
            (C25871 * C3354 - C25720 * C3536 + C25872 * C16748 -
             C25721 * C16907 + C25873 * C18264 - C82896 * C18462) *
                C82523) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
            C82885 * C112 - C1651 * C104) *
               C1743 +
           (C1641 * C316 - C1647 * C310 + C1642 * C317 - C1649 * C311 +
            C82885 * C318 - C1651 * C312) *
               C82931 +
           (C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C1744 +
           (C2834 - C2835 + C2836 - C2837 + C2838 - C2839) * C82916 +
           (C2840 - C2841 + C2842 - C2843 + C2844 - C2845) * C1745 +
           (C2846 - C2847 + C2848 - C2849 + C2850 - C2851) * C82893) *
              C82592 * C1149 +
          ((C1647 * C1155 - C1641 * C1164 + C1649 * C1154 - C1642 * C1162 +
            C1651 * C1153 - C82885 * C1160) *
               C1743 +
           (C1647 * C1317 - C1641 * C1322 + C1649 * C1318 - C1642 * C1323 +
            C1651 * C1319 - C82885 * C1324) *
               C82931 +
           (C1647 * C3348 - C1641 * C3359 + C1649 * C3347 - C1642 * C3357 +
            C1651 * C3346 - C82885 * C3355) *
               C1744 +
           (C1647 * C3613 - C1641 * C3619 + C1649 * C3614 - C1642 * C3620 +
            C1651 * C3615 - C82885 * C3621) *
               C82916 +
           (C1647 * C3345 - C1641 * C3353 + C1649 * C3344 - C1642 * C3351 +
            C1651 * C3343 - C82885 * C3349) *
               C1745 +
           (C1647 * C3616 - C1641 * C3622 + C1649 * C3617 - C1642 * C3623 +
            C1651 * C3618 - C82885 * C3624) *
               C82893) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C108 - C92 * C102 + C82 * C110 - C94 * C103 + C83 * C112 -
            C96 * C104 + C84 * C114 - C98 * C105 + C85 * C116 - C100 * C106) *
               C168 +
           (C81 * C316 - C92 * C310 + C82 * C317 - C94 * C311 + C83 * C318 -
            C96 * C312 + C84 * C319 - C98 * C313 + C85 * C320 - C100 * C314) *
               C82581) *
              C82592 * C1149 +
          ((C92 * C1155 - C81 * C1164 + C94 * C1154 - C82 * C1162 +
            C96 * C1153 - C83 * C1160 + C98 * C1152 - C84 * C1158 +
            C100 * C1151 - C85 * C1156) *
               C168 +
           (C92 * C1317 - C81 * C1322 + C94 * C1318 - C82 * C1323 +
            C96 * C1319 - C83 * C1324 + C98 * C1320 - C84 * C1325 +
            C100 * C1321 - C85 * C1326) *
               C82581) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
            C82885 * C112 - C13263 * C104) *
               C13339 +
           (C82925 * C316 - C13259 * C310 + C82909 * C317 - C13261 * C311 +
            C82885 * C318 - C13263 * C312) *
               C13256 +
           (C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C13340 +
           (C14292 - C14293 + C14294 - C14295 + C14296 - C14297) * C13257 +
           (C14298 - C14299 + C14300 - C14301 + C14302 - C14303) * C13341 +
           (C14304 - C14305 + C14306 - C14307 + C14308 - C14309) * C82893) *
              C82592 * C1149 +
          ((C13259 * C1155 - C82925 * C1164 + C13261 * C1154 - C82909 * C1162 +
            C13263 * C1153 - C82885 * C1160) *
               C13339 +
           (C13259 * C1317 - C82925 * C1322 + C13261 * C1318 - C82909 * C1323 +
            C13263 * C1319 - C82885 * C1324) *
               C13256 +
           (C13259 * C3348 - C82925 * C3359 + C13261 * C3347 - C82909 * C3357 +
            C13263 * C3346 - C82885 * C3355) *
               C13340 +
           (C13259 * C3613 - C82925 * C3619 + C13261 * C3614 - C82909 * C3620 +
            C13263 * C3615 - C82885 * C3621) *
               C13257 +
           (C13259 * C3345 - C82925 * C3353 + C13261 * C3344 - C82909 * C3351 +
            C13263 * C3343 - C82885 * C3349) *
               C13341 +
           (C13259 * C3616 - C82925 * C3622 + C13261 * C3617 - C82909 * C3623 +
            C13263 * C3618 - C82885 * C3624) *
               C82893) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82523 * C108 - C15405 * C102) * C15457 +
           (C82523 * C316 - C15405 * C310) * C15400 +
           (C16004 - C16005) * C15458 + (C16006 - C16007) * C15401 +
           (C16008 - C16009) * C15459 + (C16010 - C16011) * C15402 +
           (C16012 - C16013) * C15460 + (C16014 - C16015) * C15403 +
           (C16016 - C16017) * C15461 + (C16018 - C16019) * C15404) *
              C82592 * C1149 +
          ((C15405 * C1155 - C82523 * C1164) * C15457 +
           (C15405 * C1317 - C82523 * C1322) * C15400 +
           (C15405 * C3348 - C82523 * C3359) * C15458 +
           (C15405 * C3613 - C82523 * C3619) * C15401 +
           (C15405 * C3345 - C82523 * C3353) * C15459 +
           (C15405 * C3616 - C82523 * C3622) * C15402 +
           (C15405 * C16304 - C82523 * C16307) * C15460 +
           (C15405 * C16445 - C82523 * C16447) * C15403 +
           (C15405 * C16303 - C82523 * C16305) * C15461 +
           (C15405 * C16446 - C82523 * C16448) * C15404) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C168 +
            (C82925 * C316 - C13259 * C310 + C82909 * C317 - C13261 * C311 +
             C82885 * C318 - C13263 * C312) *
                C82581) *
               C25720 +
           ((C27404 - C27405 + C27406 - C27407 + C27408 - C27409) * C168 +
            (C27410 - C27411 + C27412 - C27413 + C27414 - C27415) * C82581) *
               C25721 +
           ((C27416 - C27417 + C27418 - C27419 + C27420 - C27421) * C168 +
            (C27422 - C27423 + C27424 - C27425 + C27426 - C27427) * C82581) *
               C82896) *
              C1149 +
          (((C27405 - C27404 + C27407 - C27406 + C27409 - C27408) * C168 +
            (C27411 - C27410 + C27413 - C27412 + C27415 - C27414) * C82581) *
               C25720 +
           ((C27417 - C27416 + C27419 - C27418 + C27421 - C27420) * C168 +
            (C27423 - C27422 + C27425 - C27424 + C27427 - C27426) * C82581) *
               C25721 +
           ((C13259 * C5690 - C82925 * C5695 + C13261 * C5689 - C82909 * C5693 +
             C13263 * C5688 - C82885 * C5691) *
                C168 +
            (C13259 * C5984 - C82925 * C5987 + C13261 * C5985 - C82909 * C5988 +
             C13263 * C5986 - C82885 * C5989) *
                C82581) *
               C82896) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C1743 +
            (C82523 * C316 - C15405 * C310) * C82931 +
            (C16004 - C16005) * C1744 + (C16006 - C16007) * C82916 +
            (C16008 - C16009) * C1745 + (C16010 - C16011) * C82893) *
               C25720 +
           ((C18542 - C18543) * C1743 + (C18544 - C18545) * C82931 +
            (C17734 - C17735) * C1744 + (C17736 - C17737) * C82916 +
            (C17738 - C17739) * C1745 + (C17740 - C17741) * C82893) *
               C25721 +
           ((C18546 - C18547) * C1743 + (C18548 - C18549) * C82931 +
            (C17742 - C17743) * C1744 + (C17744 - C17745) * C82916 +
            (C17746 - C17747) * C1745 + (C17748 - C17749) * C82893) *
               C82896) *
              C1149 +
          (((C18543 - C18542) * C1743 + (C18545 - C18544) * C82931 +
            (C17735 - C17734) * C1744 + (C17737 - C17736) * C82916 +
            (C17739 - C17738) * C1745 + (C17741 - C17740) * C82893) *
               C25720 +
           ((C18547 - C18546) * C1743 + (C18549 - C18548) * C82931 +
            (C17743 - C17742) * C1744 + (C17745 - C17744) * C82916 +
            (C17747 - C17746) * C1745 + (C17749 - C17748) * C82893) *
               C25721 +
           ((C15405 * C5690 - C82523 * C5695) * C1743 +
            (C15405 * C5984 - C82523 * C5987) * C82931 +
            (C15405 * C18262 - C82523 * C18265) * C1744 +
            (C15405 * C18537 - C82523 * C18539) * C82916 +
            (C15405 * C18261 - C82523 * C18263) * C1745 +
            (C15405 * C18538 - C82523 * C18540) * C82893) *
               C82896) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1743 * C169 - C2032 * C102 - C1743 * C310 + C82931 * C365 +
            C1744 * C753 - C2033 * C695 - C1744 * C857 + C82916 * C913 +
            C1745 * C1746 - C2034 * C1653 - C1745 * C1950 + C82893 * C2035) *
               C1641 +
           (C2076 + C2077 + C2078) * C1642 + (C2079 + C2080 + C2081) * C82885) *
              C82592 * C1149 -
          ((C1745 * C3446 - C2034 * C3343 - C1745 * C3618 + C82893 * C3699 +
            C1744 * C3445 - C2033 * C3346 - C1744 * C3615 + C82916 * C3700 +
            C1743 * C1215 - C2032 * C1153 - C1743 * C1319 + C82931 * C1371) *
               C82885 +
           (C1745 * C3444 - C2034 * C3344 - C1745 * C3617 + C82893 * C3701 +
            C1744 * C3443 - C2033 * C3347 - C1744 * C3614 + C82916 * C3702 +
            C1743 * C1214 - C2032 * C1154 - C1743 * C1318 + C82931 * C1372) *
               C1642 +
           (C1745 * C3442 - C2034 * C3345 - C1745 * C3616 + C82893 * C3703 +
            C1744 * C3441 - C2033 * C3348 - C1744 * C3613 + C82916 * C3704 +
            C1743 * C1213 - C2032 * C1155 - C1743 * C1317 + C82931 * C1373) *
               C1641) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C81 +
           C396 * C82 + C397 * C83 + C398 * C84 + C399 * C85) *
              C82592 * C1149 -
          ((C168 * C1217 - C364 * C1151 - C168 * C1321 + C82581 * C1369) * C85 +
           (C168 * C1216 - C364 * C1152 - C168 * C1320 + C82581 * C1370) * C84 +
           (C168 * C1215 - C364 * C1153 - C168 * C1319 + C82581 * C1371) * C83 +
           (C168 * C1214 - C364 * C1154 - C168 * C1318 + C82581 * C1372) * C82 +
           (C168 * C1213 - C364 * C1155 - C168 * C1317 + C82581 * C1373) *
               C81) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13339 * C169 - C13588 * C102 - C13339 * C310 + C13256 * C365 +
            C13340 * C753 - C13589 * C695 - C13340 * C857 + C13257 * C913 +
            C13341 * C1746 - C13590 * C1653 - C13341 * C1950 + C82893 * C2035) *
               C82925 +
           (C13628 + C13629 + C13630) * C82909 +
           (C13631 + C13632 + C13633) * C82885) *
              C82592 * C1149 -
          ((C13341 * C3446 - C13590 * C3343 - C13341 * C3618 + C82893 * C3699 +
            C13340 * C3445 - C13589 * C3346 - C13340 * C3615 + C13257 * C3700 +
            C13339 * C1215 - C13588 * C1153 - C13339 * C1319 + C13256 * C1371) *
               C82885 +
           (C13341 * C3444 - C13590 * C3344 - C13341 * C3617 + C82893 * C3701 +
            C13340 * C3443 - C13589 * C3347 - C13340 * C3614 + C13257 * C3702 +
            C13339 * C1214 - C13588 * C1154 - C13339 * C1318 + C13256 * C1372) *
               C82909 +
           (C13341 * C3442 - C13590 * C3345 - C13341 * C3616 + C82893 * C3703 +
            C13340 * C3441 - C13589 * C3348 - C13340 * C3613 + C13257 * C3704 +
            C13339 * C1213 - C13588 * C1155 - C13339 * C1317 + C13256 * C1373) *
               C82925) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C15457 * C169 - C15600 * C102 - C15457 * C310 + C15400 * C365 +
           C15458 * C753 - C15601 * C695 - C15458 * C857 + C15401 * C913 +
           C15459 * C1746 - C15602 * C1653 - C15459 * C1950 + C15402 * C2035 +
           C15460 * C2653 - C15603 * C2527 - C15460 * C2821 + C15403 * C2927 +
           C15461 * C15462 - C15604 * C15407 - C15461 * C15554 +
           C15404 * C15605) *
              C82523 * C82592 * C1149 -
          (C15461 * C16354 - C15604 * C16303 - C15461 * C16446 +
           C15404 * C16491 + C15460 * C16353 - C15603 * C16304 -
           C15460 * C16445 + C15403 * C16492 + C15459 * C3442 - C15602 * C3345 -
           C15459 * C3616 + C15402 * C3703 + C15458 * C3441 - C15601 * C3348 -
           C15458 * C3613 + C15401 * C3704 + C15457 * C1213 - C15600 * C1155 -
           C15457 * C1317 + C15400 * C1373) *
              C82523 * C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C82925 +
            C396 * C82909 + C397 * C82885) *
               C25720 +
           (C27502 + C27503 + C27504) * C25721 +
           (C27505 + C27506 + C27507) * C82896) *
              C1149 -
          (((C168 * C5818 - C364 * C5688 - C168 * C5986 + C82581 * C6088) *
                C82885 +
            (C168 * C5817 - C364 * C5689 - C168 * C5985 + C82581 * C6089) *
                C82909 +
            (C168 * C5816 - C364 * C5690 - C168 * C5984 + C82581 * C6090) *
                C82925) *
               C82896 +
           (C27507 + C27506 + C27505) * C25721 +
           (C27504 + C27503 + C27502) * C25720) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1743 * C169 - C2032 * C102 - C1743 * C310 + C82931 * C365 +
            C1744 * C753 - C2033 * C695 - C1744 * C857 + C82916 * C913 +
            C1745 * C1746 - C2034 * C1653 - C1745 * C1950 + C82893 * C2035) *
               C82523 * C25720 +
           (C29662 + C29663 + C29664) * C82523 * C25721 +
           (C29665 + C29666 + C29667) * C82523 * C82896) *
              C1149 -
          ((C1745 * C18358 - C2034 * C18261 - C1745 * C18538 + C82893 * C18623 +
            C1744 * C18357 - C2033 * C18262 - C1744 * C18537 + C82916 * C18624 +
            C1743 * C5816 - C2032 * C5690 - C1743 * C5984 + C82931 * C6090) *
               C82523 * C82896 +
           (C29667 + C29666 + C29665) * C82523 * C25721 +
           (C29664 + C29663 + C29662) * C82523 * C25720) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C1743 +
            (C82592 * C441 - C239 * C310) * C82931 + (C2740 - C2741) * C1744 +
            (C3006 - C3007) * C82916 + (C2744 - C2745) * C1745 +
            (C3008 - C3009) * C82893) *
               C1641 +
           ((C253 - C254) * C1743 + (C448 - C449) * C82931 +
            (C1861 - C1862) * C1744 + (C2160 - C2161) * C82916 +
            (C1869 - C1870) * C1745 + (C2162 - C2163) * C82893) *
               C1642 +
           ((C257 - C258) * C1743 + (C450 - C451) * C82931 +
            (C1865 - C1866) * C1744 + (C2164 - C2165) * C82916 +
            (C1873 - C1874) * C1745 + (C2166 - C2167) * C82893) *
               C82885) *
              C1149 +
          (((C239 * C1155 - C82592 * C1265) * C1743 +
            (C239 * C1317 - C82592 * C1416) * C82931 +
            (C239 * C3348 - C82592 * C3527) * C1744 +
            (C239 * C3613 - C82592 * C3779) * C82916 +
            (C239 * C3345 - C82592 * C3530) * C1745 +
            (C239 * C3616 - C82592 * C3780) * C82893) *
               C1641 +
           ((C239 * C1154 - C82592 * C1266) * C1743 +
            (C239 * C1318 - C82592 * C1417) * C82931 +
            (C239 * C3347 - C82592 * C3528) * C1744 +
            (C239 * C3614 - C82592 * C3781) * C82916 +
            (C239 * C3344 - C82592 * C3531) * C1745 +
            (C239 * C3617 - C82592 * C3782) * C82893) *
               C1642 +
           ((C239 * C1153 - C82592 * C1267) * C1743 +
            (C239 * C1319 - C82592 * C1418) * C82931 +
            (C239 * C3346 - C82592 * C3529) * C1744 +
            (C239 * C3615 - C82592 * C3783) * C82916 +
            (C239 * C3343 - C82592 * C3532) * C1745 +
            (C239 * C3618 - C82592 * C3784) * C82893) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C168 +
            (C82592 * C441 - C239 * C310) * C82581) *
               C81 +
           ((C253 - C254) * C168 + (C448 - C449) * C82581) * C82 +
           ((C257 - C258) * C168 + (C450 - C451) * C82581) * C83 +
           ((C261 - C262) * C168 + (C452 - C453) * C82581) * C84 +
           ((C265 - C266) * C168 + (C454 - C455) * C82581) * C85) *
              C1149 +
          (((C239 * C1155 - C82592 * C1265) * C168 +
            (C239 * C1317 - C82592 * C1416) * C82581) *
               C81 +
           ((C239 * C1154 - C82592 * C1266) * C168 +
            (C239 * C1318 - C82592 * C1417) * C82581) *
               C82 +
           ((C239 * C1153 - C82592 * C1267) * C168 +
            (C239 * C1319 - C82592 * C1418) * C82581) *
               C83 +
           ((C239 * C1152 - C82592 * C1268) * C168 +
            (C239 * C1320 - C82592 * C1419) * C82581) *
               C84 +
           ((C239 * C1151 - C82592 * C1269) * C168 +
            (C239 * C1321 - C82592 * C1420) * C82581) *
               C85) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C13339 +
            (C82592 * C441 - C239 * C310) * C13256 + (C2740 - C2741) * C13340 +
            (C3006 - C3007) * C13257 + (C2744 - C2745) * C13341 +
            (C3008 - C3009) * C82893) *
               C82925 +
           ((C253 - C254) * C13339 + (C448 - C449) * C13256 +
            (C1861 - C1862) * C13340 + (C2160 - C2161) * C13257 +
            (C1869 - C1870) * C13341 + (C2162 - C2163) * C82893) *
               C82909 +
           ((C257 - C258) * C13339 + (C450 - C451) * C13256 +
            (C1865 - C1866) * C13340 + (C2164 - C2165) * C13257 +
            (C1873 - C1874) * C13341 + (C2166 - C2167) * C82893) *
               C82885) *
              C1149 +
          (((C239 * C1155 - C82592 * C1265) * C13339 +
            (C239 * C1317 - C82592 * C1416) * C13256 +
            (C239 * C3348 - C82592 * C3527) * C13340 +
            (C239 * C3613 - C82592 * C3779) * C13257 +
            (C239 * C3345 - C82592 * C3530) * C13341 +
            (C239 * C3616 - C82592 * C3780) * C82893) *
               C82925 +
           ((C239 * C1154 - C82592 * C1266) * C13339 +
            (C239 * C1318 - C82592 * C1417) * C13256 +
            (C239 * C3347 - C82592 * C3528) * C13340 +
            (C239 * C3614 - C82592 * C3781) * C13257 +
            (C239 * C3344 - C82592 * C3531) * C13341 +
            (C239 * C3617 - C82592 * C3782) * C82893) *
               C82909 +
           ((C239 * C1153 - C82592 * C1267) * C13339 +
            (C239 * C1319 - C82592 * C1418) * C13256 +
            (C239 * C3346 - C82592 * C3529) * C13340 +
            (C239 * C3615 - C82592 * C3783) * C13257 +
            (C239 * C3343 - C82592 * C3532) * C13341 +
            (C239 * C3618 - C82592 * C3784) * C82893) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82592 * C240 - C239 * C102) * C15457 +
           (C82592 * C441 - C239 * C310) * C15400 + (C2740 - C2741) * C15458 +
           (C3006 - C3007) * C15401 + (C2744 - C2745) * C15459 +
           (C3008 - C3009) * C15402 + (C15952 - C15953) * C15460 +
           (C16106 - C16107) * C15403 + (C15956 - C15957) * C15461 +
           (C16108 - C16109) * C15404) *
              C82523 * C1149 +
          ((C239 * C1155 - C82592 * C1265) * C15457 +
           (C239 * C1317 - C82592 * C1416) * C15400 +
           (C239 * C3348 - C82592 * C3527) * C15458 +
           (C239 * C3613 - C82592 * C3779) * C15401 +
           (C239 * C3345 - C82592 * C3530) * C15459 +
           (C239 * C3616 - C82592 * C3780) * C15402 +
           (C239 * C16304 - C82592 * C16399) * C15460 +
           (C239 * C16445 - C82592 * C16535) * C15403 +
           (C239 * C16303 - C82592 * C16400) * C15461 +
           (C239 * C16446 - C82592 * C16536) * C15404) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
             C82896 * C4299 - C25873 * C4108) *
                C168 +
            (C25720 * C441 - C25871 * C310 + C25721 * C1416 - C25872 * C1317 +
             C82896 * C4593 - C25873 * C4405) *
                C82581) *
               C82925 +
           ((C25875 - C25876 + C25877 - C25878 + C25879 - C25880) * C168 +
            (C26121 - C26122 + C26123 - C26124 + C26125 - C26126) * C82581) *
               C82909 +
           ((C25887 - C25888 + C25889 - C25890 + C25891 - C25892) * C168 +
            (C26127 - C26128 + C26129 - C26130 + C26131 - C26132) * C82581) *
               C82885) *
              C1149 +
          (((C25871 * C1155 - C25720 * C1265 + C25872 * C4108 - C25721 * C4299 +
             C25873 * C5690 - C82896 * C5904) *
                C168 +
            (C25871 * C1317 - C25720 * C1416 + C25872 * C4405 - C25721 * C4593 +
             C25873 * C5984 - C82896 * C6185) *
                C82581) *
               C82925 +
           ((C25871 * C1154 - C25720 * C1266 + C25872 * C4109 - C25721 * C4300 +
             C25873 * C5689 - C82896 * C5905) *
                C168 +
            (C25871 * C1318 - C25720 * C1417 + C25872 * C4406 - C25721 * C4594 +
             C25873 * C5985 - C82896 * C6186) *
                C82581) *
               C82909 +
           ((C25871 * C1153 - C25720 * C1267 + C25872 * C4110 - C25721 * C4301 +
             C25873 * C5688 - C82896 * C5906) *
                C168 +
            (C25871 * C1319 - C25720 * C1418 + C25872 * C4407 - C25721 * C4595 +
             C25873 * C5986 - C82896 * C6187) *
                C82581) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C25720 * C240 - C25871 * C102 + C25721 * C1265 - C25872 * C1155 +
            C82896 * C4299 - C25873 * C4108) *
               C1743 +
           (C25720 * C441 - C25871 * C310 + C25721 * C1416 - C25872 * C1317 +
            C82896 * C4593 - C25873 * C4405) *
               C82931 +
           (C28710 - C28711 + C28712 - C28713 + C28714 - C28715) * C1744 +
           (C28956 - C28957 + C28958 - C28959 + C28960 - C28961) * C82916 +
           (C28722 - C28723 + C28724 - C28725 + C28726 - C28727) * C1745 +
           (C28962 - C28963 + C28964 - C28965 + C28966 - C28967) * C82893) *
              C82523 * C1149 +
          ((C25871 * C1155 - C25720 * C1265 + C25872 * C4108 - C25721 * C4299 +
            C25873 * C5690 - C82896 * C5904) *
               C1743 +
           (C25871 * C1317 - C25720 * C1416 + C25872 * C4405 - C25721 * C4593 +
            C25873 * C5984 - C82896 * C6185) *
               C82931 +
           (C25871 * C3348 - C25720 * C3527 + C25872 * C4976 - C25721 * C5140 +
            C25873 * C18262 - C82896 * C18459) *
               C1744 +
           (C25871 * C3613 - C25720 * C3779 + C25872 * C5220 - C25721 * C5377 +
            C25873 * C18537 - C82896 * C18741) *
               C82916 +
           (C25871 * C3345 - C25720 * C3530 + C25872 * C16745 -
            C25721 * C16905 + C25873 * C18261 - C82896 * C18460) *
               C1745 +
           (C25871 * C3616 - C25720 * C3780 + C25872 * C16983 -
            C25721 * C17137 + C25873 * C18538 - C82896 * C18742) *
               C82893) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezx[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
             C82885 * C112 - C1651 * C104) *
                C239 +
            (C1641 * C503 - C1647 * C497 + C1642 * C504 - C1649 * C498 +
             C82885 * C505 - C1651 * C499) *
                C82592) *
               C82931 +
           ((C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C239 +
            (C3090 - C3091 + C3092 - C3093 + C3094 - C3095) * C82592) *
               C82916 +
           ((C2840 - C2841 + C2842 - C2843 + C2844 - C2845) * C239 +
            (C3096 - C3097 + C3098 - C3099 + C3100 - C3101) * C82592) *
               C82893) *
              C1149 +
          (((C1647 * C1155 - C1641 * C1164 + C1649 * C1154 - C1642 * C1162 +
             C1651 * C1153 - C82885 * C1160) *
                C239 +
            (C1647 * C1463 - C1641 * C1468 + C1649 * C1464 - C1642 * C1469 +
             C1651 * C1465 - C82885 * C1470) *
                C82592) *
               C82931 +
           ((C1647 * C3348 - C1641 * C3359 + C1649 * C3347 - C1642 * C3357 +
             C1651 * C3346 - C82885 * C3355) *
                C239 +
            (C1647 * C3859 - C1641 * C3865 + C1649 * C3860 - C1642 * C3866 +
             C1651 * C3861 - C82885 * C3867) *
                C82592) *
               C82916 +
           ((C1647 * C3345 - C1641 * C3353 + C1649 * C3344 - C1642 * C3351 +
             C1651 * C3343 - C82885 * C3349) *
                C239 +
            (C1647 * C3862 - C1641 * C3868 + C1649 * C3863 - C1642 * C3869 +
             C1651 * C3864 - C82885 * C3870) *
                C82592) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C108 - C92 * C102 + C82 * C110 - C94 * C103 + C83 * C112 -
            C96 * C104 + C84 * C114 - C98 * C105 + C85 * C116 - C100 * C106) *
               C239 +
           (C81 * C503 - C92 * C497 + C82 * C504 - C94 * C498 + C83 * C505 -
            C96 * C499 + C84 * C506 - C98 * C500 + C85 * C507 - C100 * C501) *
               C82592) *
              C82581 * C1149 +
          ((C92 * C1155 - C81 * C1164 + C94 * C1154 - C82 * C1162 +
            C96 * C1153 - C83 * C1160 + C98 * C1152 - C84 * C1158 +
            C100 * C1151 - C85 * C1156) *
               C239 +
           (C92 * C1463 - C81 * C1468 + C94 * C1464 - C82 * C1469 +
            C96 * C1465 - C83 * C1470 + C98 * C1466 - C84 * C1471 +
            C100 * C1467 - C85 * C1472) *
               C82592) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C239 +
            (C82925 * C503 - C13259 * C497 + C82909 * C504 - C13261 * C498 +
             C82885 * C505 - C13263 * C499) *
                C82592) *
               C13256 +
           ((C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C239 +
            (C14532 - C14533 + C14534 - C14535 + C14536 - C14537) * C82592) *
               C13257 +
           ((C14298 - C14299 + C14300 - C14301 + C14302 - C14303) * C239 +
            (C14538 - C14539 + C14540 - C14541 + C14542 - C14543) * C82592) *
               C82893) *
              C1149 +
          (((C13259 * C1155 - C82925 * C1164 + C13261 * C1154 - C82909 * C1162 +
             C13263 * C1153 - C82885 * C1160) *
                C239 +
            (C13259 * C1463 - C82925 * C1468 + C13261 * C1464 - C82909 * C1469 +
             C13263 * C1465 - C82885 * C1470) *
                C82592) *
               C13256 +
           ((C13259 * C3348 - C82925 * C3359 + C13261 * C3347 - C82909 * C3357 +
             C13263 * C3346 - C82885 * C3355) *
                C239 +
            (C13259 * C3859 - C82925 * C3865 + C13261 * C3860 - C82909 * C3866 +
             C13263 * C3861 - C82885 * C3867) *
                C82592) *
               C13257 +
           ((C13259 * C3345 - C82925 * C3353 + C13261 * C3344 - C82909 * C3351 +
             C13263 * C3343 - C82885 * C3349) *
                C239 +
            (C13259 * C3862 - C82925 * C3868 + C13261 * C3863 - C82909 * C3869 +
             C13263 * C3864 - C82885 * C3870) *
                C82592) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C239 +
            (C82523 * C503 - C15405 * C497) * C82592) *
               C15400 +
           ((C16004 - C16005) * C239 + (C16154 - C16155) * C82592) * C15401 +
           ((C16008 - C16009) * C239 + (C16156 - C16157) * C82592) * C15402 +
           ((C16012 - C16013) * C239 + (C16158 - C16159) * C82592) * C15403 +
           ((C16016 - C16017) * C239 + (C16160 - C16161) * C82592) * C15404) *
              C1149 +
          (((C15405 * C1155 - C82523 * C1164) * C239 +
            (C15405 * C1463 - C82523 * C1468) * C82592) *
               C15400 +
           ((C15405 * C3348 - C82523 * C3359) * C239 +
            (C15405 * C3859 - C82523 * C3865) * C82592) *
               C15401 +
           ((C15405 * C3345 - C82523 * C3353) * C239 +
            (C15405 * C3862 - C82523 * C3868) * C82592) *
               C15402 +
           ((C15405 * C16304 - C82523 * C16307) * C239 +
            (C15405 * C16579 - C82523 * C16581) * C82592) *
               C15403 +
           ((C15405 * C16303 - C82523 * C16305) * C239 +
            (C15405 * C16580 - C82523 * C16582) * C82592) *
               C15404) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
            C82885 * C112 - C13263 * C104) *
               C25871 +
           (C82925 * C503 - C13259 * C497 + C82909 * C504 - C13261 * C498 +
            C82885 * C505 - C13263 * C499) *
               C25720 +
           (C27404 - C27405 + C27406 - C27407 + C27408 - C27409) * C25872 +
           (C27656 - C27657 + C27658 - C27659 + C27660 - C27661) * C25721 +
           (C27416 - C27417 + C27418 - C27419 + C27420 - C27421) * C25873 +
           (C27662 - C27663 + C27664 - C27665 + C27666 - C27667) * C82896) *
              C82581 * C1149 +
          ((C27405 - C27404 + C27407 - C27406 + C27409 - C27408) * C25871 +
           (C27657 - C27656 + C27659 - C27658 + C27661 - C27660) * C25720 +
           (C27417 - C27416 + C27419 - C27418 + C27421 - C27420) * C25872 +
           (C27663 - C27662 + C27665 - C27664 + C27667 - C27666) * C25721 +
           (C13259 * C5690 - C82925 * C5695 + C13261 * C5689 - C82909 * C5693 +
            C13263 * C5688 - C82885 * C5691) *
               C25873 +
           (C13259 * C6262 - C82925 * C6265 + C13261 * C6263 - C82909 * C6266 +
            C13263 * C6264 - C82885 * C6267) *
               C82896) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C25871 +
            (C82523 * C503 - C15405 * C497) * C25720 +
            (C18542 - C18543) * C25872 + (C18822 - C18823) * C25721 +
            (C18546 - C18547) * C25873 + (C18824 - C18825) * C82896) *
               C82931 +
           ((C16004 - C16005) * C25871 + (C16154 - C16155) * C25720 +
            (C17734 - C17735) * C25872 + (C17988 - C17989) * C25721 +
            (C17742 - C17743) * C25873 + (C17990 - C17991) * C82896) *
               C82916 +
           ((C16008 - C16009) * C25871 + (C16156 - C16157) * C25720 +
            (C17738 - C17739) * C25872 + (C17992 - C17993) * C25721 +
            (C17746 - C17747) * C25873 + (C17994 - C17995) * C82896) *
               C82893) *
              C1149 +
          (((C18543 - C18542) * C25871 + (C18823 - C18822) * C25720 +
            (C18547 - C18546) * C25872 + (C18825 - C18824) * C25721 +
            (C15405 * C5690 - C82523 * C5695) * C25873 +
            (C15405 * C6262 - C82523 * C6265) * C82896) *
               C82931 +
           ((C17735 - C17734) * C25871 + (C17989 - C17988) * C25720 +
            (C17743 - C17742) * C25872 + (C17991 - C17990) * C25721 +
            (C15405 * C18262 - C82523 * C18265) * C25873 +
            (C15405 * C18817 - C82523 * C18819) * C82896) *
               C82916 +
           ((C17739 - C17738) * C25871 + (C17993 - C17992) * C25720 +
            (C17747 - C17746) * C25872 + (C17995 - C17994) * C25721 +
            (C15405 * C18261 - C82523 * C18263) * C25873 +
            (C15405 * C18818 - C82523 * C18820) * C82896) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
             C82893 * C1746 - C1745 * C1653) *
                C239 +
            (C82931 * C551 - C1743 * C497 + C82916 * C1055 - C1744 * C1003 +
             C82893 * C2323 - C1745 * C2241) *
                C82592) *
               C1641 +
           ((C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C239 +
            (C2328 - C2329 + C2330 - C2331 + C2332 - C2333) * C82592) *
               C1642 +
           ((C1767 - C1768 + C1769 - C1770 + C1771 - C1772) * C239 +
            (C2334 - C2335 + C2336 - C2337 + C2338 - C2339) * C82592) *
               C82885) *
              C1149 +
          (((C1743 * C1155 - C82931 * C1213 + C1744 * C3348 - C82916 * C3441 +
             C1745 * C3345 - C82893 * C3442) *
                C239 +
            (C1743 * C1463 - C82931 * C1515 + C1744 * C3859 - C82916 * C3945 +
             C1745 * C3862 - C82893 * C3946) *
                C82592) *
               C1641 +
           ((C1743 * C1154 - C82931 * C1214 + C1744 * C3347 - C82916 * C3443 +
             C1745 * C3344 - C82893 * C3444) *
                C239 +
            (C1743 * C1464 - C82931 * C1516 + C1744 * C3860 - C82916 * C3947 +
             C1745 * C3863 - C82893 * C3948) *
                C82592) *
               C1642 +
           ((C1743 * C1153 - C82931 * C1215 + C1744 * C3346 - C82916 * C3445 +
             C1745 * C3343 - C82893 * C3446) *
                C239 +
            (C1743 * C1465 - C82931 * C1517 + C1744 * C3861 - C82916 * C3949 +
             C1745 * C3864 - C82893 * C3950) *
                C82592) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C239 +
            (C82581 * C551 - C168 * C497) * C82592) *
               C81 +
           ((C182 - C183) * C239 + (C558 - C559) * C82592) * C82 +
           ((C186 - C187) * C239 + (C560 - C561) * C82592) * C83 +
           ((C190 - C191) * C239 + (C562 - C563) * C82592) * C84 +
           ((C194 - C195) * C239 + (C564 - C565) * C82592) * C85) *
              C1149 +
          (((C168 * C1155 - C82581 * C1213) * C239 +
            (C168 * C1463 - C82581 * C1515) * C82592) *
               C81 +
           ((C168 * C1154 - C82581 * C1214) * C239 +
            (C168 * C1464 - C82581 * C1516) * C82592) *
               C82 +
           ((C168 * C1153 - C82581 * C1215) * C239 +
            (C168 * C1465 - C82581 * C1517) * C82592) *
               C83 +
           ((C168 * C1152 - C82581 * C1216) * C239 +
            (C168 * C1466 - C82581 * C1518) * C82592) *
               C84 +
           ((C168 * C1151 - C82581 * C1217) * C239 +
            (C168 * C1467 - C82581 * C1519) * C82592) *
               C85) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C239 +
            (C13256 * C551 - C13339 * C497 + C13257 * C1055 - C13340 * C1003 +
             C82893 * C2323 - C13341 * C2241) *
                C82592) *
               C82925 +
           ((C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C239 +
            (C13856 - C13857 + C13858 - C13859 + C13860 - C13861) * C82592) *
               C82909 +
           ((C13355 - C13356 + C13357 - C13358 + C13359 - C13360) * C239 +
            (C13862 - C13863 + C13864 - C13865 + C13866 - C13867) * C82592) *
               C82885) *
              C1149 +
          (((C13339 * C1155 - C13256 * C1213 + C13340 * C3348 - C13257 * C3441 +
             C13341 * C3345 - C82893 * C3442) *
                C239 +
            (C13339 * C1463 - C13256 * C1515 + C13340 * C3859 - C13257 * C3945 +
             C13341 * C3862 - C82893 * C3946) *
                C82592) *
               C82925 +
           ((C13339 * C1154 - C13256 * C1214 + C13340 * C3347 - C13257 * C3443 +
             C13341 * C3344 - C82893 * C3444) *
                C239 +
            (C13339 * C1464 - C13256 * C1516 + C13340 * C3860 - C13257 * C3947 +
             C13341 * C3863 - C82893 * C3948) *
                C82592) *
               C82909 +
           ((C13339 * C1153 - C13256 * C1215 + C13340 * C3346 - C13257 * C3445 +
             C13341 * C3343 - C82893 * C3446) *
                C239 +
            (C13339 * C1465 - C13256 * C1517 + C13340 * C3861 - C13257 * C3949 +
             C13341 * C3864 - C82893 * C3950) *
                C82592) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15400 * C169 - C15457 * C102 + C15401 * C753 - C15458 * C695 +
            C15402 * C1746 - C15459 * C1653 + C15403 * C2653 - C15460 * C2527 +
            C15404 * C15462 - C15461 * C15407) *
               C239 +
           (C15400 * C551 - C15457 * C497 + C15401 * C1055 - C15458 * C1003 +
            C15402 * C2323 - C15459 * C2241 + C15403 * C3175 - C15460 * C3083 +
            C15404 * C15739 - C15461 * C15693) *
               C82592) *
              C82523 * C1149 +
          ((C15457 * C1155 - C15400 * C1213 + C15458 * C3348 - C15401 * C3441 +
            C15459 * C3345 - C15402 * C3442 + C15460 * C16304 -
            C15403 * C16353 + C15461 * C16303 - C15404 * C16354) *
               C239 +
           (C15457 * C1463 - C15400 * C1515 + C15458 * C3859 - C15401 * C3945 +
            C15459 * C3862 - C15402 * C3946 + C15460 * C16579 -
            C15403 * C16625 + C15461 * C16580 - C15404 * C16626) *
               C82592) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C25871 +
            (C82581 * C551 - C168 * C497) * C25720 + (C5823 - C5824) * C25872 +
            (C6358 - C6359) * C25721 + (C5827 - C5828) * C25873 +
            (C6360 - C6361) * C82896) *
               C82925 +
           ((C182 - C183) * C25871 + (C558 - C559) * C25720 +
            (C4207 - C4208) * C25872 + (C4770 - C4771) * C25721 +
            (C4215 - C4216) * C25873 + (C4772 - C4773) * C82896) *
               C82909 +
           ((C186 - C187) * C25871 + (C560 - C561) * C25720 +
            (C4211 - C4212) * C25872 + (C4774 - C4775) * C25721 +
            (C4219 - C4220) * C25873 + (C4776 - C4777) * C82896) *
               C82885) *
              C1149 +
          (((C5824 - C5823) * C25871 + (C6359 - C6358) * C25720 +
            (C5828 - C5827) * C25872 + (C6361 - C6360) * C25721 +
            (C168 * C5690 - C82581 * C5816) * C25873 +
            (C168 * C6262 - C82581 * C6354) * C82896) *
               C82925 +
           ((C4208 - C4207) * C25871 + (C4771 - C4770) * C25720 +
            (C4216 - C4215) * C25872 + (C4773 - C4772) * C25721 +
            (C168 * C5689 - C82581 * C5817) * C25873 +
            (C168 * C6263 - C82581 * C6355) * C82896) *
               C82909 +
           ((C4212 - C4211) * C25871 + (C4775 - C4774) * C25720 +
            (C4220 - C4219) * C25872 + (C4777 - C4776) * C25721 +
            (C168 * C5688 - C82581 * C5818) * C25873 +
            (C168 * C6264 - C82581 * C6356) * C82896) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
            C82893 * C1746 - C1745 * C1653) *
               C25871 +
           (C82931 * C551 - C1743 * C497 + C82916 * C1055 - C1744 * C1003 +
            C82893 * C2323 - C1745 * C2241) *
               C25720 +
           (C29380 - C29381 + C29382 - C29383 + C29384 - C29385) * C25872 +
           (C29890 - C29891 + C29892 - C29893 + C29894 - C29895) * C25721 +
           (C29392 - C29393 + C29394 - C29395 + C29396 - C29397) * C25873 +
           (C29896 - C29897 + C29898 - C29899 + C29900 - C29901) * C82896) *
              C82523 * C1149 +
          ((C29381 - C29380 + C29383 - C29382 + C29385 - C29384) * C25871 +
           (C29891 - C29890 + C29893 - C29892 + C29895 - C29894) * C25720 +
           (C29393 - C29392 + C29395 - C29394 + C29397 - C29396) * C25872 +
           (C29897 - C29896 + C29899 - C29898 + C29901 - C29900) * C25721 +
           (C1743 * C5690 - C82931 * C5816 + C1744 * C18262 - C82916 * C18357 +
            C1745 * C18261 - C82893 * C18358) *
               C25873 +
           (C1743 * C6262 - C82931 * C6354 + C1744 * C18817 - C82916 * C18899 +
            C1745 * C18818 - C82893 * C18900) *
               C82896) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82931 +
            C3268 * C82916 + C3269 * C82893) *
               C1641 +
           (C2418 + C2448 + C2449) * C1642 + (C2427 + C2450 + C2451) * C82885) *
              C1149 -
          (((C239 * C3532 - C607 * C3343 - C239 * C3864 + C82592 * C4025) *
                C82893 +
            (C239 * C3529 - C607 * C3346 - C239 * C3861 + C82592 * C4026) *
                C82916 +
            (C239 * C1267 - C607 * C1153 - C239 * C1465 + C82592 * C1564) *
                C82931) *
               C82885 +
           ((C239 * C3531 - C607 * C3344 - C239 * C3863 + C82592 * C4027) *
                C82893 +
            (C239 * C3528 - C607 * C3347 - C239 * C3860 + C82592 * C4028) *
                C82916 +
            (C239 * C1266 - C607 * C1154 - C239 * C1464 + C82592 * C1565) *
                C82931) *
               C1642 +
           ((C239 * C3530 - C607 * C3345 - C239 * C3862 + C82592 * C4029) *
                C82893 +
            (C239 * C3527 - C607 * C3348 - C239 * C3859 + C82592 * C4030) *
                C82916 +
            (C239 * C1265 - C607 * C1155 - C239 * C1463 + C82592 * C1566) *
                C82931) *
               C1641) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82581 *
               C81 +
           C643 * C82 + C644 * C83 + C645 * C84 + C646 * C85) *
              C1149 -
          ((C239 * C1269 - C607 * C1151 - C239 * C1467 + C82592 * C1562) *
               C82581 * C85 +
           (C239 * C1268 - C607 * C1152 - C239 * C1466 + C82592 * C1563) *
               C82581 * C84 +
           (C239 * C1267 - C607 * C1153 - C239 * C1465 + C82592 * C1564) *
               C82581 * C83 +
           (C239 * C1266 - C607 * C1154 - C239 * C1464 + C82592 * C1565) *
               C82581 * C82 +
           (C239 * C1265 - C607 * C1155 - C239 * C1463 + C82592 * C1566) *
               C82581 * C81) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C13256 +
            C3268 * C13257 + C3269 * C82893) *
               C82925 +
           (C13942 + C13943 + C13944) * C82909 +
           (C13945 + C13946 + C13947) * C82885) *
              C1149 -
          (((C239 * C3532 - C607 * C3343 - C239 * C3864 + C82592 * C4025) *
                C82893 +
            (C239 * C3529 - C607 * C3346 - C239 * C3861 + C82592 * C4026) *
                C13257 +
            (C239 * C1267 - C607 * C1153 - C239 * C1465 + C82592 * C1564) *
                C13256) *
               C82885 +
           ((C239 * C3531 - C607 * C3344 - C239 * C3863 + C82592 * C4027) *
                C82893 +
            (C239 * C3528 - C607 * C3347 - C239 * C3860 + C82592 * C4028) *
                C13257 +
            (C239 * C1266 - C607 * C1154 - C239 * C1464 + C82592 * C1565) *
                C13256) *
               C82909 +
           ((C239 * C3530 - C607 * C3345 - C239 * C3862 + C82592 * C4029) *
                C82893 +
            (C239 * C3527 - C607 * C3348 - C239 * C3859 + C82592 * C4030) *
                C13257 +
            (C239 * C1265 - C607 * C1155 - C239 * C1463 + C82592 * C1566) *
                C13256) *
               C82925) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C15400 +
           C3268 * C15401 + C3269 * C15402 + C16260 * C15403 +
           C16261 * C15404) *
              C82523 * C1149 -
          ((C239 * C16400 - C607 * C16303 - C239 * C16580 + C82592 * C16669) *
               C15404 +
           (C239 * C16399 - C607 * C16304 - C239 * C16579 + C82592 * C16670) *
               C15403 +
           (C239 * C3530 - C607 * C3345 - C239 * C3862 + C82592 * C4029) *
               C15402 +
           (C239 * C3527 - C607 * C3348 - C239 * C3859 + C82592 * C4030) *
               C15401 +
           (C239 * C1265 - C607 * C1155 - C239 * C1463 + C82592 * C1566) *
               C15400) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C25871 * C240 - C26354 * C102 - C25871 * C497 + C25720 * C608 +
            C25872 * C1265 - C26355 * C1155 - C25872 * C1463 + C25721 * C1566 +
            C25873 * C4299 - C26356 * C4108 - C25873 * C4683 + C82896 * C4854) *
               C82581 * C82925 +
           (C26394 + C26395 + C26396) * C82581 * C82909 +
           (C26397 + C26398 + C26399) * C82581 * C82885) *
              C1149 -
          ((C25873 * C5906 - C26356 * C5688 - C25873 * C6264 + C82896 * C6435 +
            C25872 * C4301 - C26355 * C4110 - C25872 * C4685 + C25721 * C4856 +
            C25871 * C1267 - C26354 * C1153 - C25871 * C1465 + C25720 * C1564) *
               C82581 * C82885 +
           (C25873 * C5905 - C26356 * C5689 - C25873 * C6263 + C82896 * C6436 +
            C25872 * C4300 - C26355 * C4109 - C25872 * C4684 + C25721 * C4855 +
            C25871 * C1266 - C26354 * C1154 - C25871 * C1464 + C25720 * C1565) *
               C82581 * C82909 +
           (C25873 * C5904 - C26356 * C5690 - C25873 * C6262 + C82896 * C6437 +
            C25872 * C4299 - C26355 * C4108 - C25872 * C4683 + C25721 * C4854 +
            C25871 * C1265 - C26354 * C1155 - C25871 * C1463 + C25720 * C1566) *
               C82581 * C82925) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C25871 * C240 - C26354 * C102 - C25871 * C497 + C25720 * C608 +
            C25872 * C1265 - C26355 * C1155 - C25872 * C1463 + C25721 * C1566 +
            C25873 * C4299 - C26356 * C4108 - C25873 * C4683 + C82896 * C4854) *
               C82931 +
           (C29226 + C29227 + C29228) * C82916 +
           (C29229 + C29230 + C29231) * C82893) *
              C82523 * C1149 -
          ((C25873 * C18460 - C26356 * C18261 - C25873 * C18818 +
            C82896 * C18987 + C25872 * C16905 - C26355 * C16745 -
            C25872 * C17213 + C25721 * C17367 + C25871 * C3530 -
            C26354 * C3345 - C25871 * C3862 + C25720 * C4029) *
               C82893 +
           (C25873 * C18459 - C26356 * C18262 - C25873 * C18817 +
            C82896 * C18988 + C25872 * C5140 - C26355 * C4976 - C25872 * C5454 +
            C25721 * C5613 + C25871 * C3527 - C26354 * C3348 - C25871 * C3859 +
            C25720 * C4030) *
               C82916 +
           (C25873 * C5904 - C26356 * C5690 - C25873 * C6262 + C82896 * C6437 +
            C25872 * C4299 - C26355 * C4108 - C25872 * C4683 + C25721 * C4854 +
            C25871 * C1265 - C26354 * C1155 - C25871 * C1463 + C25720 * C1566) *
               C82931) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C80234 * C108 - C80274 * C102 - C80234 * C109 + C82528 * C120 +
             C80230 * C110 - C80269 * C103 - C80230 * C111 + C82536 * C121 +
             C80280 * C112 - C44665 * C104 - C80280 * C113 + C44656 * C122) *
                C52324 +
            (C48704 + C48705 + C48706) * C82679) *
               C82863 +
           ((C45459 + C45460 + C45461) * C52324 +
            (C47783 + C47784 + C47785) * C82679) *
               C82639) *
              C82938 * C82939 * C90 -
          (((C80280 * C7860 - C44665 * C7859 - C80280 * C7861 + C44656 * C7862 +
             C80230 * C3355 - C80269 * C3346 - C80230 * C3356 + C82536 * C3364 +
             C80234 * C3357 - C80274 * C3347 - C80234 * C3358 +
             C82528 * C3365) *
                C82679 +
            (C80280 * C698 - C44665 * C692 - C80280 * C699 + C44656 * C707 +
             C80230 * C700 - C80269 * C693 - C80230 * C701 + C82536 * C708 +
             C80234 * C702 - C80274 * C694 - C80234 * C703 + C82528 * C709) *
                C52324) *
               C82639 +
           ((C80280 * C1158 - C44665 * C1152 - C80280 * C1159 + C44656 * C1167 +
             C80230 * C1160 - C80269 * C1153 - C80230 * C1161 + C82536 * C1168 +
             C80234 * C1162 - C80274 * C1154 - C80234 * C1163 +
             C82528 * C1169) *
                C82679 +
            (C80280 * C114 - C44665 * C105 - C80280 * C115 + C44656 * C123 +
             C80230 * C112 - C80269 * C104 - C80230 * C113 + C82536 * C122 +
             C80234 * C110 - C80274 * C103 - C80234 * C111 + C82528 * C121) *
                C52324) *
               C82863) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexy[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C80234 +
            (C82863 * C175 - C6584 * C109 + C82639 * C758 - C6585 * C705) *
                C82528 +
            (C6587 - C6588 + C6589 - C6590) * C80230 +
            (C6591 - C6592 + C6593 - C6594) * C82536 +
            (C6595 - C6596 + C6597 - C6598) * C80280 +
            (C6599 - C6600 + C6601 - C6602) * C44656) *
               C52324 +
           ((C12468 - C12469 + C12470 - C12471) * C80234 +
            (C12472 - C12473 + C12474 - C12475) * C82528 +
            (C10535 - C10536 + C10537 - C10538) * C80230 +
            (C10539 - C10540 + C10541 - C10542) * C82536 +
            (C10543 - C10544 + C10545 - C10546) * C80280 +
            (C10547 - C10548 + C10549 - C10550) * C44656) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C6588 - C6587 + C6590 - C6589) * C80234 +
            (C6592 - C6591 + C6594 - C6593) * C82528 +
            (C6596 - C6595 + C6598 - C6597) * C80230 +
            (C6600 - C6599 + C6602 - C6601) * C82536 +
            (C6604 - C6603 + C6606 - C6605) * C80280 +
            (C6608 - C6607 + C6610 - C6609) * C44656) *
               C52324 +
           ((C10536 - C10535 + C10538 - C10537) * C80234 +
            (C10540 - C10539 + C10542 - C10541) * C82528 +
            (C10544 - C10543 + C10546 - C10545) * C80230 +
            (C10548 - C10547 + C10550 - C10549) * C82536 +
            (C6584 * C1152 - C82863 * C1216 + C6585 * C7859 - C82639 * C7929) *
                C80280 +
            (C6584 * C1159 - C82863 * C1221 + C6585 * C7861 - C82639 * C7930) *
                C44656) *
               C82679) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexz[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C80234 +
            (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
                C82528 +
            (C52461 - C52462 + C52463 - C52464) * C80230 +
            (C52465 - C52466 + C52467 - C52468) * C82536 +
            (C52469 - C52470 + C52471 - C52472) * C80280 +
            (C52473 - C52474 + C52475 - C52476) * C44656) *
               C82863 +
           ((C55448 - C55449 + C55450 - C55451) * C80234 +
            (C55452 - C55453 + C55454 - C55455) * C82528 +
            (C54487 - C54488 + C54489 - C54490) * C80230 +
            (C54491 - C54492 + C54493 - C54494) * C82536 +
            (C59142 - C59143 + C59144 - C59145) * C80280 +
            (C59146 - C59147 + C59148 - C59149) * C44656) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C52462 - C52461 + C52464 - C52463) * C80234 +
            (C52466 - C52465 + C52468 - C52467) * C82528 +
            (C52470 - C52469 + C52472 - C52471) * C80230 +
            (C52474 - C52473 + C52476 - C52475) * C82536 +
            (C52478 - C52477 + C52480 - C52479) * C80280 +
            (C52482 - C52481 + C52484 - C52483) * C44656) *
               C82863 +
           ((C54488 - C54487 + C54490 - C54489) * C80234 +
            (C54492 - C54491 + C54494 - C54493) * C82528 +
            (C59143 - C59142 + C59145 - C59144) * C80230 +
            (C59147 - C59146 + C59149 - C59148) * C82536 +
            (C52458 * C692 - C52324 * C808 + C52459 * C7859 - C82679 * C7997) *
                C80280 +
            (C52458 * C699 - C52324 * C813 + C52459 * C7861 - C82679 * C7998) *
                C44656) *
               C82639) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82528 * C108 - C80234 * C102 + C82536 * C110 - C80230 * C103 +
             C44656 * C112 - C80280 * C104) *
                C6584 +
            (C82528 * C316 - C80234 * C310 + C82536 * C317 - C80230 * C311 +
             C44656 * C318 - C80280 * C312) *
                C82863 +
            (C45687 - C45688 + C45689 - C45690 + C45691 - C45692) * C6585 +
            (C45693 - C45694 + C45695 - C45696 + C45697 - C45698) * C82639) *
               C52324 +
           ((C49001 - C49002 + C49003 - C49004 + C49005 - C49006) * C6584 +
            (C49007 - C49008 + C49009 - C49010 + C49011 - C49012) * C82863 +
            (C48080 - C48081 + C48082 - C48083 + C48084 - C48085) * C6585 +
            (C48086 - C48087 + C48088 - C48089 + C48090 - C48091) * C82639) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C80234 * C103 - C82528 * C110 + C80230 * C104 - C82536 * C112 +
             C80280 * C105 - C44656 * C114) *
                C6584 +
            (C80234 * C311 - C82528 * C317 + C80230 * C312 - C82536 * C318 +
             C80280 * C313 - C44656 * C319) *
                C82863 +
            (C80234 * C694 - C82528 * C702 + C80230 * C693 - C82536 * C700 +
             C80280 * C692 - C44656 * C698) *
                C6585 +
            (C80234 * C858 - C82528 * C863 + C80230 * C859 - C82536 * C864 +
             C80280 * C860 - C44656 * C865) *
                C82639) *
               C52324 +
           ((C80234 * C1154 - C82528 * C1162 + C80230 * C1153 - C82536 * C1160 +
             C80280 * C1152 - C44656 * C1158) *
                C6584 +
            (C80234 * C1318 - C82528 * C1323 + C80230 * C1319 - C82536 * C1324 +
             C80280 * C1320 - C44656 * C1325) *
                C82863 +
            (C80234 * C3347 - C82528 * C3357 + C80230 * C3346 - C82536 * C3355 +
             C80280 * C7859 - C44656 * C7860) *
                C6585 +
            (C80234 * C3614 - C82528 * C3620 + C80230 * C3615 - C82536 * C3621 +
             C80280 * C8065 - C44656 * C8066) *
                C82639) *
               C82679) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C6584 * C169 - C6812 * C102 - C6584 * C310 + C82863 * C365 +
             C6585 * C753 - C6813 * C695 - C6585 * C857 + C82639 * C913) *
                C82528 +
            (C6851 + C6852) * C82536 + (C6853 + C6854) * C44656) *
               C52324 +
           ((C12782 + C12783) * C82528 + (C10885 + C10886) * C82536 +
            (C10887 + C10888) * C44656) *
               C82679) *
              C82938 * C82939 * C90 -
          (((C6585 * C7929 - C6813 * C7859 - C6585 * C8065 + C82639 * C8133 +
             C6584 * C1216 - C6812 * C1152 - C6584 * C1320 + C82863 * C1370) *
                C44656 +
            (C10888 + C10887) * C82536 + (C10886 + C10885) * C82528) *
               C82679 +
           ((C6856 + C6855) * C44656 + (C6854 + C6853) * C82536 +
            (C6852 + C6851) * C82528) *
               C52324) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C6584 +
            (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
                C82863 +
            (C55448 - C55449 + C55450 - C55451) * C6585 +
            (C55758 - C55759 + C55760 - C55761) * C82639) *
               C82528 +
           ((C52461 - C52462 + C52463 - C52464) * C6584 +
            (C52683 - C52684 + C52685 - C52686) * C82863 +
            (C54487 - C54488 + C54489 - C54490) * C6585 +
            (C54818 - C54819 + C54820 - C54821) * C82639) *
               C82536 +
           ((C52469 - C52470 + C52471 - C52472) * C6584 +
            (C52687 - C52688 + C52689 - C52690) * C82863 +
            (C59142 - C59143 + C59144 - C59145) * C6585 +
            (C59444 - C59445 + C59446 - C59447) * C82639) *
               C44656) *
              C82938 * C82939 * C90 +
          (((C52462 - C52461 + C52464 - C52463) * C6584 +
            (C52684 - C52683 + C52686 - C52685) * C82863 +
            (C54488 - C54487 + C54490 - C54489) * C6585 +
            (C54819 - C54818 + C54821 - C54820) * C82639) *
               C82528 +
           ((C52470 - C52469 + C52472 - C52471) * C6584 +
            (C52688 - C52687 + C52690 - C52689) * C82863 +
            (C59143 - C59142 + C59145 - C59144) * C6585 +
            (C59445 - C59444 + C59447 - C59446) * C82639) *
               C82536 +
           ((C52478 - C52477 + C52480 - C52479) * C6584 +
            (C52692 - C52691 + C52694 - C52693) * C82863 +
            (C52458 * C692 - C52324 * C808 + C52459 * C7859 - C82679 * C7997) *
                C6585 +
            (C52458 * C860 - C52324 * C959 + C52459 * C8065 - C82679 * C8200) *
                C82639) *
               C44656) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezx[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82528 * C108 - C80234 * C102 + C82536 * C110 - C80230 * C103 +
             C44656 * C112 - C80280 * C104) *
                C52458 +
            (C82528 * C503 - C80234 * C497 + C82536 * C504 - C80230 * C498 +
             C44656 * C505 - C80280 * C499) *
                C52324 +
            (C49001 - C49002 + C49003 - C49004 + C49005 - C49006) * C52459 +
            (C49307 - C49308 + C49309 - C49310 + C49311 - C49312) * C82679) *
               C82863 +
           ((C45687 - C45688 + C45689 - C45690 + C45691 - C45692) * C52458 +
            (C45933 - C45934 + C45935 - C45936 + C45937 - C45938) * C52324 +
            (C48080 - C48081 + C48082 - C48083 + C48084 - C48085) * C52459 +
            (C48386 - C48387 + C48388 - C48389 + C48390 - C48391) * C82679) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C80234 * C103 - C82528 * C110 + C80230 * C104 - C82536 * C112 +
             C80280 * C105 - C44656 * C114) *
                C52458 +
            (C80234 * C498 - C82528 * C504 + C80230 * C499 - C82536 * C505 +
             C80280 * C500 - C44656 * C506) *
                C52324 +
            (C80234 * C1154 - C82528 * C1162 + C80230 * C1153 - C82536 * C1160 +
             C80280 * C1152 - C44656 * C1158) *
                C52459 +
            (C80234 * C1464 - C82528 * C1469 + C80230 * C1465 - C82536 * C1470 +
             C80280 * C1466 - C44656 * C1471) *
                C82679) *
               C82863 +
           ((C80234 * C694 - C82528 * C702 + C80230 * C693 - C82536 * C700 +
             C80280 * C692 - C44656 * C698) *
                C52458 +
            (C80234 * C1004 - C82528 * C1009 + C80230 * C1005 - C82536 * C1010 +
             C80280 * C1006 - C44656 * C1011) *
                C52324 +
            (C80234 * C3347 - C82528 * C3357 + C80230 * C3346 - C82536 * C3355 +
             C80280 * C7859 - C44656 * C7860) *
                C52459 +
            (C80234 * C3860 - C82528 * C3866 + C80230 * C3861 - C82536 * C3867 +
             C80280 * C8267 - C44656 * C8268) *
                C82679) *
               C82639) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezy[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C52458 +
            (C82863 * C551 - C6584 * C497 + C82639 * C1055 - C6585 * C1003) *
                C52324 +
            (C12468 - C12469 + C12470 - C12471) * C52459 +
            (C13078 - C13079 + C13080 - C13081) * C82679) *
               C82528 +
           ((C6587 - C6588 + C6589 - C6590) * C52458 +
            (C7057 - C7058 + C7059 - C7060) * C52324 +
            (C10535 - C10536 + C10537 - C10538) * C52459 +
            (C11191 - C11192 + C11193 - C11194) * C82679) *
               C82536 +
           ((C6595 - C6596 + C6597 - C6598) * C52458 +
            (C7061 - C7062 + C7063 - C7064) * C52324 +
            (C10543 - C10544 + C10545 - C10546) * C52459 +
            (C11195 - C11196 + C11197 - C11198) * C82679) *
               C44656) *
              C82938 * C82939 * C90 +
          (((C6588 - C6587 + C6590 - C6589) * C52458 +
            (C7058 - C7057 + C7060 - C7059) * C52324 +
            (C10536 - C10535 + C10538 - C10537) * C52459 +
            (C11192 - C11191 + C11194 - C11193) * C82679) *
               C82528 +
           ((C6596 - C6595 + C6598 - C6597) * C52458 +
            (C7062 - C7061 + C7064 - C7063) * C52324 +
            (C10544 - C10543 + C10546 - C10545) * C52459 +
            (C11196 - C11195 + C11198 - C11197) * C82679) *
               C82536 +
           ((C6604 - C6603 + C6606 - C6605) * C52458 +
            (C7066 - C7065 + C7068 - C7067) * C52324 +
            (C6584 * C1152 - C82863 * C1216 + C6585 * C7859 - C82639 * C7929) *
                C52459 +
            (C6584 * C1466 - C82863 * C1518 + C6585 * C8267 - C82639 * C8335) *
                C82679) *
               C44656) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezz[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52458 * C240 - C52892 * C102 - C52458 * C497 + C52324 * C608 +
             C52459 * C1265 - C52893 * C1155 - C52459 * C1463 +
             C82679 * C1566) *
                C82863 +
            (C56084 + C56085) * C82639) *
               C82528 +
           ((C52931 + C52932) * C82863 + (C55150 + C55151) * C82639) * C82536 +
           ((C52933 + C52934) * C82863 + (C59754 + C59755) * C82639) * C44656) *
              C82938 * C82939 * C90 -
          (((C52459 * C7997 - C52893 * C7859 - C52459 * C8267 + C82679 * C8402 +
             C52458 * C808 - C52892 * C692 - C52458 * C1006 + C52324 * C1103) *
                C82639 +
            (C52936 + C52935) * C82863) *
               C44656 +
           ((C59755 + C59754) * C82639 + (C52934 + C52933) * C82863) * C82536 +
           ((C55151 + C55150) * C82639 + (C52932 + C52931) * C82863) * C82528) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexx[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C80234 * C108 - C80274 * C102 - C80234 * C109 + C82528 * C120 +
             C80230 * C110 - C80269 * C103 - C80230 * C111 + C82536 * C121 +
             C80280 * C112 - C44665 * C104 - C80280 * C113 + C44656 * C122) *
                C52324 +
            (C48704 + C48705 + C48706) * C82679) *
               C82863 +
           ((C45459 + C45460 + C45461) * C52324 +
            (C47783 + C47784 + C47785) * C82679) *
               C82639) *
              C82938 * C688 -
          (((C80280 * C3349 - C44665 * C3343 - C80280 * C3350 + C44656 * C3361 +
             C80230 * C3351 - C80269 * C3344 - C80230 * C3352 + C82536 * C3362 +
             C80234 * C3353 - C80274 * C3345 - C80234 * C3354 +
             C82528 * C3363) *
                C82679 +
            (C45464 + C45463 + C45462) * C52324) *
               C82639 +
           ((C47785 + C47784 + C47783) * C82679 +
            (C45461 + C45460 + C45459) * C52324) *
               C82863) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eexy[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C80234 +
            (C82863 * C175 - C6584 * C109 + C82639 * C758 - C6585 * C705) *
                C82528 +
            (C6587 - C6588 + C6589 - C6590) * C80230 +
            (C6591 - C6592 + C6593 - C6594) * C82536 +
            (C6595 - C6596 + C6597 - C6598) * C80280 +
            (C6599 - C6600 + C6601 - C6602) * C44656) *
               C52324 +
           ((C12468 - C12469 + C12470 - C12471) * C80234 +
            (C12472 - C12473 + C12474 - C12475) * C82528 +
            (C10535 - C10536 + C10537 - C10538) * C80230 +
            (C10539 - C10540 + C10541 - C10542) * C82536 +
            (C10543 - C10544 + C10545 - C10546) * C80280 +
            (C10547 - C10548 + C10549 - C10550) * C44656) *
               C82679) *
              C82938 * C688 +
          (((C6584 * C695 - C82863 * C753 + C6585 * C1653 - C82639 * C1746) *
                C80234 +
            (C6584 * C705 - C82863 * C758 + C6585 * C1658 - C82639 * C1750) *
                C82528 +
            (C6584 * C694 - C82863 * C754 + C6585 * C1654 - C82639 * C1747) *
                C80230 +
            (C6584 * C703 - C82863 * C759 + C6585 * C1660 - C82639 * C1751) *
                C82536 +
            (C6584 * C693 - C82863 * C755 + C6585 * C1655 - C82639 * C1748) *
                C80280 +
            (C6584 * C701 - C82863 * C760 + C6585 * C1662 - C82639 * C1752) *
                C44656) *
               C52324 +
           ((C6584 * C3348 - C82863 * C3441 + C6585 * C3345 - C82639 * C3442) *
                C80234 +
            (C6584 * C3360 - C82863 * C3447 + C6585 * C3354 - C82639 * C3448) *
                C82528 +
            (C6584 * C3347 - C82863 * C3443 + C6585 * C3344 - C82639 * C3444) *
                C80230 +
            (C6584 * C3358 - C82863 * C3449 + C6585 * C3352 - C82639 * C3450) *
                C82536 +
            (C6584 * C3346 - C82863 * C3445 + C6585 * C3343 - C82639 * C3446) *
                C80280 +
            (C6584 * C3356 - C82863 * C3451 + C6585 * C3350 - C82639 * C3452) *
                C44656) *
               C82679) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eexz[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C80234 +
            (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
                C82528 +
            (C52461 - C52462 + C52463 - C52464) * C80230 +
            (C52465 - C52466 + C52467 - C52468) * C82536 +
            (C52469 - C52470 + C52471 - C52472) * C80280 +
            (C52473 - C52474 + C52475 - C52476) * C44656) *
               C82863 +
           ((C55448 - C55449 + C55450 - C55451) * C80234 +
            (C55452 - C55453 + C55454 - C55455) * C82528 +
            (C54487 - C54488 + C54489 - C54490) * C80230 +
            (C54491 - C54492 + C54493 - C54494) * C82536 +
            (C59142 - C59143 + C59144 - C59145) * C80280 +
            (C59146 - C59147 + C59148 - C59149) * C44656) *
               C82639) *
              C82938 * C688 +
          (((C55449 - C55448 + C55451 - C55450) * C80234 +
            (C55453 - C55452 + C55455 - C55454) * C82528 +
            (C54488 - C54487 + C54490 - C54489) * C80230 +
            (C54492 - C54491 + C54494 - C54493) * C82536 +
            (C59143 - C59142 + C59145 - C59144) * C80280 +
            (C59147 - C59146 + C59149 - C59148) * C44656) *
               C82863 +
           ((C55457 - C55456 + C55459 - C55458) * C80234 +
            (C55461 - C55460 + C55463 - C55462) * C82528 +
            (C54496 - C54495 + C54498 - C54497) * C80230 +
            (C54500 - C54499 + C54502 - C54501) * C82536 +
            (C52458 * C1655 - C52324 * C1854 + C52459 * C3343 -
             C82679 * C3532) *
                C80280 +
            (C52458 * C1662 - C52324 * C1858 + C52459 * C3350 -
             C82679 * C3538) *
                C44656) *
               C82639) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyx[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82528 * C108 - C80234 * C102 + C82536 * C110 - C80230 * C103 +
             C44656 * C112 - C80280 * C104) *
                C6584 +
            (C82528 * C316 - C80234 * C310 + C82536 * C317 - C80230 * C311 +
             C44656 * C318 - C80280 * C312) *
                C82863 +
            (C45687 - C45688 + C45689 - C45690 + C45691 - C45692) * C6585 +
            (C45693 - C45694 + C45695 - C45696 + C45697 - C45698) * C82639) *
               C52324 +
           ((C49001 - C49002 + C49003 - C49004 + C49005 - C49006) * C6584 +
            (C49007 - C49008 + C49009 - C49010 + C49011 - C49012) * C82863 +
            (C48080 - C48081 + C48082 - C48083 + C48084 - C48085) * C6585 +
            (C48086 - C48087 + C48088 - C48089 + C48090 - C48091) * C82639) *
               C82679) *
              C82938 * C688 +
          (((C45688 - C45687 + C45690 - C45689 + C45692 - C45691) * C6584 +
            (C45694 - C45693 + C45696 - C45695 + C45698 - C45697) * C82863 +
            (C45700 - C45699 + C45702 - C45701 + C45704 - C45703) * C6585 +
            (C45706 - C45705 + C45708 - C45707 + C45710 - C45709) * C82639) *
               C52324 +
           ((C48081 - C48080 + C48083 - C48082 + C48085 - C48084) * C6584 +
            (C48087 - C48086 + C48089 - C48088 + C48091 - C48090) * C82863 +
            (C80234 * C3345 - C82528 * C3353 + C80230 * C3344 - C82536 * C3351 +
             C80280 * C3343 - C44656 * C3349) *
                C6585 +
            (C80234 * C3616 - C82528 * C3622 + C80230 * C3617 - C82536 * C3623 +
             C80280 * C3618 - C44656 * C3624) *
                C82639) *
               C82679) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyy[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C6584 * C169 - C6812 * C102 - C6584 * C310 + C82863 * C365 +
             C6585 * C753 - C6813 * C695 - C6585 * C857 + C82639 * C913) *
                C82528 +
            (C6851 + C6852) * C82536 + (C6853 + C6854) * C44656) *
               C52324 +
           ((C12782 + C12783) * C82528 + (C10885 + C10886) * C82536 +
            (C10887 + C10888) * C44656) *
               C82679) *
              C82938 * C688 -
          (((C6585 * C3446 - C6813 * C3343 - C6585 * C3618 + C82639 * C3699 +
             C6584 * C3445 - C6812 * C3346 - C6584 * C3615 + C82863 * C3700) *
                C44656 +
            (C6585 * C3444 - C6813 * C3344 - C6585 * C3617 + C82639 * C3701 +
             C6584 * C3443 - C6812 * C3347 - C6584 * C3614 + C82863 * C3702) *
                C82536 +
            (C6585 * C3442 - C6813 * C3345 - C6585 * C3616 + C82639 * C3703 +
             C6584 * C3441 - C6812 * C3348 - C6584 * C3613 + C82863 * C3704) *
                C82528) *
               C82679 +
           ((C6585 * C1748 - C6813 * C1655 - C6585 * C1952 + C82639 * C2037 +
             C6584 * C755 - C6812 * C693 - C6584 * C859 + C82863 * C911) *
                C44656 +
            (C6585 * C1747 - C6813 * C1654 - C6585 * C1951 + C82639 * C2036 +
             C6584 * C754 - C6812 * C694 - C6584 * C858 + C82863 * C912) *
                C82536 +
            (C6585 * C1746 - C6813 * C1653 - C6585 * C1950 + C82639 * C2035 +
             C6584 * C753 - C6812 * C695 - C6584 * C857 + C82863 * C913) *
                C82528) *
               C52324) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyz[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C6584 +
            (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
                C82863 +
            (C55448 - C55449 + C55450 - C55451) * C6585 +
            (C55758 - C55759 + C55760 - C55761) * C82639) *
               C82528 +
           ((C52461 - C52462 + C52463 - C52464) * C6584 +
            (C52683 - C52684 + C52685 - C52686) * C82863 +
            (C54487 - C54488 + C54489 - C54490) * C6585 +
            (C54818 - C54819 + C54820 - C54821) * C82639) *
               C82536 +
           ((C52469 - C52470 + C52471 - C52472) * C6584 +
            (C52687 - C52688 + C52689 - C52690) * C82863 +
            (C59142 - C59143 + C59144 - C59145) * C6585 +
            (C59444 - C59445 + C59446 - C59447) * C82639) *
               C44656) *
              C82938 * C688 +
          (((C55449 - C55448 + C55451 - C55450) * C6584 +
            (C55759 - C55758 + C55761 - C55760) * C82863 +
            (C55457 - C55456 + C55459 - C55458) * C6585 +
            (C55763 - C55762 + C55765 - C55764) * C82639) *
               C82528 +
           ((C54488 - C54487 + C54490 - C54489) * C6584 +
            (C54819 - C54818 + C54821 - C54820) * C82863 +
            (C54496 - C54495 + C54498 - C54497) * C6585 +
            (C54823 - C54822 + C54825 - C54824) * C82639) *
               C82536 +
           ((C59143 - C59142 + C59145 - C59144) * C6584 +
            (C59445 - C59444 + C59447 - C59446) * C82863 +
            (C52458 * C1655 - C52324 * C1854 + C52459 * C3343 -
             C82679 * C3532) *
                C6585 +
            (C52458 * C1952 - C52324 * C2157 + C52459 * C3618 -
             C82679 * C3784) *
                C82639) *
               C44656) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eezx[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82528 * C108 - C80234 * C102 + C82536 * C110 - C80230 * C103 +
             C44656 * C112 - C80280 * C104) *
                C52458 +
            (C82528 * C503 - C80234 * C497 + C82536 * C504 - C80230 * C498 +
             C44656 * C505 - C80280 * C499) *
                C52324 +
            (C49001 - C49002 + C49003 - C49004 + C49005 - C49006) * C52459 +
            (C49307 - C49308 + C49309 - C49310 + C49311 - C49312) * C82679) *
               C82863 +
           ((C45687 - C45688 + C45689 - C45690 + C45691 - C45692) * C52458 +
            (C45933 - C45934 + C45935 - C45936 + C45937 - C45938) * C52324 +
            (C48080 - C48081 + C48082 - C48083 + C48084 - C48085) * C52459 +
            (C48386 - C48387 + C48388 - C48389 + C48390 - C48391) * C82679) *
               C82639) *
              C82938 * C688 +
          (((C45688 - C45687 + C45690 - C45689 + C45692 - C45691) * C52458 +
            (C45934 - C45933 + C45936 - C45935 + C45938 - C45937) * C52324 +
            (C48081 - C48080 + C48083 - C48082 + C48085 - C48084) * C52459 +
            (C48387 - C48386 + C48389 - C48388 + C48391 - C48390) * C82679) *
               C82863 +
           ((C45700 - C45699 + C45702 - C45701 + C45704 - C45703) * C52458 +
            (C45940 - C45939 + C45942 - C45941 + C45944 - C45943) * C52324 +
            (C80234 * C3345 - C82528 * C3353 + C80230 * C3344 - C82536 * C3351 +
             C80280 * C3343 - C44656 * C3349) *
                C52459 +
            (C80234 * C3862 - C82528 * C3868 + C80230 * C3863 - C82536 * C3869 +
             C80280 * C3864 - C44656 * C3870) *
                C82679) *
               C82639) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eezy[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C52458 +
            (C82863 * C551 - C6584 * C497 + C82639 * C1055 - C6585 * C1003) *
                C52324 +
            (C12468 - C12469 + C12470 - C12471) * C52459 +
            (C13078 - C13079 + C13080 - C13081) * C82679) *
               C82528 +
           ((C6587 - C6588 + C6589 - C6590) * C52458 +
            (C7057 - C7058 + C7059 - C7060) * C52324 +
            (C10535 - C10536 + C10537 - C10538) * C52459 +
            (C11191 - C11192 + C11193 - C11194) * C82679) *
               C82536 +
           ((C6595 - C6596 + C6597 - C6598) * C52458 +
            (C7061 - C7062 + C7063 - C7064) * C52324 +
            (C10543 - C10544 + C10545 - C10546) * C52459 +
            (C11195 - C11196 + C11197 - C11198) * C82679) *
               C44656) *
              C82938 * C688 +
          (((C6584 * C695 - C82863 * C753 + C6585 * C1653 - C82639 * C1746) *
                C52458 +
            (C6584 * C1003 - C82863 * C1055 + C6585 * C2241 - C82639 * C2323) *
                C52324 +
            (C6584 * C3348 - C82863 * C3441 + C6585 * C3345 - C82639 * C3442) *
                C52459 +
            (C6584 * C3859 - C82863 * C3945 + C6585 * C3862 - C82639 * C3946) *
                C82679) *
               C82528 +
           ((C6584 * C694 - C82863 * C754 + C6585 * C1654 - C82639 * C1747) *
                C52458 +
            (C6584 * C1004 - C82863 * C1056 + C6585 * C2242 - C82639 * C2324) *
                C52324 +
            (C6584 * C3347 - C82863 * C3443 + C6585 * C3344 - C82639 * C3444) *
                C52459 +
            (C6584 * C3860 - C82863 * C3947 + C6585 * C3863 - C82639 * C3948) *
                C82679) *
               C82536 +
           ((C6584 * C693 - C82863 * C755 + C6585 * C1655 - C82639 * C1748) *
                C52458 +
            (C6584 * C1005 - C82863 * C1057 + C6585 * C2243 - C82639 * C2325) *
                C52324 +
            (C6584 * C3346 - C82863 * C3445 + C6585 * C3343 - C82639 * C3446) *
                C52459 +
            (C6584 * C3861 - C82863 * C3949 + C6585 * C3864 - C82639 * C3950) *
                C82679) *
               C44656) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eezz[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52458 * C240 - C52892 * C102 - C52458 * C497 + C52324 * C608 +
             C52459 * C1265 - C52893 * C1155 - C52459 * C1463 +
             C82679 * C1566) *
                C82863 +
            (C56084 + C56085) * C82639) *
               C82528 +
           ((C52931 + C52932) * C82863 + (C55150 + C55151) * C82639) * C82536 +
           ((C52933 + C52934) * C82863 + (C59754 + C59755) * C82639) * C44656) *
              C82938 * C688 -
          (((C52459 * C3532 - C52893 * C3343 - C52459 * C3864 + C82679 * C4025 +
             C52458 * C1854 - C52892 * C1655 - C52458 * C2243 +
             C52324 * C2415) *
                C82639 +
            (C59755 + C59754) * C82863) *
               C44656 +
           ((C55153 + C55152) * C82639 + (C55151 + C55150) * C82863) * C82536 +
           ((C56087 + C56086) * C82639 + (C56085 + C56084) * C82863) * C82528) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eexx[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C80234 * C108 - C80274 * C102 - C80234 * C109 + C82528 * C120 +
             C80230 * C110 - C80269 * C103 - C80230 * C111 + C82536 * C121 +
             C80280 * C112 - C44665 * C104 - C80280 * C113 + C44656 * C122) *
                C52324 +
            (C48704 + C48705 + C48706) * C82679) *
               C82863 +
           ((C45459 + C45460 + C45461) * C52324 +
            (C47783 + C47784 + C47785) * C82679) *
               C82639) *
              C1149 -
          (((C80280 * C4977 - C44665 * C4974 - C80280 * C4978 + C44656 * C4983 +
             C80230 * C4979 - C80269 * C4975 - C80230 * C4980 + C82536 * C4984 +
             C80234 * C4981 - C80274 * C4976 - C80234 * C4982 +
             C82528 * C4985) *
                C82679 +
            (C47785 + C47784 + C47783) * C52324) *
               C82639 +
           ((C80280 * C4116 - C44665 * C4110 - C80280 * C4117 + C44656 * C4122 +
             C80230 * C4114 - C80269 * C4109 - C80230 * C4115 + C82536 * C4121 +
             C80234 * C4112 - C80274 * C4108 - C80234 * C4113 +
             C82528 * C4120) *
                C82679 +
            (C48706 + C48705 + C48704) * C52324) *
               C82863) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eexy[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C80234 +
            (C82863 * C175 - C6584 * C109 + C82639 * C758 - C6585 * C705) *
                C82528 +
            (C6587 - C6588 + C6589 - C6590) * C80230 +
            (C6591 - C6592 + C6593 - C6594) * C82536 +
            (C6595 - C6596 + C6597 - C6598) * C80280 +
            (C6599 - C6600 + C6601 - C6602) * C44656) *
               C52324 +
           ((C12468 - C12469 + C12470 - C12471) * C80234 +
            (C12472 - C12473 + C12474 - C12475) * C82528 +
            (C10535 - C10536 + C10537 - C10538) * C80230 +
            (C10539 - C10540 + C10541 - C10542) * C82536 +
            (C10543 - C10544 + C10545 - C10546) * C80280 +
            (C10547 - C10548 + C10549 - C10550) * C44656) *
               C82679) *
              C1149 +
          (((C12469 - C12468 + C12471 - C12470) * C80234 +
            (C12473 - C12472 + C12475 - C12474) * C82528 +
            (C10536 - C10535 + C10538 - C10537) * C80230 +
            (C10540 - C10539 + C10542 - C10541) * C82536 +
            (C10544 - C10543 + C10546 - C10545) * C80280 +
            (C10548 - C10547 + C10550 - C10549) * C44656) *
               C52324 +
           ((C33317 - C33316 + C33319 - C33318) * C80234 +
            (C33321 - C33320 + C33323 - C33322) * C82528 +
            (C31442 - C31441 + C31444 - C31443) * C80230 +
            (C31446 - C31445 + C31448 - C31447) * C82536 +
            (C6584 * C4110 - C82863 * C4200 + C6585 * C4974 - C82639 * C5062) *
                C80280 +
            (C6584 * C4117 - C82863 * C4204 + C6585 * C4978 - C82639 * C5065) *
                C44656) *
               C82679) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eexz[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C80234 +
            (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
                C82528 +
            (C52461 - C52462 + C52463 - C52464) * C80230 +
            (C52465 - C52466 + C52467 - C52468) * C82536 +
            (C52469 - C52470 + C52471 - C52472) * C80280 +
            (C52473 - C52474 + C52475 - C52476) * C44656) *
               C82863 +
           ((C55448 - C55449 + C55450 - C55451) * C80234 +
            (C55452 - C55453 + C55454 - C55455) * C82528 +
            (C54487 - C54488 + C54489 - C54490) * C80230 +
            (C54491 - C54492 + C54493 - C54494) * C82536 +
            (C59142 - C59143 + C59144 - C59145) * C80280 +
            (C59146 - C59147 + C59148 - C59149) * C44656) *
               C82639) *
              C1149 +
          (((C52458 * C1155 - C52324 * C1265 + C52459 * C4108 -
             C82679 * C4299) *
                C80234 +
            (C52458 * C1165 - C52324 * C1270 + C52459 * C4113 -
             C82679 * C4303) *
                C82528 +
            (C52458 * C1154 - C52324 * C1266 + C52459 * C4109 -
             C82679 * C4300) *
                C80230 +
            (C52458 * C1163 - C52324 * C1271 + C52459 * C4115 -
             C82679 * C4304) *
                C82536 +
            (C52458 * C1153 - C52324 * C1267 + C52459 * C4110 -
             C82679 * C4301) *
                C80280 +
            (C52458 * C1161 - C52324 * C1272 + C52459 * C4117 -
             C82679 * C4305) *
                C44656) *
               C82863 +
           ((C52458 * C3348 - C52324 * C3527 + C52459 * C4976 -
             C82679 * C5140) *
                C80234 +
            (C52458 * C3360 - C52324 * C3533 + C52459 * C4982 -
             C82679 * C5143) *
                C82528 +
            (C52458 * C3347 - C52324 * C3528 + C52459 * C4975 -
             C82679 * C5141) *
                C80230 +
            (C52458 * C3358 - C52324 * C3534 + C52459 * C4980 -
             C82679 * C5144) *
                C82536 +
            (C52458 * C3346 - C52324 * C3529 + C52459 * C4974 -
             C82679 * C5142) *
                C80280 +
            (C52458 * C3356 - C52324 * C3535 + C52459 * C4978 -
             C82679 * C5145) *
                C44656) *
               C82639) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyx[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82528 * C108 - C80234 * C102 + C82536 * C110 - C80230 * C103 +
             C44656 * C112 - C80280 * C104) *
                C6584 +
            (C82528 * C316 - C80234 * C310 + C82536 * C317 - C80230 * C311 +
             C44656 * C318 - C80280 * C312) *
                C82863 +
            (C45687 - C45688 + C45689 - C45690 + C45691 - C45692) * C6585 +
            (C45693 - C45694 + C45695 - C45696 + C45697 - C45698) * C82639) *
               C52324 +
           ((C49001 - C49002 + C49003 - C49004 + C49005 - C49006) * C6584 +
            (C49007 - C49008 + C49009 - C49010 + C49011 - C49012) * C82863 +
            (C48080 - C48081 + C48082 - C48083 + C48084 - C48085) * C6585 +
            (C48086 - C48087 + C48088 - C48089 + C48090 - C48091) * C82639) *
               C82679) *
              C1149 +
          (((C49002 - C49001 + C49004 - C49003 + C49006 - C49005) * C6584 +
            (C49008 - C49007 + C49010 - C49009 + C49012 - C49011) * C82863 +
            (C48081 - C48080 + C48083 - C48082 + C48085 - C48084) * C6585 +
            (C48087 - C48086 + C48089 - C48088 + C48091 - C48090) * C82639) *
               C52324 +
           ((C80234 * C4108 - C82528 * C4112 + C80230 * C4109 - C82536 * C4114 +
             C80280 * C4110 - C44656 * C4116) *
                C6584 +
            (C80234 * C4405 - C82528 * C4409 + C80230 * C4406 - C82536 * C4410 +
             C80280 * C4407 - C44656 * C4411) *
                C82863 +
            (C80234 * C4976 - C82528 * C4981 + C80230 * C4975 - C82536 * C4979 +
             C80280 * C4974 - C44656 * C4977) *
                C6585 +
            (C80234 * C5220 - C82528 * C5223 + C80230 * C5221 - C82536 * C5224 +
             C80280 * C5222 - C44656 * C5225) *
                C82639) *
               C82679) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyy[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C6584 * C169 - C6812 * C102 - C6584 * C310 + C82863 * C365 +
             C6585 * C753 - C6813 * C695 - C6585 * C857 + C82639 * C913) *
                C82528 +
            (C6851 + C6852) * C82536 + (C6853 + C6854) * C44656) *
               C52324 +
           ((C12782 + C12783) * C82528 + (C10885 + C10886) * C82536 +
            (C10887 + C10888) * C44656) *
               C82679) *
              C1149 -
          (((C6585 * C5062 - C6813 * C4974 - C6585 * C5222 + C82639 * C5300 +
             C6584 * C4200 - C6812 * C4110 - C6584 * C4407 + C82863 * C4489) *
                C44656 +
            (C31768 + C31767) * C82536 + (C33644 + C33643) * C82528) *
               C82679 +
           ((C10888 + C10887) * C44656 + (C10886 + C10885) * C82536 +
            (C12783 + C12782) * C82528) *
               C52324) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyz[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C6584 +
            (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
                C82863 +
            (C55448 - C55449 + C55450 - C55451) * C6585 +
            (C55758 - C55759 + C55760 - C55761) * C82639) *
               C82528 +
           ((C52461 - C52462 + C52463 - C52464) * C6584 +
            (C52683 - C52684 + C52685 - C52686) * C82863 +
            (C54487 - C54488 + C54489 - C54490) * C6585 +
            (C54818 - C54819 + C54820 - C54821) * C82639) *
               C82536 +
           ((C52469 - C52470 + C52471 - C52472) * C6584 +
            (C52687 - C52688 + C52689 - C52690) * C82863 +
            (C59142 - C59143 + C59144 - C59145) * C6585 +
            (C59444 - C59445 + C59446 - C59447) * C82639) *
               C44656) *
              C1149 +
          (((C52458 * C1155 - C52324 * C1265 + C52459 * C4108 -
             C82679 * C4299) *
                C6584 +
            (C52458 * C1317 - C52324 * C1416 + C52459 * C4405 -
             C82679 * C4593) *
                C82863 +
            (C52458 * C3348 - C52324 * C3527 + C52459 * C4976 -
             C82679 * C5140) *
                C6585 +
            (C52458 * C3613 - C52324 * C3779 + C52459 * C5220 -
             C82679 * C5377) *
                C82639) *
               C82528 +
           ((C52458 * C1154 - C52324 * C1266 + C52459 * C4109 -
             C82679 * C4300) *
                C6584 +
            (C52458 * C1318 - C52324 * C1417 + C52459 * C4406 -
             C82679 * C4594) *
                C82863 +
            (C52458 * C3347 - C52324 * C3528 + C52459 * C4975 -
             C82679 * C5141) *
                C6585 +
            (C52458 * C3614 - C52324 * C3781 + C52459 * C5221 -
             C82679 * C5378) *
                C82639) *
               C82536 +
           ((C52458 * C1153 - C52324 * C1267 + C52459 * C4110 -
             C82679 * C4301) *
                C6584 +
            (C52458 * C1319 - C52324 * C1418 + C52459 * C4407 -
             C82679 * C4595) *
                C82863 +
            (C52458 * C3346 - C52324 * C3529 + C52459 * C4974 -
             C82679 * C5142) *
                C6585 +
            (C52458 * C3615 - C52324 * C3783 + C52459 * C5222 -
             C82679 * C5379) *
                C82639) *
               C44656) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eezx[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82528 * C108 - C80234 * C102 + C82536 * C110 - C80230 * C103 +
             C44656 * C112 - C80280 * C104) *
                C52458 +
            (C82528 * C503 - C80234 * C497 + C82536 * C504 - C80230 * C498 +
             C44656 * C505 - C80280 * C499) *
                C52324 +
            (C49001 - C49002 + C49003 - C49004 + C49005 - C49006) * C52459 +
            (C49307 - C49308 + C49309 - C49310 + C49311 - C49312) * C82679) *
               C82863 +
           ((C45687 - C45688 + C45689 - C45690 + C45691 - C45692) * C52458 +
            (C45933 - C45934 + C45935 - C45936 + C45937 - C45938) * C52324 +
            (C48080 - C48081 + C48082 - C48083 + C48084 - C48085) * C52459 +
            (C48386 - C48387 + C48388 - C48389 + C48390 - C48391) * C82679) *
               C82639) *
              C1149 +
          (((C49002 - C49001 + C49004 - C49003 + C49006 - C49005) * C52458 +
            (C49308 - C49307 + C49310 - C49309 + C49312 - C49311) * C52324 +
            (C80234 * C4108 - C82528 * C4112 + C80230 * C4109 - C82536 * C4114 +
             C80280 * C4110 - C44656 * C4116) *
                C52459 +
            (C80234 * C4683 - C82528 * C4687 + C80230 * C4684 - C82536 * C4688 +
             C80280 * C4685 - C44656 * C4689) *
                C82679) *
               C82863 +
           ((C48081 - C48080 + C48083 - C48082 + C48085 - C48084) * C52458 +
            (C48387 - C48386 + C48389 - C48388 + C48391 - C48390) * C52324 +
            (C80234 * C4976 - C82528 * C4981 + C80230 * C4975 - C82536 * C4979 +
             C80280 * C4974 - C44656 * C4977) *
                C52459 +
            (C80234 * C5454 - C82528 * C5457 + C80230 * C5455 - C82536 * C5458 +
             C80280 * C5456 - C44656 * C5459) *
                C82679) *
               C82639) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eezy[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C52458 +
            (C82863 * C551 - C6584 * C497 + C82639 * C1055 - C6585 * C1003) *
                C52324 +
            (C12468 - C12469 + C12470 - C12471) * C52459 +
            (C13078 - C13079 + C13080 - C13081) * C82679) *
               C82528 +
           ((C6587 - C6588 + C6589 - C6590) * C52458 +
            (C7057 - C7058 + C7059 - C7060) * C52324 +
            (C10535 - C10536 + C10537 - C10538) * C52459 +
            (C11191 - C11192 + C11193 - C11194) * C82679) *
               C82536 +
           ((C6595 - C6596 + C6597 - C6598) * C52458 +
            (C7061 - C7062 + C7063 - C7064) * C52324 +
            (C10543 - C10544 + C10545 - C10546) * C52459 +
            (C11195 - C11196 + C11197 - C11198) * C82679) *
               C44656) *
              C1149 +
          (((C12469 - C12468 + C12471 - C12470) * C52458 +
            (C13079 - C13078 + C13081 - C13080) * C52324 +
            (C33317 - C33316 + C33319 - C33318) * C52459 +
            (C33948 - C33947 + C33950 - C33949) * C82679) *
               C82528 +
           ((C10536 - C10535 + C10538 - C10537) * C52458 +
            (C11192 - C11191 + C11194 - C11193) * C52324 +
            (C31442 - C31441 + C31444 - C31443) * C52459 +
            (C32070 - C32069 + C32072 - C32071) * C82679) *
               C82536 +
           ((C10544 - C10543 + C10546 - C10545) * C52458 +
            (C11196 - C11195 + C11198 - C11197) * C52324 +
            (C6584 * C4110 - C82863 * C4200 + C6585 * C4974 - C82639 * C5062) *
                C52459 +
            (C6584 * C4685 - C82863 * C4767 + C6585 * C5456 - C82639 * C5536) *
                C82679) *
               C44656) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eezz[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C52458 * C240 - C52892 * C102 - C52458 * C497 + C52324 * C608 +
             C52459 * C1265 - C52893 * C1155 - C52459 * C1463 +
             C82679 * C1566) *
                C82863 +
            (C56084 + C56085) * C82639) *
               C82528 +
           ((C52931 + C52932) * C82863 + (C55150 + C55151) * C82639) * C82536 +
           ((C52933 + C52934) * C82863 + (C59754 + C59755) * C82639) * C44656) *
              C1149 -
          (((C52459 * C5142 - C52893 * C4974 - C52459 * C5456 + C82679 * C5611 +
             C52458 * C3529 - C52892 * C3346 - C52458 * C3861 +
             C52324 * C4026) *
                C82639 +
            (C52459 * C4301 - C52893 * C4110 - C52459 * C4685 + C82679 * C4856 +
             C52458 * C1267 - C52892 * C1153 - C52458 * C1465 +
             C52324 * C1564) *
                C82863) *
               C44656 +
           ((C52459 * C5141 - C52893 * C4975 - C52459 * C5455 + C82679 * C5612 +
             C52458 * C3528 - C52892 * C3347 - C52458 * C3860 +
             C52324 * C4028) *
                C82639 +
            (C52459 * C4300 - C52893 * C4109 - C52459 * C4684 + C82679 * C4855 +
             C52458 * C1266 - C52892 * C1154 - C52458 * C1464 +
             C52324 * C1565) *
                C82863) *
               C82536 +
           ((C52459 * C5140 - C52893 * C4976 - C52459 * C5454 + C82679 * C5613 +
             C52458 * C3527 - C52892 * C3348 - C52458 * C3859 +
             C52324 * C4030) *
                C82639 +
            (C52459 * C4299 - C52893 * C4108 - C52459 * C4683 + C82679 * C4854 +
             C52458 * C1265 - C52892 * C1155 - C52458 * C1463 +
             C52324 * C1566) *
                C82863) *
               C82528) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eexx[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39825 * C108 - C39826 * C102 - C39825 * C109 + C39819 * C120 +
             C39827 * C110 - C39828 * C103 - C39827 * C111 + C82533 * C121) *
                C82675 +
            (C43717 + C43718) * C82682 + (C43719 + C43720) * C61595) *
               C82863 +
           ((C40524 + C40525) * C82675 + (C42783 + C42784) * C82682 +
            (C42785 + C42786) * C61595) *
               C82639) *
              C82938 * C82939 * C90 -
          (((C39827 * C4977 - C39828 * C4974 - C39827 * C4978 + C82533 * C4983 +
             C39825 * C4979 - C39826 * C4975 - C39825 * C4980 +
             C39819 * C4984) *
                C61595 +
            (C39827 * C3355 - C39828 * C3346 - C39827 * C3356 + C82533 * C3364 +
             C39825 * C3357 - C39826 * C3347 - C39825 * C3358 +
             C39819 * C3365) *
                C82682 +
            (C39827 * C700 - C39828 * C693 - C39827 * C701 + C82533 * C708 +
             C39825 * C702 - C39826 * C694 - C39825 * C703 + C39819 * C709) *
                C82675) *
               C82639 +
           ((C39827 * C4116 - C39828 * C4110 - C39827 * C4117 + C82533 * C4122 +
             C39825 * C4114 - C39826 * C4109 - C39825 * C4115 +
             C39819 * C4121) *
                C61595 +
            (C39827 * C1160 - C39828 * C1153 - C39827 * C1161 + C82533 * C1168 +
             C39825 * C1162 - C39826 * C1154 - C39825 * C1163 +
             C39819 * C1169) *
                C82682 +
            (C39827 * C112 - C39828 * C104 - C39827 * C113 + C82533 * C122 +
             C39825 * C110 - C39826 * C103 - C39825 * C111 + C39819 * C121) *
                C82675) *
               C82863) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexy[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C39825 +
            (C82863 * C175 - C6584 * C109 + C82639 * C758 - C6585 * C705) *
                C39819 +
            (C6587 - C6588 + C6589 - C6590) * C39827 +
            (C6591 - C6592 + C6593 - C6594) * C82533) *
               C82675 +
           ((C12468 - C12469 + C12470 - C12471) * C39825 +
            (C12472 - C12473 + C12474 - C12475) * C39819 +
            (C10535 - C10536 + C10537 - C10538) * C39827 +
            (C10539 - C10540 + C10541 - C10542) * C82533) *
               C82682 +
           ((C33316 - C33317 + C33318 - C33319) * C39825 +
            (C33320 - C33321 + C33322 - C33323) * C39819 +
            (C31441 - C31442 + C31443 - C31444) * C39827 +
            (C31445 - C31446 + C31447 - C31448) * C82533) *
               C61595) *
              C82938 * C82939 * C90 +
          (((C6588 - C6587 + C6590 - C6589) * C39825 +
            (C6592 - C6591 + C6594 - C6593) * C39819 +
            (C6596 - C6595 + C6598 - C6597) * C39827 +
            (C6600 - C6599 + C6602 - C6601) * C82533) *
               C82675 +
           ((C10536 - C10535 + C10538 - C10537) * C39825 +
            (C10540 - C10539 + C10542 - C10541) * C39819 +
            (C10544 - C10543 + C10546 - C10545) * C39827 +
            (C10548 - C10547 + C10550 - C10549) * C82533) *
               C82682 +
           ((C31442 - C31441 + C31444 - C31443) * C39825 +
            (C31446 - C31445 + C31448 - C31447) * C39819 +
            (C6584 * C4110 - C82863 * C4200 + C6585 * C4974 - C82639 * C5062) *
                C39827 +
            (C6584 * C4117 - C82863 * C4204 + C6585 * C4978 - C82639 * C5065) *
                C82533) *
               C61595) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexz[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82675 * C240 - C80637 * C102 + C82682 * C1265 - C80634 * C1155 +
             C61595 * C4299 - C80645 * C4108) *
                C39825 +
            (C82675 * C246 - C80637 * C109 + C82682 * C1270 - C80634 * C1165 +
             C61595 * C4303 - C80645 * C4113) *
                C39819 +
            (C61748 - C61749 + C61750 - C61751 + C61752 - C61753) * C39827 +
            (C61754 - C61755 + C61756 - C61757 + C61758 - C61759) * C82533) *
               C82863 +
           ((C82675 * C805 - C80637 * C695 + C82682 * C3527 - C80634 * C3348 +
             C61595 * C5140 - C80645 * C4976) *
                C39825 +
            (C82675 * C810 - C80637 * C705 + C82682 * C3533 - C80634 * C3360 +
             C61595 * C5143 - C80645 * C4982) *
                C39819 +
            (C63944 - C63945 + C63946 - C63947 + C63948 - C63949) * C39827 +
            (C63950 - C63951 + C63952 - C63953 + C63954 - C63955) * C82533) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C61749 - C61748 + C61751 - C61750 + C61753 - C61752) * C39825 +
            (C61755 - C61754 + C61757 - C61756 + C61759 - C61758) * C39819 +
            (C61761 - C61760 + C61763 - C61762 + C61765 - C61764) * C39827 +
            (C61767 - C61766 + C61769 - C61768 + C61771 - C61770) * C82533) *
               C82863 +
           ((C63945 - C63944 + C63947 - C63946 + C63949 - C63948) * C39825 +
            (C63951 - C63950 + C63953 - C63952 + C63955 - C63954) * C39819 +
            (C80637 * C693 - C82675 * C807 + C80634 * C3346 - C82682 * C3529 +
             C80645 * C4974 - C61595 * C5142) *
                C39827 +
            (C80637 * C701 - C82675 * C812 + C80634 * C3356 - C82682 * C3535 +
             C80645 * C4978 - C61595 * C5145) *
                C82533) *
               C82639) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C6584 +
            (C39819 * C316 - C39825 * C310 + C82533 * C317 - C39827 * C311) *
                C82863 +
            (C40728 - C40729 + C40730 - C40731) * C6585 +
            (C40732 - C40733 + C40734 - C40735) * C82639) *
               C82675 +
           ((C44031 - C44032 + C44033 - C44034) * C6584 +
            (C44035 - C44036 + C44037 - C44038) * C82863 +
            (C43081 - C43082 + C43083 - C43084) * C6585 +
            (C43085 - C43086 + C43087 - C43088) * C82639) *
               C82682 +
           ((C44039 - C44040 + C44041 - C44042) * C6584 +
            (C44043 - C44044 + C44045 - C44046) * C82863 +
            (C43089 - C43090 + C43091 - C43092) * C6585 +
            (C43093 - C43094 + C43095 - C43096) * C82639) *
               C61595) *
              C82938 * C82939 * C90 +
          (((C39825 * C103 - C39819 * C110 + C39827 * C104 - C82533 * C112) *
                C6584 +
            (C39825 * C311 - C39819 * C317 + C39827 * C312 - C82533 * C318) *
                C82863 +
            (C39825 * C694 - C39819 * C702 + C39827 * C693 - C82533 * C700) *
                C6585 +
            (C39825 * C858 - C39819 * C863 + C39827 * C859 - C82533 * C864) *
                C82639) *
               C82675 +
           ((C39825 * C1154 - C39819 * C1162 + C39827 * C1153 -
             C82533 * C1160) *
                C6584 +
            (C39825 * C1318 - C39819 * C1323 + C39827 * C1319 -
             C82533 * C1324) *
                C82863 +
            (C39825 * C3347 - C39819 * C3357 + C39827 * C3346 -
             C82533 * C3355) *
                C6585 +
            (C39825 * C3614 - C39819 * C3620 + C39827 * C3615 -
             C82533 * C3621) *
                C82639) *
               C82682 +
           ((C39825 * C4109 - C39819 * C4114 + C39827 * C4110 -
             C82533 * C4116) *
                C6584 +
            (C39825 * C4406 - C39819 * C4410 + C39827 * C4407 -
             C82533 * C4411) *
                C82863 +
            (C39825 * C4975 - C39819 * C4979 + C39827 * C4974 -
             C82533 * C4977) *
                C6585 +
            (C39825 * C5221 - C39819 * C5224 + C39827 * C5222 -
             C82533 * C5225) *
                C82639) *
               C61595) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C6584 * C169 - C6812 * C102 - C6584 * C310 + C82863 * C365 +
             C6585 * C753 - C6813 * C695 - C6585 * C857 + C82639 * C913) *
                C39819 +
            (C6851 + C6852) * C82533) *
               C82675 +
           ((C12782 + C12783) * C39819 + (C10885 + C10886) * C82533) * C82682 +
           ((C33643 + C33644) * C39819 + (C31767 + C31768) * C82533) * C61595) *
              C82938 * C82939 * C90 -
          (((C6585 * C5062 - C6813 * C4974 - C6585 * C5222 + C82639 * C5300 +
             C6584 * C4200 - C6812 * C4110 - C6584 * C4407 + C82863 * C4489) *
                C82533 +
            (C31768 + C31767) * C39819) *
               C61595 +
           ((C10888 + C10887) * C82533 + (C10886 + C10885) * C39819) * C82682 +
           ((C6854 + C6853) * C82533 + (C6852 + C6851) * C39819) * C82675) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82675 * C240 - C80637 * C102 + C82682 * C1265 - C80634 * C1155 +
             C61595 * C4299 - C80645 * C4108) *
                C6584 +
            (C82675 * C441 - C80637 * C310 + C82682 * C1416 - C80634 * C1317 +
             C61595 * C4593 - C80645 * C4405) *
                C82863 +
            (C82675 * C805 - C80637 * C695 + C82682 * C3527 - C80634 * C3348 +
             C61595 * C5140 - C80645 * C4976) *
                C6585 +
            (C82675 * C956 - C80637 * C857 + C82682 * C3779 - C80634 * C3613 +
             C61595 * C5377 - C80645 * C5220) *
                C82639) *
               C39819 +
           ((C61748 - C61749 + C61750 - C61751 + C61752 - C61753) * C6584 +
            (C61994 - C61995 + C61996 - C61997 + C61998 - C61999) * C82863 +
            (C63944 - C63945 + C63946 - C63947 + C63948 - C63949) * C6585 +
            (C64250 - C64251 + C64252 - C64253 + C64254 - C64255) * C82639) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C61749 - C61748 + C61751 - C61750 + C61753 - C61752) * C6584 +
            (C61995 - C61994 + C61997 - C61996 + C61999 - C61998) * C82863 +
            (C63945 - C63944 + C63947 - C63946 + C63949 - C63948) * C6585 +
            (C64251 - C64250 + C64253 - C64252 + C64255 - C64254) * C82639) *
               C39819 +
           ((C61761 - C61760 + C61763 - C61762 + C61765 - C61764) * C6584 +
            (C62001 - C62000 + C62003 - C62002 + C62005 - C62004) * C82863 +
            (C80637 * C693 - C82675 * C807 + C80634 * C3346 - C82682 * C3529 +
             C80645 * C4974 - C61595 * C5142) *
                C6585 +
            (C80637 * C859 - C82675 * C958 + C80634 * C3615 - C82682 * C3783 +
             C80645 * C5222 - C61595 * C5379) *
                C82639) *
               C82533) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezx[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C80637 +
            (C39819 * C503 - C39825 * C497 + C82533 * C504 - C39827 * C498) *
                C82675 +
            (C44031 - C44032 + C44033 - C44034) * C80634 +
            (C44369 - C44370 + C44371 - C44372) * C82682 +
            (C44039 - C44040 + C44041 - C44042) * C80645 +
            (C44373 - C44374 + C44375 - C44376) * C61595) *
               C82863 +
           ((C40728 - C40729 + C40730 - C40731) * C80637 +
            (C40950 - C40951 + C40952 - C40953) * C82675 +
            (C43081 - C43082 + C43083 - C43084) * C80634 +
            (C43391 - C43392 + C43393 - C43394) * C82682 +
            (C43089 - C43090 + C43091 - C43092) * C80645 +
            (C43395 - C43396 + C43397 - C43398) * C61595) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C39825 * C103 - C39819 * C110 + C39827 * C104 - C82533 * C112) *
                C80637 +
            (C39825 * C498 - C39819 * C504 + C39827 * C499 - C82533 * C505) *
                C82675 +
            (C39825 * C1154 - C39819 * C1162 + C39827 * C1153 -
             C82533 * C1160) *
                C80634 +
            (C39825 * C1464 - C39819 * C1469 + C39827 * C1465 -
             C82533 * C1470) *
                C82682 +
            (C39825 * C4109 - C39819 * C4114 + C39827 * C4110 -
             C82533 * C4116) *
                C80645 +
            (C39825 * C4684 - C39819 * C4688 + C39827 * C4685 -
             C82533 * C4689) *
                C61595) *
               C82863 +
           ((C39825 * C694 - C39819 * C702 + C39827 * C693 - C82533 * C700) *
                C80637 +
            (C39825 * C1004 - C39819 * C1009 + C39827 * C1005 -
             C82533 * C1010) *
                C82675 +
            (C39825 * C3347 - C39819 * C3357 + C39827 * C3346 -
             C82533 * C3355) *
                C80634 +
            (C39825 * C3860 - C39819 * C3866 + C39827 * C3861 -
             C82533 * C3867) *
                C82682 +
            (C39825 * C4975 - C39819 * C4979 + C39827 * C4974 -
             C82533 * C4977) *
                C80645 +
            (C39825 * C5455 - C39819 * C5458 + C39827 * C5456 -
             C82533 * C5459) *
                C61595) *
               C82639) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezy[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C80637 +
            (C82863 * C551 - C6584 * C497 + C82639 * C1055 - C6585 * C1003) *
                C82675 +
            (C12468 - C12469 + C12470 - C12471) * C80634 +
            (C13078 - C13079 + C13080 - C13081) * C82682 +
            (C33316 - C33317 + C33318 - C33319) * C80645 +
            (C33947 - C33948 + C33949 - C33950) * C61595) *
               C39819 +
           ((C6587 - C6588 + C6589 - C6590) * C80637 +
            (C7057 - C7058 + C7059 - C7060) * C82675 +
            (C10535 - C10536 + C10537 - C10538) * C80634 +
            (C11191 - C11192 + C11193 - C11194) * C82682 +
            (C31441 - C31442 + C31443 - C31444) * C80645 +
            (C32069 - C32070 + C32071 - C32072) * C61595) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C6588 - C6587 + C6590 - C6589) * C80637 +
            (C7058 - C7057 + C7060 - C7059) * C82675 +
            (C10536 - C10535 + C10538 - C10537) * C80634 +
            (C11192 - C11191 + C11194 - C11193) * C82682 +
            (C31442 - C31441 + C31444 - C31443) * C80645 +
            (C32070 - C32069 + C32072 - C32071) * C61595) *
               C39819 +
           ((C6596 - C6595 + C6598 - C6597) * C80637 +
            (C7062 - C7061 + C7064 - C7063) * C82675 +
            (C10544 - C10543 + C10546 - C10545) * C80634 +
            (C11196 - C11195 + C11198 - C11197) * C82682 +
            (C6584 * C4110 - C82863 * C4200 + C6585 * C4974 - C82639 * C5062) *
                C80645 +
            (C6584 * C4685 - C82863 * C4767 + C6585 * C5456 - C82639 * C5536) *
                C61595) *
               C82533) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezz[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C80637 * C240 - C80689 * C102 - C80637 * C497 + C82675 * C608 +
             C80634 * C1265 - C80682 * C1155 - C80634 * C1463 + C82682 * C1566 +
             C80645 * C4299 - C62229 * C4108 - C80645 * C4683 +
             C61595 * C4854) *
                C82863 +
            (C80637 * C805 - C80689 * C695 - C80637 * C1003 + C82675 * C1106 +
             C80634 * C3527 - C80682 * C3348 - C80634 * C3859 + C82682 * C4030 +
             C80645 * C5140 - C62229 * C4976 - C80645 * C5454 +
             C61595 * C5613) *
                C82639) *
               C39819 +
           ((C62267 + C62268 + C62269) * C82863 +
            (C64568 + C64569 + C64570) * C82639) *
               C82533) *
              C82938 * C82939 * C90 -
          (((C80645 * C5142 - C62229 * C4974 - C80645 * C5456 + C61595 * C5611 +
             C80634 * C3529 - C80682 * C3346 - C80634 * C3861 + C82682 * C4026 +
             C80637 * C807 - C80689 * C693 - C80637 * C1005 + C82675 * C1104) *
                C82639 +
            (C62272 + C62271 + C62270) * C82863) *
               C82533 +
           ((C64570 + C64569 + C64568) * C82639 +
            (C62269 + C62268 + C62267) * C82863) *
               C39819) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexx[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39825 * C108 - C39826 * C102 - C39825 * C109 + C39819 * C120 +
             C39827 * C110 - C39828 * C103 - C39827 * C111 + C82533 * C121) *
                C82675 +
            (C43717 + C43718) * C82682 + (C43719 + C43720) * C61595) *
               C82863 +
           ((C40524 + C40525) * C82675 + (C42783 + C42784) * C82682 +
            (C42785 + C42786) * C61595) *
               C82639) *
              C82938 * C688 -
          (((C39827 * C16749 - C39828 * C16746 - C39827 * C16750 +
             C82533 * C16752 + C39825 * C16747 - C39826 * C16745 -
             C39825 * C16748 + C39819 * C16751) *
                C61595 +
            (C50541 + C50540) * C82682 + (C40527 + C40526) * C82675) *
               C82639 +
           ((C42786 + C42785) * C61595 + (C42784 + C42783) * C82682 +
            (C40525 + C40524) * C82675) *
               C82863) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eexy[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C39825 +
            (C82863 * C175 - C6584 * C109 + C82639 * C758 - C6585 * C705) *
                C39819 +
            (C6587 - C6588 + C6589 - C6590) * C39827 +
            (C6591 - C6592 + C6593 - C6594) * C82533) *
               C82675 +
           ((C12468 - C12469 + C12470 - C12471) * C39825 +
            (C12472 - C12473 + C12474 - C12475) * C39819 +
            (C10535 - C10536 + C10537 - C10538) * C39827 +
            (C10539 - C10540 + C10541 - C10542) * C82533) *
               C82682 +
           ((C33316 - C33317 + C33318 - C33319) * C39825 +
            (C33320 - C33321 + C33322 - C33323) * C39819 +
            (C31441 - C31442 + C31443 - C31444) * C39827 +
            (C31445 - C31446 + C31447 - C31448) * C82533) *
               C61595) *
              C82938 * C688 +
          (((C6584 * C695 - C82863 * C753 + C6585 * C1653 - C82639 * C1746) *
                C39825 +
            (C6584 * C705 - C82863 * C758 + C6585 * C1658 - C82639 * C1750) *
                C39819 +
            (C6584 * C694 - C82863 * C754 + C6585 * C1654 - C82639 * C1747) *
                C39827 +
            (C6584 * C703 - C82863 * C759 + C6585 * C1660 - C82639 * C1751) *
                C82533) *
               C82675 +
           ((C6584 * C3348 - C82863 * C3441 + C6585 * C3345 - C82639 * C3442) *
                C39825 +
            (C6584 * C3360 - C82863 * C3447 + C6585 * C3354 - C82639 * C3448) *
                C39819 +
            (C6584 * C3347 - C82863 * C3443 + C6585 * C3344 - C82639 * C3444) *
                C39827 +
            (C6584 * C3358 - C82863 * C3449 + C6585 * C3352 - C82639 * C3450) *
                C82533) *
               C82682 +
           ((C6584 * C4976 - C82863 * C5060 + C6585 * C16745 -
             C82639 * C16827) *
                C39825 +
            (C6584 * C4982 - C82863 * C5063 + C6585 * C16748 -
             C82639 * C16829) *
                C39819 +
            (C6584 * C4975 - C82863 * C5061 + C6585 * C16746 -
             C82639 * C16828) *
                C39827 +
            (C6584 * C4980 - C82863 * C5064 + C6585 * C16750 -
             C82639 * C16830) *
                C82533) *
               C61595) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eexz[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82675 * C240 - C80637 * C102 + C82682 * C1265 - C80634 * C1155 +
             C61595 * C4299 - C80645 * C4108) *
                C39825 +
            (C82675 * C246 - C80637 * C109 + C82682 * C1270 - C80634 * C1165 +
             C61595 * C4303 - C80645 * C4113) *
                C39819 +
            (C61748 - C61749 + C61750 - C61751 + C61752 - C61753) * C39827 +
            (C61754 - C61755 + C61756 - C61757 + C61758 - C61759) * C82533) *
               C82863 +
           ((C64865 - C64866 + C64867 - C64868 + C64869 - C64870) * C39825 +
            (C64871 - C64872 + C64873 - C64874 + C64875 - C64876) * C39819 +
            (C63944 - C63945 + C63946 - C63947 + C63948 - C63949) * C39827 +
            (C63950 - C63951 + C63952 - C63953 + C63954 - C63955) * C82533) *
               C82639) *
              C82938 * C688 +
          (((C64866 - C64865 + C64868 - C64867 + C64870 - C64869) * C39825 +
            (C64872 - C64871 + C64874 - C64873 + C64876 - C64875) * C39819 +
            (C63945 - C63944 + C63947 - C63946 + C63949 - C63948) * C39827 +
            (C63951 - C63950 + C63953 - C63952 + C63955 - C63954) * C82533) *
               C82863 +
           ((C80637 * C1653 - C82675 * C1852 + C80634 * C3345 - C82682 * C3530 +
             C80645 * C16745 - C61595 * C16905) *
                C39825 +
            (C80637 * C1658 - C82675 * C1856 + C80634 * C3354 - C82682 * C3536 +
             C80645 * C16748 - C61595 * C16907) *
                C39819 +
            (C80637 * C1654 - C82675 * C1853 + C80634 * C3344 - C82682 * C3531 +
             C80645 * C16746 - C61595 * C16906) *
                C39827 +
            (C80637 * C1660 - C82675 * C1857 + C80634 * C3352 - C82682 * C3537 +
             C80645 * C16750 - C61595 * C16908) *
                C82533) *
               C82639) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyx[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C6584 +
            (C39819 * C316 - C39825 * C310 + C82533 * C317 - C39827 * C311) *
                C82863 +
            (C40728 - C40729 + C40730 - C40731) * C6585 +
            (C40732 - C40733 + C40734 - C40735) * C82639) *
               C82675 +
           ((C44031 - C44032 + C44033 - C44034) * C6584 +
            (C44035 - C44036 + C44037 - C44038) * C82863 +
            (C43081 - C43082 + C43083 - C43084) * C6585 +
            (C43085 - C43086 + C43087 - C43088) * C82639) *
               C82682 +
           ((C44039 - C44040 + C44041 - C44042) * C6584 +
            (C44043 - C44044 + C44045 - C44046) * C82863 +
            (C43089 - C43090 + C43091 - C43092) * C6585 +
            (C43093 - C43094 + C43095 - C43096) * C82639) *
               C61595) *
              C82938 * C688 +
          (((C40729 - C40728 + C40731 - C40730) * C6584 +
            (C40733 - C40732 + C40735 - C40734) * C82863 +
            (C40737 - C40736 + C40739 - C40738) * C6585 +
            (C40741 - C40740 + C40743 - C40742) * C82639) *
               C82675 +
           ((C43082 - C43081 + C43084 - C43083) * C6584 +
            (C43086 - C43085 + C43088 - C43087) * C82863 +
            (C50837 - C50836 + C50839 - C50838) * C6585 +
            (C50841 - C50840 + C50843 - C50842) * C82639) *
               C82682 +
           ((C43090 - C43089 + C43092 - C43091) * C6584 +
            (C43094 - C43093 + C43096 - C43095) * C82863 +
            (C39825 * C16745 - C39819 * C16747 + C39827 * C16746 -
             C82533 * C16749) *
                C6585 +
            (C39825 * C16983 - C39819 * C16985 + C39827 * C16984 -
             C82533 * C16986) *
                C82639) *
               C61595) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyy[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C6584 * C169 - C6812 * C102 - C6584 * C310 + C82863 * C365 +
             C6585 * C753 - C6813 * C695 - C6585 * C857 + C82639 * C913) *
                C39819 +
            (C6851 + C6852) * C82533) *
               C82675 +
           ((C12782 + C12783) * C39819 + (C10885 + C10886) * C82533) * C82682 +
           ((C33643 + C33644) * C39819 + (C31767 + C31768) * C82533) * C61595) *
              C82938 * C688 -
          (((C6585 * C16828 - C6813 * C16746 - C6585 * C16984 +
             C82639 * C17062 + C6584 * C5061 - C6812 * C4975 - C6584 * C5221 +
             C82863 * C5301) *
                C82533 +
            (C6585 * C16827 - C6813 * C16745 - C6585 * C16983 +
             C82639 * C17061 + C6584 * C5060 - C6812 * C4976 - C6584 * C5220 +
             C82863 * C5302) *
                C39819) *
               C61595 +
           ((C6585 * C3444 - C6813 * C3344 - C6585 * C3617 + C82639 * C3701 +
             C6584 * C3443 - C6812 * C3347 - C6584 * C3614 + C82863 * C3702) *
                C82533 +
            (C6585 * C3442 - C6813 * C3345 - C6585 * C3616 + C82639 * C3703 +
             C6584 * C3441 - C6812 * C3348 - C6584 * C3613 + C82863 * C3704) *
                C39819) *
               C82682 +
           ((C6585 * C1747 - C6813 * C1654 - C6585 * C1951 + C82639 * C2036 +
             C6584 * C754 - C6812 * C694 - C6584 * C858 + C82863 * C912) *
                C82533 +
            (C6585 * C1746 - C6813 * C1653 - C6585 * C1950 + C82639 * C2035 +
             C6584 * C753 - C6812 * C695 - C6584 * C857 + C82863 * C913) *
                C39819) *
               C82675) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyz[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82675 * C240 - C80637 * C102 + C82682 * C1265 - C80634 * C1155 +
             C61595 * C4299 - C80645 * C4108) *
                C6584 +
            (C82675 * C441 - C80637 * C310 + C82682 * C1416 - C80634 * C1317 +
             C61595 * C4593 - C80645 * C4405) *
                C82863 +
            (C64865 - C64866 + C64867 - C64868 + C64869 - C64870) * C6585 +
            (C65171 - C65172 + C65173 - C65174 + C65175 - C65176) * C82639) *
               C39819 +
           ((C61748 - C61749 + C61750 - C61751 + C61752 - C61753) * C6584 +
            (C61994 - C61995 + C61996 - C61997 + C61998 - C61999) * C82863 +
            (C63944 - C63945 + C63946 - C63947 + C63948 - C63949) * C6585 +
            (C64250 - C64251 + C64252 - C64253 + C64254 - C64255) * C82639) *
               C82533) *
              C82938 * C688 +
          (((C64866 - C64865 + C64868 - C64867 + C64870 - C64869) * C6584 +
            (C65172 - C65171 + C65174 - C65173 + C65176 - C65175) * C82863 +
            (C80637 * C1653 - C82675 * C1852 + C80634 * C3345 - C82682 * C3530 +
             C80645 * C16745 - C61595 * C16905) *
                C6585 +
            (C80637 * C1950 - C82675 * C2155 + C80634 * C3616 - C82682 * C3780 +
             C80645 * C16983 - C61595 * C17137) *
                C82639) *
               C39819 +
           ((C63945 - C63944 + C63947 - C63946 + C63949 - C63948) * C6584 +
            (C64251 - C64250 + C64253 - C64252 + C64255 - C64254) * C82863 +
            (C80637 * C1654 - C82675 * C1853 + C80634 * C3344 - C82682 * C3531 +
             C80645 * C16746 - C61595 * C16906) *
                C6585 +
            (C80637 * C1951 - C82675 * C2156 + C80634 * C3617 - C82682 * C3782 +
             C80645 * C16984 - C61595 * C17138) *
                C82639) *
               C82533) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eezx[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C80637 +
            (C39819 * C503 - C39825 * C497 + C82533 * C504 - C39827 * C498) *
                C82675 +
            (C44031 - C44032 + C44033 - C44034) * C80634 +
            (C44369 - C44370 + C44371 - C44372) * C82682 +
            (C44039 - C44040 + C44041 - C44042) * C80645 +
            (C44373 - C44374 + C44375 - C44376) * C61595) *
               C82863 +
           ((C40728 - C40729 + C40730 - C40731) * C80637 +
            (C40950 - C40951 + C40952 - C40953) * C82675 +
            (C43081 - C43082 + C43083 - C43084) * C80634 +
            (C43391 - C43392 + C43393 - C43394) * C82682 +
            (C43089 - C43090 + C43091 - C43092) * C80645 +
            (C43395 - C43396 + C43397 - C43398) * C61595) *
               C82639) *
              C82938 * C688 +
          (((C40729 - C40728 + C40731 - C40730) * C80637 +
            (C40951 - C40950 + C40953 - C40952) * C82675 +
            (C43082 - C43081 + C43084 - C43083) * C80634 +
            (C43392 - C43391 + C43394 - C43393) * C82682 +
            (C43090 - C43089 + C43092 - C43091) * C80645 +
            (C43396 - C43395 + C43398 - C43397) * C61595) *
               C82863 +
           ((C40737 - C40736 + C40739 - C40738) * C80637 +
            (C40955 - C40954 + C40957 - C40956) * C82675 +
            (C50837 - C50836 + C50839 - C50838) * C80634 +
            (C51139 - C51138 + C51141 - C51140) * C82682 +
            (C39825 * C16745 - C39819 * C16747 + C39827 * C16746 -
             C82533 * C16749) *
                C80645 +
            (C39825 * C17213 - C39819 * C17215 + C39827 * C17214 -
             C82533 * C17216) *
                C61595) *
               C82639) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eezy[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C80637 +
            (C82863 * C551 - C6584 * C497 + C82639 * C1055 - C6585 * C1003) *
                C82675 +
            (C12468 - C12469 + C12470 - C12471) * C80634 +
            (C13078 - C13079 + C13080 - C13081) * C82682 +
            (C33316 - C33317 + C33318 - C33319) * C80645 +
            (C33947 - C33948 + C33949 - C33950) * C61595) *
               C39819 +
           ((C6587 - C6588 + C6589 - C6590) * C80637 +
            (C7057 - C7058 + C7059 - C7060) * C82675 +
            (C10535 - C10536 + C10537 - C10538) * C80634 +
            (C11191 - C11192 + C11193 - C11194) * C82682 +
            (C31441 - C31442 + C31443 - C31444) * C80645 +
            (C32069 - C32070 + C32071 - C32072) * C61595) *
               C82533) *
              C82938 * C688 +
          (((C6584 * C695 - C82863 * C753 + C6585 * C1653 - C82639 * C1746) *
                C80637 +
            (C6584 * C1003 - C82863 * C1055 + C6585 * C2241 - C82639 * C2323) *
                C82675 +
            (C6584 * C3348 - C82863 * C3441 + C6585 * C3345 - C82639 * C3442) *
                C80634 +
            (C6584 * C3859 - C82863 * C3945 + C6585 * C3862 - C82639 * C3946) *
                C82682 +
            (C6584 * C4976 - C82863 * C5060 + C6585 * C16745 -
             C82639 * C16827) *
                C80645 +
            (C6584 * C5454 - C82863 * C5534 + C6585 * C17213 -
             C82639 * C17291) *
                C61595) *
               C39819 +
           ((C6584 * C694 - C82863 * C754 + C6585 * C1654 - C82639 * C1747) *
                C80637 +
            (C6584 * C1004 - C82863 * C1056 + C6585 * C2242 - C82639 * C2324) *
                C82675 +
            (C6584 * C3347 - C82863 * C3443 + C6585 * C3344 - C82639 * C3444) *
                C80634 +
            (C6584 * C3860 - C82863 * C3947 + C6585 * C3863 - C82639 * C3948) *
                C82682 +
            (C6584 * C4975 - C82863 * C5061 + C6585 * C16746 -
             C82639 * C16828) *
                C80645 +
            (C6584 * C5455 - C82863 * C5535 + C6585 * C17214 -
             C82639 * C17292) *
                C61595) *
               C82533) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eezz[49] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C80637 * C240 - C80689 * C102 - C80637 * C497 +
                       C82675 * C608 + C80634 * C1265 - C80682 * C1155 -
                       C80634 * C1463 + C82682 * C1566 + C80645 * C4299 -
                       C62229 * C4108 - C80645 * C4683 + C61595 * C4854) *
                          C82863 +
                      (C65489 + C65490 + C65491) * C82639) *
                         C39819 +
                     ((C62267 + C62268 + C62269) * C82863 +
                      (C64568 + C64569 + C64570) * C82639) *
                         C82533) *
                        C82938 * C688 -
                    (((C80645 * C16906 - C62229 * C16746 - C80645 * C17214 +
                       C61595 * C17368 + C80634 * C3531 - C80682 * C3344 -
                       C80634 * C3863 + C82682 * C4027 + C80637 * C1853 -
                       C80689 * C1654 - C80637 * C2242 + C82675 * C2414) *
                          C82639 +
                      (C64570 + C64569 + C64568) * C82863) *
                         C82533 +
                     ((C80645 * C16905 - C62229 * C16745 - C80645 * C17213 +
                       C61595 * C17367 + C80634 * C3530 - C80682 * C3345 -
                       C80634 * C3862 + C82682 * C4029 + C80637 * C1852 -
                       C80689 * C1653 - C80637 * C2241 + C82675 * C2413) *
                          C82639 +
                      (C65491 + C65490 + C65489) * C82863) *
                         C39819) *
                        C82938 * C689) *
                   C82940) /
                  (p * q * std::sqrt(p + q));
    d2eexx[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39825 * C108 - C39826 * C102 - C39825 * C109 + C39819 * C120 +
             C39827 * C110 - C39828 * C103 - C39827 * C111 + C82533 * C121) *
                C82675 +
            (C43717 + C43718) * C82682 + (C43719 + C43720) * C61595) *
               C82863 +
           ((C40524 + C40525) * C82675 + (C42783 + C42784) * C82682 +
            (C42785 + C42786) * C61595) *
               C82639) *
              C1149 -
          (((C39827 * C33198 - C39828 * C33197 - C39827 * C33199 +
             C82533 * C33200 + C39825 * C18265 - C39826 * C18262 -
             C39825 * C18266 + C39819 * C18268) *
                C61595 +
            (C42786 + C42785) * C82682 + (C42784 + C42783) * C82675) *
               C82639 +
           ((C58301 + C58300) * C61595 + (C43720 + C43719) * C82682 +
            (C43718 + C43717) * C82675) *
               C82863) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eexy[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C39825 +
            (C82863 * C175 - C6584 * C109 + C82639 * C758 - C6585 * C705) *
                C39819 +
            (C6587 - C6588 + C6589 - C6590) * C39827 +
            (C6591 - C6592 + C6593 - C6594) * C82533) *
               C82675 +
           ((C12468 - C12469 + C12470 - C12471) * C39825 +
            (C12472 - C12473 + C12474 - C12475) * C39819 +
            (C10535 - C10536 + C10537 - C10538) * C39827 +
            (C10539 - C10540 + C10541 - C10542) * C82533) *
               C82682 +
           ((C33316 - C33317 + C33318 - C33319) * C39825 +
            (C33320 - C33321 + C33322 - C33323) * C39819 +
            (C31441 - C31442 + C31443 - C31444) * C39827 +
            (C31445 - C31446 + C31447 - C31448) * C82533) *
               C61595) *
              C1149 +
          (((C12469 - C12468 + C12471 - C12470) * C39825 +
            (C12473 - C12472 + C12475 - C12474) * C39819 +
            (C10536 - C10535 + C10538 - C10537) * C39827 +
            (C10540 - C10539 + C10542 - C10541) * C82533) *
               C82675 +
           ((C33317 - C33316 + C33319 - C33318) * C39825 +
            (C33321 - C33320 + C33323 - C33322) * C39819 +
            (C31442 - C31441 + C31444 - C31443) * C39827 +
            (C31446 - C31445 + C31448 - C31447) * C82533) *
               C82682 +
           ((C37331 - C37330 + C37333 - C37332) * C39825 +
            (C37335 - C37334 + C37337 - C37336) * C39819 +
            (C6584 * C5689 - C82863 * C5817 + C6585 * C33197 -
             C82639 * C33313) *
                C39827 +
            (C6584 * C5694 - C82863 * C5820 + C6585 * C33199 -
             C82639 * C33314) *
                C82533) *
               C61595) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eexz[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82675 * C240 - C80637 * C102 + C82682 * C1265 - C80634 * C1155 +
             C61595 * C4299 - C80645 * C4108) *
                C39825 +
            (C82675 * C246 - C80637 * C109 + C82682 * C1270 - C80634 * C1165 +
             C61595 * C4303 - C80645 * C4113) *
                C39819 +
            (C61748 - C61749 + C61750 - C61751 + C61752 - C61753) * C39827 +
            (C61754 - C61755 + C61756 - C61757 + C61758 - C61759) * C82533) *
               C82863 +
           ((C64865 - C64866 + C64867 - C64868 + C64869 - C64870) * C39825 +
            (C64871 - C64872 + C64873 - C64874 + C64875 - C64876) * C39819 +
            (C63944 - C63945 + C63946 - C63947 + C63948 - C63949) * C39827 +
            (C63950 - C63951 + C63952 - C63953 + C63954 - C63955) * C82533) *
               C82639) *
              C1149 +
          (((C80637 * C1155 - C82675 * C1265 + C80634 * C4108 - C82682 * C4299 +
             C80645 * C5690 - C61595 * C5904) *
                C39825 +
            (C80637 * C1165 - C82675 * C1270 + C80634 * C4113 - C82682 * C4303 +
             C80645 * C5696 - C61595 * C5907) *
                C39819 +
            (C80637 * C1154 - C82675 * C1266 + C80634 * C4109 - C82682 * C4300 +
             C80645 * C5689 - C61595 * C5905) *
                C39827 +
            (C80637 * C1163 - C82675 * C1271 + C80634 * C4115 - C82682 * C4304 +
             C80645 * C5694 - C61595 * C5908) *
                C82533) *
               C82863 +
           ((C80637 * C3348 - C82675 * C3527 + C80634 * C4976 - C82682 * C5140 +
             C80645 * C18262 - C61595 * C18459) *
                C39825 +
            (C80637 * C3360 - C82675 * C3533 + C80634 * C4982 - C82682 * C5143 +
             C80645 * C18266 - C61595 * C18461) *
                C39819 +
            (C80637 * C3347 - C82675 * C3528 + C80634 * C4975 - C82682 * C5141 +
             C80645 * C33197 - C61595 * C33421) *
                C39827 +
            (C80637 * C3358 - C82675 * C3534 + C80634 * C4980 - C82682 * C5144 +
             C80645 * C33199 - C61595 * C33422) *
                C82533) *
               C82639) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyx[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C6584 +
            (C39819 * C316 - C39825 * C310 + C82533 * C317 - C39827 * C311) *
                C82863 +
            (C40728 - C40729 + C40730 - C40731) * C6585 +
            (C40732 - C40733 + C40734 - C40735) * C82639) *
               C82675 +
           ((C44031 - C44032 + C44033 - C44034) * C6584 +
            (C44035 - C44036 + C44037 - C44038) * C82863 +
            (C43081 - C43082 + C43083 - C43084) * C6585 +
            (C43085 - C43086 + C43087 - C43088) * C82639) *
               C82682 +
           ((C44039 - C44040 + C44041 - C44042) * C6584 +
            (C44043 - C44044 + C44045 - C44046) * C82863 +
            (C43089 - C43090 + C43091 - C43092) * C6585 +
            (C43093 - C43094 + C43095 - C43096) * C82639) *
               C61595) *
              C1149 +
          (((C44032 - C44031 + C44034 - C44033) * C6584 +
            (C44036 - C44035 + C44038 - C44037) * C82863 +
            (C43082 - C43081 + C43084 - C43083) * C6585 +
            (C43086 - C43085 + C43088 - C43087) * C82639) *
               C82675 +
           ((C44040 - C44039 + C44042 - C44041) * C6584 +
            (C44044 - C44043 + C44046 - C44045) * C82863 +
            (C43090 - C43089 + C43092 - C43091) * C6585 +
            (C43094 - C43093 + C43096 - C43095) * C82639) *
               C82682 +
           ((C58501 - C58500 + C58503 - C58502) * C6584 +
            (C58505 - C58504 + C58507 - C58506) * C82863 +
            (C39825 * C18262 - C39819 * C18265 + C39827 * C33197 -
             C82533 * C33198) *
                C6585 +
            (C39825 * C18537 - C39819 * C18539 + C39827 * C33521 -
             C82533 * C33522) *
                C82639) *
               C61595) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyy[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C6584 * C169 - C6812 * C102 - C6584 * C310 + C82863 * C365 +
             C6585 * C753 - C6813 * C695 - C6585 * C857 + C82639 * C913) *
                C39819 +
            (C6851 + C6852) * C82533) *
               C82675 +
           ((C12782 + C12783) * C39819 + (C10885 + C10886) * C82533) * C82682 +
           ((C33643 + C33644) * C39819 + (C31767 + C31768) * C82533) * C61595) *
              C1149 -
          (((C6585 * C33313 - C6813 * C33197 - C6585 * C33521 +
             C82639 * C33629 + C6584 * C5817 - C6812 * C5689 - C6584 * C5985 +
             C82863 * C6089) *
                C82533 +
            (C37549 + C37548) * C39819) *
               C61595 +
           ((C31768 + C31767) * C82533 + (C33644 + C33643) * C39819) * C82682 +
           ((C10886 + C10885) * C82533 + (C12783 + C12782) * C39819) * C82675) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyz[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82675 * C240 - C80637 * C102 + C82682 * C1265 - C80634 * C1155 +
             C61595 * C4299 - C80645 * C4108) *
                C6584 +
            (C82675 * C441 - C80637 * C310 + C82682 * C1416 - C80634 * C1317 +
             C61595 * C4593 - C80645 * C4405) *
                C82863 +
            (C64865 - C64866 + C64867 - C64868 + C64869 - C64870) * C6585 +
            (C65171 - C65172 + C65173 - C65174 + C65175 - C65176) * C82639) *
               C39819 +
           ((C61748 - C61749 + C61750 - C61751 + C61752 - C61753) * C6584 +
            (C61994 - C61995 + C61996 - C61997 + C61998 - C61999) * C82863 +
            (C63944 - C63945 + C63946 - C63947 + C63948 - C63949) * C6585 +
            (C64250 - C64251 + C64252 - C64253 + C64254 - C64255) * C82639) *
               C82533) *
              C1149 +
          (((C80637 * C1155 - C82675 * C1265 + C80634 * C4108 - C82682 * C4299 +
             C80645 * C5690 - C61595 * C5904) *
                C6584 +
            (C80637 * C1317 - C82675 * C1416 + C80634 * C4405 - C82682 * C4593 +
             C80645 * C5984 - C61595 * C6185) *
                C82863 +
            (C80637 * C3348 - C82675 * C3527 + C80634 * C4976 - C82682 * C5140 +
             C80645 * C18262 - C61595 * C18459) *
                C6585 +
            (C80637 * C3613 - C82675 * C3779 + C80634 * C5220 - C82682 * C5377 +
             C80645 * C18537 - C61595 * C18741) *
                C82639) *
               C39819 +
           ((C80637 * C1154 - C82675 * C1266 + C80634 * C4109 - C82682 * C4300 +
             C80645 * C5689 - C61595 * C5905) *
                C6584 +
            (C80637 * C1318 - C82675 * C1417 + C80634 * C4406 - C82682 * C4594 +
             C80645 * C5985 - C61595 * C6186) *
                C82863 +
            (C80637 * C3347 - C82675 * C3528 + C80634 * C4975 - C82682 * C5141 +
             C80645 * C33197 - C61595 * C33421) *
                C6585 +
            (C80637 * C3614 - C82675 * C3781 + C80634 * C5221 - C82682 * C5378 +
             C80645 * C33521 - C61595 * C33742) *
                C82639) *
               C82533) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eezx[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C80637 +
            (C39819 * C503 - C39825 * C497 + C82533 * C504 - C39827 * C498) *
                C82675 +
            (C44031 - C44032 + C44033 - C44034) * C80634 +
            (C44369 - C44370 + C44371 - C44372) * C82682 +
            (C44039 - C44040 + C44041 - C44042) * C80645 +
            (C44373 - C44374 + C44375 - C44376) * C61595) *
               C82863 +
           ((C40728 - C40729 + C40730 - C40731) * C80637 +
            (C40950 - C40951 + C40952 - C40953) * C82675 +
            (C43081 - C43082 + C43083 - C43084) * C80634 +
            (C43391 - C43392 + C43393 - C43394) * C82682 +
            (C43089 - C43090 + C43091 - C43092) * C80645 +
            (C43395 - C43396 + C43397 - C43398) * C61595) *
               C82639) *
              C1149 +
          (((C44032 - C44031 + C44034 - C44033) * C80637 +
            (C44370 - C44369 + C44372 - C44371) * C82675 +
            (C44040 - C44039 + C44042 - C44041) * C80634 +
            (C44374 - C44373 + C44376 - C44375) * C82682 +
            (C58501 - C58500 + C58503 - C58502) * C80645 +
            (C58713 - C58712 + C58715 - C58714) * C61595) *
               C82863 +
           ((C43082 - C43081 + C43084 - C43083) * C80637 +
            (C43392 - C43391 + C43394 - C43393) * C82675 +
            (C43090 - C43089 + C43092 - C43091) * C80634 +
            (C43396 - C43395 + C43398 - C43397) * C82682 +
            (C39825 * C18262 - C39819 * C18265 + C39827 * C33197 -
             C82533 * C33198) *
                C80645 +
            (C39825 * C18817 - C39819 * C18819 + C39827 * C33841 -
             C82533 * C33842) *
                C61595) *
               C82639) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eezy[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C80637 +
            (C82863 * C551 - C6584 * C497 + C82639 * C1055 - C6585 * C1003) *
                C82675 +
            (C12468 - C12469 + C12470 - C12471) * C80634 +
            (C13078 - C13079 + C13080 - C13081) * C82682 +
            (C33316 - C33317 + C33318 - C33319) * C80645 +
            (C33947 - C33948 + C33949 - C33950) * C61595) *
               C39819 +
           ((C6587 - C6588 + C6589 - C6590) * C80637 +
            (C7057 - C7058 + C7059 - C7060) * C82675 +
            (C10535 - C10536 + C10537 - C10538) * C80634 +
            (C11191 - C11192 + C11193 - C11194) * C82682 +
            (C31441 - C31442 + C31443 - C31444) * C80645 +
            (C32069 - C32070 + C32071 - C32072) * C61595) *
               C82533) *
              C1149 +
          (((C12469 - C12468 + C12471 - C12470) * C80637 +
            (C13079 - C13078 + C13081 - C13080) * C82675 +
            (C33317 - C33316 + C33319 - C33318) * C80634 +
            (C33948 - C33947 + C33950 - C33949) * C82682 +
            (C37331 - C37330 + C37333 - C37332) * C80645 +
            (C37749 - C37748 + C37751 - C37750) * C61595) *
               C39819 +
           ((C10536 - C10535 + C10538 - C10537) * C80637 +
            (C11192 - C11191 + C11194 - C11193) * C82675 +
            (C31442 - C31441 + C31444 - C31443) * C80634 +
            (C32070 - C32069 + C32072 - C32071) * C82682 +
            (C6584 * C5689 - C82863 * C5817 + C6585 * C33197 -
             C82639 * C33313) *
                C80645 +
            (C6584 * C6263 - C82863 * C6355 + C6585 * C33841 -
             C82639 * C33945) *
                C61595) *
               C82533) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eezz[50] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C80637 * C240 - C80689 * C102 - C80637 * C497 +
                       C82675 * C608 + C80634 * C1265 - C80682 * C1155 -
                       C80634 * C1463 + C82682 * C1566 + C80645 * C4299 -
                       C62229 * C4108 - C80645 * C4683 + C61595 * C4854) *
                          C82863 +
                      (C65489 + C65490 + C65491) * C82639) *
                         C39819 +
                     ((C62267 + C62268 + C62269) * C82863 +
                      (C64568 + C64569 + C64570) * C82639) *
                         C82533) *
                        C1149 -
                    (((C80645 * C33421 - C62229 * C33197 - C80645 * C33841 +
                       C61595 * C34048 + C80634 * C5141 - C80682 * C4975 -
                       C80634 * C5455 + C82682 * C5612 + C80637 * C3528 -
                       C80689 * C3347 - C80637 * C3860 + C82675 * C4028) *
                          C82639 +
                      (C80645 * C5905 - C62229 * C5689 - C80645 * C6263 +
                       C61595 * C6436 + C80634 * C4300 - C80682 * C4109 -
                       C80634 * C4684 + C82682 * C4855 + C80637 * C1266 -
                       C80689 * C1154 - C80637 * C1464 + C82675 * C1565) *
                          C82863) *
                         C82533 +
                     ((C80645 * C18459 - C62229 * C18262 - C80645 * C18817 +
                       C61595 * C18988 + C80634 * C5140 - C80682 * C4976 -
                       C80634 * C5454 + C82682 * C5613 + C80637 * C3527 -
                       C80689 * C3348 - C80637 * C3859 + C82675 * C4030) *
                          C82639 +
                      (C80645 * C5904 - C62229 * C5690 - C80645 * C6262 +
                       C61595 * C6437 + C80634 * C4299 - C80682 * C4108 -
                       C80634 * C4683 + C82682 * C4854 + C80637 * C1265 -
                       C80689 * C1155 - C80637 * C1463 + C82675 * C1566) *
                          C82863) *
                         C39819) *
                        C1150) *
                   C82939 * C82940) /
                  (p * q * std::sqrt(p + q));
    d2eexx[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39825 * C108 - C39826 * C102 - C39825 * C109 + C39819 * C120 +
             C39827 * C110 - C39828 * C103 - C39827 * C111 + C82533 * C121) *
                C52324 +
            (C43717 + C43718) * C82679) *
               C82931 +
           ((C40524 + C40525) * C52324 + (C42783 + C42784) * C82679) * C82916 +
           ((C40526 + C40527) * C52324 + (C50540 + C50541) * C82679) * C82893) *
              C82938 * C82939 * C90 -
          (((C39827 * C3349 - C39828 * C3343 - C39827 * C3350 + C82533 * C3361 +
             C39825 * C3351 - C39826 * C3344 - C39825 * C3352 +
             C39819 * C3362) *
                C82679 +
            (C39827 * C1661 - C39828 * C1655 - C39827 * C1662 + C82533 * C1667 +
             C39825 * C1659 - C39826 * C1654 - C39825 * C1660 +
             C39819 * C1666) *
                C52324) *
               C82893 +
           ((C39827 * C3355 - C39828 * C3346 - C39827 * C3356 + C82533 * C3364 +
             C39825 * C3357 - C39826 * C3347 - C39825 * C3358 +
             C39819 * C3365) *
                C82679 +
            (C39827 * C700 - C39828 * C693 - C39827 * C701 + C82533 * C708 +
             C39825 * C702 - C39826 * C694 - C39825 * C703 + C39819 * C709) *
                C52324) *
               C82916 +
           ((C39827 * C1160 - C39828 * C1153 - C39827 * C1161 + C82533 * C1168 +
             C39825 * C1162 - C39826 * C1154 - C39825 * C1163 +
             C39819 * C1169) *
                C82679 +
            (C39827 * C112 - C39828 * C104 - C39827 * C113 + C82533 * C122 +
             C39825 * C110 - C39826 * C103 - C39825 * C111 + C39819 * C121) *
                C52324) *
               C82931) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C37889 * C108 - C37890 * C102 - C37889 * C109 + C82937 * C120 +
            C37891 * C110 - C37892 * C103 - C37891 * C111 + C82927 * C121 +
            C37893 * C112 - C37894 * C104 - C37893 * C113 + C82911 * C122 +
            C37895 * C114 - C37896 * C105 - C37895 * C115 + C82862 * C123) *
               C52324 +
           (C37889 * C1164 - C37890 * C1155 - C37889 * C1165 + C82937 * C1170 +
            C37891 * C1162 - C37892 * C1154 - C37891 * C1163 + C82927 * C1169 +
            C37893 * C1160 - C37894 * C1153 - C37893 * C1161 + C82911 * C1168 +
            C37895 * C1158 - C37896 * C1152 - C37895 * C1159 + C82862 * C1167) *
               C82679) *
              C82581 * C82938 * C82939 * C90 -
          ((C37895 * C1156 - C37896 * C1151 - C37895 * C1157 + C82862 * C1166 +
            C37893 * C1158 - C37894 * C1152 - C37893 * C1159 + C82911 * C1167 +
            C37891 * C1160 - C37892 * C1153 - C37891 * C1161 + C82927 * C1168 +
            C37889 * C1162 - C37890 * C1154 - C37889 * C1163 + C82937 * C1169) *
               C82679 +
           (C37895 * C116 - C37896 * C106 - C37895 * C117 + C82862 * C124 +
            C37893 * C114 - C37894 * C105 - C37893 * C115 + C82911 * C123 +
            C37891 * C112 - C37892 * C104 - C37891 * C113 + C82927 * C122 +
            C37889 * C110 - C37890 * C103 - C37889 * C111 + C82937 * C121) *
               C52324) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C39825 * C108 - C39826 * C102 - C39825 * C109 + C39819 * C120 +
            C39827 * C110 - C39828 * C103 - C39827 * C111 + C82533 * C121) *
               C82942 +
           (C43717 + C43718) * C82936 + (C43719 + C43720) * C82924 +
           (C39825 * C5695 - C39826 * C5690 - C39825 * C5696 + C39819 * C5699 +
            C39827 * C5693 - C39828 * C5689 - C39827 * C5694 + C82533 * C5698) *
               C82878) *
              C82581 * C82938 * C82939 * C90 -
          ((C39827 * C5691 - C39828 * C5688 - C39827 * C5692 + C82533 * C5697 +
            C39825 * C5693 - C39826 * C5689 - C39825 * C5694 + C39819 * C5698) *
               C82878 +
           (C39827 * C4116 - C39828 * C4110 - C39827 * C4117 + C82533 * C4122 +
            C39825 * C4114 - C39826 * C4109 - C39825 * C4115 + C39819 * C4121) *
               C82924 +
           (C39827 * C1160 - C39828 * C1153 - C39827 * C1161 + C82533 * C1168 +
            C39825 * C1162 - C39826 * C1154 - C39825 * C1163 + C39819 * C1169) *
               C82936 +
           (C39827 * C112 - C39828 * C104 - C39827 * C113 + C82533 * C122 +
            C39825 * C110 - C39826 * C103 - C39825 * C111 + C39819 * C121) *
               C82942) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
             C82893 * C1746 - C1745 * C1653) *
                C39825 +
            (C82931 * C175 - C1743 * C109 + C82916 * C758 - C1744 * C705 +
             C82893 * C1750 - C1745 * C1658) *
                C39819 +
            (C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C39827 +
            (C1761 - C1762 + C1763 - C1764 + C1765 - C1766) * C82533) *
               C52324 +
           ((C29380 - C29381 + C29382 - C29383 + C29384 - C29385) * C39825 +
            (C29386 - C29387 + C29388 - C29389 + C29390 - C29391) * C39819 +
            (C54377 - C54378 + C54379 - C54380 + C54381 - C54382) * C39827 +
            (C54383 - C54384 + C54385 - C54386 + C54387 - C54388) * C82533) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C1756 - C1755 + C1758 - C1757 + C1760 - C1759) * C39825 +
            (C1762 - C1761 + C1764 - C1763 + C1766 - C1765) * C39819 +
            (C1768 - C1767 + C1770 - C1769 + C1772 - C1771) * C39827 +
            (C1774 - C1773 + C1776 - C1775 + C1778 - C1777) * C82533) *
               C52324 +
           ((C54378 - C54377 + C54380 - C54379 + C54382 - C54381) * C39825 +
            (C54384 - C54383 + C54386 - C54385 + C54388 - C54387) * C39819 +
            (C1743 * C1153 - C82931 * C1215 + C1744 * C3346 - C82916 * C3445 +
             C1745 * C3343 - C82893 * C3446) *
                C39827 +
            (C1743 * C1161 - C82931 * C1220 + C1744 * C3356 - C82916 * C3451 +
             C1745 * C3350 - C82893 * C3452) *
                C82533) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C37889 +
            (C82581 * C175 - C168 * C109) * C82937 + (C182 - C183) * C37891 +
            (C184 - C185) * C82927 + (C186 - C187) * C37893 +
            (C188 - C189) * C82911 + (C190 - C191) * C37895 +
            (C192 - C193) * C82862) *
               C52324 +
           ((C5823 - C5824) * C37889 + (C5825 - C5826) * C82937 +
            (C4207 - C4208) * C37891 + (C4209 - C4210) * C82927 +
            (C4211 - C4212) * C37893 + (C4213 - C4214) * C82911 +
            (C8538 - C8539) * C37895 + (C8540 - C8541) * C82862) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C183 - C182) * C37889 + (C185 - C184) * C82937 +
            (C187 - C186) * C37891 + (C189 - C188) * C82927 +
            (C191 - C190) * C37893 + (C193 - C192) * C82911 +
            (C195 - C194) * C37895 + (C197 - C196) * C82862) *
               C52324 +
           ((C4208 - C4207) * C37889 + (C4210 - C4209) * C82937 +
            (C4212 - C4211) * C37891 + (C4214 - C4213) * C82927 +
            (C8539 - C8538) * C37893 + (C8541 - C8540) * C82911 +
            (C168 * C1151 - C82581 * C1217) * C37895 +
            (C168 * C1157 - C82581 * C1222) * C82862) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C39825 +
            (C82581 * C175 - C168 * C109) * C39819 + (C182 - C183) * C39827 +
            (C184 - C185) * C82533) *
               C82942 +
           ((C5823 - C5824) * C39825 + (C5825 - C5826) * C39819 +
            (C4207 - C4208) * C39827 + (C4209 - C4210) * C82533) *
               C82936 +
           ((C5827 - C5828) * C39825 + (C5829 - C5830) * C39819 +
            (C4215 - C4216) * C39827 + (C4217 - C4218) * C82533) *
               C82924 +
           ((C30899 - C30900) * C39825 + (C30901 - C30902) * C39819 +
            (C34186 - C34187) * C39827 + (C34188 - C34189) * C82533) *
               C82878) *
              C82938 * C82939 * C90 +
          (((C183 - C182) * C39825 + (C185 - C184) * C39819 +
            (C187 - C186) * C39827 + (C189 - C188) * C82533) *
               C82942 +
           ((C4208 - C4207) * C39825 + (C4210 - C4209) * C39819 +
            (C4212 - C4211) * C39827 + (C4214 - C4213) * C82533) *
               C82936 +
           ((C4216 - C4215) * C39825 + (C4218 - C4217) * C39819 +
            (C4220 - C4219) * C39827 + (C4222 - C4221) * C82533) *
               C82924 +
           ((C34187 - C34186) * C39825 + (C34189 - C34188) * C39819 +
            (C168 * C5688 - C82581 * C5818) * C39827 +
            (C168 * C5692 - C82581 * C5821) * C82533) *
               C82878) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C39825 +
            (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
                C39819 +
            (C52461 - C52462 + C52463 - C52464) * C39827 +
            (C52465 - C52466 + C52467 - C52468) * C82533) *
               C82931 +
           ((C52324 * C805 - C52458 * C695 + C82679 * C3527 - C52459 * C3348) *
                C39825 +
            (C52324 * C810 - C52458 * C705 + C82679 * C3533 - C52459 * C3360) *
                C39819 +
            (C54487 - C54488 + C54489 - C54490) * C39827 +
            (C54491 - C54492 + C54493 - C54494) * C82533) *
               C82916 +
           ((C52324 * C1852 - C52458 * C1653 + C82679 * C3530 -
             C52459 * C3345) *
                C39825 +
            (C52324 * C1856 - C52458 * C1658 + C82679 * C3536 -
             C52459 * C3354) *
                C39819 +
            (C54495 - C54496 + C54497 - C54498) * C39827 +
            (C54499 - C54500 + C54501 - C54502) * C82533) *
               C82893) *
              C82938 * C82939 * C90 +
          (((C52462 - C52461 + C52464 - C52463) * C39825 +
            (C52466 - C52465 + C52468 - C52467) * C39819 +
            (C52470 - C52469 + C52472 - C52471) * C39827 +
            (C52474 - C52473 + C52476 - C52475) * C82533) *
               C82931 +
           ((C54488 - C54487 + C54490 - C54489) * C39825 +
            (C54492 - C54491 + C54494 - C54493) * C39819 +
            (C52458 * C693 - C52324 * C807 + C52459 * C3346 - C82679 * C3529) *
                C39827 +
            (C52458 * C701 - C52324 * C812 + C52459 * C3356 - C82679 * C3535) *
                C82533) *
               C82916 +
           ((C54496 - C54495 + C54498 - C54497) * C39825 +
            (C54500 - C54499 + C54502 - C54501) * C39819 +
            (C52458 * C1655 - C52324 * C1854 + C52459 * C3343 -
             C82679 * C3532) *
                C39827 +
            (C52458 * C1662 - C52324 * C1858 + C52459 * C3350 -
             C82679 * C3538) *
                C82533) *
               C82893) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
               C37889 +
           (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
               C82937 +
           (C52461 - C52462 + C52463 - C52464) * C37891 +
           (C52465 - C52466 + C52467 - C52468) * C82927 +
           (C52469 - C52470 + C52471 - C52472) * C37893 +
           (C52473 - C52474 + C52475 - C52476) * C82911 +
           (C52477 - C52478 + C52479 - C52480) * C37895 +
           (C52481 - C52482 + C52483 - C52484) * C82862) *
              C82581 * C82938 * C82939 * C90 +
          ((C52462 - C52461 + C52464 - C52463) * C37889 +
           (C52466 - C52465 + C52468 - C52467) * C82937 +
           (C52470 - C52469 + C52472 - C52471) * C37891 +
           (C52474 - C52473 + C52476 - C52475) * C82927 +
           (C52478 - C52477 + C52480 - C52479) * C37893 +
           (C52482 - C52481 + C52484 - C52483) * C82911 +
           (C52458 * C106 - C52324 * C244 + C52459 * C1151 - C82679 * C1269) *
               C37895 +
           (C52458 * C117 - C52324 * C250 + C52459 * C1157 - C82679 * C1274) *
               C82862) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C82942 * C240 - C57171 * C102 + C82936 * C1265 - C57172 * C1155 +
            C82924 * C4299 - C57173 * C4108 + C82878 * C5904 - C57174 * C5690) *
               C39825 +
           (C82942 * C246 - C57171 * C109 + C82936 * C1270 - C57172 * C1165 +
            C82924 * C4303 - C57173 * C4113 + C82878 * C5907 - C57174 * C5696) *
               C39819 +
           (C57176 - C57177 + C57178 - C57179 + C57180 - C57181 + C57182 -
            C57183) *
               C39827 +
           (C57184 - C57185 + C57186 - C57187 + C57188 - C57189 + C57190 -
            C57191) *
               C82533) *
              C82581 * C82938 * C82939 * C90 +
          ((C57177 - C57176 + C57179 - C57178 + C57181 - C57180 + C57183 -
            C57182) *
               C39825 +
           (C57185 - C57184 + C57187 - C57186 + C57189 - C57188 + C57191 -
            C57190) *
               C39819 +
           (C57171 * C104 - C82942 * C242 + C57172 * C1153 - C82936 * C1267 +
            C57173 * C4110 - C82924 * C4301 + C57174 * C5688 - C82878 * C5906) *
               C39827 +
           (C57171 * C113 - C82942 * C248 + C57172 * C1161 - C82936 * C1272 +
            C57173 * C4117 - C82924 * C4305 + C57174 * C5692 - C82878 * C5909) *
               C82533) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C1743 +
            (C39819 * C316 - C39825 * C310 + C82533 * C317 - C39827 * C311) *
                C82931 +
            (C40728 - C40729 + C40730 - C40731) * C1744 +
            (C40732 - C40733 + C40734 - C40735) * C82916 +
            (C40736 - C40737 + C40738 - C40739) * C1745 +
            (C40740 - C40741 + C40742 - C40743) * C82893) *
               C52324 +
           ((C44031 - C44032 + C44033 - C44034) * C1743 +
            (C44035 - C44036 + C44037 - C44038) * C82931 +
            (C43081 - C43082 + C43083 - C43084) * C1744 +
            (C43085 - C43086 + C43087 - C43088) * C82916 +
            (C50836 - C50837 + C50838 - C50839) * C1745 +
            (C50840 - C50841 + C50842 - C50843) * C82893) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C39825 * C103 - C39819 * C110 + C39827 * C104 - C82533 * C112) *
                C1743 +
            (C39825 * C311 - C39819 * C317 + C39827 * C312 - C82533 * C318) *
                C82931 +
            (C39825 * C694 - C39819 * C702 + C39827 * C693 - C82533 * C700) *
                C1744 +
            (C39825 * C858 - C39819 * C863 + C39827 * C859 - C82533 * C864) *
                C82916 +
            (C39825 * C1654 - C39819 * C1659 + C39827 * C1655 -
             C82533 * C1661) *
                C1745 +
            (C39825 * C1951 - C39819 * C1955 + C39827 * C1952 -
             C82533 * C1956) *
                C82893) *
               C52324 +
           ((C39825 * C1154 - C39819 * C1162 + C39827 * C1153 -
             C82533 * C1160) *
                C1743 +
            (C39825 * C1318 - C39819 * C1323 + C39827 * C1319 -
             C82533 * C1324) *
                C82931 +
            (C39825 * C3347 - C39819 * C3357 + C39827 * C3346 -
             C82533 * C3355) *
                C1744 +
            (C39825 * C3614 - C39819 * C3620 + C39827 * C3615 -
             C82533 * C3621) *
                C82916 +
            (C39825 * C3344 - C39819 * C3351 + C39827 * C3343 -
             C82533 * C3349) *
                C1745 +
            (C39825 * C3617 - C39819 * C3623 + C39827 * C3618 -
             C82533 * C3624) *
                C82893) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82937 * C108 - C37889 * C102 + C82927 * C110 - C37891 * C103 +
             C82911 * C112 - C37893 * C104 + C82862 * C114 - C37895 * C105) *
                C168 +
            (C82937 * C316 - C37889 * C310 + C82927 * C317 - C37891 * C311 +
             C82911 * C318 - C37893 * C312 + C82862 * C319 - C37895 * C313) *
                C82581) *
               C52324 +
           ((C82937 * C1164 - C37889 * C1155 + C82927 * C1162 - C37891 * C1154 +
             C82911 * C1160 - C37893 * C1153 + C82862 * C1158 -
             C37895 * C1152) *
                C168 +
            (C82937 * C1322 - C37889 * C1317 + C82927 * C1323 - C37891 * C1318 +
             C82911 * C1324 - C37893 * C1319 + C82862 * C1325 -
             C37895 * C1320) *
                C82581) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C37889 * C103 - C82937 * C110 + C37891 * C104 - C82927 * C112 +
             C37893 * C105 - C82911 * C114 + C37895 * C106 - C82862 * C116) *
                C168 +
            (C37889 * C311 - C82937 * C317 + C37891 * C312 - C82927 * C318 +
             C37893 * C313 - C82911 * C319 + C37895 * C314 - C82862 * C320) *
                C82581) *
               C52324 +
           ((C37889 * C1154 - C82937 * C1162 + C37891 * C1153 - C82927 * C1160 +
             C37893 * C1152 - C82911 * C1158 + C37895 * C1151 -
             C82862 * C1156) *
                C168 +
            (C37889 * C1318 - C82937 * C1323 + C37891 * C1319 - C82927 * C1324 +
             C37893 * C1320 - C82911 * C1325 + C37895 * C1321 -
             C82862 * C1326) *
                C82581) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C168 +
            (C39819 * C316 - C39825 * C310 + C82533 * C317 - C39827 * C311) *
                C82581) *
               C82942 +
           ((C44031 - C44032 + C44033 - C44034) * C168 +
            (C44035 - C44036 + C44037 - C44038) * C82581) *
               C82936 +
           ((C44039 - C44040 + C44041 - C44042) * C168 +
            (C44043 - C44044 + C44045 - C44046) * C82581) *
               C82924 +
           ((C39819 * C5695 - C39825 * C5690 + C82533 * C5693 -
             C39827 * C5689) *
                C168 +
            (C39819 * C5987 - C39825 * C5984 + C82533 * C5988 -
             C39827 * C5985) *
                C82581) *
               C82878) *
              C82938 * C82939 * C90 +
          (((C39825 * C103 - C39819 * C110 + C39827 * C104 - C82533 * C112) *
                C168 +
            (C39825 * C311 - C39819 * C317 + C39827 * C312 - C82533 * C318) *
                C82581) *
               C82942 +
           ((C39825 * C1154 - C39819 * C1162 + C39827 * C1153 -
             C82533 * C1160) *
                C168 +
            (C39825 * C1318 - C39819 * C1323 + C39827 * C1319 -
             C82533 * C1324) *
                C82581) *
               C82936 +
           ((C39825 * C4109 - C39819 * C4114 + C39827 * C4110 -
             C82533 * C4116) *
                C168 +
            (C39825 * C4406 - C39819 * C4410 + C39827 * C4407 -
             C82533 * C4411) *
                C82581) *
               C82924 +
           ((C39825 * C5689 - C39819 * C5693 + C39827 * C5688 -
             C82533 * C5691) *
                C168 +
            (C39825 * C5985 - C39819 * C5988 + C39827 * C5986 -
             C82533 * C5989) *
                C82581) *
               C82878) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1743 * C169 - C2032 * C102 - C1743 * C310 + C82931 * C365 +
             C1744 * C753 - C2033 * C695 - C1744 * C857 + C82916 * C913 +
             C1745 * C1746 - C2034 * C1653 - C1745 * C1950 + C82893 * C2035) *
                C39819 +
            (C2076 + C2077 + C2078) * C82533) *
               C52324 +
           ((C29662 + C29663 + C29664) * C39819 +
            (C54717 + C54718 + C54719) * C82533) *
               C82679) *
              C82938 * C82939 * C90 -
          (((C1745 * C3446 - C2034 * C3343 - C1745 * C3618 + C82893 * C3699 +
             C1744 * C3445 - C2033 * C3346 - C1744 * C3615 + C82916 * C3700 +
             C1743 * C1215 - C2032 * C1153 - C1743 * C1319 + C82931 * C1371) *
                C82533 +
            (C54719 + C54718 + C54717) * C39819) *
               C82679 +
           ((C2081 + C2080 + C2079) * C82533 +
            (C2078 + C2077 + C2076) * C39819) *
               C52324) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C82937 +
            C396 * C82927 + C397 * C82911 + C398 * C82862) *
               C52324 +
           (C6108 * C82937 + C4516 * C82927 + C4517 * C82911 + C8772 * C82862) *
               C82679) *
              C82938 * C82939 * C90 -
          (((C168 * C1217 - C364 * C1151 - C168 * C1321 + C82581 * C1369) *
                C82862 +
            C8772 * C82911 + C4517 * C82927 + C4516 * C82937) *
               C82679 +
           (C399 * C82862 + C398 * C82911 + C397 * C82927 + C396 * C82937) *
               C52324) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C39819 +
            C396 * C82533) *
               C82942 +
           (C6108 * C39819 + C4516 * C82533) * C82936 +
           (C6109 * C39819 + C4518 * C82533) * C82924 +
           (C31060 * C39819 + C34414 * C82533) * C82878) *
              C82938 * C82939 * C90 -
          (((C168 * C5818 - C364 * C5688 - C168 * C5986 + C82581 * C6088) *
                C82533 +
            C34414 * C39819) *
               C82878 +
           (C4519 * C82533 + C4518 * C39819) * C82924 +
           (C4517 * C82533 + C4516 * C39819) * C82936 +
           (C397 * C82533 + C396 * C39819) * C82942) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C1743 +
            (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
                C82931 +
            (C52324 * C805 - C52458 * C695 + C82679 * C3527 - C52459 * C3348) *
                C1744 +
            (C52324 * C956 - C52458 * C857 + C82679 * C3779 - C52459 * C3613) *
                C82916 +
            (C52324 * C1852 - C52458 * C1653 + C82679 * C3530 -
             C52459 * C3345) *
                C1745 +
            (C52324 * C2155 - C52458 * C1950 + C82679 * C3780 -
             C52459 * C3616) *
                C82893) *
               C39819 +
           ((C52461 - C52462 + C52463 - C52464) * C1743 +
            (C52683 - C52684 + C52685 - C52686) * C82931 +
            (C54487 - C54488 + C54489 - C54490) * C1744 +
            (C54818 - C54819 + C54820 - C54821) * C82916 +
            (C54495 - C54496 + C54497 - C54498) * C1745 +
            (C54822 - C54823 + C54824 - C54825) * C82893) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C52462 - C52461 + C52464 - C52463) * C1743 +
            (C52684 - C52683 + C52686 - C52685) * C82931 +
            (C54488 - C54487 + C54490 - C54489) * C1744 +
            (C54819 - C54818 + C54821 - C54820) * C82916 +
            (C54496 - C54495 + C54498 - C54497) * C1745 +
            (C54823 - C54822 + C54825 - C54824) * C82893) *
               C39819 +
           ((C52470 - C52469 + C52472 - C52471) * C1743 +
            (C52688 - C52687 + C52690 - C52689) * C82931 +
            (C52458 * C693 - C52324 * C807 + C52459 * C3346 - C82679 * C3529) *
                C1744 +
            (C52458 * C859 - C52324 * C958 + C52459 * C3615 - C82679 * C3783) *
                C82916 +
            (C52458 * C1655 - C52324 * C1854 + C52459 * C3343 -
             C82679 * C3532) *
                C1745 +
            (C52458 * C1952 - C52324 * C2157 + C52459 * C3618 -
             C82679 * C3784) *
                C82893) *
               C82533) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C168 +
            (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
                C82581) *
               C82937 +
           ((C52461 - C52462 + C52463 - C52464) * C168 +
            (C52683 - C52684 + C52685 - C52686) * C82581) *
               C82927 +
           ((C52469 - C52470 + C52471 - C52472) * C168 +
            (C52687 - C52688 + C52689 - C52690) * C82581) *
               C82911 +
           ((C52477 - C52478 + C52479 - C52480) * C168 +
            (C52691 - C52692 + C52693 - C52694) * C82581) *
               C82862) *
              C82938 * C82939 * C90 +
          (((C52462 - C52461 + C52464 - C52463) * C168 +
            (C52684 - C52683 + C52686 - C52685) * C82581) *
               C82937 +
           ((C52470 - C52469 + C52472 - C52471) * C168 +
            (C52688 - C52687 + C52690 - C52689) * C82581) *
               C82927 +
           ((C52478 - C52477 + C52480 - C52479) * C168 +
            (C52692 - C52691 + C52694 - C52693) * C82581) *
               C82911 +
           ((C52458 * C106 - C52324 * C244 + C52459 * C1151 - C82679 * C1269) *
                C168 +
            (C52458 * C314 - C52324 * C445 + C52459 * C1321 - C82679 * C1420) *
                C82581) *
               C82862) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82942 * C240 - C57171 * C102 + C82936 * C1265 - C57172 * C1155 +
             C82924 * C4299 - C57173 * C4108 + C82878 * C5904 -
             C57174 * C5690) *
                C168 +
            (C82942 * C441 - C57171 * C310 + C82936 * C1416 - C57172 * C1317 +
             C82924 * C4593 - C57173 * C4405 + C82878 * C6185 -
             C57174 * C5984) *
                C82581) *
               C39819 +
           ((C57176 - C57177 + C57178 - C57179 + C57180 - C57181 + C57182 -
             C57183) *
                C168 +
            (C57390 - C57391 + C57392 - C57393 + C57394 - C57395 + C57396 -
             C57397) *
                C82581) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C57177 - C57176 + C57179 - C57178 + C57181 - C57180 + C57183 -
             C57182) *
                C168 +
            (C57391 - C57390 + C57393 - C57392 + C57395 - C57394 + C57397 -
             C57396) *
                C82581) *
               C39819 +
           ((C57171 * C104 - C82942 * C242 + C57172 * C1153 - C82936 * C1267 +
             C57173 * C4110 - C82924 * C4301 + C57174 * C5688 -
             C82878 * C5906) *
                C168 +
            (C57171 * C312 - C82942 * C443 + C57172 * C1319 - C82936 * C1418 +
             C57173 * C4407 - C82924 * C4595 + C57174 * C5986 -
             C82878 * C6187) *
                C82581) *
               C82533) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezx[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C52458 +
            (C39819 * C503 - C39825 * C497 + C82533 * C504 - C39827 * C498) *
                C52324 +
            (C44031 - C44032 + C44033 - C44034) * C52459 +
            (C44369 - C44370 + C44371 - C44372) * C82679) *
               C82931 +
           ((C40728 - C40729 + C40730 - C40731) * C52458 +
            (C40950 - C40951 + C40952 - C40953) * C52324 +
            (C43081 - C43082 + C43083 - C43084) * C52459 +
            (C43391 - C43392 + C43393 - C43394) * C82679) *
               C82916 +
           ((C40736 - C40737 + C40738 - C40739) * C52458 +
            (C40954 - C40955 + C40956 - C40957) * C52324 +
            (C50836 - C50837 + C50838 - C50839) * C52459 +
            (C51138 - C51139 + C51140 - C51141) * C82679) *
               C82893) *
              C82938 * C82939 * C90 +
          (((C39825 * C103 - C39819 * C110 + C39827 * C104 - C82533 * C112) *
                C52458 +
            (C39825 * C498 - C39819 * C504 + C39827 * C499 - C82533 * C505) *
                C52324 +
            (C39825 * C1154 - C39819 * C1162 + C39827 * C1153 -
             C82533 * C1160) *
                C52459 +
            (C39825 * C1464 - C39819 * C1469 + C39827 * C1465 -
             C82533 * C1470) *
                C82679) *
               C82931 +
           ((C39825 * C694 - C39819 * C702 + C39827 * C693 - C82533 * C700) *
                C52458 +
            (C39825 * C1004 - C39819 * C1009 + C39827 * C1005 -
             C82533 * C1010) *
                C52324 +
            (C39825 * C3347 - C39819 * C3357 + C39827 * C3346 -
             C82533 * C3355) *
                C52459 +
            (C39825 * C3860 - C39819 * C3866 + C39827 * C3861 -
             C82533 * C3867) *
                C82679) *
               C82916 +
           ((C39825 * C1654 - C39819 * C1659 + C39827 * C1655 -
             C82533 * C1661) *
                C52458 +
            (C39825 * C2242 - C39819 * C2246 + C39827 * C2243 -
             C82533 * C2247) *
                C52324 +
            (C39825 * C3344 - C39819 * C3351 + C39827 * C3343 -
             C82533 * C3349) *
                C52459 +
            (C39825 * C3863 - C39819 * C3869 + C39827 * C3864 -
             C82533 * C3870) *
                C82679) *
               C82893) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82937 * C108 - C37889 * C102 + C82927 * C110 - C37891 * C103 +
            C82911 * C112 - C37893 * C104 + C82862 * C114 - C37895 * C105) *
               C52458 +
           (C82937 * C503 - C37889 * C497 + C82927 * C504 - C37891 * C498 +
            C82911 * C505 - C37893 * C499 + C82862 * C506 - C37895 * C500) *
               C52324 +
           (C82937 * C1164 - C37889 * C1155 + C82927 * C1162 - C37891 * C1154 +
            C82911 * C1160 - C37893 * C1153 + C82862 * C1158 - C37895 * C1152) *
               C52459 +
           (C82937 * C1468 - C37889 * C1463 + C82927 * C1469 - C37891 * C1464 +
            C82911 * C1470 - C37893 * C1465 + C82862 * C1471 - C37895 * C1466) *
               C82679) *
              C82581 * C82938 * C82939 * C90 +
          ((C37889 * C103 - C82937 * C110 + C37891 * C104 - C82927 * C112 +
            C37893 * C105 - C82911 * C114 + C37895 * C106 - C82862 * C116) *
               C52458 +
           (C37889 * C498 - C82937 * C504 + C37891 * C499 - C82927 * C505 +
            C37893 * C500 - C82911 * C506 + C37895 * C501 - C82862 * C507) *
               C52324 +
           (C37889 * C1154 - C82937 * C1162 + C37891 * C1153 - C82927 * C1160 +
            C37893 * C1152 - C82911 * C1158 + C37895 * C1151 - C82862 * C1156) *
               C52459 +
           (C37889 * C1464 - C82937 * C1469 + C37891 * C1465 - C82927 * C1470 +
            C37893 * C1466 - C82911 * C1471 + C37895 * C1467 - C82862 * C1472) *
               C82679) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
               C57171 +
           (C39819 * C503 - C39825 * C497 + C82533 * C504 - C39827 * C498) *
               C82942 +
           (C44031 - C44032 + C44033 - C44034) * C57172 +
           (C44369 - C44370 + C44371 - C44372) * C82936 +
           (C44039 - C44040 + C44041 - C44042) * C57173 +
           (C44373 - C44374 + C44375 - C44376) * C82924 +
           (C39819 * C5695 - C39825 * C5690 + C82533 * C5693 - C39827 * C5689) *
               C57174 +
           (C39819 * C6265 - C39825 * C6262 + C82533 * C6266 - C39827 * C6263) *
               C82878) *
              C82581 * C82938 * C82939 * C90 +
          ((C39825 * C103 - C39819 * C110 + C39827 * C104 - C82533 * C112) *
               C57171 +
           (C39825 * C498 - C39819 * C504 + C39827 * C499 - C82533 * C505) *
               C82942 +
           (C39825 * C1154 - C39819 * C1162 + C39827 * C1153 - C82533 * C1160) *
               C57172 +
           (C39825 * C1464 - C39819 * C1469 + C39827 * C1465 - C82533 * C1470) *
               C82936 +
           (C39825 * C4109 - C39819 * C4114 + C39827 * C4110 - C82533 * C4116) *
               C57173 +
           (C39825 * C4684 - C39819 * C4688 + C39827 * C4685 - C82533 * C4689) *
               C82924 +
           (C39825 * C5689 - C39819 * C5693 + C39827 * C5688 - C82533 * C5691) *
               C57174 +
           (C39825 * C6263 - C39819 * C6266 + C39827 * C6264 - C82533 * C6267) *
               C82878) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
             C82893 * C1746 - C1745 * C1653) *
                C52458 +
            (C82931 * C551 - C1743 * C497 + C82916 * C1055 - C1744 * C1003 +
             C82893 * C2323 - C1745 * C2241) *
                C52324 +
            (C29380 - C29381 + C29382 - C29383 + C29384 - C29385) * C52459 +
            (C29890 - C29891 + C29892 - C29893 + C29894 - C29895) * C82679) *
               C39819 +
           ((C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C52458 +
            (C2328 - C2329 + C2330 - C2331 + C2332 - C2333) * C52324 +
            (C54377 - C54378 + C54379 - C54380 + C54381 - C54382) * C52459 +
            (C55022 - C55023 + C55024 - C55025 + C55026 - C55027) * C82679) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C1756 - C1755 + C1758 - C1757 + C1760 - C1759) * C52458 +
            (C2329 - C2328 + C2331 - C2330 + C2333 - C2332) * C52324 +
            (C54378 - C54377 + C54380 - C54379 + C54382 - C54381) * C52459 +
            (C55023 - C55022 + C55025 - C55024 + C55027 - C55026) * C82679) *
               C39819 +
           ((C1768 - C1767 + C1770 - C1769 + C1772 - C1771) * C52458 +
            (C2335 - C2334 + C2337 - C2336 + C2339 - C2338) * C52324 +
            (C1743 * C1153 - C82931 * C1215 + C1744 * C3346 - C82916 * C3445 +
             C1745 * C3343 - C82893 * C3446) *
                C52459 +
            (C1743 * C1465 - C82931 * C1517 + C1744 * C3861 - C82916 * C3949 +
             C1745 * C3864 - C82893 * C3950) *
                C82679) *
               C82533) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C52458 +
            (C82581 * C551 - C168 * C497) * C52324 + (C5823 - C5824) * C52459 +
            (C6358 - C6359) * C82679) *
               C82937 +
           ((C182 - C183) * C52458 + (C558 - C559) * C52324 +
            (C4207 - C4208) * C52459 + (C4770 - C4771) * C82679) *
               C82927 +
           ((C186 - C187) * C52458 + (C560 - C561) * C52324 +
            (C4211 - C4212) * C52459 + (C4774 - C4775) * C82679) *
               C82911 +
           ((C190 - C191) * C52458 + (C562 - C563) * C52324 +
            (C8538 - C8539) * C52459 + (C8983 - C8984) * C82679) *
               C82862) *
              C82938 * C82939 * C90 +
          (((C183 - C182) * C52458 + (C559 - C558) * C52324 +
            (C4208 - C4207) * C52459 + (C4771 - C4770) * C82679) *
               C82937 +
           ((C187 - C186) * C52458 + (C561 - C560) * C52324 +
            (C4212 - C4211) * C52459 + (C4775 - C4774) * C82679) *
               C82927 +
           ((C191 - C190) * C52458 + (C563 - C562) * C52324 +
            (C8539 - C8538) * C52459 + (C8984 - C8983) * C82679) *
               C82911 +
           ((C195 - C194) * C52458 + (C565 - C564) * C52324 +
            (C168 * C1151 - C82581 * C1217) * C52459 +
            (C168 * C1467 - C82581 * C1519) * C82679) *
               C82862) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C57171 +
            (C82581 * C551 - C168 * C497) * C82942 + (C5823 - C5824) * C57172 +
            (C6358 - C6359) * C82936 + (C5827 - C5828) * C57173 +
            (C6360 - C6361) * C82924 + (C30899 - C30900) * C57174 +
            (C31198 - C31199) * C82878) *
               C39819 +
           ((C182 - C183) * C57171 + (C558 - C559) * C82942 +
            (C4207 - C4208) * C57172 + (C4770 - C4771) * C82936 +
            (C4215 - C4216) * C57173 + (C4772 - C4773) * C82924 +
            (C34186 - C34187) * C57174 + (C34621 - C34622) * C82878) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C183 - C182) * C57171 + (C559 - C558) * C82942 +
            (C4208 - C4207) * C57172 + (C4771 - C4770) * C82936 +
            (C4216 - C4215) * C57173 + (C4773 - C4772) * C82924 +
            (C34187 - C34186) * C57174 + (C34622 - C34621) * C82878) *
               C39819 +
           ((C187 - C186) * C57171 + (C561 - C560) * C82942 +
            (C4212 - C4211) * C57172 + (C4775 - C4774) * C82936 +
            (C4220 - C4219) * C57173 + (C4777 - C4776) * C82924 +
            (C168 * C5688 - C82581 * C5818) * C57174 +
            (C168 * C6264 - C82581 * C6356) * C82878) *
               C82533) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52458 * C240 - C52892 * C102 - C52458 * C497 + C52324 * C608 +
             C52459 * C1265 - C52893 * C1155 - C52459 * C1463 +
             C82679 * C1566) *
                C82931 +
            (C52458 * C805 - C52892 * C695 - C52458 * C1003 + C52324 * C1106 +
             C52459 * C3527 - C52893 * C3348 - C52459 * C3859 +
             C82679 * C4030) *
                C82916 +
            (C52458 * C1852 - C52892 * C1653 - C52458 * C2241 + C52324 * C2413 +
             C52459 * C3530 - C52893 * C3345 - C52459 * C3862 +
             C82679 * C4029) *
                C82893) *
               C39819 +
           ((C52931 + C52932) * C82931 + (C55150 + C55151) * C82916 +
            (C55152 + C55153) * C82893) *
               C82533) *
              C82938 * C82939 * C90 -
          (((C52459 * C3532 - C52893 * C3343 - C52459 * C3864 + C82679 * C4025 +
             C52458 * C1854 - C52892 * C1655 - C52458 * C2243 +
             C52324 * C2415) *
                C82893 +
            (C52459 * C3529 - C52893 * C3346 - C52459 * C3861 + C82679 * C4026 +
             C52458 * C807 - C52892 * C693 - C52458 * C1005 + C52324 * C1104) *
                C82916 +
            (C52934 + C52933) * C82931) *
               C82533 +
           ((C55153 + C55152) * C82893 + (C55151 + C55150) * C82916 +
            (C52932 + C52931) * C82931) *
               C39819) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52458 * C240 - C52892 * C102 - C52458 * C497 + C52324 * C608 +
            C52459 * C1265 - C52893 * C1155 - C52459 * C1463 + C82679 * C1566) *
               C82581 * C82937 +
           (C52931 + C52932) * C82581 * C82927 +
           (C52933 + C52934) * C82581 * C82911 +
           (C52935 + C52936) * C82581 * C82862) *
              C82938 * C82939 * C90 -
          ((C52459 * C1269 - C52893 * C1151 - C52459 * C1467 + C82679 * C1562 +
            C52458 * C244 - C52892 * C106 - C52458 * C501 + C52324 * C612) *
               C82581 * C82862 +
           (C52936 + C52935) * C82581 * C82911 +
           (C52934 + C52933) * C82581 * C82927 +
           (C52932 + C52931) * C82581 * C82937) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C57171 * C240 - C57595 * C102 - C57171 * C497 + C82942 * C608 +
            C57172 * C1265 - C57596 * C1155 - C57172 * C1463 + C82936 * C1566 +
            C57173 * C4299 - C57597 * C4108 - C57173 * C4683 + C82924 * C4854 +
            C57174 * C5904 - C57598 * C5690 - C57174 * C6262 + C82878 * C6437) *
               C82581 * C39819 +
           (C57624 + C57625 + C57626 + C57627) * C82581 * C82533) *
              C82938 * C82939 * C90 -
          ((C57174 * C5906 - C57598 * C5688 - C57174 * C6264 + C82878 * C6435 +
            C57173 * C4301 - C57597 * C4110 - C57173 * C4685 + C82924 * C4856 +
            C57172 * C1267 - C57596 * C1153 - C57172 * C1465 + C82936 * C1564 +
            C57171 * C242 - C57595 * C104 - C57171 * C499 + C82942 * C610) *
               C82581 * C82533 +
           (C57627 + C57626 + C57625 + C57624) * C82581 * C39819) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexx[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39825 * C108 - C39826 * C102 - C39825 * C109 + C39819 * C120 +
             C39827 * C110 - C39828 * C103 - C39827 * C111 + C82533 * C121) *
                C52324 +
            (C43717 + C43718) * C82679) *
               C82931 +
           ((C40524 + C40525) * C52324 + (C42783 + C42784) * C82679) * C82916 +
           ((C40526 + C40527) * C52324 + (C50540 + C50541) * C82679) * C82893) *
              C82938 * C688 -
          (((C39827 * C20409 - C39828 * C20408 - C39827 * C20410 +
             C82533 * C20411 + C39825 * C16307 - C39826 * C16304 -
             C39825 * C16308 + C39819 * C16310) *
                C82679 +
            (C40529 + C40528) * C52324) *
               C82893 +
           ((C50541 + C50540) * C82679 + (C40527 + C40526) * C52324) * C82916 +
           ((C42784 + C42783) * C82679 + (C40525 + C40524) * C52324) * C82931) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C37889 * C108 - C37890 * C102 - C37889 * C109 + C82937 * C120 +
            C37891 * C110 - C37892 * C103 - C37891 * C111 + C82927 * C121 +
            C37893 * C112 - C37894 * C104 - C37893 * C113 + C82911 * C122 +
            C37895 * C114 - C37896 * C105 - C37895 * C115 + C82862 * C123) *
               C52324 +
           (C37889 * C1164 - C37890 * C1155 - C37889 * C1165 + C82937 * C1170 +
            C37891 * C1162 - C37892 * C1154 - C37891 * C1163 + C82927 * C1169 +
            C37893 * C1160 - C37894 * C1153 - C37893 * C1161 + C82911 * C1168 +
            C37895 * C1158 - C37896 * C1152 - C37895 * C1159 + C82862 * C1167) *
               C82679) *
              C82581 * C82938 * C688 -
          ((C37895 * C7860 - C37896 * C7859 - C37895 * C7861 + C82862 * C7862 +
            C37893 * C3355 - C37894 * C3346 - C37893 * C3356 + C82911 * C3364 +
            C37891 * C3357 - C37892 * C3347 - C37891 * C3358 + C82927 * C3365 +
            C37889 * C3359 - C37890 * C3348 - C37889 * C3360 + C82937 * C3366) *
               C82679 +
           (C38607 + C38606 + C38605 + C38604) * C52324) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C39825 * C108 - C39826 * C102 - C39825 * C109 + C39819 * C120 +
            C39827 * C110 - C39828 * C103 - C39827 * C111 + C82533 * C121) *
               C82942 +
           (C43717 + C43718) * C82936 + (C43719 + C43720) * C82924 +
           (C39825 * C5695 - C39826 * C5690 - C39825 * C5696 + C39819 * C5699 +
            C39827 * C5693 - C39828 * C5689 - C39827 * C5694 + C82533 * C5698) *
               C82878) *
              C82581 * C82938 * C688 -
          ((C39827 * C33198 - C39828 * C33197 - C39827 * C33199 +
            C82533 * C33200 + C39825 * C18265 - C39826 * C18262 -
            C39825 * C18266 + C39819 * C18268) *
               C82878 +
           (C42786 + C42785) * C82924 + (C42784 + C42783) * C82936 +
           (C40525 + C40524) * C82942) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
             C82893 * C1746 - C1745 * C1653) *
                C39825 +
            (C82931 * C175 - C1743 * C109 + C82916 * C758 - C1744 * C705 +
             C82893 * C1750 - C1745 * C1658) *
                C39819 +
            (C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C39827 +
            (C1761 - C1762 + C1763 - C1764 + C1765 - C1766) * C82533) *
               C52324 +
           ((C29380 - C29381 + C29382 - C29383 + C29384 - C29385) * C39825 +
            (C29386 - C29387 + C29388 - C29389 + C29390 - C29391) * C39819 +
            (C54377 - C54378 + C54379 - C54380 + C54381 - C54382) * C39827 +
            (C54383 - C54384 + C54385 - C54386 + C54387 - C54388) * C82533) *
               C82679) *
              C82938 * C688 +
          (((C1743 * C695 - C82931 * C753 + C1744 * C1653 - C82916 * C1746 +
             C1745 * C2527 - C82893 * C2653) *
                C39825 +
            (C1743 * C705 - C82931 * C758 + C1744 * C1658 - C82916 * C1750 +
             C1745 * C2533 - C82893 * C2656) *
                C39819 +
            (C1743 * C694 - C82931 * C754 + C1744 * C1654 - C82916 * C1747 +
             C1745 * C2526 - C82893 * C2654) *
                C39827 +
            (C1743 * C703 - C82931 * C759 + C1744 * C1660 - C82916 * C1751 +
             C1745 * C2531 - C82893 * C2657) *
                C82533) *
               C52324 +
           ((C1743 * C3348 - C82931 * C3441 + C1744 * C3345 - C82916 * C3442 +
             C1745 * C16304 - C82893 * C16353) *
                C39825 +
            (C1743 * C3360 - C82931 * C3447 + C1744 * C3354 - C82916 * C3448 +
             C1745 * C16308 - C82893 * C16355) *
                C39819 +
            (C1743 * C3347 - C82931 * C3443 + C1744 * C3344 - C82916 * C3444 +
             C1745 * C20408 - C82893 * C20478) *
                C39827 +
            (C1743 * C3358 - C82931 * C3449 + C1744 * C3352 - C82916 * C3450 +
             C1745 * C20410 - C82893 * C20479) *
                C82533) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C37889 +
            (C82581 * C175 - C168 * C109) * C82937 + (C182 - C183) * C37891 +
            (C184 - C185) * C82927 + (C186 - C187) * C37893 +
            (C188 - C189) * C82911 + (C190 - C191) * C37895 +
            (C192 - C193) * C82862) *
               C52324 +
           ((C5823 - C5824) * C37889 + (C5825 - C5826) * C82937 +
            (C4207 - C4208) * C37891 + (C4209 - C4210) * C82927 +
            (C4211 - C4212) * C37893 + (C4213 - C4214) * C82911 +
            (C8538 - C8539) * C37895 + (C8540 - C8541) * C82862) *
               C82679) *
              C82938 * C688 +
          (((C168 * C695 - C82581 * C753) * C37889 +
            (C168 * C705 - C82581 * C758) * C82937 +
            (C168 * C694 - C82581 * C754) * C37891 +
            (C168 * C703 - C82581 * C759) * C82927 +
            (C168 * C693 - C82581 * C755) * C37893 +
            (C168 * C701 - C82581 * C760) * C82911 +
            (C168 * C692 - C82581 * C756) * C37895 +
            (C168 * C699 - C82581 * C761) * C82862) *
               C52324 +
           ((C168 * C3348 - C82581 * C3441) * C37889 +
            (C168 * C3360 - C82581 * C3447) * C82937 +
            (C168 * C3347 - C82581 * C3443) * C37891 +
            (C168 * C3358 - C82581 * C3449) * C82927 +
            (C168 * C3346 - C82581 * C3445) * C37893 +
            (C168 * C3356 - C82581 * C3451) * C82911 +
            (C168 * C7859 - C82581 * C7929) * C37895 +
            (C168 * C7861 - C82581 * C7930) * C82862) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C39825 +
            (C82581 * C175 - C168 * C109) * C39819 + (C182 - C183) * C39827 +
            (C184 - C185) * C82533) *
               C82942 +
           ((C5823 - C5824) * C39825 + (C5825 - C5826) * C39819 +
            (C4207 - C4208) * C39827 + (C4209 - C4210) * C82533) *
               C82936 +
           ((C5827 - C5828) * C39825 + (C5829 - C5830) * C39819 +
            (C4215 - C4216) * C39827 + (C4217 - C4218) * C82533) *
               C82924 +
           ((C30899 - C30900) * C39825 + (C30901 - C30902) * C39819 +
            (C34186 - C34187) * C39827 + (C34188 - C34189) * C82533) *
               C82878) *
              C82938 * C688 +
          (((C168 * C695 - C82581 * C753) * C39825 +
            (C168 * C705 - C82581 * C758) * C39819 +
            (C168 * C694 - C82581 * C754) * C39827 +
            (C168 * C703 - C82581 * C759) * C82533) *
               C82942 +
           ((C168 * C3348 - C82581 * C3441) * C39825 +
            (C168 * C3360 - C82581 * C3447) * C39819 +
            (C168 * C3347 - C82581 * C3443) * C39827 +
            (C168 * C3358 - C82581 * C3449) * C82533) *
               C82936 +
           ((C168 * C4976 - C82581 * C5060) * C39825 +
            (C168 * C4982 - C82581 * C5063) * C39819 +
            (C168 * C4975 - C82581 * C5061) * C39827 +
            (C168 * C4980 - C82581 * C5064) * C82533) *
               C82924 +
           ((C168 * C18262 - C82581 * C18357) * C39825 +
            (C168 * C18266 - C82581 * C18359) * C39819 +
            (C168 * C33197 - C82581 * C33313) * C39827 +
            (C168 * C33199 - C82581 * C33314) * C82533) *
               C82878) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C39825 +
            (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
                C39819 +
            (C52461 - C52462 + C52463 - C52464) * C39827 +
            (C52465 - C52466 + C52467 - C52468) * C82533) *
               C82931 +
           ((C55448 - C55449 + C55450 - C55451) * C39825 +
            (C55452 - C55453 + C55454 - C55455) * C39819 +
            (C54487 - C54488 + C54489 - C54490) * C39827 +
            (C54491 - C54492 + C54493 - C54494) * C82533) *
               C82916 +
           ((C55456 - C55457 + C55458 - C55459) * C39825 +
            (C55460 - C55461 + C55462 - C55463) * C39819 +
            (C54495 - C54496 + C54497 - C54498) * C39827 +
            (C54499 - C54500 + C54501 - C54502) * C82533) *
               C82893) *
              C82938 * C688 +
          (((C55449 - C55448 + C55451 - C55450) * C39825 +
            (C55453 - C55452 + C55455 - C55454) * C39819 +
            (C54488 - C54487 + C54490 - C54489) * C39827 +
            (C54492 - C54491 + C54494 - C54493) * C82533) *
               C82931 +
           ((C55457 - C55456 + C55459 - C55458) * C39825 +
            (C55461 - C55460 + C55463 - C55462) * C39819 +
            (C54496 - C54495 + C54498 - C54497) * C39827 +
            (C54500 - C54499 + C54502 - C54501) * C82533) *
               C82916 +
           ((C52458 * C2527 - C52324 * C2733 + C52459 * C16304 -
             C82679 * C16399) *
                C39825 +
            (C52458 * C2533 - C52324 * C2736 + C52459 * C16308 -
             C82679 * C16401) *
                C39819 +
            (C52458 * C2526 - C52324 * C2734 + C52459 * C20408 -
             C82679 * C20546) *
                C39827 +
            (C52458 * C2531 - C52324 * C2737 + C52459 * C20410 -
             C82679 * C20547) *
                C82533) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
               C37889 +
           (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
               C82937 +
           (C52461 - C52462 + C52463 - C52464) * C37891 +
           (C52465 - C52466 + C52467 - C52468) * C82927 +
           (C52469 - C52470 + C52471 - C52472) * C37893 +
           (C52473 - C52474 + C52475 - C52476) * C82911 +
           (C52477 - C52478 + C52479 - C52480) * C37895 +
           (C52481 - C52482 + C52483 - C52484) * C82862) *
              C82581 * C82938 * C688 +
          ((C52458 * C695 - C52324 * C805 + C52459 * C3348 - C82679 * C3527) *
               C37889 +
           (C52458 * C705 - C52324 * C810 + C52459 * C3360 - C82679 * C3533) *
               C82937 +
           (C52458 * C694 - C52324 * C806 + C52459 * C3347 - C82679 * C3528) *
               C37891 +
           (C52458 * C703 - C52324 * C811 + C52459 * C3358 - C82679 * C3534) *
               C82927 +
           (C52458 * C693 - C52324 * C807 + C52459 * C3346 - C82679 * C3529) *
               C37893 +
           (C52458 * C701 - C52324 * C812 + C52459 * C3356 - C82679 * C3535) *
               C82911 +
           (C52458 * C692 - C52324 * C808 + C52459 * C7859 - C82679 * C7997) *
               C37895 +
           (C52458 * C699 - C52324 * C813 + C52459 * C7861 - C82679 * C7998) *
               C82862) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C82942 * C240 - C57171 * C102 + C82936 * C1265 - C57172 * C1155 +
            C82924 * C4299 - C57173 * C4108 + C82878 * C5904 - C57174 * C5690) *
               C39825 +
           (C82942 * C246 - C57171 * C109 + C82936 * C1270 - C57172 * C1165 +
            C82924 * C4303 - C57173 * C4113 + C82878 * C5907 - C57174 * C5696) *
               C39819 +
           (C57176 - C57177 + C57178 - C57179 + C57180 - C57181 + C57182 -
            C57183) *
               C39827 +
           (C57184 - C57185 + C57186 - C57187 + C57188 - C57189 + C57190 -
            C57191) *
               C82533) *
              C82581 * C82938 * C688 +
          ((C57171 * C695 - C82942 * C805 + C57172 * C3348 - C82936 * C3527 +
            C57173 * C4976 - C82924 * C5140 + C57174 * C18262 -
            C82878 * C18459) *
               C39825 +
           (C57171 * C705 - C82942 * C810 + C57172 * C3360 - C82936 * C3533 +
            C57173 * C4982 - C82924 * C5143 + C57174 * C18266 -
            C82878 * C18461) *
               C39819 +
           (C57171 * C694 - C82942 * C806 + C57172 * C3347 - C82936 * C3528 +
            C57173 * C4975 - C82924 * C5141 + C57174 * C33197 -
            C82878 * C33421) *
               C39827 +
           (C57171 * C703 - C82942 * C811 + C57172 * C3358 - C82936 * C3534 +
            C57173 * C4980 - C82924 * C5144 + C57174 * C33199 -
            C82878 * C33422) *
               C82533) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C1743 +
            (C39819 * C316 - C39825 * C310 + C82533 * C317 - C39827 * C311) *
                C82931 +
            (C40728 - C40729 + C40730 - C40731) * C1744 +
            (C40732 - C40733 + C40734 - C40735) * C82916 +
            (C40736 - C40737 + C40738 - C40739) * C1745 +
            (C40740 - C40741 + C40742 - C40743) * C82893) *
               C52324 +
           ((C44031 - C44032 + C44033 - C44034) * C1743 +
            (C44035 - C44036 + C44037 - C44038) * C82931 +
            (C43081 - C43082 + C43083 - C43084) * C1744 +
            (C43085 - C43086 + C43087 - C43088) * C82916 +
            (C50836 - C50837 + C50838 - C50839) * C1745 +
            (C50840 - C50841 + C50842 - C50843) * C82893) *
               C82679) *
              C82938 * C688 +
          (((C40729 - C40728 + C40731 - C40730) * C1743 +
            (C40733 - C40732 + C40735 - C40734) * C82931 +
            (C40737 - C40736 + C40739 - C40738) * C1744 +
            (C40741 - C40740 + C40743 - C40742) * C82916 +
            (C40745 - C40744 + C40747 - C40746) * C1745 +
            (C40749 - C40748 + C40751 - C40750) * C82893) *
               C52324 +
           ((C43082 - C43081 + C43084 - C43083) * C1743 +
            (C43086 - C43085 + C43088 - C43087) * C82931 +
            (C50837 - C50836 + C50839 - C50838) * C1744 +
            (C50841 - C50840 + C50843 - C50842) * C82916 +
            (C39825 * C16304 - C39819 * C16307 + C39827 * C20408 -
             C82533 * C20409) *
                C1745 +
            (C39825 * C16445 - C39819 * C16447 + C39827 * C20614 -
             C82533 * C20615) *
                C82893) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82937 * C108 - C37889 * C102 + C82927 * C110 - C37891 * C103 +
             C82911 * C112 - C37893 * C104 + C82862 * C114 - C37895 * C105) *
                C168 +
            (C82937 * C316 - C37889 * C310 + C82927 * C317 - C37891 * C311 +
             C82911 * C318 - C37893 * C312 + C82862 * C319 - C37895 * C313) *
                C82581) *
               C52324 +
           ((C82937 * C1164 - C37889 * C1155 + C82927 * C1162 - C37891 * C1154 +
             C82911 * C1160 - C37893 * C1153 + C82862 * C1158 -
             C37895 * C1152) *
                C168 +
            (C82937 * C1322 - C37889 * C1317 + C82927 * C1323 - C37891 * C1318 +
             C82911 * C1324 - C37893 * C1319 + C82862 * C1325 -
             C37895 * C1320) *
                C82581) *
               C82679) *
              C82938 * C688 +
          (((C38807 - C38806 + C38809 - C38808 + C38811 - C38810 + C38813 -
             C38812) *
                C168 +
            (C38815 - C38814 + C38817 - C38816 + C38819 - C38818 + C38821 -
             C38820) *
                C82581) *
               C52324 +
           ((C37889 * C3348 - C82937 * C3359 + C37891 * C3347 - C82927 * C3357 +
             C37893 * C3346 - C82911 * C3355 + C37895 * C7859 -
             C82862 * C7860) *
                C168 +
            (C37889 * C3613 - C82937 * C3619 + C37891 * C3614 - C82927 * C3620 +
             C37893 * C3615 - C82911 * C3621 + C37895 * C8065 -
             C82862 * C8066) *
                C82581) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C168 +
            (C39819 * C316 - C39825 * C310 + C82533 * C317 - C39827 * C311) *
                C82581) *
               C82942 +
           ((C44031 - C44032 + C44033 - C44034) * C168 +
            (C44035 - C44036 + C44037 - C44038) * C82581) *
               C82936 +
           ((C44039 - C44040 + C44041 - C44042) * C168 +
            (C44043 - C44044 + C44045 - C44046) * C82581) *
               C82924 +
           ((C39819 * C5695 - C39825 * C5690 + C82533 * C5693 -
             C39827 * C5689) *
                C168 +
            (C39819 * C5987 - C39825 * C5984 + C82533 * C5988 -
             C39827 * C5985) *
                C82581) *
               C82878) *
              C82938 * C688 +
          (((C40729 - C40728 + C40731 - C40730) * C168 +
            (C40733 - C40732 + C40735 - C40734) * C82581) *
               C82942 +
           ((C43082 - C43081 + C43084 - C43083) * C168 +
            (C43086 - C43085 + C43088 - C43087) * C82581) *
               C82936 +
           ((C43090 - C43089 + C43092 - C43091) * C168 +
            (C43094 - C43093 + C43096 - C43095) * C82581) *
               C82924 +
           ((C39825 * C18262 - C39819 * C18265 + C39827 * C33197 -
             C82533 * C33198) *
                C168 +
            (C39825 * C18537 - C39819 * C18539 + C39827 * C33521 -
             C82533 * C33522) *
                C82581) *
               C82878) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1743 * C169 - C2032 * C102 - C1743 * C310 + C82931 * C365 +
             C1744 * C753 - C2033 * C695 - C1744 * C857 + C82916 * C913 +
             C1745 * C1746 - C2034 * C1653 - C1745 * C1950 + C82893 * C2035) *
                C39819 +
            (C2076 + C2077 + C2078) * C82533) *
               C52324 +
           ((C29662 + C29663 + C29664) * C39819 +
            (C54717 + C54718 + C54719) * C82533) *
               C82679) *
              C82938 * C688 -
          (((C1745 * C20478 - C2034 * C20408 - C1745 * C20614 +
             C82893 * C20682 + C1744 * C3444 - C2033 * C3344 - C1744 * C3617 +
             C82916 * C3701 + C1743 * C3443 - C2032 * C3347 - C1743 * C3614 +
             C82931 * C3702) *
                C82533 +
            (C1745 * C16353 - C2034 * C16304 - C1745 * C16445 +
             C82893 * C16492 + C1744 * C3442 - C2033 * C3345 - C1744 * C3616 +
             C82916 * C3703 + C1743 * C3441 - C2032 * C3348 - C1743 * C3613 +
             C82931 * C3704) *
                C39819) *
               C82679 +
           ((C1745 * C2654 - C2034 * C2526 - C1745 * C2822 + C82893 * C2926 +
             C1744 * C1747 - C2033 * C1654 - C1744 * C1951 + C82916 * C2036 +
             C1743 * C754 - C2032 * C694 - C1743 * C858 + C82931 * C912) *
                C82533 +
            (C1745 * C2653 - C2034 * C2527 - C1745 * C2821 + C82893 * C2927 +
             C1744 * C1746 - C2033 * C1653 - C1744 * C1950 + C82916 * C2035 +
             C1743 * C753 - C2032 * C695 - C1743 * C857 + C82931 * C913) *
                C39819) *
               C52324) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C82937 +
            C396 * C82927 + C397 * C82911 + C398 * C82862) *
               C52324 +
           (C6108 * C82937 + C4516 * C82927 + C4517 * C82911 + C8772 * C82862) *
               C82679) *
              C82938 * C688 -
          (((C168 * C7929 - C364 * C7859 - C168 * C8065 + C82581 * C8133) *
                C82862 +
            (C168 * C3445 - C364 * C3346 - C168 * C3615 + C82581 * C3700) *
                C82911 +
            (C168 * C3443 - C364 * C3347 - C168 * C3614 + C82581 * C3702) *
                C82927 +
            (C168 * C3441 - C364 * C3348 - C168 * C3613 + C82581 * C3704) *
                C82937) *
               C82679 +
           ((C168 * C756 - C364 * C692 - C168 * C860 + C82581 * C910) * C82862 +
            (C168 * C755 - C364 * C693 - C168 * C859 + C82581 * C911) * C82911 +
            (C168 * C754 - C364 * C694 - C168 * C858 + C82581 * C912) * C82927 +
            (C168 * C753 - C364 * C695 - C168 * C857 + C82581 * C913) *
                C82937) *
               C52324) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C39819 +
            C396 * C82533) *
               C82942 +
           (C6108 * C39819 + C4516 * C82533) * C82936 +
           (C6109 * C39819 + C4518 * C82533) * C82924 +
           (C31060 * C39819 + C34414 * C82533) * C82878) *
              C82938 * C688 -
          (((C168 * C33313 - C364 * C33197 - C168 * C33521 + C82581 * C33629) *
                C82533 +
            (C168 * C18357 - C364 * C18262 - C168 * C18537 + C82581 * C18624) *
                C39819) *
               C82878 +
           ((C168 * C5061 - C364 * C4975 - C168 * C5221 + C82581 * C5301) *
                C82533 +
            (C168 * C5060 - C364 * C4976 - C168 * C5220 + C82581 * C5302) *
                C39819) *
               C82924 +
           ((C168 * C3443 - C364 * C3347 - C168 * C3614 + C82581 * C3702) *
                C82533 +
            (C168 * C3441 - C364 * C3348 - C168 * C3613 + C82581 * C3704) *
                C39819) *
               C82936 +
           ((C168 * C754 - C364 * C694 - C168 * C858 + C82581 * C912) * C82533 +
            (C168 * C753 - C364 * C695 - C168 * C857 + C82581 * C913) *
                C39819) *
               C82942) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C1743 +
            (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
                C82931 +
            (C55448 - C55449 + C55450 - C55451) * C1744 +
            (C55758 - C55759 + C55760 - C55761) * C82916 +
            (C55456 - C55457 + C55458 - C55459) * C1745 +
            (C55762 - C55763 + C55764 - C55765) * C82893) *
               C39819 +
           ((C52461 - C52462 + C52463 - C52464) * C1743 +
            (C52683 - C52684 + C52685 - C52686) * C82931 +
            (C54487 - C54488 + C54489 - C54490) * C1744 +
            (C54818 - C54819 + C54820 - C54821) * C82916 +
            (C54495 - C54496 + C54497 - C54498) * C1745 +
            (C54822 - C54823 + C54824 - C54825) * C82893) *
               C82533) *
              C82938 * C688 +
          (((C55449 - C55448 + C55451 - C55450) * C1743 +
            (C55759 - C55758 + C55761 - C55760) * C82931 +
            (C55457 - C55456 + C55459 - C55458) * C1744 +
            (C55763 - C55762 + C55765 - C55764) * C82916 +
            (C52458 * C2527 - C52324 * C2733 + C52459 * C16304 -
             C82679 * C16399) *
                C1745 +
            (C52458 * C2821 - C52324 * C3002 + C52459 * C16445 -
             C82679 * C16535) *
                C82893) *
               C39819 +
           ((C54488 - C54487 + C54490 - C54489) * C1743 +
            (C54819 - C54818 + C54821 - C54820) * C82931 +
            (C54496 - C54495 + C54498 - C54497) * C1744 +
            (C54823 - C54822 + C54825 - C54824) * C82916 +
            (C52458 * C2526 - C52324 * C2734 + C52459 * C20408 -
             C82679 * C20546) *
                C1745 +
            (C52458 * C2822 - C52324 * C3003 + C52459 * C20614 -
             C82679 * C20749) *
                C82893) *
               C82533) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C168 +
            (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
                C82581) *
               C82937 +
           ((C52461 - C52462 + C52463 - C52464) * C168 +
            (C52683 - C52684 + C52685 - C52686) * C82581) *
               C82927 +
           ((C52469 - C52470 + C52471 - C52472) * C168 +
            (C52687 - C52688 + C52689 - C52690) * C82581) *
               C82911 +
           ((C52477 - C52478 + C52479 - C52480) * C168 +
            (C52691 - C52692 + C52693 - C52694) * C82581) *
               C82862) *
              C82938 * C688 +
          (((C52458 * C695 - C52324 * C805 + C52459 * C3348 - C82679 * C3527) *
                C168 +
            (C52458 * C857 - C52324 * C956 + C52459 * C3613 - C82679 * C3779) *
                C82581) *
               C82937 +
           ((C52458 * C694 - C52324 * C806 + C52459 * C3347 - C82679 * C3528) *
                C168 +
            (C52458 * C858 - C52324 * C957 + C52459 * C3614 - C82679 * C3781) *
                C82581) *
               C82927 +
           ((C52458 * C693 - C52324 * C807 + C52459 * C3346 - C82679 * C3529) *
                C168 +
            (C52458 * C859 - C52324 * C958 + C52459 * C3615 - C82679 * C3783) *
                C82581) *
               C82911 +
           ((C52458 * C692 - C52324 * C808 + C52459 * C7859 - C82679 * C7997) *
                C168 +
            (C52458 * C860 - C52324 * C959 + C52459 * C8065 - C82679 * C8200) *
                C82581) *
               C82862) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82942 * C240 - C57171 * C102 + C82936 * C1265 - C57172 * C1155 +
             C82924 * C4299 - C57173 * C4108 + C82878 * C5904 -
             C57174 * C5690) *
                C168 +
            (C82942 * C441 - C57171 * C310 + C82936 * C1416 - C57172 * C1317 +
             C82924 * C4593 - C57173 * C4405 + C82878 * C6185 -
             C57174 * C5984) *
                C82581) *
               C39819 +
           ((C57176 - C57177 + C57178 - C57179 + C57180 - C57181 + C57182 -
             C57183) *
                C168 +
            (C57390 - C57391 + C57392 - C57393 + C57394 - C57395 + C57396 -
             C57397) *
                C82581) *
               C82533) *
              C82938 * C688 +
          (((C57171 * C695 - C82942 * C805 + C57172 * C3348 - C82936 * C3527 +
             C57173 * C4976 - C82924 * C5140 + C57174 * C18262 -
             C82878 * C18459) *
                C168 +
            (C57171 * C857 - C82942 * C956 + C57172 * C3613 - C82936 * C3779 +
             C57173 * C5220 - C82924 * C5377 + C57174 * C18537 -
             C82878 * C18741) *
                C82581) *
               C39819 +
           ((C57171 * C694 - C82942 * C806 + C57172 * C3347 - C82936 * C3528 +
             C57173 * C4975 - C82924 * C5141 + C57174 * C33197 -
             C82878 * C33421) *
                C168 +
            (C57171 * C858 - C82942 * C957 + C57172 * C3614 - C82936 * C3781 +
             C57173 * C5221 - C82924 * C5378 + C57174 * C33521 -
             C82878 * C33742) *
                C82581) *
               C82533) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezx[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C52458 +
            (C39819 * C503 - C39825 * C497 + C82533 * C504 - C39827 * C498) *
                C52324 +
            (C44031 - C44032 + C44033 - C44034) * C52459 +
            (C44369 - C44370 + C44371 - C44372) * C82679) *
               C82931 +
           ((C40728 - C40729 + C40730 - C40731) * C52458 +
            (C40950 - C40951 + C40952 - C40953) * C52324 +
            (C43081 - C43082 + C43083 - C43084) * C52459 +
            (C43391 - C43392 + C43393 - C43394) * C82679) *
               C82916 +
           ((C40736 - C40737 + C40738 - C40739) * C52458 +
            (C40954 - C40955 + C40956 - C40957) * C52324 +
            (C50836 - C50837 + C50838 - C50839) * C52459 +
            (C51138 - C51139 + C51140 - C51141) * C82679) *
               C82893) *
              C82938 * C688 +
          (((C40729 - C40728 + C40731 - C40730) * C52458 +
            (C40951 - C40950 + C40953 - C40952) * C52324 +
            (C43082 - C43081 + C43084 - C43083) * C52459 +
            (C43392 - C43391 + C43394 - C43393) * C82679) *
               C82931 +
           ((C40737 - C40736 + C40739 - C40738) * C52458 +
            (C40955 - C40954 + C40957 - C40956) * C52324 +
            (C50837 - C50836 + C50839 - C50838) * C52459 +
            (C51139 - C51138 + C51141 - C51140) * C82679) *
               C82916 +
           ((C40745 - C40744 + C40747 - C40746) * C52458 +
            (C40959 - C40958 + C40961 - C40960) * C52324 +
            (C39825 * C16304 - C39819 * C16307 + C39827 * C20408 -
             C82533 * C20409) *
                C52459 +
            (C39825 * C16579 - C39819 * C16581 + C39827 * C20816 -
             C82533 * C20817) *
                C82679) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82937 * C108 - C37889 * C102 + C82927 * C110 - C37891 * C103 +
            C82911 * C112 - C37893 * C104 + C82862 * C114 - C37895 * C105) *
               C52458 +
           (C82937 * C503 - C37889 * C497 + C82927 * C504 - C37891 * C498 +
            C82911 * C505 - C37893 * C499 + C82862 * C506 - C37895 * C500) *
               C52324 +
           (C82937 * C1164 - C37889 * C1155 + C82927 * C1162 - C37891 * C1154 +
            C82911 * C1160 - C37893 * C1153 + C82862 * C1158 - C37895 * C1152) *
               C52459 +
           (C82937 * C1468 - C37889 * C1463 + C82927 * C1469 - C37891 * C1464 +
            C82911 * C1470 - C37893 * C1465 + C82862 * C1471 - C37895 * C1466) *
               C82679) *
              C82581 * C82938 * C688 +
          ((C38807 - C38806 + C38809 - C38808 + C38811 - C38810 + C38813 -
            C38812) *
               C52458 +
           (C39021 - C39020 + C39023 - C39022 + C39025 - C39024 + C39027 -
            C39026) *
               C52324 +
           (C37889 * C3348 - C82937 * C3359 + C37891 * C3347 - C82927 * C3357 +
            C37893 * C3346 - C82911 * C3355 + C37895 * C7859 - C82862 * C7860) *
               C52459 +
           (C37889 * C3859 - C82937 * C3865 + C37891 * C3860 - C82927 * C3866 +
            C37893 * C3861 - C82911 * C3867 + C37895 * C8267 - C82862 * C8268) *
               C82679) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
               C57171 +
           (C39819 * C503 - C39825 * C497 + C82533 * C504 - C39827 * C498) *
               C82942 +
           (C44031 - C44032 + C44033 - C44034) * C57172 +
           (C44369 - C44370 + C44371 - C44372) * C82936 +
           (C44039 - C44040 + C44041 - C44042) * C57173 +
           (C44373 - C44374 + C44375 - C44376) * C82924 +
           (C39819 * C5695 - C39825 * C5690 + C82533 * C5693 - C39827 * C5689) *
               C57174 +
           (C39819 * C6265 - C39825 * C6262 + C82533 * C6266 - C39827 * C6263) *
               C82878) *
              C82581 * C82938 * C688 +
          ((C40729 - C40728 + C40731 - C40730) * C57171 +
           (C40951 - C40950 + C40953 - C40952) * C82942 +
           (C43082 - C43081 + C43084 - C43083) * C57172 +
           (C43392 - C43391 + C43394 - C43393) * C82936 +
           (C43090 - C43089 + C43092 - C43091) * C57173 +
           (C43396 - C43395 + C43398 - C43397) * C82924 +
           (C39825 * C18262 - C39819 * C18265 + C39827 * C33197 -
            C82533 * C33198) *
               C57174 +
           (C39825 * C18817 - C39819 * C18819 + C39827 * C33841 -
            C82533 * C33842) *
               C82878) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
             C82893 * C1746 - C1745 * C1653) *
                C52458 +
            (C82931 * C551 - C1743 * C497 + C82916 * C1055 - C1744 * C1003 +
             C82893 * C2323 - C1745 * C2241) *
                C52324 +
            (C29380 - C29381 + C29382 - C29383 + C29384 - C29385) * C52459 +
            (C29890 - C29891 + C29892 - C29893 + C29894 - C29895) * C82679) *
               C39819 +
           ((C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C52458 +
            (C2328 - C2329 + C2330 - C2331 + C2332 - C2333) * C52324 +
            (C54377 - C54378 + C54379 - C54380 + C54381 - C54382) * C52459 +
            (C55022 - C55023 + C55024 - C55025 + C55026 - C55027) * C82679) *
               C82533) *
              C82938 * C688 +
          (((C1743 * C695 - C82931 * C753 + C1744 * C1653 - C82916 * C1746 +
             C1745 * C2527 - C82893 * C2653) *
                C52458 +
            (C1743 * C1003 - C82931 * C1055 + C1744 * C2241 - C82916 * C2323 +
             C1745 * C3083 - C82893 * C3175) *
                C52324 +
            (C1743 * C3348 - C82931 * C3441 + C1744 * C3345 - C82916 * C3442 +
             C1745 * C16304 - C82893 * C16353) *
                C52459 +
            (C1743 * C3859 - C82931 * C3945 + C1744 * C3862 - C82916 * C3946 +
             C1745 * C16579 - C82893 * C16625) *
                C82679) *
               C39819 +
           ((C1743 * C694 - C82931 * C754 + C1744 * C1654 - C82916 * C1747 +
             C1745 * C2526 - C82893 * C2654) *
                C52458 +
            (C1743 * C1004 - C82931 * C1056 + C1744 * C2242 - C82916 * C2324 +
             C1745 * C3084 - C82893 * C3176) *
                C52324 +
            (C1743 * C3347 - C82931 * C3443 + C1744 * C3344 - C82916 * C3444 +
             C1745 * C20408 - C82893 * C20478) *
                C52459 +
            (C1743 * C3860 - C82931 * C3947 + C1744 * C3863 - C82916 * C3948 +
             C1745 * C20816 - C82893 * C20884) *
                C82679) *
               C82533) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C52458 +
            (C82581 * C551 - C168 * C497) * C52324 + (C5823 - C5824) * C52459 +
            (C6358 - C6359) * C82679) *
               C82937 +
           ((C182 - C183) * C52458 + (C558 - C559) * C52324 +
            (C4207 - C4208) * C52459 + (C4770 - C4771) * C82679) *
               C82927 +
           ((C186 - C187) * C52458 + (C560 - C561) * C52324 +
            (C4211 - C4212) * C52459 + (C4774 - C4775) * C82679) *
               C82911 +
           ((C190 - C191) * C52458 + (C562 - C563) * C52324 +
            (C8538 - C8539) * C52459 + (C8983 - C8984) * C82679) *
               C82862) *
              C82938 * C688 +
          (((C168 * C695 - C82581 * C753) * C52458 +
            (C168 * C1003 - C82581 * C1055) * C52324 +
            (C168 * C3348 - C82581 * C3441) * C52459 +
            (C168 * C3859 - C82581 * C3945) * C82679) *
               C82937 +
           ((C168 * C694 - C82581 * C754) * C52458 +
            (C168 * C1004 - C82581 * C1056) * C52324 +
            (C168 * C3347 - C82581 * C3443) * C52459 +
            (C168 * C3860 - C82581 * C3947) * C82679) *
               C82927 +
           ((C168 * C693 - C82581 * C755) * C52458 +
            (C168 * C1005 - C82581 * C1057) * C52324 +
            (C168 * C3346 - C82581 * C3445) * C52459 +
            (C168 * C3861 - C82581 * C3949) * C82679) *
               C82911 +
           ((C168 * C692 - C82581 * C756) * C52458 +
            (C168 * C1006 - C82581 * C1058) * C52324 +
            (C168 * C7859 - C82581 * C7929) * C52459 +
            (C168 * C8267 - C82581 * C8335) * C82679) *
               C82862) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C57171 +
            (C82581 * C551 - C168 * C497) * C82942 + (C5823 - C5824) * C57172 +
            (C6358 - C6359) * C82936 + (C5827 - C5828) * C57173 +
            (C6360 - C6361) * C82924 + (C30899 - C30900) * C57174 +
            (C31198 - C31199) * C82878) *
               C39819 +
           ((C182 - C183) * C57171 + (C558 - C559) * C82942 +
            (C4207 - C4208) * C57172 + (C4770 - C4771) * C82936 +
            (C4215 - C4216) * C57173 + (C4772 - C4773) * C82924 +
            (C34186 - C34187) * C57174 + (C34621 - C34622) * C82878) *
               C82533) *
              C82938 * C688 +
          (((C168 * C695 - C82581 * C753) * C57171 +
            (C168 * C1003 - C82581 * C1055) * C82942 +
            (C168 * C3348 - C82581 * C3441) * C57172 +
            (C168 * C3859 - C82581 * C3945) * C82936 +
            (C168 * C4976 - C82581 * C5060) * C57173 +
            (C168 * C5454 - C82581 * C5534) * C82924 +
            (C168 * C18262 - C82581 * C18357) * C57174 +
            (C168 * C18817 - C82581 * C18899) * C82878) *
               C39819 +
           ((C168 * C694 - C82581 * C754) * C57171 +
            (C168 * C1004 - C82581 * C1056) * C82942 +
            (C168 * C3347 - C82581 * C3443) * C57172 +
            (C168 * C3860 - C82581 * C3947) * C82936 +
            (C168 * C4975 - C82581 * C5061) * C57173 +
            (C168 * C5455 - C82581 * C5535) * C82924 +
            (C168 * C33197 - C82581 * C33313) * C57174 +
            (C168 * C33841 - C82581 * C33945) * C82878) *
               C82533) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52458 * C240 - C52892 * C102 - C52458 * C497 + C52324 * C608 +
             C52459 * C1265 - C52893 * C1155 - C52459 * C1463 +
             C82679 * C1566) *
                C82931 +
            (C56084 + C56085) * C82916 + (C56086 + C56087) * C82893) *
               C39819 +
           ((C52931 + C52932) * C82931 + (C55150 + C55151) * C82916 +
            (C55152 + C55153) * C82893) *
               C82533) *
              C82938 * C688 -
          (((C52459 * C20546 - C52893 * C20408 - C52459 * C20816 +
             C82679 * C20951 + C52458 * C2734 - C52892 * C2526 -
             C52458 * C3084 + C52324 * C3253) *
                C82893 +
            (C55153 + C55152) * C82916 + (C55151 + C55150) * C82931) *
               C82533 +
           ((C52459 * C16399 - C52893 * C16304 - C52459 * C16579 +
             C82679 * C16670 + C52458 * C2733 - C52892 * C2527 -
             C52458 * C3083 + C52324 * C3254) *
                C82893 +
            (C56087 + C56086) * C82916 + (C56085 + C56084) * C82931) *
               C39819) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52458 * C240 - C52892 * C102 - C52458 * C497 + C52324 * C608 +
            C52459 * C1265 - C52893 * C1155 - C52459 * C1463 + C82679 * C1566) *
               C82581 * C82937 +
           (C52931 + C52932) * C82581 * C82927 +
           (C52933 + C52934) * C82581 * C82911 +
           (C52935 + C52936) * C82581 * C82862) *
              C82938 * C688 -
          ((C52459 * C7997 - C52893 * C7859 - C52459 * C8267 + C82679 * C8402 +
            C52458 * C808 - C52892 * C692 - C52458 * C1006 + C52324 * C1103) *
               C82581 * C82862 +
           (C52459 * C3529 - C52893 * C3346 - C52459 * C3861 + C82679 * C4026 +
            C52458 * C807 - C52892 * C693 - C52458 * C1005 + C52324 * C1104) *
               C82581 * C82911 +
           (C52459 * C3528 - C52893 * C3347 - C52459 * C3860 + C82679 * C4028 +
            C52458 * C806 - C52892 * C694 - C52458 * C1004 + C52324 * C1105) *
               C82581 * C82927 +
           (C52459 * C3527 - C52893 * C3348 - C52459 * C3859 + C82679 * C4030 +
            C52458 * C805 - C52892 * C695 - C52458 * C1003 + C52324 * C1106) *
               C82581 * C82937) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C57171 * C240 - C57595 * C102 - C57171 * C497 + C82942 * C608 +
            C57172 * C1265 - C57596 * C1155 - C57172 * C1463 + C82936 * C1566 +
            C57173 * C4299 - C57597 * C4108 - C57173 * C4683 + C82924 * C4854 +
            C57174 * C5904 - C57598 * C5690 - C57174 * C6262 + C82878 * C6437) *
               C82581 * C39819 +
           (C57624 + C57625 + C57626 + C57627) * C82581 * C82533) *
              C82938 * C688 -
          ((C57174 * C33421 - C57598 * C33197 - C57174 * C33841 +
            C82878 * C34048 + C57173 * C5141 - C57597 * C4975 - C57173 * C5455 +
            C82924 * C5612 + C57172 * C3528 - C57596 * C3347 - C57172 * C3860 +
            C82936 * C4028 + C57171 * C806 - C57595 * C694 - C57171 * C1004 +
            C82942 * C1105) *
               C82581 * C82533 +
           (C57174 * C18459 - C57598 * C18262 - C57174 * C18817 +
            C82878 * C18988 + C57173 * C5140 - C57597 * C4976 - C57173 * C5454 +
            C82924 * C5613 + C57172 * C3527 - C57596 * C3348 - C57172 * C3859 +
            C82936 * C4030 + C57171 * C805 - C57595 * C695 - C57171 * C1003 +
            C82942 * C1106) *
               C82581 * C39819) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39825 * C108 - C39826 * C102 - C39825 * C109 + C39819 * C120 +
             C39827 * C110 - C39828 * C103 - C39827 * C111 + C82533 * C121) *
                C52324 +
            (C43717 + C43718) * C82679) *
               C82931 +
           ((C40524 + C40525) * C52324 + (C42783 + C42784) * C82679) * C82916 +
           ((C40526 + C40527) * C52324 + (C50540 + C50541) * C82679) * C82893) *
              C1149 -
          (((C39827 * C16749 - C39828 * C16746 - C39827 * C16750 +
             C82533 * C16752 + C39825 * C16747 - C39826 * C16745 -
             C39825 * C16748 + C39819 * C16751) *
                C82679 +
            (C50541 + C50540) * C52324) *
               C82893 +
           ((C42786 + C42785) * C82679 + (C42784 + C42783) * C52324) * C82916 +
           ((C43720 + C43719) * C82679 + (C43718 + C43717) * C52324) * C82931) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C37889 * C108 - C37890 * C102 - C37889 * C109 + C82937 * C120 +
            C37891 * C110 - C37892 * C103 - C37891 * C111 + C82927 * C121 +
            C37893 * C112 - C37894 * C104 - C37893 * C113 + C82911 * C122 +
            C37895 * C114 - C37896 * C105 - C37895 * C115 + C82862 * C123) *
               C52324 +
           (C53621 + C53622 + C53623 + C53624) * C82679) *
              C82581 * C1149 -
          ((C37895 * C4118 - C37896 * C4111 - C37895 * C4119 + C82862 * C4123 +
            C37893 * C4116 - C37894 * C4110 - C37893 * C4117 + C82911 * C4122 +
            C37891 * C4114 - C37892 * C4109 - C37891 * C4115 + C82927 * C4121 +
            C37889 * C4112 - C37890 * C4108 - C37889 * C4113 + C82937 * C4120) *
               C82679 +
           (C53624 + C53623 + C53622 + C53621) * C52324) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C39825 * C108 - C39826 * C102 - C39825 * C109 + C39819 * C120 +
            C39827 * C110 - C39828 * C103 - C39827 * C111 + C82533 * C121) *
               C82942 +
           (C43717 + C43718) * C82936 + (C43719 + C43720) * C82924 +
           (C58300 + C58301) * C82878) *
              C82581 * C1149 -
          ((C39827 * C30026 - C39828 * C30023 - C39827 * C30027 +
            C82533 * C30029 + C39825 * C30024 - C39826 * C30022 -
            C39825 * C30025 + C39819 * C30028) *
               C82878 +
           (C58301 + C58300) * C82924 + (C43720 + C43719) * C82936 +
           (C43718 + C43717) * C82942) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
             C82893 * C1746 - C1745 * C1653) *
                C39825 +
            (C82931 * C175 - C1743 * C109 + C82916 * C758 - C1744 * C705 +
             C82893 * C1750 - C1745 * C1658) *
                C39819 +
            (C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C39827 +
            (C1761 - C1762 + C1763 - C1764 + C1765 - C1766) * C82533) *
               C52324 +
           ((C29380 - C29381 + C29382 - C29383 + C29384 - C29385) * C39825 +
            (C29386 - C29387 + C29388 - C29389 + C29390 - C29391) * C39819 +
            (C54377 - C54378 + C54379 - C54380 + C54381 - C54382) * C39827 +
            (C54383 - C54384 + C54385 - C54386 + C54387 - C54388) * C82533) *
               C82679) *
              C1149 +
          (((C29381 - C29380 + C29383 - C29382 + C29385 - C29384) * C39825 +
            (C29387 - C29386 + C29389 - C29388 + C29391 - C29390) * C39819 +
            (C54378 - C54377 + C54380 - C54379 + C54382 - C54381) * C39827 +
            (C54384 - C54383 + C54386 - C54385 + C54388 - C54387) * C82533) *
               C52324 +
           ((C29393 - C29392 + C29395 - C29394 + C29397 - C29396) * C39825 +
            (C29399 - C29398 + C29401 - C29400 + C29403 - C29402) * C39819 +
            (C1743 * C4109 - C82931 * C4199 + C1744 * C4975 - C82916 * C5061 +
             C1745 * C16746 - C82893 * C16828) *
                C39827 +
            (C1743 * C4115 - C82931 * C4203 + C1744 * C4980 - C82916 * C5064 +
             C1745 * C16750 - C82893 * C16830) *
                C82533) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C37889 +
            (C82581 * C175 - C168 * C109) * C82937 + (C182 - C183) * C37891 +
            (C184 - C185) * C82927 + (C186 - C187) * C37893 +
            (C188 - C189) * C82911 + (C190 - C191) * C37895 +
            (C192 - C193) * C82862) *
               C52324 +
           ((C5823 - C5824) * C37889 + (C5825 - C5826) * C82937 +
            (C4207 - C4208) * C37891 + (C4209 - C4210) * C82927 +
            (C4211 - C4212) * C37893 + (C4213 - C4214) * C82911 +
            (C8538 - C8539) * C37895 + (C8540 - C8541) * C82862) *
               C82679) *
              C1149 +
          (((C5824 - C5823) * C37889 + (C5826 - C5825) * C82937 +
            (C4208 - C4207) * C37891 + (C4210 - C4209) * C82927 +
            (C4212 - C4211) * C37893 + (C4214 - C4213) * C82911 +
            (C8539 - C8538) * C37895 + (C8541 - C8540) * C82862) *
               C52324 +
           ((C5828 - C5827) * C37889 + (C5830 - C5829) * C82937 +
            (C4216 - C4215) * C37891 + (C4218 - C4217) * C82927 +
            (C4220 - C4219) * C37893 + (C4222 - C4221) * C82911 +
            (C168 * C4111 - C82581 * C4201) * C37895 +
            (C168 * C4119 - C82581 * C4205) * C82862) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C39825 +
            (C82581 * C175 - C168 * C109) * C39819 + (C182 - C183) * C39827 +
            (C184 - C185) * C82533) *
               C82942 +
           ((C5823 - C5824) * C39825 + (C5825 - C5826) * C39819 +
            (C4207 - C4208) * C39827 + (C4209 - C4210) * C82533) *
               C82936 +
           ((C5827 - C5828) * C39825 + (C5829 - C5830) * C39819 +
            (C4215 - C4216) * C39827 + (C4217 - C4218) * C82533) *
               C82924 +
           ((C30899 - C30900) * C39825 + (C30901 - C30902) * C39819 +
            (C34186 - C34187) * C39827 + (C34188 - C34189) * C82533) *
               C82878) *
              C1149 +
          (((C5824 - C5823) * C39825 + (C5826 - C5825) * C39819 +
            (C4208 - C4207) * C39827 + (C4210 - C4209) * C82533) *
               C82942 +
           ((C5828 - C5827) * C39825 + (C5830 - C5829) * C39819 +
            (C4216 - C4215) * C39827 + (C4218 - C4217) * C82533) *
               C82936 +
           ((C30900 - C30899) * C39825 + (C30902 - C30901) * C39819 +
            (C34187 - C34186) * C39827 + (C34189 - C34188) * C82533) *
               C82924 +
           ((C30904 - C30903) * C39825 + (C30906 - C30905) * C39819 +
            (C168 * C30023 - C82581 * C30073) * C39827 +
            (C168 * C30027 - C82581 * C30075) * C82533) *
               C82878) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C39825 +
            (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
                C39819 +
            (C52461 - C52462 + C52463 - C52464) * C39827 +
            (C52465 - C52466 + C52467 - C52468) * C82533) *
               C82931 +
           ((C55448 - C55449 + C55450 - C55451) * C39825 +
            (C55452 - C55453 + C55454 - C55455) * C39819 +
            (C54487 - C54488 + C54489 - C54490) * C39827 +
            (C54491 - C54492 + C54493 - C54494) * C82533) *
               C82916 +
           ((C55456 - C55457 + C55458 - C55459) * C39825 +
            (C55460 - C55461 + C55462 - C55463) * C39819 +
            (C54495 - C54496 + C54497 - C54498) * C39827 +
            (C54499 - C54500 + C54501 - C54502) * C82533) *
               C82893) *
              C1149 +
          (((C52458 * C1155 - C52324 * C1265 + C52459 * C4108 -
             C82679 * C4299) *
                C39825 +
            (C52458 * C1165 - C52324 * C1270 + C52459 * C4113 -
             C82679 * C4303) *
                C39819 +
            (C52458 * C1154 - C52324 * C1266 + C52459 * C4109 -
             C82679 * C4300) *
                C39827 +
            (C52458 * C1163 - C52324 * C1271 + C52459 * C4115 -
             C82679 * C4304) *
                C82533) *
               C82931 +
           ((C52458 * C3348 - C52324 * C3527 + C52459 * C4976 -
             C82679 * C5140) *
                C39825 +
            (C52458 * C3360 - C52324 * C3533 + C52459 * C4982 -
             C82679 * C5143) *
                C39819 +
            (C52458 * C3347 - C52324 * C3528 + C52459 * C4975 -
             C82679 * C5141) *
                C39827 +
            (C52458 * C3358 - C52324 * C3534 + C52459 * C4980 -
             C82679 * C5144) *
                C82533) *
               C82916 +
           ((C52458 * C3345 - C52324 * C3530 + C52459 * C16745 -
             C82679 * C16905) *
                C39825 +
            (C52458 * C3354 - C52324 * C3536 + C52459 * C16748 -
             C82679 * C16907) *
                C39819 +
            (C52458 * C3344 - C52324 * C3531 + C52459 * C16746 -
             C82679 * C16906) *
                C39827 +
            (C52458 * C3352 - C52324 * C3537 + C52459 * C16750 -
             C82679 * C16908) *
                C82533) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
               C37889 +
           (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
               C82937 +
           (C52461 - C52462 + C52463 - C52464) * C37891 +
           (C52465 - C52466 + C52467 - C52468) * C82927 +
           (C52469 - C52470 + C52471 - C52472) * C37893 +
           (C52473 - C52474 + C52475 - C52476) * C82911 +
           (C52477 - C52478 + C52479 - C52480) * C37895 +
           (C52481 - C52482 + C52483 - C52484) * C82862) *
              C82581 * C1149 +
          ((C52458 * C1155 - C52324 * C1265 + C52459 * C4108 - C82679 * C4299) *
               C37889 +
           (C52458 * C1165 - C52324 * C1270 + C52459 * C4113 - C82679 * C4303) *
               C82937 +
           (C52458 * C1154 - C52324 * C1266 + C52459 * C4109 - C82679 * C4300) *
               C37891 +
           (C52458 * C1163 - C52324 * C1271 + C52459 * C4115 - C82679 * C4304) *
               C82927 +
           (C52458 * C1153 - C52324 * C1267 + C52459 * C4110 - C82679 * C4301) *
               C37893 +
           (C52458 * C1161 - C52324 * C1272 + C52459 * C4117 - C82679 * C4305) *
               C82911 +
           (C52458 * C1152 - C52324 * C1268 + C52459 * C4111 - C82679 * C4302) *
               C37895 +
           (C52458 * C1159 - C52324 * C1273 + C52459 * C4119 - C82679 * C4306) *
               C82862) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C82942 * C240 - C57171 * C102 + C82936 * C1265 - C57172 * C1155 +
            C82924 * C4299 - C57173 * C4108 + C82878 * C5904 - C57174 * C5690) *
               C39825 +
           (C82942 * C246 - C57171 * C109 + C82936 * C1270 - C57172 * C1165 +
            C82924 * C4303 - C57173 * C4113 + C82878 * C5907 - C57174 * C5696) *
               C39819 +
           (C57176 - C57177 + C57178 - C57179 + C57180 - C57181 + C57182 -
            C57183) *
               C39827 +
           (C57184 - C57185 + C57186 - C57187 + C57188 - C57189 + C57190 -
            C57191) *
               C82533) *
              C82581 * C1149 +
          ((C57171 * C1155 - C82942 * C1265 + C57172 * C4108 - C82936 * C4299 +
            C57173 * C5690 - C82924 * C5904 + C57174 * C30022 -
            C82878 * C30123) *
               C39825 +
           (C57171 * C1165 - C82942 * C1270 + C57172 * C4113 - C82936 * C4303 +
            C57173 * C5696 - C82924 * C5907 + C57174 * C30025 -
            C82878 * C30125) *
               C39819 +
           (C57171 * C1154 - C82942 * C1266 + C57172 * C4109 - C82936 * C4300 +
            C57173 * C5689 - C82924 * C5905 + C57174 * C30023 -
            C82878 * C30124) *
               C39827 +
           (C57171 * C1163 - C82942 * C1271 + C57172 * C4115 - C82936 * C4304 +
            C57173 * C5694 - C82924 * C5908 + C57174 * C30027 -
            C82878 * C30126) *
               C82533) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C1743 +
            (C39819 * C316 - C39825 * C310 + C82533 * C317 - C39827 * C311) *
                C82931 +
            (C40728 - C40729 + C40730 - C40731) * C1744 +
            (C40732 - C40733 + C40734 - C40735) * C82916 +
            (C40736 - C40737 + C40738 - C40739) * C1745 +
            (C40740 - C40741 + C40742 - C40743) * C82893) *
               C52324 +
           ((C44031 - C44032 + C44033 - C44034) * C1743 +
            (C44035 - C44036 + C44037 - C44038) * C82931 +
            (C43081 - C43082 + C43083 - C43084) * C1744 +
            (C43085 - C43086 + C43087 - C43088) * C82916 +
            (C50836 - C50837 + C50838 - C50839) * C1745 +
            (C50840 - C50841 + C50842 - C50843) * C82893) *
               C82679) *
              C1149 +
          (((C44032 - C44031 + C44034 - C44033) * C1743 +
            (C44036 - C44035 + C44038 - C44037) * C82931 +
            (C43082 - C43081 + C43084 - C43083) * C1744 +
            (C43086 - C43085 + C43088 - C43087) * C82916 +
            (C50837 - C50836 + C50839 - C50838) * C1745 +
            (C50841 - C50840 + C50843 - C50842) * C82893) *
               C52324 +
           ((C44040 - C44039 + C44042 - C44041) * C1743 +
            (C44044 - C44043 + C44046 - C44045) * C82931 +
            (C43090 - C43089 + C43092 - C43091) * C1744 +
            (C43094 - C43093 + C43096 - C43095) * C82916 +
            (C39825 * C16745 - C39819 * C16747 + C39827 * C16746 -
             C82533 * C16749) *
                C1745 +
            (C39825 * C16983 - C39819 * C16985 + C39827 * C16984 -
             C82533 * C16986) *
                C82893) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82937 * C108 - C37889 * C102 + C82927 * C110 - C37891 * C103 +
             C82911 * C112 - C37893 * C104 + C82862 * C114 - C37895 * C105) *
                C168 +
            (C82937 * C316 - C37889 * C310 + C82927 * C317 - C37891 * C311 +
             C82911 * C318 - C37893 * C312 + C82862 * C319 - C37895 * C313) *
                C82581) *
               C52324 +
           ((C53823 - C53824 + C53825 - C53826 + C53827 - C53828 + C53829 -
             C53830) *
                C168 +
            (C53831 - C53832 + C53833 - C53834 + C53835 - C53836 + C53837 -
             C53838) *
                C82581) *
               C82679) *
              C1149 +
          (((C53824 - C53823 + C53826 - C53825 + C53828 - C53827 + C53830 -
             C53829) *
                C168 +
            (C53832 - C53831 + C53834 - C53833 + C53836 - C53835 + C53838 -
             C53837) *
                C82581) *
               C52324 +
           ((C37889 * C4108 - C82937 * C4112 + C37891 * C4109 - C82927 * C4114 +
             C37893 * C4110 - C82911 * C4116 + C37895 * C4111 -
             C82862 * C4118) *
                C168 +
            (C37889 * C4405 - C82937 * C4409 + C37891 * C4406 - C82927 * C4410 +
             C37893 * C4407 - C82911 * C4411 + C37895 * C4408 -
             C82862 * C4412) *
                C82581) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C168 +
            (C39819 * C316 - C39825 * C310 + C82533 * C317 - C39827 * C311) *
                C82581) *
               C82942 +
           ((C44031 - C44032 + C44033 - C44034) * C168 +
            (C44035 - C44036 + C44037 - C44038) * C82581) *
               C82936 +
           ((C44039 - C44040 + C44041 - C44042) * C168 +
            (C44043 - C44044 + C44045 - C44046) * C82581) *
               C82924 +
           ((C58500 - C58501 + C58502 - C58503) * C168 +
            (C58504 - C58505 + C58506 - C58507) * C82581) *
               C82878) *
              C1149 +
          (((C44032 - C44031 + C44034 - C44033) * C168 +
            (C44036 - C44035 + C44038 - C44037) * C82581) *
               C82942 +
           ((C44040 - C44039 + C44042 - C44041) * C168 +
            (C44044 - C44043 + C44046 - C44045) * C82581) *
               C82936 +
           ((C58501 - C58500 + C58503 - C58502) * C168 +
            (C58505 - C58504 + C58507 - C58506) * C82581) *
               C82924 +
           ((C39825 * C30022 - C39819 * C30024 + C39827 * C30023 -
             C82533 * C30026) *
                C168 +
            (C39825 * C30169 - C39819 * C30171 + C39827 * C30170 -
             C82533 * C30172) *
                C82581) *
               C82878) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1743 * C169 - C2032 * C102 - C1743 * C310 + C82931 * C365 +
             C1744 * C753 - C2033 * C695 - C1744 * C857 + C82916 * C913 +
             C1745 * C1746 - C2034 * C1653 - C1745 * C1950 + C82893 * C2035) *
                C39819 +
            (C2076 + C2077 + C2078) * C82533) *
               C52324 +
           ((C29662 + C29663 + C29664) * C39819 +
            (C54717 + C54718 + C54719) * C82533) *
               C82679) *
              C1149 -
          (((C1745 * C16828 - C2034 * C16746 - C1745 * C16984 +
             C82893 * C17062 + C1744 * C5061 - C2033 * C4975 - C1744 * C5221 +
             C82916 * C5301 + C1743 * C4199 - C2032 * C4109 - C1743 * C4406 +
             C82931 * C4488) *
                C82533 +
            (C29667 + C29666 + C29665) * C39819) *
               C82679 +
           ((C54719 + C54718 + C54717) * C82533 +
            (C29664 + C29663 + C29662) * C39819) *
               C52324) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C82937 +
            C396 * C82927 + C397 * C82911 + C398 * C82862) *
               C52324 +
           (C53905 + C53906 + C53907 + C53908) * C82679) *
              C1149 -
          (((C168 * C4201 - C364 * C4111 - C168 * C4408 + C82581 * C4490) *
                C82862 +
            C4519 * C82911 + C4518 * C82927 + C6109 * C82937) *
               C82679 +
           (C53908 + C53907 + C53906 + C53905) * C52324) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C39819 +
            C396 * C82533) *
               C82942 +
           (C58574 + C58575) * C82936 + (C58576 + C58577) * C82924 +
           (C58578 + C58579) * C82878) *
              C1149 -
          (((C168 * C30073 - C364 * C30023 - C168 * C30170 + C82581 * C30216) *
                C82533 +
            C31061 * C39819) *
               C82878 +
           (C58579 + C58578) * C82924 + (C58577 + C58576) * C82936 +
           (C58575 + C58574) * C82942) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C1743 +
            (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
                C82931 +
            (C55448 - C55449 + C55450 - C55451) * C1744 +
            (C55758 - C55759 + C55760 - C55761) * C82916 +
            (C55456 - C55457 + C55458 - C55459) * C1745 +
            (C55762 - C55763 + C55764 - C55765) * C82893) *
               C39819 +
           ((C52461 - C52462 + C52463 - C52464) * C1743 +
            (C52683 - C52684 + C52685 - C52686) * C82931 +
            (C54487 - C54488 + C54489 - C54490) * C1744 +
            (C54818 - C54819 + C54820 - C54821) * C82916 +
            (C54495 - C54496 + C54497 - C54498) * C1745 +
            (C54822 - C54823 + C54824 - C54825) * C82893) *
               C82533) *
              C1149 +
          (((C52458 * C1155 - C52324 * C1265 + C52459 * C4108 -
             C82679 * C4299) *
                C1743 +
            (C52458 * C1317 - C52324 * C1416 + C52459 * C4405 -
             C82679 * C4593) *
                C82931 +
            (C52458 * C3348 - C52324 * C3527 + C52459 * C4976 -
             C82679 * C5140) *
                C1744 +
            (C52458 * C3613 - C52324 * C3779 + C52459 * C5220 -
             C82679 * C5377) *
                C82916 +
            (C52458 * C3345 - C52324 * C3530 + C52459 * C16745 -
             C82679 * C16905) *
                C1745 +
            (C52458 * C3616 - C52324 * C3780 + C52459 * C16983 -
             C82679 * C17137) *
                C82893) *
               C39819 +
           ((C52458 * C1154 - C52324 * C1266 + C52459 * C4109 -
             C82679 * C4300) *
                C1743 +
            (C52458 * C1318 - C52324 * C1417 + C52459 * C4406 -
             C82679 * C4594) *
                C82931 +
            (C52458 * C3347 - C52324 * C3528 + C52459 * C4975 -
             C82679 * C5141) *
                C1744 +
            (C52458 * C3614 - C52324 * C3781 + C52459 * C5221 -
             C82679 * C5378) *
                C82916 +
            (C52458 * C3344 - C52324 * C3531 + C52459 * C16746 -
             C82679 * C16906) *
                C1745 +
            (C52458 * C3617 - C52324 * C3782 + C52459 * C16984 -
             C82679 * C17138) *
                C82893) *
               C82533) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C168 +
            (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
                C82581) *
               C82937 +
           ((C52461 - C52462 + C52463 - C52464) * C168 +
            (C52683 - C52684 + C52685 - C52686) * C82581) *
               C82927 +
           ((C52469 - C52470 + C52471 - C52472) * C168 +
            (C52687 - C52688 + C52689 - C52690) * C82581) *
               C82911 +
           ((C52477 - C52478 + C52479 - C52480) * C168 +
            (C52691 - C52692 + C52693 - C52694) * C82581) *
               C82862) *
              C1149 +
          (((C52458 * C1155 - C52324 * C1265 + C52459 * C4108 -
             C82679 * C4299) *
                C168 +
            (C52458 * C1317 - C52324 * C1416 + C52459 * C4405 -
             C82679 * C4593) *
                C82581) *
               C82937 +
           ((C52458 * C1154 - C52324 * C1266 + C52459 * C4109 -
             C82679 * C4300) *
                C168 +
            (C52458 * C1318 - C52324 * C1417 + C52459 * C4406 -
             C82679 * C4594) *
                C82581) *
               C82927 +
           ((C52458 * C1153 - C52324 * C1267 + C52459 * C4110 -
             C82679 * C4301) *
                C168 +
            (C52458 * C1319 - C52324 * C1418 + C52459 * C4407 -
             C82679 * C4595) *
                C82581) *
               C82911 +
           ((C52458 * C1152 - C52324 * C1268 + C52459 * C4111 -
             C82679 * C4302) *
                C168 +
            (C52458 * C1320 - C52324 * C1419 + C52459 * C4408 -
             C82679 * C4596) *
                C82581) *
               C82862) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82942 * C240 - C57171 * C102 + C82936 * C1265 - C57172 * C1155 +
             C82924 * C4299 - C57173 * C4108 + C82878 * C5904 -
             C57174 * C5690) *
                C168 +
            (C82942 * C441 - C57171 * C310 + C82936 * C1416 - C57172 * C1317 +
             C82924 * C4593 - C57173 * C4405 + C82878 * C6185 -
             C57174 * C5984) *
                C82581) *
               C39819 +
           ((C57176 - C57177 + C57178 - C57179 + C57180 - C57181 + C57182 -
             C57183) *
                C168 +
            (C57390 - C57391 + C57392 - C57393 + C57394 - C57395 + C57396 -
             C57397) *
                C82581) *
               C82533) *
              C1149 +
          (((C57171 * C1155 - C82942 * C1265 + C57172 * C4108 - C82936 * C4299 +
             C57173 * C5690 - C82924 * C5904 + C57174 * C30022 -
             C82878 * C30123) *
                C168 +
            (C57171 * C1317 - C82942 * C1416 + C57172 * C4405 - C82936 * C4593 +
             C57173 * C5984 - C82924 * C6185 + C57174 * C30169 -
             C82878 * C30259) *
                C82581) *
               C39819 +
           ((C57171 * C1154 - C82942 * C1266 + C57172 * C4109 - C82936 * C4300 +
             C57173 * C5689 - C82924 * C5905 + C57174 * C30023 -
             C82878 * C30124) *
                C168 +
            (C57171 * C1318 - C82942 * C1417 + C57172 * C4406 - C82936 * C4594 +
             C57173 * C5985 - C82924 * C6186 + C57174 * C30170 -
             C82878 * C30260) *
                C82581) *
               C82533) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezx[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C52458 +
            (C39819 * C503 - C39825 * C497 + C82533 * C504 - C39827 * C498) *
                C52324 +
            (C44031 - C44032 + C44033 - C44034) * C52459 +
            (C44369 - C44370 + C44371 - C44372) * C82679) *
               C82931 +
           ((C40728 - C40729 + C40730 - C40731) * C52458 +
            (C40950 - C40951 + C40952 - C40953) * C52324 +
            (C43081 - C43082 + C43083 - C43084) * C52459 +
            (C43391 - C43392 + C43393 - C43394) * C82679) *
               C82916 +
           ((C40736 - C40737 + C40738 - C40739) * C52458 +
            (C40954 - C40955 + C40956 - C40957) * C52324 +
            (C50836 - C50837 + C50838 - C50839) * C52459 +
            (C51138 - C51139 + C51140 - C51141) * C82679) *
               C82893) *
              C1149 +
          (((C44032 - C44031 + C44034 - C44033) * C52458 +
            (C44370 - C44369 + C44372 - C44371) * C52324 +
            (C44040 - C44039 + C44042 - C44041) * C52459 +
            (C44374 - C44373 + C44376 - C44375) * C82679) *
               C82931 +
           ((C43082 - C43081 + C43084 - C43083) * C52458 +
            (C43392 - C43391 + C43394 - C43393) * C52324 +
            (C43090 - C43089 + C43092 - C43091) * C52459 +
            (C43396 - C43395 + C43398 - C43397) * C82679) *
               C82916 +
           ((C50837 - C50836 + C50839 - C50838) * C52458 +
            (C51139 - C51138 + C51141 - C51140) * C52324 +
            (C39825 * C16745 - C39819 * C16747 + C39827 * C16746 -
             C82533 * C16749) *
                C52459 +
            (C39825 * C17213 - C39819 * C17215 + C39827 * C17214 -
             C82533 * C17216) *
                C82679) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82937 * C108 - C37889 * C102 + C82927 * C110 - C37891 * C103 +
            C82911 * C112 - C37893 * C104 + C82862 * C114 - C37895 * C105) *
               C52458 +
           (C82937 * C503 - C37889 * C497 + C82927 * C504 - C37891 * C498 +
            C82911 * C505 - C37893 * C499 + C82862 * C506 - C37895 * C500) *
               C52324 +
           (C53823 - C53824 + C53825 - C53826 + C53827 - C53828 + C53829 -
            C53830) *
               C52459 +
           (C54041 - C54042 + C54043 - C54044 + C54045 - C54046 + C54047 -
            C54048) *
               C82679) *
              C82581 * C1149 +
          ((C53824 - C53823 + C53826 - C53825 + C53828 - C53827 + C53830 -
            C53829) *
               C52458 +
           (C54042 - C54041 + C54044 - C54043 + C54046 - C54045 + C54048 -
            C54047) *
               C52324 +
           (C37889 * C4108 - C82937 * C4112 + C37891 * C4109 - C82927 * C4114 +
            C37893 * C4110 - C82911 * C4116 + C37895 * C4111 - C82862 * C4118) *
               C52459 +
           (C37889 * C4683 - C82937 * C4687 + C37891 * C4684 - C82927 * C4688 +
            C37893 * C4685 - C82911 * C4689 + C37895 * C4686 - C82862 * C4690) *
               C82679) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
               C57171 +
           (C39819 * C503 - C39825 * C497 + C82533 * C504 - C39827 * C498) *
               C82942 +
           (C44031 - C44032 + C44033 - C44034) * C57172 +
           (C44369 - C44370 + C44371 - C44372) * C82936 +
           (C44039 - C44040 + C44041 - C44042) * C57173 +
           (C44373 - C44374 + C44375 - C44376) * C82924 +
           (C58500 - C58501 + C58502 - C58503) * C57174 +
           (C58712 - C58713 + C58714 - C58715) * C82878) *
              C82581 * C1149 +
          ((C44032 - C44031 + C44034 - C44033) * C57171 +
           (C44370 - C44369 + C44372 - C44371) * C82942 +
           (C44040 - C44039 + C44042 - C44041) * C57172 +
           (C44374 - C44373 + C44376 - C44375) * C82936 +
           (C58501 - C58500 + C58503 - C58502) * C57173 +
           (C58713 - C58712 + C58715 - C58714) * C82924 +
           (C39825 * C30022 - C39819 * C30024 + C39827 * C30023 -
            C82533 * C30026) *
               C57174 +
           (C39825 * C30303 - C39819 * C30305 + C39827 * C30304 -
            C82533 * C30306) *
               C82878) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
             C82893 * C1746 - C1745 * C1653) *
                C52458 +
            (C82931 * C551 - C1743 * C497 + C82916 * C1055 - C1744 * C1003 +
             C82893 * C2323 - C1745 * C2241) *
                C52324 +
            (C29380 - C29381 + C29382 - C29383 + C29384 - C29385) * C52459 +
            (C29890 - C29891 + C29892 - C29893 + C29894 - C29895) * C82679) *
               C39819 +
           ((C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C52458 +
            (C2328 - C2329 + C2330 - C2331 + C2332 - C2333) * C52324 +
            (C54377 - C54378 + C54379 - C54380 + C54381 - C54382) * C52459 +
            (C55022 - C55023 + C55024 - C55025 + C55026 - C55027) * C82679) *
               C82533) *
              C1149 +
          (((C29381 - C29380 + C29383 - C29382 + C29385 - C29384) * C52458 +
            (C29891 - C29890 + C29893 - C29892 + C29895 - C29894) * C52324 +
            (C29393 - C29392 + C29395 - C29394 + C29397 - C29396) * C52459 +
            (C29897 - C29896 + C29899 - C29898 + C29901 - C29900) * C82679) *
               C39819 +
           ((C54378 - C54377 + C54380 - C54379 + C54382 - C54381) * C52458 +
            (C55023 - C55022 + C55025 - C55024 + C55027 - C55026) * C52324 +
            (C1743 * C4109 - C82931 * C4199 + C1744 * C4975 - C82916 * C5061 +
             C1745 * C16746 - C82893 * C16828) *
                C52459 +
            (C1743 * C4684 - C82931 * C4766 + C1744 * C5455 - C82916 * C5535 +
             C1745 * C17214 - C82893 * C17292) *
                C82679) *
               C82533) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C52458 +
            (C82581 * C551 - C168 * C497) * C52324 + (C5823 - C5824) * C52459 +
            (C6358 - C6359) * C82679) *
               C82937 +
           ((C182 - C183) * C52458 + (C558 - C559) * C52324 +
            (C4207 - C4208) * C52459 + (C4770 - C4771) * C82679) *
               C82927 +
           ((C186 - C187) * C52458 + (C560 - C561) * C52324 +
            (C4211 - C4212) * C52459 + (C4774 - C4775) * C82679) *
               C82911 +
           ((C190 - C191) * C52458 + (C562 - C563) * C52324 +
            (C8538 - C8539) * C52459 + (C8983 - C8984) * C82679) *
               C82862) *
              C1149 +
          (((C5824 - C5823) * C52458 + (C6359 - C6358) * C52324 +
            (C5828 - C5827) * C52459 + (C6361 - C6360) * C82679) *
               C82937 +
           ((C4208 - C4207) * C52458 + (C4771 - C4770) * C52324 +
            (C4216 - C4215) * C52459 + (C4773 - C4772) * C82679) *
               C82927 +
           ((C4212 - C4211) * C52458 + (C4775 - C4774) * C52324 +
            (C4220 - C4219) * C52459 + (C4777 - C4776) * C82679) *
               C82911 +
           ((C8539 - C8538) * C52458 + (C8984 - C8983) * C52324 +
            (C168 * C4111 - C82581 * C4201) * C52459 +
            (C168 * C4686 - C82581 * C4768) * C82679) *
               C82862) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C57171 +
            (C82581 * C551 - C168 * C497) * C82942 + (C5823 - C5824) * C57172 +
            (C6358 - C6359) * C82936 + (C5827 - C5828) * C57173 +
            (C6360 - C6361) * C82924 + (C30899 - C30900) * C57174 +
            (C31198 - C31199) * C82878) *
               C39819 +
           ((C182 - C183) * C57171 + (C558 - C559) * C82942 +
            (C4207 - C4208) * C57172 + (C4770 - C4771) * C82936 +
            (C4215 - C4216) * C57173 + (C4772 - C4773) * C82924 +
            (C34186 - C34187) * C57174 + (C34621 - C34622) * C82878) *
               C82533) *
              C1149 +
          (((C5824 - C5823) * C57171 + (C6359 - C6358) * C82942 +
            (C5828 - C5827) * C57172 + (C6361 - C6360) * C82936 +
            (C30900 - C30899) * C57173 + (C31199 - C31198) * C82924 +
            (C30904 - C30903) * C57174 + (C31201 - C31200) * C82878) *
               C39819 +
           ((C4208 - C4207) * C57171 + (C4771 - C4770) * C82942 +
            (C4216 - C4215) * C57172 + (C4773 - C4772) * C82936 +
            (C34187 - C34186) * C57173 + (C34622 - C34621) * C82924 +
            (C168 * C30023 - C82581 * C30073) * C57174 +
            (C168 * C30304 - C82581 * C30350) * C82878) *
               C82533) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C52458 * C240 - C52892 * C102 - C52458 * C497 + C52324 * C608 +
             C52459 * C1265 - C52893 * C1155 - C52459 * C1463 +
             C82679 * C1566) *
                C82931 +
            (C56084 + C56085) * C82916 + (C56086 + C56087) * C82893) *
               C39819 +
           ((C52931 + C52932) * C82931 + (C55150 + C55151) * C82916 +
            (C55152 + C55153) * C82893) *
               C82533) *
              C1149 -
          (((C52459 * C16906 - C52893 * C16746 - C52459 * C17214 +
             C82679 * C17368 + C52458 * C3531 - C52892 * C3344 -
             C52458 * C3863 + C52324 * C4027) *
                C82893 +
            (C52459 * C5141 - C52893 * C4975 - C52459 * C5455 + C82679 * C5612 +
             C52458 * C3528 - C52892 * C3347 - C52458 * C3860 +
             C52324 * C4028) *
                C82916 +
            (C52459 * C4300 - C52893 * C4109 - C52459 * C4684 + C82679 * C4855 +
             C52458 * C1266 - C52892 * C1154 - C52458 * C1464 +
             C52324 * C1565) *
                C82931) *
               C82533 +
           ((C52459 * C16905 - C52893 * C16745 - C52459 * C17213 +
             C82679 * C17367 + C52458 * C3530 - C52892 * C3345 -
             C52458 * C3862 + C52324 * C4029) *
                C82893 +
            (C52459 * C5140 - C52893 * C4976 - C52459 * C5454 + C82679 * C5613 +
             C52458 * C3527 - C52892 * C3348 - C52458 * C3859 +
             C52324 * C4030) *
                C82916 +
            (C52459 * C4299 - C52893 * C4108 - C52459 * C4683 + C82679 * C4854 +
             C52458 * C1265 - C52892 * C1155 - C52458 * C1463 +
             C52324 * C1566) *
                C82931) *
               C39819) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C52458 * C240 - C52892 * C102 - C52458 * C497 + C52324 * C608 +
            C52459 * C1265 - C52893 * C1155 - C52459 * C1463 + C82679 * C1566) *
               C82581 * C82937 +
           (C52931 + C52932) * C82581 * C82927 +
           (C52933 + C52934) * C82581 * C82911 +
           (C52935 + C52936) * C82581 * C82862) *
              C1149 -
          ((C52459 * C4302 - C52893 * C4111 - C52459 * C4686 + C82679 * C4857 +
            C52458 * C1268 - C52892 * C1152 - C52458 * C1466 + C52324 * C1563) *
               C82581 * C82862 +
           (C52459 * C4301 - C52893 * C4110 - C52459 * C4685 + C82679 * C4856 +
            C52458 * C1267 - C52892 * C1153 - C52458 * C1465 + C52324 * C1564) *
               C82581 * C82911 +
           (C52459 * C4300 - C52893 * C4109 - C52459 * C4684 + C82679 * C4855 +
            C52458 * C1266 - C52892 * C1154 - C52458 * C1464 + C52324 * C1565) *
               C82581 * C82927 +
           (C52459 * C4299 - C52893 * C4108 - C52459 * C4683 + C82679 * C4854 +
            C52458 * C1265 - C52892 * C1155 - C52458 * C1463 + C52324 * C1566) *
               C82581 * C82937) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C57171 * C240 - C57595 * C102 - C57171 * C497 + C82942 * C608 +
            C57172 * C1265 - C57596 * C1155 - C57172 * C1463 + C82936 * C1566 +
            C57173 * C4299 - C57597 * C4108 - C57173 * C4683 + C82924 * C4854 +
            C57174 * C5904 - C57598 * C5690 - C57174 * C6262 + C82878 * C6437) *
               C82581 * C39819 +
           (C57624 + C57625 + C57626 + C57627) * C82581 * C82533) *
              C1149 -
          ((C57174 * C30124 - C57598 * C30023 - C57174 * C30304 +
            C82878 * C30399 + C57173 * C5905 - C57597 * C5689 - C57173 * C6263 +
            C82924 * C6436 + C57172 * C4300 - C57596 * C4109 - C57172 * C4684 +
            C82936 * C4855 + C57171 * C1266 - C57595 * C1154 - C57171 * C1464 +
            C82942 * C1565) *
               C82581 * C82533 +
           (C57174 * C30123 - C57598 * C30022 - C57174 * C30303 +
            C82878 * C30398 + C57173 * C5904 - C57597 * C5690 - C57173 * C6262 +
            C82924 * C6437 + C57172 * C4299 - C57596 * C4108 - C57172 * C4683 +
            C82936 * C4854 + C57171 * C1265 - C57595 * C1155 - C57171 * C1463 +
            C82942 * C1566) *
               C82581 * C39819) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C80234 * C108 - C80274 * C102 - C80234 * C109 + C82528 * C120 +
            C80230 * C110 - C80269 * C103 - C80230 * C111 + C82536 * C121 +
            C80280 * C112 - C44665 * C104 - C80280 * C113 + C44656 * C122) *
               C82675 +
           (C48704 + C48705 + C48706) * C82682 +
           (C80234 * C4112 - C80274 * C4108 - C80234 * C4113 + C82528 * C4120 +
            C80230 * C4114 - C80269 * C4109 - C80230 * C4115 + C82536 * C4121 +
            C80280 * C4116 - C44665 * C4110 - C80280 * C4117 + C44656 * C4122) *
               C61595) *
              C82581 * C82938 * C82939 * C90 -
          ((C80280 * C4118 - C44665 * C4111 - C80280 * C4119 + C44656 * C4123 +
            C80230 * C4116 - C80269 * C4110 - C80230 * C4117 + C82536 * C4122 +
            C80234 * C4114 - C80274 * C4109 - C80234 * C4115 + C82528 * C4121) *
               C61595 +
           (C80280 * C1158 - C44665 * C1152 - C80280 * C1159 + C44656 * C1167 +
            C80230 * C1160 - C80269 * C1153 - C80230 * C1161 + C82536 * C1168 +
            C80234 * C1162 - C80274 * C1154 - C80234 * C1163 + C82528 * C1169) *
               C82682 +
           (C80280 * C114 - C44665 * C105 - C80280 * C115 + C44656 * C123 +
            C80230 * C112 - C80269 * C104 - C80230 * C113 + C82536 * C122 +
            C80234 * C110 - C80274 * C103 - C80234 * C111 + C82528 * C121) *
               C82675) *
              C82581 * C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexy[54] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82581 * C169 - C168 * C102) * C80234 +
                      (C82581 * C175 - C168 * C109) * C82528 +
                      (C182 - C183) * C80230 + (C184 - C185) * C82536 +
                      (C186 - C187) * C80280 + (C188 - C189) * C44656) *
                         C82675 +
                     ((C5823 - C5824) * C80234 + (C5825 - C5826) * C82528 +
                      (C4207 - C4208) * C80230 + (C4209 - C4210) * C82536 +
                      (C4211 - C4212) * C80280 + (C4213 - C4214) * C44656) *
                         C82682 +
                     ((C5827 - C5828) * C80234 + (C5829 - C5830) * C82528 +
                      (C4215 - C4216) * C80230 + (C4217 - C4218) * C82536 +
                      (C4219 - C4220) * C80280 + (C4221 - C4222) * C44656) *
                         C61595) *
                        C82938 * C82939 * C90 +
                    (((C183 - C182) * C80234 + (C185 - C184) * C82528 +
                      (C187 - C186) * C80230 + (C189 - C188) * C82536 +
                      (C191 - C190) * C80280 + (C193 - C192) * C44656) *
                         C82675 +
                     ((C4208 - C4207) * C80234 + (C4210 - C4209) * C82528 +
                      (C4212 - C4211) * C80230 + (C4214 - C4213) * C82536 +
                      (C8539 - C8538) * C80280 + (C8541 - C8540) * C44656) *
                         C82682 +
                     ((C4216 - C4215) * C80234 + (C4218 - C4217) * C82528 +
                      (C4220 - C4219) * C80230 + (C4222 - C4221) * C82536 +
                      (C168 * C4111 - C82581 * C4201) * C80280 +
                      (C168 * C4119 - C82581 * C4205) * C44656) *
                         C61595) *
                        C82938 * C82939 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C82675 * C240 - C80637 * C102 + C82682 * C1265 - C80634 * C1155 +
            C61595 * C4299 - C80645 * C4108) *
               C80234 +
           (C82675 * C246 - C80637 * C109 + C82682 * C1270 - C80634 * C1165 +
            C61595 * C4303 - C80645 * C4113) *
               C82528 +
           (C61748 - C61749 + C61750 - C61751 + C61752 - C61753) * C80230 +
           (C61754 - C61755 + C61756 - C61757 + C61758 - C61759) * C82536 +
           (C61760 - C61761 + C61762 - C61763 + C61764 - C61765) * C80280 +
           (C61766 - C61767 + C61768 - C61769 + C61770 - C61771) * C44656) *
              C82581 * C82938 * C82939 * C90 +
          ((C61749 - C61748 + C61751 - C61750 + C61753 - C61752) * C80234 +
           (C61755 - C61754 + C61757 - C61756 + C61759 - C61758) * C82528 +
           (C61761 - C61760 + C61763 - C61762 + C61765 - C61764) * C80230 +
           (C61767 - C61766 + C61769 - C61768 + C61771 - C61770) * C82536 +
           (C80637 * C105 - C82675 * C243 + C80634 * C1152 - C82682 * C1268 +
            C80645 * C4111 - C61595 * C4302) *
               C80280 +
           (C80637 * C115 - C82675 * C249 + C80634 * C1159 - C82682 * C1273 +
            C80645 * C4119 - C61595 * C4306) *
               C44656) *
              C82581 * C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82528 * C108 - C80234 * C102 + C82536 * C110 - C80230 * C103 +
             C44656 * C112 - C80280 * C104) *
                C168 +
            (C82528 * C316 - C80234 * C310 + C82536 * C317 - C80230 * C311 +
             C44656 * C318 - C80280 * C312) *
                C82581) *
               C82675 +
           ((C49001 - C49002 + C49003 - C49004 + C49005 - C49006) * C168 +
            (C49007 - C49008 + C49009 - C49010 + C49011 - C49012) * C82581) *
               C82682 +
           ((C82528 * C4112 - C80234 * C4108 + C82536 * C4114 - C80230 * C4109 +
             C44656 * C4116 - C80280 * C4110) *
                C168 +
            (C82528 * C4409 - C80234 * C4405 + C82536 * C4410 - C80230 * C4406 +
             C44656 * C4411 - C80280 * C4407) *
                C82581) *
               C61595) *
              C82938 * C82939 * C90 +
          (((C80234 * C103 - C82528 * C110 + C80230 * C104 - C82536 * C112 +
             C80280 * C105 - C44656 * C114) *
                C168 +
            (C80234 * C311 - C82528 * C317 + C80230 * C312 - C82536 * C318 +
             C80280 * C313 - C44656 * C319) *
                C82581) *
               C82675 +
           ((C80234 * C1154 - C82528 * C1162 + C80230 * C1153 - C82536 * C1160 +
             C80280 * C1152 - C44656 * C1158) *
                C168 +
            (C80234 * C1318 - C82528 * C1323 + C80230 * C1319 - C82536 * C1324 +
             C80280 * C1320 - C44656 * C1325) *
                C82581) *
               C82682 +
           ((C80234 * C4109 - C82528 * C4114 + C80230 * C4110 - C82536 * C4116 +
             C80280 * C4111 - C44656 * C4118) *
                C168 +
            (C80234 * C4406 - C82528 * C4410 + C80230 * C4407 - C82536 * C4411 +
             C80280 * C4408 - C44656 * C4412) *
                C82581) *
               C61595) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C82528 +
            C396 * C82536 + C397 * C44656) *
               C82675 +
           (C6108 * C82528 + C4516 * C82536 + C4517 * C44656) * C82682 +
           (C6109 * C82528 + C4518 * C82536 + C4519 * C44656) * C61595) *
              C82938 * C82939 * C90 -
          (((C168 * C4201 - C364 * C4111 - C168 * C4408 + C82581 * C4490) *
                C44656 +
            C4519 * C82536 + C4518 * C82528) *
               C61595 +
           (C8772 * C44656 + C4517 * C82536 + C4516 * C82528) * C82682 +
           (C398 * C44656 + C397 * C82536 + C396 * C82528) * C82675) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82675 * C240 - C80637 * C102 + C82682 * C1265 - C80634 * C1155 +
             C61595 * C4299 - C80645 * C4108) *
                C168 +
            (C82675 * C441 - C80637 * C310 + C82682 * C1416 - C80634 * C1317 +
             C61595 * C4593 - C80645 * C4405) *
                C82581) *
               C82528 +
           ((C61748 - C61749 + C61750 - C61751 + C61752 - C61753) * C168 +
            (C61994 - C61995 + C61996 - C61997 + C61998 - C61999) * C82581) *
               C82536 +
           ((C61760 - C61761 + C61762 - C61763 + C61764 - C61765) * C168 +
            (C62000 - C62001 + C62002 - C62003 + C62004 - C62005) * C82581) *
               C44656) *
              C82938 * C82939 * C90 +
          (((C61749 - C61748 + C61751 - C61750 + C61753 - C61752) * C168 +
            (C61995 - C61994 + C61997 - C61996 + C61999 - C61998) * C82581) *
               C82528 +
           ((C61761 - C61760 + C61763 - C61762 + C61765 - C61764) * C168 +
            (C62001 - C62000 + C62003 - C62002 + C62005 - C62004) * C82581) *
               C82536 +
           ((C80637 * C105 - C82675 * C243 + C80634 * C1152 - C82682 * C1268 +
             C80645 * C4111 - C61595 * C4302) *
                C168 +
            (C80637 * C313 - C82675 * C444 + C80634 * C1320 - C82682 * C1419 +
             C80645 * C4408 - C61595 * C4596) *
                C82581) *
               C44656) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezx[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C82528 * C108 - C80234 * C102 + C82536 * C110 - C80230 * C103 +
            C44656 * C112 - C80280 * C104) *
               C80637 +
           (C82528 * C503 - C80234 * C497 + C82536 * C504 - C80230 * C498 +
            C44656 * C505 - C80280 * C499) *
               C82675 +
           (C49001 - C49002 + C49003 - C49004 + C49005 - C49006) * C80634 +
           (C49307 - C49308 + C49309 - C49310 + C49311 - C49312) * C82682 +
           (C82528 * C4112 - C80234 * C4108 + C82536 * C4114 - C80230 * C4109 +
            C44656 * C4116 - C80280 * C4110) *
               C80645 +
           (C82528 * C4687 - C80234 * C4683 + C82536 * C4688 - C80230 * C4684 +
            C44656 * C4689 - C80280 * C4685) *
               C61595) *
              C82581 * C82938 * C82939 * C90 +
          ((C80234 * C103 - C82528 * C110 + C80230 * C104 - C82536 * C112 +
            C80280 * C105 - C44656 * C114) *
               C80637 +
           (C80234 * C498 - C82528 * C504 + C80230 * C499 - C82536 * C505 +
            C80280 * C500 - C44656 * C506) *
               C82675 +
           (C80234 * C1154 - C82528 * C1162 + C80230 * C1153 - C82536 * C1160 +
            C80280 * C1152 - C44656 * C1158) *
               C80634 +
           (C80234 * C1464 - C82528 * C1469 + C80230 * C1465 - C82536 * C1470 +
            C80280 * C1466 - C44656 * C1471) *
               C82682 +
           (C80234 * C4109 - C82528 * C4114 + C80230 * C4110 - C82536 * C4116 +
            C80280 * C4111 - C44656 * C4118) *
               C80645 +
           (C80234 * C4684 - C82528 * C4688 + C80230 * C4685 - C82536 * C4689 +
            C80280 * C4686 - C44656 * C4690) *
               C61595) *
              C82581 * C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezy[54] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82581 * C169 - C168 * C102) * C80637 +
                      (C82581 * C551 - C168 * C497) * C82675 +
                      (C5823 - C5824) * C80634 + (C6358 - C6359) * C82682 +
                      (C5827 - C5828) * C80645 + (C6360 - C6361) * C61595) *
                         C82528 +
                     ((C182 - C183) * C80637 + (C558 - C559) * C82675 +
                      (C4207 - C4208) * C80634 + (C4770 - C4771) * C82682 +
                      (C4215 - C4216) * C80645 + (C4772 - C4773) * C61595) *
                         C82536 +
                     ((C186 - C187) * C80637 + (C560 - C561) * C82675 +
                      (C4211 - C4212) * C80634 + (C4774 - C4775) * C82682 +
                      (C4219 - C4220) * C80645 + (C4776 - C4777) * C61595) *
                         C44656) *
                        C82938 * C82939 * C90 +
                    (((C183 - C182) * C80637 + (C559 - C558) * C82675 +
                      (C4208 - C4207) * C80634 + (C4771 - C4770) * C82682 +
                      (C4216 - C4215) * C80645 + (C4773 - C4772) * C61595) *
                         C82528 +
                     ((C187 - C186) * C80637 + (C561 - C560) * C82675 +
                      (C4212 - C4211) * C80634 + (C4775 - C4774) * C82682 +
                      (C4220 - C4219) * C80645 + (C4777 - C4776) * C61595) *
                         C82536 +
                     ((C191 - C190) * C80637 + (C563 - C562) * C82675 +
                      (C8539 - C8538) * C80634 + (C8984 - C8983) * C82682 +
                      (C168 * C4111 - C82581 * C4201) * C80645 +
                      (C168 * C4686 - C82581 * C4768) * C61595) *
                         C44656) *
                        C82938 * C82939 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C80637 * C240 - C80689 * C102 - C80637 * C497 + C82675 * C608 +
            C80634 * C1265 - C80682 * C1155 - C80634 * C1463 + C82682 * C1566 +
            C80645 * C4299 - C62229 * C4108 - C80645 * C4683 + C61595 * C4854) *
               C82581 * C82528 +
           (C62267 + C62268 + C62269) * C82581 * C82536 +
           (C62270 + C62271 + C62272) * C82581 * C44656) *
              C82938 * C82939 * C90 -
          ((C80645 * C4302 - C62229 * C4111 - C80645 * C4686 + C61595 * C4857 +
            C80634 * C1268 - C80682 * C1152 - C80634 * C1466 + C82682 * C1563 +
            C80637 * C243 - C80689 * C105 - C80637 * C500 + C82675 * C611) *
               C82581 * C44656 +
           (C62272 + C62271 + C62270) * C82581 * C82536 +
           (C62269 + C62268 + C62267) * C82581 * C82528) *
              C82938 * C82939 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexx[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C80234 * C108 - C80274 * C102 - C80234 * C109 + C82528 * C120 +
            C80230 * C110 - C80269 * C103 - C80230 * C111 + C82536 * C121 +
            C80280 * C112 - C44665 * C104 - C80280 * C113 + C44656 * C122) *
               C82675 +
           (C48704 + C48705 + C48706) * C82682 +
           (C80234 * C4112 - C80274 * C4108 - C80234 * C4113 + C82528 * C4120 +
            C80230 * C4114 - C80269 * C4109 - C80230 * C4115 + C82536 * C4121 +
            C80280 * C4116 - C44665 * C4110 - C80280 * C4117 + C44656 * C4122) *
               C61595) *
              C82581 * C82938 * C688 -
          ((C80280 * C4977 - C44665 * C4974 - C80280 * C4978 + C44656 * C4983 +
            C80230 * C4979 - C80269 * C4975 - C80230 * C4980 + C82536 * C4984 +
            C80234 * C4981 - C80274 * C4976 - C80234 * C4982 + C82528 * C4985) *
               C61595 +
           (C47785 + C47784 + C47783) * C82682 +
           (C45461 + C45460 + C45459) * C82675) *
              C82581 * C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eexy[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82581 * C169 - C168 * C102) * C80234 +
                      (C82581 * C175 - C168 * C109) * C82528 +
                      (C182 - C183) * C80230 + (C184 - C185) * C82536 +
                      (C186 - C187) * C80280 + (C188 - C189) * C44656) *
                         C82675 +
                     ((C5823 - C5824) * C80234 + (C5825 - C5826) * C82528 +
                      (C4207 - C4208) * C80230 + (C4209 - C4210) * C82536 +
                      (C4211 - C4212) * C80280 + (C4213 - C4214) * C44656) *
                         C82682 +
                     ((C5827 - C5828) * C80234 + (C5829 - C5830) * C82528 +
                      (C4215 - C4216) * C80230 + (C4217 - C4218) * C82536 +
                      (C4219 - C4220) * C80280 + (C4221 - C4222) * C44656) *
                         C61595) *
                        C82938 * C688 +
                    (((C168 * C695 - C82581 * C753) * C80234 +
                      (C168 * C705 - C82581 * C758) * C82528 +
                      (C168 * C694 - C82581 * C754) * C80230 +
                      (C168 * C703 - C82581 * C759) * C82536 +
                      (C168 * C693 - C82581 * C755) * C80280 +
                      (C168 * C701 - C82581 * C760) * C44656) *
                         C82675 +
                     ((C168 * C3348 - C82581 * C3441) * C80234 +
                      (C168 * C3360 - C82581 * C3447) * C82528 +
                      (C168 * C3347 - C82581 * C3443) * C80230 +
                      (C168 * C3358 - C82581 * C3449) * C82536 +
                      (C168 * C3346 - C82581 * C3445) * C80280 +
                      (C168 * C3356 - C82581 * C3451) * C44656) *
                         C82682 +
                     ((C168 * C4976 - C82581 * C5060) * C80234 +
                      (C168 * C4982 - C82581 * C5063) * C82528 +
                      (C168 * C4975 - C82581 * C5061) * C80230 +
                      (C168 * C4980 - C82581 * C5064) * C82536 +
                      (C168 * C4974 - C82581 * C5062) * C80280 +
                      (C168 * C4978 - C82581 * C5065) * C44656) *
                         C61595) *
                        C82938 * C689) *
                   C82940) /
                  (p * q * std::sqrt(p + q));
    d2eexz[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C82675 * C240 - C80637 * C102 + C82682 * C1265 - C80634 * C1155 +
            C61595 * C4299 - C80645 * C4108) *
               C80234 +
           (C82675 * C246 - C80637 * C109 + C82682 * C1270 - C80634 * C1165 +
            C61595 * C4303 - C80645 * C4113) *
               C82528 +
           (C61748 - C61749 + C61750 - C61751 + C61752 - C61753) * C80230 +
           (C61754 - C61755 + C61756 - C61757 + C61758 - C61759) * C82536 +
           (C61760 - C61761 + C61762 - C61763 + C61764 - C61765) * C80280 +
           (C61766 - C61767 + C61768 - C61769 + C61770 - C61771) * C44656) *
              C82581 * C82938 * C688 +
          ((C80637 * C695 - C82675 * C805 + C80634 * C3348 - C82682 * C3527 +
            C80645 * C4976 - C61595 * C5140) *
               C80234 +
           (C80637 * C705 - C82675 * C810 + C80634 * C3360 - C82682 * C3533 +
            C80645 * C4982 - C61595 * C5143) *
               C82528 +
           (C80637 * C694 - C82675 * C806 + C80634 * C3347 - C82682 * C3528 +
            C80645 * C4975 - C61595 * C5141) *
               C80230 +
           (C80637 * C703 - C82675 * C811 + C80634 * C3358 - C82682 * C3534 +
            C80645 * C4980 - C61595 * C5144) *
               C82536 +
           (C80637 * C693 - C82675 * C807 + C80634 * C3346 - C82682 * C3529 +
            C80645 * C4974 - C61595 * C5142) *
               C80280 +
           (C80637 * C701 - C82675 * C812 + C80634 * C3356 - C82682 * C3535 +
            C80645 * C4978 - C61595 * C5145) *
               C44656) *
              C82581 * C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyx[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82528 * C108 - C80234 * C102 + C82536 * C110 - C80230 * C103 +
             C44656 * C112 - C80280 * C104) *
                C168 +
            (C82528 * C316 - C80234 * C310 + C82536 * C317 - C80230 * C311 +
             C44656 * C318 - C80280 * C312) *
                C82581) *
               C82675 +
           ((C49001 - C49002 + C49003 - C49004 + C49005 - C49006) * C168 +
            (C49007 - C49008 + C49009 - C49010 + C49011 - C49012) * C82581) *
               C82682 +
           ((C82528 * C4112 - C80234 * C4108 + C82536 * C4114 - C80230 * C4109 +
             C44656 * C4116 - C80280 * C4110) *
                C168 +
            (C82528 * C4409 - C80234 * C4405 + C82536 * C4410 - C80230 * C4406 +
             C44656 * C4411 - C80280 * C4407) *
                C82581) *
               C61595) *
              C82938 * C688 +
          (((C45688 - C45687 + C45690 - C45689 + C45692 - C45691) * C168 +
            (C45694 - C45693 + C45696 - C45695 + C45698 - C45697) * C82581) *
               C82675 +
           ((C48081 - C48080 + C48083 - C48082 + C48085 - C48084) * C168 +
            (C48087 - C48086 + C48089 - C48088 + C48091 - C48090) * C82581) *
               C82682 +
           ((C80234 * C4976 - C82528 * C4981 + C80230 * C4975 - C82536 * C4979 +
             C80280 * C4974 - C44656 * C4977) *
                C168 +
            (C80234 * C5220 - C82528 * C5223 + C80230 * C5221 - C82536 * C5224 +
             C80280 * C5222 - C44656 * C5225) *
                C82581) *
               C61595) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyy[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C82528 +
            C396 * C82536 + C397 * C44656) *
               C82675 +
           (C6108 * C82528 + C4516 * C82536 + C4517 * C44656) * C82682 +
           (C6109 * C82528 + C4518 * C82536 + C4519 * C44656) * C61595) *
              C82938 * C688 -
          (((C168 * C5062 - C364 * C4974 - C168 * C5222 + C82581 * C5300) *
                C44656 +
            (C168 * C5061 - C364 * C4975 - C168 * C5221 + C82581 * C5301) *
                C82536 +
            (C168 * C5060 - C364 * C4976 - C168 * C5220 + C82581 * C5302) *
                C82528) *
               C61595 +
           ((C168 * C3445 - C364 * C3346 - C168 * C3615 + C82581 * C3700) *
                C44656 +
            (C168 * C3443 - C364 * C3347 - C168 * C3614 + C82581 * C3702) *
                C82536 +
            (C168 * C3441 - C364 * C3348 - C168 * C3613 + C82581 * C3704) *
                C82528) *
               C82682 +
           ((C168 * C755 - C364 * C693 - C168 * C859 + C82581 * C911) * C44656 +
            (C168 * C754 - C364 * C694 - C168 * C858 + C82581 * C912) * C82536 +
            (C168 * C753 - C364 * C695 - C168 * C857 + C82581 * C913) *
                C82528) *
               C82675) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyz[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82675 * C240 - C80637 * C102 + C82682 * C1265 - C80634 * C1155 +
             C61595 * C4299 - C80645 * C4108) *
                C168 +
            (C82675 * C441 - C80637 * C310 + C82682 * C1416 - C80634 * C1317 +
             C61595 * C4593 - C80645 * C4405) *
                C82581) *
               C82528 +
           ((C61748 - C61749 + C61750 - C61751 + C61752 - C61753) * C168 +
            (C61994 - C61995 + C61996 - C61997 + C61998 - C61999) * C82581) *
               C82536 +
           ((C61760 - C61761 + C61762 - C61763 + C61764 - C61765) * C168 +
            (C62000 - C62001 + C62002 - C62003 + C62004 - C62005) * C82581) *
               C44656) *
              C82938 * C688 +
          (((C80637 * C695 - C82675 * C805 + C80634 * C3348 - C82682 * C3527 +
             C80645 * C4976 - C61595 * C5140) *
                C168 +
            (C80637 * C857 - C82675 * C956 + C80634 * C3613 - C82682 * C3779 +
             C80645 * C5220 - C61595 * C5377) *
                C82581) *
               C82528 +
           ((C80637 * C694 - C82675 * C806 + C80634 * C3347 - C82682 * C3528 +
             C80645 * C4975 - C61595 * C5141) *
                C168 +
            (C80637 * C858 - C82675 * C957 + C80634 * C3614 - C82682 * C3781 +
             C80645 * C5221 - C61595 * C5378) *
                C82581) *
               C82536 +
           ((C80637 * C693 - C82675 * C807 + C80634 * C3346 - C82682 * C3529 +
             C80645 * C4974 - C61595 * C5142) *
                C168 +
            (C80637 * C859 - C82675 * C958 + C80634 * C3615 - C82682 * C3783 +
             C80645 * C5222 - C61595 * C5379) *
                C82581) *
               C44656) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eezx[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C82528 * C108 - C80234 * C102 + C82536 * C110 - C80230 * C103 +
            C44656 * C112 - C80280 * C104) *
               C80637 +
           (C82528 * C503 - C80234 * C497 + C82536 * C504 - C80230 * C498 +
            C44656 * C505 - C80280 * C499) *
               C82675 +
           (C49001 - C49002 + C49003 - C49004 + C49005 - C49006) * C80634 +
           (C49307 - C49308 + C49309 - C49310 + C49311 - C49312) * C82682 +
           (C82528 * C4112 - C80234 * C4108 + C82536 * C4114 - C80230 * C4109 +
            C44656 * C4116 - C80280 * C4110) *
               C80645 +
           (C82528 * C4687 - C80234 * C4683 + C82536 * C4688 - C80230 * C4684 +
            C44656 * C4689 - C80280 * C4685) *
               C61595) *
              C82581 * C82938 * C688 +
          ((C45688 - C45687 + C45690 - C45689 + C45692 - C45691) * C80637 +
           (C45934 - C45933 + C45936 - C45935 + C45938 - C45937) * C82675 +
           (C48081 - C48080 + C48083 - C48082 + C48085 - C48084) * C80634 +
           (C48387 - C48386 + C48389 - C48388 + C48391 - C48390) * C82682 +
           (C80234 * C4976 - C82528 * C4981 + C80230 * C4975 - C82536 * C4979 +
            C80280 * C4974 - C44656 * C4977) *
               C80645 +
           (C80234 * C5454 - C82528 * C5457 + C80230 * C5455 - C82536 * C5458 +
            C80280 * C5456 - C44656 * C5459) *
               C61595) *
              C82581 * C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eezy[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82581 * C169 - C168 * C102) * C80637 +
                      (C82581 * C551 - C168 * C497) * C82675 +
                      (C5823 - C5824) * C80634 + (C6358 - C6359) * C82682 +
                      (C5827 - C5828) * C80645 + (C6360 - C6361) * C61595) *
                         C82528 +
                     ((C182 - C183) * C80637 + (C558 - C559) * C82675 +
                      (C4207 - C4208) * C80634 + (C4770 - C4771) * C82682 +
                      (C4215 - C4216) * C80645 + (C4772 - C4773) * C61595) *
                         C82536 +
                     ((C186 - C187) * C80637 + (C560 - C561) * C82675 +
                      (C4211 - C4212) * C80634 + (C4774 - C4775) * C82682 +
                      (C4219 - C4220) * C80645 + (C4776 - C4777) * C61595) *
                         C44656) *
                        C82938 * C688 +
                    (((C168 * C695 - C82581 * C753) * C80637 +
                      (C168 * C1003 - C82581 * C1055) * C82675 +
                      (C168 * C3348 - C82581 * C3441) * C80634 +
                      (C168 * C3859 - C82581 * C3945) * C82682 +
                      (C168 * C4976 - C82581 * C5060) * C80645 +
                      (C168 * C5454 - C82581 * C5534) * C61595) *
                         C82528 +
                     ((C168 * C694 - C82581 * C754) * C80637 +
                      (C168 * C1004 - C82581 * C1056) * C82675 +
                      (C168 * C3347 - C82581 * C3443) * C80634 +
                      (C168 * C3860 - C82581 * C3947) * C82682 +
                      (C168 * C4975 - C82581 * C5061) * C80645 +
                      (C168 * C5455 - C82581 * C5535) * C61595) *
                         C82536 +
                     ((C168 * C693 - C82581 * C755) * C80637 +
                      (C168 * C1005 - C82581 * C1057) * C82675 +
                      (C168 * C3346 - C82581 * C3445) * C80634 +
                      (C168 * C3861 - C82581 * C3949) * C82682 +
                      (C168 * C4974 - C82581 * C5062) * C80645 +
                      (C168 * C5456 - C82581 * C5536) * C61595) *
                         C44656) *
                        C82938 * C689) *
                   C82940) /
                  (p * q * std::sqrt(p + q));
    d2eezz[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C80637 * C240 - C80689 * C102 - C80637 * C497 + C82675 * C608 +
            C80634 * C1265 - C80682 * C1155 - C80634 * C1463 + C82682 * C1566 +
            C80645 * C4299 - C62229 * C4108 - C80645 * C4683 + C61595 * C4854) *
               C82581 * C82528 +
           (C62267 + C62268 + C62269) * C82581 * C82536 +
           (C62270 + C62271 + C62272) * C82581 * C44656) *
              C82938 * C688 -
          ((C80645 * C5142 - C62229 * C4974 - C80645 * C5456 + C61595 * C5611 +
            C80634 * C3529 - C80682 * C3346 - C80634 * C3861 + C82682 * C4026 +
            C80637 * C807 - C80689 * C693 - C80637 * C1005 + C82675 * C1104) *
               C82581 * C44656 +
           (C80645 * C5141 - C62229 * C4975 - C80645 * C5455 + C61595 * C5612 +
            C80634 * C3528 - C80682 * C3347 - C80634 * C3860 + C82682 * C4028 +
            C80637 * C806 - C80689 * C694 - C80637 * C1004 + C82675 * C1105) *
               C82581 * C82536 +
           (C80645 * C5140 - C62229 * C4976 - C80645 * C5454 + C61595 * C5613 +
            C80634 * C3527 - C80682 * C3348 - C80634 * C3859 + C82682 * C4030 +
            C80637 * C805 - C80689 * C695 - C80637 * C1003 + C82675 * C1106) *
               C82581 * C82528) *
              C82938 * C689) *
         C82940) /
        (p * q * std::sqrt(p + q));
    d2eexx[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C80234 * C108 - C80274 * C102 - C80234 * C109 + C82528 * C120 +
            C80230 * C110 - C80269 * C103 - C80230 * C111 + C82536 * C121 +
            C80280 * C112 - C44665 * C104 - C80280 * C113 + C44656 * C122) *
               C82675 +
           (C48704 + C48705 + C48706) * C82682 +
           (C63031 + C63032 + C63033) * C61595) *
              C82581 * C1149 -
          ((C80280 * C5691 - C44665 * C5688 - C80280 * C5692 + C44656 * C5697 +
            C80230 * C5693 - C80269 * C5689 - C80230 * C5694 + C82536 * C5698 +
            C80234 * C5695 - C80274 * C5690 - C80234 * C5696 + C82528 * C5699) *
               C61595 +
           (C63033 + C63032 + C63031) * C82682 +
           (C48706 + C48705 + C48704) * C82675) *
              C82581 * C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eexy[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82581 * C169 - C168 * C102) * C80234 +
                      (C82581 * C175 - C168 * C109) * C82528 +
                      (C182 - C183) * C80230 + (C184 - C185) * C82536 +
                      (C186 - C187) * C80280 + (C188 - C189) * C44656) *
                         C82675 +
                     ((C5823 - C5824) * C80234 + (C5825 - C5826) * C82528 +
                      (C4207 - C4208) * C80230 + (C4209 - C4210) * C82536 +
                      (C4211 - C4212) * C80280 + (C4213 - C4214) * C44656) *
                         C82682 +
                     ((C5827 - C5828) * C80234 + (C5829 - C5830) * C82528 +
                      (C4215 - C4216) * C80230 + (C4217 - C4218) * C82536 +
                      (C4219 - C4220) * C80280 + (C4221 - C4222) * C44656) *
                         C61595) *
                        C1149 +
                    (((C5824 - C5823) * C80234 + (C5826 - C5825) * C82528 +
                      (C4208 - C4207) * C80230 + (C4210 - C4209) * C82536 +
                      (C4212 - C4211) * C80280 + (C4214 - C4213) * C44656) *
                         C82675 +
                     ((C5828 - C5827) * C80234 + (C5830 - C5829) * C82528 +
                      (C4216 - C4215) * C80230 + (C4218 - C4217) * C82536 +
                      (C4220 - C4219) * C80280 + (C4222 - C4221) * C44656) *
                         C82682 +
                     ((C30900 - C30899) * C80234 + (C30902 - C30901) * C82528 +
                      (C34187 - C34186) * C80230 + (C34189 - C34188) * C82536 +
                      (C168 * C5688 - C82581 * C5818) * C80280 +
                      (C168 * C5692 - C82581 * C5821) * C44656) *
                         C61595) *
                        C1150) *
                   C82939 * C82940) /
                  (p * q * std::sqrt(p + q));
    d2eexz[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C82675 * C240 - C80637 * C102 + C82682 * C1265 - C80634 * C1155 +
            C61595 * C4299 - C80645 * C4108) *
               C80234 +
           (C82675 * C246 - C80637 * C109 + C82682 * C1270 - C80634 * C1165 +
            C61595 * C4303 - C80645 * C4113) *
               C82528 +
           (C61748 - C61749 + C61750 - C61751 + C61752 - C61753) * C80230 +
           (C61754 - C61755 + C61756 - C61757 + C61758 - C61759) * C82536 +
           (C61760 - C61761 + C61762 - C61763 + C61764 - C61765) * C80280 +
           (C61766 - C61767 + C61768 - C61769 + C61770 - C61771) * C44656) *
              C82581 * C1149 +
          ((C80637 * C1155 - C82675 * C1265 + C80634 * C4108 - C82682 * C4299 +
            C80645 * C5690 - C61595 * C5904) *
               C80234 +
           (C80637 * C1165 - C82675 * C1270 + C80634 * C4113 - C82682 * C4303 +
            C80645 * C5696 - C61595 * C5907) *
               C82528 +
           (C80637 * C1154 - C82675 * C1266 + C80634 * C4109 - C82682 * C4300 +
            C80645 * C5689 - C61595 * C5905) *
               C80230 +
           (C80637 * C1163 - C82675 * C1271 + C80634 * C4115 - C82682 * C4304 +
            C80645 * C5694 - C61595 * C5908) *
               C82536 +
           (C80637 * C1153 - C82675 * C1267 + C80634 * C4110 - C82682 * C4301 +
            C80645 * C5688 - C61595 * C5906) *
               C80280 +
           (C80637 * C1161 - C82675 * C1272 + C80634 * C4117 - C82682 * C4305 +
            C80645 * C5692 - C61595 * C5909) *
               C44656) *
              C82581 * C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyx[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82528 * C108 - C80234 * C102 + C82536 * C110 - C80230 * C103 +
             C44656 * C112 - C80280 * C104) *
                C168 +
            (C82528 * C316 - C80234 * C310 + C82536 * C317 - C80230 * C311 +
             C44656 * C318 - C80280 * C312) *
                C82581) *
               C82675 +
           ((C49001 - C49002 + C49003 - C49004 + C49005 - C49006) * C168 +
            (C49007 - C49008 + C49009 - C49010 + C49011 - C49012) * C82581) *
               C82682 +
           ((C63256 - C63257 + C63258 - C63259 + C63260 - C63261) * C168 +
            (C63262 - C63263 + C63264 - C63265 + C63266 - C63267) * C82581) *
               C61595) *
              C1149 +
          (((C49002 - C49001 + C49004 - C49003 + C49006 - C49005) * C168 +
            (C49008 - C49007 + C49010 - C49009 + C49012 - C49011) * C82581) *
               C82675 +
           ((C63257 - C63256 + C63259 - C63258 + C63261 - C63260) * C168 +
            (C63263 - C63262 + C63265 - C63264 + C63267 - C63266) * C82581) *
               C82682 +
           ((C80234 * C5690 - C82528 * C5695 + C80230 * C5689 - C82536 * C5693 +
             C80280 * C5688 - C44656 * C5691) *
                C168 +
            (C80234 * C5984 - C82528 * C5987 + C80230 * C5985 - C82536 * C5988 +
             C80280 * C5986 - C44656 * C5989) *
                C82581) *
               C61595) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyy[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C82528 +
            C396 * C82536 + C397 * C44656) *
               C82675 +
           (C63342 + C63343 + C63344) * C82682 +
           (C63345 + C63346 + C63347) * C61595) *
              C1149 -
          (((C168 * C5818 - C364 * C5688 - C168 * C5986 + C82581 * C6088) *
                C44656 +
            C34414 * C82536 + C31060 * C82528) *
               C61595 +
           (C63347 + C63346 + C63345) * C82682 +
           (C63344 + C63343 + C63342) * C82675) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eeyz[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82675 * C240 - C80637 * C102 + C82682 * C1265 - C80634 * C1155 +
             C61595 * C4299 - C80645 * C4108) *
                C168 +
            (C82675 * C441 - C80637 * C310 + C82682 * C1416 - C80634 * C1317 +
             C61595 * C4593 - C80645 * C4405) *
                C82581) *
               C82528 +
           ((C61748 - C61749 + C61750 - C61751 + C61752 - C61753) * C168 +
            (C61994 - C61995 + C61996 - C61997 + C61998 - C61999) * C82581) *
               C82536 +
           ((C61760 - C61761 + C61762 - C61763 + C61764 - C61765) * C168 +
            (C62000 - C62001 + C62002 - C62003 + C62004 - C62005) * C82581) *
               C44656) *
              C1149 +
          (((C80637 * C1155 - C82675 * C1265 + C80634 * C4108 - C82682 * C4299 +
             C80645 * C5690 - C61595 * C5904) *
                C168 +
            (C80637 * C1317 - C82675 * C1416 + C80634 * C4405 - C82682 * C4593 +
             C80645 * C5984 - C61595 * C6185) *
                C82581) *
               C82528 +
           ((C80637 * C1154 - C82675 * C1266 + C80634 * C4109 - C82682 * C4300 +
             C80645 * C5689 - C61595 * C5905) *
                C168 +
            (C80637 * C1318 - C82675 * C1417 + C80634 * C4406 - C82682 * C4594 +
             C80645 * C5985 - C61595 * C6186) *
                C82581) *
               C82536 +
           ((C80637 * C1153 - C82675 * C1267 + C80634 * C4110 - C82682 * C4301 +
             C80645 * C5688 - C61595 * C5906) *
                C168 +
            (C80637 * C1319 - C82675 * C1418 + C80634 * C4407 - C82682 * C4595 +
             C80645 * C5986 - C61595 * C6187) *
                C82581) *
               C44656) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eezx[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C82528 * C108 - C80234 * C102 + C82536 * C110 - C80230 * C103 +
            C44656 * C112 - C80280 * C104) *
               C80637 +
           (C82528 * C503 - C80234 * C497 + C82536 * C504 - C80230 * C498 +
            C44656 * C505 - C80280 * C499) *
               C82675 +
           (C49001 - C49002 + C49003 - C49004 + C49005 - C49006) * C80634 +
           (C49307 - C49308 + C49309 - C49310 + C49311 - C49312) * C82682 +
           (C63256 - C63257 + C63258 - C63259 + C63260 - C63261) * C80645 +
           (C63496 - C63497 + C63498 - C63499 + C63500 - C63501) * C61595) *
              C82581 * C1149 +
          ((C49002 - C49001 + C49004 - C49003 + C49006 - C49005) * C80637 +
           (C49308 - C49307 + C49310 - C49309 + C49312 - C49311) * C82675 +
           (C63257 - C63256 + C63259 - C63258 + C63261 - C63260) * C80634 +
           (C63497 - C63496 + C63499 - C63498 + C63501 - C63500) * C82682 +
           (C80234 * C5690 - C82528 * C5695 + C80230 * C5689 - C82536 * C5693 +
            C80280 * C5688 - C44656 * C5691) *
               C80645 +
           (C80234 * C6262 - C82528 * C6265 + C80230 * C6263 - C82536 * C6266 +
            C80280 * C6264 - C44656 * C6267) *
               C61595) *
              C82581 * C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eezy[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82581 * C169 - C168 * C102) * C80637 +
                      (C82581 * C551 - C168 * C497) * C82675 +
                      (C5823 - C5824) * C80634 + (C6358 - C6359) * C82682 +
                      (C5827 - C5828) * C80645 + (C6360 - C6361) * C61595) *
                         C82528 +
                     ((C182 - C183) * C80637 + (C558 - C559) * C82675 +
                      (C4207 - C4208) * C80634 + (C4770 - C4771) * C82682 +
                      (C4215 - C4216) * C80645 + (C4772 - C4773) * C61595) *
                         C82536 +
                     ((C186 - C187) * C80637 + (C560 - C561) * C82675 +
                      (C4211 - C4212) * C80634 + (C4774 - C4775) * C82682 +
                      (C4219 - C4220) * C80645 + (C4776 - C4777) * C61595) *
                         C44656) *
                        C1149 +
                    (((C5824 - C5823) * C80637 + (C6359 - C6358) * C82675 +
                      (C5828 - C5827) * C80634 + (C6361 - C6360) * C82682 +
                      (C30900 - C30899) * C80645 + (C31199 - C31198) * C61595) *
                         C82528 +
                     ((C4208 - C4207) * C80637 + (C4771 - C4770) * C82675 +
                      (C4216 - C4215) * C80634 + (C4773 - C4772) * C82682 +
                      (C34187 - C34186) * C80645 + (C34622 - C34621) * C61595) *
                         C82536 +
                     ((C4212 - C4211) * C80637 + (C4775 - C4774) * C82675 +
                      (C4220 - C4219) * C80634 + (C4777 - C4776) * C82682 +
                      (C168 * C5688 - C82581 * C5818) * C80645 +
                      (C168 * C6264 - C82581 * C6356) * C61595) *
                         C44656) *
                        C1150) *
                   C82939 * C82940) /
                  (p * q * std::sqrt(p + q));
    d2eezz[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C80637 * C240 - C80689 * C102 - C80637 * C497 + C82675 * C608 +
            C80634 * C1265 - C80682 * C1155 - C80634 * C1463 + C82682 * C1566 +
            C80645 * C4299 - C62229 * C4108 - C80645 * C4683 + C61595 * C4854) *
               C82581 * C82528 +
           (C62267 + C62268 + C62269) * C82581 * C82536 +
           (C62270 + C62271 + C62272) * C82581 * C44656) *
              C1149 -
          ((C80645 * C5906 - C62229 * C5688 - C80645 * C6264 + C61595 * C6435 +
            C80634 * C4301 - C80682 * C4110 - C80634 * C4685 + C82682 * C4856 +
            C80637 * C1267 - C80689 * C1153 - C80637 * C1465 + C82675 * C1564) *
               C82581 * C44656 +
           (C80645 * C5905 - C62229 * C5689 - C80645 * C6263 + C61595 * C6436 +
            C80634 * C4300 - C80682 * C4109 - C80634 * C4684 + C82682 * C4855 +
            C80637 * C1266 - C80689 * C1154 - C80637 * C1464 + C82675 * C1565) *
               C82581 * C82536 +
           (C80645 * C5904 - C62229 * C5690 - C80645 * C6262 + C61595 * C6437 +
            C80634 * C4299 - C80682 * C4108 - C80634 * C4683 + C82682 * C4854 +
            C80637 * C1265 - C80689 * C1155 - C80637 * C1463 + C82675 * C1566) *
               C82581 * C82528) *
              C1150) *
         C82939 * C82940) /
        (p * q * std::sqrt(p + q));
    d2eexx[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C37889 * C108 - C37890 * C102 - C37889 * C109 + C82937 * C120 +
            C37891 * C110 - C37892 * C103 - C37891 * C111 + C82927 * C121 +
            C37893 * C112 - C37894 * C104 - C37893 * C113 + C82911 * C122 +
            C37895 * C114 - C37896 * C105 - C37895 * C115 + C82862 * C123) *
               C52324 +
           (C37889 * C1164 - C37890 * C1155 - C37889 * C1165 + C82937 * C1170 +
            C37891 * C1162 - C37892 * C1154 - C37891 * C1163 + C82927 * C1169 +
            C37893 * C1160 - C37894 * C1153 - C37893 * C1161 + C82911 * C1168 +
            C37895 * C1158 - C37896 * C1152 - C37895 * C1159 + C82862 * C1167) *
               C82679) *
              C82581 * C82938 * C82939 * C90 -
          ((C37895 * C1156 - C37896 * C1151 - C37895 * C1157 + C82862 * C1166 +
            C37893 * C1158 - C37894 * C1152 - C37893 * C1159 + C82911 * C1167 +
            C37891 * C1160 - C37892 * C1153 - C37891 * C1161 + C82927 * C1168 +
            C37889 * C1162 - C37890 * C1154 - C37889 * C1163 + C82937 * C1169) *
               C82679 +
           (C37895 * C116 - C37896 * C106 - C37895 * C117 + C82862 * C124 +
            C37893 * C114 - C37894 * C105 - C37893 * C115 + C82911 * C123 +
            C37891 * C112 - C37892 * C104 - C37891 * C113 + C82927 * C122 +
            C37889 * C110 - C37890 * C103 - C37889 * C111 + C82937 * C121) *
               C52324) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39825 * C108 - C39826 * C102 - C39825 * C109 + C39819 * C120 +
             C39827 * C110 - C39828 * C103 - C39827 * C111 + C82533 * C121) *
                C52324 +
            (C43717 + C43718) * C82679) *
               C82931 +
           ((C40524 + C40525) * C52324 + (C42783 + C42784) * C82679) * C82916 +
           ((C40526 + C40527) * C52324 + (C50540 + C50541) * C82679) * C82893) *
              C82938 * C82939 * C90 -
          (((C39827 * C3349 - C39828 * C3343 - C39827 * C3350 + C82533 * C3361 +
             C39825 * C3351 - C39826 * C3344 - C39825 * C3352 +
             C39819 * C3362) *
                C82679 +
            (C39827 * C1661 - C39828 * C1655 - C39827 * C1662 + C82533 * C1667 +
             C39825 * C1659 - C39826 * C1654 - C39825 * C1660 +
             C39819 * C1666) *
                C52324) *
               C82893 +
           ((C39827 * C3355 - C39828 * C3346 - C39827 * C3356 + C82533 * C3364 +
             C39825 * C3357 - C39826 * C3347 - C39825 * C3358 +
             C39819 * C3365) *
                C82679 +
            (C39827 * C700 - C39828 * C693 - C39827 * C701 + C82533 * C708 +
             C39825 * C702 - C39826 * C694 - C39825 * C703 + C39819 * C709) *
                C52324) *
               C82916 +
           ((C39827 * C1160 - C39828 * C1153 - C39827 * C1161 + C82533 * C1168 +
             C39825 * C1162 - C39826 * C1154 - C39825 * C1163 +
             C39819 * C1169) *
                C82679 +
            (C39827 * C112 - C39828 * C104 - C39827 * C113 + C82533 * C122 +
             C39825 * C110 - C39826 * C103 - C39825 * C111 + C39819 * C121) *
                C52324) *
               C82931) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C37889 +
            (C82581 * C175 - C168 * C109) * C82937 + (C182 - C183) * C37891 +
            (C184 - C185) * C82927 + (C186 - C187) * C37893 +
            (C188 - C189) * C82911 + (C190 - C191) * C37895 +
            (C192 - C193) * C82862) *
               C52324 +
           ((C5823 - C5824) * C37889 + (C5825 - C5826) * C82937 +
            (C4207 - C4208) * C37891 + (C4209 - C4210) * C82927 +
            (C4211 - C4212) * C37893 + (C4213 - C4214) * C82911 +
            (C8538 - C8539) * C37895 + (C8540 - C8541) * C82862) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C183 - C182) * C37889 + (C185 - C184) * C82937 +
            (C187 - C186) * C37891 + (C189 - C188) * C82927 +
            (C191 - C190) * C37893 + (C193 - C192) * C82911 +
            (C195 - C194) * C37895 + (C197 - C196) * C82862) *
               C52324 +
           ((C4208 - C4207) * C37889 + (C4210 - C4209) * C82937 +
            (C4212 - C4211) * C37891 + (C4214 - C4213) * C82927 +
            (C8539 - C8538) * C37893 + (C8541 - C8540) * C82911 +
            (C168 * C1151 - C82581 * C1217) * C37895 +
            (C168 * C1157 - C82581 * C1222) * C82862) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
             C82893 * C1746 - C1745 * C1653) *
                C39825 +
            (C82931 * C175 - C1743 * C109 + C82916 * C758 - C1744 * C705 +
             C82893 * C1750 - C1745 * C1658) *
                C39819 +
            (C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C39827 +
            (C1761 - C1762 + C1763 - C1764 + C1765 - C1766) * C82533) *
               C52324 +
           ((C29380 - C29381 + C29382 - C29383 + C29384 - C29385) * C39825 +
            (C29386 - C29387 + C29388 - C29389 + C29390 - C29391) * C39819 +
            (C54377 - C54378 + C54379 - C54380 + C54381 - C54382) * C39827 +
            (C54383 - C54384 + C54385 - C54386 + C54387 - C54388) * C82533) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C1756 - C1755 + C1758 - C1757 + C1760 - C1759) * C39825 +
            (C1762 - C1761 + C1764 - C1763 + C1766 - C1765) * C39819 +
            (C1768 - C1767 + C1770 - C1769 + C1772 - C1771) * C39827 +
            (C1774 - C1773 + C1776 - C1775 + C1778 - C1777) * C82533) *
               C52324 +
           ((C54378 - C54377 + C54380 - C54379 + C54382 - C54381) * C39825 +
            (C54384 - C54383 + C54386 - C54385 + C54388 - C54387) * C39819 +
            (C1743 * C1153 - C82931 * C1215 + C1744 * C3346 - C82916 * C3445 +
             C1745 * C3343 - C82893 * C3446) *
                C39827 +
            (C1743 * C1161 - C82931 * C1220 + C1744 * C3356 - C82916 * C3451 +
             C1745 * C3350 - C82893 * C3452) *
                C82533) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
               C37889 +
           (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
               C82937 +
           (C52461 - C52462 + C52463 - C52464) * C37891 +
           (C52465 - C52466 + C52467 - C52468) * C82927 +
           (C52469 - C52470 + C52471 - C52472) * C37893 +
           (C52473 - C52474 + C52475 - C52476) * C82911 +
           (C52477 - C52478 + C52479 - C52480) * C37895 +
           (C52481 - C52482 + C52483 - C52484) * C82862) *
              C82581 * C82938 * C82939 * C90 +
          ((C52462 - C52461 + C52464 - C52463) * C37889 +
           (C52466 - C52465 + C52468 - C52467) * C82937 +
           (C52470 - C52469 + C52472 - C52471) * C37891 +
           (C52474 - C52473 + C52476 - C52475) * C82927 +
           (C52478 - C52477 + C52480 - C52479) * C37893 +
           (C52482 - C52481 + C52484 - C52483) * C82911 +
           (C52458 * C106 - C52324 * C244 + C52459 * C1151 - C82679 * C1269) *
               C37895 +
           (C52458 * C117 - C52324 * C250 + C52459 * C1157 - C82679 * C1274) *
               C82862) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C39825 +
            (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
                C39819 +
            (C52461 - C52462 + C52463 - C52464) * C39827 +
            (C52465 - C52466 + C52467 - C52468) * C82533) *
               C82931 +
           ((C52324 * C805 - C52458 * C695 + C82679 * C3527 - C52459 * C3348) *
                C39825 +
            (C52324 * C810 - C52458 * C705 + C82679 * C3533 - C52459 * C3360) *
                C39819 +
            (C54487 - C54488 + C54489 - C54490) * C39827 +
            (C54491 - C54492 + C54493 - C54494) * C82533) *
               C82916 +
           ((C52324 * C1852 - C52458 * C1653 + C82679 * C3530 -
             C52459 * C3345) *
                C39825 +
            (C52324 * C1856 - C52458 * C1658 + C82679 * C3536 -
             C52459 * C3354) *
                C39819 +
            (C54495 - C54496 + C54497 - C54498) * C39827 +
            (C54499 - C54500 + C54501 - C54502) * C82533) *
               C82893) *
              C82938 * C82939 * C90 +
          (((C52462 - C52461 + C52464 - C52463) * C39825 +
            (C52466 - C52465 + C52468 - C52467) * C39819 +
            (C52470 - C52469 + C52472 - C52471) * C39827 +
            (C52474 - C52473 + C52476 - C52475) * C82533) *
               C82931 +
           ((C54488 - C54487 + C54490 - C54489) * C39825 +
            (C54492 - C54491 + C54494 - C54493) * C39819 +
            (C52458 * C693 - C52324 * C807 + C52459 * C3346 - C82679 * C3529) *
                C39827 +
            (C52458 * C701 - C52324 * C812 + C52459 * C3356 - C82679 * C3535) *
                C82533) *
               C82916 +
           ((C54496 - C54495 + C54498 - C54497) * C39825 +
            (C54500 - C54499 + C54502 - C54501) * C39819 +
            (C52458 * C1655 - C52324 * C1854 + C52459 * C3343 -
             C82679 * C3532) *
                C39827 +
            (C52458 * C1662 - C52324 * C1858 + C52459 * C3350 -
             C82679 * C3538) *
                C82533) *
               C82893) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82937 * C108 - C37889 * C102 + C82927 * C110 - C37891 * C103 +
             C82911 * C112 - C37893 * C104 + C82862 * C114 - C37895 * C105) *
                C168 +
            (C82937 * C316 - C37889 * C310 + C82927 * C317 - C37891 * C311 +
             C82911 * C318 - C37893 * C312 + C82862 * C319 - C37895 * C313) *
                C82581) *
               C52324 +
           ((C82937 * C1164 - C37889 * C1155 + C82927 * C1162 - C37891 * C1154 +
             C82911 * C1160 - C37893 * C1153 + C82862 * C1158 -
             C37895 * C1152) *
                C168 +
            (C82937 * C1322 - C37889 * C1317 + C82927 * C1323 - C37891 * C1318 +
             C82911 * C1324 - C37893 * C1319 + C82862 * C1325 -
             C37895 * C1320) *
                C82581) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C37889 * C103 - C82937 * C110 + C37891 * C104 - C82927 * C112 +
             C37893 * C105 - C82911 * C114 + C37895 * C106 - C82862 * C116) *
                C168 +
            (C37889 * C311 - C82937 * C317 + C37891 * C312 - C82927 * C318 +
             C37893 * C313 - C82911 * C319 + C37895 * C314 - C82862 * C320) *
                C82581) *
               C52324 +
           ((C37889 * C1154 - C82937 * C1162 + C37891 * C1153 - C82927 * C1160 +
             C37893 * C1152 - C82911 * C1158 + C37895 * C1151 -
             C82862 * C1156) *
                C168 +
            (C37889 * C1318 - C82937 * C1323 + C37891 * C1319 - C82927 * C1324 +
             C37893 * C1320 - C82911 * C1325 + C37895 * C1321 -
             C82862 * C1326) *
                C82581) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C1743 +
            (C39819 * C316 - C39825 * C310 + C82533 * C317 - C39827 * C311) *
                C82931 +
            (C40728 - C40729 + C40730 - C40731) * C1744 +
            (C40732 - C40733 + C40734 - C40735) * C82916 +
            (C40736 - C40737 + C40738 - C40739) * C1745 +
            (C40740 - C40741 + C40742 - C40743) * C82893) *
               C52324 +
           ((C44031 - C44032 + C44033 - C44034) * C1743 +
            (C44035 - C44036 + C44037 - C44038) * C82931 +
            (C43081 - C43082 + C43083 - C43084) * C1744 +
            (C43085 - C43086 + C43087 - C43088) * C82916 +
            (C50836 - C50837 + C50838 - C50839) * C1745 +
            (C50840 - C50841 + C50842 - C50843) * C82893) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C39825 * C103 - C39819 * C110 + C39827 * C104 - C82533 * C112) *
                C1743 +
            (C39825 * C311 - C39819 * C317 + C39827 * C312 - C82533 * C318) *
                C82931 +
            (C39825 * C694 - C39819 * C702 + C39827 * C693 - C82533 * C700) *
                C1744 +
            (C39825 * C858 - C39819 * C863 + C39827 * C859 - C82533 * C864) *
                C82916 +
            (C39825 * C1654 - C39819 * C1659 + C39827 * C1655 -
             C82533 * C1661) *
                C1745 +
            (C39825 * C1951 - C39819 * C1955 + C39827 * C1952 -
             C82533 * C1956) *
                C82893) *
               C52324 +
           ((C39825 * C1154 - C39819 * C1162 + C39827 * C1153 -
             C82533 * C1160) *
                C1743 +
            (C39825 * C1318 - C39819 * C1323 + C39827 * C1319 -
             C82533 * C1324) *
                C82931 +
            (C39825 * C3347 - C39819 * C3357 + C39827 * C3346 -
             C82533 * C3355) *
                C1744 +
            (C39825 * C3614 - C39819 * C3620 + C39827 * C3615 -
             C82533 * C3621) *
                C82916 +
            (C39825 * C3344 - C39819 * C3351 + C39827 * C3343 -
             C82533 * C3349) *
                C1745 +
            (C39825 * C3617 - C39819 * C3623 + C39827 * C3618 -
             C82533 * C3624) *
                C82893) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C82937 +
            C396 * C82927 + C397 * C82911 + C398 * C82862) *
               C52324 +
           (C6108 * C82937 + C4516 * C82927 + C4517 * C82911 + C8772 * C82862) *
               C82679) *
              C82938 * C82939 * C90 -
          (((C168 * C1217 - C364 * C1151 - C168 * C1321 + C82581 * C1369) *
                C82862 +
            C8772 * C82911 + C4517 * C82927 + C4516 * C82937) *
               C82679 +
           (C399 * C82862 + C398 * C82911 + C397 * C82927 + C396 * C82937) *
               C52324) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1743 * C169 - C2032 * C102 - C1743 * C310 + C82931 * C365 +
             C1744 * C753 - C2033 * C695 - C1744 * C857 + C82916 * C913 +
             C1745 * C1746 - C2034 * C1653 - C1745 * C1950 + C82893 * C2035) *
                C39819 +
            (C2076 + C2077 + C2078) * C82533) *
               C52324 +
           ((C29662 + C29663 + C29664) * C39819 +
            (C54717 + C54718 + C54719) * C82533) *
               C82679) *
              C82938 * C82939 * C90 -
          (((C1745 * C3446 - C2034 * C3343 - C1745 * C3618 + C82893 * C3699 +
             C1744 * C3445 - C2033 * C3346 - C1744 * C3615 + C82916 * C3700 +
             C1743 * C1215 - C2032 * C1153 - C1743 * C1319 + C82931 * C1371) *
                C82533 +
            (C54719 + C54718 + C54717) * C39819) *
               C82679 +
           ((C2081 + C2080 + C2079) * C82533 +
            (C2078 + C2077 + C2076) * C39819) *
               C52324) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C168 +
            (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
                C82581) *
               C82937 +
           ((C52461 - C52462 + C52463 - C52464) * C168 +
            (C52683 - C52684 + C52685 - C52686) * C82581) *
               C82927 +
           ((C52469 - C52470 + C52471 - C52472) * C168 +
            (C52687 - C52688 + C52689 - C52690) * C82581) *
               C82911 +
           ((C52477 - C52478 + C52479 - C52480) * C168 +
            (C52691 - C52692 + C52693 - C52694) * C82581) *
               C82862) *
              C82938 * C82939 * C90 +
          (((C52462 - C52461 + C52464 - C52463) * C168 +
            (C52684 - C52683 + C52686 - C52685) * C82581) *
               C82937 +
           ((C52470 - C52469 + C52472 - C52471) * C168 +
            (C52688 - C52687 + C52690 - C52689) * C82581) *
               C82927 +
           ((C52478 - C52477 + C52480 - C52479) * C168 +
            (C52692 - C52691 + C52694 - C52693) * C82581) *
               C82911 +
           ((C52458 * C106 - C52324 * C244 + C52459 * C1151 - C82679 * C1269) *
                C168 +
            (C52458 * C314 - C52324 * C445 + C52459 * C1321 - C82679 * C1420) *
                C82581) *
               C82862) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C1743 +
            (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
                C82931 +
            (C52324 * C805 - C52458 * C695 + C82679 * C3527 - C52459 * C3348) *
                C1744 +
            (C52324 * C956 - C52458 * C857 + C82679 * C3779 - C52459 * C3613) *
                C82916 +
            (C52324 * C1852 - C52458 * C1653 + C82679 * C3530 -
             C52459 * C3345) *
                C1745 +
            (C52324 * C2155 - C52458 * C1950 + C82679 * C3780 -
             C52459 * C3616) *
                C82893) *
               C39819 +
           ((C52461 - C52462 + C52463 - C52464) * C1743 +
            (C52683 - C52684 + C52685 - C52686) * C82931 +
            (C54487 - C54488 + C54489 - C54490) * C1744 +
            (C54818 - C54819 + C54820 - C54821) * C82916 +
            (C54495 - C54496 + C54497 - C54498) * C1745 +
            (C54822 - C54823 + C54824 - C54825) * C82893) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C52462 - C52461 + C52464 - C52463) * C1743 +
            (C52684 - C52683 + C52686 - C52685) * C82931 +
            (C54488 - C54487 + C54490 - C54489) * C1744 +
            (C54819 - C54818 + C54821 - C54820) * C82916 +
            (C54496 - C54495 + C54498 - C54497) * C1745 +
            (C54823 - C54822 + C54825 - C54824) * C82893) *
               C39819 +
           ((C52470 - C52469 + C52472 - C52471) * C1743 +
            (C52688 - C52687 + C52690 - C52689) * C82931 +
            (C52458 * C693 - C52324 * C807 + C52459 * C3346 - C82679 * C3529) *
                C1744 +
            (C52458 * C859 - C52324 * C958 + C52459 * C3615 - C82679 * C3783) *
                C82916 +
            (C52458 * C1655 - C52324 * C1854 + C52459 * C3343 -
             C82679 * C3532) *
                C1745 +
            (C52458 * C1952 - C52324 * C2157 + C52459 * C3618 -
             C82679 * C3784) *
                C82893) *
               C82533) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezx[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C82937 * C108 - C37889 * C102 + C82927 * C110 - C37891 * C103 +
            C82911 * C112 - C37893 * C104 + C82862 * C114 - C37895 * C105) *
               C52458 +
           (C82937 * C503 - C37889 * C497 + C82927 * C504 - C37891 * C498 +
            C82911 * C505 - C37893 * C499 + C82862 * C506 - C37895 * C500) *
               C52324 +
           (C82937 * C1164 - C37889 * C1155 + C82927 * C1162 - C37891 * C1154 +
            C82911 * C1160 - C37893 * C1153 + C82862 * C1158 - C37895 * C1152) *
               C52459 +
           (C82937 * C1468 - C37889 * C1463 + C82927 * C1469 - C37891 * C1464 +
            C82911 * C1470 - C37893 * C1465 + C82862 * C1471 - C37895 * C1466) *
               C82679) *
              C82581 * C82938 * C82939 * C90 +
          ((C37889 * C103 - C82937 * C110 + C37891 * C104 - C82927 * C112 +
            C37893 * C105 - C82911 * C114 + C37895 * C106 - C82862 * C116) *
               C52458 +
           (C37889 * C498 - C82937 * C504 + C37891 * C499 - C82927 * C505 +
            C37893 * C500 - C82911 * C506 + C37895 * C501 - C82862 * C507) *
               C52324 +
           (C37889 * C1154 - C82937 * C1162 + C37891 * C1153 - C82927 * C1160 +
            C37893 * C1152 - C82911 * C1158 + C37895 * C1151 - C82862 * C1156) *
               C52459 +
           (C37889 * C1464 - C82937 * C1469 + C37891 * C1465 - C82927 * C1470 +
            C37893 * C1466 - C82911 * C1471 + C37895 * C1467 - C82862 * C1472) *
               C82679) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C52458 +
            (C39819 * C503 - C39825 * C497 + C82533 * C504 - C39827 * C498) *
                C52324 +
            (C44031 - C44032 + C44033 - C44034) * C52459 +
            (C44369 - C44370 + C44371 - C44372) * C82679) *
               C82931 +
           ((C40728 - C40729 + C40730 - C40731) * C52458 +
            (C40950 - C40951 + C40952 - C40953) * C52324 +
            (C43081 - C43082 + C43083 - C43084) * C52459 +
            (C43391 - C43392 + C43393 - C43394) * C82679) *
               C82916 +
           ((C40736 - C40737 + C40738 - C40739) * C52458 +
            (C40954 - C40955 + C40956 - C40957) * C52324 +
            (C50836 - C50837 + C50838 - C50839) * C52459 +
            (C51138 - C51139 + C51140 - C51141) * C82679) *
               C82893) *
              C82938 * C82939 * C90 +
          (((C39825 * C103 - C39819 * C110 + C39827 * C104 - C82533 * C112) *
                C52458 +
            (C39825 * C498 - C39819 * C504 + C39827 * C499 - C82533 * C505) *
                C52324 +
            (C39825 * C1154 - C39819 * C1162 + C39827 * C1153 -
             C82533 * C1160) *
                C52459 +
            (C39825 * C1464 - C39819 * C1469 + C39827 * C1465 -
             C82533 * C1470) *
                C82679) *
               C82931 +
           ((C39825 * C694 - C39819 * C702 + C39827 * C693 - C82533 * C700) *
                C52458 +
            (C39825 * C1004 - C39819 * C1009 + C39827 * C1005 -
             C82533 * C1010) *
                C52324 +
            (C39825 * C3347 - C39819 * C3357 + C39827 * C3346 -
             C82533 * C3355) *
                C52459 +
            (C39825 * C3860 - C39819 * C3866 + C39827 * C3861 -
             C82533 * C3867) *
                C82679) *
               C82916 +
           ((C39825 * C1654 - C39819 * C1659 + C39827 * C1655 -
             C82533 * C1661) *
                C52458 +
            (C39825 * C2242 - C39819 * C2246 + C39827 * C2243 -
             C82533 * C2247) *
                C52324 +
            (C39825 * C3344 - C39819 * C3351 + C39827 * C3343 -
             C82533 * C3349) *
                C52459 +
            (C39825 * C3863 - C39819 * C3869 + C39827 * C3864 -
             C82533 * C3870) *
                C82679) *
               C82893) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C52458 +
            (C82581 * C551 - C168 * C497) * C52324 + (C5823 - C5824) * C52459 +
            (C6358 - C6359) * C82679) *
               C82937 +
           ((C182 - C183) * C52458 + (C558 - C559) * C52324 +
            (C4207 - C4208) * C52459 + (C4770 - C4771) * C82679) *
               C82927 +
           ((C186 - C187) * C52458 + (C560 - C561) * C52324 +
            (C4211 - C4212) * C52459 + (C4774 - C4775) * C82679) *
               C82911 +
           ((C190 - C191) * C52458 + (C562 - C563) * C52324 +
            (C8538 - C8539) * C52459 + (C8983 - C8984) * C82679) *
               C82862) *
              C82938 * C82939 * C90 +
          (((C183 - C182) * C52458 + (C559 - C558) * C52324 +
            (C4208 - C4207) * C52459 + (C4771 - C4770) * C82679) *
               C82937 +
           ((C187 - C186) * C52458 + (C561 - C560) * C52324 +
            (C4212 - C4211) * C52459 + (C4775 - C4774) * C82679) *
               C82927 +
           ((C191 - C190) * C52458 + (C563 - C562) * C52324 +
            (C8539 - C8538) * C52459 + (C8984 - C8983) * C82679) *
               C82911 +
           ((C195 - C194) * C52458 + (C565 - C564) * C52324 +
            (C168 * C1151 - C82581 * C1217) * C52459 +
            (C168 * C1467 - C82581 * C1519) * C82679) *
               C82862) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
             C82893 * C1746 - C1745 * C1653) *
                C52458 +
            (C82931 * C551 - C1743 * C497 + C82916 * C1055 - C1744 * C1003 +
             C82893 * C2323 - C1745 * C2241) *
                C52324 +
            (C29380 - C29381 + C29382 - C29383 + C29384 - C29385) * C52459 +
            (C29890 - C29891 + C29892 - C29893 + C29894 - C29895) * C82679) *
               C39819 +
           ((C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C52458 +
            (C2328 - C2329 + C2330 - C2331 + C2332 - C2333) * C52324 +
            (C54377 - C54378 + C54379 - C54380 + C54381 - C54382) * C52459 +
            (C55022 - C55023 + C55024 - C55025 + C55026 - C55027) * C82679) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C1756 - C1755 + C1758 - C1757 + C1760 - C1759) * C52458 +
            (C2329 - C2328 + C2331 - C2330 + C2333 - C2332) * C52324 +
            (C54378 - C54377 + C54380 - C54379 + C54382 - C54381) * C52459 +
            (C55023 - C55022 + C55025 - C55024 + C55027 - C55026) * C82679) *
               C39819 +
           ((C1768 - C1767 + C1770 - C1769 + C1772 - C1771) * C52458 +
            (C2335 - C2334 + C2337 - C2336 + C2339 - C2338) * C52324 +
            (C1743 * C1153 - C82931 * C1215 + C1744 * C3346 - C82916 * C3445 +
             C1745 * C3343 - C82893 * C3446) *
                C52459 +
            (C1743 * C1465 - C82931 * C1517 + C1744 * C3861 - C82916 * C3949 +
             C1745 * C3864 - C82893 * C3950) *
                C82679) *
               C82533) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52458 * C240 - C52892 * C102 - C52458 * C497 + C52324 * C608 +
            C52459 * C1265 - C52893 * C1155 - C52459 * C1463 + C82679 * C1566) *
               C82581 * C82937 +
           (C52931 + C52932) * C82581 * C82927 +
           (C52933 + C52934) * C82581 * C82911 +
           (C52935 + C52936) * C82581 * C82862) *
              C82938 * C82939 * C90 -
          ((C52459 * C1269 - C52893 * C1151 - C52459 * C1467 + C82679 * C1562 +
            C52458 * C244 - C52892 * C106 - C52458 * C501 + C52324 * C612) *
               C82581 * C82862 +
           (C52936 + C52935) * C82581 * C82911 +
           (C52934 + C52933) * C82581 * C82927 +
           (C52932 + C52931) * C82581 * C82937) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52458 * C240 - C52892 * C102 - C52458 * C497 + C52324 * C608 +
             C52459 * C1265 - C52893 * C1155 - C52459 * C1463 +
             C82679 * C1566) *
                C82931 +
            (C52458 * C805 - C52892 * C695 - C52458 * C1003 + C52324 * C1106 +
             C52459 * C3527 - C52893 * C3348 - C52459 * C3859 +
             C82679 * C4030) *
                C82916 +
            (C52458 * C1852 - C52892 * C1653 - C52458 * C2241 + C52324 * C2413 +
             C52459 * C3530 - C52893 * C3345 - C52459 * C3862 +
             C82679 * C4029) *
                C82893) *
               C39819 +
           ((C52931 + C52932) * C82931 + (C55150 + C55151) * C82916 +
            (C55152 + C55153) * C82893) *
               C82533) *
              C82938 * C82939 * C90 -
          (((C52459 * C3532 - C52893 * C3343 - C52459 * C3864 + C82679 * C4025 +
             C52458 * C1854 - C52892 * C1655 - C52458 * C2243 +
             C52324 * C2415) *
                C82893 +
            (C52459 * C3529 - C52893 * C3346 - C52459 * C3861 + C82679 * C4026 +
             C52458 * C807 - C52892 * C693 - C52458 * C1005 + C52324 * C1104) *
                C82916 +
            (C52934 + C52933) * C82931) *
               C82533 +
           ((C55153 + C55152) * C82893 + (C55151 + C55150) * C82916 +
            (C52932 + C52931) * C82931) *
               C39819) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexx[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C37889 * C108 - C37890 * C102 - C37889 * C109 + C82937 * C120 +
            C37891 * C110 - C37892 * C103 - C37891 * C111 + C82927 * C121 +
            C37893 * C112 - C37894 * C104 - C37893 * C113 + C82911 * C122 +
            C37895 * C114 - C37896 * C105 - C37895 * C115 + C82862 * C123) *
               C52324 +
           (C37889 * C1164 - C37890 * C1155 - C37889 * C1165 + C82937 * C1170 +
            C37891 * C1162 - C37892 * C1154 - C37891 * C1163 + C82927 * C1169 +
            C37893 * C1160 - C37894 * C1153 - C37893 * C1161 + C82911 * C1168 +
            C37895 * C1158 - C37896 * C1152 - C37895 * C1159 + C82862 * C1167) *
               C82679) *
              C82581 * C82938 * C688 -
          ((C37895 * C7860 - C37896 * C7859 - C37895 * C7861 + C82862 * C7862 +
            C37893 * C3355 - C37894 * C3346 - C37893 * C3356 + C82911 * C3364 +
            C37891 * C3357 - C37892 * C3347 - C37891 * C3358 + C82927 * C3365 +
            C37889 * C3359 - C37890 * C3348 - C37889 * C3360 + C82937 * C3366) *
               C82679 +
           (C38607 + C38606 + C38605 + C38604) * C52324) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39825 * C108 - C39826 * C102 - C39825 * C109 + C39819 * C120 +
             C39827 * C110 - C39828 * C103 - C39827 * C111 + C82533 * C121) *
                C52324 +
            (C43717 + C43718) * C82679) *
               C82931 +
           ((C40524 + C40525) * C52324 + (C42783 + C42784) * C82679) * C82916 +
           ((C40526 + C40527) * C52324 + (C50540 + C50541) * C82679) * C82893) *
              C82938 * C688 -
          (((C39827 * C20409 - C39828 * C20408 - C39827 * C20410 +
             C82533 * C20411 + C39825 * C16307 - C39826 * C16304 -
             C39825 * C16308 + C39819 * C16310) *
                C82679 +
            (C40529 + C40528) * C52324) *
               C82893 +
           ((C50541 + C50540) * C82679 + (C40527 + C40526) * C52324) * C82916 +
           ((C42784 + C42783) * C82679 + (C40525 + C40524) * C52324) * C82931) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C37889 +
            (C82581 * C175 - C168 * C109) * C82937 + (C182 - C183) * C37891 +
            (C184 - C185) * C82927 + (C186 - C187) * C37893 +
            (C188 - C189) * C82911 + (C190 - C191) * C37895 +
            (C192 - C193) * C82862) *
               C52324 +
           ((C5823 - C5824) * C37889 + (C5825 - C5826) * C82937 +
            (C4207 - C4208) * C37891 + (C4209 - C4210) * C82927 +
            (C4211 - C4212) * C37893 + (C4213 - C4214) * C82911 +
            (C8538 - C8539) * C37895 + (C8540 - C8541) * C82862) *
               C82679) *
              C82938 * C688 +
          (((C168 * C695 - C82581 * C753) * C37889 +
            (C168 * C705 - C82581 * C758) * C82937 +
            (C168 * C694 - C82581 * C754) * C37891 +
            (C168 * C703 - C82581 * C759) * C82927 +
            (C168 * C693 - C82581 * C755) * C37893 +
            (C168 * C701 - C82581 * C760) * C82911 +
            (C168 * C692 - C82581 * C756) * C37895 +
            (C168 * C699 - C82581 * C761) * C82862) *
               C52324 +
           ((C168 * C3348 - C82581 * C3441) * C37889 +
            (C168 * C3360 - C82581 * C3447) * C82937 +
            (C168 * C3347 - C82581 * C3443) * C37891 +
            (C168 * C3358 - C82581 * C3449) * C82927 +
            (C168 * C3346 - C82581 * C3445) * C37893 +
            (C168 * C3356 - C82581 * C3451) * C82911 +
            (C168 * C7859 - C82581 * C7929) * C37895 +
            (C168 * C7861 - C82581 * C7930) * C82862) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
             C82893 * C1746 - C1745 * C1653) *
                C39825 +
            (C82931 * C175 - C1743 * C109 + C82916 * C758 - C1744 * C705 +
             C82893 * C1750 - C1745 * C1658) *
                C39819 +
            (C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C39827 +
            (C1761 - C1762 + C1763 - C1764 + C1765 - C1766) * C82533) *
               C52324 +
           ((C29380 - C29381 + C29382 - C29383 + C29384 - C29385) * C39825 +
            (C29386 - C29387 + C29388 - C29389 + C29390 - C29391) * C39819 +
            (C54377 - C54378 + C54379 - C54380 + C54381 - C54382) * C39827 +
            (C54383 - C54384 + C54385 - C54386 + C54387 - C54388) * C82533) *
               C82679) *
              C82938 * C688 +
          (((C1743 * C695 - C82931 * C753 + C1744 * C1653 - C82916 * C1746 +
             C1745 * C2527 - C82893 * C2653) *
                C39825 +
            (C1743 * C705 - C82931 * C758 + C1744 * C1658 - C82916 * C1750 +
             C1745 * C2533 - C82893 * C2656) *
                C39819 +
            (C1743 * C694 - C82931 * C754 + C1744 * C1654 - C82916 * C1747 +
             C1745 * C2526 - C82893 * C2654) *
                C39827 +
            (C1743 * C703 - C82931 * C759 + C1744 * C1660 - C82916 * C1751 +
             C1745 * C2531 - C82893 * C2657) *
                C82533) *
               C52324 +
           ((C1743 * C3348 - C82931 * C3441 + C1744 * C3345 - C82916 * C3442 +
             C1745 * C16304 - C82893 * C16353) *
                C39825 +
            (C1743 * C3360 - C82931 * C3447 + C1744 * C3354 - C82916 * C3448 +
             C1745 * C16308 - C82893 * C16355) *
                C39819 +
            (C1743 * C3347 - C82931 * C3443 + C1744 * C3344 - C82916 * C3444 +
             C1745 * C20408 - C82893 * C20478) *
                C39827 +
            (C1743 * C3358 - C82931 * C3449 + C1744 * C3352 - C82916 * C3450 +
             C1745 * C20410 - C82893 * C20479) *
                C82533) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
               C37889 +
           (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
               C82937 +
           (C52461 - C52462 + C52463 - C52464) * C37891 +
           (C52465 - C52466 + C52467 - C52468) * C82927 +
           (C52469 - C52470 + C52471 - C52472) * C37893 +
           (C52473 - C52474 + C52475 - C52476) * C82911 +
           (C52477 - C52478 + C52479 - C52480) * C37895 +
           (C52481 - C52482 + C52483 - C52484) * C82862) *
              C82581 * C82938 * C688 +
          ((C52458 * C695 - C52324 * C805 + C52459 * C3348 - C82679 * C3527) *
               C37889 +
           (C52458 * C705 - C52324 * C810 + C52459 * C3360 - C82679 * C3533) *
               C82937 +
           (C52458 * C694 - C52324 * C806 + C52459 * C3347 - C82679 * C3528) *
               C37891 +
           (C52458 * C703 - C52324 * C811 + C52459 * C3358 - C82679 * C3534) *
               C82927 +
           (C52458 * C693 - C52324 * C807 + C52459 * C3346 - C82679 * C3529) *
               C37893 +
           (C52458 * C701 - C52324 * C812 + C52459 * C3356 - C82679 * C3535) *
               C82911 +
           (C52458 * C692 - C52324 * C808 + C52459 * C7859 - C82679 * C7997) *
               C37895 +
           (C52458 * C699 - C52324 * C813 + C52459 * C7861 - C82679 * C7998) *
               C82862) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C39825 +
            (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
                C39819 +
            (C52461 - C52462 + C52463 - C52464) * C39827 +
            (C52465 - C52466 + C52467 - C52468) * C82533) *
               C82931 +
           ((C55448 - C55449 + C55450 - C55451) * C39825 +
            (C55452 - C55453 + C55454 - C55455) * C39819 +
            (C54487 - C54488 + C54489 - C54490) * C39827 +
            (C54491 - C54492 + C54493 - C54494) * C82533) *
               C82916 +
           ((C55456 - C55457 + C55458 - C55459) * C39825 +
            (C55460 - C55461 + C55462 - C55463) * C39819 +
            (C54495 - C54496 + C54497 - C54498) * C39827 +
            (C54499 - C54500 + C54501 - C54502) * C82533) *
               C82893) *
              C82938 * C688 +
          (((C55449 - C55448 + C55451 - C55450) * C39825 +
            (C55453 - C55452 + C55455 - C55454) * C39819 +
            (C54488 - C54487 + C54490 - C54489) * C39827 +
            (C54492 - C54491 + C54494 - C54493) * C82533) *
               C82931 +
           ((C55457 - C55456 + C55459 - C55458) * C39825 +
            (C55461 - C55460 + C55463 - C55462) * C39819 +
            (C54496 - C54495 + C54498 - C54497) * C39827 +
            (C54500 - C54499 + C54502 - C54501) * C82533) *
               C82916 +
           ((C52458 * C2527 - C52324 * C2733 + C52459 * C16304 -
             C82679 * C16399) *
                C39825 +
            (C52458 * C2533 - C52324 * C2736 + C52459 * C16308 -
             C82679 * C16401) *
                C39819 +
            (C52458 * C2526 - C52324 * C2734 + C52459 * C20408 -
             C82679 * C20546) *
                C39827 +
            (C52458 * C2531 - C52324 * C2737 + C52459 * C20410 -
             C82679 * C20547) *
                C82533) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82937 * C108 - C37889 * C102 + C82927 * C110 - C37891 * C103 +
             C82911 * C112 - C37893 * C104 + C82862 * C114 - C37895 * C105) *
                C168 +
            (C82937 * C316 - C37889 * C310 + C82927 * C317 - C37891 * C311 +
             C82911 * C318 - C37893 * C312 + C82862 * C319 - C37895 * C313) *
                C82581) *
               C52324 +
           ((C82937 * C1164 - C37889 * C1155 + C82927 * C1162 - C37891 * C1154 +
             C82911 * C1160 - C37893 * C1153 + C82862 * C1158 -
             C37895 * C1152) *
                C168 +
            (C82937 * C1322 - C37889 * C1317 + C82927 * C1323 - C37891 * C1318 +
             C82911 * C1324 - C37893 * C1319 + C82862 * C1325 -
             C37895 * C1320) *
                C82581) *
               C82679) *
              C82938 * C688 +
          (((C38807 - C38806 + C38809 - C38808 + C38811 - C38810 + C38813 -
             C38812) *
                C168 +
            (C38815 - C38814 + C38817 - C38816 + C38819 - C38818 + C38821 -
             C38820) *
                C82581) *
               C52324 +
           ((C37889 * C3348 - C82937 * C3359 + C37891 * C3347 - C82927 * C3357 +
             C37893 * C3346 - C82911 * C3355 + C37895 * C7859 -
             C82862 * C7860) *
                C168 +
            (C37889 * C3613 - C82937 * C3619 + C37891 * C3614 - C82927 * C3620 +
             C37893 * C3615 - C82911 * C3621 + C37895 * C8065 -
             C82862 * C8066) *
                C82581) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C1743 +
            (C39819 * C316 - C39825 * C310 + C82533 * C317 - C39827 * C311) *
                C82931 +
            (C40728 - C40729 + C40730 - C40731) * C1744 +
            (C40732 - C40733 + C40734 - C40735) * C82916 +
            (C40736 - C40737 + C40738 - C40739) * C1745 +
            (C40740 - C40741 + C40742 - C40743) * C82893) *
               C52324 +
           ((C44031 - C44032 + C44033 - C44034) * C1743 +
            (C44035 - C44036 + C44037 - C44038) * C82931 +
            (C43081 - C43082 + C43083 - C43084) * C1744 +
            (C43085 - C43086 + C43087 - C43088) * C82916 +
            (C50836 - C50837 + C50838 - C50839) * C1745 +
            (C50840 - C50841 + C50842 - C50843) * C82893) *
               C82679) *
              C82938 * C688 +
          (((C40729 - C40728 + C40731 - C40730) * C1743 +
            (C40733 - C40732 + C40735 - C40734) * C82931 +
            (C40737 - C40736 + C40739 - C40738) * C1744 +
            (C40741 - C40740 + C40743 - C40742) * C82916 +
            (C40745 - C40744 + C40747 - C40746) * C1745 +
            (C40749 - C40748 + C40751 - C40750) * C82893) *
               C52324 +
           ((C43082 - C43081 + C43084 - C43083) * C1743 +
            (C43086 - C43085 + C43088 - C43087) * C82931 +
            (C50837 - C50836 + C50839 - C50838) * C1744 +
            (C50841 - C50840 + C50843 - C50842) * C82916 +
            (C39825 * C16304 - C39819 * C16307 + C39827 * C20408 -
             C82533 * C20409) *
                C1745 +
            (C39825 * C16445 - C39819 * C16447 + C39827 * C20614 -
             C82533 * C20615) *
                C82893) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C82937 +
            C396 * C82927 + C397 * C82911 + C398 * C82862) *
               C52324 +
           (C6108 * C82937 + C4516 * C82927 + C4517 * C82911 + C8772 * C82862) *
               C82679) *
              C82938 * C688 -
          (((C168 * C7929 - C364 * C7859 - C168 * C8065 + C82581 * C8133) *
                C82862 +
            (C168 * C3445 - C364 * C3346 - C168 * C3615 + C82581 * C3700) *
                C82911 +
            (C168 * C3443 - C364 * C3347 - C168 * C3614 + C82581 * C3702) *
                C82927 +
            (C168 * C3441 - C364 * C3348 - C168 * C3613 + C82581 * C3704) *
                C82937) *
               C82679 +
           ((C168 * C756 - C364 * C692 - C168 * C860 + C82581 * C910) * C82862 +
            (C168 * C755 - C364 * C693 - C168 * C859 + C82581 * C911) * C82911 +
            (C168 * C754 - C364 * C694 - C168 * C858 + C82581 * C912) * C82927 +
            (C168 * C753 - C364 * C695 - C168 * C857 + C82581 * C913) *
                C82937) *
               C52324) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1743 * C169 - C2032 * C102 - C1743 * C310 + C82931 * C365 +
             C1744 * C753 - C2033 * C695 - C1744 * C857 + C82916 * C913 +
             C1745 * C1746 - C2034 * C1653 - C1745 * C1950 + C82893 * C2035) *
                C39819 +
            (C2076 + C2077 + C2078) * C82533) *
               C52324 +
           ((C29662 + C29663 + C29664) * C39819 +
            (C54717 + C54718 + C54719) * C82533) *
               C82679) *
              C82938 * C688 -
          (((C1745 * C20478 - C2034 * C20408 - C1745 * C20614 +
             C82893 * C20682 + C1744 * C3444 - C2033 * C3344 - C1744 * C3617 +
             C82916 * C3701 + C1743 * C3443 - C2032 * C3347 - C1743 * C3614 +
             C82931 * C3702) *
                C82533 +
            (C1745 * C16353 - C2034 * C16304 - C1745 * C16445 +
             C82893 * C16492 + C1744 * C3442 - C2033 * C3345 - C1744 * C3616 +
             C82916 * C3703 + C1743 * C3441 - C2032 * C3348 - C1743 * C3613 +
             C82931 * C3704) *
                C39819) *
               C82679 +
           ((C1745 * C2654 - C2034 * C2526 - C1745 * C2822 + C82893 * C2926 +
             C1744 * C1747 - C2033 * C1654 - C1744 * C1951 + C82916 * C2036 +
             C1743 * C754 - C2032 * C694 - C1743 * C858 + C82931 * C912) *
                C82533 +
            (C1745 * C2653 - C2034 * C2527 - C1745 * C2821 + C82893 * C2927 +
             C1744 * C1746 - C2033 * C1653 - C1744 * C1950 + C82916 * C2035 +
             C1743 * C753 - C2032 * C695 - C1743 * C857 + C82931 * C913) *
                C39819) *
               C52324) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C168 +
            (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
                C82581) *
               C82937 +
           ((C52461 - C52462 + C52463 - C52464) * C168 +
            (C52683 - C52684 + C52685 - C52686) * C82581) *
               C82927 +
           ((C52469 - C52470 + C52471 - C52472) * C168 +
            (C52687 - C52688 + C52689 - C52690) * C82581) *
               C82911 +
           ((C52477 - C52478 + C52479 - C52480) * C168 +
            (C52691 - C52692 + C52693 - C52694) * C82581) *
               C82862) *
              C82938 * C688 +
          (((C52458 * C695 - C52324 * C805 + C52459 * C3348 - C82679 * C3527) *
                C168 +
            (C52458 * C857 - C52324 * C956 + C52459 * C3613 - C82679 * C3779) *
                C82581) *
               C82937 +
           ((C52458 * C694 - C52324 * C806 + C52459 * C3347 - C82679 * C3528) *
                C168 +
            (C52458 * C858 - C52324 * C957 + C52459 * C3614 - C82679 * C3781) *
                C82581) *
               C82927 +
           ((C52458 * C693 - C52324 * C807 + C52459 * C3346 - C82679 * C3529) *
                C168 +
            (C52458 * C859 - C52324 * C958 + C52459 * C3615 - C82679 * C3783) *
                C82581) *
               C82911 +
           ((C52458 * C692 - C52324 * C808 + C52459 * C7859 - C82679 * C7997) *
                C168 +
            (C52458 * C860 - C52324 * C959 + C52459 * C8065 - C82679 * C8200) *
                C82581) *
               C82862) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C1743 +
            (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
                C82931 +
            (C55448 - C55449 + C55450 - C55451) * C1744 +
            (C55758 - C55759 + C55760 - C55761) * C82916 +
            (C55456 - C55457 + C55458 - C55459) * C1745 +
            (C55762 - C55763 + C55764 - C55765) * C82893) *
               C39819 +
           ((C52461 - C52462 + C52463 - C52464) * C1743 +
            (C52683 - C52684 + C52685 - C52686) * C82931 +
            (C54487 - C54488 + C54489 - C54490) * C1744 +
            (C54818 - C54819 + C54820 - C54821) * C82916 +
            (C54495 - C54496 + C54497 - C54498) * C1745 +
            (C54822 - C54823 + C54824 - C54825) * C82893) *
               C82533) *
              C82938 * C688 +
          (((C55449 - C55448 + C55451 - C55450) * C1743 +
            (C55759 - C55758 + C55761 - C55760) * C82931 +
            (C55457 - C55456 + C55459 - C55458) * C1744 +
            (C55763 - C55762 + C55765 - C55764) * C82916 +
            (C52458 * C2527 - C52324 * C2733 + C52459 * C16304 -
             C82679 * C16399) *
                C1745 +
            (C52458 * C2821 - C52324 * C3002 + C52459 * C16445 -
             C82679 * C16535) *
                C82893) *
               C39819 +
           ((C54488 - C54487 + C54490 - C54489) * C1743 +
            (C54819 - C54818 + C54821 - C54820) * C82931 +
            (C54496 - C54495 + C54498 - C54497) * C1744 +
            (C54823 - C54822 + C54825 - C54824) * C82916 +
            (C52458 * C2526 - C52324 * C2734 + C52459 * C20408 -
             C82679 * C20546) *
                C1745 +
            (C52458 * C2822 - C52324 * C3003 + C52459 * C20614 -
             C82679 * C20749) *
                C82893) *
               C82533) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezx[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C82937 * C108 - C37889 * C102 + C82927 * C110 - C37891 * C103 +
            C82911 * C112 - C37893 * C104 + C82862 * C114 - C37895 * C105) *
               C52458 +
           (C82937 * C503 - C37889 * C497 + C82927 * C504 - C37891 * C498 +
            C82911 * C505 - C37893 * C499 + C82862 * C506 - C37895 * C500) *
               C52324 +
           (C82937 * C1164 - C37889 * C1155 + C82927 * C1162 - C37891 * C1154 +
            C82911 * C1160 - C37893 * C1153 + C82862 * C1158 - C37895 * C1152) *
               C52459 +
           (C82937 * C1468 - C37889 * C1463 + C82927 * C1469 - C37891 * C1464 +
            C82911 * C1470 - C37893 * C1465 + C82862 * C1471 - C37895 * C1466) *
               C82679) *
              C82581 * C82938 * C688 +
          ((C38807 - C38806 + C38809 - C38808 + C38811 - C38810 + C38813 -
            C38812) *
               C52458 +
           (C39021 - C39020 + C39023 - C39022 + C39025 - C39024 + C39027 -
            C39026) *
               C52324 +
           (C37889 * C3348 - C82937 * C3359 + C37891 * C3347 - C82927 * C3357 +
            C37893 * C3346 - C82911 * C3355 + C37895 * C7859 - C82862 * C7860) *
               C52459 +
           (C37889 * C3859 - C82937 * C3865 + C37891 * C3860 - C82927 * C3866 +
            C37893 * C3861 - C82911 * C3867 + C37895 * C8267 - C82862 * C8268) *
               C82679) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C52458 +
            (C39819 * C503 - C39825 * C497 + C82533 * C504 - C39827 * C498) *
                C52324 +
            (C44031 - C44032 + C44033 - C44034) * C52459 +
            (C44369 - C44370 + C44371 - C44372) * C82679) *
               C82931 +
           ((C40728 - C40729 + C40730 - C40731) * C52458 +
            (C40950 - C40951 + C40952 - C40953) * C52324 +
            (C43081 - C43082 + C43083 - C43084) * C52459 +
            (C43391 - C43392 + C43393 - C43394) * C82679) *
               C82916 +
           ((C40736 - C40737 + C40738 - C40739) * C52458 +
            (C40954 - C40955 + C40956 - C40957) * C52324 +
            (C50836 - C50837 + C50838 - C50839) * C52459 +
            (C51138 - C51139 + C51140 - C51141) * C82679) *
               C82893) *
              C82938 * C688 +
          (((C40729 - C40728 + C40731 - C40730) * C52458 +
            (C40951 - C40950 + C40953 - C40952) * C52324 +
            (C43082 - C43081 + C43084 - C43083) * C52459 +
            (C43392 - C43391 + C43394 - C43393) * C82679) *
               C82931 +
           ((C40737 - C40736 + C40739 - C40738) * C52458 +
            (C40955 - C40954 + C40957 - C40956) * C52324 +
            (C50837 - C50836 + C50839 - C50838) * C52459 +
            (C51139 - C51138 + C51141 - C51140) * C82679) *
               C82916 +
           ((C40745 - C40744 + C40747 - C40746) * C52458 +
            (C40959 - C40958 + C40961 - C40960) * C52324 +
            (C39825 * C16304 - C39819 * C16307 + C39827 * C20408 -
             C82533 * C20409) *
                C52459 +
            (C39825 * C16579 - C39819 * C16581 + C39827 * C20816 -
             C82533 * C20817) *
                C82679) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C52458 +
            (C82581 * C551 - C168 * C497) * C52324 + (C5823 - C5824) * C52459 +
            (C6358 - C6359) * C82679) *
               C82937 +
           ((C182 - C183) * C52458 + (C558 - C559) * C52324 +
            (C4207 - C4208) * C52459 + (C4770 - C4771) * C82679) *
               C82927 +
           ((C186 - C187) * C52458 + (C560 - C561) * C52324 +
            (C4211 - C4212) * C52459 + (C4774 - C4775) * C82679) *
               C82911 +
           ((C190 - C191) * C52458 + (C562 - C563) * C52324 +
            (C8538 - C8539) * C52459 + (C8983 - C8984) * C82679) *
               C82862) *
              C82938 * C688 +
          (((C168 * C695 - C82581 * C753) * C52458 +
            (C168 * C1003 - C82581 * C1055) * C52324 +
            (C168 * C3348 - C82581 * C3441) * C52459 +
            (C168 * C3859 - C82581 * C3945) * C82679) *
               C82937 +
           ((C168 * C694 - C82581 * C754) * C52458 +
            (C168 * C1004 - C82581 * C1056) * C52324 +
            (C168 * C3347 - C82581 * C3443) * C52459 +
            (C168 * C3860 - C82581 * C3947) * C82679) *
               C82927 +
           ((C168 * C693 - C82581 * C755) * C52458 +
            (C168 * C1005 - C82581 * C1057) * C52324 +
            (C168 * C3346 - C82581 * C3445) * C52459 +
            (C168 * C3861 - C82581 * C3949) * C82679) *
               C82911 +
           ((C168 * C692 - C82581 * C756) * C52458 +
            (C168 * C1006 - C82581 * C1058) * C52324 +
            (C168 * C7859 - C82581 * C7929) * C52459 +
            (C168 * C8267 - C82581 * C8335) * C82679) *
               C82862) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
             C82893 * C1746 - C1745 * C1653) *
                C52458 +
            (C82931 * C551 - C1743 * C497 + C82916 * C1055 - C1744 * C1003 +
             C82893 * C2323 - C1745 * C2241) *
                C52324 +
            (C29380 - C29381 + C29382 - C29383 + C29384 - C29385) * C52459 +
            (C29890 - C29891 + C29892 - C29893 + C29894 - C29895) * C82679) *
               C39819 +
           ((C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C52458 +
            (C2328 - C2329 + C2330 - C2331 + C2332 - C2333) * C52324 +
            (C54377 - C54378 + C54379 - C54380 + C54381 - C54382) * C52459 +
            (C55022 - C55023 + C55024 - C55025 + C55026 - C55027) * C82679) *
               C82533) *
              C82938 * C688 +
          (((C1743 * C695 - C82931 * C753 + C1744 * C1653 - C82916 * C1746 +
             C1745 * C2527 - C82893 * C2653) *
                C52458 +
            (C1743 * C1003 - C82931 * C1055 + C1744 * C2241 - C82916 * C2323 +
             C1745 * C3083 - C82893 * C3175) *
                C52324 +
            (C1743 * C3348 - C82931 * C3441 + C1744 * C3345 - C82916 * C3442 +
             C1745 * C16304 - C82893 * C16353) *
                C52459 +
            (C1743 * C3859 - C82931 * C3945 + C1744 * C3862 - C82916 * C3946 +
             C1745 * C16579 - C82893 * C16625) *
                C82679) *
               C39819 +
           ((C1743 * C694 - C82931 * C754 + C1744 * C1654 - C82916 * C1747 +
             C1745 * C2526 - C82893 * C2654) *
                C52458 +
            (C1743 * C1004 - C82931 * C1056 + C1744 * C2242 - C82916 * C2324 +
             C1745 * C3084 - C82893 * C3176) *
                C52324 +
            (C1743 * C3347 - C82931 * C3443 + C1744 * C3344 - C82916 * C3444 +
             C1745 * C20408 - C82893 * C20478) *
                C52459 +
            (C1743 * C3860 - C82931 * C3947 + C1744 * C3863 - C82916 * C3948 +
             C1745 * C20816 - C82893 * C20884) *
                C82679) *
               C82533) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52458 * C240 - C52892 * C102 - C52458 * C497 + C52324 * C608 +
            C52459 * C1265 - C52893 * C1155 - C52459 * C1463 + C82679 * C1566) *
               C82581 * C82937 +
           (C52931 + C52932) * C82581 * C82927 +
           (C52933 + C52934) * C82581 * C82911 +
           (C52935 + C52936) * C82581 * C82862) *
              C82938 * C688 -
          ((C52459 * C7997 - C52893 * C7859 - C52459 * C8267 + C82679 * C8402 +
            C52458 * C808 - C52892 * C692 - C52458 * C1006 + C52324 * C1103) *
               C82581 * C82862 +
           (C52459 * C3529 - C52893 * C3346 - C52459 * C3861 + C82679 * C4026 +
            C52458 * C807 - C52892 * C693 - C52458 * C1005 + C52324 * C1104) *
               C82581 * C82911 +
           (C52459 * C3528 - C52893 * C3347 - C52459 * C3860 + C82679 * C4028 +
            C52458 * C806 - C52892 * C694 - C52458 * C1004 + C52324 * C1105) *
               C82581 * C82927 +
           (C52459 * C3527 - C52893 * C3348 - C52459 * C3859 + C82679 * C4030 +
            C52458 * C805 - C52892 * C695 - C52458 * C1003 + C52324 * C1106) *
               C82581 * C82937) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52458 * C240 - C52892 * C102 - C52458 * C497 + C52324 * C608 +
             C52459 * C1265 - C52893 * C1155 - C52459 * C1463 +
             C82679 * C1566) *
                C82931 +
            (C56084 + C56085) * C82916 + (C56086 + C56087) * C82893) *
               C39819 +
           ((C52931 + C52932) * C82931 + (C55150 + C55151) * C82916 +
            (C55152 + C55153) * C82893) *
               C82533) *
              C82938 * C688 -
          (((C52459 * C20546 - C52893 * C20408 - C52459 * C20816 +
             C82679 * C20951 + C52458 * C2734 - C52892 * C2526 -
             C52458 * C3084 + C52324 * C3253) *
                C82893 +
            (C55153 + C55152) * C82916 + (C55151 + C55150) * C82931) *
               C82533 +
           ((C52459 * C16399 - C52893 * C16304 - C52459 * C16579 +
             C82679 * C16670 + C52458 * C2733 - C52892 * C2527 -
             C52458 * C3083 + C52324 * C3254) *
                C82893 +
            (C56087 + C56086) * C82916 + (C56085 + C56084) * C82931) *
               C39819) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C37889 * C108 - C37890 * C102 - C37889 * C109 + C82937 * C120 +
            C37891 * C110 - C37892 * C103 - C37891 * C111 + C82927 * C121 +
            C37893 * C112 - C37894 * C104 - C37893 * C113 + C82911 * C122 +
            C37895 * C114 - C37896 * C105 - C37895 * C115 + C82862 * C123) *
               C52324 +
           (C53621 + C53622 + C53623 + C53624) * C82679) *
              C82581 * C1149 -
          ((C37895 * C4118 - C37896 * C4111 - C37895 * C4119 + C82862 * C4123 +
            C37893 * C4116 - C37894 * C4110 - C37893 * C4117 + C82911 * C4122 +
            C37891 * C4114 - C37892 * C4109 - C37891 * C4115 + C82927 * C4121 +
            C37889 * C4112 - C37890 * C4108 - C37889 * C4113 + C82937 * C4120) *
               C82679 +
           (C53624 + C53623 + C53622 + C53621) * C52324) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39825 * C108 - C39826 * C102 - C39825 * C109 + C39819 * C120 +
             C39827 * C110 - C39828 * C103 - C39827 * C111 + C82533 * C121) *
                C52324 +
            (C43717 + C43718) * C82679) *
               C82931 +
           ((C40524 + C40525) * C52324 + (C42783 + C42784) * C82679) * C82916 +
           ((C40526 + C40527) * C52324 + (C50540 + C50541) * C82679) * C82893) *
              C1149 -
          (((C39827 * C16749 - C39828 * C16746 - C39827 * C16750 +
             C82533 * C16752 + C39825 * C16747 - C39826 * C16745 -
             C39825 * C16748 + C39819 * C16751) *
                C82679 +
            (C50541 + C50540) * C52324) *
               C82893 +
           ((C42786 + C42785) * C82679 + (C42784 + C42783) * C52324) * C82916 +
           ((C43720 + C43719) * C82679 + (C43718 + C43717) * C52324) * C82931) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C37889 +
            (C82581 * C175 - C168 * C109) * C82937 + (C182 - C183) * C37891 +
            (C184 - C185) * C82927 + (C186 - C187) * C37893 +
            (C188 - C189) * C82911 + (C190 - C191) * C37895 +
            (C192 - C193) * C82862) *
               C52324 +
           ((C5823 - C5824) * C37889 + (C5825 - C5826) * C82937 +
            (C4207 - C4208) * C37891 + (C4209 - C4210) * C82927 +
            (C4211 - C4212) * C37893 + (C4213 - C4214) * C82911 +
            (C8538 - C8539) * C37895 + (C8540 - C8541) * C82862) *
               C82679) *
              C1149 +
          (((C5824 - C5823) * C37889 + (C5826 - C5825) * C82937 +
            (C4208 - C4207) * C37891 + (C4210 - C4209) * C82927 +
            (C4212 - C4211) * C37893 + (C4214 - C4213) * C82911 +
            (C8539 - C8538) * C37895 + (C8541 - C8540) * C82862) *
               C52324 +
           ((C5828 - C5827) * C37889 + (C5830 - C5829) * C82937 +
            (C4216 - C4215) * C37891 + (C4218 - C4217) * C82927 +
            (C4220 - C4219) * C37893 + (C4222 - C4221) * C82911 +
            (C168 * C4111 - C82581 * C4201) * C37895 +
            (C168 * C4119 - C82581 * C4205) * C82862) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
             C82893 * C1746 - C1745 * C1653) *
                C39825 +
            (C82931 * C175 - C1743 * C109 + C82916 * C758 - C1744 * C705 +
             C82893 * C1750 - C1745 * C1658) *
                C39819 +
            (C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C39827 +
            (C1761 - C1762 + C1763 - C1764 + C1765 - C1766) * C82533) *
               C52324 +
           ((C29380 - C29381 + C29382 - C29383 + C29384 - C29385) * C39825 +
            (C29386 - C29387 + C29388 - C29389 + C29390 - C29391) * C39819 +
            (C54377 - C54378 + C54379 - C54380 + C54381 - C54382) * C39827 +
            (C54383 - C54384 + C54385 - C54386 + C54387 - C54388) * C82533) *
               C82679) *
              C1149 +
          (((C29381 - C29380 + C29383 - C29382 + C29385 - C29384) * C39825 +
            (C29387 - C29386 + C29389 - C29388 + C29391 - C29390) * C39819 +
            (C54378 - C54377 + C54380 - C54379 + C54382 - C54381) * C39827 +
            (C54384 - C54383 + C54386 - C54385 + C54388 - C54387) * C82533) *
               C52324 +
           ((C29393 - C29392 + C29395 - C29394 + C29397 - C29396) * C39825 +
            (C29399 - C29398 + C29401 - C29400 + C29403 - C29402) * C39819 +
            (C1743 * C4109 - C82931 * C4199 + C1744 * C4975 - C82916 * C5061 +
             C1745 * C16746 - C82893 * C16828) *
                C39827 +
            (C1743 * C4115 - C82931 * C4203 + C1744 * C4980 - C82916 * C5064 +
             C1745 * C16750 - C82893 * C16830) *
                C82533) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
               C37889 +
           (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
               C82937 +
           (C52461 - C52462 + C52463 - C52464) * C37891 +
           (C52465 - C52466 + C52467 - C52468) * C82927 +
           (C52469 - C52470 + C52471 - C52472) * C37893 +
           (C52473 - C52474 + C52475 - C52476) * C82911 +
           (C52477 - C52478 + C52479 - C52480) * C37895 +
           (C52481 - C52482 + C52483 - C52484) * C82862) *
              C82581 * C1149 +
          ((C52458 * C1155 - C52324 * C1265 + C52459 * C4108 - C82679 * C4299) *
               C37889 +
           (C52458 * C1165 - C52324 * C1270 + C52459 * C4113 - C82679 * C4303) *
               C82937 +
           (C52458 * C1154 - C52324 * C1266 + C52459 * C4109 - C82679 * C4300) *
               C37891 +
           (C52458 * C1163 - C52324 * C1271 + C52459 * C4115 - C82679 * C4304) *
               C82927 +
           (C52458 * C1153 - C52324 * C1267 + C52459 * C4110 - C82679 * C4301) *
               C37893 +
           (C52458 * C1161 - C52324 * C1272 + C52459 * C4117 - C82679 * C4305) *
               C82911 +
           (C52458 * C1152 - C52324 * C1268 + C52459 * C4111 - C82679 * C4302) *
               C37895 +
           (C52458 * C1159 - C52324 * C1273 + C52459 * C4119 - C82679 * C4306) *
               C82862) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C39825 +
            (C52324 * C246 - C52458 * C109 + C82679 * C1270 - C52459 * C1165) *
                C39819 +
            (C52461 - C52462 + C52463 - C52464) * C39827 +
            (C52465 - C52466 + C52467 - C52468) * C82533) *
               C82931 +
           ((C55448 - C55449 + C55450 - C55451) * C39825 +
            (C55452 - C55453 + C55454 - C55455) * C39819 +
            (C54487 - C54488 + C54489 - C54490) * C39827 +
            (C54491 - C54492 + C54493 - C54494) * C82533) *
               C82916 +
           ((C55456 - C55457 + C55458 - C55459) * C39825 +
            (C55460 - C55461 + C55462 - C55463) * C39819 +
            (C54495 - C54496 + C54497 - C54498) * C39827 +
            (C54499 - C54500 + C54501 - C54502) * C82533) *
               C82893) *
              C1149 +
          (((C52458 * C1155 - C52324 * C1265 + C52459 * C4108 -
             C82679 * C4299) *
                C39825 +
            (C52458 * C1165 - C52324 * C1270 + C52459 * C4113 -
             C82679 * C4303) *
                C39819 +
            (C52458 * C1154 - C52324 * C1266 + C52459 * C4109 -
             C82679 * C4300) *
                C39827 +
            (C52458 * C1163 - C52324 * C1271 + C52459 * C4115 -
             C82679 * C4304) *
                C82533) *
               C82931 +
           ((C52458 * C3348 - C52324 * C3527 + C52459 * C4976 -
             C82679 * C5140) *
                C39825 +
            (C52458 * C3360 - C52324 * C3533 + C52459 * C4982 -
             C82679 * C5143) *
                C39819 +
            (C52458 * C3347 - C52324 * C3528 + C52459 * C4975 -
             C82679 * C5141) *
                C39827 +
            (C52458 * C3358 - C52324 * C3534 + C52459 * C4980 -
             C82679 * C5144) *
                C82533) *
               C82916 +
           ((C52458 * C3345 - C52324 * C3530 + C52459 * C16745 -
             C82679 * C16905) *
                C39825 +
            (C52458 * C3354 - C52324 * C3536 + C52459 * C16748 -
             C82679 * C16907) *
                C39819 +
            (C52458 * C3344 - C52324 * C3531 + C52459 * C16746 -
             C82679 * C16906) *
                C39827 +
            (C52458 * C3352 - C52324 * C3537 + C52459 * C16750 -
             C82679 * C16908) *
                C82533) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82937 * C108 - C37889 * C102 + C82927 * C110 - C37891 * C103 +
             C82911 * C112 - C37893 * C104 + C82862 * C114 - C37895 * C105) *
                C168 +
            (C82937 * C316 - C37889 * C310 + C82927 * C317 - C37891 * C311 +
             C82911 * C318 - C37893 * C312 + C82862 * C319 - C37895 * C313) *
                C82581) *
               C52324 +
           ((C53823 - C53824 + C53825 - C53826 + C53827 - C53828 + C53829 -
             C53830) *
                C168 +
            (C53831 - C53832 + C53833 - C53834 + C53835 - C53836 + C53837 -
             C53838) *
                C82581) *
               C82679) *
              C1149 +
          (((C53824 - C53823 + C53826 - C53825 + C53828 - C53827 + C53830 -
             C53829) *
                C168 +
            (C53832 - C53831 + C53834 - C53833 + C53836 - C53835 + C53838 -
             C53837) *
                C82581) *
               C52324 +
           ((C37889 * C4108 - C82937 * C4112 + C37891 * C4109 - C82927 * C4114 +
             C37893 * C4110 - C82911 * C4116 + C37895 * C4111 -
             C82862 * C4118) *
                C168 +
            (C37889 * C4405 - C82937 * C4409 + C37891 * C4406 - C82927 * C4410 +
             C37893 * C4407 - C82911 * C4411 + C37895 * C4408 -
             C82862 * C4412) *
                C82581) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C1743 +
            (C39819 * C316 - C39825 * C310 + C82533 * C317 - C39827 * C311) *
                C82931 +
            (C40728 - C40729 + C40730 - C40731) * C1744 +
            (C40732 - C40733 + C40734 - C40735) * C82916 +
            (C40736 - C40737 + C40738 - C40739) * C1745 +
            (C40740 - C40741 + C40742 - C40743) * C82893) *
               C52324 +
           ((C44031 - C44032 + C44033 - C44034) * C1743 +
            (C44035 - C44036 + C44037 - C44038) * C82931 +
            (C43081 - C43082 + C43083 - C43084) * C1744 +
            (C43085 - C43086 + C43087 - C43088) * C82916 +
            (C50836 - C50837 + C50838 - C50839) * C1745 +
            (C50840 - C50841 + C50842 - C50843) * C82893) *
               C82679) *
              C1149 +
          (((C44032 - C44031 + C44034 - C44033) * C1743 +
            (C44036 - C44035 + C44038 - C44037) * C82931 +
            (C43082 - C43081 + C43084 - C43083) * C1744 +
            (C43086 - C43085 + C43088 - C43087) * C82916 +
            (C50837 - C50836 + C50839 - C50838) * C1745 +
            (C50841 - C50840 + C50843 - C50842) * C82893) *
               C52324 +
           ((C44040 - C44039 + C44042 - C44041) * C1743 +
            (C44044 - C44043 + C44046 - C44045) * C82931 +
            (C43090 - C43089 + C43092 - C43091) * C1744 +
            (C43094 - C43093 + C43096 - C43095) * C82916 +
            (C39825 * C16745 - C39819 * C16747 + C39827 * C16746 -
             C82533 * C16749) *
                C1745 +
            (C39825 * C16983 - C39819 * C16985 + C39827 * C16984 -
             C82533 * C16986) *
                C82893) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C82937 +
            C396 * C82927 + C397 * C82911 + C398 * C82862) *
               C52324 +
           (C53905 + C53906 + C53907 + C53908) * C82679) *
              C1149 -
          (((C168 * C4201 - C364 * C4111 - C168 * C4408 + C82581 * C4490) *
                C82862 +
            C4519 * C82911 + C4518 * C82927 + C6109 * C82937) *
               C82679 +
           (C53908 + C53907 + C53906 + C53905) * C52324) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1743 * C169 - C2032 * C102 - C1743 * C310 + C82931 * C365 +
             C1744 * C753 - C2033 * C695 - C1744 * C857 + C82916 * C913 +
             C1745 * C1746 - C2034 * C1653 - C1745 * C1950 + C82893 * C2035) *
                C39819 +
            (C2076 + C2077 + C2078) * C82533) *
               C52324 +
           ((C29662 + C29663 + C29664) * C39819 +
            (C54717 + C54718 + C54719) * C82533) *
               C82679) *
              C1149 -
          (((C1745 * C16828 - C2034 * C16746 - C1745 * C16984 +
             C82893 * C17062 + C1744 * C5061 - C2033 * C4975 - C1744 * C5221 +
             C82916 * C5301 + C1743 * C4199 - C2032 * C4109 - C1743 * C4406 +
             C82931 * C4488) *
                C82533 +
            (C29667 + C29666 + C29665) * C39819) *
               C82679 +
           ((C54719 + C54718 + C54717) * C82533 +
            (C29664 + C29663 + C29662) * C39819) *
               C52324) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C168 +
            (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
                C82581) *
               C82937 +
           ((C52461 - C52462 + C52463 - C52464) * C168 +
            (C52683 - C52684 + C52685 - C52686) * C82581) *
               C82927 +
           ((C52469 - C52470 + C52471 - C52472) * C168 +
            (C52687 - C52688 + C52689 - C52690) * C82581) *
               C82911 +
           ((C52477 - C52478 + C52479 - C52480) * C168 +
            (C52691 - C52692 + C52693 - C52694) * C82581) *
               C82862) *
              C1149 +
          (((C52458 * C1155 - C52324 * C1265 + C52459 * C4108 -
             C82679 * C4299) *
                C168 +
            (C52458 * C1317 - C52324 * C1416 + C52459 * C4405 -
             C82679 * C4593) *
                C82581) *
               C82937 +
           ((C52458 * C1154 - C52324 * C1266 + C52459 * C4109 -
             C82679 * C4300) *
                C168 +
            (C52458 * C1318 - C52324 * C1417 + C52459 * C4406 -
             C82679 * C4594) *
                C82581) *
               C82927 +
           ((C52458 * C1153 - C52324 * C1267 + C52459 * C4110 -
             C82679 * C4301) *
                C168 +
            (C52458 * C1319 - C52324 * C1418 + C52459 * C4407 -
             C82679 * C4595) *
                C82581) *
               C82911 +
           ((C52458 * C1152 - C52324 * C1268 + C52459 * C4111 -
             C82679 * C4302) *
                C168 +
            (C52458 * C1320 - C52324 * C1419 + C52459 * C4408 -
             C82679 * C4596) *
                C82581) *
               C82862) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52324 * C240 - C52458 * C102 + C82679 * C1265 - C52459 * C1155) *
                C1743 +
            (C52324 * C441 - C52458 * C310 + C82679 * C1416 - C52459 * C1317) *
                C82931 +
            (C55448 - C55449 + C55450 - C55451) * C1744 +
            (C55758 - C55759 + C55760 - C55761) * C82916 +
            (C55456 - C55457 + C55458 - C55459) * C1745 +
            (C55762 - C55763 + C55764 - C55765) * C82893) *
               C39819 +
           ((C52461 - C52462 + C52463 - C52464) * C1743 +
            (C52683 - C52684 + C52685 - C52686) * C82931 +
            (C54487 - C54488 + C54489 - C54490) * C1744 +
            (C54818 - C54819 + C54820 - C54821) * C82916 +
            (C54495 - C54496 + C54497 - C54498) * C1745 +
            (C54822 - C54823 + C54824 - C54825) * C82893) *
               C82533) *
              C1149 +
          (((C52458 * C1155 - C52324 * C1265 + C52459 * C4108 -
             C82679 * C4299) *
                C1743 +
            (C52458 * C1317 - C52324 * C1416 + C52459 * C4405 -
             C82679 * C4593) *
                C82931 +
            (C52458 * C3348 - C52324 * C3527 + C52459 * C4976 -
             C82679 * C5140) *
                C1744 +
            (C52458 * C3613 - C52324 * C3779 + C52459 * C5220 -
             C82679 * C5377) *
                C82916 +
            (C52458 * C3345 - C52324 * C3530 + C52459 * C16745 -
             C82679 * C16905) *
                C1745 +
            (C52458 * C3616 - C52324 * C3780 + C52459 * C16983 -
             C82679 * C17137) *
                C82893) *
               C39819 +
           ((C52458 * C1154 - C52324 * C1266 + C52459 * C4109 -
             C82679 * C4300) *
                C1743 +
            (C52458 * C1318 - C52324 * C1417 + C52459 * C4406 -
             C82679 * C4594) *
                C82931 +
            (C52458 * C3347 - C52324 * C3528 + C52459 * C4975 -
             C82679 * C5141) *
                C1744 +
            (C52458 * C3614 - C52324 * C3781 + C52459 * C5221 -
             C82679 * C5378) *
                C82916 +
            (C52458 * C3344 - C52324 * C3531 + C52459 * C16746 -
             C82679 * C16906) *
                C1745 +
            (C52458 * C3617 - C52324 * C3782 + C52459 * C16984 -
             C82679 * C17138) *
                C82893) *
               C82533) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezx[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C82937 * C108 - C37889 * C102 + C82927 * C110 - C37891 * C103 +
            C82911 * C112 - C37893 * C104 + C82862 * C114 - C37895 * C105) *
               C52458 +
           (C82937 * C503 - C37889 * C497 + C82927 * C504 - C37891 * C498 +
            C82911 * C505 - C37893 * C499 + C82862 * C506 - C37895 * C500) *
               C52324 +
           (C53823 - C53824 + C53825 - C53826 + C53827 - C53828 + C53829 -
            C53830) *
               C52459 +
           (C54041 - C54042 + C54043 - C54044 + C54045 - C54046 + C54047 -
            C54048) *
               C82679) *
              C82581 * C1149 +
          ((C53824 - C53823 + C53826 - C53825 + C53828 - C53827 + C53830 -
            C53829) *
               C52458 +
           (C54042 - C54041 + C54044 - C54043 + C54046 - C54045 + C54048 -
            C54047) *
               C52324 +
           (C37889 * C4108 - C82937 * C4112 + C37891 * C4109 - C82927 * C4114 +
            C37893 * C4110 - C82911 * C4116 + C37895 * C4111 - C82862 * C4118) *
               C52459 +
           (C37889 * C4683 - C82937 * C4687 + C37891 * C4684 - C82927 * C4688 +
            C37893 * C4685 - C82911 * C4689 + C37895 * C4686 - C82862 * C4690) *
               C82679) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39819 * C108 - C39825 * C102 + C82533 * C110 - C39827 * C103) *
                C52458 +
            (C39819 * C503 - C39825 * C497 + C82533 * C504 - C39827 * C498) *
                C52324 +
            (C44031 - C44032 + C44033 - C44034) * C52459 +
            (C44369 - C44370 + C44371 - C44372) * C82679) *
               C82931 +
           ((C40728 - C40729 + C40730 - C40731) * C52458 +
            (C40950 - C40951 + C40952 - C40953) * C52324 +
            (C43081 - C43082 + C43083 - C43084) * C52459 +
            (C43391 - C43392 + C43393 - C43394) * C82679) *
               C82916 +
           ((C40736 - C40737 + C40738 - C40739) * C52458 +
            (C40954 - C40955 + C40956 - C40957) * C52324 +
            (C50836 - C50837 + C50838 - C50839) * C52459 +
            (C51138 - C51139 + C51140 - C51141) * C82679) *
               C82893) *
              C1149 +
          (((C44032 - C44031 + C44034 - C44033) * C52458 +
            (C44370 - C44369 + C44372 - C44371) * C52324 +
            (C44040 - C44039 + C44042 - C44041) * C52459 +
            (C44374 - C44373 + C44376 - C44375) * C82679) *
               C82931 +
           ((C43082 - C43081 + C43084 - C43083) * C52458 +
            (C43392 - C43391 + C43394 - C43393) * C52324 +
            (C43090 - C43089 + C43092 - C43091) * C52459 +
            (C43396 - C43395 + C43398 - C43397) * C82679) *
               C82916 +
           ((C50837 - C50836 + C50839 - C50838) * C52458 +
            (C51139 - C51138 + C51141 - C51140) * C52324 +
            (C39825 * C16745 - C39819 * C16747 + C39827 * C16746 -
             C82533 * C16749) *
                C52459 +
            (C39825 * C17213 - C39819 * C17215 + C39827 * C17214 -
             C82533 * C17216) *
                C82679) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C52458 +
            (C82581 * C551 - C168 * C497) * C52324 + (C5823 - C5824) * C52459 +
            (C6358 - C6359) * C82679) *
               C82937 +
           ((C182 - C183) * C52458 + (C558 - C559) * C52324 +
            (C4207 - C4208) * C52459 + (C4770 - C4771) * C82679) *
               C82927 +
           ((C186 - C187) * C52458 + (C560 - C561) * C52324 +
            (C4211 - C4212) * C52459 + (C4774 - C4775) * C82679) *
               C82911 +
           ((C190 - C191) * C52458 + (C562 - C563) * C52324 +
            (C8538 - C8539) * C52459 + (C8983 - C8984) * C82679) *
               C82862) *
              C1149 +
          (((C5824 - C5823) * C52458 + (C6359 - C6358) * C52324 +
            (C5828 - C5827) * C52459 + (C6361 - C6360) * C82679) *
               C82937 +
           ((C4208 - C4207) * C52458 + (C4771 - C4770) * C52324 +
            (C4216 - C4215) * C52459 + (C4773 - C4772) * C82679) *
               C82927 +
           ((C4212 - C4211) * C52458 + (C4775 - C4774) * C52324 +
            (C4220 - C4219) * C52459 + (C4777 - C4776) * C82679) *
               C82911 +
           ((C8539 - C8538) * C52458 + (C8984 - C8983) * C52324 +
            (C168 * C4111 - C82581 * C4201) * C52459 +
            (C168 * C4686 - C82581 * C4768) * C82679) *
               C82862) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
             C82893 * C1746 - C1745 * C1653) *
                C52458 +
            (C82931 * C551 - C1743 * C497 + C82916 * C1055 - C1744 * C1003 +
             C82893 * C2323 - C1745 * C2241) *
                C52324 +
            (C29380 - C29381 + C29382 - C29383 + C29384 - C29385) * C52459 +
            (C29890 - C29891 + C29892 - C29893 + C29894 - C29895) * C82679) *
               C39819 +
           ((C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C52458 +
            (C2328 - C2329 + C2330 - C2331 + C2332 - C2333) * C52324 +
            (C54377 - C54378 + C54379 - C54380 + C54381 - C54382) * C52459 +
            (C55022 - C55023 + C55024 - C55025 + C55026 - C55027) * C82679) *
               C82533) *
              C1149 +
          (((C29381 - C29380 + C29383 - C29382 + C29385 - C29384) * C52458 +
            (C29891 - C29890 + C29893 - C29892 + C29895 - C29894) * C52324 +
            (C29393 - C29392 + C29395 - C29394 + C29397 - C29396) * C52459 +
            (C29897 - C29896 + C29899 - C29898 + C29901 - C29900) * C82679) *
               C39819 +
           ((C54378 - C54377 + C54380 - C54379 + C54382 - C54381) * C52458 +
            (C55023 - C55022 + C55025 - C55024 + C55027 - C55026) * C52324 +
            (C1743 * C4109 - C82931 * C4199 + C1744 * C4975 - C82916 * C5061 +
             C1745 * C16746 - C82893 * C16828) *
                C52459 +
            (C1743 * C4684 - C82931 * C4766 + C1744 * C5455 - C82916 * C5535 +
             C1745 * C17214 - C82893 * C17292) *
                C82679) *
               C82533) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C52458 * C240 - C52892 * C102 - C52458 * C497 + C52324 * C608 +
            C52459 * C1265 - C52893 * C1155 - C52459 * C1463 + C82679 * C1566) *
               C82581 * C82937 +
           (C52931 + C52932) * C82581 * C82927 +
           (C52933 + C52934) * C82581 * C82911 +
           (C52935 + C52936) * C82581 * C82862) *
              C1149 -
          ((C52459 * C4302 - C52893 * C4111 - C52459 * C4686 + C82679 * C4857 +
            C52458 * C1268 - C52892 * C1152 - C52458 * C1466 + C52324 * C1563) *
               C82581 * C82862 +
           (C52459 * C4301 - C52893 * C4110 - C52459 * C4685 + C82679 * C4856 +
            C52458 * C1267 - C52892 * C1153 - C52458 * C1465 + C52324 * C1564) *
               C82581 * C82911 +
           (C52459 * C4300 - C52893 * C4109 - C52459 * C4684 + C82679 * C4855 +
            C52458 * C1266 - C52892 * C1154 - C52458 * C1464 + C52324 * C1565) *
               C82581 * C82927 +
           (C52459 * C4299 - C52893 * C4108 - C52459 * C4683 + C82679 * C4854 +
            C52458 * C1265 - C52892 * C1155 - C52458 * C1463 + C52324 * C1566) *
               C82581 * C82937) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C52458 * C240 - C52892 * C102 - C52458 * C497 + C52324 * C608 +
             C52459 * C1265 - C52893 * C1155 - C52459 * C1463 +
             C82679 * C1566) *
                C82931 +
            (C56084 + C56085) * C82916 + (C56086 + C56087) * C82893) *
               C39819 +
           ((C52931 + C52932) * C82931 + (C55150 + C55151) * C82916 +
            (C55152 + C55153) * C82893) *
               C82533) *
              C1149 -
          (((C52459 * C16906 - C52893 * C16746 - C52459 * C17214 +
             C82679 * C17368 + C52458 * C3531 - C52892 * C3344 -
             C52458 * C3863 + C52324 * C4027) *
                C82893 +
            (C52459 * C5141 - C52893 * C4975 - C52459 * C5455 + C82679 * C5612 +
             C52458 * C3528 - C52892 * C3347 - C52458 * C3860 +
             C52324 * C4028) *
                C82916 +
            (C52459 * C4300 - C52893 * C4109 - C52459 * C4684 + C82679 * C4855 +
             C52458 * C1266 - C52892 * C1154 - C52458 * C1464 +
             C52324 * C1565) *
                C82931) *
               C82533 +
           ((C52459 * C16905 - C52893 * C16745 - C52459 * C17213 +
             C82679 * C17367 + C52458 * C3530 - C52892 * C3345 -
             C52458 * C3862 + C52324 * C4029) *
                C82893 +
            (C52459 * C5140 - C52893 * C4976 - C52459 * C5454 + C82679 * C5613 +
             C52458 * C3527 - C52892 * C3348 - C52458 * C3859 +
             C52324 * C4030) *
                C82916 +
            (C52459 * C4299 - C52893 * C4108 - C52459 * C4683 + C82679 * C4854 +
             C52458 * C1265 - C52892 * C1155 - C52458 * C1463 +
             C52324 * C1566) *
                C82931) *
               C39819) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6510 * C108 - C6511 * C102 - C6510 * C109 + C6504 * C120 +
            C6512 * C110 - C6513 * C103 - C6512 * C111 + C6505 * C121 +
            C6514 * C112 - C6515 * C104 - C6514 * C113 + C6506 * C122 +
            C6516 * C114 - C6517 * C105 - C6516 * C115 + C82862 * C123) *
               C82592 * C82863 +
           (C6510 * C704 - C6511 * C695 - C6510 * C705 + C6504 * C710 +
            C6512 * C702 - C6513 * C694 - C6512 * C703 + C6505 * C709 +
            C6514 * C700 - C6515 * C693 - C6514 * C701 + C6506 * C708 +
            C6516 * C698 - C6517 * C692 - C6516 * C699 + C82862 * C707) *
               C82592 * C82639) *
              C82938 * C82939 * C90 -
          ((C6516 * C696 - C6517 * C691 - C6516 * C697 + C82862 * C706 +
            C6514 * C698 - C6515 * C692 - C6514 * C699 + C6506 * C707 +
            C6512 * C700 - C6513 * C693 - C6512 * C701 + C6505 * C708 +
            C6510 * C702 - C6511 * C694 - C6510 * C703 + C6504 * C709) *
               C82592 * C82639 +
           (C6516 * C116 - C6517 * C106 - C6516 * C117 + C82862 * C124 +
            C6514 * C114 - C6515 * C105 - C6514 * C115 + C6506 * C123 +
            C6512 * C112 - C6513 * C104 - C6512 * C113 + C6505 * C122 +
            C6510 * C110 - C6511 * C103 - C6510 * C111 + C6504 * C121) *
               C82592 * C82863) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C80224 * C108 - C19062 * C102 - C80224 * C109 + C82844 * C120 +
            C80205 * C110 - C19064 * C103 - C80205 * C111 + C82533 * C121) *
               C82592 * C19057 +
           (C80224 * C704 - C19062 * C695 - C80224 * C705 + C82844 * C710 +
            C80205 * C702 - C19064 * C694 - C80205 * C703 + C82533 * C709) *
               C82592 * C19058 +
           (C80224 * C1657 - C19062 * C1653 - C80224 * C1658 + C82844 * C1665 +
            C80205 * C1659 - C19064 * C1654 - C80205 * C1660 + C82533 * C1666) *
               C82592 * C19059 +
           (C80224 * C2532 - C19062 * C2527 - C80224 * C2533 + C82844 * C2536 +
            C80205 * C2530 - C19064 * C2526 - C80205 * C2531 + C82533 * C2535) *
               C82592 * C82871) *
              C82938 * C82939 * C90 -
          ((C80205 * C2528 - C19064 * C2525 - C80205 * C2529 + C82533 * C2534 +
            C80224 * C2530 - C19062 * C2526 - C80224 * C2531 + C82844 * C2535) *
               C82592 * C82871 +
           (C80205 * C1661 - C19064 * C1655 - C80205 * C1662 + C82533 * C1667 +
            C80224 * C1659 - C19062 * C1654 - C80224 * C1660 + C82844 * C1666) *
               C82592 * C19059 +
           (C80205 * C700 - C19064 * C693 - C80205 * C701 + C82533 * C708 +
            C80224 * C702 - C19062 * C694 - C80224 * C703 + C82844 * C709) *
               C82592 * C19058 +
           (C80205 * C112 - C19064 * C104 - C80205 * C113 + C82533 * C122 +
            C80224 * C110 - C19062 * C103 - C80224 * C111 + C82844 * C121) *
               C82592 * C19057) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
               C6510 +
           (C82863 * C175 - C6584 * C109 + C82639 * C758 - C6585 * C705) *
               C6504 +
           (C6587 - C6588 + C6589 - C6590) * C6512 +
           (C6591 - C6592 + C6593 - C6594) * C6505 +
           (C6595 - C6596 + C6597 - C6598) * C6514 +
           (C6599 - C6600 + C6601 - C6602) * C6506 +
           (C6603 - C6604 + C6605 - C6606) * C6516 +
           (C6607 - C6608 + C6609 - C6610) * C82862) *
              C82592 * C82938 * C82939 * C90 +
          ((C6588 - C6587 + C6590 - C6589) * C6510 +
           (C6592 - C6591 + C6594 - C6593) * C6504 +
           (C6596 - C6595 + C6598 - C6597) * C6512 +
           (C6600 - C6599 + C6602 - C6601) * C6505 +
           (C6604 - C6603 + C6606 - C6605) * C6514 +
           (C6608 - C6607 + C6610 - C6609) * C6506 +
           (C6584 * C106 - C82863 * C173 + C6585 * C691 - C82639 * C757) *
               C6516 +
           (C6584 * C117 - C82863 * C179 + C6585 * C697 - C82639 * C762) *
               C82862) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C19057 * C169 - C19131 * C102 + C19058 * C753 - C19132 * C695 +
            C19059 * C1746 - C19133 * C1653 + C82871 * C2653 - C19134 * C2527) *
               C80224 +
           (C19057 * C175 - C19131 * C109 + C19058 * C758 - C19132 * C705 +
            C19059 * C1750 - C19133 * C1658 + C82871 * C2656 - C19134 * C2533) *
               C82844 +
           (C19136 - C19137 + C19138 - C19139 + C19140 - C19141 + C19142 -
            C19143) *
               C80205 +
           (C19144 - C19145 + C19146 - C19147 + C19148 - C19149 + C19150 -
            C19151) *
               C82533) *
              C82592 * C82938 * C82939 * C90 +
          ((C19137 - C19136 + C19139 - C19138 + C19141 - C19140 + C19143 -
            C19142) *
               C80224 +
           (C19145 - C19144 + C19147 - C19146 + C19149 - C19148 + C19151 -
            C19150) *
               C82844 +
           (C19131 * C104 - C19057 * C171 + C19132 * C693 - C19058 * C755 +
            C19133 * C1655 - C19059 * C1748 + C19134 * C2525 - C82871 * C2655) *
               C80205 +
           (C19131 * C113 - C19057 * C177 + C19132 * C701 - C19058 * C760 +
            C19133 * C1662 - C19059 * C1752 + C19134 * C2529 - C82871 * C2658) *
               C82533) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[60] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C6510 +
                      (C82592 * C246 - C239 * C109) * C6504 +
                      (C253 - C254) * C6512 + (C255 - C256) * C6505 +
                      (C257 - C258) * C6514 + (C259 - C260) * C6506 +
                      (C261 - C262) * C6516 + (C263 - C264) * C82862) *
                         C82863 +
                     ((C2740 - C2741) * C6510 + (C2742 - C2743) * C6504 +
                      (C1861 - C1862) * C6512 + (C1863 - C1864) * C6505 +
                      (C1865 - C1866) * C6514 + (C1867 - C1868) * C6506 +
                      (C6677 - C6678) * C6516 + (C6679 - C6680) * C82862) *
                         C82639) *
                        C82938 * C82939 * C90 +
                    (((C254 - C253) * C6510 + (C256 - C255) * C6504 +
                      (C258 - C257) * C6512 + (C260 - C259) * C6505 +
                      (C262 - C261) * C6514 + (C264 - C263) * C6506 +
                      (C266 - C265) * C6516 + (C268 - C267) * C82862) *
                         C82863 +
                     ((C1862 - C1861) * C6510 + (C1864 - C1863) * C6504 +
                      (C1866 - C1865) * C6512 + (C1868 - C1867) * C6505 +
                      (C6678 - C6677) * C6514 + (C6680 - C6679) * C6506 +
                      (C239 * C691 - C82592 * C809) * C6516 +
                      (C239 * C697 - C82592 * C814) * C82862) *
                         C82639) *
                        C82938 * C82939 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C80224 +
                      (C82592 * C246 - C239 * C109) * C82844 +
                      (C253 - C254) * C80205 + (C255 - C256) * C82533) *
                         C19057 +
                     ((C2740 - C2741) * C80224 + (C2742 - C2743) * C82844 +
                      (C1861 - C1862) * C80205 + (C1863 - C1864) * C82533) *
                         C19058 +
                     ((C2744 - C2745) * C80224 + (C2746 - C2747) * C82844 +
                      (C1869 - C1870) * C80205 + (C1871 - C1872) * C82533) *
                         C19059 +
                     ((C15952 - C15953) * C80224 + (C15954 - C15955) * C82844 +
                      (C19218 - C19219) * C80205 + (C19220 - C19221) * C82533) *
                         C82871) *
                        C82938 * C82939 * C90 +
                    (((C254 - C253) * C80224 + (C256 - C255) * C82844 +
                      (C258 - C257) * C80205 + (C260 - C259) * C82533) *
                         C19057 +
                     ((C1862 - C1861) * C80224 + (C1864 - C1863) * C82844 +
                      (C1866 - C1865) * C80205 + (C1868 - C1867) * C82533) *
                         C19058 +
                     ((C1870 - C1869) * C80224 + (C1872 - C1871) * C82844 +
                      (C1874 - C1873) * C80205 + (C1876 - C1875) * C82533) *
                         C19059 +
                     ((C19219 - C19218) * C80224 + (C19221 - C19220) * C82844 +
                      (C239 * C2525 - C82592 * C2735) * C80205 +
                      (C239 * C2529 - C82592 * C2738) * C82533) *
                         C82871) *
                        C82938 * C82939 * C91)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6504 * C108 - C6510 * C102 + C6505 * C110 - C6512 * C103 +
            C6506 * C112 - C6514 * C104 + C82862 * C114 - C6516 * C105) *
               C6584 +
           (C6504 * C316 - C6510 * C310 + C6505 * C317 - C6512 * C311 +
            C6506 * C318 - C6514 * C312 + C82862 * C319 - C6516 * C313) *
               C82863 +
           (C6504 * C704 - C6510 * C695 + C6505 * C702 - C6512 * C694 +
            C6506 * C700 - C6514 * C693 + C82862 * C698 - C6516 * C692) *
               C6585 +
           (C6504 * C862 - C6510 * C857 + C6505 * C863 - C6512 * C858 +
            C6506 * C864 - C6514 * C859 + C82862 * C865 - C6516 * C860) *
               C82639) *
              C82592 * C82938 * C82939 * C90 +
          ((C6510 * C103 - C6504 * C110 + C6512 * C104 - C6505 * C112 +
            C6514 * C105 - C6506 * C114 + C6516 * C106 - C82862 * C116) *
               C6584 +
           (C6510 * C311 - C6504 * C317 + C6512 * C312 - C6505 * C318 +
            C6514 * C313 - C6506 * C319 + C6516 * C314 - C82862 * C320) *
               C82863 +
           (C6510 * C694 - C6504 * C702 + C6512 * C693 - C6505 * C700 +
            C6514 * C692 - C6506 * C698 + C6516 * C691 - C82862 * C696) *
               C6585 +
           (C6510 * C858 - C6504 * C863 + C6512 * C859 - C6505 * C864 +
            C6514 * C860 - C6506 * C865 + C6516 * C861 - C82862 * C866) *
               C82639) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
               C19131 +
           (C82844 * C316 - C80224 * C310 + C82533 * C317 - C80205 * C311) *
               C19057 +
           (C82844 * C704 - C80224 * C695 + C82533 * C702 - C80205 * C694) *
               C19132 +
           (C82844 * C862 - C80224 * C857 + C82533 * C863 - C80205 * C858) *
               C19058 +
           (C82844 * C1657 - C80224 * C1653 + C82533 * C1659 - C80205 * C1654) *
               C19133 +
           (C82844 * C1954 - C80224 * C1950 + C82533 * C1955 - C80205 * C1951) *
               C19059 +
           (C82844 * C2532 - C80224 * C2527 + C82533 * C2530 - C80205 * C2526) *
               C19134 +
           (C82844 * C2824 - C80224 * C2821 + C82533 * C2825 - C80205 * C2822) *
               C82871) *
              C82592 * C82938 * C82939 * C90 +
          ((C80224 * C103 - C82844 * C110 + C80205 * C104 - C82533 * C112) *
               C19131 +
           (C80224 * C311 - C82844 * C317 + C80205 * C312 - C82533 * C318) *
               C19057 +
           (C80224 * C694 - C82844 * C702 + C80205 * C693 - C82533 * C700) *
               C19132 +
           (C80224 * C858 - C82844 * C863 + C80205 * C859 - C82533 * C864) *
               C19058 +
           (C80224 * C1654 - C82844 * C1659 + C80205 * C1655 - C82533 * C1661) *
               C19133 +
           (C80224 * C1951 - C82844 * C1955 + C80205 * C1952 - C82533 * C1956) *
               C19059 +
           (C80224 * C2526 - C82844 * C2530 + C80205 * C2525 - C82533 * C2528) *
               C19134 +
           (C80224 * C2822 - C82844 * C2825 + C80205 * C2823 - C82533 * C2826) *
               C82871) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6584 * C169 - C6812 * C102 - C6584 * C310 + C82863 * C365 +
            C6585 * C753 - C6813 * C695 - C6585 * C857 + C82639 * C913) *
               C6504 +
           (C6851 + C6852) * C6505 + (C6853 + C6854) * C6506 +
           (C6855 + C6856) * C82862) *
              C82592 * C82938 * C82939 * C90 -
          ((C6585 * C757 - C6813 * C691 - C6585 * C861 + C82639 * C909 +
            C6584 * C173 - C6812 * C106 - C6584 * C314 + C82863 * C369) *
               C82862 +
           (C6856 + C6855) * C6506 + (C6854 + C6853) * C6505 +
           (C6852 + C6851) * C6504) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C19131 * C169 - C19353 * C102 - C19131 * C310 + C19057 * C365 +
            C19132 * C753 - C19354 * C695 - C19132 * C857 + C19058 * C913 +
            C19133 * C1746 - C19355 * C1653 - C19133 * C1950 + C19059 * C2035 +
            C19134 * C2653 - C19356 * C2527 - C19134 * C2821 + C82871 * C2927) *
               C82844 +
           (C19382 + C19383 + C19384 + C19385) * C82533) *
              C82592 * C82938 * C82939 * C90 -
          ((C19134 * C2655 - C19356 * C2525 - C19134 * C2823 + C82871 * C2925 +
            C19133 * C1748 - C19355 * C1655 - C19133 * C1952 + C19059 * C2037 +
            C19132 * C755 - C19354 * C693 - C19132 * C859 + C19058 * C911 +
            C19131 * C171 - C19353 * C104 - C19131 * C312 + C19057 * C367) *
               C82533 +
           (C19385 + C19384 + C19383 + C19382) * C82844) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[60] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C6584 +
                      (C82592 * C441 - C239 * C310) * C82863 +
                      (C2740 - C2741) * C6585 + (C3006 - C3007) * C82639) *
                         C6504 +
                     ((C253 - C254) * C6584 + (C448 - C449) * C82863 +
                      (C1861 - C1862) * C6585 + (C2160 - C2161) * C82639) *
                         C6505 +
                     ((C257 - C258) * C6584 + (C450 - C451) * C82863 +
                      (C1865 - C1866) * C6585 + (C2164 - C2165) * C82639) *
                         C6506 +
                     ((C261 - C262) * C6584 + (C452 - C453) * C82863 +
                      (C6677 - C6678) * C6585 + (C6923 - C6924) * C82639) *
                         C82862) *
                        C82938 * C82939 * C90 +
                    (((C254 - C253) * C6584 + (C449 - C448) * C82863 +
                      (C1862 - C1861) * C6585 + (C2161 - C2160) * C82639) *
                         C6504 +
                     ((C258 - C257) * C6584 + (C451 - C450) * C82863 +
                      (C1866 - C1865) * C6585 + (C2165 - C2164) * C82639) *
                         C6505 +
                     ((C262 - C261) * C6584 + (C453 - C452) * C82863 +
                      (C6678 - C6677) * C6585 + (C6924 - C6923) * C82639) *
                         C6506 +
                     ((C266 - C265) * C6584 + (C455 - C454) * C82863 +
                      (C239 * C691 - C82592 * C809) * C6585 +
                      (C239 * C861 - C82592 * C960) * C82639) *
                         C82862) *
                        C82938 * C82939 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C19131 +
                      (C82592 * C441 - C239 * C310) * C19057 +
                      (C2740 - C2741) * C19132 + (C3006 - C3007) * C19058 +
                      (C2744 - C2745) * C19133 + (C3008 - C3009) * C19059 +
                      (C15952 - C15953) * C19134 + (C16106 - C16107) * C82871) *
                         C82844 +
                     ((C253 - C254) * C19131 + (C448 - C449) * C19057 +
                      (C1861 - C1862) * C19132 + (C2160 - C2161) * C19058 +
                      (C1869 - C1870) * C19133 + (C2162 - C2163) * C19059 +
                      (C19218 - C19219) * C19134 + (C19452 - C19453) * C82871) *
                         C82533) *
                        C82938 * C82939 * C90 +
                    (((C254 - C253) * C19131 + (C449 - C448) * C19057 +
                      (C1862 - C1861) * C19132 + (C2161 - C2160) * C19058 +
                      (C1870 - C1869) * C19133 + (C2163 - C2162) * C19059 +
                      (C19219 - C19218) * C19134 + (C19453 - C19452) * C82871) *
                         C82844 +
                     ((C258 - C257) * C19131 + (C451 - C450) * C19057 +
                      (C1866 - C1865) * C19132 + (C2165 - C2164) * C19058 +
                      (C1874 - C1873) * C19133 + (C2167 - C2166) * C19059 +
                      (C239 * C2525 - C82592 * C2735) * C19134 +
                      (C239 * C2823 - C82592 * C3004) * C82871) *
                         C82533) *
                        C82938 * C82939 * C91)) /
                      (p * q * std::sqrt(p + q));
    d2eezx[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6504 * C108 - C6510 * C102 + C6505 * C110 - C6512 * C103 +
             C6506 * C112 - C6514 * C104 + C82862 * C114 - C6516 * C105) *
                C239 +
            (C6504 * C503 - C6510 * C497 + C6505 * C504 - C6512 * C498 +
             C6506 * C505 - C6514 * C499 + C82862 * C506 - C6516 * C500) *
                C82592) *
               C82863 +
           ((C6504 * C704 - C6510 * C695 + C6505 * C702 - C6512 * C694 +
             C6506 * C700 - C6514 * C693 + C82862 * C698 - C6516 * C692) *
                C239 +
            (C6504 * C1008 - C6510 * C1003 + C6505 * C1009 - C6512 * C1004 +
             C6506 * C1010 - C6514 * C1005 + C82862 * C1011 - C6516 * C1006) *
                C82592) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C6510 * C103 - C6504 * C110 + C6512 * C104 - C6505 * C112 +
             C6514 * C105 - C6506 * C114 + C6516 * C106 - C82862 * C116) *
                C239 +
            (C6510 * C498 - C6504 * C504 + C6512 * C499 - C6505 * C505 +
             C6514 * C500 - C6506 * C506 + C6516 * C501 - C82862 * C507) *
                C82592) *
               C82863 +
           ((C6510 * C694 - C6504 * C702 + C6512 * C693 - C6505 * C700 +
             C6514 * C692 - C6506 * C698 + C6516 * C691 - C82862 * C696) *
                C239 +
            (C6510 * C1004 - C6504 * C1009 + C6512 * C1005 - C6505 * C1010 +
             C6514 * C1006 - C6506 * C1011 + C6516 * C1007 - C82862 * C1012) *
                C82592) *
               C82639) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C239 +
            (C82844 * C503 - C80224 * C497 + C82533 * C504 - C80205 * C498) *
                C82592) *
               C19057 +
           ((C82844 * C704 - C80224 * C695 + C82533 * C702 - C80205 * C694) *
                C239 +
            (C82844 * C1008 - C80224 * C1003 + C82533 * C1009 -
             C80205 * C1004) *
                C82592) *
               C19058 +
           ((C82844 * C1657 - C80224 * C1653 + C82533 * C1659 -
             C80205 * C1654) *
                C239 +
            (C82844 * C2245 - C80224 * C2241 + C82533 * C2246 -
             C80205 * C2242) *
                C82592) *
               C19059 +
           ((C82844 * C2532 - C80224 * C2527 + C82533 * C2530 -
             C80205 * C2526) *
                C239 +
            (C82844 * C3086 - C80224 * C3083 + C82533 * C3087 -
             C80205 * C3084) *
                C82592) *
               C82871) *
              C82938 * C82939 * C90 +
          (((C80224 * C103 - C82844 * C110 + C80205 * C104 - C82533 * C112) *
                C239 +
            (C80224 * C498 - C82844 * C504 + C80205 * C499 - C82533 * C505) *
                C82592) *
               C19057 +
           ((C80224 * C694 - C82844 * C702 + C80205 * C693 - C82533 * C700) *
                C239 +
            (C80224 * C1004 - C82844 * C1009 + C80205 * C1005 -
             C82533 * C1010) *
                C82592) *
               C19058 +
           ((C80224 * C1654 - C82844 * C1659 + C80205 * C1655 -
             C82533 * C1661) *
                C239 +
            (C80224 * C2242 - C82844 * C2246 + C80205 * C2243 -
             C82533 * C2247) *
                C82592) *
               C19059 +
           ((C80224 * C2526 - C82844 * C2530 + C80205 * C2525 -
             C82533 * C2528) *
                C239 +
            (C80224 * C3084 - C82844 * C3087 + C80205 * C3085 -
             C82533 * C3088) *
                C82592) *
               C82871) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C239 +
            (C82863 * C551 - C6584 * C497 + C82639 * C1055 - C6585 * C1003) *
                C82592) *
               C6504 +
           ((C6587 - C6588 + C6589 - C6590) * C239 +
            (C7057 - C7058 + C7059 - C7060) * C82592) *
               C6505 +
           ((C6595 - C6596 + C6597 - C6598) * C239 +
            (C7061 - C7062 + C7063 - C7064) * C82592) *
               C6506 +
           ((C6603 - C6604 + C6605 - C6606) * C239 +
            (C7065 - C7066 + C7067 - C7068) * C82592) *
               C82862) *
              C82938 * C82939 * C90 +
          (((C6588 - C6587 + C6590 - C6589) * C239 +
            (C7058 - C7057 + C7060 - C7059) * C82592) *
               C6504 +
           ((C6596 - C6595 + C6598 - C6597) * C239 +
            (C7062 - C7061 + C7064 - C7063) * C82592) *
               C6505 +
           ((C6604 - C6603 + C6606 - C6605) * C239 +
            (C7066 - C7065 + C7068 - C7067) * C82592) *
               C6506 +
           ((C6584 * C106 - C82863 * C173 + C6585 * C691 - C82639 * C757) *
                C239 +
            (C6584 * C501 - C82863 * C555 + C6585 * C1007 - C82639 * C1059) *
                C82592) *
               C82862) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19057 * C169 - C19131 * C102 + C19058 * C753 - C19132 * C695 +
             C19059 * C1746 - C19133 * C1653 + C82871 * C2653 -
             C19134 * C2527) *
                C239 +
            (C19057 * C551 - C19131 * C497 + C19058 * C1055 - C19132 * C1003 +
             C19059 * C2323 - C19133 * C2241 + C82871 * C3175 -
             C19134 * C3083) *
                C82592) *
               C82844 +
           ((C19136 - C19137 + C19138 - C19139 + C19140 - C19141 + C19142 -
             C19143) *
                C239 +
            (C19586 - C19587 + C19588 - C19589 + C19590 - C19591 + C19592 -
             C19593) *
                C82592) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C19137 - C19136 + C19139 - C19138 + C19141 - C19140 + C19143 -
             C19142) *
                C239 +
            (C19587 - C19586 + C19589 - C19588 + C19591 - C19590 + C19593 -
             C19592) *
                C82592) *
               C82844 +
           ((C19131 * C104 - C19057 * C171 + C19132 * C693 - C19058 * C755 +
             C19133 * C1655 - C19059 * C1748 + C19134 * C2525 -
             C82871 * C2655) *
                C239 +
            (C19131 * C499 - C19057 * C553 + C19132 * C1005 - C19058 * C1057 +
             C19133 * C2243 - C19059 * C2325 + C19134 * C3085 -
             C82871 * C3177) *
                C82592) *
               C82533) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82863 +
            C3268 * C82639) *
               C6504 +
           (C7135 + C7136) * C6505 + (C7137 + C7138) * C6506 +
           (C7139 + C7147) * C82862) *
              C82938 * C82939 * C90 -
          (((C239 * C809 - C607 * C691 - C239 * C1007 + C82592 * C1102) *
                C82639 +
            C642 * C82863) *
               C82862 +
           (C7147 + C7139) * C6506 + (C7138 + C7137) * C6505 +
           (C7136 + C7135) * C6504) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C19057 +
            C3268 * C19058 + C3269 * C19059 + C16260 * C82871) *
               C82844 +
           (C19660 + C19661 + C19662 + C19670) * C82533) *
              C82938 * C82939 * C90 -
          (((C239 * C2735 - C607 * C2525 - C239 * C3085 + C82592 * C3252) *
                C82871 +
            C2447 * C19059 + C2446 * C19058 + C640 * C19057) *
               C82533 +
           (C19670 + C19662 + C19661 + C19660) * C82844) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexx[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6510 * C108 - C6511 * C102 - C6510 * C109 + C6504 * C120 +
            C6512 * C110 - C6513 * C103 - C6512 * C111 + C6505 * C121 +
            C6514 * C112 - C6515 * C104 - C6514 * C113 + C6506 * C122 +
            C6516 * C114 - C6517 * C105 - C6516 * C115 + C82862 * C123) *
               C82592 * C82863 +
           (C7238 + C7239 + C7240 + C7241) * C82592 * C82639) *
              C82938 * C688 -
          ((C6516 * C1663 - C6517 * C1656 - C6516 * C1664 + C82862 * C1668 +
            C6514 * C1661 - C6515 * C1655 - C6514 * C1662 + C6506 * C1667 +
            C6512 * C1659 - C6513 * C1654 - C6512 * C1660 + C6505 * C1666 +
            C6510 * C1657 - C6511 * C1653 - C6510 * C1658 + C6504 * C1665) *
               C82592 * C82639 +
           (C7241 + C7240 + C7239 + C7238) * C82592 * C82863) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C80224 * C108 - C19062 * C102 - C80224 * C109 + C82844 * C120 +
            C80205 * C110 - C19064 * C103 - C80205 * C111 + C82533 * C121) *
               C82592 * C19057 +
           (C19773 + C19774) * C82592 * C19058 +
           (C19775 + C19776) * C82592 * C19059 +
           (C19777 + C19778) * C82592 * C82871) *
              C82938 * C688 -
          ((C80205 * C15411 - C19064 * C15408 - C80205 * C15412 +
            C82533 * C15414 + C80224 * C15409 - C19062 * C15407 -
            C80224 * C15410 + C82844 * C15413) *
               C82592 * C82871 +
           (C19778 + C19777) * C82592 * C19059 +
           (C19776 + C19775) * C82592 * C19058 +
           (C19774 + C19773) * C82592 * C19057) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
               C6510 +
           (C82863 * C175 - C6584 * C109 + C82639 * C758 - C6585 * C705) *
               C6504 +
           (C6587 - C6588 + C6589 - C6590) * C6512 +
           (C6591 - C6592 + C6593 - C6594) * C6505 +
           (C6595 - C6596 + C6597 - C6598) * C6514 +
           (C6599 - C6600 + C6601 - C6602) * C6506 +
           (C6603 - C6604 + C6605 - C6606) * C6516 +
           (C6607 - C6608 + C6609 - C6610) * C82862) *
              C82592 * C82938 * C688 +
          ((C6584 * C695 - C82863 * C753 + C6585 * C1653 - C82639 * C1746) *
               C6510 +
           (C6584 * C705 - C82863 * C758 + C6585 * C1658 - C82639 * C1750) *
               C6504 +
           (C6584 * C694 - C82863 * C754 + C6585 * C1654 - C82639 * C1747) *
               C6512 +
           (C6584 * C703 - C82863 * C759 + C6585 * C1660 - C82639 * C1751) *
               C6505 +
           (C6584 * C693 - C82863 * C755 + C6585 * C1655 - C82639 * C1748) *
               C6514 +
           (C6584 * C701 - C82863 * C760 + C6585 * C1662 - C82639 * C1752) *
               C6506 +
           (C6584 * C692 - C82863 * C756 + C6585 * C1656 - C82639 * C1749) *
               C6516 +
           (C6584 * C699 - C82863 * C761 + C6585 * C1664 - C82639 * C1753) *
               C82862) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C19057 * C169 - C19131 * C102 + C19058 * C753 - C19132 * C695 +
            C19059 * C1746 - C19133 * C1653 + C82871 * C2653 - C19134 * C2527) *
               C80224 +
           (C19057 * C175 - C19131 * C109 + C19058 * C758 - C19132 * C705 +
            C19059 * C1750 - C19133 * C1658 + C82871 * C2656 - C19134 * C2533) *
               C82844 +
           (C19136 - C19137 + C19138 - C19139 + C19140 - C19141 + C19142 -
            C19143) *
               C80205 +
           (C19144 - C19145 + C19146 - C19147 + C19148 - C19149 + C19150 -
            C19151) *
               C82533) *
              C82592 * C82938 * C688 +
          ((C19131 * C695 - C19057 * C753 + C19132 * C1653 - C19058 * C1746 +
            C19133 * C2527 - C19059 * C2653 + C19134 * C15407 -
            C82871 * C15462) *
               C80224 +
           (C19131 * C705 - C19057 * C758 + C19132 * C1658 - C19058 * C1750 +
            C19133 * C2533 - C19059 * C2656 + C19134 * C15410 -
            C82871 * C15464) *
               C82844 +
           (C19131 * C694 - C19057 * C754 + C19132 * C1654 - C19058 * C1747 +
            C19133 * C2526 - C19059 * C2654 + C19134 * C15408 -
            C82871 * C15463) *
               C80205 +
           (C19131 * C703 - C19057 * C759 + C19132 * C1660 - C19058 * C1751 +
            C19133 * C2531 - C19059 * C2657 + C19134 * C15412 -
            C82871 * C15465) *
               C82533) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[61] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C6510 +
                      (C82592 * C246 - C239 * C109) * C6504 +
                      (C253 - C254) * C6512 + (C255 - C256) * C6505 +
                      (C257 - C258) * C6514 + (C259 - C260) * C6506 +
                      (C261 - C262) * C6516 + (C263 - C264) * C82862) *
                         C82863 +
                     ((C2740 - C2741) * C6510 + (C2742 - C2743) * C6504 +
                      (C1861 - C1862) * C6512 + (C1863 - C1864) * C6505 +
                      (C1865 - C1866) * C6514 + (C1867 - C1868) * C6506 +
                      (C6677 - C6678) * C6516 + (C6679 - C6680) * C82862) *
                         C82639) *
                        C82938 * C688 +
                    (((C2741 - C2740) * C6510 + (C2743 - C2742) * C6504 +
                      (C1862 - C1861) * C6512 + (C1864 - C1863) * C6505 +
                      (C1866 - C1865) * C6514 + (C1868 - C1867) * C6506 +
                      (C6678 - C6677) * C6516 + (C6680 - C6679) * C82862) *
                         C82863 +
                     ((C2745 - C2744) * C6510 + (C2747 - C2746) * C6504 +
                      (C1870 - C1869) * C6512 + (C1872 - C1871) * C6505 +
                      (C1874 - C1873) * C6514 + (C1876 - C1875) * C6506 +
                      (C239 * C1656 - C82592 * C1855) * C6516 +
                      (C239 * C1664 - C82592 * C1859) * C82862) *
                         C82639) *
                        C82938 * C689) *
                   C82940) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C80224 +
                      (C82592 * C246 - C239 * C109) * C82844 +
                      (C253 - C254) * C80205 + (C255 - C256) * C82533) *
                         C19057 +
                     ((C2740 - C2741) * C80224 + (C2742 - C2743) * C82844 +
                      (C1861 - C1862) * C80205 + (C1863 - C1864) * C82533) *
                         C19058 +
                     ((C2744 - C2745) * C80224 + (C2746 - C2747) * C82844 +
                      (C1869 - C1870) * C80205 + (C1871 - C1872) * C82533) *
                         C19059 +
                     ((C15952 - C15953) * C80224 + (C15954 - C15955) * C82844 +
                      (C19218 - C19219) * C80205 + (C19220 - C19221) * C82533) *
                         C82871) *
                        C82938 * C688 +
                    (((C2741 - C2740) * C80224 + (C2743 - C2742) * C82844 +
                      (C1862 - C1861) * C80205 + (C1864 - C1863) * C82533) *
                         C19057 +
                     ((C2745 - C2744) * C80224 + (C2747 - C2746) * C82844 +
                      (C1870 - C1869) * C80205 + (C1872 - C1871) * C82533) *
                         C19058 +
                     ((C15953 - C15952) * C80224 + (C15955 - C15954) * C82844 +
                      (C19219 - C19218) * C80205 + (C19221 - C19220) * C82533) *
                         C19059 +
                     ((C15957 - C15956) * C80224 + (C15959 - C15958) * C82844 +
                      (C239 * C15408 - C82592 * C15509) * C80205 +
                      (C239 * C15412 - C82592 * C15511) * C82533) *
                         C82871) *
                        C82938 * C689) *
                   C82940) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6504 * C108 - C6510 * C102 + C6505 * C110 - C6512 * C103 +
            C6506 * C112 - C6514 * C104 + C82862 * C114 - C6516 * C105) *
               C6584 +
           (C6504 * C316 - C6510 * C310 + C6505 * C317 - C6512 * C311 +
            C6506 * C318 - C6514 * C312 + C82862 * C319 - C6516 * C313) *
               C82863 +
           (C7440 - C7441 + C7442 - C7443 + C7444 - C7445 + C7446 - C7447) *
               C6585 +
           (C7448 - C7449 + C7450 - C7451 + C7452 - C7453 + C7454 - C7455) *
               C82639) *
              C82592 * C82938 * C688 +
          ((C7441 - C7440 + C7443 - C7442 + C7445 - C7444 + C7447 - C7446) *
               C6584 +
           (C7449 - C7448 + C7451 - C7450 + C7453 - C7452 + C7455 - C7454) *
               C82863 +
           (C6510 * C1653 - C6504 * C1657 + C6512 * C1654 - C6505 * C1659 +
            C6514 * C1655 - C6506 * C1661 + C6516 * C1656 - C82862 * C1663) *
               C6585 +
           (C6510 * C1950 - C6504 * C1954 + C6512 * C1951 - C6505 * C1955 +
            C6514 * C1952 - C6506 * C1956 + C6516 * C1953 - C82862 * C1957) *
               C82639) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
               C19131 +
           (C82844 * C316 - C80224 * C310 + C82533 * C317 - C80205 * C311) *
               C19057 +
           (C19977 - C19978 + C19979 - C19980) * C19132 +
           (C19981 - C19982 + C19983 - C19984) * C19058 +
           (C19985 - C19986 + C19987 - C19988) * C19133 +
           (C19989 - C19990 + C19991 - C19992) * C19059 +
           (C19993 - C19994 + C19995 - C19996) * C19134 +
           (C19997 - C19998 + C19999 - C20000) * C82871) *
              C82592 * C82938 * C688 +
          ((C19978 - C19977 + C19980 - C19979) * C19131 +
           (C19982 - C19981 + C19984 - C19983) * C19057 +
           (C19986 - C19985 + C19988 - C19987) * C19132 +
           (C19990 - C19989 + C19992 - C19991) * C19058 +
           (C19994 - C19993 + C19996 - C19995) * C19133 +
           (C19998 - C19997 + C20000 - C19999) * C19059 +
           (C80224 * C15407 - C82844 * C15409 + C80205 * C15408 -
            C82533 * C15411) *
               C19134 +
           (C80224 * C15554 - C82844 * C15556 + C80205 * C15555 -
            C82533 * C15557) *
               C82871) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6584 * C169 - C6812 * C102 - C6584 * C310 + C82863 * C365 +
            C6585 * C753 - C6813 * C695 - C6585 * C857 + C82639 * C913) *
               C6504 +
           (C6851 + C6852) * C6505 + (C6853 + C6854) * C6506 +
           (C6855 + C6856) * C82862) *
              C82592 * C82938 * C688 -
          ((C6585 * C1749 - C6813 * C1656 - C6585 * C1953 + C82639 * C2038 +
            C6584 * C756 - C6812 * C692 - C6584 * C860 + C82863 * C910) *
               C82862 +
           (C6585 * C1748 - C6813 * C1655 - C6585 * C1952 + C82639 * C2037 +
            C6584 * C755 - C6812 * C693 - C6584 * C859 + C82863 * C911) *
               C6506 +
           (C6585 * C1747 - C6813 * C1654 - C6585 * C1951 + C82639 * C2036 +
            C6584 * C754 - C6812 * C694 - C6584 * C858 + C82863 * C912) *
               C6505 +
           (C6585 * C1746 - C6813 * C1653 - C6585 * C1950 + C82639 * C2035 +
            C6584 * C753 - C6812 * C695 - C6584 * C857 + C82863 * C913) *
               C6504) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C19131 * C169 - C19353 * C102 - C19131 * C310 + C19057 * C365 +
            C19132 * C753 - C19354 * C695 - C19132 * C857 + C19058 * C913 +
            C19133 * C1746 - C19355 * C1653 - C19133 * C1950 + C19059 * C2035 +
            C19134 * C2653 - C19356 * C2527 - C19134 * C2821 + C82871 * C2927) *
               C82844 +
           (C19382 + C19383 + C19384 + C19385) * C82533) *
              C82592 * C82938 * C688 -
          ((C19134 * C15463 - C19356 * C15408 - C19134 * C15555 +
            C82871 * C15606 + C19133 * C2654 - C19355 * C2526 - C19133 * C2822 +
            C19059 * C2926 + C19132 * C1747 - C19354 * C1654 - C19132 * C1951 +
            C19058 * C2036 + C19131 * C754 - C19353 * C694 - C19131 * C858 +
            C19057 * C912) *
               C82533 +
           (C19134 * C15462 - C19356 * C15407 - C19134 * C15554 +
            C82871 * C15605 + C19133 * C2653 - C19355 * C2527 - C19133 * C2821 +
            C19059 * C2927 + C19132 * C1746 - C19354 * C1653 - C19132 * C1950 +
            C19058 * C2035 + C19131 * C753 - C19353 * C695 - C19131 * C857 +
            C19057 * C913) *
               C82844) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[61] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C6584 +
                      (C82592 * C441 - C239 * C310) * C82863 +
                      (C2740 - C2741) * C6585 + (C3006 - C3007) * C82639) *
                         C6504 +
                     ((C253 - C254) * C6584 + (C448 - C449) * C82863 +
                      (C1861 - C1862) * C6585 + (C2160 - C2161) * C82639) *
                         C6505 +
                     ((C257 - C258) * C6584 + (C450 - C451) * C82863 +
                      (C1865 - C1866) * C6585 + (C2164 - C2165) * C82639) *
                         C6506 +
                     ((C261 - C262) * C6584 + (C452 - C453) * C82863 +
                      (C6677 - C6678) * C6585 + (C6923 - C6924) * C82639) *
                         C82862) *
                        C82938 * C688 +
                    (((C2741 - C2740) * C6584 + (C3007 - C3006) * C82863 +
                      (C2745 - C2744) * C6585 + (C3009 - C3008) * C82639) *
                         C6504 +
                     ((C1862 - C1861) * C6584 + (C2161 - C2160) * C82863 +
                      (C1870 - C1869) * C6585 + (C2163 - C2162) * C82639) *
                         C6505 +
                     ((C1866 - C1865) * C6584 + (C2165 - C2164) * C82863 +
                      (C1874 - C1873) * C6585 + (C2167 - C2166) * C82639) *
                         C6506 +
                     ((C6678 - C6677) * C6584 + (C6924 - C6923) * C82863 +
                      (C239 * C1656 - C82592 * C1855) * C6585 +
                      (C239 * C1953 - C82592 * C2158) * C82639) *
                         C82862) *
                        C82938 * C689) *
                   C82940) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C19131 +
                      (C82592 * C441 - C239 * C310) * C19057 +
                      (C2740 - C2741) * C19132 + (C3006 - C3007) * C19058 +
                      (C2744 - C2745) * C19133 + (C3008 - C3009) * C19059 +
                      (C15952 - C15953) * C19134 + (C16106 - C16107) * C82871) *
                         C82844 +
                     ((C253 - C254) * C19131 + (C448 - C449) * C19057 +
                      (C1861 - C1862) * C19132 + (C2160 - C2161) * C19058 +
                      (C1869 - C1870) * C19133 + (C2162 - C2163) * C19059 +
                      (C19218 - C19219) * C19134 + (C19452 - C19453) * C82871) *
                         C82533) *
                        C82938 * C688 +
                    (((C2741 - C2740) * C19131 + (C3007 - C3006) * C19057 +
                      (C2745 - C2744) * C19132 + (C3009 - C3008) * C19058 +
                      (C15953 - C15952) * C19133 + (C16107 - C16106) * C19059 +
                      (C15957 - C15956) * C19134 + (C16109 - C16108) * C82871) *
                         C82844 +
                     ((C1862 - C1861) * C19131 + (C2161 - C2160) * C19057 +
                      (C1870 - C1869) * C19132 + (C2163 - C2162) * C19058 +
                      (C19219 - C19218) * C19133 + (C19453 - C19452) * C19059 +
                      (C239 * C15408 - C82592 * C15509) * C19134 +
                      (C239 * C15555 - C82592 * C15650) * C82871) *
                         C82533) *
                        C82938 * C689) *
                   C82940) /
                      (p * q * std::sqrt(p + q));
    d2eezx[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6504 * C108 - C6510 * C102 + C6505 * C110 - C6512 * C103 +
             C6506 * C112 - C6514 * C104 + C82862 * C114 - C6516 * C105) *
                C239 +
            (C6504 * C503 - C6510 * C497 + C6505 * C504 - C6512 * C498 +
             C6506 * C505 - C6514 * C499 + C82862 * C506 - C6516 * C500) *
                C82592) *
               C82863 +
           ((C7440 - C7441 + C7442 - C7443 + C7444 - C7445 + C7446 - C7447) *
                C239 +
            (C7654 - C7655 + C7656 - C7657 + C7658 - C7659 + C7660 - C7661) *
                C82592) *
               C82639) *
              C82938 * C688 +
          (((C7441 - C7440 + C7443 - C7442 + C7445 - C7444 + C7447 - C7446) *
                C239 +
            (C7655 - C7654 + C7657 - C7656 + C7659 - C7658 + C7661 - C7660) *
                C82592) *
               C82863 +
           ((C6510 * C1653 - C6504 * C1657 + C6512 * C1654 - C6505 * C1659 +
             C6514 * C1655 - C6506 * C1661 + C6516 * C1656 - C82862 * C1663) *
                C239 +
            (C6510 * C2241 - C6504 * C2245 + C6512 * C2242 - C6505 * C2246 +
             C6514 * C2243 - C6506 * C2247 + C6516 * C2244 - C82862 * C2248) *
                C82592) *
               C82639) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C239 +
            (C82844 * C503 - C80224 * C497 + C82533 * C504 - C80205 * C498) *
                C82592) *
               C19057 +
           ((C19977 - C19978 + C19979 - C19980) * C239 +
            (C20199 - C20200 + C20201 - C20202) * C82592) *
               C19058 +
           ((C19985 - C19986 + C19987 - C19988) * C239 +
            (C20203 - C20204 + C20205 - C20206) * C82592) *
               C19059 +
           ((C19993 - C19994 + C19995 - C19996) * C239 +
            (C20207 - C20208 + C20209 - C20210) * C82592) *
               C82871) *
              C82938 * C688 +
          (((C19978 - C19977 + C19980 - C19979) * C239 +
            (C20200 - C20199 + C20202 - C20201) * C82592) *
               C19057 +
           ((C19986 - C19985 + C19988 - C19987) * C239 +
            (C20204 - C20203 + C20206 - C20205) * C82592) *
               C19058 +
           ((C19994 - C19993 + C19996 - C19995) * C239 +
            (C20208 - C20207 + C20210 - C20209) * C82592) *
               C19059 +
           ((C80224 * C15407 - C82844 * C15409 + C80205 * C15408 -
             C82533 * C15411) *
                C239 +
            (C80224 * C15693 - C82844 * C15695 + C80205 * C15694 -
             C82533 * C15696) *
                C82592) *
               C82871) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C239 +
            (C82863 * C551 - C6584 * C497 + C82639 * C1055 - C6585 * C1003) *
                C82592) *
               C6504 +
           ((C6587 - C6588 + C6589 - C6590) * C239 +
            (C7057 - C7058 + C7059 - C7060) * C82592) *
               C6505 +
           ((C6595 - C6596 + C6597 - C6598) * C239 +
            (C7061 - C7062 + C7063 - C7064) * C82592) *
               C6506 +
           ((C6603 - C6604 + C6605 - C6606) * C239 +
            (C7065 - C7066 + C7067 - C7068) * C82592) *
               C82862) *
              C82938 * C688 +
          (((C6584 * C695 - C82863 * C753 + C6585 * C1653 - C82639 * C1746) *
                C239 +
            (C6584 * C1003 - C82863 * C1055 + C6585 * C2241 - C82639 * C2323) *
                C82592) *
               C6504 +
           ((C6584 * C694 - C82863 * C754 + C6585 * C1654 - C82639 * C1747) *
                C239 +
            (C6584 * C1004 - C82863 * C1056 + C6585 * C2242 - C82639 * C2324) *
                C82592) *
               C6505 +
           ((C6584 * C693 - C82863 * C755 + C6585 * C1655 - C82639 * C1748) *
                C239 +
            (C6584 * C1005 - C82863 * C1057 + C6585 * C2243 - C82639 * C2325) *
                C82592) *
               C6506 +
           ((C6584 * C692 - C82863 * C756 + C6585 * C1656 - C82639 * C1749) *
                C239 +
            (C6584 * C1006 - C82863 * C1058 + C6585 * C2244 - C82639 * C2326) *
                C82592) *
               C82862) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19057 * C169 - C19131 * C102 + C19058 * C753 - C19132 * C695 +
             C19059 * C1746 - C19133 * C1653 + C82871 * C2653 -
             C19134 * C2527) *
                C239 +
            (C19057 * C551 - C19131 * C497 + C19058 * C1055 - C19132 * C1003 +
             C19059 * C2323 - C19133 * C2241 + C82871 * C3175 -
             C19134 * C3083) *
                C82592) *
               C82844 +
           ((C19136 - C19137 + C19138 - C19139 + C19140 - C19141 + C19142 -
             C19143) *
                C239 +
            (C19586 - C19587 + C19588 - C19589 + C19590 - C19591 + C19592 -
             C19593) *
                C82592) *
               C82533) *
              C82938 * C688 +
          (((C19131 * C695 - C19057 * C753 + C19132 * C1653 - C19058 * C1746 +
             C19133 * C2527 - C19059 * C2653 + C19134 * C15407 -
             C82871 * C15462) *
                C239 +
            (C19131 * C1003 - C19057 * C1055 + C19132 * C2241 - C19058 * C2323 +
             C19133 * C3083 - C19059 * C3175 + C19134 * C15693 -
             C82871 * C15739) *
                C82592) *
               C82844 +
           ((C19131 * C694 - C19057 * C754 + C19132 * C1654 - C19058 * C1747 +
             C19133 * C2526 - C19059 * C2654 + C19134 * C15408 -
             C82871 * C15463) *
                C239 +
            (C19131 * C1004 - C19057 * C1056 + C19132 * C2242 - C19058 * C2324 +
             C19133 * C3084 - C19059 * C3176 + C19134 * C15694 -
             C82871 * C15740) *
                C82592) *
               C82533) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82863 +
            C3268 * C82639) *
               C6504 +
           (C7135 + C7136) * C6505 + (C7137 + C7138) * C6506 +
           (C7139 + C7147) * C82862) *
              C82938 * C688 -
          (((C239 * C1855 - C607 * C1656 - C239 * C2244 + C82592 * C2416) *
                C82639 +
            C7146 * C82863) *
               C82862 +
           (C2447 * C82639 + C2446 * C82863) * C6506 +
           (C2445 * C82639 + C2444 * C82863) * C6505 +
           (C3269 * C82639 + C3268 * C82863) * C6504) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C19057 +
            C3268 * C19058 + C3269 * C19059 + C16260 * C82871) *
               C82844 +
           (C19660 + C19661 + C19662 + C19670) * C82533) *
              C82938 * C688 -
          (((C239 * C15509 - C607 * C15408 - C239 * C15694 + C82592 * C15784) *
                C82871 +
            C19669 * C19059 + C2445 * C19058 + C2444 * C19057) *
               C82533 +
           (C16261 * C82871 + C16260 * C19059 + C3269 * C19058 +
            C3268 * C19057) *
               C82844) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[62] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6510 * C108 - C6511 * C102 - C6510 * C109 + C6504 * C120 +
            C6512 * C110 - C6513 * C103 - C6512 * C111 + C6505 * C121 +
            C6514 * C112 - C6515 * C104 - C6514 * C113 + C6506 * C122 +
            C6516 * C114 - C6517 * C105 - C6516 * C115 + C82862 * C123) *
               C82592 * C82863 +
           (C7238 + C7239 + C7240 + C7241) * C82592 * C82639) *
              C1149 -
          ((C6516 * C7860 - C6517 * C7859 - C6516 * C7861 + C82862 * C7862 +
            C6514 * C3355 - C6515 * C3346 - C6514 * C3356 + C6506 * C3364 +
            C6512 * C3357 - C6513 * C3347 - C6512 * C3358 + C6505 * C3365 +
            C6510 * C3359 - C6511 * C3348 - C6510 * C3360 + C6504 * C3366) *
               C82592 * C82639 +
           (C6516 * C1158 - C6517 * C1152 - C6516 * C1159 + C82862 * C1167 +
            C6514 * C1160 - C6515 * C1153 - C6514 * C1161 + C6506 * C1168 +
            C6512 * C1162 - C6513 * C1154 - C6512 * C1163 + C6505 * C1169 +
            C6510 * C1164 - C6511 * C1155 - C6510 * C1165 + C6504 * C1170) *
               C82592 * C82863) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C80224 * C108 - C19062 * C102 - C80224 * C109 + C82844 * C120 +
            C80205 * C110 - C19064 * C103 - C80205 * C111 + C82533 * C121) *
               C82592 * C19057 +
           (C19773 + C19774) * C82592 * C19058 +
           (C19775 + C19776) * C82592 * C19059 +
           (C19777 + C19778) * C82592 * C82871) *
              C1149 -
          ((C80205 * C20409 - C19064 * C20408 - C80205 * C20410 +
            C82533 * C20411 + C80224 * C16307 - C19062 * C16304 -
            C80224 * C16308 + C82844 * C16310) *
               C82592 * C82871 +
           (C80205 * C3351 - C19064 * C3344 - C80205 * C3352 + C82533 * C3362 +
            C80224 * C3353 - C19062 * C3345 - C80224 * C3354 + C82844 * C3363) *
               C82592 * C19059 +
           (C80205 * C3357 - C19064 * C3347 - C80205 * C3358 + C82533 * C3365 +
            C80224 * C3359 - C19062 * C3348 - C80224 * C3360 + C82844 * C3366) *
               C82592 * C19058 +
           (C80205 * C1162 - C19064 * C1154 - C80205 * C1163 + C82533 * C1169 +
            C80224 * C1164 - C19062 * C1155 - C80224 * C1165 + C82844 * C1170) *
               C82592 * C19057) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[62] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
               C6510 +
           (C82863 * C175 - C6584 * C109 + C82639 * C758 - C6585 * C705) *
               C6504 +
           (C6587 - C6588 + C6589 - C6590) * C6512 +
           (C6591 - C6592 + C6593 - C6594) * C6505 +
           (C6595 - C6596 + C6597 - C6598) * C6514 +
           (C6599 - C6600 + C6601 - C6602) * C6506 +
           (C6603 - C6604 + C6605 - C6606) * C6516 +
           (C6607 - C6608 + C6609 - C6610) * C82862) *
              C82592 * C1149 +
          ((C6584 * C1155 - C82863 * C1213 + C6585 * C3348 - C82639 * C3441) *
               C6510 +
           (C6584 * C1165 - C82863 * C1218 + C6585 * C3360 - C82639 * C3447) *
               C6504 +
           (C6584 * C1154 - C82863 * C1214 + C6585 * C3347 - C82639 * C3443) *
               C6512 +
           (C6584 * C1163 - C82863 * C1219 + C6585 * C3358 - C82639 * C3449) *
               C6505 +
           (C6584 * C1153 - C82863 * C1215 + C6585 * C3346 - C82639 * C3445) *
               C6514 +
           (C6584 * C1161 - C82863 * C1220 + C6585 * C3356 - C82639 * C3451) *
               C6506 +
           (C6584 * C1152 - C82863 * C1216 + C6585 * C7859 - C82639 * C7929) *
               C6516 +
           (C6584 * C1159 - C82863 * C1221 + C6585 * C7861 - C82639 * C7930) *
               C82862) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C19057 * C169 - C19131 * C102 + C19058 * C753 - C19132 * C695 +
            C19059 * C1746 - C19133 * C1653 + C82871 * C2653 - C19134 * C2527) *
               C80224 +
           (C19057 * C175 - C19131 * C109 + C19058 * C758 - C19132 * C705 +
            C19059 * C1750 - C19133 * C1658 + C82871 * C2656 - C19134 * C2533) *
               C82844 +
           (C19136 - C19137 + C19138 - C19139 + C19140 - C19141 + C19142 -
            C19143) *
               C80205 +
           (C19144 - C19145 + C19146 - C19147 + C19148 - C19149 + C19150 -
            C19151) *
               C82533) *
              C82592 * C1149 +
          ((C19131 * C1155 - C19057 * C1213 + C19132 * C3348 - C19058 * C3441 +
            C19133 * C3345 - C19059 * C3442 + C19134 * C16304 -
            C82871 * C16353) *
               C80224 +
           (C19131 * C1165 - C19057 * C1218 + C19132 * C3360 - C19058 * C3447 +
            C19133 * C3354 - C19059 * C3448 + C19134 * C16308 -
            C82871 * C16355) *
               C82844 +
           (C19131 * C1154 - C19057 * C1214 + C19132 * C3347 - C19058 * C3443 +
            C19133 * C3344 - C19059 * C3444 + C19134 * C20408 -
            C82871 * C20478) *
               C80205 +
           (C19131 * C1163 - C19057 * C1219 + C19132 * C3358 - C19058 * C3449 +
            C19133 * C3352 - C19059 * C3450 + C19134 * C20410 -
            C82871 * C20479) *
               C82533) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[62] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C6510 +
                      (C82592 * C246 - C239 * C109) * C6504 +
                      (C253 - C254) * C6512 + (C255 - C256) * C6505 +
                      (C257 - C258) * C6514 + (C259 - C260) * C6506 +
                      (C261 - C262) * C6516 + (C263 - C264) * C82862) *
                         C82863 +
                     ((C2740 - C2741) * C6510 + (C2742 - C2743) * C6504 +
                      (C1861 - C1862) * C6512 + (C1863 - C1864) * C6505 +
                      (C1865 - C1866) * C6514 + (C1867 - C1868) * C6506 +
                      (C6677 - C6678) * C6516 + (C6679 - C6680) * C82862) *
                         C82639) *
                        C1149 +
                    (((C239 * C1155 - C82592 * C1265) * C6510 +
                      (C239 * C1165 - C82592 * C1270) * C6504 +
                      (C239 * C1154 - C82592 * C1266) * C6512 +
                      (C239 * C1163 - C82592 * C1271) * C6505 +
                      (C239 * C1153 - C82592 * C1267) * C6514 +
                      (C239 * C1161 - C82592 * C1272) * C6506 +
                      (C239 * C1152 - C82592 * C1268) * C6516 +
                      (C239 * C1159 - C82592 * C1273) * C82862) *
                         C82863 +
                     ((C239 * C3348 - C82592 * C3527) * C6510 +
                      (C239 * C3360 - C82592 * C3533) * C6504 +
                      (C239 * C3347 - C82592 * C3528) * C6512 +
                      (C239 * C3358 - C82592 * C3534) * C6505 +
                      (C239 * C3346 - C82592 * C3529) * C6514 +
                      (C239 * C3356 - C82592 * C3535) * C6506 +
                      (C239 * C7859 - C82592 * C7997) * C6516 +
                      (C239 * C7861 - C82592 * C7998) * C82862) *
                         C82639) *
                        C1150) *
                   C82939 * C82940) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C80224 +
                      (C82592 * C246 - C239 * C109) * C82844 +
                      (C253 - C254) * C80205 + (C255 - C256) * C82533) *
                         C19057 +
                     ((C2740 - C2741) * C80224 + (C2742 - C2743) * C82844 +
                      (C1861 - C1862) * C80205 + (C1863 - C1864) * C82533) *
                         C19058 +
                     ((C2744 - C2745) * C80224 + (C2746 - C2747) * C82844 +
                      (C1869 - C1870) * C80205 + (C1871 - C1872) * C82533) *
                         C19059 +
                     ((C15952 - C15953) * C80224 + (C15954 - C15955) * C82844 +
                      (C19218 - C19219) * C80205 + (C19220 - C19221) * C82533) *
                         C82871) *
                        C1149 +
                    (((C239 * C1155 - C82592 * C1265) * C80224 +
                      (C239 * C1165 - C82592 * C1270) * C82844 +
                      (C239 * C1154 - C82592 * C1266) * C80205 +
                      (C239 * C1163 - C82592 * C1271) * C82533) *
                         C19057 +
                     ((C239 * C3348 - C82592 * C3527) * C80224 +
                      (C239 * C3360 - C82592 * C3533) * C82844 +
                      (C239 * C3347 - C82592 * C3528) * C80205 +
                      (C239 * C3358 - C82592 * C3534) * C82533) *
                         C19058 +
                     ((C239 * C3345 - C82592 * C3530) * C80224 +
                      (C239 * C3354 - C82592 * C3536) * C82844 +
                      (C239 * C3344 - C82592 * C3531) * C80205 +
                      (C239 * C3352 - C82592 * C3537) * C82533) *
                         C19059 +
                     ((C239 * C16304 - C82592 * C16399) * C80224 +
                      (C239 * C16308 - C82592 * C16401) * C82844 +
                      (C239 * C20408 - C82592 * C20546) * C80205 +
                      (C239 * C20410 - C82592 * C20547) * C82533) *
                         C82871) *
                        C1150) *
                   C82939 * C82940) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[62] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6504 * C108 - C6510 * C102 + C6505 * C110 - C6512 * C103 +
            C6506 * C112 - C6514 * C104 + C82862 * C114 - C6516 * C105) *
               C6584 +
           (C6504 * C316 - C6510 * C310 + C6505 * C317 - C6512 * C311 +
            C6506 * C318 - C6514 * C312 + C82862 * C319 - C6516 * C313) *
               C82863 +
           (C7440 - C7441 + C7442 - C7443 + C7444 - C7445 + C7446 - C7447) *
               C6585 +
           (C7448 - C7449 + C7450 - C7451 + C7452 - C7453 + C7454 - C7455) *
               C82639) *
              C82592 * C1149 +
          ((C6510 * C1155 - C6504 * C1164 + C6512 * C1154 - C6505 * C1162 +
            C6514 * C1153 - C6506 * C1160 + C6516 * C1152 - C82862 * C1158) *
               C6584 +
           (C6510 * C1317 - C6504 * C1322 + C6512 * C1318 - C6505 * C1323 +
            C6514 * C1319 - C6506 * C1324 + C6516 * C1320 - C82862 * C1325) *
               C82863 +
           (C6510 * C3348 - C6504 * C3359 + C6512 * C3347 - C6505 * C3357 +
            C6514 * C3346 - C6506 * C3355 + C6516 * C7859 - C82862 * C7860) *
               C6585 +
           (C6510 * C3613 - C6504 * C3619 + C6512 * C3614 - C6505 * C3620 +
            C6514 * C3615 - C6506 * C3621 + C6516 * C8065 - C82862 * C8066) *
               C82639) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
               C19131 +
           (C82844 * C316 - C80224 * C310 + C82533 * C317 - C80205 * C311) *
               C19057 +
           (C19977 - C19978 + C19979 - C19980) * C19132 +
           (C19981 - C19982 + C19983 - C19984) * C19058 +
           (C19985 - C19986 + C19987 - C19988) * C19133 +
           (C19989 - C19990 + C19991 - C19992) * C19059 +
           (C19993 - C19994 + C19995 - C19996) * C19134 +
           (C19997 - C19998 + C19999 - C20000) * C82871) *
              C82592 * C1149 +
          ((C80224 * C1155 - C82844 * C1164 + C80205 * C1154 - C82533 * C1162) *
               C19131 +
           (C80224 * C1317 - C82844 * C1322 + C80205 * C1318 - C82533 * C1323) *
               C19057 +
           (C80224 * C3348 - C82844 * C3359 + C80205 * C3347 - C82533 * C3357) *
               C19132 +
           (C80224 * C3613 - C82844 * C3619 + C80205 * C3614 - C82533 * C3620) *
               C19058 +
           (C80224 * C3345 - C82844 * C3353 + C80205 * C3344 - C82533 * C3351) *
               C19133 +
           (C80224 * C3616 - C82844 * C3622 + C80205 * C3617 - C82533 * C3623) *
               C19059 +
           (C80224 * C16304 - C82844 * C16307 + C80205 * C20408 -
            C82533 * C20409) *
               C19134 +
           (C80224 * C16445 - C82844 * C16447 + C80205 * C20614 -
            C82533 * C20615) *
               C82871) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[62] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6584 * C169 - C6812 * C102 - C6584 * C310 + C82863 * C365 +
            C6585 * C753 - C6813 * C695 - C6585 * C857 + C82639 * C913) *
               C6504 +
           (C6851 + C6852) * C6505 + (C6853 + C6854) * C6506 +
           (C6855 + C6856) * C82862) *
              C82592 * C1149 -
          ((C6585 * C7929 - C6813 * C7859 - C6585 * C8065 + C82639 * C8133 +
            C6584 * C1216 - C6812 * C1152 - C6584 * C1320 + C82863 * C1370) *
               C82862 +
           (C6585 * C3445 - C6813 * C3346 - C6585 * C3615 + C82639 * C3700 +
            C6584 * C1215 - C6812 * C1153 - C6584 * C1319 + C82863 * C1371) *
               C6506 +
           (C6585 * C3443 - C6813 * C3347 - C6585 * C3614 + C82639 * C3702 +
            C6584 * C1214 - C6812 * C1154 - C6584 * C1318 + C82863 * C1372) *
               C6505 +
           (C6585 * C3441 - C6813 * C3348 - C6585 * C3613 + C82639 * C3704 +
            C6584 * C1213 - C6812 * C1155 - C6584 * C1317 + C82863 * C1373) *
               C6504) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C19131 * C169 - C19353 * C102 - C19131 * C310 + C19057 * C365 +
            C19132 * C753 - C19354 * C695 - C19132 * C857 + C19058 * C913 +
            C19133 * C1746 - C19355 * C1653 - C19133 * C1950 + C19059 * C2035 +
            C19134 * C2653 - C19356 * C2527 - C19134 * C2821 + C82871 * C2927) *
               C82844 +
           (C19382 + C19383 + C19384 + C19385) * C82533) *
              C82592 * C1149 -
          ((C19134 * C20478 - C19356 * C20408 - C19134 * C20614 +
            C82871 * C20682 + C19133 * C3444 - C19355 * C3344 - C19133 * C3617 +
            C19059 * C3701 + C19132 * C3443 - C19354 * C3347 - C19132 * C3614 +
            C19058 * C3702 + C19131 * C1214 - C19353 * C1154 - C19131 * C1318 +
            C19057 * C1372) *
               C82533 +
           (C19134 * C16353 - C19356 * C16304 - C19134 * C16445 +
            C82871 * C16492 + C19133 * C3442 - C19355 * C3345 - C19133 * C3616 +
            C19059 * C3703 + C19132 * C3441 - C19354 * C3348 - C19132 * C3613 +
            C19058 * C3704 + C19131 * C1213 - C19353 * C1155 - C19131 * C1317 +
            C19057 * C1373) *
               C82844) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[62] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C6584 +
                      (C82592 * C441 - C239 * C310) * C82863 +
                      (C2740 - C2741) * C6585 + (C3006 - C3007) * C82639) *
                         C6504 +
                     ((C253 - C254) * C6584 + (C448 - C449) * C82863 +
                      (C1861 - C1862) * C6585 + (C2160 - C2161) * C82639) *
                         C6505 +
                     ((C257 - C258) * C6584 + (C450 - C451) * C82863 +
                      (C1865 - C1866) * C6585 + (C2164 - C2165) * C82639) *
                         C6506 +
                     ((C261 - C262) * C6584 + (C452 - C453) * C82863 +
                      (C6677 - C6678) * C6585 + (C6923 - C6924) * C82639) *
                         C82862) *
                        C1149 +
                    (((C239 * C1155 - C82592 * C1265) * C6584 +
                      (C239 * C1317 - C82592 * C1416) * C82863 +
                      (C239 * C3348 - C82592 * C3527) * C6585 +
                      (C239 * C3613 - C82592 * C3779) * C82639) *
                         C6504 +
                     ((C239 * C1154 - C82592 * C1266) * C6584 +
                      (C239 * C1318 - C82592 * C1417) * C82863 +
                      (C239 * C3347 - C82592 * C3528) * C6585 +
                      (C239 * C3614 - C82592 * C3781) * C82639) *
                         C6505 +
                     ((C239 * C1153 - C82592 * C1267) * C6584 +
                      (C239 * C1319 - C82592 * C1418) * C82863 +
                      (C239 * C3346 - C82592 * C3529) * C6585 +
                      (C239 * C3615 - C82592 * C3783) * C82639) *
                         C6506 +
                     ((C239 * C1152 - C82592 * C1268) * C6584 +
                      (C239 * C1320 - C82592 * C1419) * C82863 +
                      (C239 * C7859 - C82592 * C7997) * C6585 +
                      (C239 * C8065 - C82592 * C8200) * C82639) *
                         C82862) *
                        C1150) *
                   C82939 * C82940) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C19131 +
                      (C82592 * C441 - C239 * C310) * C19057 +
                      (C2740 - C2741) * C19132 + (C3006 - C3007) * C19058 +
                      (C2744 - C2745) * C19133 + (C3008 - C3009) * C19059 +
                      (C15952 - C15953) * C19134 + (C16106 - C16107) * C82871) *
                         C82844 +
                     ((C253 - C254) * C19131 + (C448 - C449) * C19057 +
                      (C1861 - C1862) * C19132 + (C2160 - C2161) * C19058 +
                      (C1869 - C1870) * C19133 + (C2162 - C2163) * C19059 +
                      (C19218 - C19219) * C19134 + (C19452 - C19453) * C82871) *
                         C82533) *
                        C1149 +
                    (((C239 * C1155 - C82592 * C1265) * C19131 +
                      (C239 * C1317 - C82592 * C1416) * C19057 +
                      (C239 * C3348 - C82592 * C3527) * C19132 +
                      (C239 * C3613 - C82592 * C3779) * C19058 +
                      (C239 * C3345 - C82592 * C3530) * C19133 +
                      (C239 * C3616 - C82592 * C3780) * C19059 +
                      (C239 * C16304 - C82592 * C16399) * C19134 +
                      (C239 * C16445 - C82592 * C16535) * C82871) *
                         C82844 +
                     ((C239 * C1154 - C82592 * C1266) * C19131 +
                      (C239 * C1318 - C82592 * C1417) * C19057 +
                      (C239 * C3347 - C82592 * C3528) * C19132 +
                      (C239 * C3614 - C82592 * C3781) * C19058 +
                      (C239 * C3344 - C82592 * C3531) * C19133 +
                      (C239 * C3617 - C82592 * C3782) * C19059 +
                      (C239 * C20408 - C82592 * C20546) * C19134 +
                      (C239 * C20614 - C82592 * C20749) * C82871) *
                         C82533) *
                        C1150) *
                   C82939 * C82940) /
                      (p * q * std::sqrt(p + q));
    d2eezx[62] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6504 * C108 - C6510 * C102 + C6505 * C110 - C6512 * C103 +
             C6506 * C112 - C6514 * C104 + C82862 * C114 - C6516 * C105) *
                C239 +
            (C6504 * C503 - C6510 * C497 + C6505 * C504 - C6512 * C498 +
             C6506 * C505 - C6514 * C499 + C82862 * C506 - C6516 * C500) *
                C82592) *
               C82863 +
           ((C7440 - C7441 + C7442 - C7443 + C7444 - C7445 + C7446 - C7447) *
                C239 +
            (C7654 - C7655 + C7656 - C7657 + C7658 - C7659 + C7660 - C7661) *
                C82592) *
               C82639) *
              C1149 +
          (((C6510 * C1155 - C6504 * C1164 + C6512 * C1154 - C6505 * C1162 +
             C6514 * C1153 - C6506 * C1160 + C6516 * C1152 - C82862 * C1158) *
                C239 +
            (C6510 * C1463 - C6504 * C1468 + C6512 * C1464 - C6505 * C1469 +
             C6514 * C1465 - C6506 * C1470 + C6516 * C1466 - C82862 * C1471) *
                C82592) *
               C82863 +
           ((C6510 * C3348 - C6504 * C3359 + C6512 * C3347 - C6505 * C3357 +
             C6514 * C3346 - C6506 * C3355 + C6516 * C7859 - C82862 * C7860) *
                C239 +
            (C6510 * C3859 - C6504 * C3865 + C6512 * C3860 - C6505 * C3866 +
             C6514 * C3861 - C6506 * C3867 + C6516 * C8267 - C82862 * C8268) *
                C82592) *
               C82639) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C239 +
            (C82844 * C503 - C80224 * C497 + C82533 * C504 - C80205 * C498) *
                C82592) *
               C19057 +
           ((C19977 - C19978 + C19979 - C19980) * C239 +
            (C20199 - C20200 + C20201 - C20202) * C82592) *
               C19058 +
           ((C19985 - C19986 + C19987 - C19988) * C239 +
            (C20203 - C20204 + C20205 - C20206) * C82592) *
               C19059 +
           ((C19993 - C19994 + C19995 - C19996) * C239 +
            (C20207 - C20208 + C20209 - C20210) * C82592) *
               C82871) *
              C1149 +
          (((C80224 * C1155 - C82844 * C1164 + C80205 * C1154 -
             C82533 * C1162) *
                C239 +
            (C80224 * C1463 - C82844 * C1468 + C80205 * C1464 -
             C82533 * C1469) *
                C82592) *
               C19057 +
           ((C80224 * C3348 - C82844 * C3359 + C80205 * C3347 -
             C82533 * C3357) *
                C239 +
            (C80224 * C3859 - C82844 * C3865 + C80205 * C3860 -
             C82533 * C3866) *
                C82592) *
               C19058 +
           ((C80224 * C3345 - C82844 * C3353 + C80205 * C3344 -
             C82533 * C3351) *
                C239 +
            (C80224 * C3862 - C82844 * C3868 + C80205 * C3863 -
             C82533 * C3869) *
                C82592) *
               C19059 +
           ((C80224 * C16304 - C82844 * C16307 + C80205 * C20408 -
             C82533 * C20409) *
                C239 +
            (C80224 * C16579 - C82844 * C16581 + C80205 * C20816 -
             C82533 * C20817) *
                C82592) *
               C82871) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[62] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C239 +
            (C82863 * C551 - C6584 * C497 + C82639 * C1055 - C6585 * C1003) *
                C82592) *
               C6504 +
           ((C6587 - C6588 + C6589 - C6590) * C239 +
            (C7057 - C7058 + C7059 - C7060) * C82592) *
               C6505 +
           ((C6595 - C6596 + C6597 - C6598) * C239 +
            (C7061 - C7062 + C7063 - C7064) * C82592) *
               C6506 +
           ((C6603 - C6604 + C6605 - C6606) * C239 +
            (C7065 - C7066 + C7067 - C7068) * C82592) *
               C82862) *
              C1149 +
          (((C6584 * C1155 - C82863 * C1213 + C6585 * C3348 - C82639 * C3441) *
                C239 +
            (C6584 * C1463 - C82863 * C1515 + C6585 * C3859 - C82639 * C3945) *
                C82592) *
               C6504 +
           ((C6584 * C1154 - C82863 * C1214 + C6585 * C3347 - C82639 * C3443) *
                C239 +
            (C6584 * C1464 - C82863 * C1516 + C6585 * C3860 - C82639 * C3947) *
                C82592) *
               C6505 +
           ((C6584 * C1153 - C82863 * C1215 + C6585 * C3346 - C82639 * C3445) *
                C239 +
            (C6584 * C1465 - C82863 * C1517 + C6585 * C3861 - C82639 * C3949) *
                C82592) *
               C6506 +
           ((C6584 * C1152 - C82863 * C1216 + C6585 * C7859 - C82639 * C7929) *
                C239 +
            (C6584 * C1466 - C82863 * C1518 + C6585 * C8267 - C82639 * C8335) *
                C82592) *
               C82862) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19057 * C169 - C19131 * C102 + C19058 * C753 - C19132 * C695 +
             C19059 * C1746 - C19133 * C1653 + C82871 * C2653 -
             C19134 * C2527) *
                C239 +
            (C19057 * C551 - C19131 * C497 + C19058 * C1055 - C19132 * C1003 +
             C19059 * C2323 - C19133 * C2241 + C82871 * C3175 -
             C19134 * C3083) *
                C82592) *
               C82844 +
           ((C19136 - C19137 + C19138 - C19139 + C19140 - C19141 + C19142 -
             C19143) *
                C239 +
            (C19586 - C19587 + C19588 - C19589 + C19590 - C19591 + C19592 -
             C19593) *
                C82592) *
               C82533) *
              C1149 +
          (((C19131 * C1155 - C19057 * C1213 + C19132 * C3348 - C19058 * C3441 +
             C19133 * C3345 - C19059 * C3442 + C19134 * C16304 -
             C82871 * C16353) *
                C239 +
            (C19131 * C1463 - C19057 * C1515 + C19132 * C3859 - C19058 * C3945 +
             C19133 * C3862 - C19059 * C3946 + C19134 * C16579 -
             C82871 * C16625) *
                C82592) *
               C82844 +
           ((C19131 * C1154 - C19057 * C1214 + C19132 * C3347 - C19058 * C3443 +
             C19133 * C3344 - C19059 * C3444 + C19134 * C20408 -
             C82871 * C20478) *
                C239 +
            (C19131 * C1464 - C19057 * C1516 + C19132 * C3860 - C19058 * C3947 +
             C19133 * C3863 - C19059 * C3948 + C19134 * C20816 -
             C82871 * C20884) *
                C82592) *
               C82533) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[62] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82863 +
            C3268 * C82639) *
               C6504 +
           (C7135 + C7136) * C6505 + (C7137 + C7138) * C6506 +
           (C7139 + C7147) * C82862) *
              C1149 -
          (((C239 * C7997 - C607 * C7859 - C239 * C8267 + C82592 * C8402) *
                C82639 +
            (C239 * C1268 - C607 * C1152 - C239 * C1466 + C82592 * C1563) *
                C82863) *
               C82862 +
           ((C239 * C3529 - C607 * C3346 - C239 * C3861 + C82592 * C4026) *
                C82639 +
            (C239 * C1267 - C607 * C1153 - C239 * C1465 + C82592 * C1564) *
                C82863) *
               C6506 +
           ((C239 * C3528 - C607 * C3347 - C239 * C3860 + C82592 * C4028) *
                C82639 +
            (C239 * C1266 - C607 * C1154 - C239 * C1464 + C82592 * C1565) *
                C82863) *
               C6505 +
           ((C239 * C3527 - C607 * C3348 - C239 * C3859 + C82592 * C4030) *
                C82639 +
            (C239 * C1265 - C607 * C1155 - C239 * C1463 + C82592 * C1566) *
                C82863) *
               C6504) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C19057 +
            C3268 * C19058 + C3269 * C19059 + C16260 * C82871) *
               C82844 +
           (C19660 + C19661 + C19662 + C19670) * C82533) *
              C1149 -
          (((C239 * C20546 - C607 * C20408 - C239 * C20816 + C82592 * C20951) *
                C82871 +
            (C239 * C3531 - C607 * C3344 - C239 * C3863 + C82592 * C4027) *
                C19059 +
            (C239 * C3528 - C607 * C3347 - C239 * C3860 + C82592 * C4028) *
                C19058 +
            (C239 * C1266 - C607 * C1154 - C239 * C1464 + C82592 * C1565) *
                C19057) *
               C82533 +
           ((C239 * C16399 - C607 * C16304 - C239 * C16579 + C82592 * C16670) *
                C82871 +
            (C239 * C3530 - C607 * C3345 - C239 * C3862 + C82592 * C4029) *
                C19059 +
            (C239 * C3527 - C607 * C3348 - C239 * C3859 + C82592 * C4030) *
                C19058 +
            (C239 * C1265 - C607 * C1155 - C239 * C1463 + C82592 * C1566) *
                C19057) *
               C82844) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1647 * C108 - C1648 * C102 - C1647 * C109 + C1641 * C120 +
             C1649 * C110 - C1650 * C103 - C1649 * C111 + C1642 * C121 +
             C1651 * C112 - C1652 * C104 - C1651 * C113 + C82885 * C122) *
                C82864 +
            (C5737 + C5738 + C5739) * C82679) *
               C82863 +
           ((C2574 + C2575 + C2576) * C82864 +
            (C1647 * C3359 - C1648 * C3348 - C1647 * C3360 + C1641 * C3366 +
             C1649 * C3357 - C1650 * C3347 - C1649 * C3358 + C1642 * C3365 +
             C1651 * C3355 - C1652 * C3346 - C1651 * C3356 + C82885 * C3364) *
                C82679) *
               C82639) *
              C82938 * C82939 * C90 -
          (((C1651 * C7860 - C1652 * C7859 - C1651 * C7861 + C82885 * C7862 +
             C1649 * C3355 - C1650 * C3346 - C1649 * C3356 + C1642 * C3364 +
             C1647 * C3357 - C1648 * C3347 - C1647 * C3358 + C1641 * C3365) *
                C82679 +
            (C1651 * C698 - C1652 * C692 - C1651 * C699 + C82885 * C707 +
             C1649 * C700 - C1650 * C693 - C1649 * C701 + C1642 * C708 +
             C1647 * C702 - C1648 * C694 - C1647 * C703 + C1641 * C709) *
                C82864) *
               C82639 +
           ((C1651 * C1158 - C1652 * C1152 - C1651 * C1159 + C82885 * C1167 +
             C1649 * C1160 - C1650 * C1153 - C1649 * C1161 + C1642 * C1168 +
             C1647 * C1162 - C1648 * C1154 - C1647 * C1163 + C1641 * C1169) *
                C82679 +
            (C1651 * C114 - C1652 * C105 - C1651 * C115 + C82885 * C123 +
             C1649 * C112 - C1650 * C104 - C1649 * C113 + C1642 * C122 +
             C1647 * C110 - C1648 * C103 - C1647 * C111 + C1641 * C121) *
                C82864) *
               C82863) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C82864 +
            C18282 * C82679) *
               C19057 +
           (C15856 * C82864 + C17474 * C82679) * C19058 +
           (C15857 * C82864 + C17476 * C82679) * C19059 +
           (C15858 * C82864 + (C15405 * C16307 - C15406 * C16304 -
                               C15405 * C16308 + C82523 * C16310) *
                                  C82679) *
               C82871) *
              C82938 * C82939 * C90 -
          (((C15405 * C20409 - C15406 * C20408 - C15405 * C20410 +
             C82523 * C20411) *
                C82679 +
            (C15405 * C2530 - C15406 * C2526 - C15405 * C2531 +
             C82523 * C2535) *
                C82864) *
               C82871 +
           ((C15405 * C3351 - C15406 * C3344 - C15405 * C3352 +
             C82523 * C3362) *
                C82679 +
            (C15405 * C1659 - C15406 * C1654 - C15405 * C1660 +
             C82523 * C1666) *
                C82864) *
               C19059 +
           ((C15405 * C3357 - C15406 * C3347 - C15405 * C3358 +
             C82523 * C3365) *
                C82679 +
            (C15405 * C702 - C15406 * C694 - C15405 * C703 + C82523 * C709) *
                C82864) *
               C19058 +
           ((C15405 * C1162 - C15406 * C1154 - C15405 * C1163 +
             C82523 * C1169) *
                C82679 +
            (C15405 * C110 - C15406 * C103 - C15405 * C111 + C82523 * C121) *
                C82864) *
               C19057) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C1647 +
            (C82863 * C175 - C6584 * C109 + C82639 * C758 - C6585 * C705) *
                C1641 +
            (C6587 - C6588 + C6589 - C6590) * C1649 +
            (C6591 - C6592 + C6593 - C6594) * C1642 +
            (C6595 - C6596 + C6597 - C6598) * C1651 +
            (C6599 - C6600 + C6601 - C6602) * C82885) *
               C82864 +
           ((C82863 * C1213 - C6584 * C1155 + C82639 * C3441 - C6585 * C3348) *
                C1647 +
            (C82863 * C1218 - C6584 * C1165 + C82639 * C3447 - C6585 * C3360) *
                C1641 +
            (C10535 - C10536 + C10537 - C10538) * C1649 +
            (C10539 - C10540 + C10541 - C10542) * C1642 +
            (C10543 - C10544 + C10545 - C10546) * C1651 +
            (C10547 - C10548 + C10549 - C10550) * C82885) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C6588 - C6587 + C6590 - C6589) * C1647 +
            (C6592 - C6591 + C6594 - C6593) * C1641 +
            (C6596 - C6595 + C6598 - C6597) * C1649 +
            (C6600 - C6599 + C6602 - C6601) * C1642 +
            (C6604 - C6603 + C6606 - C6605) * C1651 +
            (C6608 - C6607 + C6610 - C6609) * C82885) *
               C82864 +
           ((C10536 - C10535 + C10538 - C10537) * C1647 +
            (C10540 - C10539 + C10542 - C10541) * C1641 +
            (C10544 - C10543 + C10546 - C10545) * C1649 +
            (C10548 - C10547 + C10550 - C10549) * C1642 +
            (C6584 * C1152 - C82863 * C1216 + C6585 * C7859 - C82639 * C7929) *
                C1651 +
            (C6584 * C1159 - C82863 * C1221 + C6585 * C7861 - C82639 * C7930) *
                C82885) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19057 * C169 - C19131 * C102 + C19058 * C753 - C19132 * C695 +
             C19059 * C1746 - C19133 * C1653 + C82871 * C2653 -
             C19134 * C2527) *
                C15405 +
            (C19057 * C175 - C19131 * C109 + C19058 * C758 - C19132 * C705 +
             C19059 * C1750 - C19133 * C1658 + C82871 * C2656 -
             C19134 * C2533) *
                C82523) *
               C82864 +
           ((C19057 * C1213 - C19131 * C1155 + C19058 * C3441 - C19132 * C3348 +
             C19059 * C3442 - C19133 * C3345 + C82871 * C16353 -
             C19134 * C16304) *
                C15405 +
            (C19057 * C1218 - C19131 * C1165 + C19058 * C3447 - C19132 * C3360 +
             C19059 * C3448 - C19133 * C3354 + C82871 * C16355 -
             C19134 * C16308) *
                C82523) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C19137 - C19136 + C19139 - C19138 + C19141 - C19140 + C19143 -
             C19142) *
                C15405 +
            (C19145 - C19144 + C19147 - C19146 + C19149 - C19148 + C19151 -
             C19150) *
                C82523) *
               C82864 +
           ((C19131 * C1154 - C19057 * C1214 + C19132 * C3347 - C19058 * C3443 +
             C19133 * C3344 - C19059 * C3444 + C19134 * C20408 -
             C82871 * C20478) *
                C15405 +
            (C19131 * C1163 - C19057 * C1219 + C19132 * C3358 - C19058 * C3449 +
             C19133 * C3352 - C19059 * C3450 + C19134 * C20410 -
             C82871 * C20479) *
                C82523) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C1647 +
            (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
                C1641 +
            (C8610 - C8611 + C8612 - C8613) * C1649 +
            (C8614 - C8615 + C8616 - C8617) * C1642 +
            (C8618 - C8619 + C8620 - C8621) * C1651 +
            (C8622 - C8623 + C8624 - C8625) * C82885) *
               C82863 +
           ((C82864 * C805 - C8607 * C695 + C82679 * C3527 - C8608 * C3348) *
                C1647 +
            (C82864 * C810 - C8607 * C705 + C82679 * C3533 - C8608 * C3360) *
                C1641 +
            (C10649 - C10650 + C10651 - C10652) * C1649 +
            (C10653 - C10654 + C10655 - C10656) * C1642 +
            (C10657 - C10658 + C10659 - C10660) * C1651 +
            (C10661 - C10662 + C10663 - C10664) * C82885) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C8611 - C8610 + C8613 - C8612) * C1647 +
            (C8615 - C8614 + C8617 - C8616) * C1641 +
            (C8619 - C8618 + C8621 - C8620) * C1649 +
            (C8623 - C8622 + C8625 - C8624) * C1642 +
            (C8627 - C8626 + C8629 - C8628) * C1651 +
            (C8631 - C8630 + C8633 - C8632) * C82885) *
               C82863 +
           ((C10650 - C10649 + C10652 - C10651) * C1647 +
            (C10654 - C10653 + C10656 - C10655) * C1641 +
            (C10658 - C10657 + C10660 - C10659) * C1649 +
            (C10662 - C10661 + C10664 - C10663) * C1642 +
            (C8607 * C692 - C82864 * C808 + C8608 * C7859 - C82679 * C7997) *
                C1651 +
            (C8607 * C699 - C82864 * C813 + C8608 * C7861 - C82679 * C7998) *
                C82885) *
               C82639) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C15405 +
            (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
                C82523) *
               C19057 +
           ((C11640 - C11641 + C11642 - C11643) * C15405 +
            (C11644 - C11645 + C11646 - C11647) * C82523) *
               C19058 +
           ((C22222 - C22223 + C22224 - C22225) * C15405 +
            (C22226 - C22227 + C22228 - C22229) * C82523) *
               C19059 +
           ((C82864 * C2733 - C8607 * C2527 + C82679 * C16399 -
             C8608 * C16304) *
                C15405 +
            (C82864 * C2736 - C8607 * C2533 + C82679 * C16401 -
             C8608 * C16308) *
                C82523) *
               C82871) *
              C82938 * C82939 * C90 +
          (((C8611 - C8610 + C8613 - C8612) * C15405 +
            (C8615 - C8614 + C8617 - C8616) * C82523) *
               C19057 +
           ((C10650 - C10649 + C10652 - C10651) * C15405 +
            (C10654 - C10653 + C10656 - C10655) * C82523) *
               C19058 +
           ((C21260 - C21259 + C21262 - C21261) * C15405 +
            (C21264 - C21263 + C21266 - C21265) * C82523) *
               C19059 +
           ((C8607 * C2526 - C82864 * C2734 + C8608 * C20408 -
             C82679 * C20546) *
                C15405 +
            (C8607 * C2531 - C82864 * C2737 + C8608 * C20410 -
             C82679 * C20547) *
                C82523) *
               C82871) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
             C82885 * C112 - C1651 * C104) *
                C6584 +
            (C1641 * C316 - C1647 * C310 + C1642 * C317 - C1649 * C311 +
             C82885 * C318 - C1651 * C312) *
                C82863 +
            (C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C6585 +
            (C2834 - C2835 + C2836 - C2837 + C2838 - C2839) * C82639) *
               C82864 +
           ((C5991 - C5992 + C5993 - C5994 + C5995 - C5996) * C6584 +
            (C5997 - C5998 + C5999 - C6000 + C6001 - C6002) * C82863 +
            (C1641 * C3359 - C1647 * C3348 + C1642 * C3357 - C1649 * C3347 +
             C82885 * C3355 - C1651 * C3346) *
                C6585 +
            (C1641 * C3619 - C1647 * C3613 + C1642 * C3620 - C1649 * C3614 +
             C82885 * C3621 - C1651 * C3615) *
                C82639) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C1647 * C103 - C1641 * C110 + C1649 * C104 - C1642 * C112 +
             C1651 * C105 - C82885 * C114) *
                C6584 +
            (C1647 * C311 - C1641 * C317 + C1649 * C312 - C1642 * C318 +
             C1651 * C313 - C82885 * C319) *
                C82863 +
            (C1647 * C694 - C1641 * C702 + C1649 * C693 - C1642 * C700 +
             C1651 * C692 - C82885 * C698) *
                C6585 +
            (C1647 * C858 - C1641 * C863 + C1649 * C859 - C1642 * C864 +
             C1651 * C860 - C82885 * C865) *
                C82639) *
               C82864 +
           ((C1647 * C1154 - C1641 * C1162 + C1649 * C1153 - C1642 * C1160 +
             C1651 * C1152 - C82885 * C1158) *
                C6584 +
            (C1647 * C1318 - C1641 * C1323 + C1649 * C1319 - C1642 * C1324 +
             C1651 * C1320 - C82885 * C1325) *
                C82863 +
            (C1647 * C3347 - C1641 * C3357 + C1649 * C3346 - C1642 * C3355 +
             C1651 * C7859 - C82885 * C7860) *
                C6585 +
            (C1647 * C3614 - C1641 * C3620 + C1649 * C3615 - C1642 * C3621 +
             C1651 * C8065 - C82885 * C8066) *
                C82639) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C19131 +
            (C82523 * C316 - C15405 * C310) * C19057 +
            (C16004 - C16005) * C19132 + (C16006 - C16007) * C19058 +
            (C16008 - C16009) * C19133 + (C16010 - C16011) * C19059 +
            (C16012 - C16013) * C19134 + (C16014 - C16015) * C82871) *
               C82864 +
           ((C18542 - C18543) * C19131 + (C18544 - C18545) * C19057 +
            (C17734 - C17735) * C19132 + (C17736 - C17737) * C19058 +
            (C17738 - C17739) * C19133 + (C17740 - C17741) * C19059 +
            (C82523 * C16307 - C15405 * C16304) * C19134 +
            (C82523 * C16447 - C15405 * C16445) * C82871) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C15405 * C103 - C82523 * C110) * C19131 +
            (C15405 * C311 - C82523 * C317) * C19057 +
            (C15405 * C694 - C82523 * C702) * C19132 +
            (C15405 * C858 - C82523 * C863) * C19058 +
            (C15405 * C1654 - C82523 * C1659) * C19133 +
            (C15405 * C1951 - C82523 * C1955) * C19059 +
            (C15405 * C2526 - C82523 * C2530) * C19134 +
            (C15405 * C2822 - C82523 * C2825) * C82871) *
               C82864 +
           ((C15405 * C1154 - C82523 * C1162) * C19131 +
            (C15405 * C1318 - C82523 * C1323) * C19057 +
            (C15405 * C3347 - C82523 * C3357) * C19132 +
            (C15405 * C3614 - C82523 * C3620) * C19058 +
            (C15405 * C3344 - C82523 * C3351) * C19133 +
            (C15405 * C3617 - C82523 * C3623) * C19059 +
            (C15405 * C20408 - C82523 * C20409) * C19134 +
            (C15405 * C20614 - C82523 * C20615) * C82871) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6584 * C169 - C6812 * C102 - C6584 * C310 + C82863 * C365 +
             C6585 * C753 - C6813 * C695 - C6585 * C857 + C82639 * C913) *
                C1641 +
            (C6851 + C6852) * C1642 + (C6853 + C6854) * C82885) *
               C82864 +
           ((C6584 * C1213 - C6812 * C1155 - C6584 * C1317 + C82863 * C1373 +
             C6585 * C3441 - C6813 * C3348 - C6585 * C3613 + C82639 * C3704) *
                C1641 +
            (C10885 + C10886) * C1642 + (C10887 + C10888) * C82885) *
               C82679) *
              C82938 * C82939 * C90 -
          (((C6585 * C7929 - C6813 * C7859 - C6585 * C8065 + C82639 * C8133 +
             C6584 * C1216 - C6812 * C1152 - C6584 * C1320 + C82863 * C1370) *
                C82885 +
            (C10888 + C10887) * C1642 + (C10886 + C10885) * C1641) *
               C82679 +
           ((C6856 + C6855) * C82885 + (C6854 + C6853) * C1642 +
            (C6852 + C6851) * C1641) *
               C82864) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C19131 * C169 - C19353 * C102 - C19131 * C310 + C19057 * C365 +
            C19132 * C753 - C19354 * C695 - C19132 * C857 + C19058 * C913 +
            C19133 * C1746 - C19355 * C1653 - C19133 * C1950 + C19059 * C2035 +
            C19134 * C2653 - C19356 * C2527 - C19134 * C2821 + C82871 * C2927) *
               C82523 * C82864 +
           (C19131 * C1213 - C19353 * C1155 - C19131 * C1317 + C19057 * C1373 +
            C19132 * C3441 - C19354 * C3348 - C19132 * C3613 + C19058 * C3704 +
            C19133 * C3442 - C19355 * C3345 - C19133 * C3616 + C19059 * C3703 +
            C19134 * C16353 - C19356 * C16304 - C19134 * C16445 +
            C82871 * C16492) *
               C82523 * C82679) *
              C82938 * C82939 * C90 -
          ((C19134 * C20478 - C19356 * C20408 - C19134 * C20614 +
            C82871 * C20682 + C19133 * C3444 - C19355 * C3344 - C19133 * C3617 +
            C19059 * C3701 + C19132 * C3443 - C19354 * C3347 - C19132 * C3614 +
            C19058 * C3702 + C19131 * C1214 - C19353 * C1154 - C19131 * C1318 +
            C19057 * C1372) *
               C82523 * C82679 +
           (C19385 + C19384 + C19383 + C19382) * C82523 * C82864) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C6584 +
            (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
                C82863 +
            (C82864 * C805 - C8607 * C695 + C82679 * C3527 - C8608 * C3348) *
                C6585 +
            (C82864 * C956 - C8607 * C857 + C82679 * C3779 - C8608 * C3613) *
                C82639) *
               C1641 +
           ((C8610 - C8611 + C8612 - C8613) * C6584 +
            (C8839 - C8840 + C8841 - C8842) * C82863 +
            (C10649 - C10650 + C10651 - C10652) * C6585 +
            (C10987 - C10988 + C10989 - C10990) * C82639) *
               C1642 +
           ((C8618 - C8619 + C8620 - C8621) * C6584 +
            (C8843 - C8844 + C8845 - C8846) * C82863 +
            (C10657 - C10658 + C10659 - C10660) * C6585 +
            (C10991 - C10992 + C10993 - C10994) * C82639) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C8611 - C8610 + C8613 - C8612) * C6584 +
            (C8840 - C8839 + C8842 - C8841) * C82863 +
            (C10650 - C10649 + C10652 - C10651) * C6585 +
            (C10988 - C10987 + C10990 - C10989) * C82639) *
               C1641 +
           ((C8619 - C8618 + C8621 - C8620) * C6584 +
            (C8844 - C8843 + C8846 - C8845) * C82863 +
            (C10658 - C10657 + C10660 - C10659) * C6585 +
            (C10992 - C10991 + C10994 - C10993) * C82639) *
               C1642 +
           ((C8627 - C8626 + C8629 - C8628) * C6584 +
            (C8848 - C8847 + C8850 - C8849) * C82863 +
            (C8607 * C692 - C82864 * C808 + C8608 * C7859 - C82679 * C7997) *
                C6585 +
            (C8607 * C860 - C82864 * C959 + C8608 * C8065 - C82679 * C8200) *
                C82639) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
               C19131 +
           (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
               C19057 +
           (C11640 - C11641 + C11642 - C11643) * C19132 +
           (C11954 - C11955 + C11956 - C11957) * C19058 +
           (C22222 - C22223 + C22224 - C22225) * C19133 +
           (C22540 - C22541 + C22542 - C22543) * C19059 +
           (C82864 * C2733 - C8607 * C2527 + C82679 * C16399 - C8608 * C16304) *
               C19134 +
           (C82864 * C3002 - C8607 * C2821 + C82679 * C16535 - C8608 * C16445) *
               C82871) *
              C82523 * C82938 * C82939 * C90 +
          ((C8611 - C8610 + C8613 - C8612) * C19131 +
           (C8840 - C8839 + C8842 - C8841) * C19057 +
           (C10650 - C10649 + C10652 - C10651) * C19132 +
           (C10988 - C10987 + C10990 - C10989) * C19058 +
           (C21260 - C21259 + C21262 - C21261) * C19133 +
           (C21583 - C21582 + C21585 - C21584) * C19059 +
           (C8607 * C2526 - C82864 * C2734 + C8608 * C20408 - C82679 * C20546) *
               C19134 +
           (C8607 * C2822 - C82864 * C3003 + C8608 * C20614 - C82679 * C20749) *
               C82871) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezx[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
             C82885 * C112 - C1651 * C104) *
                C8607 +
            (C1641 * C503 - C1647 * C497 + C1642 * C504 - C1649 * C498 +
             C82885 * C505 - C1651 * C499) *
                C82864 +
            (C5991 - C5992 + C5993 - C5994 + C5995 - C5996) * C8608 +
            (C6269 - C6270 + C6271 - C6272 + C6273 - C6274) * C82679) *
               C82863 +
           ((C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C8607 +
            (C3090 - C3091 + C3092 - C3093 + C3094 - C3095) * C82864 +
            (C1641 * C3359 - C1647 * C3348 + C1642 * C3357 - C1649 * C3347 +
             C82885 * C3355 - C1651 * C3346) *
                C8608 +
            (C1641 * C3865 - C1647 * C3859 + C1642 * C3866 - C1649 * C3860 +
             C82885 * C3867 - C1651 * C3861) *
                C82679) *
               C82639) *
              C82938 * C82939 * C90 +
          (((C1647 * C103 - C1641 * C110 + C1649 * C104 - C1642 * C112 +
             C1651 * C105 - C82885 * C114) *
                C8607 +
            (C1647 * C498 - C1641 * C504 + C1649 * C499 - C1642 * C505 +
             C1651 * C500 - C82885 * C506) *
                C82864 +
            (C1647 * C1154 - C1641 * C1162 + C1649 * C1153 - C1642 * C1160 +
             C1651 * C1152 - C82885 * C1158) *
                C8608 +
            (C1647 * C1464 - C1641 * C1469 + C1649 * C1465 - C1642 * C1470 +
             C1651 * C1466 - C82885 * C1471) *
                C82679) *
               C82863 +
           ((C1647 * C694 - C1641 * C702 + C1649 * C693 - C1642 * C700 +
             C1651 * C692 - C82885 * C698) *
                C8607 +
            (C1647 * C1004 - C1641 * C1009 + C1649 * C1005 - C1642 * C1010 +
             C1651 * C1006 - C82885 * C1011) *
                C82864 +
            (C1647 * C3347 - C1641 * C3357 + C1649 * C3346 - C1642 * C3355 +
             C1651 * C7859 - C82885 * C7860) *
                C8608 +
            (C1647 * C3860 - C1641 * C3866 + C1649 * C3861 - C1642 * C3867 +
             C1651 * C8267 - C82885 * C8268) *
                C82679) *
               C82639) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C8607 +
            (C82523 * C503 - C15405 * C497) * C82864 +
            (C18542 - C18543) * C8608 + (C18822 - C18823) * C82679) *
               C19057 +
           ((C16004 - C16005) * C8607 + (C16154 - C16155) * C82864 +
            (C17734 - C17735) * C8608 + (C17988 - C17989) * C82679) *
               C19058 +
           ((C16008 - C16009) * C8607 + (C16156 - C16157) * C82864 +
            (C17738 - C17739) * C8608 + (C17992 - C17993) * C82679) *
               C19059 +
           ((C16012 - C16013) * C8607 + (C16158 - C16159) * C82864 +
            (C82523 * C16307 - C15405 * C16304) * C8608 +
            (C82523 * C16581 - C15405 * C16579) * C82679) *
               C82871) *
              C82938 * C82939 * C90 +
          (((C15405 * C103 - C82523 * C110) * C8607 +
            (C15405 * C498 - C82523 * C504) * C82864 +
            (C15405 * C1154 - C82523 * C1162) * C8608 +
            (C15405 * C1464 - C82523 * C1469) * C82679) *
               C19057 +
           ((C15405 * C694 - C82523 * C702) * C8607 +
            (C15405 * C1004 - C82523 * C1009) * C82864 +
            (C15405 * C3347 - C82523 * C3357) * C8608 +
            (C15405 * C3860 - C82523 * C3866) * C82679) *
               C19058 +
           ((C15405 * C1654 - C82523 * C1659) * C8607 +
            (C15405 * C2242 - C82523 * C2246) * C82864 +
            (C15405 * C3344 - C82523 * C3351) * C8608 +
            (C15405 * C3863 - C82523 * C3869) * C82679) *
               C19059 +
           ((C15405 * C2526 - C82523 * C2530) * C8607 +
            (C15405 * C3084 - C82523 * C3087) * C82864 +
            (C15405 * C20408 - C82523 * C20409) * C8608 +
            (C15405 * C20816 - C82523 * C20817) * C82679) *
               C82871) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C8607 +
            (C82863 * C551 - C6584 * C497 + C82639 * C1055 - C6585 * C1003) *
                C82864 +
            (C82863 * C1213 - C6584 * C1155 + C82639 * C3441 - C6585 * C3348) *
                C8608 +
            (C82863 * C1515 - C6584 * C1463 + C82639 * C3945 - C6585 * C3859) *
                C82679) *
               C1641 +
           ((C6587 - C6588 + C6589 - C6590) * C8607 +
            (C7057 - C7058 + C7059 - C7060) * C82864 +
            (C10535 - C10536 + C10537 - C10538) * C8608 +
            (C11191 - C11192 + C11193 - C11194) * C82679) *
               C1642 +
           ((C6595 - C6596 + C6597 - C6598) * C8607 +
            (C7061 - C7062 + C7063 - C7064) * C82864 +
            (C10543 - C10544 + C10545 - C10546) * C8608 +
            (C11195 - C11196 + C11197 - C11198) * C82679) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C6588 - C6587 + C6590 - C6589) * C8607 +
            (C7058 - C7057 + C7060 - C7059) * C82864 +
            (C10536 - C10535 + C10538 - C10537) * C8608 +
            (C11192 - C11191 + C11194 - C11193) * C82679) *
               C1641 +
           ((C6596 - C6595 + C6598 - C6597) * C8607 +
            (C7062 - C7061 + C7064 - C7063) * C82864 +
            (C10544 - C10543 + C10546 - C10545) * C8608 +
            (C11196 - C11195 + C11198 - C11197) * C82679) *
               C1642 +
           ((C6604 - C6603 + C6606 - C6605) * C8607 +
            (C7066 - C7065 + C7068 - C7067) * C82864 +
            (C6584 * C1152 - C82863 * C1216 + C6585 * C7859 - C82639 * C7929) *
                C8608 +
            (C6584 * C1466 - C82863 * C1518 + C6585 * C8267 - C82639 * C8335) *
                C82679) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C19057 * C169 - C19131 * C102 + C19058 * C753 - C19132 * C695 +
            C19059 * C1746 - C19133 * C1653 + C82871 * C2653 - C19134 * C2527) *
               C8607 +
           (C19057 * C551 - C19131 * C497 + C19058 * C1055 - C19132 * C1003 +
            C19059 * C2323 - C19133 * C2241 + C82871 * C3175 - C19134 * C3083) *
               C82864 +
           (C19057 * C1213 - C19131 * C1155 + C19058 * C3441 - C19132 * C3348 +
            C19059 * C3442 - C19133 * C3345 + C82871 * C16353 -
            C19134 * C16304) *
               C8608 +
           (C19057 * C1515 - C19131 * C1463 + C19058 * C3945 - C19132 * C3859 +
            C19059 * C3946 - C19133 * C3862 + C82871 * C16625 -
            C19134 * C16579) *
               C82679) *
              C82523 * C82938 * C82939 * C90 +
          ((C19137 - C19136 + C19139 - C19138 + C19141 - C19140 + C19143 -
            C19142) *
               C8607 +
           (C19587 - C19586 + C19589 - C19588 + C19591 - C19590 + C19593 -
            C19592) *
               C82864 +
           (C19131 * C1154 - C19057 * C1214 + C19132 * C3347 - C19058 * C3443 +
            C19133 * C3344 - C19059 * C3444 + C19134 * C20408 -
            C82871 * C20478) *
               C8608 +
           (C19131 * C1464 - C19057 * C1516 + C19132 * C3860 - C19058 * C3947 +
            C19133 * C3863 - C19059 * C3948 + C19134 * C20816 -
            C82871 * C20884) *
               C82679) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
             C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
                C82863 +
            (C8607 * C805 - C9050 * C695 - C8607 * C1003 + C82864 * C1106 +
             C8608 * C3527 - C9051 * C3348 - C8608 * C3859 + C82679 * C4030) *
                C82639) *
               C1641 +
           ((C9089 + C9090) * C82863 + (C11321 + C11322) * C82639) * C1642 +
           ((C9091 + C9092) * C82863 + (C11323 + C11324) * C82639) * C82885) *
              C82938 * C82939 * C90 -
          (((C8608 * C7997 - C9051 * C7859 - C8608 * C8267 + C82679 * C8402 +
             C8607 * C808 - C9050 * C692 - C8607 * C1006 + C82864 * C1103) *
                C82639 +
            (C9094 + C9093) * C82863) *
               C82885 +
           ((C11324 + C11323) * C82639 + (C9092 + C9091) * C82863) * C1642 +
           ((C11322 + C11321) * C82639 + (C9090 + C9089) * C82863) * C1641) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
            C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
               C19057 +
           (C12270 + C12271) * C19058 + (C22858 + C22859) * C19059 +
           (C8607 * C2733 - C9050 * C2527 - C8607 * C3083 + C82864 * C3254 +
            C8608 * C16399 - C9051 * C16304 - C8608 * C16579 +
            C82679 * C16670) *
               C82871) *
              C82523 * C82938 * C82939 * C90 -
          ((C8608 * C20546 - C9051 * C20408 - C8608 * C20816 + C82679 * C20951 +
            C8607 * C2734 - C9050 * C2526 - C8607 * C3084 + C82864 * C3253) *
               C82871 +
           (C21899 + C21898) * C19059 + (C11322 + C11321) * C19058 +
           (C9090 + C9089) * C19057) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexx[64] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1647 * C108 - C1648 * C102 - C1647 * C109 + C1641 * C120 +
             C1649 * C110 - C1650 * C103 - C1649 * C111 + C1642 * C121 +
             C1651 * C112 - C1652 * C104 - C1651 * C113 + C82885 * C122) *
                C82864 +
            (C5737 + C5738 + C5739) * C82679) *
               C82863 +
           ((C2574 + C2575 + C2576) * C82864 +
            (C11441 + C11442 + C11443) * C82679) *
               C82639) *
              C82938 * C688 -
          (((C1651 * C3349 - C1652 * C3343 - C1651 * C3350 + C82885 * C3361 +
             C1649 * C3351 - C1650 * C3344 - C1649 * C3352 + C1642 * C3362 +
             C1647 * C3353 - C1648 * C3345 - C1647 * C3354 + C1641 * C3363) *
                C82679 +
            (C2579 + C2578 + C2577) * C82864) *
               C82639 +
           ((C11443 + C11442 + C11441) * C82679 +
            (C2576 + C2575 + C2574) * C82864) *
               C82863) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C82864 +
            C18282 * C82679) *
               C19057 +
           (C24428 + C24429) * C19058 + (C24430 + C24431) * C19059 +
           (C24432 + C24440) * C82871) *
              C82938 * C688 -
          (((C15405 * C16305 - C15406 * C16303 - C15405 * C16306 +
             C82523 * C16309) *
                C82679 +
            C15859 * C82864) *
               C82871 +
           (C24440 + C24432) * C19059 + (C24431 + C24430) * C19058 +
           (C24429 + C24428) * C19057) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[64] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C1647 +
            (C82863 * C175 - C6584 * C109 + C82639 * C758 - C6585 * C705) *
                C1641 +
            (C6587 - C6588 + C6589 - C6590) * C1649 +
            (C6591 - C6592 + C6593 - C6594) * C1642 +
            (C6595 - C6596 + C6597 - C6598) * C1651 +
            (C6599 - C6600 + C6601 - C6602) * C82885) *
               C82864 +
           ((C82863 * C1213 - C6584 * C1155 + C82639 * C3441 - C6585 * C3348) *
                C1647 +
            (C82863 * C1218 - C6584 * C1165 + C82639 * C3447 - C6585 * C3360) *
                C1641 +
            (C10535 - C10536 + C10537 - C10538) * C1649 +
            (C10539 - C10540 + C10541 - C10542) * C1642 +
            (C10543 - C10544 + C10545 - C10546) * C1651 +
            (C10547 - C10548 + C10549 - C10550) * C82885) *
               C82679) *
              C82938 * C688 +
          (((C6584 * C695 - C82863 * C753 + C6585 * C1653 - C82639 * C1746) *
                C1647 +
            (C6584 * C705 - C82863 * C758 + C6585 * C1658 - C82639 * C1750) *
                C1641 +
            (C6584 * C694 - C82863 * C754 + C6585 * C1654 - C82639 * C1747) *
                C1649 +
            (C6584 * C703 - C82863 * C759 + C6585 * C1660 - C82639 * C1751) *
                C1642 +
            (C6584 * C693 - C82863 * C755 + C6585 * C1655 - C82639 * C1748) *
                C1651 +
            (C6584 * C701 - C82863 * C760 + C6585 * C1662 - C82639 * C1752) *
                C82885) *
               C82864 +
           ((C6584 * C3348 - C82863 * C3441 + C6585 * C3345 - C82639 * C3442) *
                C1647 +
            (C6584 * C3360 - C82863 * C3447 + C6585 * C3354 - C82639 * C3448) *
                C1641 +
            (C6584 * C3347 - C82863 * C3443 + C6585 * C3344 - C82639 * C3444) *
                C1649 +
            (C6584 * C3358 - C82863 * C3449 + C6585 * C3352 - C82639 * C3450) *
                C1642 +
            (C6584 * C3346 - C82863 * C3445 + C6585 * C3343 - C82639 * C3446) *
                C1651 +
            (C6584 * C3356 - C82863 * C3451 + C6585 * C3350 - C82639 * C3452) *
                C82885) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19057 * C169 - C19131 * C102 + C19058 * C753 - C19132 * C695 +
             C19059 * C1746 - C19133 * C1653 + C82871 * C2653 -
             C19134 * C2527) *
                C15405 +
            (C19057 * C175 - C19131 * C109 + C19058 * C758 - C19132 * C705 +
             C19059 * C1750 - C19133 * C1658 + C82871 * C2656 -
             C19134 * C2533) *
                C82523) *
               C82864 +
           ((C19057 * C1213 - C19131 * C1155 + C19058 * C3441 - C19132 * C3348 +
             C19059 * C3442 - C19133 * C3345 + C82871 * C16353 -
             C19134 * C16304) *
                C15405 +
            (C19057 * C1218 - C19131 * C1165 + C19058 * C3447 - C19132 * C3360 +
             C19059 * C3448 - C19133 * C3354 + C82871 * C16355 -
             C19134 * C16308) *
                C82523) *
               C82679) *
              C82938 * C688 +
          (((C19131 * C695 - C19057 * C753 + C19132 * C1653 - C19058 * C1746 +
             C19133 * C2527 - C19059 * C2653 + C19134 * C15407 -
             C82871 * C15462) *
                C15405 +
            (C19131 * C705 - C19057 * C758 + C19132 * C1658 - C19058 * C1750 +
             C19133 * C2533 - C19059 * C2656 + C19134 * C15410 -
             C82871 * C15464) *
                C82523) *
               C82864 +
           ((C19131 * C3348 - C19057 * C3441 + C19132 * C3345 - C19058 * C3442 +
             C19133 * C16304 - C19059 * C16353 + C19134 * C16303 -
             C82871 * C16354) *
                C15405 +
            (C19131 * C3360 - C19057 * C3447 + C19132 * C3354 - C19058 * C3448 +
             C19133 * C16308 - C19059 * C16355 + C19134 * C16306 -
             C82871 * C16356) *
                C82523) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[64] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C1647 +
            (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
                C1641 +
            (C8610 - C8611 + C8612 - C8613) * C1649 +
            (C8614 - C8615 + C8616 - C8617) * C1642 +
            (C8618 - C8619 + C8620 - C8621) * C1651 +
            (C8622 - C8623 + C8624 - C8625) * C82885) *
               C82863 +
           ((C11640 - C11641 + C11642 - C11643) * C1647 +
            (C11644 - C11645 + C11646 - C11647) * C1641 +
            (C10649 - C10650 + C10651 - C10652) * C1649 +
            (C10653 - C10654 + C10655 - C10656) * C1642 +
            (C10657 - C10658 + C10659 - C10660) * C1651 +
            (C10661 - C10662 + C10663 - C10664) * C82885) *
               C82639) *
              C82938 * C688 +
          (((C11641 - C11640 + C11643 - C11642) * C1647 +
            (C11645 - C11644 + C11647 - C11646) * C1641 +
            (C10650 - C10649 + C10652 - C10651) * C1649 +
            (C10654 - C10653 + C10656 - C10655) * C1642 +
            (C10658 - C10657 + C10660 - C10659) * C1651 +
            (C10662 - C10661 + C10664 - C10663) * C82885) *
               C82863 +
           ((C8607 * C1653 - C82864 * C1852 + C8608 * C3345 - C82679 * C3530) *
                C1647 +
            (C8607 * C1658 - C82864 * C1856 + C8608 * C3354 - C82679 * C3536) *
                C1641 +
            (C8607 * C1654 - C82864 * C1853 + C8608 * C3344 - C82679 * C3531) *
                C1649 +
            (C8607 * C1660 - C82864 * C1857 + C8608 * C3352 - C82679 * C3537) *
                C1642 +
            (C8607 * C1655 - C82864 * C1854 + C8608 * C3343 - C82679 * C3532) *
                C1651 +
            (C8607 * C1662 - C82864 * C1858 + C8608 * C3350 - C82679 * C3538) *
                C82885) *
               C82639) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C15405 +
            (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
                C82523) *
               C19057 +
           ((C11640 - C11641 + C11642 - C11643) * C15405 +
            (C11644 - C11645 + C11646 - C11647) * C82523) *
               C19058 +
           ((C22222 - C22223 + C22224 - C22225) * C15405 +
            (C22226 - C22227 + C22228 - C22229) * C82523) *
               C19059 +
           ((C24573 - C24574 + C24575 - C24576) * C15405 +
            (C24577 - C24578 + C24579 - C24580) * C82523) *
               C82871) *
              C82938 * C688 +
          (((C11641 - C11640 + C11643 - C11642) * C15405 +
            (C11645 - C11644 + C11647 - C11646) * C82523) *
               C19057 +
           ((C22223 - C22222 + C22225 - C22224) * C15405 +
            (C22227 - C22226 + C22229 - C22228) * C82523) *
               C19058 +
           ((C24574 - C24573 + C24576 - C24575) * C15405 +
            (C24578 - C24577 + C24580 - C24579) * C82523) *
               C19059 +
           ((C8607 * C15407 - C82864 * C15508 + C8608 * C16303 -
             C82679 * C16400) *
                C15405 +
            (C8607 * C15410 - C82864 * C15510 + C8608 * C16306 -
             C82679 * C16402) *
                C82523) *
               C82871) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[64] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
             C82885 * C112 - C1651 * C104) *
                C6584 +
            (C1641 * C316 - C1647 * C310 + C1642 * C317 - C1649 * C311 +
             C82885 * C318 - C1651 * C312) *
                C82863 +
            (C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C6585 +
            (C2834 - C2835 + C2836 - C2837 + C2838 - C2839) * C82639) *
               C82864 +
           ((C5991 - C5992 + C5993 - C5994 + C5995 - C5996) * C6584 +
            (C5997 - C5998 + C5999 - C6000 + C6001 - C6002) * C82863 +
            (C11746 - C11747 + C11748 - C11749 + C11750 - C11751) * C6585 +
            (C11752 - C11753 + C11754 - C11755 + C11756 - C11757) * C82639) *
               C82679) *
              C82938 * C688 +
          (((C2829 - C2828 + C2831 - C2830 + C2833 - C2832) * C6584 +
            (C2835 - C2834 + C2837 - C2836 + C2839 - C2838) * C82863 +
            (C2841 - C2840 + C2843 - C2842 + C2845 - C2844) * C6585 +
            (C2847 - C2846 + C2849 - C2848 + C2851 - C2850) * C82639) *
               C82864 +
           ((C11747 - C11746 + C11749 - C11748 + C11751 - C11750) * C6584 +
            (C11753 - C11752 + C11755 - C11754 + C11757 - C11756) * C82863 +
            (C1647 * C3345 - C1641 * C3353 + C1649 * C3344 - C1642 * C3351 +
             C1651 * C3343 - C82885 * C3349) *
                C6585 +
            (C1647 * C3616 - C1641 * C3622 + C1649 * C3617 - C1642 * C3623 +
             C1651 * C3618 - C82885 * C3624) *
                C82639) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C19131 +
            (C82523 * C316 - C15405 * C310) * C19057 +
            (C16004 - C16005) * C19132 + (C16006 - C16007) * C19058 +
            (C16008 - C16009) * C19133 + (C16010 - C16011) * C19059 +
            (C16012 - C16013) * C19134 + (C16014 - C16015) * C82871) *
               C82864 +
           ((C18542 - C18543) * C19131 + (C18544 - C18545) * C19057 +
            (C17734 - C17735) * C19132 + (C17736 - C17737) * C19058 +
            (C17738 - C17739) * C19133 + (C17740 - C17741) * C19059 +
            (C24647 - C24648) * C19134 + (C24649 - C24650) * C82871) *
               C82679) *
              C82938 * C688 +
          (((C16005 - C16004) * C19131 + (C16007 - C16006) * C19057 +
            (C16009 - C16008) * C19132 + (C16011 - C16010) * C19058 +
            (C16013 - C16012) * C19133 + (C16015 - C16014) * C19059 +
            (C16017 - C16016) * C19134 + (C16019 - C16018) * C82871) *
               C82864 +
           ((C17735 - C17734) * C19131 + (C17737 - C17736) * C19057 +
            (C17739 - C17738) * C19132 + (C17741 - C17740) * C19058 +
            (C24648 - C24647) * C19133 + (C24650 - C24649) * C19059 +
            (C15405 * C16303 - C82523 * C16305) * C19134 +
            (C15405 * C16446 - C82523 * C16448) * C82871) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[64] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6584 * C169 - C6812 * C102 - C6584 * C310 + C82863 * C365 +
             C6585 * C753 - C6813 * C695 - C6585 * C857 + C82639 * C913) *
                C1641 +
            (C6851 + C6852) * C1642 + (C6853 + C6854) * C82885) *
               C82864 +
           ((C6584 * C1213 - C6812 * C1155 - C6584 * C1317 + C82863 * C1373 +
             C6585 * C3441 - C6813 * C3348 - C6585 * C3613 + C82639 * C3704) *
                C1641 +
            (C10885 + C10886) * C1642 + (C10887 + C10888) * C82885) *
               C82679) *
              C82938 * C688 -
          (((C6585 * C3446 - C6813 * C3343 - C6585 * C3618 + C82639 * C3699 +
             C6584 * C3445 - C6812 * C3346 - C6584 * C3615 + C82863 * C3700) *
                C82885 +
            (C6585 * C3444 - C6813 * C3344 - C6585 * C3617 + C82639 * C3701 +
             C6584 * C3443 - C6812 * C3347 - C6584 * C3614 + C82863 * C3702) *
                C1642 +
            (C6585 * C3442 - C6813 * C3345 - C6585 * C3616 + C82639 * C3703 +
             C6584 * C3441 - C6812 * C3348 - C6584 * C3613 + C82863 * C3704) *
                C1641) *
               C82679 +
           ((C6585 * C1748 - C6813 * C1655 - C6585 * C1952 + C82639 * C2037 +
             C6584 * C755 - C6812 * C693 - C6584 * C859 + C82863 * C911) *
                C82885 +
            (C6585 * C1747 - C6813 * C1654 - C6585 * C1951 + C82639 * C2036 +
             C6584 * C754 - C6812 * C694 - C6584 * C858 + C82863 * C912) *
                C1642 +
            (C6585 * C1746 - C6813 * C1653 - C6585 * C1950 + C82639 * C2035 +
             C6584 * C753 - C6812 * C695 - C6584 * C857 + C82863 * C913) *
                C1641) *
               C82864) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C19131 * C169 - C19353 * C102 - C19131 * C310 + C19057 * C365 +
            C19132 * C753 - C19354 * C695 - C19132 * C857 + C19058 * C913 +
            C19133 * C1746 - C19355 * C1653 - C19133 * C1950 + C19059 * C2035 +
            C19134 * C2653 - C19356 * C2527 - C19134 * C2821 + C82871 * C2927) *
               C82523 * C82864 +
           (C19131 * C1213 - C19353 * C1155 - C19131 * C1317 + C19057 * C1373 +
            C19132 * C3441 - C19354 * C3348 - C19132 * C3613 + C19058 * C3704 +
            C19133 * C3442 - C19355 * C3345 - C19133 * C3616 + C19059 * C3703 +
            C19134 * C16353 - C19356 * C16304 - C19134 * C16445 +
            C82871 * C16492) *
               C82523 * C82679) *
              C82938 * C688 -
          ((C19134 * C16354 - C19356 * C16303 - C19134 * C16446 +
            C82871 * C16491 + C19133 * C16353 - C19355 * C16304 -
            C19133 * C16445 + C19059 * C16492 + C19132 * C3442 -
            C19354 * C3345 - C19132 * C3616 + C19058 * C3703 + C19131 * C3441 -
            C19353 * C3348 - C19131 * C3613 + C19057 * C3704) *
               C82523 * C82679 +
           (C19134 * C15462 - C19356 * C15407 - C19134 * C15554 +
            C82871 * C15605 + C19133 * C2653 - C19355 * C2527 - C19133 * C2821 +
            C19059 * C2927 + C19132 * C1746 - C19354 * C1653 - C19132 * C1950 +
            C19058 * C2035 + C19131 * C753 - C19353 * C695 - C19131 * C857 +
            C19057 * C913) *
               C82523 * C82864) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[64] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C6584 +
            (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
                C82863 +
            (C11640 - C11641 + C11642 - C11643) * C6585 +
            (C11954 - C11955 + C11956 - C11957) * C82639) *
               C1641 +
           ((C8610 - C8611 + C8612 - C8613) * C6584 +
            (C8839 - C8840 + C8841 - C8842) * C82863 +
            (C10649 - C10650 + C10651 - C10652) * C6585 +
            (C10987 - C10988 + C10989 - C10990) * C82639) *
               C1642 +
           ((C8618 - C8619 + C8620 - C8621) * C6584 +
            (C8843 - C8844 + C8845 - C8846) * C82863 +
            (C10657 - C10658 + C10659 - C10660) * C6585 +
            (C10991 - C10992 + C10993 - C10994) * C82639) *
               C82885) *
              C82938 * C688 +
          (((C11641 - C11640 + C11643 - C11642) * C6584 +
            (C11955 - C11954 + C11957 - C11956) * C82863 +
            (C8607 * C1653 - C82864 * C1852 + C8608 * C3345 - C82679 * C3530) *
                C6585 +
            (C8607 * C1950 - C82864 * C2155 + C8608 * C3616 - C82679 * C3780) *
                C82639) *
               C1641 +
           ((C10650 - C10649 + C10652 - C10651) * C6584 +
            (C10988 - C10987 + C10990 - C10989) * C82863 +
            (C8607 * C1654 - C82864 * C1853 + C8608 * C3344 - C82679 * C3531) *
                C6585 +
            (C8607 * C1951 - C82864 * C2156 + C8608 * C3617 - C82679 * C3782) *
                C82639) *
               C1642 +
           ((C10658 - C10657 + C10660 - C10659) * C6584 +
            (C10992 - C10991 + C10994 - C10993) * C82863 +
            (C8607 * C1655 - C82864 * C1854 + C8608 * C3343 - C82679 * C3532) *
                C6585 +
            (C8607 * C1952 - C82864 * C2157 + C8608 * C3618 - C82679 * C3784) *
                C82639) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
               C19131 +
           (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
               C19057 +
           (C11640 - C11641 + C11642 - C11643) * C19132 +
           (C11954 - C11955 + C11956 - C11957) * C19058 +
           (C22222 - C22223 + C22224 - C22225) * C19133 +
           (C22540 - C22541 + C22542 - C22543) * C19059 +
           (C24573 - C24574 + C24575 - C24576) * C19134 +
           (C24783 - C24784 + C24785 - C24786) * C82871) *
              C82523 * C82938 * C688 +
          ((C11641 - C11640 + C11643 - C11642) * C19131 +
           (C11955 - C11954 + C11957 - C11956) * C19057 +
           (C22223 - C22222 + C22225 - C22224) * C19132 +
           (C22541 - C22540 + C22543 - C22542) * C19058 +
           (C24574 - C24573 + C24576 - C24575) * C19133 +
           (C24784 - C24783 + C24786 - C24785) * C19059 +
           (C8607 * C15407 - C82864 * C15508 + C8608 * C16303 -
            C82679 * C16400) *
               C19134 +
           (C8607 * C15554 - C82864 * C15649 + C8608 * C16446 -
            C82679 * C16536) *
               C82871) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezx[64] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
             C82885 * C112 - C1651 * C104) *
                C8607 +
            (C1641 * C503 - C1647 * C497 + C1642 * C504 - C1649 * C498 +
             C82885 * C505 - C1651 * C499) *
                C82864 +
            (C5991 - C5992 + C5993 - C5994 + C5995 - C5996) * C8608 +
            (C6269 - C6270 + C6271 - C6272 + C6273 - C6274) * C82679) *
               C82863 +
           ((C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C8607 +
            (C3090 - C3091 + C3092 - C3093 + C3094 - C3095) * C82864 +
            (C11746 - C11747 + C11748 - C11749 + C11750 - C11751) * C8608 +
            (C12056 - C12057 + C12058 - C12059 + C12060 - C12061) * C82679) *
               C82639) *
              C82938 * C688 +
          (((C2829 - C2828 + C2831 - C2830 + C2833 - C2832) * C8607 +
            (C3091 - C3090 + C3093 - C3092 + C3095 - C3094) * C82864 +
            (C11747 - C11746 + C11749 - C11748 + C11751 - C11750) * C8608 +
            (C12057 - C12056 + C12059 - C12058 + C12061 - C12060) * C82679) *
               C82863 +
           ((C2841 - C2840 + C2843 - C2842 + C2845 - C2844) * C8607 +
            (C3097 - C3096 + C3099 - C3098 + C3101 - C3100) * C82864 +
            (C1647 * C3345 - C1641 * C3353 + C1649 * C3344 - C1642 * C3351 +
             C1651 * C3343 - C82885 * C3349) *
                C8608 +
            (C1647 * C3862 - C1641 * C3868 + C1649 * C3863 - C1642 * C3869 +
             C1651 * C3864 - C82885 * C3870) *
                C82679) *
               C82639) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C8607 +
            (C82523 * C503 - C15405 * C497) * C82864 +
            (C18542 - C18543) * C8608 + (C18822 - C18823) * C82679) *
               C19057 +
           ((C16004 - C16005) * C8607 + (C16154 - C16155) * C82864 +
            (C17734 - C17735) * C8608 + (C17988 - C17989) * C82679) *
               C19058 +
           ((C16008 - C16009) * C8607 + (C16156 - C16157) * C82864 +
            (C17738 - C17739) * C8608 + (C17992 - C17993) * C82679) *
               C19059 +
           ((C16012 - C16013) * C8607 + (C16158 - C16159) * C82864 +
            (C24647 - C24648) * C8608 + (C24853 - C24854) * C82679) *
               C82871) *
              C82938 * C688 +
          (((C16005 - C16004) * C8607 + (C16155 - C16154) * C82864 +
            (C17735 - C17734) * C8608 + (C17989 - C17988) * C82679) *
               C19057 +
           ((C16009 - C16008) * C8607 + (C16157 - C16156) * C82864 +
            (C17739 - C17738) * C8608 + (C17993 - C17992) * C82679) *
               C19058 +
           ((C16013 - C16012) * C8607 + (C16159 - C16158) * C82864 +
            (C24648 - C24647) * C8608 + (C24854 - C24853) * C82679) *
               C19059 +
           ((C16017 - C16016) * C8607 + (C16161 - C16160) * C82864 +
            (C15405 * C16303 - C82523 * C16305) * C8608 +
            (C15405 * C16580 - C82523 * C16582) * C82679) *
               C82871) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[64] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C8607 +
            (C82863 * C551 - C6584 * C497 + C82639 * C1055 - C6585 * C1003) *
                C82864 +
            (C82863 * C1213 - C6584 * C1155 + C82639 * C3441 - C6585 * C3348) *
                C8608 +
            (C82863 * C1515 - C6584 * C1463 + C82639 * C3945 - C6585 * C3859) *
                C82679) *
               C1641 +
           ((C6587 - C6588 + C6589 - C6590) * C8607 +
            (C7057 - C7058 + C7059 - C7060) * C82864 +
            (C10535 - C10536 + C10537 - C10538) * C8608 +
            (C11191 - C11192 + C11193 - C11194) * C82679) *
               C1642 +
           ((C6595 - C6596 + C6597 - C6598) * C8607 +
            (C7061 - C7062 + C7063 - C7064) * C82864 +
            (C10543 - C10544 + C10545 - C10546) * C8608 +
            (C11195 - C11196 + C11197 - C11198) * C82679) *
               C82885) *
              C82938 * C688 +
          (((C6584 * C695 - C82863 * C753 + C6585 * C1653 - C82639 * C1746) *
                C8607 +
            (C6584 * C1003 - C82863 * C1055 + C6585 * C2241 - C82639 * C2323) *
                C82864 +
            (C6584 * C3348 - C82863 * C3441 + C6585 * C3345 - C82639 * C3442) *
                C8608 +
            (C6584 * C3859 - C82863 * C3945 + C6585 * C3862 - C82639 * C3946) *
                C82679) *
               C1641 +
           ((C6584 * C694 - C82863 * C754 + C6585 * C1654 - C82639 * C1747) *
                C8607 +
            (C6584 * C1004 - C82863 * C1056 + C6585 * C2242 - C82639 * C2324) *
                C82864 +
            (C6584 * C3347 - C82863 * C3443 + C6585 * C3344 - C82639 * C3444) *
                C8608 +
            (C6584 * C3860 - C82863 * C3947 + C6585 * C3863 - C82639 * C3948) *
                C82679) *
               C1642 +
           ((C6584 * C693 - C82863 * C755 + C6585 * C1655 - C82639 * C1748) *
                C8607 +
            (C6584 * C1005 - C82863 * C1057 + C6585 * C2243 - C82639 * C2325) *
                C82864 +
            (C6584 * C3346 - C82863 * C3445 + C6585 * C3343 - C82639 * C3446) *
                C8608 +
            (C6584 * C3861 - C82863 * C3949 + C6585 * C3864 - C82639 * C3950) *
                C82679) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C19057 * C169 - C19131 * C102 + C19058 * C753 - C19132 * C695 +
            C19059 * C1746 - C19133 * C1653 + C82871 * C2653 - C19134 * C2527) *
               C8607 +
           (C19057 * C551 - C19131 * C497 + C19058 * C1055 - C19132 * C1003 +
            C19059 * C2323 - C19133 * C2241 + C82871 * C3175 - C19134 * C3083) *
               C82864 +
           (C19057 * C1213 - C19131 * C1155 + C19058 * C3441 - C19132 * C3348 +
            C19059 * C3442 - C19133 * C3345 + C82871 * C16353 -
            C19134 * C16304) *
               C8608 +
           (C19057 * C1515 - C19131 * C1463 + C19058 * C3945 - C19132 * C3859 +
            C19059 * C3946 - C19133 * C3862 + C82871 * C16625 -
            C19134 * C16579) *
               C82679) *
              C82523 * C82938 * C688 +
          ((C19131 * C695 - C19057 * C753 + C19132 * C1653 - C19058 * C1746 +
            C19133 * C2527 - C19059 * C2653 + C19134 * C15407 -
            C82871 * C15462) *
               C8607 +
           (C19131 * C1003 - C19057 * C1055 + C19132 * C2241 - C19058 * C2323 +
            C19133 * C3083 - C19059 * C3175 + C19134 * C15693 -
            C82871 * C15739) *
               C82864 +
           (C19131 * C3348 - C19057 * C3441 + C19132 * C3345 - C19058 * C3442 +
            C19133 * C16304 - C19059 * C16353 + C19134 * C16303 -
            C82871 * C16354) *
               C8608 +
           (C19131 * C3859 - C19057 * C3945 + C19132 * C3862 - C19058 * C3946 +
            C19133 * C16579 - C19059 * C16625 + C19134 * C16580 -
            C82871 * C16626) *
               C82679) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[64] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
             C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
                C82863 +
            (C12270 + C12271) * C82639) *
               C1641 +
           ((C9089 + C9090) * C82863 + (C11321 + C11322) * C82639) * C1642 +
           ((C9091 + C9092) * C82863 + (C11323 + C11324) * C82639) * C82885) *
              C82938 * C688 -
          (((C8608 * C3532 - C9051 * C3343 - C8608 * C3864 + C82679 * C4025 +
             C8607 * C1854 - C9050 * C1655 - C8607 * C2243 + C82864 * C2415) *
                C82639 +
            (C11324 + C11323) * C82863) *
               C82885 +
           ((C8608 * C3531 - C9051 * C3344 - C8608 * C3863 + C82679 * C4027 +
             C8607 * C1853 - C9050 * C1654 - C8607 * C2242 + C82864 * C2414) *
                C82639 +
            (C11322 + C11321) * C82863) *
               C1642 +
           ((C8608 * C3530 - C9051 * C3345 - C8608 * C3862 + C82679 * C4029 +
             C8607 * C1852 - C9050 * C1653 - C8607 * C2241 + C82864 * C2413) *
                C82639 +
            (C12271 + C12270) * C82863) *
               C1641) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
            C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
               C19057 +
           (C12270 + C12271) * C19058 + (C22858 + C22859) * C19059 +
           (C24999 + C25000) * C82871) *
              C82523 * C82938 * C688 -
          ((C8608 * C16400 - C9051 * C16303 - C8608 * C16580 + C82679 * C16669 +
            C8607 * C15508 - C9050 * C15407 - C8607 * C15693 +
            C82864 * C15783) *
               C82871 +
           (C25000 + C24999) * C19059 + (C22859 + C22858) * C19058 +
           (C12271 + C12270) * C19057) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1647 * C108 - C1648 * C102 - C1647 * C109 + C1641 * C120 +
             C1649 * C110 - C1650 * C103 - C1649 * C111 + C1642 * C121 +
             C1651 * C112 - C1652 * C104 - C1651 * C113 + C82885 * C122) *
                C82864 +
            (C5737 + C5738 + C5739) * C82679) *
               C82863 +
           ((C2574 + C2575 + C2576) * C82864 +
            (C11441 + C11442 + C11443) * C82679) *
               C82639) *
              C1149 -
          (((C1651 * C4977 - C1652 * C4974 - C1651 * C4978 + C82885 * C4983 +
             C1649 * C4979 - C1650 * C4975 - C1649 * C4980 + C1642 * C4984 +
             C1647 * C4981 - C1648 * C4976 - C1647 * C4982 + C1641 * C4985) *
                C82679 +
            (C11443 + C11442 + C11441) * C82864) *
               C82639 +
           ((C5742 + C5741 + C5740) * C82679 +
            (C5739 + C5738 + C5737) * C82864) *
               C82863) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C82864 +
            C18282 * C82679) *
               C19057 +
           (C24428 + C24429) * C19058 + (C24430 + C24431) * C19059 +
           (C24432 + C24440) * C82871) *
              C1149 -
          (((C15405 * C17444 - C15406 * C17443 - C15405 * C17445 +
             C82523 * C17446) *
                C82679 +
            C24439 * C82864) *
               C82871 +
           (C17477 * C82679 + C17476 * C82864) * C19059 +
           (C17475 * C82679 + C17474 * C82864) * C19058 +
           (C18283 * C82679 + C18282 * C82864) * C19057) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C1647 +
            (C82863 * C175 - C6584 * C109 + C82639 * C758 - C6585 * C705) *
                C1641 +
            (C6587 - C6588 + C6589 - C6590) * C1649 +
            (C6591 - C6592 + C6593 - C6594) * C1642 +
            (C6595 - C6596 + C6597 - C6598) * C1651 +
            (C6599 - C6600 + C6601 - C6602) * C82885) *
               C82864 +
           ((C12468 - C12469 + C12470 - C12471) * C1647 +
            (C12472 - C12473 + C12474 - C12475) * C1641 +
            (C10535 - C10536 + C10537 - C10538) * C1649 +
            (C10539 - C10540 + C10541 - C10542) * C1642 +
            (C10543 - C10544 + C10545 - C10546) * C1651 +
            (C10547 - C10548 + C10549 - C10550) * C82885) *
               C82679) *
              C1149 +
          (((C12469 - C12468 + C12471 - C12470) * C1647 +
            (C12473 - C12472 + C12475 - C12474) * C1641 +
            (C10536 - C10535 + C10538 - C10537) * C1649 +
            (C10540 - C10539 + C10542 - C10541) * C1642 +
            (C10544 - C10543 + C10546 - C10545) * C1651 +
            (C10548 - C10547 + C10550 - C10549) * C82885) *
               C82864 +
           ((C6584 * C4108 - C82863 * C4198 + C6585 * C4976 - C82639 * C5060) *
                C1647 +
            (C6584 * C4113 - C82863 * C4202 + C6585 * C4982 - C82639 * C5063) *
                C1641 +
            (C6584 * C4109 - C82863 * C4199 + C6585 * C4975 - C82639 * C5061) *
                C1649 +
            (C6584 * C4115 - C82863 * C4203 + C6585 * C4980 - C82639 * C5064) *
                C1642 +
            (C6584 * C4110 - C82863 * C4200 + C6585 * C4974 - C82639 * C5062) *
                C1651 +
            (C6584 * C4117 - C82863 * C4204 + C6585 * C4978 - C82639 * C5065) *
                C82885) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19057 * C169 - C19131 * C102 + C19058 * C753 - C19132 * C695 +
             C19059 * C1746 - C19133 * C1653 + C82871 * C2653 -
             C19134 * C2527) *
                C15405 +
            (C19057 * C175 - C19131 * C109 + C19058 * C758 - C19132 * C705 +
             C19059 * C1750 - C19133 * C1658 + C82871 * C2656 -
             C19134 * C2533) *
                C82523) *
               C82864 +
           ((C25133 - C25134 + C25135 - C25136 + C25137 - C25138 + C25139 -
             C25140) *
                C15405 +
            (C25141 - C25142 + C25143 - C25144 + C25145 - C25146 + C25147 -
             C25148) *
                C82523) *
               C82679) *
              C1149 +
          (((C25134 - C25133 + C25136 - C25135 + C25138 - C25137 + C25140 -
             C25139) *
                C15405 +
            (C25142 - C25141 + C25144 - C25143 + C25146 - C25145 + C25148 -
             C25147) *
                C82523) *
               C82864 +
           ((C19131 * C4108 - C19057 * C4198 + C19132 * C4976 - C19058 * C5060 +
             C19133 * C16745 - C19059 * C16827 + C19134 * C17443 -
             C82871 * C17555) *
                C15405 +
            (C19131 * C4113 - C19057 * C4202 + C19132 * C4982 - C19058 * C5063 +
             C19133 * C16748 - C19059 * C16829 + C19134 * C17445 -
             C82871 * C17556) *
                C82523) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C1647 +
            (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
                C1641 +
            (C8610 - C8611 + C8612 - C8613) * C1649 +
            (C8614 - C8615 + C8616 - C8617) * C1642 +
            (C8618 - C8619 + C8620 - C8621) * C1651 +
            (C8622 - C8623 + C8624 - C8625) * C82885) *
               C82863 +
           ((C11640 - C11641 + C11642 - C11643) * C1647 +
            (C11644 - C11645 + C11646 - C11647) * C1641 +
            (C10649 - C10650 + C10651 - C10652) * C1649 +
            (C10653 - C10654 + C10655 - C10656) * C1642 +
            (C10657 - C10658 + C10659 - C10660) * C1651 +
            (C10661 - C10662 + C10663 - C10664) * C82885) *
               C82639) *
              C1149 +
          (((C8607 * C1155 - C82864 * C1265 + C8608 * C4108 - C82679 * C4299) *
                C1647 +
            (C8607 * C1165 - C82864 * C1270 + C8608 * C4113 - C82679 * C4303) *
                C1641 +
            (C8607 * C1154 - C82864 * C1266 + C8608 * C4109 - C82679 * C4300) *
                C1649 +
            (C8607 * C1163 - C82864 * C1271 + C8608 * C4115 - C82679 * C4304) *
                C1642 +
            (C8607 * C1153 - C82864 * C1267 + C8608 * C4110 - C82679 * C4301) *
                C1651 +
            (C8607 * C1161 - C82864 * C1272 + C8608 * C4117 - C82679 * C4305) *
                C82885) *
               C82863 +
           ((C8607 * C3348 - C82864 * C3527 + C8608 * C4976 - C82679 * C5140) *
                C1647 +
            (C8607 * C3360 - C82864 * C3533 + C8608 * C4982 - C82679 * C5143) *
                C1641 +
            (C8607 * C3347 - C82864 * C3528 + C8608 * C4975 - C82679 * C5141) *
                C1649 +
            (C8607 * C3358 - C82864 * C3534 + C8608 * C4980 - C82679 * C5144) *
                C1642 +
            (C8607 * C3346 - C82864 * C3529 + C8608 * C4974 - C82679 * C5142) *
                C1651 +
            (C8607 * C3356 - C82864 * C3535 + C8608 * C4978 - C82679 * C5145) *
                C82885) *
               C82639) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C15405 +
            (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
                C82523) *
               C19057 +
           ((C11640 - C11641 + C11642 - C11643) * C15405 +
            (C11644 - C11645 + C11646 - C11647) * C82523) *
               C19058 +
           ((C22222 - C22223 + C22224 - C22225) * C15405 +
            (C22226 - C22227 + C22228 - C22229) * C82523) *
               C19059 +
           ((C24573 - C24574 + C24575 - C24576) * C15405 +
            (C24577 - C24578 + C24579 - C24580) * C82523) *
               C82871) *
              C1149 +
          (((C8607 * C1155 - C82864 * C1265 + C8608 * C4108 - C82679 * C4299) *
                C15405 +
            (C8607 * C1165 - C82864 * C1270 + C8608 * C4113 - C82679 * C4303) *
                C82523) *
               C19057 +
           ((C8607 * C3348 - C82864 * C3527 + C8608 * C4976 - C82679 * C5140) *
                C15405 +
            (C8607 * C3360 - C82864 * C3533 + C8608 * C4982 - C82679 * C5143) *
                C82523) *
               C19058 +
           ((C8607 * C3345 - C82864 * C3530 + C8608 * C16745 -
             C82679 * C16905) *
                C15405 +
            (C8607 * C3354 - C82864 * C3536 + C8608 * C16748 -
             C82679 * C16907) *
                C82523) *
               C19059 +
           ((C8607 * C16304 - C82864 * C16399 + C8608 * C17443 -
             C82679 * C17631) *
                C15405 +
            (C8607 * C16308 - C82864 * C16401 + C8608 * C17445 -
             C82679 * C17632) *
                C82523) *
               C82871) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
             C82885 * C112 - C1651 * C104) *
                C6584 +
            (C1641 * C316 - C1647 * C310 + C1642 * C317 - C1649 * C311 +
             C82885 * C318 - C1651 * C312) *
                C82863 +
            (C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C6585 +
            (C2834 - C2835 + C2836 - C2837 + C2838 - C2839) * C82639) *
               C82864 +
           ((C5991 - C5992 + C5993 - C5994 + C5995 - C5996) * C6584 +
            (C5997 - C5998 + C5999 - C6000 + C6001 - C6002) * C82863 +
            (C11746 - C11747 + C11748 - C11749 + C11750 - C11751) * C6585 +
            (C11752 - C11753 + C11754 - C11755 + C11756 - C11757) * C82639) *
               C82679) *
              C1149 +
          (((C5992 - C5991 + C5994 - C5993 + C5996 - C5995) * C6584 +
            (C5998 - C5997 + C6000 - C5999 + C6002 - C6001) * C82863 +
            (C11747 - C11746 + C11749 - C11748 + C11751 - C11750) * C6585 +
            (C11753 - C11752 + C11755 - C11754 + C11757 - C11756) * C82639) *
               C82864 +
           ((C6004 - C6003 + C6006 - C6005 + C6008 - C6007) * C6584 +
            (C6010 - C6009 + C6012 - C6011 + C6014 - C6013) * C82863 +
            (C1647 * C4976 - C1641 * C4981 + C1649 * C4975 - C1642 * C4979 +
             C1651 * C4974 - C82885 * C4977) *
                C6585 +
            (C1647 * C5220 - C1641 * C5223 + C1649 * C5221 - C1642 * C5224 +
             C1651 * C5222 - C82885 * C5225) *
                C82639) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C19131 +
            (C82523 * C316 - C15405 * C310) * C19057 +
            (C16004 - C16005) * C19132 + (C16006 - C16007) * C19058 +
            (C16008 - C16009) * C19133 + (C16010 - C16011) * C19059 +
            (C16012 - C16013) * C19134 + (C16014 - C16015) * C82871) *
               C82864 +
           ((C18542 - C18543) * C19131 + (C18544 - C18545) * C19057 +
            (C17734 - C17735) * C19132 + (C17736 - C17737) * C19058 +
            (C17738 - C17739) * C19133 + (C17740 - C17741) * C19059 +
            (C24647 - C24648) * C19134 + (C24649 - C24650) * C82871) *
               C82679) *
              C1149 +
          (((C18543 - C18542) * C19131 + (C18545 - C18544) * C19057 +
            (C17735 - C17734) * C19132 + (C17737 - C17736) * C19058 +
            (C17739 - C17738) * C19133 + (C17741 - C17740) * C19059 +
            (C24648 - C24647) * C19134 + (C24650 - C24649) * C82871) *
               C82864 +
           ((C18547 - C18546) * C19131 + (C18549 - C18548) * C19057 +
            (C17743 - C17742) * C19132 + (C17745 - C17744) * C19058 +
            (C17747 - C17746) * C19133 + (C17749 - C17748) * C19059 +
            (C15405 * C17443 - C82523 * C17444) * C19134 +
            (C15405 * C17731 - C82523 * C17732) * C82871) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6584 * C169 - C6812 * C102 - C6584 * C310 + C82863 * C365 +
             C6585 * C753 - C6813 * C695 - C6585 * C857 + C82639 * C913) *
                C1641 +
            (C6851 + C6852) * C1642 + (C6853 + C6854) * C82885) *
               C82864 +
           ((C12782 + C12783) * C1641 + (C10885 + C10886) * C1642 +
            (C10887 + C10888) * C82885) *
               C82679) *
              C1149 -
          (((C6585 * C5062 - C6813 * C4974 - C6585 * C5222 + C82639 * C5300 +
             C6584 * C4200 - C6812 * C4110 - C6584 * C4407 + C82863 * C4489) *
                C82885 +
            (C6585 * C5061 - C6813 * C4975 - C6585 * C5221 + C82639 * C5301 +
             C6584 * C4199 - C6812 * C4109 - C6584 * C4406 + C82863 * C4488) *
                C1642 +
            (C6585 * C5060 - C6813 * C4976 - C6585 * C5220 + C82639 * C5302 +
             C6584 * C4198 - C6812 * C4108 - C6584 * C4405 + C82863 * C4487) *
                C1641) *
               C82679 +
           ((C10888 + C10887) * C82885 + (C10886 + C10885) * C1642 +
            (C12783 + C12782) * C1641) *
               C82864) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C19131 * C169 - C19353 * C102 - C19131 * C310 + C19057 * C365 +
            C19132 * C753 - C19354 * C695 - C19132 * C857 + C19058 * C913 +
            C19133 * C1746 - C19355 * C1653 - C19133 * C1950 + C19059 * C2035 +
            C19134 * C2653 - C19356 * C2527 - C19134 * C2821 + C82871 * C2927) *
               C82523 * C82864 +
           (C25371 + C25372 + C25373 + C25374) * C82523 * C82679) *
              C1149 -
          ((C19134 * C17555 - C19356 * C17443 - C19134 * C17731 +
            C82871 * C17823 + C19133 * C16827 - C19355 * C16745 -
            C19133 * C16983 + C19059 * C17061 + C19132 * C5060 -
            C19354 * C4976 - C19132 * C5220 + C19058 * C5302 + C19131 * C4198 -
            C19353 * C4108 - C19131 * C4405 + C19057 * C4487) *
               C82523 * C82679 +
           (C25374 + C25373 + C25372 + C25371) * C82523 * C82864) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C6584 +
            (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
                C82863 +
            (C11640 - C11641 + C11642 - C11643) * C6585 +
            (C11954 - C11955 + C11956 - C11957) * C82639) *
               C1641 +
           ((C8610 - C8611 + C8612 - C8613) * C6584 +
            (C8839 - C8840 + C8841 - C8842) * C82863 +
            (C10649 - C10650 + C10651 - C10652) * C6585 +
            (C10987 - C10988 + C10989 - C10990) * C82639) *
               C1642 +
           ((C8618 - C8619 + C8620 - C8621) * C6584 +
            (C8843 - C8844 + C8845 - C8846) * C82863 +
            (C10657 - C10658 + C10659 - C10660) * C6585 +
            (C10991 - C10992 + C10993 - C10994) * C82639) *
               C82885) *
              C1149 +
          (((C8607 * C1155 - C82864 * C1265 + C8608 * C4108 - C82679 * C4299) *
                C6584 +
            (C8607 * C1317 - C82864 * C1416 + C8608 * C4405 - C82679 * C4593) *
                C82863 +
            (C8607 * C3348 - C82864 * C3527 + C8608 * C4976 - C82679 * C5140) *
                C6585 +
            (C8607 * C3613 - C82864 * C3779 + C8608 * C5220 - C82679 * C5377) *
                C82639) *
               C1641 +
           ((C8607 * C1154 - C82864 * C1266 + C8608 * C4109 - C82679 * C4300) *
                C6584 +
            (C8607 * C1318 - C82864 * C1417 + C8608 * C4406 - C82679 * C4594) *
                C82863 +
            (C8607 * C3347 - C82864 * C3528 + C8608 * C4975 - C82679 * C5141) *
                C6585 +
            (C8607 * C3614 - C82864 * C3781 + C8608 * C5221 - C82679 * C5378) *
                C82639) *
               C1642 +
           ((C8607 * C1153 - C82864 * C1267 + C8608 * C4110 - C82679 * C4301) *
                C6584 +
            (C8607 * C1319 - C82864 * C1418 + C8608 * C4407 - C82679 * C4595) *
                C82863 +
            (C8607 * C3346 - C82864 * C3529 + C8608 * C4974 - C82679 * C5142) *
                C6585 +
            (C8607 * C3615 - C82864 * C3783 + C8608 * C5222 - C82679 * C5379) *
                C82639) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
               C19131 +
           (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
               C19057 +
           (C11640 - C11641 + C11642 - C11643) * C19132 +
           (C11954 - C11955 + C11956 - C11957) * C19058 +
           (C22222 - C22223 + C22224 - C22225) * C19133 +
           (C22540 - C22541 + C22542 - C22543) * C19059 +
           (C24573 - C24574 + C24575 - C24576) * C19134 +
           (C24783 - C24784 + C24785 - C24786) * C82871) *
              C82523 * C1149 +
          ((C8607 * C1155 - C82864 * C1265 + C8608 * C4108 - C82679 * C4299) *
               C19131 +
           (C8607 * C1317 - C82864 * C1416 + C8608 * C4405 - C82679 * C4593) *
               C19057 +
           (C8607 * C3348 - C82864 * C3527 + C8608 * C4976 - C82679 * C5140) *
               C19132 +
           (C8607 * C3613 - C82864 * C3779 + C8608 * C5220 - C82679 * C5377) *
               C19058 +
           (C8607 * C3345 - C82864 * C3530 + C8608 * C16745 - C82679 * C16905) *
               C19133 +
           (C8607 * C3616 - C82864 * C3780 + C8608 * C16983 - C82679 * C17137) *
               C19059 +
           (C8607 * C16304 - C82864 * C16399 + C8608 * C17443 -
            C82679 * C17631) *
               C19134 +
           (C8607 * C16445 - C82864 * C16535 + C8608 * C17731 -
            C82679 * C17898) *
               C82871) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezx[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
             C82885 * C112 - C1651 * C104) *
                C8607 +
            (C1641 * C503 - C1647 * C497 + C1642 * C504 - C1649 * C498 +
             C82885 * C505 - C1651 * C499) *
                C82864 +
            (C5991 - C5992 + C5993 - C5994 + C5995 - C5996) * C8608 +
            (C6269 - C6270 + C6271 - C6272 + C6273 - C6274) * C82679) *
               C82863 +
           ((C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C8607 +
            (C3090 - C3091 + C3092 - C3093 + C3094 - C3095) * C82864 +
            (C11746 - C11747 + C11748 - C11749 + C11750 - C11751) * C8608 +
            (C12056 - C12057 + C12058 - C12059 + C12060 - C12061) * C82679) *
               C82639) *
              C1149 +
          (((C5992 - C5991 + C5994 - C5993 + C5996 - C5995) * C8607 +
            (C6270 - C6269 + C6272 - C6271 + C6274 - C6273) * C82864 +
            (C6004 - C6003 + C6006 - C6005 + C6008 - C6007) * C8608 +
            (C6276 - C6275 + C6278 - C6277 + C6280 - C6279) * C82679) *
               C82863 +
           ((C11747 - C11746 + C11749 - C11748 + C11751 - C11750) * C8607 +
            (C12057 - C12056 + C12059 - C12058 + C12061 - C12060) * C82864 +
            (C1647 * C4976 - C1641 * C4981 + C1649 * C4975 - C1642 * C4979 +
             C1651 * C4974 - C82885 * C4977) *
                C8608 +
            (C1647 * C5454 - C1641 * C5457 + C1649 * C5455 - C1642 * C5458 +
             C1651 * C5456 - C82885 * C5459) *
                C82679) *
               C82639) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C8607 +
            (C82523 * C503 - C15405 * C497) * C82864 +
            (C18542 - C18543) * C8608 + (C18822 - C18823) * C82679) *
               C19057 +
           ((C16004 - C16005) * C8607 + (C16154 - C16155) * C82864 +
            (C17734 - C17735) * C8608 + (C17988 - C17989) * C82679) *
               C19058 +
           ((C16008 - C16009) * C8607 + (C16156 - C16157) * C82864 +
            (C17738 - C17739) * C8608 + (C17992 - C17993) * C82679) *
               C19059 +
           ((C16012 - C16013) * C8607 + (C16158 - C16159) * C82864 +
            (C24647 - C24648) * C8608 + (C24853 - C24854) * C82679) *
               C82871) *
              C1149 +
          (((C18543 - C18542) * C8607 + (C18823 - C18822) * C82864 +
            (C18547 - C18546) * C8608 + (C18825 - C18824) * C82679) *
               C19057 +
           ((C17735 - C17734) * C8607 + (C17989 - C17988) * C82864 +
            (C17743 - C17742) * C8608 + (C17991 - C17990) * C82679) *
               C19058 +
           ((C17739 - C17738) * C8607 + (C17993 - C17992) * C82864 +
            (C17747 - C17746) * C8608 + (C17995 - C17994) * C82679) *
               C19059 +
           ((C24648 - C24647) * C8607 + (C24854 - C24853) * C82864 +
            (C15405 * C17443 - C82523 * C17444) * C8608 +
            (C15405 * C17985 - C82523 * C17986) * C82679) *
               C82871) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82863 * C169 - C6584 * C102 + C82639 * C753 - C6585 * C695) *
                C8607 +
            (C82863 * C551 - C6584 * C497 + C82639 * C1055 - C6585 * C1003) *
                C82864 +
            (C12468 - C12469 + C12470 - C12471) * C8608 +
            (C13078 - C13079 + C13080 - C13081) * C82679) *
               C1641 +
           ((C6587 - C6588 + C6589 - C6590) * C8607 +
            (C7057 - C7058 + C7059 - C7060) * C82864 +
            (C10535 - C10536 + C10537 - C10538) * C8608 +
            (C11191 - C11192 + C11193 - C11194) * C82679) *
               C1642 +
           ((C6595 - C6596 + C6597 - C6598) * C8607 +
            (C7061 - C7062 + C7063 - C7064) * C82864 +
            (C10543 - C10544 + C10545 - C10546) * C8608 +
            (C11195 - C11196 + C11197 - C11198) * C82679) *
               C82885) *
              C1149 +
          (((C12469 - C12468 + C12471 - C12470) * C8607 +
            (C13079 - C13078 + C13081 - C13080) * C82864 +
            (C6584 * C4108 - C82863 * C4198 + C6585 * C4976 - C82639 * C5060) *
                C8608 +
            (C6584 * C4683 - C82863 * C4765 + C6585 * C5454 - C82639 * C5534) *
                C82679) *
               C1641 +
           ((C10536 - C10535 + C10538 - C10537) * C8607 +
            (C11192 - C11191 + C11194 - C11193) * C82864 +
            (C6584 * C4109 - C82863 * C4199 + C6585 * C4975 - C82639 * C5061) *
                C8608 +
            (C6584 * C4684 - C82863 * C4766 + C6585 * C5455 - C82639 * C5535) *
                C82679) *
               C1642 +
           ((C10544 - C10543 + C10546 - C10545) * C8607 +
            (C11196 - C11195 + C11198 - C11197) * C82864 +
            (C6584 * C4110 - C82863 * C4200 + C6585 * C4974 - C82639 * C5062) *
                C8608 +
            (C6584 * C4685 - C82863 * C4767 + C6585 * C5456 - C82639 * C5536) *
                C82679) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C19057 * C169 - C19131 * C102 + C19058 * C753 - C19132 * C695 +
            C19059 * C1746 - C19133 * C1653 + C82871 * C2653 - C19134 * C2527) *
               C8607 +
           (C19057 * C551 - C19131 * C497 + C19058 * C1055 - C19132 * C1003 +
            C19059 * C2323 - C19133 * C2241 + C82871 * C3175 - C19134 * C3083) *
               C82864 +
           (C25133 - C25134 + C25135 - C25136 + C25137 - C25138 + C25139 -
            C25140) *
               C8608 +
           (C25573 - C25574 + C25575 - C25576 + C25577 - C25578 + C25579 -
            C25580) *
               C82679) *
              C82523 * C1149 +
          ((C25134 - C25133 + C25136 - C25135 + C25138 - C25137 + C25140 -
            C25139) *
               C8607 +
           (C25574 - C25573 + C25576 - C25575 + C25578 - C25577 + C25580 -
            C25579) *
               C82864 +
           (C19131 * C4108 - C19057 * C4198 + C19132 * C4976 - C19058 * C5060 +
            C19133 * C16745 - C19059 * C16827 + C19134 * C17443 -
            C82871 * C17555) *
               C8608 +
           (C19131 * C4683 - C19057 * C4765 + C19132 * C5454 - C19058 * C5534 +
            C19133 * C17213 - C19059 * C17291 + C19134 * C17985 -
            C82871 * C18069) *
               C82679) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
             C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
                C82863 +
            (C12270 + C12271) * C82639) *
               C1641 +
           ((C9089 + C9090) * C82863 + (C11321 + C11322) * C82639) * C1642 +
           ((C9091 + C9092) * C82863 + (C11323 + C11324) * C82639) * C82885) *
              C1149 -
          (((C8608 * C5142 - C9051 * C4974 - C8608 * C5456 + C82679 * C5611 +
             C8607 * C3529 - C9050 * C3346 - C8607 * C3861 + C82864 * C4026) *
                C82639 +
            (C8608 * C4301 - C9051 * C4110 - C8608 * C4685 + C82679 * C4856 +
             C8607 * C1267 - C9050 * C1153 - C8607 * C1465 + C82864 * C1564) *
                C82863) *
               C82885 +
           ((C8608 * C5141 - C9051 * C4975 - C8608 * C5455 + C82679 * C5612 +
             C8607 * C3528 - C9050 * C3347 - C8607 * C3860 + C82864 * C4028) *
                C82639 +
            (C8608 * C4300 - C9051 * C4109 - C8608 * C4684 + C82679 * C4855 +
             C8607 * C1266 - C9050 * C1154 - C8607 * C1464 + C82864 * C1565) *
                C82863) *
               C1642 +
           ((C8608 * C5140 - C9051 * C4976 - C8608 * C5454 + C82679 * C5613 +
             C8607 * C3527 - C9050 * C3348 - C8607 * C3859 + C82864 * C4030) *
                C82639 +
            (C8608 * C4299 - C9051 * C4108 - C8608 * C4683 + C82679 * C4854 +
             C8607 * C1265 - C9050 * C1155 - C8607 * C1463 + C82864 * C1566) *
                C82863) *
               C1641) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
            C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
               C19057 +
           (C12270 + C12271) * C19058 + (C22858 + C22859) * C19059 +
           (C24999 + C25000) * C82871) *
              C82523 * C1149 -
          ((C8608 * C17631 - C9051 * C17443 - C8608 * C17985 + C82679 * C18144 +
            C8607 * C16399 - C9050 * C16304 - C8607 * C16579 +
            C82864 * C16670) *
               C82871 +
           (C8608 * C16905 - C9051 * C16745 - C8608 * C17213 + C82679 * C17367 +
            C8607 * C3530 - C9050 * C3345 - C8607 * C3862 + C82864 * C4029) *
               C19059 +
           (C8608 * C5140 - C9051 * C4976 - C8608 * C5454 + C82679 * C5613 +
            C8607 * C3527 - C9050 * C3348 - C8607 * C3859 + C82864 * C4030) *
               C19058 +
           (C8608 * C4299 - C9051 * C4108 - C8608 * C4683 + C82679 * C4854 +
            C8607 * C1265 - C9050 * C1155 - C8607 * C1463 + C82864 * C1566) *
               C19057) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1647 * C108 - C1648 * C102 - C1647 * C109 + C1641 * C120 +
            C1649 * C110 - C1650 * C103 - C1649 * C111 + C1642 * C121 +
            C1651 * C112 - C1652 * C104 - C1651 * C113 + C82885 * C122) *
               C82592 * C82931 +
           (C1647 * C704 - C1648 * C695 - C1647 * C705 + C1641 * C710 +
            C1649 * C702 - C1650 * C694 - C1649 * C703 + C1642 * C709 +
            C1651 * C700 - C1652 * C693 - C1651 * C701 + C82885 * C708) *
               C82592 * C82916 +
           (C1647 * C1657 - C1648 * C1653 - C1647 * C1658 + C1641 * C1665 +
            C1649 * C1659 - C1650 * C1654 - C1649 * C1660 + C1642 * C1666 +
            C1651 * C1661 - C1652 * C1655 - C1651 * C1662 + C82885 * C1667) *
               C82592 * C82893) *
              C82938 * C82939 * C90 -
          ((C1651 * C1663 - C1652 * C1656 - C1651 * C1664 + C82885 * C1668 +
            C1649 * C1661 - C1650 * C1655 - C1649 * C1662 + C1642 * C1667 +
            C1647 * C1659 - C1648 * C1654 - C1647 * C1660 + C1641 * C1666) *
               C82592 * C82893 +
           (C1651 * C698 - C1652 * C692 - C1651 * C699 + C82885 * C707 +
            C1649 * C700 - C1650 * C693 - C1649 * C701 + C1642 * C708 +
            C1647 * C702 - C1648 * C694 - C1647 * C703 + C1641 * C709) *
               C82592 * C82916 +
           (C1651 * C114 - C1652 * C105 - C1651 * C115 + C82885 * C123 +
            C1649 * C112 - C1650 * C104 - C1649 * C113 + C1642 * C122 +
            C1647 * C110 - C1648 * C103 - C1647 * C111 + C1641 * C121) *
               C82592 * C82931) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C92 * C108 - C93 * C102 - C92 * C109 + C81 * C120 + C94 * C110 -
           C95 * C103 - C94 * C111 + C82 * C121 + C96 * C112 - C97 * C104 -
           C96 * C113 + C83 * C122 + C98 * C114 - C99 * C105 - C98 * C115 +
           C84 * C123 + C100 * C116 - C101 * C106 - C100 * C117 + C85 * C124) *
              C82592 * C82581 * C82938 * C82939 * C90 -
          (C100 * C118 - C101 * C107 - C100 * C119 + C85 * C125 + C98 * C116 -
           C99 * C106 - C98 * C117 + C84 * C124 + C96 * C114 - C97 * C105 -
           C96 * C115 + C83 * C123 + C94 * C112 - C95 * C104 - C94 * C113 +
           C82 * C122 + C92 * C110 - C93 * C103 - C92 * C111 + C81 * C121) *
              C82592 * C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1647 * C108 - C1648 * C102 - C1647 * C109 + C1641 * C120 +
            C1649 * C110 - C1650 * C103 - C1649 * C111 + C1642 * C121 +
            C1651 * C112 - C1652 * C104 - C1651 * C113 + C82885 * C122) *
               C82932 +
           (C1647 * C1164 - C1648 * C1155 - C1647 * C1165 + C1641 * C1170 +
            C1649 * C1162 - C1650 * C1154 - C1649 * C1163 + C1642 * C1169 +
            C1651 * C1160 - C1652 * C1153 - C1651 * C1161 + C82885 * C1168) *
               C82918 +
           (C1647 * C4112 - C1648 * C4108 - C1647 * C4113 + C1641 * C4120 +
            C1649 * C4114 - C1650 * C4109 - C1649 * C4115 + C1642 * C4121 +
            C1651 * C4116 - C1652 * C4110 - C1651 * C4117 + C82885 * C4122) *
               C82896) *
              C82581 * C82938 * C82939 * C90 -
          ((C1651 * C4118 - C1652 * C4111 - C1651 * C4119 + C82885 * C4123 +
            C1649 * C4116 - C1650 * C4110 - C1649 * C4117 + C1642 * C4122 +
            C1647 * C4114 - C1648 * C4109 - C1647 * C4115 + C1641 * C4121) *
               C82896 +
           (C1651 * C1158 - C1652 * C1152 - C1651 * C1159 + C82885 * C1167 +
            C1649 * C1160 - C1650 * C1153 - C1649 * C1161 + C1642 * C1168 +
            C1647 * C1162 - C1648 * C1154 - C1647 * C1163 + C1641 * C1169) *
               C82918 +
           (C1651 * C114 - C1652 * C105 - C1651 * C115 + C82885 * C123 +
            C1649 * C112 - C1650 * C104 - C1649 * C113 + C1642 * C122 +
            C1647 * C110 - C1648 * C103 - C1647 * C111 + C1641 * C121) *
               C82932) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13259 * C108 - C13260 * C102 - C13259 * C109 + C82925 * C120 +
            C13261 * C110 - C13262 * C103 - C13261 * C111 + C82909 * C121 +
            C13263 * C112 - C13264 * C104 - C13263 * C113 + C82885 * C122) *
               C82592 * C13256 +
           (C13259 * C704 - C13260 * C695 - C13259 * C705 + C82925 * C710 +
            C13261 * C702 - C13262 * C694 - C13261 * C703 + C82909 * C709 +
            C13263 * C700 - C13264 * C693 - C13263 * C701 + C82885 * C708) *
               C82592 * C13257 +
           (C13259 * C1657 - C13260 * C1653 - C13259 * C1658 + C82925 * C1665 +
            C13261 * C1659 - C13262 * C1654 - C13261 * C1660 + C82909 * C1666 +
            C13263 * C1661 - C13264 * C1655 - C13263 * C1662 + C82885 * C1667) *
               C82592 * C82893) *
              C82938 * C82939 * C90 -
          ((C13263 * C1663 - C13264 * C1656 - C13263 * C1664 + C82885 * C1668 +
            C13261 * C1661 - C13262 * C1655 - C13261 * C1662 + C82909 * C1667 +
            C13259 * C1659 - C13260 * C1654 - C13259 * C1660 + C82925 * C1666) *
               C82592 * C82893 +
           (C13263 * C698 - C13264 * C692 - C13263 * C699 + C82885 * C707 +
            C13261 * C700 - C13262 * C693 - C13261 * C701 + C82909 * C708 +
            C13259 * C702 - C13260 * C694 - C13259 * C703 + C82925 * C709) *
               C82592 * C13257 +
           (C13263 * C114 - C13264 * C105 - C13263 * C115 + C82885 * C123 +
            C13261 * C112 - C13262 * C104 - C13261 * C113 + C82909 * C122 +
            C13259 * C110 - C13260 * C103 - C13259 * C111 + C82925 * C121) *
               C82592 * C13256) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
               C82592 * C15400 +
           (C15405 * C704 - C15406 * C695 - C15405 * C705 + C82523 * C710) *
               C82592 * C15401 +
           (C15405 * C1657 - C15406 * C1653 - C15405 * C1658 + C82523 * C1665) *
               C82592 * C15402 +
           (C15405 * C2532 - C15406 * C2527 - C15405 * C2533 + C82523 * C2536) *
               C82592 * C15403 +
           (C15405 * C15409 - C15406 * C15407 - C15405 * C15410 +
            C82523 * C15413) *
               C82592 * C15404) *
              C82938 * C82939 * C90 -
          ((C15405 * C15411 - C15406 * C15408 - C15405 * C15412 +
            C82523 * C15414) *
               C82592 * C15404 +
           (C15405 * C2530 - C15406 * C2526 - C15405 * C2531 + C82523 * C2535) *
               C82592 * C15403 +
           (C15405 * C1659 - C15406 * C1654 - C15405 * C1660 + C82523 * C1666) *
               C82592 * C15402 +
           (C15405 * C702 - C15406 * C694 - C15405 * C703 + C82523 * C709) *
               C82592 * C15401 +
           (C15405 * C110 - C15406 * C103 - C15405 * C111 + C82523 * C121) *
               C82592 * C15400) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C82932 +
            (C15405 * C1164 - C15406 * C1155 - C15405 * C1165 +
             C82523 * C1170) *
                C82918 +
            (C15405 * C4112 - C15406 * C4108 - C15405 * C4113 +
             C82523 * C4120) *
                C82896) *
               C13256 +
           (C15856 * C82932 +
            (C15405 * C3359 - C15406 * C3348 - C15405 * C3360 +
             C82523 * C3366) *
                C82918 +
            (C15405 * C4981 - C15406 * C4976 - C15405 * C4982 +
             C82523 * C4985) *
                C82896) *
               C13257 +
           (C15857 * C82932 +
            (C15405 * C3353 - C15406 * C3345 - C15405 * C3354 +
             C82523 * C3363) *
                C82918 +
            (C15405 * C16747 - C15406 * C16745 - C15405 * C16748 +
             C82523 * C16751) *
                C82896) *
               C82893) *
              C82938 * C82939 * C90 -
          (((C15405 * C16749 - C15406 * C16746 - C15405 * C16750 +
             C82523 * C16752) *
                C82896 +
            (C15405 * C3351 - C15406 * C3344 - C15405 * C3352 +
             C82523 * C3362) *
                C82918 +
            (C15405 * C1659 - C15406 * C1654 - C15405 * C1660 +
             C82523 * C1666) *
                C82932) *
               C82893 +
           ((C15405 * C4979 - C15406 * C4975 - C15405 * C4980 +
             C82523 * C4984) *
                C82896 +
            (C15405 * C3357 - C15406 * C3347 - C15405 * C3358 +
             C82523 * C3365) *
                C82918 +
            (C15405 * C702 - C15406 * C694 - C15405 * C703 + C82523 * C709) *
                C82932) *
               C13257 +
           ((C15405 * C4114 - C15406 * C4109 - C15405 * C4115 +
             C82523 * C4121) *
                C82896 +
            (C15405 * C1162 - C15406 * C1154 - C15405 * C1163 +
             C82523 * C1169) *
                C82918 +
            (C15405 * C110 - C15406 * C103 - C15405 * C111 + C82523 * C121) *
                C82932) *
               C13256) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
            C82893 * C1746 - C1745 * C1653) *
               C1647 +
           (C82931 * C175 - C1743 * C109 + C82916 * C758 - C1744 * C705 +
            C82893 * C1750 - C1745 * C1658) *
               C1641 +
           (C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C1649 +
           (C1761 - C1762 + C1763 - C1764 + C1765 - C1766) * C1642 +
           (C1767 - C1768 + C1769 - C1770 + C1771 - C1772) * C1651 +
           (C1773 - C1774 + C1775 - C1776 + C1777 - C1778) * C82885) *
              C82592 * C82938 * C82939 * C90 +
          ((C1756 - C1755 + C1758 - C1757 + C1760 - C1759) * C1647 +
           (C1762 - C1761 + C1764 - C1763 + C1766 - C1765) * C1641 +
           (C1768 - C1767 + C1770 - C1769 + C1772 - C1771) * C1649 +
           (C1774 - C1773 + C1776 - C1775 + C1778 - C1777) * C1642 +
           (C1743 * C105 - C82931 * C172 + C1744 * C692 - C82916 * C756 +
            C1745 * C1656 - C82893 * C1749) *
               C1651 +
           (C1743 * C115 - C82931 * C178 + C1744 * C699 - C82916 * C761 +
            C1745 * C1664 - C82893 * C1753) *
               C82885) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82581 * C169 - C168 * C102) * C92 +
           (C82581 * C175 - C168 * C109) * C81 + (C182 - C183) * C94 +
           (C184 - C185) * C82 + (C186 - C187) * C96 + (C188 - C189) * C83 +
           (C190 - C191) * C98 + (C192 - C193) * C84 + (C194 - C195) * C100 +
           (C196 - C197) * C85) *
              C82592 * C82938 * C82939 * C90 +
          ((C183 - C182) * C92 + (C185 - C184) * C81 + (C187 - C186) * C94 +
           (C189 - C188) * C82 + (C191 - C190) * C96 + (C193 - C192) * C83 +
           (C195 - C194) * C98 + (C197 - C196) * C84 +
           (C168 * C107 - C82581 * C174) * C100 +
           (C168 * C119 - C82581 * C180) * C85) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C1647 +
            (C82581 * C175 - C168 * C109) * C1641 + (C182 - C183) * C1649 +
            (C184 - C185) * C1642 + (C186 - C187) * C1651 +
            (C188 - C189) * C82885) *
               C82932 +
           ((C82581 * C1213 - C168 * C1155) * C1647 +
            (C82581 * C1218 - C168 * C1165) * C1641 + (C4207 - C4208) * C1649 +
            (C4209 - C4210) * C1642 + (C4211 - C4212) * C1651 +
            (C4213 - C4214) * C82885) *
               C82918 +
           ((C82581 * C4198 - C168 * C4108) * C1647 +
            (C82581 * C4202 - C168 * C4113) * C1641 + (C4215 - C4216) * C1649 +
            (C4217 - C4218) * C1642 + (C4219 - C4220) * C1651 +
            (C4221 - C4222) * C82885) *
               C82896) *
              C82938 * C82939 * C90 +
          (((C183 - C182) * C1647 + (C185 - C184) * C1641 +
            (C187 - C186) * C1649 + (C189 - C188) * C1642 +
            (C191 - C190) * C1651 + (C193 - C192) * C82885) *
               C82932 +
           ((C4208 - C4207) * C1647 + (C4210 - C4209) * C1641 +
            (C4212 - C4211) * C1649 + (C4214 - C4213) * C1642 +
            (C168 * C1152 - C82581 * C1216) * C1651 +
            (C168 * C1159 - C82581 * C1221) * C82885) *
               C82918 +
           ((C4216 - C4215) * C1647 + (C4218 - C4217) * C1641 +
            (C4220 - C4219) * C1649 + (C4222 - C4221) * C1642 +
            (C168 * C4111 - C82581 * C4201) * C1651 +
            (C168 * C4119 - C82581 * C4205) * C82885) *
               C82896) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
            C82893 * C1746 - C13341 * C1653) *
               C13259 +
           (C13256 * C175 - C13339 * C109 + C13257 * C758 - C13340 * C705 +
            C82893 * C1750 - C13341 * C1658) *
               C82925 +
           (C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C13261 +
           (C13349 - C13350 + C13351 - C13352 + C13353 - C13354) * C82909 +
           (C13355 - C13356 + C13357 - C13358 + C13359 - C13360) * C13263 +
           (C13361 - C13362 + C13363 - C13364 + C13365 - C13366) * C82885) *
              C82592 * C82938 * C82939 * C90 +
          ((C13344 - C13343 + C13346 - C13345 + C13348 - C13347) * C13259 +
           (C13350 - C13349 + C13352 - C13351 + C13354 - C13353) * C82925 +
           (C13356 - C13355 + C13358 - C13357 + C13360 - C13359) * C13261 +
           (C13362 - C13361 + C13364 - C13363 + C13366 - C13365) * C82909 +
           (C13339 * C105 - C13256 * C172 + C13340 * C692 - C13257 * C756 +
            C13341 * C1656 - C82893 * C1749) *
               C13263 +
           (C13339 * C115 - C13256 * C178 + C13340 * C699 - C13257 * C761 +
            C13341 * C1664 - C82893 * C1753) *
               C82885) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15400 * C169 - C15457 * C102 + C15401 * C753 - C15458 * C695 +
            C15402 * C1746 - C15459 * C1653 + C15403 * C2653 - C15460 * C2527 +
            C15404 * C15462 - C15461 * C15407) *
               C15405 +
           (C15400 * C175 - C15457 * C109 + C15401 * C758 - C15458 * C705 +
            C15402 * C1750 - C15459 * C1658 + C15403 * C2656 - C15460 * C2533 +
            C15404 * C15464 - C15461 * C15410) *
               C82523) *
              C82592 * C82938 * C82939 * C90 +
          ((C15457 * C103 - C15400 * C170 + C15458 * C694 - C15401 * C754 +
            C15459 * C1654 - C15402 * C1747 + C15460 * C2526 - C15403 * C2654 +
            C15461 * C15408 - C15404 * C15463) *
               C15405 +
           (C15457 * C111 - C15400 * C176 + C15458 * C703 - C15401 * C759 +
            C15459 * C1660 - C15402 * C1751 + C15460 * C2531 - C15403 * C2657 +
            C15461 * C15412 - C15404 * C15465) *
               C82523) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C15405 +
            (C13256 * C175 - C13339 * C109 + C13257 * C758 - C13340 * C705 +
             C82893 * C1750 - C13341 * C1658) *
                C82523) *
               C82932 +
           ((C13256 * C1213 - C13339 * C1155 + C13257 * C3441 - C13340 * C3348 +
             C82893 * C3442 - C13341 * C3345) *
                C15405 +
            (C13256 * C1218 - C13339 * C1165 + C13257 * C3447 - C13340 * C3360 +
             C82893 * C3448 - C13341 * C3354) *
                C82523) *
               C82918 +
           ((C13256 * C4198 - C13339 * C4108 + C13257 * C5060 - C13340 * C4976 +
             C82893 * C16827 - C13341 * C16745) *
                C15405 +
            (C13256 * C4202 - C13339 * C4113 + C13257 * C5063 - C13340 * C4982 +
             C82893 * C16829 - C13341 * C16748) *
                C82523) *
               C82896) *
              C82938 * C82939 * C90 +
          (((C13344 - C13343 + C13346 - C13345 + C13348 - C13347) * C15405 +
            (C13350 - C13349 + C13352 - C13351 + C13354 - C13353) * C82523) *
               C82932 +
           ((C13339 * C1154 - C13256 * C1214 + C13340 * C3347 - C13257 * C3443 +
             C13341 * C3344 - C82893 * C3444) *
                C15405 +
            (C13339 * C1163 - C13256 * C1219 + C13340 * C3358 - C13257 * C3449 +
             C13341 * C3352 - C82893 * C3450) *
                C82523) *
               C82918 +
           ((C13339 * C4109 - C13256 * C4199 + C13340 * C4975 - C13257 * C5061 +
             C13341 * C16746 - C82893 * C16828) *
                C15405 +
            (C13339 * C4115 - C13256 * C4203 + C13340 * C4980 - C13257 * C5064 +
             C13341 * C16750 - C82893 * C16830) *
                C82523) *
               C82896) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C1647 +
            (C82592 * C246 - C239 * C109) * C1641 + (C253 - C254) * C1649 +
            (C255 - C256) * C1642 + (C257 - C258) * C1651 +
            (C259 - C260) * C82885) *
               C82931 +
           ((C82592 * C805 - C239 * C695) * C1647 +
            (C82592 * C810 - C239 * C705) * C1641 + (C1861 - C1862) * C1649 +
            (C1863 - C1864) * C1642 + (C1865 - C1866) * C1651 +
            (C1867 - C1868) * C82885) *
               C82916 +
           ((C82592 * C1852 - C239 * C1653) * C1647 +
            (C82592 * C1856 - C239 * C1658) * C1641 + (C1869 - C1870) * C1649 +
            (C1871 - C1872) * C1642 + (C1873 - C1874) * C1651 +
            (C1875 - C1876) * C82885) *
               C82893) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C1647 + (C256 - C255) * C1641 +
            (C258 - C257) * C1649 + (C260 - C259) * C1642 +
            (C262 - C261) * C1651 + (C264 - C263) * C82885) *
               C82931 +
           ((C1862 - C1861) * C1647 + (C1864 - C1863) * C1641 +
            (C1866 - C1865) * C1649 + (C1868 - C1867) * C1642 +
            (C239 * C692 - C82592 * C808) * C1651 +
            (C239 * C699 - C82592 * C813) * C82885) *
               C82916 +
           ((C1870 - C1869) * C1647 + (C1872 - C1871) * C1641 +
            (C1874 - C1873) * C1649 + (C1876 - C1875) * C1642 +
            (C239 * C1656 - C82592 * C1855) * C1651 +
            (C239 * C1664 - C82592 * C1859) * C82885) *
               C82893) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82592 * C240 - C239 * C102) * C92 +
           (C82592 * C246 - C239 * C109) * C81 + (C253 - C254) * C94 +
           (C255 - C256) * C82 + (C257 - C258) * C96 + (C259 - C260) * C83 +
           (C261 - C262) * C98 + (C263 - C264) * C84 + (C265 - C266) * C100 +
           (C267 - C268) * C85) *
              C82581 * C82938 * C82939 * C90 +
          ((C254 - C253) * C92 + (C256 - C255) * C81 + (C258 - C257) * C94 +
           (C260 - C259) * C82 + (C262 - C261) * C96 + (C264 - C263) * C83 +
           (C266 - C265) * C98 + (C268 - C267) * C84 +
           (C239 * C107 - C82592 * C245) * C100 +
           (C239 * C119 - C82592 * C251) * C85) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
            C82896 * C4299 - C4298 * C4108) *
               C1647 +
           (C82932 * C246 - C4296 * C109 + C82918 * C1270 - C4297 * C1165 +
            C82896 * C4303 - C4298 * C4113) *
               C1641 +
           (C4308 - C4309 + C4310 - C4311 + C4312 - C4313) * C1649 +
           (C4314 - C4315 + C4316 - C4317 + C4318 - C4319) * C1642 +
           (C4320 - C4321 + C4322 - C4323 + C4324 - C4325) * C1651 +
           (C4326 - C4327 + C4328 - C4329 + C4330 - C4331) * C82885) *
              C82581 * C82938 * C82939 * C90 +
          ((C4309 - C4308 + C4311 - C4310 + C4313 - C4312) * C1647 +
           (C4315 - C4314 + C4317 - C4316 + C4319 - C4318) * C1641 +
           (C4321 - C4320 + C4323 - C4322 + C4325 - C4324) * C1649 +
           (C4327 - C4326 + C4329 - C4328 + C4331 - C4330) * C1642 +
           (C4296 * C105 - C82932 * C243 + C4297 * C1152 - C82918 * C1268 +
            C4298 * C4111 - C82896 * C4302) *
               C1651 +
           (C4296 * C115 - C82932 * C249 + C4297 * C1159 - C82918 * C1273 +
            C4298 * C4119 - C82896 * C4306) *
               C82885) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C13259 +
            (C82592 * C246 - C239 * C109) * C82925 + (C253 - C254) * C13261 +
            (C255 - C256) * C82909 + (C257 - C258) * C13263 +
            (C259 - C260) * C82885) *
               C13256 +
           ((C2740 - C2741) * C13259 + (C2742 - C2743) * C82925 +
            (C1861 - C1862) * C13261 + (C1863 - C1864) * C82909 +
            (C1865 - C1866) * C13263 + (C1867 - C1868) * C82885) *
               C13257 +
           ((C2744 - C2745) * C13259 + (C2746 - C2747) * C82925 +
            (C1869 - C1870) * C13261 + (C1871 - C1872) * C82909 +
            (C1873 - C1874) * C13263 + (C1875 - C1876) * C82885) *
               C82893) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C13259 + (C256 - C255) * C82925 +
            (C258 - C257) * C13261 + (C260 - C259) * C82909 +
            (C262 - C261) * C13263 + (C264 - C263) * C82885) *
               C13256 +
           ((C1862 - C1861) * C13259 + (C1864 - C1863) * C82925 +
            (C1866 - C1865) * C13261 + (C1868 - C1867) * C82909 +
            (C6678 - C6677) * C13263 + (C6680 - C6679) * C82885) *
               C13257 +
           ((C1870 - C1869) * C13259 + (C1872 - C1871) * C82925 +
            (C1874 - C1873) * C13261 + (C1876 - C1875) * C82909 +
            (C239 * C1656 - C82592 * C1855) * C13263 +
            (C239 * C1664 - C82592 * C1859) * C82885) *
               C82893) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C15405 +
            (C82592 * C246 - C239 * C109) * C82523) *
               C15400 +
           ((C2740 - C2741) * C15405 + (C2742 - C2743) * C82523) * C15401 +
           ((C2744 - C2745) * C15405 + (C2746 - C2747) * C82523) * C15402 +
           ((C82592 * C2733 - C239 * C2527) * C15405 +
            (C82592 * C2736 - C239 * C2533) * C82523) *
               C15403 +
           ((C82592 * C15508 - C239 * C15407) * C15405 +
            (C82592 * C15510 - C239 * C15410) * C82523) *
               C15404) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C15405 + (C256 - C255) * C82523) * C15400 +
           ((C1862 - C1861) * C15405 + (C1864 - C1863) * C82523) * C15401 +
           ((C1870 - C1869) * C15405 + (C1872 - C1871) * C82523) * C15402 +
           ((C239 * C2526 - C82592 * C2734) * C15405 +
            (C239 * C2531 - C82592 * C2737) * C82523) *
               C15403 +
           ((C239 * C15408 - C82592 * C15509) * C15405 +
            (C239 * C15412 - C82592 * C15511) * C82523) *
               C15404) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
             C82896 * C4299 - C4298 * C4108) *
                C15405 +
            (C82932 * C246 - C4296 * C109 + C82918 * C1270 - C4297 * C1165 +
             C82896 * C4303 - C4298 * C4113) *
                C82523) *
               C13256 +
           ((C82932 * C805 - C4296 * C695 + C82918 * C3527 - C4297 * C3348 +
             C82896 * C5140 - C4298 * C4976) *
                C15405 +
            (C82932 * C810 - C4296 * C705 + C82918 * C3533 - C4297 * C3360 +
             C82896 * C5143 - C4298 * C4982) *
                C82523) *
               C13257 +
           ((C82932 * C1852 - C4296 * C1653 + C82918 * C3530 - C4297 * C3345 +
             C82896 * C16905 - C4298 * C16745) *
                C15405 +
            (C82932 * C1856 - C4296 * C1658 + C82918 * C3536 - C4297 * C3354 +
             C82896 * C16907 - C4298 * C16748) *
                C82523) *
               C82893) *
              C82938 * C82939 * C90 +
          (((C4309 - C4308 + C4311 - C4310 + C4313 - C4312) * C15405 +
            (C4315 - C4314 + C4317 - C4316 + C4319 - C4318) * C82523) *
               C13256 +
           ((C4296 * C694 - C82932 * C806 + C4297 * C3347 - C82918 * C3528 +
             C4298 * C4975 - C82896 * C5141) *
                C15405 +
            (C4296 * C703 - C82932 * C811 + C4297 * C3358 - C82918 * C3534 +
             C4298 * C4980 - C82896 * C5144) *
                C82523) *
               C13257 +
           ((C4296 * C1654 - C82932 * C1853 + C4297 * C3344 - C82918 * C3531 +
             C4298 * C16746 - C82896 * C16906) *
                C15405 +
            (C4296 * C1660 - C82932 * C1857 + C4297 * C3352 - C82918 * C3537 +
             C4298 * C16750 - C82896 * C16908) *
                C82523) *
               C82893) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
            C82885 * C112 - C1651 * C104) *
               C1743 +
           (C1641 * C316 - C1647 * C310 + C1642 * C317 - C1649 * C311 +
            C82885 * C318 - C1651 * C312) *
               C82931 +
           (C1641 * C704 - C1647 * C695 + C1642 * C702 - C1649 * C694 +
            C82885 * C700 - C1651 * C693) *
               C1744 +
           (C1641 * C862 - C1647 * C857 + C1642 * C863 - C1649 * C858 +
            C82885 * C864 - C1651 * C859) *
               C82916 +
           (C1641 * C1657 - C1647 * C1653 + C1642 * C1659 - C1649 * C1654 +
            C82885 * C1661 - C1651 * C1655) *
               C1745 +
           (C1641 * C1954 - C1647 * C1950 + C1642 * C1955 - C1649 * C1951 +
            C82885 * C1956 - C1651 * C1952) *
               C82893) *
              C82592 * C82938 * C82939 * C90 +
          ((C1647 * C103 - C1641 * C110 + C1649 * C104 - C1642 * C112 +
            C1651 * C105 - C82885 * C114) *
               C1743 +
           (C1647 * C311 - C1641 * C317 + C1649 * C312 - C1642 * C318 +
            C1651 * C313 - C82885 * C319) *
               C82931 +
           (C1647 * C694 - C1641 * C702 + C1649 * C693 - C1642 * C700 +
            C1651 * C692 - C82885 * C698) *
               C1744 +
           (C1647 * C858 - C1641 * C863 + C1649 * C859 - C1642 * C864 +
            C1651 * C860 - C82885 * C865) *
               C82916 +
           (C1647 * C1654 - C1641 * C1659 + C1649 * C1655 - C1642 * C1661 +
            C1651 * C1656 - C82885 * C1663) *
               C1745 +
           (C1647 * C1951 - C1641 * C1955 + C1649 * C1952 - C1642 * C1956 +
            C1651 * C1953 - C82885 * C1957) *
               C82893) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C108 - C92 * C102 + C82 * C110 - C94 * C103 + C83 * C112 -
            C96 * C104 + C84 * C114 - C98 * C105 + C85 * C116 - C100 * C106) *
               C168 +
           (C81 * C316 - C92 * C310 + C82 * C317 - C94 * C311 + C83 * C318 -
            C96 * C312 + C84 * C319 - C98 * C313 + C85 * C320 - C100 * C314) *
               C82581) *
              C82592 * C82938 * C82939 * C90 +
          ((C92 * C103 - C81 * C110 + C94 * C104 - C82 * C112 + C96 * C105 -
            C83 * C114 + C98 * C106 - C84 * C116 + C100 * C107 - C85 * C118) *
               C168 +
           (C92 * C311 - C81 * C317 + C94 * C312 - C82 * C318 + C96 * C313 -
            C83 * C319 + C98 * C314 - C84 * C320 + C100 * C315 - C85 * C321) *
               C82581) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
             C82885 * C112 - C1651 * C104) *
                C168 +
            (C1641 * C316 - C1647 * C310 + C1642 * C317 - C1649 * C311 +
             C82885 * C318 - C1651 * C312) *
                C82581) *
               C82932 +
           ((C1641 * C1164 - C1647 * C1155 + C1642 * C1162 - C1649 * C1154 +
             C82885 * C1160 - C1651 * C1153) *
                C168 +
            (C1641 * C1322 - C1647 * C1317 + C1642 * C1323 - C1649 * C1318 +
             C82885 * C1324 - C1651 * C1319) *
                C82581) *
               C82918 +
           ((C1641 * C4112 - C1647 * C4108 + C1642 * C4114 - C1649 * C4109 +
             C82885 * C4116 - C1651 * C4110) *
                C168 +
            (C1641 * C4409 - C1647 * C4405 + C1642 * C4410 - C1649 * C4406 +
             C82885 * C4411 - C1651 * C4407) *
                C82581) *
               C82896) *
              C82938 * C82939 * C90 +
          (((C1647 * C103 - C1641 * C110 + C1649 * C104 - C1642 * C112 +
             C1651 * C105 - C82885 * C114) *
                C168 +
            (C1647 * C311 - C1641 * C317 + C1649 * C312 - C1642 * C318 +
             C1651 * C313 - C82885 * C319) *
                C82581) *
               C82932 +
           ((C1647 * C1154 - C1641 * C1162 + C1649 * C1153 - C1642 * C1160 +
             C1651 * C1152 - C82885 * C1158) *
                C168 +
            (C1647 * C1318 - C1641 * C1323 + C1649 * C1319 - C1642 * C1324 +
             C1651 * C1320 - C82885 * C1325) *
                C82581) *
               C82918 +
           ((C1647 * C4109 - C1641 * C4114 + C1649 * C4110 - C1642 * C4116 +
             C1651 * C4111 - C82885 * C4118) *
                C168 +
            (C1647 * C4406 - C1641 * C4410 + C1649 * C4407 - C1642 * C4411 +
             C1651 * C4408 - C82885 * C4412) *
                C82581) *
               C82896) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
            C82885 * C112 - C13263 * C104) *
               C13339 +
           (C82925 * C316 - C13259 * C310 + C82909 * C317 - C13261 * C311 +
            C82885 * C318 - C13263 * C312) *
               C13256 +
           (C82925 * C704 - C13259 * C695 + C82909 * C702 - C13261 * C694 +
            C82885 * C700 - C13263 * C693) *
               C13340 +
           (C82925 * C862 - C13259 * C857 + C82909 * C863 - C13261 * C858 +
            C82885 * C864 - C13263 * C859) *
               C13257 +
           (C82925 * C1657 - C13259 * C1653 + C82909 * C1659 - C13261 * C1654 +
            C82885 * C1661 - C13263 * C1655) *
               C13341 +
           (C82925 * C1954 - C13259 * C1950 + C82909 * C1955 - C13261 * C1951 +
            C82885 * C1956 - C13263 * C1952) *
               C82893) *
              C82592 * C82938 * C82939 * C90 +
          ((C13259 * C103 - C82925 * C110 + C13261 * C104 - C82909 * C112 +
            C13263 * C105 - C82885 * C114) *
               C13339 +
           (C13259 * C311 - C82925 * C317 + C13261 * C312 - C82909 * C318 +
            C13263 * C313 - C82885 * C319) *
               C13256 +
           (C13259 * C694 - C82925 * C702 + C13261 * C693 - C82909 * C700 +
            C13263 * C692 - C82885 * C698) *
               C13340 +
           (C13259 * C858 - C82925 * C863 + C13261 * C859 - C82909 * C864 +
            C13263 * C860 - C82885 * C865) *
               C13257 +
           (C13259 * C1654 - C82925 * C1659 + C13261 * C1655 - C82909 * C1661 +
            C13263 * C1656 - C82885 * C1663) *
               C13341 +
           (C13259 * C1951 - C82925 * C1955 + C13261 * C1952 - C82909 * C1956 +
            C13263 * C1953 - C82885 * C1957) *
               C82893) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82523 * C108 - C15405 * C102) * C15457 +
           (C82523 * C316 - C15405 * C310) * C15400 +
           (C82523 * C704 - C15405 * C695) * C15458 +
           (C82523 * C862 - C15405 * C857) * C15401 +
           (C82523 * C1657 - C15405 * C1653) * C15459 +
           (C82523 * C1954 - C15405 * C1950) * C15402 +
           (C82523 * C2532 - C15405 * C2527) * C15460 +
           (C82523 * C2824 - C15405 * C2821) * C15403 +
           (C82523 * C15409 - C15405 * C15407) * C15461 +
           (C82523 * C15556 - C15405 * C15554) * C15404) *
              C82592 * C82938 * C82939 * C90 +
          ((C15405 * C103 - C82523 * C110) * C15457 +
           (C15405 * C311 - C82523 * C317) * C15400 +
           (C15405 * C694 - C82523 * C702) * C15458 +
           (C15405 * C858 - C82523 * C863) * C15401 +
           (C15405 * C1654 - C82523 * C1659) * C15459 +
           (C15405 * C1951 - C82523 * C1955) * C15402 +
           (C15405 * C2526 - C82523 * C2530) * C15460 +
           (C15405 * C2822 - C82523 * C2825) * C15403 +
           (C15405 * C15408 - C82523 * C15411) * C15461 +
           (C15405 * C15555 - C82523 * C15557) * C15404) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C13339 +
            (C82523 * C316 - C15405 * C310) * C13256 +
            (C16004 - C16005) * C13340 + (C16006 - C16007) * C13257 +
            (C16008 - C16009) * C13341 + (C16010 - C16011) * C82893) *
               C82932 +
           ((C82523 * C1164 - C15405 * C1155) * C13339 +
            (C82523 * C1322 - C15405 * C1317) * C13256 +
            (C82523 * C3359 - C15405 * C3348) * C13340 +
            (C82523 * C3619 - C15405 * C3613) * C13257 +
            (C82523 * C3353 - C15405 * C3345) * C13341 +
            (C82523 * C3622 - C15405 * C3616) * C82893) *
               C82918 +
           ((C82523 * C4112 - C15405 * C4108) * C13339 +
            (C82523 * C4409 - C15405 * C4405) * C13256 +
            (C82523 * C4981 - C15405 * C4976) * C13340 +
            (C82523 * C5223 - C15405 * C5220) * C13257 +
            (C82523 * C16747 - C15405 * C16745) * C13341 +
            (C82523 * C16985 - C15405 * C16983) * C82893) *
               C82896) *
              C82938 * C82939 * C90 +
          (((C15405 * C103 - C82523 * C110) * C13339 +
            (C15405 * C311 - C82523 * C317) * C13256 +
            (C15405 * C694 - C82523 * C702) * C13340 +
            (C15405 * C858 - C82523 * C863) * C13257 +
            (C15405 * C1654 - C82523 * C1659) * C13341 +
            (C15405 * C1951 - C82523 * C1955) * C82893) *
               C82932 +
           ((C15405 * C1154 - C82523 * C1162) * C13339 +
            (C15405 * C1318 - C82523 * C1323) * C13256 +
            (C15405 * C3347 - C82523 * C3357) * C13340 +
            (C15405 * C3614 - C82523 * C3620) * C13257 +
            (C15405 * C3344 - C82523 * C3351) * C13341 +
            (C15405 * C3617 - C82523 * C3623) * C82893) *
               C82918 +
           ((C15405 * C4109 - C82523 * C4114) * C13339 +
            (C15405 * C4406 - C82523 * C4410) * C13256 +
            (C15405 * C4975 - C82523 * C4979) * C13340 +
            (C15405 * C5221 - C82523 * C5224) * C13257 +
            (C15405 * C16746 - C82523 * C16749) * C13341 +
            (C15405 * C16984 - C82523 * C16986) * C82893) *
               C82896) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1743 * C169 - C2032 * C102 - C1743 * C310 + C82931 * C365 +
            C1744 * C753 - C2033 * C695 - C1744 * C857 + C82916 * C913 +
            C1745 * C1746 - C2034 * C1653 - C1745 * C1950 + C82893 * C2035) *
               C1641 +
           (C2076 + C2077 + C2078) * C1642 + (C2079 + C2080 + C2081) * C82885) *
              C82592 * C82938 * C82939 * C90 -
          ((C1745 * C1749 - C2034 * C1656 - C1745 * C1953 + C82893 * C2038 +
            C1744 * C756 - C2033 * C692 - C1744 * C860 + C82916 * C910 +
            C1743 * C172 - C2032 * C105 - C1743 * C313 + C82931 * C368) *
               C82885 +
           (C2081 + C2080 + C2079) * C1642 + (C2078 + C2077 + C2076) * C1641) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C81 +
           C396 * C82 + C397 * C83 + C398 * C84 + C399 * C85) *
              C82592 * C82938 * C82939 * C90 -
          ((C168 * C174 - C364 * C107 - C168 * C315 + C82581 * C370) * C85 +
           C399 * C84 + C398 * C83 + C397 * C82 + C396 * C81) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C1641 +
            C396 * C1642 + C397 * C82885) *
               C82932 +
           ((C168 * C1213 - C364 * C1155 - C168 * C1317 + C82581 * C1373) *
                C1641 +
            C4516 * C1642 + C4517 * C82885) *
               C82918 +
           ((C168 * C4198 - C364 * C4108 - C168 * C4405 + C82581 * C4487) *
                C1641 +
            C4518 * C1642 + C4519 * C82885) *
               C82896) *
              C82938 * C82939 * C90 -
          (((C168 * C4201 - C364 * C4111 - C168 * C4408 + C82581 * C4490) *
                C82885 +
            C4519 * C1642 + C4518 * C1641) *
               C82896 +
           ((C168 * C1216 - C364 * C1152 - C168 * C1320 + C82581 * C1370) *
                C82885 +
            C4517 * C1642 + C4516 * C1641) *
               C82918 +
           (C398 * C82885 + C397 * C1642 + C396 * C1641) * C82932) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13339 * C169 - C13588 * C102 - C13339 * C310 + C13256 * C365 +
            C13340 * C753 - C13589 * C695 - C13340 * C857 + C13257 * C913 +
            C13341 * C1746 - C13590 * C1653 - C13341 * C1950 + C82893 * C2035) *
               C82925 +
           (C13628 + C13629 + C13630) * C82909 +
           (C13631 + C13632 + C13633) * C82885) *
              C82592 * C82938 * C82939 * C90 -
          ((C13341 * C1749 - C13590 * C1656 - C13341 * C1953 + C82893 * C2038 +
            C13340 * C756 - C13589 * C692 - C13340 * C860 + C13257 * C910 +
            C13339 * C172 - C13588 * C105 - C13339 * C313 + C13256 * C368) *
               C82885 +
           (C13633 + C13632 + C13631) * C82909 +
           (C13630 + C13629 + C13628) * C82925) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C15457 * C169 - C15600 * C102 - C15457 * C310 + C15400 * C365 +
           C15458 * C753 - C15601 * C695 - C15458 * C857 + C15401 * C913 +
           C15459 * C1746 - C15602 * C1653 - C15459 * C1950 + C15402 * C2035 +
           C15460 * C2653 - C15603 * C2527 - C15460 * C2821 + C15403 * C2927 +
           C15461 * C15462 - C15604 * C15407 - C15461 * C15554 +
           C15404 * C15605) *
              C82523 * C82592 * C82938 * C82939 * C90 -
          (C15461 * C15463 - C15604 * C15408 - C15461 * C15555 +
           C15404 * C15606 + C15460 * C2654 - C15603 * C2526 - C15460 * C2822 +
           C15403 * C2926 + C15459 * C1747 - C15602 * C1654 - C15459 * C1951 +
           C15402 * C2036 + C15458 * C754 - C15601 * C694 - C15458 * C858 +
           C15401 * C912 + C15457 * C170 - C15600 * C103 - C15457 * C311 +
           C15400 * C366) *
              C82523 * C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13339 * C169 - C13588 * C102 - C13339 * C310 + C13256 * C365 +
            C13340 * C753 - C13589 * C695 - C13340 * C857 + C13257 * C913 +
            C13341 * C1746 - C13590 * C1653 - C13341 * C1950 + C82893 * C2035) *
               C82523 * C82932 +
           (C13339 * C1213 - C13588 * C1155 - C13339 * C1317 + C13256 * C1373 +
            C13340 * C3441 - C13589 * C3348 - C13340 * C3613 + C13257 * C3704 +
            C13341 * C3442 - C13590 * C3345 - C13341 * C3616 + C82893 * C3703) *
               C82523 * C82918 +
           (C13339 * C4198 - C13588 * C4108 - C13339 * C4405 + C13256 * C4487 +
            C13340 * C5060 - C13589 * C4976 - C13340 * C5220 + C13257 * C5302 +
            C13341 * C16827 - C13590 * C16745 - C13341 * C16983 +
            C82893 * C17061) *
               C82523 * C82896) *
              C82938 * C82939 * C90 -
          ((C13341 * C16828 - C13590 * C16746 - C13341 * C16984 +
            C82893 * C17062 + C13340 * C5061 - C13589 * C4975 - C13340 * C5221 +
            C13257 * C5301 + C13339 * C4199 - C13588 * C4109 - C13339 * C4406 +
            C13256 * C4488) *
               C82523 * C82896 +
           (C13341 * C3444 - C13590 * C3344 - C13341 * C3617 + C82893 * C3701 +
            C13340 * C3443 - C13589 * C3347 - C13340 * C3614 + C13257 * C3702 +
            C13339 * C1214 - C13588 * C1154 - C13339 * C1318 + C13256 * C1372) *
               C82523 * C82918 +
           (C13630 + C13629 + C13628) * C82523 * C82932) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C1743 +
            (C82592 * C441 - C239 * C310) * C82931 +
            (C82592 * C805 - C239 * C695) * C1744 +
            (C82592 * C956 - C239 * C857) * C82916 +
            (C82592 * C1852 - C239 * C1653) * C1745 +
            (C82592 * C2155 - C239 * C1950) * C82893) *
               C1641 +
           ((C253 - C254) * C1743 + (C448 - C449) * C82931 +
            (C1861 - C1862) * C1744 + (C2160 - C2161) * C82916 +
            (C1869 - C1870) * C1745 + (C2162 - C2163) * C82893) *
               C1642 +
           ((C257 - C258) * C1743 + (C450 - C451) * C82931 +
            (C1865 - C1866) * C1744 + (C2164 - C2165) * C82916 +
            (C1873 - C1874) * C1745 + (C2166 - C2167) * C82893) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C1743 + (C449 - C448) * C82931 +
            (C1862 - C1861) * C1744 + (C2161 - C2160) * C82916 +
            (C1870 - C1869) * C1745 + (C2163 - C2162) * C82893) *
               C1641 +
           ((C258 - C257) * C1743 + (C451 - C450) * C82931 +
            (C1866 - C1865) * C1744 + (C2165 - C2164) * C82916 +
            (C1874 - C1873) * C1745 + (C2167 - C2166) * C82893) *
               C1642 +
           ((C262 - C261) * C1743 + (C453 - C452) * C82931 +
            (C239 * C692 - C82592 * C808) * C1744 +
            (C239 * C860 - C82592 * C959) * C82916 +
            (C239 * C1656 - C82592 * C1855) * C1745 +
            (C239 * C1953 - C82592 * C2158) * C82893) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C168 +
            (C82592 * C441 - C239 * C310) * C82581) *
               C81 +
           ((C253 - C254) * C168 + (C448 - C449) * C82581) * C82 +
           ((C257 - C258) * C168 + (C450 - C451) * C82581) * C83 +
           ((C261 - C262) * C168 + (C452 - C453) * C82581) * C84 +
           ((C265 - C266) * C168 + (C454 - C455) * C82581) * C85) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C168 + (C449 - C448) * C82581) * C81 +
           ((C258 - C257) * C168 + (C451 - C450) * C82581) * C82 +
           ((C262 - C261) * C168 + (C453 - C452) * C82581) * C83 +
           ((C266 - C265) * C168 + (C455 - C454) * C82581) * C84 +
           ((C239 * C107 - C82592 * C245) * C168 +
            (C239 * C315 - C82592 * C446) * C82581) *
               C85) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
             C82896 * C4299 - C4298 * C4108) *
                C168 +
            (C82932 * C441 - C4296 * C310 + C82918 * C1416 - C4297 * C1317 +
             C82896 * C4593 - C4298 * C4405) *
                C82581) *
               C1641 +
           ((C4308 - C4309 + C4310 - C4311 + C4312 - C4313) * C168 +
            (C4598 - C4599 + C4600 - C4601 + C4602 - C4603) * C82581) *
               C1642 +
           ((C4320 - C4321 + C4322 - C4323 + C4324 - C4325) * C168 +
            (C4604 - C4605 + C4606 - C4607 + C4608 - C4609) * C82581) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C4309 - C4308 + C4311 - C4310 + C4313 - C4312) * C168 +
            (C4599 - C4598 + C4601 - C4600 + C4603 - C4602) * C82581) *
               C1641 +
           ((C4321 - C4320 + C4323 - C4322 + C4325 - C4324) * C168 +
            (C4605 - C4604 + C4607 - C4606 + C4609 - C4608) * C82581) *
               C1642 +
           ((C4296 * C105 - C82932 * C243 + C4297 * C1152 - C82918 * C1268 +
             C4298 * C4111 - C82896 * C4302) *
                C168 +
            (C4296 * C313 - C82932 * C444 + C4297 * C1320 - C82918 * C1419 +
             C4298 * C4408 - C82896 * C4596) *
                C82581) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C13339 +
            (C82592 * C441 - C239 * C310) * C13256 + (C2740 - C2741) * C13340 +
            (C3006 - C3007) * C13257 + (C2744 - C2745) * C13341 +
            (C3008 - C3009) * C82893) *
               C82925 +
           ((C253 - C254) * C13339 + (C448 - C449) * C13256 +
            (C1861 - C1862) * C13340 + (C2160 - C2161) * C13257 +
            (C1869 - C1870) * C13341 + (C2162 - C2163) * C82893) *
               C82909 +
           ((C257 - C258) * C13339 + (C450 - C451) * C13256 +
            (C1865 - C1866) * C13340 + (C2164 - C2165) * C13257 +
            (C1873 - C1874) * C13341 + (C2166 - C2167) * C82893) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C13339 + (C449 - C448) * C13256 +
            (C1862 - C1861) * C13340 + (C2161 - C2160) * C13257 +
            (C1870 - C1869) * C13341 + (C2163 - C2162) * C82893) *
               C82925 +
           ((C258 - C257) * C13339 + (C451 - C450) * C13256 +
            (C1866 - C1865) * C13340 + (C2165 - C2164) * C13257 +
            (C1874 - C1873) * C13341 + (C2167 - C2166) * C82893) *
               C82909 +
           ((C262 - C261) * C13339 + (C453 - C452) * C13256 +
            (C6678 - C6677) * C13340 + (C6924 - C6923) * C13257 +
            (C239 * C1656 - C82592 * C1855) * C13341 +
            (C239 * C1953 - C82592 * C2158) * C82893) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82592 * C240 - C239 * C102) * C15457 +
           (C82592 * C441 - C239 * C310) * C15400 + (C2740 - C2741) * C15458 +
           (C3006 - C3007) * C15401 + (C2744 - C2745) * C15459 +
           (C3008 - C3009) * C15402 + (C82592 * C2733 - C239 * C2527) * C15460 +
           (C82592 * C3002 - C239 * C2821) * C15403 +
           (C82592 * C15508 - C239 * C15407) * C15461 +
           (C82592 * C15649 - C239 * C15554) * C15404) *
              C82523 * C82938 * C82939 * C90 +
          ((C254 - C253) * C15457 + (C449 - C448) * C15400 +
           (C1862 - C1861) * C15458 + (C2161 - C2160) * C15401 +
           (C1870 - C1869) * C15459 + (C2163 - C2162) * C15402 +
           (C239 * C2526 - C82592 * C2734) * C15460 +
           (C239 * C2822 - C82592 * C3003) * C15403 +
           (C239 * C15408 - C82592 * C15509) * C15461 +
           (C239 * C15555 - C82592 * C15650) * C15404) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
            C82896 * C4299 - C4298 * C4108) *
               C13339 +
           (C82932 * C441 - C4296 * C310 + C82918 * C1416 - C4297 * C1317 +
            C82896 * C4593 - C4298 * C4405) *
               C13256 +
           (C82932 * C805 - C4296 * C695 + C82918 * C3527 - C4297 * C3348 +
            C82896 * C5140 - C4298 * C4976) *
               C13340 +
           (C82932 * C956 - C4296 * C857 + C82918 * C3779 - C4297 * C3613 +
            C82896 * C5377 - C4298 * C5220) *
               C13257 +
           (C82932 * C1852 - C4296 * C1653 + C82918 * C3530 - C4297 * C3345 +
            C82896 * C16905 - C4298 * C16745) *
               C13341 +
           (C82932 * C2155 - C4296 * C1950 + C82918 * C3780 - C4297 * C3616 +
            C82896 * C17137 - C4298 * C16983) *
               C82893) *
              C82523 * C82938 * C82939 * C90 +
          ((C4309 - C4308 + C4311 - C4310 + C4313 - C4312) * C13339 +
           (C4599 - C4598 + C4601 - C4600 + C4603 - C4602) * C13256 +
           (C4296 * C694 - C82932 * C806 + C4297 * C3347 - C82918 * C3528 +
            C4298 * C4975 - C82896 * C5141) *
               C13340 +
           (C4296 * C858 - C82932 * C957 + C4297 * C3614 - C82918 * C3781 +
            C4298 * C5221 - C82896 * C5378) *
               C13257 +
           (C4296 * C1654 - C82932 * C1853 + C4297 * C3344 - C82918 * C3531 +
            C4298 * C16746 - C82896 * C16906) *
               C13341 +
           (C4296 * C1951 - C82932 * C2156 + C4297 * C3617 - C82918 * C3782 +
            C4298 * C16984 - C82896 * C17138) *
               C82893) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezx[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
             C82885 * C112 - C1651 * C104) *
                C239 +
            (C1641 * C503 - C1647 * C497 + C1642 * C504 - C1649 * C498 +
             C82885 * C505 - C1651 * C499) *
                C82592) *
               C82931 +
           ((C1641 * C704 - C1647 * C695 + C1642 * C702 - C1649 * C694 +
             C82885 * C700 - C1651 * C693) *
                C239 +
            (C1641 * C1008 - C1647 * C1003 + C1642 * C1009 - C1649 * C1004 +
             C82885 * C1010 - C1651 * C1005) *
                C82592) *
               C82916 +
           ((C1641 * C1657 - C1647 * C1653 + C1642 * C1659 - C1649 * C1654 +
             C82885 * C1661 - C1651 * C1655) *
                C239 +
            (C1641 * C2245 - C1647 * C2241 + C1642 * C2246 - C1649 * C2242 +
             C82885 * C2247 - C1651 * C2243) *
                C82592) *
               C82893) *
              C82938 * C82939 * C90 +
          (((C1647 * C103 - C1641 * C110 + C1649 * C104 - C1642 * C112 +
             C1651 * C105 - C82885 * C114) *
                C239 +
            (C1647 * C498 - C1641 * C504 + C1649 * C499 - C1642 * C505 +
             C1651 * C500 - C82885 * C506) *
                C82592) *
               C82931 +
           ((C1647 * C694 - C1641 * C702 + C1649 * C693 - C1642 * C700 +
             C1651 * C692 - C82885 * C698) *
                C239 +
            (C1647 * C1004 - C1641 * C1009 + C1649 * C1005 - C1642 * C1010 +
             C1651 * C1006 - C82885 * C1011) *
                C82592) *
               C82916 +
           ((C1647 * C1654 - C1641 * C1659 + C1649 * C1655 - C1642 * C1661 +
             C1651 * C1656 - C82885 * C1663) *
                C239 +
            (C1647 * C2242 - C1641 * C2246 + C1649 * C2243 - C1642 * C2247 +
             C1651 * C2244 - C82885 * C2248) *
                C82592) *
               C82893) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C108 - C92 * C102 + C82 * C110 - C94 * C103 + C83 * C112 -
            C96 * C104 + C84 * C114 - C98 * C105 + C85 * C116 - C100 * C106) *
               C239 +
           (C81 * C503 - C92 * C497 + C82 * C504 - C94 * C498 + C83 * C505 -
            C96 * C499 + C84 * C506 - C98 * C500 + C85 * C507 - C100 * C501) *
               C82592) *
              C82581 * C82938 * C82939 * C90 +
          ((C92 * C103 - C81 * C110 + C94 * C104 - C82 * C112 + C96 * C105 -
            C83 * C114 + C98 * C106 - C84 * C116 + C100 * C107 - C85 * C118) *
               C239 +
           (C92 * C498 - C81 * C504 + C94 * C499 - C82 * C505 + C96 * C500 -
            C83 * C506 + C98 * C501 - C84 * C507 + C100 * C502 - C85 * C508) *
               C82592) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
            C82885 * C112 - C1651 * C104) *
               C4296 +
           (C1641 * C503 - C1647 * C497 + C1642 * C504 - C1649 * C498 +
            C82885 * C505 - C1651 * C499) *
               C82932 +
           (C1641 * C1164 - C1647 * C1155 + C1642 * C1162 - C1649 * C1154 +
            C82885 * C1160 - C1651 * C1153) *
               C4297 +
           (C1641 * C1468 - C1647 * C1463 + C1642 * C1469 - C1649 * C1464 +
            C82885 * C1470 - C1651 * C1465) *
               C82918 +
           (C1641 * C4112 - C1647 * C4108 + C1642 * C4114 - C1649 * C4109 +
            C82885 * C4116 - C1651 * C4110) *
               C4298 +
           (C1641 * C4687 - C1647 * C4683 + C1642 * C4688 - C1649 * C4684 +
            C82885 * C4689 - C1651 * C4685) *
               C82896) *
              C82581 * C82938 * C82939 * C90 +
          ((C1647 * C103 - C1641 * C110 + C1649 * C104 - C1642 * C112 +
            C1651 * C105 - C82885 * C114) *
               C4296 +
           (C1647 * C498 - C1641 * C504 + C1649 * C499 - C1642 * C505 +
            C1651 * C500 - C82885 * C506) *
               C82932 +
           (C1647 * C1154 - C1641 * C1162 + C1649 * C1153 - C1642 * C1160 +
            C1651 * C1152 - C82885 * C1158) *
               C4297 +
           (C1647 * C1464 - C1641 * C1469 + C1649 * C1465 - C1642 * C1470 +
            C1651 * C1466 - C82885 * C1471) *
               C82918 +
           (C1647 * C4109 - C1641 * C4114 + C1649 * C4110 - C1642 * C4116 +
            C1651 * C4111 - C82885 * C4118) *
               C4298 +
           (C1647 * C4684 - C1641 * C4688 + C1649 * C4685 - C1642 * C4689 +
            C1651 * C4686 - C82885 * C4690) *
               C82896) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C239 +
            (C82925 * C503 - C13259 * C497 + C82909 * C504 - C13261 * C498 +
             C82885 * C505 - C13263 * C499) *
                C82592) *
               C13256 +
           ((C82925 * C704 - C13259 * C695 + C82909 * C702 - C13261 * C694 +
             C82885 * C700 - C13263 * C693) *
                C239 +
            (C82925 * C1008 - C13259 * C1003 + C82909 * C1009 - C13261 * C1004 +
             C82885 * C1010 - C13263 * C1005) *
                C82592) *
               C13257 +
           ((C82925 * C1657 - C13259 * C1653 + C82909 * C1659 - C13261 * C1654 +
             C82885 * C1661 - C13263 * C1655) *
                C239 +
            (C82925 * C2245 - C13259 * C2241 + C82909 * C2246 - C13261 * C2242 +
             C82885 * C2247 - C13263 * C2243) *
                C82592) *
               C82893) *
              C82938 * C82939 * C90 +
          (((C13259 * C103 - C82925 * C110 + C13261 * C104 - C82909 * C112 +
             C13263 * C105 - C82885 * C114) *
                C239 +
            (C13259 * C498 - C82925 * C504 + C13261 * C499 - C82909 * C505 +
             C13263 * C500 - C82885 * C506) *
                C82592) *
               C13256 +
           ((C13259 * C694 - C82925 * C702 + C13261 * C693 - C82909 * C700 +
             C13263 * C692 - C82885 * C698) *
                C239 +
            (C13259 * C1004 - C82925 * C1009 + C13261 * C1005 - C82909 * C1010 +
             C13263 * C1006 - C82885 * C1011) *
                C82592) *
               C13257 +
           ((C13259 * C1654 - C82925 * C1659 + C13261 * C1655 - C82909 * C1661 +
             C13263 * C1656 - C82885 * C1663) *
                C239 +
            (C13259 * C2242 - C82925 * C2246 + C13261 * C2243 - C82909 * C2247 +
             C13263 * C2244 - C82885 * C2248) *
                C82592) *
               C82893) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C239 +
            (C82523 * C503 - C15405 * C497) * C82592) *
               C15400 +
           ((C82523 * C704 - C15405 * C695) * C239 +
            (C82523 * C1008 - C15405 * C1003) * C82592) *
               C15401 +
           ((C82523 * C1657 - C15405 * C1653) * C239 +
            (C82523 * C2245 - C15405 * C2241) * C82592) *
               C15402 +
           ((C82523 * C2532 - C15405 * C2527) * C239 +
            (C82523 * C3086 - C15405 * C3083) * C82592) *
               C15403 +
           ((C82523 * C15409 - C15405 * C15407) * C239 +
            (C82523 * C15695 - C15405 * C15693) * C82592) *
               C15404) *
              C82938 * C82939 * C90 +
          (((C15405 * C103 - C82523 * C110) * C239 +
            (C15405 * C498 - C82523 * C504) * C82592) *
               C15400 +
           ((C15405 * C694 - C82523 * C702) * C239 +
            (C15405 * C1004 - C82523 * C1009) * C82592) *
               C15401 +
           ((C15405 * C1654 - C82523 * C1659) * C239 +
            (C15405 * C2242 - C82523 * C2246) * C82592) *
               C15402 +
           ((C15405 * C2526 - C82523 * C2530) * C239 +
            (C15405 * C3084 - C82523 * C3087) * C82592) *
               C15403 +
           ((C15405 * C15408 - C82523 * C15411) * C239 +
            (C15405 * C15694 - C82523 * C15696) * C82592) *
               C15404) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C4296 +
            (C82523 * C503 - C15405 * C497) * C82932 +
            (C82523 * C1164 - C15405 * C1155) * C4297 +
            (C82523 * C1468 - C15405 * C1463) * C82918 +
            (C82523 * C4112 - C15405 * C4108) * C4298 +
            (C82523 * C4687 - C15405 * C4683) * C82896) *
               C13256 +
           ((C16004 - C16005) * C4296 + (C16154 - C16155) * C82932 +
            (C82523 * C3359 - C15405 * C3348) * C4297 +
            (C82523 * C3865 - C15405 * C3859) * C82918 +
            (C82523 * C4981 - C15405 * C4976) * C4298 +
            (C82523 * C5457 - C15405 * C5454) * C82896) *
               C13257 +
           ((C16008 - C16009) * C4296 + (C16156 - C16157) * C82932 +
            (C82523 * C3353 - C15405 * C3345) * C4297 +
            (C82523 * C3868 - C15405 * C3862) * C82918 +
            (C82523 * C16747 - C15405 * C16745) * C4298 +
            (C82523 * C17215 - C15405 * C17213) * C82896) *
               C82893) *
              C82938 * C82939 * C90 +
          (((C15405 * C103 - C82523 * C110) * C4296 +
            (C15405 * C498 - C82523 * C504) * C82932 +
            (C15405 * C1154 - C82523 * C1162) * C4297 +
            (C15405 * C1464 - C82523 * C1469) * C82918 +
            (C15405 * C4109 - C82523 * C4114) * C4298 +
            (C15405 * C4684 - C82523 * C4688) * C82896) *
               C13256 +
           ((C15405 * C694 - C82523 * C702) * C4296 +
            (C15405 * C1004 - C82523 * C1009) * C82932 +
            (C15405 * C3347 - C82523 * C3357) * C4297 +
            (C15405 * C3860 - C82523 * C3866) * C82918 +
            (C15405 * C4975 - C82523 * C4979) * C4298 +
            (C15405 * C5455 - C82523 * C5458) * C82896) *
               C13257 +
           ((C15405 * C1654 - C82523 * C1659) * C4296 +
            (C15405 * C2242 - C82523 * C2246) * C82932 +
            (C15405 * C3344 - C82523 * C3351) * C4297 +
            (C15405 * C3863 - C82523 * C3869) * C82918 +
            (C15405 * C16746 - C82523 * C16749) * C4298 +
            (C15405 * C17214 - C82523 * C17216) * C82896) *
               C82893) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
             C82893 * C1746 - C1745 * C1653) *
                C239 +
            (C82931 * C551 - C1743 * C497 + C82916 * C1055 - C1744 * C1003 +
             C82893 * C2323 - C1745 * C2241) *
                C82592) *
               C1641 +
           ((C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C239 +
            (C2328 - C2329 + C2330 - C2331 + C2332 - C2333) * C82592) *
               C1642 +
           ((C1767 - C1768 + C1769 - C1770 + C1771 - C1772) * C239 +
            (C2334 - C2335 + C2336 - C2337 + C2338 - C2339) * C82592) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C1756 - C1755 + C1758 - C1757 + C1760 - C1759) * C239 +
            (C2329 - C2328 + C2331 - C2330 + C2333 - C2332) * C82592) *
               C1641 +
           ((C1768 - C1767 + C1770 - C1769 + C1772 - C1771) * C239 +
            (C2335 - C2334 + C2337 - C2336 + C2339 - C2338) * C82592) *
               C1642 +
           ((C1743 * C105 - C82931 * C172 + C1744 * C692 - C82916 * C756 +
             C1745 * C1656 - C82893 * C1749) *
                C239 +
            (C1743 * C500 - C82931 * C554 + C1744 * C1006 - C82916 * C1058 +
             C1745 * C2244 - C82893 * C2326) *
                C82592) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C239 +
            (C82581 * C551 - C168 * C497) * C82592) *
               C81 +
           ((C182 - C183) * C239 + (C558 - C559) * C82592) * C82 +
           ((C186 - C187) * C239 + (C560 - C561) * C82592) * C83 +
           ((C190 - C191) * C239 + (C562 - C563) * C82592) * C84 +
           ((C194 - C195) * C239 + (C564 - C565) * C82592) * C85) *
              C82938 * C82939 * C90 +
          (((C183 - C182) * C239 + (C559 - C558) * C82592) * C81 +
           ((C187 - C186) * C239 + (C561 - C560) * C82592) * C82 +
           ((C191 - C190) * C239 + (C563 - C562) * C82592) * C83 +
           ((C195 - C194) * C239 + (C565 - C564) * C82592) * C84 +
           ((C168 * C107 - C82581 * C174) * C239 +
            (C168 * C502 - C82581 * C556) * C82592) *
               C85) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C4296 +
            (C82581 * C551 - C168 * C497) * C82932 +
            (C82581 * C1213 - C168 * C1155) * C4297 +
            (C82581 * C1515 - C168 * C1463) * C82918 +
            (C82581 * C4198 - C168 * C4108) * C4298 +
            (C82581 * C4765 - C168 * C4683) * C82896) *
               C1641 +
           ((C182 - C183) * C4296 + (C558 - C559) * C82932 +
            (C4207 - C4208) * C4297 + (C4770 - C4771) * C82918 +
            (C4215 - C4216) * C4298 + (C4772 - C4773) * C82896) *
               C1642 +
           ((C186 - C187) * C4296 + (C560 - C561) * C82932 +
            (C4211 - C4212) * C4297 + (C4774 - C4775) * C82918 +
            (C4219 - C4220) * C4298 + (C4776 - C4777) * C82896) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C183 - C182) * C4296 + (C559 - C558) * C82932 +
            (C4208 - C4207) * C4297 + (C4771 - C4770) * C82918 +
            (C4216 - C4215) * C4298 + (C4773 - C4772) * C82896) *
               C1641 +
           ((C187 - C186) * C4296 + (C561 - C560) * C82932 +
            (C4212 - C4211) * C4297 + (C4775 - C4774) * C82918 +
            (C4220 - C4219) * C4298 + (C4777 - C4776) * C82896) *
               C1642 +
           ((C191 - C190) * C4296 + (C563 - C562) * C82932 +
            (C168 * C1152 - C82581 * C1216) * C4297 +
            (C168 * C1466 - C82581 * C1518) * C82918 +
            (C168 * C4111 - C82581 * C4201) * C4298 +
            (C168 * C4686 - C82581 * C4768) * C82896) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C239 +
            (C13256 * C551 - C13339 * C497 + C13257 * C1055 - C13340 * C1003 +
             C82893 * C2323 - C13341 * C2241) *
                C82592) *
               C82925 +
           ((C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C239 +
            (C13856 - C13857 + C13858 - C13859 + C13860 - C13861) * C82592) *
               C82909 +
           ((C13355 - C13356 + C13357 - C13358 + C13359 - C13360) * C239 +
            (C13862 - C13863 + C13864 - C13865 + C13866 - C13867) * C82592) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C13344 - C13343 + C13346 - C13345 + C13348 - C13347) * C239 +
            (C13857 - C13856 + C13859 - C13858 + C13861 - C13860) * C82592) *
               C82925 +
           ((C13356 - C13355 + C13358 - C13357 + C13360 - C13359) * C239 +
            (C13863 - C13862 + C13865 - C13864 + C13867 - C13866) * C82592) *
               C82909 +
           ((C13339 * C105 - C13256 * C172 + C13340 * C692 - C13257 * C756 +
             C13341 * C1656 - C82893 * C1749) *
                C239 +
            (C13339 * C500 - C13256 * C554 + C13340 * C1006 - C13257 * C1058 +
             C13341 * C2244 - C82893 * C2326) *
                C82592) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15400 * C169 - C15457 * C102 + C15401 * C753 - C15458 * C695 +
            C15402 * C1746 - C15459 * C1653 + C15403 * C2653 - C15460 * C2527 +
            C15404 * C15462 - C15461 * C15407) *
               C239 +
           (C15400 * C551 - C15457 * C497 + C15401 * C1055 - C15458 * C1003 +
            C15402 * C2323 - C15459 * C2241 + C15403 * C3175 - C15460 * C3083 +
            C15404 * C15739 - C15461 * C15693) *
               C82592) *
              C82523 * C82938 * C82939 * C90 +
          ((C15457 * C103 - C15400 * C170 + C15458 * C694 - C15401 * C754 +
            C15459 * C1654 - C15402 * C1747 + C15460 * C2526 - C15403 * C2654 +
            C15461 * C15408 - C15404 * C15463) *
               C239 +
           (C15457 * C498 - C15400 * C552 + C15458 * C1004 - C15401 * C1056 +
            C15459 * C2242 - C15402 * C2324 + C15460 * C3084 - C15403 * C3176 +
            C15461 * C15694 - C15404 * C15740) *
               C82592) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
            C82893 * C1746 - C13341 * C1653) *
               C4296 +
           (C13256 * C551 - C13339 * C497 + C13257 * C1055 - C13340 * C1003 +
            C82893 * C2323 - C13341 * C2241) *
               C82932 +
           (C13256 * C1213 - C13339 * C1155 + C13257 * C3441 - C13340 * C3348 +
            C82893 * C3442 - C13341 * C3345) *
               C4297 +
           (C13256 * C1515 - C13339 * C1463 + C13257 * C3945 - C13340 * C3859 +
            C82893 * C3946 - C13341 * C3862) *
               C82918 +
           (C13256 * C4198 - C13339 * C4108 + C13257 * C5060 - C13340 * C4976 +
            C82893 * C16827 - C13341 * C16745) *
               C4298 +
           (C13256 * C4765 - C13339 * C4683 + C13257 * C5534 - C13340 * C5454 +
            C82893 * C17291 - C13341 * C17213) *
               C82896) *
              C82523 * C82938 * C82939 * C90 +
          ((C13344 - C13343 + C13346 - C13345 + C13348 - C13347) * C4296 +
           (C13857 - C13856 + C13859 - C13858 + C13861 - C13860) * C82932 +
           (C13339 * C1154 - C13256 * C1214 + C13340 * C3347 - C13257 * C3443 +
            C13341 * C3344 - C82893 * C3444) *
               C4297 +
           (C13339 * C1464 - C13256 * C1516 + C13340 * C3860 - C13257 * C3947 +
            C13341 * C3863 - C82893 * C3948) *
               C82918 +
           (C13339 * C4109 - C13256 * C4199 + C13340 * C4975 - C13257 * C5061 +
            C13341 * C16746 - C82893 * C16828) *
               C4298 +
           (C13339 * C4684 - C13256 * C4766 + C13340 * C5455 - C13257 * C5535 +
            C13341 * C17214 - C82893 * C17292) *
               C82896) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82931 +
            (C239 * C805 - C607 * C695 - C239 * C1003 + C82592 * C1106) *
                C82916 +
            (C239 * C1852 - C607 * C1653 - C239 * C2241 + C82592 * C2413) *
                C82893) *
               C1641 +
           (C2418 + C2448 + C2449) * C1642 + (C2427 + C2450 + C2451) * C82885) *
              C82938 * C82939 * C90 -
          (((C239 * C1855 - C607 * C1656 - C239 * C2244 + C82592 * C2416) *
                C82893 +
            (C239 * C808 - C607 * C692 - C239 * C1006 + C82592 * C1103) *
                C82916 +
            C641 * C82931) *
               C82885 +
           (C2451 + C2450 + C2427) * C1642 + (C2449 + C2448 + C2418) * C1641) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82581 *
               C81 +
           C643 * C82 + C644 * C83 + C645 * C84 + C646 * C85) *
              C82938 * C82939 * C90 -
          ((C239 * C245 - C607 * C107 - C239 * C502 + C82592 * C613) * C82581 *
               C85 +
           C646 * C84 + C645 * C83 + C644 * C82 + C643 * C81) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4296 * C240 - C4851 * C102 - C4296 * C497 + C82932 * C608 +
            C4297 * C1265 - C4852 * C1155 - C4297 * C1463 + C82918 * C1566 +
            C4298 * C4299 - C4853 * C4108 - C4298 * C4683 + C82896 * C4854) *
               C82581 * C1641 +
           (C4895 + C4896 + C4897) * C82581 * C1642 +
           (C4898 + C4899 + C4900) * C82581 * C82885) *
              C82938 * C82939 * C90 -
          ((C4298 * C4302 - C4853 * C4111 - C4298 * C4686 + C82896 * C4857 +
            C4297 * C1268 - C4852 * C1152 - C4297 * C1466 + C82918 * C1563 +
            C4296 * C243 - C4851 * C105 - C4296 * C500 + C82932 * C611) *
               C82581 * C82885 +
           (C4900 + C4899 + C4898) * C82581 * C1642 +
           (C4897 + C4896 + C4895) * C82581 * C1641) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C13256 +
            C3268 * C13257 + C3269 * C82893) *
               C82925 +
           (C13942 + C13943 + C13944) * C82909 +
           (C13945 + C13946 + C13947) * C82885) *
              C82938 * C82939 * C90 -
          (((C239 * C1855 - C607 * C1656 - C239 * C2244 + C82592 * C2416) *
                C82893 +
            C7146 * C13257 + C641 * C13256) *
               C82885 +
           (C13947 + C13946 + C13945) * C82909 +
           (C13944 + C13943 + C13942) * C82925) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C15400 +
           C3268 * C15401 + C3269 * C15402 +
           (C239 * C2733 - C607 * C2527 - C239 * C3083 + C82592 * C3254) *
               C15403 +
           (C239 * C15508 - C607 * C15407 - C239 * C15693 + C82592 * C15783) *
               C15404) *
              C82523 * C82938 * C82939 * C90 -
          ((C239 * C15509 - C607 * C15408 - C239 * C15694 + C82592 * C15784) *
               C15404 +
           (C239 * C2734 - C607 * C2526 - C239 * C3084 + C82592 * C3253) *
               C15403 +
           C2445 * C15402 + C2444 * C15401 + C639 * C15400) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4296 * C240 - C4851 * C102 - C4296 * C497 + C82932 * C608 +
            C4297 * C1265 - C4852 * C1155 - C4297 * C1463 + C82918 * C1566 +
            C4298 * C4299 - C4853 * C4108 - C4298 * C4683 + C82896 * C4854) *
               C13256 +
           (C4296 * C805 - C4851 * C695 - C4296 * C1003 + C82932 * C1106 +
            C4297 * C3527 - C4852 * C3348 - C4297 * C3859 + C82918 * C4030 +
            C4298 * C5140 - C4853 * C4976 - C4298 * C5454 + C82896 * C5613) *
               C13257 +
           (C4296 * C1852 - C4851 * C1653 - C4296 * C2241 + C82932 * C2413 +
            C4297 * C3530 - C4852 * C3345 - C4297 * C3862 + C82918 * C4029 +
            C4298 * C16905 - C4853 * C16745 - C4298 * C17213 +
            C82896 * C17367) *
               C82893) *
              C82523 * C82938 * C82939 * C90 -
          ((C4298 * C16906 - C4853 * C16746 - C4298 * C17214 + C82896 * C17368 +
            C4297 * C3531 - C4852 * C3344 - C4297 * C3863 + C82918 * C4027 +
            C4296 * C1853 - C4851 * C1654 - C4296 * C2242 + C82932 * C2414) *
               C82893 +
           (C4298 * C5141 - C4853 * C4975 - C4298 * C5455 + C82896 * C5612 +
            C4297 * C3528 - C4852 * C3347 - C4297 * C3860 + C82918 * C4028 +
            C4296 * C806 - C4851 * C694 - C4296 * C1004 + C82932 * C1105) *
               C13257 +
           (C4897 + C4896 + C4895) * C13256) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexx[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1647 * C108 - C1648 * C102 - C1647 * C109 + C1641 * C120 +
            C1649 * C110 - C1650 * C103 - C1649 * C111 + C1642 * C121 +
            C1651 * C112 - C1652 * C104 - C1651 * C113 + C82885 * C122) *
               C82592 * C82931 +
           (C2574 + C2575 + C2576) * C82592 * C82916 +
           (C2577 + C2578 + C2579) * C82592 * C82893) *
              C82938 * C688 -
          ((C1651 * C2528 - C1652 * C2525 - C1651 * C2529 + C82885 * C2534 +
            C1649 * C2530 - C1650 * C2526 - C1649 * C2531 + C1642 * C2535 +
            C1647 * C2532 - C1648 * C2527 - C1647 * C2533 + C1641 * C2536) *
               C82592 * C82893 +
           (C2579 + C2578 + C2577) * C82592 * C82916 +
           (C2576 + C2575 + C2574) * C82592 * C82931) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C92 * C108 - C93 * C102 - C92 * C109 + C81 * C120 + C94 * C110 -
           C95 * C103 - C94 * C111 + C82 * C121 + C96 * C112 - C97 * C104 -
           C96 * C113 + C83 * C122 + C98 * C114 - C99 * C105 - C98 * C115 +
           C84 * C123 + C100 * C116 - C101 * C106 - C100 * C117 + C85 * C124) *
              C82592 * C82581 * C82938 * C688 -
          (C100 * C696 - C101 * C691 - C100 * C697 + C85 * C706 + C98 * C698 -
           C99 * C692 - C98 * C699 + C84 * C707 + C96 * C700 - C97 * C693 -
           C96 * C701 + C83 * C708 + C94 * C702 - C95 * C694 - C94 * C703 +
           C82 * C709 + C92 * C704 - C93 * C695 - C92 * C705 + C81 * C710) *
              C82592 * C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1647 * C108 - C1648 * C102 - C1647 * C109 + C1641 * C120 +
            C1649 * C110 - C1650 * C103 - C1649 * C111 + C1642 * C121 +
            C1651 * C112 - C1652 * C104 - C1651 * C113 + C82885 * C122) *
               C82932 +
           (C1647 * C1164 - C1648 * C1155 - C1647 * C1165 + C1641 * C1170 +
            C1649 * C1162 - C1650 * C1154 - C1649 * C1163 + C1642 * C1169 +
            C1651 * C1160 - C1652 * C1153 - C1651 * C1161 + C82885 * C1168) *
               C82918 +
           (C1647 * C4112 - C1648 * C4108 - C1647 * C4113 + C1641 * C4120 +
            C1649 * C4114 - C1650 * C4109 - C1649 * C4115 + C1642 * C4121 +
            C1651 * C4116 - C1652 * C4110 - C1651 * C4117 + C82885 * C4122) *
               C82896) *
              C82581 * C82938 * C688 -
          ((C1651 * C4977 - C1652 * C4974 - C1651 * C4978 + C82885 * C4983 +
            C1649 * C4979 - C1650 * C4975 - C1649 * C4980 + C1642 * C4984 +
            C1647 * C4981 - C1648 * C4976 - C1647 * C4982 + C1641 * C4985) *
               C82896 +
           (C1651 * C3355 - C1652 * C3346 - C1651 * C3356 + C82885 * C3364 +
            C1649 * C3357 - C1650 * C3347 - C1649 * C3358 + C1642 * C3365 +
            C1647 * C3359 - C1648 * C3348 - C1647 * C3360 + C1641 * C3366) *
               C82918 +
           (C2576 + C2575 + C2574) * C82932) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13259 * C108 - C13260 * C102 - C13259 * C109 + C82925 * C120 +
            C13261 * C110 - C13262 * C103 - C13261 * C111 + C82909 * C121 +
            C13263 * C112 - C13264 * C104 - C13263 * C113 + C82885 * C122) *
               C82592 * C13256 +
           (C14058 + C14059 + C14060) * C82592 * C13257 +
           (C14061 + C14062 + C14063) * C82592 * C82893) *
              C82938 * C688 -
          ((C13263 * C2528 - C13264 * C2525 - C13263 * C2529 + C82885 * C2534 +
            C13261 * C2530 - C13262 * C2526 - C13261 * C2531 + C82909 * C2535 +
            C13259 * C2532 - C13260 * C2527 - C13259 * C2533 + C82925 * C2536) *
               C82592 * C82893 +
           (C14063 + C14062 + C14061) * C82592 * C13257 +
           (C14060 + C14059 + C14058) * C82592 * C13256) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
               C82592 * C15400 +
           C15860 * C15401 + C15861 * C15402 + C15862 * C15403 +
           C15863 * C15404) *
              C82938 * C688 -
          ((C15405 * C15828 - C15406 * C15827 - C15405 * C15829 +
            C82523 * C15830) *
               C82592 * C15404 +
           C15863 * C15403 + C15862 * C15402 + C15861 * C15401 +
           C15860 * C15400) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C82932 +
            (C15405 * C1164 - C15406 * C1155 - C15405 * C1165 +
             C82523 * C1170) *
                C82918 +
            (C15405 * C4112 - C15406 * C4108 - C15405 * C4113 +
             C82523 * C4120) *
                C82896) *
               C13256 +
           (C17448 + C17478 + C17479) * C13257 +
           (C17457 + C17480 + C17481) * C82893) *
              C82938 * C688 -
          (((C15405 * C17444 - C15406 * C17443 - C15405 * C17445 +
             C82523 * C17446) *
                C82896 +
            (C15405 * C16307 - C15406 * C16304 - C15405 * C16308 +
             C82523 * C16310) *
                C82918 +
            C15858 * C82932) *
               C82893 +
           (C17481 + C17480 + C17457) * C13257 +
           (C17479 + C17478 + C17448) * C13256) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
            C82893 * C1746 - C1745 * C1653) *
               C1647 +
           (C82931 * C175 - C1743 * C109 + C82916 * C758 - C1744 * C705 +
            C82893 * C1750 - C1745 * C1658) *
               C1641 +
           (C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C1649 +
           (C1761 - C1762 + C1763 - C1764 + C1765 - C1766) * C1642 +
           (C1767 - C1768 + C1769 - C1770 + C1771 - C1772) * C1651 +
           (C1773 - C1774 + C1775 - C1776 + C1777 - C1778) * C82885) *
              C82592 * C82938 * C688 +
          ((C1743 * C695 - C82931 * C753 + C1744 * C1653 - C82916 * C1746 +
            C1745 * C2527 - C82893 * C2653) *
               C1647 +
           (C1743 * C705 - C82931 * C758 + C1744 * C1658 - C82916 * C1750 +
            C1745 * C2533 - C82893 * C2656) *
               C1641 +
           (C1743 * C694 - C82931 * C754 + C1744 * C1654 - C82916 * C1747 +
            C1745 * C2526 - C82893 * C2654) *
               C1649 +
           (C1743 * C703 - C82931 * C759 + C1744 * C1660 - C82916 * C1751 +
            C1745 * C2531 - C82893 * C2657) *
               C1642 +
           (C1743 * C693 - C82931 * C755 + C1744 * C1655 - C82916 * C1748 +
            C1745 * C2525 - C82893 * C2655) *
               C1651 +
           (C1743 * C701 - C82931 * C760 + C1744 * C1662 - C82916 * C1752 +
            C1745 * C2529 - C82893 * C2658) *
               C82885) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82581 * C169 - C168 * C102) * C92 +
           (C82581 * C175 - C168 * C109) * C81 + (C182 - C183) * C94 +
           (C184 - C185) * C82 + (C186 - C187) * C96 + (C188 - C189) * C83 +
           (C190 - C191) * C98 + (C192 - C193) * C84 + (C194 - C195) * C100 +
           (C196 - C197) * C85) *
              C82592 * C82938 * C688 +
          ((C168 * C695 - C82581 * C753) * C92 +
           (C168 * C705 - C82581 * C758) * C81 +
           (C168 * C694 - C82581 * C754) * C94 +
           (C168 * C703 - C82581 * C759) * C82 +
           (C168 * C693 - C82581 * C755) * C96 +
           (C168 * C701 - C82581 * C760) * C83 +
           (C168 * C692 - C82581 * C756) * C98 +
           (C168 * C699 - C82581 * C761) * C84 +
           (C168 * C691 - C82581 * C757) * C100 +
           (C168 * C697 - C82581 * C762) * C85) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C1647 +
            (C82581 * C175 - C168 * C109) * C1641 + (C182 - C183) * C1649 +
            (C184 - C185) * C1642 + (C186 - C187) * C1651 +
            (C188 - C189) * C82885) *
               C82932 +
           ((C82581 * C1213 - C168 * C1155) * C1647 +
            (C82581 * C1218 - C168 * C1165) * C1641 + (C4207 - C4208) * C1649 +
            (C4209 - C4210) * C1642 + (C4211 - C4212) * C1651 +
            (C4213 - C4214) * C82885) *
               C82918 +
           ((C82581 * C4198 - C168 * C4108) * C1647 +
            (C82581 * C4202 - C168 * C4113) * C1641 + (C4215 - C4216) * C1649 +
            (C4217 - C4218) * C1642 + (C4219 - C4220) * C1651 +
            (C4221 - C4222) * C82885) *
               C82896) *
              C82938 * C688 +
          (((C168 * C695 - C82581 * C753) * C1647 +
            (C168 * C705 - C82581 * C758) * C1641 +
            (C168 * C694 - C82581 * C754) * C1649 +
            (C168 * C703 - C82581 * C759) * C1642 +
            (C168 * C693 - C82581 * C755) * C1651 +
            (C168 * C701 - C82581 * C760) * C82885) *
               C82932 +
           ((C168 * C3348 - C82581 * C3441) * C1647 +
            (C168 * C3360 - C82581 * C3447) * C1641 +
            (C168 * C3347 - C82581 * C3443) * C1649 +
            (C168 * C3358 - C82581 * C3449) * C1642 +
            (C168 * C3346 - C82581 * C3445) * C1651 +
            (C168 * C3356 - C82581 * C3451) * C82885) *
               C82918 +
           ((C168 * C4976 - C82581 * C5060) * C1647 +
            (C168 * C4982 - C82581 * C5063) * C1641 +
            (C168 * C4975 - C82581 * C5061) * C1649 +
            (C168 * C4980 - C82581 * C5064) * C1642 +
            (C168 * C4974 - C82581 * C5062) * C1651 +
            (C168 * C4978 - C82581 * C5065) * C82885) *
               C82896) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
            C82893 * C1746 - C13341 * C1653) *
               C13259 +
           (C13256 * C175 - C13339 * C109 + C13257 * C758 - C13340 * C705 +
            C82893 * C1750 - C13341 * C1658) *
               C82925 +
           (C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C13261 +
           (C13349 - C13350 + C13351 - C13352 + C13353 - C13354) * C82909 +
           (C13355 - C13356 + C13357 - C13358 + C13359 - C13360) * C13263 +
           (C13361 - C13362 + C13363 - C13364 + C13365 - C13366) * C82885) *
              C82592 * C82938 * C688 +
          ((C13339 * C695 - C13256 * C753 + C13340 * C1653 - C13257 * C1746 +
            C13341 * C2527 - C82893 * C2653) *
               C13259 +
           (C13339 * C705 - C13256 * C758 + C13340 * C1658 - C13257 * C1750 +
            C13341 * C2533 - C82893 * C2656) *
               C82925 +
           (C13339 * C694 - C13256 * C754 + C13340 * C1654 - C13257 * C1747 +
            C13341 * C2526 - C82893 * C2654) *
               C13261 +
           (C13339 * C703 - C13256 * C759 + C13340 * C1660 - C13257 * C1751 +
            C13341 * C2531 - C82893 * C2657) *
               C82909 +
           (C13339 * C693 - C13256 * C755 + C13340 * C1655 - C13257 * C1748 +
            C13341 * C2525 - C82893 * C2655) *
               C13263 +
           (C13339 * C701 - C13256 * C760 + C13340 * C1662 - C13257 * C1752 +
            C13341 * C2529 - C82893 * C2658) *
               C82885) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15400 * C169 - C15457 * C102 + C15401 * C753 - C15458 * C695 +
            C15402 * C1746 - C15459 * C1653 + C15403 * C2653 - C15460 * C2527 +
            C15404 * C15462 - C15461 * C15407) *
               C15405 +
           (C15400 * C175 - C15457 * C109 + C15401 * C758 - C15458 * C705 +
            C15402 * C1750 - C15459 * C1658 + C15403 * C2656 - C15460 * C2533 +
            C15404 * C15464 - C15461 * C15410) *
               C82523) *
              C82592 * C82938 * C688 +
          ((C15457 * C695 - C15400 * C753 + C15458 * C1653 - C15401 * C1746 +
            C15459 * C2527 - C15402 * C2653 + C15460 * C15407 -
            C15403 * C15462 + C15461 * C15827 - C15404 * C15905) *
               C15405 +
           (C15457 * C705 - C15400 * C758 + C15458 * C1658 - C15401 * C1750 +
            C15459 * C2533 - C15402 * C2656 + C15460 * C15410 -
            C15403 * C15464 + C15461 * C15829 - C15404 * C15906) *
               C82523) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C15405 +
            (C13256 * C175 - C13339 * C109 + C13257 * C758 - C13340 * C705 +
             C82893 * C1750 - C13341 * C1658) *
                C82523) *
               C82932 +
           ((C13256 * C1213 - C13339 * C1155 + C13257 * C3441 - C13340 * C3348 +
             C82893 * C3442 - C13341 * C3345) *
                C15405 +
            (C13256 * C1218 - C13339 * C1165 + C13257 * C3447 - C13340 * C3360 +
             C82893 * C3448 - C13341 * C3354) *
                C82523) *
               C82918 +
           ((C13256 * C4198 - C13339 * C4108 + C13257 * C5060 - C13340 * C4976 +
             C82893 * C16827 - C13341 * C16745) *
                C15405 +
            (C13256 * C4202 - C13339 * C4113 + C13257 * C5063 - C13340 * C4982 +
             C82893 * C16829 - C13341 * C16748) *
                C82523) *
               C82896) *
              C82938 * C688 +
          (((C13339 * C695 - C13256 * C753 + C13340 * C1653 - C13257 * C1746 +
             C13341 * C2527 - C82893 * C2653) *
                C15405 +
            (C13339 * C705 - C13256 * C758 + C13340 * C1658 - C13257 * C1750 +
             C13341 * C2533 - C82893 * C2656) *
                C82523) *
               C82932 +
           ((C13339 * C3348 - C13256 * C3441 + C13340 * C3345 - C13257 * C3442 +
             C13341 * C16304 - C82893 * C16353) *
                C15405 +
            (C13339 * C3360 - C13256 * C3447 + C13340 * C3354 - C13257 * C3448 +
             C13341 * C16308 - C82893 * C16355) *
                C82523) *
               C82918 +
           ((C13339 * C4976 - C13256 * C5060 + C13340 * C16745 -
             C13257 * C16827 + C13341 * C17443 - C82893 * C17555) *
                C15405 +
            (C13339 * C4982 - C13256 * C5063 + C13340 * C16748 -
             C13257 * C16829 + C13341 * C17445 - C82893 * C17556) *
                C82523) *
               C82896) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C1647 +
            (C82592 * C246 - C239 * C109) * C1641 + (C253 - C254) * C1649 +
            (C255 - C256) * C1642 + (C257 - C258) * C1651 +
            (C259 - C260) * C82885) *
               C82931 +
           ((C2740 - C2741) * C1647 + (C2742 - C2743) * C1641 +
            (C1861 - C1862) * C1649 + (C1863 - C1864) * C1642 +
            (C1865 - C1866) * C1651 + (C1867 - C1868) * C82885) *
               C82916 +
           ((C2744 - C2745) * C1647 + (C2746 - C2747) * C1641 +
            (C1869 - C1870) * C1649 + (C1871 - C1872) * C1642 +
            (C1873 - C1874) * C1651 + (C1875 - C1876) * C82885) *
               C82893) *
              C82938 * C688 +
          (((C2741 - C2740) * C1647 + (C2743 - C2742) * C1641 +
            (C1862 - C1861) * C1649 + (C1864 - C1863) * C1642 +
            (C1866 - C1865) * C1651 + (C1868 - C1867) * C82885) *
               C82931 +
           ((C2745 - C2744) * C1647 + (C2747 - C2746) * C1641 +
            (C1870 - C1869) * C1649 + (C1872 - C1871) * C1642 +
            (C1874 - C1873) * C1651 + (C1876 - C1875) * C82885) *
               C82916 +
           ((C239 * C2527 - C82592 * C2733) * C1647 +
            (C239 * C2533 - C82592 * C2736) * C1641 +
            (C239 * C2526 - C82592 * C2734) * C1649 +
            (C239 * C2531 - C82592 * C2737) * C1642 +
            (C239 * C2525 - C82592 * C2735) * C1651 +
            (C239 * C2529 - C82592 * C2738) * C82885) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82592 * C240 - C239 * C102) * C92 +
           (C82592 * C246 - C239 * C109) * C81 + (C253 - C254) * C94 +
           (C255 - C256) * C82 + (C257 - C258) * C96 + (C259 - C260) * C83 +
           (C261 - C262) * C98 + (C263 - C264) * C84 + (C265 - C266) * C100 +
           (C267 - C268) * C85) *
              C82581 * C82938 * C688 +
          ((C239 * C695 - C82592 * C805) * C92 +
           (C239 * C705 - C82592 * C810) * C81 +
           (C239 * C694 - C82592 * C806) * C94 +
           (C239 * C703 - C82592 * C811) * C82 +
           (C239 * C693 - C82592 * C807) * C96 +
           (C239 * C701 - C82592 * C812) * C83 +
           (C239 * C692 - C82592 * C808) * C98 +
           (C239 * C699 - C82592 * C813) * C84 +
           (C239 * C691 - C82592 * C809) * C100 +
           (C239 * C697 - C82592 * C814) * C85) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
            C82896 * C4299 - C4298 * C4108) *
               C1647 +
           (C82932 * C246 - C4296 * C109 + C82918 * C1270 - C4297 * C1165 +
            C82896 * C4303 - C4298 * C4113) *
               C1641 +
           (C4308 - C4309 + C4310 - C4311 + C4312 - C4313) * C1649 +
           (C4314 - C4315 + C4316 - C4317 + C4318 - C4319) * C1642 +
           (C4320 - C4321 + C4322 - C4323 + C4324 - C4325) * C1651 +
           (C4326 - C4327 + C4328 - C4329 + C4330 - C4331) * C82885) *
              C82581 * C82938 * C688 +
          ((C4296 * C695 - C82932 * C805 + C4297 * C3348 - C82918 * C3527 +
            C4298 * C4976 - C82896 * C5140) *
               C1647 +
           (C4296 * C705 - C82932 * C810 + C4297 * C3360 - C82918 * C3533 +
            C4298 * C4982 - C82896 * C5143) *
               C1641 +
           (C4296 * C694 - C82932 * C806 + C4297 * C3347 - C82918 * C3528 +
            C4298 * C4975 - C82896 * C5141) *
               C1649 +
           (C4296 * C703 - C82932 * C811 + C4297 * C3358 - C82918 * C3534 +
            C4298 * C4980 - C82896 * C5144) *
               C1642 +
           (C4296 * C693 - C82932 * C807 + C4297 * C3346 - C82918 * C3529 +
            C4298 * C4974 - C82896 * C5142) *
               C1651 +
           (C4296 * C701 - C82932 * C812 + C4297 * C3356 - C82918 * C3535 +
            C4298 * C4978 - C82896 * C5145) *
               C82885) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C13259 +
            (C82592 * C246 - C239 * C109) * C82925 + (C253 - C254) * C13261 +
            (C255 - C256) * C82909 + (C257 - C258) * C13263 +
            (C259 - C260) * C82885) *
               C13256 +
           ((C2740 - C2741) * C13259 + (C2742 - C2743) * C82925 +
            (C1861 - C1862) * C13261 + (C1863 - C1864) * C82909 +
            (C1865 - C1866) * C13263 + (C1867 - C1868) * C82885) *
               C13257 +
           ((C2744 - C2745) * C13259 + (C2746 - C2747) * C82925 +
            (C1869 - C1870) * C13261 + (C1871 - C1872) * C82909 +
            (C1873 - C1874) * C13263 + (C1875 - C1876) * C82885) *
               C82893) *
              C82938 * C688 +
          (((C2741 - C2740) * C13259 + (C2743 - C2742) * C82925 +
            (C1862 - C1861) * C13261 + (C1864 - C1863) * C82909 +
            (C1866 - C1865) * C13263 + (C1868 - C1867) * C82885) *
               C13256 +
           ((C2745 - C2744) * C13259 + (C2747 - C2746) * C82925 +
            (C1870 - C1869) * C13261 + (C1872 - C1871) * C82909 +
            (C1874 - C1873) * C13263 + (C1876 - C1875) * C82885) *
               C13257 +
           ((C239 * C2527 - C82592 * C2733) * C13259 +
            (C239 * C2533 - C82592 * C2736) * C82925 +
            (C239 * C2526 - C82592 * C2734) * C13261 +
            (C239 * C2531 - C82592 * C2737) * C82909 +
            (C239 * C2525 - C82592 * C2735) * C13263 +
            (C239 * C2529 - C82592 * C2738) * C82885) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C15405 +
            (C82592 * C246 - C239 * C109) * C82523) *
               C15400 +
           ((C2740 - C2741) * C15405 + (C2742 - C2743) * C82523) * C15401 +
           ((C2744 - C2745) * C15405 + (C2746 - C2747) * C82523) * C15402 +
           ((C15952 - C15953) * C15405 + (C15954 - C15955) * C82523) * C15403 +
           ((C15956 - C15957) * C15405 + (C15958 - C15959) * C82523) * C15404) *
              C82938 * C688 +
          (((C2741 - C2740) * C15405 + (C2743 - C2742) * C82523) * C15400 +
           ((C2745 - C2744) * C15405 + (C2747 - C2746) * C82523) * C15401 +
           ((C15953 - C15952) * C15405 + (C15955 - C15954) * C82523) * C15402 +
           ((C15957 - C15956) * C15405 + (C15959 - C15958) * C82523) * C15403 +
           ((C239 * C15827 - C82592 * C15949) * C15405 +
            (C239 * C15829 - C82592 * C15950) * C82523) *
               C15404) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
             C82896 * C4299 - C4298 * C4108) *
                C15405 +
            (C82932 * C246 - C4296 * C109 + C82918 * C1270 - C4297 * C1165 +
             C82896 * C4303 - C4298 * C4113) *
                C82523) *
               C13256 +
           ((C17634 - C17635 + C17636 - C17637 + C17638 - C17639) * C15405 +
            (C17640 - C17641 + C17642 - C17643 + C17644 - C17645) * C82523) *
               C13257 +
           ((C17646 - C17647 + C17648 - C17649 + C17650 - C17651) * C15405 +
            (C17652 - C17653 + C17654 - C17655 + C17656 - C17657) * C82523) *
               C82893) *
              C82938 * C688 +
          (((C17635 - C17634 + C17637 - C17636 + C17639 - C17638) * C15405 +
            (C17641 - C17640 + C17643 - C17642 + C17645 - C17644) * C82523) *
               C13256 +
           ((C17647 - C17646 + C17649 - C17648 + C17651 - C17650) * C15405 +
            (C17653 - C17652 + C17655 - C17654 + C17657 - C17656) * C82523) *
               C13257 +
           ((C4296 * C2527 - C82932 * C2733 + C4297 * C16304 - C82918 * C16399 +
             C4298 * C17443 - C82896 * C17631) *
                C15405 +
            (C4296 * C2533 - C82932 * C2736 + C4297 * C16308 - C82918 * C16401 +
             C4298 * C17445 - C82896 * C17632) *
                C82523) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
            C82885 * C112 - C1651 * C104) *
               C1743 +
           (C1641 * C316 - C1647 * C310 + C1642 * C317 - C1649 * C311 +
            C82885 * C318 - C1651 * C312) *
               C82931 +
           (C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C1744 +
           (C2834 - C2835 + C2836 - C2837 + C2838 - C2839) * C82916 +
           (C2840 - C2841 + C2842 - C2843 + C2844 - C2845) * C1745 +
           (C2846 - C2847 + C2848 - C2849 + C2850 - C2851) * C82893) *
              C82592 * C82938 * C688 +
          ((C2829 - C2828 + C2831 - C2830 + C2833 - C2832) * C1743 +
           (C2835 - C2834 + C2837 - C2836 + C2839 - C2838) * C82931 +
           (C2841 - C2840 + C2843 - C2842 + C2845 - C2844) * C1744 +
           (C2847 - C2846 + C2849 - C2848 + C2851 - C2850) * C82916 +
           (C1647 * C2527 - C1641 * C2532 + C1649 * C2526 - C1642 * C2530 +
            C1651 * C2525 - C82885 * C2528) *
               C1745 +
           (C1647 * C2821 - C1641 * C2824 + C1649 * C2822 - C1642 * C2825 +
            C1651 * C2823 - C82885 * C2826) *
               C82893) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C108 - C92 * C102 + C82 * C110 - C94 * C103 + C83 * C112 -
            C96 * C104 + C84 * C114 - C98 * C105 + C85 * C116 - C100 * C106) *
               C168 +
           (C81 * C316 - C92 * C310 + C82 * C317 - C94 * C311 + C83 * C318 -
            C96 * C312 + C84 * C319 - C98 * C313 + C85 * C320 - C100 * C314) *
               C82581) *
              C82592 * C82938 * C688 +
          ((C92 * C695 - C81 * C704 + C94 * C694 - C82 * C702 + C96 * C693 -
            C83 * C700 + C98 * C692 - C84 * C698 + C100 * C691 - C85 * C696) *
               C168 +
           (C92 * C857 - C81 * C862 + C94 * C858 - C82 * C863 + C96 * C859 -
            C83 * C864 + C98 * C860 - C84 * C865 + C100 * C861 - C85 * C866) *
               C82581) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
             C82885 * C112 - C1651 * C104) *
                C168 +
            (C1641 * C316 - C1647 * C310 + C1642 * C317 - C1649 * C311 +
             C82885 * C318 - C1651 * C312) *
                C82581) *
               C82932 +
           ((C1641 * C1164 - C1647 * C1155 + C1642 * C1162 - C1649 * C1154 +
             C82885 * C1160 - C1651 * C1153) *
                C168 +
            (C1641 * C1322 - C1647 * C1317 + C1642 * C1323 - C1649 * C1318 +
             C82885 * C1324 - C1651 * C1319) *
                C82581) *
               C82918 +
           ((C1641 * C4112 - C1647 * C4108 + C1642 * C4114 - C1649 * C4109 +
             C82885 * C4116 - C1651 * C4110) *
                C168 +
            (C1641 * C4409 - C1647 * C4405 + C1642 * C4410 - C1649 * C4406 +
             C82885 * C4411 - C1651 * C4407) *
                C82581) *
               C82896) *
              C82938 * C688 +
          (((C2829 - C2828 + C2831 - C2830 + C2833 - C2832) * C168 +
            (C2835 - C2834 + C2837 - C2836 + C2839 - C2838) * C82581) *
               C82932 +
           ((C1647 * C3348 - C1641 * C3359 + C1649 * C3347 - C1642 * C3357 +
             C1651 * C3346 - C82885 * C3355) *
                C168 +
            (C1647 * C3613 - C1641 * C3619 + C1649 * C3614 - C1642 * C3620 +
             C1651 * C3615 - C82885 * C3621) *
                C82581) *
               C82918 +
           ((C1647 * C4976 - C1641 * C4981 + C1649 * C4975 - C1642 * C4979 +
             C1651 * C4974 - C82885 * C4977) *
                C168 +
            (C1647 * C5220 - C1641 * C5223 + C1649 * C5221 - C1642 * C5224 +
             C1651 * C5222 - C82885 * C5225) *
                C82581) *
               C82896) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
            C82885 * C112 - C13263 * C104) *
               C13339 +
           (C82925 * C316 - C13259 * C310 + C82909 * C317 - C13261 * C311 +
            C82885 * C318 - C13263 * C312) *
               C13256 +
           (C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C13340 +
           (C14292 - C14293 + C14294 - C14295 + C14296 - C14297) * C13257 +
           (C14298 - C14299 + C14300 - C14301 + C14302 - C14303) * C13341 +
           (C14304 - C14305 + C14306 - C14307 + C14308 - C14309) * C82893) *
              C82592 * C82938 * C688 +
          ((C14287 - C14286 + C14289 - C14288 + C14291 - C14290) * C13339 +
           (C14293 - C14292 + C14295 - C14294 + C14297 - C14296) * C13256 +
           (C14299 - C14298 + C14301 - C14300 + C14303 - C14302) * C13340 +
           (C14305 - C14304 + C14307 - C14306 + C14309 - C14308) * C13257 +
           (C13259 * C2527 - C82925 * C2532 + C13261 * C2526 - C82909 * C2530 +
            C13263 * C2525 - C82885 * C2528) *
               C13341 +
           (C13259 * C2821 - C82925 * C2824 + C13261 * C2822 - C82909 * C2825 +
            C13263 * C2823 - C82885 * C2826) *
               C82893) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82523 * C108 - C15405 * C102) * C15457 +
           (C82523 * C316 - C15405 * C310) * C15400 +
           (C16004 - C16005) * C15458 + (C16006 - C16007) * C15401 +
           (C16008 - C16009) * C15459 + (C16010 - C16011) * C15402 +
           (C16012 - C16013) * C15460 + (C16014 - C16015) * C15403 +
           (C16016 - C16017) * C15461 + (C16018 - C16019) * C15404) *
              C82592 * C82938 * C688 +
          ((C16005 - C16004) * C15457 + (C16007 - C16006) * C15400 +
           (C16009 - C16008) * C15458 + (C16011 - C16010) * C15401 +
           (C16013 - C16012) * C15459 + (C16015 - C16014) * C15402 +
           (C16017 - C16016) * C15460 + (C16019 - C16018) * C15403 +
           (C15405 * C15827 - C82523 * C15828) * C15461 +
           (C15405 * C16001 - C82523 * C16002) * C15404) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C13339 +
            (C82523 * C316 - C15405 * C310) * C13256 +
            (C16004 - C16005) * C13340 + (C16006 - C16007) * C13257 +
            (C16008 - C16009) * C13341 + (C16010 - C16011) * C82893) *
               C82932 +
           ((C82523 * C1164 - C15405 * C1155) * C13339 +
            (C82523 * C1322 - C15405 * C1317) * C13256 +
            (C17734 - C17735) * C13340 + (C17736 - C17737) * C13257 +
            (C17738 - C17739) * C13341 + (C17740 - C17741) * C82893) *
               C82918 +
           ((C82523 * C4112 - C15405 * C4108) * C13339 +
            (C82523 * C4409 - C15405 * C4405) * C13256 +
            (C17742 - C17743) * C13340 + (C17744 - C17745) * C13257 +
            (C17746 - C17747) * C13341 + (C17748 - C17749) * C82893) *
               C82896) *
              C82938 * C688 +
          (((C16005 - C16004) * C13339 + (C16007 - C16006) * C13256 +
            (C16009 - C16008) * C13340 + (C16011 - C16010) * C13257 +
            (C16013 - C16012) * C13341 + (C16015 - C16014) * C82893) *
               C82932 +
           ((C17735 - C17734) * C13339 + (C17737 - C17736) * C13256 +
            (C17739 - C17738) * C13340 + (C17741 - C17740) * C13257 +
            (C15405 * C16304 - C82523 * C16307) * C13341 +
            (C15405 * C16445 - C82523 * C16447) * C82893) *
               C82918 +
           ((C17743 - C17742) * C13339 + (C17745 - C17744) * C13256 +
            (C17747 - C17746) * C13340 + (C17749 - C17748) * C13257 +
            (C15405 * C17443 - C82523 * C17444) * C13341 +
            (C15405 * C17731 - C82523 * C17732) * C82893) *
               C82896) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1743 * C169 - C2032 * C102 - C1743 * C310 + C82931 * C365 +
            C1744 * C753 - C2033 * C695 - C1744 * C857 + C82916 * C913 +
            C1745 * C1746 - C2034 * C1653 - C1745 * C1950 + C82893 * C2035) *
               C1641 +
           (C2076 + C2077 + C2078) * C1642 + (C2079 + C2080 + C2081) * C82885) *
              C82592 * C82938 * C688 -
          ((C1745 * C2655 - C2034 * C2525 - C1745 * C2823 + C82893 * C2925 +
            C1744 * C1748 - C2033 * C1655 - C1744 * C1952 + C82916 * C2037 +
            C1743 * C755 - C2032 * C693 - C1743 * C859 + C82931 * C911) *
               C82885 +
           (C1745 * C2654 - C2034 * C2526 - C1745 * C2822 + C82893 * C2926 +
            C1744 * C1747 - C2033 * C1654 - C1744 * C1951 + C82916 * C2036 +
            C1743 * C754 - C2032 * C694 - C1743 * C858 + C82931 * C912) *
               C1642 +
           (C1745 * C2653 - C2034 * C2527 - C1745 * C2821 + C82893 * C2927 +
            C1744 * C1746 - C2033 * C1653 - C1744 * C1950 + C82916 * C2035 +
            C1743 * C753 - C2032 * C695 - C1743 * C857 + C82931 * C913) *
               C1641) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C81 +
           C396 * C82 + C397 * C83 + C398 * C84 + C399 * C85) *
              C82592 * C82938 * C688 -
          ((C168 * C757 - C364 * C691 - C168 * C861 + C82581 * C909) * C85 +
           (C168 * C756 - C364 * C692 - C168 * C860 + C82581 * C910) * C84 +
           (C168 * C755 - C364 * C693 - C168 * C859 + C82581 * C911) * C83 +
           (C168 * C754 - C364 * C694 - C168 * C858 + C82581 * C912) * C82 +
           (C168 * C753 - C364 * C695 - C168 * C857 + C82581 * C913) * C81) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C1641 +
            C396 * C1642 + C397 * C82885) *
               C82932 +
           ((C168 * C1213 - C364 * C1155 - C168 * C1317 + C82581 * C1373) *
                C1641 +
            C4516 * C1642 + C4517 * C82885) *
               C82918 +
           ((C168 * C4198 - C364 * C4108 - C168 * C4405 + C82581 * C4487) *
                C1641 +
            C4518 * C1642 + C4519 * C82885) *
               C82896) *
              C82938 * C688 -
          (((C168 * C5062 - C364 * C4974 - C168 * C5222 + C82581 * C5300) *
                C82885 +
            (C168 * C5061 - C364 * C4975 - C168 * C5221 + C82581 * C5301) *
                C1642 +
            (C168 * C5060 - C364 * C4976 - C168 * C5220 + C82581 * C5302) *
                C1641) *
               C82896 +
           ((C168 * C3445 - C364 * C3346 - C168 * C3615 + C82581 * C3700) *
                C82885 +
            (C168 * C3443 - C364 * C3347 - C168 * C3614 + C82581 * C3702) *
                C1642 +
            (C168 * C3441 - C364 * C3348 - C168 * C3613 + C82581 * C3704) *
                C1641) *
               C82918 +
           ((C168 * C755 - C364 * C693 - C168 * C859 + C82581 * C911) * C82885 +
            (C168 * C754 - C364 * C694 - C168 * C858 + C82581 * C912) * C1642 +
            (C168 * C753 - C364 * C695 - C168 * C857 + C82581 * C913) * C1641) *
               C82932) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13339 * C169 - C13588 * C102 - C13339 * C310 + C13256 * C365 +
            C13340 * C753 - C13589 * C695 - C13340 * C857 + C13257 * C913 +
            C13341 * C1746 - C13590 * C1653 - C13341 * C1950 + C82893 * C2035) *
               C82925 +
           (C13628 + C13629 + C13630) * C82909 +
           (C13631 + C13632 + C13633) * C82885) *
              C82592 * C82938 * C688 -
          ((C13341 * C2655 - C13590 * C2525 - C13341 * C2823 + C82893 * C2925 +
            C13340 * C1748 - C13589 * C1655 - C13340 * C1952 + C13257 * C2037 +
            C13339 * C755 - C13588 * C693 - C13339 * C859 + C13256 * C911) *
               C82885 +
           (C13341 * C2654 - C13590 * C2526 - C13341 * C2822 + C82893 * C2926 +
            C13340 * C1747 - C13589 * C1654 - C13340 * C1951 + C13257 * C2036 +
            C13339 * C754 - C13588 * C694 - C13339 * C858 + C13256 * C912) *
               C82909 +
           (C13341 * C2653 - C13590 * C2527 - C13341 * C2821 + C82893 * C2927 +
            C13340 * C1746 - C13589 * C1653 - C13340 * C1950 + C13257 * C2035 +
            C13339 * C753 - C13588 * C695 - C13339 * C857 + C13256 * C913) *
               C82925) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C15457 * C169 - C15600 * C102 - C15457 * C310 + C15400 * C365 +
           C15458 * C753 - C15601 * C695 - C15458 * C857 + C15401 * C913 +
           C15459 * C1746 - C15602 * C1653 - C15459 * C1950 + C15402 * C2035 +
           C15460 * C2653 - C15603 * C2527 - C15460 * C2821 + C15403 * C2927 +
           C15461 * C15462 - C15604 * C15407 - C15461 * C15554 +
           C15404 * C15605) *
              C82523 * C82592 * C82938 * C688 -
          (C15461 * C15905 - C15604 * C15827 - C15461 * C16001 +
           C15404 * C16061 + C15460 * C15462 - C15603 * C15407 -
           C15460 * C15554 + C15403 * C15605 + C15459 * C2653 - C15602 * C2527 -
           C15459 * C2821 + C15402 * C2927 + C15458 * C1746 - C15601 * C1653 -
           C15458 * C1950 + C15401 * C2035 + C15457 * C753 - C15600 * C695 -
           C15457 * C857 + C15400 * C913) *
              C82523 * C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13339 * C169 - C13588 * C102 - C13339 * C310 + C13256 * C365 +
            C13340 * C753 - C13589 * C695 - C13340 * C857 + C13257 * C913 +
            C13341 * C1746 - C13590 * C1653 - C13341 * C1950 + C82893 * C2035) *
               C82523 * C82932 +
           (C13339 * C1213 - C13588 * C1155 - C13339 * C1317 + C13256 * C1373 +
            C13340 * C3441 - C13589 * C3348 - C13340 * C3613 + C13257 * C3704 +
            C13341 * C3442 - C13590 * C3345 - C13341 * C3616 + C82893 * C3703) *
               C82523 * C82918 +
           (C13339 * C4198 - C13588 * C4108 - C13339 * C4405 + C13256 * C4487 +
            C13340 * C5060 - C13589 * C4976 - C13340 * C5220 + C13257 * C5302 +
            C13341 * C16827 - C13590 * C16745 - C13341 * C16983 +
            C82893 * C17061) *
               C82523 * C82896) *
              C82938 * C688 -
          ((C13341 * C17555 - C13590 * C17443 - C13341 * C17731 +
            C82893 * C17823 + C13340 * C16827 - C13589 * C16745 -
            C13340 * C16983 + C13257 * C17061 + C13339 * C5060 -
            C13588 * C4976 - C13339 * C5220 + C13256 * C5302) *
               C82523 * C82896 +
           (C13341 * C16353 - C13590 * C16304 - C13341 * C16445 +
            C82893 * C16492 + C13340 * C3442 - C13589 * C3345 - C13340 * C3616 +
            C13257 * C3703 + C13339 * C3441 - C13588 * C3348 - C13339 * C3613 +
            C13256 * C3704) *
               C82523 * C82918 +
           (C13341 * C2653 - C13590 * C2527 - C13341 * C2821 + C82893 * C2927 +
            C13340 * C1746 - C13589 * C1653 - C13340 * C1950 + C13257 * C2035 +
            C13339 * C753 - C13588 * C695 - C13339 * C857 + C13256 * C913) *
               C82523 * C82932) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C1743 +
            (C82592 * C441 - C239 * C310) * C82931 + (C2740 - C2741) * C1744 +
            (C3006 - C3007) * C82916 + (C2744 - C2745) * C1745 +
            (C3008 - C3009) * C82893) *
               C1641 +
           ((C253 - C254) * C1743 + (C448 - C449) * C82931 +
            (C1861 - C1862) * C1744 + (C2160 - C2161) * C82916 +
            (C1869 - C1870) * C1745 + (C2162 - C2163) * C82893) *
               C1642 +
           ((C257 - C258) * C1743 + (C450 - C451) * C82931 +
            (C1865 - C1866) * C1744 + (C2164 - C2165) * C82916 +
            (C1873 - C1874) * C1745 + (C2166 - C2167) * C82893) *
               C82885) *
              C82938 * C688 +
          (((C2741 - C2740) * C1743 + (C3007 - C3006) * C82931 +
            (C2745 - C2744) * C1744 + (C3009 - C3008) * C82916 +
            (C239 * C2527 - C82592 * C2733) * C1745 +
            (C239 * C2821 - C82592 * C3002) * C82893) *
               C1641 +
           ((C1862 - C1861) * C1743 + (C2161 - C2160) * C82931 +
            (C1870 - C1869) * C1744 + (C2163 - C2162) * C82916 +
            (C239 * C2526 - C82592 * C2734) * C1745 +
            (C239 * C2822 - C82592 * C3003) * C82893) *
               C1642 +
           ((C1866 - C1865) * C1743 + (C2165 - C2164) * C82931 +
            (C1874 - C1873) * C1744 + (C2167 - C2166) * C82916 +
            (C239 * C2525 - C82592 * C2735) * C1745 +
            (C239 * C2823 - C82592 * C3004) * C82893) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C168 +
            (C82592 * C441 - C239 * C310) * C82581) *
               C81 +
           ((C253 - C254) * C168 + (C448 - C449) * C82581) * C82 +
           ((C257 - C258) * C168 + (C450 - C451) * C82581) * C83 +
           ((C261 - C262) * C168 + (C452 - C453) * C82581) * C84 +
           ((C265 - C266) * C168 + (C454 - C455) * C82581) * C85) *
              C82938 * C688 +
          (((C239 * C695 - C82592 * C805) * C168 +
            (C239 * C857 - C82592 * C956) * C82581) *
               C81 +
           ((C239 * C694 - C82592 * C806) * C168 +
            (C239 * C858 - C82592 * C957) * C82581) *
               C82 +
           ((C239 * C693 - C82592 * C807) * C168 +
            (C239 * C859 - C82592 * C958) * C82581) *
               C83 +
           ((C239 * C692 - C82592 * C808) * C168 +
            (C239 * C860 - C82592 * C959) * C82581) *
               C84 +
           ((C239 * C691 - C82592 * C809) * C168 +
            (C239 * C861 - C82592 * C960) * C82581) *
               C85) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
             C82896 * C4299 - C4298 * C4108) *
                C168 +
            (C82932 * C441 - C4296 * C310 + C82918 * C1416 - C4297 * C1317 +
             C82896 * C4593 - C4298 * C4405) *
                C82581) *
               C1641 +
           ((C4308 - C4309 + C4310 - C4311 + C4312 - C4313) * C168 +
            (C4598 - C4599 + C4600 - C4601 + C4602 - C4603) * C82581) *
               C1642 +
           ((C4320 - C4321 + C4322 - C4323 + C4324 - C4325) * C168 +
            (C4604 - C4605 + C4606 - C4607 + C4608 - C4609) * C82581) *
               C82885) *
              C82938 * C688 +
          (((C4296 * C695 - C82932 * C805 + C4297 * C3348 - C82918 * C3527 +
             C4298 * C4976 - C82896 * C5140) *
                C168 +
            (C4296 * C857 - C82932 * C956 + C4297 * C3613 - C82918 * C3779 +
             C4298 * C5220 - C82896 * C5377) *
                C82581) *
               C1641 +
           ((C4296 * C694 - C82932 * C806 + C4297 * C3347 - C82918 * C3528 +
             C4298 * C4975 - C82896 * C5141) *
                C168 +
            (C4296 * C858 - C82932 * C957 + C4297 * C3614 - C82918 * C3781 +
             C4298 * C5221 - C82896 * C5378) *
                C82581) *
               C1642 +
           ((C4296 * C693 - C82932 * C807 + C4297 * C3346 - C82918 * C3529 +
             C4298 * C4974 - C82896 * C5142) *
                C168 +
            (C4296 * C859 - C82932 * C958 + C4297 * C3615 - C82918 * C3783 +
             C4298 * C5222 - C82896 * C5379) *
                C82581) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C13339 +
            (C82592 * C441 - C239 * C310) * C13256 + (C2740 - C2741) * C13340 +
            (C3006 - C3007) * C13257 + (C2744 - C2745) * C13341 +
            (C3008 - C3009) * C82893) *
               C82925 +
           ((C253 - C254) * C13339 + (C448 - C449) * C13256 +
            (C1861 - C1862) * C13340 + (C2160 - C2161) * C13257 +
            (C1869 - C1870) * C13341 + (C2162 - C2163) * C82893) *
               C82909 +
           ((C257 - C258) * C13339 + (C450 - C451) * C13256 +
            (C1865 - C1866) * C13340 + (C2164 - C2165) * C13257 +
            (C1873 - C1874) * C13341 + (C2166 - C2167) * C82893) *
               C82885) *
              C82938 * C688 +
          (((C2741 - C2740) * C13339 + (C3007 - C3006) * C13256 +
            (C2745 - C2744) * C13340 + (C3009 - C3008) * C13257 +
            (C239 * C2527 - C82592 * C2733) * C13341 +
            (C239 * C2821 - C82592 * C3002) * C82893) *
               C82925 +
           ((C1862 - C1861) * C13339 + (C2161 - C2160) * C13256 +
            (C1870 - C1869) * C13340 + (C2163 - C2162) * C13257 +
            (C239 * C2526 - C82592 * C2734) * C13341 +
            (C239 * C2822 - C82592 * C3003) * C82893) *
               C82909 +
           ((C1866 - C1865) * C13339 + (C2165 - C2164) * C13256 +
            (C1874 - C1873) * C13340 + (C2167 - C2166) * C13257 +
            (C239 * C2525 - C82592 * C2735) * C13341 +
            (C239 * C2823 - C82592 * C3004) * C82893) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82592 * C240 - C239 * C102) * C15457 +
           (C82592 * C441 - C239 * C310) * C15400 + (C2740 - C2741) * C15458 +
           (C3006 - C3007) * C15401 + (C2744 - C2745) * C15459 +
           (C3008 - C3009) * C15402 + (C15952 - C15953) * C15460 +
           (C16106 - C16107) * C15403 + (C15956 - C15957) * C15461 +
           (C16108 - C16109) * C15404) *
              C82523 * C82938 * C688 +
          ((C2741 - C2740) * C15457 + (C3007 - C3006) * C15400 +
           (C2745 - C2744) * C15458 + (C3009 - C3008) * C15401 +
           (C15953 - C15952) * C15459 + (C16107 - C16106) * C15402 +
           (C15957 - C15956) * C15460 + (C16109 - C16108) * C15403 +
           (C239 * C15827 - C82592 * C15949) * C15461 +
           (C239 * C16001 - C82592 * C16104) * C15404) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
            C82896 * C4299 - C4298 * C4108) *
               C13339 +
           (C82932 * C441 - C4296 * C310 + C82918 * C1416 - C4297 * C1317 +
            C82896 * C4593 - C4298 * C4405) *
               C13256 +
           (C17634 - C17635 + C17636 - C17637 + C17638 - C17639) * C13340 +
           (C17900 - C17901 + C17902 - C17903 + C17904 - C17905) * C13257 +
           (C17646 - C17647 + C17648 - C17649 + C17650 - C17651) * C13341 +
           (C17906 - C17907 + C17908 - C17909 + C17910 - C17911) * C82893) *
              C82523 * C82938 * C688 +
          ((C17635 - C17634 + C17637 - C17636 + C17639 - C17638) * C13339 +
           (C17901 - C17900 + C17903 - C17902 + C17905 - C17904) * C13256 +
           (C17647 - C17646 + C17649 - C17648 + C17651 - C17650) * C13340 +
           (C17907 - C17906 + C17909 - C17908 + C17911 - C17910) * C13257 +
           (C4296 * C2527 - C82932 * C2733 + C4297 * C16304 - C82918 * C16399 +
            C4298 * C17443 - C82896 * C17631) *
               C13341 +
           (C4296 * C2821 - C82932 * C3002 + C4297 * C16445 - C82918 * C16535 +
            C4298 * C17731 - C82896 * C17898) *
               C82893) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezx[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
             C82885 * C112 - C1651 * C104) *
                C239 +
            (C1641 * C503 - C1647 * C497 + C1642 * C504 - C1649 * C498 +
             C82885 * C505 - C1651 * C499) *
                C82592) *
               C82931 +
           ((C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C239 +
            (C3090 - C3091 + C3092 - C3093 + C3094 - C3095) * C82592) *
               C82916 +
           ((C2840 - C2841 + C2842 - C2843 + C2844 - C2845) * C239 +
            (C3096 - C3097 + C3098 - C3099 + C3100 - C3101) * C82592) *
               C82893) *
              C82938 * C688 +
          (((C2829 - C2828 + C2831 - C2830 + C2833 - C2832) * C239 +
            (C3091 - C3090 + C3093 - C3092 + C3095 - C3094) * C82592) *
               C82931 +
           ((C2841 - C2840 + C2843 - C2842 + C2845 - C2844) * C239 +
            (C3097 - C3096 + C3099 - C3098 + C3101 - C3100) * C82592) *
               C82916 +
           ((C1647 * C2527 - C1641 * C2532 + C1649 * C2526 - C1642 * C2530 +
             C1651 * C2525 - C82885 * C2528) *
                C239 +
            (C1647 * C3083 - C1641 * C3086 + C1649 * C3084 - C1642 * C3087 +
             C1651 * C3085 - C82885 * C3088) *
                C82592) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C108 - C92 * C102 + C82 * C110 - C94 * C103 + C83 * C112 -
            C96 * C104 + C84 * C114 - C98 * C105 + C85 * C116 - C100 * C106) *
               C239 +
           (C81 * C503 - C92 * C497 + C82 * C504 - C94 * C498 + C83 * C505 -
            C96 * C499 + C84 * C506 - C98 * C500 + C85 * C507 - C100 * C501) *
               C82592) *
              C82581 * C82938 * C688 +
          ((C92 * C695 - C81 * C704 + C94 * C694 - C82 * C702 + C96 * C693 -
            C83 * C700 + C98 * C692 - C84 * C698 + C100 * C691 - C85 * C696) *
               C239 +
           (C92 * C1003 - C81 * C1008 + C94 * C1004 - C82 * C1009 +
            C96 * C1005 - C83 * C1010 + C98 * C1006 - C84 * C1011 +
            C100 * C1007 - C85 * C1012) *
               C82592) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
            C82885 * C112 - C1651 * C104) *
               C4296 +
           (C1641 * C503 - C1647 * C497 + C1642 * C504 - C1649 * C498 +
            C82885 * C505 - C1651 * C499) *
               C82932 +
           (C1641 * C1164 - C1647 * C1155 + C1642 * C1162 - C1649 * C1154 +
            C82885 * C1160 - C1651 * C1153) *
               C4297 +
           (C1641 * C1468 - C1647 * C1463 + C1642 * C1469 - C1649 * C1464 +
            C82885 * C1470 - C1651 * C1465) *
               C82918 +
           (C1641 * C4112 - C1647 * C4108 + C1642 * C4114 - C1649 * C4109 +
            C82885 * C4116 - C1651 * C4110) *
               C4298 +
           (C1641 * C4687 - C1647 * C4683 + C1642 * C4688 - C1649 * C4684 +
            C82885 * C4689 - C1651 * C4685) *
               C82896) *
              C82581 * C82938 * C688 +
          ((C2829 - C2828 + C2831 - C2830 + C2833 - C2832) * C4296 +
           (C3091 - C3090 + C3093 - C3092 + C3095 - C3094) * C82932 +
           (C1647 * C3348 - C1641 * C3359 + C1649 * C3347 - C1642 * C3357 +
            C1651 * C3346 - C82885 * C3355) *
               C4297 +
           (C1647 * C3859 - C1641 * C3865 + C1649 * C3860 - C1642 * C3866 +
            C1651 * C3861 - C82885 * C3867) *
               C82918 +
           (C1647 * C4976 - C1641 * C4981 + C1649 * C4975 - C1642 * C4979 +
            C1651 * C4974 - C82885 * C4977) *
               C4298 +
           (C1647 * C5454 - C1641 * C5457 + C1649 * C5455 - C1642 * C5458 +
            C1651 * C5456 - C82885 * C5459) *
               C82896) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C239 +
            (C82925 * C503 - C13259 * C497 + C82909 * C504 - C13261 * C498 +
             C82885 * C505 - C13263 * C499) *
                C82592) *
               C13256 +
           ((C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C239 +
            (C14532 - C14533 + C14534 - C14535 + C14536 - C14537) * C82592) *
               C13257 +
           ((C14298 - C14299 + C14300 - C14301 + C14302 - C14303) * C239 +
            (C14538 - C14539 + C14540 - C14541 + C14542 - C14543) * C82592) *
               C82893) *
              C82938 * C688 +
          (((C14287 - C14286 + C14289 - C14288 + C14291 - C14290) * C239 +
            (C14533 - C14532 + C14535 - C14534 + C14537 - C14536) * C82592) *
               C13256 +
           ((C14299 - C14298 + C14301 - C14300 + C14303 - C14302) * C239 +
            (C14539 - C14538 + C14541 - C14540 + C14543 - C14542) * C82592) *
               C13257 +
           ((C13259 * C2527 - C82925 * C2532 + C13261 * C2526 - C82909 * C2530 +
             C13263 * C2525 - C82885 * C2528) *
                C239 +
            (C13259 * C3083 - C82925 * C3086 + C13261 * C3084 - C82909 * C3087 +
             C13263 * C3085 - C82885 * C3088) *
                C82592) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C239 +
            (C82523 * C503 - C15405 * C497) * C82592) *
               C15400 +
           ((C16004 - C16005) * C239 + (C16154 - C16155) * C82592) * C15401 +
           ((C16008 - C16009) * C239 + (C16156 - C16157) * C82592) * C15402 +
           ((C16012 - C16013) * C239 + (C16158 - C16159) * C82592) * C15403 +
           ((C16016 - C16017) * C239 + (C16160 - C16161) * C82592) * C15404) *
              C82938 * C688 +
          (((C16005 - C16004) * C239 + (C16155 - C16154) * C82592) * C15400 +
           ((C16009 - C16008) * C239 + (C16157 - C16156) * C82592) * C15401 +
           ((C16013 - C16012) * C239 + (C16159 - C16158) * C82592) * C15402 +
           ((C16017 - C16016) * C239 + (C16161 - C16160) * C82592) * C15403 +
           ((C15405 * C15827 - C82523 * C15828) * C239 +
            (C15405 * C16151 - C82523 * C16152) * C82592) *
               C15404) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C4296 +
            (C82523 * C503 - C15405 * C497) * C82932 +
            (C82523 * C1164 - C15405 * C1155) * C4297 +
            (C82523 * C1468 - C15405 * C1463) * C82918 +
            (C82523 * C4112 - C15405 * C4108) * C4298 +
            (C82523 * C4687 - C15405 * C4683) * C82896) *
               C13256 +
           ((C16004 - C16005) * C4296 + (C16154 - C16155) * C82932 +
            (C17734 - C17735) * C4297 + (C17988 - C17989) * C82918 +
            (C17742 - C17743) * C4298 + (C17990 - C17991) * C82896) *
               C13257 +
           ((C16008 - C16009) * C4296 + (C16156 - C16157) * C82932 +
            (C17738 - C17739) * C4297 + (C17992 - C17993) * C82918 +
            (C17746 - C17747) * C4298 + (C17994 - C17995) * C82896) *
               C82893) *
              C82938 * C688 +
          (((C16005 - C16004) * C4296 + (C16155 - C16154) * C82932 +
            (C17735 - C17734) * C4297 + (C17989 - C17988) * C82918 +
            (C17743 - C17742) * C4298 + (C17991 - C17990) * C82896) *
               C13256 +
           ((C16009 - C16008) * C4296 + (C16157 - C16156) * C82932 +
            (C17739 - C17738) * C4297 + (C17993 - C17992) * C82918 +
            (C17747 - C17746) * C4298 + (C17995 - C17994) * C82896) *
               C13257 +
           ((C16013 - C16012) * C4296 + (C16159 - C16158) * C82932 +
            (C15405 * C16304 - C82523 * C16307) * C4297 +
            (C15405 * C16579 - C82523 * C16581) * C82918 +
            (C15405 * C17443 - C82523 * C17444) * C4298 +
            (C15405 * C17985 - C82523 * C17986) * C82896) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
             C82893 * C1746 - C1745 * C1653) *
                C239 +
            (C82931 * C551 - C1743 * C497 + C82916 * C1055 - C1744 * C1003 +
             C82893 * C2323 - C1745 * C2241) *
                C82592) *
               C1641 +
           ((C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C239 +
            (C2328 - C2329 + C2330 - C2331 + C2332 - C2333) * C82592) *
               C1642 +
           ((C1767 - C1768 + C1769 - C1770 + C1771 - C1772) * C239 +
            (C2334 - C2335 + C2336 - C2337 + C2338 - C2339) * C82592) *
               C82885) *
              C82938 * C688 +
          (((C1743 * C695 - C82931 * C753 + C1744 * C1653 - C82916 * C1746 +
             C1745 * C2527 - C82893 * C2653) *
                C239 +
            (C1743 * C1003 - C82931 * C1055 + C1744 * C2241 - C82916 * C2323 +
             C1745 * C3083 - C82893 * C3175) *
                C82592) *
               C1641 +
           ((C1743 * C694 - C82931 * C754 + C1744 * C1654 - C82916 * C1747 +
             C1745 * C2526 - C82893 * C2654) *
                C239 +
            (C1743 * C1004 - C82931 * C1056 + C1744 * C2242 - C82916 * C2324 +
             C1745 * C3084 - C82893 * C3176) *
                C82592) *
               C1642 +
           ((C1743 * C693 - C82931 * C755 + C1744 * C1655 - C82916 * C1748 +
             C1745 * C2525 - C82893 * C2655) *
                C239 +
            (C1743 * C1005 - C82931 * C1057 + C1744 * C2243 - C82916 * C2325 +
             C1745 * C3085 - C82893 * C3177) *
                C82592) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C239 +
            (C82581 * C551 - C168 * C497) * C82592) *
               C81 +
           ((C182 - C183) * C239 + (C558 - C559) * C82592) * C82 +
           ((C186 - C187) * C239 + (C560 - C561) * C82592) * C83 +
           ((C190 - C191) * C239 + (C562 - C563) * C82592) * C84 +
           ((C194 - C195) * C239 + (C564 - C565) * C82592) * C85) *
              C82938 * C688 +
          (((C168 * C695 - C82581 * C753) * C239 +
            (C168 * C1003 - C82581 * C1055) * C82592) *
               C81 +
           ((C168 * C694 - C82581 * C754) * C239 +
            (C168 * C1004 - C82581 * C1056) * C82592) *
               C82 +
           ((C168 * C693 - C82581 * C755) * C239 +
            (C168 * C1005 - C82581 * C1057) * C82592) *
               C83 +
           ((C168 * C692 - C82581 * C756) * C239 +
            (C168 * C1006 - C82581 * C1058) * C82592) *
               C84 +
           ((C168 * C691 - C82581 * C757) * C239 +
            (C168 * C1007 - C82581 * C1059) * C82592) *
               C85) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C4296 +
            (C82581 * C551 - C168 * C497) * C82932 +
            (C82581 * C1213 - C168 * C1155) * C4297 +
            (C82581 * C1515 - C168 * C1463) * C82918 +
            (C82581 * C4198 - C168 * C4108) * C4298 +
            (C82581 * C4765 - C168 * C4683) * C82896) *
               C1641 +
           ((C182 - C183) * C4296 + (C558 - C559) * C82932 +
            (C4207 - C4208) * C4297 + (C4770 - C4771) * C82918 +
            (C4215 - C4216) * C4298 + (C4772 - C4773) * C82896) *
               C1642 +
           ((C186 - C187) * C4296 + (C560 - C561) * C82932 +
            (C4211 - C4212) * C4297 + (C4774 - C4775) * C82918 +
            (C4219 - C4220) * C4298 + (C4776 - C4777) * C82896) *
               C82885) *
              C82938 * C688 +
          (((C168 * C695 - C82581 * C753) * C4296 +
            (C168 * C1003 - C82581 * C1055) * C82932 +
            (C168 * C3348 - C82581 * C3441) * C4297 +
            (C168 * C3859 - C82581 * C3945) * C82918 +
            (C168 * C4976 - C82581 * C5060) * C4298 +
            (C168 * C5454 - C82581 * C5534) * C82896) *
               C1641 +
           ((C168 * C694 - C82581 * C754) * C4296 +
            (C168 * C1004 - C82581 * C1056) * C82932 +
            (C168 * C3347 - C82581 * C3443) * C4297 +
            (C168 * C3860 - C82581 * C3947) * C82918 +
            (C168 * C4975 - C82581 * C5061) * C4298 +
            (C168 * C5455 - C82581 * C5535) * C82896) *
               C1642 +
           ((C168 * C693 - C82581 * C755) * C4296 +
            (C168 * C1005 - C82581 * C1057) * C82932 +
            (C168 * C3346 - C82581 * C3445) * C4297 +
            (C168 * C3861 - C82581 * C3949) * C82918 +
            (C168 * C4974 - C82581 * C5062) * C4298 +
            (C168 * C5456 - C82581 * C5536) * C82896) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C239 +
            (C13256 * C551 - C13339 * C497 + C13257 * C1055 - C13340 * C1003 +
             C82893 * C2323 - C13341 * C2241) *
                C82592) *
               C82925 +
           ((C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C239 +
            (C13856 - C13857 + C13858 - C13859 + C13860 - C13861) * C82592) *
               C82909 +
           ((C13355 - C13356 + C13357 - C13358 + C13359 - C13360) * C239 +
            (C13862 - C13863 + C13864 - C13865 + C13866 - C13867) * C82592) *
               C82885) *
              C82938 * C688 +
          (((C13339 * C695 - C13256 * C753 + C13340 * C1653 - C13257 * C1746 +
             C13341 * C2527 - C82893 * C2653) *
                C239 +
            (C13339 * C1003 - C13256 * C1055 + C13340 * C2241 - C13257 * C2323 +
             C13341 * C3083 - C82893 * C3175) *
                C82592) *
               C82925 +
           ((C13339 * C694 - C13256 * C754 + C13340 * C1654 - C13257 * C1747 +
             C13341 * C2526 - C82893 * C2654) *
                C239 +
            (C13339 * C1004 - C13256 * C1056 + C13340 * C2242 - C13257 * C2324 +
             C13341 * C3084 - C82893 * C3176) *
                C82592) *
               C82909 +
           ((C13339 * C693 - C13256 * C755 + C13340 * C1655 - C13257 * C1748 +
             C13341 * C2525 - C82893 * C2655) *
                C239 +
            (C13339 * C1005 - C13256 * C1057 + C13340 * C2243 - C13257 * C2325 +
             C13341 * C3085 - C82893 * C3177) *
                C82592) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15400 * C169 - C15457 * C102 + C15401 * C753 - C15458 * C695 +
            C15402 * C1746 - C15459 * C1653 + C15403 * C2653 - C15460 * C2527 +
            C15404 * C15462 - C15461 * C15407) *
               C239 +
           (C15400 * C551 - C15457 * C497 + C15401 * C1055 - C15458 * C1003 +
            C15402 * C2323 - C15459 * C2241 + C15403 * C3175 - C15460 * C3083 +
            C15404 * C15739 - C15461 * C15693) *
               C82592) *
              C82523 * C82938 * C688 +
          ((C15457 * C695 - C15400 * C753 + C15458 * C1653 - C15401 * C1746 +
            C15459 * C2527 - C15402 * C2653 + C15460 * C15407 -
            C15403 * C15462 + C15461 * C15827 - C15404 * C15905) *
               C239 +
           (C15457 * C1003 - C15400 * C1055 + C15458 * C2241 - C15401 * C2323 +
            C15459 * C3083 - C15402 * C3175 + C15460 * C15693 -
            C15403 * C15739 + C15461 * C16151 - C15404 * C16203) *
               C82592) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
            C82893 * C1746 - C13341 * C1653) *
               C4296 +
           (C13256 * C551 - C13339 * C497 + C13257 * C1055 - C13340 * C1003 +
            C82893 * C2323 - C13341 * C2241) *
               C82932 +
           (C13256 * C1213 - C13339 * C1155 + C13257 * C3441 - C13340 * C3348 +
            C82893 * C3442 - C13341 * C3345) *
               C4297 +
           (C13256 * C1515 - C13339 * C1463 + C13257 * C3945 - C13340 * C3859 +
            C82893 * C3946 - C13341 * C3862) *
               C82918 +
           (C13256 * C4198 - C13339 * C4108 + C13257 * C5060 - C13340 * C4976 +
            C82893 * C16827 - C13341 * C16745) *
               C4298 +
           (C13256 * C4765 - C13339 * C4683 + C13257 * C5534 - C13340 * C5454 +
            C82893 * C17291 - C13341 * C17213) *
               C82896) *
              C82523 * C82938 * C688 +
          ((C13339 * C695 - C13256 * C753 + C13340 * C1653 - C13257 * C1746 +
            C13341 * C2527 - C82893 * C2653) *
               C4296 +
           (C13339 * C1003 - C13256 * C1055 + C13340 * C2241 - C13257 * C2323 +
            C13341 * C3083 - C82893 * C3175) *
               C82932 +
           (C13339 * C3348 - C13256 * C3441 + C13340 * C3345 - C13257 * C3442 +
            C13341 * C16304 - C82893 * C16353) *
               C4297 +
           (C13339 * C3859 - C13256 * C3945 + C13340 * C3862 - C13257 * C3946 +
            C13341 * C16579 - C82893 * C16625) *
               C82918 +
           (C13339 * C4976 - C13256 * C5060 + C13340 * C16745 -
            C13257 * C16827 + C13341 * C17443 - C82893 * C17555) *
               C4298 +
           (C13339 * C5454 - C13256 * C5534 + C13340 * C17213 -
            C13257 * C17291 + C13341 * C17985 - C82893 * C18069) *
               C82896) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82931 +
            C3268 * C82916 + C3269 * C82893) *
               C1641 +
           (C2418 + C2448 + C2449) * C1642 + (C2427 + C2450 + C2451) * C82885) *
              C82938 * C688 -
          (((C239 * C2735 - C607 * C2525 - C239 * C3085 + C82592 * C3252) *
                C82893 +
            C2447 * C82916 + C2446 * C82931) *
               C82885 +
           ((C239 * C2734 - C607 * C2526 - C239 * C3084 + C82592 * C3253) *
                C82893 +
            C2445 * C82916 + C2444 * C82931) *
               C1642 +
           ((C239 * C2733 - C607 * C2527 - C239 * C3083 + C82592 * C3254) *
                C82893 +
            C3269 * C82916 + C3268 * C82931) *
               C1641) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82581 *
               C81 +
           C643 * C82 + C644 * C83 + C645 * C84 + C646 * C85) *
              C82938 * C688 -
          ((C239 * C809 - C607 * C691 - C239 * C1007 + C82592 * C1102) *
               C82581 * C85 +
           (C239 * C808 - C607 * C692 - C239 * C1006 + C82592 * C1103) *
               C82581 * C84 +
           (C239 * C807 - C607 * C693 - C239 * C1005 + C82592 * C1104) *
               C82581 * C83 +
           (C239 * C806 - C607 * C694 - C239 * C1004 + C82592 * C1105) *
               C82581 * C82 +
           (C239 * C805 - C607 * C695 - C239 * C1003 + C82592 * C1106) *
               C82581 * C81) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4296 * C240 - C4851 * C102 - C4296 * C497 + C82932 * C608 +
            C4297 * C1265 - C4852 * C1155 - C4297 * C1463 + C82918 * C1566 +
            C4298 * C4299 - C4853 * C4108 - C4298 * C4683 + C82896 * C4854) *
               C82581 * C1641 +
           (C4895 + C4896 + C4897) * C82581 * C1642 +
           (C4898 + C4899 + C4900) * C82581 * C82885) *
              C82938 * C688 -
          ((C4298 * C5142 - C4853 * C4974 - C4298 * C5456 + C82896 * C5611 +
            C4297 * C3529 - C4852 * C3346 - C4297 * C3861 + C82918 * C4026 +
            C4296 * C807 - C4851 * C693 - C4296 * C1005 + C82932 * C1104) *
               C82581 * C82885 +
           (C4298 * C5141 - C4853 * C4975 - C4298 * C5455 + C82896 * C5612 +
            C4297 * C3528 - C4852 * C3347 - C4297 * C3860 + C82918 * C4028 +
            C4296 * C806 - C4851 * C694 - C4296 * C1004 + C82932 * C1105) *
               C82581 * C1642 +
           (C4298 * C5140 - C4853 * C4976 - C4298 * C5454 + C82896 * C5613 +
            C4297 * C3527 - C4852 * C3348 - C4297 * C3859 + C82918 * C4030 +
            C4296 * C805 - C4851 * C695 - C4296 * C1003 + C82932 * C1106) *
               C82581 * C1641) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C13256 +
            C3268 * C13257 + C3269 * C82893) *
               C82925 +
           (C13942 + C13943 + C13944) * C82909 +
           (C13945 + C13946 + C13947) * C82885) *
              C82938 * C688 -
          (((C239 * C2735 - C607 * C2525 - C239 * C3085 + C82592 * C3252) *
                C82893 +
            C2447 * C13257 + C2446 * C13256) *
               C82885 +
           ((C239 * C2734 - C607 * C2526 - C239 * C3084 + C82592 * C3253) *
                C82893 +
            C2445 * C13257 + C2444 * C13256) *
               C82909 +
           ((C239 * C2733 - C607 * C2527 - C239 * C3083 + C82592 * C3254) *
                C82893 +
            C3269 * C13257 + C3268 * C13256) *
               C82925) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C15400 +
           C3268 * C15401 + C3269 * C15402 + C16260 * C15403 +
           C16261 * C15404) *
              C82523 * C82938 * C688 -
          ((C239 * C15949 - C607 * C15827 - C239 * C16151 + C82592 * C16246) *
               C15404 +
           C16261 * C15403 + C16260 * C15402 + C3269 * C15401 +
           C3268 * C15400) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4296 * C240 - C4851 * C102 - C4296 * C497 + C82932 * C608 +
            C4297 * C1265 - C4852 * C1155 - C4297 * C1463 + C82918 * C1566 +
            C4298 * C4299 - C4853 * C4108 - C4298 * C4683 + C82896 * C4854) *
               C13256 +
           (C18182 + C18183 + C18184) * C13257 +
           (C18185 + C18186 + C18187) * C82893) *
              C82523 * C82938 * C688 -
          ((C4298 * C17631 - C4853 * C17443 - C4298 * C17985 + C82896 * C18144 +
            C4297 * C16399 - C4852 * C16304 - C4297 * C16579 + C82918 * C16670 +
            C4296 * C2733 - C4851 * C2527 - C4296 * C3083 + C82932 * C3254) *
               C82893 +
           (C18187 + C18186 + C18185) * C13257 +
           (C18184 + C18183 + C18182) * C13256) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1647 * C108 - C1648 * C102 - C1647 * C109 + C1641 * C120 +
            C1649 * C110 - C1650 * C103 - C1649 * C111 + C1642 * C121 +
            C1651 * C112 - C1652 * C104 - C1651 * C113 + C82885 * C122) *
               C82592 * C82931 +
           (C2574 + C2575 + C2576) * C82592 * C82916 +
           (C2577 + C2578 + C2579) * C82592 * C82893) *
              C1149 -
          ((C1651 * C3349 - C1652 * C3343 - C1651 * C3350 + C82885 * C3361 +
            C1649 * C3351 - C1650 * C3344 - C1649 * C3352 + C1642 * C3362 +
            C1647 * C3353 - C1648 * C3345 - C1647 * C3354 + C1641 * C3363) *
               C82592 * C82893 +
           (C1651 * C3355 - C1652 * C3346 - C1651 * C3356 + C82885 * C3364 +
            C1649 * C3357 - C1650 * C3347 - C1649 * C3358 + C1642 * C3365 +
            C1647 * C3359 - C1648 * C3348 - C1647 * C3360 + C1641 * C3366) *
               C82592 * C82916 +
           (C1651 * C1160 - C1652 * C1153 - C1651 * C1161 + C82885 * C1168 +
            C1649 * C1162 - C1650 * C1154 - C1649 * C1163 + C1642 * C1169 +
            C1647 * C1164 - C1648 * C1155 - C1647 * C1165 + C1641 * C1170) *
               C82592 * C82931) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C92 * C108 - C93 * C102 - C92 * C109 + C81 * C120 + C94 * C110 -
           C95 * C103 - C94 * C111 + C82 * C121 + C96 * C112 - C97 * C104 -
           C96 * C113 + C83 * C122 + C98 * C114 - C99 * C105 - C98 * C115 +
           C84 * C123 + C100 * C116 - C101 * C106 - C100 * C117 + C85 * C124) *
              C82592 * C82581 * C1149 -
          (C100 * C1156 - C101 * C1151 - C100 * C1157 + C85 * C1166 +
           C98 * C1158 - C99 * C1152 - C98 * C1159 + C84 * C1167 + C96 * C1160 -
           C97 * C1153 - C96 * C1161 + C83 * C1168 + C94 * C1162 - C95 * C1154 -
           C94 * C1163 + C82 * C1169 + C92 * C1164 - C93 * C1155 - C92 * C1165 +
           C81 * C1170) *
              C82592 * C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1647 * C108 - C1648 * C102 - C1647 * C109 + C1641 * C120 +
            C1649 * C110 - C1650 * C103 - C1649 * C111 + C1642 * C121 +
            C1651 * C112 - C1652 * C104 - C1651 * C113 + C82885 * C122) *
               C82932 +
           (C5737 + C5738 + C5739) * C82918 +
           (C5740 + C5741 + C5742) * C82896) *
              C82581 * C1149 -
          ((C1651 * C5691 - C1652 * C5688 - C1651 * C5692 + C82885 * C5697 +
            C1649 * C5693 - C1650 * C5689 - C1649 * C5694 + C1642 * C5698 +
            C1647 * C5695 - C1648 * C5690 - C1647 * C5696 + C1641 * C5699) *
               C82896 +
           (C5742 + C5741 + C5740) * C82918 +
           (C5739 + C5738 + C5737) * C82932) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13259 * C108 - C13260 * C102 - C13259 * C109 + C82925 * C120 +
            C13261 * C110 - C13262 * C103 - C13261 * C111 + C82909 * C121 +
            C13263 * C112 - C13264 * C104 - C13263 * C113 + C82885 * C122) *
               C82592 * C13256 +
           (C14058 + C14059 + C14060) * C82592 * C13257 +
           (C14061 + C14062 + C14063) * C82592 * C82893) *
              C1149 -
          ((C13263 * C3349 - C13264 * C3343 - C13263 * C3350 + C82885 * C3361 +
            C13261 * C3351 - C13262 * C3344 - C13261 * C3352 + C82909 * C3362 +
            C13259 * C3353 - C13260 * C3345 - C13259 * C3354 + C82925 * C3363) *
               C82592 * C82893 +
           (C13263 * C3355 - C13264 * C3346 - C13263 * C3356 + C82885 * C3364 +
            C13261 * C3357 - C13262 * C3347 - C13261 * C3358 + C82909 * C3365 +
            C13259 * C3359 - C13260 * C3348 - C13259 * C3360 + C82925 * C3366) *
               C82592 * C13257 +
           (C13263 * C1160 - C13264 * C1153 - C13263 * C1161 + C82885 * C1168 +
            C13261 * C1162 - C13262 * C1154 - C13261 * C1163 + C82909 * C1169 +
            C13259 * C1164 - C13260 * C1155 - C13259 * C1165 + C82925 * C1170) *
               C82592 * C13256) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
               C82592 * C15400 +
           C15860 * C15401 + C15861 * C15402 + C15862 * C15403 +
           C15863 * C15404) *
              C1149 -
          ((C15405 * C16305 - C15406 * C16303 - C15405 * C16306 +
            C82523 * C16309) *
               C82592 * C15404 +
           (C15405 * C16307 - C15406 * C16304 - C15405 * C16308 +
            C82523 * C16310) *
               C82592 * C15403 +
           (C15405 * C3353 - C15406 * C3345 - C15405 * C3354 + C82523 * C3363) *
               C82592 * C15402 +
           (C15405 * C3359 - C15406 * C3348 - C15405 * C3360 + C82523 * C3366) *
               C82592 * C15401 +
           (C15405 * C1164 - C15406 * C1155 - C15405 * C1165 + C82523 * C1170) *
               C82592 * C15400) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
                C82932 +
            C18282 * C82918 + C18283 * C82896) *
               C13256 +
           (C17448 + C17478 + C17479) * C13257 +
           (C17457 + C17480 + C17481) * C82893) *
              C1149 -
          (((C15405 * C18263 - C15406 * C18261 - C15405 * C18264 +
             C82523 * C18267) *
                C82896 +
            C17477 * C82918 + C17476 * C82932) *
               C82893 +
           ((C15405 * C18265 - C15406 * C18262 - C15405 * C18266 +
             C82523 * C18268) *
                C82896 +
            C17475 * C82918 + C17474 * C82932) *
               C13257 +
           ((C15405 * C5695 - C15406 * C5690 - C15405 * C5696 +
             C82523 * C5699) *
                C82896 +
            C18283 * C82918 + C18282 * C82932) *
               C13256) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
            C82893 * C1746 - C1745 * C1653) *
               C1647 +
           (C82931 * C175 - C1743 * C109 + C82916 * C758 - C1744 * C705 +
            C82893 * C1750 - C1745 * C1658) *
               C1641 +
           (C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C1649 +
           (C1761 - C1762 + C1763 - C1764 + C1765 - C1766) * C1642 +
           (C1767 - C1768 + C1769 - C1770 + C1771 - C1772) * C1651 +
           (C1773 - C1774 + C1775 - C1776 + C1777 - C1778) * C82885) *
              C82592 * C1149 +
          ((C1743 * C1155 - C82931 * C1213 + C1744 * C3348 - C82916 * C3441 +
            C1745 * C3345 - C82893 * C3442) *
               C1647 +
           (C1743 * C1165 - C82931 * C1218 + C1744 * C3360 - C82916 * C3447 +
            C1745 * C3354 - C82893 * C3448) *
               C1641 +
           (C1743 * C1154 - C82931 * C1214 + C1744 * C3347 - C82916 * C3443 +
            C1745 * C3344 - C82893 * C3444) *
               C1649 +
           (C1743 * C1163 - C82931 * C1219 + C1744 * C3358 - C82916 * C3449 +
            C1745 * C3352 - C82893 * C3450) *
               C1642 +
           (C1743 * C1153 - C82931 * C1215 + C1744 * C3346 - C82916 * C3445 +
            C1745 * C3343 - C82893 * C3446) *
               C1651 +
           (C1743 * C1161 - C82931 * C1220 + C1744 * C3356 - C82916 * C3451 +
            C1745 * C3350 - C82893 * C3452) *
               C82885) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82581 * C169 - C168 * C102) * C92 +
           (C82581 * C175 - C168 * C109) * C81 + (C182 - C183) * C94 +
           (C184 - C185) * C82 + (C186 - C187) * C96 + (C188 - C189) * C83 +
           (C190 - C191) * C98 + (C192 - C193) * C84 + (C194 - C195) * C100 +
           (C196 - C197) * C85) *
              C82592 * C1149 +
          ((C168 * C1155 - C82581 * C1213) * C92 +
           (C168 * C1165 - C82581 * C1218) * C81 +
           (C168 * C1154 - C82581 * C1214) * C94 +
           (C168 * C1163 - C82581 * C1219) * C82 +
           (C168 * C1153 - C82581 * C1215) * C96 +
           (C168 * C1161 - C82581 * C1220) * C83 +
           (C168 * C1152 - C82581 * C1216) * C98 +
           (C168 * C1159 - C82581 * C1221) * C84 +
           (C168 * C1151 - C82581 * C1217) * C100 +
           (C168 * C1157 - C82581 * C1222) * C85) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C1647 +
            (C82581 * C175 - C168 * C109) * C1641 + (C182 - C183) * C1649 +
            (C184 - C185) * C1642 + (C186 - C187) * C1651 +
            (C188 - C189) * C82885) *
               C82932 +
           ((C5823 - C5824) * C1647 + (C5825 - C5826) * C1641 +
            (C4207 - C4208) * C1649 + (C4209 - C4210) * C1642 +
            (C4211 - C4212) * C1651 + (C4213 - C4214) * C82885) *
               C82918 +
           ((C5827 - C5828) * C1647 + (C5829 - C5830) * C1641 +
            (C4215 - C4216) * C1649 + (C4217 - C4218) * C1642 +
            (C4219 - C4220) * C1651 + (C4221 - C4222) * C82885) *
               C82896) *
              C1149 +
          (((C5824 - C5823) * C1647 + (C5826 - C5825) * C1641 +
            (C4208 - C4207) * C1649 + (C4210 - C4209) * C1642 +
            (C4212 - C4211) * C1651 + (C4214 - C4213) * C82885) *
               C82932 +
           ((C5828 - C5827) * C1647 + (C5830 - C5829) * C1641 +
            (C4216 - C4215) * C1649 + (C4218 - C4217) * C1642 +
            (C4220 - C4219) * C1651 + (C4222 - C4221) * C82885) *
               C82918 +
           ((C168 * C5690 - C82581 * C5816) * C1647 +
            (C168 * C5696 - C82581 * C5819) * C1641 +
            (C168 * C5689 - C82581 * C5817) * C1649 +
            (C168 * C5694 - C82581 * C5820) * C1642 +
            (C168 * C5688 - C82581 * C5818) * C1651 +
            (C168 * C5692 - C82581 * C5821) * C82885) *
               C82896) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
            C82893 * C1746 - C13341 * C1653) *
               C13259 +
           (C13256 * C175 - C13339 * C109 + C13257 * C758 - C13340 * C705 +
            C82893 * C1750 - C13341 * C1658) *
               C82925 +
           (C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C13261 +
           (C13349 - C13350 + C13351 - C13352 + C13353 - C13354) * C82909 +
           (C13355 - C13356 + C13357 - C13358 + C13359 - C13360) * C13263 +
           (C13361 - C13362 + C13363 - C13364 + C13365 - C13366) * C82885) *
              C82592 * C1149 +
          ((C13339 * C1155 - C13256 * C1213 + C13340 * C3348 - C13257 * C3441 +
            C13341 * C3345 - C82893 * C3442) *
               C13259 +
           (C13339 * C1165 - C13256 * C1218 + C13340 * C3360 - C13257 * C3447 +
            C13341 * C3354 - C82893 * C3448) *
               C82925 +
           (C13339 * C1154 - C13256 * C1214 + C13340 * C3347 - C13257 * C3443 +
            C13341 * C3344 - C82893 * C3444) *
               C13261 +
           (C13339 * C1163 - C13256 * C1219 + C13340 * C3358 - C13257 * C3449 +
            C13341 * C3352 - C82893 * C3450) *
               C82909 +
           (C13339 * C1153 - C13256 * C1215 + C13340 * C3346 - C13257 * C3445 +
            C13341 * C3343 - C82893 * C3446) *
               C13263 +
           (C13339 * C1161 - C13256 * C1220 + C13340 * C3356 - C13257 * C3451 +
            C13341 * C3350 - C82893 * C3452) *
               C82885) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15400 * C169 - C15457 * C102 + C15401 * C753 - C15458 * C695 +
            C15402 * C1746 - C15459 * C1653 + C15403 * C2653 - C15460 * C2527 +
            C15404 * C15462 - C15461 * C15407) *
               C15405 +
           (C15400 * C175 - C15457 * C109 + C15401 * C758 - C15458 * C705 +
            C15402 * C1750 - C15459 * C1658 + C15403 * C2656 - C15460 * C2533 +
            C15404 * C15464 - C15461 * C15410) *
               C82523) *
              C82592 * C1149 +
          ((C15457 * C1155 - C15400 * C1213 + C15458 * C3348 - C15401 * C3441 +
            C15459 * C3345 - C15402 * C3442 + C15460 * C16304 -
            C15403 * C16353 + C15461 * C16303 - C15404 * C16354) *
               C15405 +
           (C15457 * C1165 - C15400 * C1218 + C15458 * C3360 - C15401 * C3447 +
            C15459 * C3354 - C15402 * C3448 + C15460 * C16308 -
            C15403 * C16355 + C15461 * C16306 - C15404 * C16356) *
               C82523) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C15405 +
            (C13256 * C175 - C13339 * C109 + C13257 * C758 - C13340 * C705 +
             C82893 * C1750 - C13341 * C1658) *
                C82523) *
               C82932 +
           ((C18362 - C18363 + C18364 - C18365 + C18366 - C18367) * C15405 +
            (C18368 - C18369 + C18370 - C18371 + C18372 - C18373) * C82523) *
               C82918 +
           ((C18374 - C18375 + C18376 - C18377 + C18378 - C18379) * C15405 +
            (C18380 - C18381 + C18382 - C18383 + C18384 - C18385) * C82523) *
               C82896) *
              C1149 +
          (((C18363 - C18362 + C18365 - C18364 + C18367 - C18366) * C15405 +
            (C18369 - C18368 + C18371 - C18370 + C18373 - C18372) * C82523) *
               C82932 +
           ((C18375 - C18374 + C18377 - C18376 + C18379 - C18378) * C15405 +
            (C18381 - C18380 + C18383 - C18382 + C18385 - C18384) * C82523) *
               C82918 +
           ((C13339 * C5690 - C13256 * C5816 + C13340 * C18262 -
             C13257 * C18357 + C13341 * C18261 - C82893 * C18358) *
                C15405 +
            (C13339 * C5696 - C13256 * C5819 + C13340 * C18266 -
             C13257 * C18359 + C13341 * C18264 - C82893 * C18360) *
                C82523) *
               C82896) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C1647 +
            (C82592 * C246 - C239 * C109) * C1641 + (C253 - C254) * C1649 +
            (C255 - C256) * C1642 + (C257 - C258) * C1651 +
            (C259 - C260) * C82885) *
               C82931 +
           ((C2740 - C2741) * C1647 + (C2742 - C2743) * C1641 +
            (C1861 - C1862) * C1649 + (C1863 - C1864) * C1642 +
            (C1865 - C1866) * C1651 + (C1867 - C1868) * C82885) *
               C82916 +
           ((C2744 - C2745) * C1647 + (C2746 - C2747) * C1641 +
            (C1869 - C1870) * C1649 + (C1871 - C1872) * C1642 +
            (C1873 - C1874) * C1651 + (C1875 - C1876) * C82885) *
               C82893) *
              C1149 +
          (((C239 * C1155 - C82592 * C1265) * C1647 +
            (C239 * C1165 - C82592 * C1270) * C1641 +
            (C239 * C1154 - C82592 * C1266) * C1649 +
            (C239 * C1163 - C82592 * C1271) * C1642 +
            (C239 * C1153 - C82592 * C1267) * C1651 +
            (C239 * C1161 - C82592 * C1272) * C82885) *
               C82931 +
           ((C239 * C3348 - C82592 * C3527) * C1647 +
            (C239 * C3360 - C82592 * C3533) * C1641 +
            (C239 * C3347 - C82592 * C3528) * C1649 +
            (C239 * C3358 - C82592 * C3534) * C1642 +
            (C239 * C3346 - C82592 * C3529) * C1651 +
            (C239 * C3356 - C82592 * C3535) * C82885) *
               C82916 +
           ((C239 * C3345 - C82592 * C3530) * C1647 +
            (C239 * C3354 - C82592 * C3536) * C1641 +
            (C239 * C3344 - C82592 * C3531) * C1649 +
            (C239 * C3352 - C82592 * C3537) * C1642 +
            (C239 * C3343 - C82592 * C3532) * C1651 +
            (C239 * C3350 - C82592 * C3538) * C82885) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82592 * C240 - C239 * C102) * C92 +
           (C82592 * C246 - C239 * C109) * C81 + (C253 - C254) * C94 +
           (C255 - C256) * C82 + (C257 - C258) * C96 + (C259 - C260) * C83 +
           (C261 - C262) * C98 + (C263 - C264) * C84 + (C265 - C266) * C100 +
           (C267 - C268) * C85) *
              C82581 * C1149 +
          ((C239 * C1155 - C82592 * C1265) * C92 +
           (C239 * C1165 - C82592 * C1270) * C81 +
           (C239 * C1154 - C82592 * C1266) * C94 +
           (C239 * C1163 - C82592 * C1271) * C82 +
           (C239 * C1153 - C82592 * C1267) * C96 +
           (C239 * C1161 - C82592 * C1272) * C83 +
           (C239 * C1152 - C82592 * C1268) * C98 +
           (C239 * C1159 - C82592 * C1273) * C84 +
           (C239 * C1151 - C82592 * C1269) * C100 +
           (C239 * C1157 - C82592 * C1274) * C85) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
            C82896 * C4299 - C4298 * C4108) *
               C1647 +
           (C82932 * C246 - C4296 * C109 + C82918 * C1270 - C4297 * C1165 +
            C82896 * C4303 - C4298 * C4113) *
               C1641 +
           (C4308 - C4309 + C4310 - C4311 + C4312 - C4313) * C1649 +
           (C4314 - C4315 + C4316 - C4317 + C4318 - C4319) * C1642 +
           (C4320 - C4321 + C4322 - C4323 + C4324 - C4325) * C1651 +
           (C4326 - C4327 + C4328 - C4329 + C4330 - C4331) * C82885) *
              C82581 * C1149 +
          ((C4296 * C1155 - C82932 * C1265 + C4297 * C4108 - C82918 * C4299 +
            C4298 * C5690 - C82896 * C5904) *
               C1647 +
           (C4296 * C1165 - C82932 * C1270 + C4297 * C4113 - C82918 * C4303 +
            C4298 * C5696 - C82896 * C5907) *
               C1641 +
           (C4296 * C1154 - C82932 * C1266 + C4297 * C4109 - C82918 * C4300 +
            C4298 * C5689 - C82896 * C5905) *
               C1649 +
           (C4296 * C1163 - C82932 * C1271 + C4297 * C4115 - C82918 * C4304 +
            C4298 * C5694 - C82896 * C5908) *
               C1642 +
           (C4296 * C1153 - C82932 * C1267 + C4297 * C4110 - C82918 * C4301 +
            C4298 * C5688 - C82896 * C5906) *
               C1651 +
           (C4296 * C1161 - C82932 * C1272 + C4297 * C4117 - C82918 * C4305 +
            C4298 * C5692 - C82896 * C5909) *
               C82885) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C13259 +
            (C82592 * C246 - C239 * C109) * C82925 + (C253 - C254) * C13261 +
            (C255 - C256) * C82909 + (C257 - C258) * C13263 +
            (C259 - C260) * C82885) *
               C13256 +
           ((C2740 - C2741) * C13259 + (C2742 - C2743) * C82925 +
            (C1861 - C1862) * C13261 + (C1863 - C1864) * C82909 +
            (C1865 - C1866) * C13263 + (C1867 - C1868) * C82885) *
               C13257 +
           ((C2744 - C2745) * C13259 + (C2746 - C2747) * C82925 +
            (C1869 - C1870) * C13261 + (C1871 - C1872) * C82909 +
            (C1873 - C1874) * C13263 + (C1875 - C1876) * C82885) *
               C82893) *
              C1149 +
          (((C239 * C1155 - C82592 * C1265) * C13259 +
            (C239 * C1165 - C82592 * C1270) * C82925 +
            (C239 * C1154 - C82592 * C1266) * C13261 +
            (C239 * C1163 - C82592 * C1271) * C82909 +
            (C239 * C1153 - C82592 * C1267) * C13263 +
            (C239 * C1161 - C82592 * C1272) * C82885) *
               C13256 +
           ((C239 * C3348 - C82592 * C3527) * C13259 +
            (C239 * C3360 - C82592 * C3533) * C82925 +
            (C239 * C3347 - C82592 * C3528) * C13261 +
            (C239 * C3358 - C82592 * C3534) * C82909 +
            (C239 * C3346 - C82592 * C3529) * C13263 +
            (C239 * C3356 - C82592 * C3535) * C82885) *
               C13257 +
           ((C239 * C3345 - C82592 * C3530) * C13259 +
            (C239 * C3354 - C82592 * C3536) * C82925 +
            (C239 * C3344 - C82592 * C3531) * C13261 +
            (C239 * C3352 - C82592 * C3537) * C82909 +
            (C239 * C3343 - C82592 * C3532) * C13263 +
            (C239 * C3350 - C82592 * C3538) * C82885) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C15405 +
            (C82592 * C246 - C239 * C109) * C82523) *
               C15400 +
           ((C2740 - C2741) * C15405 + (C2742 - C2743) * C82523) * C15401 +
           ((C2744 - C2745) * C15405 + (C2746 - C2747) * C82523) * C15402 +
           ((C15952 - C15953) * C15405 + (C15954 - C15955) * C82523) * C15403 +
           ((C15956 - C15957) * C15405 + (C15958 - C15959) * C82523) * C15404) *
              C1149 +
          (((C239 * C1155 - C82592 * C1265) * C15405 +
            (C239 * C1165 - C82592 * C1270) * C82523) *
               C15400 +
           ((C239 * C3348 - C82592 * C3527) * C15405 +
            (C239 * C3360 - C82592 * C3533) * C82523) *
               C15401 +
           ((C239 * C3345 - C82592 * C3530) * C15405 +
            (C239 * C3354 - C82592 * C3536) * C82523) *
               C15402 +
           ((C239 * C16304 - C82592 * C16399) * C15405 +
            (C239 * C16308 - C82592 * C16401) * C82523) *
               C15403 +
           ((C239 * C16303 - C82592 * C16400) * C15405 +
            (C239 * C16306 - C82592 * C16402) * C82523) *
               C15404) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
             C82896 * C4299 - C4298 * C4108) *
                C15405 +
            (C82932 * C246 - C4296 * C109 + C82918 * C1270 - C4297 * C1165 +
             C82896 * C4303 - C4298 * C4113) *
                C82523) *
               C13256 +
           ((C17634 - C17635 + C17636 - C17637 + C17638 - C17639) * C15405 +
            (C17640 - C17641 + C17642 - C17643 + C17644 - C17645) * C82523) *
               C13257 +
           ((C17646 - C17647 + C17648 - C17649 + C17650 - C17651) * C15405 +
            (C17652 - C17653 + C17654 - C17655 + C17656 - C17657) * C82523) *
               C82893) *
              C1149 +
          (((C4296 * C1155 - C82932 * C1265 + C4297 * C4108 - C82918 * C4299 +
             C4298 * C5690 - C82896 * C5904) *
                C15405 +
            (C4296 * C1165 - C82932 * C1270 + C4297 * C4113 - C82918 * C4303 +
             C4298 * C5696 - C82896 * C5907) *
                C82523) *
               C13256 +
           ((C4296 * C3348 - C82932 * C3527 + C4297 * C4976 - C82918 * C5140 +
             C4298 * C18262 - C82896 * C18459) *
                C15405 +
            (C4296 * C3360 - C82932 * C3533 + C4297 * C4982 - C82918 * C5143 +
             C4298 * C18266 - C82896 * C18461) *
                C82523) *
               C13257 +
           ((C4296 * C3345 - C82932 * C3530 + C4297 * C16745 - C82918 * C16905 +
             C4298 * C18261 - C82896 * C18460) *
                C15405 +
            (C4296 * C3354 - C82932 * C3536 + C4297 * C16748 - C82918 * C16907 +
             C4298 * C18264 - C82896 * C18462) *
                C82523) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
            C82885 * C112 - C1651 * C104) *
               C1743 +
           (C1641 * C316 - C1647 * C310 + C1642 * C317 - C1649 * C311 +
            C82885 * C318 - C1651 * C312) *
               C82931 +
           (C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C1744 +
           (C2834 - C2835 + C2836 - C2837 + C2838 - C2839) * C82916 +
           (C2840 - C2841 + C2842 - C2843 + C2844 - C2845) * C1745 +
           (C2846 - C2847 + C2848 - C2849 + C2850 - C2851) * C82893) *
              C82592 * C1149 +
          ((C1647 * C1155 - C1641 * C1164 + C1649 * C1154 - C1642 * C1162 +
            C1651 * C1153 - C82885 * C1160) *
               C1743 +
           (C1647 * C1317 - C1641 * C1322 + C1649 * C1318 - C1642 * C1323 +
            C1651 * C1319 - C82885 * C1324) *
               C82931 +
           (C1647 * C3348 - C1641 * C3359 + C1649 * C3347 - C1642 * C3357 +
            C1651 * C3346 - C82885 * C3355) *
               C1744 +
           (C1647 * C3613 - C1641 * C3619 + C1649 * C3614 - C1642 * C3620 +
            C1651 * C3615 - C82885 * C3621) *
               C82916 +
           (C1647 * C3345 - C1641 * C3353 + C1649 * C3344 - C1642 * C3351 +
            C1651 * C3343 - C82885 * C3349) *
               C1745 +
           (C1647 * C3616 - C1641 * C3622 + C1649 * C3617 - C1642 * C3623 +
            C1651 * C3618 - C82885 * C3624) *
               C82893) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C108 - C92 * C102 + C82 * C110 - C94 * C103 + C83 * C112 -
            C96 * C104 + C84 * C114 - C98 * C105 + C85 * C116 - C100 * C106) *
               C168 +
           (C81 * C316 - C92 * C310 + C82 * C317 - C94 * C311 + C83 * C318 -
            C96 * C312 + C84 * C319 - C98 * C313 + C85 * C320 - C100 * C314) *
               C82581) *
              C82592 * C1149 +
          ((C92 * C1155 - C81 * C1164 + C94 * C1154 - C82 * C1162 +
            C96 * C1153 - C83 * C1160 + C98 * C1152 - C84 * C1158 +
            C100 * C1151 - C85 * C1156) *
               C168 +
           (C92 * C1317 - C81 * C1322 + C94 * C1318 - C82 * C1323 +
            C96 * C1319 - C83 * C1324 + C98 * C1320 - C84 * C1325 +
            C100 * C1321 - C85 * C1326) *
               C82581) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
             C82885 * C112 - C1651 * C104) *
                C168 +
            (C1641 * C316 - C1647 * C310 + C1642 * C317 - C1649 * C311 +
             C82885 * C318 - C1651 * C312) *
                C82581) *
               C82932 +
           ((C5991 - C5992 + C5993 - C5994 + C5995 - C5996) * C168 +
            (C5997 - C5998 + C5999 - C6000 + C6001 - C6002) * C82581) *
               C82918 +
           ((C6003 - C6004 + C6005 - C6006 + C6007 - C6008) * C168 +
            (C6009 - C6010 + C6011 - C6012 + C6013 - C6014) * C82581) *
               C82896) *
              C1149 +
          (((C5992 - C5991 + C5994 - C5993 + C5996 - C5995) * C168 +
            (C5998 - C5997 + C6000 - C5999 + C6002 - C6001) * C82581) *
               C82932 +
           ((C6004 - C6003 + C6006 - C6005 + C6008 - C6007) * C168 +
            (C6010 - C6009 + C6012 - C6011 + C6014 - C6013) * C82581) *
               C82918 +
           ((C1647 * C5690 - C1641 * C5695 + C1649 * C5689 - C1642 * C5693 +
             C1651 * C5688 - C82885 * C5691) *
                C168 +
            (C1647 * C5984 - C1641 * C5987 + C1649 * C5985 - C1642 * C5988 +
             C1651 * C5986 - C82885 * C5989) *
                C82581) *
               C82896) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
            C82885 * C112 - C13263 * C104) *
               C13339 +
           (C82925 * C316 - C13259 * C310 + C82909 * C317 - C13261 * C311 +
            C82885 * C318 - C13263 * C312) *
               C13256 +
           (C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C13340 +
           (C14292 - C14293 + C14294 - C14295 + C14296 - C14297) * C13257 +
           (C14298 - C14299 + C14300 - C14301 + C14302 - C14303) * C13341 +
           (C14304 - C14305 + C14306 - C14307 + C14308 - C14309) * C82893) *
              C82592 * C1149 +
          ((C13259 * C1155 - C82925 * C1164 + C13261 * C1154 - C82909 * C1162 +
            C13263 * C1153 - C82885 * C1160) *
               C13339 +
           (C13259 * C1317 - C82925 * C1322 + C13261 * C1318 - C82909 * C1323 +
            C13263 * C1319 - C82885 * C1324) *
               C13256 +
           (C13259 * C3348 - C82925 * C3359 + C13261 * C3347 - C82909 * C3357 +
            C13263 * C3346 - C82885 * C3355) *
               C13340 +
           (C13259 * C3613 - C82925 * C3619 + C13261 * C3614 - C82909 * C3620 +
            C13263 * C3615 - C82885 * C3621) *
               C13257 +
           (C13259 * C3345 - C82925 * C3353 + C13261 * C3344 - C82909 * C3351 +
            C13263 * C3343 - C82885 * C3349) *
               C13341 +
           (C13259 * C3616 - C82925 * C3622 + C13261 * C3617 - C82909 * C3623 +
            C13263 * C3618 - C82885 * C3624) *
               C82893) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82523 * C108 - C15405 * C102) * C15457 +
           (C82523 * C316 - C15405 * C310) * C15400 +
           (C16004 - C16005) * C15458 + (C16006 - C16007) * C15401 +
           (C16008 - C16009) * C15459 + (C16010 - C16011) * C15402 +
           (C16012 - C16013) * C15460 + (C16014 - C16015) * C15403 +
           (C16016 - C16017) * C15461 + (C16018 - C16019) * C15404) *
              C82592 * C1149 +
          ((C15405 * C1155 - C82523 * C1164) * C15457 +
           (C15405 * C1317 - C82523 * C1322) * C15400 +
           (C15405 * C3348 - C82523 * C3359) * C15458 +
           (C15405 * C3613 - C82523 * C3619) * C15401 +
           (C15405 * C3345 - C82523 * C3353) * C15459 +
           (C15405 * C3616 - C82523 * C3622) * C15402 +
           (C15405 * C16304 - C82523 * C16307) * C15460 +
           (C15405 * C16445 - C82523 * C16447) * C15403 +
           (C15405 * C16303 - C82523 * C16305) * C15461 +
           (C15405 * C16446 - C82523 * C16448) * C15404) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C13339 +
            (C82523 * C316 - C15405 * C310) * C13256 +
            (C16004 - C16005) * C13340 + (C16006 - C16007) * C13257 +
            (C16008 - C16009) * C13341 + (C16010 - C16011) * C82893) *
               C82932 +
           ((C18542 - C18543) * C13339 + (C18544 - C18545) * C13256 +
            (C17734 - C17735) * C13340 + (C17736 - C17737) * C13257 +
            (C17738 - C17739) * C13341 + (C17740 - C17741) * C82893) *
               C82918 +
           ((C18546 - C18547) * C13339 + (C18548 - C18549) * C13256 +
            (C17742 - C17743) * C13340 + (C17744 - C17745) * C13257 +
            (C17746 - C17747) * C13341 + (C17748 - C17749) * C82893) *
               C82896) *
              C1149 +
          (((C18543 - C18542) * C13339 + (C18545 - C18544) * C13256 +
            (C17735 - C17734) * C13340 + (C17737 - C17736) * C13257 +
            (C17739 - C17738) * C13341 + (C17741 - C17740) * C82893) *
               C82932 +
           ((C18547 - C18546) * C13339 + (C18549 - C18548) * C13256 +
            (C17743 - C17742) * C13340 + (C17745 - C17744) * C13257 +
            (C17747 - C17746) * C13341 + (C17749 - C17748) * C82893) *
               C82918 +
           ((C15405 * C5690 - C82523 * C5695) * C13339 +
            (C15405 * C5984 - C82523 * C5987) * C13256 +
            (C15405 * C18262 - C82523 * C18265) * C13340 +
            (C15405 * C18537 - C82523 * C18539) * C13257 +
            (C15405 * C18261 - C82523 * C18263) * C13341 +
            (C15405 * C18538 - C82523 * C18540) * C82893) *
               C82896) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1743 * C169 - C2032 * C102 - C1743 * C310 + C82931 * C365 +
            C1744 * C753 - C2033 * C695 - C1744 * C857 + C82916 * C913 +
            C1745 * C1746 - C2034 * C1653 - C1745 * C1950 + C82893 * C2035) *
               C1641 +
           (C2076 + C2077 + C2078) * C1642 + (C2079 + C2080 + C2081) * C82885) *
              C82592 * C1149 -
          ((C1745 * C3446 - C2034 * C3343 - C1745 * C3618 + C82893 * C3699 +
            C1744 * C3445 - C2033 * C3346 - C1744 * C3615 + C82916 * C3700 +
            C1743 * C1215 - C2032 * C1153 - C1743 * C1319 + C82931 * C1371) *
               C82885 +
           (C1745 * C3444 - C2034 * C3344 - C1745 * C3617 + C82893 * C3701 +
            C1744 * C3443 - C2033 * C3347 - C1744 * C3614 + C82916 * C3702 +
            C1743 * C1214 - C2032 * C1154 - C1743 * C1318 + C82931 * C1372) *
               C1642 +
           (C1745 * C3442 - C2034 * C3345 - C1745 * C3616 + C82893 * C3703 +
            C1744 * C3441 - C2033 * C3348 - C1744 * C3613 + C82916 * C3704 +
            C1743 * C1213 - C2032 * C1155 - C1743 * C1317 + C82931 * C1373) *
               C1641) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C81 +
           C396 * C82 + C397 * C83 + C398 * C84 + C399 * C85) *
              C82592 * C1149 -
          ((C168 * C1217 - C364 * C1151 - C168 * C1321 + C82581 * C1369) * C85 +
           (C168 * C1216 - C364 * C1152 - C168 * C1320 + C82581 * C1370) * C84 +
           (C168 * C1215 - C364 * C1153 - C168 * C1319 + C82581 * C1371) * C83 +
           (C168 * C1214 - C364 * C1154 - C168 * C1318 + C82581 * C1372) * C82 +
           (C168 * C1213 - C364 * C1155 - C168 * C1317 + C82581 * C1373) *
               C81) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C1641 +
            C396 * C1642 + C397 * C82885) *
               C82932 +
           (C6110 + C6096 + C6097) * C82918 +
           (C6111 + C6102 + C6103) * C82896) *
              C1149 -
          (((C168 * C5818 - C364 * C5688 - C168 * C5986 + C82581 * C6088) *
                C82885 +
            (C168 * C5817 - C364 * C5689 - C168 * C5985 + C82581 * C6089) *
                C1642 +
            (C168 * C5816 - C364 * C5690 - C168 * C5984 + C82581 * C6090) *
                C1641) *
               C82896 +
           (C6103 + C6102 + C6111) * C82918 +
           (C6097 + C6096 + C6110) * C82932) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13339 * C169 - C13588 * C102 - C13339 * C310 + C13256 * C365 +
            C13340 * C753 - C13589 * C695 - C13340 * C857 + C13257 * C913 +
            C13341 * C1746 - C13590 * C1653 - C13341 * C1950 + C82893 * C2035) *
               C82925 +
           (C13628 + C13629 + C13630) * C82909 +
           (C13631 + C13632 + C13633) * C82885) *
              C82592 * C1149 -
          ((C13341 * C3446 - C13590 * C3343 - C13341 * C3618 + C82893 * C3699 +
            C13340 * C3445 - C13589 * C3346 - C13340 * C3615 + C13257 * C3700 +
            C13339 * C1215 - C13588 * C1153 - C13339 * C1319 + C13256 * C1371) *
               C82885 +
           (C13341 * C3444 - C13590 * C3344 - C13341 * C3617 + C82893 * C3701 +
            C13340 * C3443 - C13589 * C3347 - C13340 * C3614 + C13257 * C3702 +
            C13339 * C1214 - C13588 * C1154 - C13339 * C1318 + C13256 * C1372) *
               C82909 +
           (C13341 * C3442 - C13590 * C3345 - C13341 * C3616 + C82893 * C3703 +
            C13340 * C3441 - C13589 * C3348 - C13340 * C3613 + C13257 * C3704 +
            C13339 * C1213 - C13588 * C1155 - C13339 * C1317 + C13256 * C1373) *
               C82925) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C15457 * C169 - C15600 * C102 - C15457 * C310 + C15400 * C365 +
           C15458 * C753 - C15601 * C695 - C15458 * C857 + C15401 * C913 +
           C15459 * C1746 - C15602 * C1653 - C15459 * C1950 + C15402 * C2035 +
           C15460 * C2653 - C15603 * C2527 - C15460 * C2821 + C15403 * C2927 +
           C15461 * C15462 - C15604 * C15407 - C15461 * C15554 +
           C15404 * C15605) *
              C82523 * C82592 * C1149 -
          (C15461 * C16354 - C15604 * C16303 - C15461 * C16446 +
           C15404 * C16491 + C15460 * C16353 - C15603 * C16304 -
           C15460 * C16445 + C15403 * C16492 + C15459 * C3442 - C15602 * C3345 -
           C15459 * C3616 + C15402 * C3703 + C15458 * C3441 - C15601 * C3348 -
           C15458 * C3613 + C15401 * C3704 + C15457 * C1213 - C15600 * C1155 -
           C15457 * C1317 + C15400 * C1373) *
              C82523 * C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13339 * C169 - C13588 * C102 - C13339 * C310 + C13256 * C365 +
            C13340 * C753 - C13589 * C695 - C13340 * C857 + C13257 * C913 +
            C13341 * C1746 - C13590 * C1653 - C13341 * C1950 + C82893 * C2035) *
               C82523 * C82932 +
           (C18662 + C18663 + C18664) * C82523 * C82918 +
           (C18665 + C18666 + C18667) * C82523 * C82896) *
              C1149 -
          ((C13341 * C18358 - C13590 * C18261 - C13341 * C18538 +
            C82893 * C18623 + C13340 * C18357 - C13589 * C18262 -
            C13340 * C18537 + C13257 * C18624 + C13339 * C5816 -
            C13588 * C5690 - C13339 * C5984 + C13256 * C6090) *
               C82523 * C82896 +
           (C18667 + C18666 + C18665) * C82523 * C82918 +
           (C18664 + C18663 + C18662) * C82523 * C82932) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C1743 +
            (C82592 * C441 - C239 * C310) * C82931 + (C2740 - C2741) * C1744 +
            (C3006 - C3007) * C82916 + (C2744 - C2745) * C1745 +
            (C3008 - C3009) * C82893) *
               C1641 +
           ((C253 - C254) * C1743 + (C448 - C449) * C82931 +
            (C1861 - C1862) * C1744 + (C2160 - C2161) * C82916 +
            (C1869 - C1870) * C1745 + (C2162 - C2163) * C82893) *
               C1642 +
           ((C257 - C258) * C1743 + (C450 - C451) * C82931 +
            (C1865 - C1866) * C1744 + (C2164 - C2165) * C82916 +
            (C1873 - C1874) * C1745 + (C2166 - C2167) * C82893) *
               C82885) *
              C1149 +
          (((C239 * C1155 - C82592 * C1265) * C1743 +
            (C239 * C1317 - C82592 * C1416) * C82931 +
            (C239 * C3348 - C82592 * C3527) * C1744 +
            (C239 * C3613 - C82592 * C3779) * C82916 +
            (C239 * C3345 - C82592 * C3530) * C1745 +
            (C239 * C3616 - C82592 * C3780) * C82893) *
               C1641 +
           ((C239 * C1154 - C82592 * C1266) * C1743 +
            (C239 * C1318 - C82592 * C1417) * C82931 +
            (C239 * C3347 - C82592 * C3528) * C1744 +
            (C239 * C3614 - C82592 * C3781) * C82916 +
            (C239 * C3344 - C82592 * C3531) * C1745 +
            (C239 * C3617 - C82592 * C3782) * C82893) *
               C1642 +
           ((C239 * C1153 - C82592 * C1267) * C1743 +
            (C239 * C1319 - C82592 * C1418) * C82931 +
            (C239 * C3346 - C82592 * C3529) * C1744 +
            (C239 * C3615 - C82592 * C3783) * C82916 +
            (C239 * C3343 - C82592 * C3532) * C1745 +
            (C239 * C3618 - C82592 * C3784) * C82893) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C168 +
            (C82592 * C441 - C239 * C310) * C82581) *
               C81 +
           ((C253 - C254) * C168 + (C448 - C449) * C82581) * C82 +
           ((C257 - C258) * C168 + (C450 - C451) * C82581) * C83 +
           ((C261 - C262) * C168 + (C452 - C453) * C82581) * C84 +
           ((C265 - C266) * C168 + (C454 - C455) * C82581) * C85) *
              C1149 +
          (((C239 * C1155 - C82592 * C1265) * C168 +
            (C239 * C1317 - C82592 * C1416) * C82581) *
               C81 +
           ((C239 * C1154 - C82592 * C1266) * C168 +
            (C239 * C1318 - C82592 * C1417) * C82581) *
               C82 +
           ((C239 * C1153 - C82592 * C1267) * C168 +
            (C239 * C1319 - C82592 * C1418) * C82581) *
               C83 +
           ((C239 * C1152 - C82592 * C1268) * C168 +
            (C239 * C1320 - C82592 * C1419) * C82581) *
               C84 +
           ((C239 * C1151 - C82592 * C1269) * C168 +
            (C239 * C1321 - C82592 * C1420) * C82581) *
               C85) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
             C82896 * C4299 - C4298 * C4108) *
                C168 +
            (C82932 * C441 - C4296 * C310 + C82918 * C1416 - C4297 * C1317 +
             C82896 * C4593 - C4298 * C4405) *
                C82581) *
               C1641 +
           ((C4308 - C4309 + C4310 - C4311 + C4312 - C4313) * C168 +
            (C4598 - C4599 + C4600 - C4601 + C4602 - C4603) * C82581) *
               C1642 +
           ((C4320 - C4321 + C4322 - C4323 + C4324 - C4325) * C168 +
            (C4604 - C4605 + C4606 - C4607 + C4608 - C4609) * C82581) *
               C82885) *
              C1149 +
          (((C4296 * C1155 - C82932 * C1265 + C4297 * C4108 - C82918 * C4299 +
             C4298 * C5690 - C82896 * C5904) *
                C168 +
            (C4296 * C1317 - C82932 * C1416 + C4297 * C4405 - C82918 * C4593 +
             C4298 * C5984 - C82896 * C6185) *
                C82581) *
               C1641 +
           ((C4296 * C1154 - C82932 * C1266 + C4297 * C4109 - C82918 * C4300 +
             C4298 * C5689 - C82896 * C5905) *
                C168 +
            (C4296 * C1318 - C82932 * C1417 + C4297 * C4406 - C82918 * C4594 +
             C4298 * C5985 - C82896 * C6186) *
                C82581) *
               C1642 +
           ((C4296 * C1153 - C82932 * C1267 + C4297 * C4110 - C82918 * C4301 +
             C4298 * C5688 - C82896 * C5906) *
                C168 +
            (C4296 * C1319 - C82932 * C1418 + C4297 * C4407 - C82918 * C4595 +
             C4298 * C5986 - C82896 * C6187) *
                C82581) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C13339 +
            (C82592 * C441 - C239 * C310) * C13256 + (C2740 - C2741) * C13340 +
            (C3006 - C3007) * C13257 + (C2744 - C2745) * C13341 +
            (C3008 - C3009) * C82893) *
               C82925 +
           ((C253 - C254) * C13339 + (C448 - C449) * C13256 +
            (C1861 - C1862) * C13340 + (C2160 - C2161) * C13257 +
            (C1869 - C1870) * C13341 + (C2162 - C2163) * C82893) *
               C82909 +
           ((C257 - C258) * C13339 + (C450 - C451) * C13256 +
            (C1865 - C1866) * C13340 + (C2164 - C2165) * C13257 +
            (C1873 - C1874) * C13341 + (C2166 - C2167) * C82893) *
               C82885) *
              C1149 +
          (((C239 * C1155 - C82592 * C1265) * C13339 +
            (C239 * C1317 - C82592 * C1416) * C13256 +
            (C239 * C3348 - C82592 * C3527) * C13340 +
            (C239 * C3613 - C82592 * C3779) * C13257 +
            (C239 * C3345 - C82592 * C3530) * C13341 +
            (C239 * C3616 - C82592 * C3780) * C82893) *
               C82925 +
           ((C239 * C1154 - C82592 * C1266) * C13339 +
            (C239 * C1318 - C82592 * C1417) * C13256 +
            (C239 * C3347 - C82592 * C3528) * C13340 +
            (C239 * C3614 - C82592 * C3781) * C13257 +
            (C239 * C3344 - C82592 * C3531) * C13341 +
            (C239 * C3617 - C82592 * C3782) * C82893) *
               C82909 +
           ((C239 * C1153 - C82592 * C1267) * C13339 +
            (C239 * C1319 - C82592 * C1418) * C13256 +
            (C239 * C3346 - C82592 * C3529) * C13340 +
            (C239 * C3615 - C82592 * C3783) * C13257 +
            (C239 * C3343 - C82592 * C3532) * C13341 +
            (C239 * C3618 - C82592 * C3784) * C82893) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C82592 * C240 - C239 * C102) * C15457 +
           (C82592 * C441 - C239 * C310) * C15400 + (C2740 - C2741) * C15458 +
           (C3006 - C3007) * C15401 + (C2744 - C2745) * C15459 +
           (C3008 - C3009) * C15402 + (C15952 - C15953) * C15460 +
           (C16106 - C16107) * C15403 + (C15956 - C15957) * C15461 +
           (C16108 - C16109) * C15404) *
              C82523 * C1149 +
          ((C239 * C1155 - C82592 * C1265) * C15457 +
           (C239 * C1317 - C82592 * C1416) * C15400 +
           (C239 * C3348 - C82592 * C3527) * C15458 +
           (C239 * C3613 - C82592 * C3779) * C15401 +
           (C239 * C3345 - C82592 * C3530) * C15459 +
           (C239 * C3616 - C82592 * C3780) * C15402 +
           (C239 * C16304 - C82592 * C16399) * C15460 +
           (C239 * C16445 - C82592 * C16535) * C15403 +
           (C239 * C16303 - C82592 * C16400) * C15461 +
           (C239 * C16446 - C82592 * C16536) * C15404) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82932 * C240 - C4296 * C102 + C82918 * C1265 - C4297 * C1155 +
            C82896 * C4299 - C4298 * C4108) *
               C13339 +
           (C82932 * C441 - C4296 * C310 + C82918 * C1416 - C4297 * C1317 +
            C82896 * C4593 - C4298 * C4405) *
               C13256 +
           (C17634 - C17635 + C17636 - C17637 + C17638 - C17639) * C13340 +
           (C17900 - C17901 + C17902 - C17903 + C17904 - C17905) * C13257 +
           (C17646 - C17647 + C17648 - C17649 + C17650 - C17651) * C13341 +
           (C17906 - C17907 + C17908 - C17909 + C17910 - C17911) * C82893) *
              C82523 * C1149 +
          ((C4296 * C1155 - C82932 * C1265 + C4297 * C4108 - C82918 * C4299 +
            C4298 * C5690 - C82896 * C5904) *
               C13339 +
           (C4296 * C1317 - C82932 * C1416 + C4297 * C4405 - C82918 * C4593 +
            C4298 * C5984 - C82896 * C6185) *
               C13256 +
           (C4296 * C3348 - C82932 * C3527 + C4297 * C4976 - C82918 * C5140 +
            C4298 * C18262 - C82896 * C18459) *
               C13340 +
           (C4296 * C3613 - C82932 * C3779 + C4297 * C5220 - C82918 * C5377 +
            C4298 * C18537 - C82896 * C18741) *
               C13257 +
           (C4296 * C3345 - C82932 * C3530 + C4297 * C16745 - C82918 * C16905 +
            C4298 * C18261 - C82896 * C18460) *
               C13341 +
           (C4296 * C3616 - C82932 * C3780 + C4297 * C16983 - C82918 * C17137 +
            C4298 * C18538 - C82896 * C18742) *
               C82893) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezx[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
             C82885 * C112 - C1651 * C104) *
                C239 +
            (C1641 * C503 - C1647 * C497 + C1642 * C504 - C1649 * C498 +
             C82885 * C505 - C1651 * C499) *
                C82592) *
               C82931 +
           ((C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C239 +
            (C3090 - C3091 + C3092 - C3093 + C3094 - C3095) * C82592) *
               C82916 +
           ((C2840 - C2841 + C2842 - C2843 + C2844 - C2845) * C239 +
            (C3096 - C3097 + C3098 - C3099 + C3100 - C3101) * C82592) *
               C82893) *
              C1149 +
          (((C1647 * C1155 - C1641 * C1164 + C1649 * C1154 - C1642 * C1162 +
             C1651 * C1153 - C82885 * C1160) *
                C239 +
            (C1647 * C1463 - C1641 * C1468 + C1649 * C1464 - C1642 * C1469 +
             C1651 * C1465 - C82885 * C1470) *
                C82592) *
               C82931 +
           ((C1647 * C3348 - C1641 * C3359 + C1649 * C3347 - C1642 * C3357 +
             C1651 * C3346 - C82885 * C3355) *
                C239 +
            (C1647 * C3859 - C1641 * C3865 + C1649 * C3860 - C1642 * C3866 +
             C1651 * C3861 - C82885 * C3867) *
                C82592) *
               C82916 +
           ((C1647 * C3345 - C1641 * C3353 + C1649 * C3344 - C1642 * C3351 +
             C1651 * C3343 - C82885 * C3349) *
                C239 +
            (C1647 * C3862 - C1641 * C3868 + C1649 * C3863 - C1642 * C3869 +
             C1651 * C3864 - C82885 * C3870) *
                C82592) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C108 - C92 * C102 + C82 * C110 - C94 * C103 + C83 * C112 -
            C96 * C104 + C84 * C114 - C98 * C105 + C85 * C116 - C100 * C106) *
               C239 +
           (C81 * C503 - C92 * C497 + C82 * C504 - C94 * C498 + C83 * C505 -
            C96 * C499 + C84 * C506 - C98 * C500 + C85 * C507 - C100 * C501) *
               C82592) *
              C82581 * C1149 +
          ((C92 * C1155 - C81 * C1164 + C94 * C1154 - C82 * C1162 +
            C96 * C1153 - C83 * C1160 + C98 * C1152 - C84 * C1158 +
            C100 * C1151 - C85 * C1156) *
               C239 +
           (C92 * C1463 - C81 * C1468 + C94 * C1464 - C82 * C1469 +
            C96 * C1465 - C83 * C1470 + C98 * C1466 - C84 * C1471 +
            C100 * C1467 - C85 * C1472) *
               C82592) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
            C82885 * C112 - C1651 * C104) *
               C4296 +
           (C1641 * C503 - C1647 * C497 + C1642 * C504 - C1649 * C498 +
            C82885 * C505 - C1651 * C499) *
               C82932 +
           (C5991 - C5992 + C5993 - C5994 + C5995 - C5996) * C4297 +
           (C6269 - C6270 + C6271 - C6272 + C6273 - C6274) * C82918 +
           (C6003 - C6004 + C6005 - C6006 + C6007 - C6008) * C4298 +
           (C6275 - C6276 + C6277 - C6278 + C6279 - C6280) * C82896) *
              C82581 * C1149 +
          ((C5992 - C5991 + C5994 - C5993 + C5996 - C5995) * C4296 +
           (C6270 - C6269 + C6272 - C6271 + C6274 - C6273) * C82932 +
           (C6004 - C6003 + C6006 - C6005 + C6008 - C6007) * C4297 +
           (C6276 - C6275 + C6278 - C6277 + C6280 - C6279) * C82918 +
           (C1647 * C5690 - C1641 * C5695 + C1649 * C5689 - C1642 * C5693 +
            C1651 * C5688 - C82885 * C5691) *
               C4298 +
           (C1647 * C6262 - C1641 * C6265 + C1649 * C6263 - C1642 * C6266 +
            C1651 * C6264 - C82885 * C6267) *
               C82896) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C239 +
            (C82925 * C503 - C13259 * C497 + C82909 * C504 - C13261 * C498 +
             C82885 * C505 - C13263 * C499) *
                C82592) *
               C13256 +
           ((C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C239 +
            (C14532 - C14533 + C14534 - C14535 + C14536 - C14537) * C82592) *
               C13257 +
           ((C14298 - C14299 + C14300 - C14301 + C14302 - C14303) * C239 +
            (C14538 - C14539 + C14540 - C14541 + C14542 - C14543) * C82592) *
               C82893) *
              C1149 +
          (((C13259 * C1155 - C82925 * C1164 + C13261 * C1154 - C82909 * C1162 +
             C13263 * C1153 - C82885 * C1160) *
                C239 +
            (C13259 * C1463 - C82925 * C1468 + C13261 * C1464 - C82909 * C1469 +
             C13263 * C1465 - C82885 * C1470) *
                C82592) *
               C13256 +
           ((C13259 * C3348 - C82925 * C3359 + C13261 * C3347 - C82909 * C3357 +
             C13263 * C3346 - C82885 * C3355) *
                C239 +
            (C13259 * C3859 - C82925 * C3865 + C13261 * C3860 - C82909 * C3866 +
             C13263 * C3861 - C82885 * C3867) *
                C82592) *
               C13257 +
           ((C13259 * C3345 - C82925 * C3353 + C13261 * C3344 - C82909 * C3351 +
             C13263 * C3343 - C82885 * C3349) *
                C239 +
            (C13259 * C3862 - C82925 * C3868 + C13261 * C3863 - C82909 * C3869 +
             C13263 * C3864 - C82885 * C3870) *
                C82592) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C239 +
            (C82523 * C503 - C15405 * C497) * C82592) *
               C15400 +
           ((C16004 - C16005) * C239 + (C16154 - C16155) * C82592) * C15401 +
           ((C16008 - C16009) * C239 + (C16156 - C16157) * C82592) * C15402 +
           ((C16012 - C16013) * C239 + (C16158 - C16159) * C82592) * C15403 +
           ((C16016 - C16017) * C239 + (C16160 - C16161) * C82592) * C15404) *
              C1149 +
          (((C15405 * C1155 - C82523 * C1164) * C239 +
            (C15405 * C1463 - C82523 * C1468) * C82592) *
               C15400 +
           ((C15405 * C3348 - C82523 * C3359) * C239 +
            (C15405 * C3859 - C82523 * C3865) * C82592) *
               C15401 +
           ((C15405 * C3345 - C82523 * C3353) * C239 +
            (C15405 * C3862 - C82523 * C3868) * C82592) *
               C15402 +
           ((C15405 * C16304 - C82523 * C16307) * C239 +
            (C15405 * C16579 - C82523 * C16581) * C82592) *
               C15403 +
           ((C15405 * C16303 - C82523 * C16305) * C239 +
            (C15405 * C16580 - C82523 * C16582) * C82592) *
               C15404) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C4296 +
            (C82523 * C503 - C15405 * C497) * C82932 +
            (C18542 - C18543) * C4297 + (C18822 - C18823) * C82918 +
            (C18546 - C18547) * C4298 + (C18824 - C18825) * C82896) *
               C13256 +
           ((C16004 - C16005) * C4296 + (C16154 - C16155) * C82932 +
            (C17734 - C17735) * C4297 + (C17988 - C17989) * C82918 +
            (C17742 - C17743) * C4298 + (C17990 - C17991) * C82896) *
               C13257 +
           ((C16008 - C16009) * C4296 + (C16156 - C16157) * C82932 +
            (C17738 - C17739) * C4297 + (C17992 - C17993) * C82918 +
            (C17746 - C17747) * C4298 + (C17994 - C17995) * C82896) *
               C82893) *
              C1149 +
          (((C18543 - C18542) * C4296 + (C18823 - C18822) * C82932 +
            (C18547 - C18546) * C4297 + (C18825 - C18824) * C82918 +
            (C15405 * C5690 - C82523 * C5695) * C4298 +
            (C15405 * C6262 - C82523 * C6265) * C82896) *
               C13256 +
           ((C17735 - C17734) * C4296 + (C17989 - C17988) * C82932 +
            (C17743 - C17742) * C4297 + (C17991 - C17990) * C82918 +
            (C15405 * C18262 - C82523 * C18265) * C4298 +
            (C15405 * C18817 - C82523 * C18819) * C82896) *
               C13257 +
           ((C17739 - C17738) * C4296 + (C17993 - C17992) * C82932 +
            (C17747 - C17746) * C4297 + (C17995 - C17994) * C82918 +
            (C15405 * C18261 - C82523 * C18263) * C4298 +
            (C15405 * C18818 - C82523 * C18820) * C82896) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
             C82893 * C1746 - C1745 * C1653) *
                C239 +
            (C82931 * C551 - C1743 * C497 + C82916 * C1055 - C1744 * C1003 +
             C82893 * C2323 - C1745 * C2241) *
                C82592) *
               C1641 +
           ((C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C239 +
            (C2328 - C2329 + C2330 - C2331 + C2332 - C2333) * C82592) *
               C1642 +
           ((C1767 - C1768 + C1769 - C1770 + C1771 - C1772) * C239 +
            (C2334 - C2335 + C2336 - C2337 + C2338 - C2339) * C82592) *
               C82885) *
              C1149 +
          (((C1743 * C1155 - C82931 * C1213 + C1744 * C3348 - C82916 * C3441 +
             C1745 * C3345 - C82893 * C3442) *
                C239 +
            (C1743 * C1463 - C82931 * C1515 + C1744 * C3859 - C82916 * C3945 +
             C1745 * C3862 - C82893 * C3946) *
                C82592) *
               C1641 +
           ((C1743 * C1154 - C82931 * C1214 + C1744 * C3347 - C82916 * C3443 +
             C1745 * C3344 - C82893 * C3444) *
                C239 +
            (C1743 * C1464 - C82931 * C1516 + C1744 * C3860 - C82916 * C3947 +
             C1745 * C3863 - C82893 * C3948) *
                C82592) *
               C1642 +
           ((C1743 * C1153 - C82931 * C1215 + C1744 * C3346 - C82916 * C3445 +
             C1745 * C3343 - C82893 * C3446) *
                C239 +
            (C1743 * C1465 - C82931 * C1517 + C1744 * C3861 - C82916 * C3949 +
             C1745 * C3864 - C82893 * C3950) *
                C82592) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C239 +
            (C82581 * C551 - C168 * C497) * C82592) *
               C81 +
           ((C182 - C183) * C239 + (C558 - C559) * C82592) * C82 +
           ((C186 - C187) * C239 + (C560 - C561) * C82592) * C83 +
           ((C190 - C191) * C239 + (C562 - C563) * C82592) * C84 +
           ((C194 - C195) * C239 + (C564 - C565) * C82592) * C85) *
              C1149 +
          (((C168 * C1155 - C82581 * C1213) * C239 +
            (C168 * C1463 - C82581 * C1515) * C82592) *
               C81 +
           ((C168 * C1154 - C82581 * C1214) * C239 +
            (C168 * C1464 - C82581 * C1516) * C82592) *
               C82 +
           ((C168 * C1153 - C82581 * C1215) * C239 +
            (C168 * C1465 - C82581 * C1517) * C82592) *
               C83 +
           ((C168 * C1152 - C82581 * C1216) * C239 +
            (C168 * C1466 - C82581 * C1518) * C82592) *
               C84 +
           ((C168 * C1151 - C82581 * C1217) * C239 +
            (C168 * C1467 - C82581 * C1519) * C82592) *
               C85) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C4296 +
            (C82581 * C551 - C168 * C497) * C82932 + (C5823 - C5824) * C4297 +
            (C6358 - C6359) * C82918 + (C5827 - C5828) * C4298 +
            (C6360 - C6361) * C82896) *
               C1641 +
           ((C182 - C183) * C4296 + (C558 - C559) * C82932 +
            (C4207 - C4208) * C4297 + (C4770 - C4771) * C82918 +
            (C4215 - C4216) * C4298 + (C4772 - C4773) * C82896) *
               C1642 +
           ((C186 - C187) * C4296 + (C560 - C561) * C82932 +
            (C4211 - C4212) * C4297 + (C4774 - C4775) * C82918 +
            (C4219 - C4220) * C4298 + (C4776 - C4777) * C82896) *
               C82885) *
              C1149 +
          (((C5824 - C5823) * C4296 + (C6359 - C6358) * C82932 +
            (C5828 - C5827) * C4297 + (C6361 - C6360) * C82918 +
            (C168 * C5690 - C82581 * C5816) * C4298 +
            (C168 * C6262 - C82581 * C6354) * C82896) *
               C1641 +
           ((C4208 - C4207) * C4296 + (C4771 - C4770) * C82932 +
            (C4216 - C4215) * C4297 + (C4773 - C4772) * C82918 +
            (C168 * C5689 - C82581 * C5817) * C4298 +
            (C168 * C6263 - C82581 * C6355) * C82896) *
               C1642 +
           ((C4212 - C4211) * C4296 + (C4775 - C4774) * C82932 +
            (C4220 - C4219) * C4297 + (C4777 - C4776) * C82918 +
            (C168 * C5688 - C82581 * C5818) * C4298 +
            (C168 * C6264 - C82581 * C6356) * C82896) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C239 +
            (C13256 * C551 - C13339 * C497 + C13257 * C1055 - C13340 * C1003 +
             C82893 * C2323 - C13341 * C2241) *
                C82592) *
               C82925 +
           ((C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C239 +
            (C13856 - C13857 + C13858 - C13859 + C13860 - C13861) * C82592) *
               C82909 +
           ((C13355 - C13356 + C13357 - C13358 + C13359 - C13360) * C239 +
            (C13862 - C13863 + C13864 - C13865 + C13866 - C13867) * C82592) *
               C82885) *
              C1149 +
          (((C13339 * C1155 - C13256 * C1213 + C13340 * C3348 - C13257 * C3441 +
             C13341 * C3345 - C82893 * C3442) *
                C239 +
            (C13339 * C1463 - C13256 * C1515 + C13340 * C3859 - C13257 * C3945 +
             C13341 * C3862 - C82893 * C3946) *
                C82592) *
               C82925 +
           ((C13339 * C1154 - C13256 * C1214 + C13340 * C3347 - C13257 * C3443 +
             C13341 * C3344 - C82893 * C3444) *
                C239 +
            (C13339 * C1464 - C13256 * C1516 + C13340 * C3860 - C13257 * C3947 +
             C13341 * C3863 - C82893 * C3948) *
                C82592) *
               C82909 +
           ((C13339 * C1153 - C13256 * C1215 + C13340 * C3346 - C13257 * C3445 +
             C13341 * C3343 - C82893 * C3446) *
                C239 +
            (C13339 * C1465 - C13256 * C1517 + C13340 * C3861 - C13257 * C3949 +
             C13341 * C3864 - C82893 * C3950) *
                C82592) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15400 * C169 - C15457 * C102 + C15401 * C753 - C15458 * C695 +
            C15402 * C1746 - C15459 * C1653 + C15403 * C2653 - C15460 * C2527 +
            C15404 * C15462 - C15461 * C15407) *
               C239 +
           (C15400 * C551 - C15457 * C497 + C15401 * C1055 - C15458 * C1003 +
            C15402 * C2323 - C15459 * C2241 + C15403 * C3175 - C15460 * C3083 +
            C15404 * C15739 - C15461 * C15693) *
               C82592) *
              C82523 * C1149 +
          ((C15457 * C1155 - C15400 * C1213 + C15458 * C3348 - C15401 * C3441 +
            C15459 * C3345 - C15402 * C3442 + C15460 * C16304 -
            C15403 * C16353 + C15461 * C16303 - C15404 * C16354) *
               C239 +
           (C15457 * C1463 - C15400 * C1515 + C15458 * C3859 - C15401 * C3945 +
            C15459 * C3862 - C15402 * C3946 + C15460 * C16579 -
            C15403 * C16625 + C15461 * C16580 - C15404 * C16626) *
               C82592) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
            C82893 * C1746 - C13341 * C1653) *
               C4296 +
           (C13256 * C551 - C13339 * C497 + C13257 * C1055 - C13340 * C1003 +
            C82893 * C2323 - C13341 * C2241) *
               C82932 +
           (C18362 - C18363 + C18364 - C18365 + C18366 - C18367) * C4297 +
           (C18902 - C18903 + C18904 - C18905 + C18906 - C18907) * C82918 +
           (C18374 - C18375 + C18376 - C18377 + C18378 - C18379) * C4298 +
           (C18908 - C18909 + C18910 - C18911 + C18912 - C18913) * C82896) *
              C82523 * C1149 +
          ((C18363 - C18362 + C18365 - C18364 + C18367 - C18366) * C4296 +
           (C18903 - C18902 + C18905 - C18904 + C18907 - C18906) * C82932 +
           (C18375 - C18374 + C18377 - C18376 + C18379 - C18378) * C4297 +
           (C18909 - C18908 + C18911 - C18910 + C18913 - C18912) * C82918 +
           (C13339 * C5690 - C13256 * C5816 + C13340 * C18262 -
            C13257 * C18357 + C13341 * C18261 - C82893 * C18358) *
               C4298 +
           (C13339 * C6262 - C13256 * C6354 + C13340 * C18817 -
            C13257 * C18899 + C13341 * C18818 - C82893 * C18900) *
               C82896) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82931 +
            C3268 * C82916 + C3269 * C82893) *
               C1641 +
           (C2418 + C2448 + C2449) * C1642 + (C2427 + C2450 + C2451) * C82885) *
              C1149 -
          (((C239 * C3532 - C607 * C3343 - C239 * C3864 + C82592 * C4025) *
                C82893 +
            (C239 * C3529 - C607 * C3346 - C239 * C3861 + C82592 * C4026) *
                C82916 +
            (C239 * C1267 - C607 * C1153 - C239 * C1465 + C82592 * C1564) *
                C82931) *
               C82885 +
           ((C239 * C3531 - C607 * C3344 - C239 * C3863 + C82592 * C4027) *
                C82893 +
            (C239 * C3528 - C607 * C3347 - C239 * C3860 + C82592 * C4028) *
                C82916 +
            (C239 * C1266 - C607 * C1154 - C239 * C1464 + C82592 * C1565) *
                C82931) *
               C1642 +
           ((C239 * C3530 - C607 * C3345 - C239 * C3862 + C82592 * C4029) *
                C82893 +
            (C239 * C3527 - C607 * C3348 - C239 * C3859 + C82592 * C4030) *
                C82916 +
            (C239 * C1265 - C607 * C1155 - C239 * C1463 + C82592 * C1566) *
                C82931) *
               C1641) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82581 *
               C81 +
           C643 * C82 + C644 * C83 + C645 * C84 + C646 * C85) *
              C1149 -
          ((C239 * C1269 - C607 * C1151 - C239 * C1467 + C82592 * C1562) *
               C82581 * C85 +
           (C239 * C1268 - C607 * C1152 - C239 * C1466 + C82592 * C1563) *
               C82581 * C84 +
           (C239 * C1267 - C607 * C1153 - C239 * C1465 + C82592 * C1564) *
               C82581 * C83 +
           (C239 * C1266 - C607 * C1154 - C239 * C1464 + C82592 * C1565) *
               C82581 * C82 +
           (C239 * C1265 - C607 * C1155 - C239 * C1463 + C82592 * C1566) *
               C82581 * C81) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4296 * C240 - C4851 * C102 - C4296 * C497 + C82932 * C608 +
            C4297 * C1265 - C4852 * C1155 - C4297 * C1463 + C82918 * C1566 +
            C4298 * C4299 - C4853 * C4108 - C4298 * C4683 + C82896 * C4854) *
               C82581 * C1641 +
           (C4895 + C4896 + C4897) * C82581 * C1642 +
           (C4898 + C4899 + C4900) * C82581 * C82885) *
              C1149 -
          ((C4298 * C5906 - C4853 * C5688 - C4298 * C6264 + C82896 * C6435 +
            C4297 * C4301 - C4852 * C4110 - C4297 * C4685 + C82918 * C4856 +
            C4296 * C1267 - C4851 * C1153 - C4296 * C1465 + C82932 * C1564) *
               C82581 * C82885 +
           (C4298 * C5905 - C4853 * C5689 - C4298 * C6263 + C82896 * C6436 +
            C4297 * C4300 - C4852 * C4109 - C4297 * C4684 + C82918 * C4855 +
            C4296 * C1266 - C4851 * C1154 - C4296 * C1464 + C82932 * C1565) *
               C82581 * C1642 +
           (C4298 * C5904 - C4853 * C5690 - C4298 * C6262 + C82896 * C6437 +
            C4297 * C4299 - C4852 * C4108 - C4297 * C4683 + C82918 * C4854 +
            C4296 * C1265 - C4851 * C1155 - C4296 * C1463 + C82932 * C1566) *
               C82581 * C1641) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C13256 +
            C3268 * C13257 + C3269 * C82893) *
               C82925 +
           (C13942 + C13943 + C13944) * C82909 +
           (C13945 + C13946 + C13947) * C82885) *
              C1149 -
          (((C239 * C3532 - C607 * C3343 - C239 * C3864 + C82592 * C4025) *
                C82893 +
            (C239 * C3529 - C607 * C3346 - C239 * C3861 + C82592 * C4026) *
                C13257 +
            (C239 * C1267 - C607 * C1153 - C239 * C1465 + C82592 * C1564) *
                C13256) *
               C82885 +
           ((C239 * C3531 - C607 * C3344 - C239 * C3863 + C82592 * C4027) *
                C82893 +
            (C239 * C3528 - C607 * C3347 - C239 * C3860 + C82592 * C4028) *
                C13257 +
            (C239 * C1266 - C607 * C1154 - C239 * C1464 + C82592 * C1565) *
                C13256) *
               C82909 +
           ((C239 * C3530 - C607 * C3345 - C239 * C3862 + C82592 * C4029) *
                C82893 +
            (C239 * C3527 - C607 * C3348 - C239 * C3859 + C82592 * C4030) *
                C13257 +
            (C239 * C1265 - C607 * C1155 - C239 * C1463 + C82592 * C1566) *
                C13256) *
               C82925) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C15400 +
           C3268 * C15401 + C3269 * C15402 + C16260 * C15403 +
           C16261 * C15404) *
              C82523 * C1149 -
          ((C239 * C16400 - C607 * C16303 - C239 * C16580 + C82592 * C16669) *
               C15404 +
           (C239 * C16399 - C607 * C16304 - C239 * C16579 + C82592 * C16670) *
               C15403 +
           (C239 * C3530 - C607 * C3345 - C239 * C3862 + C82592 * C4029) *
               C15402 +
           (C239 * C3527 - C607 * C3348 - C239 * C3859 + C82592 * C4030) *
               C15401 +
           (C239 * C1265 - C607 * C1155 - C239 * C1463 + C82592 * C1566) *
               C15400) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4296 * C240 - C4851 * C102 - C4296 * C497 + C82932 * C608 +
            C4297 * C1265 - C4852 * C1155 - C4297 * C1463 + C82918 * C1566 +
            C4298 * C4299 - C4853 * C4108 - C4298 * C4683 + C82896 * C4854) *
               C13256 +
           (C18182 + C18183 + C18184) * C13257 +
           (C18185 + C18186 + C18187) * C82893) *
              C82523 * C1149 -
          ((C4298 * C18460 - C4853 * C18261 - C4298 * C18818 + C82896 * C18987 +
            C4297 * C16905 - C4852 * C16745 - C4297 * C17213 + C82918 * C17367 +
            C4296 * C3530 - C4851 * C3345 - C4296 * C3862 + C82932 * C4029) *
               C82893 +
           (C4298 * C18459 - C4853 * C18262 - C4298 * C18817 + C82896 * C18988 +
            C4297 * C5140 - C4852 * C4976 - C4297 * C5454 + C82918 * C5613 +
            C4296 * C3527 - C4851 * C3348 - C4296 * C3859 + C82932 * C4030) *
               C13257 +
           (C4298 * C5904 - C4853 * C5690 - C4298 * C6262 + C82896 * C6437 +
            C4297 * C4299 - C4852 * C4108 - C4297 * C4683 + C82918 * C4854 +
            C4296 * C1265 - C4851 * C1155 - C4296 * C1463 + C82932 * C1566) *
               C13256) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6510 * C108 - C6511 * C102 - C6510 * C109 + C6504 * C120 +
            C6512 * C110 - C6513 * C103 - C6512 * C111 + C6505 * C121 +
            C6514 * C112 - C6515 * C104 - C6514 * C113 + C6506 * C122 +
            C6516 * C114 - C6517 * C105 - C6516 * C115 + C82862 * C123) *
               C82864 +
           (C6510 * C1164 - C6511 * C1155 - C6510 * C1165 + C6504 * C1170 +
            C6512 * C1162 - C6513 * C1154 - C6512 * C1163 + C6505 * C1169 +
            C6514 * C1160 - C6515 * C1153 - C6514 * C1161 + C6506 * C1168 +
            C6516 * C1158 - C6517 * C1152 - C6516 * C1159 + C82862 * C1167) *
               C82679) *
              C82581 * C82938 * C82939 * C90 -
          ((C6516 * C1156 - C6517 * C1151 - C6516 * C1157 + C82862 * C1166 +
            C6514 * C1158 - C6515 * C1152 - C6514 * C1159 + C6506 * C1167 +
            C6512 * C1160 - C6513 * C1153 - C6512 * C1161 + C6505 * C1168 +
            C6510 * C1162 - C6511 * C1154 - C6510 * C1163 + C6504 * C1169) *
               C82679 +
           (C6516 * C116 - C6517 * C106 - C6516 * C117 + C82862 * C124 +
            C6514 * C114 - C6515 * C105 - C6514 * C115 + C6506 * C123 +
            C6512 * C112 - C6513 * C104 - C6512 * C113 + C6505 * C122 +
            C6510 * C110 - C6511 * C103 - C6510 * C111 + C6504 * C121) *
               C82864) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C80224 * C108 - C19062 * C102 - C80224 * C109 + C82844 * C120 +
             C80205 * C110 - C19064 * C103 - C80205 * C111 + C82533 * C121) *
                C82864 +
            (C80224 * C1164 - C19062 * C1155 - C80224 * C1165 + C82844 * C1170 +
             C80205 * C1162 - C19064 * C1154 - C80205 * C1163 +
             C82533 * C1169) *
                C82679) *
               C13256 +
           ((C19773 + C19774) * C82864 +
            (C80224 * C3359 - C19062 * C3348 - C80224 * C3360 + C82844 * C3366 +
             C80205 * C3357 - C19064 * C3347 - C80205 * C3358 +
             C82533 * C3365) *
                C82679) *
               C13257 +
           ((C19775 + C19776) * C82864 +
            (C80224 * C3353 - C19062 * C3345 - C80224 * C3354 + C82844 * C3363 +
             C80205 * C3351 - C19064 * C3344 - C80205 * C3352 +
             C82533 * C3362) *
                C82679) *
               C82893) *
              C82938 * C82939 * C90 -
          (((C80205 * C3349 - C19064 * C3343 - C80205 * C3350 + C82533 * C3361 +
             C80224 * C3351 - C19062 * C3344 - C80224 * C3352 +
             C82844 * C3362) *
                C82679 +
            (C80205 * C1661 - C19064 * C1655 - C80205 * C1662 + C82533 * C1667 +
             C80224 * C1659 - C19062 * C1654 - C80224 * C1660 +
             C82844 * C1666) *
                C82864) *
               C82893 +
           ((C80205 * C3355 - C19064 * C3346 - C80205 * C3356 + C82533 * C3364 +
             C80224 * C3357 - C19062 * C3347 - C80224 * C3358 +
             C82844 * C3365) *
                C82679 +
            (C80205 * C700 - C19064 * C693 - C80205 * C701 + C82533 * C708 +
             C80224 * C702 - C19062 * C694 - C80224 * C703 + C82844 * C709) *
                C82864) *
               C13257 +
           ((C80205 * C1160 - C19064 * C1153 - C80205 * C1161 + C82533 * C1168 +
             C80224 * C1162 - C19062 * C1154 - C80224 * C1163 +
             C82844 * C1169) *
                C82679 +
            (C80205 * C112 - C19064 * C104 - C80205 * C113 + C82533 * C122 +
             C80224 * C110 - C19062 * C103 - C80224 * C111 + C82844 * C121) *
                C82864) *
               C13256) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C6510 +
            (C82581 * C175 - C168 * C109) * C6504 + (C182 - C183) * C6512 +
            (C184 - C185) * C6505 + (C186 - C187) * C6514 +
            (C188 - C189) * C6506 + (C190 - C191) * C6516 +
            (C192 - C193) * C82862) *
               C82864 +
           ((C5823 - C5824) * C6510 + (C5825 - C5826) * C6504 +
            (C4207 - C4208) * C6512 + (C4209 - C4210) * C6505 +
            (C4211 - C4212) * C6514 + (C4213 - C4214) * C6506 +
            (C8538 - C8539) * C6516 + (C8540 - C8541) * C82862) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C183 - C182) * C6510 + (C185 - C184) * C6504 +
            (C187 - C186) * C6512 + (C189 - C188) * C6505 +
            (C191 - C190) * C6514 + (C193 - C192) * C6506 +
            (C195 - C194) * C6516 + (C197 - C196) * C82862) *
               C82864 +
           ((C4208 - C4207) * C6510 + (C4210 - C4209) * C6504 +
            (C4212 - C4211) * C6512 + (C4214 - C4213) * C6505 +
            (C8539 - C8538) * C6514 + (C8541 - C8540) * C6506 +
            (C168 * C1151 - C82581 * C1217) * C6516 +
            (C168 * C1157 - C82581 * C1222) * C82862) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C80224 +
            (C13256 * C175 - C13339 * C109 + C13257 * C758 - C13340 * C705 +
             C82893 * C1750 - C13341 * C1658) *
                C82844 +
            (C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C80205 +
            (C13349 - C13350 + C13351 - C13352 + C13353 - C13354) * C82533) *
               C82864 +
           ((C18362 - C18363 + C18364 - C18365 + C18366 - C18367) * C80224 +
            (C18368 - C18369 + C18370 - C18371 + C18372 - C18373) * C82844 +
            (C21149 - C21150 + C21151 - C21152 + C21153 - C21154) * C80205 +
            (C21155 - C21156 + C21157 - C21158 + C21159 - C21160) * C82533) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C13344 - C13343 + C13346 - C13345 + C13348 - C13347) * C80224 +
            (C13350 - C13349 + C13352 - C13351 + C13354 - C13353) * C82844 +
            (C13356 - C13355 + C13358 - C13357 + C13360 - C13359) * C80205 +
            (C13362 - C13361 + C13364 - C13363 + C13366 - C13365) * C82533) *
               C82864 +
           ((C21150 - C21149 + C21152 - C21151 + C21154 - C21153) * C80224 +
            (C21156 - C21155 + C21158 - C21157 + C21160 - C21159) * C82844 +
            (C13339 * C1153 - C13256 * C1215 + C13340 * C3346 - C13257 * C3445 +
             C13341 * C3343 - C82893 * C3446) *
                C80205 +
            (C13339 * C1161 - C13256 * C1220 + C13340 * C3356 - C13257 * C3451 +
             C13341 * C3350 - C82893 * C3452) *
                C82533) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
               C6510 +
           (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
               C6504 +
           (C8610 - C8611 + C8612 - C8613) * C6512 +
           (C8614 - C8615 + C8616 - C8617) * C6505 +
           (C8618 - C8619 + C8620 - C8621) * C6514 +
           (C8622 - C8623 + C8624 - C8625) * C6506 +
           (C8626 - C8627 + C8628 - C8629) * C6516 +
           (C8630 - C8631 + C8632 - C8633) * C82862) *
              C82581 * C82938 * C82939 * C90 +
          ((C8611 - C8610 + C8613 - C8612) * C6510 +
           (C8615 - C8614 + C8617 - C8616) * C6504 +
           (C8619 - C8618 + C8621 - C8620) * C6512 +
           (C8623 - C8622 + C8625 - C8624) * C6505 +
           (C8627 - C8626 + C8629 - C8628) * C6514 +
           (C8631 - C8630 + C8633 - C8632) * C6506 +
           (C8607 * C106 - C82864 * C244 + C8608 * C1151 - C82679 * C1269) *
               C6516 +
           (C8607 * C117 - C82864 * C250 + C8608 * C1157 - C82679 * C1274) *
               C82862) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C80224 +
            (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
                C82844 +
            (C8610 - C8611 + C8612 - C8613) * C80205 +
            (C8614 - C8615 + C8616 - C8617) * C82533) *
               C13256 +
           ((C11640 - C11641 + C11642 - C11643) * C80224 +
            (C11644 - C11645 + C11646 - C11647) * C82844 +
            (C10649 - C10650 + C10651 - C10652) * C80205 +
            (C10653 - C10654 + C10655 - C10656) * C82533) *
               C13257 +
           ((C82864 * C1852 - C8607 * C1653 + C82679 * C3530 - C8608 * C3345) *
                C80224 +
            (C82864 * C1856 - C8607 * C1658 + C82679 * C3536 - C8608 * C3354) *
                C82844 +
            (C21259 - C21260 + C21261 - C21262) * C80205 +
            (C21263 - C21264 + C21265 - C21266) * C82533) *
               C82893) *
              C82938 * C82939 * C90 +
          (((C8611 - C8610 + C8613 - C8612) * C80224 +
            (C8615 - C8614 + C8617 - C8616) * C82844 +
            (C8619 - C8618 + C8621 - C8620) * C80205 +
            (C8623 - C8622 + C8625 - C8624) * C82533) *
               C13256 +
           ((C10650 - C10649 + C10652 - C10651) * C80224 +
            (C10654 - C10653 + C10656 - C10655) * C82844 +
            (C10658 - C10657 + C10660 - C10659) * C80205 +
            (C10662 - C10661 + C10664 - C10663) * C82533) *
               C13257 +
           ((C21260 - C21259 + C21262 - C21261) * C80224 +
            (C21264 - C21263 + C21266 - C21265) * C82844 +
            (C8607 * C1655 - C82864 * C1854 + C8608 * C3343 - C82679 * C3532) *
                C80205 +
            (C8607 * C1662 - C82864 * C1858 + C8608 * C3350 - C82679 * C3538) *
                C82533) *
               C82893) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6504 * C108 - C6510 * C102 + C6505 * C110 - C6512 * C103 +
             C6506 * C112 - C6514 * C104 + C82862 * C114 - C6516 * C105) *
                C168 +
            (C6504 * C316 - C6510 * C310 + C6505 * C317 - C6512 * C311 +
             C6506 * C318 - C6514 * C312 + C82862 * C319 - C6516 * C313) *
                C82581) *
               C82864 +
           ((C6504 * C1164 - C6510 * C1155 + C6505 * C1162 - C6512 * C1154 +
             C6506 * C1160 - C6514 * C1153 + C82862 * C1158 - C6516 * C1152) *
                C168 +
            (C6504 * C1322 - C6510 * C1317 + C6505 * C1323 - C6512 * C1318 +
             C6506 * C1324 - C6514 * C1319 + C82862 * C1325 - C6516 * C1320) *
                C82581) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C6510 * C103 - C6504 * C110 + C6512 * C104 - C6505 * C112 +
             C6514 * C105 - C6506 * C114 + C6516 * C106 - C82862 * C116) *
                C168 +
            (C6510 * C311 - C6504 * C317 + C6512 * C312 - C6505 * C318 +
             C6514 * C313 - C6506 * C319 + C6516 * C314 - C82862 * C320) *
                C82581) *
               C82864 +
           ((C6510 * C1154 - C6504 * C1162 + C6512 * C1153 - C6505 * C1160 +
             C6514 * C1152 - C6506 * C1158 + C6516 * C1151 - C82862 * C1156) *
                C168 +
            (C6510 * C1318 - C6504 * C1323 + C6512 * C1319 - C6505 * C1324 +
             C6514 * C1320 - C6506 * C1325 + C6516 * C1321 - C82862 * C1326) *
                C82581) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C13339 +
            (C82844 * C316 - C80224 * C310 + C82533 * C317 - C80205 * C311) *
                C13256 +
            (C19977 - C19978 + C19979 - C19980) * C13340 +
            (C19981 - C19982 + C19983 - C19984) * C13257 +
            (C19985 - C19986 + C19987 - C19988) * C13341 +
            (C19989 - C19990 + C19991 - C19992) * C82893) *
               C82864 +
           ((C82844 * C1164 - C80224 * C1155 + C82533 * C1162 -
             C80205 * C1154) *
                C13339 +
            (C82844 * C1322 - C80224 * C1317 + C82533 * C1323 -
             C80205 * C1318) *
                C13256 +
            (C82844 * C3359 - C80224 * C3348 + C82533 * C3357 -
             C80205 * C3347) *
                C13340 +
            (C82844 * C3619 - C80224 * C3613 + C82533 * C3620 -
             C80205 * C3614) *
                C13257 +
            (C82844 * C3353 - C80224 * C3345 + C82533 * C3351 -
             C80205 * C3344) *
                C13341 +
            (C82844 * C3622 - C80224 * C3616 + C82533 * C3623 -
             C80205 * C3617) *
                C82893) *
               C82679) *
              C82938 * C82939 * C90 +
          (((C80224 * C103 - C82844 * C110 + C80205 * C104 - C82533 * C112) *
                C13339 +
            (C80224 * C311 - C82844 * C317 + C80205 * C312 - C82533 * C318) *
                C13256 +
            (C80224 * C694 - C82844 * C702 + C80205 * C693 - C82533 * C700) *
                C13340 +
            (C80224 * C858 - C82844 * C863 + C80205 * C859 - C82533 * C864) *
                C13257 +
            (C80224 * C1654 - C82844 * C1659 + C80205 * C1655 -
             C82533 * C1661) *
                C13341 +
            (C80224 * C1951 - C82844 * C1955 + C80205 * C1952 -
             C82533 * C1956) *
                C82893) *
               C82864 +
           ((C80224 * C1154 - C82844 * C1162 + C80205 * C1153 -
             C82533 * C1160) *
                C13339 +
            (C80224 * C1318 - C82844 * C1323 + C80205 * C1319 -
             C82533 * C1324) *
                C13256 +
            (C80224 * C3347 - C82844 * C3357 + C80205 * C3346 -
             C82533 * C3355) *
                C13340 +
            (C80224 * C3614 - C82844 * C3620 + C80205 * C3615 -
             C82533 * C3621) *
                C13257 +
            (C80224 * C3344 - C82844 * C3351 + C80205 * C3343 -
             C82533 * C3349) *
                C13341 +
            (C80224 * C3617 - C82844 * C3623 + C80205 * C3618 -
             C82533 * C3624) *
                C82893) *
               C82679) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C6504 +
            C396 * C6505 + C397 * C6506 + C398 * C82862) *
               C82864 +
           (C6108 * C6504 + C4516 * C6505 + C4517 * C6506 + C8772 * C82862) *
               C82679) *
              C82938 * C82939 * C90 -
          (((C168 * C1217 - C364 * C1151 - C168 * C1321 + C82581 * C1369) *
                C82862 +
            C8772 * C6506 + C4517 * C6505 + C4516 * C6504) *
               C82679 +
           (C399 * C82862 + C398 * C6506 + C397 * C6505 + C396 * C6504) *
               C82864) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13339 * C169 - C13588 * C102 - C13339 * C310 + C13256 * C365 +
             C13340 * C753 - C13589 * C695 - C13340 * C857 + C13257 * C913 +
             C13341 * C1746 - C13590 * C1653 - C13341 * C1950 +
             C82893 * C2035) *
                C82844 +
            (C13628 + C13629 + C13630) * C82533) *
               C82864 +
           ((C18662 + C18663 + C18664) * C82844 +
            (C21481 + C21482 + C21483) * C82533) *
               C82679) *
              C82938 * C82939 * C90 -
          (((C13341 * C3446 - C13590 * C3343 - C13341 * C3618 + C82893 * C3699 +
             C13340 * C3445 - C13589 * C3346 - C13340 * C3615 + C13257 * C3700 +
             C13339 * C1215 - C13588 * C1153 - C13339 * C1319 +
             C13256 * C1371) *
                C82533 +
            (C21483 + C21482 + C21481) * C82844) *
               C82679 +
           ((C13633 + C13632 + C13631) * C82533 +
            (C13630 + C13629 + C13628) * C82844) *
               C82864) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C168 +
            (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
                C82581) *
               C6504 +
           ((C8610 - C8611 + C8612 - C8613) * C168 +
            (C8839 - C8840 + C8841 - C8842) * C82581) *
               C6505 +
           ((C8618 - C8619 + C8620 - C8621) * C168 +
            (C8843 - C8844 + C8845 - C8846) * C82581) *
               C6506 +
           ((C8626 - C8627 + C8628 - C8629) * C168 +
            (C8847 - C8848 + C8849 - C8850) * C82581) *
               C82862) *
              C82938 * C82939 * C90 +
          (((C8611 - C8610 + C8613 - C8612) * C168 +
            (C8840 - C8839 + C8842 - C8841) * C82581) *
               C6504 +
           ((C8619 - C8618 + C8621 - C8620) * C168 +
            (C8844 - C8843 + C8846 - C8845) * C82581) *
               C6505 +
           ((C8627 - C8626 + C8629 - C8628) * C168 +
            (C8848 - C8847 + C8850 - C8849) * C82581) *
               C6506 +
           ((C8607 * C106 - C82864 * C244 + C8608 * C1151 - C82679 * C1269) *
                C168 +
            (C8607 * C314 - C82864 * C445 + C8608 * C1321 - C82679 * C1420) *
                C82581) *
               C82862) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C13339 +
            (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
                C13256 +
            (C11640 - C11641 + C11642 - C11643) * C13340 +
            (C11954 - C11955 + C11956 - C11957) * C13257 +
            (C82864 * C1852 - C8607 * C1653 + C82679 * C3530 - C8608 * C3345) *
                C13341 +
            (C82864 * C2155 - C8607 * C1950 + C82679 * C3780 - C8608 * C3616) *
                C82893) *
               C82844 +
           ((C8610 - C8611 + C8612 - C8613) * C13339 +
            (C8839 - C8840 + C8841 - C8842) * C13256 +
            (C10649 - C10650 + C10651 - C10652) * C13340 +
            (C10987 - C10988 + C10989 - C10990) * C13257 +
            (C21259 - C21260 + C21261 - C21262) * C13341 +
            (C21582 - C21583 + C21584 - C21585) * C82893) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C8611 - C8610 + C8613 - C8612) * C13339 +
            (C8840 - C8839 + C8842 - C8841) * C13256 +
            (C10650 - C10649 + C10652 - C10651) * C13340 +
            (C10988 - C10987 + C10990 - C10989) * C13257 +
            (C21260 - C21259 + C21262 - C21261) * C13341 +
            (C21583 - C21582 + C21585 - C21584) * C82893) *
               C82844 +
           ((C8619 - C8618 + C8621 - C8620) * C13339 +
            (C8844 - C8843 + C8846 - C8845) * C13256 +
            (C10658 - C10657 + C10660 - C10659) * C13340 +
            (C10992 - C10991 + C10994 - C10993) * C13257 +
            (C8607 * C1655 - C82864 * C1854 + C8608 * C3343 - C82679 * C3532) *
                C13341 +
            (C8607 * C1952 - C82864 * C2157 + C8608 * C3618 - C82679 * C3784) *
                C82893) *
               C82533) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezx[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6504 * C108 - C6510 * C102 + C6505 * C110 - C6512 * C103 +
            C6506 * C112 - C6514 * C104 + C82862 * C114 - C6516 * C105) *
               C8607 +
           (C6504 * C503 - C6510 * C497 + C6505 * C504 - C6512 * C498 +
            C6506 * C505 - C6514 * C499 + C82862 * C506 - C6516 * C500) *
               C82864 +
           (C6504 * C1164 - C6510 * C1155 + C6505 * C1162 - C6512 * C1154 +
            C6506 * C1160 - C6514 * C1153 + C82862 * C1158 - C6516 * C1152) *
               C8608 +
           (C6504 * C1468 - C6510 * C1463 + C6505 * C1469 - C6512 * C1464 +
            C6506 * C1470 - C6514 * C1465 + C82862 * C1471 - C6516 * C1466) *
               C82679) *
              C82581 * C82938 * C82939 * C90 +
          ((C6510 * C103 - C6504 * C110 + C6512 * C104 - C6505 * C112 +
            C6514 * C105 - C6506 * C114 + C6516 * C106 - C82862 * C116) *
               C8607 +
           (C6510 * C498 - C6504 * C504 + C6512 * C499 - C6505 * C505 +
            C6514 * C500 - C6506 * C506 + C6516 * C501 - C82862 * C507) *
               C82864 +
           (C6510 * C1154 - C6504 * C1162 + C6512 * C1153 - C6505 * C1160 +
            C6514 * C1152 - C6506 * C1158 + C6516 * C1151 - C82862 * C1156) *
               C8608 +
           (C6510 * C1464 - C6504 * C1469 + C6512 * C1465 - C6505 * C1470 +
            C6514 * C1466 - C6506 * C1471 + C6516 * C1467 - C82862 * C1472) *
               C82679) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C8607 +
            (C82844 * C503 - C80224 * C497 + C82533 * C504 - C80205 * C498) *
                C82864 +
            (C82844 * C1164 - C80224 * C1155 + C82533 * C1162 -
             C80205 * C1154) *
                C8608 +
            (C82844 * C1468 - C80224 * C1463 + C82533 * C1469 -
             C80205 * C1464) *
                C82679) *
               C13256 +
           ((C19977 - C19978 + C19979 - C19980) * C8607 +
            (C20199 - C20200 + C20201 - C20202) * C82864 +
            (C82844 * C3359 - C80224 * C3348 + C82533 * C3357 -
             C80205 * C3347) *
                C8608 +
            (C82844 * C3865 - C80224 * C3859 + C82533 * C3866 -
             C80205 * C3860) *
                C82679) *
               C13257 +
           ((C19985 - C19986 + C19987 - C19988) * C8607 +
            (C20203 - C20204 + C20205 - C20206) * C82864 +
            (C82844 * C3353 - C80224 * C3345 + C82533 * C3351 -
             C80205 * C3344) *
                C8608 +
            (C82844 * C3868 - C80224 * C3862 + C82533 * C3869 -
             C80205 * C3863) *
                C82679) *
               C82893) *
              C82938 * C82939 * C90 +
          (((C80224 * C103 - C82844 * C110 + C80205 * C104 - C82533 * C112) *
                C8607 +
            (C80224 * C498 - C82844 * C504 + C80205 * C499 - C82533 * C505) *
                C82864 +
            (C80224 * C1154 - C82844 * C1162 + C80205 * C1153 -
             C82533 * C1160) *
                C8608 +
            (C80224 * C1464 - C82844 * C1469 + C80205 * C1465 -
             C82533 * C1470) *
                C82679) *
               C13256 +
           ((C80224 * C694 - C82844 * C702 + C80205 * C693 - C82533 * C700) *
                C8607 +
            (C80224 * C1004 - C82844 * C1009 + C80205 * C1005 -
             C82533 * C1010) *
                C82864 +
            (C80224 * C3347 - C82844 * C3357 + C80205 * C3346 -
             C82533 * C3355) *
                C8608 +
            (C80224 * C3860 - C82844 * C3866 + C80205 * C3861 -
             C82533 * C3867) *
                C82679) *
               C13257 +
           ((C80224 * C1654 - C82844 * C1659 + C80205 * C1655 -
             C82533 * C1661) *
                C8607 +
            (C80224 * C2242 - C82844 * C2246 + C80205 * C2243 -
             C82533 * C2247) *
                C82864 +
            (C80224 * C3344 - C82844 * C3351 + C80205 * C3343 -
             C82533 * C3349) *
                C8608 +
            (C80224 * C3863 - C82844 * C3869 + C80205 * C3864 -
             C82533 * C3870) *
                C82679) *
               C82893) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C8607 +
            (C82581 * C551 - C168 * C497) * C82864 + (C5823 - C5824) * C8608 +
            (C6358 - C6359) * C82679) *
               C6504 +
           ((C182 - C183) * C8607 + (C558 - C559) * C82864 +
            (C4207 - C4208) * C8608 + (C4770 - C4771) * C82679) *
               C6505 +
           ((C186 - C187) * C8607 + (C560 - C561) * C82864 +
            (C4211 - C4212) * C8608 + (C4774 - C4775) * C82679) *
               C6506 +
           ((C190 - C191) * C8607 + (C562 - C563) * C82864 +
            (C8538 - C8539) * C8608 + (C8983 - C8984) * C82679) *
               C82862) *
              C82938 * C82939 * C90 +
          (((C183 - C182) * C8607 + (C559 - C558) * C82864 +
            (C4208 - C4207) * C8608 + (C4771 - C4770) * C82679) *
               C6504 +
           ((C187 - C186) * C8607 + (C561 - C560) * C82864 +
            (C4212 - C4211) * C8608 + (C4775 - C4774) * C82679) *
               C6505 +
           ((C191 - C190) * C8607 + (C563 - C562) * C82864 +
            (C8539 - C8538) * C8608 + (C8984 - C8983) * C82679) *
               C6506 +
           ((C195 - C194) * C8607 + (C565 - C564) * C82864 +
            (C168 * C1151 - C82581 * C1217) * C8608 +
            (C168 * C1467 - C82581 * C1519) * C82679) *
               C82862) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C8607 +
            (C13256 * C551 - C13339 * C497 + C13257 * C1055 - C13340 * C1003 +
             C82893 * C2323 - C13341 * C2241) *
                C82864 +
            (C18362 - C18363 + C18364 - C18365 + C18366 - C18367) * C8608 +
            (C18902 - C18903 + C18904 - C18905 + C18906 - C18907) * C82679) *
               C82844 +
           ((C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C8607 +
            (C13856 - C13857 + C13858 - C13859 + C13860 - C13861) * C82864 +
            (C21149 - C21150 + C21151 - C21152 + C21153 - C21154) * C8608 +
            (C21782 - C21783 + C21784 - C21785 + C21786 - C21787) * C82679) *
               C82533) *
              C82938 * C82939 * C90 +
          (((C13344 - C13343 + C13346 - C13345 + C13348 - C13347) * C8607 +
            (C13857 - C13856 + C13859 - C13858 + C13861 - C13860) * C82864 +
            (C21150 - C21149 + C21152 - C21151 + C21154 - C21153) * C8608 +
            (C21783 - C21782 + C21785 - C21784 + C21787 - C21786) * C82679) *
               C82844 +
           ((C13356 - C13355 + C13358 - C13357 + C13360 - C13359) * C8607 +
            (C13863 - C13862 + C13865 - C13864 + C13867 - C13866) * C82864 +
            (C13339 * C1153 - C13256 * C1215 + C13340 * C3346 - C13257 * C3445 +
             C13341 * C3343 - C82893 * C3446) *
                C8608 +
            (C13339 * C1465 - C13256 * C1517 + C13340 * C3861 - C13257 * C3949 +
             C13341 * C3864 - C82893 * C3950) *
                C82679) *
               C82533) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
            C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
               C82581 * C6504 +
           (C9089 + C9090) * C82581 * C6505 + (C9091 + C9092) * C82581 * C6506 +
           (C9093 + C9094) * C82581 * C82862) *
              C82938 * C82939 * C90 -
          ((C8608 * C1269 - C9051 * C1151 - C8608 * C1467 + C82679 * C1562 +
            C8607 * C244 - C9050 * C106 - C8607 * C501 + C82864 * C612) *
               C82581 * C82862 +
           (C9094 + C9093) * C82581 * C6506 + (C9092 + C9091) * C82581 * C6505 +
           (C9090 + C9089) * C82581 * C6504) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
             C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
                C13256 +
            (C12270 + C12271) * C13257 +
            (C8607 * C1852 - C9050 * C1653 - C8607 * C2241 + C82864 * C2413 +
             C8608 * C3530 - C9051 * C3345 - C8608 * C3862 + C82679 * C4029) *
                C82893) *
               C82844 +
           ((C9089 + C9090) * C13256 + (C11321 + C11322) * C13257 +
            (C21898 + C21899) * C82893) *
               C82533) *
              C82938 * C82939 * C90 -
          (((C8608 * C3532 - C9051 * C3343 - C8608 * C3864 + C82679 * C4025 +
             C8607 * C1854 - C9050 * C1655 - C8607 * C2243 + C82864 * C2415) *
                C82893 +
            (C11324 + C11323) * C13257 + (C9092 + C9091) * C13256) *
               C82533 +
           ((C21899 + C21898) * C82893 + (C11322 + C11321) * C13257 +
            (C9090 + C9089) * C13256) *
               C82844) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexx[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6510 * C108 - C6511 * C102 - C6510 * C109 + C6504 * C120 +
            C6512 * C110 - C6513 * C103 - C6512 * C111 + C6505 * C121 +
            C6514 * C112 - C6515 * C104 - C6514 * C113 + C6506 * C122 +
            C6516 * C114 - C6517 * C105 - C6516 * C115 + C82862 * C123) *
               C82864 +
           (C6510 * C1164 - C6511 * C1155 - C6510 * C1165 + C6504 * C1170 +
            C6512 * C1162 - C6513 * C1154 - C6512 * C1163 + C6505 * C1169 +
            C6514 * C1160 - C6515 * C1153 - C6514 * C1161 + C6506 * C1168 +
            C6516 * C1158 - C6517 * C1152 - C6516 * C1159 + C82862 * C1167) *
               C82679) *
              C82581 * C82938 * C688 -
          ((C6516 * C7860 - C6517 * C7859 - C6516 * C7861 + C82862 * C7862 +
            C6514 * C3355 - C6515 * C3346 - C6514 * C3356 + C6506 * C3364 +
            C6512 * C3357 - C6513 * C3347 - C6512 * C3358 + C6505 * C3365 +
            C6510 * C3359 - C6511 * C3348 - C6510 * C3360 + C6504 * C3366) *
               C82679 +
           (C7241 + C7240 + C7239 + C7238) * C82864) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C80224 * C108 - C19062 * C102 - C80224 * C109 + C82844 * C120 +
             C80205 * C110 - C19064 * C103 - C80205 * C111 + C82533 * C121) *
                C82864 +
            (C80224 * C1164 - C19062 * C1155 - C80224 * C1165 + C82844 * C1170 +
             C80205 * C1162 - C19064 * C1154 - C80205 * C1163 +
             C82533 * C1169) *
                C82679) *
               C13256 +
           ((C19773 + C19774) * C82864 + (C22022 + C22023) * C82679) * C13257 +
           ((C19775 + C19776) * C82864 + (C22024 + C22025) * C82679) * C82893) *
              C82938 * C688 -
          (((C80205 * C20409 - C19064 * C20408 - C80205 * C20410 +
             C82533 * C20411 + C80224 * C16307 - C19062 * C16304 -
             C80224 * C16308 + C82844 * C16310) *
                C82679 +
            (C19778 + C19777) * C82864) *
               C82893 +
           ((C22025 + C22024) * C82679 + (C19776 + C19775) * C82864) * C13257 +
           ((C22023 + C22022) * C82679 + (C19774 + C19773) * C82864) * C13256) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C6510 +
            (C82581 * C175 - C168 * C109) * C6504 + (C182 - C183) * C6512 +
            (C184 - C185) * C6505 + (C186 - C187) * C6514 +
            (C188 - C189) * C6506 + (C190 - C191) * C6516 +
            (C192 - C193) * C82862) *
               C82864 +
           ((C5823 - C5824) * C6510 + (C5825 - C5826) * C6504 +
            (C4207 - C4208) * C6512 + (C4209 - C4210) * C6505 +
            (C4211 - C4212) * C6514 + (C4213 - C4214) * C6506 +
            (C8538 - C8539) * C6516 + (C8540 - C8541) * C82862) *
               C82679) *
              C82938 * C688 +
          (((C168 * C695 - C82581 * C753) * C6510 +
            (C168 * C705 - C82581 * C758) * C6504 +
            (C168 * C694 - C82581 * C754) * C6512 +
            (C168 * C703 - C82581 * C759) * C6505 +
            (C168 * C693 - C82581 * C755) * C6514 +
            (C168 * C701 - C82581 * C760) * C6506 +
            (C168 * C692 - C82581 * C756) * C6516 +
            (C168 * C699 - C82581 * C761) * C82862) *
               C82864 +
           ((C168 * C3348 - C82581 * C3441) * C6510 +
            (C168 * C3360 - C82581 * C3447) * C6504 +
            (C168 * C3347 - C82581 * C3443) * C6512 +
            (C168 * C3358 - C82581 * C3449) * C6505 +
            (C168 * C3346 - C82581 * C3445) * C6514 +
            (C168 * C3356 - C82581 * C3451) * C6506 +
            (C168 * C7859 - C82581 * C7929) * C6516 +
            (C168 * C7861 - C82581 * C7930) * C82862) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C80224 +
            (C13256 * C175 - C13339 * C109 + C13257 * C758 - C13340 * C705 +
             C82893 * C1750 - C13341 * C1658) *
                C82844 +
            (C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C80205 +
            (C13349 - C13350 + C13351 - C13352 + C13353 - C13354) * C82533) *
               C82864 +
           ((C18362 - C18363 + C18364 - C18365 + C18366 - C18367) * C80224 +
            (C18368 - C18369 + C18370 - C18371 + C18372 - C18373) * C82844 +
            (C21149 - C21150 + C21151 - C21152 + C21153 - C21154) * C80205 +
            (C21155 - C21156 + C21157 - C21158 + C21159 - C21160) * C82533) *
               C82679) *
              C82938 * C688 +
          (((C13339 * C695 - C13256 * C753 + C13340 * C1653 - C13257 * C1746 +
             C13341 * C2527 - C82893 * C2653) *
                C80224 +
            (C13339 * C705 - C13256 * C758 + C13340 * C1658 - C13257 * C1750 +
             C13341 * C2533 - C82893 * C2656) *
                C82844 +
            (C13339 * C694 - C13256 * C754 + C13340 * C1654 - C13257 * C1747 +
             C13341 * C2526 - C82893 * C2654) *
                C80205 +
            (C13339 * C703 - C13256 * C759 + C13340 * C1660 - C13257 * C1751 +
             C13341 * C2531 - C82893 * C2657) *
                C82533) *
               C82864 +
           ((C13339 * C3348 - C13256 * C3441 + C13340 * C3345 - C13257 * C3442 +
             C13341 * C16304 - C82893 * C16353) *
                C80224 +
            (C13339 * C3360 - C13256 * C3447 + C13340 * C3354 - C13257 * C3448 +
             C13341 * C16308 - C82893 * C16355) *
                C82844 +
            (C13339 * C3347 - C13256 * C3443 + C13340 * C3344 - C13257 * C3444 +
             C13341 * C20408 - C82893 * C20478) *
                C80205 +
            (C13339 * C3358 - C13256 * C3449 + C13340 * C3352 - C13257 * C3450 +
             C13341 * C20410 - C82893 * C20479) *
                C82533) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
               C6510 +
           (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
               C6504 +
           (C8610 - C8611 + C8612 - C8613) * C6512 +
           (C8614 - C8615 + C8616 - C8617) * C6505 +
           (C8618 - C8619 + C8620 - C8621) * C6514 +
           (C8622 - C8623 + C8624 - C8625) * C6506 +
           (C8626 - C8627 + C8628 - C8629) * C6516 +
           (C8630 - C8631 + C8632 - C8633) * C82862) *
              C82581 * C82938 * C688 +
          ((C8607 * C695 - C82864 * C805 + C8608 * C3348 - C82679 * C3527) *
               C6510 +
           (C8607 * C705 - C82864 * C810 + C8608 * C3360 - C82679 * C3533) *
               C6504 +
           (C8607 * C694 - C82864 * C806 + C8608 * C3347 - C82679 * C3528) *
               C6512 +
           (C8607 * C703 - C82864 * C811 + C8608 * C3358 - C82679 * C3534) *
               C6505 +
           (C8607 * C693 - C82864 * C807 + C8608 * C3346 - C82679 * C3529) *
               C6514 +
           (C8607 * C701 - C82864 * C812 + C8608 * C3356 - C82679 * C3535) *
               C6506 +
           (C8607 * C692 - C82864 * C808 + C8608 * C7859 - C82679 * C7997) *
               C6516 +
           (C8607 * C699 - C82864 * C813 + C8608 * C7861 - C82679 * C7998) *
               C82862) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C80224 +
            (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
                C82844 +
            (C8610 - C8611 + C8612 - C8613) * C80205 +
            (C8614 - C8615 + C8616 - C8617) * C82533) *
               C13256 +
           ((C11640 - C11641 + C11642 - C11643) * C80224 +
            (C11644 - C11645 + C11646 - C11647) * C82844 +
            (C10649 - C10650 + C10651 - C10652) * C80205 +
            (C10653 - C10654 + C10655 - C10656) * C82533) *
               C13257 +
           ((C22222 - C22223 + C22224 - C22225) * C80224 +
            (C22226 - C22227 + C22228 - C22229) * C82844 +
            (C21259 - C21260 + C21261 - C21262) * C80205 +
            (C21263 - C21264 + C21265 - C21266) * C82533) *
               C82893) *
              C82938 * C688 +
          (((C11641 - C11640 + C11643 - C11642) * C80224 +
            (C11645 - C11644 + C11647 - C11646) * C82844 +
            (C10650 - C10649 + C10652 - C10651) * C80205 +
            (C10654 - C10653 + C10656 - C10655) * C82533) *
               C13256 +
           ((C22223 - C22222 + C22225 - C22224) * C80224 +
            (C22227 - C22226 + C22229 - C22228) * C82844 +
            (C21260 - C21259 + C21262 - C21261) * C80205 +
            (C21264 - C21263 + C21266 - C21265) * C82533) *
               C13257 +
           ((C8607 * C2527 - C82864 * C2733 + C8608 * C16304 -
             C82679 * C16399) *
                C80224 +
            (C8607 * C2533 - C82864 * C2736 + C8608 * C16308 -
             C82679 * C16401) *
                C82844 +
            (C8607 * C2526 - C82864 * C2734 + C8608 * C20408 -
             C82679 * C20546) *
                C80205 +
            (C8607 * C2531 - C82864 * C2737 + C8608 * C20410 -
             C82679 * C20547) *
                C82533) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6504 * C108 - C6510 * C102 + C6505 * C110 - C6512 * C103 +
             C6506 * C112 - C6514 * C104 + C82862 * C114 - C6516 * C105) *
                C168 +
            (C6504 * C316 - C6510 * C310 + C6505 * C317 - C6512 * C311 +
             C6506 * C318 - C6514 * C312 + C82862 * C319 - C6516 * C313) *
                C82581) *
               C82864 +
           ((C6504 * C1164 - C6510 * C1155 + C6505 * C1162 - C6512 * C1154 +
             C6506 * C1160 - C6514 * C1153 + C82862 * C1158 - C6516 * C1152) *
                C168 +
            (C6504 * C1322 - C6510 * C1317 + C6505 * C1323 - C6512 * C1318 +
             C6506 * C1324 - C6514 * C1319 + C82862 * C1325 - C6516 * C1320) *
                C82581) *
               C82679) *
              C82938 * C688 +
          (((C7441 - C7440 + C7443 - C7442 + C7445 - C7444 + C7447 - C7446) *
                C168 +
            (C7449 - C7448 + C7451 - C7450 + C7453 - C7452 + C7455 - C7454) *
                C82581) *
               C82864 +
           ((C6510 * C3348 - C6504 * C3359 + C6512 * C3347 - C6505 * C3357 +
             C6514 * C3346 - C6506 * C3355 + C6516 * C7859 - C82862 * C7860) *
                C168 +
            (C6510 * C3613 - C6504 * C3619 + C6512 * C3614 - C6505 * C3620 +
             C6514 * C3615 - C6506 * C3621 + C6516 * C8065 - C82862 * C8066) *
                C82581) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C13339 +
            (C82844 * C316 - C80224 * C310 + C82533 * C317 - C80205 * C311) *
                C13256 +
            (C19977 - C19978 + C19979 - C19980) * C13340 +
            (C19981 - C19982 + C19983 - C19984) * C13257 +
            (C19985 - C19986 + C19987 - C19988) * C13341 +
            (C19989 - C19990 + C19991 - C19992) * C82893) *
               C82864 +
           ((C82844 * C1164 - C80224 * C1155 + C82533 * C1162 -
             C80205 * C1154) *
                C13339 +
            (C82844 * C1322 - C80224 * C1317 + C82533 * C1323 -
             C80205 * C1318) *
                C13256 +
            (C22328 - C22329 + C22330 - C22331) * C13340 +
            (C22332 - C22333 + C22334 - C22335) * C13257 +
            (C22336 - C22337 + C22338 - C22339) * C13341 +
            (C22340 - C22341 + C22342 - C22343) * C82893) *
               C82679) *
              C82938 * C688 +
          (((C19978 - C19977 + C19980 - C19979) * C13339 +
            (C19982 - C19981 + C19984 - C19983) * C13256 +
            (C19986 - C19985 + C19988 - C19987) * C13340 +
            (C19990 - C19989 + C19992 - C19991) * C13257 +
            (C19994 - C19993 + C19996 - C19995) * C13341 +
            (C19998 - C19997 + C20000 - C19999) * C82893) *
               C82864 +
           ((C22329 - C22328 + C22331 - C22330) * C13339 +
            (C22333 - C22332 + C22335 - C22334) * C13256 +
            (C22337 - C22336 + C22339 - C22338) * C13340 +
            (C22341 - C22340 + C22343 - C22342) * C13257 +
            (C80224 * C16304 - C82844 * C16307 + C80205 * C20408 -
             C82533 * C20409) *
                C13341 +
            (C80224 * C16445 - C82844 * C16447 + C80205 * C20614 -
             C82533 * C20615) *
                C82893) *
               C82679) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C6504 +
            C396 * C6505 + C397 * C6506 + C398 * C82862) *
               C82864 +
           (C6108 * C6504 + C4516 * C6505 + C4517 * C6506 + C8772 * C82862) *
               C82679) *
              C82938 * C688 -
          (((C168 * C7929 - C364 * C7859 - C168 * C8065 + C82581 * C8133) *
                C82862 +
            (C168 * C3445 - C364 * C3346 - C168 * C3615 + C82581 * C3700) *
                C6506 +
            (C168 * C3443 - C364 * C3347 - C168 * C3614 + C82581 * C3702) *
                C6505 +
            (C168 * C3441 - C364 * C3348 - C168 * C3613 + C82581 * C3704) *
                C6504) *
               C82679 +
           ((C168 * C756 - C364 * C692 - C168 * C860 + C82581 * C910) * C82862 +
            (C168 * C755 - C364 * C693 - C168 * C859 + C82581 * C911) * C6506 +
            (C168 * C754 - C364 * C694 - C168 * C858 + C82581 * C912) * C6505 +
            (C168 * C753 - C364 * C695 - C168 * C857 + C82581 * C913) * C6504) *
               C82864) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13339 * C169 - C13588 * C102 - C13339 * C310 + C13256 * C365 +
             C13340 * C753 - C13589 * C695 - C13340 * C857 + C13257 * C913 +
             C13341 * C1746 - C13590 * C1653 - C13341 * C1950 +
             C82893 * C2035) *
                C82844 +
            (C13628 + C13629 + C13630) * C82533) *
               C82864 +
           ((C18662 + C18663 + C18664) * C82844 +
            (C21481 + C21482 + C21483) * C82533) *
               C82679) *
              C82938 * C688 -
          (((C13341 * C20478 - C13590 * C20408 - C13341 * C20614 +
             C82893 * C20682 + C13340 * C3444 - C13589 * C3344 -
             C13340 * C3617 + C13257 * C3701 + C13339 * C3443 - C13588 * C3347 -
             C13339 * C3614 + C13256 * C3702) *
                C82533 +
            (C13341 * C16353 - C13590 * C16304 - C13341 * C16445 +
             C82893 * C16492 + C13340 * C3442 - C13589 * C3345 -
             C13340 * C3616 + C13257 * C3703 + C13339 * C3441 - C13588 * C3348 -
             C13339 * C3613 + C13256 * C3704) *
                C82844) *
               C82679 +
           ((C13341 * C2654 - C13590 * C2526 - C13341 * C2822 + C82893 * C2926 +
             C13340 * C1747 - C13589 * C1654 - C13340 * C1951 + C13257 * C2036 +
             C13339 * C754 - C13588 * C694 - C13339 * C858 + C13256 * C912) *
                C82533 +
            (C13341 * C2653 - C13590 * C2527 - C13341 * C2821 + C82893 * C2927 +
             C13340 * C1746 - C13589 * C1653 - C13340 * C1950 + C13257 * C2035 +
             C13339 * C753 - C13588 * C695 - C13339 * C857 + C13256 * C913) *
                C82844) *
               C82864) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C168 +
            (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
                C82581) *
               C6504 +
           ((C8610 - C8611 + C8612 - C8613) * C168 +
            (C8839 - C8840 + C8841 - C8842) * C82581) *
               C6505 +
           ((C8618 - C8619 + C8620 - C8621) * C168 +
            (C8843 - C8844 + C8845 - C8846) * C82581) *
               C6506 +
           ((C8626 - C8627 + C8628 - C8629) * C168 +
            (C8847 - C8848 + C8849 - C8850) * C82581) *
               C82862) *
              C82938 * C688 +
          (((C8607 * C695 - C82864 * C805 + C8608 * C3348 - C82679 * C3527) *
                C168 +
            (C8607 * C857 - C82864 * C956 + C8608 * C3613 - C82679 * C3779) *
                C82581) *
               C6504 +
           ((C8607 * C694 - C82864 * C806 + C8608 * C3347 - C82679 * C3528) *
                C168 +
            (C8607 * C858 - C82864 * C957 + C8608 * C3614 - C82679 * C3781) *
                C82581) *
               C6505 +
           ((C8607 * C693 - C82864 * C807 + C8608 * C3346 - C82679 * C3529) *
                C168 +
            (C8607 * C859 - C82864 * C958 + C8608 * C3615 - C82679 * C3783) *
                C82581) *
               C6506 +
           ((C8607 * C692 - C82864 * C808 + C8608 * C7859 - C82679 * C7997) *
                C168 +
            (C8607 * C860 - C82864 * C959 + C8608 * C8065 - C82679 * C8200) *
                C82581) *
               C82862) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C13339 +
            (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
                C13256 +
            (C11640 - C11641 + C11642 - C11643) * C13340 +
            (C11954 - C11955 + C11956 - C11957) * C13257 +
            (C22222 - C22223 + C22224 - C22225) * C13341 +
            (C22540 - C22541 + C22542 - C22543) * C82893) *
               C82844 +
           ((C8610 - C8611 + C8612 - C8613) * C13339 +
            (C8839 - C8840 + C8841 - C8842) * C13256 +
            (C10649 - C10650 + C10651 - C10652) * C13340 +
            (C10987 - C10988 + C10989 - C10990) * C13257 +
            (C21259 - C21260 + C21261 - C21262) * C13341 +
            (C21582 - C21583 + C21584 - C21585) * C82893) *
               C82533) *
              C82938 * C688 +
          (((C11641 - C11640 + C11643 - C11642) * C13339 +
            (C11955 - C11954 + C11957 - C11956) * C13256 +
            (C22223 - C22222 + C22225 - C22224) * C13340 +
            (C22541 - C22540 + C22543 - C22542) * C13257 +
            (C8607 * C2527 - C82864 * C2733 + C8608 * C16304 -
             C82679 * C16399) *
                C13341 +
            (C8607 * C2821 - C82864 * C3002 + C8608 * C16445 -
             C82679 * C16535) *
                C82893) *
               C82844 +
           ((C10650 - C10649 + C10652 - C10651) * C13339 +
            (C10988 - C10987 + C10990 - C10989) * C13256 +
            (C21260 - C21259 + C21262 - C21261) * C13340 +
            (C21583 - C21582 + C21585 - C21584) * C13257 +
            (C8607 * C2526 - C82864 * C2734 + C8608 * C20408 -
             C82679 * C20546) *
                C13341 +
            (C8607 * C2822 - C82864 * C3003 + C8608 * C20614 -
             C82679 * C20749) *
                C82893) *
               C82533) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezx[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6504 * C108 - C6510 * C102 + C6505 * C110 - C6512 * C103 +
            C6506 * C112 - C6514 * C104 + C82862 * C114 - C6516 * C105) *
               C8607 +
           (C6504 * C503 - C6510 * C497 + C6505 * C504 - C6512 * C498 +
            C6506 * C505 - C6514 * C499 + C82862 * C506 - C6516 * C500) *
               C82864 +
           (C6504 * C1164 - C6510 * C1155 + C6505 * C1162 - C6512 * C1154 +
            C6506 * C1160 - C6514 * C1153 + C82862 * C1158 - C6516 * C1152) *
               C8608 +
           (C6504 * C1468 - C6510 * C1463 + C6505 * C1469 - C6512 * C1464 +
            C6506 * C1470 - C6514 * C1465 + C82862 * C1471 - C6516 * C1466) *
               C82679) *
              C82581 * C82938 * C688 +
          ((C7441 - C7440 + C7443 - C7442 + C7445 - C7444 + C7447 - C7446) *
               C8607 +
           (C7655 - C7654 + C7657 - C7656 + C7659 - C7658 + C7661 - C7660) *
               C82864 +
           (C6510 * C3348 - C6504 * C3359 + C6512 * C3347 - C6505 * C3357 +
            C6514 * C3346 - C6506 * C3355 + C6516 * C7859 - C82862 * C7860) *
               C8608 +
           (C6510 * C3859 - C6504 * C3865 + C6512 * C3860 - C6505 * C3866 +
            C6514 * C3861 - C6506 * C3867 + C6516 * C8267 - C82862 * C8268) *
               C82679) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C8607 +
            (C82844 * C503 - C80224 * C497 + C82533 * C504 - C80205 * C498) *
                C82864 +
            (C82844 * C1164 - C80224 * C1155 + C82533 * C1162 -
             C80205 * C1154) *
                C8608 +
            (C82844 * C1468 - C80224 * C1463 + C82533 * C1469 -
             C80205 * C1464) *
                C82679) *
               C13256 +
           ((C19977 - C19978 + C19979 - C19980) * C8607 +
            (C20199 - C20200 + C20201 - C20202) * C82864 +
            (C22328 - C22329 + C22330 - C22331) * C8608 +
            (C22642 - C22643 + C22644 - C22645) * C82679) *
               C13257 +
           ((C19985 - C19986 + C19987 - C19988) * C8607 +
            (C20203 - C20204 + C20205 - C20206) * C82864 +
            (C22336 - C22337 + C22338 - C22339) * C8608 +
            (C22646 - C22647 + C22648 - C22649) * C82679) *
               C82893) *
              C82938 * C688 +
          (((C19978 - C19977 + C19980 - C19979) * C8607 +
            (C20200 - C20199 + C20202 - C20201) * C82864 +
            (C22329 - C22328 + C22331 - C22330) * C8608 +
            (C22643 - C22642 + C22645 - C22644) * C82679) *
               C13256 +
           ((C19986 - C19985 + C19988 - C19987) * C8607 +
            (C20204 - C20203 + C20206 - C20205) * C82864 +
            (C22337 - C22336 + C22339 - C22338) * C8608 +
            (C22647 - C22646 + C22649 - C22648) * C82679) *
               C13257 +
           ((C19994 - C19993 + C19996 - C19995) * C8607 +
            (C20208 - C20207 + C20210 - C20209) * C82864 +
            (C80224 * C16304 - C82844 * C16307 + C80205 * C20408 -
             C82533 * C20409) *
                C8608 +
            (C80224 * C16579 - C82844 * C16581 + C80205 * C20816 -
             C82533 * C20817) *
                C82679) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C8607 +
            (C82581 * C551 - C168 * C497) * C82864 + (C5823 - C5824) * C8608 +
            (C6358 - C6359) * C82679) *
               C6504 +
           ((C182 - C183) * C8607 + (C558 - C559) * C82864 +
            (C4207 - C4208) * C8608 + (C4770 - C4771) * C82679) *
               C6505 +
           ((C186 - C187) * C8607 + (C560 - C561) * C82864 +
            (C4211 - C4212) * C8608 + (C4774 - C4775) * C82679) *
               C6506 +
           ((C190 - C191) * C8607 + (C562 - C563) * C82864 +
            (C8538 - C8539) * C8608 + (C8983 - C8984) * C82679) *
               C82862) *
              C82938 * C688 +
          (((C168 * C695 - C82581 * C753) * C8607 +
            (C168 * C1003 - C82581 * C1055) * C82864 +
            (C168 * C3348 - C82581 * C3441) * C8608 +
            (C168 * C3859 - C82581 * C3945) * C82679) *
               C6504 +
           ((C168 * C694 - C82581 * C754) * C8607 +
            (C168 * C1004 - C82581 * C1056) * C82864 +
            (C168 * C3347 - C82581 * C3443) * C8608 +
            (C168 * C3860 - C82581 * C3947) * C82679) *
               C6505 +
           ((C168 * C693 - C82581 * C755) * C8607 +
            (C168 * C1005 - C82581 * C1057) * C82864 +
            (C168 * C3346 - C82581 * C3445) * C8608 +
            (C168 * C3861 - C82581 * C3949) * C82679) *
               C6506 +
           ((C168 * C692 - C82581 * C756) * C8607 +
            (C168 * C1006 - C82581 * C1058) * C82864 +
            (C168 * C7859 - C82581 * C7929) * C8608 +
            (C168 * C8267 - C82581 * C8335) * C82679) *
               C82862) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C8607 +
            (C13256 * C551 - C13339 * C497 + C13257 * C1055 - C13340 * C1003 +
             C82893 * C2323 - C13341 * C2241) *
                C82864 +
            (C18362 - C18363 + C18364 - C18365 + C18366 - C18367) * C8608 +
            (C18902 - C18903 + C18904 - C18905 + C18906 - C18907) * C82679) *
               C82844 +
           ((C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C8607 +
            (C13856 - C13857 + C13858 - C13859 + C13860 - C13861) * C82864 +
            (C21149 - C21150 + C21151 - C21152 + C21153 - C21154) * C8608 +
            (C21782 - C21783 + C21784 - C21785 + C21786 - C21787) * C82679) *
               C82533) *
              C82938 * C688 +
          (((C13339 * C695 - C13256 * C753 + C13340 * C1653 - C13257 * C1746 +
             C13341 * C2527 - C82893 * C2653) *
                C8607 +
            (C13339 * C1003 - C13256 * C1055 + C13340 * C2241 - C13257 * C2323 +
             C13341 * C3083 - C82893 * C3175) *
                C82864 +
            (C13339 * C3348 - C13256 * C3441 + C13340 * C3345 - C13257 * C3442 +
             C13341 * C16304 - C82893 * C16353) *
                C8608 +
            (C13339 * C3859 - C13256 * C3945 + C13340 * C3862 - C13257 * C3946 +
             C13341 * C16579 - C82893 * C16625) *
                C82679) *
               C82844 +
           ((C13339 * C694 - C13256 * C754 + C13340 * C1654 - C13257 * C1747 +
             C13341 * C2526 - C82893 * C2654) *
                C8607 +
            (C13339 * C1004 - C13256 * C1056 + C13340 * C2242 - C13257 * C2324 +
             C13341 * C3084 - C82893 * C3176) *
                C82864 +
            (C13339 * C3347 - C13256 * C3443 + C13340 * C3344 - C13257 * C3444 +
             C13341 * C20408 - C82893 * C20478) *
                C8608 +
            (C13339 * C3860 - C13256 * C3947 + C13340 * C3863 - C13257 * C3948 +
             C13341 * C20816 - C82893 * C20884) *
                C82679) *
               C82533) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
            C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
               C82581 * C6504 +
           (C9089 + C9090) * C82581 * C6505 + (C9091 + C9092) * C82581 * C6506 +
           (C9093 + C9094) * C82581 * C82862) *
              C82938 * C688 -
          ((C8608 * C7997 - C9051 * C7859 - C8608 * C8267 + C82679 * C8402 +
            C8607 * C808 - C9050 * C692 - C8607 * C1006 + C82864 * C1103) *
               C82581 * C82862 +
           (C8608 * C3529 - C9051 * C3346 - C8608 * C3861 + C82679 * C4026 +
            C8607 * C807 - C9050 * C693 - C8607 * C1005 + C82864 * C1104) *
               C82581 * C6506 +
           (C8608 * C3528 - C9051 * C3347 - C8608 * C3860 + C82679 * C4028 +
            C8607 * C806 - C9050 * C694 - C8607 * C1004 + C82864 * C1105) *
               C82581 * C6505 +
           (C8608 * C3527 - C9051 * C3348 - C8608 * C3859 + C82679 * C4030 +
            C8607 * C805 - C9050 * C695 - C8607 * C1003 + C82864 * C1106) *
               C82581 * C6504) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
             C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
                C13256 +
            (C12270 + C12271) * C13257 + (C22858 + C22859) * C82893) *
               C82844 +
           ((C9089 + C9090) * C13256 + (C11321 + C11322) * C13257 +
            (C21898 + C21899) * C82893) *
               C82533) *
              C82938 * C688 -
          (((C8608 * C20546 - C9051 * C20408 - C8608 * C20816 +
             C82679 * C20951 + C8607 * C2734 - C9050 * C2526 - C8607 * C3084 +
             C82864 * C3253) *
                C82893 +
            (C21899 + C21898) * C13257 + (C11322 + C11321) * C13256) *
               C82533 +
           ((C8608 * C16399 - C9051 * C16304 - C8608 * C16579 +
             C82679 * C16670 + C8607 * C2733 - C9050 * C2527 - C8607 * C3083 +
             C82864 * C3254) *
                C82893 +
            (C22859 + C22858) * C13257 + (C12271 + C12270) * C13256) *
               C82844) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6510 * C108 - C6511 * C102 - C6510 * C109 + C6504 * C120 +
            C6512 * C110 - C6513 * C103 - C6512 * C111 + C6505 * C121 +
            C6514 * C112 - C6515 * C104 - C6514 * C113 + C6506 * C122 +
            C6516 * C114 - C6517 * C105 - C6516 * C115 + C82862 * C123) *
               C82864 +
           (C9779 + C9780 + C9781 + C9782) * C82679) *
              C82581 * C1149 -
          ((C6516 * C4118 - C6517 * C4111 - C6516 * C4119 + C82862 * C4123 +
            C6514 * C4116 - C6515 * C4110 - C6514 * C4117 + C6506 * C4122 +
            C6512 * C4114 - C6513 * C4109 - C6512 * C4115 + C6505 * C4121 +
            C6510 * C4112 - C6511 * C4108 - C6510 * C4113 + C6504 * C4120) *
               C82679 +
           (C9782 + C9781 + C9780 + C9779) * C82864) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C80224 * C108 - C19062 * C102 - C80224 * C109 + C82844 * C120 +
             C80205 * C110 - C19064 * C103 - C80205 * C111 + C82533 * C121) *
                C82864 +
            (C22970 + C22971) * C82679) *
               C13256 +
           ((C19773 + C19774) * C82864 + (C22022 + C22023) * C82679) * C13257 +
           ((C19775 + C19776) * C82864 + (C22024 + C22025) * C82679) * C82893) *
              C1149 -
          (((C80205 * C16749 - C19064 * C16746 - C80205 * C16750 +
             C82533 * C16752 + C80224 * C16747 - C19062 * C16745 -
             C80224 * C16748 + C82844 * C16751) *
                C82679 +
            (C22025 + C22024) * C82864) *
               C82893 +
           ((C80205 * C4979 - C19064 * C4975 - C80205 * C4980 + C82533 * C4984 +
             C80224 * C4981 - C19062 * C4976 - C80224 * C4982 +
             C82844 * C4985) *
                C82679 +
            (C22023 + C22022) * C82864) *
               C13257 +
           ((C80205 * C4114 - C19064 * C4109 - C80205 * C4115 + C82533 * C4121 +
             C80224 * C4112 - C19062 * C4108 - C80224 * C4113 +
             C82844 * C4120) *
                C82679 +
            (C22971 + C22970) * C82864) *
               C13256) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C6510 +
            (C82581 * C175 - C168 * C109) * C6504 + (C182 - C183) * C6512 +
            (C184 - C185) * C6505 + (C186 - C187) * C6514 +
            (C188 - C189) * C6506 + (C190 - C191) * C6516 +
            (C192 - C193) * C82862) *
               C82864 +
           ((C5823 - C5824) * C6510 + (C5825 - C5826) * C6504 +
            (C4207 - C4208) * C6512 + (C4209 - C4210) * C6505 +
            (C4211 - C4212) * C6514 + (C4213 - C4214) * C6506 +
            (C8538 - C8539) * C6516 + (C8540 - C8541) * C82862) *
               C82679) *
              C1149 +
          (((C5824 - C5823) * C6510 + (C5826 - C5825) * C6504 +
            (C4208 - C4207) * C6512 + (C4210 - C4209) * C6505 +
            (C4212 - C4211) * C6514 + (C4214 - C4213) * C6506 +
            (C8539 - C8538) * C6516 + (C8541 - C8540) * C82862) *
               C82864 +
           ((C5828 - C5827) * C6510 + (C5830 - C5829) * C6504 +
            (C4216 - C4215) * C6512 + (C4218 - C4217) * C6505 +
            (C4220 - C4219) * C6514 + (C4222 - C4221) * C6506 +
            (C168 * C4111 - C82581 * C4201) * C6516 +
            (C168 * C4119 - C82581 * C4205) * C82862) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C80224 +
            (C13256 * C175 - C13339 * C109 + C13257 * C758 - C13340 * C705 +
             C82893 * C1750 - C13341 * C1658) *
                C82844 +
            (C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C80205 +
            (C13349 - C13350 + C13351 - C13352 + C13353 - C13354) * C82533) *
               C82864 +
           ((C18362 - C18363 + C18364 - C18365 + C18366 - C18367) * C80224 +
            (C18368 - C18369 + C18370 - C18371 + C18372 - C18373) * C82844 +
            (C21149 - C21150 + C21151 - C21152 + C21153 - C21154) * C80205 +
            (C21155 - C21156 + C21157 - C21158 + C21159 - C21160) * C82533) *
               C82679) *
              C1149 +
          (((C18363 - C18362 + C18365 - C18364 + C18367 - C18366) * C80224 +
            (C18369 - C18368 + C18371 - C18370 + C18373 - C18372) * C82844 +
            (C21150 - C21149 + C21152 - C21151 + C21154 - C21153) * C80205 +
            (C21156 - C21155 + C21158 - C21157 + C21160 - C21159) * C82533) *
               C82864 +
           ((C18375 - C18374 + C18377 - C18376 + C18379 - C18378) * C80224 +
            (C18381 - C18380 + C18383 - C18382 + C18385 - C18384) * C82844 +
            (C13339 * C4109 - C13256 * C4199 + C13340 * C4975 - C13257 * C5061 +
             C13341 * C16746 - C82893 * C16828) *
                C80205 +
            (C13339 * C4115 - C13256 * C4203 + C13340 * C4980 - C13257 * C5064 +
             C13341 * C16750 - C82893 * C16830) *
                C82533) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
               C6510 +
           (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
               C6504 +
           (C8610 - C8611 + C8612 - C8613) * C6512 +
           (C8614 - C8615 + C8616 - C8617) * C6505 +
           (C8618 - C8619 + C8620 - C8621) * C6514 +
           (C8622 - C8623 + C8624 - C8625) * C6506 +
           (C8626 - C8627 + C8628 - C8629) * C6516 +
           (C8630 - C8631 + C8632 - C8633) * C82862) *
              C82581 * C1149 +
          ((C8607 * C1155 - C82864 * C1265 + C8608 * C4108 - C82679 * C4299) *
               C6510 +
           (C8607 * C1165 - C82864 * C1270 + C8608 * C4113 - C82679 * C4303) *
               C6504 +
           (C8607 * C1154 - C82864 * C1266 + C8608 * C4109 - C82679 * C4300) *
               C6512 +
           (C8607 * C1163 - C82864 * C1271 + C8608 * C4115 - C82679 * C4304) *
               C6505 +
           (C8607 * C1153 - C82864 * C1267 + C8608 * C4110 - C82679 * C4301) *
               C6514 +
           (C8607 * C1161 - C82864 * C1272 + C8608 * C4117 - C82679 * C4305) *
               C6506 +
           (C8607 * C1152 - C82864 * C1268 + C8608 * C4111 - C82679 * C4302) *
               C6516 +
           (C8607 * C1159 - C82864 * C1273 + C8608 * C4119 - C82679 * C4306) *
               C82862) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C80224 +
            (C82864 * C246 - C8607 * C109 + C82679 * C1270 - C8608 * C1165) *
                C82844 +
            (C8610 - C8611 + C8612 - C8613) * C80205 +
            (C8614 - C8615 + C8616 - C8617) * C82533) *
               C13256 +
           ((C11640 - C11641 + C11642 - C11643) * C80224 +
            (C11644 - C11645 + C11646 - C11647) * C82844 +
            (C10649 - C10650 + C10651 - C10652) * C80205 +
            (C10653 - C10654 + C10655 - C10656) * C82533) *
               C13257 +
           ((C22222 - C22223 + C22224 - C22225) * C80224 +
            (C22226 - C22227 + C22228 - C22229) * C82844 +
            (C21259 - C21260 + C21261 - C21262) * C80205 +
            (C21263 - C21264 + C21265 - C21266) * C82533) *
               C82893) *
              C1149 +
          (((C8607 * C1155 - C82864 * C1265 + C8608 * C4108 - C82679 * C4299) *
                C80224 +
            (C8607 * C1165 - C82864 * C1270 + C8608 * C4113 - C82679 * C4303) *
                C82844 +
            (C8607 * C1154 - C82864 * C1266 + C8608 * C4109 - C82679 * C4300) *
                C80205 +
            (C8607 * C1163 - C82864 * C1271 + C8608 * C4115 - C82679 * C4304) *
                C82533) *
               C13256 +
           ((C8607 * C3348 - C82864 * C3527 + C8608 * C4976 - C82679 * C5140) *
                C80224 +
            (C8607 * C3360 - C82864 * C3533 + C8608 * C4982 - C82679 * C5143) *
                C82844 +
            (C8607 * C3347 - C82864 * C3528 + C8608 * C4975 - C82679 * C5141) *
                C80205 +
            (C8607 * C3358 - C82864 * C3534 + C8608 * C4980 - C82679 * C5144) *
                C82533) *
               C13257 +
           ((C8607 * C3345 - C82864 * C3530 + C8608 * C16745 -
             C82679 * C16905) *
                C80224 +
            (C8607 * C3354 - C82864 * C3536 + C8608 * C16748 -
             C82679 * C16907) *
                C82844 +
            (C8607 * C3344 - C82864 * C3531 + C8608 * C16746 -
             C82679 * C16906) *
                C80205 +
            (C8607 * C3352 - C82864 * C3537 + C8608 * C16750 -
             C82679 * C16908) *
                C82533) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6504 * C108 - C6510 * C102 + C6505 * C110 - C6512 * C103 +
             C6506 * C112 - C6514 * C104 + C82862 * C114 - C6516 * C105) *
                C168 +
            (C6504 * C316 - C6510 * C310 + C6505 * C317 - C6512 * C311 +
             C6506 * C318 - C6514 * C312 + C82862 * C319 - C6516 * C313) *
                C82581) *
               C82864 +
           ((C9981 - C9982 + C9983 - C9984 + C9985 - C9986 + C9987 - C9988) *
                C168 +
            (C9989 - C9990 + C9991 - C9992 + C9993 - C9994 + C9995 - C9996) *
                C82581) *
               C82679) *
              C1149 +
          (((C9982 - C9981 + C9984 - C9983 + C9986 - C9985 + C9988 - C9987) *
                C168 +
            (C9990 - C9989 + C9992 - C9991 + C9994 - C9993 + C9996 - C9995) *
                C82581) *
               C82864 +
           ((C6510 * C4108 - C6504 * C4112 + C6512 * C4109 - C6505 * C4114 +
             C6514 * C4110 - C6506 * C4116 + C6516 * C4111 - C82862 * C4118) *
                C168 +
            (C6510 * C4405 - C6504 * C4409 + C6512 * C4406 - C6505 * C4410 +
             C6514 * C4407 - C6506 * C4411 + C6516 * C4408 - C82862 * C4412) *
                C82581) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C13339 +
            (C82844 * C316 - C80224 * C310 + C82533 * C317 - C80205 * C311) *
                C13256 +
            (C19977 - C19978 + C19979 - C19980) * C13340 +
            (C19981 - C19982 + C19983 - C19984) * C13257 +
            (C19985 - C19986 + C19987 - C19988) * C13341 +
            (C19989 - C19990 + C19991 - C19992) * C82893) *
               C82864 +
           ((C23266 - C23267 + C23268 - C23269) * C13339 +
            (C23270 - C23271 + C23272 - C23273) * C13256 +
            (C22328 - C22329 + C22330 - C22331) * C13340 +
            (C22332 - C22333 + C22334 - C22335) * C13257 +
            (C22336 - C22337 + C22338 - C22339) * C13341 +
            (C22340 - C22341 + C22342 - C22343) * C82893) *
               C82679) *
              C1149 +
          (((C23267 - C23266 + C23269 - C23268) * C13339 +
            (C23271 - C23270 + C23273 - C23272) * C13256 +
            (C22329 - C22328 + C22331 - C22330) * C13340 +
            (C22333 - C22332 + C22335 - C22334) * C13257 +
            (C22337 - C22336 + C22339 - C22338) * C13341 +
            (C22341 - C22340 + C22343 - C22342) * C82893) *
               C82864 +
           ((C80224 * C4108 - C82844 * C4112 + C80205 * C4109 -
             C82533 * C4114) *
                C13339 +
            (C80224 * C4405 - C82844 * C4409 + C80205 * C4406 -
             C82533 * C4410) *
                C13256 +
            (C80224 * C4976 - C82844 * C4981 + C80205 * C4975 -
             C82533 * C4979) *
                C13340 +
            (C80224 * C5220 - C82844 * C5223 + C80205 * C5221 -
             C82533 * C5224) *
                C13257 +
            (C80224 * C16745 - C82844 * C16747 + C80205 * C16746 -
             C82533 * C16749) *
                C13341 +
            (C80224 * C16983 - C82844 * C16985 + C80205 * C16984 -
             C82533 * C16986) *
                C82893) *
               C82679) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C6504 +
            C396 * C6505 + C397 * C6506 + C398 * C82862) *
               C82864 +
           (C10063 + C10064 + C10065 + C10066) * C82679) *
              C1149 -
          (((C168 * C4201 - C364 * C4111 - C168 * C4408 + C82581 * C4490) *
                C82862 +
            C4519 * C6506 + C4518 * C6505 + C6109 * C6504) *
               C82679 +
           (C10066 + C10065 + C10064 + C10063) * C82864) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13339 * C169 - C13588 * C102 - C13339 * C310 + C13256 * C365 +
             C13340 * C753 - C13589 * C695 - C13340 * C857 + C13257 * C913 +
             C13341 * C1746 - C13590 * C1653 - C13341 * C1950 +
             C82893 * C2035) *
                C82844 +
            (C13628 + C13629 + C13630) * C82533) *
               C82864 +
           ((C18662 + C18663 + C18664) * C82844 +
            (C21481 + C21482 + C21483) * C82533) *
               C82679) *
              C1149 -
          (((C13341 * C16828 - C13590 * C16746 - C13341 * C16984 +
             C82893 * C17062 + C13340 * C5061 - C13589 * C4975 -
             C13340 * C5221 + C13257 * C5301 + C13339 * C4199 - C13588 * C4109 -
             C13339 * C4406 + C13256 * C4488) *
                C82533 +
            (C18667 + C18666 + C18665) * C82844) *
               C82679 +
           ((C21483 + C21482 + C21481) * C82533 +
            (C18664 + C18663 + C18662) * C82844) *
               C82864) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C168 +
            (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
                C82581) *
               C6504 +
           ((C8610 - C8611 + C8612 - C8613) * C168 +
            (C8839 - C8840 + C8841 - C8842) * C82581) *
               C6505 +
           ((C8618 - C8619 + C8620 - C8621) * C168 +
            (C8843 - C8844 + C8845 - C8846) * C82581) *
               C6506 +
           ((C8626 - C8627 + C8628 - C8629) * C168 +
            (C8847 - C8848 + C8849 - C8850) * C82581) *
               C82862) *
              C1149 +
          (((C8607 * C1155 - C82864 * C1265 + C8608 * C4108 - C82679 * C4299) *
                C168 +
            (C8607 * C1317 - C82864 * C1416 + C8608 * C4405 - C82679 * C4593) *
                C82581) *
               C6504 +
           ((C8607 * C1154 - C82864 * C1266 + C8608 * C4109 - C82679 * C4300) *
                C168 +
            (C8607 * C1318 - C82864 * C1417 + C8608 * C4406 - C82679 * C4594) *
                C82581) *
               C6505 +
           ((C8607 * C1153 - C82864 * C1267 + C8608 * C4110 - C82679 * C4301) *
                C168 +
            (C8607 * C1319 - C82864 * C1418 + C8608 * C4407 - C82679 * C4595) *
                C82581) *
               C6506 +
           ((C8607 * C1152 - C82864 * C1268 + C8608 * C4111 - C82679 * C4302) *
                C168 +
            (C8607 * C1320 - C82864 * C1419 + C8608 * C4408 - C82679 * C4596) *
                C82581) *
               C82862) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82864 * C240 - C8607 * C102 + C82679 * C1265 - C8608 * C1155) *
                C13339 +
            (C82864 * C441 - C8607 * C310 + C82679 * C1416 - C8608 * C1317) *
                C13256 +
            (C11640 - C11641 + C11642 - C11643) * C13340 +
            (C11954 - C11955 + C11956 - C11957) * C13257 +
            (C22222 - C22223 + C22224 - C22225) * C13341 +
            (C22540 - C22541 + C22542 - C22543) * C82893) *
               C82844 +
           ((C8610 - C8611 + C8612 - C8613) * C13339 +
            (C8839 - C8840 + C8841 - C8842) * C13256 +
            (C10649 - C10650 + C10651 - C10652) * C13340 +
            (C10987 - C10988 + C10989 - C10990) * C13257 +
            (C21259 - C21260 + C21261 - C21262) * C13341 +
            (C21582 - C21583 + C21584 - C21585) * C82893) *
               C82533) *
              C1149 +
          (((C8607 * C1155 - C82864 * C1265 + C8608 * C4108 - C82679 * C4299) *
                C13339 +
            (C8607 * C1317 - C82864 * C1416 + C8608 * C4405 - C82679 * C4593) *
                C13256 +
            (C8607 * C3348 - C82864 * C3527 + C8608 * C4976 - C82679 * C5140) *
                C13340 +
            (C8607 * C3613 - C82864 * C3779 + C8608 * C5220 - C82679 * C5377) *
                C13257 +
            (C8607 * C3345 - C82864 * C3530 + C8608 * C16745 -
             C82679 * C16905) *
                C13341 +
            (C8607 * C3616 - C82864 * C3780 + C8608 * C16983 -
             C82679 * C17137) *
                C82893) *
               C82844 +
           ((C8607 * C1154 - C82864 * C1266 + C8608 * C4109 - C82679 * C4300) *
                C13339 +
            (C8607 * C1318 - C82864 * C1417 + C8608 * C4406 - C82679 * C4594) *
                C13256 +
            (C8607 * C3347 - C82864 * C3528 + C8608 * C4975 - C82679 * C5141) *
                C13340 +
            (C8607 * C3614 - C82864 * C3781 + C8608 * C5221 - C82679 * C5378) *
                C13257 +
            (C8607 * C3344 - C82864 * C3531 + C8608 * C16746 -
             C82679 * C16906) *
                C13341 +
            (C8607 * C3617 - C82864 * C3782 + C8608 * C16984 -
             C82679 * C17138) *
                C82893) *
               C82533) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezx[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6504 * C108 - C6510 * C102 + C6505 * C110 - C6512 * C103 +
            C6506 * C112 - C6514 * C104 + C82862 * C114 - C6516 * C105) *
               C8607 +
           (C6504 * C503 - C6510 * C497 + C6505 * C504 - C6512 * C498 +
            C6506 * C505 - C6514 * C499 + C82862 * C506 - C6516 * C500) *
               C82864 +
           (C9981 - C9982 + C9983 - C9984 + C9985 - C9986 + C9987 - C9988) *
               C8608 +
           (C10199 - C10200 + C10201 - C10202 + C10203 - C10204 + C10205 -
            C10206) *
               C82679) *
              C82581 * C1149 +
          ((C9982 - C9981 + C9984 - C9983 + C9986 - C9985 + C9988 - C9987) *
               C8607 +
           (C10200 - C10199 + C10202 - C10201 + C10204 - C10203 + C10206 -
            C10205) *
               C82864 +
           (C6510 * C4108 - C6504 * C4112 + C6512 * C4109 - C6505 * C4114 +
            C6514 * C4110 - C6506 * C4116 + C6516 * C4111 - C82862 * C4118) *
               C8608 +
           (C6510 * C4683 - C6504 * C4687 + C6512 * C4684 - C6505 * C4688 +
            C6514 * C4685 - C6506 * C4689 + C6516 * C4686 - C82862 * C4690) *
               C82679) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82844 * C108 - C80224 * C102 + C82533 * C110 - C80205 * C103) *
                C8607 +
            (C82844 * C503 - C80224 * C497 + C82533 * C504 - C80205 * C498) *
                C82864 +
            (C23266 - C23267 + C23268 - C23269) * C8608 +
            (C23568 - C23569 + C23570 - C23571) * C82679) *
               C13256 +
           ((C19977 - C19978 + C19979 - C19980) * C8607 +
            (C20199 - C20200 + C20201 - C20202) * C82864 +
            (C22328 - C22329 + C22330 - C22331) * C8608 +
            (C22642 - C22643 + C22644 - C22645) * C82679) *
               C13257 +
           ((C19985 - C19986 + C19987 - C19988) * C8607 +
            (C20203 - C20204 + C20205 - C20206) * C82864 +
            (C22336 - C22337 + C22338 - C22339) * C8608 +
            (C22646 - C22647 + C22648 - C22649) * C82679) *
               C82893) *
              C1149 +
          (((C23267 - C23266 + C23269 - C23268) * C8607 +
            (C23569 - C23568 + C23571 - C23570) * C82864 +
            (C80224 * C4108 - C82844 * C4112 + C80205 * C4109 -
             C82533 * C4114) *
                C8608 +
            (C80224 * C4683 - C82844 * C4687 + C80205 * C4684 -
             C82533 * C4688) *
                C82679) *
               C13256 +
           ((C22329 - C22328 + C22331 - C22330) * C8607 +
            (C22643 - C22642 + C22645 - C22644) * C82864 +
            (C80224 * C4976 - C82844 * C4981 + C80205 * C4975 -
             C82533 * C4979) *
                C8608 +
            (C80224 * C5454 - C82844 * C5457 + C80205 * C5455 -
             C82533 * C5458) *
                C82679) *
               C13257 +
           ((C22337 - C22336 + C22339 - C22338) * C8607 +
            (C22647 - C22646 + C22649 - C22648) * C82864 +
            (C80224 * C16745 - C82844 * C16747 + C80205 * C16746 -
             C82533 * C16749) *
                C8608 +
            (C80224 * C17213 - C82844 * C17215 + C80205 * C17214 -
             C82533 * C17216) *
                C82679) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C8607 +
            (C82581 * C551 - C168 * C497) * C82864 + (C5823 - C5824) * C8608 +
            (C6358 - C6359) * C82679) *
               C6504 +
           ((C182 - C183) * C8607 + (C558 - C559) * C82864 +
            (C4207 - C4208) * C8608 + (C4770 - C4771) * C82679) *
               C6505 +
           ((C186 - C187) * C8607 + (C560 - C561) * C82864 +
            (C4211 - C4212) * C8608 + (C4774 - C4775) * C82679) *
               C6506 +
           ((C190 - C191) * C8607 + (C562 - C563) * C82864 +
            (C8538 - C8539) * C8608 + (C8983 - C8984) * C82679) *
               C82862) *
              C1149 +
          (((C5824 - C5823) * C8607 + (C6359 - C6358) * C82864 +
            (C5828 - C5827) * C8608 + (C6361 - C6360) * C82679) *
               C6504 +
           ((C4208 - C4207) * C8607 + (C4771 - C4770) * C82864 +
            (C4216 - C4215) * C8608 + (C4773 - C4772) * C82679) *
               C6505 +
           ((C4212 - C4211) * C8607 + (C4775 - C4774) * C82864 +
            (C4220 - C4219) * C8608 + (C4777 - C4776) * C82679) *
               C6506 +
           ((C8539 - C8538) * C8607 + (C8984 - C8983) * C82864 +
            (C168 * C4111 - C82581 * C4201) * C8608 +
            (C168 * C4686 - C82581 * C4768) * C82679) *
               C82862) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C8607 +
            (C13256 * C551 - C13339 * C497 + C13257 * C1055 - C13340 * C1003 +
             C82893 * C2323 - C13341 * C2241) *
                C82864 +
            (C18362 - C18363 + C18364 - C18365 + C18366 - C18367) * C8608 +
            (C18902 - C18903 + C18904 - C18905 + C18906 - C18907) * C82679) *
               C82844 +
           ((C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C8607 +
            (C13856 - C13857 + C13858 - C13859 + C13860 - C13861) * C82864 +
            (C21149 - C21150 + C21151 - C21152 + C21153 - C21154) * C8608 +
            (C21782 - C21783 + C21784 - C21785 + C21786 - C21787) * C82679) *
               C82533) *
              C1149 +
          (((C18363 - C18362 + C18365 - C18364 + C18367 - C18366) * C8607 +
            (C18903 - C18902 + C18905 - C18904 + C18907 - C18906) * C82864 +
            (C18375 - C18374 + C18377 - C18376 + C18379 - C18378) * C8608 +
            (C18909 - C18908 + C18911 - C18910 + C18913 - C18912) * C82679) *
               C82844 +
           ((C21150 - C21149 + C21152 - C21151 + C21154 - C21153) * C8607 +
            (C21783 - C21782 + C21785 - C21784 + C21787 - C21786) * C82864 +
            (C13339 * C4109 - C13256 * C4199 + C13340 * C4975 - C13257 * C5061 +
             C13341 * C16746 - C82893 * C16828) *
                C8608 +
            (C13339 * C4684 - C13256 * C4766 + C13340 * C5455 - C13257 * C5535 +
             C13341 * C17214 - C82893 * C17292) *
                C82679) *
               C82533) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
            C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
               C82581 * C6504 +
           (C9089 + C9090) * C82581 * C6505 + (C9091 + C9092) * C82581 * C6506 +
           (C9093 + C9094) * C82581 * C82862) *
              C1149 -
          ((C8608 * C4302 - C9051 * C4111 - C8608 * C4686 + C82679 * C4857 +
            C8607 * C1268 - C9050 * C1152 - C8607 * C1466 + C82864 * C1563) *
               C82581 * C82862 +
           (C8608 * C4301 - C9051 * C4110 - C8608 * C4685 + C82679 * C4856 +
            C8607 * C1267 - C9050 * C1153 - C8607 * C1465 + C82864 * C1564) *
               C82581 * C6506 +
           (C8608 * C4300 - C9051 * C4109 - C8608 * C4684 + C82679 * C4855 +
            C8607 * C1266 - C9050 * C1154 - C8607 * C1464 + C82864 * C1565) *
               C82581 * C6505 +
           (C8608 * C4299 - C9051 * C4108 - C8608 * C4683 + C82679 * C4854 +
            C8607 * C1265 - C9050 * C1155 - C8607 * C1463 + C82864 * C1566) *
               C82581 * C6504) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8607 * C240 - C9050 * C102 - C8607 * C497 + C82864 * C608 +
             C8608 * C1265 - C9051 * C1155 - C8608 * C1463 + C82679 * C1566) *
                C13256 +
            (C12270 + C12271) * C13257 + (C22858 + C22859) * C82893) *
               C82844 +
           ((C9089 + C9090) * C13256 + (C11321 + C11322) * C13257 +
            (C21898 + C21899) * C82893) *
               C82533) *
              C1149 -
          (((C8608 * C16906 - C9051 * C16746 - C8608 * C17214 +
             C82679 * C17368 + C8607 * C3531 - C9050 * C3344 - C8607 * C3863 +
             C82864 * C4027) *
                C82893 +
            (C8608 * C5141 - C9051 * C4975 - C8608 * C5455 + C82679 * C5612 +
             C8607 * C3528 - C9050 * C3347 - C8607 * C3860 + C82864 * C4028) *
                C13257 +
            (C8608 * C4300 - C9051 * C4109 - C8608 * C4684 + C82679 * C4855 +
             C8607 * C1266 - C9050 * C1154 - C8607 * C1464 + C82864 * C1565) *
                C13256) *
               C82533 +
           ((C8608 * C16905 - C9051 * C16745 - C8608 * C17213 +
             C82679 * C17367 + C8607 * C3530 - C9050 * C3345 - C8607 * C3862 +
             C82864 * C4029) *
                C82893 +
            (C8608 * C5140 - C9051 * C4976 - C8608 * C5454 + C82679 * C5613 +
             C8607 * C3527 - C9050 * C3348 - C8607 * C3859 + C82864 * C4030) *
                C13257 +
            (C8608 * C4299 - C9051 * C4108 - C8608 * C4683 + C82679 * C4854 +
             C8607 * C1265 - C9050 * C1155 - C8607 * C1463 + C82864 * C1566) *
                C13256) *
               C82844) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C92 * C108 - C93 * C102 - C92 * C109 + C81 * C120 + C94 * C110 -
           C95 * C103 - C94 * C111 + C82 * C121 + C96 * C112 - C97 * C104 -
           C96 * C113 + C83 * C122 + C98 * C114 - C99 * C105 - C98 * C115 +
           C84 * C123 + C100 * C116 - C101 * C106 - C100 * C117 + C85 * C124) *
              C82592 * C82581 * C82938 * C82939 * C90 -
          (C100 * C118 - C101 * C107 - C100 * C119 + C85 * C125 + C98 * C116 -
           C99 * C106 - C98 * C117 + C84 * C124 + C96 * C114 - C97 * C105 -
           C96 * C115 + C83 * C123 + C94 * C112 - C95 * C104 - C94 * C113 +
           C82 * C122 + C92 * C110 - C93 * C103 - C92 * C111 + C81 * C121) *
              C82592 * C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1647 * C108 - C1648 * C102 - C1647 * C109 + C1641 * C120 +
            C1649 * C110 - C1650 * C103 - C1649 * C111 + C1642 * C121 +
            C1651 * C112 - C1652 * C104 - C1651 * C113 + C82885 * C122) *
               C82592 * C82931 +
           (C1647 * C704 - C1648 * C695 - C1647 * C705 + C1641 * C710 +
            C1649 * C702 - C1650 * C694 - C1649 * C703 + C1642 * C709 +
            C1651 * C700 - C1652 * C693 - C1651 * C701 + C82885 * C708) *
               C82592 * C82916 +
           (C1647 * C1657 - C1648 * C1653 - C1647 * C1658 + C1641 * C1665 +
            C1649 * C1659 - C1650 * C1654 - C1649 * C1660 + C1642 * C1666 +
            C1651 * C1661 - C1652 * C1655 - C1651 * C1662 + C82885 * C1667) *
               C82592 * C82893) *
              C82938 * C82939 * C90 -
          ((C1651 * C1663 - C1652 * C1656 - C1651 * C1664 + C82885 * C1668 +
            C1649 * C1661 - C1650 * C1655 - C1649 * C1662 + C1642 * C1667 +
            C1647 * C1659 - C1648 * C1654 - C1647 * C1660 + C1641 * C1666) *
               C82592 * C82893 +
           (C1651 * C698 - C1652 * C692 - C1651 * C699 + C82885 * C707 +
            C1649 * C700 - C1650 * C693 - C1649 * C701 + C1642 * C708 +
            C1647 * C702 - C1648 * C694 - C1647 * C703 + C1641 * C709) *
               C82592 * C82916 +
           (C1651 * C114 - C1652 * C105 - C1651 * C115 + C82885 * C123 +
            C1649 * C112 - C1650 * C104 - C1649 * C113 + C1642 * C122 +
            C1647 * C110 - C1648 * C103 - C1647 * C111 + C1641 * C121) *
               C82592 * C82931) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13259 * C108 - C13260 * C102 - C13259 * C109 + C82925 * C120 +
            C13261 * C110 - C13262 * C103 - C13261 * C111 + C82909 * C121 +
            C13263 * C112 - C13264 * C104 - C13263 * C113 + C82885 * C122) *
               C82592 * C13256 +
           (C13259 * C704 - C13260 * C695 - C13259 * C705 + C82925 * C710 +
            C13261 * C702 - C13262 * C694 - C13261 * C703 + C82909 * C709 +
            C13263 * C700 - C13264 * C693 - C13263 * C701 + C82885 * C708) *
               C82592 * C13257 +
           (C13259 * C1657 - C13260 * C1653 - C13259 * C1658 + C82925 * C1665 +
            C13261 * C1659 - C13262 * C1654 - C13261 * C1660 + C82909 * C1666 +
            C13263 * C1661 - C13264 * C1655 - C13263 * C1662 + C82885 * C1667) *
               C82592 * C82893) *
              C82938 * C82939 * C90 -
          ((C13263 * C1663 - C13264 * C1656 - C13263 * C1664 + C82885 * C1668 +
            C13261 * C1661 - C13262 * C1655 - C13261 * C1662 + C82909 * C1667 +
            C13259 * C1659 - C13260 * C1654 - C13259 * C1660 + C82925 * C1666) *
               C82592 * C82893 +
           (C13263 * C698 - C13264 * C692 - C13263 * C699 + C82885 * C707 +
            C13261 * C700 - C13262 * C693 - C13261 * C701 + C82909 * C708 +
            C13259 * C702 - C13260 * C694 - C13259 * C703 + C82925 * C709) *
               C82592 * C13257 +
           (C13263 * C114 - C13264 * C105 - C13263 * C115 + C82885 * C123 +
            C13261 * C112 - C13262 * C104 - C13261 * C113 + C82909 * C122 +
            C13259 * C110 - C13260 * C103 - C13259 * C111 + C82925 * C121) *
               C82592 * C13256) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
               C82592 * C15400 +
           (C15405 * C704 - C15406 * C695 - C15405 * C705 + C82523 * C710) *
               C82592 * C15401 +
           (C15405 * C1657 - C15406 * C1653 - C15405 * C1658 + C82523 * C1665) *
               C82592 * C15402 +
           (C15405 * C2532 - C15406 * C2527 - C15405 * C2533 + C82523 * C2536) *
               C82592 * C15403 +
           (C15405 * C15409 - C15406 * C15407 - C15405 * C15410 +
            C82523 * C15413) *
               C82592 * C15404) *
              C82938 * C82939 * C90 -
          ((C15405 * C15411 - C15406 * C15408 - C15405 * C15412 +
            C82523 * C15414) *
               C82592 * C15404 +
           (C15405 * C2530 - C15406 * C2526 - C15405 * C2531 + C82523 * C2535) *
               C82592 * C15403 +
           (C15405 * C1659 - C15406 * C1654 - C15405 * C1660 + C82523 * C1666) *
               C82592 * C15402 +
           (C15405 * C702 - C15406 * C694 - C15405 * C703 + C82523 * C709) *
               C82592 * C15401 +
           (C15405 * C110 - C15406 * C103 - C15405 * C111 + C82523 * C121) *
               C82592 * C15400) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C82581 * C169 - C168 * C102) * C92 +
           (C82581 * C175 - C168 * C109) * C81 + (C182 - C183) * C94 +
           (C184 - C185) * C82 + (C186 - C187) * C96 + (C188 - C189) * C83 +
           (C190 - C191) * C98 + (C192 - C193) * C84 + (C194 - C195) * C100 +
           (C196 - C197) * C85) *
              C82592 * C82938 * C82939 * C90 +
          ((C183 - C182) * C92 + (C185 - C184) * C81 + (C187 - C186) * C94 +
           (C189 - C188) * C82 + (C191 - C190) * C96 + (C193 - C192) * C83 +
           (C195 - C194) * C98 + (C197 - C196) * C84 +
           (C168 * C107 - C82581 * C174) * C100 +
           (C168 * C119 - C82581 * C180) * C85) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
            C82893 * C1746 - C1745 * C1653) *
               C1647 +
           (C82931 * C175 - C1743 * C109 + C82916 * C758 - C1744 * C705 +
            C82893 * C1750 - C1745 * C1658) *
               C1641 +
           (C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C1649 +
           (C1761 - C1762 + C1763 - C1764 + C1765 - C1766) * C1642 +
           (C1767 - C1768 + C1769 - C1770 + C1771 - C1772) * C1651 +
           (C1773 - C1774 + C1775 - C1776 + C1777 - C1778) * C82885) *
              C82592 * C82938 * C82939 * C90 +
          ((C1756 - C1755 + C1758 - C1757 + C1760 - C1759) * C1647 +
           (C1762 - C1761 + C1764 - C1763 + C1766 - C1765) * C1641 +
           (C1768 - C1767 + C1770 - C1769 + C1772 - C1771) * C1649 +
           (C1774 - C1773 + C1776 - C1775 + C1778 - C1777) * C1642 +
           (C1743 * C105 - C82931 * C172 + C1744 * C692 - C82916 * C756 +
            C1745 * C1656 - C82893 * C1749) *
               C1651 +
           (C1743 * C115 - C82931 * C178 + C1744 * C699 - C82916 * C761 +
            C1745 * C1664 - C82893 * C1753) *
               C82885) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
            C82893 * C1746 - C13341 * C1653) *
               C13259 +
           (C13256 * C175 - C13339 * C109 + C13257 * C758 - C13340 * C705 +
            C82893 * C1750 - C13341 * C1658) *
               C82925 +
           (C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C13261 +
           (C13349 - C13350 + C13351 - C13352 + C13353 - C13354) * C82909 +
           (C13355 - C13356 + C13357 - C13358 + C13359 - C13360) * C13263 +
           (C13361 - C13362 + C13363 - C13364 + C13365 - C13366) * C82885) *
              C82592 * C82938 * C82939 * C90 +
          ((C13344 - C13343 + C13346 - C13345 + C13348 - C13347) * C13259 +
           (C13350 - C13349 + C13352 - C13351 + C13354 - C13353) * C82925 +
           (C13356 - C13355 + C13358 - C13357 + C13360 - C13359) * C13261 +
           (C13362 - C13361 + C13364 - C13363 + C13366 - C13365) * C82909 +
           (C13339 * C105 - C13256 * C172 + C13340 * C692 - C13257 * C756 +
            C13341 * C1656 - C82893 * C1749) *
               C13263 +
           (C13339 * C115 - C13256 * C178 + C13340 * C699 - C13257 * C761 +
            C13341 * C1664 - C82893 * C1753) *
               C82885) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15400 * C169 - C15457 * C102 + C15401 * C753 - C15458 * C695 +
            C15402 * C1746 - C15459 * C1653 + C15403 * C2653 - C15460 * C2527 +
            C15404 * C15462 - C15461 * C15407) *
               C15405 +
           (C15400 * C175 - C15457 * C109 + C15401 * C758 - C15458 * C705 +
            C15402 * C1750 - C15459 * C1658 + C15403 * C2656 - C15460 * C2533 +
            C15404 * C15464 - C15461 * C15410) *
               C82523) *
              C82592 * C82938 * C82939 * C90 +
          ((C15457 * C103 - C15400 * C170 + C15458 * C694 - C15401 * C754 +
            C15459 * C1654 - C15402 * C1747 + C15460 * C2526 - C15403 * C2654 +
            C15461 * C15408 - C15404 * C15463) *
               C15405 +
           (C15457 * C111 - C15400 * C176 + C15458 * C703 - C15401 * C759 +
            C15459 * C1660 - C15402 * C1751 + C15460 * C2531 - C15403 * C2657 +
            C15461 * C15412 - C15404 * C15465) *
               C82523) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C82592 * C240 - C239 * C102) * C92 +
           (C82592 * C246 - C239 * C109) * C81 + (C253 - C254) * C94 +
           (C255 - C256) * C82 + (C257 - C258) * C96 + (C259 - C260) * C83 +
           (C261 - C262) * C98 + (C263 - C264) * C84 + (C265 - C266) * C100 +
           (C267 - C268) * C85) *
              C82581 * C82938 * C82939 * C90 +
          ((C254 - C253) * C92 + (C256 - C255) * C81 + (C258 - C257) * C94 +
           (C260 - C259) * C82 + (C262 - C261) * C96 + (C264 - C263) * C83 +
           (C266 - C265) * C98 + (C268 - C267) * C84 +
           (C239 * C107 - C82592 * C245) * C100 +
           (C239 * C119 - C82592 * C251) * C85) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C1647 +
            (C82592 * C246 - C239 * C109) * C1641 + (C253 - C254) * C1649 +
            (C255 - C256) * C1642 + (C257 - C258) * C1651 +
            (C259 - C260) * C82885) *
               C82931 +
           ((C82592 * C805 - C239 * C695) * C1647 +
            (C82592 * C810 - C239 * C705) * C1641 + (C1861 - C1862) * C1649 +
            (C1863 - C1864) * C1642 + (C1865 - C1866) * C1651 +
            (C1867 - C1868) * C82885) *
               C82916 +
           ((C82592 * C1852 - C239 * C1653) * C1647 +
            (C82592 * C1856 - C239 * C1658) * C1641 + (C1869 - C1870) * C1649 +
            (C1871 - C1872) * C1642 + (C1873 - C1874) * C1651 +
            (C1875 - C1876) * C82885) *
               C82893) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C1647 + (C256 - C255) * C1641 +
            (C258 - C257) * C1649 + (C260 - C259) * C1642 +
            (C262 - C261) * C1651 + (C264 - C263) * C82885) *
               C82931 +
           ((C1862 - C1861) * C1647 + (C1864 - C1863) * C1641 +
            (C1866 - C1865) * C1649 + (C1868 - C1867) * C1642 +
            (C239 * C692 - C82592 * C808) * C1651 +
            (C239 * C699 - C82592 * C813) * C82885) *
               C82916 +
           ((C1870 - C1869) * C1647 + (C1872 - C1871) * C1641 +
            (C1874 - C1873) * C1649 + (C1876 - C1875) * C1642 +
            (C239 * C1656 - C82592 * C1855) * C1651 +
            (C239 * C1664 - C82592 * C1859) * C82885) *
               C82893) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C13259 +
            (C82592 * C246 - C239 * C109) * C82925 + (C253 - C254) * C13261 +
            (C255 - C256) * C82909 + (C257 - C258) * C13263 +
            (C259 - C260) * C82885) *
               C13256 +
           ((C2740 - C2741) * C13259 + (C2742 - C2743) * C82925 +
            (C1861 - C1862) * C13261 + (C1863 - C1864) * C82909 +
            (C1865 - C1866) * C13263 + (C1867 - C1868) * C82885) *
               C13257 +
           ((C2744 - C2745) * C13259 + (C2746 - C2747) * C82925 +
            (C1869 - C1870) * C13261 + (C1871 - C1872) * C82909 +
            (C1873 - C1874) * C13263 + (C1875 - C1876) * C82885) *
               C82893) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C13259 + (C256 - C255) * C82925 +
            (C258 - C257) * C13261 + (C260 - C259) * C82909 +
            (C262 - C261) * C13263 + (C264 - C263) * C82885) *
               C13256 +
           ((C1862 - C1861) * C13259 + (C1864 - C1863) * C82925 +
            (C1866 - C1865) * C13261 + (C1868 - C1867) * C82909 +
            (C6678 - C6677) * C13263 + (C6680 - C6679) * C82885) *
               C13257 +
           ((C1870 - C1869) * C13259 + (C1872 - C1871) * C82925 +
            (C1874 - C1873) * C13261 + (C1876 - C1875) * C82909 +
            (C239 * C1656 - C82592 * C1855) * C13263 +
            (C239 * C1664 - C82592 * C1859) * C82885) *
               C82893) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C15405 +
            (C82592 * C246 - C239 * C109) * C82523) *
               C15400 +
           ((C2740 - C2741) * C15405 + (C2742 - C2743) * C82523) * C15401 +
           ((C2744 - C2745) * C15405 + (C2746 - C2747) * C82523) * C15402 +
           ((C82592 * C2733 - C239 * C2527) * C15405 +
            (C82592 * C2736 - C239 * C2533) * C82523) *
               C15403 +
           ((C82592 * C15508 - C239 * C15407) * C15405 +
            (C82592 * C15510 - C239 * C15410) * C82523) *
               C15404) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C15405 + (C256 - C255) * C82523) * C15400 +
           ((C1862 - C1861) * C15405 + (C1864 - C1863) * C82523) * C15401 +
           ((C1870 - C1869) * C15405 + (C1872 - C1871) * C82523) * C15402 +
           ((C239 * C2526 - C82592 * C2734) * C15405 +
            (C239 * C2531 - C82592 * C2737) * C82523) *
               C15403 +
           ((C239 * C15408 - C82592 * C15509) * C15405 +
            (C239 * C15412 - C82592 * C15511) * C82523) *
               C15404) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C108 - C92 * C102 + C82 * C110 - C94 * C103 + C83 * C112 -
            C96 * C104 + C84 * C114 - C98 * C105 + C85 * C116 - C100 * C106) *
               C168 +
           (C81 * C316 - C92 * C310 + C82 * C317 - C94 * C311 + C83 * C318 -
            C96 * C312 + C84 * C319 - C98 * C313 + C85 * C320 - C100 * C314) *
               C82581) *
              C82592 * C82938 * C82939 * C90 +
          ((C92 * C103 - C81 * C110 + C94 * C104 - C82 * C112 + C96 * C105 -
            C83 * C114 + C98 * C106 - C84 * C116 + C100 * C107 - C85 * C118) *
               C168 +
           (C92 * C311 - C81 * C317 + C94 * C312 - C82 * C318 + C96 * C313 -
            C83 * C319 + C98 * C314 - C84 * C320 + C100 * C315 - C85 * C321) *
               C82581) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
            C82885 * C112 - C1651 * C104) *
               C1743 +
           (C1641 * C316 - C1647 * C310 + C1642 * C317 - C1649 * C311 +
            C82885 * C318 - C1651 * C312) *
               C82931 +
           (C1641 * C704 - C1647 * C695 + C1642 * C702 - C1649 * C694 +
            C82885 * C700 - C1651 * C693) *
               C1744 +
           (C1641 * C862 - C1647 * C857 + C1642 * C863 - C1649 * C858 +
            C82885 * C864 - C1651 * C859) *
               C82916 +
           (C1641 * C1657 - C1647 * C1653 + C1642 * C1659 - C1649 * C1654 +
            C82885 * C1661 - C1651 * C1655) *
               C1745 +
           (C1641 * C1954 - C1647 * C1950 + C1642 * C1955 - C1649 * C1951 +
            C82885 * C1956 - C1651 * C1952) *
               C82893) *
              C82592 * C82938 * C82939 * C90 +
          ((C1647 * C103 - C1641 * C110 + C1649 * C104 - C1642 * C112 +
            C1651 * C105 - C82885 * C114) *
               C1743 +
           (C1647 * C311 - C1641 * C317 + C1649 * C312 - C1642 * C318 +
            C1651 * C313 - C82885 * C319) *
               C82931 +
           (C1647 * C694 - C1641 * C702 + C1649 * C693 - C1642 * C700 +
            C1651 * C692 - C82885 * C698) *
               C1744 +
           (C1647 * C858 - C1641 * C863 + C1649 * C859 - C1642 * C864 +
            C1651 * C860 - C82885 * C865) *
               C82916 +
           (C1647 * C1654 - C1641 * C1659 + C1649 * C1655 - C1642 * C1661 +
            C1651 * C1656 - C82885 * C1663) *
               C1745 +
           (C1647 * C1951 - C1641 * C1955 + C1649 * C1952 - C1642 * C1956 +
            C1651 * C1953 - C82885 * C1957) *
               C82893) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
            C82885 * C112 - C13263 * C104) *
               C13339 +
           (C82925 * C316 - C13259 * C310 + C82909 * C317 - C13261 * C311 +
            C82885 * C318 - C13263 * C312) *
               C13256 +
           (C82925 * C704 - C13259 * C695 + C82909 * C702 - C13261 * C694 +
            C82885 * C700 - C13263 * C693) *
               C13340 +
           (C82925 * C862 - C13259 * C857 + C82909 * C863 - C13261 * C858 +
            C82885 * C864 - C13263 * C859) *
               C13257 +
           (C82925 * C1657 - C13259 * C1653 + C82909 * C1659 - C13261 * C1654 +
            C82885 * C1661 - C13263 * C1655) *
               C13341 +
           (C82925 * C1954 - C13259 * C1950 + C82909 * C1955 - C13261 * C1951 +
            C82885 * C1956 - C13263 * C1952) *
               C82893) *
              C82592 * C82938 * C82939 * C90 +
          ((C13259 * C103 - C82925 * C110 + C13261 * C104 - C82909 * C112 +
            C13263 * C105 - C82885 * C114) *
               C13339 +
           (C13259 * C311 - C82925 * C317 + C13261 * C312 - C82909 * C318 +
            C13263 * C313 - C82885 * C319) *
               C13256 +
           (C13259 * C694 - C82925 * C702 + C13261 * C693 - C82909 * C700 +
            C13263 * C692 - C82885 * C698) *
               C13340 +
           (C13259 * C858 - C82925 * C863 + C13261 * C859 - C82909 * C864 +
            C13263 * C860 - C82885 * C865) *
               C13257 +
           (C13259 * C1654 - C82925 * C1659 + C13261 * C1655 - C82909 * C1661 +
            C13263 * C1656 - C82885 * C1663) *
               C13341 +
           (C13259 * C1951 - C82925 * C1955 + C13261 * C1952 - C82909 * C1956 +
            C13263 * C1953 - C82885 * C1957) *
               C82893) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C82523 * C108 - C15405 * C102) * C15457 +
           (C82523 * C316 - C15405 * C310) * C15400 +
           (C82523 * C704 - C15405 * C695) * C15458 +
           (C82523 * C862 - C15405 * C857) * C15401 +
           (C82523 * C1657 - C15405 * C1653) * C15459 +
           (C82523 * C1954 - C15405 * C1950) * C15402 +
           (C82523 * C2532 - C15405 * C2527) * C15460 +
           (C82523 * C2824 - C15405 * C2821) * C15403 +
           (C82523 * C15409 - C15405 * C15407) * C15461 +
           (C82523 * C15556 - C15405 * C15554) * C15404) *
              C82592 * C82938 * C82939 * C90 +
          ((C15405 * C103 - C82523 * C110) * C15457 +
           (C15405 * C311 - C82523 * C317) * C15400 +
           (C15405 * C694 - C82523 * C702) * C15458 +
           (C15405 * C858 - C82523 * C863) * C15401 +
           (C15405 * C1654 - C82523 * C1659) * C15459 +
           (C15405 * C1951 - C82523 * C1955) * C15402 +
           (C15405 * C2526 - C82523 * C2530) * C15460 +
           (C15405 * C2822 - C82523 * C2825) * C15403 +
           (C15405 * C15408 - C82523 * C15411) * C15461 +
           (C15405 * C15555 - C82523 * C15557) * C15404) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C81 +
           C396 * C82 + C397 * C83 + C398 * C84 + C399 * C85) *
              C82592 * C82938 * C82939 * C90 -
          ((C168 * C174 - C364 * C107 - C168 * C315 + C82581 * C370) * C85 +
           C399 * C84 + C398 * C83 + C397 * C82 + C396 * C81) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1743 * C169 - C2032 * C102 - C1743 * C310 + C82931 * C365 +
            C1744 * C753 - C2033 * C695 - C1744 * C857 + C82916 * C913 +
            C1745 * C1746 - C2034 * C1653 - C1745 * C1950 + C82893 * C2035) *
               C1641 +
           (C2076 + C2077 + C2078) * C1642 + (C2079 + C2080 + C2081) * C82885) *
              C82592 * C82938 * C82939 * C90 -
          ((C1745 * C1749 - C2034 * C1656 - C1745 * C1953 + C82893 * C2038 +
            C1744 * C756 - C2033 * C692 - C1744 * C860 + C82916 * C910 +
            C1743 * C172 - C2032 * C105 - C1743 * C313 + C82931 * C368) *
               C82885 +
           (C2081 + C2080 + C2079) * C1642 + (C2078 + C2077 + C2076) * C1641) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13339 * C169 - C13588 * C102 - C13339 * C310 + C13256 * C365 +
            C13340 * C753 - C13589 * C695 - C13340 * C857 + C13257 * C913 +
            C13341 * C1746 - C13590 * C1653 - C13341 * C1950 + C82893 * C2035) *
               C82925 +
           (C13628 + C13629 + C13630) * C82909 +
           (C13631 + C13632 + C13633) * C82885) *
              C82592 * C82938 * C82939 * C90 -
          ((C13341 * C1749 - C13590 * C1656 - C13341 * C1953 + C82893 * C2038 +
            C13340 * C756 - C13589 * C692 - C13340 * C860 + C13257 * C910 +
            C13339 * C172 - C13588 * C105 - C13339 * C313 + C13256 * C368) *
               C82885 +
           (C13633 + C13632 + C13631) * C82909 +
           (C13630 + C13629 + C13628) * C82925) *
              C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C15457 * C169 - C15600 * C102 - C15457 * C310 + C15400 * C365 +
           C15458 * C753 - C15601 * C695 - C15458 * C857 + C15401 * C913 +
           C15459 * C1746 - C15602 * C1653 - C15459 * C1950 + C15402 * C2035 +
           C15460 * C2653 - C15603 * C2527 - C15460 * C2821 + C15403 * C2927 +
           C15461 * C15462 - C15604 * C15407 - C15461 * C15554 +
           C15404 * C15605) *
              C82523 * C82592 * C82938 * C82939 * C90 -
          (C15461 * C15463 - C15604 * C15408 - C15461 * C15555 +
           C15404 * C15606 + C15460 * C2654 - C15603 * C2526 - C15460 * C2822 +
           C15403 * C2926 + C15459 * C1747 - C15602 * C1654 - C15459 * C1951 +
           C15402 * C2036 + C15458 * C754 - C15601 * C694 - C15458 * C858 +
           C15401 * C912 + C15457 * C170 - C15600 * C103 - C15457 * C311 +
           C15400 * C366) *
              C82523 * C82592 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C168 +
            (C82592 * C441 - C239 * C310) * C82581) *
               C81 +
           ((C253 - C254) * C168 + (C448 - C449) * C82581) * C82 +
           ((C257 - C258) * C168 + (C450 - C451) * C82581) * C83 +
           ((C261 - C262) * C168 + (C452 - C453) * C82581) * C84 +
           ((C265 - C266) * C168 + (C454 - C455) * C82581) * C85) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C168 + (C449 - C448) * C82581) * C81 +
           ((C258 - C257) * C168 + (C451 - C450) * C82581) * C82 +
           ((C262 - C261) * C168 + (C453 - C452) * C82581) * C83 +
           ((C266 - C265) * C168 + (C455 - C454) * C82581) * C84 +
           ((C239 * C107 - C82592 * C245) * C168 +
            (C239 * C315 - C82592 * C446) * C82581) *
               C85) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C1743 +
            (C82592 * C441 - C239 * C310) * C82931 +
            (C82592 * C805 - C239 * C695) * C1744 +
            (C82592 * C956 - C239 * C857) * C82916 +
            (C82592 * C1852 - C239 * C1653) * C1745 +
            (C82592 * C2155 - C239 * C1950) * C82893) *
               C1641 +
           ((C253 - C254) * C1743 + (C448 - C449) * C82931 +
            (C1861 - C1862) * C1744 + (C2160 - C2161) * C82916 +
            (C1869 - C1870) * C1745 + (C2162 - C2163) * C82893) *
               C1642 +
           ((C257 - C258) * C1743 + (C450 - C451) * C82931 +
            (C1865 - C1866) * C1744 + (C2164 - C2165) * C82916 +
            (C1873 - C1874) * C1745 + (C2166 - C2167) * C82893) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C1743 + (C449 - C448) * C82931 +
            (C1862 - C1861) * C1744 + (C2161 - C2160) * C82916 +
            (C1870 - C1869) * C1745 + (C2163 - C2162) * C82893) *
               C1641 +
           ((C258 - C257) * C1743 + (C451 - C450) * C82931 +
            (C1866 - C1865) * C1744 + (C2165 - C2164) * C82916 +
            (C1874 - C1873) * C1745 + (C2167 - C2166) * C82893) *
               C1642 +
           ((C262 - C261) * C1743 + (C453 - C452) * C82931 +
            (C239 * C692 - C82592 * C808) * C1744 +
            (C239 * C860 - C82592 * C959) * C82916 +
            (C239 * C1656 - C82592 * C1855) * C1745 +
            (C239 * C1953 - C82592 * C2158) * C82893) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C13339 +
            (C82592 * C441 - C239 * C310) * C13256 + (C2740 - C2741) * C13340 +
            (C3006 - C3007) * C13257 + (C2744 - C2745) * C13341 +
            (C3008 - C3009) * C82893) *
               C82925 +
           ((C253 - C254) * C13339 + (C448 - C449) * C13256 +
            (C1861 - C1862) * C13340 + (C2160 - C2161) * C13257 +
            (C1869 - C1870) * C13341 + (C2162 - C2163) * C82893) *
               C82909 +
           ((C257 - C258) * C13339 + (C450 - C451) * C13256 +
            (C1865 - C1866) * C13340 + (C2164 - C2165) * C13257 +
            (C1873 - C1874) * C13341 + (C2166 - C2167) * C82893) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C254 - C253) * C13339 + (C449 - C448) * C13256 +
            (C1862 - C1861) * C13340 + (C2161 - C2160) * C13257 +
            (C1870 - C1869) * C13341 + (C2163 - C2162) * C82893) *
               C82925 +
           ((C258 - C257) * C13339 + (C451 - C450) * C13256 +
            (C1866 - C1865) * C13340 + (C2165 - C2164) * C13257 +
            (C1874 - C1873) * C13341 + (C2167 - C2166) * C82893) *
               C82909 +
           ((C262 - C261) * C13339 + (C453 - C452) * C13256 +
            (C6678 - C6677) * C13340 + (C6924 - C6923) * C13257 +
            (C239 * C1656 - C82592 * C1855) * C13341 +
            (C239 * C1953 - C82592 * C2158) * C82893) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C82592 * C240 - C239 * C102) * C15457 +
           (C82592 * C441 - C239 * C310) * C15400 + (C2740 - C2741) * C15458 +
           (C3006 - C3007) * C15401 + (C2744 - C2745) * C15459 +
           (C3008 - C3009) * C15402 + (C82592 * C2733 - C239 * C2527) * C15460 +
           (C82592 * C3002 - C239 * C2821) * C15403 +
           (C82592 * C15508 - C239 * C15407) * C15461 +
           (C82592 * C15649 - C239 * C15554) * C15404) *
              C82523 * C82938 * C82939 * C90 +
          ((C254 - C253) * C15457 + (C449 - C448) * C15400 +
           (C1862 - C1861) * C15458 + (C2161 - C2160) * C15401 +
           (C1870 - C1869) * C15459 + (C2163 - C2162) * C15402 +
           (C239 * C2526 - C82592 * C2734) * C15460 +
           (C239 * C2822 - C82592 * C3003) * C15403 +
           (C239 * C15408 - C82592 * C15509) * C15461 +
           (C239 * C15555 - C82592 * C15650) * C15404) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezx[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C108 - C92 * C102 + C82 * C110 - C94 * C103 + C83 * C112 -
            C96 * C104 + C84 * C114 - C98 * C105 + C85 * C116 - C100 * C106) *
               C239 +
           (C81 * C503 - C92 * C497 + C82 * C504 - C94 * C498 + C83 * C505 -
            C96 * C499 + C84 * C506 - C98 * C500 + C85 * C507 - C100 * C501) *
               C82592) *
              C82581 * C82938 * C82939 * C90 +
          ((C92 * C103 - C81 * C110 + C94 * C104 - C82 * C112 + C96 * C105 -
            C83 * C114 + C98 * C106 - C84 * C116 + C100 * C107 - C85 * C118) *
               C239 +
           (C92 * C498 - C81 * C504 + C94 * C499 - C82 * C505 + C96 * C500 -
            C83 * C506 + C98 * C501 - C84 * C507 + C100 * C502 - C85 * C508) *
               C82592) *
              C82581 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
             C82885 * C112 - C1651 * C104) *
                C239 +
            (C1641 * C503 - C1647 * C497 + C1642 * C504 - C1649 * C498 +
             C82885 * C505 - C1651 * C499) *
                C82592) *
               C82931 +
           ((C1641 * C704 - C1647 * C695 + C1642 * C702 - C1649 * C694 +
             C82885 * C700 - C1651 * C693) *
                C239 +
            (C1641 * C1008 - C1647 * C1003 + C1642 * C1009 - C1649 * C1004 +
             C82885 * C1010 - C1651 * C1005) *
                C82592) *
               C82916 +
           ((C1641 * C1657 - C1647 * C1653 + C1642 * C1659 - C1649 * C1654 +
             C82885 * C1661 - C1651 * C1655) *
                C239 +
            (C1641 * C2245 - C1647 * C2241 + C1642 * C2246 - C1649 * C2242 +
             C82885 * C2247 - C1651 * C2243) *
                C82592) *
               C82893) *
              C82938 * C82939 * C90 +
          (((C1647 * C103 - C1641 * C110 + C1649 * C104 - C1642 * C112 +
             C1651 * C105 - C82885 * C114) *
                C239 +
            (C1647 * C498 - C1641 * C504 + C1649 * C499 - C1642 * C505 +
             C1651 * C500 - C82885 * C506) *
                C82592) *
               C82931 +
           ((C1647 * C694 - C1641 * C702 + C1649 * C693 - C1642 * C700 +
             C1651 * C692 - C82885 * C698) *
                C239 +
            (C1647 * C1004 - C1641 * C1009 + C1649 * C1005 - C1642 * C1010 +
             C1651 * C1006 - C82885 * C1011) *
                C82592) *
               C82916 +
           ((C1647 * C1654 - C1641 * C1659 + C1649 * C1655 - C1642 * C1661 +
             C1651 * C1656 - C82885 * C1663) *
                C239 +
            (C1647 * C2242 - C1641 * C2246 + C1649 * C2243 - C1642 * C2247 +
             C1651 * C2244 - C82885 * C2248) *
                C82592) *
               C82893) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C239 +
            (C82925 * C503 - C13259 * C497 + C82909 * C504 - C13261 * C498 +
             C82885 * C505 - C13263 * C499) *
                C82592) *
               C13256 +
           ((C82925 * C704 - C13259 * C695 + C82909 * C702 - C13261 * C694 +
             C82885 * C700 - C13263 * C693) *
                C239 +
            (C82925 * C1008 - C13259 * C1003 + C82909 * C1009 - C13261 * C1004 +
             C82885 * C1010 - C13263 * C1005) *
                C82592) *
               C13257 +
           ((C82925 * C1657 - C13259 * C1653 + C82909 * C1659 - C13261 * C1654 +
             C82885 * C1661 - C13263 * C1655) *
                C239 +
            (C82925 * C2245 - C13259 * C2241 + C82909 * C2246 - C13261 * C2242 +
             C82885 * C2247 - C13263 * C2243) *
                C82592) *
               C82893) *
              C82938 * C82939 * C90 +
          (((C13259 * C103 - C82925 * C110 + C13261 * C104 - C82909 * C112 +
             C13263 * C105 - C82885 * C114) *
                C239 +
            (C13259 * C498 - C82925 * C504 + C13261 * C499 - C82909 * C505 +
             C13263 * C500 - C82885 * C506) *
                C82592) *
               C13256 +
           ((C13259 * C694 - C82925 * C702 + C13261 * C693 - C82909 * C700 +
             C13263 * C692 - C82885 * C698) *
                C239 +
            (C13259 * C1004 - C82925 * C1009 + C13261 * C1005 - C82909 * C1010 +
             C13263 * C1006 - C82885 * C1011) *
                C82592) *
               C13257 +
           ((C13259 * C1654 - C82925 * C1659 + C13261 * C1655 - C82909 * C1661 +
             C13263 * C1656 - C82885 * C1663) *
                C239 +
            (C13259 * C2242 - C82925 * C2246 + C13261 * C2243 - C82909 * C2247 +
             C13263 * C2244 - C82885 * C2248) *
                C82592) *
               C82893) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C239 +
            (C82523 * C503 - C15405 * C497) * C82592) *
               C15400 +
           ((C82523 * C704 - C15405 * C695) * C239 +
            (C82523 * C1008 - C15405 * C1003) * C82592) *
               C15401 +
           ((C82523 * C1657 - C15405 * C1653) * C239 +
            (C82523 * C2245 - C15405 * C2241) * C82592) *
               C15402 +
           ((C82523 * C2532 - C15405 * C2527) * C239 +
            (C82523 * C3086 - C15405 * C3083) * C82592) *
               C15403 +
           ((C82523 * C15409 - C15405 * C15407) * C239 +
            (C82523 * C15695 - C15405 * C15693) * C82592) *
               C15404) *
              C82938 * C82939 * C90 +
          (((C15405 * C103 - C82523 * C110) * C239 +
            (C15405 * C498 - C82523 * C504) * C82592) *
               C15400 +
           ((C15405 * C694 - C82523 * C702) * C239 +
            (C15405 * C1004 - C82523 * C1009) * C82592) *
               C15401 +
           ((C15405 * C1654 - C82523 * C1659) * C239 +
            (C15405 * C2242 - C82523 * C2246) * C82592) *
               C15402 +
           ((C15405 * C2526 - C82523 * C2530) * C239 +
            (C15405 * C3084 - C82523 * C3087) * C82592) *
               C15403 +
           ((C15405 * C15408 - C82523 * C15411) * C239 +
            (C15405 * C15694 - C82523 * C15696) * C82592) *
               C15404) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C239 +
            (C82581 * C551 - C168 * C497) * C82592) *
               C81 +
           ((C182 - C183) * C239 + (C558 - C559) * C82592) * C82 +
           ((C186 - C187) * C239 + (C560 - C561) * C82592) * C83 +
           ((C190 - C191) * C239 + (C562 - C563) * C82592) * C84 +
           ((C194 - C195) * C239 + (C564 - C565) * C82592) * C85) *
              C82938 * C82939 * C90 +
          (((C183 - C182) * C239 + (C559 - C558) * C82592) * C81 +
           ((C187 - C186) * C239 + (C561 - C560) * C82592) * C82 +
           ((C191 - C190) * C239 + (C563 - C562) * C82592) * C83 +
           ((C195 - C194) * C239 + (C565 - C564) * C82592) * C84 +
           ((C168 * C107 - C82581 * C174) * C239 +
            (C168 * C502 - C82581 * C556) * C82592) *
               C85) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
             C82893 * C1746 - C1745 * C1653) *
                C239 +
            (C82931 * C551 - C1743 * C497 + C82916 * C1055 - C1744 * C1003 +
             C82893 * C2323 - C1745 * C2241) *
                C82592) *
               C1641 +
           ((C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C239 +
            (C2328 - C2329 + C2330 - C2331 + C2332 - C2333) * C82592) *
               C1642 +
           ((C1767 - C1768 + C1769 - C1770 + C1771 - C1772) * C239 +
            (C2334 - C2335 + C2336 - C2337 + C2338 - C2339) * C82592) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C1756 - C1755 + C1758 - C1757 + C1760 - C1759) * C239 +
            (C2329 - C2328 + C2331 - C2330 + C2333 - C2332) * C82592) *
               C1641 +
           ((C1768 - C1767 + C1770 - C1769 + C1772 - C1771) * C239 +
            (C2335 - C2334 + C2337 - C2336 + C2339 - C2338) * C82592) *
               C1642 +
           ((C1743 * C105 - C82931 * C172 + C1744 * C692 - C82916 * C756 +
             C1745 * C1656 - C82893 * C1749) *
                C239 +
            (C1743 * C500 - C82931 * C554 + C1744 * C1006 - C82916 * C1058 +
             C1745 * C2244 - C82893 * C2326) *
                C82592) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C239 +
            (C13256 * C551 - C13339 * C497 + C13257 * C1055 - C13340 * C1003 +
             C82893 * C2323 - C13341 * C2241) *
                C82592) *
               C82925 +
           ((C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C239 +
            (C13856 - C13857 + C13858 - C13859 + C13860 - C13861) * C82592) *
               C82909 +
           ((C13355 - C13356 + C13357 - C13358 + C13359 - C13360) * C239 +
            (C13862 - C13863 + C13864 - C13865 + C13866 - C13867) * C82592) *
               C82885) *
              C82938 * C82939 * C90 +
          (((C13344 - C13343 + C13346 - C13345 + C13348 - C13347) * C239 +
            (C13857 - C13856 + C13859 - C13858 + C13861 - C13860) * C82592) *
               C82925 +
           ((C13356 - C13355 + C13358 - C13357 + C13360 - C13359) * C239 +
            (C13863 - C13862 + C13865 - C13864 + C13867 - C13866) * C82592) *
               C82909 +
           ((C13339 * C105 - C13256 * C172 + C13340 * C692 - C13257 * C756 +
             C13341 * C1656 - C82893 * C1749) *
                C239 +
            (C13339 * C500 - C13256 * C554 + C13340 * C1006 - C13257 * C1058 +
             C13341 * C2244 - C82893 * C2326) *
                C82592) *
               C82885) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15400 * C169 - C15457 * C102 + C15401 * C753 - C15458 * C695 +
            C15402 * C1746 - C15459 * C1653 + C15403 * C2653 - C15460 * C2527 +
            C15404 * C15462 - C15461 * C15407) *
               C239 +
           (C15400 * C551 - C15457 * C497 + C15401 * C1055 - C15458 * C1003 +
            C15402 * C2323 - C15459 * C2241 + C15403 * C3175 - C15460 * C3083 +
            C15404 * C15739 - C15461 * C15693) *
               C82592) *
              C82523 * C82938 * C82939 * C90 +
          ((C15457 * C103 - C15400 * C170 + C15458 * C694 - C15401 * C754 +
            C15459 * C1654 - C15402 * C1747 + C15460 * C2526 - C15403 * C2654 +
            C15461 * C15408 - C15404 * C15463) *
               C239 +
           (C15457 * C498 - C15400 * C552 + C15458 * C1004 - C15401 * C1056 +
            C15459 * C2242 - C15402 * C2324 + C15460 * C3084 - C15403 * C3176 +
            C15461 * C15694 - C15404 * C15740) *
               C82592) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82581 *
               C81 +
           C643 * C82 + C644 * C83 + C645 * C84 + C646 * C85) *
              C82938 * C82939 * C90 -
          ((C239 * C245 - C607 * C107 - C239 * C502 + C82592 * C613) * C82581 *
               C85 +
           C646 * C84 + C645 * C83 + C644 * C82 + C643 * C81) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82931 +
            (C239 * C805 - C607 * C695 - C239 * C1003 + C82592 * C1106) *
                C82916 +
            (C239 * C1852 - C607 * C1653 - C239 * C2241 + C82592 * C2413) *
                C82893) *
               C1641 +
           (C2418 + C2448 + C2449) * C1642 + (C2427 + C2450 + C2451) * C82885) *
              C82938 * C82939 * C90 -
          (((C239 * C1855 - C607 * C1656 - C239 * C2244 + C82592 * C2416) *
                C82893 +
            (C239 * C808 - C607 * C692 - C239 * C1006 + C82592 * C1103) *
                C82916 +
            C641 * C82931) *
               C82885 +
           (C2451 + C2450 + C2427) * C1642 + (C2449 + C2448 + C2418) * C1641) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C13256 +
            C3268 * C13257 + C3269 * C82893) *
               C82925 +
           (C13942 + C13943 + C13944) * C82909 +
           (C13945 + C13946 + C13947) * C82885) *
              C82938 * C82939 * C90 -
          (((C239 * C1855 - C607 * C1656 - C239 * C2244 + C82592 * C2416) *
                C82893 +
            C7146 * C13257 + C641 * C13256) *
               C82885 +
           (C13947 + C13946 + C13945) * C82909 +
           (C13944 + C13943 + C13942) * C82925) *
              C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C15400 +
           C3268 * C15401 + C3269 * C15402 +
           (C239 * C2733 - C607 * C2527 - C239 * C3083 + C82592 * C3254) *
               C15403 +
           (C239 * C15508 - C607 * C15407 - C239 * C15693 + C82592 * C15783) *
               C15404) *
              C82523 * C82938 * C82939 * C90 -
          ((C239 * C15509 - C607 * C15408 - C239 * C15694 + C82592 * C15784) *
               C15404 +
           (C239 * C2734 - C607 * C2526 - C239 * C3084 + C82592 * C3253) *
               C15403 +
           C2445 * C15402 + C2444 * C15401 + C639 * C15400) *
              C82523 * C82938 * C82939 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexx[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C92 * C108 - C93 * C102 - C92 * C109 + C81 * C120 + C94 * C110 -
           C95 * C103 - C94 * C111 + C82 * C121 + C96 * C112 - C97 * C104 -
           C96 * C113 + C83 * C122 + C98 * C114 - C99 * C105 - C98 * C115 +
           C84 * C123 + C100 * C116 - C101 * C106 - C100 * C117 + C85 * C124) *
              C82592 * C82581 * C82938 * C688 -
          (C100 * C696 - C101 * C691 - C100 * C697 + C85 * C706 + C98 * C698 -
           C99 * C692 - C98 * C699 + C84 * C707 + C96 * C700 - C97 * C693 -
           C96 * C701 + C83 * C708 + C94 * C702 - C95 * C694 - C94 * C703 +
           C82 * C709 + C92 * C704 - C93 * C695 - C92 * C705 + C81 * C710) *
              C82592 * C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1647 * C108 - C1648 * C102 - C1647 * C109 + C1641 * C120 +
            C1649 * C110 - C1650 * C103 - C1649 * C111 + C1642 * C121 +
            C1651 * C112 - C1652 * C104 - C1651 * C113 + C82885 * C122) *
               C82592 * C82931 +
           (C2574 + C2575 + C2576) * C82592 * C82916 +
           (C2577 + C2578 + C2579) * C82592 * C82893) *
              C82938 * C688 -
          ((C1651 * C2528 - C1652 * C2525 - C1651 * C2529 + C82885 * C2534 +
            C1649 * C2530 - C1650 * C2526 - C1649 * C2531 + C1642 * C2535 +
            C1647 * C2532 - C1648 * C2527 - C1647 * C2533 + C1641 * C2536) *
               C82592 * C82893 +
           (C2579 + C2578 + C2577) * C82592 * C82916 +
           (C2576 + C2575 + C2574) * C82592 * C82931) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13259 * C108 - C13260 * C102 - C13259 * C109 + C82925 * C120 +
            C13261 * C110 - C13262 * C103 - C13261 * C111 + C82909 * C121 +
            C13263 * C112 - C13264 * C104 - C13263 * C113 + C82885 * C122) *
               C82592 * C13256 +
           (C14058 + C14059 + C14060) * C82592 * C13257 +
           (C14061 + C14062 + C14063) * C82592 * C82893) *
              C82938 * C688 -
          ((C13263 * C2528 - C13264 * C2525 - C13263 * C2529 + C82885 * C2534 +
            C13261 * C2530 - C13262 * C2526 - C13261 * C2531 + C82909 * C2535 +
            C13259 * C2532 - C13260 * C2527 - C13259 * C2533 + C82925 * C2536) *
               C82592 * C82893 +
           (C14063 + C14062 + C14061) * C82592 * C13257 +
           (C14060 + C14059 + C14058) * C82592 * C13256) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
               C82592 * C15400 +
           C15860 * C15401 + C15861 * C15402 + C15862 * C15403 +
           C15863 * C15404) *
              C82938 * C688 -
          ((C15405 * C15828 - C15406 * C15827 - C15405 * C15829 +
            C82523 * C15830) *
               C82592 * C15404 +
           C15863 * C15403 + C15862 * C15402 + C15861 * C15401 +
           C15860 * C15400) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C82581 * C169 - C168 * C102) * C92 +
           (C82581 * C175 - C168 * C109) * C81 + (C182 - C183) * C94 +
           (C184 - C185) * C82 + (C186 - C187) * C96 + (C188 - C189) * C83 +
           (C190 - C191) * C98 + (C192 - C193) * C84 + (C194 - C195) * C100 +
           (C196 - C197) * C85) *
              C82592 * C82938 * C688 +
          ((C168 * C695 - C82581 * C753) * C92 +
           (C168 * C705 - C82581 * C758) * C81 +
           (C168 * C694 - C82581 * C754) * C94 +
           (C168 * C703 - C82581 * C759) * C82 +
           (C168 * C693 - C82581 * C755) * C96 +
           (C168 * C701 - C82581 * C760) * C83 +
           (C168 * C692 - C82581 * C756) * C98 +
           (C168 * C699 - C82581 * C761) * C84 +
           (C168 * C691 - C82581 * C757) * C100 +
           (C168 * C697 - C82581 * C762) * C85) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
            C82893 * C1746 - C1745 * C1653) *
               C1647 +
           (C82931 * C175 - C1743 * C109 + C82916 * C758 - C1744 * C705 +
            C82893 * C1750 - C1745 * C1658) *
               C1641 +
           (C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C1649 +
           (C1761 - C1762 + C1763 - C1764 + C1765 - C1766) * C1642 +
           (C1767 - C1768 + C1769 - C1770 + C1771 - C1772) * C1651 +
           (C1773 - C1774 + C1775 - C1776 + C1777 - C1778) * C82885) *
              C82592 * C82938 * C688 +
          ((C1743 * C695 - C82931 * C753 + C1744 * C1653 - C82916 * C1746 +
            C1745 * C2527 - C82893 * C2653) *
               C1647 +
           (C1743 * C705 - C82931 * C758 + C1744 * C1658 - C82916 * C1750 +
            C1745 * C2533 - C82893 * C2656) *
               C1641 +
           (C1743 * C694 - C82931 * C754 + C1744 * C1654 - C82916 * C1747 +
            C1745 * C2526 - C82893 * C2654) *
               C1649 +
           (C1743 * C703 - C82931 * C759 + C1744 * C1660 - C82916 * C1751 +
            C1745 * C2531 - C82893 * C2657) *
               C1642 +
           (C1743 * C693 - C82931 * C755 + C1744 * C1655 - C82916 * C1748 +
            C1745 * C2525 - C82893 * C2655) *
               C1651 +
           (C1743 * C701 - C82931 * C760 + C1744 * C1662 - C82916 * C1752 +
            C1745 * C2529 - C82893 * C2658) *
               C82885) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
            C82893 * C1746 - C13341 * C1653) *
               C13259 +
           (C13256 * C175 - C13339 * C109 + C13257 * C758 - C13340 * C705 +
            C82893 * C1750 - C13341 * C1658) *
               C82925 +
           (C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C13261 +
           (C13349 - C13350 + C13351 - C13352 + C13353 - C13354) * C82909 +
           (C13355 - C13356 + C13357 - C13358 + C13359 - C13360) * C13263 +
           (C13361 - C13362 + C13363 - C13364 + C13365 - C13366) * C82885) *
              C82592 * C82938 * C688 +
          ((C13339 * C695 - C13256 * C753 + C13340 * C1653 - C13257 * C1746 +
            C13341 * C2527 - C82893 * C2653) *
               C13259 +
           (C13339 * C705 - C13256 * C758 + C13340 * C1658 - C13257 * C1750 +
            C13341 * C2533 - C82893 * C2656) *
               C82925 +
           (C13339 * C694 - C13256 * C754 + C13340 * C1654 - C13257 * C1747 +
            C13341 * C2526 - C82893 * C2654) *
               C13261 +
           (C13339 * C703 - C13256 * C759 + C13340 * C1660 - C13257 * C1751 +
            C13341 * C2531 - C82893 * C2657) *
               C82909 +
           (C13339 * C693 - C13256 * C755 + C13340 * C1655 - C13257 * C1748 +
            C13341 * C2525 - C82893 * C2655) *
               C13263 +
           (C13339 * C701 - C13256 * C760 + C13340 * C1662 - C13257 * C1752 +
            C13341 * C2529 - C82893 * C2658) *
               C82885) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15400 * C169 - C15457 * C102 + C15401 * C753 - C15458 * C695 +
            C15402 * C1746 - C15459 * C1653 + C15403 * C2653 - C15460 * C2527 +
            C15404 * C15462 - C15461 * C15407) *
               C15405 +
           (C15400 * C175 - C15457 * C109 + C15401 * C758 - C15458 * C705 +
            C15402 * C1750 - C15459 * C1658 + C15403 * C2656 - C15460 * C2533 +
            C15404 * C15464 - C15461 * C15410) *
               C82523) *
              C82592 * C82938 * C688 +
          ((C15457 * C695 - C15400 * C753 + C15458 * C1653 - C15401 * C1746 +
            C15459 * C2527 - C15402 * C2653 + C15460 * C15407 -
            C15403 * C15462 + C15461 * C15827 - C15404 * C15905) *
               C15405 +
           (C15457 * C705 - C15400 * C758 + C15458 * C1658 - C15401 * C1750 +
            C15459 * C2533 - C15402 * C2656 + C15460 * C15410 -
            C15403 * C15464 + C15461 * C15829 - C15404 * C15906) *
               C82523) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C82592 * C240 - C239 * C102) * C92 +
           (C82592 * C246 - C239 * C109) * C81 + (C253 - C254) * C94 +
           (C255 - C256) * C82 + (C257 - C258) * C96 + (C259 - C260) * C83 +
           (C261 - C262) * C98 + (C263 - C264) * C84 + (C265 - C266) * C100 +
           (C267 - C268) * C85) *
              C82581 * C82938 * C688 +
          ((C239 * C695 - C82592 * C805) * C92 +
           (C239 * C705 - C82592 * C810) * C81 +
           (C239 * C694 - C82592 * C806) * C94 +
           (C239 * C703 - C82592 * C811) * C82 +
           (C239 * C693 - C82592 * C807) * C96 +
           (C239 * C701 - C82592 * C812) * C83 +
           (C239 * C692 - C82592 * C808) * C98 +
           (C239 * C699 - C82592 * C813) * C84 +
           (C239 * C691 - C82592 * C809) * C100 +
           (C239 * C697 - C82592 * C814) * C85) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C1647 +
            (C82592 * C246 - C239 * C109) * C1641 + (C253 - C254) * C1649 +
            (C255 - C256) * C1642 + (C257 - C258) * C1651 +
            (C259 - C260) * C82885) *
               C82931 +
           ((C2740 - C2741) * C1647 + (C2742 - C2743) * C1641 +
            (C1861 - C1862) * C1649 + (C1863 - C1864) * C1642 +
            (C1865 - C1866) * C1651 + (C1867 - C1868) * C82885) *
               C82916 +
           ((C2744 - C2745) * C1647 + (C2746 - C2747) * C1641 +
            (C1869 - C1870) * C1649 + (C1871 - C1872) * C1642 +
            (C1873 - C1874) * C1651 + (C1875 - C1876) * C82885) *
               C82893) *
              C82938 * C688 +
          (((C2741 - C2740) * C1647 + (C2743 - C2742) * C1641 +
            (C1862 - C1861) * C1649 + (C1864 - C1863) * C1642 +
            (C1866 - C1865) * C1651 + (C1868 - C1867) * C82885) *
               C82931 +
           ((C2745 - C2744) * C1647 + (C2747 - C2746) * C1641 +
            (C1870 - C1869) * C1649 + (C1872 - C1871) * C1642 +
            (C1874 - C1873) * C1651 + (C1876 - C1875) * C82885) *
               C82916 +
           ((C239 * C2527 - C82592 * C2733) * C1647 +
            (C239 * C2533 - C82592 * C2736) * C1641 +
            (C239 * C2526 - C82592 * C2734) * C1649 +
            (C239 * C2531 - C82592 * C2737) * C1642 +
            (C239 * C2525 - C82592 * C2735) * C1651 +
            (C239 * C2529 - C82592 * C2738) * C82885) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C13259 +
            (C82592 * C246 - C239 * C109) * C82925 + (C253 - C254) * C13261 +
            (C255 - C256) * C82909 + (C257 - C258) * C13263 +
            (C259 - C260) * C82885) *
               C13256 +
           ((C2740 - C2741) * C13259 + (C2742 - C2743) * C82925 +
            (C1861 - C1862) * C13261 + (C1863 - C1864) * C82909 +
            (C1865 - C1866) * C13263 + (C1867 - C1868) * C82885) *
               C13257 +
           ((C2744 - C2745) * C13259 + (C2746 - C2747) * C82925 +
            (C1869 - C1870) * C13261 + (C1871 - C1872) * C82909 +
            (C1873 - C1874) * C13263 + (C1875 - C1876) * C82885) *
               C82893) *
              C82938 * C688 +
          (((C2741 - C2740) * C13259 + (C2743 - C2742) * C82925 +
            (C1862 - C1861) * C13261 + (C1864 - C1863) * C82909 +
            (C1866 - C1865) * C13263 + (C1868 - C1867) * C82885) *
               C13256 +
           ((C2745 - C2744) * C13259 + (C2747 - C2746) * C82925 +
            (C1870 - C1869) * C13261 + (C1872 - C1871) * C82909 +
            (C1874 - C1873) * C13263 + (C1876 - C1875) * C82885) *
               C13257 +
           ((C239 * C2527 - C82592 * C2733) * C13259 +
            (C239 * C2533 - C82592 * C2736) * C82925 +
            (C239 * C2526 - C82592 * C2734) * C13261 +
            (C239 * C2531 - C82592 * C2737) * C82909 +
            (C239 * C2525 - C82592 * C2735) * C13263 +
            (C239 * C2529 - C82592 * C2738) * C82885) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C15405 +
            (C82592 * C246 - C239 * C109) * C82523) *
               C15400 +
           ((C2740 - C2741) * C15405 + (C2742 - C2743) * C82523) * C15401 +
           ((C2744 - C2745) * C15405 + (C2746 - C2747) * C82523) * C15402 +
           ((C15952 - C15953) * C15405 + (C15954 - C15955) * C82523) * C15403 +
           ((C15956 - C15957) * C15405 + (C15958 - C15959) * C82523) * C15404) *
              C82938 * C688 +
          (((C2741 - C2740) * C15405 + (C2743 - C2742) * C82523) * C15400 +
           ((C2745 - C2744) * C15405 + (C2747 - C2746) * C82523) * C15401 +
           ((C15953 - C15952) * C15405 + (C15955 - C15954) * C82523) * C15402 +
           ((C15957 - C15956) * C15405 + (C15959 - C15958) * C82523) * C15403 +
           ((C239 * C15827 - C82592 * C15949) * C15405 +
            (C239 * C15829 - C82592 * C15950) * C82523) *
               C15404) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C108 - C92 * C102 + C82 * C110 - C94 * C103 + C83 * C112 -
            C96 * C104 + C84 * C114 - C98 * C105 + C85 * C116 - C100 * C106) *
               C168 +
           (C81 * C316 - C92 * C310 + C82 * C317 - C94 * C311 + C83 * C318 -
            C96 * C312 + C84 * C319 - C98 * C313 + C85 * C320 - C100 * C314) *
               C82581) *
              C82592 * C82938 * C688 +
          ((C92 * C695 - C81 * C704 + C94 * C694 - C82 * C702 + C96 * C693 -
            C83 * C700 + C98 * C692 - C84 * C698 + C100 * C691 - C85 * C696) *
               C168 +
           (C92 * C857 - C81 * C862 + C94 * C858 - C82 * C863 + C96 * C859 -
            C83 * C864 + C98 * C860 - C84 * C865 + C100 * C861 - C85 * C866) *
               C82581) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
            C82885 * C112 - C1651 * C104) *
               C1743 +
           (C1641 * C316 - C1647 * C310 + C1642 * C317 - C1649 * C311 +
            C82885 * C318 - C1651 * C312) *
               C82931 +
           (C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C1744 +
           (C2834 - C2835 + C2836 - C2837 + C2838 - C2839) * C82916 +
           (C2840 - C2841 + C2842 - C2843 + C2844 - C2845) * C1745 +
           (C2846 - C2847 + C2848 - C2849 + C2850 - C2851) * C82893) *
              C82592 * C82938 * C688 +
          ((C2829 - C2828 + C2831 - C2830 + C2833 - C2832) * C1743 +
           (C2835 - C2834 + C2837 - C2836 + C2839 - C2838) * C82931 +
           (C2841 - C2840 + C2843 - C2842 + C2845 - C2844) * C1744 +
           (C2847 - C2846 + C2849 - C2848 + C2851 - C2850) * C82916 +
           (C1647 * C2527 - C1641 * C2532 + C1649 * C2526 - C1642 * C2530 +
            C1651 * C2525 - C82885 * C2528) *
               C1745 +
           (C1647 * C2821 - C1641 * C2824 + C1649 * C2822 - C1642 * C2825 +
            C1651 * C2823 - C82885 * C2826) *
               C82893) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
            C82885 * C112 - C13263 * C104) *
               C13339 +
           (C82925 * C316 - C13259 * C310 + C82909 * C317 - C13261 * C311 +
            C82885 * C318 - C13263 * C312) *
               C13256 +
           (C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C13340 +
           (C14292 - C14293 + C14294 - C14295 + C14296 - C14297) * C13257 +
           (C14298 - C14299 + C14300 - C14301 + C14302 - C14303) * C13341 +
           (C14304 - C14305 + C14306 - C14307 + C14308 - C14309) * C82893) *
              C82592 * C82938 * C688 +
          ((C14287 - C14286 + C14289 - C14288 + C14291 - C14290) * C13339 +
           (C14293 - C14292 + C14295 - C14294 + C14297 - C14296) * C13256 +
           (C14299 - C14298 + C14301 - C14300 + C14303 - C14302) * C13340 +
           (C14305 - C14304 + C14307 - C14306 + C14309 - C14308) * C13257 +
           (C13259 * C2527 - C82925 * C2532 + C13261 * C2526 - C82909 * C2530 +
            C13263 * C2525 - C82885 * C2528) *
               C13341 +
           (C13259 * C2821 - C82925 * C2824 + C13261 * C2822 - C82909 * C2825 +
            C13263 * C2823 - C82885 * C2826) *
               C82893) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C82523 * C108 - C15405 * C102) * C15457 +
           (C82523 * C316 - C15405 * C310) * C15400 +
           (C16004 - C16005) * C15458 + (C16006 - C16007) * C15401 +
           (C16008 - C16009) * C15459 + (C16010 - C16011) * C15402 +
           (C16012 - C16013) * C15460 + (C16014 - C16015) * C15403 +
           (C16016 - C16017) * C15461 + (C16018 - C16019) * C15404) *
              C82592 * C82938 * C688 +
          ((C16005 - C16004) * C15457 + (C16007 - C16006) * C15400 +
           (C16009 - C16008) * C15458 + (C16011 - C16010) * C15401 +
           (C16013 - C16012) * C15459 + (C16015 - C16014) * C15402 +
           (C16017 - C16016) * C15460 + (C16019 - C16018) * C15403 +
           (C15405 * C15827 - C82523 * C15828) * C15461 +
           (C15405 * C16001 - C82523 * C16002) * C15404) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C81 +
           C396 * C82 + C397 * C83 + C398 * C84 + C399 * C85) *
              C82592 * C82938 * C688 -
          ((C168 * C757 - C364 * C691 - C168 * C861 + C82581 * C909) * C85 +
           (C168 * C756 - C364 * C692 - C168 * C860 + C82581 * C910) * C84 +
           (C168 * C755 - C364 * C693 - C168 * C859 + C82581 * C911) * C83 +
           (C168 * C754 - C364 * C694 - C168 * C858 + C82581 * C912) * C82 +
           (C168 * C753 - C364 * C695 - C168 * C857 + C82581 * C913) * C81) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1743 * C169 - C2032 * C102 - C1743 * C310 + C82931 * C365 +
            C1744 * C753 - C2033 * C695 - C1744 * C857 + C82916 * C913 +
            C1745 * C1746 - C2034 * C1653 - C1745 * C1950 + C82893 * C2035) *
               C1641 +
           (C2076 + C2077 + C2078) * C1642 + (C2079 + C2080 + C2081) * C82885) *
              C82592 * C82938 * C688 -
          ((C1745 * C2655 - C2034 * C2525 - C1745 * C2823 + C82893 * C2925 +
            C1744 * C1748 - C2033 * C1655 - C1744 * C1952 + C82916 * C2037 +
            C1743 * C755 - C2032 * C693 - C1743 * C859 + C82931 * C911) *
               C82885 +
           (C1745 * C2654 - C2034 * C2526 - C1745 * C2822 + C82893 * C2926 +
            C1744 * C1747 - C2033 * C1654 - C1744 * C1951 + C82916 * C2036 +
            C1743 * C754 - C2032 * C694 - C1743 * C858 + C82931 * C912) *
               C1642 +
           (C1745 * C2653 - C2034 * C2527 - C1745 * C2821 + C82893 * C2927 +
            C1744 * C1746 - C2033 * C1653 - C1744 * C1950 + C82916 * C2035 +
            C1743 * C753 - C2032 * C695 - C1743 * C857 + C82931 * C913) *
               C1641) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13339 * C169 - C13588 * C102 - C13339 * C310 + C13256 * C365 +
            C13340 * C753 - C13589 * C695 - C13340 * C857 + C13257 * C913 +
            C13341 * C1746 - C13590 * C1653 - C13341 * C1950 + C82893 * C2035) *
               C82925 +
           (C13628 + C13629 + C13630) * C82909 +
           (C13631 + C13632 + C13633) * C82885) *
              C82592 * C82938 * C688 -
          ((C13341 * C2655 - C13590 * C2525 - C13341 * C2823 + C82893 * C2925 +
            C13340 * C1748 - C13589 * C1655 - C13340 * C1952 + C13257 * C2037 +
            C13339 * C755 - C13588 * C693 - C13339 * C859 + C13256 * C911) *
               C82885 +
           (C13341 * C2654 - C13590 * C2526 - C13341 * C2822 + C82893 * C2926 +
            C13340 * C1747 - C13589 * C1654 - C13340 * C1951 + C13257 * C2036 +
            C13339 * C754 - C13588 * C694 - C13339 * C858 + C13256 * C912) *
               C82909 +
           (C13341 * C2653 - C13590 * C2527 - C13341 * C2821 + C82893 * C2927 +
            C13340 * C1746 - C13589 * C1653 - C13340 * C1950 + C13257 * C2035 +
            C13339 * C753 - C13588 * C695 - C13339 * C857 + C13256 * C913) *
               C82925) *
              C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C15457 * C169 - C15600 * C102 - C15457 * C310 + C15400 * C365 +
           C15458 * C753 - C15601 * C695 - C15458 * C857 + C15401 * C913 +
           C15459 * C1746 - C15602 * C1653 - C15459 * C1950 + C15402 * C2035 +
           C15460 * C2653 - C15603 * C2527 - C15460 * C2821 + C15403 * C2927 +
           C15461 * C15462 - C15604 * C15407 - C15461 * C15554 +
           C15404 * C15605) *
              C82523 * C82592 * C82938 * C688 -
          (C15461 * C15905 - C15604 * C15827 - C15461 * C16001 +
           C15404 * C16061 + C15460 * C15462 - C15603 * C15407 -
           C15460 * C15554 + C15403 * C15605 + C15459 * C2653 - C15602 * C2527 -
           C15459 * C2821 + C15402 * C2927 + C15458 * C1746 - C15601 * C1653 -
           C15458 * C1950 + C15401 * C2035 + C15457 * C753 - C15600 * C695 -
           C15457 * C857 + C15400 * C913) *
              C82523 * C82592 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[73] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C168 +
                      (C82592 * C441 - C239 * C310) * C82581) *
                         C81 +
                     ((C253 - C254) * C168 + (C448 - C449) * C82581) * C82 +
                     ((C257 - C258) * C168 + (C450 - C451) * C82581) * C83 +
                     ((C261 - C262) * C168 + (C452 - C453) * C82581) * C84 +
                     ((C265 - C266) * C168 + (C454 - C455) * C82581) * C85) *
                        C82938 * C688 +
                    (((C239 * C695 - C82592 * C805) * C168 +
                      (C239 * C857 - C82592 * C956) * C82581) *
                         C81 +
                     ((C239 * C694 - C82592 * C806) * C168 +
                      (C239 * C858 - C82592 * C957) * C82581) *
                         C82 +
                     ((C239 * C693 - C82592 * C807) * C168 +
                      (C239 * C859 - C82592 * C958) * C82581) *
                         C83 +
                     ((C239 * C692 - C82592 * C808) * C168 +
                      (C239 * C860 - C82592 * C959) * C82581) *
                         C84 +
                     ((C239 * C691 - C82592 * C809) * C168 +
                      (C239 * C861 - C82592 * C960) * C82581) *
                         C85) *
                        C82938 * C689) *
                   C82940) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C1743 +
                      (C82592 * C441 - C239 * C310) * C82931 +
                      (C2740 - C2741) * C1744 + (C3006 - C3007) * C82916 +
                      (C2744 - C2745) * C1745 + (C3008 - C3009) * C82893) *
                         C1641 +
                     ((C253 - C254) * C1743 + (C448 - C449) * C82931 +
                      (C1861 - C1862) * C1744 + (C2160 - C2161) * C82916 +
                      (C1869 - C1870) * C1745 + (C2162 - C2163) * C82893) *
                         C1642 +
                     ((C257 - C258) * C1743 + (C450 - C451) * C82931 +
                      (C1865 - C1866) * C1744 + (C2164 - C2165) * C82916 +
                      (C1873 - C1874) * C1745 + (C2166 - C2167) * C82893) *
                         C82885) *
                        C82938 * C688 +
                    (((C2741 - C2740) * C1743 + (C3007 - C3006) * C82931 +
                      (C2745 - C2744) * C1744 + (C3009 - C3008) * C82916 +
                      (C239 * C2527 - C82592 * C2733) * C1745 +
                      (C239 * C2821 - C82592 * C3002) * C82893) *
                         C1641 +
                     ((C1862 - C1861) * C1743 + (C2161 - C2160) * C82931 +
                      (C1870 - C1869) * C1744 + (C2163 - C2162) * C82916 +
                      (C239 * C2526 - C82592 * C2734) * C1745 +
                      (C239 * C2822 - C82592 * C3003) * C82893) *
                         C1642 +
                     ((C1866 - C1865) * C1743 + (C2165 - C2164) * C82931 +
                      (C1874 - C1873) * C1744 + (C2167 - C2166) * C82916 +
                      (C239 * C2525 - C82592 * C2735) * C1745 +
                      (C239 * C2823 - C82592 * C3004) * C82893) *
                         C82885) *
                        C82938 * C689) *
                   C82940) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C13339 +
                      (C82592 * C441 - C239 * C310) * C13256 +
                      (C2740 - C2741) * C13340 + (C3006 - C3007) * C13257 +
                      (C2744 - C2745) * C13341 + (C3008 - C3009) * C82893) *
                         C82925 +
                     ((C253 - C254) * C13339 + (C448 - C449) * C13256 +
                      (C1861 - C1862) * C13340 + (C2160 - C2161) * C13257 +
                      (C1869 - C1870) * C13341 + (C2162 - C2163) * C82893) *
                         C82909 +
                     ((C257 - C258) * C13339 + (C450 - C451) * C13256 +
                      (C1865 - C1866) * C13340 + (C2164 - C2165) * C13257 +
                      (C1873 - C1874) * C13341 + (C2166 - C2167) * C82893) *
                         C82885) *
                        C82938 * C688 +
                    (((C2741 - C2740) * C13339 + (C3007 - C3006) * C13256 +
                      (C2745 - C2744) * C13340 + (C3009 - C3008) * C13257 +
                      (C239 * C2527 - C82592 * C2733) * C13341 +
                      (C239 * C2821 - C82592 * C3002) * C82893) *
                         C82925 +
                     ((C1862 - C1861) * C13339 + (C2161 - C2160) * C13256 +
                      (C1870 - C1869) * C13340 + (C2163 - C2162) * C13257 +
                      (C239 * C2526 - C82592 * C2734) * C13341 +
                      (C239 * C2822 - C82592 * C3003) * C82893) *
                         C82909 +
                     ((C1866 - C1865) * C13339 + (C2165 - C2164) * C13256 +
                      (C1874 - C1873) * C13340 + (C2167 - C2166) * C13257 +
                      (C239 * C2525 - C82592 * C2735) * C13341 +
                      (C239 * C2823 - C82592 * C3004) * C82893) *
                         C82885) *
                        C82938 * C689) *
                   C82940) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C82592 * C240 - C239 * C102) * C15457 +
                     (C82592 * C441 - C239 * C310) * C15400 +
                     (C2740 - C2741) * C15458 + (C3006 - C3007) * C15401 +
                     (C2744 - C2745) * C15459 + (C3008 - C3009) * C15402 +
                     (C15952 - C15953) * C15460 + (C16106 - C16107) * C15403 +
                     (C15956 - C15957) * C15461 + (C16108 - C16109) * C15404) *
                        C82523 * C82938 * C688 +
                    ((C2741 - C2740) * C15457 + (C3007 - C3006) * C15400 +
                     (C2745 - C2744) * C15458 + (C3009 - C3008) * C15401 +
                     (C15953 - C15952) * C15459 + (C16107 - C16106) * C15402 +
                     (C15957 - C15956) * C15460 + (C16109 - C16108) * C15403 +
                     (C239 * C15827 - C82592 * C15949) * C15461 +
                     (C239 * C16001 - C82592 * C16104) * C15404) *
                        C82523 * C82938 * C689) *
                   C82940) /
                      (p * q * std::sqrt(p + q));
    d2eezx[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C108 - C92 * C102 + C82 * C110 - C94 * C103 + C83 * C112 -
            C96 * C104 + C84 * C114 - C98 * C105 + C85 * C116 - C100 * C106) *
               C239 +
           (C81 * C503 - C92 * C497 + C82 * C504 - C94 * C498 + C83 * C505 -
            C96 * C499 + C84 * C506 - C98 * C500 + C85 * C507 - C100 * C501) *
               C82592) *
              C82581 * C82938 * C688 +
          ((C92 * C695 - C81 * C704 + C94 * C694 - C82 * C702 + C96 * C693 -
            C83 * C700 + C98 * C692 - C84 * C698 + C100 * C691 - C85 * C696) *
               C239 +
           (C92 * C1003 - C81 * C1008 + C94 * C1004 - C82 * C1009 +
            C96 * C1005 - C83 * C1010 + C98 * C1006 - C84 * C1011 +
            C100 * C1007 - C85 * C1012) *
               C82592) *
              C82581 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
             C82885 * C112 - C1651 * C104) *
                C239 +
            (C1641 * C503 - C1647 * C497 + C1642 * C504 - C1649 * C498 +
             C82885 * C505 - C1651 * C499) *
                C82592) *
               C82931 +
           ((C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C239 +
            (C3090 - C3091 + C3092 - C3093 + C3094 - C3095) * C82592) *
               C82916 +
           ((C2840 - C2841 + C2842 - C2843 + C2844 - C2845) * C239 +
            (C3096 - C3097 + C3098 - C3099 + C3100 - C3101) * C82592) *
               C82893) *
              C82938 * C688 +
          (((C2829 - C2828 + C2831 - C2830 + C2833 - C2832) * C239 +
            (C3091 - C3090 + C3093 - C3092 + C3095 - C3094) * C82592) *
               C82931 +
           ((C2841 - C2840 + C2843 - C2842 + C2845 - C2844) * C239 +
            (C3097 - C3096 + C3099 - C3098 + C3101 - C3100) * C82592) *
               C82916 +
           ((C1647 * C2527 - C1641 * C2532 + C1649 * C2526 - C1642 * C2530 +
             C1651 * C2525 - C82885 * C2528) *
                C239 +
            (C1647 * C3083 - C1641 * C3086 + C1649 * C3084 - C1642 * C3087 +
             C1651 * C3085 - C82885 * C3088) *
                C82592) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C239 +
            (C82925 * C503 - C13259 * C497 + C82909 * C504 - C13261 * C498 +
             C82885 * C505 - C13263 * C499) *
                C82592) *
               C13256 +
           ((C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C239 +
            (C14532 - C14533 + C14534 - C14535 + C14536 - C14537) * C82592) *
               C13257 +
           ((C14298 - C14299 + C14300 - C14301 + C14302 - C14303) * C239 +
            (C14538 - C14539 + C14540 - C14541 + C14542 - C14543) * C82592) *
               C82893) *
              C82938 * C688 +
          (((C14287 - C14286 + C14289 - C14288 + C14291 - C14290) * C239 +
            (C14533 - C14532 + C14535 - C14534 + C14537 - C14536) * C82592) *
               C13256 +
           ((C14299 - C14298 + C14301 - C14300 + C14303 - C14302) * C239 +
            (C14539 - C14538 + C14541 - C14540 + C14543 - C14542) * C82592) *
               C13257 +
           ((C13259 * C2527 - C82925 * C2532 + C13261 * C2526 - C82909 * C2530 +
             C13263 * C2525 - C82885 * C2528) *
                C239 +
            (C13259 * C3083 - C82925 * C3086 + C13261 * C3084 - C82909 * C3087 +
             C13263 * C3085 - C82885 * C3088) *
                C82592) *
               C82893) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C239 +
            (C82523 * C503 - C15405 * C497) * C82592) *
               C15400 +
           ((C16004 - C16005) * C239 + (C16154 - C16155) * C82592) * C15401 +
           ((C16008 - C16009) * C239 + (C16156 - C16157) * C82592) * C15402 +
           ((C16012 - C16013) * C239 + (C16158 - C16159) * C82592) * C15403 +
           ((C16016 - C16017) * C239 + (C16160 - C16161) * C82592) * C15404) *
              C82938 * C688 +
          (((C16005 - C16004) * C239 + (C16155 - C16154) * C82592) * C15400 +
           ((C16009 - C16008) * C239 + (C16157 - C16156) * C82592) * C15401 +
           ((C16013 - C16012) * C239 + (C16159 - C16158) * C82592) * C15402 +
           ((C16017 - C16016) * C239 + (C16161 - C16160) * C82592) * C15403 +
           ((C15405 * C15827 - C82523 * C15828) * C239 +
            (C15405 * C16151 - C82523 * C16152) * C82592) *
               C15404) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C239 +
            (C82581 * C551 - C168 * C497) * C82592) *
               C81 +
           ((C182 - C183) * C239 + (C558 - C559) * C82592) * C82 +
           ((C186 - C187) * C239 + (C560 - C561) * C82592) * C83 +
           ((C190 - C191) * C239 + (C562 - C563) * C82592) * C84 +
           ((C194 - C195) * C239 + (C564 - C565) * C82592) * C85) *
              C82938 * C688 +
          (((C168 * C695 - C82581 * C753) * C239 +
            (C168 * C1003 - C82581 * C1055) * C82592) *
               C81 +
           ((C168 * C694 - C82581 * C754) * C239 +
            (C168 * C1004 - C82581 * C1056) * C82592) *
               C82 +
           ((C168 * C693 - C82581 * C755) * C239 +
            (C168 * C1005 - C82581 * C1057) * C82592) *
               C83 +
           ((C168 * C692 - C82581 * C756) * C239 +
            (C168 * C1006 - C82581 * C1058) * C82592) *
               C84 +
           ((C168 * C691 - C82581 * C757) * C239 +
            (C168 * C1007 - C82581 * C1059) * C82592) *
               C85) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
             C82893 * C1746 - C1745 * C1653) *
                C239 +
            (C82931 * C551 - C1743 * C497 + C82916 * C1055 - C1744 * C1003 +
             C82893 * C2323 - C1745 * C2241) *
                C82592) *
               C1641 +
           ((C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C239 +
            (C2328 - C2329 + C2330 - C2331 + C2332 - C2333) * C82592) *
               C1642 +
           ((C1767 - C1768 + C1769 - C1770 + C1771 - C1772) * C239 +
            (C2334 - C2335 + C2336 - C2337 + C2338 - C2339) * C82592) *
               C82885) *
              C82938 * C688 +
          (((C1743 * C695 - C82931 * C753 + C1744 * C1653 - C82916 * C1746 +
             C1745 * C2527 - C82893 * C2653) *
                C239 +
            (C1743 * C1003 - C82931 * C1055 + C1744 * C2241 - C82916 * C2323 +
             C1745 * C3083 - C82893 * C3175) *
                C82592) *
               C1641 +
           ((C1743 * C694 - C82931 * C754 + C1744 * C1654 - C82916 * C1747 +
             C1745 * C2526 - C82893 * C2654) *
                C239 +
            (C1743 * C1004 - C82931 * C1056 + C1744 * C2242 - C82916 * C2324 +
             C1745 * C3084 - C82893 * C3176) *
                C82592) *
               C1642 +
           ((C1743 * C693 - C82931 * C755 + C1744 * C1655 - C82916 * C1748 +
             C1745 * C2525 - C82893 * C2655) *
                C239 +
            (C1743 * C1005 - C82931 * C1057 + C1744 * C2243 - C82916 * C2325 +
             C1745 * C3085 - C82893 * C3177) *
                C82592) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C239 +
            (C13256 * C551 - C13339 * C497 + C13257 * C1055 - C13340 * C1003 +
             C82893 * C2323 - C13341 * C2241) *
                C82592) *
               C82925 +
           ((C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C239 +
            (C13856 - C13857 + C13858 - C13859 + C13860 - C13861) * C82592) *
               C82909 +
           ((C13355 - C13356 + C13357 - C13358 + C13359 - C13360) * C239 +
            (C13862 - C13863 + C13864 - C13865 + C13866 - C13867) * C82592) *
               C82885) *
              C82938 * C688 +
          (((C13339 * C695 - C13256 * C753 + C13340 * C1653 - C13257 * C1746 +
             C13341 * C2527 - C82893 * C2653) *
                C239 +
            (C13339 * C1003 - C13256 * C1055 + C13340 * C2241 - C13257 * C2323 +
             C13341 * C3083 - C82893 * C3175) *
                C82592) *
               C82925 +
           ((C13339 * C694 - C13256 * C754 + C13340 * C1654 - C13257 * C1747 +
             C13341 * C2526 - C82893 * C2654) *
                C239 +
            (C13339 * C1004 - C13256 * C1056 + C13340 * C2242 - C13257 * C2324 +
             C13341 * C3084 - C82893 * C3176) *
                C82592) *
               C82909 +
           ((C13339 * C693 - C13256 * C755 + C13340 * C1655 - C13257 * C1748 +
             C13341 * C2525 - C82893 * C2655) *
                C239 +
            (C13339 * C1005 - C13256 * C1057 + C13340 * C2243 - C13257 * C2325 +
             C13341 * C3085 - C82893 * C3177) *
                C82592) *
               C82885) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15400 * C169 - C15457 * C102 + C15401 * C753 - C15458 * C695 +
            C15402 * C1746 - C15459 * C1653 + C15403 * C2653 - C15460 * C2527 +
            C15404 * C15462 - C15461 * C15407) *
               C239 +
           (C15400 * C551 - C15457 * C497 + C15401 * C1055 - C15458 * C1003 +
            C15402 * C2323 - C15459 * C2241 + C15403 * C3175 - C15460 * C3083 +
            C15404 * C15739 - C15461 * C15693) *
               C82592) *
              C82523 * C82938 * C688 +
          ((C15457 * C695 - C15400 * C753 + C15458 * C1653 - C15401 * C1746 +
            C15459 * C2527 - C15402 * C2653 + C15460 * C15407 -
            C15403 * C15462 + C15461 * C15827 - C15404 * C15905) *
               C239 +
           (C15457 * C1003 - C15400 * C1055 + C15458 * C2241 - C15401 * C2323 +
            C15459 * C3083 - C15402 * C3175 + C15460 * C15693 -
            C15403 * C15739 + C15461 * C16151 - C15404 * C16203) *
               C82592) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82581 *
               C81 +
           C643 * C82 + C644 * C83 + C645 * C84 + C646 * C85) *
              C82938 * C688 -
          ((C239 * C809 - C607 * C691 - C239 * C1007 + C82592 * C1102) *
               C82581 * C85 +
           (C239 * C808 - C607 * C692 - C239 * C1006 + C82592 * C1103) *
               C82581 * C84 +
           (C239 * C807 - C607 * C693 - C239 * C1005 + C82592 * C1104) *
               C82581 * C83 +
           (C239 * C806 - C607 * C694 - C239 * C1004 + C82592 * C1105) *
               C82581 * C82 +
           (C239 * C805 - C607 * C695 - C239 * C1003 + C82592 * C1106) *
               C82581 * C81) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82931 +
            C3268 * C82916 + C3269 * C82893) *
               C1641 +
           (C2418 + C2448 + C2449) * C1642 + (C2427 + C2450 + C2451) * C82885) *
              C82938 * C688 -
          (((C239 * C2735 - C607 * C2525 - C239 * C3085 + C82592 * C3252) *
                C82893 +
            C2447 * C82916 + C2446 * C82931) *
               C82885 +
           ((C239 * C2734 - C607 * C2526 - C239 * C3084 + C82592 * C3253) *
                C82893 +
            C2445 * C82916 + C2444 * C82931) *
               C1642 +
           ((C239 * C2733 - C607 * C2527 - C239 * C3083 + C82592 * C3254) *
                C82893 +
            C3269 * C82916 + C3268 * C82931) *
               C1641) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C13256 +
            C3268 * C13257 + C3269 * C82893) *
               C82925 +
           (C13942 + C13943 + C13944) * C82909 +
           (C13945 + C13946 + C13947) * C82885) *
              C82938 * C688 -
          (((C239 * C2735 - C607 * C2525 - C239 * C3085 + C82592 * C3252) *
                C82893 +
            C2447 * C13257 + C2446 * C13256) *
               C82885 +
           ((C239 * C2734 - C607 * C2526 - C239 * C3084 + C82592 * C3253) *
                C82893 +
            C2445 * C13257 + C2444 * C13256) *
               C82909 +
           ((C239 * C2733 - C607 * C2527 - C239 * C3083 + C82592 * C3254) *
                C82893 +
            C3269 * C13257 + C3268 * C13256) *
               C82925) *
              C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C15400 +
           C3268 * C15401 + C3269 * C15402 + C16260 * C15403 +
           C16261 * C15404) *
              C82523 * C82938 * C688 -
          ((C239 * C15949 - C607 * C15827 - C239 * C16151 + C82592 * C16246) *
               C15404 +
           C16261 * C15403 + C16260 * C15402 + C3269 * C15401 +
           C3268 * C15400) *
              C82523 * C82938 * C689) *
         C82940) /
            (p * q * std::sqrt(p + q));
    d2eexx[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C92 * C108 - C93 * C102 - C92 * C109 + C81 * C120 + C94 * C110 -
           C95 * C103 - C94 * C111 + C82 * C121 + C96 * C112 - C97 * C104 -
           C96 * C113 + C83 * C122 + C98 * C114 - C99 * C105 - C98 * C115 +
           C84 * C123 + C100 * C116 - C101 * C106 - C100 * C117 + C85 * C124) *
              C82592 * C82581 * C1149 -
          (C100 * C1156 - C101 * C1151 - C100 * C1157 + C85 * C1166 +
           C98 * C1158 - C99 * C1152 - C98 * C1159 + C84 * C1167 + C96 * C1160 -
           C97 * C1153 - C96 * C1161 + C83 * C1168 + C94 * C1162 - C95 * C1154 -
           C94 * C1163 + C82 * C1169 + C92 * C1164 - C93 * C1155 - C92 * C1165 +
           C81 * C1170) *
              C82592 * C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1647 * C108 - C1648 * C102 - C1647 * C109 + C1641 * C120 +
            C1649 * C110 - C1650 * C103 - C1649 * C111 + C1642 * C121 +
            C1651 * C112 - C1652 * C104 - C1651 * C113 + C82885 * C122) *
               C82592 * C82931 +
           (C2574 + C2575 + C2576) * C82592 * C82916 +
           (C2577 + C2578 + C2579) * C82592 * C82893) *
              C1149 -
          ((C1651 * C3349 - C1652 * C3343 - C1651 * C3350 + C82885 * C3361 +
            C1649 * C3351 - C1650 * C3344 - C1649 * C3352 + C1642 * C3362 +
            C1647 * C3353 - C1648 * C3345 - C1647 * C3354 + C1641 * C3363) *
               C82592 * C82893 +
           (C1651 * C3355 - C1652 * C3346 - C1651 * C3356 + C82885 * C3364 +
            C1649 * C3357 - C1650 * C3347 - C1649 * C3358 + C1642 * C3365 +
            C1647 * C3359 - C1648 * C3348 - C1647 * C3360 + C1641 * C3366) *
               C82592 * C82916 +
           (C1651 * C1160 - C1652 * C1153 - C1651 * C1161 + C82885 * C1168 +
            C1649 * C1162 - C1650 * C1154 - C1649 * C1163 + C1642 * C1169 +
            C1647 * C1164 - C1648 * C1155 - C1647 * C1165 + C1641 * C1170) *
               C82592 * C82931) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13259 * C108 - C13260 * C102 - C13259 * C109 + C82925 * C120 +
            C13261 * C110 - C13262 * C103 - C13261 * C111 + C82909 * C121 +
            C13263 * C112 - C13264 * C104 - C13263 * C113 + C82885 * C122) *
               C82592 * C13256 +
           (C14058 + C14059 + C14060) * C82592 * C13257 +
           (C14061 + C14062 + C14063) * C82592 * C82893) *
              C1149 -
          ((C13263 * C3349 - C13264 * C3343 - C13263 * C3350 + C82885 * C3361 +
            C13261 * C3351 - C13262 * C3344 - C13261 * C3352 + C82909 * C3362 +
            C13259 * C3353 - C13260 * C3345 - C13259 * C3354 + C82925 * C3363) *
               C82592 * C82893 +
           (C13263 * C3355 - C13264 * C3346 - C13263 * C3356 + C82885 * C3364 +
            C13261 * C3357 - C13262 * C3347 - C13261 * C3358 + C82909 * C3365 +
            C13259 * C3359 - C13260 * C3348 - C13259 * C3360 + C82925 * C3366) *
               C82592 * C13257 +
           (C13263 * C1160 - C13264 * C1153 - C13263 * C1161 + C82885 * C1168 +
            C13261 * C1162 - C13262 * C1154 - C13261 * C1163 + C82909 * C1169 +
            C13259 * C1164 - C13260 * C1155 - C13259 * C1165 + C82925 * C1170) *
               C82592 * C13256) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15405 * C108 - C15406 * C102 - C15405 * C109 + C82523 * C120) *
               C82592 * C15400 +
           C15860 * C15401 + C15861 * C15402 + C15862 * C15403 +
           C15863 * C15404) *
              C1149 -
          ((C15405 * C16305 - C15406 * C16303 - C15405 * C16306 +
            C82523 * C16309) *
               C82592 * C15404 +
           (C15405 * C16307 - C15406 * C16304 - C15405 * C16308 +
            C82523 * C16310) *
               C82592 * C15403 +
           (C15405 * C3353 - C15406 * C3345 - C15405 * C3354 + C82523 * C3363) *
               C82592 * C15402 +
           (C15405 * C3359 - C15406 * C3348 - C15405 * C3360 + C82523 * C3366) *
               C82592 * C15401 +
           (C15405 * C1164 - C15406 * C1155 - C15405 * C1165 + C82523 * C1170) *
               C82592 * C15400) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexy[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C82581 * C169 - C168 * C102) * C92 +
           (C82581 * C175 - C168 * C109) * C81 + (C182 - C183) * C94 +
           (C184 - C185) * C82 + (C186 - C187) * C96 + (C188 - C189) * C83 +
           (C190 - C191) * C98 + (C192 - C193) * C84 + (C194 - C195) * C100 +
           (C196 - C197) * C85) *
              C82592 * C1149 +
          ((C168 * C1155 - C82581 * C1213) * C92 +
           (C168 * C1165 - C82581 * C1218) * C81 +
           (C168 * C1154 - C82581 * C1214) * C94 +
           (C168 * C1163 - C82581 * C1219) * C82 +
           (C168 * C1153 - C82581 * C1215) * C96 +
           (C168 * C1161 - C82581 * C1220) * C83 +
           (C168 * C1152 - C82581 * C1216) * C98 +
           (C168 * C1159 - C82581 * C1221) * C84 +
           (C168 * C1151 - C82581 * C1217) * C100 +
           (C168 * C1157 - C82581 * C1222) * C85) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
            C82893 * C1746 - C1745 * C1653) *
               C1647 +
           (C82931 * C175 - C1743 * C109 + C82916 * C758 - C1744 * C705 +
            C82893 * C1750 - C1745 * C1658) *
               C1641 +
           (C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C1649 +
           (C1761 - C1762 + C1763 - C1764 + C1765 - C1766) * C1642 +
           (C1767 - C1768 + C1769 - C1770 + C1771 - C1772) * C1651 +
           (C1773 - C1774 + C1775 - C1776 + C1777 - C1778) * C82885) *
              C82592 * C1149 +
          ((C1743 * C1155 - C82931 * C1213 + C1744 * C3348 - C82916 * C3441 +
            C1745 * C3345 - C82893 * C3442) *
               C1647 +
           (C1743 * C1165 - C82931 * C1218 + C1744 * C3360 - C82916 * C3447 +
            C1745 * C3354 - C82893 * C3448) *
               C1641 +
           (C1743 * C1154 - C82931 * C1214 + C1744 * C3347 - C82916 * C3443 +
            C1745 * C3344 - C82893 * C3444) *
               C1649 +
           (C1743 * C1163 - C82931 * C1219 + C1744 * C3358 - C82916 * C3449 +
            C1745 * C3352 - C82893 * C3450) *
               C1642 +
           (C1743 * C1153 - C82931 * C1215 + C1744 * C3346 - C82916 * C3445 +
            C1745 * C3343 - C82893 * C3446) *
               C1651 +
           (C1743 * C1161 - C82931 * C1220 + C1744 * C3356 - C82916 * C3451 +
            C1745 * C3350 - C82893 * C3452) *
               C82885) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
            C82893 * C1746 - C13341 * C1653) *
               C13259 +
           (C13256 * C175 - C13339 * C109 + C13257 * C758 - C13340 * C705 +
            C82893 * C1750 - C13341 * C1658) *
               C82925 +
           (C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C13261 +
           (C13349 - C13350 + C13351 - C13352 + C13353 - C13354) * C82909 +
           (C13355 - C13356 + C13357 - C13358 + C13359 - C13360) * C13263 +
           (C13361 - C13362 + C13363 - C13364 + C13365 - C13366) * C82885) *
              C82592 * C1149 +
          ((C13339 * C1155 - C13256 * C1213 + C13340 * C3348 - C13257 * C3441 +
            C13341 * C3345 - C82893 * C3442) *
               C13259 +
           (C13339 * C1165 - C13256 * C1218 + C13340 * C3360 - C13257 * C3447 +
            C13341 * C3354 - C82893 * C3448) *
               C82925 +
           (C13339 * C1154 - C13256 * C1214 + C13340 * C3347 - C13257 * C3443 +
            C13341 * C3344 - C82893 * C3444) *
               C13261 +
           (C13339 * C1163 - C13256 * C1219 + C13340 * C3358 - C13257 * C3449 +
            C13341 * C3352 - C82893 * C3450) *
               C82909 +
           (C13339 * C1153 - C13256 * C1215 + C13340 * C3346 - C13257 * C3445 +
            C13341 * C3343 - C82893 * C3446) *
               C13263 +
           (C13339 * C1161 - C13256 * C1220 + C13340 * C3356 - C13257 * C3451 +
            C13341 * C3350 - C82893 * C3452) *
               C82885) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15400 * C169 - C15457 * C102 + C15401 * C753 - C15458 * C695 +
            C15402 * C1746 - C15459 * C1653 + C15403 * C2653 - C15460 * C2527 +
            C15404 * C15462 - C15461 * C15407) *
               C15405 +
           (C15400 * C175 - C15457 * C109 + C15401 * C758 - C15458 * C705 +
            C15402 * C1750 - C15459 * C1658 + C15403 * C2656 - C15460 * C2533 +
            C15404 * C15464 - C15461 * C15410) *
               C82523) *
              C82592 * C1149 +
          ((C15457 * C1155 - C15400 * C1213 + C15458 * C3348 - C15401 * C3441 +
            C15459 * C3345 - C15402 * C3442 + C15460 * C16304 -
            C15403 * C16353 + C15461 * C16303 - C15404 * C16354) *
               C15405 +
           (C15457 * C1165 - C15400 * C1218 + C15458 * C3360 - C15401 * C3447 +
            C15459 * C3354 - C15402 * C3448 + C15460 * C16308 -
            C15403 * C16355 + C15461 * C16306 - C15404 * C16356) *
               C82523) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eexz[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C82592 * C240 - C239 * C102) * C92 +
           (C82592 * C246 - C239 * C109) * C81 + (C253 - C254) * C94 +
           (C255 - C256) * C82 + (C257 - C258) * C96 + (C259 - C260) * C83 +
           (C261 - C262) * C98 + (C263 - C264) * C84 + (C265 - C266) * C100 +
           (C267 - C268) * C85) *
              C82581 * C1149 +
          ((C239 * C1155 - C82592 * C1265) * C92 +
           (C239 * C1165 - C82592 * C1270) * C81 +
           (C239 * C1154 - C82592 * C1266) * C94 +
           (C239 * C1163 - C82592 * C1271) * C82 +
           (C239 * C1153 - C82592 * C1267) * C96 +
           (C239 * C1161 - C82592 * C1272) * C83 +
           (C239 * C1152 - C82592 * C1268) * C98 +
           (C239 * C1159 - C82592 * C1273) * C84 +
           (C239 * C1151 - C82592 * C1269) * C100 +
           (C239 * C1157 - C82592 * C1274) * C85) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C1647 +
            (C82592 * C246 - C239 * C109) * C1641 + (C253 - C254) * C1649 +
            (C255 - C256) * C1642 + (C257 - C258) * C1651 +
            (C259 - C260) * C82885) *
               C82931 +
           ((C2740 - C2741) * C1647 + (C2742 - C2743) * C1641 +
            (C1861 - C1862) * C1649 + (C1863 - C1864) * C1642 +
            (C1865 - C1866) * C1651 + (C1867 - C1868) * C82885) *
               C82916 +
           ((C2744 - C2745) * C1647 + (C2746 - C2747) * C1641 +
            (C1869 - C1870) * C1649 + (C1871 - C1872) * C1642 +
            (C1873 - C1874) * C1651 + (C1875 - C1876) * C82885) *
               C82893) *
              C1149 +
          (((C239 * C1155 - C82592 * C1265) * C1647 +
            (C239 * C1165 - C82592 * C1270) * C1641 +
            (C239 * C1154 - C82592 * C1266) * C1649 +
            (C239 * C1163 - C82592 * C1271) * C1642 +
            (C239 * C1153 - C82592 * C1267) * C1651 +
            (C239 * C1161 - C82592 * C1272) * C82885) *
               C82931 +
           ((C239 * C3348 - C82592 * C3527) * C1647 +
            (C239 * C3360 - C82592 * C3533) * C1641 +
            (C239 * C3347 - C82592 * C3528) * C1649 +
            (C239 * C3358 - C82592 * C3534) * C1642 +
            (C239 * C3346 - C82592 * C3529) * C1651 +
            (C239 * C3356 - C82592 * C3535) * C82885) *
               C82916 +
           ((C239 * C3345 - C82592 * C3530) * C1647 +
            (C239 * C3354 - C82592 * C3536) * C1641 +
            (C239 * C3344 - C82592 * C3531) * C1649 +
            (C239 * C3352 - C82592 * C3537) * C1642 +
            (C239 * C3343 - C82592 * C3532) * C1651 +
            (C239 * C3350 - C82592 * C3538) * C82885) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C13259 +
            (C82592 * C246 - C239 * C109) * C82925 + (C253 - C254) * C13261 +
            (C255 - C256) * C82909 + (C257 - C258) * C13263 +
            (C259 - C260) * C82885) *
               C13256 +
           ((C2740 - C2741) * C13259 + (C2742 - C2743) * C82925 +
            (C1861 - C1862) * C13261 + (C1863 - C1864) * C82909 +
            (C1865 - C1866) * C13263 + (C1867 - C1868) * C82885) *
               C13257 +
           ((C2744 - C2745) * C13259 + (C2746 - C2747) * C82925 +
            (C1869 - C1870) * C13261 + (C1871 - C1872) * C82909 +
            (C1873 - C1874) * C13263 + (C1875 - C1876) * C82885) *
               C82893) *
              C1149 +
          (((C239 * C1155 - C82592 * C1265) * C13259 +
            (C239 * C1165 - C82592 * C1270) * C82925 +
            (C239 * C1154 - C82592 * C1266) * C13261 +
            (C239 * C1163 - C82592 * C1271) * C82909 +
            (C239 * C1153 - C82592 * C1267) * C13263 +
            (C239 * C1161 - C82592 * C1272) * C82885) *
               C13256 +
           ((C239 * C3348 - C82592 * C3527) * C13259 +
            (C239 * C3360 - C82592 * C3533) * C82925 +
            (C239 * C3347 - C82592 * C3528) * C13261 +
            (C239 * C3358 - C82592 * C3534) * C82909 +
            (C239 * C3346 - C82592 * C3529) * C13263 +
            (C239 * C3356 - C82592 * C3535) * C82885) *
               C13257 +
           ((C239 * C3345 - C82592 * C3530) * C13259 +
            (C239 * C3354 - C82592 * C3536) * C82925 +
            (C239 * C3344 - C82592 * C3531) * C13261 +
            (C239 * C3352 - C82592 * C3537) * C82909 +
            (C239 * C3343 - C82592 * C3532) * C13263 +
            (C239 * C3350 - C82592 * C3538) * C82885) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C82592 * C240 - C239 * C102) * C15405 +
            (C82592 * C246 - C239 * C109) * C82523) *
               C15400 +
           ((C2740 - C2741) * C15405 + (C2742 - C2743) * C82523) * C15401 +
           ((C2744 - C2745) * C15405 + (C2746 - C2747) * C82523) * C15402 +
           ((C15952 - C15953) * C15405 + (C15954 - C15955) * C82523) * C15403 +
           ((C15956 - C15957) * C15405 + (C15958 - C15959) * C82523) * C15404) *
              C1149 +
          (((C239 * C1155 - C82592 * C1265) * C15405 +
            (C239 * C1165 - C82592 * C1270) * C82523) *
               C15400 +
           ((C239 * C3348 - C82592 * C3527) * C15405 +
            (C239 * C3360 - C82592 * C3533) * C82523) *
               C15401 +
           ((C239 * C3345 - C82592 * C3530) * C15405 +
            (C239 * C3354 - C82592 * C3536) * C82523) *
               C15402 +
           ((C239 * C16304 - C82592 * C16399) * C15405 +
            (C239 * C16308 - C82592 * C16401) * C82523) *
               C15403 +
           ((C239 * C16303 - C82592 * C16400) * C15405 +
            (C239 * C16306 - C82592 * C16402) * C82523) *
               C15404) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyx[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C108 - C92 * C102 + C82 * C110 - C94 * C103 + C83 * C112 -
            C96 * C104 + C84 * C114 - C98 * C105 + C85 * C116 - C100 * C106) *
               C168 +
           (C81 * C316 - C92 * C310 + C82 * C317 - C94 * C311 + C83 * C318 -
            C96 * C312 + C84 * C319 - C98 * C313 + C85 * C320 - C100 * C314) *
               C82581) *
              C82592 * C1149 +
          ((C92 * C1155 - C81 * C1164 + C94 * C1154 - C82 * C1162 +
            C96 * C1153 - C83 * C1160 + C98 * C1152 - C84 * C1158 +
            C100 * C1151 - C85 * C1156) *
               C168 +
           (C92 * C1317 - C81 * C1322 + C94 * C1318 - C82 * C1323 +
            C96 * C1319 - C83 * C1324 + C98 * C1320 - C84 * C1325 +
            C100 * C1321 - C85 * C1326) *
               C82581) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
            C82885 * C112 - C1651 * C104) *
               C1743 +
           (C1641 * C316 - C1647 * C310 + C1642 * C317 - C1649 * C311 +
            C82885 * C318 - C1651 * C312) *
               C82931 +
           (C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C1744 +
           (C2834 - C2835 + C2836 - C2837 + C2838 - C2839) * C82916 +
           (C2840 - C2841 + C2842 - C2843 + C2844 - C2845) * C1745 +
           (C2846 - C2847 + C2848 - C2849 + C2850 - C2851) * C82893) *
              C82592 * C1149 +
          ((C1647 * C1155 - C1641 * C1164 + C1649 * C1154 - C1642 * C1162 +
            C1651 * C1153 - C82885 * C1160) *
               C1743 +
           (C1647 * C1317 - C1641 * C1322 + C1649 * C1318 - C1642 * C1323 +
            C1651 * C1319 - C82885 * C1324) *
               C82931 +
           (C1647 * C3348 - C1641 * C3359 + C1649 * C3347 - C1642 * C3357 +
            C1651 * C3346 - C82885 * C3355) *
               C1744 +
           (C1647 * C3613 - C1641 * C3619 + C1649 * C3614 - C1642 * C3620 +
            C1651 * C3615 - C82885 * C3621) *
               C82916 +
           (C1647 * C3345 - C1641 * C3353 + C1649 * C3344 - C1642 * C3351 +
            C1651 * C3343 - C82885 * C3349) *
               C1745 +
           (C1647 * C3616 - C1641 * C3622 + C1649 * C3617 - C1642 * C3623 +
            C1651 * C3618 - C82885 * C3624) *
               C82893) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
            C82885 * C112 - C13263 * C104) *
               C13339 +
           (C82925 * C316 - C13259 * C310 + C82909 * C317 - C13261 * C311 +
            C82885 * C318 - C13263 * C312) *
               C13256 +
           (C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C13340 +
           (C14292 - C14293 + C14294 - C14295 + C14296 - C14297) * C13257 +
           (C14298 - C14299 + C14300 - C14301 + C14302 - C14303) * C13341 +
           (C14304 - C14305 + C14306 - C14307 + C14308 - C14309) * C82893) *
              C82592 * C1149 +
          ((C13259 * C1155 - C82925 * C1164 + C13261 * C1154 - C82909 * C1162 +
            C13263 * C1153 - C82885 * C1160) *
               C13339 +
           (C13259 * C1317 - C82925 * C1322 + C13261 * C1318 - C82909 * C1323 +
            C13263 * C1319 - C82885 * C1324) *
               C13256 +
           (C13259 * C3348 - C82925 * C3359 + C13261 * C3347 - C82909 * C3357 +
            C13263 * C3346 - C82885 * C3355) *
               C13340 +
           (C13259 * C3613 - C82925 * C3619 + C13261 * C3614 - C82909 * C3620 +
            C13263 * C3615 - C82885 * C3621) *
               C13257 +
           (C13259 * C3345 - C82925 * C3353 + C13261 * C3344 - C82909 * C3351 +
            C13263 * C3343 - C82885 * C3349) *
               C13341 +
           (C13259 * C3616 - C82925 * C3622 + C13261 * C3617 - C82909 * C3623 +
            C13263 * C3618 - C82885 * C3624) *
               C82893) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C82523 * C108 - C15405 * C102) * C15457 +
           (C82523 * C316 - C15405 * C310) * C15400 +
           (C16004 - C16005) * C15458 + (C16006 - C16007) * C15401 +
           (C16008 - C16009) * C15459 + (C16010 - C16011) * C15402 +
           (C16012 - C16013) * C15460 + (C16014 - C16015) * C15403 +
           (C16016 - C16017) * C15461 + (C16018 - C16019) * C15404) *
              C82592 * C1149 +
          ((C15405 * C1155 - C82523 * C1164) * C15457 +
           (C15405 * C1317 - C82523 * C1322) * C15400 +
           (C15405 * C3348 - C82523 * C3359) * C15458 +
           (C15405 * C3613 - C82523 * C3619) * C15401 +
           (C15405 * C3345 - C82523 * C3353) * C15459 +
           (C15405 * C3616 - C82523 * C3622) * C15402 +
           (C15405 * C16304 - C82523 * C16307) * C15460 +
           (C15405 * C16445 - C82523 * C16447) * C15403 +
           (C15405 * C16303 - C82523 * C16305) * C15461 +
           (C15405 * C16446 - C82523 * C16448) * C15404) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyy[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C168 * C169 - C364 * C102 - C168 * C310 + C82581 * C365) * C81 +
           C396 * C82 + C397 * C83 + C398 * C84 + C399 * C85) *
              C82592 * C1149 -
          ((C168 * C1217 - C364 * C1151 - C168 * C1321 + C82581 * C1369) * C85 +
           (C168 * C1216 - C364 * C1152 - C168 * C1320 + C82581 * C1370) * C84 +
           (C168 * C1215 - C364 * C1153 - C168 * C1319 + C82581 * C1371) * C83 +
           (C168 * C1214 - C364 * C1154 - C168 * C1318 + C82581 * C1372) * C82 +
           (C168 * C1213 - C364 * C1155 - C168 * C1317 + C82581 * C1373) *
               C81) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1743 * C169 - C2032 * C102 - C1743 * C310 + C82931 * C365 +
            C1744 * C753 - C2033 * C695 - C1744 * C857 + C82916 * C913 +
            C1745 * C1746 - C2034 * C1653 - C1745 * C1950 + C82893 * C2035) *
               C1641 +
           (C2076 + C2077 + C2078) * C1642 + (C2079 + C2080 + C2081) * C82885) *
              C82592 * C1149 -
          ((C1745 * C3446 - C2034 * C3343 - C1745 * C3618 + C82893 * C3699 +
            C1744 * C3445 - C2033 * C3346 - C1744 * C3615 + C82916 * C3700 +
            C1743 * C1215 - C2032 * C1153 - C1743 * C1319 + C82931 * C1371) *
               C82885 +
           (C1745 * C3444 - C2034 * C3344 - C1745 * C3617 + C82893 * C3701 +
            C1744 * C3443 - C2033 * C3347 - C1744 * C3614 + C82916 * C3702 +
            C1743 * C1214 - C2032 * C1154 - C1743 * C1318 + C82931 * C1372) *
               C1642 +
           (C1745 * C3442 - C2034 * C3345 - C1745 * C3616 + C82893 * C3703 +
            C1744 * C3441 - C2033 * C3348 - C1744 * C3613 + C82916 * C3704 +
            C1743 * C1213 - C2032 * C1155 - C1743 * C1317 + C82931 * C1373) *
               C1641) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13339 * C169 - C13588 * C102 - C13339 * C310 + C13256 * C365 +
            C13340 * C753 - C13589 * C695 - C13340 * C857 + C13257 * C913 +
            C13341 * C1746 - C13590 * C1653 - C13341 * C1950 + C82893 * C2035) *
               C82925 +
           (C13628 + C13629 + C13630) * C82909 +
           (C13631 + C13632 + C13633) * C82885) *
              C82592 * C1149 -
          ((C13341 * C3446 - C13590 * C3343 - C13341 * C3618 + C82893 * C3699 +
            C13340 * C3445 - C13589 * C3346 - C13340 * C3615 + C13257 * C3700 +
            C13339 * C1215 - C13588 * C1153 - C13339 * C1319 + C13256 * C1371) *
               C82885 +
           (C13341 * C3444 - C13590 * C3344 - C13341 * C3617 + C82893 * C3701 +
            C13340 * C3443 - C13589 * C3347 - C13340 * C3614 + C13257 * C3702 +
            C13339 * C1214 - C13588 * C1154 - C13339 * C1318 + C13256 * C1372) *
               C82909 +
           (C13341 * C3442 - C13590 * C3345 - C13341 * C3616 + C82893 * C3703 +
            C13340 * C3441 - C13589 * C3348 - C13340 * C3613 + C13257 * C3704 +
            C13339 * C1213 - C13588 * C1155 - C13339 * C1317 + C13256 * C1373) *
               C82925) *
              C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C15457 * C169 - C15600 * C102 - C15457 * C310 + C15400 * C365 +
           C15458 * C753 - C15601 * C695 - C15458 * C857 + C15401 * C913 +
           C15459 * C1746 - C15602 * C1653 - C15459 * C1950 + C15402 * C2035 +
           C15460 * C2653 - C15603 * C2527 - C15460 * C2821 + C15403 * C2927 +
           C15461 * C15462 - C15604 * C15407 - C15461 * C15554 +
           C15404 * C15605) *
              C82523 * C82592 * C1149 -
          (C15461 * C16354 - C15604 * C16303 - C15461 * C16446 +
           C15404 * C16491 + C15460 * C16353 - C15603 * C16304 -
           C15460 * C16445 + C15403 * C16492 + C15459 * C3442 - C15602 * C3345 -
           C15459 * C3616 + C15402 * C3703 + C15458 * C3441 - C15601 * C3348 -
           C15458 * C3613 + C15401 * C3704 + C15457 * C1213 - C15600 * C1155 -
           C15457 * C1317 + C15400 * C1373) *
              C82523 * C82592 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eeyz[74] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C168 +
                      (C82592 * C441 - C239 * C310) * C82581) *
                         C81 +
                     ((C253 - C254) * C168 + (C448 - C449) * C82581) * C82 +
                     ((C257 - C258) * C168 + (C450 - C451) * C82581) * C83 +
                     ((C261 - C262) * C168 + (C452 - C453) * C82581) * C84 +
                     ((C265 - C266) * C168 + (C454 - C455) * C82581) * C85) *
                        C1149 +
                    (((C239 * C1155 - C82592 * C1265) * C168 +
                      (C239 * C1317 - C82592 * C1416) * C82581) *
                         C81 +
                     ((C239 * C1154 - C82592 * C1266) * C168 +
                      (C239 * C1318 - C82592 * C1417) * C82581) *
                         C82 +
                     ((C239 * C1153 - C82592 * C1267) * C168 +
                      (C239 * C1319 - C82592 * C1418) * C82581) *
                         C83 +
                     ((C239 * C1152 - C82592 * C1268) * C168 +
                      (C239 * C1320 - C82592 * C1419) * C82581) *
                         C84 +
                     ((C239 * C1151 - C82592 * C1269) * C168 +
                      (C239 * C1321 - C82592 * C1420) * C82581) *
                         C85) *
                        C1150) *
                   C82939 * C82940) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C1743 +
                      (C82592 * C441 - C239 * C310) * C82931 +
                      (C2740 - C2741) * C1744 + (C3006 - C3007) * C82916 +
                      (C2744 - C2745) * C1745 + (C3008 - C3009) * C82893) *
                         C1641 +
                     ((C253 - C254) * C1743 + (C448 - C449) * C82931 +
                      (C1861 - C1862) * C1744 + (C2160 - C2161) * C82916 +
                      (C1869 - C1870) * C1745 + (C2162 - C2163) * C82893) *
                         C1642 +
                     ((C257 - C258) * C1743 + (C450 - C451) * C82931 +
                      (C1865 - C1866) * C1744 + (C2164 - C2165) * C82916 +
                      (C1873 - C1874) * C1745 + (C2166 - C2167) * C82893) *
                         C82885) *
                        C1149 +
                    (((C239 * C1155 - C82592 * C1265) * C1743 +
                      (C239 * C1317 - C82592 * C1416) * C82931 +
                      (C239 * C3348 - C82592 * C3527) * C1744 +
                      (C239 * C3613 - C82592 * C3779) * C82916 +
                      (C239 * C3345 - C82592 * C3530) * C1745 +
                      (C239 * C3616 - C82592 * C3780) * C82893) *
                         C1641 +
                     ((C239 * C1154 - C82592 * C1266) * C1743 +
                      (C239 * C1318 - C82592 * C1417) * C82931 +
                      (C239 * C3347 - C82592 * C3528) * C1744 +
                      (C239 * C3614 - C82592 * C3781) * C82916 +
                      (C239 * C3344 - C82592 * C3531) * C1745 +
                      (C239 * C3617 - C82592 * C3782) * C82893) *
                         C1642 +
                     ((C239 * C1153 - C82592 * C1267) * C1743 +
                      (C239 * C1319 - C82592 * C1418) * C82931 +
                      (C239 * C3346 - C82592 * C3529) * C1744 +
                      (C239 * C3615 - C82592 * C3783) * C82916 +
                      (C239 * C3343 - C82592 * C3532) * C1745 +
                      (C239 * C3618 - C82592 * C3784) * C82893) *
                         C82885) *
                        C1150) *
                   C82939 * C82940) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C82592 * C240 - C239 * C102) * C13339 +
                      (C82592 * C441 - C239 * C310) * C13256 +
                      (C2740 - C2741) * C13340 + (C3006 - C3007) * C13257 +
                      (C2744 - C2745) * C13341 + (C3008 - C3009) * C82893) *
                         C82925 +
                     ((C253 - C254) * C13339 + (C448 - C449) * C13256 +
                      (C1861 - C1862) * C13340 + (C2160 - C2161) * C13257 +
                      (C1869 - C1870) * C13341 + (C2162 - C2163) * C82893) *
                         C82909 +
                     ((C257 - C258) * C13339 + (C450 - C451) * C13256 +
                      (C1865 - C1866) * C13340 + (C2164 - C2165) * C13257 +
                      (C1873 - C1874) * C13341 + (C2166 - C2167) * C82893) *
                         C82885) *
                        C1149 +
                    (((C239 * C1155 - C82592 * C1265) * C13339 +
                      (C239 * C1317 - C82592 * C1416) * C13256 +
                      (C239 * C3348 - C82592 * C3527) * C13340 +
                      (C239 * C3613 - C82592 * C3779) * C13257 +
                      (C239 * C3345 - C82592 * C3530) * C13341 +
                      (C239 * C3616 - C82592 * C3780) * C82893) *
                         C82925 +
                     ((C239 * C1154 - C82592 * C1266) * C13339 +
                      (C239 * C1318 - C82592 * C1417) * C13256 +
                      (C239 * C3347 - C82592 * C3528) * C13340 +
                      (C239 * C3614 - C82592 * C3781) * C13257 +
                      (C239 * C3344 - C82592 * C3531) * C13341 +
                      (C239 * C3617 - C82592 * C3782) * C82893) *
                         C82909 +
                     ((C239 * C1153 - C82592 * C1267) * C13339 +
                      (C239 * C1319 - C82592 * C1418) * C13256 +
                      (C239 * C3346 - C82592 * C3529) * C13340 +
                      (C239 * C3615 - C82592 * C3783) * C13257 +
                      (C239 * C3343 - C82592 * C3532) * C13341 +
                      (C239 * C3618 - C82592 * C3784) * C82893) *
                         C82885) *
                        C1150) *
                   C82939 * C82940) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C82592 * C240 - C239 * C102) * C15457 +
                     (C82592 * C441 - C239 * C310) * C15400 +
                     (C2740 - C2741) * C15458 + (C3006 - C3007) * C15401 +
                     (C2744 - C2745) * C15459 + (C3008 - C3009) * C15402 +
                     (C15952 - C15953) * C15460 + (C16106 - C16107) * C15403 +
                     (C15956 - C15957) * C15461 + (C16108 - C16109) * C15404) *
                        C82523 * C1149 +
                    ((C239 * C1155 - C82592 * C1265) * C15457 +
                     (C239 * C1317 - C82592 * C1416) * C15400 +
                     (C239 * C3348 - C82592 * C3527) * C15458 +
                     (C239 * C3613 - C82592 * C3779) * C15401 +
                     (C239 * C3345 - C82592 * C3530) * C15459 +
                     (C239 * C3616 - C82592 * C3780) * C15402 +
                     (C239 * C16304 - C82592 * C16399) * C15460 +
                     (C239 * C16445 - C82592 * C16535) * C15403 +
                     (C239 * C16303 - C82592 * C16400) * C15461 +
                     (C239 * C16446 - C82592 * C16536) * C15404) *
                        C82523 * C1150) *
                   C82939 * C82940) /
                      (p * q * std::sqrt(p + q));
    d2eezx[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C108 - C92 * C102 + C82 * C110 - C94 * C103 + C83 * C112 -
            C96 * C104 + C84 * C114 - C98 * C105 + C85 * C116 - C100 * C106) *
               C239 +
           (C81 * C503 - C92 * C497 + C82 * C504 - C94 * C498 + C83 * C505 -
            C96 * C499 + C84 * C506 - C98 * C500 + C85 * C507 - C100 * C501) *
               C82592) *
              C82581 * C1149 +
          ((C92 * C1155 - C81 * C1164 + C94 * C1154 - C82 * C1162 +
            C96 * C1153 - C83 * C1160 + C98 * C1152 - C84 * C1158 +
            C100 * C1151 - C85 * C1156) *
               C239 +
           (C92 * C1463 - C81 * C1468 + C94 * C1464 - C82 * C1469 +
            C96 * C1465 - C83 * C1470 + C98 * C1466 - C84 * C1471 +
            C100 * C1467 - C85 * C1472) *
               C82592) *
              C82581 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1641 * C108 - C1647 * C102 + C1642 * C110 - C1649 * C103 +
             C82885 * C112 - C1651 * C104) *
                C239 +
            (C1641 * C503 - C1647 * C497 + C1642 * C504 - C1649 * C498 +
             C82885 * C505 - C1651 * C499) *
                C82592) *
               C82931 +
           ((C2828 - C2829 + C2830 - C2831 + C2832 - C2833) * C239 +
            (C3090 - C3091 + C3092 - C3093 + C3094 - C3095) * C82592) *
               C82916 +
           ((C2840 - C2841 + C2842 - C2843 + C2844 - C2845) * C239 +
            (C3096 - C3097 + C3098 - C3099 + C3100 - C3101) * C82592) *
               C82893) *
              C1149 +
          (((C1647 * C1155 - C1641 * C1164 + C1649 * C1154 - C1642 * C1162 +
             C1651 * C1153 - C82885 * C1160) *
                C239 +
            (C1647 * C1463 - C1641 * C1468 + C1649 * C1464 - C1642 * C1469 +
             C1651 * C1465 - C82885 * C1470) *
                C82592) *
               C82931 +
           ((C1647 * C3348 - C1641 * C3359 + C1649 * C3347 - C1642 * C3357 +
             C1651 * C3346 - C82885 * C3355) *
                C239 +
            (C1647 * C3859 - C1641 * C3865 + C1649 * C3860 - C1642 * C3866 +
             C1651 * C3861 - C82885 * C3867) *
                C82592) *
               C82916 +
           ((C1647 * C3345 - C1641 * C3353 + C1649 * C3344 - C1642 * C3351 +
             C1651 * C3343 - C82885 * C3349) *
                C239 +
            (C1647 * C3862 - C1641 * C3868 + C1649 * C3863 - C1642 * C3869 +
             C1651 * C3864 - C82885 * C3870) *
                C82592) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C82925 * C108 - C13259 * C102 + C82909 * C110 - C13261 * C103 +
             C82885 * C112 - C13263 * C104) *
                C239 +
            (C82925 * C503 - C13259 * C497 + C82909 * C504 - C13261 * C498 +
             C82885 * C505 - C13263 * C499) *
                C82592) *
               C13256 +
           ((C14286 - C14287 + C14288 - C14289 + C14290 - C14291) * C239 +
            (C14532 - C14533 + C14534 - C14535 + C14536 - C14537) * C82592) *
               C13257 +
           ((C14298 - C14299 + C14300 - C14301 + C14302 - C14303) * C239 +
            (C14538 - C14539 + C14540 - C14541 + C14542 - C14543) * C82592) *
               C82893) *
              C1149 +
          (((C13259 * C1155 - C82925 * C1164 + C13261 * C1154 - C82909 * C1162 +
             C13263 * C1153 - C82885 * C1160) *
                C239 +
            (C13259 * C1463 - C82925 * C1468 + C13261 * C1464 - C82909 * C1469 +
             C13263 * C1465 - C82885 * C1470) *
                C82592) *
               C13256 +
           ((C13259 * C3348 - C82925 * C3359 + C13261 * C3347 - C82909 * C3357 +
             C13263 * C3346 - C82885 * C3355) *
                C239 +
            (C13259 * C3859 - C82925 * C3865 + C13261 * C3860 - C82909 * C3866 +
             C13263 * C3861 - C82885 * C3867) *
                C82592) *
               C13257 +
           ((C13259 * C3345 - C82925 * C3353 + C13261 * C3344 - C82909 * C3351 +
             C13263 * C3343 - C82885 * C3349) *
                C239 +
            (C13259 * C3862 - C82925 * C3868 + C13261 * C3863 - C82909 * C3869 +
             C13263 * C3864 - C82885 * C3870) *
                C82592) *
               C82893) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C82523 * C108 - C15405 * C102) * C239 +
            (C82523 * C503 - C15405 * C497) * C82592) *
               C15400 +
           ((C16004 - C16005) * C239 + (C16154 - C16155) * C82592) * C15401 +
           ((C16008 - C16009) * C239 + (C16156 - C16157) * C82592) * C15402 +
           ((C16012 - C16013) * C239 + (C16158 - C16159) * C82592) * C15403 +
           ((C16016 - C16017) * C239 + (C16160 - C16161) * C82592) * C15404) *
              C1149 +
          (((C15405 * C1155 - C82523 * C1164) * C239 +
            (C15405 * C1463 - C82523 * C1468) * C82592) *
               C15400 +
           ((C15405 * C3348 - C82523 * C3359) * C239 +
            (C15405 * C3859 - C82523 * C3865) * C82592) *
               C15401 +
           ((C15405 * C3345 - C82523 * C3353) * C239 +
            (C15405 * C3862 - C82523 * C3868) * C82592) *
               C15402 +
           ((C15405 * C16304 - C82523 * C16307) * C239 +
            (C15405 * C16579 - C82523 * C16581) * C82592) *
               C15403 +
           ((C15405 * C16303 - C82523 * C16305) * C239 +
            (C15405 * C16580 - C82523 * C16582) * C82592) *
               C15404) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezy[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C82581 * C169 - C168 * C102) * C239 +
            (C82581 * C551 - C168 * C497) * C82592) *
               C81 +
           ((C182 - C183) * C239 + (C558 - C559) * C82592) * C82 +
           ((C186 - C187) * C239 + (C560 - C561) * C82592) * C83 +
           ((C190 - C191) * C239 + (C562 - C563) * C82592) * C84 +
           ((C194 - C195) * C239 + (C564 - C565) * C82592) * C85) *
              C1149 +
          (((C168 * C1155 - C82581 * C1213) * C239 +
            (C168 * C1463 - C82581 * C1515) * C82592) *
               C81 +
           ((C168 * C1154 - C82581 * C1214) * C239 +
            (C168 * C1464 - C82581 * C1516) * C82592) *
               C82 +
           ((C168 * C1153 - C82581 * C1215) * C239 +
            (C168 * C1465 - C82581 * C1517) * C82592) *
               C83 +
           ((C168 * C1152 - C82581 * C1216) * C239 +
            (C168 * C1466 - C82581 * C1518) * C82592) *
               C84 +
           ((C168 * C1151 - C82581 * C1217) * C239 +
            (C168 * C1467 - C82581 * C1519) * C82592) *
               C85) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C82931 * C169 - C1743 * C102 + C82916 * C753 - C1744 * C695 +
             C82893 * C1746 - C1745 * C1653) *
                C239 +
            (C82931 * C551 - C1743 * C497 + C82916 * C1055 - C1744 * C1003 +
             C82893 * C2323 - C1745 * C2241) *
                C82592) *
               C1641 +
           ((C1755 - C1756 + C1757 - C1758 + C1759 - C1760) * C239 +
            (C2328 - C2329 + C2330 - C2331 + C2332 - C2333) * C82592) *
               C1642 +
           ((C1767 - C1768 + C1769 - C1770 + C1771 - C1772) * C239 +
            (C2334 - C2335 + C2336 - C2337 + C2338 - C2339) * C82592) *
               C82885) *
              C1149 +
          (((C1743 * C1155 - C82931 * C1213 + C1744 * C3348 - C82916 * C3441 +
             C1745 * C3345 - C82893 * C3442) *
                C239 +
            (C1743 * C1463 - C82931 * C1515 + C1744 * C3859 - C82916 * C3945 +
             C1745 * C3862 - C82893 * C3946) *
                C82592) *
               C1641 +
           ((C1743 * C1154 - C82931 * C1214 + C1744 * C3347 - C82916 * C3443 +
             C1745 * C3344 - C82893 * C3444) *
                C239 +
            (C1743 * C1464 - C82931 * C1516 + C1744 * C3860 - C82916 * C3947 +
             C1745 * C3863 - C82893 * C3948) *
                C82592) *
               C1642 +
           ((C1743 * C1153 - C82931 * C1215 + C1744 * C3346 - C82916 * C3445 +
             C1745 * C3343 - C82893 * C3446) *
                C239 +
            (C1743 * C1465 - C82931 * C1517 + C1744 * C3861 - C82916 * C3949 +
             C1745 * C3864 - C82893 * C3950) *
                C82592) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13256 * C169 - C13339 * C102 + C13257 * C753 - C13340 * C695 +
             C82893 * C1746 - C13341 * C1653) *
                C239 +
            (C13256 * C551 - C13339 * C497 + C13257 * C1055 - C13340 * C1003 +
             C82893 * C2323 - C13341 * C2241) *
                C82592) *
               C82925 +
           ((C13343 - C13344 + C13345 - C13346 + C13347 - C13348) * C239 +
            (C13856 - C13857 + C13858 - C13859 + C13860 - C13861) * C82592) *
               C82909 +
           ((C13355 - C13356 + C13357 - C13358 + C13359 - C13360) * C239 +
            (C13862 - C13863 + C13864 - C13865 + C13866 - C13867) * C82592) *
               C82885) *
              C1149 +
          (((C13339 * C1155 - C13256 * C1213 + C13340 * C3348 - C13257 * C3441 +
             C13341 * C3345 - C82893 * C3442) *
                C239 +
            (C13339 * C1463 - C13256 * C1515 + C13340 * C3859 - C13257 * C3945 +
             C13341 * C3862 - C82893 * C3946) *
                C82592) *
               C82925 +
           ((C13339 * C1154 - C13256 * C1214 + C13340 * C3347 - C13257 * C3443 +
             C13341 * C3344 - C82893 * C3444) *
                C239 +
            (C13339 * C1464 - C13256 * C1516 + C13340 * C3860 - C13257 * C3947 +
             C13341 * C3863 - C82893 * C3948) *
                C82592) *
               C82909 +
           ((C13339 * C1153 - C13256 * C1215 + C13340 * C3346 - C13257 * C3445 +
             C13341 * C3343 - C82893 * C3446) *
                C239 +
            (C13339 * C1465 - C13256 * C1517 + C13340 * C3861 - C13257 * C3949 +
             C13341 * C3864 - C82893 * C3950) *
                C82592) *
               C82885) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15400 * C169 - C15457 * C102 + C15401 * C753 - C15458 * C695 +
            C15402 * C1746 - C15459 * C1653 + C15403 * C2653 - C15460 * C2527 +
            C15404 * C15462 - C15461 * C15407) *
               C239 +
           (C15400 * C551 - C15457 * C497 + C15401 * C1055 - C15458 * C1003 +
            C15402 * C2323 - C15459 * C2241 + C15403 * C3175 - C15460 * C3083 +
            C15404 * C15739 - C15461 * C15693) *
               C82592) *
              C82523 * C1149 +
          ((C15457 * C1155 - C15400 * C1213 + C15458 * C3348 - C15401 * C3441 +
            C15459 * C3345 - C15402 * C3442 + C15460 * C16304 -
            C15403 * C16353 + C15461 * C16303 - C15404 * C16354) *
               C239 +
           (C15457 * C1463 - C15400 * C1515 + C15458 * C3859 - C15401 * C3945 +
            C15459 * C3862 - C15402 * C3946 + C15460 * C16579 -
            C15403 * C16625 + C15461 * C16580 - C15404 * C16626) *
               C82592) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
    d2eezz[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82581 *
               C81 +
           C643 * C82 + C644 * C83 + C645 * C84 + C646 * C85) *
              C1149 -
          ((C239 * C1269 - C607 * C1151 - C239 * C1467 + C82592 * C1562) *
               C82581 * C85 +
           (C239 * C1268 - C607 * C1152 - C239 * C1466 + C82592 * C1563) *
               C82581 * C84 +
           (C239 * C1267 - C607 * C1153 - C239 * C1465 + C82592 * C1564) *
               C82581 * C83 +
           (C239 * C1266 - C607 * C1154 - C239 * C1464 + C82592 * C1565) *
               C82581 * C82 +
           (C239 * C1265 - C607 * C1155 - C239 * C1463 + C82592 * C1566) *
               C82581 * C81) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C82931 +
            C3268 * C82916 + C3269 * C82893) *
               C1641 +
           (C2418 + C2448 + C2449) * C1642 + (C2427 + C2450 + C2451) * C82885) *
              C1149 -
          (((C239 * C3532 - C607 * C3343 - C239 * C3864 + C82592 * C4025) *
                C82893 +
            (C239 * C3529 - C607 * C3346 - C239 * C3861 + C82592 * C4026) *
                C82916 +
            (C239 * C1267 - C607 * C1153 - C239 * C1465 + C82592 * C1564) *
                C82931) *
               C82885 +
           ((C239 * C3531 - C607 * C3344 - C239 * C3863 + C82592 * C4027) *
                C82893 +
            (C239 * C3528 - C607 * C3347 - C239 * C3860 + C82592 * C4028) *
                C82916 +
            (C239 * C1266 - C607 * C1154 - C239 * C1464 + C82592 * C1565) *
                C82931) *
               C1642 +
           ((C239 * C3530 - C607 * C3345 - C239 * C3862 + C82592 * C4029) *
                C82893 +
            (C239 * C3527 - C607 * C3348 - C239 * C3859 + C82592 * C4030) *
                C82916 +
            (C239 * C1265 - C607 * C1155 - C239 * C1463 + C82592 * C1566) *
                C82931) *
               C1641) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C13256 +
            C3268 * C13257 + C3269 * C82893) *
               C82925 +
           (C13942 + C13943 + C13944) * C82909 +
           (C13945 + C13946 + C13947) * C82885) *
              C1149 -
          (((C239 * C3532 - C607 * C3343 - C239 * C3864 + C82592 * C4025) *
                C82893 +
            (C239 * C3529 - C607 * C3346 - C239 * C3861 + C82592 * C4026) *
                C13257 +
            (C239 * C1267 - C607 * C1153 - C239 * C1465 + C82592 * C1564) *
                C13256) *
               C82885 +
           ((C239 * C3531 - C607 * C3344 - C239 * C3863 + C82592 * C4027) *
                C82893 +
            (C239 * C3528 - C607 * C3347 - C239 * C3860 + C82592 * C4028) *
                C13257 +
            (C239 * C1266 - C607 * C1154 - C239 * C1464 + C82592 * C1565) *
                C13256) *
               C82909 +
           ((C239 * C3530 - C607 * C3345 - C239 * C3862 + C82592 * C4029) *
                C82893 +
            (C239 * C3527 - C607 * C3348 - C239 * C3859 + C82592 * C4030) *
                C13257 +
            (C239 * C1265 - C607 * C1155 - C239 * C1463 + C82592 * C1566) *
                C13256) *
               C82925) *
              C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C239 * C240 - C607 * C102 - C239 * C497 + C82592 * C608) * C15400 +
           C3268 * C15401 + C3269 * C15402 + C16260 * C15403 +
           C16261 * C15404) *
              C82523 * C1149 -
          ((C239 * C16400 - C607 * C16303 - C239 * C16580 + C82592 * C16669) *
               C15404 +
           (C239 * C16399 - C607 * C16304 - C239 * C16579 + C82592 * C16670) *
               C15403 +
           (C239 * C3530 - C607 * C3345 - C239 * C3862 + C82592 * C4029) *
               C15402 +
           (C239 * C3527 - C607 * C3348 - C239 * C3859 + C82592 * C4030) *
               C15401 +
           (C239 * C1265 - C607 * C1155 - C239 * C1463 + C82592 * C1566) *
               C15400) *
              C82523 * C1150) *
         C82939 * C82940) /
            (p * q * std::sqrt(p + q));
}
