/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ddsd_AA_xy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_2202_11_12(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C31518 = 0 * ae;
    const double C31517 = ae * be;
    const double C31516 = 0 * be;
    const double C31515 = 0 * be;
    const double C31514 = ae + be;
    const double C31513 = 0 * be;
    const double C31512 = xA - xB;
    const double C31573 = 0 * be;
    const double C31591 = 0 * be;
    const double C31590 = yA - yB;
    const double C31647 = 0 * ae;
    const double C31642 = 0 * be;
    const double C31641 = 0 * be;
    const double C31692 = 0 * be;
    const double C31758 = xP - xQ;
    const double C31757 = yP - yQ;
    const double C31756 = p + q;
    const double C31755 = p * q;
    const double C31765 = std::pow(ae, 2);
    const double C31763 = bs[3];
    const double C31773 = bs[4];
    const double C31782 = bs[5];
    const double C31796 = bs[6];
    const double C31818 = bs[7];
    const double C31971 = zP - zQ;
    const double C32068 = bs[2];
    const double C119 = bs[0];
    const double C32460 = ce + de;
    const double C32459 = ce * de;
    const double C32458 = xC - xD;
    const double C32472 = yC - yD;
    const double C32486 = zC - zD;
    const double C32527 = zA - zB;
    const double C31525 = C31518 / C31514;
    const double C31522 = C31516 / C31514;
    const double C31520 = 2 * C31514;
    const double C31519 = std::pow(C31514, 2);
    const double C31524 = C31517 * C31512;
    const double C31523 = C31512 * C31516;
    const double C31521 = C31512 * C31515;
    const double C32426 = C31512 * be;
    const double C32425 = C31512 * ae;
    const double C32424 = std::pow(C31512, 2);
    const double C31574 = C31573 / C31514;
    const double C31643 = C31591 / C31514;
    const double C31592 = C31517 * C31590;
    const double C31644 = C31590 * C31591;
    const double C32510 = std::pow(C31590, 2);
    const double C32569 = C31590 * be;
    const double C32567 = C31590 * ae;
    const double C31654 = C31647 / C31514;
    const double C31649 = C31590 * C31642;
    const double C31693 = C31692 / C31514;
    const double C31783 = std::pow(C31758, 2);
    const double C31841 = C31758 * ae;
    const double C31766 = C31757 * ae;
    const double C31764 = C31758 * C31757;
    const double C31938 = std::pow(C31757, 2);
    const double C31759 = 2 * C31755;
    const double C31975 = std::pow(C31971, 2);
    const double C32766 = 2 * C32460;
    const double C32765 = std::pow(C32460, 2);
    const double C32461 = std::pow(C32458, 2);
    const double C32764 = C32458 * ce;
    const double C32473 = std::pow(C32472, 2);
    const double C32767 = C32472 * ce;
    const double C32487 = std::pow(C32486, 2);
    const double C32768 = C32486 * ce;
    const double C32528 = std::pow(C32527, 2);
    const double C32611 = C32527 * be;
    const double C32609 = C32527 * ae;
    const double C32438 = std::pow(C31520, -1);
    const double C32759 = std::pow(C31520, -2);
    const double C31526 = 2 * C31519;
    const double C140 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (xP - xQ) * (yP - yQ) * std::pow(ae, 2)) /
                        C31519;
    const double C32763 = C31519 * C31520;
    const double C32762 = 4 * C31519;
    const double C31528 = C31523 / C31514;
    const double C31527 = C31521 / C31514;
    const double C32752 = std::pow(C32425, 2);
    const double C32427 = C32424 * C31517;
    const double C31652 = C31644 / C31514;
    const double C32511 = C32510 * C31517;
    const double C32769 = std::pow(C32567, 2);
    const double C31655 = C31649 / C31514;
    const double C31844 = C31782 * C31841;
    const double C31853 = C31773 * C31841;
    const double C31860 = C31763 * C31841;
    const double C31873 = C31796 * C31841;
    const double C31890 = C31818 * C31841;
    const double C31769 = C31763 * C31766;
    const double C31775 = C31773 * C31766;
    const double C31785 = C31782 * C31766;
    const double C31800 = C31796 * C31766;
    const double C31824 = C31818 * C31766;
    const double C31768 = C31764 * C31765;
    const double C31760 = C31759 / C31756;
    const double C126 = (-(bs[1] * C31766 * C31759) / C31756) / C31514;
    const double C127 = (-(bs[1] * C31841 * C31759) / C31756) / C31514;
    const double C120 = -(C31758 * bs[1] * C31759) / C31756;
    const double C247 = -(C31757 * bs[1] * C31759) / C31756;
    const double C352 = -(C31971 * bs[1] * C31759) / C31756;
    const double C32799 = std::pow(C32766, -2);
    const double C32797 = std::pow(C32766, -1);
    const double C32462 = C32461 * C32459;
    const double C32474 = C32473 * C32459;
    const double C32488 = C32487 * C32459;
    const double C32529 = C32528 * C31517;
    const double C32771 = std::pow(C32609, 2);
    const double C31535 = C31516 / C31526;
    const double C31532 = C31515 / C31526;
    const double C31531 = C31513 / C31526;
    const double C31646 = C31591 / C31526;
    const double C31651 = C31642 / C31526;
    const double C31650 = C31641 / C31526;
    const double C32796 = 4 * C32763;
    const double C32795 = C31514 * C32762;
    const double C31533 = 0 - C31528;
    const double C31530 = 0 - C31527;
    const double C32428 = C32427 / C31514;
    const double C31656 = 0 - C31652;
    const double C32512 = C32511 / C31514;
    const double C31659 = 0 - C31655;
    const double C31774 = C31773 * C31768;
    const double C31784 = C31782 * C31768;
    const double C31798 = C31796 * C31768;
    const double C31822 = C31818 * C31768;
    const double C31762 = -C31760;
    const double C31772 = std::pow(C31760, 4);
    const double C31795 = std::pow(C31760, 6);
    const double C141 = (ae * std::pow(C31760, 2) * bs[2] * C31757 * ae +
                         C31758 * std::pow(-C31760, 3) * bs[3] * C31758 *
                             C31757 * std::pow(ae, 2)) /
                        C31519;
    const double C32067 = std::pow(C31760, 2);
    const double C128 =
        (C31758 * std::pow(C31760, 2) * bs[2] * C31766) / C31514;
    const double C129 =
        (C31758 * std::pow(C31760, 2) * bs[2] * C31841) / C31514 -
        (ae * bs[1] * C31759) / (C31756 * C31514);
    const double C32463 = C32462 / C32460;
    const double C32475 = C32474 / C32460;
    const double C32489 = C32488 / C32460;
    const double C32530 = C32529 / C31514;
    const double C31538 = C31533 * ae;
    const double C31537 = C31530 * ae;
    const double C32429 = -C32428;
    const double C31660 = C31656 * ae;
    const double C32513 = -C32512;
    const double C31663 = C31659 * ae;
    const double C31767 = std::pow(C31762, 3);
    const double C31781 = std::pow(C31762, 5);
    const double C31817 = std::pow(C31762, 7);
    const double C31777 = C31772 * C31775;
    const double C31776 = C31772 * C31774;
    const double C31842 = C31773 * C31772;
    const double C31855 = C31772 * C31853;
    const double C31803 = C31795 * C31800;
    const double C31802 = C31795 * C31798;
    const double C31877 = C31795 * C31873;
    const double C31891 = C31796 * C31795;
    const double C32069 = C32068 * C32067;
    const double C261 = (C31757 * C32067 * C32068 * C31841) / C31514;
    const double C262 = (C31757 * C32067 * C32068 * C31766) / C31514 -
                        (ae * bs[1] * C31759) / (C31756 * C31514);
    const double C366 = (C31971 * C32067 * C32068 * C31841) / C31514;
    const double C367 = (C31971 * C32067 * C32068 * C31766) / C31514;
    const double C32464 = -C32463;
    const double C32476 = -C32475;
    const double C32490 = -C32489;
    const double C32531 = -C32530;
    const double C31542 = C31538 / C31514;
    const double C31541 = C31537 / C31514;
    const double C32430 = std::exp(C32429);
    const double C31664 = C31660 / C31514;
    const double C32514 = std::exp(C32513);
    const double C31667 = C31663 / C31514;
    const double C31770 = C31767 * C31769;
    const double C31854 = C31763 * C31767;
    const double C31861 = C31767 * C31860;
    const double C277 = (ae * std::pow(C31760, 2) * bs[2] * C31841 +
                         C31757 * C31767 * C31763 * C31768) /
                        C31519;
    const double C382 = ((zP - zQ) * C31767 * C31763 * C31768) / C31519;
    const double C31787 = C31781 * C31785;
    const double C31786 = C31781 * C31784;
    const double C31843 = C31782 * C31781;
    const double C31848 = C31781 * C31844;
    const double C31827 = C31817 * C31824;
    const double C31826 = C31817 * C31822;
    const double C31893 = C31817 * C31890;
    const double C31780 = ae * C31777;
    const double C31779 = C31758 * C31777;
    const double C32148 = C31757 * C31777;
    const double C383 =
        (C31767 * C31763 * C31768 + C31776 * std::pow(zP - zQ, 2)) / C31519;
    const double C31846 = C31758 * C31842;
    const double C31845 = C31842 * ae;
    const double C32075 = C31842 * C31783;
    const double C32150 = C31842 * C31938;
    const double C32221 = C31757 * C31842;
    const double C32404 = C31842 * C31975;
    const double C32407 = C31971 * C31842;
    const double C31863 = C31758 * C31855;
    const double C31936 = ae * C31855;
    const double C31935 = C31757 * C31855;
    const double C31805 = C31803 * C31783;
    const double C31816 = ae * C31803;
    const double C31815 = C31758 * C31803;
    const double C32234 = C31757 * C31803;
    const double C32298 = C31803 * C31975;
    const double C31804 = C31758 * C31802;
    const double C31986 = C31757 * C31802;
    const double C32045 = C31802 * C31975;
    const double C32048 = C31971 * C31802;
    const double C31879 = C31758 * C31877;
    const double C31987 = C31877 * C31938;
    const double C32001 = ae * C31877;
    const double C32000 = C31757 * C31877;
    const double C32305 = C31877 * C31975;
    const double C31896 = C31891 * C31783;
    const double C31895 = C31758 * C31891;
    const double C31894 = C31891 * ae;
    const double C32237 = C31891 * C31938;
    const double C121 = C32069 * C31783 - (bs[1] * C31759) / C31756;
    const double C246 = C31757 * C31758 * C32069;
    const double C248 = C32069 * C31938 - (bs[1] * C31759) / C31756;
    const double C351 = C31971 * C31758 * C32069;
    const double C353 = C32069 * C31975 - (bs[1] * C31759) / C31756;
    const double C696 = C31971 * C31757 * C32069;
    const double C32465 = std::exp(C32464);
    const double C32477 = std::exp(C32476);
    const double C32491 = std::exp(C32490);
    const double C32532 = std::exp(C32531);
    const double C31546 = C31542 - C31532;
    const double C31545 = C31541 - C31531;
    const double C31529 = C31524 * C32430;
    const double C32432 = C32430 * C32425;
    const double C32431 = C32430 / C31520;
    const double C32440 = C32438 * C32430;
    const double C32755 = C32430 * C32426;
    const double C32793 = C32759 * C32430;
    const double C32787 = C32430 * C32752;
    const double C31668 = C31664 - C31651;
    const double C151 = C32514 * C141;
    const double C149 = C32514 * C128;
    const double C2083 = C32514 * C367;
    const double C31593 = C31592 * C32514;
    const double C113 = -(2 * ae * be * (yA - yB) * C32514) / (ae + be);
    const double C32568 = C32514 / C31520;
    const double C32570 = C32514 * C32567;
    const double C32577 = C32438 * C32514;
    const double C32775 = C32514 * C32569;
    const double C32804 = C32759 * C32514;
    const double C32802 = C32514 * C32769;
    const double C31671 = C31667 - C31650;
    const double C142 = (C31767 * C31763 * C31768 + ae * C31758 * C31770 +
                         C31758 * (ae * C31770 + C31758 * std::pow(C31760, 4) *
                                                     bs[4] * C31768)) /
                        C31519;
    const double C143 =
        (2 * (ae * C31770 + C31758 * C31776) +
         ae * (C31770 + C31777 * std::pow(C31758, 2)) +
         C31758 * (C31776 + ae * C31758 * C31777 +
                   C31758 * (ae * C31777 +
                             C31758 * std::pow(C31762, 5) * bs[5] * C31768))) /
        C31519;
    const double C276 = (ae * (C31758 * C31767 * C31763 * C31841 +
                               bs[2] * std::pow(C31760, 2) * ae) +
                         C31757 * (ae * C31770 + C31758 * C31776)) /
                        C31519;
    const double C381 = ((zP - zQ) * (ae * C31770 + C31758 * C31776)) / C31519;
    const double C130 =
        (std::pow(C31760, 2) * bs[2] * C31766 + C31770 * C31783) / C31514;
    const double C132 =
        (2 * C31758 * C31770 + C31758 * (C31770 + C31777 * C31783)) / C31514;
    const double C260 =
        (C31757 * C31758 * C31770 + C31758 * C32069 * ae) / C31514;
    const double C263 =
        (C32067 * C32068 * C31766 + C31757 * (C31757 * C31770 + C32069 * ae) +
         C31757 * C32069 * ae) /
        C31514;
    const double C363 = (C31971 * (C31770 + C31777 * C31783)) / C31514;
    const double C365 = (C31971 * C31758 * C31770) / C31514;
    const double C368 = (C32067 * C32068 * C31766 + C31770 * C31975) / C31514;
    const double C701 = (C31971 * (C31757 * C31770 + C32069 * ae)) / C31514;
    const double C2068 =
        (2 * C31971 * C31770 + C31971 * (C31770 + C31777 * C31975)) / C31514;
    const double C31864 = C31854 * ae;
    const double C32074 = C31758 * C31854;
    const double C32149 = C31757 * C31854;
    const double C258 = (C31757 * (C31770 + C31777 * C31783) +
                         (C32069 + C31854 * C31783) * ae) /
                        C31514;
    const double C122 =
        2 * C31758 * C32069 + C31758 * (C32069 + C31854 * C31783);
    const double C245 = C31757 * (C32069 + C31854 * C31783);
    const double C350 = C31971 * (C32069 + C31854 * C31783);
    const double C1008 =
        2 * C31757 * C32069 + C31757 * (C32069 + C31854 * C31938);
    const double C1142 = C31971 * (C32069 + C31854 * C31938);
    const double C2059 =
        2 * C31971 * C32069 + C31971 * (C32069 + C31854 * C31975);
    const double C2060 =
        3 * (C32069 + C31854 * C31975) +
        C31971 * (2 * C31971 * C31854 + C31971 * (C31854 + C31842 * C31975));
    const double C278 = (C31767 * C31763 * C31768 + ae * C31757 * C31861 +
                         C31757 * (ae * C31861 + C31757 * C31776)) /
                        C31519;
    const double C711 = ((zP - zQ) * (ae * C31861 + C31757 * C31776)) / C31519;
    const double C131 =
        (C32067 * C32068 * C31841 + C31758 * (C31758 * C31861 + C32069 * ae) +
         C31758 * C32069 * ae) /
        C31514;
    const double C259 = (C31757 * (C31758 * C31861 + C32069 * ae)) / C31514;
    const double C264 = (C32067 * C32068 * C31841 + C31861 * C31938) / C31514;
    const double C364 = (C31971 * (C31758 * C31861 + C32069 * ae)) / C31514;
    const double C369 = (C32067 * C32068 * C31841 + C31861 * C31975) / C31514;
    const double C702 = (C31971 * C31757 * C31861) / C31514;
    const double C1016 =
        (2 * C31757 * C31861 + C31757 * (C31861 + C31855 * C31938)) / C31514;
    const double C1153 = (C31971 * (C31861 + C31855 * C31938)) / C31514;
    const double C2067 =
        (2 * C31971 * C31861 + C31971 * (C31861 + C31855 * C31975)) / C31514;
    const double C2085 = C32514 * C382;
    const double C31789 = C31787 * C31783;
    const double C31794 = ae * C31787;
    const double C31793 = C31758 * C31787;
    const double C32220 = C31757 * C31787;
    const double C32294 = C31787 * C31975;
    const double C32297 = C31971 * C31787;
    const double C2069 =
        (3 * (C31770 + C31777 * C31975) +
         C31971 * (2 * C31971 * C31777 + C31971 * (C31777 + C31787 * C31975))) /
        C31514;
    const double C31788 = C31758 * C31786;
    const double C31937 = C31757 * C31786;
    const double C1026 = (2 * (ae * C31861 + C31757 * C31776) +
                          ae * (C31861 + C31855 * std::pow(C31757, 2)) +
                          C31757 * (C31776 + ae * C31757 * C31855 +
                                    C31757 * (ae * C31855 + C31757 * C31786))) /
                         C31519;
    const double C2077 = (2 * C31971 * C31776 +
                          C31971 * (C31776 + C31786 * std::pow(C31971, 2))) /
                         C31519;
    const double C2078 =
        (3 * (C31776 + C31786 * C31975) +
         C31971 * (2 * C31971 * C31786 + C31971 * (C31786 + C31802 * C31975))) /
        C31519;
    const double C31847 = C31843 * C31783;
    const double C31875 = C31758 * C31843;
    const double C31874 = C31843 * ae;
    const double C32222 = C31843 * C31938;
    const double C32235 = C31757 * C31843;
    const double C32408 = C31843 * C31975;
    const double C31850 = C31758 * C31848;
    const double C31940 = C31848 * C31938;
    const double C31985 = ae * C31848;
    const double C31984 = C31757 * C31848;
    const double C32291 = C31848 * C31975;
    const double C32304 = C31971 * C31848;
    const double C2070 =
        (3 * (C31861 + C31855 * C31975) +
         C31971 * (2 * C31971 * C31855 + C31971 * (C31855 + C31848 * C31975))) /
        C31514;
    const double C31829 = C31827 * C31783;
    const double C31828 = C31758 * C31826;
    const double C32002 = C31757 * C31826;
    const double C32049 = C31826 * C31975;
    const double C31897 = C31758 * C31893;
    const double C32004 = C31893 * C31938;
    const double C370 = (C31758 * C31770 + C31779 * C31975) / C31514;
    const double C2093 = C32514 * C383;
    const double C31868 = C31846 * ae;
    const double C32078 = 2 * C31846;
    const double C32156 = C31757 * C31846;
    const double C32076 = C31854 + C32075;
    const double C32152 = C31854 + C32150;
    const double C32226 = 2 * C32221;
    const double C32224 = C32221 * ae;
    const double C32405 = C31854 + C32404;
    const double C32409 = 2 * C32407;
    const double C1157 = (C31757 * C31861 + C31935 * C31975) / C31514;
    const double C31807 = C31787 + C31805;
    const double C31823 = 2 * C31815;
    const double C31821 = ae * C31815;
    const double C32261 = C31757 * C31815;
    const double C32313 = C31815 * C31975;
    const double C32300 = C31787 + C32298;
    const double C32046 = C31786 + C32045;
    const double C32050 = 2 * C32048;
    const double C31991 = C31848 + C31987;
    const double C32008 = 2 * C32000;
    const double C32006 = ae * C32000;
    const double C32322 = C32000 * C31975;
    const double C32307 = C31848 + C32305;
    const double C31899 = C31843 + C31896;
    const double C31898 = C31895 * ae;
    const double C32263 = C31895 * C31938;
    const double C32241 = C31843 + C32237;
    const double C32798 = C32465 * C32764;
    const double C110 =
        (C32465 * std::pow(C32764, 2)) / C32765 + C32465 / C32766;
    const double C112 = C32799 * C32465;
    const double C473 = C32797 * C32465;
    const double C32800 = C32477 * C32767;
    const double C239 =
        (C32477 * std::pow(C32767, 2)) / C32765 + C32477 / C32766;
    const double C241 = C32799 * C32477;
    const double C471 = C32797 * C32477;
    const double C32801 = C32491 * C32768;
    const double C345 =
        (C32491 * std::pow(C32768, 2)) / C32765 + C32491 / C32766;
    const double C347 = C32799 * C32491;
    const double C585 = C32797 * C32491;
    const double C32610 = C32532 / C31520;
    const double C32612 = C32532 * C32609;
    const double C32619 = C32438 * C32532;
    const double C32781 = C32532 * C32611;
    const double C32807 = C32759 * C32532;
    const double C32805 = C32532 * C32771;
    const double C31551 = C31546 / C31520;
    const double C31550 = C31512 * C31546;
    const double C31549 = C31545 + C31522;
    const double C31536 = C31529 / C31519;
    const double C31534 = 2 * C31529;
    const double C32433 = C32432 * C32426;
    const double C32439 = C32432 / C31526;
    const double C32756 = C32438 * C32432;
    const double C32754 = C32432 / C31514;
    const double C829 = (C32430 * std::pow(C32426, 2)) / C31519 + C32431;
    const double C32441 = C32440 * C32426;
    const double C32760 = C32425 * C32440;
    const double C32758 = 2 * C32440;
    const double C32808 = C32440 / C32762;
    const double C106 = C32440 / C32796;
    const double C17833 = C32440 / C31520;
    const double C32789 = C32755 / C31514;
    const double C830 = (-2 * C32438 * C32755) / C31514;
    const double C32821 = C32787 / C31519;
    const double C31673 = C31668 / C31520;
    const double C31672 = C31590 * C31668;
    const double C31620 = 2 * C31593;
    const double C31648 = C31593 / C31519;
    const double C834 =
        ((0 * ae) / C31514 - C31593 / C31519) / C31520 + (0 * ae) / C31514;
    const double C2756 =
        ((C32514 - (C31590 * 2 * C31593) / C31514) * ae) / C31514 -
        C31591 / C31526;
    const double C2757 = (0 * ae) / C31514 - C31593 / C31519;
    const double C152 = C113 * C121;
    const double C150 = C113 * C129;
    const double C148 = C113 * C120;
    const double C493 = C113 * C246;
    const double C605 = C113 * C351;
    const double C2090 = C113 * C353;
    const double C2084 = C113 * C366;
    const double C2082 = C113 * C352;
    const double C2629 = C113 * C696;
    const double C5418 = (C32514 * std::pow(C32569, 2)) / C31519 + C32568;
    const double C32571 = C32570 * C32569;
    const double C32576 = C32570 / C31526;
    const double C32773 = C32570 / C31514;
    const double C32770 = C32438 * C32570;
    const double C833 =
        (((C32514 - (C31590 * 2 * C31593) / C31514) * ae) / C31514 -
         C31591 / C31526) /
            C31520 +
        ((C31590 * ((0 * ae) / C31514 - C31593 / C31519) + C32577) * ae) /
            C31514;
    const double C32578 = C32577 * C32569;
    const double C32779 = C32567 * C32577;
    const double C32778 = 2 * C32577;
    const double C32814 = C32577 / C32762;
    const double C6284 = C32577 / C32796;
    const double C17830 = C32577 / C31520;
    const double C32810 = C32775 / C31514;
    const double C5419 = (-2 * C32438 * C32775) / C31514;
    const double C32826 = C32802 / C31519;
    const double C31677 = C31671 + C31643;
    const double C155 = C32514 * C142;
    const double C159 = C32514 * C143;
    const double C492 = C32514 * C276;
    const double C2770 = C32577 * C276;
    const double C15067 = C32577 * C276;
    const double C604 = C32514 * C381;
    const double C153 = C32514 * C130;
    const double C157 = C32514 * C132;
    const double C494 = C32514 * C260;
    const double C2766 = C32577 * C260;
    const double C15063 = C32577 * C260;
    const double C602 = C32514 * C363;
    const double C606 = C32514 * C365;
    const double C2091 = C32514 * C368;
    const double C2630 = C32514 * C701;
    const double C4640 = C32577 * C701;
    const double C17027 = C32577 * C701;
    const double C2109 = C32514 * C2068;
    const double C31865 = C31863 + C31864;
    const double C32151 = C32148 + C31864;
    const double C1017 =
        (2 * (C31757 * C31770 + C32069 * ae) +
         C31757 * (C31770 + C31757 * (C31757 * C31777 + C31864) +
                   C31757 * C31854 * ae) +
         (C32069 + C31854 * C31938) * ae) /
        C31514;
    const double C265 =
        (C31758 * C31770 + C31757 * (C31757 * C31779 + C32074 * ae) +
         C31757 * C32074 * ae) /
        C31514;
    const double C703 = (C31971 * (C31757 * C31779 + C32074 * ae)) / C31514;
    const double C249 = C31758 * C32069 + C32074 * C31938;
    const double C354 = C31758 * C32069 + C32074 * C31975;
    const double C697 = C31971 * C31757 * C32074;
    const double C1007 =
        2 * C31757 * C32074 + C31757 * (C32074 + C31846 * C31938);
    const double C1141 = C31971 * (C32074 + C31846 * C31938);
    const double C2058 =
        2 * C31971 * C32074 + C31971 * (C32074 + C31846 * C31975);
    const double C1143 = C31757 * C32069 + C32149 * C31975;
    const double C2616 =
        2 * C31971 * C32149 + C31971 * (C32149 + C32221 * C31975);
    const double C490 = C32514 * C258;
    const double C2774 = C32577 * C258;
    const double C15071 = C32577 * C258;
    const double C156 = C113 * C122;
    const double C489 = C113 * C245;
    const double C601 = C113 * C350;
    const double C2108 = C113 * C2059;
    const double C12102 = C113 * C2060;
    const double C2632 = C32514 * C711;
    const double C4644 = C32577 * C711;
    const double C17031 = C32577 * C711;
    const double C154 = C113 * C131;
    const double C491 = C113 * C259;
    const double C603 = C113 * C364;
    const double C2092 = C113 * C369;
    const double C2631 = C113 * C702;
    const double C2106 = C113 * C2067;
    const double C31791 = C31777 + C31789;
    const double C31806 = C31794 + C31804;
    const double C31799 = 2 * C31793;
    const double C31797 = ae * C31793;
    const double C32155 = C31757 * C31793;
    const double C2066 =
        (2 * C31971 * C31779 + C31971 * (C31779 + C31793 * C31975)) / C31514;
    const double C2071 =
        (3 * (C31779 + C31793 * C31975) +
         C31971 * (2 * C31971 * C31793 + C31971 * (C31793 + C31815 * C31975))) /
        C31514;
    const double C32223 = C32220 + C31845;
    const double C32295 = C31777 + C32294;
    const double C32299 = 2 * C32297;
    const double C12103 = C32514 * C2069;
    const double C31790 = C31780 + C31788;
    const double C31939 = C31936 + C31937;
    const double C2107 = C32514 * C2077;
    const double C12105 = C32514 * C2078;
    const double C31849 = C31842 + C31847;
    const double C31878 = C31875 * ae;
    const double C31892 = 2 * C31875;
    const double C32157 = C31875 * C31938;
    const double C32262 = C31757 * C31875;
    const double C32415 = C31875 * C31975;
    const double C2061 =
        3 * (C32074 + C31846 * C31975) +
        C31971 * (2 * C31971 * C31846 + C31971 * (C31846 + C31875 * C31975));
    const double C31880 = C31879 + C31874;
    const double C32239 = C32234 + C31874;
    const double C32225 = C31842 + C32222;
    const double C32242 = 2 * C32235;
    const double C32240 = C32235 * ae;
    const double C32418 = C32235 * C31975;
    const double C7025 =
        3 * (C32149 + C32221 * C31975) +
        C31971 * (2 * C31971 * C32221 + C31971 * (C32221 + C32235 * C31975));
    const double C32410 = C31842 + C32408;
    const double C31851 = C31850 + C31845;
    const double C31941 = C31855 + C31940;
    const double C31989 = C31985 + C31986;
    const double C31990 = 2 * C31984;
    const double C31988 = ae * C31984;
    const double C2620 =
        (2 * C31971 * C31935 + C31971 * (C31935 + C31984 * C31975)) / C31514;
    const double C7031 =
        (3 * (C31935 + C31984 * C31975) +
         C31971 * (2 * C31971 * C31984 + C31971 * (C31984 + C32000 * C31975))) /
        C31514;
    const double C32292 = C31855 + C32291;
    const double C32306 = 2 * C32304;
    const double C12104 = C113 * C2070;
    const double C31831 = C31803 + C31829;
    const double C31830 = C31816 + C31828;
    const double C32007 = C32001 + C32002;
    const double C32051 = C31802 + C32049;
    const double C31900 = C31897 + C31894;
    const double C32009 = C31877 + C32004;
    const double C1821 = C32514 * C370;
    const double C1015 =
        (2 * (C31757 * C31779 + C32074 * ae) +
         C31757 * (C31779 + C31757 * (C31757 * C31793 + C31868) +
                   C31757 * C31846 * ae) +
         (C32074 + C31846 * C31938) * ae) /
        C31514;
    const double C1145 = C31757 * C32074 + C32156 * C31975;
    const double C123 = 3 * (C32069 + C31854 * C31783) +
                        C31758 * (2 * C32074 + C31758 * C32076);
    const double C244 = C31757 * (2 * C32074 + C31758 * C32076);
    const double C250 = C32069 + C31854 * C31783 + C32076 * C31938;
    const double C349 = C31971 * (2 * C32074 + C31758 * C32076);
    const double C355 = C32069 + C31854 * C31783 + C32076 * C31975;
    const double C698 = C31971 * C31757 * C32076;
    const double C1009 = 3 * (C32069 + C31854 * C31938) +
                         C31757 * (2 * C32149 + C31757 * C32152);
    const double C1144 = C32069 + C31854 * C31938 + C32152 * C31975;
    const double C1694 = C31971 * (2 * C32149 + C31757 * C32152);
    const double C12087 =
        4 * (2 * C31971 * C31854 + C31971 * C32405) +
        C31971 * (3 * C32405 + C31971 * (2 * C31971 * C31842 +
                                         C31971 * (C31842 + C31843 * C31975)));
    const double C2639 = C113 * C1157;
    const double C31809 = C31758 * C31807;
    const double C31819 = 3 * C31807;
    const double C31814 = ae * C31807;
    const double C32162 = C31757 * C31807;
    const double C31825 = C31802 + C31821;
    const double C32314 = C31793 + C32313;
    const double C32301 = C31971 * C32300;
    const double C12093 =
        (4 * (2 * C31971 * C31786 + C31971 * C32046) +
         C31971 *
             (3 * C32046 + C31971 * (2 * C31971 * C31802 +
                                     C31971 * (C31802 + C31826 * C31975)))) /
        C31519;
    const double C31994 = C31757 * C31991;
    const double C32003 = 3 * C31991;
    const double C31999 = ae * C31991;
    const double C32010 = C31802 + C32006;
    const double C32323 = C31984 + C32322;
    const double C32308 = C31971 * C32307;
    const double C31902 = C31758 * C31899;
    const double C31901 = C31899 * ae;
    const double C32164 = C31899 * C31938;
    const double C32266 = C31875 + C32263;
    const double C32244 = C31757 * C32241;
    const double C111 = (2 * C32797 * C32798) / C32460;
    const double C472 = C32798 / C32460;
    const double C240 = (2 * C32797 * C32800) / C32460;
    const double C470 = C32800 / C32460;
    const double C346 = (2 * C32797 * C32801) / C32460;
    const double C584 = C32801 / C32460;
    const double C10305 = (C32532 * std::pow(C32611, 2)) / C31519 + C32610;
    const double C32613 = C32612 * C32611;
    const double C32618 = C32612 / C31526;
    const double C32774 = C32612 / C31514;
    const double C32772 = C32438 * C32612;
    const double C32620 = C32619 * C32611;
    const double C32785 = C32609 * C32619;
    const double C32784 = 2 * C32619;
    const double C32820 = C32619 / C32762;
    const double C11962 = C32619 / C32796;
    const double C24412 = C32619 / C31520;
    const double C32816 = C32781 / C31514;
    const double C10306 = (-2 * C32438 * C32781) / C31514;
    const double C32828 = C32805 / C31519;
    const double C31555 = C31550 + 0;
    const double C31554 = C31549 / C31520;
    const double C31540 = C31525 - C31536;
    const double C31539 = C31512 * C31534;
    const double C837 =
        ((-C31534 / C31514) / C31520 - (0 * be) / C31514) / C31520 -
        (0 * be) / C31514;
    const double C6291 = -C31534 / C31514;
    const double C15878 = (-C31534 / C31514) / C31520 - (0 * be) / C31514;
    const double C32434 = C32433 / C31519;
    const double C32790 = 2 * C32756;
    const double C32442 = C32441 / C31514;
    const double C32794 = C32760 / C31526;
    const double C32822 = C32754 - C32789;
    const double C15871 = -C32789;
    const double C32836 = C32821 + C32431;
    const double C31678 = C31672 + 0;
    const double C31645 = C31590 * C31620;
    const double C5425 =
        ((-C31591 / C31514) / C31520 -
         ((C32514 - (C31590 * C31620) / C31514) * be) / C31514) /
            C31520 -
        ((C31590 * ((-C31620 / C31514) / C31520 - (0 * be) / C31514) + C32577) *
         be) /
            C31514;
    const double C5426 =
        ((-C31620 / C31514) / C31520 - (0 * be) / C31514) / C31520 -
        (0 * be) / C31514;
    const double C15054 = (-C31620 / C31514) / C31520 - (0 * be) / C31514;
    const double C31658 = C31654 - C31648;
    const double C11354 = C834 * C1153;
    const double C11348 = C834 * C1142;
    const double C2779 = C2756 * C122;
    const double C2775 = C2756 * C131;
    const double C2771 = C2756 * C121;
    const double C2767 = C2756 * C129;
    const double C2763 = C2756 * C120;
    const double C3163 = C2756 * C246;
    const double C3159 = C2756 * C259;
    const double C3155 = C2756 * C245;
    const double C3329 = C2756 * C351;
    const double C3325 = C2756 * C364;
    const double C3321 = C2756 * C350;
    const double C4667 = C2756 * C353;
    const double C4663 = C2756 * C369;
    const double C4641 = C2756 * C366;
    const double C4637 = C2756 * C352;
    const double C5301 = C2756 * C702;
    const double C5297 = C2756 * C696;
    const double C12869 = C2756 * C2059;
    const double C12865 = C2756 * C2067;
    const double C13486 = C2756 * C1157;
    const double C14538 = C2756 * C2060;
    const double C14534 = C2756 * C2070;
    const double C2773 = C2757 * C245;
    const double C2769 = C2757 * C259;
    const double C2765 = C2757 * C246;
    const double C4661 = C2757 * C1157;
    const double C4643 = C2757 * C702;
    const double C4639 = C2757 * C696;
    const double C5303 = C2757 * C1153;
    const double C5299 = C2757 * C1142;
    const double C169 = C150 + C151;
    const double C168 = C148 + C149;
    const double C2111 = C2084 + C2085;
    const double C2110 = C2082 + C2083;
    const double C5466 = C5418 * C132;
    const double C5460 = C5418 * C143;
    const double C5450 = C5418 * C142;
    const double C5444 = C5418 * C130;
    const double C5438 = C5418 * C141;
    const double C5432 = C5418 * C128;
    const double C5878 = C5418 * C260;
    const double C5872 = C5418 * C276;
    const double C5866 = C5418 * C258;
    const double C6060 = C5418 * C365;
    const double C6054 = C5418 * C381;
    const double C6048 = C5418 * C363;
    const double C7072 = C5418 * C2068;
    const double C7066 = C5418 * C2077;
    const double C7056 = C5418 * C383;
    const double C7050 = C5418 * C368;
    const double C7044 = C5418 * C382;
    const double C7038 = C5418 * C367;
    const double C7399 = C5418 * C370;
    const double C7573 = C5418 * C711;
    const double C7567 = C5418 * C701;
    const double C32572 = C32571 / C31519;
    const double C2784 = C32773 * C143;
    const double C2780 = C32773 * C132;
    const double C2776 = C32773 * C142;
    const double C2772 = C32773 * C130;
    const double C2768 = C32773 * C141;
    const double C2764 = C32773 * C128;
    const double C3164 = C32773 * C260;
    const double C3160 = C32773 * C276;
    const double C3156 = C32773 * C258;
    const double C3330 = C32773 * C365;
    const double C3326 = C32773 * C381;
    const double C3322 = C32773 * C363;
    const double C4668 = C32773 * C368;
    const double C4664 = C32773 * C383;
    const double C4660 = C32773 * C370;
    const double C4642 = C32773 * C382;
    const double C4638 = C32773 * C367;
    const double C5302 = C32773 * C711;
    const double C5298 = C32773 * C701;
    const double C12870 = C32773 * C2068;
    const double C12866 = C32773 * C2077;
    const double C14539 = C32773 * C2069;
    const double C14535 = C32773 * C2078;
    const double C832 =
        (((0 - (C31590 * C31591) / C31514) * ae) / C31514 - (0 * be) / C31526) /
            C31520 +
        ((C31590 * (((C32514 - (C31590 * 2 * C31593) / C31514) * ae) / C31514 -
                    C31591 / C31526) +
          C32773) *
         ae) /
            C31514 +
        (0 * ae) / C31514 - C31593 / C31519;
    const double C32803 = 2 * C32770;
    const double C853 = C833 * C245;
    const double C847 = C833 * C259;
    const double C841 = C833 * C246;
    const double C11364 = C833 * C1157;
    const double C11352 = C833 * C702;
    const double C11346 = C833 * C696;
    const double C11869 = C833 * C1153;
    const double C11863 = C833 * C1142;
    const double C32579 = C32578 / C31514;
    const double C32813 = C32779 / C31526;
    const double C32830 = C32773 - C32810;
    const double C15047 = -C32810;
    const double C5446 = C5419 * C258;
    const double C5440 = C5419 * C276;
    const double C5434 = C5419 * C260;
    const double C7046 = C5419 * C711;
    const double C7040 = C5419 * C701;
    const double C32839 = C32826 + C32568;
    const double C31681 = C31677 / C31520;
    const double C170 = C152 + C153;
    const double C502 = C493 + C494;
    const double C614 = C605 + C606;
    const double C2112 = C2090 + C2091;
    const double C2645 = C2629 + C2630;
    const double C133 =
        (2 * (C31758 * C31861 + C32069 * ae) +
         C31758 * (C31861 + C31758 * C31865 + C31758 * C31854 * ae) +
         (C32069 + C31854 * C31783) * ae) /
        C31514;
    const double C257 =
        (C31757 * (C31861 + C31758 * C31865 + C32074 * ae)) / C31514;
    const double C266 =
        (C31758 * C31861 + C32069 * ae + C31865 * C31938) / C31514;
    const double C362 =
        (C31971 * (C31861 + C31758 * C31865 + C32074 * ae)) / C31514;
    const double C371 =
        (C31758 * C31861 + C32069 * ae + C31865 * C31975) / C31514;
    const double C704 = (C31971 * C31757 * C31865) / C31514;
    const double C1018 =
        (3 * (C31770 + C31757 * C32151 + C32149 * ae) +
         C31757 * (2 * C32151 +
                   C31757 * (C31777 + C31757 * (C31757 * C31787 + C31845) +
                             C31757 * C31842 * ae) +
                   C32152 * ae) +
         (2 * C32149 + C31757 * C32152) * ae) /
        C31514;
    const double C1154 =
        (C31971 * (C31770 + C31757 * C32151 + C32149 * ae)) / C31514;
    const double C1155 =
        (C31757 * C31770 + C32069 * ae + C32151 * C31975) / C31514;
    const double C1156 =
        (C31770 + C31757 * C32151 + C32149 * ae +
         (C31777 + C31757 * (C31757 * C31787 + C31845) + C31757 * C31842 * ae) *
             C31975) /
        C31514;
    const double C1697 =
        (C31971 * (2 * C32151 +
                   C31757 * (C31777 + C31757 * (C31757 * C31787 + C31845) +
                             C31757 * C31842 * ae) +
                   C32152 * ae)) /
        C31514;
    const double C2619 =
        (2 * C31971 * C32151 +
         C31971 * (C32151 + (C31757 * C31787 + C31845) * C31975)) /
        C31514;
    const double C844 = C32804 * C265;
    const double C3162 = C32577 * C265;
    const double C5436 = C32804 * C265;
    const double C5876 = C5419 * C265;
    const double C15459 = C32577 * C265;
    const double C17846 = C17830 * C265;
    const double C2300 = C32514 * C703;
    const double C3328 = C32577 * C703;
    const double C4894 = C32773 * C703;
    const double C6058 = C5419 * C703;
    const double C9037 = C5418 * C703;
    const double C15625 = C32577 * C703;
    const double C843 = C834 * C249;
    const double C1347 = C833 * C249;
    const double C3161 = C2757 * C249;
    const double C1820 = C113 * C354;
    const double C4659 = C2756 * C354;
    const double C1533 = C833 * C697;
    const double C2299 = C113 * C697;
    const double C3327 = C2757 * C697;
    const double C4893 = C2756 * C697;
    const double C1345 = C834 * C1007;
    const double C1531 = C834 * C1141;
    const double C4891 = C2757 * C1141;
    const double C22141 = C833 * C1141;
    const double C2104 = C113 * C2058;
    const double C12861 = C2756 * C2058;
    const double C2637 = C113 * C1143;
    const double C4665 = C2757 * C1143;
    const double C11358 = C833 * C1143;
    const double C13482 = C2756 * C1143;
    const double C11376 = C833 * C2616;
    const double C12397 = C113 * C2616;
    const double C12867 = C2757 * C2616;
    const double C14938 = C2756 * C2616;
    const double C172 = C156 + C157;
    const double C500 = C489 + C490;
    const double C612 = C601 + C602;
    const double C2119 = C2108 + C2109;
    const double C171 = C154 + C155;
    const double C501 = C491 + C492;
    const double C613 = C603 + C604;
    const double C2113 = C2092 + C2093;
    const double C2646 = C2631 + C2632;
    const double C134 = (3 * (C31770 + C31777 * C31783) +
                         C31758 * (2 * C31779 + C31758 * C31791)) /
                        C31514;
    const double C256 = (C31757 * (2 * C31779 + C31758 * C31791) +
                         (2 * C32074 + C31758 * C32076) * ae) /
                        C31514;
    const double C267 =
        (C31770 + C31777 * C31783 + C31757 * (C31757 * C31791 + C32076 * ae) +
         C31757 * C32076 * ae) /
        C31514;
    const double C361 = (C31971 * (2 * C31779 + C31758 * C31791)) / C31514;
    const double C372 = (C31770 + C31777 * C31783 + C31791 * C31975) / C31514;
    const double C705 = (C31971 * (C31757 * C31791 + C32076 * ae)) / C31514;
    const double C2064 =
        (2 * C31971 * C31791 + C31971 * (C31791 + C31807 * C31975)) / C31514;
    const double C31808 = C31758 * C31806;
    const double C31813 = 2 * C31806;
    const double C31945 = C31757 * C31806;
    const double C31801 = C31786 + C31797;
    const double C32158 = C32155 + C31868;
    const double C2105 = C32514 * C2066;
    const double C12862 = C32773 * C2066;
    const double C12300 = C32514 * C2071;
    const double C32227 = C31757 * C32223;
    const double C32233 = 2 * C32223;
    const double C12090 =
        (4 * (2 * C31971 * C31777 + C31971 * C32295) +
         C31971 *
             (3 * C32295 + C31971 * (2 * C31971 * C31787 +
                                     C31971 * (C31787 + C31803 * C31975)))) /
        C31514;
    const double C12112 = C12102 + C12103;
    const double C144 =
        (3 * (C31776 + ae * C31779 + C31758 * C31790) +
         ae * (2 * C31779 + C31758 * C31791) +
         C31758 *
             (2 * C31790 + ae * C31791 +
              C31758 * (C31786 + ae * C31758 * C31787 +
                        C31758 * (ae * C31787 + C31758 * std::pow(C31760, 6) *
                                                    bs[6] * C31768)))) /
        C31519;
    const double C275 = (ae * (C31767 * C31763 * C31841 +
                               C31758 * (C31758 * C31855 + C31854 * ae) +
                               C31758 * C31854 * ae) +
                         C31757 * (C31776 + ae * C31779 + C31758 * C31790)) /
                        C31519;
    const double C279 = (ae * C31770 + C31758 * C31776 + ae * C31757 * C31865 +
                         C31757 * (ae * C31865 + C31757 * C31790)) /
                        C31519;
    const double C380 =
        ((zP - zQ) * (C31776 + ae * C31779 + C31758 * C31790)) / C31519;
    const double C384 =
        (ae * C31770 + C31758 * C31776 + C31790 * std::pow(zP - zQ, 2)) /
        C31519;
    const double C712 = ((zP - zQ) * (ae * C31865 + C31757 * C31790)) / C31519;
    const double C2076 = (2 * C31971 * C31790 +
                          C31971 * (C31790 + C31806 * std::pow(C31971, 2))) /
                         C31519;
    const double C1169 =
        ((zP - zQ) * (C31776 + ae * C31935 + C31757 * C31939)) / C31519;
    const double C1170 =
        (ae * C31861 + C31757 * C31776 + C31939 * std::pow(zP - zQ, 2)) /
        C31519;
    const double C1171 = (C31776 + ae * C31935 + C31757 * C31939 +
                          (C31786 + ae * C31757 * C31848 +
                           C31757 * (ae * C31848 + C31757 * C31802)) *
                              std::pow(zP - zQ, 2)) /
                         C31519;
    const double C2625 =
        (2 * C31971 * C31939 +
         C31971 * (C31939 + (ae * C31848 + C31757 * C31802) * C31975)) /
        C31519;
    const double C2118 = C2106 + C2107;
    const double C31876 = C31849 * ae;
    const double C32079 = C31758 * C31849;
    const double C32084 = 3 * C31849;
    const double C32163 = C31757 * C31849;
    const double C1006 =
        2 * C31757 * C32076 + C31757 * (C32076 + C31849 * C31938);
    const double C1140 = C31971 * (C32076 + C31849 * C31938);
    const double C2057 =
        2 * C31971 * C32076 + C31971 * (C32076 + C31849 * C31975);
    const double C2062 =
        3 * (C32076 + C31849 * C31975) +
        C31971 * (2 * C31971 * C31849 + C31971 * (C31849 + C31899 * C31975));
    const double C32264 = C32261 + C31878;
    const double C32159 = C31846 + C32157;
    const double C32267 = 2 * C32262;
    const double C32265 = C32262 * ae;
    const double C2617 =
        2 * C31971 * C32156 + C31971 * (C32156 + C32262 * C31975);
    const double C12202 =
        3 * (C32156 + C32262 * C31975) +
        C31971 * (2 * C31971 * C32262 +
                  C31971 * (C32262 + C31757 * C31895 * C31975));
    const double C32416 = C31846 + C32415;
    const double C12299 = C113 * C2061;
    const double C31881 = C31758 * C31880;
    const double C31889 = 2 * C31880;
    const double C31946 = C31880 * C31938;
    const double C32024 = ae * C31880;
    const double C32023 = C31757 * C31880;
    const double C32316 = C31880 * C31975;
    const double C32243 = C31757 * C32239;
    const double C32319 = C32239 * C31975;
    const double C7029 =
        (3 * (C32151 + C32223 * C31975) +
         C31971 * (2 * C31971 * C32223 + C31971 * (C32223 + C32239 * C31975))) /
        C31514;
    const double C32228 = C31757 * C32225;
    const double C32238 = 3 * C32225;
    const double C32236 = C32225 * ae;
    const double C7024 =
        2 * C31971 * C32152 + C31971 * (C32152 + C32225 * C31975);
    const double C7026 =
        3 * (C32152 + C32225 * C31975) +
        C31971 * (2 * C31971 * C32225 + C31971 * (C32225 + C32241 * C31975));
    const double C32419 = C32221 + C32418;
    const double C12401 = C113 * C7025;
    const double C14536 = C2757 * C7025;
    const double C32411 = C31971 * C32410;
    const double C31867 = C31758 * C31851;
    const double C31872 = 2 * C31851;
    const double C31944 = ae * C31851;
    const double C31943 = C31757 * C31851;
    const double C1025 = (2 * (ae * C31865 + C31757 * C31790) +
                          ae * (C31865 + C31851 * std::pow(C31757, 2)) +
                          C31757 * (C31790 + ae * C31757 * C31851 +
                                    C31757 * (ae * C31851 + C31757 * C31806))) /
                         C31519;
    const double C1014 =
        (2 * C31757 * C31865 + C31757 * (C31865 + C31851 * C31938)) / C31514;
    const double C1151 = (C31971 * (C31865 + C31851 * C31938)) / C31514;
    const double C2065 =
        (2 * C31971 * C31865 + C31971 * (C31865 + C31851 * C31975)) / C31514;
    const double C2072 =
        (3 * (C31865 + C31851 * C31975) +
         C31971 * (2 * C31971 * C31851 + C31971 * (C31851 + C31880 * C31975))) /
        C31514;
    const double C1027 =
        (3 * (C31776 + ae * C31935 + C31757 * C31939) +
         ae * (2 * C31935 + C31757 * C31941) +
         C31757 * (2 * C31939 + ae * C31941 +
                   C31757 * (C31786 + ae * C31757 * C31848 +
                             C31757 * (ae * C31848 + C31757 * C31802)))) /
        C31519;
    const double C1703 =
        ((zP - zQ) * (2 * C31939 + ae * C31941 +
                      C31757 * (C31786 + ae * C31757 * C31848 +
                                C31757 * (ae * C31848 + C31757 * C31802)))) /
        C31519;
    const double C1019 = (3 * (C31861 + C31855 * C31938) +
                          C31757 * (2 * C31935 + C31757 * C31941)) /
                         C31514;
    const double C1158 = (C31861 + C31855 * C31938 + C31941 * C31975) / C31514;
    const double C1698 = (C31971 * (2 * C31935 + C31757 * C31941)) / C31514;
    const double C7027 =
        (2 * C31971 * C31941 + C31971 * (C31941 + C31991 * C31975)) / C31514;
    const double C31993 = C31757 * C31989;
    const double C31998 = 2 * C31989;
    const double C31992 = C31786 + C31988;
    const double C11370 = C833 * C2620;
    const double C12399 = C113 * C2620;
    const double C12863 = C2757 * C2620;
    const double C14942 = C2756 * C2620;
    const double C12403 = C113 * C7031;
    const double C14532 = C2757 * C7031;
    const double C12089 =
        (4 * (2 * C31971 * C31855 + C31971 * C32292) +
         C31971 *
             (3 * C32292 + C31971 * (2 * C31971 * C31848 +
                                     C31971 * (C31848 + C31877 * C31975)))) /
        C31514;
    const double C12113 = C12104 + C12105;
    const double C31833 = C31758 * C31831;
    const double C2073 =
        (3 * (C31791 + C31807 * C31975) +
         C31971 * (2 * C31971 * C31807 + C31971 * (C31807 + C31831 * C31975))) /
        C31514;
    const double C31832 = C31758 * C31830;
    const double C32025 = C31757 * C31830;
    const double C32056 = C31830 * C31975;
    const double C2079 =
        (3 * (C31790 + C31806 * C31975) +
         C31971 * (2 * C31971 * C31806 + C31971 * (C31806 + C31830 * C31975))) /
        C31519;
    const double C32011 = C31757 * C32007;
    const double C32059 = C32007 * C31975;
    const double C7034 =
        (3 * (C31939 + C31989 * C31975) +
         C31971 * (2 * C31971 * C31989 + C31971 * (C31989 + C32007 * C31975))) /
        C31519;
    const double C32052 = C31971 * C32051;
    const double C31903 = C31758 * C31900;
    const double C32026 = C31900 * C31938;
    const double C32012 = C31757 * C32009;
    const double C7032 =
        (3 * (C31941 + C31991 * C31975) +
         C31971 * (2 * C31971 * C31991 + C31971 * (C31991 + C32009 * C31975))) /
        C31514;
    const double C1346 = C32804 * C1015;
    const double C5874 = C32804 * C1015;
    const double C7719 = C32814 * C1015;
    const double C15887 = C32814 * C1015;
    const double C18284 = C17830 * C1015;
    const double C2291 = C113 * C1145;
    const double C4657 = C2757 * C1145;
    const double C11699 = C833 * C1145;
    const double C13086 = C2756 * C1145;
    const double C160 = C113 * C123;
    const double C2793 = C2756 * C123;
    const double C485 = C113 * C244;
    const double C871 = C833 * C244;
    const double C2781 = C2757 * C244;
    const double C3147 = C2756 * C244;
    const double C855 = C834 * C250;
    const double C1335 = C833 * C250;
    const double C3153 = C2757 * C250;
    const double C597 = C113 * C349;
    const double C3313 = C2756 * C349;
    const double C1824 = C113 * C355;
    const double C4651 = C2756 * C355;
    const double C1521 = C833 * C698;
    const double C2295 = C113 * C698;
    const double C3319 = C2757 * C698;
    const double C4885 = C2756 * C698;
    const double C11360 = C834 * C1144;
    const double C11875 = C833 * C1144;
    const double C13484 = C2757 * C1144;
    const double C11865 = C834 * C1694;
    const double C12108 = C113 * C12087;
    const double C31811 = C31799 + C31809;
    const double C12289 =
        (4 * (2 * C31971 * C31793 + C31971 * C32314) +
         C31971 * (3 * C32314 +
                   C31971 * (2 * C31971 * C31815 +
                             C31971 * (C31815 + C31758 * C31827 * C31975)))) /
        C31514;
    const double C32302 = C32299 + C32301;
    const double C12107 = C32514 * C12093;
    const double C31996 = C31990 + C31994;
    const double C12390 =
        (4 * (2 * C31971 * C31984 + C31971 * C32323) +
         C31971 * (3 * C32323 +
                   C31971 * (2 * C31971 * C32000 +
                             C31971 * (C32000 + C31757 * C31893 * C31975)))) /
        C31514;
    const double C32309 = C32306 + C32308;
    const double C31904 = C31892 + C31902;
    const double C32166 = C31849 + C32164;
    const double C32269 = C31757 * C32266;
    const double C32246 = C32242 + C32244;
    const double C32614 = C32613 / C31519;
    const double C32806 = 2 * C32772;
    const double C32621 = C32620 / C31514;
    const double C32819 = C32785 / C31526;
    const double C32833 = C32774 - C32816;
    const double C20880 = -C32816;
    const double C32840 = C32828 + C32610;
    const double C31558 = C31555 * be;
    const double C31544 = C31512 * C31540;
    const double C31572 = C31540 / C31520;
    const double C31543 = C31539 / C31514;
    const double C32435 = C32431 - C32434;
    const double C32823 = C32790 / C31514;
    const double C32443 = C32439 - C32442;
    const double C32837 = C32822 / C31520;
    const double C31682 = C31678 * be;
    const double C31653 = C31645 / C31514;
    const double C5463 = C5425 * C244;
    const double C5445 = C5425 * C245;
    const double C5439 = C5425 * C259;
    const double C5433 = C5425 * C246;
    const double C5875 = C5425 * C249;
    const double C5863 = C5425 * C250;
    const double C6057 = C5425 * C697;
    const double C6045 = C5425 * C698;
    const double C7069 = C5425 * C2616;
    const double C7063 = C5425 * C2620;
    const double C7057 = C5425 * C1157;
    const double C7051 = C5425 * C1143;
    const double C7045 = C5425 * C702;
    const double C7039 = C5425 * C696;
    const double C7400 = C5425 * C1145;
    const double C7580 = C5425 * C1144;
    const double C7574 = C5425 * C1153;
    const double C7568 = C5425 * C1142;
    const double C9034 = C5425 * C1141;
    const double C5447 = C5426 * C250;
    const double C5435 = C5426 * C249;
    const double C5873 = C5426 * C1007;
    const double C6055 = C5426 * C1141;
    const double C7053 = C5426 * C1144;
    const double C7047 = C5426 * C1153;
    const double C7041 = C5426 * C1142;
    const double C7570 = C5426 * C1694;
    const double C15078 = C15054 * C244;
    const double C15070 = C15054 * C245;
    const double C15066 = C15054 * C259;
    const double C15062 = C15054 * C246;
    const double C15458 = C15054 * C249;
    const double C15450 = C15054 * C250;
    const double C15624 = C15054 * C697;
    const double C15616 = C15054 * C698;
    const double C16710 = C15054 * C1145;
    const double C17054 = C15054 * C2616;
    const double C17050 = C15054 * C2620;
    const double C17038 = C15054 * C1157;
    const double C17034 = C15054 * C1143;
    const double C17030 = C15054 * C702;
    const double C17026 = C15054 * C696;
    const double C17289 = C15054 * C1141;
    const double C17705 = C15054 * C1144;
    const double C17701 = C15054 * C1153;
    const double C17697 = C15054 * C1142;
    const double C28224 = C15054 * C7025;
    const double C28220 = C15054 * C7031;
    const double C31662 = C31590 * C31658;
    const double C31691 = C31658 / C31520;
    const double C2800 = C2773 + C2774;
    const double C2798 = C2769 + C2770;
    const double C2796 = C2765 + C2766;
    const double C4672 = C4643 + C4644;
    const double C4670 = C4639 + C4640;
    const double C2121 = C2111 * C829;
    const double C10530 = C2111 * C32836;
    const double C12097 = C2111 * C32430;
    const double C13793 = C2111 * C32754;
    const double C22846 = C2111 * C15871;
    const double C12096 = C2110 * C6291;
    const double C32573 = C32568 - C32572;
    const double C2803 = C2779 + C2780;
    const double C2801 = C2775 + C2776;
    const double C2799 = C2771 + C2772;
    const double C2797 = C2767 + C2768;
    const double C2795 = C2763 + C2764;
    const double C3176 = C3163 + C3164;
    const double C3174 = C3159 + C3160;
    const double C3172 = C3155 + C3156;
    const double C3342 = C3329 + C3330;
    const double C3340 = C3325 + C3326;
    const double C3338 = C3321 + C3322;
    const double C4684 = C4667 + C4668;
    const double C4682 = C4663 + C4664;
    const double C4671 = C4641 + C4642;
    const double C4669 = C4637 + C4638;
    const double C5307 = C5301 + C5302;
    const double C5305 = C5297 + C5298;
    const double C12882 = C12869 + C12870;
    const double C12880 = C12865 + C12866;
    const double C14546 = C14538 + C14539;
    const double C14544 = C14534 + C14535;
    const double C873 = C832 * C122;
    const double C857 = C832 * C131;
    const double C851 = C832 * C121;
    const double C845 = C832 * C129;
    const double C839 = C832 * C120;
    const double C1349 = C832 * C246;
    const double C1343 = C832 * C259;
    const double C1337 = C832 * C245;
    const double C1535 = C832 * C351;
    const double C1529 = C832 * C364;
    const double C1523 = C832 * C350;
    const double C11378 = C832 * C2059;
    const double C11372 = C832 * C2067;
    const double C11362 = C832 * C369;
    const double C11356 = C832 * C353;
    const double C11350 = C832 * C366;
    const double C11344 = C832 * C352;
    const double C11697 = C832 * C354;
    const double C11879 = C832 * C1157;
    const double C11873 = C832 * C1143;
    const double C11867 = C832 * C702;
    const double C11861 = C832 * C696;
    const double C22143 = C832 * C697;
    const double C32827 = C32803 / C31514;
    const double C32580 = C32576 - C32579;
    const double C32841 = C32830 / C31520;
    const double C15081 = C15047 * C143;
    const double C15077 = C15047 * C132;
    const double C15073 = C15047 * C142;
    const double C15069 = C15047 * C130;
    const double C15065 = C15047 * C141;
    const double C15061 = C15047 * C128;
    const double C15461 = C15047 * C260;
    const double C15457 = C15047 * C276;
    const double C15453 = C15047 * C258;
    const double C15627 = C15047 * C365;
    const double C15623 = C15047 * C381;
    const double C15619 = C15047 * C363;
    const double C16709 = C15047 * C370;
    const double C17057 = C15047 * C2068;
    const double C17053 = C15047 * C2077;
    const double C17049 = C15047 * C2066;
    const double C17037 = C15047 * C383;
    const double C17033 = C15047 * C368;
    const double C17029 = C15047 * C382;
    const double C17025 = C15047 * C367;
    const double C17292 = C15047 * C703;
    const double C17700 = C15047 * C711;
    const double C17696 = C15047 * C701;
    const double C28227 = C15047 * C2069;
    const double C28223 = C15047 * C2078;
    const double C5424 =
        ((-(0 * be) / C31514) / C31520 -
         ((0 - (C31590 * C31591) / C31514) * be) / C31514) /
            C31520 -
        ((C31590 * ((-C31591 / C31514) / C31520 -
                    ((C32514 - (C31590 * C31620) / C31514) * be) / C31514) +
          C15047) *
         be) /
            C31514 +
        (-C31620 / C31514) / C31520 - (0 * be) / C31514;
    const double C874 = C32839 * C132;
    const double C868 = C32839 * C143;
    const double C858 = C32839 * C142;
    const double C852 = C32839 * C130;
    const double C846 = C32839 * C141;
    const double C840 = C32839 * C128;
    const double C1350 = C32839 * C260;
    const double C1344 = C32839 * C276;
    const double C1338 = C32839 * C258;
    const double C1536 = C32839 * C365;
    const double C1530 = C32839 * C381;
    const double C1524 = C32839 * C363;
    const double C11379 = C32839 * C2068;
    const double C11373 = C32839 * C2077;
    const double C11363 = C32839 * C383;
    const double C11357 = C32839 * C368;
    const double C11351 = C32839 * C382;
    const double C11345 = C32839 * C367;
    const double C11698 = C32839 * C370;
    const double C11868 = C32839 * C711;
    const double C11862 = C32839 * C701;
    const double C22144 = C32839 * C703;
    const double C12293 = C614 * C6291;
    const double C13794 = C614 * C31540;
    const double C22847 = C614 * C15878;
    const double C12098 = C2112 * C6291;
    const double C12393 = C2645 * C6291;
    const double C158 = C113 * C133;
    const double C867 = C832 * C133;
    const double C2783 = C2756 * C133;
    const double C487 = C113 * C257;
    const double C859 = C833 * C257;
    const double C1331 = C832 * C257;
    const double C2777 = C2757 * C257;
    const double C3151 = C2756 * C257;
    const double C5451 = C5425 * C257;
    const double C15074 = C15054 * C257;
    const double C849 = C834 * C266;
    const double C1341 = C833 * C266;
    const double C3157 = C2757 * C266;
    const double C5441 = C5426 * C266;
    const double C5869 = C5425 * C266;
    const double C15454 = C15054 * C266;
    const double C599 = C113 * C362;
    const double C1517 = C832 * C362;
    const double C3317 = C2756 * C362;
    const double C1822 = C113 * C371;
    const double C4655 = C2756 * C371;
    const double C11703 = C832 * C371;
    const double C1527 = C833 * C704;
    const double C2297 = C113 * C704;
    const double C3323 = C2757 * C704;
    const double C4889 = C2756 * C704;
    const double C6051 = C5425 * C704;
    const double C15620 = C15054 * C704;
    const double C22137 = C832 * C704;
    const double C5300 = C32577 * C1154;
    const double C7042 = C32804 * C1154;
    const double C7569 = C5419 * C1154;
    const double C11349 = C32804 * C1154;
    const double C17698 = C32577 * C1154;
    const double C20108 = C17830 * C1154;
    const double C2638 = C32514 * C1155;
    const double C4666 = C32577 * C1155;
    const double C7052 = C5419 * C1155;
    const double C7579 = C5418 * C1155;
    const double C11874 = C32839 * C1155;
    const double C13483 = C32773 * C1155;
    const double C17035 = C32577 * C1155;
    const double C17704 = C15047 * C1155;
    const double C7054 = C32804 * C1156;
    const double C7581 = C5419 * C1156;
    const double C11361 = C32804 * C1156;
    const double C13485 = C32577 * C1156;
    const double C17706 = C32577 * C1156;
    const double C20134 = C17830 * C1156;
    const double C7571 = C32804 * C1697;
    const double C9741 = C32814 * C1697;
    const double C11866 = C32804 * C1697;
    const double C20770 = C17830 * C1697;
    const double C27467 = C32814 * C1697;
    const double C7070 = C5419 * C2619;
    const double C12398 = C32514 * C2619;
    const double C12868 = C32577 * C2619;
    const double C14939 = C32773 * C2619;
    const double C17055 = C32577 * C2619;
    const double C28627 = C15047 * C2619;
    const double C877 = C843 + C844;
    const double C3175 = C3161 + C3162;
    const double C1832 = C1820 + C1821;
    const double C4680 = C4659 + C4660;
    const double C2308 = C2299 + C2300;
    const double C3341 = C3327 + C3328;
    const double C4902 = C4893 + C4894;
    const double C2088 = C612 * C837;
    const double C14082 = C612 * C31540;
    const double C23129 = C612 * C15878;
    const double C12100 = C2119 * C6291;
    const double C2087 = C613 * C830;
    const double C2460 = C613 * C829;
    const double C10845 = C613 * C32836;
    const double C12294 = C613 * C32430;
    const double C13795 = C613 * C32440;
    const double C14081 = C613 * C32754;
    const double C22848 = C613 * C32440;
    const double C23128 = C613 * C15871;
    const double C2123 = C2113 * C829;
    const double C10536 = C2113 * C32836;
    const double C12099 = C2113 * C32430;
    const double C13797 = C2113 * C32754;
    const double C22850 = C2113 * C15871;
    const double C2650 = C2646 * C829;
    const double C11003 = C2646 * C32836;
    const double C12394 = C2646 * C32430;
    const double C14223 = C2646 * C32754;
    const double C23270 = C2646 * C15871;
    const double C161 = C32514 * C134;
    const double C2794 = C32773 * C134;
    const double C15091 = C15047 * C134;
    const double C486 = C32514 * C256;
    const double C2782 = C32577 * C256;
    const double C3148 = C32773 * C256;
    const double C5464 = C5419 * C256;
    const double C15079 = C32577 * C256;
    const double C15445 = C15047 * C256;
    const double C856 = C32804 * C267;
    const double C3154 = C32577 * C267;
    const double C5448 = C32804 * C267;
    const double C5864 = C5419 * C267;
    const double C15451 = C32577 * C267;
    const double C17858 = C17830 * C267;
    const double C598 = C32514 * C361;
    const double C3314 = C32773 * C361;
    const double C15611 = C15047 * C361;
    const double C1825 = C32514 * C372;
    const double C4652 = C32773 * C372;
    const double C16723 = C15047 * C372;
    const double C2296 = C32514 * C705;
    const double C3320 = C32577 * C705;
    const double C4886 = C32773 * C705;
    const double C6046 = C5419 * C705;
    const double C15617 = C32577 * C705;
    const double C19270 = C15047 * C705;
    const double C2101 = C32514 * C2064;
    const double C31820 = C31813 + C31814;
    const double C31810 = C31801 + C31808;
    const double C1152 =
        (C31971 * (C31779 + C31757 * C32158 + C32156 * ae)) / C31514;
    const double C1159 =
        (C31757 * C31779 + C32074 * ae + C32158 * C31975) / C31514;
    const double C1160 =
        (C31779 + C31757 * C32158 + C32156 * ae +
         (C31793 + C31757 * (C31757 * C31815 + C31878) + C31757 * C31875 * ae) *
             C31975) /
        C31514;
    const double C2621 =
        (2 * C31971 * C32158 +
         C31971 * (C32158 + (C31757 * C31815 + C31878) * C31975)) /
        C31514;
    const double C2117 = C2104 + C2105;
    const double C12878 = C12861 + C12862;
    const double C32229 = C31777 + C32227;
    const double C12109 = C32514 * C12090;
    const double C12116 = C12112 * C6291;
    const double C163 = C32514 * C144;
    const double C2790 = C32773 * C144;
    const double C15087 = C15047 * C144;
    const double C488 = C32514 * C275;
    const double C1332 = C32839 * C275;
    const double C2778 = C32577 * C275;
    const double C3152 = C32773 * C275;
    const double C5452 = C5419 * C275;
    const double C5860 = C5418 * C275;
    const double C15075 = C32577 * C275;
    const double C15449 = C15047 * C275;
    const double C850 = C32804 * C279;
    const double C3158 = C32577 * C279;
    const double C5442 = C32804 * C279;
    const double C5870 = C5419 * C279;
    const double C15455 = C32577 * C279;
    const double C17852 = C17830 * C279;
    const double C600 = C32514 * C380;
    const double C1518 = C32839 * C380;
    const double C3318 = C32773 * C380;
    const double C6042 = C5418 * C380;
    const double C15615 = C15047 * C380;
    const double C1823 = C32514 * C384;
    const double C4656 = C32773 * C384;
    const double C7405 = C5418 * C384;
    const double C11704 = C32839 * C384;
    const double C16713 = C15047 * C384;
    const double C2298 = C32514 * C712;
    const double C3324 = C32577 * C712;
    const double C4890 = C32773 * C712;
    const double C6052 = C5419 * C712;
    const double C9031 = C5418 * C712;
    const double C15621 = C32577 * C712;
    const double C17288 = C15047 * C712;
    const double C22138 = C32839 * C712;
    const double C2103 = C32514 * C2076;
    const double C12858 = C32773 * C2076;
    const double C17045 = C15047 * C2076;
    const double C5304 = C32577 * C1169;
    const double C7048 = C32804 * C1169;
    const double C7575 = C5419 * C1169;
    const double C11355 = C32804 * C1169;
    const double C17702 = C32577 * C1169;
    const double C20114 = C17830 * C1169;
    const double C2640 = C32514 * C1170;
    const double C4662 = C32577 * C1170;
    const double C7058 = C5419 * C1170;
    const double C7585 = C5418 * C1170;
    const double C11880 = C32839 * C1170;
    const double C13487 = C32773 * C1170;
    const double C17039 = C32577 * C1170;
    const double C17708 = C15047 * C1170;
    const double C7060 = C32804 * C1171;
    const double C7587 = C5419 * C1171;
    const double C11367 = C32804 * C1171;
    const double C13489 = C32577 * C1171;
    const double C17710 = C32577 * C1171;
    const double C20128 = C17830 * C1171;
    const double C7064 = C5419 * C2625;
    const double C12400 = C32514 * C2625;
    const double C12864 = C32577 * C2625;
    const double C14943 = C32773 * C2625;
    const double C17051 = C32577 * C2625;
    const double C28631 = C15047 * C2625;
    const double C2128 = C2118 * C829;
    const double C10545 = C2118 * C32836;
    const double C12101 = C2118 * C32430;
    const double C13801 = C2118 * C32754;
    const double C22854 = C2118 * C15871;
    const double C32165 = C32162 + C31876;
    const double C1013 =
        (2 * (C31757 * C31791 + C32076 * ae) +
         C31757 * (C31791 + C31757 * (C31757 * C31807 + C31876) +
                   C31757 * C31849 * ae) +
         (C32076 + C31849 * C31938) * ae) /
        C31514;
    const double C32080 = C32078 + C32079;
    const double C1147 = C31757 * C32076 + C32163 * C31975;
    const double C2618 =
        2 * C31971 * C32163 + C31971 * (C32163 + C31757 * C31899 * C31975);
    const double C1333 = C834 * C1006;
    const double C5861 = C5426 * C1006;
    const double C1519 = C834 * C1140;
    const double C4883 = C2757 * C1140;
    const double C6043 = C5426 * C1140;
    const double C19267 = C15054 * C1140;
    const double C2100 = C113 * C2057;
    const double C32268 = C31757 * C32264;
    const double C12203 =
        (3 * (C32158 + C32264 * C31975) +
         C31971 * (2 * C31971 * C32264 +
                   C31971 * (C32264 +
                             (C31757 * C31758 * C31827 + C31898) * C31975))) /
        C31514;
    const double C1020 =
        (3 * (C31779 + C31757 * C32158 + C32156 * ae) +
         C31757 * (2 * C32158 +
                   C31757 * (C31793 + C31757 * (C31757 * C31815 + C31878) +
                             C31757 * C31875 * ae) +
                   C32159 * ae) +
         (2 * C32156 + C31757 * C32159) * ae) /
        C31514;
    const double C1699 =
        (C31971 * (2 * C32158 +
                   C31757 * (C31793 + C31757 * (C31757 * C31815 + C31878) +
                             C31757 * C31875 * ae) +
                   C32159 * ae)) /
        C31514;
    const double C1010 = 3 * (C32074 + C31846 * C31938) +
                         C31757 * (2 * C32156 + C31757 * C32159);
    const double C1146 = C32074 + C31846 * C31938 + C32159 * C31975;
    const double C1695 = C31971 * (2 * C32156 + C31757 * C32159);
    const double C7393 =
        2 * C31971 * C32159 + C31971 * (C32159 + C32266 * C31975);
    const double C12859 = C2757 * C2617;
    const double C13946 = C113 * C2617;
    const double C17046 = C15054 * C2617;
    const double C12288 =
        4 * (2 * C31971 * C31846 + C31971 * C32416) +
        C31971 * (3 * C32416 + C31971 * (2 * C31971 * C31875 +
                                         C31971 * (C31875 + C31895 * C31975)));
    const double C12303 = C12299 + C12300;
    const double C31882 = C31848 + C31881;
    const double C31948 = C31851 + C31946;
    const double C32029 = 2 * C32023;
    const double C32027 = ae * C32023;
    const double C32317 = C31851 + C32316;
    const double C32245 = C31787 + C32243;
    const double C32320 = C32223 + C32319;
    const double C12402 = C32514 * C7029;
    const double C14537 = C32577 * C7029;
    const double C28225 = C32577 * C7029;
    const double C32230 = C32226 + C32228;
    const double C7067 = C5426 * C7024;
    const double C11374 = C834 * C7024;
    const double C14940 = C2757 * C7024;
    const double C28628 = C15054 * C7024;
    const double C12388 =
        4 * (2 * C31971 * C32221 + C31971 * C32419) +
        C31971 * (3 * C32419 +
                  C31971 * (2 * C31971 * C32235 +
                            C31971 * (C32235 + C31757 * C31891 * C31975)));
    const double C32412 = C32409 + C32411;
    const double C31869 = C31855 + C31867;
    const double C31947 = C31944 + C31945;
    const double C1161 = (C31757 * C31865 + C31943 * C31975) / C31514;
    const double C2622 =
        (2 * C31971 * C31943 + C31971 * (C31943 + C32023 * C31975)) / C31514;
    const double C12204 =
        (3 * (C31943 + C32023 * C31975) +
         C31971 * (2 * C31971 * C32023 +
                   C31971 * (C32023 + C31757 * C31900 * C31975))) /
        C31514;
    const double C1340 = C32804 * C1025;
    const double C5868 = C32804 * C1025;
    const double C7727 = C32814 * C1025;
    const double C15895 = C32814 * C1025;
    const double C18278 = C17830 * C1025;
    const double C1339 = C834 * C1014;
    const double C5867 = C5426 * C1014;
    const double C1525 = C834 * C1151;
    const double C4887 = C2757 * C1151;
    const double C6049 = C5426 * C1151;
    const double C9028 = C5425 * C1151;
    const double C17285 = C15054 * C1151;
    const double C22135 = C833 * C1151;
    const double C2102 = C113 * C2065;
    const double C12857 = C2756 * C2065;
    const double C12301 = C113 * C2072;
    const double C7577 = C32804 * C1703;
    const double C9749 = C32814 * C1703;
    const double C11872 = C32804 * C1703;
    const double C20776 = C17830 * C1703;
    const double C27475 = C32814 * C1703;
    const double C7059 = C5426 * C1158;
    const double C7586 = C5425 * C1158;
    const double C11366 = C834 * C1158;
    const double C11881 = C833 * C1158;
    const double C13488 = C2757 * C1158;
    const double C17709 = C15054 * C1158;
    const double C7576 = C5426 * C1698;
    const double C11871 = C834 * C1698;
    const double C7061 = C5426 * C7027;
    const double C11368 = C834 * C7027;
    const double C14944 = C2757 * C7027;
    const double C28632 = C15054 * C7027;
    const double C32005 = C31998 + C31999;
    const double C31995 = C31992 + C31993;
    const double C12106 = C113 * C12089;
    const double C12117 = C12113 * C32430;
    const double C13806 = C12113 * C32754;
    const double C22859 = C12113 * C15871;
    const double C31835 = C31823 + C31833;
    const double C31834 = C31825 + C31832;
    const double C32028 = C32024 + C32025;
    const double C32057 = C31806 + C32056;
    const double C12302 = C32514 * C2079;
    const double C32013 = C32010 + C32011;
    const double C32060 = C31989 + C32059;
    const double C12404 = C32514 * C7034;
    const double C14533 = C32577 * C7034;
    const double C28221 = C32577 * C7034;
    const double C32053 = C32050 + C32052;
    const double C31905 = C31877 + C31903;
    const double C32030 = C31880 + C32026;
    const double C32014 = C32008 + C32012;
    const double C1360 = C1345 + C1346;
    const double C137 = (4 * (2 * C31779 + C31758 * C31791) +
                         C31758 * (3 * C31791 + C31758 * C31811)) /
                        C31514;
    const double C359 = (C31971 * (3 * C31791 + C31758 * C31811)) / C31514;
    const double C374 =
        (2 * C31779 + C31758 * C31791 + C31811 * C31975) / C31514;
    const double C12091 =
        (5 * (3 * C32295 + C31971 * C32302) +
         C31971 * (4 * C32302 +
                   C31971 * (3 * C32300 +
                             C31971 * (2 * C31971 * C31803 +
                                       C31971 * (C31803 + C31827 * C31975))))) /
        C31514;
    const double C6356 = (4 * (2 * C31935 + C31757 * C31941) +
                          C31757 * (3 * C31941 + C31757 * C31996)) /
                         C31514;
    const double C6427 = (C31971 * (3 * C31941 + C31757 * C31996)) / C31514;
    const double C6431 =
        (2 * C31935 + C31757 * C31941 + C31996 * C31975) / C31514;
    const double C12092 =
        (5 * (3 * C32292 + C31971 * C32309) +
         C31971 * (4 * C32309 +
                   C31971 * (3 * C32307 +
                             C31971 * (2 * C31971 * C31877 +
                                       C31971 * (C31877 + C31893 * C31975))))) /
        C31514;
    const double C31906 = C31904 * ae;
    const double C32085 = C31758 * C31904;
    const double C1011 = 3 * (C32076 + C31849 * C31938) +
                         C31757 * (2 * C32163 + C31757 * C32166);
    const double C1148 = C32076 + C31849 * C31938 + C32166 * C31975;
    const double C1696 = C31971 * (2 * C32163 + C31757 * C32166);
    const double C32271 = C32267 + C32269;
    const double C32248 = C31757 * C32246;
    const double C32615 = C32610 - C32614;
    const double C32829 = C32806 / C31514;
    const double C32622 = C32618 - C32621;
    const double C32843 = C32833 / C31520;
    const double C31560 = C31558 / C31514;
    const double C31548 = C31544 + C32440;
    const double C31575 = C31572 - C31574;
    const double C5429 = C31572 + (0 * ae) / C31514;
    const double C31547 = C32430 - C31543;
    const double C24650 = C2118 * C32435;
    const double C24641 = C2113 * C32435;
    const double C24635 = C2111 * C32435;
    const double C24950 = C613 * C32435;
    const double C25108 = C2646 * C32435;
    const double C32753 = C32435 * C32425;
    const double C32792 = C32758 + C32435;
    const double C10532 = C613 * C32823;
    const double C24637 = C613 * C32443;
    const double C32761 = C32443 / C31520;
    const double C32757 = C32443 * C32425;
    const double C2752 = C32837 - (C32435 * C32426) / C31514;
    const double C31684 = C31682 / C31514;
    const double C31657 = C32514 - C31653;
    const double C5474 = C5445 + C5446;
    const double C5471 = C5439 + C5440;
    const double C5468 = C5433 + C5434;
    const double C5889 = C5875 + C5876;
    const double C6071 = C6057 + C6058;
    const double C7077 = C7045 + C7046;
    const double C7074 = C7039 + C7040;
    const double C5469 = C5435 + C5436;
    const double C5888 = C5873 + C5874;
    const double C15097 = C15070 + C15071;
    const double C15095 = C15066 + C15067;
    const double C15093 = C15062 + C15063;
    const double C15472 = C15458 + C15459;
    const double C15638 = C15624 + C15625;
    const double C17061 = C17030 + C17031;
    const double C17059 = C17026 + C17027;
    const double C31666 = C31662 + C32577;
    const double C31694 = C31691 - C31693;
    const double C17876 = C32573 * C132;
    const double C17870 = C32573 * C143;
    const double C17860 = C32573 * C142;
    const double C17854 = C32573 * C130;
    const double C17848 = C32573 * C141;
    const double C17842 = C32573 * C128;
    const double C18288 = C32573 * C260;
    const double C18282 = C32573 * C276;
    const double C18276 = C32573 * C258;
    const double C18270 = C32573 * C275;
    const double C18470 = C32573 * C365;
    const double C18464 = C32573 * C381;
    const double C18458 = C32573 * C363;
    const double C18452 = C32573 * C380;
    const double C20138 = C32573 * C368;
    const double C20132 = C32573 * C383;
    const double C20126 = C32573 * C370;
    const double C20120 = C32573 * C384;
    const double C20110 = C32573 * C382;
    const double C20104 = C32573 * C367;
    const double C20362 = C32573 * C703;
    const double C20356 = C32573 * C712;
    const double C20772 = C32573 * C711;
    const double C20766 = C32573 * C701;
    const double C31028 = C32573 * C2068;
    const double C31022 = C32573 * C2077;
    const double C31485 = C32573 * C1170;
    const double C31479 = C32573 * C1155;
    const double C32776 = C32573 * C32567;
    const double C32812 = C32778 + C32573;
    const double C2811 = C2799 + C2800;
    const double C872 = C32827 * C256;
    const double C860 = C32827 * C275;
    const double C854 = C32827 * C258;
    const double C848 = C32827 * C276;
    const double C842 = C32827 * C260;
    const double C1348 = C32827 * C265;
    const double C1342 = C32827 * C279;
    const double C1336 = C32827 * C267;
    const double C1534 = C32827 * C703;
    const double C1528 = C32827 * C712;
    const double C1522 = C32827 * C705;
    const double C11377 = C32827 * C2619;
    const double C11371 = C32827 * C2625;
    const double C11365 = C32827 * C1170;
    const double C11359 = C32827 * C1155;
    const double C11353 = C32827 * C711;
    const double C11347 = C32827 * C701;
    const double C11882 = C32827 * C1171;
    const double C11876 = C32827 * C1156;
    const double C11870 = C32827 * C1169;
    const double C11864 = C32827 * C1154;
    const double C17874 = C32580 * C256;
    const double C17862 = C32580 * C275;
    const double C17856 = C32580 * C258;
    const double C17850 = C32580 * C276;
    const double C17844 = C32580 * C260;
    const double C18286 = C32580 * C265;
    const double C18280 = C32580 * C279;
    const double C18274 = C32580 * C267;
    const double C18468 = C32580 * C703;
    const double C18462 = C32580 * C712;
    const double C18456 = C32580 * C705;
    const double C20136 = C32580 * C1155;
    const double C20130 = C32580 * C1170;
    const double C20112 = C32580 * C711;
    const double C20106 = C32580 * C701;
    const double C20774 = C32580 * C1169;
    const double C20768 = C32580 * C1154;
    const double C31026 = C32580 * C2619;
    const double C31020 = C32580 * C2625;
    const double C31487 = C32580 * C1171;
    const double C31481 = C32580 * C1156;
    const double C32780 = C32580 / C31520;
    const double C32777 = C32580 * C32567;
    const double C7699 = C32841 - (C32573 * C32569) / C31514;
    const double C5465 = C5424 * C122;
    const double C5459 = C5424 * C133;
    const double C5449 = C5424 * C131;
    const double C5443 = C5424 * C121;
    const double C5437 = C5424 * C129;
    const double C5431 = C5424 * C120;
    const double C5877 = C5424 * C246;
    const double C5871 = C5424 * C259;
    const double C5865 = C5424 * C245;
    const double C5859 = C5424 * C257;
    const double C6059 = C5424 * C351;
    const double C6053 = C5424 * C364;
    const double C6047 = C5424 * C350;
    const double C6041 = C5424 * C362;
    const double C7071 = C5424 * C2059;
    const double C7065 = C5424 * C2067;
    const double C7055 = C5424 * C369;
    const double C7049 = C5424 * C353;
    const double C7043 = C5424 * C366;
    const double C7037 = C5424 * C352;
    const double C7404 = C5424 * C371;
    const double C7398 = C5424 * C354;
    const double C7584 = C5424 * C1157;
    const double C7578 = C5424 * C1143;
    const double C7572 = C5424 * C702;
    const double C7566 = C5424 * C696;
    const double C9036 = C5424 * C697;
    const double C9030 = C5424 * C704;
    const double C892 = C873 + C874;
    const double C884 = C857 + C858;
    const double C881 = C851 + C852;
    const double C878 = C845 + C846;
    const double C875 = C839 + C840;
    const double C1362 = C1349 + C1350;
    const double C1359 = C1343 + C1344;
    const double C1356 = C1337 + C1338;
    const double C1548 = C1535 + C1536;
    const double C1545 = C1529 + C1530;
    const double C1542 = C1523 + C1524;
    const double C11397 = C11378 + C11379;
    const double C11394 = C11372 + C11373;
    const double C11389 = C11362 + C11363;
    const double C11386 = C11356 + C11357;
    const double C11383 = C11350 + C11351;
    const double C11380 = C11344 + C11345;
    const double C11709 = C11697 + C11698;
    const double C11888 = C11867 + C11868;
    const double C11885 = C11861 + C11862;
    const double C22150 = C22143 + C22144;
    const double C173 = C158 + C159;
    const double C889 = C867 + C868;
    const double C2805 = C2783 + C2784;
    const double C5306 = C5299 + C5300;
    const double C7075 = C7041 + C7042;
    const double C7591 = C7568 + C7569;
    const double C11382 = C11348 + C11349;
    const double C17712 = C17697 + C17698;
    const double C2647 = C2637 + C2638;
    const double C4683 = C4665 + C4666;
    const double C7080 = C7051 + C7052;
    const double C11891 = C11873 + C11874;
    const double C13490 = C13482 + C13483;
    const double C17063 = C17034 + C17035;
    const double C7081 = C7053 + C7054;
    const double C7597 = C7580 + C7581;
    const double C11388 = C11360 + C11361;
    const double C13491 = C13484 + C13485;
    const double C17716 = C17705 + C17706;
    const double C7592 = C7570 + C7571;
    const double C11887 = C11865 + C11866;
    const double C7089 = C7069 + C7070;
    const double C12405 = C12397 + C12398;
    const double C12881 = C12867 + C12868;
    const double C14946 = C14938 + C14939;
    const double C17074 = C17054 + C17055;
    const double C12295 = C1832 * C6291;
    const double C13798 = C1832 * C31540;
    const double C22851 = C1832 * C15878;
    const double C14224 = C2308 * C31540;
    const double C23271 = C2308 * C15878;
    const double C5102 = C3341 + C3342;
    const double C5097 = C3342 + C3341;
    const double C12110 = C12098 + C12099;
    const double C174 = C160 + C161;
    const double C2810 = C2793 + C2794;
    const double C498 = C485 + C486;
    const double C2804 = C2781 + C2782;
    const double C3168 = C3147 + C3148;
    const double C5483 = C5463 + C5464;
    const double C15101 = C15078 + C15079;
    const double C883 = C855 + C856;
    const double C3171 = C3153 + C3154;
    const double C5475 = C5447 + C5448;
    const double C5883 = C5863 + C5864;
    const double C15468 = C15450 + C15451;
    const double C610 = C597 + C598;
    const double C3334 = C3313 + C3314;
    const double C1834 = C1824 + C1825;
    const double C4676 = C4651 + C4652;
    const double C2306 = C2295 + C2296;
    const double C3337 = C3319 + C3320;
    const double C4898 = C4885 + C4886;
    const double C6065 = C6045 + C6046;
    const double C15634 = C15616 + C15617;
    const double C145 =
        (4 * (2 * C31790 + ae * C31791 + C31758 * C31810) +
         ae * (3 * C31791 + C31758 * C31811) +
         C31758 * (3 * C31810 + ae * C31811 +
                   C31758 * (2 * C31806 + ae * C31807 +
                             C31758 * (C31802 + ae * C31758 * C31803 +
                                       C31758 * (ae * C31803 +
                                                 C31758 * std::pow(C31762, 7) *
                                                     bs[7] * C31768))))) /
        C31519;
    const double C274 =
        (ae * (2 * (C31758 * C31855 + C31854 * ae) +
               C31758 * (C31855 + C31758 * C31851 + C31846 * ae) +
               (C31854 + C31842 * C31783) * ae) +
         C31757 * (2 * C31790 + ae * C31791 + C31758 * C31810)) /
        C31519;
    const double C379 =
        ((zP - zQ) * (2 * C31790 + ae * C31791 + C31758 * C31810)) / C31519;
    const double C385 = (C31776 + ae * C31779 + C31758 * C31790 +
                         C31810 * std::pow(zP - zQ, 2)) /
                        C31519;
    const double C1532 = C32804 * C1152;
    const double C4892 = C32577 * C1152;
    const double C6056 = C32804 * C1152;
    const double C9035 = C5419 * C1152;
    const double C17290 = C32577 * C1152;
    const double C18466 = C17830 * C1152;
    const double C20360 = C32580 * C1152;
    const double C22142 = C32827 * C1152;
    const double C2292 = C32514 * C1159;
    const double C4658 = C32577 * C1159;
    const double C7401 = C5419 * C1159;
    const double C11700 = C32827 * C1159;
    const double C13087 = C32773 * C1159;
    const double C16711 = C32577 * C1159;
    const double C17284 = C15047 * C1159;
    const double C20124 = C32580 * C1159;
    const double C7403 = C32804 * C1160;
    const double C11702 = C32804 * C1160;
    const double C13085 = C32577 * C1160;
    const double C17282 = C32577 * C1160;
    const double C20122 = C17830 * C1160;
    const double C12860 = C32577 * C2621;
    const double C13947 = C32514 * C2621;
    const double C17047 = C32577 * C2621;
    const double C12297 = C2117 * C6291;
    const double C13802 = C2117 * C31540;
    const double C22855 = C2117 * C15878;
    const double C32231 = C32229 + C32224;
    const double C12115 = C12108 + C12109;
    const double C499 = C487 + C488;
    const double C1353 = C1331 + C1332;
    const double C2802 = C2777 + C2778;
    const double C3170 = C3151 + C3152;
    const double C5477 = C5451 + C5452;
    const double C15099 = C15074 + C15075;
    const double C880 = C849 + C850;
    const double C3173 = C3157 + C3158;
    const double C5472 = C5441 + C5442;
    const double C5886 = C5869 + C5870;
    const double C15470 = C15454 + C15455;
    const double C611 = C599 + C600;
    const double C1539 = C1517 + C1518;
    const double C3336 = C3317 + C3318;
    const double C1833 = C1822 + C1823;
    const double C4678 = C4655 + C4656;
    const double C11712 = C11703 + C11704;
    const double C2307 = C2297 + C2298;
    const double C3339 = C3323 + C3324;
    const double C4900 = C4889 + C4890;
    const double C6068 = C6051 + C6052;
    const double C15636 = C15620 + C15621;
    const double C22147 = C22137 + C22138;
    const double C5308 = C5303 + C5304;
    const double C7078 = C7047 + C7048;
    const double C7594 = C7574 + C7575;
    const double C11385 = C11354 + C11355;
    const double C17714 = C17701 + C17702;
    const double C2648 = C2639 + C2640;
    const double C4681 = C4661 + C4662;
    const double C7083 = C7057 + C7058;
    const double C11894 = C11879 + C11880;
    const double C13492 = C13486 + C13487;
    const double C17065 = C17038 + C17039;
    const double C7086 = C7063 + C7064;
    const double C12406 = C12399 + C12400;
    const double C12879 = C12863 + C12864;
    const double C14948 = C14942 + C14943;
    const double C17072 = C17050 + C17051;
    const double C12111 = C12100 + C12101;
    const double C1022 =
        (3 * (C31791 + C31757 * C32165 + C32163 * ae) +
         C31757 * (2 * C32165 +
                   C31757 * (C31807 + C31757 * (C31757 * C31831 + C31901) +
                             C31757 * C31899 * ae) +
                   C32166 * ae) +
         (2 * C32163 + C31757 * C32166) * ae) /
        C31514;
    const double C1150 =
        (C31971 * (C31791 + C31757 * C32165 + C32163 * ae)) / C31514;
    const double C1163 =
        (C31757 * C31791 + C32076 * ae + C32165 * C31975) / C31514;
    const double C1164 =
        (C31791 + C31757 * C32165 + C32163 * ae +
         (C31807 + C31757 * (C31757 * C31831 + C31901) + C31757 * C31899 * ae) *
             C31975) /
        C31514;
    const double C1701 =
        (C31971 * (2 * C32165 +
                   C31757 * (C31807 + C31757 * (C31757 * C31831 + C31901) +
                             C31757 * C31899 * ae) +
                   C32166 * ae)) /
        C31514;
    const double C2623 =
        (2 * C31971 * C32165 +
         C31971 * (C32165 + (C31757 * C31831 + C31901) * C31975)) /
        C31514;
    const double C1334 = C32804 * C1013;
    const double C5862 = C32804 * C1013;
    const double C7737 = C32814 * C1013;
    const double C15905 = C32814 * C1013;
    const double C18272 = C17830 * C1013;
    const double C254 = (C31757 * (3 * C31791 + C31758 * C31811) +
                         (3 * C32076 + C31758 * C32080) * ae) /
                        C31514;
    const double C269 =
        (2 * C31779 + C31758 * C31791 +
         C31757 * (C31757 * C31811 + C32080 * ae) + C31757 * C32080 * ae) /
        C31514;
    const double C707 = (C31971 * (C31757 * C31811 + C32080 * ae)) / C31514;
    const double C124 = 4 * (2 * C32074 + C31758 * C32076) +
                        C31758 * (3 * C32076 + C31758 * C32080);
    const double C243 = C31757 * (3 * C32076 + C31758 * C32080);
    const double C251 = 2 * C32074 + C31758 * C32076 + C32080 * C31938;
    const double C348 = C31971 * (3 * C32076 + C31758 * C32080);
    const double C356 = 2 * C32074 + C31758 * C32076 + C32080 * C31975;
    const double C699 = C31971 * C31757 * C32080;
    const double C1322 =
        2 * C31757 * C32080 + C31757 * (C32080 + C31904 * C31938);
    const double C1508 = C31971 * (C32080 + C31904 * C31938);
    const double C2280 = C31757 * C32080 + C31757 * C31904 * C31975;
    const double C2454 =
        2 * C31971 * C32080 + C31971 * (C32080 + C31904 * C31975);
    const double C2287 = C113 * C1147;
    const double C4649 = C2757 * C1147;
    const double C16720 = C15054 * C1147;
    const double C2115 = C2100 + C2101;
    const double C32270 = C31793 + C32268;
    const double C8095 = C32814 * C1020;
    const double C16263 = C32814 * C1020;
    const double C8249 = C32814 * C1699;
    const double C9033 = C32804 * C1699;
    const double C16417 = C32814 * C1699;
    const double C20358 = C17830 * C1699;
    const double C22140 = C32804 * C1699;
    const double C7402 = C5426 * C1146;
    const double C11701 = C834 * C1146;
    const double C13084 = C2757 * C1146;
    const double C17281 = C15054 * C1146;
    const double C9032 = C5426 * C1695;
    const double C22139 = C834 * C1695;
    const double C12305 = C12303 * C6291;
    const double C13805 = C12303 * C31540;
    const double C22858 = C12303 * C15878;
    const double C31883 = C31882 + C31878;
    const double C1021 = (3 * (C31865 + C31851 * C31938) +
                          C31757 * (2 * C31943 + C31757 * C31948)) /
                         C31514;
    const double C1162 = (C31865 + C31851 * C31938 + C31948 * C31975) / C31514;
    const double C1700 = (C31971 * (2 * C31943 + C31757 * C31948)) / C31514;
    const double C32031 = C31806 + C32027;
    const double C12290 =
        (4 * (2 * C31971 * C31851 + C31971 * C32317) +
         C31971 *
             (3 * C32317 + C31971 * (2 * C31971 * C31880 +
                                     C31971 * (C31880 + C31900 * C31975)))) /
        C31514;
    const double C32247 = C32245 + C32240;
    const double C12389 =
        (4 * (2 * C31971 * C32223 + C31971 * C32320) +
         C31971 * (3 * C32320 +
                   C31971 * (2 * C31971 * C32239 +
                             C31971 * (C32239 +
                                       (C31757 * C31827 + C31894) * C31975)))) /
        C31514;
    const double C12407 = C12401 + C12402;
    const double C14545 = C14536 + C14537;
    const double C28233 = C28224 + C28225;
    const double C6354 = 4 * (2 * C32149 + C31757 * C32152) +
                         C31757 * (3 * C32152 + C31757 * C32230);
    const double C6424 = C31971 * (3 * C32152 + C31757 * C32230);
    const double C6425 = 2 * C32149 + C31757 * C32152 + C32230 * C31975;
    const double C7561 =
        2 * C31971 * C32230 + C31971 * (C32230 + C32246 * C31975);
    const double C12088 =
        5 * (3 * C32405 + C31971 * C32412) +
        C31971 * (4 * C32412 +
                  C31971 * (3 * C32410 +
                            C31971 * (2 * C31971 * C31843 +
                                      C31971 * (C31843 + C31891 * C31975))));
    const double C31870 = C31869 + C31868;
    const double C1028 =
        (3 * (C31790 + ae * C31943 + C31757 * C31947) +
         ae * (2 * C31943 + C31757 * C31948) +
         C31757 * (2 * C31947 + ae * C31948 +
                   C31757 * (C31806 + ae * C31757 * C31880 +
                             C31757 * (ae * C31880 + C31757 * C31830)))) /
        C31519;
    const double C1168 =
        ((zP - zQ) * (C31790 + ae * C31943 + C31757 * C31947)) / C31519;
    const double C1172 =
        (ae * C31865 + C31757 * C31790 + C31947 * std::pow(zP - zQ, 2)) /
        C31519;
    const double C1173 = (C31790 + ae * C31943 + C31757 * C31947 +
                          (C31806 + ae * C31757 * C31880 +
                           C31757 * (ae * C31880 + C31757 * C31830)) *
                              std::pow(zP - zQ, 2)) /
                         C31519;
    const double C1704 =
        ((zP - zQ) * (2 * C31947 + ae * C31948 +
                      C31757 * (C31806 + ae * C31757 * C31880 +
                                C31757 * (ae * C31880 + C31757 * C31830)))) /
        C31519;
    const double C2626 =
        (2 * C31971 * C31947 +
         C31971 * (C31947 + (ae * C31880 + C31757 * C31830) * C31975)) /
        C31519;
    const double C2289 = C113 * C1161;
    const double C4653 = C2757 * C1161;
    const double C7406 = C5425 * C1161;
    const double C11705 = C833 * C1161;
    const double C13082 = C2756 * C1161;
    const double C16714 = C15054 * C1161;
    const double C12855 = C2757 * C2622;
    const double C13944 = C113 * C2622;
    const double C17042 = C15054 * C2622;
    const double C1357 = C1339 + C1340;
    const double C5885 = C5867 + C5868;
    const double C2116 = C2102 + C2103;
    const double C12876 = C12857 + C12858;
    const double C7084 = C7059 + C7060;
    const double C7600 = C7586 + C7587;
    const double C11391 = C11366 + C11367;
    const double C13493 = C13488 + C13489;
    const double C17718 = C17709 + C17710;
    const double C7595 = C7576 + C7577;
    const double C11890 = C11871 + C11872;
    const double C6360 =
        (4 * (2 * C31939 + ae * C31941 + C31757 * C31995) +
         ae * (3 * C31941 + C31757 * C31996) +
         C31757 *
             (3 * C31995 + ae * C31996 +
              C31757 * (2 * C31989 + ae * C31991 +
                        C31757 * (C31802 + ae * C31757 * C31877 +
                                  C31757 * (ae * C31877 + C31757 * C31826))))) /
        C31519;
    const double C12114 = C12106 + C12107;
    const double C12120 = C12116 + C12117;
    const double C31837 = C31758 * C31835;
    const double C2455 =
        (2 * C31971 * C31811 + C31971 * (C31811 + C31835 * C31975)) / C31514;
    const double C31836 = C31758 * C31834;
    const double C31952 = C31757 * C31834;
    const double C2075 = (2 * C31971 * C31810 +
                          C31971 * (C31810 + C31834 * std::pow(C31971, 2))) /
                         C31519;
    const double C2080 =
        (3 * (C31810 + C31834 * C31975) +
         C31971 * (2 * C31971 * C31834 +
                   C31971 * (C31834 + (C31826 + ae * C31758 * C31827 +
                                       C31758 * (ae * C31827 +
                                                 C31758 * std::pow(C31760, 8) *
                                                     bs[8] * C31768)) *
                                          C31975))) /
        C31519;
    const double C32032 = C31757 * C32028;
    const double C12205 =
        (3 * (C31947 + C32028 * C31975) +
         C31971 * (2 * C31971 * C32028 +
                   C31971 * (C32028 + (ae * C31900 +
                                       C31757 * (ae * C31827 +
                                                 C31758 * std::pow(C31760, 8) *
                                                     bs[8] * C31768)) *
                                          C31975))) /
        C31519;
    const double C12291 =
        (4 * (2 * C31971 * C31806 + C31971 * C32057) +
         C31971 * (3 * C32057 +
                   C31971 * (2 * C31971 * C31830 +
                             C31971 * (C31830 + (ae * C31827 +
                                                 C31758 * std::pow(C31760, 8) *
                                                     bs[8] * C31768) *
                                                    C31975)))) /
        C31519;
    const double C12304 = C12301 + C12302;
    const double C32015 = C31757 * C32013;
    const double C7033 =
        (2 * C31971 * C31995 + C31971 * (C31995 + C32013 * C31975)) / C31519;
    const double C7035 =
        (3 * (C31995 + C32013 * C31975) +
         C31971 * (2 * C31971 * C32013 +
                   C31971 * (C32013 + (C31826 + ae * C31757 * C31893 +
                                       C31757 * (ae * C31893 +
                                                 C31757 * std::pow(C31760, 8) *
                                                     bs[8] * C31768)) *
                                          C31975))) /
        C31519;
    const double C12391 =
        (4 * (2 * C31971 * C31989 + C31971 * C32060) +
         C31971 * (3 * C32060 +
                   C31971 * (2 * C31971 * C32007 +
                             C31971 * (C32007 + (ae * C31893 +
                                                 C31757 * std::pow(C31760, 8) *
                                                     bs[8] * C31768) *
                                                    C31975)))) /
        C31519;
    const double C12408 = C12403 + C12404;
    const double C14543 = C14532 + C14533;
    const double C28231 = C28220 + C28221;
    const double C12094 =
        (5 * (3 * C32046 + C31971 * C32053) +
         C31971 * (4 * C32053 +
                   C31971 * (3 * C32051 +
                             C31971 * (2 * C31971 * C31826 +
                                       C31971 * (C31826 + std::pow(C31760, 8) *
                                                              bs[8] * C31768 *
                                                              C31975))))) /
        C31519;
    const double C31907 = C31905 + C31898;
    const double C32033 = C31757 * C32030;
    const double C7395 =
        (2 * C31971 * C31948 + C31971 * (C31948 + C32030 * C31975)) / C31514;
    const double C32016 = C31757 * C32014;
    const double C7563 =
        (2 * C31971 * C31996 + C31971 * (C31996 + C32014 * C31975)) / C31514;
    const double C167 = C32514 * C137;
    const double C594 = C32514 * C359;
    const double C1831 = C32514 * C374;
    const double C7588 = C5426 * C6431;
    const double C11883 = C834 * C6431;
    const double C1323 =
        (2 * (C31757 * C31811 + C32080 * ae) +
         C31757 * (C31811 + C31757 * (C31757 * C31835 + C31906) +
                   C31757 * C31904 * ae) +
         (C32080 + C31904 * C31938) * ae) /
        C31514;
    const double C1509 =
        (C31971 * (C31811 + C31757 * (C31757 * C31835 + C31906) +
                   C31757 * C31904 * ae)) /
        C31514;
    const double C2281 =
        (C31757 * C31811 + C32080 * ae + (C31757 * C31835 + C31906) * C31975) /
        C31514;
    const double C32086 = C32084 + C32085;
    const double C6518 = 4 * (2 * C32156 + C31757 * C32159) +
                         C31757 * (3 * C32159 + C31757 * C32271);
    const double C6604 = C31971 * (3 * C32159 + C31757 * C32271);
    const double C7243 = 2 * C32156 + C31757 * C32159 + C32271 * C31975;
    const double C32250 = C32238 + C32248;
    const double C32782 = C32615 * C32609;
    const double C32818 = C32784 + C32615;
    const double C32786 = C32622 / C31520;
    const double C32783 = C32622 * C32609;
    const double C13591 = C32843 - (C32615 * C32611) / C31514;
    const double C31563 = C31554 - C31560;
    const double C31553 = C31548 * be;
    const double C24638 = C612 * C31575;
    const double C118 =
        (C31575 / C31520 + (0 * ae) / C31514) / C31520 - (0 * be) / C31514;
    const double C2761 = C31575 / C31520 - (0 * be) / C31514;
    const double C15058 = C31575 / C31520 + (0 * ae) / C31514;
    const double C10533 = C612 * C5429;
    const double C31552 = C31547 * ae;
    const double C835 =
        ((-C31515 / C31514) / C31520 - (C31533 * be) / C31514) / C31520 -
        ((C31512 * ((-C31522) / C31520 - (C31547 * be) / C31514) + C15871) *
         be) /
            C31514 +
        (-C31534 / C31514) / C31520 - (0 * be) / C31514;
    const double C836 =
        ((-C31522) / C31520 - (C31547 * be) / C31514) / C31520 -
        ((C31512 * ((-C31534 / C31514) / C31520 - (0 * be) / C31514) + C32440) *
         be) /
            C31514;
    const double C15877 = (-C31522) / C31520 - (C31547 * be) / C31514;
    const double C32788 = C32753 / C31514;
    const double C32824 = C32792 / C31520;
    const double C32825 = C32794 + C32761;
    const double C2754 = C32761 - C32441 / C31526;
    const double C32791 = C32757 / C31514;
    const double C3783 = C2113 * C2752;
    const double C3770 = C2111 * C2752;
    const double C4052 = C613 * C2752;
    const double C4190 = C2646 * C2752;
    const double C31686 = C31681 - C31684;
    const double C31661 = C31657 * ae;
    const double C15053 = (-C31643) / C31520 - (C31657 * be) / C31514;
    const double C31670 = C31666 * be;
    const double C17857 = C31694 * C250;
    const double C17851 = C31694 * C266;
    const double C17845 = C31694 * C249;
    const double C18283 = C31694 * C1007;
    const double C18277 = C31694 * C1014;
    const double C18271 = C31694 * C1006;
    const double C18465 = C31694 * C1141;
    const double C18459 = C31694 * C1151;
    const double C18453 = C31694 * C1140;
    const double C20133 = C31694 * C1144;
    const double C20127 = C31694 * C1158;
    const double C20121 = C31694 * C1146;
    const double C20113 = C31694 * C1153;
    const double C20107 = C31694 * C1142;
    const double C20357 = C31694 * C1695;
    const double C20775 = C31694 * C1698;
    const double C20769 = C31694 * C1694;
    const double C31023 = C31694 * C7024;
    const double C31017 = C31694 * C7027;
    const double C31488 = C31694 * C6431;
    const double C6290 =
        (C31694 / C31520 + (0 * ae) / C31514) / C31520 - (0 * be) / C31514;
    const double C7708 = C31694 / C31520 - (0 * be) / C31514;
    const double C15876 = C31694 / C31520 + (0 * ae) / C31514;
    const double C32809 = C32776 / C31514;
    const double C32831 = C32812 / C31520;
    const double C891 = C871 + C872;
    const double C885 = C859 + C860;
    const double C882 = C853 + C854;
    const double C879 = C847 + C848;
    const double C876 = C841 + C842;
    const double C1361 = C1347 + C1348;
    const double C1358 = C1341 + C1342;
    const double C1355 = C1335 + C1336;
    const double C1547 = C1533 + C1534;
    const double C1544 = C1527 + C1528;
    const double C1541 = C1521 + C1522;
    const double C11396 = C11376 + C11377;
    const double C11393 = C11370 + C11371;
    const double C11390 = C11364 + C11365;
    const double C11387 = C11358 + C11359;
    const double C11384 = C11352 + C11353;
    const double C11381 = C11346 + C11347;
    const double C11895 = C11881 + C11882;
    const double C11892 = C11875 + C11876;
    const double C11889 = C11869 + C11870;
    const double C11886 = C11863 + C11864;
    const double C32832 = C32813 + C32780;
    const double C7701 = C32780 - C32578 / C31526;
    const double C32811 = C32777 / C31514;
    const double C7743 = C7699 * C130;
    const double C7735 = C7699 * C142;
    const double C7721 = C7699 * C141;
    const double C7713 = C7699 * C128;
    const double C8101 = C7699 * C260;
    const double C8093 = C7699 * C276;
    const double C8255 = C7699 * C365;
    const double C8247 = C7699 * C381;
    const double C9765 = C7699 * C368;
    const double C9757 = C7699 * C383;
    const double C9743 = C7699 * C382;
    const double C9735 = C7699 * C367;
    const double C10181 = C7699 * C711;
    const double C10173 = C7699 * C701;
    const double C5484 = C5465 + C5466;
    const double C5481 = C5459 + C5460;
    const double C5476 = C5449 + C5450;
    const double C5473 = C5443 + C5444;
    const double C5470 = C5437 + C5438;
    const double C5467 = C5431 + C5432;
    const double C5890 = C5877 + C5878;
    const double C5887 = C5871 + C5872;
    const double C5884 = C5865 + C5866;
    const double C5881 = C5859 + C5860;
    const double C6072 = C6059 + C6060;
    const double C6069 = C6053 + C6054;
    const double C6066 = C6047 + C6048;
    const double C6063 = C6041 + C6042;
    const double C7090 = C7071 + C7072;
    const double C7087 = C7065 + C7066;
    const double C7082 = C7055 + C7056;
    const double C7079 = C7049 + C7050;
    const double C7076 = C7043 + C7044;
    const double C7073 = C7037 + C7038;
    const double C7413 = C7404 + C7405;
    const double C7410 = C7398 + C7399;
    const double C7599 = C7584 + C7585;
    const double C7596 = C7578 + C7579;
    const double C7593 = C7572 + C7573;
    const double C7590 = C7566 + C7567;
    const double C9043 = C9036 + C9037;
    const double C9040 = C9030 + C9031;
    const double C12395 = C2647 * C6291;
    const double C12851 = C4684 + C4683;
    const double C12409 = C12405 * C6291;
    const double C14530 = C12882 + C12881;
    const double C2813 = C2803 + C2804;
    const double C2463 = C610 * C837;
    const double C10848 = C610 * C5429;
    const double C24953 = C610 * C31575;
    const double C2096 = C1834 * C837;
    const double C10539 = C1834 * C5429;
    const double C14086 = C1834 * C31540;
    const double C23133 = C1834 * C15878;
    const double C24644 = C1834 * C31575;
    const double C2635 = C2306 * C837;
    const double C11006 = C2306 * C5429;
    const double C25111 = C2306 * C31575;
    const double C4343 = C3338 + C3337;
    const double C5100 = C3337 + C3338;
    const double C165 = C32514 * C145;
    const double C484 = C32514 * C274;
    const double C866 = C32827 * C274;
    const double C2786 = C32577 * C274;
    const double C3144 = C32773 * C274;
    const double C5458 = C5419 * C274;
    const double C15083 = C32577 * C274;
    const double C15441 = C15047 * C274;
    const double C17868 = C32580 * C274;
    const double C596 = C32514 * C379;
    const double C3310 = C32773 * C379;
    const double C15607 = C15047 * C379;
    const double C1827 = C32514 * C385;
    const double C4648 = C32773 * C385;
    const double C16719 = C15047 * C385;
    const double C1546 = C1531 + C1532;
    const double C4901 = C4891 + C4892;
    const double C6070 = C6055 + C6056;
    const double C9042 = C9034 + C9035;
    const double C17299 = C17289 + C17290;
    const double C22149 = C22141 + C22142;
    const double C2304 = C2291 + C2292;
    const double C4679 = C4657 + C4658;
    const double C7411 = C7400 + C7401;
    const double C11710 = C11699 + C11700;
    const double C13091 = C13086 + C13087;
    const double C16725 = C16710 + C16711;
    const double C12877 = C12859 + C12860;
    const double C13949 = C13946 + C13947;
    const double C17070 = C17046 + C17047;
    const double C6357 =
        (4 * (2 * C32151 + C31757 * C32231 + C32152 * ae) +
         C31757 *
             (3 * C32231 +
              C31757 * (2 * C32223 +
                        C31757 * (C31787 + C31757 * (C31757 * C31803 + C31874) +
                                  C31757 * C31843 * ae) +
                        C32225 * ae) +
              C32230 * ae) +
         (3 * C32152 + C31757 * C32230) * ae) /
        C31514;
    const double C12119 = C12115 * C6291;
    const double C2812 = C2801 + C2802;
    const double C2089 = C611 * C32793;
    const double C2462 = C611 * C830;
    const double C10534 = C611 * C32793;
    const double C10847 = C611 * C32823;
    const double C14083 = C611 * C32440;
    const double C23130 = C611 * C32440;
    const double C24639 = C611 * C17833;
    const double C24952 = C611 * C32443;
    const double C2095 = C1833 * C830;
    const double C2466 = C1833 * C829;
    const double C10538 = C1833 * C32823;
    const double C10851 = C1833 * C32836;
    const double C12296 = C1833 * C32430;
    const double C13799 = C1833 * C32440;
    const double C14085 = C1833 * C32754;
    const double C22852 = C1833 * C32440;
    const double C23132 = C1833 * C15871;
    const double C24643 = C1833 * C32443;
    const double C24956 = C1833 * C32435;
    const double C2634 = C2307 * C830;
    const double C11005 = C2307 * C32823;
    const double C14225 = C2307 * C32440;
    const double C23272 = C2307 * C32440;
    const double C25110 = C2307 * C32443;
    const double C5101 = C3339 + C3340;
    const double C5098 = C3340 + C3339;
    const double C2652 = C2648 * C829;
    const double C11009 = C2648 * C32836;
    const double C12396 = C2648 * C32430;
    const double C14227 = C2648 * C32754;
    const double C23274 = C2648 * C15871;
    const double C25114 = C2648 * C32435;
    const double C12852 = C4682 + C4681;
    const double C12410 = C12406 * C32430;
    const double C14231 = C12406 * C32754;
    const double C23278 = C12406 * C15871;
    const double C14531 = C12880 + C12879;
    const double C1520 = C32804 * C1150;
    const double C4884 = C32577 * C1150;
    const double C6044 = C32804 * C1150;
    const double C18454 = C17830 * C1150;
    const double C19268 = C32577 * C1150;
    const double C2288 = C32514 * C1163;
    const double C4650 = C32577 * C1163;
    const double C16721 = C32577 * C1163;
    const double C1354 = C1333 + C1334;
    const double C5882 = C5861 + C5862;
    const double C482 = C32514 * C254;
    const double C2792 = C32577 * C254;
    const double C15089 = C32577 * C254;
    const double C870 = C32804 * C269;
    const double C3146 = C32577 * C269;
    const double C5462 = C32804 * C269;
    const double C15443 = C32577 * C269;
    const double C17872 = C17830 * C269;
    const double C3312 = C32577 * C707;
    const double C3918 = C32514 * C707;
    const double C15609 = C32577 * C707;
    const double C166 = C113 * C124;
    const double C481 = C113 * C243;
    const double C2791 = C2757 * C243;
    const double C15088 = C15054 * C243;
    const double C869 = C834 * C251;
    const double C3145 = C2757 * C251;
    const double C5461 = C5426 * C251;
    const double C15442 = C15054 * C251;
    const double C17871 = C31694 * C251;
    const double C593 = C113 * C348;
    const double C1830 = C113 * C356;
    const double C3311 = C2757 * C699;
    const double C3917 = C113 * C699;
    const double C15608 = C15054 * C699;
    const double C2125 = C2115 * C837;
    const double C10542 = C2115 * C5429;
    const double C14090 = C2115 * C31540;
    const double C23137 = C2115 * C15878;
    const double C24647 = C2115 * C31575;
    const double C32272 = C32270 + C32265;
    const double C7412 = C7402 + C7403;
    const double C11711 = C11701 + C11702;
    const double C13090 = C13084 + C13085;
    const double C17295 = C17281 + C17282;
    const double C9041 = C9032 + C9033;
    const double C22148 = C22139 + C22140;
    const double C31884 = C31758 * C31883;
    const double C31888 = 3 * C31883;
    const double C31951 = ae * C31883;
    const double C31950 = C31757 * C31883;
    const double C7408 = C5426 * C1162;
    const double C11707 = C834 * C1162;
    const double C13080 = C2757 * C1162;
    const double C17277 = C15054 * C1162;
    const double C20115 = C31694 * C1162;
    const double C9026 = C5426 * C1700;
    const double C20351 = C31694 * C1700;
    const double C22133 = C834 * C1700;
    const double C32249 = C31757 * C32247;
    const double C7028 =
        (2 * C31971 * C32231 + C31971 * (C32231 + C32247 * C31975)) / C31514;
    const double C7030 =
        (3 * (C32231 + C32247 * C31975) +
         C31971 *
             (2 * C31971 * C32247 +
              C31971 * (C32247 + (C31803 + C31757 * (C31757 * C31827 + C31894) +
                                  C31757 * C31891 * ae) *
                                     C31975))) /
        C31514;
    const double C12411 = C12407 * C6291;
    const double C7582 = C5426 * C6425;
    const double C11877 = C834 * C6425;
    const double C31482 = C31694 * C6425;
    const double C280 =
        (C31776 + ae * C31779 + C31758 * C31790 + ae * C31757 * C31870 +
         C31757 * (ae * C31870 + C31757 * C31810)) /
        C31519;
    const double C713 = ((zP - zQ) * (ae * C31870 + C31757 * C31810)) / C31519;
    const double C1024 = (2 * (ae * C31870 + C31757 * C31810) +
                          ae * (C31870 + C31883 * std::pow(C31757, 2)) +
                          C31757 * (C31810 + ae * C31757 * C31883 +
                                    C31757 * (ae * C31883 + C31757 * C31834))) /
                         C31519;
    const double C135 = (3 * (C31861 + C31758 * C31865 + C32074 * ae) +
                         C31758 * (2 * C31865 + C31758 * C31870 + C32076 * ae) +
                         (2 * C32074 + C31758 * C32076) * ae) /
                        C31514;
    const double C255 =
        (C31757 * (2 * C31865 + C31758 * C31870 + C32076 * ae)) / C31514;
    const double C268 =
        (C31861 + C31758 * C31865 + C32074 * ae + C31870 * C31938) / C31514;
    const double C360 =
        (C31971 * (2 * C31865 + C31758 * C31870 + C32076 * ae)) / C31514;
    const double C373 =
        (C31861 + C31758 * C31865 + C32074 * ae + C31870 * C31975) / C31514;
    const double C706 = (C31971 * C31757 * C31870) / C31514;
    const double C1012 =
        (2 * C31757 * C31870 + C31757 * (C31870 + C31883 * C31938)) / C31514;
    const double C1149 = (C31971 * (C31870 + C31883 * C31938)) / C31514;
    const double C2063 =
        (2 * C31971 * C31870 + C31971 * (C31870 + C31883 * C31975)) / C31514;
    const double C8087 = C32814 * C1028;
    const double C16255 = C32814 * C1028;
    const double C1526 = C32804 * C1168;
    const double C4888 = C32577 * C1168;
    const double C6050 = C32804 * C1168;
    const double C9029 = C5419 * C1168;
    const double C17286 = C32577 * C1168;
    const double C18460 = C17830 * C1168;
    const double C20354 = C32580 * C1168;
    const double C22136 = C32827 * C1168;
    const double C2290 = C32514 * C1172;
    const double C4654 = C32577 * C1172;
    const double C7407 = C5419 * C1172;
    const double C11706 = C32827 * C1172;
    const double C13083 = C32773 * C1172;
    const double C16715 = C32577 * C1172;
    const double C17280 = C15047 * C1172;
    const double C20118 = C32580 * C1172;
    const double C7409 = C32804 * C1173;
    const double C11708 = C32804 * C1173;
    const double C13081 = C32577 * C1173;
    const double C17278 = C32577 * C1173;
    const double C20116 = C17830 * C1173;
    const double C8241 = C32814 * C1704;
    const double C9027 = C32804 * C1704;
    const double C16409 = C32814 * C1704;
    const double C20352 = C17830 * C1704;
    const double C22134 = C32804 * C1704;
    const double C12856 = C32577 * C2626;
    const double C13945 = C32514 * C2626;
    const double C17043 = C32577 * C2626;
    const double C2126 = C2116 * C830;
    const double C10543 = C2116 * C32823;
    const double C12298 = C2116 * C32430;
    const double C13803 = C2116 * C32440;
    const double C14089 = C2116 * C32754;
    const double C22856 = C2116 * C32440;
    const double C23136 = C2116 * C15871;
    const double C24648 = C2116 * C32443;
    const double C12118 = C12114 * C32430;
    const double C31839 = C31819 + C31837;
    const double C31838 = C31820 + C31836;
    const double C2099 = C32514 * C2075;
    const double C32034 = C32031 + C32032;
    const double C12306 = C12304 * C32430;
    const double C13804 = C12304 * C32440;
    const double C22857 = C12304 * C32440;
    const double C32017 = C32005 + C32015;
    const double C7062 = C32804 * C7033;
    const double C11369 = C32804 * C7033;
    const double C14945 = C32577 * C7033;
    const double C28633 = C32577 * C7033;
    const double C31018 = C17830 * C7033;
    const double C12412 = C12408 * C32430;
    const double C31908 = C31758 * C31907;
    const double C31953 = C31907 * C31938;
    const double C2074 =
        (3 * (C31870 + C31883 * C31975) +
         C31971 * (2 * C31971 * C31883 + C31971 * (C31883 + C31907 * C31975))) /
        C31514;
    const double C32035 = C32029 + C32033;
    const double C32018 = C32003 + C32016;
    const double C125 = 5 * (3 * C32076 + C31758 * C32080) +
                        C31758 * (4 * C32080 + C31758 * C32086);
    const double C252 = 3 * C32076 + C31758 * C32080 + C32086 * C31938;
    const double C357 = 3 * C32076 + C31758 * C32080 + C32086 * C31975;
    const double C474 = C31757 * (4 * C32080 + C31758 * C32086);
    const double C586 = C31971 * (4 * C32080 + C31758 * C32086);
    const double C700 = C31971 * C31757 * C32086;
    const double C6355 = 5 * (3 * C32152 + C31757 * C32230) +
                         C31757 * (4 * C32230 + C31757 * C32250);
    const double C6426 = 3 * C32152 + C31757 * C32230 + C32250 * C31975;
    const double C6690 = C31971 * (4 * C32230 + C31757 * C32250);
    const double C32815 = C32782 / C31514;
    const double C32834 = C32818 / C31520;
    const double C32835 = C32819 + C32786;
    const double C13593 = C32786 - C32620 / C31526;
    const double C32817 = C32783 / C31514;
    const double C31557 = C31553 / C31514;
    const double C3775 = C610 * C2761;
    const double C21085 = C610 * C15058;
    const double C31556 = C31552 / C31514;
    const double C2129 = C2119 * C835;
    const double C2122 = C2112 * C835;
    const double C2120 = C2110 * C835;
    const double C2465 = C1832 * C835;
    const double C2459 = C614 * C835;
    const double C2651 = C2647 * C835;
    const double C2649 = C2645 * C835;
    const double C2094 = C1832 * C836;
    const double C2086 = C614 * C836;
    const double C2127 = C2117 * C836;
    const double C2467 = C1834 * C836;
    const double C2461 = C612 * C836;
    const double C2633 = C2308 * C836;
    const double C22860 = C12112 * C15877;
    const double C22853 = C2119 * C15877;
    const double C22849 = C2112 * C15877;
    const double C22845 = C2110 * C15877;
    const double C23135 = C2117 * C15877;
    const double C23131 = C1832 * C15877;
    const double C23127 = C614 * C15877;
    const double C23277 = C12405 * C15877;
    const double C23273 = C2647 * C15877;
    const double C23269 = C2645 * C15877;
    const double C32845 = C32788 + C32837;
    const double C2753 = C32824 - (C32443 * C32426) / C31514;
    const double C21084 = C611 * C32825;
    const double C105 = C32825 / C31520 - C32441 / C32795;
    const double C3774 = C611 * C2754;
    const double C32838 = C32791 + C32824;
    const double C31665 = C31661 / C31514;
    const double C15090 = C15053 * C123;
    const double C15080 = C15053 * C133;
    const double C15076 = C15053 * C122;
    const double C15072 = C15053 * C131;
    const double C15068 = C15053 * C121;
    const double C15064 = C15053 * C129;
    const double C15060 = C15053 * C120;
    const double C15460 = C15053 * C246;
    const double C15456 = C15053 * C259;
    const double C15452 = C15053 * C245;
    const double C15448 = C15053 * C257;
    const double C15444 = C15053 * C244;
    const double C15626 = C15053 * C351;
    const double C15622 = C15053 * C364;
    const double C15618 = C15053 * C350;
    const double C15614 = C15053 * C362;
    const double C15610 = C15053 * C349;
    const double C16722 = C15053 * C355;
    const double C16712 = C15053 * C371;
    const double C16708 = C15053 * C354;
    const double C17056 = C15053 * C2059;
    const double C17052 = C15053 * C2067;
    const double C17048 = C15053 * C2058;
    const double C17044 = C15053 * C2065;
    const double C17036 = C15053 * C369;
    const double C17032 = C15053 * C353;
    const double C17028 = C15053 * C366;
    const double C17024 = C15053 * C352;
    const double C17291 = C15053 * C697;
    const double C17287 = C15053 * C704;
    const double C17283 = C15053 * C1145;
    const double C17279 = C15053 * C1161;
    const double C17707 = C15053 * C1157;
    const double C17703 = C15053 * C1143;
    const double C17699 = C15053 * C702;
    const double C17695 = C15053 * C696;
    const double C19269 = C15053 * C698;
    const double C28226 = C15053 * C2060;
    const double C28222 = C15053 * C2070;
    const double C28630 = C15053 * C2620;
    const double C28626 = C15053 * C2616;
    const double C31676 = C31670 / C31514;
    const double C17885 = C17857 + C17858;
    const double C17882 = C17851 + C17852;
    const double C17879 = C17845 + C17846;
    const double C18298 = C18283 + C18284;
    const double C18295 = C18277 + C18278;
    const double C18292 = C18271 + C18272;
    const double C18480 = C18465 + C18466;
    const double C20154 = C20133 + C20134;
    const double C20151 = C20127 + C20128;
    const double C20148 = C20121 + C20122;
    const double C20144 = C20113 + C20114;
    const double C20141 = C20107 + C20108;
    const double C20366 = C20357 + C20358;
    const double C20782 = C20775 + C20776;
    const double C20779 = C20769 + C20770;
    const double C7736 = C7708 * C1006;
    const double C7726 = C7708 * C1014;
    const double C7718 = C7708 * C1007;
    const double C8094 = C7708 * C1010;
    const double C8086 = C7708 * C1021;
    const double C8248 = C7708 * C1695;
    const double C8240 = C7708 * C1700;
    const double C9758 = C7708 * C6425;
    const double C9750 = C7708 * C6431;
    const double C9748 = C7708 * C1698;
    const double C9740 = C7708 * C1694;
    const double C10186 = C7708 * C6427;
    const double C10178 = C7708 * C6424;
    const double C15904 = C15876 * C1006;
    const double C15894 = C15876 * C1014;
    const double C15886 = C15876 * C1007;
    const double C16262 = C15876 * C1010;
    const double C16254 = C15876 * C1021;
    const double C16416 = C15876 * C1695;
    const double C16408 = C15876 * C1700;
    const double C27484 = C15876 * C6425;
    const double C27476 = C15876 * C6431;
    const double C27474 = C15876 * C1698;
    const double C27466 = C15876 * C1694;
    const double C27912 = C15876 * C6427;
    const double C27904 = C15876 * C6424;
    const double C32846 = C32809 + C32841;
    const double C7700 = C32831 - (C32580 * C32569) / C31514;
    const double C894 = C884 + C885;
    const double C893 = C881 + C882;
    const double C22348 = C1547 + C1548;
    const double C22345 = C1548 + C1547;
    const double C22347 = C1544 + C1545;
    const double C22346 = C1545 + C1544;
    const double C11399 = C11389 + C11390;
    const double C11398 = C11386 + C11387;
    const double C15907 = C32832 * C267;
    const double C15893 = C32832 * C279;
    const double C15885 = C32832 * C265;
    const double C16265 = C32832 * C1015;
    const double C16257 = C32832 * C1025;
    const double C16419 = C32832 * C1152;
    const double C16411 = C32832 * C1168;
    const double C27487 = C32832 * C1156;
    const double C27479 = C32832 * C1171;
    const double C27473 = C32832 * C1169;
    const double C27465 = C32832 * C1154;
    const double C27911 = C32832 * C1703;
    const double C27903 = C32832 * C1697;
    const double C6283 = C32832 / C31520 - C32578 / C32795;
    const double C7739 = C7701 * C267;
    const double C7725 = C7701 * C279;
    const double C7717 = C7701 * C265;
    const double C8097 = C7701 * C1015;
    const double C8089 = C7701 * C1025;
    const double C8251 = C7701 * C1152;
    const double C8243 = C7701 * C1168;
    const double C9761 = C7701 * C1156;
    const double C9753 = C7701 * C1171;
    const double C9747 = C7701 * C1169;
    const double C9739 = C7701 * C1154;
    const double C10185 = C7701 * C1703;
    const double C10177 = C7701 * C1697;
    const double C32842 = C32811 + C32831;
    const double C5486 = C5476 + C5477;
    const double C5485 = C5473 + C5474;
    const double C9241 = C6071 + C6072;
    const double C9238 = C6072 + C6071;
    const double C9240 = C6068 + C6069;
    const double C9239 = C6069 + C6068;
    const double C7092 = C7082 + C7083;
    const double C7091 = C7079 + C7080;
    const double C14528 = C12851 * C6291;
    const double C25557 = C12851 * C15877;
    const double C14541 = C14530 * C6291;
    const double C2641 = C2304 * C836;
    const double C14228 = C2304 * C31540;
    const double C23275 = C2304 * C15878;
    const double C12853 = C4680 + C4679;
    const double C13287 = C4679 + C4680;
    const double C14232 = C13949 * C31540;
    const double C23279 = C13949 * C15878;
    const double C12872 = C12852 * C32754;
    const double C14529 = C12852 * C32430;
    const double C25558 = C12852 * C15871;
    const double C14542 = C14531 * C32430;
    const double C1540 = C1519 + C1520;
    const double C4897 = C4883 + C4884;
    const double C6064 = C6043 + C6044;
    const double C18474 = C18453 + C18454;
    const double C19273 = C19267 + C19268;
    const double C2302 = C2287 + C2288;
    const double C4675 = C4649 + C4650;
    const double C16730 = C16720 + C16721;
    const double C177 = C166 + C167;
    const double C496 = C481 + C482;
    const double C2809 = C2791 + C2792;
    const double C15106 = C15088 + C15089;
    const double C890 = C869 + C870;
    const double C3167 = C3145 + C3146;
    const double C5482 = C5461 + C5462;
    const double C15464 = C15442 + C15443;
    const double C17892 = C17871 + C17872;
    const double C608 = C593 + C594;
    const double C1837 = C1830 + C1831;
    const double C3333 = C3311 + C3312;
    const double C3920 = C3917 + C3918;
    const double C15630 = C15608 + C15609;
    const double C6519 =
        (4 * (2 * C32158 + C31757 * C32272 + C32159 * ae) +
         C31757 *
             (3 * C32272 +
              C31757 * (2 * C32264 +
                        C31757 * (C31815 +
                                  C31757 * (C31757 * C31758 * C31827 + C31898) +
                                  C31757 * C31895 * ae) +
                        C32266 * ae) +
              C32271 * ae) +
         (3 * C32159 + C31757 * C32271) * ae) /
        C31514;
    const double C6605 =
        (C31971 *
         (3 * C32272 +
          C31757 *
              (2 * C32264 +
               C31757 * (C31815 + C31757 * (C31757 * C31758 * C31827 + C31898) +
                         C31757 * C31895 * ae) +
               C32266 * ae) +
          C32271 * ae)) /
        C31514;
    const double C7244 =
        (2 * C32158 + C31757 * C32272 + C32159 * ae +
         (2 * C32264 +
          C31757 * (C31815 + C31757 * (C31757 * C31758 * C31827 + C31898) +
                    C31757 * C31895 * ae) +
          C32266 * ae) *
             C31975) /
        C31514;
    const double C7394 =
        (2 * C31971 * C32272 +
         C31971 *
             (C32272 + (C31815 + C31757 * (C31757 * C31758 * C31827 + C31898) +
                        C31757 * C31895 * ae) *
                           C31975)) /
        C31514;
    const double C31885 = C31872 + C31884;
    const double C31954 = C31951 + C31952;
    const double C1165 = (C31757 * C31870 + C31950 * C31975) / C31514;
    const double C2624 =
        (2 * C31971 * C31950 + C31971 * (C31950 + C31757 * C31907 * C31975)) /
        C31514;
    const double C32251 = C32233 + C32249;
    const double C7068 = C32804 * C7028;
    const double C11375 = C32804 * C7028;
    const double C14941 = C32577 * C7028;
    const double C28629 = C32577 * C7028;
    const double C31024 = C17830 * C7028;
    const double C862 = C32804 * C280;
    const double C1330 = C32827 * C280;
    const double C3150 = C32577 * C280;
    const double C5454 = C32804 * C280;
    const double C5858 = C5419 * C280;
    const double C7731 = C7701 * C280;
    const double C15447 = C32577 * C280;
    const double C15899 = C32832 * C280;
    const double C17864 = C17830 * C280;
    const double C18268 = C32580 * C280;
    const double C1516 = C32827 * C713;
    const double C2294 = C32514 * C713;
    const double C3316 = C32577 * C713;
    const double C4882 = C32773 * C713;
    const double C6040 = C5419 * C713;
    const double C15613 = C32577 * C713;
    const double C18450 = C32580 * C713;
    const double C19266 = C15047 * C713;
    const double C1328 = C32804 * C1024;
    const double C5856 = C32804 * C1024;
    const double C7729 = C32814 * C1024;
    const double C15897 = C32814 * C1024;
    const double C18266 = C17830 * C1024;
    const double C162 = C113 * C135;
    const double C2789 = C2756 * C135;
    const double C15086 = C15053 * C135;
    const double C483 = C113 * C255;
    const double C865 = C833 * C255;
    const double C2785 = C2757 * C255;
    const double C3143 = C2756 * C255;
    const double C5457 = C5425 * C255;
    const double C15082 = C15054 * C255;
    const double C15440 = C15053 * C255;
    const double C861 = C834 * C268;
    const double C1329 = C833 * C268;
    const double C3149 = C2757 * C268;
    const double C5453 = C5426 * C268;
    const double C5857 = C5425 * C268;
    const double C15446 = C15054 * C268;
    const double C17863 = C31694 * C268;
    const double C595 = C113 * C360;
    const double C3309 = C2756 * C360;
    const double C15606 = C15053 * C360;
    const double C1826 = C113 * C373;
    const double C4647 = C2756 * C373;
    const double C16718 = C15053 * C373;
    const double C1515 = C833 * C706;
    const double C2293 = C113 * C706;
    const double C3315 = C2757 * C706;
    const double C4881 = C2756 * C706;
    const double C6039 = C5425 * C706;
    const double C15612 = C15054 * C706;
    const double C19265 = C15053 * C706;
    const double C1327 = C834 * C1012;
    const double C5855 = C5426 * C1012;
    const double C7728 = C7708 * C1012;
    const double C15896 = C15876 * C1012;
    const double C18265 = C31694 * C1012;
    const double C1513 = C834 * C1149;
    const double C4879 = C2757 * C1149;
    const double C6037 = C5426 * C1149;
    const double C18447 = C31694 * C1149;
    const double C19263 = C15054 * C1149;
    const double C2098 = C113 * C2063;
    const double C1543 = C1525 + C1526;
    const double C4899 = C4887 + C4888;
    const double C6067 = C6049 + C6050;
    const double C9039 = C9028 + C9029;
    const double C17297 = C17285 + C17286;
    const double C18477 = C18459 + C18460;
    const double C22146 = C22135 + C22136;
    const double C2303 = C2289 + C2290;
    const double C4677 = C4653 + C4654;
    const double C7414 = C7406 + C7407;
    const double C11713 = C11705 + C11706;
    const double C13089 = C13082 + C13083;
    const double C16727 = C16714 + C16715;
    const double C7415 = C7408 + C7409;
    const double C11714 = C11707 + C11708;
    const double C13088 = C13080 + C13081;
    const double C17293 = C17277 + C17278;
    const double C20145 = C20115 + C20116;
    const double C9038 = C9026 + C9027;
    const double C20363 = C20351 + C20352;
    const double C22145 = C22133 + C22134;
    const double C12875 = C12855 + C12856;
    const double C13948 = C13944 + C13945;
    const double C17068 = C17042 + C17043;
    const double C138 = (5 * (3 * C31791 + C31758 * C31811) +
                         C31758 * (4 * C31811 + C31758 * C31839)) /
                        C31514;
    const double C271 =
        (3 * C31791 + C31758 * C31811 +
         C31757 * (C31757 * C31839 + C32086 * ae) + C31757 * C32086 * ae) /
        C31514;
    const double C376 =
        (3 * C31791 + C31758 * C31811 + C31839 * C31975) / C31514;
    const double C475 = (C31757 * (4 * C31811 + C31758 * C31839) +
                         (4 * C32080 + C31758 * C32086) * ae) /
                        C31514;
    const double C587 = (C31971 * (4 * C31811 + C31758 * C31839)) / C31514;
    const double C709 = (C31971 * (C31757 * C31839 + C32086 * ae)) / C31514;
    const double C146 =
        (5 * (3 * C31810 + ae * C31811 + C31758 * C31838) +
         ae * (4 * C31811 + C31758 * C31839) +
         C31758 *
             (4 * C31838 + ae * C31839 +
              C31758 *
                  (3 * C31834 + ae * C31835 +
                   C31758 * (2 * C31830 + ae * C31831 +
                             C31758 * (C31826 + ae * C31758 * C31827 +
                                       C31758 * (ae * C31827 +
                                                 C31758 * std::pow(C31760, 8) *
                                                     bs[8] * C31768)))))) /
        C31519;
    const double C273 =
        (ae * (3 * (C31772 * C31773 * C31841 + C31758 * C31851 + C31846 * ae) +
               C31758 * (2 * C31851 +
                         C31758 * (C31848 +
                                   C31758 * (C31758 * C31795 * C31796 * C31841 +
                                             C31843 * ae) +
                                   C31758 * C31843 * ae) +
                         C31849 * ae) +
               (2 * C31846 + C31758 * C31849) * ae) +
         C31757 * (3 * C31810 + ae * C31811 + C31758 * C31838)) /
        C31519;
    const double C378 =
        ((zP - zQ) * (3 * C31810 + ae * C31811 + C31758 * C31838)) / C31519;
    const double C386 = (2 * C31790 + ae * C31791 + C31758 * C31810 +
                         C31838 * std::pow(zP - zQ, 2)) /
                        C31519;
    const double C387 =
        (3 * C31810 + ae * C31811 + C31758 * C31838 +
         (3 * C31834 + ae * C31835 +
          C31758 *
              (2 * C31830 + ae * C31831 +
               C31758 * (C31826 + ae * C31758 * C31827 +
                         C31758 * (ae * C31827 + C31758 * std::pow(C31760, 8) *
                                                     bs[8] * C31768)))) *
             std::pow(zP - zQ, 2)) /
        C31519;
    const double C589 =
        ((zP - zQ) *
         (4 * C31838 + ae * C31839 +
          C31758 * (3 * C31834 + ae * C31835 +
                    C31758 * (2 * C31830 + ae * C31831 +
                              C31758 * (C31826 + ae * C31758 * C31827 +
                                        C31758 * (ae * C31827 +
                                                  C31758 * std::pow(C31760, 8) *
                                                      bs[8] * C31768)))))) /
        C31519;
    const double C2457 =
        (2 * C31971 * C31838 +
         C31971 * (C31838 + (2 * C31830 + ae * C31831 +
                             C31758 * (C31826 + ae * C31758 * C31827 +
                                       C31758 * (ae * C31827 +
                                                 C31758 * std::pow(C31760, 8) *
                                                     bs[8] * C31768))) *
                                C31975)) /
        C31519;
    const double C7246 =
        (2 * C31947 + ae * C31948 + C31757 * C32034 +
         (2 * C32028 + ae * C32030 +
          C31757 *
              (C31830 + ae * C31757 * C31900 +
               C31757 * (ae * C31900 +
                         C31757 * (ae * C31827 + C31758 * std::pow(C31760, 8) *
                                                     bs[8] * C31768)))) *
             C31975) /
        C31519;
    const double C7396 =
        (2 * C31971 * C32034 +
         C31971 * (C32034 + (C31830 + ae * C31757 * C31900 +
                             C31757 * (ae * C31900 +
                                       C31757 * (ae * C31827 +
                                                 C31758 * std::pow(C31760, 8) *
                                                     bs[8] * C31768))) *
                                C31975)) /
        C31519;
    const double C6433 =
        (C31971 * (3 * C31995 + ae * C31996 + C31757 * C32017)) / C31519;
    const double C6434 =
        (2 * C31939 + ae * C31941 + C31757 * C31995 + C32017 * C31975) / C31519;
    const double C6435 =
        (3 * C31995 + ae * C31996 + C31757 * C32017 +
         (3 * C32013 + ae * C32014 +
          C31757 *
              (2 * C32007 + ae * C32009 +
               C31757 * (C31826 + ae * C31757 * C31893 +
                         C31757 * (ae * C31893 + C31757 * std::pow(C31760, 8) *
                                                     bs[8] * C31768)))) *
             C31975) /
        C31519;
    const double C7564 =
        (2 * C31971 * C32017 +
         C31971 * (C32017 + (2 * C32007 + ae * C32009 +
                             C31757 * (C31826 + ae * C31757 * C31893 +
                                       C31757 * (ae * C31893 +
                                                 C31757 * std::pow(C31760, 8) *
                                                     bs[8] * C31768))) *
                                C31975)) /
        C31519;
    const double C7085 = C7061 + C7062;
    const double C11392 = C11368 + C11369;
    const double C14949 = C14944 + C14945;
    const double C28637 = C28632 + C28633;
    const double C31031 = C31017 + C31018;
    const double C31909 = C31889 + C31908;
    const double C31955 = C31883 + C31953;
    const double C6521 =
        (4 * (2 * C31947 + ae * C31948 + C31757 * C32034) +
         ae * (3 * C31948 + C31757 * C32035) +
         C31757 *
             (3 * C32034 + ae * C32035 +
              C31757 *
                  (2 * C32028 + ae * C32030 +
                   C31757 * (C31830 + ae * C31757 * C31900 +
                             C31757 * (ae * C31900 +
                                       C31757 * (ae * C31827 +
                                                 C31758 * std::pow(C31760, 8) *
                                                     bs[8] * C31768)))))) /
        C31519;
    const double C6607 =
        (C31971 *
         (3 * C32034 + ae * C32035 +
          C31757 * (2 * C32028 + ae * C32030 +
                    C31757 * (C31830 + ae * C31757 * C31900 +
                              C31757 * (ae * C31900 +
                                        C31757 * (ae * C31827 +
                                                  C31758 * std::pow(C31760, 8) *
                                                      bs[8] * C31768)))))) /
        C31519;
    const double C6520 = (4 * (2 * C31943 + C31757 * C31948) +
                          C31757 * (3 * C31948 + C31757 * C32035)) /
                         C31514;
    const double C6606 = (C31971 * (3 * C31948 + C31757 * C32035)) / C31514;
    const double C7245 =
        (2 * C31943 + C31757 * C31948 + C32035 * C31975) / C31514;
    const double C6361 =
        (5 * (3 * C31995 + ae * C31996 + C31757 * C32017) +
         ae * (4 * C31996 + C31757 * C32018) +
         C31757 *
             (4 * C32017 + ae * C32018 +
              C31757 *
                  (3 * C32013 + ae * C32014 +
                   C31757 * (2 * C32007 + ae * C32009 +
                             C31757 * (C31826 + ae * C31757 * C31893 +
                                       C31757 * (ae * C31893 +
                                                 C31757 * std::pow(C31760, 8) *
                                                     bs[8] * C31768)))))) /
        C31519;
    const double C6693 =
        (C31971 *
         (4 * C32017 + ae * C32018 +
          C31757 * (3 * C32013 + ae * C32014 +
                    C31757 * (2 * C32007 + ae * C32009 +
                              C31757 * (C31826 + ae * C31757 * C31893 +
                                        C31757 * (ae * C31893 +
                                                  C31757 * std::pow(C31760, 8) *
                                                      bs[8] * C31768)))))) /
        C31519;
    const double C6359 = (5 * (3 * C31941 + C31757 * C31996) +
                          C31757 * (4 * C31996 + C31757 * C32018)) /
                         C31514;
    const double C6432 =
        (3 * C31941 + C31757 * C31996 + C32018 * C31975) / C31514;
    const double C6692 = (C31971 * (4 * C31996 + C31757 * C32018)) / C31514;
    const double C32847 = C32815 + C32843;
    const double C13592 = C32834 - (C32622 * C32611) / C31514;
    const double C11961 = C32835 / C31520 - C32620 / C32795;
    const double C32844 = C32817 + C32834;
    const double C31559 = C31556 - C31535;
    const double C2130 = C2122 + C2123;
    const double C22862 = C22853 + C22854;
    const double C22861 = C22849 + C22850;
    const double C21093 = C2113 * C32845;
    const double C21080 = C2111 * C32845;
    const double C21356 = C613 * C32845;
    const double C21494 = C2646 * C32845;
    const double C102 =
        (C32836 + 2 * C32435) / C31520 - (C32845 * C32426) / C31514;
    const double C3781 = C1833 * C2753;
    const double C3772 = C613 * C2753;
    const double C4054 = C611 * C2753;
    const double C4192 = C2307 * C2753;
    const double C21091 = C1833 * C32838;
    const double C21082 = C613 * C32838;
    const double C21358 = C611 * C32838;
    const double C21496 = C2307 * C32838;
    const double C103 =
        (C32823 + 2 * C32443 + C32845) / C31520 - (C32838 * C32426) / C31514;
    const double C104 = (C32793 + C32440 / C31514 + C32838) / C31520 -
                        (C32825 * C32426) / C31514;
    const double C31669 = C31665 - C31646;
    const double C15107 = C15090 + C15091;
    const double C15102 = C15080 + C15081;
    const double C15100 = C15076 + C15077;
    const double C15098 = C15072 + C15073;
    const double C15096 = C15068 + C15069;
    const double C15094 = C15064 + C15065;
    const double C15092 = C15060 + C15061;
    const double C15473 = C15460 + C15461;
    const double C15471 = C15456 + C15457;
    const double C15469 = C15452 + C15453;
    const double C15467 = C15448 + C15449;
    const double C15465 = C15444 + C15445;
    const double C15639 = C15626 + C15627;
    const double C15637 = C15622 + C15623;
    const double C15635 = C15618 + C15619;
    const double C15633 = C15614 + C15615;
    const double C15631 = C15610 + C15611;
    const double C16731 = C16722 + C16723;
    const double C16726 = C16712 + C16713;
    const double C16724 = C16708 + C16709;
    const double C17075 = C17056 + C17057;
    const double C17073 = C17052 + C17053;
    const double C17071 = C17048 + C17049;
    const double C17069 = C17044 + C17045;
    const double C17064 = C17036 + C17037;
    const double C17062 = C17032 + C17033;
    const double C17060 = C17028 + C17029;
    const double C17058 = C17024 + C17025;
    const double C17300 = C17291 + C17292;
    const double C17298 = C17287 + C17288;
    const double C17296 = C17283 + C17284;
    const double C17294 = C17279 + C17280;
    const double C17717 = C17707 + C17708;
    const double C17715 = C17703 + C17704;
    const double C17713 = C17699 + C17700;
    const double C17711 = C17695 + C17696;
    const double C19274 = C19269 + C19270;
    const double C28234 = C28226 + C28227;
    const double C28232 = C28222 + C28223;
    const double C28636 = C28630 + C28631;
    const double C28634 = C28626 + C28627;
    const double C7756 = C7736 + C7737;
    const double C7751 = C7726 + C7727;
    const double C7747 = C7718 + C7719;
    const double C8106 = C8094 + C8095;
    const double C8102 = C8086 + C8087;
    const double C8260 = C8248 + C8249;
    const double C8256 = C8240 + C8241;
    const double C9773 = C9748 + C9749;
    const double C9769 = C9740 + C9741;
    const double C15924 = C15904 + C15905;
    const double C15919 = C15894 + C15895;
    const double C15915 = C15886 + C15887;
    const double C16274 = C16262 + C16263;
    const double C16270 = C16254 + C16255;
    const double C16428 = C16416 + C16417;
    const double C16424 = C16408 + C16409;
    const double C27499 = C27474 + C27475;
    const double C27495 = C27466 + C27467;
    const double C15911 = C32846 * C130;
    const double C15903 = C32846 * C142;
    const double C15889 = C32846 * C141;
    const double C15881 = C32846 * C128;
    const double C16269 = C32846 * C260;
    const double C16261 = C32846 * C276;
    const double C16423 = C32846 * C365;
    const double C16415 = C32846 * C381;
    const double C27491 = C32846 * C368;
    const double C27483 = C32846 * C383;
    const double C27469 = C32846 * C382;
    const double C27461 = C32846 * C367;
    const double C27907 = C32846 * C711;
    const double C27899 = C32846 * C701;
    const double C6280 =
        (C32839 + 2 * C32573) / C31520 - (C32846 * C32569) / C31514;
    const double C7741 = C7700 * C258;
    const double C7733 = C7700 * C275;
    const double C7723 = C7700 * C276;
    const double C7715 = C7700 * C260;
    const double C8099 = C7700 * C265;
    const double C8091 = C7700 * C279;
    const double C8253 = C7700 * C703;
    const double C8245 = C7700 * C712;
    const double C9763 = C7700 * C1155;
    const double C9755 = C7700 * C1170;
    const double C9745 = C7700 * C711;
    const double C9737 = C7700 * C701;
    const double C10183 = C7700 * C1169;
    const double C10175 = C7700 * C1154;
    const double C895 = C893 + C883;
    const double C22352 = C1546 + C22348;
    const double C22349 = C22345 + C1546;
    const double C11401 = C11399 + C11391;
    const double C11400 = C11398 + C11388;
    const double C15909 = C32842 * C258;
    const double C15901 = C32842 * C275;
    const double C15891 = C32842 * C276;
    const double C15883 = C32842 * C260;
    const double C16267 = C32842 * C265;
    const double C16259 = C32842 * C279;
    const double C16421 = C32842 * C703;
    const double C16413 = C32842 * C712;
    const double C27489 = C32842 * C1155;
    const double C27481 = C32842 * C1170;
    const double C27471 = C32842 * C711;
    const double C27463 = C32842 * C701;
    const double C27909 = C32842 * C1169;
    const double C27901 = C32842 * C1154;
    const double C6281 =
        (C32827 + 2 * C32580 + C32846) / C31520 - (C32842 * C32569) / C31514;
    const double C6282 = (C32804 + C32577 / C31514 + C32842) / C31520 -
                         (C32832 * C32569) / C31514;
    const double C5487 = C5485 + C5475;
    const double C9245 = C6070 + C9241;
    const double C9242 = C9238 + C6070;
    const double C7094 = C7092 + C7084;
    const double C7093 = C7091 + C7081;
    const double C12873 = C12853 * C31540;
    const double C25559 = C12853 * C15878;
    const double C14540 = C14528 + C14529;
    const double C25561 = C25557 + C25558;
    const double C14547 = C14541 + C14542;
    const double C2643 = C2302 * C837;
    const double C11012 = C2302 * C5429;
    const double C25117 = C2302 * C31575;
    const double C4057 = C608 * C2761;
    const double C21361 = C608 * C15058;
    const double C2469 = C1837 * C837;
    const double C3778 = C1837 * C2761;
    const double C10854 = C1837 * C5429;
    const double C21088 = C1837 * C15058;
    const double C24959 = C1837 * C31575;
    const double C4195 = C3920 * C2761;
    const double C21499 = C3920 * C15058;
    const double C31886 = C31885 + C31876;
    const double C1167 =
        ((zP - zQ) * (C31810 + ae * C31950 + C31757 * C31954)) / C31519;
    const double C1174 =
        (ae * C31870 + C31757 * C31810 + C31954 * std::pow(zP - zQ, 2)) /
        C31519;
    const double C1175 =
        (C31810 + ae * C31950 + C31757 * C31954 +
         (C31834 + ae * C31757 * C31907 +
          C31757 *
              (ae * C31907 +
               C31757 * (C31826 + ae * C31758 * C31827 +
                         C31758 * (ae * C31827 + C31758 * std::pow(C31760, 8) *
                                                     bs[8] * C31768)))) *
             std::pow(zP - zQ, 2)) /
        C31519;
    const double C2627 =
        (2 * C31971 * C31954 +
         C31971 * (C31954 + (ae * C31907 +
                             C31757 * (C31826 + ae * C31758 * C31827 +
                                       C31758 * (ae * C31827 +
                                                 C31758 * std::pow(C31760, 8) *
                                                     bs[8] * C31768))) *
                                C31975)) /
        C31519;
    const double C2285 = C113 * C1165;
    const double C4645 = C2757 * C1165;
    const double C16716 = C15054 * C1165;
    const double C32252 = C32251 + C32236;
    const double C7088 = C7067 + C7068;
    const double C11395 = C11374 + C11375;
    const double C14947 = C14940 + C14941;
    const double C28635 = C28628 + C28629;
    const double C31034 = C31023 + C31024;
    const double C175 = C162 + C163;
    const double C2808 = C2789 + C2790;
    const double C15105 = C15086 + C15087;
    const double C497 = C483 + C484;
    const double C888 = C865 + C866;
    const double C2806 = C2785 + C2786;
    const double C3166 = C3143 + C3144;
    const double C5480 = C5457 + C5458;
    const double C15103 = C15082 + C15083;
    const double C15463 = C15440 + C15441;
    const double C886 = C861 + C862;
    const double C1352 = C1329 + C1330;
    const double C3169 = C3149 + C3150;
    const double C5478 = C5453 + C5454;
    const double C5880 = C5857 + C5858;
    const double C15466 = C15446 + C15447;
    const double C17888 = C17863 + C17864;
    const double C609 = C595 + C596;
    const double C3332 = C3309 + C3310;
    const double C15629 = C15606 + C15607;
    const double C1835 = C1826 + C1827;
    const double C4674 = C4647 + C4648;
    const double C16729 = C16718 + C16719;
    const double C1538 = C1515 + C1516;
    const double C2305 = C2293 + C2294;
    const double C3335 = C3315 + C3316;
    const double C4896 = C4881 + C4882;
    const double C6062 = C6039 + C6040;
    const double C15632 = C15612 + C15613;
    const double C19272 = C19265 + C19266;
    const double C1351 = C1327 + C1328;
    const double C5879 = C5855 + C5856;
    const double C7752 = C7728 + C7729;
    const double C15920 = C15896 + C15897;
    const double C18289 = C18265 + C18266;
    const double C2114 = C2098 + C2099;
    const double C22351 = C1543 + C22347;
    const double C22350 = C22346 + C1543;
    const double C9244 = C6067 + C9240;
    const double C9243 = C9239 + C6067;
    const double C2642 = C2303 * C830;
    const double C11011 = C2303 * C32823;
    const double C14229 = C2303 * C32440;
    const double C23276 = C2303 * C32440;
    const double C25116 = C2303 * C32443;
    const double C12854 = C4678 + C4677;
    const double C13286 = C4677 + C4678;
    const double C14233 = C13948 * C32440;
    const double C23280 = C13948 * C32440;
    const double C480 = C32514 * C273;
    const double C2788 = C32577 * C273;
    const double C15085 = C32577 * C273;
    const double C592 = C32514 * C378;
    const double C1829 = C32514 * C386;
    const double C10187 = C32814 * C6433;
    const double C27913 = C32814 * C6433;
    const double C7589 = C32804 * C6434;
    const double C9751 = C32814 * C6434;
    const double C11884 = C32804 * C6434;
    const double C27477 = C32814 * C6434;
    const double C31489 = C17830 * C6434;
    const double C31910 = C31909 + C31901;
    const double C1029 =
        (3 * (C31810 + ae * C31950 + C31757 * C31954) +
         ae * (2 * C31950 + C31757 * C31955) +
         C31757 *
             (2 * C31954 + ae * C31955 +
              C31757 *
                  (C31834 + ae * C31757 * C31907 +
                   C31757 * (ae * C31907 +
                             C31757 * (C31826 + ae * C31758 * C31827 +
                                       C31758 * (ae * C31827 +
                                                 C31758 * std::pow(C31760, 8) *
                                                     bs[8] * C31768)))))) /
        C31519;
    const double C1705 =
        ((zP - zQ) *
         (2 * C31954 + ae * C31955 +
          C31757 * (C31834 + ae * C31757 * C31907 +
                    C31757 * (ae * C31907 +
                              C31757 * (C31826 + ae * C31758 * C31827 +
                                        C31758 * (ae * C31827 +
                                                  C31758 * std::pow(C31760, 8) *
                                                      bs[8] * C31768)))))) /
        C31519;
    const double C1023 = (3 * (C31870 + C31883 * C31938) +
                          C31757 * (2 * C31950 + C31757 * C31955)) /
                         C31514;
    const double C1166 = (C31870 + C31883 * C31938 + C31955 * C31975) / C31514;
    const double C1702 = (C31971 * (2 * C31950 + C31757 * C31955)) / C31514;
    const double C11958 =
        (C32840 + 2 * C32615) / C31520 - (C32847 * C32611) / C31514;
    const double C11959 =
        (C32829 + 2 * C32622 + C32847) / C31520 - (C32844 * C32611) / C31514;
    const double C11960 = (C32807 + C32619 / C31514 + C32844) / C31520 -
                          (C32835 * C32611) / C31514;
    const double C12871 = C12851 * C31559;
    const double C13807 = C12112 * C31559;
    const double C13800 = C2119 * C31559;
    const double C13796 = C2112 * C31559;
    const double C13792 = C2110 * C31559;
    const double C14088 = C2117 * C31559;
    const double C14084 = C1832 * C31559;
    const double C14080 = C614 * C31559;
    const double C14230 = C12405 * C31559;
    const double C14226 = C2647 * C31559;
    const double C14222 = C2645 * C31559;
    const double C31562 = C31559 / C31520;
    const double C31561 = C31512 * C31559;
    const double C2131 = C2130 + C2094;
    const double C22864 = C22862 + C22855;
    const double C22863 = C22861 + C22851;
    const double C31675 = C31669 / C31520;
    const double C31674 = C31590 * C31669;
    const double C15110 = C15100 + C15101;
    const double C15109 = C15098 + C15099;
    const double C15108 = C15096 + C15097;
    const double C17500 = C15638 + C15639;
    const double C17495 = C15639 + C15638;
    const double C17499 = C15636 + C15637;
    const double C17496 = C15637 + C15636;
    const double C18775 = C15635 + C15634;
    const double C19470 = C15634 + C15635;
    const double C17041 = C16726 + C16727;
    const double C17497 = C16727 + C16726;
    const double C17040 = C16724 + C16725;
    const double C17498 = C16725 + C16724;
    const double C28218 = C17075 + C17074;
    const double C28219 = C17073 + C17072;
    const double C17077 = C17064 + C17065;
    const double C17076 = C17062 + C17063;
    const double C11403 = C11401 * C32430;
    const double C11402 = C11400 * C6291;
    const double C7096 = C7094 * C32430;
    const double C7095 = C7093 * C6291;
    const double C25562 = C25561 + C25559;
    const double C281 =
        (2 * C31790 + ae * C31791 + C31758 * C31810 + ae * C31757 * C31886 +
         C31757 * (ae * C31886 + C31757 * C31838)) /
        C31519;
    const double C714 = ((zP - zQ) * (ae * C31886 + C31757 * C31838)) / C31519;
    const double C136 = (4 * (2 * C31865 + C31758 * C31870 + C32076 * ae) +
                         C31758 * (3 * C31870 + C31758 * C31886 + C32080 * ae) +
                         (3 * C32076 + C31758 * C32080) * ae) /
                        C31514;
    const double C253 =
        (C31757 * (3 * C31870 + C31758 * C31886 + C32080 * ae)) / C31514;
    const double C270 =
        (2 * C31865 + C31758 * C31870 + C32076 * ae + C31886 * C31938) / C31514;
    const double C358 =
        (C31971 * (3 * C31870 + C31758 * C31886 + C32080 * ae)) / C31514;
    const double C375 =
        (2 * C31865 + C31758 * C31870 + C32076 * ae + C31886 * C31975) / C31514;
    const double C708 = (C31971 * C31757 * C31886) / C31514;
    const double C1514 = C32804 * C1167;
    const double C4880 = C32577 * C1167;
    const double C6038 = C32804 * C1167;
    const double C18448 = C17830 * C1167;
    const double C19264 = C32577 * C1167;
    const double C2286 = C32514 * C1174;
    const double C4646 = C32577 * C1174;
    const double C16717 = C32577 * C1174;
    const double C6358 =
        (5 * (3 * C32231 + C31757 * C32252 + C32230 * ae) +
         C31757 *
             (4 * C32252 +
              C31757 *
                  (3 * C32247 +
                   C31757 *
                       (2 * C32239 +
                        C31757 * (C31803 + C31757 * (C31757 * C31827 + C31894) +
                                  C31757 * C31891 * ae) +
                        C32241 * ae) +
                   C32246 * ae) +
              C32250 * ae) +
         (4 * C32230 + C31757 * C32250) * ae) /
        C31514;
    const double C6428 =
        (C31971 * (3 * C32231 + C31757 * C32252 + C32230 * ae)) / C31514;
    const double C6429 =
        (2 * C32151 + C31757 * C32231 + C32152 * ae + C32252 * C31975) / C31514;
    const double C6430 =
        (3 * C32231 + C31757 * C32252 + C32230 * ae +
         (3 * C32247 +
          C31757 * (2 * C32239 +
                    C31757 * (C31803 + C31757 * (C31757 * C31827 + C31894) +
                              C31757 * C31891 * ae) +
                    C32241 * ae) +
          C32246 * ae) *
             C31975) /
        C31514;
    const double C6691 =
        (C31971 *
         (4 * C32252 +
          C31757 * (3 * C32247 +
                    C31757 * (2 * C32239 +
                              C31757 * (C31803 +
                                        C31757 * (C31757 * C31827 + C31894) +
                                        C31757 * C31891 * ae) +
                              C32241 * ae) +
                    C32246 * ae) +
          C32250 * ae)) /
        C31514;
    const double C7562 =
        (2 * C31971 * C32252 +
         C31971 *
             (C32252 + (2 * C32239 +
                        C31757 * (C31803 + C31757 * (C31757 * C31827 + C31894) +
                                  C31757 * C31891 * ae) +
                        C32241 * ae) *
                           C31975)) /
        C31514;
    const double C2814 = C2805 + C2806;
    const double C15111 = C15102 + C15103;
    const double C896 = C894 + C886;
    const double C5488 = C5486 + C5478;
    const double C2464 = C609 * C32793;
    const double C3776 = C609 * C32808;
    const double C4056 = C609 * C2754;
    const double C10849 = C609 * C32793;
    const double C21086 = C609 * C32808;
    const double C21360 = C609 * C32825;
    const double C24954 = C609 * C17833;
    const double C2097 = C1835 * C32793;
    const double C2468 = C1835 * C830;
    const double C3779 = C1835 * C2754;
    const double C10540 = C1835 * C32793;
    const double C10853 = C1835 * C32823;
    const double C14087 = C1835 * C32440;
    const double C21089 = C1835 * C32825;
    const double C23134 = C1835 * C32440;
    const double C24645 = C1835 * C17833;
    const double C24958 = C1835 * C32443;
    const double C2636 = C2305 * C32793;
    const double C4194 = C2305 * C2754;
    const double C11007 = C2305 * C32793;
    const double C21498 = C2305 * C32825;
    const double C25112 = C2305 * C17833;
    const double C4344 = C3336 + C3335;
    const double C5099 = C3335 + C3336;
    const double C18776 = C15633 + C15632;
    const double C19469 = C15632 + C15633;
    const double C2124 = C2114 * C32793;
    const double C10541 = C2114 * C32793;
    const double C14091 = C2114 * C32440;
    const double C23138 = C2114 * C32440;
    const double C24646 = C2114 * C17833;
    const double C12874 = C12854 * C32440;
    const double C25560 = C12854 * C32440;
    const double C10195 = C10186 + C10187;
    const double C27921 = C27912 + C27913;
    const double C7601 = C7588 + C7589;
    const double C9774 = C9750 + C9751;
    const double C11896 = C11883 + C11884;
    const double C27500 = C27476 + C27477;
    const double C31495 = C31488 + C31489;
    const double C31911 = C31758 * C31910;
    const double C1325 =
        (2 * (ae * C31886 + C31757 * C31838) + ae * (C31886 + C31910 * C31938) +
         C31757 *
             (C31838 + ae * C31757 * C31910 +
              C31757 *
                  (ae * C31910 +
                   C31757 * (2 * C31830 + ae * C31831 +
                             C31758 * (C31826 + ae * C31758 * C31827 +
                                       C31758 * (ae * C31827 +
                                                 C31758 * std::pow(C31760, 8) *
                                                     bs[8] * C31768)))))) /
        C31519;
    const double C1511 =
        ((zP - zQ) *
         (C31838 + ae * C31757 * C31910 +
          C31757 * (ae * C31910 +
                    C31757 * (2 * C31830 + ae * C31831 +
                              C31758 * (C31826 + ae * C31758 * C31827 +
                                        C31758 * (ae * C31827 +
                                                  C31758 * std::pow(C31760, 8) *
                                                      bs[8] * C31768)))))) /
        C31519;
    const double C2283 =
        (ae * C31886 + C31757 * C31838 +
         (ae * C31910 +
          C31757 *
              (2 * C31830 + ae * C31831 +
               C31758 * (C31826 + ae * C31758 * C31827 +
                         C31758 * (ae * C31827 + C31758 * std::pow(C31760, 8) *
                                                     bs[8] * C31768)))) *
             C31975) /
        C31519;
    const double C1324 =
        (2 * C31757 * C31886 + C31757 * (C31886 + C31910 * C31938)) / C31514;
    const double C1510 = (C31971 * (C31886 + C31910 * C31938)) / C31514;
    const double C2282 = (C31757 * C31886 + C31757 * C31910 * C31975) / C31514;
    const double C2456 =
        (2 * C31971 * C31886 + C31971 * (C31886 + C31910 * C31975)) / C31514;
    const double C12883 = C12871 + C12872;
    const double C13809 = C13800 + C13801;
    const double C13808 = C13796 + C13797;
    const double C31565 = C31562 - C31557;
    const double C5428 = C31562 + (C31548 * ae) / C31514;
    const double C31564 = C31561 + C32754;
    const double C2132 = C2131 + C2095;
    const double C22866 = C22864 + C22856;
    const double C22865 = C22863 + C22852;
    const double C31680 = C31675 - C31676;
    const double C31679 = C31674 + C32773;
    const double C17067 = C17041 * C32440;
    const double C30099 = C17041 * C32440;
    const double C17066 = C17040 * C15878;
    const double C30098 = C17040 * C31540;
    const double C28229 = C28218 * C6291;
    const double C28230 = C28219 * C32430;
    const double C17079 = C17077 * C15871;
    const double C28217 = C17077 * C32430;
    const double C30097 = C17077 * C32754;
    const double C17078 = C17076 * C15877;
    const double C28216 = C17076 * C6291;
    const double C30096 = C17076 * C31559;
    const double C11404 = C11402 + C11403;
    const double C7097 = C7095 + C7096;
    const double C864 = C32804 * C281;
    const double C3142 = C32577 * C281;
    const double C5456 = C32804 * C281;
    const double C15439 = C32577 * C281;
    const double C17866 = C17830 * C281;
    const double C3308 = C32577 * C714;
    const double C3916 = C32514 * C714;
    const double C15605 = C32577 * C714;
    const double C164 = C113 * C136;
    const double C479 = C113 * C253;
    const double C2787 = C2757 * C253;
    const double C15084 = C15054 * C253;
    const double C863 = C834 * C270;
    const double C3141 = C2757 * C270;
    const double C5455 = C5426 * C270;
    const double C15438 = C15054 * C270;
    const double C17865 = C31694 * C270;
    const double C591 = C113 * C358;
    const double C1828 = C113 * C375;
    const double C3307 = C2757 * C708;
    const double C3915 = C113 * C708;
    const double C15604 = C15054 * C708;
    const double C1537 = C1513 + C1514;
    const double C4895 = C4879 + C4880;
    const double C6061 = C6037 + C6038;
    const double C18471 = C18447 + C18448;
    const double C19271 = C19263 + C19264;
    const double C2301 = C2285 + C2286;
    const double C4673 = C4645 + C4646;
    const double C16728 = C16716 + C16717;
    const double C10179 = C32814 * C6428;
    const double C27905 = C32814 * C6428;
    const double C7583 = C32804 * C6429;
    const double C9759 = C32814 * C6429;
    const double C11878 = C32804 * C6429;
    const double C27485 = C32814 * C6429;
    const double C31483 = C17830 * C6429;
    const double C25563 = C25562 + C25560;
    const double C31912 = C31888 + C31911;
    const double C12884 = C12883 + C12873;
    const double C13811 = C13809 + C13802;
    const double C13810 = C13808 + C13798;
    const double C24649 = C2117 * C31565;
    const double C24642 = C1832 * C31565;
    const double C24636 = C614 * C31565;
    const double C24957 = C1834 * C31565;
    const double C24951 = C612 * C31565;
    const double C25115 = C2304 * C31565;
    const double C25109 = C2308 * C31565;
    const double C117 =
        (C31565 / C31520 + ((C31512 * C31575 + C17833) * ae) / C31514) /
            C31520 -
        ((C31512 * (C31575 / C31520 + (0 * ae) / C31514) + C32808) * be) /
            C31514;
    const double C2760 =
        C31565 / C31520 - ((C31512 * C31575 + C17833) * be) / C31514;
    const double C15057 =
        C31565 / C31520 + ((C31512 * C31575 + C17833) * ae) / C31514;
    const double C10544 = C2117 * C5428;
    const double C10537 = C1832 * C5428;
    const double C10531 = C614 * C5428;
    const double C10852 = C1834 * C5428;
    const double C10846 = C612 * C5428;
    const double C11010 = C2304 * C5428;
    const double C11004 = C2308 * C5428;
    const double C31566 = C31564 * be;
    const double C5427 = C31551 + (C31564 * ae) / C31514 + C31540;
    const double C2133 = C2132 + C2096;
    const double C17873 = C31680 * C244;
    const double C17867 = C31680 * C255;
    const double C17861 = C31680 * C257;
    const double C17855 = C31680 * C245;
    const double C17849 = C31680 * C259;
    const double C17843 = C31680 * C246;
    const double C18285 = C31680 * C249;
    const double C18279 = C31680 * C266;
    const double C18273 = C31680 * C250;
    const double C18267 = C31680 * C268;
    const double C18467 = C31680 * C697;
    const double C18461 = C31680 * C704;
    const double C18455 = C31680 * C698;
    const double C18449 = C31680 * C706;
    const double C20135 = C31680 * C1143;
    const double C20129 = C31680 * C1157;
    const double C20123 = C31680 * C1145;
    const double C20117 = C31680 * C1161;
    const double C20111 = C31680 * C702;
    const double C20105 = C31680 * C696;
    const double C20359 = C31680 * C1141;
    const double C20353 = C31680 * C1151;
    const double C20773 = C31680 * C1153;
    const double C20767 = C31680 * C1142;
    const double C31025 = C31680 * C2616;
    const double C31019 = C31680 * C2620;
    const double C31486 = C31680 * C1158;
    const double C31480 = C31680 * C1144;
    const double C6289 =
        (C31680 / C31520 + ((C31590 * C31694 + C17830) * ae) / C31514) /
            C31520 -
        ((C31590 * (C31694 / C31520 + (0 * ae) / C31514) + C32814) * be) /
            C31514;
    const double C7707 =
        C31680 / C31520 - ((C31590 * C31694 + C17830) * be) / C31514;
    const double C15875 =
        C31680 / C31520 + ((C31590 * C31694 + C17830) * ae) / C31514;
    const double C31683 = C31679 * be;
    const double C28235 = C28229 + C28230;
    const double C17080 = C17078 + C17079;
    const double C28228 = C28216 + C28217;
    const double C30100 = C30096 + C30097;
    const double C176 = C164 + C165;
    const double C495 = C479 + C480;
    const double C2807 = C2787 + C2788;
    const double C15104 = C15084 + C15085;
    const double C887 = C863 + C864;
    const double C3165 = C3141 + C3142;
    const double C5479 = C5455 + C5456;
    const double C15462 = C15438 + C15439;
    const double C17889 = C17865 + C17866;
    const double C607 = C591 + C592;
    const double C1836 = C1828 + C1829;
    const double C3331 = C3307 + C3308;
    const double C3919 = C3915 + C3916;
    const double C15628 = C15604 + C15605;
    const double C2644 = C2301 * C32793;
    const double C11013 = C2301 * C32793;
    const double C25118 = C2301 * C17833;
    const double C10191 = C10178 + C10179;
    const double C27917 = C27904 + C27905;
    const double C7598 = C7582 + C7583;
    const double C9778 = C9758 + C9759;
    const double C11893 = C11877 + C11878;
    const double C27504 = C27484 + C27485;
    const double C31492 = C31482 + C31483;
    const double C31913 = C31912 + C31906;
    const double C12885 = C12884 + C12874;
    const double C13813 = C13811 + C13803;
    const double C13812 = C13810 + C13799;
    const double C3780 = C1834 * C2760;
    const double C3773 = C612 * C2760;
    const double C4055 = C610 * C2760;
    const double C4193 = C2306 * C2760;
    const double C21090 = C1834 * C15057;
    const double C21083 = C612 * C15057;
    const double C21359 = C610 * C15057;
    const double C21497 = C2306 * C15057;
    const double C31567 = C31566 / C31514;
    const double C10546 = C2119 * C5427;
    const double C10535 = C2112 * C5427;
    const double C10529 = C2110 * C5427;
    const double C10850 = C1832 * C5427;
    const double C10844 = C614 * C5427;
    const double C11008 = C2647 * C5427;
    const double C11002 = C2645 * C5427;
    const double C2134 = C2133 + C2097;
    const double C17893 = C17873 + C17874;
    const double C17890 = C17867 + C17868;
    const double C17887 = C17861 + C17862;
    const double C17884 = C17855 + C17856;
    const double C17881 = C17849 + C17850;
    const double C17878 = C17843 + C17844;
    const double C18299 = C18285 + C18286;
    const double C18296 = C18279 + C18280;
    const double C18293 = C18273 + C18274;
    const double C18290 = C18267 + C18268;
    const double C18481 = C18467 + C18468;
    const double C18478 = C18461 + C18462;
    const double C18475 = C18455 + C18456;
    const double C18472 = C18449 + C18450;
    const double C20155 = C20135 + C20136;
    const double C20152 = C20129 + C20130;
    const double C20149 = C20123 + C20124;
    const double C20146 = C20117 + C20118;
    const double C20143 = C20111 + C20112;
    const double C20140 = C20105 + C20106;
    const double C20367 = C20359 + C20360;
    const double C20364 = C20353 + C20354;
    const double C20781 = C20773 + C20774;
    const double C20778 = C20767 + C20768;
    const double C31035 = C31025 + C31026;
    const double C31032 = C31019 + C31020;
    const double C31494 = C31486 + C31487;
    const double C31491 = C31480 + C31481;
    const double C7738 = C7707 * C250;
    const double C7730 = C7707 * C268;
    const double C7724 = C7707 * C266;
    const double C7716 = C7707 * C249;
    const double C8096 = C7707 * C1007;
    const double C8088 = C7707 * C1014;
    const double C8250 = C7707 * C1141;
    const double C8242 = C7707 * C1151;
    const double C9760 = C7707 * C1144;
    const double C9752 = C7707 * C1158;
    const double C9746 = C7707 * C1153;
    const double C9738 = C7707 * C1142;
    const double C10184 = C7707 * C1698;
    const double C10176 = C7707 * C1694;
    const double C15906 = C15875 * C250;
    const double C15898 = C15875 * C268;
    const double C15892 = C15875 * C266;
    const double C15884 = C15875 * C249;
    const double C16264 = C15875 * C1007;
    const double C16256 = C15875 * C1014;
    const double C16418 = C15875 * C1141;
    const double C16410 = C15875 * C1151;
    const double C27486 = C15875 * C1144;
    const double C27478 = C15875 * C1158;
    const double C27472 = C15875 * C1153;
    const double C27464 = C15875 * C1142;
    const double C27910 = C15875 * C1698;
    const double C27902 = C15875 * C1694;
    const double C31685 = C31683 / C31514;
    const double C17081 = C17080 + C17066;
    const double C30101 = C30100 + C30098;
    const double C4058 = C607 * C32808;
    const double C21362 = C607 * C32808;
    const double C2470 = C1836 * C32793;
    const double C3777 = C1836 * C32808;
    const double C10855 = C1836 * C32793;
    const double C21087 = C1836 * C32808;
    const double C24960 = C1836 * C17833;
    const double C4196 = C3919 * C32808;
    const double C21500 = C3919 * C32808;
    const double C282 =
        (3 * C31810 + ae * C31811 + C31758 * C31838 + ae * C31757 * C31913 +
         C31757 *
             (ae * C31913 +
              C31757 *
                  (3 * C31834 + ae * C31835 +
                   C31758 * (2 * C31830 + ae * C31831 +
                             C31758 * (C31826 + ae * C31758 * C31827 +
                                       C31758 * (ae * C31827 +
                                                 C31758 * std::pow(C31760, 8) *
                                                     bs[8] * C31768)))))) /
        C31519;
    const double C477 =
        (ae * (4 * C31886 + C31758 * C31913 +
               (3 * C31849 + C31758 * C31904) * ae) +
         C31757 *
             (4 * C31838 + ae * C31839 +
              C31758 *
                  (3 * C31834 + ae * C31835 +
                   C31758 * (2 * C31830 + ae * C31831 +
                             C31758 * (C31826 + ae * C31758 * C31827 +
                                       C31758 * (ae * C31827 +
                                                 C31758 * std::pow(C31760, 8) *
                                                     bs[8] * C31768)))))) /
        C31519;
    const double C715 =
        ((zP - zQ) *
         (ae * C31913 +
          C31757 * (3 * C31834 + ae * C31835 +
                    C31758 * (2 * C31830 + ae * C31831 +
                              C31758 * (C31826 + ae * C31758 * C31827 +
                                        C31758 * (ae * C31827 +
                                                  C31758 * std::pow(C31760, 8) *
                                                      bs[8] * C31768)))))) /
        C31519;
    const double C139 = (5 * (3 * C31870 + C31758 * C31886 + C32080 * ae) +
                         C31758 * (4 * C31886 + C31758 * C31913 + C32086 * ae) +
                         (4 * C32080 + C31758 * C32086) * ae) /
                        C31514;
    const double C272 =
        (3 * C31870 + C31758 * C31886 + C32080 * ae + C31913 * C31938) / C31514;
    const double C377 =
        (3 * C31870 + C31758 * C31886 + C32080 * ae + C31913 * C31975) / C31514;
    const double C476 =
        (C31757 * (4 * C31886 + C31758 * C31913 + C32086 * ae)) / C31514;
    const double C588 =
        (C31971 * (4 * C31886 + C31758 * C31913 + C32086 * ae)) / C31514;
    const double C710 = (C31971 * C31757 * C31913) / C31514;
    const double C31568 = C31551 - C31567;
    const double C10547 = C10535 + C10536;
    const double C7757 = C7738 + C7739;
    const double C7753 = C7730 + C7731;
    const double C7750 = C7724 + C7725;
    const double C7746 = C7716 + C7717;
    const double C8107 = C8096 + C8097;
    const double C8103 = C8088 + C8089;
    const double C8261 = C8250 + C8251;
    const double C8257 = C8242 + C8243;
    const double C9779 = C9760 + C9761;
    const double C9775 = C9752 + C9753;
    const double C9772 = C9746 + C9747;
    const double C9768 = C9738 + C9739;
    const double C10194 = C10184 + C10185;
    const double C10190 = C10176 + C10177;
    const double C15925 = C15906 + C15907;
    const double C15921 = C15898 + C15899;
    const double C15918 = C15892 + C15893;
    const double C15914 = C15884 + C15885;
    const double C16275 = C16264 + C16265;
    const double C16271 = C16256 + C16257;
    const double C16429 = C16418 + C16419;
    const double C16425 = C16410 + C16411;
    const double C27505 = C27486 + C27487;
    const double C27501 = C27478 + C27479;
    const double C27498 = C27472 + C27473;
    const double C27494 = C27464 + C27465;
    const double C27920 = C27910 + C27911;
    const double C27916 = C27902 + C27903;
    const double C31687 = C31673 - C31685;
    const double C17082 = C17081 + C17067;
    const double C30102 = C30101 + C30099;
    const double C31569 = C31568 + C31540;
    const double C10548 = C10547 + C10537;
    const double C31688 = C31687 + C31658;
    const double C24651 = C2119 * C31569;
    const double C24640 = C2112 * C31569;
    const double C24634 = C2110 * C31569;
    const double C24955 = C1832 * C31569;
    const double C24949 = C614 * C31569;
    const double C25113 = C2647 * C31569;
    const double C25107 = C2645 * C31569;
    const double C114 =
        (((((0 - (C31512 * C31513) / C31514) * ae) / C31514 -
           (0 * be) / C31526 + (2 * C31515) / C31514) /
              C31520 -
          ((C31512 * C31549 + 0) * be) / C31514 + C31532 - C31542) /
             C31520 +
         ((C31512 * C31563 + 0) * ae) / C31514) /
            C31520 -
        ((C31512 * (C31563 / C31520 +
                    ((C31512 * C31569 + C32435) * ae) / C31514 + C31565) +
          C32845) *
         be) /
            C31514 +
        C31569 / C31520 + ((C31512 * C31565 + C32443) * ae) / C31514 +
        2 * (C31540 / C31520 - (0 * be) / C31514);
    const double C115 =
        (C31563 / C31520 + ((C31512 * C31569 + C32435) * ae) / C31514 +
         C31565) /
            C31520 -
        ((C31512 * (C31569 / C31520 +
                    ((C31512 * C31565 + C32443) * ae) / C31514 + 2 * C31575) +
          C32838) *
         be) /
            C31514 +
        2 * (C31565 / C31520 + ((C31512 * C31575 + C17833) * ae) / C31514);
    const double C116 =
        (C31569 / C31520 + ((C31512 * C31565 + C32443) * ae) / C31514 +
         2 * C31575) /
            C31520 -
        ((C31512 *
              (C31565 / C31520 + ((C31512 * C31575 + C17833) * ae) / C31514) +
          C32825) *
         be) /
            C31514 +
        3 * (C31575 / C31520 + (0 * ae) / C31514);
    const double C2758 =
        C31563 / C31520 - ((C31512 * C31569 + C32435) * be) / C31514 + C31565;
    const double C2759 = C31569 / C31520 -
                         ((C31512 * C31565 + C32443) * be) / C31514 +
                         2 * C31575;
    const double C15055 =
        C31563 / C31520 + ((C31512 * C31569 + C32435) * ae) / C31514 + C31565;
    const double C15056 = C31569 / C31520 +
                          ((C31512 * C31565 + C32443) * ae) / C31514 +
                          2 * C31575;
    const double C10549 = C10548 + C10538;
    const double C17875 = C31688 * C122;
    const double C17869 = C31688 * C133;
    const double C17859 = C31688 * C131;
    const double C17853 = C31688 * C121;
    const double C17847 = C31688 * C129;
    const double C17841 = C31688 * C120;
    const double C18287 = C31688 * C246;
    const double C18281 = C31688 * C259;
    const double C18275 = C31688 * C245;
    const double C18269 = C31688 * C257;
    const double C18469 = C31688 * C351;
    const double C18463 = C31688 * C364;
    const double C18457 = C31688 * C350;
    const double C18451 = C31688 * C362;
    const double C20137 = C31688 * C353;
    const double C20131 = C31688 * C369;
    const double C20125 = C31688 * C354;
    const double C20119 = C31688 * C371;
    const double C20109 = C31688 * C366;
    const double C20103 = C31688 * C352;
    const double C20361 = C31688 * C697;
    const double C20355 = C31688 * C704;
    const double C20771 = C31688 * C702;
    const double C20765 = C31688 * C696;
    const double C31027 = C31688 * C2059;
    const double C31021 = C31688 * C2067;
    const double C31484 = C31688 * C1157;
    const double C31478 = C31688 * C1143;
    const double C6286 =
        (((((0 - (C31590 * C31641) / C31514) * ae) / C31514 -
           (0 * be) / C31526 + (2 * C31642) / C31514) /
              C31520 -
          ((C31590 * C31677 + 0) * be) / C31514 + C31651 - C31664) /
             C31520 +
         ((C31590 * C31686 + 0) * ae) / C31514) /
            C31520 -
        ((C31590 * (C31686 / C31520 +
                    ((C31590 * C31688 + C32573) * ae) / C31514 + C31680) +
          C32846) *
         be) /
            C31514 +
        C31688 / C31520 + ((C31590 * C31680 + C32580) * ae) / C31514 +
        2 * (C31658 / C31520 - (0 * be) / C31514);
    const double C6287 =
        (C31686 / C31520 + ((C31590 * C31688 + C32573) * ae) / C31514 +
         C31680) /
            C31520 -
        ((C31590 * (C31688 / C31520 +
                    ((C31590 * C31680 + C32580) * ae) / C31514 + 2 * C31694) +
          C32842) *
         be) /
            C31514 +
        2 * (C31680 / C31520 + ((C31590 * C31694 + C17830) * ae) / C31514);
    const double C6288 =
        (C31688 / C31520 + ((C31590 * C31680 + C32580) * ae) / C31514 +
         2 * C31694) /
            C31520 -
        ((C31590 *
              (C31680 / C31520 + ((C31590 * C31694 + C17830) * ae) / C31514) +
          C32832) *
         be) /
            C31514 +
        3 * (C31694 / C31520 + (0 * ae) / C31514);
    const double C7705 =
        C31686 / C31520 - ((C31590 * C31688 + C32573) * be) / C31514 + C31680;
    const double C7706 = C31688 / C31520 -
                         ((C31590 * C31680 + C32580) * be) / C31514 +
                         2 * C31694;
    const double C15873 =
        C31686 / C31520 + ((C31590 * C31688 + C32573) * ae) / C31514 + C31680;
    const double C15874 = C31688 / C31520 +
                          ((C31590 * C31680 + C32580) * ae) / C31514 +
                          2 * C31694;
    const double C24652 = C24640 + C24641;
    const double C3784 = C2112 * C2758;
    const double C3769 = C2110 * C2758;
    const double C4051 = C614 * C2758;
    const double C4189 = C2645 * C2758;
    const double C3782 = C1832 * C2759;
    const double C3771 = C614 * C2759;
    const double C4053 = C612 * C2759;
    const double C4191 = C2308 * C2759;
    const double C21094 = C2112 * C15055;
    const double C21079 = C2110 * C15055;
    const double C21355 = C614 * C15055;
    const double C21493 = C2645 * C15055;
    const double C21092 = C1832 * C15056;
    const double C21081 = C614 * C15056;
    const double C21357 = C612 * C15056;
    const double C21495 = C2308 * C15056;
    const double C10550 = C10549 + C10539;
    const double C17894 = C17875 + C17876;
    const double C17891 = C17869 + C17870;
    const double C17886 = C17859 + C17860;
    const double C17883 = C17853 + C17854;
    const double C17880 = C17847 + C17848;
    const double C17877 = C17841 + C17842;
    const double C18300 = C18287 + C18288;
    const double C18297 = C18281 + C18282;
    const double C18294 = C18275 + C18276;
    const double C18291 = C18269 + C18270;
    const double C18482 = C18469 + C18470;
    const double C18479 = C18463 + C18464;
    const double C18476 = C18457 + C18458;
    const double C18473 = C18451 + C18452;
    const double C20156 = C20137 + C20138;
    const double C20153 = C20131 + C20132;
    const double C20150 = C20125 + C20126;
    const double C20147 = C20119 + C20120;
    const double C20142 = C20109 + C20110;
    const double C20139 = C20103 + C20104;
    const double C20368 = C20361 + C20362;
    const double C20365 = C20355 + C20356;
    const double C20780 = C20771 + C20772;
    const double C20777 = C20765 + C20766;
    const double C31036 = C31027 + C31028;
    const double C31033 = C31021 + C31022;
    const double C31493 = C31484 + C31485;
    const double C31490 = C31478 + C31479;
    const double C7742 = C7705 * C121;
    const double C7734 = C7705 * C131;
    const double C7720 = C7705 * C129;
    const double C7712 = C7705 * C120;
    const double C8100 = C7705 * C246;
    const double C8092 = C7705 * C259;
    const double C8254 = C7705 * C351;
    const double C8246 = C7705 * C364;
    const double C9764 = C7705 * C353;
    const double C9756 = C7705 * C369;
    const double C9742 = C7705 * C366;
    const double C9734 = C7705 * C352;
    const double C10180 = C7705 * C702;
    const double C10172 = C7705 * C696;
    const double C7740 = C7706 * C245;
    const double C7732 = C7706 * C257;
    const double C7722 = C7706 * C259;
    const double C7714 = C7706 * C246;
    const double C8098 = C7706 * C249;
    const double C8090 = C7706 * C266;
    const double C8252 = C7706 * C697;
    const double C8244 = C7706 * C704;
    const double C9762 = C7706 * C1143;
    const double C9754 = C7706 * C1157;
    const double C9744 = C7706 * C702;
    const double C9736 = C7706 * C696;
    const double C10182 = C7706 * C1153;
    const double C10174 = C7706 * C1142;
    const double C15910 = C15873 * C121;
    const double C15902 = C15873 * C131;
    const double C15888 = C15873 * C129;
    const double C15880 = C15873 * C120;
    const double C16268 = C15873 * C246;
    const double C16260 = C15873 * C259;
    const double C16422 = C15873 * C351;
    const double C16414 = C15873 * C364;
    const double C27490 = C15873 * C353;
    const double C27482 = C15873 * C369;
    const double C27468 = C15873 * C366;
    const double C27460 = C15873 * C352;
    const double C27906 = C15873 * C702;
    const double C27898 = C15873 * C696;
    const double C15908 = C15874 * C245;
    const double C15900 = C15874 * C257;
    const double C15890 = C15874 * C259;
    const double C15882 = C15874 * C246;
    const double C16266 = C15874 * C249;
    const double C16258 = C15874 * C266;
    const double C16420 = C15874 * C697;
    const double C16412 = C15874 * C704;
    const double C27488 = C15874 * C1143;
    const double C27480 = C15874 * C1157;
    const double C27470 = C15874 * C702;
    const double C27462 = C15874 * C696;
    const double C27908 = C15874 * C1153;
    const double C27900 = C15874 * C1142;
    const double C24653 = C24652 + C24642;
    const double C10551 = C10550 + C10540;
    const double C17896 = C17886 + C17887;
    const double C17895 = C17883 + C17884;
    const double C20566 = C18481 + C18482;
    const double C20563 = C18482 + C18481;
    const double C20565 = C18478 + C18479;
    const double C20564 = C18479 + C18478;
    const double C31015 = C20156 + C20155;
    const double C31016 = C20153 + C20152;
    const double C7759 = C7742 + C7743;
    const double C7755 = C7734 + C7735;
    const double C7748 = C7720 + C7721;
    const double C7744 = C7712 + C7713;
    const double C8109 = C8100 + C8101;
    const double C8105 = C8092 + C8093;
    const double C8263 = C8254 + C8255;
    const double C8259 = C8246 + C8247;
    const double C9781 = C9764 + C9765;
    const double C9777 = C9756 + C9757;
    const double C9770 = C9742 + C9743;
    const double C9766 = C9734 + C9735;
    const double C10192 = C10180 + C10181;
    const double C10188 = C10172 + C10173;
    const double C7758 = C7740 + C7741;
    const double C7754 = C7732 + C7733;
    const double C7749 = C7722 + C7723;
    const double C7745 = C7714 + C7715;
    const double C8108 = C8098 + C8099;
    const double C8104 = C8090 + C8091;
    const double C8262 = C8252 + C8253;
    const double C8258 = C8244 + C8245;
    const double C9780 = C9762 + C9763;
    const double C9776 = C9754 + C9755;
    const double C9771 = C9744 + C9745;
    const double C9767 = C9736 + C9737;
    const double C10193 = C10182 + C10183;
    const double C10189 = C10174 + C10175;
    const double C15927 = C15910 + C15911;
    const double C15923 = C15902 + C15903;
    const double C15916 = C15888 + C15889;
    const double C15912 = C15880 + C15881;
    const double C16277 = C16268 + C16269;
    const double C16273 = C16260 + C16261;
    const double C16431 = C16422 + C16423;
    const double C16427 = C16414 + C16415;
    const double C27507 = C27490 + C27491;
    const double C27503 = C27482 + C27483;
    const double C27496 = C27468 + C27469;
    const double C27492 = C27460 + C27461;
    const double C27918 = C27906 + C27907;
    const double C27914 = C27898 + C27899;
    const double C15926 = C15908 + C15909;
    const double C15922 = C15900 + C15901;
    const double C15917 = C15890 + C15891;
    const double C15913 = C15882 + C15883;
    const double C16276 = C16266 + C16267;
    const double C16272 = C16258 + C16259;
    const double C16430 = C16420 + C16421;
    const double C16426 = C16412 + C16413;
    const double C27506 = C27488 + C27489;
    const double C27502 = C27480 + C27481;
    const double C27497 = C27470 + C27471;
    const double C27493 = C27462 + C27463;
    const double C27919 = C27908 + C27909;
    const double C27915 = C27900 + C27901;
    const double C24654 = C24653 + C24643;
    const double C17898 = C17896 + C17888;
    const double C17897 = C17895 + C17885;
    const double C20570 = C18480 + C20566;
    const double C20567 = C20563 + C18480;
    const double C20569 = C18477 + C20565;
    const double C20568 = C20564 + C18477;
    const double C31029 = C31015 + C20154;
    const double C31030 = C31016 + C20151;
    const double C24655 = C24654 + C24644;
    const double C31037 = C31029 * C6291;
    const double C31038 = C31030 * C32430;
    const double C24656 = C24655 + C24645;
    const double C31039 = C31037 + C31038;
    d2ee[0] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                ((((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                    C32580 * C262 + C31694 * C248 + C17830 * C263) *
                       C31569 +
                   (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                    C32580 * C277 + C31694 * C264 + C17830 * C278) *
                       C32435 +
                   (C17877 + C17878 + C17879) * C31565 +
                   (C17880 + C17881 + C17882) * C32443 + C17897 * C31575 +
                   C17898 * C17833) *
                      C32532 * C32491 * C470 -
                  ((C18289 + C18290 + C18291) * C17833 +
                   (C18292 + C18293 + C18294) * C31575 +
                   (C18295 + C18296 + C18297) * C32443 +
                   (C18298 + C18299 + C18300) * C31565 +
                   (C31694 * C1016 + C17830 * C1026 + C31680 * C264 +
                    C32580 * C278 + C31688 * C261 + C32573 * C277) *
                       C32435 +
                   (C31694 * C1008 + C17830 * C1017 + C31680 * C248 +
                    C32580 * C263 + C31688 * C247 + C32573 * C262) *
                       C31569) *
                      C32532 * C32491 * C471) *
                     C472 +
                 (((C18300 + C18299 + C18298) * C31569 +
                   (C18297 + C18296 + C18295) * C32435 +
                   (C18294 + C18293 + C18292) * C31565 +
                   (C18291 + C18290 + C18289) * C32443 +
                   (C31688 * C244 + C32573 * C256 + C31680 * C251 +
                    C32580 * C269 + C31694 * C1322 + C17830 * C1323) *
                       C31575 +
                   (C31688 * C255 + C32573 * C274 + C31680 * C270 +
                    C32580 * C281 + C31694 * C1324 + C17830 * C1325) *
                       C17833) *
                      C32532 * C32491 * C471 -
                  ((C17889 + C17890 + C17891) * C17833 +
                   (C17892 + C17893 + C17894) * C31575 +
                   (C17888 + C17887 + C17886) * C32443 +
                   (C17885 + C17884 + C17883) * C31565 +
                   (C17882 + C17881 + C17880) * C32435 +
                   (C17879 + C17878 + C17877) * C31569) *
                      C32532 * C32491 * C470) *
                     C473)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                ((((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                    C32580 * C262 + C31694 * C248 + C17830 * C263) *
                       C31569 +
                   (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                    C32580 * C277 + C31694 * C264 + C17830 * C278) *
                       C32435 +
                   (C17877 + C17878 + C17879) * C31565 +
                   (C17880 + C17881 + C17882) * C32443 + C17897 * C31575 +
                   C17898 * C17833) *
                      C32532 * C584 -
                  ((C18471 + C18472 + C18473) * C17833 +
                   (C18474 + C18475 + C18476) * C31575 +
                   (C18477 + C18478 + C18479) * C32443 +
                   (C18480 + C18481 + C18482) * C31565 +
                   (C31694 * C1153 + C17830 * C1169 + C31680 * C702 +
                    C32580 * C711 + C31688 * C366 + C32573 * C382) *
                       C32435 +
                   (C31694 * C1142 + C17830 * C1154 + C31680 * C696 +
                    C32580 * C701 + C31688 * C352 + C32573 * C367) *
                       C31569) *
                      C32532 * C585) *
                     C470 +
                 (((C31688 * C696 + C32573 * C701 + C31680 * C1142 +
                    C32580 * C1154 + C31694 * C1694 + C17830 * C1697) *
                       C31569 +
                   (C31688 * C702 + C32573 * C711 + C31680 * C1153 +
                    C32580 * C1169 + C31694 * C1698 + C17830 * C1703) *
                       C32435 +
                   (C31688 * C697 + C32573 * C703 + C31680 * C1141 +
                    C32580 * C1152 + C31694 * C1695 + C17830 * C1699) *
                       C31565 +
                   (C31688 * C704 + C32573 * C712 + C31680 * C1151 +
                    C32580 * C1168 + C31694 * C1700 + C17830 * C1704) *
                       C32443 +
                   (C31688 * C698 + C32573 * C705 + C31680 * C1140 +
                    C32580 * C1150 + C31694 * C1696 + C17830 * C1701) *
                       C31575 +
                   (C31688 * C706 + C32573 * C713 + C31680 * C1149 +
                    C32580 * C1167 + C31694 * C1702 + C17830 * C1705) *
                       C17833) *
                      C32532 * C585 -
                  ((C18289 + C18290 + C18291) * C17833 +
                   (C18292 + C18293 + C18294) * C31575 +
                   (C18295 + C18296 + C18297) * C32443 +
                   (C18298 + C18299 + C18300) * C31565 +
                   (C31694 * C1016 + C17830 * C1026 + C31680 * C264 +
                    C32580 * C278 + C31688 * C261 + C32573 * C277) *
                       C32435 +
                   (C31694 * C1008 + C17830 * C1017 + C31680 * C248 +
                    C32580 * C263 + C31688 * C247 + C32573 * C262) *
                       C31569) *
                      C32532 * C584) *
                     C471) *
                C32465) /
               (p * q * std::sqrt(p + q));
    d2ee[2] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                   C32580 * C262 + C31694 * C248 + C17830 * C263) *
                      C31569 +
                  (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                   C32580 * C277 + C31694 * C264 + C17830 * C278) *
                      C32435 +
                  (C17877 + C17878 + C17879) * C31565 +
                  (C17880 + C17881 + C17882) * C32443 + C17897 * C31575 +
                  C17898 * C17833) *
                     C32532 * C32491 * C239 -
                 ((C31694 * C1012 + C17830 * C1024 + C31680 * C268 +
                   C32580 * C280 + C31688 * C257 + C32573 * C275) *
                      C17833 +
                  (C31694 * C1006 + C17830 * C1013 + C31680 * C250 +
                   C32580 * C267 + C31688 * C245 + C32573 * C258) *
                      C31575 +
                  (C31694 * C1014 + C17830 * C1025 + C31680 * C266 +
                   C32580 * C279 + C31688 * C259 + C32573 * C276) *
                      C32443 +
                  (C31694 * C1007 + C17830 * C1015 + C31680 * C249 +
                   C32580 * C265 + C31688 * C246 + C32573 * C260) *
                      C31565 +
                  (C31694 * C1016 + C17830 * C1026 + C31680 * C264 +
                   C32580 * C278 + C31688 * C261 + C32573 * C277) *
                      C32435 +
                  (C31694 * C1008 + C17830 * C1017 + C31680 * C248 +
                   C32580 * C263 + C31688 * C247 + C32573 * C262) *
                      C31569) *
                     C32532 * C32491 * C240 +
                 ((C31688 * C248 + C32573 * C263 + C31680 * C1008 +
                   C32580 * C1017 + C31694 * C1009 + C17830 * C1018) *
                      C31569 +
                  (C31688 * C264 + C32573 * C278 + C31680 * C1016 +
                   C32580 * C1026 + C31694 * C1019 + C17830 * C1027) *
                      C32435 +
                  (C31688 * C249 + C32573 * C265 + C31680 * C1007 +
                   C32580 * C1015 + C31694 * C1010 + C17830 * C1020) *
                      C31565 +
                  (C31688 * C266 + C32573 * C279 + C31680 * C1014 +
                   C32580 * C1025 + C31694 * C1021 + C17830 * C1028) *
                      C32443 +
                  (C31688 * C250 + C32573 * C267 + C31680 * C1006 +
                   C32580 * C1013 + C31694 * C1011 + C17830 * C1022) *
                      C31575 +
                  (C31688 * C268 + C32573 * C280 + C31680 * C1012 +
                   C32580 * C1024 + C31694 * C1023 + C17830 * C1029) *
                      C17833) *
                     C32532 * C32491 * C241) *
                C32465) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                   C32580 * C262 + C31694 * C248 + C17830 * C263) *
                      C31569 +
                  (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                   C32580 * C277 + C31694 * C264 + C17830 * C278) *
                      C32435 +
                  (C17877 + C17878 + C17879) * C31565 +
                  (C17880 + C17881 + C17882) * C32443 + C17897 * C31575 +
                  C17898 * C17833) *
                     C32532 * C32491 * C32477 * C110 -
                 ((C17889 + C17890 + C17891) * C17833 +
                  (C17892 + C17893 + C17894) * C31575 +
                  (C17888 + C17887 + C17886) * C32443 +
                  (C17885 + C17884 + C17883) * C31565 +
                  (C17882 + C17881 + C17880) * C32435 +
                  (C17879 + C17878 + C17877) * C31569) *
                     C32532 * C32491 * C32477 * C111 +
                 (C17897 * C31569 + C17898 * C32435 +
                  (C17894 + C17893 + C17892) * C31565 +
                  (C17891 + C17890 + C17889) * C32443 +
                  (C31688 * C123 + C32573 * C134 + C31680 * C243 +
                   C32580 * C254 + C31694 * C252 + C17830 * C271) *
                      C31575 +
                  (C31688 * C135 + C32573 * C144 + C31680 * C253 +
                   C32580 * C273 + C31694 * C272 + C17830 * C282) *
                      C17833) *
                     C32532 * C32491 * C32477 * C112)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                   C32580 * C262 + C31694 * C248 + C17830 * C263) *
                      C31569 +
                  (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                   C32580 * C277 + C31694 * C264 + C17830 * C278) *
                      C32435 +
                  (C17877 + C17878 + C17879) * C31565 +
                  (C17880 + C17881 + C17882) * C32443 + C17897 * C31575 +
                  C17898 * C17833) *
                     C32532 * C345 -
                 ((C31694 * C1149 + C17830 * C1167 + C31680 * C706 +
                   C32580 * C713 + C31688 * C362 + C32573 * C380) *
                      C17833 +
                  (C31694 * C1140 + C17830 * C1150 + C31680 * C698 +
                   C32580 * C705 + C31688 * C350 + C32573 * C363) *
                      C31575 +
                  (C31694 * C1151 + C17830 * C1168 + C31680 * C704 +
                   C32580 * C712 + C31688 * C364 + C32573 * C381) *
                      C32443 +
                  (C31694 * C1141 + C17830 * C1152 + C31680 * C697 +
                   C32580 * C703 + C31688 * C351 + C32573 * C365) *
                      C31565 +
                  (C31694 * C1153 + C17830 * C1169 + C31680 * C702 +
                   C32580 * C711 + C31688 * C366 + C32573 * C382) *
                      C32435 +
                  (C31694 * C1142 + C17830 * C1154 + C31680 * C696 +
                   C32580 * C701 + C31688 * C352 + C32573 * C367) *
                      C31569) *
                     C32532 * C346 +
                 ((C31688 * C353 + C32573 * C368 + C31680 * C1143 +
                   C32580 * C1155 + C31694 * C1144 + C17830 * C1156) *
                      C31569 +
                  (C31688 * C369 + C32573 * C383 + C31680 * C1157 +
                   C32580 * C1170 + C31694 * C1158 + C17830 * C1171) *
                      C32435 +
                  (C31688 * C354 + C32573 * C370 + C31680 * C1145 +
                   C32580 * C1159 + C31694 * C1146 + C17830 * C1160) *
                      C31565 +
                  (C31688 * C371 + C32573 * C384 + C31680 * C1161 +
                   C32580 * C1172 + C31694 * C1162 + C17830 * C1173) *
                      C32443 +
                  (C31688 * C355 + C32573 * C372 + C31680 * C1147 +
                   C32580 * C1163 + C31694 * C1148 + C17830 * C1164) *
                      C31575 +
                  (C31688 * C373 + C32573 * C385 + C31680 * C1165 +
                   C32580 * C1174 + C31694 * C1166 + C17830 * C1175) *
                      C17833) *
                     C32532 * C347) *
                C32477 * C32465) /
                   (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                ((((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                    C32580 * C262 + C31694 * C248 + C17830 * C263) *
                       C31569 +
                   (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                    C32580 * C277 + C31694 * C264 + C17830 * C278) *
                       C32435 +
                   (C17877 + C17878 + C17879) * C31565 +
                   (C17880 + C17881 + C17882) * C32443 + C17897 * C31575 +
                   C17898 * C17833) *
                      C32532 * C584 -
                  ((C18471 + C18472 + C18473) * C17833 +
                   (C18474 + C18475 + C18476) * C31575 +
                   (C18477 + C18478 + C18479) * C32443 +
                   (C18480 + C18481 + C18482) * C31565 +
                   (C31694 * C1153 + C17830 * C1169 + C31680 * C702 +
                    C32580 * C711 + C31688 * C366 + C32573 * C382) *
                       C32435 +
                   (C31694 * C1142 + C17830 * C1154 + C31680 * C696 +
                    C32580 * C701 + C31688 * C352 + C32573 * C367) *
                       C31569) *
                      C32532 * C585) *
                     C32477 * C472 +
                 (((C18482 + C18481 + C18480) * C31569 +
                   (C18479 + C18478 + C18477) * C32435 +
                   (C18476 + C18475 + C18474) * C31565 +
                   (C18473 + C18472 + C18471) * C32443 +
                   (C31688 * C349 + C32573 * C361 + C31680 * C699 +
                    C32580 * C707 + C31694 * C1508 + C17830 * C1509) *
                       C31575 +
                   (C31688 * C360 + C32573 * C379 + C31680 * C708 +
                    C32580 * C714 + C31694 * C1510 + C17830 * C1511) *
                       C17833) *
                      C32532 * C585 -
                  ((C17889 + C17890 + C17891) * C17833 +
                   (C17892 + C17893 + C17894) * C31575 +
                   (C17888 + C17887 + C17886) * C32443 +
                   (C17885 + C17884 + C17883) * C31565 +
                   (C17882 + C17881 + C17880) * C32435 +
                   (C17879 + C17878 + C17877) * C31569) *
                      C32532 * C584) *
                     C32477 * C473)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                (((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                   C32580 * C262 + C31694 * C248 + C17830 * C263) *
                      C31569 +
                  (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                   C32580 * C277 + C31694 * C264 + C17830 * C278) *
                      C32435 +
                  (C17877 + C17878 + C17879) * C31565 +
                  (C17880 + C17881 + C17882) * C32443 + C17897 * C31575 +
                  C17898 * C17833) *
                     C32532 * C32491 * C32477 * C110 -
                 ((C17889 + C17890 + C17891) * C17833 +
                  (C17892 + C17893 + C17894) * C31575 +
                  (C17888 + C17887 + C17886) * C32443 +
                  (C17885 + C17884 + C17883) * C31565 +
                  (C17882 + C17881 + C17880) * C32435 +
                  (C17879 + C17878 + C17877) * C31569) *
                     C32532 * C32491 * C32477 * C111 +
                 (C17897 * C31569 + C17898 * C32435 +
                  (C17894 + C17893 + C17892) * C31565 +
                  (C17891 + C17890 + C17889) * C32443 +
                  (C31688 * C123 + C32573 * C134 + C31680 * C243 +
                   C32580 * C254 + C31694 * C252 + C17830 * C271) *
                      C31575 +
                  (C31688 * C135 + C32573 * C144 + C31680 * C253 +
                   C32580 * C273 + C31694 * C272 + C17830 * C282) *
                      C17833) *
                     C32532 * C32491 * C32477 * C112)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                (((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                   C32580 * C262 + C31694 * C248 + C17830 * C263) *
                      C31569 +
                  (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                   C32580 * C277 + C31694 * C264 + C17830 * C278) *
                      C32435 +
                  (C17877 + C17878 + C17879) * C31565 +
                  (C17880 + C17881 + C17882) * C32443 + C17897 * C31575 +
                  C17898 * C17833) *
                     C32532 * C32491 * C239 -
                 ((C31694 * C1012 + C17830 * C1024 + C31680 * C268 +
                   C32580 * C280 + C31688 * C257 + C32573 * C275) *
                      C17833 +
                  (C31694 * C1006 + C17830 * C1013 + C31680 * C250 +
                   C32580 * C267 + C31688 * C245 + C32573 * C258) *
                      C31575 +
                  (C31694 * C1014 + C17830 * C1025 + C31680 * C266 +
                   C32580 * C279 + C31688 * C259 + C32573 * C276) *
                      C32443 +
                  (C31694 * C1007 + C17830 * C1015 + C31680 * C249 +
                   C32580 * C265 + C31688 * C246 + C32573 * C260) *
                      C31565 +
                  (C31694 * C1016 + C17830 * C1026 + C31680 * C264 +
                   C32580 * C278 + C31688 * C261 + C32573 * C277) *
                      C32435 +
                  (C31694 * C1008 + C17830 * C1017 + C31680 * C248 +
                   C32580 * C263 + C31688 * C247 + C32573 * C262) *
                      C31569) *
                     C32532 * C32491 * C240 +
                 ((C31688 * C248 + C32573 * C263 + C31680 * C1008 +
                   C32580 * C1017 + C31694 * C1009 + C17830 * C1018) *
                      C31569 +
                  (C31688 * C264 + C32573 * C278 + C31680 * C1016 +
                   C32580 * C1026 + C31694 * C1019 + C17830 * C1027) *
                      C32435 +
                  (C31688 * C249 + C32573 * C265 + C31680 * C1007 +
                   C32580 * C1015 + C31694 * C1010 + C17830 * C1020) *
                      C31565 +
                  (C31688 * C266 + C32573 * C279 + C31680 * C1014 +
                   C32580 * C1025 + C31694 * C1021 + C17830 * C1028) *
                      C32443 +
                  (C31688 * C250 + C32573 * C267 + C31680 * C1006 +
                   C32580 * C1013 + C31694 * C1011 + C17830 * C1022) *
                      C31575 +
                  (C31688 * C268 + C32573 * C280 + C31680 * C1012 +
                   C32580 * C1024 + C31694 * C1023 + C17830 * C1029) *
                      C17833) *
                     C32532 * C32491 * C241) *
                C32465) /
                   (p * q * std::sqrt(p + q));
    d2ee[5] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                (((((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                     C32580 * C262 + C31694 * C248 + C17830 * C263) *
                        C15877 +
                    (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                     C32580 * C277 + C31694 * C264 + C17830 * C278) *
                        C15871 +
                    (C17877 + C17878 + C17879) * C15878 +
                    (C17880 + C17881 + C17882) * C32440) *
                       C32774 +
                   ((C20139 + C20140 + C20141) * C15877 +
                    (C20142 + C20143 + C20144) * C15871 +
                    (C18482 + C18481 + C18480) * C15878 +
                    (C18479 + C18478 + C18477) * C32440) *
                       C32619) *
                      C32491 * C470 -
                  (((C20363 + C20364 + C20365) * C32440 +
                    (C20366 + C20367 + C20368) * C15878 +
                    (C31694 * C1698 + C17830 * C1703 + C31680 * C1153 +
                     C32580 * C1169 + C31688 * C702 + C32573 * C711) *
                        C15871 +
                    (C31694 * C1694 + C17830 * C1697 + C31680 * C1142 +
                     C32580 * C1154 + C31688 * C696 + C32573 * C701) *
                        C15877) *
                       C32619 +
                   ((C18295 + C18296 + C18297) * C32440 +
                    (C18298 + C18299 + C18300) * C15878 +
                    (C31694 * C1016 + C17830 * C1026 + C31680 * C264 +
                     C32580 * C278 + C31688 * C261 + C32573 * C277) *
                        C15871 +
                    (C31694 * C1008 + C17830 * C1017 + C31680 * C248 +
                     C32580 * C263 + C31688 * C247 + C32573 * C262) *
                        C15877) *
                       C32774) *
                      C32491 * C471) *
                     C472 +
                 ((((C18300 + C18299 + C18298) * C15877 +
                    (C18297 + C18296 + C18295) * C15871 +
                    (C18294 + C18293 + C18292) * C15878 +
                    (C18291 + C18290 + C18289) * C32440) *
                       C32774 +
                   ((C20368 + C20367 + C20366) * C15877 +
                    (C20365 + C20364 + C20363) * C15871 +
                    (C31688 * C698 + C32573 * C705 + C31680 * C1140 +
                     C32580 * C1150 + C31694 * C1696 + C17830 * C1701) *
                        C15878 +
                    (C31688 * C706 + C32573 * C713 + C31680 * C1149 +
                     C32580 * C1167 + C31694 * C1702 + C17830 * C1705) *
                        C32440) *
                       C32619) *
                      C32491 * C471 -
                  (((C18471 + C18472 + C18473) * C32440 +
                    (C18474 + C18475 + C18476) * C15878 +
                    (C18477 + C18478 + C18479) * C15871 +
                    (C18480 + C18481 + C18482) * C15877) *
                       C32619 +
                   ((C17888 + C17887 + C17886) * C32440 +
                    (C17885 + C17884 + C17883) * C15878 +
                    (C17882 + C17881 + C17880) * C15871 +
                    (C17879 + C17878 + C17877) * C15877) *
                       C32774) *
                      C32491 * C470) *
                     C473)) /
               (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                (((((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                     C32580 * C262 + C31694 * C248 + C17830 * C263) *
                        C15877 +
                    (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                     C32580 * C277 + C31694 * C264 + C17830 * C278) *
                        C15871 +
                    (C17877 + C17878 + C17879) * C15878 +
                    (C17880 + C17881 + C17882) * C32440) *
                       C32774 +
                   ((C20139 + C20140 + C20141) * C15877 +
                    (C20142 + C20143 + C20144) * C15871 + C20567 * C15878 +
                    C20568 * C32440) *
                       C32619) *
                      C584 -
                  (((C20145 + C20146 + C20147) * C32440 +
                    (C20148 + C20149 + C20150) * C15878 +
                    (C20151 + C20152 + C20153) * C15871 +
                    (C20154 + C20155 + C20156) * C15877) *
                       C32619 +
                   (C20569 * C32440 + C20570 * C15878 +
                    (C20144 + C20143 + C20142) * C15871 +
                    (C20141 + C20140 + C20139) * C15877) *
                       C32774) *
                      C585) *
                     C470 +
                 ((((C20777 + C20778 + C20779) * C15877 +
                    (C20780 + C20781 + C20782) * C15871 +
                    (C20368 + C20367 + C20366) * C15878 +
                    (C20365 + C20364 + C20363) * C32440) *
                       C32774 +
                   ((C31688 * C1143 + C32573 * C1155 + C31680 * C1144 +
                     C32580 * C1156 + C31694 * C6425 + C17830 * C6429) *
                        C15877 +
                    (C31688 * C1157 + C32573 * C1170 + C31680 * C1158 +
                     C32580 * C1171 + C31694 * C6431 + C17830 * C6434) *
                        C15871 +
                    (C31688 * C1145 + C32573 * C1159 + C31680 * C1146 +
                     C32580 * C1160 + C31694 * C7243 + C17830 * C7244) *
                        C15878 +
                    (C31688 * C1161 + C32573 * C1172 + C31680 * C1162 +
                     C32580 * C1173 + C31694 * C7245 + C17830 * C7246) *
                        C32440) *
                       C32619) *
                      C585 -
                  (((C20363 + C20364 + C20365) * C32440 +
                    (C20366 + C20367 + C20368) * C15878 +
                    (C20782 + C20781 + C20780) * C15871 +
                    (C20779 + C20778 + C20777) * C15877) *
                       C32619 +
                   ((C18295 + C18296 + C18297) * C32440 +
                    (C18298 + C18299 + C18300) * C15878 +
                    (C31694 * C1016 + C17830 * C1026 + C31680 * C264 +
                     C32580 * C278 + C31688 * C261 + C32573 * C277) *
                        C15871 +
                    (C31694 * C1008 + C17830 * C1017 + C31680 * C248 +
                     C32580 * C263 + C31688 * C247 + C32573 * C262) *
                        C15877) *
                       C32774) *
                      C584) *
                     C471) *
                C32465) /
               (p * q * std::sqrt(p + q));
    d2ee[7] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                    C32580 * C262 + C31694 * C248 + C17830 * C263) *
                       C15877 +
                   (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                    C32580 * C277 + C31694 * C264 + C17830 * C278) *
                       C15871 +
                   (C17877 + C17878 + C17879) * C15878 +
                   (C17880 + C17881 + C17882) * C32440) *
                      C32774 +
                  ((C31688 * C352 + C32573 * C367 + C31680 * C696 +
                    C32580 * C701 + C31694 * C1142 + C17830 * C1154) *
                       C15877 +
                   (C31688 * C366 + C32573 * C382 + C31680 * C702 +
                    C32580 * C711 + C31694 * C1153 + C17830 * C1169) *
                       C15871 +
                   (C18482 + C18481 + C18480) * C15878 +
                   (C18479 + C18478 + C18477) * C32440) *
                      C32619) *
                     C32491 * C239 -
                 (((C31694 * C1700 + C17830 * C1704 + C31680 * C1151 +
                    C32580 * C1168 + C31688 * C704 + C32573 * C712) *
                       C32440 +
                   (C31694 * C1695 + C17830 * C1699 + C31680 * C1141 +
                    C32580 * C1152 + C31688 * C697 + C32573 * C703) *
                       C15878 +
                   (C31694 * C1698 + C17830 * C1703 + C31680 * C1153 +
                    C32580 * C1169 + C31688 * C702 + C32573 * C711) *
                       C15871 +
                   (C31694 * C1694 + C17830 * C1697 + C31680 * C1142 +
                    C32580 * C1154 + C31688 * C696 + C32573 * C701) *
                       C15877) *
                      C32619 +
                  ((C18295 + C18296 + C18297) * C32440 +
                   (C18298 + C18299 + C18300) * C15878 +
                   (C31694 * C1016 + C17830 * C1026 + C31680 * C264 +
                    C32580 * C278 + C31688 * C261 + C32573 * C277) *
                       C15871 +
                   (C31694 * C1008 + C17830 * C1017 + C31680 * C248 +
                    C32580 * C263 + C31688 * C247 + C32573 * C262) *
                       C15877) *
                      C32774) *
                     C32491 * C240 +
                 (((C31688 * C248 + C32573 * C263 + C31680 * C1008 +
                    C32580 * C1017 + C31694 * C1009 + C17830 * C1018) *
                       C15877 +
                   (C31688 * C264 + C32573 * C278 + C31680 * C1016 +
                    C32580 * C1026 + C31694 * C1019 + C17830 * C1027) *
                       C15871 +
                   (C31688 * C249 + C32573 * C265 + C31680 * C1007 +
                    C32580 * C1015 + C31694 * C1010 + C17830 * C1020) *
                       C15878 +
                   (C31688 * C266 + C32573 * C279 + C31680 * C1014 +
                    C32580 * C1025 + C31694 * C1021 + C17830 * C1028) *
                       C32440) *
                      C32774 +
                  ((C31688 * C1142 + C32573 * C1154 + C31680 * C1694 +
                    C32580 * C1697 + C31694 * C6424 + C17830 * C6428) *
                       C15877 +
                   (C31688 * C1153 + C32573 * C1169 + C31680 * C1698 +
                    C32580 * C1703 + C31694 * C6427 + C17830 * C6433) *
                       C15871 +
                   (C31688 * C1141 + C32573 * C1152 + C31680 * C1695 +
                    C32580 * C1699 + C31694 * C6604 + C17830 * C6605) *
                       C15878 +
                   (C31688 * C1151 + C32573 * C1168 + C31680 * C1700 +
                    C32580 * C1704 + C31694 * C6606 + C17830 * C6607) *
                       C32440) *
                      C32619) *
                     C32491 * C241) *
                C32465) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                    C32580 * C262 + C31694 * C248 + C17830 * C263) *
                       C15877 +
                   (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                    C32580 * C277 + C31694 * C264 + C17830 * C278) *
                       C15871 +
                   (C17877 + C17878 + C17879) * C15878 +
                   (C17880 + C17881 + C17882) * C32440) *
                      C32774 +
                  ((C31688 * C352 + C32573 * C367 + C31680 * C696 +
                    C32580 * C701 + C31694 * C1142 + C17830 * C1154) *
                       C15877 +
                   (C31688 * C366 + C32573 * C382 + C31680 * C702 +
                    C32580 * C711 + C31694 * C1153 + C17830 * C1169) *
                       C15871 +
                   (C18482 + C18481 + C18480) * C15878 +
                   (C18479 + C18478 + C18477) * C32440) *
                      C32619) *
                     C32491 * C32477 * C110 -
                 (((C18471 + C18472 + C18473) * C32440 +
                   (C18474 + C18475 + C18476) * C15878 +
                   (C18477 + C18478 + C18479) * C15871 +
                   (C18480 + C18481 + C18482) * C15877) *
                      C32619 +
                  ((C17888 + C17887 + C17886) * C32440 +
                   (C17885 + C17884 + C17883) * C15878 +
                   (C17882 + C17881 + C17880) * C15871 +
                   (C17879 + C17878 + C17877) * C15877) *
                      C32774) *
                     C32491 * C32477 * C111 +
                 ((C17897 * C15877 + C17898 * C15871 +
                   (C17894 + C17893 + C17892) * C15878 +
                   (C17891 + C17890 + C17889) * C32440) *
                      C32774 +
                  ((C18476 + C18475 + C18474) * C15877 +
                   (C18473 + C18472 + C18471) * C15871 +
                   (C31688 * C349 + C32573 * C361 + C31680 * C699 +
                    C32580 * C707 + C31694 * C1508 + C17830 * C1509) *
                       C15878 +
                   (C31688 * C360 + C32573 * C379 + C31680 * C708 +
                    C32580 * C714 + C31694 * C1510 + C17830 * C1511) *
                       C32440) *
                      C32619) *
                     C32491 * C32477 * C112)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                    C32580 * C262 + C31694 * C248 + C17830 * C263) *
                       C15877 +
                   (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                    C32580 * C277 + C31694 * C264 + C17830 * C278) *
                       C15871 +
                   (C17877 + C17878 + C17879) * C15878 +
                   (C17880 + C17881 + C17882) * C32440) *
                      C32774 +
                  ((C20139 + C20140 + C20141) * C15877 +
                   (C20142 + C20143 + C20144) * C15871 +
                   (C18482 + C18481 + C18480) * C15878 +
                   (C18479 + C18478 + C18477) * C32440) *
                      C32619) *
                     C345 -
                 (((C20145 + C20146 + C20147) * C32440 +
                   (C20148 + C20149 + C20150) * C15878 +
                   (C20151 + C20152 + C20153) * C15871 +
                   (C20154 + C20155 + C20156) * C15877) *
                      C32619 +
                  ((C18477 + C18478 + C18479) * C32440 +
                   (C18480 + C18481 + C18482) * C15878 +
                   (C20144 + C20143 + C20142) * C15871 +
                   (C20141 + C20140 + C20139) * C15877) *
                      C32774) *
                     C346 +
                 (((C20156 + C20155 + C20154) * C15877 +
                   (C20153 + C20152 + C20151) * C15871 +
                   (C20150 + C20149 + C20148) * C15878 +
                   (C20147 + C20146 + C20145) * C32440) *
                      C32774 +
                  ((C31688 * C2059 + C32573 * C2068 + C31680 * C2616 +
                    C32580 * C2619 + C31694 * C7024 + C17830 * C7028) *
                       C15877 +
                   (C31688 * C2067 + C32573 * C2077 + C31680 * C2620 +
                    C32580 * C2625 + C31694 * C7027 + C17830 * C7033) *
                       C15871 +
                   (C31688 * C2058 + C32573 * C2066 + C31680 * C2617 +
                    C32580 * C2621 + C31694 * C7393 + C17830 * C7394) *
                       C15878 +
                   (C31688 * C2065 + C32573 * C2076 + C31680 * C2622 +
                    C32580 * C2626 + C31694 * C7395 + C17830 * C7396) *
                       C32440) *
                      C32619) *
                     C347) *
                C32477 * C32465) /
                   (p * q * std::sqrt(p + q));
    d2ee[8] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                (((((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                     C32580 * C262 + C31694 * C248 + C17830 * C263) *
                        C15877 +
                    (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                     C32580 * C277 + C31694 * C264 + C17830 * C278) *
                        C15871 +
                    (C17877 + C17878 + C17879) * C15878 +
                    (C17880 + C17881 + C17882) * C32440) *
                       C32774 +
                   ((C20139 + C20140 + C20141) * C15877 +
                    (C20142 + C20143 + C20144) * C15871 + C20567 * C15878 +
                    C20568 * C32440) *
                       C32619) *
                      C584 -
                  (((C20145 + C20146 + C20147) * C32440 +
                    (C20148 + C20149 + C20150) * C15878 +
                    (C20151 + C20152 + C20153) * C15871 +
                    (C20154 + C20155 + C20156) * C15877) *
                       C32619 +
                   (C20569 * C32440 + C20570 * C15878 +
                    (C20144 + C20143 + C20142) * C15871 +
                    (C20141 + C20140 + C20139) * C15877) *
                       C32774) *
                      C585) *
                     C32477 * C472 +
                 (((C20567 * C15877 + C20568 * C15871 +
                    (C18476 + C18475 + C18474) * C15878 +
                    (C18473 + C18472 + C18471) * C32440) *
                       C32774 +
                   ((C20150 + C20149 + C20148) * C15877 +
                    (C20147 + C20146 + C20145) * C15871 +
                    (C31688 * C355 + C32573 * C372 + C31680 * C1147 +
                     C32580 * C1163 + C31694 * C1148 + C17830 * C1164) *
                        C15878 +
                    (C31688 * C373 + C32573 * C385 + C31680 * C1165 +
                     C32580 * C1174 + C31694 * C1166 + C17830 * C1175) *
                        C32440) *
                       C32619) *
                      C585 -
                  (((C18471 + C18472 + C18473) * C32440 +
                    (C18474 + C18475 + C18476) * C15878 + C20569 * C15871 +
                    C20570 * C15877) *
                       C32619 +
                   ((C17888 + C17887 + C17886) * C32440 +
                    (C17885 + C17884 + C17883) * C15878 +
                    (C17882 + C17881 + C17880) * C15871 +
                    (C17879 + C17878 + C17877) * C15877) *
                       C32774) *
                      C584) *
                     C32477 * C473)) /
               (p * q * std::sqrt(p + q));
    d2ee[9] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                ((((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                    C32580 * C262 + C31694 * C248 + C17830 * C263) *
                       C15877 +
                   (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                    C32580 * C277 + C31694 * C264 + C17830 * C278) *
                       C15871 +
                   (C17877 + C17878 + C17879) * C15878 +
                   (C17880 + C17881 + C17882) * C32440) *
                      C32774 +
                  ((C31688 * C352 + C32573 * C367 + C31680 * C696 +
                    C32580 * C701 + C31694 * C1142 + C17830 * C1154) *
                       C15877 +
                   (C31688 * C366 + C32573 * C382 + C31680 * C702 +
                    C32580 * C711 + C31694 * C1153 + C17830 * C1169) *
                       C15871 +
                   (C18482 + C18481 + C18480) * C15878 +
                   (C18479 + C18478 + C18477) * C32440) *
                      C32619) *
                     C32491 * C32477 * C110 -
                 (((C18471 + C18472 + C18473) * C32440 +
                   (C18474 + C18475 + C18476) * C15878 +
                   (C18477 + C18478 + C18479) * C15871 +
                   (C18480 + C18481 + C18482) * C15877) *
                      C32619 +
                  ((C17888 + C17887 + C17886) * C32440 +
                   (C17885 + C17884 + C17883) * C15878 +
                   (C17882 + C17881 + C17880) * C15871 +
                   (C17879 + C17878 + C17877) * C15877) *
                      C32774) *
                     C32491 * C32477 * C111 +
                 ((C17897 * C15877 + C17898 * C15871 +
                   (C17894 + C17893 + C17892) * C15878 +
                   (C17891 + C17890 + C17889) * C32440) *
                      C32774 +
                  ((C18476 + C18475 + C18474) * C15877 +
                   (C18473 + C18472 + C18471) * C15871 +
                   (C31688 * C349 + C32573 * C361 + C31680 * C699 +
                    C32580 * C707 + C31694 * C1508 + C17830 * C1509) *
                       C15878 +
                   (C31688 * C360 + C32573 * C379 + C31680 * C708 +
                    C32580 * C714 + C31694 * C1510 + C17830 * C1511) *
                       C32440) *
                      C32619) *
                     C32491 * C32477 * C112)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                ((((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                    C32580 * C262 + C31694 * C248 + C17830 * C263) *
                       C15877 +
                   (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                    C32580 * C277 + C31694 * C264 + C17830 * C278) *
                       C15871 +
                   (C17877 + C17878 + C17879) * C15878 +
                   (C17880 + C17881 + C17882) * C32440) *
                      C32774 +
                  ((C31688 * C352 + C32573 * C367 + C31680 * C696 +
                    C32580 * C701 + C31694 * C1142 + C17830 * C1154) *
                       C15877 +
                   (C31688 * C366 + C32573 * C382 + C31680 * C702 +
                    C32580 * C711 + C31694 * C1153 + C17830 * C1169) *
                       C15871 +
                   (C18482 + C18481 + C18480) * C15878 +
                   (C18479 + C18478 + C18477) * C32440) *
                      C32619) *
                     C32491 * C239 -
                 (((C31694 * C1700 + C17830 * C1704 + C31680 * C1151 +
                    C32580 * C1168 + C31688 * C704 + C32573 * C712) *
                       C32440 +
                   (C31694 * C1695 + C17830 * C1699 + C31680 * C1141 +
                    C32580 * C1152 + C31688 * C697 + C32573 * C703) *
                       C15878 +
                   (C31694 * C1698 + C17830 * C1703 + C31680 * C1153 +
                    C32580 * C1169 + C31688 * C702 + C32573 * C711) *
                       C15871 +
                   (C31694 * C1694 + C17830 * C1697 + C31680 * C1142 +
                    C32580 * C1154 + C31688 * C696 + C32573 * C701) *
                       C15877) *
                      C32619 +
                  ((C18295 + C18296 + C18297) * C32440 +
                   (C18298 + C18299 + C18300) * C15878 +
                   (C31694 * C1016 + C17830 * C1026 + C31680 * C264 +
                    C32580 * C278 + C31688 * C261 + C32573 * C277) *
                       C15871 +
                   (C31694 * C1008 + C17830 * C1017 + C31680 * C248 +
                    C32580 * C263 + C31688 * C247 + C32573 * C262) *
                       C15877) *
                      C32774) *
                     C32491 * C240 +
                 (((C31688 * C248 + C32573 * C263 + C31680 * C1008 +
                    C32580 * C1017 + C31694 * C1009 + C17830 * C1018) *
                       C15877 +
                   (C31688 * C264 + C32573 * C278 + C31680 * C1016 +
                    C32580 * C1026 + C31694 * C1019 + C17830 * C1027) *
                       C15871 +
                   (C31688 * C249 + C32573 * C265 + C31680 * C1007 +
                    C32580 * C1015 + C31694 * C1010 + C17830 * C1020) *
                       C15878 +
                   (C31688 * C266 + C32573 * C279 + C31680 * C1014 +
                    C32580 * C1025 + C31694 * C1021 + C17830 * C1028) *
                       C32440) *
                      C32774 +
                  ((C31688 * C1142 + C32573 * C1154 + C31680 * C1694 +
                    C32580 * C1697 + C31694 * C6424 + C17830 * C6428) *
                       C15877 +
                   (C31688 * C1153 + C32573 * C1169 + C31680 * C1698 +
                    C32580 * C1703 + C31694 * C6427 + C17830 * C6433) *
                       C15871 +
                   (C31688 * C1141 + C32573 * C1152 + C31680 * C1695 +
                    C32580 * C1699 + C31694 * C6604 + C17830 * C6605) *
                       C15878 +
                   (C31688 * C1151 + C32573 * C1168 + C31680 * C1700 +
                    C32580 * C1704 + C31694 * C6606 + C17830 * C6607) *
                       C32440) *
                      C32619) *
                     C32491 * C241) *
                C32465) /
                   (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
             C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
                C15877 +
            (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
             C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
                C15871 +
            (C15912 + C15913 + C15914 + C15915) * C15878 +
            (C15916 + C15917 + C15918 + C15919) * C32440) *
               C32532 * C32491 * C470 -
           ((C16270 + C16271 + C16272 + C16273) * C32440 +
            (C16274 + C16275 + C16276 + C16277) * C15878 +
            (C15876 * C1019 + C32814 * C1027 + C15875 * C1016 + C32832 * C1026 +
             C15874 * C264 + C32842 * C278 + C15873 * C261 + C32846 * C277) *
                C15871 +
            (C15876 * C1009 + C32814 * C1018 + C15875 * C1008 + C32832 * C1017 +
             C15874 * C248 + C32842 * C263 + C15873 * C247 + C32846 * C262) *
                C15877) *
               C32532 * C32491 * C471) *
              C472 +
          (((C16277 + C16276 + C16275 + C16274) * C15877 +
            (C16273 + C16272 + C16271 + C16270) * C15871 +
            (C15873 * C245 + C32846 * C258 + C15874 * C250 + C32842 * C267 +
             C15875 * C1006 + C32832 * C1013 + C15876 * C1011 +
             C32814 * C1022) *
                C15878 +
            (C15873 * C257 + C32846 * C275 + C15874 * C268 + C32842 * C280 +
             C15875 * C1012 + C32832 * C1024 + C15876 * C1023 +
             C32814 * C1029) *
                C32440) *
               C32532 * C32491 * C471 -
           ((C15920 + C15921 + C15922 + C15923) * C32440 +
            (C15924 + C15925 + C15926 + C15927) * C15878 +
            (C15919 + C15918 + C15917 + C15916) * C15871 +
            (C15915 + C15914 + C15913 + C15912) * C15877) *
               C32532 * C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C15055 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32845 +
            (C15092 + C15093) * C15056 + (C15094 + C15095) * C32838 +
            C15108 * C15057 + C15109 * C32825 + C15110 * C15058 +
            C15111 * C32808) *
               C32532 * C32491 * C470 -
           ((C15462 + C15463) * C32808 + (C15464 + C15465) * C15058 +
            (C15466 + C15467) * C32825 + (C15468 + C15469) * C15057 +
            (C15470 + C15471) * C32838 + (C15472 + C15473) * C15056 +
            (C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                C32845 +
            (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                C15055) *
               C32532 * C32491 * C471) *
              C472 +
          (((C15473 + C15472) * C15055 + (C15471 + C15470) * C32845 +
            (C15469 + C15468) * C15056 + (C15467 + C15466) * C32838 +
            (C15465 + C15464) * C15057 + (C15463 + C15462) * C32825 +
            (C15053 * C243 + C15047 * C254 + C15054 * C252 + C32577 * C271) *
                C15058 +
            (C15053 * C253 + C15047 * C273 + C15054 * C272 + C32577 * C282) *
                C32808) *
               C32532 * C32491 * C471 -
           ((C15104 + C15105) * C32808 + (C15106 + C15107) * C15058 +
            (C15103 + C15102) * C32825 + (C15101 + C15100) * C15057 +
            (C15099 + C15098) * C32838 + (C15097 + C15096) * C15056 +
            (C15095 + C15094) * C32845 + (C15093 + C15092) * C15055) *
               C32532 * C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                 C15877 +
             (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                 C15871 +
             (C15092 + C15093) * C15878 + (C15094 + C15095) * C32440) *
                C32840 +
            ((C17058 + C17059) * C15877 + (C17060 + C17061) * C15871 +
             (C15639 + C15638) * C15878 + (C15637 + C15636) * C32440) *
                C32829 +
            C17082 * C32807) *
               C32491 * C470 -
           (((C17293 + C17294) * C32440 + (C17295 + C17296) * C15878 +
             (C15054 * C1158 + C32577 * C1171 + C15053 * C1157 +
              C15047 * C1170) *
                 C15871 +
             (C15054 * C1144 + C32577 * C1156 + C15053 * C1143 +
              C15047 * C1155) *
                 C15877) *
                C32807 +
            ((C17297 + C17298) * C32440 + (C17299 + C17300) * C15878 +
             (C15054 * C1153 + C32577 * C1169 + C15053 * C702 + C15047 * C711) *
                 C15871 +
             (C15054 * C1142 + C32577 * C1154 + C15053 * C696 + C15047 * C701) *
                 C15877) *
                C32829 +
            ((C15470 + C15471) * C32440 + (C15472 + C15473) * C15878 +
             (C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                 C15871 +
             (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                 C15877) *
                C32840) *
               C32491 * C471) *
              C472 +
          ((((C15473 + C15472) * C15877 + (C15471 + C15470) * C15871 +
             (C15469 + C15468) * C15878 + (C15467 + C15466) * C32440) *
                C32840 +
            ((C17300 + C17299) * C15877 + (C17298 + C17297) * C15871 +
             (C15053 * C698 + C15047 * C705 + C15054 * C1140 + C32577 * C1150) *
                 C15878 +
             (C15053 * C706 + C15047 * C713 + C15054 * C1149 + C32577 * C1167) *
                 C32440) *
                C32829 +
            ((C17296 + C17295) * C15877 + (C17294 + C17293) * C15871 +
             (C15053 * C1147 + C15047 * C1163 + C15054 * C1148 +
              C32577 * C1164) *
                 C15878 +
             (C15053 * C1165 + C15047 * C1174 + C15054 * C1166 +
              C32577 * C1175) *
                 C32440) *
                C32807) *
               C32491 * C471 -
           (((C16728 + C16729) * C32440 + (C16730 + C16731) * C15878 +
             (C16727 + C16726) * C15871 + (C16725 + C16724) * C15877) *
                C32807 +
            ((C15632 + C15633) * C32440 + (C15634 + C15635) * C15878 +
             (C15636 + C15637) * C15871 + (C15638 + C15639) * C15877) *
                C32829 +
            ((C15099 + C15098) * C32440 + (C15097 + C15096) * C15878 +
             (C15095 + C15094) * C15871 + (C15093 + C15092) * C15877) *
                C32840) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
             C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
                C15877 +
            (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
             C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
                C15871 +
            (C15912 + C15913 + C15914 + C15915) * C15878 +
            (C15916 + C15917 + C15918 + C15919) * C32440) *
               C32532 * C584 -
           ((C16424 + C16425 + C16426 + C16427) * C32440 +
            (C16428 + C16429 + C16430 + C16431) * C15878 +
            (C15876 * C1698 + C32814 * C1703 + C15875 * C1153 + C32832 * C1169 +
             C15874 * C702 + C32842 * C711 + C15873 * C366 + C32846 * C382) *
                C15871 +
            (C15876 * C1694 + C32814 * C1697 + C15875 * C1142 + C32832 * C1154 +
             C15874 * C696 + C32842 * C701 + C15873 * C352 + C32846 * C367) *
                C15877) *
               C32532 * C585) *
              C470 +
          (((C15873 * C696 + C32846 * C701 + C15874 * C1142 + C32842 * C1154 +
             C15875 * C1694 + C32832 * C1697 + C15876 * C6424 +
             C32814 * C6428) *
                C15877 +
            (C15873 * C702 + C32846 * C711 + C15874 * C1153 + C32842 * C1169 +
             C15875 * C1698 + C32832 * C1703 + C15876 * C6427 +
             C32814 * C6433) *
                C15871 +
            (C15873 * C697 + C32846 * C703 + C15874 * C1141 + C32842 * C1152 +
             C15875 * C1695 + C32832 * C1699 + C15876 * C6604 +
             C32814 * C6605) *
                C15878 +
            (C15873 * C704 + C32846 * C712 + C15874 * C1151 + C32842 * C1168 +
             C15875 * C1700 + C32832 * C1704 + C15876 * C6606 +
             C32814 * C6607) *
                C32440) *
               C32532 * C585 -
           ((C16270 + C16271 + C16272 + C16273) * C32440 +
            (C16274 + C16275 + C16276 + C16277) * C15878 +
            (C15876 * C1019 + C32814 * C1027 + C15875 * C1016 + C32832 * C1026 +
             C15874 * C264 + C32842 * C278 + C15873 * C261 + C32846 * C277) *
                C15871 +
            (C15876 * C1009 + C32814 * C1018 + C15875 * C1008 + C32832 * C1017 +
             C15874 * C248 + C32842 * C263 + C15873 * C247 + C32846 * C262) *
                C15877) *
               C32532 * C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C15055 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32845 +
            (C15092 + C15093) * C15056 + (C15094 + C15095) * C32838 +
            C15108 * C15057 + C15109 * C32825 + C15110 * C15058 +
            C15111 * C32808) *
               C32532 * C584 -
           ((C15628 + C15629) * C32808 + (C15630 + C15631) * C15058 +
            (C15632 + C15633) * C32825 + (C15634 + C15635) * C15057 +
            (C15636 + C15637) * C32838 + (C15638 + C15639) * C15056 +
            (C15054 * C702 + C32577 * C711 + C15053 * C366 + C15047 * C382) *
                C32845 +
            (C15054 * C696 + C32577 * C701 + C15053 * C352 + C15047 * C367) *
                C15055) *
               C32532 * C585) *
              C470 +
          (((C15053 * C696 + C15047 * C701 + C15054 * C1142 + C32577 * C1154) *
                C15055 +
            (C15053 * C702 + C15047 * C711 + C15054 * C1153 + C32577 * C1169) *
                C32845 +
            (C15053 * C697 + C15047 * C703 + C15054 * C1141 + C32577 * C1152) *
                C15056 +
            (C15053 * C704 + C15047 * C712 + C15054 * C1151 + C32577 * C1168) *
                C32838 +
            (C15053 * C698 + C15047 * C705 + C15054 * C1140 + C32577 * C1150) *
                C15057 +
            (C15053 * C706 + C15047 * C713 + C15054 * C1149 + C32577 * C1167) *
                C32825 +
            (C15053 * C699 + C15047 * C707 + C15054 * C1508 + C32577 * C1509) *
                C15058 +
            (C15053 * C708 + C15047 * C714 + C15054 * C1510 + C32577 * C1511) *
                C32808) *
               C32532 * C585 -
           ((C15462 + C15463) * C32808 + (C15464 + C15465) * C15058 +
            (C15466 + C15467) * C32825 + (C15468 + C15469) * C15057 +
            (C15470 + C15471) * C32838 + (C15472 + C15473) * C15056 +
            (C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                C32845 +
            (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                C15055) *
               C32532 * C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                 C15877 +
             (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                 C15871 +
             (C15092 + C15093) * C15878 + (C15094 + C15095) * C32440) *
                C32840 +
            ((C17058 + C17059) * C15877 + (C17060 + C17061) * C15871 +
             C17495 * C15878 + C17496 * C32440) *
                C32829 +
            C17082 * C32807) *
               C584 -
           (((C17068 + C17069) * C32440 + (C17070 + C17071) * C15878 +
             (C17072 + C17073) * C15871 + (C17074 + C17075) * C15877) *
                C32807 +
            (C17497 * C32440 + C17498 * C15878 + (C17065 + C17064) * C15871 +
             (C17063 + C17062) * C15877) *
                C32829 +
            (C17499 * C32440 + C17500 * C15878 + (C17061 + C17060) * C15871 +
             (C17059 + C17058) * C15877) *
                C32840) *
               C585) *
              C470 +
          ((((C17711 + C17712) * C15877 + (C17713 + C17714) * C15871 +
             (C17300 + C17299) * C15878 + (C17298 + C17297) * C32440) *
                C32840 +
            ((C17715 + C17716) * C15877 + (C17717 + C17718) * C15871 +
             (C17296 + C17295) * C15878 + (C17294 + C17293) * C32440) *
                C32829 +
            ((C15053 * C2616 + C15047 * C2619 + C15054 * C7024 +
              C32577 * C7028) *
                 C15877 +
             (C15053 * C2620 + C15047 * C2625 + C15054 * C7027 +
              C32577 * C7033) *
                 C15871 +
             (C15053 * C2617 + C15047 * C2621 + C15054 * C7393 +
              C32577 * C7394) *
                 C15878 +
             (C15053 * C2622 + C15047 * C2626 + C15054 * C7395 +
              C32577 * C7396) *
                 C32440) *
                C32807) *
               C585 -
           (((C17293 + C17294) * C32440 + (C17295 + C17296) * C15878 +
             (C17718 + C17717) * C15871 + (C17716 + C17715) * C15877) *
                C32807 +
            ((C17297 + C17298) * C32440 + (C17299 + C17300) * C15878 +
             (C17714 + C17713) * C15871 + (C17712 + C17711) * C15877) *
                C32829 +
            ((C15470 + C15471) * C32440 + (C15472 + C15473) * C15878 +
             (C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                 C15871 +
             (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                 C15877) *
                C32840) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                   C15055 +
               (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                   C32845 +
               (C15092 + C15093) * C15056 + (C15094 + C15095) * C32838 +
               C15108 * C15057 + C15109 * C32825 + C15110 * C15058 +
               C15111 * C32808) *
                  C32532 * C32491 * C32477 * C110 -
              ((C15104 + C15105) * C32808 + (C15106 + C15107) * C15058 +
               (C15103 + C15102) * C32825 + (C15101 + C15100) * C15057 +
               (C15099 + C15098) * C32838 + (C15097 + C15096) * C15056 +
               (C15095 + C15094) * C32845 + (C15093 + C15092) * C15055) *
                  C32532 * C32491 * C32477 * C111 +
              (C15108 * C15055 + C15109 * C32845 + C15110 * C15056 +
               C15111 * C32838 + (C15107 + C15106) * C15057 +
               (C15105 + C15104) * C32825 +
               (C15053 * C124 + C15047 * C137 + C15054 * C474 + C32577 * C475) *
                   C15058 +
               (C15053 * C136 + C15047 * C145 + C15054 * C476 + C32577 * C477) *
                   C32808) *
                  C32532 * C32491 * C32477 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                   C15055 +
               (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                   C32845 +
               (C15092 + C15093) * C15056 + (C15094 + C15095) * C32838 +
               C15108 * C15057 + C15109 * C32825 + C15110 * C15058 +
               C15111 * C32808) *
                  C32532 * C32491 * C239 -
              ((C15054 * C270 + C32577 * C281 + C15053 * C255 + C15047 * C274) *
                   C32808 +
               (C15054 * C251 + C32577 * C269 + C15053 * C244 + C15047 * C256) *
                   C15058 +
               (C15054 * C268 + C32577 * C280 + C15053 * C257 + C15047 * C275) *
                   C32825 +
               (C15054 * C250 + C32577 * C267 + C15053 * C245 + C15047 * C258) *
                   C15057 +
               (C15054 * C266 + C32577 * C279 + C15053 * C259 + C15047 * C276) *
                   C32838 +
               (C15054 * C249 + C32577 * C265 + C15053 * C246 + C15047 * C260) *
                   C15056 +
               (C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                   C32845 +
               (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                   C15055) *
                  C32532 * C32491 * C240 +
              ((C15053 * C248 + C15047 * C263 + C15054 * C1008 +
                C32577 * C1017) *
                   C15055 +
               (C15053 * C264 + C15047 * C278 + C15054 * C1016 +
                C32577 * C1026) *
                   C32845 +
               (C15053 * C249 + C15047 * C265 + C15054 * C1007 +
                C32577 * C1015) *
                   C15056 +
               (C15053 * C266 + C15047 * C279 + C15054 * C1014 +
                C32577 * C1025) *
                   C32838 +
               (C15053 * C250 + C15047 * C267 + C15054 * C1006 +
                C32577 * C1013) *
                   C15057 +
               (C15053 * C268 + C15047 * C280 + C15054 * C1012 +
                C32577 * C1024) *
                   C32825 +
               (C15053 * C251 + C15047 * C269 + C15054 * C1322 +
                C32577 * C1323) *
                   C15058 +
               (C15053 * C270 + C15047 * C281 + C15054 * C1324 +
                C32577 * C1325) *
                   C32808) *
                  C32532 * C32491 * C241) *
             C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
               C15055 +
           (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
               C32845 +
           (C15092 + C15093) * C15056 + (C15094 + C15095) * C32838 +
           C15108 * C15057 + C15109 * C32825 + C15110 * C15058 +
           C15111 * C32808) *
              C32532 * C345 -
          ((C15054 * C708 + C32577 * C714 + C15053 * C360 + C15047 * C379) *
               C32808 +
           (C15054 * C699 + C32577 * C707 + C15053 * C349 + C15047 * C361) *
               C15058 +
           (C15054 * C706 + C32577 * C713 + C15053 * C362 + C15047 * C380) *
               C32825 +
           (C15054 * C698 + C32577 * C705 + C15053 * C350 + C15047 * C363) *
               C15057 +
           (C15054 * C704 + C32577 * C712 + C15053 * C364 + C15047 * C381) *
               C32838 +
           (C15054 * C697 + C32577 * C703 + C15053 * C351 + C15047 * C365) *
               C15056 +
           (C15054 * C702 + C32577 * C711 + C15053 * C366 + C15047 * C382) *
               C32845 +
           (C15054 * C696 + C32577 * C701 + C15053 * C352 + C15047 * C367) *
               C15055) *
              C32532 * C346 +
          ((C15053 * C353 + C15047 * C368 + C15054 * C1143 + C32577 * C1155) *
               C15055 +
           (C15053 * C369 + C15047 * C383 + C15054 * C1157 + C32577 * C1170) *
               C32845 +
           (C15053 * C354 + C15047 * C370 + C15054 * C1145 + C32577 * C1159) *
               C15056 +
           (C15053 * C371 + C15047 * C384 + C15054 * C1161 + C32577 * C1172) *
               C32838 +
           (C15053 * C355 + C15047 * C372 + C15054 * C1147 + C32577 * C1163) *
               C15057 +
           (C15053 * C373 + C15047 * C385 + C15054 * C1165 + C32577 * C1174) *
               C32825 +
           (C15053 * C356 + C15047 * C374 + C15054 * C2280 + C32577 * C2281) *
               C15058 +
           (C15053 * C375 + C15047 * C386 + C15054 * C2282 + C32577 * C2283) *
               C32808) *
              C32532 * C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
            C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
               C15877 +
           (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
            C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
               C15871 +
           (C15912 + C15913 + C15914 + C15915) * C15878 +
           (C15916 + C15917 + C15918 + C15919) * C32440) *
              C32532 * C32491 * C32477 * C110 -
          ((C15920 + C15921 + C15922 + C15923) * C32440 +
           (C15924 + C15925 + C15926 + C15927) * C15878 +
           (C15919 + C15918 + C15917 + C15916) * C15871 +
           (C15915 + C15914 + C15913 + C15912) * C15877) *
              C32532 * C32491 * C32477 * C111 +
          ((C15927 + C15926 + C15925 + C15924) * C15877 +
           (C15923 + C15922 + C15921 + C15920) * C15871 +
           (C15873 * C122 + C32846 * C132 + C15874 * C244 + C32842 * C256 +
            C15875 * C251 + C32832 * C269 + C15876 * C1322 + C32814 * C1323) *
               C15878 +
           (C15873 * C133 + C32846 * C143 + C15874 * C255 + C32842 * C274 +
            C15875 * C270 + C32832 * C281 + C15876 * C1324 + C32814 * C1325) *
               C32440) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
            C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
               C15877 +
           (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
            C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
               C15871 +
           (C15912 + C15913 + C15914 + C15915) * C15878 +
           (C15916 + C15917 + C15918 + C15919) * C32440) *
              C32532 * C32491 * C239 -
          ((C15876 * C1021 + C32814 * C1028 + C15875 * C1014 + C32832 * C1025 +
            C15874 * C266 + C32842 * C279 + C15873 * C259 + C32846 * C276) *
               C32440 +
           (C15876 * C1010 + C32814 * C1020 + C15875 * C1007 + C32832 * C1015 +
            C15874 * C249 + C32842 * C265 + C15873 * C246 + C32846 * C260) *
               C15878 +
           (C15876 * C1019 + C32814 * C1027 + C15875 * C1016 + C32832 * C1026 +
            C15874 * C264 + C32842 * C278 + C15873 * C261 + C32846 * C277) *
               C15871 +
           (C15876 * C1009 + C32814 * C1018 + C15875 * C1008 + C32832 * C1017 +
            C15874 * C248 + C32842 * C263 + C15873 * C247 + C32846 * C262) *
               C15877) *
              C32532 * C32491 * C240 +
          ((C15873 * C248 + C32846 * C263 + C15874 * C1008 + C32842 * C1017 +
            C15875 * C1009 + C32832 * C1018 + C15876 * C6354 + C32814 * C6357) *
               C15877 +
           (C15873 * C264 + C32846 * C278 + C15874 * C1016 + C32842 * C1026 +
            C15875 * C1019 + C32832 * C1027 + C15876 * C6356 + C32814 * C6360) *
               C15871 +
           (C15873 * C249 + C32846 * C265 + C15874 * C1007 + C32842 * C1015 +
            C15875 * C1010 + C32832 * C1020 + C15876 * C6518 + C32814 * C6519) *
               C15878 +
           (C15873 * C266 + C32846 * C279 + C15874 * C1014 + C32842 * C1025 +
            C15875 * C1021 + C32832 * C1028 + C15876 * C6520 + C32814 * C6521) *
               C32440) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
            C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
               C15877 +
           (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
            C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
               C15871 +
           (C15912 + C15913 + C15914 + C15915) * C15878 +
           (C15916 + C15917 + C15918 + C15919) * C32440) *
              C32532 * C345 -
          ((C15876 * C1700 + C32814 * C1704 + C15875 * C1151 + C32832 * C1168 +
            C15874 * C704 + C32842 * C712 + C15873 * C364 + C32846 * C381) *
               C32440 +
           (C15876 * C1695 + C32814 * C1699 + C15875 * C1141 + C32832 * C1152 +
            C15874 * C697 + C32842 * C703 + C15873 * C351 + C32846 * C365) *
               C15878 +
           (C15876 * C1698 + C32814 * C1703 + C15875 * C1153 + C32832 * C1169 +
            C15874 * C702 + C32842 * C711 + C15873 * C366 + C32846 * C382) *
               C15871 +
           (C15876 * C1694 + C32814 * C1697 + C15875 * C1142 + C32832 * C1154 +
            C15874 * C696 + C32842 * C701 + C15873 * C352 + C32846 * C367) *
               C15877) *
              C32532 * C346 +
          ((C15873 * C353 + C32846 * C368 + C15874 * C1143 + C32842 * C1155 +
            C15875 * C1144 + C32832 * C1156 + C15876 * C6425 + C32814 * C6429) *
               C15877 +
           (C15873 * C369 + C32846 * C383 + C15874 * C1157 + C32842 * C1170 +
            C15875 * C1158 + C32832 * C1171 + C15876 * C6431 + C32814 * C6434) *
               C15871 +
           (C15873 * C354 + C32846 * C370 + C15874 * C1145 + C32842 * C1159 +
            C15875 * C1146 + C32832 * C1160 + C15876 * C7243 + C32814 * C7244) *
               C15878 +
           (C15873 * C371 + C32846 * C384 + C15874 * C1161 + C32842 * C1172 +
            C15875 * C1162 + C32832 * C1173 + C15876 * C7245 + C32814 * C7246) *
               C32440) *
              C32532 * C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C15877 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C15871 +
            (C15092 + C15093) * C15878 + (C15094 + C15095) * C32440) *
               C32840 +
           ((C15053 * C352 + C15047 * C367 + C15054 * C696 + C32577 * C701) *
                C15877 +
            (C15053 * C366 + C15047 * C382 + C15054 * C702 + C32577 * C711) *
                C15871 +
            (C15639 + C15638) * C15878 + (C15637 + C15636) * C32440) *
               C32829 +
           ((C15053 * C353 + C15047 * C368 + C15054 * C1143 + C32577 * C1155) *
                C15877 +
            (C15053 * C369 + C15047 * C383 + C15054 * C1157 + C32577 * C1170) *
                C15871 +
            (C16724 + C16725) * C15878 + (C16726 + C16727) * C32440) *
               C32807) *
              C32491 * C32477 * C110 -
          (((C16728 + C16729) * C32440 + (C16730 + C16731) * C15878 +
            (C16727 + C16726) * C15871 + (C16725 + C16724) * C15877) *
               C32807 +
           ((C15632 + C15633) * C32440 + (C15634 + C15635) * C15878 +
            (C15636 + C15637) * C15871 + (C15638 + C15639) * C15877) *
               C32829 +
           ((C15099 + C15098) * C32440 + (C15097 + C15096) * C15878 +
            (C15095 + C15094) * C15871 + (C15093 + C15092) * C15877) *
               C32840) *
              C32491 * C32477 * C111 +
          ((C15108 * C15877 + C15109 * C15871 + C15110 * C15878 +
            C15111 * C32440) *
               C32840 +
           ((C15635 + C15634) * C15877 + (C15633 + C15632) * C15871 +
            (C15631 + C15630) * C15878 + (C15629 + C15628) * C32440) *
               C32829 +
           ((C16731 + C16730) * C15877 + (C16729 + C16728) * C15871 +
            (C15053 * C356 + C15047 * C374 + C15054 * C2280 + C32577 * C2281) *
                C15878 +
            (C15053 * C375 + C15047 * C386 + C15054 * C2282 + C32577 * C2283) *
                C32440) *
               C32807) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C15877 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C15871 +
            (C15092 + C15093) * C15878 + (C15094 + C15095) * C32440) *
               C32840 +
           ((C15053 * C352 + C15047 * C367 + C15054 * C696 + C32577 * C701) *
                C15877 +
            (C15053 * C366 + C15047 * C382 + C15054 * C702 + C32577 * C711) *
                C15871 +
            (C15639 + C15638) * C15878 + (C15637 + C15636) * C32440) *
               C32829 +
           ((C15053 * C353 + C15047 * C368 + C15054 * C1143 + C32577 * C1155) *
                C15877 +
            (C15053 * C369 + C15047 * C383 + C15054 * C1157 + C32577 * C1170) *
                C15871 +
            (C16724 + C16725) * C15878 + (C16726 + C16727) * C32440) *
               C32807) *
              C32491 * C239 -
          (((C15054 * C1162 + C32577 * C1173 + C15053 * C1161 +
             C15047 * C1172) *
                C32440 +
            (C15054 * C1146 + C32577 * C1160 + C15053 * C1145 +
             C15047 * C1159) *
                C15878 +
            (C15054 * C1158 + C32577 * C1171 + C15053 * C1157 +
             C15047 * C1170) *
                C15871 +
            (C15054 * C1144 + C32577 * C1156 + C15053 * C1143 +
             C15047 * C1155) *
                C15877) *
               C32807 +
           ((C15054 * C1151 + C32577 * C1168 + C15053 * C704 + C15047 * C712) *
                C32440 +
            (C15054 * C1141 + C32577 * C1152 + C15053 * C697 + C15047 * C703) *
                C15878 +
            (C15054 * C1153 + C32577 * C1169 + C15053 * C702 + C15047 * C711) *
                C15871 +
            (C15054 * C1142 + C32577 * C1154 + C15053 * C696 + C15047 * C701) *
                C15877) *
               C32829 +
           ((C15470 + C15471) * C32440 + (C15472 + C15473) * C15878 +
            (C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                C15871 +
            (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                C15877) *
               C32840) *
              C32491 * C240 +
          (((C15053 * C248 + C15047 * C263 + C15054 * C1008 + C32577 * C1017) *
                C15877 +
            (C15053 * C264 + C15047 * C278 + C15054 * C1016 + C32577 * C1026) *
                C15871 +
            (C15053 * C249 + C15047 * C265 + C15054 * C1007 + C32577 * C1015) *
                C15878 +
            (C15053 * C266 + C15047 * C279 + C15054 * C1014 + C32577 * C1025) *
                C32440) *
               C32840 +
           ((C15053 * C1142 + C15047 * C1154 + C15054 * C1694 +
             C32577 * C1697) *
                C15877 +
            (C15053 * C1153 + C15047 * C1169 + C15054 * C1698 +
             C32577 * C1703) *
                C15871 +
            (C15053 * C1141 + C15047 * C1152 + C15054 * C1695 +
             C32577 * C1699) *
                C15878 +
            (C15053 * C1151 + C15047 * C1168 + C15054 * C1700 +
             C32577 * C1704) *
                C32440) *
               C32829 +
           ((C15053 * C1144 + C15047 * C1156 + C15054 * C6425 +
             C32577 * C6429) *
                C15877 +
            (C15053 * C1158 + C15047 * C1171 + C15054 * C6431 +
             C32577 * C6434) *
                C15871 +
            (C15053 * C1146 + C15047 * C1160 + C15054 * C7243 +
             C32577 * C7244) *
                C15878 +
            (C15053 * C1162 + C15047 * C1173 + C15054 * C7245 +
             C32577 * C7246) *
                C32440) *
               C32807) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C15877 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C15871 +
            (C15092 + C15093) * C15878 + (C15094 + C15095) * C32440) *
               C32840 +
           ((C17058 + C17059) * C15877 + (C17060 + C17061) * C15871 +
            (C15639 + C15638) * C15878 + (C15637 + C15636) * C32440) *
               C32829 +
           C17082 * C32807) *
              C345 -
          (((C17068 + C17069) * C32440 + (C17070 + C17071) * C15878 +
            (C17072 + C17073) * C15871 + (C17074 + C17075) * C15877) *
               C32807 +
           ((C16727 + C16726) * C32440 + (C16725 + C16724) * C15878 +
            (C17065 + C17064) * C15871 + (C17063 + C17062) * C15877) *
               C32829 +
           ((C15636 + C15637) * C32440 + (C15638 + C15639) * C15878 +
            (C17061 + C17060) * C15871 + (C17059 + C17058) * C15877) *
               C32840) *
              C346 +
          (C17082 * C32840 +
           ((C17075 + C17074) * C15877 + (C17073 + C17072) * C15871 +
            (C17071 + C17070) * C15878 + (C17069 + C17068) * C32440) *
               C32829 +
           ((C15053 * C2060 + C15047 * C2069 + C15054 * C7025 +
             C32577 * C7029) *
                C15877 +
            (C15053 * C2070 + C15047 * C2078 + C15054 * C7031 +
             C32577 * C7034) *
                C15871 +
            (C15053 * C2061 + C15047 * C2071 + C15054 * C12202 +
             C32577 * C12203) *
                C15878 +
            (C15053 * C2072 + C15047 * C2079 + C15054 * C12204 +
             C32577 * C12205) *
                C32440) *
               C32807) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
             C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
                C15877 +
            (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
             C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
                C15871 +
            (C15912 + C15913 + C15914 + C15915) * C15878 +
            (C15916 + C15917 + C15918 + C15919) * C32440) *
               C32532 * C584 -
           ((C16424 + C16425 + C16426 + C16427) * C32440 +
            (C16428 + C16429 + C16430 + C16431) * C15878 +
            (C15876 * C1698 + C32814 * C1703 + C15875 * C1153 + C32832 * C1169 +
             C15874 * C702 + C32842 * C711 + C15873 * C366 + C32846 * C382) *
                C15871 +
            (C15876 * C1694 + C32814 * C1697 + C15875 * C1142 + C32832 * C1154 +
             C15874 * C696 + C32842 * C701 + C15873 * C352 + C32846 * C367) *
                C15877) *
               C32532 * C585) *
              C32477 * C472 +
          (((C16431 + C16430 + C16429 + C16428) * C15877 +
            (C16427 + C16426 + C16425 + C16424) * C15871 +
            (C15873 * C350 + C32846 * C363 + C15874 * C698 + C32842 * C705 +
             C15875 * C1140 + C32832 * C1150 + C15876 * C1696 +
             C32814 * C1701) *
                C15878 +
            (C15873 * C362 + C32846 * C380 + C15874 * C706 + C32842 * C713 +
             C15875 * C1149 + C32832 * C1167 + C15876 * C1702 +
             C32814 * C1705) *
                C32440) *
               C32532 * C585 -
           ((C15920 + C15921 + C15922 + C15923) * C32440 +
            (C15924 + C15925 + C15926 + C15927) * C15878 +
            (C15919 + C15918 + C15917 + C15916) * C15871 +
            (C15915 + C15914 + C15913 + C15912) * C15877) *
               C32532 * C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C15055 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32845 +
            (C15092 + C15093) * C15056 + (C15094 + C15095) * C32838 +
            C15108 * C15057 + C15109 * C32825 + C15110 * C15058 +
            C15111 * C32808) *
               C32532 * C584 -
           ((C15628 + C15629) * C32808 + (C15630 + C15631) * C15058 +
            (C15632 + C15633) * C32825 + (C15634 + C15635) * C15057 +
            (C15636 + C15637) * C32838 + (C15638 + C15639) * C15056 +
            (C15054 * C702 + C32577 * C711 + C15053 * C366 + C15047 * C382) *
                C32845 +
            (C15054 * C696 + C32577 * C701 + C15053 * C352 + C15047 * C367) *
                C15055) *
               C32532 * C585) *
              C32477 * C472 +
          (((C15639 + C15638) * C15055 + (C15637 + C15636) * C32845 +
            (C15635 + C15634) * C15056 + (C15633 + C15632) * C32838 +
            (C15631 + C15630) * C15057 + (C15629 + C15628) * C32825 +
            (C15053 * C348 + C15047 * C359 + C15054 * C700 + C32577 * C709) *
                C15058 +
            (C15053 * C358 + C15047 * C378 + C15054 * C710 + C32577 * C715) *
                C32808) *
               C32532 * C585 -
           ((C15104 + C15105) * C32808 + (C15106 + C15107) * C15058 +
            (C15103 + C15102) * C32825 + (C15101 + C15100) * C15057 +
            (C15099 + C15098) * C32838 + (C15097 + C15096) * C15056 +
            (C15095 + C15094) * C32845 + (C15093 + C15092) * C15055) *
               C32532 * C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                 C15877 +
             (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                 C15871 +
             (C15092 + C15093) * C15878 + (C15094 + C15095) * C32440) *
                C32840 +
            ((C17058 + C17059) * C15877 + (C17060 + C17061) * C15871 +
             C17495 * C15878 + C17496 * C32440) *
                C32829 +
            C17082 * C32807) *
               C584 -
           (((C17068 + C17069) * C32440 + (C17070 + C17071) * C15878 +
             (C17072 + C17073) * C15871 + (C17074 + C17075) * C15877) *
                C32807 +
            (C17497 * C32440 + C17498 * C15878 + (C17065 + C17064) * C15871 +
             (C17063 + C17062) * C15877) *
                C32829 +
            (C17499 * C32440 + C17500 * C15878 + (C17061 + C17060) * C15871 +
             (C17059 + C17058) * C15877) *
                C32840) *
               C585) *
              C32477 * C472 +
          (((C17495 * C15877 + C17496 * C15871 + (C15635 + C15634) * C15878 +
             (C15633 + C15632) * C32440) *
                C32840 +
            (C17040 * C15877 + C17041 * C15871 + (C16731 + C16730) * C15878 +
             (C16729 + C16728) * C32440) *
                C32829 +
            ((C17071 + C17070) * C15877 + (C17069 + C17068) * C15871 +
             (C15053 * C2057 + C15047 * C2064 + C15054 * C2618 +
              C32577 * C2623) *
                 C15878 +
             (C15053 * C2063 + C15047 * C2075 + C15054 * C2624 +
              C32577 * C2627) *
                 C32440) *
                C32807) *
               C585 -
           (((C16728 + C16729) * C32440 + (C16730 + C16731) * C15878 +
             C17497 * C15871 + C17498 * C15877) *
                C32807 +
            ((C15632 + C15633) * C32440 + (C15634 + C15635) * C15878 +
             C17499 * C15871 + C17500 * C15877) *
                C32829 +
            ((C15099 + C15098) * C32440 + (C15097 + C15096) * C15878 +
             (C15095 + C15094) * C15871 + (C15093 + C15092) * C15877) *
                C32840) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
               C15055 +
           (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
               C32845 +
           (C15092 + C15093) * C15056 + (C15094 + C15095) * C32838 +
           C15108 * C15057 + C15109 * C32825 + C15110 * C15058 +
           C15111 * C32808) *
              C32532 * C32491 * C239 -
          ((C15054 * C270 + C32577 * C281 + C15053 * C255 + C15047 * C274) *
               C32808 +
           (C15054 * C251 + C32577 * C269 + C15053 * C244 + C15047 * C256) *
               C15058 +
           (C15054 * C268 + C32577 * C280 + C15053 * C257 + C15047 * C275) *
               C32825 +
           (C15054 * C250 + C32577 * C267 + C15053 * C245 + C15047 * C258) *
               C15057 +
           (C15054 * C266 + C32577 * C279 + C15053 * C259 + C15047 * C276) *
               C32838 +
           (C15054 * C249 + C32577 * C265 + C15053 * C246 + C15047 * C260) *
               C15056 +
           (C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
               C32845 +
           (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
               C15055) *
              C32532 * C32491 * C240 +
          ((C15053 * C248 + C15047 * C263 + C15054 * C1008 + C32577 * C1017) *
               C15055 +
           (C15053 * C264 + C15047 * C278 + C15054 * C1016 + C32577 * C1026) *
               C32845 +
           (C15053 * C249 + C15047 * C265 + C15054 * C1007 + C32577 * C1015) *
               C15056 +
           (C15053 * C266 + C15047 * C279 + C15054 * C1014 + C32577 * C1025) *
               C32838 +
           (C15053 * C250 + C15047 * C267 + C15054 * C1006 + C32577 * C1013) *
               C15057 +
           (C15053 * C268 + C15047 * C280 + C15054 * C1012 + C32577 * C1024) *
               C32825 +
           (C15053 * C251 + C15047 * C269 + C15054 * C1322 + C32577 * C1323) *
               C15058 +
           (C15053 * C270 + C15047 * C281 + C15054 * C1324 + C32577 * C1325) *
               C32808) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
               C15055 +
           (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
               C32845 +
           (C15092 + C15093) * C15056 + (C15094 + C15095) * C32838 +
           C15108 * C15057 + C15109 * C32825 + C15110 * C15058 +
           C15111 * C32808) *
              C32532 * C32491 * C32477 * C110 -
          ((C15104 + C15105) * C32808 + (C15106 + C15107) * C15058 +
           (C15103 + C15102) * C32825 + (C15101 + C15100) * C15057 +
           (C15099 + C15098) * C32838 + (C15097 + C15096) * C15056 +
           (C15095 + C15094) * C32845 + (C15093 + C15092) * C15055) *
              C32532 * C32491 * C32477 * C111 +
          (C15108 * C15055 + C15109 * C32845 + C15110 * C15056 +
           C15111 * C32838 + (C15107 + C15106) * C15057 +
           (C15105 + C15104) * C32825 +
           (C15053 * C124 + C15047 * C137 + C15054 * C474 + C32577 * C475) *
               C15058 +
           (C15053 * C136 + C15047 * C145 + C15054 * C476 + C32577 * C477) *
               C32808) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
            C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
               C15877 +
           (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
            C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
               C15871 +
           (C15912 + C15913 + C15914 + C15915) * C15878 +
           (C15916 + C15917 + C15918 + C15919) * C32440) *
              C32532 * C32491 * C32477 * C110 -
          ((C15920 + C15921 + C15922 + C15923) * C32440 +
           (C15924 + C15925 + C15926 + C15927) * C15878 +
           (C15919 + C15918 + C15917 + C15916) * C15871 +
           (C15915 + C15914 + C15913 + C15912) * C15877) *
              C32532 * C32491 * C32477 * C111 +
          ((C15927 + C15926 + C15925 + C15924) * C15877 +
           (C15923 + C15922 + C15921 + C15920) * C15871 +
           (C15873 * C122 + C32846 * C132 + C15874 * C244 + C32842 * C256 +
            C15875 * C251 + C32832 * C269 + C15876 * C1322 + C32814 * C1323) *
               C15878 +
           (C15873 * C133 + C32846 * C143 + C15874 * C255 + C32842 * C274 +
            C15875 * C270 + C32832 * C281 + C15876 * C1324 + C32814 * C1325) *
               C32440) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
            C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
               C15877 +
           (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
            C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
               C15871 +
           (C15912 + C15913 + C15914 + C15915) * C15878 +
           (C15916 + C15917 + C15918 + C15919) * C32440) *
              C32532 * C32491 * C239 -
          ((C15876 * C1021 + C32814 * C1028 + C15875 * C1014 + C32832 * C1025 +
            C15874 * C266 + C32842 * C279 + C15873 * C259 + C32846 * C276) *
               C32440 +
           (C15876 * C1010 + C32814 * C1020 + C15875 * C1007 + C32832 * C1015 +
            C15874 * C249 + C32842 * C265 + C15873 * C246 + C32846 * C260) *
               C15878 +
           (C15876 * C1019 + C32814 * C1027 + C15875 * C1016 + C32832 * C1026 +
            C15874 * C264 + C32842 * C278 + C15873 * C261 + C32846 * C277) *
               C15871 +
           (C15876 * C1009 + C32814 * C1018 + C15875 * C1008 + C32832 * C1017 +
            C15874 * C248 + C32842 * C263 + C15873 * C247 + C32846 * C262) *
               C15877) *
              C32532 * C32491 * C240 +
          ((C15873 * C248 + C32846 * C263 + C15874 * C1008 + C32842 * C1017 +
            C15875 * C1009 + C32832 * C1018 + C15876 * C6354 + C32814 * C6357) *
               C15877 +
           (C15873 * C264 + C32846 * C278 + C15874 * C1016 + C32842 * C1026 +
            C15875 * C1019 + C32832 * C1027 + C15876 * C6356 + C32814 * C6360) *
               C15871 +
           (C15873 * C249 + C32846 * C265 + C15874 * C1007 + C32842 * C1015 +
            C15875 * C1010 + C32832 * C1020 + C15876 * C6518 + C32814 * C6519) *
               C15878 +
           (C15873 * C266 + C32846 * C279 + C15874 * C1014 + C32842 * C1025 +
            C15875 * C1021 + C32832 * C1028 + C15876 * C6520 + C32814 * C6521) *
               C32440) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C15877 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C15871 +
            (C15092 + C15093) * C15878 + (C15094 + C15095) * C32440) *
               C32840 +
           ((C15053 * C352 + C15047 * C367 + C15054 * C696 + C32577 * C701) *
                C15877 +
            (C15053 * C366 + C15047 * C382 + C15054 * C702 + C32577 * C711) *
                C15871 +
            (C15639 + C15638) * C15878 + (C15637 + C15636) * C32440) *
               C32829 +
           ((C15053 * C353 + C15047 * C368 + C15054 * C1143 + C32577 * C1155) *
                C15877 +
            (C15053 * C369 + C15047 * C383 + C15054 * C1157 + C32577 * C1170) *
                C15871 +
            (C16724 + C16725) * C15878 + (C16726 + C16727) * C32440) *
               C32807) *
              C32491 * C32477 * C110 -
          (((C16728 + C16729) * C32440 + (C16730 + C16731) * C15878 +
            (C16727 + C16726) * C15871 + (C16725 + C16724) * C15877) *
               C32807 +
           ((C15632 + C15633) * C32440 + (C15634 + C15635) * C15878 +
            (C15636 + C15637) * C15871 + (C15638 + C15639) * C15877) *
               C32829 +
           ((C15099 + C15098) * C32440 + (C15097 + C15096) * C15878 +
            (C15095 + C15094) * C15871 + (C15093 + C15092) * C15877) *
               C32840) *
              C32491 * C32477 * C111 +
          ((C15108 * C15877 + C15109 * C15871 + C15110 * C15878 +
            C15111 * C32440) *
               C32840 +
           ((C15635 + C15634) * C15877 + (C15633 + C15632) * C15871 +
            (C15631 + C15630) * C15878 + (C15629 + C15628) * C32440) *
               C32829 +
           ((C16731 + C16730) * C15877 + (C16729 + C16728) * C15871 +
            (C15053 * C356 + C15047 * C374 + C15054 * C2280 + C32577 * C2281) *
                C15878 +
            (C15053 * C375 + C15047 * C386 + C15054 * C2282 + C32577 * C2283) *
                C32440) *
               C32807) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C15877 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C15871 +
            (C15092 + C15093) * C15878 + (C15094 + C15095) * C32440) *
               C32840 +
           ((C15053 * C352 + C15047 * C367 + C15054 * C696 + C32577 * C701) *
                C15877 +
            (C15053 * C366 + C15047 * C382 + C15054 * C702 + C32577 * C711) *
                C15871 +
            (C15639 + C15638) * C15878 + (C15637 + C15636) * C32440) *
               C32829 +
           ((C15053 * C353 + C15047 * C368 + C15054 * C1143 + C32577 * C1155) *
                C15877 +
            (C15053 * C369 + C15047 * C383 + C15054 * C1157 + C32577 * C1170) *
                C15871 +
            (C16724 + C16725) * C15878 + (C16726 + C16727) * C32440) *
               C32807) *
              C32491 * C239 -
          (((C15054 * C1162 + C32577 * C1173 + C15053 * C1161 +
             C15047 * C1172) *
                C32440 +
            (C15054 * C1146 + C32577 * C1160 + C15053 * C1145 +
             C15047 * C1159) *
                C15878 +
            (C15054 * C1158 + C32577 * C1171 + C15053 * C1157 +
             C15047 * C1170) *
                C15871 +
            (C15054 * C1144 + C32577 * C1156 + C15053 * C1143 +
             C15047 * C1155) *
                C15877) *
               C32807 +
           ((C15054 * C1151 + C32577 * C1168 + C15053 * C704 + C15047 * C712) *
                C32440 +
            (C15054 * C1141 + C32577 * C1152 + C15053 * C697 + C15047 * C703) *
                C15878 +
            (C15054 * C1153 + C32577 * C1169 + C15053 * C702 + C15047 * C711) *
                C15871 +
            (C15054 * C1142 + C32577 * C1154 + C15053 * C696 + C15047 * C701) *
                C15877) *
               C32829 +
           ((C15470 + C15471) * C32440 + (C15472 + C15473) * C15878 +
            (C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                C15871 +
            (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                C15877) *
               C32840) *
              C32491 * C240 +
          (((C15053 * C248 + C15047 * C263 + C15054 * C1008 + C32577 * C1017) *
                C15877 +
            (C15053 * C264 + C15047 * C278 + C15054 * C1016 + C32577 * C1026) *
                C15871 +
            (C15053 * C249 + C15047 * C265 + C15054 * C1007 + C32577 * C1015) *
                C15878 +
            (C15053 * C266 + C15047 * C279 + C15054 * C1014 + C32577 * C1025) *
                C32440) *
               C32840 +
           ((C15053 * C1142 + C15047 * C1154 + C15054 * C1694 +
             C32577 * C1697) *
                C15877 +
            (C15053 * C1153 + C15047 * C1169 + C15054 * C1698 +
             C32577 * C1703) *
                C15871 +
            (C15053 * C1141 + C15047 * C1152 + C15054 * C1695 +
             C32577 * C1699) *
                C15878 +
            (C15053 * C1151 + C15047 * C1168 + C15054 * C1700 +
             C32577 * C1704) *
                C32440) *
               C32829 +
           ((C15053 * C1144 + C15047 * C1156 + C15054 * C6425 +
             C32577 * C6429) *
                C15877 +
            (C15053 * C1158 + C15047 * C1171 + C15054 * C6431 +
             C32577 * C6434) *
                C15871 +
            (C15053 * C1146 + C15047 * C1160 + C15054 * C7243 +
             C32577 * C7244) *
                C15878 +
            (C15053 * C1162 + C15047 * C1173 + C15054 * C7245 +
             C32577 * C7246) *
                C32440) *
               C32807) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                 C31569 +
             (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                 C32435 +
             (C15092 + C15093) * C31565 + (C15094 + C15095) * C32443 +
             C15108 * C31575 + C15109 * C17833) *
                C32774 +
            ((C17058 + C17059) * C31569 + (C17060 + C17061) * C32435 +
             C17495 * C31565 + C17496 * C32443 + C18775 * C31575 +
             C18776 * C17833) *
                C32619) *
               C32491 * C470 -
           (((C19271 + C19272) * C17833 + (C19273 + C19274) * C31575 +
             (C17297 + C17298) * C32443 + (C17299 + C17300) * C31565 +
             (C17714 + C17713) * C32435 + (C17712 + C17711) * C31569) *
                C32619 +
            ((C15466 + C15467) * C17833 + (C15468 + C15469) * C31575 +
             (C15470 + C15471) * C32443 + (C15472 + C15473) * C31565 +
             (C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                 C32435 +
             (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                 C31569) *
                C32774) *
               C32491 * C471) *
              C472 +
          ((((C15473 + C15472) * C31569 + (C15471 + C15470) * C32435 +
             (C15469 + C15468) * C31565 + (C15467 + C15466) * C32443 +
             (C15465 + C15464) * C31575 + (C15463 + C15462) * C17833) *
                C32774 +
            ((C17300 + C17299) * C31569 + (C17298 + C17297) * C32435 +
             (C19274 + C19273) * C31565 + (C19272 + C19271) * C32443 +
             (C15053 * C699 + C15047 * C707 + C15054 * C1508 + C32577 * C1509) *
                 C31575 +
             (C15053 * C708 + C15047 * C714 + C15054 * C1510 + C32577 * C1511) *
                 C17833) *
                C32619) *
               C32491 * C471 -
           (((C15628 + C15629) * C17833 + (C15630 + C15631) * C31575 +
             (C15632 + C15633) * C32443 + (C15634 + C15635) * C31565 +
             C17499 * C32435 + C17500 * C31569) *
                C32619 +
            ((C15103 + C15102) * C17833 + (C15101 + C15100) * C31575 +
             (C15099 + C15098) * C32443 + (C15097 + C15096) * C31565 +
             (C15095 + C15094) * C32435 + (C15093 + C15092) * C31569) *
                C32774) *
               C32491 * C470) *
              C473)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                 C31569 +
             (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                 C32435 +
             (C15092 + C15093) * C31565 + (C15094 + C15095) * C32443 +
             C15108 * C31575 + C15109 * C17833) *
                C32774 +
            ((C17058 + C17059) * C31569 + (C17060 + C17061) * C32435 +
             C17495 * C31565 + C17496 * C32443 + C18775 * C31575 +
             C18776 * C17833) *
                C32619) *
               C584 -
           (((C16728 + C16729) * C17833 + (C16730 + C16731) * C31575 +
             C17497 * C32443 + C17498 * C31565 + (C17065 + C17064) * C32435 +
             (C17063 + C17062) * C31569) *
                C32619 +
            (C19469 * C17833 + C19470 * C31575 + C17499 * C32443 +
             C17500 * C31565 + (C17061 + C17060) * C32435 +
             (C17059 + C17058) * C31569) *
                C32774) *
               C585) *
              C470 +
          ((((C17711 + C17712) * C31569 + (C17713 + C17714) * C32435 +
             (C17300 + C17299) * C31565 + (C17298 + C17297) * C32443 +
             (C19274 + C19273) * C31575 + (C19272 + C19271) * C17833) *
                C32774 +
            ((C17715 + C17716) * C31569 + (C17717 + C17718) * C32435 +
             (C17296 + C17295) * C31565 + (C17294 + C17293) * C32443 +
             (C15053 * C1147 + C15047 * C1163 + C15054 * C1148 +
              C32577 * C1164) *
                 C31575 +
             (C15053 * C1165 + C15047 * C1174 + C15054 * C1166 +
              C32577 * C1175) *
                 C17833) *
                C32619) *
               C585 -
           (((C19271 + C19272) * C17833 + (C19273 + C19274) * C31575 +
             (C17297 + C17298) * C32443 + (C17299 + C17300) * C31565 +
             (C17714 + C17713) * C32435 + (C17712 + C17711) * C31569) *
                C32619 +
            ((C15466 + C15467) * C17833 + (C15468 + C15469) * C31575 +
             (C15470 + C15471) * C32443 + (C15472 + C15473) * C31565 +
             (C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                 C32435 +
             (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                 C31569) *
                C32774) *
               C584) *
              C471) *
         C32465) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C31569 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32435 +
            (C15092 + C15093) * C31565 + (C15094 + C15095) * C32443 +
            C15108 * C31575 + C15109 * C17833) *
               C32774 +
           ((C17058 + C17059) * C31569 + (C17060 + C17061) * C32435 +
            C17495 * C31565 + C17496 * C32443 + C18775 * C31575 +
            C18776 * C17833) *
               C32619) *
              C32491 * C239 -
          (((C15054 * C1149 + C32577 * C1167 + C15053 * C706 + C15047 * C713) *
                C17833 +
            (C15054 * C1140 + C32577 * C1150 + C15053 * C698 + C15047 * C705) *
                C31575 +
            (C17297 + C17298) * C32443 + (C17299 + C17300) * C31565 +
            (C17714 + C17713) * C32435 + (C17712 + C17711) * C31569) *
               C32619 +
           ((C15466 + C15467) * C17833 + (C15468 + C15469) * C31575 +
            (C15470 + C15471) * C32443 + (C15472 + C15473) * C31565 +
            (C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                C32435 +
            (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                C31569) *
               C32774) *
              C32491 * C240 +
          (((C15053 * C248 + C15047 * C263 + C15054 * C1008 + C32577 * C1017) *
                C31569 +
            (C15053 * C264 + C15047 * C278 + C15054 * C1016 + C32577 * C1026) *
                C32435 +
            (C15053 * C249 + C15047 * C265 + C15054 * C1007 + C32577 * C1015) *
                C31565 +
            (C15053 * C266 + C15047 * C279 + C15054 * C1014 + C32577 * C1025) *
                C32443 +
            (C15053 * C250 + C15047 * C267 + C15054 * C1006 + C32577 * C1013) *
                C31575 +
            (C15053 * C268 + C15047 * C280 + C15054 * C1012 + C32577 * C1024) *
                C17833) *
               C32774 +
           ((C15053 * C1142 + C15047 * C1154 + C15054 * C1694 +
             C32577 * C1697) *
                C31569 +
            (C15053 * C1153 + C15047 * C1169 + C15054 * C1698 +
             C32577 * C1703) *
                C32435 +
            (C15053 * C1141 + C15047 * C1152 + C15054 * C1695 +
             C32577 * C1699) *
                C31565 +
            (C15053 * C1151 + C15047 * C1168 + C15054 * C1700 +
             C32577 * C1704) *
                C32443 +
            (C15053 * C1140 + C15047 * C1150 + C15054 * C1696 +
             C32577 * C1701) *
                C31575 +
            (C15053 * C1149 + C15047 * C1167 + C15054 * C1702 +
             C32577 * C1705) *
                C17833) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C31569 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32435 +
            (C15092 + C15093) * C31565 + (C15094 + C15095) * C32443 +
            C15108 * C31575 + C15109 * C17833) *
               C32774 +
           ((C17058 + C17059) * C31569 + (C17060 + C17061) * C32435 +
            C17495 * C31565 + C17496 * C32443 + C18775 * C31575 +
            C18776 * C17833) *
               C32619) *
              C32491 * C32477 * C110 -
          (((C15628 + C15629) * C17833 + (C15630 + C15631) * C31575 +
            (C15632 + C15633) * C32443 + (C15634 + C15635) * C31565 +
            C17499 * C32435 + C17500 * C31569) *
               C32619 +
           ((C15103 + C15102) * C17833 + (C15101 + C15100) * C31575 +
            (C15099 + C15098) * C32443 + (C15097 + C15096) * C31565 +
            (C15095 + C15094) * C32435 + (C15093 + C15092) * C31569) *
               C32774) *
              C32491 * C32477 * C111 +
          ((C15108 * C31569 + C15109 * C32435 + C15110 * C31565 +
            C15111 * C32443 + (C15107 + C15106) * C31575 +
            (C15105 + C15104) * C17833) *
               C32774 +
           (C18775 * C31569 + C18776 * C32435 + (C15631 + C15630) * C31565 +
            (C15629 + C15628) * C32443 +
            (C15053 * C348 + C15047 * C359 + C15054 * C700 + C32577 * C709) *
                C31575 +
            (C15053 * C358 + C15047 * C378 + C15054 * C710 + C32577 * C715) *
                C17833) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C31569 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32435 +
            (C15092 + C15093) * C31565 + (C15094 + C15095) * C32443 +
            C15108 * C31575 + C15109 * C17833) *
               C32774 +
           ((C17058 + C17059) * C31569 + (C17060 + C17061) * C32435 +
            C17495 * C31565 + C17496 * C32443 + C18775 * C31575 +
            C18776 * C17833) *
               C32619) *
              C345 -
          (((C16728 + C16729) * C17833 + (C16730 + C16731) * C31575 +
            C17497 * C32443 + C17498 * C31565 + (C17065 + C17064) * C32435 +
            (C17063 + C17062) * C31569) *
               C32619 +
           ((C15632 + C15633) * C17833 + (C15634 + C15635) * C31575 +
            C17499 * C32443 + C17500 * C31565 + (C17061 + C17060) * C32435 +
            (C17059 + C17058) * C31569) *
               C32774) *
              C346 +
          ((C17076 * C31569 + C17077 * C32435 + C17040 * C31565 +
            C17041 * C32443 + (C16731 + C16730) * C31575 +
            (C16729 + C16728) * C17833) *
               C32774 +
           ((C17075 + C17074) * C31569 + (C17073 + C17072) * C32435 +
            (C17071 + C17070) * C31565 + (C17069 + C17068) * C32443 +
            (C15053 * C2057 + C15047 * C2064 + C15054 * C2618 +
             C32577 * C2623) *
                C31575 +
            (C15053 * C2063 + C15047 * C2075 + C15054 * C2624 +
             C32577 * C2627) *
                C17833) *
               C32619) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                 C31569 +
             (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                 C32435 +
             (C15092 + C15093) * C31565 + (C15094 + C15095) * C32443 +
             C15108 * C31575 + C15109 * C17833) *
                C32774 +
            ((C17058 + C17059) * C31569 + (C17060 + C17061) * C32435 +
             C17495 * C31565 + C17496 * C32443 + C18775 * C31575 +
             C18776 * C17833) *
                C32619) *
               C584 -
           (((C16728 + C16729) * C17833 + (C16730 + C16731) * C31575 +
             C17497 * C32443 + C17498 * C31565 + (C17065 + C17064) * C32435 +
             (C17063 + C17062) * C31569) *
                C32619 +
            (C19469 * C17833 + C19470 * C31575 + C17499 * C32443 +
             C17500 * C31565 + (C17061 + C17060) * C32435 +
             (C17059 + C17058) * C31569) *
                C32774) *
               C585) *
              C32477 * C472 +
          (((C17495 * C31569 + C17496 * C32435 + C18775 * C31565 +
             C18776 * C32443 + (C15631 + C15630) * C31575 +
             (C15629 + C15628) * C17833) *
                C32774 +
            (C17040 * C31569 + C17041 * C32435 + (C16731 + C16730) * C31565 +
             (C16729 + C16728) * C32443 +
             (C15053 * C356 + C15047 * C374 + C15054 * C2280 + C32577 * C2281) *
                 C31575 +
             (C15053 * C375 + C15047 * C386 + C15054 * C2282 + C32577 * C2283) *
                 C17833) *
                C32619) *
               C585 -
           (((C15628 + C15629) * C17833 + (C15630 + C15631) * C31575 +
             C19469 * C32443 + C19470 * C31565 + C17499 * C32435 +
             C17500 * C31569) *
                C32619 +
            ((C15103 + C15102) * C17833 + (C15101 + C15100) * C31575 +
             (C15099 + C15098) * C32443 + (C15097 + C15096) * C31565 +
             (C15095 + C15094) * C32435 + (C15093 + C15092) * C31569) *
                C32774) *
               C584) *
              C32477 * C473)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C31569 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32435 +
            (C15092 + C15093) * C31565 + (C15094 + C15095) * C32443 +
            C15108 * C31575 + C15109 * C17833) *
               C32774 +
           ((C17058 + C17059) * C31569 + (C17060 + C17061) * C32435 +
            C17495 * C31565 + C17496 * C32443 + C18775 * C31575 +
            C18776 * C17833) *
               C32619) *
              C32491 * C32477 * C110 -
          (((C15628 + C15629) * C17833 + (C15630 + C15631) * C31575 +
            (C15632 + C15633) * C32443 + (C15634 + C15635) * C31565 +
            C17499 * C32435 + C17500 * C31569) *
               C32619 +
           ((C15103 + C15102) * C17833 + (C15101 + C15100) * C31575 +
            (C15099 + C15098) * C32443 + (C15097 + C15096) * C31565 +
            (C15095 + C15094) * C32435 + (C15093 + C15092) * C31569) *
               C32774) *
              C32491 * C32477 * C111 +
          ((C15108 * C31569 + C15109 * C32435 + C15110 * C31565 +
            C15111 * C32443 + (C15107 + C15106) * C31575 +
            (C15105 + C15104) * C17833) *
               C32774 +
           (C18775 * C31569 + C18776 * C32435 + (C15631 + C15630) * C31565 +
            (C15629 + C15628) * C32443 +
            (C15053 * C348 + C15047 * C359 + C15054 * C700 + C32577 * C709) *
                C31575 +
            (C15053 * C358 + C15047 * C378 + C15054 * C710 + C32577 * C715) *
                C17833) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C31569 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32435 +
            (C15092 + C15093) * C31565 + (C15094 + C15095) * C32443 +
            C15108 * C31575 + C15109 * C17833) *
               C32774 +
           ((C17058 + C17059) * C31569 + (C17060 + C17061) * C32435 +
            C17495 * C31565 + C17496 * C32443 + C18775 * C31575 +
            C18776 * C17833) *
               C32619) *
              C32491 * C239 -
          (((C15054 * C1149 + C32577 * C1167 + C15053 * C706 + C15047 * C713) *
                C17833 +
            (C15054 * C1140 + C32577 * C1150 + C15053 * C698 + C15047 * C705) *
                C31575 +
            (C17297 + C17298) * C32443 + (C17299 + C17300) * C31565 +
            (C17714 + C17713) * C32435 + (C17712 + C17711) * C31569) *
               C32619 +
           ((C15466 + C15467) * C17833 + (C15468 + C15469) * C31575 +
            (C15470 + C15471) * C32443 + (C15472 + C15473) * C31565 +
            (C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                C32435 +
            (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                C31569) *
               C32774) *
              C32491 * C240 +
          (((C15053 * C248 + C15047 * C263 + C15054 * C1008 + C32577 * C1017) *
                C31569 +
            (C15053 * C264 + C15047 * C278 + C15054 * C1016 + C32577 * C1026) *
                C32435 +
            (C15053 * C249 + C15047 * C265 + C15054 * C1007 + C32577 * C1015) *
                C31565 +
            (C15053 * C266 + C15047 * C279 + C15054 * C1014 + C32577 * C1025) *
                C32443 +
            (C15053 * C250 + C15047 * C267 + C15054 * C1006 + C32577 * C1013) *
                C31575 +
            (C15053 * C268 + C15047 * C280 + C15054 * C1012 + C32577 * C1024) *
                C17833) *
               C32774 +
           ((C15053 * C1142 + C15047 * C1154 + C15054 * C1694 +
             C32577 * C1697) *
                C31569 +
            (C15053 * C1153 + C15047 * C1169 + C15054 * C1698 +
             C32577 * C1703) *
                C32435 +
            (C15053 * C1141 + C15047 * C1152 + C15054 * C1695 +
             C32577 * C1699) *
                C31565 +
            (C15053 * C1151 + C15047 * C1168 + C15054 * C1700 +
             C32577 * C1704) *
                C32443 +
            (C15053 * C1140 + C15047 * C1150 + C15054 * C1696 +
             C32577 * C1701) *
                C31575 +
            (C15053 * C1149 + C15047 * C1167 + C15054 * C1702 +
             C32577 * C1705) *
                C17833) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C15055 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32845 +
            (C15092 + C15093) * C15056 + (C15094 + C15095) * C32838 +
            C15108 * C15057 + C15109 * C32825 + C15110 * C15058 +
            C15111 * C32808) *
               C32532 * C32491 * C470 -
           ((C15462 + C15463) * C32808 + (C15464 + C15465) * C15058 +
            (C15466 + C15467) * C32825 + (C15468 + C15469) * C15057 +
            (C15470 + C15471) * C32838 + (C15472 + C15473) * C15056 +
            (C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                C32845 +
            (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                C15055) *
               C32532 * C32491 * C471) *
              C472 +
          (((C15473 + C15472) * C15055 + (C15471 + C15470) * C32845 +
            (C15469 + C15468) * C15056 + (C15467 + C15466) * C32838 +
            (C15465 + C15464) * C15057 + (C15463 + C15462) * C32825 +
            (C15053 * C243 + C15047 * C254 + C15054 * C252 + C32577 * C271) *
                C15058 +
            (C15053 * C253 + C15047 * C273 + C15054 * C272 + C32577 * C282) *
                C32808) *
               C32532 * C32491 * C471 -
           ((C15104 + C15105) * C32808 + (C15106 + C15107) * C15058 +
            (C15103 + C15102) * C32825 + (C15101 + C15100) * C15057 +
            (C15099 + C15098) * C32838 + (C15097 + C15096) * C15056 +
            (C15095 + C15094) * C32845 + (C15093 + C15092) * C15055) *
               C32532 * C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
             C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
                C15877 +
            (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
             C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
                C15871 +
            (C15912 + C15913 + C15914 + C15915) * C15878 +
            (C15916 + C15917 + C15918 + C15919) * C32440) *
               C32532 * C32491 * C470 -
           ((C16270 + C16271 + C16272 + C16273) * C32440 +
            (C16274 + C16275 + C16276 + C16277) * C15878 +
            (C15876 * C1019 + C32814 * C1027 + C15875 * C1016 + C32832 * C1026 +
             C15874 * C264 + C32842 * C278 + C15873 * C261 + C32846 * C277) *
                C15871 +
            (C15876 * C1009 + C32814 * C1018 + C15875 * C1008 + C32832 * C1017 +
             C15874 * C248 + C32842 * C263 + C15873 * C247 + C32846 * C262) *
                C15877) *
               C32532 * C32491 * C471) *
              C472 +
          (((C16277 + C16276 + C16275 + C16274) * C15877 +
            (C16273 + C16272 + C16271 + C16270) * C15871 +
            (C15873 * C245 + C32846 * C258 + C15874 * C250 + C32842 * C267 +
             C15875 * C1006 + C32832 * C1013 + C15876 * C1011 +
             C32814 * C1022) *
                C15878 +
            (C15873 * C257 + C32846 * C275 + C15874 * C268 + C32842 * C280 +
             C15875 * C1012 + C32832 * C1024 + C15876 * C1023 +
             C32814 * C1029) *
                C32440) *
               C32532 * C32491 * C471 -
           ((C15920 + C15921 + C15922 + C15923) * C32440 +
            (C15924 + C15925 + C15926 + C15927) * C15878 +
            (C15919 + C15918 + C15917 + C15916) * C15871 +
            (C15915 + C15914 + C15913 + C15912) * C15877) *
               C32532 * C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C15055 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32845 +
            (C15092 + C15093) * C15056 + (C15094 + C15095) * C32838 +
            C15108 * C15057 + C15109 * C32825 + C15110 * C15058 +
            C15111 * C32808) *
               C32532 * C584 -
           ((C15628 + C15629) * C32808 + (C15630 + C15631) * C15058 +
            (C15632 + C15633) * C32825 + (C15634 + C15635) * C15057 +
            (C15636 + C15637) * C32838 + (C15638 + C15639) * C15056 +
            (C15054 * C702 + C32577 * C711 + C15053 * C366 + C15047 * C382) *
                C32845 +
            (C15054 * C696 + C32577 * C701 + C15053 * C352 + C15047 * C367) *
                C15055) *
               C32532 * C585) *
              C470 +
          (((C15053 * C696 + C15047 * C701 + C15054 * C1142 + C32577 * C1154) *
                C15055 +
            (C15053 * C702 + C15047 * C711 + C15054 * C1153 + C32577 * C1169) *
                C32845 +
            (C15053 * C697 + C15047 * C703 + C15054 * C1141 + C32577 * C1152) *
                C15056 +
            (C15053 * C704 + C15047 * C712 + C15054 * C1151 + C32577 * C1168) *
                C32838 +
            (C15053 * C698 + C15047 * C705 + C15054 * C1140 + C32577 * C1150) *
                C15057 +
            (C15053 * C706 + C15047 * C713 + C15054 * C1149 + C32577 * C1167) *
                C32825 +
            (C15053 * C699 + C15047 * C707 + C15054 * C1508 + C32577 * C1509) *
                C15058 +
            (C15053 * C708 + C15047 * C714 + C15054 * C1510 + C32577 * C1511) *
                C32808) *
               C32532 * C585 -
           ((C15462 + C15463) * C32808 + (C15464 + C15465) * C15058 +
            (C15466 + C15467) * C32825 + (C15468 + C15469) * C15057 +
            (C15470 + C15471) * C32838 + (C15472 + C15473) * C15056 +
            (C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                C32845 +
            (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                C15055) *
               C32532 * C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
             C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
                C15877 +
            (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
             C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
                C15871 +
            (C15912 + C15913 + C15914 + C15915) * C15878 +
            (C15916 + C15917 + C15918 + C15919) * C32440) *
               C32532 * C584 -
           ((C16424 + C16425 + C16426 + C16427) * C32440 +
            (C16428 + C16429 + C16430 + C16431) * C15878 +
            (C15876 * C1698 + C32814 * C1703 + C15875 * C1153 + C32832 * C1169 +
             C15874 * C702 + C32842 * C711 + C15873 * C366 + C32846 * C382) *
                C15871 +
            (C15876 * C1694 + C32814 * C1697 + C15875 * C1142 + C32832 * C1154 +
             C15874 * C696 + C32842 * C701 + C15873 * C352 + C32846 * C367) *
                C15877) *
               C32532 * C585) *
              C470 +
          (((C15873 * C696 + C32846 * C701 + C15874 * C1142 + C32842 * C1154 +
             C15875 * C1694 + C32832 * C1697 + C15876 * C6424 +
             C32814 * C6428) *
                C15877 +
            (C15873 * C702 + C32846 * C711 + C15874 * C1153 + C32842 * C1169 +
             C15875 * C1698 + C32832 * C1703 + C15876 * C6427 +
             C32814 * C6433) *
                C15871 +
            (C15873 * C697 + C32846 * C703 + C15874 * C1141 + C32842 * C1152 +
             C15875 * C1695 + C32832 * C1699 + C15876 * C6604 +
             C32814 * C6605) *
                C15878 +
            (C15873 * C704 + C32846 * C712 + C15874 * C1151 + C32842 * C1168 +
             C15875 * C1700 + C32832 * C1704 + C15876 * C6606 +
             C32814 * C6607) *
                C32440) *
               C32532 * C585 -
           ((C16270 + C16271 + C16272 + C16273) * C32440 +
            (C16274 + C16275 + C16276 + C16277) * C15878 +
            (C15876 * C1019 + C32814 * C1027 + C15875 * C1016 + C32832 * C1026 +
             C15874 * C264 + C32842 * C278 + C15873 * C261 + C32846 * C277) *
                C15871 +
            (C15876 * C1009 + C32814 * C1018 + C15875 * C1008 + C32832 * C1017 +
             C15874 * C248 + C32842 * C263 + C15873 * C247 + C32846 * C262) *
                C15877) *
               C32532 * C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
               C15055 +
           (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
               C32845 +
           (C15092 + C15093) * C15056 + (C15094 + C15095) * C32838 +
           C15108 * C15057 + C15109 * C32825 + C15110 * C15058 +
           C15111 * C32808) *
              C32532 * C32491 * C239 -
          ((C15054 * C270 + C32577 * C281 + C15053 * C255 + C15047 * C274) *
               C32808 +
           (C15054 * C251 + C32577 * C269 + C15053 * C244 + C15047 * C256) *
               C15058 +
           (C15054 * C268 + C32577 * C280 + C15053 * C257 + C15047 * C275) *
               C32825 +
           (C15054 * C250 + C32577 * C267 + C15053 * C245 + C15047 * C258) *
               C15057 +
           (C15054 * C266 + C32577 * C279 + C15053 * C259 + C15047 * C276) *
               C32838 +
           (C15054 * C249 + C32577 * C265 + C15053 * C246 + C15047 * C260) *
               C15056 +
           (C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
               C32845 +
           (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
               C15055) *
              C32532 * C32491 * C240 +
          ((C15053 * C248 + C15047 * C263 + C15054 * C1008 + C32577 * C1017) *
               C15055 +
           (C15053 * C264 + C15047 * C278 + C15054 * C1016 + C32577 * C1026) *
               C32845 +
           (C15053 * C249 + C15047 * C265 + C15054 * C1007 + C32577 * C1015) *
               C15056 +
           (C15053 * C266 + C15047 * C279 + C15054 * C1014 + C32577 * C1025) *
               C32838 +
           (C15053 * C250 + C15047 * C267 + C15054 * C1006 + C32577 * C1013) *
               C15057 +
           (C15053 * C268 + C15047 * C280 + C15054 * C1012 + C32577 * C1024) *
               C32825 +
           (C15053 * C251 + C15047 * C269 + C15054 * C1322 + C32577 * C1323) *
               C15058 +
           (C15053 * C270 + C15047 * C281 + C15054 * C1324 + C32577 * C1325) *
               C32808) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
               C15055 +
           (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
               C32845 +
           (C15092 + C15093) * C15056 + (C15094 + C15095) * C32838 +
           C15108 * C15057 + C15109 * C32825 + C15110 * C15058 +
           C15111 * C32808) *
              C32532 * C32491 * C32477 * C110 -
          ((C15104 + C15105) * C32808 + (C15106 + C15107) * C15058 +
           (C15103 + C15102) * C32825 + (C15101 + C15100) * C15057 +
           (C15099 + C15098) * C32838 + (C15097 + C15096) * C15056 +
           (C15095 + C15094) * C32845 + (C15093 + C15092) * C15055) *
              C32532 * C32491 * C32477 * C111 +
          (C15108 * C15055 + C15109 * C32845 + C15110 * C15056 +
           C15111 * C32838 + (C15107 + C15106) * C15057 +
           (C15105 + C15104) * C32825 +
           (C15053 * C124 + C15047 * C137 + C15054 * C474 + C32577 * C475) *
               C15058 +
           (C15053 * C136 + C15047 * C145 + C15054 * C476 + C32577 * C477) *
               C32808) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
               C15055 +
           (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
               C32845 +
           (C15092 + C15093) * C15056 + (C15094 + C15095) * C32838 +
           C15108 * C15057 + C15109 * C32825 + C15110 * C15058 +
           C15111 * C32808) *
              C32532 * C345 -
          ((C15054 * C708 + C32577 * C714 + C15053 * C360 + C15047 * C379) *
               C32808 +
           (C15054 * C699 + C32577 * C707 + C15053 * C349 + C15047 * C361) *
               C15058 +
           (C15054 * C706 + C32577 * C713 + C15053 * C362 + C15047 * C380) *
               C32825 +
           (C15054 * C698 + C32577 * C705 + C15053 * C350 + C15047 * C363) *
               C15057 +
           (C15054 * C704 + C32577 * C712 + C15053 * C364 + C15047 * C381) *
               C32838 +
           (C15054 * C697 + C32577 * C703 + C15053 * C351 + C15047 * C365) *
               C15056 +
           (C15054 * C702 + C32577 * C711 + C15053 * C366 + C15047 * C382) *
               C32845 +
           (C15054 * C696 + C32577 * C701 + C15053 * C352 + C15047 * C367) *
               C15055) *
              C32532 * C346 +
          ((C15053 * C353 + C15047 * C368 + C15054 * C1143 + C32577 * C1155) *
               C15055 +
           (C15053 * C369 + C15047 * C383 + C15054 * C1157 + C32577 * C1170) *
               C32845 +
           (C15053 * C354 + C15047 * C370 + C15054 * C1145 + C32577 * C1159) *
               C15056 +
           (C15053 * C371 + C15047 * C384 + C15054 * C1161 + C32577 * C1172) *
               C32838 +
           (C15053 * C355 + C15047 * C372 + C15054 * C1147 + C32577 * C1163) *
               C15057 +
           (C15053 * C373 + C15047 * C385 + C15054 * C1165 + C32577 * C1174) *
               C32825 +
           (C15053 * C356 + C15047 * C374 + C15054 * C2280 + C32577 * C2281) *
               C15058 +
           (C15053 * C375 + C15047 * C386 + C15054 * C2282 + C32577 * C2283) *
               C32808) *
              C32532 * C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
            C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
               C15877 +
           (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
            C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
               C15871 +
           (C15912 + C15913 + C15914 + C15915) * C15878 +
           (C15916 + C15917 + C15918 + C15919) * C32440) *
              C32532 * C32491 * C32477 * C110 -
          ((C15920 + C15921 + C15922 + C15923) * C32440 +
           (C15924 + C15925 + C15926 + C15927) * C15878 +
           (C15919 + C15918 + C15917 + C15916) * C15871 +
           (C15915 + C15914 + C15913 + C15912) * C15877) *
              C32532 * C32491 * C32477 * C111 +
          ((C15927 + C15926 + C15925 + C15924) * C15877 +
           (C15923 + C15922 + C15921 + C15920) * C15871 +
           (C15873 * C122 + C32846 * C132 + C15874 * C244 + C32842 * C256 +
            C15875 * C251 + C32832 * C269 + C15876 * C1322 + C32814 * C1323) *
               C15878 +
           (C15873 * C133 + C32846 * C143 + C15874 * C255 + C32842 * C274 +
            C15875 * C270 + C32832 * C281 + C15876 * C1324 + C32814 * C1325) *
               C32440) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
            C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
               C15877 +
           (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
            C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
               C15871 +
           (C15912 + C15913 + C15914 + C15915) * C15878 +
           (C15916 + C15917 + C15918 + C15919) * C32440) *
              C32532 * C32491 * C239 -
          ((C15876 * C1021 + C32814 * C1028 + C15875 * C1014 + C32832 * C1025 +
            C15874 * C266 + C32842 * C279 + C15873 * C259 + C32846 * C276) *
               C32440 +
           (C15876 * C1010 + C32814 * C1020 + C15875 * C1007 + C32832 * C1015 +
            C15874 * C249 + C32842 * C265 + C15873 * C246 + C32846 * C260) *
               C15878 +
           (C15876 * C1019 + C32814 * C1027 + C15875 * C1016 + C32832 * C1026 +
            C15874 * C264 + C32842 * C278 + C15873 * C261 + C32846 * C277) *
               C15871 +
           (C15876 * C1009 + C32814 * C1018 + C15875 * C1008 + C32832 * C1017 +
            C15874 * C248 + C32842 * C263 + C15873 * C247 + C32846 * C262) *
               C15877) *
              C32532 * C32491 * C240 +
          ((C15873 * C248 + C32846 * C263 + C15874 * C1008 + C32842 * C1017 +
            C15875 * C1009 + C32832 * C1018 + C15876 * C6354 + C32814 * C6357) *
               C15877 +
           (C15873 * C264 + C32846 * C278 + C15874 * C1016 + C32842 * C1026 +
            C15875 * C1019 + C32832 * C1027 + C15876 * C6356 + C32814 * C6360) *
               C15871 +
           (C15873 * C249 + C32846 * C265 + C15874 * C1007 + C32842 * C1015 +
            C15875 * C1010 + C32832 * C1020 + C15876 * C6518 + C32814 * C6519) *
               C15878 +
           (C15873 * C266 + C32846 * C279 + C15874 * C1014 + C32842 * C1025 +
            C15875 * C1021 + C32832 * C1028 + C15876 * C6520 + C32814 * C6521) *
               C32440) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
            C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
               C15877 +
           (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
            C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
               C15871 +
           (C15912 + C15913 + C15914 + C15915) * C15878 +
           (C15916 + C15917 + C15918 + C15919) * C32440) *
              C32532 * C345 -
          ((C15876 * C1700 + C32814 * C1704 + C15875 * C1151 + C32832 * C1168 +
            C15874 * C704 + C32842 * C712 + C15873 * C364 + C32846 * C381) *
               C32440 +
           (C15876 * C1695 + C32814 * C1699 + C15875 * C1141 + C32832 * C1152 +
            C15874 * C697 + C32842 * C703 + C15873 * C351 + C32846 * C365) *
               C15878 +
           (C15876 * C1698 + C32814 * C1703 + C15875 * C1153 + C32832 * C1169 +
            C15874 * C702 + C32842 * C711 + C15873 * C366 + C32846 * C382) *
               C15871 +
           (C15876 * C1694 + C32814 * C1697 + C15875 * C1142 + C32832 * C1154 +
            C15874 * C696 + C32842 * C701 + C15873 * C352 + C32846 * C367) *
               C15877) *
              C32532 * C346 +
          ((C15873 * C353 + C32846 * C368 + C15874 * C1143 + C32842 * C1155 +
            C15875 * C1144 + C32832 * C1156 + C15876 * C6425 + C32814 * C6429) *
               C15877 +
           (C15873 * C369 + C32846 * C383 + C15874 * C1157 + C32842 * C1170 +
            C15875 * C1158 + C32832 * C1171 + C15876 * C6431 + C32814 * C6434) *
               C15871 +
           (C15873 * C354 + C32846 * C370 + C15874 * C1145 + C32842 * C1159 +
            C15875 * C1146 + C32832 * C1160 + C15876 * C7243 + C32814 * C7244) *
               C15878 +
           (C15873 * C371 + C32846 * C384 + C15874 * C1161 + C32842 * C1172 +
            C15875 * C1162 + C32832 * C1173 + C15876 * C7245 + C32814 * C7246) *
               C32440) *
              C32532 * C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C15055 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32845 +
            (C15092 + C15093) * C15056 + (C15094 + C15095) * C32838 +
            C15108 * C15057 + C15109 * C32825 + C15110 * C15058 +
            C15111 * C32808) *
               C32532 * C584 -
           ((C15628 + C15629) * C32808 + (C15630 + C15631) * C15058 +
            (C15632 + C15633) * C32825 + (C15634 + C15635) * C15057 +
            (C15636 + C15637) * C32838 + (C15638 + C15639) * C15056 +
            (C15054 * C702 + C32577 * C711 + C15053 * C366 + C15047 * C382) *
                C32845 +
            (C15054 * C696 + C32577 * C701 + C15053 * C352 + C15047 * C367) *
                C15055) *
               C32532 * C585) *
              C32477 * C472 +
          (((C15639 + C15638) * C15055 + (C15637 + C15636) * C32845 +
            (C15635 + C15634) * C15056 + (C15633 + C15632) * C32838 +
            (C15631 + C15630) * C15057 + (C15629 + C15628) * C32825 +
            (C15053 * C348 + C15047 * C359 + C15054 * C700 + C32577 * C709) *
                C15058 +
            (C15053 * C358 + C15047 * C378 + C15054 * C710 + C32577 * C715) *
                C32808) *
               C32532 * C585 -
           ((C15104 + C15105) * C32808 + (C15106 + C15107) * C15058 +
            (C15103 + C15102) * C32825 + (C15101 + C15100) * C15057 +
            (C15099 + C15098) * C32838 + (C15097 + C15096) * C15056 +
            (C15095 + C15094) * C32845 + (C15093 + C15092) * C15055) *
               C32532 * C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
             C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
                C15877 +
            (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
             C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
                C15871 +
            (C15912 + C15913 + C15914 + C15915) * C15878 +
            (C15916 + C15917 + C15918 + C15919) * C32440) *
               C32532 * C584 -
           ((C16424 + C16425 + C16426 + C16427) * C32440 +
            (C16428 + C16429 + C16430 + C16431) * C15878 +
            (C15876 * C1698 + C32814 * C1703 + C15875 * C1153 + C32832 * C1169 +
             C15874 * C702 + C32842 * C711 + C15873 * C366 + C32846 * C382) *
                C15871 +
            (C15876 * C1694 + C32814 * C1697 + C15875 * C1142 + C32832 * C1154 +
             C15874 * C696 + C32842 * C701 + C15873 * C352 + C32846 * C367) *
                C15877) *
               C32532 * C585) *
              C32477 * C472 +
          (((C16431 + C16430 + C16429 + C16428) * C15877 +
            (C16427 + C16426 + C16425 + C16424) * C15871 +
            (C15873 * C350 + C32846 * C363 + C15874 * C698 + C32842 * C705 +
             C15875 * C1140 + C32832 * C1150 + C15876 * C1696 +
             C32814 * C1701) *
                C15878 +
            (C15873 * C362 + C32846 * C380 + C15874 * C706 + C32842 * C713 +
             C15875 * C1149 + C32832 * C1167 + C15876 * C1702 +
             C32814 * C1705) *
                C32440) *
               C32532 * C585 -
           ((C15920 + C15921 + C15922 + C15923) * C32440 +
            (C15924 + C15925 + C15926 + C15927) * C15878 +
            (C15919 + C15918 + C15917 + C15916) * C15871 +
            (C15915 + C15914 + C15913 + C15912) * C15877) *
               C32532 * C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
               C15055 +
           (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
               C32845 +
           (C15092 + C15093) * C15056 + (C15094 + C15095) * C32838 +
           C15108 * C15057 + C15109 * C32825 + C15110 * C15058 +
           C15111 * C32808) *
              C32532 * C32491 * C32477 * C110 -
          ((C15104 + C15105) * C32808 + (C15106 + C15107) * C15058 +
           (C15103 + C15102) * C32825 + (C15101 + C15100) * C15057 +
           (C15099 + C15098) * C32838 + (C15097 + C15096) * C15056 +
           (C15095 + C15094) * C32845 + (C15093 + C15092) * C15055) *
              C32532 * C32491 * C32477 * C111 +
          (C15108 * C15055 + C15109 * C32845 + C15110 * C15056 +
           C15111 * C32838 + (C15107 + C15106) * C15057 +
           (C15105 + C15104) * C32825 +
           (C15053 * C124 + C15047 * C137 + C15054 * C474 + C32577 * C475) *
               C15058 +
           (C15053 * C136 + C15047 * C145 + C15054 * C476 + C32577 * C477) *
               C32808) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
               C15055 +
           (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
               C32845 +
           (C15092 + C15093) * C15056 + (C15094 + C15095) * C32838 +
           C15108 * C15057 + C15109 * C32825 + C15110 * C15058 +
           C15111 * C32808) *
              C32532 * C32491 * C239 -
          ((C15054 * C270 + C32577 * C281 + C15053 * C255 + C15047 * C274) *
               C32808 +
           (C15054 * C251 + C32577 * C269 + C15053 * C244 + C15047 * C256) *
               C15058 +
           (C15054 * C268 + C32577 * C280 + C15053 * C257 + C15047 * C275) *
               C32825 +
           (C15054 * C250 + C32577 * C267 + C15053 * C245 + C15047 * C258) *
               C15057 +
           (C15054 * C266 + C32577 * C279 + C15053 * C259 + C15047 * C276) *
               C32838 +
           (C15054 * C249 + C32577 * C265 + C15053 * C246 + C15047 * C260) *
               C15056 +
           (C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
               C32845 +
           (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
               C15055) *
              C32532 * C32491 * C240 +
          ((C15053 * C248 + C15047 * C263 + C15054 * C1008 + C32577 * C1017) *
               C15055 +
           (C15053 * C264 + C15047 * C278 + C15054 * C1016 + C32577 * C1026) *
               C32845 +
           (C15053 * C249 + C15047 * C265 + C15054 * C1007 + C32577 * C1015) *
               C15056 +
           (C15053 * C266 + C15047 * C279 + C15054 * C1014 + C32577 * C1025) *
               C32838 +
           (C15053 * C250 + C15047 * C267 + C15054 * C1006 + C32577 * C1013) *
               C15057 +
           (C15053 * C268 + C15047 * C280 + C15054 * C1012 + C32577 * C1024) *
               C32825 +
           (C15053 * C251 + C15047 * C269 + C15054 * C1322 + C32577 * C1323) *
               C15058 +
           (C15053 * C270 + C15047 * C281 + C15054 * C1324 + C32577 * C1325) *
               C32808) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
            C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
               C15877 +
           (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
            C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
               C15871 +
           (C15912 + C15913 + C15914 + C15915) * C15878 +
           (C15916 + C15917 + C15918 + C15919) * C32440) *
              C32532 * C32491 * C32477 * C110 -
          ((C15920 + C15921 + C15922 + C15923) * C32440 +
           (C15924 + C15925 + C15926 + C15927) * C15878 +
           (C15919 + C15918 + C15917 + C15916) * C15871 +
           (C15915 + C15914 + C15913 + C15912) * C15877) *
              C32532 * C32491 * C32477 * C111 +
          ((C15927 + C15926 + C15925 + C15924) * C15877 +
           (C15923 + C15922 + C15921 + C15920) * C15871 +
           (C15873 * C122 + C32846 * C132 + C15874 * C244 + C32842 * C256 +
            C15875 * C251 + C32832 * C269 + C15876 * C1322 + C32814 * C1323) *
               C15878 +
           (C15873 * C133 + C32846 * C143 + C15874 * C255 + C32842 * C274 +
            C15875 * C270 + C32832 * C281 + C15876 * C1324 + C32814 * C1325) *
               C32440) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
            C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
               C15877 +
           (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
            C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
               C15871 +
           (C15912 + C15913 + C15914 + C15915) * C15878 +
           (C15916 + C15917 + C15918 + C15919) * C32440) *
              C32532 * C32491 * C239 -
          ((C15876 * C1021 + C32814 * C1028 + C15875 * C1014 + C32832 * C1025 +
            C15874 * C266 + C32842 * C279 + C15873 * C259 + C32846 * C276) *
               C32440 +
           (C15876 * C1010 + C32814 * C1020 + C15875 * C1007 + C32832 * C1015 +
            C15874 * C249 + C32842 * C265 + C15873 * C246 + C32846 * C260) *
               C15878 +
           (C15876 * C1019 + C32814 * C1027 + C15875 * C1016 + C32832 * C1026 +
            C15874 * C264 + C32842 * C278 + C15873 * C261 + C32846 * C277) *
               C15871 +
           (C15876 * C1009 + C32814 * C1018 + C15875 * C1008 + C32832 * C1017 +
            C15874 * C248 + C32842 * C263 + C15873 * C247 + C32846 * C262) *
               C15877) *
              C32532 * C32491 * C240 +
          ((C15873 * C248 + C32846 * C263 + C15874 * C1008 + C32842 * C1017 +
            C15875 * C1009 + C32832 * C1018 + C15876 * C6354 + C32814 * C6357) *
               C15877 +
           (C15873 * C264 + C32846 * C278 + C15874 * C1016 + C32842 * C1026 +
            C15875 * C1019 + C32832 * C1027 + C15876 * C6356 + C32814 * C6360) *
               C15871 +
           (C15873 * C249 + C32846 * C265 + C15874 * C1007 + C32842 * C1015 +
            C15875 * C1010 + C32832 * C1020 + C15876 * C6518 + C32814 * C6519) *
               C15878 +
           (C15873 * C266 + C32846 * C279 + C15874 * C1014 + C32842 * C1025 +
            C15875 * C1021 + C32832 * C1028 + C15876 * C6520 + C32814 * C6521) *
               C32440) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[25] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                      C32580 * C262 + C31694 * C248 + C17830 * C263) *
                         C31559 +
                     (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                      C32580 * C277 + C31694 * C264 + C17830 * C278) *
                         C32754 +
                     (C17877 + C17878 + C17879) * C31540 +
                     (C17880 + C17881 + C17882) * C32440) *
                        C20880 +
                    ((C20139 + C20140 + C20141) * C31559 +
                     (C20142 + C20143 + C20144) * C32754 + C20567 * C31540 +
                     C20568 * C32440) *
                        C32619) *
                       C32491 * C470 -
                   (((C20363 + C20364 + C20365) * C32440 +
                     (C20366 + C20367 + C20368) * C31540 +
                     (C20782 + C20781 + C20780) * C32754 +
                     (C20779 + C20778 + C20777) * C31559) *
                        C32619 +
                    ((C18295 + C18296 + C18297) * C32440 +
                     (C18298 + C18299 + C18300) * C31540 +
                     (C31694 * C1016 + C17830 * C1026 + C31680 * C264 +
                      C32580 * C278 + C31688 * C261 + C32573 * C277) *
                         C32754 +
                     (C31694 * C1008 + C17830 * C1017 + C31680 * C248 +
                      C32580 * C263 + C31688 * C247 + C32573 * C262) *
                         C31559) *
                        C20880) *
                       C32491 * C471) *
                      C472 +
                  ((((C18300 + C18299 + C18298) * C31559 +
                     (C18297 + C18296 + C18295) * C32754 +
                     (C18294 + C18293 + C18292) * C31540 +
                     (C18291 + C18290 + C18289) * C32440) *
                        C20880 +
                    ((C20368 + C20367 + C20366) * C31559 +
                     (C20365 + C20364 + C20363) * C32754 +
                     (C31688 * C698 + C32573 * C705 + C31680 * C1140 +
                      C32580 * C1150 + C31694 * C1696 + C17830 * C1701) *
                         C31540 +
                     (C31688 * C706 + C32573 * C713 + C31680 * C1149 +
                      C32580 * C1167 + C31694 * C1702 + C17830 * C1705) *
                         C32440) *
                        C32619) *
                       C32491 * C471 -
                   (((C18471 + C18472 + C18473) * C32440 +
                     (C18474 + C18475 + C18476) * C31540 + C20569 * C32754 +
                     C20570 * C31559) *
                        C32619 +
                    ((C17888 + C17887 + C17886) * C32440 +
                     (C17885 + C17884 + C17883) * C31540 +
                     (C17882 + C17881 + C17880) * C32754 +
                     (C17879 + C17878 + C17877) * C31559) *
                        C20880) *
                       C32491 * C470) *
                      C473)) /
                (p * q * std::sqrt(p + q));
    d2ee[26] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                      C32580 * C262 + C31694 * C248 + C17830 * C263) *
                         C31559 +
                     (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                      C32580 * C277 + C31694 * C264 + C17830 * C278) *
                         C32754 +
                     (C17877 + C17878 + C17879) * C31540 +
                     (C17880 + C17881 + C17882) * C32440) *
                        C20880 +
                    ((C20139 + C20140 + C20141) * C31559 +
                     (C20142 + C20143 + C20144) * C32754 + C20567 * C31540 +
                     C20568 * C32440) *
                        C32619) *
                       C584 -
                   (((C20145 + C20146 + C20147) * C32440 +
                     (C20148 + C20149 + C20150) * C31540 +
                     (C20151 + C20152 + C20153) * C32754 +
                     (C20154 + C20155 + C20156) * C31559) *
                        C32619 +
                    (C20569 * C32440 + C20570 * C31540 +
                     (C20144 + C20143 + C20142) * C32754 +
                     (C20141 + C20140 + C20139) * C31559) *
                        C20880) *
                       C585) *
                      C470 +
                  ((((C20777 + C20778 + C20779) * C31559 +
                     (C20780 + C20781 + C20782) * C32754 +
                     (C20368 + C20367 + C20366) * C31540 +
                     (C20365 + C20364 + C20363) * C32440) *
                        C20880 +
                    ((C31688 * C1143 + C32573 * C1155 + C31680 * C1144 +
                      C32580 * C1156 + C31694 * C6425 + C17830 * C6429) *
                         C31559 +
                     (C31688 * C1157 + C32573 * C1170 + C31680 * C1158 +
                      C32580 * C1171 + C31694 * C6431 + C17830 * C6434) *
                         C32754 +
                     (C31688 * C1145 + C32573 * C1159 + C31680 * C1146 +
                      C32580 * C1160 + C31694 * C7243 + C17830 * C7244) *
                         C31540 +
                     (C31688 * C1161 + C32573 * C1172 + C31680 * C1162 +
                      C32580 * C1173 + C31694 * C7245 + C17830 * C7246) *
                         C32440) *
                        C32619) *
                       C585 -
                   (((C20363 + C20364 + C20365) * C32440 +
                     (C20366 + C20367 + C20368) * C31540 +
                     (C20782 + C20781 + C20780) * C32754 +
                     (C20779 + C20778 + C20777) * C31559) *
                        C32619 +
                    ((C18295 + C18296 + C18297) * C32440 +
                     (C18298 + C18299 + C18300) * C31540 +
                     (C31694 * C1016 + C17830 * C1026 + C31680 * C264 +
                      C32580 * C278 + C31688 * C261 + C32573 * C277) *
                         C32754 +
                     (C31694 * C1008 + C17830 * C1017 + C31680 * C248 +
                      C32580 * C263 + C31688 * C247 + C32573 * C262) *
                         C31559) *
                        C20880) *
                       C584) *
                      C471) *
                 C32465) /
                (p * q * std::sqrt(p + q));
    d2ee[27] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                     C32580 * C262 + C31694 * C248 + C17830 * C263) *
                        C31559 +
                    (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                     C32580 * C277 + C31694 * C264 + C17830 * C278) *
                        C32754 +
                    (C17877 + C17878 + C17879) * C31540 +
                    (C17880 + C17881 + C17882) * C32440) *
                       C20880 +
                   ((C20139 + C20140 + C20141) * C31559 +
                    (C20142 + C20143 + C20144) * C32754 + C20567 * C31540 +
                    C20568 * C32440) *
                       C32619) *
                      C32491 * C239 -
                  (((C20363 + C20364 + C20365) * C32440 +
                    (C20366 + C20367 + C20368) * C31540 +
                    (C20782 + C20781 + C20780) * C32754 +
                    (C20779 + C20778 + C20777) * C31559) *
                       C32619 +
                   ((C18295 + C18296 + C18297) * C32440 +
                    (C18298 + C18299 + C18300) * C31540 +
                    (C31694 * C1016 + C17830 * C1026 + C31680 * C264 +
                     C32580 * C278 + C31688 * C261 + C32573 * C277) *
                        C32754 +
                    (C31694 * C1008 + C17830 * C1017 + C31680 * C248 +
                     C32580 * C263 + C31688 * C247 + C32573 * C262) *
                        C31559) *
                       C20880) *
                      C32491 * C240 +
                  (((C31688 * C248 + C32573 * C263 + C31680 * C1008 +
                     C32580 * C1017 + C31694 * C1009 + C17830 * C1018) *
                        C31559 +
                    (C31688 * C264 + C32573 * C278 + C31680 * C1016 +
                     C32580 * C1026 + C31694 * C1019 + C17830 * C1027) *
                        C32754 +
                    (C31688 * C249 + C32573 * C265 + C31680 * C1007 +
                     C32580 * C1015 + C31694 * C1010 + C17830 * C1020) *
                        C31540 +
                    (C31688 * C266 + C32573 * C279 + C31680 * C1014 +
                     C32580 * C1025 + C31694 * C1021 + C17830 * C1028) *
                        C32440) *
                       C20880 +
                   ((C31688 * C1142 + C32573 * C1154 + C31680 * C1694 +
                     C32580 * C1697 + C31694 * C6424 + C17830 * C6428) *
                        C31559 +
                    (C31688 * C1153 + C32573 * C1169 + C31680 * C1698 +
                     C32580 * C1703 + C31694 * C6427 + C17830 * C6433) *
                        C32754 +
                    (C31688 * C1141 + C32573 * C1152 + C31680 * C1695 +
                     C32580 * C1699 + C31694 * C6604 + C17830 * C6605) *
                        C31540 +
                    (C31688 * C1151 + C32573 * C1168 + C31680 * C1700 +
                     C32580 * C1704 + C31694 * C6606 + C17830 * C6607) *
                        C32440) *
                       C32619) *
                      C32491 * C241) *
                 C32465) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                     C32580 * C262 + C31694 * C248 + C17830 * C263) *
                        C31559 +
                    (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                     C32580 * C277 + C31694 * C264 + C17830 * C278) *
                        C32754 +
                    (C17877 + C17878 + C17879) * C31540 +
                    (C17880 + C17881 + C17882) * C32440) *
                       C20880 +
                   ((C20139 + C20140 + C20141) * C31559 +
                    (C20142 + C20143 + C20144) * C32754 + C20567 * C31540 +
                    C20568 * C32440) *
                       C32619) *
                      C32491 * C32477 * C110 -
                  (((C18471 + C18472 + C18473) * C32440 +
                    (C18474 + C18475 + C18476) * C31540 + C20569 * C32754 +
                    C20570 * C31559) *
                       C32619 +
                   ((C17888 + C17887 + C17886) * C32440 +
                    (C17885 + C17884 + C17883) * C31540 +
                    (C17882 + C17881 + C17880) * C32754 +
                    (C17879 + C17878 + C17877) * C31559) *
                       C20880) *
                      C32491 * C32477 * C111 +
                  ((C17897 * C31559 + C17898 * C32754 +
                    (C17894 + C17893 + C17892) * C31540 +
                    (C17891 + C17890 + C17889) * C32440) *
                       C20880 +
                   ((C18476 + C18475 + C18474) * C31559 +
                    (C18473 + C18472 + C18471) * C32754 +
                    (C31688 * C349 + C32573 * C361 + C31680 * C699 +
                     C32580 * C707 + C31694 * C1508 + C17830 * C1509) *
                        C31540 +
                    (C31688 * C360 + C32573 * C379 + C31680 * C708 +
                     C32580 * C714 + C31694 * C1510 + C17830 * C1511) *
                        C32440) *
                       C32619) *
                      C32491 * C32477 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                     C32580 * C262 + C31694 * C248 + C17830 * C263) *
                        C31559 +
                    (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                     C32580 * C277 + C31694 * C264 + C17830 * C278) *
                        C32754 +
                    (C17877 + C17878 + C17879) * C31540 +
                    (C17880 + C17881 + C17882) * C32440) *
                       C20880 +
                   ((C20139 + C20140 + C20141) * C31559 +
                    (C20142 + C20143 + C20144) * C32754 + C20567 * C31540 +
                    C20568 * C32440) *
                       C32619) *
                      C345 -
                  (((C20145 + C20146 + C20147) * C32440 +
                    (C20148 + C20149 + C20150) * C31540 +
                    (C20151 + C20152 + C20153) * C32754 +
                    (C20154 + C20155 + C20156) * C31559) *
                       C32619 +
                   (C20569 * C32440 + C20570 * C31540 +
                    (C20144 + C20143 + C20142) * C32754 +
                    (C20141 + C20140 + C20139) * C31559) *
                       C20880) *
                      C346 +
                  (((C20156 + C20155 + C20154) * C31559 +
                    (C20153 + C20152 + C20151) * C32754 +
                    (C20150 + C20149 + C20148) * C31540 +
                    (C20147 + C20146 + C20145) * C32440) *
                       C20880 +
                   ((C31688 * C2059 + C32573 * C2068 + C31680 * C2616 +
                     C32580 * C2619 + C31694 * C7024 + C17830 * C7028) *
                        C31559 +
                    (C31688 * C2067 + C32573 * C2077 + C31680 * C2620 +
                     C32580 * C2625 + C31694 * C7027 + C17830 * C7033) *
                        C32754 +
                    (C31688 * C2058 + C32573 * C2066 + C31680 * C2617 +
                     C32580 * C2621 + C31694 * C7393 + C17830 * C7394) *
                        C31540 +
                    (C31688 * C2065 + C32573 * C2076 + C31680 * C2622 +
                     C32580 * C2626 + C31694 * C7395 + C17830 * C7396) *
                        C32440) *
                       C32619) *
                      C347) *
                 C32477 * C32465) /
                    (p * q * std::sqrt(p + q));
    d2ee[28] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                      C32580 * C262 + C31694 * C248 + C17830 * C263) *
                         C31559 +
                     (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                      C32580 * C277 + C31694 * C264 + C17830 * C278) *
                         C32754 +
                     (C17877 + C17878 + C17879) * C31540 +
                     (C17880 + C17881 + C17882) * C32440) *
                        C20880 +
                    ((C20139 + C20140 + C20141) * C31559 +
                     (C20142 + C20143 + C20144) * C32754 + C20567 * C31540 +
                     C20568 * C32440) *
                        C32619) *
                       C584 -
                   (((C20145 + C20146 + C20147) * C32440 +
                     (C20148 + C20149 + C20150) * C31540 +
                     (C20151 + C20152 + C20153) * C32754 +
                     (C20154 + C20155 + C20156) * C31559) *
                        C32619 +
                    (C20569 * C32440 + C20570 * C31540 +
                     (C20144 + C20143 + C20142) * C32754 +
                     (C20141 + C20140 + C20139) * C31559) *
                        C20880) *
                       C585) *
                      C32477 * C472 +
                  (((C20567 * C31559 + C20568 * C32754 +
                     (C18476 + C18475 + C18474) * C31540 +
                     (C18473 + C18472 + C18471) * C32440) *
                        C20880 +
                    ((C20150 + C20149 + C20148) * C31559 +
                     (C20147 + C20146 + C20145) * C32754 +
                     (C31688 * C355 + C32573 * C372 + C31680 * C1147 +
                      C32580 * C1163 + C31694 * C1148 + C17830 * C1164) *
                         C31540 +
                     (C31688 * C373 + C32573 * C385 + C31680 * C1165 +
                      C32580 * C1174 + C31694 * C1166 + C17830 * C1175) *
                         C32440) *
                        C32619) *
                       C585 -
                   (((C18471 + C18472 + C18473) * C32440 +
                     (C18474 + C18475 + C18476) * C31540 + C20569 * C32754 +
                     C20570 * C31559) *
                        C32619 +
                    ((C17888 + C17887 + C17886) * C32440 +
                     (C17885 + C17884 + C17883) * C31540 +
                     (C17882 + C17881 + C17880) * C32754 +
                     (C17879 + C17878 + C17877) * C31559) *
                        C20880) *
                       C584) *
                      C32477 * C473)) /
                (p * q * std::sqrt(p + q));
    d2ee[29] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                     C32580 * C262 + C31694 * C248 + C17830 * C263) *
                        C31559 +
                    (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                     C32580 * C277 + C31694 * C264 + C17830 * C278) *
                        C32754 +
                    (C17877 + C17878 + C17879) * C31540 +
                    (C17880 + C17881 + C17882) * C32440) *
                       C20880 +
                   ((C20139 + C20140 + C20141) * C31559 +
                    (C20142 + C20143 + C20144) * C32754 + C20567 * C31540 +
                    C20568 * C32440) *
                       C32619) *
                      C32491 * C32477 * C110 -
                  (((C18471 + C18472 + C18473) * C32440 +
                    (C18474 + C18475 + C18476) * C31540 + C20569 * C32754 +
                    C20570 * C31559) *
                       C32619 +
                   ((C17888 + C17887 + C17886) * C32440 +
                    (C17885 + C17884 + C17883) * C31540 +
                    (C17882 + C17881 + C17880) * C32754 +
                    (C17879 + C17878 + C17877) * C31559) *
                       C20880) *
                      C32491 * C32477 * C111 +
                  ((C17897 * C31559 + C17898 * C32754 +
                    (C17894 + C17893 + C17892) * C31540 +
                    (C17891 + C17890 + C17889) * C32440) *
                       C20880 +
                   ((C18476 + C18475 + C18474) * C31559 +
                    (C18473 + C18472 + C18471) * C32754 +
                    (C31688 * C349 + C32573 * C361 + C31680 * C699 +
                     C32580 * C707 + C31694 * C1508 + C17830 * C1509) *
                        C31540 +
                    (C31688 * C360 + C32573 * C379 + C31680 * C708 +
                     C32580 * C714 + C31694 * C1510 + C17830 * C1511) *
                        C32440) *
                       C32619) *
                      C32491 * C32477 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                     C32580 * C262 + C31694 * C248 + C17830 * C263) *
                        C31559 +
                    (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                     C32580 * C277 + C31694 * C264 + C17830 * C278) *
                        C32754 +
                    (C17877 + C17878 + C17879) * C31540 +
                    (C17880 + C17881 + C17882) * C32440) *
                       C20880 +
                   ((C20139 + C20140 + C20141) * C31559 +
                    (C20142 + C20143 + C20144) * C32754 + C20567 * C31540 +
                    C20568 * C32440) *
                       C32619) *
                      C32491 * C239 -
                  (((C20363 + C20364 + C20365) * C32440 +
                    (C20366 + C20367 + C20368) * C31540 +
                    (C20782 + C20781 + C20780) * C32754 +
                    (C20779 + C20778 + C20777) * C31559) *
                       C32619 +
                   ((C18295 + C18296 + C18297) * C32440 +
                    (C18298 + C18299 + C18300) * C31540 +
                    (C31694 * C1016 + C17830 * C1026 + C31680 * C264 +
                     C32580 * C278 + C31688 * C261 + C32573 * C277) *
                        C32754 +
                    (C31694 * C1008 + C17830 * C1017 + C31680 * C248 +
                     C32580 * C263 + C31688 * C247 + C32573 * C262) *
                        C31559) *
                       C20880) *
                      C32491 * C240 +
                  (((C31688 * C248 + C32573 * C263 + C31680 * C1008 +
                     C32580 * C1017 + C31694 * C1009 + C17830 * C1018) *
                        C31559 +
                    (C31688 * C264 + C32573 * C278 + C31680 * C1016 +
                     C32580 * C1026 + C31694 * C1019 + C17830 * C1027) *
                        C32754 +
                    (C31688 * C249 + C32573 * C265 + C31680 * C1007 +
                     C32580 * C1015 + C31694 * C1010 + C17830 * C1020) *
                        C31540 +
                    (C31688 * C266 + C32573 * C279 + C31680 * C1014 +
                     C32580 * C1025 + C31694 * C1021 + C17830 * C1028) *
                        C32440) *
                       C20880 +
                   ((C31688 * C1142 + C32573 * C1154 + C31680 * C1694 +
                     C32580 * C1697 + C31694 * C6424 + C17830 * C6428) *
                        C31559 +
                    (C31688 * C1153 + C32573 * C1169 + C31680 * C1698 +
                     C32580 * C1703 + C31694 * C6427 + C17830 * C6433) *
                        C32754 +
                    (C31688 * C1141 + C32573 * C1152 + C31680 * C1695 +
                     C32580 * C1699 + C31694 * C6604 + C17830 * C6605) *
                        C31540 +
                    (C31688 * C1151 + C32573 * C1168 + C31680 * C1700 +
                     C32580 * C1704 + C31694 * C6606 + C17830 * C6607) *
                        C32440) *
                       C32619) *
                      C32491 * C241) *
                 C32465) /
                    (p * q * std::sqrt(p + q));
    d2ee[30] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                      C32580 * C262 + C31694 * C248 + C17830 * C263) *
                         C6291 +
                     (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                      C32580 * C277 + C31694 * C264 + C17830 * C278) *
                         C32430) *
                        C32615 +
                    ((C20139 + C20140 + C20141) * C6291 +
                     (C20142 + C20143 + C20144) * C32430) *
                        C32622 +
                    C31039 * C24412) *
                       C32491 * C470 -
                   (((C31694 * C6431 + C17830 * C6434 + C31680 * C1158 +
                      C32580 * C1171 + C31688 * C1157 + C32573 * C1170) *
                         C32430 +
                     (C31694 * C6425 + C17830 * C6429 + C31680 * C1144 +
                      C32580 * C1156 + C31688 * C1143 + C32573 * C1155) *
                         C6291) *
                        C24412 +
                    ((C20782 + C20781 + C20780) * C32430 +
                     (C20779 + C20778 + C20777) * C6291) *
                        C32622 +
                    ((C31694 * C1016 + C17830 * C1026 + C31680 * C264 +
                      C32580 * C278 + C31688 * C261 + C32573 * C277) *
                         C32430 +
                     (C31694 * C1008 + C17830 * C1017 + C31680 * C248 +
                      C32580 * C263 + C31688 * C247 + C32573 * C262) *
                         C6291) *
                        C32615) *
                       C32491 * C471) *
                      C472 +
                  ((((C18300 + C18299 + C18298) * C6291 +
                     (C18297 + C18296 + C18295) * C32430) *
                        C32615 +
                    ((C20368 + C20367 + C20366) * C6291 +
                     (C20365 + C20364 + C20363) * C32430) *
                        C32622 +
                    ((C31688 * C1145 + C32573 * C1159 + C31680 * C1146 +
                      C32580 * C1160 + C31694 * C7243 + C17830 * C7244) *
                         C6291 +
                     (C31688 * C1161 + C32573 * C1172 + C31680 * C1162 +
                      C32580 * C1173 + C31694 * C7245 + C17830 * C7246) *
                         C32430) *
                        C24412) *
                       C32491 * C471 -
                   (((C20145 + C20146 + C20147) * C32430 +
                     (C20148 + C20149 + C20150) * C6291) *
                        C24412 +
                    (C20569 * C32430 + C20570 * C6291) * C32622 +
                    ((C17882 + C17881 + C17880) * C32430 +
                     (C17879 + C17878 + C17877) * C6291) *
                        C32615) *
                       C32491 * C470) *
                      C473)) /
                (p * q * std::sqrt(p + q));
    d2ee[31] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                      C32580 * C262 + C31694 * C248 + C17830 * C263) *
                         C6291 +
                     (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                      C32580 * C277 + C31694 * C264 + C17830 * C278) *
                         C32430) *
                        C32615 +
                    ((C20139 + C20140 + C20141) * C6291 +
                     (C20142 + C20143 + C20144) * C32430) *
                        C32622 +
                    C31039 * C24412) *
                       C584 -
                   (((C31031 + C31032 + C31033) * C32430 +
                     (C31034 + C31035 + C31036) * C6291) *
                        C24412 +
                    ((C20151 + C20152 + C20153) * C32430 +
                     (C20154 + C20155 + C20156) * C6291) *
                        C32622 +
                    ((C20144 + C20143 + C20142) * C32430 +
                     (C20141 + C20140 + C20139) * C6291) *
                        C32615) *
                       C585) *
                      C470 +
                  ((((C20777 + C20778 + C20779) * C6291 +
                     (C20780 + C20781 + C20782) * C32430) *
                        C32615 +
                    ((C31490 + C31491 + C31492) * C6291 +
                     (C31493 + C31494 + C31495) * C32430) *
                        C32622 +
                    ((C31688 * C2616 + C32573 * C2619 + C31680 * C7024 +
                      C32580 * C7028 + C31694 * C7561 + C17830 * C7562) *
                         C6291 +
                     (C31688 * C2620 + C32573 * C2625 + C31680 * C7027 +
                      C32580 * C7033 + C31694 * C7563 + C17830 * C7564) *
                         C32430) *
                        C24412) *
                       C585 -
                   (((C31495 + C31494 + C31493) * C32430 +
                     (C31492 + C31491 + C31490) * C6291) *
                        C24412 +
                    ((C20782 + C20781 + C20780) * C32430 +
                     (C20779 + C20778 + C20777) * C6291) *
                        C32622 +
                    ((C31694 * C1016 + C17830 * C1026 + C31680 * C264 +
                      C32580 * C278 + C31688 * C261 + C32573 * C277) *
                         C32430 +
                     (C31694 * C1008 + C17830 * C1017 + C31680 * C248 +
                      C32580 * C263 + C31688 * C247 + C32573 * C262) *
                         C6291) *
                        C32615) *
                       C584) *
                      C471) *
                 C32465) /
                (p * q * std::sqrt(p + q));
    d2ee[32] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                     C32580 * C262 + C31694 * C248 + C17830 * C263) *
                        C6291 +
                    (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                     C32580 * C277 + C31694 * C264 + C17830 * C278) *
                        C32430) *
                       C32615 +
                   ((C20139 + C20140 + C20141) * C6291 +
                    (C20142 + C20143 + C20144) * C32430) *
                       C32622 +
                   ((C20156 + C20155 + C20154) * C6291 +
                    (C20153 + C20152 + C20151) * C32430) *
                       C24412) *
                      C32491 * C239 -
                  (((C31694 * C6431 + C17830 * C6434 + C31680 * C1158 +
                     C32580 * C1171 + C31688 * C1157 + C32573 * C1170) *
                        C32430 +
                    (C31694 * C6425 + C17830 * C6429 + C31680 * C1144 +
                     C32580 * C1156 + C31688 * C1143 + C32573 * C1155) *
                        C6291) *
                       C24412 +
                   ((C20782 + C20781 + C20780) * C32430 +
                    (C20779 + C20778 + C20777) * C6291) *
                       C32622 +
                   ((C31694 * C1016 + C17830 * C1026 + C31680 * C264 +
                     C32580 * C278 + C31688 * C261 + C32573 * C277) *
                        C32430 +
                    (C31694 * C1008 + C17830 * C1017 + C31680 * C248 +
                     C32580 * C263 + C31688 * C247 + C32573 * C262) *
                        C6291) *
                       C32615) *
                      C32491 * C240 +
                  (((C31688 * C248 + C32573 * C263 + C31680 * C1008 +
                     C32580 * C1017 + C31694 * C1009 + C17830 * C1018) *
                        C6291 +
                    (C31688 * C264 + C32573 * C278 + C31680 * C1016 +
                     C32580 * C1026 + C31694 * C1019 + C17830 * C1027) *
                        C32430) *
                       C32615 +
                   ((C31688 * C1142 + C32573 * C1154 + C31680 * C1694 +
                     C32580 * C1697 + C31694 * C6424 + C17830 * C6428) *
                        C6291 +
                    (C31688 * C1153 + C32573 * C1169 + C31680 * C1698 +
                     C32580 * C1703 + C31694 * C6427 + C17830 * C6433) *
                        C32430) *
                       C32622 +
                   ((C31688 * C1144 + C32573 * C1156 + C31680 * C6425 +
                     C32580 * C6429 + C31694 * C6426 + C17830 * C6430) *
                        C6291 +
                    (C31688 * C1158 + C32573 * C1171 + C31680 * C6431 +
                     C32580 * C6434 + C31694 * C6432 + C17830 * C6435) *
                        C32430) *
                       C24412) *
                      C32491 * C241) *
                 C32465) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                     C32580 * C262 + C31694 * C248 + C17830 * C263) *
                        C6291 +
                    (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                     C32580 * C277 + C31694 * C264 + C17830 * C278) *
                        C32430) *
                       C32615 +
                   ((C20139 + C20140 + C20141) * C6291 +
                    (C20142 + C20143 + C20144) * C32430) *
                       C32622 +
                   ((C20156 + C20155 + C20154) * C6291 +
                    (C20153 + C20152 + C20151) * C32430) *
                       C24412) *
                      C32491 * C32477 * C110 -
                  (((C20145 + C20146 + C20147) * C32430 +
                    (C20148 + C20149 + C20150) * C6291) *
                       C24412 +
                   (C20569 * C32430 + C20570 * C6291) * C32622 +
                   ((C17882 + C17881 + C17880) * C32430 +
                    (C17879 + C17878 + C17877) * C6291) *
                       C32615) *
                      C32491 * C32477 * C111 +
                  ((C17897 * C6291 + C17898 * C32430) * C32615 +
                   ((C18476 + C18475 + C18474) * C6291 +
                    (C18473 + C18472 + C18471) * C32430) *
                       C32622 +
                   ((C31688 * C355 + C32573 * C372 + C31680 * C1147 +
                     C32580 * C1163 + C31694 * C1148 + C17830 * C1164) *
                        C6291 +
                    (C31688 * C373 + C32573 * C385 + C31680 * C1165 +
                     C32580 * C1174 + C31694 * C1166 + C17830 * C1175) *
                        C32430) *
                       C24412) *
                      C32491 * C32477 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                     C32580 * C262 + C31694 * C248 + C17830 * C263) *
                        C6291 +
                    (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                     C32580 * C277 + C31694 * C264 + C17830 * C278) *
                        C32430) *
                       C32615 +
                   ((C20139 + C20140 + C20141) * C6291 +
                    (C20142 + C20143 + C20144) * C32430) *
                       C32622 +
                   C31039 * C24412) *
                      C345 -
                  (((C31031 + C31032 + C31033) * C32430 +
                    (C31034 + C31035 + C31036) * C6291) *
                       C24412 +
                   ((C20151 + C20152 + C20153) * C32430 +
                    (C20154 + C20155 + C20156) * C6291) *
                       C32622 +
                   ((C20144 + C20143 + C20142) * C32430 +
                    (C20141 + C20140 + C20139) * C6291) *
                       C32615) *
                      C346 +
                  (C31039 * C32615 +
                   ((C31036 + C31035 + C31034) * C6291 +
                    (C31033 + C31032 + C31031) * C32430) *
                       C32622 +
                   ((C31688 * C2060 + C32573 * C2069 + C31680 * C7025 +
                     C32580 * C7029 + C31694 * C7026 + C17830 * C7030) *
                        C6291 +
                    (C31688 * C2070 + C32573 * C2078 + C31680 * C7031 +
                     C32580 * C7034 + C31694 * C7032 + C17830 * C7035) *
                        C32430) *
                       C24412) *
                      C347) *
                 C32477 * C32465) /
                    (p * q * std::sqrt(p + q));
    d2ee[33] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                      C32580 * C262 + C31694 * C248 + C17830 * C263) *
                         C6291 +
                     (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                      C32580 * C277 + C31694 * C264 + C17830 * C278) *
                         C32430) *
                        C32615 +
                    ((C20139 + C20140 + C20141) * C6291 +
                     (C20142 + C20143 + C20144) * C32430) *
                        C32622 +
                    C31039 * C24412) *
                       C584 -
                   (((C31031 + C31032 + C31033) * C32430 +
                     (C31034 + C31035 + C31036) * C6291) *
                        C24412 +
                    ((C20151 + C20152 + C20153) * C32430 +
                     (C20154 + C20155 + C20156) * C6291) *
                        C32622 +
                    ((C20144 + C20143 + C20142) * C32430 +
                     (C20141 + C20140 + C20139) * C6291) *
                        C32615) *
                       C585) *
                      C32477 * C472 +
                  (((C20567 * C6291 + C20568 * C32430) * C32615 +
                    ((C20150 + C20149 + C20148) * C6291 +
                     (C20147 + C20146 + C20145) * C32430) *
                        C32622 +
                    ((C31688 * C2058 + C32573 * C2066 + C31680 * C2617 +
                      C32580 * C2621 + C31694 * C7393 + C17830 * C7394) *
                         C6291 +
                     (C31688 * C2065 + C32573 * C2076 + C31680 * C2622 +
                      C32580 * C2626 + C31694 * C7395 + C17830 * C7396) *
                         C32430) *
                        C24412) *
                       C585 -
                   (((C20145 + C20146 + C20147) * C32430 +
                     (C20148 + C20149 + C20150) * C6291) *
                        C24412 +
                    (C20569 * C32430 + C20570 * C6291) * C32622 +
                    ((C17882 + C17881 + C17880) * C32430 +
                     (C17879 + C17878 + C17877) * C6291) *
                        C32615) *
                       C584) *
                      C32477 * C473)) /
                (p * q * std::sqrt(p + q));
    d2ee[34] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                     C32580 * C262 + C31694 * C248 + C17830 * C263) *
                        C6291 +
                    (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                     C32580 * C277 + C31694 * C264 + C17830 * C278) *
                        C32430) *
                       C32615 +
                   ((C20139 + C20140 + C20141) * C6291 +
                    (C20142 + C20143 + C20144) * C32430) *
                       C32622 +
                   ((C20156 + C20155 + C20154) * C6291 +
                    (C20153 + C20152 + C20151) * C32430) *
                       C24412) *
                      C32491 * C32477 * C110 -
                  (((C20145 + C20146 + C20147) * C32430 +
                    (C20148 + C20149 + C20150) * C6291) *
                       C24412 +
                   (C20569 * C32430 + C20570 * C6291) * C32622 +
                   ((C17882 + C17881 + C17880) * C32430 +
                    (C17879 + C17878 + C17877) * C6291) *
                       C32615) *
                      C32491 * C32477 * C111 +
                  ((C17897 * C6291 + C17898 * C32430) * C32615 +
                   ((C18476 + C18475 + C18474) * C6291 +
                    (C18473 + C18472 + C18471) * C32430) *
                       C32622 +
                   ((C31688 * C355 + C32573 * C372 + C31680 * C1147 +
                     C32580 * C1163 + C31694 * C1148 + C17830 * C1164) *
                        C6291 +
                    (C31688 * C373 + C32573 * C385 + C31680 * C1165 +
                     C32580 * C1174 + C31694 * C1166 + C17830 * C1175) *
                        C32430) *
                       C24412) *
                      C32491 * C32477 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C31688 * C119 + C32573 * C126 + C31680 * C247 +
                     C32580 * C262 + C31694 * C248 + C17830 * C263) *
                        C6291 +
                    (C31688 * C127 + C32573 * C140 + C31680 * C261 +
                     C32580 * C277 + C31694 * C264 + C17830 * C278) *
                        C32430) *
                       C32615 +
                   ((C20139 + C20140 + C20141) * C6291 +
                    (C20142 + C20143 + C20144) * C32430) *
                       C32622 +
                   ((C20156 + C20155 + C20154) * C6291 +
                    (C20153 + C20152 + C20151) * C32430) *
                       C24412) *
                      C32491 * C239 -
                  (((C31694 * C6431 + C17830 * C6434 + C31680 * C1158 +
                     C32580 * C1171 + C31688 * C1157 + C32573 * C1170) *
                        C32430 +
                    (C31694 * C6425 + C17830 * C6429 + C31680 * C1144 +
                     C32580 * C1156 + C31688 * C1143 + C32573 * C1155) *
                        C6291) *
                       C24412 +
                   ((C20782 + C20781 + C20780) * C32430 +
                    (C20779 + C20778 + C20777) * C6291) *
                       C32622 +
                   ((C31694 * C1016 + C17830 * C1026 + C31680 * C264 +
                     C32580 * C278 + C31688 * C261 + C32573 * C277) *
                        C32430 +
                    (C31694 * C1008 + C17830 * C1017 + C31680 * C248 +
                     C32580 * C263 + C31688 * C247 + C32573 * C262) *
                        C6291) *
                       C32615) *
                      C32491 * C240 +
                  (((C31688 * C248 + C32573 * C263 + C31680 * C1008 +
                     C32580 * C1017 + C31694 * C1009 + C17830 * C1018) *
                        C6291 +
                    (C31688 * C264 + C32573 * C278 + C31680 * C1016 +
                     C32580 * C1026 + C31694 * C1019 + C17830 * C1027) *
                        C32430) *
                       C32615 +
                   ((C31688 * C1142 + C32573 * C1154 + C31680 * C1694 +
                     C32580 * C1697 + C31694 * C6424 + C17830 * C6428) *
                        C6291 +
                    (C31688 * C1153 + C32573 * C1169 + C31680 * C1698 +
                     C32580 * C1703 + C31694 * C6427 + C17830 * C6433) *
                        C32430) *
                       C32622 +
                   ((C31688 * C1144 + C32573 * C1156 + C31680 * C6425 +
                     C32580 * C6429 + C31694 * C6426 + C17830 * C6430) *
                        C6291 +
                    (C31688 * C1158 + C32573 * C1171 + C31680 * C6431 +
                     C32580 * C6434 + C31694 * C6432 + C17830 * C6435) *
                        C32430) *
                       C24412) *
                      C32491 * C241) *
                 C32465) /
                    (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
              C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
                 C6291 +
             (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
              C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
                 C32430) *
                C20880 +
            ((C27492 + C27493 + C27494 + C27495) * C6291 +
             (C27496 + C27497 + C27498 + C27499) * C32430) *
                C32619) *
               C32491 * C470 -
           (((C15876 * C6427 + C32814 * C6433 + C15875 * C1698 +
              C32832 * C1703 + C15874 * C1153 + C32842 * C1169 + C15873 * C702 +
              C32846 * C711) *
                 C32430 +
             (C15876 * C6424 + C32814 * C6428 + C15875 * C1694 +
              C32832 * C1697 + C15874 * C1142 + C32842 * C1154 + C15873 * C696 +
              C32846 * C701) *
                 C6291) *
                C32619 +
            ((C15876 * C1019 + C32814 * C1027 + C15875 * C1016 +
              C32832 * C1026 + C15874 * C264 + C32842 * C278 + C15873 * C261 +
              C32846 * C277) *
                 C32430 +
             (C15876 * C1009 + C32814 * C1018 + C15875 * C1008 +
              C32832 * C1017 + C15874 * C248 + C32842 * C263 + C15873 * C247 +
              C32846 * C262) *
                 C6291) *
                C20880) *
               C32491 * C471) *
              C472 +
          ((((C16277 + C16276 + C16275 + C16274) * C6291 +
             (C16273 + C16272 + C16271 + C16270) * C32430) *
                C20880 +
            ((C15873 * C697 + C32846 * C703 + C15874 * C1141 + C32842 * C1152 +
              C15875 * C1695 + C32832 * C1699 + C15876 * C6604 +
              C32814 * C6605) *
                 C6291 +
             (C15873 * C704 + C32846 * C712 + C15874 * C1151 + C32842 * C1168 +
              C15875 * C1700 + C32832 * C1704 + C15876 * C6606 +
              C32814 * C6607) *
                 C32430) *
                C32619) *
               C32491 * C471 -
           (((C16424 + C16425 + C16426 + C16427) * C32430 +
             (C16428 + C16429 + C16430 + C16431) * C6291) *
                C32619 +
            ((C15919 + C15918 + C15917 + C15916) * C32430 +
             (C15915 + C15914 + C15913 + C15912) * C6291) *
                C20880) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                 C5427 +
             (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                 C32836 +
             (C15092 + C15093) * C5428 + (C15094 + C15095) * C32823 +
             C15108 * C5429 + C15109 * C32793) *
                C20880 +
            ((C17058 + C17059) * C5427 + (C17060 + C17061) * C32836 +
             C17495 * C5428 + C17496 * C32823 + C18775 * C5429 +
             C18776 * C32793) *
                C32619) *
               C32491 * C470 -
           (((C19271 + C19272) * C32793 + (C19273 + C19274) * C5429 +
             (C17297 + C17298) * C32823 + (C17299 + C17300) * C5428 +
             (C17714 + C17713) * C32836 + (C17712 + C17711) * C5427) *
                C32619 +
            ((C15466 + C15467) * C32793 + (C15468 + C15469) * C5429 +
             (C15470 + C15471) * C32823 + (C15472 + C15473) * C5428 +
             (C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                 C32836 +
             (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                 C5427) *
                C20880) *
               C32491 * C471) *
              C472 +
          ((((C15473 + C15472) * C5427 + (C15471 + C15470) * C32836 +
             (C15469 + C15468) * C5428 + (C15467 + C15466) * C32823 +
             (C15465 + C15464) * C5429 + (C15463 + C15462) * C32793) *
                C20880 +
            ((C17300 + C17299) * C5427 + (C17298 + C17297) * C32836 +
             (C19274 + C19273) * C5428 + (C19272 + C19271) * C32823 +
             (C15053 * C699 + C15047 * C707 + C15054 * C1508 + C32577 * C1509) *
                 C5429 +
             (C15053 * C708 + C15047 * C714 + C15054 * C1510 + C32577 * C1511) *
                 C32793) *
                C32619) *
               C32491 * C471 -
           (((C15628 + C15629) * C32793 + (C15630 + C15631) * C5429 +
             C19469 * C32823 + C19470 * C5428 + C17499 * C32836 +
             C17500 * C5427) *
                C32619 +
            ((C15103 + C15102) * C32793 + (C15101 + C15100) * C5429 +
             (C15099 + C15098) * C32823 + (C15097 + C15096) * C5428 +
             (C15095 + C15094) * C32836 + (C15093 + C15092) * C5427) *
                C20880) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                 C6291 +
             (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                 C32430) *
                C32847 +
            ((C17058 + C17059) * C6291 + (C17060 + C17061) * C32430) * C32844 +
            C28228 * C32835 + C28235 * C32820) *
               C32491 * C470 -
           (((C15054 * C7027 + C32577 * C7033 + C15053 * C2620 +
              C15047 * C2625) *
                 C32430 +
             (C15054 * C7024 + C32577 * C7028 + C15053 * C2616 +
              C15047 * C2619) *
                 C6291) *
                C32820 +
            ((C17718 + C17717) * C32430 + (C17716 + C17715) * C6291) * C32835 +
            ((C17714 + C17713) * C32430 + (C17712 + C17711) * C6291) * C32844 +
            ((C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                 C32430 +
             (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                 C6291) *
                C32847) *
               C32491 * C471) *
              C472 +
          ((((C15473 + C15472) * C6291 + (C15471 + C15470) * C32430) * C32847 +
            ((C17300 + C17299) * C6291 + (C17298 + C17297) * C32430) * C32844 +
            ((C17296 + C17295) * C6291 + (C17294 + C17293) * C32430) * C32835 +
            ((C15053 * C2617 + C15047 * C2621 + C15054 * C7393 +
              C32577 * C7394) *
                 C6291 +
             (C15053 * C2622 + C15047 * C2626 + C15054 * C7395 +
              C32577 * C7396) *
                 C32430) *
                C32820) *
               C32491 * C471 -
           (((C17068 + C17069) * C32430 + (C17070 + C17071) * C6291) * C32820 +
            (C17497 * C32430 + C17498 * C6291) * C32835 +
            (C17499 * C32430 + C17500 * C6291) * C32844 +
            ((C15095 + C15094) * C32430 + (C15093 + C15092) * C6291) * C32847) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
              C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
                 C6291 +
             (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
              C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
                 C32430) *
                C20880 +
            ((C27492 + C27493 + C27494 + C27495) * C6291 +
             (C27496 + C27497 + C27498 + C27499) * C32430) *
                C32619) *
               C584 -
           (((C27500 + C27501 + C27502 + C27503) * C32430 +
             (C27504 + C27505 + C27506 + C27507) * C6291) *
                C32619 +
            ((C27499 + C27498 + C27497 + C27496) * C32430 +
             (C27495 + C27494 + C27493 + C27492) * C6291) *
                C20880) *
               C585) *
              C470 +
          ((((C27914 + C27915 + C27916 + C27917) * C6291 +
             (C27918 + C27919 + C27920 + C27921) * C32430) *
                C20880 +
            ((C15873 * C1143 + C32846 * C1155 + C15874 * C1144 +
              C32842 * C1156 + C15875 * C6425 + C32832 * C6429 +
              C15876 * C6426 + C32814 * C6430) *
                 C6291 +
             (C15873 * C1157 + C32846 * C1170 + C15874 * C1158 +
              C32842 * C1171 + C15875 * C6431 + C32832 * C6434 +
              C15876 * C6432 + C32814 * C6435) *
                 C32430) *
                C32619) *
               C585 -
           (((C27921 + C27920 + C27919 + C27918) * C32430 +
             (C27917 + C27916 + C27915 + C27914) * C6291) *
                C32619 +
            ((C15876 * C1019 + C32814 * C1027 + C15875 * C1016 +
              C32832 * C1026 + C15874 * C264 + C32842 * C278 + C15873 * C261 +
              C32846 * C277) *
                 C32430 +
             (C15876 * C1009 + C32814 * C1018 + C15875 * C1008 +
              C32832 * C1017 + C15874 * C248 + C32842 * C263 + C15873 * C247 +
              C32846 * C262) *
                 C6291) *
                C20880) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                 C5427 +
             (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                 C32836 +
             (C15092 + C15093) * C5428 + (C15094 + C15095) * C32823 +
             C15108 * C5429 + C15109 * C32793) *
                C20880 +
            ((C17058 + C17059) * C5427 + (C17060 + C17061) * C32836 +
             C17495 * C5428 + C17496 * C32823 + C18775 * C5429 +
             C18776 * C32793) *
                C32619) *
               C584 -
           (((C16728 + C16729) * C32793 + (C16730 + C16731) * C5429 +
             C17497 * C32823 + C17498 * C5428 + (C17065 + C17064) * C32836 +
             (C17063 + C17062) * C5427) *
                C32619 +
            (C19469 * C32793 + C19470 * C5429 + C17499 * C32823 +
             C17500 * C5428 + (C17061 + C17060) * C32836 +
             (C17059 + C17058) * C5427) *
                C20880) *
               C585) *
              C470 +
          ((((C17711 + C17712) * C5427 + (C17713 + C17714) * C32836 +
             (C17300 + C17299) * C5428 + (C17298 + C17297) * C32823 +
             (C19274 + C19273) * C5429 + (C19272 + C19271) * C32793) *
                C20880 +
            ((C17715 + C17716) * C5427 + (C17717 + C17718) * C32836 +
             (C17296 + C17295) * C5428 + (C17294 + C17293) * C32823 +
             (C15053 * C1147 + C15047 * C1163 + C15054 * C1148 +
              C32577 * C1164) *
                 C5429 +
             (C15053 * C1165 + C15047 * C1174 + C15054 * C1166 +
              C32577 * C1175) *
                 C32793) *
                C32619) *
               C585 -
           (((C19271 + C19272) * C32793 + (C19273 + C19274) * C5429 +
             (C17297 + C17298) * C32823 + (C17299 + C17300) * C5428 +
             (C17714 + C17713) * C32836 + (C17712 + C17711) * C5427) *
                C32619 +
            ((C15466 + C15467) * C32793 + (C15468 + C15469) * C5429 +
             (C15470 + C15471) * C32823 + (C15472 + C15473) * C5428 +
             (C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                 C32836 +
             (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                 C5427) *
                C20880) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                 C6291 +
             (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                 C32430) *
                C32847 +
            ((C17058 + C17059) * C6291 + (C17060 + C17061) * C32430) * C32844 +
            C28228 * C32835 + C28235 * C32820) *
               C584 -
           (((C28231 + C28232) * C32430 + (C28233 + C28234) * C6291) * C32820 +
            ((C17072 + C17073) * C32430 + (C17074 + C17075) * C6291) * C32835 +
            ((C17065 + C17064) * C32430 + (C17063 + C17062) * C6291) * C32844 +
            ((C17061 + C17060) * C32430 + (C17059 + C17058) * C6291) * C32847) *
               C585) *
              C470 +
          ((((C17711 + C17712) * C6291 + (C17713 + C17714) * C32430) * C32847 +
            ((C17715 + C17716) * C6291 + (C17717 + C17718) * C32430) * C32844 +
            ((C28634 + C28635) * C6291 + (C28636 + C28637) * C32430) * C32835 +
            ((C15053 * C7025 + C15047 * C7029 + C15054 * C7026 +
              C32577 * C7030) *
                 C6291 +
             (C15053 * C7031 + C15047 * C7034 + C15054 * C7032 +
              C32577 * C7035) *
                 C32430) *
                C32820) *
               C585 -
           (((C28637 + C28636) * C32430 + (C28635 + C28634) * C6291) * C32820 +
            ((C17718 + C17717) * C32430 + (C17716 + C17715) * C6291) * C32835 +
            ((C17714 + C17713) * C32430 + (C17712 + C17711) * C6291) * C32844 +
            ((C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                 C32430 +
             (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                 C6291) *
                C32847) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C15053 * C119 + C15047 * C126 + C15054 * C247 +
                 C32577 * C262) *
                    C5427 +
                (C15053 * C127 + C15047 * C140 + C15054 * C261 +
                 C32577 * C277) *
                    C32836 +
                (C15092 + C15093) * C5428 + (C15094 + C15095) * C32823 +
                C15108 * C5429 + C15109 * C32793) *
                   C20880 +
               ((C17058 + C17059) * C5427 + (C17060 + C17061) * C32836 +
                C17495 * C5428 + C17496 * C32823 + C18775 * C5429 +
                C18776 * C32793) *
                   C32619) *
                  C32491 * C32477 * C110 -
              (((C15628 + C15629) * C32793 + (C15630 + C15631) * C5429 +
                C19469 * C32823 + C19470 * C5428 + C17499 * C32836 +
                C17500 * C5427) *
                   C32619 +
               ((C15103 + C15102) * C32793 + (C15101 + C15100) * C5429 +
                (C15099 + C15098) * C32823 + (C15097 + C15096) * C5428 +
                (C15095 + C15094) * C32836 + (C15093 + C15092) * C5427) *
                   C20880) *
                  C32491 * C32477 * C111 +
              ((C15108 * C5427 + C15109 * C32836 + C15110 * C5428 +
                C15111 * C32823 + (C15107 + C15106) * C5429 +
                (C15105 + C15104) * C32793) *
                   C20880 +
               (C18775 * C5427 + C18776 * C32836 + (C15631 + C15630) * C5428 +
                (C15629 + C15628) * C32823 +
                (C15053 * C348 + C15047 * C359 + C15054 * C700 +
                 C32577 * C709) *
                    C5429 +
                (C15053 * C358 + C15047 * C378 + C15054 * C710 +
                 C32577 * C715) *
                    C32793) *
                   C32619) *
                  C32491 * C32477 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C15053 * C119 + C15047 * C126 + C15054 * C247 +
                 C32577 * C262) *
                    C5427 +
                (C15053 * C127 + C15047 * C140 + C15054 * C261 +
                 C32577 * C277) *
                    C32836 +
                (C15092 + C15093) * C5428 + (C15094 + C15095) * C32823 +
                C15108 * C5429 + C15109 * C32793) *
                   C20880 +
               ((C17058 + C17059) * C5427 + (C17060 + C17061) * C32836 +
                C17495 * C5428 + C17496 * C32823 + C18775 * C5429 +
                C18776 * C32793) *
                   C32619) *
                  C32491 * C239 -
              (((C19271 + C19272) * C32793 + (C19273 + C19274) * C5429 +
                (C17297 + C17298) * C32823 + (C17299 + C17300) * C5428 +
                (C17714 + C17713) * C32836 + (C17712 + C17711) * C5427) *
                   C32619 +
               ((C15466 + C15467) * C32793 + (C15468 + C15469) * C5429 +
                (C15470 + C15471) * C32823 + (C15472 + C15473) * C5428 +
                (C15054 * C264 + C32577 * C278 + C15053 * C261 +
                 C15047 * C277) *
                    C32836 +
                (C15054 * C248 + C32577 * C263 + C15053 * C247 +
                 C15047 * C262) *
                    C5427) *
                   C20880) *
                  C32491 * C240 +
              (((C15053 * C248 + C15047 * C263 + C15054 * C1008 +
                 C32577 * C1017) *
                    C5427 +
                (C15053 * C264 + C15047 * C278 + C15054 * C1016 +
                 C32577 * C1026) *
                    C32836 +
                (C15053 * C249 + C15047 * C265 + C15054 * C1007 +
                 C32577 * C1015) *
                    C5428 +
                (C15053 * C266 + C15047 * C279 + C15054 * C1014 +
                 C32577 * C1025) *
                    C32823 +
                (C15053 * C250 + C15047 * C267 + C15054 * C1006 +
                 C32577 * C1013) *
                    C5429 +
                (C15053 * C268 + C15047 * C280 + C15054 * C1012 +
                 C32577 * C1024) *
                    C32793) *
                   C20880 +
               ((C15053 * C1142 + C15047 * C1154 + C15054 * C1694 +
                 C32577 * C1697) *
                    C5427 +
                (C15053 * C1153 + C15047 * C1169 + C15054 * C1698 +
                 C32577 * C1703) *
                    C32836 +
                (C15053 * C1141 + C15047 * C1152 + C15054 * C1695 +
                 C32577 * C1699) *
                    C5428 +
                (C15053 * C1151 + C15047 * C1168 + C15054 * C1700 +
                 C32577 * C1704) *
                    C32823 +
                (C15053 * C1140 + C15047 * C1150 + C15054 * C1696 +
                 C32577 * C1701) *
                    C5429 +
                (C15053 * C1149 + C15047 * C1167 + C15054 * C1702 +
                 C32577 * C1705) *
                    C32793) *
                   C32619) *
                  C32491 * C241) *
             C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C5427 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32836 +
            (C15092 + C15093) * C5428 + (C15094 + C15095) * C32823 +
            C15108 * C5429 + C15109 * C32793) *
               C20880 +
           ((C17058 + C17059) * C5427 + (C17060 + C17061) * C32836 +
            C17495 * C5428 + C17496 * C32823 + C18775 * C5429 +
            C18776 * C32793) *
               C32619) *
              C345 -
          (((C16728 + C16729) * C32793 + (C16730 + C16731) * C5429 +
            C17497 * C32823 + C17498 * C5428 + (C17065 + C17064) * C32836 +
            (C17063 + C17062) * C5427) *
               C32619 +
           (C19469 * C32793 + C19470 * C5429 + C17499 * C32823 +
            C17500 * C5428 + (C17061 + C17060) * C32836 +
            (C17059 + C17058) * C5427) *
               C20880) *
              C346 +
          ((C17076 * C5427 + C17077 * C32836 + C17040 * C5428 +
            C17041 * C32823 + (C16731 + C16730) * C5429 +
            (C16729 + C16728) * C32793) *
               C20880 +
           ((C17075 + C17074) * C5427 + (C17073 + C17072) * C32836 +
            (C17071 + C17070) * C5428 + (C17069 + C17068) * C32823 +
            (C15053 * C2057 + C15047 * C2064 + C15054 * C2618 +
             C32577 * C2623) *
                C5429 +
            (C15053 * C2063 + C15047 * C2075 + C15054 * C2624 +
             C32577 * C2627) *
                C32793) *
               C32619) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
             C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
                C6291 +
            (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
             C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
                C32430) *
               C20880 +
           ((C15873 * C352 + C32846 * C367 + C15874 * C696 + C32842 * C701 +
             C15875 * C1142 + C32832 * C1154 + C15876 * C1694 +
             C32814 * C1697) *
                C6291 +
            (C15873 * C366 + C32846 * C382 + C15874 * C702 + C32842 * C711 +
             C15875 * C1153 + C32832 * C1169 + C15876 * C1698 +
             C32814 * C1703) *
                C32430) *
               C32619) *
              C32491 * C32477 * C110 -
          (((C16424 + C16425 + C16426 + C16427) * C32430 +
            (C16428 + C16429 + C16430 + C16431) * C6291) *
               C32619 +
           ((C15919 + C15918 + C15917 + C15916) * C32430 +
            (C15915 + C15914 + C15913 + C15912) * C6291) *
               C20880) *
              C32491 * C32477 * C111 +
          (((C15927 + C15926 + C15925 + C15924) * C6291 +
            (C15923 + C15922 + C15921 + C15920) * C32430) *
               C20880 +
           ((C15873 * C350 + C32846 * C363 + C15874 * C698 + C32842 * C705 +
             C15875 * C1140 + C32832 * C1150 + C15876 * C1696 +
             C32814 * C1701) *
                C6291 +
            (C15873 * C362 + C32846 * C380 + C15874 * C706 + C32842 * C713 +
             C15875 * C1149 + C32832 * C1167 + C15876 * C1702 +
             C32814 * C1705) *
                C32430) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
             C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
                C6291 +
            (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
             C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
                C32430) *
               C20880 +
           ((C15873 * C352 + C32846 * C367 + C15874 * C696 + C32842 * C701 +
             C15875 * C1142 + C32832 * C1154 + C15876 * C1694 +
             C32814 * C1697) *
                C6291 +
            (C15873 * C366 + C32846 * C382 + C15874 * C702 + C32842 * C711 +
             C15875 * C1153 + C32832 * C1169 + C15876 * C1698 +
             C32814 * C1703) *
                C32430) *
               C32619) *
              C32491 * C239 -
          (((C15876 * C6427 + C32814 * C6433 + C15875 * C1698 + C32832 * C1703 +
             C15874 * C1153 + C32842 * C1169 + C15873 * C702 + C32846 * C711) *
                C32430 +
            (C15876 * C6424 + C32814 * C6428 + C15875 * C1694 + C32832 * C1697 +
             C15874 * C1142 + C32842 * C1154 + C15873 * C696 + C32846 * C701) *
                C6291) *
               C32619 +
           ((C15876 * C1019 + C32814 * C1027 + C15875 * C1016 + C32832 * C1026 +
             C15874 * C264 + C32842 * C278 + C15873 * C261 + C32846 * C277) *
                C32430 +
            (C15876 * C1009 + C32814 * C1018 + C15875 * C1008 + C32832 * C1017 +
             C15874 * C248 + C32842 * C263 + C15873 * C247 + C32846 * C262) *
                C6291) *
               C20880) *
              C32491 * C240 +
          (((C15873 * C248 + C32846 * C263 + C15874 * C1008 + C32842 * C1017 +
             C15875 * C1009 + C32832 * C1018 + C15876 * C6354 +
             C32814 * C6357) *
                C6291 +
            (C15873 * C264 + C32846 * C278 + C15874 * C1016 + C32842 * C1026 +
             C15875 * C1019 + C32832 * C1027 + C15876 * C6356 +
             C32814 * C6360) *
                C32430) *
               C20880 +
           ((C15873 * C1142 + C32846 * C1154 + C15874 * C1694 + C32842 * C1697 +
             C15875 * C6424 + C32832 * C6428 + C15876 * C6690 +
             C32814 * C6691) *
                C6291 +
            (C15873 * C1153 + C32846 * C1169 + C15874 * C1698 + C32842 * C1703 +
             C15875 * C6427 + C32832 * C6433 + C15876 * C6692 +
             C32814 * C6693) *
                C32430) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
             C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
                C6291 +
            (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
             C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
                C32430) *
               C20880 +
           ((C27492 + C27493 + C27494 + C27495) * C6291 +
            (C27496 + C27497 + C27498 + C27499) * C32430) *
               C32619) *
              C345 -
          (((C27500 + C27501 + C27502 + C27503) * C32430 +
            (C27504 + C27505 + C27506 + C27507) * C6291) *
               C32619 +
           ((C27499 + C27498 + C27497 + C27496) * C32430 +
            (C27495 + C27494 + C27493 + C27492) * C6291) *
               C20880) *
              C346 +
          (((C27507 + C27506 + C27505 + C27504) * C6291 +
            (C27503 + C27502 + C27501 + C27500) * C32430) *
               C20880 +
           ((C15873 * C2059 + C32846 * C2068 + C15874 * C2616 + C32842 * C2619 +
             C15875 * C7024 + C32832 * C7028 + C15876 * C7561 +
             C32814 * C7562) *
                C6291 +
            (C15873 * C2067 + C32846 * C2077 + C15874 * C2620 + C32842 * C2625 +
             C15875 * C7027 + C32832 * C7033 + C15876 * C7563 +
             C32814 * C7564) *
                C32430) *
               C32619) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C6291 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32430) *
               C32847 +
           ((C17058 + C17059) * C6291 + (C17060 + C17061) * C32430) * C32844 +
           (C17076 * C6291 + C17077 * C32430) * C32835 +
           ((C17075 + C17074) * C6291 + (C17073 + C17072) * C32430) * C32820) *
              C32491 * C32477 * C110 -
          (((C17068 + C17069) * C32430 + (C17070 + C17071) * C6291) * C32820 +
           (C17497 * C32430 + C17498 * C6291) * C32835 +
           (C17499 * C32430 + C17500 * C6291) * C32844 +
           ((C15095 + C15094) * C32430 + (C15093 + C15092) * C6291) * C32847) *
              C32491 * C32477 * C111 +
          ((C15108 * C6291 + C15109 * C32430) * C32847 +
           (C18775 * C6291 + C18776 * C32430) * C32844 +
           ((C16731 + C16730) * C6291 + (C16729 + C16728) * C32430) * C32835 +
           ((C15053 * C2057 + C15047 * C2064 + C15054 * C2618 +
             C32577 * C2623) *
                C6291 +
            (C15053 * C2063 + C15047 * C2075 + C15054 * C2624 +
             C32577 * C2627) *
                C32430) *
               C32820) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C6291 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32430) *
               C32847 +
           ((C17058 + C17059) * C6291 + (C17060 + C17061) * C32430) * C32844 +
           (C17076 * C6291 + C17077 * C32430) * C32835 +
           ((C17075 + C17074) * C6291 + (C17073 + C17072) * C32430) * C32820) *
              C32491 * C239 -
          (((C15054 * C7027 + C32577 * C7033 + C15053 * C2620 +
             C15047 * C2625) *
                C32430 +
            (C15054 * C7024 + C32577 * C7028 + C15053 * C2616 +
             C15047 * C2619) *
                C6291) *
               C32820 +
           ((C17718 + C17717) * C32430 + (C17716 + C17715) * C6291) * C32835 +
           ((C17714 + C17713) * C32430 + (C17712 + C17711) * C6291) * C32844 +
           ((C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                C32430 +
            (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                C6291) *
               C32847) *
              C32491 * C240 +
          (((C15053 * C248 + C15047 * C263 + C15054 * C1008 + C32577 * C1017) *
                C6291 +
            (C15053 * C264 + C15047 * C278 + C15054 * C1016 + C32577 * C1026) *
                C32430) *
               C32847 +
           ((C15053 * C1142 + C15047 * C1154 + C15054 * C1694 +
             C32577 * C1697) *
                C6291 +
            (C15053 * C1153 + C15047 * C1169 + C15054 * C1698 +
             C32577 * C1703) *
                C32430) *
               C32844 +
           ((C15053 * C1144 + C15047 * C1156 + C15054 * C6425 +
             C32577 * C6429) *
                C6291 +
            (C15053 * C1158 + C15047 * C1171 + C15054 * C6431 +
             C32577 * C6434) *
                C32430) *
               C32835 +
           ((C15053 * C7024 + C15047 * C7028 + C15054 * C7561 +
             C32577 * C7562) *
                C6291 +
            (C15053 * C7027 + C15047 * C7033 + C15054 * C7563 +
             C32577 * C7564) *
                C32430) *
               C32820) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C6291 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32430) *
               C32847 +
           ((C17058 + C17059) * C6291 + (C17060 + C17061) * C32430) * C32844 +
           C28228 * C32835 + C28235 * C32820) *
              C345 -
          (((C28231 + C28232) * C32430 + (C28233 + C28234) * C6291) * C32820 +
           ((C17072 + C17073) * C32430 + (C17074 + C17075) * C6291) * C32835 +
           ((C17065 + C17064) * C32430 + (C17063 + C17062) * C6291) * C32844 +
           ((C17061 + C17060) * C32430 + (C17059 + C17058) * C6291) * C32847) *
              C346 +
          (C28228 * C32847 + C28235 * C32844 +
           ((C28234 + C28233) * C6291 + (C28232 + C28231) * C32430) * C32835 +
           ((C15053 * C12087 + C15047 * C12090 + C15054 * C12388 +
             C32577 * C12389) *
                C6291 +
            (C15053 * C12089 + C15047 * C12093 + C15054 * C12390 +
             C32577 * C12391) *
                C32430) *
               C32820) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
              C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
                 C6291 +
             (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
              C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
                 C32430) *
                C20880 +
            ((C27492 + C27493 + C27494 + C27495) * C6291 +
             (C27496 + C27497 + C27498 + C27499) * C32430) *
                C32619) *
               C584 -
           (((C27500 + C27501 + C27502 + C27503) * C32430 +
             (C27504 + C27505 + C27506 + C27507) * C6291) *
                C32619 +
            ((C27499 + C27498 + C27497 + C27496) * C32430 +
             (C27495 + C27494 + C27493 + C27492) * C6291) *
                C20880) *
               C585) *
              C32477 * C472 +
          ((((C16431 + C16430 + C16429 + C16428) * C6291 +
             (C16427 + C16426 + C16425 + C16424) * C32430) *
                C20880 +
            ((C15873 * C354 + C32846 * C370 + C15874 * C1145 + C32842 * C1159 +
              C15875 * C1146 + C32832 * C1160 + C15876 * C7243 +
              C32814 * C7244) *
                 C6291 +
             (C15873 * C371 + C32846 * C384 + C15874 * C1161 + C32842 * C1172 +
              C15875 * C1162 + C32832 * C1173 + C15876 * C7245 +
              C32814 * C7246) *
                 C32430) *
                C32619) *
               C585 -
           (((C16424 + C16425 + C16426 + C16427) * C32430 +
             (C16428 + C16429 + C16430 + C16431) * C6291) *
                C32619 +
            ((C15919 + C15918 + C15917 + C15916) * C32430 +
             (C15915 + C15914 + C15913 + C15912) * C6291) *
                C20880) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                 C5427 +
             (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                 C32836 +
             (C15092 + C15093) * C5428 + (C15094 + C15095) * C32823 +
             C15108 * C5429 + C15109 * C32793) *
                C20880 +
            ((C17058 + C17059) * C5427 + (C17060 + C17061) * C32836 +
             C17495 * C5428 + C17496 * C32823 + C18775 * C5429 +
             C18776 * C32793) *
                C32619) *
               C584 -
           (((C16728 + C16729) * C32793 + (C16730 + C16731) * C5429 +
             C17497 * C32823 + C17498 * C5428 + (C17065 + C17064) * C32836 +
             (C17063 + C17062) * C5427) *
                C32619 +
            (C19469 * C32793 + C19470 * C5429 + C17499 * C32823 +
             C17500 * C5428 + (C17061 + C17060) * C32836 +
             (C17059 + C17058) * C5427) *
                C20880) *
               C585) *
              C32477 * C472 +
          (((C17495 * C5427 + C17496 * C32836 + C18775 * C5428 +
             C18776 * C32823 + (C15631 + C15630) * C5429 +
             (C15629 + C15628) * C32793) *
                C20880 +
            (C17040 * C5427 + C17041 * C32836 + (C16731 + C16730) * C5428 +
             (C16729 + C16728) * C32823 +
             (C15053 * C356 + C15047 * C374 + C15054 * C2280 + C32577 * C2281) *
                 C5429 +
             (C15053 * C375 + C15047 * C386 + C15054 * C2282 + C32577 * C2283) *
                 C32793) *
                C32619) *
               C585 -
           (((C15628 + C15629) * C32793 + (C15630 + C15631) * C5429 +
             C19469 * C32823 + C19470 * C5428 + C17499 * C32836 +
             C17500 * C5427) *
                C32619 +
            ((C15103 + C15102) * C32793 + (C15101 + C15100) * C5429 +
             (C15099 + C15098) * C32823 + (C15097 + C15096) * C5428 +
             (C15095 + C15094) * C32836 + (C15093 + C15092) * C5427) *
                C20880) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                 C6291 +
             (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                 C32430) *
                C32847 +
            ((C17058 + C17059) * C6291 + (C17060 + C17061) * C32430) * C32844 +
            C28228 * C32835 + C28235 * C32820) *
               C584 -
           (((C28231 + C28232) * C32430 + (C28233 + C28234) * C6291) * C32820 +
            ((C17072 + C17073) * C32430 + (C17074 + C17075) * C6291) * C32835 +
            ((C17065 + C17064) * C32430 + (C17063 + C17062) * C6291) * C32844 +
            ((C17061 + C17060) * C32430 + (C17059 + C17058) * C6291) * C32847) *
               C585) *
              C32477 * C472 +
          (((C17495 * C6291 + C17496 * C32430) * C32847 +
            (C17040 * C6291 + C17041 * C32430) * C32844 +
            ((C17071 + C17070) * C6291 + (C17069 + C17068) * C32430) * C32835 +
            ((C15053 * C2061 + C15047 * C2071 + C15054 * C12202 +
              C32577 * C12203) *
                 C6291 +
             (C15053 * C2072 + C15047 * C2079 + C15054 * C12204 +
              C32577 * C12205) *
                 C32430) *
                C32820) *
               C585 -
           (((C17068 + C17069) * C32430 + (C17070 + C17071) * C6291) * C32820 +
            (C17497 * C32430 + C17498 * C6291) * C32835 +
            (C17499 * C32430 + C17500 * C6291) * C32844 +
            ((C15095 + C15094) * C32430 + (C15093 + C15092) * C6291) * C32847) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C5427 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32836 +
            (C15092 + C15093) * C5428 + (C15094 + C15095) * C32823 +
            C15108 * C5429 + C15109 * C32793) *
               C20880 +
           ((C17058 + C17059) * C5427 + (C17060 + C17061) * C32836 +
            C17495 * C5428 + C17496 * C32823 + C18775 * C5429 +
            C18776 * C32793) *
               C32619) *
              C32491 * C239 -
          (((C19271 + C19272) * C32793 + (C19273 + C19274) * C5429 +
            (C17297 + C17298) * C32823 + (C17299 + C17300) * C5428 +
            (C17714 + C17713) * C32836 + (C17712 + C17711) * C5427) *
               C32619 +
           ((C15466 + C15467) * C32793 + (C15468 + C15469) * C5429 +
            (C15470 + C15471) * C32823 + (C15472 + C15473) * C5428 +
            (C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                C32836 +
            (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                C5427) *
               C20880) *
              C32491 * C240 +
          (((C15053 * C248 + C15047 * C263 + C15054 * C1008 + C32577 * C1017) *
                C5427 +
            (C15053 * C264 + C15047 * C278 + C15054 * C1016 + C32577 * C1026) *
                C32836 +
            (C15053 * C249 + C15047 * C265 + C15054 * C1007 + C32577 * C1015) *
                C5428 +
            (C15053 * C266 + C15047 * C279 + C15054 * C1014 + C32577 * C1025) *
                C32823 +
            (C15053 * C250 + C15047 * C267 + C15054 * C1006 + C32577 * C1013) *
                C5429 +
            (C15053 * C268 + C15047 * C280 + C15054 * C1012 + C32577 * C1024) *
                C32793) *
               C20880 +
           ((C15053 * C1142 + C15047 * C1154 + C15054 * C1694 +
             C32577 * C1697) *
                C5427 +
            (C15053 * C1153 + C15047 * C1169 + C15054 * C1698 +
             C32577 * C1703) *
                C32836 +
            (C15053 * C1141 + C15047 * C1152 + C15054 * C1695 +
             C32577 * C1699) *
                C5428 +
            (C15053 * C1151 + C15047 * C1168 + C15054 * C1700 +
             C32577 * C1704) *
                C32823 +
            (C15053 * C1140 + C15047 * C1150 + C15054 * C1696 +
             C32577 * C1701) *
                C5429 +
            (C15053 * C1149 + C15047 * C1167 + C15054 * C1702 +
             C32577 * C1705) *
                C32793) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C5427 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32836 +
            (C15092 + C15093) * C5428 + (C15094 + C15095) * C32823 +
            C15108 * C5429 + C15109 * C32793) *
               C20880 +
           ((C17058 + C17059) * C5427 + (C17060 + C17061) * C32836 +
            C17495 * C5428 + C17496 * C32823 + C18775 * C5429 +
            C18776 * C32793) *
               C32619) *
              C32491 * C32477 * C110 -
          (((C15628 + C15629) * C32793 + (C15630 + C15631) * C5429 +
            C19469 * C32823 + C19470 * C5428 + C17499 * C32836 +
            C17500 * C5427) *
               C32619 +
           ((C15103 + C15102) * C32793 + (C15101 + C15100) * C5429 +
            (C15099 + C15098) * C32823 + (C15097 + C15096) * C5428 +
            (C15095 + C15094) * C32836 + (C15093 + C15092) * C5427) *
               C20880) *
              C32491 * C32477 * C111 +
          ((C15108 * C5427 + C15109 * C32836 + C15110 * C5428 +
            C15111 * C32823 + (C15107 + C15106) * C5429 +
            (C15105 + C15104) * C32793) *
               C20880 +
           (C18775 * C5427 + C18776 * C32836 + (C15631 + C15630) * C5428 +
            (C15629 + C15628) * C32823 +
            (C15053 * C348 + C15047 * C359 + C15054 * C700 + C32577 * C709) *
                C5429 +
            (C15053 * C358 + C15047 * C378 + C15054 * C710 + C32577 * C715) *
                C32793) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
             C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
                C6291 +
            (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
             C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
                C32430) *
               C20880 +
           ((C15873 * C352 + C32846 * C367 + C15874 * C696 + C32842 * C701 +
             C15875 * C1142 + C32832 * C1154 + C15876 * C1694 +
             C32814 * C1697) *
                C6291 +
            (C15873 * C366 + C32846 * C382 + C15874 * C702 + C32842 * C711 +
             C15875 * C1153 + C32832 * C1169 + C15876 * C1698 +
             C32814 * C1703) *
                C32430) *
               C32619) *
              C32491 * C32477 * C110 -
          (((C16424 + C16425 + C16426 + C16427) * C32430 +
            (C16428 + C16429 + C16430 + C16431) * C6291) *
               C32619 +
           ((C15919 + C15918 + C15917 + C15916) * C32430 +
            (C15915 + C15914 + C15913 + C15912) * C6291) *
               C20880) *
              C32491 * C32477 * C111 +
          (((C15927 + C15926 + C15925 + C15924) * C6291 +
            (C15923 + C15922 + C15921 + C15920) * C32430) *
               C20880 +
           ((C15873 * C350 + C32846 * C363 + C15874 * C698 + C32842 * C705 +
             C15875 * C1140 + C32832 * C1150 + C15876 * C1696 +
             C32814 * C1701) *
                C6291 +
            (C15873 * C362 + C32846 * C380 + C15874 * C706 + C32842 * C713 +
             C15875 * C1149 + C32832 * C1167 + C15876 * C1702 +
             C32814 * C1705) *
                C32430) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
             C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
                C6291 +
            (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
             C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
                C32430) *
               C20880 +
           ((C15873 * C352 + C32846 * C367 + C15874 * C696 + C32842 * C701 +
             C15875 * C1142 + C32832 * C1154 + C15876 * C1694 +
             C32814 * C1697) *
                C6291 +
            (C15873 * C366 + C32846 * C382 + C15874 * C702 + C32842 * C711 +
             C15875 * C1153 + C32832 * C1169 + C15876 * C1698 +
             C32814 * C1703) *
                C32430) *
               C32619) *
              C32491 * C239 -
          (((C15876 * C6427 + C32814 * C6433 + C15875 * C1698 + C32832 * C1703 +
             C15874 * C1153 + C32842 * C1169 + C15873 * C702 + C32846 * C711) *
                C32430 +
            (C15876 * C6424 + C32814 * C6428 + C15875 * C1694 + C32832 * C1697 +
             C15874 * C1142 + C32842 * C1154 + C15873 * C696 + C32846 * C701) *
                C6291) *
               C32619 +
           ((C15876 * C1019 + C32814 * C1027 + C15875 * C1016 + C32832 * C1026 +
             C15874 * C264 + C32842 * C278 + C15873 * C261 + C32846 * C277) *
                C32430 +
            (C15876 * C1009 + C32814 * C1018 + C15875 * C1008 + C32832 * C1017 +
             C15874 * C248 + C32842 * C263 + C15873 * C247 + C32846 * C262) *
                C6291) *
               C20880) *
              C32491 * C240 +
          (((C15873 * C248 + C32846 * C263 + C15874 * C1008 + C32842 * C1017 +
             C15875 * C1009 + C32832 * C1018 + C15876 * C6354 +
             C32814 * C6357) *
                C6291 +
            (C15873 * C264 + C32846 * C278 + C15874 * C1016 + C32842 * C1026 +
             C15875 * C1019 + C32832 * C1027 + C15876 * C6356 +
             C32814 * C6360) *
                C32430) *
               C20880 +
           ((C15873 * C1142 + C32846 * C1154 + C15874 * C1694 + C32842 * C1697 +
             C15875 * C6424 + C32832 * C6428 + C15876 * C6690 +
             C32814 * C6691) *
                C6291 +
            (C15873 * C1153 + C32846 * C1169 + C15874 * C1698 + C32842 * C1703 +
             C15875 * C6427 + C32832 * C6433 + C15876 * C6692 +
             C32814 * C6693) *
                C32430) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C6291 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32430) *
               C32847 +
           ((C17058 + C17059) * C6291 + (C17060 + C17061) * C32430) * C32844 +
           (C17076 * C6291 + C17077 * C32430) * C32835 +
           ((C17075 + C17074) * C6291 + (C17073 + C17072) * C32430) * C32820) *
              C32491 * C32477 * C110 -
          (((C17068 + C17069) * C32430 + (C17070 + C17071) * C6291) * C32820 +
           (C17497 * C32430 + C17498 * C6291) * C32835 +
           (C17499 * C32430 + C17500 * C6291) * C32844 +
           ((C15095 + C15094) * C32430 + (C15093 + C15092) * C6291) * C32847) *
              C32491 * C32477 * C111 +
          ((C15108 * C6291 + C15109 * C32430) * C32847 +
           (C18775 * C6291 + C18776 * C32430) * C32844 +
           ((C16731 + C16730) * C6291 + (C16729 + C16728) * C32430) * C32835 +
           ((C15053 * C2057 + C15047 * C2064 + C15054 * C2618 +
             C32577 * C2623) *
                C6291 +
            (C15053 * C2063 + C15047 * C2075 + C15054 * C2624 +
             C32577 * C2627) *
                C32430) *
               C32820) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C6291 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32430) *
               C32847 +
           ((C17058 + C17059) * C6291 + (C17060 + C17061) * C32430) * C32844 +
           (C17076 * C6291 + C17077 * C32430) * C32835 +
           ((C17075 + C17074) * C6291 + (C17073 + C17072) * C32430) * C32820) *
              C32491 * C239 -
          (((C15054 * C7027 + C32577 * C7033 + C15053 * C2620 +
             C15047 * C2625) *
                C32430 +
            (C15054 * C7024 + C32577 * C7028 + C15053 * C2616 +
             C15047 * C2619) *
                C6291) *
               C32820 +
           ((C17718 + C17717) * C32430 + (C17716 + C17715) * C6291) * C32835 +
           ((C17714 + C17713) * C32430 + (C17712 + C17711) * C6291) * C32844 +
           ((C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                C32430 +
            (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                C6291) *
               C32847) *
              C32491 * C240 +
          (((C15053 * C248 + C15047 * C263 + C15054 * C1008 + C32577 * C1017) *
                C6291 +
            (C15053 * C264 + C15047 * C278 + C15054 * C1016 + C32577 * C1026) *
                C32430) *
               C32847 +
           ((C15053 * C1142 + C15047 * C1154 + C15054 * C1694 +
             C32577 * C1697) *
                C6291 +
            (C15053 * C1153 + C15047 * C1169 + C15054 * C1698 +
             C32577 * C1703) *
                C32430) *
               C32844 +
           ((C15053 * C1144 + C15047 * C1156 + C15054 * C6425 +
             C32577 * C6429) *
                C6291 +
            (C15053 * C1158 + C15047 * C1171 + C15054 * C6431 +
             C32577 * C6434) *
                C32430) *
               C32835 +
           ((C15053 * C7024 + C15047 * C7028 + C15054 * C7561 +
             C32577 * C7562) *
                C6291 +
            (C15053 * C7027 + C15047 * C7033 + C15054 * C7563 +
             C32577 * C7564) *
                C32430) *
               C32820) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                 C31559 +
             (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                 C32754 +
             (C15092 + C15093) * C31540 + (C15094 + C15095) * C32440) *
                C32615 +
            ((C17058 + C17059) * C31559 + (C17060 + C17061) * C32754 +
             C17495 * C31540 + C17496 * C32440) *
                C32622 +
            C30102 * C24412) *
               C32491 * C470 -
           (((C17293 + C17294) * C32440 + (C17295 + C17296) * C31540 +
             (C17718 + C17717) * C32754 + (C17716 + C17715) * C31559) *
                C24412 +
            ((C17297 + C17298) * C32440 + (C17299 + C17300) * C31540 +
             (C17714 + C17713) * C32754 + (C17712 + C17711) * C31559) *
                C32622 +
            ((C15470 + C15471) * C32440 + (C15472 + C15473) * C31540 +
             (C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                 C32754 +
             (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                 C31559) *
                C32615) *
               C32491 * C471) *
              C472 +
          ((((C15473 + C15472) * C31559 + (C15471 + C15470) * C32754 +
             (C15469 + C15468) * C31540 + (C15467 + C15466) * C32440) *
                C32615 +
            ((C17300 + C17299) * C31559 + (C17298 + C17297) * C32754 +
             (C19274 + C19273) * C31540 + (C19272 + C19271) * C32440) *
                C32622 +
            ((C17296 + C17295) * C31559 + (C17294 + C17293) * C32754 +
             (C15053 * C1147 + C15047 * C1163 + C15054 * C1148 +
              C32577 * C1164) *
                 C31540 +
             (C15053 * C1165 + C15047 * C1174 + C15054 * C1166 +
              C32577 * C1175) *
                 C32440) *
                C24412) *
               C32491 * C471 -
           (((C16728 + C16729) * C32440 + (C16730 + C16731) * C31540 +
             C17497 * C32754 + C17498 * C31559) *
                C24412 +
            (C19469 * C32440 + C19470 * C31540 + C17499 * C32754 +
             C17500 * C31559) *
                C32622 +
            ((C15099 + C15098) * C32440 + (C15097 + C15096) * C31540 +
             (C15095 + C15094) * C32754 + (C15093 + C15092) * C31559) *
                C32615) *
               C32491 * C470) *
              C473)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                 C31559 +
             (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                 C32754 +
             (C15092 + C15093) * C31540 + (C15094 + C15095) * C32440) *
                C32615 +
            ((C17058 + C17059) * C31559 + (C17060 + C17061) * C32754 +
             C17495 * C31540 + C17496 * C32440) *
                C32622 +
            C30102 * C24412) *
               C584 -
           (((C17068 + C17069) * C32440 + (C17070 + C17071) * C31540 +
             (C17072 + C17073) * C32754 + (C17074 + C17075) * C31559) *
                C24412 +
            (C17497 * C32440 + C17498 * C31540 + (C17065 + C17064) * C32754 +
             (C17063 + C17062) * C31559) *
                C32622 +
            (C17499 * C32440 + C17500 * C31540 + (C17061 + C17060) * C32754 +
             (C17059 + C17058) * C31559) *
                C32615) *
               C585) *
              C470 +
          ((((C17711 + C17712) * C31559 + (C17713 + C17714) * C32754 +
             (C17300 + C17299) * C31540 + (C17298 + C17297) * C32440) *
                C32615 +
            ((C17715 + C17716) * C31559 + (C17717 + C17718) * C32754 +
             (C17296 + C17295) * C31540 + (C17294 + C17293) * C32440) *
                C32622 +
            ((C28634 + C28635) * C31559 + (C28636 + C28637) * C32754 +
             (C15053 * C2617 + C15047 * C2621 + C15054 * C7393 +
              C32577 * C7394) *
                 C31540 +
             (C15053 * C2622 + C15047 * C2626 + C15054 * C7395 +
              C32577 * C7396) *
                 C32440) *
                C24412) *
               C585 -
           (((C17293 + C17294) * C32440 + (C17295 + C17296) * C31540 +
             (C17718 + C17717) * C32754 + (C17716 + C17715) * C31559) *
                C24412 +
            ((C17297 + C17298) * C32440 + (C17299 + C17300) * C31540 +
             (C17714 + C17713) * C32754 + (C17712 + C17711) * C31559) *
                C32622 +
            ((C15470 + C15471) * C32440 + (C15472 + C15473) * C31540 +
             (C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                 C32754 +
             (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                 C31559) *
                C32615) *
               C584) *
              C471) *
         C32465) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C31559 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32754 +
            (C15092 + C15093) * C31540 + (C15094 + C15095) * C32440) *
               C32615 +
           ((C17058 + C17059) * C31559 + (C17060 + C17061) * C32754 +
            C17495 * C31540 + C17496 * C32440) *
               C32622 +
           (C17076 * C31559 + C17077 * C32754 + C17040 * C31540 +
            C17041 * C32440) *
               C24412) *
              C32491 * C239 -
          (((C17293 + C17294) * C32440 + (C17295 + C17296) * C31540 +
            (C17718 + C17717) * C32754 + (C17716 + C17715) * C31559) *
               C24412 +
           ((C17297 + C17298) * C32440 + (C17299 + C17300) * C31540 +
            (C17714 + C17713) * C32754 + (C17712 + C17711) * C31559) *
               C32622 +
           ((C15470 + C15471) * C32440 + (C15472 + C15473) * C31540 +
            (C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                C32754 +
            (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                C31559) *
               C32615) *
              C32491 * C240 +
          (((C15053 * C248 + C15047 * C263 + C15054 * C1008 + C32577 * C1017) *
                C31559 +
            (C15053 * C264 + C15047 * C278 + C15054 * C1016 + C32577 * C1026) *
                C32754 +
            (C15053 * C249 + C15047 * C265 + C15054 * C1007 + C32577 * C1015) *
                C31540 +
            (C15053 * C266 + C15047 * C279 + C15054 * C1014 + C32577 * C1025) *
                C32440) *
               C32615 +
           ((C15053 * C1142 + C15047 * C1154 + C15054 * C1694 +
             C32577 * C1697) *
                C31559 +
            (C15053 * C1153 + C15047 * C1169 + C15054 * C1698 +
             C32577 * C1703) *
                C32754 +
            (C15053 * C1141 + C15047 * C1152 + C15054 * C1695 +
             C32577 * C1699) *
                C31540 +
            (C15053 * C1151 + C15047 * C1168 + C15054 * C1700 +
             C32577 * C1704) *
                C32440) *
               C32622 +
           ((C15053 * C1144 + C15047 * C1156 + C15054 * C6425 +
             C32577 * C6429) *
                C31559 +
            (C15053 * C1158 + C15047 * C1171 + C15054 * C6431 +
             C32577 * C6434) *
                C32754 +
            (C15053 * C1146 + C15047 * C1160 + C15054 * C7243 +
             C32577 * C7244) *
                C31540 +
            (C15053 * C1162 + C15047 * C1173 + C15054 * C7245 +
             C32577 * C7246) *
                C32440) *
               C24412) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C31559 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32754 +
            (C15092 + C15093) * C31540 + (C15094 + C15095) * C32440) *
               C32615 +
           ((C17058 + C17059) * C31559 + (C17060 + C17061) * C32754 +
            C17495 * C31540 + C17496 * C32440) *
               C32622 +
           (C17076 * C31559 + C17077 * C32754 + C17040 * C31540 +
            C17041 * C32440) *
               C24412) *
              C32491 * C32477 * C110 -
          (((C16728 + C16729) * C32440 + (C16730 + C16731) * C31540 +
            C17497 * C32754 + C17498 * C31559) *
               C24412 +
           (C19469 * C32440 + C19470 * C31540 + C17499 * C32754 +
            C17500 * C31559) *
               C32622 +
           ((C15099 + C15098) * C32440 + (C15097 + C15096) * C31540 +
            (C15095 + C15094) * C32754 + (C15093 + C15092) * C31559) *
               C32615) *
              C32491 * C32477 * C111 +
          ((C15108 * C31559 + C15109 * C32754 + C15110 * C31540 +
            C15111 * C32440) *
               C32615 +
           (C18775 * C31559 + C18776 * C32754 + (C15631 + C15630) * C31540 +
            (C15629 + C15628) * C32440) *
               C32622 +
           ((C16731 + C16730) * C31559 + (C16729 + C16728) * C32754 +
            (C15053 * C356 + C15047 * C374 + C15054 * C2280 + C32577 * C2281) *
                C31540 +
            (C15053 * C375 + C15047 * C386 + C15054 * C2282 + C32577 * C2283) *
                C32440) *
               C24412) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C31559 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32754 +
            (C15092 + C15093) * C31540 + (C15094 + C15095) * C32440) *
               C32615 +
           ((C17058 + C17059) * C31559 + (C17060 + C17061) * C32754 +
            C17495 * C31540 + C17496 * C32440) *
               C32622 +
           C30102 * C24412) *
              C345 -
          (((C17068 + C17069) * C32440 + (C17070 + C17071) * C31540 +
            (C17072 + C17073) * C32754 + (C17074 + C17075) * C31559) *
               C24412 +
           (C17497 * C32440 + C17498 * C31540 + (C17065 + C17064) * C32754 +
            (C17063 + C17062) * C31559) *
               C32622 +
           (C17499 * C32440 + C17500 * C31540 + (C17061 + C17060) * C32754 +
            (C17059 + C17058) * C31559) *
               C32615) *
              C346 +
          (C30102 * C32615 +
           (C28218 * C31559 + C28219 * C32754 + (C17071 + C17070) * C31540 +
            (C17069 + C17068) * C32440) *
               C32622 +
           ((C28234 + C28233) * C31559 + (C28232 + C28231) * C32754 +
            (C15053 * C2061 + C15047 * C2071 + C15054 * C12202 +
             C32577 * C12203) *
                C31540 +
            (C15053 * C2072 + C15047 * C2079 + C15054 * C12204 +
             C32577 * C12205) *
                C32440) *
               C24412) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                 C31559 +
             (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                 C32754 +
             (C15092 + C15093) * C31540 + (C15094 + C15095) * C32440) *
                C32615 +
            ((C17058 + C17059) * C31559 + (C17060 + C17061) * C32754 +
             C17495 * C31540 + C17496 * C32440) *
                C32622 +
            C30102 * C24412) *
               C584 -
           (((C17068 + C17069) * C32440 + (C17070 + C17071) * C31540 +
             (C17072 + C17073) * C32754 + (C17074 + C17075) * C31559) *
                C24412 +
            (C17497 * C32440 + C17498 * C31540 + (C17065 + C17064) * C32754 +
             (C17063 + C17062) * C31559) *
                C32622 +
            (C17499 * C32440 + C17500 * C31540 + (C17061 + C17060) * C32754 +
             (C17059 + C17058) * C31559) *
                C32615) *
               C585) *
              C32477 * C472 +
          (((C17495 * C31559 + C17496 * C32754 + C18775 * C31540 +
             C18776 * C32440) *
                C32615 +
            (C17040 * C31559 + C17041 * C32754 + (C16731 + C16730) * C31540 +
             (C16729 + C16728) * C32440) *
                C32622 +
            ((C17071 + C17070) * C31559 + (C17069 + C17068) * C32754 +
             (C15053 * C2057 + C15047 * C2064 + C15054 * C2618 +
              C32577 * C2623) *
                 C31540 +
             (C15053 * C2063 + C15047 * C2075 + C15054 * C2624 +
              C32577 * C2627) *
                 C32440) *
                C24412) *
               C585 -
           (((C16728 + C16729) * C32440 + (C16730 + C16731) * C31540 +
             C17497 * C32754 + C17498 * C31559) *
                C24412 +
            (C19469 * C32440 + C19470 * C31540 + C17499 * C32754 +
             C17500 * C31559) *
                C32622 +
            ((C15099 + C15098) * C32440 + (C15097 + C15096) * C31540 +
             (C15095 + C15094) * C32754 + (C15093 + C15092) * C31559) *
                C32615) *
               C584) *
              C32477 * C473)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C31559 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32754 +
            (C15092 + C15093) * C31540 + (C15094 + C15095) * C32440) *
               C32615 +
           ((C17058 + C17059) * C31559 + (C17060 + C17061) * C32754 +
            C17495 * C31540 + C17496 * C32440) *
               C32622 +
           (C17076 * C31559 + C17077 * C32754 + C17040 * C31540 +
            C17041 * C32440) *
               C24412) *
              C32491 * C32477 * C110 -
          (((C16728 + C16729) * C32440 + (C16730 + C16731) * C31540 +
            C17497 * C32754 + C17498 * C31559) *
               C24412 +
           (C19469 * C32440 + C19470 * C31540 + C17499 * C32754 +
            C17500 * C31559) *
               C32622 +
           ((C15099 + C15098) * C32440 + (C15097 + C15096) * C31540 +
            (C15095 + C15094) * C32754 + (C15093 + C15092) * C31559) *
               C32615) *
              C32491 * C32477 * C111 +
          ((C15108 * C31559 + C15109 * C32754 + C15110 * C31540 +
            C15111 * C32440) *
               C32615 +
           (C18775 * C31559 + C18776 * C32754 + (C15631 + C15630) * C31540 +
            (C15629 + C15628) * C32440) *
               C32622 +
           ((C16731 + C16730) * C31559 + (C16729 + C16728) * C32754 +
            (C15053 * C356 + C15047 * C374 + C15054 * C2280 + C32577 * C2281) *
                C31540 +
            (C15053 * C375 + C15047 * C386 + C15054 * C2282 + C32577 * C2283) *
                C32440) *
               C24412) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C31559 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32754 +
            (C15092 + C15093) * C31540 + (C15094 + C15095) * C32440) *
               C32615 +
           ((C17058 + C17059) * C31559 + (C17060 + C17061) * C32754 +
            C17495 * C31540 + C17496 * C32440) *
               C32622 +
           (C17076 * C31559 + C17077 * C32754 + C17040 * C31540 +
            C17041 * C32440) *
               C24412) *
              C32491 * C239 -
          (((C17293 + C17294) * C32440 + (C17295 + C17296) * C31540 +
            (C17718 + C17717) * C32754 + (C17716 + C17715) * C31559) *
               C24412 +
           ((C17297 + C17298) * C32440 + (C17299 + C17300) * C31540 +
            (C17714 + C17713) * C32754 + (C17712 + C17711) * C31559) *
               C32622 +
           ((C15470 + C15471) * C32440 + (C15472 + C15473) * C31540 +
            (C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                C32754 +
            (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                C31559) *
               C32615) *
              C32491 * C240 +
          (((C15053 * C248 + C15047 * C263 + C15054 * C1008 + C32577 * C1017) *
                C31559 +
            (C15053 * C264 + C15047 * C278 + C15054 * C1016 + C32577 * C1026) *
                C32754 +
            (C15053 * C249 + C15047 * C265 + C15054 * C1007 + C32577 * C1015) *
                C31540 +
            (C15053 * C266 + C15047 * C279 + C15054 * C1014 + C32577 * C1025) *
                C32440) *
               C32615 +
           ((C15053 * C1142 + C15047 * C1154 + C15054 * C1694 +
             C32577 * C1697) *
                C31559 +
            (C15053 * C1153 + C15047 * C1169 + C15054 * C1698 +
             C32577 * C1703) *
                C32754 +
            (C15053 * C1141 + C15047 * C1152 + C15054 * C1695 +
             C32577 * C1699) *
                C31540 +
            (C15053 * C1151 + C15047 * C1168 + C15054 * C1700 +
             C32577 * C1704) *
                C32440) *
               C32622 +
           ((C15053 * C1144 + C15047 * C1156 + C15054 * C6425 +
             C32577 * C6429) *
                C31559 +
            (C15053 * C1158 + C15047 * C1171 + C15054 * C6431 +
             C32577 * C6434) *
                C32754 +
            (C15053 * C1146 + C15047 * C1160 + C15054 * C7243 +
             C32577 * C7244) *
                C31540 +
            (C15053 * C1162 + C15047 * C1173 + C15054 * C7245 +
             C32577 * C7246) *
                C32440) *
               C24412) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                 C5427 +
             (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                 C32836 +
             (C15092 + C15093) * C5428 + (C15094 + C15095) * C32823 +
             C15108 * C5429 + C15109 * C32793) *
                C20880 +
            ((C17058 + C17059) * C5427 + (C17060 + C17061) * C32836 +
             C17495 * C5428 + C17496 * C32823 + C18775 * C5429 +
             C18776 * C32793) *
                C32619) *
               C32491 * C470 -
           (((C19271 + C19272) * C32793 + (C19273 + C19274) * C5429 +
             (C17297 + C17298) * C32823 + (C17299 + C17300) * C5428 +
             (C17714 + C17713) * C32836 + (C17712 + C17711) * C5427) *
                C32619 +
            ((C15466 + C15467) * C32793 + (C15468 + C15469) * C5429 +
             (C15470 + C15471) * C32823 + (C15472 + C15473) * C5428 +
             (C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                 C32836 +
             (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                 C5427) *
                C20880) *
               C32491 * C471) *
              C472 +
          ((((C15473 + C15472) * C5427 + (C15471 + C15470) * C32836 +
             (C15469 + C15468) * C5428 + (C15467 + C15466) * C32823 +
             (C15465 + C15464) * C5429 + (C15463 + C15462) * C32793) *
                C20880 +
            ((C17300 + C17299) * C5427 + (C17298 + C17297) * C32836 +
             (C19274 + C19273) * C5428 + (C19272 + C19271) * C32823 +
             (C15053 * C699 + C15047 * C707 + C15054 * C1508 + C32577 * C1509) *
                 C5429 +
             (C15053 * C708 + C15047 * C714 + C15054 * C1510 + C32577 * C1511) *
                 C32793) *
                C32619) *
               C32491 * C471 -
           (((C15628 + C15629) * C32793 + (C15630 + C15631) * C5429 +
             C19469 * C32823 + C19470 * C5428 + C17499 * C32836 +
             C17500 * C5427) *
                C32619 +
            ((C15103 + C15102) * C32793 + (C15101 + C15100) * C5429 +
             (C15099 + C15098) * C32823 + (C15097 + C15096) * C5428 +
             (C15095 + C15094) * C32836 + (C15093 + C15092) * C5427) *
                C20880) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
              C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
                 C6291 +
             (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
              C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
                 C32430) *
                C20880 +
            ((C27492 + C27493 + C27494 + C27495) * C6291 +
             (C27496 + C27497 + C27498 + C27499) * C32430) *
                C32619) *
               C32491 * C470 -
           (((C15876 * C6427 + C32814 * C6433 + C15875 * C1698 +
              C32832 * C1703 + C15874 * C1153 + C32842 * C1169 + C15873 * C702 +
              C32846 * C711) *
                 C32430 +
             (C15876 * C6424 + C32814 * C6428 + C15875 * C1694 +
              C32832 * C1697 + C15874 * C1142 + C32842 * C1154 + C15873 * C696 +
              C32846 * C701) *
                 C6291) *
                C32619 +
            ((C15876 * C1019 + C32814 * C1027 + C15875 * C1016 +
              C32832 * C1026 + C15874 * C264 + C32842 * C278 + C15873 * C261 +
              C32846 * C277) *
                 C32430 +
             (C15876 * C1009 + C32814 * C1018 + C15875 * C1008 +
              C32832 * C1017 + C15874 * C248 + C32842 * C263 + C15873 * C247 +
              C32846 * C262) *
                 C6291) *
                C20880) *
               C32491 * C471) *
              C472 +
          ((((C16277 + C16276 + C16275 + C16274) * C6291 +
             (C16273 + C16272 + C16271 + C16270) * C32430) *
                C20880 +
            ((C15873 * C697 + C32846 * C703 + C15874 * C1141 + C32842 * C1152 +
              C15875 * C1695 + C32832 * C1699 + C15876 * C6604 +
              C32814 * C6605) *
                 C6291 +
             (C15873 * C704 + C32846 * C712 + C15874 * C1151 + C32842 * C1168 +
              C15875 * C1700 + C32832 * C1704 + C15876 * C6606 +
              C32814 * C6607) *
                 C32430) *
                C32619) *
               C32491 * C471 -
           (((C16424 + C16425 + C16426 + C16427) * C32430 +
             (C16428 + C16429 + C16430 + C16431) * C6291) *
                C32619 +
            ((C15919 + C15918 + C15917 + C15916) * C32430 +
             (C15915 + C15914 + C15913 + C15912) * C6291) *
                C20880) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                 C5427 +
             (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                 C32836 +
             (C15092 + C15093) * C5428 + (C15094 + C15095) * C32823 +
             C15108 * C5429 + C15109 * C32793) *
                C20880 +
            ((C17058 + C17059) * C5427 + (C17060 + C17061) * C32836 +
             C17495 * C5428 + C17496 * C32823 + C18775 * C5429 +
             C18776 * C32793) *
                C32619) *
               C584 -
           (((C16728 + C16729) * C32793 + (C16730 + C16731) * C5429 +
             C17497 * C32823 + C17498 * C5428 + (C17065 + C17064) * C32836 +
             (C17063 + C17062) * C5427) *
                C32619 +
            (C19469 * C32793 + C19470 * C5429 + C17499 * C32823 +
             C17500 * C5428 + (C17061 + C17060) * C32836 +
             (C17059 + C17058) * C5427) *
                C20880) *
               C585) *
              C470 +
          ((((C17711 + C17712) * C5427 + (C17713 + C17714) * C32836 +
             (C17300 + C17299) * C5428 + (C17298 + C17297) * C32823 +
             (C19274 + C19273) * C5429 + (C19272 + C19271) * C32793) *
                C20880 +
            ((C17715 + C17716) * C5427 + (C17717 + C17718) * C32836 +
             (C17296 + C17295) * C5428 + (C17294 + C17293) * C32823 +
             (C15053 * C1147 + C15047 * C1163 + C15054 * C1148 +
              C32577 * C1164) *
                 C5429 +
             (C15053 * C1165 + C15047 * C1174 + C15054 * C1166 +
              C32577 * C1175) *
                 C32793) *
                C32619) *
               C585 -
           (((C19271 + C19272) * C32793 + (C19273 + C19274) * C5429 +
             (C17297 + C17298) * C32823 + (C17299 + C17300) * C5428 +
             (C17714 + C17713) * C32836 + (C17712 + C17711) * C5427) *
                C32619 +
            ((C15466 + C15467) * C32793 + (C15468 + C15469) * C5429 +
             (C15470 + C15471) * C32823 + (C15472 + C15473) * C5428 +
             (C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                 C32836 +
             (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                 C5427) *
                C20880) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
              C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
                 C6291 +
             (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
              C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
                 C32430) *
                C20880 +
            ((C27492 + C27493 + C27494 + C27495) * C6291 +
             (C27496 + C27497 + C27498 + C27499) * C32430) *
                C32619) *
               C584 -
           (((C27500 + C27501 + C27502 + C27503) * C32430 +
             (C27504 + C27505 + C27506 + C27507) * C6291) *
                C32619 +
            ((C27499 + C27498 + C27497 + C27496) * C32430 +
             (C27495 + C27494 + C27493 + C27492) * C6291) *
                C20880) *
               C585) *
              C470 +
          ((((C27914 + C27915 + C27916 + C27917) * C6291 +
             (C27918 + C27919 + C27920 + C27921) * C32430) *
                C20880 +
            ((C15873 * C1143 + C32846 * C1155 + C15874 * C1144 +
              C32842 * C1156 + C15875 * C6425 + C32832 * C6429 +
              C15876 * C6426 + C32814 * C6430) *
                 C6291 +
             (C15873 * C1157 + C32846 * C1170 + C15874 * C1158 +
              C32842 * C1171 + C15875 * C6431 + C32832 * C6434 +
              C15876 * C6432 + C32814 * C6435) *
                 C32430) *
                C32619) *
               C585 -
           (((C27921 + C27920 + C27919 + C27918) * C32430 +
             (C27917 + C27916 + C27915 + C27914) * C6291) *
                C32619 +
            ((C15876 * C1019 + C32814 * C1027 + C15875 * C1016 +
              C32832 * C1026 + C15874 * C264 + C32842 * C278 + C15873 * C261 +
              C32846 * C277) *
                 C32430 +
             (C15876 * C1009 + C32814 * C1018 + C15875 * C1008 +
              C32832 * C1017 + C15874 * C248 + C32842 * C263 + C15873 * C247 +
              C32846 * C262) *
                 C6291) *
                C20880) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C5427 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32836 +
            (C15092 + C15093) * C5428 + (C15094 + C15095) * C32823 +
            C15108 * C5429 + C15109 * C32793) *
               C20880 +
           ((C17058 + C17059) * C5427 + (C17060 + C17061) * C32836 +
            C17495 * C5428 + C17496 * C32823 + C18775 * C5429 +
            C18776 * C32793) *
               C32619) *
              C32491 * C239 -
          (((C19271 + C19272) * C32793 + (C19273 + C19274) * C5429 +
            (C17297 + C17298) * C32823 + (C17299 + C17300) * C5428 +
            (C17714 + C17713) * C32836 + (C17712 + C17711) * C5427) *
               C32619 +
           ((C15466 + C15467) * C32793 + (C15468 + C15469) * C5429 +
            (C15470 + C15471) * C32823 + (C15472 + C15473) * C5428 +
            (C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                C32836 +
            (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                C5427) *
               C20880) *
              C32491 * C240 +
          (((C15053 * C248 + C15047 * C263 + C15054 * C1008 + C32577 * C1017) *
                C5427 +
            (C15053 * C264 + C15047 * C278 + C15054 * C1016 + C32577 * C1026) *
                C32836 +
            (C15053 * C249 + C15047 * C265 + C15054 * C1007 + C32577 * C1015) *
                C5428 +
            (C15053 * C266 + C15047 * C279 + C15054 * C1014 + C32577 * C1025) *
                C32823 +
            (C15053 * C250 + C15047 * C267 + C15054 * C1006 + C32577 * C1013) *
                C5429 +
            (C15053 * C268 + C15047 * C280 + C15054 * C1012 + C32577 * C1024) *
                C32793) *
               C20880 +
           ((C15053 * C1142 + C15047 * C1154 + C15054 * C1694 +
             C32577 * C1697) *
                C5427 +
            (C15053 * C1153 + C15047 * C1169 + C15054 * C1698 +
             C32577 * C1703) *
                C32836 +
            (C15053 * C1141 + C15047 * C1152 + C15054 * C1695 +
             C32577 * C1699) *
                C5428 +
            (C15053 * C1151 + C15047 * C1168 + C15054 * C1700 +
             C32577 * C1704) *
                C32823 +
            (C15053 * C1140 + C15047 * C1150 + C15054 * C1696 +
             C32577 * C1701) *
                C5429 +
            (C15053 * C1149 + C15047 * C1167 + C15054 * C1702 +
             C32577 * C1705) *
                C32793) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C5427 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32836 +
            (C15092 + C15093) * C5428 + (C15094 + C15095) * C32823 +
            C15108 * C5429 + C15109 * C32793) *
               C20880 +
           ((C17058 + C17059) * C5427 + (C17060 + C17061) * C32836 +
            C17495 * C5428 + C17496 * C32823 + C18775 * C5429 +
            C18776 * C32793) *
               C32619) *
              C32491 * C32477 * C110 -
          (((C15628 + C15629) * C32793 + (C15630 + C15631) * C5429 +
            C19469 * C32823 + C19470 * C5428 + C17499 * C32836 +
            C17500 * C5427) *
               C32619 +
           ((C15103 + C15102) * C32793 + (C15101 + C15100) * C5429 +
            (C15099 + C15098) * C32823 + (C15097 + C15096) * C5428 +
            (C15095 + C15094) * C32836 + (C15093 + C15092) * C5427) *
               C20880) *
              C32491 * C32477 * C111 +
          ((C15108 * C5427 + C15109 * C32836 + C15110 * C5428 +
            C15111 * C32823 + (C15107 + C15106) * C5429 +
            (C15105 + C15104) * C32793) *
               C20880 +
           (C18775 * C5427 + C18776 * C32836 + (C15631 + C15630) * C5428 +
            (C15629 + C15628) * C32823 +
            (C15053 * C348 + C15047 * C359 + C15054 * C700 + C32577 * C709) *
                C5429 +
            (C15053 * C358 + C15047 * C378 + C15054 * C710 + C32577 * C715) *
                C32793) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C5427 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32836 +
            (C15092 + C15093) * C5428 + (C15094 + C15095) * C32823 +
            C15108 * C5429 + C15109 * C32793) *
               C20880 +
           ((C17058 + C17059) * C5427 + (C17060 + C17061) * C32836 +
            C17495 * C5428 + C17496 * C32823 + C18775 * C5429 +
            C18776 * C32793) *
               C32619) *
              C345 -
          (((C16728 + C16729) * C32793 + (C16730 + C16731) * C5429 +
            C17497 * C32823 + C17498 * C5428 + (C17065 + C17064) * C32836 +
            (C17063 + C17062) * C5427) *
               C32619 +
           (C19469 * C32793 + C19470 * C5429 + C17499 * C32823 +
            C17500 * C5428 + (C17061 + C17060) * C32836 +
            (C17059 + C17058) * C5427) *
               C20880) *
              C346 +
          ((C17076 * C5427 + C17077 * C32836 + C17040 * C5428 +
            C17041 * C32823 + (C16731 + C16730) * C5429 +
            (C16729 + C16728) * C32793) *
               C20880 +
           ((C17075 + C17074) * C5427 + (C17073 + C17072) * C32836 +
            (C17071 + C17070) * C5428 + (C17069 + C17068) * C32823 +
            (C15053 * C2057 + C15047 * C2064 + C15054 * C2618 +
             C32577 * C2623) *
                C5429 +
            (C15053 * C2063 + C15047 * C2075 + C15054 * C2624 +
             C32577 * C2627) *
                C32793) *
               C32619) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
             C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
                C6291 +
            (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
             C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
                C32430) *
               C20880 +
           ((C15873 * C352 + C32846 * C367 + C15874 * C696 + C32842 * C701 +
             C15875 * C1142 + C32832 * C1154 + C15876 * C1694 +
             C32814 * C1697) *
                C6291 +
            (C15873 * C366 + C32846 * C382 + C15874 * C702 + C32842 * C711 +
             C15875 * C1153 + C32832 * C1169 + C15876 * C1698 +
             C32814 * C1703) *
                C32430) *
               C32619) *
              C32491 * C32477 * C110 -
          (((C16424 + C16425 + C16426 + C16427) * C32430 +
            (C16428 + C16429 + C16430 + C16431) * C6291) *
               C32619 +
           ((C15919 + C15918 + C15917 + C15916) * C32430 +
            (C15915 + C15914 + C15913 + C15912) * C6291) *
               C20880) *
              C32491 * C32477 * C111 +
          (((C15927 + C15926 + C15925 + C15924) * C6291 +
            (C15923 + C15922 + C15921 + C15920) * C32430) *
               C20880 +
           ((C15873 * C350 + C32846 * C363 + C15874 * C698 + C32842 * C705 +
             C15875 * C1140 + C32832 * C1150 + C15876 * C1696 +
             C32814 * C1701) *
                C6291 +
            (C15873 * C362 + C32846 * C380 + C15874 * C706 + C32842 * C713 +
             C15875 * C1149 + C32832 * C1167 + C15876 * C1702 +
             C32814 * C1705) *
                C32430) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
             C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
                C6291 +
            (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
             C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
                C32430) *
               C20880 +
           ((C15873 * C352 + C32846 * C367 + C15874 * C696 + C32842 * C701 +
             C15875 * C1142 + C32832 * C1154 + C15876 * C1694 +
             C32814 * C1697) *
                C6291 +
            (C15873 * C366 + C32846 * C382 + C15874 * C702 + C32842 * C711 +
             C15875 * C1153 + C32832 * C1169 + C15876 * C1698 +
             C32814 * C1703) *
                C32430) *
               C32619) *
              C32491 * C239 -
          (((C15876 * C6427 + C32814 * C6433 + C15875 * C1698 + C32832 * C1703 +
             C15874 * C1153 + C32842 * C1169 + C15873 * C702 + C32846 * C711) *
                C32430 +
            (C15876 * C6424 + C32814 * C6428 + C15875 * C1694 + C32832 * C1697 +
             C15874 * C1142 + C32842 * C1154 + C15873 * C696 + C32846 * C701) *
                C6291) *
               C32619 +
           ((C15876 * C1019 + C32814 * C1027 + C15875 * C1016 + C32832 * C1026 +
             C15874 * C264 + C32842 * C278 + C15873 * C261 + C32846 * C277) *
                C32430 +
            (C15876 * C1009 + C32814 * C1018 + C15875 * C1008 + C32832 * C1017 +
             C15874 * C248 + C32842 * C263 + C15873 * C247 + C32846 * C262) *
                C6291) *
               C20880) *
              C32491 * C240 +
          (((C15873 * C248 + C32846 * C263 + C15874 * C1008 + C32842 * C1017 +
             C15875 * C1009 + C32832 * C1018 + C15876 * C6354 +
             C32814 * C6357) *
                C6291 +
            (C15873 * C264 + C32846 * C278 + C15874 * C1016 + C32842 * C1026 +
             C15875 * C1019 + C32832 * C1027 + C15876 * C6356 +
             C32814 * C6360) *
                C32430) *
               C20880 +
           ((C15873 * C1142 + C32846 * C1154 + C15874 * C1694 + C32842 * C1697 +
             C15875 * C6424 + C32832 * C6428 + C15876 * C6690 +
             C32814 * C6691) *
                C6291 +
            (C15873 * C1153 + C32846 * C1169 + C15874 * C1698 + C32842 * C1703 +
             C15875 * C6427 + C32832 * C6433 + C15876 * C6692 +
             C32814 * C6693) *
                C32430) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
             C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
                C6291 +
            (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
             C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
                C32430) *
               C20880 +
           ((C27492 + C27493 + C27494 + C27495) * C6291 +
            (C27496 + C27497 + C27498 + C27499) * C32430) *
               C32619) *
              C345 -
          (((C27500 + C27501 + C27502 + C27503) * C32430 +
            (C27504 + C27505 + C27506 + C27507) * C6291) *
               C32619 +
           ((C27499 + C27498 + C27497 + C27496) * C32430 +
            (C27495 + C27494 + C27493 + C27492) * C6291) *
               C20880) *
              C346 +
          (((C27507 + C27506 + C27505 + C27504) * C6291 +
            (C27503 + C27502 + C27501 + C27500) * C32430) *
               C20880 +
           ((C15873 * C2059 + C32846 * C2068 + C15874 * C2616 + C32842 * C2619 +
             C15875 * C7024 + C32832 * C7028 + C15876 * C7561 +
             C32814 * C7562) *
                C6291 +
            (C15873 * C2067 + C32846 * C2077 + C15874 * C2620 + C32842 * C2625 +
             C15875 * C7027 + C32832 * C7033 + C15876 * C7563 +
             C32814 * C7564) *
                C32430) *
               C32619) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                 C5427 +
             (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                 C32836 +
             (C15092 + C15093) * C5428 + (C15094 + C15095) * C32823 +
             C15108 * C5429 + C15109 * C32793) *
                C20880 +
            ((C17058 + C17059) * C5427 + (C17060 + C17061) * C32836 +
             C17495 * C5428 + C17496 * C32823 + C18775 * C5429 +
             C18776 * C32793) *
                C32619) *
               C584 -
           (((C16728 + C16729) * C32793 + (C16730 + C16731) * C5429 +
             C17497 * C32823 + C17498 * C5428 + (C17065 + C17064) * C32836 +
             (C17063 + C17062) * C5427) *
                C32619 +
            (C19469 * C32793 + C19470 * C5429 + C17499 * C32823 +
             C17500 * C5428 + (C17061 + C17060) * C32836 +
             (C17059 + C17058) * C5427) *
                C20880) *
               C585) *
              C32477 * C472 +
          (((C17495 * C5427 + C17496 * C32836 + C18775 * C5428 +
             C18776 * C32823 + (C15631 + C15630) * C5429 +
             (C15629 + C15628) * C32793) *
                C20880 +
            (C17040 * C5427 + C17041 * C32836 + (C16731 + C16730) * C5428 +
             (C16729 + C16728) * C32823 +
             (C15053 * C356 + C15047 * C374 + C15054 * C2280 + C32577 * C2281) *
                 C5429 +
             (C15053 * C375 + C15047 * C386 + C15054 * C2282 + C32577 * C2283) *
                 C32793) *
                C32619) *
               C585 -
           (((C15628 + C15629) * C32793 + (C15630 + C15631) * C5429 +
             C19469 * C32823 + C19470 * C5428 + C17499 * C32836 +
             C17500 * C5427) *
                C32619 +
            ((C15103 + C15102) * C32793 + (C15101 + C15100) * C5429 +
             (C15099 + C15098) * C32823 + (C15097 + C15096) * C5428 +
             (C15095 + C15094) * C32836 + (C15093 + C15092) * C5427) *
                C20880) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
              C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
                 C6291 +
             (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
              C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
                 C32430) *
                C20880 +
            ((C27492 + C27493 + C27494 + C27495) * C6291 +
             (C27496 + C27497 + C27498 + C27499) * C32430) *
                C32619) *
               C584 -
           (((C27500 + C27501 + C27502 + C27503) * C32430 +
             (C27504 + C27505 + C27506 + C27507) * C6291) *
                C32619 +
            ((C27499 + C27498 + C27497 + C27496) * C32430 +
             (C27495 + C27494 + C27493 + C27492) * C6291) *
                C20880) *
               C585) *
              C32477 * C472 +
          ((((C16431 + C16430 + C16429 + C16428) * C6291 +
             (C16427 + C16426 + C16425 + C16424) * C32430) *
                C20880 +
            ((C15873 * C354 + C32846 * C370 + C15874 * C1145 + C32842 * C1159 +
              C15875 * C1146 + C32832 * C1160 + C15876 * C7243 +
              C32814 * C7244) *
                 C6291 +
             (C15873 * C371 + C32846 * C384 + C15874 * C1161 + C32842 * C1172 +
              C15875 * C1162 + C32832 * C1173 + C15876 * C7245 +
              C32814 * C7246) *
                 C32430) *
                C32619) *
               C585 -
           (((C16424 + C16425 + C16426 + C16427) * C32430 +
             (C16428 + C16429 + C16430 + C16431) * C6291) *
                C32619 +
            ((C15919 + C15918 + C15917 + C15916) * C32430 +
             (C15915 + C15914 + C15913 + C15912) * C6291) *
                C20880) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C5427 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32836 +
            (C15092 + C15093) * C5428 + (C15094 + C15095) * C32823 +
            C15108 * C5429 + C15109 * C32793) *
               C20880 +
           ((C17058 + C17059) * C5427 + (C17060 + C17061) * C32836 +
            C17495 * C5428 + C17496 * C32823 + C18775 * C5429 +
            C18776 * C32793) *
               C32619) *
              C32491 * C32477 * C110 -
          (((C15628 + C15629) * C32793 + (C15630 + C15631) * C5429 +
            C19469 * C32823 + C19470 * C5428 + C17499 * C32836 +
            C17500 * C5427) *
               C32619 +
           ((C15103 + C15102) * C32793 + (C15101 + C15100) * C5429 +
            (C15099 + C15098) * C32823 + (C15097 + C15096) * C5428 +
            (C15095 + C15094) * C32836 + (C15093 + C15092) * C5427) *
               C20880) *
              C32491 * C32477 * C111 +
          ((C15108 * C5427 + C15109 * C32836 + C15110 * C5428 +
            C15111 * C32823 + (C15107 + C15106) * C5429 +
            (C15105 + C15104) * C32793) *
               C20880 +
           (C18775 * C5427 + C18776 * C32836 + (C15631 + C15630) * C5428 +
            (C15629 + C15628) * C32823 +
            (C15053 * C348 + C15047 * C359 + C15054 * C700 + C32577 * C709) *
                C5429 +
            (C15053 * C358 + C15047 * C378 + C15054 * C710 + C32577 * C715) *
                C32793) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C15053 * C119 + C15047 * C126 + C15054 * C247 + C32577 * C262) *
                C5427 +
            (C15053 * C127 + C15047 * C140 + C15054 * C261 + C32577 * C277) *
                C32836 +
            (C15092 + C15093) * C5428 + (C15094 + C15095) * C32823 +
            C15108 * C5429 + C15109 * C32793) *
               C20880 +
           ((C17058 + C17059) * C5427 + (C17060 + C17061) * C32836 +
            C17495 * C5428 + C17496 * C32823 + C18775 * C5429 +
            C18776 * C32793) *
               C32619) *
              C32491 * C239 -
          (((C19271 + C19272) * C32793 + (C19273 + C19274) * C5429 +
            (C17297 + C17298) * C32823 + (C17299 + C17300) * C5428 +
            (C17714 + C17713) * C32836 + (C17712 + C17711) * C5427) *
               C32619 +
           ((C15466 + C15467) * C32793 + (C15468 + C15469) * C5429 +
            (C15470 + C15471) * C32823 + (C15472 + C15473) * C5428 +
            (C15054 * C264 + C32577 * C278 + C15053 * C261 + C15047 * C277) *
                C32836 +
            (C15054 * C248 + C32577 * C263 + C15053 * C247 + C15047 * C262) *
                C5427) *
               C20880) *
              C32491 * C240 +
          (((C15053 * C248 + C15047 * C263 + C15054 * C1008 + C32577 * C1017) *
                C5427 +
            (C15053 * C264 + C15047 * C278 + C15054 * C1016 + C32577 * C1026) *
                C32836 +
            (C15053 * C249 + C15047 * C265 + C15054 * C1007 + C32577 * C1015) *
                C5428 +
            (C15053 * C266 + C15047 * C279 + C15054 * C1014 + C32577 * C1025) *
                C32823 +
            (C15053 * C250 + C15047 * C267 + C15054 * C1006 + C32577 * C1013) *
                C5429 +
            (C15053 * C268 + C15047 * C280 + C15054 * C1012 + C32577 * C1024) *
                C32793) *
               C20880 +
           ((C15053 * C1142 + C15047 * C1154 + C15054 * C1694 +
             C32577 * C1697) *
                C5427 +
            (C15053 * C1153 + C15047 * C1169 + C15054 * C1698 +
             C32577 * C1703) *
                C32836 +
            (C15053 * C1141 + C15047 * C1152 + C15054 * C1695 +
             C32577 * C1699) *
                C5428 +
            (C15053 * C1151 + C15047 * C1168 + C15054 * C1700 +
             C32577 * C1704) *
                C32823 +
            (C15053 * C1140 + C15047 * C1150 + C15054 * C1696 +
             C32577 * C1701) *
                C5429 +
            (C15053 * C1149 + C15047 * C1167 + C15054 * C1702 +
             C32577 * C1705) *
                C32793) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
             C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
                C6291 +
            (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
             C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
                C32430) *
               C20880 +
           ((C15873 * C352 + C32846 * C367 + C15874 * C696 + C32842 * C701 +
             C15875 * C1142 + C32832 * C1154 + C15876 * C1694 +
             C32814 * C1697) *
                C6291 +
            (C15873 * C366 + C32846 * C382 + C15874 * C702 + C32842 * C711 +
             C15875 * C1153 + C32832 * C1169 + C15876 * C1698 +
             C32814 * C1703) *
                C32430) *
               C32619) *
              C32491 * C32477 * C110 -
          (((C16424 + C16425 + C16426 + C16427) * C32430 +
            (C16428 + C16429 + C16430 + C16431) * C6291) *
               C32619 +
           ((C15919 + C15918 + C15917 + C15916) * C32430 +
            (C15915 + C15914 + C15913 + C15912) * C6291) *
               C20880) *
              C32491 * C32477 * C111 +
          (((C15927 + C15926 + C15925 + C15924) * C6291 +
            (C15923 + C15922 + C15921 + C15920) * C32430) *
               C20880 +
           ((C15873 * C350 + C32846 * C363 + C15874 * C698 + C32842 * C705 +
             C15875 * C1140 + C32832 * C1150 + C15876 * C1696 +
             C32814 * C1701) *
                C6291 +
            (C15873 * C362 + C32846 * C380 + C15874 * C706 + C32842 * C713 +
             C15875 * C1149 + C32832 * C1167 + C15876 * C1702 +
             C32814 * C1705) *
                C32430) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C15873 * C119 + C32846 * C126 + C15874 * C247 + C32842 * C262 +
             C15875 * C248 + C32832 * C263 + C15876 * C1008 + C32814 * C1017) *
                C6291 +
            (C15873 * C127 + C32846 * C140 + C15874 * C261 + C32842 * C277 +
             C15875 * C264 + C32832 * C278 + C15876 * C1016 + C32814 * C1026) *
                C32430) *
               C20880 +
           ((C15873 * C352 + C32846 * C367 + C15874 * C696 + C32842 * C701 +
             C15875 * C1142 + C32832 * C1154 + C15876 * C1694 +
             C32814 * C1697) *
                C6291 +
            (C15873 * C366 + C32846 * C382 + C15874 * C702 + C32842 * C711 +
             C15875 * C1153 + C32832 * C1169 + C15876 * C1698 +
             C32814 * C1703) *
                C32430) *
               C32619) *
              C32491 * C239 -
          (((C15876 * C6427 + C32814 * C6433 + C15875 * C1698 + C32832 * C1703 +
             C15874 * C1153 + C32842 * C1169 + C15873 * C702 + C32846 * C711) *
                C32430 +
            (C15876 * C6424 + C32814 * C6428 + C15875 * C1694 + C32832 * C1697 +
             C15874 * C1142 + C32842 * C1154 + C15873 * C696 + C32846 * C701) *
                C6291) *
               C32619 +
           ((C15876 * C1019 + C32814 * C1027 + C15875 * C1016 + C32832 * C1026 +
             C15874 * C264 + C32842 * C278 + C15873 * C261 + C32846 * C277) *
                C32430 +
            (C15876 * C1009 + C32814 * C1018 + C15875 * C1008 + C32832 * C1017 +
             C15874 * C248 + C32842 * C263 + C15873 * C247 + C32846 * C262) *
                C6291) *
               C20880) *
              C32491 * C240 +
          (((C15873 * C248 + C32846 * C263 + C15874 * C1008 + C32842 * C1017 +
             C15875 * C1009 + C32832 * C1018 + C15876 * C6354 +
             C32814 * C6357) *
                C6291 +
            (C15873 * C264 + C32846 * C278 + C15874 * C1016 + C32842 * C1026 +
             C15875 * C1019 + C32832 * C1027 + C15876 * C6356 +
             C32814 * C6360) *
                C32430) *
               C20880 +
           ((C15873 * C1142 + C32846 * C1154 + C15874 * C1694 + C32842 * C1697 +
             C15875 * C6424 + C32832 * C6428 + C15876 * C6690 +
             C32814 * C6691) *
                C6291 +
            (C15873 * C1153 + C32846 * C1169 + C15874 * C1698 + C32842 * C1703 +
             C15875 * C6427 + C32832 * C6433 + C15876 * C6692 +
             C32814 * C6693) *
                C32430) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
             C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
                C31559 +
            (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
             C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
                C32754 +
            (C7744 + C7745 + C7746 + C7747) * C31540 +
            (C7748 + C7749 + C7750 + C7751) * C32440) *
               C32532 * C32491 * C470 -
           ((C8102 + C8103 + C8104 + C8105) * C32440 +
            (C8106 + C8107 + C8108 + C8109) * C31540 +
            (C7708 * C1019 + C32814 * C1027 + C7707 * C1016 + C7701 * C1026 +
             C7706 * C264 + C7700 * C278 + C7705 * C261 + C7699 * C277) *
                C32754 +
            (C7708 * C1009 + C32814 * C1018 + C7707 * C1008 + C7701 * C1017 +
             C7706 * C248 + C7700 * C263 + C7705 * C247 + C7699 * C262) *
                C31559) *
               C32532 * C32491 * C471) *
              C472 +
          (((C8109 + C8108 + C8107 + C8106) * C31559 +
            (C8105 + C8104 + C8103 + C8102) * C32754 +
            (C7705 * C245 + C7699 * C258 + C7706 * C250 + C7700 * C267 +
             C7707 * C1006 + C7701 * C1013 + C7708 * C1011 + C32814 * C1022) *
                C31540 +
            (C7705 * C257 + C7699 * C275 + C7706 * C268 + C7700 * C280 +
             C7707 * C1012 + C7701 * C1024 + C7708 * C1023 + C32814 * C1029) *
                C32440) *
               C32532 * C32491 * C471 -
           ((C7752 + C7753 + C7754 + C7755) * C32440 +
            (C7756 + C7757 + C7758 + C7759) * C31540 +
            (C7751 + C7750 + C7749 + C7748) * C32754 +
            (C7747 + C7746 + C7745 + C7744) * C31559) *
               C32532 * C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C2758 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C2752 +
            (C2795 + C2796) * C2759 + (C2797 + C2798) * C2753 + C2811 * C2760 +
            C2812 * C2754 + C2813 * C2761 + C2814 * C32808) *
               C32532 * C32491 * C470 -
           ((C3165 + C3166) * C32808 + (C3167 + C3168) * C2761 +
            (C3169 + C3170) * C2754 + (C3171 + C3172) * C2760 +
            (C3173 + C3174) * C2753 + (C3175 + C3176) * C2759 +
            (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                C2752 +
            (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                C2758) *
               C32532 * C32491 * C471) *
              C472 +
          (((C3176 + C3175) * C2758 + (C3174 + C3173) * C2752 +
            (C3172 + C3171) * C2759 + (C3170 + C3169) * C2753 +
            (C3168 + C3167) * C2760 + (C3166 + C3165) * C2754 +
            (C2756 * C243 + C32773 * C254 + C2757 * C252 + C32577 * C271) *
                C2761 +
            (C2756 * C253 + C32773 * C273 + C2757 * C272 + C32577 * C282) *
                C32808) *
               C32532 * C32491 * C471 -
           ((C2807 + C2808) * C32808 + (C2809 + C2810) * C2761 +
            (C2806 + C2805) * C2754 + (C2804 + C2803) * C2760 +
            (C2802 + C2801) * C2753 + (C2800 + C2799) * C2759 +
            (C2798 + C2797) * C2752 + (C2796 + C2795) * C2758) *
               C32532 * C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                 C31559 +
             (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                 C32754 +
             (C2795 + C2796) * C31540 + (C2797 + C2798) * C32440) *
                C10305 +
            ((C4669 + C4670) * C31559 + (C4671 + C4672) * C32754 +
             C5097 * C31540 + C5098 * C32440) *
                C10306 +
            C12885 * C32807) *
               C32491 * C470 -
           (((C13088 + C13089) * C32440 + (C13090 + C13091) * C31540 +
             (C2757 * C1158 + C32577 * C1171 + C2756 * C1157 + C32773 * C1170) *
                 C32754 +
             (C2757 * C1144 + C32577 * C1156 + C2756 * C1143 + C32773 * C1155) *
                 C31559) *
                C32807 +
            ((C4899 + C4900) * C32440 + (C4901 + C4902) * C31540 +
             (C5308 + C5307) * C32754 + (C5306 + C5305) * C31559) *
                C10306 +
            ((C3173 + C3174) * C32440 + (C3175 + C3176) * C31540 +
             (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                 C32754 +
             (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                 C31559) *
                C10305) *
               C32491 * C471) *
              C472 +
          ((((C3176 + C3175) * C31559 + (C3174 + C3173) * C32754 +
             (C3172 + C3171) * C31540 + (C3170 + C3169) * C32440) *
                C10305 +
            ((C4902 + C4901) * C31559 + (C4900 + C4899) * C32754 +
             (C4898 + C4897) * C31540 + (C4896 + C4895) * C32440) *
                C10306 +
            ((C13091 + C13090) * C31559 + (C13089 + C13088) * C32754 +
             (C2756 * C1147 + C32773 * C1163 + C2757 * C1148 + C32577 * C1164) *
                 C31540 +
             (C2756 * C1165 + C32773 * C1174 + C2757 * C1166 + C32577 * C1175) *
                 C32440) *
                C32807) *
               C32491 * C471 -
           (((C4673 + C4674) * C32440 + (C4675 + C4676) * C31540 +
             (C4677 + C4678) * C32754 + (C4679 + C4680) * C31559) *
                C32807 +
            (C5099 * C32440 + C5100 * C31540 + C5101 * C32754 +
             C5102 * C31559) *
                C10306 +
            ((C2802 + C2801) * C32440 + (C2800 + C2799) * C31540 +
             (C2798 + C2797) * C32754 + (C2796 + C2795) * C31559) *
                C10305) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
             C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
                C31559 +
            (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
             C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
                C32754 +
            (C7744 + C7745 + C7746 + C7747) * C31540 +
            (C7748 + C7749 + C7750 + C7751) * C32440) *
               C32532 * C584 -
           ((C8256 + C8257 + C8258 + C8259) * C32440 +
            (C8260 + C8261 + C8262 + C8263) * C31540 +
            (C7708 * C1698 + C32814 * C1703 + C7707 * C1153 + C7701 * C1169 +
             C7706 * C702 + C7700 * C711 + C7705 * C366 + C7699 * C382) *
                C32754 +
            (C7708 * C1694 + C32814 * C1697 + C7707 * C1142 + C7701 * C1154 +
             C7706 * C696 + C7700 * C701 + C7705 * C352 + C7699 * C367) *
                C31559) *
               C32532 * C585) *
              C470 +
          (((C7705 * C696 + C7699 * C701 + C7706 * C1142 + C7700 * C1154 +
             C7707 * C1694 + C7701 * C1697 + C7708 * C6424 + C32814 * C6428) *
                C31559 +
            (C7705 * C702 + C7699 * C711 + C7706 * C1153 + C7700 * C1169 +
             C7707 * C1698 + C7701 * C1703 + C7708 * C6427 + C32814 * C6433) *
                C32754 +
            (C7705 * C697 + C7699 * C703 + C7706 * C1141 + C7700 * C1152 +
             C7707 * C1695 + C7701 * C1699 + C7708 * C6604 + C32814 * C6605) *
                C31540 +
            (C7705 * C704 + C7699 * C712 + C7706 * C1151 + C7700 * C1168 +
             C7707 * C1700 + C7701 * C1704 + C7708 * C6606 + C32814 * C6607) *
                C32440) *
               C32532 * C585 -
           ((C8102 + C8103 + C8104 + C8105) * C32440 +
            (C8106 + C8107 + C8108 + C8109) * C31540 +
            (C7708 * C1019 + C32814 * C1027 + C7707 * C1016 + C7701 * C1026 +
             C7706 * C264 + C7700 * C278 + C7705 * C261 + C7699 * C277) *
                C32754 +
            (C7708 * C1009 + C32814 * C1018 + C7707 * C1008 + C7701 * C1017 +
             C7706 * C248 + C7700 * C263 + C7705 * C247 + C7699 * C262) *
                C31559) *
               C32532 * C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C2758 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C2752 +
            (C2795 + C2796) * C2759 + (C2797 + C2798) * C2753 + C2811 * C2760 +
            C2812 * C2754 + C2813 * C2761 + C2814 * C32808) *
               C32532 * C584 -
           ((C3331 + C3332) * C32808 + (C3333 + C3334) * C2761 +
            (C3335 + C3336) * C2754 + (C3337 + C3338) * C2760 +
            (C3339 + C3340) * C2753 + (C3341 + C3342) * C2759 +
            (C2757 * C702 + C32577 * C711 + C2756 * C366 + C32773 * C382) *
                C2752 +
            (C2757 * C696 + C32577 * C701 + C2756 * C352 + C32773 * C367) *
                C2758) *
               C32532 * C585) *
              C470 +
          (((C2756 * C696 + C32773 * C701 + C2757 * C1142 + C32577 * C1154) *
                C2758 +
            (C2756 * C702 + C32773 * C711 + C2757 * C1153 + C32577 * C1169) *
                C2752 +
            (C2756 * C697 + C32773 * C703 + C2757 * C1141 + C32577 * C1152) *
                C2759 +
            (C2756 * C704 + C32773 * C712 + C2757 * C1151 + C32577 * C1168) *
                C2753 +
            (C2756 * C698 + C32773 * C705 + C2757 * C1140 + C32577 * C1150) *
                C2760 +
            (C2756 * C706 + C32773 * C713 + C2757 * C1149 + C32577 * C1167) *
                C2754 +
            (C2756 * C699 + C32773 * C707 + C2757 * C1508 + C32577 * C1509) *
                C2761 +
            (C2756 * C708 + C32773 * C714 + C2757 * C1510 + C32577 * C1511) *
                C32808) *
               C32532 * C585 -
           ((C3165 + C3166) * C32808 + (C3167 + C3168) * C2761 +
            (C3169 + C3170) * C2754 + (C3171 + C3172) * C2760 +
            (C3173 + C3174) * C2753 + (C3175 + C3176) * C2759 +
            (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                C2752 +
            (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                C2758) *
               C32532 * C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                 C31559 +
             (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                 C32754 +
             (C2795 + C2796) * C31540 + (C2797 + C2798) * C32440) *
                C10305 +
            ((C4669 + C4670) * C31559 + (C4671 + C4672) * C32754 +
             C5097 * C31540 + C5098 * C32440) *
                C10306 +
            C12885 * C32807) *
               C584 -
           (((C12875 + C12876) * C32440 + (C12877 + C12878) * C31540 +
             (C12879 + C12880) * C32754 + (C12881 + C12882) * C31559) *
                C32807 +
            (C13286 * C32440 + C13287 * C31540 + (C4681 + C4682) * C32754 +
             (C4683 + C4684) * C31559) *
                C10306 +
            (C5101 * C32440 + C5102 * C31540 + (C4672 + C4671) * C32754 +
             (C4670 + C4669) * C31559) *
                C10305) *
               C585) *
              C470 +
          ((((C5305 + C5306) * C31559 + (C5307 + C5308) * C32754 +
             (C4902 + C4901) * C31540 + (C4900 + C4899) * C32440) *
                C10305 +
            ((C13490 + C13491) * C31559 + (C13492 + C13493) * C32754 +
             (C13091 + C13090) * C31540 + (C13089 + C13088) * C32440) *
                C10306 +
            ((C2756 * C2616 + C32773 * C2619 + C2757 * C7024 + C32577 * C7028) *
                 C31559 +
             (C2756 * C2620 + C32773 * C2625 + C2757 * C7027 + C32577 * C7033) *
                 C32754 +
             (C2756 * C2617 + C32773 * C2621 + C2757 * C7393 + C32577 * C7394) *
                 C31540 +
             (C2756 * C2622 + C32773 * C2626 + C2757 * C7395 + C32577 * C7396) *
                 C32440) *
                C32807) *
               C585 -
           (((C13088 + C13089) * C32440 + (C13090 + C13091) * C31540 +
             (C13493 + C13492) * C32754 + (C13491 + C13490) * C31559) *
                C32807 +
            ((C4899 + C4900) * C32440 + (C4901 + C4902) * C31540 +
             (C5308 + C5307) * C32754 + (C5306 + C5305) * C31559) *
                C10306 +
            ((C3173 + C3174) * C32440 + (C3175 + C3176) * C31540 +
             (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                 C32754 +
             (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                 C31559) *
                C10305) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                   C2758 +
               (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                   C2752 +
               (C2795 + C2796) * C2759 + (C2797 + C2798) * C2753 +
               C2811 * C2760 + C2812 * C2754 + C2813 * C2761 + C2814 * C32808) *
                  C32532 * C32491 * C32477 * C110 -
              ((C2807 + C2808) * C32808 + (C2809 + C2810) * C2761 +
               (C2806 + C2805) * C2754 + (C2804 + C2803) * C2760 +
               (C2802 + C2801) * C2753 + (C2800 + C2799) * C2759 +
               (C2798 + C2797) * C2752 + (C2796 + C2795) * C2758) *
                  C32532 * C32491 * C32477 * C111 +
              (C2811 * C2758 + C2812 * C2752 + C2813 * C2759 + C2814 * C2753 +
               (C2810 + C2809) * C2760 + (C2808 + C2807) * C2754 +
               (C2756 * C124 + C32773 * C137 + C2757 * C474 + C32577 * C475) *
                   C2761 +
               (C2756 * C136 + C32773 * C145 + C2757 * C476 + C32577 * C477) *
                   C32808) *
                  C32532 * C32491 * C32477 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                   C2758 +
               (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                   C2752 +
               (C2795 + C2796) * C2759 + (C2797 + C2798) * C2753 +
               C2811 * C2760 + C2812 * C2754 + C2813 * C2761 + C2814 * C32808) *
                  C32532 * C32491 * C239 -
              ((C2757 * C270 + C32577 * C281 + C2756 * C255 + C32773 * C274) *
                   C32808 +
               (C2757 * C251 + C32577 * C269 + C2756 * C244 + C32773 * C256) *
                   C2761 +
               (C2757 * C268 + C32577 * C280 + C2756 * C257 + C32773 * C275) *
                   C2754 +
               (C2757 * C250 + C32577 * C267 + C2756 * C245 + C32773 * C258) *
                   C2760 +
               (C2757 * C266 + C32577 * C279 + C2756 * C259 + C32773 * C276) *
                   C2753 +
               (C2757 * C249 + C32577 * C265 + C2756 * C246 + C32773 * C260) *
                   C2759 +
               (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                   C2752 +
               (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                   C2758) *
                  C32532 * C32491 * C240 +
              ((C2756 * C248 + C32773 * C263 + C2757 * C1008 + C32577 * C1017) *
                   C2758 +
               (C2756 * C264 + C32773 * C278 + C2757 * C1016 + C32577 * C1026) *
                   C2752 +
               (C2756 * C249 + C32773 * C265 + C2757 * C1007 + C32577 * C1015) *
                   C2759 +
               (C2756 * C266 + C32773 * C279 + C2757 * C1014 + C32577 * C1025) *
                   C2753 +
               (C2756 * C250 + C32773 * C267 + C2757 * C1006 + C32577 * C1013) *
                   C2760 +
               (C2756 * C268 + C32773 * C280 + C2757 * C1012 + C32577 * C1024) *
                   C2754 +
               (C2756 * C251 + C32773 * C269 + C2757 * C1322 + C32577 * C1323) *
                   C2761 +
               (C2756 * C270 + C32773 * C281 + C2757 * C1324 + C32577 * C1325) *
                   C32808) *
                  C32532 * C32491 * C241) *
             C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
               C2758 +
           (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
               C2752 +
           (C2795 + C2796) * C2759 + (C2797 + C2798) * C2753 + C2811 * C2760 +
           C2812 * C2754 + C2813 * C2761 + C2814 * C32808) *
              C32532 * C345 -
          ((C2757 * C708 + C32577 * C714 + C2756 * C360 + C32773 * C379) *
               C32808 +
           (C2757 * C699 + C32577 * C707 + C2756 * C349 + C32773 * C361) *
               C2761 +
           (C2757 * C706 + C32577 * C713 + C2756 * C362 + C32773 * C380) *
               C2754 +
           (C2757 * C698 + C32577 * C705 + C2756 * C350 + C32773 * C363) *
               C2760 +
           (C2757 * C704 + C32577 * C712 + C2756 * C364 + C32773 * C381) *
               C2753 +
           (C2757 * C697 + C32577 * C703 + C2756 * C351 + C32773 * C365) *
               C2759 +
           (C2757 * C702 + C32577 * C711 + C2756 * C366 + C32773 * C382) *
               C2752 +
           (C2757 * C696 + C32577 * C701 + C2756 * C352 + C32773 * C367) *
               C2758) *
              C32532 * C346 +
          ((C2756 * C353 + C32773 * C368 + C2757 * C1143 + C32577 * C1155) *
               C2758 +
           (C2756 * C369 + C32773 * C383 + C2757 * C1157 + C32577 * C1170) *
               C2752 +
           (C2756 * C354 + C32773 * C370 + C2757 * C1145 + C32577 * C1159) *
               C2759 +
           (C2756 * C371 + C32773 * C384 + C2757 * C1161 + C32577 * C1172) *
               C2753 +
           (C2756 * C355 + C32773 * C372 + C2757 * C1147 + C32577 * C1163) *
               C2760 +
           (C2756 * C373 + C32773 * C385 + C2757 * C1165 + C32577 * C1174) *
               C2754 +
           (C2756 * C356 + C32773 * C374 + C2757 * C2280 + C32577 * C2281) *
               C2761 +
           (C2756 * C375 + C32773 * C386 + C2757 * C2282 + C32577 * C2283) *
               C32808) *
              C32532 * C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
            C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
               C31559 +
           (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
            C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
               C32754 +
           (C7744 + C7745 + C7746 + C7747) * C31540 +
           (C7748 + C7749 + C7750 + C7751) * C32440) *
              C32532 * C32491 * C32477 * C110 -
          ((C7752 + C7753 + C7754 + C7755) * C32440 +
           (C7756 + C7757 + C7758 + C7759) * C31540 +
           (C7751 + C7750 + C7749 + C7748) * C32754 +
           (C7747 + C7746 + C7745 + C7744) * C31559) *
              C32532 * C32491 * C32477 * C111 +
          ((C7759 + C7758 + C7757 + C7756) * C31559 +
           (C7755 + C7754 + C7753 + C7752) * C32754 +
           (C7705 * C122 + C7699 * C132 + C7706 * C244 + C7700 * C256 +
            C7707 * C251 + C7701 * C269 + C7708 * C1322 + C32814 * C1323) *
               C31540 +
           (C7705 * C133 + C7699 * C143 + C7706 * C255 + C7700 * C274 +
            C7707 * C270 + C7701 * C281 + C7708 * C1324 + C32814 * C1325) *
               C32440) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
            C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
               C31559 +
           (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
            C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
               C32754 +
           (C7744 + C7745 + C7746 + C7747) * C31540 +
           (C7748 + C7749 + C7750 + C7751) * C32440) *
              C32532 * C32491 * C239 -
          ((C7708 * C1021 + C32814 * C1028 + C7707 * C1014 + C7701 * C1025 +
            C7706 * C266 + C7700 * C279 + C7705 * C259 + C7699 * C276) *
               C32440 +
           (C7708 * C1010 + C32814 * C1020 + C7707 * C1007 + C7701 * C1015 +
            C7706 * C249 + C7700 * C265 + C7705 * C246 + C7699 * C260) *
               C31540 +
           (C7708 * C1019 + C32814 * C1027 + C7707 * C1016 + C7701 * C1026 +
            C7706 * C264 + C7700 * C278 + C7705 * C261 + C7699 * C277) *
               C32754 +
           (C7708 * C1009 + C32814 * C1018 + C7707 * C1008 + C7701 * C1017 +
            C7706 * C248 + C7700 * C263 + C7705 * C247 + C7699 * C262) *
               C31559) *
              C32532 * C32491 * C240 +
          ((C7705 * C248 + C7699 * C263 + C7706 * C1008 + C7700 * C1017 +
            C7707 * C1009 + C7701 * C1018 + C7708 * C6354 + C32814 * C6357) *
               C31559 +
           (C7705 * C264 + C7699 * C278 + C7706 * C1016 + C7700 * C1026 +
            C7707 * C1019 + C7701 * C1027 + C7708 * C6356 + C32814 * C6360) *
               C32754 +
           (C7705 * C249 + C7699 * C265 + C7706 * C1007 + C7700 * C1015 +
            C7707 * C1010 + C7701 * C1020 + C7708 * C6518 + C32814 * C6519) *
               C31540 +
           (C7705 * C266 + C7699 * C279 + C7706 * C1014 + C7700 * C1025 +
            C7707 * C1021 + C7701 * C1028 + C7708 * C6520 + C32814 * C6521) *
               C32440) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
            C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
               C31559 +
           (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
            C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
               C32754 +
           (C7744 + C7745 + C7746 + C7747) * C31540 +
           (C7748 + C7749 + C7750 + C7751) * C32440) *
              C32532 * C345 -
          ((C7708 * C1700 + C32814 * C1704 + C7707 * C1151 + C7701 * C1168 +
            C7706 * C704 + C7700 * C712 + C7705 * C364 + C7699 * C381) *
               C32440 +
           (C7708 * C1695 + C32814 * C1699 + C7707 * C1141 + C7701 * C1152 +
            C7706 * C697 + C7700 * C703 + C7705 * C351 + C7699 * C365) *
               C31540 +
           (C7708 * C1698 + C32814 * C1703 + C7707 * C1153 + C7701 * C1169 +
            C7706 * C702 + C7700 * C711 + C7705 * C366 + C7699 * C382) *
               C32754 +
           (C7708 * C1694 + C32814 * C1697 + C7707 * C1142 + C7701 * C1154 +
            C7706 * C696 + C7700 * C701 + C7705 * C352 + C7699 * C367) *
               C31559) *
              C32532 * C346 +
          ((C7705 * C353 + C7699 * C368 + C7706 * C1143 + C7700 * C1155 +
            C7707 * C1144 + C7701 * C1156 + C7708 * C6425 + C32814 * C6429) *
               C31559 +
           (C7705 * C369 + C7699 * C383 + C7706 * C1157 + C7700 * C1170 +
            C7707 * C1158 + C7701 * C1171 + C7708 * C6431 + C32814 * C6434) *
               C32754 +
           (C7705 * C354 + C7699 * C370 + C7706 * C1145 + C7700 * C1159 +
            C7707 * C1146 + C7701 * C1160 + C7708 * C7243 + C32814 * C7244) *
               C31540 +
           (C7705 * C371 + C7699 * C384 + C7706 * C1161 + C7700 * C1172 +
            C7707 * C1162 + C7701 * C1173 + C7708 * C7245 + C32814 * C7246) *
               C32440) *
              C32532 * C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C31559 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C32754 +
            (C2795 + C2796) * C31540 + (C2797 + C2798) * C32440) *
               C10305 +
           ((C4669 + C4670) * C31559 + (C4671 + C4672) * C32754 +
            C5097 * C31540 + C5098 * C32440) *
               C10306 +
           ((C4684 + C4683) * C31559 + (C4682 + C4681) * C32754 +
            (C4680 + C4679) * C31540 + (C4678 + C4677) * C32440) *
               C32807) *
              C32491 * C32477 * C110 -
          (((C4673 + C4674) * C32440 + (C4675 + C4676) * C31540 +
            (C4677 + C4678) * C32754 + (C4679 + C4680) * C31559) *
               C32807 +
           (C5099 * C32440 + C5100 * C31540 + C5101 * C32754 + C5102 * C31559) *
               C10306 +
           ((C2802 + C2801) * C32440 + (C2800 + C2799) * C31540 +
            (C2798 + C2797) * C32754 + (C2796 + C2795) * C31559) *
               C10305) *
              C32491 * C32477 * C111 +
          ((C2811 * C31559 + C2812 * C32754 + C2813 * C31540 + C2814 * C32440) *
               C10305 +
           (C4343 * C31559 + C4344 * C32754 + (C3334 + C3333) * C31540 +
            (C3332 + C3331) * C32440) *
               C10306 +
           ((C4676 + C4675) * C31559 + (C4674 + C4673) * C32754 +
            (C2756 * C356 + C32773 * C374 + C2757 * C2280 + C32577 * C2281) *
                C31540 +
            (C2756 * C375 + C32773 * C386 + C2757 * C2282 + C32577 * C2283) *
                C32440) *
               C32807) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C31559 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C32754 +
            (C2795 + C2796) * C31540 + (C2797 + C2798) * C32440) *
               C10305 +
           ((C4669 + C4670) * C31559 + (C4671 + C4672) * C32754 +
            C5097 * C31540 + C5098 * C32440) *
               C10306 +
           ((C4684 + C4683) * C31559 + (C4682 + C4681) * C32754 +
            (C4680 + C4679) * C31540 + (C4678 + C4677) * C32440) *
               C32807) *
              C32491 * C239 -
          (((C2757 * C1162 + C32577 * C1173 + C2756 * C1161 + C32773 * C1172) *
                C32440 +
            (C2757 * C1146 + C32577 * C1160 + C2756 * C1145 + C32773 * C1159) *
                C31540 +
            (C2757 * C1158 + C32577 * C1171 + C2756 * C1157 + C32773 * C1170) *
                C32754 +
            (C2757 * C1144 + C32577 * C1156 + C2756 * C1143 + C32773 * C1155) *
                C31559) *
               C32807 +
           ((C4899 + C4900) * C32440 + (C4901 + C4902) * C31540 +
            (C5308 + C5307) * C32754 + (C5306 + C5305) * C31559) *
               C10306 +
           ((C3173 + C3174) * C32440 + (C3175 + C3176) * C31540 +
            (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                C32754 +
            (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                C31559) *
               C10305) *
              C32491 * C240 +
          (((C2756 * C248 + C32773 * C263 + C2757 * C1008 + C32577 * C1017) *
                C31559 +
            (C2756 * C264 + C32773 * C278 + C2757 * C1016 + C32577 * C1026) *
                C32754 +
            (C2756 * C249 + C32773 * C265 + C2757 * C1007 + C32577 * C1015) *
                C31540 +
            (C2756 * C266 + C32773 * C279 + C2757 * C1014 + C32577 * C1025) *
                C32440) *
               C10305 +
           ((C2756 * C1142 + C32773 * C1154 + C2757 * C1694 + C32577 * C1697) *
                C31559 +
            (C2756 * C1153 + C32773 * C1169 + C2757 * C1698 + C32577 * C1703) *
                C32754 +
            (C2756 * C1141 + C32773 * C1152 + C2757 * C1695 + C32577 * C1699) *
                C31540 +
            (C2756 * C1151 + C32773 * C1168 + C2757 * C1700 + C32577 * C1704) *
                C32440) *
               C10306 +
           ((C2756 * C1144 + C32773 * C1156 + C2757 * C6425 + C32577 * C6429) *
                C31559 +
            (C2756 * C1158 + C32773 * C1171 + C2757 * C6431 + C32577 * C6434) *
                C32754 +
            (C2756 * C1146 + C32773 * C1160 + C2757 * C7243 + C32577 * C7244) *
                C31540 +
            (C2756 * C1162 + C32773 * C1173 + C2757 * C7245 + C32577 * C7246) *
                C32440) *
               C32807) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C31559 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C32754 +
            (C2795 + C2796) * C31540 + (C2797 + C2798) * C32440) *
               C10305 +
           ((C4669 + C4670) * C31559 + (C4671 + C4672) * C32754 +
            C5097 * C31540 + C5098 * C32440) *
               C10306 +
           C12885 * C32807) *
              C345 -
          (((C12875 + C12876) * C32440 + (C12877 + C12878) * C31540 +
            (C12879 + C12880) * C32754 + (C12881 + C12882) * C31559) *
               C32807 +
           ((C4677 + C4678) * C32440 + (C4679 + C4680) * C31540 +
            (C4681 + C4682) * C32754 + (C4683 + C4684) * C31559) *
               C10306 +
           (C5101 * C32440 + C5102 * C31540 + (C4672 + C4671) * C32754 +
            (C4670 + C4669) * C31559) *
               C10305) *
              C346 +
          (C12885 * C10305 +
           ((C12882 + C12881) * C31559 + (C12880 + C12879) * C32754 +
            (C12878 + C12877) * C31540 + (C12876 + C12875) * C32440) *
               C10306 +
           ((C2756 * C2060 + C32773 * C2069 + C2757 * C7025 + C32577 * C7029) *
                C31559 +
            (C2756 * C2070 + C32773 * C2078 + C2757 * C7031 + C32577 * C7034) *
                C32754 +
            (C2756 * C2061 + C32773 * C2071 + C2757 * C12202 +
             C32577 * C12203) *
                C31540 +
            (C2756 * C2072 + C32773 * C2079 + C2757 * C12204 +
             C32577 * C12205) *
                C32440) *
               C32807) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
             C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
                C31559 +
            (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
             C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
                C32754 +
            (C7744 + C7745 + C7746 + C7747) * C31540 +
            (C7748 + C7749 + C7750 + C7751) * C32440) *
               C32532 * C584 -
           ((C8256 + C8257 + C8258 + C8259) * C32440 +
            (C8260 + C8261 + C8262 + C8263) * C31540 +
            (C7708 * C1698 + C32814 * C1703 + C7707 * C1153 + C7701 * C1169 +
             C7706 * C702 + C7700 * C711 + C7705 * C366 + C7699 * C382) *
                C32754 +
            (C7708 * C1694 + C32814 * C1697 + C7707 * C1142 + C7701 * C1154 +
             C7706 * C696 + C7700 * C701 + C7705 * C352 + C7699 * C367) *
                C31559) *
               C32532 * C585) *
              C32477 * C472 +
          (((C8263 + C8262 + C8261 + C8260) * C31559 +
            (C8259 + C8258 + C8257 + C8256) * C32754 +
            (C7705 * C350 + C7699 * C363 + C7706 * C698 + C7700 * C705 +
             C7707 * C1140 + C7701 * C1150 + C7708 * C1696 + C32814 * C1701) *
                C31540 +
            (C7705 * C362 + C7699 * C380 + C7706 * C706 + C7700 * C713 +
             C7707 * C1149 + C7701 * C1167 + C7708 * C1702 + C32814 * C1705) *
                C32440) *
               C32532 * C585 -
           ((C7752 + C7753 + C7754 + C7755) * C32440 +
            (C7756 + C7757 + C7758 + C7759) * C31540 +
            (C7751 + C7750 + C7749 + C7748) * C32754 +
            (C7747 + C7746 + C7745 + C7744) * C31559) *
               C32532 * C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C2758 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C2752 +
            (C2795 + C2796) * C2759 + (C2797 + C2798) * C2753 + C2811 * C2760 +
            C2812 * C2754 + C2813 * C2761 + C2814 * C32808) *
               C32532 * C584 -
           ((C3331 + C3332) * C32808 + (C3333 + C3334) * C2761 +
            (C3335 + C3336) * C2754 + (C3337 + C3338) * C2760 +
            (C3339 + C3340) * C2753 + (C3341 + C3342) * C2759 +
            (C2757 * C702 + C32577 * C711 + C2756 * C366 + C32773 * C382) *
                C2752 +
            (C2757 * C696 + C32577 * C701 + C2756 * C352 + C32773 * C367) *
                C2758) *
               C32532 * C585) *
              C32477 * C472 +
          (((C3342 + C3341) * C2758 + (C3340 + C3339) * C2752 +
            (C3338 + C3337) * C2759 + (C3336 + C3335) * C2753 +
            (C3334 + C3333) * C2760 + (C3332 + C3331) * C2754 +
            (C2756 * C348 + C32773 * C359 + C2757 * C700 + C32577 * C709) *
                C2761 +
            (C2756 * C358 + C32773 * C378 + C2757 * C710 + C32577 * C715) *
                C32808) *
               C32532 * C585 -
           ((C2807 + C2808) * C32808 + (C2809 + C2810) * C2761 +
            (C2806 + C2805) * C2754 + (C2804 + C2803) * C2760 +
            (C2802 + C2801) * C2753 + (C2800 + C2799) * C2759 +
            (C2798 + C2797) * C2752 + (C2796 + C2795) * C2758) *
               C32532 * C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                 C31559 +
             (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                 C32754 +
             (C2795 + C2796) * C31540 + (C2797 + C2798) * C32440) *
                C10305 +
            ((C4669 + C4670) * C31559 + (C4671 + C4672) * C32754 +
             C5097 * C31540 + C5098 * C32440) *
                C10306 +
            C12885 * C32807) *
               C584 -
           (((C12875 + C12876) * C32440 + (C12877 + C12878) * C31540 +
             (C12879 + C12880) * C32754 + (C12881 + C12882) * C31559) *
                C32807 +
            (C13286 * C32440 + C13287 * C31540 + (C4681 + C4682) * C32754 +
             (C4683 + C4684) * C31559) *
                C10306 +
            (C5101 * C32440 + C5102 * C31540 + (C4672 + C4671) * C32754 +
             (C4670 + C4669) * C31559) *
                C10305) *
               C585) *
              C32477 * C472 +
          (((C5097 * C31559 + C5098 * C32754 + C4343 * C31540 +
             C4344 * C32440) *
                C10305 +
            (C12853 * C31559 + C12854 * C32754 + (C4676 + C4675) * C31540 +
             (C4674 + C4673) * C32440) *
                C10306 +
            ((C12878 + C12877) * C31559 + (C12876 + C12875) * C32754 +
             (C2756 * C2057 + C32773 * C2064 + C2757 * C2618 + C32577 * C2623) *
                 C31540 +
             (C2756 * C2063 + C32773 * C2075 + C2757 * C2624 + C32577 * C2627) *
                 C32440) *
                C32807) *
               C585 -
           (((C4673 + C4674) * C32440 + (C4675 + C4676) * C31540 +
             C13286 * C32754 + C13287 * C31559) *
                C32807 +
            (C5099 * C32440 + C5100 * C31540 + C5101 * C32754 +
             C5102 * C31559) *
                C10306 +
            ((C2802 + C2801) * C32440 + (C2800 + C2799) * C31540 +
             (C2798 + C2797) * C32754 + (C2796 + C2795) * C31559) *
                C10305) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
               C2758 +
           (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
               C2752 +
           (C2795 + C2796) * C2759 + (C2797 + C2798) * C2753 + C2811 * C2760 +
           C2812 * C2754 + C2813 * C2761 + C2814 * C32808) *
              C32532 * C32491 * C239 -
          ((C2757 * C270 + C32577 * C281 + C2756 * C255 + C32773 * C274) *
               C32808 +
           (C2757 * C251 + C32577 * C269 + C2756 * C244 + C32773 * C256) *
               C2761 +
           (C2757 * C268 + C32577 * C280 + C2756 * C257 + C32773 * C275) *
               C2754 +
           (C2757 * C250 + C32577 * C267 + C2756 * C245 + C32773 * C258) *
               C2760 +
           (C2757 * C266 + C32577 * C279 + C2756 * C259 + C32773 * C276) *
               C2753 +
           (C2757 * C249 + C32577 * C265 + C2756 * C246 + C32773 * C260) *
               C2759 +
           (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
               C2752 +
           (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
               C2758) *
              C32532 * C32491 * C240 +
          ((C2756 * C248 + C32773 * C263 + C2757 * C1008 + C32577 * C1017) *
               C2758 +
           (C2756 * C264 + C32773 * C278 + C2757 * C1016 + C32577 * C1026) *
               C2752 +
           (C2756 * C249 + C32773 * C265 + C2757 * C1007 + C32577 * C1015) *
               C2759 +
           (C2756 * C266 + C32773 * C279 + C2757 * C1014 + C32577 * C1025) *
               C2753 +
           (C2756 * C250 + C32773 * C267 + C2757 * C1006 + C32577 * C1013) *
               C2760 +
           (C2756 * C268 + C32773 * C280 + C2757 * C1012 + C32577 * C1024) *
               C2754 +
           (C2756 * C251 + C32773 * C269 + C2757 * C1322 + C32577 * C1323) *
               C2761 +
           (C2756 * C270 + C32773 * C281 + C2757 * C1324 + C32577 * C1325) *
               C32808) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
               C2758 +
           (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
               C2752 +
           (C2795 + C2796) * C2759 + (C2797 + C2798) * C2753 + C2811 * C2760 +
           C2812 * C2754 + C2813 * C2761 + C2814 * C32808) *
              C32532 * C32491 * C32477 * C110 -
          ((C2807 + C2808) * C32808 + (C2809 + C2810) * C2761 +
           (C2806 + C2805) * C2754 + (C2804 + C2803) * C2760 +
           (C2802 + C2801) * C2753 + (C2800 + C2799) * C2759 +
           (C2798 + C2797) * C2752 + (C2796 + C2795) * C2758) *
              C32532 * C32491 * C32477 * C111 +
          (C2811 * C2758 + C2812 * C2752 + C2813 * C2759 + C2814 * C2753 +
           (C2810 + C2809) * C2760 + (C2808 + C2807) * C2754 +
           (C2756 * C124 + C32773 * C137 + C2757 * C474 + C32577 * C475) *
               C2761 +
           (C2756 * C136 + C32773 * C145 + C2757 * C476 + C32577 * C477) *
               C32808) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
            C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
               C31559 +
           (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
            C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
               C32754 +
           (C7744 + C7745 + C7746 + C7747) * C31540 +
           (C7748 + C7749 + C7750 + C7751) * C32440) *
              C32532 * C32491 * C32477 * C110 -
          ((C7752 + C7753 + C7754 + C7755) * C32440 +
           (C7756 + C7757 + C7758 + C7759) * C31540 +
           (C7751 + C7750 + C7749 + C7748) * C32754 +
           (C7747 + C7746 + C7745 + C7744) * C31559) *
              C32532 * C32491 * C32477 * C111 +
          ((C7759 + C7758 + C7757 + C7756) * C31559 +
           (C7755 + C7754 + C7753 + C7752) * C32754 +
           (C7705 * C122 + C7699 * C132 + C7706 * C244 + C7700 * C256 +
            C7707 * C251 + C7701 * C269 + C7708 * C1322 + C32814 * C1323) *
               C31540 +
           (C7705 * C133 + C7699 * C143 + C7706 * C255 + C7700 * C274 +
            C7707 * C270 + C7701 * C281 + C7708 * C1324 + C32814 * C1325) *
               C32440) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
            C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
               C31559 +
           (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
            C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
               C32754 +
           (C7744 + C7745 + C7746 + C7747) * C31540 +
           (C7748 + C7749 + C7750 + C7751) * C32440) *
              C32532 * C32491 * C239 -
          ((C7708 * C1021 + C32814 * C1028 + C7707 * C1014 + C7701 * C1025 +
            C7706 * C266 + C7700 * C279 + C7705 * C259 + C7699 * C276) *
               C32440 +
           (C7708 * C1010 + C32814 * C1020 + C7707 * C1007 + C7701 * C1015 +
            C7706 * C249 + C7700 * C265 + C7705 * C246 + C7699 * C260) *
               C31540 +
           (C7708 * C1019 + C32814 * C1027 + C7707 * C1016 + C7701 * C1026 +
            C7706 * C264 + C7700 * C278 + C7705 * C261 + C7699 * C277) *
               C32754 +
           (C7708 * C1009 + C32814 * C1018 + C7707 * C1008 + C7701 * C1017 +
            C7706 * C248 + C7700 * C263 + C7705 * C247 + C7699 * C262) *
               C31559) *
              C32532 * C32491 * C240 +
          ((C7705 * C248 + C7699 * C263 + C7706 * C1008 + C7700 * C1017 +
            C7707 * C1009 + C7701 * C1018 + C7708 * C6354 + C32814 * C6357) *
               C31559 +
           (C7705 * C264 + C7699 * C278 + C7706 * C1016 + C7700 * C1026 +
            C7707 * C1019 + C7701 * C1027 + C7708 * C6356 + C32814 * C6360) *
               C32754 +
           (C7705 * C249 + C7699 * C265 + C7706 * C1007 + C7700 * C1015 +
            C7707 * C1010 + C7701 * C1020 + C7708 * C6518 + C32814 * C6519) *
               C31540 +
           (C7705 * C266 + C7699 * C279 + C7706 * C1014 + C7700 * C1025 +
            C7707 * C1021 + C7701 * C1028 + C7708 * C6520 + C32814 * C6521) *
               C32440) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C31559 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C32754 +
            (C2795 + C2796) * C31540 + (C2797 + C2798) * C32440) *
               C10305 +
           ((C4669 + C4670) * C31559 + (C4671 + C4672) * C32754 +
            C5097 * C31540 + C5098 * C32440) *
               C10306 +
           ((C4684 + C4683) * C31559 + (C4682 + C4681) * C32754 +
            (C4680 + C4679) * C31540 + (C4678 + C4677) * C32440) *
               C32807) *
              C32491 * C32477 * C110 -
          (((C4673 + C4674) * C32440 + (C4675 + C4676) * C31540 +
            (C4677 + C4678) * C32754 + (C4679 + C4680) * C31559) *
               C32807 +
           (C5099 * C32440 + C5100 * C31540 + C5101 * C32754 + C5102 * C31559) *
               C10306 +
           ((C2802 + C2801) * C32440 + (C2800 + C2799) * C31540 +
            (C2798 + C2797) * C32754 + (C2796 + C2795) * C31559) *
               C10305) *
              C32491 * C32477 * C111 +
          ((C2811 * C31559 + C2812 * C32754 + C2813 * C31540 + C2814 * C32440) *
               C10305 +
           (C4343 * C31559 + C4344 * C32754 + (C3334 + C3333) * C31540 +
            (C3332 + C3331) * C32440) *
               C10306 +
           ((C4676 + C4675) * C31559 + (C4674 + C4673) * C32754 +
            (C2756 * C356 + C32773 * C374 + C2757 * C2280 + C32577 * C2281) *
                C31540 +
            (C2756 * C375 + C32773 * C386 + C2757 * C2282 + C32577 * C2283) *
                C32440) *
               C32807) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C31559 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C32754 +
            (C2795 + C2796) * C31540 + (C2797 + C2798) * C32440) *
               C10305 +
           ((C4669 + C4670) * C31559 + (C4671 + C4672) * C32754 +
            C5097 * C31540 + C5098 * C32440) *
               C10306 +
           ((C4684 + C4683) * C31559 + (C4682 + C4681) * C32754 +
            (C4680 + C4679) * C31540 + (C4678 + C4677) * C32440) *
               C32807) *
              C32491 * C239 -
          (((C2757 * C1162 + C32577 * C1173 + C2756 * C1161 + C32773 * C1172) *
                C32440 +
            (C2757 * C1146 + C32577 * C1160 + C2756 * C1145 + C32773 * C1159) *
                C31540 +
            (C2757 * C1158 + C32577 * C1171 + C2756 * C1157 + C32773 * C1170) *
                C32754 +
            (C2757 * C1144 + C32577 * C1156 + C2756 * C1143 + C32773 * C1155) *
                C31559) *
               C32807 +
           ((C4899 + C4900) * C32440 + (C4901 + C4902) * C31540 +
            (C5308 + C5307) * C32754 + (C5306 + C5305) * C31559) *
               C10306 +
           ((C3173 + C3174) * C32440 + (C3175 + C3176) * C31540 +
            (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                C32754 +
            (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                C31559) *
               C10305) *
              C32491 * C240 +
          (((C2756 * C248 + C32773 * C263 + C2757 * C1008 + C32577 * C1017) *
                C31559 +
            (C2756 * C264 + C32773 * C278 + C2757 * C1016 + C32577 * C1026) *
                C32754 +
            (C2756 * C249 + C32773 * C265 + C2757 * C1007 + C32577 * C1015) *
                C31540 +
            (C2756 * C266 + C32773 * C279 + C2757 * C1014 + C32577 * C1025) *
                C32440) *
               C10305 +
           ((C2756 * C1142 + C32773 * C1154 + C2757 * C1694 + C32577 * C1697) *
                C31559 +
            (C2756 * C1153 + C32773 * C1169 + C2757 * C1698 + C32577 * C1703) *
                C32754 +
            (C2756 * C1141 + C32773 * C1152 + C2757 * C1695 + C32577 * C1699) *
                C31540 +
            (C2756 * C1151 + C32773 * C1168 + C2757 * C1700 + C32577 * C1704) *
                C32440) *
               C10306 +
           ((C2756 * C1144 + C32773 * C1156 + C2757 * C6425 + C32577 * C6429) *
                C31559 +
            (C2756 * C1158 + C32773 * C1171 + C2757 * C6431 + C32577 * C6434) *
                C32754 +
            (C2756 * C1146 + C32773 * C1160 + C2757 * C7243 + C32577 * C7244) *
                C31540 +
            (C2756 * C1162 + C32773 * C1173 + C2757 * C7245 + C32577 * C7246) *
                C32440) *
               C32807) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
              C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
                 C6291 +
             (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
              C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
                 C32430) *
                C32774 +
            ((C9766 + C9767 + C9768 + C9769) * C6291 +
             (C9770 + C9771 + C9772 + C9773) * C32430) *
                C32619) *
               C32491 * C470 -
           (((C7708 * C6427 + C32814 * C6433 + C7707 * C1698 + C7701 * C1703 +
              C7706 * C1153 + C7700 * C1169 + C7705 * C702 + C7699 * C711) *
                 C32430 +
             (C7708 * C6424 + C32814 * C6428 + C7707 * C1694 + C7701 * C1697 +
              C7706 * C1142 + C7700 * C1154 + C7705 * C696 + C7699 * C701) *
                 C6291) *
                C32619 +
            ((C7708 * C1019 + C32814 * C1027 + C7707 * C1016 + C7701 * C1026 +
              C7706 * C264 + C7700 * C278 + C7705 * C261 + C7699 * C277) *
                 C32430 +
             (C7708 * C1009 + C32814 * C1018 + C7707 * C1008 + C7701 * C1017 +
              C7706 * C248 + C7700 * C263 + C7705 * C247 + C7699 * C262) *
                 C6291) *
                C32774) *
               C32491 * C471) *
              C472 +
          ((((C8109 + C8108 + C8107 + C8106) * C6291 +
             (C8105 + C8104 + C8103 + C8102) * C32430) *
                C32774 +
            ((C7705 * C697 + C7699 * C703 + C7706 * C1141 + C7700 * C1152 +
              C7707 * C1695 + C7701 * C1699 + C7708 * C6604 + C32814 * C6605) *
                 C6291 +
             (C7705 * C704 + C7699 * C712 + C7706 * C1151 + C7700 * C1168 +
              C7707 * C1700 + C7701 * C1704 + C7708 * C6606 + C32814 * C6607) *
                 C32430) *
                C32619) *
               C32491 * C471 -
           (((C8256 + C8257 + C8258 + C8259) * C32430 +
             (C8260 + C8261 + C8262 + C8263) * C6291) *
                C32619 +
            ((C7751 + C7750 + C7749 + C7748) * C32430 +
             (C7747 + C7746 + C7745 + C7744) * C6291) *
                C32774) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                 C835 +
             (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                 C829 +
             (C2795 + C2796) * C836 + (C2797 + C2798) * C830 + C2811 * C837 +
             C2812 * C32793) *
                C32774 +
            ((C4669 + C4670) * C835 + (C4671 + C4672) * C829 +
             (C3342 + C3341) * C836 + (C3340 + C3339) * C830 + C4343 * C837 +
             C4344 * C32793) *
                C32619) *
               C32491 * C470 -
           (((C4895 + C4896) * C32793 + (C4897 + C4898) * C837 +
             (C4899 + C4900) * C830 + (C4901 + C4902) * C836 +
             (C2757 * C1153 + C32577 * C1169 + C2756 * C702 + C32773 * C711) *
                 C829 +
             (C2757 * C1142 + C32577 * C1154 + C2756 * C696 + C32773 * C701) *
                 C835) *
                C32619 +
            ((C3169 + C3170) * C32793 + (C3171 + C3172) * C837 +
             (C3173 + C3174) * C830 + (C3175 + C3176) * C836 +
             (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                 C829 +
             (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                 C835) *
                C32774) *
               C32491 * C471) *
              C472 +
          ((((C3176 + C3175) * C835 + (C3174 + C3173) * C829 +
             (C3172 + C3171) * C836 + (C3170 + C3169) * C830 +
             (C3168 + C3167) * C837 + (C3166 + C3165) * C32793) *
                C32774 +
            ((C4902 + C4901) * C835 + (C4900 + C4899) * C829 +
             (C4898 + C4897) * C836 + (C4896 + C4895) * C830 +
             (C2756 * C699 + C32773 * C707 + C2757 * C1508 + C32577 * C1509) *
                 C837 +
             (C2756 * C708 + C32773 * C714 + C2757 * C1510 + C32577 * C1511) *
                 C32793) *
                C32619) *
               C32491 * C471 -
           (((C3331 + C3332) * C32793 + (C3333 + C3334) * C837 +
             (C3335 + C3336) * C830 + (C3337 + C3338) * C836 +
             (C3339 + C3340) * C829 + (C3341 + C3342) * C835) *
                C32619 +
            ((C2806 + C2805) * C32793 + (C2804 + C2803) * C837 +
             (C2802 + C2801) * C830 + (C2800 + C2799) * C836 +
             (C2798 + C2797) * C829 + (C2796 + C2795) * C835) *
                C32774) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                 C6291 +
             (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                 C32430) *
                C13591 +
            ((C4669 + C4670) * C6291 + (C4671 + C4672) * C32430) * C13592 +
            C14540 * C13593 + C14547 * C32820) *
               C32491 * C470 -
           (((C2757 * C7027 + C32577 * C7033 + C2756 * C2620 + C32773 * C2625) *
                 C32430 +
             (C2757 * C7024 + C32577 * C7028 + C2756 * C2616 + C32773 * C2619) *
                 C6291) *
                C32820 +
            ((C13493 + C13492) * C32430 + (C13491 + C13490) * C6291) * C13593 +
            ((C5308 + C5307) * C32430 + (C5306 + C5305) * C6291) * C13592 +
            ((C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                 C32430 +
             (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                 C6291) *
                C13591) *
               C32491 * C471) *
              C472 +
          ((((C3176 + C3175) * C6291 + (C3174 + C3173) * C32430) * C13591 +
            ((C4902 + C4901) * C6291 + (C4900 + C4899) * C32430) * C13592 +
            ((C13091 + C13090) * C6291 + (C13089 + C13088) * C32430) * C13593 +
            ((C2756 * C2617 + C32773 * C2621 + C2757 * C7393 + C32577 * C7394) *
                 C6291 +
             (C2756 * C2622 + C32773 * C2626 + C2757 * C7395 + C32577 * C7396) *
                 C32430) *
                C32820) *
               C32491 * C471 -
           (((C12875 + C12876) * C32430 + (C12877 + C12878) * C6291) * C32820 +
            (C13286 * C32430 + C13287 * C6291) * C13593 +
            (C5101 * C32430 + C5102 * C6291) * C13592 +
            ((C2798 + C2797) * C32430 + (C2796 + C2795) * C6291) * C13591) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
              C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
                 C6291 +
             (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
              C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
                 C32430) *
                C32774 +
            ((C9766 + C9767 + C9768 + C9769) * C6291 +
             (C9770 + C9771 + C9772 + C9773) * C32430) *
                C32619) *
               C584 -
           (((C9774 + C9775 + C9776 + C9777) * C32430 +
             (C9778 + C9779 + C9780 + C9781) * C6291) *
                C32619 +
            ((C9773 + C9772 + C9771 + C9770) * C32430 +
             (C9769 + C9768 + C9767 + C9766) * C6291) *
                C32774) *
               C585) *
              C470 +
          ((((C10188 + C10189 + C10190 + C10191) * C6291 +
             (C10192 + C10193 + C10194 + C10195) * C32430) *
                C32774 +
            ((C7705 * C1143 + C7699 * C1155 + C7706 * C1144 + C7700 * C1156 +
              C7707 * C6425 + C7701 * C6429 + C7708 * C6426 + C32814 * C6430) *
                 C6291 +
             (C7705 * C1157 + C7699 * C1170 + C7706 * C1158 + C7700 * C1171 +
              C7707 * C6431 + C7701 * C6434 + C7708 * C6432 + C32814 * C6435) *
                 C32430) *
                C32619) *
               C585 -
           (((C10195 + C10194 + C10193 + C10192) * C32430 +
             (C10191 + C10190 + C10189 + C10188) * C6291) *
                C32619 +
            ((C7708 * C1019 + C32814 * C1027 + C7707 * C1016 + C7701 * C1026 +
              C7706 * C264 + C7700 * C278 + C7705 * C261 + C7699 * C277) *
                 C32430 +
             (C7708 * C1009 + C32814 * C1018 + C7707 * C1008 + C7701 * C1017 +
              C7706 * C248 + C7700 * C263 + C7705 * C247 + C7699 * C262) *
                 C6291) *
                C32774) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                 C835 +
             (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                 C829 +
             (C2795 + C2796) * C836 + (C2797 + C2798) * C830 + C2811 * C837 +
             C2812 * C32793) *
                C32774 +
            ((C4669 + C4670) * C835 + (C4671 + C4672) * C829 + C5097 * C836 +
             C5098 * C830 + C4343 * C837 + C4344 * C32793) *
                C32619) *
               C584 -
           (((C4673 + C4674) * C32793 + (C4675 + C4676) * C837 +
             (C4677 + C4678) * C830 + (C4679 + C4680) * C836 +
             (C4681 + C4682) * C829 + (C4683 + C4684) * C835) *
                C32619 +
            (C5099 * C32793 + C5100 * C837 + C5101 * C830 + C5102 * C836 +
             (C4672 + C4671) * C829 + (C4670 + C4669) * C835) *
                C32774) *
               C585) *
              C470 +
          ((((C5305 + C5306) * C835 + (C5307 + C5308) * C829 +
             (C4902 + C4901) * C836 + (C4900 + C4899) * C830 +
             (C4898 + C4897) * C837 + (C4896 + C4895) * C32793) *
                C32774 +
            ((C2756 * C1143 + C32773 * C1155 + C2757 * C1144 + C32577 * C1156) *
                 C835 +
             (C2756 * C1157 + C32773 * C1170 + C2757 * C1158 + C32577 * C1171) *
                 C829 +
             (C2756 * C1145 + C32773 * C1159 + C2757 * C1146 + C32577 * C1160) *
                 C836 +
             (C2756 * C1161 + C32773 * C1172 + C2757 * C1162 + C32577 * C1173) *
                 C830 +
             (C2756 * C1147 + C32773 * C1163 + C2757 * C1148 + C32577 * C1164) *
                 C837 +
             (C2756 * C1165 + C32773 * C1174 + C2757 * C1166 + C32577 * C1175) *
                 C32793) *
                C32619) *
               C585 -
           (((C4895 + C4896) * C32793 + (C4897 + C4898) * C837 +
             (C4899 + C4900) * C830 + (C4901 + C4902) * C836 +
             (C5308 + C5307) * C829 + (C5306 + C5305) * C835) *
                C32619 +
            ((C3169 + C3170) * C32793 + (C3171 + C3172) * C837 +
             (C3173 + C3174) * C830 + (C3175 + C3176) * C836 +
             (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                 C829 +
             (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                 C835) *
                C32774) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                 C6291 +
             (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                 C32430) *
                C13591 +
            ((C4669 + C4670) * C6291 + (C4671 + C4672) * C32430) * C13592 +
            C14540 * C13593 + C14547 * C32820) *
               C584 -
           (((C14543 + C14544) * C32430 + (C14545 + C14546) * C6291) * C32820 +
            ((C12879 + C12880) * C32430 + (C12881 + C12882) * C6291) * C13593 +
            ((C4681 + C4682) * C32430 + (C4683 + C4684) * C6291) * C13592 +
            ((C4672 + C4671) * C32430 + (C4670 + C4669) * C6291) * C13591) *
               C585) *
              C470 +
          ((((C5305 + C5306) * C6291 + (C5307 + C5308) * C32430) * C13591 +
            ((C13490 + C13491) * C6291 + (C13492 + C13493) * C32430) * C13592 +
            ((C14946 + C14947) * C6291 + (C14948 + C14949) * C32430) * C13593 +
            ((C2756 * C7025 + C32773 * C7029 + C2757 * C7026 + C32577 * C7030) *
                 C6291 +
             (C2756 * C7031 + C32773 * C7034 + C2757 * C7032 + C32577 * C7035) *
                 C32430) *
                C32820) *
               C585 -
           (((C14949 + C14948) * C32430 + (C14947 + C14946) * C6291) * C32820 +
            ((C13493 + C13492) * C32430 + (C13491 + C13490) * C6291) * C13593 +
            ((C5308 + C5307) * C32430 + (C5306 + C5305) * C6291) * C13592 +
            ((C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                 C32430 +
             (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                 C6291) *
                C13591) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                    C835 +
                (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                    C829 +
                (C2795 + C2796) * C836 + (C2797 + C2798) * C830 + C2811 * C837 +
                C2812 * C32793) *
                   C32774 +
               ((C2756 * C352 + C32773 * C367 + C2757 * C696 + C32577 * C701) *
                    C835 +
                (C2756 * C366 + C32773 * C382 + C2757 * C702 + C32577 * C711) *
                    C829 +
                (C3342 + C3341) * C836 + (C3340 + C3339) * C830 + C4343 * C837 +
                C4344 * C32793) *
                   C32619) *
                  C32491 * C32477 * C110 -
              (((C3331 + C3332) * C32793 + (C3333 + C3334) * C837 +
                (C3335 + C3336) * C830 + (C3337 + C3338) * C836 +
                (C3339 + C3340) * C829 + (C3341 + C3342) * C835) *
                   C32619 +
               ((C2806 + C2805) * C32793 + (C2804 + C2803) * C837 +
                (C2802 + C2801) * C830 + (C2800 + C2799) * C836 +
                (C2798 + C2797) * C829 + (C2796 + C2795) * C835) *
                   C32774) *
                  C32491 * C32477 * C111 +
              ((C2811 * C835 + C2812 * C829 + C2813 * C836 + C2814 * C830 +
                (C2810 + C2809) * C837 + (C2808 + C2807) * C32793) *
                   C32774 +
               (C4343 * C835 + C4344 * C829 + (C3334 + C3333) * C836 +
                (C3332 + C3331) * C830 +
                (C2756 * C348 + C32773 * C359 + C2757 * C700 + C32577 * C709) *
                    C837 +
                (C2756 * C358 + C32773 * C378 + C2757 * C710 + C32577 * C715) *
                    C32793) *
                   C32619) *
                  C32491 * C32477 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                    C835 +
                (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                    C829 +
                (C2795 + C2796) * C836 + (C2797 + C2798) * C830 + C2811 * C837 +
                C2812 * C32793) *
                   C32774 +
               ((C2756 * C352 + C32773 * C367 + C2757 * C696 + C32577 * C701) *
                    C835 +
                (C2756 * C366 + C32773 * C382 + C2757 * C702 + C32577 * C711) *
                    C829 +
                (C3342 + C3341) * C836 + (C3340 + C3339) * C830 + C4343 * C837 +
                C4344 * C32793) *
                   C32619) *
                  C32491 * C239 -
              (((C2757 * C1149 + C32577 * C1167 + C2756 * C706 +
                 C32773 * C713) *
                    C32793 +
                (C2757 * C1140 + C32577 * C1150 + C2756 * C698 +
                 C32773 * C705) *
                    C837 +
                (C2757 * C1151 + C32577 * C1168 + C2756 * C704 +
                 C32773 * C712) *
                    C830 +
                (C2757 * C1141 + C32577 * C1152 + C2756 * C697 +
                 C32773 * C703) *
                    C836 +
                (C2757 * C1153 + C32577 * C1169 + C2756 * C702 +
                 C32773 * C711) *
                    C829 +
                (C2757 * C1142 + C32577 * C1154 + C2756 * C696 +
                 C32773 * C701) *
                    C835) *
                   C32619 +
               ((C3169 + C3170) * C32793 + (C3171 + C3172) * C837 +
                (C3173 + C3174) * C830 + (C3175 + C3176) * C836 +
                (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                    C829 +
                (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                    C835) *
                   C32774) *
                  C32491 * C240 +
              (((C2756 * C248 + C32773 * C263 + C2757 * C1008 +
                 C32577 * C1017) *
                    C835 +
                (C2756 * C264 + C32773 * C278 + C2757 * C1016 +
                 C32577 * C1026) *
                    C829 +
                (C2756 * C249 + C32773 * C265 + C2757 * C1007 +
                 C32577 * C1015) *
                    C836 +
                (C2756 * C266 + C32773 * C279 + C2757 * C1014 +
                 C32577 * C1025) *
                    C830 +
                (C2756 * C250 + C32773 * C267 + C2757 * C1006 +
                 C32577 * C1013) *
                    C837 +
                (C2756 * C268 + C32773 * C280 + C2757 * C1012 +
                 C32577 * C1024) *
                    C32793) *
                   C32774 +
               ((C2756 * C1142 + C32773 * C1154 + C2757 * C1694 +
                 C32577 * C1697) *
                    C835 +
                (C2756 * C1153 + C32773 * C1169 + C2757 * C1698 +
                 C32577 * C1703) *
                    C829 +
                (C2756 * C1141 + C32773 * C1152 + C2757 * C1695 +
                 C32577 * C1699) *
                    C836 +
                (C2756 * C1151 + C32773 * C1168 + C2757 * C1700 +
                 C32577 * C1704) *
                    C830 +
                (C2756 * C1140 + C32773 * C1150 + C2757 * C1696 +
                 C32577 * C1701) *
                    C837 +
                (C2756 * C1149 + C32773 * C1167 + C2757 * C1702 +
                 C32577 * C1705) *
                    C32793) *
                   C32619) *
                  C32491 * C241) *
             C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C835 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C829 +
            (C2795 + C2796) * C836 + (C2797 + C2798) * C830 + C2811 * C837 +
            C2812 * C32793) *
               C32774 +
           ((C4669 + C4670) * C835 + (C4671 + C4672) * C829 +
            (C3342 + C3341) * C836 + (C3340 + C3339) * C830 + C4343 * C837 +
            C4344 * C32793) *
               C32619) *
              C345 -
          (((C4673 + C4674) * C32793 + (C4675 + C4676) * C837 +
            (C4677 + C4678) * C830 + (C4679 + C4680) * C836 +
            (C4681 + C4682) * C829 + (C4683 + C4684) * C835) *
               C32619 +
           ((C3335 + C3336) * C32793 + (C3337 + C3338) * C837 +
            (C3339 + C3340) * C830 + (C3341 + C3342) * C836 +
            (C4672 + C4671) * C829 + (C4670 + C4669) * C835) *
               C32774) *
              C346 +
          (((C4684 + C4683) * C835 + (C4682 + C4681) * C829 +
            (C4680 + C4679) * C836 + (C4678 + C4677) * C830 +
            (C4676 + C4675) * C837 + (C4674 + C4673) * C32793) *
               C32774 +
           ((C2756 * C2059 + C32773 * C2068 + C2757 * C2616 + C32577 * C2619) *
                C835 +
            (C2756 * C2067 + C32773 * C2077 + C2757 * C2620 + C32577 * C2625) *
                C829 +
            (C2756 * C2058 + C32773 * C2066 + C2757 * C2617 + C32577 * C2621) *
                C836 +
            (C2756 * C2065 + C32773 * C2076 + C2757 * C2622 + C32577 * C2626) *
                C830 +
            (C2756 * C2057 + C32773 * C2064 + C2757 * C2618 + C32577 * C2623) *
                C837 +
            (C2756 * C2063 + C32773 * C2075 + C2757 * C2624 + C32577 * C2627) *
                C32793) *
               C32619) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
             C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
                C6291 +
            (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
             C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
                C32430) *
               C32774 +
           ((C7705 * C352 + C7699 * C367 + C7706 * C696 + C7700 * C701 +
             C7707 * C1142 + C7701 * C1154 + C7708 * C1694 + C32814 * C1697) *
                C6291 +
            (C7705 * C366 + C7699 * C382 + C7706 * C702 + C7700 * C711 +
             C7707 * C1153 + C7701 * C1169 + C7708 * C1698 + C32814 * C1703) *
                C32430) *
               C32619) *
              C32491 * C32477 * C110 -
          (((C8256 + C8257 + C8258 + C8259) * C32430 +
            (C8260 + C8261 + C8262 + C8263) * C6291) *
               C32619 +
           ((C7751 + C7750 + C7749 + C7748) * C32430 +
            (C7747 + C7746 + C7745 + C7744) * C6291) *
               C32774) *
              C32491 * C32477 * C111 +
          (((C7759 + C7758 + C7757 + C7756) * C6291 +
            (C7755 + C7754 + C7753 + C7752) * C32430) *
               C32774 +
           ((C7705 * C350 + C7699 * C363 + C7706 * C698 + C7700 * C705 +
             C7707 * C1140 + C7701 * C1150 + C7708 * C1696 + C32814 * C1701) *
                C6291 +
            (C7705 * C362 + C7699 * C380 + C7706 * C706 + C7700 * C713 +
             C7707 * C1149 + C7701 * C1167 + C7708 * C1702 + C32814 * C1705) *
                C32430) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
             C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
                C6291 +
            (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
             C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
                C32430) *
               C32774 +
           ((C7705 * C352 + C7699 * C367 + C7706 * C696 + C7700 * C701 +
             C7707 * C1142 + C7701 * C1154 + C7708 * C1694 + C32814 * C1697) *
                C6291 +
            (C7705 * C366 + C7699 * C382 + C7706 * C702 + C7700 * C711 +
             C7707 * C1153 + C7701 * C1169 + C7708 * C1698 + C32814 * C1703) *
                C32430) *
               C32619) *
              C32491 * C239 -
          (((C7708 * C6427 + C32814 * C6433 + C7707 * C1698 + C7701 * C1703 +
             C7706 * C1153 + C7700 * C1169 + C7705 * C702 + C7699 * C711) *
                C32430 +
            (C7708 * C6424 + C32814 * C6428 + C7707 * C1694 + C7701 * C1697 +
             C7706 * C1142 + C7700 * C1154 + C7705 * C696 + C7699 * C701) *
                C6291) *
               C32619 +
           ((C7708 * C1019 + C32814 * C1027 + C7707 * C1016 + C7701 * C1026 +
             C7706 * C264 + C7700 * C278 + C7705 * C261 + C7699 * C277) *
                C32430 +
            (C7708 * C1009 + C32814 * C1018 + C7707 * C1008 + C7701 * C1017 +
             C7706 * C248 + C7700 * C263 + C7705 * C247 + C7699 * C262) *
                C6291) *
               C32774) *
              C32491 * C240 +
          (((C7705 * C248 + C7699 * C263 + C7706 * C1008 + C7700 * C1017 +
             C7707 * C1009 + C7701 * C1018 + C7708 * C6354 + C32814 * C6357) *
                C6291 +
            (C7705 * C264 + C7699 * C278 + C7706 * C1016 + C7700 * C1026 +
             C7707 * C1019 + C7701 * C1027 + C7708 * C6356 + C32814 * C6360) *
                C32430) *
               C32774 +
           ((C7705 * C1142 + C7699 * C1154 + C7706 * C1694 + C7700 * C1697 +
             C7707 * C6424 + C7701 * C6428 + C7708 * C6690 + C32814 * C6691) *
                C6291 +
            (C7705 * C1153 + C7699 * C1169 + C7706 * C1698 + C7700 * C1703 +
             C7707 * C6427 + C7701 * C6433 + C7708 * C6692 + C32814 * C6693) *
                C32430) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
             C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
                C6291 +
            (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
             C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
                C32430) *
               C32774 +
           ((C9766 + C9767 + C9768 + C9769) * C6291 +
            (C9770 + C9771 + C9772 + C9773) * C32430) *
               C32619) *
              C345 -
          (((C9774 + C9775 + C9776 + C9777) * C32430 +
            (C9778 + C9779 + C9780 + C9781) * C6291) *
               C32619 +
           ((C9773 + C9772 + C9771 + C9770) * C32430 +
            (C9769 + C9768 + C9767 + C9766) * C6291) *
               C32774) *
              C346 +
          (((C9781 + C9780 + C9779 + C9778) * C6291 +
            (C9777 + C9776 + C9775 + C9774) * C32430) *
               C32774 +
           ((C7705 * C2059 + C7699 * C2068 + C7706 * C2616 + C7700 * C2619 +
             C7707 * C7024 + C7701 * C7028 + C7708 * C7561 + C32814 * C7562) *
                C6291 +
            (C7705 * C2067 + C7699 * C2077 + C7706 * C2620 + C7700 * C2625 +
             C7707 * C7027 + C7701 * C7033 + C7708 * C7563 + C32814 * C7564) *
                C32430) *
               C32619) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C6291 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C32430) *
               C13591 +
           ((C4669 + C4670) * C6291 + (C4671 + C4672) * C32430) * C13592 +
           (C12851 * C6291 + C12852 * C32430) * C13593 +
           ((C12882 + C12881) * C6291 + (C12880 + C12879) * C32430) * C32820) *
              C32491 * C32477 * C110 -
          (((C12875 + C12876) * C32430 + (C12877 + C12878) * C6291) * C32820 +
           (C13286 * C32430 + C13287 * C6291) * C13593 +
           (C5101 * C32430 + C5102 * C6291) * C13592 +
           ((C2798 + C2797) * C32430 + (C2796 + C2795) * C6291) * C13591) *
              C32491 * C32477 * C111 +
          ((C2811 * C6291 + C2812 * C32430) * C13591 +
           (C4343 * C6291 + C4344 * C32430) * C13592 +
           ((C4676 + C4675) * C6291 + (C4674 + C4673) * C32430) * C13593 +
           ((C2756 * C2057 + C32773 * C2064 + C2757 * C2618 + C32577 * C2623) *
                C6291 +
            (C2756 * C2063 + C32773 * C2075 + C2757 * C2624 + C32577 * C2627) *
                C32430) *
               C32820) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C6291 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C32430) *
               C13591 +
           ((C4669 + C4670) * C6291 + (C4671 + C4672) * C32430) * C13592 +
           (C12851 * C6291 + C12852 * C32430) * C13593 +
           ((C12882 + C12881) * C6291 + (C12880 + C12879) * C32430) * C32820) *
              C32491 * C239 -
          (((C2757 * C7027 + C32577 * C7033 + C2756 * C2620 + C32773 * C2625) *
                C32430 +
            (C2757 * C7024 + C32577 * C7028 + C2756 * C2616 + C32773 * C2619) *
                C6291) *
               C32820 +
           ((C13493 + C13492) * C32430 + (C13491 + C13490) * C6291) * C13593 +
           ((C5308 + C5307) * C32430 + (C5306 + C5305) * C6291) * C13592 +
           ((C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                C32430 +
            (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                C6291) *
               C13591) *
              C32491 * C240 +
          (((C2756 * C248 + C32773 * C263 + C2757 * C1008 + C32577 * C1017) *
                C6291 +
            (C2756 * C264 + C32773 * C278 + C2757 * C1016 + C32577 * C1026) *
                C32430) *
               C13591 +
           ((C2756 * C1142 + C32773 * C1154 + C2757 * C1694 + C32577 * C1697) *
                C6291 +
            (C2756 * C1153 + C32773 * C1169 + C2757 * C1698 + C32577 * C1703) *
                C32430) *
               C13592 +
           ((C2756 * C1144 + C32773 * C1156 + C2757 * C6425 + C32577 * C6429) *
                C6291 +
            (C2756 * C1158 + C32773 * C1171 + C2757 * C6431 + C32577 * C6434) *
                C32430) *
               C13593 +
           ((C2756 * C7024 + C32773 * C7028 + C2757 * C7561 + C32577 * C7562) *
                C6291 +
            (C2756 * C7027 + C32773 * C7033 + C2757 * C7563 + C32577 * C7564) *
                C32430) *
               C32820) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C6291 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C32430) *
               C13591 +
           ((C4669 + C4670) * C6291 + (C4671 + C4672) * C32430) * C13592 +
           C14540 * C13593 + C14547 * C32820) *
              C345 -
          (((C14543 + C14544) * C32430 + (C14545 + C14546) * C6291) * C32820 +
           ((C12879 + C12880) * C32430 + (C12881 + C12882) * C6291) * C13593 +
           ((C4681 + C4682) * C32430 + (C4683 + C4684) * C6291) * C13592 +
           ((C4672 + C4671) * C32430 + (C4670 + C4669) * C6291) * C13591) *
              C346 +
          (C14540 * C13591 + C14547 * C13592 +
           ((C14546 + C14545) * C6291 + (C14544 + C14543) * C32430) * C13593 +
           ((C2756 * C12087 + C32773 * C12090 + C2757 * C12388 +
             C32577 * C12389) *
                C6291 +
            (C2756 * C12089 + C32773 * C12093 + C2757 * C12390 +
             C32577 * C12391) *
                C32430) *
               C32820) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
              C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
                 C6291 +
             (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
              C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
                 C32430) *
                C32774 +
            ((C9766 + C9767 + C9768 + C9769) * C6291 +
             (C9770 + C9771 + C9772 + C9773) * C32430) *
                C32619) *
               C584 -
           (((C9774 + C9775 + C9776 + C9777) * C32430 +
             (C9778 + C9779 + C9780 + C9781) * C6291) *
                C32619 +
            ((C9773 + C9772 + C9771 + C9770) * C32430 +
             (C9769 + C9768 + C9767 + C9766) * C6291) *
                C32774) *
               C585) *
              C32477 * C472 +
          ((((C8263 + C8262 + C8261 + C8260) * C6291 +
             (C8259 + C8258 + C8257 + C8256) * C32430) *
                C32774 +
            ((C7705 * C354 + C7699 * C370 + C7706 * C1145 + C7700 * C1159 +
              C7707 * C1146 + C7701 * C1160 + C7708 * C7243 + C32814 * C7244) *
                 C6291 +
             (C7705 * C371 + C7699 * C384 + C7706 * C1161 + C7700 * C1172 +
              C7707 * C1162 + C7701 * C1173 + C7708 * C7245 + C32814 * C7246) *
                 C32430) *
                C32619) *
               C585 -
           (((C8256 + C8257 + C8258 + C8259) * C32430 +
             (C8260 + C8261 + C8262 + C8263) * C6291) *
                C32619 +
            ((C7751 + C7750 + C7749 + C7748) * C32430 +
             (C7747 + C7746 + C7745 + C7744) * C6291) *
                C32774) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                 C835 +
             (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                 C829 +
             (C2795 + C2796) * C836 + (C2797 + C2798) * C830 + C2811 * C837 +
             C2812 * C32793) *
                C32774 +
            ((C4669 + C4670) * C835 + (C4671 + C4672) * C829 + C5097 * C836 +
             C5098 * C830 + C4343 * C837 + C4344 * C32793) *
                C32619) *
               C584 -
           (((C4673 + C4674) * C32793 + (C4675 + C4676) * C837 +
             (C4677 + C4678) * C830 + (C4679 + C4680) * C836 +
             (C4681 + C4682) * C829 + (C4683 + C4684) * C835) *
                C32619 +
            (C5099 * C32793 + C5100 * C837 + C5101 * C830 + C5102 * C836 +
             (C4672 + C4671) * C829 + (C4670 + C4669) * C835) *
                C32774) *
               C585) *
              C32477 * C472 +
          (((C5097 * C835 + C5098 * C829 + C4343 * C836 + C4344 * C830 +
             (C3334 + C3333) * C837 + (C3332 + C3331) * C32793) *
                C32774 +
            ((C4680 + C4679) * C835 + (C4678 + C4677) * C829 +
             (C4676 + C4675) * C836 + (C4674 + C4673) * C830 +
             (C2756 * C356 + C32773 * C374 + C2757 * C2280 + C32577 * C2281) *
                 C837 +
             (C2756 * C375 + C32773 * C386 + C2757 * C2282 + C32577 * C2283) *
                 C32793) *
                C32619) *
               C585 -
           (((C3331 + C3332) * C32793 + (C3333 + C3334) * C837 + C5099 * C830 +
             C5100 * C836 + C5101 * C829 + C5102 * C835) *
                C32619 +
            ((C2806 + C2805) * C32793 + (C2804 + C2803) * C837 +
             (C2802 + C2801) * C830 + (C2800 + C2799) * C836 +
             (C2798 + C2797) * C829 + (C2796 + C2795) * C835) *
                C32774) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                 C6291 +
             (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                 C32430) *
                C13591 +
            ((C4669 + C4670) * C6291 + (C4671 + C4672) * C32430) * C13592 +
            C14540 * C13593 + C14547 * C32820) *
               C584 -
           (((C14543 + C14544) * C32430 + (C14545 + C14546) * C6291) * C32820 +
            ((C12879 + C12880) * C32430 + (C12881 + C12882) * C6291) * C13593 +
            ((C4681 + C4682) * C32430 + (C4683 + C4684) * C6291) * C13592 +
            ((C4672 + C4671) * C32430 + (C4670 + C4669) * C6291) * C13591) *
               C585) *
              C32477 * C472 +
          (((C5097 * C6291 + C5098 * C32430) * C13591 +
            (C12853 * C6291 + C12854 * C32430) * C13592 +
            ((C12878 + C12877) * C6291 + (C12876 + C12875) * C32430) * C13593 +
            ((C2756 * C2061 + C32773 * C2071 + C2757 * C12202 +
              C32577 * C12203) *
                 C6291 +
             (C2756 * C2072 + C32773 * C2079 + C2757 * C12204 +
              C32577 * C12205) *
                 C32430) *
                C32820) *
               C585 -
           (((C12875 + C12876) * C32430 + (C12877 + C12878) * C6291) * C32820 +
            (C13286 * C32430 + C13287 * C6291) * C13593 +
            (C5101 * C32430 + C5102 * C6291) * C13592 +
            ((C2798 + C2797) * C32430 + (C2796 + C2795) * C6291) * C13591) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C835 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C829 +
            (C2795 + C2796) * C836 + (C2797 + C2798) * C830 + C2811 * C837 +
            C2812 * C32793) *
               C32774 +
           ((C2756 * C352 + C32773 * C367 + C2757 * C696 + C32577 * C701) *
                C835 +
            (C2756 * C366 + C32773 * C382 + C2757 * C702 + C32577 * C711) *
                C829 +
            (C3342 + C3341) * C836 + (C3340 + C3339) * C830 + C4343 * C837 +
            C4344 * C32793) *
               C32619) *
              C32491 * C239 -
          (((C2757 * C1149 + C32577 * C1167 + C2756 * C706 + C32773 * C713) *
                C32793 +
            (C2757 * C1140 + C32577 * C1150 + C2756 * C698 + C32773 * C705) *
                C837 +
            (C2757 * C1151 + C32577 * C1168 + C2756 * C704 + C32773 * C712) *
                C830 +
            (C2757 * C1141 + C32577 * C1152 + C2756 * C697 + C32773 * C703) *
                C836 +
            (C2757 * C1153 + C32577 * C1169 + C2756 * C702 + C32773 * C711) *
                C829 +
            (C2757 * C1142 + C32577 * C1154 + C2756 * C696 + C32773 * C701) *
                C835) *
               C32619 +
           ((C3169 + C3170) * C32793 + (C3171 + C3172) * C837 +
            (C3173 + C3174) * C830 + (C3175 + C3176) * C836 +
            (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                C829 +
            (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                C835) *
               C32774) *
              C32491 * C240 +
          (((C2756 * C248 + C32773 * C263 + C2757 * C1008 + C32577 * C1017) *
                C835 +
            (C2756 * C264 + C32773 * C278 + C2757 * C1016 + C32577 * C1026) *
                C829 +
            (C2756 * C249 + C32773 * C265 + C2757 * C1007 + C32577 * C1015) *
                C836 +
            (C2756 * C266 + C32773 * C279 + C2757 * C1014 + C32577 * C1025) *
                C830 +
            (C2756 * C250 + C32773 * C267 + C2757 * C1006 + C32577 * C1013) *
                C837 +
            (C2756 * C268 + C32773 * C280 + C2757 * C1012 + C32577 * C1024) *
                C32793) *
               C32774 +
           ((C2756 * C1142 + C32773 * C1154 + C2757 * C1694 + C32577 * C1697) *
                C835 +
            (C2756 * C1153 + C32773 * C1169 + C2757 * C1698 + C32577 * C1703) *
                C829 +
            (C2756 * C1141 + C32773 * C1152 + C2757 * C1695 + C32577 * C1699) *
                C836 +
            (C2756 * C1151 + C32773 * C1168 + C2757 * C1700 + C32577 * C1704) *
                C830 +
            (C2756 * C1140 + C32773 * C1150 + C2757 * C1696 + C32577 * C1701) *
                C837 +
            (C2756 * C1149 + C32773 * C1167 + C2757 * C1702 + C32577 * C1705) *
                C32793) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C835 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C829 +
            (C2795 + C2796) * C836 + (C2797 + C2798) * C830 + C2811 * C837 +
            C2812 * C32793) *
               C32774 +
           ((C2756 * C352 + C32773 * C367 + C2757 * C696 + C32577 * C701) *
                C835 +
            (C2756 * C366 + C32773 * C382 + C2757 * C702 + C32577 * C711) *
                C829 +
            (C3342 + C3341) * C836 + (C3340 + C3339) * C830 + C4343 * C837 +
            C4344 * C32793) *
               C32619) *
              C32491 * C32477 * C110 -
          (((C3331 + C3332) * C32793 + (C3333 + C3334) * C837 +
            (C3335 + C3336) * C830 + (C3337 + C3338) * C836 +
            (C3339 + C3340) * C829 + (C3341 + C3342) * C835) *
               C32619 +
           ((C2806 + C2805) * C32793 + (C2804 + C2803) * C837 +
            (C2802 + C2801) * C830 + (C2800 + C2799) * C836 +
            (C2798 + C2797) * C829 + (C2796 + C2795) * C835) *
               C32774) *
              C32491 * C32477 * C111 +
          ((C2811 * C835 + C2812 * C829 + C2813 * C836 + C2814 * C830 +
            (C2810 + C2809) * C837 + (C2808 + C2807) * C32793) *
               C32774 +
           (C4343 * C835 + C4344 * C829 + (C3334 + C3333) * C836 +
            (C3332 + C3331) * C830 +
            (C2756 * C348 + C32773 * C359 + C2757 * C700 + C32577 * C709) *
                C837 +
            (C2756 * C358 + C32773 * C378 + C2757 * C710 + C32577 * C715) *
                C32793) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
             C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
                C6291 +
            (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
             C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
                C32430) *
               C32774 +
           ((C7705 * C352 + C7699 * C367 + C7706 * C696 + C7700 * C701 +
             C7707 * C1142 + C7701 * C1154 + C7708 * C1694 + C32814 * C1697) *
                C6291 +
            (C7705 * C366 + C7699 * C382 + C7706 * C702 + C7700 * C711 +
             C7707 * C1153 + C7701 * C1169 + C7708 * C1698 + C32814 * C1703) *
                C32430) *
               C32619) *
              C32491 * C32477 * C110 -
          (((C8256 + C8257 + C8258 + C8259) * C32430 +
            (C8260 + C8261 + C8262 + C8263) * C6291) *
               C32619 +
           ((C7751 + C7750 + C7749 + C7748) * C32430 +
            (C7747 + C7746 + C7745 + C7744) * C6291) *
               C32774) *
              C32491 * C32477 * C111 +
          (((C7759 + C7758 + C7757 + C7756) * C6291 +
            (C7755 + C7754 + C7753 + C7752) * C32430) *
               C32774 +
           ((C7705 * C350 + C7699 * C363 + C7706 * C698 + C7700 * C705 +
             C7707 * C1140 + C7701 * C1150 + C7708 * C1696 + C32814 * C1701) *
                C6291 +
            (C7705 * C362 + C7699 * C380 + C7706 * C706 + C7700 * C713 +
             C7707 * C1149 + C7701 * C1167 + C7708 * C1702 + C32814 * C1705) *
                C32430) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
             C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
                C6291 +
            (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
             C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
                C32430) *
               C32774 +
           ((C7705 * C352 + C7699 * C367 + C7706 * C696 + C7700 * C701 +
             C7707 * C1142 + C7701 * C1154 + C7708 * C1694 + C32814 * C1697) *
                C6291 +
            (C7705 * C366 + C7699 * C382 + C7706 * C702 + C7700 * C711 +
             C7707 * C1153 + C7701 * C1169 + C7708 * C1698 + C32814 * C1703) *
                C32430) *
               C32619) *
              C32491 * C239 -
          (((C7708 * C6427 + C32814 * C6433 + C7707 * C1698 + C7701 * C1703 +
             C7706 * C1153 + C7700 * C1169 + C7705 * C702 + C7699 * C711) *
                C32430 +
            (C7708 * C6424 + C32814 * C6428 + C7707 * C1694 + C7701 * C1697 +
             C7706 * C1142 + C7700 * C1154 + C7705 * C696 + C7699 * C701) *
                C6291) *
               C32619 +
           ((C7708 * C1019 + C32814 * C1027 + C7707 * C1016 + C7701 * C1026 +
             C7706 * C264 + C7700 * C278 + C7705 * C261 + C7699 * C277) *
                C32430 +
            (C7708 * C1009 + C32814 * C1018 + C7707 * C1008 + C7701 * C1017 +
             C7706 * C248 + C7700 * C263 + C7705 * C247 + C7699 * C262) *
                C6291) *
               C32774) *
              C32491 * C240 +
          (((C7705 * C248 + C7699 * C263 + C7706 * C1008 + C7700 * C1017 +
             C7707 * C1009 + C7701 * C1018 + C7708 * C6354 + C32814 * C6357) *
                C6291 +
            (C7705 * C264 + C7699 * C278 + C7706 * C1016 + C7700 * C1026 +
             C7707 * C1019 + C7701 * C1027 + C7708 * C6356 + C32814 * C6360) *
                C32430) *
               C32774 +
           ((C7705 * C1142 + C7699 * C1154 + C7706 * C1694 + C7700 * C1697 +
             C7707 * C6424 + C7701 * C6428 + C7708 * C6690 + C32814 * C6691) *
                C6291 +
            (C7705 * C1153 + C7699 * C1169 + C7706 * C1698 + C7700 * C1703 +
             C7707 * C6427 + C7701 * C6433 + C7708 * C6692 + C32814 * C6693) *
                C32430) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C6291 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C32430) *
               C13591 +
           ((C4669 + C4670) * C6291 + (C4671 + C4672) * C32430) * C13592 +
           (C12851 * C6291 + C12852 * C32430) * C13593 +
           ((C12882 + C12881) * C6291 + (C12880 + C12879) * C32430) * C32820) *
              C32491 * C32477 * C110 -
          (((C12875 + C12876) * C32430 + (C12877 + C12878) * C6291) * C32820 +
           (C13286 * C32430 + C13287 * C6291) * C13593 +
           (C5101 * C32430 + C5102 * C6291) * C13592 +
           ((C2798 + C2797) * C32430 + (C2796 + C2795) * C6291) * C13591) *
              C32491 * C32477 * C111 +
          ((C2811 * C6291 + C2812 * C32430) * C13591 +
           (C4343 * C6291 + C4344 * C32430) * C13592 +
           ((C4676 + C4675) * C6291 + (C4674 + C4673) * C32430) * C13593 +
           ((C2756 * C2057 + C32773 * C2064 + C2757 * C2618 + C32577 * C2623) *
                C6291 +
            (C2756 * C2063 + C32773 * C2075 + C2757 * C2624 + C32577 * C2627) *
                C32430) *
               C32820) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C6291 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C32430) *
               C13591 +
           ((C4669 + C4670) * C6291 + (C4671 + C4672) * C32430) * C13592 +
           (C12851 * C6291 + C12852 * C32430) * C13593 +
           ((C12882 + C12881) * C6291 + (C12880 + C12879) * C32430) * C32820) *
              C32491 * C239 -
          (((C2757 * C7027 + C32577 * C7033 + C2756 * C2620 + C32773 * C2625) *
                C32430 +
            (C2757 * C7024 + C32577 * C7028 + C2756 * C2616 + C32773 * C2619) *
                C6291) *
               C32820 +
           ((C13493 + C13492) * C32430 + (C13491 + C13490) * C6291) * C13593 +
           ((C5308 + C5307) * C32430 + (C5306 + C5305) * C6291) * C13592 +
           ((C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                C32430 +
            (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                C6291) *
               C13591) *
              C32491 * C240 +
          (((C2756 * C248 + C32773 * C263 + C2757 * C1008 + C32577 * C1017) *
                C6291 +
            (C2756 * C264 + C32773 * C278 + C2757 * C1016 + C32577 * C1026) *
                C32430) *
               C13591 +
           ((C2756 * C1142 + C32773 * C1154 + C2757 * C1694 + C32577 * C1697) *
                C6291 +
            (C2756 * C1153 + C32773 * C1169 + C2757 * C1698 + C32577 * C1703) *
                C32430) *
               C13592 +
           ((C2756 * C1144 + C32773 * C1156 + C2757 * C6425 + C32577 * C6429) *
                C6291 +
            (C2756 * C1158 + C32773 * C1171 + C2757 * C6431 + C32577 * C6434) *
                C32430) *
               C13593 +
           ((C2756 * C7024 + C32773 * C7028 + C2757 * C7561 + C32577 * C7562) *
                C6291 +
            (C2756 * C7027 + C32773 * C7033 + C2757 * C7563 + C32577 * C7564) *
                C32430) *
               C32820) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C32514 * C126) * C114 +
                (C113 * C127 + C32514 * C140) * C102 + C168 * C115 +
                C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                C173 * C105 + C174 * C118 + C175 * C106) *
                   C32532 * C32491 * C470 -
               (C495 * C106 + C496 * C118 + C497 * C105 + C498 * C117 +
                C499 * C104 + C500 * C116 + C501 * C103 + C502 * C115 +
                (C113 * C261 + C32514 * C277) * C102 +
                (C113 * C247 + C32514 * C262) * C114) *
                   C32532 * C32491 * C471) *
                  C472 +
              ((C502 * C114 + C501 * C102 + C500 * C115 + C499 * C103 +
                C498 * C116 + C497 * C104 + C496 * C117 + C495 * C105 +
                (C113 * C474 + C32514 * C475) * C118 +
                (C113 * C476 + C32514 * C477) * C106) *
                   C32532 * C32491 * C471 -
               (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
                C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
                C169 * C102 + C168 * C114) *
                   C32532 * C32491 * C470) *
                  C473) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
                 C834 * C248 + C32804 * C263) *
                    C835 +
                (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
                 C834 * C264 + C32804 * C278) *
                    C829 +
                (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
                C895 * C837 + C896 * C32793) *
                   C32532 * C32491 * C470 -
               ((C1351 + C1352 + C1353) * C32793 +
                (C1354 + C1355 + C1356) * C837 +
                (C1357 + C1358 + C1359) * C830 +
                (C1360 + C1361 + C1362) * C836 +
                (C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
                 C832 * C261 + C32839 * C277) *
                    C829 +
                (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
                 C832 * C247 + C32839 * C262) *
                    C835) *
                   C32532 * C32491 * C471) *
                  C472 +
              (((C1362 + C1361 + C1360) * C835 +
                (C1359 + C1358 + C1357) * C829 +
                (C1356 + C1355 + C1354) * C836 +
                (C1353 + C1352 + C1351) * C830 +
                (C832 * C244 + C32839 * C256 + C833 * C251 + C32827 * C269 +
                 C834 * C1322 + C32804 * C1323) *
                    C837 +
                (C832 * C255 + C32839 * C274 + C833 * C270 + C32827 * C281 +
                 C834 * C1324 + C32804 * C1325) *
                    C32793) *
                   C32532 * C32491 * C471 -
               ((C887 + C888 + C889) * C32793 + (C890 + C891 + C892) * C837 +
                (C886 + C885 + C884) * C830 + (C883 + C882 + C881) * C836 +
                (C880 + C879 + C878) * C829 + (C877 + C876 + C875) * C835) *
                   C32532 * C32491 * C470) *
                  C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C835 +
             (C113 * C127 + C32514 * C140) * C829 + C168 * C836 + C169 * C830 +
             C170 * C837 + C171 * C32793) *
                C32840 +
            (C2120 + C2121 + C2086 + C2087 + C2088 + C2089) * C32829 +
            C2134 * C32807) *
               C32491 * C470 -
           ((C2301 * C32793 + C2302 * C837 + C2303 * C830 + C2304 * C836 +
             (C113 * C1157 + C32514 * C1170) * C829 +
             (C113 * C1143 + C32514 * C1155) * C835) *
                C32807 +
            (C2305 * C32793 + C2306 * C837 + C2307 * C830 + C2308 * C836 +
             (C113 * C702 + C32514 * C711) * C829 +
             (C113 * C696 + C32514 * C701) * C835) *
                C32829 +
            (C499 * C32793 + C500 * C837 + C501 * C830 + C502 * C836 +
             (C113 * C261 + C32514 * C277) * C829 +
             (C113 * C247 + C32514 * C262) * C835) *
                C32840) *
               C32491 * C471) *
              C472 +
          (((C502 * C835 + C501 * C829 + C500 * C836 + C499 * C830 +
             C498 * C837 + C497 * C32793) *
                C32840 +
            (C2308 * C835 + C2307 * C829 + C2306 * C836 + C2305 * C830 +
             (C113 * C699 + C32514 * C707) * C837 +
             (C113 * C708 + C32514 * C714) * C32793) *
                C32829 +
            (C2304 * C835 + C2303 * C829 + C2302 * C836 + C2301 * C830 +
             (C113 * C2280 + C32514 * C2281) * C837 +
             (C113 * C2282 + C32514 * C2283) * C32793) *
                C32807) *
               C32491 * C471 -
           ((C1836 * C32793 + C1837 * C837 + C1835 * C830 + C1834 * C836 +
             C1833 * C829 + C1832 * C835) *
                C32807 +
            (C609 * C32793 + C610 * C837 + C611 * C830 + C612 * C836 +
             C613 * C829 + C614 * C835) *
                C32829 +
            (C173 * C32793 + C172 * C837 + C171 * C830 + C170 * C836 +
             C169 * C829 + C168 * C835) *
                C32840) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C5427 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32836 +
            (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
            C5487 * C5429 + C5488 * C32793) *
               C32532 * C32491 * C470 -
           ((C5879 + C5880 + C5881) * C32793 + (C5882 + C5883 + C5884) * C5429 +
            (C5885 + C5886 + C5887) * C32823 + (C5888 + C5889 + C5890) * C5428 +
            (C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
             C5424 * C261 + C5418 * C277) *
                C32836 +
            (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
             C5424 * C247 + C5418 * C262) *
                C5427) *
               C32532 * C32491 * C471) *
              C472 +
          (((C5890 + C5889 + C5888) * C5427 + (C5887 + C5886 + C5885) * C32836 +
            (C5884 + C5883 + C5882) * C5428 + (C5881 + C5880 + C5879) * C32823 +
            (C5424 * C244 + C5418 * C256 + C5425 * C251 + C5419 * C269 +
             C5426 * C1322 + C32804 * C1323) *
                C5429 +
            (C5424 * C255 + C5418 * C274 + C5425 * C270 + C5419 * C281 +
             C5426 * C1324 + C32804 * C1325) *
                C32793) *
               C32532 * C32491 * C471 -
           ((C5479 + C5480 + C5481) * C32793 + (C5482 + C5483 + C5484) * C5429 +
            (C5478 + C5477 + C5476) * C32823 + (C5475 + C5474 + C5473) * C5428 +
            (C5472 + C5471 + C5470) * C32836 +
            (C5469 + C5468 + C5467) * C5427) *
               C32532 * C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
             C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
             C6290 * C1009 + C6284 * C1018) *
                C6291 +
            (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
             C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
             C6290 * C1019 + C6284 * C1027) *
                C32430) *
               C32532 * C32491 * C470 -
           ((C6290 * C6356 + C6284 * C6360 + C6289 * C1019 + C6283 * C1027 +
             C6288 * C1016 + C6282 * C1026 + C6287 * C264 + C6281 * C278 +
             C6286 * C261 + C6280 * C277) *
                C32430 +
            (C6290 * C6354 + C6284 * C6357 + C6289 * C1009 + C6283 * C1018 +
             C6288 * C1008 + C6282 * C1017 + C6287 * C248 + C6281 * C263 +
             C6286 * C247 + C6280 * C262) *
                C6291) *
               C32532 * C32491 * C471) *
              C472 +
          (((C6286 * C246 + C6280 * C260 + C6287 * C249 + C6281 * C265 +
             C6288 * C1007 + C6282 * C1015 + C6289 * C1010 + C6283 * C1020 +
             C6290 * C6518 + C6284 * C6519) *
                C6291 +
            (C6286 * C259 + C6280 * C276 + C6287 * C266 + C6281 * C279 +
             C6288 * C1014 + C6282 * C1025 + C6289 * C1021 + C6283 * C1028 +
             C6290 * C6520 + C6284 * C6521) *
                C32430) *
               C32532 * C32491 * C471 -
           ((C6290 * C1021 + C6284 * C1028 + C6289 * C1014 + C6283 * C1025 +
             C6288 * C266 + C6282 * C279 + C6287 * C259 + C6281 * C276 +
             C6286 * C129 + C6280 * C141) *
                C32430 +
            (C6290 * C1010 + C6284 * C1020 + C6289 * C1007 + C6283 * C1015 +
             C6288 * C249 + C6282 * C265 + C6287 * C246 + C6281 * C260 +
             C6286 * C120 + C6280 * C128) *
                C6291) *
               C32532 * C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
              C5426 * C248 + C32804 * C263) *
                 C6291 +
             (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
              C5426 * C264 + C32804 * C278) *
                 C32430) *
                C32840 +
            ((C7073 + C7074 + C7075) * C6291 +
             (C7076 + C7077 + C7078) * C32430) *
                C32829 +
            C7097 * C32807) *
               C32491 * C470 -
           (((C5426 * C6431 + C32804 * C6434 + C5425 * C1158 + C5419 * C1171 +
              C5424 * C1157 + C5418 * C1170) *
                 C32430 +
             (C5426 * C6425 + C32804 * C6429 + C5425 * C1144 + C5419 * C1156 +
              C5424 * C1143 + C5418 * C1155) *
                 C6291) *
                C32807 +
            ((C5426 * C1698 + C32804 * C1703 + C5425 * C1153 + C5419 * C1169 +
              C5424 * C702 + C5418 * C711) *
                 C32430 +
             (C5426 * C1694 + C32804 * C1697 + C5425 * C1142 + C5419 * C1154 +
              C5424 * C696 + C5418 * C701) *
                 C6291) *
                C32829 +
            ((C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
              C5424 * C261 + C5418 * C277) *
                 C32430 +
             (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
              C5424 * C247 + C5418 * C262) *
                 C6291) *
                C32840) *
               C32491 * C471) *
              C472 +
          ((((C5890 + C5889 + C5888) * C6291 +
             (C5887 + C5886 + C5885) * C32430) *
                C32840 +
            ((C5424 * C697 + C5418 * C703 + C5425 * C1141 + C5419 * C1152 +
              C5426 * C1695 + C32804 * C1699) *
                 C6291 +
             (C5424 * C704 + C5418 * C712 + C5425 * C1151 + C5419 * C1168 +
              C5426 * C1700 + C32804 * C1704) *
                 C32430) *
                C32829 +
            ((C5424 * C1145 + C5418 * C1159 + C5425 * C1146 + C5419 * C1160 +
              C5426 * C7243 + C32804 * C7244) *
                 C6291 +
             (C5424 * C1161 + C5418 * C1172 + C5425 * C1162 + C5419 * C1173 +
              C5426 * C7245 + C32804 * C7246) *
                 C32430) *
                C32807) *
               C32491 * C471 -
           (((C5426 * C1162 + C32804 * C1173 + C5425 * C1161 + C5419 * C1172 +
              C5424 * C371 + C5418 * C384) *
                 C32430 +
             (C5426 * C1146 + C32804 * C1160 + C5425 * C1145 + C5419 * C1159 +
              C5424 * C354 + C5418 * C370) *
                 C6291) *
                C32807 +
            ((C6067 + C6068 + C6069) * C32430 +
             (C6070 + C6071 + C6072) * C6291) *
                C32829 +
            ((C5472 + C5471 + C5470) * C32430 +
             (C5469 + C5468 + C5467) * C6291) *
                C32840) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C5427 +
             (C113 * C127 + C32514 * C140) * C32836 + C168 * C5428 +
             C169 * C32823 + C170 * C5429 + C171 * C32793) *
                C10305 +
            (C10529 + C10530 + C10531 + C10532 + C10533 + C10534) * C10306 +
            C10551 * C32807) *
               C32491 * C470 -
           ((C2301 * C32793 + C2302 * C5429 + C2303 * C32823 + C2304 * C5428 +
             C2648 * C32836 + C2647 * C5427) *
                C32807 +
            (C2305 * C32793 + C2306 * C5429 + C2307 * C32823 + C2308 * C5428 +
             C2646 * C32836 + C2645 * C5427) *
                C10306 +
            (C499 * C32793 + C500 * C5429 + C501 * C32823 + C502 * C5428 +
             (C113 * C261 + C32514 * C277) * C32836 +
             (C113 * C247 + C32514 * C262) * C5427) *
                C10305) *
               C32491 * C471) *
              C472 +
          (((C502 * C5427 + C501 * C32836 + C500 * C5428 + C499 * C32823 +
             C498 * C5429 + C497 * C32793) *
                C10305 +
            (C2308 * C5427 + C2307 * C32836 + C2306 * C5428 + C2305 * C32823 +
             C3920 * C5429 + C3919 * C32793) *
                C10306 +
            (C2304 * C5427 + C2303 * C32836 + C2302 * C5428 + C2301 * C32823 +
             (C113 * C2280 + C32514 * C2281) * C5429 +
             (C113 * C2282 + C32514 * C2283) * C32793) *
                C32807) *
               C32491 * C471 -
           ((C1836 * C32793 + C1837 * C5429 + C1835 * C32823 + C1834 * C5428 +
             C1833 * C32836 + C1832 * C5427) *
                C32807 +
            (C609 * C32793 + C610 * C5429 + C611 * C32823 + C612 * C5428 +
             C613 * C32836 + C614 * C5427) *
                C10306 +
            (C173 * C32793 + C172 * C5429 + C171 * C32823 + C170 * C5428 +
             C169 * C32836 + C168 * C5427) *
                C10305) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
              C834 * C248 + C32804 * C263) *
                 C6291 +
             (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
              C834 * C264 + C32804 * C278) *
                 C32430) *
                C10305 +
            ((C11380 + C11381 + C11382) * C6291 +
             (C11383 + C11384 + C11385) * C32430) *
                C10306 +
            C11404 * C32807) *
               C32491 * C470 -
           (((C834 * C6431 + C32804 * C6434 + C833 * C1158 + C32827 * C1171 +
              C832 * C1157 + C32839 * C1170) *
                 C32430 +
             (C834 * C6425 + C32804 * C6429 + C833 * C1144 + C32827 * C1156 +
              C832 * C1143 + C32839 * C1155) *
                 C6291) *
                C32807 +
            ((C834 * C1698 + C32804 * C1703 + C833 * C1153 + C32827 * C1169 +
              C832 * C702 + C32839 * C711) *
                 C32430 +
             (C834 * C1694 + C32804 * C1697 + C833 * C1142 + C32827 * C1154 +
              C832 * C696 + C32839 * C701) *
                 C6291) *
                C10306 +
            ((C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
              C832 * C261 + C32839 * C277) *
                 C32430 +
             (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
              C832 * C247 + C32839 * C262) *
                 C6291) *
                C10305) *
               C32491 * C471) *
              C472 +
          ((((C1362 + C1361 + C1360) * C6291 +
             (C1359 + C1358 + C1357) * C32430) *
                C10305 +
            ((C832 * C697 + C32839 * C703 + C833 * C1141 + C32827 * C1152 +
              C834 * C1695 + C32804 * C1699) *
                 C6291 +
             (C832 * C704 + C32839 * C712 + C833 * C1151 + C32827 * C1168 +
              C834 * C1700 + C32804 * C1704) *
                 C32430) *
                C10306 +
            ((C832 * C1145 + C32839 * C1159 + C833 * C1146 + C32827 * C1160 +
              C834 * C7243 + C32804 * C7244) *
                 C6291 +
             (C832 * C1161 + C32839 * C1172 + C833 * C1162 + C32827 * C1173 +
              C834 * C7245 + C32804 * C7246) *
                 C32430) *
                C32807) *
               C32491 * C471 -
           (((C834 * C1162 + C32804 * C1173 + C833 * C1161 + C32827 * C1172 +
              C832 * C371 + C32839 * C384) *
                 C32430 +
             (C834 * C1146 + C32804 * C1160 + C833 * C1145 + C32827 * C1159 +
              C832 * C354 + C32839 * C370) *
                 C6291) *
                C32807 +
            ((C1543 + C1544 + C1545) * C32430 +
             (C1546 + C1547 + C1548) * C6291) *
                C10306 +
            ((C880 + C879 + C878) * C32430 + (C877 + C876 + C875) * C6291) *
                C10305) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C6291 +
             (C113 * C127 + C32514 * C140) * C32430) *
                C11958 +
            (C12096 + C12097) * C11959 + C12110 * C11960 + C12111 * C11961 +
            C12120 * C11962) *
               C32491 * C470 -
           (((C113 * C7031 + C32514 * C7034) * C32430 +
             (C113 * C7025 + C32514 * C7029) * C6291) *
                C11962 +
            ((C113 * C2620 + C32514 * C2625) * C32430 +
             (C113 * C2616 + C32514 * C2619) * C6291) *
                C11961 +
            (C2648 * C32430 + C2647 * C6291) * C11960 +
            (C2646 * C32430 + C2645 * C6291) * C11959 +
            ((C113 * C261 + C32514 * C277) * C32430 +
             (C113 * C247 + C32514 * C262) * C6291) *
                C11958) *
               C32491 * C471) *
              C472 +
          (((C502 * C6291 + C501 * C32430) * C11958 +
            (C2308 * C6291 + C2307 * C32430) * C11959 +
            (C2304 * C6291 + C2303 * C32430) * C11960 +
            ((C113 * C2617 + C32514 * C2621) * C6291 +
             (C113 * C2622 + C32514 * C2626) * C32430) *
                C11961 +
            ((C113 * C12202 + C32514 * C12203) * C6291 +
             (C113 * C12204 + C32514 * C12205) * C32430) *
                C11962) *
               C32491 * C471 -
           (((C113 * C2072 + C32514 * C2079) * C32430 +
             (C113 * C2061 + C32514 * C2071) * C6291) *
                C11962 +
            (C2116 * C32430 + C2117 * C6291) * C11961 +
            (C1833 * C32430 + C1832 * C6291) * C11960 +
            (C613 * C32430 + C614 * C6291) * C11959 +
            (C169 * C32430 + C168 * C6291) * C11958) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C32514 * C126) * C114 +
                (C113 * C127 + C32514 * C140) * C102 + C168 * C115 +
                C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                C173 * C105 + C174 * C118 + C175 * C106) *
                   C32532 * C584 -
               (C607 * C106 + C608 * C118 + C609 * C105 + C610 * C117 +
                C611 * C104 + C612 * C116 + C613 * C103 + C614 * C115 +
                (C113 * C366 + C32514 * C382) * C102 +
                (C113 * C352 + C32514 * C367) * C114) *
                   C32532 * C585) *
                  C470 +
              (((C113 * C696 + C32514 * C701) * C114 +
                (C113 * C702 + C32514 * C711) * C102 +
                (C113 * C697 + C32514 * C703) * C115 +
                (C113 * C704 + C32514 * C712) * C103 +
                (C113 * C698 + C32514 * C705) * C116 +
                (C113 * C706 + C32514 * C713) * C104 +
                (C113 * C699 + C32514 * C707) * C117 +
                (C113 * C708 + C32514 * C714) * C105 +
                (C113 * C700 + C32514 * C709) * C118 +
                (C113 * C710 + C32514 * C715) * C106) *
                   C32532 * C585 -
               (C495 * C106 + C496 * C118 + C497 * C105 + C498 * C117 +
                C499 * C104 + C500 * C116 + C501 * C103 + C502 * C115 +
                (C113 * C261 + C32514 * C277) * C102 +
                (C113 * C247 + C32514 * C262) * C114) *
                   C32532 * C584) *
                  C471) *
             C32465 +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
                 C834 * C248 + C32804 * C263) *
                    C835 +
                (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
                 C834 * C264 + C32804 * C278) *
                    C829 +
                (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
                C895 * C837 + C896 * C32793) *
                   C32532 * C584 -
               ((C1537 + C1538 + C1539) * C32793 +
                (C1540 + C1541 + C1542) * C837 +
                (C1543 + C1544 + C1545) * C830 +
                (C1546 + C1547 + C1548) * C836 +
                (C834 * C1153 + C32804 * C1169 + C833 * C702 + C32827 * C711 +
                 C832 * C366 + C32839 * C382) *
                    C829 +
                (C834 * C1142 + C32804 * C1154 + C833 * C696 + C32827 * C701 +
                 C832 * C352 + C32839 * C367) *
                    C835) *
                   C32532 * C585) *
                  C470 +
              (((C832 * C696 + C32839 * C701 + C833 * C1142 + C32827 * C1154 +
                 C834 * C1694 + C32804 * C1697) *
                    C835 +
                (C832 * C702 + C32839 * C711 + C833 * C1153 + C32827 * C1169 +
                 C834 * C1698 + C32804 * C1703) *
                    C829 +
                (C832 * C697 + C32839 * C703 + C833 * C1141 + C32827 * C1152 +
                 C834 * C1695 + C32804 * C1699) *
                    C836 +
                (C832 * C704 + C32839 * C712 + C833 * C1151 + C32827 * C1168 +
                 C834 * C1700 + C32804 * C1704) *
                    C830 +
                (C832 * C698 + C32839 * C705 + C833 * C1140 + C32827 * C1150 +
                 C834 * C1696 + C32804 * C1701) *
                    C837 +
                (C832 * C706 + C32839 * C713 + C833 * C1149 + C32827 * C1167 +
                 C834 * C1702 + C32804 * C1705) *
                    C32793) *
                   C32532 * C585 -
               ((C1351 + C1352 + C1353) * C32793 +
                (C1354 + C1355 + C1356) * C837 +
                (C1357 + C1358 + C1359) * C830 +
                (C1360 + C1361 + C1362) * C836 +
                (C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
                 C832 * C261 + C32839 * C277) *
                    C829 +
                (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
                 C832 * C247 + C32839 * C262) *
                    C835) *
                   C32532 * C584) *
                  C471) *
             C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C835 +
             (C113 * C127 + C32514 * C140) * C829 + C168 * C836 + C169 * C830 +
             C170 * C837 + C171 * C32793) *
                C32840 +
            (C2120 + C2121 + C2086 + C2087 + C2088 + C2089) * C32829 +
            C2134 * C32807) *
               C584 -
           ((C2124 + C2125 + C2126 + C2127 + C2128 + C2129) * C32807 +
            (C2097 + C2096 + C2095 + C2094 + C2123 + C2122) * C32829 +
            (C2089 + C2088 + C2087 + C2086 + C2121 + C2120) * C32840) *
               C585) *
              C470 +
          (((C2649 + C2650 + C2633 + C2634 + C2635 + C2636) * C32840 +
            (C2651 + C2652 + C2641 + C2642 + C2643 + C2644) * C32829 +
            ((C113 * C2616 + C32514 * C2619) * C835 +
             (C113 * C2620 + C32514 * C2625) * C829 +
             (C113 * C2617 + C32514 * C2621) * C836 +
             (C113 * C2622 + C32514 * C2626) * C830 +
             (C113 * C2618 + C32514 * C2623) * C837 +
             (C113 * C2624 + C32514 * C2627) * C32793) *
                C32807) *
               C585 -
           ((C2644 + C2643 + C2642 + C2641 + C2652 + C2651) * C32807 +
            (C2636 + C2635 + C2634 + C2633 + C2650 + C2649) * C32829 +
            (C499 * C32793 + C500 * C837 + C501 * C830 + C502 * C836 +
             (C113 * C261 + C32514 * C277) * C829 +
             (C113 * C247 + C32514 * C262) * C835) *
                C32840) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C5427 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32836 +
            (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
            C5487 * C5429 + C5488 * C32793) *
               C32532 * C584 -
           ((C6061 + C6062 + C6063) * C32793 + (C6064 + C6065 + C6066) * C5429 +
            (C6067 + C6068 + C6069) * C32823 + (C6070 + C6071 + C6072) * C5428 +
            (C5426 * C1153 + C32804 * C1169 + C5425 * C702 + C5419 * C711 +
             C5424 * C366 + C5418 * C382) *
                C32836 +
            (C5426 * C1142 + C32804 * C1154 + C5425 * C696 + C5419 * C701 +
             C5424 * C352 + C5418 * C367) *
                C5427) *
               C32532 * C585) *
              C470 +
          (((C5424 * C696 + C5418 * C701 + C5425 * C1142 + C5419 * C1154 +
             C5426 * C1694 + C32804 * C1697) *
                C5427 +
            (C5424 * C702 + C5418 * C711 + C5425 * C1153 + C5419 * C1169 +
             C5426 * C1698 + C32804 * C1703) *
                C32836 +
            (C5424 * C697 + C5418 * C703 + C5425 * C1141 + C5419 * C1152 +
             C5426 * C1695 + C32804 * C1699) *
                C5428 +
            (C5424 * C704 + C5418 * C712 + C5425 * C1151 + C5419 * C1168 +
             C5426 * C1700 + C32804 * C1704) *
                C32823 +
            (C5424 * C698 + C5418 * C705 + C5425 * C1140 + C5419 * C1150 +
             C5426 * C1696 + C32804 * C1701) *
                C5429 +
            (C5424 * C706 + C5418 * C713 + C5425 * C1149 + C5419 * C1167 +
             C5426 * C1702 + C32804 * C1705) *
                C32793) *
               C32532 * C585 -
           ((C5879 + C5880 + C5881) * C32793 + (C5882 + C5883 + C5884) * C5429 +
            (C5885 + C5886 + C5887) * C32823 + (C5888 + C5889 + C5890) * C5428 +
            (C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
             C5424 * C261 + C5418 * C277) *
                C32836 +
            (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
             C5424 * C247 + C5418 * C262) *
                C5427) *
               C32532 * C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
             C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
             C6290 * C1009 + C6284 * C1018) *
                C6291 +
            (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
             C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
             C6290 * C1019 + C6284 * C1027) *
                C32430) *
               C32532 * C584 -
           ((C6290 * C6427 + C6284 * C6433 + C6289 * C1698 + C6283 * C1703 +
             C6288 * C1153 + C6282 * C1169 + C6287 * C702 + C6281 * C711 +
             C6286 * C366 + C6280 * C382) *
                C32430 +
            (C6290 * C6424 + C6284 * C6428 + C6289 * C1694 + C6283 * C1697 +
             C6288 * C1142 + C6282 * C1154 + C6287 * C696 + C6281 * C701 +
             C6286 * C352 + C6280 * C367) *
                C6291) *
               C32532 * C585) *
              C470 +
          (((C6286 * C696 + C6280 * C701 + C6287 * C1142 + C6281 * C1154 +
             C6288 * C1694 + C6282 * C1697 + C6289 * C6424 + C6283 * C6428 +
             C6290 * C6690 + C6284 * C6691) *
                C6291 +
            (C6286 * C702 + C6280 * C711 + C6287 * C1153 + C6281 * C1169 +
             C6288 * C1698 + C6282 * C1703 + C6289 * C6427 + C6283 * C6433 +
             C6290 * C6692 + C6284 * C6693) *
                C32430) *
               C32532 * C585 -
           ((C6290 * C6356 + C6284 * C6360 + C6289 * C1019 + C6283 * C1027 +
             C6288 * C1016 + C6282 * C1026 + C6287 * C264 + C6281 * C278 +
             C6286 * C261 + C6280 * C277) *
                C32430 +
            (C6290 * C6354 + C6284 * C6357 + C6289 * C1009 + C6283 * C1018 +
             C6288 * C1008 + C6282 * C1017 + C6287 * C248 + C6281 * C263 +
             C6286 * C247 + C6280 * C262) *
                C6291) *
               C32532 * C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
              C5426 * C248 + C32804 * C263) *
                 C6291 +
             (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
              C5426 * C264 + C32804 * C278) *
                 C32430) *
                C32840 +
            ((C7073 + C7074 + C7075) * C6291 +
             (C7076 + C7077 + C7078) * C32430) *
                C32829 +
            C7097 * C32807) *
               C584 -
           (((C7085 + C7086 + C7087) * C32430 +
             (C7088 + C7089 + C7090) * C6291) *
                C32807 +
            ((C7084 + C7083 + C7082) * C32430 +
             (C7081 + C7080 + C7079) * C6291) *
                C32829 +
            ((C7078 + C7077 + C7076) * C32430 +
             (C7075 + C7074 + C7073) * C6291) *
                C32840) *
               C585) *
              C470 +
          ((((C7590 + C7591 + C7592) * C6291 +
             (C7593 + C7594 + C7595) * C32430) *
                C32840 +
            ((C7596 + C7597 + C7598) * C6291 +
             (C7599 + C7600 + C7601) * C32430) *
                C32829 +
            ((C5424 * C2616 + C5418 * C2619 + C5425 * C7024 + C5419 * C7028 +
              C5426 * C7561 + C32804 * C7562) *
                 C6291 +
             (C5424 * C2620 + C5418 * C2625 + C5425 * C7027 + C5419 * C7033 +
              C5426 * C7563 + C32804 * C7564) *
                 C32430) *
                C32807) *
               C585 -
           (((C7601 + C7600 + C7599) * C32430 +
             (C7598 + C7597 + C7596) * C6291) *
                C32807 +
            ((C7595 + C7594 + C7593) * C32430 +
             (C7592 + C7591 + C7590) * C6291) *
                C32829 +
            ((C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
              C5424 * C261 + C5418 * C277) *
                 C32430 +
             (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
              C5424 * C247 + C5418 * C262) *
                 C6291) *
                C32840) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C5427 +
             (C113 * C127 + C32514 * C140) * C32836 + C168 * C5428 +
             C169 * C32823 + C170 * C5429 + C171 * C32793) *
                C10305 +
            (C10529 + C10530 + C10531 + C10532 + C10533 + C10534) * C10306 +
            C10551 * C32807) *
               C584 -
           ((C10541 + C10542 + C10543 + C10544 + C10545 + C10546) * C32807 +
            (C10540 + C10539 + C10538 + C10537 + C10536 + C10535) * C10306 +
            (C10534 + C10533 + C10532 + C10531 + C10530 + C10529) * C10305) *
               C585) *
              C470 +
          (((C11002 + C11003 + C11004 + C11005 + C11006 + C11007) * C10305 +
            (C11008 + C11009 + C11010 + C11011 + C11012 + C11013) * C10306 +
            ((C113 * C2616 + C32514 * C2619) * C5427 +
             (C113 * C2620 + C32514 * C2625) * C32836 +
             (C113 * C2617 + C32514 * C2621) * C5428 +
             (C113 * C2622 + C32514 * C2626) * C32823 +
             (C113 * C2618 + C32514 * C2623) * C5429 +
             (C113 * C2624 + C32514 * C2627) * C32793) *
                C32807) *
               C585 -
           ((C11013 + C11012 + C11011 + C11010 + C11009 + C11008) * C32807 +
            (C11007 + C11006 + C11005 + C11004 + C11003 + C11002) * C10306 +
            (C499 * C32793 + C500 * C5429 + C501 * C32823 + C502 * C5428 +
             (C113 * C261 + C32514 * C277) * C32836 +
             (C113 * C247 + C32514 * C262) * C5427) *
                C10305) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
              C834 * C248 + C32804 * C263) *
                 C6291 +
             (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
              C834 * C264 + C32804 * C278) *
                 C32430) *
                C10305 +
            ((C11380 + C11381 + C11382) * C6291 +
             (C11383 + C11384 + C11385) * C32430) *
                C10306 +
            C11404 * C32807) *
               C584 -
           (((C11392 + C11393 + C11394) * C32430 +
             (C11395 + C11396 + C11397) * C6291) *
                C32807 +
            ((C11391 + C11390 + C11389) * C32430 +
             (C11388 + C11387 + C11386) * C6291) *
                C10306 +
            ((C11385 + C11384 + C11383) * C32430 +
             (C11382 + C11381 + C11380) * C6291) *
                C10305) *
               C585) *
              C470 +
          ((((C11885 + C11886 + C11887) * C6291 +
             (C11888 + C11889 + C11890) * C32430) *
                C10305 +
            ((C11891 + C11892 + C11893) * C6291 +
             (C11894 + C11895 + C11896) * C32430) *
                C10306 +
            ((C832 * C2616 + C32839 * C2619 + C833 * C7024 + C32827 * C7028 +
              C834 * C7561 + C32804 * C7562) *
                 C6291 +
             (C832 * C2620 + C32839 * C2625 + C833 * C7027 + C32827 * C7033 +
              C834 * C7563 + C32804 * C7564) *
                 C32430) *
                C32807) *
               C585 -
           (((C11896 + C11895 + C11894) * C32430 +
             (C11893 + C11892 + C11891) * C6291) *
                C32807 +
            ((C11890 + C11889 + C11888) * C32430 +
             (C11887 + C11886 + C11885) * C6291) *
                C10306 +
            ((C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
              C832 * C261 + C32839 * C277) *
                 C32430 +
             (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
              C832 * C247 + C32839 * C262) *
                 C6291) *
                C10305) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C6291 +
             (C113 * C127 + C32514 * C140) * C32430) *
                C11958 +
            (C12096 + C12097) * C11959 + C12110 * C11960 + C12111 * C11961 +
            C12120 * C11962) *
               C584 -
           ((C12118 + C12119) * C11962 + (C12117 + C12116) * C11961 +
            (C12101 + C12100) * C11960 + (C12099 + C12098) * C11959 +
            (C12097 + C12096) * C11958) *
               C585) *
              C470 +
          (((C12393 + C12394) * C11958 + (C12395 + C12396) * C11959 +
            (C12409 + C12410) * C11960 + (C12411 + C12412) * C11961 +
            ((C113 * C12388 + C32514 * C12389) * C6291 +
             (C113 * C12390 + C32514 * C12391) * C32430) *
                C11962) *
               C585 -
           ((C12412 + C12411) * C11962 + (C12410 + C12409) * C11961 +
            (C12396 + C12395) * C11960 + (C12394 + C12393) * C11959 +
            ((C113 * C261 + C32514 * C277) * C32430 +
             (C113 * C247 + C32514 * C262) * C6291) *
                C11958) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (-0.25 * std::pow(Pi, 2.5) *
             (((C113 * C119 + C32514 * C126) * C114 +
               (C113 * C127 + C32514 * C140) * C102 + C168 * C115 +
               C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
               C173 * C105 + C174 * C118 + C175 * C106) *
                  C32532 * C32491 * C32477 * C110 -
              (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
               C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
               C169 * C102 + C168 * C114) *
                  C32532 * C32491 * C32477 * C111 +
              (C170 * C114 + C171 * C102 + C172 * C115 + C173 * C103 +
               C174 * C116 + C175 * C104 + C177 * C117 + C176 * C105 +
               (C113 * C125 + C32514 * C138) * C118 +
               (C113 * C139 + C32514 * C146) * C106) *
                  C32532 * C32491 * C32477 * C112) -
         0.25 * std::pow(Pi, 2.5) *
             (((C113 * C119 + C32514 * C126) * C114 +
               (C113 * C127 + C32514 * C140) * C102 + C168 * C115 +
               C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
               C173 * C105 + C174 * C118 + C175 * C106) *
                  C32532 * C32491 * C239 -
              ((C113 * C253 + C32514 * C273) * C106 +
               (C113 * C243 + C32514 * C254) * C118 +
               (C113 * C255 + C32514 * C274) * C105 +
               (C113 * C244 + C32514 * C256) * C117 +
               (C113 * C257 + C32514 * C275) * C104 +
               (C113 * C245 + C32514 * C258) * C116 +
               (C113 * C259 + C32514 * C276) * C103 +
               (C113 * C246 + C32514 * C260) * C115 +
               (C113 * C261 + C32514 * C277) * C102 +
               (C113 * C247 + C32514 * C262) * C114) *
                  C32532 * C32491 * C240 +
              ((C113 * C248 + C32514 * C263) * C114 +
               (C113 * C264 + C32514 * C278) * C102 +
               (C113 * C249 + C32514 * C265) * C115 +
               (C113 * C266 + C32514 * C279) * C103 +
               (C113 * C250 + C32514 * C267) * C116 +
               (C113 * C268 + C32514 * C280) * C104 +
               (C113 * C251 + C32514 * C269) * C117 +
               (C113 * C270 + C32514 * C281) * C105 +
               (C113 * C252 + C32514 * C271) * C118 +
               (C113 * C272 + C32514 * C282) * C106) *
                  C32532 * C32491 * C241) *
             C32465 +
         0.5 * std::pow(Pi, 2.5) *
             (((C113 * C119 + C32514 * C126) * C114 +
               (C113 * C127 + C32514 * C140) * C102 + C168 * C115 +
               C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
               C173 * C105 + C174 * C118 + C175 * C106) *
                  C32532 * C345 -
              ((C113 * C358 + C32514 * C378) * C106 +
               (C113 * C348 + C32514 * C359) * C118 +
               (C113 * C360 + C32514 * C379) * C105 +
               (C113 * C349 + C32514 * C361) * C117 +
               (C113 * C362 + C32514 * C380) * C104 +
               (C113 * C350 + C32514 * C363) * C116 +
               (C113 * C364 + C32514 * C381) * C103 +
               (C113 * C351 + C32514 * C365) * C115 +
               (C113 * C366 + C32514 * C382) * C102 +
               (C113 * C352 + C32514 * C367) * C114) *
                  C32532 * C346 +
              ((C113 * C353 + C32514 * C368) * C114 +
               (C113 * C369 + C32514 * C383) * C102 +
               (C113 * C354 + C32514 * C370) * C115 +
               (C113 * C371 + C32514 * C384) * C103 +
               (C113 * C355 + C32514 * C372) * C116 +
               (C113 * C373 + C32514 * C385) * C104 +
               (C113 * C356 + C32514 * C374) * C117 +
               (C113 * C375 + C32514 * C386) * C105 +
               (C113 * C357 + C32514 * C376) * C118 +
               (C113 * C377 + C32514 * C387) * C106) *
                  C32532 * C347) *
             C32477 * C32465 -
         0.25 * std::pow(Pi, 2.5) *
             (((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
                C834 * C248 + C32804 * C263) *
                   C835 +
               (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
                C834 * C264 + C32804 * C278) *
                   C829 +
               (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
               C895 * C837 + C896 * C32793) *
                  C32532 * C32491 * C32477 * C110 -
              ((C887 + C888 + C889) * C32793 + (C890 + C891 + C892) * C837 +
               (C886 + C885 + C884) * C830 + (C883 + C882 + C881) * C836 +
               (C880 + C879 + C878) * C829 + (C877 + C876 + C875) * C835) *
                  C32532 * C32491 * C32477 * C111 +
              (C895 * C835 + C896 * C829 + (C892 + C891 + C890) * C836 +
               (C889 + C888 + C887) * C830 +
               (C832 * C123 + C32839 * C134 + C833 * C243 + C32827 * C254 +
                C834 * C252 + C32804 * C271) *
                   C837 +
               (C832 * C135 + C32839 * C144 + C833 * C253 + C32827 * C273 +
                C834 * C272 + C32804 * C282) *
                   C32793) *
                  C32532 * C32491 * C32477 * C112) -
         0.25 * std::pow(Pi, 2.5) *
             (((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
                C834 * C248 + C32804 * C263) *
                   C835 +
               (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
                C834 * C264 + C32804 * C278) *
                   C829 +
               (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
               C895 * C837 + C896 * C32793) *
                  C32532 * C32491 * C239 -
              ((C834 * C1012 + C32804 * C1024 + C833 * C268 + C32827 * C280 +
                C832 * C257 + C32839 * C275) *
                   C32793 +
               (C834 * C1006 + C32804 * C1013 + C833 * C250 + C32827 * C267 +
                C832 * C245 + C32839 * C258) *
                   C837 +
               (C834 * C1014 + C32804 * C1025 + C833 * C266 + C32827 * C279 +
                C832 * C259 + C32839 * C276) *
                   C830 +
               (C834 * C1007 + C32804 * C1015 + C833 * C249 + C32827 * C265 +
                C832 * C246 + C32839 * C260) *
                   C836 +
               (C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
                C832 * C261 + C32839 * C277) *
                   C829 +
               (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
                C832 * C247 + C32839 * C262) *
                   C835) *
                  C32532 * C32491 * C240 +
              ((C832 * C248 + C32839 * C263 + C833 * C1008 + C32827 * C1017 +
                C834 * C1009 + C32804 * C1018) *
                   C835 +
               (C832 * C264 + C32839 * C278 + C833 * C1016 + C32827 * C1026 +
                C834 * C1019 + C32804 * C1027) *
                   C829 +
               (C832 * C249 + C32839 * C265 + C833 * C1007 + C32827 * C1015 +
                C834 * C1010 + C32804 * C1020) *
                   C836 +
               (C832 * C266 + C32839 * C279 + C833 * C1014 + C32827 * C1025 +
                C834 * C1021 + C32804 * C1028) *
                   C830 +
               (C832 * C250 + C32839 * C267 + C833 * C1006 + C32827 * C1013 +
                C834 * C1011 + C32804 * C1022) *
                   C837 +
               (C832 * C268 + C32839 * C280 + C833 * C1012 + C32827 * C1024 +
                C834 * C1023 + C32804 * C1029) *
                   C32793) *
                  C32532 * C32491 * C241) *
             C32465 +
         0.5 * std::pow(Pi, 2.5) *
             (((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
                C834 * C248 + C32804 * C263) *
                   C835 +
               (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
                C834 * C264 + C32804 * C278) *
                   C829 +
               (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
               C895 * C837 + C896 * C32793) *
                  C32532 * C345 -
              ((C834 * C1149 + C32804 * C1167 + C833 * C706 + C32827 * C713 +
                C832 * C362 + C32839 * C380) *
                   C32793 +
               (C834 * C1140 + C32804 * C1150 + C833 * C698 + C32827 * C705 +
                C832 * C350 + C32839 * C363) *
                   C837 +
               (C834 * C1151 + C32804 * C1168 + C833 * C704 + C32827 * C712 +
                C832 * C364 + C32839 * C381) *
                   C830 +
               (C834 * C1141 + C32804 * C1152 + C833 * C697 + C32827 * C703 +
                C832 * C351 + C32839 * C365) *
                   C836 +
               (C834 * C1153 + C32804 * C1169 + C833 * C702 + C32827 * C711 +
                C832 * C366 + C32839 * C382) *
                   C829 +
               (C834 * C1142 + C32804 * C1154 + C833 * C696 + C32827 * C701 +
                C832 * C352 + C32839 * C367) *
                   C835) *
                  C32532 * C346 +
              ((C832 * C353 + C32839 * C368 + C833 * C1143 + C32827 * C1155 +
                C834 * C1144 + C32804 * C1156) *
                   C835 +
               (C832 * C369 + C32839 * C383 + C833 * C1157 + C32827 * C1170 +
                C834 * C1158 + C32804 * C1171) *
                   C829 +
               (C832 * C354 + C32839 * C370 + C833 * C1145 + C32827 * C1159 +
                C834 * C1146 + C32804 * C1160) *
                   C836 +
               (C832 * C371 + C32839 * C384 + C833 * C1161 + C32827 * C1172 +
                C834 * C1162 + C32804 * C1173) *
                   C830 +
               (C832 * C355 + C32839 * C372 + C833 * C1147 + C32827 * C1163 +
                C834 * C1148 + C32804 * C1164) *
                   C837 +
               (C832 * C373 + C32839 * C385 + C833 * C1165 + C32827 * C1174 +
                C834 * C1166 + C32804 * C1175) *
                   C32793) *
                  C32532 * C347) *
             C32477 * C32465 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C32514 * C126) * C835 +
                (C113 * C127 + C32514 * C140) * C829 + C168 * C836 +
                C169 * C830 + C170 * C837 + C171 * C32793) *
                   C32840 +
               ((C113 * C352 + C32514 * C367) * C835 +
                (C113 * C366 + C32514 * C382) * C829 + C614 * C836 +
                C613 * C830 + C612 * C837 + C611 * C32793) *
                   C32829 +
               ((C113 * C353 + C32514 * C368) * C835 +
                (C113 * C369 + C32514 * C383) * C829 + C1832 * C836 +
                C1833 * C830 + C1834 * C837 + C1835 * C32793) *
                   C32807) *
                  C32491 * C32477 * C110 -
              ((C1836 * C32793 + C1837 * C837 + C1835 * C830 + C1834 * C836 +
                C1833 * C829 + C1832 * C835) *
                   C32807 +
               (C609 * C32793 + C610 * C837 + C611 * C830 + C612 * C836 +
                C613 * C829 + C614 * C835) *
                   C32829 +
               (C173 * C32793 + C172 * C837 + C171 * C830 + C170 * C836 +
                C169 * C829 + C168 * C835) *
                   C32840) *
                  C32491 * C32477 * C111 +
              ((C170 * C835 + C171 * C829 + C172 * C836 + C173 * C830 +
                C174 * C837 + C175 * C32793) *
                   C32840 +
               (C612 * C835 + C611 * C829 + C610 * C836 + C609 * C830 +
                C608 * C837 + C607 * C32793) *
                   C32829 +
               (C1834 * C835 + C1835 * C829 + C1837 * C836 + C1836 * C830 +
                (C113 * C357 + C32514 * C376) * C837 +
                (C113 * C377 + C32514 * C387) * C32793) *
                   C32807) *
                  C32491 * C32477 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C32514 * C126) * C835 +
                (C113 * C127 + C32514 * C140) * C829 + C168 * C836 +
                C169 * C830 + C170 * C837 + C171 * C32793) *
                   C32840 +
               ((C113 * C352 + C32514 * C367) * C835 +
                (C113 * C366 + C32514 * C382) * C829 + C614 * C836 +
                C613 * C830 + C612 * C837 + C611 * C32793) *
                   C32829 +
               ((C113 * C353 + C32514 * C368) * C835 +
                (C113 * C369 + C32514 * C383) * C829 + C1832 * C836 +
                C1833 * C830 + C1834 * C837 + C1835 * C32793) *
                   C32807) *
                  C32491 * C239 -
              (((C113 * C1165 + C32514 * C1174) * C32793 +
                (C113 * C1147 + C32514 * C1163) * C837 +
                (C113 * C1161 + C32514 * C1172) * C830 +
                (C113 * C1145 + C32514 * C1159) * C836 +
                (C113 * C1157 + C32514 * C1170) * C829 +
                (C113 * C1143 + C32514 * C1155) * C835) *
                   C32807 +
               ((C113 * C706 + C32514 * C713) * C32793 +
                (C113 * C698 + C32514 * C705) * C837 +
                (C113 * C704 + C32514 * C712) * C830 +
                (C113 * C697 + C32514 * C703) * C836 +
                (C113 * C702 + C32514 * C711) * C829 +
                (C113 * C696 + C32514 * C701) * C835) *
                   C32829 +
               (C499 * C32793 + C500 * C837 + C501 * C830 + C502 * C836 +
                (C113 * C261 + C32514 * C277) * C829 +
                (C113 * C247 + C32514 * C262) * C835) *
                   C32840) *
                  C32491 * C240 +
              (((C113 * C248 + C32514 * C263) * C835 +
                (C113 * C264 + C32514 * C278) * C829 +
                (C113 * C249 + C32514 * C265) * C836 +
                (C113 * C266 + C32514 * C279) * C830 +
                (C113 * C250 + C32514 * C267) * C837 +
                (C113 * C268 + C32514 * C280) * C32793) *
                   C32840 +
               ((C113 * C1142 + C32514 * C1154) * C835 +
                (C113 * C1153 + C32514 * C1169) * C829 +
                (C113 * C1141 + C32514 * C1152) * C836 +
                (C113 * C1151 + C32514 * C1168) * C830 +
                (C113 * C1140 + C32514 * C1150) * C837 +
                (C113 * C1149 + C32514 * C1167) * C32793) *
                   C32829 +
               ((C113 * C1144 + C32514 * C1156) * C835 +
                (C113 * C1158 + C32514 * C1171) * C829 +
                (C113 * C1146 + C32514 * C1160) * C836 +
                (C113 * C1162 + C32514 * C1173) * C830 +
                (C113 * C1148 + C32514 * C1164) * C837 +
                (C113 * C1166 + C32514 * C1175) * C32793) *
                   C32807) *
                  C32491 * C241) *
             C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C835 +
            (C113 * C127 + C32514 * C140) * C829 + C168 * C836 + C169 * C830 +
            C170 * C837 + C171 * C32793) *
               C32840 +
           (C2120 + C2121 + C2086 + C2087 + C2088 + C2089) * C32829 +
           C2134 * C32807) *
              C345 -
          ((C2124 + C2125 + C2126 + C2127 + C2128 + C2129) * C32807 +
           (C2097 + C2096 + C2095 + C2094 + C2123 + C2122) * C32829 +
           (C2089 + C2088 + C2087 + C2086 + C2121 + C2120) * C32840) *
              C346 +
          (C2134 * C32840 +
           (C2129 + C2128 + C2127 + C2126 + C2125 + C2124) * C32829 +
           ((C113 * C2060 + C32514 * C2069) * C835 +
            (C113 * C2070 + C32514 * C2078) * C829 +
            (C113 * C2061 + C32514 * C2071) * C836 +
            (C113 * C2072 + C32514 * C2079) * C830 +
            (C113 * C2062 + C32514 * C2073) * C837 +
            (C113 * C2074 + C32514 * C2080) * C32793) *
               C32807) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
            C5426 * C248 + C32804 * C263) *
               C5427 +
           (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
            C5426 * C264 + C32804 * C278) *
               C32836 +
           (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
           C5487 * C5429 + C5488 * C32793) *
              C32532 * C32491 * C32477 * C110 -
          ((C5479 + C5480 + C5481) * C32793 + (C5482 + C5483 + C5484) * C5429 +
           (C5478 + C5477 + C5476) * C32823 + (C5475 + C5474 + C5473) * C5428 +
           (C5472 + C5471 + C5470) * C32836 + (C5469 + C5468 + C5467) * C5427) *
              C32532 * C32491 * C32477 * C111 +
          (C5487 * C5427 + C5488 * C32836 + (C5484 + C5483 + C5482) * C5428 +
           (C5481 + C5480 + C5479) * C32823 +
           (C5424 * C123 + C5418 * C134 + C5425 * C243 + C5419 * C254 +
            C5426 * C252 + C32804 * C271) *
               C5429 +
           (C5424 * C135 + C5418 * C144 + C5425 * C253 + C5419 * C273 +
            C5426 * C272 + C32804 * C282) *
               C32793) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
            C5426 * C248 + C32804 * C263) *
               C5427 +
           (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
            C5426 * C264 + C32804 * C278) *
               C32836 +
           (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
           C5487 * C5429 + C5488 * C32793) *
              C32532 * C32491 * C239 -
          ((C5426 * C1012 + C32804 * C1024 + C5425 * C268 + C5419 * C280 +
            C5424 * C257 + C5418 * C275) *
               C32793 +
           (C5426 * C1006 + C32804 * C1013 + C5425 * C250 + C5419 * C267 +
            C5424 * C245 + C5418 * C258) *
               C5429 +
           (C5426 * C1014 + C32804 * C1025 + C5425 * C266 + C5419 * C279 +
            C5424 * C259 + C5418 * C276) *
               C32823 +
           (C5426 * C1007 + C32804 * C1015 + C5425 * C249 + C5419 * C265 +
            C5424 * C246 + C5418 * C260) *
               C5428 +
           (C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
            C5424 * C261 + C5418 * C277) *
               C32836 +
           (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
            C5424 * C247 + C5418 * C262) *
               C5427) *
              C32532 * C32491 * C240 +
          ((C5424 * C248 + C5418 * C263 + C5425 * C1008 + C5419 * C1017 +
            C5426 * C1009 + C32804 * C1018) *
               C5427 +
           (C5424 * C264 + C5418 * C278 + C5425 * C1016 + C5419 * C1026 +
            C5426 * C1019 + C32804 * C1027) *
               C32836 +
           (C5424 * C249 + C5418 * C265 + C5425 * C1007 + C5419 * C1015 +
            C5426 * C1010 + C32804 * C1020) *
               C5428 +
           (C5424 * C266 + C5418 * C279 + C5425 * C1014 + C5419 * C1025 +
            C5426 * C1021 + C32804 * C1028) *
               C32823 +
           (C5424 * C250 + C5418 * C267 + C5425 * C1006 + C5419 * C1013 +
            C5426 * C1011 + C32804 * C1022) *
               C5429 +
           (C5424 * C268 + C5418 * C280 + C5425 * C1012 + C5419 * C1024 +
            C5426 * C1023 + C32804 * C1029) *
               C32793) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
            C5426 * C248 + C32804 * C263) *
               C5427 +
           (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
            C5426 * C264 + C32804 * C278) *
               C32836 +
           (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
           C5487 * C5429 + C5488 * C32793) *
              C32532 * C345 -
          ((C5426 * C1149 + C32804 * C1167 + C5425 * C706 + C5419 * C713 +
            C5424 * C362 + C5418 * C380) *
               C32793 +
           (C5426 * C1140 + C32804 * C1150 + C5425 * C698 + C5419 * C705 +
            C5424 * C350 + C5418 * C363) *
               C5429 +
           (C5426 * C1151 + C32804 * C1168 + C5425 * C704 + C5419 * C712 +
            C5424 * C364 + C5418 * C381) *
               C32823 +
           (C5426 * C1141 + C32804 * C1152 + C5425 * C697 + C5419 * C703 +
            C5424 * C351 + C5418 * C365) *
               C5428 +
           (C5426 * C1153 + C32804 * C1169 + C5425 * C702 + C5419 * C711 +
            C5424 * C366 + C5418 * C382) *
               C32836 +
           (C5426 * C1142 + C32804 * C1154 + C5425 * C696 + C5419 * C701 +
            C5424 * C352 + C5418 * C367) *
               C5427) *
              C32532 * C346 +
          ((C5424 * C353 + C5418 * C368 + C5425 * C1143 + C5419 * C1155 +
            C5426 * C1144 + C32804 * C1156) *
               C5427 +
           (C5424 * C369 + C5418 * C383 + C5425 * C1157 + C5419 * C1170 +
            C5426 * C1158 + C32804 * C1171) *
               C32836 +
           (C5424 * C354 + C5418 * C370 + C5425 * C1145 + C5419 * C1159 +
            C5426 * C1146 + C32804 * C1160) *
               C5428 +
           (C5424 * C371 + C5418 * C384 + C5425 * C1161 + C5419 * C1172 +
            C5426 * C1162 + C32804 * C1173) *
               C32823 +
           (C5424 * C355 + C5418 * C372 + C5425 * C1147 + C5419 * C1163 +
            C5426 * C1148 + C32804 * C1164) *
               C5429 +
           (C5424 * C373 + C5418 * C385 + C5425 * C1165 + C5419 * C1174 +
            C5426 * C1166 + C32804 * C1175) *
               C32793) *
              C32532 * C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
            C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
            C6290 * C1009 + C6284 * C1018) *
               C6291 +
           (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
            C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
            C6290 * C1019 + C6284 * C1027) *
               C32430) *
              C32532 * C32491 * C32477 * C110 -
          ((C6290 * C1021 + C6284 * C1028 + C6289 * C1014 + C6283 * C1025 +
            C6288 * C266 + C6282 * C279 + C6287 * C259 + C6281 * C276 +
            C6286 * C129 + C6280 * C141) *
               C32430 +
           (C6290 * C1010 + C6284 * C1020 + C6289 * C1007 + C6283 * C1015 +
            C6288 * C249 + C6282 * C265 + C6287 * C246 + C6281 * C260 +
            C6286 * C120 + C6280 * C128) *
               C6291) *
              C32532 * C32491 * C32477 * C111 +
          ((C6286 * C121 + C6280 * C130 + C6287 * C245 + C6281 * C258 +
            C6288 * C250 + C6282 * C267 + C6289 * C1006 + C6283 * C1013 +
            C6290 * C1011 + C6284 * C1022) *
               C6291 +
           (C6286 * C131 + C6280 * C142 + C6287 * C257 + C6281 * C275 +
            C6288 * C268 + C6282 * C280 + C6289 * C1012 + C6283 * C1024 +
            C6290 * C1023 + C6284 * C1029) *
               C32430) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
            C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
            C6290 * C1009 + C6284 * C1018) *
               C6291 +
           (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
            C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
            C6290 * C1019 + C6284 * C1027) *
               C32430) *
              C32532 * C32491 * C239 -
          ((C6290 * C6356 + C6284 * C6360 + C6289 * C1019 + C6283 * C1027 +
            C6288 * C1016 + C6282 * C1026 + C6287 * C264 + C6281 * C278 +
            C6286 * C261 + C6280 * C277) *
               C32430 +
           (C6290 * C6354 + C6284 * C6357 + C6289 * C1009 + C6283 * C1018 +
            C6288 * C1008 + C6282 * C1017 + C6287 * C248 + C6281 * C263 +
            C6286 * C247 + C6280 * C262) *
               C6291) *
              C32532 * C32491 * C240 +
          ((C6286 * C248 + C6280 * C263 + C6287 * C1008 + C6281 * C1017 +
            C6288 * C1009 + C6282 * C1018 + C6289 * C6354 + C6283 * C6357 +
            C6290 * C6355 + C6284 * C6358) *
               C6291 +
           (C6286 * C264 + C6280 * C278 + C6287 * C1016 + C6281 * C1026 +
            C6288 * C1019 + C6282 * C1027 + C6289 * C6356 + C6283 * C6360 +
            C6290 * C6359 + C6284 * C6361) *
               C32430) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
            C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
            C6290 * C1009 + C6284 * C1018) *
               C6291 +
           (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
            C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
            C6290 * C1019 + C6284 * C1027) *
               C32430) *
              C32532 * C345 -
          ((C6290 * C6427 + C6284 * C6433 + C6289 * C1698 + C6283 * C1703 +
            C6288 * C1153 + C6282 * C1169 + C6287 * C702 + C6281 * C711 +
            C6286 * C366 + C6280 * C382) *
               C32430 +
           (C6290 * C6424 + C6284 * C6428 + C6289 * C1694 + C6283 * C1697 +
            C6288 * C1142 + C6282 * C1154 + C6287 * C696 + C6281 * C701 +
            C6286 * C352 + C6280 * C367) *
               C6291) *
              C32532 * C346 +
          ((C6286 * C353 + C6280 * C368 + C6287 * C1143 + C6281 * C1155 +
            C6288 * C1144 + C6282 * C1156 + C6289 * C6425 + C6283 * C6429 +
            C6290 * C6426 + C6284 * C6430) *
               C6291 +
           (C6286 * C369 + C6280 * C383 + C6287 * C1157 + C6281 * C1170 +
            C6288 * C1158 + C6282 * C1171 + C6289 * C6431 + C6283 * C6434 +
            C6290 * C6432 + C6284 * C6435) *
               C32430) *
              C32532 * C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C6291 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32430) *
               C32840 +
           ((C5424 * C352 + C5418 * C367 + C5425 * C696 + C5419 * C701 +
             C5426 * C1142 + C32804 * C1154) *
                C6291 +
            (C5424 * C366 + C5418 * C382 + C5425 * C702 + C5419 * C711 +
             C5426 * C1153 + C32804 * C1169) *
                C32430) *
               C32829 +
           ((C5424 * C353 + C5418 * C368 + C5425 * C1143 + C5419 * C1155 +
             C5426 * C1144 + C32804 * C1156) *
                C6291 +
            (C5424 * C369 + C5418 * C383 + C5425 * C1157 + C5419 * C1170 +
             C5426 * C1158 + C32804 * C1171) *
                C32430) *
               C32807) *
              C32491 * C32477 * C110 -
          (((C5426 * C1162 + C32804 * C1173 + C5425 * C1161 + C5419 * C1172 +
             C5424 * C371 + C5418 * C384) *
                C32430 +
            (C5426 * C1146 + C32804 * C1160 + C5425 * C1145 + C5419 * C1159 +
             C5424 * C354 + C5418 * C370) *
                C6291) *
               C32807 +
           ((C6067 + C6068 + C6069) * C32430 +
            (C6070 + C6071 + C6072) * C6291) *
               C32829 +
           ((C5472 + C5471 + C5470) * C32430 +
            (C5469 + C5468 + C5467) * C6291) *
               C32840) *
              C32491 * C32477 * C111 +
          ((C5487 * C6291 + C5488 * C32430) * C32840 +
           ((C6066 + C6065 + C6064) * C6291 +
            (C6063 + C6062 + C6061) * C32430) *
               C32829 +
           ((C5424 * C355 + C5418 * C372 + C5425 * C1147 + C5419 * C1163 +
             C5426 * C1148 + C32804 * C1164) *
                C6291 +
            (C5424 * C373 + C5418 * C385 + C5425 * C1165 + C5419 * C1174 +
             C5426 * C1166 + C32804 * C1175) *
                C32430) *
               C32807) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C6291 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32430) *
               C32840 +
           ((C5424 * C352 + C5418 * C367 + C5425 * C696 + C5419 * C701 +
             C5426 * C1142 + C32804 * C1154) *
                C6291 +
            (C5424 * C366 + C5418 * C382 + C5425 * C702 + C5419 * C711 +
             C5426 * C1153 + C32804 * C1169) *
                C32430) *
               C32829 +
           ((C5424 * C353 + C5418 * C368 + C5425 * C1143 + C5419 * C1155 +
             C5426 * C1144 + C32804 * C1156) *
                C6291 +
            (C5424 * C369 + C5418 * C383 + C5425 * C1157 + C5419 * C1170 +
             C5426 * C1158 + C32804 * C1171) *
                C32430) *
               C32807) *
              C32491 * C239 -
          (((C5426 * C6431 + C32804 * C6434 + C5425 * C1158 + C5419 * C1171 +
             C5424 * C1157 + C5418 * C1170) *
                C32430 +
            (C5426 * C6425 + C32804 * C6429 + C5425 * C1144 + C5419 * C1156 +
             C5424 * C1143 + C5418 * C1155) *
                C6291) *
               C32807 +
           ((C5426 * C1698 + C32804 * C1703 + C5425 * C1153 + C5419 * C1169 +
             C5424 * C702 + C5418 * C711) *
                C32430 +
            (C5426 * C1694 + C32804 * C1697 + C5425 * C1142 + C5419 * C1154 +
             C5424 * C696 + C5418 * C701) *
                C6291) *
               C32829 +
           ((C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
             C5424 * C261 + C5418 * C277) *
                C32430 +
            (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
             C5424 * C247 + C5418 * C262) *
                C6291) *
               C32840) *
              C32491 * C240 +
          (((C5424 * C248 + C5418 * C263 + C5425 * C1008 + C5419 * C1017 +
             C5426 * C1009 + C32804 * C1018) *
                C6291 +
            (C5424 * C264 + C5418 * C278 + C5425 * C1016 + C5419 * C1026 +
             C5426 * C1019 + C32804 * C1027) *
                C32430) *
               C32840 +
           ((C5424 * C1142 + C5418 * C1154 + C5425 * C1694 + C5419 * C1697 +
             C5426 * C6424 + C32804 * C6428) *
                C6291 +
            (C5424 * C1153 + C5418 * C1169 + C5425 * C1698 + C5419 * C1703 +
             C5426 * C6427 + C32804 * C6433) *
                C32430) *
               C32829 +
           ((C5424 * C1144 + C5418 * C1156 + C5425 * C6425 + C5419 * C6429 +
             C5426 * C6426 + C32804 * C6430) *
                C6291 +
            (C5424 * C1158 + C5418 * C1171 + C5425 * C6431 + C5419 * C6434 +
             C5426 * C6432 + C32804 * C6435) *
                C32430) *
               C32807) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C6291 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32430) *
               C32840 +
           ((C7073 + C7074 + C7075) * C6291 +
            (C7076 + C7077 + C7078) * C32430) *
               C32829 +
           C7097 * C32807) *
              C345 -
          (((C7085 + C7086 + C7087) * C32430 +
            (C7088 + C7089 + C7090) * C6291) *
               C32807 +
           ((C7084 + C7083 + C7082) * C32430 +
            (C7081 + C7080 + C7079) * C6291) *
               C32829 +
           ((C7078 + C7077 + C7076) * C32430 +
            (C7075 + C7074 + C7073) * C6291) *
               C32840) *
              C346 +
          (C7097 * C32840 +
           ((C7090 + C7089 + C7088) * C6291 +
            (C7087 + C7086 + C7085) * C32430) *
               C32829 +
           ((C5424 * C2060 + C5418 * C2069 + C5425 * C7025 + C5419 * C7029 +
             C5426 * C7026 + C32804 * C7030) *
                C6291 +
            (C5424 * C2070 + C5418 * C2078 + C5425 * C7031 + C5419 * C7034 +
             C5426 * C7032 + C32804 * C7035) *
                C32430) *
               C32807) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C5427 +
            (C113 * C127 + C32514 * C140) * C32836 + C168 * C5428 +
            C169 * C32823 + C170 * C5429 + C171 * C32793) *
               C10305 +
           (C2110 * C5427 + C2111 * C32836 + C614 * C5428 + C613 * C32823 +
            C612 * C5429 + C611 * C32793) *
               C10306 +
           (C2112 * C5427 + C2113 * C32836 + C1832 * C5428 + C1833 * C32823 +
            C1834 * C5429 + C1835 * C32793) *
               C32807) *
              C32491 * C32477 * C110 -
          ((C1836 * C32793 + C1837 * C5429 + C1835 * C32823 + C1834 * C5428 +
            C1833 * C32836 + C1832 * C5427) *
               C32807 +
           (C609 * C32793 + C610 * C5429 + C611 * C32823 + C612 * C5428 +
            C613 * C32836 + C614 * C5427) *
               C10306 +
           (C173 * C32793 + C172 * C5429 + C171 * C32823 + C170 * C5428 +
            C169 * C32836 + C168 * C5427) *
               C10305) *
              C32491 * C32477 * C111 +
          ((C170 * C5427 + C171 * C32836 + C172 * C5428 + C173 * C32823 +
            C174 * C5429 + C175 * C32793) *
               C10305 +
           (C612 * C5427 + C611 * C32836 + C610 * C5428 + C609 * C32823 +
            C608 * C5429 + C607 * C32793) *
               C10306 +
           (C1834 * C5427 + C1835 * C32836 + C1837 * C5428 + C1836 * C32823 +
            (C113 * C357 + C32514 * C376) * C5429 +
            (C113 * C377 + C32514 * C387) * C32793) *
               C32807) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C5427 +
            (C113 * C127 + C32514 * C140) * C32836 + C168 * C5428 +
            C169 * C32823 + C170 * C5429 + C171 * C32793) *
               C10305 +
           (C2110 * C5427 + C2111 * C32836 + C614 * C5428 + C613 * C32823 +
            C612 * C5429 + C611 * C32793) *
               C10306 +
           (C2112 * C5427 + C2113 * C32836 + C1832 * C5428 + C1833 * C32823 +
            C1834 * C5429 + C1835 * C32793) *
               C32807) *
              C32491 * C239 -
          ((C2301 * C32793 + C2302 * C5429 + C2303 * C32823 + C2304 * C5428 +
            C2648 * C32836 + C2647 * C5427) *
               C32807 +
           (C2305 * C32793 + C2306 * C5429 + C2307 * C32823 + C2308 * C5428 +
            C2646 * C32836 + C2645 * C5427) *
               C10306 +
           (C499 * C32793 + C500 * C5429 + C501 * C32823 + C502 * C5428 +
            (C113 * C261 + C32514 * C277) * C32836 +
            (C113 * C247 + C32514 * C262) * C5427) *
               C10305) *
              C32491 * C240 +
          (((C113 * C248 + C32514 * C263) * C5427 +
            (C113 * C264 + C32514 * C278) * C32836 +
            (C113 * C249 + C32514 * C265) * C5428 +
            (C113 * C266 + C32514 * C279) * C32823 +
            (C113 * C250 + C32514 * C267) * C5429 +
            (C113 * C268 + C32514 * C280) * C32793) *
               C10305 +
           ((C113 * C1142 + C32514 * C1154) * C5427 +
            (C113 * C1153 + C32514 * C1169) * C32836 +
            (C113 * C1141 + C32514 * C1152) * C5428 +
            (C113 * C1151 + C32514 * C1168) * C32823 +
            (C113 * C1140 + C32514 * C1150) * C5429 +
            (C113 * C1149 + C32514 * C1167) * C32793) *
               C10306 +
           ((C113 * C1144 + C32514 * C1156) * C5427 +
            (C113 * C1158 + C32514 * C1171) * C32836 +
            (C113 * C1146 + C32514 * C1160) * C5428 +
            (C113 * C1162 + C32514 * C1173) * C32823 +
            (C113 * C1148 + C32514 * C1164) * C5429 +
            (C113 * C1166 + C32514 * C1175) * C32793) *
               C32807) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C5427 +
            (C113 * C127 + C32514 * C140) * C32836 + C168 * C5428 +
            C169 * C32823 + C170 * C5429 + C171 * C32793) *
               C10305 +
           (C10529 + C10530 + C10531 + C10532 + C10533 + C10534) * C10306 +
           C10551 * C32807) *
              C345 -
          ((C10541 + C10542 + C10543 + C10544 + C10545 + C10546) * C32807 +
           (C10540 + C10539 + C10538 + C10537 + C10536 + C10535) * C10306 +
           (C10534 + C10533 + C10532 + C10531 + C10530 + C10529) * C10305) *
              C346 +
          (C10551 * C10305 +
           (C10546 + C10545 + C10544 + C10543 + C10542 + C10541) * C10306 +
           ((C113 * C2060 + C32514 * C2069) * C5427 +
            (C113 * C2070 + C32514 * C2078) * C32836 +
            (C113 * C2061 + C32514 * C2071) * C5428 +
            (C113 * C2072 + C32514 * C2079) * C32823 +
            (C113 * C2062 + C32514 * C2073) * C5429 +
            (C113 * C2074 + C32514 * C2080) * C32793) *
               C32807) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C6291 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C32430) *
               C10305 +
           ((C832 * C352 + C32839 * C367 + C833 * C696 + C32827 * C701 +
             C834 * C1142 + C32804 * C1154) *
                C6291 +
            (C832 * C366 + C32839 * C382 + C833 * C702 + C32827 * C711 +
             C834 * C1153 + C32804 * C1169) *
                C32430) *
               C10306 +
           ((C832 * C353 + C32839 * C368 + C833 * C1143 + C32827 * C1155 +
             C834 * C1144 + C32804 * C1156) *
                C6291 +
            (C832 * C369 + C32839 * C383 + C833 * C1157 + C32827 * C1170 +
             C834 * C1158 + C32804 * C1171) *
                C32430) *
               C32807) *
              C32491 * C32477 * C110 -
          (((C834 * C1162 + C32804 * C1173 + C833 * C1161 + C32827 * C1172 +
             C832 * C371 + C32839 * C384) *
                C32430 +
            (C834 * C1146 + C32804 * C1160 + C833 * C1145 + C32827 * C1159 +
             C832 * C354 + C32839 * C370) *
                C6291) *
               C32807 +
           ((C1543 + C1544 + C1545) * C32430 +
            (C1546 + C1547 + C1548) * C6291) *
               C10306 +
           ((C880 + C879 + C878) * C32430 + (C877 + C876 + C875) * C6291) *
               C10305) *
              C32491 * C32477 * C111 +
          ((C895 * C6291 + C896 * C32430) * C10305 +
           ((C1542 + C1541 + C1540) * C6291 +
            (C1539 + C1538 + C1537) * C32430) *
               C10306 +
           ((C832 * C355 + C32839 * C372 + C833 * C1147 + C32827 * C1163 +
             C834 * C1148 + C32804 * C1164) *
                C6291 +
            (C832 * C373 + C32839 * C385 + C833 * C1165 + C32827 * C1174 +
             C834 * C1166 + C32804 * C1175) *
                C32430) *
               C32807) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C6291 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C32430) *
               C10305 +
           ((C832 * C352 + C32839 * C367 + C833 * C696 + C32827 * C701 +
             C834 * C1142 + C32804 * C1154) *
                C6291 +
            (C832 * C366 + C32839 * C382 + C833 * C702 + C32827 * C711 +
             C834 * C1153 + C32804 * C1169) *
                C32430) *
               C10306 +
           ((C832 * C353 + C32839 * C368 + C833 * C1143 + C32827 * C1155 +
             C834 * C1144 + C32804 * C1156) *
                C6291 +
            (C832 * C369 + C32839 * C383 + C833 * C1157 + C32827 * C1170 +
             C834 * C1158 + C32804 * C1171) *
                C32430) *
               C32807) *
              C32491 * C239 -
          (((C834 * C6431 + C32804 * C6434 + C833 * C1158 + C32827 * C1171 +
             C832 * C1157 + C32839 * C1170) *
                C32430 +
            (C834 * C6425 + C32804 * C6429 + C833 * C1144 + C32827 * C1156 +
             C832 * C1143 + C32839 * C1155) *
                C6291) *
               C32807 +
           ((C834 * C1698 + C32804 * C1703 + C833 * C1153 + C32827 * C1169 +
             C832 * C702 + C32839 * C711) *
                C32430 +
            (C834 * C1694 + C32804 * C1697 + C833 * C1142 + C32827 * C1154 +
             C832 * C696 + C32839 * C701) *
                C6291) *
               C10306 +
           ((C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
             C832 * C261 + C32839 * C277) *
                C32430 +
            (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
             C832 * C247 + C32839 * C262) *
                C6291) *
               C10305) *
              C32491 * C240 +
          (((C832 * C248 + C32839 * C263 + C833 * C1008 + C32827 * C1017 +
             C834 * C1009 + C32804 * C1018) *
                C6291 +
            (C832 * C264 + C32839 * C278 + C833 * C1016 + C32827 * C1026 +
             C834 * C1019 + C32804 * C1027) *
                C32430) *
               C10305 +
           ((C832 * C1142 + C32839 * C1154 + C833 * C1694 + C32827 * C1697 +
             C834 * C6424 + C32804 * C6428) *
                C6291 +
            (C832 * C1153 + C32839 * C1169 + C833 * C1698 + C32827 * C1703 +
             C834 * C6427 + C32804 * C6433) *
                C32430) *
               C10306 +
           ((C832 * C1144 + C32839 * C1156 + C833 * C6425 + C32827 * C6429 +
             C834 * C6426 + C32804 * C6430) *
                C6291 +
            (C832 * C1158 + C32839 * C1171 + C833 * C6431 + C32827 * C6434 +
             C834 * C6432 + C32804 * C6435) *
                C32430) *
               C32807) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C6291 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C32430) *
               C10305 +
           ((C11380 + C11381 + C11382) * C6291 +
            (C11383 + C11384 + C11385) * C32430) *
               C10306 +
           C11404 * C32807) *
              C345 -
          (((C11392 + C11393 + C11394) * C32430 +
            (C11395 + C11396 + C11397) * C6291) *
               C32807 +
           ((C11391 + C11390 + C11389) * C32430 +
            (C11388 + C11387 + C11386) * C6291) *
               C10306 +
           ((C11385 + C11384 + C11383) * C32430 +
            (C11382 + C11381 + C11380) * C6291) *
               C10305) *
              C346 +
          (C11404 * C10305 +
           ((C11397 + C11396 + C11395) * C6291 +
            (C11394 + C11393 + C11392) * C32430) *
               C10306 +
           ((C832 * C2060 + C32839 * C2069 + C833 * C7025 + C32827 * C7029 +
             C834 * C7026 + C32804 * C7030) *
                C6291 +
            (C832 * C2070 + C32839 * C2078 + C833 * C7031 + C32827 * C7034 +
             C834 * C7032 + C32804 * C7035) *
                C32430) *
               C32807) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C113 * C119 + C32514 * C126) * C6291 +
                                (C113 * C127 + C32514 * C140) * C32430) *
                                   C11958 +
                               (C2110 * C6291 + C2111 * C32430) * C11959 +
                               (C2112 * C6291 + C2113 * C32430) * C11960 +
                               (C2119 * C6291 + C2118 * C32430) * C11961 +
                               ((C113 * C2060 + C32514 * C2069) * C6291 +
                                (C113 * C2070 + C32514 * C2078) * C32430) *
                                   C11962) *
                                  C32491 * C32477 * C110 -
                              (((C113 * C2072 + C32514 * C2079) * C32430 +
                                (C113 * C2061 + C32514 * C2071) * C6291) *
                                   C11962 +
                               (C2116 * C32430 + C2117 * C6291) * C11961 +
                               (C1833 * C32430 + C1832 * C6291) * C11960 +
                               (C613 * C32430 + C614 * C6291) * C11959 +
                               (C169 * C32430 + C168 * C6291) * C11958) *
                                  C32491 * C32477 * C111 +
                              ((C170 * C6291 + C171 * C32430) * C11958 +
                               (C612 * C6291 + C611 * C32430) * C11959 +
                               (C1834 * C6291 + C1835 * C32430) * C11960 +
                               (C2115 * C6291 + C2114 * C32430) * C11961 +
                               ((C113 * C2062 + C32514 * C2073) * C6291 +
                                (C113 * C2074 + C32514 * C2080) * C32430) *
                                   C11962) *
                                  C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C6291 +
            (C113 * C127 + C32514 * C140) * C32430) *
               C11958 +
           (C2110 * C6291 + C2111 * C32430) * C11959 +
           (C2112 * C6291 + C2113 * C32430) * C11960 +
           (C2119 * C6291 + C2118 * C32430) * C11961 +
           ((C113 * C2060 + C32514 * C2069) * C6291 +
            (C113 * C2070 + C32514 * C2078) * C32430) *
               C11962) *
              C32491 * C239 -
          (((C113 * C7031 + C32514 * C7034) * C32430 +
            (C113 * C7025 + C32514 * C7029) * C6291) *
               C11962 +
           ((C113 * C2620 + C32514 * C2625) * C32430 +
            (C113 * C2616 + C32514 * C2619) * C6291) *
               C11961 +
           (C2648 * C32430 + C2647 * C6291) * C11960 +
           (C2646 * C32430 + C2645 * C6291) * C11959 +
           ((C113 * C261 + C32514 * C277) * C32430 +
            (C113 * C247 + C32514 * C262) * C6291) *
               C11958) *
              C32491 * C240 +
          (((C113 * C248 + C32514 * C263) * C6291 +
            (C113 * C264 + C32514 * C278) * C32430) *
               C11958 +
           ((C113 * C1142 + C32514 * C1154) * C6291 +
            (C113 * C1153 + C32514 * C1169) * C32430) *
               C11959 +
           ((C113 * C1144 + C32514 * C1156) * C6291 +
            (C113 * C1158 + C32514 * C1171) * C32430) *
               C11960 +
           ((C113 * C7024 + C32514 * C7028) * C6291 +
            (C113 * C7027 + C32514 * C7033) * C32430) *
               C11961 +
           ((C113 * C7026 + C32514 * C7030) * C6291 +
            (C113 * C7032 + C32514 * C7035) * C32430) *
               C11962) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C6291 +
            (C113 * C127 + C32514 * C140) * C32430) *
               C11958 +
           (C12096 + C12097) * C11959 + C12110 * C11960 + C12111 * C11961 +
           C12120 * C11962) *
              C345 -
          ((C12118 + C12119) * C11962 + (C12117 + C12116) * C11961 +
           (C12101 + C12100) * C11960 + (C12099 + C12098) * C11959 +
           (C12097 + C12096) * C11958) *
              C346 +
          (C12110 * C11958 + C12111 * C11959 + C12120 * C11960 +
           (C12119 + C12118) * C11961 +
           ((C113 * C12088 + C32514 * C12091) * C6291 +
            (C113 * C12092 + C32514 * C12094) * C32430) *
               C11962) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C32514 * C126) * C114 +
                (C113 * C127 + C32514 * C140) * C102 + C168 * C115 +
                C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
                C173 * C105 + C174 * C118 + C175 * C106) *
                   C32532 * C584 -
               (C607 * C106 + C608 * C118 + C609 * C105 + C610 * C117 +
                C611 * C104 + C612 * C116 + C613 * C103 + C614 * C115 +
                (C113 * C366 + C32514 * C382) * C102 +
                (C113 * C352 + C32514 * C367) * C114) *
                   C32532 * C585) *
                  C32477 * C472 +
              ((C614 * C114 + C613 * C102 + C612 * C115 + C611 * C103 +
                C610 * C116 + C609 * C104 + C608 * C117 + C607 * C105 +
                (C113 * C586 + C32514 * C587) * C118 +
                (C113 * C588 + C32514 * C589) * C106) *
                   C32532 * C585 -
               (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
                C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
                C169 * C102 + C168 * C114) *
                   C32532 * C584) *
                  C32477 * C473) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
                 C834 * C248 + C32804 * C263) *
                    C835 +
                (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
                 C834 * C264 + C32804 * C278) *
                    C829 +
                (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
                C895 * C837 + C896 * C32793) *
                   C32532 * C584 -
               ((C1537 + C1538 + C1539) * C32793 +
                (C1540 + C1541 + C1542) * C837 +
                (C1543 + C1544 + C1545) * C830 +
                (C1546 + C1547 + C1548) * C836 +
                (C834 * C1153 + C32804 * C1169 + C833 * C702 + C32827 * C711 +
                 C832 * C366 + C32839 * C382) *
                    C829 +
                (C834 * C1142 + C32804 * C1154 + C833 * C696 + C32827 * C701 +
                 C832 * C352 + C32839 * C367) *
                    C835) *
                   C32532 * C585) *
                  C32477 * C472 +
              (((C1548 + C1547 + C1546) * C835 +
                (C1545 + C1544 + C1543) * C829 +
                (C1542 + C1541 + C1540) * C836 +
                (C1539 + C1538 + C1537) * C830 +
                (C832 * C349 + C32839 * C361 + C833 * C699 + C32827 * C707 +
                 C834 * C1508 + C32804 * C1509) *
                    C837 +
                (C832 * C360 + C32839 * C379 + C833 * C708 + C32827 * C714 +
                 C834 * C1510 + C32804 * C1511) *
                    C32793) *
                   C32532 * C585 -
               ((C887 + C888 + C889) * C32793 + (C890 + C891 + C892) * C837 +
                (C886 + C885 + C884) * C830 + (C883 + C882 + C881) * C836 +
                (C880 + C879 + C878) * C829 + (C877 + C876 + C875) * C835) *
                   C32532 * C584) *
                  C32477 * C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C835 +
             (C113 * C127 + C32514 * C140) * C829 + C168 * C836 + C169 * C830 +
             C170 * C837 + C171 * C32793) *
                C32840 +
            (C2120 + C2121 + C2086 + C2087 + C2088 + C2089) * C32829 +
            C2134 * C32807) *
               C584 -
           ((C2124 + C2125 + C2126 + C2127 + C2128 + C2129) * C32807 +
            (C2097 + C2096 + C2095 + C2094 + C2123 + C2122) * C32829 +
            (C2089 + C2088 + C2087 + C2086 + C2121 + C2120) * C32840) *
               C585) *
              C32477 * C472 +
          (((C2459 + C2460 + C2461 + C2462 + C2463 + C2464) * C32840 +
            (C2465 + C2466 + C2467 + C2468 + C2469 + C2470) * C32829 +
            (C2117 * C835 + C2116 * C829 + C2115 * C836 + C2114 * C830 +
             (C113 * C2454 + C32514 * C2455) * C837 +
             (C113 * C2456 + C32514 * C2457) * C32793) *
                C32807) *
               C585 -
           ((C2470 + C2469 + C2468 + C2467 + C2466 + C2465) * C32807 +
            (C2464 + C2463 + C2462 + C2461 + C2460 + C2459) * C32829 +
            (C173 * C32793 + C172 * C837 + C171 * C830 + C170 * C836 +
             C169 * C829 + C168 * C835) *
                C32840) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C5427 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32836 +
            (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
            C5487 * C5429 + C5488 * C32793) *
               C32532 * C584 -
           ((C6061 + C6062 + C6063) * C32793 + (C6064 + C6065 + C6066) * C5429 +
            (C6067 + C6068 + C6069) * C32823 + (C6070 + C6071 + C6072) * C5428 +
            (C5426 * C1153 + C32804 * C1169 + C5425 * C702 + C5419 * C711 +
             C5424 * C366 + C5418 * C382) *
                C32836 +
            (C5426 * C1142 + C32804 * C1154 + C5425 * C696 + C5419 * C701 +
             C5424 * C352 + C5418 * C367) *
                C5427) *
               C32532 * C585) *
              C32477 * C472 +
          (((C6072 + C6071 + C6070) * C5427 + (C6069 + C6068 + C6067) * C32836 +
            (C6066 + C6065 + C6064) * C5428 + (C6063 + C6062 + C6061) * C32823 +
            (C5424 * C349 + C5418 * C361 + C5425 * C699 + C5419 * C707 +
             C5426 * C1508 + C32804 * C1509) *
                C5429 +
            (C5424 * C360 + C5418 * C379 + C5425 * C708 + C5419 * C714 +
             C5426 * C1510 + C32804 * C1511) *
                C32793) *
               C32532 * C585 -
           ((C5479 + C5480 + C5481) * C32793 + (C5482 + C5483 + C5484) * C5429 +
            (C5478 + C5477 + C5476) * C32823 + (C5475 + C5474 + C5473) * C5428 +
            (C5472 + C5471 + C5470) * C32836 +
            (C5469 + C5468 + C5467) * C5427) *
               C32532 * C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
             C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
             C6290 * C1009 + C6284 * C1018) *
                C6291 +
            (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
             C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
             C6290 * C1019 + C6284 * C1027) *
                C32430) *
               C32532 * C584 -
           ((C6290 * C6427 + C6284 * C6433 + C6289 * C1698 + C6283 * C1703 +
             C6288 * C1153 + C6282 * C1169 + C6287 * C702 + C6281 * C711 +
             C6286 * C366 + C6280 * C382) *
                C32430 +
            (C6290 * C6424 + C6284 * C6428 + C6289 * C1694 + C6283 * C1697 +
             C6288 * C1142 + C6282 * C1154 + C6287 * C696 + C6281 * C701 +
             C6286 * C352 + C6280 * C367) *
                C6291) *
               C32532 * C585) *
              C32477 * C472 +
          (((C6286 * C351 + C6280 * C365 + C6287 * C697 + C6281 * C703 +
             C6288 * C1141 + C6282 * C1152 + C6289 * C1695 + C6283 * C1699 +
             C6290 * C6604 + C6284 * C6605) *
                C6291 +
            (C6286 * C364 + C6280 * C381 + C6287 * C704 + C6281 * C712 +
             C6288 * C1151 + C6282 * C1168 + C6289 * C1700 + C6283 * C1704 +
             C6290 * C6606 + C6284 * C6607) *
                C32430) *
               C32532 * C585 -
           ((C6290 * C1021 + C6284 * C1028 + C6289 * C1014 + C6283 * C1025 +
             C6288 * C266 + C6282 * C279 + C6287 * C259 + C6281 * C276 +
             C6286 * C129 + C6280 * C141) *
                C32430 +
            (C6290 * C1010 + C6284 * C1020 + C6289 * C1007 + C6283 * C1015 +
             C6288 * C249 + C6282 * C265 + C6287 * C246 + C6281 * C260 +
             C6286 * C120 + C6280 * C128) *
                C6291) *
               C32532 * C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
              C5426 * C248 + C32804 * C263) *
                 C6291 +
             (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
              C5426 * C264 + C32804 * C278) *
                 C32430) *
                C32840 +
            ((C7073 + C7074 + C7075) * C6291 +
             (C7076 + C7077 + C7078) * C32430) *
                C32829 +
            C7097 * C32807) *
               C584 -
           (((C7085 + C7086 + C7087) * C32430 +
             (C7088 + C7089 + C7090) * C6291) *
                C32807 +
            ((C7084 + C7083 + C7082) * C32430 +
             (C7081 + C7080 + C7079) * C6291) *
                C32829 +
            ((C7078 + C7077 + C7076) * C32430 +
             (C7075 + C7074 + C7073) * C6291) *
                C32840) *
               C585) *
              C32477 * C472 +
          ((((C6072 + C6071 + C6070) * C6291 +
             (C6069 + C6068 + C6067) * C32430) *
                C32840 +
            ((C7410 + C7411 + C7412) * C6291 +
             (C7413 + C7414 + C7415) * C32430) *
                C32829 +
            ((C5424 * C2058 + C5418 * C2066 + C5425 * C2617 + C5419 * C2621 +
              C5426 * C7393 + C32804 * C7394) *
                 C6291 +
             (C5424 * C2065 + C5418 * C2076 + C5425 * C2622 + C5419 * C2626 +
              C5426 * C7395 + C32804 * C7396) *
                 C32430) *
                C32807) *
               C585 -
           (((C7415 + C7414 + C7413) * C32430 +
             (C7412 + C7411 + C7410) * C6291) *
                C32807 +
            ((C6067 + C6068 + C6069) * C32430 +
             (C6070 + C6071 + C6072) * C6291) *
                C32829 +
            ((C5472 + C5471 + C5470) * C32430 +
             (C5469 + C5468 + C5467) * C6291) *
                C32840) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C5427 +
             (C113 * C127 + C32514 * C140) * C32836 + C168 * C5428 +
             C169 * C32823 + C170 * C5429 + C171 * C32793) *
                C10305 +
            (C10529 + C10530 + C10531 + C10532 + C10533 + C10534) * C10306 +
            C10551 * C32807) *
               C584 -
           ((C10541 + C10542 + C10543 + C10544 + C10545 + C10546) * C32807 +
            (C10540 + C10539 + C10538 + C10537 + C10536 + C10535) * C10306 +
            (C10534 + C10533 + C10532 + C10531 + C10530 + C10529) * C10305) *
               C585) *
              C32477 * C472 +
          (((C10844 + C10845 + C10846 + C10847 + C10848 + C10849) * C10305 +
            (C10850 + C10851 + C10852 + C10853 + C10854 + C10855) * C10306 +
            (C2117 * C5427 + C2116 * C32836 + C2115 * C5428 + C2114 * C32823 +
             (C113 * C2454 + C32514 * C2455) * C5429 +
             (C113 * C2456 + C32514 * C2457) * C32793) *
                C32807) *
               C585 -
           ((C10855 + C10854 + C10853 + C10852 + C10851 + C10850) * C32807 +
            (C10849 + C10848 + C10847 + C10846 + C10845 + C10844) * C10306 +
            (C173 * C32793 + C172 * C5429 + C171 * C32823 + C170 * C5428 +
             C169 * C32836 + C168 * C5427) *
                C10305) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
              C834 * C248 + C32804 * C263) *
                 C6291 +
             (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
              C834 * C264 + C32804 * C278) *
                 C32430) *
                C10305 +
            ((C11380 + C11381 + C11382) * C6291 +
             (C11383 + C11384 + C11385) * C32430) *
                C10306 +
            C11404 * C32807) *
               C584 -
           (((C11392 + C11393 + C11394) * C32430 +
             (C11395 + C11396 + C11397) * C6291) *
                C32807 +
            ((C11391 + C11390 + C11389) * C32430 +
             (C11388 + C11387 + C11386) * C6291) *
                C10306 +
            ((C11385 + C11384 + C11383) * C32430 +
             (C11382 + C11381 + C11380) * C6291) *
                C10305) *
               C585) *
              C32477 * C472 +
          ((((C1548 + C1547 + C1546) * C6291 +
             (C1545 + C1544 + C1543) * C32430) *
                C10305 +
            ((C11709 + C11710 + C11711) * C6291 +
             (C11712 + C11713 + C11714) * C32430) *
                C10306 +
            ((C832 * C2058 + C32839 * C2066 + C833 * C2617 + C32827 * C2621 +
              C834 * C7393 + C32804 * C7394) *
                 C6291 +
             (C832 * C2065 + C32839 * C2076 + C833 * C2622 + C32827 * C2626 +
              C834 * C7395 + C32804 * C7396) *
                 C32430) *
                C32807) *
               C585 -
           (((C11714 + C11713 + C11712) * C32430 +
             (C11711 + C11710 + C11709) * C6291) *
                C32807 +
            ((C1543 + C1544 + C1545) * C32430 +
             (C1546 + C1547 + C1548) * C6291) *
                C10306 +
            ((C880 + C879 + C878) * C32430 + (C877 + C876 + C875) * C6291) *
                C10305) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C6291 +
             (C113 * C127 + C32514 * C140) * C32430) *
                C11958 +
            (C12096 + C12097) * C11959 + C12110 * C11960 + C12111 * C11961 +
            C12120 * C11962) *
               C584 -
           ((C12118 + C12119) * C11962 + (C12117 + C12116) * C11961 +
            (C12101 + C12100) * C11960 + (C12099 + C12098) * C11959 +
            (C12097 + C12096) * C11958) *
               C585) *
              C32477 * C472 +
          (((C12293 + C12294) * C11958 + (C12295 + C12296) * C11959 +
            (C12297 + C12298) * C11960 + (C12305 + C12306) * C11961 +
            ((C113 * C12288 + C32514 * C12289) * C6291 +
             (C113 * C12290 + C32514 * C12291) * C32430) *
                C11962) *
               C585 -
           ((C12306 + C12305) * C11962 + (C12298 + C12297) * C11961 +
            (C12296 + C12295) * C11960 + (C12294 + C12293) * C11959 +
            (C169 * C32430 + C168 * C6291) * C11958) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C32514 * C126) * C114 +
           (C113 * C127 + C32514 * C140) * C102 + C168 * C115 + C169 * C103 +
           C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 + C174 * C118 +
           C175 * C106) *
              C32532 * C32491 * C32477 * C110 -
          (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 + C173 * C104 +
           C172 * C116 + C171 * C103 + C170 * C115 + C169 * C102 +
           C168 * C114) *
              C32532 * C32491 * C32477 * C111 +
          (C170 * C114 + C171 * C102 + C172 * C115 + C173 * C103 + C174 * C116 +
           C175 * C104 + C177 * C117 + C176 * C105 +
           (C113 * C125 + C32514 * C138) * C118 +
           (C113 * C139 + C32514 * C146) * C106) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C32514 * C126) * C114 +
           (C113 * C127 + C32514 * C140) * C102 + C168 * C115 + C169 * C103 +
           C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 + C174 * C118 +
           C175 * C106) *
              C32532 * C32491 * C239 -
          ((C113 * C253 + C32514 * C273) * C106 +
           (C113 * C243 + C32514 * C254) * C118 +
           (C113 * C255 + C32514 * C274) * C105 +
           (C113 * C244 + C32514 * C256) * C117 +
           (C113 * C257 + C32514 * C275) * C104 +
           (C113 * C245 + C32514 * C258) * C116 +
           (C113 * C259 + C32514 * C276) * C103 +
           (C113 * C246 + C32514 * C260) * C115 +
           (C113 * C261 + C32514 * C277) * C102 +
           (C113 * C247 + C32514 * C262) * C114) *
              C32532 * C32491 * C240 +
          ((C113 * C248 + C32514 * C263) * C114 +
           (C113 * C264 + C32514 * C278) * C102 +
           (C113 * C249 + C32514 * C265) * C115 +
           (C113 * C266 + C32514 * C279) * C103 +
           (C113 * C250 + C32514 * C267) * C116 +
           (C113 * C268 + C32514 * C280) * C104 +
           (C113 * C251 + C32514 * C269) * C117 +
           (C113 * C270 + C32514 * C281) * C105 +
           (C113 * C252 + C32514 * C271) * C118 +
           (C113 * C272 + C32514 * C282) * C106) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
            C834 * C248 + C32804 * C263) *
               C835 +
           (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
            C834 * C264 + C32804 * C278) *
               C829 +
           (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
           C895 * C837 + C896 * C32793) *
              C32532 * C32491 * C32477 * C110 -
          ((C887 + C888 + C889) * C32793 + (C890 + C891 + C892) * C837 +
           (C886 + C885 + C884) * C830 + (C883 + C882 + C881) * C836 +
           (C880 + C879 + C878) * C829 + (C877 + C876 + C875) * C835) *
              C32532 * C32491 * C32477 * C111 +
          (C895 * C835 + C896 * C829 + (C892 + C891 + C890) * C836 +
           (C889 + C888 + C887) * C830 +
           (C832 * C123 + C32839 * C134 + C833 * C243 + C32827 * C254 +
            C834 * C252 + C32804 * C271) *
               C837 +
           (C832 * C135 + C32839 * C144 + C833 * C253 + C32827 * C273 +
            C834 * C272 + C32804 * C282) *
               C32793) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
            C834 * C248 + C32804 * C263) *
               C835 +
           (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
            C834 * C264 + C32804 * C278) *
               C829 +
           (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
           C895 * C837 + C896 * C32793) *
              C32532 * C32491 * C239 -
          ((C834 * C1012 + C32804 * C1024 + C833 * C268 + C32827 * C280 +
            C832 * C257 + C32839 * C275) *
               C32793 +
           (C834 * C1006 + C32804 * C1013 + C833 * C250 + C32827 * C267 +
            C832 * C245 + C32839 * C258) *
               C837 +
           (C834 * C1014 + C32804 * C1025 + C833 * C266 + C32827 * C279 +
            C832 * C259 + C32839 * C276) *
               C830 +
           (C834 * C1007 + C32804 * C1015 + C833 * C249 + C32827 * C265 +
            C832 * C246 + C32839 * C260) *
               C836 +
           (C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
            C832 * C261 + C32839 * C277) *
               C829 +
           (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
            C832 * C247 + C32839 * C262) *
               C835) *
              C32532 * C32491 * C240 +
          ((C832 * C248 + C32839 * C263 + C833 * C1008 + C32827 * C1017 +
            C834 * C1009 + C32804 * C1018) *
               C835 +
           (C832 * C264 + C32839 * C278 + C833 * C1016 + C32827 * C1026 +
            C834 * C1019 + C32804 * C1027) *
               C829 +
           (C832 * C249 + C32839 * C265 + C833 * C1007 + C32827 * C1015 +
            C834 * C1010 + C32804 * C1020) *
               C836 +
           (C832 * C266 + C32839 * C279 + C833 * C1014 + C32827 * C1025 +
            C834 * C1021 + C32804 * C1028) *
               C830 +
           (C832 * C250 + C32839 * C267 + C833 * C1006 + C32827 * C1013 +
            C834 * C1011 + C32804 * C1022) *
               C837 +
           (C832 * C268 + C32839 * C280 + C833 * C1012 + C32827 * C1024 +
            C834 * C1023 + C32804 * C1029) *
               C32793) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C835 +
            (C113 * C127 + C32514 * C140) * C829 + C168 * C836 + C169 * C830 +
            C170 * C837 + C171 * C32793) *
               C32840 +
           ((C113 * C352 + C32514 * C367) * C835 +
            (C113 * C366 + C32514 * C382) * C829 + C614 * C836 + C613 * C830 +
            C612 * C837 + C611 * C32793) *
               C32829 +
           ((C113 * C353 + C32514 * C368) * C835 +
            (C113 * C369 + C32514 * C383) * C829 + C1832 * C836 + C1833 * C830 +
            C1834 * C837 + C1835 * C32793) *
               C32807) *
              C32491 * C32477 * C110 -
          ((C1836 * C32793 + C1837 * C837 + C1835 * C830 + C1834 * C836 +
            C1833 * C829 + C1832 * C835) *
               C32807 +
           (C609 * C32793 + C610 * C837 + C611 * C830 + C612 * C836 +
            C613 * C829 + C614 * C835) *
               C32829 +
           (C173 * C32793 + C172 * C837 + C171 * C830 + C170 * C836 +
            C169 * C829 + C168 * C835) *
               C32840) *
              C32491 * C32477 * C111 +
          ((C170 * C835 + C171 * C829 + C172 * C836 + C173 * C830 +
            C174 * C837 + C175 * C32793) *
               C32840 +
           (C612 * C835 + C611 * C829 + C610 * C836 + C609 * C830 +
            C608 * C837 + C607 * C32793) *
               C32829 +
           (C1834 * C835 + C1835 * C829 + C1837 * C836 + C1836 * C830 +
            (C113 * C357 + C32514 * C376) * C837 +
            (C113 * C377 + C32514 * C387) * C32793) *
               C32807) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C835 +
            (C113 * C127 + C32514 * C140) * C829 + C168 * C836 + C169 * C830 +
            C170 * C837 + C171 * C32793) *
               C32840 +
           ((C113 * C352 + C32514 * C367) * C835 +
            (C113 * C366 + C32514 * C382) * C829 + C614 * C836 + C613 * C830 +
            C612 * C837 + C611 * C32793) *
               C32829 +
           ((C113 * C353 + C32514 * C368) * C835 +
            (C113 * C369 + C32514 * C383) * C829 + C1832 * C836 + C1833 * C830 +
            C1834 * C837 + C1835 * C32793) *
               C32807) *
              C32491 * C239 -
          (((C113 * C1165 + C32514 * C1174) * C32793 +
            (C113 * C1147 + C32514 * C1163) * C837 +
            (C113 * C1161 + C32514 * C1172) * C830 +
            (C113 * C1145 + C32514 * C1159) * C836 +
            (C113 * C1157 + C32514 * C1170) * C829 +
            (C113 * C1143 + C32514 * C1155) * C835) *
               C32807 +
           ((C113 * C706 + C32514 * C713) * C32793 +
            (C113 * C698 + C32514 * C705) * C837 +
            (C113 * C704 + C32514 * C712) * C830 +
            (C113 * C697 + C32514 * C703) * C836 +
            (C113 * C702 + C32514 * C711) * C829 +
            (C113 * C696 + C32514 * C701) * C835) *
               C32829 +
           (C499 * C32793 + C500 * C837 + C501 * C830 + C502 * C836 +
            (C113 * C261 + C32514 * C277) * C829 +
            (C113 * C247 + C32514 * C262) * C835) *
               C32840) *
              C32491 * C240 +
          (((C113 * C248 + C32514 * C263) * C835 +
            (C113 * C264 + C32514 * C278) * C829 +
            (C113 * C249 + C32514 * C265) * C836 +
            (C113 * C266 + C32514 * C279) * C830 +
            (C113 * C250 + C32514 * C267) * C837 +
            (C113 * C268 + C32514 * C280) * C32793) *
               C32840 +
           ((C113 * C1142 + C32514 * C1154) * C835 +
            (C113 * C1153 + C32514 * C1169) * C829 +
            (C113 * C1141 + C32514 * C1152) * C836 +
            (C113 * C1151 + C32514 * C1168) * C830 +
            (C113 * C1140 + C32514 * C1150) * C837 +
            (C113 * C1149 + C32514 * C1167) * C32793) *
               C32829 +
           ((C113 * C1144 + C32514 * C1156) * C835 +
            (C113 * C1158 + C32514 * C1171) * C829 +
            (C113 * C1146 + C32514 * C1160) * C836 +
            (C113 * C1162 + C32514 * C1173) * C830 +
            (C113 * C1148 + C32514 * C1164) * C837 +
            (C113 * C1166 + C32514 * C1175) * C32793) *
               C32807) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
            C5426 * C248 + C32804 * C263) *
               C5427 +
           (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
            C5426 * C264 + C32804 * C278) *
               C32836 +
           (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
           C5487 * C5429 + C5488 * C32793) *
              C32532 * C32491 * C32477 * C110 -
          ((C5479 + C5480 + C5481) * C32793 + (C5482 + C5483 + C5484) * C5429 +
           (C5478 + C5477 + C5476) * C32823 + (C5475 + C5474 + C5473) * C5428 +
           (C5472 + C5471 + C5470) * C32836 + (C5469 + C5468 + C5467) * C5427) *
              C32532 * C32491 * C32477 * C111 +
          (C5487 * C5427 + C5488 * C32836 + (C5484 + C5483 + C5482) * C5428 +
           (C5481 + C5480 + C5479) * C32823 +
           (C5424 * C123 + C5418 * C134 + C5425 * C243 + C5419 * C254 +
            C5426 * C252 + C32804 * C271) *
               C5429 +
           (C5424 * C135 + C5418 * C144 + C5425 * C253 + C5419 * C273 +
            C5426 * C272 + C32804 * C282) *
               C32793) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
            C5426 * C248 + C32804 * C263) *
               C5427 +
           (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
            C5426 * C264 + C32804 * C278) *
               C32836 +
           (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
           C5487 * C5429 + C5488 * C32793) *
              C32532 * C32491 * C239 -
          ((C5426 * C1012 + C32804 * C1024 + C5425 * C268 + C5419 * C280 +
            C5424 * C257 + C5418 * C275) *
               C32793 +
           (C5426 * C1006 + C32804 * C1013 + C5425 * C250 + C5419 * C267 +
            C5424 * C245 + C5418 * C258) *
               C5429 +
           (C5426 * C1014 + C32804 * C1025 + C5425 * C266 + C5419 * C279 +
            C5424 * C259 + C5418 * C276) *
               C32823 +
           (C5426 * C1007 + C32804 * C1015 + C5425 * C249 + C5419 * C265 +
            C5424 * C246 + C5418 * C260) *
               C5428 +
           (C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
            C5424 * C261 + C5418 * C277) *
               C32836 +
           (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
            C5424 * C247 + C5418 * C262) *
               C5427) *
              C32532 * C32491 * C240 +
          ((C5424 * C248 + C5418 * C263 + C5425 * C1008 + C5419 * C1017 +
            C5426 * C1009 + C32804 * C1018) *
               C5427 +
           (C5424 * C264 + C5418 * C278 + C5425 * C1016 + C5419 * C1026 +
            C5426 * C1019 + C32804 * C1027) *
               C32836 +
           (C5424 * C249 + C5418 * C265 + C5425 * C1007 + C5419 * C1015 +
            C5426 * C1010 + C32804 * C1020) *
               C5428 +
           (C5424 * C266 + C5418 * C279 + C5425 * C1014 + C5419 * C1025 +
            C5426 * C1021 + C32804 * C1028) *
               C32823 +
           (C5424 * C250 + C5418 * C267 + C5425 * C1006 + C5419 * C1013 +
            C5426 * C1011 + C32804 * C1022) *
               C5429 +
           (C5424 * C268 + C5418 * C280 + C5425 * C1012 + C5419 * C1024 +
            C5426 * C1023 + C32804 * C1029) *
               C32793) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
            C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
            C6290 * C1009 + C6284 * C1018) *
               C6291 +
           (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
            C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
            C6290 * C1019 + C6284 * C1027) *
               C32430) *
              C32532 * C32491 * C32477 * C110 -
          ((C6290 * C1021 + C6284 * C1028 + C6289 * C1014 + C6283 * C1025 +
            C6288 * C266 + C6282 * C279 + C6287 * C259 + C6281 * C276 +
            C6286 * C129 + C6280 * C141) *
               C32430 +
           (C6290 * C1010 + C6284 * C1020 + C6289 * C1007 + C6283 * C1015 +
            C6288 * C249 + C6282 * C265 + C6287 * C246 + C6281 * C260 +
            C6286 * C120 + C6280 * C128) *
               C6291) *
              C32532 * C32491 * C32477 * C111 +
          ((C6286 * C121 + C6280 * C130 + C6287 * C245 + C6281 * C258 +
            C6288 * C250 + C6282 * C267 + C6289 * C1006 + C6283 * C1013 +
            C6290 * C1011 + C6284 * C1022) *
               C6291 +
           (C6286 * C131 + C6280 * C142 + C6287 * C257 + C6281 * C275 +
            C6288 * C268 + C6282 * C280 + C6289 * C1012 + C6283 * C1024 +
            C6290 * C1023 + C6284 * C1029) *
               C32430) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
            C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
            C6290 * C1009 + C6284 * C1018) *
               C6291 +
           (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
            C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
            C6290 * C1019 + C6284 * C1027) *
               C32430) *
              C32532 * C32491 * C239 -
          ((C6290 * C6356 + C6284 * C6360 + C6289 * C1019 + C6283 * C1027 +
            C6288 * C1016 + C6282 * C1026 + C6287 * C264 + C6281 * C278 +
            C6286 * C261 + C6280 * C277) *
               C32430 +
           (C6290 * C6354 + C6284 * C6357 + C6289 * C1009 + C6283 * C1018 +
            C6288 * C1008 + C6282 * C1017 + C6287 * C248 + C6281 * C263 +
            C6286 * C247 + C6280 * C262) *
               C6291) *
              C32532 * C32491 * C240 +
          ((C6286 * C248 + C6280 * C263 + C6287 * C1008 + C6281 * C1017 +
            C6288 * C1009 + C6282 * C1018 + C6289 * C6354 + C6283 * C6357 +
            C6290 * C6355 + C6284 * C6358) *
               C6291 +
           (C6286 * C264 + C6280 * C278 + C6287 * C1016 + C6281 * C1026 +
            C6288 * C1019 + C6282 * C1027 + C6289 * C6356 + C6283 * C6360 +
            C6290 * C6359 + C6284 * C6361) *
               C32430) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C6291 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32430) *
               C32840 +
           ((C5424 * C352 + C5418 * C367 + C5425 * C696 + C5419 * C701 +
             C5426 * C1142 + C32804 * C1154) *
                C6291 +
            (C5424 * C366 + C5418 * C382 + C5425 * C702 + C5419 * C711 +
             C5426 * C1153 + C32804 * C1169) *
                C32430) *
               C32829 +
           ((C5424 * C353 + C5418 * C368 + C5425 * C1143 + C5419 * C1155 +
             C5426 * C1144 + C32804 * C1156) *
                C6291 +
            (C5424 * C369 + C5418 * C383 + C5425 * C1157 + C5419 * C1170 +
             C5426 * C1158 + C32804 * C1171) *
                C32430) *
               C32807) *
              C32491 * C32477 * C110 -
          (((C5426 * C1162 + C32804 * C1173 + C5425 * C1161 + C5419 * C1172 +
             C5424 * C371 + C5418 * C384) *
                C32430 +
            (C5426 * C1146 + C32804 * C1160 + C5425 * C1145 + C5419 * C1159 +
             C5424 * C354 + C5418 * C370) *
                C6291) *
               C32807 +
           ((C6067 + C6068 + C6069) * C32430 +
            (C6070 + C6071 + C6072) * C6291) *
               C32829 +
           ((C5472 + C5471 + C5470) * C32430 +
            (C5469 + C5468 + C5467) * C6291) *
               C32840) *
              C32491 * C32477 * C111 +
          ((C5487 * C6291 + C5488 * C32430) * C32840 +
           ((C6066 + C6065 + C6064) * C6291 +
            (C6063 + C6062 + C6061) * C32430) *
               C32829 +
           ((C5424 * C355 + C5418 * C372 + C5425 * C1147 + C5419 * C1163 +
             C5426 * C1148 + C32804 * C1164) *
                C6291 +
            (C5424 * C373 + C5418 * C385 + C5425 * C1165 + C5419 * C1174 +
             C5426 * C1166 + C32804 * C1175) *
                C32430) *
               C32807) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C6291 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32430) *
               C32840 +
           ((C5424 * C352 + C5418 * C367 + C5425 * C696 + C5419 * C701 +
             C5426 * C1142 + C32804 * C1154) *
                C6291 +
            (C5424 * C366 + C5418 * C382 + C5425 * C702 + C5419 * C711 +
             C5426 * C1153 + C32804 * C1169) *
                C32430) *
               C32829 +
           ((C5424 * C353 + C5418 * C368 + C5425 * C1143 + C5419 * C1155 +
             C5426 * C1144 + C32804 * C1156) *
                C6291 +
            (C5424 * C369 + C5418 * C383 + C5425 * C1157 + C5419 * C1170 +
             C5426 * C1158 + C32804 * C1171) *
                C32430) *
               C32807) *
              C32491 * C239 -
          (((C5426 * C6431 + C32804 * C6434 + C5425 * C1158 + C5419 * C1171 +
             C5424 * C1157 + C5418 * C1170) *
                C32430 +
            (C5426 * C6425 + C32804 * C6429 + C5425 * C1144 + C5419 * C1156 +
             C5424 * C1143 + C5418 * C1155) *
                C6291) *
               C32807 +
           ((C5426 * C1698 + C32804 * C1703 + C5425 * C1153 + C5419 * C1169 +
             C5424 * C702 + C5418 * C711) *
                C32430 +
            (C5426 * C1694 + C32804 * C1697 + C5425 * C1142 + C5419 * C1154 +
             C5424 * C696 + C5418 * C701) *
                C6291) *
               C32829 +
           ((C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
             C5424 * C261 + C5418 * C277) *
                C32430 +
            (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
             C5424 * C247 + C5418 * C262) *
                C6291) *
               C32840) *
              C32491 * C240 +
          (((C5424 * C248 + C5418 * C263 + C5425 * C1008 + C5419 * C1017 +
             C5426 * C1009 + C32804 * C1018) *
                C6291 +
            (C5424 * C264 + C5418 * C278 + C5425 * C1016 + C5419 * C1026 +
             C5426 * C1019 + C32804 * C1027) *
                C32430) *
               C32840 +
           ((C5424 * C1142 + C5418 * C1154 + C5425 * C1694 + C5419 * C1697 +
             C5426 * C6424 + C32804 * C6428) *
                C6291 +
            (C5424 * C1153 + C5418 * C1169 + C5425 * C1698 + C5419 * C1703 +
             C5426 * C6427 + C32804 * C6433) *
                C32430) *
               C32829 +
           ((C5424 * C1144 + C5418 * C1156 + C5425 * C6425 + C5419 * C6429 +
             C5426 * C6426 + C32804 * C6430) *
                C6291 +
            (C5424 * C1158 + C5418 * C1171 + C5425 * C6431 + C5419 * C6434 +
             C5426 * C6432 + C32804 * C6435) *
                C32430) *
               C32807) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C5427 +
            (C113 * C127 + C32514 * C140) * C32836 + C168 * C5428 +
            C169 * C32823 + C170 * C5429 + C171 * C32793) *
               C10305 +
           (C2110 * C5427 + C2111 * C32836 + C614 * C5428 + C613 * C32823 +
            C612 * C5429 + C611 * C32793) *
               C10306 +
           (C2112 * C5427 + C2113 * C32836 + C1832 * C5428 + C1833 * C32823 +
            C1834 * C5429 + C1835 * C32793) *
               C32807) *
              C32491 * C32477 * C110 -
          ((C1836 * C32793 + C1837 * C5429 + C1835 * C32823 + C1834 * C5428 +
            C1833 * C32836 + C1832 * C5427) *
               C32807 +
           (C609 * C32793 + C610 * C5429 + C611 * C32823 + C612 * C5428 +
            C613 * C32836 + C614 * C5427) *
               C10306 +
           (C173 * C32793 + C172 * C5429 + C171 * C32823 + C170 * C5428 +
            C169 * C32836 + C168 * C5427) *
               C10305) *
              C32491 * C32477 * C111 +
          ((C170 * C5427 + C171 * C32836 + C172 * C5428 + C173 * C32823 +
            C174 * C5429 + C175 * C32793) *
               C10305 +
           (C612 * C5427 + C611 * C32836 + C610 * C5428 + C609 * C32823 +
            C608 * C5429 + C607 * C32793) *
               C10306 +
           (C1834 * C5427 + C1835 * C32836 + C1837 * C5428 + C1836 * C32823 +
            (C113 * C357 + C32514 * C376) * C5429 +
            (C113 * C377 + C32514 * C387) * C32793) *
               C32807) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C5427 +
            (C113 * C127 + C32514 * C140) * C32836 + C168 * C5428 +
            C169 * C32823 + C170 * C5429 + C171 * C32793) *
               C10305 +
           (C2110 * C5427 + C2111 * C32836 + C614 * C5428 + C613 * C32823 +
            C612 * C5429 + C611 * C32793) *
               C10306 +
           (C2112 * C5427 + C2113 * C32836 + C1832 * C5428 + C1833 * C32823 +
            C1834 * C5429 + C1835 * C32793) *
               C32807) *
              C32491 * C239 -
          ((C2301 * C32793 + C2302 * C5429 + C2303 * C32823 + C2304 * C5428 +
            C2648 * C32836 + C2647 * C5427) *
               C32807 +
           (C2305 * C32793 + C2306 * C5429 + C2307 * C32823 + C2308 * C5428 +
            C2646 * C32836 + C2645 * C5427) *
               C10306 +
           (C499 * C32793 + C500 * C5429 + C501 * C32823 + C502 * C5428 +
            (C113 * C261 + C32514 * C277) * C32836 +
            (C113 * C247 + C32514 * C262) * C5427) *
               C10305) *
              C32491 * C240 +
          (((C113 * C248 + C32514 * C263) * C5427 +
            (C113 * C264 + C32514 * C278) * C32836 +
            (C113 * C249 + C32514 * C265) * C5428 +
            (C113 * C266 + C32514 * C279) * C32823 +
            (C113 * C250 + C32514 * C267) * C5429 +
            (C113 * C268 + C32514 * C280) * C32793) *
               C10305 +
           ((C113 * C1142 + C32514 * C1154) * C5427 +
            (C113 * C1153 + C32514 * C1169) * C32836 +
            (C113 * C1141 + C32514 * C1152) * C5428 +
            (C113 * C1151 + C32514 * C1168) * C32823 +
            (C113 * C1140 + C32514 * C1150) * C5429 +
            (C113 * C1149 + C32514 * C1167) * C32793) *
               C10306 +
           ((C113 * C1144 + C32514 * C1156) * C5427 +
            (C113 * C1158 + C32514 * C1171) * C32836 +
            (C113 * C1146 + C32514 * C1160) * C5428 +
            (C113 * C1162 + C32514 * C1173) * C32823 +
            (C113 * C1148 + C32514 * C1164) * C5429 +
            (C113 * C1166 + C32514 * C1175) * C32793) *
               C32807) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C6291 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C32430) *
               C10305 +
           ((C832 * C352 + C32839 * C367 + C833 * C696 + C32827 * C701 +
             C834 * C1142 + C32804 * C1154) *
                C6291 +
            (C832 * C366 + C32839 * C382 + C833 * C702 + C32827 * C711 +
             C834 * C1153 + C32804 * C1169) *
                C32430) *
               C10306 +
           ((C832 * C353 + C32839 * C368 + C833 * C1143 + C32827 * C1155 +
             C834 * C1144 + C32804 * C1156) *
                C6291 +
            (C832 * C369 + C32839 * C383 + C833 * C1157 + C32827 * C1170 +
             C834 * C1158 + C32804 * C1171) *
                C32430) *
               C32807) *
              C32491 * C32477 * C110 -
          (((C834 * C1162 + C32804 * C1173 + C833 * C1161 + C32827 * C1172 +
             C832 * C371 + C32839 * C384) *
                C32430 +
            (C834 * C1146 + C32804 * C1160 + C833 * C1145 + C32827 * C1159 +
             C832 * C354 + C32839 * C370) *
                C6291) *
               C32807 +
           ((C1543 + C1544 + C1545) * C32430 +
            (C1546 + C1547 + C1548) * C6291) *
               C10306 +
           ((C880 + C879 + C878) * C32430 + (C877 + C876 + C875) * C6291) *
               C10305) *
              C32491 * C32477 * C111 +
          ((C895 * C6291 + C896 * C32430) * C10305 +
           ((C1542 + C1541 + C1540) * C6291 +
            (C1539 + C1538 + C1537) * C32430) *
               C10306 +
           ((C832 * C355 + C32839 * C372 + C833 * C1147 + C32827 * C1163 +
             C834 * C1148 + C32804 * C1164) *
                C6291 +
            (C832 * C373 + C32839 * C385 + C833 * C1165 + C32827 * C1174 +
             C834 * C1166 + C32804 * C1175) *
                C32430) *
               C32807) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C6291 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C32430) *
               C10305 +
           ((C832 * C352 + C32839 * C367 + C833 * C696 + C32827 * C701 +
             C834 * C1142 + C32804 * C1154) *
                C6291 +
            (C832 * C366 + C32839 * C382 + C833 * C702 + C32827 * C711 +
             C834 * C1153 + C32804 * C1169) *
                C32430) *
               C10306 +
           ((C832 * C353 + C32839 * C368 + C833 * C1143 + C32827 * C1155 +
             C834 * C1144 + C32804 * C1156) *
                C6291 +
            (C832 * C369 + C32839 * C383 + C833 * C1157 + C32827 * C1170 +
             C834 * C1158 + C32804 * C1171) *
                C32430) *
               C32807) *
              C32491 * C239 -
          (((C834 * C6431 + C32804 * C6434 + C833 * C1158 + C32827 * C1171 +
             C832 * C1157 + C32839 * C1170) *
                C32430 +
            (C834 * C6425 + C32804 * C6429 + C833 * C1144 + C32827 * C1156 +
             C832 * C1143 + C32839 * C1155) *
                C6291) *
               C32807 +
           ((C834 * C1698 + C32804 * C1703 + C833 * C1153 + C32827 * C1169 +
             C832 * C702 + C32839 * C711) *
                C32430 +
            (C834 * C1694 + C32804 * C1697 + C833 * C1142 + C32827 * C1154 +
             C832 * C696 + C32839 * C701) *
                C6291) *
               C10306 +
           ((C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
             C832 * C261 + C32839 * C277) *
                C32430 +
            (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
             C832 * C247 + C32839 * C262) *
                C6291) *
               C10305) *
              C32491 * C240 +
          (((C832 * C248 + C32839 * C263 + C833 * C1008 + C32827 * C1017 +
             C834 * C1009 + C32804 * C1018) *
                C6291 +
            (C832 * C264 + C32839 * C278 + C833 * C1016 + C32827 * C1026 +
             C834 * C1019 + C32804 * C1027) *
                C32430) *
               C10305 +
           ((C832 * C1142 + C32839 * C1154 + C833 * C1694 + C32827 * C1697 +
             C834 * C6424 + C32804 * C6428) *
                C6291 +
            (C832 * C1153 + C32839 * C1169 + C833 * C1698 + C32827 * C1703 +
             C834 * C6427 + C32804 * C6433) *
                C32430) *
               C10306 +
           ((C832 * C1144 + C32839 * C1156 + C833 * C6425 + C32827 * C6429 +
             C834 * C6426 + C32804 * C6430) *
                C6291 +
            (C832 * C1158 + C32839 * C1171 + C833 * C6431 + C32827 * C6434 +
             C834 * C6432 + C32804 * C6435) *
                C32430) *
               C32807) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C6291 +
            (C113 * C127 + C32514 * C140) * C32430) *
               C11958 +
           (C2110 * C6291 + C2111 * C32430) * C11959 +
           (C2112 * C6291 + C2113 * C32430) * C11960 +
           (C2119 * C6291 + C2118 * C32430) * C11961 +
           ((C113 * C2060 + C32514 * C2069) * C6291 +
            (C113 * C2070 + C32514 * C2078) * C32430) *
               C11962) *
              C32491 * C32477 * C110 -
          (((C113 * C2072 + C32514 * C2079) * C32430 +
            (C113 * C2061 + C32514 * C2071) * C6291) *
               C11962 +
           (C2116 * C32430 + C2117 * C6291) * C11961 +
           (C1833 * C32430 + C1832 * C6291) * C11960 +
           (C613 * C32430 + C614 * C6291) * C11959 +
           (C169 * C32430 + C168 * C6291) * C11958) *
              C32491 * C32477 * C111 +
          ((C170 * C6291 + C171 * C32430) * C11958 +
           (C612 * C6291 + C611 * C32430) * C11959 +
           (C1834 * C6291 + C1835 * C32430) * C11960 +
           (C2115 * C6291 + C2114 * C32430) * C11961 +
           ((C113 * C2062 + C32514 * C2073) * C6291 +
            (C113 * C2074 + C32514 * C2080) * C32430) *
               C11962) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C6291 +
            (C113 * C127 + C32514 * C140) * C32430) *
               C11958 +
           (C2110 * C6291 + C2111 * C32430) * C11959 +
           (C2112 * C6291 + C2113 * C32430) * C11960 +
           (C2119 * C6291 + C2118 * C32430) * C11961 +
           ((C113 * C2060 + C32514 * C2069) * C6291 +
            (C113 * C2070 + C32514 * C2078) * C32430) *
               C11962) *
              C32491 * C239 -
          (((C113 * C7031 + C32514 * C7034) * C32430 +
            (C113 * C7025 + C32514 * C7029) * C6291) *
               C11962 +
           ((C113 * C2620 + C32514 * C2625) * C32430 +
            (C113 * C2616 + C32514 * C2619) * C6291) *
               C11961 +
           (C2648 * C32430 + C2647 * C6291) * C11960 +
           (C2646 * C32430 + C2645 * C6291) * C11959 +
           ((C113 * C261 + C32514 * C277) * C32430 +
            (C113 * C247 + C32514 * C262) * C6291) *
               C11958) *
              C32491 * C240 +
          (((C113 * C248 + C32514 * C263) * C6291 +
            (C113 * C264 + C32514 * C278) * C32430) *
               C11958 +
           ((C113 * C1142 + C32514 * C1154) * C6291 +
            (C113 * C1153 + C32514 * C1169) * C32430) *
               C11959 +
           ((C113 * C1144 + C32514 * C1156) * C6291 +
            (C113 * C1158 + C32514 * C1171) * C32430) *
               C11960 +
           ((C113 * C7024 + C32514 * C7028) * C6291 +
            (C113 * C7027 + C32514 * C7033) * C32430) *
               C11961 +
           ((C113 * C7026 + C32514 * C7030) * C6291 +
            (C113 * C7032 + C32514 * C7035) * C32430) *
               C11962) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
              C5426 * C248 + C32804 * C263) *
                 C31559 +
             (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
              C5426 * C264 + C32804 * C278) *
                 C32754 +
             (C5467 + C5468 + C5469) * C31540 +
             (C5470 + C5471 + C5472) * C32440) *
                C32774 +
            ((C7073 + C7074 + C7075) * C31559 +
             (C7076 + C7077 + C7078) * C32754 +
             (C6072 + C6071 + C6070) * C31540 +
             (C6069 + C6068 + C6067) * C32440) *
                C32619) *
               C32491 * C470 -
           (((C9038 + C9039 + C9040) * C32440 +
             (C9041 + C9042 + C9043) * C31540 +
             (C7595 + C7594 + C7593) * C32754 +
             (C7592 + C7591 + C7590) * C31559) *
                C32619 +
            ((C5885 + C5886 + C5887) * C32440 +
             (C5888 + C5889 + C5890) * C31540 +
             (C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
              C5424 * C261 + C5418 * C277) *
                 C32754 +
             (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
              C5424 * C247 + C5418 * C262) *
                 C31559) *
                C32774) *
               C32491 * C471) *
              C472 +
          ((((C5890 + C5889 + C5888) * C31559 +
             (C5887 + C5886 + C5885) * C32754 +
             (C5884 + C5883 + C5882) * C31540 +
             (C5881 + C5880 + C5879) * C32440) *
                C32774 +
            ((C9043 + C9042 + C9041) * C31559 +
             (C9040 + C9039 + C9038) * C32754 +
             (C5424 * C698 + C5418 * C705 + C5425 * C1140 + C5419 * C1150 +
              C5426 * C1696 + C32804 * C1701) *
                 C31540 +
             (C5424 * C706 + C5418 * C713 + C5425 * C1149 + C5419 * C1167 +
              C5426 * C1702 + C32804 * C1705) *
                 C32440) *
                C32619) *
               C32491 * C471 -
           (((C6061 + C6062 + C6063) * C32440 +
             (C6064 + C6065 + C6066) * C31540 +
             (C6067 + C6068 + C6069) * C32754 +
             (C6070 + C6071 + C6072) * C31559) *
                C32619 +
            ((C5478 + C5477 + C5476) * C32440 +
             (C5475 + C5474 + C5473) * C31540 +
             (C5472 + C5471 + C5470) * C32754 +
             (C5469 + C5468 + C5467) * C31559) *
                C32774) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C2758 +
             (C113 * C127 + C32514 * C140) * C2752 + C168 * C2759 +
             C169 * C2753 + C170 * C2760 + C171 * C2754 + C172 * C2761 +
             C173 * C32808) *
                C32774 +
            (C3769 + C3770 + C3771 + C3772 + C3773 + C3774 + C3775 + C3776) *
                C32619) *
               C32491 * C470 -
           ((C3919 * C32808 + C3920 * C2761 + C2305 * C2754 + C2306 * C2760 +
             C2307 * C2753 + C2308 * C2759 + C2646 * C2752 + C2645 * C2758) *
                C32619 +
            (C497 * C32808 + C498 * C2761 + C499 * C2754 + C500 * C2760 +
             C501 * C2753 + C502 * C2759 +
             (C113 * C261 + C32514 * C277) * C2752 +
             (C113 * C247 + C32514 * C262) * C2758) *
                C32774) *
               C32491 * C471) *
              C472 +
          (((C502 * C2758 + C501 * C2752 + C500 * C2759 + C499 * C2753 +
             C498 * C2760 + C497 * C2754 + C496 * C2761 + C495 * C32808) *
                C32774 +
            (C2308 * C2758 + C2307 * C2752 + C2306 * C2759 + C2305 * C2753 +
             C3920 * C2760 + C3919 * C2754 +
             (C113 * C700 + C32514 * C709) * C2761 +
             (C113 * C710 + C32514 * C715) * C32808) *
                C32619) *
               C32491 * C471 -
           ((C607 * C32808 + C608 * C2761 + C609 * C2754 + C610 * C2760 +
             C611 * C2753 + C612 * C2759 + C613 * C2752 + C614 * C2758) *
                C32619 +
            (C175 * C32808 + C174 * C2761 + C173 * C2754 + C172 * C2760 +
             C171 * C2753 + C170 * C2759 + C169 * C2752 + C168 * C2758) *
                C32774) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C31559 +
             (C113 * C127 + C32514 * C140) * C32754 + C168 * C31540 +
             C169 * C32440) *
                C13591 +
            (C13792 + C13793 + C13794 + C13795) * C13592 + C13812 * C13593 +
            C13813 * C32820) *
               C32491 * C470 -
           ((C13948 * C32440 + C13949 * C31540 + C12406 * C32754 +
             C12405 * C31559) *
                C32820 +
            (C2303 * C32440 + C2304 * C31540 + C2648 * C32754 +
             C2647 * C31559) *
                C13593 +
            (C2307 * C32440 + C2308 * C31540 + C2646 * C32754 +
             C2645 * C31559) *
                C13592 +
            (C501 * C32440 + C502 * C31540 +
             (C113 * C261 + C32514 * C277) * C32754 +
             (C113 * C247 + C32514 * C262) * C31559) *
                C13591) *
               C32491 * C471) *
              C472 +
          (((C502 * C31559 + C501 * C32754 + C500 * C31540 + C499 * C32440) *
                C13591 +
            (C2308 * C31559 + C2307 * C32754 + C2306 * C31540 +
             C2305 * C32440) *
                C13592 +
            (C2304 * C31559 + C2303 * C32754 + C2302 * C31540 +
             C2301 * C32440) *
                C13593 +
            (C13949 * C31559 + C13948 * C32754 +
             (C113 * C2618 + C32514 * C2623) * C31540 +
             (C113 * C2624 + C32514 * C2627) * C32440) *
                C32820) *
               C32491 * C471 -
           ((C2114 * C32440 + C2115 * C31540 + C2116 * C32754 +
             C2117 * C31559) *
                C32820 +
            (C1835 * C32440 + C1834 * C31540 + C1833 * C32754 +
             C1832 * C31559) *
                C13593 +
            (C611 * C32440 + C612 * C31540 + C613 * C32754 + C614 * C31559) *
                C13592 +
            (C171 * C32440 + C170 * C31540 + C169 * C32754 + C168 * C31559) *
                C13591) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
              C5426 * C248 + C32804 * C263) *
                 C31559 +
             (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
              C5426 * C264 + C32804 * C278) *
                 C32754 +
             (C5467 + C5468 + C5469) * C31540 +
             (C5470 + C5471 + C5472) * C32440) *
                C32774 +
            ((C7073 + C7074 + C7075) * C31559 +
             (C7076 + C7077 + C7078) * C32754 + C9242 * C31540 +
             C9243 * C32440) *
                C32619) *
               C584 -
           (((C7415 + C7414 + C7413) * C32440 +
             (C7412 + C7411 + C7410) * C31540 +
             (C7084 + C7083 + C7082) * C32754 +
             (C7081 + C7080 + C7079) * C31559) *
                C32619 +
            (C9244 * C32440 + C9245 * C31540 +
             (C7078 + C7077 + C7076) * C32754 +
             (C7075 + C7074 + C7073) * C31559) *
                C32774) *
               C585) *
              C470 +
          ((((C7590 + C7591 + C7592) * C31559 +
             (C7593 + C7594 + C7595) * C32754 +
             (C9043 + C9042 + C9041) * C31540 +
             (C9040 + C9039 + C9038) * C32440) *
                C32774 +
            ((C7596 + C7597 + C7598) * C31559 +
             (C7599 + C7600 + C7601) * C32754 +
             (C5424 * C1145 + C5418 * C1159 + C5425 * C1146 + C5419 * C1160 +
              C5426 * C7243 + C32804 * C7244) *
                 C31540 +
             (C5424 * C1161 + C5418 * C1172 + C5425 * C1162 + C5419 * C1173 +
              C5426 * C7245 + C32804 * C7246) *
                 C32440) *
                C32619) *
               C585 -
           (((C9038 + C9039 + C9040) * C32440 +
             (C9041 + C9042 + C9043) * C31540 +
             (C7595 + C7594 + C7593) * C32754 +
             (C7592 + C7591 + C7590) * C31559) *
                C32619 +
            ((C5885 + C5886 + C5887) * C32440 +
             (C5888 + C5889 + C5890) * C31540 +
             (C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
              C5424 * C261 + C5418 * C277) *
                 C32754 +
             (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
              C5424 * C247 + C5418 * C262) *
                 C31559) *
                C32774) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C2758 +
             (C113 * C127 + C32514 * C140) * C2752 + C168 * C2759 +
             C169 * C2753 + C170 * C2760 + C171 * C2754 + C172 * C2761 +
             C173 * C32808) *
                C32774 +
            (C3769 + C3770 + C3771 + C3772 + C3773 + C3774 + C3775 + C3776) *
                C32619) *
               C584 -
           ((C3777 + C3778 + C3779 + C3780 + C3781 + C3782 + C3783 + C3784) *
                C32619 +
            (C3776 + C3775 + C3774 + C3773 + C3772 + C3771 + C3770 + C3769) *
                C32774) *
               C585) *
              C470 +
          (((C4189 + C4190 + C4191 + C4192 + C4193 + C4194 + C4195 + C4196) *
                C32774 +
            (C2647 * C2758 + C2648 * C2752 + C2304 * C2759 + C2303 * C2753 +
             C2302 * C2760 + C2301 * C2754 +
             (C113 * C2280 + C32514 * C2281) * C2761 +
             (C113 * C2282 + C32514 * C2283) * C32808) *
                C32619) *
               C585 -
           ((C4196 + C4195 + C4194 + C4193 + C4192 + C4191 + C4190 + C4189) *
                C32619 +
            (C497 * C32808 + C498 * C2761 + C499 * C2754 + C500 * C2760 +
             C501 * C2753 + C502 * C2759 +
             (C113 * C261 + C32514 * C277) * C2752 +
             (C113 * C247 + C32514 * C262) * C2758) *
                C32774) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C31559 +
             (C113 * C127 + C32514 * C140) * C32754 + C168 * C31540 +
             C169 * C32440) *
                C13591 +
            (C13792 + C13793 + C13794 + C13795) * C13592 + C13812 * C13593 +
            C13813 * C32820) *
               C584 -
           ((C13804 + C13805 + C13806 + C13807) * C32820 +
            (C13803 + C13802 + C13801 + C13800) * C13593 +
            (C13799 + C13798 + C13797 + C13796) * C13592 +
            (C13795 + C13794 + C13793 + C13792) * C13591) *
               C585) *
              C470 +
          (((C14222 + C14223 + C14224 + C14225) * C13591 +
            (C14226 + C14227 + C14228 + C14229) * C13592 +
            (C14230 + C14231 + C14232 + C14233) * C13593 +
            (C12407 * C31559 + C12408 * C32754 +
             (C113 * C12202 + C32514 * C12203) * C31540 +
             (C113 * C12204 + C32514 * C12205) * C32440) *
                C32820) *
               C585 -
           ((C14233 + C14232 + C14231 + C14230) * C32820 +
            (C14229 + C14228 + C14227 + C14226) * C13593 +
            (C14225 + C14224 + C14223 + C14222) * C13592 +
            (C501 * C32440 + C502 * C31540 +
             (C113 * C261 + C32514 * C277) * C32754 +
             (C113 * C247 + C32514 * C262) * C31559) *
                C13591) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C32514 * C126) * C2758 +
                (C113 * C127 + C32514 * C140) * C2752 + C168 * C2759 +
                C169 * C2753 + C170 * C2760 + C171 * C2754 + C172 * C2761 +
                C173 * C32808) *
                   C32774 +
               (C2110 * C2758 + C2111 * C2752 + C614 * C2759 + C613 * C2753 +
                C612 * C2760 + C611 * C2754 + C610 * C2761 + C609 * C32808) *
                   C32619) *
                  C32491 * C32477 * C110 -
              ((C607 * C32808 + C608 * C2761 + C609 * C2754 + C610 * C2760 +
                C611 * C2753 + C612 * C2759 + C613 * C2752 + C614 * C2758) *
                   C32619 +
               (C175 * C32808 + C174 * C2761 + C173 * C2754 + C172 * C2760 +
                C171 * C2753 + C170 * C2759 + C169 * C2752 + C168 * C2758) *
                   C32774) *
                  C32491 * C32477 * C111 +
              ((C170 * C2758 + C171 * C2752 + C172 * C2759 + C173 * C2753 +
                C174 * C2760 + C175 * C2754 + C177 * C2761 + C176 * C32808) *
                   C32774 +
               (C612 * C2758 + C611 * C2752 + C610 * C2759 + C609 * C2753 +
                C608 * C2760 + C607 * C2754 +
                (C113 * C586 + C32514 * C587) * C2761 +
                (C113 * C588 + C32514 * C589) * C32808) *
                   C32619) *
                  C32491 * C32477 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C32514 * C126) * C2758 +
                (C113 * C127 + C32514 * C140) * C2752 + C168 * C2759 +
                C169 * C2753 + C170 * C2760 + C171 * C2754 + C172 * C2761 +
                C173 * C32808) *
                   C32774 +
               (C2110 * C2758 + C2111 * C2752 + C614 * C2759 + C613 * C2753 +
                C612 * C2760 + C611 * C2754 + C610 * C2761 + C609 * C32808) *
                   C32619) *
                  C32491 * C239 -
              (((C113 * C708 + C32514 * C714) * C32808 +
                (C113 * C699 + C32514 * C707) * C2761 + C2305 * C2754 +
                C2306 * C2760 + C2307 * C2753 + C2308 * C2759 + C2646 * C2752 +
                C2645 * C2758) *
                   C32619 +
               (C497 * C32808 + C498 * C2761 + C499 * C2754 + C500 * C2760 +
                C501 * C2753 + C502 * C2759 +
                (C113 * C261 + C32514 * C277) * C2752 +
                (C113 * C247 + C32514 * C262) * C2758) *
                   C32774) *
                  C32491 * C240 +
              (((C113 * C248 + C32514 * C263) * C2758 +
                (C113 * C264 + C32514 * C278) * C2752 +
                (C113 * C249 + C32514 * C265) * C2759 +
                (C113 * C266 + C32514 * C279) * C2753 +
                (C113 * C250 + C32514 * C267) * C2760 +
                (C113 * C268 + C32514 * C280) * C2754 +
                (C113 * C251 + C32514 * C269) * C2761 +
                (C113 * C270 + C32514 * C281) * C32808) *
                   C32774 +
               ((C113 * C1142 + C32514 * C1154) * C2758 +
                (C113 * C1153 + C32514 * C1169) * C2752 +
                (C113 * C1141 + C32514 * C1152) * C2759 +
                (C113 * C1151 + C32514 * C1168) * C2753 +
                (C113 * C1140 + C32514 * C1150) * C2760 +
                (C113 * C1149 + C32514 * C1167) * C2754 +
                (C113 * C1508 + C32514 * C1509) * C2761 +
                (C113 * C1510 + C32514 * C1511) * C32808) *
                   C32619) *
                  C32491 * C241) *
             C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C2758 +
            (C113 * C127 + C32514 * C140) * C2752 + C168 * C2759 +
            C169 * C2753 + C170 * C2760 + C171 * C2754 + C172 * C2761 +
            C173 * C32808) *
               C32774 +
           (C3769 + C3770 + C3771 + C3772 + C3773 + C3774 + C3775 + C3776) *
               C32619) *
              C345 -
          ((C3777 + C3778 + C3779 + C3780 + C3781 + C3782 + C3783 + C3784) *
               C32619 +
           (C3776 + C3775 + C3774 + C3773 + C3772 + C3771 + C3770 + C3769) *
               C32774) *
              C346 +
          ((C3784 + C3783 + C3782 + C3781 + C3780 + C3779 + C3778 + C3777) *
               C32774 +
           (C2119 * C2758 + C2118 * C2752 + C2117 * C2759 + C2116 * C2753 +
            C2115 * C2760 + C2114 * C2754 +
            (C113 * C2454 + C32514 * C2455) * C2761 +
            (C113 * C2456 + C32514 * C2457) * C32808) *
               C32619) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C31559 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32754 +
            (C5467 + C5468 + C5469) * C31540 +
            (C5470 + C5471 + C5472) * C32440) *
               C32774 +
           ((C7073 + C7074 + C7075) * C31559 +
            (C7076 + C7077 + C7078) * C32754 +
            (C6072 + C6071 + C6070) * C31540 +
            (C6069 + C6068 + C6067) * C32440) *
               C32619) *
              C32491 * C32477 * C110 -
          (((C6061 + C6062 + C6063) * C32440 +
            (C6064 + C6065 + C6066) * C31540 +
            (C6067 + C6068 + C6069) * C32754 +
            (C6070 + C6071 + C6072) * C31559) *
               C32619 +
           ((C5478 + C5477 + C5476) * C32440 +
            (C5475 + C5474 + C5473) * C31540 +
            (C5472 + C5471 + C5470) * C32754 +
            (C5469 + C5468 + C5467) * C31559) *
               C32774) *
              C32491 * C32477 * C111 +
          ((C5487 * C31559 + C5488 * C32754 + (C5484 + C5483 + C5482) * C31540 +
            (C5481 + C5480 + C5479) * C32440) *
               C32774 +
           ((C6066 + C6065 + C6064) * C31559 +
            (C6063 + C6062 + C6061) * C32754 +
            (C5424 * C349 + C5418 * C361 + C5425 * C699 + C5419 * C707 +
             C5426 * C1508 + C32804 * C1509) *
                C31540 +
            (C5424 * C360 + C5418 * C379 + C5425 * C708 + C5419 * C714 +
             C5426 * C1510 + C32804 * C1511) *
                C32440) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C31559 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32754 +
            (C5467 + C5468 + C5469) * C31540 +
            (C5470 + C5471 + C5472) * C32440) *
               C32774 +
           ((C7073 + C7074 + C7075) * C31559 +
            (C7076 + C7077 + C7078) * C32754 +
            (C6072 + C6071 + C6070) * C31540 +
            (C6069 + C6068 + C6067) * C32440) *
               C32619) *
              C32491 * C239 -
          (((C5426 * C1700 + C32804 * C1704 + C5425 * C1151 + C5419 * C1168 +
             C5424 * C704 + C5418 * C712) *
                C32440 +
            (C5426 * C1695 + C32804 * C1699 + C5425 * C1141 + C5419 * C1152 +
             C5424 * C697 + C5418 * C703) *
                C31540 +
            (C7595 + C7594 + C7593) * C32754 +
            (C7592 + C7591 + C7590) * C31559) *
               C32619 +
           ((C5885 + C5886 + C5887) * C32440 +
            (C5888 + C5889 + C5890) * C31540 +
            (C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
             C5424 * C261 + C5418 * C277) *
                C32754 +
            (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
             C5424 * C247 + C5418 * C262) *
                C31559) *
               C32774) *
              C32491 * C240 +
          (((C5424 * C248 + C5418 * C263 + C5425 * C1008 + C5419 * C1017 +
             C5426 * C1009 + C32804 * C1018) *
                C31559 +
            (C5424 * C264 + C5418 * C278 + C5425 * C1016 + C5419 * C1026 +
             C5426 * C1019 + C32804 * C1027) *
                C32754 +
            (C5424 * C249 + C5418 * C265 + C5425 * C1007 + C5419 * C1015 +
             C5426 * C1010 + C32804 * C1020) *
                C31540 +
            (C5424 * C266 + C5418 * C279 + C5425 * C1014 + C5419 * C1025 +
             C5426 * C1021 + C32804 * C1028) *
                C32440) *
               C32774 +
           ((C5424 * C1142 + C5418 * C1154 + C5425 * C1694 + C5419 * C1697 +
             C5426 * C6424 + C32804 * C6428) *
                C31559 +
            (C5424 * C1153 + C5418 * C1169 + C5425 * C1698 + C5419 * C1703 +
             C5426 * C6427 + C32804 * C6433) *
                C32754 +
            (C5424 * C1141 + C5418 * C1152 + C5425 * C1695 + C5419 * C1699 +
             C5426 * C6604 + C32804 * C6605) *
                C31540 +
            (C5424 * C1151 + C5418 * C1168 + C5425 * C1700 + C5419 * C1704 +
             C5426 * C6606 + C32804 * C6607) *
                C32440) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C31559 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32754 +
            (C5467 + C5468 + C5469) * C31540 +
            (C5470 + C5471 + C5472) * C32440) *
               C32774 +
           ((C7073 + C7074 + C7075) * C31559 +
            (C7076 + C7077 + C7078) * C32754 +
            (C6072 + C6071 + C6070) * C31540 +
            (C6069 + C6068 + C6067) * C32440) *
               C32619) *
              C345 -
          (((C7415 + C7414 + C7413) * C32440 +
            (C7412 + C7411 + C7410) * C31540 +
            (C7084 + C7083 + C7082) * C32754 +
            (C7081 + C7080 + C7079) * C31559) *
               C32619 +
           ((C6067 + C6068 + C6069) * C32440 +
            (C6070 + C6071 + C6072) * C31540 +
            (C7078 + C7077 + C7076) * C32754 +
            (C7075 + C7074 + C7073) * C31559) *
               C32774) *
              C346 +
          ((C7093 * C31559 + C7094 * C32754 + (C7410 + C7411 + C7412) * C31540 +
            (C7413 + C7414 + C7415) * C32440) *
               C32774 +
           ((C7090 + C7089 + C7088) * C31559 +
            (C7087 + C7086 + C7085) * C32754 +
            (C5424 * C2058 + C5418 * C2066 + C5425 * C2617 + C5419 * C2621 +
             C5426 * C7393 + C32804 * C7394) *
                C31540 +
            (C5424 * C2065 + C5418 * C2076 + C5425 * C2622 + C5419 * C2626 +
             C5426 * C7395 + C32804 * C7396) *
                C32440) *
               C32619) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C31559 +
            (C113 * C127 + C32514 * C140) * C32754 + C168 * C31540 +
            C169 * C32440) *
               C13591 +
           (C2110 * C31559 + C2111 * C32754 + C614 * C31540 + C613 * C32440) *
               C13592 +
           (C2112 * C31559 + C2113 * C32754 + C1832 * C31540 + C1833 * C32440) *
               C13593 +
           (C2119 * C31559 + C2118 * C32754 + C2117 * C31540 + C2116 * C32440) *
               C32820) *
              C32491 * C32477 * C110 -
          ((C2114 * C32440 + C2115 * C31540 + C2116 * C32754 + C2117 * C31559) *
               C32820 +
           (C1835 * C32440 + C1834 * C31540 + C1833 * C32754 + C1832 * C31559) *
               C13593 +
           (C611 * C32440 + C612 * C31540 + C613 * C32754 + C614 * C31559) *
               C13592 +
           (C171 * C32440 + C170 * C31540 + C169 * C32754 + C168 * C31559) *
               C13591) *
              C32491 * C32477 * C111 +
          ((C170 * C31559 + C171 * C32754 + C172 * C31540 + C173 * C32440) *
               C13591 +
           (C612 * C31559 + C611 * C32754 + C610 * C31540 + C609 * C32440) *
               C13592 +
           (C1834 * C31559 + C1835 * C32754 + C1837 * C31540 + C1836 * C32440) *
               C13593 +
           (C2115 * C31559 + C2114 * C32754 +
            (C113 * C2454 + C32514 * C2455) * C31540 +
            (C113 * C2456 + C32514 * C2457) * C32440) *
               C32820) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C31559 +
            (C113 * C127 + C32514 * C140) * C32754 + C168 * C31540 +
            C169 * C32440) *
               C13591 +
           (C2110 * C31559 + C2111 * C32754 + C614 * C31540 + C613 * C32440) *
               C13592 +
           (C2112 * C31559 + C2113 * C32754 + C1832 * C31540 + C1833 * C32440) *
               C13593 +
           (C2119 * C31559 + C2118 * C32754 + C2117 * C31540 + C2116 * C32440) *
               C32820) *
              C32491 * C239 -
          (((C113 * C2622 + C32514 * C2626) * C32440 +
            (C113 * C2617 + C32514 * C2621) * C31540 + C12406 * C32754 +
            C12405 * C31559) *
               C32820 +
           (C2303 * C32440 + C2304 * C31540 + C2648 * C32754 + C2647 * C31559) *
               C13593 +
           (C2307 * C32440 + C2308 * C31540 + C2646 * C32754 + C2645 * C31559) *
               C13592 +
           (C501 * C32440 + C502 * C31540 +
            (C113 * C261 + C32514 * C277) * C32754 +
            (C113 * C247 + C32514 * C262) * C31559) *
               C13591) *
              C32491 * C240 +
          (((C113 * C248 + C32514 * C263) * C31559 +
            (C113 * C264 + C32514 * C278) * C32754 +
            (C113 * C249 + C32514 * C265) * C31540 +
            (C113 * C266 + C32514 * C279) * C32440) *
               C13591 +
           ((C113 * C1142 + C32514 * C1154) * C31559 +
            (C113 * C1153 + C32514 * C1169) * C32754 +
            (C113 * C1141 + C32514 * C1152) * C31540 +
            (C113 * C1151 + C32514 * C1168) * C32440) *
               C13592 +
           ((C113 * C1144 + C32514 * C1156) * C31559 +
            (C113 * C1158 + C32514 * C1171) * C32754 +
            (C113 * C1146 + C32514 * C1160) * C31540 +
            (C113 * C1162 + C32514 * C1173) * C32440) *
               C13593 +
           ((C113 * C7024 + C32514 * C7028) * C31559 +
            (C113 * C7027 + C32514 * C7033) * C32754 +
            (C113 * C7393 + C32514 * C7394) * C31540 +
            (C113 * C7395 + C32514 * C7396) * C32440) *
               C32820) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C31559 +
            (C113 * C127 + C32514 * C140) * C32754 + C168 * C31540 +
            C169 * C32440) *
               C13591 +
           (C13792 + C13793 + C13794 + C13795) * C13592 + C13812 * C13593 +
           C13813 * C32820) *
              C345 -
          ((C13804 + C13805 + C13806 + C13807) * C32820 +
           (C13803 + C13802 + C13801 + C13800) * C13593 +
           (C13799 + C13798 + C13797 + C13796) * C13592 +
           (C13795 + C13794 + C13793 + C13792) * C13591) *
              C346 +
          (C13812 * C13591 + C13813 * C13592 +
           (C13807 + C13806 + C13805 + C13804) * C13593 +
           (C12115 * C31559 + C12114 * C32754 +
            (C113 * C12288 + C32514 * C12289) * C31540 +
            (C113 * C12290 + C32514 * C12291) * C32440) *
               C32820) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
              C5426 * C248 + C32804 * C263) *
                 C31559 +
             (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
              C5426 * C264 + C32804 * C278) *
                 C32754 +
             (C5467 + C5468 + C5469) * C31540 +
             (C5470 + C5471 + C5472) * C32440) *
                C32774 +
            ((C7073 + C7074 + C7075) * C31559 +
             (C7076 + C7077 + C7078) * C32754 + C9242 * C31540 +
             C9243 * C32440) *
                C32619) *
               C584 -
           (((C7415 + C7414 + C7413) * C32440 +
             (C7412 + C7411 + C7410) * C31540 +
             (C7084 + C7083 + C7082) * C32754 +
             (C7081 + C7080 + C7079) * C31559) *
                C32619 +
            (C9244 * C32440 + C9245 * C31540 +
             (C7078 + C7077 + C7076) * C32754 +
             (C7075 + C7074 + C7073) * C31559) *
                C32774) *
               C585) *
              C32477 * C472 +
          (((C9242 * C31559 + C9243 * C32754 +
             (C6066 + C6065 + C6064) * C31540 +
             (C6063 + C6062 + C6061) * C32440) *
                C32774 +
            ((C7410 + C7411 + C7412) * C31559 +
             (C7413 + C7414 + C7415) * C32754 +
             (C5424 * C355 + C5418 * C372 + C5425 * C1147 + C5419 * C1163 +
              C5426 * C1148 + C32804 * C1164) *
                 C31540 +
             (C5424 * C373 + C5418 * C385 + C5425 * C1165 + C5419 * C1174 +
              C5426 * C1166 + C32804 * C1175) *
                 C32440) *
                C32619) *
               C585 -
           (((C6061 + C6062 + C6063) * C32440 +
             (C6064 + C6065 + C6066) * C31540 + C9244 * C32754 +
             C9245 * C31559) *
                C32619 +
            ((C5478 + C5477 + C5476) * C32440 +
             (C5475 + C5474 + C5473) * C31540 +
             (C5472 + C5471 + C5470) * C32754 +
             (C5469 + C5468 + C5467) * C31559) *
                C32774) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C2758 +
             (C113 * C127 + C32514 * C140) * C2752 + C168 * C2759 +
             C169 * C2753 + C170 * C2760 + C171 * C2754 + C172 * C2761 +
             C173 * C32808) *
                C32774 +
            (C3769 + C3770 + C3771 + C3772 + C3773 + C3774 + C3775 + C3776) *
                C32619) *
               C584 -
           ((C3777 + C3778 + C3779 + C3780 + C3781 + C3782 + C3783 + C3784) *
                C32619 +
            (C3776 + C3775 + C3774 + C3773 + C3772 + C3771 + C3770 + C3769) *
                C32774) *
               C585) *
              C32477 * C472 +
          (((C4051 + C4052 + C4053 + C4054 + C4055 + C4056 + C4057 + C4058) *
                C32774 +
            (C1832 * C2758 + C1833 * C2752 + C1834 * C2759 + C1835 * C2753 +
             C1837 * C2760 + C1836 * C2754 +
             (C113 * C357 + C32514 * C376) * C2761 +
             (C113 * C377 + C32514 * C387) * C32808) *
                C32619) *
               C585 -
           ((C4058 + C4057 + C4056 + C4055 + C4054 + C4053 + C4052 + C4051) *
                C32619 +
            (C175 * C32808 + C174 * C2761 + C173 * C2754 + C172 * C2760 +
             C171 * C2753 + C170 * C2759 + C169 * C2752 + C168 * C2758) *
                C32774) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C31559 +
             (C113 * C127 + C32514 * C140) * C32754 + C168 * C31540 +
             C169 * C32440) *
                C13591 +
            (C13792 + C13793 + C13794 + C13795) * C13592 + C13812 * C13593 +
            C13813 * C32820) *
               C584 -
           ((C13804 + C13805 + C13806 + C13807) * C32820 +
            (C13803 + C13802 + C13801 + C13800) * C13593 +
            (C13799 + C13798 + C13797 + C13796) * C13592 +
            (C13795 + C13794 + C13793 + C13792) * C13591) *
               C585) *
              C32477 * C472 +
          (((C14080 + C14081 + C14082 + C14083) * C13591 +
            (C14084 + C14085 + C14086 + C14087) * C13592 +
            (C14088 + C14089 + C14090 + C14091) * C13593 +
            (C12303 * C31559 + C12304 * C32754 +
             (C113 * C2062 + C32514 * C2073) * C31540 +
             (C113 * C2074 + C32514 * C2080) * C32440) *
                C32820) *
               C585 -
           ((C14091 + C14090 + C14089 + C14088) * C32820 +
            (C14087 + C14086 + C14085 + C14084) * C13593 +
            (C14083 + C14082 + C14081 + C14080) * C13592 +
            (C171 * C32440 + C170 * C31540 + C169 * C32754 + C168 * C31559) *
                C13591) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C2758 +
            (C113 * C127 + C32514 * C140) * C2752 + C168 * C2759 +
            C169 * C2753 + C170 * C2760 + C171 * C2754 + C172 * C2761 +
            C173 * C32808) *
               C32774 +
           (C2110 * C2758 + C2111 * C2752 + C614 * C2759 + C613 * C2753 +
            C612 * C2760 + C611 * C2754 + C610 * C2761 + C609 * C32808) *
               C32619) *
              C32491 * C239 -
          (((C113 * C708 + C32514 * C714) * C32808 +
            (C113 * C699 + C32514 * C707) * C2761 + C2305 * C2754 +
            C2306 * C2760 + C2307 * C2753 + C2308 * C2759 + C2646 * C2752 +
            C2645 * C2758) *
               C32619 +
           (C497 * C32808 + C498 * C2761 + C499 * C2754 + C500 * C2760 +
            C501 * C2753 + C502 * C2759 +
            (C113 * C261 + C32514 * C277) * C2752 +
            (C113 * C247 + C32514 * C262) * C2758) *
               C32774) *
              C32491 * C240 +
          (((C113 * C248 + C32514 * C263) * C2758 +
            (C113 * C264 + C32514 * C278) * C2752 +
            (C113 * C249 + C32514 * C265) * C2759 +
            (C113 * C266 + C32514 * C279) * C2753 +
            (C113 * C250 + C32514 * C267) * C2760 +
            (C113 * C268 + C32514 * C280) * C2754 +
            (C113 * C251 + C32514 * C269) * C2761 +
            (C113 * C270 + C32514 * C281) * C32808) *
               C32774 +
           ((C113 * C1142 + C32514 * C1154) * C2758 +
            (C113 * C1153 + C32514 * C1169) * C2752 +
            (C113 * C1141 + C32514 * C1152) * C2759 +
            (C113 * C1151 + C32514 * C1168) * C2753 +
            (C113 * C1140 + C32514 * C1150) * C2760 +
            (C113 * C1149 + C32514 * C1167) * C2754 +
            (C113 * C1508 + C32514 * C1509) * C2761 +
            (C113 * C1510 + C32514 * C1511) * C32808) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C2758 +
            (C113 * C127 + C32514 * C140) * C2752 + C168 * C2759 +
            C169 * C2753 + C170 * C2760 + C171 * C2754 + C172 * C2761 +
            C173 * C32808) *
               C32774 +
           (C2110 * C2758 + C2111 * C2752 + C614 * C2759 + C613 * C2753 +
            C612 * C2760 + C611 * C2754 + C610 * C2761 + C609 * C32808) *
               C32619) *
              C32491 * C32477 * C110 -
          ((C607 * C32808 + C608 * C2761 + C609 * C2754 + C610 * C2760 +
            C611 * C2753 + C612 * C2759 + C613 * C2752 + C614 * C2758) *
               C32619 +
           (C175 * C32808 + C174 * C2761 + C173 * C2754 + C172 * C2760 +
            C171 * C2753 + C170 * C2759 + C169 * C2752 + C168 * C2758) *
               C32774) *
              C32491 * C32477 * C111 +
          ((C170 * C2758 + C171 * C2752 + C172 * C2759 + C173 * C2753 +
            C174 * C2760 + C175 * C2754 + C177 * C2761 + C176 * C32808) *
               C32774 +
           (C612 * C2758 + C611 * C2752 + C610 * C2759 + C609 * C2753 +
            C608 * C2760 + C607 * C2754 +
            (C113 * C586 + C32514 * C587) * C2761 +
            (C113 * C588 + C32514 * C589) * C32808) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C31559 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32754 +
            (C5467 + C5468 + C5469) * C31540 +
            (C5470 + C5471 + C5472) * C32440) *
               C32774 +
           ((C7073 + C7074 + C7075) * C31559 +
            (C7076 + C7077 + C7078) * C32754 +
            (C6072 + C6071 + C6070) * C31540 +
            (C6069 + C6068 + C6067) * C32440) *
               C32619) *
              C32491 * C32477 * C110 -
          (((C6061 + C6062 + C6063) * C32440 +
            (C6064 + C6065 + C6066) * C31540 +
            (C6067 + C6068 + C6069) * C32754 +
            (C6070 + C6071 + C6072) * C31559) *
               C32619 +
           ((C5478 + C5477 + C5476) * C32440 +
            (C5475 + C5474 + C5473) * C31540 +
            (C5472 + C5471 + C5470) * C32754 +
            (C5469 + C5468 + C5467) * C31559) *
               C32774) *
              C32491 * C32477 * C111 +
          ((C5487 * C31559 + C5488 * C32754 + (C5484 + C5483 + C5482) * C31540 +
            (C5481 + C5480 + C5479) * C32440) *
               C32774 +
           ((C6066 + C6065 + C6064) * C31559 +
            (C6063 + C6062 + C6061) * C32754 +
            (C5424 * C349 + C5418 * C361 + C5425 * C699 + C5419 * C707 +
             C5426 * C1508 + C32804 * C1509) *
                C31540 +
            (C5424 * C360 + C5418 * C379 + C5425 * C708 + C5419 * C714 +
             C5426 * C1510 + C32804 * C1511) *
                C32440) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C31559 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32754 +
            (C5467 + C5468 + C5469) * C31540 +
            (C5470 + C5471 + C5472) * C32440) *
               C32774 +
           ((C7073 + C7074 + C7075) * C31559 +
            (C7076 + C7077 + C7078) * C32754 +
            (C6072 + C6071 + C6070) * C31540 +
            (C6069 + C6068 + C6067) * C32440) *
               C32619) *
              C32491 * C239 -
          (((C5426 * C1700 + C32804 * C1704 + C5425 * C1151 + C5419 * C1168 +
             C5424 * C704 + C5418 * C712) *
                C32440 +
            (C5426 * C1695 + C32804 * C1699 + C5425 * C1141 + C5419 * C1152 +
             C5424 * C697 + C5418 * C703) *
                C31540 +
            (C7595 + C7594 + C7593) * C32754 +
            (C7592 + C7591 + C7590) * C31559) *
               C32619 +
           ((C5885 + C5886 + C5887) * C32440 +
            (C5888 + C5889 + C5890) * C31540 +
            (C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
             C5424 * C261 + C5418 * C277) *
                C32754 +
            (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
             C5424 * C247 + C5418 * C262) *
                C31559) *
               C32774) *
              C32491 * C240 +
          (((C5424 * C248 + C5418 * C263 + C5425 * C1008 + C5419 * C1017 +
             C5426 * C1009 + C32804 * C1018) *
                C31559 +
            (C5424 * C264 + C5418 * C278 + C5425 * C1016 + C5419 * C1026 +
             C5426 * C1019 + C32804 * C1027) *
                C32754 +
            (C5424 * C249 + C5418 * C265 + C5425 * C1007 + C5419 * C1015 +
             C5426 * C1010 + C32804 * C1020) *
                C31540 +
            (C5424 * C266 + C5418 * C279 + C5425 * C1014 + C5419 * C1025 +
             C5426 * C1021 + C32804 * C1028) *
                C32440) *
               C32774 +
           ((C5424 * C1142 + C5418 * C1154 + C5425 * C1694 + C5419 * C1697 +
             C5426 * C6424 + C32804 * C6428) *
                C31559 +
            (C5424 * C1153 + C5418 * C1169 + C5425 * C1698 + C5419 * C1703 +
             C5426 * C6427 + C32804 * C6433) *
                C32754 +
            (C5424 * C1141 + C5418 * C1152 + C5425 * C1695 + C5419 * C1699 +
             C5426 * C6604 + C32804 * C6605) *
                C31540 +
            (C5424 * C1151 + C5418 * C1168 + C5425 * C1700 + C5419 * C1704 +
             C5426 * C6606 + C32804 * C6607) *
                C32440) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C31559 +
            (C113 * C127 + C32514 * C140) * C32754 + C168 * C31540 +
            C169 * C32440) *
               C13591 +
           (C2110 * C31559 + C2111 * C32754 + C614 * C31540 + C613 * C32440) *
               C13592 +
           (C2112 * C31559 + C2113 * C32754 + C1832 * C31540 + C1833 * C32440) *
               C13593 +
           (C2119 * C31559 + C2118 * C32754 + C2117 * C31540 + C2116 * C32440) *
               C32820) *
              C32491 * C32477 * C110 -
          ((C2114 * C32440 + C2115 * C31540 + C2116 * C32754 + C2117 * C31559) *
               C32820 +
           (C1835 * C32440 + C1834 * C31540 + C1833 * C32754 + C1832 * C31559) *
               C13593 +
           (C611 * C32440 + C612 * C31540 + C613 * C32754 + C614 * C31559) *
               C13592 +
           (C171 * C32440 + C170 * C31540 + C169 * C32754 + C168 * C31559) *
               C13591) *
              C32491 * C32477 * C111 +
          ((C170 * C31559 + C171 * C32754 + C172 * C31540 + C173 * C32440) *
               C13591 +
           (C612 * C31559 + C611 * C32754 + C610 * C31540 + C609 * C32440) *
               C13592 +
           (C1834 * C31559 + C1835 * C32754 + C1837 * C31540 + C1836 * C32440) *
               C13593 +
           (C2115 * C31559 + C2114 * C32754 +
            (C113 * C2454 + C32514 * C2455) * C31540 +
            (C113 * C2456 + C32514 * C2457) * C32440) *
               C32820) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C31559 +
            (C113 * C127 + C32514 * C140) * C32754 + C168 * C31540 +
            C169 * C32440) *
               C13591 +
           (C2110 * C31559 + C2111 * C32754 + C614 * C31540 + C613 * C32440) *
               C13592 +
           (C2112 * C31559 + C2113 * C32754 + C1832 * C31540 + C1833 * C32440) *
               C13593 +
           (C2119 * C31559 + C2118 * C32754 + C2117 * C31540 + C2116 * C32440) *
               C32820) *
              C32491 * C239 -
          (((C113 * C2622 + C32514 * C2626) * C32440 +
            (C113 * C2617 + C32514 * C2621) * C31540 + C12406 * C32754 +
            C12405 * C31559) *
               C32820 +
           (C2303 * C32440 + C2304 * C31540 + C2648 * C32754 + C2647 * C31559) *
               C13593 +
           (C2307 * C32440 + C2308 * C31540 + C2646 * C32754 + C2645 * C31559) *
               C13592 +
           (C501 * C32440 + C502 * C31540 +
            (C113 * C261 + C32514 * C277) * C32754 +
            (C113 * C247 + C32514 * C262) * C31559) *
               C13591) *
              C32491 * C240 +
          (((C113 * C248 + C32514 * C263) * C31559 +
            (C113 * C264 + C32514 * C278) * C32754 +
            (C113 * C249 + C32514 * C265) * C31540 +
            (C113 * C266 + C32514 * C279) * C32440) *
               C13591 +
           ((C113 * C1142 + C32514 * C1154) * C31559 +
            (C113 * C1153 + C32514 * C1169) * C32754 +
            (C113 * C1141 + C32514 * C1152) * C31540 +
            (C113 * C1151 + C32514 * C1168) * C32440) *
               C13592 +
           ((C113 * C1144 + C32514 * C1156) * C31559 +
            (C113 * C1158 + C32514 * C1171) * C32754 +
            (C113 * C1146 + C32514 * C1160) * C31540 +
            (C113 * C1162 + C32514 * C1173) * C32440) *
               C13593 +
           ((C113 * C7024 + C32514 * C7028) * C31559 +
            (C113 * C7027 + C32514 * C7033) * C32754 +
            (C113 * C7393 + C32514 * C7394) * C31540 +
            (C113 * C7395 + C32514 * C7396) * C32440) *
               C32820) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C835 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C829 +
            (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
            C895 * C837 + C896 * C32793) *
               C32532 * C32491 * C470 -
           ((C1351 + C1352 + C1353) * C32793 + (C1354 + C1355 + C1356) * C837 +
            (C1357 + C1358 + C1359) * C830 + (C1360 + C1361 + C1362) * C836 +
            (C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
             C832 * C261 + C32839 * C277) *
                C829 +
            (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
             C832 * C247 + C32839 * C262) *
                C835) *
               C32532 * C32491 * C471) *
              C472 +
          (((C1362 + C1361 + C1360) * C835 + (C1359 + C1358 + C1357) * C829 +
            (C1356 + C1355 + C1354) * C836 + (C1353 + C1352 + C1351) * C830 +
            (C832 * C244 + C32839 * C256 + C833 * C251 + C32827 * C269 +
             C834 * C1322 + C32804 * C1323) *
                C837 +
            (C832 * C255 + C32839 * C274 + C833 * C270 + C32827 * C281 +
             C834 * C1324 + C32804 * C1325) *
                C32793) *
               C32532 * C32491 * C471 -
           ((C887 + C888 + C889) * C32793 + (C890 + C891 + C892) * C837 +
            (C886 + C885 + C884) * C830 + (C883 + C882 + C881) * C836 +
            (C880 + C879 + C878) * C829 + (C877 + C876 + C875) * C835) *
               C32532 * C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C114 +
            (C113 * C127 + C32514 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C32532 * C32491 * C470 -
           (C495 * C106 + C496 * C118 + C497 * C105 + C498 * C117 +
            C499 * C104 + C500 * C116 + C501 * C103 + C502 * C115 +
            (C113 * C261 + C32514 * C277) * C102 +
            (C113 * C247 + C32514 * C262) * C114) *
               C32532 * C32491 * C471) *
              C472 +
          ((C502 * C114 + C501 * C102 + C500 * C115 + C499 * C103 +
            C498 * C116 + C497 * C104 + C496 * C117 + C495 * C105 +
            (C113 * C474 + C32514 * C475) * C118 +
            (C113 * C476 + C32514 * C477) * C106) *
               C32532 * C32491 * C471 -
           (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
            C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
            C169 * C102 + C168 * C114) *
               C32532 * C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C5427 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32836 +
            (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
            C5487 * C5429 + C5488 * C32793) *
               C32532 * C32491 * C470 -
           ((C5879 + C5880 + C5881) * C32793 + (C5882 + C5883 + C5884) * C5429 +
            (C5885 + C5886 + C5887) * C32823 + (C5888 + C5889 + C5890) * C5428 +
            (C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
             C5424 * C261 + C5418 * C277) *
                C32836 +
            (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
             C5424 * C247 + C5418 * C262) *
                C5427) *
               C32532 * C32491 * C471) *
              C472 +
          (((C5890 + C5889 + C5888) * C5427 + (C5887 + C5886 + C5885) * C32836 +
            (C5884 + C5883 + C5882) * C5428 + (C5881 + C5880 + C5879) * C32823 +
            (C5424 * C244 + C5418 * C256 + C5425 * C251 + C5419 * C269 +
             C5426 * C1322 + C32804 * C1323) *
                C5429 +
            (C5424 * C255 + C5418 * C274 + C5425 * C270 + C5419 * C281 +
             C5426 * C1324 + C32804 * C1325) *
                C32793) *
               C32532 * C32491 * C471 -
           ((C5479 + C5480 + C5481) * C32793 + (C5482 + C5483 + C5484) * C5429 +
            (C5478 + C5477 + C5476) * C32823 + (C5475 + C5474 + C5473) * C5428 +
            (C5472 + C5471 + C5470) * C32836 +
            (C5469 + C5468 + C5467) * C5427) *
               C32532 * C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
             C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
             C6290 * C1009 + C6284 * C1018) *
                C6291 +
            (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
             C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
             C6290 * C1019 + C6284 * C1027) *
                C32430) *
               C32532 * C32491 * C470 -
           ((C6290 * C6356 + C6284 * C6360 + C6289 * C1019 + C6283 * C1027 +
             C6288 * C1016 + C6282 * C1026 + C6287 * C264 + C6281 * C278 +
             C6286 * C261 + C6280 * C277) *
                C32430 +
            (C6290 * C6354 + C6284 * C6357 + C6289 * C1009 + C6283 * C1018 +
             C6288 * C1008 + C6282 * C1017 + C6287 * C248 + C6281 * C263 +
             C6286 * C247 + C6280 * C262) *
                C6291) *
               C32532 * C32491 * C471) *
              C472 +
          (((C6286 * C246 + C6280 * C260 + C6287 * C249 + C6281 * C265 +
             C6288 * C1007 + C6282 * C1015 + C6289 * C1010 + C6283 * C1020 +
             C6290 * C6518 + C6284 * C6519) *
                C6291 +
            (C6286 * C259 + C6280 * C276 + C6287 * C266 + C6281 * C279 +
             C6288 * C1014 + C6282 * C1025 + C6289 * C1021 + C6283 * C1028 +
             C6290 * C6520 + C6284 * C6521) *
                C32430) *
               C32532 * C32491 * C471 -
           ((C6290 * C1021 + C6284 * C1028 + C6289 * C1014 + C6283 * C1025 +
             C6288 * C266 + C6282 * C279 + C6287 * C259 + C6281 * C276 +
             C6286 * C129 + C6280 * C141) *
                C32430 +
            (C6290 * C1010 + C6284 * C1020 + C6289 * C1007 + C6283 * C1015 +
             C6288 * C249 + C6282 * C265 + C6287 * C246 + C6281 * C260 +
             C6286 * C120 + C6280 * C128) *
                C6291) *
               C32532 * C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C5427 +
             (C113 * C127 + C32514 * C140) * C32836 + C168 * C5428 +
             C169 * C32823 + C170 * C5429 + C171 * C32793) *
                C10305 +
            (C10529 + C10530 + C10531 + C10532 + C10533 + C10534) * C10306 +
            C10551 * C32807) *
               C32491 * C470 -
           ((C2301 * C32793 + C2302 * C5429 + C2303 * C32823 + C2304 * C5428 +
             C2648 * C32836 + C2647 * C5427) *
                C32807 +
            (C2305 * C32793 + C2306 * C5429 + C2307 * C32823 + C2308 * C5428 +
             C2646 * C32836 + C2645 * C5427) *
                C10306 +
            (C499 * C32793 + C500 * C5429 + C501 * C32823 + C502 * C5428 +
             (C113 * C261 + C32514 * C277) * C32836 +
             (C113 * C247 + C32514 * C262) * C5427) *
                C10305) *
               C32491 * C471) *
              C472 +
          (((C502 * C5427 + C501 * C32836 + C500 * C5428 + C499 * C32823 +
             C498 * C5429 + C497 * C32793) *
                C10305 +
            (C2308 * C5427 + C2307 * C32836 + C2306 * C5428 + C2305 * C32823 +
             C3920 * C5429 + C3919 * C32793) *
                C10306 +
            (C2304 * C5427 + C2303 * C32836 + C2302 * C5428 + C2301 * C32823 +
             (C113 * C2280 + C32514 * C2281) * C5429 +
             (C113 * C2282 + C32514 * C2283) * C32793) *
                C32807) *
               C32491 * C471 -
           ((C1836 * C32793 + C1837 * C5429 + C1835 * C32823 + C1834 * C5428 +
             C1833 * C32836 + C1832 * C5427) *
                C32807 +
            (C609 * C32793 + C610 * C5429 + C611 * C32823 + C612 * C5428 +
             C613 * C32836 + C614 * C5427) *
                C10306 +
            (C173 * C32793 + C172 * C5429 + C171 * C32823 + C170 * C5428 +
             C169 * C32836 + C168 * C5427) *
                C10305) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
              C834 * C248 + C32804 * C263) *
                 C6291 +
             (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
              C834 * C264 + C32804 * C278) *
                 C32430) *
                C10305 +
            ((C11380 + C11381 + C11382) * C6291 +
             (C11383 + C11384 + C11385) * C32430) *
                C10306 +
            C11404 * C32807) *
               C32491 * C470 -
           (((C834 * C6431 + C32804 * C6434 + C833 * C1158 + C32827 * C1171 +
              C832 * C1157 + C32839 * C1170) *
                 C32430 +
             (C834 * C6425 + C32804 * C6429 + C833 * C1144 + C32827 * C1156 +
              C832 * C1143 + C32839 * C1155) *
                 C6291) *
                C32807 +
            ((C834 * C1698 + C32804 * C1703 + C833 * C1153 + C32827 * C1169 +
              C832 * C702 + C32839 * C711) *
                 C32430 +
             (C834 * C1694 + C32804 * C1697 + C833 * C1142 + C32827 * C1154 +
              C832 * C696 + C32839 * C701) *
                 C6291) *
                C10306 +
            ((C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
              C832 * C261 + C32839 * C277) *
                 C32430 +
             (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
              C832 * C247 + C32839 * C262) *
                 C6291) *
                C10305) *
               C32491 * C471) *
              C472 +
          ((((C1362 + C1361 + C1360) * C6291 +
             (C1359 + C1358 + C1357) * C32430) *
                C10305 +
            ((C832 * C697 + C32839 * C703 + C833 * C1141 + C32827 * C1152 +
              C834 * C1695 + C32804 * C1699) *
                 C6291 +
             (C832 * C704 + C32839 * C712 + C833 * C1151 + C32827 * C1168 +
              C834 * C1700 + C32804 * C1704) *
                 C32430) *
                C10306 +
            ((C832 * C1145 + C32839 * C1159 + C833 * C1146 + C32827 * C1160 +
              C834 * C7243 + C32804 * C7244) *
                 C6291 +
             (C832 * C1161 + C32839 * C1172 + C833 * C1162 + C32827 * C1173 +
              C834 * C7245 + C32804 * C7246) *
                 C32430) *
                C32807) *
               C32491 * C471 -
           (((C834 * C1162 + C32804 * C1173 + C833 * C1161 + C32827 * C1172 +
              C832 * C371 + C32839 * C384) *
                 C32430 +
             (C834 * C1146 + C32804 * C1160 + C833 * C1145 + C32827 * C1159 +
              C832 * C354 + C32839 * C370) *
                 C6291) *
                C32807 +
            ((C1543 + C1544 + C1545) * C32430 +
             (C1546 + C1547 + C1548) * C6291) *
                C10306 +
            ((C880 + C879 + C878) * C32430 + (C877 + C876 + C875) * C6291) *
                C10305) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C835 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C829 +
            (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
            C895 * C837 + C896 * C32793) *
               C32532 * C584 -
           ((C1537 + C1538 + C1539) * C32793 + (C1540 + C1541 + C1542) * C837 +
            (C1543 + C1544 + C1545) * C830 + (C1546 + C1547 + C1548) * C836 +
            (C834 * C1153 + C32804 * C1169 + C833 * C702 + C32827 * C711 +
             C832 * C366 + C32839 * C382) *
                C829 +
            (C834 * C1142 + C32804 * C1154 + C833 * C696 + C32827 * C701 +
             C832 * C352 + C32839 * C367) *
                C835) *
               C32532 * C585) *
              C470 +
          (((C832 * C696 + C32839 * C701 + C833 * C1142 + C32827 * C1154 +
             C834 * C1694 + C32804 * C1697) *
                C835 +
            (C832 * C702 + C32839 * C711 + C833 * C1153 + C32827 * C1169 +
             C834 * C1698 + C32804 * C1703) *
                C829 +
            (C832 * C697 + C32839 * C703 + C833 * C1141 + C32827 * C1152 +
             C834 * C1695 + C32804 * C1699) *
                C836 +
            (C832 * C704 + C32839 * C712 + C833 * C1151 + C32827 * C1168 +
             C834 * C1700 + C32804 * C1704) *
                C830 +
            (C832 * C698 + C32839 * C705 + C833 * C1140 + C32827 * C1150 +
             C834 * C1696 + C32804 * C1701) *
                C837 +
            (C832 * C706 + C32839 * C713 + C833 * C1149 + C32827 * C1167 +
             C834 * C1702 + C32804 * C1705) *
                C32793) *
               C32532 * C585 -
           ((C1351 + C1352 + C1353) * C32793 + (C1354 + C1355 + C1356) * C837 +
            (C1357 + C1358 + C1359) * C830 + (C1360 + C1361 + C1362) * C836 +
            (C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
             C832 * C261 + C32839 * C277) *
                C829 +
            (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
             C832 * C247 + C32839 * C262) *
                C835) *
               C32532 * C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C114 +
            (C113 * C127 + C32514 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C32532 * C584 -
           (C607 * C106 + C608 * C118 + C609 * C105 + C610 * C117 +
            C611 * C104 + C612 * C116 + C613 * C103 + C614 * C115 +
            (C113 * C366 + C32514 * C382) * C102 +
            (C113 * C352 + C32514 * C367) * C114) *
               C32532 * C585) *
              C470 +
          (((C113 * C696 + C32514 * C701) * C114 +
            (C113 * C702 + C32514 * C711) * C102 +
            (C113 * C697 + C32514 * C703) * C115 +
            (C113 * C704 + C32514 * C712) * C103 +
            (C113 * C698 + C32514 * C705) * C116 +
            (C113 * C706 + C32514 * C713) * C104 +
            (C113 * C699 + C32514 * C707) * C117 +
            (C113 * C708 + C32514 * C714) * C105 +
            (C113 * C700 + C32514 * C709) * C118 +
            (C113 * C710 + C32514 * C715) * C106) *
               C32532 * C585 -
           (C495 * C106 + C496 * C118 + C497 * C105 + C498 * C117 +
            C499 * C104 + C500 * C116 + C501 * C103 + C502 * C115 +
            (C113 * C261 + C32514 * C277) * C102 +
            (C113 * C247 + C32514 * C262) * C114) *
               C32532 * C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C5427 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32836 +
            (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
            C5487 * C5429 + C5488 * C32793) *
               C32532 * C584 -
           ((C6061 + C6062 + C6063) * C32793 + (C6064 + C6065 + C6066) * C5429 +
            (C6067 + C6068 + C6069) * C32823 + (C6070 + C6071 + C6072) * C5428 +
            (C5426 * C1153 + C32804 * C1169 + C5425 * C702 + C5419 * C711 +
             C5424 * C366 + C5418 * C382) *
                C32836 +
            (C5426 * C1142 + C32804 * C1154 + C5425 * C696 + C5419 * C701 +
             C5424 * C352 + C5418 * C367) *
                C5427) *
               C32532 * C585) *
              C470 +
          (((C5424 * C696 + C5418 * C701 + C5425 * C1142 + C5419 * C1154 +
             C5426 * C1694 + C32804 * C1697) *
                C5427 +
            (C5424 * C702 + C5418 * C711 + C5425 * C1153 + C5419 * C1169 +
             C5426 * C1698 + C32804 * C1703) *
                C32836 +
            (C5424 * C697 + C5418 * C703 + C5425 * C1141 + C5419 * C1152 +
             C5426 * C1695 + C32804 * C1699) *
                C5428 +
            (C5424 * C704 + C5418 * C712 + C5425 * C1151 + C5419 * C1168 +
             C5426 * C1700 + C32804 * C1704) *
                C32823 +
            (C5424 * C698 + C5418 * C705 + C5425 * C1140 + C5419 * C1150 +
             C5426 * C1696 + C32804 * C1701) *
                C5429 +
            (C5424 * C706 + C5418 * C713 + C5425 * C1149 + C5419 * C1167 +
             C5426 * C1702 + C32804 * C1705) *
                C32793) *
               C32532 * C585 -
           ((C5879 + C5880 + C5881) * C32793 + (C5882 + C5883 + C5884) * C5429 +
            (C5885 + C5886 + C5887) * C32823 + (C5888 + C5889 + C5890) * C5428 +
            (C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
             C5424 * C261 + C5418 * C277) *
                C32836 +
            (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
             C5424 * C247 + C5418 * C262) *
                C5427) *
               C32532 * C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
             C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
             C6290 * C1009 + C6284 * C1018) *
                C6291 +
            (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
             C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
             C6290 * C1019 + C6284 * C1027) *
                C32430) *
               C32532 * C584 -
           ((C6290 * C6427 + C6284 * C6433 + C6289 * C1698 + C6283 * C1703 +
             C6288 * C1153 + C6282 * C1169 + C6287 * C702 + C6281 * C711 +
             C6286 * C366 + C6280 * C382) *
                C32430 +
            (C6290 * C6424 + C6284 * C6428 + C6289 * C1694 + C6283 * C1697 +
             C6288 * C1142 + C6282 * C1154 + C6287 * C696 + C6281 * C701 +
             C6286 * C352 + C6280 * C367) *
                C6291) *
               C32532 * C585) *
              C470 +
          (((C6286 * C696 + C6280 * C701 + C6287 * C1142 + C6281 * C1154 +
             C6288 * C1694 + C6282 * C1697 + C6289 * C6424 + C6283 * C6428 +
             C6290 * C6690 + C6284 * C6691) *
                C6291 +
            (C6286 * C702 + C6280 * C711 + C6287 * C1153 + C6281 * C1169 +
             C6288 * C1698 + C6282 * C1703 + C6289 * C6427 + C6283 * C6433 +
             C6290 * C6692 + C6284 * C6693) *
                C32430) *
               C32532 * C585 -
           ((C6290 * C6356 + C6284 * C6360 + C6289 * C1019 + C6283 * C1027 +
             C6288 * C1016 + C6282 * C1026 + C6287 * C264 + C6281 * C278 +
             C6286 * C261 + C6280 * C277) *
                C32430 +
            (C6290 * C6354 + C6284 * C6357 + C6289 * C1009 + C6283 * C1018 +
             C6288 * C1008 + C6282 * C1017 + C6287 * C248 + C6281 * C263 +
             C6286 * C247 + C6280 * C262) *
                C6291) *
               C32532 * C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C5427 +
             (C113 * C127 + C32514 * C140) * C32836 + C168 * C5428 +
             C169 * C32823 + C170 * C5429 + C171 * C32793) *
                C10305 +
            (C10529 + C10530 + C10531 + C10532 + C10533 + C10534) * C10306 +
            C10551 * C32807) *
               C584 -
           ((C10541 + C10542 + C10543 + C10544 + C10545 + C10546) * C32807 +
            (C10540 + C10539 + C10538 + C10537 + C10536 + C10535) * C10306 +
            (C10534 + C10533 + C10532 + C10531 + C10530 + C10529) * C10305) *
               C585) *
              C470 +
          (((C11002 + C11003 + C11004 + C11005 + C11006 + C11007) * C10305 +
            (C11008 + C11009 + C11010 + C11011 + C11012 + C11013) * C10306 +
            ((C113 * C2616 + C32514 * C2619) * C5427 +
             (C113 * C2620 + C32514 * C2625) * C32836 +
             (C113 * C2617 + C32514 * C2621) * C5428 +
             (C113 * C2622 + C32514 * C2626) * C32823 +
             (C113 * C2618 + C32514 * C2623) * C5429 +
             (C113 * C2624 + C32514 * C2627) * C32793) *
                C32807) *
               C585 -
           ((C11013 + C11012 + C11011 + C11010 + C11009 + C11008) * C32807 +
            (C11007 + C11006 + C11005 + C11004 + C11003 + C11002) * C10306 +
            (C499 * C32793 + C500 * C5429 + C501 * C32823 + C502 * C5428 +
             (C113 * C261 + C32514 * C277) * C32836 +
             (C113 * C247 + C32514 * C262) * C5427) *
                C10305) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
              C834 * C248 + C32804 * C263) *
                 C6291 +
             (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
              C834 * C264 + C32804 * C278) *
                 C32430) *
                C10305 +
            ((C11380 + C11381 + C11382) * C6291 +
             (C11383 + C11384 + C11385) * C32430) *
                C10306 +
            C11404 * C32807) *
               C584 -
           (((C11392 + C11393 + C11394) * C32430 +
             (C11395 + C11396 + C11397) * C6291) *
                C32807 +
            ((C11391 + C11390 + C11389) * C32430 +
             (C11388 + C11387 + C11386) * C6291) *
                C10306 +
            ((C11385 + C11384 + C11383) * C32430 +
             (C11382 + C11381 + C11380) * C6291) *
                C10305) *
               C585) *
              C470 +
          ((((C11885 + C11886 + C11887) * C6291 +
             (C11888 + C11889 + C11890) * C32430) *
                C10305 +
            ((C11891 + C11892 + C11893) * C6291 +
             (C11894 + C11895 + C11896) * C32430) *
                C10306 +
            ((C832 * C2616 + C32839 * C2619 + C833 * C7024 + C32827 * C7028 +
              C834 * C7561 + C32804 * C7562) *
                 C6291 +
             (C832 * C2620 + C32839 * C2625 + C833 * C7027 + C32827 * C7033 +
              C834 * C7563 + C32804 * C7564) *
                 C32430) *
                C32807) *
               C585 -
           (((C11896 + C11895 + C11894) * C32430 +
             (C11893 + C11892 + C11891) * C6291) *
                C32807 +
            ((C11890 + C11889 + C11888) * C32430 +
             (C11887 + C11886 + C11885) * C6291) *
                C10306 +
            ((C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
              C832 * C261 + C32839 * C277) *
                 C32430 +
             (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
              C832 * C247 + C32839 * C262) *
                 C6291) *
                C10305) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((C113 * C119 + C32514 * C126) * C114 +
               (C113 * C127 + C32514 * C140) * C102 + C168 * C115 +
               C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
               C173 * C105 + C174 * C118 + C175 * C106) *
                  C32532 * C32491 * C32477 * C110 -
              (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
               C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
               C169 * C102 + C168 * C114) *
                  C32532 * C32491 * C32477 * C111 +
              (C170 * C114 + C171 * C102 + C172 * C115 + C173 * C103 +
               C174 * C116 + C175 * C104 + C177 * C117 + C176 * C105 +
               (C113 * C125 + C32514 * C138) * C118 +
               (C113 * C139 + C32514 * C146) * C106) *
                  C32532 * C32491 * C32477 * C112) +
         std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((C113 * C119 + C32514 * C126) * C114 +
               (C113 * C127 + C32514 * C140) * C102 + C168 * C115 +
               C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
               C173 * C105 + C174 * C118 + C175 * C106) *
                  C32532 * C32491 * C239 -
              ((C113 * C253 + C32514 * C273) * C106 +
               (C113 * C243 + C32514 * C254) * C118 +
               (C113 * C255 + C32514 * C274) * C105 +
               (C113 * C244 + C32514 * C256) * C117 +
               (C113 * C257 + C32514 * C275) * C104 +
               (C113 * C245 + C32514 * C258) * C116 +
               (C113 * C259 + C32514 * C276) * C103 +
               (C113 * C246 + C32514 * C260) * C115 +
               (C113 * C261 + C32514 * C277) * C102 +
               (C113 * C247 + C32514 * C262) * C114) *
                  C32532 * C32491 * C240 +
              ((C113 * C248 + C32514 * C263) * C114 +
               (C113 * C264 + C32514 * C278) * C102 +
               (C113 * C249 + C32514 * C265) * C115 +
               (C113 * C266 + C32514 * C279) * C103 +
               (C113 * C250 + C32514 * C267) * C116 +
               (C113 * C268 + C32514 * C280) * C104 +
               (C113 * C251 + C32514 * C269) * C117 +
               (C113 * C270 + C32514 * C281) * C105 +
               (C113 * C252 + C32514 * C271) * C118 +
               (C113 * C272 + C32514 * C282) * C106) *
                  C32532 * C32491 * C241) *
             C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C32514 * C126) * C114 +
           (C113 * C127 + C32514 * C140) * C102 + C168 * C115 + C169 * C103 +
           C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 + C174 * C118 +
           C175 * C106) *
              C32532 * C345 -
          ((C113 * C358 + C32514 * C378) * C106 +
           (C113 * C348 + C32514 * C359) * C118 +
           (C113 * C360 + C32514 * C379) * C105 +
           (C113 * C349 + C32514 * C361) * C117 +
           (C113 * C362 + C32514 * C380) * C104 +
           (C113 * C350 + C32514 * C363) * C116 +
           (C113 * C364 + C32514 * C381) * C103 +
           (C113 * C351 + C32514 * C365) * C115 +
           (C113 * C366 + C32514 * C382) * C102 +
           (C113 * C352 + C32514 * C367) * C114) *
              C32532 * C346 +
          ((C113 * C353 + C32514 * C368) * C114 +
           (C113 * C369 + C32514 * C383) * C102 +
           (C113 * C354 + C32514 * C370) * C115 +
           (C113 * C371 + C32514 * C384) * C103 +
           (C113 * C355 + C32514 * C372) * C116 +
           (C113 * C373 + C32514 * C385) * C104 +
           (C113 * C356 + C32514 * C374) * C117 +
           (C113 * C375 + C32514 * C386) * C105 +
           (C113 * C357 + C32514 * C376) * C118 +
           (C113 * C377 + C32514 * C387) * C106) *
              C32532 * C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
            C834 * C248 + C32804 * C263) *
               C835 +
           (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
            C834 * C264 + C32804 * C278) *
               C829 +
           (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
           C895 * C837 + C896 * C32793) *
              C32532 * C32491 * C32477 * C110 -
          ((C887 + C888 + C889) * C32793 + (C890 + C891 + C892) * C837 +
           (C886 + C885 + C884) * C830 + (C883 + C882 + C881) * C836 +
           (C880 + C879 + C878) * C829 + (C877 + C876 + C875) * C835) *
              C32532 * C32491 * C32477 * C111 +
          (C895 * C835 + C896 * C829 + (C892 + C891 + C890) * C836 +
           (C889 + C888 + C887) * C830 +
           (C832 * C123 + C32839 * C134 + C833 * C243 + C32827 * C254 +
            C834 * C252 + C32804 * C271) *
               C837 +
           (C832 * C135 + C32839 * C144 + C833 * C253 + C32827 * C273 +
            C834 * C272 + C32804 * C282) *
               C32793) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
            C834 * C248 + C32804 * C263) *
               C835 +
           (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
            C834 * C264 + C32804 * C278) *
               C829 +
           (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
           C895 * C837 + C896 * C32793) *
              C32532 * C32491 * C239 -
          ((C834 * C1012 + C32804 * C1024 + C833 * C268 + C32827 * C280 +
            C832 * C257 + C32839 * C275) *
               C32793 +
           (C834 * C1006 + C32804 * C1013 + C833 * C250 + C32827 * C267 +
            C832 * C245 + C32839 * C258) *
               C837 +
           (C834 * C1014 + C32804 * C1025 + C833 * C266 + C32827 * C279 +
            C832 * C259 + C32839 * C276) *
               C830 +
           (C834 * C1007 + C32804 * C1015 + C833 * C249 + C32827 * C265 +
            C832 * C246 + C32839 * C260) *
               C836 +
           (C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
            C832 * C261 + C32839 * C277) *
               C829 +
           (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
            C832 * C247 + C32839 * C262) *
               C835) *
              C32532 * C32491 * C240 +
          ((C832 * C248 + C32839 * C263 + C833 * C1008 + C32827 * C1017 +
            C834 * C1009 + C32804 * C1018) *
               C835 +
           (C832 * C264 + C32839 * C278 + C833 * C1016 + C32827 * C1026 +
            C834 * C1019 + C32804 * C1027) *
               C829 +
           (C832 * C249 + C32839 * C265 + C833 * C1007 + C32827 * C1015 +
            C834 * C1010 + C32804 * C1020) *
               C836 +
           (C832 * C266 + C32839 * C279 + C833 * C1014 + C32827 * C1025 +
            C834 * C1021 + C32804 * C1028) *
               C830 +
           (C832 * C250 + C32839 * C267 + C833 * C1006 + C32827 * C1013 +
            C834 * C1011 + C32804 * C1022) *
               C837 +
           (C832 * C268 + C32839 * C280 + C833 * C1012 + C32827 * C1024 +
            C834 * C1023 + C32804 * C1029) *
               C32793) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
            C834 * C248 + C32804 * C263) *
               C835 +
           (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
            C834 * C264 + C32804 * C278) *
               C829 +
           (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
           C895 * C837 + C896 * C32793) *
              C32532 * C345 -
          ((C834 * C1149 + C32804 * C1167 + C833 * C706 + C32827 * C713 +
            C832 * C362 + C32839 * C380) *
               C32793 +
           (C834 * C1140 + C32804 * C1150 + C833 * C698 + C32827 * C705 +
            C832 * C350 + C32839 * C363) *
               C837 +
           (C834 * C1151 + C32804 * C1168 + C833 * C704 + C32827 * C712 +
            C832 * C364 + C32839 * C381) *
               C830 +
           (C834 * C1141 + C32804 * C1152 + C833 * C697 + C32827 * C703 +
            C832 * C351 + C32839 * C365) *
               C836 +
           (C834 * C1153 + C32804 * C1169 + C833 * C702 + C32827 * C711 +
            C832 * C366 + C32839 * C382) *
               C829 +
           (C834 * C1142 + C32804 * C1154 + C833 * C696 + C32827 * C701 +
            C832 * C352 + C32839 * C367) *
               C835) *
              C32532 * C346 +
          ((C832 * C353 + C32839 * C368 + C833 * C1143 + C32827 * C1155 +
            C834 * C1144 + C32804 * C1156) *
               C835 +
           (C832 * C369 + C32839 * C383 + C833 * C1157 + C32827 * C1170 +
            C834 * C1158 + C32804 * C1171) *
               C829 +
           (C832 * C354 + C32839 * C370 + C833 * C1145 + C32827 * C1159 +
            C834 * C1146 + C32804 * C1160) *
               C836 +
           (C832 * C371 + C32839 * C384 + C833 * C1161 + C32827 * C1172 +
            C834 * C1162 + C32804 * C1173) *
               C830 +
           (C832 * C355 + C32839 * C372 + C833 * C1147 + C32827 * C1163 +
            C834 * C1148 + C32804 * C1164) *
               C837 +
           (C832 * C373 + C32839 * C385 + C833 * C1165 + C32827 * C1174 +
            C834 * C1166 + C32804 * C1175) *
               C32793) *
              C32532 * C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
            C5426 * C248 + C32804 * C263) *
               C5427 +
           (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
            C5426 * C264 + C32804 * C278) *
               C32836 +
           (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
           C5487 * C5429 + C5488 * C32793) *
              C32532 * C32491 * C32477 * C110 -
          ((C5479 + C5480 + C5481) * C32793 + (C5482 + C5483 + C5484) * C5429 +
           (C5478 + C5477 + C5476) * C32823 + (C5475 + C5474 + C5473) * C5428 +
           (C5472 + C5471 + C5470) * C32836 + (C5469 + C5468 + C5467) * C5427) *
              C32532 * C32491 * C32477 * C111 +
          (C5487 * C5427 + C5488 * C32836 + (C5484 + C5483 + C5482) * C5428 +
           (C5481 + C5480 + C5479) * C32823 +
           (C5424 * C123 + C5418 * C134 + C5425 * C243 + C5419 * C254 +
            C5426 * C252 + C32804 * C271) *
               C5429 +
           (C5424 * C135 + C5418 * C144 + C5425 * C253 + C5419 * C273 +
            C5426 * C272 + C32804 * C282) *
               C32793) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
            C5426 * C248 + C32804 * C263) *
               C5427 +
           (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
            C5426 * C264 + C32804 * C278) *
               C32836 +
           (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
           C5487 * C5429 + C5488 * C32793) *
              C32532 * C32491 * C239 -
          ((C5426 * C1012 + C32804 * C1024 + C5425 * C268 + C5419 * C280 +
            C5424 * C257 + C5418 * C275) *
               C32793 +
           (C5426 * C1006 + C32804 * C1013 + C5425 * C250 + C5419 * C267 +
            C5424 * C245 + C5418 * C258) *
               C5429 +
           (C5426 * C1014 + C32804 * C1025 + C5425 * C266 + C5419 * C279 +
            C5424 * C259 + C5418 * C276) *
               C32823 +
           (C5426 * C1007 + C32804 * C1015 + C5425 * C249 + C5419 * C265 +
            C5424 * C246 + C5418 * C260) *
               C5428 +
           (C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
            C5424 * C261 + C5418 * C277) *
               C32836 +
           (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
            C5424 * C247 + C5418 * C262) *
               C5427) *
              C32532 * C32491 * C240 +
          ((C5424 * C248 + C5418 * C263 + C5425 * C1008 + C5419 * C1017 +
            C5426 * C1009 + C32804 * C1018) *
               C5427 +
           (C5424 * C264 + C5418 * C278 + C5425 * C1016 + C5419 * C1026 +
            C5426 * C1019 + C32804 * C1027) *
               C32836 +
           (C5424 * C249 + C5418 * C265 + C5425 * C1007 + C5419 * C1015 +
            C5426 * C1010 + C32804 * C1020) *
               C5428 +
           (C5424 * C266 + C5418 * C279 + C5425 * C1014 + C5419 * C1025 +
            C5426 * C1021 + C32804 * C1028) *
               C32823 +
           (C5424 * C250 + C5418 * C267 + C5425 * C1006 + C5419 * C1013 +
            C5426 * C1011 + C32804 * C1022) *
               C5429 +
           (C5424 * C268 + C5418 * C280 + C5425 * C1012 + C5419 * C1024 +
            C5426 * C1023 + C32804 * C1029) *
               C32793) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
            C5426 * C248 + C32804 * C263) *
               C5427 +
           (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
            C5426 * C264 + C32804 * C278) *
               C32836 +
           (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
           C5487 * C5429 + C5488 * C32793) *
              C32532 * C345 -
          ((C5426 * C1149 + C32804 * C1167 + C5425 * C706 + C5419 * C713 +
            C5424 * C362 + C5418 * C380) *
               C32793 +
           (C5426 * C1140 + C32804 * C1150 + C5425 * C698 + C5419 * C705 +
            C5424 * C350 + C5418 * C363) *
               C5429 +
           (C5426 * C1151 + C32804 * C1168 + C5425 * C704 + C5419 * C712 +
            C5424 * C364 + C5418 * C381) *
               C32823 +
           (C5426 * C1141 + C32804 * C1152 + C5425 * C697 + C5419 * C703 +
            C5424 * C351 + C5418 * C365) *
               C5428 +
           (C5426 * C1153 + C32804 * C1169 + C5425 * C702 + C5419 * C711 +
            C5424 * C366 + C5418 * C382) *
               C32836 +
           (C5426 * C1142 + C32804 * C1154 + C5425 * C696 + C5419 * C701 +
            C5424 * C352 + C5418 * C367) *
               C5427) *
              C32532 * C346 +
          ((C5424 * C353 + C5418 * C368 + C5425 * C1143 + C5419 * C1155 +
            C5426 * C1144 + C32804 * C1156) *
               C5427 +
           (C5424 * C369 + C5418 * C383 + C5425 * C1157 + C5419 * C1170 +
            C5426 * C1158 + C32804 * C1171) *
               C32836 +
           (C5424 * C354 + C5418 * C370 + C5425 * C1145 + C5419 * C1159 +
            C5426 * C1146 + C32804 * C1160) *
               C5428 +
           (C5424 * C371 + C5418 * C384 + C5425 * C1161 + C5419 * C1172 +
            C5426 * C1162 + C32804 * C1173) *
               C32823 +
           (C5424 * C355 + C5418 * C372 + C5425 * C1147 + C5419 * C1163 +
            C5426 * C1148 + C32804 * C1164) *
               C5429 +
           (C5424 * C373 + C5418 * C385 + C5425 * C1165 + C5419 * C1174 +
            C5426 * C1166 + C32804 * C1175) *
               C32793) *
              C32532 * C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
            C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
            C6290 * C1009 + C6284 * C1018) *
               C6291 +
           (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
            C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
            C6290 * C1019 + C6284 * C1027) *
               C32430) *
              C32532 * C32491 * C32477 * C110 -
          ((C6290 * C1021 + C6284 * C1028 + C6289 * C1014 + C6283 * C1025 +
            C6288 * C266 + C6282 * C279 + C6287 * C259 + C6281 * C276 +
            C6286 * C129 + C6280 * C141) *
               C32430 +
           (C6290 * C1010 + C6284 * C1020 + C6289 * C1007 + C6283 * C1015 +
            C6288 * C249 + C6282 * C265 + C6287 * C246 + C6281 * C260 +
            C6286 * C120 + C6280 * C128) *
               C6291) *
              C32532 * C32491 * C32477 * C111 +
          ((C6286 * C121 + C6280 * C130 + C6287 * C245 + C6281 * C258 +
            C6288 * C250 + C6282 * C267 + C6289 * C1006 + C6283 * C1013 +
            C6290 * C1011 + C6284 * C1022) *
               C6291 +
           (C6286 * C131 + C6280 * C142 + C6287 * C257 + C6281 * C275 +
            C6288 * C268 + C6282 * C280 + C6289 * C1012 + C6283 * C1024 +
            C6290 * C1023 + C6284 * C1029) *
               C32430) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
            C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
            C6290 * C1009 + C6284 * C1018) *
               C6291 +
           (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
            C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
            C6290 * C1019 + C6284 * C1027) *
               C32430) *
              C32532 * C32491 * C239 -
          ((C6290 * C6356 + C6284 * C6360 + C6289 * C1019 + C6283 * C1027 +
            C6288 * C1016 + C6282 * C1026 + C6287 * C264 + C6281 * C278 +
            C6286 * C261 + C6280 * C277) *
               C32430 +
           (C6290 * C6354 + C6284 * C6357 + C6289 * C1009 + C6283 * C1018 +
            C6288 * C1008 + C6282 * C1017 + C6287 * C248 + C6281 * C263 +
            C6286 * C247 + C6280 * C262) *
               C6291) *
              C32532 * C32491 * C240 +
          ((C6286 * C248 + C6280 * C263 + C6287 * C1008 + C6281 * C1017 +
            C6288 * C1009 + C6282 * C1018 + C6289 * C6354 + C6283 * C6357 +
            C6290 * C6355 + C6284 * C6358) *
               C6291 +
           (C6286 * C264 + C6280 * C278 + C6287 * C1016 + C6281 * C1026 +
            C6288 * C1019 + C6282 * C1027 + C6289 * C6356 + C6283 * C6360 +
            C6290 * C6359 + C6284 * C6361) *
               C32430) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
            C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
            C6290 * C1009 + C6284 * C1018) *
               C6291 +
           (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
            C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
            C6290 * C1019 + C6284 * C1027) *
               C32430) *
              C32532 * C345 -
          ((C6290 * C6427 + C6284 * C6433 + C6289 * C1698 + C6283 * C1703 +
            C6288 * C1153 + C6282 * C1169 + C6287 * C702 + C6281 * C711 +
            C6286 * C366 + C6280 * C382) *
               C32430 +
           (C6290 * C6424 + C6284 * C6428 + C6289 * C1694 + C6283 * C1697 +
            C6288 * C1142 + C6282 * C1154 + C6287 * C696 + C6281 * C701 +
            C6286 * C352 + C6280 * C367) *
               C6291) *
              C32532 * C346 +
          ((C6286 * C353 + C6280 * C368 + C6287 * C1143 + C6281 * C1155 +
            C6288 * C1144 + C6282 * C1156 + C6289 * C6425 + C6283 * C6429 +
            C6290 * C6426 + C6284 * C6430) *
               C6291 +
           (C6286 * C369 + C6280 * C383 + C6287 * C1157 + C6281 * C1170 +
            C6288 * C1158 + C6282 * C1171 + C6289 * C6431 + C6283 * C6434 +
            C6290 * C6432 + C6284 * C6435) *
               C32430) *
              C32532 * C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C5427 +
            (C113 * C127 + C32514 * C140) * C32836 + C168 * C5428 +
            C169 * C32823 + C170 * C5429 + C171 * C32793) *
               C10305 +
           (C2110 * C5427 + C2111 * C32836 + C614 * C5428 + C613 * C32823 +
            C612 * C5429 + C611 * C32793) *
               C10306 +
           (C2112 * C5427 + C2113 * C32836 + C1832 * C5428 + C1833 * C32823 +
            C1834 * C5429 + C1835 * C32793) *
               C32807) *
              C32491 * C32477 * C110 -
          ((C1836 * C32793 + C1837 * C5429 + C1835 * C32823 + C1834 * C5428 +
            C1833 * C32836 + C1832 * C5427) *
               C32807 +
           (C609 * C32793 + C610 * C5429 + C611 * C32823 + C612 * C5428 +
            C613 * C32836 + C614 * C5427) *
               C10306 +
           (C173 * C32793 + C172 * C5429 + C171 * C32823 + C170 * C5428 +
            C169 * C32836 + C168 * C5427) *
               C10305) *
              C32491 * C32477 * C111 +
          ((C170 * C5427 + C171 * C32836 + C172 * C5428 + C173 * C32823 +
            C174 * C5429 + C175 * C32793) *
               C10305 +
           (C612 * C5427 + C611 * C32836 + C610 * C5428 + C609 * C32823 +
            C608 * C5429 + C607 * C32793) *
               C10306 +
           (C1834 * C5427 + C1835 * C32836 + C1837 * C5428 + C1836 * C32823 +
            (C113 * C357 + C32514 * C376) * C5429 +
            (C113 * C377 + C32514 * C387) * C32793) *
               C32807) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C5427 +
            (C113 * C127 + C32514 * C140) * C32836 + C168 * C5428 +
            C169 * C32823 + C170 * C5429 + C171 * C32793) *
               C10305 +
           (C2110 * C5427 + C2111 * C32836 + C614 * C5428 + C613 * C32823 +
            C612 * C5429 + C611 * C32793) *
               C10306 +
           (C2112 * C5427 + C2113 * C32836 + C1832 * C5428 + C1833 * C32823 +
            C1834 * C5429 + C1835 * C32793) *
               C32807) *
              C32491 * C239 -
          ((C2301 * C32793 + C2302 * C5429 + C2303 * C32823 + C2304 * C5428 +
            C2648 * C32836 + C2647 * C5427) *
               C32807 +
           (C2305 * C32793 + C2306 * C5429 + C2307 * C32823 + C2308 * C5428 +
            C2646 * C32836 + C2645 * C5427) *
               C10306 +
           (C499 * C32793 + C500 * C5429 + C501 * C32823 + C502 * C5428 +
            (C113 * C261 + C32514 * C277) * C32836 +
            (C113 * C247 + C32514 * C262) * C5427) *
               C10305) *
              C32491 * C240 +
          (((C113 * C248 + C32514 * C263) * C5427 +
            (C113 * C264 + C32514 * C278) * C32836 +
            (C113 * C249 + C32514 * C265) * C5428 +
            (C113 * C266 + C32514 * C279) * C32823 +
            (C113 * C250 + C32514 * C267) * C5429 +
            (C113 * C268 + C32514 * C280) * C32793) *
               C10305 +
           ((C113 * C1142 + C32514 * C1154) * C5427 +
            (C113 * C1153 + C32514 * C1169) * C32836 +
            (C113 * C1141 + C32514 * C1152) * C5428 +
            (C113 * C1151 + C32514 * C1168) * C32823 +
            (C113 * C1140 + C32514 * C1150) * C5429 +
            (C113 * C1149 + C32514 * C1167) * C32793) *
               C10306 +
           ((C113 * C1144 + C32514 * C1156) * C5427 +
            (C113 * C1158 + C32514 * C1171) * C32836 +
            (C113 * C1146 + C32514 * C1160) * C5428 +
            (C113 * C1162 + C32514 * C1173) * C32823 +
            (C113 * C1148 + C32514 * C1164) * C5429 +
            (C113 * C1166 + C32514 * C1175) * C32793) *
               C32807) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C5427 +
            (C113 * C127 + C32514 * C140) * C32836 + C168 * C5428 +
            C169 * C32823 + C170 * C5429 + C171 * C32793) *
               C10305 +
           (C10529 + C10530 + C10531 + C10532 + C10533 + C10534) * C10306 +
           C10551 * C32807) *
              C345 -
          ((C10541 + C10542 + C10543 + C10544 + C10545 + C10546) * C32807 +
           (C10540 + C10539 + C10538 + C10537 + C10536 + C10535) * C10306 +
           (C10534 + C10533 + C10532 + C10531 + C10530 + C10529) * C10305) *
              C346 +
          (C10551 * C10305 +
           (C10546 + C10545 + C10544 + C10543 + C10542 + C10541) * C10306 +
           ((C113 * C2060 + C32514 * C2069) * C5427 +
            (C113 * C2070 + C32514 * C2078) * C32836 +
            (C113 * C2061 + C32514 * C2071) * C5428 +
            (C113 * C2072 + C32514 * C2079) * C32823 +
            (C113 * C2062 + C32514 * C2073) * C5429 +
            (C113 * C2074 + C32514 * C2080) * C32793) *
               C32807) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C6291 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C32430) *
               C10305 +
           ((C832 * C352 + C32839 * C367 + C833 * C696 + C32827 * C701 +
             C834 * C1142 + C32804 * C1154) *
                C6291 +
            (C832 * C366 + C32839 * C382 + C833 * C702 + C32827 * C711 +
             C834 * C1153 + C32804 * C1169) *
                C32430) *
               C10306 +
           ((C832 * C353 + C32839 * C368 + C833 * C1143 + C32827 * C1155 +
             C834 * C1144 + C32804 * C1156) *
                C6291 +
            (C832 * C369 + C32839 * C383 + C833 * C1157 + C32827 * C1170 +
             C834 * C1158 + C32804 * C1171) *
                C32430) *
               C32807) *
              C32491 * C32477 * C110 -
          (((C834 * C1162 + C32804 * C1173 + C833 * C1161 + C32827 * C1172 +
             C832 * C371 + C32839 * C384) *
                C32430 +
            (C834 * C1146 + C32804 * C1160 + C833 * C1145 + C32827 * C1159 +
             C832 * C354 + C32839 * C370) *
                C6291) *
               C32807 +
           ((C1543 + C1544 + C1545) * C32430 +
            (C1546 + C1547 + C1548) * C6291) *
               C10306 +
           ((C880 + C879 + C878) * C32430 + (C877 + C876 + C875) * C6291) *
               C10305) *
              C32491 * C32477 * C111 +
          ((C895 * C6291 + C896 * C32430) * C10305 +
           ((C1542 + C1541 + C1540) * C6291 +
            (C1539 + C1538 + C1537) * C32430) *
               C10306 +
           ((C832 * C355 + C32839 * C372 + C833 * C1147 + C32827 * C1163 +
             C834 * C1148 + C32804 * C1164) *
                C6291 +
            (C832 * C373 + C32839 * C385 + C833 * C1165 + C32827 * C1174 +
             C834 * C1166 + C32804 * C1175) *
                C32430) *
               C32807) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C6291 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C32430) *
               C10305 +
           ((C832 * C352 + C32839 * C367 + C833 * C696 + C32827 * C701 +
             C834 * C1142 + C32804 * C1154) *
                C6291 +
            (C832 * C366 + C32839 * C382 + C833 * C702 + C32827 * C711 +
             C834 * C1153 + C32804 * C1169) *
                C32430) *
               C10306 +
           ((C832 * C353 + C32839 * C368 + C833 * C1143 + C32827 * C1155 +
             C834 * C1144 + C32804 * C1156) *
                C6291 +
            (C832 * C369 + C32839 * C383 + C833 * C1157 + C32827 * C1170 +
             C834 * C1158 + C32804 * C1171) *
                C32430) *
               C32807) *
              C32491 * C239 -
          (((C834 * C6431 + C32804 * C6434 + C833 * C1158 + C32827 * C1171 +
             C832 * C1157 + C32839 * C1170) *
                C32430 +
            (C834 * C6425 + C32804 * C6429 + C833 * C1144 + C32827 * C1156 +
             C832 * C1143 + C32839 * C1155) *
                C6291) *
               C32807 +
           ((C834 * C1698 + C32804 * C1703 + C833 * C1153 + C32827 * C1169 +
             C832 * C702 + C32839 * C711) *
                C32430 +
            (C834 * C1694 + C32804 * C1697 + C833 * C1142 + C32827 * C1154 +
             C832 * C696 + C32839 * C701) *
                C6291) *
               C10306 +
           ((C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
             C832 * C261 + C32839 * C277) *
                C32430 +
            (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
             C832 * C247 + C32839 * C262) *
                C6291) *
               C10305) *
              C32491 * C240 +
          (((C832 * C248 + C32839 * C263 + C833 * C1008 + C32827 * C1017 +
             C834 * C1009 + C32804 * C1018) *
                C6291 +
            (C832 * C264 + C32839 * C278 + C833 * C1016 + C32827 * C1026 +
             C834 * C1019 + C32804 * C1027) *
                C32430) *
               C10305 +
           ((C832 * C1142 + C32839 * C1154 + C833 * C1694 + C32827 * C1697 +
             C834 * C6424 + C32804 * C6428) *
                C6291 +
            (C832 * C1153 + C32839 * C1169 + C833 * C1698 + C32827 * C1703 +
             C834 * C6427 + C32804 * C6433) *
                C32430) *
               C10306 +
           ((C832 * C1144 + C32839 * C1156 + C833 * C6425 + C32827 * C6429 +
             C834 * C6426 + C32804 * C6430) *
                C6291 +
            (C832 * C1158 + C32839 * C1171 + C833 * C6431 + C32827 * C6434 +
             C834 * C6432 + C32804 * C6435) *
                C32430) *
               C32807) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C6291 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C32430) *
               C10305 +
           ((C11380 + C11381 + C11382) * C6291 +
            (C11383 + C11384 + C11385) * C32430) *
               C10306 +
           C11404 * C32807) *
              C345 -
          (((C11392 + C11393 + C11394) * C32430 +
            (C11395 + C11396 + C11397) * C6291) *
               C32807 +
           ((C11391 + C11390 + C11389) * C32430 +
            (C11388 + C11387 + C11386) * C6291) *
               C10306 +
           ((C11385 + C11384 + C11383) * C32430 +
            (C11382 + C11381 + C11380) * C6291) *
               C10305) *
              C346 +
          (C11404 * C10305 +
           ((C11397 + C11396 + C11395) * C6291 +
            (C11394 + C11393 + C11392) * C32430) *
               C10306 +
           ((C832 * C2060 + C32839 * C2069 + C833 * C7025 + C32827 * C7029 +
             C834 * C7026 + C32804 * C7030) *
                C6291 +
            (C832 * C2070 + C32839 * C2078 + C833 * C7031 + C32827 * C7034 +
             C834 * C7032 + C32804 * C7035) *
                C32430) *
               C32807) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C835 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C829 +
            (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
            C895 * C837 + C896 * C32793) *
               C32532 * C584 -
           ((C1537 + C1538 + C1539) * C32793 + (C1540 + C1541 + C1542) * C837 +
            (C1543 + C1544 + C1545) * C830 + (C1546 + C1547 + C1548) * C836 +
            (C834 * C1153 + C32804 * C1169 + C833 * C702 + C32827 * C711 +
             C832 * C366 + C32839 * C382) *
                C829 +
            (C834 * C1142 + C32804 * C1154 + C833 * C696 + C32827 * C701 +
             C832 * C352 + C32839 * C367) *
                C835) *
               C32532 * C585) *
              C32477 * C472 +
          (((C1548 + C1547 + C1546) * C835 + (C1545 + C1544 + C1543) * C829 +
            (C1542 + C1541 + C1540) * C836 + (C1539 + C1538 + C1537) * C830 +
            (C832 * C349 + C32839 * C361 + C833 * C699 + C32827 * C707 +
             C834 * C1508 + C32804 * C1509) *
                C837 +
            (C832 * C360 + C32839 * C379 + C833 * C708 + C32827 * C714 +
             C834 * C1510 + C32804 * C1511) *
                C32793) *
               C32532 * C585 -
           ((C887 + C888 + C889) * C32793 + (C890 + C891 + C892) * C837 +
            (C886 + C885 + C884) * C830 + (C883 + C882 + C881) * C836 +
            (C880 + C879 + C878) * C829 + (C877 + C876 + C875) * C835) *
               C32532 * C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C114 +
            (C113 * C127 + C32514 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C32532 * C584 -
           (C607 * C106 + C608 * C118 + C609 * C105 + C610 * C117 +
            C611 * C104 + C612 * C116 + C613 * C103 + C614 * C115 +
            (C113 * C366 + C32514 * C382) * C102 +
            (C113 * C352 + C32514 * C367) * C114) *
               C32532 * C585) *
              C32477 * C472 +
          ((C614 * C114 + C613 * C102 + C612 * C115 + C611 * C103 +
            C610 * C116 + C609 * C104 + C608 * C117 + C607 * C105 +
            (C113 * C586 + C32514 * C587) * C118 +
            (C113 * C588 + C32514 * C589) * C106) *
               C32532 * C585 -
           (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
            C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
            C169 * C102 + C168 * C114) *
               C32532 * C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C5427 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32836 +
            (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
            C5487 * C5429 + C5488 * C32793) *
               C32532 * C584 -
           ((C6061 + C6062 + C6063) * C32793 + (C6064 + C6065 + C6066) * C5429 +
            (C6067 + C6068 + C6069) * C32823 + (C6070 + C6071 + C6072) * C5428 +
            (C5426 * C1153 + C32804 * C1169 + C5425 * C702 + C5419 * C711 +
             C5424 * C366 + C5418 * C382) *
                C32836 +
            (C5426 * C1142 + C32804 * C1154 + C5425 * C696 + C5419 * C701 +
             C5424 * C352 + C5418 * C367) *
                C5427) *
               C32532 * C585) *
              C32477 * C472 +
          (((C6072 + C6071 + C6070) * C5427 + (C6069 + C6068 + C6067) * C32836 +
            (C6066 + C6065 + C6064) * C5428 + (C6063 + C6062 + C6061) * C32823 +
            (C5424 * C349 + C5418 * C361 + C5425 * C699 + C5419 * C707 +
             C5426 * C1508 + C32804 * C1509) *
                C5429 +
            (C5424 * C360 + C5418 * C379 + C5425 * C708 + C5419 * C714 +
             C5426 * C1510 + C32804 * C1511) *
                C32793) *
               C32532 * C585 -
           ((C5479 + C5480 + C5481) * C32793 + (C5482 + C5483 + C5484) * C5429 +
            (C5478 + C5477 + C5476) * C32823 + (C5475 + C5474 + C5473) * C5428 +
            (C5472 + C5471 + C5470) * C32836 +
            (C5469 + C5468 + C5467) * C5427) *
               C32532 * C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
             C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
             C6290 * C1009 + C6284 * C1018) *
                C6291 +
            (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
             C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
             C6290 * C1019 + C6284 * C1027) *
                C32430) *
               C32532 * C584 -
           ((C6290 * C6427 + C6284 * C6433 + C6289 * C1698 + C6283 * C1703 +
             C6288 * C1153 + C6282 * C1169 + C6287 * C702 + C6281 * C711 +
             C6286 * C366 + C6280 * C382) *
                C32430 +
            (C6290 * C6424 + C6284 * C6428 + C6289 * C1694 + C6283 * C1697 +
             C6288 * C1142 + C6282 * C1154 + C6287 * C696 + C6281 * C701 +
             C6286 * C352 + C6280 * C367) *
                C6291) *
               C32532 * C585) *
              C32477 * C472 +
          (((C6286 * C351 + C6280 * C365 + C6287 * C697 + C6281 * C703 +
             C6288 * C1141 + C6282 * C1152 + C6289 * C1695 + C6283 * C1699 +
             C6290 * C6604 + C6284 * C6605) *
                C6291 +
            (C6286 * C364 + C6280 * C381 + C6287 * C704 + C6281 * C712 +
             C6288 * C1151 + C6282 * C1168 + C6289 * C1700 + C6283 * C1704 +
             C6290 * C6606 + C6284 * C6607) *
                C32430) *
               C32532 * C585 -
           ((C6290 * C1021 + C6284 * C1028 + C6289 * C1014 + C6283 * C1025 +
             C6288 * C266 + C6282 * C279 + C6287 * C259 + C6281 * C276 +
             C6286 * C129 + C6280 * C141) *
                C32430 +
            (C6290 * C1010 + C6284 * C1020 + C6289 * C1007 + C6283 * C1015 +
             C6288 * C249 + C6282 * C265 + C6287 * C246 + C6281 * C260 +
             C6286 * C120 + C6280 * C128) *
                C6291) *
               C32532 * C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C5427 +
             (C113 * C127 + C32514 * C140) * C32836 + C168 * C5428 +
             C169 * C32823 + C170 * C5429 + C171 * C32793) *
                C10305 +
            (C10529 + C10530 + C10531 + C10532 + C10533 + C10534) * C10306 +
            C10551 * C32807) *
               C584 -
           ((C10541 + C10542 + C10543 + C10544 + C10545 + C10546) * C32807 +
            (C10540 + C10539 + C10538 + C10537 + C10536 + C10535) * C10306 +
            (C10534 + C10533 + C10532 + C10531 + C10530 + C10529) * C10305) *
               C585) *
              C32477 * C472 +
          (((C10844 + C10845 + C10846 + C10847 + C10848 + C10849) * C10305 +
            (C10850 + C10851 + C10852 + C10853 + C10854 + C10855) * C10306 +
            (C2117 * C5427 + C2116 * C32836 + C2115 * C5428 + C2114 * C32823 +
             (C113 * C2454 + C32514 * C2455) * C5429 +
             (C113 * C2456 + C32514 * C2457) * C32793) *
                C32807) *
               C585 -
           ((C10855 + C10854 + C10853 + C10852 + C10851 + C10850) * C32807 +
            (C10849 + C10848 + C10847 + C10846 + C10845 + C10844) * C10306 +
            (C173 * C32793 + C172 * C5429 + C171 * C32823 + C170 * C5428 +
             C169 * C32836 + C168 * C5427) *
                C10305) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
              C834 * C248 + C32804 * C263) *
                 C6291 +
             (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
              C834 * C264 + C32804 * C278) *
                 C32430) *
                C10305 +
            ((C11380 + C11381 + C11382) * C6291 +
             (C11383 + C11384 + C11385) * C32430) *
                C10306 +
            C11404 * C32807) *
               C584 -
           (((C11392 + C11393 + C11394) * C32430 +
             (C11395 + C11396 + C11397) * C6291) *
                C32807 +
            ((C11391 + C11390 + C11389) * C32430 +
             (C11388 + C11387 + C11386) * C6291) *
                C10306 +
            ((C11385 + C11384 + C11383) * C32430 +
             (C11382 + C11381 + C11380) * C6291) *
                C10305) *
               C585) *
              C32477 * C472 +
          ((((C1548 + C1547 + C1546) * C6291 +
             (C1545 + C1544 + C1543) * C32430) *
                C10305 +
            ((C11709 + C11710 + C11711) * C6291 +
             (C11712 + C11713 + C11714) * C32430) *
                C10306 +
            ((C832 * C2058 + C32839 * C2066 + C833 * C2617 + C32827 * C2621 +
              C834 * C7393 + C32804 * C7394) *
                 C6291 +
             (C832 * C2065 + C32839 * C2076 + C833 * C2622 + C32827 * C2626 +
              C834 * C7395 + C32804 * C7396) *
                 C32430) *
                C32807) *
               C585 -
           (((C11714 + C11713 + C11712) * C32430 +
             (C11711 + C11710 + C11709) * C6291) *
                C32807 +
            ((C1543 + C1544 + C1545) * C32430 +
             (C1546 + C1547 + C1548) * C6291) *
                C10306 +
            ((C880 + C879 + C878) * C32430 + (C877 + C876 + C875) * C6291) *
                C10305) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C32514 * C126) * C114 +
           (C113 * C127 + C32514 * C140) * C102 + C168 * C115 + C169 * C103 +
           C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 + C174 * C118 +
           C175 * C106) *
              C32532 * C32491 * C239 -
          ((C113 * C253 + C32514 * C273) * C106 +
           (C113 * C243 + C32514 * C254) * C118 +
           (C113 * C255 + C32514 * C274) * C105 +
           (C113 * C244 + C32514 * C256) * C117 +
           (C113 * C257 + C32514 * C275) * C104 +
           (C113 * C245 + C32514 * C258) * C116 +
           (C113 * C259 + C32514 * C276) * C103 +
           (C113 * C246 + C32514 * C260) * C115 +
           (C113 * C261 + C32514 * C277) * C102 +
           (C113 * C247 + C32514 * C262) * C114) *
              C32532 * C32491 * C240 +
          ((C113 * C248 + C32514 * C263) * C114 +
           (C113 * C264 + C32514 * C278) * C102 +
           (C113 * C249 + C32514 * C265) * C115 +
           (C113 * C266 + C32514 * C279) * C103 +
           (C113 * C250 + C32514 * C267) * C116 +
           (C113 * C268 + C32514 * C280) * C104 +
           (C113 * C251 + C32514 * C269) * C117 +
           (C113 * C270 + C32514 * C281) * C105 +
           (C113 * C252 + C32514 * C271) * C118 +
           (C113 * C272 + C32514 * C282) * C106) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C32514 * C126) * C114 +
           (C113 * C127 + C32514 * C140) * C102 + C168 * C115 + C169 * C103 +
           C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 + C174 * C118 +
           C175 * C106) *
              C32532 * C32491 * C32477 * C110 -
          (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 + C173 * C104 +
           C172 * C116 + C171 * C103 + C170 * C115 + C169 * C102 +
           C168 * C114) *
              C32532 * C32491 * C32477 * C111 +
          (C170 * C114 + C171 * C102 + C172 * C115 + C173 * C103 + C174 * C116 +
           C175 * C104 + C177 * C117 + C176 * C105 +
           (C113 * C125 + C32514 * C138) * C118 +
           (C113 * C139 + C32514 * C146) * C106) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
            C834 * C248 + C32804 * C263) *
               C835 +
           (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
            C834 * C264 + C32804 * C278) *
               C829 +
           (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
           C895 * C837 + C896 * C32793) *
              C32532 * C32491 * C32477 * C110 -
          ((C887 + C888 + C889) * C32793 + (C890 + C891 + C892) * C837 +
           (C886 + C885 + C884) * C830 + (C883 + C882 + C881) * C836 +
           (C880 + C879 + C878) * C829 + (C877 + C876 + C875) * C835) *
              C32532 * C32491 * C32477 * C111 +
          (C895 * C835 + C896 * C829 + (C892 + C891 + C890) * C836 +
           (C889 + C888 + C887) * C830 +
           (C832 * C123 + C32839 * C134 + C833 * C243 + C32827 * C254 +
            C834 * C252 + C32804 * C271) *
               C837 +
           (C832 * C135 + C32839 * C144 + C833 * C253 + C32827 * C273 +
            C834 * C272 + C32804 * C282) *
               C32793) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
            C834 * C248 + C32804 * C263) *
               C835 +
           (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
            C834 * C264 + C32804 * C278) *
               C829 +
           (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
           C895 * C837 + C896 * C32793) *
              C32532 * C32491 * C239 -
          ((C834 * C1012 + C32804 * C1024 + C833 * C268 + C32827 * C280 +
            C832 * C257 + C32839 * C275) *
               C32793 +
           (C834 * C1006 + C32804 * C1013 + C833 * C250 + C32827 * C267 +
            C832 * C245 + C32839 * C258) *
               C837 +
           (C834 * C1014 + C32804 * C1025 + C833 * C266 + C32827 * C279 +
            C832 * C259 + C32839 * C276) *
               C830 +
           (C834 * C1007 + C32804 * C1015 + C833 * C249 + C32827 * C265 +
            C832 * C246 + C32839 * C260) *
               C836 +
           (C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
            C832 * C261 + C32839 * C277) *
               C829 +
           (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
            C832 * C247 + C32839 * C262) *
               C835) *
              C32532 * C32491 * C240 +
          ((C832 * C248 + C32839 * C263 + C833 * C1008 + C32827 * C1017 +
            C834 * C1009 + C32804 * C1018) *
               C835 +
           (C832 * C264 + C32839 * C278 + C833 * C1016 + C32827 * C1026 +
            C834 * C1019 + C32804 * C1027) *
               C829 +
           (C832 * C249 + C32839 * C265 + C833 * C1007 + C32827 * C1015 +
            C834 * C1010 + C32804 * C1020) *
               C836 +
           (C832 * C266 + C32839 * C279 + C833 * C1014 + C32827 * C1025 +
            C834 * C1021 + C32804 * C1028) *
               C830 +
           (C832 * C250 + C32839 * C267 + C833 * C1006 + C32827 * C1013 +
            C834 * C1011 + C32804 * C1022) *
               C837 +
           (C832 * C268 + C32839 * C280 + C833 * C1012 + C32827 * C1024 +
            C834 * C1023 + C32804 * C1029) *
               C32793) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
            C5426 * C248 + C32804 * C263) *
               C5427 +
           (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
            C5426 * C264 + C32804 * C278) *
               C32836 +
           (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
           C5487 * C5429 + C5488 * C32793) *
              C32532 * C32491 * C32477 * C110 -
          ((C5479 + C5480 + C5481) * C32793 + (C5482 + C5483 + C5484) * C5429 +
           (C5478 + C5477 + C5476) * C32823 + (C5475 + C5474 + C5473) * C5428 +
           (C5472 + C5471 + C5470) * C32836 + (C5469 + C5468 + C5467) * C5427) *
              C32532 * C32491 * C32477 * C111 +
          (C5487 * C5427 + C5488 * C32836 + (C5484 + C5483 + C5482) * C5428 +
           (C5481 + C5480 + C5479) * C32823 +
           (C5424 * C123 + C5418 * C134 + C5425 * C243 + C5419 * C254 +
            C5426 * C252 + C32804 * C271) *
               C5429 +
           (C5424 * C135 + C5418 * C144 + C5425 * C253 + C5419 * C273 +
            C5426 * C272 + C32804 * C282) *
               C32793) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
            C5426 * C248 + C32804 * C263) *
               C5427 +
           (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
            C5426 * C264 + C32804 * C278) *
               C32836 +
           (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
           C5487 * C5429 + C5488 * C32793) *
              C32532 * C32491 * C239 -
          ((C5426 * C1012 + C32804 * C1024 + C5425 * C268 + C5419 * C280 +
            C5424 * C257 + C5418 * C275) *
               C32793 +
           (C5426 * C1006 + C32804 * C1013 + C5425 * C250 + C5419 * C267 +
            C5424 * C245 + C5418 * C258) *
               C5429 +
           (C5426 * C1014 + C32804 * C1025 + C5425 * C266 + C5419 * C279 +
            C5424 * C259 + C5418 * C276) *
               C32823 +
           (C5426 * C1007 + C32804 * C1015 + C5425 * C249 + C5419 * C265 +
            C5424 * C246 + C5418 * C260) *
               C5428 +
           (C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
            C5424 * C261 + C5418 * C277) *
               C32836 +
           (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
            C5424 * C247 + C5418 * C262) *
               C5427) *
              C32532 * C32491 * C240 +
          ((C5424 * C248 + C5418 * C263 + C5425 * C1008 + C5419 * C1017 +
            C5426 * C1009 + C32804 * C1018) *
               C5427 +
           (C5424 * C264 + C5418 * C278 + C5425 * C1016 + C5419 * C1026 +
            C5426 * C1019 + C32804 * C1027) *
               C32836 +
           (C5424 * C249 + C5418 * C265 + C5425 * C1007 + C5419 * C1015 +
            C5426 * C1010 + C32804 * C1020) *
               C5428 +
           (C5424 * C266 + C5418 * C279 + C5425 * C1014 + C5419 * C1025 +
            C5426 * C1021 + C32804 * C1028) *
               C32823 +
           (C5424 * C250 + C5418 * C267 + C5425 * C1006 + C5419 * C1013 +
            C5426 * C1011 + C32804 * C1022) *
               C5429 +
           (C5424 * C268 + C5418 * C280 + C5425 * C1012 + C5419 * C1024 +
            C5426 * C1023 + C32804 * C1029) *
               C32793) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
            C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
            C6290 * C1009 + C6284 * C1018) *
               C6291 +
           (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
            C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
            C6290 * C1019 + C6284 * C1027) *
               C32430) *
              C32532 * C32491 * C32477 * C110 -
          ((C6290 * C1021 + C6284 * C1028 + C6289 * C1014 + C6283 * C1025 +
            C6288 * C266 + C6282 * C279 + C6287 * C259 + C6281 * C276 +
            C6286 * C129 + C6280 * C141) *
               C32430 +
           (C6290 * C1010 + C6284 * C1020 + C6289 * C1007 + C6283 * C1015 +
            C6288 * C249 + C6282 * C265 + C6287 * C246 + C6281 * C260 +
            C6286 * C120 + C6280 * C128) *
               C6291) *
              C32532 * C32491 * C32477 * C111 +
          ((C6286 * C121 + C6280 * C130 + C6287 * C245 + C6281 * C258 +
            C6288 * C250 + C6282 * C267 + C6289 * C1006 + C6283 * C1013 +
            C6290 * C1011 + C6284 * C1022) *
               C6291 +
           (C6286 * C131 + C6280 * C142 + C6287 * C257 + C6281 * C275 +
            C6288 * C268 + C6282 * C280 + C6289 * C1012 + C6283 * C1024 +
            C6290 * C1023 + C6284 * C1029) *
               C32430) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
            C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
            C6290 * C1009 + C6284 * C1018) *
               C6291 +
           (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
            C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
            C6290 * C1019 + C6284 * C1027) *
               C32430) *
              C32532 * C32491 * C239 -
          ((C6290 * C6356 + C6284 * C6360 + C6289 * C1019 + C6283 * C1027 +
            C6288 * C1016 + C6282 * C1026 + C6287 * C264 + C6281 * C278 +
            C6286 * C261 + C6280 * C277) *
               C32430 +
           (C6290 * C6354 + C6284 * C6357 + C6289 * C1009 + C6283 * C1018 +
            C6288 * C1008 + C6282 * C1017 + C6287 * C248 + C6281 * C263 +
            C6286 * C247 + C6280 * C262) *
               C6291) *
              C32532 * C32491 * C240 +
          ((C6286 * C248 + C6280 * C263 + C6287 * C1008 + C6281 * C1017 +
            C6288 * C1009 + C6282 * C1018 + C6289 * C6354 + C6283 * C6357 +
            C6290 * C6355 + C6284 * C6358) *
               C6291 +
           (C6286 * C264 + C6280 * C278 + C6287 * C1016 + C6281 * C1026 +
            C6288 * C1019 + C6282 * C1027 + C6289 * C6356 + C6283 * C6360 +
            C6290 * C6359 + C6284 * C6361) *
               C32430) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C5427 +
            (C113 * C127 + C32514 * C140) * C32836 + C168 * C5428 +
            C169 * C32823 + C170 * C5429 + C171 * C32793) *
               C10305 +
           (C2110 * C5427 + C2111 * C32836 + C614 * C5428 + C613 * C32823 +
            C612 * C5429 + C611 * C32793) *
               C10306 +
           (C2112 * C5427 + C2113 * C32836 + C1832 * C5428 + C1833 * C32823 +
            C1834 * C5429 + C1835 * C32793) *
               C32807) *
              C32491 * C32477 * C110 -
          ((C1836 * C32793 + C1837 * C5429 + C1835 * C32823 + C1834 * C5428 +
            C1833 * C32836 + C1832 * C5427) *
               C32807 +
           (C609 * C32793 + C610 * C5429 + C611 * C32823 + C612 * C5428 +
            C613 * C32836 + C614 * C5427) *
               C10306 +
           (C173 * C32793 + C172 * C5429 + C171 * C32823 + C170 * C5428 +
            C169 * C32836 + C168 * C5427) *
               C10305) *
              C32491 * C32477 * C111 +
          ((C170 * C5427 + C171 * C32836 + C172 * C5428 + C173 * C32823 +
            C174 * C5429 + C175 * C32793) *
               C10305 +
           (C612 * C5427 + C611 * C32836 + C610 * C5428 + C609 * C32823 +
            C608 * C5429 + C607 * C32793) *
               C10306 +
           (C1834 * C5427 + C1835 * C32836 + C1837 * C5428 + C1836 * C32823 +
            (C113 * C357 + C32514 * C376) * C5429 +
            (C113 * C377 + C32514 * C387) * C32793) *
               C32807) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C5427 +
            (C113 * C127 + C32514 * C140) * C32836 + C168 * C5428 +
            C169 * C32823 + C170 * C5429 + C171 * C32793) *
               C10305 +
           (C2110 * C5427 + C2111 * C32836 + C614 * C5428 + C613 * C32823 +
            C612 * C5429 + C611 * C32793) *
               C10306 +
           (C2112 * C5427 + C2113 * C32836 + C1832 * C5428 + C1833 * C32823 +
            C1834 * C5429 + C1835 * C32793) *
               C32807) *
              C32491 * C239 -
          ((C2301 * C32793 + C2302 * C5429 + C2303 * C32823 + C2304 * C5428 +
            C2648 * C32836 + C2647 * C5427) *
               C32807 +
           (C2305 * C32793 + C2306 * C5429 + C2307 * C32823 + C2308 * C5428 +
            C2646 * C32836 + C2645 * C5427) *
               C10306 +
           (C499 * C32793 + C500 * C5429 + C501 * C32823 + C502 * C5428 +
            (C113 * C261 + C32514 * C277) * C32836 +
            (C113 * C247 + C32514 * C262) * C5427) *
               C10305) *
              C32491 * C240 +
          (((C113 * C248 + C32514 * C263) * C5427 +
            (C113 * C264 + C32514 * C278) * C32836 +
            (C113 * C249 + C32514 * C265) * C5428 +
            (C113 * C266 + C32514 * C279) * C32823 +
            (C113 * C250 + C32514 * C267) * C5429 +
            (C113 * C268 + C32514 * C280) * C32793) *
               C10305 +
           ((C113 * C1142 + C32514 * C1154) * C5427 +
            (C113 * C1153 + C32514 * C1169) * C32836 +
            (C113 * C1141 + C32514 * C1152) * C5428 +
            (C113 * C1151 + C32514 * C1168) * C32823 +
            (C113 * C1140 + C32514 * C1150) * C5429 +
            (C113 * C1149 + C32514 * C1167) * C32793) *
               C10306 +
           ((C113 * C1144 + C32514 * C1156) * C5427 +
            (C113 * C1158 + C32514 * C1171) * C32836 +
            (C113 * C1146 + C32514 * C1160) * C5428 +
            (C113 * C1162 + C32514 * C1173) * C32823 +
            (C113 * C1148 + C32514 * C1164) * C5429 +
            (C113 * C1166 + C32514 * C1175) * C32793) *
               C32807) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C6291 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C32430) *
               C10305 +
           ((C832 * C352 + C32839 * C367 + C833 * C696 + C32827 * C701 +
             C834 * C1142 + C32804 * C1154) *
                C6291 +
            (C832 * C366 + C32839 * C382 + C833 * C702 + C32827 * C711 +
             C834 * C1153 + C32804 * C1169) *
                C32430) *
               C10306 +
           ((C832 * C353 + C32839 * C368 + C833 * C1143 + C32827 * C1155 +
             C834 * C1144 + C32804 * C1156) *
                C6291 +
            (C832 * C369 + C32839 * C383 + C833 * C1157 + C32827 * C1170 +
             C834 * C1158 + C32804 * C1171) *
                C32430) *
               C32807) *
              C32491 * C32477 * C110 -
          (((C834 * C1162 + C32804 * C1173 + C833 * C1161 + C32827 * C1172 +
             C832 * C371 + C32839 * C384) *
                C32430 +
            (C834 * C1146 + C32804 * C1160 + C833 * C1145 + C32827 * C1159 +
             C832 * C354 + C32839 * C370) *
                C6291) *
               C32807 +
           ((C1543 + C1544 + C1545) * C32430 +
            (C1546 + C1547 + C1548) * C6291) *
               C10306 +
           ((C880 + C879 + C878) * C32430 + (C877 + C876 + C875) * C6291) *
               C10305) *
              C32491 * C32477 * C111 +
          ((C895 * C6291 + C896 * C32430) * C10305 +
           ((C1542 + C1541 + C1540) * C6291 +
            (C1539 + C1538 + C1537) * C32430) *
               C10306 +
           ((C832 * C355 + C32839 * C372 + C833 * C1147 + C32827 * C1163 +
             C834 * C1148 + C32804 * C1164) *
                C6291 +
            (C832 * C373 + C32839 * C385 + C833 * C1165 + C32827 * C1174 +
             C834 * C1166 + C32804 * C1175) *
                C32430) *
               C32807) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C6291 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C32430) *
               C10305 +
           ((C832 * C352 + C32839 * C367 + C833 * C696 + C32827 * C701 +
             C834 * C1142 + C32804 * C1154) *
                C6291 +
            (C832 * C366 + C32839 * C382 + C833 * C702 + C32827 * C711 +
             C834 * C1153 + C32804 * C1169) *
                C32430) *
               C10306 +
           ((C832 * C353 + C32839 * C368 + C833 * C1143 + C32827 * C1155 +
             C834 * C1144 + C32804 * C1156) *
                C6291 +
            (C832 * C369 + C32839 * C383 + C833 * C1157 + C32827 * C1170 +
             C834 * C1158 + C32804 * C1171) *
                C32430) *
               C32807) *
              C32491 * C239 -
          (((C834 * C6431 + C32804 * C6434 + C833 * C1158 + C32827 * C1171 +
             C832 * C1157 + C32839 * C1170) *
                C32430 +
            (C834 * C6425 + C32804 * C6429 + C833 * C1144 + C32827 * C1156 +
             C832 * C1143 + C32839 * C1155) *
                C6291) *
               C32807 +
           ((C834 * C1698 + C32804 * C1703 + C833 * C1153 + C32827 * C1169 +
             C832 * C702 + C32839 * C711) *
                C32430 +
            (C834 * C1694 + C32804 * C1697 + C833 * C1142 + C32827 * C1154 +
             C832 * C696 + C32839 * C701) *
                C6291) *
               C10306 +
           ((C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
             C832 * C261 + C32839 * C277) *
                C32430 +
            (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
             C832 * C247 + C32839 * C262) *
                C6291) *
               C10305) *
              C32491 * C240 +
          (((C832 * C248 + C32839 * C263 + C833 * C1008 + C32827 * C1017 +
             C834 * C1009 + C32804 * C1018) *
                C6291 +
            (C832 * C264 + C32839 * C278 + C833 * C1016 + C32827 * C1026 +
             C834 * C1019 + C32804 * C1027) *
                C32430) *
               C10305 +
           ((C832 * C1142 + C32839 * C1154 + C833 * C1694 + C32827 * C1697 +
             C834 * C6424 + C32804 * C6428) *
                C6291 +
            (C832 * C1153 + C32839 * C1169 + C833 * C1698 + C32827 * C1703 +
             C834 * C6427 + C32804 * C6433) *
                C32430) *
               C10306 +
           ((C832 * C1144 + C32839 * C1156 + C833 * C6425 + C32827 * C6429 +
             C834 * C6426 + C32804 * C6430) *
                C6291 +
            (C832 * C1158 + C32839 * C1171 + C833 * C6431 + C32827 * C6434 +
             C834 * C6432 + C32804 * C6435) *
                C32430) *
               C32807) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                 C31569 +
             (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                 C32435 +
             (C2795 + C2796) * C31565 + (C2797 + C2798) * C32443 +
             C2811 * C31575 + C2812 * C17833) *
                C20880 +
            ((C4669 + C4670) * C31569 + (C4671 + C4672) * C32435 +
             C5097 * C31565 + C5098 * C32443 + C4343 * C31575 +
             C4344 * C17833) *
                C32619) *
               C32491 * C470 -
           (((C4895 + C4896) * C17833 + (C4897 + C4898) * C31575 +
             (C4899 + C4900) * C32443 + (C4901 + C4902) * C31565 +
             (C5308 + C5307) * C32435 + (C5306 + C5305) * C31569) *
                C32619 +
            ((C3169 + C3170) * C17833 + (C3171 + C3172) * C31575 +
             (C3173 + C3174) * C32443 + (C3175 + C3176) * C31565 +
             (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                 C32435 +
             (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                 C31569) *
                C20880) *
               C32491 * C471) *
              C472 +
          ((((C3176 + C3175) * C31569 + (C3174 + C3173) * C32435 +
             (C3172 + C3171) * C31565 + (C3170 + C3169) * C32443 +
             (C3168 + C3167) * C31575 + (C3166 + C3165) * C17833) *
                C20880 +
            ((C4902 + C4901) * C31569 + (C4900 + C4899) * C32435 +
             (C4898 + C4897) * C31565 + (C4896 + C4895) * C32443 +
             (C2756 * C699 + C32773 * C707 + C2757 * C1508 + C32577 * C1509) *
                 C31575 +
             (C2756 * C708 + C32773 * C714 + C2757 * C1510 + C32577 * C1511) *
                 C17833) *
                C32619) *
               C32491 * C471 -
           (((C3331 + C3332) * C17833 + (C3333 + C3334) * C31575 +
             C5099 * C32443 + C5100 * C31565 + C5101 * C32435 +
             C5102 * C31569) *
                C32619 +
            ((C2806 + C2805) * C17833 + (C2804 + C2803) * C31575 +
             (C2802 + C2801) * C32443 + (C2800 + C2799) * C31565 +
             (C2798 + C2797) * C32435 + (C2796 + C2795) * C31569) *
                C20880) *
               C32491 * C470) *
              C473)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                 C31569 +
             (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                 C32435 +
             (C2795 + C2796) * C31565 + (C2797 + C2798) * C32443 +
             C2811 * C31575 + C2812 * C17833) *
                C20880 +
            ((C4669 + C4670) * C31569 + (C4671 + C4672) * C32435 +
             C5097 * C31565 + C5098 * C32443 + C4343 * C31575 +
             C4344 * C17833) *
                C32619) *
               C584 -
           (((C4673 + C4674) * C17833 + (C4675 + C4676) * C31575 +
             C13286 * C32443 + C13287 * C31565 + (C4681 + C4682) * C32435 +
             (C4683 + C4684) * C31569) *
                C32619 +
            (C5099 * C17833 + C5100 * C31575 + C5101 * C32443 + C5102 * C31565 +
             (C4672 + C4671) * C32435 + (C4670 + C4669) * C31569) *
                C20880) *
               C585) *
              C470 +
          ((((C5305 + C5306) * C31569 + (C5307 + C5308) * C32435 +
             (C4902 + C4901) * C31565 + (C4900 + C4899) * C32443 +
             (C4898 + C4897) * C31575 + (C4896 + C4895) * C17833) *
                C20880 +
            ((C13490 + C13491) * C31569 + (C13492 + C13493) * C32435 +
             (C13091 + C13090) * C31565 + (C13089 + C13088) * C32443 +
             (C2756 * C1147 + C32773 * C1163 + C2757 * C1148 + C32577 * C1164) *
                 C31575 +
             (C2756 * C1165 + C32773 * C1174 + C2757 * C1166 + C32577 * C1175) *
                 C17833) *
                C32619) *
               C585 -
           (((C4895 + C4896) * C17833 + (C4897 + C4898) * C31575 +
             (C4899 + C4900) * C32443 + (C4901 + C4902) * C31565 +
             (C5308 + C5307) * C32435 + (C5306 + C5305) * C31569) *
                C32619 +
            ((C3169 + C3170) * C17833 + (C3171 + C3172) * C31575 +
             (C3173 + C3174) * C32443 + (C3175 + C3176) * C31565 +
             (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                 C32435 +
             (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                 C31569) *
                C20880) *
               C584) *
              C471) *
         C32465) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C31569 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C32435 +
            (C2795 + C2796) * C31565 + (C2797 + C2798) * C32443 +
            C2811 * C31575 + C2812 * C17833) *
               C20880 +
           ((C4669 + C4670) * C31569 + (C4671 + C4672) * C32435 +
            C5097 * C31565 + C5098 * C32443 + C4343 * C31575 + C4344 * C17833) *
               C32619) *
              C32491 * C239 -
          (((C4895 + C4896) * C17833 + (C4897 + C4898) * C31575 +
            (C4899 + C4900) * C32443 + (C4901 + C4902) * C31565 +
            (C5308 + C5307) * C32435 + (C5306 + C5305) * C31569) *
               C32619 +
           ((C3169 + C3170) * C17833 + (C3171 + C3172) * C31575 +
            (C3173 + C3174) * C32443 + (C3175 + C3176) * C31565 +
            (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                C32435 +
            (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                C31569) *
               C20880) *
              C32491 * C240 +
          (((C2756 * C248 + C32773 * C263 + C2757 * C1008 + C32577 * C1017) *
                C31569 +
            (C2756 * C264 + C32773 * C278 + C2757 * C1016 + C32577 * C1026) *
                C32435 +
            (C2756 * C249 + C32773 * C265 + C2757 * C1007 + C32577 * C1015) *
                C31565 +
            (C2756 * C266 + C32773 * C279 + C2757 * C1014 + C32577 * C1025) *
                C32443 +
            (C2756 * C250 + C32773 * C267 + C2757 * C1006 + C32577 * C1013) *
                C31575 +
            (C2756 * C268 + C32773 * C280 + C2757 * C1012 + C32577 * C1024) *
                C17833) *
               C20880 +
           ((C2756 * C1142 + C32773 * C1154 + C2757 * C1694 + C32577 * C1697) *
                C31569 +
            (C2756 * C1153 + C32773 * C1169 + C2757 * C1698 + C32577 * C1703) *
                C32435 +
            (C2756 * C1141 + C32773 * C1152 + C2757 * C1695 + C32577 * C1699) *
                C31565 +
            (C2756 * C1151 + C32773 * C1168 + C2757 * C1700 + C32577 * C1704) *
                C32443 +
            (C2756 * C1140 + C32773 * C1150 + C2757 * C1696 + C32577 * C1701) *
                C31575 +
            (C2756 * C1149 + C32773 * C1167 + C2757 * C1702 + C32577 * C1705) *
                C17833) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C31569 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C32435 +
            (C2795 + C2796) * C31565 + (C2797 + C2798) * C32443 +
            C2811 * C31575 + C2812 * C17833) *
               C20880 +
           ((C4669 + C4670) * C31569 + (C4671 + C4672) * C32435 +
            C5097 * C31565 + C5098 * C32443 + C4343 * C31575 + C4344 * C17833) *
               C32619) *
              C32491 * C32477 * C110 -
          (((C3331 + C3332) * C17833 + (C3333 + C3334) * C31575 +
            C5099 * C32443 + C5100 * C31565 + C5101 * C32435 + C5102 * C31569) *
               C32619 +
           ((C2806 + C2805) * C17833 + (C2804 + C2803) * C31575 +
            (C2802 + C2801) * C32443 + (C2800 + C2799) * C31565 +
            (C2798 + C2797) * C32435 + (C2796 + C2795) * C31569) *
               C20880) *
              C32491 * C32477 * C111 +
          ((C2811 * C31569 + C2812 * C32435 + C2813 * C31565 + C2814 * C32443 +
            (C2810 + C2809) * C31575 + (C2808 + C2807) * C17833) *
               C20880 +
           (C4343 * C31569 + C4344 * C32435 + (C3334 + C3333) * C31565 +
            (C3332 + C3331) * C32443 +
            (C2756 * C348 + C32773 * C359 + C2757 * C700 + C32577 * C709) *
                C31575 +
            (C2756 * C358 + C32773 * C378 + C2757 * C710 + C32577 * C715) *
                C17833) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C31569 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C32435 +
            (C2795 + C2796) * C31565 + (C2797 + C2798) * C32443 +
            C2811 * C31575 + C2812 * C17833) *
               C20880 +
           ((C4669 + C4670) * C31569 + (C4671 + C4672) * C32435 +
            C5097 * C31565 + C5098 * C32443 + C4343 * C31575 + C4344 * C17833) *
               C32619) *
              C345 -
          (((C4673 + C4674) * C17833 + (C4675 + C4676) * C31575 +
            C13286 * C32443 + C13287 * C31565 + (C4681 + C4682) * C32435 +
            (C4683 + C4684) * C31569) *
               C32619 +
           (C5099 * C17833 + C5100 * C31575 + C5101 * C32443 + C5102 * C31565 +
            (C4672 + C4671) * C32435 + (C4670 + C4669) * C31569) *
               C20880) *
              C346 +
          ((C12851 * C31569 + C12852 * C32435 + C12853 * C31565 +
            C12854 * C32443 + (C4676 + C4675) * C31575 +
            (C4674 + C4673) * C17833) *
               C20880 +
           (C14530 * C31569 + C14531 * C32435 + (C12878 + C12877) * C31565 +
            (C12876 + C12875) * C32443 +
            (C2756 * C2057 + C32773 * C2064 + C2757 * C2618 + C32577 * C2623) *
                C31575 +
            (C2756 * C2063 + C32773 * C2075 + C2757 * C2624 + C32577 * C2627) *
                C17833) *
               C32619) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                 C31569 +
             (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                 C32435 +
             (C2795 + C2796) * C31565 + (C2797 + C2798) * C32443 +
             C2811 * C31575 + C2812 * C17833) *
                C20880 +
            ((C4669 + C4670) * C31569 + (C4671 + C4672) * C32435 +
             C5097 * C31565 + C5098 * C32443 + C4343 * C31575 +
             C4344 * C17833) *
                C32619) *
               C584 -
           (((C4673 + C4674) * C17833 + (C4675 + C4676) * C31575 +
             C13286 * C32443 + C13287 * C31565 + (C4681 + C4682) * C32435 +
             (C4683 + C4684) * C31569) *
                C32619 +
            (C5099 * C17833 + C5100 * C31575 + C5101 * C32443 + C5102 * C31565 +
             (C4672 + C4671) * C32435 + (C4670 + C4669) * C31569) *
                C20880) *
               C585) *
              C32477 * C472 +
          (((C5097 * C31569 + C5098 * C32435 + C4343 * C31565 + C4344 * C32443 +
             (C3334 + C3333) * C31575 + (C3332 + C3331) * C17833) *
                C20880 +
            (C12853 * C31569 + C12854 * C32435 + (C4676 + C4675) * C31565 +
             (C4674 + C4673) * C32443 +
             (C2756 * C356 + C32773 * C374 + C2757 * C2280 + C32577 * C2281) *
                 C31575 +
             (C2756 * C375 + C32773 * C386 + C2757 * C2282 + C32577 * C2283) *
                 C17833) *
                C32619) *
               C585 -
           (((C3331 + C3332) * C17833 + (C3333 + C3334) * C31575 +
             C5099 * C32443 + C5100 * C31565 + C5101 * C32435 +
             C5102 * C31569) *
                C32619 +
            ((C2806 + C2805) * C17833 + (C2804 + C2803) * C31575 +
             (C2802 + C2801) * C32443 + (C2800 + C2799) * C31565 +
             (C2798 + C2797) * C32435 + (C2796 + C2795) * C31569) *
                C20880) *
               C584) *
              C32477 * C473)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C31569 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C32435 +
            (C2795 + C2796) * C31565 + (C2797 + C2798) * C32443 +
            C2811 * C31575 + C2812 * C17833) *
               C20880 +
           ((C4669 + C4670) * C31569 + (C4671 + C4672) * C32435 +
            C5097 * C31565 + C5098 * C32443 + C4343 * C31575 + C4344 * C17833) *
               C32619) *
              C32491 * C32477 * C110 -
          (((C3331 + C3332) * C17833 + (C3333 + C3334) * C31575 +
            C5099 * C32443 + C5100 * C31565 + C5101 * C32435 + C5102 * C31569) *
               C32619 +
           ((C2806 + C2805) * C17833 + (C2804 + C2803) * C31575 +
            (C2802 + C2801) * C32443 + (C2800 + C2799) * C31565 +
            (C2798 + C2797) * C32435 + (C2796 + C2795) * C31569) *
               C20880) *
              C32491 * C32477 * C111 +
          ((C2811 * C31569 + C2812 * C32435 + C2813 * C31565 + C2814 * C32443 +
            (C2810 + C2809) * C31575 + (C2808 + C2807) * C17833) *
               C20880 +
           (C4343 * C31569 + C4344 * C32435 + (C3334 + C3333) * C31565 +
            (C3332 + C3331) * C32443 +
            (C2756 * C348 + C32773 * C359 + C2757 * C700 + C32577 * C709) *
                C31575 +
            (C2756 * C358 + C32773 * C378 + C2757 * C710 + C32577 * C715) *
                C17833) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C31569 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C32435 +
            (C2795 + C2796) * C31565 + (C2797 + C2798) * C32443 +
            C2811 * C31575 + C2812 * C17833) *
               C20880 +
           ((C4669 + C4670) * C31569 + (C4671 + C4672) * C32435 +
            C5097 * C31565 + C5098 * C32443 + C4343 * C31575 + C4344 * C17833) *
               C32619) *
              C32491 * C239 -
          (((C4895 + C4896) * C17833 + (C4897 + C4898) * C31575 +
            (C4899 + C4900) * C32443 + (C4901 + C4902) * C31565 +
            (C5308 + C5307) * C32435 + (C5306 + C5305) * C31569) *
               C32619 +
           ((C3169 + C3170) * C17833 + (C3171 + C3172) * C31575 +
            (C3173 + C3174) * C32443 + (C3175 + C3176) * C31565 +
            (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                C32435 +
            (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                C31569) *
               C20880) *
              C32491 * C240 +
          (((C2756 * C248 + C32773 * C263 + C2757 * C1008 + C32577 * C1017) *
                C31569 +
            (C2756 * C264 + C32773 * C278 + C2757 * C1016 + C32577 * C1026) *
                C32435 +
            (C2756 * C249 + C32773 * C265 + C2757 * C1007 + C32577 * C1015) *
                C31565 +
            (C2756 * C266 + C32773 * C279 + C2757 * C1014 + C32577 * C1025) *
                C32443 +
            (C2756 * C250 + C32773 * C267 + C2757 * C1006 + C32577 * C1013) *
                C31575 +
            (C2756 * C268 + C32773 * C280 + C2757 * C1012 + C32577 * C1024) *
                C17833) *
               C20880 +
           ((C2756 * C1142 + C32773 * C1154 + C2757 * C1694 + C32577 * C1697) *
                C31569 +
            (C2756 * C1153 + C32773 * C1169 + C2757 * C1698 + C32577 * C1703) *
                C32435 +
            (C2756 * C1141 + C32773 * C1152 + C2757 * C1695 + C32577 * C1699) *
                C31565 +
            (C2756 * C1151 + C32773 * C1168 + C2757 * C1700 + C32577 * C1704) *
                C32443 +
            (C2756 * C1140 + C32773 * C1150 + C2757 * C1696 + C32577 * C1701) *
                C31575 +
            (C2756 * C1149 + C32773 * C1167 + C2757 * C1702 + C32577 * C1705) *
                C17833) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                 C15877 +
             (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                 C15871 +
             (C2795 + C2796) * C15878 + (C2797 + C2798) * C32440) *
                C32615 +
            ((C4669 + C4670) * C15877 + (C4671 + C4672) * C15871 +
             C5097 * C15878 + C5098 * C32440) *
                C32622 +
            C25563 * C24412) *
               C32491 * C470 -
           (((C13088 + C13089) * C32440 + (C13090 + C13091) * C15878 +
             (C13493 + C13492) * C15871 + (C13491 + C13490) * C15877) *
                C24412 +
            ((C4899 + C4900) * C32440 + (C4901 + C4902) * C15878 +
             (C5308 + C5307) * C15871 + (C5306 + C5305) * C15877) *
                C32622 +
            ((C3173 + C3174) * C32440 + (C3175 + C3176) * C15878 +
             (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                 C15871 +
             (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                 C15877) *
                C32615) *
               C32491 * C471) *
              C472 +
          ((((C3176 + C3175) * C15877 + (C3174 + C3173) * C15871 +
             (C3172 + C3171) * C15878 + (C3170 + C3169) * C32440) *
                C32615 +
            ((C4902 + C4901) * C15877 + (C4900 + C4899) * C15871 +
             (C4898 + C4897) * C15878 + (C4896 + C4895) * C32440) *
                C32622 +
            ((C13091 + C13090) * C15877 + (C13089 + C13088) * C15871 +
             (C2756 * C1147 + C32773 * C1163 + C2757 * C1148 + C32577 * C1164) *
                 C15878 +
             (C2756 * C1165 + C32773 * C1174 + C2757 * C1166 + C32577 * C1175) *
                 C32440) *
                C24412) *
               C32491 * C471 -
           (((C4673 + C4674) * C32440 + (C4675 + C4676) * C15878 +
             C13286 * C15871 + C13287 * C15877) *
                C24412 +
            (C5099 * C32440 + C5100 * C15878 + C5101 * C15871 +
             C5102 * C15877) *
                C32622 +
            ((C2802 + C2801) * C32440 + (C2800 + C2799) * C15878 +
             (C2798 + C2797) * C15871 + (C2796 + C2795) * C15877) *
                C32615) *
               C32491 * C470) *
              C473)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                 C15877 +
             (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                 C15871 +
             (C2795 + C2796) * C15878 + (C2797 + C2798) * C32440) *
                C32615 +
            ((C4669 + C4670) * C15877 + (C4671 + C4672) * C15871 +
             C5097 * C15878 + C5098 * C32440) *
                C32622 +
            C25563 * C24412) *
               C584 -
           (((C12875 + C12876) * C32440 + (C12877 + C12878) * C15878 +
             (C12879 + C12880) * C15871 + (C12881 + C12882) * C15877) *
                C24412 +
            (C13286 * C32440 + C13287 * C15878 + (C4681 + C4682) * C15871 +
             (C4683 + C4684) * C15877) *
                C32622 +
            (C5101 * C32440 + C5102 * C15878 + (C4672 + C4671) * C15871 +
             (C4670 + C4669) * C15877) *
                C32615) *
               C585) *
              C470 +
          ((((C5305 + C5306) * C15877 + (C5307 + C5308) * C15871 +
             (C4902 + C4901) * C15878 + (C4900 + C4899) * C32440) *
                C32615 +
            ((C13490 + C13491) * C15877 + (C13492 + C13493) * C15871 +
             (C13091 + C13090) * C15878 + (C13089 + C13088) * C32440) *
                C32622 +
            ((C14946 + C14947) * C15877 + (C14948 + C14949) * C15871 +
             (C2756 * C2617 + C32773 * C2621 + C2757 * C7393 + C32577 * C7394) *
                 C15878 +
             (C2756 * C2622 + C32773 * C2626 + C2757 * C7395 + C32577 * C7396) *
                 C32440) *
                C24412) *
               C585 -
           (((C13088 + C13089) * C32440 + (C13090 + C13091) * C15878 +
             (C13493 + C13492) * C15871 + (C13491 + C13490) * C15877) *
                C24412 +
            ((C4899 + C4900) * C32440 + (C4901 + C4902) * C15878 +
             (C5308 + C5307) * C15871 + (C5306 + C5305) * C15877) *
                C32622 +
            ((C3173 + C3174) * C32440 + (C3175 + C3176) * C15878 +
             (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                 C15871 +
             (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                 C15877) *
                C32615) *
               C584) *
              C471) *
         C32465) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C15877 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C15871 +
            (C2795 + C2796) * C15878 + (C2797 + C2798) * C32440) *
               C32615 +
           ((C4669 + C4670) * C15877 + (C4671 + C4672) * C15871 +
            C5097 * C15878 + C5098 * C32440) *
               C32622 +
           (C12851 * C15877 + C12852 * C15871 + C12853 * C15878 +
            C12854 * C32440) *
               C24412) *
              C32491 * C239 -
          (((C13088 + C13089) * C32440 + (C13090 + C13091) * C15878 +
            (C13493 + C13492) * C15871 + (C13491 + C13490) * C15877) *
               C24412 +
           ((C4899 + C4900) * C32440 + (C4901 + C4902) * C15878 +
            (C5308 + C5307) * C15871 + (C5306 + C5305) * C15877) *
               C32622 +
           ((C3173 + C3174) * C32440 + (C3175 + C3176) * C15878 +
            (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                C15871 +
            (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                C15877) *
               C32615) *
              C32491 * C240 +
          (((C2756 * C248 + C32773 * C263 + C2757 * C1008 + C32577 * C1017) *
                C15877 +
            (C2756 * C264 + C32773 * C278 + C2757 * C1016 + C32577 * C1026) *
                C15871 +
            (C2756 * C249 + C32773 * C265 + C2757 * C1007 + C32577 * C1015) *
                C15878 +
            (C2756 * C266 + C32773 * C279 + C2757 * C1014 + C32577 * C1025) *
                C32440) *
               C32615 +
           ((C2756 * C1142 + C32773 * C1154 + C2757 * C1694 + C32577 * C1697) *
                C15877 +
            (C2756 * C1153 + C32773 * C1169 + C2757 * C1698 + C32577 * C1703) *
                C15871 +
            (C2756 * C1141 + C32773 * C1152 + C2757 * C1695 + C32577 * C1699) *
                C15878 +
            (C2756 * C1151 + C32773 * C1168 + C2757 * C1700 + C32577 * C1704) *
                C32440) *
               C32622 +
           ((C2756 * C1144 + C32773 * C1156 + C2757 * C6425 + C32577 * C6429) *
                C15877 +
            (C2756 * C1158 + C32773 * C1171 + C2757 * C6431 + C32577 * C6434) *
                C15871 +
            (C2756 * C1146 + C32773 * C1160 + C2757 * C7243 + C32577 * C7244) *
                C15878 +
            (C2756 * C1162 + C32773 * C1173 + C2757 * C7245 + C32577 * C7246) *
                C32440) *
               C24412) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C15877 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C15871 +
            (C2795 + C2796) * C15878 + (C2797 + C2798) * C32440) *
               C32615 +
           ((C4669 + C4670) * C15877 + (C4671 + C4672) * C15871 +
            C5097 * C15878 + C5098 * C32440) *
               C32622 +
           (C12851 * C15877 + C12852 * C15871 + C12853 * C15878 +
            C12854 * C32440) *
               C24412) *
              C32491 * C32477 * C110 -
          (((C4673 + C4674) * C32440 + (C4675 + C4676) * C15878 +
            C13286 * C15871 + C13287 * C15877) *
               C24412 +
           (C5099 * C32440 + C5100 * C15878 + C5101 * C15871 + C5102 * C15877) *
               C32622 +
           ((C2802 + C2801) * C32440 + (C2800 + C2799) * C15878 +
            (C2798 + C2797) * C15871 + (C2796 + C2795) * C15877) *
               C32615) *
              C32491 * C32477 * C111 +
          ((C2811 * C15877 + C2812 * C15871 + C2813 * C15878 + C2814 * C32440) *
               C32615 +
           (C4343 * C15877 + C4344 * C15871 + (C3334 + C3333) * C15878 +
            (C3332 + C3331) * C32440) *
               C32622 +
           ((C4676 + C4675) * C15877 + (C4674 + C4673) * C15871 +
            (C2756 * C356 + C32773 * C374 + C2757 * C2280 + C32577 * C2281) *
                C15878 +
            (C2756 * C375 + C32773 * C386 + C2757 * C2282 + C32577 * C2283) *
                C32440) *
               C24412) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C15877 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C15871 +
            (C2795 + C2796) * C15878 + (C2797 + C2798) * C32440) *
               C32615 +
           ((C4669 + C4670) * C15877 + (C4671 + C4672) * C15871 +
            C5097 * C15878 + C5098 * C32440) *
               C32622 +
           C25563 * C24412) *
              C345 -
          (((C12875 + C12876) * C32440 + (C12877 + C12878) * C15878 +
            (C12879 + C12880) * C15871 + (C12881 + C12882) * C15877) *
               C24412 +
           (C13286 * C32440 + C13287 * C15878 + (C4681 + C4682) * C15871 +
            (C4683 + C4684) * C15877) *
               C32622 +
           (C5101 * C32440 + C5102 * C15878 + (C4672 + C4671) * C15871 +
            (C4670 + C4669) * C15877) *
               C32615) *
              C346 +
          (C25563 * C32615 +
           (C14530 * C15877 + C14531 * C15871 + (C12878 + C12877) * C15878 +
            (C12876 + C12875) * C32440) *
               C32622 +
           ((C14546 + C14545) * C15877 + (C14544 + C14543) * C15871 +
            (C2756 * C2061 + C32773 * C2071 + C2757 * C12202 +
             C32577 * C12203) *
                C15878 +
            (C2756 * C2072 + C32773 * C2079 + C2757 * C12204 +
             C32577 * C12205) *
                C32440) *
               C24412) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                 C15877 +
             (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                 C15871 +
             (C2795 + C2796) * C15878 + (C2797 + C2798) * C32440) *
                C32615 +
            ((C4669 + C4670) * C15877 + (C4671 + C4672) * C15871 +
             C5097 * C15878 + C5098 * C32440) *
                C32622 +
            C25563 * C24412) *
               C584 -
           (((C12875 + C12876) * C32440 + (C12877 + C12878) * C15878 +
             (C12879 + C12880) * C15871 + (C12881 + C12882) * C15877) *
                C24412 +
            (C13286 * C32440 + C13287 * C15878 + (C4681 + C4682) * C15871 +
             (C4683 + C4684) * C15877) *
                C32622 +
            (C5101 * C32440 + C5102 * C15878 + (C4672 + C4671) * C15871 +
             (C4670 + C4669) * C15877) *
                C32615) *
               C585) *
              C32477 * C472 +
          (((C5097 * C15877 + C5098 * C15871 + C4343 * C15878 +
             C4344 * C32440) *
                C32615 +
            (C12853 * C15877 + C12854 * C15871 + (C4676 + C4675) * C15878 +
             (C4674 + C4673) * C32440) *
                C32622 +
            ((C12878 + C12877) * C15877 + (C12876 + C12875) * C15871 +
             (C2756 * C2057 + C32773 * C2064 + C2757 * C2618 + C32577 * C2623) *
                 C15878 +
             (C2756 * C2063 + C32773 * C2075 + C2757 * C2624 + C32577 * C2627) *
                 C32440) *
                C24412) *
               C585 -
           (((C4673 + C4674) * C32440 + (C4675 + C4676) * C15878 +
             C13286 * C15871 + C13287 * C15877) *
                C24412 +
            (C5099 * C32440 + C5100 * C15878 + C5101 * C15871 +
             C5102 * C15877) *
                C32622 +
            ((C2802 + C2801) * C32440 + (C2800 + C2799) * C15878 +
             (C2798 + C2797) * C15871 + (C2796 + C2795) * C15877) *
                C32615) *
               C584) *
              C32477 * C473)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C15877 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C15871 +
            (C2795 + C2796) * C15878 + (C2797 + C2798) * C32440) *
               C32615 +
           ((C4669 + C4670) * C15877 + (C4671 + C4672) * C15871 +
            C5097 * C15878 + C5098 * C32440) *
               C32622 +
           (C12851 * C15877 + C12852 * C15871 + C12853 * C15878 +
            C12854 * C32440) *
               C24412) *
              C32491 * C32477 * C110 -
          (((C4673 + C4674) * C32440 + (C4675 + C4676) * C15878 +
            C13286 * C15871 + C13287 * C15877) *
               C24412 +
           (C5099 * C32440 + C5100 * C15878 + C5101 * C15871 + C5102 * C15877) *
               C32622 +
           ((C2802 + C2801) * C32440 + (C2800 + C2799) * C15878 +
            (C2798 + C2797) * C15871 + (C2796 + C2795) * C15877) *
               C32615) *
              C32491 * C32477 * C111 +
          ((C2811 * C15877 + C2812 * C15871 + C2813 * C15878 + C2814 * C32440) *
               C32615 +
           (C4343 * C15877 + C4344 * C15871 + (C3334 + C3333) * C15878 +
            (C3332 + C3331) * C32440) *
               C32622 +
           ((C4676 + C4675) * C15877 + (C4674 + C4673) * C15871 +
            (C2756 * C356 + C32773 * C374 + C2757 * C2280 + C32577 * C2281) *
                C15878 +
            (C2756 * C375 + C32773 * C386 + C2757 * C2282 + C32577 * C2283) *
                C32440) *
               C24412) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C15877 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C15871 +
            (C2795 + C2796) * C15878 + (C2797 + C2798) * C32440) *
               C32615 +
           ((C4669 + C4670) * C15877 + (C4671 + C4672) * C15871 +
            C5097 * C15878 + C5098 * C32440) *
               C32622 +
           (C12851 * C15877 + C12852 * C15871 + C12853 * C15878 +
            C12854 * C32440) *
               C24412) *
              C32491 * C239 -
          (((C13088 + C13089) * C32440 + (C13090 + C13091) * C15878 +
            (C13493 + C13492) * C15871 + (C13491 + C13490) * C15877) *
               C24412 +
           ((C4899 + C4900) * C32440 + (C4901 + C4902) * C15878 +
            (C5308 + C5307) * C15871 + (C5306 + C5305) * C15877) *
               C32622 +
           ((C3173 + C3174) * C32440 + (C3175 + C3176) * C15878 +
            (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                C15871 +
            (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                C15877) *
               C32615) *
              C32491 * C240 +
          (((C2756 * C248 + C32773 * C263 + C2757 * C1008 + C32577 * C1017) *
                C15877 +
            (C2756 * C264 + C32773 * C278 + C2757 * C1016 + C32577 * C1026) *
                C15871 +
            (C2756 * C249 + C32773 * C265 + C2757 * C1007 + C32577 * C1015) *
                C15878 +
            (C2756 * C266 + C32773 * C279 + C2757 * C1014 + C32577 * C1025) *
                C32440) *
               C32615 +
           ((C2756 * C1142 + C32773 * C1154 + C2757 * C1694 + C32577 * C1697) *
                C15877 +
            (C2756 * C1153 + C32773 * C1169 + C2757 * C1698 + C32577 * C1703) *
                C15871 +
            (C2756 * C1141 + C32773 * C1152 + C2757 * C1695 + C32577 * C1699) *
                C15878 +
            (C2756 * C1151 + C32773 * C1168 + C2757 * C1700 + C32577 * C1704) *
                C32440) *
               C32622 +
           ((C2756 * C1144 + C32773 * C1156 + C2757 * C6425 + C32577 * C6429) *
                C15877 +
            (C2756 * C1158 + C32773 * C1171 + C2757 * C6431 + C32577 * C6434) *
                C15871 +
            (C2756 * C1146 + C32773 * C1160 + C2757 * C7243 + C32577 * C7244) *
                C15878 +
            (C2756 * C1162 + C32773 * C1173 + C2757 * C7245 + C32577 * C7246) *
                C32440) *
               C24412) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
              C834 * C248 + C32804 * C263) *
                 C15877 +
             (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
              C834 * C264 + C32804 * C278) *
                 C15871 +
             (C875 + C876 + C877) * C15878 + (C878 + C879 + C880) * C32440) *
                C20880 +
            ((C11380 + C11381 + C11382) * C15877 +
             (C11383 + C11384 + C11385) * C15871 +
             (C1548 + C1547 + C1546) * C15878 +
             (C1545 + C1544 + C1543) * C32440) *
                C32619) *
               C32491 * C470 -
           (((C22145 + C22146 + C22147) * C32440 +
             (C22148 + C22149 + C22150) * C15878 +
             (C11890 + C11889 + C11888) * C15871 +
             (C11887 + C11886 + C11885) * C15877) *
                C32619 +
            ((C1357 + C1358 + C1359) * C32440 +
             (C1360 + C1361 + C1362) * C15878 +
             (C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
              C832 * C261 + C32839 * C277) *
                 C15871 +
             (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
              C832 * C247 + C32839 * C262) *
                 C15877) *
                C20880) *
               C32491 * C471) *
              C472 +
          ((((C1362 + C1361 + C1360) * C15877 +
             (C1359 + C1358 + C1357) * C15871 +
             (C1356 + C1355 + C1354) * C15878 +
             (C1353 + C1352 + C1351) * C32440) *
                C20880 +
            ((C22150 + C22149 + C22148) * C15877 +
             (C22147 + C22146 + C22145) * C15871 +
             (C832 * C698 + C32839 * C705 + C833 * C1140 + C32827 * C1150 +
              C834 * C1696 + C32804 * C1701) *
                 C15878 +
             (C832 * C706 + C32839 * C713 + C833 * C1149 + C32827 * C1167 +
              C834 * C1702 + C32804 * C1705) *
                 C32440) *
                C32619) *
               C32491 * C471 -
           (((C1537 + C1538 + C1539) * C32440 +
             (C1540 + C1541 + C1542) * C15878 +
             (C1543 + C1544 + C1545) * C15871 +
             (C1546 + C1547 + C1548) * C15877) *
                C32619 +
            ((C886 + C885 + C884) * C32440 + (C883 + C882 + C881) * C15878 +
             (C880 + C879 + C878) * C15871 + (C877 + C876 + C875) * C15877) *
                C20880) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C15055 +
             (C113 * C127 + C32514 * C140) * C32845 + C168 * C15056 +
             C169 * C32838 + C170 * C15057 + C171 * C32825 + C172 * C15058 +
             C173 * C32808) *
                C20880 +
            (C21079 + C21080 + C21081 + C21082 + C21083 + C21084 + C21085 +
             C21086) *
                C32619) *
               C32491 * C470 -
           ((C3919 * C32808 + C3920 * C15058 + C2305 * C32825 + C2306 * C15057 +
             C2307 * C32838 + C2308 * C15056 + C2646 * C32845 +
             C2645 * C15055) *
                C32619 +
            (C497 * C32808 + C498 * C15058 + C499 * C32825 + C500 * C15057 +
             C501 * C32838 + C502 * C15056 +
             (C113 * C261 + C32514 * C277) * C32845 +
             (C113 * C247 + C32514 * C262) * C15055) *
                C20880) *
               C32491 * C471) *
              C472 +
          (((C502 * C15055 + C501 * C32845 + C500 * C15056 + C499 * C32838 +
             C498 * C15057 + C497 * C32825 + C496 * C15058 + C495 * C32808) *
                C20880 +
            (C2308 * C15055 + C2307 * C32845 + C2306 * C15056 + C2305 * C32838 +
             C3920 * C15057 + C3919 * C32825 +
             (C113 * C700 + C32514 * C709) * C15058 +
             (C113 * C710 + C32514 * C715) * C32808) *
                C32619) *
               C32491 * C471 -
           ((C607 * C32808 + C608 * C15058 + C609 * C32825 + C610 * C15057 +
             C611 * C32838 + C612 * C15056 + C613 * C32845 + C614 * C15055) *
                C32619 +
            (C175 * C32808 + C174 * C15058 + C173 * C32825 + C172 * C15057 +
             C171 * C32838 + C170 * C15056 + C169 * C32845 + C168 * C15055) *
                C20880) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C15877 +
             (C113 * C127 + C32514 * C140) * C15871 + C168 * C15878 +
             C169 * C32440) *
                C32847 +
            (C22845 + C22846 + C22847 + C22848) * C32844 + C22865 * C32835 +
            C22866 * C32820) *
               C32491 * C470 -
           ((C13948 * C32440 + C13949 * C15878 + C12406 * C15871 +
             C12405 * C15877) *
                C32820 +
            (C2303 * C32440 + C2304 * C15878 + C2648 * C15871 +
             C2647 * C15877) *
                C32835 +
            (C2307 * C32440 + C2308 * C15878 + C2646 * C15871 +
             C2645 * C15877) *
                C32844 +
            (C501 * C32440 + C502 * C15878 +
             (C113 * C261 + C32514 * C277) * C15871 +
             (C113 * C247 + C32514 * C262) * C15877) *
                C32847) *
               C32491 * C471) *
              C472 +
          (((C502 * C15877 + C501 * C15871 + C500 * C15878 + C499 * C32440) *
                C32847 +
            (C2308 * C15877 + C2307 * C15871 + C2306 * C15878 +
             C2305 * C32440) *
                C32844 +
            (C2304 * C15877 + C2303 * C15871 + C2302 * C15878 +
             C2301 * C32440) *
                C32835 +
            (C13949 * C15877 + C13948 * C15871 +
             (C113 * C2618 + C32514 * C2623) * C15878 +
             (C113 * C2624 + C32514 * C2627) * C32440) *
                C32820) *
               C32491 * C471 -
           ((C2114 * C32440 + C2115 * C15878 + C2116 * C15871 +
             C2117 * C15877) *
                C32820 +
            (C1835 * C32440 + C1834 * C15878 + C1833 * C15871 +
             C1832 * C15877) *
                C32835 +
            (C611 * C32440 + C612 * C15878 + C613 * C15871 + C614 * C15877) *
                C32844 +
            (C171 * C32440 + C170 * C15878 + C169 * C15871 + C168 * C15877) *
                C32847) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
              C834 * C248 + C32804 * C263) *
                 C15877 +
             (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
              C834 * C264 + C32804 * C278) *
                 C15871 +
             (C875 + C876 + C877) * C15878 + (C878 + C879 + C880) * C32440) *
                C20880 +
            ((C11380 + C11381 + C11382) * C15877 +
             (C11383 + C11384 + C11385) * C15871 + C22349 * C15878 +
             C22350 * C32440) *
                C32619) *
               C584 -
           (((C11714 + C11713 + C11712) * C32440 +
             (C11711 + C11710 + C11709) * C15878 +
             (C11391 + C11390 + C11389) * C15871 +
             (C11388 + C11387 + C11386) * C15877) *
                C32619 +
            (C22351 * C32440 + C22352 * C15878 +
             (C11385 + C11384 + C11383) * C15871 +
             (C11382 + C11381 + C11380) * C15877) *
                C20880) *
               C585) *
              C470 +
          ((((C11885 + C11886 + C11887) * C15877 +
             (C11888 + C11889 + C11890) * C15871 +
             (C22150 + C22149 + C22148) * C15878 +
             (C22147 + C22146 + C22145) * C32440) *
                C20880 +
            ((C11891 + C11892 + C11893) * C15877 +
             (C11894 + C11895 + C11896) * C15871 +
             (C832 * C1145 + C32839 * C1159 + C833 * C1146 + C32827 * C1160 +
              C834 * C7243 + C32804 * C7244) *
                 C15878 +
             (C832 * C1161 + C32839 * C1172 + C833 * C1162 + C32827 * C1173 +
              C834 * C7245 + C32804 * C7246) *
                 C32440) *
                C32619) *
               C585 -
           (((C22145 + C22146 + C22147) * C32440 +
             (C22148 + C22149 + C22150) * C15878 +
             (C11890 + C11889 + C11888) * C15871 +
             (C11887 + C11886 + C11885) * C15877) *
                C32619 +
            ((C1357 + C1358 + C1359) * C32440 +
             (C1360 + C1361 + C1362) * C15878 +
             (C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
              C832 * C261 + C32839 * C277) *
                 C15871 +
             (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
              C832 * C247 + C32839 * C262) *
                 C15877) *
                C20880) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C15055 +
             (C113 * C127 + C32514 * C140) * C32845 + C168 * C15056 +
             C169 * C32838 + C170 * C15057 + C171 * C32825 + C172 * C15058 +
             C173 * C32808) *
                C20880 +
            (C21079 + C21080 + C21081 + C21082 + C21083 + C21084 + C21085 +
             C21086) *
                C32619) *
               C584 -
           ((C21087 + C21088 + C21089 + C21090 + C21091 + C21092 + C21093 +
             C21094) *
                C32619 +
            (C21086 + C21085 + C21084 + C21083 + C21082 + C21081 + C21080 +
             C21079) *
                C20880) *
               C585) *
              C470 +
          (((C21493 + C21494 + C21495 + C21496 + C21497 + C21498 + C21499 +
             C21500) *
                C20880 +
            (C2647 * C15055 + C2648 * C32845 + C2304 * C15056 + C2303 * C32838 +
             C2302 * C15057 + C2301 * C32825 +
             (C113 * C2280 + C32514 * C2281) * C15058 +
             (C113 * C2282 + C32514 * C2283) * C32808) *
                C32619) *
               C585 -
           ((C21500 + C21499 + C21498 + C21497 + C21496 + C21495 + C21494 +
             C21493) *
                C32619 +
            (C497 * C32808 + C498 * C15058 + C499 * C32825 + C500 * C15057 +
             C501 * C32838 + C502 * C15056 +
             (C113 * C261 + C32514 * C277) * C32845 +
             (C113 * C247 + C32514 * C262) * C15055) *
                C20880) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C15877 +
             (C113 * C127 + C32514 * C140) * C15871 + C168 * C15878 +
             C169 * C32440) *
                C32847 +
            (C22845 + C22846 + C22847 + C22848) * C32844 + C22865 * C32835 +
            C22866 * C32820) *
               C584 -
           ((C22857 + C22858 + C22859 + C22860) * C32820 +
            (C22856 + C22855 + C22854 + C22853) * C32835 +
            (C22852 + C22851 + C22850 + C22849) * C32844 +
            (C22848 + C22847 + C22846 + C22845) * C32847) *
               C585) *
              C470 +
          (((C23269 + C23270 + C23271 + C23272) * C32847 +
            (C23273 + C23274 + C23275 + C23276) * C32844 +
            (C23277 + C23278 + C23279 + C23280) * C32835 +
            (C12407 * C15877 + C12408 * C15871 +
             (C113 * C12202 + C32514 * C12203) * C15878 +
             (C113 * C12204 + C32514 * C12205) * C32440) *
                C32820) *
               C585 -
           ((C23280 + C23279 + C23278 + C23277) * C32820 +
            (C23276 + C23275 + C23274 + C23273) * C32835 +
            (C23272 + C23271 + C23270 + C23269) * C32844 +
            (C501 * C32440 + C502 * C15878 +
             (C113 * C261 + C32514 * C277) * C15871 +
             (C113 * C247 + C32514 * C262) * C15877) *
                C32847) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C32514 * C126) * C15055 +
                (C113 * C127 + C32514 * C140) * C32845 + C168 * C15056 +
                C169 * C32838 + C170 * C15057 + C171 * C32825 + C172 * C15058 +
                C173 * C32808) *
                   C20880 +
               (C2110 * C15055 + C2111 * C32845 + C614 * C15056 +
                C613 * C32838 + C612 * C15057 + C611 * C32825 + C610 * C15058 +
                C609 * C32808) *
                   C32619) *
                  C32491 * C32477 * C110 -
              ((C607 * C32808 + C608 * C15058 + C609 * C32825 + C610 * C15057 +
                C611 * C32838 + C612 * C15056 + C613 * C32845 + C614 * C15055) *
                   C32619 +
               (C175 * C32808 + C174 * C15058 + C173 * C32825 + C172 * C15057 +
                C171 * C32838 + C170 * C15056 + C169 * C32845 + C168 * C15055) *
                   C20880) *
                  C32491 * C32477 * C111 +
              ((C170 * C15055 + C171 * C32845 + C172 * C15056 + C173 * C32838 +
                C174 * C15057 + C175 * C32825 + C177 * C15058 + C176 * C32808) *
                   C20880 +
               (C612 * C15055 + C611 * C32845 + C610 * C15056 + C609 * C32838 +
                C608 * C15057 + C607 * C32825 +
                (C113 * C586 + C32514 * C587) * C15058 +
                (C113 * C588 + C32514 * C589) * C32808) *
                   C32619) *
                  C32491 * C32477 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C32514 * C126) * C15055 +
                (C113 * C127 + C32514 * C140) * C32845 + C168 * C15056 +
                C169 * C32838 + C170 * C15057 + C171 * C32825 + C172 * C15058 +
                C173 * C32808) *
                   C20880 +
               (C2110 * C15055 + C2111 * C32845 + C614 * C15056 +
                C613 * C32838 + C612 * C15057 + C611 * C32825 + C610 * C15058 +
                C609 * C32808) *
                   C32619) *
                  C32491 * C239 -
              ((C3919 * C32808 + C3920 * C15058 + C2305 * C32825 +
                C2306 * C15057 + C2307 * C32838 + C2308 * C15056 +
                C2646 * C32845 + C2645 * C15055) *
                   C32619 +
               (C497 * C32808 + C498 * C15058 + C499 * C32825 + C500 * C15057 +
                C501 * C32838 + C502 * C15056 +
                (C113 * C261 + C32514 * C277) * C32845 +
                (C113 * C247 + C32514 * C262) * C15055) *
                   C20880) *
                  C32491 * C240 +
              (((C113 * C248 + C32514 * C263) * C15055 +
                (C113 * C264 + C32514 * C278) * C32845 +
                (C113 * C249 + C32514 * C265) * C15056 +
                (C113 * C266 + C32514 * C279) * C32838 +
                (C113 * C250 + C32514 * C267) * C15057 +
                (C113 * C268 + C32514 * C280) * C32825 +
                (C113 * C251 + C32514 * C269) * C15058 +
                (C113 * C270 + C32514 * C281) * C32808) *
                   C20880 +
               ((C113 * C1142 + C32514 * C1154) * C15055 +
                (C113 * C1153 + C32514 * C1169) * C32845 +
                (C113 * C1141 + C32514 * C1152) * C15056 +
                (C113 * C1151 + C32514 * C1168) * C32838 +
                (C113 * C1140 + C32514 * C1150) * C15057 +
                (C113 * C1149 + C32514 * C1167) * C32825 +
                (C113 * C1508 + C32514 * C1509) * C15058 +
                (C113 * C1510 + C32514 * C1511) * C32808) *
                   C32619) *
                  C32491 * C241) *
             C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C15055 +
            (C113 * C127 + C32514 * C140) * C32845 + C168 * C15056 +
            C169 * C32838 + C170 * C15057 + C171 * C32825 + C172 * C15058 +
            C173 * C32808) *
               C20880 +
           (C21079 + C21080 + C21081 + C21082 + C21083 + C21084 + C21085 +
            C21086) *
               C32619) *
              C345 -
          ((C21087 + C21088 + C21089 + C21090 + C21091 + C21092 + C21093 +
            C21094) *
               C32619 +
           (C21086 + C21085 + C21084 + C21083 + C21082 + C21081 + C21080 +
            C21079) *
               C20880) *
              C346 +
          ((C21094 + C21093 + C21092 + C21091 + C21090 + C21089 + C21088 +
            C21087) *
               C20880 +
           (C2119 * C15055 + C2118 * C32845 + C2117 * C15056 + C2116 * C32838 +
            C2115 * C15057 + C2114 * C32825 +
            (C113 * C2454 + C32514 * C2455) * C15058 +
            (C113 * C2456 + C32514 * C2457) * C32808) *
               C32619) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C15877 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C15871 +
            (C875 + C876 + C877) * C15878 + (C878 + C879 + C880) * C32440) *
               C20880 +
           ((C11380 + C11381 + C11382) * C15877 +
            (C11383 + C11384 + C11385) * C15871 +
            (C1548 + C1547 + C1546) * C15878 +
            (C1545 + C1544 + C1543) * C32440) *
               C32619) *
              C32491 * C32477 * C110 -
          (((C1537 + C1538 + C1539) * C32440 +
            (C1540 + C1541 + C1542) * C15878 +
            (C1543 + C1544 + C1545) * C15871 +
            (C1546 + C1547 + C1548) * C15877) *
               C32619 +
           ((C886 + C885 + C884) * C32440 + (C883 + C882 + C881) * C15878 +
            (C880 + C879 + C878) * C15871 + (C877 + C876 + C875) * C15877) *
               C20880) *
              C32491 * C32477 * C111 +
          ((C895 * C15877 + C896 * C15871 + (C892 + C891 + C890) * C15878 +
            (C889 + C888 + C887) * C32440) *
               C20880 +
           ((C1542 + C1541 + C1540) * C15877 +
            (C1539 + C1538 + C1537) * C15871 +
            (C832 * C349 + C32839 * C361 + C833 * C699 + C32827 * C707 +
             C834 * C1508 + C32804 * C1509) *
                C15878 +
            (C832 * C360 + C32839 * C379 + C833 * C708 + C32827 * C714 +
             C834 * C1510 + C32804 * C1511) *
                C32440) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C15877 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C15871 +
            (C875 + C876 + C877) * C15878 + (C878 + C879 + C880) * C32440) *
               C20880 +
           ((C11380 + C11381 + C11382) * C15877 +
            (C11383 + C11384 + C11385) * C15871 +
            (C1548 + C1547 + C1546) * C15878 +
            (C1545 + C1544 + C1543) * C32440) *
               C32619) *
              C32491 * C239 -
          (((C834 * C1700 + C32804 * C1704 + C833 * C1151 + C32827 * C1168 +
             C832 * C704 + C32839 * C712) *
                C32440 +
            (C834 * C1695 + C32804 * C1699 + C833 * C1141 + C32827 * C1152 +
             C832 * C697 + C32839 * C703) *
                C15878 +
            (C11890 + C11889 + C11888) * C15871 +
            (C11887 + C11886 + C11885) * C15877) *
               C32619 +
           ((C1357 + C1358 + C1359) * C32440 +
            (C1360 + C1361 + C1362) * C15878 +
            (C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
             C832 * C261 + C32839 * C277) *
                C15871 +
            (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
             C832 * C247 + C32839 * C262) *
                C15877) *
               C20880) *
              C32491 * C240 +
          (((C832 * C248 + C32839 * C263 + C833 * C1008 + C32827 * C1017 +
             C834 * C1009 + C32804 * C1018) *
                C15877 +
            (C832 * C264 + C32839 * C278 + C833 * C1016 + C32827 * C1026 +
             C834 * C1019 + C32804 * C1027) *
                C15871 +
            (C832 * C249 + C32839 * C265 + C833 * C1007 + C32827 * C1015 +
             C834 * C1010 + C32804 * C1020) *
                C15878 +
            (C832 * C266 + C32839 * C279 + C833 * C1014 + C32827 * C1025 +
             C834 * C1021 + C32804 * C1028) *
                C32440) *
               C20880 +
           ((C832 * C1142 + C32839 * C1154 + C833 * C1694 + C32827 * C1697 +
             C834 * C6424 + C32804 * C6428) *
                C15877 +
            (C832 * C1153 + C32839 * C1169 + C833 * C1698 + C32827 * C1703 +
             C834 * C6427 + C32804 * C6433) *
                C15871 +
            (C832 * C1141 + C32839 * C1152 + C833 * C1695 + C32827 * C1699 +
             C834 * C6604 + C32804 * C6605) *
                C15878 +
            (C832 * C1151 + C32839 * C1168 + C833 * C1700 + C32827 * C1704 +
             C834 * C6606 + C32804 * C6607) *
                C32440) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C15877 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C15871 +
            (C875 + C876 + C877) * C15878 + (C878 + C879 + C880) * C32440) *
               C20880 +
           ((C11380 + C11381 + C11382) * C15877 +
            (C11383 + C11384 + C11385) * C15871 +
            (C1548 + C1547 + C1546) * C15878 +
            (C1545 + C1544 + C1543) * C32440) *
               C32619) *
              C345 -
          (((C11714 + C11713 + C11712) * C32440 +
            (C11711 + C11710 + C11709) * C15878 +
            (C11391 + C11390 + C11389) * C15871 +
            (C11388 + C11387 + C11386) * C15877) *
               C32619 +
           ((C1543 + C1544 + C1545) * C32440 +
            (C1546 + C1547 + C1548) * C15878 +
            (C11385 + C11384 + C11383) * C15871 +
            (C11382 + C11381 + C11380) * C15877) *
               C20880) *
              C346 +
          ((C11400 * C15877 + C11401 * C15871 +
            (C11709 + C11710 + C11711) * C15878 +
            (C11712 + C11713 + C11714) * C32440) *
               C20880 +
           ((C11397 + C11396 + C11395) * C15877 +
            (C11394 + C11393 + C11392) * C15871 +
            (C832 * C2058 + C32839 * C2066 + C833 * C2617 + C32827 * C2621 +
             C834 * C7393 + C32804 * C7394) *
                C15878 +
            (C832 * C2065 + C32839 * C2076 + C833 * C2622 + C32827 * C2626 +
             C834 * C7395 + C32804 * C7396) *
                C32440) *
               C32619) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C15877 +
            (C113 * C127 + C32514 * C140) * C15871 + C168 * C15878 +
            C169 * C32440) *
               C32847 +
           (C2110 * C15877 + C2111 * C15871 + C614 * C15878 + C613 * C32440) *
               C32844 +
           (C2112 * C15877 + C2113 * C15871 + C1832 * C15878 + C1833 * C32440) *
               C32835 +
           (C2119 * C15877 + C2118 * C15871 + C2117 * C15878 + C2116 * C32440) *
               C32820) *
              C32491 * C32477 * C110 -
          ((C2114 * C32440 + C2115 * C15878 + C2116 * C15871 + C2117 * C15877) *
               C32820 +
           (C1835 * C32440 + C1834 * C15878 + C1833 * C15871 + C1832 * C15877) *
               C32835 +
           (C611 * C32440 + C612 * C15878 + C613 * C15871 + C614 * C15877) *
               C32844 +
           (C171 * C32440 + C170 * C15878 + C169 * C15871 + C168 * C15877) *
               C32847) *
              C32491 * C32477 * C111 +
          ((C170 * C15877 + C171 * C15871 + C172 * C15878 + C173 * C32440) *
               C32847 +
           (C612 * C15877 + C611 * C15871 + C610 * C15878 + C609 * C32440) *
               C32844 +
           (C1834 * C15877 + C1835 * C15871 + C1837 * C15878 + C1836 * C32440) *
               C32835 +
           (C2115 * C15877 + C2114 * C15871 +
            (C113 * C2454 + C32514 * C2455) * C15878 +
            (C113 * C2456 + C32514 * C2457) * C32440) *
               C32820) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C15877 +
            (C113 * C127 + C32514 * C140) * C15871 + C168 * C15878 +
            C169 * C32440) *
               C32847 +
           (C2110 * C15877 + C2111 * C15871 + C614 * C15878 + C613 * C32440) *
               C32844 +
           (C2112 * C15877 + C2113 * C15871 + C1832 * C15878 + C1833 * C32440) *
               C32835 +
           (C2119 * C15877 + C2118 * C15871 + C2117 * C15878 + C2116 * C32440) *
               C32820) *
              C32491 * C239 -
          ((C13948 * C32440 + C13949 * C15878 + C12406 * C15871 +
            C12405 * C15877) *
               C32820 +
           (C2303 * C32440 + C2304 * C15878 + C2648 * C15871 + C2647 * C15877) *
               C32835 +
           (C2307 * C32440 + C2308 * C15878 + C2646 * C15871 + C2645 * C15877) *
               C32844 +
           (C501 * C32440 + C502 * C15878 +
            (C113 * C261 + C32514 * C277) * C15871 +
            (C113 * C247 + C32514 * C262) * C15877) *
               C32847) *
              C32491 * C240 +
          (((C113 * C248 + C32514 * C263) * C15877 +
            (C113 * C264 + C32514 * C278) * C15871 +
            (C113 * C249 + C32514 * C265) * C15878 +
            (C113 * C266 + C32514 * C279) * C32440) *
               C32847 +
           ((C113 * C1142 + C32514 * C1154) * C15877 +
            (C113 * C1153 + C32514 * C1169) * C15871 +
            (C113 * C1141 + C32514 * C1152) * C15878 +
            (C113 * C1151 + C32514 * C1168) * C32440) *
               C32844 +
           ((C113 * C1144 + C32514 * C1156) * C15877 +
            (C113 * C1158 + C32514 * C1171) * C15871 +
            (C113 * C1146 + C32514 * C1160) * C15878 +
            (C113 * C1162 + C32514 * C1173) * C32440) *
               C32835 +
           ((C113 * C7024 + C32514 * C7028) * C15877 +
            (C113 * C7027 + C32514 * C7033) * C15871 +
            (C113 * C7393 + C32514 * C7394) * C15878 +
            (C113 * C7395 + C32514 * C7396) * C32440) *
               C32820) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C15877 +
            (C113 * C127 + C32514 * C140) * C15871 + C168 * C15878 +
            C169 * C32440) *
               C32847 +
           (C22845 + C22846 + C22847 + C22848) * C32844 + C22865 * C32835 +
           C22866 * C32820) *
              C345 -
          ((C22857 + C22858 + C22859 + C22860) * C32820 +
           (C22856 + C22855 + C22854 + C22853) * C32835 +
           (C22852 + C22851 + C22850 + C22849) * C32844 +
           (C22848 + C22847 + C22846 + C22845) * C32847) *
              C346 +
          (C22865 * C32847 + C22866 * C32844 +
           (C22860 + C22859 + C22858 + C22857) * C32835 +
           (C12115 * C15877 + C12114 * C15871 +
            (C113 * C12288 + C32514 * C12289) * C15878 +
            (C113 * C12290 + C32514 * C12291) * C32440) *
               C32820) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
              C834 * C248 + C32804 * C263) *
                 C15877 +
             (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
              C834 * C264 + C32804 * C278) *
                 C15871 +
             (C875 + C876 + C877) * C15878 + (C878 + C879 + C880) * C32440) *
                C20880 +
            ((C11380 + C11381 + C11382) * C15877 +
             (C11383 + C11384 + C11385) * C15871 + C22349 * C15878 +
             C22350 * C32440) *
                C32619) *
               C584 -
           (((C11714 + C11713 + C11712) * C32440 +
             (C11711 + C11710 + C11709) * C15878 +
             (C11391 + C11390 + C11389) * C15871 +
             (C11388 + C11387 + C11386) * C15877) *
                C32619 +
            (C22351 * C32440 + C22352 * C15878 +
             (C11385 + C11384 + C11383) * C15871 +
             (C11382 + C11381 + C11380) * C15877) *
                C20880) *
               C585) *
              C32477 * C472 +
          (((C22349 * C15877 + C22350 * C15871 +
             (C1542 + C1541 + C1540) * C15878 +
             (C1539 + C1538 + C1537) * C32440) *
                C20880 +
            ((C11709 + C11710 + C11711) * C15877 +
             (C11712 + C11713 + C11714) * C15871 +
             (C832 * C355 + C32839 * C372 + C833 * C1147 + C32827 * C1163 +
              C834 * C1148 + C32804 * C1164) *
                 C15878 +
             (C832 * C373 + C32839 * C385 + C833 * C1165 + C32827 * C1174 +
              C834 * C1166 + C32804 * C1175) *
                 C32440) *
                C32619) *
               C585 -
           (((C1537 + C1538 + C1539) * C32440 +
             (C1540 + C1541 + C1542) * C15878 + C22351 * C15871 +
             C22352 * C15877) *
                C32619 +
            ((C886 + C885 + C884) * C32440 + (C883 + C882 + C881) * C15878 +
             (C880 + C879 + C878) * C15871 + (C877 + C876 + C875) * C15877) *
                C20880) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C15055 +
             (C113 * C127 + C32514 * C140) * C32845 + C168 * C15056 +
             C169 * C32838 + C170 * C15057 + C171 * C32825 + C172 * C15058 +
             C173 * C32808) *
                C20880 +
            (C21079 + C21080 + C21081 + C21082 + C21083 + C21084 + C21085 +
             C21086) *
                C32619) *
               C584 -
           ((C21087 + C21088 + C21089 + C21090 + C21091 + C21092 + C21093 +
             C21094) *
                C32619 +
            (C21086 + C21085 + C21084 + C21083 + C21082 + C21081 + C21080 +
             C21079) *
                C20880) *
               C585) *
              C32477 * C472 +
          (((C21355 + C21356 + C21357 + C21358 + C21359 + C21360 + C21361 +
             C21362) *
                C20880 +
            (C1832 * C15055 + C1833 * C32845 + C1834 * C15056 + C1835 * C32838 +
             C1837 * C15057 + C1836 * C32825 +
             (C113 * C357 + C32514 * C376) * C15058 +
             (C113 * C377 + C32514 * C387) * C32808) *
                C32619) *
               C585 -
           ((C21362 + C21361 + C21360 + C21359 + C21358 + C21357 + C21356 +
             C21355) *
                C32619 +
            (C175 * C32808 + C174 * C15058 + C173 * C32825 + C172 * C15057 +
             C171 * C32838 + C170 * C15056 + C169 * C32845 + C168 * C15055) *
                C20880) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C15877 +
             (C113 * C127 + C32514 * C140) * C15871 + C168 * C15878 +
             C169 * C32440) *
                C32847 +
            (C22845 + C22846 + C22847 + C22848) * C32844 + C22865 * C32835 +
            C22866 * C32820) *
               C584 -
           ((C22857 + C22858 + C22859 + C22860) * C32820 +
            (C22856 + C22855 + C22854 + C22853) * C32835 +
            (C22852 + C22851 + C22850 + C22849) * C32844 +
            (C22848 + C22847 + C22846 + C22845) * C32847) *
               C585) *
              C32477 * C472 +
          (((C23127 + C23128 + C23129 + C23130) * C32847 +
            (C23131 + C23132 + C23133 + C23134) * C32844 +
            (C23135 + C23136 + C23137 + C23138) * C32835 +
            (C12303 * C15877 + C12304 * C15871 +
             (C113 * C2062 + C32514 * C2073) * C15878 +
             (C113 * C2074 + C32514 * C2080) * C32440) *
                C32820) *
               C585 -
           ((C23138 + C23137 + C23136 + C23135) * C32820 +
            (C23134 + C23133 + C23132 + C23131) * C32835 +
            (C23130 + C23129 + C23128 + C23127) * C32844 +
            (C171 * C32440 + C170 * C15878 + C169 * C15871 + C168 * C15877) *
                C32847) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C15055 +
            (C113 * C127 + C32514 * C140) * C32845 + C168 * C15056 +
            C169 * C32838 + C170 * C15057 + C171 * C32825 + C172 * C15058 +
            C173 * C32808) *
               C20880 +
           (C2110 * C15055 + C2111 * C32845 + C614 * C15056 + C613 * C32838 +
            C612 * C15057 + C611 * C32825 + C610 * C15058 + C609 * C32808) *
               C32619) *
              C32491 * C239 -
          ((C3919 * C32808 + C3920 * C15058 + C2305 * C32825 + C2306 * C15057 +
            C2307 * C32838 + C2308 * C15056 + C2646 * C32845 + C2645 * C15055) *
               C32619 +
           (C497 * C32808 + C498 * C15058 + C499 * C32825 + C500 * C15057 +
            C501 * C32838 + C502 * C15056 +
            (C113 * C261 + C32514 * C277) * C32845 +
            (C113 * C247 + C32514 * C262) * C15055) *
               C20880) *
              C32491 * C240 +
          (((C113 * C248 + C32514 * C263) * C15055 +
            (C113 * C264 + C32514 * C278) * C32845 +
            (C113 * C249 + C32514 * C265) * C15056 +
            (C113 * C266 + C32514 * C279) * C32838 +
            (C113 * C250 + C32514 * C267) * C15057 +
            (C113 * C268 + C32514 * C280) * C32825 +
            (C113 * C251 + C32514 * C269) * C15058 +
            (C113 * C270 + C32514 * C281) * C32808) *
               C20880 +
           ((C113 * C1142 + C32514 * C1154) * C15055 +
            (C113 * C1153 + C32514 * C1169) * C32845 +
            (C113 * C1141 + C32514 * C1152) * C15056 +
            (C113 * C1151 + C32514 * C1168) * C32838 +
            (C113 * C1140 + C32514 * C1150) * C15057 +
            (C113 * C1149 + C32514 * C1167) * C32825 +
            (C113 * C1508 + C32514 * C1509) * C15058 +
            (C113 * C1510 + C32514 * C1511) * C32808) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C15055 +
            (C113 * C127 + C32514 * C140) * C32845 + C168 * C15056 +
            C169 * C32838 + C170 * C15057 + C171 * C32825 + C172 * C15058 +
            C173 * C32808) *
               C20880 +
           (C2110 * C15055 + C2111 * C32845 + C614 * C15056 + C613 * C32838 +
            C612 * C15057 + C611 * C32825 + C610 * C15058 + C609 * C32808) *
               C32619) *
              C32491 * C32477 * C110 -
          ((C607 * C32808 + C608 * C15058 + C609 * C32825 + C610 * C15057 +
            C611 * C32838 + C612 * C15056 + C613 * C32845 + C614 * C15055) *
               C32619 +
           (C175 * C32808 + C174 * C15058 + C173 * C32825 + C172 * C15057 +
            C171 * C32838 + C170 * C15056 + C169 * C32845 + C168 * C15055) *
               C20880) *
              C32491 * C32477 * C111 +
          ((C170 * C15055 + C171 * C32845 + C172 * C15056 + C173 * C32838 +
            C174 * C15057 + C175 * C32825 + C177 * C15058 + C176 * C32808) *
               C20880 +
           (C612 * C15055 + C611 * C32845 + C610 * C15056 + C609 * C32838 +
            C608 * C15057 + C607 * C32825 +
            (C113 * C586 + C32514 * C587) * C15058 +
            (C113 * C588 + C32514 * C589) * C32808) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C15877 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C15871 +
            (C875 + C876 + C877) * C15878 + (C878 + C879 + C880) * C32440) *
               C20880 +
           ((C11380 + C11381 + C11382) * C15877 +
            (C11383 + C11384 + C11385) * C15871 +
            (C1548 + C1547 + C1546) * C15878 +
            (C1545 + C1544 + C1543) * C32440) *
               C32619) *
              C32491 * C32477 * C110 -
          (((C1537 + C1538 + C1539) * C32440 +
            (C1540 + C1541 + C1542) * C15878 +
            (C1543 + C1544 + C1545) * C15871 +
            (C1546 + C1547 + C1548) * C15877) *
               C32619 +
           ((C886 + C885 + C884) * C32440 + (C883 + C882 + C881) * C15878 +
            (C880 + C879 + C878) * C15871 + (C877 + C876 + C875) * C15877) *
               C20880) *
              C32491 * C32477 * C111 +
          ((C895 * C15877 + C896 * C15871 + (C892 + C891 + C890) * C15878 +
            (C889 + C888 + C887) * C32440) *
               C20880 +
           ((C1542 + C1541 + C1540) * C15877 +
            (C1539 + C1538 + C1537) * C15871 +
            (C832 * C349 + C32839 * C361 + C833 * C699 + C32827 * C707 +
             C834 * C1508 + C32804 * C1509) *
                C15878 +
            (C832 * C360 + C32839 * C379 + C833 * C708 + C32827 * C714 +
             C834 * C1510 + C32804 * C1511) *
                C32440) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C15877 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C15871 +
            (C875 + C876 + C877) * C15878 + (C878 + C879 + C880) * C32440) *
               C20880 +
           ((C11380 + C11381 + C11382) * C15877 +
            (C11383 + C11384 + C11385) * C15871 +
            (C1548 + C1547 + C1546) * C15878 +
            (C1545 + C1544 + C1543) * C32440) *
               C32619) *
              C32491 * C239 -
          (((C834 * C1700 + C32804 * C1704 + C833 * C1151 + C32827 * C1168 +
             C832 * C704 + C32839 * C712) *
                C32440 +
            (C834 * C1695 + C32804 * C1699 + C833 * C1141 + C32827 * C1152 +
             C832 * C697 + C32839 * C703) *
                C15878 +
            (C11890 + C11889 + C11888) * C15871 +
            (C11887 + C11886 + C11885) * C15877) *
               C32619 +
           ((C1357 + C1358 + C1359) * C32440 +
            (C1360 + C1361 + C1362) * C15878 +
            (C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
             C832 * C261 + C32839 * C277) *
                C15871 +
            (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
             C832 * C247 + C32839 * C262) *
                C15877) *
               C20880) *
              C32491 * C240 +
          (((C832 * C248 + C32839 * C263 + C833 * C1008 + C32827 * C1017 +
             C834 * C1009 + C32804 * C1018) *
                C15877 +
            (C832 * C264 + C32839 * C278 + C833 * C1016 + C32827 * C1026 +
             C834 * C1019 + C32804 * C1027) *
                C15871 +
            (C832 * C249 + C32839 * C265 + C833 * C1007 + C32827 * C1015 +
             C834 * C1010 + C32804 * C1020) *
                C15878 +
            (C832 * C266 + C32839 * C279 + C833 * C1014 + C32827 * C1025 +
             C834 * C1021 + C32804 * C1028) *
                C32440) *
               C20880 +
           ((C832 * C1142 + C32839 * C1154 + C833 * C1694 + C32827 * C1697 +
             C834 * C6424 + C32804 * C6428) *
                C15877 +
            (C832 * C1153 + C32839 * C1169 + C833 * C1698 + C32827 * C1703 +
             C834 * C6427 + C32804 * C6433) *
                C15871 +
            (C832 * C1141 + C32839 * C1152 + C833 * C1695 + C32827 * C1699 +
             C834 * C6604 + C32804 * C6605) *
                C15878 +
            (C832 * C1151 + C32839 * C1168 + C833 * C1700 + C32827 * C1704 +
             C834 * C6606 + C32804 * C6607) *
                C32440) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C15877 +
            (C113 * C127 + C32514 * C140) * C15871 + C168 * C15878 +
            C169 * C32440) *
               C32847 +
           (C2110 * C15877 + C2111 * C15871 + C614 * C15878 + C613 * C32440) *
               C32844 +
           (C2112 * C15877 + C2113 * C15871 + C1832 * C15878 + C1833 * C32440) *
               C32835 +
           (C2119 * C15877 + C2118 * C15871 + C2117 * C15878 + C2116 * C32440) *
               C32820) *
              C32491 * C32477 * C110 -
          ((C2114 * C32440 + C2115 * C15878 + C2116 * C15871 + C2117 * C15877) *
               C32820 +
           (C1835 * C32440 + C1834 * C15878 + C1833 * C15871 + C1832 * C15877) *
               C32835 +
           (C611 * C32440 + C612 * C15878 + C613 * C15871 + C614 * C15877) *
               C32844 +
           (C171 * C32440 + C170 * C15878 + C169 * C15871 + C168 * C15877) *
               C32847) *
              C32491 * C32477 * C111 +
          ((C170 * C15877 + C171 * C15871 + C172 * C15878 + C173 * C32440) *
               C32847 +
           (C612 * C15877 + C611 * C15871 + C610 * C15878 + C609 * C32440) *
               C32844 +
           (C1834 * C15877 + C1835 * C15871 + C1837 * C15878 + C1836 * C32440) *
               C32835 +
           (C2115 * C15877 + C2114 * C15871 +
            (C113 * C2454 + C32514 * C2455) * C15878 +
            (C113 * C2456 + C32514 * C2457) * C32440) *
               C32820) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C15877 +
            (C113 * C127 + C32514 * C140) * C15871 + C168 * C15878 +
            C169 * C32440) *
               C32847 +
           (C2110 * C15877 + C2111 * C15871 + C614 * C15878 + C613 * C32440) *
               C32844 +
           (C2112 * C15877 + C2113 * C15871 + C1832 * C15878 + C1833 * C32440) *
               C32835 +
           (C2119 * C15877 + C2118 * C15871 + C2117 * C15878 + C2116 * C32440) *
               C32820) *
              C32491 * C239 -
          ((C13948 * C32440 + C13949 * C15878 + C12406 * C15871 +
            C12405 * C15877) *
               C32820 +
           (C2303 * C32440 + C2304 * C15878 + C2648 * C15871 + C2647 * C15877) *
               C32835 +
           (C2307 * C32440 + C2308 * C15878 + C2646 * C15871 + C2645 * C15877) *
               C32844 +
           (C501 * C32440 + C502 * C15878 +
            (C113 * C261 + C32514 * C277) * C15871 +
            (C113 * C247 + C32514 * C262) * C15877) *
               C32847) *
              C32491 * C240 +
          (((C113 * C248 + C32514 * C263) * C15877 +
            (C113 * C264 + C32514 * C278) * C15871 +
            (C113 * C249 + C32514 * C265) * C15878 +
            (C113 * C266 + C32514 * C279) * C32440) *
               C32847 +
           ((C113 * C1142 + C32514 * C1154) * C15877 +
            (C113 * C1153 + C32514 * C1169) * C15871 +
            (C113 * C1141 + C32514 * C1152) * C15878 +
            (C113 * C1151 + C32514 * C1168) * C32440) *
               C32844 +
           ((C113 * C1144 + C32514 * C1156) * C15877 +
            (C113 * C1158 + C32514 * C1171) * C15871 +
            (C113 * C1146 + C32514 * C1160) * C15878 +
            (C113 * C1162 + C32514 * C1173) * C32440) *
               C32835 +
           ((C113 * C7024 + C32514 * C7028) * C15877 +
            (C113 * C7027 + C32514 * C7033) * C15871 +
            (C113 * C7393 + C32514 * C7394) * C15878 +
            (C113 * C7395 + C32514 * C7396) * C32440) *
               C32820) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C31569 +
             (C113 * C127 + C32514 * C140) * C32435 + C168 * C31565 +
             C169 * C32443 + C170 * C31575 + C171 * C17833) *
                C32615 +
            (C24634 + C24635 + C24636 + C24637 + C24638 + C24639) * C32622 +
            C24656 * C24412) *
               C32491 * C470 -
           ((C2301 * C17833 + C2302 * C31575 + C2303 * C32443 + C2304 * C31565 +
             C2648 * C32435 + C2647 * C31569) *
                C24412 +
            (C2305 * C17833 + C2306 * C31575 + C2307 * C32443 + C2308 * C31565 +
             C2646 * C32435 + C2645 * C31569) *
                C32622 +
            (C499 * C17833 + C500 * C31575 + C501 * C32443 + C502 * C31565 +
             (C113 * C261 + C32514 * C277) * C32435 +
             (C113 * C247 + C32514 * C262) * C31569) *
                C32615) *
               C32491 * C471) *
              C472 +
          (((C502 * C31569 + C501 * C32435 + C500 * C31565 + C499 * C32443 +
             C498 * C31575 + C497 * C17833) *
                C32615 +
            (C2308 * C31569 + C2307 * C32435 + C2306 * C31565 + C2305 * C32443 +
             C3920 * C31575 + C3919 * C17833) *
                C32622 +
            (C2304 * C31569 + C2303 * C32435 + C2302 * C31565 + C2301 * C32443 +
             (C113 * C2280 + C32514 * C2281) * C31575 +
             (C113 * C2282 + C32514 * C2283) * C17833) *
                C24412) *
               C32491 * C471 -
           ((C1836 * C17833 + C1837 * C31575 + C1835 * C32443 + C1834 * C31565 +
             C1833 * C32435 + C1832 * C31569) *
                C24412 +
            (C609 * C17833 + C610 * C31575 + C611 * C32443 + C612 * C31565 +
             C613 * C32435 + C614 * C31569) *
                C32622 +
            (C173 * C17833 + C172 * C31575 + C171 * C32443 + C170 * C31565 +
             C169 * C32435 + C168 * C31569) *
                C32615) *
               C32491 * C470) *
              C473)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C31569 +
             (C113 * C127 + C32514 * C140) * C32435 + C168 * C31565 +
             C169 * C32443 + C170 * C31575 + C171 * C17833) *
                C32615 +
            (C24634 + C24635 + C24636 + C24637 + C24638 + C24639) * C32622 +
            C24656 * C24412) *
               C584 -
           ((C24646 + C24647 + C24648 + C24649 + C24650 + C24651) * C24412 +
            (C24645 + C24644 + C24643 + C24642 + C24641 + C24640) * C32622 +
            (C24639 + C24638 + C24637 + C24636 + C24635 + C24634) * C32615) *
               C585) *
              C470 +
          (((C25107 + C25108 + C25109 + C25110 + C25111 + C25112) * C32615 +
            (C25113 + C25114 + C25115 + C25116 + C25117 + C25118) * C32622 +
            (C12405 * C31569 + C12406 * C32435 + C13949 * C31565 +
             C13948 * C32443 + (C113 * C2618 + C32514 * C2623) * C31575 +
             (C113 * C2624 + C32514 * C2627) * C17833) *
                C24412) *
               C585 -
           ((C25118 + C25117 + C25116 + C25115 + C25114 + C25113) * C24412 +
            (C25112 + C25111 + C25110 + C25109 + C25108 + C25107) * C32622 +
            (C499 * C17833 + C500 * C31575 + C501 * C32443 + C502 * C31565 +
             (C113 * C261 + C32514 * C277) * C32435 +
             (C113 * C247 + C32514 * C262) * C31569) *
                C32615) *
               C584) *
              C471) *
         C32465) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C31569 +
            (C113 * C127 + C32514 * C140) * C32435 + C168 * C31565 +
            C169 * C32443 + C170 * C31575 + C171 * C17833) *
               C32615 +
           (C2110 * C31569 + C2111 * C32435 + C614 * C31565 + C613 * C32443 +
            C612 * C31575 + C611 * C17833) *
               C32622 +
           (C2112 * C31569 + C2113 * C32435 + C1832 * C31565 + C1833 * C32443 +
            C1834 * C31575 + C1835 * C17833) *
               C24412) *
              C32491 * C239 -
          ((C2301 * C17833 + C2302 * C31575 + C2303 * C32443 + C2304 * C31565 +
            C2648 * C32435 + C2647 * C31569) *
               C24412 +
           (C2305 * C17833 + C2306 * C31575 + C2307 * C32443 + C2308 * C31565 +
            C2646 * C32435 + C2645 * C31569) *
               C32622 +
           (C499 * C17833 + C500 * C31575 + C501 * C32443 + C502 * C31565 +
            (C113 * C261 + C32514 * C277) * C32435 +
            (C113 * C247 + C32514 * C262) * C31569) *
               C32615) *
              C32491 * C240 +
          (((C113 * C248 + C32514 * C263) * C31569 +
            (C113 * C264 + C32514 * C278) * C32435 +
            (C113 * C249 + C32514 * C265) * C31565 +
            (C113 * C266 + C32514 * C279) * C32443 +
            (C113 * C250 + C32514 * C267) * C31575 +
            (C113 * C268 + C32514 * C280) * C17833) *
               C32615 +
           ((C113 * C1142 + C32514 * C1154) * C31569 +
            (C113 * C1153 + C32514 * C1169) * C32435 +
            (C113 * C1141 + C32514 * C1152) * C31565 +
            (C113 * C1151 + C32514 * C1168) * C32443 +
            (C113 * C1140 + C32514 * C1150) * C31575 +
            (C113 * C1149 + C32514 * C1167) * C17833) *
               C32622 +
           ((C113 * C1144 + C32514 * C1156) * C31569 +
            (C113 * C1158 + C32514 * C1171) * C32435 +
            (C113 * C1146 + C32514 * C1160) * C31565 +
            (C113 * C1162 + C32514 * C1173) * C32443 +
            (C113 * C1148 + C32514 * C1164) * C31575 +
            (C113 * C1166 + C32514 * C1175) * C17833) *
               C24412) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C31569 +
            (C113 * C127 + C32514 * C140) * C32435 + C168 * C31565 +
            C169 * C32443 + C170 * C31575 + C171 * C17833) *
               C32615 +
           (C2110 * C31569 + C2111 * C32435 + C614 * C31565 + C613 * C32443 +
            C612 * C31575 + C611 * C17833) *
               C32622 +
           (C2112 * C31569 + C2113 * C32435 + C1832 * C31565 + C1833 * C32443 +
            C1834 * C31575 + C1835 * C17833) *
               C24412) *
              C32491 * C32477 * C110 -
          ((C1836 * C17833 + C1837 * C31575 + C1835 * C32443 + C1834 * C31565 +
            C1833 * C32435 + C1832 * C31569) *
               C24412 +
           (C609 * C17833 + C610 * C31575 + C611 * C32443 + C612 * C31565 +
            C613 * C32435 + C614 * C31569) *
               C32622 +
           (C173 * C17833 + C172 * C31575 + C171 * C32443 + C170 * C31565 +
            C169 * C32435 + C168 * C31569) *
               C32615) *
              C32491 * C32477 * C111 +
          ((C170 * C31569 + C171 * C32435 + C172 * C31565 + C173 * C32443 +
            C174 * C31575 + C175 * C17833) *
               C32615 +
           (C612 * C31569 + C611 * C32435 + C610 * C31565 + C609 * C32443 +
            C608 * C31575 + C607 * C17833) *
               C32622 +
           (C1834 * C31569 + C1835 * C32435 + C1837 * C31565 + C1836 * C32443 +
            (C113 * C357 + C32514 * C376) * C31575 +
            (C113 * C377 + C32514 * C387) * C17833) *
               C24412) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C31569 +
            (C113 * C127 + C32514 * C140) * C32435 + C168 * C31565 +
            C169 * C32443 + C170 * C31575 + C171 * C17833) *
               C32615 +
           (C24634 + C24635 + C24636 + C24637 + C24638 + C24639) * C32622 +
           C24656 * C24412) *
              C345 -
          ((C24646 + C24647 + C24648 + C24649 + C24650 + C24651) * C24412 +
           (C24645 + C24644 + C24643 + C24642 + C24641 + C24640) * C32622 +
           (C24639 + C24638 + C24637 + C24636 + C24635 + C24634) * C32615) *
              C346 +
          (C24656 * C32615 +
           (C24651 + C24650 + C24649 + C24648 + C24647 + C24646) * C32622 +
           (C12112 * C31569 + C12113 * C32435 + C12303 * C31565 +
            C12304 * C32443 + (C113 * C2062 + C32514 * C2073) * C31575 +
            (C113 * C2074 + C32514 * C2080) * C17833) *
               C24412) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C31569 +
             (C113 * C127 + C32514 * C140) * C32435 + C168 * C31565 +
             C169 * C32443 + C170 * C31575 + C171 * C17833) *
                C32615 +
            (C24634 + C24635 + C24636 + C24637 + C24638 + C24639) * C32622 +
            C24656 * C24412) *
               C584 -
           ((C24646 + C24647 + C24648 + C24649 + C24650 + C24651) * C24412 +
            (C24645 + C24644 + C24643 + C24642 + C24641 + C24640) * C32622 +
            (C24639 + C24638 + C24637 + C24636 + C24635 + C24634) * C32615) *
               C585) *
              C32477 * C472 +
          (((C24949 + C24950 + C24951 + C24952 + C24953 + C24954) * C32615 +
            (C24955 + C24956 + C24957 + C24958 + C24959 + C24960) * C32622 +
            (C2117 * C31569 + C2116 * C32435 + C2115 * C31565 + C2114 * C32443 +
             (C113 * C2454 + C32514 * C2455) * C31575 +
             (C113 * C2456 + C32514 * C2457) * C17833) *
                C24412) *
               C585 -
           ((C24960 + C24959 + C24958 + C24957 + C24956 + C24955) * C24412 +
            (C24954 + C24953 + C24952 + C24951 + C24950 + C24949) * C32622 +
            (C173 * C17833 + C172 * C31575 + C171 * C32443 + C170 * C31565 +
             C169 * C32435 + C168 * C31569) *
                C32615) *
               C584) *
              C32477 * C473)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C32514 * C126) * C31569 +
                    (C113 * C127 + C32514 * C140) * C32435 + C168 * C31565 +
                    C169 * C32443 + C170 * C31575 + C171 * C17833) *
                       C32615 +
                   (C2110 * C31569 + C2111 * C32435 + C614 * C31565 +
                    C613 * C32443 + C612 * C31575 + C611 * C17833) *
                       C32622 +
                   (C2112 * C31569 + C2113 * C32435 + C1832 * C31565 +
                    C1833 * C32443 + C1834 * C31575 + C1835 * C17833) *
                       C24412) *
                      C32491 * C32477 * C110 -
                  ((C1836 * C17833 + C1837 * C31575 + C1835 * C32443 +
                    C1834 * C31565 + C1833 * C32435 + C1832 * C31569) *
                       C24412 +
                   (C609 * C17833 + C610 * C31575 + C611 * C32443 +
                    C612 * C31565 + C613 * C32435 + C614 * C31569) *
                       C32622 +
                   (C173 * C17833 + C172 * C31575 + C171 * C32443 +
                    C170 * C31565 + C169 * C32435 + C168 * C31569) *
                       C32615) *
                      C32491 * C32477 * C111 +
                  ((C170 * C31569 + C171 * C32435 + C172 * C31565 +
                    C173 * C32443 + C174 * C31575 + C175 * C17833) *
                       C32615 +
                   (C612 * C31569 + C611 * C32435 + C610 * C31565 +
                    C609 * C32443 + C608 * C31575 + C607 * C17833) *
                       C32622 +
                   (C1834 * C31569 + C1835 * C32435 + C1837 * C31565 +
                    C1836 * C32443 + (C113 * C357 + C32514 * C376) * C31575 +
                    (C113 * C377 + C32514 * C387) * C17833) *
                       C24412) *
                      C32491 * C32477 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C32514 * C126) * C31569 +
                    (C113 * C127 + C32514 * C140) * C32435 + C168 * C31565 +
                    C169 * C32443 + C170 * C31575 + C171 * C17833) *
                       C32615 +
                   (C2110 * C31569 + C2111 * C32435 + C614 * C31565 +
                    C613 * C32443 + C612 * C31575 + C611 * C17833) *
                       C32622 +
                   (C2112 * C31569 + C2113 * C32435 + C1832 * C31565 +
                    C1833 * C32443 + C1834 * C31575 + C1835 * C17833) *
                       C24412) *
                      C32491 * C239 -
                  ((C2301 * C17833 + C2302 * C31575 + C2303 * C32443 +
                    C2304 * C31565 + C2648 * C32435 + C2647 * C31569) *
                       C24412 +
                   (C2305 * C17833 + C2306 * C31575 + C2307 * C32443 +
                    C2308 * C31565 + C2646 * C32435 + C2645 * C31569) *
                       C32622 +
                   (C499 * C17833 + C500 * C31575 + C501 * C32443 +
                    C502 * C31565 + (C113 * C261 + C32514 * C277) * C32435 +
                    (C113 * C247 + C32514 * C262) * C31569) *
                       C32615) *
                      C32491 * C240 +
                  (((C113 * C248 + C32514 * C263) * C31569 +
                    (C113 * C264 + C32514 * C278) * C32435 +
                    (C113 * C249 + C32514 * C265) * C31565 +
                    (C113 * C266 + C32514 * C279) * C32443 +
                    (C113 * C250 + C32514 * C267) * C31575 +
                    (C113 * C268 + C32514 * C280) * C17833) *
                       C32615 +
                   ((C113 * C1142 + C32514 * C1154) * C31569 +
                    (C113 * C1153 + C32514 * C1169) * C32435 +
                    (C113 * C1141 + C32514 * C1152) * C31565 +
                    (C113 * C1151 + C32514 * C1168) * C32443 +
                    (C113 * C1140 + C32514 * C1150) * C31575 +
                    (C113 * C1149 + C32514 * C1167) * C17833) *
                       C32622 +
                   ((C113 * C1144 + C32514 * C1156) * C31569 +
                    (C113 * C1158 + C32514 * C1171) * C32435 +
                    (C113 * C1146 + C32514 * C1160) * C31565 +
                    (C113 * C1162 + C32514 * C1173) * C32443 +
                    (C113 * C1148 + C32514 * C1164) * C31575 +
                    (C113 * C1166 + C32514 * C1175) * C17833) *
                       C24412) *
                      C32491 * C241) *
                 C32465) /
                    (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C15055 +
             (C113 * C127 + C32514 * C140) * C32845 + C168 * C15056 +
             C169 * C32838 + C170 * C15057 + C171 * C32825 + C172 * C15058 +
             C173 * C32808) *
                C20880 +
            (C21079 + C21080 + C21081 + C21082 + C21083 + C21084 + C21085 +
             C21086) *
                C32619) *
               C32491 * C470 -
           ((C3919 * C32808 + C3920 * C15058 + C2305 * C32825 + C2306 * C15057 +
             C2307 * C32838 + C2308 * C15056 + C2646 * C32845 +
             C2645 * C15055) *
                C32619 +
            (C497 * C32808 + C498 * C15058 + C499 * C32825 + C500 * C15057 +
             C501 * C32838 + C502 * C15056 +
             (C113 * C261 + C32514 * C277) * C32845 +
             (C113 * C247 + C32514 * C262) * C15055) *
                C20880) *
               C32491 * C471) *
              C472 +
          (((C502 * C15055 + C501 * C32845 + C500 * C15056 + C499 * C32838 +
             C498 * C15057 + C497 * C32825 + C496 * C15058 + C495 * C32808) *
                C20880 +
            (C2308 * C15055 + C2307 * C32845 + C2306 * C15056 + C2305 * C32838 +
             C3920 * C15057 + C3919 * C32825 +
             (C113 * C700 + C32514 * C709) * C15058 +
             (C113 * C710 + C32514 * C715) * C32808) *
                C32619) *
               C32491 * C471 -
           ((C607 * C32808 + C608 * C15058 + C609 * C32825 + C610 * C15057 +
             C611 * C32838 + C612 * C15056 + C613 * C32845 + C614 * C15055) *
                C32619 +
            (C175 * C32808 + C174 * C15058 + C173 * C32825 + C172 * C15057 +
             C171 * C32838 + C170 * C15056 + C169 * C32845 + C168 * C15055) *
                C20880) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
              C834 * C248 + C32804 * C263) *
                 C15877 +
             (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
              C834 * C264 + C32804 * C278) *
                 C15871 +
             (C875 + C876 + C877) * C15878 + (C878 + C879 + C880) * C32440) *
                C20880 +
            ((C11380 + C11381 + C11382) * C15877 +
             (C11383 + C11384 + C11385) * C15871 +
             (C1548 + C1547 + C1546) * C15878 +
             (C1545 + C1544 + C1543) * C32440) *
                C32619) *
               C32491 * C470 -
           (((C22145 + C22146 + C22147) * C32440 +
             (C22148 + C22149 + C22150) * C15878 +
             (C11890 + C11889 + C11888) * C15871 +
             (C11887 + C11886 + C11885) * C15877) *
                C32619 +
            ((C1357 + C1358 + C1359) * C32440 +
             (C1360 + C1361 + C1362) * C15878 +
             (C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
              C832 * C261 + C32839 * C277) *
                 C15871 +
             (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
              C832 * C247 + C32839 * C262) *
                 C15877) *
                C20880) *
               C32491 * C471) *
              C472 +
          ((((C1362 + C1361 + C1360) * C15877 +
             (C1359 + C1358 + C1357) * C15871 +
             (C1356 + C1355 + C1354) * C15878 +
             (C1353 + C1352 + C1351) * C32440) *
                C20880 +
            ((C22150 + C22149 + C22148) * C15877 +
             (C22147 + C22146 + C22145) * C15871 +
             (C832 * C698 + C32839 * C705 + C833 * C1140 + C32827 * C1150 +
              C834 * C1696 + C32804 * C1701) *
                 C15878 +
             (C832 * C706 + C32839 * C713 + C833 * C1149 + C32827 * C1167 +
              C834 * C1702 + C32804 * C1705) *
                 C32440) *
                C32619) *
               C32491 * C471 -
           (((C1537 + C1538 + C1539) * C32440 +
             (C1540 + C1541 + C1542) * C15878 +
             (C1543 + C1544 + C1545) * C15871 +
             (C1546 + C1547 + C1548) * C15877) *
                C32619 +
            ((C886 + C885 + C884) * C32440 + (C883 + C882 + C881) * C15878 +
             (C880 + C879 + C878) * C15871 + (C877 + C876 + C875) * C15877) *
                C20880) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C15055 +
             (C113 * C127 + C32514 * C140) * C32845 + C168 * C15056 +
             C169 * C32838 + C170 * C15057 + C171 * C32825 + C172 * C15058 +
             C173 * C32808) *
                C20880 +
            (C21079 + C21080 + C21081 + C21082 + C21083 + C21084 + C21085 +
             C21086) *
                C32619) *
               C584 -
           ((C21087 + C21088 + C21089 + C21090 + C21091 + C21092 + C21093 +
             C21094) *
                C32619 +
            (C21086 + C21085 + C21084 + C21083 + C21082 + C21081 + C21080 +
             C21079) *
                C20880) *
               C585) *
              C470 +
          (((C21493 + C21494 + C21495 + C21496 + C21497 + C21498 + C21499 +
             C21500) *
                C20880 +
            (C2647 * C15055 + C2648 * C32845 + C2304 * C15056 + C2303 * C32838 +
             C2302 * C15057 + C2301 * C32825 +
             (C113 * C2280 + C32514 * C2281) * C15058 +
             (C113 * C2282 + C32514 * C2283) * C32808) *
                C32619) *
               C585 -
           ((C21500 + C21499 + C21498 + C21497 + C21496 + C21495 + C21494 +
             C21493) *
                C32619 +
            (C497 * C32808 + C498 * C15058 + C499 * C32825 + C500 * C15057 +
             C501 * C32838 + C502 * C15056 +
             (C113 * C261 + C32514 * C277) * C32845 +
             (C113 * C247 + C32514 * C262) * C15055) *
                C20880) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
              C834 * C248 + C32804 * C263) *
                 C15877 +
             (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
              C834 * C264 + C32804 * C278) *
                 C15871 +
             (C875 + C876 + C877) * C15878 + (C878 + C879 + C880) * C32440) *
                C20880 +
            ((C11380 + C11381 + C11382) * C15877 +
             (C11383 + C11384 + C11385) * C15871 + C22349 * C15878 +
             C22350 * C32440) *
                C32619) *
               C584 -
           (((C11714 + C11713 + C11712) * C32440 +
             (C11711 + C11710 + C11709) * C15878 +
             (C11391 + C11390 + C11389) * C15871 +
             (C11388 + C11387 + C11386) * C15877) *
                C32619 +
            (C22351 * C32440 + C22352 * C15878 +
             (C11385 + C11384 + C11383) * C15871 +
             (C11382 + C11381 + C11380) * C15877) *
                C20880) *
               C585) *
              C470 +
          ((((C11885 + C11886 + C11887) * C15877 +
             (C11888 + C11889 + C11890) * C15871 +
             (C22150 + C22149 + C22148) * C15878 +
             (C22147 + C22146 + C22145) * C32440) *
                C20880 +
            ((C11891 + C11892 + C11893) * C15877 +
             (C11894 + C11895 + C11896) * C15871 +
             (C832 * C1145 + C32839 * C1159 + C833 * C1146 + C32827 * C1160 +
              C834 * C7243 + C32804 * C7244) *
                 C15878 +
             (C832 * C1161 + C32839 * C1172 + C833 * C1162 + C32827 * C1173 +
              C834 * C7245 + C32804 * C7246) *
                 C32440) *
                C32619) *
               C585 -
           (((C22145 + C22146 + C22147) * C32440 +
             (C22148 + C22149 + C22150) * C15878 +
             (C11890 + C11889 + C11888) * C15871 +
             (C11887 + C11886 + C11885) * C15877) *
                C32619 +
            ((C1357 + C1358 + C1359) * C32440 +
             (C1360 + C1361 + C1362) * C15878 +
             (C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
              C832 * C261 + C32839 * C277) *
                 C15871 +
             (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
              C832 * C247 + C32839 * C262) *
                 C15877) *
                C20880) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C15055 +
            (C113 * C127 + C32514 * C140) * C32845 + C168 * C15056 +
            C169 * C32838 + C170 * C15057 + C171 * C32825 + C172 * C15058 +
            C173 * C32808) *
               C20880 +
           (C2110 * C15055 + C2111 * C32845 + C614 * C15056 + C613 * C32838 +
            C612 * C15057 + C611 * C32825 + C610 * C15058 + C609 * C32808) *
               C32619) *
              C32491 * C239 -
          ((C3919 * C32808 + C3920 * C15058 + C2305 * C32825 + C2306 * C15057 +
            C2307 * C32838 + C2308 * C15056 + C2646 * C32845 + C2645 * C15055) *
               C32619 +
           (C497 * C32808 + C498 * C15058 + C499 * C32825 + C500 * C15057 +
            C501 * C32838 + C502 * C15056 +
            (C113 * C261 + C32514 * C277) * C32845 +
            (C113 * C247 + C32514 * C262) * C15055) *
               C20880) *
              C32491 * C240 +
          (((C113 * C248 + C32514 * C263) * C15055 +
            (C113 * C264 + C32514 * C278) * C32845 +
            (C113 * C249 + C32514 * C265) * C15056 +
            (C113 * C266 + C32514 * C279) * C32838 +
            (C113 * C250 + C32514 * C267) * C15057 +
            (C113 * C268 + C32514 * C280) * C32825 +
            (C113 * C251 + C32514 * C269) * C15058 +
            (C113 * C270 + C32514 * C281) * C32808) *
               C20880 +
           ((C113 * C1142 + C32514 * C1154) * C15055 +
            (C113 * C1153 + C32514 * C1169) * C32845 +
            (C113 * C1141 + C32514 * C1152) * C15056 +
            (C113 * C1151 + C32514 * C1168) * C32838 +
            (C113 * C1140 + C32514 * C1150) * C15057 +
            (C113 * C1149 + C32514 * C1167) * C32825 +
            (C113 * C1508 + C32514 * C1509) * C15058 +
            (C113 * C1510 + C32514 * C1511) * C32808) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C15055 +
            (C113 * C127 + C32514 * C140) * C32845 + C168 * C15056 +
            C169 * C32838 + C170 * C15057 + C171 * C32825 + C172 * C15058 +
            C173 * C32808) *
               C20880 +
           (C2110 * C15055 + C2111 * C32845 + C614 * C15056 + C613 * C32838 +
            C612 * C15057 + C611 * C32825 + C610 * C15058 + C609 * C32808) *
               C32619) *
              C32491 * C32477 * C110 -
          ((C607 * C32808 + C608 * C15058 + C609 * C32825 + C610 * C15057 +
            C611 * C32838 + C612 * C15056 + C613 * C32845 + C614 * C15055) *
               C32619 +
           (C175 * C32808 + C174 * C15058 + C173 * C32825 + C172 * C15057 +
            C171 * C32838 + C170 * C15056 + C169 * C32845 + C168 * C15055) *
               C20880) *
              C32491 * C32477 * C111 +
          ((C170 * C15055 + C171 * C32845 + C172 * C15056 + C173 * C32838 +
            C174 * C15057 + C175 * C32825 + C177 * C15058 + C176 * C32808) *
               C20880 +
           (C612 * C15055 + C611 * C32845 + C610 * C15056 + C609 * C32838 +
            C608 * C15057 + C607 * C32825 +
            (C113 * C586 + C32514 * C587) * C15058 +
            (C113 * C588 + C32514 * C589) * C32808) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C15055 +
            (C113 * C127 + C32514 * C140) * C32845 + C168 * C15056 +
            C169 * C32838 + C170 * C15057 + C171 * C32825 + C172 * C15058 +
            C173 * C32808) *
               C20880 +
           (C21079 + C21080 + C21081 + C21082 + C21083 + C21084 + C21085 +
            C21086) *
               C32619) *
              C345 -
          ((C21087 + C21088 + C21089 + C21090 + C21091 + C21092 + C21093 +
            C21094) *
               C32619 +
           (C21086 + C21085 + C21084 + C21083 + C21082 + C21081 + C21080 +
            C21079) *
               C20880) *
              C346 +
          ((C21094 + C21093 + C21092 + C21091 + C21090 + C21089 + C21088 +
            C21087) *
               C20880 +
           (C2119 * C15055 + C2118 * C32845 + C2117 * C15056 + C2116 * C32838 +
            C2115 * C15057 + C2114 * C32825 +
            (C113 * C2454 + C32514 * C2455) * C15058 +
            (C113 * C2456 + C32514 * C2457) * C32808) *
               C32619) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C15877 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C15871 +
            (C875 + C876 + C877) * C15878 + (C878 + C879 + C880) * C32440) *
               C20880 +
           ((C11380 + C11381 + C11382) * C15877 +
            (C11383 + C11384 + C11385) * C15871 +
            (C1548 + C1547 + C1546) * C15878 +
            (C1545 + C1544 + C1543) * C32440) *
               C32619) *
              C32491 * C32477 * C110 -
          (((C1537 + C1538 + C1539) * C32440 +
            (C1540 + C1541 + C1542) * C15878 +
            (C1543 + C1544 + C1545) * C15871 +
            (C1546 + C1547 + C1548) * C15877) *
               C32619 +
           ((C886 + C885 + C884) * C32440 + (C883 + C882 + C881) * C15878 +
            (C880 + C879 + C878) * C15871 + (C877 + C876 + C875) * C15877) *
               C20880) *
              C32491 * C32477 * C111 +
          ((C895 * C15877 + C896 * C15871 + (C892 + C891 + C890) * C15878 +
            (C889 + C888 + C887) * C32440) *
               C20880 +
           ((C1542 + C1541 + C1540) * C15877 +
            (C1539 + C1538 + C1537) * C15871 +
            (C832 * C349 + C32839 * C361 + C833 * C699 + C32827 * C707 +
             C834 * C1508 + C32804 * C1509) *
                C15878 +
            (C832 * C360 + C32839 * C379 + C833 * C708 + C32827 * C714 +
             C834 * C1510 + C32804 * C1511) *
                C32440) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C15877 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C15871 +
            (C875 + C876 + C877) * C15878 + (C878 + C879 + C880) * C32440) *
               C20880 +
           ((C11380 + C11381 + C11382) * C15877 +
            (C11383 + C11384 + C11385) * C15871 +
            (C1548 + C1547 + C1546) * C15878 +
            (C1545 + C1544 + C1543) * C32440) *
               C32619) *
              C32491 * C239 -
          (((C834 * C1700 + C32804 * C1704 + C833 * C1151 + C32827 * C1168 +
             C832 * C704 + C32839 * C712) *
                C32440 +
            (C834 * C1695 + C32804 * C1699 + C833 * C1141 + C32827 * C1152 +
             C832 * C697 + C32839 * C703) *
                C15878 +
            (C11890 + C11889 + C11888) * C15871 +
            (C11887 + C11886 + C11885) * C15877) *
               C32619 +
           ((C1357 + C1358 + C1359) * C32440 +
            (C1360 + C1361 + C1362) * C15878 +
            (C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
             C832 * C261 + C32839 * C277) *
                C15871 +
            (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
             C832 * C247 + C32839 * C262) *
                C15877) *
               C20880) *
              C32491 * C240 +
          (((C832 * C248 + C32839 * C263 + C833 * C1008 + C32827 * C1017 +
             C834 * C1009 + C32804 * C1018) *
                C15877 +
            (C832 * C264 + C32839 * C278 + C833 * C1016 + C32827 * C1026 +
             C834 * C1019 + C32804 * C1027) *
                C15871 +
            (C832 * C249 + C32839 * C265 + C833 * C1007 + C32827 * C1015 +
             C834 * C1010 + C32804 * C1020) *
                C15878 +
            (C832 * C266 + C32839 * C279 + C833 * C1014 + C32827 * C1025 +
             C834 * C1021 + C32804 * C1028) *
                C32440) *
               C20880 +
           ((C832 * C1142 + C32839 * C1154 + C833 * C1694 + C32827 * C1697 +
             C834 * C6424 + C32804 * C6428) *
                C15877 +
            (C832 * C1153 + C32839 * C1169 + C833 * C1698 + C32827 * C1703 +
             C834 * C6427 + C32804 * C6433) *
                C15871 +
            (C832 * C1141 + C32839 * C1152 + C833 * C1695 + C32827 * C1699 +
             C834 * C6604 + C32804 * C6605) *
                C15878 +
            (C832 * C1151 + C32839 * C1168 + C833 * C1700 + C32827 * C1704 +
             C834 * C6606 + C32804 * C6607) *
                C32440) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C15877 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C15871 +
            (C875 + C876 + C877) * C15878 + (C878 + C879 + C880) * C32440) *
               C20880 +
           ((C11380 + C11381 + C11382) * C15877 +
            (C11383 + C11384 + C11385) * C15871 +
            (C1548 + C1547 + C1546) * C15878 +
            (C1545 + C1544 + C1543) * C32440) *
               C32619) *
              C345 -
          (((C11714 + C11713 + C11712) * C32440 +
            (C11711 + C11710 + C11709) * C15878 +
            (C11391 + C11390 + C11389) * C15871 +
            (C11388 + C11387 + C11386) * C15877) *
               C32619 +
           ((C1543 + C1544 + C1545) * C32440 +
            (C1546 + C1547 + C1548) * C15878 +
            (C11385 + C11384 + C11383) * C15871 +
            (C11382 + C11381 + C11380) * C15877) *
               C20880) *
              C346 +
          ((C11400 * C15877 + C11401 * C15871 +
            (C11709 + C11710 + C11711) * C15878 +
            (C11712 + C11713 + C11714) * C32440) *
               C20880 +
           ((C11397 + C11396 + C11395) * C15877 +
            (C11394 + C11393 + C11392) * C15871 +
            (C832 * C2058 + C32839 * C2066 + C833 * C2617 + C32827 * C2621 +
             C834 * C7393 + C32804 * C7394) *
                C15878 +
            (C832 * C2065 + C32839 * C2076 + C833 * C2622 + C32827 * C2626 +
             C834 * C7395 + C32804 * C7396) *
                C32440) *
               C32619) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C15055 +
             (C113 * C127 + C32514 * C140) * C32845 + C168 * C15056 +
             C169 * C32838 + C170 * C15057 + C171 * C32825 + C172 * C15058 +
             C173 * C32808) *
                C20880 +
            (C21079 + C21080 + C21081 + C21082 + C21083 + C21084 + C21085 +
             C21086) *
                C32619) *
               C584 -
           ((C21087 + C21088 + C21089 + C21090 + C21091 + C21092 + C21093 +
             C21094) *
                C32619 +
            (C21086 + C21085 + C21084 + C21083 + C21082 + C21081 + C21080 +
             C21079) *
                C20880) *
               C585) *
              C32477 * C472 +
          (((C21355 + C21356 + C21357 + C21358 + C21359 + C21360 + C21361 +
             C21362) *
                C20880 +
            (C1832 * C15055 + C1833 * C32845 + C1834 * C15056 + C1835 * C32838 +
             C1837 * C15057 + C1836 * C32825 +
             (C113 * C357 + C32514 * C376) * C15058 +
             (C113 * C377 + C32514 * C387) * C32808) *
                C32619) *
               C585 -
           ((C21362 + C21361 + C21360 + C21359 + C21358 + C21357 + C21356 +
             C21355) *
                C32619 +
            (C175 * C32808 + C174 * C15058 + C173 * C32825 + C172 * C15057 +
             C171 * C32838 + C170 * C15056 + C169 * C32845 + C168 * C15055) *
                C20880) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
              C834 * C248 + C32804 * C263) *
                 C15877 +
             (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
              C834 * C264 + C32804 * C278) *
                 C15871 +
             (C875 + C876 + C877) * C15878 + (C878 + C879 + C880) * C32440) *
                C20880 +
            ((C11380 + C11381 + C11382) * C15877 +
             (C11383 + C11384 + C11385) * C15871 + C22349 * C15878 +
             C22350 * C32440) *
                C32619) *
               C584 -
           (((C11714 + C11713 + C11712) * C32440 +
             (C11711 + C11710 + C11709) * C15878 +
             (C11391 + C11390 + C11389) * C15871 +
             (C11388 + C11387 + C11386) * C15877) *
                C32619 +
            (C22351 * C32440 + C22352 * C15878 +
             (C11385 + C11384 + C11383) * C15871 +
             (C11382 + C11381 + C11380) * C15877) *
                C20880) *
               C585) *
              C32477 * C472 +
          (((C22349 * C15877 + C22350 * C15871 +
             (C1542 + C1541 + C1540) * C15878 +
             (C1539 + C1538 + C1537) * C32440) *
                C20880 +
            ((C11709 + C11710 + C11711) * C15877 +
             (C11712 + C11713 + C11714) * C15871 +
             (C832 * C355 + C32839 * C372 + C833 * C1147 + C32827 * C1163 +
              C834 * C1148 + C32804 * C1164) *
                 C15878 +
             (C832 * C373 + C32839 * C385 + C833 * C1165 + C32827 * C1174 +
              C834 * C1166 + C32804 * C1175) *
                 C32440) *
                C32619) *
               C585 -
           (((C1537 + C1538 + C1539) * C32440 +
             (C1540 + C1541 + C1542) * C15878 + C22351 * C15871 +
             C22352 * C15877) *
                C32619 +
            ((C886 + C885 + C884) * C32440 + (C883 + C882 + C881) * C15878 +
             (C880 + C879 + C878) * C15871 + (C877 + C876 + C875) * C15877) *
                C20880) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C15055 +
            (C113 * C127 + C32514 * C140) * C32845 + C168 * C15056 +
            C169 * C32838 + C170 * C15057 + C171 * C32825 + C172 * C15058 +
            C173 * C32808) *
               C20880 +
           (C2110 * C15055 + C2111 * C32845 + C614 * C15056 + C613 * C32838 +
            C612 * C15057 + C611 * C32825 + C610 * C15058 + C609 * C32808) *
               C32619) *
              C32491 * C32477 * C110 -
          ((C607 * C32808 + C608 * C15058 + C609 * C32825 + C610 * C15057 +
            C611 * C32838 + C612 * C15056 + C613 * C32845 + C614 * C15055) *
               C32619 +
           (C175 * C32808 + C174 * C15058 + C173 * C32825 + C172 * C15057 +
            C171 * C32838 + C170 * C15056 + C169 * C32845 + C168 * C15055) *
               C20880) *
              C32491 * C32477 * C111 +
          ((C170 * C15055 + C171 * C32845 + C172 * C15056 + C173 * C32838 +
            C174 * C15057 + C175 * C32825 + C177 * C15058 + C176 * C32808) *
               C20880 +
           (C612 * C15055 + C611 * C32845 + C610 * C15056 + C609 * C32838 +
            C608 * C15057 + C607 * C32825 +
            (C113 * C586 + C32514 * C587) * C15058 +
            (C113 * C588 + C32514 * C589) * C32808) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C15055 +
            (C113 * C127 + C32514 * C140) * C32845 + C168 * C15056 +
            C169 * C32838 + C170 * C15057 + C171 * C32825 + C172 * C15058 +
            C173 * C32808) *
               C20880 +
           (C2110 * C15055 + C2111 * C32845 + C614 * C15056 + C613 * C32838 +
            C612 * C15057 + C611 * C32825 + C610 * C15058 + C609 * C32808) *
               C32619) *
              C32491 * C239 -
          ((C3919 * C32808 + C3920 * C15058 + C2305 * C32825 + C2306 * C15057 +
            C2307 * C32838 + C2308 * C15056 + C2646 * C32845 + C2645 * C15055) *
               C32619 +
           (C497 * C32808 + C498 * C15058 + C499 * C32825 + C500 * C15057 +
            C501 * C32838 + C502 * C15056 +
            (C113 * C261 + C32514 * C277) * C32845 +
            (C113 * C247 + C32514 * C262) * C15055) *
               C20880) *
              C32491 * C240 +
          (((C113 * C248 + C32514 * C263) * C15055 +
            (C113 * C264 + C32514 * C278) * C32845 +
            (C113 * C249 + C32514 * C265) * C15056 +
            (C113 * C266 + C32514 * C279) * C32838 +
            (C113 * C250 + C32514 * C267) * C15057 +
            (C113 * C268 + C32514 * C280) * C32825 +
            (C113 * C251 + C32514 * C269) * C15058 +
            (C113 * C270 + C32514 * C281) * C32808) *
               C20880 +
           ((C113 * C1142 + C32514 * C1154) * C15055 +
            (C113 * C1153 + C32514 * C1169) * C32845 +
            (C113 * C1141 + C32514 * C1152) * C15056 +
            (C113 * C1151 + C32514 * C1168) * C32838 +
            (C113 * C1140 + C32514 * C1150) * C15057 +
            (C113 * C1149 + C32514 * C1167) * C32825 +
            (C113 * C1508 + C32514 * C1509) * C15058 +
            (C113 * C1510 + C32514 * C1511) * C32808) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C15877 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C15871 +
            (C875 + C876 + C877) * C15878 + (C878 + C879 + C880) * C32440) *
               C20880 +
           ((C11380 + C11381 + C11382) * C15877 +
            (C11383 + C11384 + C11385) * C15871 +
            (C1548 + C1547 + C1546) * C15878 +
            (C1545 + C1544 + C1543) * C32440) *
               C32619) *
              C32491 * C32477 * C110 -
          (((C1537 + C1538 + C1539) * C32440 +
            (C1540 + C1541 + C1542) * C15878 +
            (C1543 + C1544 + C1545) * C15871 +
            (C1546 + C1547 + C1548) * C15877) *
               C32619 +
           ((C886 + C885 + C884) * C32440 + (C883 + C882 + C881) * C15878 +
            (C880 + C879 + C878) * C15871 + (C877 + C876 + C875) * C15877) *
               C20880) *
              C32491 * C32477 * C111 +
          ((C895 * C15877 + C896 * C15871 + (C892 + C891 + C890) * C15878 +
            (C889 + C888 + C887) * C32440) *
               C20880 +
           ((C1542 + C1541 + C1540) * C15877 +
            (C1539 + C1538 + C1537) * C15871 +
            (C832 * C349 + C32839 * C361 + C833 * C699 + C32827 * C707 +
             C834 * C1508 + C32804 * C1509) *
                C15878 +
            (C832 * C360 + C32839 * C379 + C833 * C708 + C32827 * C714 +
             C834 * C1510 + C32804 * C1511) *
                C32440) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C15877 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C15871 +
            (C875 + C876 + C877) * C15878 + (C878 + C879 + C880) * C32440) *
               C20880 +
           ((C11380 + C11381 + C11382) * C15877 +
            (C11383 + C11384 + C11385) * C15871 +
            (C1548 + C1547 + C1546) * C15878 +
            (C1545 + C1544 + C1543) * C32440) *
               C32619) *
              C32491 * C239 -
          (((C834 * C1700 + C32804 * C1704 + C833 * C1151 + C32827 * C1168 +
             C832 * C704 + C32839 * C712) *
                C32440 +
            (C834 * C1695 + C32804 * C1699 + C833 * C1141 + C32827 * C1152 +
             C832 * C697 + C32839 * C703) *
                C15878 +
            (C11890 + C11889 + C11888) * C15871 +
            (C11887 + C11886 + C11885) * C15877) *
               C32619 +
           ((C1357 + C1358 + C1359) * C32440 +
            (C1360 + C1361 + C1362) * C15878 +
            (C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
             C832 * C261 + C32839 * C277) *
                C15871 +
            (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
             C832 * C247 + C32839 * C262) *
                C15877) *
               C20880) *
              C32491 * C240 +
          (((C832 * C248 + C32839 * C263 + C833 * C1008 + C32827 * C1017 +
             C834 * C1009 + C32804 * C1018) *
                C15877 +
            (C832 * C264 + C32839 * C278 + C833 * C1016 + C32827 * C1026 +
             C834 * C1019 + C32804 * C1027) *
                C15871 +
            (C832 * C249 + C32839 * C265 + C833 * C1007 + C32827 * C1015 +
             C834 * C1010 + C32804 * C1020) *
                C15878 +
            (C832 * C266 + C32839 * C279 + C833 * C1014 + C32827 * C1025 +
             C834 * C1021 + C32804 * C1028) *
                C32440) *
               C20880 +
           ((C832 * C1142 + C32839 * C1154 + C833 * C1694 + C32827 * C1697 +
             C834 * C6424 + C32804 * C6428) *
                C15877 +
            (C832 * C1153 + C32839 * C1169 + C833 * C1698 + C32827 * C1703 +
             C834 * C6427 + C32804 * C6433) *
                C15871 +
            (C832 * C1141 + C32839 * C1152 + C833 * C1695 + C32827 * C1699 +
             C834 * C6604 + C32804 * C6605) *
                C15878 +
            (C832 * C1151 + C32839 * C1168 + C833 * C1700 + C32827 * C1704 +
             C834 * C6606 + C32804 * C6607) *
                C32440) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C2758 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C2752 +
            (C2795 + C2796) * C2759 + (C2797 + C2798) * C2753 + C2811 * C2760 +
            C2812 * C2754 + C2813 * C2761 + C2814 * C32808) *
               C32532 * C32491 * C470 -
           ((C3165 + C3166) * C32808 + (C3167 + C3168) * C2761 +
            (C3169 + C3170) * C2754 + (C3171 + C3172) * C2760 +
            (C3173 + C3174) * C2753 + (C3175 + C3176) * C2759 +
            (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                C2752 +
            (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                C2758) *
               C32532 * C32491 * C471) *
              C472 +
          (((C3176 + C3175) * C2758 + (C3174 + C3173) * C2752 +
            (C3172 + C3171) * C2759 + (C3170 + C3169) * C2753 +
            (C3168 + C3167) * C2760 + (C3166 + C3165) * C2754 +
            (C2756 * C243 + C32773 * C254 + C2757 * C252 + C32577 * C271) *
                C2761 +
            (C2756 * C253 + C32773 * C273 + C2757 * C272 + C32577 * C282) *
                C32808) *
               C32532 * C32491 * C471 -
           ((C2807 + C2808) * C32808 + (C2809 + C2810) * C2761 +
            (C2806 + C2805) * C2754 + (C2804 + C2803) * C2760 +
            (C2802 + C2801) * C2753 + (C2800 + C2799) * C2759 +
            (C2798 + C2797) * C2752 + (C2796 + C2795) * C2758) *
               C32532 * C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
             C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
                C31559 +
            (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
             C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
                C32754 +
            (C7744 + C7745 + C7746 + C7747) * C31540 +
            (C7748 + C7749 + C7750 + C7751) * C32440) *
               C32532 * C32491 * C470 -
           ((C8102 + C8103 + C8104 + C8105) * C32440 +
            (C8106 + C8107 + C8108 + C8109) * C31540 +
            (C7708 * C1019 + C32814 * C1027 + C7707 * C1016 + C7701 * C1026 +
             C7706 * C264 + C7700 * C278 + C7705 * C261 + C7699 * C277) *
                C32754 +
            (C7708 * C1009 + C32814 * C1018 + C7707 * C1008 + C7701 * C1017 +
             C7706 * C248 + C7700 * C263 + C7705 * C247 + C7699 * C262) *
                C31559) *
               C32532 * C32491 * C471) *
              C472 +
          (((C8109 + C8108 + C8107 + C8106) * C31559 +
            (C8105 + C8104 + C8103 + C8102) * C32754 +
            (C7705 * C245 + C7699 * C258 + C7706 * C250 + C7700 * C267 +
             C7707 * C1006 + C7701 * C1013 + C7708 * C1011 + C32814 * C1022) *
                C31540 +
            (C7705 * C257 + C7699 * C275 + C7706 * C268 + C7700 * C280 +
             C7707 * C1012 + C7701 * C1024 + C7708 * C1023 + C32814 * C1029) *
                C32440) *
               C32532 * C32491 * C471 -
           ((C7752 + C7753 + C7754 + C7755) * C32440 +
            (C7756 + C7757 + C7758 + C7759) * C31540 +
            (C7751 + C7750 + C7749 + C7748) * C32754 +
            (C7747 + C7746 + C7745 + C7744) * C31559) *
               C32532 * C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C2758 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C2752 +
            (C2795 + C2796) * C2759 + (C2797 + C2798) * C2753 + C2811 * C2760 +
            C2812 * C2754 + C2813 * C2761 + C2814 * C32808) *
               C32532 * C584 -
           ((C3331 + C3332) * C32808 + (C3333 + C3334) * C2761 +
            (C3335 + C3336) * C2754 + (C3337 + C3338) * C2760 +
            (C3339 + C3340) * C2753 + (C3341 + C3342) * C2759 +
            (C2757 * C702 + C32577 * C711 + C2756 * C366 + C32773 * C382) *
                C2752 +
            (C2757 * C696 + C32577 * C701 + C2756 * C352 + C32773 * C367) *
                C2758) *
               C32532 * C585) *
              C470 +
          (((C2756 * C696 + C32773 * C701 + C2757 * C1142 + C32577 * C1154) *
                C2758 +
            (C2756 * C702 + C32773 * C711 + C2757 * C1153 + C32577 * C1169) *
                C2752 +
            (C2756 * C697 + C32773 * C703 + C2757 * C1141 + C32577 * C1152) *
                C2759 +
            (C2756 * C704 + C32773 * C712 + C2757 * C1151 + C32577 * C1168) *
                C2753 +
            (C2756 * C698 + C32773 * C705 + C2757 * C1140 + C32577 * C1150) *
                C2760 +
            (C2756 * C706 + C32773 * C713 + C2757 * C1149 + C32577 * C1167) *
                C2754 +
            (C2756 * C699 + C32773 * C707 + C2757 * C1508 + C32577 * C1509) *
                C2761 +
            (C2756 * C708 + C32773 * C714 + C2757 * C1510 + C32577 * C1511) *
                C32808) *
               C32532 * C585 -
           ((C3165 + C3166) * C32808 + (C3167 + C3168) * C2761 +
            (C3169 + C3170) * C2754 + (C3171 + C3172) * C2760 +
            (C3173 + C3174) * C2753 + (C3175 + C3176) * C2759 +
            (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                C2752 +
            (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                C2758) *
               C32532 * C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
             C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
                C31559 +
            (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
             C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
                C32754 +
            (C7744 + C7745 + C7746 + C7747) * C31540 +
            (C7748 + C7749 + C7750 + C7751) * C32440) *
               C32532 * C584 -
           ((C8256 + C8257 + C8258 + C8259) * C32440 +
            (C8260 + C8261 + C8262 + C8263) * C31540 +
            (C7708 * C1698 + C32814 * C1703 + C7707 * C1153 + C7701 * C1169 +
             C7706 * C702 + C7700 * C711 + C7705 * C366 + C7699 * C382) *
                C32754 +
            (C7708 * C1694 + C32814 * C1697 + C7707 * C1142 + C7701 * C1154 +
             C7706 * C696 + C7700 * C701 + C7705 * C352 + C7699 * C367) *
                C31559) *
               C32532 * C585) *
              C470 +
          (((C7705 * C696 + C7699 * C701 + C7706 * C1142 + C7700 * C1154 +
             C7707 * C1694 + C7701 * C1697 + C7708 * C6424 + C32814 * C6428) *
                C31559 +
            (C7705 * C702 + C7699 * C711 + C7706 * C1153 + C7700 * C1169 +
             C7707 * C1698 + C7701 * C1703 + C7708 * C6427 + C32814 * C6433) *
                C32754 +
            (C7705 * C697 + C7699 * C703 + C7706 * C1141 + C7700 * C1152 +
             C7707 * C1695 + C7701 * C1699 + C7708 * C6604 + C32814 * C6605) *
                C31540 +
            (C7705 * C704 + C7699 * C712 + C7706 * C1151 + C7700 * C1168 +
             C7707 * C1700 + C7701 * C1704 + C7708 * C6606 + C32814 * C6607) *
                C32440) *
               C32532 * C585 -
           ((C8102 + C8103 + C8104 + C8105) * C32440 +
            (C8106 + C8107 + C8108 + C8109) * C31540 +
            (C7708 * C1019 + C32814 * C1027 + C7707 * C1016 + C7701 * C1026 +
             C7706 * C264 + C7700 * C278 + C7705 * C261 + C7699 * C277) *
                C32754 +
            (C7708 * C1009 + C32814 * C1018 + C7707 * C1008 + C7701 * C1017 +
             C7706 * C248 + C7700 * C263 + C7705 * C247 + C7699 * C262) *
                C31559) *
               C32532 * C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
               C2758 +
           (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
               C2752 +
           (C2795 + C2796) * C2759 + (C2797 + C2798) * C2753 + C2811 * C2760 +
           C2812 * C2754 + C2813 * C2761 + C2814 * C32808) *
              C32532 * C32491 * C239 -
          ((C2757 * C270 + C32577 * C281 + C2756 * C255 + C32773 * C274) *
               C32808 +
           (C2757 * C251 + C32577 * C269 + C2756 * C244 + C32773 * C256) *
               C2761 +
           (C2757 * C268 + C32577 * C280 + C2756 * C257 + C32773 * C275) *
               C2754 +
           (C2757 * C250 + C32577 * C267 + C2756 * C245 + C32773 * C258) *
               C2760 +
           (C2757 * C266 + C32577 * C279 + C2756 * C259 + C32773 * C276) *
               C2753 +
           (C2757 * C249 + C32577 * C265 + C2756 * C246 + C32773 * C260) *
               C2759 +
           (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
               C2752 +
           (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
               C2758) *
              C32532 * C32491 * C240 +
          ((C2756 * C248 + C32773 * C263 + C2757 * C1008 + C32577 * C1017) *
               C2758 +
           (C2756 * C264 + C32773 * C278 + C2757 * C1016 + C32577 * C1026) *
               C2752 +
           (C2756 * C249 + C32773 * C265 + C2757 * C1007 + C32577 * C1015) *
               C2759 +
           (C2756 * C266 + C32773 * C279 + C2757 * C1014 + C32577 * C1025) *
               C2753 +
           (C2756 * C250 + C32773 * C267 + C2757 * C1006 + C32577 * C1013) *
               C2760 +
           (C2756 * C268 + C32773 * C280 + C2757 * C1012 + C32577 * C1024) *
               C2754 +
           (C2756 * C251 + C32773 * C269 + C2757 * C1322 + C32577 * C1323) *
               C2761 +
           (C2756 * C270 + C32773 * C281 + C2757 * C1324 + C32577 * C1325) *
               C32808) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
               C2758 +
           (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
               C2752 +
           (C2795 + C2796) * C2759 + (C2797 + C2798) * C2753 + C2811 * C2760 +
           C2812 * C2754 + C2813 * C2761 + C2814 * C32808) *
              C32532 * C32491 * C32477 * C110 -
          ((C2807 + C2808) * C32808 + (C2809 + C2810) * C2761 +
           (C2806 + C2805) * C2754 + (C2804 + C2803) * C2760 +
           (C2802 + C2801) * C2753 + (C2800 + C2799) * C2759 +
           (C2798 + C2797) * C2752 + (C2796 + C2795) * C2758) *
              C32532 * C32491 * C32477 * C111 +
          (C2811 * C2758 + C2812 * C2752 + C2813 * C2759 + C2814 * C2753 +
           (C2810 + C2809) * C2760 + (C2808 + C2807) * C2754 +
           (C2756 * C124 + C32773 * C137 + C2757 * C474 + C32577 * C475) *
               C2761 +
           (C2756 * C136 + C32773 * C145 + C2757 * C476 + C32577 * C477) *
               C32808) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
               C2758 +
           (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
               C2752 +
           (C2795 + C2796) * C2759 + (C2797 + C2798) * C2753 + C2811 * C2760 +
           C2812 * C2754 + C2813 * C2761 + C2814 * C32808) *
              C32532 * C345 -
          ((C2757 * C708 + C32577 * C714 + C2756 * C360 + C32773 * C379) *
               C32808 +
           (C2757 * C699 + C32577 * C707 + C2756 * C349 + C32773 * C361) *
               C2761 +
           (C2757 * C706 + C32577 * C713 + C2756 * C362 + C32773 * C380) *
               C2754 +
           (C2757 * C698 + C32577 * C705 + C2756 * C350 + C32773 * C363) *
               C2760 +
           (C2757 * C704 + C32577 * C712 + C2756 * C364 + C32773 * C381) *
               C2753 +
           (C2757 * C697 + C32577 * C703 + C2756 * C351 + C32773 * C365) *
               C2759 +
           (C2757 * C702 + C32577 * C711 + C2756 * C366 + C32773 * C382) *
               C2752 +
           (C2757 * C696 + C32577 * C701 + C2756 * C352 + C32773 * C367) *
               C2758) *
              C32532 * C346 +
          ((C2756 * C353 + C32773 * C368 + C2757 * C1143 + C32577 * C1155) *
               C2758 +
           (C2756 * C369 + C32773 * C383 + C2757 * C1157 + C32577 * C1170) *
               C2752 +
           (C2756 * C354 + C32773 * C370 + C2757 * C1145 + C32577 * C1159) *
               C2759 +
           (C2756 * C371 + C32773 * C384 + C2757 * C1161 + C32577 * C1172) *
               C2753 +
           (C2756 * C355 + C32773 * C372 + C2757 * C1147 + C32577 * C1163) *
               C2760 +
           (C2756 * C373 + C32773 * C385 + C2757 * C1165 + C32577 * C1174) *
               C2754 +
           (C2756 * C356 + C32773 * C374 + C2757 * C2280 + C32577 * C2281) *
               C2761 +
           (C2756 * C375 + C32773 * C386 + C2757 * C2282 + C32577 * C2283) *
               C32808) *
              C32532 * C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
            C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
               C31559 +
           (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
            C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
               C32754 +
           (C7744 + C7745 + C7746 + C7747) * C31540 +
           (C7748 + C7749 + C7750 + C7751) * C32440) *
              C32532 * C32491 * C32477 * C110 -
          ((C7752 + C7753 + C7754 + C7755) * C32440 +
           (C7756 + C7757 + C7758 + C7759) * C31540 +
           (C7751 + C7750 + C7749 + C7748) * C32754 +
           (C7747 + C7746 + C7745 + C7744) * C31559) *
              C32532 * C32491 * C32477 * C111 +
          ((C7759 + C7758 + C7757 + C7756) * C31559 +
           (C7755 + C7754 + C7753 + C7752) * C32754 +
           (C7705 * C122 + C7699 * C132 + C7706 * C244 + C7700 * C256 +
            C7707 * C251 + C7701 * C269 + C7708 * C1322 + C32814 * C1323) *
               C31540 +
           (C7705 * C133 + C7699 * C143 + C7706 * C255 + C7700 * C274 +
            C7707 * C270 + C7701 * C281 + C7708 * C1324 + C32814 * C1325) *
               C32440) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
            C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
               C31559 +
           (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
            C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
               C32754 +
           (C7744 + C7745 + C7746 + C7747) * C31540 +
           (C7748 + C7749 + C7750 + C7751) * C32440) *
              C32532 * C32491 * C239 -
          ((C7708 * C1021 + C32814 * C1028 + C7707 * C1014 + C7701 * C1025 +
            C7706 * C266 + C7700 * C279 + C7705 * C259 + C7699 * C276) *
               C32440 +
           (C7708 * C1010 + C32814 * C1020 + C7707 * C1007 + C7701 * C1015 +
            C7706 * C249 + C7700 * C265 + C7705 * C246 + C7699 * C260) *
               C31540 +
           (C7708 * C1019 + C32814 * C1027 + C7707 * C1016 + C7701 * C1026 +
            C7706 * C264 + C7700 * C278 + C7705 * C261 + C7699 * C277) *
               C32754 +
           (C7708 * C1009 + C32814 * C1018 + C7707 * C1008 + C7701 * C1017 +
            C7706 * C248 + C7700 * C263 + C7705 * C247 + C7699 * C262) *
               C31559) *
              C32532 * C32491 * C240 +
          ((C7705 * C248 + C7699 * C263 + C7706 * C1008 + C7700 * C1017 +
            C7707 * C1009 + C7701 * C1018 + C7708 * C6354 + C32814 * C6357) *
               C31559 +
           (C7705 * C264 + C7699 * C278 + C7706 * C1016 + C7700 * C1026 +
            C7707 * C1019 + C7701 * C1027 + C7708 * C6356 + C32814 * C6360) *
               C32754 +
           (C7705 * C249 + C7699 * C265 + C7706 * C1007 + C7700 * C1015 +
            C7707 * C1010 + C7701 * C1020 + C7708 * C6518 + C32814 * C6519) *
               C31540 +
           (C7705 * C266 + C7699 * C279 + C7706 * C1014 + C7700 * C1025 +
            C7707 * C1021 + C7701 * C1028 + C7708 * C6520 + C32814 * C6521) *
               C32440) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
            C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
               C31559 +
           (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
            C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
               C32754 +
           (C7744 + C7745 + C7746 + C7747) * C31540 +
           (C7748 + C7749 + C7750 + C7751) * C32440) *
              C32532 * C345 -
          ((C7708 * C1700 + C32814 * C1704 + C7707 * C1151 + C7701 * C1168 +
            C7706 * C704 + C7700 * C712 + C7705 * C364 + C7699 * C381) *
               C32440 +
           (C7708 * C1695 + C32814 * C1699 + C7707 * C1141 + C7701 * C1152 +
            C7706 * C697 + C7700 * C703 + C7705 * C351 + C7699 * C365) *
               C31540 +
           (C7708 * C1698 + C32814 * C1703 + C7707 * C1153 + C7701 * C1169 +
            C7706 * C702 + C7700 * C711 + C7705 * C366 + C7699 * C382) *
               C32754 +
           (C7708 * C1694 + C32814 * C1697 + C7707 * C1142 + C7701 * C1154 +
            C7706 * C696 + C7700 * C701 + C7705 * C352 + C7699 * C367) *
               C31559) *
              C32532 * C346 +
          ((C7705 * C353 + C7699 * C368 + C7706 * C1143 + C7700 * C1155 +
            C7707 * C1144 + C7701 * C1156 + C7708 * C6425 + C32814 * C6429) *
               C31559 +
           (C7705 * C369 + C7699 * C383 + C7706 * C1157 + C7700 * C1170 +
            C7707 * C1158 + C7701 * C1171 + C7708 * C6431 + C32814 * C6434) *
               C32754 +
           (C7705 * C354 + C7699 * C370 + C7706 * C1145 + C7700 * C1159 +
            C7707 * C1146 + C7701 * C1160 + C7708 * C7243 + C32814 * C7244) *
               C31540 +
           (C7705 * C371 + C7699 * C384 + C7706 * C1161 + C7700 * C1172 +
            C7707 * C1162 + C7701 * C1173 + C7708 * C7245 + C32814 * C7246) *
               C32440) *
              C32532 * C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C2758 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C2752 +
            (C2795 + C2796) * C2759 + (C2797 + C2798) * C2753 + C2811 * C2760 +
            C2812 * C2754 + C2813 * C2761 + C2814 * C32808) *
               C32532 * C584 -
           ((C3331 + C3332) * C32808 + (C3333 + C3334) * C2761 +
            (C3335 + C3336) * C2754 + (C3337 + C3338) * C2760 +
            (C3339 + C3340) * C2753 + (C3341 + C3342) * C2759 +
            (C2757 * C702 + C32577 * C711 + C2756 * C366 + C32773 * C382) *
                C2752 +
            (C2757 * C696 + C32577 * C701 + C2756 * C352 + C32773 * C367) *
                C2758) *
               C32532 * C585) *
              C32477 * C472 +
          (((C3342 + C3341) * C2758 + (C3340 + C3339) * C2752 +
            (C3338 + C3337) * C2759 + (C3336 + C3335) * C2753 +
            (C3334 + C3333) * C2760 + (C3332 + C3331) * C2754 +
            (C2756 * C348 + C32773 * C359 + C2757 * C700 + C32577 * C709) *
                C2761 +
            (C2756 * C358 + C32773 * C378 + C2757 * C710 + C32577 * C715) *
                C32808) *
               C32532 * C585 -
           ((C2807 + C2808) * C32808 + (C2809 + C2810) * C2761 +
            (C2806 + C2805) * C2754 + (C2804 + C2803) * C2760 +
            (C2802 + C2801) * C2753 + (C2800 + C2799) * C2759 +
            (C2798 + C2797) * C2752 + (C2796 + C2795) * C2758) *
               C32532 * C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
             C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
                C31559 +
            (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
             C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
                C32754 +
            (C7744 + C7745 + C7746 + C7747) * C31540 +
            (C7748 + C7749 + C7750 + C7751) * C32440) *
               C32532 * C584 -
           ((C8256 + C8257 + C8258 + C8259) * C32440 +
            (C8260 + C8261 + C8262 + C8263) * C31540 +
            (C7708 * C1698 + C32814 * C1703 + C7707 * C1153 + C7701 * C1169 +
             C7706 * C702 + C7700 * C711 + C7705 * C366 + C7699 * C382) *
                C32754 +
            (C7708 * C1694 + C32814 * C1697 + C7707 * C1142 + C7701 * C1154 +
             C7706 * C696 + C7700 * C701 + C7705 * C352 + C7699 * C367) *
                C31559) *
               C32532 * C585) *
              C32477 * C472 +
          (((C8263 + C8262 + C8261 + C8260) * C31559 +
            (C8259 + C8258 + C8257 + C8256) * C32754 +
            (C7705 * C350 + C7699 * C363 + C7706 * C698 + C7700 * C705 +
             C7707 * C1140 + C7701 * C1150 + C7708 * C1696 + C32814 * C1701) *
                C31540 +
            (C7705 * C362 + C7699 * C380 + C7706 * C706 + C7700 * C713 +
             C7707 * C1149 + C7701 * C1167 + C7708 * C1702 + C32814 * C1705) *
                C32440) *
               C32532 * C585 -
           ((C7752 + C7753 + C7754 + C7755) * C32440 +
            (C7756 + C7757 + C7758 + C7759) * C31540 +
            (C7751 + C7750 + C7749 + C7748) * C32754 +
            (C7747 + C7746 + C7745 + C7744) * C31559) *
               C32532 * C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
               C2758 +
           (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
               C2752 +
           (C2795 + C2796) * C2759 + (C2797 + C2798) * C2753 + C2811 * C2760 +
           C2812 * C2754 + C2813 * C2761 + C2814 * C32808) *
              C32532 * C32491 * C32477 * C110 -
          ((C2807 + C2808) * C32808 + (C2809 + C2810) * C2761 +
           (C2806 + C2805) * C2754 + (C2804 + C2803) * C2760 +
           (C2802 + C2801) * C2753 + (C2800 + C2799) * C2759 +
           (C2798 + C2797) * C2752 + (C2796 + C2795) * C2758) *
              C32532 * C32491 * C32477 * C111 +
          (C2811 * C2758 + C2812 * C2752 + C2813 * C2759 + C2814 * C2753 +
           (C2810 + C2809) * C2760 + (C2808 + C2807) * C2754 +
           (C2756 * C124 + C32773 * C137 + C2757 * C474 + C32577 * C475) *
               C2761 +
           (C2756 * C136 + C32773 * C145 + C2757 * C476 + C32577 * C477) *
               C32808) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
               C2758 +
           (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
               C2752 +
           (C2795 + C2796) * C2759 + (C2797 + C2798) * C2753 + C2811 * C2760 +
           C2812 * C2754 + C2813 * C2761 + C2814 * C32808) *
              C32532 * C32491 * C239 -
          ((C2757 * C270 + C32577 * C281 + C2756 * C255 + C32773 * C274) *
               C32808 +
           (C2757 * C251 + C32577 * C269 + C2756 * C244 + C32773 * C256) *
               C2761 +
           (C2757 * C268 + C32577 * C280 + C2756 * C257 + C32773 * C275) *
               C2754 +
           (C2757 * C250 + C32577 * C267 + C2756 * C245 + C32773 * C258) *
               C2760 +
           (C2757 * C266 + C32577 * C279 + C2756 * C259 + C32773 * C276) *
               C2753 +
           (C2757 * C249 + C32577 * C265 + C2756 * C246 + C32773 * C260) *
               C2759 +
           (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
               C2752 +
           (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
               C2758) *
              C32532 * C32491 * C240 +
          ((C2756 * C248 + C32773 * C263 + C2757 * C1008 + C32577 * C1017) *
               C2758 +
           (C2756 * C264 + C32773 * C278 + C2757 * C1016 + C32577 * C1026) *
               C2752 +
           (C2756 * C249 + C32773 * C265 + C2757 * C1007 + C32577 * C1015) *
               C2759 +
           (C2756 * C266 + C32773 * C279 + C2757 * C1014 + C32577 * C1025) *
               C2753 +
           (C2756 * C250 + C32773 * C267 + C2757 * C1006 + C32577 * C1013) *
               C2760 +
           (C2756 * C268 + C32773 * C280 + C2757 * C1012 + C32577 * C1024) *
               C2754 +
           (C2756 * C251 + C32773 * C269 + C2757 * C1322 + C32577 * C1323) *
               C2761 +
           (C2756 * C270 + C32773 * C281 + C2757 * C1324 + C32577 * C1325) *
               C32808) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
            C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
               C31559 +
           (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
            C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
               C32754 +
           (C7744 + C7745 + C7746 + C7747) * C31540 +
           (C7748 + C7749 + C7750 + C7751) * C32440) *
              C32532 * C32491 * C32477 * C110 -
          ((C7752 + C7753 + C7754 + C7755) * C32440 +
           (C7756 + C7757 + C7758 + C7759) * C31540 +
           (C7751 + C7750 + C7749 + C7748) * C32754 +
           (C7747 + C7746 + C7745 + C7744) * C31559) *
              C32532 * C32491 * C32477 * C111 +
          ((C7759 + C7758 + C7757 + C7756) * C31559 +
           (C7755 + C7754 + C7753 + C7752) * C32754 +
           (C7705 * C122 + C7699 * C132 + C7706 * C244 + C7700 * C256 +
            C7707 * C251 + C7701 * C269 + C7708 * C1322 + C32814 * C1323) *
               C31540 +
           (C7705 * C133 + C7699 * C143 + C7706 * C255 + C7700 * C274 +
            C7707 * C270 + C7701 * C281 + C7708 * C1324 + C32814 * C1325) *
               C32440) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
            C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
               C31559 +
           (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
            C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
               C32754 +
           (C7744 + C7745 + C7746 + C7747) * C31540 +
           (C7748 + C7749 + C7750 + C7751) * C32440) *
              C32532 * C32491 * C239 -
          ((C7708 * C1021 + C32814 * C1028 + C7707 * C1014 + C7701 * C1025 +
            C7706 * C266 + C7700 * C279 + C7705 * C259 + C7699 * C276) *
               C32440 +
           (C7708 * C1010 + C32814 * C1020 + C7707 * C1007 + C7701 * C1015 +
            C7706 * C249 + C7700 * C265 + C7705 * C246 + C7699 * C260) *
               C31540 +
           (C7708 * C1019 + C32814 * C1027 + C7707 * C1016 + C7701 * C1026 +
            C7706 * C264 + C7700 * C278 + C7705 * C261 + C7699 * C277) *
               C32754 +
           (C7708 * C1009 + C32814 * C1018 + C7707 * C1008 + C7701 * C1017 +
            C7706 * C248 + C7700 * C263 + C7705 * C247 + C7699 * C262) *
               C31559) *
              C32532 * C32491 * C240 +
          ((C7705 * C248 + C7699 * C263 + C7706 * C1008 + C7700 * C1017 +
            C7707 * C1009 + C7701 * C1018 + C7708 * C6354 + C32814 * C6357) *
               C31559 +
           (C7705 * C264 + C7699 * C278 + C7706 * C1016 + C7700 * C1026 +
            C7707 * C1019 + C7701 * C1027 + C7708 * C6356 + C32814 * C6360) *
               C32754 +
           (C7705 * C249 + C7699 * C265 + C7706 * C1007 + C7700 * C1015 +
            C7707 * C1010 + C7701 * C1020 + C7708 * C6518 + C32814 * C6519) *
               C31540 +
           (C7705 * C266 + C7699 * C279 + C7706 * C1014 + C7700 * C1025 +
            C7707 * C1021 + C7701 * C1028 + C7708 * C6520 + C32814 * C6521) *
               C32440) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                 C835 +
             (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                 C829 +
             (C2795 + C2796) * C836 + (C2797 + C2798) * C830 + C2811 * C837 +
             C2812 * C32793) *
                C32774 +
            ((C4669 + C4670) * C835 + (C4671 + C4672) * C829 +
             (C3342 + C3341) * C836 + (C3340 + C3339) * C830 + C4343 * C837 +
             C4344 * C32793) *
                C32619) *
               C32491 * C470 -
           (((C4895 + C4896) * C32793 + (C4897 + C4898) * C837 +
             (C4899 + C4900) * C830 + (C4901 + C4902) * C836 +
             (C2757 * C1153 + C32577 * C1169 + C2756 * C702 + C32773 * C711) *
                 C829 +
             (C2757 * C1142 + C32577 * C1154 + C2756 * C696 + C32773 * C701) *
                 C835) *
                C32619 +
            ((C3169 + C3170) * C32793 + (C3171 + C3172) * C837 +
             (C3173 + C3174) * C830 + (C3175 + C3176) * C836 +
             (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                 C829 +
             (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                 C835) *
                C32774) *
               C32491 * C471) *
              C472 +
          ((((C3176 + C3175) * C835 + (C3174 + C3173) * C829 +
             (C3172 + C3171) * C836 + (C3170 + C3169) * C830 +
             (C3168 + C3167) * C837 + (C3166 + C3165) * C32793) *
                C32774 +
            ((C4902 + C4901) * C835 + (C4900 + C4899) * C829 +
             (C4898 + C4897) * C836 + (C4896 + C4895) * C830 +
             (C2756 * C699 + C32773 * C707 + C2757 * C1508 + C32577 * C1509) *
                 C837 +
             (C2756 * C708 + C32773 * C714 + C2757 * C1510 + C32577 * C1511) *
                 C32793) *
                C32619) *
               C32491 * C471 -
           (((C3331 + C3332) * C32793 + (C3333 + C3334) * C837 +
             (C3335 + C3336) * C830 + (C3337 + C3338) * C836 +
             (C3339 + C3340) * C829 + (C3341 + C3342) * C835) *
                C32619 +
            ((C2806 + C2805) * C32793 + (C2804 + C2803) * C837 +
             (C2802 + C2801) * C830 + (C2800 + C2799) * C836 +
             (C2798 + C2797) * C829 + (C2796 + C2795) * C835) *
                C32774) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
              C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
                 C6291 +
             (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
              C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
                 C32430) *
                C32774 +
            ((C9766 + C9767 + C9768 + C9769) * C6291 +
             (C9770 + C9771 + C9772 + C9773) * C32430) *
                C32619) *
               C32491 * C470 -
           (((C7708 * C6427 + C32814 * C6433 + C7707 * C1698 + C7701 * C1703 +
              C7706 * C1153 + C7700 * C1169 + C7705 * C702 + C7699 * C711) *
                 C32430 +
             (C7708 * C6424 + C32814 * C6428 + C7707 * C1694 + C7701 * C1697 +
              C7706 * C1142 + C7700 * C1154 + C7705 * C696 + C7699 * C701) *
                 C6291) *
                C32619 +
            ((C7708 * C1019 + C32814 * C1027 + C7707 * C1016 + C7701 * C1026 +
              C7706 * C264 + C7700 * C278 + C7705 * C261 + C7699 * C277) *
                 C32430 +
             (C7708 * C1009 + C32814 * C1018 + C7707 * C1008 + C7701 * C1017 +
              C7706 * C248 + C7700 * C263 + C7705 * C247 + C7699 * C262) *
                 C6291) *
                C32774) *
               C32491 * C471) *
              C472 +
          ((((C8109 + C8108 + C8107 + C8106) * C6291 +
             (C8105 + C8104 + C8103 + C8102) * C32430) *
                C32774 +
            ((C7705 * C697 + C7699 * C703 + C7706 * C1141 + C7700 * C1152 +
              C7707 * C1695 + C7701 * C1699 + C7708 * C6604 + C32814 * C6605) *
                 C6291 +
             (C7705 * C704 + C7699 * C712 + C7706 * C1151 + C7700 * C1168 +
              C7707 * C1700 + C7701 * C1704 + C7708 * C6606 + C32814 * C6607) *
                 C32430) *
                C32619) *
               C32491 * C471 -
           (((C8256 + C8257 + C8258 + C8259) * C32430 +
             (C8260 + C8261 + C8262 + C8263) * C6291) *
                C32619 +
            ((C7751 + C7750 + C7749 + C7748) * C32430 +
             (C7747 + C7746 + C7745 + C7744) * C6291) *
                C32774) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                 C835 +
             (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                 C829 +
             (C2795 + C2796) * C836 + (C2797 + C2798) * C830 + C2811 * C837 +
             C2812 * C32793) *
                C32774 +
            ((C4669 + C4670) * C835 + (C4671 + C4672) * C829 + C5097 * C836 +
             C5098 * C830 + C4343 * C837 + C4344 * C32793) *
                C32619) *
               C584 -
           (((C4673 + C4674) * C32793 + (C4675 + C4676) * C837 +
             (C4677 + C4678) * C830 + (C4679 + C4680) * C836 +
             (C4681 + C4682) * C829 + (C4683 + C4684) * C835) *
                C32619 +
            (C5099 * C32793 + C5100 * C837 + C5101 * C830 + C5102 * C836 +
             (C4672 + C4671) * C829 + (C4670 + C4669) * C835) *
                C32774) *
               C585) *
              C470 +
          ((((C5305 + C5306) * C835 + (C5307 + C5308) * C829 +
             (C4902 + C4901) * C836 + (C4900 + C4899) * C830 +
             (C4898 + C4897) * C837 + (C4896 + C4895) * C32793) *
                C32774 +
            ((C2756 * C1143 + C32773 * C1155 + C2757 * C1144 + C32577 * C1156) *
                 C835 +
             (C2756 * C1157 + C32773 * C1170 + C2757 * C1158 + C32577 * C1171) *
                 C829 +
             (C2756 * C1145 + C32773 * C1159 + C2757 * C1146 + C32577 * C1160) *
                 C836 +
             (C2756 * C1161 + C32773 * C1172 + C2757 * C1162 + C32577 * C1173) *
                 C830 +
             (C2756 * C1147 + C32773 * C1163 + C2757 * C1148 + C32577 * C1164) *
                 C837 +
             (C2756 * C1165 + C32773 * C1174 + C2757 * C1166 + C32577 * C1175) *
                 C32793) *
                C32619) *
               C585 -
           (((C4895 + C4896) * C32793 + (C4897 + C4898) * C837 +
             (C4899 + C4900) * C830 + (C4901 + C4902) * C836 +
             (C5308 + C5307) * C829 + (C5306 + C5305) * C835) *
                C32619 +
            ((C3169 + C3170) * C32793 + (C3171 + C3172) * C837 +
             (C3173 + C3174) * C830 + (C3175 + C3176) * C836 +
             (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                 C829 +
             (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                 C835) *
                C32774) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
              C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
                 C6291 +
             (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
              C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
                 C32430) *
                C32774 +
            ((C9766 + C9767 + C9768 + C9769) * C6291 +
             (C9770 + C9771 + C9772 + C9773) * C32430) *
                C32619) *
               C584 -
           (((C9774 + C9775 + C9776 + C9777) * C32430 +
             (C9778 + C9779 + C9780 + C9781) * C6291) *
                C32619 +
            ((C9773 + C9772 + C9771 + C9770) * C32430 +
             (C9769 + C9768 + C9767 + C9766) * C6291) *
                C32774) *
               C585) *
              C470 +
          ((((C10188 + C10189 + C10190 + C10191) * C6291 +
             (C10192 + C10193 + C10194 + C10195) * C32430) *
                C32774 +
            ((C7705 * C1143 + C7699 * C1155 + C7706 * C1144 + C7700 * C1156 +
              C7707 * C6425 + C7701 * C6429 + C7708 * C6426 + C32814 * C6430) *
                 C6291 +
             (C7705 * C1157 + C7699 * C1170 + C7706 * C1158 + C7700 * C1171 +
              C7707 * C6431 + C7701 * C6434 + C7708 * C6432 + C32814 * C6435) *
                 C32430) *
                C32619) *
               C585 -
           (((C10195 + C10194 + C10193 + C10192) * C32430 +
             (C10191 + C10190 + C10189 + C10188) * C6291) *
                C32619 +
            ((C7708 * C1019 + C32814 * C1027 + C7707 * C1016 + C7701 * C1026 +
              C7706 * C264 + C7700 * C278 + C7705 * C261 + C7699 * C277) *
                 C32430 +
             (C7708 * C1009 + C32814 * C1018 + C7707 * C1008 + C7701 * C1017 +
              C7706 * C248 + C7700 * C263 + C7705 * C247 + C7699 * C262) *
                 C6291) *
                C32774) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C835 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C829 +
            (C2795 + C2796) * C836 + (C2797 + C2798) * C830 + C2811 * C837 +
            C2812 * C32793) *
               C32774 +
           ((C2756 * C352 + C32773 * C367 + C2757 * C696 + C32577 * C701) *
                C835 +
            (C2756 * C366 + C32773 * C382 + C2757 * C702 + C32577 * C711) *
                C829 +
            (C3342 + C3341) * C836 + (C3340 + C3339) * C830 + C4343 * C837 +
            C4344 * C32793) *
               C32619) *
              C32491 * C239 -
          (((C2757 * C1149 + C32577 * C1167 + C2756 * C706 + C32773 * C713) *
                C32793 +
            (C2757 * C1140 + C32577 * C1150 + C2756 * C698 + C32773 * C705) *
                C837 +
            (C2757 * C1151 + C32577 * C1168 + C2756 * C704 + C32773 * C712) *
                C830 +
            (C2757 * C1141 + C32577 * C1152 + C2756 * C697 + C32773 * C703) *
                C836 +
            (C2757 * C1153 + C32577 * C1169 + C2756 * C702 + C32773 * C711) *
                C829 +
            (C2757 * C1142 + C32577 * C1154 + C2756 * C696 + C32773 * C701) *
                C835) *
               C32619 +
           ((C3169 + C3170) * C32793 + (C3171 + C3172) * C837 +
            (C3173 + C3174) * C830 + (C3175 + C3176) * C836 +
            (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                C829 +
            (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                C835) *
               C32774) *
              C32491 * C240 +
          (((C2756 * C248 + C32773 * C263 + C2757 * C1008 + C32577 * C1017) *
                C835 +
            (C2756 * C264 + C32773 * C278 + C2757 * C1016 + C32577 * C1026) *
                C829 +
            (C2756 * C249 + C32773 * C265 + C2757 * C1007 + C32577 * C1015) *
                C836 +
            (C2756 * C266 + C32773 * C279 + C2757 * C1014 + C32577 * C1025) *
                C830 +
            (C2756 * C250 + C32773 * C267 + C2757 * C1006 + C32577 * C1013) *
                C837 +
            (C2756 * C268 + C32773 * C280 + C2757 * C1012 + C32577 * C1024) *
                C32793) *
               C32774 +
           ((C2756 * C1142 + C32773 * C1154 + C2757 * C1694 + C32577 * C1697) *
                C835 +
            (C2756 * C1153 + C32773 * C1169 + C2757 * C1698 + C32577 * C1703) *
                C829 +
            (C2756 * C1141 + C32773 * C1152 + C2757 * C1695 + C32577 * C1699) *
                C836 +
            (C2756 * C1151 + C32773 * C1168 + C2757 * C1700 + C32577 * C1704) *
                C830 +
            (C2756 * C1140 + C32773 * C1150 + C2757 * C1696 + C32577 * C1701) *
                C837 +
            (C2756 * C1149 + C32773 * C1167 + C2757 * C1702 + C32577 * C1705) *
                C32793) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C835 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C829 +
            (C2795 + C2796) * C836 + (C2797 + C2798) * C830 + C2811 * C837 +
            C2812 * C32793) *
               C32774 +
           ((C2756 * C352 + C32773 * C367 + C2757 * C696 + C32577 * C701) *
                C835 +
            (C2756 * C366 + C32773 * C382 + C2757 * C702 + C32577 * C711) *
                C829 +
            (C3342 + C3341) * C836 + (C3340 + C3339) * C830 + C4343 * C837 +
            C4344 * C32793) *
               C32619) *
              C32491 * C32477 * C110 -
          (((C3331 + C3332) * C32793 + (C3333 + C3334) * C837 +
            (C3335 + C3336) * C830 + (C3337 + C3338) * C836 +
            (C3339 + C3340) * C829 + (C3341 + C3342) * C835) *
               C32619 +
           ((C2806 + C2805) * C32793 + (C2804 + C2803) * C837 +
            (C2802 + C2801) * C830 + (C2800 + C2799) * C836 +
            (C2798 + C2797) * C829 + (C2796 + C2795) * C835) *
               C32774) *
              C32491 * C32477 * C111 +
          ((C2811 * C835 + C2812 * C829 + C2813 * C836 + C2814 * C830 +
            (C2810 + C2809) * C837 + (C2808 + C2807) * C32793) *
               C32774 +
           (C4343 * C835 + C4344 * C829 + (C3334 + C3333) * C836 +
            (C3332 + C3331) * C830 +
            (C2756 * C348 + C32773 * C359 + C2757 * C700 + C32577 * C709) *
                C837 +
            (C2756 * C358 + C32773 * C378 + C2757 * C710 + C32577 * C715) *
                C32793) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C835 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C829 +
            (C2795 + C2796) * C836 + (C2797 + C2798) * C830 + C2811 * C837 +
            C2812 * C32793) *
               C32774 +
           ((C4669 + C4670) * C835 + (C4671 + C4672) * C829 +
            (C3342 + C3341) * C836 + (C3340 + C3339) * C830 + C4343 * C837 +
            C4344 * C32793) *
               C32619) *
              C345 -
          (((C4673 + C4674) * C32793 + (C4675 + C4676) * C837 +
            (C4677 + C4678) * C830 + (C4679 + C4680) * C836 +
            (C4681 + C4682) * C829 + (C4683 + C4684) * C835) *
               C32619 +
           ((C3335 + C3336) * C32793 + (C3337 + C3338) * C837 +
            (C3339 + C3340) * C830 + (C3341 + C3342) * C836 +
            (C4672 + C4671) * C829 + (C4670 + C4669) * C835) *
               C32774) *
              C346 +
          (((C4684 + C4683) * C835 + (C4682 + C4681) * C829 +
            (C4680 + C4679) * C836 + (C4678 + C4677) * C830 +
            (C4676 + C4675) * C837 + (C4674 + C4673) * C32793) *
               C32774 +
           ((C2756 * C2059 + C32773 * C2068 + C2757 * C2616 + C32577 * C2619) *
                C835 +
            (C2756 * C2067 + C32773 * C2077 + C2757 * C2620 + C32577 * C2625) *
                C829 +
            (C2756 * C2058 + C32773 * C2066 + C2757 * C2617 + C32577 * C2621) *
                C836 +
            (C2756 * C2065 + C32773 * C2076 + C2757 * C2622 + C32577 * C2626) *
                C830 +
            (C2756 * C2057 + C32773 * C2064 + C2757 * C2618 + C32577 * C2623) *
                C837 +
            (C2756 * C2063 + C32773 * C2075 + C2757 * C2624 + C32577 * C2627) *
                C32793) *
               C32619) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
             C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
                C6291 +
            (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
             C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
                C32430) *
               C32774 +
           ((C7705 * C352 + C7699 * C367 + C7706 * C696 + C7700 * C701 +
             C7707 * C1142 + C7701 * C1154 + C7708 * C1694 + C32814 * C1697) *
                C6291 +
            (C7705 * C366 + C7699 * C382 + C7706 * C702 + C7700 * C711 +
             C7707 * C1153 + C7701 * C1169 + C7708 * C1698 + C32814 * C1703) *
                C32430) *
               C32619) *
              C32491 * C32477 * C110 -
          (((C8256 + C8257 + C8258 + C8259) * C32430 +
            (C8260 + C8261 + C8262 + C8263) * C6291) *
               C32619 +
           ((C7751 + C7750 + C7749 + C7748) * C32430 +
            (C7747 + C7746 + C7745 + C7744) * C6291) *
               C32774) *
              C32491 * C32477 * C111 +
          (((C7759 + C7758 + C7757 + C7756) * C6291 +
            (C7755 + C7754 + C7753 + C7752) * C32430) *
               C32774 +
           ((C7705 * C350 + C7699 * C363 + C7706 * C698 + C7700 * C705 +
             C7707 * C1140 + C7701 * C1150 + C7708 * C1696 + C32814 * C1701) *
                C6291 +
            (C7705 * C362 + C7699 * C380 + C7706 * C706 + C7700 * C713 +
             C7707 * C1149 + C7701 * C1167 + C7708 * C1702 + C32814 * C1705) *
                C32430) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
             C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
                C6291 +
            (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
             C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
                C32430) *
               C32774 +
           ((C7705 * C352 + C7699 * C367 + C7706 * C696 + C7700 * C701 +
             C7707 * C1142 + C7701 * C1154 + C7708 * C1694 + C32814 * C1697) *
                C6291 +
            (C7705 * C366 + C7699 * C382 + C7706 * C702 + C7700 * C711 +
             C7707 * C1153 + C7701 * C1169 + C7708 * C1698 + C32814 * C1703) *
                C32430) *
               C32619) *
              C32491 * C239 -
          (((C7708 * C6427 + C32814 * C6433 + C7707 * C1698 + C7701 * C1703 +
             C7706 * C1153 + C7700 * C1169 + C7705 * C702 + C7699 * C711) *
                C32430 +
            (C7708 * C6424 + C32814 * C6428 + C7707 * C1694 + C7701 * C1697 +
             C7706 * C1142 + C7700 * C1154 + C7705 * C696 + C7699 * C701) *
                C6291) *
               C32619 +
           ((C7708 * C1019 + C32814 * C1027 + C7707 * C1016 + C7701 * C1026 +
             C7706 * C264 + C7700 * C278 + C7705 * C261 + C7699 * C277) *
                C32430 +
            (C7708 * C1009 + C32814 * C1018 + C7707 * C1008 + C7701 * C1017 +
             C7706 * C248 + C7700 * C263 + C7705 * C247 + C7699 * C262) *
                C6291) *
               C32774) *
              C32491 * C240 +
          (((C7705 * C248 + C7699 * C263 + C7706 * C1008 + C7700 * C1017 +
             C7707 * C1009 + C7701 * C1018 + C7708 * C6354 + C32814 * C6357) *
                C6291 +
            (C7705 * C264 + C7699 * C278 + C7706 * C1016 + C7700 * C1026 +
             C7707 * C1019 + C7701 * C1027 + C7708 * C6356 + C32814 * C6360) *
                C32430) *
               C32774 +
           ((C7705 * C1142 + C7699 * C1154 + C7706 * C1694 + C7700 * C1697 +
             C7707 * C6424 + C7701 * C6428 + C7708 * C6690 + C32814 * C6691) *
                C6291 +
            (C7705 * C1153 + C7699 * C1169 + C7706 * C1698 + C7700 * C1703 +
             C7707 * C6427 + C7701 * C6433 + C7708 * C6692 + C32814 * C6693) *
                C32430) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
             C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
                C6291 +
            (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
             C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
                C32430) *
               C32774 +
           ((C9766 + C9767 + C9768 + C9769) * C6291 +
            (C9770 + C9771 + C9772 + C9773) * C32430) *
               C32619) *
              C345 -
          (((C9774 + C9775 + C9776 + C9777) * C32430 +
            (C9778 + C9779 + C9780 + C9781) * C6291) *
               C32619 +
           ((C9773 + C9772 + C9771 + C9770) * C32430 +
            (C9769 + C9768 + C9767 + C9766) * C6291) *
               C32774) *
              C346 +
          (((C9781 + C9780 + C9779 + C9778) * C6291 +
            (C9777 + C9776 + C9775 + C9774) * C32430) *
               C32774 +
           ((C7705 * C2059 + C7699 * C2068 + C7706 * C2616 + C7700 * C2619 +
             C7707 * C7024 + C7701 * C7028 + C7708 * C7561 + C32814 * C7562) *
                C6291 +
            (C7705 * C2067 + C7699 * C2077 + C7706 * C2620 + C7700 * C2625 +
             C7707 * C7027 + C7701 * C7033 + C7708 * C7563 + C32814 * C7564) *
                C32430) *
               C32619) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                 C835 +
             (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                 C829 +
             (C2795 + C2796) * C836 + (C2797 + C2798) * C830 + C2811 * C837 +
             C2812 * C32793) *
                C32774 +
            ((C4669 + C4670) * C835 + (C4671 + C4672) * C829 + C5097 * C836 +
             C5098 * C830 + C4343 * C837 + C4344 * C32793) *
                C32619) *
               C584 -
           (((C4673 + C4674) * C32793 + (C4675 + C4676) * C837 +
             (C4677 + C4678) * C830 + (C4679 + C4680) * C836 +
             (C4681 + C4682) * C829 + (C4683 + C4684) * C835) *
                C32619 +
            (C5099 * C32793 + C5100 * C837 + C5101 * C830 + C5102 * C836 +
             (C4672 + C4671) * C829 + (C4670 + C4669) * C835) *
                C32774) *
               C585) *
              C32477 * C472 +
          (((C5097 * C835 + C5098 * C829 + C4343 * C836 + C4344 * C830 +
             (C3334 + C3333) * C837 + (C3332 + C3331) * C32793) *
                C32774 +
            ((C4680 + C4679) * C835 + (C4678 + C4677) * C829 +
             (C4676 + C4675) * C836 + (C4674 + C4673) * C830 +
             (C2756 * C356 + C32773 * C374 + C2757 * C2280 + C32577 * C2281) *
                 C837 +
             (C2756 * C375 + C32773 * C386 + C2757 * C2282 + C32577 * C2283) *
                 C32793) *
                C32619) *
               C585 -
           (((C3331 + C3332) * C32793 + (C3333 + C3334) * C837 + C5099 * C830 +
             C5100 * C836 + C5101 * C829 + C5102 * C835) *
                C32619 +
            ((C2806 + C2805) * C32793 + (C2804 + C2803) * C837 +
             (C2802 + C2801) * C830 + (C2800 + C2799) * C836 +
             (C2798 + C2797) * C829 + (C2796 + C2795) * C835) *
                C32774) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
              C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
                 C6291 +
             (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
              C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
                 C32430) *
                C32774 +
            ((C9766 + C9767 + C9768 + C9769) * C6291 +
             (C9770 + C9771 + C9772 + C9773) * C32430) *
                C32619) *
               C584 -
           (((C9774 + C9775 + C9776 + C9777) * C32430 +
             (C9778 + C9779 + C9780 + C9781) * C6291) *
                C32619 +
            ((C9773 + C9772 + C9771 + C9770) * C32430 +
             (C9769 + C9768 + C9767 + C9766) * C6291) *
                C32774) *
               C585) *
              C32477 * C472 +
          ((((C8263 + C8262 + C8261 + C8260) * C6291 +
             (C8259 + C8258 + C8257 + C8256) * C32430) *
                C32774 +
            ((C7705 * C354 + C7699 * C370 + C7706 * C1145 + C7700 * C1159 +
              C7707 * C1146 + C7701 * C1160 + C7708 * C7243 + C32814 * C7244) *
                 C6291 +
             (C7705 * C371 + C7699 * C384 + C7706 * C1161 + C7700 * C1172 +
              C7707 * C1162 + C7701 * C1173 + C7708 * C7245 + C32814 * C7246) *
                 C32430) *
                C32619) *
               C585 -
           (((C8256 + C8257 + C8258 + C8259) * C32430 +
             (C8260 + C8261 + C8262 + C8263) * C6291) *
                C32619 +
            ((C7751 + C7750 + C7749 + C7748) * C32430 +
             (C7747 + C7746 + C7745 + C7744) * C6291) *
                C32774) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C835 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C829 +
            (C2795 + C2796) * C836 + (C2797 + C2798) * C830 + C2811 * C837 +
            C2812 * C32793) *
               C32774 +
           ((C2756 * C352 + C32773 * C367 + C2757 * C696 + C32577 * C701) *
                C835 +
            (C2756 * C366 + C32773 * C382 + C2757 * C702 + C32577 * C711) *
                C829 +
            (C3342 + C3341) * C836 + (C3340 + C3339) * C830 + C4343 * C837 +
            C4344 * C32793) *
               C32619) *
              C32491 * C32477 * C110 -
          (((C3331 + C3332) * C32793 + (C3333 + C3334) * C837 +
            (C3335 + C3336) * C830 + (C3337 + C3338) * C836 +
            (C3339 + C3340) * C829 + (C3341 + C3342) * C835) *
               C32619 +
           ((C2806 + C2805) * C32793 + (C2804 + C2803) * C837 +
            (C2802 + C2801) * C830 + (C2800 + C2799) * C836 +
            (C2798 + C2797) * C829 + (C2796 + C2795) * C835) *
               C32774) *
              C32491 * C32477 * C111 +
          ((C2811 * C835 + C2812 * C829 + C2813 * C836 + C2814 * C830 +
            (C2810 + C2809) * C837 + (C2808 + C2807) * C32793) *
               C32774 +
           (C4343 * C835 + C4344 * C829 + (C3334 + C3333) * C836 +
            (C3332 + C3331) * C830 +
            (C2756 * C348 + C32773 * C359 + C2757 * C700 + C32577 * C709) *
                C837 +
            (C2756 * C358 + C32773 * C378 + C2757 * C710 + C32577 * C715) *
                C32793) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C2756 * C119 + C32773 * C126 + C2757 * C247 + C32577 * C262) *
                C835 +
            (C2756 * C127 + C32773 * C140 + C2757 * C261 + C32577 * C277) *
                C829 +
            (C2795 + C2796) * C836 + (C2797 + C2798) * C830 + C2811 * C837 +
            C2812 * C32793) *
               C32774 +
           ((C2756 * C352 + C32773 * C367 + C2757 * C696 + C32577 * C701) *
                C835 +
            (C2756 * C366 + C32773 * C382 + C2757 * C702 + C32577 * C711) *
                C829 +
            (C3342 + C3341) * C836 + (C3340 + C3339) * C830 + C4343 * C837 +
            C4344 * C32793) *
               C32619) *
              C32491 * C239 -
          (((C2757 * C1149 + C32577 * C1167 + C2756 * C706 + C32773 * C713) *
                C32793 +
            (C2757 * C1140 + C32577 * C1150 + C2756 * C698 + C32773 * C705) *
                C837 +
            (C2757 * C1151 + C32577 * C1168 + C2756 * C704 + C32773 * C712) *
                C830 +
            (C2757 * C1141 + C32577 * C1152 + C2756 * C697 + C32773 * C703) *
                C836 +
            (C2757 * C1153 + C32577 * C1169 + C2756 * C702 + C32773 * C711) *
                C829 +
            (C2757 * C1142 + C32577 * C1154 + C2756 * C696 + C32773 * C701) *
                C835) *
               C32619 +
           ((C3169 + C3170) * C32793 + (C3171 + C3172) * C837 +
            (C3173 + C3174) * C830 + (C3175 + C3176) * C836 +
            (C2757 * C264 + C32577 * C278 + C2756 * C261 + C32773 * C277) *
                C829 +
            (C2757 * C248 + C32577 * C263 + C2756 * C247 + C32773 * C262) *
                C835) *
               C32774) *
              C32491 * C240 +
          (((C2756 * C248 + C32773 * C263 + C2757 * C1008 + C32577 * C1017) *
                C835 +
            (C2756 * C264 + C32773 * C278 + C2757 * C1016 + C32577 * C1026) *
                C829 +
            (C2756 * C249 + C32773 * C265 + C2757 * C1007 + C32577 * C1015) *
                C836 +
            (C2756 * C266 + C32773 * C279 + C2757 * C1014 + C32577 * C1025) *
                C830 +
            (C2756 * C250 + C32773 * C267 + C2757 * C1006 + C32577 * C1013) *
                C837 +
            (C2756 * C268 + C32773 * C280 + C2757 * C1012 + C32577 * C1024) *
                C32793) *
               C32774 +
           ((C2756 * C1142 + C32773 * C1154 + C2757 * C1694 + C32577 * C1697) *
                C835 +
            (C2756 * C1153 + C32773 * C1169 + C2757 * C1698 + C32577 * C1703) *
                C829 +
            (C2756 * C1141 + C32773 * C1152 + C2757 * C1695 + C32577 * C1699) *
                C836 +
            (C2756 * C1151 + C32773 * C1168 + C2757 * C1700 + C32577 * C1704) *
                C830 +
            (C2756 * C1140 + C32773 * C1150 + C2757 * C1696 + C32577 * C1701) *
                C837 +
            (C2756 * C1149 + C32773 * C1167 + C2757 * C1702 + C32577 * C1705) *
                C32793) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
             C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
                C6291 +
            (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
             C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
                C32430) *
               C32774 +
           ((C7705 * C352 + C7699 * C367 + C7706 * C696 + C7700 * C701 +
             C7707 * C1142 + C7701 * C1154 + C7708 * C1694 + C32814 * C1697) *
                C6291 +
            (C7705 * C366 + C7699 * C382 + C7706 * C702 + C7700 * C711 +
             C7707 * C1153 + C7701 * C1169 + C7708 * C1698 + C32814 * C1703) *
                C32430) *
               C32619) *
              C32491 * C32477 * C110 -
          (((C8256 + C8257 + C8258 + C8259) * C32430 +
            (C8260 + C8261 + C8262 + C8263) * C6291) *
               C32619 +
           ((C7751 + C7750 + C7749 + C7748) * C32430 +
            (C7747 + C7746 + C7745 + C7744) * C6291) *
               C32774) *
              C32491 * C32477 * C111 +
          (((C7759 + C7758 + C7757 + C7756) * C6291 +
            (C7755 + C7754 + C7753 + C7752) * C32430) *
               C32774 +
           ((C7705 * C350 + C7699 * C363 + C7706 * C698 + C7700 * C705 +
             C7707 * C1140 + C7701 * C1150 + C7708 * C1696 + C32814 * C1701) *
                C6291 +
            (C7705 * C362 + C7699 * C380 + C7706 * C706 + C7700 * C713 +
             C7707 * C1149 + C7701 * C1167 + C7708 * C1702 + C32814 * C1705) *
                C32430) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C7705 * C119 + C7699 * C126 + C7706 * C247 + C7700 * C262 +
             C7707 * C248 + C7701 * C263 + C7708 * C1008 + C32814 * C1017) *
                C6291 +
            (C7705 * C127 + C7699 * C140 + C7706 * C261 + C7700 * C277 +
             C7707 * C264 + C7701 * C278 + C7708 * C1016 + C32814 * C1026) *
                C32430) *
               C32774 +
           ((C7705 * C352 + C7699 * C367 + C7706 * C696 + C7700 * C701 +
             C7707 * C1142 + C7701 * C1154 + C7708 * C1694 + C32814 * C1697) *
                C6291 +
            (C7705 * C366 + C7699 * C382 + C7706 * C702 + C7700 * C711 +
             C7707 * C1153 + C7701 * C1169 + C7708 * C1698 + C32814 * C1703) *
                C32430) *
               C32619) *
              C32491 * C239 -
          (((C7708 * C6427 + C32814 * C6433 + C7707 * C1698 + C7701 * C1703 +
             C7706 * C1153 + C7700 * C1169 + C7705 * C702 + C7699 * C711) *
                C32430 +
            (C7708 * C6424 + C32814 * C6428 + C7707 * C1694 + C7701 * C1697 +
             C7706 * C1142 + C7700 * C1154 + C7705 * C696 + C7699 * C701) *
                C6291) *
               C32619 +
           ((C7708 * C1019 + C32814 * C1027 + C7707 * C1016 + C7701 * C1026 +
             C7706 * C264 + C7700 * C278 + C7705 * C261 + C7699 * C277) *
                C32430 +
            (C7708 * C1009 + C32814 * C1018 + C7707 * C1008 + C7701 * C1017 +
             C7706 * C248 + C7700 * C263 + C7705 * C247 + C7699 * C262) *
                C6291) *
               C32774) *
              C32491 * C240 +
          (((C7705 * C248 + C7699 * C263 + C7706 * C1008 + C7700 * C1017 +
             C7707 * C1009 + C7701 * C1018 + C7708 * C6354 + C32814 * C6357) *
                C6291 +
            (C7705 * C264 + C7699 * C278 + C7706 * C1016 + C7700 * C1026 +
             C7707 * C1019 + C7701 * C1027 + C7708 * C6356 + C32814 * C6360) *
                C32430) *
               C32774 +
           ((C7705 * C1142 + C7699 * C1154 + C7706 * C1694 + C7700 * C1697 +
             C7707 * C6424 + C7701 * C6428 + C7708 * C6690 + C32814 * C6691) *
                C6291 +
            (C7705 * C1153 + C7699 * C1169 + C7706 * C1698 + C7700 * C1703 +
             C7707 * C6427 + C7701 * C6433 + C7708 * C6692 + C32814 * C6693) *
                C32430) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C835 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C829 +
            (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
            C895 * C837 + C896 * C32793) *
               C32532 * C32491 * C470 -
           ((C1351 + C1352 + C1353) * C32793 + (C1354 + C1355 + C1356) * C837 +
            (C1357 + C1358 + C1359) * C830 + (C1360 + C1361 + C1362) * C836 +
            (C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
             C832 * C261 + C32839 * C277) *
                C829 +
            (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
             C832 * C247 + C32839 * C262) *
                C835) *
               C32532 * C32491 * C471) *
              C472 +
          (((C1362 + C1361 + C1360) * C835 + (C1359 + C1358 + C1357) * C829 +
            (C1356 + C1355 + C1354) * C836 + (C1353 + C1352 + C1351) * C830 +
            (C832 * C244 + C32839 * C256 + C833 * C251 + C32827 * C269 +
             C834 * C1322 + C32804 * C1323) *
                C837 +
            (C832 * C255 + C32839 * C274 + C833 * C270 + C32827 * C281 +
             C834 * C1324 + C32804 * C1325) *
                C32793) *
               C32532 * C32491 * C471 -
           ((C887 + C888 + C889) * C32793 + (C890 + C891 + C892) * C837 +
            (C886 + C885 + C884) * C830 + (C883 + C882 + C881) * C836 +
            (C880 + C879 + C878) * C829 + (C877 + C876 + C875) * C835) *
               C32532 * C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C114 +
            (C113 * C127 + C32514 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C32532 * C32491 * C470 -
           (C495 * C106 + C496 * C118 + C497 * C105 + C498 * C117 +
            C499 * C104 + C500 * C116 + C501 * C103 + C502 * C115 +
            (C113 * C261 + C32514 * C277) * C102 +
            (C113 * C247 + C32514 * C262) * C114) *
               C32532 * C32491 * C471) *
              C472 +
          ((C502 * C114 + C501 * C102 + C500 * C115 + C499 * C103 +
            C498 * C116 + C497 * C104 + C496 * C117 + C495 * C105 +
            (C113 * C474 + C32514 * C475) * C118 +
            (C113 * C476 + C32514 * C477) * C106) *
               C32532 * C32491 * C471 -
           (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
            C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
            C169 * C102 + C168 * C114) *
               C32532 * C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C835 +
             (C113 * C127 + C32514 * C140) * C829 + C168 * C836 + C169 * C830 +
             C170 * C837 + C171 * C32793) *
                C32840 +
            (C2120 + C2121 + C2086 + C2087 + C2088 + C2089) * C32829 +
            C2134 * C32807) *
               C32491 * C470 -
           ((C2301 * C32793 + C2302 * C837 + C2303 * C830 + C2304 * C836 +
             (C113 * C1157 + C32514 * C1170) * C829 +
             (C113 * C1143 + C32514 * C1155) * C835) *
                C32807 +
            (C2305 * C32793 + C2306 * C837 + C2307 * C830 + C2308 * C836 +
             (C113 * C702 + C32514 * C711) * C829 +
             (C113 * C696 + C32514 * C701) * C835) *
                C32829 +
            (C499 * C32793 + C500 * C837 + C501 * C830 + C502 * C836 +
             (C113 * C261 + C32514 * C277) * C829 +
             (C113 * C247 + C32514 * C262) * C835) *
                C32840) *
               C32491 * C471) *
              C472 +
          (((C502 * C835 + C501 * C829 + C500 * C836 + C499 * C830 +
             C498 * C837 + C497 * C32793) *
                C32840 +
            (C2308 * C835 + C2307 * C829 + C2306 * C836 + C2305 * C830 +
             (C113 * C699 + C32514 * C707) * C837 +
             (C113 * C708 + C32514 * C714) * C32793) *
                C32829 +
            (C2304 * C835 + C2303 * C829 + C2302 * C836 + C2301 * C830 +
             (C113 * C2280 + C32514 * C2281) * C837 +
             (C113 * C2282 + C32514 * C2283) * C32793) *
                C32807) *
               C32491 * C471 -
           ((C1836 * C32793 + C1837 * C837 + C1835 * C830 + C1834 * C836 +
             C1833 * C829 + C1832 * C835) *
                C32807 +
            (C609 * C32793 + C610 * C837 + C611 * C830 + C612 * C836 +
             C613 * C829 + C614 * C835) *
                C32829 +
            (C173 * C32793 + C172 * C837 + C171 * C830 + C170 * C836 +
             C169 * C829 + C168 * C835) *
                C32840) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C5427 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32836 +
            (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
            C5487 * C5429 + C5488 * C32793) *
               C32532 * C32491 * C470 -
           ((C5879 + C5880 + C5881) * C32793 + (C5882 + C5883 + C5884) * C5429 +
            (C5885 + C5886 + C5887) * C32823 + (C5888 + C5889 + C5890) * C5428 +
            (C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
             C5424 * C261 + C5418 * C277) *
                C32836 +
            (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
             C5424 * C247 + C5418 * C262) *
                C5427) *
               C32532 * C32491 * C471) *
              C472 +
          (((C5890 + C5889 + C5888) * C5427 + (C5887 + C5886 + C5885) * C32836 +
            (C5884 + C5883 + C5882) * C5428 + (C5881 + C5880 + C5879) * C32823 +
            (C5424 * C244 + C5418 * C256 + C5425 * C251 + C5419 * C269 +
             C5426 * C1322 + C32804 * C1323) *
                C5429 +
            (C5424 * C255 + C5418 * C274 + C5425 * C270 + C5419 * C281 +
             C5426 * C1324 + C32804 * C1325) *
                C32793) *
               C32532 * C32491 * C471 -
           ((C5479 + C5480 + C5481) * C32793 + (C5482 + C5483 + C5484) * C5429 +
            (C5478 + C5477 + C5476) * C32823 + (C5475 + C5474 + C5473) * C5428 +
            (C5472 + C5471 + C5470) * C32836 +
            (C5469 + C5468 + C5467) * C5427) *
               C32532 * C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
             C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
             C6290 * C1009 + C6284 * C1018) *
                C6291 +
            (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
             C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
             C6290 * C1019 + C6284 * C1027) *
                C32430) *
               C32532 * C32491 * C470 -
           ((C6290 * C6356 + C6284 * C6360 + C6289 * C1019 + C6283 * C1027 +
             C6288 * C1016 + C6282 * C1026 + C6287 * C264 + C6281 * C278 +
             C6286 * C261 + C6280 * C277) *
                C32430 +
            (C6290 * C6354 + C6284 * C6357 + C6289 * C1009 + C6283 * C1018 +
             C6288 * C1008 + C6282 * C1017 + C6287 * C248 + C6281 * C263 +
             C6286 * C247 + C6280 * C262) *
                C6291) *
               C32532 * C32491 * C471) *
              C472 +
          (((C6286 * C246 + C6280 * C260 + C6287 * C249 + C6281 * C265 +
             C6288 * C1007 + C6282 * C1015 + C6289 * C1010 + C6283 * C1020 +
             C6290 * C6518 + C6284 * C6519) *
                C6291 +
            (C6286 * C259 + C6280 * C276 + C6287 * C266 + C6281 * C279 +
             C6288 * C1014 + C6282 * C1025 + C6289 * C1021 + C6283 * C1028 +
             C6290 * C6520 + C6284 * C6521) *
                C32430) *
               C32532 * C32491 * C471 -
           ((C6290 * C1021 + C6284 * C1028 + C6289 * C1014 + C6283 * C1025 +
             C6288 * C266 + C6282 * C279 + C6287 * C259 + C6281 * C276 +
             C6286 * C129 + C6280 * C141) *
                C32430 +
            (C6290 * C1010 + C6284 * C1020 + C6289 * C1007 + C6283 * C1015 +
             C6288 * C249 + C6282 * C265 + C6287 * C246 + C6281 * C260 +
             C6286 * C120 + C6280 * C128) *
                C6291) *
               C32532 * C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
              C5426 * C248 + C32804 * C263) *
                 C6291 +
             (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
              C5426 * C264 + C32804 * C278) *
                 C32430) *
                C32840 +
            ((C7073 + C7074 + C7075) * C6291 +
             (C7076 + C7077 + C7078) * C32430) *
                C32829 +
            C7097 * C32807) *
               C32491 * C470 -
           (((C5426 * C6431 + C32804 * C6434 + C5425 * C1158 + C5419 * C1171 +
              C5424 * C1157 + C5418 * C1170) *
                 C32430 +
             (C5426 * C6425 + C32804 * C6429 + C5425 * C1144 + C5419 * C1156 +
              C5424 * C1143 + C5418 * C1155) *
                 C6291) *
                C32807 +
            ((C5426 * C1698 + C32804 * C1703 + C5425 * C1153 + C5419 * C1169 +
              C5424 * C702 + C5418 * C711) *
                 C32430 +
             (C5426 * C1694 + C32804 * C1697 + C5425 * C1142 + C5419 * C1154 +
              C5424 * C696 + C5418 * C701) *
                 C6291) *
                C32829 +
            ((C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
              C5424 * C261 + C5418 * C277) *
                 C32430 +
             (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
              C5424 * C247 + C5418 * C262) *
                 C6291) *
                C32840) *
               C32491 * C471) *
              C472 +
          ((((C5890 + C5889 + C5888) * C6291 +
             (C5887 + C5886 + C5885) * C32430) *
                C32840 +
            ((C5424 * C697 + C5418 * C703 + C5425 * C1141 + C5419 * C1152 +
              C5426 * C1695 + C32804 * C1699) *
                 C6291 +
             (C5424 * C704 + C5418 * C712 + C5425 * C1151 + C5419 * C1168 +
              C5426 * C1700 + C32804 * C1704) *
                 C32430) *
                C32829 +
            ((C5424 * C1145 + C5418 * C1159 + C5425 * C1146 + C5419 * C1160 +
              C5426 * C7243 + C32804 * C7244) *
                 C6291 +
             (C5424 * C1161 + C5418 * C1172 + C5425 * C1162 + C5419 * C1173 +
              C5426 * C7245 + C32804 * C7246) *
                 C32430) *
                C32807) *
               C32491 * C471 -
           (((C5426 * C1162 + C32804 * C1173 + C5425 * C1161 + C5419 * C1172 +
              C5424 * C371 + C5418 * C384) *
                 C32430 +
             (C5426 * C1146 + C32804 * C1160 + C5425 * C1145 + C5419 * C1159 +
              C5424 * C354 + C5418 * C370) *
                 C6291) *
                C32807 +
            ((C6067 + C6068 + C6069) * C32430 +
             (C6070 + C6071 + C6072) * C6291) *
                C32829 +
            ((C5472 + C5471 + C5470) * C32430 +
             (C5469 + C5468 + C5467) * C6291) *
                C32840) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C835 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C829 +
            (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
            C895 * C837 + C896 * C32793) *
               C32532 * C584 -
           ((C1537 + C1538 + C1539) * C32793 + (C1540 + C1541 + C1542) * C837 +
            (C1543 + C1544 + C1545) * C830 + (C1546 + C1547 + C1548) * C836 +
            (C834 * C1153 + C32804 * C1169 + C833 * C702 + C32827 * C711 +
             C832 * C366 + C32839 * C382) *
                C829 +
            (C834 * C1142 + C32804 * C1154 + C833 * C696 + C32827 * C701 +
             C832 * C352 + C32839 * C367) *
                C835) *
               C32532 * C585) *
              C470 +
          (((C832 * C696 + C32839 * C701 + C833 * C1142 + C32827 * C1154 +
             C834 * C1694 + C32804 * C1697) *
                C835 +
            (C832 * C702 + C32839 * C711 + C833 * C1153 + C32827 * C1169 +
             C834 * C1698 + C32804 * C1703) *
                C829 +
            (C832 * C697 + C32839 * C703 + C833 * C1141 + C32827 * C1152 +
             C834 * C1695 + C32804 * C1699) *
                C836 +
            (C832 * C704 + C32839 * C712 + C833 * C1151 + C32827 * C1168 +
             C834 * C1700 + C32804 * C1704) *
                C830 +
            (C832 * C698 + C32839 * C705 + C833 * C1140 + C32827 * C1150 +
             C834 * C1696 + C32804 * C1701) *
                C837 +
            (C832 * C706 + C32839 * C713 + C833 * C1149 + C32827 * C1167 +
             C834 * C1702 + C32804 * C1705) *
                C32793) *
               C32532 * C585 -
           ((C1351 + C1352 + C1353) * C32793 + (C1354 + C1355 + C1356) * C837 +
            (C1357 + C1358 + C1359) * C830 + (C1360 + C1361 + C1362) * C836 +
            (C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
             C832 * C261 + C32839 * C277) *
                C829 +
            (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
             C832 * C247 + C32839 * C262) *
                C835) *
               C32532 * C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C114 +
            (C113 * C127 + C32514 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C32532 * C584 -
           (C607 * C106 + C608 * C118 + C609 * C105 + C610 * C117 +
            C611 * C104 + C612 * C116 + C613 * C103 + C614 * C115 +
            (C113 * C366 + C32514 * C382) * C102 +
            (C113 * C352 + C32514 * C367) * C114) *
               C32532 * C585) *
              C470 +
          (((C113 * C696 + C32514 * C701) * C114 +
            (C113 * C702 + C32514 * C711) * C102 +
            (C113 * C697 + C32514 * C703) * C115 +
            (C113 * C704 + C32514 * C712) * C103 +
            (C113 * C698 + C32514 * C705) * C116 +
            (C113 * C706 + C32514 * C713) * C104 +
            (C113 * C699 + C32514 * C707) * C117 +
            (C113 * C708 + C32514 * C714) * C105 +
            (C113 * C700 + C32514 * C709) * C118 +
            (C113 * C710 + C32514 * C715) * C106) *
               C32532 * C585 -
           (C495 * C106 + C496 * C118 + C497 * C105 + C498 * C117 +
            C499 * C104 + C500 * C116 + C501 * C103 + C502 * C115 +
            (C113 * C261 + C32514 * C277) * C102 +
            (C113 * C247 + C32514 * C262) * C114) *
               C32532 * C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C835 +
             (C113 * C127 + C32514 * C140) * C829 + C168 * C836 + C169 * C830 +
             C170 * C837 + C171 * C32793) *
                C32840 +
            (C2120 + C2121 + C2086 + C2087 + C2088 + C2089) * C32829 +
            C2134 * C32807) *
               C584 -
           ((C2124 + C2125 + C2126 + C2127 + C2128 + C2129) * C32807 +
            (C2097 + C2096 + C2095 + C2094 + C2123 + C2122) * C32829 +
            (C2089 + C2088 + C2087 + C2086 + C2121 + C2120) * C32840) *
               C585) *
              C470 +
          (((C2649 + C2650 + C2633 + C2634 + C2635 + C2636) * C32840 +
            (C2651 + C2652 + C2641 + C2642 + C2643 + C2644) * C32829 +
            ((C113 * C2616 + C32514 * C2619) * C835 +
             (C113 * C2620 + C32514 * C2625) * C829 +
             (C113 * C2617 + C32514 * C2621) * C836 +
             (C113 * C2622 + C32514 * C2626) * C830 +
             (C113 * C2618 + C32514 * C2623) * C837 +
             (C113 * C2624 + C32514 * C2627) * C32793) *
                C32807) *
               C585 -
           ((C2644 + C2643 + C2642 + C2641 + C2652 + C2651) * C32807 +
            (C2636 + C2635 + C2634 + C2633 + C2650 + C2649) * C32829 +
            (C499 * C32793 + C500 * C837 + C501 * C830 + C502 * C836 +
             (C113 * C261 + C32514 * C277) * C829 +
             (C113 * C247 + C32514 * C262) * C835) *
                C32840) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C5427 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32836 +
            (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
            C5487 * C5429 + C5488 * C32793) *
               C32532 * C584 -
           ((C6061 + C6062 + C6063) * C32793 + (C6064 + C6065 + C6066) * C5429 +
            (C6067 + C6068 + C6069) * C32823 + (C6070 + C6071 + C6072) * C5428 +
            (C5426 * C1153 + C32804 * C1169 + C5425 * C702 + C5419 * C711 +
             C5424 * C366 + C5418 * C382) *
                C32836 +
            (C5426 * C1142 + C32804 * C1154 + C5425 * C696 + C5419 * C701 +
             C5424 * C352 + C5418 * C367) *
                C5427) *
               C32532 * C585) *
              C470 +
          (((C5424 * C696 + C5418 * C701 + C5425 * C1142 + C5419 * C1154 +
             C5426 * C1694 + C32804 * C1697) *
                C5427 +
            (C5424 * C702 + C5418 * C711 + C5425 * C1153 + C5419 * C1169 +
             C5426 * C1698 + C32804 * C1703) *
                C32836 +
            (C5424 * C697 + C5418 * C703 + C5425 * C1141 + C5419 * C1152 +
             C5426 * C1695 + C32804 * C1699) *
                C5428 +
            (C5424 * C704 + C5418 * C712 + C5425 * C1151 + C5419 * C1168 +
             C5426 * C1700 + C32804 * C1704) *
                C32823 +
            (C5424 * C698 + C5418 * C705 + C5425 * C1140 + C5419 * C1150 +
             C5426 * C1696 + C32804 * C1701) *
                C5429 +
            (C5424 * C706 + C5418 * C713 + C5425 * C1149 + C5419 * C1167 +
             C5426 * C1702 + C32804 * C1705) *
                C32793) *
               C32532 * C585 -
           ((C5879 + C5880 + C5881) * C32793 + (C5882 + C5883 + C5884) * C5429 +
            (C5885 + C5886 + C5887) * C32823 + (C5888 + C5889 + C5890) * C5428 +
            (C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
             C5424 * C261 + C5418 * C277) *
                C32836 +
            (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
             C5424 * C247 + C5418 * C262) *
                C5427) *
               C32532 * C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
             C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
             C6290 * C1009 + C6284 * C1018) *
                C6291 +
            (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
             C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
             C6290 * C1019 + C6284 * C1027) *
                C32430) *
               C32532 * C584 -
           ((C6290 * C6427 + C6284 * C6433 + C6289 * C1698 + C6283 * C1703 +
             C6288 * C1153 + C6282 * C1169 + C6287 * C702 + C6281 * C711 +
             C6286 * C366 + C6280 * C382) *
                C32430 +
            (C6290 * C6424 + C6284 * C6428 + C6289 * C1694 + C6283 * C1697 +
             C6288 * C1142 + C6282 * C1154 + C6287 * C696 + C6281 * C701 +
             C6286 * C352 + C6280 * C367) *
                C6291) *
               C32532 * C585) *
              C470 +
          (((C6286 * C696 + C6280 * C701 + C6287 * C1142 + C6281 * C1154 +
             C6288 * C1694 + C6282 * C1697 + C6289 * C6424 + C6283 * C6428 +
             C6290 * C6690 + C6284 * C6691) *
                C6291 +
            (C6286 * C702 + C6280 * C711 + C6287 * C1153 + C6281 * C1169 +
             C6288 * C1698 + C6282 * C1703 + C6289 * C6427 + C6283 * C6433 +
             C6290 * C6692 + C6284 * C6693) *
                C32430) *
               C32532 * C585 -
           ((C6290 * C6356 + C6284 * C6360 + C6289 * C1019 + C6283 * C1027 +
             C6288 * C1016 + C6282 * C1026 + C6287 * C264 + C6281 * C278 +
             C6286 * C261 + C6280 * C277) *
                C32430 +
            (C6290 * C6354 + C6284 * C6357 + C6289 * C1009 + C6283 * C1018 +
             C6288 * C1008 + C6282 * C1017 + C6287 * C248 + C6281 * C263 +
             C6286 * C247 + C6280 * C262) *
                C6291) *
               C32532 * C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
              C5426 * C248 + C32804 * C263) *
                 C6291 +
             (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
              C5426 * C264 + C32804 * C278) *
                 C32430) *
                C32840 +
            ((C7073 + C7074 + C7075) * C6291 +
             (C7076 + C7077 + C7078) * C32430) *
                C32829 +
            C7097 * C32807) *
               C584 -
           (((C7085 + C7086 + C7087) * C32430 +
             (C7088 + C7089 + C7090) * C6291) *
                C32807 +
            ((C7084 + C7083 + C7082) * C32430 +
             (C7081 + C7080 + C7079) * C6291) *
                C32829 +
            ((C7078 + C7077 + C7076) * C32430 +
             (C7075 + C7074 + C7073) * C6291) *
                C32840) *
               C585) *
              C470 +
          ((((C7590 + C7591 + C7592) * C6291 +
             (C7593 + C7594 + C7595) * C32430) *
                C32840 +
            ((C7596 + C7597 + C7598) * C6291 +
             (C7599 + C7600 + C7601) * C32430) *
                C32829 +
            ((C5424 * C2616 + C5418 * C2619 + C5425 * C7024 + C5419 * C7028 +
              C5426 * C7561 + C32804 * C7562) *
                 C6291 +
             (C5424 * C2620 + C5418 * C2625 + C5425 * C7027 + C5419 * C7033 +
              C5426 * C7563 + C32804 * C7564) *
                 C32430) *
                C32807) *
               C585 -
           (((C7601 + C7600 + C7599) * C32430 +
             (C7598 + C7597 + C7596) * C6291) *
                C32807 +
            ((C7595 + C7594 + C7593) * C32430 +
             (C7592 + C7591 + C7590) * C6291) *
                C32829 +
            ((C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
              C5424 * C261 + C5418 * C277) *
                 C32430 +
             (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
              C5424 * C247 + C5418 * C262) *
                 C6291) *
                C32840) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((C113 * C119 + C32514 * C126) * C114 +
               (C113 * C127 + C32514 * C140) * C102 + C168 * C115 +
               C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
               C173 * C105 + C174 * C118 + C175 * C106) *
                  C32532 * C32491 * C32477 * C110 -
              (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
               C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
               C169 * C102 + C168 * C114) *
                  C32532 * C32491 * C32477 * C111 +
              (C170 * C114 + C171 * C102 + C172 * C115 + C173 * C103 +
               C174 * C116 + C175 * C104 + C177 * C117 + C176 * C105 +
               (C113 * C125 + C32514 * C138) * C118 +
               (C113 * C139 + C32514 * C146) * C106) *
                  C32532 * C32491 * C32477 * C112) +
         std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((C113 * C119 + C32514 * C126) * C114 +
               (C113 * C127 + C32514 * C140) * C102 + C168 * C115 +
               C169 * C103 + C170 * C116 + C171 * C104 + C172 * C117 +
               C173 * C105 + C174 * C118 + C175 * C106) *
                  C32532 * C32491 * C239 -
              ((C113 * C253 + C32514 * C273) * C106 +
               (C113 * C243 + C32514 * C254) * C118 +
               (C113 * C255 + C32514 * C274) * C105 +
               (C113 * C244 + C32514 * C256) * C117 +
               (C113 * C257 + C32514 * C275) * C104 +
               (C113 * C245 + C32514 * C258) * C116 +
               (C113 * C259 + C32514 * C276) * C103 +
               (C113 * C246 + C32514 * C260) * C115 +
               (C113 * C261 + C32514 * C277) * C102 +
               (C113 * C247 + C32514 * C262) * C114) *
                  C32532 * C32491 * C240 +
              ((C113 * C248 + C32514 * C263) * C114 +
               (C113 * C264 + C32514 * C278) * C102 +
               (C113 * C249 + C32514 * C265) * C115 +
               (C113 * C266 + C32514 * C279) * C103 +
               (C113 * C250 + C32514 * C267) * C116 +
               (C113 * C268 + C32514 * C280) * C104 +
               (C113 * C251 + C32514 * C269) * C117 +
               (C113 * C270 + C32514 * C281) * C105 +
               (C113 * C252 + C32514 * C271) * C118 +
               (C113 * C272 + C32514 * C282) * C106) *
                  C32532 * C32491 * C241) *
             C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C32514 * C126) * C114 +
           (C113 * C127 + C32514 * C140) * C102 + C168 * C115 + C169 * C103 +
           C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 + C174 * C118 +
           C175 * C106) *
              C32532 * C345 -
          ((C113 * C358 + C32514 * C378) * C106 +
           (C113 * C348 + C32514 * C359) * C118 +
           (C113 * C360 + C32514 * C379) * C105 +
           (C113 * C349 + C32514 * C361) * C117 +
           (C113 * C362 + C32514 * C380) * C104 +
           (C113 * C350 + C32514 * C363) * C116 +
           (C113 * C364 + C32514 * C381) * C103 +
           (C113 * C351 + C32514 * C365) * C115 +
           (C113 * C366 + C32514 * C382) * C102 +
           (C113 * C352 + C32514 * C367) * C114) *
              C32532 * C346 +
          ((C113 * C353 + C32514 * C368) * C114 +
           (C113 * C369 + C32514 * C383) * C102 +
           (C113 * C354 + C32514 * C370) * C115 +
           (C113 * C371 + C32514 * C384) * C103 +
           (C113 * C355 + C32514 * C372) * C116 +
           (C113 * C373 + C32514 * C385) * C104 +
           (C113 * C356 + C32514 * C374) * C117 +
           (C113 * C375 + C32514 * C386) * C105 +
           (C113 * C357 + C32514 * C376) * C118 +
           (C113 * C377 + C32514 * C387) * C106) *
              C32532 * C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
            C834 * C248 + C32804 * C263) *
               C835 +
           (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
            C834 * C264 + C32804 * C278) *
               C829 +
           (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
           C895 * C837 + C896 * C32793) *
              C32532 * C32491 * C32477 * C110 -
          ((C887 + C888 + C889) * C32793 + (C890 + C891 + C892) * C837 +
           (C886 + C885 + C884) * C830 + (C883 + C882 + C881) * C836 +
           (C880 + C879 + C878) * C829 + (C877 + C876 + C875) * C835) *
              C32532 * C32491 * C32477 * C111 +
          (C895 * C835 + C896 * C829 + (C892 + C891 + C890) * C836 +
           (C889 + C888 + C887) * C830 +
           (C832 * C123 + C32839 * C134 + C833 * C243 + C32827 * C254 +
            C834 * C252 + C32804 * C271) *
               C837 +
           (C832 * C135 + C32839 * C144 + C833 * C253 + C32827 * C273 +
            C834 * C272 + C32804 * C282) *
               C32793) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
            C834 * C248 + C32804 * C263) *
               C835 +
           (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
            C834 * C264 + C32804 * C278) *
               C829 +
           (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
           C895 * C837 + C896 * C32793) *
              C32532 * C32491 * C239 -
          ((C834 * C1012 + C32804 * C1024 + C833 * C268 + C32827 * C280 +
            C832 * C257 + C32839 * C275) *
               C32793 +
           (C834 * C1006 + C32804 * C1013 + C833 * C250 + C32827 * C267 +
            C832 * C245 + C32839 * C258) *
               C837 +
           (C834 * C1014 + C32804 * C1025 + C833 * C266 + C32827 * C279 +
            C832 * C259 + C32839 * C276) *
               C830 +
           (C834 * C1007 + C32804 * C1015 + C833 * C249 + C32827 * C265 +
            C832 * C246 + C32839 * C260) *
               C836 +
           (C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
            C832 * C261 + C32839 * C277) *
               C829 +
           (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
            C832 * C247 + C32839 * C262) *
               C835) *
              C32532 * C32491 * C240 +
          ((C832 * C248 + C32839 * C263 + C833 * C1008 + C32827 * C1017 +
            C834 * C1009 + C32804 * C1018) *
               C835 +
           (C832 * C264 + C32839 * C278 + C833 * C1016 + C32827 * C1026 +
            C834 * C1019 + C32804 * C1027) *
               C829 +
           (C832 * C249 + C32839 * C265 + C833 * C1007 + C32827 * C1015 +
            C834 * C1010 + C32804 * C1020) *
               C836 +
           (C832 * C266 + C32839 * C279 + C833 * C1014 + C32827 * C1025 +
            C834 * C1021 + C32804 * C1028) *
               C830 +
           (C832 * C250 + C32839 * C267 + C833 * C1006 + C32827 * C1013 +
            C834 * C1011 + C32804 * C1022) *
               C837 +
           (C832 * C268 + C32839 * C280 + C833 * C1012 + C32827 * C1024 +
            C834 * C1023 + C32804 * C1029) *
               C32793) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
            C834 * C248 + C32804 * C263) *
               C835 +
           (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
            C834 * C264 + C32804 * C278) *
               C829 +
           (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
           C895 * C837 + C896 * C32793) *
              C32532 * C345 -
          ((C834 * C1149 + C32804 * C1167 + C833 * C706 + C32827 * C713 +
            C832 * C362 + C32839 * C380) *
               C32793 +
           (C834 * C1140 + C32804 * C1150 + C833 * C698 + C32827 * C705 +
            C832 * C350 + C32839 * C363) *
               C837 +
           (C834 * C1151 + C32804 * C1168 + C833 * C704 + C32827 * C712 +
            C832 * C364 + C32839 * C381) *
               C830 +
           (C834 * C1141 + C32804 * C1152 + C833 * C697 + C32827 * C703 +
            C832 * C351 + C32839 * C365) *
               C836 +
           (C834 * C1153 + C32804 * C1169 + C833 * C702 + C32827 * C711 +
            C832 * C366 + C32839 * C382) *
               C829 +
           (C834 * C1142 + C32804 * C1154 + C833 * C696 + C32827 * C701 +
            C832 * C352 + C32839 * C367) *
               C835) *
              C32532 * C346 +
          ((C832 * C353 + C32839 * C368 + C833 * C1143 + C32827 * C1155 +
            C834 * C1144 + C32804 * C1156) *
               C835 +
           (C832 * C369 + C32839 * C383 + C833 * C1157 + C32827 * C1170 +
            C834 * C1158 + C32804 * C1171) *
               C829 +
           (C832 * C354 + C32839 * C370 + C833 * C1145 + C32827 * C1159 +
            C834 * C1146 + C32804 * C1160) *
               C836 +
           (C832 * C371 + C32839 * C384 + C833 * C1161 + C32827 * C1172 +
            C834 * C1162 + C32804 * C1173) *
               C830 +
           (C832 * C355 + C32839 * C372 + C833 * C1147 + C32827 * C1163 +
            C834 * C1148 + C32804 * C1164) *
               C837 +
           (C832 * C373 + C32839 * C385 + C833 * C1165 + C32827 * C1174 +
            C834 * C1166 + C32804 * C1175) *
               C32793) *
              C32532 * C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C835 +
            (C113 * C127 + C32514 * C140) * C829 + C168 * C836 + C169 * C830 +
            C170 * C837 + C171 * C32793) *
               C32840 +
           ((C113 * C352 + C32514 * C367) * C835 +
            (C113 * C366 + C32514 * C382) * C829 + C614 * C836 + C613 * C830 +
            C612 * C837 + C611 * C32793) *
               C32829 +
           ((C113 * C353 + C32514 * C368) * C835 +
            (C113 * C369 + C32514 * C383) * C829 + C1832 * C836 + C1833 * C830 +
            C1834 * C837 + C1835 * C32793) *
               C32807) *
              C32491 * C32477 * C110 -
          ((C1836 * C32793 + C1837 * C837 + C1835 * C830 + C1834 * C836 +
            C1833 * C829 + C1832 * C835) *
               C32807 +
           (C609 * C32793 + C610 * C837 + C611 * C830 + C612 * C836 +
            C613 * C829 + C614 * C835) *
               C32829 +
           (C173 * C32793 + C172 * C837 + C171 * C830 + C170 * C836 +
            C169 * C829 + C168 * C835) *
               C32840) *
              C32491 * C32477 * C111 +
          ((C170 * C835 + C171 * C829 + C172 * C836 + C173 * C830 +
            C174 * C837 + C175 * C32793) *
               C32840 +
           (C612 * C835 + C611 * C829 + C610 * C836 + C609 * C830 +
            C608 * C837 + C607 * C32793) *
               C32829 +
           (C1834 * C835 + C1835 * C829 + C1837 * C836 + C1836 * C830 +
            (C113 * C357 + C32514 * C376) * C837 +
            (C113 * C377 + C32514 * C387) * C32793) *
               C32807) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C835 +
            (C113 * C127 + C32514 * C140) * C829 + C168 * C836 + C169 * C830 +
            C170 * C837 + C171 * C32793) *
               C32840 +
           ((C113 * C352 + C32514 * C367) * C835 +
            (C113 * C366 + C32514 * C382) * C829 + C614 * C836 + C613 * C830 +
            C612 * C837 + C611 * C32793) *
               C32829 +
           ((C113 * C353 + C32514 * C368) * C835 +
            (C113 * C369 + C32514 * C383) * C829 + C1832 * C836 + C1833 * C830 +
            C1834 * C837 + C1835 * C32793) *
               C32807) *
              C32491 * C239 -
          (((C113 * C1165 + C32514 * C1174) * C32793 +
            (C113 * C1147 + C32514 * C1163) * C837 +
            (C113 * C1161 + C32514 * C1172) * C830 +
            (C113 * C1145 + C32514 * C1159) * C836 +
            (C113 * C1157 + C32514 * C1170) * C829 +
            (C113 * C1143 + C32514 * C1155) * C835) *
               C32807 +
           ((C113 * C706 + C32514 * C713) * C32793 +
            (C113 * C698 + C32514 * C705) * C837 +
            (C113 * C704 + C32514 * C712) * C830 +
            (C113 * C697 + C32514 * C703) * C836 +
            (C113 * C702 + C32514 * C711) * C829 +
            (C113 * C696 + C32514 * C701) * C835) *
               C32829 +
           (C499 * C32793 + C500 * C837 + C501 * C830 + C502 * C836 +
            (C113 * C261 + C32514 * C277) * C829 +
            (C113 * C247 + C32514 * C262) * C835) *
               C32840) *
              C32491 * C240 +
          (((C113 * C248 + C32514 * C263) * C835 +
            (C113 * C264 + C32514 * C278) * C829 +
            (C113 * C249 + C32514 * C265) * C836 +
            (C113 * C266 + C32514 * C279) * C830 +
            (C113 * C250 + C32514 * C267) * C837 +
            (C113 * C268 + C32514 * C280) * C32793) *
               C32840 +
           ((C113 * C1142 + C32514 * C1154) * C835 +
            (C113 * C1153 + C32514 * C1169) * C829 +
            (C113 * C1141 + C32514 * C1152) * C836 +
            (C113 * C1151 + C32514 * C1168) * C830 +
            (C113 * C1140 + C32514 * C1150) * C837 +
            (C113 * C1149 + C32514 * C1167) * C32793) *
               C32829 +
           ((C113 * C1144 + C32514 * C1156) * C835 +
            (C113 * C1158 + C32514 * C1171) * C829 +
            (C113 * C1146 + C32514 * C1160) * C836 +
            (C113 * C1162 + C32514 * C1173) * C830 +
            (C113 * C1148 + C32514 * C1164) * C837 +
            (C113 * C1166 + C32514 * C1175) * C32793) *
               C32807) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C835 +
            (C113 * C127 + C32514 * C140) * C829 + C168 * C836 + C169 * C830 +
            C170 * C837 + C171 * C32793) *
               C32840 +
           (C2120 + C2121 + C2086 + C2087 + C2088 + C2089) * C32829 +
           C2134 * C32807) *
              C345 -
          ((C2124 + C2125 + C2126 + C2127 + C2128 + C2129) * C32807 +
           (C2097 + C2096 + C2095 + C2094 + C2123 + C2122) * C32829 +
           (C2089 + C2088 + C2087 + C2086 + C2121 + C2120) * C32840) *
              C346 +
          (C2134 * C32840 +
           (C2129 + C2128 + C2127 + C2126 + C2125 + C2124) * C32829 +
           ((C113 * C2060 + C32514 * C2069) * C835 +
            (C113 * C2070 + C32514 * C2078) * C829 +
            (C113 * C2061 + C32514 * C2071) * C836 +
            (C113 * C2072 + C32514 * C2079) * C830 +
            (C113 * C2062 + C32514 * C2073) * C837 +
            (C113 * C2074 + C32514 * C2080) * C32793) *
               C32807) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
            C5426 * C248 + C32804 * C263) *
               C5427 +
           (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
            C5426 * C264 + C32804 * C278) *
               C32836 +
           (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
           C5487 * C5429 + C5488 * C32793) *
              C32532 * C32491 * C32477 * C110 -
          ((C5479 + C5480 + C5481) * C32793 + (C5482 + C5483 + C5484) * C5429 +
           (C5478 + C5477 + C5476) * C32823 + (C5475 + C5474 + C5473) * C5428 +
           (C5472 + C5471 + C5470) * C32836 + (C5469 + C5468 + C5467) * C5427) *
              C32532 * C32491 * C32477 * C111 +
          (C5487 * C5427 + C5488 * C32836 + (C5484 + C5483 + C5482) * C5428 +
           (C5481 + C5480 + C5479) * C32823 +
           (C5424 * C123 + C5418 * C134 + C5425 * C243 + C5419 * C254 +
            C5426 * C252 + C32804 * C271) *
               C5429 +
           (C5424 * C135 + C5418 * C144 + C5425 * C253 + C5419 * C273 +
            C5426 * C272 + C32804 * C282) *
               C32793) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
            C5426 * C248 + C32804 * C263) *
               C5427 +
           (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
            C5426 * C264 + C32804 * C278) *
               C32836 +
           (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
           C5487 * C5429 + C5488 * C32793) *
              C32532 * C32491 * C239 -
          ((C5426 * C1012 + C32804 * C1024 + C5425 * C268 + C5419 * C280 +
            C5424 * C257 + C5418 * C275) *
               C32793 +
           (C5426 * C1006 + C32804 * C1013 + C5425 * C250 + C5419 * C267 +
            C5424 * C245 + C5418 * C258) *
               C5429 +
           (C5426 * C1014 + C32804 * C1025 + C5425 * C266 + C5419 * C279 +
            C5424 * C259 + C5418 * C276) *
               C32823 +
           (C5426 * C1007 + C32804 * C1015 + C5425 * C249 + C5419 * C265 +
            C5424 * C246 + C5418 * C260) *
               C5428 +
           (C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
            C5424 * C261 + C5418 * C277) *
               C32836 +
           (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
            C5424 * C247 + C5418 * C262) *
               C5427) *
              C32532 * C32491 * C240 +
          ((C5424 * C248 + C5418 * C263 + C5425 * C1008 + C5419 * C1017 +
            C5426 * C1009 + C32804 * C1018) *
               C5427 +
           (C5424 * C264 + C5418 * C278 + C5425 * C1016 + C5419 * C1026 +
            C5426 * C1019 + C32804 * C1027) *
               C32836 +
           (C5424 * C249 + C5418 * C265 + C5425 * C1007 + C5419 * C1015 +
            C5426 * C1010 + C32804 * C1020) *
               C5428 +
           (C5424 * C266 + C5418 * C279 + C5425 * C1014 + C5419 * C1025 +
            C5426 * C1021 + C32804 * C1028) *
               C32823 +
           (C5424 * C250 + C5418 * C267 + C5425 * C1006 + C5419 * C1013 +
            C5426 * C1011 + C32804 * C1022) *
               C5429 +
           (C5424 * C268 + C5418 * C280 + C5425 * C1012 + C5419 * C1024 +
            C5426 * C1023 + C32804 * C1029) *
               C32793) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
            C5426 * C248 + C32804 * C263) *
               C5427 +
           (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
            C5426 * C264 + C32804 * C278) *
               C32836 +
           (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
           C5487 * C5429 + C5488 * C32793) *
              C32532 * C345 -
          ((C5426 * C1149 + C32804 * C1167 + C5425 * C706 + C5419 * C713 +
            C5424 * C362 + C5418 * C380) *
               C32793 +
           (C5426 * C1140 + C32804 * C1150 + C5425 * C698 + C5419 * C705 +
            C5424 * C350 + C5418 * C363) *
               C5429 +
           (C5426 * C1151 + C32804 * C1168 + C5425 * C704 + C5419 * C712 +
            C5424 * C364 + C5418 * C381) *
               C32823 +
           (C5426 * C1141 + C32804 * C1152 + C5425 * C697 + C5419 * C703 +
            C5424 * C351 + C5418 * C365) *
               C5428 +
           (C5426 * C1153 + C32804 * C1169 + C5425 * C702 + C5419 * C711 +
            C5424 * C366 + C5418 * C382) *
               C32836 +
           (C5426 * C1142 + C32804 * C1154 + C5425 * C696 + C5419 * C701 +
            C5424 * C352 + C5418 * C367) *
               C5427) *
              C32532 * C346 +
          ((C5424 * C353 + C5418 * C368 + C5425 * C1143 + C5419 * C1155 +
            C5426 * C1144 + C32804 * C1156) *
               C5427 +
           (C5424 * C369 + C5418 * C383 + C5425 * C1157 + C5419 * C1170 +
            C5426 * C1158 + C32804 * C1171) *
               C32836 +
           (C5424 * C354 + C5418 * C370 + C5425 * C1145 + C5419 * C1159 +
            C5426 * C1146 + C32804 * C1160) *
               C5428 +
           (C5424 * C371 + C5418 * C384 + C5425 * C1161 + C5419 * C1172 +
            C5426 * C1162 + C32804 * C1173) *
               C32823 +
           (C5424 * C355 + C5418 * C372 + C5425 * C1147 + C5419 * C1163 +
            C5426 * C1148 + C32804 * C1164) *
               C5429 +
           (C5424 * C373 + C5418 * C385 + C5425 * C1165 + C5419 * C1174 +
            C5426 * C1166 + C32804 * C1175) *
               C32793) *
              C32532 * C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
            C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
            C6290 * C1009 + C6284 * C1018) *
               C6291 +
           (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
            C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
            C6290 * C1019 + C6284 * C1027) *
               C32430) *
              C32532 * C32491 * C32477 * C110 -
          ((C6290 * C1021 + C6284 * C1028 + C6289 * C1014 + C6283 * C1025 +
            C6288 * C266 + C6282 * C279 + C6287 * C259 + C6281 * C276 +
            C6286 * C129 + C6280 * C141) *
               C32430 +
           (C6290 * C1010 + C6284 * C1020 + C6289 * C1007 + C6283 * C1015 +
            C6288 * C249 + C6282 * C265 + C6287 * C246 + C6281 * C260 +
            C6286 * C120 + C6280 * C128) *
               C6291) *
              C32532 * C32491 * C32477 * C111 +
          ((C6286 * C121 + C6280 * C130 + C6287 * C245 + C6281 * C258 +
            C6288 * C250 + C6282 * C267 + C6289 * C1006 + C6283 * C1013 +
            C6290 * C1011 + C6284 * C1022) *
               C6291 +
           (C6286 * C131 + C6280 * C142 + C6287 * C257 + C6281 * C275 +
            C6288 * C268 + C6282 * C280 + C6289 * C1012 + C6283 * C1024 +
            C6290 * C1023 + C6284 * C1029) *
               C32430) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
            C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
            C6290 * C1009 + C6284 * C1018) *
               C6291 +
           (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
            C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
            C6290 * C1019 + C6284 * C1027) *
               C32430) *
              C32532 * C32491 * C239 -
          ((C6290 * C6356 + C6284 * C6360 + C6289 * C1019 + C6283 * C1027 +
            C6288 * C1016 + C6282 * C1026 + C6287 * C264 + C6281 * C278 +
            C6286 * C261 + C6280 * C277) *
               C32430 +
           (C6290 * C6354 + C6284 * C6357 + C6289 * C1009 + C6283 * C1018 +
            C6288 * C1008 + C6282 * C1017 + C6287 * C248 + C6281 * C263 +
            C6286 * C247 + C6280 * C262) *
               C6291) *
              C32532 * C32491 * C240 +
          ((C6286 * C248 + C6280 * C263 + C6287 * C1008 + C6281 * C1017 +
            C6288 * C1009 + C6282 * C1018 + C6289 * C6354 + C6283 * C6357 +
            C6290 * C6355 + C6284 * C6358) *
               C6291 +
           (C6286 * C264 + C6280 * C278 + C6287 * C1016 + C6281 * C1026 +
            C6288 * C1019 + C6282 * C1027 + C6289 * C6356 + C6283 * C6360 +
            C6290 * C6359 + C6284 * C6361) *
               C32430) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
            C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
            C6290 * C1009 + C6284 * C1018) *
               C6291 +
           (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
            C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
            C6290 * C1019 + C6284 * C1027) *
               C32430) *
              C32532 * C345 -
          ((C6290 * C6427 + C6284 * C6433 + C6289 * C1698 + C6283 * C1703 +
            C6288 * C1153 + C6282 * C1169 + C6287 * C702 + C6281 * C711 +
            C6286 * C366 + C6280 * C382) *
               C32430 +
           (C6290 * C6424 + C6284 * C6428 + C6289 * C1694 + C6283 * C1697 +
            C6288 * C1142 + C6282 * C1154 + C6287 * C696 + C6281 * C701 +
            C6286 * C352 + C6280 * C367) *
               C6291) *
              C32532 * C346 +
          ((C6286 * C353 + C6280 * C368 + C6287 * C1143 + C6281 * C1155 +
            C6288 * C1144 + C6282 * C1156 + C6289 * C6425 + C6283 * C6429 +
            C6290 * C6426 + C6284 * C6430) *
               C6291 +
           (C6286 * C369 + C6280 * C383 + C6287 * C1157 + C6281 * C1170 +
            C6288 * C1158 + C6282 * C1171 + C6289 * C6431 + C6283 * C6434 +
            C6290 * C6432 + C6284 * C6435) *
               C32430) *
              C32532 * C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C6291 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32430) *
               C32840 +
           ((C5424 * C352 + C5418 * C367 + C5425 * C696 + C5419 * C701 +
             C5426 * C1142 + C32804 * C1154) *
                C6291 +
            (C5424 * C366 + C5418 * C382 + C5425 * C702 + C5419 * C711 +
             C5426 * C1153 + C32804 * C1169) *
                C32430) *
               C32829 +
           ((C5424 * C353 + C5418 * C368 + C5425 * C1143 + C5419 * C1155 +
             C5426 * C1144 + C32804 * C1156) *
                C6291 +
            (C5424 * C369 + C5418 * C383 + C5425 * C1157 + C5419 * C1170 +
             C5426 * C1158 + C32804 * C1171) *
                C32430) *
               C32807) *
              C32491 * C32477 * C110 -
          (((C5426 * C1162 + C32804 * C1173 + C5425 * C1161 + C5419 * C1172 +
             C5424 * C371 + C5418 * C384) *
                C32430 +
            (C5426 * C1146 + C32804 * C1160 + C5425 * C1145 + C5419 * C1159 +
             C5424 * C354 + C5418 * C370) *
                C6291) *
               C32807 +
           ((C6067 + C6068 + C6069) * C32430 +
            (C6070 + C6071 + C6072) * C6291) *
               C32829 +
           ((C5472 + C5471 + C5470) * C32430 +
            (C5469 + C5468 + C5467) * C6291) *
               C32840) *
              C32491 * C32477 * C111 +
          ((C5487 * C6291 + C5488 * C32430) * C32840 +
           ((C6066 + C6065 + C6064) * C6291 +
            (C6063 + C6062 + C6061) * C32430) *
               C32829 +
           ((C5424 * C355 + C5418 * C372 + C5425 * C1147 + C5419 * C1163 +
             C5426 * C1148 + C32804 * C1164) *
                C6291 +
            (C5424 * C373 + C5418 * C385 + C5425 * C1165 + C5419 * C1174 +
             C5426 * C1166 + C32804 * C1175) *
                C32430) *
               C32807) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C6291 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32430) *
               C32840 +
           ((C5424 * C352 + C5418 * C367 + C5425 * C696 + C5419 * C701 +
             C5426 * C1142 + C32804 * C1154) *
                C6291 +
            (C5424 * C366 + C5418 * C382 + C5425 * C702 + C5419 * C711 +
             C5426 * C1153 + C32804 * C1169) *
                C32430) *
               C32829 +
           ((C5424 * C353 + C5418 * C368 + C5425 * C1143 + C5419 * C1155 +
             C5426 * C1144 + C32804 * C1156) *
                C6291 +
            (C5424 * C369 + C5418 * C383 + C5425 * C1157 + C5419 * C1170 +
             C5426 * C1158 + C32804 * C1171) *
                C32430) *
               C32807) *
              C32491 * C239 -
          (((C5426 * C6431 + C32804 * C6434 + C5425 * C1158 + C5419 * C1171 +
             C5424 * C1157 + C5418 * C1170) *
                C32430 +
            (C5426 * C6425 + C32804 * C6429 + C5425 * C1144 + C5419 * C1156 +
             C5424 * C1143 + C5418 * C1155) *
                C6291) *
               C32807 +
           ((C5426 * C1698 + C32804 * C1703 + C5425 * C1153 + C5419 * C1169 +
             C5424 * C702 + C5418 * C711) *
                C32430 +
            (C5426 * C1694 + C32804 * C1697 + C5425 * C1142 + C5419 * C1154 +
             C5424 * C696 + C5418 * C701) *
                C6291) *
               C32829 +
           ((C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
             C5424 * C261 + C5418 * C277) *
                C32430 +
            (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
             C5424 * C247 + C5418 * C262) *
                C6291) *
               C32840) *
              C32491 * C240 +
          (((C5424 * C248 + C5418 * C263 + C5425 * C1008 + C5419 * C1017 +
             C5426 * C1009 + C32804 * C1018) *
                C6291 +
            (C5424 * C264 + C5418 * C278 + C5425 * C1016 + C5419 * C1026 +
             C5426 * C1019 + C32804 * C1027) *
                C32430) *
               C32840 +
           ((C5424 * C1142 + C5418 * C1154 + C5425 * C1694 + C5419 * C1697 +
             C5426 * C6424 + C32804 * C6428) *
                C6291 +
            (C5424 * C1153 + C5418 * C1169 + C5425 * C1698 + C5419 * C1703 +
             C5426 * C6427 + C32804 * C6433) *
                C32430) *
               C32829 +
           ((C5424 * C1144 + C5418 * C1156 + C5425 * C6425 + C5419 * C6429 +
             C5426 * C6426 + C32804 * C6430) *
                C6291 +
            (C5424 * C1158 + C5418 * C1171 + C5425 * C6431 + C5419 * C6434 +
             C5426 * C6432 + C32804 * C6435) *
                C32430) *
               C32807) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C6291 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32430) *
               C32840 +
           ((C7073 + C7074 + C7075) * C6291 +
            (C7076 + C7077 + C7078) * C32430) *
               C32829 +
           C7097 * C32807) *
              C345 -
          (((C7085 + C7086 + C7087) * C32430 +
            (C7088 + C7089 + C7090) * C6291) *
               C32807 +
           ((C7084 + C7083 + C7082) * C32430 +
            (C7081 + C7080 + C7079) * C6291) *
               C32829 +
           ((C7078 + C7077 + C7076) * C32430 +
            (C7075 + C7074 + C7073) * C6291) *
               C32840) *
              C346 +
          (C7097 * C32840 +
           ((C7090 + C7089 + C7088) * C6291 +
            (C7087 + C7086 + C7085) * C32430) *
               C32829 +
           ((C5424 * C2060 + C5418 * C2069 + C5425 * C7025 + C5419 * C7029 +
             C5426 * C7026 + C32804 * C7030) *
                C6291 +
            (C5424 * C2070 + C5418 * C2078 + C5425 * C7031 + C5419 * C7034 +
             C5426 * C7032 + C32804 * C7035) *
                C32430) *
               C32807) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C835 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C829 +
            (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
            C895 * C837 + C896 * C32793) *
               C32532 * C584 -
           ((C1537 + C1538 + C1539) * C32793 + (C1540 + C1541 + C1542) * C837 +
            (C1543 + C1544 + C1545) * C830 + (C1546 + C1547 + C1548) * C836 +
            (C834 * C1153 + C32804 * C1169 + C833 * C702 + C32827 * C711 +
             C832 * C366 + C32839 * C382) *
                C829 +
            (C834 * C1142 + C32804 * C1154 + C833 * C696 + C32827 * C701 +
             C832 * C352 + C32839 * C367) *
                C835) *
               C32532 * C585) *
              C32477 * C472 +
          (((C1548 + C1547 + C1546) * C835 + (C1545 + C1544 + C1543) * C829 +
            (C1542 + C1541 + C1540) * C836 + (C1539 + C1538 + C1537) * C830 +
            (C832 * C349 + C32839 * C361 + C833 * C699 + C32827 * C707 +
             C834 * C1508 + C32804 * C1509) *
                C837 +
            (C832 * C360 + C32839 * C379 + C833 * C708 + C32827 * C714 +
             C834 * C1510 + C32804 * C1511) *
                C32793) *
               C32532 * C585 -
           ((C887 + C888 + C889) * C32793 + (C890 + C891 + C892) * C837 +
            (C886 + C885 + C884) * C830 + (C883 + C882 + C881) * C836 +
            (C880 + C879 + C878) * C829 + (C877 + C876 + C875) * C835) *
               C32532 * C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C114 +
            (C113 * C127 + C32514 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C32532 * C584 -
           (C607 * C106 + C608 * C118 + C609 * C105 + C610 * C117 +
            C611 * C104 + C612 * C116 + C613 * C103 + C614 * C115 +
            (C113 * C366 + C32514 * C382) * C102 +
            (C113 * C352 + C32514 * C367) * C114) *
               C32532 * C585) *
              C32477 * C472 +
          ((C614 * C114 + C613 * C102 + C612 * C115 + C611 * C103 +
            C610 * C116 + C609 * C104 + C608 * C117 + C607 * C105 +
            (C113 * C586 + C32514 * C587) * C118 +
            (C113 * C588 + C32514 * C589) * C106) *
               C32532 * C585 -
           (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
            C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
            C169 * C102 + C168 * C114) *
               C32532 * C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C835 +
             (C113 * C127 + C32514 * C140) * C829 + C168 * C836 + C169 * C830 +
             C170 * C837 + C171 * C32793) *
                C32840 +
            (C2120 + C2121 + C2086 + C2087 + C2088 + C2089) * C32829 +
            C2134 * C32807) *
               C584 -
           ((C2124 + C2125 + C2126 + C2127 + C2128 + C2129) * C32807 +
            (C2097 + C2096 + C2095 + C2094 + C2123 + C2122) * C32829 +
            (C2089 + C2088 + C2087 + C2086 + C2121 + C2120) * C32840) *
               C585) *
              C32477 * C472 +
          (((C2459 + C2460 + C2461 + C2462 + C2463 + C2464) * C32840 +
            (C2465 + C2466 + C2467 + C2468 + C2469 + C2470) * C32829 +
            (C2117 * C835 + C2116 * C829 + C2115 * C836 + C2114 * C830 +
             (C113 * C2454 + C32514 * C2455) * C837 +
             (C113 * C2456 + C32514 * C2457) * C32793) *
                C32807) *
               C585 -
           ((C2470 + C2469 + C2468 + C2467 + C2466 + C2465) * C32807 +
            (C2464 + C2463 + C2462 + C2461 + C2460 + C2459) * C32829 +
            (C173 * C32793 + C172 * C837 + C171 * C830 + C170 * C836 +
             C169 * C829 + C168 * C835) *
                C32840) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C5427 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32836 +
            (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
            C5487 * C5429 + C5488 * C32793) *
               C32532 * C584 -
           ((C6061 + C6062 + C6063) * C32793 + (C6064 + C6065 + C6066) * C5429 +
            (C6067 + C6068 + C6069) * C32823 + (C6070 + C6071 + C6072) * C5428 +
            (C5426 * C1153 + C32804 * C1169 + C5425 * C702 + C5419 * C711 +
             C5424 * C366 + C5418 * C382) *
                C32836 +
            (C5426 * C1142 + C32804 * C1154 + C5425 * C696 + C5419 * C701 +
             C5424 * C352 + C5418 * C367) *
                C5427) *
               C32532 * C585) *
              C32477 * C472 +
          (((C6072 + C6071 + C6070) * C5427 + (C6069 + C6068 + C6067) * C32836 +
            (C6066 + C6065 + C6064) * C5428 + (C6063 + C6062 + C6061) * C32823 +
            (C5424 * C349 + C5418 * C361 + C5425 * C699 + C5419 * C707 +
             C5426 * C1508 + C32804 * C1509) *
                C5429 +
            (C5424 * C360 + C5418 * C379 + C5425 * C708 + C5419 * C714 +
             C5426 * C1510 + C32804 * C1511) *
                C32793) *
               C32532 * C585 -
           ((C5479 + C5480 + C5481) * C32793 + (C5482 + C5483 + C5484) * C5429 +
            (C5478 + C5477 + C5476) * C32823 + (C5475 + C5474 + C5473) * C5428 +
            (C5472 + C5471 + C5470) * C32836 +
            (C5469 + C5468 + C5467) * C5427) *
               C32532 * C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
             C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
             C6290 * C1009 + C6284 * C1018) *
                C6291 +
            (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
             C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
             C6290 * C1019 + C6284 * C1027) *
                C32430) *
               C32532 * C584 -
           ((C6290 * C6427 + C6284 * C6433 + C6289 * C1698 + C6283 * C1703 +
             C6288 * C1153 + C6282 * C1169 + C6287 * C702 + C6281 * C711 +
             C6286 * C366 + C6280 * C382) *
                C32430 +
            (C6290 * C6424 + C6284 * C6428 + C6289 * C1694 + C6283 * C1697 +
             C6288 * C1142 + C6282 * C1154 + C6287 * C696 + C6281 * C701 +
             C6286 * C352 + C6280 * C367) *
                C6291) *
               C32532 * C585) *
              C32477 * C472 +
          (((C6286 * C351 + C6280 * C365 + C6287 * C697 + C6281 * C703 +
             C6288 * C1141 + C6282 * C1152 + C6289 * C1695 + C6283 * C1699 +
             C6290 * C6604 + C6284 * C6605) *
                C6291 +
            (C6286 * C364 + C6280 * C381 + C6287 * C704 + C6281 * C712 +
             C6288 * C1151 + C6282 * C1168 + C6289 * C1700 + C6283 * C1704 +
             C6290 * C6606 + C6284 * C6607) *
                C32430) *
               C32532 * C585 -
           ((C6290 * C1021 + C6284 * C1028 + C6289 * C1014 + C6283 * C1025 +
             C6288 * C266 + C6282 * C279 + C6287 * C259 + C6281 * C276 +
             C6286 * C129 + C6280 * C141) *
                C32430 +
            (C6290 * C1010 + C6284 * C1020 + C6289 * C1007 + C6283 * C1015 +
             C6288 * C249 + C6282 * C265 + C6287 * C246 + C6281 * C260 +
             C6286 * C120 + C6280 * C128) *
                C6291) *
               C32532 * C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
              C5426 * C248 + C32804 * C263) *
                 C6291 +
             (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
              C5426 * C264 + C32804 * C278) *
                 C32430) *
                C32840 +
            ((C7073 + C7074 + C7075) * C6291 +
             (C7076 + C7077 + C7078) * C32430) *
                C32829 +
            C7097 * C32807) *
               C584 -
           (((C7085 + C7086 + C7087) * C32430 +
             (C7088 + C7089 + C7090) * C6291) *
                C32807 +
            ((C7084 + C7083 + C7082) * C32430 +
             (C7081 + C7080 + C7079) * C6291) *
                C32829 +
            ((C7078 + C7077 + C7076) * C32430 +
             (C7075 + C7074 + C7073) * C6291) *
                C32840) *
               C585) *
              C32477 * C472 +
          ((((C6072 + C6071 + C6070) * C6291 +
             (C6069 + C6068 + C6067) * C32430) *
                C32840 +
            ((C7410 + C7411 + C7412) * C6291 +
             (C7413 + C7414 + C7415) * C32430) *
                C32829 +
            ((C5424 * C2058 + C5418 * C2066 + C5425 * C2617 + C5419 * C2621 +
              C5426 * C7393 + C32804 * C7394) *
                 C6291 +
             (C5424 * C2065 + C5418 * C2076 + C5425 * C2622 + C5419 * C2626 +
              C5426 * C7395 + C32804 * C7396) *
                 C32430) *
                C32807) *
               C585 -
           (((C7415 + C7414 + C7413) * C32430 +
             (C7412 + C7411 + C7410) * C6291) *
                C32807 +
            ((C6067 + C6068 + C6069) * C32430 +
             (C6070 + C6071 + C6072) * C6291) *
                C32829 +
            ((C5472 + C5471 + C5470) * C32430 +
             (C5469 + C5468 + C5467) * C6291) *
                C32840) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C32514 * C126) * C114 +
           (C113 * C127 + C32514 * C140) * C102 + C168 * C115 + C169 * C103 +
           C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 + C174 * C118 +
           C175 * C106) *
              C32532 * C32491 * C239 -
          ((C113 * C253 + C32514 * C273) * C106 +
           (C113 * C243 + C32514 * C254) * C118 +
           (C113 * C255 + C32514 * C274) * C105 +
           (C113 * C244 + C32514 * C256) * C117 +
           (C113 * C257 + C32514 * C275) * C104 +
           (C113 * C245 + C32514 * C258) * C116 +
           (C113 * C259 + C32514 * C276) * C103 +
           (C113 * C246 + C32514 * C260) * C115 +
           (C113 * C261 + C32514 * C277) * C102 +
           (C113 * C247 + C32514 * C262) * C114) *
              C32532 * C32491 * C240 +
          ((C113 * C248 + C32514 * C263) * C114 +
           (C113 * C264 + C32514 * C278) * C102 +
           (C113 * C249 + C32514 * C265) * C115 +
           (C113 * C266 + C32514 * C279) * C103 +
           (C113 * C250 + C32514 * C267) * C116 +
           (C113 * C268 + C32514 * C280) * C104 +
           (C113 * C251 + C32514 * C269) * C117 +
           (C113 * C270 + C32514 * C281) * C105 +
           (C113 * C252 + C32514 * C271) * C118 +
           (C113 * C272 + C32514 * C282) * C106) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C32514 * C126) * C114 +
           (C113 * C127 + C32514 * C140) * C102 + C168 * C115 + C169 * C103 +
           C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 + C174 * C118 +
           C175 * C106) *
              C32532 * C32491 * C32477 * C110 -
          (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 + C173 * C104 +
           C172 * C116 + C171 * C103 + C170 * C115 + C169 * C102 +
           C168 * C114) *
              C32532 * C32491 * C32477 * C111 +
          (C170 * C114 + C171 * C102 + C172 * C115 + C173 * C103 + C174 * C116 +
           C175 * C104 + C177 * C117 + C176 * C105 +
           (C113 * C125 + C32514 * C138) * C118 +
           (C113 * C139 + C32514 * C146) * C106) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
            C834 * C248 + C32804 * C263) *
               C835 +
           (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
            C834 * C264 + C32804 * C278) *
               C829 +
           (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
           C895 * C837 + C896 * C32793) *
              C32532 * C32491 * C32477 * C110 -
          ((C887 + C888 + C889) * C32793 + (C890 + C891 + C892) * C837 +
           (C886 + C885 + C884) * C830 + (C883 + C882 + C881) * C836 +
           (C880 + C879 + C878) * C829 + (C877 + C876 + C875) * C835) *
              C32532 * C32491 * C32477 * C111 +
          (C895 * C835 + C896 * C829 + (C892 + C891 + C890) * C836 +
           (C889 + C888 + C887) * C830 +
           (C832 * C123 + C32839 * C134 + C833 * C243 + C32827 * C254 +
            C834 * C252 + C32804 * C271) *
               C837 +
           (C832 * C135 + C32839 * C144 + C833 * C253 + C32827 * C273 +
            C834 * C272 + C32804 * C282) *
               C32793) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
            C834 * C248 + C32804 * C263) *
               C835 +
           (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
            C834 * C264 + C32804 * C278) *
               C829 +
           (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
           C895 * C837 + C896 * C32793) *
              C32532 * C32491 * C239 -
          ((C834 * C1012 + C32804 * C1024 + C833 * C268 + C32827 * C280 +
            C832 * C257 + C32839 * C275) *
               C32793 +
           (C834 * C1006 + C32804 * C1013 + C833 * C250 + C32827 * C267 +
            C832 * C245 + C32839 * C258) *
               C837 +
           (C834 * C1014 + C32804 * C1025 + C833 * C266 + C32827 * C279 +
            C832 * C259 + C32839 * C276) *
               C830 +
           (C834 * C1007 + C32804 * C1015 + C833 * C249 + C32827 * C265 +
            C832 * C246 + C32839 * C260) *
               C836 +
           (C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
            C832 * C261 + C32839 * C277) *
               C829 +
           (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
            C832 * C247 + C32839 * C262) *
               C835) *
              C32532 * C32491 * C240 +
          ((C832 * C248 + C32839 * C263 + C833 * C1008 + C32827 * C1017 +
            C834 * C1009 + C32804 * C1018) *
               C835 +
           (C832 * C264 + C32839 * C278 + C833 * C1016 + C32827 * C1026 +
            C834 * C1019 + C32804 * C1027) *
               C829 +
           (C832 * C249 + C32839 * C265 + C833 * C1007 + C32827 * C1015 +
            C834 * C1010 + C32804 * C1020) *
               C836 +
           (C832 * C266 + C32839 * C279 + C833 * C1014 + C32827 * C1025 +
            C834 * C1021 + C32804 * C1028) *
               C830 +
           (C832 * C250 + C32839 * C267 + C833 * C1006 + C32827 * C1013 +
            C834 * C1011 + C32804 * C1022) *
               C837 +
           (C832 * C268 + C32839 * C280 + C833 * C1012 + C32827 * C1024 +
            C834 * C1023 + C32804 * C1029) *
               C32793) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C835 +
            (C113 * C127 + C32514 * C140) * C829 + C168 * C836 + C169 * C830 +
            C170 * C837 + C171 * C32793) *
               C32840 +
           ((C113 * C352 + C32514 * C367) * C835 +
            (C113 * C366 + C32514 * C382) * C829 + C614 * C836 + C613 * C830 +
            C612 * C837 + C611 * C32793) *
               C32829 +
           ((C113 * C353 + C32514 * C368) * C835 +
            (C113 * C369 + C32514 * C383) * C829 + C1832 * C836 + C1833 * C830 +
            C1834 * C837 + C1835 * C32793) *
               C32807) *
              C32491 * C32477 * C110 -
          ((C1836 * C32793 + C1837 * C837 + C1835 * C830 + C1834 * C836 +
            C1833 * C829 + C1832 * C835) *
               C32807 +
           (C609 * C32793 + C610 * C837 + C611 * C830 + C612 * C836 +
            C613 * C829 + C614 * C835) *
               C32829 +
           (C173 * C32793 + C172 * C837 + C171 * C830 + C170 * C836 +
            C169 * C829 + C168 * C835) *
               C32840) *
              C32491 * C32477 * C111 +
          ((C170 * C835 + C171 * C829 + C172 * C836 + C173 * C830 +
            C174 * C837 + C175 * C32793) *
               C32840 +
           (C612 * C835 + C611 * C829 + C610 * C836 + C609 * C830 +
            C608 * C837 + C607 * C32793) *
               C32829 +
           (C1834 * C835 + C1835 * C829 + C1837 * C836 + C1836 * C830 +
            (C113 * C357 + C32514 * C376) * C837 +
            (C113 * C377 + C32514 * C387) * C32793) *
               C32807) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C835 +
            (C113 * C127 + C32514 * C140) * C829 + C168 * C836 + C169 * C830 +
            C170 * C837 + C171 * C32793) *
               C32840 +
           ((C113 * C352 + C32514 * C367) * C835 +
            (C113 * C366 + C32514 * C382) * C829 + C614 * C836 + C613 * C830 +
            C612 * C837 + C611 * C32793) *
               C32829 +
           ((C113 * C353 + C32514 * C368) * C835 +
            (C113 * C369 + C32514 * C383) * C829 + C1832 * C836 + C1833 * C830 +
            C1834 * C837 + C1835 * C32793) *
               C32807) *
              C32491 * C239 -
          (((C113 * C1165 + C32514 * C1174) * C32793 +
            (C113 * C1147 + C32514 * C1163) * C837 +
            (C113 * C1161 + C32514 * C1172) * C830 +
            (C113 * C1145 + C32514 * C1159) * C836 +
            (C113 * C1157 + C32514 * C1170) * C829 +
            (C113 * C1143 + C32514 * C1155) * C835) *
               C32807 +
           ((C113 * C706 + C32514 * C713) * C32793 +
            (C113 * C698 + C32514 * C705) * C837 +
            (C113 * C704 + C32514 * C712) * C830 +
            (C113 * C697 + C32514 * C703) * C836 +
            (C113 * C702 + C32514 * C711) * C829 +
            (C113 * C696 + C32514 * C701) * C835) *
               C32829 +
           (C499 * C32793 + C500 * C837 + C501 * C830 + C502 * C836 +
            (C113 * C261 + C32514 * C277) * C829 +
            (C113 * C247 + C32514 * C262) * C835) *
               C32840) *
              C32491 * C240 +
          (((C113 * C248 + C32514 * C263) * C835 +
            (C113 * C264 + C32514 * C278) * C829 +
            (C113 * C249 + C32514 * C265) * C836 +
            (C113 * C266 + C32514 * C279) * C830 +
            (C113 * C250 + C32514 * C267) * C837 +
            (C113 * C268 + C32514 * C280) * C32793) *
               C32840 +
           ((C113 * C1142 + C32514 * C1154) * C835 +
            (C113 * C1153 + C32514 * C1169) * C829 +
            (C113 * C1141 + C32514 * C1152) * C836 +
            (C113 * C1151 + C32514 * C1168) * C830 +
            (C113 * C1140 + C32514 * C1150) * C837 +
            (C113 * C1149 + C32514 * C1167) * C32793) *
               C32829 +
           ((C113 * C1144 + C32514 * C1156) * C835 +
            (C113 * C1158 + C32514 * C1171) * C829 +
            (C113 * C1146 + C32514 * C1160) * C836 +
            (C113 * C1162 + C32514 * C1173) * C830 +
            (C113 * C1148 + C32514 * C1164) * C837 +
            (C113 * C1166 + C32514 * C1175) * C32793) *
               C32807) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
            C5426 * C248 + C32804 * C263) *
               C5427 +
           (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
            C5426 * C264 + C32804 * C278) *
               C32836 +
           (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
           C5487 * C5429 + C5488 * C32793) *
              C32532 * C32491 * C32477 * C110 -
          ((C5479 + C5480 + C5481) * C32793 + (C5482 + C5483 + C5484) * C5429 +
           (C5478 + C5477 + C5476) * C32823 + (C5475 + C5474 + C5473) * C5428 +
           (C5472 + C5471 + C5470) * C32836 + (C5469 + C5468 + C5467) * C5427) *
              C32532 * C32491 * C32477 * C111 +
          (C5487 * C5427 + C5488 * C32836 + (C5484 + C5483 + C5482) * C5428 +
           (C5481 + C5480 + C5479) * C32823 +
           (C5424 * C123 + C5418 * C134 + C5425 * C243 + C5419 * C254 +
            C5426 * C252 + C32804 * C271) *
               C5429 +
           (C5424 * C135 + C5418 * C144 + C5425 * C253 + C5419 * C273 +
            C5426 * C272 + C32804 * C282) *
               C32793) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
            C5426 * C248 + C32804 * C263) *
               C5427 +
           (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
            C5426 * C264 + C32804 * C278) *
               C32836 +
           (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
           C5487 * C5429 + C5488 * C32793) *
              C32532 * C32491 * C239 -
          ((C5426 * C1012 + C32804 * C1024 + C5425 * C268 + C5419 * C280 +
            C5424 * C257 + C5418 * C275) *
               C32793 +
           (C5426 * C1006 + C32804 * C1013 + C5425 * C250 + C5419 * C267 +
            C5424 * C245 + C5418 * C258) *
               C5429 +
           (C5426 * C1014 + C32804 * C1025 + C5425 * C266 + C5419 * C279 +
            C5424 * C259 + C5418 * C276) *
               C32823 +
           (C5426 * C1007 + C32804 * C1015 + C5425 * C249 + C5419 * C265 +
            C5424 * C246 + C5418 * C260) *
               C5428 +
           (C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
            C5424 * C261 + C5418 * C277) *
               C32836 +
           (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
            C5424 * C247 + C5418 * C262) *
               C5427) *
              C32532 * C32491 * C240 +
          ((C5424 * C248 + C5418 * C263 + C5425 * C1008 + C5419 * C1017 +
            C5426 * C1009 + C32804 * C1018) *
               C5427 +
           (C5424 * C264 + C5418 * C278 + C5425 * C1016 + C5419 * C1026 +
            C5426 * C1019 + C32804 * C1027) *
               C32836 +
           (C5424 * C249 + C5418 * C265 + C5425 * C1007 + C5419 * C1015 +
            C5426 * C1010 + C32804 * C1020) *
               C5428 +
           (C5424 * C266 + C5418 * C279 + C5425 * C1014 + C5419 * C1025 +
            C5426 * C1021 + C32804 * C1028) *
               C32823 +
           (C5424 * C250 + C5418 * C267 + C5425 * C1006 + C5419 * C1013 +
            C5426 * C1011 + C32804 * C1022) *
               C5429 +
           (C5424 * C268 + C5418 * C280 + C5425 * C1012 + C5419 * C1024 +
            C5426 * C1023 + C32804 * C1029) *
               C32793) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
            C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
            C6290 * C1009 + C6284 * C1018) *
               C6291 +
           (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
            C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
            C6290 * C1019 + C6284 * C1027) *
               C32430) *
              C32532 * C32491 * C32477 * C110 -
          ((C6290 * C1021 + C6284 * C1028 + C6289 * C1014 + C6283 * C1025 +
            C6288 * C266 + C6282 * C279 + C6287 * C259 + C6281 * C276 +
            C6286 * C129 + C6280 * C141) *
               C32430 +
           (C6290 * C1010 + C6284 * C1020 + C6289 * C1007 + C6283 * C1015 +
            C6288 * C249 + C6282 * C265 + C6287 * C246 + C6281 * C260 +
            C6286 * C120 + C6280 * C128) *
               C6291) *
              C32532 * C32491 * C32477 * C111 +
          ((C6286 * C121 + C6280 * C130 + C6287 * C245 + C6281 * C258 +
            C6288 * C250 + C6282 * C267 + C6289 * C1006 + C6283 * C1013 +
            C6290 * C1011 + C6284 * C1022) *
               C6291 +
           (C6286 * C131 + C6280 * C142 + C6287 * C257 + C6281 * C275 +
            C6288 * C268 + C6282 * C280 + C6289 * C1012 + C6283 * C1024 +
            C6290 * C1023 + C6284 * C1029) *
               C32430) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
            C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
            C6290 * C1009 + C6284 * C1018) *
               C6291 +
           (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
            C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
            C6290 * C1019 + C6284 * C1027) *
               C32430) *
              C32532 * C32491 * C239 -
          ((C6290 * C6356 + C6284 * C6360 + C6289 * C1019 + C6283 * C1027 +
            C6288 * C1016 + C6282 * C1026 + C6287 * C264 + C6281 * C278 +
            C6286 * C261 + C6280 * C277) *
               C32430 +
           (C6290 * C6354 + C6284 * C6357 + C6289 * C1009 + C6283 * C1018 +
            C6288 * C1008 + C6282 * C1017 + C6287 * C248 + C6281 * C263 +
            C6286 * C247 + C6280 * C262) *
               C6291) *
              C32532 * C32491 * C240 +
          ((C6286 * C248 + C6280 * C263 + C6287 * C1008 + C6281 * C1017 +
            C6288 * C1009 + C6282 * C1018 + C6289 * C6354 + C6283 * C6357 +
            C6290 * C6355 + C6284 * C6358) *
               C6291 +
           (C6286 * C264 + C6280 * C278 + C6287 * C1016 + C6281 * C1026 +
            C6288 * C1019 + C6282 * C1027 + C6289 * C6356 + C6283 * C6360 +
            C6290 * C6359 + C6284 * C6361) *
               C32430) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C6291 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32430) *
               C32840 +
           ((C5424 * C352 + C5418 * C367 + C5425 * C696 + C5419 * C701 +
             C5426 * C1142 + C32804 * C1154) *
                C6291 +
            (C5424 * C366 + C5418 * C382 + C5425 * C702 + C5419 * C711 +
             C5426 * C1153 + C32804 * C1169) *
                C32430) *
               C32829 +
           ((C5424 * C353 + C5418 * C368 + C5425 * C1143 + C5419 * C1155 +
             C5426 * C1144 + C32804 * C1156) *
                C6291 +
            (C5424 * C369 + C5418 * C383 + C5425 * C1157 + C5419 * C1170 +
             C5426 * C1158 + C32804 * C1171) *
                C32430) *
               C32807) *
              C32491 * C32477 * C110 -
          (((C5426 * C1162 + C32804 * C1173 + C5425 * C1161 + C5419 * C1172 +
             C5424 * C371 + C5418 * C384) *
                C32430 +
            (C5426 * C1146 + C32804 * C1160 + C5425 * C1145 + C5419 * C1159 +
             C5424 * C354 + C5418 * C370) *
                C6291) *
               C32807 +
           ((C6067 + C6068 + C6069) * C32430 +
            (C6070 + C6071 + C6072) * C6291) *
               C32829 +
           ((C5472 + C5471 + C5470) * C32430 +
            (C5469 + C5468 + C5467) * C6291) *
               C32840) *
              C32491 * C32477 * C111 +
          ((C5487 * C6291 + C5488 * C32430) * C32840 +
           ((C6066 + C6065 + C6064) * C6291 +
            (C6063 + C6062 + C6061) * C32430) *
               C32829 +
           ((C5424 * C355 + C5418 * C372 + C5425 * C1147 + C5419 * C1163 +
             C5426 * C1148 + C32804 * C1164) *
                C6291 +
            (C5424 * C373 + C5418 * C385 + C5425 * C1165 + C5419 * C1174 +
             C5426 * C1166 + C32804 * C1175) *
                C32430) *
               C32807) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C6291 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32430) *
               C32840 +
           ((C5424 * C352 + C5418 * C367 + C5425 * C696 + C5419 * C701 +
             C5426 * C1142 + C32804 * C1154) *
                C6291 +
            (C5424 * C366 + C5418 * C382 + C5425 * C702 + C5419 * C711 +
             C5426 * C1153 + C32804 * C1169) *
                C32430) *
               C32829 +
           ((C5424 * C353 + C5418 * C368 + C5425 * C1143 + C5419 * C1155 +
             C5426 * C1144 + C32804 * C1156) *
                C6291 +
            (C5424 * C369 + C5418 * C383 + C5425 * C1157 + C5419 * C1170 +
             C5426 * C1158 + C32804 * C1171) *
                C32430) *
               C32807) *
              C32491 * C239 -
          (((C5426 * C6431 + C32804 * C6434 + C5425 * C1158 + C5419 * C1171 +
             C5424 * C1157 + C5418 * C1170) *
                C32430 +
            (C5426 * C6425 + C32804 * C6429 + C5425 * C1144 + C5419 * C1156 +
             C5424 * C1143 + C5418 * C1155) *
                C6291) *
               C32807 +
           ((C5426 * C1698 + C32804 * C1703 + C5425 * C1153 + C5419 * C1169 +
             C5424 * C702 + C5418 * C711) *
                C32430 +
            (C5426 * C1694 + C32804 * C1697 + C5425 * C1142 + C5419 * C1154 +
             C5424 * C696 + C5418 * C701) *
                C6291) *
               C32829 +
           ((C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
             C5424 * C261 + C5418 * C277) *
                C32430 +
            (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
             C5424 * C247 + C5418 * C262) *
                C6291) *
               C32840) *
              C32491 * C240 +
          (((C5424 * C248 + C5418 * C263 + C5425 * C1008 + C5419 * C1017 +
             C5426 * C1009 + C32804 * C1018) *
                C6291 +
            (C5424 * C264 + C5418 * C278 + C5425 * C1016 + C5419 * C1026 +
             C5426 * C1019 + C32804 * C1027) *
                C32430) *
               C32840 +
           ((C5424 * C1142 + C5418 * C1154 + C5425 * C1694 + C5419 * C1697 +
             C5426 * C6424 + C32804 * C6428) *
                C6291 +
            (C5424 * C1153 + C5418 * C1169 + C5425 * C1698 + C5419 * C1703 +
             C5426 * C6427 + C32804 * C6433) *
                C32430) *
               C32829 +
           ((C5424 * C1144 + C5418 * C1156 + C5425 * C6425 + C5419 * C6429 +
             C5426 * C6426 + C32804 * C6430) *
                C6291 +
            (C5424 * C1158 + C5418 * C1171 + C5425 * C6431 + C5419 * C6434 +
             C5426 * C6432 + C32804 * C6435) *
                C32430) *
               C32807) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C2758 +
             (C113 * C127 + C32514 * C140) * C2752 + C168 * C2759 +
             C169 * C2753 + C170 * C2760 + C171 * C2754 + C172 * C2761 +
             C173 * C32808) *
                C32774 +
            (C3769 + C3770 + C3771 + C3772 + C3773 + C3774 + C3775 + C3776) *
                C32619) *
               C32491 * C470 -
           ((C3919 * C32808 + C3920 * C2761 + C2305 * C2754 + C2306 * C2760 +
             C2307 * C2753 + C2308 * C2759 + C2646 * C2752 + C2645 * C2758) *
                C32619 +
            (C497 * C32808 + C498 * C2761 + C499 * C2754 + C500 * C2760 +
             C501 * C2753 + C502 * C2759 +
             (C113 * C261 + C32514 * C277) * C2752 +
             (C113 * C247 + C32514 * C262) * C2758) *
                C32774) *
               C32491 * C471) *
              C472 +
          (((C502 * C2758 + C501 * C2752 + C500 * C2759 + C499 * C2753 +
             C498 * C2760 + C497 * C2754 + C496 * C2761 + C495 * C32808) *
                C32774 +
            (C2308 * C2758 + C2307 * C2752 + C2306 * C2759 + C2305 * C2753 +
             C3920 * C2760 + C3919 * C2754 +
             (C113 * C700 + C32514 * C709) * C2761 +
             (C113 * C710 + C32514 * C715) * C32808) *
                C32619) *
               C32491 * C471 -
           ((C607 * C32808 + C608 * C2761 + C609 * C2754 + C610 * C2760 +
             C611 * C2753 + C612 * C2759 + C613 * C2752 + C614 * C2758) *
                C32619 +
            (C175 * C32808 + C174 * C2761 + C173 * C2754 + C172 * C2760 +
             C171 * C2753 + C170 * C2759 + C169 * C2752 + C168 * C2758) *
                C32774) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
              C5426 * C248 + C32804 * C263) *
                 C31559 +
             (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
              C5426 * C264 + C32804 * C278) *
                 C32754 +
             (C5467 + C5468 + C5469) * C31540 +
             (C5470 + C5471 + C5472) * C32440) *
                C32774 +
            ((C7073 + C7074 + C7075) * C31559 +
             (C7076 + C7077 + C7078) * C32754 +
             (C6072 + C6071 + C6070) * C31540 +
             (C6069 + C6068 + C6067) * C32440) *
                C32619) *
               C32491 * C470 -
           (((C9038 + C9039 + C9040) * C32440 +
             (C9041 + C9042 + C9043) * C31540 +
             (C7595 + C7594 + C7593) * C32754 +
             (C7592 + C7591 + C7590) * C31559) *
                C32619 +
            ((C5885 + C5886 + C5887) * C32440 +
             (C5888 + C5889 + C5890) * C31540 +
             (C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
              C5424 * C261 + C5418 * C277) *
                 C32754 +
             (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
              C5424 * C247 + C5418 * C262) *
                 C31559) *
                C32774) *
               C32491 * C471) *
              C472 +
          ((((C5890 + C5889 + C5888) * C31559 +
             (C5887 + C5886 + C5885) * C32754 +
             (C5884 + C5883 + C5882) * C31540 +
             (C5881 + C5880 + C5879) * C32440) *
                C32774 +
            ((C9043 + C9042 + C9041) * C31559 +
             (C9040 + C9039 + C9038) * C32754 +
             (C5424 * C698 + C5418 * C705 + C5425 * C1140 + C5419 * C1150 +
              C5426 * C1696 + C32804 * C1701) *
                 C31540 +
             (C5424 * C706 + C5418 * C713 + C5425 * C1149 + C5419 * C1167 +
              C5426 * C1702 + C32804 * C1705) *
                 C32440) *
                C32619) *
               C32491 * C471 -
           (((C6061 + C6062 + C6063) * C32440 +
             (C6064 + C6065 + C6066) * C31540 +
             (C6067 + C6068 + C6069) * C32754 +
             (C6070 + C6071 + C6072) * C31559) *
                C32619 +
            ((C5478 + C5477 + C5476) * C32440 +
             (C5475 + C5474 + C5473) * C31540 +
             (C5472 + C5471 + C5470) * C32754 +
             (C5469 + C5468 + C5467) * C31559) *
                C32774) *
               C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C2758 +
             (C113 * C127 + C32514 * C140) * C2752 + C168 * C2759 +
             C169 * C2753 + C170 * C2760 + C171 * C2754 + C172 * C2761 +
             C173 * C32808) *
                C32774 +
            (C3769 + C3770 + C3771 + C3772 + C3773 + C3774 + C3775 + C3776) *
                C32619) *
               C584 -
           ((C3777 + C3778 + C3779 + C3780 + C3781 + C3782 + C3783 + C3784) *
                C32619 +
            (C3776 + C3775 + C3774 + C3773 + C3772 + C3771 + C3770 + C3769) *
                C32774) *
               C585) *
              C470 +
          (((C4189 + C4190 + C4191 + C4192 + C4193 + C4194 + C4195 + C4196) *
                C32774 +
            (C2647 * C2758 + C2648 * C2752 + C2304 * C2759 + C2303 * C2753 +
             C2302 * C2760 + C2301 * C2754 +
             (C113 * C2280 + C32514 * C2281) * C2761 +
             (C113 * C2282 + C32514 * C2283) * C32808) *
                C32619) *
               C585 -
           ((C4196 + C4195 + C4194 + C4193 + C4192 + C4191 + C4190 + C4189) *
                C32619 +
            (C497 * C32808 + C498 * C2761 + C499 * C2754 + C500 * C2760 +
             C501 * C2753 + C502 * C2759 +
             (C113 * C261 + C32514 * C277) * C2752 +
             (C113 * C247 + C32514 * C262) * C2758) *
                C32774) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
              C5426 * C248 + C32804 * C263) *
                 C31559 +
             (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
              C5426 * C264 + C32804 * C278) *
                 C32754 +
             (C5467 + C5468 + C5469) * C31540 +
             (C5470 + C5471 + C5472) * C32440) *
                C32774 +
            ((C7073 + C7074 + C7075) * C31559 +
             (C7076 + C7077 + C7078) * C32754 + C9242 * C31540 +
             C9243 * C32440) *
                C32619) *
               C584 -
           (((C7415 + C7414 + C7413) * C32440 +
             (C7412 + C7411 + C7410) * C31540 +
             (C7084 + C7083 + C7082) * C32754 +
             (C7081 + C7080 + C7079) * C31559) *
                C32619 +
            (C9244 * C32440 + C9245 * C31540 +
             (C7078 + C7077 + C7076) * C32754 +
             (C7075 + C7074 + C7073) * C31559) *
                C32774) *
               C585) *
              C470 +
          ((((C7590 + C7591 + C7592) * C31559 +
             (C7593 + C7594 + C7595) * C32754 +
             (C9043 + C9042 + C9041) * C31540 +
             (C9040 + C9039 + C9038) * C32440) *
                C32774 +
            ((C7596 + C7597 + C7598) * C31559 +
             (C7599 + C7600 + C7601) * C32754 +
             (C5424 * C1145 + C5418 * C1159 + C5425 * C1146 + C5419 * C1160 +
              C5426 * C7243 + C32804 * C7244) *
                 C31540 +
             (C5424 * C1161 + C5418 * C1172 + C5425 * C1162 + C5419 * C1173 +
              C5426 * C7245 + C32804 * C7246) *
                 C32440) *
                C32619) *
               C585 -
           (((C9038 + C9039 + C9040) * C32440 +
             (C9041 + C9042 + C9043) * C31540 +
             (C7595 + C7594 + C7593) * C32754 +
             (C7592 + C7591 + C7590) * C31559) *
                C32619 +
            ((C5885 + C5886 + C5887) * C32440 +
             (C5888 + C5889 + C5890) * C31540 +
             (C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
              C5424 * C261 + C5418 * C277) *
                 C32754 +
             (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
              C5424 * C247 + C5418 * C262) *
                 C31559) *
                C32774) *
               C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C2758 +
            (C113 * C127 + C32514 * C140) * C2752 + C168 * C2759 +
            C169 * C2753 + C170 * C2760 + C171 * C2754 + C172 * C2761 +
            C173 * C32808) *
               C32774 +
           (C2110 * C2758 + C2111 * C2752 + C614 * C2759 + C613 * C2753 +
            C612 * C2760 + C611 * C2754 + C610 * C2761 + C609 * C32808) *
               C32619) *
              C32491 * C239 -
          (((C113 * C708 + C32514 * C714) * C32808 +
            (C113 * C699 + C32514 * C707) * C2761 + C2305 * C2754 +
            C2306 * C2760 + C2307 * C2753 + C2308 * C2759 + C2646 * C2752 +
            C2645 * C2758) *
               C32619 +
           (C497 * C32808 + C498 * C2761 + C499 * C2754 + C500 * C2760 +
            C501 * C2753 + C502 * C2759 +
            (C113 * C261 + C32514 * C277) * C2752 +
            (C113 * C247 + C32514 * C262) * C2758) *
               C32774) *
              C32491 * C240 +
          (((C113 * C248 + C32514 * C263) * C2758 +
            (C113 * C264 + C32514 * C278) * C2752 +
            (C113 * C249 + C32514 * C265) * C2759 +
            (C113 * C266 + C32514 * C279) * C2753 +
            (C113 * C250 + C32514 * C267) * C2760 +
            (C113 * C268 + C32514 * C280) * C2754 +
            (C113 * C251 + C32514 * C269) * C2761 +
            (C113 * C270 + C32514 * C281) * C32808) *
               C32774 +
           ((C113 * C1142 + C32514 * C1154) * C2758 +
            (C113 * C1153 + C32514 * C1169) * C2752 +
            (C113 * C1141 + C32514 * C1152) * C2759 +
            (C113 * C1151 + C32514 * C1168) * C2753 +
            (C113 * C1140 + C32514 * C1150) * C2760 +
            (C113 * C1149 + C32514 * C1167) * C2754 +
            (C113 * C1508 + C32514 * C1509) * C2761 +
            (C113 * C1510 + C32514 * C1511) * C32808) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C2758 +
            (C113 * C127 + C32514 * C140) * C2752 + C168 * C2759 +
            C169 * C2753 + C170 * C2760 + C171 * C2754 + C172 * C2761 +
            C173 * C32808) *
               C32774 +
           (C2110 * C2758 + C2111 * C2752 + C614 * C2759 + C613 * C2753 +
            C612 * C2760 + C611 * C2754 + C610 * C2761 + C609 * C32808) *
               C32619) *
              C32491 * C32477 * C110 -
          ((C607 * C32808 + C608 * C2761 + C609 * C2754 + C610 * C2760 +
            C611 * C2753 + C612 * C2759 + C613 * C2752 + C614 * C2758) *
               C32619 +
           (C175 * C32808 + C174 * C2761 + C173 * C2754 + C172 * C2760 +
            C171 * C2753 + C170 * C2759 + C169 * C2752 + C168 * C2758) *
               C32774) *
              C32491 * C32477 * C111 +
          ((C170 * C2758 + C171 * C2752 + C172 * C2759 + C173 * C2753 +
            C174 * C2760 + C175 * C2754 + C177 * C2761 + C176 * C32808) *
               C32774 +
           (C612 * C2758 + C611 * C2752 + C610 * C2759 + C609 * C2753 +
            C608 * C2760 + C607 * C2754 +
            (C113 * C586 + C32514 * C587) * C2761 +
            (C113 * C588 + C32514 * C589) * C32808) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C2758 +
            (C113 * C127 + C32514 * C140) * C2752 + C168 * C2759 +
            C169 * C2753 + C170 * C2760 + C171 * C2754 + C172 * C2761 +
            C173 * C32808) *
               C32774 +
           (C3769 + C3770 + C3771 + C3772 + C3773 + C3774 + C3775 + C3776) *
               C32619) *
              C345 -
          ((C3777 + C3778 + C3779 + C3780 + C3781 + C3782 + C3783 + C3784) *
               C32619 +
           (C3776 + C3775 + C3774 + C3773 + C3772 + C3771 + C3770 + C3769) *
               C32774) *
              C346 +
          ((C3784 + C3783 + C3782 + C3781 + C3780 + C3779 + C3778 + C3777) *
               C32774 +
           (C2119 * C2758 + C2118 * C2752 + C2117 * C2759 + C2116 * C2753 +
            C2115 * C2760 + C2114 * C2754 +
            (C113 * C2454 + C32514 * C2455) * C2761 +
            (C113 * C2456 + C32514 * C2457) * C32808) *
               C32619) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C31559 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32754 +
            (C5467 + C5468 + C5469) * C31540 +
            (C5470 + C5471 + C5472) * C32440) *
               C32774 +
           ((C7073 + C7074 + C7075) * C31559 +
            (C7076 + C7077 + C7078) * C32754 +
            (C6072 + C6071 + C6070) * C31540 +
            (C6069 + C6068 + C6067) * C32440) *
               C32619) *
              C32491 * C32477 * C110 -
          (((C6061 + C6062 + C6063) * C32440 +
            (C6064 + C6065 + C6066) * C31540 +
            (C6067 + C6068 + C6069) * C32754 +
            (C6070 + C6071 + C6072) * C31559) *
               C32619 +
           ((C5478 + C5477 + C5476) * C32440 +
            (C5475 + C5474 + C5473) * C31540 +
            (C5472 + C5471 + C5470) * C32754 +
            (C5469 + C5468 + C5467) * C31559) *
               C32774) *
              C32491 * C32477 * C111 +
          ((C5487 * C31559 + C5488 * C32754 + (C5484 + C5483 + C5482) * C31540 +
            (C5481 + C5480 + C5479) * C32440) *
               C32774 +
           ((C6066 + C6065 + C6064) * C31559 +
            (C6063 + C6062 + C6061) * C32754 +
            (C5424 * C349 + C5418 * C361 + C5425 * C699 + C5419 * C707 +
             C5426 * C1508 + C32804 * C1509) *
                C31540 +
            (C5424 * C360 + C5418 * C379 + C5425 * C708 + C5419 * C714 +
             C5426 * C1510 + C32804 * C1511) *
                C32440) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C31559 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32754 +
            (C5467 + C5468 + C5469) * C31540 +
            (C5470 + C5471 + C5472) * C32440) *
               C32774 +
           ((C7073 + C7074 + C7075) * C31559 +
            (C7076 + C7077 + C7078) * C32754 +
            (C6072 + C6071 + C6070) * C31540 +
            (C6069 + C6068 + C6067) * C32440) *
               C32619) *
              C32491 * C239 -
          (((C5426 * C1700 + C32804 * C1704 + C5425 * C1151 + C5419 * C1168 +
             C5424 * C704 + C5418 * C712) *
                C32440 +
            (C5426 * C1695 + C32804 * C1699 + C5425 * C1141 + C5419 * C1152 +
             C5424 * C697 + C5418 * C703) *
                C31540 +
            (C7595 + C7594 + C7593) * C32754 +
            (C7592 + C7591 + C7590) * C31559) *
               C32619 +
           ((C5885 + C5886 + C5887) * C32440 +
            (C5888 + C5889 + C5890) * C31540 +
            (C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
             C5424 * C261 + C5418 * C277) *
                C32754 +
            (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
             C5424 * C247 + C5418 * C262) *
                C31559) *
               C32774) *
              C32491 * C240 +
          (((C5424 * C248 + C5418 * C263 + C5425 * C1008 + C5419 * C1017 +
             C5426 * C1009 + C32804 * C1018) *
                C31559 +
            (C5424 * C264 + C5418 * C278 + C5425 * C1016 + C5419 * C1026 +
             C5426 * C1019 + C32804 * C1027) *
                C32754 +
            (C5424 * C249 + C5418 * C265 + C5425 * C1007 + C5419 * C1015 +
             C5426 * C1010 + C32804 * C1020) *
                C31540 +
            (C5424 * C266 + C5418 * C279 + C5425 * C1014 + C5419 * C1025 +
             C5426 * C1021 + C32804 * C1028) *
                C32440) *
               C32774 +
           ((C5424 * C1142 + C5418 * C1154 + C5425 * C1694 + C5419 * C1697 +
             C5426 * C6424 + C32804 * C6428) *
                C31559 +
            (C5424 * C1153 + C5418 * C1169 + C5425 * C1698 + C5419 * C1703 +
             C5426 * C6427 + C32804 * C6433) *
                C32754 +
            (C5424 * C1141 + C5418 * C1152 + C5425 * C1695 + C5419 * C1699 +
             C5426 * C6604 + C32804 * C6605) *
                C31540 +
            (C5424 * C1151 + C5418 * C1168 + C5425 * C1700 + C5419 * C1704 +
             C5426 * C6606 + C32804 * C6607) *
                C32440) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C31559 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32754 +
            (C5467 + C5468 + C5469) * C31540 +
            (C5470 + C5471 + C5472) * C32440) *
               C32774 +
           ((C7073 + C7074 + C7075) * C31559 +
            (C7076 + C7077 + C7078) * C32754 +
            (C6072 + C6071 + C6070) * C31540 +
            (C6069 + C6068 + C6067) * C32440) *
               C32619) *
              C345 -
          (((C7415 + C7414 + C7413) * C32440 +
            (C7412 + C7411 + C7410) * C31540 +
            (C7084 + C7083 + C7082) * C32754 +
            (C7081 + C7080 + C7079) * C31559) *
               C32619 +
           ((C6067 + C6068 + C6069) * C32440 +
            (C6070 + C6071 + C6072) * C31540 +
            (C7078 + C7077 + C7076) * C32754 +
            (C7075 + C7074 + C7073) * C31559) *
               C32774) *
              C346 +
          ((C7093 * C31559 + C7094 * C32754 + (C7410 + C7411 + C7412) * C31540 +
            (C7413 + C7414 + C7415) * C32440) *
               C32774 +
           ((C7090 + C7089 + C7088) * C31559 +
            (C7087 + C7086 + C7085) * C32754 +
            (C5424 * C2058 + C5418 * C2066 + C5425 * C2617 + C5419 * C2621 +
             C5426 * C7393 + C32804 * C7394) *
                C31540 +
            (C5424 * C2065 + C5418 * C2076 + C5425 * C2622 + C5419 * C2626 +
             C5426 * C7395 + C32804 * C7396) *
                C32440) *
               C32619) *
              C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C32514 * C126) * C2758 +
             (C113 * C127 + C32514 * C140) * C2752 + C168 * C2759 +
             C169 * C2753 + C170 * C2760 + C171 * C2754 + C172 * C2761 +
             C173 * C32808) *
                C32774 +
            (C3769 + C3770 + C3771 + C3772 + C3773 + C3774 + C3775 + C3776) *
                C32619) *
               C584 -
           ((C3777 + C3778 + C3779 + C3780 + C3781 + C3782 + C3783 + C3784) *
                C32619 +
            (C3776 + C3775 + C3774 + C3773 + C3772 + C3771 + C3770 + C3769) *
                C32774) *
               C585) *
              C32477 * C472 +
          (((C4051 + C4052 + C4053 + C4054 + C4055 + C4056 + C4057 + C4058) *
                C32774 +
            (C1832 * C2758 + C1833 * C2752 + C1834 * C2759 + C1835 * C2753 +
             C1837 * C2760 + C1836 * C2754 +
             (C113 * C357 + C32514 * C376) * C2761 +
             (C113 * C377 + C32514 * C387) * C32808) *
                C32619) *
               C585 -
           ((C4058 + C4057 + C4056 + C4055 + C4054 + C4053 + C4052 + C4051) *
                C32619 +
            (C175 * C32808 + C174 * C2761 + C173 * C2754 + C172 * C2760 +
             C171 * C2753 + C170 * C2759 + C169 * C2752 + C168 * C2758) *
                C32774) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
              C5426 * C248 + C32804 * C263) *
                 C31559 +
             (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
              C5426 * C264 + C32804 * C278) *
                 C32754 +
             (C5467 + C5468 + C5469) * C31540 +
             (C5470 + C5471 + C5472) * C32440) *
                C32774 +
            ((C7073 + C7074 + C7075) * C31559 +
             (C7076 + C7077 + C7078) * C32754 + C9242 * C31540 +
             C9243 * C32440) *
                C32619) *
               C584 -
           (((C7415 + C7414 + C7413) * C32440 +
             (C7412 + C7411 + C7410) * C31540 +
             (C7084 + C7083 + C7082) * C32754 +
             (C7081 + C7080 + C7079) * C31559) *
                C32619 +
            (C9244 * C32440 + C9245 * C31540 +
             (C7078 + C7077 + C7076) * C32754 +
             (C7075 + C7074 + C7073) * C31559) *
                C32774) *
               C585) *
              C32477 * C472 +
          (((C9242 * C31559 + C9243 * C32754 +
             (C6066 + C6065 + C6064) * C31540 +
             (C6063 + C6062 + C6061) * C32440) *
                C32774 +
            ((C7410 + C7411 + C7412) * C31559 +
             (C7413 + C7414 + C7415) * C32754 +
             (C5424 * C355 + C5418 * C372 + C5425 * C1147 + C5419 * C1163 +
              C5426 * C1148 + C32804 * C1164) *
                 C31540 +
             (C5424 * C373 + C5418 * C385 + C5425 * C1165 + C5419 * C1174 +
              C5426 * C1166 + C32804 * C1175) *
                 C32440) *
                C32619) *
               C585 -
           (((C6061 + C6062 + C6063) * C32440 +
             (C6064 + C6065 + C6066) * C31540 + C9244 * C32754 +
             C9245 * C31559) *
                C32619 +
            ((C5478 + C5477 + C5476) * C32440 +
             (C5475 + C5474 + C5473) * C31540 +
             (C5472 + C5471 + C5470) * C32754 +
             (C5469 + C5468 + C5467) * C31559) *
                C32774) *
               C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C2758 +
            (C113 * C127 + C32514 * C140) * C2752 + C168 * C2759 +
            C169 * C2753 + C170 * C2760 + C171 * C2754 + C172 * C2761 +
            C173 * C32808) *
               C32774 +
           (C2110 * C2758 + C2111 * C2752 + C614 * C2759 + C613 * C2753 +
            C612 * C2760 + C611 * C2754 + C610 * C2761 + C609 * C32808) *
               C32619) *
              C32491 * C32477 * C110 -
          ((C607 * C32808 + C608 * C2761 + C609 * C2754 + C610 * C2760 +
            C611 * C2753 + C612 * C2759 + C613 * C2752 + C614 * C2758) *
               C32619 +
           (C175 * C32808 + C174 * C2761 + C173 * C2754 + C172 * C2760 +
            C171 * C2753 + C170 * C2759 + C169 * C2752 + C168 * C2758) *
               C32774) *
              C32491 * C32477 * C111 +
          ((C170 * C2758 + C171 * C2752 + C172 * C2759 + C173 * C2753 +
            C174 * C2760 + C175 * C2754 + C177 * C2761 + C176 * C32808) *
               C32774 +
           (C612 * C2758 + C611 * C2752 + C610 * C2759 + C609 * C2753 +
            C608 * C2760 + C607 * C2754 +
            (C113 * C586 + C32514 * C587) * C2761 +
            (C113 * C588 + C32514 * C589) * C32808) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C2758 +
            (C113 * C127 + C32514 * C140) * C2752 + C168 * C2759 +
            C169 * C2753 + C170 * C2760 + C171 * C2754 + C172 * C2761 +
            C173 * C32808) *
               C32774 +
           (C2110 * C2758 + C2111 * C2752 + C614 * C2759 + C613 * C2753 +
            C612 * C2760 + C611 * C2754 + C610 * C2761 + C609 * C32808) *
               C32619) *
              C32491 * C239 -
          (((C113 * C708 + C32514 * C714) * C32808 +
            (C113 * C699 + C32514 * C707) * C2761 + C2305 * C2754 +
            C2306 * C2760 + C2307 * C2753 + C2308 * C2759 + C2646 * C2752 +
            C2645 * C2758) *
               C32619 +
           (C497 * C32808 + C498 * C2761 + C499 * C2754 + C500 * C2760 +
            C501 * C2753 + C502 * C2759 +
            (C113 * C261 + C32514 * C277) * C2752 +
            (C113 * C247 + C32514 * C262) * C2758) *
               C32774) *
              C32491 * C240 +
          (((C113 * C248 + C32514 * C263) * C2758 +
            (C113 * C264 + C32514 * C278) * C2752 +
            (C113 * C249 + C32514 * C265) * C2759 +
            (C113 * C266 + C32514 * C279) * C2753 +
            (C113 * C250 + C32514 * C267) * C2760 +
            (C113 * C268 + C32514 * C280) * C2754 +
            (C113 * C251 + C32514 * C269) * C2761 +
            (C113 * C270 + C32514 * C281) * C32808) *
               C32774 +
           ((C113 * C1142 + C32514 * C1154) * C2758 +
            (C113 * C1153 + C32514 * C1169) * C2752 +
            (C113 * C1141 + C32514 * C1152) * C2759 +
            (C113 * C1151 + C32514 * C1168) * C2753 +
            (C113 * C1140 + C32514 * C1150) * C2760 +
            (C113 * C1149 + C32514 * C1167) * C2754 +
            (C113 * C1508 + C32514 * C1509) * C2761 +
            (C113 * C1510 + C32514 * C1511) * C32808) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C31559 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32754 +
            (C5467 + C5468 + C5469) * C31540 +
            (C5470 + C5471 + C5472) * C32440) *
               C32774 +
           ((C7073 + C7074 + C7075) * C31559 +
            (C7076 + C7077 + C7078) * C32754 +
            (C6072 + C6071 + C6070) * C31540 +
            (C6069 + C6068 + C6067) * C32440) *
               C32619) *
              C32491 * C32477 * C110 -
          (((C6061 + C6062 + C6063) * C32440 +
            (C6064 + C6065 + C6066) * C31540 +
            (C6067 + C6068 + C6069) * C32754 +
            (C6070 + C6071 + C6072) * C31559) *
               C32619 +
           ((C5478 + C5477 + C5476) * C32440 +
            (C5475 + C5474 + C5473) * C31540 +
            (C5472 + C5471 + C5470) * C32754 +
            (C5469 + C5468 + C5467) * C31559) *
               C32774) *
              C32491 * C32477 * C111 +
          ((C5487 * C31559 + C5488 * C32754 + (C5484 + C5483 + C5482) * C31540 +
            (C5481 + C5480 + C5479) * C32440) *
               C32774 +
           ((C6066 + C6065 + C6064) * C31559 +
            (C6063 + C6062 + C6061) * C32754 +
            (C5424 * C349 + C5418 * C361 + C5425 * C699 + C5419 * C707 +
             C5426 * C1508 + C32804 * C1509) *
                C31540 +
            (C5424 * C360 + C5418 * C379 + C5425 * C708 + C5419 * C714 +
             C5426 * C1510 + C32804 * C1511) *
                C32440) *
               C32619) *
              C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C31559 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32754 +
            (C5467 + C5468 + C5469) * C31540 +
            (C5470 + C5471 + C5472) * C32440) *
               C32774 +
           ((C7073 + C7074 + C7075) * C31559 +
            (C7076 + C7077 + C7078) * C32754 +
            (C6072 + C6071 + C6070) * C31540 +
            (C6069 + C6068 + C6067) * C32440) *
               C32619) *
              C32491 * C239 -
          (((C5426 * C1700 + C32804 * C1704 + C5425 * C1151 + C5419 * C1168 +
             C5424 * C704 + C5418 * C712) *
                C32440 +
            (C5426 * C1695 + C32804 * C1699 + C5425 * C1141 + C5419 * C1152 +
             C5424 * C697 + C5418 * C703) *
                C31540 +
            (C7595 + C7594 + C7593) * C32754 +
            (C7592 + C7591 + C7590) * C31559) *
               C32619 +
           ((C5885 + C5886 + C5887) * C32440 +
            (C5888 + C5889 + C5890) * C31540 +
            (C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
             C5424 * C261 + C5418 * C277) *
                C32754 +
            (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
             C5424 * C247 + C5418 * C262) *
                C31559) *
               C32774) *
              C32491 * C240 +
          (((C5424 * C248 + C5418 * C263 + C5425 * C1008 + C5419 * C1017 +
             C5426 * C1009 + C32804 * C1018) *
                C31559 +
            (C5424 * C264 + C5418 * C278 + C5425 * C1016 + C5419 * C1026 +
             C5426 * C1019 + C32804 * C1027) *
                C32754 +
            (C5424 * C249 + C5418 * C265 + C5425 * C1007 + C5419 * C1015 +
             C5426 * C1010 + C32804 * C1020) *
                C31540 +
            (C5424 * C266 + C5418 * C279 + C5425 * C1014 + C5419 * C1025 +
             C5426 * C1021 + C32804 * C1028) *
                C32440) *
               C32774 +
           ((C5424 * C1142 + C5418 * C1154 + C5425 * C1694 + C5419 * C1697 +
             C5426 * C6424 + C32804 * C6428) *
                C31559 +
            (C5424 * C1153 + C5418 * C1169 + C5425 * C1698 + C5419 * C1703 +
             C5426 * C6427 + C32804 * C6433) *
                C32754 +
            (C5424 * C1141 + C5418 * C1152 + C5425 * C1695 + C5419 * C1699 +
             C5426 * C6604 + C32804 * C6605) *
                C31540 +
            (C5424 * C1151 + C5418 * C1168 + C5425 * C1700 + C5419 * C1704 +
             C5426 * C6606 + C32804 * C6607) *
                C32440) *
               C32619) *
              C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C114 +
            (C113 * C127 + C32514 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C32532 * C32491 * C470 -
           (C495 * C106 + C496 * C118 + C497 * C105 + C498 * C117 +
            C499 * C104 + C500 * C116 + C501 * C103 + C502 * C115 +
            (C113 * C261 + C32514 * C277) * C102 +
            (C113 * C247 + C32514 * C262) * C114) *
               C32532 * C32491 * C471) *
              C472 +
          ((C502 * C114 + C501 * C102 + C500 * C115 + C499 * C103 +
            C498 * C116 + C497 * C104 + C496 * C117 + C495 * C105 +
            (C113 * C474 + C32514 * C475) * C118 +
            (C113 * C476 + C32514 * C477) * C106) *
               C32532 * C32491 * C471 -
           (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
            C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
            C169 * C102 + C168 * C114) *
               C32532 * C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C835 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C829 +
            (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
            C895 * C837 + C896 * C32793) *
               C32532 * C32491 * C470 -
           ((C1351 + C1352 + C1353) * C32793 + (C1354 + C1355 + C1356) * C837 +
            (C1357 + C1358 + C1359) * C830 + (C1360 + C1361 + C1362) * C836 +
            (C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
             C832 * C261 + C32839 * C277) *
                C829 +
            (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
             C832 * C247 + C32839 * C262) *
                C835) *
               C32532 * C32491 * C471) *
              C472 +
          (((C1362 + C1361 + C1360) * C835 + (C1359 + C1358 + C1357) * C829 +
            (C1356 + C1355 + C1354) * C836 + (C1353 + C1352 + C1351) * C830 +
            (C832 * C244 + C32839 * C256 + C833 * C251 + C32827 * C269 +
             C834 * C1322 + C32804 * C1323) *
                C837 +
            (C832 * C255 + C32839 * C274 + C833 * C270 + C32827 * C281 +
             C834 * C1324 + C32804 * C1325) *
                C32793) *
               C32532 * C32491 * C471 -
           ((C887 + C888 + C889) * C32793 + (C890 + C891 + C892) * C837 +
            (C886 + C885 + C884) * C830 + (C883 + C882 + C881) * C836 +
            (C880 + C879 + C878) * C829 + (C877 + C876 + C875) * C835) *
               C32532 * C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C5427 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32836 +
            (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
            C5487 * C5429 + C5488 * C32793) *
               C32532 * C32491 * C470 -
           ((C5879 + C5880 + C5881) * C32793 + (C5882 + C5883 + C5884) * C5429 +
            (C5885 + C5886 + C5887) * C32823 + (C5888 + C5889 + C5890) * C5428 +
            (C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
             C5424 * C261 + C5418 * C277) *
                C32836 +
            (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
             C5424 * C247 + C5418 * C262) *
                C5427) *
               C32532 * C32491 * C471) *
              C472 +
          (((C5890 + C5889 + C5888) * C5427 + (C5887 + C5886 + C5885) * C32836 +
            (C5884 + C5883 + C5882) * C5428 + (C5881 + C5880 + C5879) * C32823 +
            (C5424 * C244 + C5418 * C256 + C5425 * C251 + C5419 * C269 +
             C5426 * C1322 + C32804 * C1323) *
                C5429 +
            (C5424 * C255 + C5418 * C274 + C5425 * C270 + C5419 * C281 +
             C5426 * C1324 + C32804 * C1325) *
                C32793) *
               C32532 * C32491 * C471 -
           ((C5479 + C5480 + C5481) * C32793 + (C5482 + C5483 + C5484) * C5429 +
            (C5478 + C5477 + C5476) * C32823 + (C5475 + C5474 + C5473) * C5428 +
            (C5472 + C5471 + C5470) * C32836 +
            (C5469 + C5468 + C5467) * C5427) *
               C32532 * C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
             C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
             C6290 * C1009 + C6284 * C1018) *
                C6291 +
            (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
             C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
             C6290 * C1019 + C6284 * C1027) *
                C32430) *
               C32532 * C32491 * C470 -
           ((C6290 * C6356 + C6284 * C6360 + C6289 * C1019 + C6283 * C1027 +
             C6288 * C1016 + C6282 * C1026 + C6287 * C264 + C6281 * C278 +
             C6286 * C261 + C6280 * C277) *
                C32430 +
            (C6290 * C6354 + C6284 * C6357 + C6289 * C1009 + C6283 * C1018 +
             C6288 * C1008 + C6282 * C1017 + C6287 * C248 + C6281 * C263 +
             C6286 * C247 + C6280 * C262) *
                C6291) *
               C32532 * C32491 * C471) *
              C472 +
          (((C6286 * C246 + C6280 * C260 + C6287 * C249 + C6281 * C265 +
             C6288 * C1007 + C6282 * C1015 + C6289 * C1010 + C6283 * C1020 +
             C6290 * C6518 + C6284 * C6519) *
                C6291 +
            (C6286 * C259 + C6280 * C276 + C6287 * C266 + C6281 * C279 +
             C6288 * C1014 + C6282 * C1025 + C6289 * C1021 + C6283 * C1028 +
             C6290 * C6520 + C6284 * C6521) *
                C32430) *
               C32532 * C32491 * C471 -
           ((C6290 * C1021 + C6284 * C1028 + C6289 * C1014 + C6283 * C1025 +
             C6288 * C266 + C6282 * C279 + C6287 * C259 + C6281 * C276 +
             C6286 * C129 + C6280 * C141) *
                C32430 +
            (C6290 * C1010 + C6284 * C1020 + C6289 * C1007 + C6283 * C1015 +
             C6288 * C249 + C6282 * C265 + C6287 * C246 + C6281 * C260 +
             C6286 * C120 + C6280 * C128) *
                C6291) *
               C32532 * C32491 * C470) *
              C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C114 +
            (C113 * C127 + C32514 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C32532 * C584 -
           (C607 * C106 + C608 * C118 + C609 * C105 + C610 * C117 +
            C611 * C104 + C612 * C116 + C613 * C103 + C614 * C115 +
            (C113 * C366 + C32514 * C382) * C102 +
            (C113 * C352 + C32514 * C367) * C114) *
               C32532 * C585) *
              C470 +
          (((C113 * C696 + C32514 * C701) * C114 +
            (C113 * C702 + C32514 * C711) * C102 +
            (C113 * C697 + C32514 * C703) * C115 +
            (C113 * C704 + C32514 * C712) * C103 +
            (C113 * C698 + C32514 * C705) * C116 +
            (C113 * C706 + C32514 * C713) * C104 +
            (C113 * C699 + C32514 * C707) * C117 +
            (C113 * C708 + C32514 * C714) * C105 +
            (C113 * C700 + C32514 * C709) * C118 +
            (C113 * C710 + C32514 * C715) * C106) *
               C32532 * C585 -
           (C495 * C106 + C496 * C118 + C497 * C105 + C498 * C117 +
            C499 * C104 + C500 * C116 + C501 * C103 + C502 * C115 +
            (C113 * C261 + C32514 * C277) * C102 +
            (C113 * C247 + C32514 * C262) * C114) *
               C32532 * C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C835 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C829 +
            (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
            C895 * C837 + C896 * C32793) *
               C32532 * C584 -
           ((C1537 + C1538 + C1539) * C32793 + (C1540 + C1541 + C1542) * C837 +
            (C1543 + C1544 + C1545) * C830 + (C1546 + C1547 + C1548) * C836 +
            (C834 * C1153 + C32804 * C1169 + C833 * C702 + C32827 * C711 +
             C832 * C366 + C32839 * C382) *
                C829 +
            (C834 * C1142 + C32804 * C1154 + C833 * C696 + C32827 * C701 +
             C832 * C352 + C32839 * C367) *
                C835) *
               C32532 * C585) *
              C470 +
          (((C832 * C696 + C32839 * C701 + C833 * C1142 + C32827 * C1154 +
             C834 * C1694 + C32804 * C1697) *
                C835 +
            (C832 * C702 + C32839 * C711 + C833 * C1153 + C32827 * C1169 +
             C834 * C1698 + C32804 * C1703) *
                C829 +
            (C832 * C697 + C32839 * C703 + C833 * C1141 + C32827 * C1152 +
             C834 * C1695 + C32804 * C1699) *
                C836 +
            (C832 * C704 + C32839 * C712 + C833 * C1151 + C32827 * C1168 +
             C834 * C1700 + C32804 * C1704) *
                C830 +
            (C832 * C698 + C32839 * C705 + C833 * C1140 + C32827 * C1150 +
             C834 * C1696 + C32804 * C1701) *
                C837 +
            (C832 * C706 + C32839 * C713 + C833 * C1149 + C32827 * C1167 +
             C834 * C1702 + C32804 * C1705) *
                C32793) *
               C32532 * C585 -
           ((C1351 + C1352 + C1353) * C32793 + (C1354 + C1355 + C1356) * C837 +
            (C1357 + C1358 + C1359) * C830 + (C1360 + C1361 + C1362) * C836 +
            (C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
             C832 * C261 + C32839 * C277) *
                C829 +
            (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
             C832 * C247 + C32839 * C262) *
                C835) *
               C32532 * C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C5427 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32836 +
            (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
            C5487 * C5429 + C5488 * C32793) *
               C32532 * C584 -
           ((C6061 + C6062 + C6063) * C32793 + (C6064 + C6065 + C6066) * C5429 +
            (C6067 + C6068 + C6069) * C32823 + (C6070 + C6071 + C6072) * C5428 +
            (C5426 * C1153 + C32804 * C1169 + C5425 * C702 + C5419 * C711 +
             C5424 * C366 + C5418 * C382) *
                C32836 +
            (C5426 * C1142 + C32804 * C1154 + C5425 * C696 + C5419 * C701 +
             C5424 * C352 + C5418 * C367) *
                C5427) *
               C32532 * C585) *
              C470 +
          (((C5424 * C696 + C5418 * C701 + C5425 * C1142 + C5419 * C1154 +
             C5426 * C1694 + C32804 * C1697) *
                C5427 +
            (C5424 * C702 + C5418 * C711 + C5425 * C1153 + C5419 * C1169 +
             C5426 * C1698 + C32804 * C1703) *
                C32836 +
            (C5424 * C697 + C5418 * C703 + C5425 * C1141 + C5419 * C1152 +
             C5426 * C1695 + C32804 * C1699) *
                C5428 +
            (C5424 * C704 + C5418 * C712 + C5425 * C1151 + C5419 * C1168 +
             C5426 * C1700 + C32804 * C1704) *
                C32823 +
            (C5424 * C698 + C5418 * C705 + C5425 * C1140 + C5419 * C1150 +
             C5426 * C1696 + C32804 * C1701) *
                C5429 +
            (C5424 * C706 + C5418 * C713 + C5425 * C1149 + C5419 * C1167 +
             C5426 * C1702 + C32804 * C1705) *
                C32793) *
               C32532 * C585 -
           ((C5879 + C5880 + C5881) * C32793 + (C5882 + C5883 + C5884) * C5429 +
            (C5885 + C5886 + C5887) * C32823 + (C5888 + C5889 + C5890) * C5428 +
            (C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
             C5424 * C261 + C5418 * C277) *
                C32836 +
            (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
             C5424 * C247 + C5418 * C262) *
                C5427) *
               C32532 * C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
             C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
             C6290 * C1009 + C6284 * C1018) *
                C6291 +
            (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
             C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
             C6290 * C1019 + C6284 * C1027) *
                C32430) *
               C32532 * C584 -
           ((C6290 * C6427 + C6284 * C6433 + C6289 * C1698 + C6283 * C1703 +
             C6288 * C1153 + C6282 * C1169 + C6287 * C702 + C6281 * C711 +
             C6286 * C366 + C6280 * C382) *
                C32430 +
            (C6290 * C6424 + C6284 * C6428 + C6289 * C1694 + C6283 * C1697 +
             C6288 * C1142 + C6282 * C1154 + C6287 * C696 + C6281 * C701 +
             C6286 * C352 + C6280 * C367) *
                C6291) *
               C32532 * C585) *
              C470 +
          (((C6286 * C696 + C6280 * C701 + C6287 * C1142 + C6281 * C1154 +
             C6288 * C1694 + C6282 * C1697 + C6289 * C6424 + C6283 * C6428 +
             C6290 * C6690 + C6284 * C6691) *
                C6291 +
            (C6286 * C702 + C6280 * C711 + C6287 * C1153 + C6281 * C1169 +
             C6288 * C1698 + C6282 * C1703 + C6289 * C6427 + C6283 * C6433 +
             C6290 * C6692 + C6284 * C6693) *
                C32430) *
               C32532 * C585 -
           ((C6290 * C6356 + C6284 * C6360 + C6289 * C1019 + C6283 * C1027 +
             C6288 * C1016 + C6282 * C1026 + C6287 * C264 + C6281 * C278 +
             C6286 * C261 + C6280 * C277) *
                C32430 +
            (C6290 * C6354 + C6284 * C6357 + C6289 * C1009 + C6283 * C1018 +
             C6288 * C1008 + C6282 * C1017 + C6287 * C248 + C6281 * C263 +
             C6286 * C247 + C6280 * C262) *
                C6291) *
               C32532 * C584) *
              C471) *
         C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C32514 * C126) * C114 +
           (C113 * C127 + C32514 * C140) * C102 + C168 * C115 + C169 * C103 +
           C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 + C174 * C118 +
           C175 * C106) *
              C32532 * C32491 * C239 -
          ((C113 * C253 + C32514 * C273) * C106 +
           (C113 * C243 + C32514 * C254) * C118 +
           (C113 * C255 + C32514 * C274) * C105 +
           (C113 * C244 + C32514 * C256) * C117 +
           (C113 * C257 + C32514 * C275) * C104 +
           (C113 * C245 + C32514 * C258) * C116 +
           (C113 * C259 + C32514 * C276) * C103 +
           (C113 * C246 + C32514 * C260) * C115 +
           (C113 * C261 + C32514 * C277) * C102 +
           (C113 * C247 + C32514 * C262) * C114) *
              C32532 * C32491 * C240 +
          ((C113 * C248 + C32514 * C263) * C114 +
           (C113 * C264 + C32514 * C278) * C102 +
           (C113 * C249 + C32514 * C265) * C115 +
           (C113 * C266 + C32514 * C279) * C103 +
           (C113 * C250 + C32514 * C267) * C116 +
           (C113 * C268 + C32514 * C280) * C104 +
           (C113 * C251 + C32514 * C269) * C117 +
           (C113 * C270 + C32514 * C281) * C105 +
           (C113 * C252 + C32514 * C271) * C118 +
           (C113 * C272 + C32514 * C282) * C106) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C32514 * C126) * C114 +
           (C113 * C127 + C32514 * C140) * C102 + C168 * C115 + C169 * C103 +
           C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 + C174 * C118 +
           C175 * C106) *
              C32532 * C32491 * C32477 * C110 -
          (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 + C173 * C104 +
           C172 * C116 + C171 * C103 + C170 * C115 + C169 * C102 +
           C168 * C114) *
              C32532 * C32491 * C32477 * C111 +
          (C170 * C114 + C171 * C102 + C172 * C115 + C173 * C103 + C174 * C116 +
           C175 * C104 + C177 * C117 + C176 * C105 +
           (C113 * C125 + C32514 * C138) * C118 +
           (C113 * C139 + C32514 * C146) * C106) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C32514 * C126) * C114 +
           (C113 * C127 + C32514 * C140) * C102 + C168 * C115 + C169 * C103 +
           C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 + C174 * C118 +
           C175 * C106) *
              C32532 * C345 -
          ((C113 * C358 + C32514 * C378) * C106 +
           (C113 * C348 + C32514 * C359) * C118 +
           (C113 * C360 + C32514 * C379) * C105 +
           (C113 * C349 + C32514 * C361) * C117 +
           (C113 * C362 + C32514 * C380) * C104 +
           (C113 * C350 + C32514 * C363) * C116 +
           (C113 * C364 + C32514 * C381) * C103 +
           (C113 * C351 + C32514 * C365) * C115 +
           (C113 * C366 + C32514 * C382) * C102 +
           (C113 * C352 + C32514 * C367) * C114) *
              C32532 * C346 +
          ((C113 * C353 + C32514 * C368) * C114 +
           (C113 * C369 + C32514 * C383) * C102 +
           (C113 * C354 + C32514 * C370) * C115 +
           (C113 * C371 + C32514 * C384) * C103 +
           (C113 * C355 + C32514 * C372) * C116 +
           (C113 * C373 + C32514 * C385) * C104 +
           (C113 * C356 + C32514 * C374) * C117 +
           (C113 * C375 + C32514 * C386) * C105 +
           (C113 * C357 + C32514 * C376) * C118 +
           (C113 * C377 + C32514 * C387) * C106) *
              C32532 * C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
            C834 * C248 + C32804 * C263) *
               C835 +
           (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
            C834 * C264 + C32804 * C278) *
               C829 +
           (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
           C895 * C837 + C896 * C32793) *
              C32532 * C32491 * C32477 * C110 -
          ((C887 + C888 + C889) * C32793 + (C890 + C891 + C892) * C837 +
           (C886 + C885 + C884) * C830 + (C883 + C882 + C881) * C836 +
           (C880 + C879 + C878) * C829 + (C877 + C876 + C875) * C835) *
              C32532 * C32491 * C32477 * C111 +
          (C895 * C835 + C896 * C829 + (C892 + C891 + C890) * C836 +
           (C889 + C888 + C887) * C830 +
           (C832 * C123 + C32839 * C134 + C833 * C243 + C32827 * C254 +
            C834 * C252 + C32804 * C271) *
               C837 +
           (C832 * C135 + C32839 * C144 + C833 * C253 + C32827 * C273 +
            C834 * C272 + C32804 * C282) *
               C32793) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
            C834 * C248 + C32804 * C263) *
               C835 +
           (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
            C834 * C264 + C32804 * C278) *
               C829 +
           (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
           C895 * C837 + C896 * C32793) *
              C32532 * C32491 * C239 -
          ((C834 * C1012 + C32804 * C1024 + C833 * C268 + C32827 * C280 +
            C832 * C257 + C32839 * C275) *
               C32793 +
           (C834 * C1006 + C32804 * C1013 + C833 * C250 + C32827 * C267 +
            C832 * C245 + C32839 * C258) *
               C837 +
           (C834 * C1014 + C32804 * C1025 + C833 * C266 + C32827 * C279 +
            C832 * C259 + C32839 * C276) *
               C830 +
           (C834 * C1007 + C32804 * C1015 + C833 * C249 + C32827 * C265 +
            C832 * C246 + C32839 * C260) *
               C836 +
           (C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
            C832 * C261 + C32839 * C277) *
               C829 +
           (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
            C832 * C247 + C32839 * C262) *
               C835) *
              C32532 * C32491 * C240 +
          ((C832 * C248 + C32839 * C263 + C833 * C1008 + C32827 * C1017 +
            C834 * C1009 + C32804 * C1018) *
               C835 +
           (C832 * C264 + C32839 * C278 + C833 * C1016 + C32827 * C1026 +
            C834 * C1019 + C32804 * C1027) *
               C829 +
           (C832 * C249 + C32839 * C265 + C833 * C1007 + C32827 * C1015 +
            C834 * C1010 + C32804 * C1020) *
               C836 +
           (C832 * C266 + C32839 * C279 + C833 * C1014 + C32827 * C1025 +
            C834 * C1021 + C32804 * C1028) *
               C830 +
           (C832 * C250 + C32839 * C267 + C833 * C1006 + C32827 * C1013 +
            C834 * C1011 + C32804 * C1022) *
               C837 +
           (C832 * C268 + C32839 * C280 + C833 * C1012 + C32827 * C1024 +
            C834 * C1023 + C32804 * C1029) *
               C32793) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
            C834 * C248 + C32804 * C263) *
               C835 +
           (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
            C834 * C264 + C32804 * C278) *
               C829 +
           (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
           C895 * C837 + C896 * C32793) *
              C32532 * C345 -
          ((C834 * C1149 + C32804 * C1167 + C833 * C706 + C32827 * C713 +
            C832 * C362 + C32839 * C380) *
               C32793 +
           (C834 * C1140 + C32804 * C1150 + C833 * C698 + C32827 * C705 +
            C832 * C350 + C32839 * C363) *
               C837 +
           (C834 * C1151 + C32804 * C1168 + C833 * C704 + C32827 * C712 +
            C832 * C364 + C32839 * C381) *
               C830 +
           (C834 * C1141 + C32804 * C1152 + C833 * C697 + C32827 * C703 +
            C832 * C351 + C32839 * C365) *
               C836 +
           (C834 * C1153 + C32804 * C1169 + C833 * C702 + C32827 * C711 +
            C832 * C366 + C32839 * C382) *
               C829 +
           (C834 * C1142 + C32804 * C1154 + C833 * C696 + C32827 * C701 +
            C832 * C352 + C32839 * C367) *
               C835) *
              C32532 * C346 +
          ((C832 * C353 + C32839 * C368 + C833 * C1143 + C32827 * C1155 +
            C834 * C1144 + C32804 * C1156) *
               C835 +
           (C832 * C369 + C32839 * C383 + C833 * C1157 + C32827 * C1170 +
            C834 * C1158 + C32804 * C1171) *
               C829 +
           (C832 * C354 + C32839 * C370 + C833 * C1145 + C32827 * C1159 +
            C834 * C1146 + C32804 * C1160) *
               C836 +
           (C832 * C371 + C32839 * C384 + C833 * C1161 + C32827 * C1172 +
            C834 * C1162 + C32804 * C1173) *
               C830 +
           (C832 * C355 + C32839 * C372 + C833 * C1147 + C32827 * C1163 +
            C834 * C1148 + C32804 * C1164) *
               C837 +
           (C832 * C373 + C32839 * C385 + C833 * C1165 + C32827 * C1174 +
            C834 * C1166 + C32804 * C1175) *
               C32793) *
              C32532 * C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
            C5426 * C248 + C32804 * C263) *
               C5427 +
           (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
            C5426 * C264 + C32804 * C278) *
               C32836 +
           (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
           C5487 * C5429 + C5488 * C32793) *
              C32532 * C32491 * C32477 * C110 -
          ((C5479 + C5480 + C5481) * C32793 + (C5482 + C5483 + C5484) * C5429 +
           (C5478 + C5477 + C5476) * C32823 + (C5475 + C5474 + C5473) * C5428 +
           (C5472 + C5471 + C5470) * C32836 + (C5469 + C5468 + C5467) * C5427) *
              C32532 * C32491 * C32477 * C111 +
          (C5487 * C5427 + C5488 * C32836 + (C5484 + C5483 + C5482) * C5428 +
           (C5481 + C5480 + C5479) * C32823 +
           (C5424 * C123 + C5418 * C134 + C5425 * C243 + C5419 * C254 +
            C5426 * C252 + C32804 * C271) *
               C5429 +
           (C5424 * C135 + C5418 * C144 + C5425 * C253 + C5419 * C273 +
            C5426 * C272 + C32804 * C282) *
               C32793) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
            C5426 * C248 + C32804 * C263) *
               C5427 +
           (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
            C5426 * C264 + C32804 * C278) *
               C32836 +
           (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
           C5487 * C5429 + C5488 * C32793) *
              C32532 * C32491 * C239 -
          ((C5426 * C1012 + C32804 * C1024 + C5425 * C268 + C5419 * C280 +
            C5424 * C257 + C5418 * C275) *
               C32793 +
           (C5426 * C1006 + C32804 * C1013 + C5425 * C250 + C5419 * C267 +
            C5424 * C245 + C5418 * C258) *
               C5429 +
           (C5426 * C1014 + C32804 * C1025 + C5425 * C266 + C5419 * C279 +
            C5424 * C259 + C5418 * C276) *
               C32823 +
           (C5426 * C1007 + C32804 * C1015 + C5425 * C249 + C5419 * C265 +
            C5424 * C246 + C5418 * C260) *
               C5428 +
           (C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
            C5424 * C261 + C5418 * C277) *
               C32836 +
           (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
            C5424 * C247 + C5418 * C262) *
               C5427) *
              C32532 * C32491 * C240 +
          ((C5424 * C248 + C5418 * C263 + C5425 * C1008 + C5419 * C1017 +
            C5426 * C1009 + C32804 * C1018) *
               C5427 +
           (C5424 * C264 + C5418 * C278 + C5425 * C1016 + C5419 * C1026 +
            C5426 * C1019 + C32804 * C1027) *
               C32836 +
           (C5424 * C249 + C5418 * C265 + C5425 * C1007 + C5419 * C1015 +
            C5426 * C1010 + C32804 * C1020) *
               C5428 +
           (C5424 * C266 + C5418 * C279 + C5425 * C1014 + C5419 * C1025 +
            C5426 * C1021 + C32804 * C1028) *
               C32823 +
           (C5424 * C250 + C5418 * C267 + C5425 * C1006 + C5419 * C1013 +
            C5426 * C1011 + C32804 * C1022) *
               C5429 +
           (C5424 * C268 + C5418 * C280 + C5425 * C1012 + C5419 * C1024 +
            C5426 * C1023 + C32804 * C1029) *
               C32793) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
            C5426 * C248 + C32804 * C263) *
               C5427 +
           (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
            C5426 * C264 + C32804 * C278) *
               C32836 +
           (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
           C5487 * C5429 + C5488 * C32793) *
              C32532 * C345 -
          ((C5426 * C1149 + C32804 * C1167 + C5425 * C706 + C5419 * C713 +
            C5424 * C362 + C5418 * C380) *
               C32793 +
           (C5426 * C1140 + C32804 * C1150 + C5425 * C698 + C5419 * C705 +
            C5424 * C350 + C5418 * C363) *
               C5429 +
           (C5426 * C1151 + C32804 * C1168 + C5425 * C704 + C5419 * C712 +
            C5424 * C364 + C5418 * C381) *
               C32823 +
           (C5426 * C1141 + C32804 * C1152 + C5425 * C697 + C5419 * C703 +
            C5424 * C351 + C5418 * C365) *
               C5428 +
           (C5426 * C1153 + C32804 * C1169 + C5425 * C702 + C5419 * C711 +
            C5424 * C366 + C5418 * C382) *
               C32836 +
           (C5426 * C1142 + C32804 * C1154 + C5425 * C696 + C5419 * C701 +
            C5424 * C352 + C5418 * C367) *
               C5427) *
              C32532 * C346 +
          ((C5424 * C353 + C5418 * C368 + C5425 * C1143 + C5419 * C1155 +
            C5426 * C1144 + C32804 * C1156) *
               C5427 +
           (C5424 * C369 + C5418 * C383 + C5425 * C1157 + C5419 * C1170 +
            C5426 * C1158 + C32804 * C1171) *
               C32836 +
           (C5424 * C354 + C5418 * C370 + C5425 * C1145 + C5419 * C1159 +
            C5426 * C1146 + C32804 * C1160) *
               C5428 +
           (C5424 * C371 + C5418 * C384 + C5425 * C1161 + C5419 * C1172 +
            C5426 * C1162 + C32804 * C1173) *
               C32823 +
           (C5424 * C355 + C5418 * C372 + C5425 * C1147 + C5419 * C1163 +
            C5426 * C1148 + C32804 * C1164) *
               C5429 +
           (C5424 * C373 + C5418 * C385 + C5425 * C1165 + C5419 * C1174 +
            C5426 * C1166 + C32804 * C1175) *
               C32793) *
              C32532 * C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
            C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
            C6290 * C1009 + C6284 * C1018) *
               C6291 +
           (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
            C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
            C6290 * C1019 + C6284 * C1027) *
               C32430) *
              C32532 * C32491 * C32477 * C110 -
          ((C6290 * C1021 + C6284 * C1028 + C6289 * C1014 + C6283 * C1025 +
            C6288 * C266 + C6282 * C279 + C6287 * C259 + C6281 * C276 +
            C6286 * C129 + C6280 * C141) *
               C32430 +
           (C6290 * C1010 + C6284 * C1020 + C6289 * C1007 + C6283 * C1015 +
            C6288 * C249 + C6282 * C265 + C6287 * C246 + C6281 * C260 +
            C6286 * C120 + C6280 * C128) *
               C6291) *
              C32532 * C32491 * C32477 * C111 +
          ((C6286 * C121 + C6280 * C130 + C6287 * C245 + C6281 * C258 +
            C6288 * C250 + C6282 * C267 + C6289 * C1006 + C6283 * C1013 +
            C6290 * C1011 + C6284 * C1022) *
               C6291 +
           (C6286 * C131 + C6280 * C142 + C6287 * C257 + C6281 * C275 +
            C6288 * C268 + C6282 * C280 + C6289 * C1012 + C6283 * C1024 +
            C6290 * C1023 + C6284 * C1029) *
               C32430) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
            C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
            C6290 * C1009 + C6284 * C1018) *
               C6291 +
           (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
            C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
            C6290 * C1019 + C6284 * C1027) *
               C32430) *
              C32532 * C32491 * C239 -
          ((C6290 * C6356 + C6284 * C6360 + C6289 * C1019 + C6283 * C1027 +
            C6288 * C1016 + C6282 * C1026 + C6287 * C264 + C6281 * C278 +
            C6286 * C261 + C6280 * C277) *
               C32430 +
           (C6290 * C6354 + C6284 * C6357 + C6289 * C1009 + C6283 * C1018 +
            C6288 * C1008 + C6282 * C1017 + C6287 * C248 + C6281 * C263 +
            C6286 * C247 + C6280 * C262) *
               C6291) *
              C32532 * C32491 * C240 +
          ((C6286 * C248 + C6280 * C263 + C6287 * C1008 + C6281 * C1017 +
            C6288 * C1009 + C6282 * C1018 + C6289 * C6354 + C6283 * C6357 +
            C6290 * C6355 + C6284 * C6358) *
               C6291 +
           (C6286 * C264 + C6280 * C278 + C6287 * C1016 + C6281 * C1026 +
            C6288 * C1019 + C6282 * C1027 + C6289 * C6356 + C6283 * C6360 +
            C6290 * C6359 + C6284 * C6361) *
               C32430) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
            C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
            C6290 * C1009 + C6284 * C1018) *
               C6291 +
           (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
            C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
            C6290 * C1019 + C6284 * C1027) *
               C32430) *
              C32532 * C345 -
          ((C6290 * C6427 + C6284 * C6433 + C6289 * C1698 + C6283 * C1703 +
            C6288 * C1153 + C6282 * C1169 + C6287 * C702 + C6281 * C711 +
            C6286 * C366 + C6280 * C382) *
               C32430 +
           (C6290 * C6424 + C6284 * C6428 + C6289 * C1694 + C6283 * C1697 +
            C6288 * C1142 + C6282 * C1154 + C6287 * C696 + C6281 * C701 +
            C6286 * C352 + C6280 * C367) *
               C6291) *
              C32532 * C346 +
          ((C6286 * C353 + C6280 * C368 + C6287 * C1143 + C6281 * C1155 +
            C6288 * C1144 + C6282 * C1156 + C6289 * C6425 + C6283 * C6429 +
            C6290 * C6426 + C6284 * C6430) *
               C6291 +
           (C6286 * C369 + C6280 * C383 + C6287 * C1157 + C6281 * C1170 +
            C6288 * C1158 + C6282 * C1171 + C6289 * C6431 + C6283 * C6434 +
            C6290 * C6432 + C6284 * C6435) *
               C32430) *
              C32532 * C347) *
         C32477 * C32465) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C32514 * C126) * C114 +
            (C113 * C127 + C32514 * C140) * C102 + C168 * C115 + C169 * C103 +
            C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 +
            C174 * C118 + C175 * C106) *
               C32532 * C584 -
           (C607 * C106 + C608 * C118 + C609 * C105 + C610 * C117 +
            C611 * C104 + C612 * C116 + C613 * C103 + C614 * C115 +
            (C113 * C366 + C32514 * C382) * C102 +
            (C113 * C352 + C32514 * C367) * C114) *
               C32532 * C585) *
              C32477 * C472 +
          ((C614 * C114 + C613 * C102 + C612 * C115 + C611 * C103 +
            C610 * C116 + C609 * C104 + C608 * C117 + C607 * C105 +
            (C113 * C586 + C32514 * C587) * C118 +
            (C113 * C588 + C32514 * C589) * C106) *
               C32532 * C585 -
           (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 +
            C173 * C104 + C172 * C116 + C171 * C103 + C170 * C115 +
            C169 * C102 + C168 * C114) *
               C32532 * C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
             C834 * C248 + C32804 * C263) *
                C835 +
            (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
             C834 * C264 + C32804 * C278) *
                C829 +
            (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
            C895 * C837 + C896 * C32793) *
               C32532 * C584 -
           ((C1537 + C1538 + C1539) * C32793 + (C1540 + C1541 + C1542) * C837 +
            (C1543 + C1544 + C1545) * C830 + (C1546 + C1547 + C1548) * C836 +
            (C834 * C1153 + C32804 * C1169 + C833 * C702 + C32827 * C711 +
             C832 * C366 + C32839 * C382) *
                C829 +
            (C834 * C1142 + C32804 * C1154 + C833 * C696 + C32827 * C701 +
             C832 * C352 + C32839 * C367) *
                C835) *
               C32532 * C585) *
              C32477 * C472 +
          (((C1548 + C1547 + C1546) * C835 + (C1545 + C1544 + C1543) * C829 +
            (C1542 + C1541 + C1540) * C836 + (C1539 + C1538 + C1537) * C830 +
            (C832 * C349 + C32839 * C361 + C833 * C699 + C32827 * C707 +
             C834 * C1508 + C32804 * C1509) *
                C837 +
            (C832 * C360 + C32839 * C379 + C833 * C708 + C32827 * C714 +
             C834 * C1510 + C32804 * C1511) *
                C32793) *
               C32532 * C585 -
           ((C887 + C888 + C889) * C32793 + (C890 + C891 + C892) * C837 +
            (C886 + C885 + C884) * C830 + (C883 + C882 + C881) * C836 +
            (C880 + C879 + C878) * C829 + (C877 + C876 + C875) * C835) *
               C32532 * C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
             C5426 * C248 + C32804 * C263) *
                C5427 +
            (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
             C5426 * C264 + C32804 * C278) *
                C32836 +
            (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
            C5487 * C5429 + C5488 * C32793) *
               C32532 * C584 -
           ((C6061 + C6062 + C6063) * C32793 + (C6064 + C6065 + C6066) * C5429 +
            (C6067 + C6068 + C6069) * C32823 + (C6070 + C6071 + C6072) * C5428 +
            (C5426 * C1153 + C32804 * C1169 + C5425 * C702 + C5419 * C711 +
             C5424 * C366 + C5418 * C382) *
                C32836 +
            (C5426 * C1142 + C32804 * C1154 + C5425 * C696 + C5419 * C701 +
             C5424 * C352 + C5418 * C367) *
                C5427) *
               C32532 * C585) *
              C32477 * C472 +
          (((C6072 + C6071 + C6070) * C5427 + (C6069 + C6068 + C6067) * C32836 +
            (C6066 + C6065 + C6064) * C5428 + (C6063 + C6062 + C6061) * C32823 +
            (C5424 * C349 + C5418 * C361 + C5425 * C699 + C5419 * C707 +
             C5426 * C1508 + C32804 * C1509) *
                C5429 +
            (C5424 * C360 + C5418 * C379 + C5425 * C708 + C5419 * C714 +
             C5426 * C1510 + C32804 * C1511) *
                C32793) *
               C32532 * C585 -
           ((C5479 + C5480 + C5481) * C32793 + (C5482 + C5483 + C5484) * C5429 +
            (C5478 + C5477 + C5476) * C32823 + (C5475 + C5474 + C5473) * C5428 +
            (C5472 + C5471 + C5470) * C32836 +
            (C5469 + C5468 + C5467) * C5427) *
               C32532 * C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
             C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
             C6290 * C1009 + C6284 * C1018) *
                C6291 +
            (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
             C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
             C6290 * C1019 + C6284 * C1027) *
                C32430) *
               C32532 * C584 -
           ((C6290 * C6427 + C6284 * C6433 + C6289 * C1698 + C6283 * C1703 +
             C6288 * C1153 + C6282 * C1169 + C6287 * C702 + C6281 * C711 +
             C6286 * C366 + C6280 * C382) *
                C32430 +
            (C6290 * C6424 + C6284 * C6428 + C6289 * C1694 + C6283 * C1697 +
             C6288 * C1142 + C6282 * C1154 + C6287 * C696 + C6281 * C701 +
             C6286 * C352 + C6280 * C367) *
                C6291) *
               C32532 * C585) *
              C32477 * C472 +
          (((C6286 * C351 + C6280 * C365 + C6287 * C697 + C6281 * C703 +
             C6288 * C1141 + C6282 * C1152 + C6289 * C1695 + C6283 * C1699 +
             C6290 * C6604 + C6284 * C6605) *
                C6291 +
            (C6286 * C364 + C6280 * C381 + C6287 * C704 + C6281 * C712 +
             C6288 * C1151 + C6282 * C1168 + C6289 * C1700 + C6283 * C1704 +
             C6290 * C6606 + C6284 * C6607) *
                C32430) *
               C32532 * C585 -
           ((C6290 * C1021 + C6284 * C1028 + C6289 * C1014 + C6283 * C1025 +
             C6288 * C266 + C6282 * C279 + C6287 * C259 + C6281 * C276 +
             C6286 * C129 + C6280 * C141) *
                C32430 +
            (C6290 * C1010 + C6284 * C1020 + C6289 * C1007 + C6283 * C1015 +
             C6288 * C249 + C6282 * C265 + C6287 * C246 + C6281 * C260 +
             C6286 * C120 + C6280 * C128) *
                C6291) *
               C32532 * C584) *
              C32477 * C473)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C32514 * C126) * C114 +
           (C113 * C127 + C32514 * C140) * C102 + C168 * C115 + C169 * C103 +
           C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 + C174 * C118 +
           C175 * C106) *
              C32532 * C32491 * C32477 * C110 -
          (C176 * C106 + C177 * C118 + C175 * C105 + C174 * C117 + C173 * C104 +
           C172 * C116 + C171 * C103 + C170 * C115 + C169 * C102 +
           C168 * C114) *
              C32532 * C32491 * C32477 * C111 +
          (C170 * C114 + C171 * C102 + C172 * C115 + C173 * C103 + C174 * C116 +
           C175 * C104 + C177 * C117 + C176 * C105 +
           (C113 * C125 + C32514 * C138) * C118 +
           (C113 * C139 + C32514 * C146) * C106) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C32514 * C126) * C114 +
           (C113 * C127 + C32514 * C140) * C102 + C168 * C115 + C169 * C103 +
           C170 * C116 + C171 * C104 + C172 * C117 + C173 * C105 + C174 * C118 +
           C175 * C106) *
              C32532 * C32491 * C239 -
          ((C113 * C253 + C32514 * C273) * C106 +
           (C113 * C243 + C32514 * C254) * C118 +
           (C113 * C255 + C32514 * C274) * C105 +
           (C113 * C244 + C32514 * C256) * C117 +
           (C113 * C257 + C32514 * C275) * C104 +
           (C113 * C245 + C32514 * C258) * C116 +
           (C113 * C259 + C32514 * C276) * C103 +
           (C113 * C246 + C32514 * C260) * C115 +
           (C113 * C261 + C32514 * C277) * C102 +
           (C113 * C247 + C32514 * C262) * C114) *
              C32532 * C32491 * C240 +
          ((C113 * C248 + C32514 * C263) * C114 +
           (C113 * C264 + C32514 * C278) * C102 +
           (C113 * C249 + C32514 * C265) * C115 +
           (C113 * C266 + C32514 * C279) * C103 +
           (C113 * C250 + C32514 * C267) * C116 +
           (C113 * C268 + C32514 * C280) * C104 +
           (C113 * C251 + C32514 * C269) * C117 +
           (C113 * C270 + C32514 * C281) * C105 +
           (C113 * C252 + C32514 * C271) * C118 +
           (C113 * C272 + C32514 * C282) * C106) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
            C834 * C248 + C32804 * C263) *
               C835 +
           (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
            C834 * C264 + C32804 * C278) *
               C829 +
           (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
           C895 * C837 + C896 * C32793) *
              C32532 * C32491 * C32477 * C110 -
          ((C887 + C888 + C889) * C32793 + (C890 + C891 + C892) * C837 +
           (C886 + C885 + C884) * C830 + (C883 + C882 + C881) * C836 +
           (C880 + C879 + C878) * C829 + (C877 + C876 + C875) * C835) *
              C32532 * C32491 * C32477 * C111 +
          (C895 * C835 + C896 * C829 + (C892 + C891 + C890) * C836 +
           (C889 + C888 + C887) * C830 +
           (C832 * C123 + C32839 * C134 + C833 * C243 + C32827 * C254 +
            C834 * C252 + C32804 * C271) *
               C837 +
           (C832 * C135 + C32839 * C144 + C833 * C253 + C32827 * C273 +
            C834 * C272 + C32804 * C282) *
               C32793) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C832 * C119 + C32839 * C126 + C833 * C247 + C32827 * C262 +
            C834 * C248 + C32804 * C263) *
               C835 +
           (C832 * C127 + C32839 * C140 + C833 * C261 + C32827 * C277 +
            C834 * C264 + C32804 * C278) *
               C829 +
           (C875 + C876 + C877) * C836 + (C878 + C879 + C880) * C830 +
           C895 * C837 + C896 * C32793) *
              C32532 * C32491 * C239 -
          ((C834 * C1012 + C32804 * C1024 + C833 * C268 + C32827 * C280 +
            C832 * C257 + C32839 * C275) *
               C32793 +
           (C834 * C1006 + C32804 * C1013 + C833 * C250 + C32827 * C267 +
            C832 * C245 + C32839 * C258) *
               C837 +
           (C834 * C1014 + C32804 * C1025 + C833 * C266 + C32827 * C279 +
            C832 * C259 + C32839 * C276) *
               C830 +
           (C834 * C1007 + C32804 * C1015 + C833 * C249 + C32827 * C265 +
            C832 * C246 + C32839 * C260) *
               C836 +
           (C834 * C1016 + C32804 * C1026 + C833 * C264 + C32827 * C278 +
            C832 * C261 + C32839 * C277) *
               C829 +
           (C834 * C1008 + C32804 * C1017 + C833 * C248 + C32827 * C263 +
            C832 * C247 + C32839 * C262) *
               C835) *
              C32532 * C32491 * C240 +
          ((C832 * C248 + C32839 * C263 + C833 * C1008 + C32827 * C1017 +
            C834 * C1009 + C32804 * C1018) *
               C835 +
           (C832 * C264 + C32839 * C278 + C833 * C1016 + C32827 * C1026 +
            C834 * C1019 + C32804 * C1027) *
               C829 +
           (C832 * C249 + C32839 * C265 + C833 * C1007 + C32827 * C1015 +
            C834 * C1010 + C32804 * C1020) *
               C836 +
           (C832 * C266 + C32839 * C279 + C833 * C1014 + C32827 * C1025 +
            C834 * C1021 + C32804 * C1028) *
               C830 +
           (C832 * C250 + C32839 * C267 + C833 * C1006 + C32827 * C1013 +
            C834 * C1011 + C32804 * C1022) *
               C837 +
           (C832 * C268 + C32839 * C280 + C833 * C1012 + C32827 * C1024 +
            C834 * C1023 + C32804 * C1029) *
               C32793) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
            C5426 * C248 + C32804 * C263) *
               C5427 +
           (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
            C5426 * C264 + C32804 * C278) *
               C32836 +
           (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
           C5487 * C5429 + C5488 * C32793) *
              C32532 * C32491 * C32477 * C110 -
          ((C5479 + C5480 + C5481) * C32793 + (C5482 + C5483 + C5484) * C5429 +
           (C5478 + C5477 + C5476) * C32823 + (C5475 + C5474 + C5473) * C5428 +
           (C5472 + C5471 + C5470) * C32836 + (C5469 + C5468 + C5467) * C5427) *
              C32532 * C32491 * C32477 * C111 +
          (C5487 * C5427 + C5488 * C32836 + (C5484 + C5483 + C5482) * C5428 +
           (C5481 + C5480 + C5479) * C32823 +
           (C5424 * C123 + C5418 * C134 + C5425 * C243 + C5419 * C254 +
            C5426 * C252 + C32804 * C271) *
               C5429 +
           (C5424 * C135 + C5418 * C144 + C5425 * C253 + C5419 * C273 +
            C5426 * C272 + C32804 * C282) *
               C32793) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C5424 * C119 + C5418 * C126 + C5425 * C247 + C5419 * C262 +
            C5426 * C248 + C32804 * C263) *
               C5427 +
           (C5424 * C127 + C5418 * C140 + C5425 * C261 + C5419 * C277 +
            C5426 * C264 + C32804 * C278) *
               C32836 +
           (C5467 + C5468 + C5469) * C5428 + (C5470 + C5471 + C5472) * C32823 +
           C5487 * C5429 + C5488 * C32793) *
              C32532 * C32491 * C239 -
          ((C5426 * C1012 + C32804 * C1024 + C5425 * C268 + C5419 * C280 +
            C5424 * C257 + C5418 * C275) *
               C32793 +
           (C5426 * C1006 + C32804 * C1013 + C5425 * C250 + C5419 * C267 +
            C5424 * C245 + C5418 * C258) *
               C5429 +
           (C5426 * C1014 + C32804 * C1025 + C5425 * C266 + C5419 * C279 +
            C5424 * C259 + C5418 * C276) *
               C32823 +
           (C5426 * C1007 + C32804 * C1015 + C5425 * C249 + C5419 * C265 +
            C5424 * C246 + C5418 * C260) *
               C5428 +
           (C5426 * C1016 + C32804 * C1026 + C5425 * C264 + C5419 * C278 +
            C5424 * C261 + C5418 * C277) *
               C32836 +
           (C5426 * C1008 + C32804 * C1017 + C5425 * C248 + C5419 * C263 +
            C5424 * C247 + C5418 * C262) *
               C5427) *
              C32532 * C32491 * C240 +
          ((C5424 * C248 + C5418 * C263 + C5425 * C1008 + C5419 * C1017 +
            C5426 * C1009 + C32804 * C1018) *
               C5427 +
           (C5424 * C264 + C5418 * C278 + C5425 * C1016 + C5419 * C1026 +
            C5426 * C1019 + C32804 * C1027) *
               C32836 +
           (C5424 * C249 + C5418 * C265 + C5425 * C1007 + C5419 * C1015 +
            C5426 * C1010 + C32804 * C1020) *
               C5428 +
           (C5424 * C266 + C5418 * C279 + C5425 * C1014 + C5419 * C1025 +
            C5426 * C1021 + C32804 * C1028) *
               C32823 +
           (C5424 * C250 + C5418 * C267 + C5425 * C1006 + C5419 * C1013 +
            C5426 * C1011 + C32804 * C1022) *
               C5429 +
           (C5424 * C268 + C5418 * C280 + C5425 * C1012 + C5419 * C1024 +
            C5426 * C1023 + C32804 * C1029) *
               C32793) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
            C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
            C6290 * C1009 + C6284 * C1018) *
               C6291 +
           (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
            C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
            C6290 * C1019 + C6284 * C1027) *
               C32430) *
              C32532 * C32491 * C32477 * C110 -
          ((C6290 * C1021 + C6284 * C1028 + C6289 * C1014 + C6283 * C1025 +
            C6288 * C266 + C6282 * C279 + C6287 * C259 + C6281 * C276 +
            C6286 * C129 + C6280 * C141) *
               C32430 +
           (C6290 * C1010 + C6284 * C1020 + C6289 * C1007 + C6283 * C1015 +
            C6288 * C249 + C6282 * C265 + C6287 * C246 + C6281 * C260 +
            C6286 * C120 + C6280 * C128) *
               C6291) *
              C32532 * C32491 * C32477 * C111 +
          ((C6286 * C121 + C6280 * C130 + C6287 * C245 + C6281 * C258 +
            C6288 * C250 + C6282 * C267 + C6289 * C1006 + C6283 * C1013 +
            C6290 * C1011 + C6284 * C1022) *
               C6291 +
           (C6286 * C131 + C6280 * C142 + C6287 * C257 + C6281 * C275 +
            C6288 * C268 + C6282 * C280 + C6289 * C1012 + C6283 * C1024 +
            C6290 * C1023 + C6284 * C1029) *
               C32430) *
              C32532 * C32491 * C32477 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C6286 * C119 + C6280 * C126 + C6287 * C247 + C6281 * C262 +
            C6288 * C248 + C6282 * C263 + C6289 * C1008 + C6283 * C1017 +
            C6290 * C1009 + C6284 * C1018) *
               C6291 +
           (C6286 * C127 + C6280 * C140 + C6287 * C261 + C6281 * C277 +
            C6288 * C264 + C6282 * C278 + C6289 * C1016 + C6283 * C1026 +
            C6290 * C1019 + C6284 * C1027) *
               C32430) *
              C32532 * C32491 * C239 -
          ((C6290 * C6356 + C6284 * C6360 + C6289 * C1019 + C6283 * C1027 +
            C6288 * C1016 + C6282 * C1026 + C6287 * C264 + C6281 * C278 +
            C6286 * C261 + C6280 * C277) *
               C32430 +
           (C6290 * C6354 + C6284 * C6357 + C6289 * C1009 + C6283 * C1018 +
            C6288 * C1008 + C6282 * C1017 + C6287 * C248 + C6281 * C263 +
            C6286 * C247 + C6280 * C262) *
               C6291) *
              C32532 * C32491 * C240 +
          ((C6286 * C248 + C6280 * C263 + C6287 * C1008 + C6281 * C1017 +
            C6288 * C1009 + C6282 * C1018 + C6289 * C6354 + C6283 * C6357 +
            C6290 * C6355 + C6284 * C6358) *
               C6291 +
           (C6286 * C264 + C6280 * C278 + C6287 * C1016 + C6281 * C1026 +
            C6288 * C1019 + C6282 * C1027 + C6289 * C6356 + C6283 * C6360 +
            C6290 * C6359 + C6284 * C6361) *
               C32430) *
              C32532 * C32491 * C241) *
         C32465) /
            (p * q * std::sqrt(p + q));
}
