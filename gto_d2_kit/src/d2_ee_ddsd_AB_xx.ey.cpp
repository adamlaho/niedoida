/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ddsd_AB_xx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_2202_12_11(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C31582 = 0 * ae;
    const double C31581 = ae * be;
    const double C31580 = 0 * be;
    const double C31579 = 0 * be;
    const double C31578 = ae + be;
    const double C31577 = 0 * be;
    const double C31576 = xA - xB;
    const double C31677 = 0 * be;
    const double C31790 = p + q;
    const double C31789 = p * q;
    const double C31795 = xP - xQ;
    const double C31794 = bs[2];
    const double C31800 = bs[3];
    const double C31811 = bs[4];
    const double C31832 = bs[5];
    const double C31868 = bs[6];
    const double C31924 = bs[7];
    const double C31989 = yP - yQ;
    const double C32023 = zP - zQ;
    const double C123 = bs[0];
    const double C32520 = ce + de;
    const double C32519 = ce * de;
    const double C32518 = xC - xD;
    const double C32532 = yC - yD;
    const double C32546 = zC - zD;
    const double C32576 = yA - yB;
    const double C32588 = zA - zB;
    const double C31641 = 2 * C31581;
    const double C31638 = -2 * C31580;
    const double C31637 = -2 * C31579;
    const double C31589 = C31582 / C31578;
    const double C31586 = C31580 / C31578;
    const double C31584 = 2 * C31578;
    const double C31583 = std::pow(C31578, 2);
    const double C31588 = C31581 * C31576;
    const double C31587 = C31576 * C31580;
    const double C31585 = C31576 * C31579;
    const double C32484 = C31576 * be;
    const double C32483 = C31576 * ae;
    const double C32482 = std::pow(C31576, 2);
    const double C31678 = C31677 / C31578;
    const double C31791 = 2 * C31789;
    const double C31803 = C31795 * ae;
    const double C31802 = C31795 * be;
    const double C31799 = std::pow(C31795, 2);
    const double C32005 = std::pow(C31989, 2);
    const double C32039 = std::pow(C32023, 2);
    const double C32796 = 2 * C32520;
    const double C32795 = std::pow(C32520, 2);
    const double C32521 = std::pow(C32518, 2);
    const double C32794 = C32518 * ce;
    const double C32533 = std::pow(C32532, 2);
    const double C32797 = C32532 * ce;
    const double C32547 = std::pow(C32546, 2);
    const double C32798 = C32546 * ce;
    const double C32577 = std::pow(C32576, 2);
    const double C32632 = C32576 * be;
    const double C32630 = C32576 * ae;
    const double C32589 = std::pow(C32588, 2);
    const double C32672 = C32588 * be;
    const double C32670 = C32588 * ae;
    const double C31645 = ae * C31638;
    const double C31644 = ae * C31637;
    const double C32496 = std::pow(C31584, -1);
    const double C32790 = std::pow(C31584, -2);
    const double C31590 = 2 * C31583;
    const double C31636 = C31583 * C31584;
    const double C31682 = 4 * C31583;
    const double C31592 = C31587 / C31578;
    const double C31591 = C31585 / C31578;
    const double C32783 = std::pow(C32483, 2);
    const double C32485 = C32482 * C31581;
    const double C31793 = C31791 / C31790;
    const double C144 =
        ((std::pow(xP - xQ, 2) * bs[2] * std::pow(C31791 / C31790, 2) -
          (bs[1] * C31791) / C31790) *
         C31581) /
        C31583;
    const double C124 = -(C31795 * bs[1] * C31791) / C31790;
    const double C221 = -(C31989 * bs[1] * C31791) / C31790;
    const double C326 = -(C32023 * bs[1] * C31791) / C31790;
    const double C31806 = C31800 * C31803;
    const double C31817 = C31811 * C31803;
    const double C31840 = C31832 * C31803;
    const double C31880 = C31868 * C31803;
    const double C31940 = C31924 * C31803;
    const double C131 = (-(bs[1] * C31803 * C31791) / C31790) / C31578;
    const double C31805 = C31800 * C31802;
    const double C31814 = C31811 * C31802;
    const double C31836 = C31832 * C31802;
    const double C31876 = C31868 * C31802;
    const double C31936 = C31924 * C31802;
    const double C130 = (-(bs[1] * C31802 * C31791) / C31790) / C31578;
    const double C31813 = C31799 * C31811;
    const double C31835 = C31799 * C31832;
    const double C31875 = C31799 * C31868;
    const double C31935 = C31799 * C31924;
    const double C32830 = std::pow(C32796, -2);
    const double C32828 = std::pow(C32796, -1);
    const double C32522 = C32521 * C32519;
    const double C32534 = C32533 * C32519;
    const double C32548 = C32547 * C32519;
    const double C32578 = C32577 * C31581;
    const double C32799 = std::pow(C32630, 2);
    const double C32590 = C32589 * C31581;
    const double C32801 = std::pow(C32670, 2);
    const double C31649 = C31576 * C31645;
    const double C31599 = C31580 / C31590;
    const double C31596 = C31579 / C31590;
    const double C31595 = C31577 / C31590;
    const double C31650 = C31645 / C31636;
    const double C31648 = C31644 / C31636;
    const double C32793 = 4 * C31636;
    const double C31684 = C31578 * C31682;
    const double C31597 = 0 - C31592;
    const double C31594 = 0 - C31591;
    const double C32486 = C32485 / C31578;
    const double C31796 = std::pow(C31793, 2);
    const double C31801 = -C31793;
    const double C31812 = std::pow(C31793, 4);
    const double C31869 = std::pow(C31793, 6);
    const double C32523 = C32522 / C32520;
    const double C32535 = C32534 / C32520;
    const double C32549 = C32548 / C32520;
    const double C32579 = C32578 / C31578;
    const double C32591 = C32590 / C31578;
    const double C31653 = C31649 / C31583;
    const double C31602 = C31597 * ae;
    const double C31601 = C31594 * ae;
    const double C32487 = -C32486;
    const double C31798 = C31794 * C31796;
    const double C145 = (ae * C31796 * C31794 * C31795 * be +
                         be * C31796 * C31794 * C31795 * ae +
                         C31795 *
                             (C31794 * C31796 + std::pow(C31795, 2) * bs[3] *
                                                    std::pow(-C31793, 3)) *
                             C31581) /
                        C31583;
    const double C132 = (C31795 * C31796 * C31794 * C31802) / C31578 -
                        (be * bs[1] * C31791) / (C31790 * C31578);
    const double C133 = (C31795 * C31796 * C31794 * C31803) / C31578 -
                        (ae * bs[1] * C31791) / (C31790 * C31578);
    const double C235 = (C31989 * C31796 * C31794 * C31802) / C31578;
    const double C236 = (C31989 * C31796 * C31794 * C31803) / C31578;
    const double C340 = (C32023 * C31796 * C31794 * C31802) / C31578;
    const double C341 = (C32023 * C31796 * C31794 * C31803) / C31578;
    const double C31804 = std::pow(C31801, 3);
    const double C31833 = std::pow(C31801, 5);
    const double C31925 = std::pow(C31801, 7);
    const double C31821 = C31812 * C31817;
    const double C31820 = C31812 * C31814;
    const double C31819 = C31813 * C31812;
    const double C31831 = C31811 * C31812;
    const double C31887 = C31869 * C31880;
    const double C31884 = C31869 * C31876;
    const double C31883 = C31875 * C31869;
    const double C31923 = C31868 * C31869;
    const double C32524 = -C32523;
    const double C32536 = -C32535;
    const double C32550 = -C32549;
    const double C32580 = -C32579;
    const double C32592 = -C32591;
    const double C31606 = C31602 / C31578;
    const double C31605 = C31601 / C31578;
    const double C32488 = std::exp(C32487);
    const double C125 = C31798 * C31799 - (bs[1] * C31791) / C31790;
    const double C220 = C31989 * C31795 * C31798;
    const double C222 = C31798 * C32005 - (bs[1] * C31791) / C31790;
    const double C325 = C32023 * C31795 * C31798;
    const double C327 = C31798 * C32039 - (bs[1] * C31791) / C31790;
    const double C622 = C32023 * C31989 * C31798;
    const double C31808 = C31804 * C31806;
    const double C31807 = C31804 * C31805;
    const double C31810 = C31800 * C31804;
    const double C251 =
        (C31989 * (C31798 + C31799 * C31800 * C31804) * C31581) / C31583;
    const double C356 =
        (C32023 * (C31798 + C31799 * C31800 * C31804) * C31581) / C31583;
    const double C31846 = C31833 * C31840;
    const double C31843 = C31833 * C31836;
    const double C31842 = C31835 * C31833;
    const double C31867 = C31832 * C31833;
    const double C31948 = C31925 * C31940;
    const double C31945 = C31925 * C31936;
    const double C31944 = C31935 * C31925;
    const double C31824 = C31795 * C31821;
    const double C31830 = be * C31821;
    const double C32290 = C31989 * C31821;
    const double C31823 = C31795 * C31820;
    const double C31829 = ae * C31820;
    const double C32288 = C31989 * C31820;
    const double C31841 = C31831 * ae;
    const double C31839 = C31831 * C31799;
    const double C31838 = C31795 * C31831;
    const double C31837 = C31831 * be;
    const double C32438 = C31831 * C32005;
    const double C32441 = C31989 * C31831;
    const double C32462 = C31831 * C32039;
    const double C32465 = C32023 * C31831;
    const double C31893 = C31795 * C31887;
    const double C31922 = be * C31887;
    const double C32012 = C31887 * C32005;
    const double C32046 = C31887 * C32039;
    const double C32060 = C31989 * C31887;
    const double C32077 = C32023 * C31887;
    const double C31890 = C31795 * C31884;
    const double C31921 = ae * C31884;
    const double C32011 = C31884 * C32005;
    const double C32045 = C31884 * C32039;
    const double C32059 = C31989 * C31884;
    const double C32076 = C32023 * C31884;
    const double C31941 = C31923 * ae;
    const double C31939 = C31923 * C31799;
    const double C31938 = C31795 * C31923;
    const double C31937 = C31923 * be;
    const double C32525 = std::exp(C32524);
    const double C32537 = std::exp(C32536);
    const double C32551 = std::exp(C32550);
    const double C32581 = std::exp(C32580);
    const double C32593 = std::exp(C32592);
    const double C31610 = C31606 - C31596;
    const double C31609 = C31605 - C31595;
    const double C31593 = C31588 * C32488;
    const double C32490 = C32488 * C32483;
    const double C32489 = C32488 / C31584;
    const double C32498 = C32496 * C32488;
    const double C32786 = C32488 * C32484;
    const double C32826 = C32790 * C32488;
    const double C32820 = C32488 * C32783;
    const double C135 =
        (C31796 * C31794 * C31803 + C31795 * (C31795 * C31808 + C31798 * ae) +
         C31795 * C31798 * ae) /
        C31578;
    const double C234 = (C31989 * (C31795 * C31808 + C31798 * ae)) / C31578;
    const double C238 = (C31796 * C31794 * C31803 + C31808 * C32005) / C31578;
    const double C339 = (C32023 * (C31795 * C31808 + C31798 * ae)) / C31578;
    const double C343 = (C31796 * C31794 * C31803 + C31808 * C32039) / C31578;
    const double C628 = (C32023 * C31989 * C31808) / C31578;
    const double C885 =
        (2 * C31989 * C31808 + C31989 * (C31808 + C31821 * C32005)) / C31578;
    const double C1088 = (C32023 * (C31808 + C31821 * C32005)) / C31578;
    const double C1090 = (C31989 * C31808 + C31989 * C31821 * C32039) / C31578;
    const double C1996 =
        (2 * C32023 * C31808 + C32023 * (C31808 + C31821 * C32039)) / C31578;
    const double C146 =
        ((C31798 + C31799 * C31800 * C31804) * C31581 +
         ae * (C31795 * C31807 + C31798 * be) +
         be * (C31795 * C31808 + C31798 * ae) +
         C31795 *
             (ae * C31807 + be * C31808 +
              C31795 *
                  (C31800 * C31804 + C31799 * bs[4] * std::pow(C31793, 4)) *
                  C31581)) /
        C31583;
    const double C134 =
        (C31796 * C31794 * C31802 + C31795 * (C31795 * C31807 + C31798 * be) +
         C31795 * C31798 * be) /
        C31578;
    const double C233 = (C31989 * (C31795 * C31807 + C31798 * be)) / C31578;
    const double C237 = (C31796 * C31794 * C31802 + C31807 * C32005) / C31578;
    const double C338 = (C32023 * (C31795 * C31807 + C31798 * be)) / C31578;
    const double C342 = (C31796 * C31794 * C31802 + C31807 * C32039) / C31578;
    const double C627 = (C32023 * C31989 * C31807) / C31578;
    const double C884 =
        (2 * C31989 * C31807 + C31989 * (C31807 + C31820 * C32005)) / C31578;
    const double C1087 = (C32023 * (C31807 + C31820 * C32005)) / C31578;
    const double C1089 = (C31989 * C31807 + C31989 * C31820 * C32039) / C31578;
    const double C1995 =
        (2 * C32023 * C31807 + C32023 * (C31807 + C31820 * C32039)) / C31578;
    const double C31818 = C31810 * ae;
    const double C31816 = C31795 * C31810;
    const double C31815 = C31810 * be;
    const double C31822 = C31810 + C31819;
    const double C32432 = C31989 * C31810;
    const double C126 =
        2 * C31795 * C31798 + C31795 * (C31798 + C31810 * C31799);
    const double C219 = C31989 * (C31798 + C31810 * C31799);
    const double C324 = C32023 * (C31798 + C31810 * C31799);
    const double C876 =
        2 * C31989 * C31798 + C31989 * (C31798 + C31810 * C32005);
    const double C877 =
        3 * (C31798 + C31810 * C32005) +
        C31989 * (2 * C31989 * C31810 + C31989 * (C31810 + C31831 * C32005));
    const double C1076 = C32023 * (C31798 + C31810 * C32005);
    const double C1077 = C31989 * C31798 + C31989 * C31810 * C32039;
    const double C1080 =
        C31798 + C31810 * C32005 + (C31810 + C31831 * C32005) * C32039;
    const double C1598 =
        C32023 * (2 * C31989 * C31810 + C31989 * (C31810 + C31831 * C32005));
    const double C1987 =
        2 * C32023 * C31798 + C32023 * (C31798 + C31810 * C32039);
    const double C1988 =
        3 * (C31798 + C31810 * C32039) +
        C32023 * (2 * C32023 * C31810 + C32023 * (C31810 + C31831 * C32039));
    const double C6294 = C32488 * C251;
    const double C7104 = C32488 * C356;
    const double C31850 = C31795 * C31846;
    const double C31866 = be * C31846;
    const double C31991 = C31989 * C31846;
    const double C32025 = C32023 * C31846;
    const double C32303 = C31846 * C32005;
    const double C32345 = C31846 * C32039;
    const double C887 =
        (3 * (C31808 + C31821 * C32005) +
         C31989 * (2 * C31989 * C31821 + C31989 * (C31821 + C31846 * C32005))) /
        C31578;
    const double C1096 =
        (C31808 + C31821 * C32005 + (C31821 + C31846 * C32005) * C32039) /
        C31578;
    const double C1602 =
        (C32023 * (2 * C31989 * C31821 + C31989 * (C31821 + C31846 * C32005))) /
        C31578;
    const double C1998 =
        (3 * (C31808 + C31821 * C32039) +
         C32023 * (2 * C32023 * C31821 + C32023 * (C31821 + C31846 * C32039))) /
        C31578;
    const double C31849 = C31795 * C31843;
    const double C31865 = ae * C31843;
    const double C31990 = C31989 * C31843;
    const double C32024 = C32023 * C31843;
    const double C32300 = C31843 * C32005;
    const double C32342 = C31843 * C32039;
    const double C886 =
        (3 * (C31807 + C31820 * C32005) +
         C31989 * (2 * C31989 * C31820 + C31989 * (C31820 + C31843 * C32005))) /
        C31578;
    const double C1095 =
        (C31807 + C31820 * C32005 + (C31820 + C31843 * C32005) * C32039) /
        C31578;
    const double C1601 =
        (C32023 * (2 * C31989 * C31820 + C31989 * (C31820 + C31843 * C32005))) /
        C31578;
    const double C1997 =
        (3 * (C31807 + C31820 * C32039) +
         C32023 * (2 * C32023 * C31820 + C32023 * (C31820 + C31843 * C32039))) /
        C31578;
    const double C31848 = C31831 + C31842;
    const double C31881 = C31867 * ae;
    const double C31879 = C31867 * C31799;
    const double C31878 = C31795 * C31867;
    const double C31877 = C31867 * be;
    const double C31889 = C31867 + C31883;
    const double C32442 = C31867 * C32005;
    const double C32466 = C31867 * C32039;
    const double C32477 = C31989 * C31867;
    const double C31954 = C31795 * C31948;
    const double C31951 = C31795 * C31945;
    const double C31950 = C31923 + C31944;
    const double C31834 = C31829 + C31830;
    const double C31845 = C31810 + C31839;
    const double C31847 = C31838 * ae;
    const double C31844 = C31838 * be;
    const double C31871 = 2 * C31838;
    const double C32434 = C31989 * C31838;
    const double C32439 = C31810 + C32438;
    const double C32443 = 2 * C32441;
    const double C32463 = C31810 + C32462;
    const double C32467 = 2 * C32465;
    const double C32015 = C31846 + C32012;
    const double C32049 = C31846 + C32046;
    const double C32065 = be * C32060;
    const double C32097 = C32023 * C32060;
    const double C32367 = C32060 * C32039;
    const double C32082 = be * C32077;
    const double C31934 = C31921 + C31922;
    const double C32014 = C31843 + C32011;
    const double C32048 = C31843 + C32045;
    const double C32064 = ae * C32059;
    const double C32096 = C32023 * C32059;
    const double C32364 = C32059 * C32039;
    const double C32081 = ae * C32076;
    const double C31947 = C31867 + C31939;
    const double C31949 = C31938 * ae;
    const double C31946 = C31938 * be;
    const double C32829 = C32525 * C32794;
    const double C110 =
        (C32525 * std::pow(C32794, 2)) / C32795 + C32525 / C32796;
    const double C112 = C32830 * C32525;
    const double C447 = C32828 * C32525;
    const double C32831 = C32537 * C32797;
    const double C213 =
        (C32537 * std::pow(C32797, 2)) / C32795 + C32537 / C32796;
    const double C215 = C32830 * C32537;
    const double C445 = C32828 * C32537;
    const double C32832 = C32551 * C32798;
    const double C319 =
        (C32551 * std::pow(C32798, 2)) / C32795 + C32551 / C32796;
    const double C321 = C32830 * C32551;
    const double C535 = C32828 * C32551;
    const double C32631 = C32581 / C31584;
    const double C32633 = C32581 * C32630;
    const double C32640 = C32496 * C32581;
    const double C32806 = C32581 * C32632;
    const double C32835 = C32790 * C32581;
    const double C32833 = C32581 * C32799;
    const double C32671 = C32593 / C31584;
    const double C32673 = C32593 * C32670;
    const double C32680 = C32496 * C32593;
    const double C32813 = C32593 * C32672;
    const double C32838 = C32790 * C32593;
    const double C32836 = C32593 * C32801;
    const double C31615 = C31610 / C31584;
    const double C31614 = C31576 * C31610;
    const double C31639 = 2 * C31610;
    const double C31613 = C31609 + C31586;
    const double C31600 = C31593 / C31583;
    const double C31598 = 2 * C31593;
    const double C31640 = -4 * C31593;
    const double C32491 = C32490 * C32484;
    const double C32497 = C32490 / C31590;
    const double C32787 = C32496 * C32490;
    const double C32785 = C32490 / C31578;
    const double C752 = (C32488 * std::pow(C32484, 2)) / C31583 + C32489;
    const double C32499 = C32498 * C32484;
    const double C32803 = C32498 / C31682;
    const double C32791 = C32483 * C32498;
    const double C32789 = 2 * C32498;
    const double C105 = C32498 / C32793;
    const double C17925 = C32498 / C31584;
    const double C32822 = C32786 / C31578;
    const double C753 = (-2 * C32496 * C32786) / C31578;
    const double C32849 = C32820 / C31583;
    const double C31827 = C31824 + C31818;
    const double C223 = C31795 * C31798 + C31816 * C32005;
    const double C328 = C31795 * C31798 + C31816 * C32039;
    const double C623 = C32023 * C31989 * C31816;
    const double C875 =
        2 * C31989 * C31816 + C31989 * (C31816 + C31838 * C32005);
    const double C1075 = C32023 * (C31816 + C31838 * C32005);
    const double C1078 = C31989 * C31816 + C31989 * C31838 * C32039;
    const double C1986 =
        2 * C32023 * C31816 + C32023 * (C31816 + C31838 * C32039);
    const double C31826 = C31823 + C31815;
    const double C31825 = C31822 * C31581;
    const double C2562 =
        2 * C32023 * C32432 + C32023 * (C32432 + C31989 * C31831 * C32039);
    const double C7089 =
        3 * (C32432 + C32441 * C32039) +
        C32023 * (2 * C32023 * C32441 +
                  C32023 * (C32441 + C31989 * C31867 * C32039));
    const double C31853 = C31850 + C31841;
    const double C31994 = be * C31991;
    const double C32310 = 2 * C31991;
    const double C2566 =
        (2 * C32023 * C32290 + C32023 * (C32290 + C31991 * C32039)) / C31578;
    const double C7094 =
        (3 * (C32290 + C31991 * C32039) +
         C32023 * (2 * C32023 * C31991 + C32023 * (C31991 + C32060 * C32039))) /
        C31578;
    const double C32028 = be * C32025;
    const double C32352 = 2 * C32025;
    const double C32304 = C31821 + C32303;
    const double C32346 = C31821 + C32345;
    const double C31852 = C31849 + C31837;
    const double C31874 = C31865 + C31866;
    const double C31993 = ae * C31990;
    const double C32306 = 2 * C31990;
    const double C2565 =
        (2 * C32023 * C32288 + C32023 * (C32288 + C31990 * C32039)) / C31578;
    const double C7093 =
        (3 * (C32288 + C31990 * C32039) +
         C32023 * (2 * C32023 * C31990 + C32023 * (C31990 + C32059 * C32039))) /
        C31578;
    const double C32027 = ae * C32024;
    const double C32348 = 2 * C32024;
    const double C32301 = C31820 + C32300;
    const double C32343 = C31820 + C32342;
    const double C31851 = C31848 * C31581;
    const double C31898 = C31893 + C31881;
    const double C31886 = C31831 + C31879;
    const double C31888 = C31878 * ae;
    const double C31885 = C31878 * be;
    const double C31928 = 2 * C31878;
    const double C32451 = C31878 * C32005;
    const double C32472 = C31989 * C31878;
    const double C32474 = C31878 * C32039;
    const double C878 =
        3 * (C31816 + C31838 * C32005) +
        C31989 * (2 * C31989 * C31838 + C31989 * (C31838 + C31878 * C32005));
    const double C1081 =
        C31816 + C31838 * C32005 + (C31838 + C31878 * C32005) * C32039;
    const double C1599 =
        C32023 * (2 * C31989 * C31838 + C31989 * (C31838 + C31878 * C32005));
    const double C1989 =
        3 * (C31816 + C31838 * C32039) +
        C32023 * (2 * C32023 * C31838 + C32023 * (C31838 + C31878 * C32039));
    const double C31896 = C31890 + C31877;
    const double C31895 = C31889 * C31581;
    const double C32444 = C31831 + C32442;
    const double C32468 = C31831 + C32466;
    const double C32478 = C32477 * C32039;
    const double C31959 = C31954 + C31941;
    const double C31957 = C31951 + C31937;
    const double C31956 = C31950 * C31581;
    const double C127 = 3 * (C31798 + C31810 * C31799) +
                        C31795 * (2 * C31816 + C31795 * C31845);
    const double C218 = C31989 * (2 * C31816 + C31795 * C31845);
    const double C224 = C31798 + C31810 * C31799 + C31845 * C32005;
    const double C323 = C32023 * (2 * C31816 + C31795 * C31845);
    const double C329 = C31798 + C31810 * C31799 + C31845 * C32039;
    const double C624 = C32023 * C31989 * C31845;
    const double C2563 =
        2 * C32023 * C32434 + C32023 * (C32434 + C31989 * C31878 * C32039);
    const double C6282 =
        4 * (2 * C32432 + C31989 * C32439) +
        C31989 * (3 * C32439 + C31989 * (2 * C31989 * C31831 +
                                         C31989 * (C31831 + C31867 * C32005)));
    const double C12196 =
        4 * (2 * C32023 * C31810 + C32023 * C32463) +
        C32023 * (3 * C32463 + C32023 * (2 * C32023 * C31831 +
                                         C32023 * (C31831 + C31867 * C32039)));
    const double C32018 = be * C32015;
    const double C32311 = C31989 * C32015;
    const double C32052 = be * C32049;
    const double C32353 = C32023 * C32049;
    const double C32100 = be * C32097;
    const double C32368 = C31991 + C32367;
    const double C32017 = ae * C32014;
    const double C32307 = C31989 * C32014;
    const double C32051 = ae * C32048;
    const double C32349 = C32023 * C32048;
    const double C32068 = C32064 + C32065;
    const double C32099 = ae * C32096;
    const double C32365 = C31990 + C32364;
    const double C32085 = C32081 + C32082;
    const double C31955 = C31947 * ae;
    const double C31953 = C31795 * C31947;
    const double C31952 = C31947 * be;
    const double C111 = (2 * C32828 * C32829) / C32520;
    const double C446 = C32829 / C32520;
    const double C214 = (2 * C32828 * C32831) / C32520;
    const double C444 = C32831 / C32520;
    const double C320 = (2 * C32828 * C32832) / C32520;
    const double C534 = C32832 / C32520;
    const double C5333 = (C32581 * std::pow(C32632, 2)) / C31583 + C32631;
    const double C32634 = C32633 * C32632;
    const double C32639 = C32633 / C31590;
    const double C32804 = C32633 / C31578;
    const double C32800 = C32496 * C32633;
    const double C32641 = C32640 * C32632;
    const double C32812 = C32640 / C31682;
    const double C32810 = C32630 * C32640;
    const double C32809 = 2 * C32640;
    const double C6217 = C32640 / C32793;
    const double C17928 = C32640 / C31584;
    const double C32840 = C32806 / C31578;
    const double C5334 = (-2 * C32496 * C32806) / C31578;
    const double C32854 = C32833 / C31583;
    const double C10425 = (C32593 * std::pow(C32672, 2)) / C31583 + C32671;
    const double C32674 = C32673 * C32672;
    const double C32679 = C32673 / C31590;
    const double C32805 = C32673 / C31578;
    const double C32802 = C32496 * C32673;
    const double C32681 = C32680 * C32672;
    const double C32819 = C32680 / C31682;
    const double C32817 = C32670 * C32680;
    const double C32816 = 2 * C32680;
    const double C12071 = C32680 / C32793;
    const double C24553 = C32680 / C31584;
    const double C32845 = C32813 / C31578;
    const double C10426 = (-2 * C32496 * C32813) / C31578;
    const double C32856 = C32836 / C31583;
    const double C31619 = C31614 + 0;
    const double C31656 = C31653 + C31639;
    const double C31618 = C31613 / C31584;
    const double C31604 = C31589 - C31600;
    const double C31603 = C31576 * C31598;
    const double C762 =
        ((-C31598 / C31578) / C31584 - (0 * be) / C31578) / C31584 -
        (0 * be) / C31578;
    const double C6218 = -C31598 / C31578;
    const double C15916 = (-C31598 / C31578) / C31584 - (0 * be) / C31578;
    const double C31646 = C31640 / C31578;
    const double C32492 = C32491 / C31583;
    const double C32823 = 2 * C32787;
    const double C7849 = C32785 * C251;
    const double C8923 = C32785 * C356;
    const double C902 = C752 * C251;
    const double C2013 = C752 * C356;
    const double C32500 = C32499 / C31578;
    const double C32827 = C32791 / C31590;
    const double C32850 = C32785 - C32822;
    const double C15908 = -C32822;
    const double C32864 = C32849 + C32489;
    const double C137 = (2 * (C31795 * C31808 + C31798 * ae) +
                         C31795 * (C31808 + C31795 * C31827 + C31816 * ae) +
                         (C31798 + C31810 * C31799) * ae) /
                        C31578;
    const double C232 =
        (C31989 * (C31808 + C31795 * C31827 + C31816 * ae)) / C31578;
    const double C240 =
        (C31795 * C31808 + C31798 * ae + C31827 * C32005) / C31578;
    const double C337 =
        (C32023 * (C31808 + C31795 * C31827 + C31816 * ae)) / C31578;
    const double C345 =
        (C31795 * C31808 + C31798 * ae + C31827 * C32039) / C31578;
    const double C630 = (C32023 * C31989 * C31827) / C31578;
    const double C136 = (2 * (C31795 * C31807 + C31798 * be) +
                         C31795 * (C31807 + C31795 * C31826 + C31816 * be) +
                         (C31798 + C31810 * C31799) * be) /
                        C31578;
    const double C231 =
        (C31989 * (C31807 + C31795 * C31826 + C31816 * be)) / C31578;
    const double C239 =
        (C31795 * C31807 + C31798 * be + C31826 * C32005) / C31578;
    const double C336 =
        (C32023 * (C31807 + C31795 * C31826 + C31816 * be)) / C31578;
    const double C344 =
        (C31795 * C31807 + C31798 * be + C31826 * C32039) / C31578;
    const double C629 = (C32023 * C31989 * C31826) / C31578;
    const double C147 =
        (2 * (ae * C31807 + be * C31808 + C31795 * C31825) +
         ae * (C31807 + C31795 * C31826 + C31816 * be) +
         be * (C31808 + C31795 * C31827 + C31816 * ae) +
         C31795 * (C31825 + ae * C31826 + be * C31827 +
                   C31795 * (ae * C31820 + be * C31821 +
                             C31795 *
                                 (C31811 * C31812 +
                                  C31799 * bs[5] * std::pow(C31801, 5)) *
                                 C31581))) /
        C31583;
    const double C250 = (ae * C31989 * C31807 + be * C31989 * C31808 +
                         C31795 * C31989 * C31825) /
                        C31583;
    const double C252 = ((C31798 + C31799 * C31800 * C31804) * C31581 +
                         C31825 * std::pow(C31989, 2)) /
                        C31583;
    const double C355 = (ae * C32023 * C31807 + be * C32023 * C31808 +
                         C31795 * C32023 * C31825) /
                        C31583;
    const double C357 = ((C31798 + C31799 * C31800 * C31804) * C31581 +
                         C31825 * std::pow(C32023, 2)) /
                        C31583;
    const double C637 = (C32023 * C31989 * C31825) / C31583;
    const double C31856 = C31795 * C31853;
    const double C31872 = 2 * C31853;
    const double C31864 = be * C31853;
    const double C32294 = C31989 * C31853;
    const double C883 =
        (2 * C31989 * C31827 + C31989 * (C31827 + C31853 * C32005)) / C31578;
    const double C1086 = (C32023 * (C31827 + C31853 * C32005)) / C31578;
    const double C1092 = (C31989 * C31827 + C31989 * C31853 * C32039) / C31578;
    const double C1994 =
        (2 * C32023 * C31827 + C32023 * (C31827 + C31853 * C32039)) / C31578;
    const double C6285 =
        (4 * (2 * C32290 + C31989 * C32304) +
         C31989 * (3 * C32304 + C31989 * (2 * C31991 + C31989 * C32015))) /
        C31578;
    const double C7092 =
        (2 * C32023 * C32304 + C32023 * (C32304 + C32015 * C32039)) / C31578;
    const double C7096 =
        (3 * (C32304 + C32015 * C32039) +
         C32023 * (2 * C32023 * C32015 +
                   C32023 * (C32015 + (C31887 + C31948 * C32005) * C32039))) /
        C31578;
    const double C12199 =
        (4 * (2 * C32023 * C31821 + C32023 * C32346) +
         C32023 * (3 * C32346 + C32023 * (2 * C32025 + C32023 * C32049))) /
        C31578;
    const double C31855 = C31795 * C31852;
    const double C31870 = 2 * C31852;
    const double C31863 = ae * C31852;
    const double C32292 = C31989 * C31852;
    const double C882 =
        (2 * C31989 * C31826 + C31989 * (C31826 + C31852 * C32005)) / C31578;
    const double C1085 = (C32023 * (C31826 + C31852 * C32005)) / C31578;
    const double C1091 = (C31989 * C31826 + C31989 * C31852 * C32039) / C31578;
    const double C1993 =
        (2 * C32023 * C31826 + C32023 * (C31826 + C31852 * C32039)) / C31578;
    const double C31996 = C31993 + C31994;
    const double C32030 = C32027 + C32028;
    const double C6284 =
        (4 * (2 * C32288 + C31989 * C32301) +
         C31989 * (3 * C32301 + C31989 * (2 * C31990 + C31989 * C32014))) /
        C31578;
    const double C7091 =
        (2 * C32023 * C32301 + C32023 * (C32301 + C32014 * C32039)) / C31578;
    const double C7095 =
        (3 * (C32301 + C32014 * C32039) +
         C32023 * (2 * C32023 * C32014 +
                   C32023 * (C32014 + (C31884 + C31945 * C32005) * C32039))) /
        C31578;
    const double C12198 =
        (4 * (2 * C32023 * C31820 + C32023 * C32343) +
         C32023 * (3 * C32343 + C32023 * (2 * C32024 + C32023 * C32048))) /
        C31578;
    const double C31854 = C31795 * C31851;
    const double C31999 = C31989 * C31851;
    const double C32033 = C32023 * C31851;
    const double C253 =
        (ae * (C31807 + C31820 * C32005) + be * (C31808 + C31821 * C32005) +
         C31795 * (C31825 + C31851 * C32005)) /
        C31583;
    const double C358 =
        (ae * (C31807 + C31820 * C32039) + be * (C31808 + C31821 * C32039) +
         C31795 * (C31825 + C31851 * C32039)) /
        C31583;
    const double C894 =
        (2 * C31989 * C31825 + C31989 * (C31825 + C31851 * C32005)) / C31583;
    const double C1103 = (C32023 * (C31825 + C31851 * C32005)) / C31583;
    const double C2005 =
        (2 * C32023 * C31825 + C32023 * (C31825 + C31851 * C32039)) / C31583;
    const double C31901 = C31795 * C31898;
    const double C31931 = 2 * C31898;
    const double C31920 = be * C31898;
    const double C32058 = C31989 * C31898;
    const double C32075 = C32023 * C31898;
    const double C32323 = C31898 * C32005;
    const double C32361 = C31898 * C32039;
    const double C889 =
        (3 * (C31827 + C31853 * C32005) +
         C31989 * (2 * C31989 * C31853 + C31989 * (C31853 + C31898 * C32005))) /
        C31578;
    const double C1098 =
        (C31827 + C31853 * C32005 + (C31853 + C31898 * C32005) * C32039) /
        C31578;
    const double C1604 =
        (C32023 * (2 * C31989 * C31853 + C31989 * (C31853 + C31898 * C32005))) /
        C31578;
    const double C2000 =
        (3 * (C31827 + C31853 * C32039) +
         C32023 * (2 * C32023 * C31853 + C32023 * (C31853 + C31898 * C32039))) /
        C31578;
    const double C31894 = C31886 * ae;
    const double C31892 = C31795 * C31886;
    const double C31891 = C31886 * be;
    const double C31929 = 3 * C31886;
    const double C32436 = C31989 * C31886;
    const double C874 =
        2 * C31989 * C31845 + C31989 * (C31845 + C31886 * C32005);
    const double C879 =
        3 * (C31845 + C31886 * C32005) +
        C31989 * (2 * C31989 * C31886 + C31989 * (C31886 + C31947 * C32005));
    const double C1074 = C32023 * (C31845 + C31886 * C32005);
    const double C1079 = C31989 * C31845 + C31989 * C31886 * C32039;
    const double C1082 =
        C31845 + C31886 * C32005 + (C31886 + C31947 * C32005) * C32039;
    const double C1600 =
        C32023 * (2 * C31989 * C31886 + C31989 * (C31886 + C31947 * C32005));
    const double C1985 =
        2 * C32023 * C31845 + C32023 * (C31845 + C31886 * C32039);
    const double C1990 =
        3 * (C31845 + C31886 * C32039) +
        C32023 * (2 * C32023 * C31886 + C32023 * (C31886 + C31947 * C32039));
    const double C32452 = C31838 + C32451;
    const double C12300 =
        3 * (C32434 + C32472 * C32039) +
        C32023 * (2 * C32023 * C32472 +
                  C32023 * (C32472 + C31989 * C31938 * C32039));
    const double C32475 = C31838 + C32474;
    const double C31900 = C31795 * C31896;
    const double C31927 = 2 * C31896;
    const double C31919 = ae * C31896;
    const double C32057 = C31989 * C31896;
    const double C32074 = C32023 * C31896;
    const double C32320 = C31896 * C32005;
    const double C32358 = C31896 * C32039;
    const double C888 =
        (3 * (C31826 + C31852 * C32005) +
         C31989 * (2 * C31989 * C31852 + C31989 * (C31852 + C31896 * C32005))) /
        C31578;
    const double C1097 =
        (C31826 + C31852 * C32005 + (C31852 + C31896 * C32005) * C32039) /
        C31578;
    const double C1603 =
        (C32023 * (2 * C31989 * C31852 + C31989 * (C31852 + C31896 * C32005))) /
        C31578;
    const double C1999 =
        (3 * (C31826 + C31852 * C32039) +
         C32023 * (2 * C32023 * C31852 + C32023 * (C31852 + C31896 * C32039))) /
        C31578;
    const double C31899 = C31795 * C31895;
    const double C31992 = C31989 * C31895;
    const double C32008 = C31895 * C32005;
    const double C32026 = C32023 * C31895;
    const double C32042 = C31895 * C32039;
    const double C254 =
        (C31825 + C31851 * C32005 + ae * (C31826 + C31852 * C32005) +
         be * (C31827 + C31853 * C32005) +
         C31795 * (ae * (C31820 + C31843 * C32005) +
                   be * (C31821 + C31846 * C32005) +
                   C31795 * (C31851 + C31895 * C32005))) /
        C31583;
    const double C359 =
        (C31825 + C31851 * C32039 + ae * (C31826 + C31852 * C32039) +
         be * (C31827 + C31853 * C32039) +
         C31795 * (ae * (C31820 + C31843 * C32039) +
                   be * (C31821 + C31846 * C32039) +
                   C31795 * (C31851 + C31895 * C32039))) /
        C31583;
    const double C32445 = C31989 * C32444;
    const double C7088 =
        2 * C32023 * C32439 + C32023 * (C32439 + C32444 * C32039);
    const double C7090 =
        3 * (C32439 + C32444 * C32039) +
        C32023 * (2 * C32023 * C32444 +
                  C32023 * (C32444 + (C31867 + C31923 * C32005) * C32039));
    const double C32469 = C32023 * C32468;
    const double C32479 = C32441 + C32478;
    const double C31964 = C31795 * C31959;
    const double C31961 = C31795 * C31957;
    const double C31960 = C31795 * C31956;
    const double C32013 = C31956 * C32005;
    const double C32047 = C31956 * C32039;
    const double C32061 = C31989 * C31956;
    const double C32078 = C32023 * C31956;
    const double C32312 = C32310 + C32311;
    const double C32354 = C32352 + C32353;
    const double C12488 =
        (4 * (2 * C32023 * C31991 + C32023 * C32368) +
         C32023 * (3 * C32368 +
                   C32023 * (2 * C32097 +
                             C32023 * (C32060 + C31989 * C31948 * C32039)))) /
        C31578;
    const double C32020 = C32017 + C32018;
    const double C32308 = C32306 + C32307;
    const double C32054 = C32051 + C32052;
    const double C32350 = C32348 + C32349;
    const double C32102 = C32099 + C32100;
    const double C12487 =
        (4 * (2 * C32023 * C31990 + C32023 * C32365) +
         C32023 * (3 * C32365 +
                   C32023 * (2 * C32096 +
                             C32023 * (C32059 + C31989 * C31945 * C32039)))) /
        C31578;
    const double C31958 = C31928 + C31953;
    const double C32635 = C32634 / C31583;
    const double C32834 = 2 * C32800;
    const double C32642 = C32641 / C31578;
    const double C32843 = C32810 / C31590;
    const double C32858 = C32804 - C32840;
    const double C15102 = -C32840;
    const double C32867 = C32854 + C32631;
    const double C32675 = C32674 / C31583;
    const double C32837 = 2 * C32802;
    const double C32682 = C32681 / C31578;
    const double C32848 = C32817 / C31590;
    const double C32861 = C32805 - C32845;
    const double C21009 = -C32845;
    const double C32868 = C32856 + C32671;
    const double C31622 = C31619 * be;
    const double C31659 = C31656 * be;
    const double C7852 = C31604 * C234;
    const double C7850 = C31604 * C233;
    const double C8926 = C31604 * C339;
    const double C8924 = C31604 * C338;
    const double C31608 = C31576 * C31604;
    const double C31643 = 2 * C31604;
    const double C31676 = C31604 / C31584;
    const double C31607 = C31603 / C31578;
    const double C6305 = C6218 * C887;
    const double C6303 = C6218 * C886;
    const double C6301 = C6218 * C885;
    const double C6299 = C6218 * C884;
    const double C6297 = C6218 * C238;
    const double C6295 = C6218 * C237;
    const double C6293 = C6218 * C236;
    const double C6291 = C6218 * C235;
    const double C6493 = C6218 * C234;
    const double C6491 = C6218 * C233;
    const double C6709 = C6218 * C628;
    const double C6707 = C6218 * C627;
    const double C6705 = C6218 * C1088;
    const double C6703 = C6218 * C1087;
    const double C6701 = C6218 * C1602;
    const double C6699 = C6218 * C1601;
    const double C6957 = C6218 * C1096;
    const double C6955 = C6218 * C1095;
    const double C6951 = C6218 * C1090;
    const double C6949 = C6218 * C1089;
    const double C7119 = C6218 * C1996;
    const double C7117 = C6218 * C1995;
    const double C7115 = C6218 * C2566;
    const double C7113 = C6218 * C2565;
    const double C7107 = C6218 * C343;
    const double C7105 = C6218 * C342;
    const double C7103 = C6218 * C341;
    const double C7101 = C6218 * C340;
    const double C7472 = C6218 * C339;
    const double C7470 = C6218 * C338;
    const double C12207 = C6218 * C1998;
    const double C12205 = C6218 * C1997;
    const double C12493 = C6218 * C7094;
    const double C12491 = C6218 * C7093;
    const double C16023 = C15916 * C234;
    const double C16021 = C15916 * C233;
    const double C17121 = C15916 * C339;
    const double C17119 = C15916 * C338;
    const double C32493 = C32489 - C32492;
    const double C32851 = C32823 / C31578;
    const double C32501 = C32497 - C32500;
    const double C32865 = C32850 / C31584;
    const double C16020 = C15908 * C251;
    const double C17118 = C15908 * C356;
    const double C5456 = C32864 * C251;
    const double C10652 = C32864 * C356;
    const double C909 = C762 * C232;
    const double C8140 = C31604 * C232;
    const double C16311 = C15916 * C232;
    const double C6497 = C6218 * C240;
    const double C7860 = C31604 * C240;
    const double C16031 = C15916 * C240;
    const double C2020 = C762 * C337;
    const double C9398 = C31604 * C337;
    const double C17595 = C15916 * C337;
    const double C7476 = C6218 * C345;
    const double C8946 = C31604 * C345;
    const double C17129 = C15916 * C345;
    const double C7289 = C6218 * C630;
    const double C8454 = C31604 * C630;
    const double C16625 = C15916 * C630;
    const double C907 = C762 * C231;
    const double C8138 = C31604 * C231;
    const double C16309 = C15916 * C231;
    const double C6495 = C6218 * C239;
    const double C7858 = C31604 * C239;
    const double C16029 = C15916 * C239;
    const double C2018 = C762 * C336;
    const double C9396 = C31604 * C336;
    const double C17593 = C15916 * C336;
    const double C7474 = C6218 * C344;
    const double C8944 = C31604 * C344;
    const double C17127 = C15916 * C344;
    const double C7287 = C6218 * C629;
    const double C8452 = C31604 * C629;
    const double C16623 = C15916 * C629;
    const double C906 = C753 * C250;
    const double C1264 = C752 * C250;
    const double C5778 = C32864 * C250;
    const double C6494 = C32488 * C250;
    const double C7853 = C32498 * C250;
    const double C8137 = C32785 * C250;
    const double C16024 = C32498 * C250;
    const double C16308 = C15908 * C250;
    const double C914 = C752 * C252;
    const double C5468 = C32864 * C252;
    const double C6298 = C32488 * C252;
    const double C7857 = C32785 * C252;
    const double C16028 = C15908 * C252;
    const double C2017 = C753 * C355;
    const double C2378 = C752 * C355;
    const double C7473 = C32488 * C355;
    const double C8927 = C32498 * C355;
    const double C9395 = C32785 * C355;
    const double C11009 = C32864 * C355;
    const double C17122 = C32498 * C355;
    const double C17592 = C15908 * C355;
    const double C2025 = C752 * C357;
    const double C7108 = C32488 * C357;
    const double C8951 = C32785 * C357;
    const double C10664 = C32864 * C357;
    const double C17126 = C15908 * C357;
    const double C1634 = C752 * C637;
    const double C6132 = C32864 * C637;
    const double C6710 = C32488 * C637;
    const double C8459 = C32785 * C637;
    const double C16630 = C15908 * C637;
    const double C31859 = C31821 + C31856;
    const double C6501 = C6218 * C883;
    const double C7868 = C31604 * C883;
    const double C16039 = C15916 * C883;
    const double C7298 = C6218 * C1086;
    const double C8446 = C31604 * C1086;
    const double C16617 = C15916 * C1086;
    const double C7293 = C6218 * C1092;
    const double C8938 = C31604 * C1092;
    const double C16947 = C15916 * C1092;
    const double C12393 = C6218 * C1994;
    const double C12948 = C31604 * C1994;
    const double C17142 = C15916 * C1994;
    const double C6309 = C6218 * C6285;
    const double C7111 = C6218 * C7092;
    const double C12211 = C6218 * C12199;
    const double C31858 = C31820 + C31855;
    const double C31873 = C31851 + C31863;
    const double C6499 = C6218 * C882;
    const double C7866 = C31604 * C882;
    const double C16037 = C15916 * C882;
    const double C7296 = C6218 * C1085;
    const double C8444 = C31604 * C1085;
    const double C16615 = C15916 * C1085;
    const double C7291 = C6218 * C1091;
    const double C8936 = C31604 * C1091;
    const double C16945 = C15916 * C1091;
    const double C12391 = C6218 * C1993;
    const double C12946 = C31604 * C1993;
    const double C17140 = C15916 * C1993;
    const double C6307 = C6218 * C6284;
    const double C7109 = C6218 * C7091;
    const double C12209 = C6218 * C12198;
    const double C31857 = C31834 + C31854;
    const double C249 =
        (C31989 * C31825 + ae * C31989 * C31826 + be * C31989 * C31827 +
         C31795 *
             (ae * C31989 * C31820 + be * C31989 * C31821 + C31795 * C31999)) /
        C31583;
    const double C638 =
        (ae * C32023 * C31989 * C31820 + be * C32023 * C31989 * C31821 +
         C31795 * C32023 * C31999) /
        C31583;
    const double C1104 = (C31989 * C31825 + C31999 * C32039) / C31583;
    const double C354 =
        (C32023 * C31825 + ae * C32023 * C31826 + be * C32023 * C31827 +
         C31795 *
             (ae * C32023 * C31820 + be * C32023 * C31821 + C31795 * C32033)) /
        C31583;
    const double C918 = C753 * C253;
    const double C1276 = C752 * C253;
    const double C5790 = C32864 * C253;
    const double C6498 = C32488 * C253;
    const double C7861 = C32498 * C253;
    const double C8145 = C32785 * C253;
    const double C16032 = C32498 * C253;
    const double C16316 = C15908 * C253;
    const double C2029 = C753 * C358;
    const double C2390 = C752 * C358;
    const double C7477 = C32488 * C358;
    const double C8947 = C32498 * C358;
    const double C11021 = C32864 * C358;
    const double C13371 = C32785 * C358;
    const double C17130 = C32498 * C358;
    const double C17600 = C15908 * C358;
    const double C934 = C752 * C894;
    const double C5488 = C32864 * C894;
    const double C6302 = C32488 * C894;
    const double C7865 = C32785 * C894;
    const double C16036 = C15908 * C894;
    const double C1622 = C752 * C1103;
    const double C6120 = C32864 * C1103;
    const double C6706 = C32488 * C1103;
    const double C8451 = C32785 * C1103;
    const double C16622 = C15908 * C1103;
    const double C2045 = C752 * C2005;
    const double C7120 = C32488 * C2005;
    const double C10684 = C32864 * C2005;
    const double C12953 = C32785 * C2005;
    const double C17147 = C15908 * C2005;
    const double C31904 = C31846 + C31901;
    const double C32063 = be * C32058;
    const double C2568 =
        (2 * C32023 * C32294 + C32023 * (C32294 + C32058 * C32039)) / C31578;
    const double C12302 =
        (3 * (C32294 + C32058 * C32039) +
         C32023 * (2 * C32023 * C32058 +
                   C32023 * (C32058 + C31989 * C31959 * C32039))) /
        C31578;
    const double C32080 = be * C32075;
    const double C32324 = C31853 + C32323;
    const double C32362 = C31853 + C32361;
    const double C6505 = C6218 * C889;
    const double C7872 = C31604 * C889;
    const double C16043 = C15916 * C889;
    const double C7302 = C6218 * C1098;
    const double C8930 = C31604 * C1098;
    const double C16951 = C15916 * C1098;
    const double C8438 = C31604 * C1604;
    const double C10044 = C6218 * C1604;
    const double C16609 = C15916 * C1604;
    const double C12397 = C6218 * C2000;
    const double C13878 = C31604 * C2000;
    const double C23006 = C15916 * C2000;
    const double C31897 = C31871 + C31892;
    const double C2564 =
        2 * C32023 * C32436 + C32023 * (C32436 + C31989 * C31947 * C32039);
    const double C6486 =
        4 * (2 * C32434 + C31989 * C32452) +
        C31989 * (3 * C32452 + C31989 * (2 * C31989 * C31878 +
                                         C31989 * (C31878 + C31938 * C32005)));
    const double C6604 =
        C32023 * (3 * C32452 + C31989 * (2 * C31989 * C31878 +
                                         C31989 * (C31878 + C31938 * C32005)));
    const double C7281 =
        2 * C32434 + C31989 * C32452 +
        (2 * C31989 * C31878 + C31989 * (C31878 + C31938 * C32005)) * C32039;
    const double C7465 =
        2 * C32023 * C32452 +
        C32023 * (C32452 + (C31878 + C31938 * C32005) * C32039);
    const double C12386 =
        4 * (2 * C32023 * C31838 + C32023 * C32475) +
        C32023 * (3 * C32475 + C32023 * (2 * C32023 * C31878 +
                                         C32023 * (C31878 + C31938 * C32039)));
    const double C31903 = C31843 + C31900;
    const double C31933 = C31895 + C31919;
    const double C32062 = ae * C32057;
    const double C2567 =
        (2 * C32023 * C32292 + C32023 * (C32292 + C32057 * C32039)) / C31578;
    const double C12301 =
        (3 * (C32292 + C32057 * C32039) +
         C32023 * (2 * C32023 * C32057 +
                   C32023 * (C32057 + C31989 * C31957 * C32039))) /
        C31578;
    const double C32079 = ae * C32074;
    const double C32321 = C31852 + C32320;
    const double C32359 = C31852 + C32358;
    const double C6503 = C6218 * C888;
    const double C7870 = C31604 * C888;
    const double C16041 = C15916 * C888;
    const double C7300 = C6218 * C1097;
    const double C8928 = C31604 * C1097;
    const double C16949 = C15916 * C1097;
    const double C8436 = C31604 * C1603;
    const double C10042 = C6218 * C1603;
    const double C16607 = C15916 * C1603;
    const double C12395 = C6218 * C1999;
    const double C13876 = C31604 * C1999;
    const double C23004 = C15916 * C1999;
    const double C31902 = C31874 + C31899;
    const double C31995 = C31795 * C31992;
    const double C32094 = C32023 * C31992;
    const double C32120 = 2 * C31992;
    const double C639 = (C32023 * C31999 + ae * C32023 * C31989 * C31852 +
                         be * C32023 * C31989 * C31853 +
                         C31795 * (ae * C32023 * C31990 + be * C32023 * C31991 +
                                   C31795 * C32023 * C31992)) /
                        C31583;
    const double C1105 = (ae * (C31989 * C31820 + C31990 * C32039) +
                          be * (C31989 * C31821 + C31991 * C32039) +
                          C31795 * (C31999 + C31992 * C32039)) /
                         C31583;
    const double C2571 =
        (2 * C32023 * C31999 + C32023 * (C31999 + C31992 * C32039)) / C31583;
    const double C32009 = C31851 + C32008;
    const double C32029 = C31795 * C32026;
    const double C32138 = 2 * C32026;
    const double C32043 = C31851 + C32042;
    const double C922 = C32826 * C254;
    const double C1280 = C753 * C254;
    const double C5476 = C32826 * C254;
    const double C8149 = C32498 * C254;
    const double C16320 = C32498 * C254;
    const double C18069 = C17925 * C254;
    const double C2033 = C32826 * C359;
    const double C2394 = C753 * C359;
    const double C10672 = C32826 * C359;
    const double C13375 = C32498 * C359;
    const double C17604 = C32498 * C359;
    const double C19209 = C17925 * C359;
    const double C32446 = C32443 + C32445;
    const double C32470 = C32467 + C32469;
    const double C12486 =
        4 * (2 * C32023 * C32441 + C32023 * C32479) +
        C32023 * (3 * C32479 +
                  C32023 * (2 * C32023 * C32477 +
                            C32023 * (C32477 + C31989 * C31923 * C32039)));
    const double C31969 = C31887 + C31964;
    const double C31967 = C31884 + C31961;
    const double C31966 = C31934 + C31960;
    const double C32016 = C31895 + C32013;
    const double C32050 = C31895 + C32047;
    const double C32066 = C31795 * C32061;
    const double C32098 = C32023 * C32061;
    const double C32135 = C32061 * C32039;
    const double C1106 =
        (C31999 + C31992 * C32039 + ae * (C31989 * C31852 + C32057 * C32039) +
         be * (C31989 * C31853 + C32058 * C32039) +
         C31795 * (ae * (C31990 + C32059 * C32039) +
                   be * (C31991 + C32060 * C32039) +
                   C31795 * (C31992 + C32061 * C32039))) /
        C31583;
    const double C32083 = C31795 * C32078;
    const double C6287 =
        (5 * (3 * C32304 + C31989 * C32312) +
         C31989 * (4 * C32312 +
                   C31989 * (3 * C32015 +
                             C31989 * (2 * C32060 +
                                       C31989 * (C31887 + C31948 * C32005))))) /
        C31578;
    const double C6396 = (C32023 * (3 * C32304 + C31989 * C32312)) / C31578;
    const double C6398 =
        (2 * C32290 + C31989 * C32304 + C32312 * C32039) / C31578;
    const double C6400 =
        (3 * C32304 + C31989 * C32312 +
         (3 * C32015 +
          C31989 * (2 * C32060 + C31989 * (C31887 + C31948 * C32005))) *
             C32039) /
        C31578;
    const double C6692 =
        (C32023 * (4 * C32312 +
                   C31989 * (3 * C32015 +
                             C31989 * (2 * C32060 +
                                       C31989 * (C31887 + C31948 * C32005))))) /
        C31578;
    const double C7631 =
        (2 * C32023 * C32312 +
         C32023 * (C32312 + (2 * C32060 + C31989 * (C31887 + C31948 * C32005)) *
                                C32039)) /
        C31578;
    const double C12201 =
        (5 * (3 * C32346 + C32023 * C32354) +
         C32023 * (4 * C32354 +
                   C32023 * (3 * C32049 +
                             C32023 * (2 * C32077 +
                                       C32023 * (C31887 + C31948 * C32039))))) /
        C31578;
    const double C6286 =
        (5 * (3 * C32301 + C31989 * C32308) +
         C31989 * (4 * C32308 +
                   C31989 * (3 * C32014 +
                             C31989 * (2 * C32059 +
                                       C31989 * (C31884 + C31945 * C32005))))) /
        C31578;
    const double C6395 = (C32023 * (3 * C32301 + C31989 * C32308)) / C31578;
    const double C6397 =
        (2 * C32288 + C31989 * C32301 + C32308 * C32039) / C31578;
    const double C6399 =
        (3 * C32301 + C31989 * C32308 +
         (3 * C32014 +
          C31989 * (2 * C32059 + C31989 * (C31884 + C31945 * C32005))) *
             C32039) /
        C31578;
    const double C6691 =
        (C32023 * (4 * C32308 +
                   C31989 * (3 * C32014 +
                             C31989 * (2 * C32059 +
                                       C31989 * (C31884 + C31945 * C32005))))) /
        C31578;
    const double C7630 =
        (2 * C32023 * C32308 +
         C32023 * (C32308 + (2 * C32059 + C31989 * (C31884 + C31945 * C32005)) *
                                C32039)) /
        C31578;
    const double C12200 =
        (5 * (3 * C32343 + C32023 * C32350) +
         C32023 * (4 * C32350 +
                   C32023 * (3 * C32048 +
                             C32023 * (2 * C32076 +
                                       C32023 * (C31884 + C31945 * C32039))))) /
        C31578;
    const double C31965 = C31958 * ae;
    const double C31963 = C31795 * C31958;
    const double C31962 = C31958 * be;
    const double C32636 = C32631 - C32635;
    const double C32855 = C32834 / C31578;
    const double C32643 = C32639 - C32642;
    const double C32869 = C32858 / C31584;
    const double C32676 = C32671 - C32675;
    const double C32857 = C32837 / C31578;
    const double C32683 = C32679 - C32682;
    const double C32871 = C32861 / C31584;
    const double C31624 = C31622 / C31578;
    const double C31662 = C31659 / C31578;
    const double C31612 = C31608 + C32498;
    const double C31679 = C31676 - C31678;
    const double C5340 = C31676 + (0 * ae) / C31578;
    const double C31611 = C32488 - C31607;
    const double C18081 = C32493 * C894;
    const double C18061 = C32493 * C252;
    const double C18049 = C32493 * C251;
    const double C18383 = C32493 * C253;
    const double C18371 = C32493 * C250;
    const double C18725 = C32493 * C637;
    const double C18713 = C32493 * C1103;
    const double C19217 = C32493 * C357;
    const double C19185 = C32493 * C356;
    const double C19657 = C32493 * C355;
    const double C24787 = C32493 * C2005;
    const double C25093 = C32493 * C358;
    const double C32784 = C32493 * C32483;
    const double C32825 = C32789 + C32493;
    const double C5472 = C32851 * C253;
    const double C5460 = C32851 * C250;
    const double C5794 = C32851 * C254;
    const double C10668 = C32851 * C358;
    const double C10656 = C32851 * C355;
    const double C11025 = C32851 * C359;
    const double C18065 = C32501 * C253;
    const double C18053 = C32501 * C250;
    const double C18387 = C32501 * C254;
    const double C19213 = C32501 * C358;
    const double C19189 = C32501 * C355;
    const double C25097 = C32501 * C359;
    const double C32792 = C32501 / C31584;
    const double C32788 = C32501 * C32483;
    const double C2693 = C32865 - (C32493 * C32484) / C31578;
    const double C31861 = C31859 + C31847;
    const double C31860 = C31858 + C31844;
    const double C31882 = C31873 + C31864;
    const double C910 = C32826 * C249;
    const double C1268 = C753 * C249;
    const double C5464 = C32826 * C249;
    const double C5782 = C32851 * C249;
    const double C8141 = C32498 * C249;
    const double C16312 = C32498 * C249;
    const double C18057 = C17925 * C249;
    const double C18375 = C32501 * C249;
    const double C1630 = C753 * C638;
    const double C4811 = C752 * C638;
    const double C6128 = C32851 * C638;
    const double C7290 = C32488 * C638;
    const double C8455 = C32498 * C638;
    const double C9173 = C32785 * C638;
    const double C16626 = C32498 * C638;
    const double C17370 = C15908 * C638;
    const double C18721 = C32501 * C638;
    const double C19442 = C32493 * C638;
    const double C26912 = C32864 * C638;
    const double C2578 = C752 * C1104;
    const double C6952 = C32488 * C1104;
    const double C8943 = C32785 * C1104;
    const double C11197 = C32864 * C1104;
    const double C16944 = C15908 * C1104;
    const double C19205 = C32493 * C1104;
    const double C2021 = C32826 * C354;
    const double C2382 = C753 * C354;
    const double C9399 = C32498 * C354;
    const double C10660 = C32826 * C354;
    const double C11013 = C32851 * C354;
    const double C17596 = C32498 * C354;
    const double C19193 = C17925 * C354;
    const double C19661 = C32501 * C354;
    const double C31907 = C31904 + C31888;
    const double C12940 = C31604 * C2568;
    const double C14731 = C6218 * C2568;
    const double C17134 = C15916 * C2568;
    const double C6488 =
        (4 * (2 * C32294 + C31989 * C32324) +
         C31989 *
             (3 * C32324 +
              C31989 * (2 * C32058 + C31989 * (C31898 + C31959 * C32005)))) /
        C31578;
    const double C6606 =
        (C32023 *
         (3 * C32324 +
          C31989 * (2 * C32058 + C31989 * (C31898 + C31959 * C32005)))) /
        C31578;
    const double C7283 =
        (2 * C32294 + C31989 * C32324 +
         (2 * C32058 + C31989 * (C31898 + C31959 * C32005)) * C32039) /
        C31578;
    const double C7467 =
        (2 * C32023 * C32324 +
         C32023 * (C32324 + (C31898 + C31959 * C32005) * C32039)) /
        C31578;
    const double C12388 =
        (4 * (2 * C32023 * C31853 + C32023 * C32362) +
         C32023 *
             (3 * C32362 +
              C32023 * (2 * C32075 + C32023 * (C31898 + C31959 * C32039)))) /
        C31578;
    const double C128 = 4 * (2 * C31816 + C31795 * C31845) +
                        C31795 * (3 * C31845 + C31795 * C31897);
    const double C217 = C31989 * (3 * C31845 + C31795 * C31897);
    const double C225 = 2 * C31816 + C31795 * C31845 + C31897 * C32005;
    const double C322 = C32023 * (3 * C31845 + C31795 * C31897);
    const double C330 = 2 * C31816 + C31795 * C31845 + C31897 * C32039;
    const double C625 = C32023 * C31989 * C31897;
    const double C1256 =
        2 * C31989 * C31897 + C31989 * (C31897 + C31958 * C32005);
    const double C1448 = C32023 * (C31897 + C31958 * C32005);
    const double C2220 = C31989 * C31897 + C31989 * C31958 * C32039;
    const double C2370 =
        2 * C32023 * C31897 + C32023 * (C31897 + C31958 * C32039);
    const double C31906 = C31903 + C31885;
    const double C31943 = C31933 + C31920;
    const double C32067 = C31992 + C32062;
    const double C12938 = C31604 * C2567;
    const double C14729 = C6218 * C2567;
    const double C17132 = C15916 * C2567;
    const double C32084 = C32026 + C32079;
    const double C6487 =
        (4 * (2 * C32292 + C31989 * C32321) +
         C31989 *
             (3 * C32321 +
              C31989 * (2 * C32057 + C31989 * (C31896 + C31957 * C32005)))) /
        C31578;
    const double C6605 =
        (C32023 *
         (3 * C32321 +
          C31989 * (2 * C32057 + C31989 * (C31896 + C31957 * C32005)))) /
        C31578;
    const double C7282 =
        (2 * C32292 + C31989 * C32321 +
         (2 * C32057 + C31989 * (C31896 + C31957 * C32005)) * C32039) /
        C31578;
    const double C7466 =
        (2 * C32023 * C32321 +
         C32023 * (C32321 + (C31896 + C31957 * C32005) * C32039)) /
        C31578;
    const double C12387 =
        (4 * (2 * C32023 * C31852 + C32023 * C32359) +
         C32023 *
             (3 * C32359 +
              C32023 * (2 * C32074 + C32023 * (C31896 + C31957 * C32039)))) /
        C31578;
    const double C31905 = C31795 * C31902;
    const double C31916 = 2 * C31902;
    const double C31997 = C31996 + C31995;
    const double C1626 = C32826 * C639;
    const double C4815 = C753 * C639;
    const double C6124 = C32826 * C639;
    const double C9177 = C32498 * C639;
    const double C17374 = C32498 * C639;
    const double C18717 = C17925 * C639;
    const double C19446 = C32501 * C639;
    const double C26916 = C32851 * C639;
    const double C2582 = C753 * C1105;
    const double C7294 = C32488 * C1105;
    const double C8939 = C32498 * C1105;
    const double C11201 = C32851 * C1105;
    const double C13163 = C32785 * C1105;
    const double C16948 = C32498 * C1105;
    const double C17378 = C15908 * C1105;
    const double C19201 = C32501 * C1105;
    const double C7116 = C32488 * C2571;
    const double C12945 = C32785 * C2571;
    const double C17139 = C15908 * C2571;
    const double C893 =
        (ae * (2 * C31989 * C31820 + C31989 * (C31820 + C31843 * C32005)) +
         be * (2 * C31989 * C31821 + C31989 * (C31821 + C31846 * C32005)) +
         C31795 * (2 * C31999 + C31989 * C32009)) /
        C31583;
    const double C895 = (3 * (C31825 + C31851 * C32005) +
                         C31989 * (2 * C31999 + C31989 * C32009)) /
                        C31583;
    const double C1102 =
        (ae * C32023 * (C31820 + C31843 * C32005) +
         be * C32023 * (C31821 + C31846 * C32005) + C31795 * C32023 * C32009) /
        C31583;
    const double C1107 = (C31825 + C31851 * C32005 + C32009 * C32039) / C31583;
    const double C1607 = (C32023 * (2 * C31999 + C31989 * C32009)) / C31583;
    const double C32031 = C32030 + C32029;
    const double C2004 =
        (ae * (2 * C32023 * C31820 + C32023 * (C31820 + C31843 * C32039)) +
         be * (2 * C32023 * C31821 + C32023 * (C31821 + C31846 * C32039)) +
         C31795 * (2 * C32033 + C32023 * C32043)) /
        C31583;
    const double C2006 = (3 * (C31825 + C31851 * C32039) +
                          C32023 * (2 * C32033 + C32023 * C32043)) /
                         C31583;
    const double C6283 =
        5 * (3 * C32439 + C31989 * C32446) +
        C31989 * (4 * C32446 +
                  C31989 * (3 * C32444 +
                            C31989 * (2 * C31989 * C31867 +
                                      C31989 * (C31867 + C31923 * C32005))));
    const double C6392 = C32023 * (3 * C32439 + C31989 * C32446);
    const double C6393 = 2 * C32432 + C31989 * C32439 + C32446 * C32039;
    const double C6394 =
        3 * C32439 + C31989 * C32446 +
        (3 * C32444 +
         C31989 * (2 * C31989 * C31867 + C31989 * (C31867 + C31923 * C32005))) *
            C32039;
    const double C6690 =
        C32023 * (4 * C32446 +
                  C31989 * (3 * C32444 +
                            C31989 * (2 * C31989 * C31867 +
                                      C31989 * (C31867 + C31923 * C32005))));
    const double C7629 =
        2 * C32023 * C32446 +
        C32023 * (C32446 +
                  (2 * C31989 * C31867 + C31989 * (C31867 + C31923 * C32005)) *
                      C32039);
    const double C12197 =
        5 * (3 * C32463 + C32023 * C32470) +
        C32023 * (4 * C32470 +
                  C32023 * (3 * C32468 +
                            C32023 * (2 * C32023 * C31867 +
                                      C32023 * (C31867 + C31923 * C32039))));
    const double C31972 = C31969 + C31949;
    const double C31971 = C31967 + C31946;
    const double C31970 = C31795 * C31966;
    const double C32019 = C31795 * C32016;
    const double C32121 = C31989 * C32016;
    const double C32124 = C32023 * C32016;
    const double C892 =
        (2 * C31999 + C31989 * C32009 +
         ae * (2 * C31989 * C31852 + C31989 * (C31852 + C31896 * C32005)) +
         be * (2 * C31989 * C31853 + C31989 * (C31853 + C31898 * C32005)) +
         C31795 * (ae * (2 * C31990 + C31989 * C32014) +
                   be * (2 * C31991 + C31989 * C32015) +
                   C31795 * (2 * C31992 + C31989 * C32016))) /
        C31583;
    const double C896 =
        (ae * (3 * (C31820 + C31843 * C32005) +
               C31989 * (2 * C31990 + C31989 * C32014)) +
         be * (3 * (C31821 + C31846 * C32005) +
               C31989 * (2 * C31991 + C31989 * C32015)) +
         C31795 * (3 * C32009 + C31989 * (2 * C31992 + C31989 * C32016))) /
        C31583;
    const double C897 =
        (3 * C32009 + C31989 * (2 * C31992 + C31989 * C32016) +
         ae * (3 * (C31852 + C31896 * C32005) +
               C31989 * (2 * C32057 + C31989 * (C31896 + C31957 * C32005))) +
         be * (3 * (C31853 + C31898 * C32005) +
               C31989 * (2 * C32058 + C31989 * (C31898 + C31959 * C32005))) +
         C31795 *
             (ae * (3 * C32014 +
                    C31989 *
                        (2 * C32059 + C31989 * (C31884 + C31945 * C32005))) +
              be * (3 * C32015 +
                    C31989 *
                        (2 * C32060 + C31989 * (C31887 + C31948 * C32005))) +
              C31795 * (3 * C32016 +
                        C31989 * (2 * C32061 +
                                  C31989 * (C31956 + (C31924 * C31925 +
                                                      C31799 * bs[8] *
                                                          std::pow(C31793, 8)) *
                                                         C31581 * C32005))))) /
        C31583;
    const double C1101 =
        (C32023 * C32009 + ae * C32023 * (C31852 + C31896 * C32005) +
         be * C32023 * (C31853 + C31898 * C32005) +
         C31795 * (ae * C32023 * C32014 + be * C32023 * C32015 +
                   C31795 * C32023 * C32016)) /
        C31583;
    const double C1108 = (ae * (C31820 + C31843 * C32005 + C32014 * C32039) +
                          be * (C31821 + C31846 * C32005 + C32015 * C32039) +
                          C31795 * (C32009 + C32016 * C32039)) /
                         C31583;
    const double C1109 =
        (C32009 + C32016 * C32039 +
         ae * (C31852 + C31896 * C32005 + (C31896 + C31957 * C32005) * C32039) +
         be * (C31853 + C31898 * C32005 + (C31898 + C31959 * C32005) * C32039) +
         C31795 * (ae * (C32014 + (C31884 + C31945 * C32005) * C32039) +
                   be * (C32015 + (C31887 + C31948 * C32005) * C32039) +
                   C31795 * (C32016 +
                             (C31956 + (C31924 * C31925 +
                                        C31799 * bs[8] * std::pow(C31793, 8)) *
                                           C31581 * C32005) *
                                 C32039))) /
        C31583;
    const double C6607 =
        (ae * C32023 *
             (3 * C32014 +
              C31989 * (2 * C32059 + C31989 * (C31884 + C31945 * C32005))) +
         be * C32023 *
             (3 * C32015 +
              C31989 * (2 * C32060 + C31989 * (C31887 + C31948 * C32005))) +
         C31795 * C32023 *
             (3 * C32016 +
              C31989 *
                  (2 * C32061 +
                   C31989 * (C31956 + (C31924 * C31925 +
                                       C31799 * bs[8] * std::pow(C31793, 8)) *
                                          C31581 * C32005)))) /
        C31583;
    const double C7097 =
        (2 * C32023 * C32009 + C32023 * (C32009 + C32016 * C32039)) / C31583;
    const double C32053 = C31795 * C32050;
    const double C32139 = C32023 * C32050;
    const double C2003 =
        (2 * C32033 + C32023 * C32043 +
         ae * (2 * C32023 * C31852 + C32023 * (C31852 + C31896 * C32039)) +
         be * (2 * C32023 * C31853 + C32023 * (C31853 + C31898 * C32039)) +
         C31795 * (ae * (2 * C32024 + C32023 * C32048) +
                   be * (2 * C32025 + C32023 * C32049) +
                   C31795 * (2 * C32026 + C32023 * C32050))) /
        C31583;
    const double C2007 =
        (ae * (3 * (C31820 + C31843 * C32039) +
               C32023 * (2 * C32024 + C32023 * C32048)) +
         be * (3 * (C31821 + C31846 * C32039) +
               C32023 * (2 * C32025 + C32023 * C32049)) +
         C31795 * (3 * C32043 + C32023 * (2 * C32026 + C32023 * C32050))) /
        C31583;
    const double C2008 =
        (3 * C32043 + C32023 * (2 * C32026 + C32023 * C32050) +
         ae * (3 * (C31852 + C31896 * C32039) +
               C32023 * (2 * C32074 + C32023 * (C31896 + C31957 * C32039))) +
         be * (3 * (C31853 + C31898 * C32039) +
               C32023 * (2 * C32075 + C32023 * (C31898 + C31959 * C32039))) +
         C31795 *
             (ae * (3 * C32048 +
                    C32023 *
                        (2 * C32076 + C32023 * (C31884 + C31945 * C32039))) +
              be * (3 * C32049 +
                    C32023 *
                        (2 * C32077 + C32023 * (C31887 + C31948 * C32039))) +
              C31795 * (3 * C32050 +
                        C32023 * (2 * C32078 +
                                  C32023 * (C31956 + (C31924 * C31925 +
                                                      C31799 * bs[8] *
                                                          std::pow(C31793, 8)) *
                                                         C31581 * C32039))))) /
        C31583;
    const double C32070 = C32068 + C32066;
    const double C32101 = C31795 * C32098;
    const double C32136 = C31992 + C32135;
    const double C2586 = C32826 * C1106;
    const double C11205 = C32826 * C1106;
    const double C13167 = C32498 * C1106;
    const double C17382 = C32498 * C1106;
    const double C19197 = C17925 * C1106;
    const double C32087 = C32085 + C32083;
    const double C6697 = C6218 * C6396;
    const double C6961 = C6218 * C6398;
    const double C6695 = C6218 * C6395;
    const double C6959 = C6218 * C6397;
    const double C31968 = C31929 + C31963;
    const double C32807 = C32636 * C32630;
    const double C32842 = C32809 + C32636;
    const double C32811 = C32643 / C31584;
    const double C32808 = C32643 * C32630;
    const double C7739 = C32869 - (C32636 * C32632) / C31578;
    const double C32814 = C32676 * C32670;
    const double C32847 = C32816 + C32676;
    const double C32818 = C32683 / C31584;
    const double C32815 = C32683 * C32670;
    const double C13674 = C32871 - (C32676 * C32672) / C31578;
    const double C31627 = C31618 - C31624;
    const double C31666 = C31648 - C31662;
    const double C31617 = C31612 * be;
    const double C18056 = C31679 * C232;
    const double C18054 = C31679 * C231;
    const double C19192 = C31679 * C337;
    const double C19190 = C31679 * C336;
    const double C31683 = 2 * C31679;
    const double C121 =
        (C31679 / C31584 + (0 * ae) / C31578) / C31584 - (0 * be) / C31578;
    const double C2705 = C31679 / C31584 - (0 * be) / C31578;
    const double C15110 = C31679 / C31584 + (0 * ae) / C31578;
    const double C5463 = C5340 * C232;
    const double C5461 = C5340 * C231;
    const double C10659 = C5340 * C337;
    const double C10657 = C5340 * C336;
    const double C31616 = C31611 * ae;
    const double C31647 = C31611 * C31641;
    const double C758 =
        ((-C31579 / C31578) / C31584 - (C31597 * be) / C31578) / C31584 -
        ((C31576 * ((-C31586) / C31584 - (C31611 * be) / C31578) + C15908) *
         be) /
            C31578 +
        (-C31598 / C31578) / C31584 - (0 * be) / C31578;
    const double C760 =
        ((-C31586) / C31584 - (C31611 * be) / C31578) / C31584 -
        ((C31576 * ((-C31598 / C31578) / C31584 - (0 * be) / C31578) + C32498) *
         be) /
            C31578;
    const double C15914 = (-C31586) / C31584 - (C31611 * be) / C31578;
    const double C32821 = C32784 / C31578;
    const double C32852 = C32825 / C31584;
    const double C32853 = C32827 + C32792;
    const double C2695 = C32792 - C32499 / C31590;
    const double C32824 = C32788 / C31578;
    const double C2837 = C2693 * C252;
    const double C2809 = C2693 * C251;
    const double C3093 = C2693 * C250;
    const double C3393 = C2693 * C637;
    const double C3733 = C2693 * C357;
    const double C3705 = C2693 * C356;
    const double C4021 = C2693 * C355;
    const double C139 = (3 * (C31808 + C31795 * C31827 + C31816 * ae) +
                         C31795 * (2 * C31827 + C31795 * C31861 + C31845 * ae) +
                         (2 * C31816 + C31795 * C31845) * ae) /
                        C31578;
    const double C230 =
        (C31989 * (2 * C31827 + C31795 * C31861 + C31845 * ae)) / C31578;
    const double C242 =
        (C31808 + C31795 * C31827 + C31816 * ae + C31861 * C32005) / C31578;
    const double C335 =
        (C32023 * (2 * C31827 + C31795 * C31861 + C31845 * ae)) / C31578;
    const double C347 =
        (C31808 + C31795 * C31827 + C31816 * ae + C31861 * C32039) / C31578;
    const double C632 = (C32023 * C31989 * C31861) / C31578;
    const double C148 =
        (3 * (C31825 + ae * C31826 + be * C31827 + C31795 * C31857) +
         ae * (2 * C31826 + C31795 * C31860 + C31845 * be) +
         be * (2 * C31827 + C31795 * C31861 + C31845 * ae) +
         C31795 *
             (2 * C31857 + ae * C31860 + be * C31861 +
              C31795 * (C31851 + ae * C31852 + be * C31853 +
                        C31795 * (ae * C31843 + be * C31846 +
                                  C31795 *
                                      (C31832 * C31833 +
                                       C31799 * bs[6] * std::pow(C31793, 6)) *
                                      C31581)))) /
        C31583;
    const double C138 = (3 * (C31807 + C31795 * C31826 + C31816 * be) +
                         C31795 * (2 * C31826 + C31795 * C31860 + C31845 * be) +
                         (2 * C31816 + C31795 * C31845) * be) /
                        C31578;
    const double C229 =
        (C31989 * (2 * C31826 + C31795 * C31860 + C31845 * be)) / C31578;
    const double C241 =
        (C31807 + C31795 * C31826 + C31816 * be + C31860 * C32005) / C31578;
    const double C334 =
        (C32023 * (2 * C31826 + C31795 * C31860 + C31845 * be)) / C31578;
    const double C346 =
        (C31807 + C31795 * C31826 + C31816 * be + C31860 * C32039) / C31578;
    const double C631 = (C32023 * C31989 * C31860) / C31578;
    const double C31910 = C31795 * C31907;
    const double C31930 = 3 * C31907;
    const double C31918 = be * C31907;
    const double C32298 = C31989 * C31907;
    const double C881 =
        (2 * C31989 * C31861 + C31989 * (C31861 + C31907 * C32005)) / C31578;
    const double C1084 = (C32023 * (C31861 + C31907 * C32005)) / C31578;
    const double C1094 = (C31989 * C31861 + C31989 * C31907 * C32039) / C31578;
    const double C1992 =
        (2 * C32023 * C31861 + C32023 * (C31861 + C31907 * C32039)) / C31578;
    const double C31909 = C31795 * C31906;
    const double C31926 = 3 * C31906;
    const double C31917 = ae * C31906;
    const double C255 =
        (2 * (ae * (C31820 + C31843 * C32005) +
              be * (C31821 + C31846 * C32005) + C31795 * C32009) +
         ae * (C31860 + C31906 * C32005) + be * (C31861 + C31907 * C32005) +
         C31795 * (C32009 + ae * (C31852 + C31896 * C32005) +
                   be * (C31853 + C31898 * C32005) +
                   C31795 * (ae * (C31843 + C31884 * C32005) +
                             be * (C31846 + C31887 * C32005) +
                             C31795 * (C31895 + C31956 * C32005)))) /
        C31583;
    const double C360 =
        (2 * (ae * (C31820 + C31843 * C32039) +
              be * (C31821 + C31846 * C32039) + C31795 * C32043) +
         ae * (C31860 + C31906 * C32039) + be * (C31861 + C31907 * C32039) +
         C31795 * (C32043 + ae * (C31852 + C31896 * C32039) +
                   be * (C31853 + C31898 * C32039) +
                   C31795 * (ae * (C31843 + C31884 * C32039) +
                             be * (C31846 + C31887 * C32039) +
                             C31795 * (C31895 + C31956 * C32039)))) /
        C31583;
    const double C640 =
        (2 * (ae * C32023 * C31990 + be * C32023 * C31991 + C31795 * C32094) +
         ae * C32023 * C31989 * C31906 + be * C32023 * C31989 * C31907 +
         C31795 * (C32094 + ae * C32023 * C32057 + be * C32023 * C32058 +
                   C31795 * (ae * C32023 * C32059 + be * C32023 * C32060 +
                             C31795 * C32023 * C32061))) /
        C31583;
    const double C32296 = C31989 * C31906;
    const double C880 =
        (2 * C31989 * C31860 + C31989 * (C31860 + C31906 * C32005)) / C31578;
    const double C1083 = (C32023 * (C31860 + C31906 * C32005)) / C31578;
    const double C1093 = (C31989 * C31860 + C31989 * C31906 * C32039) / C31578;
    const double C1991 =
        (2 * C32023 * C31860 + C32023 * (C31860 + C31906 * C32039)) / C31578;
    const double C32069 = C32067 + C32063;
    const double C32086 = C32084 + C32080;
    const double C31908 = C31882 + C31905;
    const double C248 =
        (2 * (ae * C31989 * C31820 + be * C31989 * C31821 + C31795 * C31999) +
         ae * C31989 * C31860 + be * C31989 * C31861 +
         C31795 * (C31999 + ae * C31989 * C31852 + be * C31989 * C31853 +
                   C31795 * C31997)) /
        C31583;
    const double C930 = C753 * C893;
    const double C5484 = C32851 * C893;
    const double C6502 = C32488 * C893;
    const double C7869 = C32498 * C893;
    const double C8153 = C32785 * C893;
    const double C16040 = C32498 * C893;
    const double C16324 = C15908 * C893;
    const double C18077 = C32501 * C893;
    const double C6306 = C32488 * C895;
    const double C7877 = C32785 * C895;
    const double C16048 = C15908 * C895;
    const double C1618 = C753 * C1102;
    const double C6116 = C32851 * C1102;
    const double C7299 = C32488 * C1102;
    const double C8447 = C32498 * C1102;
    const double C9181 = C32785 * C1102;
    const double C16618 = C32498 * C1102;
    const double C18709 = C32501 * C1102;
    const double C20512 = C15908 * C1102;
    const double C6958 = C32488 * C1107;
    const double C8935 = C32785 * C1107;
    const double C16956 = C15908 * C1107;
    const double C6702 = C32488 * C1607;
    const double C8443 = C32785 * C1607;
    const double C16614 = C15908 * C1607;
    const double C353 =
        (2 * (ae * C32023 * C31820 + be * C32023 * C31821 + C31795 * C32033) +
         ae * C32023 * C31860 + be * C32023 * C31861 +
         C31795 * (C32033 + ae * C32023 * C31852 + be * C32023 * C31853 +
                   C31795 * C32031)) /
        C31583;
    const double C2041 = C753 * C2004;
    const double C10680 = C32851 * C2004;
    const double C12394 = C32488 * C2004;
    const double C12949 = C32498 * C2004;
    const double C14153 = C32785 * C2004;
    const double C17143 = C32498 * C2004;
    const double C23281 = C15908 * C2004;
    const double C24783 = C32501 * C2004;
    const double C12208 = C32488 * C2006;
    const double C13883 = C32785 * C2006;
    const double C23011 = C15908 * C2006;
    const double C31975 = C31795 * C31972;
    const double C891 =
        (3 * (C31861 + C31907 * C32005) +
         C31989 * (2 * C31989 * C31907 + C31989 * (C31907 + C31972 * C32005))) /
        C31578;
    const double C1100 =
        (C31861 + C31907 * C32005 + (C31907 + C31972 * C32005) * C32039) /
        C31578;
    const double C1606 =
        (C32023 * (2 * C31989 * C31907 + C31989 * (C31907 + C31972 * C32005))) /
        C31578;
    const double C2002 =
        (3 * (C31861 + C31907 * C32039) +
         C32023 * (2 * C32023 * C31907 + C32023 * (C31907 + C31972 * C32039))) /
        C31578;
    const double C31974 = C31795 * C31971;
    const double C890 =
        (3 * (C31860 + C31906 * C32005) +
         C31989 * (2 * C31989 * C31906 + C31989 * (C31906 + C31971 * C32005))) /
        C31578;
    const double C1099 =
        (C31860 + C31906 * C32005 + (C31906 + C31971 * C32005) * C32039) /
        C31578;
    const double C1605 =
        (C32023 * (2 * C31989 * C31906 + C31989 * (C31906 + C31971 * C32005))) /
        C31578;
    const double C2001 =
        (3 * (C31860 + C31906 * C32039) +
         C32023 * (2 * C32023 * C31906 + C32023 * (C31906 + C31971 * C32039))) /
        C31578;
    const double C31973 = C31943 + C31970;
    const double C32021 = C32020 + C32019;
    const double C32122 = C32120 + C32121;
    const double C1451 =
        (2 * (ae * C32023 * C32014 + be * C32023 * C32015 + C31795 * C32124) +
         ae * C32023 * (C31906 + C31971 * C32005) +
         be * C32023 * (C31907 + C31972 * C32005) +
         C31795 *
             (C32124 + ae * C32023 * (C31896 + C31957 * C32005) +
              be * C32023 * (C31898 + C31959 * C32005) +
              C31795 * (ae * C32023 * (C31884 + C31945 * C32005) +
                        be * C32023 * (C31887 + C31948 * C32005) +
                        C31795 * C32023 *
                            (C31956 + (C31924 * C31925 +
                                       C31799 * bs[8] * std::pow(C31793, 8)) *
                                          C31581 * C32005)))) /
        C31583;
    const double C7099 =
        (3 * (C32009 + C32016 * C32039) +
         C32023 * (2 * C32124 +
                   C32023 * (C32016 +
                             (C31956 + (C31924 * C31925 +
                                        C31799 * bs[8] * std::pow(C31793, 8)) *
                                           C31581 * C32005) *
                                 C32039))) /
        C31583;
    const double C7468 =
        (ae * (2 * C32023 * C32014 +
               C32023 * (C32014 + (C31884 + C31945 * C32005) * C32039)) +
         be * (2 * C32023 * C32015 +
               C32023 * (C32015 + (C31887 + C31948 * C32005) * C32039)) +
         C31795 * (2 * C32124 +
                   C32023 * (C32016 +
                             (C31956 + (C31924 * C31925 +
                                        C31799 * bs[8] * std::pow(C31793, 8)) *
                                           C31581 * C32005) *
                                 C32039))) /
        C31583;
    const double C926 = C32826 * C892;
    const double C5480 = C32826 * C892;
    const double C8157 = C32498 * C892;
    const double C16328 = C32498 * C892;
    const double C18073 = C17925 * C892;
    const double C6506 = C32488 * C896;
    const double C7873 = C32498 * C896;
    const double C16044 = C32498 * C896;
    const double C1614 = C32826 * C1101;
    const double C6112 = C32826 * C1101;
    const double C9185 = C32498 * C1101;
    const double C18705 = C17925 * C1101;
    const double C20516 = C32498 * C1101;
    const double C7303 = C32488 * C1108;
    const double C8931 = C32498 * C1108;
    const double C16952 = C32498 * C1108;
    const double C7112 = C32488 * C7097;
    const double C32055 = C32054 + C32053;
    const double C32140 = C32138 + C32139;
    const double C2037 = C32826 * C2003;
    const double C10676 = C32826 * C2003;
    const double C14157 = C32498 * C2003;
    const double C23285 = C32498 * C2003;
    const double C24779 = C17925 * C2003;
    const double C12398 = C32488 * C2007;
    const double C13879 = C32498 * C2007;
    const double C23007 = C32498 * C2007;
    const double C32071 = C31795 * C32070;
    const double C32103 = C32102 + C32101;
    const double C2223 =
        (2 * (ae * (C31990 + C32059 * C32039) +
              be * (C31991 + C32060 * C32039) + C31795 * C32136) +
         ae * (C31989 * C31906 + C31989 * C31971 * C32039) +
         be * (C31989 * C31907 + C31989 * C31972 * C32039) +
         C31795 * (C32136 + ae * (C32057 + C31989 * C31957 * C32039) +
                   be * (C32058 + C31989 * C31959 * C32039) +
                   C31795 * (ae * (C32059 + C31989 * C31945 * C32039) +
                             be * (C32060 + C31989 * C31948 * C32039) +
                             C31795 * (C32061 + C31989 *
                                                    (C31924 * C31925 +
                                                     C31799 * bs[8] *
                                                         std::pow(C31793, 8)) *
                                                    C31581 * C32039)))) /
        C31583;
    const double C2572 =
        (ae * (2 * C32023 * C31990 + C32023 * (C31990 + C32059 * C32039)) +
         be * (2 * C32023 * C31991 + C32023 * (C31991 + C32060 * C32039)) +
         C31795 * (2 * C32094 + C32023 * C32136)) /
        C31583;
    const double C2573 =
        (2 * C32094 + C32023 * C32136 +
         ae * (2 * C32023 * C32057 +
               C32023 * (C32057 + C31989 * C31957 * C32039)) +
         be * (2 * C32023 * C32058 +
               C32023 * (C32058 + C31989 * C31959 * C32039)) +
         C31795 *
             (ae * (2 * C32096 + C32023 * (C32059 + C31989 * C31945 * C32039)) +
              be * (2 * C32097 + C32023 * (C32060 + C31989 * C31948 * C32039)) +
              C31795 * (2 * C32098 +
                        C32023 * (C32061 +
                                  C31989 *
                                      (C31924 * C31925 +
                                       C31799 * bs[8] * std::pow(C31793, 8)) *
                                      C31581 * C32039)))) /
        C31583;
    const double C7098 = (3 * (C31999 + C31992 * C32039) +
                          C32023 * (2 * C32094 + C32023 * C32136)) /
                         C31583;
    const double C12303 =
        (ae * (3 * (C31990 + C32059 * C32039) +
               C32023 * (2 * C32096 +
                         C32023 * (C32059 + C31989 * C31945 * C32039))) +
         be * (3 * (C31991 + C32060 * C32039) +
               C32023 * (2 * C32097 +
                         C32023 * (C32060 + C31989 * C31948 * C32039))) +
         C31795 * (3 * C32136 +
                   C32023 * (2 * C32098 +
                             C32023 * (C32061 + C31989 *
                                                    (C31924 * C31925 +
                                                     C31799 * bs[8] *
                                                         std::pow(C31793, 8)) *
                                                    C31581 * C32039)))) /
        C31583;
    const double C12489 =
        (4 * (2 * C32094 + C32023 * C32136) +
         C32023 * (3 * C32136 +
                   C32023 * (2 * C32098 +
                             C32023 * (C32061 + C31989 *
                                                    (C31924 * C31925 +
                                                     C31799 * bs[8] *
                                                         std::pow(C31793, 8)) *
                                                    C31581 * C32039)))) /
        C31583;
    const double C32088 = C31795 * C32087;
    const double C129 = 5 * (3 * C31845 + C31795 * C31897) +
                        C31795 * (4 * C31897 + C31795 * C31968);
    const double C226 = 3 * C31845 + C31795 * C31897 + C31968 * C32005;
    const double C331 = 3 * C31845 + C31795 * C31897 + C31968 * C32039;
    const double C448 = C31989 * (4 * C31897 + C31795 * C31968);
    const double C536 = C32023 * (4 * C31897 + C31795 * C31968);
    const double C626 = C32023 * C31989 * C31968;
    const double C32839 = C32807 / C31578;
    const double C32859 = C32842 / C31584;
    const double C32860 = C32843 + C32811;
    const double C7741 = C32811 - C32641 / C31590;
    const double C32841 = C32808 / C31578;
    const double C32844 = C32814 / C31578;
    const double C32862 = C32847 / C31584;
    const double C32863 = C32848 + C32818;
    const double C13676 = C32818 - C32681 / C31590;
    const double C32846 = C32815 / C31578;
    const double C31621 = C31617 / C31578;
    const double C31620 = C31616 / C31578;
    const double C31652 = C31647 / C31590;
    const double C31651 = C31576 * C31647;
    const double C122 = (-C31647 / C31578) / (4 * C31583 * std::pow(C31584, 2));
    const double C763 = (-C31647 / C31578) / C31682;
    const double C2706 = (-C31647 / C31578) / (4 * C31636);
    const double C5341 = (-C31647 / C31578) / C31682;
    const double C6219 = -C31647 / C31578;
    const double C7746 = (-C31647 / C31578) / C31584;
    const double C15111 = (-C31647 / C31578) / (4 * C31636);
    const double C15917 = (-C31647 / C31578) / C31584;
    const double C17934 = (-C31647 / C31578) / C31682;
    const double C933 = C758 * C885;
    const double C931 = C758 * C884;
    const double C913 = C758 * C238;
    const double C911 = C758 * C237;
    const double C901 = C758 * C236;
    const double C899 = C758 * C235;
    const double C1275 = C758 * C240;
    const double C1273 = C758 * C239;
    const double C1263 = C758 * C234;
    const double C1261 = C758 * C233;
    const double C1633 = C758 * C628;
    const double C1631 = C758 * C627;
    const double C1621 = C758 * C1088;
    const double C1619 = C758 * C1087;
    const double C2044 = C758 * C1996;
    const double C2042 = C758 * C1995;
    const double C2024 = C758 * C343;
    const double C2022 = C758 * C342;
    const double C2012 = C758 * C341;
    const double C2010 = C758 * C340;
    const double C2389 = C758 * C345;
    const double C2387 = C758 * C344;
    const double C2377 = C758 * C339;
    const double C2375 = C758 * C338;
    const double C2577 = C758 * C1090;
    const double C2575 = C758 * C1089;
    const double C4810 = C758 * C630;
    const double C4808 = C758 * C629;
    const double C929 = C760 * C883;
    const double C927 = C760 * C882;
    const double C917 = C760 * C240;
    const double C915 = C760 * C239;
    const double C905 = C760 * C234;
    const double C903 = C760 * C233;
    const double C1267 = C760 * C232;
    const double C1265 = C760 * C231;
    const double C1629 = C760 * C630;
    const double C1627 = C760 * C629;
    const double C1617 = C760 * C1086;
    const double C1615 = C760 * C1085;
    const double C2040 = C760 * C1994;
    const double C2038 = C760 * C1993;
    const double C2028 = C760 * C345;
    const double C2026 = C760 * C344;
    const double C2016 = C760 * C339;
    const double C2014 = C760 * C338;
    const double C2381 = C760 * C337;
    const double C2379 = C760 * C336;
    const double C2581 = C760 * C1092;
    const double C2579 = C760 * C1091;
    const double C16047 = C15914 * C887;
    const double C16045 = C15914 * C886;
    const double C16035 = C15914 * C885;
    const double C16033 = C15914 * C884;
    const double C16027 = C15914 * C238;
    const double C16025 = C15914 * C237;
    const double C16019 = C15914 * C236;
    const double C16017 = C15914 * C235;
    const double C16323 = C15914 * C883;
    const double C16321 = C15914 * C882;
    const double C16315 = C15914 * C240;
    const double C16313 = C15914 * C239;
    const double C16307 = C15914 * C234;
    const double C16305 = C15914 * C233;
    const double C16629 = C15914 * C628;
    const double C16627 = C15914 * C627;
    const double C16621 = C15914 * C1088;
    const double C16619 = C15914 * C1087;
    const double C16613 = C15914 * C1602;
    const double C16611 = C15914 * C1601;
    const double C16955 = C15914 * C1096;
    const double C16953 = C15914 * C1095;
    const double C16943 = C15914 * C1090;
    const double C16941 = C15914 * C1089;
    const double C17146 = C15914 * C1996;
    const double C17144 = C15914 * C1995;
    const double C17138 = C15914 * C2566;
    const double C17136 = C15914 * C2565;
    const double C17125 = C15914 * C343;
    const double C17123 = C15914 * C342;
    const double C17117 = C15914 * C341;
    const double C17115 = C15914 * C340;
    const double C17377 = C15914 * C1092;
    const double C17375 = C15914 * C1091;
    const double C17369 = C15914 * C630;
    const double C17367 = C15914 * C629;
    const double C17599 = C15914 * C345;
    const double C17597 = C15914 * C344;
    const double C17591 = C15914 * C339;
    const double C17589 = C15914 * C338;
    const double C20511 = C15914 * C1086;
    const double C20509 = C15914 * C1085;
    const double C23010 = C15914 * C1998;
    const double C23008 = C15914 * C1997;
    const double C23280 = C15914 * C1994;
    const double C23278 = C15914 * C1993;
    const double C32873 = C32821 + C32865;
    const double C2694 = C32852 - (C32501 * C32484) / C31578;
    const double C15234 = C32853 * C254;
    const double C15222 = C32853 * C249;
    const double C15790 = C32853 * C639;
    const double C21231 = C32853 * C359;
    const double C21219 = C32853 * C354;
    const double C104 = C32853 / C31584 - C32499 / C31684;
    const double C2829 = C2695 * C254;
    const double C2817 = C2695 * C249;
    const double C3385 = C2695 * C639;
    const double C3725 = C2695 * C359;
    const double C3713 = C2695 * C354;
    const double C32866 = C32824 + C32852;
    const double C1271 = C762 * C230;
    const double C2820 = C2705 * C230;
    const double C5785 = C5340 * C230;
    const double C15225 = C15110 * C230;
    const double C18378 = C31679 * C230;
    const double C921 = C762 * C242;
    const double C1279 = C760 * C242;
    const double C5475 = C5340 * C242;
    const double C8148 = C31604 * C242;
    const double C16319 = C15916 * C242;
    const double C18068 = C31679 * C242;
    const double C2385 = C762 * C335;
    const double C3716 = C2705 * C335;
    const double C11016 = C5340 * C335;
    const double C19664 = C31679 * C335;
    const double C21222 = C15110 * C335;
    const double C2032 = C762 * C347;
    const double C2393 = C760 * C347;
    const double C10671 = C5340 * C347;
    const double C13374 = C31604 * C347;
    const double C17603 = C15916 * C347;
    const double C19208 = C31679 * C347;
    const double C1625 = C762 * C632;
    const double C4814 = C760 * C632;
    const double C6123 = C5340 * C632;
    const double C9176 = C31604 * C632;
    const double C17373 = C15916 * C632;
    const double C18716 = C31679 * C632;
    const double C1269 = C762 * C229;
    const double C2818 = C2705 * C229;
    const double C5783 = C5340 * C229;
    const double C15223 = C15110 * C229;
    const double C18376 = C31679 * C229;
    const double C919 = C762 * C241;
    const double C1277 = C760 * C241;
    const double C5473 = C5340 * C241;
    const double C8146 = C31604 * C241;
    const double C16317 = C15916 * C241;
    const double C18066 = C31679 * C241;
    const double C2383 = C762 * C334;
    const double C3714 = C2705 * C334;
    const double C11014 = C5340 * C334;
    const double C19662 = C31679 * C334;
    const double C21220 = C15110 * C334;
    const double C2030 = C762 * C346;
    const double C2391 = C760 * C346;
    const double C10669 = C5340 * C346;
    const double C13372 = C31604 * C346;
    const double C17601 = C15916 * C346;
    const double C19206 = C31679 * C346;
    const double C1623 = C762 * C631;
    const double C4812 = C760 * C631;
    const double C6121 = C5340 * C631;
    const double C9174 = C31604 * C631;
    const double C17371 = C15916 * C631;
    const double C18714 = C31679 * C631;
    const double C31912 = C31872 + C31910;
    const double C2570 =
        (2 * C32023 * C32298 + C32023 * (C32298 + C31989 * C31972 * C32039)) /
        C31578;
    const double C925 = C762 * C881;
    const double C5479 = C5340 * C881;
    const double C8156 = C31604 * C881;
    const double C16327 = C15916 * C881;
    const double C18072 = C31679 * C881;
    const double C1613 = C762 * C1084;
    const double C6111 = C5340 * C1084;
    const double C9184 = C31604 * C1084;
    const double C18704 = C31679 * C1084;
    const double C20515 = C15916 * C1084;
    const double C2585 = C762 * C1094;
    const double C11204 = C5340 * C1094;
    const double C13166 = C31604 * C1094;
    const double C17381 = C15916 * C1094;
    const double C19196 = C31679 * C1094;
    const double C2036 = C762 * C1992;
    const double C10675 = C5340 * C1992;
    const double C14156 = C31604 * C1992;
    const double C23284 = C15916 * C1992;
    const double C24778 = C31679 * C1992;
    const double C31911 = C31870 + C31909;
    const double C31932 = C31916 + C31917;
    const double C1284 = C32826 * C255;
    const double C2825 = C32803 * C255;
    const double C5798 = C32826 * C255;
    const double C15230 = C32803 * C255;
    const double C18391 = C17925 * C255;
    const double C2398 = C32826 * C360;
    const double C3721 = C32803 * C360;
    const double C11029 = C32826 * C360;
    const double C21227 = C32803 * C360;
    const double C25101 = C17925 * C360;
    const double C3381 = C32803 * C640;
    const double C4819 = C32826 * C640;
    const double C15786 = C32803 * C640;
    const double C19450 = C17925 * C640;
    const double C26920 = C32826 * C640;
    const double C2569 =
        (2 * C32023 * C32296 + C32023 * (C32296 + C31989 * C31971 * C32039)) /
        C31578;
    const double C923 = C762 * C880;
    const double C5477 = C5340 * C880;
    const double C8154 = C31604 * C880;
    const double C16325 = C15916 * C880;
    const double C18070 = C31679 * C880;
    const double C1611 = C762 * C1083;
    const double C6109 = C5340 * C1083;
    const double C9182 = C31604 * C1083;
    const double C18702 = C31679 * C1083;
    const double C20513 = C15916 * C1083;
    const double C2583 = C762 * C1093;
    const double C11202 = C5340 * C1093;
    const double C13164 = C31604 * C1093;
    const double C17379 = C15916 * C1093;
    const double C19194 = C31679 * C1093;
    const double C2034 = C762 * C1991;
    const double C10673 = C5340 * C1991;
    const double C14154 = C31604 * C1991;
    const double C23282 = C15916 * C1991;
    const double C24776 = C31679 * C1991;
    const double C1272 = C32826 * C248;
    const double C2821 = C32803 * C248;
    const double C3101 = C2695 * C248;
    const double C5786 = C32826 * C248;
    const double C15226 = C32803 * C248;
    const double C15506 = C32853 * C248;
    const double C18379 = C17925 * C248;
    const double C2386 = C32826 * C353;
    const double C3717 = C32803 * C353;
    const double C4029 = C2695 * C353;
    const double C11017 = C32826 * C353;
    const double C19665 = C17925 * C353;
    const double C21223 = C32803 * C353;
    const double C21535 = C32853 * C353;
    const double C31978 = C31931 + C31975;
    const double C31977 = C31927 + C31974;
    const double C31976 = C31795 * C31973;
    const double C1259 =
        (2 * (ae * (2 * C31990 + C31989 * C32014) +
              be * (2 * C31991 + C31989 * C32015) + C31795 * C32122) +
         ae * (2 * C31989 * C31906 + C31989 * (C31906 + C31971 * C32005)) +
         be * (2 * C31989 * C31907 + C31989 * (C31907 + C31972 * C32005)) +
         C31795 *
             (C32122 + ae * (2 * C32057 + C31989 * (C31896 + C31957 * C32005)) +
              be * (2 * C32058 + C31989 * (C31898 + C31959 * C32005)) +
              C31795 *
                  (ae * (2 * C32059 + C31989 * (C31884 + C31945 * C32005)) +
                   be * (2 * C32060 + C31989 * (C31887 + C31948 * C32005)) +
                   C31795 * (2 * C32061 +
                             C31989 * (C31956 +
                                       (C31924 * C31925 +
                                        C31799 * bs[8] * std::pow(C31793, 8)) *
                                           C31581 * C32005))))) /
        C31583;
    const double C1608 = (ae * C32023 * (2 * C31990 + C31989 * C32014) +
                          be * C32023 * (2 * C31991 + C31989 * C32015) +
                          C31795 * C32023 * C32122) /
                         C31583;
    const double C1609 =
        (C32023 * C32122 +
         ae * C32023 * (2 * C32057 + C31989 * (C31896 + C31957 * C32005)) +
         be * C32023 * (2 * C32058 + C31989 * (C31898 + C31959 * C32005)) +
         C31795 *
             (ae * C32023 * (2 * C32059 + C31989 * (C31884 + C31945 * C32005)) +
              be * C32023 * (2 * C32060 + C31989 * (C31887 + C31948 * C32005)) +
              C31795 * C32023 *
                  (2 * C32061 +
                   C31989 * (C31956 + (C31924 * C31925 +
                                       C31799 * bs[8] * std::pow(C31793, 8)) *
                                          C31581 * C32005)))) /
        C31583;
    const double C6288 = (4 * (2 * C31999 + C31989 * C32009) +
                          C31989 * (3 * C32009 + C31989 * C32122)) /
                         C31583;
    const double C6289 =
        (5 * (3 * C32009 + C31989 * C32122) +
         C31989 *
             (4 * C32122 +
              C31989 * (3 * C32016 +
                        C31989 * (2 * C32061 +
                                  C31989 * (C31956 + (C31924 * C31925 +
                                                      C31799 * bs[8] *
                                                          std::pow(C31793, 8)) *
                                                         C31581 * C32005))))) /
        C31583;
    const double C6401 = (C32023 * (3 * C32009 + C31989 * C32122)) / C31583;
    const double C6402 =
        (2 * C31999 + C31989 * C32009 + C32122 * C32039) / C31583;
    const double C6403 =
        (3 * C32009 + C31989 * C32122 +
         (3 * C32016 +
          C31989 * (2 * C32061 +
                    C31989 * (C31956 + (C31924 * C31925 +
                                        C31799 * bs[8] * std::pow(C31793, 8)) *
                                           C31581 * C32005))) *
             C32039) /
        C31583;
    const double C6489 =
        (ae * (4 * (2 * C31990 + C31989 * C32014) +
               C31989 * (3 * C32014 +
                         C31989 * (2 * C32059 +
                                   C31989 * (C31884 + C31945 * C32005)))) +
         be * (4 * (2 * C31991 + C31989 * C32015) +
               C31989 * (3 * C32015 +
                         C31989 * (2 * C32060 +
                                   C31989 * (C31887 + C31948 * C32005)))) +
         C31795 *
             (4 * C32122 +
              C31989 * (3 * C32016 +
                        C31989 * (2 * C32061 +
                                  C31989 * (C31956 + (C31924 * C31925 +
                                                      C31799 * bs[8] *
                                                          std::pow(C31793, 8)) *
                                                         C31581 * C32005))))) /
        C31583;
    const double C6693 =
        (C32023 *
         (4 * C32122 +
          C31989 * (3 * C32016 +
                    C31989 * (2 * C32061 +
                              C31989 * (C31956 +
                                        (C31924 * C31925 +
                                         C31799 * bs[8] * std::pow(C31793, 8)) *
                                            C31581 * C32005))))) /
        C31583;
    const double C7284 =
        (ae * (2 * C31990 + C31989 * C32014 +
               (2 * C32059 + C31989 * (C31884 + C31945 * C32005)) * C32039) +
         be * (2 * C31991 + C31989 * C32015 +
               (2 * C32060 + C31989 * (C31887 + C31948 * C32005)) * C32039) +
         C31795 * (C32122 +
                   (2 * C32061 +
                    C31989 * (C31956 + (C31924 * C31925 +
                                        C31799 * bs[8] * std::pow(C31793, 8)) *
                                           C31581 * C32005)) *
                       C32039)) /
        C31583;
    const double C7632 =
        (2 * C32023 * C32122 +
         C32023 * (C32122 +
                   (2 * C32061 +
                    C31989 * (C31956 + (C31924 * C31925 +
                                        C31799 * bs[8] * std::pow(C31793, 8)) *
                                           C31581 * C32005)) *
                       C32039)) /
        C31583;
    const double C2373 =
        (2 * (ae * (2 * C32024 + C32023 * C32048) +
              be * (2 * C32025 + C32023 * C32049) + C31795 * C32140) +
         ae * (2 * C32023 * C31906 + C32023 * (C31906 + C31971 * C32039)) +
         be * (2 * C32023 * C31907 + C32023 * (C31907 + C31972 * C32039)) +
         C31795 *
             (C32140 + ae * (2 * C32074 + C32023 * (C31896 + C31957 * C32039)) +
              be * (2 * C32075 + C32023 * (C31898 + C31959 * C32039)) +
              C31795 *
                  (ae * (2 * C32076 + C32023 * (C31884 + C31945 * C32039)) +
                   be * (2 * C32077 + C32023 * (C31887 + C31948 * C32039)) +
                   C31795 * (2 * C32078 +
                             C32023 * (C31956 +
                                       (C31924 * C31925 +
                                        C31799 * bs[8] * std::pow(C31793, 8)) *
                                           C31581 * C32039))))) /
        C31583;
    const double C12202 = (4 * (2 * C32033 + C32023 * C32043) +
                           C32023 * (3 * C32043 + C32023 * C32140)) /
                          C31583;
    const double C12203 =
        (5 * (3 * C32043 + C32023 * C32140) +
         C32023 *
             (4 * C32140 +
              C32023 * (3 * C32050 +
                        C32023 * (2 * C32078 +
                                  C32023 * (C31956 + (C31924 * C31925 +
                                                      C31799 * bs[8] *
                                                          std::pow(C31793, 8)) *
                                                         C31581 * C32039))))) /
        C31583;
    const double C12389 =
        (ae * (4 * (2 * C32024 + C32023 * C32048) +
               C32023 * (3 * C32048 +
                         C32023 * (2 * C32076 +
                                   C32023 * (C31884 + C31945 * C32039)))) +
         be * (4 * (2 * C32025 + C32023 * C32049) +
               C32023 * (3 * C32049 +
                         C32023 * (2 * C32077 +
                                   C32023 * (C31887 + C31948 * C32039)))) +
         C31795 *
             (4 * C32140 +
              C32023 * (3 * C32050 +
                        C32023 * (2 * C32078 +
                                  C32023 * (C31956 + (C31924 * C31925 +
                                                      C31799 * bs[8] *
                                                          std::pow(C31793, 8)) *
                                                         C31581 * C32039))))) /
        C31583;
    const double C32072 = C32069 + C32071;
    const double C12941 = C32498 * C2572;
    const double C14732 = C32488 * C2572;
    const double C17135 = C32498 * C2572;
    const double C12494 = C32488 * C7098;
    const double C32089 = C32086 + C32088;
    const double C32874 = C32839 + C32869;
    const double C7740 = C32859 - (C32643 * C32632) / C31578;
    const double C6216 = C32860 / C31584 - C32641 / C31684;
    const double C32870 = C32841 + C32859;
    const double C32875 = C32844 + C32871;
    const double C13675 = C32862 - (C32683 * C32672) / C31578;
    const double C12070 = C32863 / C31584 - C32681 / C31684;
    const double C32872 = C32846 + C32862;
    const double C31623 = C31620 - C31599;
    const double C31655 = C31651 / C31590;
    const double C31654 = C31651 / C31578;
    const double C924 = C763 * C874;
    const double C920 = C763 * C224;
    const double C908 = C763 * C219;
    const double C1282 = C763 * C225;
    const double C1270 = C763 * C218;
    const double C1624 = C763 * C624;
    const double C1612 = C763 * C1074;
    const double C2035 = C763 * C1985;
    const double C2031 = C763 * C329;
    const double C2019 = C763 * C324;
    const double C2396 = C763 * C330;
    const double C2384 = C763 * C323;
    const double C2584 = C763 * C1079;
    const double C4817 = C763 * C625;
    const double C2823 = C2706 * C225;
    const double C2819 = C2706 * C218;
    const double C3103 = C2706 * C217;
    const double C3379 = C2706 * C625;
    const double C3719 = C2706 * C330;
    const double C3715 = C2706 * C323;
    const double C4031 = C2706 * C322;
    const double C5478 = C5341 * C874;
    const double C5474 = C5341 * C224;
    const double C5462 = C5341 * C219;
    const double C5796 = C5341 * C225;
    const double C5784 = C5341 * C218;
    const double C6122 = C5341 * C624;
    const double C6110 = C5341 * C1074;
    const double C10674 = C5341 * C1985;
    const double C10670 = C5341 * C329;
    const double C10658 = C5341 * C324;
    const double C11027 = C5341 * C330;
    const double C11015 = C5341 * C323;
    const double C11203 = C5341 * C1079;
    const double C26918 = C5341 * C625;
    const double C6308 = C6219 * C6282;
    const double C6304 = C6219 * C877;
    const double C6300 = C6219 * C876;
    const double C6296 = C6219 * C222;
    const double C6292 = C6219 * C221;
    const double C6504 = C6219 * C878;
    const double C6500 = C6219 * C875;
    const double C6496 = C6219 * C223;
    const double C6492 = C6219 * C220;
    const double C6708 = C6219 * C622;
    const double C6704 = C6219 * C1076;
    const double C6700 = C6219 * C1598;
    const double C6696 = C6219 * C6392;
    const double C6960 = C6219 * C6393;
    const double C6956 = C6219 * C1080;
    const double C6950 = C6219 * C1077;
    const double C7118 = C6219 * C1987;
    const double C7114 = C6219 * C2562;
    const double C7110 = C6219 * C7088;
    const double C7106 = C6219 * C327;
    const double C7102 = C6219 * C326;
    const double C7301 = C6219 * C1081;
    const double C7297 = C6219 * C1075;
    const double C7292 = C6219 * C1078;
    const double C7288 = C6219 * C623;
    const double C7475 = C6219 * C328;
    const double C7471 = C6219 * C325;
    const double C10043 = C6219 * C1599;
    const double C12210 = C6219 * C12196;
    const double C12206 = C6219 * C1988;
    const double C12396 = C6219 * C1989;
    const double C12392 = C6219 * C1986;
    const double C12492 = C6219 * C7089;
    const double C14730 = C6219 * C2563;
    const double C7871 = C7746 * C878;
    const double C7867 = C7746 * C875;
    const double C7859 = C7746 * C223;
    const double C7851 = C7746 * C220;
    const double C8155 = C7746 * C874;
    const double C8147 = C7746 * C224;
    const double C8139 = C7746 * C219;
    const double C8453 = C7746 * C623;
    const double C8445 = C7746 * C1075;
    const double C8437 = C7746 * C1599;
    const double C8945 = C7746 * C328;
    const double C8937 = C7746 * C1078;
    const double C8929 = C7746 * C1081;
    const double C8925 = C7746 * C325;
    const double C9183 = C7746 * C1074;
    const double C9175 = C7746 * C624;
    const double C9397 = C7746 * C324;
    const double C12947 = C7746 * C1986;
    const double C12939 = C7746 * C2563;
    const double C13165 = C7746 * C1079;
    const double C13373 = C7746 * C329;
    const double C13877 = C7746 * C1989;
    const double C14155 = C7746 * C1985;
    const double C15228 = C15111 * C225;
    const double C15224 = C15111 * C218;
    const double C15508 = C15111 * C217;
    const double C15784 = C15111 * C625;
    const double C21225 = C15111 * C330;
    const double C21221 = C15111 * C323;
    const double C21537 = C15111 * C322;
    const double C16042 = C15917 * C878;
    const double C16038 = C15917 * C875;
    const double C16030 = C15917 * C223;
    const double C16022 = C15917 * C220;
    const double C16326 = C15917 * C874;
    const double C16318 = C15917 * C224;
    const double C16310 = C15917 * C219;
    const double C16624 = C15917 * C623;
    const double C16616 = C15917 * C1075;
    const double C16608 = C15917 * C1599;
    const double C16950 = C15917 * C1081;
    const double C16946 = C15917 * C1078;
    const double C17141 = C15917 * C1986;
    const double C17133 = C15917 * C2563;
    const double C17128 = C15917 * C328;
    const double C17120 = C15917 * C325;
    const double C17380 = C15917 * C1079;
    const double C17372 = C15917 * C624;
    const double C17602 = C15917 * C329;
    const double C17594 = C15917 * C324;
    const double C20514 = C15917 * C1074;
    const double C23005 = C15917 * C1989;
    const double C23283 = C15917 * C1985;
    const double C18071 = C17934 * C874;
    const double C18067 = C17934 * C224;
    const double C18055 = C17934 * C219;
    const double C18389 = C17934 * C225;
    const double C18377 = C17934 * C218;
    const double C18715 = C17934 * C624;
    const double C18703 = C17934 * C1074;
    const double C19207 = C17934 * C329;
    const double C19195 = C17934 * C1079;
    const double C19191 = C17934 * C324;
    const double C19448 = C17934 * C625;
    const double C19663 = C17934 * C323;
    const double C24777 = C17934 * C1985;
    const double C25099 = C17934 * C330;
    const double C15242 = C32873 * C252;
    const double C15214 = C32873 * C251;
    const double C15498 = C32873 * C250;
    const double C15798 = C32873 * C637;
    const double C21239 = C32873 * C357;
    const double C21211 = C32873 * C356;
    const double C21527 = C32873 * C355;
    const double C101 =
        (C32864 + 2 * C32493) / C31584 - (C32873 * C32484) / C31578;
    const double C2833 = C2694 * C253;
    const double C2813 = C2694 * C250;
    const double C3097 = C2694 * C249;
    const double C3389 = C2694 * C638;
    const double C3729 = C2694 * C358;
    const double C3709 = C2694 * C355;
    const double C4025 = C2694 * C354;
    const double C15238 = C32866 * C253;
    const double C15218 = C32866 * C250;
    const double C15502 = C32866 * C249;
    const double C15794 = C32866 * C638;
    const double C21235 = C32866 * C358;
    const double C21215 = C32866 * C355;
    const double C21531 = C32866 * C354;
    const double C102 =
        (C32851 + 2 * C32501 + C32873) / C31584 - (C32866 * C32484) / C31578;
    const double C103 = (C32826 + C32498 / C31578 + C32866) / C31584 -
                        (C32853 * C32484) / C31578;
    const double C31914 = C31912 + C31894;
    const double C31913 = C31911 + C31891;
    const double C31942 = C31932 + C31918;
    const double C31981 = C31978 + C31955;
    const double C31980 = C31977 + C31952;
    const double C8439 = C32498 * C1608;
    const double C10045 = C32488 * C1608;
    const double C16610 = C32498 * C1608;
    const double C6310 = C32488 * C6288;
    const double C6698 = C32488 * C6401;
    const double C6962 = C32488 * C6402;
    const double C12212 = C32488 * C12202;
    const double C6213 =
        (C32867 + 2 * C32636) / C31584 - (C32874 * C32632) / C31578;
    const double C6214 =
        (C32855 + 2 * C32643 + C32874) / C31584 - (C32870 * C32632) / C31578;
    const double C6215 = (C32835 + C32640 / C31578 + C32870) / C31584 -
                         (C32860 * C32632) / C31578;
    const double C12067 =
        (C32868 + 2 * C32676) / C31584 - (C32875 * C32672) / C31578;
    const double C12068 =
        (C32857 + 2 * C32683 + C32875) / C31584 - (C32872 * C32672) / C31578;
    const double C12069 = (C32838 + C32680 / C31578 + C32872) / C31584 -
                          (C32863 * C32672) / C31578;
    const double C7876 = C31623 * C887;
    const double C7874 = C31623 * C886;
    const double C7864 = C31623 * C885;
    const double C7862 = C31623 * C884;
    const double C7856 = C31623 * C238;
    const double C7854 = C31623 * C237;
    const double C7848 = C31623 * C236;
    const double C7846 = C31623 * C235;
    const double C8152 = C31623 * C883;
    const double C8150 = C31623 * C882;
    const double C8144 = C31623 * C240;
    const double C8142 = C31623 * C239;
    const double C8136 = C31623 * C234;
    const double C8134 = C31623 * C233;
    const double C8458 = C31623 * C628;
    const double C8456 = C31623 * C627;
    const double C8450 = C31623 * C1088;
    const double C8448 = C31623 * C1087;
    const double C8442 = C31623 * C1602;
    const double C8440 = C31623 * C1601;
    const double C8950 = C31623 * C343;
    const double C8948 = C31623 * C342;
    const double C8942 = C31623 * C1090;
    const double C8940 = C31623 * C1089;
    const double C8934 = C31623 * C1096;
    const double C8932 = C31623 * C1095;
    const double C8922 = C31623 * C341;
    const double C8920 = C31623 * C340;
    const double C9180 = C31623 * C1086;
    const double C9178 = C31623 * C1085;
    const double C9172 = C31623 * C630;
    const double C9170 = C31623 * C629;
    const double C9394 = C31623 * C339;
    const double C9392 = C31623 * C338;
    const double C12952 = C31623 * C1996;
    const double C12950 = C31623 * C1995;
    const double C12944 = C31623 * C2566;
    const double C12942 = C31623 * C2565;
    const double C13162 = C31623 * C1092;
    const double C13160 = C31623 * C1091;
    const double C13370 = C31623 * C345;
    const double C13368 = C31623 * C344;
    const double C13882 = C31623 * C1998;
    const double C13880 = C31623 * C1997;
    const double C14152 = C31623 * C1994;
    const double C14150 = C31623 * C1993;
    const double C31626 = C31623 / C31584;
    const double C31625 = C31576 * C31623;
    const double C31642 = 2 * C31623;
    const double C31658 = C31643 - C31655;
    const double C31657 = C31646 - C31654;
    const double C941 = C923 - C924;
    const double C940 = C919 - C920;
    const double C937 = C907 - C908;
    const double C1287 = C1269 - C1270;
    const double C1638 = C1623 - C1624;
    const double C1635 = C1611 - C1612;
    const double C2052 = C2034 - C2035;
    const double C2051 = C2030 - C2031;
    const double C2048 = C2018 - C2019;
    const double C2401 = C2383 - C2384;
    const double C2589 = C2583 - C2584;
    const double C2841 = C2818 - C2819;
    const double C3737 = C3714 - C3715;
    const double C5495 = C5477 - C5478;
    const double C5494 = C5473 - C5474;
    const double C5491 = C5461 - C5462;
    const double C5801 = C5783 - C5784;
    const double C6136 = C6121 - C6122;
    const double C6133 = C6109 - C6110;
    const double C10691 = C10673 - C10674;
    const double C10690 = C10669 - C10670;
    const double C10687 = C10657 - C10658;
    const double C11032 = C11014 - C11015;
    const double C11208 = C11202 - C11203;
    const double C6315 = C6307 - C6308;
    const double C6314 = C6303 - C6304;
    const double C6313 = C6299 - C6300;
    const double C6312 = C6295 - C6296;
    const double C6311 = C6291 - C6292;
    const double C6510 = C6503 - C6504;
    const double C6509 = C6499 - C6500;
    const double C6508 = C6495 - C6496;
    const double C6507 = C6491 - C6492;
    const double C6714 = C6707 - C6708;
    const double C6713 = C6703 - C6704;
    const double C6712 = C6699 - C6700;
    const double C6711 = C6695 - C6696;
    const double C6968 = C6959 - C6960;
    const double C6967 = C6955 - C6956;
    const double C6965 = C6949 - C6950;
    const double C7125 = C7117 - C7118;
    const double C7124 = C7113 - C7114;
    const double C7123 = C7109 - C7110;
    const double C7122 = C7105 - C7106;
    const double C7121 = C7101 - C7102;
    const double C7307 = C7300 - C7301;
    const double C7306 = C7296 - C7297;
    const double C7305 = C7291 - C7292;
    const double C7304 = C7287 - C7288;
    const double C7479 = C7474 - C7475;
    const double C7478 = C7470 - C7471;
    const double C10046 = C10042 - C10043;
    const double C12214 = C12209 - C12210;
    const double C12213 = C12205 - C12206;
    const double C12400 = C12395 - C12396;
    const double C12399 = C12391 - C12392;
    const double C12495 = C12491 - C12492;
    const double C14733 = C14729 - C14730;
    const double C7884 = C7870 - C7871;
    const double C7883 = C7866 - C7867;
    const double C7881 = C7858 - C7859;
    const double C7879 = C7850 - C7851;
    const double C8163 = C8154 - C8155;
    const double C8161 = C8146 - C8147;
    const double C8159 = C8138 - C8139;
    const double C8464 = C8452 - C8453;
    const double C8462 = C8444 - C8445;
    const double C8460 = C8436 - C8437;
    const double C8958 = C8944 - C8945;
    const double C8956 = C8936 - C8937;
    const double C8954 = C8928 - C8929;
    const double C8953 = C8924 - C8925;
    const double C9189 = C9182 - C9183;
    const double C9187 = C9174 - C9175;
    const double C9401 = C9396 - C9397;
    const double C12956 = C12946 - C12947;
    const double C12954 = C12938 - C12939;
    const double C13169 = C13164 - C13165;
    const double C13377 = C13372 - C13373;
    const double C13884 = C13876 - C13877;
    const double C14159 = C14154 - C14155;
    const double C15246 = C15223 - C15224;
    const double C21243 = C21220 - C21221;
    const double C16055 = C16041 - C16042;
    const double C16054 = C16037 - C16038;
    const double C16052 = C16029 - C16030;
    const double C16050 = C16021 - C16022;
    const double C16334 = C16325 - C16326;
    const double C16332 = C16317 - C16318;
    const double C16330 = C16309 - C16310;
    const double C16635 = C16623 - C16624;
    const double C16633 = C16615 - C16616;
    const double C16631 = C16607 - C16608;
    const double C16959 = C16949 - C16950;
    const double C16958 = C16945 - C16946;
    const double C17154 = C17140 - C17141;
    const double C17152 = C17132 - C17133;
    const double C17151 = C17127 - C17128;
    const double C17149 = C17119 - C17120;
    const double C17386 = C17379 - C17380;
    const double C17384 = C17371 - C17372;
    const double C17608 = C17601 - C17602;
    const double C17606 = C17593 - C17594;
    const double C20518 = C20513 - C20514;
    const double C23012 = C23004 - C23005;
    const double C23287 = C23282 - C23283;
    const double C18088 = C18070 - C18071;
    const double C18087 = C18066 - C18067;
    const double C18084 = C18054 - C18055;
    const double C18394 = C18376 - C18377;
    const double C18729 = C18714 - C18715;
    const double C18726 = C18702 - C18703;
    const double C19224 = C19206 - C19207;
    const double C19221 = C19194 - C19195;
    const double C19220 = C19190 - C19191;
    const double C19668 = C19662 - C19663;
    const double C24789 = C24776 - C24777;
    const double C141 = (4 * (2 * C31827 + C31795 * C31861 + C31845 * ae) +
                         C31795 * (3 * C31861 + C31795 * C31914 + C31897 * ae) +
                         (3 * C31845 + C31795 * C31897) * ae) /
                        C31578;
    const double C228 =
        (C31989 * (3 * C31861 + C31795 * C31914 + C31897 * ae)) / C31578;
    const double C244 =
        (2 * C31827 + C31795 * C31861 + C31845 * ae + C31914 * C32005) / C31578;
    const double C333 =
        (C32023 * (3 * C31861 + C31795 * C31914 + C31897 * ae)) / C31578;
    const double C349 =
        (2 * C31827 + C31795 * C31861 + C31845 * ae + C31914 * C32039) / C31578;
    const double C634 = (C32023 * C31989 * C31914) / C31578;
    const double C149 =
        (4 * (2 * C31857 + ae * C31860 + be * C31861 + C31795 * C31908) +
         ae * (3 * C31860 + C31795 * C31913 + C31897 * be) +
         be * (3 * C31861 + C31795 * C31914 + C31897 * ae) +
         C31795 * (3 * C31908 + ae * C31913 + be * C31914 +
                   C31795 * (2 * C31902 + ae * C31906 + be * C31907 +
                             C31795 * (C31895 + ae * C31896 + be * C31898 +
                                       C31795 * (ae * C31884 + be * C31887 +
                                                 C31795 *
                                                     (C31868 * C31869 +
                                                      C31799 * bs[7] *
                                                          std::pow(C31801, 7)) *
                                                     C31581))))) /
        C31583;
    const double C247 =
        (3 * (C31989 * C31851 + ae * C31989 * C31852 + be * C31989 * C31853 +
              C31795 * C31997) +
         ae * C31989 * C31913 + be * C31989 * C31914 +
         C31795 *
             (2 * C31997 + ae * C31989 * C31906 + be * C31989 * C31907 +
              C31795 * (C31992 + ae * C31989 * C31896 + be * C31989 * C31898 +
                        C31795 * (ae * C31989 * C31884 + be * C31989 * C31887 +
                                  C31795 * C31989 * C31956)))) /
        C31583;
    const double C352 =
        (3 * (C32023 * C31851 + ae * C32023 * C31852 + be * C32023 * C31853 +
              C31795 * C32031) +
         ae * C32023 * C31913 + be * C32023 * C31914 +
         C31795 *
             (2 * C32031 + ae * C32023 * C31906 + be * C32023 * C31907 +
              C31795 * (C32026 + ae * C32023 * C31896 + be * C32023 * C31898 +
                        C31795 * (ae * C32023 * C31884 + be * C32023 * C31887 +
                                  C31795 * C32023 * C31956)))) /
        C31583;
    const double C140 = (4 * (2 * C31826 + C31795 * C31860 + C31845 * be) +
                         C31795 * (3 * C31860 + C31795 * C31913 + C31897 * be) +
                         (3 * C31845 + C31795 * C31897) * be) /
                        C31578;
    const double C227 =
        (C31989 * (3 * C31860 + C31795 * C31913 + C31897 * be)) / C31578;
    const double C243 =
        (2 * C31826 + C31795 * C31860 + C31845 * be + C31913 * C32005) / C31578;
    const double C332 =
        (C32023 * (3 * C31860 + C31795 * C31913 + C31897 * be)) / C31578;
    const double C348 =
        (2 * C31826 + C31795 * C31860 + C31845 * be + C31913 * C32039) / C31578;
    const double C633 = (C32023 * C31989 * C31913) / C31578;
    const double C31979 = C31942 + C31976;
    const double C31983 = C31795 * C31981;
    const double C1258 =
        (2 * C31989 * C31914 + C31989 * (C31914 + C31981 * C32005)) / C31578;
    const double C1450 = (C32023 * (C31914 + C31981 * C32005)) / C31578;
    const double C2222 = (C31989 * C31914 + C31989 * C31981 * C32039) / C31578;
    const double C2372 =
        (2 * C32023 * C31914 + C32023 * (C31914 + C31981 * C32039)) / C31578;
    const double C31982 = C31795 * C31980;
    const double C256 =
        (3 * (C32009 + ae * (C31852 + C31896 * C32005) +
              be * (C31853 + C31898 * C32005) + C31795 * C32021) +
         ae * (C31913 + C31980 * C32005) + be * (C31914 + C31981 * C32005) +
         C31795 *
             (2 * C32021 + ae * (C31906 + C31971 * C32005) +
              be * (C31907 + C31972 * C32005) +
              C31795 * (C32016 + ae * (C31896 + C31957 * C32005) +
                        be * (C31898 + C31959 * C32005) +
                        C31795 * (ae * (C31884 + C31945 * C32005) +
                                  be * (C31887 + C31948 * C32005) +
                                  C31795 * (C31956 + (C31924 * C31925 +
                                                      C31799 * bs[8] *
                                                          std::pow(C31793, 8)) *
                                                         C31581 * C32005))))) /
        C31583;
    const double C361 =
        (3 * (C32043 + ae * (C31852 + C31896 * C32039) +
              be * (C31853 + C31898 * C32039) + C31795 * C32055) +
         ae * (C31913 + C31980 * C32039) + be * (C31914 + C31981 * C32039) +
         C31795 *
             (2 * C32055 + ae * (C31906 + C31971 * C32039) +
              be * (C31907 + C31972 * C32039) +
              C31795 * (C32050 + ae * (C31896 + C31957 * C32039) +
                        be * (C31898 + C31959 * C32039) +
                        C31795 * (ae * (C31884 + C31945 * C32039) +
                                  be * (C31887 + C31948 * C32039) +
                                  C31795 * (C31956 + (C31924 * C31925 +
                                                      C31799 * bs[8] *
                                                          std::pow(C31793, 8)) *
                                                         C31581 * C32039))))) /
        C31583;
    const double C641 =
        (3 * (C32094 + ae * C32023 * C32057 + be * C32023 * C32058 +
              C31795 * C32103) +
         ae * C32023 * C31989 * C31980 + be * C32023 * C31989 * C31981 +
         C31795 *
             (2 * C32103 + ae * C32023 * C31989 * C31971 +
              be * C32023 * C31989 * C31972 +
              C31795 * (C32098 + ae * C32023 * C31989 * C31957 +
                        be * C32023 * C31989 * C31959 +
                        C31795 * (ae * C32023 * C31989 * C31945 +
                                  be * C32023 * C31989 * C31948 +
                                  C31795 * C32023 * C31989 *
                                      (C31924 * C31925 +
                                       C31799 * bs[8] * std::pow(C31793, 8)) *
                                      C31581)))) /
        C31583;
    const double C1257 =
        (2 * C31989 * C31913 + C31989 * (C31913 + C31980 * C32005)) / C31578;
    const double C1449 = (C32023 * (C31913 + C31980 * C32005)) / C31578;
    const double C2221 = (C31989 * C31913 + C31989 * C31980 * C32039) / C31578;
    const double C2371 =
        (2 * C32023 * C31913 + C32023 * (C31913 + C31980 * C32039)) / C31578;
    const double C31629 = C31626 - C31621;
    const double C5338 = C31626 + (C31612 * ae) / C31578;
    const double C31628 = C31625 + C32785;
    const double C31661 = C31658 * be;
    const double C31660 = C31657 * ae;
    const double C759 = (-(be * C31638) / C31583) / C31584 -
                        ((2 * ((-C31586) / C31584 - (C31611 * be) / C31578) -
                          (C31576 * C31657 * be) / C31578) *
                         be) /
                            C31578 -
                        C31652;
    const double C761 =
        (-(C31657 * be) / C31578) / C31584 -
        ((2 * ((-C31598 / C31578) / C31584 - (0 * be) / C31578) - C31655) *
         be) /
            C31578;
    const double C15915 = -(C31657 * be) / C31578;
    const double C950 = C941 - C925;
    const double C949 = C940 - C921;
    const double C946 = C937 - C909;
    const double C1293 = C1287 - C1271;
    const double C1644 = C1638 - C1625;
    const double C1641 = C1635 - C1613;
    const double C2061 = C2052 - C2036;
    const double C2060 = C2051 - C2032;
    const double C2057 = C2048 - C2020;
    const double C2407 = C2401 - C2385;
    const double C2592 = C2589 - C2585;
    const double C2849 = C2841 - C2820;
    const double C3745 = C3737 - C3716;
    const double C5504 = C5495 - C5479;
    const double C5503 = C5494 - C5475;
    const double C5500 = C5491 - C5463;
    const double C5807 = C5801 - C5785;
    const double C6142 = C6136 - C6123;
    const double C6139 = C6133 - C6111;
    const double C10700 = C10691 - C10675;
    const double C10699 = C10690 - C10671;
    const double C10696 = C10687 - C10659;
    const double C11038 = C11032 - C11016;
    const double C11211 = C11208 - C11204;
    const double C6320 = C6315 - C6309;
    const double C6319 = C6314 - C6305;
    const double C6318 = C6313 - C6301;
    const double C6317 = C6312 - C6297;
    const double C6316 = C6311 - C6293;
    const double C6514 = C6510 - C6505;
    const double C6513 = C6509 - C6501;
    const double C6512 = C6508 - C6497;
    const double C6511 = C6507 - C6493;
    const double C6718 = C6714 - C6709;
    const double C6717 = C6713 - C6705;
    const double C6716 = C6712 - C6701;
    const double C6715 = C6711 - C6697;
    const double C6971 = C6968 - C6961;
    const double C6970 = C6967 - C6957;
    const double C6969 = C6965 - C6951;
    const double C7130 = C7125 - C7119;
    const double C7129 = C7124 - C7115;
    const double C7128 = C7123 - C7111;
    const double C7127 = C7122 - C7107;
    const double C7126 = C7121 - C7103;
    const double C7311 = C7307 - C7302;
    const double C7310 = C7306 - C7298;
    const double C7309 = C7305 - C7293;
    const double C7308 = C7304 - C7289;
    const double C7481 = C7479 - C7476;
    const double C7480 = C7478 - C7472;
    const double C10047 = C10046 - C10044;
    const double C12216 = C12214 - C12211;
    const double C12215 = C12213 - C12207;
    const double C12402 = C12400 - C12397;
    const double C12401 = C12399 - C12393;
    const double C12496 = C12495 - C12493;
    const double C14734 = C14733 - C14731;
    const double C7892 = C7884 - C7872;
    const double C7891 = C7883 - C7868;
    const double C7889 = C7881 - C7860;
    const double C7887 = C7879 - C7852;
    const double C8169 = C8163 - C8156;
    const double C8167 = C8161 - C8148;
    const double C8165 = C8159 - C8140;
    const double C8470 = C8464 - C8454;
    const double C8468 = C8462 - C8446;
    const double C8466 = C8460 - C8438;
    const double C8966 = C8958 - C8946;
    const double C8964 = C8956 - C8938;
    const double C8962 = C8954 - C8930;
    const double C8961 = C8953 - C8926;
    const double C9193 = C9189 - C9184;
    const double C9191 = C9187 - C9176;
    const double C9403 = C9401 - C9398;
    const double C12960 = C12956 - C12948;
    const double C12958 = C12954 - C12940;
    const double C13171 = C13169 - C13166;
    const double C13379 = C13377 - C13374;
    const double C13886 = C13884 - C13878;
    const double C14161 = C14159 - C14156;
    const double C15254 = C15246 - C15225;
    const double C21251 = C21243 - C21222;
    const double C16063 = C16055 - C16043;
    const double C16062 = C16054 - C16039;
    const double C16060 = C16052 - C16031;
    const double C16058 = C16050 - C16023;
    const double C16340 = C16334 - C16327;
    const double C16338 = C16332 - C16319;
    const double C16336 = C16330 - C16311;
    const double C16641 = C16635 - C16625;
    const double C16639 = C16633 - C16617;
    const double C16637 = C16631 - C16609;
    const double C16963 = C16959 - C16951;
    const double C16962 = C16958 - C16947;
    const double C17162 = C17154 - C17142;
    const double C17160 = C17152 - C17134;
    const double C17159 = C17151 - C17129;
    const double C17157 = C17149 - C17121;
    const double C17390 = C17386 - C17381;
    const double C17388 = C17384 - C17373;
    const double C17612 = C17608 - C17603;
    const double C17610 = C17606 - C17595;
    const double C20520 = C20518 - C20515;
    const double C23014 = C23012 - C23006;
    const double C23289 = C23287 - C23284;
    const double C18097 = C18088 - C18072;
    const double C18096 = C18087 - C18068;
    const double C18093 = C18084 - C18056;
    const double C18400 = C18394 - C18378;
    const double C18735 = C18729 - C18716;
    const double C18732 = C18726 - C18704;
    const double C19233 = C19224 - C19208;
    const double C19230 = C19221 - C19196;
    const double C19229 = C19220 - C19192;
    const double C19671 = C19668 - C19664;
    const double C24792 = C24789 - C24778;
    const double C3104 = C2705 * C228;
    const double C15509 = C15110 * C228;
    const double C1283 = C762 * C244;
    const double C2824 = C2705 * C244;
    const double C5797 = C5340 * C244;
    const double C15229 = C15110 * C244;
    const double C18390 = C31679 * C244;
    const double C4032 = C2705 * C333;
    const double C21538 = C15110 * C333;
    const double C2397 = C762 * C349;
    const double C3720 = C2705 * C349;
    const double C11028 = C5340 * C349;
    const double C21226 = C15110 * C349;
    const double C25100 = C31679 * C349;
    const double C3380 = C2705 * C634;
    const double C4818 = C762 * C634;
    const double C15785 = C15110 * C634;
    const double C19449 = C31679 * C634;
    const double C26919 = C5340 * C634;
    const double C3105 = C32803 * C247;
    const double C15510 = C32803 * C247;
    const double C4033 = C32803 * C352;
    const double C21539 = C32803 * C352;
    const double C3102 = C2705 * C227;
    const double C15507 = C15110 * C227;
    const double C1281 = C762 * C243;
    const double C2822 = C2705 * C243;
    const double C5795 = C5340 * C243;
    const double C15227 = C15110 * C243;
    const double C18388 = C31679 * C243;
    const double C4030 = C2705 * C332;
    const double C21536 = C15110 * C332;
    const double C2395 = C762 * C348;
    const double C3718 = C2705 * C348;
    const double C11026 = C5340 * C348;
    const double C21224 = C15110 * C348;
    const double C25098 = C31679 * C348;
    const double C3378 = C2705 * C633;
    const double C4816 = C762 * C633;
    const double C15783 = C15110 * C633;
    const double C19447 = C31679 * C633;
    const double C26917 = C5340 * C633;
    const double C31985 = C31930 + C31983;
    const double C31984 = C31926 + C31982;
    const double C18076 = C31629 * C883;
    const double C18074 = C31629 * C882;
    const double C18064 = C31629 * C240;
    const double C18062 = C31629 * C239;
    const double C18052 = C31629 * C234;
    const double C18050 = C31629 * C233;
    const double C18386 = C31629 * C242;
    const double C18384 = C31629 * C241;
    const double C18374 = C31629 * C232;
    const double C18372 = C31629 * C231;
    const double C18720 = C31629 * C630;
    const double C18718 = C31629 * C629;
    const double C18708 = C31629 * C1086;
    const double C18706 = C31629 * C1085;
    const double C19212 = C31629 * C345;
    const double C19210 = C31629 * C344;
    const double C19200 = C31629 * C1092;
    const double C19198 = C31629 * C1091;
    const double C19188 = C31629 * C339;
    const double C19186 = C31629 * C338;
    const double C19445 = C31629 * C632;
    const double C19443 = C31629 * C631;
    const double C19660 = C31629 * C337;
    const double C19658 = C31629 * C336;
    const double C24782 = C31629 * C1994;
    const double C24780 = C31629 * C1993;
    const double C25096 = C31629 * C347;
    const double C25094 = C31629 * C346;
    const double C119 =
        (C31629 / C31584 + ((C31576 * C31679 + C17925) * ae) / C31578) /
            C31584 -
        ((C31576 * (C31679 / C31584 + (0 * ae) / C31578) + C32803) * be) /
            C31578;
    const double C2703 =
        C31629 / C31584 - ((C31576 * C31679 + C17925) * be) / C31578;
    const double C15108 =
        C31629 / C31584 + ((C31576 * C31679 + C17925) * ae) / C31578;
    const double C5483 = C5338 * C883;
    const double C5481 = C5338 * C882;
    const double C5471 = C5338 * C240;
    const double C5469 = C5338 * C239;
    const double C5459 = C5338 * C234;
    const double C5457 = C5338 * C233;
    const double C5793 = C5338 * C242;
    const double C5791 = C5338 * C241;
    const double C5781 = C5338 * C232;
    const double C5779 = C5338 * C231;
    const double C6127 = C5338 * C630;
    const double C6125 = C5338 * C629;
    const double C6115 = C5338 * C1086;
    const double C6113 = C5338 * C1085;
    const double C10679 = C5338 * C1994;
    const double C10677 = C5338 * C1993;
    const double C10667 = C5338 * C345;
    const double C10665 = C5338 * C344;
    const double C10655 = C5338 * C339;
    const double C10653 = C5338 * C338;
    const double C11024 = C5338 * C347;
    const double C11022 = C5338 * C346;
    const double C11012 = C5338 * C337;
    const double C11010 = C5338 * C336;
    const double C11200 = C5338 * C1092;
    const double C11198 = C5338 * C1091;
    const double C26915 = C5338 * C632;
    const double C26913 = C5338 * C631;
    const double C31630 = C31628 * be;
    const double C5336 = C31615 + (C31628 * ae) / C31578 + C31604;
    const double C31665 = C31661 / C31578;
    const double C31664 = C31660 / C31590;
    const double C31663 = C31576 * C31660;
    const double C7744 = C31660 / C31578;
    const double C932 = C759 * C876;
    const double C912 = C759 * C222;
    const double C900 = C759 * C221;
    const double C1274 = C759 * C223;
    const double C1262 = C759 * C220;
    const double C1632 = C759 * C622;
    const double C1620 = C759 * C1076;
    const double C2043 = C759 * C1987;
    const double C2023 = C759 * C327;
    const double C2011 = C759 * C326;
    const double C2388 = C759 * C328;
    const double C2376 = C759 * C325;
    const double C2576 = C759 * C1077;
    const double C4809 = C759 * C623;
    const double C928 = C761 * C875;
    const double C916 = C761 * C223;
    const double C904 = C761 * C220;
    const double C1278 = C761 * C224;
    const double C1266 = C761 * C219;
    const double C1628 = C761 * C623;
    const double C1616 = C761 * C1075;
    const double C2039 = C761 * C1986;
    const double C2027 = C761 * C328;
    const double C2015 = C761 * C325;
    const double C2392 = C761 * C329;
    const double C2380 = C761 * C324;
    const double C2580 = C761 * C1078;
    const double C4813 = C761 * C624;
    const double C16046 = C15915 * C877;
    const double C16034 = C15915 * C876;
    const double C16026 = C15915 * C222;
    const double C16018 = C15915 * C221;
    const double C16322 = C15915 * C875;
    const double C16314 = C15915 * C223;
    const double C16306 = C15915 * C220;
    const double C16628 = C15915 * C622;
    const double C16620 = C15915 * C1076;
    const double C16612 = C15915 * C1598;
    const double C16954 = C15915 * C1080;
    const double C16942 = C15915 * C1077;
    const double C17145 = C15915 * C1987;
    const double C17137 = C15915 * C2562;
    const double C17124 = C15915 * C327;
    const double C17116 = C15915 * C326;
    const double C17376 = C15915 * C1078;
    const double C17368 = C15915 * C623;
    const double C17598 = C15915 * C328;
    const double C17590 = C15915 * C325;
    const double C20510 = C15915 * C1075;
    const double C23009 = C15915 * C1988;
    const double C23279 = C15915 * C1986;
    const double C959 = C950 + C926;
    const double C958 = C949 + C922;
    const double C955 = C946 + C910;
    const double C1299 = C1293 + C1272;
    const double C1650 = C1644 + C1626;
    const double C1647 = C1641 + C1614;
    const double C2070 = C2061 + C2037;
    const double C2069 = C2060 + C2033;
    const double C2066 = C2057 + C2021;
    const double C2413 = C2407 + C2386;
    const double C2595 = C2592 + C2586;
    const double C2857 = C2849 + C2821;
    const double C3753 = C3745 + C3717;
    const double C5513 = C5504 + C5480;
    const double C5512 = C5503 + C5476;
    const double C5509 = C5500 + C5464;
    const double C5813 = C5807 + C5786;
    const double C6148 = C6142 + C6124;
    const double C6145 = C6139 + C6112;
    const double C10709 = C10700 + C10676;
    const double C10708 = C10699 + C10672;
    const double C10705 = C10696 + C10660;
    const double C11044 = C11038 + C11017;
    const double C11214 = C11211 + C11205;
    const double C6325 = C6320 + C6310;
    const double C6324 = C6319 + C6306;
    const double C6323 = C6318 + C6302;
    const double C6322 = C6317 + C6298;
    const double C6321 = C6316 + C6294;
    const double C6518 = C6514 + C6506;
    const double C6517 = C6513 + C6502;
    const double C6516 = C6512 + C6498;
    const double C6515 = C6511 + C6494;
    const double C6722 = C6718 + C6710;
    const double C6721 = C6717 + C6706;
    const double C6720 = C6716 + C6702;
    const double C6719 = C6715 + C6698;
    const double C6974 = C6971 + C6962;
    const double C6973 = C6970 + C6958;
    const double C6972 = C6969 + C6952;
    const double C7135 = C7130 + C7120;
    const double C7134 = C7129 + C7116;
    const double C7133 = C7128 + C7112;
    const double C7132 = C7127 + C7108;
    const double C7131 = C7126 + C7104;
    const double C7315 = C7311 + C7303;
    const double C7314 = C7310 + C7299;
    const double C7313 = C7309 + C7294;
    const double C7312 = C7308 + C7290;
    const double C7483 = C7481 + C7477;
    const double C7482 = C7480 + C7473;
    const double C10048 = C10047 + C10045;
    const double C12218 = C12216 + C12212;
    const double C12217 = C12215 + C12208;
    const double C12404 = C12402 + C12398;
    const double C12403 = C12401 + C12394;
    const double C12497 = C12496 + C12494;
    const double C14735 = C14734 + C14732;
    const double C7900 = C7892 + C7873;
    const double C7899 = C7891 + C7869;
    const double C7897 = C7889 + C7861;
    const double C7895 = C7887 + C7853;
    const double C8175 = C8169 + C8157;
    const double C8173 = C8167 + C8149;
    const double C8171 = C8165 + C8141;
    const double C8476 = C8470 + C8455;
    const double C8474 = C8468 + C8447;
    const double C8472 = C8466 + C8439;
    const double C8974 = C8966 + C8947;
    const double C8972 = C8964 + C8939;
    const double C8970 = C8962 + C8931;
    const double C8969 = C8961 + C8927;
    const double C9197 = C9193 + C9185;
    const double C9195 = C9191 + C9177;
    const double C9405 = C9403 + C9399;
    const double C12964 = C12960 + C12949;
    const double C12962 = C12958 + C12941;
    const double C13173 = C13171 + C13167;
    const double C13381 = C13379 + C13375;
    const double C13888 = C13886 + C13879;
    const double C14163 = C14161 + C14157;
    const double C15262 = C15254 + C15226;
    const double C21259 = C21251 + C21223;
    const double C16071 = C16063 + C16044;
    const double C16070 = C16062 + C16040;
    const double C16068 = C16060 + C16032;
    const double C16066 = C16058 + C16024;
    const double C16346 = C16340 + C16328;
    const double C16344 = C16338 + C16320;
    const double C16342 = C16336 + C16312;
    const double C16647 = C16641 + C16626;
    const double C16645 = C16639 + C16618;
    const double C16643 = C16637 + C16610;
    const double C16967 = C16963 + C16952;
    const double C16966 = C16962 + C16948;
    const double C17170 = C17162 + C17143;
    const double C17168 = C17160 + C17135;
    const double C17167 = C17159 + C17130;
    const double C17165 = C17157 + C17122;
    const double C17394 = C17390 + C17382;
    const double C17392 = C17388 + C17374;
    const double C17616 = C17612 + C17604;
    const double C17614 = C17610 + C17596;
    const double C20522 = C20520 + C20516;
    const double C23016 = C23014 + C23007;
    const double C23291 = C23289 + C23285;
    const double C18106 = C18097 + C18073;
    const double C18105 = C18096 + C18069;
    const double C18102 = C18093 + C18057;
    const double C18406 = C18400 + C18379;
    const double C18741 = C18735 + C18717;
    const double C18738 = C18732 + C18705;
    const double C19242 = C19233 + C19209;
    const double C19239 = C19230 + C19197;
    const double C19238 = C19229 + C19193;
    const double C19674 = C19671 + C19665;
    const double C24795 = C24792 + C24779;
    const double C3109 = C3102 - C3103;
    const double C15514 = C15507 - C15508;
    const double C1290 = C1281 - C1282;
    const double C2842 = C2822 - C2823;
    const double C5804 = C5795 - C5796;
    const double C15247 = C15227 - C15228;
    const double C18397 = C18388 - C18389;
    const double C4037 = C4030 - C4031;
    const double C21543 = C21536 - C21537;
    const double C2404 = C2395 - C2396;
    const double C3738 = C3718 - C3719;
    const double C11035 = C11026 - C11027;
    const double C21244 = C21224 - C21225;
    const double C25104 = C25098 - C25099;
    const double C3394 = C3378 - C3379;
    const double C4822 = C4816 - C4817;
    const double C15799 = C15783 - C15784;
    const double C19453 = C19447 - C19448;
    const double C26923 = C26917 - C26918;
    const double C31987 = C31985 + C31965;
    const double C31986 = C31984 + C31962;
    const double C2828 = C2703 * C242;
    const double C2826 = C2703 * C241;
    const double C2816 = C2703 * C232;
    const double C2814 = C2703 * C231;
    const double C3100 = C2703 * C230;
    const double C3098 = C2703 * C229;
    const double C3384 = C2703 * C632;
    const double C3382 = C2703 * C631;
    const double C3724 = C2703 * C347;
    const double C3722 = C2703 * C346;
    const double C3712 = C2703 * C337;
    const double C3710 = C2703 * C336;
    const double C4028 = C2703 * C335;
    const double C4026 = C2703 * C334;
    const double C15233 = C15108 * C242;
    const double C15231 = C15108 * C241;
    const double C15221 = C15108 * C232;
    const double C15219 = C15108 * C231;
    const double C15505 = C15108 * C230;
    const double C15503 = C15108 * C229;
    const double C15789 = C15108 * C632;
    const double C15787 = C15108 * C631;
    const double C21230 = C15108 * C347;
    const double C21228 = C15108 * C346;
    const double C21218 = C15108 * C337;
    const double C21216 = C15108 * C336;
    const double C21534 = C15108 * C335;
    const double C21532 = C15108 * C334;
    const double C31631 = C31630 / C31578;
    const double C5487 = C5336 * C885;
    const double C5485 = C5336 * C884;
    const double C5467 = C5336 * C238;
    const double C5465 = C5336 * C237;
    const double C5455 = C5336 * C236;
    const double C5453 = C5336 * C235;
    const double C5789 = C5336 * C240;
    const double C5787 = C5336 * C239;
    const double C5777 = C5336 * C234;
    const double C5775 = C5336 * C233;
    const double C6131 = C5336 * C628;
    const double C6129 = C5336 * C627;
    const double C6119 = C5336 * C1088;
    const double C6117 = C5336 * C1087;
    const double C10683 = C5336 * C1996;
    const double C10681 = C5336 * C1995;
    const double C10663 = C5336 * C343;
    const double C10661 = C5336 * C342;
    const double C10651 = C5336 * C341;
    const double C10649 = C5336 * C340;
    const double C11020 = C5336 * C345;
    const double C11018 = C5336 * C344;
    const double C11008 = C5336 * C339;
    const double C11006 = C5336 * C338;
    const double C11196 = C5336 * C1090;
    const double C11194 = C5336 * C1089;
    const double C26911 = C5336 * C630;
    const double C26909 = C5336 * C629;
    const double C31668 = C31664 - C31665;
    const double C5339 = C31664 + (C31658 * ae) / C31578;
    const double C31667 = C31663 / C31578;
    const double C7875 = C7744 * C877;
    const double C7863 = C7744 * C876;
    const double C7855 = C7744 * C222;
    const double C7847 = C7744 * C221;
    const double C8151 = C7744 * C875;
    const double C8143 = C7744 * C223;
    const double C8135 = C7744 * C220;
    const double C8457 = C7744 * C622;
    const double C8449 = C7744 * C1076;
    const double C8441 = C7744 * C1598;
    const double C8949 = C7744 * C327;
    const double C8941 = C7744 * C1077;
    const double C8933 = C7744 * C1080;
    const double C8921 = C7744 * C326;
    const double C9179 = C7744 * C1075;
    const double C9171 = C7744 * C623;
    const double C9393 = C7744 * C325;
    const double C12951 = C7744 * C1987;
    const double C12943 = C7744 * C2562;
    const double C13161 = C7744 * C1078;
    const double C13369 = C7744 * C328;
    const double C13881 = C7744 * C1988;
    const double C14151 = C7744 * C1986;
    const double C943 = C931 - C932;
    const double C938 = C911 - C912;
    const double C935 = C899 - C900;
    const double C1288 = C1273 - C1274;
    const double C1285 = C1261 - C1262;
    const double C1640 = C1631 - C1632;
    const double C1637 = C1619 - C1620;
    const double C2054 = C2042 - C2043;
    const double C2049 = C2022 - C2023;
    const double C2046 = C2010 - C2011;
    const double C2402 = C2387 - C2388;
    const double C2399 = C2375 - C2376;
    const double C2587 = C2575 - C2576;
    const double C4820 = C4808 - C4809;
    const double C942 = C927 - C928;
    const double C939 = C915 - C916;
    const double C936 = C903 - C904;
    const double C1289 = C1277 - C1278;
    const double C1286 = C1265 - C1266;
    const double C1639 = C1627 - C1628;
    const double C1636 = C1615 - C1616;
    const double C2053 = C2038 - C2039;
    const double C2050 = C2026 - C2027;
    const double C2047 = C2014 - C2015;
    const double C2403 = C2391 - C2392;
    const double C2400 = C2379 - C2380;
    const double C2588 = C2579 - C2580;
    const double C4821 = C4812 - C4813;
    const double C16056 = C16045 - C16046;
    const double C16053 = C16033 - C16034;
    const double C16051 = C16025 - C16026;
    const double C16049 = C16017 - C16018;
    const double C16333 = C16321 - C16322;
    const double C16331 = C16313 - C16314;
    const double C16329 = C16305 - C16306;
    const double C16636 = C16627 - C16628;
    const double C16634 = C16619 - C16620;
    const double C16632 = C16611 - C16612;
    const double C16960 = C16953 - C16954;
    const double C16957 = C16941 - C16942;
    const double C17155 = C17144 - C17145;
    const double C17153 = C17136 - C17137;
    const double C17150 = C17123 - C17124;
    const double C17148 = C17115 - C17116;
    const double C17385 = C17375 - C17376;
    const double C17383 = C17367 - C17368;
    const double C17607 = C17597 - C17598;
    const double C17605 = C17589 - C17590;
    const double C20517 = C20509 - C20510;
    const double C23013 = C23008 - C23009;
    const double C23286 = C23278 - C23279;
    const double C6330 = C6325 * C32593;
    const double C6329 = C6324 * C32593;
    const double C9806 = C6324 * C32805;
    const double C27525 = C6324 * C21009;
    const double C6328 = C6323 * C32593;
    const double C6964 = C6323 * C32868;
    const double C9803 = C6323 * C32805;
    const double C11443 = C6323 * C10425;
    const double C27522 = C6323 * C21009;
    const double C30999 = C6323 * C32676;
    const double C6327 = C6322 * C32593;
    const double C6953 = C6322 * C32868;
    const double C9801 = C6322 * C32805;
    const double C11438 = C6322 * C10425;
    const double C14497 = C6322 * C13674;
    const double C27520 = C6322 * C21009;
    const double C28231 = C6322 * C32875;
    const double C30994 = C6322 * C32676;
    const double C6326 = C6321 * C32593;
    const double C6947 = C6321 * C32868;
    const double C9799 = C6321 * C32805;
    const double C11435 = C6321 * C10425;
    const double C14490 = C6321 * C13674;
    const double C27518 = C6321 * C21009;
    const double C28224 = C6321 * C32875;
    const double C30991 = C6321 * C32676;
    const double C6522 = C6518 * C32593;
    const double C6521 = C6517 * C32593;
    const double C10041 = C6517 * C32805;
    const double C27760 = C6517 * C21009;
    const double C6520 = C6516 * C32593;
    const double C7295 = C6516 * C32868;
    const double C10039 = C6516 * C32805;
    const double C11705 = C6516 * C10425;
    const double C27758 = C6516 * C21009;
    const double C31261 = C6516 * C32676;
    const double C6519 = C6515 * C32593;
    const double C7286 = C6515 * C32868;
    const double C10037 = C6515 * C32805;
    const double C11702 = C6515 * C10425;
    const double C14726 = C6515 * C13674;
    const double C27756 = C6515 * C21009;
    const double C28460 = C6515 * C32875;
    const double C31258 = C6515 * C32676;
    const double C6726 = C6722 * C32593;
    const double C6948 = C6722 * C32857;
    const double C7639 = C6722 * C32868;
    const double C9800 = C6722 * C32680;
    const double C10315 = C6722 * C32805;
    const double C11436 = C6722 * C10426;
    const double C12005 = C6722 * C10425;
    const double C14491 = C6722 * C13675;
    const double C15000 = C6722 * C13674;
    const double C27519 = C6722 * C32680;
    const double C28027 = C6722 * C21009;
    const double C28225 = C6722 * C32872;
    const double C28727 = C6722 * C32875;
    const double C30992 = C6722 * C32683;
    const double C31561 = C6722 * C32676;
    const double C6725 = C6721 * C32593;
    const double C6954 = C6721 * C32857;
    const double C7636 = C6721 * C32868;
    const double C9802 = C6721 * C32680;
    const double C10313 = C6721 * C32805;
    const double C11439 = C6721 * C10426;
    const double C12002 = C6721 * C10425;
    const double C14496 = C6721 * C13675;
    const double C27521 = C6721 * C32680;
    const double C28025 = C6721 * C21009;
    const double C28230 = C6721 * C32872;
    const double C30995 = C6721 * C32683;
    const double C31558 = C6721 * C32676;
    const double C6724 = C6720 * C32593;
    const double C6963 = C6720 * C32857;
    const double C9804 = C6720 * C32680;
    const double C10311 = C6720 * C32805;
    const double C11442 = C6720 * C10426;
    const double C27523 = C6720 * C32680;
    const double C28023 = C6720 * C21009;
    const double C30998 = C6720 * C32683;
    const double C6723 = C6719 * C32593;
    const double C9805 = C6719 * C32680;
    const double C27524 = C6719 * C32680;
    const double C6977 = C6974 * C32838;
    const double C10310 = C6974 * C32680;
    const double C11441 = C6974 * C32838;
    const double C28022 = C6974 * C32680;
    const double C30997 = C6974 * C24553;
    const double C6976 = C6973 * C32838;
    const double C7635 = C6973 * C32857;
    const double C10312 = C6973 * C32680;
    const double C11440 = C6973 * C32838;
    const double C12001 = C6973 * C10426;
    const double C14495 = C6973 * C13676;
    const double C28024 = C6973 * C32680;
    const double C28229 = C6973 * C32863;
    const double C30996 = C6973 * C24553;
    const double C31557 = C6973 * C32683;
    const double C6975 = C6972 * C32838;
    const double C7638 = C6972 * C32857;
    const double C10314 = C6972 * C32680;
    const double C11437 = C6972 * C32838;
    const double C12004 = C6972 * C10426;
    const double C14492 = C6972 * C13676;
    const double C14999 = C6972 * C13675;
    const double C28026 = C6972 * C32680;
    const double C28226 = C6972 * C32863;
    const double C28726 = C6972 * C32872;
    const double C30993 = C6972 * C24553;
    const double C31560 = C6972 * C32683;
    const double C7637 = C7134 * C32838;
    const double C12003 = C7134 * C32838;
    const double C14493 = C7134 * C32819;
    const double C14998 = C7134 * C13676;
    const double C28227 = C7134 * C32819;
    const double C28725 = C7134 * C32863;
    const double C31559 = C7134 * C24553;
    const double C7634 = C7133 * C32838;
    const double C12000 = C7133 * C32838;
    const double C14494 = C7133 * C32819;
    const double C28228 = C7133 * C32819;
    const double C31556 = C7133 * C24553;
    const double C7319 = C7315 * C32838;
    const double C11707 = C7315 * C32838;
    const double C31263 = C7315 * C24553;
    const double C7318 = C7314 * C32857;
    const double C10040 = C7314 * C32680;
    const double C11706 = C7314 * C10426;
    const double C27759 = C7314 * C32680;
    const double C31262 = C7314 * C32683;
    const double C7317 = C7313 * C32838;
    const double C11704 = C7313 * C32838;
    const double C14728 = C7313 * C13676;
    const double C28462 = C7313 * C32863;
    const double C31260 = C7313 * C24553;
    const double C7316 = C7312 * C32857;
    const double C10038 = C7312 * C32680;
    const double C11703 = C7312 * C10426;
    const double C14727 = C7312 * C13675;
    const double C27757 = C7312 * C32680;
    const double C28461 = C7312 * C32872;
    const double C31259 = C7312 * C32683;
    const double C10049 = C10048 * C32680;
    const double C27761 = C10048 * C32680;
    const double C14997 = C12497 * C32819;
    const double C28724 = C12497 * C32819;
    const double C14736 = C14735 * C32819;
    const double C28463 = C14735 * C32819;
    const double C3113 = C3109 - C3104;
    const double C15518 = C15514 - C15509;
    const double C1296 = C1290 - C1283;
    const double C2850 = C2842 - C2824;
    const double C5810 = C5804 - C5797;
    const double C15255 = C15247 - C15229;
    const double C18403 = C18397 - C18390;
    const double C4041 = C4037 - C4032;
    const double C21547 = C21543 - C21538;
    const double C2410 = C2404 - C2397;
    const double C3746 = C3738 - C3720;
    const double C11041 = C11035 - C11028;
    const double C21252 = C21244 - C21226;
    const double C25107 = C25104 - C25100;
    const double C3398 = C3394 - C3380;
    const double C4825 = C4822 - C4818;
    const double C15803 = C15799 - C15785;
    const double C19456 = C19453 - C19449;
    const double C26926 = C26923 - C26919;
    const double C143 = (5 * (3 * C31861 + C31795 * C31914 + C31897 * ae) +
                         C31795 * (4 * C31914 + C31795 * C31987 + C31968 * ae) +
                         (4 * C31897 + C31795 * C31968) * ae) /
                        C31578;
    const double C246 =
        (3 * C31861 + C31795 * C31914 + C31897 * ae + C31987 * C32005) / C31578;
    const double C351 =
        (3 * C31861 + C31795 * C31914 + C31897 * ae + C31987 * C32039) / C31578;
    const double C450 =
        (C31989 * (4 * C31914 + C31795 * C31987 + C31968 * ae)) / C31578;
    const double C538 =
        (C32023 * (4 * C31914 + C31795 * C31987 + C31968 * ae)) / C31578;
    const double C636 = (C32023 * C31989 * C31987) / C31578;
    const double C150 =
        (5 * (3 * C31908 + ae * C31913 + be * C31914 + C31795 * C31979) +
         ae * (4 * C31913 + C31795 * C31986 + C31968 * be) +
         be * (4 * C31914 + C31795 * C31987 + C31968 * ae) +
         C31795 *
             (4 * C31979 + ae * C31986 + be * C31987 +
              C31795 *
                  (3 * C31973 + ae * C31980 + be * C31981 +
                   C31795 * (2 * C31966 + ae * C31971 + be * C31972 +
                             C31795 * (C31956 + ae * C31957 + be * C31959 +
                                       C31795 * (ae * C31945 + be * C31948 +
                                                 C31795 *
                                                     (C31924 * C31925 +
                                                      C31799 * bs[8] *
                                                          std::pow(C31793, 8)) *
                                                     C31581)))))) /
        C31583;
    const double C451 =
        (4 * (2 * C31997 + ae * C31989 * C31906 + be * C31989 * C31907 +
              C31795 * C32072) +
         ae * C31989 * C31986 + be * C31989 * C31987 +
         C31795 *
             (3 * C32072 + ae * C31989 * C31980 + be * C31989 * C31981 +
              C31795 *
                  (2 * C32070 + ae * C31989 * C31971 + be * C31989 * C31972 +
                   C31795 *
                       (C32061 + ae * C31989 * C31957 + be * C31989 * C31959 +
                        C31795 * (ae * C31989 * C31945 + be * C31989 * C31948 +
                                  C31795 * C31989 *
                                      (C31924 * C31925 +
                                       C31799 * bs[8] * std::pow(C31793, 8)) *
                                      C31581))))) /
        C31583;
    const double C539 =
        (4 * (2 * C32031 + ae * C32023 * C31906 + be * C32023 * C31907 +
              C31795 * C32089) +
         ae * C32023 * C31986 + be * C32023 * C31987 +
         C31795 *
             (3 * C32089 + ae * C32023 * C31980 + be * C32023 * C31981 +
              C31795 *
                  (2 * C32087 + ae * C32023 * C31971 + be * C32023 * C31972 +
                   C31795 *
                       (C32078 + ae * C32023 * C31957 + be * C32023 * C31959 +
                        C31795 * (ae * C32023 * C31945 + be * C32023 * C31948 +
                                  C31795 * C32023 *
                                      (C31924 * C31925 +
                                       C31799 * bs[8] * std::pow(C31793, 8)) *
                                      C31581))))) /
        C31583;
    const double C142 = (5 * (3 * C31860 + C31795 * C31913 + C31897 * be) +
                         C31795 * (4 * C31913 + C31795 * C31986 + C31968 * be) +
                         (4 * C31897 + C31795 * C31968) * be) /
                        C31578;
    const double C245 =
        (3 * C31860 + C31795 * C31913 + C31897 * be + C31986 * C32005) / C31578;
    const double C350 =
        (3 * C31860 + C31795 * C31913 + C31897 * be + C31986 * C32039) / C31578;
    const double C449 =
        (C31989 * (4 * C31913 + C31795 * C31986 + C31968 * be)) / C31578;
    const double C537 =
        (C32023 * (4 * C31913 + C31795 * C31986 + C31968 * be)) / C31578;
    const double C635 = (C32023 * C31989 * C31986) / C31578;
    const double C31632 = C31615 - C31631;
    const double C18075 = C31668 * C875;
    const double C18063 = C31668 * C223;
    const double C18051 = C31668 * C220;
    const double C18385 = C31668 * C224;
    const double C18373 = C31668 * C219;
    const double C18719 = C31668 * C623;
    const double C18707 = C31668 * C1075;
    const double C19211 = C31668 * C328;
    const double C19199 = C31668 * C1078;
    const double C19187 = C31668 * C325;
    const double C19444 = C31668 * C624;
    const double C19659 = C31668 * C324;
    const double C24781 = C31668 * C1986;
    const double C25095 = C31668 * C329;
    const double C120 =
        (C31668 / C31584 + ((C31683 - C31651 / C31684) * ae) / C31578) /
            C31584 -
        ((2 * (C31679 / C31584 + (0 * ae) / C31578) -
          C31651 / (C31578 * 4 * C31636)) *
         be) /
            C31578;
    const double C2704 =
        C31668 / C31584 - ((C31683 - C31651 / C31684) * be) / C31578;
    const double C15109 =
        C31668 / C31584 + ((C31683 - C31651 / C31684) * ae) / C31578;
    const double C5482 = C5339 * C875;
    const double C5470 = C5339 * C223;
    const double C5458 = C5339 * C220;
    const double C5792 = C5339 * C224;
    const double C5780 = C5339 * C219;
    const double C6126 = C5339 * C623;
    const double C6114 = C5339 * C1075;
    const double C10678 = C5339 * C1986;
    const double C10666 = C5339 * C328;
    const double C10654 = C5339 * C325;
    const double C11023 = C5339 * C329;
    const double C11011 = C5339 * C324;
    const double C11199 = C5339 * C1078;
    const double C26914 = C5339 * C624;
    const double C31669 = C31667 + C31642;
    const double C7885 = C7874 - C7875;
    const double C7882 = C7862 - C7863;
    const double C7880 = C7854 - C7855;
    const double C7878 = C7846 - C7847;
    const double C8162 = C8150 - C8151;
    const double C8160 = C8142 - C8143;
    const double C8158 = C8134 - C8135;
    const double C8465 = C8456 - C8457;
    const double C8463 = C8448 - C8449;
    const double C8461 = C8440 - C8441;
    const double C8959 = C8948 - C8949;
    const double C8957 = C8940 - C8941;
    const double C8955 = C8932 - C8933;
    const double C8952 = C8920 - C8921;
    const double C9188 = C9178 - C9179;
    const double C9186 = C9170 - C9171;
    const double C9400 = C9392 - C9393;
    const double C12957 = C12950 - C12951;
    const double C12955 = C12942 - C12943;
    const double C13168 = C13160 - C13161;
    const double C13376 = C13368 - C13369;
    const double C13885 = C13880 - C13881;
    const double C14158 = C14150 - C14151;
    const double C952 = C943 - C933;
    const double C947 = C938 - C913;
    const double C944 = C935 - C901;
    const double C1294 = C1288 - C1275;
    const double C1291 = C1285 - C1263;
    const double C1646 = C1640 - C1633;
    const double C1643 = C1637 - C1621;
    const double C2063 = C2054 - C2044;
    const double C2058 = C2049 - C2024;
    const double C2055 = C2046 - C2012;
    const double C2408 = C2402 - C2389;
    const double C2405 = C2399 - C2377;
    const double C2590 = C2587 - C2577;
    const double C4823 = C4820 - C4810;
    const double C951 = C942 - C929;
    const double C948 = C939 - C917;
    const double C945 = C936 - C905;
    const double C1295 = C1289 - C1279;
    const double C1292 = C1286 - C1267;
    const double C1645 = C1639 - C1629;
    const double C1642 = C1636 - C1617;
    const double C2062 = C2053 - C2040;
    const double C2059 = C2050 - C2028;
    const double C2056 = C2047 - C2016;
    const double C2409 = C2403 - C2393;
    const double C2406 = C2400 - C2381;
    const double C2591 = C2588 - C2581;
    const double C4824 = C4821 - C4814;
    const double C16064 = C16056 - C16047;
    const double C16061 = C16053 - C16035;
    const double C16059 = C16051 - C16027;
    const double C16057 = C16049 - C16019;
    const double C16339 = C16333 - C16323;
    const double C16337 = C16331 - C16315;
    const double C16335 = C16329 - C16307;
    const double C16642 = C16636 - C16629;
    const double C16640 = C16634 - C16621;
    const double C16638 = C16632 - C16613;
    const double C16964 = C16960 - C16955;
    const double C16961 = C16957 - C16943;
    const double C17163 = C17155 - C17146;
    const double C17161 = C17153 - C17138;
    const double C17158 = C17150 - C17125;
    const double C17156 = C17148 - C17117;
    const double C17389 = C17385 - C17377;
    const double C17387 = C17383 - C17369;
    const double C17611 = C17607 - C17599;
    const double C17609 = C17605 - C17591;
    const double C20519 = C20517 - C20511;
    const double C23015 = C23013 - C23010;
    const double C23288 = C23286 - C23280;
    const double C6966 = C6953 + C6954;
    const double C9807 = C9801 + C9802;
    const double C11444 = C11438 + C11439;
    const double C27526 = C27520 + C27521;
    const double C31000 = C30994 + C30995;
    const double C9808 = C9803 + C9804;
    const double C27527 = C27522 + C27523;
    const double C3117 = C3113 + C3105;
    const double C15522 = C15518 + C15510;
    const double C1302 = C1296 + C1284;
    const double C2858 = C2850 + C2825;
    const double C5816 = C5810 + C5798;
    const double C15263 = C15255 + C15230;
    const double C18409 = C18403 + C18391;
    const double C4045 = C4041 + C4033;
    const double C21551 = C21547 + C21539;
    const double C2416 = C2410 + C2398;
    const double C3754 = C3746 + C3721;
    const double C11047 = C11041 + C11029;
    const double C21260 = C21252 + C21227;
    const double C25110 = C25107 + C25101;
    const double C3402 = C3398 + C3381;
    const double C4828 = C4825 + C4819;
    const double C15807 = C15803 + C15786;
    const double C19459 = C19456 + C19450;
    const double C26929 = C26926 + C26920;
    const double C31633 = C31632 + C31604;
    const double C18089 = C18074 - C18075;
    const double C18086 = C18062 - C18063;
    const double C18083 = C18050 - C18051;
    const double C18396 = C18384 - C18385;
    const double C18393 = C18372 - C18373;
    const double C18730 = C18718 - C18719;
    const double C18727 = C18706 - C18707;
    const double C19225 = C19210 - C19211;
    const double C19222 = C19198 - C19199;
    const double C19219 = C19186 - C19187;
    const double C19452 = C19443 - C19444;
    const double C19667 = C19658 - C19659;
    const double C24790 = C24780 - C24781;
    const double C25103 = C25094 - C25095;
    const double C2827 = C2704 * C224;
    const double C2815 = C2704 * C219;
    const double C3099 = C2704 * C218;
    const double C3383 = C2704 * C624;
    const double C3723 = C2704 * C329;
    const double C3711 = C2704 * C324;
    const double C4027 = C2704 * C323;
    const double C15232 = C15109 * C224;
    const double C15220 = C15109 * C219;
    const double C15504 = C15109 * C218;
    const double C15788 = C15109 * C624;
    const double C21229 = C15109 * C329;
    const double C21217 = C15109 * C324;
    const double C21533 = C15109 * C323;
    const double C5496 = C5481 - C5482;
    const double C5493 = C5469 - C5470;
    const double C5490 = C5457 - C5458;
    const double C5803 = C5791 - C5792;
    const double C5800 = C5779 - C5780;
    const double C6137 = C6125 - C6126;
    const double C6134 = C6113 - C6114;
    const double C10692 = C10677 - C10678;
    const double C10689 = C10665 - C10666;
    const double C10686 = C10653 - C10654;
    const double C11034 = C11022 - C11023;
    const double C11031 = C11010 - C11011;
    const double C11207 = C11198 - C11199;
    const double C26922 = C26913 - C26914;
    const double C31670 = C31669 * be;
    const double C5337 = C31650 + (C31669 * ae) / C31578 - C31652;
    const double C7893 = C7885 - C7876;
    const double C7890 = C7882 - C7864;
    const double C7888 = C7880 - C7856;
    const double C7886 = C7878 - C7848;
    const double C8168 = C8162 - C8152;
    const double C8166 = C8160 - C8144;
    const double C8164 = C8158 - C8136;
    const double C8471 = C8465 - C8458;
    const double C8469 = C8463 - C8450;
    const double C8467 = C8461 - C8442;
    const double C8967 = C8959 - C8950;
    const double C8965 = C8957 - C8942;
    const double C8963 = C8955 - C8934;
    const double C8960 = C8952 - C8922;
    const double C9192 = C9188 - C9180;
    const double C9190 = C9186 - C9172;
    const double C9402 = C9400 - C9394;
    const double C12961 = C12957 - C12952;
    const double C12959 = C12955 - C12944;
    const double C13170 = C13168 - C13162;
    const double C13378 = C13376 - C13370;
    const double C13887 = C13885 - C13882;
    const double C14160 = C14158 - C14152;
    const double C961 = C952 + C934;
    const double C956 = C947 + C914;
    const double C953 = C944 + C902;
    const double C1300 = C1294 + C1276;
    const double C1297 = C1291 + C1264;
    const double C1652 = C1646 + C1634;
    const double C1649 = C1643 + C1622;
    const double C2072 = C2063 + C2045;
    const double C2067 = C2058 + C2025;
    const double C2064 = C2055 + C2013;
    const double C2414 = C2408 + C2390;
    const double C2411 = C2405 + C2378;
    const double C2593 = C2590 + C2578;
    const double C4826 = C4823 + C4811;
    const double C960 = C951 + C930;
    const double C957 = C948 + C918;
    const double C954 = C945 + C906;
    const double C1301 = C1295 + C1280;
    const double C1298 = C1292 + C1268;
    const double C1651 = C1645 + C1630;
    const double C1648 = C1642 + C1618;
    const double C2071 = C2062 + C2041;
    const double C2068 = C2059 + C2029;
    const double C2065 = C2056 + C2017;
    const double C2415 = C2409 + C2394;
    const double C2412 = C2406 + C2382;
    const double C2594 = C2591 + C2582;
    const double C4827 = C4824 + C4815;
    const double C16072 = C16064 + C16048;
    const double C16069 = C16061 + C16036;
    const double C16067 = C16059 + C16028;
    const double C16065 = C16057 + C16020;
    const double C16345 = C16339 + C16324;
    const double C16343 = C16337 + C16316;
    const double C16341 = C16335 + C16308;
    const double C16648 = C16642 + C16630;
    const double C16646 = C16640 + C16622;
    const double C16644 = C16638 + C16614;
    const double C16968 = C16964 + C16956;
    const double C16965 = C16961 + C16944;
    const double C17171 = C17163 + C17147;
    const double C17169 = C17161 + C17139;
    const double C17166 = C17158 + C17126;
    const double C17164 = C17156 + C17118;
    const double C17393 = C17389 + C17378;
    const double C17391 = C17387 + C17370;
    const double C17615 = C17611 + C17600;
    const double C17613 = C17609 + C17592;
    const double C20521 = C20519 + C20512;
    const double C23017 = C23015 + C23011;
    const double C23290 = C23288 + C23281;
    const double C6978 = C6966 + C6976;
    const double C11445 = C11444 + C11440;
    const double C31001 = C31000 + C30996;
    const double C18080 = C31633 * C885;
    const double C18078 = C31633 * C884;
    const double C18060 = C31633 * C238;
    const double C18058 = C31633 * C237;
    const double C18048 = C31633 * C236;
    const double C18046 = C31633 * C235;
    const double C18382 = C31633 * C240;
    const double C18380 = C31633 * C239;
    const double C18370 = C31633 * C234;
    const double C18368 = C31633 * C233;
    const double C18724 = C31633 * C628;
    const double C18722 = C31633 * C627;
    const double C18712 = C31633 * C1088;
    const double C18710 = C31633 * C1087;
    const double C19216 = C31633 * C343;
    const double C19214 = C31633 * C342;
    const double C19204 = C31633 * C1090;
    const double C19202 = C31633 * C1089;
    const double C19184 = C31633 * C341;
    const double C19182 = C31633 * C340;
    const double C19441 = C31633 * C630;
    const double C19439 = C31633 * C629;
    const double C19656 = C31633 * C339;
    const double C19654 = C31633 * C338;
    const double C24786 = C31633 * C1996;
    const double C24784 = C31633 * C1995;
    const double C25092 = C31633 * C345;
    const double C25090 = C31633 * C344;
    const double C113 =
        (((((0 - (C31576 * C31577) / C31578) * ae) / C31578 -
           (0 * be) / C31590 + (2 * C31579) / C31578) /
              C31584 -
          ((C31576 * C31613 + 0) * be) / C31578 + C31596 - C31606) /
             C31584 +
         ((C31576 * C31627 + 0) * ae) / C31578) /
            C31584 -
        ((C31576 * (C31627 / C31584 +
                    ((C31576 * C31633 + C32493) * ae) / C31578 + C31629) +
          C32873) *
         be) /
            C31578 +
        C31633 / C31584 + ((C31576 * C31629 + C32501) * ae) / C31578 +
        2 * (C31604 / C31584 - (0 * be) / C31578);
    const double C115 =
        (C31627 / C31584 + ((C31576 * C31633 + C32493) * ae) / C31578 +
         C31629) /
            C31584 -
        ((C31576 * (C31633 / C31584 +
                    ((C31576 * C31629 + C32501) * ae) / C31578 + 2 * C31679) +
          C32866) *
         be) /
            C31578 +
        2 * (C31629 / C31584 + ((C31576 * C31679 + C17925) * ae) / C31578);
    const double C117 =
        (C31633 / C31584 + ((C31576 * C31629 + C32501) * ae) / C31578 +
         C31683) /
            C31584 -
        ((C31576 *
              (C31629 / C31584 + ((C31576 * C31679 + C17925) * ae) / C31578) +
          C32853) *
         be) /
            C31578 +
        3 * (C31679 / C31584 + (0 * ae) / C31578);
    const double C2699 =
        C31627 / C31584 - ((C31576 * C31633 + C32493) * be) / C31578 + C31629;
    const double C2701 =
        C31633 / C31584 - ((C31576 * C31629 + C32501) * be) / C31578 + C31683;
    const double C15104 =
        C31627 / C31584 + ((C31576 * C31633 + C32493) * ae) / C31578 + C31629;
    const double C15106 =
        C31633 / C31584 + ((C31576 * C31629 + C32501) * ae) / C31578 + C31683;
    const double C18098 = C18089 - C18076;
    const double C18095 = C18086 - C18064;
    const double C18092 = C18083 - C18052;
    const double C18402 = C18396 - C18386;
    const double C18399 = C18393 - C18374;
    const double C18736 = C18730 - C18720;
    const double C18733 = C18727 - C18708;
    const double C19234 = C19225 - C19212;
    const double C19231 = C19222 - C19200;
    const double C19228 = C19219 - C19188;
    const double C19455 = C19452 - C19445;
    const double C19670 = C19667 - C19660;
    const double C24793 = C24790 - C24782;
    const double C25106 = C25103 - C25096;
    const double C2843 = C2826 - C2827;
    const double C2840 = C2814 - C2815;
    const double C3108 = C3098 - C3099;
    const double C3395 = C3382 - C3383;
    const double C3739 = C3722 - C3723;
    const double C3736 = C3710 - C3711;
    const double C4036 = C4026 - C4027;
    const double C15248 = C15231 - C15232;
    const double C15245 = C15219 - C15220;
    const double C15513 = C15503 - C15504;
    const double C15800 = C15787 - C15788;
    const double C21245 = C21228 - C21229;
    const double C21242 = C21216 - C21217;
    const double C21542 = C21532 - C21533;
    const double C5505 = C5496 - C5483;
    const double C5502 = C5493 - C5471;
    const double C5499 = C5490 - C5459;
    const double C5809 = C5803 - C5793;
    const double C5806 = C5800 - C5781;
    const double C6143 = C6137 - C6127;
    const double C6140 = C6134 - C6115;
    const double C10701 = C10692 - C10679;
    const double C10698 = C10689 - C10667;
    const double C10695 = C10686 - C10655;
    const double C11040 = C11034 - C11024;
    const double C11037 = C11031 - C11012;
    const double C11210 = C11207 - C11200;
    const double C26925 = C26922 - C26915;
    const double C31671 = C31670 / C31578;
    const double C5486 = C5337 * C876;
    const double C5466 = C5337 * C222;
    const double C5454 = C5337 * C221;
    const double C5788 = C5337 * C223;
    const double C5776 = C5337 * C220;
    const double C6130 = C5337 * C622;
    const double C6118 = C5337 * C1076;
    const double C10682 = C5337 * C1987;
    const double C10662 = C5337 * C327;
    const double C10650 = C5337 * C326;
    const double C11019 = C5337 * C328;
    const double C11007 = C5337 * C325;
    const double C11195 = C5337 * C1077;
    const double C26910 = C5337 * C623;
    const double C7901 = C7893 + C7877;
    const double C7898 = C7890 + C7865;
    const double C7896 = C7888 + C7857;
    const double C7894 = C7886 + C7849;
    const double C8174 = C8168 + C8153;
    const double C8172 = C8166 + C8145;
    const double C8170 = C8164 + C8137;
    const double C8477 = C8471 + C8459;
    const double C8475 = C8469 + C8451;
    const double C8473 = C8467 + C8443;
    const double C8975 = C8967 + C8951;
    const double C8973 = C8965 + C8943;
    const double C8971 = C8963 + C8935;
    const double C8968 = C8960 + C8923;
    const double C9196 = C9192 + C9181;
    const double C9194 = C9190 + C9173;
    const double C9404 = C9402 + C9395;
    const double C12965 = C12961 + C12953;
    const double C12963 = C12959 + C12945;
    const double C13172 = C13170 + C13163;
    const double C13380 = C13378 + C13371;
    const double C13889 = C13887 + C13883;
    const double C14162 = C14160 + C14153;
    const double C962 = C956 + C957;
    const double C5218 = C1651 + C1652;
    const double C5217 = C1652 + C1651;
    const double C2073 = C2067 + C2068;
    const double C16074 = C16069 + C16070;
    const double C16073 = C16067 + C16068;
    const double C17813 = C16647 + C16648;
    const double C17811 = C16648 + C16647;
    const double C20166 = C16646 + C16645;
    const double C20911 = C16645 + C16646;
    const double C17131 = C16965 + C16966;
    const double C17812 = C16966 + C16965;
    const double C23003 = C17171 + C17170;
    const double C17172 = C17166 + C17167;
    const double C2836 = C2699 * C238;
    const double C2834 = C2699 * C237;
    const double C2808 = C2699 * C236;
    const double C2806 = C2699 * C235;
    const double C3092 = C2699 * C234;
    const double C3090 = C2699 * C233;
    const double C3392 = C2699 * C628;
    const double C3390 = C2699 * C627;
    const double C3732 = C2699 * C343;
    const double C3730 = C2699 * C342;
    const double C3704 = C2699 * C341;
    const double C3702 = C2699 * C340;
    const double C4020 = C2699 * C339;
    const double C4018 = C2699 * C338;
    const double C2832 = C2701 * C240;
    const double C2830 = C2701 * C239;
    const double C2812 = C2701 * C234;
    const double C2810 = C2701 * C233;
    const double C3096 = C2701 * C232;
    const double C3094 = C2701 * C231;
    const double C3388 = C2701 * C630;
    const double C3386 = C2701 * C629;
    const double C3728 = C2701 * C345;
    const double C3726 = C2701 * C344;
    const double C3708 = C2701 * C339;
    const double C3706 = C2701 * C338;
    const double C4024 = C2701 * C337;
    const double C4022 = C2701 * C336;
    const double C15241 = C15104 * C238;
    const double C15239 = C15104 * C237;
    const double C15213 = C15104 * C236;
    const double C15211 = C15104 * C235;
    const double C15497 = C15104 * C234;
    const double C15495 = C15104 * C233;
    const double C15797 = C15104 * C628;
    const double C15795 = C15104 * C627;
    const double C21238 = C15104 * C343;
    const double C21236 = C15104 * C342;
    const double C21210 = C15104 * C341;
    const double C21208 = C15104 * C340;
    const double C21526 = C15104 * C339;
    const double C21524 = C15104 * C338;
    const double C15237 = C15106 * C240;
    const double C15235 = C15106 * C239;
    const double C15217 = C15106 * C234;
    const double C15215 = C15106 * C233;
    const double C15501 = C15106 * C232;
    const double C15499 = C15106 * C231;
    const double C15793 = C15106 * C630;
    const double C15791 = C15106 * C629;
    const double C21234 = C15106 * C345;
    const double C21232 = C15106 * C344;
    const double C21214 = C15106 * C339;
    const double C21212 = C15106 * C338;
    const double C21530 = C15106 * C337;
    const double C21528 = C15106 * C336;
    const double C18107 = C18098 + C18077;
    const double C18104 = C18095 + C18065;
    const double C18101 = C18092 + C18053;
    const double C18408 = C18402 + C18387;
    const double C18405 = C18399 + C18375;
    const double C18742 = C18736 + C18721;
    const double C18739 = C18733 + C18709;
    const double C19243 = C19234 + C19213;
    const double C19240 = C19231 + C19201;
    const double C19237 = C19228 + C19189;
    const double C19458 = C19455 + C19446;
    const double C19673 = C19670 + C19661;
    const double C24796 = C24793 + C24783;
    const double C25109 = C25106 + C25097;
    const double C2851 = C2843 - C2828;
    const double C2848 = C2840 - C2816;
    const double C3112 = C3108 - C3100;
    const double C3399 = C3395 - C3384;
    const double C3747 = C3739 - C3724;
    const double C3744 = C3736 - C3712;
    const double C4040 = C4036 - C4028;
    const double C15256 = C15248 - C15233;
    const double C15253 = C15245 - C15221;
    const double C15517 = C15513 - C15505;
    const double C15804 = C15800 - C15789;
    const double C21253 = C21245 - C21230;
    const double C21250 = C21242 - C21218;
    const double C21546 = C21542 - C21534;
    const double C5514 = C5505 + C5484;
    const double C5511 = C5502 + C5472;
    const double C5508 = C5499 + C5460;
    const double C5815 = C5809 + C5794;
    const double C5812 = C5806 + C5782;
    const double C6149 = C6143 + C6128;
    const double C6146 = C6140 + C6116;
    const double C10710 = C10701 + C10680;
    const double C10707 = C10698 + C10668;
    const double C10704 = C10695 + C10656;
    const double C11046 = C11040 + C11025;
    const double C11043 = C11037 + C11013;
    const double C11213 = C11210 + C11201;
    const double C26928 = C26925 + C26916;
    const double C31672 = C31650 - C31671;
    const double C5497 = C5485 - C5486;
    const double C5492 = C5465 - C5466;
    const double C5489 = C5453 - C5454;
    const double C5802 = C5787 - C5788;
    const double C5799 = C5775 - C5776;
    const double C6138 = C6129 - C6130;
    const double C6135 = C6117 - C6118;
    const double C10693 = C10681 - C10682;
    const double C10688 = C10661 - C10662;
    const double C10685 = C10649 - C10650;
    const double C11033 = C11018 - C11019;
    const double C11030 = C11006 - C11007;
    const double C11206 = C11194 - C11195;
    const double C26921 = C26909 - C26910;
    const double C7903 = C7898 + C7899;
    const double C7902 = C7896 + C7897;
    const double C9602 = C8476 + C8477;
    const double C9600 = C8477 + C8476;
    const double C8771 = C8475 + C8474;
    const double C9601 = C8474 + C8475;
    const double C12936 = C8975 + C8974;
    const double C12937 = C8973 + C8972;
    const double C13576 = C8972 + C8973;
    const double C13875 = C12965 + C12964;
    const double C963 = C962 + C958;
    const double C5220 = C1650 + C5218;
    const double C5219 = C5217 + C1650;
    const double C2074 = C2073 + C2069;
    const double C16076 = C16074 * C32593;
    const double C16075 = C16073 * C32593;
    const double C20165 = C16073 * C32805;
    const double C21974 = C16073 * C21009;
    const double C20167 = C20166 * C32680;
    const double C21975 = C20166 * C32680;
    const double C2859 = C2851 + C2829;
    const double C2856 = C2848 + C2817;
    const double C3116 = C3112 + C3101;
    const double C3403 = C3399 + C3385;
    const double C3755 = C3747 + C3725;
    const double C3752 = C3744 + C3713;
    const double C4044 = C4040 + C4029;
    const double C15264 = C15256 + C15234;
    const double C15261 = C15253 + C15222;
    const double C15521 = C15517 + C15506;
    const double C15808 = C15804 + C15790;
    const double C21261 = C21253 + C21231;
    const double C21258 = C21250 + C21219;
    const double C21550 = C21546 + C21535;
    const double C31673 = C31672 - C31652;
    const double C5506 = C5497 - C5487;
    const double C5501 = C5492 - C5467;
    const double C5498 = C5489 - C5455;
    const double C5808 = C5802 - C5789;
    const double C5805 = C5799 - C5777;
    const double C6144 = C6138 - C6131;
    const double C6141 = C6135 - C6119;
    const double C10702 = C10693 - C10683;
    const double C10697 = C10688 - C10663;
    const double C10694 = C10685 - C10651;
    const double C11039 = C11033 - C11020;
    const double C11036 = C11030 - C11008;
    const double C11209 = C11206 - C11196;
    const double C26924 = C26921 - C26911;
    const double C7905 = C7903 * C32593;
    const double C7904 = C7902 * C32593;
    const double C8770 = C7902 * C32805;
    const double C29020 = C7902 * C21009;
    const double C8772 = C8771 * C32680;
    const double C29021 = C8771 * C32680;
    const double C964 = C963 * C32593;
    const double C20168 = C20165 + C20167;
    const double C21976 = C21974 + C21975;
    const double C18079 = C31673 * C876;
    const double C18059 = C31673 * C222;
    const double C18047 = C31673 * C221;
    const double C18381 = C31673 * C223;
    const double C18369 = C31673 * C220;
    const double C18723 = C31673 * C622;
    const double C18711 = C31673 * C1076;
    const double C19215 = C31673 * C327;
    const double C19203 = C31673 * C1077;
    const double C19183 = C31673 * C326;
    const double C19440 = C31673 * C623;
    const double C19655 = C31673 * C325;
    const double C24785 = C31673 * C1987;
    const double C25091 = C31673 * C328;
    const double C114 =
        (((ae * -2 * C31577) / C31636 -
          (((C31576 * C31644) / C31583 + 2 * C31613) * be) / C31578 -
          C31645 / C31583) /
             C31584 +
         ((C31576 * C31666 + 2 * C31627) * ae) / C31578) /
            C31584 -
        ((C31576 * (C31666 / C31584 +
                    ((C31576 * C31673 + 2 * C31633) * ae) / C31578 + C31668) +
          2 * (C31627 / C31584 + ((C31576 * C31633 + C32493) * ae) / C31578 +
               C31629)) *
         be) /
            C31578 +
        C31673 / C31584 + ((C31576 * C31668 + 2 * C31629) * ae) / C31578 +
        (-2 * C31647) / (C31578 * 4 * C31583);
    const double C116 =
        (C31666 / C31584 + ((C31576 * C31673 + 2 * C31633) * ae) / C31578 +
         C31668) /
            C31584 -
        ((C31576 * (C31673 / C31584 +
                    ((C31576 * C31668 + 2 * C31629) * ae) / C31578 +
                    (-2 * C31647) / C31684) +
          2 * (C31633 / C31584 + ((C31576 * C31629 + C32501) * ae) / C31578 +
               C31683)) *
         be) /
            C31578 +
        2 * (C31668 / C31584 + ((C31683 - C31651 / C31684) * ae) / C31578);
    const double C118 =
        (C31673 / C31584 + ((C31576 * C31668 + 2 * C31629) * ae) / C31578 +
         (-2 * C31647) / C31684) /
            C31584 -
        ((C31576 *
              (C31668 / C31584 + ((C31683 - C31651 / C31684) * ae) / C31578) +
          2 * (C31629 / C31584 + ((C31576 * C31679 + C17925) * ae) / C31578)) *
         be) /
            C31578 +
        (-3 * C31647) / (C31578 * 4 * C31636);
    const double C2700 = C31666 / C31584 -
                         ((C31576 * C31673 + 2 * C31633) * be) / C31578 +
                         C31668;
    const double C2702 = C31673 / C31584 -
                         ((C31576 * C31668 + 2 * C31629) * be) / C31578 +
                         (-2 * C31647) / C31684;
    const double C15105 = C31666 / C31584 +
                          ((C31576 * C31673 + 2 * C31633) * ae) / C31578 +
                          C31668;
    const double C15107 = C31673 / C31584 +
                          ((C31576 * C31668 + 2 * C31629) * ae) / C31578 +
                          (-2 * C31647) / C31684;
    const double C5515 = C5506 + C5488;
    const double C5510 = C5501 + C5468;
    const double C5507 = C5498 + C5456;
    const double C5814 = C5808 + C5790;
    const double C5811 = C5805 + C5778;
    const double C6150 = C6144 + C6132;
    const double C6147 = C6141 + C6120;
    const double C10711 = C10702 + C10684;
    const double C10706 = C10697 + C10664;
    const double C10703 = C10694 + C10652;
    const double C11045 = C11039 + C11021;
    const double C11042 = C11036 + C11009;
    const double C11212 = C11209 + C11197;
    const double C26927 = C26924 + C26912;
    const double C8773 = C8770 + C8772;
    const double C29022 = C29020 + C29021;
    const double C18090 = C18078 - C18079;
    const double C18085 = C18058 - C18059;
    const double C18082 = C18046 - C18047;
    const double C18395 = C18380 - C18381;
    const double C18392 = C18368 - C18369;
    const double C18731 = C18722 - C18723;
    const double C18728 = C18710 - C18711;
    const double C19226 = C19214 - C19215;
    const double C19223 = C19202 - C19203;
    const double C19218 = C19182 - C19183;
    const double C19451 = C19439 - C19440;
    const double C19666 = C19654 - C19655;
    const double C24791 = C24784 - C24785;
    const double C25102 = C25090 - C25091;
    const double C2835 = C2700 * C222;
    const double C2807 = C2700 * C221;
    const double C3091 = C2700 * C220;
    const double C3391 = C2700 * C622;
    const double C3731 = C2700 * C327;
    const double C3703 = C2700 * C326;
    const double C4019 = C2700 * C325;
    const double C2831 = C2702 * C223;
    const double C2811 = C2702 * C220;
    const double C3095 = C2702 * C219;
    const double C3387 = C2702 * C623;
    const double C3727 = C2702 * C328;
    const double C3707 = C2702 * C325;
    const double C4023 = C2702 * C324;
    const double C15240 = C15105 * C222;
    const double C15212 = C15105 * C221;
    const double C15496 = C15105 * C220;
    const double C15796 = C15105 * C622;
    const double C21237 = C15105 * C327;
    const double C21209 = C15105 * C326;
    const double C21525 = C15105 * C325;
    const double C15236 = C15107 * C223;
    const double C15216 = C15107 * C220;
    const double C15500 = C15107 * C219;
    const double C15792 = C15107 * C623;
    const double C21233 = C15107 * C328;
    const double C21213 = C15107 * C325;
    const double C21529 = C15107 * C324;
    const double C5516 = C5510 + C5511;
    const double C27319 = C6149 + C6150;
    const double C27318 = C6150 + C6149;
    const double C10712 = C10706 + C10707;
    const double C18099 = C18090 - C18080;
    const double C18094 = C18085 - C18060;
    const double C18091 = C18082 - C18048;
    const double C18401 = C18395 - C18382;
    const double C18398 = C18392 - C18370;
    const double C18737 = C18731 - C18724;
    const double C18734 = C18728 - C18712;
    const double C19235 = C19226 - C19216;
    const double C19232 = C19223 - C19204;
    const double C19227 = C19218 - C19184;
    const double C19454 = C19451 - C19441;
    const double C19669 = C19666 - C19656;
    const double C24794 = C24791 - C24786;
    const double C25105 = C25102 - C25092;
    const double C2845 = C2834 - C2835;
    const double C2838 = C2806 - C2807;
    const double C3106 = C3090 - C3091;
    const double C3397 = C3390 - C3391;
    const double C3741 = C3730 - C3731;
    const double C3734 = C3702 - C3703;
    const double C4034 = C4018 - C4019;
    const double C2844 = C2830 - C2831;
    const double C2839 = C2810 - C2811;
    const double C3107 = C3094 - C3095;
    const double C3396 = C3386 - C3387;
    const double C3740 = C3726 - C3727;
    const double C3735 = C3706 - C3707;
    const double C4035 = C4022 - C4023;
    const double C15250 = C15239 - C15240;
    const double C15243 = C15211 - C15212;
    const double C15511 = C15495 - C15496;
    const double C15802 = C15795 - C15796;
    const double C21247 = C21236 - C21237;
    const double C21240 = C21208 - C21209;
    const double C21540 = C21524 - C21525;
    const double C15249 = C15235 - C15236;
    const double C15244 = C15215 - C15216;
    const double C15512 = C15499 - C15500;
    const double C15801 = C15791 - C15792;
    const double C21246 = C21232 - C21233;
    const double C21241 = C21212 - C21213;
    const double C21541 = C21528 - C21529;
    const double C5517 = C5516 + C5512;
    const double C27321 = C6148 + C27319;
    const double C27320 = C27318 + C6148;
    const double C10713 = C10712 + C10708;
    const double C18108 = C18099 + C18081;
    const double C18103 = C18094 + C18061;
    const double C18100 = C18091 + C18049;
    const double C18407 = C18401 + C18383;
    const double C18404 = C18398 + C18371;
    const double C18743 = C18737 + C18725;
    const double C18740 = C18734 + C18713;
    const double C19244 = C19235 + C19217;
    const double C19241 = C19232 + C19205;
    const double C19236 = C19227 + C19185;
    const double C19457 = C19454 + C19442;
    const double C19672 = C19669 + C19657;
    const double C24797 = C24794 + C24787;
    const double C25108 = C25105 + C25093;
    const double C2853 = C2845 - C2836;
    const double C2846 = C2838 - C2808;
    const double C3110 = C3106 - C3092;
    const double C3401 = C3397 - C3392;
    const double C3749 = C3741 - C3732;
    const double C3742 = C3734 - C3704;
    const double C4038 = C4034 - C4020;
    const double C2852 = C2844 - C2832;
    const double C2847 = C2839 - C2812;
    const double C3111 = C3107 - C3096;
    const double C3400 = C3396 - C3388;
    const double C3748 = C3740 - C3728;
    const double C3743 = C3735 - C3708;
    const double C4039 = C4035 - C4024;
    const double C15258 = C15250 - C15241;
    const double C15251 = C15243 - C15213;
    const double C15515 = C15511 - C15497;
    const double C15806 = C15802 - C15797;
    const double C21255 = C21247 - C21238;
    const double C21248 = C21240 - C21210;
    const double C21544 = C21540 - C21526;
    const double C15257 = C15249 - C15237;
    const double C15252 = C15244 - C15217;
    const double C15516 = C15512 - C15501;
    const double C15805 = C15801 - C15793;
    const double C21254 = C21246 - C21234;
    const double C21249 = C21241 - C21214;
    const double C21545 = C21541 - C21530;
    const double C5518 = C5517 * C32593;
    const double C18109 = C18103 + C18104;
    const double C19870 = C18742 + C18743;
    const double C19869 = C18743 + C18742;
    const double C24775 = C19244 + C19243;
    const double C2861 = C2853 + C2837;
    const double C2854 = C2846 + C2809;
    const double C3114 = C3110 + C3093;
    const double C3405 = C3401 + C3393;
    const double C3757 = C3749 + C3733;
    const double C3750 = C3742 + C3705;
    const double C4042 = C4038 + C4021;
    const double C2860 = C2852 + C2833;
    const double C2855 = C2847 + C2813;
    const double C3115 = C3111 + C3097;
    const double C3404 = C3400 + C3389;
    const double C3756 = C3748 + C3729;
    const double C3751 = C3743 + C3709;
    const double C4043 = C4039 + C4025;
    const double C15266 = C15258 + C15242;
    const double C15259 = C15251 + C15214;
    const double C15519 = C15515 + C15498;
    const double C15810 = C15806 + C15798;
    const double C21263 = C21255 + C21239;
    const double C21256 = C21248 + C21211;
    const double C21548 = C21544 + C21527;
    const double C15265 = C15257 + C15238;
    const double C15260 = C15252 + C15218;
    const double C15520 = C15516 + C15502;
    const double C15809 = C15805 + C15794;
    const double C21262 = C21254 + C21235;
    const double C21257 = C21249 + C21215;
    const double C21549 = C21545 + C21531;
    const double C18110 = C18109 + C18105;
    const double C19872 = C18741 + C19870;
    const double C19871 = C19869 + C18741;
    const double C24788 = C24775 + C19242;
    const double C18111 = C18110 * C32593;
    d2ee[0] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
             C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
             C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
                C32593 * C32636 +
            (C18100 + C18101 + C18102) * C32593 * C32643 + C18111 * C17928) *
               C32551 * C444 -
           ((C18106 + C18107 + C18108) * C32593 * C17928 +
            (C18105 + C18104 + C18103) * C32593 * C32643 +
            (C18102 + C18101 + C18100) * C32593 * C32636) *
               C32551 * C445) *
              C446 +
          (((C18404 + C18405 + C18406) * C32593 * C32636 +
            (C18407 + C18408 + C18409) * C32593 * C32643 +
            (C31633 * C882 - C31673 * C875 - C31633 * C883 + C32493 * C893 +
             C31629 * C880 - C31668 * C874 - C31629 * C881 + C32501 * C892 +
             C31679 * C1257 - C17934 * C1256 - C31679 * C1258 +
             C17925 * C1259) *
                C32593 * C17928) *
               C32551 * C445 -
           ((C18409 + C18408 + C18407) * C32593 * C17928 +
            (C18406 + C18405 + C18404) * C32593 * C32643 +
            (C31679 * C136 - C17934 * C126 - C31679 * C137 + C17925 * C147 +
             C31629 * C134 - C31668 * C125 - C31629 * C135 + C32501 * C146 +
             C31633 * C132 - C31673 * C124 - C31633 * C133 + C32493 * C145) *
                C32593 * C32636) *
               C32551 * C444) *
              C447)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
             C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
             C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
                C32593 * C32636 +
            (C18100 + C18101 + C18102) * C32593 * C32643 + C18111 * C17928) *
               C534 -
           ((C18738 + C18739 + C18740) * C32593 * C17928 +
            (C18741 + C18742 + C18743) * C32593 * C32643 +
            (C31679 * C336 - C17934 * C324 - C31679 * C337 + C17925 * C354 +
             C31629 * C338 - C31668 * C325 - C31629 * C339 + C32501 * C355 +
             C31633 * C340 - C31673 * C326 - C31633 * C341 + C32493 * C356) *
                C32593 * C32636) *
               C535) *
              C444 +
          (((C18743 + C18742 + C18741) * C32593 * C32636 +
            (C18740 + C18739 + C18738) * C32593 * C32643 +
            (C31633 * C1601 - C31673 * C1598 - C31633 * C1602 + C32493 * C1607 +
             C31629 * C1603 - C31668 * C1599 - C31629 * C1604 + C32501 * C1608 +
             C31679 * C1605 - C17934 * C1600 - C31679 * C1606 +
             C17925 * C1609) *
                C32593 * C17928) *
               C535 -
           ((C18106 + C18107 + C18108) * C32593 * C17928 +
            (C18105 + C18104 + C18103) * C32593 * C32643 +
            (C18102 + C18101 + C18100) * C32593 * C32636) *
               C534) *
              C445) *
         C32525) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
            C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
            C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
               C32593 * C32636 +
           (C18100 + C18101 + C18102) * C32593 * C32643 + C18111 * C17928) *
              C32551 * C213 -
          ((C18106 + C18107 + C18108) * C32593 * C17928 +
           (C18105 + C18104 + C18103) * C32593 * C32643 +
           (C18102 + C18101 + C18100) * C32593 * C32636) *
              C32551 * C214 +
          (C18111 * C32636 + (C18108 + C18107 + C18106) * C32593 * C32643 +
           (C31633 * C886 - C31673 * C877 - C31633 * C887 + C32493 * C895 +
            C31629 * C888 - C31668 * C878 - C31629 * C889 + C32501 * C896 +
            C31679 * C890 - C17934 * C879 - C31679 * C891 + C17925 * C897) *
               C32593 * C17928) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
            C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
            C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
               C32593 * C32636 +
           (C31633 * C235 - C31673 * C221 - C31633 * C236 + C32493 * C251 +
            C31629 * C233 - C31668 * C220 - C31629 * C234 + C32501 * C250 +
            C31679 * C231 - C17934 * C219 - C31679 * C232 + C17925 * C249) *
               C32593 * C32643 +
           (C31633 * C237 - C31673 * C222 - C31633 * C238 + C32493 * C252 +
            C31629 * C239 - C31668 * C223 - C31629 * C240 + C32501 * C253 +
            C31679 * C241 - C17934 * C224 - C31679 * C242 + C17925 * C254) *
               C32593 * C17928) *
              C32551 * C32537 * C110 -
          ((C31679 * C243 - C17934 * C225 - C31679 * C244 + C17925 * C255 +
            C31629 * C241 - C31668 * C224 - C31629 * C242 + C32501 * C254 +
            C31633 * C239 - C31673 * C223 - C31633 * C240 + C32493 * C253) *
               C32593 * C17928 +
           (C31679 * C229 - C17934 * C218 - C31679 * C230 + C17925 * C248 +
            C31629 * C231 - C31668 * C219 - C31629 * C232 + C32501 * C249 +
            C31633 * C233 - C31673 * C220 - C31633 * C234 + C32493 * C250) *
               C32593 * C32643 +
           (C31679 * C136 - C17934 * C126 - C31679 * C137 + C17925 * C147 +
            C31629 * C134 - C31668 * C125 - C31629 * C135 + C32501 * C146 +
            C31633 * C132 - C31673 * C124 - C31633 * C133 + C32493 * C145) *
               C32593 * C32636) *
              C32551 * C32537 * C111 +
          ((C31633 * C134 - C31673 * C125 - C31633 * C135 + C32493 * C146 +
            C31629 * C136 - C31668 * C126 - C31629 * C137 + C32501 * C147 +
            C31679 * C138 - C17934 * C127 - C31679 * C139 + C17925 * C148) *
               C32593 * C32636 +
           (C31633 * C231 - C31673 * C219 - C31633 * C232 + C32493 * C249 +
            C31629 * C229 - C31668 * C218 - C31629 * C230 + C32501 * C248 +
            C31679 * C227 - C17934 * C217 - C31679 * C228 + C17925 * C247) *
               C32593 * C32643 +
           (C31633 * C241 - C31673 * C224 - C31633 * C242 + C32493 * C254 +
            C31629 * C243 - C31668 * C225 - C31629 * C244 + C32501 * C255 +
            C31679 * C245 - C17934 * C226 - C31679 * C246 + C17925 * C256) *
               C32593 * C17928) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
            C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
            C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
               C32593 * C32636 +
           (C18100 + C18101 + C18102) * C32593 * C32643 + C18111 * C17928) *
              C319 -
          ((C31679 * C1083 - C17934 * C1074 - C31679 * C1084 + C17925 * C1101 +
            C31629 * C1085 - C31668 * C1075 - C31629 * C1086 + C32501 * C1102 +
            C31633 * C1087 - C31673 * C1076 - C31633 * C1088 + C32493 * C1103) *
               C32593 * C17928 +
           (C31679 * C631 - C17934 * C624 - C31679 * C632 + C17925 * C639 +
            C31629 * C629 - C31668 * C623 - C31629 * C630 + C32501 * C638 +
            C31633 * C627 - C31673 * C622 - C31633 * C628 + C32493 * C637) *
               C32593 * C32643 +
           (C31679 * C336 - C17934 * C324 - C31679 * C337 + C17925 * C354 +
            C31629 * C338 - C31668 * C325 - C31629 * C339 + C32501 * C355 +
            C31633 * C340 - C31673 * C326 - C31633 * C341 + C32493 * C356) *
               C32593 * C32636) *
              C320 +
          ((C31633 * C342 - C31673 * C327 - C31633 * C343 + C32493 * C357 +
            C31629 * C344 - C31668 * C328 - C31629 * C345 + C32501 * C358 +
            C31679 * C346 - C17934 * C329 - C31679 * C347 + C17925 * C359) *
               C32593 * C32636 +
           (C31633 * C1089 - C31673 * C1077 - C31633 * C1090 + C32493 * C1104 +
            C31629 * C1091 - C31668 * C1078 - C31629 * C1092 + C32501 * C1105 +
            C31679 * C1093 - C17934 * C1079 - C31679 * C1094 + C17925 * C1106) *
               C32593 * C32643 +
           (C31633 * C1095 - C31673 * C1080 - C31633 * C1096 + C32493 * C1107 +
            C31629 * C1097 - C31668 * C1081 - C31629 * C1098 + C32501 * C1108 +
            C31679 * C1099 - C17934 * C1082 - C31679 * C1100 + C17925 * C1109) *
               C32593 * C17928) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
             C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
             C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
                C32593 * C32636 +
            (C18100 + C18101 + C18102) * C32593 * C32643 + C18111 * C17928) *
               C534 -
           ((C31679 * C1083 - C17934 * C1074 - C31679 * C1084 + C17925 * C1101 +
             C31629 * C1085 - C31668 * C1075 - C31629 * C1086 + C32501 * C1102 +
             C31633 * C1087 - C31673 * C1076 - C31633 * C1088 +
             C32493 * C1103) *
                C32593 * C17928 +
            (C31679 * C631 - C17934 * C624 - C31679 * C632 + C17925 * C639 +
             C31629 * C629 - C31668 * C623 - C31629 * C630 + C32501 * C638 +
             C31633 * C627 - C31673 * C622 - C31633 * C628 + C32493 * C637) *
                C32593 * C32643 +
            (C31679 * C336 - C17934 * C324 - C31679 * C337 + C17925 * C354 +
             C31629 * C338 - C31668 * C325 - C31629 * C339 + C32501 * C355 +
             C31633 * C340 - C31673 * C326 - C31633 * C341 + C32493 * C356) *
                C32593 * C32636) *
               C535) *
              C32537 * C446 +
          (((C31633 * C338 - C31673 * C325 - C31633 * C339 + C32493 * C355 +
             C31629 * C336 - C31668 * C324 - C31629 * C337 + C32501 * C354 +
             C31679 * C334 - C17934 * C323 - C31679 * C335 + C17925 * C353) *
                C32593 * C32636 +
            (C31633 * C629 - C31673 * C623 - C31633 * C630 + C32493 * C638 +
             C31629 * C631 - C31668 * C624 - C31629 * C632 + C32501 * C639 +
             C31679 * C633 - C17934 * C625 - C31679 * C634 + C17925 * C640) *
                C32593 * C32643 +
            (C31633 * C1085 - C31673 * C1075 - C31633 * C1086 + C32493 * C1102 +
             C31629 * C1083 - C31668 * C1074 - C31629 * C1084 + C32501 * C1101 +
             C31679 * C1449 - C17934 * C1448 - C31679 * C1450 +
             C17925 * C1451) *
                C32593 * C17928) *
               C535 -
           ((C18409 + C18408 + C18407) * C32593 * C17928 +
            (C18406 + C18405 + C18404) * C32593 * C32643 +
            (C31679 * C136 - C17934 * C126 - C31679 * C137 + C17925 * C147 +
             C31629 * C134 - C31668 * C125 - C31629 * C135 + C32501 * C146 +
             C31633 * C132 - C31673 * C124 - C31633 * C133 + C32493 * C145) *
                C32593 * C32636) *
               C534) *
              C32537 * C447)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
            C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
            C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
               C32593 * C32636 +
           (C31633 * C235 - C31673 * C221 - C31633 * C236 + C32493 * C251 +
            C31629 * C233 - C31668 * C220 - C31629 * C234 + C32501 * C250 +
            C31679 * C231 - C17934 * C219 - C31679 * C232 + C17925 * C249) *
               C32593 * C32643 +
           (C31633 * C237 - C31673 * C222 - C31633 * C238 + C32493 * C252 +
            C31629 * C239 - C31668 * C223 - C31629 * C240 + C32501 * C253 +
            C31679 * C241 - C17934 * C224 - C31679 * C242 + C17925 * C254) *
               C32593 * C17928) *
              C32551 * C32537 * C110 -
          ((C31679 * C243 - C17934 * C225 - C31679 * C244 + C17925 * C255 +
            C31629 * C241 - C31668 * C224 - C31629 * C242 + C32501 * C254 +
            C31633 * C239 - C31673 * C223 - C31633 * C240 + C32493 * C253) *
               C32593 * C17928 +
           (C31679 * C229 - C17934 * C218 - C31679 * C230 + C17925 * C248 +
            C31629 * C231 - C31668 * C219 - C31629 * C232 + C32501 * C249 +
            C31633 * C233 - C31673 * C220 - C31633 * C234 + C32493 * C250) *
               C32593 * C32643 +
           (C31679 * C136 - C17934 * C126 - C31679 * C137 + C17925 * C147 +
            C31629 * C134 - C31668 * C125 - C31629 * C135 + C32501 * C146 +
            C31633 * C132 - C31673 * C124 - C31633 * C133 + C32493 * C145) *
               C32593 * C32636) *
              C32551 * C32537 * C111 +
          ((C31633 * C134 - C31673 * C125 - C31633 * C135 + C32493 * C146 +
            C31629 * C136 - C31668 * C126 - C31629 * C137 + C32501 * C147 +
            C31679 * C138 - C17934 * C127 - C31679 * C139 + C17925 * C148) *
               C32593 * C32636 +
           (C31633 * C231 - C31673 * C219 - C31633 * C232 + C32493 * C249 +
            C31629 * C229 - C31668 * C218 - C31629 * C230 + C32501 * C248 +
            C31679 * C227 - C17934 * C217 - C31679 * C228 + C17925 * C247) *
               C32593 * C32643 +
           (C31633 * C241 - C31673 * C224 - C31633 * C242 + C32493 * C254 +
            C31629 * C243 - C31668 * C225 - C31629 * C244 + C32501 * C255 +
            C31679 * C245 - C17934 * C226 - C31679 * C246 + C17925 * C256) *
               C32593 * C17928) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
            C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
            C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
               C32593 * C32636 +
           (C18100 + C18101 + C18102) * C32593 * C32643 + C18111 * C17928) *
              C32551 * C213 -
          ((C18106 + C18107 + C18108) * C32593 * C17928 +
           (C18105 + C18104 + C18103) * C32593 * C32643 +
           (C18102 + C18101 + C18100) * C32593 * C32636) *
              C32551 * C214 +
          (C18111 * C32636 + (C18108 + C18107 + C18106) * C32593 * C32643 +
           (C31633 * C886 - C31673 * C877 - C31633 * C887 + C32493 * C895 +
            C31629 * C888 - C31668 * C878 - C31629 * C889 + C32501 * C896 +
            C31679 * C890 - C17934 * C879 - C31679 * C891 + C17925 * C897) *
               C32593 * C17928) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
              C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                 C32805 +
             (C17164 + C17165) * C32680) *
                C32636 +
            ((C16065 + C16066) * C32805 + C17811 * C32680) * C32643 +
            C20168 * C17928) *
               C32551 * C444 -
           (((C16643 + C16644) * C32680 + (C16070 + C16069) * C32805) * C17928 +
            ((C16645 + C16646) * C32680 + (C16068 + C16067) * C32805) * C32643 +
            (C17813 * C32680 + (C16066 + C16065) * C32805) * C32636) *
               C32551 * C445) *
              C446 +
          ((((C16341 + C16342) * C32805 + (C17391 + C17392) * C32680) * C32636 +
            ((C16343 + C16344) * C32805 + (C20521 + C20522) * C32680) * C32643 +
            ((C16345 + C16346) * C32805 +
             (C15914 * C1603 - C15915 * C1599 - C15914 * C1604 +
              C15908 * C1608 + C15916 * C1605 - C15917 * C1600 -
              C15916 * C1606 + C32498 * C1609) *
                 C32680) *
                C17928) *
               C32551 * C445 -
           (((C20522 + C20521) * C32680 + (C16344 + C16343) * C32805) * C17928 +
            ((C17392 + C17391) * C32680 + (C16342 + C16341) * C32805) * C32643 +
            ((C17614 + C17613) * C32680 +
             (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
              C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
                 C32805) *
                C32636) *
               C32551 * C444) *
              C447)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
              C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                 C32805 +
             (C17164 + C17165) * C32680) *
                C32636 +
            ((C16065 + C16066) * C32805 + C17811 * C32680) * C32643 +
            C20168 * C17928) *
               C534 -
           (((C16967 + C16968) * C32680 + C20911 * C32805) * C17928 +
            (C17812 * C32680 + C17813 * C32805) * C32643 +
            ((C17167 + C17166) * C32680 + (C17165 + C17164) * C32805) *
                C32636) *
               C535) *
              C444 +
          (((C17811 * C32805 + C17131 * C32680) * C32636 +
            (C20166 * C32805 + (C16968 + C16967) * C32680) * C32643 +
            ((C16644 + C16643) * C32805 +
             (C15914 * C6397 - C15915 * C6393 - C15914 * C6398 +
              C15908 * C6402 + C15916 * C7282 - C15917 * C7281 -
              C15916 * C7283 + C32498 * C7284) *
                 C32680) *
                C17928) *
               C535 -
           (((C16643 + C16644) * C32680 + (C16070 + C16069) * C32805) * C17928 +
            (C20911 * C32680 + (C16068 + C16067) * C32805) * C32643 +
            (C17813 * C32680 + (C16066 + C16065) * C32805) * C32636) *
               C534) *
              C445) *
         C32525) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C32805 +
            (C17164 + C17165) * C32680) *
               C32636 +
           ((C16065 + C16066) * C32805 + C17811 * C32680) * C32643 +
           C20168 * C17928) *
              C32551 * C213 -
          (((C16643 + C16644) * C32680 + (C16070 + C16069) * C32805) * C17928 +
           ((C16645 + C16646) * C32680 + (C16068 + C16067) * C32805) * C32643 +
           (C17813 * C32680 + (C16066 + C16065) * C32805) * C32636) *
              C32551 * C214 +
          (C20168 * C32636 +
           (C16074 * C32805 + (C16644 + C16643) * C32680) * C32643 +
           ((C16072 + C16071) * C32805 +
            (C15914 * C6395 - C15915 * C6392 - C15914 * C6396 + C15908 * C6401 +
             C15916 * C6605 - C15917 * C6604 - C15916 * C6606 +
             C32498 * C6607) *
                C32680) *
               C17928) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C32805 +
            (C17164 + C17165) * C32680) *
               C32636 +
           ((C16065 + C16066) * C32805 + C17811 * C32680) * C32643 +
           (C16073 * C32805 + (C16646 + C16645) * C32680) * C17928) *
              C32551 * C32537 * C110 -
          (((C15916 * C1083 - C15917 * C1074 - C15916 * C1084 + C32498 * C1101 +
             C15914 * C1085 - C15915 * C1075 - C15914 * C1086 +
             C15908 * C1102) *
                C32680 +
            (C16344 + C16343) * C32805) *
               C17928 +
           ((C17392 + C17391) * C32680 + (C16342 + C16341) * C32805) * C32643 +
           ((C17614 + C17613) * C32680 +
            (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
             C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
                C32805) *
               C32636) *
              C32551 * C32537 * C111 +
          (((C15914 * C134 - C15915 * C125 - C15914 * C135 + C15908 * C146 +
             C15916 * C136 - C15917 * C126 - C15916 * C137 + C32498 * C147) *
                C32805 +
            (C15914 * C336 - C15915 * C324 - C15914 * C337 + C15908 * C354 +
             C15916 * C334 - C15917 * C323 - C15916 * C335 + C32498 * C353) *
                C32680) *
               C32636 +
           ((C15914 * C231 - C15915 * C219 - C15914 * C232 + C15908 * C249 +
             C15916 * C229 - C15917 * C218 - C15916 * C230 + C32498 * C248) *
                C32805 +
            (C15914 * C631 - C15915 * C624 - C15914 * C632 + C15908 * C639 +
             C15916 * C633 - C15917 * C625 - C15916 * C634 + C32498 * C640) *
                C32680) *
               C32643 +
           ((C15914 * C241 - C15915 * C224 - C15914 * C242 + C15908 * C254 +
             C15916 * C243 - C15917 * C225 - C15916 * C244 + C32498 * C255) *
                C32805 +
            (C15914 * C1083 - C15915 * C1074 - C15914 * C1084 + C15908 * C1101 +
             C15916 * C1449 - C15917 * C1448 - C15916 * C1450 +
             C32498 * C1451) *
                C32680) *
               C17928) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C32805 +
            (C17164 + C17165) * C32680) *
               C32636 +
           ((C16065 + C16066) * C32805 + C17811 * C32680) * C32643 +
           C20168 * C17928) *
              C319 -
          (((C16967 + C16968) * C32680 + (C16645 + C16646) * C32805) * C17928 +
           (C17812 * C32680 + C17813 * C32805) * C32643 +
           ((C17167 + C17166) * C32680 + (C17165 + C17164) * C32805) * C32636) *
              C320 +
          ((C17172 * C32805 + (C17171 + C17170) * C32680) * C32636 +
           (C17131 * C32805 + (C17169 + C17168) * C32680) * C32643 +
           ((C16968 + C16967) * C32805 +
            (C15914 * C7091 - C15915 * C7088 - C15914 * C7092 + C15908 * C7097 +
             C15916 * C7466 - C15917 * C7465 - C15916 * C7467 +
             C32498 * C7468) *
                C32680) *
               C17928) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
              C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                 C32805 +
             (C17164 + C17165) * C32680) *
                C32636 +
            ((C16065 + C16066) * C32805 + C17811 * C32680) * C32643 +
            C20168 * C17928) *
               C534 -
           (((C16967 + C16968) * C32680 + (C16645 + C16646) * C32805) * C17928 +
            (C17812 * C32680 + C17813 * C32805) * C32643 +
            ((C17167 + C17166) * C32680 + (C17165 + C17164) * C32805) *
                C32636) *
               C535) *
              C32537 * C446 +
          ((((C17613 + C17614) * C32805 + (C17615 + C17616) * C32680) * C32636 +
            ((C17391 + C17392) * C32805 + (C17393 + C17394) * C32680) * C32643 +
            ((C20521 + C20522) * C32805 +
             (C15914 * C1097 - C15915 * C1081 - C15914 * C1098 +
              C15908 * C1108 + C15916 * C1099 - C15917 * C1082 -
              C15916 * C1100 + C32498 * C1109) *
                 C32680) *
                C17928) *
               C535 -
           (((C20522 + C20521) * C32680 + (C16344 + C16343) * C32805) * C17928 +
            ((C17392 + C17391) * C32680 + (C16342 + C16341) * C32805) * C32643 +
            ((C17614 + C17613) * C32680 +
             (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
              C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
                 C32805) *
                C32636) *
               C534) *
              C32537 * C447)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C32805 +
            (C17164 + C17165) * C32680) *
               C32636 +
           ((C16065 + C16066) * C32805 + C17811 * C32680) * C32643 +
           (C16073 * C32805 + (C16646 + C16645) * C32680) * C17928) *
              C32551 * C32537 * C110 -
          (((C15916 * C1083 - C15917 * C1074 - C15916 * C1084 + C32498 * C1101 +
             C15914 * C1085 - C15915 * C1075 - C15914 * C1086 +
             C15908 * C1102) *
                C32680 +
            (C16344 + C16343) * C32805) *
               C17928 +
           ((C17392 + C17391) * C32680 + (C16342 + C16341) * C32805) * C32643 +
           ((C17614 + C17613) * C32680 +
            (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
             C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
                C32805) *
               C32636) *
              C32551 * C32537 * C111 +
          (((C15914 * C134 - C15915 * C125 - C15914 * C135 + C15908 * C146 +
             C15916 * C136 - C15917 * C126 - C15916 * C137 + C32498 * C147) *
                C32805 +
            (C15914 * C336 - C15915 * C324 - C15914 * C337 + C15908 * C354 +
             C15916 * C334 - C15917 * C323 - C15916 * C335 + C32498 * C353) *
                C32680) *
               C32636 +
           ((C15914 * C231 - C15915 * C219 - C15914 * C232 + C15908 * C249 +
             C15916 * C229 - C15917 * C218 - C15916 * C230 + C32498 * C248) *
                C32805 +
            (C15914 * C631 - C15915 * C624 - C15914 * C632 + C15908 * C639 +
             C15916 * C633 - C15917 * C625 - C15916 * C634 + C32498 * C640) *
                C32680) *
               C32643 +
           ((C15914 * C241 - C15915 * C224 - C15914 * C242 + C15908 * C254 +
             C15916 * C243 - C15917 * C225 - C15916 * C244 + C32498 * C255) *
                C32805 +
            (C15914 * C1083 - C15915 * C1074 - C15914 * C1084 + C15908 * C1101 +
             C15916 * C1449 - C15917 * C1448 - C15916 * C1450 +
             C32498 * C1451) *
                C32680) *
               C17928) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C32805 +
            (C17164 + C17165) * C32680) *
               C32636 +
           ((C16065 + C16066) * C32805 + C17811 * C32680) * C32643 +
           C20168 * C17928) *
              C32551 * C213 -
          (((C16643 + C16644) * C32680 + (C16070 + C16069) * C32805) * C17928 +
           ((C16645 + C16646) * C32680 + (C16068 + C16067) * C32805) * C32643 +
           (C17813 * C32680 + (C16066 + C16065) * C32805) * C32636) *
              C32551 * C214 +
          (C20168 * C32636 +
           (C16074 * C32805 + (C16644 + C16643) * C32680) * C32643 +
           ((C16072 + C16071) * C32805 +
            (C15914 * C6395 - C15915 * C6392 - C15914 * C6396 + C15908 * C6401 +
             C15916 * C6605 - C15917 * C6604 - C15916 * C6606 +
             C32498 * C6607) *
                C32680) *
               C17928) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C32593 * C32874 +
            (C16065 + C16066) * C32593 * C32870 + C16075 * C32860 +
            C16076 * C32812) *
               C32551 * C444 -
           ((C16071 + C16072) * C32593 * C32812 +
            (C16070 + C16069) * C32593 * C32860 +
            (C16068 + C16067) * C32593 * C32870 +
            (C16066 + C16065) * C32593 * C32874) *
               C32551 * C445) *
              C446 +
          (((C16341 + C16342) * C32593 * C32874 +
            (C16343 + C16344) * C32593 * C32870 +
            (C16345 + C16346) * C32593 * C32860 +
            (C15914 * C888 - C15915 * C878 - C15914 * C889 + C15908 * C896 +
             C15916 * C890 - C15917 * C879 - C15916 * C891 + C32498 * C897) *
                C32593 * C32812) *
               C32551 * C445 -
           ((C16346 + C16345) * C32593 * C32812 +
            (C16344 + C16343) * C32593 * C32860 +
            (C16342 + C16341) * C32593 * C32870 +
            (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
             C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
                C32593 * C32874) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
             C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
             C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
             C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
                C32593 * C15102 +
            (C15259 + C15260 + C15261 + C15262) * C32593 * C32640) *
               C32551 * C444 -
           ((C15263 + C15264 + C15265 + C15266) * C32593 * C32640 +
            (C15262 + C15261 + C15260 + C15259) * C32593 * C15102) *
               C32551 * C445) *
              C446 +
          (((C15519 + C15520 + C15521 + C15522) * C32593 * C15102 +
            (C15104 * C239 - C15105 * C223 - C15104 * C240 + C32873 * C253 +
             C15106 * C241 - C15107 * C224 - C15106 * C242 + C32866 * C254 +
             C15108 * C243 - C15109 * C225 - C15108 * C244 + C32853 * C255 +
             C15110 * C245 - C15111 * C226 - C15110 * C246 + C32803 * C256) *
                C32593 * C32640) *
               C32551 * C445 -
           ((C15522 + C15521 + C15520 + C15519) * C32593 * C32640 +
            (C15110 * C138 - C15111 * C127 - C15110 * C139 + C32803 * C148 +
             C15108 * C136 - C15109 * C126 - C15108 * C137 + C32853 * C147 +
             C15106 * C134 - C15107 * C125 - C15106 * C135 + C32866 * C146 +
             C15104 * C132 - C15105 * C124 - C15104 * C133 + C32873 * C145) *
                C32593 * C15102) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
              C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                 C32868 +
             (C17164 + C17165) * C32857 + C17172 * C32838) *
                C15102 +
            ((C16065 + C16066) * C32868 + (C16648 + C16647) * C32857 +
             C17131 * C32838) *
                C32640) *
               C32551 * C444 -
           (((C16967 + C16968) * C32838 + (C16645 + C16646) * C32857 +
             (C16068 + C16067) * C32868) *
                C32640 +
            ((C16966 + C16965) * C32838 + (C16647 + C16648) * C32857 +
             (C16066 + C16065) * C32868) *
                C15102) *
               C32551 * C445) *
              C446 +
          ((((C16341 + C16342) * C32868 + (C17391 + C17392) * C32857 +
             (C17393 + C17394) * C32838) *
                C15102 +
            ((C16343 + C16344) * C32868 +
             (C15914 * C1085 - C15915 * C1075 - C15914 * C1086 +
              C15908 * C1102 + C15916 * C1083 - C15917 * C1074 -
              C15916 * C1084 + C32498 * C1101) *
                 C32857 +
             (C15914 * C1097 - C15915 * C1081 - C15914 * C1098 +
              C15908 * C1108 + C15916 * C1099 - C15917 * C1082 -
              C15916 * C1100 + C32498 * C1109) *
                 C32838) *
                C32640) *
               C32551 * C445 -
           (((C17394 + C17393) * C32838 + (C17392 + C17391) * C32857 +
             (C16342 + C16341) * C32868) *
                C32640 +
            ((C15916 * C346 - C15917 * C329 - C15916 * C347 + C32498 * C359 +
              C15914 * C344 - C15915 * C328 - C15914 * C345 + C15908 * C358) *
                 C32838 +
             (C15916 * C336 - C15917 * C324 - C15916 * C337 + C32498 * C354 +
              C15914 * C338 - C15915 * C325 - C15914 * C339 + C15908 * C355) *
                 C32857 +
             (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
              C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
                 C32868) *
                C15102) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C32593 * C32874 +
            (C16065 + C16066) * C32593 * C32870 + C16075 * C32860 +
            C16076 * C32812) *
               C534 -
           ((C16643 + C16644) * C32593 * C32812 +
            (C16645 + C16646) * C32593 * C32860 +
            (C16647 + C16648) * C32593 * C32870 +
            (C15916 * C338 - C15917 * C325 - C15916 * C339 + C32498 * C355 +
             C15914 * C340 - C15915 * C326 - C15914 * C341 + C15908 * C356) *
                C32593 * C32874) *
               C535) *
              C444 +
          (((C16648 + C16647) * C32593 * C32874 +
            (C16646 + C16645) * C32593 * C32870 +
            (C16644 + C16643) * C32593 * C32860 +
            (C15914 * C6395 - C15915 * C6392 - C15914 * C6396 + C15908 * C6401 +
             C15916 * C6605 - C15917 * C6604 - C15916 * C6606 +
             C32498 * C6607) *
                C32593 * C32812) *
               C535 -
           ((C16071 + C16072) * C32593 * C32812 +
            (C16070 + C16069) * C32593 * C32860 +
            (C16068 + C16067) * C32593 * C32870 +
            (C16066 + C16065) * C32593 * C32874) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
             C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
             C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
             C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
                C32593 * C15102 +
            (C15259 + C15260 + C15261 + C15262) * C32593 * C32640) *
               C534 -
           ((C15807 + C15808 + C15809 + C15810) * C32593 * C32640 +
            (C15110 * C334 - C15111 * C323 - C15110 * C335 + C32803 * C353 +
             C15108 * C336 - C15109 * C324 - C15108 * C337 + C32853 * C354 +
             C15106 * C338 - C15107 * C325 - C15106 * C339 + C32866 * C355 +
             C15104 * C340 - C15105 * C326 - C15104 * C341 + C32873 * C356) *
                C32593 * C15102) *
               C535) *
              C444 +
          (((C15810 + C15809 + C15808 + C15807) * C32593 * C15102 +
            (C15104 * C1087 - C15105 * C1076 - C15104 * C1088 + C32873 * C1103 +
             C15106 * C1085 - C15107 * C1075 - C15106 * C1086 + C32866 * C1102 +
             C15108 * C1083 - C15109 * C1074 - C15108 * C1084 + C32853 * C1101 +
             C15110 * C1449 - C15111 * C1448 - C15110 * C1450 +
             C32803 * C1451) *
                C32593 * C32640) *
               C535 -
           ((C15263 + C15264 + C15265 + C15266) * C32593 * C32640 +
            (C15262 + C15261 + C15260 + C15259) * C32593 * C15102) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
              C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                 C32868 +
             (C17164 + C17165) * C32857 + C17172 * C32838) *
                C15102 +
            ((C16065 + C16066) * C32868 + C17811 * C32857 + C17131 * C32838) *
                C32640) *
               C534 -
           (((C17168 + C17169) * C32838 + C17812 * C32857 + C17813 * C32868) *
                C32640 +
            ((C17170 + C17171) * C32838 + (C17167 + C17166) * C32857 +
             (C17165 + C17164) * C32868) *
                C15102) *
               C535) *
              C444 +
          (((C17811 * C32868 + C17131 * C32857 + (C17169 + C17168) * C32838) *
                C15102 +
            ((C16646 + C16645) * C32868 + (C16968 + C16967) * C32857 +
             (C15914 * C7091 - C15915 * C7088 - C15914 * C7092 +
              C15908 * C7097 + C15916 * C7466 - C15917 * C7465 -
              C15916 * C7467 + C32498 * C7468) *
                 C32838) *
                C32640) *
               C535 -
           (((C16967 + C16968) * C32838 + (C16645 + C16646) * C32857 +
             (C16068 + C16067) * C32868) *
                C32640 +
            (C17812 * C32838 + C17813 * C32857 + (C16066 + C16065) * C32868) *
                C15102) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
                C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
                C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
                C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
                   C32593 * C15102 +
               (C15104 * C235 - C15105 * C221 - C15104 * C236 + C32873 * C251 +
                C15106 * C233 - C15107 * C220 - C15106 * C234 + C32866 * C250 +
                C15108 * C231 - C15109 * C219 - C15108 * C232 + C32853 * C249 +
                C15110 * C229 - C15111 * C218 - C15110 * C230 + C32803 * C248) *
                   C32593 * C32640) *
                  C32551 * C32537 * C110 -
              ((C15110 * C227 - C15111 * C217 - C15110 * C228 + C32803 * C247 +
                C15108 * C229 - C15109 * C218 - C15108 * C230 + C32853 * C248 +
                C15106 * C231 - C15107 * C219 - C15106 * C232 + C32866 * C249 +
                C15104 * C233 - C15105 * C220 - C15104 * C234 + C32873 * C250) *
                   C32593 * C32640 +
               (C15110 * C138 - C15111 * C127 - C15110 * C139 + C32803 * C148 +
                C15108 * C136 - C15109 * C126 - C15108 * C137 + C32853 * C147 +
                C15106 * C134 - C15107 * C125 - C15106 * C135 + C32866 * C146 +
                C15104 * C132 - C15105 * C124 - C15104 * C133 + C32873 * C145) *
                   C32593 * C15102) *
                  C32551 * C32537 * C111 +
              ((C15104 * C134 - C15105 * C125 - C15104 * C135 + C32873 * C146 +
                C15106 * C136 - C15107 * C126 - C15106 * C137 + C32866 * C147 +
                C15108 * C138 - C15109 * C127 - C15108 * C139 + C32853 * C148 +
                C15110 * C140 - C15111 * C128 - C15110 * C141 + C32803 * C149) *
                   C32593 * C15102 +
               (C15104 * C231 - C15105 * C219 - C15104 * C232 + C32873 * C249 +
                C15106 * C229 - C15107 * C218 - C15106 * C230 + C32866 * C248 +
                C15108 * C227 - C15109 * C217 - C15108 * C228 + C32853 * C247 +
                C15110 * C449 - C15111 * C448 - C15110 * C450 + C32803 * C451) *
                   C32593 * C32640) *
                  C32551 * C32537 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
                C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
                C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
                C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
                   C32593 * C15102 +
               (C15259 + C15260 + C15261 + C15262) * C32593 * C32640) *
                  C32551 * C213 -
              ((C15263 + C15264 + C15265 + C15266) * C32593 * C32640 +
               (C15262 + C15261 + C15260 + C15259) * C32593 * C15102) *
                  C32551 * C214 +
              ((C15266 + C15265 + C15264 + C15263) * C32593 * C15102 +
               (C15104 * C884 - C15105 * C876 - C15104 * C885 + C32873 * C894 +
                C15106 * C882 - C15107 * C875 - C15106 * C883 + C32866 * C893 +
                C15108 * C880 - C15109 * C874 - C15108 * C881 + C32853 * C892 +
                C15110 * C1257 - C15111 * C1256 - C15110 * C1258 +
                C32803 * C1259) *
                   C32593 * C32640) *
                  C32551 * C215) *
             C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
            C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
            C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
            C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
               C32593 * C15102 +
           (C15259 + C15260 + C15261 + C15262) * C32593 * C32640) *
              C319 -
          ((C15110 * C633 - C15111 * C625 - C15110 * C634 + C32803 * C640 +
            C15108 * C631 - C15109 * C624 - C15108 * C632 + C32853 * C639 +
            C15106 * C629 - C15107 * C623 - C15106 * C630 + C32866 * C638 +
            C15104 * C627 - C15105 * C622 - C15104 * C628 + C32873 * C637) *
               C32593 * C32640 +
           (C15110 * C334 - C15111 * C323 - C15110 * C335 + C32803 * C353 +
            C15108 * C336 - C15109 * C324 - C15108 * C337 + C32853 * C354 +
            C15106 * C338 - C15107 * C325 - C15106 * C339 + C32866 * C355 +
            C15104 * C340 - C15105 * C326 - C15104 * C341 + C32873 * C356) *
               C32593 * C15102) *
              C320 +
          ((C15104 * C342 - C15105 * C327 - C15104 * C343 + C32873 * C357 +
            C15106 * C344 - C15107 * C328 - C15106 * C345 + C32866 * C358 +
            C15108 * C346 - C15109 * C329 - C15108 * C347 + C32853 * C359 +
            C15110 * C348 - C15111 * C330 - C15110 * C349 + C32803 * C360) *
               C32593 * C15102 +
           (C15104 * C1089 - C15105 * C1077 - C15104 * C1090 + C32873 * C1104 +
            C15106 * C1091 - C15107 * C1078 - C15106 * C1092 + C32866 * C1105 +
            C15108 * C1093 - C15109 * C1079 - C15108 * C1094 + C32853 * C1106 +
            C15110 * C2221 - C15111 * C2220 - C15110 * C2222 + C32803 * C2223) *
               C32593 * C32640) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
            C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
               C32593 * C32874 +
           (C15914 * C235 - C15915 * C221 - C15914 * C236 + C15908 * C251 +
            C15916 * C233 - C15917 * C220 - C15916 * C234 + C32498 * C250) *
               C32593 * C32870 +
           (C15914 * C237 - C15915 * C222 - C15914 * C238 + C15908 * C252 +
            C15916 * C239 - C15917 * C223 - C15916 * C240 + C32498 * C253) *
               C32593 * C32860 +
           (C15914 * C884 - C15915 * C876 - C15914 * C885 + C15908 * C894 +
            C15916 * C882 - C15917 * C875 - C15916 * C883 + C32498 * C893) *
               C32593 * C32812) *
              C32551 * C32537 * C110 -
          ((C15916 * C880 - C15917 * C874 - C15916 * C881 + C32498 * C892 +
            C15914 * C882 - C15915 * C875 - C15914 * C883 + C15908 * C893) *
               C32593 * C32812 +
           (C15916 * C241 - C15917 * C224 - C15916 * C242 + C32498 * C254 +
            C15914 * C239 - C15915 * C223 - C15914 * C240 + C15908 * C253) *
               C32593 * C32860 +
           (C15916 * C231 - C15917 * C219 - C15916 * C232 + C32498 * C249 +
            C15914 * C233 - C15915 * C220 - C15914 * C234 + C15908 * C250) *
               C32593 * C32870 +
           (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
            C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
               C32593 * C32874) *
              C32551 * C32537 * C111 +
          ((C15914 * C134 - C15915 * C125 - C15914 * C135 + C15908 * C146 +
            C15916 * C136 - C15917 * C126 - C15916 * C137 + C32498 * C147) *
               C32593 * C32874 +
           (C15914 * C231 - C15915 * C219 - C15914 * C232 + C15908 * C249 +
            C15916 * C229 - C15917 * C218 - C15916 * C230 + C32498 * C248) *
               C32593 * C32870 +
           (C15914 * C241 - C15915 * C224 - C15914 * C242 + C15908 * C254 +
            C15916 * C243 - C15917 * C225 - C15916 * C244 + C32498 * C255) *
               C32593 * C32860 +
           (C15914 * C880 - C15915 * C874 - C15914 * C881 + C15908 * C892 +
            C15916 * C1257 - C15917 * C1256 - C15916 * C1258 + C32498 * C1259) *
               C32593 * C32812) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
            C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
               C32593 * C32874 +
           (C16065 + C16066) * C32593 * C32870 + C16075 * C32860 +
           C16076 * C32812) *
              C32551 * C213 -
          ((C16071 + C16072) * C32593 * C32812 +
           (C16070 + C16069) * C32593 * C32860 +
           (C16068 + C16067) * C32593 * C32870 +
           (C16066 + C16065) * C32593 * C32874) *
              C32551 * C214 +
          (C16075 * C32874 + C16076 * C32870 +
           (C16072 + C16071) * C32593 * C32860 +
           (C15914 * C6284 - C15915 * C6282 - C15914 * C6285 + C15908 * C6288 +
            C15916 * C6487 - C15917 * C6486 - C15916 * C6488 + C32498 * C6489) *
               C32593 * C32812) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
            C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
               C32593 * C32874 +
           (C16065 + C16066) * C32593 * C32870 + C16075 * C32860 +
           C16076 * C32812) *
              C319 -
          ((C15916 * C1603 - C15917 * C1599 - C15916 * C1604 + C32498 * C1608 +
            C15914 * C1601 - C15915 * C1598 - C15914 * C1602 + C15908 * C1607) *
               C32593 * C32812 +
           (C15916 * C1085 - C15917 * C1075 - C15916 * C1086 + C32498 * C1102 +
            C15914 * C1087 - C15915 * C1076 - C15914 * C1088 + C15908 * C1103) *
               C32593 * C32860 +
           (C15916 * C629 - C15917 * C623 - C15916 * C630 + C32498 * C638 +
            C15914 * C627 - C15915 * C622 - C15914 * C628 + C15908 * C637) *
               C32593 * C32870 +
           (C15916 * C338 - C15917 * C325 - C15916 * C339 + C32498 * C355 +
            C15914 * C340 - C15915 * C326 - C15914 * C341 + C15908 * C356) *
               C32593 * C32874) *
              C320 +
          ((C15914 * C342 - C15915 * C327 - C15914 * C343 + C15908 * C357 +
            C15916 * C344 - C15917 * C328 - C15916 * C345 + C32498 * C358) *
               C32593 * C32874 +
           (C15914 * C1089 - C15915 * C1077 - C15914 * C1090 + C15908 * C1104 +
            C15916 * C1091 - C15917 * C1078 - C15916 * C1092 + C32498 * C1105) *
               C32593 * C32870 +
           (C15914 * C1095 - C15915 * C1080 - C15914 * C1096 + C15908 * C1107 +
            C15916 * C1097 - C15917 * C1081 - C15916 * C1098 + C32498 * C1108) *
               C32593 * C32860 +
           (C15914 * C6397 - C15915 * C6393 - C15914 * C6398 + C15908 * C6402 +
            C15916 * C7282 - C15917 * C7281 - C15916 * C7283 + C32498 * C7284) *
               C32593 * C32812) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C32868 +
            (C15914 * C340 - C15915 * C326 - C15914 * C341 + C15908 * C356 +
             C15916 * C338 - C15917 * C325 - C15916 * C339 + C32498 * C355) *
                C32857 +
            (C15914 * C342 - C15915 * C327 - C15914 * C343 + C15908 * C357 +
             C15916 * C344 - C15917 * C328 - C15916 * C345 + C32498 * C358) *
                C32838) *
               C15102 +
           ((C16065 + C16066) * C32868 + (C16648 + C16647) * C32857 +
            (C15914 * C1089 - C15915 * C1077 - C15914 * C1090 + C15908 * C1104 +
             C15916 * C1091 - C15917 * C1078 - C15916 * C1092 +
             C32498 * C1105) *
                C32838) *
               C32640) *
              C32551 * C32537 * C110 -
          (((C15916 * C1093 - C15917 * C1079 - C15916 * C1094 + C32498 * C1106 +
             C15914 * C1091 - C15915 * C1078 - C15914 * C1092 +
             C15908 * C1105) *
                C32838 +
            (C15916 * C631 - C15917 * C624 - C15916 * C632 + C32498 * C639 +
             C15914 * C629 - C15915 * C623 - C15914 * C630 + C15908 * C638) *
                C32857 +
            (C16342 + C16341) * C32868) *
               C32640 +
           ((C15916 * C346 - C15917 * C329 - C15916 * C347 + C32498 * C359 +
             C15914 * C344 - C15915 * C328 - C15914 * C345 + C15908 * C358) *
                C32838 +
            (C15916 * C336 - C15917 * C324 - C15916 * C337 + C32498 * C354 +
             C15914 * C338 - C15915 * C325 - C15914 * C339 + C15908 * C355) *
                C32857 +
            (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
             C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
                C32868) *
               C15102) *
              C32551 * C32537 * C111 +
          (((C15914 * C134 - C15915 * C125 - C15914 * C135 + C15908 * C146 +
             C15916 * C136 - C15917 * C126 - C15916 * C137 + C32498 * C147) *
                C32868 +
            (C15914 * C336 - C15915 * C324 - C15914 * C337 + C15908 * C354 +
             C15916 * C334 - C15917 * C323 - C15916 * C335 + C32498 * C353) *
                C32857 +
            (C15914 * C346 - C15915 * C329 - C15914 * C347 + C15908 * C359 +
             C15916 * C348 - C15917 * C330 - C15916 * C349 + C32498 * C360) *
                C32838) *
               C15102 +
           ((C15914 * C231 - C15915 * C219 - C15914 * C232 + C15908 * C249 +
             C15916 * C229 - C15917 * C218 - C15916 * C230 + C32498 * C248) *
                C32868 +
            (C15914 * C631 - C15915 * C624 - C15914 * C632 + C15908 * C639 +
             C15916 * C633 - C15917 * C625 - C15916 * C634 + C32498 * C640) *
                C32857 +
            (C15914 * C1093 - C15915 * C1079 - C15914 * C1094 + C15908 * C1106 +
             C15916 * C2221 - C15917 * C2220 - C15916 * C2222 +
             C32498 * C2223) *
                C32838) *
               C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C32868 +
            (C15914 * C340 - C15915 * C326 - C15914 * C341 + C15908 * C356 +
             C15916 * C338 - C15917 * C325 - C15916 * C339 + C32498 * C355) *
                C32857 +
            (C15914 * C342 - C15915 * C327 - C15914 * C343 + C15908 * C357 +
             C15916 * C344 - C15917 * C328 - C15916 * C345 + C32498 * C358) *
                C32838) *
               C15102 +
           ((C16065 + C16066) * C32868 + (C16648 + C16647) * C32857 +
            (C16965 + C16966) * C32838) *
               C32640) *
              C32551 * C213 -
          (((C16967 + C16968) * C32838 + (C16645 + C16646) * C32857 +
            (C16068 + C16067) * C32868) *
               C32640 +
           ((C16966 + C16965) * C32838 + (C16647 + C16648) * C32857 +
            (C16066 + C16065) * C32868) *
               C15102) *
              C32551 * C214 +
          ((C16073 * C32868 + (C16646 + C16645) * C32857 +
            (C16968 + C16967) * C32838) *
               C15102 +
           (C16074 * C32868 + (C16644 + C16643) * C32857 +
            (C15914 * C6397 - C15915 * C6393 - C15914 * C6398 + C15908 * C6402 +
             C15916 * C7282 - C15917 * C7281 - C15916 * C7283 +
             C32498 * C7284) *
                C32838) *
               C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C32868 +
            (C17164 + C17165) * C32857 + C17172 * C32838) *
               C15102 +
           ((C16065 + C16066) * C32868 + (C16648 + C16647) * C32857 +
            C17131 * C32838) *
               C32640) *
              C319 -
          (((C17168 + C17169) * C32838 + (C16966 + C16965) * C32857 +
            (C16647 + C16648) * C32868) *
               C32640 +
           ((C17170 + C17171) * C32838 + (C17167 + C17166) * C32857 +
            (C17165 + C17164) * C32868) *
               C15102) *
              C320 +
          ((C17172 * C32868 + (C17171 + C17170) * C32857 +
            (C15914 * C1997 - C15915 * C1988 - C15914 * C1998 + C15908 * C2006 +
             C15916 * C1999 - C15917 * C1989 - C15916 * C2000 +
             C32498 * C2007) *
                C32838) *
               C15102 +
           (C17131 * C32868 + (C17169 + C17168) * C32857 +
            (C15914 * C7093 - C15915 * C7089 - C15914 * C7094 + C15908 * C7098 +
             C15916 * C12301 - C15917 * C12300 - C15916 * C12302 +
             C32498 * C12303) *
                C32838) *
               C32640) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C32593 * C32874 +
            (C16065 + C16066) * C32593 * C32870 + C16075 * C32860 +
            C16076 * C32812) *
               C534 -
           ((C15916 * C1603 - C15917 * C1599 - C15916 * C1604 + C32498 * C1608 +
             C15914 * C1601 - C15915 * C1598 - C15914 * C1602 +
             C15908 * C1607) *
                C32593 * C32812 +
            (C15916 * C1085 - C15917 * C1075 - C15916 * C1086 + C32498 * C1102 +
             C15914 * C1087 - C15915 * C1076 - C15914 * C1088 +
             C15908 * C1103) *
                C32593 * C32860 +
            (C15916 * C629 - C15917 * C623 - C15916 * C630 + C32498 * C638 +
             C15914 * C627 - C15915 * C622 - C15914 * C628 + C15908 * C637) *
                C32593 * C32870 +
            (C15916 * C338 - C15917 * C325 - C15916 * C339 + C32498 * C355 +
             C15914 * C340 - C15915 * C326 - C15914 * C341 + C15908 * C356) *
                C32593 * C32874) *
               C535) *
              C32537 * C446 +
          (((C15914 * C338 - C15915 * C325 - C15914 * C339 + C15908 * C355 +
             C15916 * C336 - C15917 * C324 - C15916 * C337 + C32498 * C354) *
                C32593 * C32874 +
            (C15914 * C629 - C15915 * C623 - C15914 * C630 + C15908 * C638 +
             C15916 * C631 - C15917 * C624 - C15916 * C632 + C32498 * C639) *
                C32593 * C32870 +
            (C15914 * C1085 - C15915 * C1075 - C15914 * C1086 + C15908 * C1102 +
             C15916 * C1083 - C15917 * C1074 - C15916 * C1084 +
             C32498 * C1101) *
                C32593 * C32860 +
            (C15914 * C1603 - C15915 * C1599 - C15914 * C1604 + C15908 * C1608 +
             C15916 * C1605 - C15917 * C1600 - C15916 * C1606 +
             C32498 * C1609) *
                C32593 * C32812) *
               C535 -
           ((C16346 + C16345) * C32593 * C32812 +
            (C16344 + C16343) * C32593 * C32860 +
            (C16342 + C16341) * C32593 * C32870 +
            (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
             C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
                C32593 * C32874) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
             C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
             C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
             C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
                C32593 * C15102 +
            (C15259 + C15260 + C15261 + C15262) * C32593 * C32640) *
               C534 -
           ((C15110 * C633 - C15111 * C625 - C15110 * C634 + C32803 * C640 +
             C15108 * C631 - C15109 * C624 - C15108 * C632 + C32853 * C639 +
             C15106 * C629 - C15107 * C623 - C15106 * C630 + C32866 * C638 +
             C15104 * C627 - C15105 * C622 - C15104 * C628 + C32873 * C637) *
                C32593 * C32640 +
            (C15110 * C334 - C15111 * C323 - C15110 * C335 + C32803 * C353 +
             C15108 * C336 - C15109 * C324 - C15108 * C337 + C32853 * C354 +
             C15106 * C338 - C15107 * C325 - C15106 * C339 + C32866 * C355 +
             C15104 * C340 - C15105 * C326 - C15104 * C341 + C32873 * C356) *
                C32593 * C15102) *
               C535) *
              C32537 * C446 +
          (((C15104 * C338 - C15105 * C325 - C15104 * C339 + C32873 * C355 +
             C15106 * C336 - C15107 * C324 - C15106 * C337 + C32866 * C354 +
             C15108 * C334 - C15109 * C323 - C15108 * C335 + C32853 * C353 +
             C15110 * C332 - C15111 * C322 - C15110 * C333 + C32803 * C352) *
                C32593 * C15102 +
            (C15104 * C629 - C15105 * C623 - C15104 * C630 + C32873 * C638 +
             C15106 * C631 - C15107 * C624 - C15106 * C632 + C32866 * C639 +
             C15108 * C633 - C15109 * C625 - C15108 * C634 + C32853 * C640 +
             C15110 * C635 - C15111 * C626 - C15110 * C636 + C32803 * C641) *
                C32593 * C32640) *
               C535 -
           ((C15522 + C15521 + C15520 + C15519) * C32593 * C32640 +
            (C15110 * C138 - C15111 * C127 - C15110 * C139 + C32803 * C148 +
             C15108 * C136 - C15109 * C126 - C15108 * C137 + C32853 * C147 +
             C15106 * C134 - C15107 * C125 - C15106 * C135 + C32866 * C146 +
             C15104 * C132 - C15105 * C124 - C15104 * C133 + C32873 * C145) *
                C32593 * C15102) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
              C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                 C32868 +
             (C17164 + C17165) * C32857 + C17172 * C32838) *
                C15102 +
            ((C16065 + C16066) * C32868 + (C16648 + C16647) * C32857 +
             C17131 * C32838) *
                C32640) *
               C534 -
           (((C17168 + C17169) * C32838 + (C16966 + C16965) * C32857 +
             (C16647 + C16648) * C32868) *
                C32640 +
            ((C17170 + C17171) * C32838 + (C17167 + C17166) * C32857 +
             (C17165 + C17164) * C32868) *
                C15102) *
               C535) *
              C32537 * C446 +
          ((((C17613 + C17614) * C32868 + (C17615 + C17616) * C32857 +
             (C15914 * C1993 - C15915 * C1986 - C15914 * C1994 +
              C15908 * C2004 + C15916 * C1991 - C15917 * C1985 -
              C15916 * C1992 + C32498 * C2003) *
                 C32838) *
                C15102 +
            ((C17391 + C17392) * C32868 + (C17393 + C17394) * C32857 +
             (C15914 * C2567 - C15915 * C2563 - C15914 * C2568 +
              C15908 * C2572 + C15916 * C2569 - C15917 * C2564 -
              C15916 * C2570 + C32498 * C2573) *
                 C32838) *
                C32640) *
               C535 -
           (((C17394 + C17393) * C32838 + (C17392 + C17391) * C32857 +
             (C16342 + C16341) * C32868) *
                C32640 +
            ((C17616 + C17615) * C32838 + (C17614 + C17613) * C32857 +
             (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
              C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
                 C32868) *
                C15102) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
            C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
            C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
            C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
               C32593 * C15102 +
           (C15259 + C15260 + C15261 + C15262) * C32593 * C32640) *
              C32551 * C213 -
          ((C15263 + C15264 + C15265 + C15266) * C32593 * C32640 +
           (C15262 + C15261 + C15260 + C15259) * C32593 * C15102) *
              C32551 * C214 +
          ((C15266 + C15265 + C15264 + C15263) * C32593 * C15102 +
           (C15104 * C884 - C15105 * C876 - C15104 * C885 + C32873 * C894 +
            C15106 * C882 - C15107 * C875 - C15106 * C883 + C32866 * C893 +
            C15108 * C880 - C15109 * C874 - C15108 * C881 + C32853 * C892 +
            C15110 * C1257 - C15111 * C1256 - C15110 * C1258 + C32803 * C1259) *
               C32593 * C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
            C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
            C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
            C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
               C32593 * C15102 +
           (C15104 * C235 - C15105 * C221 - C15104 * C236 + C32873 * C251 +
            C15106 * C233 - C15107 * C220 - C15106 * C234 + C32866 * C250 +
            C15108 * C231 - C15109 * C219 - C15108 * C232 + C32853 * C249 +
            C15110 * C229 - C15111 * C218 - C15110 * C230 + C32803 * C248) *
               C32593 * C32640) *
              C32551 * C32537 * C110 -
          ((C15110 * C227 - C15111 * C217 - C15110 * C228 + C32803 * C247 +
            C15108 * C229 - C15109 * C218 - C15108 * C230 + C32853 * C248 +
            C15106 * C231 - C15107 * C219 - C15106 * C232 + C32866 * C249 +
            C15104 * C233 - C15105 * C220 - C15104 * C234 + C32873 * C250) *
               C32593 * C32640 +
           (C15110 * C138 - C15111 * C127 - C15110 * C139 + C32803 * C148 +
            C15108 * C136 - C15109 * C126 - C15108 * C137 + C32853 * C147 +
            C15106 * C134 - C15107 * C125 - C15106 * C135 + C32866 * C146 +
            C15104 * C132 - C15105 * C124 - C15104 * C133 + C32873 * C145) *
               C32593 * C15102) *
              C32551 * C32537 * C111 +
          ((C15104 * C134 - C15105 * C125 - C15104 * C135 + C32873 * C146 +
            C15106 * C136 - C15107 * C126 - C15106 * C137 + C32866 * C147 +
            C15108 * C138 - C15109 * C127 - C15108 * C139 + C32853 * C148 +
            C15110 * C140 - C15111 * C128 - C15110 * C141 + C32803 * C149) *
               C32593 * C15102 +
           (C15104 * C231 - C15105 * C219 - C15104 * C232 + C32873 * C249 +
            C15106 * C229 - C15107 * C218 - C15106 * C230 + C32866 * C248 +
            C15108 * C227 - C15109 * C217 - C15108 * C228 + C32853 * C247 +
            C15110 * C449 - C15111 * C448 - C15110 * C450 + C32803 * C451) *
               C32593 * C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
            C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
               C32593 * C32874 +
           (C15914 * C235 - C15915 * C221 - C15914 * C236 + C15908 * C251 +
            C15916 * C233 - C15917 * C220 - C15916 * C234 + C32498 * C250) *
               C32593 * C32870 +
           (C15914 * C237 - C15915 * C222 - C15914 * C238 + C15908 * C252 +
            C15916 * C239 - C15917 * C223 - C15916 * C240 + C32498 * C253) *
               C32593 * C32860 +
           (C15914 * C884 - C15915 * C876 - C15914 * C885 + C15908 * C894 +
            C15916 * C882 - C15917 * C875 - C15916 * C883 + C32498 * C893) *
               C32593 * C32812) *
              C32551 * C32537 * C110 -
          ((C15916 * C880 - C15917 * C874 - C15916 * C881 + C32498 * C892 +
            C15914 * C882 - C15915 * C875 - C15914 * C883 + C15908 * C893) *
               C32593 * C32812 +
           (C15916 * C241 - C15917 * C224 - C15916 * C242 + C32498 * C254 +
            C15914 * C239 - C15915 * C223 - C15914 * C240 + C15908 * C253) *
               C32593 * C32860 +
           (C15916 * C231 - C15917 * C219 - C15916 * C232 + C32498 * C249 +
            C15914 * C233 - C15915 * C220 - C15914 * C234 + C15908 * C250) *
               C32593 * C32870 +
           (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
            C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
               C32593 * C32874) *
              C32551 * C32537 * C111 +
          ((C15914 * C134 - C15915 * C125 - C15914 * C135 + C15908 * C146 +
            C15916 * C136 - C15917 * C126 - C15916 * C137 + C32498 * C147) *
               C32593 * C32874 +
           (C15914 * C231 - C15915 * C219 - C15914 * C232 + C15908 * C249 +
            C15916 * C229 - C15917 * C218 - C15916 * C230 + C32498 * C248) *
               C32593 * C32870 +
           (C15914 * C241 - C15915 * C224 - C15914 * C242 + C15908 * C254 +
            C15916 * C243 - C15917 * C225 - C15916 * C244 + C32498 * C255) *
               C32593 * C32860 +
           (C15914 * C880 - C15915 * C874 - C15914 * C881 + C15908 * C892 +
            C15916 * C1257 - C15917 * C1256 - C15916 * C1258 + C32498 * C1259) *
               C32593 * C32812) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
            C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
               C32593 * C32874 +
           (C16065 + C16066) * C32593 * C32870 + C16075 * C32860 +
           C16076 * C32812) *
              C32551 * C213 -
          ((C16071 + C16072) * C32593 * C32812 +
           (C16070 + C16069) * C32593 * C32860 +
           (C16068 + C16067) * C32593 * C32870 +
           (C16066 + C16065) * C32593 * C32874) *
              C32551 * C214 +
          (C16075 * C32874 + C16076 * C32870 +
           (C16072 + C16071) * C32593 * C32860 +
           (C15914 * C6284 - C15915 * C6282 - C15914 * C6285 + C15908 * C6288 +
            C15916 * C6487 - C15917 * C6486 - C15916 * C6488 + C32498 * C6489) *
               C32593 * C32812) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C32868 +
            (C15914 * C340 - C15915 * C326 - C15914 * C341 + C15908 * C356 +
             C15916 * C338 - C15917 * C325 - C15916 * C339 + C32498 * C355) *
                C32857 +
            (C15914 * C342 - C15915 * C327 - C15914 * C343 + C15908 * C357 +
             C15916 * C344 - C15917 * C328 - C15916 * C345 + C32498 * C358) *
                C32838) *
               C15102 +
           ((C16065 + C16066) * C32868 + (C16648 + C16647) * C32857 +
            (C15914 * C1089 - C15915 * C1077 - C15914 * C1090 + C15908 * C1104 +
             C15916 * C1091 - C15917 * C1078 - C15916 * C1092 +
             C32498 * C1105) *
                C32838) *
               C32640) *
              C32551 * C32537 * C110 -
          (((C15916 * C1093 - C15917 * C1079 - C15916 * C1094 + C32498 * C1106 +
             C15914 * C1091 - C15915 * C1078 - C15914 * C1092 +
             C15908 * C1105) *
                C32838 +
            (C15916 * C631 - C15917 * C624 - C15916 * C632 + C32498 * C639 +
             C15914 * C629 - C15915 * C623 - C15914 * C630 + C15908 * C638) *
                C32857 +
            (C16342 + C16341) * C32868) *
               C32640 +
           ((C15916 * C346 - C15917 * C329 - C15916 * C347 + C32498 * C359 +
             C15914 * C344 - C15915 * C328 - C15914 * C345 + C15908 * C358) *
                C32838 +
            (C15916 * C336 - C15917 * C324 - C15916 * C337 + C32498 * C354 +
             C15914 * C338 - C15915 * C325 - C15914 * C339 + C15908 * C355) *
                C32857 +
            (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
             C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
                C32868) *
               C15102) *
              C32551 * C32537 * C111 +
          (((C15914 * C134 - C15915 * C125 - C15914 * C135 + C15908 * C146 +
             C15916 * C136 - C15917 * C126 - C15916 * C137 + C32498 * C147) *
                C32868 +
            (C15914 * C336 - C15915 * C324 - C15914 * C337 + C15908 * C354 +
             C15916 * C334 - C15917 * C323 - C15916 * C335 + C32498 * C353) *
                C32857 +
            (C15914 * C346 - C15915 * C329 - C15914 * C347 + C15908 * C359 +
             C15916 * C348 - C15917 * C330 - C15916 * C349 + C32498 * C360) *
                C32838) *
               C15102 +
           ((C15914 * C231 - C15915 * C219 - C15914 * C232 + C15908 * C249 +
             C15916 * C229 - C15917 * C218 - C15916 * C230 + C32498 * C248) *
                C32868 +
            (C15914 * C631 - C15915 * C624 - C15914 * C632 + C15908 * C639 +
             C15916 * C633 - C15917 * C625 - C15916 * C634 + C32498 * C640) *
                C32857 +
            (C15914 * C1093 - C15915 * C1079 - C15914 * C1094 + C15908 * C1106 +
             C15916 * C2221 - C15917 * C2220 - C15916 * C2222 +
             C32498 * C2223) *
                C32838) *
               C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C32868 +
            (C15914 * C340 - C15915 * C326 - C15914 * C341 + C15908 * C356 +
             C15916 * C338 - C15917 * C325 - C15916 * C339 + C32498 * C355) *
                C32857 +
            (C15914 * C342 - C15915 * C327 - C15914 * C343 + C15908 * C357 +
             C15916 * C344 - C15917 * C328 - C15916 * C345 + C32498 * C358) *
                C32838) *
               C15102 +
           ((C16065 + C16066) * C32868 + (C16648 + C16647) * C32857 +
            (C16965 + C16966) * C32838) *
               C32640) *
              C32551 * C213 -
          (((C16967 + C16968) * C32838 + (C16645 + C16646) * C32857 +
            (C16068 + C16067) * C32868) *
               C32640 +
           ((C16966 + C16965) * C32838 + (C16647 + C16648) * C32857 +
            (C16066 + C16065) * C32868) *
               C15102) *
              C32551 * C214 +
          ((C16073 * C32868 + (C16646 + C16645) * C32857 +
            (C16968 + C16967) * C32838) *
               C15102 +
           (C16074 * C32868 + (C16644 + C16643) * C32857 +
            (C15914 * C6397 - C15915 * C6393 - C15914 * C6398 + C15908 * C6402 +
             C15916 * C7282 - C15917 * C7281 - C15916 * C7283 +
             C32498 * C7284) *
                C32838) *
               C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
              C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
              C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
                 C32805 +
             (C19236 + C19237 + C19238) * C32680) *
                C15102 +
            ((C18100 + C18101 + C18102) * C32805 +
             (C18743 + C18742 + C18741) * C32680) *
                C32640) *
               C32551 * C444 -
           (((C18738 + C18739 + C18740) * C32680 +
             (C18105 + C18104 + C18103) * C32805) *
                C32640 +
            ((C18741 + C18742 + C18743) * C32680 +
             (C18102 + C18101 + C18100) * C32805) *
                C15102) *
               C32551 * C445) *
              C446 +
          ((((C18404 + C18405 + C18406) * C32805 +
             (C19457 + C19458 + C19459) * C32680) *
                C15102 +
            ((C18407 + C18408 + C18409) * C32805 +
             (C31633 * C1085 - C31673 * C1075 - C31633 * C1086 +
              C32493 * C1102 + C31629 * C1083 - C31668 * C1074 -
              C31629 * C1084 + C32501 * C1101 + C31679 * C1449 -
              C17934 * C1448 - C31679 * C1450 + C17925 * C1451) *
                 C32680) *
                C32640) *
               C32551 * C445 -
           (((C19459 + C19458 + C19457) * C32680 +
             (C18406 + C18405 + C18404) * C32805) *
                C32640 +
            ((C31679 * C334 - C17934 * C323 - C31679 * C335 + C17925 * C353 +
              C31629 * C336 - C31668 * C324 - C31629 * C337 + C32501 * C354 +
              C31633 * C338 - C31673 * C325 - C31633 * C339 + C32493 * C355) *
                 C32680 +
             (C31679 * C136 - C17934 * C126 - C31679 * C137 + C17925 * C147 +
              C31629 * C134 - C31668 * C125 - C31629 * C135 + C32501 * C146 +
              C31633 * C132 - C31673 * C124 - C31633 * C133 + C32493 * C145) *
                 C32805) *
                C15102) *
               C32551 * C444) *
              C447)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
              C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
              C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
                 C32805 +
             (C19236 + C19237 + C19238) * C32680) *
                C15102 +
            ((C18100 + C18101 + C18102) * C32805 + C19871 * C32680) * C32640) *
               C534 -
           (((C19239 + C19240 + C19241) * C32680 + C19872 * C32805) * C32640 +
            ((C19242 + C19243 + C19244) * C32680 +
             (C19238 + C19237 + C19236) * C32805) *
                C15102) *
               C535) *
              C444 +
          (((C19871 * C32805 + (C19241 + C19240 + C19239) * C32680) * C15102 +
            ((C18740 + C18739 + C18738) * C32805 +
             (C31633 * C1095 - C31673 * C1080 - C31633 * C1096 +
              C32493 * C1107 + C31629 * C1097 - C31668 * C1081 -
              C31629 * C1098 + C32501 * C1108 + C31679 * C1099 -
              C17934 * C1082 - C31679 * C1100 + C17925 * C1109) *
                 C32680) *
                C32640) *
               C535 -
           (((C18738 + C18739 + C18740) * C32680 +
             (C18105 + C18104 + C18103) * C32805) *
                C32640 +
            (C19872 * C32680 + (C18102 + C18101 + C18100) * C32805) * C15102) *
               C534) *
              C445) *
         C32525) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
             C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
             C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
                C32805 +
            (C31633 * C340 - C31673 * C326 - C31633 * C341 + C32493 * C356 +
             C31629 * C338 - C31668 * C325 - C31629 * C339 + C32501 * C355 +
             C31679 * C336 - C17934 * C324 - C31679 * C337 + C17925 * C354) *
                C32680) *
               C15102 +
           ((C18100 + C18101 + C18102) * C32805 +
            (C18743 + C18742 + C18741) * C32680) *
               C32640) *
              C32551 * C213 -
          (((C18738 + C18739 + C18740) * C32680 +
            (C18105 + C18104 + C18103) * C32805) *
               C32640 +
           ((C18741 + C18742 + C18743) * C32680 +
            (C18102 + C18101 + C18100) * C32805) *
               C15102) *
              C32551 * C214 +
          ((C18110 * C32805 + (C18740 + C18739 + C18738) * C32680) * C15102 +
           ((C18108 + C18107 + C18106) * C32805 +
            (C31633 * C1601 - C31673 * C1598 - C31633 * C1602 + C32493 * C1607 +
             C31629 * C1603 - C31668 * C1599 - C31629 * C1604 + C32501 * C1608 +
             C31679 * C1605 - C17934 * C1600 - C31679 * C1606 +
             C17925 * C1609) *
                C32680) *
               C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
             C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
             C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
                C32805 +
            (C31633 * C340 - C31673 * C326 - C31633 * C341 + C32493 * C356 +
             C31629 * C338 - C31668 * C325 - C31629 * C339 + C32501 * C355 +
             C31679 * C336 - C17934 * C324 - C31679 * C337 + C17925 * C354) *
                C32680) *
               C15102 +
           ((C18100 + C18101 + C18102) * C32805 +
            (C18743 + C18742 + C18741) * C32680) *
               C32640) *
              C32551 * C32537 * C110 -
          (((C31679 * C633 - C17934 * C625 - C31679 * C634 + C17925 * C640 +
             C31629 * C631 - C31668 * C624 - C31629 * C632 + C32501 * C639 +
             C31633 * C629 - C31673 * C623 - C31633 * C630 + C32493 * C638) *
                C32680 +
            (C18406 + C18405 + C18404) * C32805) *
               C32640 +
           ((C31679 * C334 - C17934 * C323 - C31679 * C335 + C17925 * C353 +
             C31629 * C336 - C31668 * C324 - C31629 * C337 + C32501 * C354 +
             C31633 * C338 - C31673 * C325 - C31633 * C339 + C32493 * C355) *
                C32680 +
            (C31679 * C136 - C17934 * C126 - C31679 * C137 + C17925 * C147 +
             C31629 * C134 - C31668 * C125 - C31629 * C135 + C32501 * C146 +
             C31633 * C132 - C31673 * C124 - C31633 * C133 + C32493 * C145) *
                C32805) *
               C15102) *
              C32551 * C32537 * C111 +
          (((C31633 * C134 - C31673 * C125 - C31633 * C135 + C32493 * C146 +
             C31629 * C136 - C31668 * C126 - C31629 * C137 + C32501 * C147 +
             C31679 * C138 - C17934 * C127 - C31679 * C139 + C17925 * C148) *
                C32805 +
            (C31633 * C336 - C31673 * C324 - C31633 * C337 + C32493 * C354 +
             C31629 * C334 - C31668 * C323 - C31629 * C335 + C32501 * C353 +
             C31679 * C332 - C17934 * C322 - C31679 * C333 + C17925 * C352) *
                C32680) *
               C15102 +
           ((C31633 * C231 - C31673 * C219 - C31633 * C232 + C32493 * C249 +
             C31629 * C229 - C31668 * C218 - C31629 * C230 + C32501 * C248 +
             C31679 * C227 - C17934 * C217 - C31679 * C228 + C17925 * C247) *
                C32805 +
            (C31633 * C631 - C31673 * C624 - C31633 * C632 + C32493 * C639 +
             C31629 * C633 - C31668 * C625 - C31629 * C634 + C32501 * C640 +
             C31679 * C635 - C17934 * C626 - C31679 * C636 + C17925 * C641) *
                C32680) *
               C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
             C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
             C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
                C32805 +
            (C19236 + C19237 + C19238) * C32680) *
               C15102 +
           ((C18100 + C18101 + C18102) * C32805 +
            (C18743 + C18742 + C18741) * C32680) *
               C32640) *
              C319 -
          (((C19239 + C19240 + C19241) * C32680 +
            (C18741 + C18742 + C18743) * C32805) *
               C32640 +
           ((C19242 + C19243 + C19244) * C32680 +
            (C19238 + C19237 + C19236) * C32805) *
               C15102) *
              C320 +
          (((C19244 + C19243 + C19242) * C32805 +
            (C31633 * C1995 - C31673 * C1987 - C31633 * C1996 + C32493 * C2005 +
             C31629 * C1993 - C31668 * C1986 - C31629 * C1994 + C32501 * C2004 +
             C31679 * C1991 - C17934 * C1985 - C31679 * C1992 +
             C17925 * C2003) *
                C32680) *
               C15102 +
           ((C19241 + C19240 + C19239) * C32805 +
            (C31633 * C2565 - C31673 * C2562 - C31633 * C2566 + C32493 * C2571 +
             C31629 * C2567 - C31668 * C2563 - C31629 * C2568 + C32501 * C2572 +
             C31679 * C2569 - C17934 * C2564 - C31679 * C2570 +
             C17925 * C2573) *
                C32680) *
               C32640) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
              C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
              C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
                 C32805 +
             (C19236 + C19237 + C19238) * C32680) *
                C15102 +
            ((C18100 + C18101 + C18102) * C32805 +
             (C18743 + C18742 + C18741) * C32680) *
                C32640) *
               C534 -
           (((C19239 + C19240 + C19241) * C32680 +
             (C18741 + C18742 + C18743) * C32805) *
                C32640 +
            ((C19242 + C19243 + C19244) * C32680 +
             (C19238 + C19237 + C19236) * C32805) *
                C15102) *
               C535) *
              C32537 * C446 +
          ((((C19672 + C19673 + C19674) * C32805 +
             (C31633 * C344 - C31673 * C328 - C31633 * C345 + C32493 * C358 +
              C31629 * C346 - C31668 * C329 - C31629 * C347 + C32501 * C359 +
              C31679 * C348 - C17934 * C330 - C31679 * C349 + C17925 * C360) *
                 C32680) *
                C15102 +
            ((C19457 + C19458 + C19459) * C32805 +
             (C31633 * C1091 - C31673 * C1078 - C31633 * C1092 +
              C32493 * C1105 + C31629 * C1093 - C31668 * C1079 -
              C31629 * C1094 + C32501 * C1106 + C31679 * C2221 -
              C17934 * C2220 - C31679 * C2222 + C17925 * C2223) *
                 C32680) *
                C32640) *
               C535 -
           (((C19459 + C19458 + C19457) * C32680 +
             (C18406 + C18405 + C18404) * C32805) *
                C32640 +
            ((C19674 + C19673 + C19672) * C32680 +
             (C31679 * C136 - C17934 * C126 - C31679 * C137 + C17925 * C147 +
              C31629 * C134 - C31668 * C125 - C31629 * C135 + C32501 * C146 +
              C31633 * C132 - C31673 * C124 - C31633 * C133 + C32493 * C145) *
                 C32805) *
                C15102) *
               C534) *
              C32537 * C447)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
             C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
             C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
                C32805 +
            (C31633 * C340 - C31673 * C326 - C31633 * C341 + C32493 * C356 +
             C31629 * C338 - C31668 * C325 - C31629 * C339 + C32501 * C355 +
             C31679 * C336 - C17934 * C324 - C31679 * C337 + C17925 * C354) *
                C32680) *
               C15102 +
           ((C18100 + C18101 + C18102) * C32805 +
            (C18743 + C18742 + C18741) * C32680) *
               C32640) *
              C32551 * C32537 * C110 -
          (((C31679 * C633 - C17934 * C625 - C31679 * C634 + C17925 * C640 +
             C31629 * C631 - C31668 * C624 - C31629 * C632 + C32501 * C639 +
             C31633 * C629 - C31673 * C623 - C31633 * C630 + C32493 * C638) *
                C32680 +
            (C18406 + C18405 + C18404) * C32805) *
               C32640 +
           ((C31679 * C334 - C17934 * C323 - C31679 * C335 + C17925 * C353 +
             C31629 * C336 - C31668 * C324 - C31629 * C337 + C32501 * C354 +
             C31633 * C338 - C31673 * C325 - C31633 * C339 + C32493 * C355) *
                C32680 +
            (C31679 * C136 - C17934 * C126 - C31679 * C137 + C17925 * C147 +
             C31629 * C134 - C31668 * C125 - C31629 * C135 + C32501 * C146 +
             C31633 * C132 - C31673 * C124 - C31633 * C133 + C32493 * C145) *
                C32805) *
               C15102) *
              C32551 * C32537 * C111 +
          (((C31633 * C134 - C31673 * C125 - C31633 * C135 + C32493 * C146 +
             C31629 * C136 - C31668 * C126 - C31629 * C137 + C32501 * C147 +
             C31679 * C138 - C17934 * C127 - C31679 * C139 + C17925 * C148) *
                C32805 +
            (C31633 * C336 - C31673 * C324 - C31633 * C337 + C32493 * C354 +
             C31629 * C334 - C31668 * C323 - C31629 * C335 + C32501 * C353 +
             C31679 * C332 - C17934 * C322 - C31679 * C333 + C17925 * C352) *
                C32680) *
               C15102 +
           ((C31633 * C231 - C31673 * C219 - C31633 * C232 + C32493 * C249 +
             C31629 * C229 - C31668 * C218 - C31629 * C230 + C32501 * C248 +
             C31679 * C227 - C17934 * C217 - C31679 * C228 + C17925 * C247) *
                C32805 +
            (C31633 * C631 - C31673 * C624 - C31633 * C632 + C32493 * C639 +
             C31629 * C633 - C31668 * C625 - C31629 * C634 + C32501 * C640 +
             C31679 * C635 - C17934 * C626 - C31679 * C636 + C17925 * C641) *
                C32680) *
               C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
             C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
             C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
                C32805 +
            (C31633 * C340 - C31673 * C326 - C31633 * C341 + C32493 * C356 +
             C31629 * C338 - C31668 * C325 - C31629 * C339 + C32501 * C355 +
             C31679 * C336 - C17934 * C324 - C31679 * C337 + C17925 * C354) *
                C32680) *
               C15102 +
           ((C18100 + C18101 + C18102) * C32805 +
            (C18743 + C18742 + C18741) * C32680) *
               C32640) *
              C32551 * C213 -
          (((C18738 + C18739 + C18740) * C32680 +
            (C18105 + C18104 + C18103) * C32805) *
               C32640 +
           ((C18741 + C18742 + C18743) * C32680 +
            (C18102 + C18101 + C18100) * C32805) *
               C15102) *
              C32551 * C214 +
          ((C18110 * C32805 + (C18740 + C18739 + C18738) * C32680) * C15102 +
           ((C18108 + C18107 + C18106) * C32805 +
            (C31633 * C1601 - C31673 * C1598 - C31633 * C1602 + C32493 * C1607 +
             C31629 * C1603 - C31668 * C1599 - C31629 * C1604 + C32501 * C1608 +
             C31679 * C1605 - C17934 * C1600 - C31679 * C1606 +
             C17925 * C1609) *
                C32680) *
               C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
             C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
             C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
             C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
                C32593 * C15102 +
            (C15259 + C15260 + C15261 + C15262) * C32593 * C32640) *
               C32551 * C444 -
           ((C15263 + C15264 + C15265 + C15266) * C32593 * C32640 +
            (C15262 + C15261 + C15260 + C15259) * C32593 * C15102) *
               C32551 * C445) *
              C446 +
          (((C15519 + C15520 + C15521 + C15522) * C32593 * C15102 +
            (C15104 * C239 - C15105 * C223 - C15104 * C240 + C32873 * C253 +
             C15106 * C241 - C15107 * C224 - C15106 * C242 + C32866 * C254 +
             C15108 * C243 - C15109 * C225 - C15108 * C244 + C32853 * C255 +
             C15110 * C245 - C15111 * C226 - C15110 * C246 + C32803 * C256) *
                C32593 * C32640) *
               C32551 * C445 -
           ((C15522 + C15521 + C15520 + C15519) * C32593 * C32640 +
            (C15110 * C138 - C15111 * C127 - C15110 * C139 + C32803 * C148 +
             C15108 * C136 - C15109 * C126 - C15108 * C137 + C32853 * C147 +
             C15106 * C134 - C15107 * C125 - C15106 * C135 + C32866 * C146 +
             C15104 * C132 - C15105 * C124 - C15104 * C133 + C32873 * C145) *
                C32593 * C15102) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C32593 * C32874 +
            (C16065 + C16066) * C32593 * C32870 + C16075 * C32860 +
            C16076 * C32812) *
               C32551 * C444 -
           ((C16071 + C16072) * C32593 * C32812 +
            (C16070 + C16069) * C32593 * C32860 +
            (C16068 + C16067) * C32593 * C32870 +
            (C16066 + C16065) * C32593 * C32874) *
               C32551 * C445) *
              C446 +
          (((C16341 + C16342) * C32593 * C32874 +
            (C16343 + C16344) * C32593 * C32870 +
            (C16345 + C16346) * C32593 * C32860 +
            (C15914 * C888 - C15915 * C878 - C15914 * C889 + C15908 * C896 +
             C15916 * C890 - C15917 * C879 - C15916 * C891 + C32498 * C897) *
                C32593 * C32812) *
               C32551 * C445 -
           ((C16346 + C16345) * C32593 * C32812 +
            (C16344 + C16343) * C32593 * C32860 +
            (C16342 + C16341) * C32593 * C32870 +
            (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
             C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
                C32593 * C32874) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
             C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
             C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
             C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
                C32593 * C15102 +
            (C15259 + C15260 + C15261 + C15262) * C32593 * C32640) *
               C534 -
           ((C15807 + C15808 + C15809 + C15810) * C32593 * C32640 +
            (C15110 * C334 - C15111 * C323 - C15110 * C335 + C32803 * C353 +
             C15108 * C336 - C15109 * C324 - C15108 * C337 + C32853 * C354 +
             C15106 * C338 - C15107 * C325 - C15106 * C339 + C32866 * C355 +
             C15104 * C340 - C15105 * C326 - C15104 * C341 + C32873 * C356) *
                C32593 * C15102) *
               C535) *
              C444 +
          (((C15810 + C15809 + C15808 + C15807) * C32593 * C15102 +
            (C15104 * C1087 - C15105 * C1076 - C15104 * C1088 + C32873 * C1103 +
             C15106 * C1085 - C15107 * C1075 - C15106 * C1086 + C32866 * C1102 +
             C15108 * C1083 - C15109 * C1074 - C15108 * C1084 + C32853 * C1101 +
             C15110 * C1449 - C15111 * C1448 - C15110 * C1450 +
             C32803 * C1451) *
                C32593 * C32640) *
               C535 -
           ((C15263 + C15264 + C15265 + C15266) * C32593 * C32640 +
            (C15262 + C15261 + C15260 + C15259) * C32593 * C15102) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C32593 * C32874 +
            (C16065 + C16066) * C32593 * C32870 + C16075 * C32860 +
            C16076 * C32812) *
               C534 -
           ((C16643 + C16644) * C32593 * C32812 +
            (C16645 + C16646) * C32593 * C32860 +
            (C16647 + C16648) * C32593 * C32870 +
            (C15916 * C338 - C15917 * C325 - C15916 * C339 + C32498 * C355 +
             C15914 * C340 - C15915 * C326 - C15914 * C341 + C15908 * C356) *
                C32593 * C32874) *
               C535) *
              C444 +
          (((C16648 + C16647) * C32593 * C32874 +
            (C16646 + C16645) * C32593 * C32870 +
            (C16644 + C16643) * C32593 * C32860 +
            (C15914 * C6395 - C15915 * C6392 - C15914 * C6396 + C15908 * C6401 +
             C15916 * C6605 - C15917 * C6604 - C15916 * C6606 +
             C32498 * C6607) *
                C32593 * C32812) *
               C535 -
           ((C16071 + C16072) * C32593 * C32812 +
            (C16070 + C16069) * C32593 * C32860 +
            (C16068 + C16067) * C32593 * C32870 +
            (C16066 + C16065) * C32593 * C32874) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
            C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
            C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
            C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
               C32593 * C15102 +
           (C15259 + C15260 + C15261 + C15262) * C32593 * C32640) *
              C32551 * C213 -
          ((C15263 + C15264 + C15265 + C15266) * C32593 * C32640 +
           (C15262 + C15261 + C15260 + C15259) * C32593 * C15102) *
              C32551 * C214 +
          ((C15266 + C15265 + C15264 + C15263) * C32593 * C15102 +
           (C15104 * C884 - C15105 * C876 - C15104 * C885 + C32873 * C894 +
            C15106 * C882 - C15107 * C875 - C15106 * C883 + C32866 * C893 +
            C15108 * C880 - C15109 * C874 - C15108 * C881 + C32853 * C892 +
            C15110 * C1257 - C15111 * C1256 - C15110 * C1258 + C32803 * C1259) *
               C32593 * C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
            C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
            C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
            C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
               C32593 * C15102 +
           (C15104 * C235 - C15105 * C221 - C15104 * C236 + C32873 * C251 +
            C15106 * C233 - C15107 * C220 - C15106 * C234 + C32866 * C250 +
            C15108 * C231 - C15109 * C219 - C15108 * C232 + C32853 * C249 +
            C15110 * C229 - C15111 * C218 - C15110 * C230 + C32803 * C248) *
               C32593 * C32640) *
              C32551 * C32537 * C110 -
          ((C15110 * C227 - C15111 * C217 - C15110 * C228 + C32803 * C247 +
            C15108 * C229 - C15109 * C218 - C15108 * C230 + C32853 * C248 +
            C15106 * C231 - C15107 * C219 - C15106 * C232 + C32866 * C249 +
            C15104 * C233 - C15105 * C220 - C15104 * C234 + C32873 * C250) *
               C32593 * C32640 +
           (C15110 * C138 - C15111 * C127 - C15110 * C139 + C32803 * C148 +
            C15108 * C136 - C15109 * C126 - C15108 * C137 + C32853 * C147 +
            C15106 * C134 - C15107 * C125 - C15106 * C135 + C32866 * C146 +
            C15104 * C132 - C15105 * C124 - C15104 * C133 + C32873 * C145) *
               C32593 * C15102) *
              C32551 * C32537 * C111 +
          ((C15104 * C134 - C15105 * C125 - C15104 * C135 + C32873 * C146 +
            C15106 * C136 - C15107 * C126 - C15106 * C137 + C32866 * C147 +
            C15108 * C138 - C15109 * C127 - C15108 * C139 + C32853 * C148 +
            C15110 * C140 - C15111 * C128 - C15110 * C141 + C32803 * C149) *
               C32593 * C15102 +
           (C15104 * C231 - C15105 * C219 - C15104 * C232 + C32873 * C249 +
            C15106 * C229 - C15107 * C218 - C15106 * C230 + C32866 * C248 +
            C15108 * C227 - C15109 * C217 - C15108 * C228 + C32853 * C247 +
            C15110 * C449 - C15111 * C448 - C15110 * C450 + C32803 * C451) *
               C32593 * C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
            C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
            C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
            C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
               C32593 * C15102 +
           (C15259 + C15260 + C15261 + C15262) * C32593 * C32640) *
              C319 -
          ((C15110 * C633 - C15111 * C625 - C15110 * C634 + C32803 * C640 +
            C15108 * C631 - C15109 * C624 - C15108 * C632 + C32853 * C639 +
            C15106 * C629 - C15107 * C623 - C15106 * C630 + C32866 * C638 +
            C15104 * C627 - C15105 * C622 - C15104 * C628 + C32873 * C637) *
               C32593 * C32640 +
           (C15110 * C334 - C15111 * C323 - C15110 * C335 + C32803 * C353 +
            C15108 * C336 - C15109 * C324 - C15108 * C337 + C32853 * C354 +
            C15106 * C338 - C15107 * C325 - C15106 * C339 + C32866 * C355 +
            C15104 * C340 - C15105 * C326 - C15104 * C341 + C32873 * C356) *
               C32593 * C15102) *
              C320 +
          ((C15104 * C342 - C15105 * C327 - C15104 * C343 + C32873 * C357 +
            C15106 * C344 - C15107 * C328 - C15106 * C345 + C32866 * C358 +
            C15108 * C346 - C15109 * C329 - C15108 * C347 + C32853 * C359 +
            C15110 * C348 - C15111 * C330 - C15110 * C349 + C32803 * C360) *
               C32593 * C15102 +
           (C15104 * C1089 - C15105 * C1077 - C15104 * C1090 + C32873 * C1104 +
            C15106 * C1091 - C15107 * C1078 - C15106 * C1092 + C32866 * C1105 +
            C15108 * C1093 - C15109 * C1079 - C15108 * C1094 + C32853 * C1106 +
            C15110 * C2221 - C15111 * C2220 - C15110 * C2222 + C32803 * C2223) *
               C32593 * C32640) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
            C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
               C32593 * C32874 +
           (C15914 * C235 - C15915 * C221 - C15914 * C236 + C15908 * C251 +
            C15916 * C233 - C15917 * C220 - C15916 * C234 + C32498 * C250) *
               C32593 * C32870 +
           (C15914 * C237 - C15915 * C222 - C15914 * C238 + C15908 * C252 +
            C15916 * C239 - C15917 * C223 - C15916 * C240 + C32498 * C253) *
               C32593 * C32860 +
           (C15914 * C884 - C15915 * C876 - C15914 * C885 + C15908 * C894 +
            C15916 * C882 - C15917 * C875 - C15916 * C883 + C32498 * C893) *
               C32593 * C32812) *
              C32551 * C32537 * C110 -
          ((C15916 * C880 - C15917 * C874 - C15916 * C881 + C32498 * C892 +
            C15914 * C882 - C15915 * C875 - C15914 * C883 + C15908 * C893) *
               C32593 * C32812 +
           (C15916 * C241 - C15917 * C224 - C15916 * C242 + C32498 * C254 +
            C15914 * C239 - C15915 * C223 - C15914 * C240 + C15908 * C253) *
               C32593 * C32860 +
           (C15916 * C231 - C15917 * C219 - C15916 * C232 + C32498 * C249 +
            C15914 * C233 - C15915 * C220 - C15914 * C234 + C15908 * C250) *
               C32593 * C32870 +
           (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
            C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
               C32593 * C32874) *
              C32551 * C32537 * C111 +
          ((C15914 * C134 - C15915 * C125 - C15914 * C135 + C15908 * C146 +
            C15916 * C136 - C15917 * C126 - C15916 * C137 + C32498 * C147) *
               C32593 * C32874 +
           (C15914 * C231 - C15915 * C219 - C15914 * C232 + C15908 * C249 +
            C15916 * C229 - C15917 * C218 - C15916 * C230 + C32498 * C248) *
               C32593 * C32870 +
           (C15914 * C241 - C15915 * C224 - C15914 * C242 + C15908 * C254 +
            C15916 * C243 - C15917 * C225 - C15916 * C244 + C32498 * C255) *
               C32593 * C32860 +
           (C15914 * C880 - C15915 * C874 - C15914 * C881 + C15908 * C892 +
            C15916 * C1257 - C15917 * C1256 - C15916 * C1258 + C32498 * C1259) *
               C32593 * C32812) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
            C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
               C32593 * C32874 +
           (C16065 + C16066) * C32593 * C32870 + C16075 * C32860 +
           C16076 * C32812) *
              C32551 * C213 -
          ((C16071 + C16072) * C32593 * C32812 +
           (C16070 + C16069) * C32593 * C32860 +
           (C16068 + C16067) * C32593 * C32870 +
           (C16066 + C16065) * C32593 * C32874) *
              C32551 * C214 +
          (C16075 * C32874 + C16076 * C32870 +
           (C16072 + C16071) * C32593 * C32860 +
           (C15914 * C6284 - C15915 * C6282 - C15914 * C6285 + C15908 * C6288 +
            C15916 * C6487 - C15917 * C6486 - C15916 * C6488 + C32498 * C6489) *
               C32593 * C32812) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
            C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
               C32593 * C32874 +
           (C16065 + C16066) * C32593 * C32870 + C16075 * C32860 +
           C16076 * C32812) *
              C319 -
          ((C15916 * C1603 - C15917 * C1599 - C15916 * C1604 + C32498 * C1608 +
            C15914 * C1601 - C15915 * C1598 - C15914 * C1602 + C15908 * C1607) *
               C32593 * C32812 +
           (C15916 * C1085 - C15917 * C1075 - C15916 * C1086 + C32498 * C1102 +
            C15914 * C1087 - C15915 * C1076 - C15914 * C1088 + C15908 * C1103) *
               C32593 * C32860 +
           (C15916 * C629 - C15917 * C623 - C15916 * C630 + C32498 * C638 +
            C15914 * C627 - C15915 * C622 - C15914 * C628 + C15908 * C637) *
               C32593 * C32870 +
           (C15916 * C338 - C15917 * C325 - C15916 * C339 + C32498 * C355 +
            C15914 * C340 - C15915 * C326 - C15914 * C341 + C15908 * C356) *
               C32593 * C32874) *
              C320 +
          ((C15914 * C342 - C15915 * C327 - C15914 * C343 + C15908 * C357 +
            C15916 * C344 - C15917 * C328 - C15916 * C345 + C32498 * C358) *
               C32593 * C32874 +
           (C15914 * C1089 - C15915 * C1077 - C15914 * C1090 + C15908 * C1104 +
            C15916 * C1091 - C15917 * C1078 - C15916 * C1092 + C32498 * C1105) *
               C32593 * C32870 +
           (C15914 * C1095 - C15915 * C1080 - C15914 * C1096 + C15908 * C1107 +
            C15916 * C1097 - C15917 * C1081 - C15916 * C1098 + C32498 * C1108) *
               C32593 * C32860 +
           (C15914 * C6397 - C15915 * C6393 - C15914 * C6398 + C15908 * C6402 +
            C15916 * C7282 - C15917 * C7281 - C15916 * C7283 + C32498 * C7284) *
               C32593 * C32812) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
             C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
             C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
             C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
                C32593 * C15102 +
            (C15259 + C15260 + C15261 + C15262) * C32593 * C32640) *
               C534 -
           ((C15110 * C633 - C15111 * C625 - C15110 * C634 + C32803 * C640 +
             C15108 * C631 - C15109 * C624 - C15108 * C632 + C32853 * C639 +
             C15106 * C629 - C15107 * C623 - C15106 * C630 + C32866 * C638 +
             C15104 * C627 - C15105 * C622 - C15104 * C628 + C32873 * C637) *
                C32593 * C32640 +
            (C15110 * C334 - C15111 * C323 - C15110 * C335 + C32803 * C353 +
             C15108 * C336 - C15109 * C324 - C15108 * C337 + C32853 * C354 +
             C15106 * C338 - C15107 * C325 - C15106 * C339 + C32866 * C355 +
             C15104 * C340 - C15105 * C326 - C15104 * C341 + C32873 * C356) *
                C32593 * C15102) *
               C535) *
              C32537 * C446 +
          (((C15104 * C338 - C15105 * C325 - C15104 * C339 + C32873 * C355 +
             C15106 * C336 - C15107 * C324 - C15106 * C337 + C32866 * C354 +
             C15108 * C334 - C15109 * C323 - C15108 * C335 + C32853 * C353 +
             C15110 * C332 - C15111 * C322 - C15110 * C333 + C32803 * C352) *
                C32593 * C15102 +
            (C15104 * C629 - C15105 * C623 - C15104 * C630 + C32873 * C638 +
             C15106 * C631 - C15107 * C624 - C15106 * C632 + C32866 * C639 +
             C15108 * C633 - C15109 * C625 - C15108 * C634 + C32853 * C640 +
             C15110 * C635 - C15111 * C626 - C15110 * C636 + C32803 * C641) *
                C32593 * C32640) *
               C535 -
           ((C15522 + C15521 + C15520 + C15519) * C32593 * C32640 +
            (C15110 * C138 - C15111 * C127 - C15110 * C139 + C32803 * C148 +
             C15108 * C136 - C15109 * C126 - C15108 * C137 + C32853 * C147 +
             C15106 * C134 - C15107 * C125 - C15106 * C135 + C32866 * C146 +
             C15104 * C132 - C15105 * C124 - C15104 * C133 + C32873 * C145) *
                C32593 * C15102) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C32593 * C32874 +
            (C16065 + C16066) * C32593 * C32870 + C16075 * C32860 +
            C16076 * C32812) *
               C534 -
           ((C15916 * C1603 - C15917 * C1599 - C15916 * C1604 + C32498 * C1608 +
             C15914 * C1601 - C15915 * C1598 - C15914 * C1602 +
             C15908 * C1607) *
                C32593 * C32812 +
            (C15916 * C1085 - C15917 * C1075 - C15916 * C1086 + C32498 * C1102 +
             C15914 * C1087 - C15915 * C1076 - C15914 * C1088 +
             C15908 * C1103) *
                C32593 * C32860 +
            (C15916 * C629 - C15917 * C623 - C15916 * C630 + C32498 * C638 +
             C15914 * C627 - C15915 * C622 - C15914 * C628 + C15908 * C637) *
                C32593 * C32870 +
            (C15916 * C338 - C15917 * C325 - C15916 * C339 + C32498 * C355 +
             C15914 * C340 - C15915 * C326 - C15914 * C341 + C15908 * C356) *
                C32593 * C32874) *
               C535) *
              C32537 * C446 +
          (((C15914 * C338 - C15915 * C325 - C15914 * C339 + C15908 * C355 +
             C15916 * C336 - C15917 * C324 - C15916 * C337 + C32498 * C354) *
                C32593 * C32874 +
            (C15914 * C629 - C15915 * C623 - C15914 * C630 + C15908 * C638 +
             C15916 * C631 - C15917 * C624 - C15916 * C632 + C32498 * C639) *
                C32593 * C32870 +
            (C15914 * C1085 - C15915 * C1075 - C15914 * C1086 + C15908 * C1102 +
             C15916 * C1083 - C15917 * C1074 - C15916 * C1084 +
             C32498 * C1101) *
                C32593 * C32860 +
            (C15914 * C1603 - C15915 * C1599 - C15914 * C1604 + C15908 * C1608 +
             C15916 * C1605 - C15917 * C1600 - C15916 * C1606 +
             C32498 * C1609) *
                C32593 * C32812) *
               C535 -
           ((C16346 + C16345) * C32593 * C32812 +
            (C16344 + C16343) * C32593 * C32860 +
            (C16342 + C16341) * C32593 * C32870 +
            (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
             C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
                C32593 * C32874) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
            C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
            C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
            C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
               C32593 * C15102 +
           (C15104 * C235 - C15105 * C221 - C15104 * C236 + C32873 * C251 +
            C15106 * C233 - C15107 * C220 - C15106 * C234 + C32866 * C250 +
            C15108 * C231 - C15109 * C219 - C15108 * C232 + C32853 * C249 +
            C15110 * C229 - C15111 * C218 - C15110 * C230 + C32803 * C248) *
               C32593 * C32640) *
              C32551 * C32537 * C110 -
          ((C15110 * C227 - C15111 * C217 - C15110 * C228 + C32803 * C247 +
            C15108 * C229 - C15109 * C218 - C15108 * C230 + C32853 * C248 +
            C15106 * C231 - C15107 * C219 - C15106 * C232 + C32866 * C249 +
            C15104 * C233 - C15105 * C220 - C15104 * C234 + C32873 * C250) *
               C32593 * C32640 +
           (C15110 * C138 - C15111 * C127 - C15110 * C139 + C32803 * C148 +
            C15108 * C136 - C15109 * C126 - C15108 * C137 + C32853 * C147 +
            C15106 * C134 - C15107 * C125 - C15106 * C135 + C32866 * C146 +
            C15104 * C132 - C15105 * C124 - C15104 * C133 + C32873 * C145) *
               C32593 * C15102) *
              C32551 * C32537 * C111 +
          ((C15104 * C134 - C15105 * C125 - C15104 * C135 + C32873 * C146 +
            C15106 * C136 - C15107 * C126 - C15106 * C137 + C32866 * C147 +
            C15108 * C138 - C15109 * C127 - C15108 * C139 + C32853 * C148 +
            C15110 * C140 - C15111 * C128 - C15110 * C141 + C32803 * C149) *
               C32593 * C15102 +
           (C15104 * C231 - C15105 * C219 - C15104 * C232 + C32873 * C249 +
            C15106 * C229 - C15107 * C218 - C15106 * C230 + C32866 * C248 +
            C15108 * C227 - C15109 * C217 - C15108 * C228 + C32853 * C247 +
            C15110 * C449 - C15111 * C448 - C15110 * C450 + C32803 * C451) *
               C32593 * C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
            C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
            C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
            C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
               C32593 * C15102 +
           (C15259 + C15260 + C15261 + C15262) * C32593 * C32640) *
              C32551 * C213 -
          ((C15263 + C15264 + C15265 + C15266) * C32593 * C32640 +
           (C15262 + C15261 + C15260 + C15259) * C32593 * C15102) *
              C32551 * C214 +
          ((C15266 + C15265 + C15264 + C15263) * C32593 * C15102 +
           (C15104 * C884 - C15105 * C876 - C15104 * C885 + C32873 * C894 +
            C15106 * C882 - C15107 * C875 - C15106 * C883 + C32866 * C893 +
            C15108 * C880 - C15109 * C874 - C15108 * C881 + C32853 * C892 +
            C15110 * C1257 - C15111 * C1256 - C15110 * C1258 + C32803 * C1259) *
               C32593 * C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
            C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
               C32593 * C32874 +
           (C15914 * C235 - C15915 * C221 - C15914 * C236 + C15908 * C251 +
            C15916 * C233 - C15917 * C220 - C15916 * C234 + C32498 * C250) *
               C32593 * C32870 +
           (C15914 * C237 - C15915 * C222 - C15914 * C238 + C15908 * C252 +
            C15916 * C239 - C15917 * C223 - C15916 * C240 + C32498 * C253) *
               C32593 * C32860 +
           (C15914 * C884 - C15915 * C876 - C15914 * C885 + C15908 * C894 +
            C15916 * C882 - C15917 * C875 - C15916 * C883 + C32498 * C893) *
               C32593 * C32812) *
              C32551 * C32537 * C110 -
          ((C15916 * C880 - C15917 * C874 - C15916 * C881 + C32498 * C892 +
            C15914 * C882 - C15915 * C875 - C15914 * C883 + C15908 * C893) *
               C32593 * C32812 +
           (C15916 * C241 - C15917 * C224 - C15916 * C242 + C32498 * C254 +
            C15914 * C239 - C15915 * C223 - C15914 * C240 + C15908 * C253) *
               C32593 * C32860 +
           (C15916 * C231 - C15917 * C219 - C15916 * C232 + C32498 * C249 +
            C15914 * C233 - C15915 * C220 - C15914 * C234 + C15908 * C250) *
               C32593 * C32870 +
           (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
            C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
               C32593 * C32874) *
              C32551 * C32537 * C111 +
          ((C15914 * C134 - C15915 * C125 - C15914 * C135 + C15908 * C146 +
            C15916 * C136 - C15917 * C126 - C15916 * C137 + C32498 * C147) *
               C32593 * C32874 +
           (C15914 * C231 - C15915 * C219 - C15914 * C232 + C15908 * C249 +
            C15916 * C229 - C15917 * C218 - C15916 * C230 + C32498 * C248) *
               C32593 * C32870 +
           (C15914 * C241 - C15915 * C224 - C15914 * C242 + C15908 * C254 +
            C15916 * C243 - C15917 * C225 - C15916 * C244 + C32498 * C255) *
               C32593 * C32860 +
           (C15914 * C880 - C15915 * C874 - C15914 * C881 + C15908 * C892 +
            C15916 * C1257 - C15917 * C1256 - C15916 * C1258 + C32498 * C1259) *
               C32593 * C32812) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
            C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
               C32593 * C32874 +
           (C16065 + C16066) * C32593 * C32870 + C16075 * C32860 +
           C16076 * C32812) *
              C32551 * C213 -
          ((C16071 + C16072) * C32593 * C32812 +
           (C16070 + C16069) * C32593 * C32860 +
           (C16068 + C16067) * C32593 * C32870 +
           (C16066 + C16065) * C32593 * C32874) *
              C32551 * C214 +
          (C16075 * C32874 + C16076 * C32870 +
           (C16072 + C16071) * C32593 * C32860 +
           (C15914 * C6284 - C15915 * C6282 - C15914 * C6285 + C15908 * C6288 +
            C15916 * C6487 - C15917 * C6486 - C15916 * C6488 + C32498 * C6489) *
               C32593 * C32812) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
              C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                 C21009 +
             (C8968 + C8969) * C32680) *
                C32636 +
            ((C7894 + C7895) * C21009 + C9600 * C32680) * C32643 +
            C29022 * C17928) *
               C32551 * C444 -
           (((C8472 + C8473) * C32680 + (C7899 + C7898) * C21009) * C17928 +
            (C9601 * C32680 + (C7897 + C7896) * C21009) * C32643 +
            (C9602 * C32680 + (C7895 + C7894) * C21009) * C32636) *
               C32551 * C445) *
              C446 +
          ((((C8170 + C8171) * C21009 + (C9194 + C9195) * C32680) * C32636 +
            ((C8172 + C8173) * C21009 + (C9196 + C9197) * C32680) * C32643 +
            ((C8174 + C8175) * C21009 +
             (C31623 * C1603 - C7744 * C1599 - C31623 * C1604 + C32785 * C1608 +
              C31604 * C1605 - C7746 * C1600 - C31604 * C1606 +
              C32498 * C1609) *
                 C32680) *
                C17928) *
               C32551 * C445 -
           (((C9197 + C9196) * C32680 + (C8173 + C8172) * C21009) * C17928 +
            ((C9195 + C9194) * C32680 + (C8171 + C8170) * C21009) * C32643 +
            ((C9405 + C9404) * C32680 +
             (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
              C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
                 C21009) *
                C32636) *
               C32551 * C444) *
              C447)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
              C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                 C21009 +
             (C8968 + C8969) * C32680) *
                C32636 +
            ((C7894 + C7895) * C21009 + C9600 * C32680) * C32643 +
            C29022 * C17928) *
               C534 -
           (((C8970 + C8971) * C32680 + C9601 * C21009) * C17928 +
            (C13576 * C32680 + C9602 * C21009) * C32643 +
            ((C8974 + C8975) * C32680 + (C8969 + C8968) * C21009) * C32636) *
               C535) *
              C444 +
          (((C9600 * C21009 + C12937 * C32680) * C32636 +
            (C8771 * C21009 + (C8971 + C8970) * C32680) * C32643 +
            ((C8473 + C8472) * C21009 +
             (C31623 * C6397 - C7744 * C6393 - C31623 * C6398 + C32785 * C6402 +
              C31604 * C7282 - C7746 * C7281 - C31604 * C7283 +
              C32498 * C7284) *
                 C32680) *
                C17928) *
               C535 -
           (((C8472 + C8473) * C32680 + (C7899 + C7898) * C21009) * C17928 +
            (C9601 * C32680 + (C7897 + C7896) * C21009) * C32643 +
            (C9602 * C32680 + (C7895 + C7894) * C21009) * C32636) *
               C534) *
              C445) *
         C32525) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C21009 +
            (C8968 + C8969) * C32680) *
               C32636 +
           ((C7894 + C7895) * C21009 + C9600 * C32680) * C32643 +
           C29022 * C17928) *
              C32551 * C213 -
          (((C8472 + C8473) * C32680 + (C7899 + C7898) * C21009) * C17928 +
           (C9601 * C32680 + (C7897 + C7896) * C21009) * C32643 +
           (C9602 * C32680 + (C7895 + C7894) * C21009) * C32636) *
              C32551 * C214 +
          (C29022 * C32636 +
           (C7903 * C21009 + (C8473 + C8472) * C32680) * C32643 +
           ((C7901 + C7900) * C21009 +
            (C31623 * C6395 - C7744 * C6392 - C31623 * C6396 + C32785 * C6401 +
             C31604 * C6605 - C7746 * C6604 - C31604 * C6606 + C32498 * C6607) *
                C32680) *
               C17928) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C21009 +
            (C8968 + C8969) * C32680) *
               C32636 +
           ((C7894 + C7895) * C21009 + C9600 * C32680) * C32643 +
           (C7902 * C21009 + C8771 * C32680) * C17928) *
              C32551 * C32537 * C110 -
          (((C9197 + C9196) * C32680 + (C8173 + C8172) * C21009) * C17928 +
           ((C9195 + C9194) * C32680 + (C8171 + C8170) * C21009) * C32643 +
           ((C9405 + C9404) * C32680 +
            (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
             C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
                C21009) *
               C32636) *
              C32551 * C32537 * C111 +
          (((C31623 * C134 - C7744 * C125 - C31623 * C135 + C32785 * C146 +
             C31604 * C136 - C7746 * C126 - C31604 * C137 + C32498 * C147) *
                C21009 +
            (C31623 * C336 - C7744 * C324 - C31623 * C337 + C32785 * C354 +
             C31604 * C334 - C7746 * C323 - C31604 * C335 + C32498 * C353) *
                C32680) *
               C32636 +
           ((C31623 * C231 - C7744 * C219 - C31623 * C232 + C32785 * C249 +
             C31604 * C229 - C7746 * C218 - C31604 * C230 + C32498 * C248) *
                C21009 +
            (C31623 * C631 - C7744 * C624 - C31623 * C632 + C32785 * C639 +
             C31604 * C633 - C7746 * C625 - C31604 * C634 + C32498 * C640) *
                C32680) *
               C32643 +
           ((C31623 * C241 - C7744 * C224 - C31623 * C242 + C32785 * C254 +
             C31604 * C243 - C7746 * C225 - C31604 * C244 + C32498 * C255) *
                C21009 +
            (C31623 * C1083 - C7744 * C1074 - C31623 * C1084 + C32785 * C1101 +
             C31604 * C1449 - C7746 * C1448 - C31604 * C1450 + C32498 * C1451) *
                C32680) *
               C17928) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C21009 +
            (C8968 + C8969) * C32680) *
               C32636 +
           ((C7894 + C7895) * C21009 + C9600 * C32680) * C32643 +
           C29022 * C17928) *
              C319 -
          (((C8970 + C8971) * C32680 + C9601 * C21009) * C17928 +
           (C13576 * C32680 + C9602 * C21009) * C32643 +
           ((C8974 + C8975) * C32680 + (C8969 + C8968) * C21009) * C32636) *
              C320 +
          ((C12936 * C21009 + C13875 * C32680) * C32636 +
           (C12937 * C21009 + (C12963 + C12962) * C32680) * C32643 +
           ((C8971 + C8970) * C21009 +
            (C31623 * C7091 - C7744 * C7088 - C31623 * C7092 + C32785 * C7097 +
             C31604 * C7466 - C7746 * C7465 - C31604 * C7467 + C32498 * C7468) *
                C32680) *
               C17928) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
              C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                 C21009 +
             (C8968 + C8969) * C32680) *
                C32636 +
            ((C7894 + C7895) * C21009 + C9600 * C32680) * C32643 +
            C29022 * C17928) *
               C534 -
           (((C8970 + C8971) * C32680 + C9601 * C21009) * C17928 +
            (C13576 * C32680 + C9602 * C21009) * C32643 +
            ((C8974 + C8975) * C32680 + (C8969 + C8968) * C21009) * C32636) *
               C535) *
              C32537 * C446 +
          ((((C9404 + C9405) * C21009 + (C13380 + C13381) * C32680) * C32636 +
            ((C9194 + C9195) * C21009 + (C13172 + C13173) * C32680) * C32643 +
            ((C9196 + C9197) * C21009 +
             (C31623 * C1097 - C7744 * C1081 - C31623 * C1098 + C32785 * C1108 +
              C31604 * C1099 - C7746 * C1082 - C31604 * C1100 +
              C32498 * C1109) *
                 C32680) *
                C17928) *
               C535 -
           (((C9197 + C9196) * C32680 + (C8173 + C8172) * C21009) * C17928 +
            ((C9195 + C9194) * C32680 + (C8171 + C8170) * C21009) * C32643 +
            ((C9405 + C9404) * C32680 +
             (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
              C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
                 C21009) *
                C32636) *
               C534) *
              C32537 * C447)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C21009 +
            (C8968 + C8969) * C32680) *
               C32636 +
           ((C7894 + C7895) * C21009 + C9600 * C32680) * C32643 +
           (C7902 * C21009 + C8771 * C32680) * C17928) *
              C32551 * C32537 * C110 -
          (((C9197 + C9196) * C32680 + (C8173 + C8172) * C21009) * C17928 +
           ((C9195 + C9194) * C32680 + (C8171 + C8170) * C21009) * C32643 +
           ((C9405 + C9404) * C32680 +
            (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
             C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
                C21009) *
               C32636) *
              C32551 * C32537 * C111 +
          (((C31623 * C134 - C7744 * C125 - C31623 * C135 + C32785 * C146 +
             C31604 * C136 - C7746 * C126 - C31604 * C137 + C32498 * C147) *
                C21009 +
            (C31623 * C336 - C7744 * C324 - C31623 * C337 + C32785 * C354 +
             C31604 * C334 - C7746 * C323 - C31604 * C335 + C32498 * C353) *
                C32680) *
               C32636 +
           ((C31623 * C231 - C7744 * C219 - C31623 * C232 + C32785 * C249 +
             C31604 * C229 - C7746 * C218 - C31604 * C230 + C32498 * C248) *
                C21009 +
            (C31623 * C631 - C7744 * C624 - C31623 * C632 + C32785 * C639 +
             C31604 * C633 - C7746 * C625 - C31604 * C634 + C32498 * C640) *
                C32680) *
               C32643 +
           ((C31623 * C241 - C7744 * C224 - C31623 * C242 + C32785 * C254 +
             C31604 * C243 - C7746 * C225 - C31604 * C244 + C32498 * C255) *
                C21009 +
            (C31623 * C1083 - C7744 * C1074 - C31623 * C1084 + C32785 * C1101 +
             C31604 * C1449 - C7746 * C1448 - C31604 * C1450 + C32498 * C1451) *
                C32680) *
               C17928) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C21009 +
            (C8968 + C8969) * C32680) *
               C32636 +
           ((C7894 + C7895) * C21009 + C9600 * C32680) * C32643 +
           C29022 * C17928) *
              C32551 * C213 -
          (((C8472 + C8473) * C32680 + (C7899 + C7898) * C21009) * C17928 +
           (C9601 * C32680 + (C7897 + C7896) * C21009) * C32643 +
           (C9602 * C32680 + (C7895 + C7894) * C21009) * C32636) *
              C32551 * C214 +
          (C29022 * C32636 +
           (C7903 * C21009 + (C8473 + C8472) * C32680) * C32643 +
           ((C7901 + C7900) * C21009 +
            (C31623 * C6395 - C7744 * C6392 - C31623 * C6396 + C32785 * C6401 +
             C31604 * C6605 - C7746 * C6604 - C31604 * C6606 + C32498 * C6607) *
                C32680) *
               C17928) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C32676 +
             C7131 * C32683 + C7132 * C24553) *
                C32636 +
            (C30991 + C30992 + C30993) * C32643 + C31001 * C17928) *
               C32551 * C444 -
           ((C30997 + C30998 + C30999) * C17928 +
            (C30996 + C30995 + C30994) * C32643 +
            (C30993 + C30992 + C30991) * C32636) *
               C32551 * C445) *
              C446 +
          (((C31258 + C31259 + C31260) * C32636 +
            (C31261 + C31262 + C31263) * C32643 +
            (C6517 * C32676 + C10048 * C32683 +
             (C6218 * C7282 - C6219 * C7281 - C6218 * C7283 + C32488 * C7284) *
                 C24553) *
                C17928) *
               C32551 * C445 -
           ((C31263 + C31262 + C31261) * C17928 +
            (C31260 + C31259 + C31258) * C32643 +
            (C7483 * C24553 + C7482 * C32683 +
             (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                 C32676) *
                C32636) *
               C32551 * C444) *
              C447)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C32676 +
             C7131 * C32683 + C7132 * C24553) *
                C32636 +
            (C30991 + C30992 + C30993) * C32643 + C31001 * C17928) *
               C534 -
           ((C31556 + C31557 + C31558) * C17928 +
            (C31559 + C31560 + C31561) * C32643 +
            (C7135 * C24553 + C7132 * C32683 + C7131 * C32676) * C32636) *
               C535) *
              C444 +
          (((C31561 + C31560 + C31559) * C32636 +
            (C31558 + C31557 + C31556) * C32643 +
            (C6720 * C32676 + C6974 * C32683 +
             (C6218 * C7630 - C6219 * C7629 - C6218 * C7631 + C32488 * C7632) *
                 C24553) *
                C17928) *
               C535 -
           ((C30997 + C30998 + C30999) * C17928 +
            (C30996 + C30995 + C30994) * C32643 +
            (C30993 + C30992 + C30991) * C32636) *
               C534) *
              C445) *
         C32525) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32676 +
            C7131 * C32683 + C7132 * C24553) *
               C32636 +
           (C30991 + C30992 + C30993) * C32643 + C31001 * C17928) *
              C32551 * C213 -
          ((C30997 + C30998 + C30999) * C17928 +
           (C30996 + C30995 + C30994) * C32643 +
           (C30993 + C30992 + C30991) * C32636) *
              C32551 * C214 +
          (C31001 * C32636 + (C30999 + C30998 + C30997) * C32643 +
           (C6324 * C32676 + C6719 * C32683 +
            (C6218 * C6399 - C6219 * C6394 - C6218 * C6400 + C32488 * C6403) *
                C24553) *
               C17928) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32676 +
            C7131 * C32683 + C7132 * C24553) *
               C32636 +
           (C6321 * C32676 + C6722 * C32683 + C6972 * C24553) * C32643 +
           (C6322 * C32676 + C6721 * C32683 + C6973 * C24553) * C17928) *
              C32551 * C32537 * C110 -
          ((C7315 * C24553 + C7314 * C32683 + C6516 * C32676) * C17928 +
           (C7313 * C24553 + C7312 * C32683 + C6515 * C32676) * C32643 +
           (C7483 * C24553 + C7482 * C32683 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C32676) *
               C32636) *
              C32551 * C32537 * C111 +
          (((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
                C32676 +
            (C6218 * C336 - C6219 * C324 - C6218 * C337 + C32488 * C354) *
                C32683 +
            (C6218 * C346 - C6219 * C329 - C6218 * C347 + C32488 * C359) *
                C24553) *
               C32636 +
           ((C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
                C32676 +
            (C6218 * C631 - C6219 * C624 - C6218 * C632 + C32488 * C639) *
                C32683 +
            (C6218 * C1093 - C6219 * C1079 - C6218 * C1094 + C32488 * C1106) *
                C24553) *
               C32643 +
           ((C6218 * C241 - C6219 * C224 - C6218 * C242 + C32488 * C254) *
                C32676 +
            (C6218 * C1083 - C6219 * C1074 - C6218 * C1084 + C32488 * C1101) *
                C32683 +
            (C6218 * C1099 - C6219 * C1082 - C6218 * C1100 + C32488 * C1109) *
                C24553) *
               C17928) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32676 +
            C7131 * C32683 + C7132 * C24553) *
               C32636 +
           (C30991 + C30992 + C30993) * C32643 + C31001 * C17928) *
              C319 -
          ((C7133 * C24553 + C6973 * C32683 + C6721 * C32676) * C17928 +
           (C7134 * C24553 + C6972 * C32683 + C6722 * C32676) * C32643 +
           (C7135 * C24553 + C7132 * C32683 + C7131 * C32676) * C32636) *
              C320 +
          ((C7132 * C32676 + C7135 * C32683 + C12217 * C24553) * C32636 +
           (C6972 * C32676 + C7134 * C32683 + C12497 * C24553) * C32643 +
           (C6973 * C32676 + C7133 * C32683 +
            (C6218 * C7095 - C6219 * C7090 - C6218 * C7096 + C32488 * C7099) *
                C24553) *
               C17928) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C32676 +
             C7131 * C32683 + C7132 * C24553) *
                C32636 +
            (C30991 + C30992 + C30993) * C32643 + C31001 * C17928) *
               C534 -
           ((C7133 * C24553 + C6973 * C32683 + C6721 * C32676) * C17928 +
            (C7134 * C24553 + C6972 * C32683 + C6722 * C32676) * C32643 +
            (C7135 * C24553 + C7132 * C32683 + C7131 * C32676) * C32636) *
               C535) *
              C32537 * C446 +
          (((C7482 * C32676 + C7483 * C32683 + C12403 * C24553) * C32636 +
            (C7312 * C32676 + C7313 * C32683 + C14735 * C24553) * C32643 +
            (C7314 * C32676 + C7315 * C32683 +
             (C6218 * C7466 - C6219 * C7465 - C6218 * C7467 + C32488 * C7468) *
                 C24553) *
                C17928) *
               C535 -
           ((C31263 + C31262 + C31261) * C17928 +
            (C31260 + C31259 + C31258) * C32643 +
            (C7483 * C24553 + C7482 * C32683 +
             (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                 C32676) *
                C32636) *
               C534) *
              C32537 * C447)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32676 +
            C7131 * C32683 + C7132 * C24553) *
               C32636 +
           (C6321 * C32676 + C6722 * C32683 + C6972 * C24553) * C32643 +
           (C6322 * C32676 + C6721 * C32683 + C6973 * C24553) * C17928) *
              C32551 * C32537 * C110 -
          ((C7315 * C24553 + C7314 * C32683 + C6516 * C32676) * C17928 +
           (C7313 * C24553 + C7312 * C32683 + C6515 * C32676) * C32643 +
           (C7483 * C24553 + C7482 * C32683 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C32676) *
               C32636) *
              C32551 * C32537 * C111 +
          (((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
                C32676 +
            (C6218 * C336 - C6219 * C324 - C6218 * C337 + C32488 * C354) *
                C32683 +
            (C6218 * C346 - C6219 * C329 - C6218 * C347 + C32488 * C359) *
                C24553) *
               C32636 +
           ((C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
                C32676 +
            (C6218 * C631 - C6219 * C624 - C6218 * C632 + C32488 * C639) *
                C32683 +
            (C6218 * C1093 - C6219 * C1079 - C6218 * C1094 + C32488 * C1106) *
                C24553) *
               C32643 +
           ((C6218 * C241 - C6219 * C224 - C6218 * C242 + C32488 * C254) *
                C32676 +
            (C6218 * C1083 - C6219 * C1074 - C6218 * C1084 + C32488 * C1101) *
                C32683 +
            (C6218 * C1099 - C6219 * C1082 - C6218 * C1100 + C32488 * C1109) *
                C24553) *
               C17928) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32676 +
            C7131 * C32683 + C7132 * C24553) *
               C32636 +
           (C30991 + C30992 + C30993) * C32643 + C31001 * C17928) *
              C32551 * C213 -
          ((C30997 + C30998 + C30999) * C17928 +
           (C30996 + C30995 + C30994) * C32643 +
           (C30993 + C30992 + C30991) * C32636) *
              C32551 * C214 +
          (C31001 * C32636 + (C30999 + C30998 + C30997) * C32643 +
           (C6324 * C32676 + C6719 * C32683 +
            (C6218 * C6399 - C6219 * C6394 - C6218 * C6400 + C32488 * C6403) *
                C24553) *
               C17928) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C21009 +
             C7131 * C32680) *
                C32874 +
            (C27518 + C27519) * C32870 + C27526 * C32860 + C27527 * C32812) *
               C32551 * C444 -
           ((C27524 + C27525) * C32812 + (C27523 + C27522) * C32860 +
            (C27521 + C27520) * C32870 + (C27519 + C27518) * C32874) *
               C32551 * C445) *
              C446 +
          (((C27756 + C27757) * C32874 + (C27758 + C27759) * C32870 +
            (C27760 + C27761) * C32860 +
            (C6518 * C21009 +
             (C6218 * C6605 - C6219 * C6604 - C6218 * C6606 + C32488 * C6607) *
                 C32680) *
                C32812) *
               C32551 * C445 -
           ((C27761 + C27760) * C32812 + (C27759 + C27758) * C32860 +
            (C27757 + C27756) * C32870 +
            (C7482 * C32680 +
             (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                 C21009) *
                C32874) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
              C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
              C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                 C21009 +
             (C10703 + C10704 + C10705) * C32680) *
                C15102 +
            ((C5507 + C5508 + C5509) * C21009 +
             (C6150 + C6149 + C6148) * C32680) *
                C32640) *
               C32551 * C444 -
           (((C6145 + C6146 + C6147) * C32680 +
             (C5512 + C5511 + C5510) * C21009) *
                C32640 +
            ((C6148 + C6149 + C6150) * C32680 +
             (C5509 + C5508 + C5507) * C21009) *
                C15102) *
               C32551 * C445) *
              C446 +
          ((((C5811 + C5812 + C5813) * C21009 +
             (C26927 + C26928 + C26929) * C32680) *
                C15102 +
            ((C5814 + C5815 + C5816) * C21009 +
             (C5336 * C1085 - C5337 * C1075 - C5336 * C1086 + C32864 * C1102 +
              C5338 * C1083 - C5339 * C1074 - C5338 * C1084 + C32851 * C1101 +
              C5340 * C1449 - C5341 * C1448 - C5340 * C1450 + C32826 * C1451) *
                 C32680) *
                C32640) *
               C32551 * C445 -
           (((C26929 + C26928 + C26927) * C32680 +
             (C5813 + C5812 + C5811) * C21009) *
                C32640 +
            ((C11044 + C11043 + C11042) * C32680 +
             (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
              C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
              C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
                 C21009) *
                C15102) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C32875 +
             C7131 * C32872 + C7132 * C32863 + C7135 * C32819) *
                C15102 +
            (C28224 + C28225 + C28226 + C28227) * C32640) *
               C32551 * C444 -
           ((C28228 + C28229 + C28230 + C28231) * C32640 +
            (C28227 + C28226 + C28225 + C28224) * C15102) *
               C32551 * C445) *
              C446 +
          (((C28460 + C28461 + C28462 + C28463) * C15102 +
            (C6516 * C32875 + C7314 * C32872 + C7315 * C32863 +
             (C6218 * C7466 - C6219 * C7465 - C6218 * C7467 + C32488 * C7468) *
                 C32819) *
                C32640) *
               C32551 * C445 -
           ((C28463 + C28462 + C28461 + C28460) * C32640 +
            (C12403 * C32819 + C7483 * C32863 + C7482 * C32872 +
             (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                 C32875) *
                C15102) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C21009 +
             C7131 * C32680) *
                C32874 +
            (C27518 + C27519) * C32870 + C27526 * C32860 + C27527 * C32812) *
               C534 -
           ((C28022 + C28023) * C32812 + (C28024 + C28025) * C32860 +
            (C28026 + C28027) * C32870 +
            (C7132 * C32680 + C7131 * C21009) * C32874) *
               C535) *
              C444 +
          (((C28027 + C28026) * C32874 + (C28025 + C28024) * C32870 +
            (C28023 + C28022) * C32860 +
            (C6719 * C21009 +
             (C6218 * C6399 - C6219 * C6394 - C6218 * C6400 + C32488 * C6403) *
                 C32680) *
                C32812) *
               C535 -
           ((C27524 + C27525) * C32812 + (C27523 + C27522) * C32860 +
            (C27521 + C27520) * C32870 + (C27519 + C27518) * C32874) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
              C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
              C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                 C21009 +
             (C10703 + C10704 + C10705) * C32680) *
                C15102 +
            ((C5507 + C5508 + C5509) * C21009 + C27320 * C32680) * C32640) *
               C534 -
           (((C11214 + C11213 + C11212) * C32680 + C27321 * C21009) * C32640 +
            ((C10708 + C10707 + C10706) * C32680 +
             (C10705 + C10704 + C10703) * C21009) *
                C15102) *
               C535) *
              C444 +
          (((C27320 * C21009 + (C11212 + C11213 + C11214) * C32680) * C15102 +
            ((C6147 + C6146 + C6145) * C21009 +
             (C5336 * C1095 - C5337 * C1080 - C5336 * C1096 + C32864 * C1107 +
              C5338 * C1097 - C5339 * C1081 - C5338 * C1098 + C32851 * C1108 +
              C5340 * C1099 - C5341 * C1082 - C5340 * C1100 + C32826 * C1109) *
                 C32680) *
                C32640) *
               C535 -
           (((C6145 + C6146 + C6147) * C32680 +
             (C5512 + C5511 + C5510) * C21009) *
                C32640 +
            (C27321 * C32680 + (C5509 + C5508 + C5507) * C21009) * C15102) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C32875 +
             C7131 * C32872 + C7132 * C32863 + C7135 * C32819) *
                C15102 +
            (C28224 + C28225 + C28226 + C28227) * C32640) *
               C534 -
           ((C28724 + C28725 + C28726 + C28727) * C32640 +
            (C12217 * C32819 + C7135 * C32863 + C7132 * C32872 +
             C7131 * C32875) *
                C15102) *
               C535) *
              C444 +
          (((C28727 + C28726 + C28725 + C28724) * C15102 +
            (C6721 * C32875 + C6973 * C32872 + C7133 * C32863 +
             (C6218 * C7095 - C6219 * C7090 - C6218 * C7096 + C32488 * C7099) *
                 C32819) *
                C32640) *
               C535 -
           ((C28228 + C28229 + C28230 + C28231) * C32640 +
            (C28227 + C28226 + C28225 + C28224) * C15102) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
                 C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
                 C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                    C21009 +
                (C10703 + C10704 + C10705) * C32680) *
                   C15102 +
               ((C5507 + C5508 + C5509) * C21009 +
                (C6150 + C6149 + C6148) * C32680) *
                   C32640) *
                  C32551 * C32537 * C110 -
              (((C5340 * C633 - C5341 * C625 - C5340 * C634 + C32826 * C640 +
                 C5338 * C631 - C5339 * C624 - C5338 * C632 + C32851 * C639 +
                 C5336 * C629 - C5337 * C623 - C5336 * C630 + C32864 * C638) *
                    C32680 +
                (C5813 + C5812 + C5811) * C21009) *
                   C32640 +
               ((C11044 + C11043 + C11042) * C32680 +
                (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
                 C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
                 C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
                    C21009) *
                   C15102) *
                  C32551 * C32537 * C111 +
              (((C5336 * C134 - C5337 * C125 - C5336 * C135 + C32864 * C146 +
                 C5338 * C136 - C5339 * C126 - C5338 * C137 + C32851 * C147 +
                 C5340 * C138 - C5341 * C127 - C5340 * C139 + C32826 * C148) *
                    C21009 +
                (C5336 * C336 - C5337 * C324 - C5336 * C337 + C32864 * C354 +
                 C5338 * C334 - C5339 * C323 - C5338 * C335 + C32851 * C353 +
                 C5340 * C332 - C5341 * C322 - C5340 * C333 + C32826 * C352) *
                    C32680) *
                   C15102 +
               ((C5336 * C231 - C5337 * C219 - C5336 * C232 + C32864 * C249 +
                 C5338 * C229 - C5339 * C218 - C5338 * C230 + C32851 * C248 +
                 C5340 * C227 - C5341 * C217 - C5340 * C228 + C32826 * C247) *
                    C21009 +
                (C5336 * C631 - C5337 * C624 - C5336 * C632 + C32864 * C639 +
                 C5338 * C633 - C5339 * C625 - C5338 * C634 + C32851 * C640 +
                 C5340 * C635 - C5341 * C626 - C5340 * C636 + C32826 * C641) *
                    C32680) *
                   C32640) *
                  C32551 * C32537 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
                 C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
                 C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                    C21009 +
                (C10703 + C10704 + C10705) * C32680) *
                   C15102 +
               ((C5507 + C5508 + C5509) * C21009 +
                (C6150 + C6149 + C6148) * C32680) *
                   C32640) *
                  C32551 * C213 -
              (((C6145 + C6146 + C6147) * C32680 +
                (C5512 + C5511 + C5510) * C21009) *
                   C32640 +
               ((C6148 + C6149 + C6150) * C32680 +
                (C5509 + C5508 + C5507) * C21009) *
                   C15102) *
                  C32551 * C214 +
              ((C5517 * C21009 + (C6147 + C6146 + C6145) * C32680) * C15102 +
               ((C5515 + C5514 + C5513) * C21009 +
                (C5336 * C1601 - C5337 * C1598 - C5336 * C1602 +
                 C32864 * C1607 + C5338 * C1603 - C5339 * C1599 -
                 C5338 * C1604 + C32851 * C1608 + C5340 * C1605 -
                 C5341 * C1600 - C5340 * C1606 + C32826 * C1609) *
                    C32680) *
                   C32640) *
                  C32551 * C215) *
             C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
             C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
             C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                C21009 +
            (C10703 + C10704 + C10705) * C32680) *
               C15102 +
           ((C5507 + C5508 + C5509) * C21009 +
            (C6150 + C6149 + C6148) * C32680) *
               C32640) *
              C319 -
          (((C11214 + C11213 + C11212) * C32680 +
            (C6148 + C6149 + C6150) * C21009) *
               C32640 +
           ((C10708 + C10707 + C10706) * C32680 +
            (C10705 + C10704 + C10703) * C21009) *
               C15102) *
              C320 +
          ((C10713 * C21009 + (C10711 + C10710 + C10709) * C32680) * C15102 +
           ((C11212 + C11213 + C11214) * C21009 +
            (C5336 * C2565 - C5337 * C2562 - C5336 * C2566 + C32864 * C2571 +
             C5338 * C2567 - C5339 * C2563 - C5338 * C2568 + C32851 * C2572 +
             C5340 * C2569 - C5341 * C2564 - C5340 * C2570 + C32826 * C2573) *
                C32680) *
               C32640) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C21009 +
            C7131 * C32680) *
               C32874 +
           (C6321 * C21009 + C6722 * C32680) * C32870 +
           (C6322 * C21009 + C6721 * C32680) * C32860 +
           (C6323 * C21009 + C6720 * C32680) * C32812) *
              C32551 * C32537 * C110 -
          ((C10048 * C32680 + C6517 * C21009) * C32812 +
           (C7314 * C32680 + C6516 * C21009) * C32860 +
           (C7312 * C32680 + C6515 * C21009) * C32870 +
           (C7482 * C32680 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C21009) *
               C32874) *
              C32551 * C32537 * C111 +
          (((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
                C21009 +
            (C6218 * C336 - C6219 * C324 - C6218 * C337 + C32488 * C354) *
                C32680) *
               C32874 +
           ((C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
                C21009 +
            (C6218 * C631 - C6219 * C624 - C6218 * C632 + C32488 * C639) *
                C32680) *
               C32870 +
           ((C6218 * C241 - C6219 * C224 - C6218 * C242 + C32488 * C254) *
                C21009 +
            (C6218 * C1083 - C6219 * C1074 - C6218 * C1084 + C32488 * C1101) *
                C32680) *
               C32860 +
           ((C6218 * C880 - C6219 * C874 - C6218 * C881 + C32488 * C892) *
                C21009 +
            (C6218 * C1605 - C6219 * C1600 - C6218 * C1606 + C32488 * C1609) *
                C32680) *
               C32812) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C21009 +
            C7131 * C32680) *
               C32874 +
           (C27518 + C27519) * C32870 + C27526 * C32860 + C27527 * C32812) *
              C32551 * C213 -
          ((C27524 + C27525) * C32812 + (C27523 + C27522) * C32860 +
           (C27521 + C27520) * C32870 + (C27519 + C27518) * C32874) *
              C32551 * C214 +
          (C27526 * C32874 + C27527 * C32870 + (C27525 + C27524) * C32860 +
           (C6325 * C21009 +
            (C6218 * C6691 - C6219 * C6690 - C6218 * C6692 + C32488 * C6693) *
                C32680) *
               C32812) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C21009 +
            C7131 * C32680) *
               C32874 +
           (C27518 + C27519) * C32870 + C27526 * C32860 + C27527 * C32812) *
              C319 -
          ((C6974 * C32680 + C6720 * C21009) * C32812 +
           (C6973 * C32680 + C6721 * C21009) * C32860 +
           (C6972 * C32680 + C6722 * C21009) * C32870 +
           (C7132 * C32680 + C7131 * C21009) * C32874) *
              C320 +
          ((C7132 * C21009 + C7135 * C32680) * C32874 +
           (C6972 * C21009 + C7134 * C32680) * C32870 +
           (C6973 * C21009 + C7133 * C32680) * C32860 +
           (C6974 * C21009 +
            (C6218 * C7630 - C6219 * C7629 - C6218 * C7631 + C32488 * C7632) *
                C32680) *
               C32812) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32875 +
            C7131 * C32872 + C7132 * C32863 + C7135 * C32819) *
               C15102 +
           (C6321 * C32875 + C6722 * C32872 + C6972 * C32863 + C7134 * C32819) *
               C32640) *
              C32551 * C32537 * C110 -
          ((C14735 * C32819 + C7313 * C32863 + C7312 * C32872 +
            C6515 * C32875) *
               C32640 +
           (C12403 * C32819 + C7483 * C32863 + C7482 * C32872 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C32875) *
               C15102) *
              C32551 * C32537 * C111 +
          (((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
                C32875 +
            (C6218 * C336 - C6219 * C324 - C6218 * C337 + C32488 * C354) *
                C32872 +
            (C6218 * C346 - C6219 * C329 - C6218 * C347 + C32488 * C359) *
                C32863 +
            (C6218 * C1991 - C6219 * C1985 - C6218 * C1992 + C32488 * C2003) *
                C32819) *
               C15102 +
           ((C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
                C32875 +
            (C6218 * C631 - C6219 * C624 - C6218 * C632 + C32488 * C639) *
                C32872 +
            (C6218 * C1093 - C6219 * C1079 - C6218 * C1094 + C32488 * C1106) *
                C32863 +
            (C6218 * C2569 - C6219 * C2564 - C6218 * C2570 + C32488 * C2573) *
                C32819) *
               C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32875 +
            C7131 * C32872 + C7132 * C32863 + C7135 * C32819) *
               C15102 +
           (C28224 + C28225 + C28226 + C28227) * C32640) *
              C32551 * C213 -
          ((C28228 + C28229 + C28230 + C28231) * C32640 +
           (C28227 + C28226 + C28225 + C28224) * C15102) *
              C32551 * C214 +
          ((C28231 + C28230 + C28229 + C28228) * C15102 +
           (C6323 * C32875 + C6720 * C32872 + C6974 * C32863 +
            (C6218 * C7630 - C6219 * C7629 - C6218 * C7631 + C32488 * C7632) *
                C32819) *
               C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32875 +
            C7131 * C32872 + C7132 * C32863 + C7135 * C32819) *
               C15102 +
           (C28224 + C28225 + C28226 + C28227) * C32640) *
              C319 -
          ((C12497 * C32819 + C7134 * C32863 + C6972 * C32872 +
            C6722 * C32875) *
               C32640 +
           (C12217 * C32819 + C7135 * C32863 + C7132 * C32872 +
            C7131 * C32875) *
               C15102) *
              C320 +
          ((C7132 * C32875 + C7135 * C32872 + C12217 * C32863 +
            C12218 * C32819) *
               C15102 +
           (C6972 * C32875 + C7134 * C32872 + C12497 * C32863 +
            (C6218 * C12487 - C6219 * C12486 - C6218 * C12488 +
             C32488 * C12489) *
                C32819) *
               C32640) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C21009 +
             C7131 * C32680) *
                C32874 +
            (C27518 + C27519) * C32870 + C27526 * C32860 + C27527 * C32812) *
               C534 -
           ((C6974 * C32680 + C6720 * C21009) * C32812 +
            (C6973 * C32680 + C6721 * C21009) * C32860 +
            (C6972 * C32680 + C6722 * C21009) * C32870 +
            (C7132 * C32680 + C7131 * C21009) * C32874) *
               C535) *
              C32537 * C446 +
          (((C7482 * C21009 + C7483 * C32680) * C32874 +
            (C7312 * C21009 + C7313 * C32680) * C32870 +
            (C7314 * C21009 + C7315 * C32680) * C32860 +
            (C10048 * C21009 +
             (C6218 * C7282 - C6219 * C7281 - C6218 * C7283 + C32488 * C7284) *
                 C32680) *
                C32812) *
               C535 -
           ((C27761 + C27760) * C32812 + (C27759 + C27758) * C32860 +
            (C27757 + C27756) * C32870 +
            (C7482 * C32680 +
             (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                 C21009) *
                C32874) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
              C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
              C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                 C21009 +
             (C10703 + C10704 + C10705) * C32680) *
                C15102 +
            ((C5507 + C5508 + C5509) * C21009 +
             (C6150 + C6149 + C6148) * C32680) *
                C32640) *
               C534 -
           (((C11214 + C11213 + C11212) * C32680 +
             (C6148 + C6149 + C6150) * C21009) *
                C32640 +
            ((C10708 + C10707 + C10706) * C32680 +
             (C10705 + C10704 + C10703) * C21009) *
                C15102) *
               C535) *
              C32537 * C446 +
          ((((C11042 + C11043 + C11044) * C21009 +
             (C11045 + C11046 + C11047) * C32680) *
                C15102 +
            ((C26927 + C26928 + C26929) * C21009 +
             (C5336 * C1091 - C5337 * C1078 - C5336 * C1092 + C32864 * C1105 +
              C5338 * C1093 - C5339 * C1079 - C5338 * C1094 + C32851 * C1106 +
              C5340 * C2221 - C5341 * C2220 - C5340 * C2222 + C32826 * C2223) *
                 C32680) *
                C32640) *
               C535 -
           (((C26929 + C26928 + C26927) * C32680 +
             (C5813 + C5812 + C5811) * C21009) *
                C32640 +
            ((C11044 + C11043 + C11042) * C32680 +
             (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
              C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
              C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
                 C21009) *
                C15102) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C32875 +
             C7131 * C32872 + C7132 * C32863 + C7135 * C32819) *
                C15102 +
            (C28224 + C28225 + C28226 + C28227) * C32640) *
               C534 -
           ((C12497 * C32819 + C7134 * C32863 + C6972 * C32872 +
             C6722 * C32875) *
                C32640 +
            (C12217 * C32819 + C7135 * C32863 + C7132 * C32872 +
             C7131 * C32875) *
                C15102) *
               C535) *
              C32537 * C446 +
          (((C7482 * C32875 + C7483 * C32872 + C12403 * C32863 +
             C12404 * C32819) *
                C15102 +
            (C7312 * C32875 + C7313 * C32872 + C14735 * C32863 +
             (C6218 * C12301 - C6219 * C12300 - C6218 * C12302 +
              C32488 * C12303) *
                 C32819) *
                C32640) *
               C535 -
           ((C28463 + C28462 + C28461 + C28460) * C32640 +
            (C12403 * C32819 + C7483 * C32863 + C7482 * C32872 +
             (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                 C32875) *
                C15102) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
             C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
             C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                C21009 +
            (C10703 + C10704 + C10705) * C32680) *
               C15102 +
           ((C5507 + C5508 + C5509) * C21009 +
            (C6150 + C6149 + C6148) * C32680) *
               C32640) *
              C32551 * C213 -
          (((C6145 + C6146 + C6147) * C32680 +
            (C5512 + C5511 + C5510) * C21009) *
               C32640 +
           ((C6148 + C6149 + C6150) * C32680 +
            (C5509 + C5508 + C5507) * C21009) *
               C15102) *
              C32551 * C214 +
          ((C5517 * C21009 + (C6147 + C6146 + C6145) * C32680) * C15102 +
           ((C5515 + C5514 + C5513) * C21009 +
            (C5336 * C1601 - C5337 * C1598 - C5336 * C1602 + C32864 * C1607 +
             C5338 * C1603 - C5339 * C1599 - C5338 * C1604 + C32851 * C1608 +
             C5340 * C1605 - C5341 * C1600 - C5340 * C1606 + C32826 * C1609) *
                C32680) *
               C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
             C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
             C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                C21009 +
            (C10703 + C10704 + C10705) * C32680) *
               C15102 +
           ((C5507 + C5508 + C5509) * C21009 +
            (C6150 + C6149 + C6148) * C32680) *
               C32640) *
              C32551 * C32537 * C110 -
          (((C5340 * C633 - C5341 * C625 - C5340 * C634 + C32826 * C640 +
             C5338 * C631 - C5339 * C624 - C5338 * C632 + C32851 * C639 +
             C5336 * C629 - C5337 * C623 - C5336 * C630 + C32864 * C638) *
                C32680 +
            (C5813 + C5812 + C5811) * C21009) *
               C32640 +
           ((C11044 + C11043 + C11042) * C32680 +
            (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
             C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
             C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
                C21009) *
               C15102) *
              C32551 * C32537 * C111 +
          (((C5336 * C134 - C5337 * C125 - C5336 * C135 + C32864 * C146 +
             C5338 * C136 - C5339 * C126 - C5338 * C137 + C32851 * C147 +
             C5340 * C138 - C5341 * C127 - C5340 * C139 + C32826 * C148) *
                C21009 +
            (C5336 * C336 - C5337 * C324 - C5336 * C337 + C32864 * C354 +
             C5338 * C334 - C5339 * C323 - C5338 * C335 + C32851 * C353 +
             C5340 * C332 - C5341 * C322 - C5340 * C333 + C32826 * C352) *
                C32680) *
               C15102 +
           ((C5336 * C231 - C5337 * C219 - C5336 * C232 + C32864 * C249 +
             C5338 * C229 - C5339 * C218 - C5338 * C230 + C32851 * C248 +
             C5340 * C227 - C5341 * C217 - C5340 * C228 + C32826 * C247) *
                C21009 +
            (C5336 * C631 - C5337 * C624 - C5336 * C632 + C32864 * C639 +
             C5338 * C633 - C5339 * C625 - C5338 * C634 + C32851 * C640 +
             C5340 * C635 - C5341 * C626 - C5340 * C636 + C32826 * C641) *
                C32680) *
               C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C21009 +
            C7131 * C32680) *
               C32874 +
           (C6321 * C21009 + C6722 * C32680) * C32870 +
           (C6322 * C21009 + C6721 * C32680) * C32860 +
           (C6323 * C21009 + C6720 * C32680) * C32812) *
              C32551 * C32537 * C110 -
          ((C10048 * C32680 + C6517 * C21009) * C32812 +
           (C7314 * C32680 + C6516 * C21009) * C32860 +
           (C7312 * C32680 + C6515 * C21009) * C32870 +
           (C7482 * C32680 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C21009) *
               C32874) *
              C32551 * C32537 * C111 +
          (((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
                C21009 +
            (C6218 * C336 - C6219 * C324 - C6218 * C337 + C32488 * C354) *
                C32680) *
               C32874 +
           ((C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
                C21009 +
            (C6218 * C631 - C6219 * C624 - C6218 * C632 + C32488 * C639) *
                C32680) *
               C32870 +
           ((C6218 * C241 - C6219 * C224 - C6218 * C242 + C32488 * C254) *
                C21009 +
            (C6218 * C1083 - C6219 * C1074 - C6218 * C1084 + C32488 * C1101) *
                C32680) *
               C32860 +
           ((C6218 * C880 - C6219 * C874 - C6218 * C881 + C32488 * C892) *
                C21009 +
            (C6218 * C1605 - C6219 * C1600 - C6218 * C1606 + C32488 * C1609) *
                C32680) *
               C32812) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C21009 +
            C7131 * C32680) *
               C32874 +
           (C27518 + C27519) * C32870 + C27526 * C32860 + C27527 * C32812) *
              C32551 * C213 -
          ((C27524 + C27525) * C32812 + (C27523 + C27522) * C32860 +
           (C27521 + C27520) * C32870 + (C27519 + C27518) * C32874) *
              C32551 * C214 +
          (C27526 * C32874 + C27527 * C32870 + (C27525 + C27524) * C32860 +
           (C6325 * C21009 +
            (C6218 * C6691 - C6219 * C6690 - C6218 * C6692 + C32488 * C6693) *
                C32680) *
               C32812) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32875 +
            C7131 * C32872 + C7132 * C32863 + C7135 * C32819) *
               C15102 +
           (C6321 * C32875 + C6722 * C32872 + C6972 * C32863 + C7134 * C32819) *
               C32640) *
              C32551 * C32537 * C110 -
          ((C14735 * C32819 + C7313 * C32863 + C7312 * C32872 +
            C6515 * C32875) *
               C32640 +
           (C12403 * C32819 + C7483 * C32863 + C7482 * C32872 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C32875) *
               C15102) *
              C32551 * C32537 * C111 +
          (((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
                C32875 +
            (C6218 * C336 - C6219 * C324 - C6218 * C337 + C32488 * C354) *
                C32872 +
            (C6218 * C346 - C6219 * C329 - C6218 * C347 + C32488 * C359) *
                C32863 +
            (C6218 * C1991 - C6219 * C1985 - C6218 * C1992 + C32488 * C2003) *
                C32819) *
               C15102 +
           ((C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
                C32875 +
            (C6218 * C631 - C6219 * C624 - C6218 * C632 + C32488 * C639) *
                C32872 +
            (C6218 * C1093 - C6219 * C1079 - C6218 * C1094 + C32488 * C1106) *
                C32863 +
            (C6218 * C2569 - C6219 * C2564 - C6218 * C2570 + C32488 * C2573) *
                C32819) *
               C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32875 +
            C7131 * C32872 + C7132 * C32863 + C7135 * C32819) *
               C15102 +
           (C28224 + C28225 + C28226 + C28227) * C32640) *
              C32551 * C213 -
          ((C28228 + C28229 + C28230 + C28231) * C32640 +
           (C28227 + C28226 + C28225 + C28224) * C15102) *
              C32551 * C214 +
          ((C28231 + C28230 + C28229 + C28228) * C15102 +
           (C6323 * C32875 + C6720 * C32872 + C6974 * C32863 +
            (C6218 * C7630 - C6219 * C7629 - C6218 * C7631 + C32488 * C7632) *
                C32819) *
               C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
              C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                 C32676 +
             (C8968 + C8969) * C32683 + C12936 * C24553) *
                C15102 +
            ((C7894 + C7895) * C32676 + C9600 * C32683 + C12937 * C24553) *
                C32640) *
               C32551 * C444 -
           (((C8970 + C8971) * C24553 + C9601 * C32683 +
             (C7897 + C7896) * C32676) *
                C32640 +
            (C13576 * C24553 + C9602 * C32683 + (C7895 + C7894) * C32676) *
                C15102) *
               C32551 * C445) *
              C446 +
          ((((C8170 + C8171) * C32676 + (C9194 + C9195) * C32683 +
             (C13172 + C13173) * C24553) *
                C15102 +
            ((C8172 + C8173) * C32676 + (C9196 + C9197) * C32683 +
             (C31623 * C1097 - C7744 * C1081 - C31623 * C1098 + C32785 * C1108 +
              C31604 * C1099 - C7746 * C1082 - C31604 * C1100 +
              C32498 * C1109) *
                 C24553) *
                C32640) *
               C32551 * C445 -
           (((C13173 + C13172) * C24553 + (C9195 + C9194) * C32683 +
             (C8171 + C8170) * C32676) *
                C32640 +
            ((C13381 + C13380) * C24553 + (C9405 + C9404) * C32683 +
             (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
              C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
                 C32676) *
                C15102) *
               C32551 * C444) *
              C447)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
              C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                 C32676 +
             (C8968 + C8969) * C32683 + C12936 * C24553) *
                C15102 +
            ((C7894 + C7895) * C32676 + C9600 * C32683 + C12937 * C24553) *
                C32640) *
               C534 -
           (((C12962 + C12963) * C24553 + C13576 * C32683 + C9602 * C32676) *
                C32640 +
            ((C12964 + C12965) * C24553 + (C8974 + C8975) * C32683 +
             (C8969 + C8968) * C32676) *
                C15102) *
               C535) *
              C444 +
          (((C9600 * C32676 + C12937 * C32683 + (C12963 + C12962) * C24553) *
                C15102 +
            (C8771 * C32676 + (C8971 + C8970) * C32683 +
             (C31623 * C7091 - C7744 * C7088 - C31623 * C7092 + C32785 * C7097 +
              C31604 * C7466 - C7746 * C7465 - C31604 * C7467 +
              C32498 * C7468) *
                 C24553) *
                C32640) *
               C535 -
           (((C8970 + C8971) * C24553 + C9601 * C32683 +
             (C7897 + C7896) * C32676) *
                C32640 +
            (C13576 * C24553 + C9602 * C32683 + (C7895 + C7894) * C32676) *
                C15102) *
               C534) *
              C445) *
         C32525) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C32676 +
            (C8968 + C8969) * C32683 + C12936 * C24553) *
               C15102 +
           ((C7894 + C7895) * C32676 + C9600 * C32683 + C12937 * C24553) *
               C32640) *
              C32551 * C213 -
          (((C8970 + C8971) * C24553 + C9601 * C32683 +
            (C7897 + C7896) * C32676) *
               C32640 +
           (C13576 * C24553 + C9602 * C32683 + (C7895 + C7894) * C32676) *
               C15102) *
              C32551 * C214 +
          ((C7902 * C32676 + C8771 * C32683 + (C8971 + C8970) * C24553) *
               C15102 +
           (C7903 * C32676 + (C8473 + C8472) * C32683 +
            (C31623 * C6397 - C7744 * C6393 - C31623 * C6398 + C32785 * C6402 +
             C31604 * C7282 - C7746 * C7281 - C31604 * C7283 + C32498 * C7284) *
                C24553) *
               C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C32676 +
            (C8968 + C8969) * C32683 + C12936 * C24553) *
               C15102 +
           ((C7894 + C7895) * C32676 + C9600 * C32683 + C12937 * C24553) *
               C32640) *
              C32551 * C32537 * C110 -
          (((C13173 + C13172) * C24553 + (C9195 + C9194) * C32683 +
            (C8171 + C8170) * C32676) *
               C32640 +
           ((C13381 + C13380) * C24553 + (C9405 + C9404) * C32683 +
            (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
             C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
                C32676) *
               C15102) *
              C32551 * C32537 * C111 +
          (((C31623 * C134 - C7744 * C125 - C31623 * C135 + C32785 * C146 +
             C31604 * C136 - C7746 * C126 - C31604 * C137 + C32498 * C147) *
                C32676 +
            (C31623 * C336 - C7744 * C324 - C31623 * C337 + C32785 * C354 +
             C31604 * C334 - C7746 * C323 - C31604 * C335 + C32498 * C353) *
                C32683 +
            (C31623 * C346 - C7744 * C329 - C31623 * C347 + C32785 * C359 +
             C31604 * C348 - C7746 * C330 - C31604 * C349 + C32498 * C360) *
                C24553) *
               C15102 +
           ((C31623 * C231 - C7744 * C219 - C31623 * C232 + C32785 * C249 +
             C31604 * C229 - C7746 * C218 - C31604 * C230 + C32498 * C248) *
                C32676 +
            (C31623 * C631 - C7744 * C624 - C31623 * C632 + C32785 * C639 +
             C31604 * C633 - C7746 * C625 - C31604 * C634 + C32498 * C640) *
                C32683 +
            (C31623 * C1093 - C7744 * C1079 - C31623 * C1094 + C32785 * C1106 +
             C31604 * C2221 - C7746 * C2220 - C31604 * C2222 + C32498 * C2223) *
                C24553) *
               C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C32676 +
            (C8968 + C8969) * C32683 + C12936 * C24553) *
               C15102 +
           ((C7894 + C7895) * C32676 + C9600 * C32683 + C12937 * C24553) *
               C32640) *
              C319 -
          (((C12962 + C12963) * C24553 + C13576 * C32683 + C9602 * C32676) *
               C32640 +
           ((C12964 + C12965) * C24553 + (C8974 + C8975) * C32683 +
            (C8969 + C8968) * C32676) *
               C15102) *
              C320 +
          ((C12936 * C32676 + C13875 * C32683 + (C13889 + C13888) * C24553) *
               C15102 +
           (C12937 * C32676 + (C12963 + C12962) * C32683 +
            (C31623 * C7093 - C7744 * C7089 - C31623 * C7094 + C32785 * C7098 +
             C31604 * C12301 - C7746 * C12300 - C31604 * C12302 +
             C32498 * C12303) *
                C24553) *
               C32640) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
              C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                 C32676 +
             (C8968 + C8969) * C32683 + C12936 * C24553) *
                C15102 +
            ((C7894 + C7895) * C32676 + C9600 * C32683 + C12937 * C24553) *
                C32640) *
               C534 -
           (((C12962 + C12963) * C24553 + C13576 * C32683 + C9602 * C32676) *
                C32640 +
            ((C12964 + C12965) * C24553 + (C8974 + C8975) * C32683 +
             (C8969 + C8968) * C32676) *
                C15102) *
               C535) *
              C32537 * C446 +
          ((((C9404 + C9405) * C32676 + (C13380 + C13381) * C32683 +
             (C14162 + C14163) * C24553) *
                C15102 +
            ((C9194 + C9195) * C32676 + (C13172 + C13173) * C32683 +
             (C31623 * C2567 - C7744 * C2563 - C31623 * C2568 + C32785 * C2572 +
              C31604 * C2569 - C7746 * C2564 - C31604 * C2570 +
              C32498 * C2573) *
                 C24553) *
                C32640) *
               C535 -
           (((C13173 + C13172) * C24553 + (C9195 + C9194) * C32683 +
             (C8171 + C8170) * C32676) *
                C32640 +
            ((C13381 + C13380) * C24553 + (C9405 + C9404) * C32683 +
             (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
              C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
                 C32676) *
                C15102) *
               C534) *
              C32537 * C447)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C32676 +
            (C8968 + C8969) * C32683 + C12936 * C24553) *
               C15102 +
           ((C7894 + C7895) * C32676 + C9600 * C32683 + C12937 * C24553) *
               C32640) *
              C32551 * C32537 * C110 -
          (((C13173 + C13172) * C24553 + (C9195 + C9194) * C32683 +
            (C8171 + C8170) * C32676) *
               C32640 +
           ((C13381 + C13380) * C24553 + (C9405 + C9404) * C32683 +
            (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
             C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
                C32676) *
               C15102) *
              C32551 * C32537 * C111 +
          (((C31623 * C134 - C7744 * C125 - C31623 * C135 + C32785 * C146 +
             C31604 * C136 - C7746 * C126 - C31604 * C137 + C32498 * C147) *
                C32676 +
            (C31623 * C336 - C7744 * C324 - C31623 * C337 + C32785 * C354 +
             C31604 * C334 - C7746 * C323 - C31604 * C335 + C32498 * C353) *
                C32683 +
            (C31623 * C346 - C7744 * C329 - C31623 * C347 + C32785 * C359 +
             C31604 * C348 - C7746 * C330 - C31604 * C349 + C32498 * C360) *
                C24553) *
               C15102 +
           ((C31623 * C231 - C7744 * C219 - C31623 * C232 + C32785 * C249 +
             C31604 * C229 - C7746 * C218 - C31604 * C230 + C32498 * C248) *
                C32676 +
            (C31623 * C631 - C7744 * C624 - C31623 * C632 + C32785 * C639 +
             C31604 * C633 - C7746 * C625 - C31604 * C634 + C32498 * C640) *
                C32683 +
            (C31623 * C1093 - C7744 * C1079 - C31623 * C1094 + C32785 * C1106 +
             C31604 * C2221 - C7746 * C2220 - C31604 * C2222 + C32498 * C2223) *
                C24553) *
               C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C32676 +
            (C8968 + C8969) * C32683 + C12936 * C24553) *
               C15102 +
           ((C7894 + C7895) * C32676 + C9600 * C32683 + C12937 * C24553) *
               C32640) *
              C32551 * C213 -
          (((C8970 + C8971) * C24553 + C9601 * C32683 +
            (C7897 + C7896) * C32676) *
               C32640 +
           (C13576 * C24553 + C9602 * C32683 + (C7895 + C7894) * C32676) *
               C15102) *
              C32551 * C214 +
          ((C7902 * C32676 + C8771 * C32683 + (C8971 + C8970) * C24553) *
               C15102 +
           (C7903 * C32676 + (C8473 + C8472) * C32683 +
            (C31623 * C6397 - C7744 * C6393 - C31623 * C6398 + C32785 * C6402 +
             C31604 * C7282 - C7746 * C7281 - C31604 * C7283 + C32498 * C7284) *
                C24553) *
               C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
              C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
              C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                 C21009 +
             (C10703 + C10704 + C10705) * C32680) *
                C15102 +
            ((C5507 + C5508 + C5509) * C21009 +
             (C6150 + C6149 + C6148) * C32680) *
                C32640) *
               C32551 * C444 -
           (((C6145 + C6146 + C6147) * C32680 +
             (C5512 + C5511 + C5510) * C21009) *
                C32640 +
            ((C6148 + C6149 + C6150) * C32680 +
             (C5509 + C5508 + C5507) * C21009) *
                C15102) *
               C32551 * C445) *
              C446 +
          ((((C5811 + C5812 + C5813) * C21009 +
             (C26927 + C26928 + C26929) * C32680) *
                C15102 +
            ((C5814 + C5815 + C5816) * C21009 +
             (C5336 * C1085 - C5337 * C1075 - C5336 * C1086 + C32864 * C1102 +
              C5338 * C1083 - C5339 * C1074 - C5338 * C1084 + C32851 * C1101 +
              C5340 * C1449 - C5341 * C1448 - C5340 * C1450 + C32826 * C1451) *
                 C32680) *
                C32640) *
               C32551 * C445 -
           (((C26929 + C26928 + C26927) * C32680 +
             (C5813 + C5812 + C5811) * C21009) *
                C32640 +
            ((C11044 + C11043 + C11042) * C32680 +
             (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
              C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
              C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
                 C21009) *
                C15102) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C21009 +
             C7131 * C32680) *
                C32874 +
            (C27518 + C27519) * C32870 + C27526 * C32860 + C27527 * C32812) *
               C32551 * C444 -
           ((C27524 + C27525) * C32812 + (C27523 + C27522) * C32860 +
            (C27521 + C27520) * C32870 + (C27519 + C27518) * C32874) *
               C32551 * C445) *
              C446 +
          (((C27756 + C27757) * C32874 + (C27758 + C27759) * C32870 +
            (C27760 + C27761) * C32860 +
            (C6518 * C21009 +
             (C6218 * C6605 - C6219 * C6604 - C6218 * C6606 + C32488 * C6607) *
                 C32680) *
                C32812) *
               C32551 * C445 -
           ((C27761 + C27760) * C32812 + (C27759 + C27758) * C32860 +
            (C27757 + C27756) * C32870 +
            (C7482 * C32680 +
             (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                 C21009) *
                C32874) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
              C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
              C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                 C21009 +
             (C10703 + C10704 + C10705) * C32680) *
                C15102 +
            ((C5507 + C5508 + C5509) * C21009 + C27320 * C32680) * C32640) *
               C534 -
           (((C11214 + C11213 + C11212) * C32680 + C27321 * C21009) * C32640 +
            ((C10708 + C10707 + C10706) * C32680 +
             (C10705 + C10704 + C10703) * C21009) *
                C15102) *
               C535) *
              C444 +
          (((C27320 * C21009 + (C11212 + C11213 + C11214) * C32680) * C15102 +
            ((C6147 + C6146 + C6145) * C21009 +
             (C5336 * C1095 - C5337 * C1080 - C5336 * C1096 + C32864 * C1107 +
              C5338 * C1097 - C5339 * C1081 - C5338 * C1098 + C32851 * C1108 +
              C5340 * C1099 - C5341 * C1082 - C5340 * C1100 + C32826 * C1109) *
                 C32680) *
                C32640) *
               C535 -
           (((C6145 + C6146 + C6147) * C32680 +
             (C5512 + C5511 + C5510) * C21009) *
                C32640 +
            (C27321 * C32680 + (C5509 + C5508 + C5507) * C21009) * C15102) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C21009 +
             C7131 * C32680) *
                C32874 +
            (C27518 + C27519) * C32870 + C27526 * C32860 + C27527 * C32812) *
               C534 -
           ((C28022 + C28023) * C32812 + (C28024 + C28025) * C32860 +
            (C28026 + C28027) * C32870 +
            (C7132 * C32680 + C7131 * C21009) * C32874) *
               C535) *
              C444 +
          (((C28027 + C28026) * C32874 + (C28025 + C28024) * C32870 +
            (C28023 + C28022) * C32860 +
            (C6719 * C21009 +
             (C6218 * C6399 - C6219 * C6394 - C6218 * C6400 + C32488 * C6403) *
                 C32680) *
                C32812) *
               C535 -
           ((C27524 + C27525) * C32812 + (C27523 + C27522) * C32860 +
            (C27521 + C27520) * C32870 + (C27519 + C27518) * C32874) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
             C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
             C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                C21009 +
            (C10703 + C10704 + C10705) * C32680) *
               C15102 +
           ((C5507 + C5508 + C5509) * C21009 +
            (C6150 + C6149 + C6148) * C32680) *
               C32640) *
              C32551 * C213 -
          (((C6145 + C6146 + C6147) * C32680 +
            (C5512 + C5511 + C5510) * C21009) *
               C32640 +
           ((C6148 + C6149 + C6150) * C32680 +
            (C5509 + C5508 + C5507) * C21009) *
               C15102) *
              C32551 * C214 +
          ((C5517 * C21009 + (C6147 + C6146 + C6145) * C32680) * C15102 +
           ((C5515 + C5514 + C5513) * C21009 +
            (C5336 * C1601 - C5337 * C1598 - C5336 * C1602 + C32864 * C1607 +
             C5338 * C1603 - C5339 * C1599 - C5338 * C1604 + C32851 * C1608 +
             C5340 * C1605 - C5341 * C1600 - C5340 * C1606 + C32826 * C1609) *
                C32680) *
               C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
             C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
             C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                C21009 +
            (C10703 + C10704 + C10705) * C32680) *
               C15102 +
           ((C5507 + C5508 + C5509) * C21009 +
            (C6150 + C6149 + C6148) * C32680) *
               C32640) *
              C32551 * C32537 * C110 -
          (((C5340 * C633 - C5341 * C625 - C5340 * C634 + C32826 * C640 +
             C5338 * C631 - C5339 * C624 - C5338 * C632 + C32851 * C639 +
             C5336 * C629 - C5337 * C623 - C5336 * C630 + C32864 * C638) *
                C32680 +
            (C5813 + C5812 + C5811) * C21009) *
               C32640 +
           ((C11044 + C11043 + C11042) * C32680 +
            (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
             C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
             C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
                C21009) *
               C15102) *
              C32551 * C32537 * C111 +
          (((C5336 * C134 - C5337 * C125 - C5336 * C135 + C32864 * C146 +
             C5338 * C136 - C5339 * C126 - C5338 * C137 + C32851 * C147 +
             C5340 * C138 - C5341 * C127 - C5340 * C139 + C32826 * C148) *
                C21009 +
            (C5336 * C336 - C5337 * C324 - C5336 * C337 + C32864 * C354 +
             C5338 * C334 - C5339 * C323 - C5338 * C335 + C32851 * C353 +
             C5340 * C332 - C5341 * C322 - C5340 * C333 + C32826 * C352) *
                C32680) *
               C15102 +
           ((C5336 * C231 - C5337 * C219 - C5336 * C232 + C32864 * C249 +
             C5338 * C229 - C5339 * C218 - C5338 * C230 + C32851 * C248 +
             C5340 * C227 - C5341 * C217 - C5340 * C228 + C32826 * C247) *
                C21009 +
            (C5336 * C631 - C5337 * C624 - C5336 * C632 + C32864 * C639 +
             C5338 * C633 - C5339 * C625 - C5338 * C634 + C32851 * C640 +
             C5340 * C635 - C5341 * C626 - C5340 * C636 + C32826 * C641) *
                C32680) *
               C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
             C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
             C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                C21009 +
            (C10703 + C10704 + C10705) * C32680) *
               C15102 +
           ((C5507 + C5508 + C5509) * C21009 +
            (C6150 + C6149 + C6148) * C32680) *
               C32640) *
              C319 -
          (((C11214 + C11213 + C11212) * C32680 +
            (C6148 + C6149 + C6150) * C21009) *
               C32640 +
           ((C10708 + C10707 + C10706) * C32680 +
            (C10705 + C10704 + C10703) * C21009) *
               C15102) *
              C320 +
          ((C10713 * C21009 + (C10711 + C10710 + C10709) * C32680) * C15102 +
           ((C11212 + C11213 + C11214) * C21009 +
            (C5336 * C2565 - C5337 * C2562 - C5336 * C2566 + C32864 * C2571 +
             C5338 * C2567 - C5339 * C2563 - C5338 * C2568 + C32851 * C2572 +
             C5340 * C2569 - C5341 * C2564 - C5340 * C2570 + C32826 * C2573) *
                C32680) *
               C32640) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C21009 +
            C7131 * C32680) *
               C32874 +
           (C6321 * C21009 + C6722 * C32680) * C32870 +
           (C6322 * C21009 + C6721 * C32680) * C32860 +
           (C6323 * C21009 + C6720 * C32680) * C32812) *
              C32551 * C32537 * C110 -
          ((C10048 * C32680 + C6517 * C21009) * C32812 +
           (C7314 * C32680 + C6516 * C21009) * C32860 +
           (C7312 * C32680 + C6515 * C21009) * C32870 +
           (C7482 * C32680 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C21009) *
               C32874) *
              C32551 * C32537 * C111 +
          (((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
                C21009 +
            (C6218 * C336 - C6219 * C324 - C6218 * C337 + C32488 * C354) *
                C32680) *
               C32874 +
           ((C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
                C21009 +
            (C6218 * C631 - C6219 * C624 - C6218 * C632 + C32488 * C639) *
                C32680) *
               C32870 +
           ((C6218 * C241 - C6219 * C224 - C6218 * C242 + C32488 * C254) *
                C21009 +
            (C6218 * C1083 - C6219 * C1074 - C6218 * C1084 + C32488 * C1101) *
                C32680) *
               C32860 +
           ((C6218 * C880 - C6219 * C874 - C6218 * C881 + C32488 * C892) *
                C21009 +
            (C6218 * C1605 - C6219 * C1600 - C6218 * C1606 + C32488 * C1609) *
                C32680) *
               C32812) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C21009 +
            C7131 * C32680) *
               C32874 +
           (C27518 + C27519) * C32870 + C27526 * C32860 + C27527 * C32812) *
              C32551 * C213 -
          ((C27524 + C27525) * C32812 + (C27523 + C27522) * C32860 +
           (C27521 + C27520) * C32870 + (C27519 + C27518) * C32874) *
              C32551 * C214 +
          (C27526 * C32874 + C27527 * C32870 + (C27525 + C27524) * C32860 +
           (C6325 * C21009 +
            (C6218 * C6691 - C6219 * C6690 - C6218 * C6692 + C32488 * C6693) *
                C32680) *
               C32812) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C21009 +
            C7131 * C32680) *
               C32874 +
           (C27518 + C27519) * C32870 + C27526 * C32860 + C27527 * C32812) *
              C319 -
          ((C6974 * C32680 + C6720 * C21009) * C32812 +
           (C6973 * C32680 + C6721 * C21009) * C32860 +
           (C6972 * C32680 + C6722 * C21009) * C32870 +
           (C7132 * C32680 + C7131 * C21009) * C32874) *
              C320 +
          ((C7132 * C21009 + C7135 * C32680) * C32874 +
           (C6972 * C21009 + C7134 * C32680) * C32870 +
           (C6973 * C21009 + C7133 * C32680) * C32860 +
           (C6974 * C21009 +
            (C6218 * C7630 - C6219 * C7629 - C6218 * C7631 + C32488 * C7632) *
                C32680) *
               C32812) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
              C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
              C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                 C21009 +
             (C10703 + C10704 + C10705) * C32680) *
                C15102 +
            ((C5507 + C5508 + C5509) * C21009 +
             (C6150 + C6149 + C6148) * C32680) *
                C32640) *
               C534 -
           (((C11214 + C11213 + C11212) * C32680 +
             (C6148 + C6149 + C6150) * C21009) *
                C32640 +
            ((C10708 + C10707 + C10706) * C32680 +
             (C10705 + C10704 + C10703) * C21009) *
                C15102) *
               C535) *
              C32537 * C446 +
          ((((C11042 + C11043 + C11044) * C21009 +
             (C11045 + C11046 + C11047) * C32680) *
                C15102 +
            ((C26927 + C26928 + C26929) * C21009 +
             (C5336 * C1091 - C5337 * C1078 - C5336 * C1092 + C32864 * C1105 +
              C5338 * C1093 - C5339 * C1079 - C5338 * C1094 + C32851 * C1106 +
              C5340 * C2221 - C5341 * C2220 - C5340 * C2222 + C32826 * C2223) *
                 C32680) *
                C32640) *
               C535 -
           (((C26929 + C26928 + C26927) * C32680 +
             (C5813 + C5812 + C5811) * C21009) *
                C32640 +
            ((C11044 + C11043 + C11042) * C32680 +
             (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
              C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
              C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
                 C21009) *
                C15102) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C21009 +
             C7131 * C32680) *
                C32874 +
            (C27518 + C27519) * C32870 + C27526 * C32860 + C27527 * C32812) *
               C534 -
           ((C6974 * C32680 + C6720 * C21009) * C32812 +
            (C6973 * C32680 + C6721 * C21009) * C32860 +
            (C6972 * C32680 + C6722 * C21009) * C32870 +
            (C7132 * C32680 + C7131 * C21009) * C32874) *
               C535) *
              C32537 * C446 +
          (((C7482 * C21009 + C7483 * C32680) * C32874 +
            (C7312 * C21009 + C7313 * C32680) * C32870 +
            (C7314 * C21009 + C7315 * C32680) * C32860 +
            (C10048 * C21009 +
             (C6218 * C7282 - C6219 * C7281 - C6218 * C7283 + C32488 * C7284) *
                 C32680) *
                C32812) *
               C535 -
           ((C27761 + C27760) * C32812 + (C27759 + C27758) * C32860 +
            (C27757 + C27756) * C32870 +
            (C7482 * C32680 +
             (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                 C21009) *
                C32874) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
             C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
             C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                C21009 +
            (C10703 + C10704 + C10705) * C32680) *
               C15102 +
           ((C5507 + C5508 + C5509) * C21009 +
            (C6150 + C6149 + C6148) * C32680) *
               C32640) *
              C32551 * C32537 * C110 -
          (((C5340 * C633 - C5341 * C625 - C5340 * C634 + C32826 * C640 +
             C5338 * C631 - C5339 * C624 - C5338 * C632 + C32851 * C639 +
             C5336 * C629 - C5337 * C623 - C5336 * C630 + C32864 * C638) *
                C32680 +
            (C5813 + C5812 + C5811) * C21009) *
               C32640 +
           ((C11044 + C11043 + C11042) * C32680 +
            (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
             C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
             C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
                C21009) *
               C15102) *
              C32551 * C32537 * C111 +
          (((C5336 * C134 - C5337 * C125 - C5336 * C135 + C32864 * C146 +
             C5338 * C136 - C5339 * C126 - C5338 * C137 + C32851 * C147 +
             C5340 * C138 - C5341 * C127 - C5340 * C139 + C32826 * C148) *
                C21009 +
            (C5336 * C336 - C5337 * C324 - C5336 * C337 + C32864 * C354 +
             C5338 * C334 - C5339 * C323 - C5338 * C335 + C32851 * C353 +
             C5340 * C332 - C5341 * C322 - C5340 * C333 + C32826 * C352) *
                C32680) *
               C15102 +
           ((C5336 * C231 - C5337 * C219 - C5336 * C232 + C32864 * C249 +
             C5338 * C229 - C5339 * C218 - C5338 * C230 + C32851 * C248 +
             C5340 * C227 - C5341 * C217 - C5340 * C228 + C32826 * C247) *
                C21009 +
            (C5336 * C631 - C5337 * C624 - C5336 * C632 + C32864 * C639 +
             C5338 * C633 - C5339 * C625 - C5338 * C634 + C32851 * C640 +
             C5340 * C635 - C5341 * C626 - C5340 * C636 + C32826 * C641) *
                C32680) *
               C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
             C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
             C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                C21009 +
            (C10703 + C10704 + C10705) * C32680) *
               C15102 +
           ((C5507 + C5508 + C5509) * C21009 +
            (C6150 + C6149 + C6148) * C32680) *
               C32640) *
              C32551 * C213 -
          (((C6145 + C6146 + C6147) * C32680 +
            (C5512 + C5511 + C5510) * C21009) *
               C32640 +
           ((C6148 + C6149 + C6150) * C32680 +
            (C5509 + C5508 + C5507) * C21009) *
               C15102) *
              C32551 * C214 +
          ((C5517 * C21009 + (C6147 + C6146 + C6145) * C32680) * C15102 +
           ((C5515 + C5514 + C5513) * C21009 +
            (C5336 * C1601 - C5337 * C1598 - C5336 * C1602 + C32864 * C1607 +
             C5338 * C1603 - C5339 * C1599 - C5338 * C1604 + C32851 * C1608 +
             C5340 * C1605 - C5341 * C1600 - C5340 * C1606 + C32826 * C1609) *
                C32680) *
               C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C21009 +
            C7131 * C32680) *
               C32874 +
           (C6321 * C21009 + C6722 * C32680) * C32870 +
           (C6322 * C21009 + C6721 * C32680) * C32860 +
           (C6323 * C21009 + C6720 * C32680) * C32812) *
              C32551 * C32537 * C110 -
          ((C10048 * C32680 + C6517 * C21009) * C32812 +
           (C7314 * C32680 + C6516 * C21009) * C32860 +
           (C7312 * C32680 + C6515 * C21009) * C32870 +
           (C7482 * C32680 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C21009) *
               C32874) *
              C32551 * C32537 * C111 +
          (((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
                C21009 +
            (C6218 * C336 - C6219 * C324 - C6218 * C337 + C32488 * C354) *
                C32680) *
               C32874 +
           ((C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
                C21009 +
            (C6218 * C631 - C6219 * C624 - C6218 * C632 + C32488 * C639) *
                C32680) *
               C32870 +
           ((C6218 * C241 - C6219 * C224 - C6218 * C242 + C32488 * C254) *
                C21009 +
            (C6218 * C1083 - C6219 * C1074 - C6218 * C1084 + C32488 * C1101) *
                C32680) *
               C32860 +
           ((C6218 * C880 - C6219 * C874 - C6218 * C881 + C32488 * C892) *
                C21009 +
            (C6218 * C1605 - C6219 * C1600 - C6218 * C1606 + C32488 * C1609) *
                C32680) *
               C32812) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C21009 +
            C7131 * C32680) *
               C32874 +
           (C27518 + C27519) * C32870 + C27526 * C32860 + C27527 * C32812) *
              C32551 * C213 -
          ((C27524 + C27525) * C32812 + (C27523 + C27522) * C32860 +
           (C27521 + C27520) * C32870 + (C27519 + C27518) * C32874) *
              C32551 * C214 +
          (C27526 * C32874 + C27527 * C32870 + (C27525 + C27524) * C32860 +
           (C6325 * C21009 +
            (C6218 * C6691 - C6219 * C6690 - C6218 * C6692 + C32488 * C6693) *
                C32680) *
               C32812) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C32593 * C7739 +
            (C7894 + C7895) * C32593 * C7740 + C7904 * C7741 + C7905 * C32812) *
               C32551 * C444 -
           ((C7900 + C7901) * C32593 * C32812 +
            (C7899 + C7898) * C32593 * C7741 +
            (C7897 + C7896) * C32593 * C7740 +
            (C7895 + C7894) * C32593 * C7739) *
               C32551 * C445) *
              C446 +
          (((C8170 + C8171) * C32593 * C7739 +
            (C8172 + C8173) * C32593 * C7740 +
            (C8174 + C8175) * C32593 * C7741 +
            (C31623 * C888 - C7744 * C878 - C31623 * C889 + C32785 * C896 +
             C31604 * C890 - C7746 * C879 - C31604 * C891 + C32498 * C897) *
                C32593 * C32812) *
               C32551 * C445 -
           ((C8175 + C8174) * C32593 * C32812 +
            (C8173 + C8172) * C32593 * C7741 +
            (C8171 + C8170) * C32593 * C7740 +
            (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
             C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
                C32593 * C7739) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
             C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
             C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
             C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
                C32593 * C32804 +
            (C2854 + C2855 + C2856 + C2857) * C32593 * C32640) *
               C32551 * C444 -
           ((C2858 + C2859 + C2860 + C2861) * C32593 * C32640 +
            (C2857 + C2856 + C2855 + C2854) * C32593 * C32804) *
               C32551 * C445) *
              C446 +
          (((C3114 + C3115 + C3116 + C3117) * C32593 * C32804 +
            (C2699 * C239 - C2700 * C223 - C2699 * C240 + C2693 * C253 +
             C2701 * C241 - C2702 * C224 - C2701 * C242 + C2694 * C254 +
             C2703 * C243 - C2704 * C225 - C2703 * C244 + C2695 * C255 +
             C2705 * C245 - C2706 * C226 - C2705 * C246 + C32803 * C256) *
                C32593 * C32640) *
               C32551 * C445 -
           ((C3117 + C3116 + C3115 + C3114) * C32593 * C32640 +
            (C2705 * C138 - C2706 * C127 - C2705 * C139 + C32803 * C148 +
             C2703 * C136 - C2704 * C126 - C2703 * C137 + C2695 * C147 +
             C2701 * C134 - C2702 * C125 - C2701 * C135 + C2694 * C146 +
             C2699 * C132 - C2700 * C124 - C2699 * C133 + C2693 * C145) *
                C32593 * C32804) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
              C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                 C10425 +
             (C8968 + C8969) * C10426 + C12936 * C32838) *
                C32804 +
            ((C7894 + C7895) * C10425 + C9600 * C10426 + C12937 * C32838) *
                C32640) *
               C32551 * C444 -
           (((C8970 + C8971) * C32838 + C9601 * C10426 +
             (C7897 + C7896) * C10425) *
                C32640 +
            ((C8972 + C8973) * C32838 + C9602 * C10426 +
             (C7895 + C7894) * C10425) *
                C32804) *
               C32551 * C445) *
              C446 +
          ((((C8170 + C8171) * C10425 + (C9194 + C9195) * C10426 +
             (C13172 + C13173) * C32838) *
                C32804 +
            ((C8172 + C8173) * C10425 + (C9196 + C9197) * C10426 +
             (C31623 * C1097 - C7744 * C1081 - C31623 * C1098 + C32785 * C1108 +
              C31604 * C1099 - C7746 * C1082 - C31604 * C1100 +
              C32498 * C1109) *
                 C32838) *
                C32640) *
               C32551 * C445 -
           (((C13173 + C13172) * C32838 + (C9195 + C9194) * C10426 +
             (C8171 + C8170) * C10425) *
                C32640 +
            ((C31604 * C346 - C7746 * C329 - C31604 * C347 + C32498 * C359 +
              C31623 * C344 - C7744 * C328 - C31623 * C345 + C32785 * C358) *
                 C32838 +
             (C9405 + C9404) * C10426 +
             (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
              C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
                 C10425) *
                C32804) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C32593 * C7739 +
            (C7894 + C7895) * C32593 * C7740 + C7904 * C7741 + C7905 * C32812) *
               C534 -
           ((C8472 + C8473) * C32593 * C32812 +
            (C8474 + C8475) * C32593 * C7741 +
            (C8476 + C8477) * C32593 * C7740 +
            (C31604 * C338 - C7746 * C325 - C31604 * C339 + C32498 * C355 +
             C31623 * C340 - C7744 * C326 - C31623 * C341 + C32785 * C356) *
                C32593 * C7739) *
               C535) *
              C444 +
          (((C8477 + C8476) * C32593 * C7739 +
            (C8475 + C8474) * C32593 * C7740 +
            (C8473 + C8472) * C32593 * C7741 +
            (C31623 * C6395 - C7744 * C6392 - C31623 * C6396 + C32785 * C6401 +
             C31604 * C6605 - C7746 * C6604 - C31604 * C6606 + C32498 * C6607) *
                C32593 * C32812) *
               C535 -
           ((C7900 + C7901) * C32593 * C32812 +
            (C7899 + C7898) * C32593 * C7741 +
            (C7897 + C7896) * C32593 * C7740 +
            (C7895 + C7894) * C32593 * C7739) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
             C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
             C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
             C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
                C32593 * C32804 +
            (C2854 + C2855 + C2856 + C2857) * C32593 * C32640) *
               C534 -
           ((C3402 + C3403 + C3404 + C3405) * C32593 * C32640 +
            (C2705 * C334 - C2706 * C323 - C2705 * C335 + C32803 * C353 +
             C2703 * C336 - C2704 * C324 - C2703 * C337 + C2695 * C354 +
             C2701 * C338 - C2702 * C325 - C2701 * C339 + C2694 * C355 +
             C2699 * C340 - C2700 * C326 - C2699 * C341 + C2693 * C356) *
                C32593 * C32804) *
               C535) *
              C444 +
          (((C3405 + C3404 + C3403 + C3402) * C32593 * C32804 +
            (C2699 * C1087 - C2700 * C1076 - C2699 * C1088 + C2693 * C1103 +
             C2701 * C1085 - C2702 * C1075 - C2701 * C1086 + C2694 * C1102 +
             C2703 * C1083 - C2704 * C1074 - C2703 * C1084 + C2695 * C1101 +
             C2705 * C1449 - C2706 * C1448 - C2705 * C1450 + C32803 * C1451) *
                C32593 * C32640) *
               C535 -
           ((C2858 + C2859 + C2860 + C2861) * C32593 * C32640 +
            (C2857 + C2856 + C2855 + C2854) * C32593 * C32804) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
              C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                 C10425 +
             (C8968 + C8969) * C10426 + C12936 * C32838) *
                C32804 +
            ((C7894 + C7895) * C10425 + C9600 * C10426 + C12937 * C32838) *
                C32640) *
               C534 -
           (((C12962 + C12963) * C32838 + C13576 * C10426 + C9602 * C10425) *
                C32640 +
            ((C12964 + C12965) * C32838 + (C8974 + C8975) * C10426 +
             (C8969 + C8968) * C10425) *
                C32804) *
               C535) *
              C444 +
          (((C9600 * C10425 + C12937 * C10426 + (C12963 + C12962) * C32838) *
                C32804 +
            (C8771 * C10425 + (C8971 + C8970) * C10426 +
             (C31623 * C7091 - C7744 * C7088 - C31623 * C7092 + C32785 * C7097 +
              C31604 * C7466 - C7746 * C7465 - C31604 * C7467 +
              C32498 * C7468) *
                 C32838) *
                C32640) *
               C535 -
           (((C8970 + C8971) * C32838 + C9601 * C10426 +
             (C7897 + C7896) * C10425) *
                C32640 +
            (C13576 * C32838 + C9602 * C10426 + (C7895 + C7894) * C10425) *
                C32804) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
                C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
                C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
                C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
                   C32593 * C32804 +
               (C2699 * C235 - C2700 * C221 - C2699 * C236 + C2693 * C251 +
                C2701 * C233 - C2702 * C220 - C2701 * C234 + C2694 * C250 +
                C2703 * C231 - C2704 * C219 - C2703 * C232 + C2695 * C249 +
                C2705 * C229 - C2706 * C218 - C2705 * C230 + C32803 * C248) *
                   C32593 * C32640) *
                  C32551 * C32537 * C110 -
              ((C2705 * C227 - C2706 * C217 - C2705 * C228 + C32803 * C247 +
                C2703 * C229 - C2704 * C218 - C2703 * C230 + C2695 * C248 +
                C2701 * C231 - C2702 * C219 - C2701 * C232 + C2694 * C249 +
                C2699 * C233 - C2700 * C220 - C2699 * C234 + C2693 * C250) *
                   C32593 * C32640 +
               (C2705 * C138 - C2706 * C127 - C2705 * C139 + C32803 * C148 +
                C2703 * C136 - C2704 * C126 - C2703 * C137 + C2695 * C147 +
                C2701 * C134 - C2702 * C125 - C2701 * C135 + C2694 * C146 +
                C2699 * C132 - C2700 * C124 - C2699 * C133 + C2693 * C145) *
                   C32593 * C32804) *
                  C32551 * C32537 * C111 +
              ((C2699 * C134 - C2700 * C125 - C2699 * C135 + C2693 * C146 +
                C2701 * C136 - C2702 * C126 - C2701 * C137 + C2694 * C147 +
                C2703 * C138 - C2704 * C127 - C2703 * C139 + C2695 * C148 +
                C2705 * C140 - C2706 * C128 - C2705 * C141 + C32803 * C149) *
                   C32593 * C32804 +
               (C2699 * C231 - C2700 * C219 - C2699 * C232 + C2693 * C249 +
                C2701 * C229 - C2702 * C218 - C2701 * C230 + C2694 * C248 +
                C2703 * C227 - C2704 * C217 - C2703 * C228 + C2695 * C247 +
                C2705 * C449 - C2706 * C448 - C2705 * C450 + C32803 * C451) *
                   C32593 * C32640) *
                  C32551 * C32537 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
                C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
                C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
                C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
                   C32593 * C32804 +
               (C2854 + C2855 + C2856 + C2857) * C32593 * C32640) *
                  C32551 * C213 -
              ((C2858 + C2859 + C2860 + C2861) * C32593 * C32640 +
               (C2857 + C2856 + C2855 + C2854) * C32593 * C32804) *
                  C32551 * C214 +
              ((C2861 + C2860 + C2859 + C2858) * C32593 * C32804 +
               (C2699 * C884 - C2700 * C876 - C2699 * C885 + C2693 * C894 +
                C2701 * C882 - C2702 * C875 - C2701 * C883 + C2694 * C893 +
                C2703 * C880 - C2704 * C874 - C2703 * C881 + C2695 * C892 +
                C2705 * C1257 - C2706 * C1256 - C2705 * C1258 +
                C32803 * C1259) *
                   C32593 * C32640) *
                  C32551 * C215) *
             C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
            C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
            C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
            C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
               C32593 * C32804 +
           (C2854 + C2855 + C2856 + C2857) * C32593 * C32640) *
              C319 -
          ((C2705 * C633 - C2706 * C625 - C2705 * C634 + C32803 * C640 +
            C2703 * C631 - C2704 * C624 - C2703 * C632 + C2695 * C639 +
            C2701 * C629 - C2702 * C623 - C2701 * C630 + C2694 * C638 +
            C2699 * C627 - C2700 * C622 - C2699 * C628 + C2693 * C637) *
               C32593 * C32640 +
           (C2705 * C334 - C2706 * C323 - C2705 * C335 + C32803 * C353 +
            C2703 * C336 - C2704 * C324 - C2703 * C337 + C2695 * C354 +
            C2701 * C338 - C2702 * C325 - C2701 * C339 + C2694 * C355 +
            C2699 * C340 - C2700 * C326 - C2699 * C341 + C2693 * C356) *
               C32593 * C32804) *
              C320 +
          ((C2699 * C342 - C2700 * C327 - C2699 * C343 + C2693 * C357 +
            C2701 * C344 - C2702 * C328 - C2701 * C345 + C2694 * C358 +
            C2703 * C346 - C2704 * C329 - C2703 * C347 + C2695 * C359 +
            C2705 * C348 - C2706 * C330 - C2705 * C349 + C32803 * C360) *
               C32593 * C32804 +
           (C2699 * C1089 - C2700 * C1077 - C2699 * C1090 + C2693 * C1104 +
            C2701 * C1091 - C2702 * C1078 - C2701 * C1092 + C2694 * C1105 +
            C2703 * C1093 - C2704 * C1079 - C2703 * C1094 + C2695 * C1106 +
            C2705 * C2221 - C2706 * C2220 - C2705 * C2222 + C32803 * C2223) *
               C32593 * C32640) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
            C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
               C32593 * C7739 +
           (C31623 * C235 - C7744 * C221 - C31623 * C236 + C32785 * C251 +
            C31604 * C233 - C7746 * C220 - C31604 * C234 + C32498 * C250) *
               C32593 * C7740 +
           (C31623 * C237 - C7744 * C222 - C31623 * C238 + C32785 * C252 +
            C31604 * C239 - C7746 * C223 - C31604 * C240 + C32498 * C253) *
               C32593 * C7741 +
           (C31623 * C884 - C7744 * C876 - C31623 * C885 + C32785 * C894 +
            C31604 * C882 - C7746 * C875 - C31604 * C883 + C32498 * C893) *
               C32593 * C32812) *
              C32551 * C32537 * C110 -
          ((C31604 * C880 - C7746 * C874 - C31604 * C881 + C32498 * C892 +
            C31623 * C882 - C7744 * C875 - C31623 * C883 + C32785 * C893) *
               C32593 * C32812 +
           (C31604 * C241 - C7746 * C224 - C31604 * C242 + C32498 * C254 +
            C31623 * C239 - C7744 * C223 - C31623 * C240 + C32785 * C253) *
               C32593 * C7741 +
           (C31604 * C231 - C7746 * C219 - C31604 * C232 + C32498 * C249 +
            C31623 * C233 - C7744 * C220 - C31623 * C234 + C32785 * C250) *
               C32593 * C7740 +
           (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
            C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
               C32593 * C7739) *
              C32551 * C32537 * C111 +
          ((C31623 * C134 - C7744 * C125 - C31623 * C135 + C32785 * C146 +
            C31604 * C136 - C7746 * C126 - C31604 * C137 + C32498 * C147) *
               C32593 * C7739 +
           (C31623 * C231 - C7744 * C219 - C31623 * C232 + C32785 * C249 +
            C31604 * C229 - C7746 * C218 - C31604 * C230 + C32498 * C248) *
               C32593 * C7740 +
           (C31623 * C241 - C7744 * C224 - C31623 * C242 + C32785 * C254 +
            C31604 * C243 - C7746 * C225 - C31604 * C244 + C32498 * C255) *
               C32593 * C7741 +
           (C31623 * C880 - C7744 * C874 - C31623 * C881 + C32785 * C892 +
            C31604 * C1257 - C7746 * C1256 - C31604 * C1258 + C32498 * C1259) *
               C32593 * C32812) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
            C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
               C32593 * C7739 +
           (C7894 + C7895) * C32593 * C7740 + C7904 * C7741 + C7905 * C32812) *
              C32551 * C213 -
          ((C7900 + C7901) * C32593 * C32812 +
           (C7899 + C7898) * C32593 * C7741 + (C7897 + C7896) * C32593 * C7740 +
           (C7895 + C7894) * C32593 * C7739) *
              C32551 * C214 +
          (C7904 * C7739 + C7905 * C7740 + (C7901 + C7900) * C32593 * C7741 +
           (C31623 * C6284 - C7744 * C6282 - C31623 * C6285 + C32785 * C6288 +
            C31604 * C6487 - C7746 * C6486 - C31604 * C6488 + C32498 * C6489) *
               C32593 * C32812) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
            C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
               C32593 * C7739 +
           (C7894 + C7895) * C32593 * C7740 + C7904 * C7741 + C7905 * C32812) *
              C319 -
          ((C31604 * C1603 - C7746 * C1599 - C31604 * C1604 + C32498 * C1608 +
            C31623 * C1601 - C7744 * C1598 - C31623 * C1602 + C32785 * C1607) *
               C32593 * C32812 +
           (C31604 * C1085 - C7746 * C1075 - C31604 * C1086 + C32498 * C1102 +
            C31623 * C1087 - C7744 * C1076 - C31623 * C1088 + C32785 * C1103) *
               C32593 * C7741 +
           (C31604 * C629 - C7746 * C623 - C31604 * C630 + C32498 * C638 +
            C31623 * C627 - C7744 * C622 - C31623 * C628 + C32785 * C637) *
               C32593 * C7740 +
           (C31604 * C338 - C7746 * C325 - C31604 * C339 + C32498 * C355 +
            C31623 * C340 - C7744 * C326 - C31623 * C341 + C32785 * C356) *
               C32593 * C7739) *
              C320 +
          ((C31623 * C342 - C7744 * C327 - C31623 * C343 + C32785 * C357 +
            C31604 * C344 - C7746 * C328 - C31604 * C345 + C32498 * C358) *
               C32593 * C7739 +
           (C31623 * C1089 - C7744 * C1077 - C31623 * C1090 + C32785 * C1104 +
            C31604 * C1091 - C7746 * C1078 - C31604 * C1092 + C32498 * C1105) *
               C32593 * C7740 +
           (C31623 * C1095 - C7744 * C1080 - C31623 * C1096 + C32785 * C1107 +
            C31604 * C1097 - C7746 * C1081 - C31604 * C1098 + C32498 * C1108) *
               C32593 * C7741 +
           (C31623 * C6397 - C7744 * C6393 - C31623 * C6398 + C32785 * C6402 +
            C31604 * C7282 - C7746 * C7281 - C31604 * C7283 + C32498 * C7284) *
               C32593 * C32812) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C10425 +
            (C8968 + C8969) * C10426 + (C8975 + C8974) * C32838) *
               C32804 +
           ((C7894 + C7895) * C10425 + C9600 * C10426 +
            (C8973 + C8972) * C32838) *
               C32640) *
              C32551 * C32537 * C110 -
          (((C31604 * C1093 - C7746 * C1079 - C31604 * C1094 + C32498 * C1106 +
             C31623 * C1091 - C7744 * C1078 - C31623 * C1092 + C32785 * C1105) *
                C32838 +
            (C9195 + C9194) * C10426 + (C8171 + C8170) * C10425) *
               C32640 +
           ((C31604 * C346 - C7746 * C329 - C31604 * C347 + C32498 * C359 +
             C31623 * C344 - C7744 * C328 - C31623 * C345 + C32785 * C358) *
                C32838 +
            (C9405 + C9404) * C10426 +
            (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
             C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
                C10425) *
               C32804) *
              C32551 * C32537 * C111 +
          (((C31623 * C134 - C7744 * C125 - C31623 * C135 + C32785 * C146 +
             C31604 * C136 - C7746 * C126 - C31604 * C137 + C32498 * C147) *
                C10425 +
            (C31623 * C336 - C7744 * C324 - C31623 * C337 + C32785 * C354 +
             C31604 * C334 - C7746 * C323 - C31604 * C335 + C32498 * C353) *
                C10426 +
            (C31623 * C346 - C7744 * C329 - C31623 * C347 + C32785 * C359 +
             C31604 * C348 - C7746 * C330 - C31604 * C349 + C32498 * C360) *
                C32838) *
               C32804 +
           ((C31623 * C231 - C7744 * C219 - C31623 * C232 + C32785 * C249 +
             C31604 * C229 - C7746 * C218 - C31604 * C230 + C32498 * C248) *
                C10425 +
            (C31623 * C631 - C7744 * C624 - C31623 * C632 + C32785 * C639 +
             C31604 * C633 - C7746 * C625 - C31604 * C634 + C32498 * C640) *
                C10426 +
            (C31623 * C1093 - C7744 * C1079 - C31623 * C1094 + C32785 * C1106 +
             C31604 * C2221 - C7746 * C2220 - C31604 * C2222 + C32498 * C2223) *
                C32838) *
               C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C10425 +
            (C8968 + C8969) * C10426 + (C8975 + C8974) * C32838) *
               C32804 +
           ((C7894 + C7895) * C10425 + C9600 * C10426 +
            (C8973 + C8972) * C32838) *
               C32640) *
              C32551 * C213 -
          (((C8970 + C8971) * C32838 + C9601 * C10426 +
            (C7897 + C7896) * C10425) *
               C32640 +
           ((C8972 + C8973) * C32838 + C9602 * C10426 +
            (C7895 + C7894) * C10425) *
               C32804) *
              C32551 * C214 +
          ((C7902 * C10425 + C8771 * C10426 + (C8971 + C8970) * C32838) *
               C32804 +
           (C7903 * C10425 + (C8473 + C8472) * C10426 +
            (C31623 * C6397 - C7744 * C6393 - C31623 * C6398 + C32785 * C6402 +
             C31604 * C7282 - C7746 * C7281 - C31604 * C7283 + C32498 * C7284) *
                C32838) *
               C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C10425 +
            (C8968 + C8969) * C10426 + C12936 * C32838) *
               C32804 +
           ((C7894 + C7895) * C10425 + C9600 * C10426 + C12937 * C32838) *
               C32640) *
              C319 -
          (((C12962 + C12963) * C32838 + (C8972 + C8973) * C10426 +
            C9602 * C10425) *
               C32640 +
           ((C12964 + C12965) * C32838 + (C8974 + C8975) * C10426 +
            (C8969 + C8968) * C10425) *
               C32804) *
              C320 +
          ((C12936 * C10425 + (C12965 + C12964) * C10426 +
            (C31623 * C1997 - C7744 * C1988 - C31623 * C1998 + C32785 * C2006 +
             C31604 * C1999 - C7746 * C1989 - C31604 * C2000 + C32498 * C2007) *
                C32838) *
               C32804 +
           (C12937 * C10425 + (C12963 + C12962) * C10426 +
            (C31623 * C7093 - C7744 * C7089 - C31623 * C7094 + C32785 * C7098 +
             C31604 * C12301 - C7746 * C12300 - C31604 * C12302 +
             C32498 * C12303) *
                C32838) *
               C32640) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C32593 * C7739 +
            (C7894 + C7895) * C32593 * C7740 + C7904 * C7741 + C7905 * C32812) *
               C534 -
           ((C31604 * C1603 - C7746 * C1599 - C31604 * C1604 + C32498 * C1608 +
             C31623 * C1601 - C7744 * C1598 - C31623 * C1602 + C32785 * C1607) *
                C32593 * C32812 +
            (C31604 * C1085 - C7746 * C1075 - C31604 * C1086 + C32498 * C1102 +
             C31623 * C1087 - C7744 * C1076 - C31623 * C1088 + C32785 * C1103) *
                C32593 * C7741 +
            (C31604 * C629 - C7746 * C623 - C31604 * C630 + C32498 * C638 +
             C31623 * C627 - C7744 * C622 - C31623 * C628 + C32785 * C637) *
                C32593 * C7740 +
            (C31604 * C338 - C7746 * C325 - C31604 * C339 + C32498 * C355 +
             C31623 * C340 - C7744 * C326 - C31623 * C341 + C32785 * C356) *
                C32593 * C7739) *
               C535) *
              C32537 * C446 +
          (((C31623 * C338 - C7744 * C325 - C31623 * C339 + C32785 * C355 +
             C31604 * C336 - C7746 * C324 - C31604 * C337 + C32498 * C354) *
                C32593 * C7739 +
            (C31623 * C629 - C7744 * C623 - C31623 * C630 + C32785 * C638 +
             C31604 * C631 - C7746 * C624 - C31604 * C632 + C32498 * C639) *
                C32593 * C7740 +
            (C31623 * C1085 - C7744 * C1075 - C31623 * C1086 + C32785 * C1102 +
             C31604 * C1083 - C7746 * C1074 - C31604 * C1084 + C32498 * C1101) *
                C32593 * C7741 +
            (C31623 * C1603 - C7744 * C1599 - C31623 * C1604 + C32785 * C1608 +
             C31604 * C1605 - C7746 * C1600 - C31604 * C1606 + C32498 * C1609) *
                C32593 * C32812) *
               C535 -
           ((C8175 + C8174) * C32593 * C32812 +
            (C8173 + C8172) * C32593 * C7741 +
            (C8171 + C8170) * C32593 * C7740 +
            (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
             C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
                C32593 * C7739) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
             C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
             C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
             C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
                C32593 * C32804 +
            (C2854 + C2855 + C2856 + C2857) * C32593 * C32640) *
               C534 -
           ((C2705 * C633 - C2706 * C625 - C2705 * C634 + C32803 * C640 +
             C2703 * C631 - C2704 * C624 - C2703 * C632 + C2695 * C639 +
             C2701 * C629 - C2702 * C623 - C2701 * C630 + C2694 * C638 +
             C2699 * C627 - C2700 * C622 - C2699 * C628 + C2693 * C637) *
                C32593 * C32640 +
            (C2705 * C334 - C2706 * C323 - C2705 * C335 + C32803 * C353 +
             C2703 * C336 - C2704 * C324 - C2703 * C337 + C2695 * C354 +
             C2701 * C338 - C2702 * C325 - C2701 * C339 + C2694 * C355 +
             C2699 * C340 - C2700 * C326 - C2699 * C341 + C2693 * C356) *
                C32593 * C32804) *
               C535) *
              C32537 * C446 +
          (((C2699 * C338 - C2700 * C325 - C2699 * C339 + C2693 * C355 +
             C2701 * C336 - C2702 * C324 - C2701 * C337 + C2694 * C354 +
             C2703 * C334 - C2704 * C323 - C2703 * C335 + C2695 * C353 +
             C2705 * C332 - C2706 * C322 - C2705 * C333 + C32803 * C352) *
                C32593 * C32804 +
            (C2699 * C629 - C2700 * C623 - C2699 * C630 + C2693 * C638 +
             C2701 * C631 - C2702 * C624 - C2701 * C632 + C2694 * C639 +
             C2703 * C633 - C2704 * C625 - C2703 * C634 + C2695 * C640 +
             C2705 * C635 - C2706 * C626 - C2705 * C636 + C32803 * C641) *
                C32593 * C32640) *
               C535 -
           ((C3117 + C3116 + C3115 + C3114) * C32593 * C32640 +
            (C2705 * C138 - C2706 * C127 - C2705 * C139 + C32803 * C148 +
             C2703 * C136 - C2704 * C126 - C2703 * C137 + C2695 * C147 +
             C2701 * C134 - C2702 * C125 - C2701 * C135 + C2694 * C146 +
             C2699 * C132 - C2700 * C124 - C2699 * C133 + C2693 * C145) *
                C32593 * C32804) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
              C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                 C10425 +
             (C8968 + C8969) * C10426 + C12936 * C32838) *
                C32804 +
            ((C7894 + C7895) * C10425 + C9600 * C10426 + C12937 * C32838) *
                C32640) *
               C534 -
           (((C12962 + C12963) * C32838 + (C8972 + C8973) * C10426 +
             C9602 * C10425) *
                C32640 +
            ((C12964 + C12965) * C32838 + (C8974 + C8975) * C10426 +
             (C8969 + C8968) * C10425) *
                C32804) *
               C535) *
              C32537 * C446 +
          ((((C9404 + C9405) * C10425 + (C13380 + C13381) * C10426 +
             (C31623 * C1993 - C7744 * C1986 - C31623 * C1994 + C32785 * C2004 +
              C31604 * C1991 - C7746 * C1985 - C31604 * C1992 +
              C32498 * C2003) *
                 C32838) *
                C32804 +
            ((C9194 + C9195) * C10425 + (C13172 + C13173) * C10426 +
             (C31623 * C2567 - C7744 * C2563 - C31623 * C2568 + C32785 * C2572 +
              C31604 * C2569 - C7746 * C2564 - C31604 * C2570 +
              C32498 * C2573) *
                 C32838) *
                C32640) *
               C535 -
           (((C13173 + C13172) * C32838 + (C9195 + C9194) * C10426 +
             (C8171 + C8170) * C10425) *
                C32640 +
            ((C13381 + C13380) * C32838 + (C9405 + C9404) * C10426 +
             (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
              C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
                 C10425) *
                C32804) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
            C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
            C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
            C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
               C32593 * C32804 +
           (C2854 + C2855 + C2856 + C2857) * C32593 * C32640) *
              C32551 * C213 -
          ((C2858 + C2859 + C2860 + C2861) * C32593 * C32640 +
           (C2857 + C2856 + C2855 + C2854) * C32593 * C32804) *
              C32551 * C214 +
          ((C2861 + C2860 + C2859 + C2858) * C32593 * C32804 +
           (C2699 * C884 - C2700 * C876 - C2699 * C885 + C2693 * C894 +
            C2701 * C882 - C2702 * C875 - C2701 * C883 + C2694 * C893 +
            C2703 * C880 - C2704 * C874 - C2703 * C881 + C2695 * C892 +
            C2705 * C1257 - C2706 * C1256 - C2705 * C1258 + C32803 * C1259) *
               C32593 * C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
            C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
            C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
            C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
               C32593 * C32804 +
           (C2699 * C235 - C2700 * C221 - C2699 * C236 + C2693 * C251 +
            C2701 * C233 - C2702 * C220 - C2701 * C234 + C2694 * C250 +
            C2703 * C231 - C2704 * C219 - C2703 * C232 + C2695 * C249 +
            C2705 * C229 - C2706 * C218 - C2705 * C230 + C32803 * C248) *
               C32593 * C32640) *
              C32551 * C32537 * C110 -
          ((C2705 * C227 - C2706 * C217 - C2705 * C228 + C32803 * C247 +
            C2703 * C229 - C2704 * C218 - C2703 * C230 + C2695 * C248 +
            C2701 * C231 - C2702 * C219 - C2701 * C232 + C2694 * C249 +
            C2699 * C233 - C2700 * C220 - C2699 * C234 + C2693 * C250) *
               C32593 * C32640 +
           (C2705 * C138 - C2706 * C127 - C2705 * C139 + C32803 * C148 +
            C2703 * C136 - C2704 * C126 - C2703 * C137 + C2695 * C147 +
            C2701 * C134 - C2702 * C125 - C2701 * C135 + C2694 * C146 +
            C2699 * C132 - C2700 * C124 - C2699 * C133 + C2693 * C145) *
               C32593 * C32804) *
              C32551 * C32537 * C111 +
          ((C2699 * C134 - C2700 * C125 - C2699 * C135 + C2693 * C146 +
            C2701 * C136 - C2702 * C126 - C2701 * C137 + C2694 * C147 +
            C2703 * C138 - C2704 * C127 - C2703 * C139 + C2695 * C148 +
            C2705 * C140 - C2706 * C128 - C2705 * C141 + C32803 * C149) *
               C32593 * C32804 +
           (C2699 * C231 - C2700 * C219 - C2699 * C232 + C2693 * C249 +
            C2701 * C229 - C2702 * C218 - C2701 * C230 + C2694 * C248 +
            C2703 * C227 - C2704 * C217 - C2703 * C228 + C2695 * C247 +
            C2705 * C449 - C2706 * C448 - C2705 * C450 + C32803 * C451) *
               C32593 * C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
            C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
               C32593 * C7739 +
           (C31623 * C235 - C7744 * C221 - C31623 * C236 + C32785 * C251 +
            C31604 * C233 - C7746 * C220 - C31604 * C234 + C32498 * C250) *
               C32593 * C7740 +
           (C31623 * C237 - C7744 * C222 - C31623 * C238 + C32785 * C252 +
            C31604 * C239 - C7746 * C223 - C31604 * C240 + C32498 * C253) *
               C32593 * C7741 +
           (C31623 * C884 - C7744 * C876 - C31623 * C885 + C32785 * C894 +
            C31604 * C882 - C7746 * C875 - C31604 * C883 + C32498 * C893) *
               C32593 * C32812) *
              C32551 * C32537 * C110 -
          ((C31604 * C880 - C7746 * C874 - C31604 * C881 + C32498 * C892 +
            C31623 * C882 - C7744 * C875 - C31623 * C883 + C32785 * C893) *
               C32593 * C32812 +
           (C31604 * C241 - C7746 * C224 - C31604 * C242 + C32498 * C254 +
            C31623 * C239 - C7744 * C223 - C31623 * C240 + C32785 * C253) *
               C32593 * C7741 +
           (C31604 * C231 - C7746 * C219 - C31604 * C232 + C32498 * C249 +
            C31623 * C233 - C7744 * C220 - C31623 * C234 + C32785 * C250) *
               C32593 * C7740 +
           (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
            C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
               C32593 * C7739) *
              C32551 * C32537 * C111 +
          ((C31623 * C134 - C7744 * C125 - C31623 * C135 + C32785 * C146 +
            C31604 * C136 - C7746 * C126 - C31604 * C137 + C32498 * C147) *
               C32593 * C7739 +
           (C31623 * C231 - C7744 * C219 - C31623 * C232 + C32785 * C249 +
            C31604 * C229 - C7746 * C218 - C31604 * C230 + C32498 * C248) *
               C32593 * C7740 +
           (C31623 * C241 - C7744 * C224 - C31623 * C242 + C32785 * C254 +
            C31604 * C243 - C7746 * C225 - C31604 * C244 + C32498 * C255) *
               C32593 * C7741 +
           (C31623 * C880 - C7744 * C874 - C31623 * C881 + C32785 * C892 +
            C31604 * C1257 - C7746 * C1256 - C31604 * C1258 + C32498 * C1259) *
               C32593 * C32812) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
            C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
               C32593 * C7739 +
           (C7894 + C7895) * C32593 * C7740 + C7904 * C7741 + C7905 * C32812) *
              C32551 * C213 -
          ((C7900 + C7901) * C32593 * C32812 +
           (C7899 + C7898) * C32593 * C7741 + (C7897 + C7896) * C32593 * C7740 +
           (C7895 + C7894) * C32593 * C7739) *
              C32551 * C214 +
          (C7904 * C7739 + C7905 * C7740 + (C7901 + C7900) * C32593 * C7741 +
           (C31623 * C6284 - C7744 * C6282 - C31623 * C6285 + C32785 * C6288 +
            C31604 * C6487 - C7746 * C6486 - C31604 * C6488 + C32498 * C6489) *
               C32593 * C32812) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C10425 +
            (C8968 + C8969) * C10426 + (C8975 + C8974) * C32838) *
               C32804 +
           ((C7894 + C7895) * C10425 + C9600 * C10426 +
            (C8973 + C8972) * C32838) *
               C32640) *
              C32551 * C32537 * C110 -
          (((C31604 * C1093 - C7746 * C1079 - C31604 * C1094 + C32498 * C1106 +
             C31623 * C1091 - C7744 * C1078 - C31623 * C1092 + C32785 * C1105) *
                C32838 +
            (C9195 + C9194) * C10426 + (C8171 + C8170) * C10425) *
               C32640 +
           ((C31604 * C346 - C7746 * C329 - C31604 * C347 + C32498 * C359 +
             C31623 * C344 - C7744 * C328 - C31623 * C345 + C32785 * C358) *
                C32838 +
            (C9405 + C9404) * C10426 +
            (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
             C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
                C10425) *
               C32804) *
              C32551 * C32537 * C111 +
          (((C31623 * C134 - C7744 * C125 - C31623 * C135 + C32785 * C146 +
             C31604 * C136 - C7746 * C126 - C31604 * C137 + C32498 * C147) *
                C10425 +
            (C31623 * C336 - C7744 * C324 - C31623 * C337 + C32785 * C354 +
             C31604 * C334 - C7746 * C323 - C31604 * C335 + C32498 * C353) *
                C10426 +
            (C31623 * C346 - C7744 * C329 - C31623 * C347 + C32785 * C359 +
             C31604 * C348 - C7746 * C330 - C31604 * C349 + C32498 * C360) *
                C32838) *
               C32804 +
           ((C31623 * C231 - C7744 * C219 - C31623 * C232 + C32785 * C249 +
             C31604 * C229 - C7746 * C218 - C31604 * C230 + C32498 * C248) *
                C10425 +
            (C31623 * C631 - C7744 * C624 - C31623 * C632 + C32785 * C639 +
             C31604 * C633 - C7746 * C625 - C31604 * C634 + C32498 * C640) *
                C10426 +
            (C31623 * C1093 - C7744 * C1079 - C31623 * C1094 + C32785 * C1106 +
             C31604 * C2221 - C7746 * C2220 - C31604 * C2222 + C32498 * C2223) *
                C32838) *
               C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C10425 +
            (C8968 + C8969) * C10426 + (C8975 + C8974) * C32838) *
               C32804 +
           ((C7894 + C7895) * C10425 + C9600 * C10426 +
            (C8973 + C8972) * C32838) *
               C32640) *
              C32551 * C213 -
          (((C8970 + C8971) * C32838 + C9601 * C10426 +
            (C7897 + C7896) * C10425) *
               C32640 +
           ((C8972 + C8973) * C32838 + C9602 * C10426 +
            (C7895 + C7894) * C10425) *
               C32804) *
              C32551 * C214 +
          ((C7902 * C10425 + C8771 * C10426 + (C8971 + C8970) * C32838) *
               C32804 +
           (C7903 * C10425 + (C8473 + C8472) * C10426 +
            (C31623 * C6397 - C7744 * C6393 - C31623 * C6398 + C32785 * C6402 +
             C31604 * C7282 - C7746 * C7281 - C31604 * C7283 + C32498 * C7284) *
                C32838) *
               C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C32805 +
             C7131 * C32680) *
                C7739 +
            (C9799 + C9800) * C7740 + C9807 * C7741 + C9808 * C32812) *
               C32551 * C444 -
           ((C9805 + C9806) * C32812 + (C9804 + C9803) * C7741 +
            (C9802 + C9801) * C7740 + (C9800 + C9799) * C7739) *
               C32551 * C445) *
              C446 +
          (((C10037 + C10038) * C7739 + (C10039 + C10040) * C7740 +
            (C10041 + C10049) * C7741 +
            (C6518 * C32805 +
             (C6218 * C6605 - C6219 * C6604 - C6218 * C6606 + C32488 * C6607) *
                 C32680) *
                C32812) *
               C32551 * C445 -
           ((C10049 + C10041) * C32812 + (C10040 + C10039) * C7741 +
            (C10038 + C10037) * C7740 +
            (C7482 * C32680 +
             (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                 C32805) *
                C7739) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
              C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
              C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                 C32805 +
             (C2064 + C2065 + C2066) * C32680) *
                C32804 +
            ((C953 + C954 + C955) * C32805 + (C1652 + C1651 + C1650) * C32680) *
                C32640) *
               C32551 * C444 -
           (((C1647 + C1648 + C1649) * C32680 + (C958 + C957 + C956) * C32805) *
                C32640 +
            ((C1650 + C1651 + C1652) * C32680 + (C955 + C954 + C953) * C32805) *
                C32804) *
               C32551 * C445) *
              C446 +
          ((((C1297 + C1298 + C1299) * C32805 +
             (C4826 + C4827 + C4828) * C32680) *
                C32804 +
            ((C1300 + C1301 + C1302) * C32805 +
             (C758 * C1085 - C759 * C1075 - C758 * C1086 + C752 * C1102 +
              C760 * C1083 - C761 * C1074 - C760 * C1084 + C753 * C1101 +
              C762 * C1449 - C763 * C1448 - C762 * C1450 + C32826 * C1451) *
                 C32680) *
                C32640) *
               C32551 * C445 -
           (((C4828 + C4827 + C4826) * C32680 +
             (C1299 + C1298 + C1297) * C32805) *
                C32640 +
            ((C2413 + C2412 + C2411) * C32680 +
             (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
              C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
              C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
                 C32805) *
                C32804) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C13674 +
             C7131 * C13675 + C7132 * C13676 + C7135 * C32819) *
                C32804 +
            (C14490 + C14491 + C14492 + C14493) * C32640) *
               C32551 * C444 -
           ((C14494 + C14495 + C14496 + C14497) * C32640 +
            (C14493 + C14492 + C14491 + C14490) * C32804) *
               C32551 * C445) *
              C446 +
          (((C14726 + C14727 + C14728 + C14736) * C32804 +
            (C6516 * C13674 + C7314 * C13675 + C7315 * C13676 +
             (C6218 * C7466 - C6219 * C7465 - C6218 * C7467 + C32488 * C7468) *
                 C32819) *
                C32640) *
               C32551 * C445 -
           ((C14736 + C14728 + C14727 + C14726) * C32640 +
            (C12403 * C32819 + C7483 * C13676 + C7482 * C13675 +
             (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                 C13674) *
                C32804) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C32805 +
             C7131 * C32680) *
                C7739 +
            (C9799 + C9800) * C7740 + C9807 * C7741 + C9808 * C32812) *
               C534 -
           ((C10310 + C10311) * C32812 + (C10312 + C10313) * C7741 +
            (C10314 + C10315) * C7740 +
            (C7132 * C32680 + C7131 * C32805) * C7739) *
               C535) *
              C444 +
          (((C10315 + C10314) * C7739 + (C10313 + C10312) * C7740 +
            (C10311 + C10310) * C7741 +
            (C6719 * C32805 +
             (C6218 * C6399 - C6219 * C6394 - C6218 * C6400 + C32488 * C6403) *
                 C32680) *
                C32812) *
               C535 -
           ((C9805 + C9806) * C32812 + (C9804 + C9803) * C7741 +
            (C9802 + C9801) * C7740 + (C9800 + C9799) * C7739) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
              C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
              C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                 C32805 +
             (C2064 + C2065 + C2066) * C32680) *
                C32804 +
            ((C953 + C954 + C955) * C32805 + C5219 * C32680) * C32640) *
               C534 -
           (((C2595 + C2594 + C2593) * C32680 + C5220 * C32805) * C32640 +
            ((C2069 + C2068 + C2067) * C32680 +
             (C2066 + C2065 + C2064) * C32805) *
                C32804) *
               C535) *
              C444 +
          (((C5219 * C32805 + (C2593 + C2594 + C2595) * C32680) * C32804 +
            ((C1649 + C1648 + C1647) * C32805 +
             (C758 * C1095 - C759 * C1080 - C758 * C1096 + C752 * C1107 +
              C760 * C1097 - C761 * C1081 - C760 * C1098 + C753 * C1108 +
              C762 * C1099 - C763 * C1082 - C762 * C1100 + C32826 * C1109) *
                 C32680) *
                C32640) *
               C535 -
           (((C1647 + C1648 + C1649) * C32680 + (C958 + C957 + C956) * C32805) *
                C32640 +
            (C5220 * C32680 + (C955 + C954 + C953) * C32805) * C32804) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C13674 +
             C7131 * C13675 + C7132 * C13676 + C7135 * C32819) *
                C32804 +
            (C14490 + C14491 + C14492 + C14493) * C32640) *
               C534 -
           ((C14997 + C14998 + C14999 + C15000) * C32640 +
            (C12217 * C32819 + C7135 * C13676 + C7132 * C13675 +
             C7131 * C13674) *
                C32804) *
               C535) *
              C444 +
          (((C15000 + C14999 + C14998 + C14997) * C32804 +
            (C6721 * C13674 + C6973 * C13675 + C7133 * C13676 +
             (C6218 * C7095 - C6219 * C7090 - C6218 * C7096 + C32488 * C7099) *
                 C32819) *
                C32640) *
               C535 -
           ((C14494 + C14495 + C14496 + C14497) * C32640 +
            (C14493 + C14492 + C14491 + C14490) * C32804) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
                 C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
                 C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                    C32805 +
                (C2064 + C2065 + C2066) * C32680) *
                   C32804 +
               ((C953 + C954 + C955) * C32805 +
                (C1652 + C1651 + C1650) * C32680) *
                   C32640) *
                  C32551 * C32537 * C110 -
              (((C762 * C633 - C763 * C625 - C762 * C634 + C32826 * C640 +
                 C760 * C631 - C761 * C624 - C760 * C632 + C753 * C639 +
                 C758 * C629 - C759 * C623 - C758 * C630 + C752 * C638) *
                    C32680 +
                (C1299 + C1298 + C1297) * C32805) *
                   C32640 +
               ((C2413 + C2412 + C2411) * C32680 +
                (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
                 C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
                 C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
                    C32805) *
                   C32804) *
                  C32551 * C32537 * C111 +
              (((C758 * C134 - C759 * C125 - C758 * C135 + C752 * C146 +
                 C760 * C136 - C761 * C126 - C760 * C137 + C753 * C147 +
                 C762 * C138 - C763 * C127 - C762 * C139 + C32826 * C148) *
                    C32805 +
                (C758 * C336 - C759 * C324 - C758 * C337 + C752 * C354 +
                 C760 * C334 - C761 * C323 - C760 * C335 + C753 * C353 +
                 C762 * C332 - C763 * C322 - C762 * C333 + C32826 * C352) *
                    C32680) *
                   C32804 +
               ((C758 * C231 - C759 * C219 - C758 * C232 + C752 * C249 +
                 C760 * C229 - C761 * C218 - C760 * C230 + C753 * C248 +
                 C762 * C227 - C763 * C217 - C762 * C228 + C32826 * C247) *
                    C32805 +
                (C758 * C631 - C759 * C624 - C758 * C632 + C752 * C639 +
                 C760 * C633 - C761 * C625 - C760 * C634 + C753 * C640 +
                 C762 * C635 - C763 * C626 - C762 * C636 + C32826 * C641) *
                    C32680) *
                   C32640) *
                  C32551 * C32537 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
                 C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
                 C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                    C32805 +
                (C2064 + C2065 + C2066) * C32680) *
                   C32804 +
               ((C953 + C954 + C955) * C32805 +
                (C1652 + C1651 + C1650) * C32680) *
                   C32640) *
                  C32551 * C213 -
              (((C1647 + C1648 + C1649) * C32680 +
                (C958 + C957 + C956) * C32805) *
                   C32640 +
               ((C1650 + C1651 + C1652) * C32680 +
                (C955 + C954 + C953) * C32805) *
                   C32804) *
                  C32551 * C214 +
              ((C963 * C32805 + (C1649 + C1648 + C1647) * C32680) * C32804 +
               ((C961 + C960 + C959) * C32805 +
                (C758 * C1601 - C759 * C1598 - C758 * C1602 + C752 * C1607 +
                 C760 * C1603 - C761 * C1599 - C760 * C1604 + C753 * C1608 +
                 C762 * C1605 - C763 * C1600 - C762 * C1606 + C32826 * C1609) *
                    C32680) *
                   C32640) *
                  C32551 * C215) *
             C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
             C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
             C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                C32805 +
            (C2064 + C2065 + C2066) * C32680) *
               C32804 +
           ((C953 + C954 + C955) * C32805 + (C1652 + C1651 + C1650) * C32680) *
               C32640) *
              C319 -
          (((C2595 + C2594 + C2593) * C32680 +
            (C1650 + C1651 + C1652) * C32805) *
               C32640 +
           ((C2069 + C2068 + C2067) * C32680 +
            (C2066 + C2065 + C2064) * C32805) *
               C32804) *
              C320 +
          ((C2074 * C32805 + (C2072 + C2071 + C2070) * C32680) * C32804 +
           ((C2593 + C2594 + C2595) * C32805 +
            (C758 * C2565 - C759 * C2562 - C758 * C2566 + C752 * C2571 +
             C760 * C2567 - C761 * C2563 - C760 * C2568 + C753 * C2572 +
             C762 * C2569 - C763 * C2564 - C762 * C2570 + C32826 * C2573) *
                C32680) *
               C32640) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32805 +
            C7131 * C32680) *
               C7739 +
           (C6321 * C32805 + C6722 * C32680) * C7740 +
           (C6322 * C32805 + C6721 * C32680) * C7741 +
           (C6323 * C32805 + C6720 * C32680) * C32812) *
              C32551 * C32537 * C110 -
          (((C6218 * C1603 - C6219 * C1599 - C6218 * C1604 + C32488 * C1608) *
                C32680 +
            C6517 * C32805) *
               C32812 +
           (C7314 * C32680 + C6516 * C32805) * C7741 +
           (C7312 * C32680 + C6515 * C32805) * C7740 +
           (C7482 * C32680 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C32805) *
               C7739) *
              C32551 * C32537 * C111 +
          (((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
                C32805 +
            (C6218 * C336 - C6219 * C324 - C6218 * C337 + C32488 * C354) *
                C32680) *
               C7739 +
           ((C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
                C32805 +
            (C6218 * C631 - C6219 * C624 - C6218 * C632 + C32488 * C639) *
                C32680) *
               C7740 +
           ((C6218 * C241 - C6219 * C224 - C6218 * C242 + C32488 * C254) *
                C32805 +
            (C6218 * C1083 - C6219 * C1074 - C6218 * C1084 + C32488 * C1101) *
                C32680) *
               C7741 +
           ((C6218 * C880 - C6219 * C874 - C6218 * C881 + C32488 * C892) *
                C32805 +
            (C6218 * C1605 - C6219 * C1600 - C6218 * C1606 + C32488 * C1609) *
                C32680) *
               C32812) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32805 +
            C7131 * C32680) *
               C7739 +
           (C9799 + C9800) * C7740 + C9807 * C7741 + C9808 * C32812) *
              C32551 * C213 -
          ((C9805 + C9806) * C32812 + (C9804 + C9803) * C7741 +
           (C9802 + C9801) * C7740 + (C9800 + C9799) * C7739) *
              C32551 * C214 +
          (C9807 * C7739 + C9808 * C7740 + (C9806 + C9805) * C7741 +
           (C6325 * C32805 +
            (C6218 * C6691 - C6219 * C6690 - C6218 * C6692 + C32488 * C6693) *
                C32680) *
               C32812) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32805 +
            C7131 * C32680) *
               C7739 +
           (C9799 + C9800) * C7740 + C9807 * C7741 + C9808 * C32812) *
              C319 -
          ((C6974 * C32680 + C6720 * C32805) * C32812 +
           (C6973 * C32680 + C6721 * C32805) * C7741 +
           (C6972 * C32680 + C6722 * C32805) * C7740 +
           (C7132 * C32680 + C7131 * C32805) * C7739) *
              C320 +
          ((C7132 * C32805 + C7135 * C32680) * C7739 +
           (C6972 * C32805 + C7134 * C32680) * C7740 +
           (C6973 * C32805 + C7133 * C32680) * C7741 +
           (C6974 * C32805 +
            (C6218 * C7630 - C6219 * C7629 - C6218 * C7631 + C32488 * C7632) *
                C32680) *
               C32812) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C13674 +
            C7131 * C13675 + C7132 * C13676 + C7135 * C32819) *
               C32804 +
           (C6321 * C13674 + C6722 * C13675 + C6972 * C13676 + C7134 * C32819) *
               C32640) *
              C32551 * C32537 * C110 -
          (((C6218 * C2567 - C6219 * C2563 - C6218 * C2568 + C32488 * C2572) *
                C32819 +
            C7313 * C13676 + C7312 * C13675 + C6515 * C13674) *
               C32640 +
           (C12403 * C32819 + C7483 * C13676 + C7482 * C13675 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C13674) *
               C32804) *
              C32551 * C32537 * C111 +
          (((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
                C13674 +
            (C6218 * C336 - C6219 * C324 - C6218 * C337 + C32488 * C354) *
                C13675 +
            (C6218 * C346 - C6219 * C329 - C6218 * C347 + C32488 * C359) *
                C13676 +
            (C6218 * C1991 - C6219 * C1985 - C6218 * C1992 + C32488 * C2003) *
                C32819) *
               C32804 +
           ((C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
                C13674 +
            (C6218 * C631 - C6219 * C624 - C6218 * C632 + C32488 * C639) *
                C13675 +
            (C6218 * C1093 - C6219 * C1079 - C6218 * C1094 + C32488 * C1106) *
                C13676 +
            (C6218 * C2569 - C6219 * C2564 - C6218 * C2570 + C32488 * C2573) *
                C32819) *
               C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C13674 +
            C7131 * C13675 + C7132 * C13676 + C7135 * C32819) *
               C32804 +
           (C14490 + C14491 + C14492 + C14493) * C32640) *
              C32551 * C213 -
          ((C14494 + C14495 + C14496 + C14497) * C32640 +
           (C14493 + C14492 + C14491 + C14490) * C32804) *
              C32551 * C214 +
          ((C14497 + C14496 + C14495 + C14494) * C32804 +
           (C6323 * C13674 + C6720 * C13675 + C6974 * C13676 +
            (C6218 * C7630 - C6219 * C7629 - C6218 * C7631 + C32488 * C7632) *
                C32819) *
               C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C13674 +
            C7131 * C13675 + C7132 * C13676 + C7135 * C32819) *
               C32804 +
           (C14490 + C14491 + C14492 + C14493) * C32640) *
              C319 -
          ((C12497 * C32819 + C7134 * C13676 + C6972 * C13675 +
            C6722 * C13674) *
               C32640 +
           (C12217 * C32819 + C7135 * C13676 + C7132 * C13675 +
            C7131 * C13674) *
               C32804) *
              C320 +
          ((C7132 * C13674 + C7135 * C13675 + C12217 * C13676 +
            C12218 * C32819) *
               C32804 +
           (C6972 * C13674 + C7134 * C13675 + C12497 * C13676 +
            (C6218 * C12487 - C6219 * C12486 - C6218 * C12488 +
             C32488 * C12489) *
                C32819) *
               C32640) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C32805 +
             C7131 * C32680) *
                C7739 +
            (C9799 + C9800) * C7740 + C9807 * C7741 + C9808 * C32812) *
               C534 -
           ((C6974 * C32680 + C6720 * C32805) * C32812 +
            (C6973 * C32680 + C6721 * C32805) * C7741 +
            (C6972 * C32680 + C6722 * C32805) * C7740 +
            (C7132 * C32680 + C7131 * C32805) * C7739) *
               C535) *
              C32537 * C446 +
          (((C7482 * C32805 + C7483 * C32680) * C7739 +
            (C7312 * C32805 + C7313 * C32680) * C7740 +
            (C7314 * C32805 + C7315 * C32680) * C7741 +
            (C10048 * C32805 +
             (C6218 * C7282 - C6219 * C7281 - C6218 * C7283 + C32488 * C7284) *
                 C32680) *
                C32812) *
               C535 -
           ((C10049 + C10041) * C32812 + (C10040 + C10039) * C7741 +
            (C10038 + C10037) * C7740 +
            (C7482 * C32680 +
             (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                 C32805) *
                C7739) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
              C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
              C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                 C32805 +
             (C2064 + C2065 + C2066) * C32680) *
                C32804 +
            ((C953 + C954 + C955) * C32805 + (C1652 + C1651 + C1650) * C32680) *
                C32640) *
               C534 -
           (((C2595 + C2594 + C2593) * C32680 +
             (C1650 + C1651 + C1652) * C32805) *
                C32640 +
            ((C2069 + C2068 + C2067) * C32680 +
             (C2066 + C2065 + C2064) * C32805) *
                C32804) *
               C535) *
              C32537 * C446 +
          ((((C2411 + C2412 + C2413) * C32805 +
             (C2414 + C2415 + C2416) * C32680) *
                C32804 +
            ((C4826 + C4827 + C4828) * C32805 +
             (C758 * C1091 - C759 * C1078 - C758 * C1092 + C752 * C1105 +
              C760 * C1093 - C761 * C1079 - C760 * C1094 + C753 * C1106 +
              C762 * C2221 - C763 * C2220 - C762 * C2222 + C32826 * C2223) *
                 C32680) *
                C32640) *
               C535 -
           (((C4828 + C4827 + C4826) * C32680 +
             (C1299 + C1298 + C1297) * C32805) *
                C32640 +
            ((C2413 + C2412 + C2411) * C32680 +
             (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
              C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
              C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
                 C32805) *
                C32804) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C13674 +
             C7131 * C13675 + C7132 * C13676 + C7135 * C32819) *
                C32804 +
            (C14490 + C14491 + C14492 + C14493) * C32640) *
               C534 -
           ((C12497 * C32819 + C7134 * C13676 + C6972 * C13675 +
             C6722 * C13674) *
                C32640 +
            (C12217 * C32819 + C7135 * C13676 + C7132 * C13675 +
             C7131 * C13674) *
                C32804) *
               C535) *
              C32537 * C446 +
          (((C7482 * C13674 + C7483 * C13675 + C12403 * C13676 +
             C12404 * C32819) *
                C32804 +
            (C7312 * C13674 + C7313 * C13675 + C14735 * C13676 +
             (C6218 * C12301 - C6219 * C12300 - C6218 * C12302 +
              C32488 * C12303) *
                 C32819) *
                C32640) *
               C535 -
           ((C14736 + C14728 + C14727 + C14726) * C32640 +
            (C12403 * C32819 + C7483 * C13676 + C7482 * C13675 +
             (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                 C13674) *
                C32804) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
             C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
             C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                C32805 +
            (C2064 + C2065 + C2066) * C32680) *
               C32804 +
           ((C953 + C954 + C955) * C32805 + (C1652 + C1651 + C1650) * C32680) *
               C32640) *
              C32551 * C213 -
          (((C1647 + C1648 + C1649) * C32680 + (C958 + C957 + C956) * C32805) *
               C32640 +
           ((C1650 + C1651 + C1652) * C32680 + (C955 + C954 + C953) * C32805) *
               C32804) *
              C32551 * C214 +
          ((C963 * C32805 + (C1649 + C1648 + C1647) * C32680) * C32804 +
           ((C961 + C960 + C959) * C32805 +
            (C758 * C1601 - C759 * C1598 - C758 * C1602 + C752 * C1607 +
             C760 * C1603 - C761 * C1599 - C760 * C1604 + C753 * C1608 +
             C762 * C1605 - C763 * C1600 - C762 * C1606 + C32826 * C1609) *
                C32680) *
               C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
             C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
             C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                C32805 +
            (C2064 + C2065 + C2066) * C32680) *
               C32804 +
           ((C953 + C954 + C955) * C32805 + (C1652 + C1651 + C1650) * C32680) *
               C32640) *
              C32551 * C32537 * C110 -
          (((C762 * C633 - C763 * C625 - C762 * C634 + C32826 * C640 +
             C760 * C631 - C761 * C624 - C760 * C632 + C753 * C639 +
             C758 * C629 - C759 * C623 - C758 * C630 + C752 * C638) *
                C32680 +
            (C1299 + C1298 + C1297) * C32805) *
               C32640 +
           ((C2413 + C2412 + C2411) * C32680 +
            (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
             C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
             C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
                C32805) *
               C32804) *
              C32551 * C32537 * C111 +
          (((C758 * C134 - C759 * C125 - C758 * C135 + C752 * C146 +
             C760 * C136 - C761 * C126 - C760 * C137 + C753 * C147 +
             C762 * C138 - C763 * C127 - C762 * C139 + C32826 * C148) *
                C32805 +
            (C758 * C336 - C759 * C324 - C758 * C337 + C752 * C354 +
             C760 * C334 - C761 * C323 - C760 * C335 + C753 * C353 +
             C762 * C332 - C763 * C322 - C762 * C333 + C32826 * C352) *
                C32680) *
               C32804 +
           ((C758 * C231 - C759 * C219 - C758 * C232 + C752 * C249 +
             C760 * C229 - C761 * C218 - C760 * C230 + C753 * C248 +
             C762 * C227 - C763 * C217 - C762 * C228 + C32826 * C247) *
                C32805 +
            (C758 * C631 - C759 * C624 - C758 * C632 + C752 * C639 +
             C760 * C633 - C761 * C625 - C760 * C634 + C753 * C640 +
             C762 * C635 - C763 * C626 - C762 * C636 + C32826 * C641) *
                C32680) *
               C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32805 +
            C7131 * C32680) *
               C7739 +
           (C6321 * C32805 + C6722 * C32680) * C7740 +
           (C6322 * C32805 + C6721 * C32680) * C7741 +
           (C6323 * C32805 + C6720 * C32680) * C32812) *
              C32551 * C32537 * C110 -
          (((C6218 * C1603 - C6219 * C1599 - C6218 * C1604 + C32488 * C1608) *
                C32680 +
            C6517 * C32805) *
               C32812 +
           (C7314 * C32680 + C6516 * C32805) * C7741 +
           (C7312 * C32680 + C6515 * C32805) * C7740 +
           (C7482 * C32680 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C32805) *
               C7739) *
              C32551 * C32537 * C111 +
          (((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
                C32805 +
            (C6218 * C336 - C6219 * C324 - C6218 * C337 + C32488 * C354) *
                C32680) *
               C7739 +
           ((C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
                C32805 +
            (C6218 * C631 - C6219 * C624 - C6218 * C632 + C32488 * C639) *
                C32680) *
               C7740 +
           ((C6218 * C241 - C6219 * C224 - C6218 * C242 + C32488 * C254) *
                C32805 +
            (C6218 * C1083 - C6219 * C1074 - C6218 * C1084 + C32488 * C1101) *
                C32680) *
               C7741 +
           ((C6218 * C880 - C6219 * C874 - C6218 * C881 + C32488 * C892) *
                C32805 +
            (C6218 * C1605 - C6219 * C1600 - C6218 * C1606 + C32488 * C1609) *
                C32680) *
               C32812) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32805 +
            C7131 * C32680) *
               C7739 +
           (C9799 + C9800) * C7740 + C9807 * C7741 + C9808 * C32812) *
              C32551 * C213 -
          ((C9805 + C9806) * C32812 + (C9804 + C9803) * C7741 +
           (C9802 + C9801) * C7740 + (C9800 + C9799) * C7739) *
              C32551 * C214 +
          (C9807 * C7739 + C9808 * C7740 + (C9806 + C9805) * C7741 +
           (C6325 * C32805 +
            (C6218 * C6691 - C6219 * C6690 - C6218 * C6692 + C32488 * C6693) *
                C32680) *
               C32812) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C13674 +
            C7131 * C13675 + C7132 * C13676 + C7135 * C32819) *
               C32804 +
           (C6321 * C13674 + C6722 * C13675 + C6972 * C13676 + C7134 * C32819) *
               C32640) *
              C32551 * C32537 * C110 -
          (((C6218 * C2567 - C6219 * C2563 - C6218 * C2568 + C32488 * C2572) *
                C32819 +
            C7313 * C13676 + C7312 * C13675 + C6515 * C13674) *
               C32640 +
           (C12403 * C32819 + C7483 * C13676 + C7482 * C13675 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C13674) *
               C32804) *
              C32551 * C32537 * C111 +
          (((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
                C13674 +
            (C6218 * C336 - C6219 * C324 - C6218 * C337 + C32488 * C354) *
                C13675 +
            (C6218 * C346 - C6219 * C329 - C6218 * C347 + C32488 * C359) *
                C13676 +
            (C6218 * C1991 - C6219 * C1985 - C6218 * C1992 + C32488 * C2003) *
                C32819) *
               C32804 +
           ((C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
                C13674 +
            (C6218 * C631 - C6219 * C624 - C6218 * C632 + C32488 * C639) *
                C13675 +
            (C6218 * C1093 - C6219 * C1079 - C6218 * C1094 + C32488 * C1106) *
                C13676 +
            (C6218 * C2569 - C6219 * C2564 - C6218 * C2570 + C32488 * C2573) *
                C32819) *
               C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C13674 +
            C7131 * C13675 + C7132 * C13676 + C7135 * C32819) *
               C32804 +
           (C14490 + C14491 + C14492 + C14493) * C32640) *
              C32551 * C213 -
          ((C14494 + C14495 + C14496 + C14497) * C32640 +
           (C14493 + C14492 + C14491 + C14490) * C32804) *
              C32551 * C214 +
          ((C14497 + C14496 + C14495 + C14494) * C32804 +
           (C6323 * C13674 + C6720 * C13675 + C6974 * C13676 +
            (C6218 * C7630 - C6219 * C7629 - C6218 * C7631 + C32488 * C7632) *
                C32819) *
               C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
                C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
                C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
                C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
                C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
                   C32593 * C32581 * C32551 * C444 -
               (C121 * C227 - C122 * C217 - C121 * C228 + C105 * C247 +
                C119 * C229 - C120 * C218 - C119 * C230 + C104 * C248 +
                C117 * C231 - C118 * C219 - C117 * C232 + C103 * C249 +
                C115 * C233 - C116 * C220 - C115 * C234 + C102 * C250 +
                C113 * C235 - C114 * C221 - C113 * C236 + C101 * C251) *
                   C32593 * C32581 * C32551 * C445) *
                  C446 +
              ((C113 * C233 - C114 * C220 - C113 * C234 + C101 * C250 +
                C115 * C231 - C116 * C219 - C115 * C232 + C102 * C249 +
                C117 * C229 - C118 * C218 - C117 * C230 + C103 * C248 +
                C119 * C227 - C120 * C217 - C119 * C228 + C104 * C247 +
                C121 * C449 - C122 * C448 - C121 * C450 + C105 * C451) *
                   C32593 * C32581 * C32551 * C445 -
               (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
                C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
                C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
                C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
                C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
                   C32593 * C32581 * C32551 * C444) *
                  C447) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
                 C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
                 C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                    C32593 * C32867 +
                (C953 + C954 + C955) * C32593 * C32855 + C964 * C32835) *
                   C32551 * C444 -
               ((C959 + C960 + C961) * C32593 * C32835 +
                (C958 + C957 + C956) * C32593 * C32855 +
                (C955 + C954 + C953) * C32593 * C32867) *
                   C32551 * C445) *
                  C446 +
              (((C1297 + C1298 + C1299) * C32593 * C32867 +
                (C1300 + C1301 + C1302) * C32593 * C32855 +
                (C758 * C882 - C759 * C875 - C758 * C883 + C752 * C893 +
                 C760 * C880 - C761 * C874 - C760 * C881 + C753 * C892 +
                 C762 * C1257 - C763 * C1256 - C762 * C1258 + C32826 * C1259) *
                    C32593 * C32835) *
                   C32551 * C445 -
               ((C1302 + C1301 + C1300) * C32593 * C32835 +
                (C1299 + C1298 + C1297) * C32593 * C32855 +
                (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
                 C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
                 C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
                    C32593 * C32867) *
                   C32551 * C444) *
                  C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
             C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
             C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                C32868 +
            (C2064 + C2065 + C2066) * C32857 + C2074 * C32838) *
               C32581 * C32551 * C444 -
           ((C762 * C1093 - C763 * C1079 - C762 * C1094 + C32826 * C1106 +
             C760 * C1091 - C761 * C1078 - C760 * C1092 + C753 * C1105 +
             C758 * C1089 - C759 * C1077 - C758 * C1090 + C752 * C1104) *
                C32838 +
            (C1650 + C1651 + C1652) * C32857 + (C955 + C954 + C953) * C32868) *
               C32581 * C32551 * C445) *
              C446 +
          (((C1297 + C1298 + C1299) * C32868 +
            (C758 * C629 - C759 * C623 - C758 * C630 + C752 * C638 +
             C760 * C631 - C761 * C624 - C760 * C632 + C753 * C639 +
             C762 * C633 - C763 * C625 - C762 * C634 + C32826 * C640) *
                C32857 +
            (C758 * C1091 - C759 * C1078 - C758 * C1092 + C752 * C1105 +
             C760 * C1093 - C761 * C1079 - C760 * C1094 + C753 * C1106 +
             C762 * C2221 - C763 * C2220 - C762 * C2222 + C32826 * C2223) *
                C32838) *
               C32581 * C32551 * C445 -
           ((C762 * C348 - C763 * C330 - C762 * C349 + C32826 * C360 +
             C760 * C346 - C761 * C329 - C760 * C347 + C753 * C359 +
             C758 * C344 - C759 * C328 - C758 * C345 + C752 * C358) *
                C32838 +
            (C762 * C334 - C763 * C323 - C762 * C335 + C32826 * C353 +
             C760 * C336 - C761 * C324 - C760 * C337 + C753 * C354 +
             C758 * C338 - C759 * C325 - C758 * C339 + C752 * C355) *
                C32857 +
            (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
             C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
             C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
                C32868) *
               C32581 * C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
             C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
             C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                C32593 * C5333 +
            (C5507 + C5508 + C5509) * C32593 * C5334 + C5518 * C32835) *
               C32551 * C444 -
           ((C5513 + C5514 + C5515) * C32593 * C32835 +
            (C5512 + C5511 + C5510) * C32593 * C5334 +
            (C5509 + C5508 + C5507) * C32593 * C5333) *
               C32551 * C445) *
              C446 +
          (((C5811 + C5812 + C5813) * C32593 * C5333 +
            (C5814 + C5815 + C5816) * C32593 * C5334 +
            (C5336 * C882 - C5337 * C875 - C5336 * C883 + C32864 * C893 +
             C5338 * C880 - C5339 * C874 - C5338 * C881 + C32851 * C892 +
             C5340 * C1257 - C5341 * C1256 - C5340 * C1258 + C32826 * C1259) *
                C32593 * C32835) *
               C32551 * C445 -
           ((C5816 + C5815 + C5814) * C32593 * C32835 +
            (C5813 + C5812 + C5811) * C32593 * C5334 +
            (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
             C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
             C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
                C32593 * C5333) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32593 * C6213 +
            C6326 * C6214 + C6327 * C6215 + C6328 * C6216 + C6329 * C6217) *
               C32551 * C444 -
           (C6330 * C6217 + C6329 * C6216 + C6328 * C6215 + C6327 * C6214 +
            C6326 * C6213) *
               C32551 * C445) *
              C446 +
          ((C6519 * C6213 + C6520 * C6214 + C6521 * C6215 + C6522 * C6216 +
            (C6218 * C6487 - C6219 * C6486 - C6218 * C6488 + C32488 * C6489) *
                C32593 * C6217) *
               C32551 * C445 -
           (C6522 * C6217 + C6521 * C6216 + C6520 * C6215 + C6519 * C6214 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C32593 * C6213) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C32868 +
             C7131 * C32857 + C7132 * C32838) *
                C5333 +
            (C6947 + C6948 + C6975) * C5334 + C6978 * C32835) *
               C32551 * C444 -
           ((C6977 + C6963 + C6964) * C32835 + (C6976 + C6954 + C6953) * C5334 +
            (C6975 + C6948 + C6947) * C5333) *
               C32551 * C445) *
              C446 +
          (((C7286 + C7316 + C7317) * C5333 + (C7295 + C7318 + C7319) * C5334 +
            (C6517 * C32868 +
             (C6218 * C1603 - C6219 * C1599 - C6218 * C1604 + C32488 * C1608) *
                 C32857 +
             (C6218 * C7282 - C6219 * C7281 - C6218 * C7283 + C32488 * C7284) *
                 C32838) *
                C32835) *
               C32551 * C445 -
           ((C7319 + C7318 + C7295) * C32835 + (C7317 + C7316 + C7286) * C5334 +
            ((C6218 * C344 - C6219 * C328 - C6218 * C345 + C32488 * C358) *
                 C32838 +
             (C6218 * C338 - C6219 * C325 - C6218 * C339 + C32488 * C355) *
                 C32857 +
             (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                 C32868) *
                C5333) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
             C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
             C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                C10425 +
            (C10703 + C10704 + C10705) * C10426 + C10713 * C32838) *
               C32581 * C32551 * C444 -
           ((C5340 * C1093 - C5341 * C1079 - C5340 * C1094 + C32826 * C1106 +
             C5338 * C1091 - C5339 * C1078 - C5338 * C1092 + C32851 * C1105 +
             C5336 * C1089 - C5337 * C1077 - C5336 * C1090 + C32864 * C1104) *
                C32838 +
            (C6148 + C6149 + C6150) * C10426 +
            (C5509 + C5508 + C5507) * C10425) *
               C32581 * C32551 * C445) *
              C446 +
          (((C5811 + C5812 + C5813) * C10425 +
            (C5336 * C629 - C5337 * C623 - C5336 * C630 + C32864 * C638 +
             C5338 * C631 - C5339 * C624 - C5338 * C632 + C32851 * C639 +
             C5340 * C633 - C5341 * C625 - C5340 * C634 + C32826 * C640) *
                C10426 +
            (C5336 * C1091 - C5337 * C1078 - C5336 * C1092 + C32864 * C1105 +
             C5338 * C1093 - C5339 * C1079 - C5338 * C1094 + C32851 * C1106 +
             C5340 * C2221 - C5341 * C2220 - C5340 * C2222 + C32826 * C2223) *
                C32838) *
               C32581 * C32551 * C445 -
           ((C5340 * C348 - C5341 * C330 - C5340 * C349 + C32826 * C360 +
             C5338 * C346 - C5339 * C329 - C5338 * C347 + C32851 * C359 +
             C5336 * C344 - C5337 * C328 - C5336 * C345 + C32864 * C358) *
                C32838 +
            (C5340 * C334 - C5341 * C323 - C5340 * C335 + C32826 * C353 +
             C5338 * C336 - C5339 * C324 - C5338 * C337 + C32851 * C354 +
             C5336 * C338 - C5337 * C325 - C5336 * C339 + C32864 * C355) *
                C10426 +
            (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
             C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
             C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
                C10425) *
               C32581 * C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C10425 +
             C7131 * C10426 + C7132 * C32838) *
                C32867 +
            (C11435 + C11436 + C11437) * C32855 + C11445 * C32835) *
               C32551 * C444 -
           ((C11441 + C11442 + C11443) * C32835 +
            (C11440 + C11439 + C11438) * C32855 +
            (C11437 + C11436 + C11435) * C32867) *
               C32551 * C445) *
              C446 +
          (((C11702 + C11703 + C11704) * C32867 +
            (C11705 + C11706 + C11707) * C32855 +
            (C6517 * C10425 + C10048 * C10426 +
             (C6218 * C7282 - C6219 * C7281 - C6218 * C7283 + C32488 * C7284) *
                 C32838) *
                C32835) *
               C32551 * C445 -
           ((C11707 + C11706 + C11705) * C32835 +
            (C11704 + C11703 + C11702) * C32855 +
            (C7483 * C32838 + C7482 * C10426 +
             (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                 C10425) *
                C32867) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C12067 +
            C7131 * C12068 + C7132 * C12069 + C7135 * C12070 +
            C12217 * C12071) *
               C32581 * C32551 * C444 -
           ((C6218 * C7093 - C6219 * C7089 - C6218 * C7094 + C32488 * C7098) *
                C12071 +
            C7134 * C12070 + C6972 * C12069 + C6722 * C12068 + C6321 * C12067) *
               C32581 * C32551 * C445) *
              C446 +
          ((C6515 * C12067 + C7312 * C12068 + C7313 * C12069 +
            (C6218 * C2567 - C6219 * C2563 - C6218 * C2568 + C32488 * C2572) *
                C12070 +
            (C6218 * C12301 - C6219 * C12300 - C6218 * C12302 +
             C32488 * C12303) *
                C12071) *
               C32581 * C32551 * C445 -
           ((C6218 * C1999 - C6219 * C1989 - C6218 * C2000 + C32488 * C2007) *
                C12071 +
            (C6218 * C1993 - C6219 * C1986 - C6218 * C1994 + C32488 * C2004) *
                C12070 +
            C7483 * C12069 + C7482 * C12068 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C12067) *
               C32581 * C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
                C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
                C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
                C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
                C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
                   C32593 * C32581 * C534 -
               (C121 * C332 - C122 * C322 - C121 * C333 + C105 * C352 +
                C119 * C334 - C120 * C323 - C119 * C335 + C104 * C353 +
                C117 * C336 - C118 * C324 - C117 * C337 + C103 * C354 +
                C115 * C338 - C116 * C325 - C115 * C339 + C102 * C355 +
                C113 * C340 - C114 * C326 - C113 * C341 + C101 * C356) *
                   C32593 * C32581 * C535) *
                  C444 +
              ((C113 * C627 - C114 * C622 - C113 * C628 + C101 * C637 +
                C115 * C629 - C116 * C623 - C115 * C630 + C102 * C638 +
                C117 * C631 - C118 * C624 - C117 * C632 + C103 * C639 +
                C119 * C633 - C120 * C625 - C119 * C634 + C104 * C640 +
                C121 * C635 - C122 * C626 - C121 * C636 + C105 * C641) *
                   C32593 * C32581 * C535 -
               (C121 * C227 - C122 * C217 - C121 * C228 + C105 * C247 +
                C119 * C229 - C120 * C218 - C119 * C230 + C104 * C248 +
                C117 * C231 - C118 * C219 - C117 * C232 + C103 * C249 +
                C115 * C233 - C116 * C220 - C115 * C234 + C102 * C250 +
                C113 * C235 - C114 * C221 - C113 * C236 + C101 * C251) *
                   C32593 * C32581 * C534) *
                  C445) *
             C32525 +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
                 C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
                 C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                    C32593 * C32867 +
                (C953 + C954 + C955) * C32593 * C32855 + C964 * C32835) *
                   C534 -
               ((C1647 + C1648 + C1649) * C32593 * C32835 +
                (C1650 + C1651 + C1652) * C32593 * C32855 +
                (C762 * C336 - C763 * C324 - C762 * C337 + C32826 * C354 +
                 C760 * C338 - C761 * C325 - C760 * C339 + C753 * C355 +
                 C758 * C340 - C759 * C326 - C758 * C341 + C752 * C356) *
                    C32593 * C32867) *
                   C535) *
                  C444 +
              (((C1652 + C1651 + C1650) * C32593 * C32867 +
                (C1649 + C1648 + C1647) * C32593 * C32855 +
                (C758 * C1601 - C759 * C1598 - C758 * C1602 + C752 * C1607 +
                 C760 * C1603 - C761 * C1599 - C760 * C1604 + C753 * C1608 +
                 C762 * C1605 - C763 * C1600 - C762 * C1606 + C32826 * C1609) *
                    C32593 * C32835) *
                   C535 -
               ((C959 + C960 + C961) * C32593 * C32835 +
                (C958 + C957 + C956) * C32593 * C32855 +
                (C955 + C954 + C953) * C32593 * C32867) *
                   C534) *
                  C445) *
             C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
             C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
             C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                C32868 +
            (C2064 + C2065 + C2066) * C32857 + C2074 * C32838) *
               C32581 * C534 -
           ((C2070 + C2071 + C2072) * C32838 +
            (C2069 + C2068 + C2067) * C32857 +
            (C2066 + C2065 + C2064) * C32868) *
               C32581 * C535) *
              C444 +
          (((C1652 + C1651 + C1650) * C32868 +
            (C2593 + C2594 + C2595) * C32857 +
            (C758 * C2565 - C759 * C2562 - C758 * C2566 + C752 * C2571 +
             C760 * C2567 - C761 * C2563 - C760 * C2568 + C753 * C2572 +
             C762 * C2569 - C763 * C2564 - C762 * C2570 + C32826 * C2573) *
                C32838) *
               C32581 * C535 -
           ((C2595 + C2594 + C2593) * C32838 +
            (C1650 + C1651 + C1652) * C32857 + (C955 + C954 + C953) * C32868) *
               C32581 * C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
             C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
             C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                C32593 * C5333 +
            (C5507 + C5508 + C5509) * C32593 * C5334 + C5518 * C32835) *
               C534 -
           ((C6145 + C6146 + C6147) * C32593 * C32835 +
            (C6148 + C6149 + C6150) * C32593 * C5334 +
            (C5340 * C336 - C5341 * C324 - C5340 * C337 + C32826 * C354 +
             C5338 * C338 - C5339 * C325 - C5338 * C339 + C32851 * C355 +
             C5336 * C340 - C5337 * C326 - C5336 * C341 + C32864 * C356) *
                C32593 * C5333) *
               C535) *
              C444 +
          (((C6150 + C6149 + C6148) * C32593 * C5333 +
            (C6147 + C6146 + C6145) * C32593 * C5334 +
            (C5336 * C1601 - C5337 * C1598 - C5336 * C1602 + C32864 * C1607 +
             C5338 * C1603 - C5339 * C1599 - C5338 * C1604 + C32851 * C1608 +
             C5340 * C1605 - C5341 * C1600 - C5340 * C1606 + C32826 * C1609) *
                C32593 * C32835) *
               C535 -
           ((C5513 + C5514 + C5515) * C32593 * C32835 +
            (C5512 + C5511 + C5510) * C32593 * C5334 +
            (C5509 + C5508 + C5507) * C32593 * C5333) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32593 * C6213 +
            C6326 * C6214 + C6327 * C6215 + C6328 * C6216 + C6329 * C6217) *
               C534 -
           (C6723 * C6217 + C6724 * C6216 + C6725 * C6215 + C6726 * C6214 +
            (C6218 * C340 - C6219 * C326 - C6218 * C341 + C32488 * C356) *
                C32593 * C6213) *
               C535) *
              C444 +
          ((C6726 * C6213 + C6725 * C6214 + C6724 * C6215 + C6723 * C6216 +
            (C6218 * C6691 - C6219 * C6690 - C6218 * C6692 + C32488 * C6693) *
                C32593 * C6217) *
               C535 -
           (C6330 * C6217 + C6329 * C6216 + C6328 * C6215 + C6327 * C6214 +
            C6326 * C6213) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C32868 +
             C7131 * C32857 + C7132 * C32838) *
                C5333 +
            (C6947 + C6948 + C6975) * C5334 + C6978 * C32835) *
               C534 -
           ((C7634 + C7635 + C7636) * C32835 + (C7637 + C7638 + C7639) * C5334 +
            (C7135 * C32838 + C7132 * C32857 + C7131 * C32868) * C5333) *
               C535) *
              C444 +
          (((C7639 + C7638 + C7637) * C5333 + (C7636 + C7635 + C7634) * C5334 +
            (C6720 * C32868 + C6974 * C32857 +
             (C6218 * C7630 - C6219 * C7629 - C6218 * C7631 + C32488 * C7632) *
                 C32838) *
                C32835) *
               C535 -
           ((C6977 + C6963 + C6964) * C32835 + (C6976 + C6954 + C6953) * C5334 +
            (C6975 + C6948 + C6947) * C5333) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
             C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
             C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                C10425 +
            (C10703 + C10704 + C10705) * C10426 + C10713 * C32838) *
               C32581 * C534 -
           ((C10709 + C10710 + C10711) * C32838 +
            (C10708 + C10707 + C10706) * C10426 +
            (C10705 + C10704 + C10703) * C10425) *
               C32581 * C535) *
              C444 +
          (((C6150 + C6149 + C6148) * C10425 +
            (C11212 + C11213 + C11214) * C10426 +
            (C5336 * C2565 - C5337 * C2562 - C5336 * C2566 + C32864 * C2571 +
             C5338 * C2567 - C5339 * C2563 - C5338 * C2568 + C32851 * C2572 +
             C5340 * C2569 - C5341 * C2564 - C5340 * C2570 + C32826 * C2573) *
                C32838) *
               C32581 * C535 -
           ((C11214 + C11213 + C11212) * C32838 +
            (C6148 + C6149 + C6150) * C10426 +
            (C5509 + C5508 + C5507) * C10425) *
               C32581 * C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C10425 +
             C7131 * C10426 + C7132 * C32838) *
                C32867 +
            (C11435 + C11436 + C11437) * C32855 + C11445 * C32835) *
               C534 -
           ((C12000 + C12001 + C12002) * C32835 +
            (C12003 + C12004 + C12005) * C32855 +
            (C7135 * C32838 + C7132 * C10426 + C7131 * C10425) * C32867) *
               C535) *
              C444 +
          (((C12005 + C12004 + C12003) * C32867 +
            (C12002 + C12001 + C12000) * C32855 +
            (C6720 * C10425 + C6974 * C10426 +
             (C6218 * C7630 - C6219 * C7629 - C6218 * C7631 + C32488 * C7632) *
                 C32838) *
                C32835) *
               C535 -
           ((C11441 + C11442 + C11443) * C32835 +
            (C11440 + C11439 + C11438) * C32855 +
            (C11437 + C11436 + C11435) * C32867) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C12067 +
            C7131 * C12068 + C7132 * C12069 + C7135 * C12070 +
            C12217 * C12071) *
               C32581 * C534 -
           (C12218 * C12071 + C12217 * C12070 + C7135 * C12069 +
            C7132 * C12068 + C7131 * C12067) *
               C32581 * C535) *
              C444 +
          ((C6722 * C12067 + C6972 * C12068 + C7134 * C12069 + C12497 * C12070 +
            (C6218 * C12487 - C6219 * C12486 - C6218 * C12488 +
             C32488 * C12489) *
                C12071) *
               C32581 * C535 -
           (C12497 * C12071 + C7134 * C12070 + C6972 * C12069 + C6722 * C12068 +
            C6321 * C12067) *
               C32581 * C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (-0.25 * std::pow(Pi, 2.5) *
             ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
               C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
               C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
               C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
               C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
                  C32593 * C32581 * C32551 * C32537 * C110 -
              (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
               C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
               C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
               C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
               C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
                  C32593 * C32581 * C32551 * C32537 * C111 +
              (C113 * C134 - C114 * C125 - C113 * C135 + C101 * C146 +
               C115 * C136 - C116 * C126 - C115 * C137 + C102 * C147 +
               C117 * C138 - C118 * C127 - C117 * C139 + C103 * C148 +
               C119 * C140 - C120 * C128 - C119 * C141 + C104 * C149 +
               C121 * C142 - C122 * C129 - C121 * C143 + C105 * C150) *
                  C32593 * C32581 * C32551 * C32537 * C112) -
         0.25 * std::pow(Pi, 2.5) *
             ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
               C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
               C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
               C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
               C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
                  C32593 * C32581 * C32551 * C213 -
              (C121 * C227 - C122 * C217 - C121 * C228 + C105 * C247 +
               C119 * C229 - C120 * C218 - C119 * C230 + C104 * C248 +
               C117 * C231 - C118 * C219 - C117 * C232 + C103 * C249 +
               C115 * C233 - C116 * C220 - C115 * C234 + C102 * C250 +
               C113 * C235 - C114 * C221 - C113 * C236 + C101 * C251) *
                  C32593 * C32581 * C32551 * C214 +
              (C113 * C237 - C114 * C222 - C113 * C238 + C101 * C252 +
               C115 * C239 - C116 * C223 - C115 * C240 + C102 * C253 +
               C117 * C241 - C118 * C224 - C117 * C242 + C103 * C254 +
               C119 * C243 - C120 * C225 - C119 * C244 + C104 * C255 +
               C121 * C245 - C122 * C226 - C121 * C246 + C105 * C256) *
                  C32593 * C32581 * C32551 * C215) *
             C32525 +
         0.5 * std::pow(Pi, 2.5) *
             ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
               C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
               C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
               C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
               C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
                  C32593 * C32581 * C319 -
              (C121 * C332 - C122 * C322 - C121 * C333 + C105 * C352 +
               C119 * C334 - C120 * C323 - C119 * C335 + C104 * C353 +
               C117 * C336 - C118 * C324 - C117 * C337 + C103 * C354 +
               C115 * C338 - C116 * C325 - C115 * C339 + C102 * C355 +
               C113 * C340 - C114 * C326 - C113 * C341 + C101 * C356) *
                  C32593 * C32581 * C320 +
              (C113 * C342 - C114 * C327 - C113 * C343 + C101 * C357 +
               C115 * C344 - C116 * C328 - C115 * C345 + C102 * C358 +
               C117 * C346 - C118 * C329 - C117 * C347 + C103 * C359 +
               C119 * C348 - C120 * C330 - C119 * C349 + C104 * C360 +
               C121 * C350 - C122 * C331 - C121 * C351 + C105 * C361) *
                  C32593 * C32581 * C321) *
             C32537 * C32525 -
         0.25 * std::pow(Pi, 2.5) *
             (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
                C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
                C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                   C32593 * C32867 +
               (C758 * C235 - C759 * C221 - C758 * C236 + C752 * C251 +
                C760 * C233 - C761 * C220 - C760 * C234 + C753 * C250 +
                C762 * C231 - C763 * C219 - C762 * C232 + C32826 * C249) *
                   C32593 * C32855 +
               (C758 * C237 - C759 * C222 - C758 * C238 + C752 * C252 +
                C760 * C239 - C761 * C223 - C760 * C240 + C753 * C253 +
                C762 * C241 - C763 * C224 - C762 * C242 + C32826 * C254) *
                   C32593 * C32835) *
                  C32551 * C32537 * C110 -
              ((C762 * C243 - C763 * C225 - C762 * C244 + C32826 * C255 +
                C760 * C241 - C761 * C224 - C760 * C242 + C753 * C254 +
                C758 * C239 - C759 * C223 - C758 * C240 + C752 * C253) *
                   C32593 * C32835 +
               (C762 * C229 - C763 * C218 - C762 * C230 + C32826 * C248 +
                C760 * C231 - C761 * C219 - C760 * C232 + C753 * C249 +
                C758 * C233 - C759 * C220 - C758 * C234 + C752 * C250) *
                   C32593 * C32855 +
               (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
                C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
                C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
                   C32593 * C32867) *
                  C32551 * C32537 * C111 +
              ((C758 * C134 - C759 * C125 - C758 * C135 + C752 * C146 +
                C760 * C136 - C761 * C126 - C760 * C137 + C753 * C147 +
                C762 * C138 - C763 * C127 - C762 * C139 + C32826 * C148) *
                   C32593 * C32867 +
               (C758 * C231 - C759 * C219 - C758 * C232 + C752 * C249 +
                C760 * C229 - C761 * C218 - C760 * C230 + C753 * C248 +
                C762 * C227 - C763 * C217 - C762 * C228 + C32826 * C247) *
                   C32593 * C32855 +
               (C758 * C241 - C759 * C224 - C758 * C242 + C752 * C254 +
                C760 * C243 - C761 * C225 - C760 * C244 + C753 * C255 +
                C762 * C245 - C763 * C226 - C762 * C246 + C32826 * C256) *
                   C32593 * C32835) *
                  C32551 * C32537 * C112) -
         0.25 * std::pow(Pi, 2.5) *
             (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
                C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
                C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                   C32593 * C32867 +
               (C953 + C954 + C955) * C32593 * C32855 + C964 * C32835) *
                  C32551 * C213 -
              ((C959 + C960 + C961) * C32593 * C32835 +
               (C958 + C957 + C956) * C32593 * C32855 +
               (C955 + C954 + C953) * C32593 * C32867) *
                  C32551 * C214 +
              (C964 * C32867 + (C961 + C960 + C959) * C32593 * C32855 +
               (C758 * C886 - C759 * C877 - C758 * C887 + C752 * C895 +
                C760 * C888 - C761 * C878 - C760 * C889 + C753 * C896 +
                C762 * C890 - C763 * C879 - C762 * C891 + C32826 * C897) *
                   C32593 * C32835) *
                  C32551 * C215) *
             C32525 +
         0.5 * std::pow(Pi, 2.5) *
             (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
                C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
                C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                   C32593 * C32867 +
               (C953 + C954 + C955) * C32593 * C32855 + C964 * C32835) *
                  C319 -
              ((C762 * C1083 - C763 * C1074 - C762 * C1084 + C32826 * C1101 +
                C760 * C1085 - C761 * C1075 - C760 * C1086 + C753 * C1102 +
                C758 * C1087 - C759 * C1076 - C758 * C1088 + C752 * C1103) *
                   C32593 * C32835 +
               (C762 * C631 - C763 * C624 - C762 * C632 + C32826 * C639 +
                C760 * C629 - C761 * C623 - C760 * C630 + C753 * C638 +
                C758 * C627 - C759 * C622 - C758 * C628 + C752 * C637) *
                   C32593 * C32855 +
               (C762 * C336 - C763 * C324 - C762 * C337 + C32826 * C354 +
                C760 * C338 - C761 * C325 - C760 * C339 + C753 * C355 +
                C758 * C340 - C759 * C326 - C758 * C341 + C752 * C356) *
                   C32593 * C32867) *
                  C320 +
              ((C758 * C342 - C759 * C327 - C758 * C343 + C752 * C357 +
                C760 * C344 - C761 * C328 - C760 * C345 + C753 * C358 +
                C762 * C346 - C763 * C329 - C762 * C347 + C32826 * C359) *
                   C32593 * C32867 +
               (C758 * C1089 - C759 * C1077 - C758 * C1090 + C752 * C1104 +
                C760 * C1091 - C761 * C1078 - C760 * C1092 + C753 * C1105 +
                C762 * C1093 - C763 * C1079 - C762 * C1094 + C32826 * C1106) *
                   C32593 * C32855 +
               (C758 * C1095 - C759 * C1080 - C758 * C1096 + C752 * C1107 +
                C760 * C1097 - C761 * C1081 - C760 * C1098 + C753 * C1108 +
                C762 * C1099 - C763 * C1082 - C762 * C1100 + C32826 * C1109) *
                   C32593 * C32835) *
                  C321) *
             C32537 * C32525 +
         0.5 * std::pow(Pi, 2.5) *
             (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
                C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
                C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                   C32868 +
               (C758 * C340 - C759 * C326 - C758 * C341 + C752 * C356 +
                C760 * C338 - C761 * C325 - C760 * C339 + C753 * C355 +
                C762 * C336 - C763 * C324 - C762 * C337 + C32826 * C354) *
                   C32857 +
               (C758 * C342 - C759 * C327 - C758 * C343 + C752 * C357 +
                C760 * C344 - C761 * C328 - C760 * C345 + C753 * C358 +
                C762 * C346 - C763 * C329 - C762 * C347 + C32826 * C359) *
                   C32838) *
                  C32581 * C32551 * C32537 * C110 -
              ((C762 * C348 - C763 * C330 - C762 * C349 + C32826 * C360 +
                C760 * C346 - C761 * C329 - C760 * C347 + C753 * C359 +
                C758 * C344 - C759 * C328 - C758 * C345 + C752 * C358) *
                   C32838 +
               (C762 * C334 - C763 * C323 - C762 * C335 + C32826 * C353 +
                C760 * C336 - C761 * C324 - C760 * C337 + C753 * C354 +
                C758 * C338 - C759 * C325 - C758 * C339 + C752 * C355) *
                   C32857 +
               (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
                C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
                C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
                   C32868) *
                  C32581 * C32551 * C32537 * C111 +
              ((C758 * C134 - C759 * C125 - C758 * C135 + C752 * C146 +
                C760 * C136 - C761 * C126 - C760 * C137 + C753 * C147 +
                C762 * C138 - C763 * C127 - C762 * C139 + C32826 * C148) *
                   C32868 +
               (C758 * C336 - C759 * C324 - C758 * C337 + C752 * C354 +
                C760 * C334 - C761 * C323 - C760 * C335 + C753 * C353 +
                C762 * C332 - C763 * C322 - C762 * C333 + C32826 * C352) *
                   C32857 +
               (C758 * C346 - C759 * C329 - C758 * C347 + C752 * C359 +
                C760 * C348 - C761 * C330 - C760 * C349 + C753 * C360 +
                C762 * C350 - C763 * C331 - C762 * C351 + C32826 * C361) *
                   C32838) *
                  C32581 * C32551 * C32537 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
                C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
                C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                   C32868 +
               (C758 * C340 - C759 * C326 - C758 * C341 + C752 * C356 +
                C760 * C338 - C761 * C325 - C760 * C339 + C753 * C355 +
                C762 * C336 - C763 * C324 - C762 * C337 + C32826 * C354) *
                   C32857 +
               (C758 * C342 - C759 * C327 - C758 * C343 + C752 * C357 +
                C760 * C344 - C761 * C328 - C760 * C345 + C753 * C358 +
                C762 * C346 - C763 * C329 - C762 * C347 + C32826 * C359) *
                   C32838) *
                  C32581 * C32551 * C213 -
              ((C762 * C1093 - C763 * C1079 - C762 * C1094 + C32826 * C1106 +
                C760 * C1091 - C761 * C1078 - C760 * C1092 + C753 * C1105 +
                C758 * C1089 - C759 * C1077 - C758 * C1090 + C752 * C1104) *
                   C32838 +
               (C1650 + C1651 + C1652) * C32857 +
               (C955 + C954 + C953) * C32868) *
                  C32581 * C32551 * C214 +
              (C963 * C32868 + (C1649 + C1648 + C1647) * C32857 +
               (C758 * C1095 - C759 * C1080 - C758 * C1096 + C752 * C1107 +
                C760 * C1097 - C761 * C1081 - C760 * C1098 + C753 * C1108 +
                C762 * C1099 - C763 * C1082 - C762 * C1100 + C32826 * C1109) *
                   C32838) *
                  C32581 * C32551 * C215) *
             C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
            C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
            C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
               C32868 +
           (C2064 + C2065 + C2066) * C32857 + C2074 * C32838) *
              C32581 * C319 -
          ((C2070 + C2071 + C2072) * C32838 + (C2069 + C2068 + C2067) * C32857 +
           (C2066 + C2065 + C2064) * C32868) *
              C32581 * C320 +
          (C2074 * C32868 + (C2072 + C2071 + C2070) * C32857 +
           (C758 * C1997 - C759 * C1988 - C758 * C1998 + C752 * C2006 +
            C760 * C1999 - C761 * C1989 - C760 * C2000 + C753 * C2007 +
            C762 * C2001 - C763 * C1990 - C762 * C2002 + C32826 * C2008) *
               C32838) *
              C32581 * C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C32593 * C5333 +
           (C5336 * C235 - C5337 * C221 - C5336 * C236 + C32864 * C251 +
            C5338 * C233 - C5339 * C220 - C5338 * C234 + C32851 * C250 +
            C5340 * C231 - C5341 * C219 - C5340 * C232 + C32826 * C249) *
               C32593 * C5334 +
           (C5336 * C237 - C5337 * C222 - C5336 * C238 + C32864 * C252 +
            C5338 * C239 - C5339 * C223 - C5338 * C240 + C32851 * C253 +
            C5340 * C241 - C5341 * C224 - C5340 * C242 + C32826 * C254) *
               C32593 * C32835) *
              C32551 * C32537 * C110 -
          ((C5340 * C243 - C5341 * C225 - C5340 * C244 + C32826 * C255 +
            C5338 * C241 - C5339 * C224 - C5338 * C242 + C32851 * C254 +
            C5336 * C239 - C5337 * C223 - C5336 * C240 + C32864 * C253) *
               C32593 * C32835 +
           (C5340 * C229 - C5341 * C218 - C5340 * C230 + C32826 * C248 +
            C5338 * C231 - C5339 * C219 - C5338 * C232 + C32851 * C249 +
            C5336 * C233 - C5337 * C220 - C5336 * C234 + C32864 * C250) *
               C32593 * C5334 +
           (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
            C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
            C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
               C32593 * C5333) *
              C32551 * C32537 * C111 +
          ((C5336 * C134 - C5337 * C125 - C5336 * C135 + C32864 * C146 +
            C5338 * C136 - C5339 * C126 - C5338 * C137 + C32851 * C147 +
            C5340 * C138 - C5341 * C127 - C5340 * C139 + C32826 * C148) *
               C32593 * C5333 +
           (C5336 * C231 - C5337 * C219 - C5336 * C232 + C32864 * C249 +
            C5338 * C229 - C5339 * C218 - C5338 * C230 + C32851 * C248 +
            C5340 * C227 - C5341 * C217 - C5340 * C228 + C32826 * C247) *
               C32593 * C5334 +
           (C5336 * C241 - C5337 * C224 - C5336 * C242 + C32864 * C254 +
            C5338 * C243 - C5339 * C225 - C5338 * C244 + C32851 * C255 +
            C5340 * C245 - C5341 * C226 - C5340 * C246 + C32826 * C256) *
               C32593 * C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C32593 * C5333 +
           (C5507 + C5508 + C5509) * C32593 * C5334 + C5518 * C32835) *
              C32551 * C213 -
          ((C5513 + C5514 + C5515) * C32593 * C32835 +
           (C5512 + C5511 + C5510) * C32593 * C5334 +
           (C5509 + C5508 + C5507) * C32593 * C5333) *
              C32551 * C214 +
          (C5518 * C5333 + (C5515 + C5514 + C5513) * C32593 * C5334 +
           (C5336 * C886 - C5337 * C877 - C5336 * C887 + C32864 * C895 +
            C5338 * C888 - C5339 * C878 - C5338 * C889 + C32851 * C896 +
            C5340 * C890 - C5341 * C879 - C5340 * C891 + C32826 * C897) *
               C32593 * C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C32593 * C5333 +
           (C5507 + C5508 + C5509) * C32593 * C5334 + C5518 * C32835) *
              C319 -
          ((C5340 * C1083 - C5341 * C1074 - C5340 * C1084 + C32826 * C1101 +
            C5338 * C1085 - C5339 * C1075 - C5338 * C1086 + C32851 * C1102 +
            C5336 * C1087 - C5337 * C1076 - C5336 * C1088 + C32864 * C1103) *
               C32593 * C32835 +
           (C5340 * C631 - C5341 * C624 - C5340 * C632 + C32826 * C639 +
            C5338 * C629 - C5339 * C623 - C5338 * C630 + C32851 * C638 +
            C5336 * C627 - C5337 * C622 - C5336 * C628 + C32864 * C637) *
               C32593 * C5334 +
           (C5340 * C336 - C5341 * C324 - C5340 * C337 + C32826 * C354 +
            C5338 * C338 - C5339 * C325 - C5338 * C339 + C32851 * C355 +
            C5336 * C340 - C5337 * C326 - C5336 * C341 + C32864 * C356) *
               C32593 * C5333) *
              C320 +
          ((C5336 * C342 - C5337 * C327 - C5336 * C343 + C32864 * C357 +
            C5338 * C344 - C5339 * C328 - C5338 * C345 + C32851 * C358 +
            C5340 * C346 - C5341 * C329 - C5340 * C347 + C32826 * C359) *
               C32593 * C5333 +
           (C5336 * C1089 - C5337 * C1077 - C5336 * C1090 + C32864 * C1104 +
            C5338 * C1091 - C5339 * C1078 - C5338 * C1092 + C32851 * C1105 +
            C5340 * C1093 - C5341 * C1079 - C5340 * C1094 + C32826 * C1106) *
               C32593 * C5334 +
           (C5336 * C1095 - C5337 * C1080 - C5336 * C1096 + C32864 * C1107 +
            C5338 * C1097 - C5339 * C1081 - C5338 * C1098 + C32851 * C1108 +
            C5340 * C1099 - C5341 * C1082 - C5340 * C1100 + C32826 * C1109) *
               C32593 * C32835) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
               C32593 * C6213 +
           (C6218 * C235 - C6219 * C221 - C6218 * C236 + C32488 * C251) *
               C32593 * C6214 +
           (C6218 * C237 - C6219 * C222 - C6218 * C238 + C32488 * C252) *
               C32593 * C6215 +
           (C6218 * C884 - C6219 * C876 - C6218 * C885 + C32488 * C894) *
               C32593 * C6216 +
           (C6218 * C886 - C6219 * C877 - C6218 * C887 + C32488 * C895) *
               C32593 * C6217) *
              C32551 * C32537 * C110 -
          ((C6218 * C888 - C6219 * C878 - C6218 * C889 + C32488 * C896) *
               C32593 * C6217 +
           (C6218 * C882 - C6219 * C875 - C6218 * C883 + C32488 * C893) *
               C32593 * C6216 +
           (C6218 * C239 - C6219 * C223 - C6218 * C240 + C32488 * C253) *
               C32593 * C6215 +
           (C6218 * C233 - C6219 * C220 - C6218 * C234 + C32488 * C250) *
               C32593 * C6214 +
           (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
               C32593 * C6213) *
              C32551 * C32537 * C111 +
          ((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
               C32593 * C6213 +
           (C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
               C32593 * C6214 +
           (C6218 * C241 - C6219 * C224 - C6218 * C242 + C32488 * C254) *
               C32593 * C6215 +
           (C6218 * C880 - C6219 * C874 - C6218 * C881 + C32488 * C892) *
               C32593 * C6216 +
           (C6218 * C890 - C6219 * C879 - C6218 * C891 + C32488 * C897) *
               C32593 * C6217) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
               C32593 * C6213 +
           C6326 * C6214 + C6327 * C6215 + C6328 * C6216 + C6329 * C6217) *
              C32551 * C213 -
          (C6330 * C6217 + C6329 * C6216 + C6328 * C6215 + C6327 * C6214 +
           C6326 * C6213) *
              C32551 * C214 +
          (C6327 * C6213 + C6328 * C6214 + C6329 * C6215 + C6330 * C6216 +
           (C6218 * C6286 - C6219 * C6283 - C6218 * C6287 + C32488 * C6289) *
               C32593 * C6217) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
               C32593 * C6213 +
           C6326 * C6214 + C6327 * C6215 + C6328 * C6216 + C6329 * C6217) *
              C319 -
          ((C6218 * C6395 - C6219 * C6392 - C6218 * C6396 + C32488 * C6401) *
               C32593 * C6217 +
           (C6218 * C1601 - C6219 * C1598 - C6218 * C1602 + C32488 * C1607) *
               C32593 * C6216 +
           (C6218 * C1087 - C6219 * C1076 - C6218 * C1088 + C32488 * C1103) *
               C32593 * C6215 +
           (C6218 * C627 - C6219 * C622 - C6218 * C628 + C32488 * C637) *
               C32593 * C6214 +
           (C6218 * C340 - C6219 * C326 - C6218 * C341 + C32488 * C356) *
               C32593 * C6213) *
              C320 +
          ((C6218 * C342 - C6219 * C327 - C6218 * C343 + C32488 * C357) *
               C32593 * C6213 +
           (C6218 * C1089 - C6219 * C1077 - C6218 * C1090 + C32488 * C1104) *
               C32593 * C6214 +
           (C6218 * C1095 - C6219 * C1080 - C6218 * C1096 + C32488 * C1107) *
               C32593 * C6215 +
           (C6218 * C6397 - C6219 * C6393 - C6218 * C6398 + C32488 * C6402) *
               C32593 * C6216 +
           (C6218 * C6399 - C6219 * C6394 - C6218 * C6400 + C32488 * C6403) *
               C32593 * C6217) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32868 +
            (C6218 * C340 - C6219 * C326 - C6218 * C341 + C32488 * C356) *
                C32857 +
            (C6218 * C342 - C6219 * C327 - C6218 * C343 + C32488 * C357) *
                C32838) *
               C5333 +
           (C6321 * C32868 + C6722 * C32857 +
            (C6218 * C1089 - C6219 * C1077 - C6218 * C1090 + C32488 * C1104) *
                C32838) *
               C5334 +
           (C6322 * C32868 + C6721 * C32857 +
            (C6218 * C1095 - C6219 * C1080 - C6218 * C1096 + C32488 * C1107) *
                C32838) *
               C32835) *
              C32551 * C32537 * C110 -
          (((C6218 * C1097 - C6219 * C1081 - C6218 * C1098 + C32488 * C1108) *
                C32838 +
            (C6218 * C1085 - C6219 * C1075 - C6218 * C1086 + C32488 * C1102) *
                C32857 +
            C6516 * C32868) *
               C32835 +
           ((C6218 * C1091 - C6219 * C1078 - C6218 * C1092 + C32488 * C1105) *
                C32838 +
            (C6218 * C629 - C6219 * C623 - C6218 * C630 + C32488 * C638) *
                C32857 +
            C6515 * C32868) *
               C5334 +
           ((C6218 * C344 - C6219 * C328 - C6218 * C345 + C32488 * C358) *
                C32838 +
            (C6218 * C338 - C6219 * C325 - C6218 * C339 + C32488 * C355) *
                C32857 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C32868) *
               C5333) *
              C32551 * C32537 * C111 +
          (((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
                C32868 +
            (C6218 * C336 - C6219 * C324 - C6218 * C337 + C32488 * C354) *
                C32857 +
            (C6218 * C346 - C6219 * C329 - C6218 * C347 + C32488 * C359) *
                C32838) *
               C5333 +
           ((C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
                C32868 +
            (C6218 * C631 - C6219 * C624 - C6218 * C632 + C32488 * C639) *
                C32857 +
            (C6218 * C1093 - C6219 * C1079 - C6218 * C1094 + C32488 * C1106) *
                C32838) *
               C5334 +
           ((C6218 * C241 - C6219 * C224 - C6218 * C242 + C32488 * C254) *
                C32868 +
            (C6218 * C1083 - C6219 * C1074 - C6218 * C1084 + C32488 * C1101) *
                C32857 +
            (C6218 * C1099 - C6219 * C1082 - C6218 * C1100 + C32488 * C1109) *
                C32838) *
               C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32868 +
            (C6218 * C340 - C6219 * C326 - C6218 * C341 + C32488 * C356) *
                C32857 +
            (C6218 * C342 - C6219 * C327 - C6218 * C343 + C32488 * C357) *
                C32838) *
               C5333 +
           (C6947 + C6948 + C6975) * C5334 + C6978 * C32835) *
              C32551 * C213 -
          ((C6977 + C6963 + C6964) * C32835 + (C6976 + C6954 + C6953) * C5334 +
           (C6975 + C6948 + C6947) * C5333) *
              C32551 * C214 +
          (C6978 * C5333 + (C6964 + C6963 + C6977) * C5334 +
           (C6324 * C32868 + C6719 * C32857 +
            (C6218 * C6399 - C6219 * C6394 - C6218 * C6400 + C32488 * C6403) *
                C32838) *
               C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32868 +
            C7131 * C32857 + C7132 * C32838) *
               C5333 +
           (C6947 + C6948 + C6975) * C5334 + C6978 * C32835) *
              C319 -
          ((C7133 * C32838 + C6973 * C32857 + C6721 * C32868) * C32835 +
           (C7134 * C32838 + C6972 * C32857 + C6722 * C32868) * C5334 +
           (C7135 * C32838 + C7132 * C32857 + C7131 * C32868) * C5333) *
              C320 +
          ((C7132 * C32868 + C7135 * C32857 +
            (C6218 * C1997 - C6219 * C1988 - C6218 * C1998 + C32488 * C2006) *
                C32838) *
               C5333 +
           (C6972 * C32868 + C7134 * C32857 +
            (C6218 * C7093 - C6219 * C7089 - C6218 * C7094 + C32488 * C7098) *
                C32838) *
               C5334 +
           (C6973 * C32868 + C7133 * C32857 +
            (C6218 * C7095 - C6219 * C7090 - C6218 * C7096 + C32488 * C7099) *
                C32838) *
               C32835) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C10425 +
           (C5336 * C340 - C5337 * C326 - C5336 * C341 + C32864 * C356 +
            C5338 * C338 - C5339 * C325 - C5338 * C339 + C32851 * C355 +
            C5340 * C336 - C5341 * C324 - C5340 * C337 + C32826 * C354) *
               C10426 +
           (C5336 * C342 - C5337 * C327 - C5336 * C343 + C32864 * C357 +
            C5338 * C344 - C5339 * C328 - C5338 * C345 + C32851 * C358 +
            C5340 * C346 - C5341 * C329 - C5340 * C347 + C32826 * C359) *
               C32838) *
              C32581 * C32551 * C32537 * C110 -
          ((C5340 * C348 - C5341 * C330 - C5340 * C349 + C32826 * C360 +
            C5338 * C346 - C5339 * C329 - C5338 * C347 + C32851 * C359 +
            C5336 * C344 - C5337 * C328 - C5336 * C345 + C32864 * C358) *
               C32838 +
           (C5340 * C334 - C5341 * C323 - C5340 * C335 + C32826 * C353 +
            C5338 * C336 - C5339 * C324 - C5338 * C337 + C32851 * C354 +
            C5336 * C338 - C5337 * C325 - C5336 * C339 + C32864 * C355) *
               C10426 +
           (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
            C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
            C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
               C10425) *
              C32581 * C32551 * C32537 * C111 +
          ((C5336 * C134 - C5337 * C125 - C5336 * C135 + C32864 * C146 +
            C5338 * C136 - C5339 * C126 - C5338 * C137 + C32851 * C147 +
            C5340 * C138 - C5341 * C127 - C5340 * C139 + C32826 * C148) *
               C10425 +
           (C5336 * C336 - C5337 * C324 - C5336 * C337 + C32864 * C354 +
            C5338 * C334 - C5339 * C323 - C5338 * C335 + C32851 * C353 +
            C5340 * C332 - C5341 * C322 - C5340 * C333 + C32826 * C352) *
               C10426 +
           (C5336 * C346 - C5337 * C329 - C5336 * C347 + C32864 * C359 +
            C5338 * C348 - C5339 * C330 - C5338 * C349 + C32851 * C360 +
            C5340 * C350 - C5341 * C331 - C5340 * C351 + C32826 * C361) *
               C32838) *
              C32581 * C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C10425 +
           (C5336 * C340 - C5337 * C326 - C5336 * C341 + C32864 * C356 +
            C5338 * C338 - C5339 * C325 - C5338 * C339 + C32851 * C355 +
            C5340 * C336 - C5341 * C324 - C5340 * C337 + C32826 * C354) *
               C10426 +
           (C5336 * C342 - C5337 * C327 - C5336 * C343 + C32864 * C357 +
            C5338 * C344 - C5339 * C328 - C5338 * C345 + C32851 * C358 +
            C5340 * C346 - C5341 * C329 - C5340 * C347 + C32826 * C359) *
               C32838) *
              C32581 * C32551 * C213 -
          ((C5340 * C1093 - C5341 * C1079 - C5340 * C1094 + C32826 * C1106 +
            C5338 * C1091 - C5339 * C1078 - C5338 * C1092 + C32851 * C1105 +
            C5336 * C1089 - C5337 * C1077 - C5336 * C1090 + C32864 * C1104) *
               C32838 +
           (C6148 + C6149 + C6150) * C10426 +
           (C5509 + C5508 + C5507) * C10425) *
              C32581 * C32551 * C214 +
          (C5517 * C10425 + (C6147 + C6146 + C6145) * C10426 +
           (C5336 * C1095 - C5337 * C1080 - C5336 * C1096 + C32864 * C1107 +
            C5338 * C1097 - C5339 * C1081 - C5338 * C1098 + C32851 * C1108 +
            C5340 * C1099 - C5341 * C1082 - C5340 * C1100 + C32826 * C1109) *
               C32838) *
              C32581 * C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C10425 +
           (C10703 + C10704 + C10705) * C10426 + C10713 * C32838) *
              C32581 * C319 -
          ((C10709 + C10710 + C10711) * C32838 +
           (C10708 + C10707 + C10706) * C10426 +
           (C10705 + C10704 + C10703) * C10425) *
              C32581 * C320 +
          (C10713 * C10425 + (C10711 + C10710 + C10709) * C10426 +
           (C5336 * C1997 - C5337 * C1988 - C5336 * C1998 + C32864 * C2006 +
            C5338 * C1999 - C5339 * C1989 - C5338 * C2000 + C32851 * C2007 +
            C5340 * C2001 - C5341 * C1990 - C5340 * C2002 + C32826 * C2008) *
               C32838) *
              C32581 * C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C10425 +
            C7131 * C10426 + C7132 * C32838) *
               C32867 +
           (C6321 * C10425 + C6722 * C10426 + C6972 * C32838) * C32855 +
           (C6322 * C10425 + C6721 * C10426 + C6973 * C32838) * C32835) *
              C32551 * C32537 * C110 -
          ((C7315 * C32838 + C7314 * C10426 + C6516 * C10425) * C32835 +
           (C7313 * C32838 + C7312 * C10426 + C6515 * C10425) * C32855 +
           (C7483 * C32838 + C7482 * C10426 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C10425) *
               C32867) *
              C32551 * C32537 * C111 +
          (((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
                C10425 +
            (C6218 * C336 - C6219 * C324 - C6218 * C337 + C32488 * C354) *
                C10426 +
            (C6218 * C346 - C6219 * C329 - C6218 * C347 + C32488 * C359) *
                C32838) *
               C32867 +
           ((C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
                C10425 +
            (C6218 * C631 - C6219 * C624 - C6218 * C632 + C32488 * C639) *
                C10426 +
            (C6218 * C1093 - C6219 * C1079 - C6218 * C1094 + C32488 * C1106) *
                C32838) *
               C32855 +
           ((C6218 * C241 - C6219 * C224 - C6218 * C242 + C32488 * C254) *
                C10425 +
            (C6218 * C1083 - C6219 * C1074 - C6218 * C1084 + C32488 * C1101) *
                C10426 +
            (C6218 * C1099 - C6219 * C1082 - C6218 * C1100 + C32488 * C1109) *
                C32838) *
               C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C10425 +
            C7131 * C10426 + C7132 * C32838) *
               C32867 +
           (C11435 + C11436 + C11437) * C32855 + C11445 * C32835) *
              C32551 * C213 -
          ((C11441 + C11442 + C11443) * C32835 +
           (C11440 + C11439 + C11438) * C32855 +
           (C11437 + C11436 + C11435) * C32867) *
              C32551 * C214 +
          (C11445 * C32867 + (C11443 + C11442 + C11441) * C32855 +
           (C6324 * C10425 + C6719 * C10426 +
            (C6218 * C6399 - C6219 * C6394 - C6218 * C6400 + C32488 * C6403) *
                C32838) *
               C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C10425 +
            C7131 * C10426 + C7132 * C32838) *
               C32867 +
           (C11435 + C11436 + C11437) * C32855 + C11445 * C32835) *
              C319 -
          ((C7133 * C32838 + C6973 * C10426 + C6721 * C10425) * C32835 +
           (C7134 * C32838 + C6972 * C10426 + C6722 * C10425) * C32855 +
           (C7135 * C32838 + C7132 * C10426 + C7131 * C10425) * C32867) *
              C320 +
          ((C7132 * C10425 + C7135 * C10426 +
            (C6218 * C1997 - C6219 * C1988 - C6218 * C1998 + C32488 * C2006) *
                C32838) *
               C32867 +
           (C6972 * C10425 + C7134 * C10426 +
            (C6218 * C7093 - C6219 * C7089 - C6218 * C7094 + C32488 * C7098) *
                C32838) *
               C32855 +
           (C6973 * C10425 + C7133 * C10426 +
            (C6218 * C7095 - C6219 * C7090 - C6218 * C7096 + C32488 * C7099) *
                C32838) *
               C32835) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
               C12067 +
           C7131 * C12068 + C7132 * C12069 + C7135 * C12070 +
           (C6218 * C1997 - C6219 * C1988 - C6218 * C1998 + C32488 * C2006) *
               C12071) *
              C32581 * C32551 * C32537 * C110 -
          ((C6218 * C1999 - C6219 * C1989 - C6218 * C2000 + C32488 * C2007) *
               C12071 +
           (C6218 * C1993 - C6219 * C1986 - C6218 * C1994 + C32488 * C2004) *
               C12070 +
           C7483 * C12069 + C7482 * C12068 +
           (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
               C12067) *
              C32581 * C32551 * C32537 * C111 +
          ((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
               C12067 +
           (C6218 * C336 - C6219 * C324 - C6218 * C337 + C32488 * C354) *
               C12068 +
           (C6218 * C346 - C6219 * C329 - C6218 * C347 + C32488 * C359) *
               C12069 +
           (C6218 * C1991 - C6219 * C1985 - C6218 * C1992 + C32488 * C2003) *
               C12070 +
           (C6218 * C2001 - C6219 * C1990 - C6218 * C2002 + C32488 * C2008) *
               C12071) *
              C32581 * C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
               C12067 +
           C7131 * C12068 + C7132 * C12069 + C7135 * C12070 +
           (C6218 * C1997 - C6219 * C1988 - C6218 * C1998 + C32488 * C2006) *
               C12071) *
              C32581 * C32551 * C213 -
          ((C6218 * C7093 - C6219 * C7089 - C6218 * C7094 + C32488 * C7098) *
               C12071 +
           C7134 * C12070 + C6972 * C12069 + C6722 * C12068 + C6321 * C12067) *
              C32581 * C32551 * C214 +
          (C6322 * C12067 + C6721 * C12068 + C6973 * C12069 + C7133 * C12070 +
           (C6218 * C7095 - C6219 * C7090 - C6218 * C7096 + C32488 * C7099) *
               C12071) *
              C32581 * C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
               C12067 +
           C7131 * C12068 + C7132 * C12069 + C7135 * C12070 + C12217 * C12071) *
              C32581 * C319 -
          (C12218 * C12071 + C12217 * C12070 + C7135 * C12069 + C7132 * C12068 +
           C7131 * C12067) *
              C32581 * C320 +
          (C7132 * C12067 + C7135 * C12068 + C12217 * C12069 + C12218 * C12070 +
           (C6218 * C12200 - C6219 * C12197 - C6218 * C12201 +
            C32488 * C12203) *
               C12071) *
              C32581 * C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
                C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
                C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
                C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
                C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
                   C32593 * C32581 * C534 -
               (C121 * C332 - C122 * C322 - C121 * C333 + C105 * C352 +
                C119 * C334 - C120 * C323 - C119 * C335 + C104 * C353 +
                C117 * C336 - C118 * C324 - C117 * C337 + C103 * C354 +
                C115 * C338 - C116 * C325 - C115 * C339 + C102 * C355 +
                C113 * C340 - C114 * C326 - C113 * C341 + C101 * C356) *
                   C32593 * C32581 * C535) *
                  C32537 * C446 +
              ((C113 * C338 - C114 * C325 - C113 * C339 + C101 * C355 +
                C115 * C336 - C116 * C324 - C115 * C337 + C102 * C354 +
                C117 * C334 - C118 * C323 - C117 * C335 + C103 * C353 +
                C119 * C332 - C120 * C322 - C119 * C333 + C104 * C352 +
                C121 * C537 - C122 * C536 - C121 * C538 + C105 * C539) *
                   C32593 * C32581 * C535 -
               (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
                C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
                C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
                C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
                C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
                   C32593 * C32581 * C534) *
                  C32537 * C447) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
                 C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
                 C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                    C32593 * C32867 +
                (C953 + C954 + C955) * C32593 * C32855 + C964 * C32835) *
                   C534 -
               ((C762 * C1083 - C763 * C1074 - C762 * C1084 + C32826 * C1101 +
                 C760 * C1085 - C761 * C1075 - C760 * C1086 + C753 * C1102 +
                 C758 * C1087 - C759 * C1076 - C758 * C1088 + C752 * C1103) *
                    C32593 * C32835 +
                (C762 * C631 - C763 * C624 - C762 * C632 + C32826 * C639 +
                 C760 * C629 - C761 * C623 - C760 * C630 + C753 * C638 +
                 C758 * C627 - C759 * C622 - C758 * C628 + C752 * C637) *
                    C32593 * C32855 +
                (C762 * C336 - C763 * C324 - C762 * C337 + C32826 * C354 +
                 C760 * C338 - C761 * C325 - C760 * C339 + C753 * C355 +
                 C758 * C340 - C759 * C326 - C758 * C341 + C752 * C356) *
                    C32593 * C32867) *
                   C535) *
                  C32537 * C446 +
              (((C758 * C338 - C759 * C325 - C758 * C339 + C752 * C355 +
                 C760 * C336 - C761 * C324 - C760 * C337 + C753 * C354 +
                 C762 * C334 - C763 * C323 - C762 * C335 + C32826 * C353) *
                    C32593 * C32867 +
                (C758 * C629 - C759 * C623 - C758 * C630 + C752 * C638 +
                 C760 * C631 - C761 * C624 - C760 * C632 + C753 * C639 +
                 C762 * C633 - C763 * C625 - C762 * C634 + C32826 * C640) *
                    C32593 * C32855 +
                (C758 * C1085 - C759 * C1075 - C758 * C1086 + C752 * C1102 +
                 C760 * C1083 - C761 * C1074 - C760 * C1084 + C753 * C1101 +
                 C762 * C1449 - C763 * C1448 - C762 * C1450 + C32826 * C1451) *
                    C32593 * C32835) *
                   C535 -
               ((C1302 + C1301 + C1300) * C32593 * C32835 +
                (C1299 + C1298 + C1297) * C32593 * C32855 +
                (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
                 C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
                 C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
                    C32593 * C32867) *
                   C534) *
                  C32537 * C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
             C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
             C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                C32868 +
            (C2064 + C2065 + C2066) * C32857 + C2074 * C32838) *
               C32581 * C534 -
           ((C2070 + C2071 + C2072) * C32838 +
            (C2069 + C2068 + C2067) * C32857 +
            (C2066 + C2065 + C2064) * C32868) *
               C32581 * C535) *
              C32537 * C446 +
          (((C2411 + C2412 + C2413) * C32868 +
            (C2414 + C2415 + C2416) * C32857 +
            (C758 * C1993 - C759 * C1986 - C758 * C1994 + C752 * C2004 +
             C760 * C1991 - C761 * C1985 - C760 * C1992 + C753 * C2003 +
             C762 * C2371 - C763 * C2370 - C762 * C2372 + C32826 * C2373) *
                C32838) *
               C32581 * C535 -
           ((C2416 + C2415 + C2414) * C32838 +
            (C2413 + C2412 + C2411) * C32857 +
            (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
             C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
             C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
                C32868) *
               C32581 * C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
             C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
             C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                C32593 * C5333 +
            (C5507 + C5508 + C5509) * C32593 * C5334 + C5518 * C32835) *
               C534 -
           ((C5340 * C1083 - C5341 * C1074 - C5340 * C1084 + C32826 * C1101 +
             C5338 * C1085 - C5339 * C1075 - C5338 * C1086 + C32851 * C1102 +
             C5336 * C1087 - C5337 * C1076 - C5336 * C1088 + C32864 * C1103) *
                C32593 * C32835 +
            (C5340 * C631 - C5341 * C624 - C5340 * C632 + C32826 * C639 +
             C5338 * C629 - C5339 * C623 - C5338 * C630 + C32851 * C638 +
             C5336 * C627 - C5337 * C622 - C5336 * C628 + C32864 * C637) *
                C32593 * C5334 +
            (C5340 * C336 - C5341 * C324 - C5340 * C337 + C32826 * C354 +
             C5338 * C338 - C5339 * C325 - C5338 * C339 + C32851 * C355 +
             C5336 * C340 - C5337 * C326 - C5336 * C341 + C32864 * C356) *
                C32593 * C5333) *
               C535) *
              C32537 * C446 +
          (((C5336 * C338 - C5337 * C325 - C5336 * C339 + C32864 * C355 +
             C5338 * C336 - C5339 * C324 - C5338 * C337 + C32851 * C354 +
             C5340 * C334 - C5341 * C323 - C5340 * C335 + C32826 * C353) *
                C32593 * C5333 +
            (C5336 * C629 - C5337 * C623 - C5336 * C630 + C32864 * C638 +
             C5338 * C631 - C5339 * C624 - C5338 * C632 + C32851 * C639 +
             C5340 * C633 - C5341 * C625 - C5340 * C634 + C32826 * C640) *
                C32593 * C5334 +
            (C5336 * C1085 - C5337 * C1075 - C5336 * C1086 + C32864 * C1102 +
             C5338 * C1083 - C5339 * C1074 - C5338 * C1084 + C32851 * C1101 +
             C5340 * C1449 - C5341 * C1448 - C5340 * C1450 + C32826 * C1451) *
                C32593 * C32835) *
               C535 -
           ((C5816 + C5815 + C5814) * C32593 * C32835 +
            (C5813 + C5812 + C5811) * C32593 * C5334 +
            (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
             C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
             C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
                C32593 * C5333) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32593 * C6213 +
            C6326 * C6214 + C6327 * C6215 + C6328 * C6216 + C6329 * C6217) *
               C534 -
           ((C6218 * C6395 - C6219 * C6392 - C6218 * C6396 + C32488 * C6401) *
                C32593 * C6217 +
            (C6218 * C1601 - C6219 * C1598 - C6218 * C1602 + C32488 * C1607) *
                C32593 * C6216 +
            (C6218 * C1087 - C6219 * C1076 - C6218 * C1088 + C32488 * C1103) *
                C32593 * C6215 +
            (C6218 * C627 - C6219 * C622 - C6218 * C628 + C32488 * C637) *
                C32593 * C6214 +
            (C6218 * C340 - C6219 * C326 - C6218 * C341 + C32488 * C356) *
                C32593 * C6213) *
               C535) *
              C32537 * C446 +
          (((C6218 * C338 - C6219 * C325 - C6218 * C339 + C32488 * C355) *
                C32593 * C6213 +
            (C6218 * C629 - C6219 * C623 - C6218 * C630 + C32488 * C638) *
                C32593 * C6214 +
            (C6218 * C1085 - C6219 * C1075 - C6218 * C1086 + C32488 * C1102) *
                C32593 * C6215 +
            (C6218 * C1603 - C6219 * C1599 - C6218 * C1604 + C32488 * C1608) *
                C32593 * C6216 +
            (C6218 * C6605 - C6219 * C6604 - C6218 * C6606 + C32488 * C6607) *
                C32593 * C6217) *
               C535 -
           (C6522 * C6217 + C6521 * C6216 + C6520 * C6215 + C6519 * C6214 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C32593 * C6213) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C32868 +
             C7131 * C32857 + C7132 * C32838) *
                C5333 +
            (C6947 + C6948 + C6975) * C5334 + C6978 * C32835) *
               C534 -
           ((C7133 * C32838 + C6973 * C32857 + C6721 * C32868) * C32835 +
            (C7134 * C32838 + C6972 * C32857 + C6722 * C32868) * C5334 +
            (C7135 * C32838 + C7132 * C32857 + C7131 * C32868) * C5333) *
               C535) *
              C32537 * C446 +
          (((C7482 * C32868 + C7483 * C32857 +
             (C6218 * C1993 - C6219 * C1986 - C6218 * C1994 + C32488 * C2004) *
                 C32838) *
                C5333 +
            (C7312 * C32868 + C7313 * C32857 +
             (C6218 * C2567 - C6219 * C2563 - C6218 * C2568 + C32488 * C2572) *
                 C32838) *
                C5334 +
            (C7314 * C32868 + C7315 * C32857 +
             (C6218 * C7466 - C6219 * C7465 - C6218 * C7467 + C32488 * C7468) *
                 C32838) *
                C32835) *
               C535 -
           ((C7319 + C7318 + C7295) * C32835 + (C7317 + C7316 + C7286) * C5334 +
            (C7483 * C32838 + C7482 * C32857 +
             (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                 C32868) *
                C5333) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
             C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
             C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                C10425 +
            (C10703 + C10704 + C10705) * C10426 + C10713 * C32838) *
               C32581 * C534 -
           ((C10709 + C10710 + C10711) * C32838 +
            (C10708 + C10707 + C10706) * C10426 +
            (C10705 + C10704 + C10703) * C10425) *
               C32581 * C535) *
              C32537 * C446 +
          (((C11042 + C11043 + C11044) * C10425 +
            (C11045 + C11046 + C11047) * C10426 +
            (C5336 * C1993 - C5337 * C1986 - C5336 * C1994 + C32864 * C2004 +
             C5338 * C1991 - C5339 * C1985 - C5338 * C1992 + C32851 * C2003 +
             C5340 * C2371 - C5341 * C2370 - C5340 * C2372 + C32826 * C2373) *
                C32838) *
               C32581 * C535 -
           ((C11047 + C11046 + C11045) * C32838 +
            (C11044 + C11043 + C11042) * C10426 +
            (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
             C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
             C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
                C10425) *
               C32581 * C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C10425 +
             C7131 * C10426 + C7132 * C32838) *
                C32867 +
            (C11435 + C11436 + C11437) * C32855 + C11445 * C32835) *
               C534 -
           ((C7133 * C32838 + C6973 * C10426 + C6721 * C10425) * C32835 +
            (C7134 * C32838 + C6972 * C10426 + C6722 * C10425) * C32855 +
            (C7135 * C32838 + C7132 * C10426 + C7131 * C10425) * C32867) *
               C535) *
              C32537 * C446 +
          (((C7482 * C10425 + C7483 * C10426 +
             (C6218 * C1993 - C6219 * C1986 - C6218 * C1994 + C32488 * C2004) *
                 C32838) *
                C32867 +
            (C7312 * C10425 + C7313 * C10426 +
             (C6218 * C2567 - C6219 * C2563 - C6218 * C2568 + C32488 * C2572) *
                 C32838) *
                C32855 +
            (C7314 * C10425 + C7315 * C10426 +
             (C6218 * C7466 - C6219 * C7465 - C6218 * C7467 + C32488 * C7468) *
                 C32838) *
                C32835) *
               C535 -
           ((C11707 + C11706 + C11705) * C32835 +
            (C11704 + C11703 + C11702) * C32855 +
            (C7483 * C32838 + C7482 * C10426 +
             (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                 C10425) *
                C32867) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C12067 +
            C7131 * C12068 + C7132 * C12069 + C7135 * C12070 +
            C12217 * C12071) *
               C32581 * C534 -
           (C12218 * C12071 + C12217 * C12070 + C7135 * C12069 +
            C7132 * C12068 + C7131 * C12067) *
               C32581 * C535) *
              C32537 * C446 +
          ((C7482 * C12067 + C7483 * C12068 + C12403 * C12069 +
            C12404 * C12070 +
            (C6218 * C12387 - C6219 * C12386 - C6218 * C12388 +
             C32488 * C12389) *
                C12071) *
               C32581 * C535 -
           (C12404 * C12071 + C12403 * C12070 + C7483 * C12069 +
            C7482 * C12068 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C12067) *
               C32581 * C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 + C115 * C132 -
           C116 * C124 - C115 * C133 + C102 * C145 + C117 * C134 - C118 * C125 -
           C117 * C135 + C103 * C146 + C119 * C136 - C120 * C126 - C119 * C137 +
           C104 * C147 + C121 * C138 - C122 * C127 - C121 * C139 +
           C105 * C148) *
              C32593 * C32581 * C32551 * C32537 * C110 -
          (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 + C119 * C138 -
           C120 * C127 - C119 * C139 + C104 * C148 + C117 * C136 - C118 * C126 -
           C117 * C137 + C103 * C147 + C115 * C134 - C116 * C125 - C115 * C135 +
           C102 * C146 + C113 * C132 - C114 * C124 - C113 * C133 +
           C101 * C145) *
              C32593 * C32581 * C32551 * C32537 * C111 +
          (C113 * C134 - C114 * C125 - C113 * C135 + C101 * C146 + C115 * C136 -
           C116 * C126 - C115 * C137 + C102 * C147 + C117 * C138 - C118 * C127 -
           C117 * C139 + C103 * C148 + C119 * C140 - C120 * C128 - C119 * C141 +
           C104 * C149 + C121 * C142 - C122 * C129 - C121 * C143 +
           C105 * C150) *
              C32593 * C32581 * C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 + C115 * C132 -
           C116 * C124 - C115 * C133 + C102 * C145 + C117 * C134 - C118 * C125 -
           C117 * C135 + C103 * C146 + C119 * C136 - C120 * C126 - C119 * C137 +
           C104 * C147 + C121 * C138 - C122 * C127 - C121 * C139 +
           C105 * C148) *
              C32593 * C32581 * C32551 * C213 -
          (C121 * C227 - C122 * C217 - C121 * C228 + C105 * C247 + C119 * C229 -
           C120 * C218 - C119 * C230 + C104 * C248 + C117 * C231 - C118 * C219 -
           C117 * C232 + C103 * C249 + C115 * C233 - C116 * C220 - C115 * C234 +
           C102 * C250 + C113 * C235 - C114 * C221 - C113 * C236 +
           C101 * C251) *
              C32593 * C32581 * C32551 * C214 +
          (C113 * C237 - C114 * C222 - C113 * C238 + C101 * C252 + C115 * C239 -
           C116 * C223 - C115 * C240 + C102 * C253 + C117 * C241 - C118 * C224 -
           C117 * C242 + C103 * C254 + C119 * C243 - C120 * C225 - C119 * C244 +
           C104 * C255 + C121 * C245 - C122 * C226 - C121 * C246 +
           C105 * C256) *
              C32593 * C32581 * C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
            C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
            C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
               C32593 * C32867 +
           (C758 * C235 - C759 * C221 - C758 * C236 + C752 * C251 +
            C760 * C233 - C761 * C220 - C760 * C234 + C753 * C250 +
            C762 * C231 - C763 * C219 - C762 * C232 + C32826 * C249) *
               C32593 * C32855 +
           (C758 * C237 - C759 * C222 - C758 * C238 + C752 * C252 +
            C760 * C239 - C761 * C223 - C760 * C240 + C753 * C253 +
            C762 * C241 - C763 * C224 - C762 * C242 + C32826 * C254) *
               C32593 * C32835) *
              C32551 * C32537 * C110 -
          ((C762 * C243 - C763 * C225 - C762 * C244 + C32826 * C255 +
            C760 * C241 - C761 * C224 - C760 * C242 + C753 * C254 +
            C758 * C239 - C759 * C223 - C758 * C240 + C752 * C253) *
               C32593 * C32835 +
           (C762 * C229 - C763 * C218 - C762 * C230 + C32826 * C248 +
            C760 * C231 - C761 * C219 - C760 * C232 + C753 * C249 +
            C758 * C233 - C759 * C220 - C758 * C234 + C752 * C250) *
               C32593 * C32855 +
           (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
            C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
            C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
               C32593 * C32867) *
              C32551 * C32537 * C111 +
          ((C758 * C134 - C759 * C125 - C758 * C135 + C752 * C146 +
            C760 * C136 - C761 * C126 - C760 * C137 + C753 * C147 +
            C762 * C138 - C763 * C127 - C762 * C139 + C32826 * C148) *
               C32593 * C32867 +
           (C758 * C231 - C759 * C219 - C758 * C232 + C752 * C249 +
            C760 * C229 - C761 * C218 - C760 * C230 + C753 * C248 +
            C762 * C227 - C763 * C217 - C762 * C228 + C32826 * C247) *
               C32593 * C32855 +
           (C758 * C241 - C759 * C224 - C758 * C242 + C752 * C254 +
            C760 * C243 - C761 * C225 - C760 * C244 + C753 * C255 +
            C762 * C245 - C763 * C226 - C762 * C246 + C32826 * C256) *
               C32593 * C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
            C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
            C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
               C32593 * C32867 +
           (C953 + C954 + C955) * C32593 * C32855 + C964 * C32835) *
              C32551 * C213 -
          ((C959 + C960 + C961) * C32593 * C32835 +
           (C958 + C957 + C956) * C32593 * C32855 +
           (C955 + C954 + C953) * C32593 * C32867) *
              C32551 * C214 +
          (C964 * C32867 + (C961 + C960 + C959) * C32593 * C32855 +
           (C758 * C886 - C759 * C877 - C758 * C887 + C752 * C895 +
            C760 * C888 - C761 * C878 - C760 * C889 + C753 * C896 +
            C762 * C890 - C763 * C879 - C762 * C891 + C32826 * C897) *
               C32593 * C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
            C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
            C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
               C32868 +
           (C758 * C340 - C759 * C326 - C758 * C341 + C752 * C356 +
            C760 * C338 - C761 * C325 - C760 * C339 + C753 * C355 +
            C762 * C336 - C763 * C324 - C762 * C337 + C32826 * C354) *
               C32857 +
           (C758 * C342 - C759 * C327 - C758 * C343 + C752 * C357 +
            C760 * C344 - C761 * C328 - C760 * C345 + C753 * C358 +
            C762 * C346 - C763 * C329 - C762 * C347 + C32826 * C359) *
               C32838) *
              C32581 * C32551 * C32537 * C110 -
          ((C762 * C348 - C763 * C330 - C762 * C349 + C32826 * C360 +
            C760 * C346 - C761 * C329 - C760 * C347 + C753 * C359 +
            C758 * C344 - C759 * C328 - C758 * C345 + C752 * C358) *
               C32838 +
           (C762 * C334 - C763 * C323 - C762 * C335 + C32826 * C353 +
            C760 * C336 - C761 * C324 - C760 * C337 + C753 * C354 +
            C758 * C338 - C759 * C325 - C758 * C339 + C752 * C355) *
               C32857 +
           (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
            C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
            C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
               C32868) *
              C32581 * C32551 * C32537 * C111 +
          ((C758 * C134 - C759 * C125 - C758 * C135 + C752 * C146 +
            C760 * C136 - C761 * C126 - C760 * C137 + C753 * C147 +
            C762 * C138 - C763 * C127 - C762 * C139 + C32826 * C148) *
               C32868 +
           (C758 * C336 - C759 * C324 - C758 * C337 + C752 * C354 +
            C760 * C334 - C761 * C323 - C760 * C335 + C753 * C353 +
            C762 * C332 - C763 * C322 - C762 * C333 + C32826 * C352) *
               C32857 +
           (C758 * C346 - C759 * C329 - C758 * C347 + C752 * C359 +
            C760 * C348 - C761 * C330 - C760 * C349 + C753 * C360 +
            C762 * C350 - C763 * C331 - C762 * C351 + C32826 * C361) *
               C32838) *
              C32581 * C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
            C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
            C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
               C32868 +
           (C758 * C340 - C759 * C326 - C758 * C341 + C752 * C356 +
            C760 * C338 - C761 * C325 - C760 * C339 + C753 * C355 +
            C762 * C336 - C763 * C324 - C762 * C337 + C32826 * C354) *
               C32857 +
           (C758 * C342 - C759 * C327 - C758 * C343 + C752 * C357 +
            C760 * C344 - C761 * C328 - C760 * C345 + C753 * C358 +
            C762 * C346 - C763 * C329 - C762 * C347 + C32826 * C359) *
               C32838) *
              C32581 * C32551 * C213 -
          ((C762 * C1093 - C763 * C1079 - C762 * C1094 + C32826 * C1106 +
            C760 * C1091 - C761 * C1078 - C760 * C1092 + C753 * C1105 +
            C758 * C1089 - C759 * C1077 - C758 * C1090 + C752 * C1104) *
               C32838 +
           (C1650 + C1651 + C1652) * C32857 + (C955 + C954 + C953) * C32868) *
              C32581 * C32551 * C214 +
          (C963 * C32868 + (C1649 + C1648 + C1647) * C32857 +
           (C758 * C1095 - C759 * C1080 - C758 * C1096 + C752 * C1107 +
            C760 * C1097 - C761 * C1081 - C760 * C1098 + C753 * C1108 +
            C762 * C1099 - C763 * C1082 - C762 * C1100 + C32826 * C1109) *
               C32838) *
              C32581 * C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C32593 * C5333 +
           (C5336 * C235 - C5337 * C221 - C5336 * C236 + C32864 * C251 +
            C5338 * C233 - C5339 * C220 - C5338 * C234 + C32851 * C250 +
            C5340 * C231 - C5341 * C219 - C5340 * C232 + C32826 * C249) *
               C32593 * C5334 +
           (C5336 * C237 - C5337 * C222 - C5336 * C238 + C32864 * C252 +
            C5338 * C239 - C5339 * C223 - C5338 * C240 + C32851 * C253 +
            C5340 * C241 - C5341 * C224 - C5340 * C242 + C32826 * C254) *
               C32593 * C32835) *
              C32551 * C32537 * C110 -
          ((C5340 * C243 - C5341 * C225 - C5340 * C244 + C32826 * C255 +
            C5338 * C241 - C5339 * C224 - C5338 * C242 + C32851 * C254 +
            C5336 * C239 - C5337 * C223 - C5336 * C240 + C32864 * C253) *
               C32593 * C32835 +
           (C5340 * C229 - C5341 * C218 - C5340 * C230 + C32826 * C248 +
            C5338 * C231 - C5339 * C219 - C5338 * C232 + C32851 * C249 +
            C5336 * C233 - C5337 * C220 - C5336 * C234 + C32864 * C250) *
               C32593 * C5334 +
           (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
            C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
            C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
               C32593 * C5333) *
              C32551 * C32537 * C111 +
          ((C5336 * C134 - C5337 * C125 - C5336 * C135 + C32864 * C146 +
            C5338 * C136 - C5339 * C126 - C5338 * C137 + C32851 * C147 +
            C5340 * C138 - C5341 * C127 - C5340 * C139 + C32826 * C148) *
               C32593 * C5333 +
           (C5336 * C231 - C5337 * C219 - C5336 * C232 + C32864 * C249 +
            C5338 * C229 - C5339 * C218 - C5338 * C230 + C32851 * C248 +
            C5340 * C227 - C5341 * C217 - C5340 * C228 + C32826 * C247) *
               C32593 * C5334 +
           (C5336 * C241 - C5337 * C224 - C5336 * C242 + C32864 * C254 +
            C5338 * C243 - C5339 * C225 - C5338 * C244 + C32851 * C255 +
            C5340 * C245 - C5341 * C226 - C5340 * C246 + C32826 * C256) *
               C32593 * C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C32593 * C5333 +
           (C5507 + C5508 + C5509) * C32593 * C5334 + C5518 * C32835) *
              C32551 * C213 -
          ((C5513 + C5514 + C5515) * C32593 * C32835 +
           (C5512 + C5511 + C5510) * C32593 * C5334 +
           (C5509 + C5508 + C5507) * C32593 * C5333) *
              C32551 * C214 +
          (C5518 * C5333 + (C5515 + C5514 + C5513) * C32593 * C5334 +
           (C5336 * C886 - C5337 * C877 - C5336 * C887 + C32864 * C895 +
            C5338 * C888 - C5339 * C878 - C5338 * C889 + C32851 * C896 +
            C5340 * C890 - C5341 * C879 - C5340 * C891 + C32826 * C897) *
               C32593 * C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
               C32593 * C6213 +
           (C6218 * C235 - C6219 * C221 - C6218 * C236 + C32488 * C251) *
               C32593 * C6214 +
           (C6218 * C237 - C6219 * C222 - C6218 * C238 + C32488 * C252) *
               C32593 * C6215 +
           (C6218 * C884 - C6219 * C876 - C6218 * C885 + C32488 * C894) *
               C32593 * C6216 +
           (C6218 * C886 - C6219 * C877 - C6218 * C887 + C32488 * C895) *
               C32593 * C6217) *
              C32551 * C32537 * C110 -
          ((C6218 * C888 - C6219 * C878 - C6218 * C889 + C32488 * C896) *
               C32593 * C6217 +
           (C6218 * C882 - C6219 * C875 - C6218 * C883 + C32488 * C893) *
               C32593 * C6216 +
           (C6218 * C239 - C6219 * C223 - C6218 * C240 + C32488 * C253) *
               C32593 * C6215 +
           (C6218 * C233 - C6219 * C220 - C6218 * C234 + C32488 * C250) *
               C32593 * C6214 +
           (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
               C32593 * C6213) *
              C32551 * C32537 * C111 +
          ((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
               C32593 * C6213 +
           (C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
               C32593 * C6214 +
           (C6218 * C241 - C6219 * C224 - C6218 * C242 + C32488 * C254) *
               C32593 * C6215 +
           (C6218 * C880 - C6219 * C874 - C6218 * C881 + C32488 * C892) *
               C32593 * C6216 +
           (C6218 * C890 - C6219 * C879 - C6218 * C891 + C32488 * C897) *
               C32593 * C6217) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
               C32593 * C6213 +
           C6326 * C6214 + C6327 * C6215 + C6328 * C6216 + C6329 * C6217) *
              C32551 * C213 -
          (C6330 * C6217 + C6329 * C6216 + C6328 * C6215 + C6327 * C6214 +
           C6326 * C6213) *
              C32551 * C214 +
          (C6327 * C6213 + C6328 * C6214 + C6329 * C6215 + C6330 * C6216 +
           (C6218 * C6286 - C6219 * C6283 - C6218 * C6287 + C32488 * C6289) *
               C32593 * C6217) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32868 +
            (C6218 * C340 - C6219 * C326 - C6218 * C341 + C32488 * C356) *
                C32857 +
            (C6218 * C342 - C6219 * C327 - C6218 * C343 + C32488 * C357) *
                C32838) *
               C5333 +
           (C6321 * C32868 + C6722 * C32857 +
            (C6218 * C1089 - C6219 * C1077 - C6218 * C1090 + C32488 * C1104) *
                C32838) *
               C5334 +
           (C6322 * C32868 + C6721 * C32857 +
            (C6218 * C1095 - C6219 * C1080 - C6218 * C1096 + C32488 * C1107) *
                C32838) *
               C32835) *
              C32551 * C32537 * C110 -
          (((C6218 * C1097 - C6219 * C1081 - C6218 * C1098 + C32488 * C1108) *
                C32838 +
            (C6218 * C1085 - C6219 * C1075 - C6218 * C1086 + C32488 * C1102) *
                C32857 +
            C6516 * C32868) *
               C32835 +
           ((C6218 * C1091 - C6219 * C1078 - C6218 * C1092 + C32488 * C1105) *
                C32838 +
            (C6218 * C629 - C6219 * C623 - C6218 * C630 + C32488 * C638) *
                C32857 +
            C6515 * C32868) *
               C5334 +
           ((C6218 * C344 - C6219 * C328 - C6218 * C345 + C32488 * C358) *
                C32838 +
            (C6218 * C338 - C6219 * C325 - C6218 * C339 + C32488 * C355) *
                C32857 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C32868) *
               C5333) *
              C32551 * C32537 * C111 +
          (((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
                C32868 +
            (C6218 * C336 - C6219 * C324 - C6218 * C337 + C32488 * C354) *
                C32857 +
            (C6218 * C346 - C6219 * C329 - C6218 * C347 + C32488 * C359) *
                C32838) *
               C5333 +
           ((C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
                C32868 +
            (C6218 * C631 - C6219 * C624 - C6218 * C632 + C32488 * C639) *
                C32857 +
            (C6218 * C1093 - C6219 * C1079 - C6218 * C1094 + C32488 * C1106) *
                C32838) *
               C5334 +
           ((C6218 * C241 - C6219 * C224 - C6218 * C242 + C32488 * C254) *
                C32868 +
            (C6218 * C1083 - C6219 * C1074 - C6218 * C1084 + C32488 * C1101) *
                C32857 +
            (C6218 * C1099 - C6219 * C1082 - C6218 * C1100 + C32488 * C1109) *
                C32838) *
               C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32868 +
            (C6218 * C340 - C6219 * C326 - C6218 * C341 + C32488 * C356) *
                C32857 +
            (C6218 * C342 - C6219 * C327 - C6218 * C343 + C32488 * C357) *
                C32838) *
               C5333 +
           (C6947 + C6948 + C6975) * C5334 + C6978 * C32835) *
              C32551 * C213 -
          ((C6977 + C6963 + C6964) * C32835 + (C6976 + C6954 + C6953) * C5334 +
           (C6975 + C6948 + C6947) * C5333) *
              C32551 * C214 +
          (C6978 * C5333 + (C6964 + C6963 + C6977) * C5334 +
           (C6324 * C32868 + C6719 * C32857 +
            (C6218 * C6399 - C6219 * C6394 - C6218 * C6400 + C32488 * C6403) *
                C32838) *
               C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C10425 +
           (C5336 * C340 - C5337 * C326 - C5336 * C341 + C32864 * C356 +
            C5338 * C338 - C5339 * C325 - C5338 * C339 + C32851 * C355 +
            C5340 * C336 - C5341 * C324 - C5340 * C337 + C32826 * C354) *
               C10426 +
           (C5336 * C342 - C5337 * C327 - C5336 * C343 + C32864 * C357 +
            C5338 * C344 - C5339 * C328 - C5338 * C345 + C32851 * C358 +
            C5340 * C346 - C5341 * C329 - C5340 * C347 + C32826 * C359) *
               C32838) *
              C32581 * C32551 * C32537 * C110 -
          ((C5340 * C348 - C5341 * C330 - C5340 * C349 + C32826 * C360 +
            C5338 * C346 - C5339 * C329 - C5338 * C347 + C32851 * C359 +
            C5336 * C344 - C5337 * C328 - C5336 * C345 + C32864 * C358) *
               C32838 +
           (C5340 * C334 - C5341 * C323 - C5340 * C335 + C32826 * C353 +
            C5338 * C336 - C5339 * C324 - C5338 * C337 + C32851 * C354 +
            C5336 * C338 - C5337 * C325 - C5336 * C339 + C32864 * C355) *
               C10426 +
           (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
            C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
            C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
               C10425) *
              C32581 * C32551 * C32537 * C111 +
          ((C5336 * C134 - C5337 * C125 - C5336 * C135 + C32864 * C146 +
            C5338 * C136 - C5339 * C126 - C5338 * C137 + C32851 * C147 +
            C5340 * C138 - C5341 * C127 - C5340 * C139 + C32826 * C148) *
               C10425 +
           (C5336 * C336 - C5337 * C324 - C5336 * C337 + C32864 * C354 +
            C5338 * C334 - C5339 * C323 - C5338 * C335 + C32851 * C353 +
            C5340 * C332 - C5341 * C322 - C5340 * C333 + C32826 * C352) *
               C10426 +
           (C5336 * C346 - C5337 * C329 - C5336 * C347 + C32864 * C359 +
            C5338 * C348 - C5339 * C330 - C5338 * C349 + C32851 * C360 +
            C5340 * C350 - C5341 * C331 - C5340 * C351 + C32826 * C361) *
               C32838) *
              C32581 * C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C10425 +
           (C5336 * C340 - C5337 * C326 - C5336 * C341 + C32864 * C356 +
            C5338 * C338 - C5339 * C325 - C5338 * C339 + C32851 * C355 +
            C5340 * C336 - C5341 * C324 - C5340 * C337 + C32826 * C354) *
               C10426 +
           (C5336 * C342 - C5337 * C327 - C5336 * C343 + C32864 * C357 +
            C5338 * C344 - C5339 * C328 - C5338 * C345 + C32851 * C358 +
            C5340 * C346 - C5341 * C329 - C5340 * C347 + C32826 * C359) *
               C32838) *
              C32581 * C32551 * C213 -
          ((C5340 * C1093 - C5341 * C1079 - C5340 * C1094 + C32826 * C1106 +
            C5338 * C1091 - C5339 * C1078 - C5338 * C1092 + C32851 * C1105 +
            C5336 * C1089 - C5337 * C1077 - C5336 * C1090 + C32864 * C1104) *
               C32838 +
           (C6148 + C6149 + C6150) * C10426 +
           (C5509 + C5508 + C5507) * C10425) *
              C32581 * C32551 * C214 +
          (C5517 * C10425 + (C6147 + C6146 + C6145) * C10426 +
           (C5336 * C1095 - C5337 * C1080 - C5336 * C1096 + C32864 * C1107 +
            C5338 * C1097 - C5339 * C1081 - C5338 * C1098 + C32851 * C1108 +
            C5340 * C1099 - C5341 * C1082 - C5340 * C1100 + C32826 * C1109) *
               C32838) *
              C32581 * C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C10425 +
            C7131 * C10426 + C7132 * C32838) *
               C32867 +
           (C6321 * C10425 + C6722 * C10426 + C6972 * C32838) * C32855 +
           (C6322 * C10425 + C6721 * C10426 + C6973 * C32838) * C32835) *
              C32551 * C32537 * C110 -
          ((C7315 * C32838 + C7314 * C10426 + C6516 * C10425) * C32835 +
           (C7313 * C32838 + C7312 * C10426 + C6515 * C10425) * C32855 +
           (C7483 * C32838 + C7482 * C10426 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C10425) *
               C32867) *
              C32551 * C32537 * C111 +
          (((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
                C10425 +
            (C6218 * C336 - C6219 * C324 - C6218 * C337 + C32488 * C354) *
                C10426 +
            (C6218 * C346 - C6219 * C329 - C6218 * C347 + C32488 * C359) *
                C32838) *
               C32867 +
           ((C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
                C10425 +
            (C6218 * C631 - C6219 * C624 - C6218 * C632 + C32488 * C639) *
                C10426 +
            (C6218 * C1093 - C6219 * C1079 - C6218 * C1094 + C32488 * C1106) *
                C32838) *
               C32855 +
           ((C6218 * C241 - C6219 * C224 - C6218 * C242 + C32488 * C254) *
                C10425 +
            (C6218 * C1083 - C6219 * C1074 - C6218 * C1084 + C32488 * C1101) *
                C10426 +
            (C6218 * C1099 - C6219 * C1082 - C6218 * C1100 + C32488 * C1109) *
                C32838) *
               C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C10425 +
            C7131 * C10426 + C7132 * C32838) *
               C32867 +
           (C11435 + C11436 + C11437) * C32855 + C11445 * C32835) *
              C32551 * C213 -
          ((C11441 + C11442 + C11443) * C32835 +
           (C11440 + C11439 + C11438) * C32855 +
           (C11437 + C11436 + C11435) * C32867) *
              C32551 * C214 +
          (C11445 * C32867 + (C11443 + C11442 + C11441) * C32855 +
           (C6324 * C10425 + C6719 * C10426 +
            (C6218 * C6399 - C6219 * C6394 - C6218 * C6400 + C32488 * C6403) *
                C32838) *
               C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
               C12067 +
           C7131 * C12068 + C7132 * C12069 + C7135 * C12070 +
           (C6218 * C1997 - C6219 * C1988 - C6218 * C1998 + C32488 * C2006) *
               C12071) *
              C32581 * C32551 * C32537 * C110 -
          ((C6218 * C1999 - C6219 * C1989 - C6218 * C2000 + C32488 * C2007) *
               C12071 +
           (C6218 * C1993 - C6219 * C1986 - C6218 * C1994 + C32488 * C2004) *
               C12070 +
           C7483 * C12069 + C7482 * C12068 +
           (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
               C12067) *
              C32581 * C32551 * C32537 * C111 +
          ((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
               C12067 +
           (C6218 * C336 - C6219 * C324 - C6218 * C337 + C32488 * C354) *
               C12068 +
           (C6218 * C346 - C6219 * C329 - C6218 * C347 + C32488 * C359) *
               C12069 +
           (C6218 * C1991 - C6219 * C1985 - C6218 * C1992 + C32488 * C2003) *
               C12070 +
           (C6218 * C2001 - C6219 * C1990 - C6218 * C2002 + C32488 * C2008) *
               C12071) *
              C32581 * C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
               C12067 +
           C7131 * C12068 + C7132 * C12069 + C7135 * C12070 +
           (C6218 * C1997 - C6219 * C1988 - C6218 * C1998 + C32488 * C2006) *
               C12071) *
              C32581 * C32551 * C213 -
          ((C6218 * C7093 - C6219 * C7089 - C6218 * C7094 + C32488 * C7098) *
               C12071 +
           C7134 * C12070 + C6972 * C12069 + C6722 * C12068 + C6321 * C12067) *
              C32581 * C32551 * C214 +
          (C6322 * C12067 + C6721 * C12068 + C6973 * C12069 + C7133 * C12070 +
           (C6218 * C7095 - C6219 * C7090 - C6218 * C7096 + C32488 * C7099) *
               C12071) *
              C32581 * C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
              C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                 C32805 +
             (C8968 + C8969) * C32680) *
                C5333 +
            ((C7894 + C7895) * C32805 + (C8477 + C8476) * C32680) * C5334 +
            C8773 * C32835) *
               C32551 * C444 -
           (((C8472 + C8473) * C32680 + (C7899 + C7898) * C32805) * C32835 +
            ((C8474 + C8475) * C32680 + (C7897 + C7896) * C32805) * C5334 +
            ((C8476 + C8477) * C32680 + (C7895 + C7894) * C32805) * C5333) *
               C32551 * C445) *
              C446 +
          ((((C8170 + C8171) * C32805 + (C9194 + C9195) * C32680) * C5333 +
            ((C8172 + C8173) * C32805 + (C9196 + C9197) * C32680) * C5334 +
            ((C8174 + C8175) * C32805 +
             (C31623 * C1603 - C7744 * C1599 - C31623 * C1604 + C32785 * C1608 +
              C31604 * C1605 - C7746 * C1600 - C31604 * C1606 +
              C32498 * C1609) *
                 C32680) *
                C32835) *
               C32551 * C445 -
           (((C9197 + C9196) * C32680 + (C8173 + C8172) * C32805) * C32835 +
            ((C9195 + C9194) * C32680 + (C8171 + C8170) * C32805) * C5334 +
            ((C31604 * C336 - C7746 * C324 - C31604 * C337 + C32498 * C354 +
              C31623 * C338 - C7744 * C325 - C31623 * C339 + C32785 * C355) *
                 C32680 +
             (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
              C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
                 C32805) *
                C5333) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
             C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
             C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
             C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
                C32805 +
            (C3750 + C3751 + C3752 + C3753) * C32680) *
               C32581 * C32551 * C444 -
           ((C3402 + C3403 + C3404 + C3405) * C32680 +
            (C2857 + C2856 + C2855 + C2854) * C32805) *
               C32581 * C32551 * C445) *
              C446 +
          (((C3114 + C3115 + C3116 + C3117) * C32805 +
            (C2699 * C629 - C2700 * C623 - C2699 * C630 + C2693 * C638 +
             C2701 * C631 - C2702 * C624 - C2701 * C632 + C2694 * C639 +
             C2703 * C633 - C2704 * C625 - C2703 * C634 + C2695 * C640 +
             C2705 * C635 - C2706 * C626 - C2705 * C636 + C32803 * C641) *
                C32680) *
               C32581 * C32551 * C445 -
           ((C2705 * C332 - C2706 * C322 - C2705 * C333 + C32803 * C352 +
             C2703 * C334 - C2704 * C323 - C2703 * C335 + C2695 * C353 +
             C2701 * C336 - C2702 * C324 - C2701 * C337 + C2694 * C354 +
             C2699 * C338 - C2700 * C325 - C2699 * C339 + C2693 * C355) *
                C32680 +
            (C2705 * C138 - C2706 * C127 - C2705 * C139 + C32803 * C148 +
             C2703 * C136 - C2704 * C126 - C2703 * C137 + C2695 * C147 +
             C2701 * C134 - C2702 * C125 - C2701 * C135 + C2694 * C146 +
             C2699 * C132 - C2700 * C124 - C2699 * C133 + C2693 * C145) *
                C32805) *
               C32581 * C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C13674 +
            (C8968 + C8969) * C13675 + C12936 * C13676 + C13875 * C32819) *
               C32581 * C32551 * C444 -
           ((C12962 + C12963) * C32819 + C13576 * C13676 + C9602 * C13675 +
            (C7895 + C7894) * C13674) *
               C32581 * C32551 * C445) *
              C446 +
          (((C8170 + C8171) * C13674 + (C9194 + C9195) * C13675 +
            (C13172 + C13173) * C13676 +
            (C31623 * C2567 - C7744 * C2563 - C31623 * C2568 + C32785 * C2572 +
             C31604 * C2569 - C7746 * C2564 - C31604 * C2570 + C32498 * C2573) *
                C32819) *
               C32581 * C32551 * C445 -
           ((C31604 * C1991 - C7746 * C1985 - C31604 * C1992 + C32498 * C2003 +
             C31623 * C1993 - C7744 * C1986 - C31623 * C1994 + C32785 * C2004) *
                C32819 +
            (C13381 + C13380) * C13676 + (C9405 + C9404) * C13675 +
            (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
             C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
                C13674) *
               C32581 * C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
              C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                 C32805 +
             (C8968 + C8969) * C32680) *
                C5333 +
            ((C7894 + C7895) * C32805 + C9600 * C32680) * C5334 +
            C8773 * C32835) *
               C534 -
           (((C8970 + C8971) * C32680 + C9601 * C32805) * C32835 +
            ((C8972 + C8973) * C32680 + C9602 * C32805) * C5334 +
            ((C8974 + C8975) * C32680 + (C8969 + C8968) * C32805) * C5333) *
               C535) *
              C444 +
          (((C9600 * C32805 + (C8973 + C8972) * C32680) * C5333 +
            (C8771 * C32805 + (C8971 + C8970) * C32680) * C5334 +
            ((C8473 + C8472) * C32805 +
             (C31623 * C6397 - C7744 * C6393 - C31623 * C6398 + C32785 * C6402 +
              C31604 * C7282 - C7746 * C7281 - C31604 * C7283 +
              C32498 * C7284) *
                 C32680) *
                C32835) *
               C535 -
           (((C8472 + C8473) * C32680 + (C7899 + C7898) * C32805) * C32835 +
            (C9601 * C32680 + (C7897 + C7896) * C32805) * C5334 +
            (C9602 * C32680 + (C7895 + C7894) * C32805) * C5333) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
             C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
             C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
             C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
                C32805 +
            (C3750 + C3751 + C3752 + C3753) * C32680) *
               C32581 * C534 -
           ((C3754 + C3755 + C3756 + C3757) * C32680 +
            (C3753 + C3752 + C3751 + C3750) * C32805) *
               C32581 * C535) *
              C444 +
          (((C3405 + C3404 + C3403 + C3402) * C32805 +
            (C2699 * C1089 - C2700 * C1077 - C2699 * C1090 + C2693 * C1104 +
             C2701 * C1091 - C2702 * C1078 - C2701 * C1092 + C2694 * C1105 +
             C2703 * C1093 - C2704 * C1079 - C2703 * C1094 + C2695 * C1106 +
             C2705 * C2221 - C2706 * C2220 - C2705 * C2222 + C32803 * C2223) *
                C32680) *
               C32581 * C535 -
           ((C3402 + C3403 + C3404 + C3405) * C32680 +
            (C2857 + C2856 + C2855 + C2854) * C32805) *
               C32581 * C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C13674 +
            (C8968 + C8969) * C13675 + C12936 * C13676 + C13875 * C32819) *
               C32581 * C534 -
           ((C13888 + C13889) * C32819 + (C12964 + C12965) * C13676 +
            (C8974 + C8975) * C13675 + (C8969 + C8968) * C13674) *
               C32581 * C535) *
              C444 +
          ((C9600 * C13674 + C12937 * C13675 + (C12963 + C12962) * C13676 +
            (C31623 * C7093 - C7744 * C7089 - C31623 * C7094 + C32785 * C7098 +
             C31604 * C12301 - C7746 * C12300 - C31604 * C12302 +
             C32498 * C12303) *
                C32819) *
               C32581 * C535 -
           ((C12962 + C12963) * C32819 + C13576 * C13676 + C9602 * C13675 +
            (C7895 + C7894) * C13674) *
               C32581 * C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
                C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
                C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
                C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
                   C32805 +
               (C2699 * C340 - C2700 * C326 - C2699 * C341 + C2693 * C356 +
                C2701 * C338 - C2702 * C325 - C2701 * C339 + C2694 * C355 +
                C2703 * C336 - C2704 * C324 - C2703 * C337 + C2695 * C354 +
                C2705 * C334 - C2706 * C323 - C2705 * C335 + C32803 * C353) *
                   C32680) *
                  C32581 * C32551 * C32537 * C110 -
              ((C2705 * C332 - C2706 * C322 - C2705 * C333 + C32803 * C352 +
                C2703 * C334 - C2704 * C323 - C2703 * C335 + C2695 * C353 +
                C2701 * C336 - C2702 * C324 - C2701 * C337 + C2694 * C354 +
                C2699 * C338 - C2700 * C325 - C2699 * C339 + C2693 * C355) *
                   C32680 +
               (C2705 * C138 - C2706 * C127 - C2705 * C139 + C32803 * C148 +
                C2703 * C136 - C2704 * C126 - C2703 * C137 + C2695 * C147 +
                C2701 * C134 - C2702 * C125 - C2701 * C135 + C2694 * C146 +
                C2699 * C132 - C2700 * C124 - C2699 * C133 + C2693 * C145) *
                   C32805) *
                  C32581 * C32551 * C32537 * C111 +
              ((C2699 * C134 - C2700 * C125 - C2699 * C135 + C2693 * C146 +
                C2701 * C136 - C2702 * C126 - C2701 * C137 + C2694 * C147 +
                C2703 * C138 - C2704 * C127 - C2703 * C139 + C2695 * C148 +
                C2705 * C140 - C2706 * C128 - C2705 * C141 + C32803 * C149) *
                   C32805 +
               (C2699 * C336 - C2700 * C324 - C2699 * C337 + C2693 * C354 +
                C2701 * C334 - C2702 * C323 - C2701 * C335 + C2694 * C353 +
                C2703 * C332 - C2704 * C322 - C2703 * C333 + C2695 * C352 +
                C2705 * C537 - C2706 * C536 - C2705 * C538 + C32803 * C539) *
                   C32680) *
                  C32581 * C32551 * C32537 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
                C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
                C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
                C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
                   C32805 +
               (C2699 * C340 - C2700 * C326 - C2699 * C341 + C2693 * C356 +
                C2701 * C338 - C2702 * C325 - C2701 * C339 + C2694 * C355 +
                C2703 * C336 - C2704 * C324 - C2703 * C337 + C2695 * C354 +
                C2705 * C334 - C2706 * C323 - C2705 * C335 + C32803 * C353) *
                   C32680) *
                  C32581 * C32551 * C213 -
              ((C3402 + C3403 + C3404 + C3405) * C32680 +
               (C2857 + C2856 + C2855 + C2854) * C32805) *
                  C32581 * C32551 * C214 +
              ((C2861 + C2860 + C2859 + C2858) * C32805 +
               (C2699 * C1087 - C2700 * C1076 - C2699 * C1088 + C2693 * C1103 +
                C2701 * C1085 - C2702 * C1075 - C2701 * C1086 + C2694 * C1102 +
                C2703 * C1083 - C2704 * C1074 - C2703 * C1084 + C2695 * C1101 +
                C2705 * C1449 - C2706 * C1448 - C2705 * C1450 +
                C32803 * C1451) *
                   C32680) *
                  C32581 * C32551 * C215) *
             C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
            C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
            C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
            C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
               C32805 +
           (C3750 + C3751 + C3752 + C3753) * C32680) *
              C32581 * C319 -
          ((C3754 + C3755 + C3756 + C3757) * C32680 +
           (C3753 + C3752 + C3751 + C3750) * C32805) *
              C32581 * C320 +
          ((C3757 + C3756 + C3755 + C3754) * C32805 +
           (C2699 * C1995 - C2700 * C1987 - C2699 * C1996 + C2693 * C2005 +
            C2701 * C1993 - C2702 * C1986 - C2701 * C1994 + C2694 * C2004 +
            C2703 * C1991 - C2704 * C1985 - C2703 * C1992 + C2695 * C2003 +
            C2705 * C2371 - C2706 * C2370 - C2705 * C2372 + C32803 * C2373) *
               C32680) *
              C32581 * C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C32805 +
            (C31623 * C340 - C7744 * C326 - C31623 * C341 + C32785 * C356 +
             C31604 * C338 - C7746 * C325 - C31604 * C339 + C32498 * C355) *
                C32680) *
               C5333 +
           ((C7894 + C7895) * C32805 + (C8477 + C8476) * C32680) * C5334 +
           (C7902 * C32805 + (C8475 + C8474) * C32680) * C32835) *
              C32551 * C32537 * C110 -
          (((C31604 * C1083 - C7746 * C1074 - C31604 * C1084 + C32498 * C1101 +
             C31623 * C1085 - C7744 * C1075 - C31623 * C1086 + C32785 * C1102) *
                C32680 +
            (C8173 + C8172) * C32805) *
               C32835 +
           ((C31604 * C631 - C7746 * C624 - C31604 * C632 + C32498 * C639 +
             C31623 * C629 - C7744 * C623 - C31623 * C630 + C32785 * C638) *
                C32680 +
            (C8171 + C8170) * C32805) *
               C5334 +
           ((C31604 * C336 - C7746 * C324 - C31604 * C337 + C32498 * C354 +
             C31623 * C338 - C7744 * C325 - C31623 * C339 + C32785 * C355) *
                C32680 +
            (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
             C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
                C32805) *
               C5333) *
              C32551 * C32537 * C111 +
          (((C31623 * C134 - C7744 * C125 - C31623 * C135 + C32785 * C146 +
             C31604 * C136 - C7746 * C126 - C31604 * C137 + C32498 * C147) *
                C32805 +
            (C31623 * C336 - C7744 * C324 - C31623 * C337 + C32785 * C354 +
             C31604 * C334 - C7746 * C323 - C31604 * C335 + C32498 * C353) *
                C32680) *
               C5333 +
           ((C31623 * C231 - C7744 * C219 - C31623 * C232 + C32785 * C249 +
             C31604 * C229 - C7746 * C218 - C31604 * C230 + C32498 * C248) *
                C32805 +
            (C31623 * C631 - C7744 * C624 - C31623 * C632 + C32785 * C639 +
             C31604 * C633 - C7746 * C625 - C31604 * C634 + C32498 * C640) *
                C32680) *
               C5334 +
           ((C31623 * C241 - C7744 * C224 - C31623 * C242 + C32785 * C254 +
             C31604 * C243 - C7746 * C225 - C31604 * C244 + C32498 * C255) *
                C32805 +
            (C31623 * C1083 - C7744 * C1074 - C31623 * C1084 + C32785 * C1101 +
             C31604 * C1449 - C7746 * C1448 - C31604 * C1450 + C32498 * C1451) *
                C32680) *
               C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C32805 +
            (C31623 * C340 - C7744 * C326 - C31623 * C341 + C32785 * C356 +
             C31604 * C338 - C7746 * C325 - C31604 * C339 + C32498 * C355) *
                C32680) *
               C5333 +
           ((C7894 + C7895) * C32805 + (C8477 + C8476) * C32680) * C5334 +
           C8773 * C32835) *
              C32551 * C213 -
          (((C8472 + C8473) * C32680 + (C7899 + C7898) * C32805) * C32835 +
           ((C8474 + C8475) * C32680 + (C7897 + C7896) * C32805) * C5334 +
           ((C8476 + C8477) * C32680 + (C7895 + C7894) * C32805) * C5333) *
              C32551 * C214 +
          (C8773 * C5333 + (C7903 * C32805 + (C8473 + C8472) * C32680) * C5334 +
           ((C7901 + C7900) * C32805 +
            (C31623 * C6395 - C7744 * C6392 - C31623 * C6396 + C32785 * C6401 +
             C31604 * C6605 - C7746 * C6604 - C31604 * C6606 + C32498 * C6607) *
                C32680) *
               C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C32805 +
            (C8968 + C8969) * C32680) *
               C5333 +
           ((C7894 + C7895) * C32805 + (C8477 + C8476) * C32680) * C5334 +
           C8773 * C32835) *
              C319 -
          (((C8970 + C8971) * C32680 + (C8474 + C8475) * C32805) * C32835 +
           ((C8972 + C8973) * C32680 + (C8476 + C8477) * C32805) * C5334 +
           ((C8974 + C8975) * C32680 + (C8969 + C8968) * C32805) * C5333) *
              C320 +
          (((C8975 + C8974) * C32805 +
            (C31623 * C1995 - C7744 * C1987 - C31623 * C1996 + C32785 * C2005 +
             C31604 * C1993 - C7746 * C1986 - C31604 * C1994 + C32498 * C2004) *
                C32680) *
               C5333 +
           ((C8973 + C8972) * C32805 +
            (C31623 * C2565 - C7744 * C2562 - C31623 * C2566 + C32785 * C2571 +
             C31604 * C2567 - C7746 * C2563 - C31604 * C2568 + C32498 * C2572) *
                C32680) *
               C5334 +
           ((C8971 + C8970) * C32805 +
            (C31623 * C7091 - C7744 * C7088 - C31623 * C7092 + C32785 * C7097 +
             C31604 * C7466 - C7746 * C7465 - C31604 * C7467 + C32498 * C7468) *
                C32680) *
               C32835) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
            C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
               C13674 +
           (C8968 + C8969) * C13675 + C12936 * C13676 +
           (C12965 + C12964) * C32819) *
              C32581 * C32551 * C32537 * C110 -
          ((C31604 * C1991 - C7746 * C1985 - C31604 * C1992 + C32498 * C2003 +
            C31623 * C1993 - C7744 * C1986 - C31623 * C1994 + C32785 * C2004) *
               C32819 +
           (C13381 + C13380) * C13676 + (C9405 + C9404) * C13675 +
           (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
            C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
               C13674) *
              C32581 * C32551 * C32537 * C111 +
          ((C31623 * C134 - C7744 * C125 - C31623 * C135 + C32785 * C146 +
            C31604 * C136 - C7746 * C126 - C31604 * C137 + C32498 * C147) *
               C13674 +
           (C31623 * C336 - C7744 * C324 - C31623 * C337 + C32785 * C354 +
            C31604 * C334 - C7746 * C323 - C31604 * C335 + C32498 * C353) *
               C13675 +
           (C31623 * C346 - C7744 * C329 - C31623 * C347 + C32785 * C359 +
            C31604 * C348 - C7746 * C330 - C31604 * C349 + C32498 * C360) *
               C13676 +
           (C31623 * C1991 - C7744 * C1985 - C31623 * C1992 + C32785 * C2003 +
            C31604 * C2371 - C7746 * C2370 - C31604 * C2372 + C32498 * C2373) *
               C32819) *
              C32581 * C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
            C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
               C13674 +
           (C8968 + C8969) * C13675 + C12936 * C13676 +
           (C12965 + C12964) * C32819) *
              C32581 * C32551 * C213 -
          ((C12962 + C12963) * C32819 + C13576 * C13676 + C9602 * C13675 +
           (C7895 + C7894) * C13674) *
              C32581 * C32551 * C214 +
          (C7902 * C13674 + C8771 * C13675 + (C8971 + C8970) * C13676 +
           (C31623 * C7091 - C7744 * C7088 - C31623 * C7092 + C32785 * C7097 +
            C31604 * C7466 - C7746 * C7465 - C31604 * C7467 + C32498 * C7468) *
               C32819) *
              C32581 * C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
            C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
               C13674 +
           (C8968 + C8969) * C13675 + C12936 * C13676 + C13875 * C32819) *
              C32581 * C319 -
          ((C13888 + C13889) * C32819 + (C12964 + C12965) * C13676 +
           (C8974 + C8975) * C13675 + (C8969 + C8968) * C13674) *
              C32581 * C320 +
          (C12936 * C13674 + C13875 * C13675 + (C13889 + C13888) * C13676 +
           (C31623 * C12198 - C7744 * C12196 - C31623 * C12199 +
            C32785 * C12202 + C31604 * C12387 - C7746 * C12386 -
            C31604 * C12388 + C32498 * C12389) *
               C32819) *
              C32581 * C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
              C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                 C32805 +
             (C8968 + C8969) * C32680) *
                C5333 +
            ((C7894 + C7895) * C32805 + (C8477 + C8476) * C32680) * C5334 +
            C8773 * C32835) *
               C534 -
           (((C8970 + C8971) * C32680 + (C8474 + C8475) * C32805) * C32835 +
            ((C8972 + C8973) * C32680 + (C8476 + C8477) * C32805) * C5334 +
            ((C8974 + C8975) * C32680 + (C8969 + C8968) * C32805) * C5333) *
               C535) *
              C32537 * C446 +
          ((((C9404 + C9405) * C32805 +
             (C31623 * C344 - C7744 * C328 - C31623 * C345 + C32785 * C358 +
              C31604 * C346 - C7746 * C329 - C31604 * C347 + C32498 * C359) *
                 C32680) *
                C5333 +
            ((C9194 + C9195) * C32805 +
             (C31623 * C1091 - C7744 * C1078 - C31623 * C1092 + C32785 * C1105 +
              C31604 * C1093 - C7746 * C1079 - C31604 * C1094 +
              C32498 * C1106) *
                 C32680) *
                C5334 +
            ((C9196 + C9197) * C32805 +
             (C31623 * C1097 - C7744 * C1081 - C31623 * C1098 + C32785 * C1108 +
              C31604 * C1099 - C7746 * C1082 - C31604 * C1100 +
              C32498 * C1109) *
                 C32680) *
                C32835) *
               C535 -
           (((C9197 + C9196) * C32680 + (C8173 + C8172) * C32805) * C32835 +
            ((C9195 + C9194) * C32680 + (C8171 + C8170) * C32805) * C5334 +
            ((C9405 + C9404) * C32680 +
             (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
              C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
                 C32805) *
                C5333) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
             C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
             C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
             C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
                C32805 +
            (C3750 + C3751 + C3752 + C3753) * C32680) *
               C32581 * C534 -
           ((C3754 + C3755 + C3756 + C3757) * C32680 +
            (C3753 + C3752 + C3751 + C3750) * C32805) *
               C32581 * C535) *
              C32537 * C446 +
          (((C4042 + C4043 + C4044 + C4045) * C32805 +
            (C2699 * C344 - C2700 * C328 - C2699 * C345 + C2693 * C358 +
             C2701 * C346 - C2702 * C329 - C2701 * C347 + C2694 * C359 +
             C2703 * C348 - C2704 * C330 - C2703 * C349 + C2695 * C360 +
             C2705 * C350 - C2706 * C331 - C2705 * C351 + C32803 * C361) *
                C32680) *
               C32581 * C535 -
           ((C4045 + C4044 + C4043 + C4042) * C32680 +
            (C2705 * C138 - C2706 * C127 - C2705 * C139 + C32803 * C148 +
             C2703 * C136 - C2704 * C126 - C2703 * C137 + C2695 * C147 +
             C2701 * C134 - C2702 * C125 - C2701 * C135 + C2694 * C146 +
             C2699 * C132 - C2700 * C124 - C2699 * C133 + C2693 * C145) *
                C32805) *
               C32581 * C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C13674 +
            (C8968 + C8969) * C13675 + C12936 * C13676 + C13875 * C32819) *
               C32581 * C534 -
           ((C13888 + C13889) * C32819 + (C12964 + C12965) * C13676 +
            (C8974 + C8975) * C13675 + (C8969 + C8968) * C13674) *
               C32581 * C535) *
              C32537 * C446 +
          (((C9404 + C9405) * C13674 + (C13380 + C13381) * C13675 +
            (C14162 + C14163) * C13676 +
            (C31623 * C1999 - C7744 * C1989 - C31623 * C2000 + C32785 * C2007 +
             C31604 * C2001 - C7746 * C1990 - C31604 * C2002 + C32498 * C2008) *
                C32819) *
               C32581 * C535 -
           ((C14163 + C14162) * C32819 + (C13381 + C13380) * C13676 +
            (C9405 + C9404) * C13675 +
            (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
             C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
                C13674) *
               C32581 * C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
            C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
            C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
            C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
               C32805 +
           (C2699 * C340 - C2700 * C326 - C2699 * C341 + C2693 * C356 +
            C2701 * C338 - C2702 * C325 - C2701 * C339 + C2694 * C355 +
            C2703 * C336 - C2704 * C324 - C2703 * C337 + C2695 * C354 +
            C2705 * C334 - C2706 * C323 - C2705 * C335 + C32803 * C353) *
               C32680) *
              C32581 * C32551 * C213 -
          ((C3402 + C3403 + C3404 + C3405) * C32680 +
           (C2857 + C2856 + C2855 + C2854) * C32805) *
              C32581 * C32551 * C214 +
          ((C2861 + C2860 + C2859 + C2858) * C32805 +
           (C2699 * C1087 - C2700 * C1076 - C2699 * C1088 + C2693 * C1103 +
            C2701 * C1085 - C2702 * C1075 - C2701 * C1086 + C2694 * C1102 +
            C2703 * C1083 - C2704 * C1074 - C2703 * C1084 + C2695 * C1101 +
            C2705 * C1449 - C2706 * C1448 - C2705 * C1450 + C32803 * C1451) *
               C32680) *
              C32581 * C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
            C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
            C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
            C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
               C32805 +
           (C2699 * C340 - C2700 * C326 - C2699 * C341 + C2693 * C356 +
            C2701 * C338 - C2702 * C325 - C2701 * C339 + C2694 * C355 +
            C2703 * C336 - C2704 * C324 - C2703 * C337 + C2695 * C354 +
            C2705 * C334 - C2706 * C323 - C2705 * C335 + C32803 * C353) *
               C32680) *
              C32581 * C32551 * C32537 * C110 -
          ((C2705 * C332 - C2706 * C322 - C2705 * C333 + C32803 * C352 +
            C2703 * C334 - C2704 * C323 - C2703 * C335 + C2695 * C353 +
            C2701 * C336 - C2702 * C324 - C2701 * C337 + C2694 * C354 +
            C2699 * C338 - C2700 * C325 - C2699 * C339 + C2693 * C355) *
               C32680 +
           (C2705 * C138 - C2706 * C127 - C2705 * C139 + C32803 * C148 +
            C2703 * C136 - C2704 * C126 - C2703 * C137 + C2695 * C147 +
            C2701 * C134 - C2702 * C125 - C2701 * C135 + C2694 * C146 +
            C2699 * C132 - C2700 * C124 - C2699 * C133 + C2693 * C145) *
               C32805) *
              C32581 * C32551 * C32537 * C111 +
          ((C2699 * C134 - C2700 * C125 - C2699 * C135 + C2693 * C146 +
            C2701 * C136 - C2702 * C126 - C2701 * C137 + C2694 * C147 +
            C2703 * C138 - C2704 * C127 - C2703 * C139 + C2695 * C148 +
            C2705 * C140 - C2706 * C128 - C2705 * C141 + C32803 * C149) *
               C32805 +
           (C2699 * C336 - C2700 * C324 - C2699 * C337 + C2693 * C354 +
            C2701 * C334 - C2702 * C323 - C2701 * C335 + C2694 * C353 +
            C2703 * C332 - C2704 * C322 - C2703 * C333 + C2695 * C352 +
            C2705 * C537 - C2706 * C536 - C2705 * C538 + C32803 * C539) *
               C32680) *
              C32581 * C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C32805 +
            (C31623 * C340 - C7744 * C326 - C31623 * C341 + C32785 * C356 +
             C31604 * C338 - C7746 * C325 - C31604 * C339 + C32498 * C355) *
                C32680) *
               C5333 +
           ((C7894 + C7895) * C32805 + (C8477 + C8476) * C32680) * C5334 +
           (C7902 * C32805 + (C8475 + C8474) * C32680) * C32835) *
              C32551 * C32537 * C110 -
          (((C31604 * C1083 - C7746 * C1074 - C31604 * C1084 + C32498 * C1101 +
             C31623 * C1085 - C7744 * C1075 - C31623 * C1086 + C32785 * C1102) *
                C32680 +
            (C8173 + C8172) * C32805) *
               C32835 +
           ((C31604 * C631 - C7746 * C624 - C31604 * C632 + C32498 * C639 +
             C31623 * C629 - C7744 * C623 - C31623 * C630 + C32785 * C638) *
                C32680 +
            (C8171 + C8170) * C32805) *
               C5334 +
           ((C31604 * C336 - C7746 * C324 - C31604 * C337 + C32498 * C354 +
             C31623 * C338 - C7744 * C325 - C31623 * C339 + C32785 * C355) *
                C32680 +
            (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
             C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
                C32805) *
               C5333) *
              C32551 * C32537 * C111 +
          (((C31623 * C134 - C7744 * C125 - C31623 * C135 + C32785 * C146 +
             C31604 * C136 - C7746 * C126 - C31604 * C137 + C32498 * C147) *
                C32805 +
            (C31623 * C336 - C7744 * C324 - C31623 * C337 + C32785 * C354 +
             C31604 * C334 - C7746 * C323 - C31604 * C335 + C32498 * C353) *
                C32680) *
               C5333 +
           ((C31623 * C231 - C7744 * C219 - C31623 * C232 + C32785 * C249 +
             C31604 * C229 - C7746 * C218 - C31604 * C230 + C32498 * C248) *
                C32805 +
            (C31623 * C631 - C7744 * C624 - C31623 * C632 + C32785 * C639 +
             C31604 * C633 - C7746 * C625 - C31604 * C634 + C32498 * C640) *
                C32680) *
               C5334 +
           ((C31623 * C241 - C7744 * C224 - C31623 * C242 + C32785 * C254 +
             C31604 * C243 - C7746 * C225 - C31604 * C244 + C32498 * C255) *
                C32805 +
            (C31623 * C1083 - C7744 * C1074 - C31623 * C1084 + C32785 * C1101 +
             C31604 * C1449 - C7746 * C1448 - C31604 * C1450 + C32498 * C1451) *
                C32680) *
               C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C32805 +
            (C31623 * C340 - C7744 * C326 - C31623 * C341 + C32785 * C356 +
             C31604 * C338 - C7746 * C325 - C31604 * C339 + C32498 * C355) *
                C32680) *
               C5333 +
           ((C7894 + C7895) * C32805 + (C8477 + C8476) * C32680) * C5334 +
           C8773 * C32835) *
              C32551 * C213 -
          (((C8472 + C8473) * C32680 + (C7899 + C7898) * C32805) * C32835 +
           ((C8474 + C8475) * C32680 + (C7897 + C7896) * C32805) * C5334 +
           ((C8476 + C8477) * C32680 + (C7895 + C7894) * C32805) * C5333) *
              C32551 * C214 +
          (C8773 * C5333 + (C7903 * C32805 + (C8473 + C8472) * C32680) * C5334 +
           ((C7901 + C7900) * C32805 +
            (C31623 * C6395 - C7744 * C6392 - C31623 * C6396 + C32785 * C6401 +
             C31604 * C6605 - C7746 * C6604 - C31604 * C6606 + C32498 * C6607) *
                C32680) *
               C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
            C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
               C13674 +
           (C8968 + C8969) * C13675 + C12936 * C13676 +
           (C12965 + C12964) * C32819) *
              C32581 * C32551 * C32537 * C110 -
          ((C31604 * C1991 - C7746 * C1985 - C31604 * C1992 + C32498 * C2003 +
            C31623 * C1993 - C7744 * C1986 - C31623 * C1994 + C32785 * C2004) *
               C32819 +
           (C13381 + C13380) * C13676 + (C9405 + C9404) * C13675 +
           (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
            C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
               C13674) *
              C32581 * C32551 * C32537 * C111 +
          ((C31623 * C134 - C7744 * C125 - C31623 * C135 + C32785 * C146 +
            C31604 * C136 - C7746 * C126 - C31604 * C137 + C32498 * C147) *
               C13674 +
           (C31623 * C336 - C7744 * C324 - C31623 * C337 + C32785 * C354 +
            C31604 * C334 - C7746 * C323 - C31604 * C335 + C32498 * C353) *
               C13675 +
           (C31623 * C346 - C7744 * C329 - C31623 * C347 + C32785 * C359 +
            C31604 * C348 - C7746 * C330 - C31604 * C349 + C32498 * C360) *
               C13676 +
           (C31623 * C1991 - C7744 * C1985 - C31623 * C1992 + C32785 * C2003 +
            C31604 * C2371 - C7746 * C2370 - C31604 * C2372 + C32498 * C2373) *
               C32819) *
              C32581 * C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
            C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
               C13674 +
           (C8968 + C8969) * C13675 + C12936 * C13676 +
           (C12965 + C12964) * C32819) *
              C32581 * C32551 * C213 -
          ((C12962 + C12963) * C32819 + C13576 * C13676 + C9602 * C13675 +
           (C7895 + C7894) * C13674) *
              C32581 * C32551 * C214 +
          (C7902 * C13674 + C8771 * C13675 + (C8971 + C8970) * C13676 +
           (C31623 * C7091 - C7744 * C7088 - C31623 * C7092 + C32785 * C7097 +
            C31604 * C7466 - C7746 * C7465 - C31604 * C7467 + C32498 * C7468) *
               C32819) *
              C32581 * C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
             C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
             C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                C32593 * C32867 +
            (C953 + C954 + C955) * C32593 * C32855 + C964 * C32835) *
               C32551 * C444 -
           ((C959 + C960 + C961) * C32593 * C32835 +
            (C958 + C957 + C956) * C32593 * C32855 +
            (C955 + C954 + C953) * C32593 * C32867) *
               C32551 * C445) *
              C446 +
          (((C1297 + C1298 + C1299) * C32593 * C32867 +
            (C1300 + C1301 + C1302) * C32593 * C32855 +
            (C758 * C882 - C759 * C875 - C758 * C883 + C752 * C893 +
             C760 * C880 - C761 * C874 - C760 * C881 + C753 * C892 +
             C762 * C1257 - C763 * C1256 - C762 * C1258 + C32826 * C1259) *
                C32593 * C32835) *
               C32551 * C445 -
           ((C1302 + C1301 + C1300) * C32593 * C32835 +
            (C1299 + C1298 + C1297) * C32593 * C32855 +
            (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
             C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
             C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
                C32593 * C32867) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
            C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
            C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
            C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
            C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
               C32593 * C32581 * C32551 * C444 -
           (C121 * C227 - C122 * C217 - C121 * C228 + C105 * C247 +
            C119 * C229 - C120 * C218 - C119 * C230 + C104 * C248 +
            C117 * C231 - C118 * C219 - C117 * C232 + C103 * C249 +
            C115 * C233 - C116 * C220 - C115 * C234 + C102 * C250 +
            C113 * C235 - C114 * C221 - C113 * C236 + C101 * C251) *
               C32593 * C32581 * C32551 * C445) *
              C446 +
          ((C113 * C233 - C114 * C220 - C113 * C234 + C101 * C250 +
            C115 * C231 - C116 * C219 - C115 * C232 + C102 * C249 +
            C117 * C229 - C118 * C218 - C117 * C230 + C103 * C248 +
            C119 * C227 - C120 * C217 - C119 * C228 + C104 * C247 +
            C121 * C449 - C122 * C448 - C121 * C450 + C105 * C451) *
               C32593 * C32581 * C32551 * C445 -
           (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
            C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
            C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
            C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
            C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
               C32593 * C32581 * C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
             C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
             C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                C32593 * C5333 +
            (C5507 + C5508 + C5509) * C32593 * C5334 + C5518 * C32835) *
               C32551 * C444 -
           ((C5513 + C5514 + C5515) * C32593 * C32835 +
            (C5512 + C5511 + C5510) * C32593 * C5334 +
            (C5509 + C5508 + C5507) * C32593 * C5333) *
               C32551 * C445) *
              C446 +
          (((C5811 + C5812 + C5813) * C32593 * C5333 +
            (C5814 + C5815 + C5816) * C32593 * C5334 +
            (C5336 * C882 - C5337 * C875 - C5336 * C883 + C32864 * C893 +
             C5338 * C880 - C5339 * C874 - C5338 * C881 + C32851 * C892 +
             C5340 * C1257 - C5341 * C1256 - C5340 * C1258 + C32826 * C1259) *
                C32593 * C32835) *
               C32551 * C445 -
           ((C5816 + C5815 + C5814) * C32593 * C32835 +
            (C5813 + C5812 + C5811) * C32593 * C5334 +
            (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
             C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
             C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
                C32593 * C5333) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32593 * C6213 +
            C6326 * C6214 + C6327 * C6215 + C6328 * C6216 + C6329 * C6217) *
               C32551 * C444 -
           (C6330 * C6217 + C6329 * C6216 + C6328 * C6215 + C6327 * C6214 +
            C6326 * C6213) *
               C32551 * C445) *
              C446 +
          ((C6519 * C6213 + C6520 * C6214 + C6521 * C6215 + C6522 * C6216 +
            (C6218 * C6487 - C6219 * C6486 - C6218 * C6488 + C32488 * C6489) *
                C32593 * C6217) *
               C32551 * C445 -
           (C6522 * C6217 + C6521 * C6216 + C6520 * C6215 + C6519 * C6214 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C32593 * C6213) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
             C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
             C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                C10425 +
            (C10703 + C10704 + C10705) * C10426 + C10713 * C32838) *
               C32581 * C32551 * C444 -
           ((C5340 * C1093 - C5341 * C1079 - C5340 * C1094 + C32826 * C1106 +
             C5338 * C1091 - C5339 * C1078 - C5338 * C1092 + C32851 * C1105 +
             C5336 * C1089 - C5337 * C1077 - C5336 * C1090 + C32864 * C1104) *
                C32838 +
            (C6148 + C6149 + C6150) * C10426 +
            (C5509 + C5508 + C5507) * C10425) *
               C32581 * C32551 * C445) *
              C446 +
          (((C5811 + C5812 + C5813) * C10425 +
            (C5336 * C629 - C5337 * C623 - C5336 * C630 + C32864 * C638 +
             C5338 * C631 - C5339 * C624 - C5338 * C632 + C32851 * C639 +
             C5340 * C633 - C5341 * C625 - C5340 * C634 + C32826 * C640) *
                C10426 +
            (C5336 * C1091 - C5337 * C1078 - C5336 * C1092 + C32864 * C1105 +
             C5338 * C1093 - C5339 * C1079 - C5338 * C1094 + C32851 * C1106 +
             C5340 * C2221 - C5341 * C2220 - C5340 * C2222 + C32826 * C2223) *
                C32838) *
               C32581 * C32551 * C445 -
           ((C5340 * C348 - C5341 * C330 - C5340 * C349 + C32826 * C360 +
             C5338 * C346 - C5339 * C329 - C5338 * C347 + C32851 * C359 +
             C5336 * C344 - C5337 * C328 - C5336 * C345 + C32864 * C358) *
                C32838 +
            (C5340 * C334 - C5341 * C323 - C5340 * C335 + C32826 * C353 +
             C5338 * C336 - C5339 * C324 - C5338 * C337 + C32851 * C354 +
             C5336 * C338 - C5337 * C325 - C5336 * C339 + C32864 * C355) *
                C10426 +
            (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
             C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
             C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
                C10425) *
               C32581 * C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C10425 +
             C7131 * C10426 + C7132 * C32838) *
                C32867 +
            (C11435 + C11436 + C11437) * C32855 + C11445 * C32835) *
               C32551 * C444 -
           ((C11441 + C11442 + C11443) * C32835 +
            (C11440 + C11439 + C11438) * C32855 +
            (C11437 + C11436 + C11435) * C32867) *
               C32551 * C445) *
              C446 +
          (((C11702 + C11703 + C11704) * C32867 +
            (C11705 + C11706 + C11707) * C32855 +
            (C6517 * C10425 + C10048 * C10426 +
             (C6218 * C7282 - C6219 * C7281 - C6218 * C7283 + C32488 * C7284) *
                 C32838) *
                C32835) *
               C32551 * C445 -
           ((C11707 + C11706 + C11705) * C32835 +
            (C11704 + C11703 + C11702) * C32855 +
            (C7483 * C32838 + C7482 * C10426 +
             (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                 C10425) *
                C32867) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
             C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
             C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                C32593 * C32867 +
            (C953 + C954 + C955) * C32593 * C32855 + C964 * C32835) *
               C534 -
           ((C1647 + C1648 + C1649) * C32593 * C32835 +
            (C1650 + C1651 + C1652) * C32593 * C32855 +
            (C762 * C336 - C763 * C324 - C762 * C337 + C32826 * C354 +
             C760 * C338 - C761 * C325 - C760 * C339 + C753 * C355 +
             C758 * C340 - C759 * C326 - C758 * C341 + C752 * C356) *
                C32593 * C32867) *
               C535) *
              C444 +
          (((C1652 + C1651 + C1650) * C32593 * C32867 +
            (C1649 + C1648 + C1647) * C32593 * C32855 +
            (C758 * C1601 - C759 * C1598 - C758 * C1602 + C752 * C1607 +
             C760 * C1603 - C761 * C1599 - C760 * C1604 + C753 * C1608 +
             C762 * C1605 - C763 * C1600 - C762 * C1606 + C32826 * C1609) *
                C32593 * C32835) *
               C535 -
           ((C959 + C960 + C961) * C32593 * C32835 +
            (C958 + C957 + C956) * C32593 * C32855 +
            (C955 + C954 + C953) * C32593 * C32867) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
            C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
            C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
            C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
            C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
               C32593 * C32581 * C534 -
           (C121 * C332 - C122 * C322 - C121 * C333 + C105 * C352 +
            C119 * C334 - C120 * C323 - C119 * C335 + C104 * C353 +
            C117 * C336 - C118 * C324 - C117 * C337 + C103 * C354 +
            C115 * C338 - C116 * C325 - C115 * C339 + C102 * C355 +
            C113 * C340 - C114 * C326 - C113 * C341 + C101 * C356) *
               C32593 * C32581 * C535) *
              C444 +
          ((C113 * C627 - C114 * C622 - C113 * C628 + C101 * C637 +
            C115 * C629 - C116 * C623 - C115 * C630 + C102 * C638 +
            C117 * C631 - C118 * C624 - C117 * C632 + C103 * C639 +
            C119 * C633 - C120 * C625 - C119 * C634 + C104 * C640 +
            C121 * C635 - C122 * C626 - C121 * C636 + C105 * C641) *
               C32593 * C32581 * C535 -
           (C121 * C227 - C122 * C217 - C121 * C228 + C105 * C247 +
            C119 * C229 - C120 * C218 - C119 * C230 + C104 * C248 +
            C117 * C231 - C118 * C219 - C117 * C232 + C103 * C249 +
            C115 * C233 - C116 * C220 - C115 * C234 + C102 * C250 +
            C113 * C235 - C114 * C221 - C113 * C236 + C101 * C251) *
               C32593 * C32581 * C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
             C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
             C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                C32593 * C5333 +
            (C5507 + C5508 + C5509) * C32593 * C5334 + C5518 * C32835) *
               C534 -
           ((C6145 + C6146 + C6147) * C32593 * C32835 +
            (C6148 + C6149 + C6150) * C32593 * C5334 +
            (C5340 * C336 - C5341 * C324 - C5340 * C337 + C32826 * C354 +
             C5338 * C338 - C5339 * C325 - C5338 * C339 + C32851 * C355 +
             C5336 * C340 - C5337 * C326 - C5336 * C341 + C32864 * C356) *
                C32593 * C5333) *
               C535) *
              C444 +
          (((C6150 + C6149 + C6148) * C32593 * C5333 +
            (C6147 + C6146 + C6145) * C32593 * C5334 +
            (C5336 * C1601 - C5337 * C1598 - C5336 * C1602 + C32864 * C1607 +
             C5338 * C1603 - C5339 * C1599 - C5338 * C1604 + C32851 * C1608 +
             C5340 * C1605 - C5341 * C1600 - C5340 * C1606 + C32826 * C1609) *
                C32593 * C32835) *
               C535 -
           ((C5513 + C5514 + C5515) * C32593 * C32835 +
            (C5512 + C5511 + C5510) * C32593 * C5334 +
            (C5509 + C5508 + C5507) * C32593 * C5333) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32593 * C6213 +
            C6326 * C6214 + C6327 * C6215 + C6328 * C6216 + C6329 * C6217) *
               C534 -
           (C6723 * C6217 + C6724 * C6216 + C6725 * C6215 + C6726 * C6214 +
            (C6218 * C340 - C6219 * C326 - C6218 * C341 + C32488 * C356) *
                C32593 * C6213) *
               C535) *
              C444 +
          ((C6726 * C6213 + C6725 * C6214 + C6724 * C6215 + C6723 * C6216 +
            (C6218 * C6691 - C6219 * C6690 - C6218 * C6692 + C32488 * C6693) *
                C32593 * C6217) *
               C535 -
           (C6330 * C6217 + C6329 * C6216 + C6328 * C6215 + C6327 * C6214 +
            C6326 * C6213) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
             C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
             C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                C10425 +
            (C10703 + C10704 + C10705) * C10426 + C10713 * C32838) *
               C32581 * C534 -
           ((C10709 + C10710 + C10711) * C32838 +
            (C10708 + C10707 + C10706) * C10426 +
            (C10705 + C10704 + C10703) * C10425) *
               C32581 * C535) *
              C444 +
          (((C6150 + C6149 + C6148) * C10425 +
            (C11212 + C11213 + C11214) * C10426 +
            (C5336 * C2565 - C5337 * C2562 - C5336 * C2566 + C32864 * C2571 +
             C5338 * C2567 - C5339 * C2563 - C5338 * C2568 + C32851 * C2572 +
             C5340 * C2569 - C5341 * C2564 - C5340 * C2570 + C32826 * C2573) *
                C32838) *
               C32581 * C535 -
           ((C11214 + C11213 + C11212) * C32838 +
            (C6148 + C6149 + C6150) * C10426 +
            (C5509 + C5508 + C5507) * C10425) *
               C32581 * C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C10425 +
             C7131 * C10426 + C7132 * C32838) *
                C32867 +
            (C11435 + C11436 + C11437) * C32855 + C11445 * C32835) *
               C534 -
           ((C12000 + C12001 + C12002) * C32835 +
            (C12003 + C12004 + C12005) * C32855 +
            (C7135 * C32838 + C7132 * C10426 + C7131 * C10425) * C32867) *
               C535) *
              C444 +
          (((C12005 + C12004 + C12003) * C32867 +
            (C12002 + C12001 + C12000) * C32855 +
            (C6720 * C10425 + C6974 * C10426 +
             (C6218 * C7630 - C6219 * C7629 - C6218 * C7631 + C32488 * C7632) *
                 C32838) *
                C32835) *
               C535 -
           ((C11441 + C11442 + C11443) * C32835 +
            (C11440 + C11439 + C11438) * C32855 +
            (C11437 + C11436 + C11435) * C32867) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
               C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
               C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
               C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
               C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
                  C32593 * C32581 * C32551 * C32537 * C110 -
              (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
               C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
               C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
               C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
               C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
                  C32593 * C32581 * C32551 * C32537 * C111 +
              (C113 * C134 - C114 * C125 - C113 * C135 + C101 * C146 +
               C115 * C136 - C116 * C126 - C115 * C137 + C102 * C147 +
               C117 * C138 - C118 * C127 - C117 * C139 + C103 * C148 +
               C119 * C140 - C120 * C128 - C119 * C141 + C104 * C149 +
               C121 * C142 - C122 * C129 - C121 * C143 + C105 * C150) *
                  C32593 * C32581 * C32551 * C32537 * C112) +
         std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
               C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
               C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
               C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
               C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
                  C32593 * C32581 * C32551 * C213 -
              (C121 * C227 - C122 * C217 - C121 * C228 + C105 * C247 +
               C119 * C229 - C120 * C218 - C119 * C230 + C104 * C248 +
               C117 * C231 - C118 * C219 - C117 * C232 + C103 * C249 +
               C115 * C233 - C116 * C220 - C115 * C234 + C102 * C250 +
               C113 * C235 - C114 * C221 - C113 * C236 + C101 * C251) *
                  C32593 * C32581 * C32551 * C214 +
              (C113 * C237 - C114 * C222 - C113 * C238 + C101 * C252 +
               C115 * C239 - C116 * C223 - C115 * C240 + C102 * C253 +
               C117 * C241 - C118 * C224 - C117 * C242 + C103 * C254 +
               C119 * C243 - C120 * C225 - C119 * C244 + C104 * C255 +
               C121 * C245 - C122 * C226 - C121 * C246 + C105 * C256) *
                  C32593 * C32581 * C32551 * C215) *
             C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 + C115 * C132 -
           C116 * C124 - C115 * C133 + C102 * C145 + C117 * C134 - C118 * C125 -
           C117 * C135 + C103 * C146 + C119 * C136 - C120 * C126 - C119 * C137 +
           C104 * C147 + C121 * C138 - C122 * C127 - C121 * C139 +
           C105 * C148) *
              C32593 * C32581 * C319 -
          (C121 * C332 - C122 * C322 - C121 * C333 + C105 * C352 + C119 * C334 -
           C120 * C323 - C119 * C335 + C104 * C353 + C117 * C336 - C118 * C324 -
           C117 * C337 + C103 * C354 + C115 * C338 - C116 * C325 - C115 * C339 +
           C102 * C355 + C113 * C340 - C114 * C326 - C113 * C341 +
           C101 * C356) *
              C32593 * C32581 * C320 +
          (C113 * C342 - C114 * C327 - C113 * C343 + C101 * C357 + C115 * C344 -
           C116 * C328 - C115 * C345 + C102 * C358 + C117 * C346 - C118 * C329 -
           C117 * C347 + C103 * C359 + C119 * C348 - C120 * C330 - C119 * C349 +
           C104 * C360 + C121 * C350 - C122 * C331 - C121 * C351 +
           C105 * C361) *
              C32593 * C32581 * C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
            C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
            C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
               C32593 * C32867 +
           (C758 * C235 - C759 * C221 - C758 * C236 + C752 * C251 +
            C760 * C233 - C761 * C220 - C760 * C234 + C753 * C250 +
            C762 * C231 - C763 * C219 - C762 * C232 + C32826 * C249) *
               C32593 * C32855 +
           (C758 * C237 - C759 * C222 - C758 * C238 + C752 * C252 +
            C760 * C239 - C761 * C223 - C760 * C240 + C753 * C253 +
            C762 * C241 - C763 * C224 - C762 * C242 + C32826 * C254) *
               C32593 * C32835) *
              C32551 * C32537 * C110 -
          ((C762 * C243 - C763 * C225 - C762 * C244 + C32826 * C255 +
            C760 * C241 - C761 * C224 - C760 * C242 + C753 * C254 +
            C758 * C239 - C759 * C223 - C758 * C240 + C752 * C253) *
               C32593 * C32835 +
           (C762 * C229 - C763 * C218 - C762 * C230 + C32826 * C248 +
            C760 * C231 - C761 * C219 - C760 * C232 + C753 * C249 +
            C758 * C233 - C759 * C220 - C758 * C234 + C752 * C250) *
               C32593 * C32855 +
           (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
            C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
            C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
               C32593 * C32867) *
              C32551 * C32537 * C111 +
          ((C758 * C134 - C759 * C125 - C758 * C135 + C752 * C146 +
            C760 * C136 - C761 * C126 - C760 * C137 + C753 * C147 +
            C762 * C138 - C763 * C127 - C762 * C139 + C32826 * C148) *
               C32593 * C32867 +
           (C758 * C231 - C759 * C219 - C758 * C232 + C752 * C249 +
            C760 * C229 - C761 * C218 - C760 * C230 + C753 * C248 +
            C762 * C227 - C763 * C217 - C762 * C228 + C32826 * C247) *
               C32593 * C32855 +
           (C758 * C241 - C759 * C224 - C758 * C242 + C752 * C254 +
            C760 * C243 - C761 * C225 - C760 * C244 + C753 * C255 +
            C762 * C245 - C763 * C226 - C762 * C246 + C32826 * C256) *
               C32593 * C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
            C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
            C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
               C32593 * C32867 +
           (C953 + C954 + C955) * C32593 * C32855 + C964 * C32835) *
              C32551 * C213 -
          ((C959 + C960 + C961) * C32593 * C32835 +
           (C958 + C957 + C956) * C32593 * C32855 +
           (C955 + C954 + C953) * C32593 * C32867) *
              C32551 * C214 +
          (C964 * C32867 + (C961 + C960 + C959) * C32593 * C32855 +
           (C758 * C886 - C759 * C877 - C758 * C887 + C752 * C895 +
            C760 * C888 - C761 * C878 - C760 * C889 + C753 * C896 +
            C762 * C890 - C763 * C879 - C762 * C891 + C32826 * C897) *
               C32593 * C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
            C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
            C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
               C32593 * C32867 +
           (C953 + C954 + C955) * C32593 * C32855 + C964 * C32835) *
              C319 -
          ((C762 * C1083 - C763 * C1074 - C762 * C1084 + C32826 * C1101 +
            C760 * C1085 - C761 * C1075 - C760 * C1086 + C753 * C1102 +
            C758 * C1087 - C759 * C1076 - C758 * C1088 + C752 * C1103) *
               C32593 * C32835 +
           (C762 * C631 - C763 * C624 - C762 * C632 + C32826 * C639 +
            C760 * C629 - C761 * C623 - C760 * C630 + C753 * C638 +
            C758 * C627 - C759 * C622 - C758 * C628 + C752 * C637) *
               C32593 * C32855 +
           (C762 * C336 - C763 * C324 - C762 * C337 + C32826 * C354 +
            C760 * C338 - C761 * C325 - C760 * C339 + C753 * C355 +
            C758 * C340 - C759 * C326 - C758 * C341 + C752 * C356) *
               C32593 * C32867) *
              C320 +
          ((C758 * C342 - C759 * C327 - C758 * C343 + C752 * C357 +
            C760 * C344 - C761 * C328 - C760 * C345 + C753 * C358 +
            C762 * C346 - C763 * C329 - C762 * C347 + C32826 * C359) *
               C32593 * C32867 +
           (C758 * C1089 - C759 * C1077 - C758 * C1090 + C752 * C1104 +
            C760 * C1091 - C761 * C1078 - C760 * C1092 + C753 * C1105 +
            C762 * C1093 - C763 * C1079 - C762 * C1094 + C32826 * C1106) *
               C32593 * C32855 +
           (C758 * C1095 - C759 * C1080 - C758 * C1096 + C752 * C1107 +
            C760 * C1097 - C761 * C1081 - C760 * C1098 + C753 * C1108 +
            C762 * C1099 - C763 * C1082 - C762 * C1100 + C32826 * C1109) *
               C32593 * C32835) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C32593 * C5333 +
           (C5336 * C235 - C5337 * C221 - C5336 * C236 + C32864 * C251 +
            C5338 * C233 - C5339 * C220 - C5338 * C234 + C32851 * C250 +
            C5340 * C231 - C5341 * C219 - C5340 * C232 + C32826 * C249) *
               C32593 * C5334 +
           (C5336 * C237 - C5337 * C222 - C5336 * C238 + C32864 * C252 +
            C5338 * C239 - C5339 * C223 - C5338 * C240 + C32851 * C253 +
            C5340 * C241 - C5341 * C224 - C5340 * C242 + C32826 * C254) *
               C32593 * C32835) *
              C32551 * C32537 * C110 -
          ((C5340 * C243 - C5341 * C225 - C5340 * C244 + C32826 * C255 +
            C5338 * C241 - C5339 * C224 - C5338 * C242 + C32851 * C254 +
            C5336 * C239 - C5337 * C223 - C5336 * C240 + C32864 * C253) *
               C32593 * C32835 +
           (C5340 * C229 - C5341 * C218 - C5340 * C230 + C32826 * C248 +
            C5338 * C231 - C5339 * C219 - C5338 * C232 + C32851 * C249 +
            C5336 * C233 - C5337 * C220 - C5336 * C234 + C32864 * C250) *
               C32593 * C5334 +
           (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
            C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
            C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
               C32593 * C5333) *
              C32551 * C32537 * C111 +
          ((C5336 * C134 - C5337 * C125 - C5336 * C135 + C32864 * C146 +
            C5338 * C136 - C5339 * C126 - C5338 * C137 + C32851 * C147 +
            C5340 * C138 - C5341 * C127 - C5340 * C139 + C32826 * C148) *
               C32593 * C5333 +
           (C5336 * C231 - C5337 * C219 - C5336 * C232 + C32864 * C249 +
            C5338 * C229 - C5339 * C218 - C5338 * C230 + C32851 * C248 +
            C5340 * C227 - C5341 * C217 - C5340 * C228 + C32826 * C247) *
               C32593 * C5334 +
           (C5336 * C241 - C5337 * C224 - C5336 * C242 + C32864 * C254 +
            C5338 * C243 - C5339 * C225 - C5338 * C244 + C32851 * C255 +
            C5340 * C245 - C5341 * C226 - C5340 * C246 + C32826 * C256) *
               C32593 * C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C32593 * C5333 +
           (C5507 + C5508 + C5509) * C32593 * C5334 + C5518 * C32835) *
              C32551 * C213 -
          ((C5513 + C5514 + C5515) * C32593 * C32835 +
           (C5512 + C5511 + C5510) * C32593 * C5334 +
           (C5509 + C5508 + C5507) * C32593 * C5333) *
              C32551 * C214 +
          (C5518 * C5333 + (C5515 + C5514 + C5513) * C32593 * C5334 +
           (C5336 * C886 - C5337 * C877 - C5336 * C887 + C32864 * C895 +
            C5338 * C888 - C5339 * C878 - C5338 * C889 + C32851 * C896 +
            C5340 * C890 - C5341 * C879 - C5340 * C891 + C32826 * C897) *
               C32593 * C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C32593 * C5333 +
           (C5507 + C5508 + C5509) * C32593 * C5334 + C5518 * C32835) *
              C319 -
          ((C5340 * C1083 - C5341 * C1074 - C5340 * C1084 + C32826 * C1101 +
            C5338 * C1085 - C5339 * C1075 - C5338 * C1086 + C32851 * C1102 +
            C5336 * C1087 - C5337 * C1076 - C5336 * C1088 + C32864 * C1103) *
               C32593 * C32835 +
           (C5340 * C631 - C5341 * C624 - C5340 * C632 + C32826 * C639 +
            C5338 * C629 - C5339 * C623 - C5338 * C630 + C32851 * C638 +
            C5336 * C627 - C5337 * C622 - C5336 * C628 + C32864 * C637) *
               C32593 * C5334 +
           (C5340 * C336 - C5341 * C324 - C5340 * C337 + C32826 * C354 +
            C5338 * C338 - C5339 * C325 - C5338 * C339 + C32851 * C355 +
            C5336 * C340 - C5337 * C326 - C5336 * C341 + C32864 * C356) *
               C32593 * C5333) *
              C320 +
          ((C5336 * C342 - C5337 * C327 - C5336 * C343 + C32864 * C357 +
            C5338 * C344 - C5339 * C328 - C5338 * C345 + C32851 * C358 +
            C5340 * C346 - C5341 * C329 - C5340 * C347 + C32826 * C359) *
               C32593 * C5333 +
           (C5336 * C1089 - C5337 * C1077 - C5336 * C1090 + C32864 * C1104 +
            C5338 * C1091 - C5339 * C1078 - C5338 * C1092 + C32851 * C1105 +
            C5340 * C1093 - C5341 * C1079 - C5340 * C1094 + C32826 * C1106) *
               C32593 * C5334 +
           (C5336 * C1095 - C5337 * C1080 - C5336 * C1096 + C32864 * C1107 +
            C5338 * C1097 - C5339 * C1081 - C5338 * C1098 + C32851 * C1108 +
            C5340 * C1099 - C5341 * C1082 - C5340 * C1100 + C32826 * C1109) *
               C32593 * C32835) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
               C32593 * C6213 +
           (C6218 * C235 - C6219 * C221 - C6218 * C236 + C32488 * C251) *
               C32593 * C6214 +
           (C6218 * C237 - C6219 * C222 - C6218 * C238 + C32488 * C252) *
               C32593 * C6215 +
           (C6218 * C884 - C6219 * C876 - C6218 * C885 + C32488 * C894) *
               C32593 * C6216 +
           (C6218 * C886 - C6219 * C877 - C6218 * C887 + C32488 * C895) *
               C32593 * C6217) *
              C32551 * C32537 * C110 -
          ((C6218 * C888 - C6219 * C878 - C6218 * C889 + C32488 * C896) *
               C32593 * C6217 +
           (C6218 * C882 - C6219 * C875 - C6218 * C883 + C32488 * C893) *
               C32593 * C6216 +
           (C6218 * C239 - C6219 * C223 - C6218 * C240 + C32488 * C253) *
               C32593 * C6215 +
           (C6218 * C233 - C6219 * C220 - C6218 * C234 + C32488 * C250) *
               C32593 * C6214 +
           (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
               C32593 * C6213) *
              C32551 * C32537 * C111 +
          ((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
               C32593 * C6213 +
           (C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
               C32593 * C6214 +
           (C6218 * C241 - C6219 * C224 - C6218 * C242 + C32488 * C254) *
               C32593 * C6215 +
           (C6218 * C880 - C6219 * C874 - C6218 * C881 + C32488 * C892) *
               C32593 * C6216 +
           (C6218 * C890 - C6219 * C879 - C6218 * C891 + C32488 * C897) *
               C32593 * C6217) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
               C32593 * C6213 +
           C6326 * C6214 + C6327 * C6215 + C6328 * C6216 + C6329 * C6217) *
              C32551 * C213 -
          (C6330 * C6217 + C6329 * C6216 + C6328 * C6215 + C6327 * C6214 +
           C6326 * C6213) *
              C32551 * C214 +
          (C6327 * C6213 + C6328 * C6214 + C6329 * C6215 + C6330 * C6216 +
           (C6218 * C6286 - C6219 * C6283 - C6218 * C6287 + C32488 * C6289) *
               C32593 * C6217) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
               C32593 * C6213 +
           C6326 * C6214 + C6327 * C6215 + C6328 * C6216 + C6329 * C6217) *
              C319 -
          ((C6218 * C6395 - C6219 * C6392 - C6218 * C6396 + C32488 * C6401) *
               C32593 * C6217 +
           (C6218 * C1601 - C6219 * C1598 - C6218 * C1602 + C32488 * C1607) *
               C32593 * C6216 +
           (C6218 * C1087 - C6219 * C1076 - C6218 * C1088 + C32488 * C1103) *
               C32593 * C6215 +
           (C6218 * C627 - C6219 * C622 - C6218 * C628 + C32488 * C637) *
               C32593 * C6214 +
           (C6218 * C340 - C6219 * C326 - C6218 * C341 + C32488 * C356) *
               C32593 * C6213) *
              C320 +
          ((C6218 * C342 - C6219 * C327 - C6218 * C343 + C32488 * C357) *
               C32593 * C6213 +
           (C6218 * C1089 - C6219 * C1077 - C6218 * C1090 + C32488 * C1104) *
               C32593 * C6214 +
           (C6218 * C1095 - C6219 * C1080 - C6218 * C1096 + C32488 * C1107) *
               C32593 * C6215 +
           (C6218 * C6397 - C6219 * C6393 - C6218 * C6398 + C32488 * C6402) *
               C32593 * C6216 +
           (C6218 * C6399 - C6219 * C6394 - C6218 * C6400 + C32488 * C6403) *
               C32593 * C6217) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C10425 +
           (C5336 * C340 - C5337 * C326 - C5336 * C341 + C32864 * C356 +
            C5338 * C338 - C5339 * C325 - C5338 * C339 + C32851 * C355 +
            C5340 * C336 - C5341 * C324 - C5340 * C337 + C32826 * C354) *
               C10426 +
           (C5336 * C342 - C5337 * C327 - C5336 * C343 + C32864 * C357 +
            C5338 * C344 - C5339 * C328 - C5338 * C345 + C32851 * C358 +
            C5340 * C346 - C5341 * C329 - C5340 * C347 + C32826 * C359) *
               C32838) *
              C32581 * C32551 * C32537 * C110 -
          ((C5340 * C348 - C5341 * C330 - C5340 * C349 + C32826 * C360 +
            C5338 * C346 - C5339 * C329 - C5338 * C347 + C32851 * C359 +
            C5336 * C344 - C5337 * C328 - C5336 * C345 + C32864 * C358) *
               C32838 +
           (C5340 * C334 - C5341 * C323 - C5340 * C335 + C32826 * C353 +
            C5338 * C336 - C5339 * C324 - C5338 * C337 + C32851 * C354 +
            C5336 * C338 - C5337 * C325 - C5336 * C339 + C32864 * C355) *
               C10426 +
           (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
            C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
            C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
               C10425) *
              C32581 * C32551 * C32537 * C111 +
          ((C5336 * C134 - C5337 * C125 - C5336 * C135 + C32864 * C146 +
            C5338 * C136 - C5339 * C126 - C5338 * C137 + C32851 * C147 +
            C5340 * C138 - C5341 * C127 - C5340 * C139 + C32826 * C148) *
               C10425 +
           (C5336 * C336 - C5337 * C324 - C5336 * C337 + C32864 * C354 +
            C5338 * C334 - C5339 * C323 - C5338 * C335 + C32851 * C353 +
            C5340 * C332 - C5341 * C322 - C5340 * C333 + C32826 * C352) *
               C10426 +
           (C5336 * C346 - C5337 * C329 - C5336 * C347 + C32864 * C359 +
            C5338 * C348 - C5339 * C330 - C5338 * C349 + C32851 * C360 +
            C5340 * C350 - C5341 * C331 - C5340 * C351 + C32826 * C361) *
               C32838) *
              C32581 * C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C10425 +
           (C5336 * C340 - C5337 * C326 - C5336 * C341 + C32864 * C356 +
            C5338 * C338 - C5339 * C325 - C5338 * C339 + C32851 * C355 +
            C5340 * C336 - C5341 * C324 - C5340 * C337 + C32826 * C354) *
               C10426 +
           (C5336 * C342 - C5337 * C327 - C5336 * C343 + C32864 * C357 +
            C5338 * C344 - C5339 * C328 - C5338 * C345 + C32851 * C358 +
            C5340 * C346 - C5341 * C329 - C5340 * C347 + C32826 * C359) *
               C32838) *
              C32581 * C32551 * C213 -
          ((C5340 * C1093 - C5341 * C1079 - C5340 * C1094 + C32826 * C1106 +
            C5338 * C1091 - C5339 * C1078 - C5338 * C1092 + C32851 * C1105 +
            C5336 * C1089 - C5337 * C1077 - C5336 * C1090 + C32864 * C1104) *
               C32838 +
           (C6148 + C6149 + C6150) * C10426 +
           (C5509 + C5508 + C5507) * C10425) *
              C32581 * C32551 * C214 +
          (C5517 * C10425 + (C6147 + C6146 + C6145) * C10426 +
           (C5336 * C1095 - C5337 * C1080 - C5336 * C1096 + C32864 * C1107 +
            C5338 * C1097 - C5339 * C1081 - C5338 * C1098 + C32851 * C1108 +
            C5340 * C1099 - C5341 * C1082 - C5340 * C1100 + C32826 * C1109) *
               C32838) *
              C32581 * C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C10425 +
           (C10703 + C10704 + C10705) * C10426 + C10713 * C32838) *
              C32581 * C319 -
          ((C10709 + C10710 + C10711) * C32838 +
           (C10708 + C10707 + C10706) * C10426 +
           (C10705 + C10704 + C10703) * C10425) *
              C32581 * C320 +
          (C10713 * C10425 + (C10711 + C10710 + C10709) * C10426 +
           (C5336 * C1997 - C5337 * C1988 - C5336 * C1998 + C32864 * C2006 +
            C5338 * C1999 - C5339 * C1989 - C5338 * C2000 + C32851 * C2007 +
            C5340 * C2001 - C5341 * C1990 - C5340 * C2002 + C32826 * C2008) *
               C32838) *
              C32581 * C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C10425 +
            C7131 * C10426 + C7132 * C32838) *
               C32867 +
           (C6321 * C10425 + C6722 * C10426 + C6972 * C32838) * C32855 +
           (C6322 * C10425 + C6721 * C10426 + C6973 * C32838) * C32835) *
              C32551 * C32537 * C110 -
          ((C7315 * C32838 + C7314 * C10426 + C6516 * C10425) * C32835 +
           (C7313 * C32838 + C7312 * C10426 + C6515 * C10425) * C32855 +
           (C7483 * C32838 + C7482 * C10426 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C10425) *
               C32867) *
              C32551 * C32537 * C111 +
          (((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
                C10425 +
            (C6218 * C336 - C6219 * C324 - C6218 * C337 + C32488 * C354) *
                C10426 +
            (C6218 * C346 - C6219 * C329 - C6218 * C347 + C32488 * C359) *
                C32838) *
               C32867 +
           ((C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
                C10425 +
            (C6218 * C631 - C6219 * C624 - C6218 * C632 + C32488 * C639) *
                C10426 +
            (C6218 * C1093 - C6219 * C1079 - C6218 * C1094 + C32488 * C1106) *
                C32838) *
               C32855 +
           ((C6218 * C241 - C6219 * C224 - C6218 * C242 + C32488 * C254) *
                C10425 +
            (C6218 * C1083 - C6219 * C1074 - C6218 * C1084 + C32488 * C1101) *
                C10426 +
            (C6218 * C1099 - C6219 * C1082 - C6218 * C1100 + C32488 * C1109) *
                C32838) *
               C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C10425 +
            C7131 * C10426 + C7132 * C32838) *
               C32867 +
           (C11435 + C11436 + C11437) * C32855 + C11445 * C32835) *
              C32551 * C213 -
          ((C11441 + C11442 + C11443) * C32835 +
           (C11440 + C11439 + C11438) * C32855 +
           (C11437 + C11436 + C11435) * C32867) *
              C32551 * C214 +
          (C11445 * C32867 + (C11443 + C11442 + C11441) * C32855 +
           (C6324 * C10425 + C6719 * C10426 +
            (C6218 * C6399 - C6219 * C6394 - C6218 * C6400 + C32488 * C6403) *
                C32838) *
               C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C10425 +
            C7131 * C10426 + C7132 * C32838) *
               C32867 +
           (C11435 + C11436 + C11437) * C32855 + C11445 * C32835) *
              C319 -
          ((C7133 * C32838 + C6973 * C10426 + C6721 * C10425) * C32835 +
           (C7134 * C32838 + C6972 * C10426 + C6722 * C10425) * C32855 +
           (C7135 * C32838 + C7132 * C10426 + C7131 * C10425) * C32867) *
              C320 +
          ((C7132 * C10425 + C7135 * C10426 +
            (C6218 * C1997 - C6219 * C1988 - C6218 * C1998 + C32488 * C2006) *
                C32838) *
               C32867 +
           (C6972 * C10425 + C7134 * C10426 +
            (C6218 * C7093 - C6219 * C7089 - C6218 * C7094 + C32488 * C7098) *
                C32838) *
               C32855 +
           (C6973 * C10425 + C7133 * C10426 +
            (C6218 * C7095 - C6219 * C7090 - C6218 * C7096 + C32488 * C7099) *
                C32838) *
               C32835) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
             C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
             C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                C32593 * C32867 +
            (C953 + C954 + C955) * C32593 * C32855 + C964 * C32835) *
               C534 -
           ((C762 * C1083 - C763 * C1074 - C762 * C1084 + C32826 * C1101 +
             C760 * C1085 - C761 * C1075 - C760 * C1086 + C753 * C1102 +
             C758 * C1087 - C759 * C1076 - C758 * C1088 + C752 * C1103) *
                C32593 * C32835 +
            (C762 * C631 - C763 * C624 - C762 * C632 + C32826 * C639 +
             C760 * C629 - C761 * C623 - C760 * C630 + C753 * C638 +
             C758 * C627 - C759 * C622 - C758 * C628 + C752 * C637) *
                C32593 * C32855 +
            (C762 * C336 - C763 * C324 - C762 * C337 + C32826 * C354 +
             C760 * C338 - C761 * C325 - C760 * C339 + C753 * C355 +
             C758 * C340 - C759 * C326 - C758 * C341 + C752 * C356) *
                C32593 * C32867) *
               C535) *
              C32537 * C446 +
          (((C758 * C338 - C759 * C325 - C758 * C339 + C752 * C355 +
             C760 * C336 - C761 * C324 - C760 * C337 + C753 * C354 +
             C762 * C334 - C763 * C323 - C762 * C335 + C32826 * C353) *
                C32593 * C32867 +
            (C758 * C629 - C759 * C623 - C758 * C630 + C752 * C638 +
             C760 * C631 - C761 * C624 - C760 * C632 + C753 * C639 +
             C762 * C633 - C763 * C625 - C762 * C634 + C32826 * C640) *
                C32593 * C32855 +
            (C758 * C1085 - C759 * C1075 - C758 * C1086 + C752 * C1102 +
             C760 * C1083 - C761 * C1074 - C760 * C1084 + C753 * C1101 +
             C762 * C1449 - C763 * C1448 - C762 * C1450 + C32826 * C1451) *
                C32593 * C32835) *
               C535 -
           ((C1302 + C1301 + C1300) * C32593 * C32835 +
            (C1299 + C1298 + C1297) * C32593 * C32855 +
            (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
             C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
             C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
                C32593 * C32867) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
            C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
            C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
            C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
            C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
               C32593 * C32581 * C534 -
           (C121 * C332 - C122 * C322 - C121 * C333 + C105 * C352 +
            C119 * C334 - C120 * C323 - C119 * C335 + C104 * C353 +
            C117 * C336 - C118 * C324 - C117 * C337 + C103 * C354 +
            C115 * C338 - C116 * C325 - C115 * C339 + C102 * C355 +
            C113 * C340 - C114 * C326 - C113 * C341 + C101 * C356) *
               C32593 * C32581 * C535) *
              C32537 * C446 +
          ((C113 * C338 - C114 * C325 - C113 * C339 + C101 * C355 +
            C115 * C336 - C116 * C324 - C115 * C337 + C102 * C354 +
            C117 * C334 - C118 * C323 - C117 * C335 + C103 * C353 +
            C119 * C332 - C120 * C322 - C119 * C333 + C104 * C352 +
            C121 * C537 - C122 * C536 - C121 * C538 + C105 * C539) *
               C32593 * C32581 * C535 -
           (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
            C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
            C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
            C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
            C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
               C32593 * C32581 * C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
             C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
             C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                C32593 * C5333 +
            (C5507 + C5508 + C5509) * C32593 * C5334 + C5518 * C32835) *
               C534 -
           ((C5340 * C1083 - C5341 * C1074 - C5340 * C1084 + C32826 * C1101 +
             C5338 * C1085 - C5339 * C1075 - C5338 * C1086 + C32851 * C1102 +
             C5336 * C1087 - C5337 * C1076 - C5336 * C1088 + C32864 * C1103) *
                C32593 * C32835 +
            (C5340 * C631 - C5341 * C624 - C5340 * C632 + C32826 * C639 +
             C5338 * C629 - C5339 * C623 - C5338 * C630 + C32851 * C638 +
             C5336 * C627 - C5337 * C622 - C5336 * C628 + C32864 * C637) *
                C32593 * C5334 +
            (C5340 * C336 - C5341 * C324 - C5340 * C337 + C32826 * C354 +
             C5338 * C338 - C5339 * C325 - C5338 * C339 + C32851 * C355 +
             C5336 * C340 - C5337 * C326 - C5336 * C341 + C32864 * C356) *
                C32593 * C5333) *
               C535) *
              C32537 * C446 +
          (((C5336 * C338 - C5337 * C325 - C5336 * C339 + C32864 * C355 +
             C5338 * C336 - C5339 * C324 - C5338 * C337 + C32851 * C354 +
             C5340 * C334 - C5341 * C323 - C5340 * C335 + C32826 * C353) *
                C32593 * C5333 +
            (C5336 * C629 - C5337 * C623 - C5336 * C630 + C32864 * C638 +
             C5338 * C631 - C5339 * C624 - C5338 * C632 + C32851 * C639 +
             C5340 * C633 - C5341 * C625 - C5340 * C634 + C32826 * C640) *
                C32593 * C5334 +
            (C5336 * C1085 - C5337 * C1075 - C5336 * C1086 + C32864 * C1102 +
             C5338 * C1083 - C5339 * C1074 - C5338 * C1084 + C32851 * C1101 +
             C5340 * C1449 - C5341 * C1448 - C5340 * C1450 + C32826 * C1451) *
                C32593 * C32835) *
               C535 -
           ((C5816 + C5815 + C5814) * C32593 * C32835 +
            (C5813 + C5812 + C5811) * C32593 * C5334 +
            (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
             C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
             C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
                C32593 * C5333) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32593 * C6213 +
            C6326 * C6214 + C6327 * C6215 + C6328 * C6216 + C6329 * C6217) *
               C534 -
           ((C6218 * C6395 - C6219 * C6392 - C6218 * C6396 + C32488 * C6401) *
                C32593 * C6217 +
            (C6218 * C1601 - C6219 * C1598 - C6218 * C1602 + C32488 * C1607) *
                C32593 * C6216 +
            (C6218 * C1087 - C6219 * C1076 - C6218 * C1088 + C32488 * C1103) *
                C32593 * C6215 +
            (C6218 * C627 - C6219 * C622 - C6218 * C628 + C32488 * C637) *
                C32593 * C6214 +
            (C6218 * C340 - C6219 * C326 - C6218 * C341 + C32488 * C356) *
                C32593 * C6213) *
               C535) *
              C32537 * C446 +
          (((C6218 * C338 - C6219 * C325 - C6218 * C339 + C32488 * C355) *
                C32593 * C6213 +
            (C6218 * C629 - C6219 * C623 - C6218 * C630 + C32488 * C638) *
                C32593 * C6214 +
            (C6218 * C1085 - C6219 * C1075 - C6218 * C1086 + C32488 * C1102) *
                C32593 * C6215 +
            (C6218 * C1603 - C6219 * C1599 - C6218 * C1604 + C32488 * C1608) *
                C32593 * C6216 +
            (C6218 * C6605 - C6219 * C6604 - C6218 * C6606 + C32488 * C6607) *
                C32593 * C6217) *
               C535 -
           (C6522 * C6217 + C6521 * C6216 + C6520 * C6215 + C6519 * C6214 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C32593 * C6213) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
             C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
             C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                C10425 +
            (C10703 + C10704 + C10705) * C10426 + C10713 * C32838) *
               C32581 * C534 -
           ((C10709 + C10710 + C10711) * C32838 +
            (C10708 + C10707 + C10706) * C10426 +
            (C10705 + C10704 + C10703) * C10425) *
               C32581 * C535) *
              C32537 * C446 +
          (((C11042 + C11043 + C11044) * C10425 +
            (C11045 + C11046 + C11047) * C10426 +
            (C5336 * C1993 - C5337 * C1986 - C5336 * C1994 + C32864 * C2004 +
             C5338 * C1991 - C5339 * C1985 - C5338 * C1992 + C32851 * C2003 +
             C5340 * C2371 - C5341 * C2370 - C5340 * C2372 + C32826 * C2373) *
                C32838) *
               C32581 * C535 -
           ((C11047 + C11046 + C11045) * C32838 +
            (C11044 + C11043 + C11042) * C10426 +
            (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
             C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
             C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
                C10425) *
               C32581 * C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C10425 +
             C7131 * C10426 + C7132 * C32838) *
                C32867 +
            (C11435 + C11436 + C11437) * C32855 + C11445 * C32835) *
               C534 -
           ((C7133 * C32838 + C6973 * C10426 + C6721 * C10425) * C32835 +
            (C7134 * C32838 + C6972 * C10426 + C6722 * C10425) * C32855 +
            (C7135 * C32838 + C7132 * C10426 + C7131 * C10425) * C32867) *
               C535) *
              C32537 * C446 +
          (((C7482 * C10425 + C7483 * C10426 +
             (C6218 * C1993 - C6219 * C1986 - C6218 * C1994 + C32488 * C2004) *
                 C32838) *
                C32867 +
            (C7312 * C10425 + C7313 * C10426 +
             (C6218 * C2567 - C6219 * C2563 - C6218 * C2568 + C32488 * C2572) *
                 C32838) *
                C32855 +
            (C7314 * C10425 + C7315 * C10426 +
             (C6218 * C7466 - C6219 * C7465 - C6218 * C7467 + C32488 * C7468) *
                 C32838) *
                C32835) *
               C535 -
           ((C11707 + C11706 + C11705) * C32835 +
            (C11704 + C11703 + C11702) * C32855 +
            (C7483 * C32838 + C7482 * C10426 +
             (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                 C10425) *
                C32867) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 + C115 * C132 -
           C116 * C124 - C115 * C133 + C102 * C145 + C117 * C134 - C118 * C125 -
           C117 * C135 + C103 * C146 + C119 * C136 - C120 * C126 - C119 * C137 +
           C104 * C147 + C121 * C138 - C122 * C127 - C121 * C139 +
           C105 * C148) *
              C32593 * C32581 * C32551 * C213 -
          (C121 * C227 - C122 * C217 - C121 * C228 + C105 * C247 + C119 * C229 -
           C120 * C218 - C119 * C230 + C104 * C248 + C117 * C231 - C118 * C219 -
           C117 * C232 + C103 * C249 + C115 * C233 - C116 * C220 - C115 * C234 +
           C102 * C250 + C113 * C235 - C114 * C221 - C113 * C236 +
           C101 * C251) *
              C32593 * C32581 * C32551 * C214 +
          (C113 * C237 - C114 * C222 - C113 * C238 + C101 * C252 + C115 * C239 -
           C116 * C223 - C115 * C240 + C102 * C253 + C117 * C241 - C118 * C224 -
           C117 * C242 + C103 * C254 + C119 * C243 - C120 * C225 - C119 * C244 +
           C104 * C255 + C121 * C245 - C122 * C226 - C121 * C246 +
           C105 * C256) *
              C32593 * C32581 * C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 + C115 * C132 -
           C116 * C124 - C115 * C133 + C102 * C145 + C117 * C134 - C118 * C125 -
           C117 * C135 + C103 * C146 + C119 * C136 - C120 * C126 - C119 * C137 +
           C104 * C147 + C121 * C138 - C122 * C127 - C121 * C139 +
           C105 * C148) *
              C32593 * C32581 * C32551 * C32537 * C110 -
          (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 + C119 * C138 -
           C120 * C127 - C119 * C139 + C104 * C148 + C117 * C136 - C118 * C126 -
           C117 * C137 + C103 * C147 + C115 * C134 - C116 * C125 - C115 * C135 +
           C102 * C146 + C113 * C132 - C114 * C124 - C113 * C133 +
           C101 * C145) *
              C32593 * C32581 * C32551 * C32537 * C111 +
          (C113 * C134 - C114 * C125 - C113 * C135 + C101 * C146 + C115 * C136 -
           C116 * C126 - C115 * C137 + C102 * C147 + C117 * C138 - C118 * C127 -
           C117 * C139 + C103 * C148 + C119 * C140 - C120 * C128 - C119 * C141 +
           C104 * C149 + C121 * C142 - C122 * C129 - C121 * C143 +
           C105 * C150) *
              C32593 * C32581 * C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
            C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
            C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
               C32593 * C32867 +
           (C758 * C235 - C759 * C221 - C758 * C236 + C752 * C251 +
            C760 * C233 - C761 * C220 - C760 * C234 + C753 * C250 +
            C762 * C231 - C763 * C219 - C762 * C232 + C32826 * C249) *
               C32593 * C32855 +
           (C758 * C237 - C759 * C222 - C758 * C238 + C752 * C252 +
            C760 * C239 - C761 * C223 - C760 * C240 + C753 * C253 +
            C762 * C241 - C763 * C224 - C762 * C242 + C32826 * C254) *
               C32593 * C32835) *
              C32551 * C32537 * C110 -
          ((C762 * C243 - C763 * C225 - C762 * C244 + C32826 * C255 +
            C760 * C241 - C761 * C224 - C760 * C242 + C753 * C254 +
            C758 * C239 - C759 * C223 - C758 * C240 + C752 * C253) *
               C32593 * C32835 +
           (C762 * C229 - C763 * C218 - C762 * C230 + C32826 * C248 +
            C760 * C231 - C761 * C219 - C760 * C232 + C753 * C249 +
            C758 * C233 - C759 * C220 - C758 * C234 + C752 * C250) *
               C32593 * C32855 +
           (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
            C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
            C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
               C32593 * C32867) *
              C32551 * C32537 * C111 +
          ((C758 * C134 - C759 * C125 - C758 * C135 + C752 * C146 +
            C760 * C136 - C761 * C126 - C760 * C137 + C753 * C147 +
            C762 * C138 - C763 * C127 - C762 * C139 + C32826 * C148) *
               C32593 * C32867 +
           (C758 * C231 - C759 * C219 - C758 * C232 + C752 * C249 +
            C760 * C229 - C761 * C218 - C760 * C230 + C753 * C248 +
            C762 * C227 - C763 * C217 - C762 * C228 + C32826 * C247) *
               C32593 * C32855 +
           (C758 * C241 - C759 * C224 - C758 * C242 + C752 * C254 +
            C760 * C243 - C761 * C225 - C760 * C244 + C753 * C255 +
            C762 * C245 - C763 * C226 - C762 * C246 + C32826 * C256) *
               C32593 * C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
            C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
            C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
               C32593 * C32867 +
           (C953 + C954 + C955) * C32593 * C32855 + C964 * C32835) *
              C32551 * C213 -
          ((C959 + C960 + C961) * C32593 * C32835 +
           (C958 + C957 + C956) * C32593 * C32855 +
           (C955 + C954 + C953) * C32593 * C32867) *
              C32551 * C214 +
          (C964 * C32867 + (C961 + C960 + C959) * C32593 * C32855 +
           (C758 * C886 - C759 * C877 - C758 * C887 + C752 * C895 +
            C760 * C888 - C761 * C878 - C760 * C889 + C753 * C896 +
            C762 * C890 - C763 * C879 - C762 * C891 + C32826 * C897) *
               C32593 * C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C32593 * C5333 +
           (C5336 * C235 - C5337 * C221 - C5336 * C236 + C32864 * C251 +
            C5338 * C233 - C5339 * C220 - C5338 * C234 + C32851 * C250 +
            C5340 * C231 - C5341 * C219 - C5340 * C232 + C32826 * C249) *
               C32593 * C5334 +
           (C5336 * C237 - C5337 * C222 - C5336 * C238 + C32864 * C252 +
            C5338 * C239 - C5339 * C223 - C5338 * C240 + C32851 * C253 +
            C5340 * C241 - C5341 * C224 - C5340 * C242 + C32826 * C254) *
               C32593 * C32835) *
              C32551 * C32537 * C110 -
          ((C5340 * C243 - C5341 * C225 - C5340 * C244 + C32826 * C255 +
            C5338 * C241 - C5339 * C224 - C5338 * C242 + C32851 * C254 +
            C5336 * C239 - C5337 * C223 - C5336 * C240 + C32864 * C253) *
               C32593 * C32835 +
           (C5340 * C229 - C5341 * C218 - C5340 * C230 + C32826 * C248 +
            C5338 * C231 - C5339 * C219 - C5338 * C232 + C32851 * C249 +
            C5336 * C233 - C5337 * C220 - C5336 * C234 + C32864 * C250) *
               C32593 * C5334 +
           (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
            C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
            C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
               C32593 * C5333) *
              C32551 * C32537 * C111 +
          ((C5336 * C134 - C5337 * C125 - C5336 * C135 + C32864 * C146 +
            C5338 * C136 - C5339 * C126 - C5338 * C137 + C32851 * C147 +
            C5340 * C138 - C5341 * C127 - C5340 * C139 + C32826 * C148) *
               C32593 * C5333 +
           (C5336 * C231 - C5337 * C219 - C5336 * C232 + C32864 * C249 +
            C5338 * C229 - C5339 * C218 - C5338 * C230 + C32851 * C248 +
            C5340 * C227 - C5341 * C217 - C5340 * C228 + C32826 * C247) *
               C32593 * C5334 +
           (C5336 * C241 - C5337 * C224 - C5336 * C242 + C32864 * C254 +
            C5338 * C243 - C5339 * C225 - C5338 * C244 + C32851 * C255 +
            C5340 * C245 - C5341 * C226 - C5340 * C246 + C32826 * C256) *
               C32593 * C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C32593 * C5333 +
           (C5507 + C5508 + C5509) * C32593 * C5334 + C5518 * C32835) *
              C32551 * C213 -
          ((C5513 + C5514 + C5515) * C32593 * C32835 +
           (C5512 + C5511 + C5510) * C32593 * C5334 +
           (C5509 + C5508 + C5507) * C32593 * C5333) *
              C32551 * C214 +
          (C5518 * C5333 + (C5515 + C5514 + C5513) * C32593 * C5334 +
           (C5336 * C886 - C5337 * C877 - C5336 * C887 + C32864 * C895 +
            C5338 * C888 - C5339 * C878 - C5338 * C889 + C32851 * C896 +
            C5340 * C890 - C5341 * C879 - C5340 * C891 + C32826 * C897) *
               C32593 * C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
               C32593 * C6213 +
           (C6218 * C235 - C6219 * C221 - C6218 * C236 + C32488 * C251) *
               C32593 * C6214 +
           (C6218 * C237 - C6219 * C222 - C6218 * C238 + C32488 * C252) *
               C32593 * C6215 +
           (C6218 * C884 - C6219 * C876 - C6218 * C885 + C32488 * C894) *
               C32593 * C6216 +
           (C6218 * C886 - C6219 * C877 - C6218 * C887 + C32488 * C895) *
               C32593 * C6217) *
              C32551 * C32537 * C110 -
          ((C6218 * C888 - C6219 * C878 - C6218 * C889 + C32488 * C896) *
               C32593 * C6217 +
           (C6218 * C882 - C6219 * C875 - C6218 * C883 + C32488 * C893) *
               C32593 * C6216 +
           (C6218 * C239 - C6219 * C223 - C6218 * C240 + C32488 * C253) *
               C32593 * C6215 +
           (C6218 * C233 - C6219 * C220 - C6218 * C234 + C32488 * C250) *
               C32593 * C6214 +
           (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
               C32593 * C6213) *
              C32551 * C32537 * C111 +
          ((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
               C32593 * C6213 +
           (C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
               C32593 * C6214 +
           (C6218 * C241 - C6219 * C224 - C6218 * C242 + C32488 * C254) *
               C32593 * C6215 +
           (C6218 * C880 - C6219 * C874 - C6218 * C881 + C32488 * C892) *
               C32593 * C6216 +
           (C6218 * C890 - C6219 * C879 - C6218 * C891 + C32488 * C897) *
               C32593 * C6217) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
               C32593 * C6213 +
           C6326 * C6214 + C6327 * C6215 + C6328 * C6216 + C6329 * C6217) *
              C32551 * C213 -
          (C6330 * C6217 + C6329 * C6216 + C6328 * C6215 + C6327 * C6214 +
           C6326 * C6213) *
              C32551 * C214 +
          (C6327 * C6213 + C6328 * C6214 + C6329 * C6215 + C6330 * C6216 +
           (C6218 * C6286 - C6219 * C6283 - C6218 * C6287 + C32488 * C6289) *
               C32593 * C6217) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C10425 +
           (C5336 * C340 - C5337 * C326 - C5336 * C341 + C32864 * C356 +
            C5338 * C338 - C5339 * C325 - C5338 * C339 + C32851 * C355 +
            C5340 * C336 - C5341 * C324 - C5340 * C337 + C32826 * C354) *
               C10426 +
           (C5336 * C342 - C5337 * C327 - C5336 * C343 + C32864 * C357 +
            C5338 * C344 - C5339 * C328 - C5338 * C345 + C32851 * C358 +
            C5340 * C346 - C5341 * C329 - C5340 * C347 + C32826 * C359) *
               C32838) *
              C32581 * C32551 * C32537 * C110 -
          ((C5340 * C348 - C5341 * C330 - C5340 * C349 + C32826 * C360 +
            C5338 * C346 - C5339 * C329 - C5338 * C347 + C32851 * C359 +
            C5336 * C344 - C5337 * C328 - C5336 * C345 + C32864 * C358) *
               C32838 +
           (C5340 * C334 - C5341 * C323 - C5340 * C335 + C32826 * C353 +
            C5338 * C336 - C5339 * C324 - C5338 * C337 + C32851 * C354 +
            C5336 * C338 - C5337 * C325 - C5336 * C339 + C32864 * C355) *
               C10426 +
           (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
            C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
            C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
               C10425) *
              C32581 * C32551 * C32537 * C111 +
          ((C5336 * C134 - C5337 * C125 - C5336 * C135 + C32864 * C146 +
            C5338 * C136 - C5339 * C126 - C5338 * C137 + C32851 * C147 +
            C5340 * C138 - C5341 * C127 - C5340 * C139 + C32826 * C148) *
               C10425 +
           (C5336 * C336 - C5337 * C324 - C5336 * C337 + C32864 * C354 +
            C5338 * C334 - C5339 * C323 - C5338 * C335 + C32851 * C353 +
            C5340 * C332 - C5341 * C322 - C5340 * C333 + C32826 * C352) *
               C10426 +
           (C5336 * C346 - C5337 * C329 - C5336 * C347 + C32864 * C359 +
            C5338 * C348 - C5339 * C330 - C5338 * C349 + C32851 * C360 +
            C5340 * C350 - C5341 * C331 - C5340 * C351 + C32826 * C361) *
               C32838) *
              C32581 * C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C10425 +
           (C5336 * C340 - C5337 * C326 - C5336 * C341 + C32864 * C356 +
            C5338 * C338 - C5339 * C325 - C5338 * C339 + C32851 * C355 +
            C5340 * C336 - C5341 * C324 - C5340 * C337 + C32826 * C354) *
               C10426 +
           (C5336 * C342 - C5337 * C327 - C5336 * C343 + C32864 * C357 +
            C5338 * C344 - C5339 * C328 - C5338 * C345 + C32851 * C358 +
            C5340 * C346 - C5341 * C329 - C5340 * C347 + C32826 * C359) *
               C32838) *
              C32581 * C32551 * C213 -
          ((C5340 * C1093 - C5341 * C1079 - C5340 * C1094 + C32826 * C1106 +
            C5338 * C1091 - C5339 * C1078 - C5338 * C1092 + C32851 * C1105 +
            C5336 * C1089 - C5337 * C1077 - C5336 * C1090 + C32864 * C1104) *
               C32838 +
           (C6148 + C6149 + C6150) * C10426 +
           (C5509 + C5508 + C5507) * C10425) *
              C32581 * C32551 * C214 +
          (C5517 * C10425 + (C6147 + C6146 + C6145) * C10426 +
           (C5336 * C1095 - C5337 * C1080 - C5336 * C1096 + C32864 * C1107 +
            C5338 * C1097 - C5339 * C1081 - C5338 * C1098 + C32851 * C1108 +
            C5340 * C1099 - C5341 * C1082 - C5340 * C1100 + C32826 * C1109) *
               C32838) *
              C32581 * C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C10425 +
            C7131 * C10426 + C7132 * C32838) *
               C32867 +
           (C6321 * C10425 + C6722 * C10426 + C6972 * C32838) * C32855 +
           (C6322 * C10425 + C6721 * C10426 + C6973 * C32838) * C32835) *
              C32551 * C32537 * C110 -
          ((C7315 * C32838 + C7314 * C10426 + C6516 * C10425) * C32835 +
           (C7313 * C32838 + C7312 * C10426 + C6515 * C10425) * C32855 +
           (C7483 * C32838 + C7482 * C10426 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C10425) *
               C32867) *
              C32551 * C32537 * C111 +
          (((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
                C10425 +
            (C6218 * C336 - C6219 * C324 - C6218 * C337 + C32488 * C354) *
                C10426 +
            (C6218 * C346 - C6219 * C329 - C6218 * C347 + C32488 * C359) *
                C32838) *
               C32867 +
           ((C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
                C10425 +
            (C6218 * C631 - C6219 * C624 - C6218 * C632 + C32488 * C639) *
                C10426 +
            (C6218 * C1093 - C6219 * C1079 - C6218 * C1094 + C32488 * C1106) *
                C32838) *
               C32855 +
           ((C6218 * C241 - C6219 * C224 - C6218 * C242 + C32488 * C254) *
                C10425 +
            (C6218 * C1083 - C6219 * C1074 - C6218 * C1084 + C32488 * C1101) *
                C10426 +
            (C6218 * C1099 - C6219 * C1082 - C6218 * C1100 + C32488 * C1109) *
                C32838) *
               C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C10425 +
            C7131 * C10426 + C7132 * C32838) *
               C32867 +
           (C11435 + C11436 + C11437) * C32855 + C11445 * C32835) *
              C32551 * C213 -
          ((C11441 + C11442 + C11443) * C32835 +
           (C11440 + C11439 + C11438) * C32855 +
           (C11437 + C11436 + C11435) * C32867) *
              C32551 * C214 +
          (C11445 * C32867 + (C11443 + C11442 + C11441) * C32855 +
           (C6324 * C10425 + C6719 * C10426 +
            (C6218 * C6399 - C6219 * C6394 - C6218 * C6400 + C32488 * C6403) *
                C32838) *
               C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
              C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
              C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
                 C21009 +
             (C19236 + C19237 + C19238) * C32680) *
                C32804 +
            ((C18100 + C18101 + C18102) * C21009 + C19871 * C32680) * C32640) *
               C32551 * C444 -
           (((C18738 + C18739 + C18740) * C32680 +
             (C18105 + C18104 + C18103) * C21009) *
                C32640 +
            (C19872 * C32680 + (C18102 + C18101 + C18100) * C21009) * C32804) *
               C32551 * C445) *
              C446 +
          ((((C18404 + C18405 + C18406) * C21009 +
             (C19457 + C19458 + C19459) * C32680) *
                C32804 +
            ((C18407 + C18408 + C18409) * C21009 +
             (C31633 * C1085 - C31673 * C1075 - C31633 * C1086 +
              C32493 * C1102 + C31629 * C1083 - C31668 * C1074 -
              C31629 * C1084 + C32501 * C1101 + C31679 * C1449 -
              C17934 * C1448 - C31679 * C1450 + C17925 * C1451) *
                 C32680) *
                C32640) *
               C32551 * C445 -
           (((C19459 + C19458 + C19457) * C32680 +
             (C18406 + C18405 + C18404) * C21009) *
                C32640 +
            ((C19674 + C19673 + C19672) * C32680 +
             (C31679 * C136 - C17934 * C126 - C31679 * C137 + C17925 * C147 +
              C31629 * C134 - C31668 * C125 - C31629 * C135 + C32501 * C146 +
              C31633 * C132 - C31673 * C124 - C31633 * C133 + C32493 * C145) *
                 C21009) *
                C32804) *
               C32551 * C444) *
              C447)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
              C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
              C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
                 C21009 +
             (C19236 + C19237 + C19238) * C32680) *
                C32804 +
            ((C18100 + C18101 + C18102) * C21009 + C19871 * C32680) * C32640) *
               C534 -
           (((C19239 + C19240 + C19241) * C32680 + C19872 * C21009) * C32640 +
            ((C19242 + C19243 + C19244) * C32680 +
             (C19238 + C19237 + C19236) * C21009) *
                C32804) *
               C535) *
              C444 +
          (((C19871 * C21009 + (C19241 + C19240 + C19239) * C32680) * C32804 +
            ((C18740 + C18739 + C18738) * C21009 +
             (C31633 * C1095 - C31673 * C1080 - C31633 * C1096 +
              C32493 * C1107 + C31629 * C1097 - C31668 * C1081 -
              C31629 * C1098 + C32501 * C1108 + C31679 * C1099 -
              C17934 * C1082 - C31679 * C1100 + C17925 * C1109) *
                 C32680) *
                C32640) *
               C535 -
           (((C18738 + C18739 + C18740) * C32680 +
             (C18105 + C18104 + C18103) * C21009) *
                C32640 +
            (C19872 * C32680 + (C18102 + C18101 + C18100) * C21009) * C32804) *
               C534) *
              C445) *
         C32525) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
             C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
             C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
                C21009 +
            (C19236 + C19237 + C19238) * C32680) *
               C32804 +
           ((C18100 + C18101 + C18102) * C21009 + C19871 * C32680) * C32640) *
              C32551 * C213 -
          (((C18738 + C18739 + C18740) * C32680 +
            (C18105 + C18104 + C18103) * C21009) *
               C32640 +
           (C19872 * C32680 + (C18102 + C18101 + C18100) * C21009) * C32804) *
              C32551 * C214 +
          ((C18110 * C21009 + (C18740 + C18739 + C18738) * C32680) * C32804 +
           ((C18108 + C18107 + C18106) * C21009 +
            (C31633 * C1601 - C31673 * C1598 - C31633 * C1602 + C32493 * C1607 +
             C31629 * C1603 - C31668 * C1599 - C31629 * C1604 + C32501 * C1608 +
             C31679 * C1605 - C17934 * C1600 - C31679 * C1606 +
             C17925 * C1609) *
                C32680) *
               C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
             C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
             C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
                C21009 +
            (C19236 + C19237 + C19238) * C32680) *
               C32804 +
           ((C18100 + C18101 + C18102) * C21009 + C19871 * C32680) * C32640) *
              C32551 * C32537 * C110 -
          (((C19459 + C19458 + C19457) * C32680 +
            (C18406 + C18405 + C18404) * C21009) *
               C32640 +
           ((C19674 + C19673 + C19672) * C32680 +
            (C31679 * C136 - C17934 * C126 - C31679 * C137 + C17925 * C147 +
             C31629 * C134 - C31668 * C125 - C31629 * C135 + C32501 * C146 +
             C31633 * C132 - C31673 * C124 - C31633 * C133 + C32493 * C145) *
                C21009) *
               C32804) *
              C32551 * C32537 * C111 +
          (((C31633 * C134 - C31673 * C125 - C31633 * C135 + C32493 * C146 +
             C31629 * C136 - C31668 * C126 - C31629 * C137 + C32501 * C147 +
             C31679 * C138 - C17934 * C127 - C31679 * C139 + C17925 * C148) *
                C21009 +
            (C31633 * C336 - C31673 * C324 - C31633 * C337 + C32493 * C354 +
             C31629 * C334 - C31668 * C323 - C31629 * C335 + C32501 * C353 +
             C31679 * C332 - C17934 * C322 - C31679 * C333 + C17925 * C352) *
                C32680) *
               C32804 +
           ((C31633 * C231 - C31673 * C219 - C31633 * C232 + C32493 * C249 +
             C31629 * C229 - C31668 * C218 - C31629 * C230 + C32501 * C248 +
             C31679 * C227 - C17934 * C217 - C31679 * C228 + C17925 * C247) *
                C21009 +
            (C31633 * C631 - C31673 * C624 - C31633 * C632 + C32493 * C639 +
             C31629 * C633 - C31668 * C625 - C31629 * C634 + C32501 * C640 +
             C31679 * C635 - C17934 * C626 - C31679 * C636 + C17925 * C641) *
                C32680) *
               C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
             C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
             C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
                C21009 +
            (C19236 + C19237 + C19238) * C32680) *
               C32804 +
           ((C18100 + C18101 + C18102) * C21009 + C19871 * C32680) * C32640) *
              C319 -
          (((C19239 + C19240 + C19241) * C32680 + C19872 * C21009) * C32640 +
           ((C19242 + C19243 + C19244) * C32680 +
            (C19238 + C19237 + C19236) * C21009) *
               C32804) *
              C320 +
          (((C19244 + C19243 + C19242) * C21009 +
            (C31633 * C1995 - C31673 * C1987 - C31633 * C1996 + C32493 * C2005 +
             C31629 * C1993 - C31668 * C1986 - C31629 * C1994 + C32501 * C2004 +
             C31679 * C1991 - C17934 * C1985 - C31679 * C1992 +
             C17925 * C2003) *
                C32680) *
               C32804 +
           ((C19241 + C19240 + C19239) * C21009 +
            (C31633 * C2565 - C31673 * C2562 - C31633 * C2566 + C32493 * C2571 +
             C31629 * C2567 - C31668 * C2563 - C31629 * C2568 + C32501 * C2572 +
             C31679 * C2569 - C17934 * C2564 - C31679 * C2570 +
             C17925 * C2573) *
                C32680) *
               C32640) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
              C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
              C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
                 C21009 +
             (C19236 + C19237 + C19238) * C32680) *
                C32804 +
            ((C18100 + C18101 + C18102) * C21009 + C19871 * C32680) * C32640) *
               C534 -
           (((C19239 + C19240 + C19241) * C32680 + C19872 * C21009) * C32640 +
            ((C19242 + C19243 + C19244) * C32680 +
             (C19238 + C19237 + C19236) * C21009) *
                C32804) *
               C535) *
              C32537 * C446 +
          ((((C19672 + C19673 + C19674) * C21009 +
             (C31633 * C344 - C31673 * C328 - C31633 * C345 + C32493 * C358 +
              C31629 * C346 - C31668 * C329 - C31629 * C347 + C32501 * C359 +
              C31679 * C348 - C17934 * C330 - C31679 * C349 + C17925 * C360) *
                 C32680) *
                C32804 +
            ((C19457 + C19458 + C19459) * C21009 +
             (C31633 * C1091 - C31673 * C1078 - C31633 * C1092 +
              C32493 * C1105 + C31629 * C1093 - C31668 * C1079 -
              C31629 * C1094 + C32501 * C1106 + C31679 * C2221 -
              C17934 * C2220 - C31679 * C2222 + C17925 * C2223) *
                 C32680) *
                C32640) *
               C535 -
           (((C19459 + C19458 + C19457) * C32680 +
             (C18406 + C18405 + C18404) * C21009) *
                C32640 +
            ((C19674 + C19673 + C19672) * C32680 +
             (C31679 * C136 - C17934 * C126 - C31679 * C137 + C17925 * C147 +
              C31629 * C134 - C31668 * C125 - C31629 * C135 + C32501 * C146 +
              C31633 * C132 - C31673 * C124 - C31633 * C133 + C32493 * C145) *
                 C21009) *
                C32804) *
               C534) *
              C32537 * C447)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
             C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
             C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
                C21009 +
            (C19236 + C19237 + C19238) * C32680) *
               C32804 +
           ((C18100 + C18101 + C18102) * C21009 + C19871 * C32680) * C32640) *
              C32551 * C32537 * C110 -
          (((C19459 + C19458 + C19457) * C32680 +
            (C18406 + C18405 + C18404) * C21009) *
               C32640 +
           ((C19674 + C19673 + C19672) * C32680 +
            (C31679 * C136 - C17934 * C126 - C31679 * C137 + C17925 * C147 +
             C31629 * C134 - C31668 * C125 - C31629 * C135 + C32501 * C146 +
             C31633 * C132 - C31673 * C124 - C31633 * C133 + C32493 * C145) *
                C21009) *
               C32804) *
              C32551 * C32537 * C111 +
          (((C31633 * C134 - C31673 * C125 - C31633 * C135 + C32493 * C146 +
             C31629 * C136 - C31668 * C126 - C31629 * C137 + C32501 * C147 +
             C31679 * C138 - C17934 * C127 - C31679 * C139 + C17925 * C148) *
                C21009 +
            (C31633 * C336 - C31673 * C324 - C31633 * C337 + C32493 * C354 +
             C31629 * C334 - C31668 * C323 - C31629 * C335 + C32501 * C353 +
             C31679 * C332 - C17934 * C322 - C31679 * C333 + C17925 * C352) *
                C32680) *
               C32804 +
           ((C31633 * C231 - C31673 * C219 - C31633 * C232 + C32493 * C249 +
             C31629 * C229 - C31668 * C218 - C31629 * C230 + C32501 * C248 +
             C31679 * C227 - C17934 * C217 - C31679 * C228 + C17925 * C247) *
                C21009 +
            (C31633 * C631 - C31673 * C624 - C31633 * C632 + C32493 * C639 +
             C31629 * C633 - C31668 * C625 - C31629 * C634 + C32501 * C640 +
             C31679 * C635 - C17934 * C626 - C31679 * C636 + C17925 * C641) *
                C32680) *
               C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
             C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
             C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
                C21009 +
            (C19236 + C19237 + C19238) * C32680) *
               C32804 +
           ((C18100 + C18101 + C18102) * C21009 + C19871 * C32680) * C32640) *
              C32551 * C213 -
          (((C18738 + C18739 + C18740) * C32680 +
            (C18105 + C18104 + C18103) * C21009) *
               C32640 +
           (C19872 * C32680 + (C18102 + C18101 + C18100) * C21009) * C32804) *
              C32551 * C214 +
          ((C18110 * C21009 + (C18740 + C18739 + C18738) * C32680) * C32804 +
           ((C18108 + C18107 + C18106) * C21009 +
            (C31633 * C1601 - C31673 * C1598 - C31633 * C1602 + C32493 * C1607 +
             C31629 * C1603 - C31668 * C1599 - C31629 * C1604 + C32501 * C1608 +
             C31679 * C1605 - C17934 * C1600 - C31679 * C1606 +
             C17925 * C1609) *
                C32680) *
               C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
              C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                 C32676 +
             (C17164 + C17165) * C32683 + C17172 * C24553) *
                C32804 +
            ((C16065 + C16066) * C32676 + C17811 * C32683 + C17131 * C24553) *
                C32640) *
               C32551 * C444 -
           (((C16967 + C16968) * C24553 + C20911 * C32683 +
             (C16068 + C16067) * C32676) *
                C32640 +
            (C17812 * C24553 + C17813 * C32683 + (C16066 + C16065) * C32676) *
                C32804) *
               C32551 * C445) *
              C446 +
          ((((C16341 + C16342) * C32676 + (C17391 + C17392) * C32683 +
             (C17393 + C17394) * C24553) *
                C32804 +
            ((C16343 + C16344) * C32676 + (C20521 + C20522) * C32683 +
             (C15914 * C1097 - C15915 * C1081 - C15914 * C1098 +
              C15908 * C1108 + C15916 * C1099 - C15917 * C1082 -
              C15916 * C1100 + C32498 * C1109) *
                 C24553) *
                C32640) *
               C32551 * C445 -
           (((C17394 + C17393) * C24553 + (C17392 + C17391) * C32683 +
             (C16342 + C16341) * C32676) *
                C32640 +
            ((C17616 + C17615) * C24553 + (C17614 + C17613) * C32683 +
             (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
              C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
                 C32676) *
                C32804) *
               C32551 * C444) *
              C447)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
              C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                 C32676 +
             (C17164 + C17165) * C32683 + C17172 * C24553) *
                C32804 +
            ((C16065 + C16066) * C32676 + C17811 * C32683 + C17131 * C24553) *
                C32640) *
               C534 -
           (((C17168 + C17169) * C24553 + C17812 * C32683 + C17813 * C32676) *
                C32640 +
            ((C17170 + C17171) * C24553 + (C17167 + C17166) * C32683 +
             (C17165 + C17164) * C32676) *
                C32804) *
               C535) *
              C444 +
          (((C17811 * C32676 + C17131 * C32683 + (C17169 + C17168) * C24553) *
                C32804 +
            (C20166 * C32676 + (C16968 + C16967) * C32683 +
             (C15914 * C7091 - C15915 * C7088 - C15914 * C7092 +
              C15908 * C7097 + C15916 * C7466 - C15917 * C7465 -
              C15916 * C7467 + C32498 * C7468) *
                 C24553) *
                C32640) *
               C535 -
           (((C16967 + C16968) * C24553 + C20911 * C32683 +
             (C16068 + C16067) * C32676) *
                C32640 +
            (C17812 * C24553 + C17813 * C32683 + (C16066 + C16065) * C32676) *
                C32804) *
               C534) *
              C445) *
         C32525) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C32676 +
            (C17164 + C17165) * C32683 + C17172 * C24553) *
               C32804 +
           ((C16065 + C16066) * C32676 + C17811 * C32683 + C17131 * C24553) *
               C32640) *
              C32551 * C213 -
          (((C16967 + C16968) * C24553 + C20911 * C32683 +
            (C16068 + C16067) * C32676) *
               C32640 +
           (C17812 * C24553 + C17813 * C32683 + (C16066 + C16065) * C32676) *
               C32804) *
              C32551 * C214 +
          ((C16073 * C32676 + C20166 * C32683 + (C16968 + C16967) * C24553) *
               C32804 +
           (C16074 * C32676 + (C16644 + C16643) * C32683 +
            (C15914 * C6397 - C15915 * C6393 - C15914 * C6398 + C15908 * C6402 +
             C15916 * C7282 - C15917 * C7281 - C15916 * C7283 +
             C32498 * C7284) *
                C24553) *
               C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C32676 +
            (C17164 + C17165) * C32683 + C17172 * C24553) *
               C32804 +
           ((C16065 + C16066) * C32676 + C17811 * C32683 + C17131 * C24553) *
               C32640) *
              C32551 * C32537 * C110 -
          (((C17394 + C17393) * C24553 + (C17392 + C17391) * C32683 +
            (C16342 + C16341) * C32676) *
               C32640 +
           ((C17616 + C17615) * C24553 + (C17614 + C17613) * C32683 +
            (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
             C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
                C32676) *
               C32804) *
              C32551 * C32537 * C111 +
          (((C15914 * C134 - C15915 * C125 - C15914 * C135 + C15908 * C146 +
             C15916 * C136 - C15917 * C126 - C15916 * C137 + C32498 * C147) *
                C32676 +
            (C15914 * C336 - C15915 * C324 - C15914 * C337 + C15908 * C354 +
             C15916 * C334 - C15917 * C323 - C15916 * C335 + C32498 * C353) *
                C32683 +
            (C15914 * C346 - C15915 * C329 - C15914 * C347 + C15908 * C359 +
             C15916 * C348 - C15917 * C330 - C15916 * C349 + C32498 * C360) *
                C24553) *
               C32804 +
           ((C15914 * C231 - C15915 * C219 - C15914 * C232 + C15908 * C249 +
             C15916 * C229 - C15917 * C218 - C15916 * C230 + C32498 * C248) *
                C32676 +
            (C15914 * C631 - C15915 * C624 - C15914 * C632 + C15908 * C639 +
             C15916 * C633 - C15917 * C625 - C15916 * C634 + C32498 * C640) *
                C32683 +
            (C15914 * C1093 - C15915 * C1079 - C15914 * C1094 + C15908 * C1106 +
             C15916 * C2221 - C15917 * C2220 - C15916 * C2222 +
             C32498 * C2223) *
                C24553) *
               C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C32676 +
            (C17164 + C17165) * C32683 + C17172 * C24553) *
               C32804 +
           ((C16065 + C16066) * C32676 + C17811 * C32683 + C17131 * C24553) *
               C32640) *
              C319 -
          (((C17168 + C17169) * C24553 + C17812 * C32683 + C17813 * C32676) *
               C32640 +
           ((C17170 + C17171) * C24553 + (C17167 + C17166) * C32683 +
            (C17165 + C17164) * C32676) *
               C32804) *
              C320 +
          ((C17172 * C32676 + C23003 * C32683 + (C23017 + C23016) * C24553) *
               C32804 +
           (C17131 * C32676 + (C17169 + C17168) * C32683 +
            (C15914 * C7093 - C15915 * C7089 - C15914 * C7094 + C15908 * C7098 +
             C15916 * C12301 - C15917 * C12300 - C15916 * C12302 +
             C32498 * C12303) *
                C24553) *
               C32640) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
              C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                 C32676 +
             (C17164 + C17165) * C32683 + C17172 * C24553) *
                C32804 +
            ((C16065 + C16066) * C32676 + C17811 * C32683 + C17131 * C24553) *
                C32640) *
               C534 -
           (((C17168 + C17169) * C24553 + C17812 * C32683 + C17813 * C32676) *
                C32640 +
            ((C17170 + C17171) * C24553 + (C17167 + C17166) * C32683 +
             (C17165 + C17164) * C32676) *
                C32804) *
               C535) *
              C32537 * C446 +
          ((((C17613 + C17614) * C32676 + (C17615 + C17616) * C32683 +
             (C23290 + C23291) * C24553) *
                C32804 +
            ((C17391 + C17392) * C32676 + (C17393 + C17394) * C32683 +
             (C15914 * C2567 - C15915 * C2563 - C15914 * C2568 +
              C15908 * C2572 + C15916 * C2569 - C15917 * C2564 -
              C15916 * C2570 + C32498 * C2573) *
                 C24553) *
                C32640) *
               C535 -
           (((C17394 + C17393) * C24553 + (C17392 + C17391) * C32683 +
             (C16342 + C16341) * C32676) *
                C32640 +
            ((C17616 + C17615) * C24553 + (C17614 + C17613) * C32683 +
             (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
              C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
                 C32676) *
                C32804) *
               C534) *
              C32537 * C447)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C32676 +
            (C17164 + C17165) * C32683 + C17172 * C24553) *
               C32804 +
           ((C16065 + C16066) * C32676 + C17811 * C32683 + C17131 * C24553) *
               C32640) *
              C32551 * C32537 * C110 -
          (((C17394 + C17393) * C24553 + (C17392 + C17391) * C32683 +
            (C16342 + C16341) * C32676) *
               C32640 +
           ((C17616 + C17615) * C24553 + (C17614 + C17613) * C32683 +
            (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
             C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
                C32676) *
               C32804) *
              C32551 * C32537 * C111 +
          (((C15914 * C134 - C15915 * C125 - C15914 * C135 + C15908 * C146 +
             C15916 * C136 - C15917 * C126 - C15916 * C137 + C32498 * C147) *
                C32676 +
            (C15914 * C336 - C15915 * C324 - C15914 * C337 + C15908 * C354 +
             C15916 * C334 - C15917 * C323 - C15916 * C335 + C32498 * C353) *
                C32683 +
            (C15914 * C346 - C15915 * C329 - C15914 * C347 + C15908 * C359 +
             C15916 * C348 - C15917 * C330 - C15916 * C349 + C32498 * C360) *
                C24553) *
               C32804 +
           ((C15914 * C231 - C15915 * C219 - C15914 * C232 + C15908 * C249 +
             C15916 * C229 - C15917 * C218 - C15916 * C230 + C32498 * C248) *
                C32676 +
            (C15914 * C631 - C15915 * C624 - C15914 * C632 + C15908 * C639 +
             C15916 * C633 - C15917 * C625 - C15916 * C634 + C32498 * C640) *
                C32683 +
            (C15914 * C1093 - C15915 * C1079 - C15914 * C1094 + C15908 * C1106 +
             C15916 * C2221 - C15917 * C2220 - C15916 * C2222 +
             C32498 * C2223) *
                C24553) *
               C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C32676 +
            (C17164 + C17165) * C32683 + C17172 * C24553) *
               C32804 +
           ((C16065 + C16066) * C32676 + C17811 * C32683 + C17131 * C24553) *
               C32640) *
              C32551 * C213 -
          (((C16967 + C16968) * C24553 + C20911 * C32683 +
            (C16068 + C16067) * C32676) *
               C32640 +
           (C17812 * C24553 + C17813 * C32683 + (C16066 + C16065) * C32676) *
               C32804) *
              C32551 * C214 +
          ((C16073 * C32676 + C20166 * C32683 + (C16968 + C16967) * C24553) *
               C32804 +
           (C16074 * C32676 + (C16644 + C16643) * C32683 +
            (C15914 * C6397 - C15915 * C6393 - C15914 * C6398 + C15908 * C6402 +
             C15916 * C7282 - C15917 * C7281 - C15916 * C7283 +
             C32498 * C7284) *
                C24553) *
               C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
              C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                 C21009 +
             (C17164 + C17165) * C32680) *
                C32867 +
            ((C16065 + C16066) * C21009 + C17811 * C32680) * C32855 +
            C21976 * C32835) *
               C32551 * C444 -
           (((C16643 + C16644) * C32680 + (C16070 + C16069) * C21009) * C32835 +
            (C20911 * C32680 + (C16068 + C16067) * C21009) * C32855 +
            (C17813 * C32680 + (C16066 + C16065) * C21009) * C32867) *
               C32551 * C445) *
              C446 +
          ((((C16341 + C16342) * C21009 + (C17391 + C17392) * C32680) * C32867 +
            ((C16343 + C16344) * C21009 + (C20521 + C20522) * C32680) * C32855 +
            ((C16345 + C16346) * C21009 +
             (C15914 * C1603 - C15915 * C1599 - C15914 * C1604 +
              C15908 * C1608 + C15916 * C1605 - C15917 * C1600 -
              C15916 * C1606 + C32498 * C1609) *
                 C32680) *
                C32835) *
               C32551 * C445 -
           (((C20522 + C20521) * C32680 + (C16344 + C16343) * C21009) * C32835 +
            ((C17392 + C17391) * C32680 + (C16342 + C16341) * C21009) * C32855 +
            ((C17614 + C17613) * C32680 +
             (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
              C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
                 C21009) *
                C32867) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
             C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
             C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
             C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
                C21009 +
            (C21256 + C21257 + C21258 + C21259) * C32680) *
               C32581 * C32551 * C444 -
           ((C15807 + C15808 + C15809 + C15810) * C32680 +
            (C15262 + C15261 + C15260 + C15259) * C21009) *
               C32581 * C32551 * C445) *
              C446 +
          (((C15519 + C15520 + C15521 + C15522) * C21009 +
            (C15104 * C629 - C15105 * C623 - C15104 * C630 + C32873 * C638 +
             C15106 * C631 - C15107 * C624 - C15106 * C632 + C32866 * C639 +
             C15108 * C633 - C15109 * C625 - C15108 * C634 + C32853 * C640 +
             C15110 * C635 - C15111 * C626 - C15110 * C636 + C32803 * C641) *
                C32680) *
               C32581 * C32551 * C445 -
           ((C15110 * C332 - C15111 * C322 - C15110 * C333 + C32803 * C352 +
             C15108 * C334 - C15109 * C323 - C15108 * C335 + C32853 * C353 +
             C15106 * C336 - C15107 * C324 - C15106 * C337 + C32866 * C354 +
             C15104 * C338 - C15105 * C325 - C15104 * C339 + C32873 * C355) *
                C32680 +
            (C15110 * C138 - C15111 * C127 - C15110 * C139 + C32803 * C148 +
             C15108 * C136 - C15109 * C126 - C15108 * C137 + C32853 * C147 +
             C15106 * C134 - C15107 * C125 - C15106 * C135 + C32866 * C146 +
             C15104 * C132 - C15105 * C124 - C15104 * C133 + C32873 * C145) *
                C21009) *
               C32581 * C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C32875 +
            (C17164 + C17165) * C32872 + C17172 * C32863 + C23003 * C32819) *
               C32581 * C32551 * C444 -
           ((C17168 + C17169) * C32819 + C17812 * C32863 + C17813 * C32872 +
            (C16066 + C16065) * C32875) *
               C32581 * C32551 * C445) *
              C446 +
          (((C16341 + C16342) * C32875 + (C17391 + C17392) * C32872 +
            (C17393 + C17394) * C32863 +
            (C15914 * C2567 - C15915 * C2563 - C15914 * C2568 + C15908 * C2572 +
             C15916 * C2569 - C15917 * C2564 - C15916 * C2570 +
             C32498 * C2573) *
                C32819) *
               C32581 * C32551 * C445 -
           ((C15916 * C1991 - C15917 * C1985 - C15916 * C1992 + C32498 * C2003 +
             C15914 * C1993 - C15915 * C1986 - C15914 * C1994 +
             C15908 * C2004) *
                C32819 +
            (C17616 + C17615) * C32863 + (C17614 + C17613) * C32872 +
            (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
             C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
                C32875) *
               C32581 * C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
              C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                 C21009 +
             (C17164 + C17165) * C32680) *
                C32867 +
            ((C16065 + C16066) * C21009 + C17811 * C32680) * C32855 +
            C21976 * C32835) *
               C534 -
           (((C16967 + C16968) * C32680 + C20911 * C21009) * C32835 +
            (C17812 * C32680 + C17813 * C21009) * C32855 +
            ((C17167 + C17166) * C32680 + (C17165 + C17164) * C21009) *
                C32867) *
               C535) *
              C444 +
          (((C17811 * C21009 + C17131 * C32680) * C32867 +
            (C20166 * C21009 + (C16968 + C16967) * C32680) * C32855 +
            ((C16644 + C16643) * C21009 +
             (C15914 * C6397 - C15915 * C6393 - C15914 * C6398 +
              C15908 * C6402 + C15916 * C7282 - C15917 * C7281 -
              C15916 * C7283 + C32498 * C7284) *
                 C32680) *
                C32835) *
               C535 -
           (((C16643 + C16644) * C32680 + (C16070 + C16069) * C21009) * C32835 +
            (C20911 * C32680 + (C16068 + C16067) * C21009) * C32855 +
            (C17813 * C32680 + (C16066 + C16065) * C21009) * C32867) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
             C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
             C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
             C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
                C21009 +
            (C21256 + C21257 + C21258 + C21259) * C32680) *
               C32581 * C534 -
           ((C21260 + C21261 + C21262 + C21263) * C32680 +
            (C21259 + C21258 + C21257 + C21256) * C21009) *
               C32581 * C535) *
              C444 +
          (((C15810 + C15809 + C15808 + C15807) * C21009 +
            (C15104 * C1089 - C15105 * C1077 - C15104 * C1090 + C32873 * C1104 +
             C15106 * C1091 - C15107 * C1078 - C15106 * C1092 + C32866 * C1105 +
             C15108 * C1093 - C15109 * C1079 - C15108 * C1094 + C32853 * C1106 +
             C15110 * C2221 - C15111 * C2220 - C15110 * C2222 +
             C32803 * C2223) *
                C32680) *
               C32581 * C535 -
           ((C15807 + C15808 + C15809 + C15810) * C32680 +
            (C15262 + C15261 + C15260 + C15259) * C21009) *
               C32581 * C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C32875 +
            (C17164 + C17165) * C32872 + C17172 * C32863 + C23003 * C32819) *
               C32581 * C534 -
           ((C23016 + C23017) * C32819 + (C17170 + C17171) * C32863 +
            (C17167 + C17166) * C32872 + (C17165 + C17164) * C32875) *
               C32581 * C535) *
              C444 +
          ((C17811 * C32875 + C17131 * C32872 + (C17169 + C17168) * C32863 +
            (C15914 * C7093 - C15915 * C7089 - C15914 * C7094 + C15908 * C7098 +
             C15916 * C12301 - C15917 * C12300 - C15916 * C12302 +
             C32498 * C12303) *
                C32819) *
               C32581 * C535 -
           ((C17168 + C17169) * C32819 + C17812 * C32863 + C17813 * C32872 +
            (C16066 + C16065) * C32875) *
               C32581 * C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
                C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
                C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
                C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
                   C21009 +
               (C15104 * C340 - C15105 * C326 - C15104 * C341 + C32873 * C356 +
                C15106 * C338 - C15107 * C325 - C15106 * C339 + C32866 * C355 +
                C15108 * C336 - C15109 * C324 - C15108 * C337 + C32853 * C354 +
                C15110 * C334 - C15111 * C323 - C15110 * C335 + C32803 * C353) *
                   C32680) *
                  C32581 * C32551 * C32537 * C110 -
              ((C15110 * C332 - C15111 * C322 - C15110 * C333 + C32803 * C352 +
                C15108 * C334 - C15109 * C323 - C15108 * C335 + C32853 * C353 +
                C15106 * C336 - C15107 * C324 - C15106 * C337 + C32866 * C354 +
                C15104 * C338 - C15105 * C325 - C15104 * C339 + C32873 * C355) *
                   C32680 +
               (C15110 * C138 - C15111 * C127 - C15110 * C139 + C32803 * C148 +
                C15108 * C136 - C15109 * C126 - C15108 * C137 + C32853 * C147 +
                C15106 * C134 - C15107 * C125 - C15106 * C135 + C32866 * C146 +
                C15104 * C132 - C15105 * C124 - C15104 * C133 + C32873 * C145) *
                   C21009) *
                  C32581 * C32551 * C32537 * C111 +
              ((C15104 * C134 - C15105 * C125 - C15104 * C135 + C32873 * C146 +
                C15106 * C136 - C15107 * C126 - C15106 * C137 + C32866 * C147 +
                C15108 * C138 - C15109 * C127 - C15108 * C139 + C32853 * C148 +
                C15110 * C140 - C15111 * C128 - C15110 * C141 + C32803 * C149) *
                   C21009 +
               (C15104 * C336 - C15105 * C324 - C15104 * C337 + C32873 * C354 +
                C15106 * C334 - C15107 * C323 - C15106 * C335 + C32866 * C353 +
                C15108 * C332 - C15109 * C322 - C15108 * C333 + C32853 * C352 +
                C15110 * C537 - C15111 * C536 - C15110 * C538 + C32803 * C539) *
                   C32680) *
                  C32581 * C32551 * C32537 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
                C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
                C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
                C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
                   C21009 +
               (C15104 * C340 - C15105 * C326 - C15104 * C341 + C32873 * C356 +
                C15106 * C338 - C15107 * C325 - C15106 * C339 + C32866 * C355 +
                C15108 * C336 - C15109 * C324 - C15108 * C337 + C32853 * C354 +
                C15110 * C334 - C15111 * C323 - C15110 * C335 + C32803 * C353) *
                   C32680) *
                  C32581 * C32551 * C213 -
              ((C15807 + C15808 + C15809 + C15810) * C32680 +
               (C15262 + C15261 + C15260 + C15259) * C21009) *
                  C32581 * C32551 * C214 +
              ((C15266 + C15265 + C15264 + C15263) * C21009 +
               (C15104 * C1087 - C15105 * C1076 - C15104 * C1088 +
                C32873 * C1103 + C15106 * C1085 - C15107 * C1075 -
                C15106 * C1086 + C32866 * C1102 + C15108 * C1083 -
                C15109 * C1074 - C15108 * C1084 + C32853 * C1101 +
                C15110 * C1449 - C15111 * C1448 - C15110 * C1450 +
                C32803 * C1451) *
                   C32680) *
                  C32581 * C32551 * C215) *
             C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
            C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
            C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
            C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
               C21009 +
           (C21256 + C21257 + C21258 + C21259) * C32680) *
              C32581 * C319 -
          ((C21260 + C21261 + C21262 + C21263) * C32680 +
           (C21259 + C21258 + C21257 + C21256) * C21009) *
              C32581 * C320 +
          ((C21263 + C21262 + C21261 + C21260) * C21009 +
           (C15104 * C1995 - C15105 * C1987 - C15104 * C1996 + C32873 * C2005 +
            C15106 * C1993 - C15107 * C1986 - C15106 * C1994 + C32866 * C2004 +
            C15108 * C1991 - C15109 * C1985 - C15108 * C1992 + C32853 * C2003 +
            C15110 * C2371 - C15111 * C2370 - C15110 * C2372 + C32803 * C2373) *
               C32680) *
              C32581 * C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C21009 +
            (C17164 + C17165) * C32680) *
               C32867 +
           ((C16065 + C16066) * C21009 + C17811 * C32680) * C32855 +
           (C16073 * C21009 + C20166 * C32680) * C32835) *
              C32551 * C32537 * C110 -
          (((C20522 + C20521) * C32680 + (C16344 + C16343) * C21009) * C32835 +
           ((C17392 + C17391) * C32680 + (C16342 + C16341) * C21009) * C32855 +
           ((C17614 + C17613) * C32680 +
            (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
             C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
                C21009) *
               C32867) *
              C32551 * C32537 * C111 +
          (((C15914 * C134 - C15915 * C125 - C15914 * C135 + C15908 * C146 +
             C15916 * C136 - C15917 * C126 - C15916 * C137 + C32498 * C147) *
                C21009 +
            (C15914 * C336 - C15915 * C324 - C15914 * C337 + C15908 * C354 +
             C15916 * C334 - C15917 * C323 - C15916 * C335 + C32498 * C353) *
                C32680) *
               C32867 +
           ((C15914 * C231 - C15915 * C219 - C15914 * C232 + C15908 * C249 +
             C15916 * C229 - C15917 * C218 - C15916 * C230 + C32498 * C248) *
                C21009 +
            (C15914 * C631 - C15915 * C624 - C15914 * C632 + C15908 * C639 +
             C15916 * C633 - C15917 * C625 - C15916 * C634 + C32498 * C640) *
                C32680) *
               C32855 +
           ((C15914 * C241 - C15915 * C224 - C15914 * C242 + C15908 * C254 +
             C15916 * C243 - C15917 * C225 - C15916 * C244 + C32498 * C255) *
                C21009 +
            (C15914 * C1083 - C15915 * C1074 - C15914 * C1084 + C15908 * C1101 +
             C15916 * C1449 - C15917 * C1448 - C15916 * C1450 +
             C32498 * C1451) *
                C32680) *
               C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C21009 +
            (C17164 + C17165) * C32680) *
               C32867 +
           ((C16065 + C16066) * C21009 + C17811 * C32680) * C32855 +
           C21976 * C32835) *
              C32551 * C213 -
          (((C16643 + C16644) * C32680 + (C16070 + C16069) * C21009) * C32835 +
           (C20911 * C32680 + (C16068 + C16067) * C21009) * C32855 +
           (C17813 * C32680 + (C16066 + C16065) * C21009) * C32867) *
              C32551 * C214 +
          (C21976 * C32867 +
           (C16074 * C21009 + (C16644 + C16643) * C32680) * C32855 +
           ((C16072 + C16071) * C21009 +
            (C15914 * C6395 - C15915 * C6392 - C15914 * C6396 + C15908 * C6401 +
             C15916 * C6605 - C15917 * C6604 - C15916 * C6606 +
             C32498 * C6607) *
                C32680) *
               C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C21009 +
            (C17164 + C17165) * C32680) *
               C32867 +
           ((C16065 + C16066) * C21009 + C17811 * C32680) * C32855 +
           C21976 * C32835) *
              C319 -
          (((C16967 + C16968) * C32680 + C20911 * C21009) * C32835 +
           (C17812 * C32680 + C17813 * C21009) * C32855 +
           ((C17167 + C17166) * C32680 + (C17165 + C17164) * C21009) * C32867) *
              C320 +
          ((C17172 * C21009 + (C17171 + C17170) * C32680) * C32867 +
           (C17131 * C21009 + (C17169 + C17168) * C32680) * C32855 +
           ((C16968 + C16967) * C21009 +
            (C15914 * C7091 - C15915 * C7088 - C15914 * C7092 + C15908 * C7097 +
             C15916 * C7466 - C15917 * C7465 - C15916 * C7467 +
             C32498 * C7468) *
                C32680) *
               C32835) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
            C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
               C32875 +
           (C17164 + C17165) * C32872 + C17172 * C32863 +
           (C17171 + C17170) * C32819) *
              C32581 * C32551 * C32537 * C110 -
          ((C15916 * C1991 - C15917 * C1985 - C15916 * C1992 + C32498 * C2003 +
            C15914 * C1993 - C15915 * C1986 - C15914 * C1994 + C15908 * C2004) *
               C32819 +
           (C17616 + C17615) * C32863 + (C17614 + C17613) * C32872 +
           (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
            C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
               C32875) *
              C32581 * C32551 * C32537 * C111 +
          ((C15914 * C134 - C15915 * C125 - C15914 * C135 + C15908 * C146 +
            C15916 * C136 - C15917 * C126 - C15916 * C137 + C32498 * C147) *
               C32875 +
           (C15914 * C336 - C15915 * C324 - C15914 * C337 + C15908 * C354 +
            C15916 * C334 - C15917 * C323 - C15916 * C335 + C32498 * C353) *
               C32872 +
           (C15914 * C346 - C15915 * C329 - C15914 * C347 + C15908 * C359 +
            C15916 * C348 - C15917 * C330 - C15916 * C349 + C32498 * C360) *
               C32863 +
           (C15914 * C1991 - C15915 * C1985 - C15914 * C1992 + C15908 * C2003 +
            C15916 * C2371 - C15917 * C2370 - C15916 * C2372 + C32498 * C2373) *
               C32819) *
              C32581 * C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
            C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
               C32875 +
           (C17164 + C17165) * C32872 + C17172 * C32863 +
           (C17171 + C17170) * C32819) *
              C32581 * C32551 * C213 -
          ((C17168 + C17169) * C32819 + C17812 * C32863 + C17813 * C32872 +
           (C16066 + C16065) * C32875) *
              C32581 * C32551 * C214 +
          (C16073 * C32875 + C20166 * C32872 + (C16968 + C16967) * C32863 +
           (C15914 * C7091 - C15915 * C7088 - C15914 * C7092 + C15908 * C7097 +
            C15916 * C7466 - C15917 * C7465 - C15916 * C7467 + C32498 * C7468) *
               C32819) *
              C32581 * C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
            C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
               C32875 +
           (C17164 + C17165) * C32872 + C17172 * C32863 + C23003 * C32819) *
              C32581 * C319 -
          ((C23016 + C23017) * C32819 + (C17170 + C17171) * C32863 +
           (C17167 + C17166) * C32872 + (C17165 + C17164) * C32875) *
              C32581 * C320 +
          (C17172 * C32875 + C23003 * C32872 + (C23017 + C23016) * C32863 +
           (C15914 * C12198 - C15915 * C12196 - C15914 * C12199 +
            C15908 * C12202 + C15916 * C12387 - C15917 * C12386 -
            C15916 * C12388 + C32498 * C12389) *
               C32819) *
              C32581 * C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
              C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                 C21009 +
             (C17164 + C17165) * C32680) *
                C32867 +
            ((C16065 + C16066) * C21009 + C17811 * C32680) * C32855 +
            C21976 * C32835) *
               C534 -
           (((C16967 + C16968) * C32680 + C20911 * C21009) * C32835 +
            (C17812 * C32680 + C17813 * C21009) * C32855 +
            ((C17167 + C17166) * C32680 + (C17165 + C17164) * C21009) *
                C32867) *
               C535) *
              C32537 * C446 +
          ((((C17613 + C17614) * C21009 + (C17615 + C17616) * C32680) * C32867 +
            ((C17391 + C17392) * C21009 + (C17393 + C17394) * C32680) * C32855 +
            ((C20521 + C20522) * C21009 +
             (C15914 * C1097 - C15915 * C1081 - C15914 * C1098 +
              C15908 * C1108 + C15916 * C1099 - C15917 * C1082 -
              C15916 * C1100 + C32498 * C1109) *
                 C32680) *
                C32835) *
               C535 -
           (((C20522 + C20521) * C32680 + (C16344 + C16343) * C21009) * C32835 +
            ((C17392 + C17391) * C32680 + (C16342 + C16341) * C21009) * C32855 +
            ((C17614 + C17613) * C32680 +
             (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
              C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
                 C21009) *
                C32867) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
             C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
             C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
             C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
                C21009 +
            (C21256 + C21257 + C21258 + C21259) * C32680) *
               C32581 * C534 -
           ((C21260 + C21261 + C21262 + C21263) * C32680 +
            (C21259 + C21258 + C21257 + C21256) * C21009) *
               C32581 * C535) *
              C32537 * C446 +
          (((C21548 + C21549 + C21550 + C21551) * C21009 +
            (C15104 * C344 - C15105 * C328 - C15104 * C345 + C32873 * C358 +
             C15106 * C346 - C15107 * C329 - C15106 * C347 + C32866 * C359 +
             C15108 * C348 - C15109 * C330 - C15108 * C349 + C32853 * C360 +
             C15110 * C350 - C15111 * C331 - C15110 * C351 + C32803 * C361) *
                C32680) *
               C32581 * C535 -
           ((C21551 + C21550 + C21549 + C21548) * C32680 +
            (C15110 * C138 - C15111 * C127 - C15110 * C139 + C32803 * C148 +
             C15108 * C136 - C15109 * C126 - C15108 * C137 + C32853 * C147 +
             C15106 * C134 - C15107 * C125 - C15106 * C135 + C32866 * C146 +
             C15104 * C132 - C15105 * C124 - C15104 * C133 + C32873 * C145) *
                C21009) *
               C32581 * C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C32875 +
            (C17164 + C17165) * C32872 + C17172 * C32863 + C23003 * C32819) *
               C32581 * C534 -
           ((C23016 + C23017) * C32819 + (C17170 + C17171) * C32863 +
            (C17167 + C17166) * C32872 + (C17165 + C17164) * C32875) *
               C32581 * C535) *
              C32537 * C446 +
          (((C17613 + C17614) * C32875 + (C17615 + C17616) * C32872 +
            (C23290 + C23291) * C32863 +
            (C15914 * C1999 - C15915 * C1989 - C15914 * C2000 + C15908 * C2007 +
             C15916 * C2001 - C15917 * C1990 - C15916 * C2002 +
             C32498 * C2008) *
                C32819) *
               C32581 * C535 -
           ((C23291 + C23290) * C32819 + (C17616 + C17615) * C32863 +
            (C17614 + C17613) * C32872 +
            (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
             C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
                C32875) *
               C32581 * C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
            C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
            C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
            C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
               C21009 +
           (C15104 * C340 - C15105 * C326 - C15104 * C341 + C32873 * C356 +
            C15106 * C338 - C15107 * C325 - C15106 * C339 + C32866 * C355 +
            C15108 * C336 - C15109 * C324 - C15108 * C337 + C32853 * C354 +
            C15110 * C334 - C15111 * C323 - C15110 * C335 + C32803 * C353) *
               C32680) *
              C32581 * C32551 * C213 -
          ((C15807 + C15808 + C15809 + C15810) * C32680 +
           (C15262 + C15261 + C15260 + C15259) * C21009) *
              C32581 * C32551 * C214 +
          ((C15266 + C15265 + C15264 + C15263) * C21009 +
           (C15104 * C1087 - C15105 * C1076 - C15104 * C1088 + C32873 * C1103 +
            C15106 * C1085 - C15107 * C1075 - C15106 * C1086 + C32866 * C1102 +
            C15108 * C1083 - C15109 * C1074 - C15108 * C1084 + C32853 * C1101 +
            C15110 * C1449 - C15111 * C1448 - C15110 * C1450 + C32803 * C1451) *
               C32680) *
              C32581 * C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
            C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
            C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
            C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
               C21009 +
           (C15104 * C340 - C15105 * C326 - C15104 * C341 + C32873 * C356 +
            C15106 * C338 - C15107 * C325 - C15106 * C339 + C32866 * C355 +
            C15108 * C336 - C15109 * C324 - C15108 * C337 + C32853 * C354 +
            C15110 * C334 - C15111 * C323 - C15110 * C335 + C32803 * C353) *
               C32680) *
              C32581 * C32551 * C32537 * C110 -
          ((C15110 * C332 - C15111 * C322 - C15110 * C333 + C32803 * C352 +
            C15108 * C334 - C15109 * C323 - C15108 * C335 + C32853 * C353 +
            C15106 * C336 - C15107 * C324 - C15106 * C337 + C32866 * C354 +
            C15104 * C338 - C15105 * C325 - C15104 * C339 + C32873 * C355) *
               C32680 +
           (C15110 * C138 - C15111 * C127 - C15110 * C139 + C32803 * C148 +
            C15108 * C136 - C15109 * C126 - C15108 * C137 + C32853 * C147 +
            C15106 * C134 - C15107 * C125 - C15106 * C135 + C32866 * C146 +
            C15104 * C132 - C15105 * C124 - C15104 * C133 + C32873 * C145) *
               C21009) *
              C32581 * C32551 * C32537 * C111 +
          ((C15104 * C134 - C15105 * C125 - C15104 * C135 + C32873 * C146 +
            C15106 * C136 - C15107 * C126 - C15106 * C137 + C32866 * C147 +
            C15108 * C138 - C15109 * C127 - C15108 * C139 + C32853 * C148 +
            C15110 * C140 - C15111 * C128 - C15110 * C141 + C32803 * C149) *
               C21009 +
           (C15104 * C336 - C15105 * C324 - C15104 * C337 + C32873 * C354 +
            C15106 * C334 - C15107 * C323 - C15106 * C335 + C32866 * C353 +
            C15108 * C332 - C15109 * C322 - C15108 * C333 + C32853 * C352 +
            C15110 * C537 - C15111 * C536 - C15110 * C538 + C32803 * C539) *
               C32680) *
              C32581 * C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C21009 +
            (C17164 + C17165) * C32680) *
               C32867 +
           ((C16065 + C16066) * C21009 + C17811 * C32680) * C32855 +
           (C16073 * C21009 + C20166 * C32680) * C32835) *
              C32551 * C32537 * C110 -
          (((C20522 + C20521) * C32680 + (C16344 + C16343) * C21009) * C32835 +
           ((C17392 + C17391) * C32680 + (C16342 + C16341) * C21009) * C32855 +
           ((C17614 + C17613) * C32680 +
            (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
             C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
                C21009) *
               C32867) *
              C32551 * C32537 * C111 +
          (((C15914 * C134 - C15915 * C125 - C15914 * C135 + C15908 * C146 +
             C15916 * C136 - C15917 * C126 - C15916 * C137 + C32498 * C147) *
                C21009 +
            (C15914 * C336 - C15915 * C324 - C15914 * C337 + C15908 * C354 +
             C15916 * C334 - C15917 * C323 - C15916 * C335 + C32498 * C353) *
                C32680) *
               C32867 +
           ((C15914 * C231 - C15915 * C219 - C15914 * C232 + C15908 * C249 +
             C15916 * C229 - C15917 * C218 - C15916 * C230 + C32498 * C248) *
                C21009 +
            (C15914 * C631 - C15915 * C624 - C15914 * C632 + C15908 * C639 +
             C15916 * C633 - C15917 * C625 - C15916 * C634 + C32498 * C640) *
                C32680) *
               C32855 +
           ((C15914 * C241 - C15915 * C224 - C15914 * C242 + C15908 * C254 +
             C15916 * C243 - C15917 * C225 - C15916 * C244 + C32498 * C255) *
                C21009 +
            (C15914 * C1083 - C15915 * C1074 - C15914 * C1084 + C15908 * C1101 +
             C15916 * C1449 - C15917 * C1448 - C15916 * C1450 +
             C32498 * C1451) *
                C32680) *
               C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C21009 +
            (C17164 + C17165) * C32680) *
               C32867 +
           ((C16065 + C16066) * C21009 + C17811 * C32680) * C32855 +
           C21976 * C32835) *
              C32551 * C213 -
          (((C16643 + C16644) * C32680 + (C16070 + C16069) * C21009) * C32835 +
           (C20911 * C32680 + (C16068 + C16067) * C21009) * C32855 +
           (C17813 * C32680 + (C16066 + C16065) * C21009) * C32867) *
              C32551 * C214 +
          (C21976 * C32867 +
           (C16074 * C21009 + (C16644 + C16643) * C32680) * C32855 +
           ((C16072 + C16071) * C21009 +
            (C15914 * C6395 - C15915 * C6392 - C15914 * C6396 + C15908 * C6401 +
             C15916 * C6605 - C15917 * C6604 - C15916 * C6606 +
             C32498 * C6607) *
                C32680) *
               C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
            C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
               C32875 +
           (C17164 + C17165) * C32872 + C17172 * C32863 +
           (C17171 + C17170) * C32819) *
              C32581 * C32551 * C32537 * C110 -
          ((C15916 * C1991 - C15917 * C1985 - C15916 * C1992 + C32498 * C2003 +
            C15914 * C1993 - C15915 * C1986 - C15914 * C1994 + C15908 * C2004) *
               C32819 +
           (C17616 + C17615) * C32863 + (C17614 + C17613) * C32872 +
           (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
            C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
               C32875) *
              C32581 * C32551 * C32537 * C111 +
          ((C15914 * C134 - C15915 * C125 - C15914 * C135 + C15908 * C146 +
            C15916 * C136 - C15917 * C126 - C15916 * C137 + C32498 * C147) *
               C32875 +
           (C15914 * C336 - C15915 * C324 - C15914 * C337 + C15908 * C354 +
            C15916 * C334 - C15917 * C323 - C15916 * C335 + C32498 * C353) *
               C32872 +
           (C15914 * C346 - C15915 * C329 - C15914 * C347 + C15908 * C359 +
            C15916 * C348 - C15917 * C330 - C15916 * C349 + C32498 * C360) *
               C32863 +
           (C15914 * C1991 - C15915 * C1985 - C15914 * C1992 + C15908 * C2003 +
            C15916 * C2371 - C15917 * C2370 - C15916 * C2372 + C32498 * C2373) *
               C32819) *
              C32581 * C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
            C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
               C32875 +
           (C17164 + C17165) * C32872 + C17172 * C32863 +
           (C17171 + C17170) * C32819) *
              C32581 * C32551 * C213 -
          ((C17168 + C17169) * C32819 + C17812 * C32863 + C17813 * C32872 +
           (C16066 + C16065) * C32875) *
              C32581 * C32551 * C214 +
          (C16073 * C32875 + C20166 * C32872 + (C16968 + C16967) * C32863 +
           (C15914 * C7091 - C15915 * C7088 - C15914 * C7092 + C15908 * C7097 +
            C15916 * C7466 - C15917 * C7465 - C15916 * C7467 + C32498 * C7468) *
               C32819) *
              C32581 * C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
             C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
             C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
                C32676 +
            (C19236 + C19237 + C19238) * C32683 + C24788 * C24553) *
               C32581 * C32551 * C444 -
           ((C19239 + C19240 + C19241) * C24553 + C19872 * C32683 +
            (C18102 + C18101 + C18100) * C32676) *
               C32581 * C32551 * C445) *
              C446 +
          (((C18404 + C18405 + C18406) * C32676 +
            (C19457 + C19458 + C19459) * C32683 +
            (C31633 * C1091 - C31673 * C1078 - C31633 * C1092 + C32493 * C1105 +
             C31629 * C1093 - C31668 * C1079 - C31629 * C1094 + C32501 * C1106 +
             C31679 * C2221 - C17934 * C2220 - C31679 * C2222 +
             C17925 * C2223) *
                C24553) *
               C32581 * C32551 * C445 -
           ((C31679 * C348 - C17934 * C330 - C31679 * C349 + C17925 * C360 +
             C31629 * C346 - C31668 * C329 - C31629 * C347 + C32501 * C359 +
             C31633 * C344 - C31673 * C328 - C31633 * C345 + C32493 * C358) *
                C24553 +
            (C19674 + C19673 + C19672) * C32683 +
            (C31679 * C136 - C17934 * C126 - C31679 * C137 + C17925 * C147 +
             C31629 * C134 - C31668 * C125 - C31629 * C135 + C32501 * C146 +
             C31633 * C132 - C31673 * C124 - C31633 * C133 + C32493 * C145) *
                C32676) *
               C32581 * C32551 * C444) *
              C447)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
             C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
             C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
                C32676 +
            (C19236 + C19237 + C19238) * C32683 + C24788 * C24553) *
               C32581 * C534 -
           ((C24795 + C24796 + C24797) * C24553 +
            (C19242 + C19243 + C19244) * C32683 +
            (C19238 + C19237 + C19236) * C32676) *
               C32581 * C535) *
              C444 +
          ((C19871 * C32676 + (C19241 + C19240 + C19239) * C32683 +
            (C31633 * C2565 - C31673 * C2562 - C31633 * C2566 + C32493 * C2571 +
             C31629 * C2567 - C31668 * C2563 - C31629 * C2568 + C32501 * C2572 +
             C31679 * C2569 - C17934 * C2564 - C31679 * C2570 +
             C17925 * C2573) *
                C24553) *
               C32581 * C535 -
           ((C19239 + C19240 + C19241) * C24553 + C19872 * C32683 +
            (C18102 + C18101 + C18100) * C32676) *
               C32581 * C534) *
              C445) *
         C32525) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
            C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
            C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
               C32676 +
           (C19236 + C19237 + C19238) * C32683 +
           (C19244 + C19243 + C19242) * C24553) *
              C32581 * C32551 * C213 -
          ((C19239 + C19240 + C19241) * C24553 + C19872 * C32683 +
           (C18102 + C18101 + C18100) * C32676) *
              C32581 * C32551 * C214 +
          (C18110 * C32676 + (C18740 + C18739 + C18738) * C32683 +
           (C31633 * C1095 - C31673 * C1080 - C31633 * C1096 + C32493 * C1107 +
            C31629 * C1097 - C31668 * C1081 - C31629 * C1098 + C32501 * C1108 +
            C31679 * C1099 - C17934 * C1082 - C31679 * C1100 + C17925 * C1109) *
               C24553) *
              C32581 * C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
            C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
            C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
               C32676 +
           (C19236 + C19237 + C19238) * C32683 +
           (C19244 + C19243 + C19242) * C24553) *
              C32581 * C32551 * C32537 * C110 -
          ((C31679 * C348 - C17934 * C330 - C31679 * C349 + C17925 * C360 +
            C31629 * C346 - C31668 * C329 - C31629 * C347 + C32501 * C359 +
            C31633 * C344 - C31673 * C328 - C31633 * C345 + C32493 * C358) *
               C24553 +
           (C19674 + C19673 + C19672) * C32683 +
           (C31679 * C136 - C17934 * C126 - C31679 * C137 + C17925 * C147 +
            C31629 * C134 - C31668 * C125 - C31629 * C135 + C32501 * C146 +
            C31633 * C132 - C31673 * C124 - C31633 * C133 + C32493 * C145) *
               C32676) *
              C32581 * C32551 * C32537 * C111 +
          ((C31633 * C134 - C31673 * C125 - C31633 * C135 + C32493 * C146 +
            C31629 * C136 - C31668 * C126 - C31629 * C137 + C32501 * C147 +
            C31679 * C138 - C17934 * C127 - C31679 * C139 + C17925 * C148) *
               C32676 +
           (C31633 * C336 - C31673 * C324 - C31633 * C337 + C32493 * C354 +
            C31629 * C334 - C31668 * C323 - C31629 * C335 + C32501 * C353 +
            C31679 * C332 - C17934 * C322 - C31679 * C333 + C17925 * C352) *
               C32683 +
           (C31633 * C346 - C31673 * C329 - C31633 * C347 + C32493 * C359 +
            C31629 * C348 - C31668 * C330 - C31629 * C349 + C32501 * C360 +
            C31679 * C350 - C17934 * C331 - C31679 * C351 + C17925 * C361) *
               C24553) *
              C32581 * C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
            C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
            C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
               C32676 +
           (C19236 + C19237 + C19238) * C32683 + C24788 * C24553) *
              C32581 * C319 -
          ((C24795 + C24796 + C24797) * C24553 +
           (C19242 + C19243 + C19244) * C32683 +
           (C19238 + C19237 + C19236) * C32676) *
              C32581 * C320 +
          (C24788 * C32676 + (C24797 + C24796 + C24795) * C32683 +
           (C31633 * C1997 - C31673 * C1988 - C31633 * C1998 + C32493 * C2006 +
            C31629 * C1999 - C31668 * C1989 - C31629 * C2000 + C32501 * C2007 +
            C31679 * C2001 - C17934 * C1990 - C31679 * C2002 + C17925 * C2008) *
               C24553) *
              C32581 * C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
             C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
             C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
                C32676 +
            (C19236 + C19237 + C19238) * C32683 + C24788 * C24553) *
               C32581 * C534 -
           ((C24795 + C24796 + C24797) * C24553 +
            (C19242 + C19243 + C19244) * C32683 +
            (C19238 + C19237 + C19236) * C32676) *
               C32581 * C535) *
              C32537 * C446 +
          (((C19672 + C19673 + C19674) * C32676 +
            (C25108 + C25109 + C25110) * C32683 +
            (C31633 * C1993 - C31673 * C1986 - C31633 * C1994 + C32493 * C2004 +
             C31629 * C1991 - C31668 * C1985 - C31629 * C1992 + C32501 * C2003 +
             C31679 * C2371 - C17934 * C2370 - C31679 * C2372 +
             C17925 * C2373) *
                C24553) *
               C32581 * C535 -
           ((C25110 + C25109 + C25108) * C24553 +
            (C19674 + C19673 + C19672) * C32683 +
            (C31679 * C136 - C17934 * C126 - C31679 * C137 + C17925 * C147 +
             C31629 * C134 - C31668 * C125 - C31629 * C135 + C32501 * C146 +
             C31633 * C132 - C31673 * C124 - C31633 * C133 + C32493 * C145) *
                C32676) *
               C32581 * C534) *
              C32537 * C447)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
            C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
            C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
               C32676 +
           (C19236 + C19237 + C19238) * C32683 +
           (C19244 + C19243 + C19242) * C24553) *
              C32581 * C32551 * C32537 * C110 -
          ((C31679 * C348 - C17934 * C330 - C31679 * C349 + C17925 * C360 +
            C31629 * C346 - C31668 * C329 - C31629 * C347 + C32501 * C359 +
            C31633 * C344 - C31673 * C328 - C31633 * C345 + C32493 * C358) *
               C24553 +
           (C19674 + C19673 + C19672) * C32683 +
           (C31679 * C136 - C17934 * C126 - C31679 * C137 + C17925 * C147 +
            C31629 * C134 - C31668 * C125 - C31629 * C135 + C32501 * C146 +
            C31633 * C132 - C31673 * C124 - C31633 * C133 + C32493 * C145) *
               C32676) *
              C32581 * C32551 * C32537 * C111 +
          ((C31633 * C134 - C31673 * C125 - C31633 * C135 + C32493 * C146 +
            C31629 * C136 - C31668 * C126 - C31629 * C137 + C32501 * C147 +
            C31679 * C138 - C17934 * C127 - C31679 * C139 + C17925 * C148) *
               C32676 +
           (C31633 * C336 - C31673 * C324 - C31633 * C337 + C32493 * C354 +
            C31629 * C334 - C31668 * C323 - C31629 * C335 + C32501 * C353 +
            C31679 * C332 - C17934 * C322 - C31679 * C333 + C17925 * C352) *
               C32683 +
           (C31633 * C346 - C31673 * C329 - C31633 * C347 + C32493 * C359 +
            C31629 * C348 - C31668 * C330 - C31629 * C349 + C32501 * C360 +
            C31679 * C350 - C17934 * C331 - C31679 * C351 + C17925 * C361) *
               C24553) *
              C32581 * C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((C31633 * C130 - C31673 * C123 - C31633 * C131 + C32493 * C144 +
            C31629 * C132 - C31668 * C124 - C31629 * C133 + C32501 * C145 +
            C31679 * C134 - C17934 * C125 - C31679 * C135 + C17925 * C146) *
               C32676 +
           (C19236 + C19237 + C19238) * C32683 +
           (C19244 + C19243 + C19242) * C24553) *
              C32581 * C32551 * C213 -
          ((C19239 + C19240 + C19241) * C24553 + C19872 * C32683 +
           (C18102 + C18101 + C18100) * C32676) *
              C32581 * C32551 * C214 +
          (C18110 * C32676 + (C18740 + C18739 + C18738) * C32683 +
           (C31633 * C1095 - C31673 * C1080 - C31633 * C1096 + C32493 * C1107 +
            C31629 * C1097 - C31668 * C1081 - C31629 * C1098 + C32501 * C1108 +
            C31679 * C1099 - C17934 * C1082 - C31679 * C1100 + C17925 * C1109) *
               C24553) *
              C32581 * C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
             C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
             C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
             C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
                C21009 +
            (C21256 + C21257 + C21258 + C21259) * C32680) *
               C32581 * C32551 * C444 -
           ((C15807 + C15808 + C15809 + C15810) * C32680 +
            (C15262 + C15261 + C15260 + C15259) * C21009) *
               C32581 * C32551 * C445) *
              C446 +
          (((C15519 + C15520 + C15521 + C15522) * C21009 +
            (C15104 * C629 - C15105 * C623 - C15104 * C630 + C32873 * C638 +
             C15106 * C631 - C15107 * C624 - C15106 * C632 + C32866 * C639 +
             C15108 * C633 - C15109 * C625 - C15108 * C634 + C32853 * C640 +
             C15110 * C635 - C15111 * C626 - C15110 * C636 + C32803 * C641) *
                C32680) *
               C32581 * C32551 * C445 -
           ((C15110 * C332 - C15111 * C322 - C15110 * C333 + C32803 * C352 +
             C15108 * C334 - C15109 * C323 - C15108 * C335 + C32853 * C353 +
             C15106 * C336 - C15107 * C324 - C15106 * C337 + C32866 * C354 +
             C15104 * C338 - C15105 * C325 - C15104 * C339 + C32873 * C355) *
                C32680 +
            (C15110 * C138 - C15111 * C127 - C15110 * C139 + C32803 * C148 +
             C15108 * C136 - C15109 * C126 - C15108 * C137 + C32853 * C147 +
             C15106 * C134 - C15107 * C125 - C15106 * C135 + C32866 * C146 +
             C15104 * C132 - C15105 * C124 - C15104 * C133 + C32873 * C145) *
                C21009) *
               C32581 * C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
              C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                 C21009 +
             (C17164 + C17165) * C32680) *
                C32867 +
            ((C16065 + C16066) * C21009 + C17811 * C32680) * C32855 +
            C21976 * C32835) *
               C32551 * C444 -
           (((C16643 + C16644) * C32680 + (C16070 + C16069) * C21009) * C32835 +
            (C20911 * C32680 + (C16068 + C16067) * C21009) * C32855 +
            (C17813 * C32680 + (C16066 + C16065) * C21009) * C32867) *
               C32551 * C445) *
              C446 +
          ((((C16341 + C16342) * C21009 + (C17391 + C17392) * C32680) * C32867 +
            ((C16343 + C16344) * C21009 + (C20521 + C20522) * C32680) * C32855 +
            ((C16345 + C16346) * C21009 +
             (C15914 * C1603 - C15915 * C1599 - C15914 * C1604 +
              C15908 * C1608 + C15916 * C1605 - C15917 * C1600 -
              C15916 * C1606 + C32498 * C1609) *
                 C32680) *
                C32835) *
               C32551 * C445 -
           (((C20522 + C20521) * C32680 + (C16344 + C16343) * C21009) * C32835 +
            ((C17392 + C17391) * C32680 + (C16342 + C16341) * C21009) * C32855 +
            ((C17614 + C17613) * C32680 +
             (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
              C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
                 C21009) *
                C32867) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
             C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
             C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
             C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
                C21009 +
            (C21256 + C21257 + C21258 + C21259) * C32680) *
               C32581 * C534 -
           ((C21260 + C21261 + C21262 + C21263) * C32680 +
            (C21259 + C21258 + C21257 + C21256) * C21009) *
               C32581 * C535) *
              C444 +
          (((C15810 + C15809 + C15808 + C15807) * C21009 +
            (C15104 * C1089 - C15105 * C1077 - C15104 * C1090 + C32873 * C1104 +
             C15106 * C1091 - C15107 * C1078 - C15106 * C1092 + C32866 * C1105 +
             C15108 * C1093 - C15109 * C1079 - C15108 * C1094 + C32853 * C1106 +
             C15110 * C2221 - C15111 * C2220 - C15110 * C2222 +
             C32803 * C2223) *
                C32680) *
               C32581 * C535 -
           ((C15807 + C15808 + C15809 + C15810) * C32680 +
            (C15262 + C15261 + C15260 + C15259) * C21009) *
               C32581 * C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
              C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                 C21009 +
             (C17164 + C17165) * C32680) *
                C32867 +
            ((C16065 + C16066) * C21009 + C17811 * C32680) * C32855 +
            C21976 * C32835) *
               C534 -
           (((C16967 + C16968) * C32680 + C20911 * C21009) * C32835 +
            (C17812 * C32680 + C17813 * C21009) * C32855 +
            ((C17167 + C17166) * C32680 + (C17165 + C17164) * C21009) *
                C32867) *
               C535) *
              C444 +
          (((C17811 * C21009 + C17131 * C32680) * C32867 +
            (C20166 * C21009 + (C16968 + C16967) * C32680) * C32855 +
            ((C16644 + C16643) * C21009 +
             (C15914 * C6397 - C15915 * C6393 - C15914 * C6398 +
              C15908 * C6402 + C15916 * C7282 - C15917 * C7281 -
              C15916 * C7283 + C32498 * C7284) *
                 C32680) *
                C32835) *
               C535 -
           (((C16643 + C16644) * C32680 + (C16070 + C16069) * C21009) * C32835 +
            (C20911 * C32680 + (C16068 + C16067) * C21009) * C32855 +
            (C17813 * C32680 + (C16066 + C16065) * C21009) * C32867) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
            C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
            C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
            C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
               C21009 +
           (C15104 * C340 - C15105 * C326 - C15104 * C341 + C32873 * C356 +
            C15106 * C338 - C15107 * C325 - C15106 * C339 + C32866 * C355 +
            C15108 * C336 - C15109 * C324 - C15108 * C337 + C32853 * C354 +
            C15110 * C334 - C15111 * C323 - C15110 * C335 + C32803 * C353) *
               C32680) *
              C32581 * C32551 * C213 -
          ((C15807 + C15808 + C15809 + C15810) * C32680 +
           (C15262 + C15261 + C15260 + C15259) * C21009) *
              C32581 * C32551 * C214 +
          ((C15266 + C15265 + C15264 + C15263) * C21009 +
           (C15104 * C1087 - C15105 * C1076 - C15104 * C1088 + C32873 * C1103 +
            C15106 * C1085 - C15107 * C1075 - C15106 * C1086 + C32866 * C1102 +
            C15108 * C1083 - C15109 * C1074 - C15108 * C1084 + C32853 * C1101 +
            C15110 * C1449 - C15111 * C1448 - C15110 * C1450 + C32803 * C1451) *
               C32680) *
              C32581 * C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
            C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
            C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
            C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
               C21009 +
           (C15104 * C340 - C15105 * C326 - C15104 * C341 + C32873 * C356 +
            C15106 * C338 - C15107 * C325 - C15106 * C339 + C32866 * C355 +
            C15108 * C336 - C15109 * C324 - C15108 * C337 + C32853 * C354 +
            C15110 * C334 - C15111 * C323 - C15110 * C335 + C32803 * C353) *
               C32680) *
              C32581 * C32551 * C32537 * C110 -
          ((C15110 * C332 - C15111 * C322 - C15110 * C333 + C32803 * C352 +
            C15108 * C334 - C15109 * C323 - C15108 * C335 + C32853 * C353 +
            C15106 * C336 - C15107 * C324 - C15106 * C337 + C32866 * C354 +
            C15104 * C338 - C15105 * C325 - C15104 * C339 + C32873 * C355) *
               C32680 +
           (C15110 * C138 - C15111 * C127 - C15110 * C139 + C32803 * C148 +
            C15108 * C136 - C15109 * C126 - C15108 * C137 + C32853 * C147 +
            C15106 * C134 - C15107 * C125 - C15106 * C135 + C32866 * C146 +
            C15104 * C132 - C15105 * C124 - C15104 * C133 + C32873 * C145) *
               C21009) *
              C32581 * C32551 * C32537 * C111 +
          ((C15104 * C134 - C15105 * C125 - C15104 * C135 + C32873 * C146 +
            C15106 * C136 - C15107 * C126 - C15106 * C137 + C32866 * C147 +
            C15108 * C138 - C15109 * C127 - C15108 * C139 + C32853 * C148 +
            C15110 * C140 - C15111 * C128 - C15110 * C141 + C32803 * C149) *
               C21009 +
           (C15104 * C336 - C15105 * C324 - C15104 * C337 + C32873 * C354 +
            C15106 * C334 - C15107 * C323 - C15106 * C335 + C32866 * C353 +
            C15108 * C332 - C15109 * C322 - C15108 * C333 + C32853 * C352 +
            C15110 * C537 - C15111 * C536 - C15110 * C538 + C32803 * C539) *
               C32680) *
              C32581 * C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
            C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
            C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
            C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
               C21009 +
           (C21256 + C21257 + C21258 + C21259) * C32680) *
              C32581 * C319 -
          ((C21260 + C21261 + C21262 + C21263) * C32680 +
           (C21259 + C21258 + C21257 + C21256) * C21009) *
              C32581 * C320 +
          ((C21263 + C21262 + C21261 + C21260) * C21009 +
           (C15104 * C1995 - C15105 * C1987 - C15104 * C1996 + C32873 * C2005 +
            C15106 * C1993 - C15107 * C1986 - C15106 * C1994 + C32866 * C2004 +
            C15108 * C1991 - C15109 * C1985 - C15108 * C1992 + C32853 * C2003 +
            C15110 * C2371 - C15111 * C2370 - C15110 * C2372 + C32803 * C2373) *
               C32680) *
              C32581 * C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C21009 +
            (C17164 + C17165) * C32680) *
               C32867 +
           ((C16065 + C16066) * C21009 + C17811 * C32680) * C32855 +
           (C16073 * C21009 + C20166 * C32680) * C32835) *
              C32551 * C32537 * C110 -
          (((C20522 + C20521) * C32680 + (C16344 + C16343) * C21009) * C32835 +
           ((C17392 + C17391) * C32680 + (C16342 + C16341) * C21009) * C32855 +
           ((C17614 + C17613) * C32680 +
            (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
             C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
                C21009) *
               C32867) *
              C32551 * C32537 * C111 +
          (((C15914 * C134 - C15915 * C125 - C15914 * C135 + C15908 * C146 +
             C15916 * C136 - C15917 * C126 - C15916 * C137 + C32498 * C147) *
                C21009 +
            (C15914 * C336 - C15915 * C324 - C15914 * C337 + C15908 * C354 +
             C15916 * C334 - C15917 * C323 - C15916 * C335 + C32498 * C353) *
                C32680) *
               C32867 +
           ((C15914 * C231 - C15915 * C219 - C15914 * C232 + C15908 * C249 +
             C15916 * C229 - C15917 * C218 - C15916 * C230 + C32498 * C248) *
                C21009 +
            (C15914 * C631 - C15915 * C624 - C15914 * C632 + C15908 * C639 +
             C15916 * C633 - C15917 * C625 - C15916 * C634 + C32498 * C640) *
                C32680) *
               C32855 +
           ((C15914 * C241 - C15915 * C224 - C15914 * C242 + C15908 * C254 +
             C15916 * C243 - C15917 * C225 - C15916 * C244 + C32498 * C255) *
                C21009 +
            (C15914 * C1083 - C15915 * C1074 - C15914 * C1084 + C15908 * C1101 +
             C15916 * C1449 - C15917 * C1448 - C15916 * C1450 +
             C32498 * C1451) *
                C32680) *
               C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C21009 +
            (C17164 + C17165) * C32680) *
               C32867 +
           ((C16065 + C16066) * C21009 + C17811 * C32680) * C32855 +
           C21976 * C32835) *
              C32551 * C213 -
          (((C16643 + C16644) * C32680 + (C16070 + C16069) * C21009) * C32835 +
           (C20911 * C32680 + (C16068 + C16067) * C21009) * C32855 +
           (C17813 * C32680 + (C16066 + C16065) * C21009) * C32867) *
              C32551 * C214 +
          (C21976 * C32867 +
           (C16074 * C21009 + (C16644 + C16643) * C32680) * C32855 +
           ((C16072 + C16071) * C21009 +
            (C15914 * C6395 - C15915 * C6392 - C15914 * C6396 + C15908 * C6401 +
             C15916 * C6605 - C15917 * C6604 - C15916 * C6606 +
             C32498 * C6607) *
                C32680) *
               C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C21009 +
            (C17164 + C17165) * C32680) *
               C32867 +
           ((C16065 + C16066) * C21009 + C17811 * C32680) * C32855 +
           C21976 * C32835) *
              C319 -
          (((C16967 + C16968) * C32680 + C20911 * C21009) * C32835 +
           (C17812 * C32680 + C17813 * C21009) * C32855 +
           ((C17167 + C17166) * C32680 + (C17165 + C17164) * C21009) * C32867) *
              C320 +
          ((C17172 * C21009 + (C17171 + C17170) * C32680) * C32867 +
           (C17131 * C21009 + (C17169 + C17168) * C32680) * C32855 +
           ((C16968 + C16967) * C21009 +
            (C15914 * C7091 - C15915 * C7088 - C15914 * C7092 + C15908 * C7097 +
             C15916 * C7466 - C15917 * C7465 - C15916 * C7467 +
             C32498 * C7468) *
                C32680) *
               C32835) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
             C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
             C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
             C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
                C21009 +
            (C21256 + C21257 + C21258 + C21259) * C32680) *
               C32581 * C534 -
           ((C21260 + C21261 + C21262 + C21263) * C32680 +
            (C21259 + C21258 + C21257 + C21256) * C21009) *
               C32581 * C535) *
              C32537 * C446 +
          (((C21548 + C21549 + C21550 + C21551) * C21009 +
            (C15104 * C344 - C15105 * C328 - C15104 * C345 + C32873 * C358 +
             C15106 * C346 - C15107 * C329 - C15106 * C347 + C32866 * C359 +
             C15108 * C348 - C15109 * C330 - C15108 * C349 + C32853 * C360 +
             C15110 * C350 - C15111 * C331 - C15110 * C351 + C32803 * C361) *
                C32680) *
               C32581 * C535 -
           ((C21551 + C21550 + C21549 + C21548) * C32680 +
            (C15110 * C138 - C15111 * C127 - C15110 * C139 + C32803 * C148 +
             C15108 * C136 - C15109 * C126 - C15108 * C137 + C32853 * C147 +
             C15106 * C134 - C15107 * C125 - C15106 * C135 + C32866 * C146 +
             C15104 * C132 - C15105 * C124 - C15104 * C133 + C32873 * C145) *
                C21009) *
               C32581 * C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
              C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                 C21009 +
             (C17164 + C17165) * C32680) *
                C32867 +
            ((C16065 + C16066) * C21009 + C17811 * C32680) * C32855 +
            C21976 * C32835) *
               C534 -
           (((C16967 + C16968) * C32680 + C20911 * C21009) * C32835 +
            (C17812 * C32680 + C17813 * C21009) * C32855 +
            ((C17167 + C17166) * C32680 + (C17165 + C17164) * C21009) *
                C32867) *
               C535) *
              C32537 * C446 +
          ((((C17613 + C17614) * C21009 + (C17615 + C17616) * C32680) * C32867 +
            ((C17391 + C17392) * C21009 + (C17393 + C17394) * C32680) * C32855 +
            ((C20521 + C20522) * C21009 +
             (C15914 * C1097 - C15915 * C1081 - C15914 * C1098 +
              C15908 * C1108 + C15916 * C1099 - C15917 * C1082 -
              C15916 * C1100 + C32498 * C1109) *
                 C32680) *
                C32835) *
               C535 -
           (((C20522 + C20521) * C32680 + (C16344 + C16343) * C21009) * C32835 +
            ((C17392 + C17391) * C32680 + (C16342 + C16341) * C21009) * C32855 +
            ((C17614 + C17613) * C32680 +
             (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
              C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
                 C21009) *
                C32867) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
            C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
            C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
            C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
               C21009 +
           (C15104 * C340 - C15105 * C326 - C15104 * C341 + C32873 * C356 +
            C15106 * C338 - C15107 * C325 - C15106 * C339 + C32866 * C355 +
            C15108 * C336 - C15109 * C324 - C15108 * C337 + C32853 * C354 +
            C15110 * C334 - C15111 * C323 - C15110 * C335 + C32803 * C353) *
               C32680) *
              C32581 * C32551 * C32537 * C110 -
          ((C15110 * C332 - C15111 * C322 - C15110 * C333 + C32803 * C352 +
            C15108 * C334 - C15109 * C323 - C15108 * C335 + C32853 * C353 +
            C15106 * C336 - C15107 * C324 - C15106 * C337 + C32866 * C354 +
            C15104 * C338 - C15105 * C325 - C15104 * C339 + C32873 * C355) *
               C32680 +
           (C15110 * C138 - C15111 * C127 - C15110 * C139 + C32803 * C148 +
            C15108 * C136 - C15109 * C126 - C15108 * C137 + C32853 * C147 +
            C15106 * C134 - C15107 * C125 - C15106 * C135 + C32866 * C146 +
            C15104 * C132 - C15105 * C124 - C15104 * C133 + C32873 * C145) *
               C21009) *
              C32581 * C32551 * C32537 * C111 +
          ((C15104 * C134 - C15105 * C125 - C15104 * C135 + C32873 * C146 +
            C15106 * C136 - C15107 * C126 - C15106 * C137 + C32866 * C147 +
            C15108 * C138 - C15109 * C127 - C15108 * C139 + C32853 * C148 +
            C15110 * C140 - C15111 * C128 - C15110 * C141 + C32803 * C149) *
               C21009 +
           (C15104 * C336 - C15105 * C324 - C15104 * C337 + C32873 * C354 +
            C15106 * C334 - C15107 * C323 - C15106 * C335 + C32866 * C353 +
            C15108 * C332 - C15109 * C322 - C15108 * C333 + C32853 * C352 +
            C15110 * C537 - C15111 * C536 - C15110 * C538 + C32803 * C539) *
               C32680) *
              C32581 * C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C15104 * C130 - C15105 * C123 - C15104 * C131 + C32873 * C144 +
            C15106 * C132 - C15107 * C124 - C15106 * C133 + C32866 * C145 +
            C15108 * C134 - C15109 * C125 - C15108 * C135 + C32853 * C146 +
            C15110 * C136 - C15111 * C126 - C15110 * C137 + C32803 * C147) *
               C21009 +
           (C15104 * C340 - C15105 * C326 - C15104 * C341 + C32873 * C356 +
            C15106 * C338 - C15107 * C325 - C15106 * C339 + C32866 * C355 +
            C15108 * C336 - C15109 * C324 - C15108 * C337 + C32853 * C354 +
            C15110 * C334 - C15111 * C323 - C15110 * C335 + C32803 * C353) *
               C32680) *
              C32581 * C32551 * C213 -
          ((C15807 + C15808 + C15809 + C15810) * C32680 +
           (C15262 + C15261 + C15260 + C15259) * C21009) *
              C32581 * C32551 * C214 +
          ((C15266 + C15265 + C15264 + C15263) * C21009 +
           (C15104 * C1087 - C15105 * C1076 - C15104 * C1088 + C32873 * C1103 +
            C15106 * C1085 - C15107 * C1075 - C15106 * C1086 + C32866 * C1102 +
            C15108 * C1083 - C15109 * C1074 - C15108 * C1084 + C32853 * C1101 +
            C15110 * C1449 - C15111 * C1448 - C15110 * C1450 + C32803 * C1451) *
               C32680) *
              C32581 * C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C21009 +
            (C17164 + C17165) * C32680) *
               C32867 +
           ((C16065 + C16066) * C21009 + C17811 * C32680) * C32855 +
           (C16073 * C21009 + C20166 * C32680) * C32835) *
              C32551 * C32537 * C110 -
          (((C20522 + C20521) * C32680 + (C16344 + C16343) * C21009) * C32835 +
           ((C17392 + C17391) * C32680 + (C16342 + C16341) * C21009) * C32855 +
           ((C17614 + C17613) * C32680 +
            (C15916 * C134 - C15917 * C125 - C15916 * C135 + C32498 * C146 +
             C15914 * C132 - C15915 * C124 - C15914 * C133 + C15908 * C145) *
                C21009) *
               C32867) *
              C32551 * C32537 * C111 +
          (((C15914 * C134 - C15915 * C125 - C15914 * C135 + C15908 * C146 +
             C15916 * C136 - C15917 * C126 - C15916 * C137 + C32498 * C147) *
                C21009 +
            (C15914 * C336 - C15915 * C324 - C15914 * C337 + C15908 * C354 +
             C15916 * C334 - C15917 * C323 - C15916 * C335 + C32498 * C353) *
                C32680) *
               C32867 +
           ((C15914 * C231 - C15915 * C219 - C15914 * C232 + C15908 * C249 +
             C15916 * C229 - C15917 * C218 - C15916 * C230 + C32498 * C248) *
                C21009 +
            (C15914 * C631 - C15915 * C624 - C15914 * C632 + C15908 * C639 +
             C15916 * C633 - C15917 * C625 - C15916 * C634 + C32498 * C640) *
                C32680) *
               C32855 +
           ((C15914 * C241 - C15915 * C224 - C15914 * C242 + C15908 * C254 +
             C15916 * C243 - C15917 * C225 - C15916 * C244 + C32498 * C255) *
                C21009 +
            (C15914 * C1083 - C15915 * C1074 - C15914 * C1084 + C15908 * C1101 +
             C15916 * C1449 - C15917 * C1448 - C15916 * C1450 +
             C32498 * C1451) *
                C32680) *
               C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C15914 * C130 - C15915 * C123 - C15914 * C131 + C15908 * C144 +
             C15916 * C132 - C15917 * C124 - C15916 * C133 + C32498 * C145) *
                C21009 +
            (C17164 + C17165) * C32680) *
               C32867 +
           ((C16065 + C16066) * C21009 + C17811 * C32680) * C32855 +
           C21976 * C32835) *
              C32551 * C213 -
          (((C16643 + C16644) * C32680 + (C16070 + C16069) * C21009) * C32835 +
           (C20911 * C32680 + (C16068 + C16067) * C21009) * C32855 +
           (C17813 * C32680 + (C16066 + C16065) * C21009) * C32867) *
              C32551 * C214 +
          (C21976 * C32867 +
           (C16074 * C21009 + (C16644 + C16643) * C32680) * C32855 +
           ((C16072 + C16071) * C21009 +
            (C15914 * C6395 - C15915 * C6392 - C15914 * C6396 + C15908 * C6401 +
             C15916 * C6605 - C15917 * C6604 - C15916 * C6606 +
             C32498 * C6607) *
                C32680) *
               C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
             C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
             C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
             C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
                C32593 * C32804 +
            (C2854 + C2855 + C2856 + C2857) * C32593 * C32640) *
               C32551 * C444 -
           ((C2858 + C2859 + C2860 + C2861) * C32593 * C32640 +
            (C2857 + C2856 + C2855 + C2854) * C32593 * C32804) *
               C32551 * C445) *
              C446 +
          (((C3114 + C3115 + C3116 + C3117) * C32593 * C32804 +
            (C2699 * C239 - C2700 * C223 - C2699 * C240 + C2693 * C253 +
             C2701 * C241 - C2702 * C224 - C2701 * C242 + C2694 * C254 +
             C2703 * C243 - C2704 * C225 - C2703 * C244 + C2695 * C255 +
             C2705 * C245 - C2706 * C226 - C2705 * C246 + C32803 * C256) *
                C32593 * C32640) *
               C32551 * C445 -
           ((C3117 + C3116 + C3115 + C3114) * C32593 * C32640 +
            (C2705 * C138 - C2706 * C127 - C2705 * C139 + C32803 * C148 +
             C2703 * C136 - C2704 * C126 - C2703 * C137 + C2695 * C147 +
             C2701 * C134 - C2702 * C125 - C2701 * C135 + C2694 * C146 +
             C2699 * C132 - C2700 * C124 - C2699 * C133 + C2693 * C145) *
                C32593 * C32804) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C32593 * C7739 +
            (C7894 + C7895) * C32593 * C7740 + C7904 * C7741 + C7905 * C32812) *
               C32551 * C444 -
           ((C7900 + C7901) * C32593 * C32812 +
            (C7899 + C7898) * C32593 * C7741 +
            (C7897 + C7896) * C32593 * C7740 +
            (C7895 + C7894) * C32593 * C7739) *
               C32551 * C445) *
              C446 +
          (((C8170 + C8171) * C32593 * C7739 +
            (C8172 + C8173) * C32593 * C7740 +
            (C8174 + C8175) * C32593 * C7741 +
            (C31623 * C888 - C7744 * C878 - C31623 * C889 + C32785 * C896 +
             C31604 * C890 - C7746 * C879 - C31604 * C891 + C32498 * C897) *
                C32593 * C32812) *
               C32551 * C445 -
           ((C8175 + C8174) * C32593 * C32812 +
            (C8173 + C8172) * C32593 * C7741 +
            (C8171 + C8170) * C32593 * C7740 +
            (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
             C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
                C32593 * C7739) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
             C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
             C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
             C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
                C32593 * C32804 +
            (C2854 + C2855 + C2856 + C2857) * C32593 * C32640) *
               C534 -
           ((C3402 + C3403 + C3404 + C3405) * C32593 * C32640 +
            (C2705 * C334 - C2706 * C323 - C2705 * C335 + C32803 * C353 +
             C2703 * C336 - C2704 * C324 - C2703 * C337 + C2695 * C354 +
             C2701 * C338 - C2702 * C325 - C2701 * C339 + C2694 * C355 +
             C2699 * C340 - C2700 * C326 - C2699 * C341 + C2693 * C356) *
                C32593 * C32804) *
               C535) *
              C444 +
          (((C3405 + C3404 + C3403 + C3402) * C32593 * C32804 +
            (C2699 * C1087 - C2700 * C1076 - C2699 * C1088 + C2693 * C1103 +
             C2701 * C1085 - C2702 * C1075 - C2701 * C1086 + C2694 * C1102 +
             C2703 * C1083 - C2704 * C1074 - C2703 * C1084 + C2695 * C1101 +
             C2705 * C1449 - C2706 * C1448 - C2705 * C1450 + C32803 * C1451) *
                C32593 * C32640) *
               C535 -
           ((C2858 + C2859 + C2860 + C2861) * C32593 * C32640 +
            (C2857 + C2856 + C2855 + C2854) * C32593 * C32804) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C32593 * C7739 +
            (C7894 + C7895) * C32593 * C7740 + C7904 * C7741 + C7905 * C32812) *
               C534 -
           ((C8472 + C8473) * C32593 * C32812 +
            (C8474 + C8475) * C32593 * C7741 +
            (C8476 + C8477) * C32593 * C7740 +
            (C31604 * C338 - C7746 * C325 - C31604 * C339 + C32498 * C355 +
             C31623 * C340 - C7744 * C326 - C31623 * C341 + C32785 * C356) *
                C32593 * C7739) *
               C535) *
              C444 +
          (((C8477 + C8476) * C32593 * C7739 +
            (C8475 + C8474) * C32593 * C7740 +
            (C8473 + C8472) * C32593 * C7741 +
            (C31623 * C6395 - C7744 * C6392 - C31623 * C6396 + C32785 * C6401 +
             C31604 * C6605 - C7746 * C6604 - C31604 * C6606 + C32498 * C6607) *
                C32593 * C32812) *
               C535 -
           ((C7900 + C7901) * C32593 * C32812 +
            (C7899 + C7898) * C32593 * C7741 +
            (C7897 + C7896) * C32593 * C7740 +
            (C7895 + C7894) * C32593 * C7739) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
            C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
            C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
            C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
               C32593 * C32804 +
           (C2854 + C2855 + C2856 + C2857) * C32593 * C32640) *
              C32551 * C213 -
          ((C2858 + C2859 + C2860 + C2861) * C32593 * C32640 +
           (C2857 + C2856 + C2855 + C2854) * C32593 * C32804) *
              C32551 * C214 +
          ((C2861 + C2860 + C2859 + C2858) * C32593 * C32804 +
           (C2699 * C884 - C2700 * C876 - C2699 * C885 + C2693 * C894 +
            C2701 * C882 - C2702 * C875 - C2701 * C883 + C2694 * C893 +
            C2703 * C880 - C2704 * C874 - C2703 * C881 + C2695 * C892 +
            C2705 * C1257 - C2706 * C1256 - C2705 * C1258 + C32803 * C1259) *
               C32593 * C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
            C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
            C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
            C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
               C32593 * C32804 +
           (C2699 * C235 - C2700 * C221 - C2699 * C236 + C2693 * C251 +
            C2701 * C233 - C2702 * C220 - C2701 * C234 + C2694 * C250 +
            C2703 * C231 - C2704 * C219 - C2703 * C232 + C2695 * C249 +
            C2705 * C229 - C2706 * C218 - C2705 * C230 + C32803 * C248) *
               C32593 * C32640) *
              C32551 * C32537 * C110 -
          ((C2705 * C227 - C2706 * C217 - C2705 * C228 + C32803 * C247 +
            C2703 * C229 - C2704 * C218 - C2703 * C230 + C2695 * C248 +
            C2701 * C231 - C2702 * C219 - C2701 * C232 + C2694 * C249 +
            C2699 * C233 - C2700 * C220 - C2699 * C234 + C2693 * C250) *
               C32593 * C32640 +
           (C2705 * C138 - C2706 * C127 - C2705 * C139 + C32803 * C148 +
            C2703 * C136 - C2704 * C126 - C2703 * C137 + C2695 * C147 +
            C2701 * C134 - C2702 * C125 - C2701 * C135 + C2694 * C146 +
            C2699 * C132 - C2700 * C124 - C2699 * C133 + C2693 * C145) *
               C32593 * C32804) *
              C32551 * C32537 * C111 +
          ((C2699 * C134 - C2700 * C125 - C2699 * C135 + C2693 * C146 +
            C2701 * C136 - C2702 * C126 - C2701 * C137 + C2694 * C147 +
            C2703 * C138 - C2704 * C127 - C2703 * C139 + C2695 * C148 +
            C2705 * C140 - C2706 * C128 - C2705 * C141 + C32803 * C149) *
               C32593 * C32804 +
           (C2699 * C231 - C2700 * C219 - C2699 * C232 + C2693 * C249 +
            C2701 * C229 - C2702 * C218 - C2701 * C230 + C2694 * C248 +
            C2703 * C227 - C2704 * C217 - C2703 * C228 + C2695 * C247 +
            C2705 * C449 - C2706 * C448 - C2705 * C450 + C32803 * C451) *
               C32593 * C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
            C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
            C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
            C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
               C32593 * C32804 +
           (C2854 + C2855 + C2856 + C2857) * C32593 * C32640) *
              C319 -
          ((C2705 * C633 - C2706 * C625 - C2705 * C634 + C32803 * C640 +
            C2703 * C631 - C2704 * C624 - C2703 * C632 + C2695 * C639 +
            C2701 * C629 - C2702 * C623 - C2701 * C630 + C2694 * C638 +
            C2699 * C627 - C2700 * C622 - C2699 * C628 + C2693 * C637) *
               C32593 * C32640 +
           (C2705 * C334 - C2706 * C323 - C2705 * C335 + C32803 * C353 +
            C2703 * C336 - C2704 * C324 - C2703 * C337 + C2695 * C354 +
            C2701 * C338 - C2702 * C325 - C2701 * C339 + C2694 * C355 +
            C2699 * C340 - C2700 * C326 - C2699 * C341 + C2693 * C356) *
               C32593 * C32804) *
              C320 +
          ((C2699 * C342 - C2700 * C327 - C2699 * C343 + C2693 * C357 +
            C2701 * C344 - C2702 * C328 - C2701 * C345 + C2694 * C358 +
            C2703 * C346 - C2704 * C329 - C2703 * C347 + C2695 * C359 +
            C2705 * C348 - C2706 * C330 - C2705 * C349 + C32803 * C360) *
               C32593 * C32804 +
           (C2699 * C1089 - C2700 * C1077 - C2699 * C1090 + C2693 * C1104 +
            C2701 * C1091 - C2702 * C1078 - C2701 * C1092 + C2694 * C1105 +
            C2703 * C1093 - C2704 * C1079 - C2703 * C1094 + C2695 * C1106 +
            C2705 * C2221 - C2706 * C2220 - C2705 * C2222 + C32803 * C2223) *
               C32593 * C32640) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
            C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
               C32593 * C7739 +
           (C31623 * C235 - C7744 * C221 - C31623 * C236 + C32785 * C251 +
            C31604 * C233 - C7746 * C220 - C31604 * C234 + C32498 * C250) *
               C32593 * C7740 +
           (C31623 * C237 - C7744 * C222 - C31623 * C238 + C32785 * C252 +
            C31604 * C239 - C7746 * C223 - C31604 * C240 + C32498 * C253) *
               C32593 * C7741 +
           (C31623 * C884 - C7744 * C876 - C31623 * C885 + C32785 * C894 +
            C31604 * C882 - C7746 * C875 - C31604 * C883 + C32498 * C893) *
               C32593 * C32812) *
              C32551 * C32537 * C110 -
          ((C31604 * C880 - C7746 * C874 - C31604 * C881 + C32498 * C892 +
            C31623 * C882 - C7744 * C875 - C31623 * C883 + C32785 * C893) *
               C32593 * C32812 +
           (C31604 * C241 - C7746 * C224 - C31604 * C242 + C32498 * C254 +
            C31623 * C239 - C7744 * C223 - C31623 * C240 + C32785 * C253) *
               C32593 * C7741 +
           (C31604 * C231 - C7746 * C219 - C31604 * C232 + C32498 * C249 +
            C31623 * C233 - C7744 * C220 - C31623 * C234 + C32785 * C250) *
               C32593 * C7740 +
           (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
            C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
               C32593 * C7739) *
              C32551 * C32537 * C111 +
          ((C31623 * C134 - C7744 * C125 - C31623 * C135 + C32785 * C146 +
            C31604 * C136 - C7746 * C126 - C31604 * C137 + C32498 * C147) *
               C32593 * C7739 +
           (C31623 * C231 - C7744 * C219 - C31623 * C232 + C32785 * C249 +
            C31604 * C229 - C7746 * C218 - C31604 * C230 + C32498 * C248) *
               C32593 * C7740 +
           (C31623 * C241 - C7744 * C224 - C31623 * C242 + C32785 * C254 +
            C31604 * C243 - C7746 * C225 - C31604 * C244 + C32498 * C255) *
               C32593 * C7741 +
           (C31623 * C880 - C7744 * C874 - C31623 * C881 + C32785 * C892 +
            C31604 * C1257 - C7746 * C1256 - C31604 * C1258 + C32498 * C1259) *
               C32593 * C32812) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
            C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
               C32593 * C7739 +
           (C7894 + C7895) * C32593 * C7740 + C7904 * C7741 + C7905 * C32812) *
              C32551 * C213 -
          ((C7900 + C7901) * C32593 * C32812 +
           (C7899 + C7898) * C32593 * C7741 + (C7897 + C7896) * C32593 * C7740 +
           (C7895 + C7894) * C32593 * C7739) *
              C32551 * C214 +
          (C7904 * C7739 + C7905 * C7740 + (C7901 + C7900) * C32593 * C7741 +
           (C31623 * C6284 - C7744 * C6282 - C31623 * C6285 + C32785 * C6288 +
            C31604 * C6487 - C7746 * C6486 - C31604 * C6488 + C32498 * C6489) *
               C32593 * C32812) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
            C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
               C32593 * C7739 +
           (C7894 + C7895) * C32593 * C7740 + C7904 * C7741 + C7905 * C32812) *
              C319 -
          ((C31604 * C1603 - C7746 * C1599 - C31604 * C1604 + C32498 * C1608 +
            C31623 * C1601 - C7744 * C1598 - C31623 * C1602 + C32785 * C1607) *
               C32593 * C32812 +
           (C31604 * C1085 - C7746 * C1075 - C31604 * C1086 + C32498 * C1102 +
            C31623 * C1087 - C7744 * C1076 - C31623 * C1088 + C32785 * C1103) *
               C32593 * C7741 +
           (C31604 * C629 - C7746 * C623 - C31604 * C630 + C32498 * C638 +
            C31623 * C627 - C7744 * C622 - C31623 * C628 + C32785 * C637) *
               C32593 * C7740 +
           (C31604 * C338 - C7746 * C325 - C31604 * C339 + C32498 * C355 +
            C31623 * C340 - C7744 * C326 - C31623 * C341 + C32785 * C356) *
               C32593 * C7739) *
              C320 +
          ((C31623 * C342 - C7744 * C327 - C31623 * C343 + C32785 * C357 +
            C31604 * C344 - C7746 * C328 - C31604 * C345 + C32498 * C358) *
               C32593 * C7739 +
           (C31623 * C1089 - C7744 * C1077 - C31623 * C1090 + C32785 * C1104 +
            C31604 * C1091 - C7746 * C1078 - C31604 * C1092 + C32498 * C1105) *
               C32593 * C7740 +
           (C31623 * C1095 - C7744 * C1080 - C31623 * C1096 + C32785 * C1107 +
            C31604 * C1097 - C7746 * C1081 - C31604 * C1098 + C32498 * C1108) *
               C32593 * C7741 +
           (C31623 * C6397 - C7744 * C6393 - C31623 * C6398 + C32785 * C6402 +
            C31604 * C7282 - C7746 * C7281 - C31604 * C7283 + C32498 * C7284) *
               C32593 * C32812) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
             C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
             C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
             C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
                C32593 * C32804 +
            (C2854 + C2855 + C2856 + C2857) * C32593 * C32640) *
               C534 -
           ((C2705 * C633 - C2706 * C625 - C2705 * C634 + C32803 * C640 +
             C2703 * C631 - C2704 * C624 - C2703 * C632 + C2695 * C639 +
             C2701 * C629 - C2702 * C623 - C2701 * C630 + C2694 * C638 +
             C2699 * C627 - C2700 * C622 - C2699 * C628 + C2693 * C637) *
                C32593 * C32640 +
            (C2705 * C334 - C2706 * C323 - C2705 * C335 + C32803 * C353 +
             C2703 * C336 - C2704 * C324 - C2703 * C337 + C2695 * C354 +
             C2701 * C338 - C2702 * C325 - C2701 * C339 + C2694 * C355 +
             C2699 * C340 - C2700 * C326 - C2699 * C341 + C2693 * C356) *
                C32593 * C32804) *
               C535) *
              C32537 * C446 +
          (((C2699 * C338 - C2700 * C325 - C2699 * C339 + C2693 * C355 +
             C2701 * C336 - C2702 * C324 - C2701 * C337 + C2694 * C354 +
             C2703 * C334 - C2704 * C323 - C2703 * C335 + C2695 * C353 +
             C2705 * C332 - C2706 * C322 - C2705 * C333 + C32803 * C352) *
                C32593 * C32804 +
            (C2699 * C629 - C2700 * C623 - C2699 * C630 + C2693 * C638 +
             C2701 * C631 - C2702 * C624 - C2701 * C632 + C2694 * C639 +
             C2703 * C633 - C2704 * C625 - C2703 * C634 + C2695 * C640 +
             C2705 * C635 - C2706 * C626 - C2705 * C636 + C32803 * C641) *
                C32593 * C32640) *
               C535 -
           ((C3117 + C3116 + C3115 + C3114) * C32593 * C32640 +
            (C2705 * C138 - C2706 * C127 - C2705 * C139 + C32803 * C148 +
             C2703 * C136 - C2704 * C126 - C2703 * C137 + C2695 * C147 +
             C2701 * C134 - C2702 * C125 - C2701 * C135 + C2694 * C146 +
             C2699 * C132 - C2700 * C124 - C2699 * C133 + C2693 * C145) *
                C32593 * C32804) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C32593 * C7739 +
            (C7894 + C7895) * C32593 * C7740 + C7904 * C7741 + C7905 * C32812) *
               C534 -
           ((C31604 * C1603 - C7746 * C1599 - C31604 * C1604 + C32498 * C1608 +
             C31623 * C1601 - C7744 * C1598 - C31623 * C1602 + C32785 * C1607) *
                C32593 * C32812 +
            (C31604 * C1085 - C7746 * C1075 - C31604 * C1086 + C32498 * C1102 +
             C31623 * C1087 - C7744 * C1076 - C31623 * C1088 + C32785 * C1103) *
                C32593 * C7741 +
            (C31604 * C629 - C7746 * C623 - C31604 * C630 + C32498 * C638 +
             C31623 * C627 - C7744 * C622 - C31623 * C628 + C32785 * C637) *
                C32593 * C7740 +
            (C31604 * C338 - C7746 * C325 - C31604 * C339 + C32498 * C355 +
             C31623 * C340 - C7744 * C326 - C31623 * C341 + C32785 * C356) *
                C32593 * C7739) *
               C535) *
              C32537 * C446 +
          (((C31623 * C338 - C7744 * C325 - C31623 * C339 + C32785 * C355 +
             C31604 * C336 - C7746 * C324 - C31604 * C337 + C32498 * C354) *
                C32593 * C7739 +
            (C31623 * C629 - C7744 * C623 - C31623 * C630 + C32785 * C638 +
             C31604 * C631 - C7746 * C624 - C31604 * C632 + C32498 * C639) *
                C32593 * C7740 +
            (C31623 * C1085 - C7744 * C1075 - C31623 * C1086 + C32785 * C1102 +
             C31604 * C1083 - C7746 * C1074 - C31604 * C1084 + C32498 * C1101) *
                C32593 * C7741 +
            (C31623 * C1603 - C7744 * C1599 - C31623 * C1604 + C32785 * C1608 +
             C31604 * C1605 - C7746 * C1600 - C31604 * C1606 + C32498 * C1609) *
                C32593 * C32812) *
               C535 -
           ((C8175 + C8174) * C32593 * C32812 +
            (C8173 + C8172) * C32593 * C7741 +
            (C8171 + C8170) * C32593 * C7740 +
            (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
             C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
                C32593 * C7739) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
            C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
            C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
            C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
               C32593 * C32804 +
           (C2699 * C235 - C2700 * C221 - C2699 * C236 + C2693 * C251 +
            C2701 * C233 - C2702 * C220 - C2701 * C234 + C2694 * C250 +
            C2703 * C231 - C2704 * C219 - C2703 * C232 + C2695 * C249 +
            C2705 * C229 - C2706 * C218 - C2705 * C230 + C32803 * C248) *
               C32593 * C32640) *
              C32551 * C32537 * C110 -
          ((C2705 * C227 - C2706 * C217 - C2705 * C228 + C32803 * C247 +
            C2703 * C229 - C2704 * C218 - C2703 * C230 + C2695 * C248 +
            C2701 * C231 - C2702 * C219 - C2701 * C232 + C2694 * C249 +
            C2699 * C233 - C2700 * C220 - C2699 * C234 + C2693 * C250) *
               C32593 * C32640 +
           (C2705 * C138 - C2706 * C127 - C2705 * C139 + C32803 * C148 +
            C2703 * C136 - C2704 * C126 - C2703 * C137 + C2695 * C147 +
            C2701 * C134 - C2702 * C125 - C2701 * C135 + C2694 * C146 +
            C2699 * C132 - C2700 * C124 - C2699 * C133 + C2693 * C145) *
               C32593 * C32804) *
              C32551 * C32537 * C111 +
          ((C2699 * C134 - C2700 * C125 - C2699 * C135 + C2693 * C146 +
            C2701 * C136 - C2702 * C126 - C2701 * C137 + C2694 * C147 +
            C2703 * C138 - C2704 * C127 - C2703 * C139 + C2695 * C148 +
            C2705 * C140 - C2706 * C128 - C2705 * C141 + C32803 * C149) *
               C32593 * C32804 +
           (C2699 * C231 - C2700 * C219 - C2699 * C232 + C2693 * C249 +
            C2701 * C229 - C2702 * C218 - C2701 * C230 + C2694 * C248 +
            C2703 * C227 - C2704 * C217 - C2703 * C228 + C2695 * C247 +
            C2705 * C449 - C2706 * C448 - C2705 * C450 + C32803 * C451) *
               C32593 * C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
            C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
            C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
            C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
               C32593 * C32804 +
           (C2854 + C2855 + C2856 + C2857) * C32593 * C32640) *
              C32551 * C213 -
          ((C2858 + C2859 + C2860 + C2861) * C32593 * C32640 +
           (C2857 + C2856 + C2855 + C2854) * C32593 * C32804) *
              C32551 * C214 +
          ((C2861 + C2860 + C2859 + C2858) * C32593 * C32804 +
           (C2699 * C884 - C2700 * C876 - C2699 * C885 + C2693 * C894 +
            C2701 * C882 - C2702 * C875 - C2701 * C883 + C2694 * C893 +
            C2703 * C880 - C2704 * C874 - C2703 * C881 + C2695 * C892 +
            C2705 * C1257 - C2706 * C1256 - C2705 * C1258 + C32803 * C1259) *
               C32593 * C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
            C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
               C32593 * C7739 +
           (C31623 * C235 - C7744 * C221 - C31623 * C236 + C32785 * C251 +
            C31604 * C233 - C7746 * C220 - C31604 * C234 + C32498 * C250) *
               C32593 * C7740 +
           (C31623 * C237 - C7744 * C222 - C31623 * C238 + C32785 * C252 +
            C31604 * C239 - C7746 * C223 - C31604 * C240 + C32498 * C253) *
               C32593 * C7741 +
           (C31623 * C884 - C7744 * C876 - C31623 * C885 + C32785 * C894 +
            C31604 * C882 - C7746 * C875 - C31604 * C883 + C32498 * C893) *
               C32593 * C32812) *
              C32551 * C32537 * C110 -
          ((C31604 * C880 - C7746 * C874 - C31604 * C881 + C32498 * C892 +
            C31623 * C882 - C7744 * C875 - C31623 * C883 + C32785 * C893) *
               C32593 * C32812 +
           (C31604 * C241 - C7746 * C224 - C31604 * C242 + C32498 * C254 +
            C31623 * C239 - C7744 * C223 - C31623 * C240 + C32785 * C253) *
               C32593 * C7741 +
           (C31604 * C231 - C7746 * C219 - C31604 * C232 + C32498 * C249 +
            C31623 * C233 - C7744 * C220 - C31623 * C234 + C32785 * C250) *
               C32593 * C7740 +
           (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
            C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
               C32593 * C7739) *
              C32551 * C32537 * C111 +
          ((C31623 * C134 - C7744 * C125 - C31623 * C135 + C32785 * C146 +
            C31604 * C136 - C7746 * C126 - C31604 * C137 + C32498 * C147) *
               C32593 * C7739 +
           (C31623 * C231 - C7744 * C219 - C31623 * C232 + C32785 * C249 +
            C31604 * C229 - C7746 * C218 - C31604 * C230 + C32498 * C248) *
               C32593 * C7740 +
           (C31623 * C241 - C7744 * C224 - C31623 * C242 + C32785 * C254 +
            C31604 * C243 - C7746 * C225 - C31604 * C244 + C32498 * C255) *
               C32593 * C7741 +
           (C31623 * C880 - C7744 * C874 - C31623 * C881 + C32785 * C892 +
            C31604 * C1257 - C7746 * C1256 - C31604 * C1258 + C32498 * C1259) *
               C32593 * C32812) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
            C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
               C32593 * C7739 +
           (C7894 + C7895) * C32593 * C7740 + C7904 * C7741 + C7905 * C32812) *
              C32551 * C213 -
          ((C7900 + C7901) * C32593 * C32812 +
           (C7899 + C7898) * C32593 * C7741 + (C7897 + C7896) * C32593 * C7740 +
           (C7895 + C7894) * C32593 * C7739) *
              C32551 * C214 +
          (C7904 * C7739 + C7905 * C7740 + (C7901 + C7900) * C32593 * C7741 +
           (C31623 * C6284 - C7744 * C6282 - C31623 * C6285 + C32785 * C6288 +
            C31604 * C6487 - C7746 * C6486 - C31604 * C6488 + C32498 * C6489) *
               C32593 * C32812) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
              C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
              C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                 C32805 +
             (C2064 + C2065 + C2066) * C32680) *
                C32804 +
            ((C953 + C954 + C955) * C32805 + (C1652 + C1651 + C1650) * C32680) *
                C32640) *
               C32551 * C444 -
           (((C1647 + C1648 + C1649) * C32680 + (C958 + C957 + C956) * C32805) *
                C32640 +
            ((C1650 + C1651 + C1652) * C32680 + (C955 + C954 + C953) * C32805) *
                C32804) *
               C32551 * C445) *
              C446 +
          ((((C1297 + C1298 + C1299) * C32805 +
             (C4826 + C4827 + C4828) * C32680) *
                C32804 +
            ((C1300 + C1301 + C1302) * C32805 +
             (C758 * C1085 - C759 * C1075 - C758 * C1086 + C752 * C1102 +
              C760 * C1083 - C761 * C1074 - C760 * C1084 + C753 * C1101 +
              C762 * C1449 - C763 * C1448 - C762 * C1450 + C32826 * C1451) *
                 C32680) *
                C32640) *
               C32551 * C445 -
           (((C4828 + C4827 + C4826) * C32680 +
             (C1299 + C1298 + C1297) * C32805) *
                C32640 +
            ((C2413 + C2412 + C2411) * C32680 +
             (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
              C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
              C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
                 C32805) *
                C32804) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C32805 +
             C7131 * C32680) *
                C7739 +
            (C9799 + C9800) * C7740 + C9807 * C7741 + C9808 * C32812) *
               C32551 * C444 -
           ((C9805 + C9806) * C32812 + (C9804 + C9803) * C7741 +
            (C9802 + C9801) * C7740 + (C9800 + C9799) * C7739) *
               C32551 * C445) *
              C446 +
          (((C10037 + C10038) * C7739 + (C10039 + C10040) * C7740 +
            (C10041 + C10049) * C7741 +
            (C6518 * C32805 +
             (C6218 * C6605 - C6219 * C6604 - C6218 * C6606 + C32488 * C6607) *
                 C32680) *
                C32812) *
               C32551 * C445 -
           ((C10049 + C10041) * C32812 + (C10040 + C10039) * C7741 +
            (C10038 + C10037) * C7740 +
            (C7482 * C32680 +
             (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                 C32805) *
                C7739) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
              C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
              C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                 C32805 +
             (C2064 + C2065 + C2066) * C32680) *
                C32804 +
            ((C953 + C954 + C955) * C32805 + C5219 * C32680) * C32640) *
               C534 -
           (((C2595 + C2594 + C2593) * C32680 + C5220 * C32805) * C32640 +
            ((C2069 + C2068 + C2067) * C32680 +
             (C2066 + C2065 + C2064) * C32805) *
                C32804) *
               C535) *
              C444 +
          (((C5219 * C32805 + (C2593 + C2594 + C2595) * C32680) * C32804 +
            ((C1649 + C1648 + C1647) * C32805 +
             (C758 * C1095 - C759 * C1080 - C758 * C1096 + C752 * C1107 +
              C760 * C1097 - C761 * C1081 - C760 * C1098 + C753 * C1108 +
              C762 * C1099 - C763 * C1082 - C762 * C1100 + C32826 * C1109) *
                 C32680) *
                C32640) *
               C535 -
           (((C1647 + C1648 + C1649) * C32680 + (C958 + C957 + C956) * C32805) *
                C32640 +
            (C5220 * C32680 + (C955 + C954 + C953) * C32805) * C32804) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C32805 +
             C7131 * C32680) *
                C7739 +
            (C9799 + C9800) * C7740 + C9807 * C7741 + C9808 * C32812) *
               C534 -
           ((C10310 + C10311) * C32812 + (C10312 + C10313) * C7741 +
            (C10314 + C10315) * C7740 +
            (C7132 * C32680 + C7131 * C32805) * C7739) *
               C535) *
              C444 +
          (((C10315 + C10314) * C7739 + (C10313 + C10312) * C7740 +
            (C10311 + C10310) * C7741 +
            (C6719 * C32805 +
             (C6218 * C6399 - C6219 * C6394 - C6218 * C6400 + C32488 * C6403) *
                 C32680) *
                C32812) *
               C535 -
           ((C9805 + C9806) * C32812 + (C9804 + C9803) * C7741 +
            (C9802 + C9801) * C7740 + (C9800 + C9799) * C7739) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
             C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
             C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                C32805 +
            (C2064 + C2065 + C2066) * C32680) *
               C32804 +
           ((C953 + C954 + C955) * C32805 + (C1652 + C1651 + C1650) * C32680) *
               C32640) *
              C32551 * C213 -
          (((C1647 + C1648 + C1649) * C32680 + (C958 + C957 + C956) * C32805) *
               C32640 +
           ((C1650 + C1651 + C1652) * C32680 + (C955 + C954 + C953) * C32805) *
               C32804) *
              C32551 * C214 +
          ((C963 * C32805 + (C1649 + C1648 + C1647) * C32680) * C32804 +
           ((C961 + C960 + C959) * C32805 +
            (C758 * C1601 - C759 * C1598 - C758 * C1602 + C752 * C1607 +
             C760 * C1603 - C761 * C1599 - C760 * C1604 + C753 * C1608 +
             C762 * C1605 - C763 * C1600 - C762 * C1606 + C32826 * C1609) *
                C32680) *
               C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
             C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
             C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                C32805 +
            (C2064 + C2065 + C2066) * C32680) *
               C32804 +
           ((C953 + C954 + C955) * C32805 + (C1652 + C1651 + C1650) * C32680) *
               C32640) *
              C32551 * C32537 * C110 -
          (((C762 * C633 - C763 * C625 - C762 * C634 + C32826 * C640 +
             C760 * C631 - C761 * C624 - C760 * C632 + C753 * C639 +
             C758 * C629 - C759 * C623 - C758 * C630 + C752 * C638) *
                C32680 +
            (C1299 + C1298 + C1297) * C32805) *
               C32640 +
           ((C2413 + C2412 + C2411) * C32680 +
            (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
             C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
             C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
                C32805) *
               C32804) *
              C32551 * C32537 * C111 +
          (((C758 * C134 - C759 * C125 - C758 * C135 + C752 * C146 +
             C760 * C136 - C761 * C126 - C760 * C137 + C753 * C147 +
             C762 * C138 - C763 * C127 - C762 * C139 + C32826 * C148) *
                C32805 +
            (C758 * C336 - C759 * C324 - C758 * C337 + C752 * C354 +
             C760 * C334 - C761 * C323 - C760 * C335 + C753 * C353 +
             C762 * C332 - C763 * C322 - C762 * C333 + C32826 * C352) *
                C32680) *
               C32804 +
           ((C758 * C231 - C759 * C219 - C758 * C232 + C752 * C249 +
             C760 * C229 - C761 * C218 - C760 * C230 + C753 * C248 +
             C762 * C227 - C763 * C217 - C762 * C228 + C32826 * C247) *
                C32805 +
            (C758 * C631 - C759 * C624 - C758 * C632 + C752 * C639 +
             C760 * C633 - C761 * C625 - C760 * C634 + C753 * C640 +
             C762 * C635 - C763 * C626 - C762 * C636 + C32826 * C641) *
                C32680) *
               C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
             C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
             C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                C32805 +
            (C2064 + C2065 + C2066) * C32680) *
               C32804 +
           ((C953 + C954 + C955) * C32805 + (C1652 + C1651 + C1650) * C32680) *
               C32640) *
              C319 -
          (((C2595 + C2594 + C2593) * C32680 +
            (C1650 + C1651 + C1652) * C32805) *
               C32640 +
           ((C2069 + C2068 + C2067) * C32680 +
            (C2066 + C2065 + C2064) * C32805) *
               C32804) *
              C320 +
          ((C2074 * C32805 + (C2072 + C2071 + C2070) * C32680) * C32804 +
           ((C2593 + C2594 + C2595) * C32805 +
            (C758 * C2565 - C759 * C2562 - C758 * C2566 + C752 * C2571 +
             C760 * C2567 - C761 * C2563 - C760 * C2568 + C753 * C2572 +
             C762 * C2569 - C763 * C2564 - C762 * C2570 + C32826 * C2573) *
                C32680) *
               C32640) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32805 +
            C7131 * C32680) *
               C7739 +
           (C6321 * C32805 + C6722 * C32680) * C7740 +
           (C6322 * C32805 + C6721 * C32680) * C7741 +
           (C6323 * C32805 + C6720 * C32680) * C32812) *
              C32551 * C32537 * C110 -
          (((C6218 * C1603 - C6219 * C1599 - C6218 * C1604 + C32488 * C1608) *
                C32680 +
            C6517 * C32805) *
               C32812 +
           (C7314 * C32680 + C6516 * C32805) * C7741 +
           (C7312 * C32680 + C6515 * C32805) * C7740 +
           (C7482 * C32680 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C32805) *
               C7739) *
              C32551 * C32537 * C111 +
          (((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
                C32805 +
            (C6218 * C336 - C6219 * C324 - C6218 * C337 + C32488 * C354) *
                C32680) *
               C7739 +
           ((C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
                C32805 +
            (C6218 * C631 - C6219 * C624 - C6218 * C632 + C32488 * C639) *
                C32680) *
               C7740 +
           ((C6218 * C241 - C6219 * C224 - C6218 * C242 + C32488 * C254) *
                C32805 +
            (C6218 * C1083 - C6219 * C1074 - C6218 * C1084 + C32488 * C1101) *
                C32680) *
               C7741 +
           ((C6218 * C880 - C6219 * C874 - C6218 * C881 + C32488 * C892) *
                C32805 +
            (C6218 * C1605 - C6219 * C1600 - C6218 * C1606 + C32488 * C1609) *
                C32680) *
               C32812) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32805 +
            C7131 * C32680) *
               C7739 +
           (C9799 + C9800) * C7740 + C9807 * C7741 + C9808 * C32812) *
              C32551 * C213 -
          ((C9805 + C9806) * C32812 + (C9804 + C9803) * C7741 +
           (C9802 + C9801) * C7740 + (C9800 + C9799) * C7739) *
              C32551 * C214 +
          (C9807 * C7739 + C9808 * C7740 + (C9806 + C9805) * C7741 +
           (C6325 * C32805 +
            (C6218 * C6691 - C6219 * C6690 - C6218 * C6692 + C32488 * C6693) *
                C32680) *
               C32812) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32805 +
            C7131 * C32680) *
               C7739 +
           (C9799 + C9800) * C7740 + C9807 * C7741 + C9808 * C32812) *
              C319 -
          ((C6974 * C32680 + C6720 * C32805) * C32812 +
           (C6973 * C32680 + C6721 * C32805) * C7741 +
           (C6972 * C32680 + C6722 * C32805) * C7740 +
           (C7132 * C32680 + C7131 * C32805) * C7739) *
              C320 +
          ((C7132 * C32805 + C7135 * C32680) * C7739 +
           (C6972 * C32805 + C7134 * C32680) * C7740 +
           (C6973 * C32805 + C7133 * C32680) * C7741 +
           (C6974 * C32805 +
            (C6218 * C7630 - C6219 * C7629 - C6218 * C7631 + C32488 * C7632) *
                C32680) *
               C32812) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
              C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
              C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                 C32805 +
             (C2064 + C2065 + C2066) * C32680) *
                C32804 +
            ((C953 + C954 + C955) * C32805 + (C1652 + C1651 + C1650) * C32680) *
                C32640) *
               C534 -
           (((C2595 + C2594 + C2593) * C32680 +
             (C1650 + C1651 + C1652) * C32805) *
                C32640 +
            ((C2069 + C2068 + C2067) * C32680 +
             (C2066 + C2065 + C2064) * C32805) *
                C32804) *
               C535) *
              C32537 * C446 +
          ((((C2411 + C2412 + C2413) * C32805 +
             (C2414 + C2415 + C2416) * C32680) *
                C32804 +
            ((C4826 + C4827 + C4828) * C32805 +
             (C758 * C1091 - C759 * C1078 - C758 * C1092 + C752 * C1105 +
              C760 * C1093 - C761 * C1079 - C760 * C1094 + C753 * C1106 +
              C762 * C2221 - C763 * C2220 - C762 * C2222 + C32826 * C2223) *
                 C32680) *
                C32640) *
               C535 -
           (((C4828 + C4827 + C4826) * C32680 +
             (C1299 + C1298 + C1297) * C32805) *
                C32640 +
            ((C2413 + C2412 + C2411) * C32680 +
             (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
              C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
              C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
                 C32805) *
                C32804) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C32805 +
             C7131 * C32680) *
                C7739 +
            (C9799 + C9800) * C7740 + C9807 * C7741 + C9808 * C32812) *
               C534 -
           ((C6974 * C32680 + C6720 * C32805) * C32812 +
            (C6973 * C32680 + C6721 * C32805) * C7741 +
            (C6972 * C32680 + C6722 * C32805) * C7740 +
            (C7132 * C32680 + C7131 * C32805) * C7739) *
               C535) *
              C32537 * C446 +
          (((C7482 * C32805 + C7483 * C32680) * C7739 +
            (C7312 * C32805 + C7313 * C32680) * C7740 +
            (C7314 * C32805 + C7315 * C32680) * C7741 +
            (C10048 * C32805 +
             (C6218 * C7282 - C6219 * C7281 - C6218 * C7283 + C32488 * C7284) *
                 C32680) *
                C32812) *
               C535 -
           ((C10049 + C10041) * C32812 + (C10040 + C10039) * C7741 +
            (C10038 + C10037) * C7740 +
            (C7482 * C32680 +
             (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                 C32805) *
                C7739) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
             C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
             C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                C32805 +
            (C2064 + C2065 + C2066) * C32680) *
               C32804 +
           ((C953 + C954 + C955) * C32805 + (C1652 + C1651 + C1650) * C32680) *
               C32640) *
              C32551 * C32537 * C110 -
          (((C762 * C633 - C763 * C625 - C762 * C634 + C32826 * C640 +
             C760 * C631 - C761 * C624 - C760 * C632 + C753 * C639 +
             C758 * C629 - C759 * C623 - C758 * C630 + C752 * C638) *
                C32680 +
            (C1299 + C1298 + C1297) * C32805) *
               C32640 +
           ((C2413 + C2412 + C2411) * C32680 +
            (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
             C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
             C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
                C32805) *
               C32804) *
              C32551 * C32537 * C111 +
          (((C758 * C134 - C759 * C125 - C758 * C135 + C752 * C146 +
             C760 * C136 - C761 * C126 - C760 * C137 + C753 * C147 +
             C762 * C138 - C763 * C127 - C762 * C139 + C32826 * C148) *
                C32805 +
            (C758 * C336 - C759 * C324 - C758 * C337 + C752 * C354 +
             C760 * C334 - C761 * C323 - C760 * C335 + C753 * C353 +
             C762 * C332 - C763 * C322 - C762 * C333 + C32826 * C352) *
                C32680) *
               C32804 +
           ((C758 * C231 - C759 * C219 - C758 * C232 + C752 * C249 +
             C760 * C229 - C761 * C218 - C760 * C230 + C753 * C248 +
             C762 * C227 - C763 * C217 - C762 * C228 + C32826 * C247) *
                C32805 +
            (C758 * C631 - C759 * C624 - C758 * C632 + C752 * C639 +
             C760 * C633 - C761 * C625 - C760 * C634 + C753 * C640 +
             C762 * C635 - C763 * C626 - C762 * C636 + C32826 * C641) *
                C32680) *
               C32640) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
             C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
             C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                C32805 +
            (C2064 + C2065 + C2066) * C32680) *
               C32804 +
           ((C953 + C954 + C955) * C32805 + (C1652 + C1651 + C1650) * C32680) *
               C32640) *
              C32551 * C213 -
          (((C1647 + C1648 + C1649) * C32680 + (C958 + C957 + C956) * C32805) *
               C32640 +
           ((C1650 + C1651 + C1652) * C32680 + (C955 + C954 + C953) * C32805) *
               C32804) *
              C32551 * C214 +
          ((C963 * C32805 + (C1649 + C1648 + C1647) * C32680) * C32804 +
           ((C961 + C960 + C959) * C32805 +
            (C758 * C1601 - C759 * C1598 - C758 * C1602 + C752 * C1607 +
             C760 * C1603 - C761 * C1599 - C760 * C1604 + C753 * C1608 +
             C762 * C1605 - C763 * C1600 - C762 * C1606 + C32826 * C1609) *
                C32680) *
               C32640) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32805 +
            C7131 * C32680) *
               C7739 +
           (C6321 * C32805 + C6722 * C32680) * C7740 +
           (C6322 * C32805 + C6721 * C32680) * C7741 +
           (C6323 * C32805 + C6720 * C32680) * C32812) *
              C32551 * C32537 * C110 -
          (((C6218 * C1603 - C6219 * C1599 - C6218 * C1604 + C32488 * C1608) *
                C32680 +
            C6517 * C32805) *
               C32812 +
           (C7314 * C32680 + C6516 * C32805) * C7741 +
           (C7312 * C32680 + C6515 * C32805) * C7740 +
           (C7482 * C32680 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C32805) *
               C7739) *
              C32551 * C32537 * C111 +
          (((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
                C32805 +
            (C6218 * C336 - C6219 * C324 - C6218 * C337 + C32488 * C354) *
                C32680) *
               C7739 +
           ((C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
                C32805 +
            (C6218 * C631 - C6219 * C624 - C6218 * C632 + C32488 * C639) *
                C32680) *
               C7740 +
           ((C6218 * C241 - C6219 * C224 - C6218 * C242 + C32488 * C254) *
                C32805 +
            (C6218 * C1083 - C6219 * C1074 - C6218 * C1084 + C32488 * C1101) *
                C32680) *
               C7741 +
           ((C6218 * C880 - C6219 * C874 - C6218 * C881 + C32488 * C892) *
                C32805 +
            (C6218 * C1605 - C6219 * C1600 - C6218 * C1606 + C32488 * C1609) *
                C32680) *
               C32812) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32805 +
            C7131 * C32680) *
               C7739 +
           (C9799 + C9800) * C7740 + C9807 * C7741 + C9808 * C32812) *
              C32551 * C213 -
          ((C9805 + C9806) * C32812 + (C9804 + C9803) * C7741 +
           (C9802 + C9801) * C7740 + (C9800 + C9799) * C7739) *
              C32551 * C214 +
          (C9807 * C7739 + C9808 * C7740 + (C9806 + C9805) * C7741 +
           (C6325 * C32805 +
            (C6218 * C6691 - C6219 * C6690 - C6218 * C6692 + C32488 * C6693) *
                C32680) *
               C32812) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
             C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
             C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                C32593 * C32867 +
            (C953 + C954 + C955) * C32593 * C32855 + C964 * C32835) *
               C32551 * C444 -
           ((C959 + C960 + C961) * C32593 * C32835 +
            (C958 + C957 + C956) * C32593 * C32855 +
            (C955 + C954 + C953) * C32593 * C32867) *
               C32551 * C445) *
              C446 +
          (((C1297 + C1298 + C1299) * C32593 * C32867 +
            (C1300 + C1301 + C1302) * C32593 * C32855 +
            (C758 * C882 - C759 * C875 - C758 * C883 + C752 * C893 +
             C760 * C880 - C761 * C874 - C760 * C881 + C753 * C892 +
             C762 * C1257 - C763 * C1256 - C762 * C1258 + C32826 * C1259) *
                C32593 * C32835) *
               C32551 * C445 -
           ((C1302 + C1301 + C1300) * C32593 * C32835 +
            (C1299 + C1298 + C1297) * C32593 * C32855 +
            (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
             C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
             C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
                C32593 * C32867) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
            C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
            C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
            C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
            C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
               C32593 * C32581 * C32551 * C444 -
           (C121 * C227 - C122 * C217 - C121 * C228 + C105 * C247 +
            C119 * C229 - C120 * C218 - C119 * C230 + C104 * C248 +
            C117 * C231 - C118 * C219 - C117 * C232 + C103 * C249 +
            C115 * C233 - C116 * C220 - C115 * C234 + C102 * C250 +
            C113 * C235 - C114 * C221 - C113 * C236 + C101 * C251) *
               C32593 * C32581 * C32551 * C445) *
              C446 +
          ((C113 * C233 - C114 * C220 - C113 * C234 + C101 * C250 +
            C115 * C231 - C116 * C219 - C115 * C232 + C102 * C249 +
            C117 * C229 - C118 * C218 - C117 * C230 + C103 * C248 +
            C119 * C227 - C120 * C217 - C119 * C228 + C104 * C247 +
            C121 * C449 - C122 * C448 - C121 * C450 + C105 * C451) *
               C32593 * C32581 * C32551 * C445 -
           (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
            C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
            C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
            C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
            C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
               C32593 * C32581 * C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
             C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
             C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                C32868 +
            (C2064 + C2065 + C2066) * C32857 + C2074 * C32838) *
               C32581 * C32551 * C444 -
           ((C762 * C1093 - C763 * C1079 - C762 * C1094 + C32826 * C1106 +
             C760 * C1091 - C761 * C1078 - C760 * C1092 + C753 * C1105 +
             C758 * C1089 - C759 * C1077 - C758 * C1090 + C752 * C1104) *
                C32838 +
            (C1650 + C1651 + C1652) * C32857 + (C955 + C954 + C953) * C32868) *
               C32581 * C32551 * C445) *
              C446 +
          (((C1297 + C1298 + C1299) * C32868 +
            (C758 * C629 - C759 * C623 - C758 * C630 + C752 * C638 +
             C760 * C631 - C761 * C624 - C760 * C632 + C753 * C639 +
             C762 * C633 - C763 * C625 - C762 * C634 + C32826 * C640) *
                C32857 +
            (C758 * C1091 - C759 * C1078 - C758 * C1092 + C752 * C1105 +
             C760 * C1093 - C761 * C1079 - C760 * C1094 + C753 * C1106 +
             C762 * C2221 - C763 * C2220 - C762 * C2222 + C32826 * C2223) *
                C32838) *
               C32581 * C32551 * C445 -
           ((C762 * C348 - C763 * C330 - C762 * C349 + C32826 * C360 +
             C760 * C346 - C761 * C329 - C760 * C347 + C753 * C359 +
             C758 * C344 - C759 * C328 - C758 * C345 + C752 * C358) *
                C32838 +
            (C762 * C334 - C763 * C323 - C762 * C335 + C32826 * C353 +
             C760 * C336 - C761 * C324 - C760 * C337 + C753 * C354 +
             C758 * C338 - C759 * C325 - C758 * C339 + C752 * C355) *
                C32857 +
            (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
             C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
             C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
                C32868) *
               C32581 * C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
             C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
             C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                C32593 * C5333 +
            (C5507 + C5508 + C5509) * C32593 * C5334 + C5518 * C32835) *
               C32551 * C444 -
           ((C5513 + C5514 + C5515) * C32593 * C32835 +
            (C5512 + C5511 + C5510) * C32593 * C5334 +
            (C5509 + C5508 + C5507) * C32593 * C5333) *
               C32551 * C445) *
              C446 +
          (((C5811 + C5812 + C5813) * C32593 * C5333 +
            (C5814 + C5815 + C5816) * C32593 * C5334 +
            (C5336 * C882 - C5337 * C875 - C5336 * C883 + C32864 * C893 +
             C5338 * C880 - C5339 * C874 - C5338 * C881 + C32851 * C892 +
             C5340 * C1257 - C5341 * C1256 - C5340 * C1258 + C32826 * C1259) *
                C32593 * C32835) *
               C32551 * C445 -
           ((C5816 + C5815 + C5814) * C32593 * C32835 +
            (C5813 + C5812 + C5811) * C32593 * C5334 +
            (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
             C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
             C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
                C32593 * C5333) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32593 * C6213 +
            C6326 * C6214 + C6327 * C6215 + C6328 * C6216 + C6329 * C6217) *
               C32551 * C444 -
           (C6330 * C6217 + C6329 * C6216 + C6328 * C6215 + C6327 * C6214 +
            C6326 * C6213) *
               C32551 * C445) *
              C446 +
          ((C6519 * C6213 + C6520 * C6214 + C6521 * C6215 + C6522 * C6216 +
            (C6218 * C6487 - C6219 * C6486 - C6218 * C6488 + C32488 * C6489) *
                C32593 * C6217) *
               C32551 * C445 -
           (C6522 * C6217 + C6521 * C6216 + C6520 * C6215 + C6519 * C6214 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C32593 * C6213) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C32868 +
             C7131 * C32857 + C7132 * C32838) *
                C5333 +
            (C6947 + C6948 + C6975) * C5334 + C6978 * C32835) *
               C32551 * C444 -
           ((C6977 + C6963 + C6964) * C32835 + (C6976 + C6954 + C6953) * C5334 +
            (C6975 + C6948 + C6947) * C5333) *
               C32551 * C445) *
              C446 +
          (((C7286 + C7316 + C7317) * C5333 + (C7295 + C7318 + C7319) * C5334 +
            (C6517 * C32868 +
             (C6218 * C1603 - C6219 * C1599 - C6218 * C1604 + C32488 * C1608) *
                 C32857 +
             (C6218 * C7282 - C6219 * C7281 - C6218 * C7283 + C32488 * C7284) *
                 C32838) *
                C32835) *
               C32551 * C445 -
           ((C7319 + C7318 + C7295) * C32835 + (C7317 + C7316 + C7286) * C5334 +
            ((C6218 * C344 - C6219 * C328 - C6218 * C345 + C32488 * C358) *
                 C32838 +
             (C6218 * C338 - C6219 * C325 - C6218 * C339 + C32488 * C355) *
                 C32857 +
             (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                 C32868) *
                C5333) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
             C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
             C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                C32593 * C32867 +
            (C953 + C954 + C955) * C32593 * C32855 + C964 * C32835) *
               C534 -
           ((C1647 + C1648 + C1649) * C32593 * C32835 +
            (C1650 + C1651 + C1652) * C32593 * C32855 +
            (C762 * C336 - C763 * C324 - C762 * C337 + C32826 * C354 +
             C760 * C338 - C761 * C325 - C760 * C339 + C753 * C355 +
             C758 * C340 - C759 * C326 - C758 * C341 + C752 * C356) *
                C32593 * C32867) *
               C535) *
              C444 +
          (((C1652 + C1651 + C1650) * C32593 * C32867 +
            (C1649 + C1648 + C1647) * C32593 * C32855 +
            (C758 * C1601 - C759 * C1598 - C758 * C1602 + C752 * C1607 +
             C760 * C1603 - C761 * C1599 - C760 * C1604 + C753 * C1608 +
             C762 * C1605 - C763 * C1600 - C762 * C1606 + C32826 * C1609) *
                C32593 * C32835) *
               C535 -
           ((C959 + C960 + C961) * C32593 * C32835 +
            (C958 + C957 + C956) * C32593 * C32855 +
            (C955 + C954 + C953) * C32593 * C32867) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
            C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
            C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
            C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
            C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
               C32593 * C32581 * C534 -
           (C121 * C332 - C122 * C322 - C121 * C333 + C105 * C352 +
            C119 * C334 - C120 * C323 - C119 * C335 + C104 * C353 +
            C117 * C336 - C118 * C324 - C117 * C337 + C103 * C354 +
            C115 * C338 - C116 * C325 - C115 * C339 + C102 * C355 +
            C113 * C340 - C114 * C326 - C113 * C341 + C101 * C356) *
               C32593 * C32581 * C535) *
              C444 +
          ((C113 * C627 - C114 * C622 - C113 * C628 + C101 * C637 +
            C115 * C629 - C116 * C623 - C115 * C630 + C102 * C638 +
            C117 * C631 - C118 * C624 - C117 * C632 + C103 * C639 +
            C119 * C633 - C120 * C625 - C119 * C634 + C104 * C640 +
            C121 * C635 - C122 * C626 - C121 * C636 + C105 * C641) *
               C32593 * C32581 * C535 -
           (C121 * C227 - C122 * C217 - C121 * C228 + C105 * C247 +
            C119 * C229 - C120 * C218 - C119 * C230 + C104 * C248 +
            C117 * C231 - C118 * C219 - C117 * C232 + C103 * C249 +
            C115 * C233 - C116 * C220 - C115 * C234 + C102 * C250 +
            C113 * C235 - C114 * C221 - C113 * C236 + C101 * C251) *
               C32593 * C32581 * C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
             C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
             C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                C32868 +
            (C2064 + C2065 + C2066) * C32857 + C2074 * C32838) *
               C32581 * C534 -
           ((C2070 + C2071 + C2072) * C32838 +
            (C2069 + C2068 + C2067) * C32857 +
            (C2066 + C2065 + C2064) * C32868) *
               C32581 * C535) *
              C444 +
          (((C1652 + C1651 + C1650) * C32868 +
            (C2593 + C2594 + C2595) * C32857 +
            (C758 * C2565 - C759 * C2562 - C758 * C2566 + C752 * C2571 +
             C760 * C2567 - C761 * C2563 - C760 * C2568 + C753 * C2572 +
             C762 * C2569 - C763 * C2564 - C762 * C2570 + C32826 * C2573) *
                C32838) *
               C32581 * C535 -
           ((C2595 + C2594 + C2593) * C32838 +
            (C1650 + C1651 + C1652) * C32857 + (C955 + C954 + C953) * C32868) *
               C32581 * C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
             C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
             C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                C32593 * C5333 +
            (C5507 + C5508 + C5509) * C32593 * C5334 + C5518 * C32835) *
               C534 -
           ((C6145 + C6146 + C6147) * C32593 * C32835 +
            (C6148 + C6149 + C6150) * C32593 * C5334 +
            (C5340 * C336 - C5341 * C324 - C5340 * C337 + C32826 * C354 +
             C5338 * C338 - C5339 * C325 - C5338 * C339 + C32851 * C355 +
             C5336 * C340 - C5337 * C326 - C5336 * C341 + C32864 * C356) *
                C32593 * C5333) *
               C535) *
              C444 +
          (((C6150 + C6149 + C6148) * C32593 * C5333 +
            (C6147 + C6146 + C6145) * C32593 * C5334 +
            (C5336 * C1601 - C5337 * C1598 - C5336 * C1602 + C32864 * C1607 +
             C5338 * C1603 - C5339 * C1599 - C5338 * C1604 + C32851 * C1608 +
             C5340 * C1605 - C5341 * C1600 - C5340 * C1606 + C32826 * C1609) *
                C32593 * C32835) *
               C535 -
           ((C5513 + C5514 + C5515) * C32593 * C32835 +
            (C5512 + C5511 + C5510) * C32593 * C5334 +
            (C5509 + C5508 + C5507) * C32593 * C5333) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32593 * C6213 +
            C6326 * C6214 + C6327 * C6215 + C6328 * C6216 + C6329 * C6217) *
               C534 -
           (C6723 * C6217 + C6724 * C6216 + C6725 * C6215 + C6726 * C6214 +
            (C6218 * C340 - C6219 * C326 - C6218 * C341 + C32488 * C356) *
                C32593 * C6213) *
               C535) *
              C444 +
          ((C6726 * C6213 + C6725 * C6214 + C6724 * C6215 + C6723 * C6216 +
            (C6218 * C6691 - C6219 * C6690 - C6218 * C6692 + C32488 * C6693) *
                C32593 * C6217) *
               C535 -
           (C6330 * C6217 + C6329 * C6216 + C6328 * C6215 + C6327 * C6214 +
            C6326 * C6213) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C32868 +
             C7131 * C32857 + C7132 * C32838) *
                C5333 +
            (C6947 + C6948 + C6975) * C5334 + C6978 * C32835) *
               C534 -
           ((C7634 + C7635 + C7636) * C32835 + (C7637 + C7638 + C7639) * C5334 +
            (C7135 * C32838 + C7132 * C32857 + C7131 * C32868) * C5333) *
               C535) *
              C444 +
          (((C7639 + C7638 + C7637) * C5333 + (C7636 + C7635 + C7634) * C5334 +
            (C6720 * C32868 + C6974 * C32857 +
             (C6218 * C7630 - C6219 * C7629 - C6218 * C7631 + C32488 * C7632) *
                 C32838) *
                C32835) *
               C535 -
           ((C6977 + C6963 + C6964) * C32835 + (C6976 + C6954 + C6953) * C5334 +
            (C6975 + C6948 + C6947) * C5333) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
               C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
               C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
               C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
               C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
                  C32593 * C32581 * C32551 * C32537 * C110 -
              (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
               C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
               C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
               C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
               C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
                  C32593 * C32581 * C32551 * C32537 * C111 +
              (C113 * C134 - C114 * C125 - C113 * C135 + C101 * C146 +
               C115 * C136 - C116 * C126 - C115 * C137 + C102 * C147 +
               C117 * C138 - C118 * C127 - C117 * C139 + C103 * C148 +
               C119 * C140 - C120 * C128 - C119 * C141 + C104 * C149 +
               C121 * C142 - C122 * C129 - C121 * C143 + C105 * C150) *
                  C32593 * C32581 * C32551 * C32537 * C112) +
         std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
               C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
               C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
               C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
               C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
                  C32593 * C32581 * C32551 * C213 -
              (C121 * C227 - C122 * C217 - C121 * C228 + C105 * C247 +
               C119 * C229 - C120 * C218 - C119 * C230 + C104 * C248 +
               C117 * C231 - C118 * C219 - C117 * C232 + C103 * C249 +
               C115 * C233 - C116 * C220 - C115 * C234 + C102 * C250 +
               C113 * C235 - C114 * C221 - C113 * C236 + C101 * C251) *
                  C32593 * C32581 * C32551 * C214 +
              (C113 * C237 - C114 * C222 - C113 * C238 + C101 * C252 +
               C115 * C239 - C116 * C223 - C115 * C240 + C102 * C253 +
               C117 * C241 - C118 * C224 - C117 * C242 + C103 * C254 +
               C119 * C243 - C120 * C225 - C119 * C244 + C104 * C255 +
               C121 * C245 - C122 * C226 - C121 * C246 + C105 * C256) *
                  C32593 * C32581 * C32551 * C215) *
             C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 + C115 * C132 -
           C116 * C124 - C115 * C133 + C102 * C145 + C117 * C134 - C118 * C125 -
           C117 * C135 + C103 * C146 + C119 * C136 - C120 * C126 - C119 * C137 +
           C104 * C147 + C121 * C138 - C122 * C127 - C121 * C139 +
           C105 * C148) *
              C32593 * C32581 * C319 -
          (C121 * C332 - C122 * C322 - C121 * C333 + C105 * C352 + C119 * C334 -
           C120 * C323 - C119 * C335 + C104 * C353 + C117 * C336 - C118 * C324 -
           C117 * C337 + C103 * C354 + C115 * C338 - C116 * C325 - C115 * C339 +
           C102 * C355 + C113 * C340 - C114 * C326 - C113 * C341 +
           C101 * C356) *
              C32593 * C32581 * C320 +
          (C113 * C342 - C114 * C327 - C113 * C343 + C101 * C357 + C115 * C344 -
           C116 * C328 - C115 * C345 + C102 * C358 + C117 * C346 - C118 * C329 -
           C117 * C347 + C103 * C359 + C119 * C348 - C120 * C330 - C119 * C349 +
           C104 * C360 + C121 * C350 - C122 * C331 - C121 * C351 +
           C105 * C361) *
              C32593 * C32581 * C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
            C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
            C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
               C32593 * C32867 +
           (C758 * C235 - C759 * C221 - C758 * C236 + C752 * C251 +
            C760 * C233 - C761 * C220 - C760 * C234 + C753 * C250 +
            C762 * C231 - C763 * C219 - C762 * C232 + C32826 * C249) *
               C32593 * C32855 +
           (C758 * C237 - C759 * C222 - C758 * C238 + C752 * C252 +
            C760 * C239 - C761 * C223 - C760 * C240 + C753 * C253 +
            C762 * C241 - C763 * C224 - C762 * C242 + C32826 * C254) *
               C32593 * C32835) *
              C32551 * C32537 * C110 -
          ((C762 * C243 - C763 * C225 - C762 * C244 + C32826 * C255 +
            C760 * C241 - C761 * C224 - C760 * C242 + C753 * C254 +
            C758 * C239 - C759 * C223 - C758 * C240 + C752 * C253) *
               C32593 * C32835 +
           (C762 * C229 - C763 * C218 - C762 * C230 + C32826 * C248 +
            C760 * C231 - C761 * C219 - C760 * C232 + C753 * C249 +
            C758 * C233 - C759 * C220 - C758 * C234 + C752 * C250) *
               C32593 * C32855 +
           (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
            C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
            C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
               C32593 * C32867) *
              C32551 * C32537 * C111 +
          ((C758 * C134 - C759 * C125 - C758 * C135 + C752 * C146 +
            C760 * C136 - C761 * C126 - C760 * C137 + C753 * C147 +
            C762 * C138 - C763 * C127 - C762 * C139 + C32826 * C148) *
               C32593 * C32867 +
           (C758 * C231 - C759 * C219 - C758 * C232 + C752 * C249 +
            C760 * C229 - C761 * C218 - C760 * C230 + C753 * C248 +
            C762 * C227 - C763 * C217 - C762 * C228 + C32826 * C247) *
               C32593 * C32855 +
           (C758 * C241 - C759 * C224 - C758 * C242 + C752 * C254 +
            C760 * C243 - C761 * C225 - C760 * C244 + C753 * C255 +
            C762 * C245 - C763 * C226 - C762 * C246 + C32826 * C256) *
               C32593 * C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
            C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
            C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
               C32593 * C32867 +
           (C953 + C954 + C955) * C32593 * C32855 + C964 * C32835) *
              C32551 * C213 -
          ((C959 + C960 + C961) * C32593 * C32835 +
           (C958 + C957 + C956) * C32593 * C32855 +
           (C955 + C954 + C953) * C32593 * C32867) *
              C32551 * C214 +
          (C964 * C32867 + (C961 + C960 + C959) * C32593 * C32855 +
           (C758 * C886 - C759 * C877 - C758 * C887 + C752 * C895 +
            C760 * C888 - C761 * C878 - C760 * C889 + C753 * C896 +
            C762 * C890 - C763 * C879 - C762 * C891 + C32826 * C897) *
               C32593 * C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
            C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
            C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
               C32593 * C32867 +
           (C953 + C954 + C955) * C32593 * C32855 + C964 * C32835) *
              C319 -
          ((C762 * C1083 - C763 * C1074 - C762 * C1084 + C32826 * C1101 +
            C760 * C1085 - C761 * C1075 - C760 * C1086 + C753 * C1102 +
            C758 * C1087 - C759 * C1076 - C758 * C1088 + C752 * C1103) *
               C32593 * C32835 +
           (C762 * C631 - C763 * C624 - C762 * C632 + C32826 * C639 +
            C760 * C629 - C761 * C623 - C760 * C630 + C753 * C638 +
            C758 * C627 - C759 * C622 - C758 * C628 + C752 * C637) *
               C32593 * C32855 +
           (C762 * C336 - C763 * C324 - C762 * C337 + C32826 * C354 +
            C760 * C338 - C761 * C325 - C760 * C339 + C753 * C355 +
            C758 * C340 - C759 * C326 - C758 * C341 + C752 * C356) *
               C32593 * C32867) *
              C320 +
          ((C758 * C342 - C759 * C327 - C758 * C343 + C752 * C357 +
            C760 * C344 - C761 * C328 - C760 * C345 + C753 * C358 +
            C762 * C346 - C763 * C329 - C762 * C347 + C32826 * C359) *
               C32593 * C32867 +
           (C758 * C1089 - C759 * C1077 - C758 * C1090 + C752 * C1104 +
            C760 * C1091 - C761 * C1078 - C760 * C1092 + C753 * C1105 +
            C762 * C1093 - C763 * C1079 - C762 * C1094 + C32826 * C1106) *
               C32593 * C32855 +
           (C758 * C1095 - C759 * C1080 - C758 * C1096 + C752 * C1107 +
            C760 * C1097 - C761 * C1081 - C760 * C1098 + C753 * C1108 +
            C762 * C1099 - C763 * C1082 - C762 * C1100 + C32826 * C1109) *
               C32593 * C32835) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
            C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
            C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
               C32868 +
           (C758 * C340 - C759 * C326 - C758 * C341 + C752 * C356 +
            C760 * C338 - C761 * C325 - C760 * C339 + C753 * C355 +
            C762 * C336 - C763 * C324 - C762 * C337 + C32826 * C354) *
               C32857 +
           (C758 * C342 - C759 * C327 - C758 * C343 + C752 * C357 +
            C760 * C344 - C761 * C328 - C760 * C345 + C753 * C358 +
            C762 * C346 - C763 * C329 - C762 * C347 + C32826 * C359) *
               C32838) *
              C32581 * C32551 * C32537 * C110 -
          ((C762 * C348 - C763 * C330 - C762 * C349 + C32826 * C360 +
            C760 * C346 - C761 * C329 - C760 * C347 + C753 * C359 +
            C758 * C344 - C759 * C328 - C758 * C345 + C752 * C358) *
               C32838 +
           (C762 * C334 - C763 * C323 - C762 * C335 + C32826 * C353 +
            C760 * C336 - C761 * C324 - C760 * C337 + C753 * C354 +
            C758 * C338 - C759 * C325 - C758 * C339 + C752 * C355) *
               C32857 +
           (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
            C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
            C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
               C32868) *
              C32581 * C32551 * C32537 * C111 +
          ((C758 * C134 - C759 * C125 - C758 * C135 + C752 * C146 +
            C760 * C136 - C761 * C126 - C760 * C137 + C753 * C147 +
            C762 * C138 - C763 * C127 - C762 * C139 + C32826 * C148) *
               C32868 +
           (C758 * C336 - C759 * C324 - C758 * C337 + C752 * C354 +
            C760 * C334 - C761 * C323 - C760 * C335 + C753 * C353 +
            C762 * C332 - C763 * C322 - C762 * C333 + C32826 * C352) *
               C32857 +
           (C758 * C346 - C759 * C329 - C758 * C347 + C752 * C359 +
            C760 * C348 - C761 * C330 - C760 * C349 + C753 * C360 +
            C762 * C350 - C763 * C331 - C762 * C351 + C32826 * C361) *
               C32838) *
              C32581 * C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
            C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
            C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
               C32868 +
           (C758 * C340 - C759 * C326 - C758 * C341 + C752 * C356 +
            C760 * C338 - C761 * C325 - C760 * C339 + C753 * C355 +
            C762 * C336 - C763 * C324 - C762 * C337 + C32826 * C354) *
               C32857 +
           (C758 * C342 - C759 * C327 - C758 * C343 + C752 * C357 +
            C760 * C344 - C761 * C328 - C760 * C345 + C753 * C358 +
            C762 * C346 - C763 * C329 - C762 * C347 + C32826 * C359) *
               C32838) *
              C32581 * C32551 * C213 -
          ((C762 * C1093 - C763 * C1079 - C762 * C1094 + C32826 * C1106 +
            C760 * C1091 - C761 * C1078 - C760 * C1092 + C753 * C1105 +
            C758 * C1089 - C759 * C1077 - C758 * C1090 + C752 * C1104) *
               C32838 +
           (C1650 + C1651 + C1652) * C32857 + (C955 + C954 + C953) * C32868) *
              C32581 * C32551 * C214 +
          (C963 * C32868 + (C1649 + C1648 + C1647) * C32857 +
           (C758 * C1095 - C759 * C1080 - C758 * C1096 + C752 * C1107 +
            C760 * C1097 - C761 * C1081 - C760 * C1098 + C753 * C1108 +
            C762 * C1099 - C763 * C1082 - C762 * C1100 + C32826 * C1109) *
               C32838) *
              C32581 * C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
            C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
            C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
               C32868 +
           (C2064 + C2065 + C2066) * C32857 + C2074 * C32838) *
              C32581 * C319 -
          ((C2070 + C2071 + C2072) * C32838 + (C2069 + C2068 + C2067) * C32857 +
           (C2066 + C2065 + C2064) * C32868) *
              C32581 * C320 +
          (C2074 * C32868 + (C2072 + C2071 + C2070) * C32857 +
           (C758 * C1997 - C759 * C1988 - C758 * C1998 + C752 * C2006 +
            C760 * C1999 - C761 * C1989 - C760 * C2000 + C753 * C2007 +
            C762 * C2001 - C763 * C1990 - C762 * C2002 + C32826 * C2008) *
               C32838) *
              C32581 * C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C32593 * C5333 +
           (C5336 * C235 - C5337 * C221 - C5336 * C236 + C32864 * C251 +
            C5338 * C233 - C5339 * C220 - C5338 * C234 + C32851 * C250 +
            C5340 * C231 - C5341 * C219 - C5340 * C232 + C32826 * C249) *
               C32593 * C5334 +
           (C5336 * C237 - C5337 * C222 - C5336 * C238 + C32864 * C252 +
            C5338 * C239 - C5339 * C223 - C5338 * C240 + C32851 * C253 +
            C5340 * C241 - C5341 * C224 - C5340 * C242 + C32826 * C254) *
               C32593 * C32835) *
              C32551 * C32537 * C110 -
          ((C5340 * C243 - C5341 * C225 - C5340 * C244 + C32826 * C255 +
            C5338 * C241 - C5339 * C224 - C5338 * C242 + C32851 * C254 +
            C5336 * C239 - C5337 * C223 - C5336 * C240 + C32864 * C253) *
               C32593 * C32835 +
           (C5340 * C229 - C5341 * C218 - C5340 * C230 + C32826 * C248 +
            C5338 * C231 - C5339 * C219 - C5338 * C232 + C32851 * C249 +
            C5336 * C233 - C5337 * C220 - C5336 * C234 + C32864 * C250) *
               C32593 * C5334 +
           (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
            C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
            C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
               C32593 * C5333) *
              C32551 * C32537 * C111 +
          ((C5336 * C134 - C5337 * C125 - C5336 * C135 + C32864 * C146 +
            C5338 * C136 - C5339 * C126 - C5338 * C137 + C32851 * C147 +
            C5340 * C138 - C5341 * C127 - C5340 * C139 + C32826 * C148) *
               C32593 * C5333 +
           (C5336 * C231 - C5337 * C219 - C5336 * C232 + C32864 * C249 +
            C5338 * C229 - C5339 * C218 - C5338 * C230 + C32851 * C248 +
            C5340 * C227 - C5341 * C217 - C5340 * C228 + C32826 * C247) *
               C32593 * C5334 +
           (C5336 * C241 - C5337 * C224 - C5336 * C242 + C32864 * C254 +
            C5338 * C243 - C5339 * C225 - C5338 * C244 + C32851 * C255 +
            C5340 * C245 - C5341 * C226 - C5340 * C246 + C32826 * C256) *
               C32593 * C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C32593 * C5333 +
           (C5507 + C5508 + C5509) * C32593 * C5334 + C5518 * C32835) *
              C32551 * C213 -
          ((C5513 + C5514 + C5515) * C32593 * C32835 +
           (C5512 + C5511 + C5510) * C32593 * C5334 +
           (C5509 + C5508 + C5507) * C32593 * C5333) *
              C32551 * C214 +
          (C5518 * C5333 + (C5515 + C5514 + C5513) * C32593 * C5334 +
           (C5336 * C886 - C5337 * C877 - C5336 * C887 + C32864 * C895 +
            C5338 * C888 - C5339 * C878 - C5338 * C889 + C32851 * C896 +
            C5340 * C890 - C5341 * C879 - C5340 * C891 + C32826 * C897) *
               C32593 * C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C32593 * C5333 +
           (C5507 + C5508 + C5509) * C32593 * C5334 + C5518 * C32835) *
              C319 -
          ((C5340 * C1083 - C5341 * C1074 - C5340 * C1084 + C32826 * C1101 +
            C5338 * C1085 - C5339 * C1075 - C5338 * C1086 + C32851 * C1102 +
            C5336 * C1087 - C5337 * C1076 - C5336 * C1088 + C32864 * C1103) *
               C32593 * C32835 +
           (C5340 * C631 - C5341 * C624 - C5340 * C632 + C32826 * C639 +
            C5338 * C629 - C5339 * C623 - C5338 * C630 + C32851 * C638 +
            C5336 * C627 - C5337 * C622 - C5336 * C628 + C32864 * C637) *
               C32593 * C5334 +
           (C5340 * C336 - C5341 * C324 - C5340 * C337 + C32826 * C354 +
            C5338 * C338 - C5339 * C325 - C5338 * C339 + C32851 * C355 +
            C5336 * C340 - C5337 * C326 - C5336 * C341 + C32864 * C356) *
               C32593 * C5333) *
              C320 +
          ((C5336 * C342 - C5337 * C327 - C5336 * C343 + C32864 * C357 +
            C5338 * C344 - C5339 * C328 - C5338 * C345 + C32851 * C358 +
            C5340 * C346 - C5341 * C329 - C5340 * C347 + C32826 * C359) *
               C32593 * C5333 +
           (C5336 * C1089 - C5337 * C1077 - C5336 * C1090 + C32864 * C1104 +
            C5338 * C1091 - C5339 * C1078 - C5338 * C1092 + C32851 * C1105 +
            C5340 * C1093 - C5341 * C1079 - C5340 * C1094 + C32826 * C1106) *
               C32593 * C5334 +
           (C5336 * C1095 - C5337 * C1080 - C5336 * C1096 + C32864 * C1107 +
            C5338 * C1097 - C5339 * C1081 - C5338 * C1098 + C32851 * C1108 +
            C5340 * C1099 - C5341 * C1082 - C5340 * C1100 + C32826 * C1109) *
               C32593 * C32835) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
               C32593 * C6213 +
           (C6218 * C235 - C6219 * C221 - C6218 * C236 + C32488 * C251) *
               C32593 * C6214 +
           (C6218 * C237 - C6219 * C222 - C6218 * C238 + C32488 * C252) *
               C32593 * C6215 +
           (C6218 * C884 - C6219 * C876 - C6218 * C885 + C32488 * C894) *
               C32593 * C6216 +
           (C6218 * C886 - C6219 * C877 - C6218 * C887 + C32488 * C895) *
               C32593 * C6217) *
              C32551 * C32537 * C110 -
          ((C6218 * C888 - C6219 * C878 - C6218 * C889 + C32488 * C896) *
               C32593 * C6217 +
           (C6218 * C882 - C6219 * C875 - C6218 * C883 + C32488 * C893) *
               C32593 * C6216 +
           (C6218 * C239 - C6219 * C223 - C6218 * C240 + C32488 * C253) *
               C32593 * C6215 +
           (C6218 * C233 - C6219 * C220 - C6218 * C234 + C32488 * C250) *
               C32593 * C6214 +
           (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
               C32593 * C6213) *
              C32551 * C32537 * C111 +
          ((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
               C32593 * C6213 +
           (C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
               C32593 * C6214 +
           (C6218 * C241 - C6219 * C224 - C6218 * C242 + C32488 * C254) *
               C32593 * C6215 +
           (C6218 * C880 - C6219 * C874 - C6218 * C881 + C32488 * C892) *
               C32593 * C6216 +
           (C6218 * C890 - C6219 * C879 - C6218 * C891 + C32488 * C897) *
               C32593 * C6217) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
               C32593 * C6213 +
           C6326 * C6214 + C6327 * C6215 + C6328 * C6216 + C6329 * C6217) *
              C32551 * C213 -
          (C6330 * C6217 + C6329 * C6216 + C6328 * C6215 + C6327 * C6214 +
           C6326 * C6213) *
              C32551 * C214 +
          (C6327 * C6213 + C6328 * C6214 + C6329 * C6215 + C6330 * C6216 +
           (C6218 * C6286 - C6219 * C6283 - C6218 * C6287 + C32488 * C6289) *
               C32593 * C6217) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
               C32593 * C6213 +
           C6326 * C6214 + C6327 * C6215 + C6328 * C6216 + C6329 * C6217) *
              C319 -
          ((C6218 * C6395 - C6219 * C6392 - C6218 * C6396 + C32488 * C6401) *
               C32593 * C6217 +
           (C6218 * C1601 - C6219 * C1598 - C6218 * C1602 + C32488 * C1607) *
               C32593 * C6216 +
           (C6218 * C1087 - C6219 * C1076 - C6218 * C1088 + C32488 * C1103) *
               C32593 * C6215 +
           (C6218 * C627 - C6219 * C622 - C6218 * C628 + C32488 * C637) *
               C32593 * C6214 +
           (C6218 * C340 - C6219 * C326 - C6218 * C341 + C32488 * C356) *
               C32593 * C6213) *
              C320 +
          ((C6218 * C342 - C6219 * C327 - C6218 * C343 + C32488 * C357) *
               C32593 * C6213 +
           (C6218 * C1089 - C6219 * C1077 - C6218 * C1090 + C32488 * C1104) *
               C32593 * C6214 +
           (C6218 * C1095 - C6219 * C1080 - C6218 * C1096 + C32488 * C1107) *
               C32593 * C6215 +
           (C6218 * C6397 - C6219 * C6393 - C6218 * C6398 + C32488 * C6402) *
               C32593 * C6216 +
           (C6218 * C6399 - C6219 * C6394 - C6218 * C6400 + C32488 * C6403) *
               C32593 * C6217) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32868 +
            (C6218 * C340 - C6219 * C326 - C6218 * C341 + C32488 * C356) *
                C32857 +
            (C6218 * C342 - C6219 * C327 - C6218 * C343 + C32488 * C357) *
                C32838) *
               C5333 +
           (C6321 * C32868 + C6722 * C32857 +
            (C6218 * C1089 - C6219 * C1077 - C6218 * C1090 + C32488 * C1104) *
                C32838) *
               C5334 +
           (C6322 * C32868 + C6721 * C32857 +
            (C6218 * C1095 - C6219 * C1080 - C6218 * C1096 + C32488 * C1107) *
                C32838) *
               C32835) *
              C32551 * C32537 * C110 -
          (((C6218 * C1097 - C6219 * C1081 - C6218 * C1098 + C32488 * C1108) *
                C32838 +
            (C6218 * C1085 - C6219 * C1075 - C6218 * C1086 + C32488 * C1102) *
                C32857 +
            C6516 * C32868) *
               C32835 +
           ((C6218 * C1091 - C6219 * C1078 - C6218 * C1092 + C32488 * C1105) *
                C32838 +
            (C6218 * C629 - C6219 * C623 - C6218 * C630 + C32488 * C638) *
                C32857 +
            C6515 * C32868) *
               C5334 +
           ((C6218 * C344 - C6219 * C328 - C6218 * C345 + C32488 * C358) *
                C32838 +
            (C6218 * C338 - C6219 * C325 - C6218 * C339 + C32488 * C355) *
                C32857 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C32868) *
               C5333) *
              C32551 * C32537 * C111 +
          (((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
                C32868 +
            (C6218 * C336 - C6219 * C324 - C6218 * C337 + C32488 * C354) *
                C32857 +
            (C6218 * C346 - C6219 * C329 - C6218 * C347 + C32488 * C359) *
                C32838) *
               C5333 +
           ((C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
                C32868 +
            (C6218 * C631 - C6219 * C624 - C6218 * C632 + C32488 * C639) *
                C32857 +
            (C6218 * C1093 - C6219 * C1079 - C6218 * C1094 + C32488 * C1106) *
                C32838) *
               C5334 +
           ((C6218 * C241 - C6219 * C224 - C6218 * C242 + C32488 * C254) *
                C32868 +
            (C6218 * C1083 - C6219 * C1074 - C6218 * C1084 + C32488 * C1101) *
                C32857 +
            (C6218 * C1099 - C6219 * C1082 - C6218 * C1100 + C32488 * C1109) *
                C32838) *
               C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32868 +
            (C6218 * C340 - C6219 * C326 - C6218 * C341 + C32488 * C356) *
                C32857 +
            (C6218 * C342 - C6219 * C327 - C6218 * C343 + C32488 * C357) *
                C32838) *
               C5333 +
           (C6947 + C6948 + C6975) * C5334 + C6978 * C32835) *
              C32551 * C213 -
          ((C6977 + C6963 + C6964) * C32835 + (C6976 + C6954 + C6953) * C5334 +
           (C6975 + C6948 + C6947) * C5333) *
              C32551 * C214 +
          (C6978 * C5333 + (C6964 + C6963 + C6977) * C5334 +
           (C6324 * C32868 + C6719 * C32857 +
            (C6218 * C6399 - C6219 * C6394 - C6218 * C6400 + C32488 * C6403) *
                C32838) *
               C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32868 +
            C7131 * C32857 + C7132 * C32838) *
               C5333 +
           (C6947 + C6948 + C6975) * C5334 + C6978 * C32835) *
              C319 -
          ((C7133 * C32838 + C6973 * C32857 + C6721 * C32868) * C32835 +
           (C7134 * C32838 + C6972 * C32857 + C6722 * C32868) * C5334 +
           (C7135 * C32838 + C7132 * C32857 + C7131 * C32868) * C5333) *
              C320 +
          ((C7132 * C32868 + C7135 * C32857 +
            (C6218 * C1997 - C6219 * C1988 - C6218 * C1998 + C32488 * C2006) *
                C32838) *
               C5333 +
           (C6972 * C32868 + C7134 * C32857 +
            (C6218 * C7093 - C6219 * C7089 - C6218 * C7094 + C32488 * C7098) *
                C32838) *
               C5334 +
           (C6973 * C32868 + C7133 * C32857 +
            (C6218 * C7095 - C6219 * C7090 - C6218 * C7096 + C32488 * C7099) *
                C32838) *
               C32835) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
             C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
             C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                C32593 * C32867 +
            (C953 + C954 + C955) * C32593 * C32855 + C964 * C32835) *
               C534 -
           ((C762 * C1083 - C763 * C1074 - C762 * C1084 + C32826 * C1101 +
             C760 * C1085 - C761 * C1075 - C760 * C1086 + C753 * C1102 +
             C758 * C1087 - C759 * C1076 - C758 * C1088 + C752 * C1103) *
                C32593 * C32835 +
            (C762 * C631 - C763 * C624 - C762 * C632 + C32826 * C639 +
             C760 * C629 - C761 * C623 - C760 * C630 + C753 * C638 +
             C758 * C627 - C759 * C622 - C758 * C628 + C752 * C637) *
                C32593 * C32855 +
            (C762 * C336 - C763 * C324 - C762 * C337 + C32826 * C354 +
             C760 * C338 - C761 * C325 - C760 * C339 + C753 * C355 +
             C758 * C340 - C759 * C326 - C758 * C341 + C752 * C356) *
                C32593 * C32867) *
               C535) *
              C32537 * C446 +
          (((C758 * C338 - C759 * C325 - C758 * C339 + C752 * C355 +
             C760 * C336 - C761 * C324 - C760 * C337 + C753 * C354 +
             C762 * C334 - C763 * C323 - C762 * C335 + C32826 * C353) *
                C32593 * C32867 +
            (C758 * C629 - C759 * C623 - C758 * C630 + C752 * C638 +
             C760 * C631 - C761 * C624 - C760 * C632 + C753 * C639 +
             C762 * C633 - C763 * C625 - C762 * C634 + C32826 * C640) *
                C32593 * C32855 +
            (C758 * C1085 - C759 * C1075 - C758 * C1086 + C752 * C1102 +
             C760 * C1083 - C761 * C1074 - C760 * C1084 + C753 * C1101 +
             C762 * C1449 - C763 * C1448 - C762 * C1450 + C32826 * C1451) *
                C32593 * C32835) *
               C535 -
           ((C1302 + C1301 + C1300) * C32593 * C32835 +
            (C1299 + C1298 + C1297) * C32593 * C32855 +
            (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
             C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
             C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
                C32593 * C32867) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
            C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
            C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
            C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
            C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
               C32593 * C32581 * C534 -
           (C121 * C332 - C122 * C322 - C121 * C333 + C105 * C352 +
            C119 * C334 - C120 * C323 - C119 * C335 + C104 * C353 +
            C117 * C336 - C118 * C324 - C117 * C337 + C103 * C354 +
            C115 * C338 - C116 * C325 - C115 * C339 + C102 * C355 +
            C113 * C340 - C114 * C326 - C113 * C341 + C101 * C356) *
               C32593 * C32581 * C535) *
              C32537 * C446 +
          ((C113 * C338 - C114 * C325 - C113 * C339 + C101 * C355 +
            C115 * C336 - C116 * C324 - C115 * C337 + C102 * C354 +
            C117 * C334 - C118 * C323 - C117 * C335 + C103 * C353 +
            C119 * C332 - C120 * C322 - C119 * C333 + C104 * C352 +
            C121 * C537 - C122 * C536 - C121 * C538 + C105 * C539) *
               C32593 * C32581 * C535 -
           (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
            C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
            C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
            C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
            C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
               C32593 * C32581 * C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
             C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
             C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                C32868 +
            (C2064 + C2065 + C2066) * C32857 + C2074 * C32838) *
               C32581 * C534 -
           ((C2070 + C2071 + C2072) * C32838 +
            (C2069 + C2068 + C2067) * C32857 +
            (C2066 + C2065 + C2064) * C32868) *
               C32581 * C535) *
              C32537 * C446 +
          (((C2411 + C2412 + C2413) * C32868 +
            (C2414 + C2415 + C2416) * C32857 +
            (C758 * C1993 - C759 * C1986 - C758 * C1994 + C752 * C2004 +
             C760 * C1991 - C761 * C1985 - C760 * C1992 + C753 * C2003 +
             C762 * C2371 - C763 * C2370 - C762 * C2372 + C32826 * C2373) *
                C32838) *
               C32581 * C535 -
           ((C2416 + C2415 + C2414) * C32838 +
            (C2413 + C2412 + C2411) * C32857 +
            (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
             C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
             C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
                C32868) *
               C32581 * C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
             C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
             C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                C32593 * C5333 +
            (C5507 + C5508 + C5509) * C32593 * C5334 + C5518 * C32835) *
               C534 -
           ((C5340 * C1083 - C5341 * C1074 - C5340 * C1084 + C32826 * C1101 +
             C5338 * C1085 - C5339 * C1075 - C5338 * C1086 + C32851 * C1102 +
             C5336 * C1087 - C5337 * C1076 - C5336 * C1088 + C32864 * C1103) *
                C32593 * C32835 +
            (C5340 * C631 - C5341 * C624 - C5340 * C632 + C32826 * C639 +
             C5338 * C629 - C5339 * C623 - C5338 * C630 + C32851 * C638 +
             C5336 * C627 - C5337 * C622 - C5336 * C628 + C32864 * C637) *
                C32593 * C5334 +
            (C5340 * C336 - C5341 * C324 - C5340 * C337 + C32826 * C354 +
             C5338 * C338 - C5339 * C325 - C5338 * C339 + C32851 * C355 +
             C5336 * C340 - C5337 * C326 - C5336 * C341 + C32864 * C356) *
                C32593 * C5333) *
               C535) *
              C32537 * C446 +
          (((C5336 * C338 - C5337 * C325 - C5336 * C339 + C32864 * C355 +
             C5338 * C336 - C5339 * C324 - C5338 * C337 + C32851 * C354 +
             C5340 * C334 - C5341 * C323 - C5340 * C335 + C32826 * C353) *
                C32593 * C5333 +
            (C5336 * C629 - C5337 * C623 - C5336 * C630 + C32864 * C638 +
             C5338 * C631 - C5339 * C624 - C5338 * C632 + C32851 * C639 +
             C5340 * C633 - C5341 * C625 - C5340 * C634 + C32826 * C640) *
                C32593 * C5334 +
            (C5336 * C1085 - C5337 * C1075 - C5336 * C1086 + C32864 * C1102 +
             C5338 * C1083 - C5339 * C1074 - C5338 * C1084 + C32851 * C1101 +
             C5340 * C1449 - C5341 * C1448 - C5340 * C1450 + C32826 * C1451) *
                C32593 * C32835) *
               C535 -
           ((C5816 + C5815 + C5814) * C32593 * C32835 +
            (C5813 + C5812 + C5811) * C32593 * C5334 +
            (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
             C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
             C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
                C32593 * C5333) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32593 * C6213 +
            C6326 * C6214 + C6327 * C6215 + C6328 * C6216 + C6329 * C6217) *
               C534 -
           ((C6218 * C6395 - C6219 * C6392 - C6218 * C6396 + C32488 * C6401) *
                C32593 * C6217 +
            (C6218 * C1601 - C6219 * C1598 - C6218 * C1602 + C32488 * C1607) *
                C32593 * C6216 +
            (C6218 * C1087 - C6219 * C1076 - C6218 * C1088 + C32488 * C1103) *
                C32593 * C6215 +
            (C6218 * C627 - C6219 * C622 - C6218 * C628 + C32488 * C637) *
                C32593 * C6214 +
            (C6218 * C340 - C6219 * C326 - C6218 * C341 + C32488 * C356) *
                C32593 * C6213) *
               C535) *
              C32537 * C446 +
          (((C6218 * C338 - C6219 * C325 - C6218 * C339 + C32488 * C355) *
                C32593 * C6213 +
            (C6218 * C629 - C6219 * C623 - C6218 * C630 + C32488 * C638) *
                C32593 * C6214 +
            (C6218 * C1085 - C6219 * C1075 - C6218 * C1086 + C32488 * C1102) *
                C32593 * C6215 +
            (C6218 * C1603 - C6219 * C1599 - C6218 * C1604 + C32488 * C1608) *
                C32593 * C6216 +
            (C6218 * C6605 - C6219 * C6604 - C6218 * C6606 + C32488 * C6607) *
                C32593 * C6217) *
               C535 -
           (C6522 * C6217 + C6521 * C6216 + C6520 * C6215 + C6519 * C6214 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C32593 * C6213) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                 C32868 +
             C7131 * C32857 + C7132 * C32838) *
                C5333 +
            (C6947 + C6948 + C6975) * C5334 + C6978 * C32835) *
               C534 -
           ((C7133 * C32838 + C6973 * C32857 + C6721 * C32868) * C32835 +
            (C7134 * C32838 + C6972 * C32857 + C6722 * C32868) * C5334 +
            (C7135 * C32838 + C7132 * C32857 + C7131 * C32868) * C5333) *
               C535) *
              C32537 * C446 +
          (((C7482 * C32868 + C7483 * C32857 +
             (C6218 * C1993 - C6219 * C1986 - C6218 * C1994 + C32488 * C2004) *
                 C32838) *
                C5333 +
            (C7312 * C32868 + C7313 * C32857 +
             (C6218 * C2567 - C6219 * C2563 - C6218 * C2568 + C32488 * C2572) *
                 C32838) *
                C5334 +
            (C7314 * C32868 + C7315 * C32857 +
             (C6218 * C7466 - C6219 * C7465 - C6218 * C7467 + C32488 * C7468) *
                 C32838) *
                C32835) *
               C535 -
           ((C7319 + C7318 + C7295) * C32835 + (C7317 + C7316 + C7286) * C5334 +
            (C7483 * C32838 + C7482 * C32857 +
             (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                 C32868) *
                C5333) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 + C115 * C132 -
           C116 * C124 - C115 * C133 + C102 * C145 + C117 * C134 - C118 * C125 -
           C117 * C135 + C103 * C146 + C119 * C136 - C120 * C126 - C119 * C137 +
           C104 * C147 + C121 * C138 - C122 * C127 - C121 * C139 +
           C105 * C148) *
              C32593 * C32581 * C32551 * C213 -
          (C121 * C227 - C122 * C217 - C121 * C228 + C105 * C247 + C119 * C229 -
           C120 * C218 - C119 * C230 + C104 * C248 + C117 * C231 - C118 * C219 -
           C117 * C232 + C103 * C249 + C115 * C233 - C116 * C220 - C115 * C234 +
           C102 * C250 + C113 * C235 - C114 * C221 - C113 * C236 +
           C101 * C251) *
              C32593 * C32581 * C32551 * C214 +
          (C113 * C237 - C114 * C222 - C113 * C238 + C101 * C252 + C115 * C239 -
           C116 * C223 - C115 * C240 + C102 * C253 + C117 * C241 - C118 * C224 -
           C117 * C242 + C103 * C254 + C119 * C243 - C120 * C225 - C119 * C244 +
           C104 * C255 + C121 * C245 - C122 * C226 - C121 * C246 +
           C105 * C256) *
              C32593 * C32581 * C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 + C115 * C132 -
           C116 * C124 - C115 * C133 + C102 * C145 + C117 * C134 - C118 * C125 -
           C117 * C135 + C103 * C146 + C119 * C136 - C120 * C126 - C119 * C137 +
           C104 * C147 + C121 * C138 - C122 * C127 - C121 * C139 +
           C105 * C148) *
              C32593 * C32581 * C32551 * C32537 * C110 -
          (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 + C119 * C138 -
           C120 * C127 - C119 * C139 + C104 * C148 + C117 * C136 - C118 * C126 -
           C117 * C137 + C103 * C147 + C115 * C134 - C116 * C125 - C115 * C135 +
           C102 * C146 + C113 * C132 - C114 * C124 - C113 * C133 +
           C101 * C145) *
              C32593 * C32581 * C32551 * C32537 * C111 +
          (C113 * C134 - C114 * C125 - C113 * C135 + C101 * C146 + C115 * C136 -
           C116 * C126 - C115 * C137 + C102 * C147 + C117 * C138 - C118 * C127 -
           C117 * C139 + C103 * C148 + C119 * C140 - C120 * C128 - C119 * C141 +
           C104 * C149 + C121 * C142 - C122 * C129 - C121 * C143 +
           C105 * C150) *
              C32593 * C32581 * C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
            C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
            C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
               C32593 * C32867 +
           (C758 * C235 - C759 * C221 - C758 * C236 + C752 * C251 +
            C760 * C233 - C761 * C220 - C760 * C234 + C753 * C250 +
            C762 * C231 - C763 * C219 - C762 * C232 + C32826 * C249) *
               C32593 * C32855 +
           (C758 * C237 - C759 * C222 - C758 * C238 + C752 * C252 +
            C760 * C239 - C761 * C223 - C760 * C240 + C753 * C253 +
            C762 * C241 - C763 * C224 - C762 * C242 + C32826 * C254) *
               C32593 * C32835) *
              C32551 * C32537 * C110 -
          ((C762 * C243 - C763 * C225 - C762 * C244 + C32826 * C255 +
            C760 * C241 - C761 * C224 - C760 * C242 + C753 * C254 +
            C758 * C239 - C759 * C223 - C758 * C240 + C752 * C253) *
               C32593 * C32835 +
           (C762 * C229 - C763 * C218 - C762 * C230 + C32826 * C248 +
            C760 * C231 - C761 * C219 - C760 * C232 + C753 * C249 +
            C758 * C233 - C759 * C220 - C758 * C234 + C752 * C250) *
               C32593 * C32855 +
           (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
            C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
            C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
               C32593 * C32867) *
              C32551 * C32537 * C111 +
          ((C758 * C134 - C759 * C125 - C758 * C135 + C752 * C146 +
            C760 * C136 - C761 * C126 - C760 * C137 + C753 * C147 +
            C762 * C138 - C763 * C127 - C762 * C139 + C32826 * C148) *
               C32593 * C32867 +
           (C758 * C231 - C759 * C219 - C758 * C232 + C752 * C249 +
            C760 * C229 - C761 * C218 - C760 * C230 + C753 * C248 +
            C762 * C227 - C763 * C217 - C762 * C228 + C32826 * C247) *
               C32593 * C32855 +
           (C758 * C241 - C759 * C224 - C758 * C242 + C752 * C254 +
            C760 * C243 - C761 * C225 - C760 * C244 + C753 * C255 +
            C762 * C245 - C763 * C226 - C762 * C246 + C32826 * C256) *
               C32593 * C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
            C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
            C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
               C32593 * C32867 +
           (C953 + C954 + C955) * C32593 * C32855 + C964 * C32835) *
              C32551 * C213 -
          ((C959 + C960 + C961) * C32593 * C32835 +
           (C958 + C957 + C956) * C32593 * C32855 +
           (C955 + C954 + C953) * C32593 * C32867) *
              C32551 * C214 +
          (C964 * C32867 + (C961 + C960 + C959) * C32593 * C32855 +
           (C758 * C886 - C759 * C877 - C758 * C887 + C752 * C895 +
            C760 * C888 - C761 * C878 - C760 * C889 + C753 * C896 +
            C762 * C890 - C763 * C879 - C762 * C891 + C32826 * C897) *
               C32593 * C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
            C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
            C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
               C32868 +
           (C758 * C340 - C759 * C326 - C758 * C341 + C752 * C356 +
            C760 * C338 - C761 * C325 - C760 * C339 + C753 * C355 +
            C762 * C336 - C763 * C324 - C762 * C337 + C32826 * C354) *
               C32857 +
           (C758 * C342 - C759 * C327 - C758 * C343 + C752 * C357 +
            C760 * C344 - C761 * C328 - C760 * C345 + C753 * C358 +
            C762 * C346 - C763 * C329 - C762 * C347 + C32826 * C359) *
               C32838) *
              C32581 * C32551 * C32537 * C110 -
          ((C762 * C348 - C763 * C330 - C762 * C349 + C32826 * C360 +
            C760 * C346 - C761 * C329 - C760 * C347 + C753 * C359 +
            C758 * C344 - C759 * C328 - C758 * C345 + C752 * C358) *
               C32838 +
           (C762 * C334 - C763 * C323 - C762 * C335 + C32826 * C353 +
            C760 * C336 - C761 * C324 - C760 * C337 + C753 * C354 +
            C758 * C338 - C759 * C325 - C758 * C339 + C752 * C355) *
               C32857 +
           (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
            C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
            C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
               C32868) *
              C32581 * C32551 * C32537 * C111 +
          ((C758 * C134 - C759 * C125 - C758 * C135 + C752 * C146 +
            C760 * C136 - C761 * C126 - C760 * C137 + C753 * C147 +
            C762 * C138 - C763 * C127 - C762 * C139 + C32826 * C148) *
               C32868 +
           (C758 * C336 - C759 * C324 - C758 * C337 + C752 * C354 +
            C760 * C334 - C761 * C323 - C760 * C335 + C753 * C353 +
            C762 * C332 - C763 * C322 - C762 * C333 + C32826 * C352) *
               C32857 +
           (C758 * C346 - C759 * C329 - C758 * C347 + C752 * C359 +
            C760 * C348 - C761 * C330 - C760 * C349 + C753 * C360 +
            C762 * C350 - C763 * C331 - C762 * C351 + C32826 * C361) *
               C32838) *
              C32581 * C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
            C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
            C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
               C32868 +
           (C758 * C340 - C759 * C326 - C758 * C341 + C752 * C356 +
            C760 * C338 - C761 * C325 - C760 * C339 + C753 * C355 +
            C762 * C336 - C763 * C324 - C762 * C337 + C32826 * C354) *
               C32857 +
           (C758 * C342 - C759 * C327 - C758 * C343 + C752 * C357 +
            C760 * C344 - C761 * C328 - C760 * C345 + C753 * C358 +
            C762 * C346 - C763 * C329 - C762 * C347 + C32826 * C359) *
               C32838) *
              C32581 * C32551 * C213 -
          ((C762 * C1093 - C763 * C1079 - C762 * C1094 + C32826 * C1106 +
            C760 * C1091 - C761 * C1078 - C760 * C1092 + C753 * C1105 +
            C758 * C1089 - C759 * C1077 - C758 * C1090 + C752 * C1104) *
               C32838 +
           (C1650 + C1651 + C1652) * C32857 + (C955 + C954 + C953) * C32868) *
              C32581 * C32551 * C214 +
          (C963 * C32868 + (C1649 + C1648 + C1647) * C32857 +
           (C758 * C1095 - C759 * C1080 - C758 * C1096 + C752 * C1107 +
            C760 * C1097 - C761 * C1081 - C760 * C1098 + C753 * C1108 +
            C762 * C1099 - C763 * C1082 - C762 * C1100 + C32826 * C1109) *
               C32838) *
              C32581 * C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C32593 * C5333 +
           (C5336 * C235 - C5337 * C221 - C5336 * C236 + C32864 * C251 +
            C5338 * C233 - C5339 * C220 - C5338 * C234 + C32851 * C250 +
            C5340 * C231 - C5341 * C219 - C5340 * C232 + C32826 * C249) *
               C32593 * C5334 +
           (C5336 * C237 - C5337 * C222 - C5336 * C238 + C32864 * C252 +
            C5338 * C239 - C5339 * C223 - C5338 * C240 + C32851 * C253 +
            C5340 * C241 - C5341 * C224 - C5340 * C242 + C32826 * C254) *
               C32593 * C32835) *
              C32551 * C32537 * C110 -
          ((C5340 * C243 - C5341 * C225 - C5340 * C244 + C32826 * C255 +
            C5338 * C241 - C5339 * C224 - C5338 * C242 + C32851 * C254 +
            C5336 * C239 - C5337 * C223 - C5336 * C240 + C32864 * C253) *
               C32593 * C32835 +
           (C5340 * C229 - C5341 * C218 - C5340 * C230 + C32826 * C248 +
            C5338 * C231 - C5339 * C219 - C5338 * C232 + C32851 * C249 +
            C5336 * C233 - C5337 * C220 - C5336 * C234 + C32864 * C250) *
               C32593 * C5334 +
           (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
            C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
            C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
               C32593 * C5333) *
              C32551 * C32537 * C111 +
          ((C5336 * C134 - C5337 * C125 - C5336 * C135 + C32864 * C146 +
            C5338 * C136 - C5339 * C126 - C5338 * C137 + C32851 * C147 +
            C5340 * C138 - C5341 * C127 - C5340 * C139 + C32826 * C148) *
               C32593 * C5333 +
           (C5336 * C231 - C5337 * C219 - C5336 * C232 + C32864 * C249 +
            C5338 * C229 - C5339 * C218 - C5338 * C230 + C32851 * C248 +
            C5340 * C227 - C5341 * C217 - C5340 * C228 + C32826 * C247) *
               C32593 * C5334 +
           (C5336 * C241 - C5337 * C224 - C5336 * C242 + C32864 * C254 +
            C5338 * C243 - C5339 * C225 - C5338 * C244 + C32851 * C255 +
            C5340 * C245 - C5341 * C226 - C5340 * C246 + C32826 * C256) *
               C32593 * C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C32593 * C5333 +
           (C5507 + C5508 + C5509) * C32593 * C5334 + C5518 * C32835) *
              C32551 * C213 -
          ((C5513 + C5514 + C5515) * C32593 * C32835 +
           (C5512 + C5511 + C5510) * C32593 * C5334 +
           (C5509 + C5508 + C5507) * C32593 * C5333) *
              C32551 * C214 +
          (C5518 * C5333 + (C5515 + C5514 + C5513) * C32593 * C5334 +
           (C5336 * C886 - C5337 * C877 - C5336 * C887 + C32864 * C895 +
            C5338 * C888 - C5339 * C878 - C5338 * C889 + C32851 * C896 +
            C5340 * C890 - C5341 * C879 - C5340 * C891 + C32826 * C897) *
               C32593 * C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
               C32593 * C6213 +
           (C6218 * C235 - C6219 * C221 - C6218 * C236 + C32488 * C251) *
               C32593 * C6214 +
           (C6218 * C237 - C6219 * C222 - C6218 * C238 + C32488 * C252) *
               C32593 * C6215 +
           (C6218 * C884 - C6219 * C876 - C6218 * C885 + C32488 * C894) *
               C32593 * C6216 +
           (C6218 * C886 - C6219 * C877 - C6218 * C887 + C32488 * C895) *
               C32593 * C6217) *
              C32551 * C32537 * C110 -
          ((C6218 * C888 - C6219 * C878 - C6218 * C889 + C32488 * C896) *
               C32593 * C6217 +
           (C6218 * C882 - C6219 * C875 - C6218 * C883 + C32488 * C893) *
               C32593 * C6216 +
           (C6218 * C239 - C6219 * C223 - C6218 * C240 + C32488 * C253) *
               C32593 * C6215 +
           (C6218 * C233 - C6219 * C220 - C6218 * C234 + C32488 * C250) *
               C32593 * C6214 +
           (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
               C32593 * C6213) *
              C32551 * C32537 * C111 +
          ((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
               C32593 * C6213 +
           (C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
               C32593 * C6214 +
           (C6218 * C241 - C6219 * C224 - C6218 * C242 + C32488 * C254) *
               C32593 * C6215 +
           (C6218 * C880 - C6219 * C874 - C6218 * C881 + C32488 * C892) *
               C32593 * C6216 +
           (C6218 * C890 - C6219 * C879 - C6218 * C891 + C32488 * C897) *
               C32593 * C6217) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
               C32593 * C6213 +
           C6326 * C6214 + C6327 * C6215 + C6328 * C6216 + C6329 * C6217) *
              C32551 * C213 -
          (C6330 * C6217 + C6329 * C6216 + C6328 * C6215 + C6327 * C6214 +
           C6326 * C6213) *
              C32551 * C214 +
          (C6327 * C6213 + C6328 * C6214 + C6329 * C6215 + C6330 * C6216 +
           (C6218 * C6286 - C6219 * C6283 - C6218 * C6287 + C32488 * C6289) *
               C32593 * C6217) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32868 +
            (C6218 * C340 - C6219 * C326 - C6218 * C341 + C32488 * C356) *
                C32857 +
            (C6218 * C342 - C6219 * C327 - C6218 * C343 + C32488 * C357) *
                C32838) *
               C5333 +
           (C6321 * C32868 + C6722 * C32857 +
            (C6218 * C1089 - C6219 * C1077 - C6218 * C1090 + C32488 * C1104) *
                C32838) *
               C5334 +
           (C6322 * C32868 + C6721 * C32857 +
            (C6218 * C1095 - C6219 * C1080 - C6218 * C1096 + C32488 * C1107) *
                C32838) *
               C32835) *
              C32551 * C32537 * C110 -
          (((C6218 * C1097 - C6219 * C1081 - C6218 * C1098 + C32488 * C1108) *
                C32838 +
            (C6218 * C1085 - C6219 * C1075 - C6218 * C1086 + C32488 * C1102) *
                C32857 +
            C6516 * C32868) *
               C32835 +
           ((C6218 * C1091 - C6219 * C1078 - C6218 * C1092 + C32488 * C1105) *
                C32838 +
            (C6218 * C629 - C6219 * C623 - C6218 * C630 + C32488 * C638) *
                C32857 +
            C6515 * C32868) *
               C5334 +
           ((C6218 * C344 - C6219 * C328 - C6218 * C345 + C32488 * C358) *
                C32838 +
            (C6218 * C338 - C6219 * C325 - C6218 * C339 + C32488 * C355) *
                C32857 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C32868) *
               C5333) *
              C32551 * C32537 * C111 +
          (((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
                C32868 +
            (C6218 * C336 - C6219 * C324 - C6218 * C337 + C32488 * C354) *
                C32857 +
            (C6218 * C346 - C6219 * C329 - C6218 * C347 + C32488 * C359) *
                C32838) *
               C5333 +
           ((C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
                C32868 +
            (C6218 * C631 - C6219 * C624 - C6218 * C632 + C32488 * C639) *
                C32857 +
            (C6218 * C1093 - C6219 * C1079 - C6218 * C1094 + C32488 * C1106) *
                C32838) *
               C5334 +
           ((C6218 * C241 - C6219 * C224 - C6218 * C242 + C32488 * C254) *
                C32868 +
            (C6218 * C1083 - C6219 * C1074 - C6218 * C1084 + C32488 * C1101) *
                C32857 +
            (C6218 * C1099 - C6219 * C1082 - C6218 * C1100 + C32488 * C1109) *
                C32838) *
               C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32868 +
            (C6218 * C340 - C6219 * C326 - C6218 * C341 + C32488 * C356) *
                C32857 +
            (C6218 * C342 - C6219 * C327 - C6218 * C343 + C32488 * C357) *
                C32838) *
               C5333 +
           (C6947 + C6948 + C6975) * C5334 + C6978 * C32835) *
              C32551 * C213 -
          ((C6977 + C6963 + C6964) * C32835 + (C6976 + C6954 + C6953) * C5334 +
           (C6975 + C6948 + C6947) * C5333) *
              C32551 * C214 +
          (C6978 * C5333 + (C6964 + C6963 + C6977) * C5334 +
           (C6324 * C32868 + C6719 * C32857 +
            (C6218 * C6399 - C6219 * C6394 - C6218 * C6400 + C32488 * C6403) *
                C32838) *
               C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
             C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
             C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
             C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
                C32805 +
            (C3750 + C3751 + C3752 + C3753) * C32680) *
               C32581 * C32551 * C444 -
           ((C3402 + C3403 + C3404 + C3405) * C32680 +
            (C2857 + C2856 + C2855 + C2854) * C32805) *
               C32581 * C32551 * C445) *
              C446 +
          (((C3114 + C3115 + C3116 + C3117) * C32805 +
            (C2699 * C629 - C2700 * C623 - C2699 * C630 + C2693 * C638 +
             C2701 * C631 - C2702 * C624 - C2701 * C632 + C2694 * C639 +
             C2703 * C633 - C2704 * C625 - C2703 * C634 + C2695 * C640 +
             C2705 * C635 - C2706 * C626 - C2705 * C636 + C32803 * C641) *
                C32680) *
               C32581 * C32551 * C445 -
           ((C2705 * C332 - C2706 * C322 - C2705 * C333 + C32803 * C352 +
             C2703 * C334 - C2704 * C323 - C2703 * C335 + C2695 * C353 +
             C2701 * C336 - C2702 * C324 - C2701 * C337 + C2694 * C354 +
             C2699 * C338 - C2700 * C325 - C2699 * C339 + C2693 * C355) *
                C32680 +
            (C2705 * C138 - C2706 * C127 - C2705 * C139 + C32803 * C148 +
             C2703 * C136 - C2704 * C126 - C2703 * C137 + C2695 * C147 +
             C2701 * C134 - C2702 * C125 - C2701 * C135 + C2694 * C146 +
             C2699 * C132 - C2700 * C124 - C2699 * C133 + C2693 * C145) *
                C32805) *
               C32581 * C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
              C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                 C32805 +
             (C8968 + C8969) * C32680) *
                C5333 +
            ((C7894 + C7895) * C32805 + (C8477 + C8476) * C32680) * C5334 +
            C8773 * C32835) *
               C32551 * C444 -
           (((C8472 + C8473) * C32680 + (C7899 + C7898) * C32805) * C32835 +
            ((C8474 + C8475) * C32680 + (C7897 + C7896) * C32805) * C5334 +
            ((C8476 + C8477) * C32680 + (C7895 + C7894) * C32805) * C5333) *
               C32551 * C445) *
              C446 +
          ((((C8170 + C8171) * C32805 + (C9194 + C9195) * C32680) * C5333 +
            ((C8172 + C8173) * C32805 + (C9196 + C9197) * C32680) * C5334 +
            ((C8174 + C8175) * C32805 +
             (C31623 * C1603 - C7744 * C1599 - C31623 * C1604 + C32785 * C1608 +
              C31604 * C1605 - C7746 * C1600 - C31604 * C1606 +
              C32498 * C1609) *
                 C32680) *
                C32835) *
               C32551 * C445 -
           (((C9197 + C9196) * C32680 + (C8173 + C8172) * C32805) * C32835 +
            ((C9195 + C9194) * C32680 + (C8171 + C8170) * C32805) * C5334 +
            ((C31604 * C336 - C7746 * C324 - C31604 * C337 + C32498 * C354 +
              C31623 * C338 - C7744 * C325 - C31623 * C339 + C32785 * C355) *
                 C32680 +
             (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
              C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
                 C32805) *
                C5333) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
             C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
             C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
             C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
                C32805 +
            (C3750 + C3751 + C3752 + C3753) * C32680) *
               C32581 * C534 -
           ((C3754 + C3755 + C3756 + C3757) * C32680 +
            (C3753 + C3752 + C3751 + C3750) * C32805) *
               C32581 * C535) *
              C444 +
          (((C3405 + C3404 + C3403 + C3402) * C32805 +
            (C2699 * C1089 - C2700 * C1077 - C2699 * C1090 + C2693 * C1104 +
             C2701 * C1091 - C2702 * C1078 - C2701 * C1092 + C2694 * C1105 +
             C2703 * C1093 - C2704 * C1079 - C2703 * C1094 + C2695 * C1106 +
             C2705 * C2221 - C2706 * C2220 - C2705 * C2222 + C32803 * C2223) *
                C32680) *
               C32581 * C535 -
           ((C3402 + C3403 + C3404 + C3405) * C32680 +
            (C2857 + C2856 + C2855 + C2854) * C32805) *
               C32581 * C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
              C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                 C32805 +
             (C8968 + C8969) * C32680) *
                C5333 +
            ((C7894 + C7895) * C32805 + C9600 * C32680) * C5334 +
            C8773 * C32835) *
               C534 -
           (((C8970 + C8971) * C32680 + C9601 * C32805) * C32835 +
            ((C8972 + C8973) * C32680 + C9602 * C32805) * C5334 +
            ((C8974 + C8975) * C32680 + (C8969 + C8968) * C32805) * C5333) *
               C535) *
              C444 +
          (((C9600 * C32805 + (C8973 + C8972) * C32680) * C5333 +
            (C8771 * C32805 + (C8971 + C8970) * C32680) * C5334 +
            ((C8473 + C8472) * C32805 +
             (C31623 * C6397 - C7744 * C6393 - C31623 * C6398 + C32785 * C6402 +
              C31604 * C7282 - C7746 * C7281 - C31604 * C7283 +
              C32498 * C7284) *
                 C32680) *
                C32835) *
               C535 -
           (((C8472 + C8473) * C32680 + (C7899 + C7898) * C32805) * C32835 +
            (C9601 * C32680 + (C7897 + C7896) * C32805) * C5334 +
            (C9602 * C32680 + (C7895 + C7894) * C32805) * C5333) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
            C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
            C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
            C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
               C32805 +
           (C2699 * C340 - C2700 * C326 - C2699 * C341 + C2693 * C356 +
            C2701 * C338 - C2702 * C325 - C2701 * C339 + C2694 * C355 +
            C2703 * C336 - C2704 * C324 - C2703 * C337 + C2695 * C354 +
            C2705 * C334 - C2706 * C323 - C2705 * C335 + C32803 * C353) *
               C32680) *
              C32581 * C32551 * C213 -
          ((C3402 + C3403 + C3404 + C3405) * C32680 +
           (C2857 + C2856 + C2855 + C2854) * C32805) *
              C32581 * C32551 * C214 +
          ((C2861 + C2860 + C2859 + C2858) * C32805 +
           (C2699 * C1087 - C2700 * C1076 - C2699 * C1088 + C2693 * C1103 +
            C2701 * C1085 - C2702 * C1075 - C2701 * C1086 + C2694 * C1102 +
            C2703 * C1083 - C2704 * C1074 - C2703 * C1084 + C2695 * C1101 +
            C2705 * C1449 - C2706 * C1448 - C2705 * C1450 + C32803 * C1451) *
               C32680) *
              C32581 * C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
            C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
            C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
            C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
               C32805 +
           (C2699 * C340 - C2700 * C326 - C2699 * C341 + C2693 * C356 +
            C2701 * C338 - C2702 * C325 - C2701 * C339 + C2694 * C355 +
            C2703 * C336 - C2704 * C324 - C2703 * C337 + C2695 * C354 +
            C2705 * C334 - C2706 * C323 - C2705 * C335 + C32803 * C353) *
               C32680) *
              C32581 * C32551 * C32537 * C110 -
          ((C2705 * C332 - C2706 * C322 - C2705 * C333 + C32803 * C352 +
            C2703 * C334 - C2704 * C323 - C2703 * C335 + C2695 * C353 +
            C2701 * C336 - C2702 * C324 - C2701 * C337 + C2694 * C354 +
            C2699 * C338 - C2700 * C325 - C2699 * C339 + C2693 * C355) *
               C32680 +
           (C2705 * C138 - C2706 * C127 - C2705 * C139 + C32803 * C148 +
            C2703 * C136 - C2704 * C126 - C2703 * C137 + C2695 * C147 +
            C2701 * C134 - C2702 * C125 - C2701 * C135 + C2694 * C146 +
            C2699 * C132 - C2700 * C124 - C2699 * C133 + C2693 * C145) *
               C32805) *
              C32581 * C32551 * C32537 * C111 +
          ((C2699 * C134 - C2700 * C125 - C2699 * C135 + C2693 * C146 +
            C2701 * C136 - C2702 * C126 - C2701 * C137 + C2694 * C147 +
            C2703 * C138 - C2704 * C127 - C2703 * C139 + C2695 * C148 +
            C2705 * C140 - C2706 * C128 - C2705 * C141 + C32803 * C149) *
               C32805 +
           (C2699 * C336 - C2700 * C324 - C2699 * C337 + C2693 * C354 +
            C2701 * C334 - C2702 * C323 - C2701 * C335 + C2694 * C353 +
            C2703 * C332 - C2704 * C322 - C2703 * C333 + C2695 * C352 +
            C2705 * C537 - C2706 * C536 - C2705 * C538 + C32803 * C539) *
               C32680) *
              C32581 * C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
            C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
            C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
            C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
               C32805 +
           (C3750 + C3751 + C3752 + C3753) * C32680) *
              C32581 * C319 -
          ((C3754 + C3755 + C3756 + C3757) * C32680 +
           (C3753 + C3752 + C3751 + C3750) * C32805) *
              C32581 * C320 +
          ((C3757 + C3756 + C3755 + C3754) * C32805 +
           (C2699 * C1995 - C2700 * C1987 - C2699 * C1996 + C2693 * C2005 +
            C2701 * C1993 - C2702 * C1986 - C2701 * C1994 + C2694 * C2004 +
            C2703 * C1991 - C2704 * C1985 - C2703 * C1992 + C2695 * C2003 +
            C2705 * C2371 - C2706 * C2370 - C2705 * C2372 + C32803 * C2373) *
               C32680) *
              C32581 * C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C32805 +
            (C31623 * C340 - C7744 * C326 - C31623 * C341 + C32785 * C356 +
             C31604 * C338 - C7746 * C325 - C31604 * C339 + C32498 * C355) *
                C32680) *
               C5333 +
           ((C7894 + C7895) * C32805 + (C8477 + C8476) * C32680) * C5334 +
           (C7902 * C32805 + (C8475 + C8474) * C32680) * C32835) *
              C32551 * C32537 * C110 -
          (((C31604 * C1083 - C7746 * C1074 - C31604 * C1084 + C32498 * C1101 +
             C31623 * C1085 - C7744 * C1075 - C31623 * C1086 + C32785 * C1102) *
                C32680 +
            (C8173 + C8172) * C32805) *
               C32835 +
           ((C31604 * C631 - C7746 * C624 - C31604 * C632 + C32498 * C639 +
             C31623 * C629 - C7744 * C623 - C31623 * C630 + C32785 * C638) *
                C32680 +
            (C8171 + C8170) * C32805) *
               C5334 +
           ((C31604 * C336 - C7746 * C324 - C31604 * C337 + C32498 * C354 +
             C31623 * C338 - C7744 * C325 - C31623 * C339 + C32785 * C355) *
                C32680 +
            (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
             C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
                C32805) *
               C5333) *
              C32551 * C32537 * C111 +
          (((C31623 * C134 - C7744 * C125 - C31623 * C135 + C32785 * C146 +
             C31604 * C136 - C7746 * C126 - C31604 * C137 + C32498 * C147) *
                C32805 +
            (C31623 * C336 - C7744 * C324 - C31623 * C337 + C32785 * C354 +
             C31604 * C334 - C7746 * C323 - C31604 * C335 + C32498 * C353) *
                C32680) *
               C5333 +
           ((C31623 * C231 - C7744 * C219 - C31623 * C232 + C32785 * C249 +
             C31604 * C229 - C7746 * C218 - C31604 * C230 + C32498 * C248) *
                C32805 +
            (C31623 * C631 - C7744 * C624 - C31623 * C632 + C32785 * C639 +
             C31604 * C633 - C7746 * C625 - C31604 * C634 + C32498 * C640) *
                C32680) *
               C5334 +
           ((C31623 * C241 - C7744 * C224 - C31623 * C242 + C32785 * C254 +
             C31604 * C243 - C7746 * C225 - C31604 * C244 + C32498 * C255) *
                C32805 +
            (C31623 * C1083 - C7744 * C1074 - C31623 * C1084 + C32785 * C1101 +
             C31604 * C1449 - C7746 * C1448 - C31604 * C1450 + C32498 * C1451) *
                C32680) *
               C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C32805 +
            (C31623 * C340 - C7744 * C326 - C31623 * C341 + C32785 * C356 +
             C31604 * C338 - C7746 * C325 - C31604 * C339 + C32498 * C355) *
                C32680) *
               C5333 +
           ((C7894 + C7895) * C32805 + (C8477 + C8476) * C32680) * C5334 +
           C8773 * C32835) *
              C32551 * C213 -
          (((C8472 + C8473) * C32680 + (C7899 + C7898) * C32805) * C32835 +
           ((C8474 + C8475) * C32680 + (C7897 + C7896) * C32805) * C5334 +
           ((C8476 + C8477) * C32680 + (C7895 + C7894) * C32805) * C5333) *
              C32551 * C214 +
          (C8773 * C5333 + (C7903 * C32805 + (C8473 + C8472) * C32680) * C5334 +
           ((C7901 + C7900) * C32805 +
            (C31623 * C6395 - C7744 * C6392 - C31623 * C6396 + C32785 * C6401 +
             C31604 * C6605 - C7746 * C6604 - C31604 * C6606 + C32498 * C6607) *
                C32680) *
               C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C32805 +
            (C8968 + C8969) * C32680) *
               C5333 +
           ((C7894 + C7895) * C32805 + (C8477 + C8476) * C32680) * C5334 +
           C8773 * C32835) *
              C319 -
          (((C8970 + C8971) * C32680 + (C8474 + C8475) * C32805) * C32835 +
           ((C8972 + C8973) * C32680 + (C8476 + C8477) * C32805) * C5334 +
           ((C8974 + C8975) * C32680 + (C8969 + C8968) * C32805) * C5333) *
              C320 +
          (((C8975 + C8974) * C32805 +
            (C31623 * C1995 - C7744 * C1987 - C31623 * C1996 + C32785 * C2005 +
             C31604 * C1993 - C7746 * C1986 - C31604 * C1994 + C32498 * C2004) *
                C32680) *
               C5333 +
           ((C8973 + C8972) * C32805 +
            (C31623 * C2565 - C7744 * C2562 - C31623 * C2566 + C32785 * C2571 +
             C31604 * C2567 - C7746 * C2563 - C31604 * C2568 + C32498 * C2572) *
                C32680) *
               C5334 +
           ((C8971 + C8970) * C32805 +
            (C31623 * C7091 - C7744 * C7088 - C31623 * C7092 + C32785 * C7097 +
             C31604 * C7466 - C7746 * C7465 - C31604 * C7467 + C32498 * C7468) *
                C32680) *
               C32835) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
             C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
             C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
             C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
                C32805 +
            (C3750 + C3751 + C3752 + C3753) * C32680) *
               C32581 * C534 -
           ((C3754 + C3755 + C3756 + C3757) * C32680 +
            (C3753 + C3752 + C3751 + C3750) * C32805) *
               C32581 * C535) *
              C32537 * C446 +
          (((C4042 + C4043 + C4044 + C4045) * C32805 +
            (C2699 * C344 - C2700 * C328 - C2699 * C345 + C2693 * C358 +
             C2701 * C346 - C2702 * C329 - C2701 * C347 + C2694 * C359 +
             C2703 * C348 - C2704 * C330 - C2703 * C349 + C2695 * C360 +
             C2705 * C350 - C2706 * C331 - C2705 * C351 + C32803 * C361) *
                C32680) *
               C32581 * C535 -
           ((C4045 + C4044 + C4043 + C4042) * C32680 +
            (C2705 * C138 - C2706 * C127 - C2705 * C139 + C32803 * C148 +
             C2703 * C136 - C2704 * C126 - C2703 * C137 + C2695 * C147 +
             C2701 * C134 - C2702 * C125 - C2701 * C135 + C2694 * C146 +
             C2699 * C132 - C2700 * C124 - C2699 * C133 + C2693 * C145) *
                C32805) *
               C32581 * C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
              C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                 C32805 +
             (C8968 + C8969) * C32680) *
                C5333 +
            ((C7894 + C7895) * C32805 + (C8477 + C8476) * C32680) * C5334 +
            C8773 * C32835) *
               C534 -
           (((C8970 + C8971) * C32680 + (C8474 + C8475) * C32805) * C32835 +
            ((C8972 + C8973) * C32680 + (C8476 + C8477) * C32805) * C5334 +
            ((C8974 + C8975) * C32680 + (C8969 + C8968) * C32805) * C5333) *
               C535) *
              C32537 * C446 +
          ((((C9404 + C9405) * C32805 +
             (C31623 * C344 - C7744 * C328 - C31623 * C345 + C32785 * C358 +
              C31604 * C346 - C7746 * C329 - C31604 * C347 + C32498 * C359) *
                 C32680) *
                C5333 +
            ((C9194 + C9195) * C32805 +
             (C31623 * C1091 - C7744 * C1078 - C31623 * C1092 + C32785 * C1105 +
              C31604 * C1093 - C7746 * C1079 - C31604 * C1094 +
              C32498 * C1106) *
                 C32680) *
                C5334 +
            ((C9196 + C9197) * C32805 +
             (C31623 * C1097 - C7744 * C1081 - C31623 * C1098 + C32785 * C1108 +
              C31604 * C1099 - C7746 * C1082 - C31604 * C1100 +
              C32498 * C1109) *
                 C32680) *
                C32835) *
               C535 -
           (((C9197 + C9196) * C32680 + (C8173 + C8172) * C32805) * C32835 +
            ((C9195 + C9194) * C32680 + (C8171 + C8170) * C32805) * C5334 +
            ((C9405 + C9404) * C32680 +
             (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
              C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
                 C32805) *
                C5333) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
            C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
            C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
            C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
               C32805 +
           (C2699 * C340 - C2700 * C326 - C2699 * C341 + C2693 * C356 +
            C2701 * C338 - C2702 * C325 - C2701 * C339 + C2694 * C355 +
            C2703 * C336 - C2704 * C324 - C2703 * C337 + C2695 * C354 +
            C2705 * C334 - C2706 * C323 - C2705 * C335 + C32803 * C353) *
               C32680) *
              C32581 * C32551 * C32537 * C110 -
          ((C2705 * C332 - C2706 * C322 - C2705 * C333 + C32803 * C352 +
            C2703 * C334 - C2704 * C323 - C2703 * C335 + C2695 * C353 +
            C2701 * C336 - C2702 * C324 - C2701 * C337 + C2694 * C354 +
            C2699 * C338 - C2700 * C325 - C2699 * C339 + C2693 * C355) *
               C32680 +
           (C2705 * C138 - C2706 * C127 - C2705 * C139 + C32803 * C148 +
            C2703 * C136 - C2704 * C126 - C2703 * C137 + C2695 * C147 +
            C2701 * C134 - C2702 * C125 - C2701 * C135 + C2694 * C146 +
            C2699 * C132 - C2700 * C124 - C2699 * C133 + C2693 * C145) *
               C32805) *
              C32581 * C32551 * C32537 * C111 +
          ((C2699 * C134 - C2700 * C125 - C2699 * C135 + C2693 * C146 +
            C2701 * C136 - C2702 * C126 - C2701 * C137 + C2694 * C147 +
            C2703 * C138 - C2704 * C127 - C2703 * C139 + C2695 * C148 +
            C2705 * C140 - C2706 * C128 - C2705 * C141 + C32803 * C149) *
               C32805 +
           (C2699 * C336 - C2700 * C324 - C2699 * C337 + C2693 * C354 +
            C2701 * C334 - C2702 * C323 - C2701 * C335 + C2694 * C353 +
            C2703 * C332 - C2704 * C322 - C2703 * C333 + C2695 * C352 +
            C2705 * C537 - C2706 * C536 - C2705 * C538 + C32803 * C539) *
               C32680) *
              C32581 * C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C2699 * C130 - C2700 * C123 - C2699 * C131 + C2693 * C144 +
            C2701 * C132 - C2702 * C124 - C2701 * C133 + C2694 * C145 +
            C2703 * C134 - C2704 * C125 - C2703 * C135 + C2695 * C146 +
            C2705 * C136 - C2706 * C126 - C2705 * C137 + C32803 * C147) *
               C32805 +
           (C2699 * C340 - C2700 * C326 - C2699 * C341 + C2693 * C356 +
            C2701 * C338 - C2702 * C325 - C2701 * C339 + C2694 * C355 +
            C2703 * C336 - C2704 * C324 - C2703 * C337 + C2695 * C354 +
            C2705 * C334 - C2706 * C323 - C2705 * C335 + C32803 * C353) *
               C32680) *
              C32581 * C32551 * C213 -
          ((C3402 + C3403 + C3404 + C3405) * C32680 +
           (C2857 + C2856 + C2855 + C2854) * C32805) *
              C32581 * C32551 * C214 +
          ((C2861 + C2860 + C2859 + C2858) * C32805 +
           (C2699 * C1087 - C2700 * C1076 - C2699 * C1088 + C2693 * C1103 +
            C2701 * C1085 - C2702 * C1075 - C2701 * C1086 + C2694 * C1102 +
            C2703 * C1083 - C2704 * C1074 - C2703 * C1084 + C2695 * C1101 +
            C2705 * C1449 - C2706 * C1448 - C2705 * C1450 + C32803 * C1451) *
               C32680) *
              C32581 * C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C32805 +
            (C31623 * C340 - C7744 * C326 - C31623 * C341 + C32785 * C356 +
             C31604 * C338 - C7746 * C325 - C31604 * C339 + C32498 * C355) *
                C32680) *
               C5333 +
           ((C7894 + C7895) * C32805 + (C8477 + C8476) * C32680) * C5334 +
           (C7902 * C32805 + (C8475 + C8474) * C32680) * C32835) *
              C32551 * C32537 * C110 -
          (((C31604 * C1083 - C7746 * C1074 - C31604 * C1084 + C32498 * C1101 +
             C31623 * C1085 - C7744 * C1075 - C31623 * C1086 + C32785 * C1102) *
                C32680 +
            (C8173 + C8172) * C32805) *
               C32835 +
           ((C31604 * C631 - C7746 * C624 - C31604 * C632 + C32498 * C639 +
             C31623 * C629 - C7744 * C623 - C31623 * C630 + C32785 * C638) *
                C32680 +
            (C8171 + C8170) * C32805) *
               C5334 +
           ((C31604 * C336 - C7746 * C324 - C31604 * C337 + C32498 * C354 +
             C31623 * C338 - C7744 * C325 - C31623 * C339 + C32785 * C355) *
                C32680 +
            (C31604 * C134 - C7746 * C125 - C31604 * C135 + C32498 * C146 +
             C31623 * C132 - C7744 * C124 - C31623 * C133 + C32785 * C145) *
                C32805) *
               C5333) *
              C32551 * C32537 * C111 +
          (((C31623 * C134 - C7744 * C125 - C31623 * C135 + C32785 * C146 +
             C31604 * C136 - C7746 * C126 - C31604 * C137 + C32498 * C147) *
                C32805 +
            (C31623 * C336 - C7744 * C324 - C31623 * C337 + C32785 * C354 +
             C31604 * C334 - C7746 * C323 - C31604 * C335 + C32498 * C353) *
                C32680) *
               C5333 +
           ((C31623 * C231 - C7744 * C219 - C31623 * C232 + C32785 * C249 +
             C31604 * C229 - C7746 * C218 - C31604 * C230 + C32498 * C248) *
                C32805 +
            (C31623 * C631 - C7744 * C624 - C31623 * C632 + C32785 * C639 +
             C31604 * C633 - C7746 * C625 - C31604 * C634 + C32498 * C640) *
                C32680) *
               C5334 +
           ((C31623 * C241 - C7744 * C224 - C31623 * C242 + C32785 * C254 +
             C31604 * C243 - C7746 * C225 - C31604 * C244 + C32498 * C255) *
                C32805 +
            (C31623 * C1083 - C7744 * C1074 - C31623 * C1084 + C32785 * C1101 +
             C31604 * C1449 - C7746 * C1448 - C31604 * C1450 + C32498 * C1451) *
                C32680) *
               C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C31623 * C130 - C7744 * C123 - C31623 * C131 + C32785 * C144 +
             C31604 * C132 - C7746 * C124 - C31604 * C133 + C32498 * C145) *
                C32805 +
            (C31623 * C340 - C7744 * C326 - C31623 * C341 + C32785 * C356 +
             C31604 * C338 - C7746 * C325 - C31604 * C339 + C32498 * C355) *
                C32680) *
               C5333 +
           ((C7894 + C7895) * C32805 + (C8477 + C8476) * C32680) * C5334 +
           C8773 * C32835) *
              C32551 * C213 -
          (((C8472 + C8473) * C32680 + (C7899 + C7898) * C32805) * C32835 +
           ((C8474 + C8475) * C32680 + (C7897 + C7896) * C32805) * C5334 +
           ((C8476 + C8477) * C32680 + (C7895 + C7894) * C32805) * C5333) *
              C32551 * C214 +
          (C8773 * C5333 + (C7903 * C32805 + (C8473 + C8472) * C32680) * C5334 +
           ((C7901 + C7900) * C32805 +
            (C31623 * C6395 - C7744 * C6392 - C31623 * C6396 + C32785 * C6401 +
             C31604 * C6605 - C7746 * C6604 - C31604 * C6606 + C32498 * C6607) *
                C32680) *
               C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
            C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
            C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
            C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
            C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
               C32593 * C32581 * C32551 * C444 -
           (C121 * C227 - C122 * C217 - C121 * C228 + C105 * C247 +
            C119 * C229 - C120 * C218 - C119 * C230 + C104 * C248 +
            C117 * C231 - C118 * C219 - C117 * C232 + C103 * C249 +
            C115 * C233 - C116 * C220 - C115 * C234 + C102 * C250 +
            C113 * C235 - C114 * C221 - C113 * C236 + C101 * C251) *
               C32593 * C32581 * C32551 * C445) *
              C446 +
          ((C113 * C233 - C114 * C220 - C113 * C234 + C101 * C250 +
            C115 * C231 - C116 * C219 - C115 * C232 + C102 * C249 +
            C117 * C229 - C118 * C218 - C117 * C230 + C103 * C248 +
            C119 * C227 - C120 * C217 - C119 * C228 + C104 * C247 +
            C121 * C449 - C122 * C448 - C121 * C450 + C105 * C451) *
               C32593 * C32581 * C32551 * C445 -
           (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
            C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
            C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
            C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
            C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
               C32593 * C32581 * C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
             C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
             C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                C32593 * C32867 +
            (C953 + C954 + C955) * C32593 * C32855 + C964 * C32835) *
               C32551 * C444 -
           ((C959 + C960 + C961) * C32593 * C32835 +
            (C958 + C957 + C956) * C32593 * C32855 +
            (C955 + C954 + C953) * C32593 * C32867) *
               C32551 * C445) *
              C446 +
          (((C1297 + C1298 + C1299) * C32593 * C32867 +
            (C1300 + C1301 + C1302) * C32593 * C32855 +
            (C758 * C882 - C759 * C875 - C758 * C883 + C752 * C893 +
             C760 * C880 - C761 * C874 - C760 * C881 + C753 * C892 +
             C762 * C1257 - C763 * C1256 - C762 * C1258 + C32826 * C1259) *
                C32593 * C32835) *
               C32551 * C445 -
           ((C1302 + C1301 + C1300) * C32593 * C32835 +
            (C1299 + C1298 + C1297) * C32593 * C32855 +
            (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
             C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
             C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
                C32593 * C32867) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
             C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
             C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                C32593 * C5333 +
            (C5507 + C5508 + C5509) * C32593 * C5334 + C5518 * C32835) *
               C32551 * C444 -
           ((C5513 + C5514 + C5515) * C32593 * C32835 +
            (C5512 + C5511 + C5510) * C32593 * C5334 +
            (C5509 + C5508 + C5507) * C32593 * C5333) *
               C32551 * C445) *
              C446 +
          (((C5811 + C5812 + C5813) * C32593 * C5333 +
            (C5814 + C5815 + C5816) * C32593 * C5334 +
            (C5336 * C882 - C5337 * C875 - C5336 * C883 + C32864 * C893 +
             C5338 * C880 - C5339 * C874 - C5338 * C881 + C32851 * C892 +
             C5340 * C1257 - C5341 * C1256 - C5340 * C1258 + C32826 * C1259) *
                C32593 * C32835) *
               C32551 * C445 -
           ((C5816 + C5815 + C5814) * C32593 * C32835 +
            (C5813 + C5812 + C5811) * C32593 * C5334 +
            (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
             C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
             C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
                C32593 * C5333) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32593 * C6213 +
            C6326 * C6214 + C6327 * C6215 + C6328 * C6216 + C6329 * C6217) *
               C32551 * C444 -
           (C6330 * C6217 + C6329 * C6216 + C6328 * C6215 + C6327 * C6214 +
            C6326 * C6213) *
               C32551 * C445) *
              C446 +
          ((C6519 * C6213 + C6520 * C6214 + C6521 * C6215 + C6522 * C6216 +
            (C6218 * C6487 - C6219 * C6486 - C6218 * C6488 + C32488 * C6489) *
                C32593 * C6217) *
               C32551 * C445 -
           (C6522 * C6217 + C6521 * C6216 + C6520 * C6215 + C6519 * C6214 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C32593 * C6213) *
               C32551 * C444) *
              C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
            C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
            C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
            C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
            C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
               C32593 * C32581 * C534 -
           (C121 * C332 - C122 * C322 - C121 * C333 + C105 * C352 +
            C119 * C334 - C120 * C323 - C119 * C335 + C104 * C353 +
            C117 * C336 - C118 * C324 - C117 * C337 + C103 * C354 +
            C115 * C338 - C116 * C325 - C115 * C339 + C102 * C355 +
            C113 * C340 - C114 * C326 - C113 * C341 + C101 * C356) *
               C32593 * C32581 * C535) *
              C444 +
          ((C113 * C627 - C114 * C622 - C113 * C628 + C101 * C637 +
            C115 * C629 - C116 * C623 - C115 * C630 + C102 * C638 +
            C117 * C631 - C118 * C624 - C117 * C632 + C103 * C639 +
            C119 * C633 - C120 * C625 - C119 * C634 + C104 * C640 +
            C121 * C635 - C122 * C626 - C121 * C636 + C105 * C641) *
               C32593 * C32581 * C535 -
           (C121 * C227 - C122 * C217 - C121 * C228 + C105 * C247 +
            C119 * C229 - C120 * C218 - C119 * C230 + C104 * C248 +
            C117 * C231 - C118 * C219 - C117 * C232 + C103 * C249 +
            C115 * C233 - C116 * C220 - C115 * C234 + C102 * C250 +
            C113 * C235 - C114 * C221 - C113 * C236 + C101 * C251) *
               C32593 * C32581 * C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
             C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
             C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                C32593 * C32867 +
            (C953 + C954 + C955) * C32593 * C32855 + C964 * C32835) *
               C534 -
           ((C1647 + C1648 + C1649) * C32593 * C32835 +
            (C1650 + C1651 + C1652) * C32593 * C32855 +
            (C762 * C336 - C763 * C324 - C762 * C337 + C32826 * C354 +
             C760 * C338 - C761 * C325 - C760 * C339 + C753 * C355 +
             C758 * C340 - C759 * C326 - C758 * C341 + C752 * C356) *
                C32593 * C32867) *
               C535) *
              C444 +
          (((C1652 + C1651 + C1650) * C32593 * C32867 +
            (C1649 + C1648 + C1647) * C32593 * C32855 +
            (C758 * C1601 - C759 * C1598 - C758 * C1602 + C752 * C1607 +
             C760 * C1603 - C761 * C1599 - C760 * C1604 + C753 * C1608 +
             C762 * C1605 - C763 * C1600 - C762 * C1606 + C32826 * C1609) *
                C32593 * C32835) *
               C535 -
           ((C959 + C960 + C961) * C32593 * C32835 +
            (C958 + C957 + C956) * C32593 * C32855 +
            (C955 + C954 + C953) * C32593 * C32867) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
             C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
             C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                C32593 * C5333 +
            (C5507 + C5508 + C5509) * C32593 * C5334 + C5518 * C32835) *
               C534 -
           ((C6145 + C6146 + C6147) * C32593 * C32835 +
            (C6148 + C6149 + C6150) * C32593 * C5334 +
            (C5340 * C336 - C5341 * C324 - C5340 * C337 + C32826 * C354 +
             C5338 * C338 - C5339 * C325 - C5338 * C339 + C32851 * C355 +
             C5336 * C340 - C5337 * C326 - C5336 * C341 + C32864 * C356) *
                C32593 * C5333) *
               C535) *
              C444 +
          (((C6150 + C6149 + C6148) * C32593 * C5333 +
            (C6147 + C6146 + C6145) * C32593 * C5334 +
            (C5336 * C1601 - C5337 * C1598 - C5336 * C1602 + C32864 * C1607 +
             C5338 * C1603 - C5339 * C1599 - C5338 * C1604 + C32851 * C1608 +
             C5340 * C1605 - C5341 * C1600 - C5340 * C1606 + C32826 * C1609) *
                C32593 * C32835) *
               C535 -
           ((C5513 + C5514 + C5515) * C32593 * C32835 +
            (C5512 + C5511 + C5510) * C32593 * C5334 +
            (C5509 + C5508 + C5507) * C32593 * C5333) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32593 * C6213 +
            C6326 * C6214 + C6327 * C6215 + C6328 * C6216 + C6329 * C6217) *
               C534 -
           (C6723 * C6217 + C6724 * C6216 + C6725 * C6215 + C6726 * C6214 +
            (C6218 * C340 - C6219 * C326 - C6218 * C341 + C32488 * C356) *
                C32593 * C6213) *
               C535) *
              C444 +
          ((C6726 * C6213 + C6725 * C6214 + C6724 * C6215 + C6723 * C6216 +
            (C6218 * C6691 - C6219 * C6690 - C6218 * C6692 + C32488 * C6693) *
                C32593 * C6217) *
               C535 -
           (C6330 * C6217 + C6329 * C6216 + C6328 * C6215 + C6327 * C6214 +
            C6326 * C6213) *
               C534) *
              C445) *
         C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 + C115 * C132 -
           C116 * C124 - C115 * C133 + C102 * C145 + C117 * C134 - C118 * C125 -
           C117 * C135 + C103 * C146 + C119 * C136 - C120 * C126 - C119 * C137 +
           C104 * C147 + C121 * C138 - C122 * C127 - C121 * C139 +
           C105 * C148) *
              C32593 * C32581 * C32551 * C213 -
          (C121 * C227 - C122 * C217 - C121 * C228 + C105 * C247 + C119 * C229 -
           C120 * C218 - C119 * C230 + C104 * C248 + C117 * C231 - C118 * C219 -
           C117 * C232 + C103 * C249 + C115 * C233 - C116 * C220 - C115 * C234 +
           C102 * C250 + C113 * C235 - C114 * C221 - C113 * C236 +
           C101 * C251) *
              C32593 * C32581 * C32551 * C214 +
          (C113 * C237 - C114 * C222 - C113 * C238 + C101 * C252 + C115 * C239 -
           C116 * C223 - C115 * C240 + C102 * C253 + C117 * C241 - C118 * C224 -
           C117 * C242 + C103 * C254 + C119 * C243 - C120 * C225 - C119 * C244 +
           C104 * C255 + C121 * C245 - C122 * C226 - C121 * C246 +
           C105 * C256) *
              C32593 * C32581 * C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 + C115 * C132 -
           C116 * C124 - C115 * C133 + C102 * C145 + C117 * C134 - C118 * C125 -
           C117 * C135 + C103 * C146 + C119 * C136 - C120 * C126 - C119 * C137 +
           C104 * C147 + C121 * C138 - C122 * C127 - C121 * C139 +
           C105 * C148) *
              C32593 * C32581 * C32551 * C32537 * C110 -
          (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 + C119 * C138 -
           C120 * C127 - C119 * C139 + C104 * C148 + C117 * C136 - C118 * C126 -
           C117 * C137 + C103 * C147 + C115 * C134 - C116 * C125 - C115 * C135 +
           C102 * C146 + C113 * C132 - C114 * C124 - C113 * C133 +
           C101 * C145) *
              C32593 * C32581 * C32551 * C32537 * C111 +
          (C113 * C134 - C114 * C125 - C113 * C135 + C101 * C146 + C115 * C136 -
           C116 * C126 - C115 * C137 + C102 * C147 + C117 * C138 - C118 * C127 -
           C117 * C139 + C103 * C148 + C119 * C140 - C120 * C128 - C119 * C141 +
           C104 * C149 + C121 * C142 - C122 * C129 - C121 * C143 +
           C105 * C150) *
              C32593 * C32581 * C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 + C115 * C132 -
           C116 * C124 - C115 * C133 + C102 * C145 + C117 * C134 - C118 * C125 -
           C117 * C135 + C103 * C146 + C119 * C136 - C120 * C126 - C119 * C137 +
           C104 * C147 + C121 * C138 - C122 * C127 - C121 * C139 +
           C105 * C148) *
              C32593 * C32581 * C319 -
          (C121 * C332 - C122 * C322 - C121 * C333 + C105 * C352 + C119 * C334 -
           C120 * C323 - C119 * C335 + C104 * C353 + C117 * C336 - C118 * C324 -
           C117 * C337 + C103 * C354 + C115 * C338 - C116 * C325 - C115 * C339 +
           C102 * C355 + C113 * C340 - C114 * C326 - C113 * C341 +
           C101 * C356) *
              C32593 * C32581 * C320 +
          (C113 * C342 - C114 * C327 - C113 * C343 + C101 * C357 + C115 * C344 -
           C116 * C328 - C115 * C345 + C102 * C358 + C117 * C346 - C118 * C329 -
           C117 * C347 + C103 * C359 + C119 * C348 - C120 * C330 - C119 * C349 +
           C104 * C360 + C121 * C350 - C122 * C331 - C121 * C351 +
           C105 * C361) *
              C32593 * C32581 * C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
            C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
            C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
               C32593 * C32867 +
           (C758 * C235 - C759 * C221 - C758 * C236 + C752 * C251 +
            C760 * C233 - C761 * C220 - C760 * C234 + C753 * C250 +
            C762 * C231 - C763 * C219 - C762 * C232 + C32826 * C249) *
               C32593 * C32855 +
           (C758 * C237 - C759 * C222 - C758 * C238 + C752 * C252 +
            C760 * C239 - C761 * C223 - C760 * C240 + C753 * C253 +
            C762 * C241 - C763 * C224 - C762 * C242 + C32826 * C254) *
               C32593 * C32835) *
              C32551 * C32537 * C110 -
          ((C762 * C243 - C763 * C225 - C762 * C244 + C32826 * C255 +
            C760 * C241 - C761 * C224 - C760 * C242 + C753 * C254 +
            C758 * C239 - C759 * C223 - C758 * C240 + C752 * C253) *
               C32593 * C32835 +
           (C762 * C229 - C763 * C218 - C762 * C230 + C32826 * C248 +
            C760 * C231 - C761 * C219 - C760 * C232 + C753 * C249 +
            C758 * C233 - C759 * C220 - C758 * C234 + C752 * C250) *
               C32593 * C32855 +
           (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
            C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
            C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
               C32593 * C32867) *
              C32551 * C32537 * C111 +
          ((C758 * C134 - C759 * C125 - C758 * C135 + C752 * C146 +
            C760 * C136 - C761 * C126 - C760 * C137 + C753 * C147 +
            C762 * C138 - C763 * C127 - C762 * C139 + C32826 * C148) *
               C32593 * C32867 +
           (C758 * C231 - C759 * C219 - C758 * C232 + C752 * C249 +
            C760 * C229 - C761 * C218 - C760 * C230 + C753 * C248 +
            C762 * C227 - C763 * C217 - C762 * C228 + C32826 * C247) *
               C32593 * C32855 +
           (C758 * C241 - C759 * C224 - C758 * C242 + C752 * C254 +
            C760 * C243 - C761 * C225 - C760 * C244 + C753 * C255 +
            C762 * C245 - C763 * C226 - C762 * C246 + C32826 * C256) *
               C32593 * C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
            C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
            C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
               C32593 * C32867 +
           (C953 + C954 + C955) * C32593 * C32855 + C964 * C32835) *
              C32551 * C213 -
          ((C959 + C960 + C961) * C32593 * C32835 +
           (C958 + C957 + C956) * C32593 * C32855 +
           (C955 + C954 + C953) * C32593 * C32867) *
              C32551 * C214 +
          (C964 * C32867 + (C961 + C960 + C959) * C32593 * C32855 +
           (C758 * C886 - C759 * C877 - C758 * C887 + C752 * C895 +
            C760 * C888 - C761 * C878 - C760 * C889 + C753 * C896 +
            C762 * C890 - C763 * C879 - C762 * C891 + C32826 * C897) *
               C32593 * C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
            C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
            C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
               C32593 * C32867 +
           (C953 + C954 + C955) * C32593 * C32855 + C964 * C32835) *
              C319 -
          ((C762 * C1083 - C763 * C1074 - C762 * C1084 + C32826 * C1101 +
            C760 * C1085 - C761 * C1075 - C760 * C1086 + C753 * C1102 +
            C758 * C1087 - C759 * C1076 - C758 * C1088 + C752 * C1103) *
               C32593 * C32835 +
           (C762 * C631 - C763 * C624 - C762 * C632 + C32826 * C639 +
            C760 * C629 - C761 * C623 - C760 * C630 + C753 * C638 +
            C758 * C627 - C759 * C622 - C758 * C628 + C752 * C637) *
               C32593 * C32855 +
           (C762 * C336 - C763 * C324 - C762 * C337 + C32826 * C354 +
            C760 * C338 - C761 * C325 - C760 * C339 + C753 * C355 +
            C758 * C340 - C759 * C326 - C758 * C341 + C752 * C356) *
               C32593 * C32867) *
              C320 +
          ((C758 * C342 - C759 * C327 - C758 * C343 + C752 * C357 +
            C760 * C344 - C761 * C328 - C760 * C345 + C753 * C358 +
            C762 * C346 - C763 * C329 - C762 * C347 + C32826 * C359) *
               C32593 * C32867 +
           (C758 * C1089 - C759 * C1077 - C758 * C1090 + C752 * C1104 +
            C760 * C1091 - C761 * C1078 - C760 * C1092 + C753 * C1105 +
            C762 * C1093 - C763 * C1079 - C762 * C1094 + C32826 * C1106) *
               C32593 * C32855 +
           (C758 * C1095 - C759 * C1080 - C758 * C1096 + C752 * C1107 +
            C760 * C1097 - C761 * C1081 - C760 * C1098 + C753 * C1108 +
            C762 * C1099 - C763 * C1082 - C762 * C1100 + C32826 * C1109) *
               C32593 * C32835) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C32593 * C5333 +
           (C5336 * C235 - C5337 * C221 - C5336 * C236 + C32864 * C251 +
            C5338 * C233 - C5339 * C220 - C5338 * C234 + C32851 * C250 +
            C5340 * C231 - C5341 * C219 - C5340 * C232 + C32826 * C249) *
               C32593 * C5334 +
           (C5336 * C237 - C5337 * C222 - C5336 * C238 + C32864 * C252 +
            C5338 * C239 - C5339 * C223 - C5338 * C240 + C32851 * C253 +
            C5340 * C241 - C5341 * C224 - C5340 * C242 + C32826 * C254) *
               C32593 * C32835) *
              C32551 * C32537 * C110 -
          ((C5340 * C243 - C5341 * C225 - C5340 * C244 + C32826 * C255 +
            C5338 * C241 - C5339 * C224 - C5338 * C242 + C32851 * C254 +
            C5336 * C239 - C5337 * C223 - C5336 * C240 + C32864 * C253) *
               C32593 * C32835 +
           (C5340 * C229 - C5341 * C218 - C5340 * C230 + C32826 * C248 +
            C5338 * C231 - C5339 * C219 - C5338 * C232 + C32851 * C249 +
            C5336 * C233 - C5337 * C220 - C5336 * C234 + C32864 * C250) *
               C32593 * C5334 +
           (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
            C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
            C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
               C32593 * C5333) *
              C32551 * C32537 * C111 +
          ((C5336 * C134 - C5337 * C125 - C5336 * C135 + C32864 * C146 +
            C5338 * C136 - C5339 * C126 - C5338 * C137 + C32851 * C147 +
            C5340 * C138 - C5341 * C127 - C5340 * C139 + C32826 * C148) *
               C32593 * C5333 +
           (C5336 * C231 - C5337 * C219 - C5336 * C232 + C32864 * C249 +
            C5338 * C229 - C5339 * C218 - C5338 * C230 + C32851 * C248 +
            C5340 * C227 - C5341 * C217 - C5340 * C228 + C32826 * C247) *
               C32593 * C5334 +
           (C5336 * C241 - C5337 * C224 - C5336 * C242 + C32864 * C254 +
            C5338 * C243 - C5339 * C225 - C5338 * C244 + C32851 * C255 +
            C5340 * C245 - C5341 * C226 - C5340 * C246 + C32826 * C256) *
               C32593 * C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C32593 * C5333 +
           (C5507 + C5508 + C5509) * C32593 * C5334 + C5518 * C32835) *
              C32551 * C213 -
          ((C5513 + C5514 + C5515) * C32593 * C32835 +
           (C5512 + C5511 + C5510) * C32593 * C5334 +
           (C5509 + C5508 + C5507) * C32593 * C5333) *
              C32551 * C214 +
          (C5518 * C5333 + (C5515 + C5514 + C5513) * C32593 * C5334 +
           (C5336 * C886 - C5337 * C877 - C5336 * C887 + C32864 * C895 +
            C5338 * C888 - C5339 * C878 - C5338 * C889 + C32851 * C896 +
            C5340 * C890 - C5341 * C879 - C5340 * C891 + C32826 * C897) *
               C32593 * C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C32593 * C5333 +
           (C5507 + C5508 + C5509) * C32593 * C5334 + C5518 * C32835) *
              C319 -
          ((C5340 * C1083 - C5341 * C1074 - C5340 * C1084 + C32826 * C1101 +
            C5338 * C1085 - C5339 * C1075 - C5338 * C1086 + C32851 * C1102 +
            C5336 * C1087 - C5337 * C1076 - C5336 * C1088 + C32864 * C1103) *
               C32593 * C32835 +
           (C5340 * C631 - C5341 * C624 - C5340 * C632 + C32826 * C639 +
            C5338 * C629 - C5339 * C623 - C5338 * C630 + C32851 * C638 +
            C5336 * C627 - C5337 * C622 - C5336 * C628 + C32864 * C637) *
               C32593 * C5334 +
           (C5340 * C336 - C5341 * C324 - C5340 * C337 + C32826 * C354 +
            C5338 * C338 - C5339 * C325 - C5338 * C339 + C32851 * C355 +
            C5336 * C340 - C5337 * C326 - C5336 * C341 + C32864 * C356) *
               C32593 * C5333) *
              C320 +
          ((C5336 * C342 - C5337 * C327 - C5336 * C343 + C32864 * C357 +
            C5338 * C344 - C5339 * C328 - C5338 * C345 + C32851 * C358 +
            C5340 * C346 - C5341 * C329 - C5340 * C347 + C32826 * C359) *
               C32593 * C5333 +
           (C5336 * C1089 - C5337 * C1077 - C5336 * C1090 + C32864 * C1104 +
            C5338 * C1091 - C5339 * C1078 - C5338 * C1092 + C32851 * C1105 +
            C5340 * C1093 - C5341 * C1079 - C5340 * C1094 + C32826 * C1106) *
               C32593 * C5334 +
           (C5336 * C1095 - C5337 * C1080 - C5336 * C1096 + C32864 * C1107 +
            C5338 * C1097 - C5339 * C1081 - C5338 * C1098 + C32851 * C1108 +
            C5340 * C1099 - C5341 * C1082 - C5340 * C1100 + C32826 * C1109) *
               C32593 * C32835) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
               C32593 * C6213 +
           (C6218 * C235 - C6219 * C221 - C6218 * C236 + C32488 * C251) *
               C32593 * C6214 +
           (C6218 * C237 - C6219 * C222 - C6218 * C238 + C32488 * C252) *
               C32593 * C6215 +
           (C6218 * C884 - C6219 * C876 - C6218 * C885 + C32488 * C894) *
               C32593 * C6216 +
           (C6218 * C886 - C6219 * C877 - C6218 * C887 + C32488 * C895) *
               C32593 * C6217) *
              C32551 * C32537 * C110 -
          ((C6218 * C888 - C6219 * C878 - C6218 * C889 + C32488 * C896) *
               C32593 * C6217 +
           (C6218 * C882 - C6219 * C875 - C6218 * C883 + C32488 * C893) *
               C32593 * C6216 +
           (C6218 * C239 - C6219 * C223 - C6218 * C240 + C32488 * C253) *
               C32593 * C6215 +
           (C6218 * C233 - C6219 * C220 - C6218 * C234 + C32488 * C250) *
               C32593 * C6214 +
           (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
               C32593 * C6213) *
              C32551 * C32537 * C111 +
          ((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
               C32593 * C6213 +
           (C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
               C32593 * C6214 +
           (C6218 * C241 - C6219 * C224 - C6218 * C242 + C32488 * C254) *
               C32593 * C6215 +
           (C6218 * C880 - C6219 * C874 - C6218 * C881 + C32488 * C892) *
               C32593 * C6216 +
           (C6218 * C890 - C6219 * C879 - C6218 * C891 + C32488 * C897) *
               C32593 * C6217) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
               C32593 * C6213 +
           C6326 * C6214 + C6327 * C6215 + C6328 * C6216 + C6329 * C6217) *
              C32551 * C213 -
          (C6330 * C6217 + C6329 * C6216 + C6328 * C6215 + C6327 * C6214 +
           C6326 * C6213) *
              C32551 * C214 +
          (C6327 * C6213 + C6328 * C6214 + C6329 * C6215 + C6330 * C6216 +
           (C6218 * C6286 - C6219 * C6283 - C6218 * C6287 + C32488 * C6289) *
               C32593 * C6217) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
               C32593 * C6213 +
           C6326 * C6214 + C6327 * C6215 + C6328 * C6216 + C6329 * C6217) *
              C319 -
          ((C6218 * C6395 - C6219 * C6392 - C6218 * C6396 + C32488 * C6401) *
               C32593 * C6217 +
           (C6218 * C1601 - C6219 * C1598 - C6218 * C1602 + C32488 * C1607) *
               C32593 * C6216 +
           (C6218 * C1087 - C6219 * C1076 - C6218 * C1088 + C32488 * C1103) *
               C32593 * C6215 +
           (C6218 * C627 - C6219 * C622 - C6218 * C628 + C32488 * C637) *
               C32593 * C6214 +
           (C6218 * C340 - C6219 * C326 - C6218 * C341 + C32488 * C356) *
               C32593 * C6213) *
              C320 +
          ((C6218 * C342 - C6219 * C327 - C6218 * C343 + C32488 * C357) *
               C32593 * C6213 +
           (C6218 * C1089 - C6219 * C1077 - C6218 * C1090 + C32488 * C1104) *
               C32593 * C6214 +
           (C6218 * C1095 - C6219 * C1080 - C6218 * C1096 + C32488 * C1107) *
               C32593 * C6215 +
           (C6218 * C6397 - C6219 * C6393 - C6218 * C6398 + C32488 * C6402) *
               C32593 * C6216 +
           (C6218 * C6399 - C6219 * C6394 - C6218 * C6400 + C32488 * C6403) *
               C32593 * C6217) *
              C321) *
         C32537 * C32525) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
            C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
            C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
            C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
            C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
               C32593 * C32581 * C534 -
           (C121 * C332 - C122 * C322 - C121 * C333 + C105 * C352 +
            C119 * C334 - C120 * C323 - C119 * C335 + C104 * C353 +
            C117 * C336 - C118 * C324 - C117 * C337 + C103 * C354 +
            C115 * C338 - C116 * C325 - C115 * C339 + C102 * C355 +
            C113 * C340 - C114 * C326 - C113 * C341 + C101 * C356) *
               C32593 * C32581 * C535) *
              C32537 * C446 +
          ((C113 * C338 - C114 * C325 - C113 * C339 + C101 * C355 +
            C115 * C336 - C116 * C324 - C115 * C337 + C102 * C354 +
            C117 * C334 - C118 * C323 - C117 * C335 + C103 * C353 +
            C119 * C332 - C120 * C322 - C119 * C333 + C104 * C352 +
            C121 * C537 - C122 * C536 - C121 * C538 + C105 * C539) *
               C32593 * C32581 * C535 -
           (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
            C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
            C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
            C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
            C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
               C32593 * C32581 * C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
             C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
             C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
                C32593 * C32867 +
            (C953 + C954 + C955) * C32593 * C32855 + C964 * C32835) *
               C534 -
           ((C762 * C1083 - C763 * C1074 - C762 * C1084 + C32826 * C1101 +
             C760 * C1085 - C761 * C1075 - C760 * C1086 + C753 * C1102 +
             C758 * C1087 - C759 * C1076 - C758 * C1088 + C752 * C1103) *
                C32593 * C32835 +
            (C762 * C631 - C763 * C624 - C762 * C632 + C32826 * C639 +
             C760 * C629 - C761 * C623 - C760 * C630 + C753 * C638 +
             C758 * C627 - C759 * C622 - C758 * C628 + C752 * C637) *
                C32593 * C32855 +
            (C762 * C336 - C763 * C324 - C762 * C337 + C32826 * C354 +
             C760 * C338 - C761 * C325 - C760 * C339 + C753 * C355 +
             C758 * C340 - C759 * C326 - C758 * C341 + C752 * C356) *
                C32593 * C32867) *
               C535) *
              C32537 * C446 +
          (((C758 * C338 - C759 * C325 - C758 * C339 + C752 * C355 +
             C760 * C336 - C761 * C324 - C760 * C337 + C753 * C354 +
             C762 * C334 - C763 * C323 - C762 * C335 + C32826 * C353) *
                C32593 * C32867 +
            (C758 * C629 - C759 * C623 - C758 * C630 + C752 * C638 +
             C760 * C631 - C761 * C624 - C760 * C632 + C753 * C639 +
             C762 * C633 - C763 * C625 - C762 * C634 + C32826 * C640) *
                C32593 * C32855 +
            (C758 * C1085 - C759 * C1075 - C758 * C1086 + C752 * C1102 +
             C760 * C1083 - C761 * C1074 - C760 * C1084 + C753 * C1101 +
             C762 * C1449 - C763 * C1448 - C762 * C1450 + C32826 * C1451) *
                C32593 * C32835) *
               C535 -
           ((C1302 + C1301 + C1300) * C32593 * C32835 +
            (C1299 + C1298 + C1297) * C32593 * C32855 +
            (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
             C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
             C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
                C32593 * C32867) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
             C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
             C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
                C32593 * C5333 +
            (C5507 + C5508 + C5509) * C32593 * C5334 + C5518 * C32835) *
               C534 -
           ((C5340 * C1083 - C5341 * C1074 - C5340 * C1084 + C32826 * C1101 +
             C5338 * C1085 - C5339 * C1075 - C5338 * C1086 + C32851 * C1102 +
             C5336 * C1087 - C5337 * C1076 - C5336 * C1088 + C32864 * C1103) *
                C32593 * C32835 +
            (C5340 * C631 - C5341 * C624 - C5340 * C632 + C32826 * C639 +
             C5338 * C629 - C5339 * C623 - C5338 * C630 + C32851 * C638 +
             C5336 * C627 - C5337 * C622 - C5336 * C628 + C32864 * C637) *
                C32593 * C5334 +
            (C5340 * C336 - C5341 * C324 - C5340 * C337 + C32826 * C354 +
             C5338 * C338 - C5339 * C325 - C5338 * C339 + C32851 * C355 +
             C5336 * C340 - C5337 * C326 - C5336 * C341 + C32864 * C356) *
                C32593 * C5333) *
               C535) *
              C32537 * C446 +
          (((C5336 * C338 - C5337 * C325 - C5336 * C339 + C32864 * C355 +
             C5338 * C336 - C5339 * C324 - C5338 * C337 + C32851 * C354 +
             C5340 * C334 - C5341 * C323 - C5340 * C335 + C32826 * C353) *
                C32593 * C5333 +
            (C5336 * C629 - C5337 * C623 - C5336 * C630 + C32864 * C638 +
             C5338 * C631 - C5339 * C624 - C5338 * C632 + C32851 * C639 +
             C5340 * C633 - C5341 * C625 - C5340 * C634 + C32826 * C640) *
                C32593 * C5334 +
            (C5336 * C1085 - C5337 * C1075 - C5336 * C1086 + C32864 * C1102 +
             C5338 * C1083 - C5339 * C1074 - C5338 * C1084 + C32851 * C1101 +
             C5340 * C1449 - C5341 * C1448 - C5340 * C1450 + C32826 * C1451) *
                C32593 * C32835) *
               C535 -
           ((C5816 + C5815 + C5814) * C32593 * C32835 +
            (C5813 + C5812 + C5811) * C32593 * C5334 +
            (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
             C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
             C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
                C32593 * C5333) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
                C32593 * C6213 +
            C6326 * C6214 + C6327 * C6215 + C6328 * C6216 + C6329 * C6217) *
               C534 -
           ((C6218 * C6395 - C6219 * C6392 - C6218 * C6396 + C32488 * C6401) *
                C32593 * C6217 +
            (C6218 * C1601 - C6219 * C1598 - C6218 * C1602 + C32488 * C1607) *
                C32593 * C6216 +
            (C6218 * C1087 - C6219 * C1076 - C6218 * C1088 + C32488 * C1103) *
                C32593 * C6215 +
            (C6218 * C627 - C6219 * C622 - C6218 * C628 + C32488 * C637) *
                C32593 * C6214 +
            (C6218 * C340 - C6219 * C326 - C6218 * C341 + C32488 * C356) *
                C32593 * C6213) *
               C535) *
              C32537 * C446 +
          (((C6218 * C338 - C6219 * C325 - C6218 * C339 + C32488 * C355) *
                C32593 * C6213 +
            (C6218 * C629 - C6219 * C623 - C6218 * C630 + C32488 * C638) *
                C32593 * C6214 +
            (C6218 * C1085 - C6219 * C1075 - C6218 * C1086 + C32488 * C1102) *
                C32593 * C6215 +
            (C6218 * C1603 - C6219 * C1599 - C6218 * C1604 + C32488 * C1608) *
                C32593 * C6216 +
            (C6218 * C6605 - C6219 * C6604 - C6218 * C6606 + C32488 * C6607) *
                C32593 * C6217) *
               C535 -
           (C6522 * C6217 + C6521 * C6216 + C6520 * C6215 + C6519 * C6214 +
            (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
                C32593 * C6213) *
               C534) *
              C32537 * C447)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 + C115 * C132 -
           C116 * C124 - C115 * C133 + C102 * C145 + C117 * C134 - C118 * C125 -
           C117 * C135 + C103 * C146 + C119 * C136 - C120 * C126 - C119 * C137 +
           C104 * C147 + C121 * C138 - C122 * C127 - C121 * C139 +
           C105 * C148) *
              C32593 * C32581 * C32551 * C32537 * C110 -
          (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 + C119 * C138 -
           C120 * C127 - C119 * C139 + C104 * C148 + C117 * C136 - C118 * C126 -
           C117 * C137 + C103 * C147 + C115 * C134 - C116 * C125 - C115 * C135 +
           C102 * C146 + C113 * C132 - C114 * C124 - C113 * C133 +
           C101 * C145) *
              C32593 * C32581 * C32551 * C32537 * C111 +
          (C113 * C134 - C114 * C125 - C113 * C135 + C101 * C146 + C115 * C136 -
           C116 * C126 - C115 * C137 + C102 * C147 + C117 * C138 - C118 * C127 -
           C117 * C139 + C103 * C148 + C119 * C140 - C120 * C128 - C119 * C141 +
           C104 * C149 + C121 * C142 - C122 * C129 - C121 * C143 +
           C105 * C150) *
              C32593 * C32581 * C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 + C115 * C132 -
           C116 * C124 - C115 * C133 + C102 * C145 + C117 * C134 - C118 * C125 -
           C117 * C135 + C103 * C146 + C119 * C136 - C120 * C126 - C119 * C137 +
           C104 * C147 + C121 * C138 - C122 * C127 - C121 * C139 +
           C105 * C148) *
              C32593 * C32581 * C32551 * C213 -
          (C121 * C227 - C122 * C217 - C121 * C228 + C105 * C247 + C119 * C229 -
           C120 * C218 - C119 * C230 + C104 * C248 + C117 * C231 - C118 * C219 -
           C117 * C232 + C103 * C249 + C115 * C233 - C116 * C220 - C115 * C234 +
           C102 * C250 + C113 * C235 - C114 * C221 - C113 * C236 +
           C101 * C251) *
              C32593 * C32581 * C32551 * C214 +
          (C113 * C237 - C114 * C222 - C113 * C238 + C101 * C252 + C115 * C239 -
           C116 * C223 - C115 * C240 + C102 * C253 + C117 * C241 - C118 * C224 -
           C117 * C242 + C103 * C254 + C119 * C243 - C120 * C225 - C119 * C244 +
           C104 * C255 + C121 * C245 - C122 * C226 - C121 * C246 +
           C105 * C256) *
              C32593 * C32581 * C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
            C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
            C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
               C32593 * C32867 +
           (C758 * C235 - C759 * C221 - C758 * C236 + C752 * C251 +
            C760 * C233 - C761 * C220 - C760 * C234 + C753 * C250 +
            C762 * C231 - C763 * C219 - C762 * C232 + C32826 * C249) *
               C32593 * C32855 +
           (C758 * C237 - C759 * C222 - C758 * C238 + C752 * C252 +
            C760 * C239 - C761 * C223 - C760 * C240 + C753 * C253 +
            C762 * C241 - C763 * C224 - C762 * C242 + C32826 * C254) *
               C32593 * C32835) *
              C32551 * C32537 * C110 -
          ((C762 * C243 - C763 * C225 - C762 * C244 + C32826 * C255 +
            C760 * C241 - C761 * C224 - C760 * C242 + C753 * C254 +
            C758 * C239 - C759 * C223 - C758 * C240 + C752 * C253) *
               C32593 * C32835 +
           (C762 * C229 - C763 * C218 - C762 * C230 + C32826 * C248 +
            C760 * C231 - C761 * C219 - C760 * C232 + C753 * C249 +
            C758 * C233 - C759 * C220 - C758 * C234 + C752 * C250) *
               C32593 * C32855 +
           (C762 * C136 - C763 * C126 - C762 * C137 + C32826 * C147 +
            C760 * C134 - C761 * C125 - C760 * C135 + C753 * C146 +
            C758 * C132 - C759 * C124 - C758 * C133 + C752 * C145) *
               C32593 * C32867) *
              C32551 * C32537 * C111 +
          ((C758 * C134 - C759 * C125 - C758 * C135 + C752 * C146 +
            C760 * C136 - C761 * C126 - C760 * C137 + C753 * C147 +
            C762 * C138 - C763 * C127 - C762 * C139 + C32826 * C148) *
               C32593 * C32867 +
           (C758 * C231 - C759 * C219 - C758 * C232 + C752 * C249 +
            C760 * C229 - C761 * C218 - C760 * C230 + C753 * C248 +
            C762 * C227 - C763 * C217 - C762 * C228 + C32826 * C247) *
               C32593 * C32855 +
           (C758 * C241 - C759 * C224 - C758 * C242 + C752 * C254 +
            C760 * C243 - C761 * C225 - C760 * C244 + C753 * C255 +
            C762 * C245 - C763 * C226 - C762 * C246 + C32826 * C256) *
               C32593 * C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C758 * C130 - C759 * C123 - C758 * C131 + C752 * C144 +
            C760 * C132 - C761 * C124 - C760 * C133 + C753 * C145 +
            C762 * C134 - C763 * C125 - C762 * C135 + C32826 * C146) *
               C32593 * C32867 +
           (C953 + C954 + C955) * C32593 * C32855 + C964 * C32835) *
              C32551 * C213 -
          ((C959 + C960 + C961) * C32593 * C32835 +
           (C958 + C957 + C956) * C32593 * C32855 +
           (C955 + C954 + C953) * C32593 * C32867) *
              C32551 * C214 +
          (C964 * C32867 + (C961 + C960 + C959) * C32593 * C32855 +
           (C758 * C886 - C759 * C877 - C758 * C887 + C752 * C895 +
            C760 * C888 - C761 * C878 - C760 * C889 + C753 * C896 +
            C762 * C890 - C763 * C879 - C762 * C891 + C32826 * C897) *
               C32593 * C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C32593 * C5333 +
           (C5336 * C235 - C5337 * C221 - C5336 * C236 + C32864 * C251 +
            C5338 * C233 - C5339 * C220 - C5338 * C234 + C32851 * C250 +
            C5340 * C231 - C5341 * C219 - C5340 * C232 + C32826 * C249) *
               C32593 * C5334 +
           (C5336 * C237 - C5337 * C222 - C5336 * C238 + C32864 * C252 +
            C5338 * C239 - C5339 * C223 - C5338 * C240 + C32851 * C253 +
            C5340 * C241 - C5341 * C224 - C5340 * C242 + C32826 * C254) *
               C32593 * C32835) *
              C32551 * C32537 * C110 -
          ((C5340 * C243 - C5341 * C225 - C5340 * C244 + C32826 * C255 +
            C5338 * C241 - C5339 * C224 - C5338 * C242 + C32851 * C254 +
            C5336 * C239 - C5337 * C223 - C5336 * C240 + C32864 * C253) *
               C32593 * C32835 +
           (C5340 * C229 - C5341 * C218 - C5340 * C230 + C32826 * C248 +
            C5338 * C231 - C5339 * C219 - C5338 * C232 + C32851 * C249 +
            C5336 * C233 - C5337 * C220 - C5336 * C234 + C32864 * C250) *
               C32593 * C5334 +
           (C5340 * C136 - C5341 * C126 - C5340 * C137 + C32826 * C147 +
            C5338 * C134 - C5339 * C125 - C5338 * C135 + C32851 * C146 +
            C5336 * C132 - C5337 * C124 - C5336 * C133 + C32864 * C145) *
               C32593 * C5333) *
              C32551 * C32537 * C111 +
          ((C5336 * C134 - C5337 * C125 - C5336 * C135 + C32864 * C146 +
            C5338 * C136 - C5339 * C126 - C5338 * C137 + C32851 * C147 +
            C5340 * C138 - C5341 * C127 - C5340 * C139 + C32826 * C148) *
               C32593 * C5333 +
           (C5336 * C231 - C5337 * C219 - C5336 * C232 + C32864 * C249 +
            C5338 * C229 - C5339 * C218 - C5338 * C230 + C32851 * C248 +
            C5340 * C227 - C5341 * C217 - C5340 * C228 + C32826 * C247) *
               C32593 * C5334 +
           (C5336 * C241 - C5337 * C224 - C5336 * C242 + C32864 * C254 +
            C5338 * C243 - C5339 * C225 - C5338 * C244 + C32851 * C255 +
            C5340 * C245 - C5341 * C226 - C5340 * C246 + C32826 * C256) *
               C32593 * C32835) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C5336 * C130 - C5337 * C123 - C5336 * C131 + C32864 * C144 +
            C5338 * C132 - C5339 * C124 - C5338 * C133 + C32851 * C145 +
            C5340 * C134 - C5341 * C125 - C5340 * C135 + C32826 * C146) *
               C32593 * C5333 +
           (C5507 + C5508 + C5509) * C32593 * C5334 + C5518 * C32835) *
              C32551 * C213 -
          ((C5513 + C5514 + C5515) * C32593 * C32835 +
           (C5512 + C5511 + C5510) * C32593 * C5334 +
           (C5509 + C5508 + C5507) * C32593 * C5333) *
              C32551 * C214 +
          (C5518 * C5333 + (C5515 + C5514 + C5513) * C32593 * C5334 +
           (C5336 * C886 - C5337 * C877 - C5336 * C887 + C32864 * C895 +
            C5338 * C888 - C5339 * C878 - C5338 * C889 + C32851 * C896 +
            C5340 * C890 - C5341 * C879 - C5340 * C891 + C32826 * C897) *
               C32593 * C32835) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
               C32593 * C6213 +
           (C6218 * C235 - C6219 * C221 - C6218 * C236 + C32488 * C251) *
               C32593 * C6214 +
           (C6218 * C237 - C6219 * C222 - C6218 * C238 + C32488 * C252) *
               C32593 * C6215 +
           (C6218 * C884 - C6219 * C876 - C6218 * C885 + C32488 * C894) *
               C32593 * C6216 +
           (C6218 * C886 - C6219 * C877 - C6218 * C887 + C32488 * C895) *
               C32593 * C6217) *
              C32551 * C32537 * C110 -
          ((C6218 * C888 - C6219 * C878 - C6218 * C889 + C32488 * C896) *
               C32593 * C6217 +
           (C6218 * C882 - C6219 * C875 - C6218 * C883 + C32488 * C893) *
               C32593 * C6216 +
           (C6218 * C239 - C6219 * C223 - C6218 * C240 + C32488 * C253) *
               C32593 * C6215 +
           (C6218 * C233 - C6219 * C220 - C6218 * C234 + C32488 * C250) *
               C32593 * C6214 +
           (C6218 * C132 - C6219 * C124 - C6218 * C133 + C32488 * C145) *
               C32593 * C6213) *
              C32551 * C32537 * C111 +
          ((C6218 * C134 - C6219 * C125 - C6218 * C135 + C32488 * C146) *
               C32593 * C6213 +
           (C6218 * C231 - C6219 * C219 - C6218 * C232 + C32488 * C249) *
               C32593 * C6214 +
           (C6218 * C241 - C6219 * C224 - C6218 * C242 + C32488 * C254) *
               C32593 * C6215 +
           (C6218 * C880 - C6219 * C874 - C6218 * C881 + C32488 * C892) *
               C32593 * C6216 +
           (C6218 * C890 - C6219 * C879 - C6218 * C891 + C32488 * C897) *
               C32593 * C6217) *
              C32551 * C32537 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C6218 * C130 - C6219 * C123 - C6218 * C131 + C32488 * C144) *
               C32593 * C6213 +
           C6326 * C6214 + C6327 * C6215 + C6328 * C6216 + C6329 * C6217) *
              C32551 * C213 -
          (C6330 * C6217 + C6329 * C6216 + C6328 * C6215 + C6327 * C6214 +
           C6326 * C6213) *
              C32551 * C214 +
          (C6327 * C6213 + C6328 * C6214 + C6329 * C6215 + C6330 * C6216 +
           (C6218 * C6286 - C6219 * C6283 - C6218 * C6287 + C32488 * C6289) *
               C32593 * C6217) *
              C32551 * C215) *
         C32525) /
            (p * q * std::sqrt(p + q));
}
