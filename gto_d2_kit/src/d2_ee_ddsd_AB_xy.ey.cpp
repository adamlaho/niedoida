/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ddsd_AB_xy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_2202_12_12(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C30834 = 0 * ae;
    const double C30833 = ae * be;
    const double C30832 = 0 * be;
    const double C30831 = 0 * be;
    const double C30830 = ae + be;
    const double C30829 = 0 * be;
    const double C30828 = xA - xB;
    const double C30889 = 0 * be;
    const double C30907 = 0 * be;
    const double C30906 = yA - yB;
    const double C30963 = 0 * ae;
    const double C30958 = 0 * be;
    const double C30957 = 0 * be;
    const double C31008 = 0 * be;
    const double C31074 = xP - xQ;
    const double C31073 = yP - yQ;
    const double C31072 = p + q;
    const double C31071 = p * q;
    const double C31079 = bs[3];
    const double C31089 = bs[4];
    const double C31098 = bs[5];
    const double C31112 = bs[6];
    const double C31134 = bs[7];
    const double C31287 = zP - zQ;
    const double C31384 = bs[2];
    const double C119 = bs[0];
    const double C31782 = ce + de;
    const double C31781 = ce * de;
    const double C31780 = xC - xD;
    const double C31794 = yC - yD;
    const double C31808 = zC - zD;
    const double C31849 = zA - zB;
    const double C30841 = C30834 / C30830;
    const double C30838 = C30832 / C30830;
    const double C30836 = 2 * C30830;
    const double C30835 = std::pow(C30830, 2);
    const double C30840 = C30833 * C30828;
    const double C30839 = C30828 * C30832;
    const double C30837 = C30828 * C30831;
    const double C31748 = C30828 * be;
    const double C31747 = C30828 * ae;
    const double C31746 = std::pow(C30828, 2);
    const double C30890 = C30889 / C30830;
    const double C30959 = C30907 / C30830;
    const double C30908 = C30833 * C30906;
    const double C30960 = C30906 * C30907;
    const double C31832 = std::pow(C30906, 2);
    const double C31891 = C30906 * be;
    const double C31889 = C30906 * ae;
    const double C30970 = C30963 / C30830;
    const double C30965 = C30906 * C30958;
    const double C31009 = C31008 / C30830;
    const double C31099 = std::pow(C31074, 2);
    const double C31159 = C31074 * ae;
    const double C31081 = C31073 * be;
    const double C31080 = C31074 * C31073;
    const double C31254 = std::pow(C31073, 2);
    const double C31075 = 2 * C31071;
    const double C31291 = std::pow(C31287, 2);
    const double C32088 = 2 * C31782;
    const double C32087 = std::pow(C31782, 2);
    const double C31783 = std::pow(C31780, 2);
    const double C32086 = C31780 * ce;
    const double C31795 = std::pow(C31794, 2);
    const double C32089 = C31794 * ce;
    const double C31809 = std::pow(C31808, 2);
    const double C32090 = C31808 * ce;
    const double C31850 = std::pow(C31849, 2);
    const double C31933 = C31849 * be;
    const double C31931 = C31849 * ae;
    const double C31760 = std::pow(C30836, -1);
    const double C32081 = std::pow(C30836, -2);
    const double C30842 = 2 * C30835;
    const double C140 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (xP - xQ) * (yP - yQ) * ae * be) /
                        C30835;
    const double C32085 = C30835 * C30836;
    const double C32084 = 4 * C30835;
    const double C30844 = C30839 / C30830;
    const double C30843 = C30837 / C30830;
    const double C32074 = std::pow(C31747, 2);
    const double C31749 = C31746 * C30833;
    const double C30968 = C30960 / C30830;
    const double C31833 = C31832 * C30833;
    const double C32091 = std::pow(C31889, 2);
    const double C30971 = C30965 / C30830;
    const double C31162 = C31089 * C31159;
    const double C31166 = C31098 * C31159;
    const double C31176 = C31079 * C31159;
    const double C31189 = C31112 * C31159;
    const double C31206 = C31134 * C31159;
    const double C31084 = C31079 * C31081;
    const double C31091 = C31089 * C31081;
    const double C31101 = C31098 * C31081;
    const double C31116 = C31112 * C31081;
    const double C31140 = C31134 * C31081;
    const double C31083 = C31080 * ae;
    const double C31076 = C31075 / C31072;
    const double C126 = (-(bs[1] * C31081 * C31075) / C31072) / C30830;
    const double C127 = (-(bs[1] * C31159 * C31075) / C31072) / C30830;
    const double C120 = -(C31074 * bs[1] * C31075) / C31072;
    const double C239 = -(C31073 * bs[1] * C31075) / C31072;
    const double C344 = -(C31287 * bs[1] * C31075) / C31072;
    const double C32121 = std::pow(C32088, -2);
    const double C32119 = std::pow(C32088, -1);
    const double C31784 = C31783 * C31781;
    const double C31796 = C31795 * C31781;
    const double C31810 = C31809 * C31781;
    const double C31851 = C31850 * C30833;
    const double C32093 = std::pow(C31931, 2);
    const double C30851 = C30832 / C30842;
    const double C30848 = C30831 / C30842;
    const double C30847 = C30829 / C30842;
    const double C30962 = C30907 / C30842;
    const double C30967 = C30958 / C30842;
    const double C30966 = C30957 / C30842;
    const double C32118 = 4 * C32085;
    const double C32117 = C30830 * C32084;
    const double C30849 = 0 - C30844;
    const double C30846 = 0 - C30843;
    const double C31750 = C31749 / C30830;
    const double C30972 = 0 - C30968;
    const double C31834 = C31833 / C30830;
    const double C30975 = 0 - C30971;
    const double C31085 = C31083 * be;
    const double C31078 = -C31076;
    const double C31088 = std::pow(C31076, 4);
    const double C31111 = std::pow(C31076, 6);
    const double C141 =
        (ae * std::pow(C31076, 2) * bs[2] * C31073 * be +
         C31074 * std::pow(-C31076, 3) * bs[3] * C31074 * C31073 * ae * be) /
        C30835;
    const double C31383 = std::pow(C31076, 2);
    const double C128 =
        (C31074 * std::pow(C31076, 2) * bs[2] * C31081) / C30830;
    const double C129 =
        (C31074 * std::pow(C31076, 2) * bs[2] * C31159) / C30830 -
        (ae * bs[1] * C31075) / (C31072 * C30830);
    const double C31785 = C31784 / C31782;
    const double C31797 = C31796 / C31782;
    const double C31811 = C31810 / C31782;
    const double C31852 = C31851 / C30830;
    const double C30854 = C30849 * ae;
    const double C30853 = C30846 * ae;
    const double C31751 = -C31750;
    const double C30976 = C30972 * ae;
    const double C31835 = -C31834;
    const double C30979 = C30975 * ae;
    const double C31090 = C31089 * C31085;
    const double C31100 = C31098 * C31085;
    const double C31114 = C31112 * C31085;
    const double C31138 = C31134 * C31085;
    const double C31082 = std::pow(C31078, 3);
    const double C31097 = std::pow(C31078, 5);
    const double C31133 = std::pow(C31078, 7);
    const double C31093 = C31088 * C31091;
    const double C31163 = C31089 * C31088;
    const double C31164 = C31088 * C31162;
    const double C31119 = C31111 * C31116;
    const double C31193 = C31111 * C31189;
    const double C31207 = C31112 * C31111;
    const double C31385 = C31384 * C31383;
    const double C249 = (C31073 * C31383 * C31384 * C31081) / C30830 -
                        (be * bs[1] * C31075) / (C31072 * C30830);
    const double C250 = (C31073 * C31383 * C31384 * C31159) / C30830;
    const double C354 = (C31287 * C31383 * C31384 * C31081) / C30830;
    const double C355 = (C31287 * C31383 * C31384 * C31159) / C30830;
    const double C31786 = -C31785;
    const double C31798 = -C31797;
    const double C31812 = -C31811;
    const double C31853 = -C31852;
    const double C30858 = C30854 / C30830;
    const double C30857 = C30853 / C30830;
    const double C31752 = std::exp(C31751);
    const double C30980 = C30976 / C30830;
    const double C31836 = std::exp(C31835);
    const double C30983 = C30979 / C30830;
    const double C31092 = C31088 * C31090;
    const double C31118 = C31111 * C31114;
    const double C31086 = C31082 * C31084;
    const double C31160 = C31079 * C31082;
    const double C31177 = C31082 * C31176;
    const double C269 = (be * std::pow(C31076, 2) * bs[2] * C31074 * ae +
                         C31073 * C31082 * C31079 * C31085) /
                        C30835;
    const double C374 = ((zP - zQ) * C31082 * C31079 * C31085) / C30835;
    const double C31103 = C31097 * C31101;
    const double C31102 = C31097 * C31100;
    const double C31169 = C31098 * C31097;
    const double C31170 = C31097 * C31166;
    const double C31143 = C31133 * C31140;
    const double C31142 = C31133 * C31138;
    const double C31209 = C31133 * C31206;
    const double C31096 = ae * C31093;
    const double C31095 = C31074 * C31093;
    const double C31464 = C31073 * C31093;
    const double C31168 = C31074 * C31163;
    const double C31167 = C31163 * ae;
    const double C31391 = C31163 * C31099;
    const double C31467 = C31163 * C31254;
    const double C31540 = C31073 * C31163;
    const double C31539 = C31163 * be;
    const double C31726 = C31163 * C31291;
    const double C31729 = C31287 * C31163;
    const double C31179 = C31074 * C31164;
    const double C31252 = be * C31164;
    const double C31251 = C31073 * C31164;
    const double C31121 = C31119 * C31099;
    const double C31132 = ae * C31119;
    const double C31131 = C31074 * C31119;
    const double C31554 = C31073 * C31119;
    const double C31620 = C31119 * C31291;
    const double C31195 = C31074 * C31193;
    const double C31303 = C31193 * C31254;
    const double C31317 = be * C31193;
    const double C31316 = C31073 * C31193;
    const double C31627 = C31193 * C31291;
    const double C31212 = C31207 * C31099;
    const double C31211 = C31074 * C31207;
    const double C31210 = C31207 * ae;
    const double C31558 = C31207 * C31254;
    const double C121 = C31385 * C31099 - (bs[1] * C31075) / C31072;
    const double C240 = C31073 * C31074 * C31385;
    const double C244 = C31385 * C31254 - (bs[1] * C31075) / C31072;
    const double C345 = C31287 * C31074 * C31385;
    const double C349 = C31385 * C31291 - (bs[1] * C31075) / C31072;
    const double C676 = C31287 * C31073 * C31385;
    const double C31787 = std::exp(C31786);
    const double C31799 = std::exp(C31798);
    const double C31813 = std::exp(C31812);
    const double C31854 = std::exp(C31853);
    const double C30862 = C30858 - C30848;
    const double C30861 = C30857 - C30847;
    const double C30845 = C30840 * C31752;
    const double C31754 = C31752 * C31747;
    const double C31753 = C31752 / C30836;
    const double C31762 = C31760 * C31752;
    const double C32077 = C31752 * C31748;
    const double C32115 = C32081 * C31752;
    const double C32109 = C31752 * C32074;
    const double C30984 = C30980 - C30967;
    const double C150 = C31836 * C141;
    const double C148 = C31836 * C128;
    const double C2024 = C31836 * C354;
    const double C30909 = C30908 * C31836;
    const double C113 = -(2 * ae * be * (yA - yB) * C31836) / (ae + be);
    const double C31890 = C31836 / C30836;
    const double C31892 = C31836 * C31889;
    const double C31899 = C31760 * C31836;
    const double C32097 = C31836 * C31891;
    const double C32126 = C32081 * C31836;
    const double C32124 = C31836 * C32091;
    const double C30987 = C30983 - C30966;
    const double C379 =
        (C31082 * C31079 * C31085 + C31092 * std::pow(zP - zQ, 2)) / C30835;
    const double C31120 = C31074 * C31118;
    const double C31302 = C31073 * C31118;
    const double C31361 = C31118 * C31291;
    const double C31364 = C31287 * C31118;
    const double C142 = (C31082 * C31079 * C31085 + ae * C31074 * C31086 +
                         C31074 * (ae * C31086 + C31074 * std::pow(C31076, 4) *
                                                     bs[4] * C31085)) /
                        C30835;
    const double C143 =
        (2 * (ae * C31086 + C31074 * C31092) +
         ae * (C31086 + C31093 * std::pow(C31074, 2)) +
         C31074 * (C31092 + ae * C31074 * C31093 +
                   C31074 * (ae * C31093 +
                             C31074 * std::pow(C31078, 5) * bs[5] * C31085))) /
        C30835;
    const double C270 = (be * (C31074 * C31082 * C31079 * C31074 * ae +
                               bs[2] * std::pow(C31076, 2) * ae) +
                         C31073 * (ae * C31086 + C31074 * C31092)) /
                        C30835;
    const double C375 = ((zP - zQ) * (ae * C31086 + C31074 * C31092)) / C30835;
    const double C130 =
        (std::pow(C31076, 2) * bs[2] * C31081 + C31086 * C31099) / C30830;
    const double C132 =
        (2 * C31074 * C31086 + C31074 * (C31086 + C31093 * C31099)) / C30830;
    const double C251 =
        (C31073 * C31074 * C31086 + C31074 * C31385 * be) / C30830;
    const double C259 =
        (C31383 * C31384 * C31081 + C31073 * (C31073 * C31086 + C31385 * be) +
         C31073 * C31385 * be) /
        C30830;
    const double C356 = (C31287 * C31074 * C31086) / C30830;
    const double C358 = (C31287 * (C31086 + C31093 * C31099)) / C30830;
    const double C364 = (C31383 * C31384 * C31081 + C31086 * C31291) / C30830;
    const double C681 = (C31287 * (C31073 * C31086 + C31385 * be)) / C30830;
    const double C2005 =
        (2 * C31287 * C31086 + C31287 * (C31086 + C31093 * C31291)) / C30830;
    const double C31180 = C31160 * ae;
    const double C31390 = C31074 * C31160;
    const double C31466 = C31073 * C31160;
    const double C31465 = C31160 * be;
    const double C253 = (C31073 * (C31086 + C31093 * C31099) +
                         (C31385 + C31160 * C31099) * be) /
                        C30830;
    const double C980 =
        (2 * (C31073 * C31086 + C31385 * be) +
         C31073 * (C31086 + C31073 * (C31073 * C31093 + C31160 * be) +
                   C31073 * C31160 * be) +
         (C31385 + C31160 * C31254) * be) /
        C30830;
    const double C122 =
        2 * C31074 * C31385 + C31074 * (C31385 + C31160 * C31099);
    const double C241 = C31073 * (C31385 + C31160 * C31099);
    const double C346 = C31287 * (C31385 + C31160 * C31099);
    const double C974 =
        2 * C31073 * C31385 + C31073 * (C31385 + C31160 * C31254);
    const double C1108 = C31287 * (C31385 + C31160 * C31254);
    const double C1999 =
        2 * C31287 * C31385 + C31287 * (C31385 + C31160 * C31291);
    const double C2002 =
        3 * (C31385 + C31160 * C31291) +
        C31287 * (2 * C31287 * C31160 + C31287 * (C31160 + C31163 * C31291));
    const double C274 = (C31082 * C31079 * C31085 + be * C31073 * C31177 +
                         C31073 * (be * C31177 + C31073 * C31092)) /
                        C30835;
    const double C691 = ((zP - zQ) * (be * C31177 + C31073 * C31092)) / C30835;
    const double C131 =
        (C31383 * C31384 * C31159 + C31074 * (C31074 * C31177 + C31385 * ae) +
         C31074 * C31385 * ae) /
        C30830;
    const double C252 = (C31073 * (C31074 * C31177 + C31385 * ae)) / C30830;
    const double C260 = (C31383 * C31384 * C31159 + C31177 * C31254) / C30830;
    const double C357 = (C31287 * (C31074 * C31177 + C31385 * ae)) / C30830;
    const double C365 = (C31383 * C31384 * C31159 + C31177 * C31291) / C30830;
    const double C682 = (C31287 * C31073 * C31177) / C30830;
    const double C981 =
        (2 * C31073 * C31177 + C31073 * (C31177 + C31164 * C31254)) / C30830;
    const double C1118 = (C31287 * (C31177 + C31164 * C31254)) / C30830;
    const double C2006 =
        (2 * C31287 * C31177 + C31287 * (C31177 + C31164 * C31291)) / C30830;
    const double C2026 = C31836 * C374;
    const double C31105 = C31103 * C31099;
    const double C31110 = ae * C31103;
    const double C31109 = C31074 * C31103;
    const double C31538 = C31073 * C31103;
    const double C31613 = C31103 * C31291;
    const double C31619 = C31287 * C31103;
    const double C2011 =
        (3 * (C31086 + C31093 * C31291) +
         C31287 * (2 * C31287 * C31093 + C31287 * (C31093 + C31103 * C31291))) /
        C30830;
    const double C31104 = C31074 * C31102;
    const double C31253 = C31073 * C31102;
    const double C992 = (2 * (be * C31177 + C31073 * C31092) +
                         be * (C31177 + C31164 * std::pow(C31073, 2)) +
                         C31073 * (C31092 + be * C31073 * C31164 +
                                   C31073 * (be * C31164 + C31073 * C31102))) /
                        C30835;
    const double C2017 = (2 * C31287 * C31092 +
                          C31287 * (C31092 + C31102 * std::pow(C31287, 2))) /
                         C30835;
    const double C2020 =
        (3 * (C31092 + C31102 * C31291) +
         C31287 * (2 * C31287 * C31102 + C31287 * (C31102 + C31118 * C31291))) /
        C30835;
    const double C31171 = C31169 * C31099;
    const double C31191 = C31074 * C31169;
    const double C31190 = C31169 * ae;
    const double C31541 = C31169 * C31254;
    const double C31556 = C31073 * C31169;
    const double C31555 = C31169 * be;
    const double C31730 = C31169 * C31291;
    const double C31172 = C31074 * C31170;
    const double C31256 = C31170 * C31254;
    const double C31301 = be * C31170;
    const double C31300 = C31073 * C31170;
    const double C31616 = C31170 * C31291;
    const double C31626 = C31287 * C31170;
    const double C2012 =
        (3 * (C31177 + C31164 * C31291) +
         C31287 * (2 * C31287 * C31164 + C31287 * (C31164 + C31170 * C31291))) /
        C30830;
    const double C31145 = C31143 * C31099;
    const double C31144 = C31074 * C31142;
    const double C31318 = C31073 * C31142;
    const double C31365 = C31142 * C31291;
    const double C31213 = C31074 * C31209;
    const double C31320 = C31209 * C31254;
    const double C366 = (C31074 * C31086 + C31095 * C31291) / C30830;
    const double C31184 = C31168 * ae;
    const double C31395 = 2 * C31168;
    const double C31474 = C31073 * C31168;
    const double C31473 = C31168 * be;
    const double C31392 = C31160 + C31391;
    const double C31469 = C31160 + C31467;
    const double C31545 = 2 * C31540;
    const double C31543 = C31540 * be;
    const double C31727 = C31160 + C31726;
    const double C31731 = 2 * C31729;
    const double C1125 = (C31073 * C31177 + C31251 * C31291) / C30830;
    const double C31123 = C31103 + C31121;
    const double C31139 = 2 * C31131;
    const double C31137 = ae * C31131;
    const double C31582 = C31073 * C31131;
    const double C31635 = C31131 * C31291;
    const double C31622 = C31103 + C31620;
    const double C31307 = C31170 + C31303;
    const double C31324 = 2 * C31316;
    const double C31322 = be * C31316;
    const double C31644 = C31316 * C31291;
    const double C31629 = C31170 + C31627;
    const double C31215 = C31169 + C31212;
    const double C31214 = C31211 * ae;
    const double C31585 = C31211 * C31254;
    const double C31562 = C31169 + C31558;
    const double C32120 = C31787 * C32086;
    const double C110 =
        (C31787 * std::pow(C32086, 2)) / C32087 + C31787 / C32088;
    const double C112 = C32121 * C31787;
    const double C469 = C32119 * C31787;
    const double C32122 = C31799 * C32089;
    const double C235 =
        (C31799 * std::pow(C32089, 2)) / C32087 + C31799 / C32088;
    const double C237 = C32121 * C31799;
    const double C467 = C32119 * C31799;
    const double C32123 = C31813 * C32090;
    const double C341 =
        (C31813 * std::pow(C32090, 2)) / C32087 + C31813 / C32088;
    const double C343 = C32121 * C31813;
    const double C573 = C32119 * C31813;
    const double C31932 = C31854 / C30836;
    const double C31934 = C31854 * C31931;
    const double C31941 = C31760 * C31854;
    const double C32103 = C31854 * C31933;
    const double C32129 = C32081 * C31854;
    const double C32127 = C31854 * C32093;
    const double C30867 = C30862 / C30836;
    const double C30866 = C30828 * C30862;
    const double C30865 = C30861 + C30838;
    const double C30852 = C30845 / C30835;
    const double C30850 = 2 * C30845;
    const double C31755 = C31754 * C31748;
    const double C31761 = C31754 / C30842;
    const double C32078 = C31760 * C31754;
    const double C32076 = C31754 / C30830;
    const double C809 = (C31752 * std::pow(C31748, 2)) / C30835 + C31753;
    const double C31763 = C31762 * C31748;
    const double C32082 = C31747 * C31762;
    const double C32080 = 2 * C31762;
    const double C32130 = C31762 / C32084;
    const double C106 = C31762 / C32118;
    const double C17327 = C31762 / C30836;
    const double C32111 = C32077 / C30830;
    const double C810 = (-2 * C31760 * C32077) / C30830;
    const double C32143 = C32109 / C30835;
    const double C30989 = C30984 / C30836;
    const double C30988 = C30906 * C30984;
    const double C30936 = 2 * C30909;
    const double C30964 = C30909 / C30835;
    const double C814 =
        ((0 * ae) / C30830 - C30909 / C30835) / C30836 + (0 * ae) / C30830;
    const double C2654 =
        ((C31836 - (C30906 * 2 * C30909) / C30830) * ae) / C30830 -
        C30907 / C30842;
    const double C2655 = (0 * ae) / C30830 - C30909 / C30835;
    const double C153 = C113 * C121;
    const double C151 = C113 * C129;
    const double C149 = C113 * C120;
    const double C475 = C113 * C240;
    const double C579 = C113 * C345;
    const double C2029 = C113 * C349;
    const double C2027 = C113 * C355;
    const double C2025 = C113 * C344;
    const double C2543 = C113 * C676;
    const double C5242 = (C31836 * std::pow(C31891, 2)) / C30835 + C31890;
    const double C31893 = C31892 * C31891;
    const double C31898 = C31892 / C30842;
    const double C32095 = C31892 / C30830;
    const double C32092 = C31760 * C31892;
    const double C813 =
        (((C31836 - (C30906 * 2 * C30909) / C30830) * ae) / C30830 -
         C30907 / C30842) /
            C30836 +
        ((C30906 * ((0 * ae) / C30830 - C30909 / C30835) + C31899) * ae) /
            C30830;
    const double C31900 = C31899 * C31891;
    const double C32101 = C31889 * C31899;
    const double C32100 = 2 * C31899;
    const double C32136 = C31899 / C32084;
    const double C6072 = C31899 / C32118;
    const double C17324 = C31899 / C30836;
    const double C32132 = C32097 / C30830;
    const double C5243 = (-2 * C31760 * C32097) / C30830;
    const double C32148 = C32124 / C30835;
    const double C30993 = C30987 + C30959;
    const double C2030 = C31836 * C379;
    const double C31362 = C31102 + C31361;
    const double C31366 = 2 * C31364;
    const double C154 = C31836 * C142;
    const double C158 = C31836 * C143;
    const double C478 = C31836 * C270;
    const double C2667 = C31899 * C270;
    const double C14644 = C31899 * C270;
    const double C582 = C31836 * C375;
    const double C152 = C31836 * C130;
    const double C156 = C31836 * C132;
    const double C476 = C31836 * C251;
    const double C2663 = C31899 * C251;
    const double C14640 = C31899 * C251;
    const double C580 = C31836 * C356;
    const double C584 = C31836 * C358;
    const double C2028 = C31836 * C364;
    const double C2544 = C31836 * C681;
    const double C4479 = C31899 * C681;
    const double C16532 = C31899 * C681;
    const double C2037 = C31836 * C2005;
    const double C31181 = C31179 + C31180;
    const double C261 =
        (C31074 * C31086 + C31073 * (C31073 * C31095 + C31390 * be) +
         C31073 * C31390 * be) /
        C30830;
    const double C683 = (C31287 * (C31073 * C31095 + C31390 * be)) / C30830;
    const double C245 = C31074 * C31385 + C31390 * C31254;
    const double C350 = C31074 * C31385 + C31390 * C31291;
    const double C677 = C31287 * C31073 * C31390;
    const double C975 =
        2 * C31073 * C31390 + C31073 * (C31390 + C31168 * C31254);
    const double C1109 = C31287 * (C31390 + C31168 * C31254);
    const double C2000 =
        2 * C31287 * C31390 + C31287 * (C31390 + C31168 * C31291);
    const double C1111 = C31073 * C31385 + C31466 * C31291;
    const double C2530 =
        2 * C31287 * C31466 + C31287 * (C31466 + C31540 * C31291);
    const double C31468 = C31464 + C31465;
    const double C480 = C31836 * C253;
    const double C2671 = C31899 * C253;
    const double C14648 = C31899 * C253;
    const double C157 = C113 * C122;
    const double C479 = C113 * C241;
    const double C583 = C113 * C346;
    const double C2036 = C113 * C1999;
    const double C11743 = C113 * C2002;
    const double C2546 = C31836 * C691;
    const double C4483 = C31899 * C691;
    const double C16536 = C31899 * C691;
    const double C155 = C113 * C131;
    const double C477 = C113 * C252;
    const double C581 = C113 * C357;
    const double C2031 = C113 * C365;
    const double C2545 = C113 * C682;
    const double C2038 = C113 * C2006;
    const double C31107 = C31093 + C31105;
    const double C31122 = C31110 + C31120;
    const double C31115 = 2 * C31109;
    const double C31113 = ae * C31109;
    const double C31472 = C31073 * C31109;
    const double C982 =
        (2 * (C31073 * C31095 + C31390 * be) +
         C31073 * (C31095 + C31073 * (C31073 * C31109 + C31168 * be) +
                   C31073 * C31168 * be) +
         (C31390 + C31168 * C31254) * be) /
        C30830;
    const double C2007 =
        (2 * C31287 * C31095 + C31287 * (C31095 + C31109 * C31291)) / C30830;
    const double C2013 =
        (3 * (C31095 + C31109 * C31291) +
         C31287 * (2 * C31287 * C31109 + C31287 * (C31109 + C31131 * C31291))) /
        C30830;
    const double C31542 = C31538 + C31539;
    const double C31614 = C31093 + C31613;
    const double C31621 = 2 * C31619;
    const double C11742 = C31836 * C2011;
    const double C31106 = C31096 + C31104;
    const double C31255 = C31252 + C31253;
    const double C2039 = C31836 * C2017;
    const double C11744 = C31836 * C2020;
    const double C31173 = C31163 + C31171;
    const double C31194 = C31191 * ae;
    const double C31208 = 2 * C31191;
    const double C31475 = C31191 * C31254;
    const double C31584 = C31073 * C31191;
    const double C31583 = C31191 * be;
    const double C31737 = C31191 * C31291;
    const double C2003 =
        3 * (C31390 + C31168 * C31291) +
        C31287 * (2 * C31287 * C31168 + C31287 * (C31168 + C31191 * C31291));
    const double C31196 = C31195 + C31190;
    const double C31544 = C31163 + C31541;
    const double C31563 = 2 * C31556;
    const double C31561 = C31556 * be;
    const double C31740 = C31556 * C31291;
    const double C6813 =
        3 * (C31466 + C31540 * C31291) +
        C31287 * (2 * C31287 * C31540 + C31287 * (C31540 + C31556 * C31291));
    const double C31560 = C31554 + C31555;
    const double C31732 = C31163 + C31730;
    const double C31174 = C31172 + C31167;
    const double C31257 = C31164 + C31256;
    const double C31305 = C31301 + C31302;
    const double C31306 = 2 * C31300;
    const double C31304 = be * C31300;
    const double C2534 =
        (2 * C31287 * C31251 + C31287 * (C31251 + C31300 * C31291)) / C30830;
    const double C6819 =
        (3 * (C31251 + C31300 * C31291) +
         C31287 * (2 * C31287 * C31300 + C31287 * (C31300 + C31316 * C31291))) /
        C30830;
    const double C31617 = C31164 + C31616;
    const double C31628 = 2 * C31626;
    const double C11745 = C113 * C2012;
    const double C31147 = C31119 + C31145;
    const double C31146 = C31132 + C31144;
    const double C31323 = C31317 + C31318;
    const double C31367 = C31118 + C31365;
    const double C31216 = C31213 + C31210;
    const double C31325 = C31193 + C31320;
    const double C1766 = C31836 * C366;
    const double C1113 = C31073 * C31390 + C31474 * C31291;
    const double C123 = 3 * (C31385 + C31160 * C31099) +
                        C31074 * (2 * C31390 + C31074 * C31392);
    const double C242 = C31073 * (2 * C31390 + C31074 * C31392);
    const double C246 = C31385 + C31160 * C31099 + C31392 * C31254;
    const double C347 = C31287 * (2 * C31390 + C31074 * C31392);
    const double C351 = C31385 + C31160 * C31099 + C31392 * C31291;
    const double C678 = C31287 * C31073 * C31392;
    const double C977 = 3 * (C31385 + C31160 * C31254) +
                        C31073 * (2 * C31466 + C31073 * C31469);
    const double C1112 = C31385 + C31160 * C31254 + C31469 * C31291;
    const double C1638 = C31287 * (2 * C31466 + C31073 * C31469);
    const double C11729 =
        4 * (2 * C31287 * C31160 + C31287 * C31727) +
        C31287 * (3 * C31727 + C31287 * (2 * C31287 * C31163 +
                                         C31287 * (C31163 + C31169 * C31291)));
    const double C2549 = C113 * C1125;
    const double C31125 = C31074 * C31123;
    const double C31135 = 3 * C31123;
    const double C31130 = ae * C31123;
    const double C31480 = C31073 * C31123;
    const double C31141 = C31118 + C31137;
    const double C31636 = C31109 + C31635;
    const double C31623 = C31287 * C31622;
    const double C31310 = C31073 * C31307;
    const double C31319 = 3 * C31307;
    const double C31315 = be * C31307;
    const double C31326 = C31118 + C31322;
    const double C31645 = C31300 + C31644;
    const double C31630 = C31287 * C31629;
    const double C31218 = C31074 * C31215;
    const double C31217 = C31215 * ae;
    const double C31483 = C31215 * C31254;
    const double C31588 = C31191 + C31585;
    const double C31565 = C31073 * C31562;
    const double C111 = (2 * C32119 * C32120) / C31782;
    const double C468 = C32120 / C31782;
    const double C236 = (2 * C32119 * C32122) / C31782;
    const double C466 = C32122 / C31782;
    const double C342 = (2 * C32119 * C32123) / C31782;
    const double C572 = C32123 / C31782;
    const double C10013 = (C31854 * std::pow(C31933, 2)) / C30835 + C31932;
    const double C31935 = C31934 * C31933;
    const double C31940 = C31934 / C30842;
    const double C32096 = C31934 / C30830;
    const double C32094 = C31760 * C31934;
    const double C31942 = C31941 * C31933;
    const double C32107 = C31931 * C31941;
    const double C32106 = 2 * C31941;
    const double C32142 = C31941 / C32084;
    const double C11604 = C31941 / C32118;
    const double C23798 = C31941 / C30836;
    const double C32138 = C32103 / C30830;
    const double C10014 = (-2 * C31760 * C32103) / C30830;
    const double C32150 = C32127 / C30835;
    const double C30871 = C30866 + 0;
    const double C30870 = C30865 / C30836;
    const double C30856 = C30841 - C30852;
    const double C30855 = C30828 * C30850;
    const double C817 =
        ((-C30850 / C30830) / C30836 - (0 * be) / C30830) / C30836 -
        (0 * be) / C30830;
    const double C6079 = -C30850 / C30830;
    const double C15424 = (-C30850 / C30830) / C30836 - (0 * be) / C30830;
    const double C31756 = C31755 / C30835;
    const double C32112 = 2 * C32078;
    const double C31764 = C31763 / C30830;
    const double C32116 = C32082 / C30842;
    const double C32144 = C32076 - C32111;
    const double C15417 = -C32111;
    const double C32158 = C32143 + C31753;
    const double C30994 = C30988 + 0;
    const double C30961 = C30906 * C30936;
    const double C5249 =
        ((-C30907 / C30830) / C30836 -
         ((C31836 - (C30906 * C30936) / C30830) * be) / C30830) /
            C30836 -
        ((C30906 * ((-C30936 / C30830) / C30836 - (0 * be) / C30830) + C31899) *
         be) /
            C30830;
    const double C5250 =
        ((-C30936 / C30830) / C30836 - (0 * be) / C30830) / C30836 -
        (0 * be) / C30830;
    const double C14632 = (-C30936 / C30830) / C30836 - (0 * be) / C30830;
    const double C30974 = C30970 - C30964;
    const double C11027 = C814 * C1118;
    const double C11021 = C814 * C1108;
    const double C2678 = C2654 * C122;
    const double C2674 = C2654 * C131;
    const double C2670 = C2654 * C121;
    const double C2666 = C2654 * C129;
    const double C2662 = C2654 * C120;
    const double C3039 = C2654 * C241;
    const double C3035 = C2654 * C252;
    const double C3031 = C2654 * C240;
    const double C3193 = C2654 * C346;
    const double C3189 = C2654 * C357;
    const double C3185 = C2654 * C345;
    const double C4489 = C2654 * C365;
    const double C4485 = C2654 * C349;
    const double C4482 = C2654 * C355;
    const double C4478 = C2654 * C344;
    const double C5129 = C2654 * C682;
    const double C5125 = C2654 * C676;
    const double C12479 = C2654 * C2006;
    const double C12475 = C2654 * C1999;
    const double C13102 = C2654 * C1125;
    const double C14120 = C2654 * C2012;
    const double C14116 = C2654 * C2002;
    const double C2672 = C2655 * C241;
    const double C2668 = C2655 * C252;
    const double C2664 = C2655 * C240;
    const double C4491 = C2655 * C1125;
    const double C4484 = C2655 * C682;
    const double C4480 = C2655 * C676;
    const double C5131 = C2655 * C1118;
    const double C5127 = C2655 * C1108;
    const double C5286 = C5242 * C143;
    const double C5280 = C5242 * C132;
    const double C5273 = C5242 * C142;
    const double C5267 = C5242 * C130;
    const double C5261 = C5242 * C141;
    const double C5255 = C5242 * C128;
    const double C5680 = C5242 * C253;
    const double C5674 = C5242 * C270;
    const double C5668 = C5242 * C251;
    const double C5850 = C5242 * C358;
    const double C5844 = C5242 * C375;
    const double C5838 = C5242 * C356;
    const double C6856 = C5242 * C2017;
    const double C6850 = C5242 * C2005;
    const double C6843 = C5242 * C379;
    const double C6837 = C5242 * C364;
    const double C6831 = C5242 * C374;
    const double C6825 = C5242 * C354;
    const double C7175 = C5242 * C366;
    const double C7343 = C5242 * C691;
    const double C7337 = C5242 * C681;
    const double C31894 = C31893 / C30835;
    const double C2681 = C32095 * C143;
    const double C2677 = C32095 * C132;
    const double C2673 = C32095 * C142;
    const double C2669 = C32095 * C130;
    const double C2665 = C32095 * C141;
    const double C2661 = C32095 * C128;
    const double C3040 = C32095 * C253;
    const double C3036 = C32095 * C270;
    const double C3032 = C32095 * C251;
    const double C3194 = C32095 * C358;
    const double C3190 = C32095 * C375;
    const double C3186 = C32095 * C356;
    const double C4494 = C32095 * C366;
    const double C4490 = C32095 * C379;
    const double C4486 = C32095 * C364;
    const double C4481 = C32095 * C374;
    const double C4477 = C32095 * C354;
    const double C5130 = C32095 * C691;
    const double C5126 = C32095 * C681;
    const double C12480 = C32095 * C2017;
    const double C12476 = C32095 * C2005;
    const double C14121 = C32095 * C2020;
    const double C14117 = C32095 * C2011;
    const double C812 =
        (((0 - (C30906 * C30907) / C30830) * ae) / C30830 - (0 * be) / C30842) /
            C30836 +
        ((C30906 * (((C31836 - (C30906 * 2 * C30909) / C30830) * ae) / C30830 -
                    C30907 / C30842) +
          C32095) *
         ae) /
            C30830 +
        (0 * ae) / C30830 - C30909 / C30835;
    const double C32125 = 2 * C32092;
    const double C834 = C813 * C241;
    const double C828 = C813 * C252;
    const double C822 = C813 * C240;
    const double C11037 = C813 * C1125;
    const double C11025 = C813 * C682;
    const double C11019 = C813 * C676;
    const double C11523 = C813 * C1118;
    const double C11517 = C813 * C1108;
    const double C31901 = C31900 / C30830;
    const double C32135 = C32101 / C30842;
    const double C32152 = C32095 - C32132;
    const double C14625 = -C32132;
    const double C5269 = C5243 * C253;
    const double C5263 = C5243 * C270;
    const double C5257 = C5243 * C251;
    const double C6833 = C5243 * C691;
    const double C6827 = C5243 * C681;
    const double C32161 = C32148 + C31890;
    const double C30997 = C30993 / C30836;
    const double C11735 =
        (4 * (2 * C31287 * C31102 + C31287 * C31362) +
         C31287 *
             (3 * C31362 + C31287 * (2 * C31287 * C31118 +
                                     C31287 * (C31118 + C31142 * C31291)))) /
        C30835;
    const double C168 = C152 - C153;
    const double C2377 = C579 - C580;
    const double C2375 = C580 - C579;
    const double C2048 = C2028 - C2029;
    const double C133 =
        (2 * (C31074 * C31177 + C31385 * ae) +
         C31074 * (C31177 + C31074 * C31181 + C31074 * C31160 * ae) +
         (C31385 + C31160 * C31099) * ae) /
        C30830;
    const double C254 =
        (C31073 * (C31177 + C31074 * C31181 + C31390 * ae)) / C30830;
    const double C262 =
        (C31074 * C31177 + C31385 * ae + C31181 * C31254) / C30830;
    const double C359 =
        (C31287 * (C31177 + C31074 * C31181 + C31390 * ae)) / C30830;
    const double C367 =
        (C31074 * C31177 + C31385 * ae + C31181 * C31291) / C30830;
    const double C684 = (C31287 * C31073 * C31181) / C30830;
    const double C823 = C32126 * C261;
    const double C3034 = C31899 * C261;
    const double C5259 = C32126 * C261;
    const double C5670 = C5243 * C261;
    const double C15011 = C31899 * C261;
    const double C17339 = C17324 * C261;
    const double C2210 = C31836 * C683;
    const double C3188 = C31899 * C683;
    const double C4704 = C32095 * C683;
    const double C5840 = C5243 * C683;
    const double C8753 = C5242 * C683;
    const double C15165 = C31899 * C683;
    const double C824 = C814 * C245;
    const double C1297 = C813 * C245;
    const double C3033 = C2655 * C245;
    const double C1767 = C113 * C350;
    const double C4493 = C2654 * C350;
    const double C1471 = C813 * C677;
    const double C2209 = C113 * C677;
    const double C3187 = C2655 * C677;
    const double C4703 = C2654 * C677;
    const double C1299 = C814 * C975;
    const double C1473 = C814 * C1109;
    const double C4705 = C2655 * C1109;
    const double C21547 = C813 * C1109;
    const double C2040 = C113 * C2000;
    const double C12483 = C2654 * C2000;
    const double C2547 = C113 * C1111;
    const double C4487 = C2655 * C1111;
    const double C11031 = C813 * C1111;
    const double C13098 = C2654 * C1111;
    const double C11042 = C813 * C2530;
    const double C12021 = C113 * C2530;
    const double C12477 = C2655 * C2530;
    const double C14520 = C2654 * C2530;
    const double C986 =
        (3 * (C31086 + C31073 * C31468 + C31466 * be) +
         C31073 * (2 * C31468 +
                   C31073 * (C31093 + C31073 * (C31073 * C31103 + C31163 * be) +
                             C31073 * C31163 * be) +
                   C31469 * be) +
         (2 * C31466 + C31073 * C31469) * be) /
        C30830;
    const double C1117 =
        (C31287 * (C31086 + C31073 * C31468 + C31466 * be)) / C30830;
    const double C1123 =
        (C31073 * C31086 + C31385 * be + C31468 * C31291) / C30830;
    const double C1124 = (C31086 + C31073 * C31468 + C31466 * be +
                          (C31093 + C31073 * (C31073 * C31103 + C31163 * be) +
                           C31073 * C31163 * be) *
                              C31291) /
                         C30830;
    const double C1641 =
        (C31287 * (2 * C31468 +
                   C31073 * (C31093 + C31073 * (C31073 * C31103 + C31163 * be) +
                             C31073 * C31163 * be) +
                   C31469 * be)) /
        C30830;
    const double C2533 =
        (2 * C31287 * C31468 +
         C31287 * (C31468 + (C31073 * C31103 + C31163 * be) * C31291)) /
        C30830;
    const double C170 = C156 - C157;
    const double C1764 = C584 - C583;
    const double C2379 = C583 - C584;
    const double C11740 = C2037 - C2036;
    const double C169 = C154 - C155;
    const double C2378 = C581 - C582;
    const double C2376 = C582 - C581;
    const double C2049 = C2030 - C2031;
    const double C134 = (3 * (C31086 + C31093 * C31099) +
                         C31074 * (2 * C31095 + C31074 * C31107)) /
                        C30830;
    const double C255 = (C31073 * (2 * C31095 + C31074 * C31107) +
                         (2 * C31390 + C31074 * C31392) * be) /
                        C30830;
    const double C263 =
        (C31086 + C31093 * C31099 + C31073 * (C31073 * C31107 + C31392 * be) +
         C31073 * C31392 * be) /
        C30830;
    const double C360 = (C31287 * (2 * C31095 + C31074 * C31107)) / C30830;
    const double C368 = (C31086 + C31093 * C31099 + C31107 * C31291) / C30830;
    const double C685 = (C31287 * (C31073 * C31107 + C31392 * be)) / C30830;
    const double C2009 =
        (2 * C31287 * C31107 + C31287 * (C31107 + C31123 * C31291)) / C30830;
    const double C31124 = C31074 * C31122;
    const double C31129 = 2 * C31122;
    const double C31261 = C31073 * C31122;
    const double C31117 = C31102 + C31113;
    const double C31476 = C31472 + C31473;
    const double C1300 = C32126 * C982;
    const double C5672 = C32126 * C982;
    const double C7476 = C32136 * C982;
    const double C15432 = C32136 * C982;
    const double C17752 = C17324 * C982;
    const double C2041 = C31836 * C2007;
    const double C12484 = C32095 * C2007;
    const double C11932 = C31836 * C2013;
    const double C31546 = C31073 * C31542;
    const double C31553 = 2 * C31542;
    const double C11731 =
        (4 * (2 * C31287 * C31093 + C31287 * C31614) +
         C31287 *
             (3 * C31614 + C31287 * (2 * C31287 * C31103 +
                                     C31287 * (C31103 + C31119 * C31291)))) /
        C30830;
    const double C11753 = C11742 - C11743;
    const double C144 =
        (3 * (C31092 + ae * C31095 + C31074 * C31106) +
         ae * (2 * C31095 + C31074 * C31107) +
         C31074 *
             (2 * C31106 + ae * C31107 +
              C31074 * (C31102 + ae * C31074 * C31103 +
                        C31074 * (ae * C31103 + C31074 * std::pow(C31076, 6) *
                                                    bs[6] * C31085)))) /
        C30835;
    const double C271 =
        (be * (C31082 * C31079 * C31159 +
               C31074 * (C31074 * C31088 * C31089 * C31159 + C31160 * ae) +
               C31074 * C31160 * ae) +
         C31073 * (C31092 + ae * C31095 + C31074 * C31106)) /
        C30835;
    const double C275 = (ae * C31086 + C31074 * C31092 + be * C31073 * C31181 +
                         C31073 * (be * C31181 + C31073 * C31106)) /
                        C30835;
    const double C376 =
        ((zP - zQ) * (C31092 + ae * C31095 + C31074 * C31106)) / C30835;
    const double C380 =
        (ae * C31086 + C31074 * C31092 + C31106 * std::pow(zP - zQ, 2)) /
        C30835;
    const double C692 = ((zP - zQ) * (be * C31181 + C31073 * C31106)) / C30835;
    const double C2018 = (2 * C31287 * C31106 +
                          C31287 * (C31106 + C31122 * std::pow(C31287, 2))) /
                         C30835;
    const double C1135 =
        ((zP - zQ) * (C31092 + be * C31251 + C31073 * C31255)) / C30835;
    const double C1138 =
        (be * C31177 + C31073 * C31092 + C31255 * std::pow(zP - zQ, 2)) /
        C30835;
    const double C1139 = (C31092 + be * C31251 + C31073 * C31255 +
                          (C31102 + be * C31073 * C31170 +
                           C31073 * (be * C31170 + C31073 * C31118)) *
                              std::pow(zP - zQ, 2)) /
                         C30835;
    const double C2539 =
        (2 * C31287 * C31255 +
         C31287 * (C31255 + (be * C31170 + C31073 * C31118) * C31291)) /
        C30835;
    const double C11741 = C2039 - C2038;
    const double C31192 = C31173 * ae;
    const double C31396 = C31074 * C31173;
    const double C31400 = 3 * C31173;
    const double C31482 = C31073 * C31173;
    const double C31481 = C31173 * be;
    const double C984 =
        (2 * (C31073 * C31107 + C31392 * be) +
         C31073 * (C31107 + C31073 * (C31073 * C31123 + C31173 * be) +
                   C31073 * C31173 * be) +
         (C31392 + C31173 * C31254) * be) /
        C30830;
    const double C976 =
        2 * C31073 * C31392 + C31073 * (C31392 + C31173 * C31254);
    const double C1110 = C31287 * (C31392 + C31173 * C31254);
    const double C2001 =
        2 * C31287 * C31392 + C31287 * (C31392 + C31173 * C31291);
    const double C2004 =
        3 * (C31392 + C31173 * C31291) +
        C31287 * (2 * C31287 * C31173 + C31287 * (C31173 + C31215 * C31291));
    const double C31477 = C31168 + C31475;
    const double C31589 = 2 * C31584;
    const double C31587 = C31584 * be;
    const double C2531 =
        2 * C31287 * C31474 + C31287 * (C31474 + C31584 * C31291);
    const double C11840 =
        3 * (C31474 + C31584 * C31291) +
        C31287 * (2 * C31287 * C31584 +
                  C31287 * (C31584 + C31073 * C31211 * C31291));
    const double C31586 = C31582 + C31583;
    const double C31738 = C31168 + C31737;
    const double C11931 = C113 * C2003;
    const double C31197 = C31074 * C31196;
    const double C31205 = 2 * C31196;
    const double C31262 = C31196 * C31254;
    const double C31340 = be * C31196;
    const double C31339 = C31073 * C31196;
    const double C31638 = C31196 * C31291;
    const double C31547 = C31073 * C31544;
    const double C31559 = 3 * C31544;
    const double C31557 = C31544 * be;
    const double C6812 =
        2 * C31287 * C31469 + C31287 * (C31469 + C31544 * C31291);
    const double C6814 =
        3 * (C31469 + C31544 * C31291) +
        C31287 * (2 * C31287 * C31544 + C31287 * (C31544 + C31562 * C31291));
    const double C31741 = C31540 + C31740;
    const double C12025 = C113 * C6813;
    const double C14118 = C2655 * C6813;
    const double C31564 = C31073 * C31560;
    const double C31641 = C31560 * C31291;
    const double C6817 =
        (3 * (C31468 + C31542 * C31291) +
         C31287 * (2 * C31287 * C31542 + C31287 * (C31542 + C31560 * C31291))) /
        C30830;
    const double C31733 = C31287 * C31732;
    const double C31183 = C31074 * C31174;
    const double C31188 = 2 * C31174;
    const double C31260 = be * C31174;
    const double C31259 = C31073 * C31174;
    const double C993 = (2 * (be * C31181 + C31073 * C31106) +
                         be * (C31181 + C31174 * std::pow(C31073, 2)) +
                         C31073 * (C31106 + be * C31073 * C31174 +
                                   C31073 * (be * C31174 + C31073 * C31122))) /
                        C30835;
    const double C983 =
        (2 * C31073 * C31181 + C31073 * (C31181 + C31174 * C31254)) / C30830;
    const double C1120 = (C31287 * (C31181 + C31174 * C31254)) / C30830;
    const double C2008 =
        (2 * C31287 * C31181 + C31287 * (C31181 + C31174 * C31291)) / C30830;
    const double C2014 =
        (3 * (C31181 + C31174 * C31291) +
         C31287 * (2 * C31287 * C31174 + C31287 * (C31174 + C31196 * C31291))) /
        C30830;
    const double C995 =
        (3 * (C31092 + be * C31251 + C31073 * C31255) +
         be * (2 * C31251 + C31073 * C31257) +
         C31073 * (2 * C31255 + be * C31257 +
                   C31073 * (C31102 + be * C31073 * C31170 +
                             C31073 * (be * C31170 + C31073 * C31118)))) /
        C30835;
    const double C1647 =
        ((zP - zQ) * (2 * C31255 + be * C31257 +
                      C31073 * (C31102 + be * C31073 * C31170 +
                                C31073 * (be * C31170 + C31073 * C31118)))) /
        C30835;
    const double C987 = (3 * (C31177 + C31164 * C31254) +
                         C31073 * (2 * C31251 + C31073 * C31257)) /
                        C30830;
    const double C1126 = (C31177 + C31164 * C31254 + C31257 * C31291) / C30830;
    const double C1642 = (C31287 * (2 * C31251 + C31073 * C31257)) / C30830;
    const double C6816 =
        (2 * C31287 * C31257 + C31287 * (C31257 + C31307 * C31291)) / C30830;
    const double C31309 = C31073 * C31305;
    const double C31314 = 2 * C31305;
    const double C31308 = C31102 + C31304;
    const double C11048 = C813 * C2534;
    const double C12023 = C113 * C2534;
    const double C12481 = C2655 * C2534;
    const double C14524 = C2654 * C2534;
    const double C12027 = C113 * C6819;
    const double C14122 = C2655 * C6819;
    const double C11732 =
        (4 * (2 * C31287 * C31164 + C31287 * C31617) +
         C31287 *
             (3 * C31617 + C31287 * (2 * C31287 * C31170 +
                                     C31287 * (C31170 + C31193 * C31291)))) /
        C30830;
    const double C11754 = C11744 - C11745;
    const double C31149 = C31074 * C31147;
    const double C2015 =
        (3 * (C31107 + C31123 * C31291) +
         C31287 * (2 * C31287 * C31123 + C31287 * (C31123 + C31147 * C31291))) /
        C30830;
    const double C31148 = C31074 * C31146;
    const double C31341 = C31073 * C31146;
    const double C31372 = C31146 * C31291;
    const double C2021 =
        (3 * (C31106 + C31122 * C31291) +
         C31287 * (2 * C31287 * C31122 + C31287 * (C31122 + C31146 * C31291))) /
        C30835;
    const double C31327 = C31073 * C31323;
    const double C31375 = C31323 * C31291;
    const double C6822 =
        (3 * (C31255 + C31305 * C31291) +
         C31287 * (2 * C31287 * C31305 + C31287 * (C31305 + C31323 * C31291))) /
        C30835;
    const double C31368 = C31287 * C31367;
    const double C31219 = C31074 * C31216;
    const double C31342 = C31216 * C31254;
    const double C31328 = C31073 * C31325;
    const double C6820 =
        (3 * (C31257 + C31307 * C31291) +
         C31287 * (2 * C31287 * C31307 + C31287 * (C31307 + C31325 * C31291))) /
        C30830;
    const double C2217 = C113 * C1113;
    const double C4495 = C2655 * C1113;
    const double C11359 = C813 * C1113;
    const double C12696 = C2654 * C1113;
    const double C161 = C113 * C123;
    const double C2685 = C2654 * C123;
    const double C483 = C113 * C242;
    const double C845 = C813 * C242;
    const double C2680 = C2655 * C242;
    const double C3047 = C2654 * C242;
    const double C836 = C814 * C246;
    const double C1309 = C813 * C246;
    const double C3041 = C2655 * C246;
    const double C587 = C113 * C347;
    const double C3201 = C2654 * C347;
    const double C1771 = C113 * C351;
    const double C4501 = C2654 * C351;
    const double C1483 = C813 * C678;
    const double C2213 = C113 * C678;
    const double C3195 = C2655 * C678;
    const double C4711 = C2654 * C678;
    const double C11033 = C814 * C1112;
    const double C11529 = C813 * C1112;
    const double C13100 = C2655 * C1112;
    const double C11519 = C814 * C1638;
    const double C11746 = C113 * C11729;
    const double C31127 = C31115 + C31125;
    const double C11927 =
        (4 * (2 * C31287 * C31109 + C31287 * C31636) +
         C31287 * (3 * C31636 +
                   C31287 * (2 * C31287 * C31131 +
                             C31287 * (C31131 + C31074 * C31143 * C31291)))) /
        C30830;
    const double C31624 = C31621 + C31623;
    const double C31312 = C31306 + C31310;
    const double C12018 =
        (4 * (2 * C31287 * C31300 + C31287 * C31645) +
         C31287 * (3 * C31645 +
                   C31287 * (2 * C31287 * C31316 +
                             C31287 * (C31316 + C31073 * C31209 * C31291)))) /
        C30830;
    const double C31631 = C31628 + C31630;
    const double C31220 = C31208 + C31218;
    const double C31485 = C31173 + C31483;
    const double C31591 = C31073 * C31588;
    const double C31567 = C31563 + C31565;
    const double C31936 = C31935 / C30835;
    const double C32128 = 2 * C32094;
    const double C31943 = C31942 / C30830;
    const double C32141 = C32107 / C30842;
    const double C32155 = C32096 - C32138;
    const double C20324 = -C32138;
    const double C32162 = C32150 + C31932;
    const double C30874 = C30871 * be;
    const double C30860 = C30828 * C30856;
    const double C30888 = C30856 / C30836;
    const double C30859 = C30855 / C30830;
    const double C31757 = C31753 - C31756;
    const double C32145 = C32112 / C30830;
    const double C31765 = C31761 - C31764;
    const double C32159 = C32144 / C30836;
    const double C30998 = C30994 * be;
    const double C30969 = C30961 / C30830;
    const double C5281 = C5249 * C242;
    const double C5270 = C5249 * C241;
    const double C5264 = C5249 * C252;
    const double C5258 = C5249 * C240;
    const double C5681 = C5249 * C246;
    const double C5669 = C5249 * C245;
    const double C5851 = C5249 * C678;
    const double C5839 = C5249 * C677;
    const double C6857 = C5249 * C2534;
    const double C6851 = C5249 * C2530;
    const double C6846 = C5249 * C1125;
    const double C6840 = C5249 * C1111;
    const double C6834 = C5249 * C682;
    const double C6828 = C5249 * C676;
    const double C7176 = C5249 * C1113;
    const double C7350 = C5249 * C1112;
    const double C7344 = C5249 * C1118;
    const double C7338 = C5249 * C1108;
    const double C8754 = C5249 * C1109;
    const double C5272 = C5250 * C246;
    const double C5260 = C5250 * C245;
    const double C5671 = C5250 * C975;
    const double C5841 = C5250 * C1109;
    const double C6842 = C5250 * C1112;
    const double C6836 = C5250 * C1118;
    const double C6830 = C5250 * C1108;
    const double C7340 = C5250 * C1638;
    const double C14657 = C14632 * C242;
    const double C14649 = C14632 * C241;
    const double C14645 = C14632 * C252;
    const double C14641 = C14632 * C240;
    const double C15018 = C14632 * C246;
    const double C15010 = C14632 * C245;
    const double C15172 = C14632 * C678;
    const double C15164 = C14632 * C677;
    const double C16225 = C14632 * C1113;
    const double C16556 = C14632 * C2534;
    const double C16552 = C14632 * C2530;
    const double C16545 = C14632 * C1125;
    const double C16541 = C14632 * C1111;
    const double C16537 = C14632 * C682;
    const double C16533 = C14632 * C676;
    const double C16777 = C14632 * C1109;
    const double C17207 = C14632 * C1112;
    const double C17203 = C14632 * C1118;
    const double C17199 = C14632 * C1108;
    const double C27554 = C14632 * C6819;
    const double C27550 = C14632 * C6813;
    const double C30978 = C30906 * C30974;
    const double C31007 = C30974 / C30836;
    const double C2694 = C2671 - C2672;
    const double C31895 = C31890 - C31894;
    const double C2697 = C2677 - C2678;
    const double C2695 = C2673 - C2674;
    const double C2693 = C2669 - C2670;
    const double C4179 = C3194 - C3193;
    const double C4921 = C3193 - C3194;
    const double C4919 = C3189 - C3190;
    const double C4915 = C3190 - C3189;
    const double C4917 = C3185 - C3186;
    const double C4913 = C3186 - C3185;
    const double C12469 = C4490 - C4489;
    const double C12467 = C4486 - C4485;
    const double C14114 = C12480 - C12479;
    const double C14112 = C12476 - C12475;
    const double C843 = C812 * C122;
    const double C838 = C812 * C131;
    const double C832 = C812 * C121;
    const double C826 = C812 * C129;
    const double C820 = C812 * C120;
    const double C1307 = C812 * C241;
    const double C1301 = C812 * C252;
    const double C1295 = C812 * C240;
    const double C1481 = C812 * C346;
    const double C1475 = C812 * C357;
    const double C1469 = C812 * C345;
    const double C11046 = C812 * C2006;
    const double C11040 = C812 * C1999;
    const double C11035 = C812 * C365;
    const double C11029 = C812 * C349;
    const double C11023 = C812 * C355;
    const double C11017 = C812 * C344;
    const double C11357 = C812 * C350;
    const double C11533 = C812 * C1125;
    const double C11527 = C812 * C1111;
    const double C11521 = C812 * C682;
    const double C11515 = C812 * C676;
    const double C21545 = C812 * C677;
    const double C32149 = C32125 / C30830;
    const double C31902 = C31898 - C31901;
    const double C32163 = C32152 / C30836;
    const double C14658 = C14625 * C143;
    const double C14654 = C14625 * C132;
    const double C14650 = C14625 * C142;
    const double C14646 = C14625 * C130;
    const double C14642 = C14625 * C141;
    const double C14638 = C14625 * C128;
    const double C15017 = C14625 * C253;
    const double C15013 = C14625 * C270;
    const double C15009 = C14625 * C251;
    const double C15171 = C14625 * C358;
    const double C15167 = C14625 * C375;
    const double C15163 = C14625 * C356;
    const double C16222 = C14625 * C366;
    const double C16559 = C14625 * C2007;
    const double C16555 = C14625 * C2017;
    const double C16551 = C14625 * C2005;
    const double C16542 = C14625 * C379;
    const double C16538 = C14625 * C364;
    const double C16534 = C14625 * C374;
    const double C16530 = C14625 * C354;
    const double C16776 = C14625 * C683;
    const double C17202 = C14625 * C691;
    const double C17198 = C14625 * C681;
    const double C27553 = C14625 * C2020;
    const double C27549 = C14625 * C2011;
    const double C5248 =
        ((-(0 * be) / C30830) / C30836 -
         ((0 - (C30906 * C30907) / C30830) * be) / C30830) /
            C30836 -
        ((C30906 * ((-C30907 / C30830) / C30836 -
                    ((C31836 - (C30906 * C30936) / C30830) * be) / C30830) +
          C14625) *
         be) /
            C30830 +
        (-C30936 / C30830) / C30836 - (0 * be) / C30830;
    const double C850 = C32161 * C143;
    const double C844 = C32161 * C132;
    const double C837 = C32161 * C142;
    const double C831 = C32161 * C130;
    const double C825 = C32161 * C141;
    const double C819 = C32161 * C128;
    const double C1308 = C32161 * C253;
    const double C1302 = C32161 * C270;
    const double C1296 = C32161 * C251;
    const double C1482 = C32161 * C358;
    const double C1476 = C32161 * C375;
    const double C1470 = C32161 * C356;
    const double C11047 = C32161 * C2017;
    const double C11041 = C32161 * C2005;
    const double C11034 = C32161 * C379;
    const double C11028 = C32161 * C364;
    const double C11022 = C32161 * C374;
    const double C11016 = C32161 * C354;
    const double C11358 = C32161 * C366;
    const double C11522 = C32161 * C691;
    const double C11516 = C32161 * C681;
    const double C21546 = C32161 * C683;
    const double C11749 = C31836 * C11735;
    const double C11738 = C2048 * C6079;
    const double C159 = C113 * C133;
    const double C849 = C812 * C133;
    const double C2682 = C2654 * C133;
    const double C481 = C113 * C254;
    const double C840 = C813 * C254;
    const double C1313 = C812 * C254;
    const double C2676 = C2655 * C254;
    const double C3043 = C2654 * C254;
    const double C5276 = C5249 * C254;
    const double C14653 = C14632 * C254;
    const double C830 = C814 * C262;
    const double C1303 = C813 * C262;
    const double C3037 = C2655 * C262;
    const double C5266 = C5250 * C262;
    const double C5675 = C5249 * C262;
    const double C15014 = C14632 * C262;
    const double C585 = C113 * C359;
    const double C1487 = C812 * C359;
    const double C3197 = C2654 * C359;
    const double C1769 = C113 * C367;
    const double C4497 = C2654 * C367;
    const double C11363 = C812 * C367;
    const double C1477 = C813 * C684;
    const double C2211 = C113 * C684;
    const double C3191 = C2655 * C684;
    const double C4707 = C2654 * C684;
    const double C5845 = C5249 * C684;
    const double C15168 = C14632 * C684;
    const double C21551 = C812 * C684;
    const double C2032 = C1766 - C1767;
    const double C2381 = C1767 - C1766;
    const double C12471 = C4494 - C4493;
    const double C12898 = C4493 - C4494;
    const double C4918 = C3187 - C3188;
    const double C4914 = C3188 - C3187;
    const double C5128 = C31899 * C1117;
    const double C6829 = C32126 * C1117;
    const double C7339 = C5243 * C1117;
    const double C11020 = C32126 * C1117;
    const double C17200 = C31899 * C1117;
    const double C19569 = C17324 * C1117;
    const double C2548 = C31836 * C1123;
    const double C4488 = C31899 * C1123;
    const double C6839 = C5243 * C1123;
    const double C7349 = C5242 * C1123;
    const double C11528 = C32161 * C1123;
    const double C13099 = C32095 * C1123;
    const double C16540 = C31899 * C1123;
    const double C17206 = C14625 * C1123;
    const double C6841 = C32126 * C1124;
    const double C7351 = C5243 * C1124;
    const double C11032 = C32126 * C1124;
    const double C13101 = C31899 * C1124;
    const double C17208 = C31899 * C1124;
    const double C19582 = C17324 * C1124;
    const double C7341 = C32126 * C1641;
    const double C9472 = C32136 * C1641;
    const double C11520 = C32126 * C1641;
    const double C20220 = C17324 * C1641;
    const double C26816 = C32136 * C1641;
    const double C6852 = C5243 * C2533;
    const double C12022 = C31836 * C2533;
    const double C12478 = C31899 * C2533;
    const double C14521 = C32095 * C2533;
    const double C16553 = C31899 * C2533;
    const double C27953 = C14625 * C2533;
    const double C11751 = C11740 * C6079;
    const double C2053 = C2049 * C809;
    const double C10238 = C2049 * C32158;
    const double C11739 = C2049 * C31752;
    const double C13405 = C2049 * C32076;
    const double C22264 = C2049 * C15417;
    const double C160 = C31836 * C134;
    const double C2686 = C32095 * C134;
    const double C14663 = C14625 * C134;
    const double C484 = C31836 * C255;
    const double C2679 = C31899 * C255;
    const double C3048 = C32095 * C255;
    const double C5282 = C5243 * C255;
    const double C14656 = C31899 * C255;
    const double C15025 = C14625 * C255;
    const double C835 = C32126 * C263;
    const double C3042 = C31899 * C263;
    const double C5271 = C32126 * C263;
    const double C5682 = C5243 * C263;
    const double C15019 = C31899 * C263;
    const double C17351 = C17324 * C263;
    const double C588 = C31836 * C360;
    const double C3202 = C32095 * C360;
    const double C15179 = C14625 * C360;
    const double C1770 = C31836 * C368;
    const double C4502 = C32095 * C368;
    const double C16231 = C14625 * C368;
    const double C2214 = C31836 * C685;
    const double C3196 = C31899 * C685;
    const double C4712 = C32095 * C685;
    const double C5852 = C5243 * C685;
    const double C15173 = C31899 * C685;
    const double C18726 = C14625 * C685;
    const double C2045 = C31836 * C2009;
    const double C31136 = C31129 + C31130;
    const double C31126 = C31117 + C31124;
    const double C1119 =
        (C31287 * (C31095 + C31073 * C31476 + C31474 * be)) / C30830;
    const double C1127 =
        (C31073 * C31095 + C31390 * be + C31476 * C31291) / C30830;
    const double C1128 = (C31095 + C31073 * C31476 + C31474 * be +
                          (C31109 + C31073 * (C31073 * C31131 + C31191 * be) +
                           C31073 * C31191 * be) *
                              C31291) /
                         C30830;
    const double C2535 =
        (2 * C31287 * C31476 +
         C31287 * (C31476 + (C31073 * C31131 + C31191 * be) * C31291)) /
        C30830;
    const double C13410 = C2041 - C2040;
    const double C13684 = C2040 - C2041;
    const double C31548 = C31093 + C31546;
    const double C11747 = C31836 * C11731;
    const double C11756 = C11753 * C6079;
    const double C162 = C31836 * C144;
    const double C2690 = C32095 * C144;
    const double C14667 = C14625 * C144;
    const double C482 = C31836 * C271;
    const double C1314 = C32161 * C271;
    const double C2675 = C31899 * C271;
    const double C3044 = C32095 * C271;
    const double C5275 = C5243 * C271;
    const double C5686 = C5242 * C271;
    const double C14652 = C31899 * C271;
    const double C15021 = C14625 * C271;
    const double C829 = C32126 * C275;
    const double C3038 = C31899 * C275;
    const double C5265 = C32126 * C275;
    const double C5676 = C5243 * C275;
    const double C15015 = C31899 * C275;
    const double C17345 = C17324 * C275;
    const double C586 = C31836 * C376;
    const double C1488 = C32161 * C376;
    const double C3198 = C32095 * C376;
    const double C5856 = C5242 * C376;
    const double C15175 = C14625 * C376;
    const double C1768 = C31836 * C380;
    const double C4498 = C32095 * C380;
    const double C7181 = C5242 * C380;
    const double C11364 = C32161 * C380;
    const double C16226 = C14625 * C380;
    const double C2212 = C31836 * C692;
    const double C3192 = C31899 * C692;
    const double C4708 = C32095 * C692;
    const double C5846 = C5243 * C692;
    const double C8759 = C5242 * C692;
    const double C15169 = C31899 * C692;
    const double C16780 = C14625 * C692;
    const double C21552 = C32161 * C692;
    const double C2043 = C31836 * C2018;
    const double C12488 = C32095 * C2018;
    const double C16563 = C14625 * C2018;
    const double C5132 = C31899 * C1135;
    const double C6835 = C32126 * C1135;
    const double C7345 = C5243 * C1135;
    const double C11026 = C32126 * C1135;
    const double C17204 = C31899 * C1135;
    const double C19575 = C17324 * C1135;
    const double C2550 = C31836 * C1138;
    const double C4492 = C31899 * C1138;
    const double C6845 = C5243 * C1138;
    const double C7355 = C5242 * C1138;
    const double C11534 = C32161 * C1138;
    const double C13103 = C32095 * C1138;
    const double C16544 = C31899 * C1138;
    const double C17210 = C14625 * C1138;
    const double C6847 = C32126 * C1139;
    const double C7357 = C5243 * C1139;
    const double C11038 = C32126 * C1139;
    const double C13105 = C31899 * C1139;
    const double C17212 = C31899 * C1139;
    const double C19588 = C17324 * C1139;
    const double C6858 = C5243 * C2539;
    const double C12024 = C31836 * C2539;
    const double C12482 = C31899 * C2539;
    const double C14525 = C32095 * C2539;
    const double C16557 = C31899 * C2539;
    const double C27957 = C14625 * C2539;
    const double C11752 = C11741 * C31752;
    const double C13409 = C11741 * C32076;
    const double C22268 = C11741 * C15417;
    const double C31397 = C31395 + C31396;
    const double C1115 = C31073 * C31392 + C31482 * C31291;
    const double C2532 =
        2 * C31287 * C31482 + C31287 * (C31482 + C31073 * C31215 * C31291);
    const double C31484 = C31480 + C31481;
    const double C1312 = C32126 * C984;
    const double C5684 = C32126 * C984;
    const double C7493 = C32136 * C984;
    const double C15449 = C32136 * C984;
    const double C17764 = C17324 * C984;
    const double C1311 = C814 * C976;
    const double C5683 = C5250 * C976;
    const double C1485 = C814 * C1110;
    const double C4713 = C2655 * C1110;
    const double C5853 = C5250 * C1110;
    const double C18727 = C14632 * C1110;
    const double C2044 = C113 * C2001;
    const double C988 =
        (3 * (C31095 + C31073 * C31476 + C31474 * be) +
         C31073 * (2 * C31476 +
                   C31073 * (C31109 + C31073 * (C31073 * C31131 + C31191 * be) +
                             C31073 * C31191 * be) +
                   C31477 * be) +
         (2 * C31474 + C31073 * C31477) * be) /
        C30830;
    const double C1643 =
        (C31287 * (2 * C31476 +
                   C31073 * (C31109 + C31073 * (C31073 * C31131 + C31191 * be) +
                             C31073 * C31191 * be) +
                   C31477 * be)) /
        C30830;
    const double C978 = 3 * (C31390 + C31168 * C31254) +
                        C31073 * (2 * C31474 + C31073 * C31477);
    const double C1114 = C31390 + C31168 * C31254 + C31477 * C31291;
    const double C1639 = C31287 * (2 * C31474 + C31073 * C31477);
    const double C7169 =
        2 * C31287 * C31477 + C31287 * (C31477 + C31588 * C31291);
    const double C12485 = C2655 * C2531;
    const double C13550 = C113 * C2531;
    const double C16560 = C14632 * C2531;
    const double C31590 = C31073 * C31586;
    const double C11841 =
        (3 * (C31476 + C31586 * C31291) +
         C31287 * (2 * C31287 * C31586 +
                   C31287 * (C31586 + (C31073 * C31074 * C31143 + C31211 * be) *
                                          C31291))) /
        C30830;
    const double C11926 =
        4 * (2 * C31287 * C31168 + C31287 * C31738) +
        C31287 * (3 * C31738 + C31287 * (2 * C31287 * C31191 +
                                         C31287 * (C31191 + C31211 * C31291)));
    const double C31198 = C31170 + C31197;
    const double C31264 = C31174 + C31262;
    const double C31345 = 2 * C31339;
    const double C31343 = be * C31339;
    const double C31639 = C31174 + C31638;
    const double C31549 = C31545 + C31547;
    const double C6853 = C5250 * C6812;
    const double C11044 = C814 * C6812;
    const double C14522 = C2655 * C6812;
    const double C27954 = C14632 * C6812;
    const double C12016 =
        4 * (2 * C31287 * C31540 + C31287 * C31741) +
        C31287 * (3 * C31741 +
                  C31287 * (2 * C31287 * C31556 +
                            C31287 * (C31556 + C31073 * C31207 * C31291)));
    const double C31566 = C31103 + C31564;
    const double C31642 = C31542 + C31641;
    const double C12026 = C31836 * C6817;
    const double C14119 = C31899 * C6817;
    const double C27551 = C31899 * C6817;
    const double C31734 = C31731 + C31733;
    const double C31185 = C31164 + C31183;
    const double C31263 = C31260 + C31261;
    const double C1129 = (C31073 * C31181 + C31259 * C31291) / C30830;
    const double C2536 =
        (2 * C31287 * C31259 + C31287 * (C31259 + C31339 * C31291)) / C30830;
    const double C11842 =
        (3 * (C31259 + C31339 * C31291) +
         C31287 * (2 * C31287 * C31339 +
                   C31287 * (C31339 + C31073 * C31216 * C31291))) /
        C30830;
    const double C1306 = C32126 * C993;
    const double C5678 = C32126 * C993;
    const double C7484 = C32136 * C993;
    const double C15440 = C32136 * C993;
    const double C17758 = C17324 * C993;
    const double C1305 = C814 * C983;
    const double C5677 = C5250 * C983;
    const double C1479 = C814 * C1120;
    const double C4709 = C2655 * C1120;
    const double C5847 = C5250 * C1120;
    const double C8760 = C5249 * C1120;
    const double C16781 = C14632 * C1120;
    const double C21553 = C813 * C1120;
    const double C2042 = C113 * C2008;
    const double C12487 = C2654 * C2008;
    const double C11933 = C113 * C2014;
    const double C7347 = C32126 * C1647;
    const double C9480 = C32136 * C1647;
    const double C11526 = C32126 * C1647;
    const double C20226 = C17324 * C1647;
    const double C26824 = C32136 * C1647;
    const double C6848 = C5250 * C1126;
    const double C7356 = C5249 * C1126;
    const double C11039 = C814 * C1126;
    const double C11535 = C813 * C1126;
    const double C13104 = C2655 * C1126;
    const double C17211 = C14632 * C1126;
    const double C7346 = C5250 * C1642;
    const double C11525 = C814 * C1642;
    const double C6859 = C5250 * C6816;
    const double C11050 = C814 * C6816;
    const double C14526 = C2655 * C6816;
    const double C27958 = C14632 * C6816;
    const double C31321 = C31314 + C31315;
    const double C31311 = C31308 + C31309;
    const double C11748 = C113 * C11732;
    const double C11757 = C11754 * C31752;
    const double C31151 = C31139 + C31149;
    const double C31150 = C31141 + C31148;
    const double C31344 = C31340 + C31341;
    const double C31373 = C31122 + C31372;
    const double C11934 = C31836 * C2021;
    const double C31329 = C31326 + C31327;
    const double C31376 = C31305 + C31375;
    const double C12028 = C31836 * C6822;
    const double C14123 = C31899 * C6822;
    const double C27555 = C31899 * C6822;
    const double C31369 = C31366 + C31368;
    const double C31221 = C31193 + C31219;
    const double C31346 = C31196 + C31342;
    const double C31330 = C31324 + C31328;
    const double C136 = (4 * (2 * C31095 + C31074 * C31107) +
                         C31074 * (3 * C31107 + C31074 * C31127)) /
                        C30830;
    const double C362 = (C31287 * (3 * C31107 + C31074 * C31127)) / C30830;
    const double C370 =
        (2 * C31095 + C31074 * C31107 + C31127 * C31291) / C30830;
    const double C11733 =
        (5 * (3 * C31614 + C31287 * C31624) +
         C31287 * (4 * C31624 +
                   C31287 * (3 * C31622 +
                             C31287 * (2 * C31287 * C31119 +
                                       C31287 * (C31119 + C31143 * C31291))))) /
        C30830;
    const double C6145 = (4 * (2 * C31251 + C31073 * C31257) +
                          C31073 * (3 * C31257 + C31073 * C31312)) /
                         C30830;
    const double C6216 = (C31287 * (3 * C31257 + C31073 * C31312)) / C30830;
    const double C6219 =
        (2 * C31251 + C31073 * C31257 + C31312 * C31291) / C30830;
    const double C11734 =
        (5 * (3 * C31617 + C31287 * C31631) +
         C31287 * (4 * C31631 +
                   C31287 * (3 * C31629 +
                             C31287 * (2 * C31287 * C31193 +
                                       C31287 * (C31193 + C31209 * C31291))))) /
        C30830;
    const double C31222 = C31220 * ae;
    const double C31401 = C31074 * C31220;
    const double C979 = 3 * (C31392 + C31173 * C31254) +
                        C31073 * (2 * C31482 + C31073 * C31485);
    const double C1116 = C31392 + C31173 * C31254 + C31485 * C31291;
    const double C1640 = C31287 * (2 * C31482 + C31073 * C31485);
    const double C31593 = C31589 + C31591;
    const double C31569 = C31073 * C31567;
    const double C31937 = C31932 - C31936;
    const double C32151 = C32128 / C30830;
    const double C31944 = C31940 - C31943;
    const double C32165 = C32155 / C30836;
    const double C30876 = C30874 / C30830;
    const double C30864 = C30860 + C31762;
    const double C30891 = C30888 - C30890;
    const double C5253 = C30888 + (0 * ae) / C30830;
    const double C30863 = C31752 - C30859;
    const double C24021 = C2049 * C31757;
    const double C32075 = C31757 * C31747;
    const double C32114 = C32080 + C31757;
    const double C32083 = C31765 / C30836;
    const double C32079 = C31765 * C31747;
    const double C2650 = C32159 - (C31757 * C31748) / C30830;
    const double C31000 = C30998 / C30830;
    const double C30973 = C31836 - C30969;
    const double C5292 = C5269 - C5270;
    const double C8965 = C5839 - C5840;
    const double C8959 = C5840 - C5839;
    const double C14671 = C14648 - C14649;
    const double C16990 = C15164 - C15165;
    const double C16986 = C15165 - C15164;
    const double C30982 = C30978 + C31899;
    const double C31010 = C31007 - C31009;
    const double C17366 = C31895 * C143;
    const double C17360 = C31895 * C132;
    const double C17353 = C31895 * C142;
    const double C17347 = C31895 * C130;
    const double C17341 = C31895 * C141;
    const double C17335 = C31895 * C128;
    const double C17766 = C31895 * C271;
    const double C17760 = C31895 * C253;
    const double C17754 = C31895 * C270;
    const double C17748 = C31895 * C251;
    const double C17936 = C31895 * C376;
    const double C17930 = C31895 * C358;
    const double C17924 = C31895 * C375;
    const double C17918 = C31895 * C356;
    const double C19596 = C31895 * C380;
    const double C19590 = C31895 * C366;
    const double C19584 = C31895 * C379;
    const double C19578 = C31895 * C364;
    const double C19571 = C31895 * C374;
    const double C19565 = C31895 * C354;
    const double C19802 = C31895 * C692;
    const double C19796 = C31895 * C683;
    const double C20222 = C31895 * C691;
    const double C20216 = C31895 * C681;
    const double C30350 = C31895 * C2017;
    const double C30344 = C31895 * C2005;
    const double C30807 = C31895 * C1138;
    const double C30801 = C31895 * C1123;
    const double C32098 = C31895 * C31889;
    const double C32134 = C32100 + C31895;
    const double C2701 = C2693 + C2694;
    const double C846 = C32149 * C255;
    const double C839 = C32149 * C271;
    const double C833 = C32149 * C253;
    const double C827 = C32149 * C270;
    const double C821 = C32149 * C251;
    const double C1310 = C32149 * C263;
    const double C1304 = C32149 * C275;
    const double C1298 = C32149 * C261;
    const double C1484 = C32149 * C685;
    const double C1478 = C32149 * C692;
    const double C1472 = C32149 * C683;
    const double C11049 = C32149 * C2539;
    const double C11043 = C32149 * C2533;
    const double C11036 = C32149 * C1138;
    const double C11030 = C32149 * C1123;
    const double C11024 = C32149 * C691;
    const double C11018 = C32149 * C681;
    const double C11536 = C32149 * C1139;
    const double C11530 = C32149 * C1124;
    const double C11524 = C32149 * C1135;
    const double C11518 = C32149 * C1117;
    const double C17362 = C31902 * C255;
    const double C17355 = C31902 * C271;
    const double C17349 = C31902 * C253;
    const double C17343 = C31902 * C270;
    const double C17337 = C31902 * C251;
    const double C17762 = C31902 * C263;
    const double C17756 = C31902 * C275;
    const double C17750 = C31902 * C261;
    const double C17932 = C31902 * C685;
    const double C17926 = C31902 * C692;
    const double C17920 = C31902 * C683;
    const double C19586 = C31902 * C1138;
    const double C19580 = C31902 * C1123;
    const double C19573 = C31902 * C691;
    const double C19567 = C31902 * C681;
    const double C20224 = C31902 * C1135;
    const double C20218 = C31902 * C1117;
    const double C30352 = C31902 * C2539;
    const double C30346 = C31902 * C2533;
    const double C30809 = C31902 * C1139;
    const double C30803 = C31902 * C1124;
    const double C32102 = C31902 / C30836;
    const double C32099 = C31902 * C31889;
    const double C7457 = C32163 - (C31895 * C31891) / C30830;
    const double C5285 = C5248 * C133;
    const double C5279 = C5248 * C122;
    const double C5274 = C5248 * C131;
    const double C5268 = C5248 * C121;
    const double C5262 = C5248 * C129;
    const double C5256 = C5248 * C120;
    const double C5685 = C5248 * C254;
    const double C5679 = C5248 * C241;
    const double C5673 = C5248 * C252;
    const double C5667 = C5248 * C240;
    const double C5855 = C5248 * C359;
    const double C5849 = C5248 * C346;
    const double C5843 = C5248 * C357;
    const double C5837 = C5248 * C345;
    const double C6855 = C5248 * C2006;
    const double C6849 = C5248 * C1999;
    const double C6844 = C5248 * C365;
    const double C6838 = C5248 * C349;
    const double C6832 = C5248 * C355;
    const double C6826 = C5248 * C344;
    const double C7180 = C5248 * C367;
    const double C7174 = C5248 * C350;
    const double C7354 = C5248 * C1125;
    const double C7348 = C5248 * C1111;
    const double C7342 = C5248 * C682;
    const double C7336 = C5248 * C676;
    const double C8758 = C5248 * C684;
    const double C8752 = C5248 * C677;
    const double C858 = C837 - C838;
    const double C855 = C831 - C832;
    const double C21760 = C1475 - C1476;
    const double C21754 = C1476 - C1475;
    const double C21757 = C1469 - C1470;
    const double C21751 = C1470 - C1469;
    const double C11055 = C11034 - C11035;
    const double C11052 = C11028 - C11029;
    const double C171 = C158 - C159;
    const double C2699 = C2681 - C2682;
    const double C13406 = C2032 * C30856;
    const double C22265 = C2032 * C15424;
    const double C4927 = C4917 + C4918;
    const double C4925 = C4913 + C4914;
    const double C12468 = C4488 - C4487;
    const double C6862 = C6839 - C6840;
    const double C16567 = C16540 - C16541;
    const double C6863 = C6841 - C6842;
    const double C11054 = C11032 - C11033;
    const double C14113 = C12478 - C12477;
    const double C27545 = C16553 - C16552;
    const double C11750 = C11738 + C11739;
    const double C172 = C160 - C161;
    const double C2698 = C2679 - C2680;
    const double C14675 = C14656 - C14657;
    const double C857 = C835 - C836;
    const double C5293 = C5271 - C5272;
    const double C3439 = C588 - C587;
    const double C3901 = C587 - C588;
    const double C1778 = C1770 - C1771;
    const double C2383 = C1771 - C1770;
    const double C4180 = C3196 - C3195;
    const double C4922 = C3195 - C3196;
    const double C18234 = C15173 - C15172;
    const double C18928 = C15172 - C15173;
    const double C145 =
        (4 * (2 * C31106 + ae * C31107 + C31074 * C31126) +
         ae * (3 * C31107 + C31074 * C31127) +
         C31074 * (3 * C31126 + ae * C31127 +
                   C31074 * (2 * C31122 + ae * C31123 +
                             C31074 * (C31118 + ae * C31074 * C31119 +
                                       C31074 * (ae * C31119 +
                                                 C31074 * std::pow(C31078, 7) *
                                                     bs[7] * C31085))))) /
        C30835;
    const double C272 =
        (be * (2 * (C31074 * C31164 + C31160 * ae) +
               C31074 *
                   (C31164 +
                    C31074 * (C31074 * C31097 * C31098 * C31159 + C31163 * ae) +
                    C31074 * C31163 * ae) +
               (C31160 + C31163 * C31099) * ae) +
         C31073 * (2 * C31106 + ae * C31107 + C31074 * C31126)) /
        C30835;
    const double C377 =
        ((zP - zQ) * (2 * C31106 + ae * C31107 + C31074 * C31126)) / C30835;
    const double C381 = (C31092 + ae * C31095 + C31074 * C31106 +
                         C31126 * std::pow(zP - zQ, 2)) /
                        C30835;
    const double C1474 = C32126 * C1119;
    const double C4706 = C31899 * C1119;
    const double C5842 = C32126 * C1119;
    const double C8755 = C5243 * C1119;
    const double C16778 = C31899 * C1119;
    const double C17922 = C17324 * C1119;
    const double C19798 = C31902 * C1119;
    const double C21548 = C32149 * C1119;
    const double C2218 = C31836 * C1127;
    const double C4496 = C31899 * C1127;
    const double C7177 = C5243 * C1127;
    const double C11360 = C32149 * C1127;
    const double C12697 = C32095 * C1127;
    const double C16224 = C31899 * C1127;
    const double C16784 = C14625 * C1127;
    const double C19592 = C31902 * C1127;
    const double C7179 = C32126 * C1128;
    const double C11362 = C32126 * C1128;
    const double C12699 = C31899 * C1128;
    const double C16786 = C31899 * C1128;
    const double C19594 = C17324 * C1128;
    const double C12486 = C31899 * C2535;
    const double C13551 = C31836 * C2535;
    const double C16561 = C31899 * C2535;
    const double C13414 = C13410 * C30856;
    const double C22269 = C13410 * C15424;
    const double C31550 = C31548 + C31543;
    const double C2696 = C2675 - C2676;
    const double C5295 = C5275 - C5276;
    const double C14673 = C14652 - C14653;
    const double C1765 = C586 - C585;
    const double C2380 = C585 - C586;
    const double C4181 = C3198 - C3197;
    const double C4923 = C3197 - C3198;
    const double C2033 = C1768 - C1769;
    const double C2382 = C1769 - C1768;
    const double C12473 = C4498 - C4497;
    const double C12900 = C4497 - C4498;
    const double C4920 = C3191 - C3192;
    const double C4916 = C3192 - C3191;
    const double C8968 = C5845 - C5846;
    const double C8962 = C5846 - C5845;
    const double C16992 = C15168 - C15169;
    const double C16988 = C15169 - C15168;
    const double C12470 = C4492 - C4491;
    const double C6865 = C6845 - C6846;
    const double C16569 = C16544 - C16545;
    const double C14115 = C12482 - C12481;
    const double C27547 = C16557 - C16556;
    const double C11755 = C11751 + C11752;
    const double C257 = (C31073 * (3 * C31107 + C31074 * C31127) +
                         (3 * C31392 + C31074 * C31397) * be) /
                        C30830;
    const double C265 =
        (2 * C31095 + C31074 * C31107 +
         C31073 * (C31073 * C31127 + C31397 * be) + C31073 * C31397 * be) /
        C30830;
    const double C687 = (C31287 * (C31073 * C31127 + C31397 * be)) / C30830;
    const double C124 = 4 * (2 * C31390 + C31074 * C31392) +
                        C31074 * (3 * C31392 + C31074 * C31397);
    const double C243 = C31073 * (3 * C31392 + C31074 * C31397);
    const double C247 = 2 * C31390 + C31074 * C31392 + C31397 * C31254;
    const double C348 = C31287 * (3 * C31392 + C31074 * C31397);
    const double C352 = 2 * C31390 + C31074 * C31392 + C31397 * C31291;
    const double C679 = C31287 * C31073 * C31397;
    const double C1290 =
        2 * C31073 * C31397 + C31073 * (C31397 + C31220 * C31254);
    const double C1464 = C31287 * (C31397 + C31220 * C31254);
    const double C2204 = C31073 * C31397 + C31073 * C31220 * C31291;
    const double C2370 =
        2 * C31287 * C31397 + C31287 * (C31397 + C31220 * C31291);
    const double C2221 = C113 * C1115;
    const double C4503 = C2655 * C1115;
    const double C16232 = C14632 * C1115;
    const double C990 =
        (3 * (C31107 + C31073 * C31484 + C31482 * be) +
         C31073 * (2 * C31484 +
                   C31073 * (C31123 + C31073 * (C31073 * C31147 + C31215 * be) +
                             C31073 * C31215 * be) +
                   C31485 * be) +
         (2 * C31482 + C31073 * C31485) * be) /
        C30830;
    const double C1121 =
        (C31287 * (C31107 + C31073 * C31484 + C31482 * be)) / C30830;
    const double C1131 =
        (C31073 * C31107 + C31392 * be + C31484 * C31291) / C30830;
    const double C1132 = (C31107 + C31073 * C31484 + C31482 * be +
                          (C31123 + C31073 * (C31073 * C31147 + C31215 * be) +
                           C31073 * C31215 * be) *
                              C31291) /
                         C30830;
    const double C1645 =
        (C31287 * (2 * C31484 +
                   C31073 * (C31123 + C31073 * (C31073 * C31147 + C31215 * be) +
                             C31073 * C31215 * be) +
                   C31485 * be)) /
        C30830;
    const double C2537 =
        (2 * C31287 * C31484 +
         C31287 * (C31484 + (C31073 * C31147 + C31215 * be) * C31291)) /
        C30830;
    const double C7835 = C32136 * C988;
    const double C15791 = C32136 * C988;
    const double C7981 = C32136 * C1643;
    const double C8757 = C32126 * C1643;
    const double C15937 = C32136 * C1643;
    const double C19800 = C17324 * C1643;
    const double C21550 = C32126 * C1643;
    const double C7178 = C5250 * C1114;
    const double C11361 = C814 * C1114;
    const double C12698 = C2655 * C1114;
    const double C16785 = C14632 * C1114;
    const double C8756 = C5250 * C1639;
    const double C21549 = C814 * C1639;
    const double C31592 = C31109 + C31590;
    const double C31199 = C31198 + C31194;
    const double C989 = (3 * (C31181 + C31174 * C31254) +
                         C31073 * (2 * C31259 + C31073 * C31264)) /
                        C30830;
    const double C1130 = (C31181 + C31174 * C31254 + C31264 * C31291) / C30830;
    const double C1644 = (C31287 * (2 * C31259 + C31073 * C31264)) / C30830;
    const double C31347 = C31122 + C31343;
    const double C11928 =
        (4 * (2 * C31287 * C31174 + C31287 * C31639) +
         C31287 *
             (3 * C31639 + C31287 * (2 * C31287 * C31196 +
                                     C31287 * (C31196 + C31216 * C31291)))) /
        C30830;
    const double C6142 = 4 * (2 * C31466 + C31073 * C31469) +
                         C31073 * (3 * C31469 + C31073 * C31549);
    const double C6212 = C31287 * (3 * C31469 + C31073 * C31549);
    const double C6213 = 2 * C31466 + C31073 * C31469 + C31549 * C31291;
    const double C7331 =
        2 * C31287 * C31549 + C31287 * (C31549 + C31567 * C31291);
    const double C31568 = C31566 + C31561;
    const double C12017 =
        (4 * (2 * C31287 * C31542 + C31287 * C31642) +
         C31287 * (3 * C31642 + C31287 * (2 * C31287 * C31560 +
                                          C31287 * (C31560 + (C31073 * C31143 +
                                                              C31207 * be) *
                                                                 C31291)))) /
        C30830;
    const double C11730 =
        5 * (3 * C31727 + C31287 * C31734) +
        C31287 * (4 * C31734 +
                  C31287 * (3 * C31732 +
                            C31287 * (2 * C31287 * C31169 +
                                      C31287 * (C31169 + C31207 * C31291))));
    const double C31186 = C31185 + C31184;
    const double C996 =
        (3 * (C31106 + be * C31259 + C31073 * C31263) +
         be * (2 * C31259 + C31073 * C31264) +
         C31073 * (2 * C31263 + be * C31264 +
                   C31073 * (C31122 + be * C31073 * C31196 +
                             C31073 * (be * C31196 + C31073 * C31146)))) /
        C30835;
    const double C1136 =
        ((zP - zQ) * (C31106 + be * C31259 + C31073 * C31263)) / C30835;
    const double C1140 =
        (be * C31181 + C31073 * C31106 + C31263 * std::pow(zP - zQ, 2)) /
        C30835;
    const double C1141 = (C31106 + be * C31259 + C31073 * C31263 +
                          (C31122 + be * C31073 * C31196 +
                           C31073 * (be * C31196 + C31073 * C31146)) *
                              std::pow(zP - zQ, 2)) /
                         C30835;
    const double C1648 =
        ((zP - zQ) * (2 * C31263 + be * C31264 +
                      C31073 * (C31122 + be * C31073 * C31196 +
                                C31073 * (be * C31196 + C31073 * C31146)))) /
        C30835;
    const double C2540 =
        (2 * C31287 * C31263 +
         C31287 * (C31263 + (be * C31196 + C31073 * C31146) * C31291)) /
        C30835;
    const double C2219 = C113 * C1129;
    const double C4499 = C2655 * C1129;
    const double C7182 = C5249 * C1129;
    const double C11365 = C813 * C1129;
    const double C12700 = C2654 * C1129;
    const double C16229 = C14632 * C1129;
    const double C12489 = C2655 * C2536;
    const double C13552 = C113 * C2536;
    const double C16564 = C14632 * C2536;
    const double C13411 = C2043 - C2042;
    const double C13685 = C2042 - C2043;
    const double C6866 = C6847 - C6848;
    const double C11057 = C11038 - C11039;
    const double C6148 =
        (4 * (2 * C31255 + be * C31257 + C31073 * C31311) +
         be * (3 * C31257 + C31073 * C31312) +
         C31073 *
             (3 * C31311 + be * C31312 +
              C31073 * (2 * C31305 + be * C31307 +
                        C31073 * (C31118 + be * C31073 * C31193 +
                                  C31073 * (be * C31193 + C31073 * C31142))))) /
        C30835;
    const double C11758 = C11756 + C11757;
    const double C31153 = C31074 * C31151;
    const double C1291 =
        (2 * (C31073 * C31127 + C31397 * be) +
         C31073 * (C31127 + C31073 * (C31073 * C31151 + C31220 * be) +
                   C31073 * C31220 * be) +
         (C31397 + C31220 * C31254) * be) /
        C30830;
    const double C1465 =
        (C31287 * (C31127 + C31073 * (C31073 * C31151 + C31220 * be) +
                   C31073 * C31220 * be)) /
        C30830;
    const double C2205 = (C31073 * C31127 + C31397 * be +
                          (C31073 * C31151 + C31220 * be) * C31291) /
                         C30830;
    const double C2371 =
        (2 * C31287 * C31127 + C31287 * (C31127 + C31151 * C31291)) / C30830;
    const double C31152 = C31074 * C31150;
    const double C31268 = C31073 * C31150;
    const double C2019 = (2 * C31287 * C31126 +
                          C31287 * (C31126 + C31150 * std::pow(C31287, 2))) /
                         C30835;
    const double C2022 =
        (3 * (C31126 + C31150 * C31291) +
         C31287 * (2 * C31287 * C31150 +
                   C31287 * (C31150 + (C31142 + ae * C31074 * C31143 +
                                       C31074 * (ae * C31143 +
                                                 C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085)) *
                                          C31291))) /
        C30835;
    const double C31348 = C31073 * C31344;
    const double C11843 =
        (3 * (C31263 + C31344 * C31291) +
         C31287 * (2 * C31287 * C31344 +
                   C31287 * (C31344 + (be * C31216 +
                                       C31073 * (ae * C31143 +
                                                 C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085)) *
                                          C31291))) /
        C30835;
    const double C11929 =
        (4 * (2 * C31287 * C31122 + C31287 * C31373) +
         C31287 * (3 * C31373 +
                   C31287 * (2 * C31287 * C31146 +
                             C31287 * (C31146 + (ae * C31143 +
                                                 C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085) *
                                                    C31291)))) /
        C30835;
    const double C31331 = C31073 * C31329;
    const double C6821 =
        (2 * C31287 * C31311 + C31287 * (C31311 + C31329 * C31291)) / C30835;
    const double C6823 =
        (3 * (C31311 + C31329 * C31291) +
         C31287 * (2 * C31287 * C31329 +
                   C31287 * (C31329 + (C31142 + be * C31073 * C31209 +
                                       C31073 * (be * C31209 +
                                                 C31073 * std::pow(C31076, 8) *
                                                     bs[8] * C31085)) *
                                          C31291))) /
        C30835;
    const double C12019 =
        (4 * (2 * C31287 * C31305 + C31287 * C31376) +
         C31287 * (3 * C31376 +
                   C31287 * (2 * C31287 * C31323 +
                             C31287 * (C31323 + (be * C31209 +
                                                 C31073 * std::pow(C31076, 8) *
                                                     bs[8] * C31085) *
                                                    C31291)))) /
        C30835;
    const double C11736 =
        (5 * (3 * C31362 + C31287 * C31369) +
         C31287 * (4 * C31369 +
                   C31287 * (3 * C31367 +
                             C31287 * (2 * C31287 * C31142 +
                                       C31287 * (C31142 + std::pow(C31076, 8) *
                                                              bs[8] * C31085 *
                                                              C31291))))) /
        C30835;
    const double C31223 = C31221 + C31214;
    const double C31349 = C31073 * C31346;
    const double C7171 =
        (2 * C31287 * C31264 + C31287 * (C31264 + C31346 * C31291)) / C30830;
    const double C31332 = C31073 * C31330;
    const double C7333 =
        (2 * C31287 * C31312 + C31287 * (C31312 + C31330 * C31291)) / C30830;
    const double C165 = C31836 * C136;
    const double C592 = C31836 * C362;
    const double C1775 = C31836 * C370;
    const double C7358 = C5250 * C6219;
    const double C11537 = C814 * C6219;
    const double C31402 = C31400 + C31401;
    const double C6306 = 4 * (2 * C31474 + C31073 * C31477) +
                         C31073 * (3 * C31477 + C31073 * C31593);
    const double C6392 = C31287 * (3 * C31477 + C31073 * C31593);
    const double C7019 = 2 * C31474 + C31073 * C31477 + C31593 * C31291;
    const double C31571 = C31559 + C31569;
    const double C32104 = C31937 * C31931;
    const double C32140 = C32106 + C31937;
    const double C32108 = C31944 / C30836;
    const double C32105 = C31944 * C31931;
    const double C13203 = C32165 - (C31937 * C31933) / C30830;
    const double C30879 = C30870 - C30876;
    const double C30869 = C30864 * be;
    const double C118 =
        (C30891 / C30836 + (0 * ae) / C30830) / C30836 - (0 * be) / C30830;
    const double C2659 = C30891 / C30836 - (0 * be) / C30830;
    const double C14636 = C30891 / C30836 + (0 * ae) / C30830;
    const double C30868 = C30863 * ae;
    const double C815 =
        ((-C30831 / C30830) / C30836 - (C30849 * be) / C30830) / C30836 -
        ((C30828 * ((-C30838) / C30836 - (C30863 * be) / C30830) + C15417) *
         be) /
            C30830 +
        (-C30850 / C30830) / C30836 - (0 * be) / C30830;
    const double C816 =
        ((-C30838) / C30836 - (C30863 * be) / C30830) / C30836 -
        ((C30828 * ((-C30850 / C30830) / C30836 - (0 * be) / C30830) + C31762) *
         be) /
            C30830;
    const double C15423 = (-C30838) / C30836 - (C30863 * be) / C30830;
    const double C32110 = C32075 / C30830;
    const double C32146 = C32114 / C30836;
    const double C32147 = C32116 + C32083;
    const double C2652 = C32083 - C31763 / C30842;
    const double C32113 = C32079 / C30830;
    const double C31002 = C30997 - C31000;
    const double C30977 = C30973 * ae;
    const double C14631 = (-C30959) / C30836 - (C30973 * be) / C30830;
    const double C30986 = C30982 * be;
    const double C17352 = C31010 * C246;
    const double C17346 = C31010 * C262;
    const double C17340 = C31010 * C245;
    const double C17763 = C31010 * C976;
    const double C17757 = C31010 * C983;
    const double C17751 = C31010 * C975;
    const double C17933 = C31010 * C1110;
    const double C17927 = C31010 * C1120;
    const double C17921 = C31010 * C1109;
    const double C19593 = C31010 * C1114;
    const double C19587 = C31010 * C1126;
    const double C19581 = C31010 * C1112;
    const double C19576 = C31010 * C1118;
    const double C19570 = C31010 * C1108;
    const double C19799 = C31010 * C1639;
    const double C20225 = C31010 * C1642;
    const double C20219 = C31010 * C1638;
    const double C30353 = C31010 * C6816;
    const double C30347 = C31010 * C6812;
    const double C30810 = C31010 * C6219;
    const double C6078 =
        (C31010 / C30836 + (0 * ae) / C30830) / C30836 - (0 * be) / C30830;
    const double C7466 = C31010 / C30836 - (0 * be) / C30830;
    const double C15422 = C31010 / C30836 + (0 * ae) / C30830;
    const double C32131 = C32098 / C30830;
    const double C32153 = C32134 / C30836;
    const double C859 = C839 - C840;
    const double C856 = C833 - C834;
    const double C21761 = C1477 - C1478;
    const double C21755 = C1478 - C1477;
    const double C21758 = C1471 - C1472;
    const double C21752 = C1472 - C1471;
    const double C11056 = C11036 - C11037;
    const double C11053 = C11030 - C11031;
    const double C32154 = C32135 + C32102;
    const double C7459 = C32102 - C31900 / C30842;
    const double C32133 = C32099 / C30830;
    const double C7495 = C7457 * C142;
    const double C7487 = C7457 * C130;
    const double C7478 = C7457 * C141;
    const double C7470 = C7457 * C128;
    const double C7837 = C7457 * C270;
    const double C7829 = C7457 * C251;
    const double C7983 = C7457 * C375;
    const double C7975 = C7457 * C356;
    const double C9491 = C7457 * C379;
    const double C9483 = C7457 * C364;
    const double C9474 = C7457 * C374;
    const double C9466 = C7457 * C354;
    const double C9897 = C7457 * C691;
    const double C9889 = C7457 * C681;
    const double C5294 = C5273 - C5274;
    const double C5291 = C5267 - C5268;
    const double C8967 = C5843 - C5844;
    const double C8961 = C5844 - C5843;
    const double C8964 = C5837 - C5838;
    const double C8958 = C5838 - C5837;
    const double C6864 = C6843 - C6844;
    const double C6861 = C6837 - C6838;
    const double C12491 = C12467 + C12468;
    const double C14125 = C14112 + C14113;
    const double C2703 = C2697 + C2698;
    const double C2034 = C1778 * C817;
    const double C10241 = C1778 * C5253;
    const double C24024 = C1778 * C30891;
    const double C4183 = C4179 + C4180;
    const double C4929 = C4921 + C4922;
    const double C167 = C31836 * C145;
    const double C486 = C31836 * C272;
    const double C852 = C32149 * C272;
    const double C2683 = C31899 * C272;
    const double C3052 = C32095 * C272;
    const double C5288 = C5243 * C272;
    const double C14660 = C31899 * C272;
    const double C15029 = C14625 * C272;
    const double C17368 = C31902 * C272;
    const double C590 = C31836 * C377;
    const double C3206 = C32095 * C377;
    const double C15183 = C14625 * C377;
    const double C1772 = C31836 * C381;
    const double C4506 = C32095 * C381;
    const double C16235 = C14625 * C381;
    const double C21759 = C1473 - C1474;
    const double C21753 = C1474 - C1473;
    const double C8966 = C5841 - C5842;
    const double C8960 = C5842 - C5841;
    const double C12472 = C4496 - C4495;
    const double C12899 = C4495 - C4496;
    const double C16547 = C16224 - C16225;
    const double C16994 = C16225 - C16224;
    const double C6144 =
        (4 * (2 * C31468 + C31073 * C31550 + C31469 * be) +
         C31073 *
             (3 * C31550 +
              C31073 *
                  (2 * C31542 +
                   C31073 * (C31103 + C31073 * (C31073 * C31119 + C31169 * be) +
                             C31073 * C31169 * be) +
                   C31544 * be) +
              C31549 * be) +
         (3 * C31469 + C31073 * C31549) * be) /
        C30830;
    const double C2702 = C2695 + C2696;
    const double C2051 = C2033 * C810;
    const double C10240 = C2033 * C32145;
    const double C13407 = C2033 * C31762;
    const double C22266 = C2033 * C31762;
    const double C24023 = C2033 * C31765;
    const double C4928 = C4919 + C4920;
    const double C4926 = C4915 + C4916;
    const double C12492 = C12469 + C12470;
    const double C14126 = C14114 + C14115;
    const double C488 = C31836 * C257;
    const double C2688 = C31899 * C257;
    const double C14665 = C31899 * C257;
    const double C848 = C32126 * C265;
    const double C3050 = C31899 * C265;
    const double C5284 = C32126 * C265;
    const double C15027 = C31899 * C265;
    const double C17364 = C17324 * C265;
    const double C3204 = C31899 * C687;
    const double C3768 = C31836 * C687;
    const double C15181 = C31899 * C687;
    const double C164 = C113 * C124;
    const double C487 = C113 * C243;
    const double C2687 = C2655 * C243;
    const double C14664 = C14632 * C243;
    const double C847 = C814 * C247;
    const double C3049 = C2655 * C247;
    const double C5283 = C5250 * C247;
    const double C15026 = C14632 * C247;
    const double C17363 = C31010 * C247;
    const double C591 = C113 * C348;
    const double C1774 = C113 * C352;
    const double C3203 = C2655 * C679;
    const double C3767 = C113 * C679;
    const double C15180 = C14632 * C679;
    const double C1486 = C32126 * C1121;
    const double C4714 = C31899 * C1121;
    const double C5854 = C32126 * C1121;
    const double C17934 = C17324 * C1121;
    const double C18728 = C31899 * C1121;
    const double C2222 = C31836 * C1131;
    const double C4504 = C31899 * C1131;
    const double C16233 = C31899 * C1131;
    const double C31594 = C31592 + C31587;
    const double C31200 = C31074 * C31199;
    const double C31204 = 3 * C31199;
    const double C31267 = be * C31199;
    const double C31266 = C31073 * C31199;
    const double C7184 = C5250 * C1130;
    const double C11367 = C814 * C1130;
    const double C12702 = C2655 * C1130;
    const double C16789 = C14632 * C1130;
    const double C19599 = C31010 * C1130;
    const double C8762 = C5250 * C1644;
    const double C19805 = C31010 * C1644;
    const double C21555 = C814 * C1644;
    const double C7352 = C5250 * C6213;
    const double C11531 = C814 * C6213;
    const double C30804 = C31010 * C6213;
    const double C31570 = C31073 * C31568;
    const double C6815 =
        (2 * C31287 * C31550 + C31287 * (C31550 + C31568 * C31291)) / C30830;
    const double C6818 =
        (3 * (C31550 + C31568 * C31291) +
         C31287 *
             (2 * C31287 * C31568 +
              C31287 *
                  (C31568 + (C31119 + C31073 * (C31073 * C31143 + C31207 * be) +
                             C31073 * C31207 * be) *
                                C31291))) /
        C30830;
    const double C276 =
        (C31092 + ae * C31095 + C31074 * C31106 + be * C31073 * C31186 +
         C31073 * (be * C31186 + C31073 * C31126)) /
        C30835;
    const double C693 = ((zP - zQ) * (be * C31186 + C31073 * C31126)) / C30835;
    const double C994 = (2 * (be * C31186 + C31073 * C31126) +
                         be * (C31186 + C31199 * std::pow(C31073, 2)) +
                         C31073 * (C31126 + be * C31073 * C31199 +
                                   C31073 * (be * C31199 + C31073 * C31150))) /
                        C30835;
    const double C135 = (3 * (C31177 + C31074 * C31181 + C31390 * ae) +
                         C31074 * (2 * C31181 + C31074 * C31186 + C31392 * ae) +
                         (2 * C31390 + C31074 * C31392) * ae) /
                        C30830;
    const double C256 =
        (C31073 * (2 * C31181 + C31074 * C31186 + C31392 * ae)) / C30830;
    const double C264 =
        (C31177 + C31074 * C31181 + C31390 * ae + C31186 * C31254) / C30830;
    const double C361 =
        (C31287 * (2 * C31181 + C31074 * C31186 + C31392 * ae)) / C30830;
    const double C369 =
        (C31177 + C31074 * C31181 + C31390 * ae + C31186 * C31291) / C30830;
    const double C686 = (C31287 * C31073 * C31186) / C30830;
    const double C985 =
        (2 * C31073 * C31186 + C31073 * (C31186 + C31199 * C31254)) / C30830;
    const double C1122 = (C31287 * (C31186 + C31199 * C31254)) / C30830;
    const double C2010 =
        (2 * C31287 * C31186 + C31287 * (C31186 + C31199 * C31291)) / C30830;
    const double C7843 = C32136 * C996;
    const double C15799 = C32136 * C996;
    const double C1480 = C32126 * C1136;
    const double C4710 = C31899 * C1136;
    const double C5848 = C32126 * C1136;
    const double C8761 = C5243 * C1136;
    const double C16782 = C31899 * C1136;
    const double C17928 = C17324 * C1136;
    const double C19804 = C31902 * C1136;
    const double C21554 = C32149 * C1136;
    const double C2220 = C31836 * C1140;
    const double C4500 = C31899 * C1140;
    const double C7183 = C5243 * C1140;
    const double C11366 = C32149 * C1140;
    const double C12701 = C32095 * C1140;
    const double C16228 = C31899 * C1140;
    const double C16788 = C14625 * C1140;
    const double C19598 = C31902 * C1140;
    const double C7185 = C32126 * C1141;
    const double C11368 = C32126 * C1141;
    const double C12703 = C31899 * C1141;
    const double C16790 = C31899 * C1141;
    const double C19600 = C17324 * C1141;
    const double C7989 = C32136 * C1648;
    const double C8763 = C32126 * C1648;
    const double C15945 = C32136 * C1648;
    const double C19806 = C17324 * C1648;
    const double C21556 = C32126 * C1648;
    const double C12490 = C31899 * C2540;
    const double C13553 = C31836 * C2540;
    const double C16565 = C31899 * C2540;
    const double C13415 = C13411 * C31762;
    const double C22270 = C13411 * C31762;
    const double C31155 = C31135 + C31153;
    const double C31154 = C31136 + C31152;
    const double C2047 = C31836 * C2019;
    const double C31350 = C31347 + C31348;
    const double C31333 = C31321 + C31331;
    const double C6860 = C32126 * C6821;
    const double C11051 = C32126 * C6821;
    const double C14527 = C31899 * C6821;
    const double C27959 = C31899 * C6821;
    const double C30354 = C17324 * C6821;
    const double C31224 = C31074 * C31223;
    const double C31269 = C31223 * C31254;
    const double C2016 =
        (3 * (C31186 + C31199 * C31291) +
         C31287 * (2 * C31287 * C31199 + C31287 * (C31199 + C31223 * C31291))) /
        C30830;
    const double C31351 = C31345 + C31349;
    const double C31334 = C31319 + C31332;
    const double C125 = 5 * (3 * C31392 + C31074 * C31397) +
                        C31074 * (4 * C31397 + C31074 * C31402);
    const double C248 = 3 * C31392 + C31074 * C31397 + C31402 * C31254;
    const double C353 = 3 * C31392 + C31074 * C31397 + C31402 * C31291;
    const double C470 = C31073 * (4 * C31397 + C31074 * C31402);
    const double C574 = C31287 * (4 * C31397 + C31074 * C31402);
    const double C680 = C31287 * C31073 * C31402;
    const double C6143 = 5 * (3 * C31469 + C31073 * C31549) +
                         C31073 * (4 * C31549 + C31073 * C31571);
    const double C6214 = 3 * C31469 + C31073 * C31549 + C31571 * C31291;
    const double C6478 = C31287 * (4 * C31549 + C31073 * C31571);
    const double C32137 = C32104 / C30830;
    const double C32156 = C32140 / C30836;
    const double C32157 = C32141 + C32108;
    const double C13205 = C32108 - C31942 / C30842;
    const double C32139 = C32105 / C30830;
    const double C30873 = C30869 / C30830;
    const double C30872 = C30868 / C30830;
    const double C2052 = C2048 * C815;
    const double C2050 = C2032 * C816;
    const double C22267 = C11740 * C15423;
    const double C22263 = C2048 * C15423;
    const double C32167 = C32110 + C32159;
    const double C2651 = C32146 - (C31765 * C31748) / C30830;
    const double C105 = C32147 / C30836 - C31763 / C32117;
    const double C32160 = C32113 + C32146;
    const double C30981 = C30977 / C30830;
    const double C14662 = C14631 * C123;
    const double C14659 = C14631 * C133;
    const double C14655 = C14631 * C122;
    const double C14651 = C14631 * C131;
    const double C14647 = C14631 * C121;
    const double C14643 = C14631 * C129;
    const double C14639 = C14631 * C120;
    const double C15024 = C14631 * C242;
    const double C15020 = C14631 * C254;
    const double C15016 = C14631 * C241;
    const double C15012 = C14631 * C252;
    const double C15008 = C14631 * C240;
    const double C15178 = C14631 * C347;
    const double C15174 = C14631 * C359;
    const double C15170 = C14631 * C346;
    const double C15166 = C14631 * C357;
    const double C15162 = C14631 * C345;
    const double C16230 = C14631 * C351;
    const double C16227 = C14631 * C367;
    const double C16223 = C14631 * C350;
    const double C16562 = C14631 * C2008;
    const double C16558 = C14631 * C2000;
    const double C16554 = C14631 * C2006;
    const double C16550 = C14631 * C1999;
    const double C16543 = C14631 * C365;
    const double C16539 = C14631 * C349;
    const double C16535 = C14631 * C355;
    const double C16531 = C14631 * C344;
    const double C16787 = C14631 * C1129;
    const double C16783 = C14631 * C1113;
    const double C16779 = C14631 * C684;
    const double C16775 = C14631 * C677;
    const double C17209 = C14631 * C1125;
    const double C17205 = C14631 * C1111;
    const double C17201 = C14631 * C682;
    const double C17197 = C14631 * C676;
    const double C18725 = C14631 * C678;
    const double C27552 = C14631 * C2012;
    const double C27548 = C14631 * C2002;
    const double C27956 = C14631 * C2534;
    const double C27952 = C14631 * C2530;
    const double C30992 = C30986 / C30830;
    const double C17373 = C17351 - C17352;
    const double C20009 = C17921 - C17922;
    const double C20003 = C17922 - C17921;
    const double C30342 = C19588 - C19587;
    const double C30339 = C19582 - C19581;
    const double C7492 = C7466 * C976;
    const double C7485 = C7466 * C983;
    const double C7477 = C7466 * C975;
    const double C7842 = C7466 * C989;
    const double C7834 = C7466 * C978;
    const double C7988 = C7466 * C1644;
    const double C7980 = C7466 * C1639;
    const double C9496 = C7466 * C6219;
    const double C9488 = C7466 * C6213;
    const double C9481 = C7466 * C1642;
    const double C9473 = C7466 * C1638;
    const double C9902 = C7466 * C6216;
    const double C9894 = C7466 * C6212;
    const double C15448 = C15422 * C976;
    const double C15441 = C15422 * C983;
    const double C15433 = C15422 * C975;
    const double C15798 = C15422 * C989;
    const double C15790 = C15422 * C978;
    const double C15944 = C15422 * C1644;
    const double C15936 = C15422 * C1639;
    const double C26840 = C15422 * C6219;
    const double C26832 = C15422 * C6213;
    const double C26825 = C15422 * C1642;
    const double C26817 = C15422 * C1638;
    const double C27246 = C15422 * C6216;
    const double C27238 = C15422 * C6212;
    const double C32168 = C32131 + C32163;
    const double C7458 = C32153 - (C31902 * C31891) / C30830;
    const double C862 = C858 + C859;
    const double C861 = C855 + C856;
    const double C21766 = C21760 + C21761;
    const double C21764 = C21754 + C21755;
    const double C21765 = C21757 + C21758;
    const double C21763 = C21751 + C21752;
    const double C11059 = C11055 + C11056;
    const double C11058 = C11052 + C11053;
    const double C15447 = C32154 * C263;
    const double C15438 = C32154 * C275;
    const double C15430 = C32154 * C261;
    const double C15797 = C32154 * C993;
    const double C15789 = C32154 * C982;
    const double C15943 = C32154 * C1136;
    const double C15935 = C32154 * C1119;
    const double C26839 = C32154 * C1139;
    const double C26831 = C32154 * C1124;
    const double C26822 = C32154 * C1135;
    const double C26814 = C32154 * C1117;
    const double C27245 = C32154 * C1647;
    const double C27237 = C32154 * C1641;
    const double C6071 = C32154 / C30836 - C31900 / C32117;
    const double C7491 = C7459 * C263;
    const double C7482 = C7459 * C275;
    const double C7474 = C7459 * C261;
    const double C7841 = C7459 * C993;
    const double C7833 = C7459 * C982;
    const double C7987 = C7459 * C1136;
    const double C7979 = C7459 * C1119;
    const double C9495 = C7459 * C1139;
    const double C9487 = C7459 * C1124;
    const double C9478 = C7459 * C1135;
    const double C9470 = C7459 * C1117;
    const double C9901 = C7459 * C1647;
    const double C9893 = C7459 * C1641;
    const double C32164 = C32133 + C32153;
    const double C5298 = C5294 + C5295;
    const double C5297 = C5291 + C5292;
    const double C8973 = C8967 + C8968;
    const double C8971 = C8961 + C8962;
    const double C8972 = C8964 + C8965;
    const double C8970 = C8958 + C8959;
    const double C6868 = C6864 + C6865;
    const double C6867 = C6861 + C6862;
    const double C14110 = C12491 * C6079;
    const double C24907 = C12491 * C15423;
    const double C14127 = C14125 * C6079;
    const double C12493 = C12471 + C12472;
    const double C12902 = C12898 + C12899;
    const double C12496 = C12492 * C32076;
    const double C14111 = C12492 * C31752;
    const double C24908 = C12492 * C15417;
    const double C14128 = C14126 * C31752;
    const double C6307 =
        (4 * (2 * C31476 + C31073 * C31594 + C31477 * be) +
         C31073 * (3 * C31594 +
                   C31073 * (2 * C31586 +
                             C31073 * (C31131 +
                                       C31073 * (C31073 * C31074 * C31143 +
                                                 C31211 * be) +
                                       C31073 * C31211 * be) +
                             C31588 * be) +
                   C31593 * be) +
         (3 * C31477 + C31073 * C31593) * be) /
        C30830;
    const double C6393 =
        (C31287 * (3 * C31594 +
                   C31073 * (2 * C31586 +
                             C31073 * (C31131 +
                                       C31073 * (C31073 * C31074 * C31143 +
                                                 C31211 * be) +
                                       C31073 * C31211 * be) +
                             C31588 * be) +
                   C31593 * be)) /
        C30830;
    const double C7020 =
        (2 * C31476 + C31073 * C31594 + C31477 * be +
         (2 * C31586 +
          C31073 * (C31131 + C31073 * (C31073 * C31074 * C31143 + C31211 * be) +
                    C31073 * C31211 * be) +
          C31588 * be) *
             C31291) /
        C30830;
    const double C7170 =
        (2 * C31287 * C31594 +
         C31287 * (C31594 +
                   (C31131 + C31073 * (C31073 * C31074 * C31143 + C31211 * be) +
                    C31073 * C31211 * be) *
                       C31291)) /
        C30830;
    const double C31201 = C31188 + C31200;
    const double C31270 = C31267 + C31268;
    const double C1133 = (C31073 * C31186 + C31266 * C31291) / C30830;
    const double C2538 =
        (2 * C31287 * C31266 + C31287 * (C31266 + C31073 * C31223 * C31291)) /
        C30830;
    const double C31572 = C31553 + C31570;
    const double C6854 = C32126 * C6815;
    const double C11045 = C32126 * C6815;
    const double C14523 = C31899 * C6815;
    const double C27955 = C31899 * C6815;
    const double C30348 = C17324 * C6815;
    const double C841 = C32126 * C276;
    const double C1316 = C32149 * C276;
    const double C3046 = C31899 * C276;
    const double C5277 = C32126 * C276;
    const double C5688 = C5243 * C276;
    const double C7499 = C7459 * C276;
    const double C15023 = C31899 * C276;
    const double C15455 = C32154 * C276;
    const double C17357 = C17324 * C276;
    const double C17768 = C31902 * C276;
    const double C1490 = C32149 * C693;
    const double C2216 = C31836 * C693;
    const double C3200 = C31899 * C693;
    const double C4716 = C32095 * C693;
    const double C5858 = C5243 * C693;
    const double C15177 = C31899 * C693;
    const double C17938 = C31902 * C693;
    const double C18730 = C14625 * C693;
    const double C1318 = C32126 * C994;
    const double C5690 = C32126 * C994;
    const double C7501 = C32136 * C994;
    const double C15457 = C32136 * C994;
    const double C17770 = C17324 * C994;
    const double C163 = C113 * C135;
    const double C2689 = C2654 * C135;
    const double C14666 = C14631 * C135;
    const double C485 = C113 * C256;
    const double C851 = C813 * C256;
    const double C2684 = C2655 * C256;
    const double C3051 = C2654 * C256;
    const double C5287 = C5249 * C256;
    const double C14661 = C14632 * C256;
    const double C15028 = C14631 * C256;
    const double C842 = C814 * C264;
    const double C1315 = C813 * C264;
    const double C3045 = C2655 * C264;
    const double C5278 = C5250 * C264;
    const double C5687 = C5249 * C264;
    const double C15022 = C14632 * C264;
    const double C17358 = C31010 * C264;
    const double C589 = C113 * C361;
    const double C3205 = C2654 * C361;
    const double C15182 = C14631 * C361;
    const double C1773 = C113 * C369;
    const double C4505 = C2654 * C369;
    const double C16234 = C14631 * C369;
    const double C1489 = C813 * C686;
    const double C2215 = C113 * C686;
    const double C3199 = C2655 * C686;
    const double C4715 = C2654 * C686;
    const double C5857 = C5249 * C686;
    const double C15176 = C14632 * C686;
    const double C18729 = C14631 * C686;
    const double C1317 = C814 * C985;
    const double C5689 = C5250 * C985;
    const double C7500 = C7466 * C985;
    const double C15456 = C15422 * C985;
    const double C17769 = C31010 * C985;
    const double C1491 = C814 * C1122;
    const double C4717 = C2655 * C1122;
    const double C5859 = C5250 * C1122;
    const double C17939 = C31010 * C1122;
    const double C18731 = C14632 * C1122;
    const double C2046 = C113 * C2010;
    const double C21762 = C1479 - C1480;
    const double C21756 = C1480 - C1479;
    const double C8969 = C5847 - C5848;
    const double C8963 = C5848 - C5847;
    const double C20012 = C17927 - C17928;
    const double C20006 = C17928 - C17927;
    const double C12474 = C4500 - C4499;
    const double C12901 = C4499 - C4500;
    const double C16549 = C16228 - C16229;
    const double C16996 = C16229 - C16228;
    const double C138 = (5 * (3 * C31107 + C31074 * C31127) +
                         C31074 * (4 * C31127 + C31074 * C31155)) /
                        C30830;
    const double C267 =
        (3 * C31107 + C31074 * C31127 +
         C31073 * (C31073 * C31155 + C31402 * be) + C31073 * C31402 * be) /
        C30830;
    const double C372 =
        (3 * C31107 + C31074 * C31127 + C31155 * C31291) / C30830;
    const double C471 = (C31073 * (4 * C31127 + C31074 * C31155) +
                         (4 * C31397 + C31074 * C31402) * be) /
                        C30830;
    const double C575 = (C31287 * (4 * C31127 + C31074 * C31155)) / C30830;
    const double C689 = (C31287 * (C31073 * C31155 + C31402 * be)) / C30830;
    const double C146 =
        (5 * (3 * C31126 + ae * C31127 + C31074 * C31154) +
         ae * (4 * C31127 + C31074 * C31155) +
         C31074 *
             (4 * C31154 + ae * C31155 +
              C31074 *
                  (3 * C31150 + ae * C31151 +
                   C31074 * (2 * C31146 + ae * C31147 +
                             C31074 * (C31142 + ae * C31074 * C31143 +
                                       C31074 * (ae * C31143 +
                                                 C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085)))))) /
        C30835;
    const double C273 =
        (be * (3 * (C31164 + C31074 * C31174 + C31168 * ae) +
               C31074 * (2 * C31174 +
                         C31074 * (C31170 +
                                   C31074 * (C31074 * C31111 * C31112 * C31159 +
                                             C31169 * ae) +
                                   C31074 * C31169 * ae) +
                         C31173 * ae) +
               (2 * C31168 + C31074 * C31173) * ae) +
         C31073 * (3 * C31126 + ae * C31127 + C31074 * C31154)) /
        C30835;
    const double C378 =
        ((zP - zQ) * (3 * C31126 + ae * C31127 + C31074 * C31154)) / C30835;
    const double C382 = (2 * C31106 + ae * C31107 + C31074 * C31126 +
                         C31154 * std::pow(zP - zQ, 2)) /
                        C30835;
    const double C383 =
        (3 * C31126 + ae * C31127 + C31074 * C31154 +
         (3 * C31150 + ae * C31151 +
          C31074 *
              (2 * C31146 + ae * C31147 +
               C31074 * (C31142 + ae * C31074 * C31143 +
                         C31074 * (ae * C31143 + C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085)))) *
             std::pow(zP - zQ, 2)) /
        C30835;
    const double C577 =
        ((zP - zQ) *
         (4 * C31154 + ae * C31155 +
          C31074 * (3 * C31150 + ae * C31151 +
                    C31074 * (2 * C31146 + ae * C31147 +
                              C31074 * (C31142 + ae * C31074 * C31143 +
                                        C31074 * (ae * C31143 +
                                                  C31074 * std::pow(C31076, 8) *
                                                      bs[8] * C31085)))))) /
        C30835;
    const double C2373 =
        (2 * C31287 * C31154 +
         C31287 * (C31154 + (2 * C31146 + ae * C31147 +
                             C31074 * (C31142 + ae * C31074 * C31143 +
                                       C31074 * (ae * C31143 +
                                                 C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085))) *
                                C31291)) /
        C30835;
    const double C7022 =
        (2 * C31263 + be * C31264 + C31073 * C31350 +
         (2 * C31344 + be * C31346 +
          C31073 *
              (C31146 + be * C31073 * C31216 +
               C31073 * (be * C31216 +
                         C31073 * (ae * C31143 + C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085)))) *
             C31291) /
        C30835;
    const double C7172 =
        (2 * C31287 * C31350 +
         C31287 * (C31350 + (C31146 + be * C31073 * C31216 +
                             C31073 * (be * C31216 +
                                       C31073 * (ae * C31143 +
                                                 C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085))) *
                                C31291)) /
        C30835;
    const double C6221 =
        (C31287 * (3 * C31311 + be * C31312 + C31073 * C31333)) / C30835;
    const double C6222 =
        (2 * C31255 + be * C31257 + C31073 * C31311 + C31333 * C31291) / C30835;
    const double C6223 =
        (3 * C31311 + be * C31312 + C31073 * C31333 +
         (3 * C31329 + be * C31330 +
          C31073 *
              (2 * C31323 + be * C31325 +
               C31073 * (C31142 + be * C31073 * C31209 +
                         C31073 * (be * C31209 + C31073 * std::pow(C31076, 8) *
                                                     bs[8] * C31085)))) *
             C31291) /
        C30835;
    const double C7334 =
        (2 * C31287 * C31333 +
         C31287 * (C31333 + (2 * C31323 + be * C31325 +
                             C31073 * (C31142 + be * C31073 * C31209 +
                                       C31073 * (be * C31209 +
                                                 C31073 * std::pow(C31076, 8) *
                                                     bs[8] * C31085))) *
                                C31291)) /
        C30835;
    const double C31225 = C31205 + C31224;
    const double C31271 = C31199 + C31269;
    const double C6309 =
        (4 * (2 * C31263 + be * C31264 + C31073 * C31350) +
         be * (3 * C31264 + C31073 * C31351) +
         C31073 *
             (3 * C31350 + be * C31351 +
              C31073 *
                  (2 * C31344 + be * C31346 +
                   C31073 * (C31146 + be * C31073 * C31216 +
                             C31073 * (be * C31216 +
                                       C31073 * (ae * C31143 +
                                                 C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085)))))) /
        C30835;
    const double C6395 =
        (C31287 *
         (3 * C31350 + be * C31351 +
          C31073 * (2 * C31344 + be * C31346 +
                    C31073 * (C31146 + be * C31073 * C31216 +
                              C31073 * (be * C31216 +
                                        C31073 * (ae * C31143 +
                                                  C31074 * std::pow(C31076, 8) *
                                                      bs[8] * C31085)))))) /
        C30835;
    const double C6308 = (4 * (2 * C31259 + C31073 * C31264) +
                          C31073 * (3 * C31264 + C31073 * C31351)) /
                         C30830;
    const double C6394 = (C31287 * (3 * C31264 + C31073 * C31351)) / C30830;
    const double C7021 =
        (2 * C31259 + C31073 * C31264 + C31351 * C31291) / C30830;
    const double C6149 =
        (5 * (3 * C31311 + be * C31312 + C31073 * C31333) +
         be * (4 * C31312 + C31073 * C31334) +
         C31073 *
             (4 * C31333 + be * C31334 +
              C31073 *
                  (3 * C31329 + be * C31330 +
                   C31073 * (2 * C31323 + be * C31325 +
                             C31073 * (C31142 + be * C31073 * C31209 +
                                       C31073 * (be * C31209 +
                                                 C31073 * std::pow(C31076, 8) *
                                                     bs[8] * C31085)))))) /
        C30835;
    const double C6481 =
        (C31287 *
         (4 * C31333 + be * C31334 +
          C31073 * (3 * C31329 + be * C31330 +
                    C31073 * (2 * C31323 + be * C31325 +
                              C31073 * (C31142 + be * C31073 * C31209 +
                                        C31073 * (be * C31209 +
                                                  C31073 * std::pow(C31076, 8) *
                                                      bs[8] * C31085)))))) /
        C30835;
    const double C6147 = (5 * (3 * C31257 + C31073 * C31312) +
                          C31073 * (4 * C31312 + C31073 * C31334)) /
                         C30830;
    const double C6220 =
        (3 * C31257 + C31073 * C31312 + C31334 * C31291) / C30830;
    const double C6480 = (C31287 * (4 * C31312 + C31073 * C31334)) / C30830;
    const double C32169 = C32137 + C32165;
    const double C13204 = C32156 - (C31944 * C31933) / C30830;
    const double C11603 = C32157 / C30836 - C31942 / C32117;
    const double C32166 = C32139 + C32156;
    const double C30875 = C30872 - C30851;
    const double C2054 = C2052 + C2053;
    const double C22272 = C22267 + C22268;
    const double C22271 = C22263 + C22264;
    const double C102 =
        (C32158 + 2 * C31757) / C30836 - (C32167 * C31748) / C30830;
    const double C103 =
        (C32145 + 2 * C31765 + C32167) / C30836 - (C32160 * C31748) / C30830;
    const double C104 = (C32115 + C31762 / C30830 + C32160) / C30836 -
                        (C32147 * C31748) / C30830;
    const double C30985 = C30981 - C30962;
    const double C14676 = C14658 - C14659;
    const double C14674 = C14654 - C14655;
    const double C14672 = C14650 - C14651;
    const double C14670 = C14646 - C14647;
    const double C18235 = C15175 - C15174;
    const double C18929 = C15174 - C15175;
    const double C18233 = C15171 - C15170;
    const double C18927 = C15170 - C15171;
    const double C16991 = C15166 - C15167;
    const double C16987 = C15167 - C15166;
    const double C16989 = C15162 - C15163;
    const double C16985 = C15163 - C15162;
    const double C16548 = C16226 - C16227;
    const double C16995 = C16227 - C16226;
    const double C16546 = C16222 - C16223;
    const double C16993 = C16223 - C16222;
    const double C27546 = C16555 - C16554;
    const double C27544 = C16551 - C16550;
    const double C16568 = C16542 - C16543;
    const double C16566 = C16538 - C16539;
    const double C15451 = C32168 * C142;
    const double C15443 = C32168 * C130;
    const double C15434 = C32168 * C141;
    const double C15426 = C32168 * C128;
    const double C15793 = C32168 * C270;
    const double C15785 = C32168 * C251;
    const double C15939 = C32168 * C375;
    const double C15931 = C32168 * C356;
    const double C26835 = C32168 * C379;
    const double C26827 = C32168 * C364;
    const double C26818 = C32168 * C374;
    const double C26810 = C32168 * C354;
    const double C27241 = C32168 * C691;
    const double C27233 = C32168 * C681;
    const double C6068 =
        (C32161 + 2 * C31895) / C30836 - (C32168 * C31891) / C30830;
    const double C7497 = C7458 * C271;
    const double C7489 = C7458 * C253;
    const double C7480 = C7458 * C270;
    const double C7472 = C7458 * C251;
    const double C7839 = C7458 * C275;
    const double C7831 = C7458 * C261;
    const double C7985 = C7458 * C692;
    const double C7977 = C7458 * C683;
    const double C9493 = C7458 * C1138;
    const double C9485 = C7458 * C1123;
    const double C9476 = C7458 * C691;
    const double C9468 = C7458 * C681;
    const double C9899 = C7458 * C1135;
    const double C9891 = C7458 * C1117;
    const double C863 = C861 + C857;
    const double C21769 = C21765 + C21759;
    const double C21767 = C21763 + C21753;
    const double C11061 = C11059 + C11057;
    const double C11060 = C11058 + C11054;
    const double C15453 = C32164 * C271;
    const double C15445 = C32164 * C253;
    const double C15436 = C32164 * C270;
    const double C15428 = C32164 * C251;
    const double C15795 = C32164 * C275;
    const double C15787 = C32164 * C261;
    const double C15941 = C32164 * C692;
    const double C15933 = C32164 * C683;
    const double C26837 = C32164 * C1138;
    const double C26829 = C32164 * C1123;
    const double C26820 = C32164 * C691;
    const double C26812 = C32164 * C681;
    const double C27243 = C32164 * C1135;
    const double C27235 = C32164 * C1117;
    const double C6069 =
        (C32149 + 2 * C31902 + C32168) / C30836 - (C32164 * C31891) / C30830;
    const double C6070 = (C32126 + C31899 / C30830 + C32164) / C30836 -
                         (C32154 * C31891) / C30830;
    const double C5299 = C5297 + C5293;
    const double C8976 = C8972 + C8966;
    const double C8974 = C8970 + C8960;
    const double C6870 = C6868 + C6866;
    const double C6869 = C6867 + C6863;
    const double C12497 = C12493 * C30856;
    const double C24909 = C12493 * C15424;
    const double C14124 = C14110 + C14111;
    const double C24911 = C24907 + C24908;
    const double C14129 = C14127 + C14128;
    const double C31202 = C31201 + C31192;
    const double C1137 =
        ((zP - zQ) * (C31126 + be * C31266 + C31073 * C31270)) / C30835;
    const double C1142 =
        (be * C31186 + C31073 * C31126 + C31270 * std::pow(zP - zQ, 2)) /
        C30835;
    const double C1143 =
        (C31126 + be * C31266 + C31073 * C31270 +
         (C31150 + be * C31073 * C31223 +
          C31073 *
              (be * C31223 +
               C31073 * (C31142 + ae * C31074 * C31143 +
                         C31074 * (ae * C31143 + C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085)))) *
             std::pow(zP - zQ, 2)) /
        C30835;
    const double C2541 =
        (2 * C31287 * C31270 +
         C31287 * (C31270 + (be * C31223 +
                             C31073 * (C31142 + ae * C31074 * C31143 +
                                       C31074 * (ae * C31143 +
                                                 C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085))) *
                                C31291)) /
        C30835;
    const double C2223 = C113 * C1133;
    const double C4507 = C2655 * C1133;
    const double C16236 = C14632 * C1133;
    const double C31573 = C31572 + C31557;
    const double C173 = C162 - C163;
    const double C2700 = C2683 - C2684;
    const double C14677 = C14660 - C14661;
    const double C860 = C841 - C842;
    const double C5296 = C5277 - C5278;
    const double C17376 = C17357 - C17358;
    const double C3440 = C590 - C589;
    const double C3902 = C589 - C590;
    const double C1779 = C1772 - C1773;
    const double C2384 = C1773 - C1772;
    const double C4182 = C3200 - C3199;
    const double C4924 = C3199 - C3200;
    const double C18236 = C15177 - C15176;
    const double C18930 = C15176 - C15177;
    const double C21770 = C21766 + C21762;
    const double C21768 = C21764 + C21756;
    const double C8977 = C8973 + C8969;
    const double C8975 = C8971 + C8963;
    const double C12494 = C12473 + C12474;
    const double C12903 = C12900 + C12901;
    const double C490 = C31836 * C273;
    const double C2692 = C31899 * C273;
    const double C14669 = C31899 * C273;
    const double C594 = C31836 * C378;
    const double C1777 = C31836 * C382;
    const double C9903 = C32136 * C6221;
    const double C27247 = C32136 * C6221;
    const double C7359 = C32126 * C6222;
    const double C9497 = C32136 * C6222;
    const double C11538 = C32126 * C6222;
    const double C26841 = C32136 * C6222;
    const double C30811 = C17324 * C6222;
    const double C31226 = C31225 + C31217;
    const double C997 =
        (3 * (C31126 + be * C31266 + C31073 * C31270) +
         be * (2 * C31266 + C31073 * C31271) +
         C31073 *
             (2 * C31270 + be * C31271 +
              C31073 *
                  (C31150 + be * C31073 * C31223 +
                   C31073 * (be * C31223 +
                             C31073 * (C31142 + ae * C31074 * C31143 +
                                       C31074 * (ae * C31143 +
                                                 C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085)))))) /
        C30835;
    const double C1649 =
        ((zP - zQ) *
         (2 * C31270 + be * C31271 +
          C31073 * (C31150 + be * C31073 * C31223 +
                    C31073 * (be * C31223 +
                              C31073 * (C31142 + ae * C31074 * C31143 +
                                        C31074 * (ae * C31143 +
                                                  C31074 * std::pow(C31076, 8) *
                                                      bs[8] * C31085)))))) /
        C30835;
    const double C991 = (3 * (C31186 + C31199 * C31254) +
                         C31073 * (2 * C31266 + C31073 * C31271)) /
                        C30830;
    const double C1134 = (C31186 + C31199 * C31254 + C31271 * C31291) / C30830;
    const double C1646 = (C31287 * (2 * C31266 + C31073 * C31271)) / C30830;
    const double C11600 =
        (C32162 + 2 * C31937) / C30836 - (C32169 * C31933) / C30830;
    const double C11601 =
        (C32151 + 2 * C31944 + C32169) / C30836 - (C32166 * C31933) / C30830;
    const double C11602 = (C32129 + C31941 / C30830 + C32166) / C30836 -
                          (C32157 * C31933) / C30830;
    const double C12495 = C12491 * C30875;
    const double C13408 = C11740 * C30875;
    const double C13404 = C2048 * C30875;
    const double C30878 = C30875 / C30836;
    const double C30877 = C30828 * C30875;
    const double C2055 = C2054 + C2050;
    const double C22274 = C22272 + C22269;
    const double C22273 = C22271 + C22265;
    const double C30991 = C30985 / C30836;
    const double C30990 = C30906 * C30985;
    const double C14680 = C14674 + C14675;
    const double C14679 = C14672 + C14673;
    const double C14678 = C14670 + C14671;
    const double C18237 = C18233 + C18234;
    const double C18931 = C18927 + C18928;
    const double C17000 = C16991 + C16992;
    const double C16998 = C16987 + C16988;
    const double C16999 = C16989 + C16990;
    const double C16997 = C16985 + C16986;
    const double C16571 = C16548 + C16549;
    const double C17002 = C16995 + C16996;
    const double C16570 = C16546 + C16547;
    const double C17001 = C16993 + C16994;
    const double C27558 = C27546 + C27547;
    const double C27557 = C27544 + C27545;
    const double C16573 = C16568 + C16569;
    const double C16572 = C16566 + C16567;
    const double C11063 = C11061 * C31752;
    const double C11062 = C11060 * C6079;
    const double C6872 = C6870 * C31752;
    const double C6871 = C6869 * C6079;
    const double C24912 = C24911 + C24909;
    const double C277 =
        (2 * C31106 + ae * C31107 + C31074 * C31126 + be * C31073 * C31202 +
         C31073 * (be * C31202 + C31073 * C31154)) /
        C30835;
    const double C694 = ((zP - zQ) * (be * C31202 + C31073 * C31154)) / C30835;
    const double C137 = (4 * (2 * C31181 + C31074 * C31186 + C31392 * ae) +
                         C31074 * (3 * C31186 + C31074 * C31202 + C31397 * ae) +
                         (3 * C31392 + C31074 * C31397) * ae) /
                        C30830;
    const double C258 =
        (C31073 * (3 * C31186 + C31074 * C31202 + C31397 * ae)) / C30830;
    const double C266 =
        (2 * C31181 + C31074 * C31186 + C31392 * ae + C31202 * C31254) / C30830;
    const double C363 =
        (C31287 * (3 * C31186 + C31074 * C31202 + C31397 * ae)) / C30830;
    const double C371 =
        (2 * C31181 + C31074 * C31186 + C31392 * ae + C31202 * C31291) / C30830;
    const double C688 = (C31287 * C31073 * C31202) / C30830;
    const double C1492 = C32126 * C1137;
    const double C4718 = C31899 * C1137;
    const double C5860 = C32126 * C1137;
    const double C17940 = C17324 * C1137;
    const double C18732 = C31899 * C1137;
    const double C2224 = C31836 * C1142;
    const double C4508 = C31899 * C1142;
    const double C16237 = C31899 * C1142;
    const double C6146 =
        (5 * (3 * C31550 + C31073 * C31573 + C31549 * be) +
         C31073 * (4 * C31573 +
                   C31073 * (3 * C31568 +
                             C31073 * (2 * C31560 +
                                       C31073 * (C31119 +
                                                 C31073 * (C31073 * C31143 +
                                                           C31207 * be) +
                                                 C31073 * C31207 * be) +
                                       C31562 * be) +
                             C31567 * be) +
                   C31571 * be) +
         (4 * C31549 + C31073 * C31571) * be) /
        C30830;
    const double C6215 =
        (C31287 * (3 * C31550 + C31073 * C31573 + C31549 * be)) / C30830;
    const double C6217 =
        (2 * C31468 + C31073 * C31550 + C31469 * be + C31573 * C31291) / C30830;
    const double C6218 =
        (3 * C31550 + C31073 * C31573 + C31549 * be +
         (3 * C31568 +
          C31073 *
              (2 * C31560 +
               C31073 * (C31119 + C31073 * (C31073 * C31143 + C31207 * be) +
                         C31073 * C31207 * be) +
               C31562 * be) +
          C31567 * be) *
             C31291) /
        C30830;
    const double C6479 =
        (C31287 *
         (4 * C31573 +
          C31073 *
              (3 * C31568 +
               C31073 * (2 * C31560 +
                         C31073 * (C31119 +
                                   C31073 * (C31073 * C31143 + C31207 * be) +
                                   C31073 * C31207 * be) +
                         C31562 * be) +
               C31567 * be) +
          C31571 * be)) /
        C30830;
    const double C7332 =
        (2 * C31287 * C31573 +
         C31287 *
             (C31573 +
              (2 * C31560 +
               C31073 * (C31119 + C31073 * (C31073 * C31143 + C31207 * be) +
                         C31073 * C31207 * be) +
               C31562 * be) *
                  C31291)) /
        C30830;
    const double C2704 = C2699 + C2700;
    const double C14681 = C14676 + C14677;
    const double C864 = C862 + C860;
    const double C5300 = C5298 + C5296;
    const double C2035 = C1779 * C32115;
    const double C10242 = C1779 * C32115;
    const double C24025 = C1779 * C17327;
    const double C4184 = C4181 + C4182;
    const double C4930 = C4923 + C4924;
    const double C18238 = C18235 + C18236;
    const double C18932 = C18929 + C18930;
    const double C12498 = C12494 * C31762;
    const double C24910 = C12494 * C31762;
    const double C31227 = C31074 * C31226;
    const double C1293 =
        (2 * (be * C31202 + C31073 * C31154) + be * (C31202 + C31226 * C31254) +
         C31073 *
             (C31154 + be * C31073 * C31226 +
              C31073 *
                  (be * C31226 +
                   C31073 * (2 * C31146 + ae * C31147 +
                             C31074 * (C31142 + ae * C31074 * C31143 +
                                       C31074 * (ae * C31143 +
                                                 C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085)))))) /
        C30835;
    const double C1467 =
        ((zP - zQ) *
         (C31154 + be * C31073 * C31226 +
          C31073 * (be * C31226 +
                    C31073 * (2 * C31146 + ae * C31147 +
                              C31074 * (C31142 + ae * C31074 * C31143 +
                                        C31074 * (ae * C31143 +
                                                  C31074 * std::pow(C31076, 8) *
                                                      bs[8] * C31085)))))) /
        C30835;
    const double C2207 =
        (be * C31202 + C31073 * C31154 +
         (be * C31226 +
          C31073 *
              (2 * C31146 + ae * C31147 +
               C31074 * (C31142 + ae * C31074 * C31143 +
                         C31074 * (ae * C31143 + C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085)))) *
             C31291) /
        C30835;
    const double C1292 =
        (2 * C31073 * C31202 + C31073 * (C31202 + C31226 * C31254)) / C30830;
    const double C1466 = (C31287 * (C31202 + C31226 * C31254)) / C30830;
    const double C2206 = (C31073 * C31202 + C31073 * C31226 * C31291) / C30830;
    const double C2372 =
        (2 * C31287 * C31202 + C31287 * (C31202 + C31226 * C31291)) / C30830;
    const double C12499 = C12495 + C12496;
    const double C13413 = C13408 + C13409;
    const double C13412 = C13404 + C13405;
    const double C30881 = C30878 - C30873;
    const double C5252 = C30878 + (C30864 * ae) / C30830;
    const double C30880 = C30877 + C32076;
    const double C2056 = C2055 + C2051;
    const double C22276 = C22274 + C22270;
    const double C22275 = C22273 + C22266;
    const double C30996 = C30991 - C30992;
    const double C30995 = C30990 + C32095;
    const double C16575 = C16571 * C31762;
    const double C29421 = C16571 * C31762;
    const double C16574 = C16570 * C15424;
    const double C29420 = C16570 * C30856;
    const double C27560 = C27558 * C31752;
    const double C27559 = C27557 * C6079;
    const double C16577 = C16573 * C15417;
    const double C27543 = C16573 * C31752;
    const double C29419 = C16573 * C32076;
    const double C16576 = C16572 * C15423;
    const double C27542 = C16572 * C6079;
    const double C29418 = C16572 * C30875;
    const double C11064 = C11062 + C11063;
    const double C6873 = C6871 + C6872;
    const double C854 = C32126 * C277;
    const double C3054 = C31899 * C277;
    const double C5290 = C32126 * C277;
    const double C15031 = C31899 * C277;
    const double C17370 = C17324 * C277;
    const double C3208 = C31899 * C694;
    const double C3770 = C31836 * C694;
    const double C15185 = C31899 * C694;
    const double C166 = C113 * C137;
    const double C489 = C113 * C258;
    const double C2691 = C2655 * C258;
    const double C14668 = C14632 * C258;
    const double C853 = C814 * C266;
    const double C3053 = C2655 * C266;
    const double C5289 = C5250 * C266;
    const double C15030 = C14632 * C266;
    const double C17369 = C31010 * C266;
    const double C593 = C113 * C363;
    const double C1776 = C113 * C371;
    const double C3207 = C2655 * C688;
    const double C3769 = C113 * C688;
    const double C15184 = C14632 * C688;
    const double C9895 = C32136 * C6215;
    const double C27239 = C32136 * C6215;
    const double C7353 = C32126 * C6217;
    const double C9489 = C32136 * C6217;
    const double C11532 = C32126 * C6217;
    const double C26833 = C32136 * C6217;
    const double C30805 = C17324 * C6217;
    const double C24913 = C24912 + C24910;
    const double C31228 = C31204 + C31227;
    const double C12500 = C12499 + C12497;
    const double C13417 = C13413 + C13414;
    const double C13416 = C13412 + C13406;
    const double C24022 = C2032 * C30881;
    const double C117 =
        (C30881 / C30836 + ((C30828 * C30891 + C17327) * ae) / C30830) /
            C30836 -
        ((C30828 * (C30891 / C30836 + (0 * ae) / C30830) + C32130) * be) /
            C30830;
    const double C2658 =
        C30881 / C30836 - ((C30828 * C30891 + C17327) * be) / C30830;
    const double C14635 =
        C30881 / C30836 + ((C30828 * C30891 + C17327) * ae) / C30830;
    const double C10239 = C2032 * C5252;
    const double C30882 = C30880 * be;
    const double C5251 = C30867 + (C30880 * ae) / C30830 + C30856;
    const double C2057 = C2056 + C2034;
    const double C17367 = C30996 * C256;
    const double C17361 = C30996 * C242;
    const double C17356 = C30996 * C254;
    const double C17350 = C30996 * C241;
    const double C17344 = C30996 * C252;
    const double C17338 = C30996 * C240;
    const double C17767 = C30996 * C264;
    const double C17761 = C30996 * C246;
    const double C17755 = C30996 * C262;
    const double C17749 = C30996 * C245;
    const double C17937 = C30996 * C686;
    const double C17931 = C30996 * C678;
    const double C17925 = C30996 * C684;
    const double C17919 = C30996 * C677;
    const double C19597 = C30996 * C1129;
    const double C19591 = C30996 * C1113;
    const double C19585 = C30996 * C1125;
    const double C19579 = C30996 * C1111;
    const double C19574 = C30996 * C682;
    const double C19568 = C30996 * C676;
    const double C19803 = C30996 * C1120;
    const double C19797 = C30996 * C1109;
    const double C20223 = C30996 * C1118;
    const double C20217 = C30996 * C1108;
    const double C30351 = C30996 * C2534;
    const double C30345 = C30996 * C2530;
    const double C30808 = C30996 * C1126;
    const double C30802 = C30996 * C1112;
    const double C6077 =
        (C30996 / C30836 + ((C30906 * C31010 + C17324) * ae) / C30830) /
            C30836 -
        ((C30906 * (C31010 / C30836 + (0 * ae) / C30830) + C32136) * be) /
            C30830;
    const double C7465 =
        C30996 / C30836 - ((C30906 * C31010 + C17324) * be) / C30830;
    const double C15421 =
        C30996 / C30836 + ((C30906 * C31010 + C17324) * ae) / C30830;
    const double C30999 = C30995 * be;
    const double C27561 = C27559 + C27560;
    const double C16578 = C16576 + C16577;
    const double C27556 = C27542 + C27543;
    const double C29422 = C29418 + C29419;
    const double C31229 = C31228 + C31222;
    const double C12501 = C12500 + C12498;
    const double C13419 = C13417 + C13415;
    const double C13418 = C13416 + C13407;
    const double C30883 = C30882 / C30830;
    const double C10237 = C2048 * C5251;
    const double C2058 = C2057 + C2035;
    const double C17375 = C17355 - C17356;
    const double C17372 = C17349 - C17350;
    const double C20011 = C17925 - C17926;
    const double C20005 = C17926 - C17925;
    const double C20008 = C17919 - C17920;
    const double C20002 = C17920 - C17919;
    const double C30341 = C19586 - C19585;
    const double C30338 = C19580 - C19579;
    const double C7498 = C7465 * C264;
    const double C7490 = C7465 * C246;
    const double C7483 = C7465 * C262;
    const double C7475 = C7465 * C245;
    const double C7840 = C7465 * C983;
    const double C7832 = C7465 * C975;
    const double C7986 = C7465 * C1120;
    const double C7978 = C7465 * C1109;
    const double C9494 = C7465 * C1126;
    const double C9486 = C7465 * C1112;
    const double C9479 = C7465 * C1118;
    const double C9471 = C7465 * C1108;
    const double C9900 = C7465 * C1642;
    const double C9892 = C7465 * C1638;
    const double C15454 = C15421 * C264;
    const double C15446 = C15421 * C246;
    const double C15439 = C15421 * C262;
    const double C15431 = C15421 * C245;
    const double C15796 = C15421 * C983;
    const double C15788 = C15421 * C975;
    const double C15942 = C15421 * C1120;
    const double C15934 = C15421 * C1109;
    const double C26838 = C15421 * C1126;
    const double C26830 = C15421 * C1112;
    const double C26823 = C15421 * C1118;
    const double C26815 = C15421 * C1108;
    const double C27244 = C15421 * C1642;
    const double C27236 = C15421 * C1638;
    const double C31001 = C30999 / C30830;
    const double C16579 = C16578 + C16574;
    const double C29423 = C29422 + C29420;
    const double C278 =
        (3 * C31126 + ae * C31127 + C31074 * C31154 + be * C31073 * C31229 +
         C31073 *
             (be * C31229 +
              C31073 *
                  (3 * C31150 + ae * C31151 +
                   C31074 * (2 * C31146 + ae * C31147 +
                             C31074 * (C31142 + ae * C31074 * C31143 +
                                       C31074 * (ae * C31143 +
                                                 C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085)))))) /
        C30835;
    const double C473 =
        (be * (4 * C31202 + C31074 * C31229 +
               (3 * C31173 + C31074 * C31220) * ae) +
         C31073 *
             (4 * C31154 + ae * C31155 +
              C31074 *
                  (3 * C31150 + ae * C31151 +
                   C31074 * (2 * C31146 + ae * C31147 +
                             C31074 * (C31142 + ae * C31074 * C31143 +
                                       C31074 * (ae * C31143 +
                                                 C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085)))))) /
        C30835;
    const double C695 =
        ((zP - zQ) *
         (be * C31229 +
          C31073 * (3 * C31150 + ae * C31151 +
                    C31074 * (2 * C31146 + ae * C31147 +
                              C31074 * (C31142 + ae * C31074 * C31143 +
                                        C31074 * (ae * C31143 +
                                                  C31074 * std::pow(C31076, 8) *
                                                      bs[8] * C31085)))))) /
        C30835;
    const double C139 = (5 * (3 * C31186 + C31074 * C31202 + C31397 * ae) +
                         C31074 * (4 * C31202 + C31074 * C31229 + C31402 * ae) +
                         (4 * C31397 + C31074 * C31402) * ae) /
                        C30830;
    const double C268 =
        (3 * C31186 + C31074 * C31202 + C31397 * ae + C31229 * C31254) / C30830;
    const double C373 =
        (3 * C31186 + C31074 * C31202 + C31397 * ae + C31229 * C31291) / C30830;
    const double C472 =
        (C31073 * (4 * C31202 + C31074 * C31229 + C31402 * ae)) / C30830;
    const double C576 =
        (C31287 * (4 * C31202 + C31074 * C31229 + C31402 * ae)) / C30830;
    const double C690 = (C31287 * C31073 * C31229) / C30830;
    const double C30884 = C30867 - C30883;
    const double C10243 = C10237 + C10238;
    const double C31003 = C30989 - C31001;
    const double C16580 = C16579 + C16575;
    const double C29424 = C29423 + C29421;
    const double C30885 = C30884 + C30856;
    const double C10244 = C10243 + C10239;
    const double C31004 = C31003 + C30974;
    const double C24020 = C2048 * C30885;
    const double C114 =
        (((((0 - (C30828 * C30829) / C30830) * ae) / C30830 -
           (0 * be) / C30842 + (2 * C30831) / C30830) /
              C30836 -
          ((C30828 * C30865 + 0) * be) / C30830 + C30848 - C30858) /
             C30836 +
         ((C30828 * C30879 + 0) * ae) / C30830) /
            C30836 -
        ((C30828 * (C30879 / C30836 +
                    ((C30828 * C30885 + C31757) * ae) / C30830 + C30881) +
          C32167) *
         be) /
            C30830 +
        C30885 / C30836 + ((C30828 * C30881 + C31765) * ae) / C30830 +
        2 * (C30856 / C30836 - (0 * be) / C30830);
    const double C115 =
        (C30879 / C30836 + ((C30828 * C30885 + C31757) * ae) / C30830 +
         C30881) /
            C30836 -
        ((C30828 * (C30885 / C30836 +
                    ((C30828 * C30881 + C31765) * ae) / C30830 + 2 * C30891) +
          C32160) *
         be) /
            C30830 +
        2 * (C30881 / C30836 + ((C30828 * C30891 + C17327) * ae) / C30830);
    const double C116 =
        (C30885 / C30836 + ((C30828 * C30881 + C31765) * ae) / C30830 +
         2 * C30891) /
            C30836 -
        ((C30828 *
              (C30881 / C30836 + ((C30828 * C30891 + C17327) * ae) / C30830) +
          C32147) *
         be) /
            C30830 +
        3 * (C30891 / C30836 + (0 * ae) / C30830);
    const double C2656 =
        C30879 / C30836 - ((C30828 * C30885 + C31757) * be) / C30830 + C30881;
    const double C2657 = C30885 / C30836 -
                         ((C30828 * C30881 + C31765) * be) / C30830 +
                         2 * C30891;
    const double C14633 =
        C30879 / C30836 + ((C30828 * C30885 + C31757) * ae) / C30830 + C30881;
    const double C14634 = C30885 / C30836 +
                          ((C30828 * C30881 + C31765) * ae) / C30830 +
                          2 * C30891;
    const double C10245 = C10244 + C10240;
    const double C17365 = C31004 * C133;
    const double C17359 = C31004 * C122;
    const double C17354 = C31004 * C131;
    const double C17348 = C31004 * C121;
    const double C17342 = C31004 * C129;
    const double C17336 = C31004 * C120;
    const double C17765 = C31004 * C254;
    const double C17759 = C31004 * C241;
    const double C17753 = C31004 * C252;
    const double C17747 = C31004 * C240;
    const double C17935 = C31004 * C359;
    const double C17929 = C31004 * C346;
    const double C17923 = C31004 * C357;
    const double C17917 = C31004 * C345;
    const double C19595 = C31004 * C367;
    const double C19589 = C31004 * C350;
    const double C19583 = C31004 * C365;
    const double C19577 = C31004 * C349;
    const double C19572 = C31004 * C355;
    const double C19566 = C31004 * C344;
    const double C19801 = C31004 * C684;
    const double C19795 = C31004 * C677;
    const double C20221 = C31004 * C682;
    const double C20215 = C31004 * C676;
    const double C30349 = C31004 * C2006;
    const double C30343 = C31004 * C1999;
    const double C30806 = C31004 * C1125;
    const double C30800 = C31004 * C1111;
    const double C6074 =
        (((((0 - (C30906 * C30957) / C30830) * ae) / C30830 -
           (0 * be) / C30842 + (2 * C30958) / C30830) /
              C30836 -
          ((C30906 * C30993 + 0) * be) / C30830 + C30967 - C30980) /
             C30836 +
         ((C30906 * C31002 + 0) * ae) / C30830) /
            C30836 -
        ((C30906 * (C31002 / C30836 +
                    ((C30906 * C31004 + C31895) * ae) / C30830 + C30996) +
          C32168) *
         be) /
            C30830 +
        C31004 / C30836 + ((C30906 * C30996 + C31902) * ae) / C30830 +
        2 * (C30974 / C30836 - (0 * be) / C30830);
    const double C6075 =
        (C31002 / C30836 + ((C30906 * C31004 + C31895) * ae) / C30830 +
         C30996) /
            C30836 -
        ((C30906 * (C31004 / C30836 +
                    ((C30906 * C30996 + C31902) * ae) / C30830 + 2 * C31010) +
          C32164) *
         be) /
            C30830 +
        2 * (C30996 / C30836 + ((C30906 * C31010 + C17324) * ae) / C30830);
    const double C6076 =
        (C31004 / C30836 + ((C30906 * C30996 + C31902) * ae) / C30830 +
         2 * C31010) /
            C30836 -
        ((C30906 *
              (C30996 / C30836 + ((C30906 * C31010 + C17324) * ae) / C30830) +
          C32154) *
         be) /
            C30830 +
        3 * (C31010 / C30836 + (0 * ae) / C30830);
    const double C7463 =
        C31002 / C30836 - ((C30906 * C31004 + C31895) * be) / C30830 + C30996;
    const double C7464 = C31004 / C30836 -
                         ((C30906 * C30996 + C31902) * be) / C30830 +
                         2 * C31010;
    const double C15419 =
        C31002 / C30836 + ((C30906 * C31004 + C31895) * ae) / C30830 + C30996;
    const double C15420 = C31004 / C30836 +
                          ((C30906 * C30996 + C31902) * ae) / C30830 +
                          2 * C31010;
    const double C24026 = C24020 + C24021;
    const double C10246 = C10245 + C10241;
    const double C17374 = C17353 - C17354;
    const double C17371 = C17347 - C17348;
    const double C20010 = C17923 - C17924;
    const double C20004 = C17924 - C17923;
    const double C20007 = C17917 - C17918;
    const double C20001 = C17918 - C17917;
    const double C30340 = C19584 - C19583;
    const double C30337 = C19578 - C19577;
    const double C7494 = C7463 * C131;
    const double C7486 = C7463 * C121;
    const double C7479 = C7463 * C129;
    const double C7471 = C7463 * C120;
    const double C7836 = C7463 * C252;
    const double C7828 = C7463 * C240;
    const double C7982 = C7463 * C357;
    const double C7974 = C7463 * C345;
    const double C9490 = C7463 * C365;
    const double C9482 = C7463 * C349;
    const double C9475 = C7463 * C355;
    const double C9467 = C7463 * C344;
    const double C9896 = C7463 * C682;
    const double C9888 = C7463 * C676;
    const double C7496 = C7464 * C254;
    const double C7488 = C7464 * C241;
    const double C7481 = C7464 * C252;
    const double C7473 = C7464 * C240;
    const double C7838 = C7464 * C262;
    const double C7830 = C7464 * C245;
    const double C7984 = C7464 * C684;
    const double C7976 = C7464 * C677;
    const double C9492 = C7464 * C1125;
    const double C9484 = C7464 * C1111;
    const double C9477 = C7464 * C682;
    const double C9469 = C7464 * C676;
    const double C9898 = C7464 * C1118;
    const double C9890 = C7464 * C1108;
    const double C15450 = C15419 * C131;
    const double C15442 = C15419 * C121;
    const double C15435 = C15419 * C129;
    const double C15427 = C15419 * C120;
    const double C15792 = C15419 * C252;
    const double C15784 = C15419 * C240;
    const double C15938 = C15419 * C357;
    const double C15930 = C15419 * C345;
    const double C26834 = C15419 * C365;
    const double C26826 = C15419 * C349;
    const double C26819 = C15419 * C355;
    const double C26811 = C15419 * C344;
    const double C27240 = C15419 * C682;
    const double C27232 = C15419 * C676;
    const double C15452 = C15420 * C254;
    const double C15444 = C15420 * C241;
    const double C15437 = C15420 * C252;
    const double C15429 = C15420 * C240;
    const double C15794 = C15420 * C262;
    const double C15786 = C15420 * C245;
    const double C15940 = C15420 * C684;
    const double C15932 = C15420 * C677;
    const double C26836 = C15420 * C1125;
    const double C26828 = C15420 * C1111;
    const double C26821 = C15420 * C682;
    const double C26813 = C15420 * C676;
    const double C27242 = C15420 * C1118;
    const double C27234 = C15420 * C1108;
    const double C24027 = C24026 + C24022;
    const double C10247 = C10246 + C10242;
    const double C17378 = C17374 + C17375;
    const double C17377 = C17371 + C17372;
    const double C20016 = C20010 + C20011;
    const double C20014 = C20004 + C20005;
    const double C20015 = C20007 + C20008;
    const double C20013 = C20001 + C20002;
    const double C30356 = C30340 + C30341;
    const double C30355 = C30337 + C30338;
    const double C24028 = C24027 + C24023;
    const double C17380 = C17378 + C17376;
    const double C17379 = C17377 + C17373;
    const double C20020 = C20016 + C20012;
    const double C20018 = C20014 + C20006;
    const double C20019 = C20015 + C20009;
    const double C20017 = C20013 + C20003;
    const double C30358 = C30356 + C30342;
    const double C30357 = C30355 + C30339;
    const double C24029 = C24028 + C24024;
    const double C30360 = C30358 * C31752;
    const double C30359 = C30357 * C6079;
    const double C24030 = C24029 + C24025;
    const double C30361 = C30359 + C30360;
    d2ee[0] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
             C17324 * C259 - C31010 * C244) *
                C30885 +
            (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
             C17324 * C274 - C31010 * C260) *
                C31757 +
            (C17335 - C17336 + C17337 - C17338 + C17339 - C17340) * C30881 +
            (C17341 - C17342 + C17343 - C17344 + C17345 - C17346) * C31765 +
            C17379 * C30891 + C17380 * C17327) *
               C31854 * C31813 * C466 +
           ((C31004 * C239 - C31895 * C249 + C30996 * C244 - C31902 * C259 +
             C31010 * C974 - C17324 * C980) *
                C30885 +
            (C31004 * C250 - C31895 * C269 + C30996 * C260 - C31902 * C274 +
             C31010 * C981 - C17324 * C992) *
                C31757 +
            (C17747 - C17748 + C17749 - C17750 + C17751 - C17752) * C30881 +
            (C17753 - C17754 + C17755 - C17756 + C17757 - C17758) * C31765 +
            (C17759 - C17760 + C17761 - C17762 + C17763 - C17764) * C30891 +
            (C17765 - C17766 + C17767 - C17768 + C17769 - C17770) * C17327) *
               C31854 * C31813 * C467) *
              C468 +
          (((C17336 - C17335 + C17338 - C17337 + C17340 - C17339) * C30885 +
            (C17342 - C17341 + C17344 - C17343 + C17346 - C17345) * C31757 +
            (C17348 - C17347 + C17350 - C17349 + C17352 - C17351) * C30881 +
            (C17354 - C17353 + C17356 - C17355 + C17358 - C17357) * C31765 +
            (C17359 - C17360 + C17361 - C17362 + C17363 - C17364) * C30891 +
            (C17365 - C17366 + C17367 - C17368 + C17369 - C17370) * C17327) *
               C31854 * C31813 * C466 +
           ((C17748 - C17747 + C17750 - C17749 + C17752 - C17751) * C30885 +
            (C17754 - C17753 + C17756 - C17755 + C17758 - C17757) * C31757 +
            (C17760 - C17759 + C17762 - C17761 + C17764 - C17763) * C30881 +
            (C17766 - C17765 + C17768 - C17767 + C17770 - C17769) * C31765 +
            (C31895 * C255 - C31004 * C242 + C31902 * C265 - C30996 * C247 +
             C17324 * C1291 - C31010 * C1290) *
                C30891 +
            (C31895 * C272 - C31004 * C256 + C31902 * C277 - C30996 * C266 +
             C17324 * C1293 - C31010 * C1292) *
                C17327) *
               C31854 * C31813 * C467) *
              C469)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
             C17324 * C259 - C31010 * C244) *
                C30885 +
            (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
             C17324 * C274 - C31010 * C260) *
                C31757 +
            (C17335 - C17336 + C17337 - C17338 + C17339 - C17340) * C30881 +
            (C17341 - C17342 + C17343 - C17344 + C17345 - C17346) * C31765 +
            C17379 * C30891 + C17380 * C17327) *
               C31854 * C572 +
           ((C31004 * C344 - C31895 * C354 + C30996 * C676 - C31902 * C681 +
             C31010 * C1108 - C17324 * C1117) *
                C30885 +
            (C31004 * C355 - C31895 * C374 + C30996 * C682 - C31902 * C691 +
             C31010 * C1118 - C17324 * C1135) *
                C31757 +
            (C17917 - C17918 + C17919 - C17920 + C17921 - C17922) * C30881 +
            (C17923 - C17924 + C17925 - C17926 + C17927 - C17928) * C31765 +
            (C17929 - C17930 + C17931 - C17932 + C17933 - C17934) * C30891 +
            (C17935 - C17936 + C17937 - C17938 + C17939 - C17940) * C17327) *
               C31854 * C573) *
              C466 +
          (((C31004 * C239 - C31895 * C249 + C30996 * C244 - C31902 * C259 +
             C31010 * C974 - C17324 * C980) *
                C30885 +
            (C31004 * C250 - C31895 * C269 + C30996 * C260 - C31902 * C274 +
             C31010 * C981 - C17324 * C992) *
                C31757 +
            (C17747 - C17748 + C17749 - C17750 + C17751 - C17752) * C30881 +
            (C17753 - C17754 + C17755 - C17756 + C17757 - C17758) * C31765 +
            (C17759 - C17760 + C17761 - C17762 + C17763 - C17764) * C30891 +
            (C17765 - C17766 + C17767 - C17768 + C17769 - C17770) * C17327) *
               C31854 * C572 +
           ((C31895 * C681 - C31004 * C676 + C31902 * C1117 - C30996 * C1108 +
             C17324 * C1641 - C31010 * C1638) *
                C30885 +
            (C31895 * C691 - C31004 * C682 + C31902 * C1135 - C30996 * C1118 +
             C17324 * C1647 - C31010 * C1642) *
                C31757 +
            (C31895 * C683 - C31004 * C677 + C31902 * C1119 - C30996 * C1109 +
             C17324 * C1643 - C31010 * C1639) *
                C30881 +
            (C31895 * C692 - C31004 * C684 + C31902 * C1136 - C30996 * C1120 +
             C17324 * C1648 - C31010 * C1644) *
                C31765 +
            (C31895 * C685 - C31004 * C678 + C31902 * C1121 - C30996 * C1110 +
             C17324 * C1645 - C31010 * C1640) *
                C30891 +
            (C31895 * C693 - C31004 * C686 + C31902 * C1137 - C30996 * C1122 +
             C17324 * C1649 - C31010 * C1646) *
                C17327) *
               C31854 * C573) *
              C467) *
         C31787) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
            C17324 * C259 - C31010 * C244) *
               C30885 +
           (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
            C17324 * C274 - C31010 * C260) *
               C31757 +
           (C17335 - C17336 + C17337 - C17338 + C17339 - C17340) * C30881 +
           (C17341 - C17342 + C17343 - C17344 + C17345 - C17346) * C31765 +
           C17379 * C30891 + C17380 * C17327) *
              C31854 * C31813 * C235 +
          ((C31004 * C239 - C31895 * C249 + C30996 * C244 - C31902 * C259 +
            C31010 * C974 - C17324 * C980) *
               C30885 +
           (C31004 * C250 - C31895 * C269 + C30996 * C260 - C31902 * C274 +
            C31010 * C981 - C17324 * C992) *
               C31757 +
           (C31004 * C240 - C31895 * C251 + C30996 * C245 - C31902 * C261 +
            C31010 * C975 - C17324 * C982) *
               C30881 +
           (C31004 * C252 - C31895 * C270 + C30996 * C262 - C31902 * C275 +
            C31010 * C983 - C17324 * C993) *
               C31765 +
           (C31004 * C241 - C31895 * C253 + C30996 * C246 - C31902 * C263 +
            C31010 * C976 - C17324 * C984) *
               C30891 +
           (C31004 * C254 - C31895 * C271 + C30996 * C264 - C31902 * C276 +
            C31010 * C985 - C17324 * C994) *
               C17327) *
              C31854 * C31813 * C236 +
          ((C31895 * C259 - C31004 * C244 + C31902 * C980 - C30996 * C974 +
            C17324 * C986 - C31010 * C977) *
               C30885 +
           (C31895 * C274 - C31004 * C260 + C31902 * C992 - C30996 * C981 +
            C17324 * C995 - C31010 * C987) *
               C31757 +
           (C31895 * C261 - C31004 * C245 + C31902 * C982 - C30996 * C975 +
            C17324 * C988 - C31010 * C978) *
               C30881 +
           (C31895 * C275 - C31004 * C262 + C31902 * C993 - C30996 * C983 +
            C17324 * C996 - C31010 * C989) *
               C31765 +
           (C31895 * C263 - C31004 * C246 + C31902 * C984 - C30996 * C976 +
            C17324 * C990 - C31010 * C979) *
               C30891 +
           (C31895 * C276 - C31004 * C264 + C31902 * C994 - C30996 * C985 +
            C17324 * C997 - C31010 * C991) *
               C17327) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
            C17324 * C259 - C31010 * C244) *
               C30885 +
           (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
            C17324 * C274 - C31010 * C260) *
               C31757 +
           (C17335 - C17336 + C17337 - C17338 + C17339 - C17340) * C30881 +
           (C17341 - C17342 + C17343 - C17344 + C17345 - C17346) * C31765 +
           C17379 * C30891 + C17380 * C17327) *
              C31854 * C31813 * C31799 * C110 +
          ((C17336 - C17335 + C17338 - C17337 + C17340 - C17339) * C30885 +
           (C17342 - C17341 + C17344 - C17343 + C17346 - C17345) * C31757 +
           (C17348 - C17347 + C17350 - C17349 + C17352 - C17351) * C30881 +
           (C17354 - C17353 + C17356 - C17355 + C17358 - C17357) * C31765 +
           (C17359 - C17360 + C17361 - C17362 + C17363 - C17364) * C30891 +
           (C17365 - C17366 + C17367 - C17368 + C17369 - C17370) * C17327) *
              C31854 * C31813 * C31799 * C111 +
          (C17379 * C30885 + C17380 * C31757 +
           (C17360 - C17359 + C17362 - C17361 + C17364 - C17363) * C30881 +
           (C17366 - C17365 + C17368 - C17367 + C17370 - C17369) * C31765 +
           (C31895 * C134 - C31004 * C123 + C31902 * C257 - C30996 * C243 +
            C17324 * C267 - C31010 * C248) *
               C30891 +
           (C31895 * C144 - C31004 * C135 + C31902 * C273 - C30996 * C258 +
            C17324 * C278 - C31010 * C268) *
               C17327) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
            C17324 * C259 - C31010 * C244) *
               C30885 +
           (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
            C17324 * C274 - C31010 * C260) *
               C31757 +
           (C17335 - C17336 + C17337 - C17338 + C17339 - C17340) * C30881 +
           (C17341 - C17342 + C17343 - C17344 + C17345 - C17346) * C31765 +
           C17379 * C30891 + C17380 * C17327) *
              C31854 * C341 +
          ((C31004 * C344 - C31895 * C354 + C30996 * C676 - C31902 * C681 +
            C31010 * C1108 - C17324 * C1117) *
               C30885 +
           (C31004 * C355 - C31895 * C374 + C30996 * C682 - C31902 * C691 +
            C31010 * C1118 - C17324 * C1135) *
               C31757 +
           (C31004 * C345 - C31895 * C356 + C30996 * C677 - C31902 * C683 +
            C31010 * C1109 - C17324 * C1119) *
               C30881 +
           (C31004 * C357 - C31895 * C375 + C30996 * C684 - C31902 * C692 +
            C31010 * C1120 - C17324 * C1136) *
               C31765 +
           (C31004 * C346 - C31895 * C358 + C30996 * C678 - C31902 * C685 +
            C31010 * C1110 - C17324 * C1121) *
               C30891 +
           (C31004 * C359 - C31895 * C376 + C30996 * C686 - C31902 * C693 +
            C31010 * C1122 - C17324 * C1137) *
               C17327) *
              C31854 * C342 +
          ((C31895 * C364 - C31004 * C349 + C31902 * C1123 - C30996 * C1111 +
            C17324 * C1124 - C31010 * C1112) *
               C30885 +
           (C31895 * C379 - C31004 * C365 + C31902 * C1138 - C30996 * C1125 +
            C17324 * C1139 - C31010 * C1126) *
               C31757 +
           (C31895 * C366 - C31004 * C350 + C31902 * C1127 - C30996 * C1113 +
            C17324 * C1128 - C31010 * C1114) *
               C30881 +
           (C31895 * C380 - C31004 * C367 + C31902 * C1140 - C30996 * C1129 +
            C17324 * C1141 - C31010 * C1130) *
               C31765 +
           (C31895 * C368 - C31004 * C351 + C31902 * C1131 - C30996 * C1115 +
            C17324 * C1132 - C31010 * C1116) *
               C30891 +
           (C31895 * C381 - C31004 * C369 + C31902 * C1142 - C30996 * C1133 +
            C17324 * C1143 - C31010 * C1134) *
               C17327) *
              C31854 * C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
             C17324 * C259 - C31010 * C244) *
                C30885 +
            (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
             C17324 * C274 - C31010 * C260) *
                C31757 +
            (C17335 - C17336 + C17337 - C17338 + C17339 - C17340) * C30881 +
            (C17341 - C17342 + C17343 - C17344 + C17345 - C17346) * C31765 +
            C17379 * C30891 + C17380 * C17327) *
               C31854 * C572 +
           ((C31004 * C344 - C31895 * C354 + C30996 * C676 - C31902 * C681 +
             C31010 * C1108 - C17324 * C1117) *
                C30885 +
            (C31004 * C355 - C31895 * C374 + C30996 * C682 - C31902 * C691 +
             C31010 * C1118 - C17324 * C1135) *
                C31757 +
            (C17917 - C17918 + C17919 - C17920 + C17921 - C17922) * C30881 +
            (C17923 - C17924 + C17925 - C17926 + C17927 - C17928) * C31765 +
            (C17929 - C17930 + C17931 - C17932 + C17933 - C17934) * C30891 +
            (C17935 - C17936 + C17937 - C17938 + C17939 - C17940) * C17327) *
               C31854 * C573) *
              C31799 * C468 +
          (((C17336 - C17335 + C17338 - C17337 + C17340 - C17339) * C30885 +
            (C17342 - C17341 + C17344 - C17343 + C17346 - C17345) * C31757 +
            (C17348 - C17347 + C17350 - C17349 + C17352 - C17351) * C30881 +
            (C17354 - C17353 + C17356 - C17355 + C17358 - C17357) * C31765 +
            (C17359 - C17360 + C17361 - C17362 + C17363 - C17364) * C30891 +
            (C17365 - C17366 + C17367 - C17368 + C17369 - C17370) * C17327) *
               C31854 * C572 +
           ((C17918 - C17917 + C17920 - C17919 + C17922 - C17921) * C30885 +
            (C17924 - C17923 + C17926 - C17925 + C17928 - C17927) * C31757 +
            (C17930 - C17929 + C17932 - C17931 + C17934 - C17933) * C30881 +
            (C17936 - C17935 + C17938 - C17937 + C17940 - C17939) * C31765 +
            (C31895 * C360 - C31004 * C347 + C31902 * C687 - C30996 * C679 +
             C17324 * C1465 - C31010 * C1464) *
                C30891 +
            (C31895 * C377 - C31004 * C361 + C31902 * C694 - C30996 * C688 +
             C17324 * C1467 - C31010 * C1466) *
                C17327) *
               C31854 * C573) *
              C31799 * C469)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
            C17324 * C259 - C31010 * C244) *
               C30885 +
           (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
            C17324 * C274 - C31010 * C260) *
               C31757 +
           (C17335 - C17336 + C17337 - C17338 + C17339 - C17340) * C30881 +
           (C17341 - C17342 + C17343 - C17344 + C17345 - C17346) * C31765 +
           C17379 * C30891 + C17380 * C17327) *
              C31854 * C31813 * C31799 * C110 +
          ((C17336 - C17335 + C17338 - C17337 + C17340 - C17339) * C30885 +
           (C17342 - C17341 + C17344 - C17343 + C17346 - C17345) * C31757 +
           (C17348 - C17347 + C17350 - C17349 + C17352 - C17351) * C30881 +
           (C17354 - C17353 + C17356 - C17355 + C17358 - C17357) * C31765 +
           (C17359 - C17360 + C17361 - C17362 + C17363 - C17364) * C30891 +
           (C17365 - C17366 + C17367 - C17368 + C17369 - C17370) * C17327) *
              C31854 * C31813 * C31799 * C111 +
          (C17379 * C30885 + C17380 * C31757 +
           (C17360 - C17359 + C17362 - C17361 + C17364 - C17363) * C30881 +
           (C17366 - C17365 + C17368 - C17367 + C17370 - C17369) * C31765 +
           (C31895 * C134 - C31004 * C123 + C31902 * C257 - C30996 * C243 +
            C17324 * C267 - C31010 * C248) *
               C30891 +
           (C31895 * C144 - C31004 * C135 + C31902 * C273 - C30996 * C258 +
            C17324 * C278 - C31010 * C268) *
               C17327) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
            C17324 * C259 - C31010 * C244) *
               C30885 +
           (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
            C17324 * C274 - C31010 * C260) *
               C31757 +
           (C17335 - C17336 + C17337 - C17338 + C17339 - C17340) * C30881 +
           (C17341 - C17342 + C17343 - C17344 + C17345 - C17346) * C31765 +
           C17379 * C30891 + C17380 * C17327) *
              C31854 * C31813 * C235 +
          ((C31004 * C239 - C31895 * C249 + C30996 * C244 - C31902 * C259 +
            C31010 * C974 - C17324 * C980) *
               C30885 +
           (C31004 * C250 - C31895 * C269 + C30996 * C260 - C31902 * C274 +
            C31010 * C981 - C17324 * C992) *
               C31757 +
           (C31004 * C240 - C31895 * C251 + C30996 * C245 - C31902 * C261 +
            C31010 * C975 - C17324 * C982) *
               C30881 +
           (C31004 * C252 - C31895 * C270 + C30996 * C262 - C31902 * C275 +
            C31010 * C983 - C17324 * C993) *
               C31765 +
           (C31004 * C241 - C31895 * C253 + C30996 * C246 - C31902 * C263 +
            C31010 * C976 - C17324 * C984) *
               C30891 +
           (C31004 * C254 - C31895 * C271 + C30996 * C264 - C31902 * C276 +
            C31010 * C985 - C17324 * C994) *
               C17327) *
              C31854 * C31813 * C236 +
          ((C31895 * C259 - C31004 * C244 + C31902 * C980 - C30996 * C974 +
            C17324 * C986 - C31010 * C977) *
               C30885 +
           (C31895 * C274 - C31004 * C260 + C31902 * C992 - C30996 * C981 +
            C17324 * C995 - C31010 * C987) *
               C31757 +
           (C31895 * C261 - C31004 * C245 + C31902 * C982 - C30996 * C975 +
            C17324 * C988 - C31010 * C978) *
               C30881 +
           (C31895 * C275 - C31004 * C262 + C31902 * C993 - C30996 * C983 +
            C17324 * C996 - C31010 * C989) *
               C31765 +
           (C31895 * C263 - C31004 * C246 + C31902 * C984 - C30996 * C976 +
            C17324 * C990 - C31010 * C979) *
               C30891 +
           (C31895 * C276 - C31004 * C264 + C31902 * C994 - C30996 * C985 +
            C17324 * C997 - C31010 * C991) *
               C17327) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
              C17324 * C259 - C31010 * C244) *
                 C15423 +
             (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
              C17324 * C274 - C31010 * C260) *
                 C15417 +
             (C17335 - C17336 + C17337 - C17338 + C17339 - C17340) * C15424 +
             (C17341 - C17342 + C17343 - C17344 + C17345 - C17346) * C31762) *
                C32096 +
            ((C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C15423 +
             (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C15417 +
             (C17918 - C17917 + C17920 - C17919 + C17922 - C17921) * C15424 +
             (C17924 - C17923 + C17926 - C17925 + C17928 - C17927) * C31762) *
                C31941) *
               C31813 * C466 +
           (((C31004 * C239 - C31895 * C249 + C30996 * C244 - C31902 * C259 +
              C31010 * C974 - C17324 * C980) *
                 C15423 +
             (C31004 * C250 - C31895 * C269 + C30996 * C260 - C31902 * C274 +
              C31010 * C981 - C17324 * C992) *
                 C15417 +
             (C17747 - C17748 + C17749 - C17750 + C17751 - C17752) * C15424 +
             (C17753 - C17754 + C17755 - C17756 + C17757 - C17758) * C31762) *
                C32096 +
            ((C31004 * C676 - C31895 * C681 + C30996 * C1108 - C31902 * C1117 +
              C31010 * C1638 - C17324 * C1641) *
                 C15423 +
             (C31004 * C682 - C31895 * C691 + C30996 * C1118 - C31902 * C1135 +
              C31010 * C1642 - C17324 * C1647) *
                 C15417 +
             (C19795 - C19796 + C19797 - C19798 + C19799 - C19800) * C15424 +
             (C19801 - C19802 + C19803 - C19804 + C19805 - C19806) * C31762) *
                C31941) *
               C31813 * C467) *
              C468 +
          ((((C17336 - C17335 + C17338 - C17337 + C17340 - C17339) * C15423 +
             (C17342 - C17341 + C17344 - C17343 + C17346 - C17345) * C15417 +
             (C17348 - C17347 + C17350 - C17349 + C17352 - C17351) * C15424 +
             (C17354 - C17353 + C17356 - C17355 + C17358 - C17357) * C31762) *
                C32096 +
            ((C17917 - C17918 + C17919 - C17920 + C17921 - C17922) * C15423 +
             (C17923 - C17924 + C17925 - C17926 + C17927 - C17928) * C15417 +
             (C17929 - C17930 + C17931 - C17932 + C17933 - C17934) * C15424 +
             (C17935 - C17936 + C17937 - C17938 + C17939 - C17940) * C31762) *
                C31941) *
               C31813 * C466 +
           (((C17748 - C17747 + C17750 - C17749 + C17752 - C17751) * C15423 +
             (C17754 - C17753 + C17756 - C17755 + C17758 - C17757) * C15417 +
             (C17760 - C17759 + C17762 - C17761 + C17764 - C17763) * C15424 +
             (C17766 - C17765 + C17768 - C17767 + C17770 - C17769) * C31762) *
                C32096 +
            ((C19796 - C19795 + C19798 - C19797 + C19800 - C19799) * C15423 +
             (C19802 - C19801 + C19804 - C19803 + C19806 - C19805) * C15417 +
             (C31895 * C685 - C31004 * C678 + C31902 * C1121 - C30996 * C1110 +
              C17324 * C1645 - C31010 * C1640) *
                 C15424 +
             (C31895 * C693 - C31004 * C686 + C31902 * C1137 - C30996 * C1122 +
              C17324 * C1649 - C31010 * C1646) *
                 C31762) *
                C31941) *
               C31813 * C467) *
              C469)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
              C17324 * C259 - C31010 * C244) *
                 C15423 +
             (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
              C17324 * C274 - C31010 * C260) *
                 C15417 +
             (C17335 - C17336 + C17337 - C17338 + C17339 - C17340) * C15424 +
             (C17341 - C17342 + C17343 - C17344 + C17345 - C17346) * C31762) *
                C32096 +
            ((C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C15423 +
             (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C15417 +
             C20017 * C15424 + C20018 * C31762) *
                C31941) *
               C572 +
           (((C19566 - C19565 + C19568 - C19567 + C19570 - C19569) * C15423 +
             (C19572 - C19571 + C19574 - C19573 + C19576 - C19575) * C15417 +
             C20019 * C15424 + C20020 * C31762) *
                C32096 +
            ((C19577 - C19578 + C19579 - C19580 + C19581 - C19582) * C15423 +
             (C19583 - C19584 + C19585 - C19586 + C19587 - C19588) * C15417 +
             (C19589 - C19590 + C19591 - C19592 + C19593 - C19594) * C15424 +
             (C19595 - C19596 + C19597 - C19598 + C19599 - C19600) * C31762) *
                C31941) *
               C573) *
              C466 +
          ((((C31004 * C239 - C31895 * C249 + C30996 * C244 - C31902 * C259 +
              C31010 * C974 - C17324 * C980) *
                 C15423 +
             (C31004 * C250 - C31895 * C269 + C30996 * C260 - C31902 * C274 +
              C31010 * C981 - C17324 * C992) *
                 C15417 +
             (C17747 - C17748 + C17749 - C17750 + C17751 - C17752) * C15424 +
             (C17753 - C17754 + C17755 - C17756 + C17757 - C17758) * C31762) *
                C32096 +
            ((C20215 - C20216 + C20217 - C20218 + C20219 - C20220) * C15423 +
             (C20221 - C20222 + C20223 - C20224 + C20225 - C20226) * C15417 +
             (C19795 - C19796 + C19797 - C19798 + C19799 - C19800) * C15424 +
             (C19801 - C19802 + C19803 - C19804 + C19805 - C19806) * C31762) *
                C31941) *
               C572 +
           (((C20216 - C20215 + C20218 - C20217 + C20220 - C20219) * C15423 +
             (C20222 - C20221 + C20224 - C20223 + C20226 - C20225) * C15417 +
             (C19796 - C19795 + C19798 - C19797 + C19800 - C19799) * C15424 +
             (C19802 - C19801 + C19804 - C19803 + C19806 - C19805) * C31762) *
                C32096 +
            ((C31895 * C1123 - C31004 * C1111 + C31902 * C1124 -
              C30996 * C1112 + C17324 * C6217 - C31010 * C6213) *
                 C15423 +
             (C31895 * C1138 - C31004 * C1125 + C31902 * C1139 -
              C30996 * C1126 + C17324 * C6222 - C31010 * C6219) *
                 C15417 +
             (C31895 * C1127 - C31004 * C1113 + C31902 * C1128 -
              C30996 * C1114 + C17324 * C7020 - C31010 * C7019) *
                 C15424 +
             (C31895 * C1140 - C31004 * C1129 + C31902 * C1141 -
              C30996 * C1130 + C17324 * C7022 - C31010 * C7021) *
                 C31762) *
                C31941) *
               C573) *
              C467) *
         C31787) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
             C17324 * C259 - C31010 * C244) *
                C15423 +
            (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
             C17324 * C274 - C31010 * C260) *
                C15417 +
            (C17335 - C17336 + C17337 - C17338 + C17339 - C17340) * C15424 +
            (C17341 - C17342 + C17343 - C17344 + C17345 - C17346) * C31762) *
               C32096 +
           ((C31895 * C354 - C31004 * C344 + C31902 * C681 - C30996 * C676 +
             C17324 * C1117 - C31010 * C1108) *
                C15423 +
            (C31895 * C374 - C31004 * C355 + C31902 * C691 - C30996 * C682 +
             C17324 * C1135 - C31010 * C1118) *
                C15417 +
            (C17918 - C17917 + C17920 - C17919 + C17922 - C17921) * C15424 +
            (C17924 - C17923 + C17926 - C17925 + C17928 - C17927) * C31762) *
               C31941) *
              C31813 * C235 +
          (((C31004 * C239 - C31895 * C249 + C30996 * C244 - C31902 * C259 +
             C31010 * C974 - C17324 * C980) *
                C15423 +
            (C31004 * C250 - C31895 * C269 + C30996 * C260 - C31902 * C274 +
             C31010 * C981 - C17324 * C992) *
                C15417 +
            (C17747 - C17748 + C17749 - C17750 + C17751 - C17752) * C15424 +
            (C17753 - C17754 + C17755 - C17756 + C17757 - C17758) * C31762) *
               C32096 +
           ((C31004 * C676 - C31895 * C681 + C30996 * C1108 - C31902 * C1117 +
             C31010 * C1638 - C17324 * C1641) *
                C15423 +
            (C31004 * C682 - C31895 * C691 + C30996 * C1118 - C31902 * C1135 +
             C31010 * C1642 - C17324 * C1647) *
                C15417 +
            (C31004 * C677 - C31895 * C683 + C30996 * C1109 - C31902 * C1119 +
             C31010 * C1639 - C17324 * C1643) *
                C15424 +
            (C31004 * C684 - C31895 * C692 + C30996 * C1120 - C31902 * C1136 +
             C31010 * C1644 - C17324 * C1648) *
                C31762) *
               C31941) *
              C31813 * C236 +
          (((C31895 * C259 - C31004 * C244 + C31902 * C980 - C30996 * C974 +
             C17324 * C986 - C31010 * C977) *
                C15423 +
            (C31895 * C274 - C31004 * C260 + C31902 * C992 - C30996 * C981 +
             C17324 * C995 - C31010 * C987) *
                C15417 +
            (C31895 * C261 - C31004 * C245 + C31902 * C982 - C30996 * C975 +
             C17324 * C988 - C31010 * C978) *
                C15424 +
            (C31895 * C275 - C31004 * C262 + C31902 * C993 - C30996 * C983 +
             C17324 * C996 - C31010 * C989) *
                C31762) *
               C32096 +
           ((C31895 * C1117 - C31004 * C1108 + C31902 * C1641 - C30996 * C1638 +
             C17324 * C6215 - C31010 * C6212) *
                C15423 +
            (C31895 * C1135 - C31004 * C1118 + C31902 * C1647 - C30996 * C1642 +
             C17324 * C6221 - C31010 * C6216) *
                C15417 +
            (C31895 * C1119 - C31004 * C1109 + C31902 * C1643 - C30996 * C1639 +
             C17324 * C6393 - C31010 * C6392) *
                C15424 +
            (C31895 * C1136 - C31004 * C1120 + C31902 * C1648 - C30996 * C1644 +
             C17324 * C6395 - C31010 * C6394) *
                C31762) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
             C17324 * C259 - C31010 * C244) *
                C15423 +
            (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
             C17324 * C274 - C31010 * C260) *
                C15417 +
            (C17335 - C17336 + C17337 - C17338 + C17339 - C17340) * C15424 +
            (C17341 - C17342 + C17343 - C17344 + C17345 - C17346) * C31762) *
               C32096 +
           ((C31895 * C354 - C31004 * C344 + C31902 * C681 - C30996 * C676 +
             C17324 * C1117 - C31010 * C1108) *
                C15423 +
            (C31895 * C374 - C31004 * C355 + C31902 * C691 - C30996 * C682 +
             C17324 * C1135 - C31010 * C1118) *
                C15417 +
            (C17918 - C17917 + C17920 - C17919 + C17922 - C17921) * C15424 +
            (C17924 - C17923 + C17926 - C17925 + C17928 - C17927) * C31762) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C17336 - C17335 + C17338 - C17337 + C17340 - C17339) * C15423 +
            (C17342 - C17341 + C17344 - C17343 + C17346 - C17345) * C15417 +
            (C17348 - C17347 + C17350 - C17349 + C17352 - C17351) * C15424 +
            (C17354 - C17353 + C17356 - C17355 + C17358 - C17357) * C31762) *
               C32096 +
           ((C17917 - C17918 + C17919 - C17920 + C17921 - C17922) * C15423 +
            (C17923 - C17924 + C17925 - C17926 + C17927 - C17928) * C15417 +
            (C17929 - C17930 + C17931 - C17932 + C17933 - C17934) * C15424 +
            (C17935 - C17936 + C17937 - C17938 + C17939 - C17940) * C31762) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C17379 * C15423 + C17380 * C15417 +
            (C17360 - C17359 + C17362 - C17361 + C17364 - C17363) * C15424 +
            (C17366 - C17365 + C17368 - C17367 + C17370 - C17369) * C31762) *
               C32096 +
           ((C17930 - C17929 + C17932 - C17931 + C17934 - C17933) * C15423 +
            (C17936 - C17935 + C17938 - C17937 + C17940 - C17939) * C15417 +
            (C31895 * C360 - C31004 * C347 + C31902 * C687 - C30996 * C679 +
             C17324 * C1465 - C31010 * C1464) *
                C15424 +
            (C31895 * C377 - C31004 * C361 + C31902 * C694 - C30996 * C688 +
             C17324 * C1467 - C31010 * C1466) *
                C31762) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
             C17324 * C259 - C31010 * C244) *
                C15423 +
            (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
             C17324 * C274 - C31010 * C260) *
                C15417 +
            (C17335 - C17336 + C17337 - C17338 + C17339 - C17340) * C15424 +
            (C17341 - C17342 + C17343 - C17344 + C17345 - C17346) * C31762) *
               C32096 +
           ((C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C15423 +
            (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C15417 +
            (C17918 - C17917 + C17920 - C17919 + C17922 - C17921) * C15424 +
            (C17924 - C17923 + C17926 - C17925 + C17928 - C17927) * C31762) *
               C31941) *
              C341 +
          (((C19566 - C19565 + C19568 - C19567 + C19570 - C19569) * C15423 +
            (C19572 - C19571 + C19574 - C19573 + C19576 - C19575) * C15417 +
            (C17917 - C17918 + C17919 - C17920 + C17921 - C17922) * C15424 +
            (C17923 - C17924 + C17925 - C17926 + C17927 - C17928) * C31762) *
               C32096 +
           ((C19577 - C19578 + C19579 - C19580 + C19581 - C19582) * C15423 +
            (C19583 - C19584 + C19585 - C19586 + C19587 - C19588) * C15417 +
            (C19589 - C19590 + C19591 - C19592 + C19593 - C19594) * C15424 +
            (C19595 - C19596 + C19597 - C19598 + C19599 - C19600) * C31762) *
               C31941) *
              C342 +
          (((C19578 - C19577 + C19580 - C19579 + C19582 - C19581) * C15423 +
            (C19584 - C19583 + C19586 - C19585 + C19588 - C19587) * C15417 +
            (C19590 - C19589 + C19592 - C19591 + C19594 - C19593) * C15424 +
            (C19596 - C19595 + C19598 - C19597 + C19600 - C19599) * C31762) *
               C32096 +
           ((C31895 * C2005 - C31004 * C1999 + C31902 * C2533 - C30996 * C2530 +
             C17324 * C6815 - C31010 * C6812) *
                C15423 +
            (C31895 * C2017 - C31004 * C2006 + C31902 * C2539 - C30996 * C2534 +
             C17324 * C6821 - C31010 * C6816) *
                C15417 +
            (C31895 * C2007 - C31004 * C2000 + C31902 * C2535 - C30996 * C2531 +
             C17324 * C7170 - C31010 * C7169) *
                C15424 +
            (C31895 * C2018 - C31004 * C2008 + C31902 * C2540 - C30996 * C2536 +
             C17324 * C7172 - C31010 * C7171) *
                C31762) *
               C31941) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
              C17324 * C259 - C31010 * C244) *
                 C15423 +
             (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
              C17324 * C274 - C31010 * C260) *
                 C15417 +
             (C17335 - C17336 + C17337 - C17338 + C17339 - C17340) * C15424 +
             (C17341 - C17342 + C17343 - C17344 + C17345 - C17346) * C31762) *
                C32096 +
            ((C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C15423 +
             (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C15417 +
             C20017 * C15424 + C20018 * C31762) *
                C31941) *
               C572 +
           (((C19566 - C19565 + C19568 - C19567 + C19570 - C19569) * C15423 +
             (C19572 - C19571 + C19574 - C19573 + C19576 - C19575) * C15417 +
             C20019 * C15424 + C20020 * C31762) *
                C32096 +
            ((C19577 - C19578 + C19579 - C19580 + C19581 - C19582) * C15423 +
             (C19583 - C19584 + C19585 - C19586 + C19587 - C19588) * C15417 +
             (C19589 - C19590 + C19591 - C19592 + C19593 - C19594) * C15424 +
             (C19595 - C19596 + C19597 - C19598 + C19599 - C19600) * C31762) *
                C31941) *
               C573) *
              C31799 * C468 +
          ((((C17336 - C17335 + C17338 - C17337 + C17340 - C17339) * C15423 +
             (C17342 - C17341 + C17344 - C17343 + C17346 - C17345) * C15417 +
             (C17348 - C17347 + C17350 - C17349 + C17352 - C17351) * C15424 +
             (C17354 - C17353 + C17356 - C17355 + C17358 - C17357) * C31762) *
                C32096 +
            (C20019 * C15423 + C20020 * C15417 +
             (C17929 - C17930 + C17931 - C17932 + C17933 - C17934) * C15424 +
             (C17935 - C17936 + C17937 - C17938 + C17939 - C17940) * C31762) *
                C31941) *
               C572 +
           ((C20017 * C15423 + C20018 * C15417 +
             (C17930 - C17929 + C17932 - C17931 + C17934 - C17933) * C15424 +
             (C17936 - C17935 + C17938 - C17937 + C17940 - C17939) * C31762) *
                C32096 +
            ((C19590 - C19589 + C19592 - C19591 + C19594 - C19593) * C15423 +
             (C19596 - C19595 + C19598 - C19597 + C19600 - C19599) * C15417 +
             (C31895 * C368 - C31004 * C351 + C31902 * C1131 - C30996 * C1115 +
              C17324 * C1132 - C31010 * C1116) *
                 C15424 +
             (C31895 * C381 - C31004 * C369 + C31902 * C1142 - C30996 * C1133 +
              C17324 * C1143 - C31010 * C1134) *
                 C31762) *
                C31941) *
               C573) *
              C31799 * C469)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
             C17324 * C259 - C31010 * C244) *
                C15423 +
            (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
             C17324 * C274 - C31010 * C260) *
                C15417 +
            (C17335 - C17336 + C17337 - C17338 + C17339 - C17340) * C15424 +
            (C17341 - C17342 + C17343 - C17344 + C17345 - C17346) * C31762) *
               C32096 +
           ((C31895 * C354 - C31004 * C344 + C31902 * C681 - C30996 * C676 +
             C17324 * C1117 - C31010 * C1108) *
                C15423 +
            (C31895 * C374 - C31004 * C355 + C31902 * C691 - C30996 * C682 +
             C17324 * C1135 - C31010 * C1118) *
                C15417 +
            (C17918 - C17917 + C17920 - C17919 + C17922 - C17921) * C15424 +
            (C17924 - C17923 + C17926 - C17925 + C17928 - C17927) * C31762) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C17336 - C17335 + C17338 - C17337 + C17340 - C17339) * C15423 +
            (C17342 - C17341 + C17344 - C17343 + C17346 - C17345) * C15417 +
            (C17348 - C17347 + C17350 - C17349 + C17352 - C17351) * C15424 +
            (C17354 - C17353 + C17356 - C17355 + C17358 - C17357) * C31762) *
               C32096 +
           ((C17917 - C17918 + C17919 - C17920 + C17921 - C17922) * C15423 +
            (C17923 - C17924 + C17925 - C17926 + C17927 - C17928) * C15417 +
            (C17929 - C17930 + C17931 - C17932 + C17933 - C17934) * C15424 +
            (C17935 - C17936 + C17937 - C17938 + C17939 - C17940) * C31762) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C17379 * C15423 + C17380 * C15417 +
            (C17360 - C17359 + C17362 - C17361 + C17364 - C17363) * C15424 +
            (C17366 - C17365 + C17368 - C17367 + C17370 - C17369) * C31762) *
               C32096 +
           ((C17930 - C17929 + C17932 - C17931 + C17934 - C17933) * C15423 +
            (C17936 - C17935 + C17938 - C17937 + C17940 - C17939) * C15417 +
            (C31895 * C360 - C31004 * C347 + C31902 * C687 - C30996 * C679 +
             C17324 * C1465 - C31010 * C1464) *
                C15424 +
            (C31895 * C377 - C31004 * C361 + C31902 * C694 - C30996 * C688 +
             C17324 * C1467 - C31010 * C1466) *
                C31762) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
             C17324 * C259 - C31010 * C244) *
                C15423 +
            (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
             C17324 * C274 - C31010 * C260) *
                C15417 +
            (C17335 - C17336 + C17337 - C17338 + C17339 - C17340) * C15424 +
            (C17341 - C17342 + C17343 - C17344 + C17345 - C17346) * C31762) *
               C32096 +
           ((C31895 * C354 - C31004 * C344 + C31902 * C681 - C30996 * C676 +
             C17324 * C1117 - C31010 * C1108) *
                C15423 +
            (C31895 * C374 - C31004 * C355 + C31902 * C691 - C30996 * C682 +
             C17324 * C1135 - C31010 * C1118) *
                C15417 +
            (C17918 - C17917 + C17920 - C17919 + C17922 - C17921) * C15424 +
            (C17924 - C17923 + C17926 - C17925 + C17928 - C17927) * C31762) *
               C31941) *
              C31813 * C235 +
          (((C31004 * C239 - C31895 * C249 + C30996 * C244 - C31902 * C259 +
             C31010 * C974 - C17324 * C980) *
                C15423 +
            (C31004 * C250 - C31895 * C269 + C30996 * C260 - C31902 * C274 +
             C31010 * C981 - C17324 * C992) *
                C15417 +
            (C17747 - C17748 + C17749 - C17750 + C17751 - C17752) * C15424 +
            (C17753 - C17754 + C17755 - C17756 + C17757 - C17758) * C31762) *
               C32096 +
           ((C31004 * C676 - C31895 * C681 + C30996 * C1108 - C31902 * C1117 +
             C31010 * C1638 - C17324 * C1641) *
                C15423 +
            (C31004 * C682 - C31895 * C691 + C30996 * C1118 - C31902 * C1135 +
             C31010 * C1642 - C17324 * C1647) *
                C15417 +
            (C31004 * C677 - C31895 * C683 + C30996 * C1109 - C31902 * C1119 +
             C31010 * C1639 - C17324 * C1643) *
                C15424 +
            (C31004 * C684 - C31895 * C692 + C30996 * C1120 - C31902 * C1136 +
             C31010 * C1644 - C17324 * C1648) *
                C31762) *
               C31941) *
              C31813 * C236 +
          (((C31895 * C259 - C31004 * C244 + C31902 * C980 - C30996 * C974 +
             C17324 * C986 - C31010 * C977) *
                C15423 +
            (C31895 * C274 - C31004 * C260 + C31902 * C992 - C30996 * C981 +
             C17324 * C995 - C31010 * C987) *
                C15417 +
            (C31895 * C261 - C31004 * C245 + C31902 * C982 - C30996 * C975 +
             C17324 * C988 - C31010 * C978) *
                C15424 +
            (C31895 * C275 - C31004 * C262 + C31902 * C993 - C30996 * C983 +
             C17324 * C996 - C31010 * C989) *
                C31762) *
               C32096 +
           ((C31895 * C1117 - C31004 * C1108 + C31902 * C1641 - C30996 * C1638 +
             C17324 * C6215 - C31010 * C6212) *
                C15423 +
            (C31895 * C1135 - C31004 * C1118 + C31902 * C1647 - C30996 * C1642 +
             C17324 * C6221 - C31010 * C6216) *
                C15417 +
            (C31895 * C1119 - C31004 * C1109 + C31902 * C1643 - C30996 * C1639 +
             C17324 * C6393 - C31010 * C6392) *
                C15424 +
            (C31895 * C1136 - C31004 * C1120 + C31902 * C1648 - C30996 * C1644 +
             C17324 * C6395 - C31010 * C6394) *
                C31762) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
             C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
                C15423 +
            (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
             C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
                C15417 +
            (C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
             C15433) *
                C15424 +
            (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
             C15441) *
                C31762) *
               C31854 * C31813 * C466 +
           ((C15419 * C239 - C32168 * C249 + C15420 * C244 - C32164 * C259 +
             C15421 * C974 - C32154 * C980 + C15422 * C977 - C32136 * C986) *
                C15423 +
            (C15419 * C250 - C32168 * C269 + C15420 * C260 - C32164 * C274 +
             C15421 * C981 - C32154 * C992 + C15422 * C987 - C32136 * C995) *
                C15417 +
            (C15784 - C15785 + C15786 - C15787 + C15788 - C15789 + C15790 -
             C15791) *
                C15424 +
            (C15792 - C15793 + C15794 - C15795 + C15796 - C15797 + C15798 -
             C15799) *
                C31762) *
               C31854 * C31813 * C467) *
              C468 +
          (((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
             C15432) *
                C15423 +
            (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
             C15440) *
                C15417 +
            (C15442 - C15443 + C15444 - C15445 + C15446 - C15447 + C15448 -
             C15449) *
                C15424 +
            (C15450 - C15451 + C15452 - C15453 + C15454 - C15455 + C15456 -
             C15457) *
                C31762) *
               C31854 * C31813 * C466 +
           ((C15785 - C15784 + C15787 - C15786 + C15789 - C15788 + C15791 -
             C15790) *
                C15423 +
            (C15793 - C15792 + C15795 - C15794 + C15797 - C15796 + C15799 -
             C15798) *
                C15417 +
            (C32168 * C253 - C15419 * C241 + C32164 * C263 - C15420 * C246 +
             C32154 * C984 - C15421 * C976 + C32136 * C990 - C15422 * C979) *
                C15424 +
            (C32168 * C271 - C15419 * C254 + C32164 * C276 - C15420 * C264 +
             C32154 * C994 - C15421 * C985 + C32136 * C997 - C15422 * C991) *
                C31762) *
               C31854 * C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C14633 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C32167 +
            (C14638 - C14639 + C14640 - C14641) * C14634 +
            (C14642 - C14643 + C14644 - C14645) * C32160 + C14678 * C14635 +
            C14679 * C32147 + C14680 * C14636 + C14681 * C32130) *
               C31854 * C31813 * C466 +
           ((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                C14633 +
            (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                C32167 +
            (C15008 - C15009 + C15010 - C15011) * C14634 +
            (C15012 - C15013 + C15014 - C15015) * C32160 +
            (C15016 - C15017 + C15018 - C15019) * C14635 +
            (C15020 - C15021 + C15022 - C15023) * C32147 +
            (C15024 - C15025 + C15026 - C15027) * C14636 +
            (C15028 - C15029 + C15030 - C15031) * C32130) *
               C31854 * C31813 * C467) *
              C468 +
          (((C14639 - C14638 + C14641 - C14640) * C14633 +
            (C14643 - C14642 + C14645 - C14644) * C32167 +
            (C14647 - C14646 + C14649 - C14648) * C14634 +
            (C14651 - C14650 + C14653 - C14652) * C32160 +
            (C14655 - C14654 + C14657 - C14656) * C14635 +
            (C14659 - C14658 + C14661 - C14660) * C32147 +
            (C14662 - C14663 + C14664 - C14665) * C14636 +
            (C14666 - C14667 + C14668 - C14669) * C32130) *
               C31854 * C31813 * C466 +
           ((C15009 - C15008 + C15011 - C15010) * C14633 +
            (C15013 - C15012 + C15015 - C15014) * C32167 +
            (C15017 - C15016 + C15019 - C15018) * C14634 +
            (C15021 - C15020 + C15023 - C15022) * C32160 +
            (C15025 - C15024 + C15027 - C15026) * C14635 +
            (C15029 - C15028 + C15031 - C15030) * C32147 +
            (C14625 * C257 - C14631 * C243 + C31899 * C267 - C14632 * C248) *
                C14636 +
            (C14625 * C273 - C14631 * C258 + C31899 * C278 - C14632 * C268) *
                C32130) *
               C31854 * C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                 C15423 +
             (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                 C15417 +
             (C14638 - C14639 + C14640 - C14641) * C15424 +
             (C14642 - C14643 + C14644 - C14645) * C31762) *
                C32162 +
            ((C16530 - C16531 + C16532 - C16533) * C15423 +
             (C16534 - C16535 + C16536 - C16537) * C15417 +
             (C15163 - C15162 + C15165 - C15164) * C15424 +
             (C15167 - C15166 + C15169 - C15168) * C31762) *
                C32151 +
            C16580 * C32129) *
               C31813 * C466 +
           (((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                 C15423 +
             (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                 C15417 +
             (C15008 - C15009 + C15010 - C15011) * C15424 +
             (C15012 - C15013 + C15014 - C15015) * C31762) *
                C32162 +
            ((C14631 * C676 - C14625 * C681 + C14632 * C1108 - C31899 * C1117) *
                 C15423 +
             (C14631 * C682 - C14625 * C691 + C14632 * C1118 - C31899 * C1135) *
                 C15417 +
             (C16775 - C16776 + C16777 - C16778) * C15424 +
             (C16779 - C16780 + C16781 - C16782) * C31762) *
                C32151 +
            ((C14631 * C1111 - C14625 * C1123 + C14632 * C1112 -
              C31899 * C1124) *
                 C15423 +
             (C14631 * C1125 - C14625 * C1138 + C14632 * C1126 -
              C31899 * C1139) *
                 C15417 +
             (C16783 - C16784 + C16785 - C16786) * C15424 +
             (C16787 - C16788 + C16789 - C16790) * C31762) *
                C32129) *
               C31813 * C467) *
              C468 +
          ((((C14639 - C14638 + C14641 - C14640) * C15423 +
             (C14643 - C14642 + C14645 - C14644) * C15417 +
             (C14647 - C14646 + C14649 - C14648) * C15424 +
             (C14651 - C14650 + C14653 - C14652) * C31762) *
                C32162 +
            ((C15162 - C15163 + C15164 - C15165) * C15423 +
             (C15166 - C15167 + C15168 - C15169) * C15417 +
             (C15170 - C15171 + C15172 - C15173) * C15424 +
             (C15174 - C15175 + C15176 - C15177) * C31762) *
                C32151 +
            ((C16223 - C16222 + C16225 - C16224) * C15423 +
             (C16227 - C16226 + C16229 - C16228) * C15417 +
             (C16230 - C16231 + C16232 - C16233) * C15424 +
             (C16234 - C16235 + C16236 - C16237) * C31762) *
                C32129) *
               C31813 * C466 +
           (((C15009 - C15008 + C15011 - C15010) * C15423 +
             (C15013 - C15012 + C15015 - C15014) * C15417 +
             (C15017 - C15016 + C15019 - C15018) * C15424 +
             (C15021 - C15020 + C15023 - C15022) * C31762) *
                C32162 +
            ((C16776 - C16775 + C16778 - C16777) * C15423 +
             (C16780 - C16779 + C16782 - C16781) * C15417 +
             (C14625 * C685 - C14631 * C678 + C31899 * C1121 - C14632 * C1110) *
                 C15424 +
             (C14625 * C693 - C14631 * C686 + C31899 * C1137 - C14632 * C1122) *
                 C31762) *
                C32151 +
            ((C16784 - C16783 + C16786 - C16785) * C15423 +
             (C16788 - C16787 + C16790 - C16789) * C15417 +
             (C14625 * C1131 - C14631 * C1115 + C31899 * C1132 -
              C14632 * C1116) *
                 C15424 +
             (C14625 * C1142 - C14631 * C1133 + C31899 * C1143 -
              C14632 * C1134) *
                 C31762) *
                C32129) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
             C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
                C15423 +
            (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
             C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
                C15417 +
            (C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
             C15433) *
                C15424 +
            (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
             C15441) *
                C31762) *
               C31854 * C572 +
           ((C15419 * C344 - C32168 * C354 + C15420 * C676 - C32164 * C681 +
             C15421 * C1108 - C32154 * C1117 + C15422 * C1638 -
             C32136 * C1641) *
                C15423 +
            (C15419 * C355 - C32168 * C374 + C15420 * C682 - C32164 * C691 +
             C15421 * C1118 - C32154 * C1135 + C15422 * C1642 -
             C32136 * C1647) *
                C15417 +
            (C15930 - C15931 + C15932 - C15933 + C15934 - C15935 + C15936 -
             C15937) *
                C15424 +
            (C15938 - C15939 + C15940 - C15941 + C15942 - C15943 + C15944 -
             C15945) *
                C31762) *
               C31854 * C573) *
              C466 +
          (((C15419 * C239 - C32168 * C249 + C15420 * C244 - C32164 * C259 +
             C15421 * C974 - C32154 * C980 + C15422 * C977 - C32136 * C986) *
                C15423 +
            (C15419 * C250 - C32168 * C269 + C15420 * C260 - C32164 * C274 +
             C15421 * C981 - C32154 * C992 + C15422 * C987 - C32136 * C995) *
                C15417 +
            (C15784 - C15785 + C15786 - C15787 + C15788 - C15789 + C15790 -
             C15791) *
                C15424 +
            (C15792 - C15793 + C15794 - C15795 + C15796 - C15797 + C15798 -
             C15799) *
                C31762) *
               C31854 * C572 +
           ((C32168 * C681 - C15419 * C676 + C32164 * C1117 - C15420 * C1108 +
             C32154 * C1641 - C15421 * C1638 + C32136 * C6215 -
             C15422 * C6212) *
                C15423 +
            (C32168 * C691 - C15419 * C682 + C32164 * C1135 - C15420 * C1118 +
             C32154 * C1647 - C15421 * C1642 + C32136 * C6221 -
             C15422 * C6216) *
                C15417 +
            (C32168 * C683 - C15419 * C677 + C32164 * C1119 - C15420 * C1109 +
             C32154 * C1643 - C15421 * C1639 + C32136 * C6393 -
             C15422 * C6392) *
                C15424 +
            (C32168 * C692 - C15419 * C684 + C32164 * C1136 - C15420 * C1120 +
             C32154 * C1648 - C15421 * C1644 + C32136 * C6395 -
             C15422 * C6394) *
                C31762) *
               C31854 * C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C14633 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C32167 +
            (C14638 - C14639 + C14640 - C14641) * C14634 +
            (C14642 - C14643 + C14644 - C14645) * C32160 + C14678 * C14635 +
            C14679 * C32147 + C14680 * C14636 + C14681 * C32130) *
               C31854 * C572 +
           ((C14631 * C344 - C14625 * C354 + C14632 * C676 - C31899 * C681) *
                C14633 +
            (C14631 * C355 - C14625 * C374 + C14632 * C682 - C31899 * C691) *
                C32167 +
            (C15162 - C15163 + C15164 - C15165) * C14634 +
            (C15166 - C15167 + C15168 - C15169) * C32160 +
            (C15170 - C15171 + C15172 - C15173) * C14635 +
            (C15174 - C15175 + C15176 - C15177) * C32147 +
            (C15178 - C15179 + C15180 - C15181) * C14636 +
            (C15182 - C15183 + C15184 - C15185) * C32130) *
               C31854 * C573) *
              C466 +
          (((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                C14633 +
            (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                C32167 +
            (C15008 - C15009 + C15010 - C15011) * C14634 +
            (C15012 - C15013 + C15014 - C15015) * C32160 +
            (C15016 - C15017 + C15018 - C15019) * C14635 +
            (C15020 - C15021 + C15022 - C15023) * C32147 +
            (C15024 - C15025 + C15026 - C15027) * C14636 +
            (C15028 - C15029 + C15030 - C15031) * C32130) *
               C31854 * C572 +
           ((C14625 * C681 - C14631 * C676 + C31899 * C1117 - C14632 * C1108) *
                C14633 +
            (C14625 * C691 - C14631 * C682 + C31899 * C1135 - C14632 * C1118) *
                C32167 +
            (C14625 * C683 - C14631 * C677 + C31899 * C1119 - C14632 * C1109) *
                C14634 +
            (C14625 * C692 - C14631 * C684 + C31899 * C1136 - C14632 * C1120) *
                C32160 +
            (C14625 * C685 - C14631 * C678 + C31899 * C1121 - C14632 * C1110) *
                C14635 +
            (C14625 * C693 - C14631 * C686 + C31899 * C1137 - C14632 * C1122) *
                C32147 +
            (C14625 * C687 - C14631 * C679 + C31899 * C1465 - C14632 * C1464) *
                C14636 +
            (C14625 * C694 - C14631 * C688 + C31899 * C1467 - C14632 * C1466) *
                C32130) *
               C31854 * C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                 C15423 +
             (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                 C15417 +
             (C14638 - C14639 + C14640 - C14641) * C15424 +
             (C14642 - C14643 + C14644 - C14645) * C31762) *
                C32162 +
            ((C16530 - C16531 + C16532 - C16533) * C15423 +
             (C16534 - C16535 + C16536 - C16537) * C15417 + C16997 * C15424 +
             C16998 * C31762) *
                C32151 +
            C16580 * C32129) *
               C572 +
           (((C16531 - C16530 + C16533 - C16532) * C15423 +
             (C16535 - C16534 + C16537 - C16536) * C15417 + C16999 * C15424 +
             C17000 * C31762) *
                C32162 +
            ((C16539 - C16538 + C16541 - C16540) * C15423 +
             (C16543 - C16542 + C16545 - C16544) * C15417 + C17001 * C15424 +
             C17002 * C31762) *
                C32151 +
            ((C16550 - C16551 + C16552 - C16553) * C15423 +
             (C16554 - C16555 + C16556 - C16557) * C15417 +
             (C16558 - C16559 + C16560 - C16561) * C15424 +
             (C16562 - C16563 + C16564 - C16565) * C31762) *
                C32129) *
               C573) *
              C466 +
          ((((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                 C15423 +
             (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                 C15417 +
             (C15008 - C15009 + C15010 - C15011) * C15424 +
             (C15012 - C15013 + C15014 - C15015) * C31762) *
                C32162 +
            ((C17197 - C17198 + C17199 - C17200) * C15423 +
             (C17201 - C17202 + C17203 - C17204) * C15417 +
             (C16775 - C16776 + C16777 - C16778) * C15424 +
             (C16779 - C16780 + C16781 - C16782) * C31762) *
                C32151 +
            ((C17205 - C17206 + C17207 - C17208) * C15423 +
             (C17209 - C17210 + C17211 - C17212) * C15417 +
             (C16783 - C16784 + C16785 - C16786) * C15424 +
             (C16787 - C16788 + C16789 - C16790) * C31762) *
                C32129) *
               C572 +
           (((C17198 - C17197 + C17200 - C17199) * C15423 +
             (C17202 - C17201 + C17204 - C17203) * C15417 +
             (C16776 - C16775 + C16778 - C16777) * C15424 +
             (C16780 - C16779 + C16782 - C16781) * C31762) *
                C32162 +
            ((C17206 - C17205 + C17208 - C17207) * C15423 +
             (C17210 - C17209 + C17212 - C17211) * C15417 +
             (C16784 - C16783 + C16786 - C16785) * C15424 +
             (C16788 - C16787 + C16790 - C16789) * C31762) *
                C32151 +
            ((C14625 * C2533 - C14631 * C2530 + C31899 * C6815 -
              C14632 * C6812) *
                 C15423 +
             (C14625 * C2539 - C14631 * C2534 + C31899 * C6821 -
              C14632 * C6816) *
                 C15417 +
             (C14625 * C2535 - C14631 * C2531 + C31899 * C7170 -
              C14632 * C7169) *
                 C15424 +
             (C14625 * C2540 - C14631 * C2536 + C31899 * C7172 -
              C14632 * C7171) *
                 C31762) *
                C32129) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                   C14633 +
               (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                   C32167 +
               (C14638 - C14639 + C14640 - C14641) * C14634 +
               (C14642 - C14643 + C14644 - C14645) * C32160 + C14678 * C14635 +
               C14679 * C32147 + C14680 * C14636 + C14681 * C32130) *
                  C31854 * C31813 * C31799 * C110 +
              ((C14639 - C14638 + C14641 - C14640) * C14633 +
               (C14643 - C14642 + C14645 - C14644) * C32167 +
               (C14647 - C14646 + C14649 - C14648) * C14634 +
               (C14651 - C14650 + C14653 - C14652) * C32160 +
               (C14655 - C14654 + C14657 - C14656) * C14635 +
               (C14659 - C14658 + C14661 - C14660) * C32147 +
               (C14662 - C14663 + C14664 - C14665) * C14636 +
               (C14666 - C14667 + C14668 - C14669) * C32130) *
                  C31854 * C31813 * C31799 * C111 +
              (C14678 * C14633 + C14679 * C32167 + C14680 * C14634 +
               C14681 * C32160 + (C14663 - C14662 + C14665 - C14664) * C14635 +
               (C14667 - C14666 + C14669 - C14668) * C32147 +
               (C14625 * C136 - C14631 * C124 + C31899 * C471 - C14632 * C470) *
                   C14636 +
               (C14625 * C145 - C14631 * C137 + C31899 * C473 - C14632 * C472) *
                   C32130) *
                  C31854 * C31813 * C31799 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                   C14633 +
               (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                   C32167 +
               (C14638 - C14639 + C14640 - C14641) * C14634 +
               (C14642 - C14643 + C14644 - C14645) * C32160 + C14678 * C14635 +
               C14679 * C32147 + C14680 * C14636 + C14681 * C32130) *
                  C31854 * C31813 * C235 +
              ((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                   C14633 +
               (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                   C32167 +
               (C14631 * C240 - C14625 * C251 + C14632 * C245 - C31899 * C261) *
                   C14634 +
               (C14631 * C252 - C14625 * C270 + C14632 * C262 - C31899 * C275) *
                   C32160 +
               (C14631 * C241 - C14625 * C253 + C14632 * C246 - C31899 * C263) *
                   C14635 +
               (C14631 * C254 - C14625 * C271 + C14632 * C264 - C31899 * C276) *
                   C32147 +
               (C14631 * C242 - C14625 * C255 + C14632 * C247 - C31899 * C265) *
                   C14636 +
               (C14631 * C256 - C14625 * C272 + C14632 * C266 - C31899 * C277) *
                   C32130) *
                  C31854 * C31813 * C236 +
              ((C14625 * C259 - C14631 * C244 + C31899 * C980 - C14632 * C974) *
                   C14633 +
               (C14625 * C274 - C14631 * C260 + C31899 * C992 - C14632 * C981) *
                   C32167 +
               (C14625 * C261 - C14631 * C245 + C31899 * C982 - C14632 * C975) *
                   C14634 +
               (C14625 * C275 - C14631 * C262 + C31899 * C993 - C14632 * C983) *
                   C32160 +
               (C14625 * C263 - C14631 * C246 + C31899 * C984 - C14632 * C976) *
                   C14635 +
               (C14625 * C276 - C14631 * C264 + C31899 * C994 - C14632 * C985) *
                   C32147 +
               (C14625 * C265 - C14631 * C247 + C31899 * C1291 -
                C14632 * C1290) *
                   C14636 +
               (C14625 * C277 - C14631 * C266 + C31899 * C1293 -
                C14632 * C1292) *
                   C32130) *
                  C31854 * C31813 * C237) *
             C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
               C14633 +
           (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
               C32167 +
           (C14638 - C14639 + C14640 - C14641) * C14634 +
           (C14642 - C14643 + C14644 - C14645) * C32160 + C14678 * C14635 +
           C14679 * C32147 + C14680 * C14636 + C14681 * C32130) *
              C31854 * C341 +
          ((C14631 * C344 - C14625 * C354 + C14632 * C676 - C31899 * C681) *
               C14633 +
           (C14631 * C355 - C14625 * C374 + C14632 * C682 - C31899 * C691) *
               C32167 +
           (C14631 * C345 - C14625 * C356 + C14632 * C677 - C31899 * C683) *
               C14634 +
           (C14631 * C357 - C14625 * C375 + C14632 * C684 - C31899 * C692) *
               C32160 +
           (C14631 * C346 - C14625 * C358 + C14632 * C678 - C31899 * C685) *
               C14635 +
           (C14631 * C359 - C14625 * C376 + C14632 * C686 - C31899 * C693) *
               C32147 +
           (C14631 * C347 - C14625 * C360 + C14632 * C679 - C31899 * C687) *
               C14636 +
           (C14631 * C361 - C14625 * C377 + C14632 * C688 - C31899 * C694) *
               C32130) *
              C31854 * C342 +
          ((C14625 * C364 - C14631 * C349 + C31899 * C1123 - C14632 * C1111) *
               C14633 +
           (C14625 * C379 - C14631 * C365 + C31899 * C1138 - C14632 * C1125) *
               C32167 +
           (C14625 * C366 - C14631 * C350 + C31899 * C1127 - C14632 * C1113) *
               C14634 +
           (C14625 * C380 - C14631 * C367 + C31899 * C1140 - C14632 * C1129) *
               C32160 +
           (C14625 * C368 - C14631 * C351 + C31899 * C1131 - C14632 * C1115) *
               C14635 +
           (C14625 * C381 - C14631 * C369 + C31899 * C1142 - C14632 * C1133) *
               C32147 +
           (C14625 * C370 - C14631 * C352 + C31899 * C2205 - C14632 * C2204) *
               C14636 +
           (C14625 * C382 - C14631 * C371 + C31899 * C2207 - C14632 * C2206) *
               C32130) *
              C31854 * C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
            C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
               C15423 +
           (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
            C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
               C15417 +
           (C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
            C15433) *
               C15424 +
           (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
            C15441) *
               C31762) *
              C31854 * C31813 * C31799 * C110 +
          ((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
            C15432) *
               C15423 +
           (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
            C15440) *
               C15417 +
           (C15442 - C15443 + C15444 - C15445 + C15446 - C15447 + C15448 -
            C15449) *
               C15424 +
           (C15450 - C15451 + C15452 - C15453 + C15454 - C15455 + C15456 -
            C15457) *
               C31762) *
              C31854 * C31813 * C31799 * C111 +
          ((C15443 - C15442 + C15445 - C15444 + C15447 - C15446 + C15449 -
            C15448) *
               C15423 +
           (C15451 - C15450 + C15453 - C15452 + C15455 - C15454 + C15457 -
            C15456) *
               C15417 +
           (C32168 * C132 - C15419 * C122 + C32164 * C255 - C15420 * C242 +
            C32154 * C265 - C15421 * C247 + C32136 * C1291 - C15422 * C1290) *
               C15424 +
           (C32168 * C143 - C15419 * C133 + C32164 * C272 - C15420 * C256 +
            C32154 * C277 - C15421 * C266 + C32136 * C1293 - C15422 * C1292) *
               C31762) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
            C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
               C15423 +
           (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
            C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
               C15417 +
           (C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
            C15433) *
               C15424 +
           (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
            C15441) *
               C31762) *
              C31854 * C31813 * C235 +
          ((C15419 * C239 - C32168 * C249 + C15420 * C244 - C32164 * C259 +
            C15421 * C974 - C32154 * C980 + C15422 * C977 - C32136 * C986) *
               C15423 +
           (C15419 * C250 - C32168 * C269 + C15420 * C260 - C32164 * C274 +
            C15421 * C981 - C32154 * C992 + C15422 * C987 - C32136 * C995) *
               C15417 +
           (C15419 * C240 - C32168 * C251 + C15420 * C245 - C32164 * C261 +
            C15421 * C975 - C32154 * C982 + C15422 * C978 - C32136 * C988) *
               C15424 +
           (C15419 * C252 - C32168 * C270 + C15420 * C262 - C32164 * C275 +
            C15421 * C983 - C32154 * C993 + C15422 * C989 - C32136 * C996) *
               C31762) *
              C31854 * C31813 * C236 +
          ((C32168 * C259 - C15419 * C244 + C32164 * C980 - C15420 * C974 +
            C32154 * C986 - C15421 * C977 + C32136 * C6144 - C15422 * C6142) *
               C15423 +
           (C32168 * C274 - C15419 * C260 + C32164 * C992 - C15420 * C981 +
            C32154 * C995 - C15421 * C987 + C32136 * C6148 - C15422 * C6145) *
               C15417 +
           (C32168 * C261 - C15419 * C245 + C32164 * C982 - C15420 * C975 +
            C32154 * C988 - C15421 * C978 + C32136 * C6307 - C15422 * C6306) *
               C15424 +
           (C32168 * C275 - C15419 * C262 + C32164 * C993 - C15420 * C983 +
            C32154 * C996 - C15421 * C989 + C32136 * C6309 - C15422 * C6308) *
               C31762) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
            C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
               C15423 +
           (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
            C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
               C15417 +
           (C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
            C15433) *
               C15424 +
           (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
            C15441) *
               C31762) *
              C31854 * C341 +
          ((C15419 * C344 - C32168 * C354 + C15420 * C676 - C32164 * C681 +
            C15421 * C1108 - C32154 * C1117 + C15422 * C1638 - C32136 * C1641) *
               C15423 +
           (C15419 * C355 - C32168 * C374 + C15420 * C682 - C32164 * C691 +
            C15421 * C1118 - C32154 * C1135 + C15422 * C1642 - C32136 * C1647) *
               C15417 +
           (C15419 * C345 - C32168 * C356 + C15420 * C677 - C32164 * C683 +
            C15421 * C1109 - C32154 * C1119 + C15422 * C1639 - C32136 * C1643) *
               C15424 +
           (C15419 * C357 - C32168 * C375 + C15420 * C684 - C32164 * C692 +
            C15421 * C1120 - C32154 * C1136 + C15422 * C1644 - C32136 * C1648) *
               C31762) *
              C31854 * C342 +
          ((C32168 * C364 - C15419 * C349 + C32164 * C1123 - C15420 * C1111 +
            C32154 * C1124 - C15421 * C1112 + C32136 * C6217 - C15422 * C6213) *
               C15423 +
           (C32168 * C379 - C15419 * C365 + C32164 * C1138 - C15420 * C1125 +
            C32154 * C1139 - C15421 * C1126 + C32136 * C6222 - C15422 * C6219) *
               C15417 +
           (C32168 * C366 - C15419 * C350 + C32164 * C1127 - C15420 * C1113 +
            C32154 * C1128 - C15421 * C1114 + C32136 * C7020 - C15422 * C7019) *
               C15424 +
           (C32168 * C380 - C15419 * C367 + C32164 * C1140 - C15420 * C1129 +
            C32154 * C1141 - C15421 * C1130 + C32136 * C7022 - C15422 * C7021) *
               C31762) *
              C31854 * C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C15423 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C15417 +
            (C14638 - C14639 + C14640 - C14641) * C15424 +
            (C14642 - C14643 + C14644 - C14645) * C31762) *
               C32162 +
           ((C14625 * C354 - C14631 * C344 + C31899 * C681 - C14632 * C676) *
                C15423 +
            (C14625 * C374 - C14631 * C355 + C31899 * C691 - C14632 * C682) *
                C15417 +
            (C15163 - C15162 + C15165 - C15164) * C15424 +
            (C15167 - C15166 + C15169 - C15168) * C31762) *
               C32151 +
           ((C14625 * C364 - C14631 * C349 + C31899 * C1123 - C14632 * C1111) *
                C15423 +
            (C14625 * C379 - C14631 * C365 + C31899 * C1138 - C14632 * C1125) *
                C15417 +
            (C16222 - C16223 + C16224 - C16225) * C15424 +
            (C16226 - C16227 + C16228 - C16229) * C31762) *
               C32129) *
              C31813 * C31799 * C110 +
          (((C14639 - C14638 + C14641 - C14640) * C15423 +
            (C14643 - C14642 + C14645 - C14644) * C15417 +
            (C14647 - C14646 + C14649 - C14648) * C15424 +
            (C14651 - C14650 + C14653 - C14652) * C31762) *
               C32162 +
           ((C15162 - C15163 + C15164 - C15165) * C15423 +
            (C15166 - C15167 + C15168 - C15169) * C15417 +
            (C15170 - C15171 + C15172 - C15173) * C15424 +
            (C15174 - C15175 + C15176 - C15177) * C31762) *
               C32151 +
           ((C16223 - C16222 + C16225 - C16224) * C15423 +
            (C16227 - C16226 + C16229 - C16228) * C15417 +
            (C16230 - C16231 + C16232 - C16233) * C15424 +
            (C16234 - C16235 + C16236 - C16237) * C31762) *
               C32129) *
              C31813 * C31799 * C111 +
          ((C14678 * C15423 + C14679 * C15417 + C14680 * C15424 +
            C14681 * C31762) *
               C32162 +
           ((C15171 - C15170 + C15173 - C15172) * C15423 +
            (C15175 - C15174 + C15177 - C15176) * C15417 +
            (C15179 - C15178 + C15181 - C15180) * C15424 +
            (C15183 - C15182 + C15185 - C15184) * C31762) *
               C32151 +
           ((C16231 - C16230 + C16233 - C16232) * C15423 +
            (C16235 - C16234 + C16237 - C16236) * C15417 +
            (C14625 * C370 - C14631 * C352 + C31899 * C2205 - C14632 * C2204) *
                C15424 +
            (C14625 * C382 - C14631 * C371 + C31899 * C2207 - C14632 * C2206) *
                C31762) *
               C32129) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C15423 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C15417 +
            (C14638 - C14639 + C14640 - C14641) * C15424 +
            (C14642 - C14643 + C14644 - C14645) * C31762) *
               C32162 +
           ((C14625 * C354 - C14631 * C344 + C31899 * C681 - C14632 * C676) *
                C15423 +
            (C14625 * C374 - C14631 * C355 + C31899 * C691 - C14632 * C682) *
                C15417 +
            (C15163 - C15162 + C15165 - C15164) * C15424 +
            (C15167 - C15166 + C15169 - C15168) * C31762) *
               C32151 +
           ((C14625 * C364 - C14631 * C349 + C31899 * C1123 - C14632 * C1111) *
                C15423 +
            (C14625 * C379 - C14631 * C365 + C31899 * C1138 - C14632 * C1125) *
                C15417 +
            (C16222 - C16223 + C16224 - C16225) * C15424 +
            (C16226 - C16227 + C16228 - C16229) * C31762) *
               C32129) *
              C31813 * C235 +
          (((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                C15423 +
            (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                C15417 +
            (C15008 - C15009 + C15010 - C15011) * C15424 +
            (C15012 - C15013 + C15014 - C15015) * C31762) *
               C32162 +
           ((C14631 * C676 - C14625 * C681 + C14632 * C1108 - C31899 * C1117) *
                C15423 +
            (C14631 * C682 - C14625 * C691 + C14632 * C1118 - C31899 * C1135) *
                C15417 +
            (C14631 * C677 - C14625 * C683 + C14632 * C1109 - C31899 * C1119) *
                C15424 +
            (C14631 * C684 - C14625 * C692 + C14632 * C1120 - C31899 * C1136) *
                C31762) *
               C32151 +
           ((C14631 * C1111 - C14625 * C1123 + C14632 * C1112 -
             C31899 * C1124) *
                C15423 +
            (C14631 * C1125 - C14625 * C1138 + C14632 * C1126 -
             C31899 * C1139) *
                C15417 +
            (C14631 * C1113 - C14625 * C1127 + C14632 * C1114 -
             C31899 * C1128) *
                C15424 +
            (C14631 * C1129 - C14625 * C1140 + C14632 * C1130 -
             C31899 * C1141) *
                C31762) *
               C32129) *
              C31813 * C236 +
          (((C14625 * C259 - C14631 * C244 + C31899 * C980 - C14632 * C974) *
                C15423 +
            (C14625 * C274 - C14631 * C260 + C31899 * C992 - C14632 * C981) *
                C15417 +
            (C14625 * C261 - C14631 * C245 + C31899 * C982 - C14632 * C975) *
                C15424 +
            (C14625 * C275 - C14631 * C262 + C31899 * C993 - C14632 * C983) *
                C31762) *
               C32162 +
           ((C14625 * C1117 - C14631 * C1108 + C31899 * C1641 -
             C14632 * C1638) *
                C15423 +
            (C14625 * C1135 - C14631 * C1118 + C31899 * C1647 -
             C14632 * C1642) *
                C15417 +
            (C14625 * C1119 - C14631 * C1109 + C31899 * C1643 -
             C14632 * C1639) *
                C15424 +
            (C14625 * C1136 - C14631 * C1120 + C31899 * C1648 -
             C14632 * C1644) *
                C31762) *
               C32151 +
           ((C14625 * C1124 - C14631 * C1112 + C31899 * C6217 -
             C14632 * C6213) *
                C15423 +
            (C14625 * C1139 - C14631 * C1126 + C31899 * C6222 -
             C14632 * C6219) *
                C15417 +
            (C14625 * C1128 - C14631 * C1114 + C31899 * C7020 -
             C14632 * C7019) *
                C15424 +
            (C14625 * C1141 - C14631 * C1130 + C31899 * C7022 -
             C14632 * C7021) *
                C31762) *
               C32129) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C15423 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C15417 +
            (C14638 - C14639 + C14640 - C14641) * C15424 +
            (C14642 - C14643 + C14644 - C14645) * C31762) *
               C32162 +
           ((C16530 - C16531 + C16532 - C16533) * C15423 +
            (C16534 - C16535 + C16536 - C16537) * C15417 +
            (C15163 - C15162 + C15165 - C15164) * C15424 +
            (C15167 - C15166 + C15169 - C15168) * C31762) *
               C32151 +
           C16580 * C32129) *
              C341 +
          (((C16531 - C16530 + C16533 - C16532) * C15423 +
            (C16535 - C16534 + C16537 - C16536) * C15417 +
            (C15162 - C15163 + C15164 - C15165) * C15424 +
            (C15166 - C15167 + C15168 - C15169) * C31762) *
               C32162 +
           ((C16539 - C16538 + C16541 - C16540) * C15423 +
            (C16543 - C16542 + C16545 - C16544) * C15417 +
            (C16223 - C16222 + C16225 - C16224) * C15424 +
            (C16227 - C16226 + C16229 - C16228) * C31762) *
               C32151 +
           ((C16550 - C16551 + C16552 - C16553) * C15423 +
            (C16554 - C16555 + C16556 - C16557) * C15417 +
            (C16558 - C16559 + C16560 - C16561) * C15424 +
            (C16562 - C16563 + C16564 - C16565) * C31762) *
               C32129) *
              C342 +
          (C16580 * C32162 +
           ((C16551 - C16550 + C16553 - C16552) * C15423 +
            (C16555 - C16554 + C16557 - C16556) * C15417 +
            (C16559 - C16558 + C16561 - C16560) * C15424 +
            (C16563 - C16562 + C16565 - C16564) * C31762) *
               C32151 +
           ((C14625 * C2011 - C14631 * C2002 + C31899 * C6817 -
             C14632 * C6813) *
                C15423 +
            (C14625 * C2020 - C14631 * C2012 + C31899 * C6822 -
             C14632 * C6819) *
                C15417 +
            (C14625 * C2013 - C14631 * C2003 + C31899 * C11841 -
             C14632 * C11840) *
                C15424 +
            (C14625 * C2021 - C14631 * C2014 + C31899 * C11843 -
             C14632 * C11842) *
                C31762) *
               C32129) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
             C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
                C15423 +
            (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
             C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
                C15417 +
            (C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
             C15433) *
                C15424 +
            (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
             C15441) *
                C31762) *
               C31854 * C572 +
           ((C15419 * C344 - C32168 * C354 + C15420 * C676 - C32164 * C681 +
             C15421 * C1108 - C32154 * C1117 + C15422 * C1638 -
             C32136 * C1641) *
                C15423 +
            (C15419 * C355 - C32168 * C374 + C15420 * C682 - C32164 * C691 +
             C15421 * C1118 - C32154 * C1135 + C15422 * C1642 -
             C32136 * C1647) *
                C15417 +
            (C15930 - C15931 + C15932 - C15933 + C15934 - C15935 + C15936 -
             C15937) *
                C15424 +
            (C15938 - C15939 + C15940 - C15941 + C15942 - C15943 + C15944 -
             C15945) *
                C31762) *
               C31854 * C573) *
              C31799 * C468 +
          (((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
             C15432) *
                C15423 +
            (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
             C15440) *
                C15417 +
            (C15442 - C15443 + C15444 - C15445 + C15446 - C15447 + C15448 -
             C15449) *
                C15424 +
            (C15450 - C15451 + C15452 - C15453 + C15454 - C15455 + C15456 -
             C15457) *
                C31762) *
               C31854 * C572 +
           ((C15931 - C15930 + C15933 - C15932 + C15935 - C15934 + C15937 -
             C15936) *
                C15423 +
            (C15939 - C15938 + C15941 - C15940 + C15943 - C15942 + C15945 -
             C15944) *
                C15417 +
            (C32168 * C358 - C15419 * C346 + C32164 * C685 - C15420 * C678 +
             C32154 * C1121 - C15421 * C1110 + C32136 * C1645 -
             C15422 * C1640) *
                C15424 +
            (C32168 * C376 - C15419 * C359 + C32164 * C693 - C15420 * C686 +
             C32154 * C1137 - C15421 * C1122 + C32136 * C1649 -
             C15422 * C1646) *
                C31762) *
               C31854 * C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C14633 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C32167 +
            (C14638 - C14639 + C14640 - C14641) * C14634 +
            (C14642 - C14643 + C14644 - C14645) * C32160 + C14678 * C14635 +
            C14679 * C32147 + C14680 * C14636 + C14681 * C32130) *
               C31854 * C572 +
           ((C14631 * C344 - C14625 * C354 + C14632 * C676 - C31899 * C681) *
                C14633 +
            (C14631 * C355 - C14625 * C374 + C14632 * C682 - C31899 * C691) *
                C32167 +
            (C15162 - C15163 + C15164 - C15165) * C14634 +
            (C15166 - C15167 + C15168 - C15169) * C32160 +
            (C15170 - C15171 + C15172 - C15173) * C14635 +
            (C15174 - C15175 + C15176 - C15177) * C32147 +
            (C15178 - C15179 + C15180 - C15181) * C14636 +
            (C15182 - C15183 + C15184 - C15185) * C32130) *
               C31854 * C573) *
              C31799 * C468 +
          (((C14639 - C14638 + C14641 - C14640) * C14633 +
            (C14643 - C14642 + C14645 - C14644) * C32167 +
            (C14647 - C14646 + C14649 - C14648) * C14634 +
            (C14651 - C14650 + C14653 - C14652) * C32160 +
            (C14655 - C14654 + C14657 - C14656) * C14635 +
            (C14659 - C14658 + C14661 - C14660) * C32147 +
            (C14662 - C14663 + C14664 - C14665) * C14636 +
            (C14666 - C14667 + C14668 - C14669) * C32130) *
               C31854 * C572 +
           ((C15163 - C15162 + C15165 - C15164) * C14633 +
            (C15167 - C15166 + C15169 - C15168) * C32167 +
            (C15171 - C15170 + C15173 - C15172) * C14634 +
            (C15175 - C15174 + C15177 - C15176) * C32160 +
            (C15179 - C15178 + C15181 - C15180) * C14635 +
            (C15183 - C15182 + C15185 - C15184) * C32147 +
            (C14625 * C362 - C14631 * C348 + C31899 * C689 - C14632 * C680) *
                C14636 +
            (C14625 * C378 - C14631 * C363 + C31899 * C695 - C14632 * C690) *
                C32130) *
               C31854 * C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                 C15423 +
             (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                 C15417 +
             (C14638 - C14639 + C14640 - C14641) * C15424 +
             (C14642 - C14643 + C14644 - C14645) * C31762) *
                C32162 +
            ((C16530 - C16531 + C16532 - C16533) * C15423 +
             (C16534 - C16535 + C16536 - C16537) * C15417 + C16997 * C15424 +
             C16998 * C31762) *
                C32151 +
            C16580 * C32129) *
               C572 +
           (((C16531 - C16530 + C16533 - C16532) * C15423 +
             (C16535 - C16534 + C16537 - C16536) * C15417 + C16999 * C15424 +
             C17000 * C31762) *
                C32162 +
            ((C16539 - C16538 + C16541 - C16540) * C15423 +
             (C16543 - C16542 + C16545 - C16544) * C15417 + C17001 * C15424 +
             C17002 * C31762) *
                C32151 +
            ((C16550 - C16551 + C16552 - C16553) * C15423 +
             (C16554 - C16555 + C16556 - C16557) * C15417 +
             (C16558 - C16559 + C16560 - C16561) * C15424 +
             (C16562 - C16563 + C16564 - C16565) * C31762) *
                C32129) *
               C573) *
              C31799 * C468 +
          ((((C14639 - C14638 + C14641 - C14640) * C15423 +
             (C14643 - C14642 + C14645 - C14644) * C15417 +
             (C14647 - C14646 + C14649 - C14648) * C15424 +
             (C14651 - C14650 + C14653 - C14652) * C31762) *
                C32162 +
            (C16999 * C15423 + C17000 * C15417 +
             (C15170 - C15171 + C15172 - C15173) * C15424 +
             (C15174 - C15175 + C15176 - C15177) * C31762) *
                C32151 +
            (C17001 * C15423 + C17002 * C15417 +
             (C16230 - C16231 + C16232 - C16233) * C15424 +
             (C16234 - C16235 + C16236 - C16237) * C31762) *
                C32129) *
               C572 +
           ((C16997 * C15423 + C16998 * C15417 +
             (C15171 - C15170 + C15173 - C15172) * C15424 +
             (C15175 - C15174 + C15177 - C15176) * C31762) *
                C32162 +
            (C16570 * C15423 + C16571 * C15417 +
             (C16231 - C16230 + C16233 - C16232) * C15424 +
             (C16235 - C16234 + C16237 - C16236) * C31762) *
                C32151 +
            ((C16559 - C16558 + C16561 - C16560) * C15423 +
             (C16563 - C16562 + C16565 - C16564) * C15417 +
             (C14625 * C2009 - C14631 * C2001 + C31899 * C2537 -
              C14632 * C2532) *
                 C15424 +
             (C14625 * C2019 - C14631 * C2010 + C31899 * C2541 -
              C14632 * C2538) *
                 C31762) *
                C32129) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
               C14633 +
           (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
               C32167 +
           (C14638 - C14639 + C14640 - C14641) * C14634 +
           (C14642 - C14643 + C14644 - C14645) * C32160 + C14678 * C14635 +
           C14679 * C32147 + C14680 * C14636 + C14681 * C32130) *
              C31854 * C31813 * C235 +
          ((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
               C14633 +
           (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
               C32167 +
           (C14631 * C240 - C14625 * C251 + C14632 * C245 - C31899 * C261) *
               C14634 +
           (C14631 * C252 - C14625 * C270 + C14632 * C262 - C31899 * C275) *
               C32160 +
           (C14631 * C241 - C14625 * C253 + C14632 * C246 - C31899 * C263) *
               C14635 +
           (C14631 * C254 - C14625 * C271 + C14632 * C264 - C31899 * C276) *
               C32147 +
           (C14631 * C242 - C14625 * C255 + C14632 * C247 - C31899 * C265) *
               C14636 +
           (C14631 * C256 - C14625 * C272 + C14632 * C266 - C31899 * C277) *
               C32130) *
              C31854 * C31813 * C236 +
          ((C14625 * C259 - C14631 * C244 + C31899 * C980 - C14632 * C974) *
               C14633 +
           (C14625 * C274 - C14631 * C260 + C31899 * C992 - C14632 * C981) *
               C32167 +
           (C14625 * C261 - C14631 * C245 + C31899 * C982 - C14632 * C975) *
               C14634 +
           (C14625 * C275 - C14631 * C262 + C31899 * C993 - C14632 * C983) *
               C32160 +
           (C14625 * C263 - C14631 * C246 + C31899 * C984 - C14632 * C976) *
               C14635 +
           (C14625 * C276 - C14631 * C264 + C31899 * C994 - C14632 * C985) *
               C32147 +
           (C14625 * C265 - C14631 * C247 + C31899 * C1291 - C14632 * C1290) *
               C14636 +
           (C14625 * C277 - C14631 * C266 + C31899 * C1293 - C14632 * C1292) *
               C32130) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
               C14633 +
           (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
               C32167 +
           (C14638 - C14639 + C14640 - C14641) * C14634 +
           (C14642 - C14643 + C14644 - C14645) * C32160 + C14678 * C14635 +
           C14679 * C32147 + C14680 * C14636 + C14681 * C32130) *
              C31854 * C31813 * C31799 * C110 +
          ((C14639 - C14638 + C14641 - C14640) * C14633 +
           (C14643 - C14642 + C14645 - C14644) * C32167 +
           (C14647 - C14646 + C14649 - C14648) * C14634 +
           (C14651 - C14650 + C14653 - C14652) * C32160 +
           (C14655 - C14654 + C14657 - C14656) * C14635 +
           (C14659 - C14658 + C14661 - C14660) * C32147 +
           (C14662 - C14663 + C14664 - C14665) * C14636 +
           (C14666 - C14667 + C14668 - C14669) * C32130) *
              C31854 * C31813 * C31799 * C111 +
          (C14678 * C14633 + C14679 * C32167 + C14680 * C14634 +
           C14681 * C32160 + (C14663 - C14662 + C14665 - C14664) * C14635 +
           (C14667 - C14666 + C14669 - C14668) * C32147 +
           (C14625 * C136 - C14631 * C124 + C31899 * C471 - C14632 * C470) *
               C14636 +
           (C14625 * C145 - C14631 * C137 + C31899 * C473 - C14632 * C472) *
               C32130) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
            C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
               C15423 +
           (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
            C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
               C15417 +
           (C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
            C15433) *
               C15424 +
           (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
            C15441) *
               C31762) *
              C31854 * C31813 * C31799 * C110 +
          ((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
            C15432) *
               C15423 +
           (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
            C15440) *
               C15417 +
           (C15442 - C15443 + C15444 - C15445 + C15446 - C15447 + C15448 -
            C15449) *
               C15424 +
           (C15450 - C15451 + C15452 - C15453 + C15454 - C15455 + C15456 -
            C15457) *
               C31762) *
              C31854 * C31813 * C31799 * C111 +
          ((C15443 - C15442 + C15445 - C15444 + C15447 - C15446 + C15449 -
            C15448) *
               C15423 +
           (C15451 - C15450 + C15453 - C15452 + C15455 - C15454 + C15457 -
            C15456) *
               C15417 +
           (C32168 * C132 - C15419 * C122 + C32164 * C255 - C15420 * C242 +
            C32154 * C265 - C15421 * C247 + C32136 * C1291 - C15422 * C1290) *
               C15424 +
           (C32168 * C143 - C15419 * C133 + C32164 * C272 - C15420 * C256 +
            C32154 * C277 - C15421 * C266 + C32136 * C1293 - C15422 * C1292) *
               C31762) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
            C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
               C15423 +
           (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
            C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
               C15417 +
           (C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
            C15433) *
               C15424 +
           (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
            C15441) *
               C31762) *
              C31854 * C31813 * C235 +
          ((C15419 * C239 - C32168 * C249 + C15420 * C244 - C32164 * C259 +
            C15421 * C974 - C32154 * C980 + C15422 * C977 - C32136 * C986) *
               C15423 +
           (C15419 * C250 - C32168 * C269 + C15420 * C260 - C32164 * C274 +
            C15421 * C981 - C32154 * C992 + C15422 * C987 - C32136 * C995) *
               C15417 +
           (C15419 * C240 - C32168 * C251 + C15420 * C245 - C32164 * C261 +
            C15421 * C975 - C32154 * C982 + C15422 * C978 - C32136 * C988) *
               C15424 +
           (C15419 * C252 - C32168 * C270 + C15420 * C262 - C32164 * C275 +
            C15421 * C983 - C32154 * C993 + C15422 * C989 - C32136 * C996) *
               C31762) *
              C31854 * C31813 * C236 +
          ((C32168 * C259 - C15419 * C244 + C32164 * C980 - C15420 * C974 +
            C32154 * C986 - C15421 * C977 + C32136 * C6144 - C15422 * C6142) *
               C15423 +
           (C32168 * C274 - C15419 * C260 + C32164 * C992 - C15420 * C981 +
            C32154 * C995 - C15421 * C987 + C32136 * C6148 - C15422 * C6145) *
               C15417 +
           (C32168 * C261 - C15419 * C245 + C32164 * C982 - C15420 * C975 +
            C32154 * C988 - C15421 * C978 + C32136 * C6307 - C15422 * C6306) *
               C15424 +
           (C32168 * C275 - C15419 * C262 + C32164 * C993 - C15420 * C983 +
            C32154 * C996 - C15421 * C989 + C32136 * C6309 - C15422 * C6308) *
               C31762) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C15423 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C15417 +
            (C14638 - C14639 + C14640 - C14641) * C15424 +
            (C14642 - C14643 + C14644 - C14645) * C31762) *
               C32162 +
           ((C14625 * C354 - C14631 * C344 + C31899 * C681 - C14632 * C676) *
                C15423 +
            (C14625 * C374 - C14631 * C355 + C31899 * C691 - C14632 * C682) *
                C15417 +
            (C15163 - C15162 + C15165 - C15164) * C15424 +
            (C15167 - C15166 + C15169 - C15168) * C31762) *
               C32151 +
           ((C14625 * C364 - C14631 * C349 + C31899 * C1123 - C14632 * C1111) *
                C15423 +
            (C14625 * C379 - C14631 * C365 + C31899 * C1138 - C14632 * C1125) *
                C15417 +
            (C16222 - C16223 + C16224 - C16225) * C15424 +
            (C16226 - C16227 + C16228 - C16229) * C31762) *
               C32129) *
              C31813 * C31799 * C110 +
          (((C14639 - C14638 + C14641 - C14640) * C15423 +
            (C14643 - C14642 + C14645 - C14644) * C15417 +
            (C14647 - C14646 + C14649 - C14648) * C15424 +
            (C14651 - C14650 + C14653 - C14652) * C31762) *
               C32162 +
           ((C15162 - C15163 + C15164 - C15165) * C15423 +
            (C15166 - C15167 + C15168 - C15169) * C15417 +
            (C15170 - C15171 + C15172 - C15173) * C15424 +
            (C15174 - C15175 + C15176 - C15177) * C31762) *
               C32151 +
           ((C16223 - C16222 + C16225 - C16224) * C15423 +
            (C16227 - C16226 + C16229 - C16228) * C15417 +
            (C16230 - C16231 + C16232 - C16233) * C15424 +
            (C16234 - C16235 + C16236 - C16237) * C31762) *
               C32129) *
              C31813 * C31799 * C111 +
          ((C14678 * C15423 + C14679 * C15417 + C14680 * C15424 +
            C14681 * C31762) *
               C32162 +
           ((C15171 - C15170 + C15173 - C15172) * C15423 +
            (C15175 - C15174 + C15177 - C15176) * C15417 +
            (C15179 - C15178 + C15181 - C15180) * C15424 +
            (C15183 - C15182 + C15185 - C15184) * C31762) *
               C32151 +
           ((C16231 - C16230 + C16233 - C16232) * C15423 +
            (C16235 - C16234 + C16237 - C16236) * C15417 +
            (C14625 * C370 - C14631 * C352 + C31899 * C2205 - C14632 * C2204) *
                C15424 +
            (C14625 * C382 - C14631 * C371 + C31899 * C2207 - C14632 * C2206) *
                C31762) *
               C32129) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C15423 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C15417 +
            (C14638 - C14639 + C14640 - C14641) * C15424 +
            (C14642 - C14643 + C14644 - C14645) * C31762) *
               C32162 +
           ((C14625 * C354 - C14631 * C344 + C31899 * C681 - C14632 * C676) *
                C15423 +
            (C14625 * C374 - C14631 * C355 + C31899 * C691 - C14632 * C682) *
                C15417 +
            (C15163 - C15162 + C15165 - C15164) * C15424 +
            (C15167 - C15166 + C15169 - C15168) * C31762) *
               C32151 +
           ((C14625 * C364 - C14631 * C349 + C31899 * C1123 - C14632 * C1111) *
                C15423 +
            (C14625 * C379 - C14631 * C365 + C31899 * C1138 - C14632 * C1125) *
                C15417 +
            (C16222 - C16223 + C16224 - C16225) * C15424 +
            (C16226 - C16227 + C16228 - C16229) * C31762) *
               C32129) *
              C31813 * C235 +
          (((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                C15423 +
            (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                C15417 +
            (C15008 - C15009 + C15010 - C15011) * C15424 +
            (C15012 - C15013 + C15014 - C15015) * C31762) *
               C32162 +
           ((C14631 * C676 - C14625 * C681 + C14632 * C1108 - C31899 * C1117) *
                C15423 +
            (C14631 * C682 - C14625 * C691 + C14632 * C1118 - C31899 * C1135) *
                C15417 +
            (C14631 * C677 - C14625 * C683 + C14632 * C1109 - C31899 * C1119) *
                C15424 +
            (C14631 * C684 - C14625 * C692 + C14632 * C1120 - C31899 * C1136) *
                C31762) *
               C32151 +
           ((C14631 * C1111 - C14625 * C1123 + C14632 * C1112 -
             C31899 * C1124) *
                C15423 +
            (C14631 * C1125 - C14625 * C1138 + C14632 * C1126 -
             C31899 * C1139) *
                C15417 +
            (C14631 * C1113 - C14625 * C1127 + C14632 * C1114 -
             C31899 * C1128) *
                C15424 +
            (C14631 * C1129 - C14625 * C1140 + C14632 * C1130 -
             C31899 * C1141) *
                C31762) *
               C32129) *
              C31813 * C236 +
          (((C14625 * C259 - C14631 * C244 + C31899 * C980 - C14632 * C974) *
                C15423 +
            (C14625 * C274 - C14631 * C260 + C31899 * C992 - C14632 * C981) *
                C15417 +
            (C14625 * C261 - C14631 * C245 + C31899 * C982 - C14632 * C975) *
                C15424 +
            (C14625 * C275 - C14631 * C262 + C31899 * C993 - C14632 * C983) *
                C31762) *
               C32162 +
           ((C14625 * C1117 - C14631 * C1108 + C31899 * C1641 -
             C14632 * C1638) *
                C15423 +
            (C14625 * C1135 - C14631 * C1118 + C31899 * C1647 -
             C14632 * C1642) *
                C15417 +
            (C14625 * C1119 - C14631 * C1109 + C31899 * C1643 -
             C14632 * C1639) *
                C15424 +
            (C14625 * C1136 - C14631 * C1120 + C31899 * C1648 -
             C14632 * C1644) *
                C31762) *
               C32151 +
           ((C14625 * C1124 - C14631 * C1112 + C31899 * C6217 -
             C14632 * C6213) *
                C15423 +
            (C14625 * C1139 - C14631 * C1126 + C31899 * C6222 -
             C14632 * C6219) *
                C15417 +
            (C14625 * C1128 - C14631 * C1114 + C31899 * C7020 -
             C14632 * C7019) *
                C15424 +
            (C14625 * C1141 - C14631 * C1130 + C31899 * C7022 -
             C14632 * C7021) *
                C31762) *
               C32129) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                 C30885 +
             (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                 C31757 +
             (C14638 - C14639 + C14640 - C14641) * C30881 +
             (C14642 - C14643 + C14644 - C14645) * C31765 + C14678 * C30891 +
             C14679 * C17327) *
                C32096 +
            ((C16530 - C16531 + C16532 - C16533) * C30885 +
             (C16534 - C16535 + C16536 - C16537) * C31757 + C16997 * C30881 +
             C16998 * C31765 + C18237 * C30891 + C18238 * C17327) *
                C31941) *
               C31813 * C466 +
           (((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                 C30885 +
             (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                 C31757 +
             (C15008 - C15009 + C15010 - C15011) * C30881 +
             (C15012 - C15013 + C15014 - C15015) * C31765 +
             (C15016 - C15017 + C15018 - C15019) * C30891 +
             (C15020 - C15021 + C15022 - C15023) * C17327) *
                C32096 +
            ((C17197 - C17198 + C17199 - C17200) * C30885 +
             (C17201 - C17202 + C17203 - C17204) * C31757 +
             (C16775 - C16776 + C16777 - C16778) * C30881 +
             (C16779 - C16780 + C16781 - C16782) * C31765 +
             (C18725 - C18726 + C18727 - C18728) * C30891 +
             (C18729 - C18730 + C18731 - C18732) * C17327) *
                C31941) *
               C31813 * C467) *
              C468 +
          ((((C14639 - C14638 + C14641 - C14640) * C30885 +
             (C14643 - C14642 + C14645 - C14644) * C31757 +
             (C14647 - C14646 + C14649 - C14648) * C30881 +
             (C14651 - C14650 + C14653 - C14652) * C31765 +
             (C14655 - C14654 + C14657 - C14656) * C30891 +
             (C14659 - C14658 + C14661 - C14660) * C17327) *
                C32096 +
            (C16999 * C30885 + C17000 * C31757 +
             (C15170 - C15171 + C15172 - C15173) * C30881 +
             (C15174 - C15175 + C15176 - C15177) * C31765 +
             (C15178 - C15179 + C15180 - C15181) * C30891 +
             (C15182 - C15183 + C15184 - C15185) * C17327) *
                C31941) *
               C31813 * C466 +
           (((C15009 - C15008 + C15011 - C15010) * C30885 +
             (C15013 - C15012 + C15015 - C15014) * C31757 +
             (C15017 - C15016 + C15019 - C15018) * C30881 +
             (C15021 - C15020 + C15023 - C15022) * C31765 +
             (C15025 - C15024 + C15027 - C15026) * C30891 +
             (C15029 - C15028 + C15031 - C15030) * C17327) *
                C32096 +
            ((C16776 - C16775 + C16778 - C16777) * C30885 +
             (C16780 - C16779 + C16782 - C16781) * C31757 +
             (C18726 - C18725 + C18728 - C18727) * C30881 +
             (C18730 - C18729 + C18732 - C18731) * C31765 +
             (C14625 * C687 - C14631 * C679 + C31899 * C1465 - C14632 * C1464) *
                 C30891 +
             (C14625 * C694 - C14631 * C688 + C31899 * C1467 - C14632 * C1466) *
                 C17327) *
                C31941) *
               C31813 * C467) *
              C469)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                 C30885 +
             (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                 C31757 +
             (C14638 - C14639 + C14640 - C14641) * C30881 +
             (C14642 - C14643 + C14644 - C14645) * C31765 + C14678 * C30891 +
             C14679 * C17327) *
                C32096 +
            ((C16530 - C16531 + C16532 - C16533) * C30885 +
             (C16534 - C16535 + C16536 - C16537) * C31757 + C16997 * C30881 +
             C16998 * C31765 + C18237 * C30891 + C18238 * C17327) *
                C31941) *
               C572 +
           (((C16531 - C16530 + C16533 - C16532) * C30885 +
             (C16535 - C16534 + C16537 - C16536) * C31757 + C16999 * C30881 +
             C17000 * C31765 + C18931 * C30891 + C18932 * C17327) *
                C32096 +
            ((C16539 - C16538 + C16541 - C16540) * C30885 +
             (C16543 - C16542 + C16545 - C16544) * C31757 + C17001 * C30881 +
             C17002 * C31765 + (C16230 - C16231 + C16232 - C16233) * C30891 +
             (C16234 - C16235 + C16236 - C16237) * C17327) *
                C31941) *
               C573) *
              C466 +
          ((((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                 C30885 +
             (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                 C31757 +
             (C15008 - C15009 + C15010 - C15011) * C30881 +
             (C15012 - C15013 + C15014 - C15015) * C31765 +
             (C15016 - C15017 + C15018 - C15019) * C30891 +
             (C15020 - C15021 + C15022 - C15023) * C17327) *
                C32096 +
            ((C17197 - C17198 + C17199 - C17200) * C30885 +
             (C17201 - C17202 + C17203 - C17204) * C31757 +
             (C16775 - C16776 + C16777 - C16778) * C30881 +
             (C16779 - C16780 + C16781 - C16782) * C31765 +
             (C18725 - C18726 + C18727 - C18728) * C30891 +
             (C18729 - C18730 + C18731 - C18732) * C17327) *
                C31941) *
               C572 +
           (((C17198 - C17197 + C17200 - C17199) * C30885 +
             (C17202 - C17201 + C17204 - C17203) * C31757 +
             (C16776 - C16775 + C16778 - C16777) * C30881 +
             (C16780 - C16779 + C16782 - C16781) * C31765 +
             (C18726 - C18725 + C18728 - C18727) * C30891 +
             (C18730 - C18729 + C18732 - C18731) * C17327) *
                C32096 +
            ((C17206 - C17205 + C17208 - C17207) * C30885 +
             (C17210 - C17209 + C17212 - C17211) * C31757 +
             (C16784 - C16783 + C16786 - C16785) * C30881 +
             (C16788 - C16787 + C16790 - C16789) * C31765 +
             (C14625 * C1131 - C14631 * C1115 + C31899 * C1132 -
              C14632 * C1116) *
                 C30891 +
             (C14625 * C1142 - C14631 * C1133 + C31899 * C1143 -
              C14632 * C1134) *
                 C17327) *
                C31941) *
               C573) *
              C467) *
         C31787) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C30885 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C31757 +
            (C14638 - C14639 + C14640 - C14641) * C30881 +
            (C14642 - C14643 + C14644 - C14645) * C31765 + C14678 * C30891 +
            C14679 * C17327) *
               C32096 +
           ((C16530 - C16531 + C16532 - C16533) * C30885 +
            (C16534 - C16535 + C16536 - C16537) * C31757 + C16997 * C30881 +
            C16998 * C31765 + C18237 * C30891 + C18238 * C17327) *
               C31941) *
              C31813 * C235 +
          (((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                C30885 +
            (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                C31757 +
            (C15008 - C15009 + C15010 - C15011) * C30881 +
            (C15012 - C15013 + C15014 - C15015) * C31765 +
            (C15016 - C15017 + C15018 - C15019) * C30891 +
            (C15020 - C15021 + C15022 - C15023) * C17327) *
               C32096 +
           ((C17197 - C17198 + C17199 - C17200) * C30885 +
            (C17201 - C17202 + C17203 - C17204) * C31757 +
            (C16775 - C16776 + C16777 - C16778) * C30881 +
            (C16779 - C16780 + C16781 - C16782) * C31765 +
            (C14631 * C678 - C14625 * C685 + C14632 * C1110 - C31899 * C1121) *
                C30891 +
            (C14631 * C686 - C14625 * C693 + C14632 * C1122 - C31899 * C1137) *
                C17327) *
               C31941) *
              C31813 * C236 +
          (((C14625 * C259 - C14631 * C244 + C31899 * C980 - C14632 * C974) *
                C30885 +
            (C14625 * C274 - C14631 * C260 + C31899 * C992 - C14632 * C981) *
                C31757 +
            (C14625 * C261 - C14631 * C245 + C31899 * C982 - C14632 * C975) *
                C30881 +
            (C14625 * C275 - C14631 * C262 + C31899 * C993 - C14632 * C983) *
                C31765 +
            (C14625 * C263 - C14631 * C246 + C31899 * C984 - C14632 * C976) *
                C30891 +
            (C14625 * C276 - C14631 * C264 + C31899 * C994 - C14632 * C985) *
                C17327) *
               C32096 +
           ((C14625 * C1117 - C14631 * C1108 + C31899 * C1641 -
             C14632 * C1638) *
                C30885 +
            (C14625 * C1135 - C14631 * C1118 + C31899 * C1647 -
             C14632 * C1642) *
                C31757 +
            (C14625 * C1119 - C14631 * C1109 + C31899 * C1643 -
             C14632 * C1639) *
                C30881 +
            (C14625 * C1136 - C14631 * C1120 + C31899 * C1648 -
             C14632 * C1644) *
                C31765 +
            (C14625 * C1121 - C14631 * C1110 + C31899 * C1645 -
             C14632 * C1640) *
                C30891 +
            (C14625 * C1137 - C14631 * C1122 + C31899 * C1649 -
             C14632 * C1646) *
                C17327) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C30885 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C31757 +
            (C14638 - C14639 + C14640 - C14641) * C30881 +
            (C14642 - C14643 + C14644 - C14645) * C31765 + C14678 * C30891 +
            C14679 * C17327) *
               C32096 +
           ((C16530 - C16531 + C16532 - C16533) * C30885 +
            (C16534 - C16535 + C16536 - C16537) * C31757 + C16997 * C30881 +
            C16998 * C31765 + C18237 * C30891 + C18238 * C17327) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C14639 - C14638 + C14641 - C14640) * C30885 +
            (C14643 - C14642 + C14645 - C14644) * C31757 +
            (C14647 - C14646 + C14649 - C14648) * C30881 +
            (C14651 - C14650 + C14653 - C14652) * C31765 +
            (C14655 - C14654 + C14657 - C14656) * C30891 +
            (C14659 - C14658 + C14661 - C14660) * C17327) *
               C32096 +
           (C16999 * C30885 + C17000 * C31757 +
            (C15170 - C15171 + C15172 - C15173) * C30881 +
            (C15174 - C15175 + C15176 - C15177) * C31765 +
            (C15178 - C15179 + C15180 - C15181) * C30891 +
            (C15182 - C15183 + C15184 - C15185) * C17327) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C14678 * C30885 + C14679 * C31757 + C14680 * C30881 +
            C14681 * C31765 + (C14663 - C14662 + C14665 - C14664) * C30891 +
            (C14667 - C14666 + C14669 - C14668) * C17327) *
               C32096 +
           (C18237 * C30885 + C18238 * C31757 +
            (C15179 - C15178 + C15181 - C15180) * C30881 +
            (C15183 - C15182 + C15185 - C15184) * C31765 +
            (C14625 * C362 - C14631 * C348 + C31899 * C689 - C14632 * C680) *
                C30891 +
            (C14625 * C378 - C14631 * C363 + C31899 * C695 - C14632 * C690) *
                C17327) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C30885 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C31757 +
            (C14638 - C14639 + C14640 - C14641) * C30881 +
            (C14642 - C14643 + C14644 - C14645) * C31765 + C14678 * C30891 +
            C14679 * C17327) *
               C32096 +
           ((C16530 - C16531 + C16532 - C16533) * C30885 +
            (C16534 - C16535 + C16536 - C16537) * C31757 + C16997 * C30881 +
            C16998 * C31765 + C18237 * C30891 + C18238 * C17327) *
               C31941) *
              C341 +
          (((C16531 - C16530 + C16533 - C16532) * C30885 +
            (C16535 - C16534 + C16537 - C16536) * C31757 + C16999 * C30881 +
            C17000 * C31765 + (C15170 - C15171 + C15172 - C15173) * C30891 +
            (C15174 - C15175 + C15176 - C15177) * C17327) *
               C32096 +
           ((C16539 - C16538 + C16541 - C16540) * C30885 +
            (C16543 - C16542 + C16545 - C16544) * C31757 + C17001 * C30881 +
            C17002 * C31765 + (C16230 - C16231 + C16232 - C16233) * C30891 +
            (C16234 - C16235 + C16236 - C16237) * C17327) *
               C31941) *
              C342 +
          ((C16572 * C30885 + C16573 * C31757 + C16570 * C30881 +
            C16571 * C31765 + (C16231 - C16230 + C16233 - C16232) * C30891 +
            (C16235 - C16234 + C16237 - C16236) * C17327) *
               C32096 +
           ((C16551 - C16550 + C16553 - C16552) * C30885 +
            (C16555 - C16554 + C16557 - C16556) * C31757 +
            (C16559 - C16558 + C16561 - C16560) * C30881 +
            (C16563 - C16562 + C16565 - C16564) * C31765 +
            (C14625 * C2009 - C14631 * C2001 + C31899 * C2537 -
             C14632 * C2532) *
                C30891 +
            (C14625 * C2019 - C14631 * C2010 + C31899 * C2541 -
             C14632 * C2538) *
                C17327) *
               C31941) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                 C30885 +
             (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                 C31757 +
             (C14638 - C14639 + C14640 - C14641) * C30881 +
             (C14642 - C14643 + C14644 - C14645) * C31765 + C14678 * C30891 +
             C14679 * C17327) *
                C32096 +
            ((C16530 - C16531 + C16532 - C16533) * C30885 +
             (C16534 - C16535 + C16536 - C16537) * C31757 + C16997 * C30881 +
             C16998 * C31765 + C18237 * C30891 + C18238 * C17327) *
                C31941) *
               C572 +
           (((C16531 - C16530 + C16533 - C16532) * C30885 +
             (C16535 - C16534 + C16537 - C16536) * C31757 + C16999 * C30881 +
             C17000 * C31765 + C18931 * C30891 + C18932 * C17327) *
                C32096 +
            ((C16539 - C16538 + C16541 - C16540) * C30885 +
             (C16543 - C16542 + C16545 - C16544) * C31757 + C17001 * C30881 +
             C17002 * C31765 + (C16230 - C16231 + C16232 - C16233) * C30891 +
             (C16234 - C16235 + C16236 - C16237) * C17327) *
                C31941) *
               C573) *
              C31799 * C468 +
          ((((C14639 - C14638 + C14641 - C14640) * C30885 +
             (C14643 - C14642 + C14645 - C14644) * C31757 +
             (C14647 - C14646 + C14649 - C14648) * C30881 +
             (C14651 - C14650 + C14653 - C14652) * C31765 +
             (C14655 - C14654 + C14657 - C14656) * C30891 +
             (C14659 - C14658 + C14661 - C14660) * C17327) *
                C32096 +
            (C16999 * C30885 + C17000 * C31757 + C18931 * C30881 +
             C18932 * C31765 + (C15178 - C15179 + C15180 - C15181) * C30891 +
             (C15182 - C15183 + C15184 - C15185) * C17327) *
                C31941) *
               C572 +
           ((C16997 * C30885 + C16998 * C31757 + C18237 * C30881 +
             C18238 * C31765 + (C15179 - C15178 + C15181 - C15180) * C30891 +
             (C15183 - C15182 + C15185 - C15184) * C17327) *
                C32096 +
            (C16570 * C30885 + C16571 * C31757 +
             (C16231 - C16230 + C16233 - C16232) * C30881 +
             (C16235 - C16234 + C16237 - C16236) * C31765 +
             (C14625 * C370 - C14631 * C352 + C31899 * C2205 - C14632 * C2204) *
                 C30891 +
             (C14625 * C382 - C14631 * C371 + C31899 * C2207 - C14632 * C2206) *
                 C17327) *
                C31941) *
               C573) *
              C31799 * C469)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C30885 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C31757 +
            (C14638 - C14639 + C14640 - C14641) * C30881 +
            (C14642 - C14643 + C14644 - C14645) * C31765 + C14678 * C30891 +
            C14679 * C17327) *
               C32096 +
           ((C16530 - C16531 + C16532 - C16533) * C30885 +
            (C16534 - C16535 + C16536 - C16537) * C31757 + C16997 * C30881 +
            C16998 * C31765 + C18237 * C30891 + C18238 * C17327) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C14639 - C14638 + C14641 - C14640) * C30885 +
            (C14643 - C14642 + C14645 - C14644) * C31757 +
            (C14647 - C14646 + C14649 - C14648) * C30881 +
            (C14651 - C14650 + C14653 - C14652) * C31765 +
            (C14655 - C14654 + C14657 - C14656) * C30891 +
            (C14659 - C14658 + C14661 - C14660) * C17327) *
               C32096 +
           (C16999 * C30885 + C17000 * C31757 +
            (C15170 - C15171 + C15172 - C15173) * C30881 +
            (C15174 - C15175 + C15176 - C15177) * C31765 +
            (C15178 - C15179 + C15180 - C15181) * C30891 +
            (C15182 - C15183 + C15184 - C15185) * C17327) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C14678 * C30885 + C14679 * C31757 + C14680 * C30881 +
            C14681 * C31765 + (C14663 - C14662 + C14665 - C14664) * C30891 +
            (C14667 - C14666 + C14669 - C14668) * C17327) *
               C32096 +
           (C18237 * C30885 + C18238 * C31757 +
            (C15179 - C15178 + C15181 - C15180) * C30881 +
            (C15183 - C15182 + C15185 - C15184) * C31765 +
            (C14625 * C362 - C14631 * C348 + C31899 * C689 - C14632 * C680) *
                C30891 +
            (C14625 * C378 - C14631 * C363 + C31899 * C695 - C14632 * C690) *
                C17327) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C30885 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C31757 +
            (C14638 - C14639 + C14640 - C14641) * C30881 +
            (C14642 - C14643 + C14644 - C14645) * C31765 + C14678 * C30891 +
            C14679 * C17327) *
               C32096 +
           ((C16530 - C16531 + C16532 - C16533) * C30885 +
            (C16534 - C16535 + C16536 - C16537) * C31757 + C16997 * C30881 +
            C16998 * C31765 + C18237 * C30891 + C18238 * C17327) *
               C31941) *
              C31813 * C235 +
          (((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                C30885 +
            (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                C31757 +
            (C15008 - C15009 + C15010 - C15011) * C30881 +
            (C15012 - C15013 + C15014 - C15015) * C31765 +
            (C15016 - C15017 + C15018 - C15019) * C30891 +
            (C15020 - C15021 + C15022 - C15023) * C17327) *
               C32096 +
           ((C17197 - C17198 + C17199 - C17200) * C30885 +
            (C17201 - C17202 + C17203 - C17204) * C31757 +
            (C16775 - C16776 + C16777 - C16778) * C30881 +
            (C16779 - C16780 + C16781 - C16782) * C31765 +
            (C14631 * C678 - C14625 * C685 + C14632 * C1110 - C31899 * C1121) *
                C30891 +
            (C14631 * C686 - C14625 * C693 + C14632 * C1122 - C31899 * C1137) *
                C17327) *
               C31941) *
              C31813 * C236 +
          (((C14625 * C259 - C14631 * C244 + C31899 * C980 - C14632 * C974) *
                C30885 +
            (C14625 * C274 - C14631 * C260 + C31899 * C992 - C14632 * C981) *
                C31757 +
            (C14625 * C261 - C14631 * C245 + C31899 * C982 - C14632 * C975) *
                C30881 +
            (C14625 * C275 - C14631 * C262 + C31899 * C993 - C14632 * C983) *
                C31765 +
            (C14625 * C263 - C14631 * C246 + C31899 * C984 - C14632 * C976) *
                C30891 +
            (C14625 * C276 - C14631 * C264 + C31899 * C994 - C14632 * C985) *
                C17327) *
               C32096 +
           ((C14625 * C1117 - C14631 * C1108 + C31899 * C1641 -
             C14632 * C1638) *
                C30885 +
            (C14625 * C1135 - C14631 * C1118 + C31899 * C1647 -
             C14632 * C1642) *
                C31757 +
            (C14625 * C1119 - C14631 * C1109 + C31899 * C1643 -
             C14632 * C1639) *
                C30881 +
            (C14625 * C1136 - C14631 * C1120 + C31899 * C1648 -
             C14632 * C1644) *
                C31765 +
            (C14625 * C1121 - C14631 * C1110 + C31899 * C1645 -
             C14632 * C1640) *
                C30891 +
            (C14625 * C1137 - C14631 * C1122 + C31899 * C1649 -
             C14632 * C1646) *
                C17327) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C14633 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C32167 +
            (C14638 - C14639 + C14640 - C14641) * C14634 +
            (C14642 - C14643 + C14644 - C14645) * C32160 + C14678 * C14635 +
            C14679 * C32147 + C14680 * C14636 + C14681 * C32130) *
               C31854 * C31813 * C466 +
           ((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                C14633 +
            (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                C32167 +
            (C15008 - C15009 + C15010 - C15011) * C14634 +
            (C15012 - C15013 + C15014 - C15015) * C32160 +
            (C15016 - C15017 + C15018 - C15019) * C14635 +
            (C15020 - C15021 + C15022 - C15023) * C32147 +
            (C15024 - C15025 + C15026 - C15027) * C14636 +
            (C15028 - C15029 + C15030 - C15031) * C32130) *
               C31854 * C31813 * C467) *
              C468 +
          (((C14639 - C14638 + C14641 - C14640) * C14633 +
            (C14643 - C14642 + C14645 - C14644) * C32167 +
            (C14647 - C14646 + C14649 - C14648) * C14634 +
            (C14651 - C14650 + C14653 - C14652) * C32160 +
            (C14655 - C14654 + C14657 - C14656) * C14635 +
            (C14659 - C14658 + C14661 - C14660) * C32147 +
            (C14662 - C14663 + C14664 - C14665) * C14636 +
            (C14666 - C14667 + C14668 - C14669) * C32130) *
               C31854 * C31813 * C466 +
           ((C15009 - C15008 + C15011 - C15010) * C14633 +
            (C15013 - C15012 + C15015 - C15014) * C32167 +
            (C15017 - C15016 + C15019 - C15018) * C14634 +
            (C15021 - C15020 + C15023 - C15022) * C32160 +
            (C15025 - C15024 + C15027 - C15026) * C14635 +
            (C15029 - C15028 + C15031 - C15030) * C32147 +
            (C14625 * C257 - C14631 * C243 + C31899 * C267 - C14632 * C248) *
                C14636 +
            (C14625 * C273 - C14631 * C258 + C31899 * C278 - C14632 * C268) *
                C32130) *
               C31854 * C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
             C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
                C15423 +
            (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
             C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
                C15417 +
            (C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
             C15433) *
                C15424 +
            (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
             C15441) *
                C31762) *
               C31854 * C31813 * C466 +
           ((C15419 * C239 - C32168 * C249 + C15420 * C244 - C32164 * C259 +
             C15421 * C974 - C32154 * C980 + C15422 * C977 - C32136 * C986) *
                C15423 +
            (C15419 * C250 - C32168 * C269 + C15420 * C260 - C32164 * C274 +
             C15421 * C981 - C32154 * C992 + C15422 * C987 - C32136 * C995) *
                C15417 +
            (C15784 - C15785 + C15786 - C15787 + C15788 - C15789 + C15790 -
             C15791) *
                C15424 +
            (C15792 - C15793 + C15794 - C15795 + C15796 - C15797 + C15798 -
             C15799) *
                C31762) *
               C31854 * C31813 * C467) *
              C468 +
          (((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
             C15432) *
                C15423 +
            (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
             C15440) *
                C15417 +
            (C15442 - C15443 + C15444 - C15445 + C15446 - C15447 + C15448 -
             C15449) *
                C15424 +
            (C15450 - C15451 + C15452 - C15453 + C15454 - C15455 + C15456 -
             C15457) *
                C31762) *
               C31854 * C31813 * C466 +
           ((C15785 - C15784 + C15787 - C15786 + C15789 - C15788 + C15791 -
             C15790) *
                C15423 +
            (C15793 - C15792 + C15795 - C15794 + C15797 - C15796 + C15799 -
             C15798) *
                C15417 +
            (C32168 * C253 - C15419 * C241 + C32164 * C263 - C15420 * C246 +
             C32154 * C984 - C15421 * C976 + C32136 * C990 - C15422 * C979) *
                C15424 +
            (C32168 * C271 - C15419 * C254 + C32164 * C276 - C15420 * C264 +
             C32154 * C994 - C15421 * C985 + C32136 * C997 - C15422 * C991) *
                C31762) *
               C31854 * C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C14633 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C32167 +
            (C14638 - C14639 + C14640 - C14641) * C14634 +
            (C14642 - C14643 + C14644 - C14645) * C32160 + C14678 * C14635 +
            C14679 * C32147 + C14680 * C14636 + C14681 * C32130) *
               C31854 * C572 +
           ((C14631 * C344 - C14625 * C354 + C14632 * C676 - C31899 * C681) *
                C14633 +
            (C14631 * C355 - C14625 * C374 + C14632 * C682 - C31899 * C691) *
                C32167 +
            (C15162 - C15163 + C15164 - C15165) * C14634 +
            (C15166 - C15167 + C15168 - C15169) * C32160 +
            (C15170 - C15171 + C15172 - C15173) * C14635 +
            (C15174 - C15175 + C15176 - C15177) * C32147 +
            (C15178 - C15179 + C15180 - C15181) * C14636 +
            (C15182 - C15183 + C15184 - C15185) * C32130) *
               C31854 * C573) *
              C466 +
          (((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                C14633 +
            (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                C32167 +
            (C15008 - C15009 + C15010 - C15011) * C14634 +
            (C15012 - C15013 + C15014 - C15015) * C32160 +
            (C15016 - C15017 + C15018 - C15019) * C14635 +
            (C15020 - C15021 + C15022 - C15023) * C32147 +
            (C15024 - C15025 + C15026 - C15027) * C14636 +
            (C15028 - C15029 + C15030 - C15031) * C32130) *
               C31854 * C572 +
           ((C14625 * C681 - C14631 * C676 + C31899 * C1117 - C14632 * C1108) *
                C14633 +
            (C14625 * C691 - C14631 * C682 + C31899 * C1135 - C14632 * C1118) *
                C32167 +
            (C14625 * C683 - C14631 * C677 + C31899 * C1119 - C14632 * C1109) *
                C14634 +
            (C14625 * C692 - C14631 * C684 + C31899 * C1136 - C14632 * C1120) *
                C32160 +
            (C14625 * C685 - C14631 * C678 + C31899 * C1121 - C14632 * C1110) *
                C14635 +
            (C14625 * C693 - C14631 * C686 + C31899 * C1137 - C14632 * C1122) *
                C32147 +
            (C14625 * C687 - C14631 * C679 + C31899 * C1465 - C14632 * C1464) *
                C14636 +
            (C14625 * C694 - C14631 * C688 + C31899 * C1467 - C14632 * C1466) *
                C32130) *
               C31854 * C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
             C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
                C15423 +
            (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
             C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
                C15417 +
            (C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
             C15433) *
                C15424 +
            (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
             C15441) *
                C31762) *
               C31854 * C572 +
           ((C15419 * C344 - C32168 * C354 + C15420 * C676 - C32164 * C681 +
             C15421 * C1108 - C32154 * C1117 + C15422 * C1638 -
             C32136 * C1641) *
                C15423 +
            (C15419 * C355 - C32168 * C374 + C15420 * C682 - C32164 * C691 +
             C15421 * C1118 - C32154 * C1135 + C15422 * C1642 -
             C32136 * C1647) *
                C15417 +
            (C15930 - C15931 + C15932 - C15933 + C15934 - C15935 + C15936 -
             C15937) *
                C15424 +
            (C15938 - C15939 + C15940 - C15941 + C15942 - C15943 + C15944 -
             C15945) *
                C31762) *
               C31854 * C573) *
              C466 +
          (((C15419 * C239 - C32168 * C249 + C15420 * C244 - C32164 * C259 +
             C15421 * C974 - C32154 * C980 + C15422 * C977 - C32136 * C986) *
                C15423 +
            (C15419 * C250 - C32168 * C269 + C15420 * C260 - C32164 * C274 +
             C15421 * C981 - C32154 * C992 + C15422 * C987 - C32136 * C995) *
                C15417 +
            (C15784 - C15785 + C15786 - C15787 + C15788 - C15789 + C15790 -
             C15791) *
                C15424 +
            (C15792 - C15793 + C15794 - C15795 + C15796 - C15797 + C15798 -
             C15799) *
                C31762) *
               C31854 * C572 +
           ((C32168 * C681 - C15419 * C676 + C32164 * C1117 - C15420 * C1108 +
             C32154 * C1641 - C15421 * C1638 + C32136 * C6215 -
             C15422 * C6212) *
                C15423 +
            (C32168 * C691 - C15419 * C682 + C32164 * C1135 - C15420 * C1118 +
             C32154 * C1647 - C15421 * C1642 + C32136 * C6221 -
             C15422 * C6216) *
                C15417 +
            (C32168 * C683 - C15419 * C677 + C32164 * C1119 - C15420 * C1109 +
             C32154 * C1643 - C15421 * C1639 + C32136 * C6393 -
             C15422 * C6392) *
                C15424 +
            (C32168 * C692 - C15419 * C684 + C32164 * C1136 - C15420 * C1120 +
             C32154 * C1648 - C15421 * C1644 + C32136 * C6395 -
             C15422 * C6394) *
                C31762) *
               C31854 * C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
               C14633 +
           (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
               C32167 +
           (C14638 - C14639 + C14640 - C14641) * C14634 +
           (C14642 - C14643 + C14644 - C14645) * C32160 + C14678 * C14635 +
           C14679 * C32147 + C14680 * C14636 + C14681 * C32130) *
              C31854 * C31813 * C235 +
          ((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
               C14633 +
           (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
               C32167 +
           (C14631 * C240 - C14625 * C251 + C14632 * C245 - C31899 * C261) *
               C14634 +
           (C14631 * C252 - C14625 * C270 + C14632 * C262 - C31899 * C275) *
               C32160 +
           (C14631 * C241 - C14625 * C253 + C14632 * C246 - C31899 * C263) *
               C14635 +
           (C14631 * C254 - C14625 * C271 + C14632 * C264 - C31899 * C276) *
               C32147 +
           (C14631 * C242 - C14625 * C255 + C14632 * C247 - C31899 * C265) *
               C14636 +
           (C14631 * C256 - C14625 * C272 + C14632 * C266 - C31899 * C277) *
               C32130) *
              C31854 * C31813 * C236 +
          ((C14625 * C259 - C14631 * C244 + C31899 * C980 - C14632 * C974) *
               C14633 +
           (C14625 * C274 - C14631 * C260 + C31899 * C992 - C14632 * C981) *
               C32167 +
           (C14625 * C261 - C14631 * C245 + C31899 * C982 - C14632 * C975) *
               C14634 +
           (C14625 * C275 - C14631 * C262 + C31899 * C993 - C14632 * C983) *
               C32160 +
           (C14625 * C263 - C14631 * C246 + C31899 * C984 - C14632 * C976) *
               C14635 +
           (C14625 * C276 - C14631 * C264 + C31899 * C994 - C14632 * C985) *
               C32147 +
           (C14625 * C265 - C14631 * C247 + C31899 * C1291 - C14632 * C1290) *
               C14636 +
           (C14625 * C277 - C14631 * C266 + C31899 * C1293 - C14632 * C1292) *
               C32130) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
               C14633 +
           (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
               C32167 +
           (C14638 - C14639 + C14640 - C14641) * C14634 +
           (C14642 - C14643 + C14644 - C14645) * C32160 + C14678 * C14635 +
           C14679 * C32147 + C14680 * C14636 + C14681 * C32130) *
              C31854 * C31813 * C31799 * C110 +
          ((C14639 - C14638 + C14641 - C14640) * C14633 +
           (C14643 - C14642 + C14645 - C14644) * C32167 +
           (C14647 - C14646 + C14649 - C14648) * C14634 +
           (C14651 - C14650 + C14653 - C14652) * C32160 +
           (C14655 - C14654 + C14657 - C14656) * C14635 +
           (C14659 - C14658 + C14661 - C14660) * C32147 +
           (C14662 - C14663 + C14664 - C14665) * C14636 +
           (C14666 - C14667 + C14668 - C14669) * C32130) *
              C31854 * C31813 * C31799 * C111 +
          (C14678 * C14633 + C14679 * C32167 + C14680 * C14634 +
           C14681 * C32160 + (C14663 - C14662 + C14665 - C14664) * C14635 +
           (C14667 - C14666 + C14669 - C14668) * C32147 +
           (C14625 * C136 - C14631 * C124 + C31899 * C471 - C14632 * C470) *
               C14636 +
           (C14625 * C145 - C14631 * C137 + C31899 * C473 - C14632 * C472) *
               C32130) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
               C14633 +
           (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
               C32167 +
           (C14638 - C14639 + C14640 - C14641) * C14634 +
           (C14642 - C14643 + C14644 - C14645) * C32160 + C14678 * C14635 +
           C14679 * C32147 + C14680 * C14636 + C14681 * C32130) *
              C31854 * C341 +
          ((C14631 * C344 - C14625 * C354 + C14632 * C676 - C31899 * C681) *
               C14633 +
           (C14631 * C355 - C14625 * C374 + C14632 * C682 - C31899 * C691) *
               C32167 +
           (C14631 * C345 - C14625 * C356 + C14632 * C677 - C31899 * C683) *
               C14634 +
           (C14631 * C357 - C14625 * C375 + C14632 * C684 - C31899 * C692) *
               C32160 +
           (C14631 * C346 - C14625 * C358 + C14632 * C678 - C31899 * C685) *
               C14635 +
           (C14631 * C359 - C14625 * C376 + C14632 * C686 - C31899 * C693) *
               C32147 +
           (C14631 * C347 - C14625 * C360 + C14632 * C679 - C31899 * C687) *
               C14636 +
           (C14631 * C361 - C14625 * C377 + C14632 * C688 - C31899 * C694) *
               C32130) *
              C31854 * C342 +
          ((C14625 * C364 - C14631 * C349 + C31899 * C1123 - C14632 * C1111) *
               C14633 +
           (C14625 * C379 - C14631 * C365 + C31899 * C1138 - C14632 * C1125) *
               C32167 +
           (C14625 * C366 - C14631 * C350 + C31899 * C1127 - C14632 * C1113) *
               C14634 +
           (C14625 * C380 - C14631 * C367 + C31899 * C1140 - C14632 * C1129) *
               C32160 +
           (C14625 * C368 - C14631 * C351 + C31899 * C1131 - C14632 * C1115) *
               C14635 +
           (C14625 * C381 - C14631 * C369 + C31899 * C1142 - C14632 * C1133) *
               C32147 +
           (C14625 * C370 - C14631 * C352 + C31899 * C2205 - C14632 * C2204) *
               C14636 +
           (C14625 * C382 - C14631 * C371 + C31899 * C2207 - C14632 * C2206) *
               C32130) *
              C31854 * C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
            C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
               C15423 +
           (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
            C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
               C15417 +
           (C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
            C15433) *
               C15424 +
           (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
            C15441) *
               C31762) *
              C31854 * C31813 * C31799 * C110 +
          ((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
            C15432) *
               C15423 +
           (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
            C15440) *
               C15417 +
           (C15442 - C15443 + C15444 - C15445 + C15446 - C15447 + C15448 -
            C15449) *
               C15424 +
           (C15450 - C15451 + C15452 - C15453 + C15454 - C15455 + C15456 -
            C15457) *
               C31762) *
              C31854 * C31813 * C31799 * C111 +
          ((C15443 - C15442 + C15445 - C15444 + C15447 - C15446 + C15449 -
            C15448) *
               C15423 +
           (C15451 - C15450 + C15453 - C15452 + C15455 - C15454 + C15457 -
            C15456) *
               C15417 +
           (C32168 * C132 - C15419 * C122 + C32164 * C255 - C15420 * C242 +
            C32154 * C265 - C15421 * C247 + C32136 * C1291 - C15422 * C1290) *
               C15424 +
           (C32168 * C143 - C15419 * C133 + C32164 * C272 - C15420 * C256 +
            C32154 * C277 - C15421 * C266 + C32136 * C1293 - C15422 * C1292) *
               C31762) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
            C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
               C15423 +
           (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
            C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
               C15417 +
           (C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
            C15433) *
               C15424 +
           (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
            C15441) *
               C31762) *
              C31854 * C31813 * C235 +
          ((C15419 * C239 - C32168 * C249 + C15420 * C244 - C32164 * C259 +
            C15421 * C974 - C32154 * C980 + C15422 * C977 - C32136 * C986) *
               C15423 +
           (C15419 * C250 - C32168 * C269 + C15420 * C260 - C32164 * C274 +
            C15421 * C981 - C32154 * C992 + C15422 * C987 - C32136 * C995) *
               C15417 +
           (C15419 * C240 - C32168 * C251 + C15420 * C245 - C32164 * C261 +
            C15421 * C975 - C32154 * C982 + C15422 * C978 - C32136 * C988) *
               C15424 +
           (C15419 * C252 - C32168 * C270 + C15420 * C262 - C32164 * C275 +
            C15421 * C983 - C32154 * C993 + C15422 * C989 - C32136 * C996) *
               C31762) *
              C31854 * C31813 * C236 +
          ((C32168 * C259 - C15419 * C244 + C32164 * C980 - C15420 * C974 +
            C32154 * C986 - C15421 * C977 + C32136 * C6144 - C15422 * C6142) *
               C15423 +
           (C32168 * C274 - C15419 * C260 + C32164 * C992 - C15420 * C981 +
            C32154 * C995 - C15421 * C987 + C32136 * C6148 - C15422 * C6145) *
               C15417 +
           (C32168 * C261 - C15419 * C245 + C32164 * C982 - C15420 * C975 +
            C32154 * C988 - C15421 * C978 + C32136 * C6307 - C15422 * C6306) *
               C15424 +
           (C32168 * C275 - C15419 * C262 + C32164 * C993 - C15420 * C983 +
            C32154 * C996 - C15421 * C989 + C32136 * C6309 - C15422 * C6308) *
               C31762) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
            C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
               C15423 +
           (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
            C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
               C15417 +
           (C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
            C15433) *
               C15424 +
           (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
            C15441) *
               C31762) *
              C31854 * C341 +
          ((C15419 * C344 - C32168 * C354 + C15420 * C676 - C32164 * C681 +
            C15421 * C1108 - C32154 * C1117 + C15422 * C1638 - C32136 * C1641) *
               C15423 +
           (C15419 * C355 - C32168 * C374 + C15420 * C682 - C32164 * C691 +
            C15421 * C1118 - C32154 * C1135 + C15422 * C1642 - C32136 * C1647) *
               C15417 +
           (C15419 * C345 - C32168 * C356 + C15420 * C677 - C32164 * C683 +
            C15421 * C1109 - C32154 * C1119 + C15422 * C1639 - C32136 * C1643) *
               C15424 +
           (C15419 * C357 - C32168 * C375 + C15420 * C684 - C32164 * C692 +
            C15421 * C1120 - C32154 * C1136 + C15422 * C1644 - C32136 * C1648) *
               C31762) *
              C31854 * C342 +
          ((C32168 * C364 - C15419 * C349 + C32164 * C1123 - C15420 * C1111 +
            C32154 * C1124 - C15421 * C1112 + C32136 * C6217 - C15422 * C6213) *
               C15423 +
           (C32168 * C379 - C15419 * C365 + C32164 * C1138 - C15420 * C1125 +
            C32154 * C1139 - C15421 * C1126 + C32136 * C6222 - C15422 * C6219) *
               C15417 +
           (C32168 * C366 - C15419 * C350 + C32164 * C1127 - C15420 * C1113 +
            C32154 * C1128 - C15421 * C1114 + C32136 * C7020 - C15422 * C7019) *
               C15424 +
           (C32168 * C380 - C15419 * C367 + C32164 * C1140 - C15420 * C1129 +
            C32154 * C1141 - C15421 * C1130 + C32136 * C7022 - C15422 * C7021) *
               C31762) *
              C31854 * C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C14633 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C32167 +
            (C14638 - C14639 + C14640 - C14641) * C14634 +
            (C14642 - C14643 + C14644 - C14645) * C32160 + C14678 * C14635 +
            C14679 * C32147 + C14680 * C14636 + C14681 * C32130) *
               C31854 * C572 +
           ((C14631 * C344 - C14625 * C354 + C14632 * C676 - C31899 * C681) *
                C14633 +
            (C14631 * C355 - C14625 * C374 + C14632 * C682 - C31899 * C691) *
                C32167 +
            (C15162 - C15163 + C15164 - C15165) * C14634 +
            (C15166 - C15167 + C15168 - C15169) * C32160 +
            (C15170 - C15171 + C15172 - C15173) * C14635 +
            (C15174 - C15175 + C15176 - C15177) * C32147 +
            (C15178 - C15179 + C15180 - C15181) * C14636 +
            (C15182 - C15183 + C15184 - C15185) * C32130) *
               C31854 * C573) *
              C31799 * C468 +
          (((C14639 - C14638 + C14641 - C14640) * C14633 +
            (C14643 - C14642 + C14645 - C14644) * C32167 +
            (C14647 - C14646 + C14649 - C14648) * C14634 +
            (C14651 - C14650 + C14653 - C14652) * C32160 +
            (C14655 - C14654 + C14657 - C14656) * C14635 +
            (C14659 - C14658 + C14661 - C14660) * C32147 +
            (C14662 - C14663 + C14664 - C14665) * C14636 +
            (C14666 - C14667 + C14668 - C14669) * C32130) *
               C31854 * C572 +
           ((C15163 - C15162 + C15165 - C15164) * C14633 +
            (C15167 - C15166 + C15169 - C15168) * C32167 +
            (C15171 - C15170 + C15173 - C15172) * C14634 +
            (C15175 - C15174 + C15177 - C15176) * C32160 +
            (C15179 - C15178 + C15181 - C15180) * C14635 +
            (C15183 - C15182 + C15185 - C15184) * C32147 +
            (C14625 * C362 - C14631 * C348 + C31899 * C689 - C14632 * C680) *
                C14636 +
            (C14625 * C378 - C14631 * C363 + C31899 * C695 - C14632 * C690) *
                C32130) *
               C31854 * C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
             C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
                C15423 +
            (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
             C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
                C15417 +
            (C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
             C15433) *
                C15424 +
            (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
             C15441) *
                C31762) *
               C31854 * C572 +
           ((C15419 * C344 - C32168 * C354 + C15420 * C676 - C32164 * C681 +
             C15421 * C1108 - C32154 * C1117 + C15422 * C1638 -
             C32136 * C1641) *
                C15423 +
            (C15419 * C355 - C32168 * C374 + C15420 * C682 - C32164 * C691 +
             C15421 * C1118 - C32154 * C1135 + C15422 * C1642 -
             C32136 * C1647) *
                C15417 +
            (C15930 - C15931 + C15932 - C15933 + C15934 - C15935 + C15936 -
             C15937) *
                C15424 +
            (C15938 - C15939 + C15940 - C15941 + C15942 - C15943 + C15944 -
             C15945) *
                C31762) *
               C31854 * C573) *
              C31799 * C468 +
          (((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
             C15432) *
                C15423 +
            (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
             C15440) *
                C15417 +
            (C15442 - C15443 + C15444 - C15445 + C15446 - C15447 + C15448 -
             C15449) *
                C15424 +
            (C15450 - C15451 + C15452 - C15453 + C15454 - C15455 + C15456 -
             C15457) *
                C31762) *
               C31854 * C572 +
           ((C15931 - C15930 + C15933 - C15932 + C15935 - C15934 + C15937 -
             C15936) *
                C15423 +
            (C15939 - C15938 + C15941 - C15940 + C15943 - C15942 + C15945 -
             C15944) *
                C15417 +
            (C32168 * C358 - C15419 * C346 + C32164 * C685 - C15420 * C678 +
             C32154 * C1121 - C15421 * C1110 + C32136 * C1645 -
             C15422 * C1640) *
                C15424 +
            (C32168 * C376 - C15419 * C359 + C32164 * C693 - C15420 * C686 +
             C32154 * C1137 - C15421 * C1122 + C32136 * C1649 -
             C15422 * C1646) *
                C31762) *
               C31854 * C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
               C14633 +
           (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
               C32167 +
           (C14638 - C14639 + C14640 - C14641) * C14634 +
           (C14642 - C14643 + C14644 - C14645) * C32160 + C14678 * C14635 +
           C14679 * C32147 + C14680 * C14636 + C14681 * C32130) *
              C31854 * C31813 * C31799 * C110 +
          ((C14639 - C14638 + C14641 - C14640) * C14633 +
           (C14643 - C14642 + C14645 - C14644) * C32167 +
           (C14647 - C14646 + C14649 - C14648) * C14634 +
           (C14651 - C14650 + C14653 - C14652) * C32160 +
           (C14655 - C14654 + C14657 - C14656) * C14635 +
           (C14659 - C14658 + C14661 - C14660) * C32147 +
           (C14662 - C14663 + C14664 - C14665) * C14636 +
           (C14666 - C14667 + C14668 - C14669) * C32130) *
              C31854 * C31813 * C31799 * C111 +
          (C14678 * C14633 + C14679 * C32167 + C14680 * C14634 +
           C14681 * C32160 + (C14663 - C14662 + C14665 - C14664) * C14635 +
           (C14667 - C14666 + C14669 - C14668) * C32147 +
           (C14625 * C136 - C14631 * C124 + C31899 * C471 - C14632 * C470) *
               C14636 +
           (C14625 * C145 - C14631 * C137 + C31899 * C473 - C14632 * C472) *
               C32130) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
               C14633 +
           (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
               C32167 +
           (C14638 - C14639 + C14640 - C14641) * C14634 +
           (C14642 - C14643 + C14644 - C14645) * C32160 + C14678 * C14635 +
           C14679 * C32147 + C14680 * C14636 + C14681 * C32130) *
              C31854 * C31813 * C235 +
          ((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
               C14633 +
           (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
               C32167 +
           (C14631 * C240 - C14625 * C251 + C14632 * C245 - C31899 * C261) *
               C14634 +
           (C14631 * C252 - C14625 * C270 + C14632 * C262 - C31899 * C275) *
               C32160 +
           (C14631 * C241 - C14625 * C253 + C14632 * C246 - C31899 * C263) *
               C14635 +
           (C14631 * C254 - C14625 * C271 + C14632 * C264 - C31899 * C276) *
               C32147 +
           (C14631 * C242 - C14625 * C255 + C14632 * C247 - C31899 * C265) *
               C14636 +
           (C14631 * C256 - C14625 * C272 + C14632 * C266 - C31899 * C277) *
               C32130) *
              C31854 * C31813 * C236 +
          ((C14625 * C259 - C14631 * C244 + C31899 * C980 - C14632 * C974) *
               C14633 +
           (C14625 * C274 - C14631 * C260 + C31899 * C992 - C14632 * C981) *
               C32167 +
           (C14625 * C261 - C14631 * C245 + C31899 * C982 - C14632 * C975) *
               C14634 +
           (C14625 * C275 - C14631 * C262 + C31899 * C993 - C14632 * C983) *
               C32160 +
           (C14625 * C263 - C14631 * C246 + C31899 * C984 - C14632 * C976) *
               C14635 +
           (C14625 * C276 - C14631 * C264 + C31899 * C994 - C14632 * C985) *
               C32147 +
           (C14625 * C265 - C14631 * C247 + C31899 * C1291 - C14632 * C1290) *
               C14636 +
           (C14625 * C277 - C14631 * C266 + C31899 * C1293 - C14632 * C1292) *
               C32130) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
            C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
               C15423 +
           (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
            C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
               C15417 +
           (C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
            C15433) *
               C15424 +
           (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
            C15441) *
               C31762) *
              C31854 * C31813 * C31799 * C110 +
          ((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
            C15432) *
               C15423 +
           (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
            C15440) *
               C15417 +
           (C15442 - C15443 + C15444 - C15445 + C15446 - C15447 + C15448 -
            C15449) *
               C15424 +
           (C15450 - C15451 + C15452 - C15453 + C15454 - C15455 + C15456 -
            C15457) *
               C31762) *
              C31854 * C31813 * C31799 * C111 +
          ((C15443 - C15442 + C15445 - C15444 + C15447 - C15446 + C15449 -
            C15448) *
               C15423 +
           (C15451 - C15450 + C15453 - C15452 + C15455 - C15454 + C15457 -
            C15456) *
               C15417 +
           (C32168 * C132 - C15419 * C122 + C32164 * C255 - C15420 * C242 +
            C32154 * C265 - C15421 * C247 + C32136 * C1291 - C15422 * C1290) *
               C15424 +
           (C32168 * C143 - C15419 * C133 + C32164 * C272 - C15420 * C256 +
            C32154 * C277 - C15421 * C266 + C32136 * C1293 - C15422 * C1292) *
               C31762) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
            C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
               C15423 +
           (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
            C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
               C15417 +
           (C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
            C15433) *
               C15424 +
           (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
            C15441) *
               C31762) *
              C31854 * C31813 * C235 +
          ((C15419 * C239 - C32168 * C249 + C15420 * C244 - C32164 * C259 +
            C15421 * C974 - C32154 * C980 + C15422 * C977 - C32136 * C986) *
               C15423 +
           (C15419 * C250 - C32168 * C269 + C15420 * C260 - C32164 * C274 +
            C15421 * C981 - C32154 * C992 + C15422 * C987 - C32136 * C995) *
               C15417 +
           (C15419 * C240 - C32168 * C251 + C15420 * C245 - C32164 * C261 +
            C15421 * C975 - C32154 * C982 + C15422 * C978 - C32136 * C988) *
               C15424 +
           (C15419 * C252 - C32168 * C270 + C15420 * C262 - C32164 * C275 +
            C15421 * C983 - C32154 * C993 + C15422 * C989 - C32136 * C996) *
               C31762) *
              C31854 * C31813 * C236 +
          ((C32168 * C259 - C15419 * C244 + C32164 * C980 - C15420 * C974 +
            C32154 * C986 - C15421 * C977 + C32136 * C6144 - C15422 * C6142) *
               C15423 +
           (C32168 * C274 - C15419 * C260 + C32164 * C992 - C15420 * C981 +
            C32154 * C995 - C15421 * C987 + C32136 * C6148 - C15422 * C6145) *
               C15417 +
           (C32168 * C261 - C15419 * C245 + C32164 * C982 - C15420 * C975 +
            C32154 * C988 - C15421 * C978 + C32136 * C6307 - C15422 * C6306) *
               C15424 +
           (C32168 * C275 - C15419 * C262 + C32164 * C993 - C15420 * C983 +
            C32154 * C996 - C15421 * C989 + C32136 * C6309 - C15422 * C6308) *
               C31762) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
              C17324 * C259 - C31010 * C244) *
                 C30875 +
             (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
              C17324 * C274 - C31010 * C260) *
                 C32076 +
             (C17335 - C17336 + C17337 - C17338 + C17339 - C17340) * C30856 +
             (C17341 - C17342 + C17343 - C17344 + C17345 - C17346) * C31762) *
                C20324 +
            ((C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C30875 +
             (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32076 +
             C20017 * C30856 + C20018 * C31762) *
                C31941) *
               C31813 * C466 +
           (((C31004 * C239 - C31895 * C249 + C30996 * C244 - C31902 * C259 +
              C31010 * C974 - C17324 * C980) *
                 C30875 +
             (C31004 * C250 - C31895 * C269 + C30996 * C260 - C31902 * C274 +
              C31010 * C981 - C17324 * C992) *
                 C32076 +
             (C17747 - C17748 + C17749 - C17750 + C17751 - C17752) * C30856 +
             (C17753 - C17754 + C17755 - C17756 + C17757 - C17758) * C31762) *
                C20324 +
            ((C20215 - C20216 + C20217 - C20218 + C20219 - C20220) * C30875 +
             (C20221 - C20222 + C20223 - C20224 + C20225 - C20226) * C32076 +
             (C19795 - C19796 + C19797 - C19798 + C19799 - C19800) * C30856 +
             (C19801 - C19802 + C19803 - C19804 + C19805 - C19806) * C31762) *
                C31941) *
               C31813 * C467) *
              C468 +
          ((((C17336 - C17335 + C17338 - C17337 + C17340 - C17339) * C30875 +
             (C17342 - C17341 + C17344 - C17343 + C17346 - C17345) * C32076 +
             (C17348 - C17347 + C17350 - C17349 + C17352 - C17351) * C30856 +
             (C17354 - C17353 + C17356 - C17355 + C17358 - C17357) * C31762) *
                C20324 +
            (C20019 * C30875 + C20020 * C32076 +
             (C17929 - C17930 + C17931 - C17932 + C17933 - C17934) * C30856 +
             (C17935 - C17936 + C17937 - C17938 + C17939 - C17940) * C31762) *
                C31941) *
               C31813 * C466 +
           (((C17748 - C17747 + C17750 - C17749 + C17752 - C17751) * C30875 +
             (C17754 - C17753 + C17756 - C17755 + C17758 - C17757) * C32076 +
             (C17760 - C17759 + C17762 - C17761 + C17764 - C17763) * C30856 +
             (C17766 - C17765 + C17768 - C17767 + C17770 - C17769) * C31762) *
                C20324 +
            ((C19796 - C19795 + C19798 - C19797 + C19800 - C19799) * C30875 +
             (C19802 - C19801 + C19804 - C19803 + C19806 - C19805) * C32076 +
             (C31895 * C685 - C31004 * C678 + C31902 * C1121 - C30996 * C1110 +
              C17324 * C1645 - C31010 * C1640) *
                 C30856 +
             (C31895 * C693 - C31004 * C686 + C31902 * C1137 - C30996 * C1122 +
              C17324 * C1649 - C31010 * C1646) *
                 C31762) *
                C31941) *
               C31813 * C467) *
              C469)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
              C17324 * C259 - C31010 * C244) *
                 C30875 +
             (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
              C17324 * C274 - C31010 * C260) *
                 C32076 +
             (C17335 - C17336 + C17337 - C17338 + C17339 - C17340) * C30856 +
             (C17341 - C17342 + C17343 - C17344 + C17345 - C17346) * C31762) *
                C20324 +
            ((C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C30875 +
             (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32076 +
             C20017 * C30856 + C20018 * C31762) *
                C31941) *
               C572 +
           (((C19566 - C19565 + C19568 - C19567 + C19570 - C19569) * C30875 +
             (C19572 - C19571 + C19574 - C19573 + C19576 - C19575) * C32076 +
             C20019 * C30856 + C20020 * C31762) *
                C20324 +
            ((C19577 - C19578 + C19579 - C19580 + C19581 - C19582) * C30875 +
             (C19583 - C19584 + C19585 - C19586 + C19587 - C19588) * C32076 +
             (C19589 - C19590 + C19591 - C19592 + C19593 - C19594) * C30856 +
             (C19595 - C19596 + C19597 - C19598 + C19599 - C19600) * C31762) *
                C31941) *
               C573) *
              C466 +
          ((((C31004 * C239 - C31895 * C249 + C30996 * C244 - C31902 * C259 +
              C31010 * C974 - C17324 * C980) *
                 C30875 +
             (C31004 * C250 - C31895 * C269 + C30996 * C260 - C31902 * C274 +
              C31010 * C981 - C17324 * C992) *
                 C32076 +
             (C17747 - C17748 + C17749 - C17750 + C17751 - C17752) * C30856 +
             (C17753 - C17754 + C17755 - C17756 + C17757 - C17758) * C31762) *
                C20324 +
            ((C20215 - C20216 + C20217 - C20218 + C20219 - C20220) * C30875 +
             (C20221 - C20222 + C20223 - C20224 + C20225 - C20226) * C32076 +
             (C19795 - C19796 + C19797 - C19798 + C19799 - C19800) * C30856 +
             (C19801 - C19802 + C19803 - C19804 + C19805 - C19806) * C31762) *
                C31941) *
               C572 +
           (((C20216 - C20215 + C20218 - C20217 + C20220 - C20219) * C30875 +
             (C20222 - C20221 + C20224 - C20223 + C20226 - C20225) * C32076 +
             (C19796 - C19795 + C19798 - C19797 + C19800 - C19799) * C30856 +
             (C19802 - C19801 + C19804 - C19803 + C19806 - C19805) * C31762) *
                C20324 +
            ((C31895 * C1123 - C31004 * C1111 + C31902 * C1124 -
              C30996 * C1112 + C17324 * C6217 - C31010 * C6213) *
                 C30875 +
             (C31895 * C1138 - C31004 * C1125 + C31902 * C1139 -
              C30996 * C1126 + C17324 * C6222 - C31010 * C6219) *
                 C32076 +
             (C31895 * C1127 - C31004 * C1113 + C31902 * C1128 -
              C30996 * C1114 + C17324 * C7020 - C31010 * C7019) *
                 C30856 +
             (C31895 * C1140 - C31004 * C1129 + C31902 * C1141 -
              C30996 * C1130 + C17324 * C7022 - C31010 * C7021) *
                 C31762) *
                C31941) *
               C573) *
              C467) *
         C31787) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
             C17324 * C259 - C31010 * C244) *
                C30875 +
            (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
             C17324 * C274 - C31010 * C260) *
                C32076 +
            (C17335 - C17336 + C17337 - C17338 + C17339 - C17340) * C30856 +
            (C17341 - C17342 + C17343 - C17344 + C17345 - C17346) * C31762) *
               C20324 +
           ((C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C30875 +
            (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32076 +
            C20017 * C30856 + C20018 * C31762) *
               C31941) *
              C31813 * C235 +
          (((C31004 * C239 - C31895 * C249 + C30996 * C244 - C31902 * C259 +
             C31010 * C974 - C17324 * C980) *
                C30875 +
            (C31004 * C250 - C31895 * C269 + C30996 * C260 - C31902 * C274 +
             C31010 * C981 - C17324 * C992) *
                C32076 +
            (C17747 - C17748 + C17749 - C17750 + C17751 - C17752) * C30856 +
            (C17753 - C17754 + C17755 - C17756 + C17757 - C17758) * C31762) *
               C20324 +
           ((C20215 - C20216 + C20217 - C20218 + C20219 - C20220) * C30875 +
            (C20221 - C20222 + C20223 - C20224 + C20225 - C20226) * C32076 +
            (C19795 - C19796 + C19797 - C19798 + C19799 - C19800) * C30856 +
            (C19801 - C19802 + C19803 - C19804 + C19805 - C19806) * C31762) *
               C31941) *
              C31813 * C236 +
          (((C31895 * C259 - C31004 * C244 + C31902 * C980 - C30996 * C974 +
             C17324 * C986 - C31010 * C977) *
                C30875 +
            (C31895 * C274 - C31004 * C260 + C31902 * C992 - C30996 * C981 +
             C17324 * C995 - C31010 * C987) *
                C32076 +
            (C31895 * C261 - C31004 * C245 + C31902 * C982 - C30996 * C975 +
             C17324 * C988 - C31010 * C978) *
                C30856 +
            (C31895 * C275 - C31004 * C262 + C31902 * C993 - C30996 * C983 +
             C17324 * C996 - C31010 * C989) *
                C31762) *
               C20324 +
           ((C31895 * C1117 - C31004 * C1108 + C31902 * C1641 - C30996 * C1638 +
             C17324 * C6215 - C31010 * C6212) *
                C30875 +
            (C31895 * C1135 - C31004 * C1118 + C31902 * C1647 - C30996 * C1642 +
             C17324 * C6221 - C31010 * C6216) *
                C32076 +
            (C31895 * C1119 - C31004 * C1109 + C31902 * C1643 - C30996 * C1639 +
             C17324 * C6393 - C31010 * C6392) *
                C30856 +
            (C31895 * C1136 - C31004 * C1120 + C31902 * C1648 - C30996 * C1644 +
             C17324 * C6395 - C31010 * C6394) *
                C31762) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
             C17324 * C259 - C31010 * C244) *
                C30875 +
            (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
             C17324 * C274 - C31010 * C260) *
                C32076 +
            (C17335 - C17336 + C17337 - C17338 + C17339 - C17340) * C30856 +
            (C17341 - C17342 + C17343 - C17344 + C17345 - C17346) * C31762) *
               C20324 +
           ((C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C30875 +
            (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32076 +
            C20017 * C30856 + C20018 * C31762) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C17336 - C17335 + C17338 - C17337 + C17340 - C17339) * C30875 +
            (C17342 - C17341 + C17344 - C17343 + C17346 - C17345) * C32076 +
            (C17348 - C17347 + C17350 - C17349 + C17352 - C17351) * C30856 +
            (C17354 - C17353 + C17356 - C17355 + C17358 - C17357) * C31762) *
               C20324 +
           (C20019 * C30875 + C20020 * C32076 +
            (C17929 - C17930 + C17931 - C17932 + C17933 - C17934) * C30856 +
            (C17935 - C17936 + C17937 - C17938 + C17939 - C17940) * C31762) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C17379 * C30875 + C17380 * C32076 +
            (C17360 - C17359 + C17362 - C17361 + C17364 - C17363) * C30856 +
            (C17366 - C17365 + C17368 - C17367 + C17370 - C17369) * C31762) *
               C20324 +
           ((C17930 - C17929 + C17932 - C17931 + C17934 - C17933) * C30875 +
            (C17936 - C17935 + C17938 - C17937 + C17940 - C17939) * C32076 +
            (C31895 * C360 - C31004 * C347 + C31902 * C687 - C30996 * C679 +
             C17324 * C1465 - C31010 * C1464) *
                C30856 +
            (C31895 * C377 - C31004 * C361 + C31902 * C694 - C30996 * C688 +
             C17324 * C1467 - C31010 * C1466) *
                C31762) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
             C17324 * C259 - C31010 * C244) *
                C30875 +
            (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
             C17324 * C274 - C31010 * C260) *
                C32076 +
            (C17335 - C17336 + C17337 - C17338 + C17339 - C17340) * C30856 +
            (C17341 - C17342 + C17343 - C17344 + C17345 - C17346) * C31762) *
               C20324 +
           ((C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C30875 +
            (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32076 +
            C20017 * C30856 + C20018 * C31762) *
               C31941) *
              C341 +
          (((C19566 - C19565 + C19568 - C19567 + C19570 - C19569) * C30875 +
            (C19572 - C19571 + C19574 - C19573 + C19576 - C19575) * C32076 +
            C20019 * C30856 + C20020 * C31762) *
               C20324 +
           ((C19577 - C19578 + C19579 - C19580 + C19581 - C19582) * C30875 +
            (C19583 - C19584 + C19585 - C19586 + C19587 - C19588) * C32076 +
            (C19589 - C19590 + C19591 - C19592 + C19593 - C19594) * C30856 +
            (C19595 - C19596 + C19597 - C19598 + C19599 - C19600) * C31762) *
               C31941) *
              C342 +
          (((C19578 - C19577 + C19580 - C19579 + C19582 - C19581) * C30875 +
            (C19584 - C19583 + C19586 - C19585 + C19588 - C19587) * C32076 +
            (C19590 - C19589 + C19592 - C19591 + C19594 - C19593) * C30856 +
            (C19596 - C19595 + C19598 - C19597 + C19600 - C19599) * C31762) *
               C20324 +
           ((C31895 * C2005 - C31004 * C1999 + C31902 * C2533 - C30996 * C2530 +
             C17324 * C6815 - C31010 * C6812) *
                C30875 +
            (C31895 * C2017 - C31004 * C2006 + C31902 * C2539 - C30996 * C2534 +
             C17324 * C6821 - C31010 * C6816) *
                C32076 +
            (C31895 * C2007 - C31004 * C2000 + C31902 * C2535 - C30996 * C2531 +
             C17324 * C7170 - C31010 * C7169) *
                C30856 +
            (C31895 * C2018 - C31004 * C2008 + C31902 * C2540 - C30996 * C2536 +
             C17324 * C7172 - C31010 * C7171) *
                C31762) *
               C31941) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
              C17324 * C259 - C31010 * C244) *
                 C30875 +
             (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
              C17324 * C274 - C31010 * C260) *
                 C32076 +
             (C17335 - C17336 + C17337 - C17338 + C17339 - C17340) * C30856 +
             (C17341 - C17342 + C17343 - C17344 + C17345 - C17346) * C31762) *
                C20324 +
            ((C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C30875 +
             (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32076 +
             C20017 * C30856 + C20018 * C31762) *
                C31941) *
               C572 +
           (((C19566 - C19565 + C19568 - C19567 + C19570 - C19569) * C30875 +
             (C19572 - C19571 + C19574 - C19573 + C19576 - C19575) * C32076 +
             C20019 * C30856 + C20020 * C31762) *
                C20324 +
            ((C19577 - C19578 + C19579 - C19580 + C19581 - C19582) * C30875 +
             (C19583 - C19584 + C19585 - C19586 + C19587 - C19588) * C32076 +
             (C19589 - C19590 + C19591 - C19592 + C19593 - C19594) * C30856 +
             (C19595 - C19596 + C19597 - C19598 + C19599 - C19600) * C31762) *
                C31941) *
               C573) *
              C31799 * C468 +
          ((((C17336 - C17335 + C17338 - C17337 + C17340 - C17339) * C30875 +
             (C17342 - C17341 + C17344 - C17343 + C17346 - C17345) * C32076 +
             (C17348 - C17347 + C17350 - C17349 + C17352 - C17351) * C30856 +
             (C17354 - C17353 + C17356 - C17355 + C17358 - C17357) * C31762) *
                C20324 +
            (C20019 * C30875 + C20020 * C32076 +
             (C17929 - C17930 + C17931 - C17932 + C17933 - C17934) * C30856 +
             (C17935 - C17936 + C17937 - C17938 + C17939 - C17940) * C31762) *
                C31941) *
               C572 +
           ((C20017 * C30875 + C20018 * C32076 +
             (C17930 - C17929 + C17932 - C17931 + C17934 - C17933) * C30856 +
             (C17936 - C17935 + C17938 - C17937 + C17940 - C17939) * C31762) *
                C20324 +
            ((C19590 - C19589 + C19592 - C19591 + C19594 - C19593) * C30875 +
             (C19596 - C19595 + C19598 - C19597 + C19600 - C19599) * C32076 +
             (C31895 * C368 - C31004 * C351 + C31902 * C1131 - C30996 * C1115 +
              C17324 * C1132 - C31010 * C1116) *
                 C30856 +
             (C31895 * C381 - C31004 * C369 + C31902 * C1142 - C30996 * C1133 +
              C17324 * C1143 - C31010 * C1134) *
                 C31762) *
                C31941) *
               C573) *
              C31799 * C469)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
             C17324 * C259 - C31010 * C244) *
                C30875 +
            (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
             C17324 * C274 - C31010 * C260) *
                C32076 +
            (C17335 - C17336 + C17337 - C17338 + C17339 - C17340) * C30856 +
            (C17341 - C17342 + C17343 - C17344 + C17345 - C17346) * C31762) *
               C20324 +
           ((C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C30875 +
            (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32076 +
            C20017 * C30856 + C20018 * C31762) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C17336 - C17335 + C17338 - C17337 + C17340 - C17339) * C30875 +
            (C17342 - C17341 + C17344 - C17343 + C17346 - C17345) * C32076 +
            (C17348 - C17347 + C17350 - C17349 + C17352 - C17351) * C30856 +
            (C17354 - C17353 + C17356 - C17355 + C17358 - C17357) * C31762) *
               C20324 +
           (C20019 * C30875 + C20020 * C32076 +
            (C17929 - C17930 + C17931 - C17932 + C17933 - C17934) * C30856 +
            (C17935 - C17936 + C17937 - C17938 + C17939 - C17940) * C31762) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C17379 * C30875 + C17380 * C32076 +
            (C17360 - C17359 + C17362 - C17361 + C17364 - C17363) * C30856 +
            (C17366 - C17365 + C17368 - C17367 + C17370 - C17369) * C31762) *
               C20324 +
           ((C17930 - C17929 + C17932 - C17931 + C17934 - C17933) * C30875 +
            (C17936 - C17935 + C17938 - C17937 + C17940 - C17939) * C32076 +
            (C31895 * C360 - C31004 * C347 + C31902 * C687 - C30996 * C679 +
             C17324 * C1465 - C31010 * C1464) *
                C30856 +
            (C31895 * C377 - C31004 * C361 + C31902 * C694 - C30996 * C688 +
             C17324 * C1467 - C31010 * C1466) *
                C31762) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
             C17324 * C259 - C31010 * C244) *
                C30875 +
            (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
             C17324 * C274 - C31010 * C260) *
                C32076 +
            (C17335 - C17336 + C17337 - C17338 + C17339 - C17340) * C30856 +
            (C17341 - C17342 + C17343 - C17344 + C17345 - C17346) * C31762) *
               C20324 +
           ((C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C30875 +
            (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32076 +
            C20017 * C30856 + C20018 * C31762) *
               C31941) *
              C31813 * C235 +
          (((C31004 * C239 - C31895 * C249 + C30996 * C244 - C31902 * C259 +
             C31010 * C974 - C17324 * C980) *
                C30875 +
            (C31004 * C250 - C31895 * C269 + C30996 * C260 - C31902 * C274 +
             C31010 * C981 - C17324 * C992) *
                C32076 +
            (C17747 - C17748 + C17749 - C17750 + C17751 - C17752) * C30856 +
            (C17753 - C17754 + C17755 - C17756 + C17757 - C17758) * C31762) *
               C20324 +
           ((C20215 - C20216 + C20217 - C20218 + C20219 - C20220) * C30875 +
            (C20221 - C20222 + C20223 - C20224 + C20225 - C20226) * C32076 +
            (C19795 - C19796 + C19797 - C19798 + C19799 - C19800) * C30856 +
            (C19801 - C19802 + C19803 - C19804 + C19805 - C19806) * C31762) *
               C31941) *
              C31813 * C236 +
          (((C31895 * C259 - C31004 * C244 + C31902 * C980 - C30996 * C974 +
             C17324 * C986 - C31010 * C977) *
                C30875 +
            (C31895 * C274 - C31004 * C260 + C31902 * C992 - C30996 * C981 +
             C17324 * C995 - C31010 * C987) *
                C32076 +
            (C31895 * C261 - C31004 * C245 + C31902 * C982 - C30996 * C975 +
             C17324 * C988 - C31010 * C978) *
                C30856 +
            (C31895 * C275 - C31004 * C262 + C31902 * C993 - C30996 * C983 +
             C17324 * C996 - C31010 * C989) *
                C31762) *
               C20324 +
           ((C31895 * C1117 - C31004 * C1108 + C31902 * C1641 - C30996 * C1638 +
             C17324 * C6215 - C31010 * C6212) *
                C30875 +
            (C31895 * C1135 - C31004 * C1118 + C31902 * C1647 - C30996 * C1642 +
             C17324 * C6221 - C31010 * C6216) *
                C32076 +
            (C31895 * C1119 - C31004 * C1109 + C31902 * C1643 - C30996 * C1639 +
             C17324 * C6393 - C31010 * C6392) *
                C30856 +
            (C31895 * C1136 - C31004 * C1120 + C31902 * C1648 - C30996 * C1644 +
             C17324 * C6395 - C31010 * C6394) *
                C31762) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
              C17324 * C259 - C31010 * C244) *
                 C6079 +
             (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
              C17324 * C274 - C31010 * C260) *
                 C31752) *
                C31937 +
            ((C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C6079 +
             (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C31752) *
                C31944 +
            C30361 * C23798) *
               C31813 * C466 +
           (((C31004 * C239 - C31895 * C249 + C30996 * C244 - C31902 * C259 +
              C31010 * C974 - C17324 * C980) *
                 C6079 +
             (C31004 * C250 - C31895 * C269 + C30996 * C260 - C31902 * C274 +
              C31010 * C981 - C17324 * C992) *
                 C31752) *
                C31937 +
            ((C20215 - C20216 + C20217 - C20218 + C20219 - C20220) * C6079 +
             (C20221 - C20222 + C20223 - C20224 + C20225 - C20226) * C31752) *
                C31944 +
            ((C31004 * C1111 - C31895 * C1123 + C30996 * C1112 -
              C31902 * C1124 + C31010 * C6213 - C17324 * C6217) *
                 C6079 +
             (C31004 * C1125 - C31895 * C1138 + C30996 * C1126 -
              C31902 * C1139 + C31010 * C6219 - C17324 * C6222) *
                 C31752) *
                C23798) *
               C31813 * C467) *
              C468 +
          ((((C17336 - C17335 + C17338 - C17337 + C17340 - C17339) * C6079 +
             (C17342 - C17341 + C17344 - C17343 + C17346 - C17345) * C31752) *
                C31937 +
            (C20019 * C6079 + C20020 * C31752) * C31944 +
            ((C19589 - C19590 + C19591 - C19592 + C19593 - C19594) * C6079 +
             (C19595 - C19596 + C19597 - C19598 + C19599 - C19600) * C31752) *
                C23798) *
               C31813 * C466 +
           (((C17748 - C17747 + C17750 - C17749 + C17752 - C17751) * C6079 +
             (C17754 - C17753 + C17756 - C17755 + C17758 - C17757) * C31752) *
                C31937 +
            ((C19796 - C19795 + C19798 - C19797 + C19800 - C19799) * C6079 +
             (C19802 - C19801 + C19804 - C19803 + C19806 - C19805) * C31752) *
                C31944 +
            ((C31895 * C1127 - C31004 * C1113 + C31902 * C1128 -
              C30996 * C1114 + C17324 * C7020 - C31010 * C7019) *
                 C6079 +
             (C31895 * C1140 - C31004 * C1129 + C31902 * C1141 -
              C30996 * C1130 + C17324 * C7022 - C31010 * C7021) *
                 C31752) *
                C23798) *
               C31813 * C467) *
              C469)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
              C17324 * C259 - C31010 * C244) *
                 C6079 +
             (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
              C17324 * C274 - C31010 * C260) *
                 C31752) *
                C31937 +
            ((C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C6079 +
             (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C31752) *
                C31944 +
            C30361 * C23798) *
               C572 +
           (((C19566 - C19565 + C19568 - C19567 + C19570 - C19569) * C6079 +
             (C19572 - C19571 + C19574 - C19573 + C19576 - C19575) * C31752) *
                C31937 +
            ((C19577 - C19578 + C19579 - C19580 + C19581 - C19582) * C6079 +
             (C19583 - C19584 + C19585 - C19586 + C19587 - C19588) * C31752) *
                C31944 +
            ((C30343 - C30344 + C30345 - C30346 + C30347 - C30348) * C6079 +
             (C30349 - C30350 + C30351 - C30352 + C30353 - C30354) * C31752) *
                C23798) *
               C573) *
              C466 +
          ((((C31004 * C239 - C31895 * C249 + C30996 * C244 - C31902 * C259 +
              C31010 * C974 - C17324 * C980) *
                 C6079 +
             (C31004 * C250 - C31895 * C269 + C30996 * C260 - C31902 * C274 +
              C31010 * C981 - C17324 * C992) *
                 C31752) *
                C31937 +
            ((C20215 - C20216 + C20217 - C20218 + C20219 - C20220) * C6079 +
             (C20221 - C20222 + C20223 - C20224 + C20225 - C20226) * C31752) *
                C31944 +
            ((C30800 - C30801 + C30802 - C30803 + C30804 - C30805) * C6079 +
             (C30806 - C30807 + C30808 - C30809 + C30810 - C30811) * C31752) *
                C23798) *
               C572 +
           (((C20216 - C20215 + C20218 - C20217 + C20220 - C20219) * C6079 +
             (C20222 - C20221 + C20224 - C20223 + C20226 - C20225) * C31752) *
                C31937 +
            ((C30801 - C30800 + C30803 - C30802 + C30805 - C30804) * C6079 +
             (C30807 - C30806 + C30809 - C30808 + C30811 - C30810) * C31752) *
                C31944 +
            ((C31895 * C2533 - C31004 * C2530 + C31902 * C6815 -
              C30996 * C6812 + C17324 * C7332 - C31010 * C7331) *
                 C6079 +
             (C31895 * C2539 - C31004 * C2534 + C31902 * C6821 -
              C30996 * C6816 + C17324 * C7334 - C31010 * C7333) *
                 C31752) *
                C23798) *
               C573) *
              C467) *
         C31787) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
             C17324 * C259 - C31010 * C244) *
                C6079 +
            (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
             C17324 * C274 - C31010 * C260) *
                C31752) *
               C31937 +
           ((C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C6079 +
            (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C31752) *
               C31944 +
           ((C19578 - C19577 + C19580 - C19579 + C19582 - C19581) * C6079 +
            (C19584 - C19583 + C19586 - C19585 + C19588 - C19587) * C31752) *
               C23798) *
              C31813 * C235 +
          (((C31004 * C239 - C31895 * C249 + C30996 * C244 - C31902 * C259 +
             C31010 * C974 - C17324 * C980) *
                C6079 +
            (C31004 * C250 - C31895 * C269 + C30996 * C260 - C31902 * C274 +
             C31010 * C981 - C17324 * C992) *
                C31752) *
               C31937 +
           ((C20215 - C20216 + C20217 - C20218 + C20219 - C20220) * C6079 +
            (C20221 - C20222 + C20223 - C20224 + C20225 - C20226) * C31752) *
               C31944 +
           ((C31004 * C1111 - C31895 * C1123 + C30996 * C1112 - C31902 * C1124 +
             C31010 * C6213 - C17324 * C6217) *
                C6079 +
            (C31004 * C1125 - C31895 * C1138 + C30996 * C1126 - C31902 * C1139 +
             C31010 * C6219 - C17324 * C6222) *
                C31752) *
               C23798) *
              C31813 * C236 +
          (((C31895 * C259 - C31004 * C244 + C31902 * C980 - C30996 * C974 +
             C17324 * C986 - C31010 * C977) *
                C6079 +
            (C31895 * C274 - C31004 * C260 + C31902 * C992 - C30996 * C981 +
             C17324 * C995 - C31010 * C987) *
                C31752) *
               C31937 +
           ((C31895 * C1117 - C31004 * C1108 + C31902 * C1641 - C30996 * C1638 +
             C17324 * C6215 - C31010 * C6212) *
                C6079 +
            (C31895 * C1135 - C31004 * C1118 + C31902 * C1647 - C30996 * C1642 +
             C17324 * C6221 - C31010 * C6216) *
                C31752) *
               C31944 +
           ((C31895 * C1124 - C31004 * C1112 + C31902 * C6217 - C30996 * C6213 +
             C17324 * C6218 - C31010 * C6214) *
                C6079 +
            (C31895 * C1139 - C31004 * C1126 + C31902 * C6222 - C30996 * C6219 +
             C17324 * C6223 - C31010 * C6220) *
                C31752) *
               C23798) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
             C17324 * C259 - C31010 * C244) *
                C6079 +
            (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
             C17324 * C274 - C31010 * C260) *
                C31752) *
               C31937 +
           ((C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C6079 +
            (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C31752) *
               C31944 +
           ((C19578 - C19577 + C19580 - C19579 + C19582 - C19581) * C6079 +
            (C19584 - C19583 + C19586 - C19585 + C19588 - C19587) * C31752) *
               C23798) *
              C31813 * C31799 * C110 +
          (((C17336 - C17335 + C17338 - C17337 + C17340 - C17339) * C6079 +
            (C17342 - C17341 + C17344 - C17343 + C17346 - C17345) * C31752) *
               C31937 +
           (C20019 * C6079 + C20020 * C31752) * C31944 +
           ((C19589 - C19590 + C19591 - C19592 + C19593 - C19594) * C6079 +
            (C19595 - C19596 + C19597 - C19598 + C19599 - C19600) * C31752) *
               C23798) *
              C31813 * C31799 * C111 +
          ((C17379 * C6079 + C17380 * C31752) * C31937 +
           ((C17930 - C17929 + C17932 - C17931 + C17934 - C17933) * C6079 +
            (C17936 - C17935 + C17938 - C17937 + C17940 - C17939) * C31752) *
               C31944 +
           ((C31895 * C368 - C31004 * C351 + C31902 * C1131 - C30996 * C1115 +
             C17324 * C1132 - C31010 * C1116) *
                C6079 +
            (C31895 * C381 - C31004 * C369 + C31902 * C1142 - C30996 * C1133 +
             C17324 * C1143 - C31010 * C1134) *
                C31752) *
               C23798) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
             C17324 * C259 - C31010 * C244) *
                C6079 +
            (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
             C17324 * C274 - C31010 * C260) *
                C31752) *
               C31937 +
           ((C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C6079 +
            (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C31752) *
               C31944 +
           C30361 * C23798) *
              C341 +
          (((C19566 - C19565 + C19568 - C19567 + C19570 - C19569) * C6079 +
            (C19572 - C19571 + C19574 - C19573 + C19576 - C19575) * C31752) *
               C31937 +
           ((C19577 - C19578 + C19579 - C19580 + C19581 - C19582) * C6079 +
            (C19583 - C19584 + C19585 - C19586 + C19587 - C19588) * C31752) *
               C31944 +
           ((C30343 - C30344 + C30345 - C30346 + C30347 - C30348) * C6079 +
            (C30349 - C30350 + C30351 - C30352 + C30353 - C30354) * C31752) *
               C23798) *
              C342 +
          (C30361 * C31937 +
           ((C30344 - C30343 + C30346 - C30345 + C30348 - C30347) * C6079 +
            (C30350 - C30349 + C30352 - C30351 + C30354 - C30353) * C31752) *
               C31944 +
           ((C31895 * C2011 - C31004 * C2002 + C31902 * C6817 - C30996 * C6813 +
             C17324 * C6818 - C31010 * C6814) *
                C6079 +
            (C31895 * C2020 - C31004 * C2012 + C31902 * C6822 - C30996 * C6819 +
             C17324 * C6823 - C31010 * C6820) *
                C31752) *
               C23798) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
              C17324 * C259 - C31010 * C244) *
                 C6079 +
             (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
              C17324 * C274 - C31010 * C260) *
                 C31752) *
                C31937 +
            ((C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C6079 +
             (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C31752) *
                C31944 +
            C30361 * C23798) *
               C572 +
           (((C19566 - C19565 + C19568 - C19567 + C19570 - C19569) * C6079 +
             (C19572 - C19571 + C19574 - C19573 + C19576 - C19575) * C31752) *
                C31937 +
            ((C19577 - C19578 + C19579 - C19580 + C19581 - C19582) * C6079 +
             (C19583 - C19584 + C19585 - C19586 + C19587 - C19588) * C31752) *
                C31944 +
            ((C30343 - C30344 + C30345 - C30346 + C30347 - C30348) * C6079 +
             (C30349 - C30350 + C30351 - C30352 + C30353 - C30354) * C31752) *
                C23798) *
               C573) *
              C31799 * C468 +
          ((((C17336 - C17335 + C17338 - C17337 + C17340 - C17339) * C6079 +
             (C17342 - C17341 + C17344 - C17343 + C17346 - C17345) * C31752) *
                C31937 +
            (C20019 * C6079 + C20020 * C31752) * C31944 +
            ((C19589 - C19590 + C19591 - C19592 + C19593 - C19594) * C6079 +
             (C19595 - C19596 + C19597 - C19598 + C19599 - C19600) * C31752) *
                C23798) *
               C572 +
           ((C20017 * C6079 + C20018 * C31752) * C31937 +
            ((C19590 - C19589 + C19592 - C19591 + C19594 - C19593) * C6079 +
             (C19596 - C19595 + C19598 - C19597 + C19600 - C19599) * C31752) *
                C31944 +
            ((C31895 * C2007 - C31004 * C2000 + C31902 * C2535 -
              C30996 * C2531 + C17324 * C7170 - C31010 * C7169) *
                 C6079 +
             (C31895 * C2018 - C31004 * C2008 + C31902 * C2540 -
              C30996 * C2536 + C17324 * C7172 - C31010 * C7171) *
                 C31752) *
                C23798) *
               C573) *
              C31799 * C469)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
             C17324 * C259 - C31010 * C244) *
                C6079 +
            (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
             C17324 * C274 - C31010 * C260) *
                C31752) *
               C31937 +
           ((C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C6079 +
            (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C31752) *
               C31944 +
           ((C19578 - C19577 + C19580 - C19579 + C19582 - C19581) * C6079 +
            (C19584 - C19583 + C19586 - C19585 + C19588 - C19587) * C31752) *
               C23798) *
              C31813 * C31799 * C110 +
          (((C17336 - C17335 + C17338 - C17337 + C17340 - C17339) * C6079 +
            (C17342 - C17341 + C17344 - C17343 + C17346 - C17345) * C31752) *
               C31937 +
           (C20019 * C6079 + C20020 * C31752) * C31944 +
           ((C19589 - C19590 + C19591 - C19592 + C19593 - C19594) * C6079 +
            (C19595 - C19596 + C19597 - C19598 + C19599 - C19600) * C31752) *
               C23798) *
              C31813 * C31799 * C111 +
          ((C17379 * C6079 + C17380 * C31752) * C31937 +
           ((C17930 - C17929 + C17932 - C17931 + C17934 - C17933) * C6079 +
            (C17936 - C17935 + C17938 - C17937 + C17940 - C17939) * C31752) *
               C31944 +
           ((C31895 * C368 - C31004 * C351 + C31902 * C1131 - C30996 * C1115 +
             C17324 * C1132 - C31010 * C1116) *
                C6079 +
            (C31895 * C381 - C31004 * C369 + C31902 * C1142 - C30996 * C1133 +
             C17324 * C1143 - C31010 * C1134) *
                C31752) *
               C23798) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31895 * C126 - C31004 * C119 + C31902 * C249 - C30996 * C239 +
             C17324 * C259 - C31010 * C244) *
                C6079 +
            (C31895 * C140 - C31004 * C127 + C31902 * C269 - C30996 * C250 +
             C17324 * C274 - C31010 * C260) *
                C31752) *
               C31937 +
           ((C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C6079 +
            (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C31752) *
               C31944 +
           ((C19578 - C19577 + C19580 - C19579 + C19582 - C19581) * C6079 +
            (C19584 - C19583 + C19586 - C19585 + C19588 - C19587) * C31752) *
               C23798) *
              C31813 * C235 +
          (((C31004 * C239 - C31895 * C249 + C30996 * C244 - C31902 * C259 +
             C31010 * C974 - C17324 * C980) *
                C6079 +
            (C31004 * C250 - C31895 * C269 + C30996 * C260 - C31902 * C274 +
             C31010 * C981 - C17324 * C992) *
                C31752) *
               C31937 +
           ((C20215 - C20216 + C20217 - C20218 + C20219 - C20220) * C6079 +
            (C20221 - C20222 + C20223 - C20224 + C20225 - C20226) * C31752) *
               C31944 +
           ((C31004 * C1111 - C31895 * C1123 + C30996 * C1112 - C31902 * C1124 +
             C31010 * C6213 - C17324 * C6217) *
                C6079 +
            (C31004 * C1125 - C31895 * C1138 + C30996 * C1126 - C31902 * C1139 +
             C31010 * C6219 - C17324 * C6222) *
                C31752) *
               C23798) *
              C31813 * C236 +
          (((C31895 * C259 - C31004 * C244 + C31902 * C980 - C30996 * C974 +
             C17324 * C986 - C31010 * C977) *
                C6079 +
            (C31895 * C274 - C31004 * C260 + C31902 * C992 - C30996 * C981 +
             C17324 * C995 - C31010 * C987) *
                C31752) *
               C31937 +
           ((C31895 * C1117 - C31004 * C1108 + C31902 * C1641 - C30996 * C1638 +
             C17324 * C6215 - C31010 * C6212) *
                C6079 +
            (C31895 * C1135 - C31004 * C1118 + C31902 * C1647 - C30996 * C1642 +
             C17324 * C6221 - C31010 * C6216) *
                C31752) *
               C31944 +
           ((C31895 * C1124 - C31004 * C1112 + C31902 * C6217 - C30996 * C6213 +
             C17324 * C6218 - C31010 * C6214) *
                C6079 +
            (C31895 * C1139 - C31004 * C1126 + C31902 * C6222 - C30996 * C6219 +
             C17324 * C6223 - C31010 * C6220) *
                C31752) *
               C23798) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
              C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
                 C6079 +
             (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
              C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
                 C31752) *
                C20324 +
            ((C26810 - C26811 + C26812 - C26813 + C26814 - C26815 + C26816 -
              C26817) *
                 C6079 +
             (C26818 - C26819 + C26820 - C26821 + C26822 - C26823 + C26824 -
              C26825) *
                 C31752) *
                C31941) *
               C31813 * C466 +
           (((C15419 * C239 - C32168 * C249 + C15420 * C244 - C32164 * C259 +
              C15421 * C974 - C32154 * C980 + C15422 * C977 - C32136 * C986) *
                 C6079 +
             (C15419 * C250 - C32168 * C269 + C15420 * C260 - C32164 * C274 +
              C15421 * C981 - C32154 * C992 + C15422 * C987 - C32136 * C995) *
                 C31752) *
                C20324 +
            ((C15419 * C676 - C32168 * C681 + C15420 * C1108 - C32164 * C1117 +
              C15421 * C1638 - C32154 * C1641 + C15422 * C6212 -
              C32136 * C6215) *
                 C6079 +
             (C15419 * C682 - C32168 * C691 + C15420 * C1118 - C32164 * C1135 +
              C15421 * C1642 - C32154 * C1647 + C15422 * C6216 -
              C32136 * C6221) *
                 C31752) *
                C31941) *
               C31813 * C467) *
              C468 +
          ((((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
              C15432) *
                 C6079 +
             (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
              C15440) *
                 C31752) *
                C20324 +
            ((C15930 - C15931 + C15932 - C15933 + C15934 - C15935 + C15936 -
              C15937) *
                 C6079 +
             (C15938 - C15939 + C15940 - C15941 + C15942 - C15943 + C15944 -
              C15945) *
                 C31752) *
                C31941) *
               C31813 * C466 +
           (((C15785 - C15784 + C15787 - C15786 + C15789 - C15788 + C15791 -
              C15790) *
                 C6079 +
             (C15793 - C15792 + C15795 - C15794 + C15797 - C15796 + C15799 -
              C15798) *
                 C31752) *
                C20324 +
            ((C32168 * C683 - C15419 * C677 + C32164 * C1119 - C15420 * C1109 +
              C32154 * C1643 - C15421 * C1639 + C32136 * C6393 -
              C15422 * C6392) *
                 C6079 +
             (C32168 * C692 - C15419 * C684 + C32164 * C1136 - C15420 * C1120 +
              C32154 * C1648 - C15421 * C1644 + C32136 * C6395 -
              C15422 * C6394) *
                 C31752) *
                C31941) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                 C5251 +
             (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                 C32158 +
             (C14638 - C14639 + C14640 - C14641) * C5252 +
             (C14642 - C14643 + C14644 - C14645) * C32145 + C14678 * C5253 +
             C14679 * C32115) *
                C20324 +
            ((C16530 - C16531 + C16532 - C16533) * C5251 +
             (C16534 - C16535 + C16536 - C16537) * C32158 + C16997 * C5252 +
             C16998 * C32145 + C18237 * C5253 + C18238 * C32115) *
                C31941) *
               C31813 * C466 +
           (((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                 C5251 +
             (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                 C32158 +
             (C15008 - C15009 + C15010 - C15011) * C5252 +
             (C15012 - C15013 + C15014 - C15015) * C32145 +
             (C15016 - C15017 + C15018 - C15019) * C5253 +
             (C15020 - C15021 + C15022 - C15023) * C32115) *
                C20324 +
            ((C17197 - C17198 + C17199 - C17200) * C5251 +
             (C17201 - C17202 + C17203 - C17204) * C32158 +
             (C16775 - C16776 + C16777 - C16778) * C5252 +
             (C16779 - C16780 + C16781 - C16782) * C32145 +
             (C18725 - C18726 + C18727 - C18728) * C5253 +
             (C18729 - C18730 + C18731 - C18732) * C32115) *
                C31941) *
               C31813 * C467) *
              C468 +
          ((((C14639 - C14638 + C14641 - C14640) * C5251 +
             (C14643 - C14642 + C14645 - C14644) * C32158 +
             (C14647 - C14646 + C14649 - C14648) * C5252 +
             (C14651 - C14650 + C14653 - C14652) * C32145 +
             (C14655 - C14654 + C14657 - C14656) * C5253 +
             (C14659 - C14658 + C14661 - C14660) * C32115) *
                C20324 +
            (C16999 * C5251 + C17000 * C32158 + C18931 * C5252 +
             C18932 * C32145 + (C15178 - C15179 + C15180 - C15181) * C5253 +
             (C15182 - C15183 + C15184 - C15185) * C32115) *
                C31941) *
               C31813 * C466 +
           (((C15009 - C15008 + C15011 - C15010) * C5251 +
             (C15013 - C15012 + C15015 - C15014) * C32158 +
             (C15017 - C15016 + C15019 - C15018) * C5252 +
             (C15021 - C15020 + C15023 - C15022) * C32145 +
             (C15025 - C15024 + C15027 - C15026) * C5253 +
             (C15029 - C15028 + C15031 - C15030) * C32115) *
                C20324 +
            ((C16776 - C16775 + C16778 - C16777) * C5251 +
             (C16780 - C16779 + C16782 - C16781) * C32158 +
             (C18726 - C18725 + C18728 - C18727) * C5252 +
             (C18730 - C18729 + C18732 - C18731) * C32145 +
             (C14625 * C687 - C14631 * C679 + C31899 * C1465 - C14632 * C1464) *
                 C5253 +
             (C14625 * C694 - C14631 * C688 + C31899 * C1467 - C14632 * C1466) *
                 C32115) *
                C31941) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                 C6079 +
             (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                 C31752) *
                C32169 +
            ((C16530 - C16531 + C16532 - C16533) * C6079 +
             (C16534 - C16535 + C16536 - C16537) * C31752) *
                C32166 +
            C27556 * C32157 + C27561 * C32142) *
               C31813 * C466 +
           (((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                 C6079 +
             (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                 C31752) *
                C32169 +
            ((C17197 - C17198 + C17199 - C17200) * C6079 +
             (C17201 - C17202 + C17203 - C17204) * C31752) *
                C32166 +
            ((C17205 - C17206 + C17207 - C17208) * C6079 +
             (C17209 - C17210 + C17211 - C17212) * C31752) *
                C32157 +
            ((C14631 * C2530 - C14625 * C2533 + C14632 * C6812 -
              C31899 * C6815) *
                 C6079 +
             (C14631 * C2534 - C14625 * C2539 + C14632 * C6816 -
              C31899 * C6821) *
                 C31752) *
                C32142) *
               C31813 * C467) *
              C468 +
          ((((C14639 - C14638 + C14641 - C14640) * C6079 +
             (C14643 - C14642 + C14645 - C14644) * C31752) *
                C32169 +
            (C16999 * C6079 + C17000 * C31752) * C32166 +
            (C17001 * C6079 + C17002 * C31752) * C32157 +
            ((C16558 - C16559 + C16560 - C16561) * C6079 +
             (C16562 - C16563 + C16564 - C16565) * C31752) *
                C32142) *
               C31813 * C466 +
           (((C15009 - C15008 + C15011 - C15010) * C6079 +
             (C15013 - C15012 + C15015 - C15014) * C31752) *
                C32169 +
            ((C16776 - C16775 + C16778 - C16777) * C6079 +
             (C16780 - C16779 + C16782 - C16781) * C31752) *
                C32166 +
            ((C16784 - C16783 + C16786 - C16785) * C6079 +
             (C16788 - C16787 + C16790 - C16789) * C31752) *
                C32157 +
            ((C14625 * C2535 - C14631 * C2531 + C31899 * C7170 -
              C14632 * C7169) *
                 C6079 +
             (C14625 * C2540 - C14631 * C2536 + C31899 * C7172 -
              C14632 * C7171) *
                 C31752) *
                C32142) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
              C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
                 C6079 +
             (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
              C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
                 C31752) *
                C20324 +
            ((C26810 - C26811 + C26812 - C26813 + C26814 - C26815 + C26816 -
              C26817) *
                 C6079 +
             (C26818 - C26819 + C26820 - C26821 + C26822 - C26823 + C26824 -
              C26825) *
                 C31752) *
                C31941) *
               C572 +
           (((C26811 - C26810 + C26813 - C26812 + C26815 - C26814 + C26817 -
              C26816) *
                 C6079 +
             (C26819 - C26818 + C26821 - C26820 + C26823 - C26822 + C26825 -
              C26824) *
                 C31752) *
                C20324 +
            ((C26826 - C26827 + C26828 - C26829 + C26830 - C26831 + C26832 -
              C26833) *
                 C6079 +
             (C26834 - C26835 + C26836 - C26837 + C26838 - C26839 + C26840 -
              C26841) *
                 C31752) *
                C31941) *
               C573) *
              C466 +
          ((((C15419 * C239 - C32168 * C249 + C15420 * C244 - C32164 * C259 +
              C15421 * C974 - C32154 * C980 + C15422 * C977 - C32136 * C986) *
                 C6079 +
             (C15419 * C250 - C32168 * C269 + C15420 * C260 - C32164 * C274 +
              C15421 * C981 - C32154 * C992 + C15422 * C987 - C32136 * C995) *
                 C31752) *
                C20324 +
            ((C27232 - C27233 + C27234 - C27235 + C27236 - C27237 + C27238 -
              C27239) *
                 C6079 +
             (C27240 - C27241 + C27242 - C27243 + C27244 - C27245 + C27246 -
              C27247) *
                 C31752) *
                C31941) *
               C572 +
           (((C27233 - C27232 + C27235 - C27234 + C27237 - C27236 + C27239 -
              C27238) *
                 C6079 +
             (C27241 - C27240 + C27243 - C27242 + C27245 - C27244 + C27247 -
              C27246) *
                 C31752) *
                C20324 +
            ((C32168 * C1123 - C15419 * C1111 + C32164 * C1124 -
              C15420 * C1112 + C32154 * C6217 - C15421 * C6213 +
              C32136 * C6218 - C15422 * C6214) *
                 C6079 +
             (C32168 * C1138 - C15419 * C1125 + C32164 * C1139 -
              C15420 * C1126 + C32154 * C6222 - C15421 * C6219 +
              C32136 * C6223 - C15422 * C6220) *
                 C31752) *
                C31941) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                 C5251 +
             (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                 C32158 +
             (C14638 - C14639 + C14640 - C14641) * C5252 +
             (C14642 - C14643 + C14644 - C14645) * C32145 + C14678 * C5253 +
             C14679 * C32115) *
                C20324 +
            ((C16530 - C16531 + C16532 - C16533) * C5251 +
             (C16534 - C16535 + C16536 - C16537) * C32158 + C16997 * C5252 +
             C16998 * C32145 + C18237 * C5253 + C18238 * C32115) *
                C31941) *
               C572 +
           (((C16531 - C16530 + C16533 - C16532) * C5251 +
             (C16535 - C16534 + C16537 - C16536) * C32158 + C16999 * C5252 +
             C17000 * C32145 + C18931 * C5253 + C18932 * C32115) *
                C20324 +
            ((C16539 - C16538 + C16541 - C16540) * C5251 +
             (C16543 - C16542 + C16545 - C16544) * C32158 + C17001 * C5252 +
             C17002 * C32145 + (C16230 - C16231 + C16232 - C16233) * C5253 +
             (C16234 - C16235 + C16236 - C16237) * C32115) *
                C31941) *
               C573) *
              C466 +
          ((((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                 C5251 +
             (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                 C32158 +
             (C15008 - C15009 + C15010 - C15011) * C5252 +
             (C15012 - C15013 + C15014 - C15015) * C32145 +
             (C15016 - C15017 + C15018 - C15019) * C5253 +
             (C15020 - C15021 + C15022 - C15023) * C32115) *
                C20324 +
            ((C17197 - C17198 + C17199 - C17200) * C5251 +
             (C17201 - C17202 + C17203 - C17204) * C32158 +
             (C16775 - C16776 + C16777 - C16778) * C5252 +
             (C16779 - C16780 + C16781 - C16782) * C32145 +
             (C18725 - C18726 + C18727 - C18728) * C5253 +
             (C18729 - C18730 + C18731 - C18732) * C32115) *
                C31941) *
               C572 +
           (((C17198 - C17197 + C17200 - C17199) * C5251 +
             (C17202 - C17201 + C17204 - C17203) * C32158 +
             (C16776 - C16775 + C16778 - C16777) * C5252 +
             (C16780 - C16779 + C16782 - C16781) * C32145 +
             (C18726 - C18725 + C18728 - C18727) * C5253 +
             (C18730 - C18729 + C18732 - C18731) * C32115) *
                C20324 +
            ((C17206 - C17205 + C17208 - C17207) * C5251 +
             (C17210 - C17209 + C17212 - C17211) * C32158 +
             (C16784 - C16783 + C16786 - C16785) * C5252 +
             (C16788 - C16787 + C16790 - C16789) * C32145 +
             (C14625 * C1131 - C14631 * C1115 + C31899 * C1132 -
              C14632 * C1116) *
                 C5253 +
             (C14625 * C1142 - C14631 * C1133 + C31899 * C1143 -
              C14632 * C1134) *
                 C32115) *
                C31941) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                 C6079 +
             (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                 C31752) *
                C32169 +
            ((C16530 - C16531 + C16532 - C16533) * C6079 +
             (C16534 - C16535 + C16536 - C16537) * C31752) *
                C32166 +
            C27556 * C32157 + C27561 * C32142) *
               C572 +
           (((C16531 - C16530 + C16533 - C16532) * C6079 +
             (C16535 - C16534 + C16537 - C16536) * C31752) *
                C32169 +
            ((C16539 - C16538 + C16541 - C16540) * C6079 +
             (C16543 - C16542 + C16545 - C16544) * C31752) *
                C32166 +
            ((C16550 - C16551 + C16552 - C16553) * C6079 +
             (C16554 - C16555 + C16556 - C16557) * C31752) *
                C32157 +
            ((C27548 - C27549 + C27550 - C27551) * C6079 +
             (C27552 - C27553 + C27554 - C27555) * C31752) *
                C32142) *
               C573) *
              C466 +
          ((((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                 C6079 +
             (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                 C31752) *
                C32169 +
            ((C17197 - C17198 + C17199 - C17200) * C6079 +
             (C17201 - C17202 + C17203 - C17204) * C31752) *
                C32166 +
            ((C17205 - C17206 + C17207 - C17208) * C6079 +
             (C17209 - C17210 + C17211 - C17212) * C31752) *
                C32157 +
            ((C27952 - C27953 + C27954 - C27955) * C6079 +
             (C27956 - C27957 + C27958 - C27959) * C31752) *
                C32142) *
               C572 +
           (((C17198 - C17197 + C17200 - C17199) * C6079 +
             (C17202 - C17201 + C17204 - C17203) * C31752) *
                C32169 +
            ((C17206 - C17205 + C17208 - C17207) * C6079 +
             (C17210 - C17209 + C17212 - C17211) * C31752) *
                C32166 +
            ((C27953 - C27952 + C27955 - C27954) * C6079 +
             (C27957 - C27956 + C27959 - C27958) * C31752) *
                C32157 +
            ((C14625 * C6817 - C14631 * C6813 + C31899 * C6818 -
              C14632 * C6814) *
                 C6079 +
             (C14625 * C6822 - C14631 * C6819 + C31899 * C6823 -
              C14632 * C6820) *
                 C31752) *
                C32142) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C14625 * C126 - C14631 * C119 + C31899 * C249 -
                 C14632 * C239) *
                    C5251 +
                (C14625 * C140 - C14631 * C127 + C31899 * C269 -
                 C14632 * C250) *
                    C32158 +
                (C14638 - C14639 + C14640 - C14641) * C5252 +
                (C14642 - C14643 + C14644 - C14645) * C32145 + C14678 * C5253 +
                C14679 * C32115) *
                   C20324 +
               ((C16530 - C16531 + C16532 - C16533) * C5251 +
                (C16534 - C16535 + C16536 - C16537) * C32158 + C16997 * C5252 +
                C16998 * C32145 + C18237 * C5253 + C18238 * C32115) *
                   C31941) *
                  C31813 * C31799 * C110 +
              (((C14639 - C14638 + C14641 - C14640) * C5251 +
                (C14643 - C14642 + C14645 - C14644) * C32158 +
                (C14647 - C14646 + C14649 - C14648) * C5252 +
                (C14651 - C14650 + C14653 - C14652) * C32145 +
                (C14655 - C14654 + C14657 - C14656) * C5253 +
                (C14659 - C14658 + C14661 - C14660) * C32115) *
                   C20324 +
               (C16999 * C5251 + C17000 * C32158 + C18931 * C5252 +
                C18932 * C32145 + (C15178 - C15179 + C15180 - C15181) * C5253 +
                (C15182 - C15183 + C15184 - C15185) * C32115) *
                   C31941) *
                  C31813 * C31799 * C111 +
              ((C14678 * C5251 + C14679 * C32158 + C14680 * C5252 +
                C14681 * C32145 + (C14663 - C14662 + C14665 - C14664) * C5253 +
                (C14667 - C14666 + C14669 - C14668) * C32115) *
                   C20324 +
               (C18237 * C5251 + C18238 * C32158 +
                (C15179 - C15178 + C15181 - C15180) * C5252 +
                (C15183 - C15182 + C15185 - C15184) * C32145 +
                (C14625 * C362 - C14631 * C348 + C31899 * C689 -
                 C14632 * C680) *
                    C5253 +
                (C14625 * C378 - C14631 * C363 + C31899 * C695 -
                 C14632 * C690) *
                    C32115) *
                   C31941) *
                  C31813 * C31799 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C14625 * C126 - C14631 * C119 + C31899 * C249 -
                 C14632 * C239) *
                    C5251 +
                (C14625 * C140 - C14631 * C127 + C31899 * C269 -
                 C14632 * C250) *
                    C32158 +
                (C14638 - C14639 + C14640 - C14641) * C5252 +
                (C14642 - C14643 + C14644 - C14645) * C32145 + C14678 * C5253 +
                C14679 * C32115) *
                   C20324 +
               ((C16530 - C16531 + C16532 - C16533) * C5251 +
                (C16534 - C16535 + C16536 - C16537) * C32158 + C16997 * C5252 +
                C16998 * C32145 + C18237 * C5253 + C18238 * C32115) *
                   C31941) *
                  C31813 * C235 +
              (((C14631 * C239 - C14625 * C249 + C14632 * C244 -
                 C31899 * C259) *
                    C5251 +
                (C14631 * C250 - C14625 * C269 + C14632 * C260 -
                 C31899 * C274) *
                    C32158 +
                (C15008 - C15009 + C15010 - C15011) * C5252 +
                (C15012 - C15013 + C15014 - C15015) * C32145 +
                (C15016 - C15017 + C15018 - C15019) * C5253 +
                (C15020 - C15021 + C15022 - C15023) * C32115) *
                   C20324 +
               ((C17197 - C17198 + C17199 - C17200) * C5251 +
                (C17201 - C17202 + C17203 - C17204) * C32158 +
                (C16775 - C16776 + C16777 - C16778) * C5252 +
                (C16779 - C16780 + C16781 - C16782) * C32145 +
                (C18725 - C18726 + C18727 - C18728) * C5253 +
                (C18729 - C18730 + C18731 - C18732) * C32115) *
                   C31941) *
                  C31813 * C236 +
              (((C14625 * C259 - C14631 * C244 + C31899 * C980 -
                 C14632 * C974) *
                    C5251 +
                (C14625 * C274 - C14631 * C260 + C31899 * C992 -
                 C14632 * C981) *
                    C32158 +
                (C14625 * C261 - C14631 * C245 + C31899 * C982 -
                 C14632 * C975) *
                    C5252 +
                (C14625 * C275 - C14631 * C262 + C31899 * C993 -
                 C14632 * C983) *
                    C32145 +
                (C14625 * C263 - C14631 * C246 + C31899 * C984 -
                 C14632 * C976) *
                    C5253 +
                (C14625 * C276 - C14631 * C264 + C31899 * C994 -
                 C14632 * C985) *
                    C32115) *
                   C20324 +
               ((C14625 * C1117 - C14631 * C1108 + C31899 * C1641 -
                 C14632 * C1638) *
                    C5251 +
                (C14625 * C1135 - C14631 * C1118 + C31899 * C1647 -
                 C14632 * C1642) *
                    C32158 +
                (C14625 * C1119 - C14631 * C1109 + C31899 * C1643 -
                 C14632 * C1639) *
                    C5252 +
                (C14625 * C1136 - C14631 * C1120 + C31899 * C1648 -
                 C14632 * C1644) *
                    C32145 +
                (C14625 * C1121 - C14631 * C1110 + C31899 * C1645 -
                 C14632 * C1640) *
                    C5253 +
                (C14625 * C1137 - C14631 * C1122 + C31899 * C1649 -
                 C14632 * C1646) *
                    C32115) *
                   C31941) *
                  C31813 * C237) *
             C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C5251 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C32158 +
            (C14638 - C14639 + C14640 - C14641) * C5252 +
            (C14642 - C14643 + C14644 - C14645) * C32145 + C14678 * C5253 +
            C14679 * C32115) *
               C20324 +
           ((C16530 - C16531 + C16532 - C16533) * C5251 +
            (C16534 - C16535 + C16536 - C16537) * C32158 + C16997 * C5252 +
            C16998 * C32145 + C18237 * C5253 + C18238 * C32115) *
               C31941) *
              C341 +
          (((C16531 - C16530 + C16533 - C16532) * C5251 +
            (C16535 - C16534 + C16537 - C16536) * C32158 + C16999 * C5252 +
            C17000 * C32145 + C18931 * C5253 + C18932 * C32115) *
               C20324 +
           ((C16539 - C16538 + C16541 - C16540) * C5251 +
            (C16543 - C16542 + C16545 - C16544) * C32158 + C17001 * C5252 +
            C17002 * C32145 + (C16230 - C16231 + C16232 - C16233) * C5253 +
            (C16234 - C16235 + C16236 - C16237) * C32115) *
               C31941) *
              C342 +
          ((C16572 * C5251 + C16573 * C32158 + C16570 * C5252 +
            C16571 * C32145 + (C16231 - C16230 + C16233 - C16232) * C5253 +
            (C16235 - C16234 + C16237 - C16236) * C32115) *
               C20324 +
           ((C16551 - C16550 + C16553 - C16552) * C5251 +
            (C16555 - C16554 + C16557 - C16556) * C32158 +
            (C16559 - C16558 + C16561 - C16560) * C5252 +
            (C16563 - C16562 + C16565 - C16564) * C32145 +
            (C14625 * C2009 - C14631 * C2001 + C31899 * C2537 -
             C14632 * C2532) *
                C5253 +
            (C14625 * C2019 - C14631 * C2010 + C31899 * C2541 -
             C14632 * C2538) *
                C32115) *
               C31941) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
             C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
                C6079 +
            (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
             C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
                C31752) *
               C20324 +
           ((C32168 * C354 - C15419 * C344 + C32164 * C681 - C15420 * C676 +
             C32154 * C1117 - C15421 * C1108 + C32136 * C1641 -
             C15422 * C1638) *
                C6079 +
            (C32168 * C374 - C15419 * C355 + C32164 * C691 - C15420 * C682 +
             C32154 * C1135 - C15421 * C1118 + C32136 * C1647 -
             C15422 * C1642) *
                C31752) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
             C15432) *
                C6079 +
            (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
             C15440) *
                C31752) *
               C20324 +
           ((C15930 - C15931 + C15932 - C15933 + C15934 - C15935 + C15936 -
             C15937) *
                C6079 +
            (C15938 - C15939 + C15940 - C15941 + C15942 - C15943 + C15944 -
             C15945) *
                C31752) *
               C31941) *
              C31813 * C31799 * C111 +
          (((C15443 - C15442 + C15445 - C15444 + C15447 - C15446 + C15449 -
             C15448) *
                C6079 +
            (C15451 - C15450 + C15453 - C15452 + C15455 - C15454 + C15457 -
             C15456) *
                C31752) *
               C20324 +
           ((C32168 * C358 - C15419 * C346 + C32164 * C685 - C15420 * C678 +
             C32154 * C1121 - C15421 * C1110 + C32136 * C1645 -
             C15422 * C1640) *
                C6079 +
            (C32168 * C376 - C15419 * C359 + C32164 * C693 - C15420 * C686 +
             C32154 * C1137 - C15421 * C1122 + C32136 * C1649 -
             C15422 * C1646) *
                C31752) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
             C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
                C6079 +
            (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
             C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
                C31752) *
               C20324 +
           ((C32168 * C354 - C15419 * C344 + C32164 * C681 - C15420 * C676 +
             C32154 * C1117 - C15421 * C1108 + C32136 * C1641 -
             C15422 * C1638) *
                C6079 +
            (C32168 * C374 - C15419 * C355 + C32164 * C691 - C15420 * C682 +
             C32154 * C1135 - C15421 * C1118 + C32136 * C1647 -
             C15422 * C1642) *
                C31752) *
               C31941) *
              C31813 * C235 +
          (((C15419 * C239 - C32168 * C249 + C15420 * C244 - C32164 * C259 +
             C15421 * C974 - C32154 * C980 + C15422 * C977 - C32136 * C986) *
                C6079 +
            (C15419 * C250 - C32168 * C269 + C15420 * C260 - C32164 * C274 +
             C15421 * C981 - C32154 * C992 + C15422 * C987 - C32136 * C995) *
                C31752) *
               C20324 +
           ((C15419 * C676 - C32168 * C681 + C15420 * C1108 - C32164 * C1117 +
             C15421 * C1638 - C32154 * C1641 + C15422 * C6212 -
             C32136 * C6215) *
                C6079 +
            (C15419 * C682 - C32168 * C691 + C15420 * C1118 - C32164 * C1135 +
             C15421 * C1642 - C32154 * C1647 + C15422 * C6216 -
             C32136 * C6221) *
                C31752) *
               C31941) *
              C31813 * C236 +
          (((C32168 * C259 - C15419 * C244 + C32164 * C980 - C15420 * C974 +
             C32154 * C986 - C15421 * C977 + C32136 * C6144 - C15422 * C6142) *
                C6079 +
            (C32168 * C274 - C15419 * C260 + C32164 * C992 - C15420 * C981 +
             C32154 * C995 - C15421 * C987 + C32136 * C6148 - C15422 * C6145) *
                C31752) *
               C20324 +
           ((C32168 * C1117 - C15419 * C1108 + C32164 * C1641 - C15420 * C1638 +
             C32154 * C6215 - C15421 * C6212 + C32136 * C6479 -
             C15422 * C6478) *
                C6079 +
            (C32168 * C1135 - C15419 * C1118 + C32164 * C1647 - C15420 * C1642 +
             C32154 * C6221 - C15421 * C6216 + C32136 * C6481 -
             C15422 * C6480) *
                C31752) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
             C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
                C6079 +
            (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
             C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
                C31752) *
               C20324 +
           ((C26810 - C26811 + C26812 - C26813 + C26814 - C26815 + C26816 -
             C26817) *
                C6079 +
            (C26818 - C26819 + C26820 - C26821 + C26822 - C26823 + C26824 -
             C26825) *
                C31752) *
               C31941) *
              C341 +
          (((C26811 - C26810 + C26813 - C26812 + C26815 - C26814 + C26817 -
             C26816) *
                C6079 +
            (C26819 - C26818 + C26821 - C26820 + C26823 - C26822 + C26825 -
             C26824) *
                C31752) *
               C20324 +
           ((C26826 - C26827 + C26828 - C26829 + C26830 - C26831 + C26832 -
             C26833) *
                C6079 +
            (C26834 - C26835 + C26836 - C26837 + C26838 - C26839 + C26840 -
             C26841) *
                C31752) *
               C31941) *
              C342 +
          (((C26827 - C26826 + C26829 - C26828 + C26831 - C26830 + C26833 -
             C26832) *
                C6079 +
            (C26835 - C26834 + C26837 - C26836 + C26839 - C26838 + C26841 -
             C26840) *
                C31752) *
               C20324 +
           ((C32168 * C2005 - C15419 * C1999 + C32164 * C2533 - C15420 * C2530 +
             C32154 * C6815 - C15421 * C6812 + C32136 * C7332 -
             C15422 * C7331) *
                C6079 +
            (C32168 * C2017 - C15419 * C2006 + C32164 * C2539 - C15420 * C2534 +
             C32154 * C6821 - C15421 * C6816 + C32136 * C7334 -
             C15422 * C7333) *
                C31752) *
               C31941) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C6079 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C31752) *
               C32169 +
           ((C16530 - C16531 + C16532 - C16533) * C6079 +
            (C16534 - C16535 + C16536 - C16537) * C31752) *
               C32166 +
           (C16572 * C6079 + C16573 * C31752) * C32157 +
           ((C16551 - C16550 + C16553 - C16552) * C6079 +
            (C16555 - C16554 + C16557 - C16556) * C31752) *
               C32142) *
              C31813 * C31799 * C110 +
          (((C14639 - C14638 + C14641 - C14640) * C6079 +
            (C14643 - C14642 + C14645 - C14644) * C31752) *
               C32169 +
           (C16999 * C6079 + C17000 * C31752) * C32166 +
           (C17001 * C6079 + C17002 * C31752) * C32157 +
           ((C16558 - C16559 + C16560 - C16561) * C6079 +
            (C16562 - C16563 + C16564 - C16565) * C31752) *
               C32142) *
              C31813 * C31799 * C111 +
          ((C14678 * C6079 + C14679 * C31752) * C32169 +
           (C18237 * C6079 + C18238 * C31752) * C32166 +
           ((C16231 - C16230 + C16233 - C16232) * C6079 +
            (C16235 - C16234 + C16237 - C16236) * C31752) *
               C32157 +
           ((C14625 * C2009 - C14631 * C2001 + C31899 * C2537 -
             C14632 * C2532) *
                C6079 +
            (C14625 * C2019 - C14631 * C2010 + C31899 * C2541 -
             C14632 * C2538) *
                C31752) *
               C32142) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C6079 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C31752) *
               C32169 +
           ((C16530 - C16531 + C16532 - C16533) * C6079 +
            (C16534 - C16535 + C16536 - C16537) * C31752) *
               C32166 +
           (C16572 * C6079 + C16573 * C31752) * C32157 +
           ((C16551 - C16550 + C16553 - C16552) * C6079 +
            (C16555 - C16554 + C16557 - C16556) * C31752) *
               C32142) *
              C31813 * C235 +
          (((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                C6079 +
            (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                C31752) *
               C32169 +
           ((C17197 - C17198 + C17199 - C17200) * C6079 +
            (C17201 - C17202 + C17203 - C17204) * C31752) *
               C32166 +
           ((C17205 - C17206 + C17207 - C17208) * C6079 +
            (C17209 - C17210 + C17211 - C17212) * C31752) *
               C32157 +
           ((C14631 * C2530 - C14625 * C2533 + C14632 * C6812 -
             C31899 * C6815) *
                C6079 +
            (C14631 * C2534 - C14625 * C2539 + C14632 * C6816 -
             C31899 * C6821) *
                C31752) *
               C32142) *
              C31813 * C236 +
          (((C14625 * C259 - C14631 * C244 + C31899 * C980 - C14632 * C974) *
                C6079 +
            (C14625 * C274 - C14631 * C260 + C31899 * C992 - C14632 * C981) *
                C31752) *
               C32169 +
           ((C14625 * C1117 - C14631 * C1108 + C31899 * C1641 -
             C14632 * C1638) *
                C6079 +
            (C14625 * C1135 - C14631 * C1118 + C31899 * C1647 -
             C14632 * C1642) *
                C31752) *
               C32166 +
           ((C14625 * C1124 - C14631 * C1112 + C31899 * C6217 -
             C14632 * C6213) *
                C6079 +
            (C14625 * C1139 - C14631 * C1126 + C31899 * C6222 -
             C14632 * C6219) *
                C31752) *
               C32157 +
           ((C14625 * C6815 - C14631 * C6812 + C31899 * C7332 -
             C14632 * C7331) *
                C6079 +
            (C14625 * C6821 - C14631 * C6816 + C31899 * C7334 -
             C14632 * C7333) *
                C31752) *
               C32142) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C6079 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C31752) *
               C32169 +
           ((C16530 - C16531 + C16532 - C16533) * C6079 +
            (C16534 - C16535 + C16536 - C16537) * C31752) *
               C32166 +
           C27556 * C32157 + C27561 * C32142) *
              C341 +
          (((C16531 - C16530 + C16533 - C16532) * C6079 +
            (C16535 - C16534 + C16537 - C16536) * C31752) *
               C32169 +
           ((C16539 - C16538 + C16541 - C16540) * C6079 +
            (C16543 - C16542 + C16545 - C16544) * C31752) *
               C32166 +
           ((C16550 - C16551 + C16552 - C16553) * C6079 +
            (C16554 - C16555 + C16556 - C16557) * C31752) *
               C32157 +
           ((C27548 - C27549 + C27550 - C27551) * C6079 +
            (C27552 - C27553 + C27554 - C27555) * C31752) *
               C32142) *
              C342 +
          (C27556 * C32169 + C27561 * C32166 +
           ((C27549 - C27548 + C27551 - C27550) * C6079 +
            (C27553 - C27552 + C27555 - C27554) * C31752) *
               C32157 +
           ((C14625 * C11731 - C14631 * C11729 + C31899 * C12017 -
             C14632 * C12016) *
                C6079 +
            (C14625 * C11735 - C14631 * C11732 + C31899 * C12019 -
             C14632 * C12018) *
                C31752) *
               C32142) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
              C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
                 C6079 +
             (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
              C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
                 C31752) *
                C20324 +
            ((C26810 - C26811 + C26812 - C26813 + C26814 - C26815 + C26816 -
              C26817) *
                 C6079 +
             (C26818 - C26819 + C26820 - C26821 + C26822 - C26823 + C26824 -
              C26825) *
                 C31752) *
                C31941) *
               C572 +
           (((C26811 - C26810 + C26813 - C26812 + C26815 - C26814 + C26817 -
              C26816) *
                 C6079 +
             (C26819 - C26818 + C26821 - C26820 + C26823 - C26822 + C26825 -
              C26824) *
                 C31752) *
                C20324 +
            ((C26826 - C26827 + C26828 - C26829 + C26830 - C26831 + C26832 -
              C26833) *
                 C6079 +
             (C26834 - C26835 + C26836 - C26837 + C26838 - C26839 + C26840 -
              C26841) *
                 C31752) *
                C31941) *
               C573) *
              C31799 * C468 +
          ((((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
              C15432) *
                 C6079 +
             (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
              C15440) *
                 C31752) *
                C20324 +
            ((C15930 - C15931 + C15932 - C15933 + C15934 - C15935 + C15936 -
              C15937) *
                 C6079 +
             (C15938 - C15939 + C15940 - C15941 + C15942 - C15943 + C15944 -
              C15945) *
                 C31752) *
                C31941) *
               C572 +
           (((C15931 - C15930 + C15933 - C15932 + C15935 - C15934 + C15937 -
              C15936) *
                 C6079 +
             (C15939 - C15938 + C15941 - C15940 + C15943 - C15942 + C15945 -
              C15944) *
                 C31752) *
                C20324 +
            ((C32168 * C366 - C15419 * C350 + C32164 * C1127 - C15420 * C1113 +
              C32154 * C1128 - C15421 * C1114 + C32136 * C7020 -
              C15422 * C7019) *
                 C6079 +
             (C32168 * C380 - C15419 * C367 + C32164 * C1140 - C15420 * C1129 +
              C32154 * C1141 - C15421 * C1130 + C32136 * C7022 -
              C15422 * C7021) *
                 C31752) *
                C31941) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                 C5251 +
             (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                 C32158 +
             (C14638 - C14639 + C14640 - C14641) * C5252 +
             (C14642 - C14643 + C14644 - C14645) * C32145 + C14678 * C5253 +
             C14679 * C32115) *
                C20324 +
            ((C16530 - C16531 + C16532 - C16533) * C5251 +
             (C16534 - C16535 + C16536 - C16537) * C32158 + C16997 * C5252 +
             C16998 * C32145 + C18237 * C5253 + C18238 * C32115) *
                C31941) *
               C572 +
           (((C16531 - C16530 + C16533 - C16532) * C5251 +
             (C16535 - C16534 + C16537 - C16536) * C32158 + C16999 * C5252 +
             C17000 * C32145 + C18931 * C5253 + C18932 * C32115) *
                C20324 +
            ((C16539 - C16538 + C16541 - C16540) * C5251 +
             (C16543 - C16542 + C16545 - C16544) * C32158 + C17001 * C5252 +
             C17002 * C32145 + (C16230 - C16231 + C16232 - C16233) * C5253 +
             (C16234 - C16235 + C16236 - C16237) * C32115) *
                C31941) *
               C573) *
              C31799 * C468 +
          ((((C14639 - C14638 + C14641 - C14640) * C5251 +
             (C14643 - C14642 + C14645 - C14644) * C32158 +
             (C14647 - C14646 + C14649 - C14648) * C5252 +
             (C14651 - C14650 + C14653 - C14652) * C32145 +
             (C14655 - C14654 + C14657 - C14656) * C5253 +
             (C14659 - C14658 + C14661 - C14660) * C32115) *
                C20324 +
            (C16999 * C5251 + C17000 * C32158 + C18931 * C5252 +
             C18932 * C32145 + (C15178 - C15179 + C15180 - C15181) * C5253 +
             (C15182 - C15183 + C15184 - C15185) * C32115) *
                C31941) *
               C572 +
           ((C16997 * C5251 + C16998 * C32158 + C18237 * C5252 +
             C18238 * C32145 + (C15179 - C15178 + C15181 - C15180) * C5253 +
             (C15183 - C15182 + C15185 - C15184) * C32115) *
                C20324 +
            (C16570 * C5251 + C16571 * C32158 +
             (C16231 - C16230 + C16233 - C16232) * C5252 +
             (C16235 - C16234 + C16237 - C16236) * C32145 +
             (C14625 * C370 - C14631 * C352 + C31899 * C2205 - C14632 * C2204) *
                 C5253 +
             (C14625 * C382 - C14631 * C371 + C31899 * C2207 - C14632 * C2206) *
                 C32115) *
                C31941) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                 C6079 +
             (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                 C31752) *
                C32169 +
            ((C16530 - C16531 + C16532 - C16533) * C6079 +
             (C16534 - C16535 + C16536 - C16537) * C31752) *
                C32166 +
            C27556 * C32157 + C27561 * C32142) *
               C572 +
           (((C16531 - C16530 + C16533 - C16532) * C6079 +
             (C16535 - C16534 + C16537 - C16536) * C31752) *
                C32169 +
            ((C16539 - C16538 + C16541 - C16540) * C6079 +
             (C16543 - C16542 + C16545 - C16544) * C31752) *
                C32166 +
            ((C16550 - C16551 + C16552 - C16553) * C6079 +
             (C16554 - C16555 + C16556 - C16557) * C31752) *
                C32157 +
            ((C27548 - C27549 + C27550 - C27551) * C6079 +
             (C27552 - C27553 + C27554 - C27555) * C31752) *
                C32142) *
               C573) *
              C31799 * C468 +
          ((((C14639 - C14638 + C14641 - C14640) * C6079 +
             (C14643 - C14642 + C14645 - C14644) * C31752) *
                C32169 +
            (C16999 * C6079 + C17000 * C31752) * C32166 +
            (C17001 * C6079 + C17002 * C31752) * C32157 +
            ((C16558 - C16559 + C16560 - C16561) * C6079 +
             (C16562 - C16563 + C16564 - C16565) * C31752) *
                C32142) *
               C572 +
           ((C16997 * C6079 + C16998 * C31752) * C32169 +
            (C16570 * C6079 + C16571 * C31752) * C32166 +
            ((C16559 - C16558 + C16561 - C16560) * C6079 +
             (C16563 - C16562 + C16565 - C16564) * C31752) *
                C32157 +
            ((C14625 * C2013 - C14631 * C2003 + C31899 * C11841 -
              C14632 * C11840) *
                 C6079 +
             (C14625 * C2021 - C14631 * C2014 + C31899 * C11843 -
              C14632 * C11842) *
                 C31752) *
                C32142) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C5251 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C32158 +
            (C14638 - C14639 + C14640 - C14641) * C5252 +
            (C14642 - C14643 + C14644 - C14645) * C32145 + C14678 * C5253 +
            C14679 * C32115) *
               C20324 +
           ((C16530 - C16531 + C16532 - C16533) * C5251 +
            (C16534 - C16535 + C16536 - C16537) * C32158 + C16997 * C5252 +
            C16998 * C32145 + C18237 * C5253 + C18238 * C32115) *
               C31941) *
              C31813 * C235 +
          (((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                C5251 +
            (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                C32158 +
            (C15008 - C15009 + C15010 - C15011) * C5252 +
            (C15012 - C15013 + C15014 - C15015) * C32145 +
            (C15016 - C15017 + C15018 - C15019) * C5253 +
            (C15020 - C15021 + C15022 - C15023) * C32115) *
               C20324 +
           ((C17197 - C17198 + C17199 - C17200) * C5251 +
            (C17201 - C17202 + C17203 - C17204) * C32158 +
            (C16775 - C16776 + C16777 - C16778) * C5252 +
            (C16779 - C16780 + C16781 - C16782) * C32145 +
            (C18725 - C18726 + C18727 - C18728) * C5253 +
            (C18729 - C18730 + C18731 - C18732) * C32115) *
               C31941) *
              C31813 * C236 +
          (((C14625 * C259 - C14631 * C244 + C31899 * C980 - C14632 * C974) *
                C5251 +
            (C14625 * C274 - C14631 * C260 + C31899 * C992 - C14632 * C981) *
                C32158 +
            (C14625 * C261 - C14631 * C245 + C31899 * C982 - C14632 * C975) *
                C5252 +
            (C14625 * C275 - C14631 * C262 + C31899 * C993 - C14632 * C983) *
                C32145 +
            (C14625 * C263 - C14631 * C246 + C31899 * C984 - C14632 * C976) *
                C5253 +
            (C14625 * C276 - C14631 * C264 + C31899 * C994 - C14632 * C985) *
                C32115) *
               C20324 +
           ((C14625 * C1117 - C14631 * C1108 + C31899 * C1641 -
             C14632 * C1638) *
                C5251 +
            (C14625 * C1135 - C14631 * C1118 + C31899 * C1647 -
             C14632 * C1642) *
                C32158 +
            (C14625 * C1119 - C14631 * C1109 + C31899 * C1643 -
             C14632 * C1639) *
                C5252 +
            (C14625 * C1136 - C14631 * C1120 + C31899 * C1648 -
             C14632 * C1644) *
                C32145 +
            (C14625 * C1121 - C14631 * C1110 + C31899 * C1645 -
             C14632 * C1640) *
                C5253 +
            (C14625 * C1137 - C14631 * C1122 + C31899 * C1649 -
             C14632 * C1646) *
                C32115) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C5251 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C32158 +
            (C14638 - C14639 + C14640 - C14641) * C5252 +
            (C14642 - C14643 + C14644 - C14645) * C32145 + C14678 * C5253 +
            C14679 * C32115) *
               C20324 +
           ((C16530 - C16531 + C16532 - C16533) * C5251 +
            (C16534 - C16535 + C16536 - C16537) * C32158 + C16997 * C5252 +
            C16998 * C32145 + C18237 * C5253 + C18238 * C32115) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C14639 - C14638 + C14641 - C14640) * C5251 +
            (C14643 - C14642 + C14645 - C14644) * C32158 +
            (C14647 - C14646 + C14649 - C14648) * C5252 +
            (C14651 - C14650 + C14653 - C14652) * C32145 +
            (C14655 - C14654 + C14657 - C14656) * C5253 +
            (C14659 - C14658 + C14661 - C14660) * C32115) *
               C20324 +
           (C16999 * C5251 + C17000 * C32158 + C18931 * C5252 +
            C18932 * C32145 + (C15178 - C15179 + C15180 - C15181) * C5253 +
            (C15182 - C15183 + C15184 - C15185) * C32115) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C14678 * C5251 + C14679 * C32158 + C14680 * C5252 +
            C14681 * C32145 + (C14663 - C14662 + C14665 - C14664) * C5253 +
            (C14667 - C14666 + C14669 - C14668) * C32115) *
               C20324 +
           (C18237 * C5251 + C18238 * C32158 +
            (C15179 - C15178 + C15181 - C15180) * C5252 +
            (C15183 - C15182 + C15185 - C15184) * C32145 +
            (C14625 * C362 - C14631 * C348 + C31899 * C689 - C14632 * C680) *
                C5253 +
            (C14625 * C378 - C14631 * C363 + C31899 * C695 - C14632 * C690) *
                C32115) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
             C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
                C6079 +
            (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
             C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
                C31752) *
               C20324 +
           ((C32168 * C354 - C15419 * C344 + C32164 * C681 - C15420 * C676 +
             C32154 * C1117 - C15421 * C1108 + C32136 * C1641 -
             C15422 * C1638) *
                C6079 +
            (C32168 * C374 - C15419 * C355 + C32164 * C691 - C15420 * C682 +
             C32154 * C1135 - C15421 * C1118 + C32136 * C1647 -
             C15422 * C1642) *
                C31752) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
             C15432) *
                C6079 +
            (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
             C15440) *
                C31752) *
               C20324 +
           ((C15930 - C15931 + C15932 - C15933 + C15934 - C15935 + C15936 -
             C15937) *
                C6079 +
            (C15938 - C15939 + C15940 - C15941 + C15942 - C15943 + C15944 -
             C15945) *
                C31752) *
               C31941) *
              C31813 * C31799 * C111 +
          (((C15443 - C15442 + C15445 - C15444 + C15447 - C15446 + C15449 -
             C15448) *
                C6079 +
            (C15451 - C15450 + C15453 - C15452 + C15455 - C15454 + C15457 -
             C15456) *
                C31752) *
               C20324 +
           ((C32168 * C358 - C15419 * C346 + C32164 * C685 - C15420 * C678 +
             C32154 * C1121 - C15421 * C1110 + C32136 * C1645 -
             C15422 * C1640) *
                C6079 +
            (C32168 * C376 - C15419 * C359 + C32164 * C693 - C15420 * C686 +
             C32154 * C1137 - C15421 * C1122 + C32136 * C1649 -
             C15422 * C1646) *
                C31752) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
             C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
                C6079 +
            (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
             C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
                C31752) *
               C20324 +
           ((C32168 * C354 - C15419 * C344 + C32164 * C681 - C15420 * C676 +
             C32154 * C1117 - C15421 * C1108 + C32136 * C1641 -
             C15422 * C1638) *
                C6079 +
            (C32168 * C374 - C15419 * C355 + C32164 * C691 - C15420 * C682 +
             C32154 * C1135 - C15421 * C1118 + C32136 * C1647 -
             C15422 * C1642) *
                C31752) *
               C31941) *
              C31813 * C235 +
          (((C15419 * C239 - C32168 * C249 + C15420 * C244 - C32164 * C259 +
             C15421 * C974 - C32154 * C980 + C15422 * C977 - C32136 * C986) *
                C6079 +
            (C15419 * C250 - C32168 * C269 + C15420 * C260 - C32164 * C274 +
             C15421 * C981 - C32154 * C992 + C15422 * C987 - C32136 * C995) *
                C31752) *
               C20324 +
           ((C15419 * C676 - C32168 * C681 + C15420 * C1108 - C32164 * C1117 +
             C15421 * C1638 - C32154 * C1641 + C15422 * C6212 -
             C32136 * C6215) *
                C6079 +
            (C15419 * C682 - C32168 * C691 + C15420 * C1118 - C32164 * C1135 +
             C15421 * C1642 - C32154 * C1647 + C15422 * C6216 -
             C32136 * C6221) *
                C31752) *
               C31941) *
              C31813 * C236 +
          (((C32168 * C259 - C15419 * C244 + C32164 * C980 - C15420 * C974 +
             C32154 * C986 - C15421 * C977 + C32136 * C6144 - C15422 * C6142) *
                C6079 +
            (C32168 * C274 - C15419 * C260 + C32164 * C992 - C15420 * C981 +
             C32154 * C995 - C15421 * C987 + C32136 * C6148 - C15422 * C6145) *
                C31752) *
               C20324 +
           ((C32168 * C1117 - C15419 * C1108 + C32164 * C1641 - C15420 * C1638 +
             C32154 * C6215 - C15421 * C6212 + C32136 * C6479 -
             C15422 * C6478) *
                C6079 +
            (C32168 * C1135 - C15419 * C1118 + C32164 * C1647 - C15420 * C1642 +
             C32154 * C6221 - C15421 * C6216 + C32136 * C6481 -
             C15422 * C6480) *
                C31752) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C6079 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C31752) *
               C32169 +
           ((C16530 - C16531 + C16532 - C16533) * C6079 +
            (C16534 - C16535 + C16536 - C16537) * C31752) *
               C32166 +
           (C16572 * C6079 + C16573 * C31752) * C32157 +
           ((C16551 - C16550 + C16553 - C16552) * C6079 +
            (C16555 - C16554 + C16557 - C16556) * C31752) *
               C32142) *
              C31813 * C31799 * C110 +
          (((C14639 - C14638 + C14641 - C14640) * C6079 +
            (C14643 - C14642 + C14645 - C14644) * C31752) *
               C32169 +
           (C16999 * C6079 + C17000 * C31752) * C32166 +
           (C17001 * C6079 + C17002 * C31752) * C32157 +
           ((C16558 - C16559 + C16560 - C16561) * C6079 +
            (C16562 - C16563 + C16564 - C16565) * C31752) *
               C32142) *
              C31813 * C31799 * C111 +
          ((C14678 * C6079 + C14679 * C31752) * C32169 +
           (C18237 * C6079 + C18238 * C31752) * C32166 +
           ((C16231 - C16230 + C16233 - C16232) * C6079 +
            (C16235 - C16234 + C16237 - C16236) * C31752) *
               C32157 +
           ((C14625 * C2009 - C14631 * C2001 + C31899 * C2537 -
             C14632 * C2532) *
                C6079 +
            (C14625 * C2019 - C14631 * C2010 + C31899 * C2541 -
             C14632 * C2538) *
                C31752) *
               C32142) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C6079 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C31752) *
               C32169 +
           ((C16530 - C16531 + C16532 - C16533) * C6079 +
            (C16534 - C16535 + C16536 - C16537) * C31752) *
               C32166 +
           (C16572 * C6079 + C16573 * C31752) * C32157 +
           ((C16551 - C16550 + C16553 - C16552) * C6079 +
            (C16555 - C16554 + C16557 - C16556) * C31752) *
               C32142) *
              C31813 * C235 +
          (((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                C6079 +
            (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                C31752) *
               C32169 +
           ((C17197 - C17198 + C17199 - C17200) * C6079 +
            (C17201 - C17202 + C17203 - C17204) * C31752) *
               C32166 +
           ((C17205 - C17206 + C17207 - C17208) * C6079 +
            (C17209 - C17210 + C17211 - C17212) * C31752) *
               C32157 +
           ((C14631 * C2530 - C14625 * C2533 + C14632 * C6812 -
             C31899 * C6815) *
                C6079 +
            (C14631 * C2534 - C14625 * C2539 + C14632 * C6816 -
             C31899 * C6821) *
                C31752) *
               C32142) *
              C31813 * C236 +
          (((C14625 * C259 - C14631 * C244 + C31899 * C980 - C14632 * C974) *
                C6079 +
            (C14625 * C274 - C14631 * C260 + C31899 * C992 - C14632 * C981) *
                C31752) *
               C32169 +
           ((C14625 * C1117 - C14631 * C1108 + C31899 * C1641 -
             C14632 * C1638) *
                C6079 +
            (C14625 * C1135 - C14631 * C1118 + C31899 * C1647 -
             C14632 * C1642) *
                C31752) *
               C32166 +
           ((C14625 * C1124 - C14631 * C1112 + C31899 * C6217 -
             C14632 * C6213) *
                C6079 +
            (C14625 * C1139 - C14631 * C1126 + C31899 * C6222 -
             C14632 * C6219) *
                C31752) *
               C32157 +
           ((C14625 * C6815 - C14631 * C6812 + C31899 * C7332 -
             C14632 * C7331) *
                C6079 +
            (C14625 * C6821 - C14631 * C6816 + C31899 * C7334 -
             C14632 * C7333) *
                C31752) *
               C32142) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                 C30875 +
             (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                 C32076 +
             (C14638 - C14639 + C14640 - C14641) * C30856 +
             (C14642 - C14643 + C14644 - C14645) * C31762) *
                C31937 +
            ((C16530 - C16531 + C16532 - C16533) * C30875 +
             (C16534 - C16535 + C16536 - C16537) * C32076 + C16997 * C30856 +
             C16998 * C31762) *
                C31944 +
            C29424 * C23798) *
               C31813 * C466 +
           (((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                 C30875 +
             (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                 C32076 +
             (C15008 - C15009 + C15010 - C15011) * C30856 +
             (C15012 - C15013 + C15014 - C15015) * C31762) *
                C31937 +
            ((C17197 - C17198 + C17199 - C17200) * C30875 +
             (C17201 - C17202 + C17203 - C17204) * C32076 +
             (C16775 - C16776 + C16777 - C16778) * C30856 +
             (C16779 - C16780 + C16781 - C16782) * C31762) *
                C31944 +
            ((C17205 - C17206 + C17207 - C17208) * C30875 +
             (C17209 - C17210 + C17211 - C17212) * C32076 +
             (C16783 - C16784 + C16785 - C16786) * C30856 +
             (C16787 - C16788 + C16789 - C16790) * C31762) *
                C23798) *
               C31813 * C467) *
              C468 +
          ((((C14639 - C14638 + C14641 - C14640) * C30875 +
             (C14643 - C14642 + C14645 - C14644) * C32076 +
             (C14647 - C14646 + C14649 - C14648) * C30856 +
             (C14651 - C14650 + C14653 - C14652) * C31762) *
                C31937 +
            (C16999 * C30875 + C17000 * C32076 + C18931 * C30856 +
             C18932 * C31762) *
                C31944 +
            (C17001 * C30875 + C17002 * C32076 +
             (C16230 - C16231 + C16232 - C16233) * C30856 +
             (C16234 - C16235 + C16236 - C16237) * C31762) *
                C23798) *
               C31813 * C466 +
           (((C15009 - C15008 + C15011 - C15010) * C30875 +
             (C15013 - C15012 + C15015 - C15014) * C32076 +
             (C15017 - C15016 + C15019 - C15018) * C30856 +
             (C15021 - C15020 + C15023 - C15022) * C31762) *
                C31937 +
            ((C16776 - C16775 + C16778 - C16777) * C30875 +
             (C16780 - C16779 + C16782 - C16781) * C32076 +
             (C18726 - C18725 + C18728 - C18727) * C30856 +
             (C18730 - C18729 + C18732 - C18731) * C31762) *
                C31944 +
            ((C16784 - C16783 + C16786 - C16785) * C30875 +
             (C16788 - C16787 + C16790 - C16789) * C32076 +
             (C14625 * C1131 - C14631 * C1115 + C31899 * C1132 -
              C14632 * C1116) *
                 C30856 +
             (C14625 * C1142 - C14631 * C1133 + C31899 * C1143 -
              C14632 * C1134) *
                 C31762) *
                C23798) *
               C31813 * C467) *
              C469)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                 C30875 +
             (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                 C32076 +
             (C14638 - C14639 + C14640 - C14641) * C30856 +
             (C14642 - C14643 + C14644 - C14645) * C31762) *
                C31937 +
            ((C16530 - C16531 + C16532 - C16533) * C30875 +
             (C16534 - C16535 + C16536 - C16537) * C32076 + C16997 * C30856 +
             C16998 * C31762) *
                C31944 +
            C29424 * C23798) *
               C572 +
           (((C16531 - C16530 + C16533 - C16532) * C30875 +
             (C16535 - C16534 + C16537 - C16536) * C32076 + C16999 * C30856 +
             C17000 * C31762) *
                C31937 +
            ((C16539 - C16538 + C16541 - C16540) * C30875 +
             (C16543 - C16542 + C16545 - C16544) * C32076 + C17001 * C30856 +
             C17002 * C31762) *
                C31944 +
            ((C16550 - C16551 + C16552 - C16553) * C30875 +
             (C16554 - C16555 + C16556 - C16557) * C32076 +
             (C16558 - C16559 + C16560 - C16561) * C30856 +
             (C16562 - C16563 + C16564 - C16565) * C31762) *
                C23798) *
               C573) *
              C466 +
          ((((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                 C30875 +
             (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                 C32076 +
             (C15008 - C15009 + C15010 - C15011) * C30856 +
             (C15012 - C15013 + C15014 - C15015) * C31762) *
                C31937 +
            ((C17197 - C17198 + C17199 - C17200) * C30875 +
             (C17201 - C17202 + C17203 - C17204) * C32076 +
             (C16775 - C16776 + C16777 - C16778) * C30856 +
             (C16779 - C16780 + C16781 - C16782) * C31762) *
                C31944 +
            ((C17205 - C17206 + C17207 - C17208) * C30875 +
             (C17209 - C17210 + C17211 - C17212) * C32076 +
             (C16783 - C16784 + C16785 - C16786) * C30856 +
             (C16787 - C16788 + C16789 - C16790) * C31762) *
                C23798) *
               C572 +
           (((C17198 - C17197 + C17200 - C17199) * C30875 +
             (C17202 - C17201 + C17204 - C17203) * C32076 +
             (C16776 - C16775 + C16778 - C16777) * C30856 +
             (C16780 - C16779 + C16782 - C16781) * C31762) *
                C31937 +
            ((C17206 - C17205 + C17208 - C17207) * C30875 +
             (C17210 - C17209 + C17212 - C17211) * C32076 +
             (C16784 - C16783 + C16786 - C16785) * C30856 +
             (C16788 - C16787 + C16790 - C16789) * C31762) *
                C31944 +
            ((C27953 - C27952 + C27955 - C27954) * C30875 +
             (C27957 - C27956 + C27959 - C27958) * C32076 +
             (C14625 * C2535 - C14631 * C2531 + C31899 * C7170 -
              C14632 * C7169) *
                 C30856 +
             (C14625 * C2540 - C14631 * C2536 + C31899 * C7172 -
              C14632 * C7171) *
                 C31762) *
                C23798) *
               C573) *
              C467) *
         C31787) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C30875 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C32076 +
            (C14638 - C14639 + C14640 - C14641) * C30856 +
            (C14642 - C14643 + C14644 - C14645) * C31762) *
               C31937 +
           ((C16530 - C16531 + C16532 - C16533) * C30875 +
            (C16534 - C16535 + C16536 - C16537) * C32076 + C16997 * C30856 +
            C16998 * C31762) *
               C31944 +
           (C16572 * C30875 + C16573 * C32076 + C16570 * C30856 +
            C16571 * C31762) *
               C23798) *
              C31813 * C235 +
          (((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                C30875 +
            (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                C32076 +
            (C15008 - C15009 + C15010 - C15011) * C30856 +
            (C15012 - C15013 + C15014 - C15015) * C31762) *
               C31937 +
           ((C17197 - C17198 + C17199 - C17200) * C30875 +
            (C17201 - C17202 + C17203 - C17204) * C32076 +
            (C16775 - C16776 + C16777 - C16778) * C30856 +
            (C16779 - C16780 + C16781 - C16782) * C31762) *
               C31944 +
           ((C17205 - C17206 + C17207 - C17208) * C30875 +
            (C17209 - C17210 + C17211 - C17212) * C32076 +
            (C16783 - C16784 + C16785 - C16786) * C30856 +
            (C16787 - C16788 + C16789 - C16790) * C31762) *
               C23798) *
              C31813 * C236 +
          (((C14625 * C259 - C14631 * C244 + C31899 * C980 - C14632 * C974) *
                C30875 +
            (C14625 * C274 - C14631 * C260 + C31899 * C992 - C14632 * C981) *
                C32076 +
            (C14625 * C261 - C14631 * C245 + C31899 * C982 - C14632 * C975) *
                C30856 +
            (C14625 * C275 - C14631 * C262 + C31899 * C993 - C14632 * C983) *
                C31762) *
               C31937 +
           ((C14625 * C1117 - C14631 * C1108 + C31899 * C1641 -
             C14632 * C1638) *
                C30875 +
            (C14625 * C1135 - C14631 * C1118 + C31899 * C1647 -
             C14632 * C1642) *
                C32076 +
            (C14625 * C1119 - C14631 * C1109 + C31899 * C1643 -
             C14632 * C1639) *
                C30856 +
            (C14625 * C1136 - C14631 * C1120 + C31899 * C1648 -
             C14632 * C1644) *
                C31762) *
               C31944 +
           ((C14625 * C1124 - C14631 * C1112 + C31899 * C6217 -
             C14632 * C6213) *
                C30875 +
            (C14625 * C1139 - C14631 * C1126 + C31899 * C6222 -
             C14632 * C6219) *
                C32076 +
            (C14625 * C1128 - C14631 * C1114 + C31899 * C7020 -
             C14632 * C7019) *
                C30856 +
            (C14625 * C1141 - C14631 * C1130 + C31899 * C7022 -
             C14632 * C7021) *
                C31762) *
               C23798) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C30875 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C32076 +
            (C14638 - C14639 + C14640 - C14641) * C30856 +
            (C14642 - C14643 + C14644 - C14645) * C31762) *
               C31937 +
           ((C16530 - C16531 + C16532 - C16533) * C30875 +
            (C16534 - C16535 + C16536 - C16537) * C32076 + C16997 * C30856 +
            C16998 * C31762) *
               C31944 +
           (C16572 * C30875 + C16573 * C32076 + C16570 * C30856 +
            C16571 * C31762) *
               C23798) *
              C31813 * C31799 * C110 +
          (((C14639 - C14638 + C14641 - C14640) * C30875 +
            (C14643 - C14642 + C14645 - C14644) * C32076 +
            (C14647 - C14646 + C14649 - C14648) * C30856 +
            (C14651 - C14650 + C14653 - C14652) * C31762) *
               C31937 +
           (C16999 * C30875 + C17000 * C32076 + C18931 * C30856 +
            C18932 * C31762) *
               C31944 +
           (C17001 * C30875 + C17002 * C32076 +
            (C16230 - C16231 + C16232 - C16233) * C30856 +
            (C16234 - C16235 + C16236 - C16237) * C31762) *
               C23798) *
              C31813 * C31799 * C111 +
          ((C14678 * C30875 + C14679 * C32076 + C14680 * C30856 +
            C14681 * C31762) *
               C31937 +
           (C18237 * C30875 + C18238 * C32076 +
            (C15179 - C15178 + C15181 - C15180) * C30856 +
            (C15183 - C15182 + C15185 - C15184) * C31762) *
               C31944 +
           ((C16231 - C16230 + C16233 - C16232) * C30875 +
            (C16235 - C16234 + C16237 - C16236) * C32076 +
            (C14625 * C370 - C14631 * C352 + C31899 * C2205 - C14632 * C2204) *
                C30856 +
            (C14625 * C382 - C14631 * C371 + C31899 * C2207 - C14632 * C2206) *
                C31762) *
               C23798) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C30875 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C32076 +
            (C14638 - C14639 + C14640 - C14641) * C30856 +
            (C14642 - C14643 + C14644 - C14645) * C31762) *
               C31937 +
           ((C16530 - C16531 + C16532 - C16533) * C30875 +
            (C16534 - C16535 + C16536 - C16537) * C32076 + C16997 * C30856 +
            C16998 * C31762) *
               C31944 +
           C29424 * C23798) *
              C341 +
          (((C16531 - C16530 + C16533 - C16532) * C30875 +
            (C16535 - C16534 + C16537 - C16536) * C32076 + C16999 * C30856 +
            C17000 * C31762) *
               C31937 +
           ((C16539 - C16538 + C16541 - C16540) * C30875 +
            (C16543 - C16542 + C16545 - C16544) * C32076 + C17001 * C30856 +
            C17002 * C31762) *
               C31944 +
           ((C16550 - C16551 + C16552 - C16553) * C30875 +
            (C16554 - C16555 + C16556 - C16557) * C32076 +
            (C16558 - C16559 + C16560 - C16561) * C30856 +
            (C16562 - C16563 + C16564 - C16565) * C31762) *
               C23798) *
              C342 +
          (C29424 * C31937 +
           (C27557 * C30875 + C27558 * C32076 +
            (C16559 - C16558 + C16561 - C16560) * C30856 +
            (C16563 - C16562 + C16565 - C16564) * C31762) *
               C31944 +
           ((C27549 - C27548 + C27551 - C27550) * C30875 +
            (C27553 - C27552 + C27555 - C27554) * C32076 +
            (C14625 * C2013 - C14631 * C2003 + C31899 * C11841 -
             C14632 * C11840) *
                C30856 +
            (C14625 * C2021 - C14631 * C2014 + C31899 * C11843 -
             C14632 * C11842) *
                C31762) *
               C23798) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                 C30875 +
             (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                 C32076 +
             (C14638 - C14639 + C14640 - C14641) * C30856 +
             (C14642 - C14643 + C14644 - C14645) * C31762) *
                C31937 +
            ((C16530 - C16531 + C16532 - C16533) * C30875 +
             (C16534 - C16535 + C16536 - C16537) * C32076 + C16997 * C30856 +
             C16998 * C31762) *
                C31944 +
            C29424 * C23798) *
               C572 +
           (((C16531 - C16530 + C16533 - C16532) * C30875 +
             (C16535 - C16534 + C16537 - C16536) * C32076 + C16999 * C30856 +
             C17000 * C31762) *
                C31937 +
            ((C16539 - C16538 + C16541 - C16540) * C30875 +
             (C16543 - C16542 + C16545 - C16544) * C32076 + C17001 * C30856 +
             C17002 * C31762) *
                C31944 +
            ((C16550 - C16551 + C16552 - C16553) * C30875 +
             (C16554 - C16555 + C16556 - C16557) * C32076 +
             (C16558 - C16559 + C16560 - C16561) * C30856 +
             (C16562 - C16563 + C16564 - C16565) * C31762) *
                C23798) *
               C573) *
              C31799 * C468 +
          ((((C14639 - C14638 + C14641 - C14640) * C30875 +
             (C14643 - C14642 + C14645 - C14644) * C32076 +
             (C14647 - C14646 + C14649 - C14648) * C30856 +
             (C14651 - C14650 + C14653 - C14652) * C31762) *
                C31937 +
            (C16999 * C30875 + C17000 * C32076 + C18931 * C30856 +
             C18932 * C31762) *
                C31944 +
            (C17001 * C30875 + C17002 * C32076 +
             (C16230 - C16231 + C16232 - C16233) * C30856 +
             (C16234 - C16235 + C16236 - C16237) * C31762) *
                C23798) *
               C572 +
           ((C16997 * C30875 + C16998 * C32076 + C18237 * C30856 +
             C18238 * C31762) *
                C31937 +
            (C16570 * C30875 + C16571 * C32076 +
             (C16231 - C16230 + C16233 - C16232) * C30856 +
             (C16235 - C16234 + C16237 - C16236) * C31762) *
                C31944 +
            ((C16559 - C16558 + C16561 - C16560) * C30875 +
             (C16563 - C16562 + C16565 - C16564) * C32076 +
             (C14625 * C2009 - C14631 * C2001 + C31899 * C2537 -
              C14632 * C2532) *
                 C30856 +
             (C14625 * C2019 - C14631 * C2010 + C31899 * C2541 -
              C14632 * C2538) *
                 C31762) *
                C23798) *
               C573) *
              C31799 * C469)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C30875 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C32076 +
            (C14638 - C14639 + C14640 - C14641) * C30856 +
            (C14642 - C14643 + C14644 - C14645) * C31762) *
               C31937 +
           ((C16530 - C16531 + C16532 - C16533) * C30875 +
            (C16534 - C16535 + C16536 - C16537) * C32076 + C16997 * C30856 +
            C16998 * C31762) *
               C31944 +
           (C16572 * C30875 + C16573 * C32076 + C16570 * C30856 +
            C16571 * C31762) *
               C23798) *
              C31813 * C31799 * C110 +
          (((C14639 - C14638 + C14641 - C14640) * C30875 +
            (C14643 - C14642 + C14645 - C14644) * C32076 +
            (C14647 - C14646 + C14649 - C14648) * C30856 +
            (C14651 - C14650 + C14653 - C14652) * C31762) *
               C31937 +
           (C16999 * C30875 + C17000 * C32076 + C18931 * C30856 +
            C18932 * C31762) *
               C31944 +
           (C17001 * C30875 + C17002 * C32076 +
            (C16230 - C16231 + C16232 - C16233) * C30856 +
            (C16234 - C16235 + C16236 - C16237) * C31762) *
               C23798) *
              C31813 * C31799 * C111 +
          ((C14678 * C30875 + C14679 * C32076 + C14680 * C30856 +
            C14681 * C31762) *
               C31937 +
           (C18237 * C30875 + C18238 * C32076 +
            (C15179 - C15178 + C15181 - C15180) * C30856 +
            (C15183 - C15182 + C15185 - C15184) * C31762) *
               C31944 +
           ((C16231 - C16230 + C16233 - C16232) * C30875 +
            (C16235 - C16234 + C16237 - C16236) * C32076 +
            (C14625 * C370 - C14631 * C352 + C31899 * C2205 - C14632 * C2204) *
                C30856 +
            (C14625 * C382 - C14631 * C371 + C31899 * C2207 - C14632 * C2206) *
                C31762) *
               C23798) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C30875 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C32076 +
            (C14638 - C14639 + C14640 - C14641) * C30856 +
            (C14642 - C14643 + C14644 - C14645) * C31762) *
               C31937 +
           ((C16530 - C16531 + C16532 - C16533) * C30875 +
            (C16534 - C16535 + C16536 - C16537) * C32076 + C16997 * C30856 +
            C16998 * C31762) *
               C31944 +
           (C16572 * C30875 + C16573 * C32076 + C16570 * C30856 +
            C16571 * C31762) *
               C23798) *
              C31813 * C235 +
          (((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                C30875 +
            (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                C32076 +
            (C15008 - C15009 + C15010 - C15011) * C30856 +
            (C15012 - C15013 + C15014 - C15015) * C31762) *
               C31937 +
           ((C17197 - C17198 + C17199 - C17200) * C30875 +
            (C17201 - C17202 + C17203 - C17204) * C32076 +
            (C16775 - C16776 + C16777 - C16778) * C30856 +
            (C16779 - C16780 + C16781 - C16782) * C31762) *
               C31944 +
           ((C17205 - C17206 + C17207 - C17208) * C30875 +
            (C17209 - C17210 + C17211 - C17212) * C32076 +
            (C16783 - C16784 + C16785 - C16786) * C30856 +
            (C16787 - C16788 + C16789 - C16790) * C31762) *
               C23798) *
              C31813 * C236 +
          (((C14625 * C259 - C14631 * C244 + C31899 * C980 - C14632 * C974) *
                C30875 +
            (C14625 * C274 - C14631 * C260 + C31899 * C992 - C14632 * C981) *
                C32076 +
            (C14625 * C261 - C14631 * C245 + C31899 * C982 - C14632 * C975) *
                C30856 +
            (C14625 * C275 - C14631 * C262 + C31899 * C993 - C14632 * C983) *
                C31762) *
               C31937 +
           ((C14625 * C1117 - C14631 * C1108 + C31899 * C1641 -
             C14632 * C1638) *
                C30875 +
            (C14625 * C1135 - C14631 * C1118 + C31899 * C1647 -
             C14632 * C1642) *
                C32076 +
            (C14625 * C1119 - C14631 * C1109 + C31899 * C1643 -
             C14632 * C1639) *
                C30856 +
            (C14625 * C1136 - C14631 * C1120 + C31899 * C1648 -
             C14632 * C1644) *
                C31762) *
               C31944 +
           ((C14625 * C1124 - C14631 * C1112 + C31899 * C6217 -
             C14632 * C6213) *
                C30875 +
            (C14625 * C1139 - C14631 * C1126 + C31899 * C6222 -
             C14632 * C6219) *
                C32076 +
            (C14625 * C1128 - C14631 * C1114 + C31899 * C7020 -
             C14632 * C7019) *
                C30856 +
            (C14625 * C1141 - C14631 * C1130 + C31899 * C7022 -
             C14632 * C7021) *
                C31762) *
               C23798) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                 C5251 +
             (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                 C32158 +
             (C14638 - C14639 + C14640 - C14641) * C5252 +
             (C14642 - C14643 + C14644 - C14645) * C32145 + C14678 * C5253 +
             C14679 * C32115) *
                C20324 +
            ((C16530 - C16531 + C16532 - C16533) * C5251 +
             (C16534 - C16535 + C16536 - C16537) * C32158 + C16997 * C5252 +
             C16998 * C32145 + C18237 * C5253 + C18238 * C32115) *
                C31941) *
               C31813 * C466 +
           (((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                 C5251 +
             (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                 C32158 +
             (C15008 - C15009 + C15010 - C15011) * C5252 +
             (C15012 - C15013 + C15014 - C15015) * C32145 +
             (C15016 - C15017 + C15018 - C15019) * C5253 +
             (C15020 - C15021 + C15022 - C15023) * C32115) *
                C20324 +
            ((C17197 - C17198 + C17199 - C17200) * C5251 +
             (C17201 - C17202 + C17203 - C17204) * C32158 +
             (C16775 - C16776 + C16777 - C16778) * C5252 +
             (C16779 - C16780 + C16781 - C16782) * C32145 +
             (C18725 - C18726 + C18727 - C18728) * C5253 +
             (C18729 - C18730 + C18731 - C18732) * C32115) *
                C31941) *
               C31813 * C467) *
              C468 +
          ((((C14639 - C14638 + C14641 - C14640) * C5251 +
             (C14643 - C14642 + C14645 - C14644) * C32158 +
             (C14647 - C14646 + C14649 - C14648) * C5252 +
             (C14651 - C14650 + C14653 - C14652) * C32145 +
             (C14655 - C14654 + C14657 - C14656) * C5253 +
             (C14659 - C14658 + C14661 - C14660) * C32115) *
                C20324 +
            (C16999 * C5251 + C17000 * C32158 + C18931 * C5252 +
             C18932 * C32145 + (C15178 - C15179 + C15180 - C15181) * C5253 +
             (C15182 - C15183 + C15184 - C15185) * C32115) *
                C31941) *
               C31813 * C466 +
           (((C15009 - C15008 + C15011 - C15010) * C5251 +
             (C15013 - C15012 + C15015 - C15014) * C32158 +
             (C15017 - C15016 + C15019 - C15018) * C5252 +
             (C15021 - C15020 + C15023 - C15022) * C32145 +
             (C15025 - C15024 + C15027 - C15026) * C5253 +
             (C15029 - C15028 + C15031 - C15030) * C32115) *
                C20324 +
            ((C16776 - C16775 + C16778 - C16777) * C5251 +
             (C16780 - C16779 + C16782 - C16781) * C32158 +
             (C18726 - C18725 + C18728 - C18727) * C5252 +
             (C18730 - C18729 + C18732 - C18731) * C32145 +
             (C14625 * C687 - C14631 * C679 + C31899 * C1465 - C14632 * C1464) *
                 C5253 +
             (C14625 * C694 - C14631 * C688 + C31899 * C1467 - C14632 * C1466) *
                 C32115) *
                C31941) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
              C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
                 C6079 +
             (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
              C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
                 C31752) *
                C20324 +
            ((C26810 - C26811 + C26812 - C26813 + C26814 - C26815 + C26816 -
              C26817) *
                 C6079 +
             (C26818 - C26819 + C26820 - C26821 + C26822 - C26823 + C26824 -
              C26825) *
                 C31752) *
                C31941) *
               C31813 * C466 +
           (((C15419 * C239 - C32168 * C249 + C15420 * C244 - C32164 * C259 +
              C15421 * C974 - C32154 * C980 + C15422 * C977 - C32136 * C986) *
                 C6079 +
             (C15419 * C250 - C32168 * C269 + C15420 * C260 - C32164 * C274 +
              C15421 * C981 - C32154 * C992 + C15422 * C987 - C32136 * C995) *
                 C31752) *
                C20324 +
            ((C15419 * C676 - C32168 * C681 + C15420 * C1108 - C32164 * C1117 +
              C15421 * C1638 - C32154 * C1641 + C15422 * C6212 -
              C32136 * C6215) *
                 C6079 +
             (C15419 * C682 - C32168 * C691 + C15420 * C1118 - C32164 * C1135 +
              C15421 * C1642 - C32154 * C1647 + C15422 * C6216 -
              C32136 * C6221) *
                 C31752) *
                C31941) *
               C31813 * C467) *
              C468 +
          ((((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
              C15432) *
                 C6079 +
             (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
              C15440) *
                 C31752) *
                C20324 +
            ((C15930 - C15931 + C15932 - C15933 + C15934 - C15935 + C15936 -
              C15937) *
                 C6079 +
             (C15938 - C15939 + C15940 - C15941 + C15942 - C15943 + C15944 -
              C15945) *
                 C31752) *
                C31941) *
               C31813 * C466 +
           (((C15785 - C15784 + C15787 - C15786 + C15789 - C15788 + C15791 -
              C15790) *
                 C6079 +
             (C15793 - C15792 + C15795 - C15794 + C15797 - C15796 + C15799 -
              C15798) *
                 C31752) *
                C20324 +
            ((C32168 * C683 - C15419 * C677 + C32164 * C1119 - C15420 * C1109 +
              C32154 * C1643 - C15421 * C1639 + C32136 * C6393 -
              C15422 * C6392) *
                 C6079 +
             (C32168 * C692 - C15419 * C684 + C32164 * C1136 - C15420 * C1120 +
              C32154 * C1648 - C15421 * C1644 + C32136 * C6395 -
              C15422 * C6394) *
                 C31752) *
                C31941) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                 C5251 +
             (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                 C32158 +
             (C14638 - C14639 + C14640 - C14641) * C5252 +
             (C14642 - C14643 + C14644 - C14645) * C32145 + C14678 * C5253 +
             C14679 * C32115) *
                C20324 +
            ((C16530 - C16531 + C16532 - C16533) * C5251 +
             (C16534 - C16535 + C16536 - C16537) * C32158 + C16997 * C5252 +
             C16998 * C32145 + C18237 * C5253 + C18238 * C32115) *
                C31941) *
               C572 +
           (((C16531 - C16530 + C16533 - C16532) * C5251 +
             (C16535 - C16534 + C16537 - C16536) * C32158 + C16999 * C5252 +
             C17000 * C32145 + C18931 * C5253 + C18932 * C32115) *
                C20324 +
            ((C16539 - C16538 + C16541 - C16540) * C5251 +
             (C16543 - C16542 + C16545 - C16544) * C32158 + C17001 * C5252 +
             C17002 * C32145 + (C16230 - C16231 + C16232 - C16233) * C5253 +
             (C16234 - C16235 + C16236 - C16237) * C32115) *
                C31941) *
               C573) *
              C466 +
          ((((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                 C5251 +
             (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                 C32158 +
             (C15008 - C15009 + C15010 - C15011) * C5252 +
             (C15012 - C15013 + C15014 - C15015) * C32145 +
             (C15016 - C15017 + C15018 - C15019) * C5253 +
             (C15020 - C15021 + C15022 - C15023) * C32115) *
                C20324 +
            ((C17197 - C17198 + C17199 - C17200) * C5251 +
             (C17201 - C17202 + C17203 - C17204) * C32158 +
             (C16775 - C16776 + C16777 - C16778) * C5252 +
             (C16779 - C16780 + C16781 - C16782) * C32145 +
             (C18725 - C18726 + C18727 - C18728) * C5253 +
             (C18729 - C18730 + C18731 - C18732) * C32115) *
                C31941) *
               C572 +
           (((C17198 - C17197 + C17200 - C17199) * C5251 +
             (C17202 - C17201 + C17204 - C17203) * C32158 +
             (C16776 - C16775 + C16778 - C16777) * C5252 +
             (C16780 - C16779 + C16782 - C16781) * C32145 +
             (C18726 - C18725 + C18728 - C18727) * C5253 +
             (C18730 - C18729 + C18732 - C18731) * C32115) *
                C20324 +
            ((C17206 - C17205 + C17208 - C17207) * C5251 +
             (C17210 - C17209 + C17212 - C17211) * C32158 +
             (C16784 - C16783 + C16786 - C16785) * C5252 +
             (C16788 - C16787 + C16790 - C16789) * C32145 +
             (C14625 * C1131 - C14631 * C1115 + C31899 * C1132 -
              C14632 * C1116) *
                 C5253 +
             (C14625 * C1142 - C14631 * C1133 + C31899 * C1143 -
              C14632 * C1134) *
                 C32115) *
                C31941) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
              C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
                 C6079 +
             (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
              C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
                 C31752) *
                C20324 +
            ((C26810 - C26811 + C26812 - C26813 + C26814 - C26815 + C26816 -
              C26817) *
                 C6079 +
             (C26818 - C26819 + C26820 - C26821 + C26822 - C26823 + C26824 -
              C26825) *
                 C31752) *
                C31941) *
               C572 +
           (((C26811 - C26810 + C26813 - C26812 + C26815 - C26814 + C26817 -
              C26816) *
                 C6079 +
             (C26819 - C26818 + C26821 - C26820 + C26823 - C26822 + C26825 -
              C26824) *
                 C31752) *
                C20324 +
            ((C26826 - C26827 + C26828 - C26829 + C26830 - C26831 + C26832 -
              C26833) *
                 C6079 +
             (C26834 - C26835 + C26836 - C26837 + C26838 - C26839 + C26840 -
              C26841) *
                 C31752) *
                C31941) *
               C573) *
              C466 +
          ((((C15419 * C239 - C32168 * C249 + C15420 * C244 - C32164 * C259 +
              C15421 * C974 - C32154 * C980 + C15422 * C977 - C32136 * C986) *
                 C6079 +
             (C15419 * C250 - C32168 * C269 + C15420 * C260 - C32164 * C274 +
              C15421 * C981 - C32154 * C992 + C15422 * C987 - C32136 * C995) *
                 C31752) *
                C20324 +
            ((C27232 - C27233 + C27234 - C27235 + C27236 - C27237 + C27238 -
              C27239) *
                 C6079 +
             (C27240 - C27241 + C27242 - C27243 + C27244 - C27245 + C27246 -
              C27247) *
                 C31752) *
                C31941) *
               C572 +
           (((C27233 - C27232 + C27235 - C27234 + C27237 - C27236 + C27239 -
              C27238) *
                 C6079 +
             (C27241 - C27240 + C27243 - C27242 + C27245 - C27244 + C27247 -
              C27246) *
                 C31752) *
                C20324 +
            ((C32168 * C1123 - C15419 * C1111 + C32164 * C1124 -
              C15420 * C1112 + C32154 * C6217 - C15421 * C6213 +
              C32136 * C6218 - C15422 * C6214) *
                 C6079 +
             (C32168 * C1138 - C15419 * C1125 + C32164 * C1139 -
              C15420 * C1126 + C32154 * C6222 - C15421 * C6219 +
              C32136 * C6223 - C15422 * C6220) *
                 C31752) *
                C31941) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C5251 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C32158 +
            (C14638 - C14639 + C14640 - C14641) * C5252 +
            (C14642 - C14643 + C14644 - C14645) * C32145 + C14678 * C5253 +
            C14679 * C32115) *
               C20324 +
           ((C16530 - C16531 + C16532 - C16533) * C5251 +
            (C16534 - C16535 + C16536 - C16537) * C32158 + C16997 * C5252 +
            C16998 * C32145 + C18237 * C5253 + C18238 * C32115) *
               C31941) *
              C31813 * C235 +
          (((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                C5251 +
            (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                C32158 +
            (C15008 - C15009 + C15010 - C15011) * C5252 +
            (C15012 - C15013 + C15014 - C15015) * C32145 +
            (C15016 - C15017 + C15018 - C15019) * C5253 +
            (C15020 - C15021 + C15022 - C15023) * C32115) *
               C20324 +
           ((C17197 - C17198 + C17199 - C17200) * C5251 +
            (C17201 - C17202 + C17203 - C17204) * C32158 +
            (C16775 - C16776 + C16777 - C16778) * C5252 +
            (C16779 - C16780 + C16781 - C16782) * C32145 +
            (C18725 - C18726 + C18727 - C18728) * C5253 +
            (C18729 - C18730 + C18731 - C18732) * C32115) *
               C31941) *
              C31813 * C236 +
          (((C14625 * C259 - C14631 * C244 + C31899 * C980 - C14632 * C974) *
                C5251 +
            (C14625 * C274 - C14631 * C260 + C31899 * C992 - C14632 * C981) *
                C32158 +
            (C14625 * C261 - C14631 * C245 + C31899 * C982 - C14632 * C975) *
                C5252 +
            (C14625 * C275 - C14631 * C262 + C31899 * C993 - C14632 * C983) *
                C32145 +
            (C14625 * C263 - C14631 * C246 + C31899 * C984 - C14632 * C976) *
                C5253 +
            (C14625 * C276 - C14631 * C264 + C31899 * C994 - C14632 * C985) *
                C32115) *
               C20324 +
           ((C14625 * C1117 - C14631 * C1108 + C31899 * C1641 -
             C14632 * C1638) *
                C5251 +
            (C14625 * C1135 - C14631 * C1118 + C31899 * C1647 -
             C14632 * C1642) *
                C32158 +
            (C14625 * C1119 - C14631 * C1109 + C31899 * C1643 -
             C14632 * C1639) *
                C5252 +
            (C14625 * C1136 - C14631 * C1120 + C31899 * C1648 -
             C14632 * C1644) *
                C32145 +
            (C14625 * C1121 - C14631 * C1110 + C31899 * C1645 -
             C14632 * C1640) *
                C5253 +
            (C14625 * C1137 - C14631 * C1122 + C31899 * C1649 -
             C14632 * C1646) *
                C32115) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C5251 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C32158 +
            (C14638 - C14639 + C14640 - C14641) * C5252 +
            (C14642 - C14643 + C14644 - C14645) * C32145 + C14678 * C5253 +
            C14679 * C32115) *
               C20324 +
           ((C16530 - C16531 + C16532 - C16533) * C5251 +
            (C16534 - C16535 + C16536 - C16537) * C32158 + C16997 * C5252 +
            C16998 * C32145 + C18237 * C5253 + C18238 * C32115) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C14639 - C14638 + C14641 - C14640) * C5251 +
            (C14643 - C14642 + C14645 - C14644) * C32158 +
            (C14647 - C14646 + C14649 - C14648) * C5252 +
            (C14651 - C14650 + C14653 - C14652) * C32145 +
            (C14655 - C14654 + C14657 - C14656) * C5253 +
            (C14659 - C14658 + C14661 - C14660) * C32115) *
               C20324 +
           (C16999 * C5251 + C17000 * C32158 + C18931 * C5252 +
            C18932 * C32145 + (C15178 - C15179 + C15180 - C15181) * C5253 +
            (C15182 - C15183 + C15184 - C15185) * C32115) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C14678 * C5251 + C14679 * C32158 + C14680 * C5252 +
            C14681 * C32145 + (C14663 - C14662 + C14665 - C14664) * C5253 +
            (C14667 - C14666 + C14669 - C14668) * C32115) *
               C20324 +
           (C18237 * C5251 + C18238 * C32158 +
            (C15179 - C15178 + C15181 - C15180) * C5252 +
            (C15183 - C15182 + C15185 - C15184) * C32145 +
            (C14625 * C362 - C14631 * C348 + C31899 * C689 - C14632 * C680) *
                C5253 +
            (C14625 * C378 - C14631 * C363 + C31899 * C695 - C14632 * C690) *
                C32115) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C5251 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C32158 +
            (C14638 - C14639 + C14640 - C14641) * C5252 +
            (C14642 - C14643 + C14644 - C14645) * C32145 + C14678 * C5253 +
            C14679 * C32115) *
               C20324 +
           ((C16530 - C16531 + C16532 - C16533) * C5251 +
            (C16534 - C16535 + C16536 - C16537) * C32158 + C16997 * C5252 +
            C16998 * C32145 + C18237 * C5253 + C18238 * C32115) *
               C31941) *
              C341 +
          (((C16531 - C16530 + C16533 - C16532) * C5251 +
            (C16535 - C16534 + C16537 - C16536) * C32158 + C16999 * C5252 +
            C17000 * C32145 + C18931 * C5253 + C18932 * C32115) *
               C20324 +
           ((C16539 - C16538 + C16541 - C16540) * C5251 +
            (C16543 - C16542 + C16545 - C16544) * C32158 + C17001 * C5252 +
            C17002 * C32145 + (C16230 - C16231 + C16232 - C16233) * C5253 +
            (C16234 - C16235 + C16236 - C16237) * C32115) *
               C31941) *
              C342 +
          ((C16572 * C5251 + C16573 * C32158 + C16570 * C5252 +
            C16571 * C32145 + (C16231 - C16230 + C16233 - C16232) * C5253 +
            (C16235 - C16234 + C16237 - C16236) * C32115) *
               C20324 +
           ((C16551 - C16550 + C16553 - C16552) * C5251 +
            (C16555 - C16554 + C16557 - C16556) * C32158 +
            (C16559 - C16558 + C16561 - C16560) * C5252 +
            (C16563 - C16562 + C16565 - C16564) * C32145 +
            (C14625 * C2009 - C14631 * C2001 + C31899 * C2537 -
             C14632 * C2532) *
                C5253 +
            (C14625 * C2019 - C14631 * C2010 + C31899 * C2541 -
             C14632 * C2538) *
                C32115) *
               C31941) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
             C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
                C6079 +
            (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
             C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
                C31752) *
               C20324 +
           ((C32168 * C354 - C15419 * C344 + C32164 * C681 - C15420 * C676 +
             C32154 * C1117 - C15421 * C1108 + C32136 * C1641 -
             C15422 * C1638) *
                C6079 +
            (C32168 * C374 - C15419 * C355 + C32164 * C691 - C15420 * C682 +
             C32154 * C1135 - C15421 * C1118 + C32136 * C1647 -
             C15422 * C1642) *
                C31752) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
             C15432) *
                C6079 +
            (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
             C15440) *
                C31752) *
               C20324 +
           ((C15930 - C15931 + C15932 - C15933 + C15934 - C15935 + C15936 -
             C15937) *
                C6079 +
            (C15938 - C15939 + C15940 - C15941 + C15942 - C15943 + C15944 -
             C15945) *
                C31752) *
               C31941) *
              C31813 * C31799 * C111 +
          (((C15443 - C15442 + C15445 - C15444 + C15447 - C15446 + C15449 -
             C15448) *
                C6079 +
            (C15451 - C15450 + C15453 - C15452 + C15455 - C15454 + C15457 -
             C15456) *
                C31752) *
               C20324 +
           ((C32168 * C358 - C15419 * C346 + C32164 * C685 - C15420 * C678 +
             C32154 * C1121 - C15421 * C1110 + C32136 * C1645 -
             C15422 * C1640) *
                C6079 +
            (C32168 * C376 - C15419 * C359 + C32164 * C693 - C15420 * C686 +
             C32154 * C1137 - C15421 * C1122 + C32136 * C1649 -
             C15422 * C1646) *
                C31752) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
             C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
                C6079 +
            (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
             C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
                C31752) *
               C20324 +
           ((C32168 * C354 - C15419 * C344 + C32164 * C681 - C15420 * C676 +
             C32154 * C1117 - C15421 * C1108 + C32136 * C1641 -
             C15422 * C1638) *
                C6079 +
            (C32168 * C374 - C15419 * C355 + C32164 * C691 - C15420 * C682 +
             C32154 * C1135 - C15421 * C1118 + C32136 * C1647 -
             C15422 * C1642) *
                C31752) *
               C31941) *
              C31813 * C235 +
          (((C15419 * C239 - C32168 * C249 + C15420 * C244 - C32164 * C259 +
             C15421 * C974 - C32154 * C980 + C15422 * C977 - C32136 * C986) *
                C6079 +
            (C15419 * C250 - C32168 * C269 + C15420 * C260 - C32164 * C274 +
             C15421 * C981 - C32154 * C992 + C15422 * C987 - C32136 * C995) *
                C31752) *
               C20324 +
           ((C15419 * C676 - C32168 * C681 + C15420 * C1108 - C32164 * C1117 +
             C15421 * C1638 - C32154 * C1641 + C15422 * C6212 -
             C32136 * C6215) *
                C6079 +
            (C15419 * C682 - C32168 * C691 + C15420 * C1118 - C32164 * C1135 +
             C15421 * C1642 - C32154 * C1647 + C15422 * C6216 -
             C32136 * C6221) *
                C31752) *
               C31941) *
              C31813 * C236 +
          (((C32168 * C259 - C15419 * C244 + C32164 * C980 - C15420 * C974 +
             C32154 * C986 - C15421 * C977 + C32136 * C6144 - C15422 * C6142) *
                C6079 +
            (C32168 * C274 - C15419 * C260 + C32164 * C992 - C15420 * C981 +
             C32154 * C995 - C15421 * C987 + C32136 * C6148 - C15422 * C6145) *
                C31752) *
               C20324 +
           ((C32168 * C1117 - C15419 * C1108 + C32164 * C1641 - C15420 * C1638 +
             C32154 * C6215 - C15421 * C6212 + C32136 * C6479 -
             C15422 * C6478) *
                C6079 +
            (C32168 * C1135 - C15419 * C1118 + C32164 * C1647 - C15420 * C1642 +
             C32154 * C6221 - C15421 * C6216 + C32136 * C6481 -
             C15422 * C6480) *
                C31752) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
             C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
                C6079 +
            (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
             C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
                C31752) *
               C20324 +
           ((C26810 - C26811 + C26812 - C26813 + C26814 - C26815 + C26816 -
             C26817) *
                C6079 +
            (C26818 - C26819 + C26820 - C26821 + C26822 - C26823 + C26824 -
             C26825) *
                C31752) *
               C31941) *
              C341 +
          (((C26811 - C26810 + C26813 - C26812 + C26815 - C26814 + C26817 -
             C26816) *
                C6079 +
            (C26819 - C26818 + C26821 - C26820 + C26823 - C26822 + C26825 -
             C26824) *
                C31752) *
               C20324 +
           ((C26826 - C26827 + C26828 - C26829 + C26830 - C26831 + C26832 -
             C26833) *
                C6079 +
            (C26834 - C26835 + C26836 - C26837 + C26838 - C26839 + C26840 -
             C26841) *
                C31752) *
               C31941) *
              C342 +
          (((C26827 - C26826 + C26829 - C26828 + C26831 - C26830 + C26833 -
             C26832) *
                C6079 +
            (C26835 - C26834 + C26837 - C26836 + C26839 - C26838 + C26841 -
             C26840) *
                C31752) *
               C20324 +
           ((C32168 * C2005 - C15419 * C1999 + C32164 * C2533 - C15420 * C2530 +
             C32154 * C6815 - C15421 * C6812 + C32136 * C7332 -
             C15422 * C7331) *
                C6079 +
            (C32168 * C2017 - C15419 * C2006 + C32164 * C2539 - C15420 * C2534 +
             C32154 * C6821 - C15421 * C6816 + C32136 * C7334 -
             C15422 * C7333) *
                C31752) *
               C31941) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                 C5251 +
             (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                 C32158 +
             (C14638 - C14639 + C14640 - C14641) * C5252 +
             (C14642 - C14643 + C14644 - C14645) * C32145 + C14678 * C5253 +
             C14679 * C32115) *
                C20324 +
            ((C16530 - C16531 + C16532 - C16533) * C5251 +
             (C16534 - C16535 + C16536 - C16537) * C32158 + C16997 * C5252 +
             C16998 * C32145 + C18237 * C5253 + C18238 * C32115) *
                C31941) *
               C572 +
           (((C16531 - C16530 + C16533 - C16532) * C5251 +
             (C16535 - C16534 + C16537 - C16536) * C32158 + C16999 * C5252 +
             C17000 * C32145 + C18931 * C5253 + C18932 * C32115) *
                C20324 +
            ((C16539 - C16538 + C16541 - C16540) * C5251 +
             (C16543 - C16542 + C16545 - C16544) * C32158 + C17001 * C5252 +
             C17002 * C32145 + (C16230 - C16231 + C16232 - C16233) * C5253 +
             (C16234 - C16235 + C16236 - C16237) * C32115) *
                C31941) *
               C573) *
              C31799 * C468 +
          ((((C14639 - C14638 + C14641 - C14640) * C5251 +
             (C14643 - C14642 + C14645 - C14644) * C32158 +
             (C14647 - C14646 + C14649 - C14648) * C5252 +
             (C14651 - C14650 + C14653 - C14652) * C32145 +
             (C14655 - C14654 + C14657 - C14656) * C5253 +
             (C14659 - C14658 + C14661 - C14660) * C32115) *
                C20324 +
            (C16999 * C5251 + C17000 * C32158 + C18931 * C5252 +
             C18932 * C32145 + (C15178 - C15179 + C15180 - C15181) * C5253 +
             (C15182 - C15183 + C15184 - C15185) * C32115) *
                C31941) *
               C572 +
           ((C16997 * C5251 + C16998 * C32158 + C18237 * C5252 +
             C18238 * C32145 + (C15179 - C15178 + C15181 - C15180) * C5253 +
             (C15183 - C15182 + C15185 - C15184) * C32115) *
                C20324 +
            (C16570 * C5251 + C16571 * C32158 +
             (C16231 - C16230 + C16233 - C16232) * C5252 +
             (C16235 - C16234 + C16237 - C16236) * C32145 +
             (C14625 * C370 - C14631 * C352 + C31899 * C2205 - C14632 * C2204) *
                 C5253 +
             (C14625 * C382 - C14631 * C371 + C31899 * C2207 - C14632 * C2206) *
                 C32115) *
                C31941) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
              C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
                 C6079 +
             (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
              C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
                 C31752) *
                C20324 +
            ((C26810 - C26811 + C26812 - C26813 + C26814 - C26815 + C26816 -
              C26817) *
                 C6079 +
             (C26818 - C26819 + C26820 - C26821 + C26822 - C26823 + C26824 -
              C26825) *
                 C31752) *
                C31941) *
               C572 +
           (((C26811 - C26810 + C26813 - C26812 + C26815 - C26814 + C26817 -
              C26816) *
                 C6079 +
             (C26819 - C26818 + C26821 - C26820 + C26823 - C26822 + C26825 -
              C26824) *
                 C31752) *
                C20324 +
            ((C26826 - C26827 + C26828 - C26829 + C26830 - C26831 + C26832 -
              C26833) *
                 C6079 +
             (C26834 - C26835 + C26836 - C26837 + C26838 - C26839 + C26840 -
              C26841) *
                 C31752) *
                C31941) *
               C573) *
              C31799 * C468 +
          ((((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
              C15432) *
                 C6079 +
             (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
              C15440) *
                 C31752) *
                C20324 +
            ((C15930 - C15931 + C15932 - C15933 + C15934 - C15935 + C15936 -
              C15937) *
                 C6079 +
             (C15938 - C15939 + C15940 - C15941 + C15942 - C15943 + C15944 -
              C15945) *
                 C31752) *
                C31941) *
               C572 +
           (((C15931 - C15930 + C15933 - C15932 + C15935 - C15934 + C15937 -
              C15936) *
                 C6079 +
             (C15939 - C15938 + C15941 - C15940 + C15943 - C15942 + C15945 -
              C15944) *
                 C31752) *
                C20324 +
            ((C32168 * C366 - C15419 * C350 + C32164 * C1127 - C15420 * C1113 +
              C32154 * C1128 - C15421 * C1114 + C32136 * C7020 -
              C15422 * C7019) *
                 C6079 +
             (C32168 * C380 - C15419 * C367 + C32164 * C1140 - C15420 * C1129 +
              C32154 * C1141 - C15421 * C1130 + C32136 * C7022 -
              C15422 * C7021) *
                 C31752) *
                C31941) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C5251 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C32158 +
            (C14638 - C14639 + C14640 - C14641) * C5252 +
            (C14642 - C14643 + C14644 - C14645) * C32145 + C14678 * C5253 +
            C14679 * C32115) *
               C20324 +
           ((C16530 - C16531 + C16532 - C16533) * C5251 +
            (C16534 - C16535 + C16536 - C16537) * C32158 + C16997 * C5252 +
            C16998 * C32145 + C18237 * C5253 + C18238 * C32115) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C14639 - C14638 + C14641 - C14640) * C5251 +
            (C14643 - C14642 + C14645 - C14644) * C32158 +
            (C14647 - C14646 + C14649 - C14648) * C5252 +
            (C14651 - C14650 + C14653 - C14652) * C32145 +
            (C14655 - C14654 + C14657 - C14656) * C5253 +
            (C14659 - C14658 + C14661 - C14660) * C32115) *
               C20324 +
           (C16999 * C5251 + C17000 * C32158 + C18931 * C5252 +
            C18932 * C32145 + (C15178 - C15179 + C15180 - C15181) * C5253 +
            (C15182 - C15183 + C15184 - C15185) * C32115) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C14678 * C5251 + C14679 * C32158 + C14680 * C5252 +
            C14681 * C32145 + (C14663 - C14662 + C14665 - C14664) * C5253 +
            (C14667 - C14666 + C14669 - C14668) * C32115) *
               C20324 +
           (C18237 * C5251 + C18238 * C32158 +
            (C15179 - C15178 + C15181 - C15180) * C5252 +
            (C15183 - C15182 + C15185 - C15184) * C32145 +
            (C14625 * C362 - C14631 * C348 + C31899 * C689 - C14632 * C680) *
                C5253 +
            (C14625 * C378 - C14631 * C363 + C31899 * C695 - C14632 * C690) *
                C32115) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C126 - C14631 * C119 + C31899 * C249 - C14632 * C239) *
                C5251 +
            (C14625 * C140 - C14631 * C127 + C31899 * C269 - C14632 * C250) *
                C32158 +
            (C14638 - C14639 + C14640 - C14641) * C5252 +
            (C14642 - C14643 + C14644 - C14645) * C32145 + C14678 * C5253 +
            C14679 * C32115) *
               C20324 +
           ((C16530 - C16531 + C16532 - C16533) * C5251 +
            (C16534 - C16535 + C16536 - C16537) * C32158 + C16997 * C5252 +
            C16998 * C32145 + C18237 * C5253 + C18238 * C32115) *
               C31941) *
              C31813 * C235 +
          (((C14631 * C239 - C14625 * C249 + C14632 * C244 - C31899 * C259) *
                C5251 +
            (C14631 * C250 - C14625 * C269 + C14632 * C260 - C31899 * C274) *
                C32158 +
            (C15008 - C15009 + C15010 - C15011) * C5252 +
            (C15012 - C15013 + C15014 - C15015) * C32145 +
            (C15016 - C15017 + C15018 - C15019) * C5253 +
            (C15020 - C15021 + C15022 - C15023) * C32115) *
               C20324 +
           ((C17197 - C17198 + C17199 - C17200) * C5251 +
            (C17201 - C17202 + C17203 - C17204) * C32158 +
            (C16775 - C16776 + C16777 - C16778) * C5252 +
            (C16779 - C16780 + C16781 - C16782) * C32145 +
            (C18725 - C18726 + C18727 - C18728) * C5253 +
            (C18729 - C18730 + C18731 - C18732) * C32115) *
               C31941) *
              C31813 * C236 +
          (((C14625 * C259 - C14631 * C244 + C31899 * C980 - C14632 * C974) *
                C5251 +
            (C14625 * C274 - C14631 * C260 + C31899 * C992 - C14632 * C981) *
                C32158 +
            (C14625 * C261 - C14631 * C245 + C31899 * C982 - C14632 * C975) *
                C5252 +
            (C14625 * C275 - C14631 * C262 + C31899 * C993 - C14632 * C983) *
                C32145 +
            (C14625 * C263 - C14631 * C246 + C31899 * C984 - C14632 * C976) *
                C5253 +
            (C14625 * C276 - C14631 * C264 + C31899 * C994 - C14632 * C985) *
                C32115) *
               C20324 +
           ((C14625 * C1117 - C14631 * C1108 + C31899 * C1641 -
             C14632 * C1638) *
                C5251 +
            (C14625 * C1135 - C14631 * C1118 + C31899 * C1647 -
             C14632 * C1642) *
                C32158 +
            (C14625 * C1119 - C14631 * C1109 + C31899 * C1643 -
             C14632 * C1639) *
                C5252 +
            (C14625 * C1136 - C14631 * C1120 + C31899 * C1648 -
             C14632 * C1644) *
                C32145 +
            (C14625 * C1121 - C14631 * C1110 + C31899 * C1645 -
             C14632 * C1640) *
                C5253 +
            (C14625 * C1137 - C14631 * C1122 + C31899 * C1649 -
             C14632 * C1646) *
                C32115) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
             C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
                C6079 +
            (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
             C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
                C31752) *
               C20324 +
           ((C32168 * C354 - C15419 * C344 + C32164 * C681 - C15420 * C676 +
             C32154 * C1117 - C15421 * C1108 + C32136 * C1641 -
             C15422 * C1638) *
                C6079 +
            (C32168 * C374 - C15419 * C355 + C32164 * C691 - C15420 * C682 +
             C32154 * C1135 - C15421 * C1118 + C32136 * C1647 -
             C15422 * C1642) *
                C31752) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
             C15432) *
                C6079 +
            (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
             C15440) *
                C31752) *
               C20324 +
           ((C15930 - C15931 + C15932 - C15933 + C15934 - C15935 + C15936 -
             C15937) *
                C6079 +
            (C15938 - C15939 + C15940 - C15941 + C15942 - C15943 + C15944 -
             C15945) *
                C31752) *
               C31941) *
              C31813 * C31799 * C111 +
          (((C15443 - C15442 + C15445 - C15444 + C15447 - C15446 + C15449 -
             C15448) *
                C6079 +
            (C15451 - C15450 + C15453 - C15452 + C15455 - C15454 + C15457 -
             C15456) *
                C31752) *
               C20324 +
           ((C32168 * C358 - C15419 * C346 + C32164 * C685 - C15420 * C678 +
             C32154 * C1121 - C15421 * C1110 + C32136 * C1645 -
             C15422 * C1640) *
                C6079 +
            (C32168 * C376 - C15419 * C359 + C32164 * C693 - C15420 * C686 +
             C32154 * C1137 - C15421 * C1122 + C32136 * C1649 -
             C15422 * C1646) *
                C31752) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C32168 * C126 - C15419 * C119 + C32164 * C249 - C15420 * C239 +
             C32154 * C259 - C15421 * C244 + C32136 * C980 - C15422 * C974) *
                C6079 +
            (C32168 * C140 - C15419 * C127 + C32164 * C269 - C15420 * C250 +
             C32154 * C274 - C15421 * C260 + C32136 * C992 - C15422 * C981) *
                C31752) *
               C20324 +
           ((C32168 * C354 - C15419 * C344 + C32164 * C681 - C15420 * C676 +
             C32154 * C1117 - C15421 * C1108 + C32136 * C1641 -
             C15422 * C1638) *
                C6079 +
            (C32168 * C374 - C15419 * C355 + C32164 * C691 - C15420 * C682 +
             C32154 * C1135 - C15421 * C1118 + C32136 * C1647 -
             C15422 * C1642) *
                C31752) *
               C31941) *
              C31813 * C235 +
          (((C15419 * C239 - C32168 * C249 + C15420 * C244 - C32164 * C259 +
             C15421 * C974 - C32154 * C980 + C15422 * C977 - C32136 * C986) *
                C6079 +
            (C15419 * C250 - C32168 * C269 + C15420 * C260 - C32164 * C274 +
             C15421 * C981 - C32154 * C992 + C15422 * C987 - C32136 * C995) *
                C31752) *
               C20324 +
           ((C15419 * C676 - C32168 * C681 + C15420 * C1108 - C32164 * C1117 +
             C15421 * C1638 - C32154 * C1641 + C15422 * C6212 -
             C32136 * C6215) *
                C6079 +
            (C15419 * C682 - C32168 * C691 + C15420 * C1118 - C32164 * C1135 +
             C15421 * C1642 - C32154 * C1647 + C15422 * C6216 -
             C32136 * C6221) *
                C31752) *
               C31941) *
              C31813 * C236 +
          (((C32168 * C259 - C15419 * C244 + C32164 * C980 - C15420 * C974 +
             C32154 * C986 - C15421 * C977 + C32136 * C6144 - C15422 * C6142) *
                C6079 +
            (C32168 * C274 - C15419 * C260 + C32164 * C992 - C15420 * C981 +
             C32154 * C995 - C15421 * C987 + C32136 * C6148 - C15422 * C6145) *
                C31752) *
               C20324 +
           ((C32168 * C1117 - C15419 * C1108 + C32164 * C1641 - C15420 * C1638 +
             C32154 * C6215 - C15421 * C6212 + C32136 * C6479 -
             C15422 * C6478) *
                C6079 +
            (C32168 * C1135 - C15419 * C1118 + C32164 * C1647 - C15420 * C1642 +
             C32154 * C6221 - C15421 * C6216 + C32136 * C6481 -
             C15422 * C6480) *
                C31752) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
             C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
                C30875 +
            (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
             C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
                C32076 +
            (C7470 - C7471 + C7472 - C7473 + C7474 - C7475 + C7476 - C7477) *
                C30856 +
            (C7478 - C7479 + C7480 - C7481 + C7482 - C7483 + C7484 - C7485) *
                C31762) *
               C31854 * C31813 * C466 +
           ((C7463 * C239 - C7457 * C249 + C7464 * C244 - C7458 * C259 +
             C7465 * C974 - C7459 * C980 + C7466 * C977 - C32136 * C986) *
                C30875 +
            (C7463 * C250 - C7457 * C269 + C7464 * C260 - C7458 * C274 +
             C7465 * C981 - C7459 * C992 + C7466 * C987 - C32136 * C995) *
                C32076 +
            (C7828 - C7829 + C7830 - C7831 + C7832 - C7833 + C7834 - C7835) *
                C30856 +
            (C7836 - C7837 + C7838 - C7839 + C7840 - C7841 + C7842 - C7843) *
                C31762) *
               C31854 * C31813 * C467) *
              C468 +
          (((C7471 - C7470 + C7473 - C7472 + C7475 - C7474 + C7477 - C7476) *
                C30875 +
            (C7479 - C7478 + C7481 - C7480 + C7483 - C7482 + C7485 - C7484) *
                C32076 +
            (C7486 - C7487 + C7488 - C7489 + C7490 - C7491 + C7492 - C7493) *
                C30856 +
            (C7494 - C7495 + C7496 - C7497 + C7498 - C7499 + C7500 - C7501) *
                C31762) *
               C31854 * C31813 * C466 +
           ((C7829 - C7828 + C7831 - C7830 + C7833 - C7832 + C7835 - C7834) *
                C30875 +
            (C7837 - C7836 + C7839 - C7838 + C7841 - C7840 + C7843 - C7842) *
                C32076 +
            (C7457 * C253 - C7463 * C241 + C7458 * C263 - C7464 * C246 +
             C7459 * C984 - C7465 * C976 + C32136 * C990 - C7466 * C979) *
                C30856 +
            (C7457 * C271 - C7463 * C254 + C7458 * C276 - C7464 * C264 +
             C7459 * C994 - C7465 * C985 + C32136 * C997 - C7466 * C991) *
                C31762) *
               C31854 * C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C2656 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C2650 +
            (C2661 - C2662 + C2663 - C2664) * C2657 +
            (C2665 - C2666 + C2667 - C2668) * C2651 + C2701 * C2658 +
            C2702 * C2652 + C2703 * C2659 + C2704 * C32130) *
               C31854 * C31813 * C466 +
           ((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                C2656 +
            (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                C2650 +
            (C3031 - C3032 + C3033 - C3034) * C2657 +
            (C3035 - C3036 + C3037 - C3038) * C2651 +
            (C3039 - C3040 + C3041 - C3042) * C2658 +
            (C3043 - C3044 + C3045 - C3046) * C2652 +
            (C3047 - C3048 + C3049 - C3050) * C2659 +
            (C3051 - C3052 + C3053 - C3054) * C32130) *
               C31854 * C31813 * C467) *
              C468 +
          (((C2662 - C2661 + C2664 - C2663) * C2656 +
            (C2666 - C2665 + C2668 - C2667) * C2650 +
            (C2670 - C2669 + C2672 - C2671) * C2657 +
            (C2674 - C2673 + C2676 - C2675) * C2651 +
            (C2678 - C2677 + C2680 - C2679) * C2658 +
            (C2682 - C2681 + C2684 - C2683) * C2652 +
            (C2685 - C2686 + C2687 - C2688) * C2659 +
            (C2689 - C2690 + C2691 - C2692) * C32130) *
               C31854 * C31813 * C466 +
           ((C3032 - C3031 + C3034 - C3033) * C2656 +
            (C3036 - C3035 + C3038 - C3037) * C2650 +
            (C3040 - C3039 + C3042 - C3041) * C2657 +
            (C3044 - C3043 + C3046 - C3045) * C2651 +
            (C3048 - C3047 + C3050 - C3049) * C2658 +
            (C3052 - C3051 + C3054 - C3053) * C2652 +
            (C32095 * C257 - C2654 * C243 + C31899 * C267 - C2655 * C248) *
                C2659 +
            (C32095 * C273 - C2654 * C258 + C31899 * C278 - C2655 * C268) *
                C32130) *
               C31854 * C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                 C30875 +
             (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                 C32076 +
             (C2661 - C2662 + C2663 - C2664) * C30856 +
             (C2665 - C2666 + C2667 - C2668) * C31762) *
                C10013 +
            ((C4477 - C4478 + C4479 - C4480) * C30875 +
             (C4481 - C4482 + C4483 - C4484) * C32076 + C4925 * C30856 +
             C4926 * C31762) *
                C10014 +
            C12501 * C32129) *
               C31813 * C466 +
           (((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                 C30875 +
             (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                 C32076 +
             (C3031 - C3032 + C3033 - C3034) * C30856 +
             (C3035 - C3036 + C3037 - C3038) * C31762) *
                C10013 +
            ((C5125 - C5126 + C5127 - C5128) * C30875 +
             (C5129 - C5130 + C5131 - C5132) * C32076 +
             (C4703 - C4704 + C4705 - C4706) * C30856 +
             (C4707 - C4708 + C4709 - C4710) * C31762) *
                C10014 +
            ((C2654 * C1111 - C32095 * C1123 + C2655 * C1112 - C31899 * C1124) *
                 C30875 +
             (C2654 * C1125 - C32095 * C1138 + C2655 * C1126 - C31899 * C1139) *
                 C32076 +
             (C12696 - C12697 + C12698 - C12699) * C30856 +
             (C12700 - C12701 + C12702 - C12703) * C31762) *
                C32129) *
               C31813 * C467) *
              C468 +
          ((((C2662 - C2661 + C2664 - C2663) * C30875 +
             (C2666 - C2665 + C2668 - C2667) * C32076 +
             (C2670 - C2669 + C2672 - C2671) * C30856 +
             (C2674 - C2673 + C2676 - C2675) * C31762) *
                C10013 +
            (C4927 * C30875 + C4928 * C32076 + C4929 * C30856 +
             C4930 * C31762) *
                C10014 +
            ((C4493 - C4494 + C4495 - C4496) * C30875 +
             (C4497 - C4498 + C4499 - C4500) * C32076 +
             (C4501 - C4502 + C4503 - C4504) * C30856 +
             (C4505 - C4506 + C4507 - C4508) * C31762) *
                C32129) *
               C31813 * C466 +
           (((C3032 - C3031 + C3034 - C3033) * C30875 +
             (C3036 - C3035 + C3038 - C3037) * C32076 +
             (C3040 - C3039 + C3042 - C3041) * C30856 +
             (C3044 - C3043 + C3046 - C3045) * C31762) *
                C10013 +
            ((C4704 - C4703 + C4706 - C4705) * C30875 +
             (C4708 - C4707 + C4710 - C4709) * C32076 +
             (C4712 - C4711 + C4714 - C4713) * C30856 +
             (C4716 - C4715 + C4718 - C4717) * C31762) *
                C10014 +
            ((C12697 - C12696 + C12699 - C12698) * C30875 +
             (C12701 - C12700 + C12703 - C12702) * C32076 +
             (C32095 * C1131 - C2654 * C1115 + C31899 * C1132 - C2655 * C1116) *
                 C30856 +
             (C32095 * C1142 - C2654 * C1133 + C31899 * C1143 - C2655 * C1134) *
                 C31762) *
                C32129) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
             C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
                C30875 +
            (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
             C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
                C32076 +
            (C7470 - C7471 + C7472 - C7473 + C7474 - C7475 + C7476 - C7477) *
                C30856 +
            (C7478 - C7479 + C7480 - C7481 + C7482 - C7483 + C7484 - C7485) *
                C31762) *
               C31854 * C572 +
           ((C7463 * C344 - C7457 * C354 + C7464 * C676 - C7458 * C681 +
             C7465 * C1108 - C7459 * C1117 + C7466 * C1638 - C32136 * C1641) *
                C30875 +
            (C7463 * C355 - C7457 * C374 + C7464 * C682 - C7458 * C691 +
             C7465 * C1118 - C7459 * C1135 + C7466 * C1642 - C32136 * C1647) *
                C32076 +
            (C7974 - C7975 + C7976 - C7977 + C7978 - C7979 + C7980 - C7981) *
                C30856 +
            (C7982 - C7983 + C7984 - C7985 + C7986 - C7987 + C7988 - C7989) *
                C31762) *
               C31854 * C573) *
              C466 +
          (((C7463 * C239 - C7457 * C249 + C7464 * C244 - C7458 * C259 +
             C7465 * C974 - C7459 * C980 + C7466 * C977 - C32136 * C986) *
                C30875 +
            (C7463 * C250 - C7457 * C269 + C7464 * C260 - C7458 * C274 +
             C7465 * C981 - C7459 * C992 + C7466 * C987 - C32136 * C995) *
                C32076 +
            (C7828 - C7829 + C7830 - C7831 + C7832 - C7833 + C7834 - C7835) *
                C30856 +
            (C7836 - C7837 + C7838 - C7839 + C7840 - C7841 + C7842 - C7843) *
                C31762) *
               C31854 * C572 +
           ((C7457 * C681 - C7463 * C676 + C7458 * C1117 - C7464 * C1108 +
             C7459 * C1641 - C7465 * C1638 + C32136 * C6215 - C7466 * C6212) *
                C30875 +
            (C7457 * C691 - C7463 * C682 + C7458 * C1135 - C7464 * C1118 +
             C7459 * C1647 - C7465 * C1642 + C32136 * C6221 - C7466 * C6216) *
                C32076 +
            (C7457 * C683 - C7463 * C677 + C7458 * C1119 - C7464 * C1109 +
             C7459 * C1643 - C7465 * C1639 + C32136 * C6393 - C7466 * C6392) *
                C30856 +
            (C7457 * C692 - C7463 * C684 + C7458 * C1136 - C7464 * C1120 +
             C7459 * C1648 - C7465 * C1644 + C32136 * C6395 - C7466 * C6394) *
                C31762) *
               C31854 * C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C2656 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C2650 +
            (C2661 - C2662 + C2663 - C2664) * C2657 +
            (C2665 - C2666 + C2667 - C2668) * C2651 + C2701 * C2658 +
            C2702 * C2652 + C2703 * C2659 + C2704 * C32130) *
               C31854 * C572 +
           ((C2654 * C344 - C32095 * C354 + C2655 * C676 - C31899 * C681) *
                C2656 +
            (C2654 * C355 - C32095 * C374 + C2655 * C682 - C31899 * C691) *
                C2650 +
            (C3185 - C3186 + C3187 - C3188) * C2657 +
            (C3189 - C3190 + C3191 - C3192) * C2651 +
            (C3193 - C3194 + C3195 - C3196) * C2658 +
            (C3197 - C3198 + C3199 - C3200) * C2652 +
            (C3201 - C3202 + C3203 - C3204) * C2659 +
            (C3205 - C3206 + C3207 - C3208) * C32130) *
               C31854 * C573) *
              C466 +
          (((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                C2656 +
            (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                C2650 +
            (C3031 - C3032 + C3033 - C3034) * C2657 +
            (C3035 - C3036 + C3037 - C3038) * C2651 +
            (C3039 - C3040 + C3041 - C3042) * C2658 +
            (C3043 - C3044 + C3045 - C3046) * C2652 +
            (C3047 - C3048 + C3049 - C3050) * C2659 +
            (C3051 - C3052 + C3053 - C3054) * C32130) *
               C31854 * C572 +
           ((C32095 * C681 - C2654 * C676 + C31899 * C1117 - C2655 * C1108) *
                C2656 +
            (C32095 * C691 - C2654 * C682 + C31899 * C1135 - C2655 * C1118) *
                C2650 +
            (C32095 * C683 - C2654 * C677 + C31899 * C1119 - C2655 * C1109) *
                C2657 +
            (C32095 * C692 - C2654 * C684 + C31899 * C1136 - C2655 * C1120) *
                C2651 +
            (C32095 * C685 - C2654 * C678 + C31899 * C1121 - C2655 * C1110) *
                C2658 +
            (C32095 * C693 - C2654 * C686 + C31899 * C1137 - C2655 * C1122) *
                C2652 +
            (C32095 * C687 - C2654 * C679 + C31899 * C1465 - C2655 * C1464) *
                C2659 +
            (C32095 * C694 - C2654 * C688 + C31899 * C1467 - C2655 * C1466) *
                C32130) *
               C31854 * C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                 C30875 +
             (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                 C32076 +
             (C2661 - C2662 + C2663 - C2664) * C30856 +
             (C2665 - C2666 + C2667 - C2668) * C31762) *
                C10013 +
            ((C4477 - C4478 + C4479 - C4480) * C30875 +
             (C4481 - C4482 + C4483 - C4484) * C32076 + C4925 * C30856 +
             C4926 * C31762) *
                C10014 +
            C12501 * C32129) *
               C572 +
           (((C4478 - C4477 + C4480 - C4479) * C30875 +
             (C4482 - C4481 + C4484 - C4483) * C32076 + C4927 * C30856 +
             C4928 * C31762) *
                C10013 +
            ((C4485 - C4486 + C4487 - C4488) * C30875 +
             (C4489 - C4490 + C4491 - C4492) * C32076 + C12902 * C30856 +
             C12903 * C31762) *
                C10014 +
            ((C12475 - C12476 + C12477 - C12478) * C30875 +
             (C12479 - C12480 + C12481 - C12482) * C32076 +
             (C12483 - C12484 + C12485 - C12486) * C30856 +
             (C12487 - C12488 + C12489 - C12490) * C31762) *
                C32129) *
               C573) *
              C466 +
          ((((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                 C30875 +
             (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                 C32076 +
             (C3031 - C3032 + C3033 - C3034) * C30856 +
             (C3035 - C3036 + C3037 - C3038) * C31762) *
                C10013 +
            ((C5125 - C5126 + C5127 - C5128) * C30875 +
             (C5129 - C5130 + C5131 - C5132) * C32076 +
             (C4703 - C4704 + C4705 - C4706) * C30856 +
             (C4707 - C4708 + C4709 - C4710) * C31762) *
                C10014 +
            ((C13098 - C13099 + C13100 - C13101) * C30875 +
             (C13102 - C13103 + C13104 - C13105) * C32076 +
             (C12696 - C12697 + C12698 - C12699) * C30856 +
             (C12700 - C12701 + C12702 - C12703) * C31762) *
                C32129) *
               C572 +
           (((C5126 - C5125 + C5128 - C5127) * C30875 +
             (C5130 - C5129 + C5132 - C5131) * C32076 +
             (C4704 - C4703 + C4706 - C4705) * C30856 +
             (C4708 - C4707 + C4710 - C4709) * C31762) *
                C10013 +
            ((C13099 - C13098 + C13101 - C13100) * C30875 +
             (C13103 - C13102 + C13105 - C13104) * C32076 +
             (C12697 - C12696 + C12699 - C12698) * C30856 +
             (C12701 - C12700 + C12703 - C12702) * C31762) *
                C10014 +
            ((C32095 * C2533 - C2654 * C2530 + C31899 * C6815 - C2655 * C6812) *
                 C30875 +
             (C32095 * C2539 - C2654 * C2534 + C31899 * C6821 - C2655 * C6816) *
                 C32076 +
             (C32095 * C2535 - C2654 * C2531 + C31899 * C7170 - C2655 * C7169) *
                 C30856 +
             (C32095 * C2540 - C2654 * C2536 + C31899 * C7172 - C2655 * C7171) *
                 C31762) *
                C32129) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                   C2656 +
               (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                   C2650 +
               (C2661 - C2662 + C2663 - C2664) * C2657 +
               (C2665 - C2666 + C2667 - C2668) * C2651 + C2701 * C2658 +
               C2702 * C2652 + C2703 * C2659 + C2704 * C32130) *
                  C31854 * C31813 * C31799 * C110 +
              ((C2662 - C2661 + C2664 - C2663) * C2656 +
               (C2666 - C2665 + C2668 - C2667) * C2650 +
               (C2670 - C2669 + C2672 - C2671) * C2657 +
               (C2674 - C2673 + C2676 - C2675) * C2651 +
               (C2678 - C2677 + C2680 - C2679) * C2658 +
               (C2682 - C2681 + C2684 - C2683) * C2652 +
               (C2685 - C2686 + C2687 - C2688) * C2659 +
               (C2689 - C2690 + C2691 - C2692) * C32130) *
                  C31854 * C31813 * C31799 * C111 +
              (C2701 * C2656 + C2702 * C2650 + C2703 * C2657 + C2704 * C2651 +
               (C2686 - C2685 + C2688 - C2687) * C2658 +
               (C2690 - C2689 + C2692 - C2691) * C2652 +
               (C32095 * C136 - C2654 * C124 + C31899 * C471 - C2655 * C470) *
                   C2659 +
               (C32095 * C145 - C2654 * C137 + C31899 * C473 - C2655 * C472) *
                   C32130) *
                  C31854 * C31813 * C31799 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                   C2656 +
               (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                   C2650 +
               (C2661 - C2662 + C2663 - C2664) * C2657 +
               (C2665 - C2666 + C2667 - C2668) * C2651 + C2701 * C2658 +
               C2702 * C2652 + C2703 * C2659 + C2704 * C32130) *
                  C31854 * C31813 * C235 +
              ((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                   C2656 +
               (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                   C2650 +
               (C2654 * C240 - C32095 * C251 + C2655 * C245 - C31899 * C261) *
                   C2657 +
               (C2654 * C252 - C32095 * C270 + C2655 * C262 - C31899 * C275) *
                   C2651 +
               (C2654 * C241 - C32095 * C253 + C2655 * C246 - C31899 * C263) *
                   C2658 +
               (C2654 * C254 - C32095 * C271 + C2655 * C264 - C31899 * C276) *
                   C2652 +
               (C2654 * C242 - C32095 * C255 + C2655 * C247 - C31899 * C265) *
                   C2659 +
               (C2654 * C256 - C32095 * C272 + C2655 * C266 - C31899 * C277) *
                   C32130) *
                  C31854 * C31813 * C236 +
              ((C32095 * C259 - C2654 * C244 + C31899 * C980 - C2655 * C974) *
                   C2656 +
               (C32095 * C274 - C2654 * C260 + C31899 * C992 - C2655 * C981) *
                   C2650 +
               (C32095 * C261 - C2654 * C245 + C31899 * C982 - C2655 * C975) *
                   C2657 +
               (C32095 * C275 - C2654 * C262 + C31899 * C993 - C2655 * C983) *
                   C2651 +
               (C32095 * C263 - C2654 * C246 + C31899 * C984 - C2655 * C976) *
                   C2658 +
               (C32095 * C276 - C2654 * C264 + C31899 * C994 - C2655 * C985) *
                   C2652 +
               (C32095 * C265 - C2654 * C247 + C31899 * C1291 - C2655 * C1290) *
                   C2659 +
               (C32095 * C277 - C2654 * C266 + C31899 * C1293 - C2655 * C1292) *
                   C32130) *
                  C31854 * C31813 * C237) *
             C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
               C2656 +
           (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
               C2650 +
           (C2661 - C2662 + C2663 - C2664) * C2657 +
           (C2665 - C2666 + C2667 - C2668) * C2651 + C2701 * C2658 +
           C2702 * C2652 + C2703 * C2659 + C2704 * C32130) *
              C31854 * C341 +
          ((C2654 * C344 - C32095 * C354 + C2655 * C676 - C31899 * C681) *
               C2656 +
           (C2654 * C355 - C32095 * C374 + C2655 * C682 - C31899 * C691) *
               C2650 +
           (C2654 * C345 - C32095 * C356 + C2655 * C677 - C31899 * C683) *
               C2657 +
           (C2654 * C357 - C32095 * C375 + C2655 * C684 - C31899 * C692) *
               C2651 +
           (C2654 * C346 - C32095 * C358 + C2655 * C678 - C31899 * C685) *
               C2658 +
           (C2654 * C359 - C32095 * C376 + C2655 * C686 - C31899 * C693) *
               C2652 +
           (C2654 * C347 - C32095 * C360 + C2655 * C679 - C31899 * C687) *
               C2659 +
           (C2654 * C361 - C32095 * C377 + C2655 * C688 - C31899 * C694) *
               C32130) *
              C31854 * C342 +
          ((C32095 * C364 - C2654 * C349 + C31899 * C1123 - C2655 * C1111) *
               C2656 +
           (C32095 * C379 - C2654 * C365 + C31899 * C1138 - C2655 * C1125) *
               C2650 +
           (C32095 * C366 - C2654 * C350 + C31899 * C1127 - C2655 * C1113) *
               C2657 +
           (C32095 * C380 - C2654 * C367 + C31899 * C1140 - C2655 * C1129) *
               C2651 +
           (C32095 * C368 - C2654 * C351 + C31899 * C1131 - C2655 * C1115) *
               C2658 +
           (C32095 * C381 - C2654 * C369 + C31899 * C1142 - C2655 * C1133) *
               C2652 +
           (C32095 * C370 - C2654 * C352 + C31899 * C2205 - C2655 * C2204) *
               C2659 +
           (C32095 * C382 - C2654 * C371 + C31899 * C2207 - C2655 * C2206) *
               C32130) *
              C31854 * C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
            C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
               C30875 +
           (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
            C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
               C32076 +
           (C7470 - C7471 + C7472 - C7473 + C7474 - C7475 + C7476 - C7477) *
               C30856 +
           (C7478 - C7479 + C7480 - C7481 + C7482 - C7483 + C7484 - C7485) *
               C31762) *
              C31854 * C31813 * C31799 * C110 +
          ((C7471 - C7470 + C7473 - C7472 + C7475 - C7474 + C7477 - C7476) *
               C30875 +
           (C7479 - C7478 + C7481 - C7480 + C7483 - C7482 + C7485 - C7484) *
               C32076 +
           (C7486 - C7487 + C7488 - C7489 + C7490 - C7491 + C7492 - C7493) *
               C30856 +
           (C7494 - C7495 + C7496 - C7497 + C7498 - C7499 + C7500 - C7501) *
               C31762) *
              C31854 * C31813 * C31799 * C111 +
          ((C7487 - C7486 + C7489 - C7488 + C7491 - C7490 + C7493 - C7492) *
               C30875 +
           (C7495 - C7494 + C7497 - C7496 + C7499 - C7498 + C7501 - C7500) *
               C32076 +
           (C7457 * C132 - C7463 * C122 + C7458 * C255 - C7464 * C242 +
            C7459 * C265 - C7465 * C247 + C32136 * C1291 - C7466 * C1290) *
               C30856 +
           (C7457 * C143 - C7463 * C133 + C7458 * C272 - C7464 * C256 +
            C7459 * C277 - C7465 * C266 + C32136 * C1293 - C7466 * C1292) *
               C31762) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
            C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
               C30875 +
           (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
            C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
               C32076 +
           (C7470 - C7471 + C7472 - C7473 + C7474 - C7475 + C7476 - C7477) *
               C30856 +
           (C7478 - C7479 + C7480 - C7481 + C7482 - C7483 + C7484 - C7485) *
               C31762) *
              C31854 * C31813 * C235 +
          ((C7463 * C239 - C7457 * C249 + C7464 * C244 - C7458 * C259 +
            C7465 * C974 - C7459 * C980 + C7466 * C977 - C32136 * C986) *
               C30875 +
           (C7463 * C250 - C7457 * C269 + C7464 * C260 - C7458 * C274 +
            C7465 * C981 - C7459 * C992 + C7466 * C987 - C32136 * C995) *
               C32076 +
           (C7463 * C240 - C7457 * C251 + C7464 * C245 - C7458 * C261 +
            C7465 * C975 - C7459 * C982 + C7466 * C978 - C32136 * C988) *
               C30856 +
           (C7463 * C252 - C7457 * C270 + C7464 * C262 - C7458 * C275 +
            C7465 * C983 - C7459 * C993 + C7466 * C989 - C32136 * C996) *
               C31762) *
              C31854 * C31813 * C236 +
          ((C7457 * C259 - C7463 * C244 + C7458 * C980 - C7464 * C974 +
            C7459 * C986 - C7465 * C977 + C32136 * C6144 - C7466 * C6142) *
               C30875 +
           (C7457 * C274 - C7463 * C260 + C7458 * C992 - C7464 * C981 +
            C7459 * C995 - C7465 * C987 + C32136 * C6148 - C7466 * C6145) *
               C32076 +
           (C7457 * C261 - C7463 * C245 + C7458 * C982 - C7464 * C975 +
            C7459 * C988 - C7465 * C978 + C32136 * C6307 - C7466 * C6306) *
               C30856 +
           (C7457 * C275 - C7463 * C262 + C7458 * C993 - C7464 * C983 +
            C7459 * C996 - C7465 * C989 + C32136 * C6309 - C7466 * C6308) *
               C31762) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
            C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
               C30875 +
           (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
            C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
               C32076 +
           (C7470 - C7471 + C7472 - C7473 + C7474 - C7475 + C7476 - C7477) *
               C30856 +
           (C7478 - C7479 + C7480 - C7481 + C7482 - C7483 + C7484 - C7485) *
               C31762) *
              C31854 * C341 +
          ((C7463 * C344 - C7457 * C354 + C7464 * C676 - C7458 * C681 +
            C7465 * C1108 - C7459 * C1117 + C7466 * C1638 - C32136 * C1641) *
               C30875 +
           (C7463 * C355 - C7457 * C374 + C7464 * C682 - C7458 * C691 +
            C7465 * C1118 - C7459 * C1135 + C7466 * C1642 - C32136 * C1647) *
               C32076 +
           (C7463 * C345 - C7457 * C356 + C7464 * C677 - C7458 * C683 +
            C7465 * C1109 - C7459 * C1119 + C7466 * C1639 - C32136 * C1643) *
               C30856 +
           (C7463 * C357 - C7457 * C375 + C7464 * C684 - C7458 * C692 +
            C7465 * C1120 - C7459 * C1136 + C7466 * C1644 - C32136 * C1648) *
               C31762) *
              C31854 * C342 +
          ((C7457 * C364 - C7463 * C349 + C7458 * C1123 - C7464 * C1111 +
            C7459 * C1124 - C7465 * C1112 + C32136 * C6217 - C7466 * C6213) *
               C30875 +
           (C7457 * C379 - C7463 * C365 + C7458 * C1138 - C7464 * C1125 +
            C7459 * C1139 - C7465 * C1126 + C32136 * C6222 - C7466 * C6219) *
               C32076 +
           (C7457 * C366 - C7463 * C350 + C7458 * C1127 - C7464 * C1113 +
            C7459 * C1128 - C7465 * C1114 + C32136 * C7020 - C7466 * C7019) *
               C30856 +
           (C7457 * C380 - C7463 * C367 + C7458 * C1140 - C7464 * C1129 +
            C7459 * C1141 - C7465 * C1130 + C32136 * C7022 - C7466 * C7021) *
               C31762) *
              C31854 * C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C30875 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C32076 +
            (C2661 - C2662 + C2663 - C2664) * C30856 +
            (C2665 - C2666 + C2667 - C2668) * C31762) *
               C10013 +
           ((C4477 - C4478 + C4479 - C4480) * C30875 +
            (C4481 - C4482 + C4483 - C4484) * C32076 + C4925 * C30856 +
            C4926 * C31762) *
               C10014 +
           ((C4486 - C4485 + C4488 - C4487) * C30875 +
            (C4490 - C4489 + C4492 - C4491) * C32076 +
            (C4494 - C4493 + C4496 - C4495) * C30856 +
            (C4498 - C4497 + C4500 - C4499) * C31762) *
               C32129) *
              C31813 * C31799 * C110 +
          (((C2662 - C2661 + C2664 - C2663) * C30875 +
            (C2666 - C2665 + C2668 - C2667) * C32076 +
            (C2670 - C2669 + C2672 - C2671) * C30856 +
            (C2674 - C2673 + C2676 - C2675) * C31762) *
               C10013 +
           (C4927 * C30875 + C4928 * C32076 + C4929 * C30856 + C4930 * C31762) *
               C10014 +
           ((C4493 - C4494 + C4495 - C4496) * C30875 +
            (C4497 - C4498 + C4499 - C4500) * C32076 +
            (C4501 - C4502 + C4503 - C4504) * C30856 +
            (C4505 - C4506 + C4507 - C4508) * C31762) *
               C32129) *
              C31813 * C31799 * C111 +
          ((C2701 * C30875 + C2702 * C32076 + C2703 * C30856 + C2704 * C31762) *
               C10013 +
           (C4183 * C30875 + C4184 * C32076 +
            (C3202 - C3201 + C3204 - C3203) * C30856 +
            (C3206 - C3205 + C3208 - C3207) * C31762) *
               C10014 +
           ((C4502 - C4501 + C4504 - C4503) * C30875 +
            (C4506 - C4505 + C4508 - C4507) * C32076 +
            (C32095 * C370 - C2654 * C352 + C31899 * C2205 - C2655 * C2204) *
                C30856 +
            (C32095 * C382 - C2654 * C371 + C31899 * C2207 - C2655 * C2206) *
                C31762) *
               C32129) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C30875 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C32076 +
            (C2661 - C2662 + C2663 - C2664) * C30856 +
            (C2665 - C2666 + C2667 - C2668) * C31762) *
               C10013 +
           ((C4477 - C4478 + C4479 - C4480) * C30875 +
            (C4481 - C4482 + C4483 - C4484) * C32076 + C4925 * C30856 +
            C4926 * C31762) *
               C10014 +
           ((C4486 - C4485 + C4488 - C4487) * C30875 +
            (C4490 - C4489 + C4492 - C4491) * C32076 +
            (C4494 - C4493 + C4496 - C4495) * C30856 +
            (C4498 - C4497 + C4500 - C4499) * C31762) *
               C32129) *
              C31813 * C235 +
          (((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                C30875 +
            (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                C32076 +
            (C3031 - C3032 + C3033 - C3034) * C30856 +
            (C3035 - C3036 + C3037 - C3038) * C31762) *
               C10013 +
           ((C5125 - C5126 + C5127 - C5128) * C30875 +
            (C5129 - C5130 + C5131 - C5132) * C32076 +
            (C4703 - C4704 + C4705 - C4706) * C30856 +
            (C4707 - C4708 + C4709 - C4710) * C31762) *
               C10014 +
           ((C2654 * C1111 - C32095 * C1123 + C2655 * C1112 - C31899 * C1124) *
                C30875 +
            (C2654 * C1125 - C32095 * C1138 + C2655 * C1126 - C31899 * C1139) *
                C32076 +
            (C2654 * C1113 - C32095 * C1127 + C2655 * C1114 - C31899 * C1128) *
                C30856 +
            (C2654 * C1129 - C32095 * C1140 + C2655 * C1130 - C31899 * C1141) *
                C31762) *
               C32129) *
              C31813 * C236 +
          (((C32095 * C259 - C2654 * C244 + C31899 * C980 - C2655 * C974) *
                C30875 +
            (C32095 * C274 - C2654 * C260 + C31899 * C992 - C2655 * C981) *
                C32076 +
            (C32095 * C261 - C2654 * C245 + C31899 * C982 - C2655 * C975) *
                C30856 +
            (C32095 * C275 - C2654 * C262 + C31899 * C993 - C2655 * C983) *
                C31762) *
               C10013 +
           ((C32095 * C1117 - C2654 * C1108 + C31899 * C1641 - C2655 * C1638) *
                C30875 +
            (C32095 * C1135 - C2654 * C1118 + C31899 * C1647 - C2655 * C1642) *
                C32076 +
            (C32095 * C1119 - C2654 * C1109 + C31899 * C1643 - C2655 * C1639) *
                C30856 +
            (C32095 * C1136 - C2654 * C1120 + C31899 * C1648 - C2655 * C1644) *
                C31762) *
               C10014 +
           ((C32095 * C1124 - C2654 * C1112 + C31899 * C6217 - C2655 * C6213) *
                C30875 +
            (C32095 * C1139 - C2654 * C1126 + C31899 * C6222 - C2655 * C6219) *
                C32076 +
            (C32095 * C1128 - C2654 * C1114 + C31899 * C7020 - C2655 * C7019) *
                C30856 +
            (C32095 * C1141 - C2654 * C1130 + C31899 * C7022 - C2655 * C7021) *
                C31762) *
               C32129) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C30875 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C32076 +
            (C2661 - C2662 + C2663 - C2664) * C30856 +
            (C2665 - C2666 + C2667 - C2668) * C31762) *
               C10013 +
           ((C4477 - C4478 + C4479 - C4480) * C30875 +
            (C4481 - C4482 + C4483 - C4484) * C32076 + C4925 * C30856 +
            C4926 * C31762) *
               C10014 +
           C12501 * C32129) *
              C341 +
          (((C4478 - C4477 + C4480 - C4479) * C30875 +
            (C4482 - C4481 + C4484 - C4483) * C32076 + C4927 * C30856 +
            C4928 * C31762) *
               C10013 +
           ((C4485 - C4486 + C4487 - C4488) * C30875 +
            (C4489 - C4490 + C4491 - C4492) * C32076 +
            (C4493 - C4494 + C4495 - C4496) * C30856 +
            (C4497 - C4498 + C4499 - C4500) * C31762) *
               C10014 +
           ((C12475 - C12476 + C12477 - C12478) * C30875 +
            (C12479 - C12480 + C12481 - C12482) * C32076 +
            (C12483 - C12484 + C12485 - C12486) * C30856 +
            (C12487 - C12488 + C12489 - C12490) * C31762) *
               C32129) *
              C342 +
          (C12501 * C10013 +
           ((C12476 - C12475 + C12478 - C12477) * C30875 +
            (C12480 - C12479 + C12482 - C12481) * C32076 +
            (C12484 - C12483 + C12486 - C12485) * C30856 +
            (C12488 - C12487 + C12490 - C12489) * C31762) *
               C10014 +
           ((C32095 * C2011 - C2654 * C2002 + C31899 * C6817 - C2655 * C6813) *
                C30875 +
            (C32095 * C2020 - C2654 * C2012 + C31899 * C6822 - C2655 * C6819) *
                C32076 +
            (C32095 * C2013 - C2654 * C2003 + C31899 * C11841 -
             C2655 * C11840) *
                C30856 +
            (C32095 * C2021 - C2654 * C2014 + C31899 * C11843 -
             C2655 * C11842) *
                C31762) *
               C32129) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
             C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
                C30875 +
            (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
             C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
                C32076 +
            (C7470 - C7471 + C7472 - C7473 + C7474 - C7475 + C7476 - C7477) *
                C30856 +
            (C7478 - C7479 + C7480 - C7481 + C7482 - C7483 + C7484 - C7485) *
                C31762) *
               C31854 * C572 +
           ((C7463 * C344 - C7457 * C354 + C7464 * C676 - C7458 * C681 +
             C7465 * C1108 - C7459 * C1117 + C7466 * C1638 - C32136 * C1641) *
                C30875 +
            (C7463 * C355 - C7457 * C374 + C7464 * C682 - C7458 * C691 +
             C7465 * C1118 - C7459 * C1135 + C7466 * C1642 - C32136 * C1647) *
                C32076 +
            (C7974 - C7975 + C7976 - C7977 + C7978 - C7979 + C7980 - C7981) *
                C30856 +
            (C7982 - C7983 + C7984 - C7985 + C7986 - C7987 + C7988 - C7989) *
                C31762) *
               C31854 * C573) *
              C31799 * C468 +
          (((C7471 - C7470 + C7473 - C7472 + C7475 - C7474 + C7477 - C7476) *
                C30875 +
            (C7479 - C7478 + C7481 - C7480 + C7483 - C7482 + C7485 - C7484) *
                C32076 +
            (C7486 - C7487 + C7488 - C7489 + C7490 - C7491 + C7492 - C7493) *
                C30856 +
            (C7494 - C7495 + C7496 - C7497 + C7498 - C7499 + C7500 - C7501) *
                C31762) *
               C31854 * C572 +
           ((C7975 - C7974 + C7977 - C7976 + C7979 - C7978 + C7981 - C7980) *
                C30875 +
            (C7983 - C7982 + C7985 - C7984 + C7987 - C7986 + C7989 - C7988) *
                C32076 +
            (C7457 * C358 - C7463 * C346 + C7458 * C685 - C7464 * C678 +
             C7459 * C1121 - C7465 * C1110 + C32136 * C1645 - C7466 * C1640) *
                C30856 +
            (C7457 * C376 - C7463 * C359 + C7458 * C693 - C7464 * C686 +
             C7459 * C1137 - C7465 * C1122 + C32136 * C1649 - C7466 * C1646) *
                C31762) *
               C31854 * C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C2656 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C2650 +
            (C2661 - C2662 + C2663 - C2664) * C2657 +
            (C2665 - C2666 + C2667 - C2668) * C2651 + C2701 * C2658 +
            C2702 * C2652 + C2703 * C2659 + C2704 * C32130) *
               C31854 * C572 +
           ((C2654 * C344 - C32095 * C354 + C2655 * C676 - C31899 * C681) *
                C2656 +
            (C2654 * C355 - C32095 * C374 + C2655 * C682 - C31899 * C691) *
                C2650 +
            (C3185 - C3186 + C3187 - C3188) * C2657 +
            (C3189 - C3190 + C3191 - C3192) * C2651 +
            (C3193 - C3194 + C3195 - C3196) * C2658 +
            (C3197 - C3198 + C3199 - C3200) * C2652 +
            (C3201 - C3202 + C3203 - C3204) * C2659 +
            (C3205 - C3206 + C3207 - C3208) * C32130) *
               C31854 * C573) *
              C31799 * C468 +
          (((C2662 - C2661 + C2664 - C2663) * C2656 +
            (C2666 - C2665 + C2668 - C2667) * C2650 +
            (C2670 - C2669 + C2672 - C2671) * C2657 +
            (C2674 - C2673 + C2676 - C2675) * C2651 +
            (C2678 - C2677 + C2680 - C2679) * C2658 +
            (C2682 - C2681 + C2684 - C2683) * C2652 +
            (C2685 - C2686 + C2687 - C2688) * C2659 +
            (C2689 - C2690 + C2691 - C2692) * C32130) *
               C31854 * C572 +
           ((C3186 - C3185 + C3188 - C3187) * C2656 +
            (C3190 - C3189 + C3192 - C3191) * C2650 +
            (C3194 - C3193 + C3196 - C3195) * C2657 +
            (C3198 - C3197 + C3200 - C3199) * C2651 +
            (C3202 - C3201 + C3204 - C3203) * C2658 +
            (C3206 - C3205 + C3208 - C3207) * C2652 +
            (C32095 * C362 - C2654 * C348 + C31899 * C689 - C2655 * C680) *
                C2659 +
            (C32095 * C378 - C2654 * C363 + C31899 * C695 - C2655 * C690) *
                C32130) *
               C31854 * C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                 C30875 +
             (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                 C32076 +
             (C2661 - C2662 + C2663 - C2664) * C30856 +
             (C2665 - C2666 + C2667 - C2668) * C31762) *
                C10013 +
            ((C4477 - C4478 + C4479 - C4480) * C30875 +
             (C4481 - C4482 + C4483 - C4484) * C32076 + C4925 * C30856 +
             C4926 * C31762) *
                C10014 +
            C12501 * C32129) *
               C572 +
           (((C4478 - C4477 + C4480 - C4479) * C30875 +
             (C4482 - C4481 + C4484 - C4483) * C32076 + C4927 * C30856 +
             C4928 * C31762) *
                C10013 +
            ((C4485 - C4486 + C4487 - C4488) * C30875 +
             (C4489 - C4490 + C4491 - C4492) * C32076 + C12902 * C30856 +
             C12903 * C31762) *
                C10014 +
            ((C12475 - C12476 + C12477 - C12478) * C30875 +
             (C12479 - C12480 + C12481 - C12482) * C32076 +
             (C12483 - C12484 + C12485 - C12486) * C30856 +
             (C12487 - C12488 + C12489 - C12490) * C31762) *
                C32129) *
               C573) *
              C31799 * C468 +
          ((((C2662 - C2661 + C2664 - C2663) * C30875 +
             (C2666 - C2665 + C2668 - C2667) * C32076 +
             (C2670 - C2669 + C2672 - C2671) * C30856 +
             (C2674 - C2673 + C2676 - C2675) * C31762) *
                C10013 +
            (C4927 * C30875 + C4928 * C32076 + C4929 * C30856 +
             C4930 * C31762) *
                C10014 +
            (C12902 * C30875 + C12903 * C32076 +
             (C4501 - C4502 + C4503 - C4504) * C30856 +
             (C4505 - C4506 + C4507 - C4508) * C31762) *
                C32129) *
               C572 +
           ((C4925 * C30875 + C4926 * C32076 + C4183 * C30856 +
             C4184 * C31762) *
                C10013 +
            (C12493 * C30875 + C12494 * C32076 +
             (C4502 - C4501 + C4504 - C4503) * C30856 +
             (C4506 - C4505 + C4508 - C4507) * C31762) *
                C10014 +
            ((C12484 - C12483 + C12486 - C12485) * C30875 +
             (C12488 - C12487 + C12490 - C12489) * C32076 +
             (C32095 * C2009 - C2654 * C2001 + C31899 * C2537 - C2655 * C2532) *
                 C30856 +
             (C32095 * C2019 - C2654 * C2010 + C31899 * C2541 - C2655 * C2538) *
                 C31762) *
                C32129) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
               C2656 +
           (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
               C2650 +
           (C2661 - C2662 + C2663 - C2664) * C2657 +
           (C2665 - C2666 + C2667 - C2668) * C2651 + C2701 * C2658 +
           C2702 * C2652 + C2703 * C2659 + C2704 * C32130) *
              C31854 * C31813 * C235 +
          ((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
               C2656 +
           (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
               C2650 +
           (C2654 * C240 - C32095 * C251 + C2655 * C245 - C31899 * C261) *
               C2657 +
           (C2654 * C252 - C32095 * C270 + C2655 * C262 - C31899 * C275) *
               C2651 +
           (C2654 * C241 - C32095 * C253 + C2655 * C246 - C31899 * C263) *
               C2658 +
           (C2654 * C254 - C32095 * C271 + C2655 * C264 - C31899 * C276) *
               C2652 +
           (C2654 * C242 - C32095 * C255 + C2655 * C247 - C31899 * C265) *
               C2659 +
           (C2654 * C256 - C32095 * C272 + C2655 * C266 - C31899 * C277) *
               C32130) *
              C31854 * C31813 * C236 +
          ((C32095 * C259 - C2654 * C244 + C31899 * C980 - C2655 * C974) *
               C2656 +
           (C32095 * C274 - C2654 * C260 + C31899 * C992 - C2655 * C981) *
               C2650 +
           (C32095 * C261 - C2654 * C245 + C31899 * C982 - C2655 * C975) *
               C2657 +
           (C32095 * C275 - C2654 * C262 + C31899 * C993 - C2655 * C983) *
               C2651 +
           (C32095 * C263 - C2654 * C246 + C31899 * C984 - C2655 * C976) *
               C2658 +
           (C32095 * C276 - C2654 * C264 + C31899 * C994 - C2655 * C985) *
               C2652 +
           (C32095 * C265 - C2654 * C247 + C31899 * C1291 - C2655 * C1290) *
               C2659 +
           (C32095 * C277 - C2654 * C266 + C31899 * C1293 - C2655 * C1292) *
               C32130) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
               C2656 +
           (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
               C2650 +
           (C2661 - C2662 + C2663 - C2664) * C2657 +
           (C2665 - C2666 + C2667 - C2668) * C2651 + C2701 * C2658 +
           C2702 * C2652 + C2703 * C2659 + C2704 * C32130) *
              C31854 * C31813 * C31799 * C110 +
          ((C2662 - C2661 + C2664 - C2663) * C2656 +
           (C2666 - C2665 + C2668 - C2667) * C2650 +
           (C2670 - C2669 + C2672 - C2671) * C2657 +
           (C2674 - C2673 + C2676 - C2675) * C2651 +
           (C2678 - C2677 + C2680 - C2679) * C2658 +
           (C2682 - C2681 + C2684 - C2683) * C2652 +
           (C2685 - C2686 + C2687 - C2688) * C2659 +
           (C2689 - C2690 + C2691 - C2692) * C32130) *
              C31854 * C31813 * C31799 * C111 +
          (C2701 * C2656 + C2702 * C2650 + C2703 * C2657 + C2704 * C2651 +
           (C2686 - C2685 + C2688 - C2687) * C2658 +
           (C2690 - C2689 + C2692 - C2691) * C2652 +
           (C32095 * C136 - C2654 * C124 + C31899 * C471 - C2655 * C470) *
               C2659 +
           (C32095 * C145 - C2654 * C137 + C31899 * C473 - C2655 * C472) *
               C32130) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
            C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
               C30875 +
           (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
            C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
               C32076 +
           (C7470 - C7471 + C7472 - C7473 + C7474 - C7475 + C7476 - C7477) *
               C30856 +
           (C7478 - C7479 + C7480 - C7481 + C7482 - C7483 + C7484 - C7485) *
               C31762) *
              C31854 * C31813 * C31799 * C110 +
          ((C7471 - C7470 + C7473 - C7472 + C7475 - C7474 + C7477 - C7476) *
               C30875 +
           (C7479 - C7478 + C7481 - C7480 + C7483 - C7482 + C7485 - C7484) *
               C32076 +
           (C7486 - C7487 + C7488 - C7489 + C7490 - C7491 + C7492 - C7493) *
               C30856 +
           (C7494 - C7495 + C7496 - C7497 + C7498 - C7499 + C7500 - C7501) *
               C31762) *
              C31854 * C31813 * C31799 * C111 +
          ((C7487 - C7486 + C7489 - C7488 + C7491 - C7490 + C7493 - C7492) *
               C30875 +
           (C7495 - C7494 + C7497 - C7496 + C7499 - C7498 + C7501 - C7500) *
               C32076 +
           (C7457 * C132 - C7463 * C122 + C7458 * C255 - C7464 * C242 +
            C7459 * C265 - C7465 * C247 + C32136 * C1291 - C7466 * C1290) *
               C30856 +
           (C7457 * C143 - C7463 * C133 + C7458 * C272 - C7464 * C256 +
            C7459 * C277 - C7465 * C266 + C32136 * C1293 - C7466 * C1292) *
               C31762) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
            C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
               C30875 +
           (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
            C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
               C32076 +
           (C7470 - C7471 + C7472 - C7473 + C7474 - C7475 + C7476 - C7477) *
               C30856 +
           (C7478 - C7479 + C7480 - C7481 + C7482 - C7483 + C7484 - C7485) *
               C31762) *
              C31854 * C31813 * C235 +
          ((C7463 * C239 - C7457 * C249 + C7464 * C244 - C7458 * C259 +
            C7465 * C974 - C7459 * C980 + C7466 * C977 - C32136 * C986) *
               C30875 +
           (C7463 * C250 - C7457 * C269 + C7464 * C260 - C7458 * C274 +
            C7465 * C981 - C7459 * C992 + C7466 * C987 - C32136 * C995) *
               C32076 +
           (C7463 * C240 - C7457 * C251 + C7464 * C245 - C7458 * C261 +
            C7465 * C975 - C7459 * C982 + C7466 * C978 - C32136 * C988) *
               C30856 +
           (C7463 * C252 - C7457 * C270 + C7464 * C262 - C7458 * C275 +
            C7465 * C983 - C7459 * C993 + C7466 * C989 - C32136 * C996) *
               C31762) *
              C31854 * C31813 * C236 +
          ((C7457 * C259 - C7463 * C244 + C7458 * C980 - C7464 * C974 +
            C7459 * C986 - C7465 * C977 + C32136 * C6144 - C7466 * C6142) *
               C30875 +
           (C7457 * C274 - C7463 * C260 + C7458 * C992 - C7464 * C981 +
            C7459 * C995 - C7465 * C987 + C32136 * C6148 - C7466 * C6145) *
               C32076 +
           (C7457 * C261 - C7463 * C245 + C7458 * C982 - C7464 * C975 +
            C7459 * C988 - C7465 * C978 + C32136 * C6307 - C7466 * C6306) *
               C30856 +
           (C7457 * C275 - C7463 * C262 + C7458 * C993 - C7464 * C983 +
            C7459 * C996 - C7465 * C989 + C32136 * C6309 - C7466 * C6308) *
               C31762) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C30875 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C32076 +
            (C2661 - C2662 + C2663 - C2664) * C30856 +
            (C2665 - C2666 + C2667 - C2668) * C31762) *
               C10013 +
           ((C4477 - C4478 + C4479 - C4480) * C30875 +
            (C4481 - C4482 + C4483 - C4484) * C32076 + C4925 * C30856 +
            C4926 * C31762) *
               C10014 +
           ((C4486 - C4485 + C4488 - C4487) * C30875 +
            (C4490 - C4489 + C4492 - C4491) * C32076 +
            (C4494 - C4493 + C4496 - C4495) * C30856 +
            (C4498 - C4497 + C4500 - C4499) * C31762) *
               C32129) *
              C31813 * C31799 * C110 +
          (((C2662 - C2661 + C2664 - C2663) * C30875 +
            (C2666 - C2665 + C2668 - C2667) * C32076 +
            (C2670 - C2669 + C2672 - C2671) * C30856 +
            (C2674 - C2673 + C2676 - C2675) * C31762) *
               C10013 +
           (C4927 * C30875 + C4928 * C32076 + C4929 * C30856 + C4930 * C31762) *
               C10014 +
           ((C4493 - C4494 + C4495 - C4496) * C30875 +
            (C4497 - C4498 + C4499 - C4500) * C32076 +
            (C4501 - C4502 + C4503 - C4504) * C30856 +
            (C4505 - C4506 + C4507 - C4508) * C31762) *
               C32129) *
              C31813 * C31799 * C111 +
          ((C2701 * C30875 + C2702 * C32076 + C2703 * C30856 + C2704 * C31762) *
               C10013 +
           (C4183 * C30875 + C4184 * C32076 +
            (C3202 - C3201 + C3204 - C3203) * C30856 +
            (C3206 - C3205 + C3208 - C3207) * C31762) *
               C10014 +
           ((C4502 - C4501 + C4504 - C4503) * C30875 +
            (C4506 - C4505 + C4508 - C4507) * C32076 +
            (C32095 * C370 - C2654 * C352 + C31899 * C2205 - C2655 * C2204) *
                C30856 +
            (C32095 * C382 - C2654 * C371 + C31899 * C2207 - C2655 * C2206) *
                C31762) *
               C32129) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C30875 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C32076 +
            (C2661 - C2662 + C2663 - C2664) * C30856 +
            (C2665 - C2666 + C2667 - C2668) * C31762) *
               C10013 +
           ((C4477 - C4478 + C4479 - C4480) * C30875 +
            (C4481 - C4482 + C4483 - C4484) * C32076 + C4925 * C30856 +
            C4926 * C31762) *
               C10014 +
           ((C4486 - C4485 + C4488 - C4487) * C30875 +
            (C4490 - C4489 + C4492 - C4491) * C32076 +
            (C4494 - C4493 + C4496 - C4495) * C30856 +
            (C4498 - C4497 + C4500 - C4499) * C31762) *
               C32129) *
              C31813 * C235 +
          (((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                C30875 +
            (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                C32076 +
            (C3031 - C3032 + C3033 - C3034) * C30856 +
            (C3035 - C3036 + C3037 - C3038) * C31762) *
               C10013 +
           ((C5125 - C5126 + C5127 - C5128) * C30875 +
            (C5129 - C5130 + C5131 - C5132) * C32076 +
            (C4703 - C4704 + C4705 - C4706) * C30856 +
            (C4707 - C4708 + C4709 - C4710) * C31762) *
               C10014 +
           ((C2654 * C1111 - C32095 * C1123 + C2655 * C1112 - C31899 * C1124) *
                C30875 +
            (C2654 * C1125 - C32095 * C1138 + C2655 * C1126 - C31899 * C1139) *
                C32076 +
            (C2654 * C1113 - C32095 * C1127 + C2655 * C1114 - C31899 * C1128) *
                C30856 +
            (C2654 * C1129 - C32095 * C1140 + C2655 * C1130 - C31899 * C1141) *
                C31762) *
               C32129) *
              C31813 * C236 +
          (((C32095 * C259 - C2654 * C244 + C31899 * C980 - C2655 * C974) *
                C30875 +
            (C32095 * C274 - C2654 * C260 + C31899 * C992 - C2655 * C981) *
                C32076 +
            (C32095 * C261 - C2654 * C245 + C31899 * C982 - C2655 * C975) *
                C30856 +
            (C32095 * C275 - C2654 * C262 + C31899 * C993 - C2655 * C983) *
                C31762) *
               C10013 +
           ((C32095 * C1117 - C2654 * C1108 + C31899 * C1641 - C2655 * C1638) *
                C30875 +
            (C32095 * C1135 - C2654 * C1118 + C31899 * C1647 - C2655 * C1642) *
                C32076 +
            (C32095 * C1119 - C2654 * C1109 + C31899 * C1643 - C2655 * C1639) *
                C30856 +
            (C32095 * C1136 - C2654 * C1120 + C31899 * C1648 - C2655 * C1644) *
                C31762) *
               C10014 +
           ((C32095 * C1124 - C2654 * C1112 + C31899 * C6217 - C2655 * C6213) *
                C30875 +
            (C32095 * C1139 - C2654 * C1126 + C31899 * C6222 - C2655 * C6219) *
                C32076 +
            (C32095 * C1128 - C2654 * C1114 + C31899 * C7020 - C2655 * C7019) *
                C30856 +
            (C32095 * C1141 - C2654 * C1130 + C31899 * C7022 - C2655 * C7021) *
                C31762) *
               C32129) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
              C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
                 C6079 +
             (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
              C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
                 C31752) *
                C32096 +
            ((C9466 - C9467 + C9468 - C9469 + C9470 - C9471 + C9472 - C9473) *
                 C6079 +
             (C9474 - C9475 + C9476 - C9477 + C9478 - C9479 + C9480 - C9481) *
                 C31752) *
                C31941) *
               C31813 * C466 +
           (((C7463 * C239 - C7457 * C249 + C7464 * C244 - C7458 * C259 +
              C7465 * C974 - C7459 * C980 + C7466 * C977 - C32136 * C986) *
                 C6079 +
             (C7463 * C250 - C7457 * C269 + C7464 * C260 - C7458 * C274 +
              C7465 * C981 - C7459 * C992 + C7466 * C987 - C32136 * C995) *
                 C31752) *
                C32096 +
            ((C7463 * C676 - C7457 * C681 + C7464 * C1108 - C7458 * C1117 +
              C7465 * C1638 - C7459 * C1641 + C7466 * C6212 - C32136 * C6215) *
                 C6079 +
             (C7463 * C682 - C7457 * C691 + C7464 * C1118 - C7458 * C1135 +
              C7465 * C1642 - C7459 * C1647 + C7466 * C6216 - C32136 * C6221) *
                 C31752) *
                C31941) *
               C31813 * C467) *
              C468 +
          ((((C7471 - C7470 + C7473 - C7472 + C7475 - C7474 + C7477 - C7476) *
                 C6079 +
             (C7479 - C7478 + C7481 - C7480 + C7483 - C7482 + C7485 - C7484) *
                 C31752) *
                C32096 +
            ((C7974 - C7975 + C7976 - C7977 + C7978 - C7979 + C7980 - C7981) *
                 C6079 +
             (C7982 - C7983 + C7984 - C7985 + C7986 - C7987 + C7988 - C7989) *
                 C31752) *
                C31941) *
               C31813 * C466 +
           (((C7829 - C7828 + C7831 - C7830 + C7833 - C7832 + C7835 - C7834) *
                 C6079 +
             (C7837 - C7836 + C7839 - C7838 + C7841 - C7840 + C7843 - C7842) *
                 C31752) *
                C32096 +
            ((C7457 * C683 - C7463 * C677 + C7458 * C1119 - C7464 * C1109 +
              C7459 * C1643 - C7465 * C1639 + C32136 * C6393 - C7466 * C6392) *
                 C6079 +
             (C7457 * C692 - C7463 * C684 + C7458 * C1136 - C7464 * C1120 +
              C7459 * C1648 - C7465 * C1644 + C32136 * C6395 - C7466 * C6394) *
                 C31752) *
                C31941) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                 C815 +
             (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                 C809 +
             (C2661 - C2662 + C2663 - C2664) * C816 +
             (C2665 - C2666 + C2667 - C2668) * C810 + C2701 * C817 +
             C2702 * C32115) *
                C32096 +
            ((C4477 - C4478 + C4479 - C4480) * C815 +
             (C4481 - C4482 + C4483 - C4484) * C809 +
             (C3186 - C3185 + C3188 - C3187) * C816 +
             (C3190 - C3189 + C3192 - C3191) * C810 + C4183 * C817 +
             C4184 * C32115) *
                C31941) *
               C31813 * C466 +
           (((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                 C815 +
             (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                 C809 +
             (C3031 - C3032 + C3033 - C3034) * C816 +
             (C3035 - C3036 + C3037 - C3038) * C810 +
             (C3039 - C3040 + C3041 - C3042) * C817 +
             (C3043 - C3044 + C3045 - C3046) * C32115) *
                C32096 +
            ((C2654 * C676 - C32095 * C681 + C2655 * C1108 - C31899 * C1117) *
                 C815 +
             (C2654 * C682 - C32095 * C691 + C2655 * C1118 - C31899 * C1135) *
                 C809 +
             (C4703 - C4704 + C4705 - C4706) * C816 +
             (C4707 - C4708 + C4709 - C4710) * C810 +
             (C4711 - C4712 + C4713 - C4714) * C817 +
             (C4715 - C4716 + C4717 - C4718) * C32115) *
                C31941) *
               C31813 * C467) *
              C468 +
          ((((C2662 - C2661 + C2664 - C2663) * C815 +
             (C2666 - C2665 + C2668 - C2667) * C809 +
             (C2670 - C2669 + C2672 - C2671) * C816 +
             (C2674 - C2673 + C2676 - C2675) * C810 +
             (C2678 - C2677 + C2680 - C2679) * C817 +
             (C2682 - C2681 + C2684 - C2683) * C32115) *
                C32096 +
            ((C3185 - C3186 + C3187 - C3188) * C815 +
             (C3189 - C3190 + C3191 - C3192) * C809 +
             (C3193 - C3194 + C3195 - C3196) * C816 +
             (C3197 - C3198 + C3199 - C3200) * C810 +
             (C3201 - C3202 + C3203 - C3204) * C817 +
             (C3205 - C3206 + C3207 - C3208) * C32115) *
                C31941) *
               C31813 * C466 +
           (((C3032 - C3031 + C3034 - C3033) * C815 +
             (C3036 - C3035 + C3038 - C3037) * C809 +
             (C3040 - C3039 + C3042 - C3041) * C816 +
             (C3044 - C3043 + C3046 - C3045) * C810 +
             (C3048 - C3047 + C3050 - C3049) * C817 +
             (C3052 - C3051 + C3054 - C3053) * C32115) *
                C32096 +
            ((C4704 - C4703 + C4706 - C4705) * C815 +
             (C4708 - C4707 + C4710 - C4709) * C809 +
             (C4712 - C4711 + C4714 - C4713) * C816 +
             (C4716 - C4715 + C4718 - C4717) * C810 +
             (C32095 * C687 - C2654 * C679 + C31899 * C1465 - C2655 * C1464) *
                 C817 +
             (C32095 * C694 - C2654 * C688 + C31899 * C1467 - C2655 * C1466) *
                 C32115) *
                C31941) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                 C6079 +
             (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                 C31752) *
                C13203 +
            ((C4477 - C4478 + C4479 - C4480) * C6079 +
             (C4481 - C4482 + C4483 - C4484) * C31752) *
                C13204 +
            C14124 * C13205 + C14129 * C32142) *
               C31813 * C466 +
           (((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                 C6079 +
             (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                 C31752) *
                C13203 +
            ((C5125 - C5126 + C5127 - C5128) * C6079 +
             (C5129 - C5130 + C5131 - C5132) * C31752) *
                C13204 +
            ((C13098 - C13099 + C13100 - C13101) * C6079 +
             (C13102 - C13103 + C13104 - C13105) * C31752) *
                C13205 +
            ((C2654 * C2530 - C32095 * C2533 + C2655 * C6812 - C31899 * C6815) *
                 C6079 +
             (C2654 * C2534 - C32095 * C2539 + C2655 * C6816 - C31899 * C6821) *
                 C31752) *
                C32142) *
               C31813 * C467) *
              C468 +
          ((((C2662 - C2661 + C2664 - C2663) * C6079 +
             (C2666 - C2665 + C2668 - C2667) * C31752) *
                C13203 +
            (C4927 * C6079 + C4928 * C31752) * C13204 +
            (C12902 * C6079 + C12903 * C31752) * C13205 +
            ((C12483 - C12484 + C12485 - C12486) * C6079 +
             (C12487 - C12488 + C12489 - C12490) * C31752) *
                C32142) *
               C31813 * C466 +
           (((C3032 - C3031 + C3034 - C3033) * C6079 +
             (C3036 - C3035 + C3038 - C3037) * C31752) *
                C13203 +
            ((C4704 - C4703 + C4706 - C4705) * C6079 +
             (C4708 - C4707 + C4710 - C4709) * C31752) *
                C13204 +
            ((C12697 - C12696 + C12699 - C12698) * C6079 +
             (C12701 - C12700 + C12703 - C12702) * C31752) *
                C13205 +
            ((C32095 * C2535 - C2654 * C2531 + C31899 * C7170 - C2655 * C7169) *
                 C6079 +
             (C32095 * C2540 - C2654 * C2536 + C31899 * C7172 - C2655 * C7171) *
                 C31752) *
                C32142) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
              C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
                 C6079 +
             (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
              C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
                 C31752) *
                C32096 +
            ((C9466 - C9467 + C9468 - C9469 + C9470 - C9471 + C9472 - C9473) *
                 C6079 +
             (C9474 - C9475 + C9476 - C9477 + C9478 - C9479 + C9480 - C9481) *
                 C31752) *
                C31941) *
               C572 +
           (((C9467 - C9466 + C9469 - C9468 + C9471 - C9470 + C9473 - C9472) *
                 C6079 +
             (C9475 - C9474 + C9477 - C9476 + C9479 - C9478 + C9481 - C9480) *
                 C31752) *
                C32096 +
            ((C9482 - C9483 + C9484 - C9485 + C9486 - C9487 + C9488 - C9489) *
                 C6079 +
             (C9490 - C9491 + C9492 - C9493 + C9494 - C9495 + C9496 - C9497) *
                 C31752) *
                C31941) *
               C573) *
              C466 +
          ((((C7463 * C239 - C7457 * C249 + C7464 * C244 - C7458 * C259 +
              C7465 * C974 - C7459 * C980 + C7466 * C977 - C32136 * C986) *
                 C6079 +
             (C7463 * C250 - C7457 * C269 + C7464 * C260 - C7458 * C274 +
              C7465 * C981 - C7459 * C992 + C7466 * C987 - C32136 * C995) *
                 C31752) *
                C32096 +
            ((C9888 - C9889 + C9890 - C9891 + C9892 - C9893 + C9894 - C9895) *
                 C6079 +
             (C9896 - C9897 + C9898 - C9899 + C9900 - C9901 + C9902 - C9903) *
                 C31752) *
                C31941) *
               C572 +
           (((C9889 - C9888 + C9891 - C9890 + C9893 - C9892 + C9895 - C9894) *
                 C6079 +
             (C9897 - C9896 + C9899 - C9898 + C9901 - C9900 + C9903 - C9902) *
                 C31752) *
                C32096 +
            ((C7457 * C1123 - C7463 * C1111 + C7458 * C1124 - C7464 * C1112 +
              C7459 * C6217 - C7465 * C6213 + C32136 * C6218 - C7466 * C6214) *
                 C6079 +
             (C7457 * C1138 - C7463 * C1125 + C7458 * C1139 - C7464 * C1126 +
              C7459 * C6222 - C7465 * C6219 + C32136 * C6223 - C7466 * C6220) *
                 C31752) *
                C31941) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                 C815 +
             (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                 C809 +
             (C2661 - C2662 + C2663 - C2664) * C816 +
             (C2665 - C2666 + C2667 - C2668) * C810 + C2701 * C817 +
             C2702 * C32115) *
                C32096 +
            ((C4477 - C4478 + C4479 - C4480) * C815 +
             (C4481 - C4482 + C4483 - C4484) * C809 + C4925 * C816 +
             C4926 * C810 + C4183 * C817 + C4184 * C32115) *
                C31941) *
               C572 +
           (((C4478 - C4477 + C4480 - C4479) * C815 +
             (C4482 - C4481 + C4484 - C4483) * C809 + C4927 * C816 +
             C4928 * C810 + C4929 * C817 + C4930 * C32115) *
                C32096 +
            ((C4485 - C4486 + C4487 - C4488) * C815 +
             (C4489 - C4490 + C4491 - C4492) * C809 +
             (C4493 - C4494 + C4495 - C4496) * C816 +
             (C4497 - C4498 + C4499 - C4500) * C810 +
             (C4501 - C4502 + C4503 - C4504) * C817 +
             (C4505 - C4506 + C4507 - C4508) * C32115) *
                C31941) *
               C573) *
              C466 +
          ((((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                 C815 +
             (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                 C809 +
             (C3031 - C3032 + C3033 - C3034) * C816 +
             (C3035 - C3036 + C3037 - C3038) * C810 +
             (C3039 - C3040 + C3041 - C3042) * C817 +
             (C3043 - C3044 + C3045 - C3046) * C32115) *
                C32096 +
            ((C5125 - C5126 + C5127 - C5128) * C815 +
             (C5129 - C5130 + C5131 - C5132) * C809 +
             (C4703 - C4704 + C4705 - C4706) * C816 +
             (C4707 - C4708 + C4709 - C4710) * C810 +
             (C4711 - C4712 + C4713 - C4714) * C817 +
             (C4715 - C4716 + C4717 - C4718) * C32115) *
                C31941) *
               C572 +
           (((C5126 - C5125 + C5128 - C5127) * C815 +
             (C5130 - C5129 + C5132 - C5131) * C809 +
             (C4704 - C4703 + C4706 - C4705) * C816 +
             (C4708 - C4707 + C4710 - C4709) * C810 +
             (C4712 - C4711 + C4714 - C4713) * C817 +
             (C4716 - C4715 + C4718 - C4717) * C32115) *
                C32096 +
            ((C32095 * C1123 - C2654 * C1111 + C31899 * C1124 - C2655 * C1112) *
                 C815 +
             (C32095 * C1138 - C2654 * C1125 + C31899 * C1139 - C2655 * C1126) *
                 C809 +
             (C32095 * C1127 - C2654 * C1113 + C31899 * C1128 - C2655 * C1114) *
                 C816 +
             (C32095 * C1140 - C2654 * C1129 + C31899 * C1141 - C2655 * C1130) *
                 C810 +
             (C32095 * C1131 - C2654 * C1115 + C31899 * C1132 - C2655 * C1116) *
                 C817 +
             (C32095 * C1142 - C2654 * C1133 + C31899 * C1143 - C2655 * C1134) *
                 C32115) *
                C31941) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                 C6079 +
             (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                 C31752) *
                C13203 +
            ((C4477 - C4478 + C4479 - C4480) * C6079 +
             (C4481 - C4482 + C4483 - C4484) * C31752) *
                C13204 +
            C14124 * C13205 + C14129 * C32142) *
               C572 +
           (((C4478 - C4477 + C4480 - C4479) * C6079 +
             (C4482 - C4481 + C4484 - C4483) * C31752) *
                C13203 +
            ((C4485 - C4486 + C4487 - C4488) * C6079 +
             (C4489 - C4490 + C4491 - C4492) * C31752) *
                C13204 +
            ((C12475 - C12476 + C12477 - C12478) * C6079 +
             (C12479 - C12480 + C12481 - C12482) * C31752) *
                C13205 +
            ((C14116 - C14117 + C14118 - C14119) * C6079 +
             (C14120 - C14121 + C14122 - C14123) * C31752) *
                C32142) *
               C573) *
              C466 +
          ((((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                 C6079 +
             (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                 C31752) *
                C13203 +
            ((C5125 - C5126 + C5127 - C5128) * C6079 +
             (C5129 - C5130 + C5131 - C5132) * C31752) *
                C13204 +
            ((C13098 - C13099 + C13100 - C13101) * C6079 +
             (C13102 - C13103 + C13104 - C13105) * C31752) *
                C13205 +
            ((C14520 - C14521 + C14522 - C14523) * C6079 +
             (C14524 - C14525 + C14526 - C14527) * C31752) *
                C32142) *
               C572 +
           (((C5126 - C5125 + C5128 - C5127) * C6079 +
             (C5130 - C5129 + C5132 - C5131) * C31752) *
                C13203 +
            ((C13099 - C13098 + C13101 - C13100) * C6079 +
             (C13103 - C13102 + C13105 - C13104) * C31752) *
                C13204 +
            ((C14521 - C14520 + C14523 - C14522) * C6079 +
             (C14525 - C14524 + C14527 - C14526) * C31752) *
                C13205 +
            ((C32095 * C6817 - C2654 * C6813 + C31899 * C6818 - C2655 * C6814) *
                 C6079 +
             (C32095 * C6822 - C2654 * C6819 + C31899 * C6823 - C2655 * C6820) *
                 C31752) *
                C32142) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                    C815 +
                (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                    C809 +
                (C2661 - C2662 + C2663 - C2664) * C816 +
                (C2665 - C2666 + C2667 - C2668) * C810 + C2701 * C817 +
                C2702 * C32115) *
                   C32096 +
               ((C32095 * C354 - C2654 * C344 + C31899 * C681 - C2655 * C676) *
                    C815 +
                (C32095 * C374 - C2654 * C355 + C31899 * C691 - C2655 * C682) *
                    C809 +
                (C3186 - C3185 + C3188 - C3187) * C816 +
                (C3190 - C3189 + C3192 - C3191) * C810 + C4183 * C817 +
                C4184 * C32115) *
                   C31941) *
                  C31813 * C31799 * C110 +
              (((C2662 - C2661 + C2664 - C2663) * C815 +
                (C2666 - C2665 + C2668 - C2667) * C809 +
                (C2670 - C2669 + C2672 - C2671) * C816 +
                (C2674 - C2673 + C2676 - C2675) * C810 +
                (C2678 - C2677 + C2680 - C2679) * C817 +
                (C2682 - C2681 + C2684 - C2683) * C32115) *
                   C32096 +
               ((C3185 - C3186 + C3187 - C3188) * C815 +
                (C3189 - C3190 + C3191 - C3192) * C809 +
                (C3193 - C3194 + C3195 - C3196) * C816 +
                (C3197 - C3198 + C3199 - C3200) * C810 +
                (C3201 - C3202 + C3203 - C3204) * C817 +
                (C3205 - C3206 + C3207 - C3208) * C32115) *
                   C31941) *
                  C31813 * C31799 * C111 +
              ((C2701 * C815 + C2702 * C809 + C2703 * C816 + C2704 * C810 +
                (C2686 - C2685 + C2688 - C2687) * C817 +
                (C2690 - C2689 + C2692 - C2691) * C32115) *
                   C32096 +
               (C4183 * C815 + C4184 * C809 +
                (C3202 - C3201 + C3204 - C3203) * C816 +
                (C3206 - C3205 + C3208 - C3207) * C810 +
                (C32095 * C362 - C2654 * C348 + C31899 * C689 - C2655 * C680) *
                    C817 +
                (C32095 * C378 - C2654 * C363 + C31899 * C695 - C2655 * C690) *
                    C32115) *
                   C31941) *
                  C31813 * C31799 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                    C815 +
                (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                    C809 +
                (C2661 - C2662 + C2663 - C2664) * C816 +
                (C2665 - C2666 + C2667 - C2668) * C810 + C2701 * C817 +
                C2702 * C32115) *
                   C32096 +
               ((C32095 * C354 - C2654 * C344 + C31899 * C681 - C2655 * C676) *
                    C815 +
                (C32095 * C374 - C2654 * C355 + C31899 * C691 - C2655 * C682) *
                    C809 +
                (C3186 - C3185 + C3188 - C3187) * C816 +
                (C3190 - C3189 + C3192 - C3191) * C810 + C4183 * C817 +
                C4184 * C32115) *
                   C31941) *
                  C31813 * C235 +
              (((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                    C815 +
                (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                    C809 +
                (C3031 - C3032 + C3033 - C3034) * C816 +
                (C3035 - C3036 + C3037 - C3038) * C810 +
                (C3039 - C3040 + C3041 - C3042) * C817 +
                (C3043 - C3044 + C3045 - C3046) * C32115) *
                   C32096 +
               ((C2654 * C676 - C32095 * C681 + C2655 * C1108 -
                 C31899 * C1117) *
                    C815 +
                (C2654 * C682 - C32095 * C691 + C2655 * C1118 -
                 C31899 * C1135) *
                    C809 +
                (C2654 * C677 - C32095 * C683 + C2655 * C1109 -
                 C31899 * C1119) *
                    C816 +
                (C2654 * C684 - C32095 * C692 + C2655 * C1120 -
                 C31899 * C1136) *
                    C810 +
                (C2654 * C678 - C32095 * C685 + C2655 * C1110 -
                 C31899 * C1121) *
                    C817 +
                (C2654 * C686 - C32095 * C693 + C2655 * C1122 -
                 C31899 * C1137) *
                    C32115) *
                   C31941) *
                  C31813 * C236 +
              (((C32095 * C259 - C2654 * C244 + C31899 * C980 - C2655 * C974) *
                    C815 +
                (C32095 * C274 - C2654 * C260 + C31899 * C992 - C2655 * C981) *
                    C809 +
                (C32095 * C261 - C2654 * C245 + C31899 * C982 - C2655 * C975) *
                    C816 +
                (C32095 * C275 - C2654 * C262 + C31899 * C993 - C2655 * C983) *
                    C810 +
                (C32095 * C263 - C2654 * C246 + C31899 * C984 - C2655 * C976) *
                    C817 +
                (C32095 * C276 - C2654 * C264 + C31899 * C994 - C2655 * C985) *
                    C32115) *
                   C32096 +
               ((C32095 * C1117 - C2654 * C1108 + C31899 * C1641 -
                 C2655 * C1638) *
                    C815 +
                (C32095 * C1135 - C2654 * C1118 + C31899 * C1647 -
                 C2655 * C1642) *
                    C809 +
                (C32095 * C1119 - C2654 * C1109 + C31899 * C1643 -
                 C2655 * C1639) *
                    C816 +
                (C32095 * C1136 - C2654 * C1120 + C31899 * C1648 -
                 C2655 * C1644) *
                    C810 +
                (C32095 * C1121 - C2654 * C1110 + C31899 * C1645 -
                 C2655 * C1640) *
                    C817 +
                (C32095 * C1137 - C2654 * C1122 + C31899 * C1649 -
                 C2655 * C1646) *
                    C32115) *
                   C31941) *
                  C31813 * C237) *
             C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C815 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C809 +
            (C2661 - C2662 + C2663 - C2664) * C816 +
            (C2665 - C2666 + C2667 - C2668) * C810 + C2701 * C817 +
            C2702 * C32115) *
               C32096 +
           ((C4477 - C4478 + C4479 - C4480) * C815 +
            (C4481 - C4482 + C4483 - C4484) * C809 +
            (C3186 - C3185 + C3188 - C3187) * C816 +
            (C3190 - C3189 + C3192 - C3191) * C810 + C4183 * C817 +
            C4184 * C32115) *
               C31941) *
              C341 +
          (((C4478 - C4477 + C4480 - C4479) * C815 +
            (C4482 - C4481 + C4484 - C4483) * C809 +
            (C3185 - C3186 + C3187 - C3188) * C816 +
            (C3189 - C3190 + C3191 - C3192) * C810 +
            (C3193 - C3194 + C3195 - C3196) * C817 +
            (C3197 - C3198 + C3199 - C3200) * C32115) *
               C32096 +
           ((C4485 - C4486 + C4487 - C4488) * C815 +
            (C4489 - C4490 + C4491 - C4492) * C809 +
            (C4493 - C4494 + C4495 - C4496) * C816 +
            (C4497 - C4498 + C4499 - C4500) * C810 +
            (C4501 - C4502 + C4503 - C4504) * C817 +
            (C4505 - C4506 + C4507 - C4508) * C32115) *
               C31941) *
              C342 +
          (((C4486 - C4485 + C4488 - C4487) * C815 +
            (C4490 - C4489 + C4492 - C4491) * C809 +
            (C4494 - C4493 + C4496 - C4495) * C816 +
            (C4498 - C4497 + C4500 - C4499) * C810 +
            (C4502 - C4501 + C4504 - C4503) * C817 +
            (C4506 - C4505 + C4508 - C4507) * C32115) *
               C32096 +
           ((C32095 * C2005 - C2654 * C1999 + C31899 * C2533 - C2655 * C2530) *
                C815 +
            (C32095 * C2017 - C2654 * C2006 + C31899 * C2539 - C2655 * C2534) *
                C809 +
            (C32095 * C2007 - C2654 * C2000 + C31899 * C2535 - C2655 * C2531) *
                C816 +
            (C32095 * C2018 - C2654 * C2008 + C31899 * C2540 - C2655 * C2536) *
                C810 +
            (C32095 * C2009 - C2654 * C2001 + C31899 * C2537 - C2655 * C2532) *
                C817 +
            (C32095 * C2019 - C2654 * C2010 + C31899 * C2541 - C2655 * C2538) *
                C32115) *
               C31941) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
             C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
                C6079 +
            (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
             C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
                C31752) *
               C32096 +
           ((C7457 * C354 - C7463 * C344 + C7458 * C681 - C7464 * C676 +
             C7459 * C1117 - C7465 * C1108 + C32136 * C1641 - C7466 * C1638) *
                C6079 +
            (C7457 * C374 - C7463 * C355 + C7458 * C691 - C7464 * C682 +
             C7459 * C1135 - C7465 * C1118 + C32136 * C1647 - C7466 * C1642) *
                C31752) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C7471 - C7470 + C7473 - C7472 + C7475 - C7474 + C7477 - C7476) *
                C6079 +
            (C7479 - C7478 + C7481 - C7480 + C7483 - C7482 + C7485 - C7484) *
                C31752) *
               C32096 +
           ((C7974 - C7975 + C7976 - C7977 + C7978 - C7979 + C7980 - C7981) *
                C6079 +
            (C7982 - C7983 + C7984 - C7985 + C7986 - C7987 + C7988 - C7989) *
                C31752) *
               C31941) *
              C31813 * C31799 * C111 +
          (((C7487 - C7486 + C7489 - C7488 + C7491 - C7490 + C7493 - C7492) *
                C6079 +
            (C7495 - C7494 + C7497 - C7496 + C7499 - C7498 + C7501 - C7500) *
                C31752) *
               C32096 +
           ((C7457 * C358 - C7463 * C346 + C7458 * C685 - C7464 * C678 +
             C7459 * C1121 - C7465 * C1110 + C32136 * C1645 - C7466 * C1640) *
                C6079 +
            (C7457 * C376 - C7463 * C359 + C7458 * C693 - C7464 * C686 +
             C7459 * C1137 - C7465 * C1122 + C32136 * C1649 - C7466 * C1646) *
                C31752) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
             C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
                C6079 +
            (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
             C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
                C31752) *
               C32096 +
           ((C7457 * C354 - C7463 * C344 + C7458 * C681 - C7464 * C676 +
             C7459 * C1117 - C7465 * C1108 + C32136 * C1641 - C7466 * C1638) *
                C6079 +
            (C7457 * C374 - C7463 * C355 + C7458 * C691 - C7464 * C682 +
             C7459 * C1135 - C7465 * C1118 + C32136 * C1647 - C7466 * C1642) *
                C31752) *
               C31941) *
              C31813 * C235 +
          (((C7463 * C239 - C7457 * C249 + C7464 * C244 - C7458 * C259 +
             C7465 * C974 - C7459 * C980 + C7466 * C977 - C32136 * C986) *
                C6079 +
            (C7463 * C250 - C7457 * C269 + C7464 * C260 - C7458 * C274 +
             C7465 * C981 - C7459 * C992 + C7466 * C987 - C32136 * C995) *
                C31752) *
               C32096 +
           ((C7463 * C676 - C7457 * C681 + C7464 * C1108 - C7458 * C1117 +
             C7465 * C1638 - C7459 * C1641 + C7466 * C6212 - C32136 * C6215) *
                C6079 +
            (C7463 * C682 - C7457 * C691 + C7464 * C1118 - C7458 * C1135 +
             C7465 * C1642 - C7459 * C1647 + C7466 * C6216 - C32136 * C6221) *
                C31752) *
               C31941) *
              C31813 * C236 +
          (((C7457 * C259 - C7463 * C244 + C7458 * C980 - C7464 * C974 +
             C7459 * C986 - C7465 * C977 + C32136 * C6144 - C7466 * C6142) *
                C6079 +
            (C7457 * C274 - C7463 * C260 + C7458 * C992 - C7464 * C981 +
             C7459 * C995 - C7465 * C987 + C32136 * C6148 - C7466 * C6145) *
                C31752) *
               C32096 +
           ((C7457 * C1117 - C7463 * C1108 + C7458 * C1641 - C7464 * C1638 +
             C7459 * C6215 - C7465 * C6212 + C32136 * C6479 - C7466 * C6478) *
                C6079 +
            (C7457 * C1135 - C7463 * C1118 + C7458 * C1647 - C7464 * C1642 +
             C7459 * C6221 - C7465 * C6216 + C32136 * C6481 - C7466 * C6480) *
                C31752) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
             C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
                C6079 +
            (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
             C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
                C31752) *
               C32096 +
           ((C9466 - C9467 + C9468 - C9469 + C9470 - C9471 + C9472 - C9473) *
                C6079 +
            (C9474 - C9475 + C9476 - C9477 + C9478 - C9479 + C9480 - C9481) *
                C31752) *
               C31941) *
              C341 +
          (((C9467 - C9466 + C9469 - C9468 + C9471 - C9470 + C9473 - C9472) *
                C6079 +
            (C9475 - C9474 + C9477 - C9476 + C9479 - C9478 + C9481 - C9480) *
                C31752) *
               C32096 +
           ((C9482 - C9483 + C9484 - C9485 + C9486 - C9487 + C9488 - C9489) *
                C6079 +
            (C9490 - C9491 + C9492 - C9493 + C9494 - C9495 + C9496 - C9497) *
                C31752) *
               C31941) *
              C342 +
          (((C9483 - C9482 + C9485 - C9484 + C9487 - C9486 + C9489 - C9488) *
                C6079 +
            (C9491 - C9490 + C9493 - C9492 + C9495 - C9494 + C9497 - C9496) *
                C31752) *
               C32096 +
           ((C7457 * C2005 - C7463 * C1999 + C7458 * C2533 - C7464 * C2530 +
             C7459 * C6815 - C7465 * C6812 + C32136 * C7332 - C7466 * C7331) *
                C6079 +
            (C7457 * C2017 - C7463 * C2006 + C7458 * C2539 - C7464 * C2534 +
             C7459 * C6821 - C7465 * C6816 + C32136 * C7334 - C7466 * C7333) *
                C31752) *
               C31941) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C6079 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C31752) *
               C13203 +
           ((C4477 - C4478 + C4479 - C4480) * C6079 +
            (C4481 - C4482 + C4483 - C4484) * C31752) *
               C13204 +
           (C12491 * C6079 + C12492 * C31752) * C13205 +
           ((C12476 - C12475 + C12478 - C12477) * C6079 +
            (C12480 - C12479 + C12482 - C12481) * C31752) *
               C32142) *
              C31813 * C31799 * C110 +
          (((C2662 - C2661 + C2664 - C2663) * C6079 +
            (C2666 - C2665 + C2668 - C2667) * C31752) *
               C13203 +
           (C4927 * C6079 + C4928 * C31752) * C13204 +
           (C12902 * C6079 + C12903 * C31752) * C13205 +
           ((C12483 - C12484 + C12485 - C12486) * C6079 +
            (C12487 - C12488 + C12489 - C12490) * C31752) *
               C32142) *
              C31813 * C31799 * C111 +
          ((C2701 * C6079 + C2702 * C31752) * C13203 +
           (C4183 * C6079 + C4184 * C31752) * C13204 +
           ((C4502 - C4501 + C4504 - C4503) * C6079 +
            (C4506 - C4505 + C4508 - C4507) * C31752) *
               C13205 +
           ((C32095 * C2009 - C2654 * C2001 + C31899 * C2537 - C2655 * C2532) *
                C6079 +
            (C32095 * C2019 - C2654 * C2010 + C31899 * C2541 - C2655 * C2538) *
                C31752) *
               C32142) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C6079 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C31752) *
               C13203 +
           ((C4477 - C4478 + C4479 - C4480) * C6079 +
            (C4481 - C4482 + C4483 - C4484) * C31752) *
               C13204 +
           (C12491 * C6079 + C12492 * C31752) * C13205 +
           ((C12476 - C12475 + C12478 - C12477) * C6079 +
            (C12480 - C12479 + C12482 - C12481) * C31752) *
               C32142) *
              C31813 * C235 +
          (((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                C6079 +
            (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                C31752) *
               C13203 +
           ((C5125 - C5126 + C5127 - C5128) * C6079 +
            (C5129 - C5130 + C5131 - C5132) * C31752) *
               C13204 +
           ((C13098 - C13099 + C13100 - C13101) * C6079 +
            (C13102 - C13103 + C13104 - C13105) * C31752) *
               C13205 +
           ((C2654 * C2530 - C32095 * C2533 + C2655 * C6812 - C31899 * C6815) *
                C6079 +
            (C2654 * C2534 - C32095 * C2539 + C2655 * C6816 - C31899 * C6821) *
                C31752) *
               C32142) *
              C31813 * C236 +
          (((C32095 * C259 - C2654 * C244 + C31899 * C980 - C2655 * C974) *
                C6079 +
            (C32095 * C274 - C2654 * C260 + C31899 * C992 - C2655 * C981) *
                C31752) *
               C13203 +
           ((C32095 * C1117 - C2654 * C1108 + C31899 * C1641 - C2655 * C1638) *
                C6079 +
            (C32095 * C1135 - C2654 * C1118 + C31899 * C1647 - C2655 * C1642) *
                C31752) *
               C13204 +
           ((C32095 * C1124 - C2654 * C1112 + C31899 * C6217 - C2655 * C6213) *
                C6079 +
            (C32095 * C1139 - C2654 * C1126 + C31899 * C6222 - C2655 * C6219) *
                C31752) *
               C13205 +
           ((C32095 * C6815 - C2654 * C6812 + C31899 * C7332 - C2655 * C7331) *
                C6079 +
            (C32095 * C6821 - C2654 * C6816 + C31899 * C7334 - C2655 * C7333) *
                C31752) *
               C32142) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C6079 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C31752) *
               C13203 +
           ((C4477 - C4478 + C4479 - C4480) * C6079 +
            (C4481 - C4482 + C4483 - C4484) * C31752) *
               C13204 +
           C14124 * C13205 + C14129 * C32142) *
              C341 +
          (((C4478 - C4477 + C4480 - C4479) * C6079 +
            (C4482 - C4481 + C4484 - C4483) * C31752) *
               C13203 +
           ((C4485 - C4486 + C4487 - C4488) * C6079 +
            (C4489 - C4490 + C4491 - C4492) * C31752) *
               C13204 +
           ((C12475 - C12476 + C12477 - C12478) * C6079 +
            (C12479 - C12480 + C12481 - C12482) * C31752) *
               C13205 +
           ((C14116 - C14117 + C14118 - C14119) * C6079 +
            (C14120 - C14121 + C14122 - C14123) * C31752) *
               C32142) *
              C342 +
          (C14124 * C13203 + C14129 * C13204 +
           ((C14117 - C14116 + C14119 - C14118) * C6079 +
            (C14121 - C14120 + C14123 - C14122) * C31752) *
               C13205 +
           ((C32095 * C11731 - C2654 * C11729 + C31899 * C12017 -
             C2655 * C12016) *
                C6079 +
            (C32095 * C11735 - C2654 * C11732 + C31899 * C12019 -
             C2655 * C12018) *
                C31752) *
               C32142) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
              C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
                 C6079 +
             (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
              C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
                 C31752) *
                C32096 +
            ((C9466 - C9467 + C9468 - C9469 + C9470 - C9471 + C9472 - C9473) *
                 C6079 +
             (C9474 - C9475 + C9476 - C9477 + C9478 - C9479 + C9480 - C9481) *
                 C31752) *
                C31941) *
               C572 +
           (((C9467 - C9466 + C9469 - C9468 + C9471 - C9470 + C9473 - C9472) *
                 C6079 +
             (C9475 - C9474 + C9477 - C9476 + C9479 - C9478 + C9481 - C9480) *
                 C31752) *
                C32096 +
            ((C9482 - C9483 + C9484 - C9485 + C9486 - C9487 + C9488 - C9489) *
                 C6079 +
             (C9490 - C9491 + C9492 - C9493 + C9494 - C9495 + C9496 - C9497) *
                 C31752) *
                C31941) *
               C573) *
              C31799 * C468 +
          ((((C7471 - C7470 + C7473 - C7472 + C7475 - C7474 + C7477 - C7476) *
                 C6079 +
             (C7479 - C7478 + C7481 - C7480 + C7483 - C7482 + C7485 - C7484) *
                 C31752) *
                C32096 +
            ((C7974 - C7975 + C7976 - C7977 + C7978 - C7979 + C7980 - C7981) *
                 C6079 +
             (C7982 - C7983 + C7984 - C7985 + C7986 - C7987 + C7988 - C7989) *
                 C31752) *
                C31941) *
               C572 +
           (((C7975 - C7974 + C7977 - C7976 + C7979 - C7978 + C7981 - C7980) *
                 C6079 +
             (C7983 - C7982 + C7985 - C7984 + C7987 - C7986 + C7989 - C7988) *
                 C31752) *
                C32096 +
            ((C7457 * C366 - C7463 * C350 + C7458 * C1127 - C7464 * C1113 +
              C7459 * C1128 - C7465 * C1114 + C32136 * C7020 - C7466 * C7019) *
                 C6079 +
             (C7457 * C380 - C7463 * C367 + C7458 * C1140 - C7464 * C1129 +
              C7459 * C1141 - C7465 * C1130 + C32136 * C7022 - C7466 * C7021) *
                 C31752) *
                C31941) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                 C815 +
             (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                 C809 +
             (C2661 - C2662 + C2663 - C2664) * C816 +
             (C2665 - C2666 + C2667 - C2668) * C810 + C2701 * C817 +
             C2702 * C32115) *
                C32096 +
            ((C4477 - C4478 + C4479 - C4480) * C815 +
             (C4481 - C4482 + C4483 - C4484) * C809 + C4925 * C816 +
             C4926 * C810 + C4183 * C817 + C4184 * C32115) *
                C31941) *
               C572 +
           (((C4478 - C4477 + C4480 - C4479) * C815 +
             (C4482 - C4481 + C4484 - C4483) * C809 + C4927 * C816 +
             C4928 * C810 + C4929 * C817 + C4930 * C32115) *
                C32096 +
            ((C4485 - C4486 + C4487 - C4488) * C815 +
             (C4489 - C4490 + C4491 - C4492) * C809 +
             (C4493 - C4494 + C4495 - C4496) * C816 +
             (C4497 - C4498 + C4499 - C4500) * C810 +
             (C4501 - C4502 + C4503 - C4504) * C817 +
             (C4505 - C4506 + C4507 - C4508) * C32115) *
                C31941) *
               C573) *
              C31799 * C468 +
          ((((C2662 - C2661 + C2664 - C2663) * C815 +
             (C2666 - C2665 + C2668 - C2667) * C809 +
             (C2670 - C2669 + C2672 - C2671) * C816 +
             (C2674 - C2673 + C2676 - C2675) * C810 +
             (C2678 - C2677 + C2680 - C2679) * C817 +
             (C2682 - C2681 + C2684 - C2683) * C32115) *
                C32096 +
            (C4927 * C815 + C4928 * C809 + C4929 * C816 + C4930 * C810 +
             (C3201 - C3202 + C3203 - C3204) * C817 +
             (C3205 - C3206 + C3207 - C3208) * C32115) *
                C31941) *
               C572 +
           ((C4925 * C815 + C4926 * C809 + C4183 * C816 + C4184 * C810 +
             (C3202 - C3201 + C3204 - C3203) * C817 +
             (C3206 - C3205 + C3208 - C3207) * C32115) *
                C32096 +
            ((C4494 - C4493 + C4496 - C4495) * C815 +
             (C4498 - C4497 + C4500 - C4499) * C809 +
             (C4502 - C4501 + C4504 - C4503) * C816 +
             (C4506 - C4505 + C4508 - C4507) * C810 +
             (C32095 * C370 - C2654 * C352 + C31899 * C2205 - C2655 * C2204) *
                 C817 +
             (C32095 * C382 - C2654 * C371 + C31899 * C2207 - C2655 * C2206) *
                 C32115) *
                C31941) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                 C6079 +
             (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                 C31752) *
                C13203 +
            ((C4477 - C4478 + C4479 - C4480) * C6079 +
             (C4481 - C4482 + C4483 - C4484) * C31752) *
                C13204 +
            C14124 * C13205 + C14129 * C32142) *
               C572 +
           (((C4478 - C4477 + C4480 - C4479) * C6079 +
             (C4482 - C4481 + C4484 - C4483) * C31752) *
                C13203 +
            ((C4485 - C4486 + C4487 - C4488) * C6079 +
             (C4489 - C4490 + C4491 - C4492) * C31752) *
                C13204 +
            ((C12475 - C12476 + C12477 - C12478) * C6079 +
             (C12479 - C12480 + C12481 - C12482) * C31752) *
                C13205 +
            ((C14116 - C14117 + C14118 - C14119) * C6079 +
             (C14120 - C14121 + C14122 - C14123) * C31752) *
                C32142) *
               C573) *
              C31799 * C468 +
          ((((C2662 - C2661 + C2664 - C2663) * C6079 +
             (C2666 - C2665 + C2668 - C2667) * C31752) *
                C13203 +
            (C4927 * C6079 + C4928 * C31752) * C13204 +
            (C12902 * C6079 + C12903 * C31752) * C13205 +
            ((C12483 - C12484 + C12485 - C12486) * C6079 +
             (C12487 - C12488 + C12489 - C12490) * C31752) *
                C32142) *
               C572 +
           ((C4925 * C6079 + C4926 * C31752) * C13203 +
            (C12493 * C6079 + C12494 * C31752) * C13204 +
            ((C12484 - C12483 + C12486 - C12485) * C6079 +
             (C12488 - C12487 + C12490 - C12489) * C31752) *
                C13205 +
            ((C32095 * C2013 - C2654 * C2003 + C31899 * C11841 -
              C2655 * C11840) *
                 C6079 +
             (C32095 * C2021 - C2654 * C2014 + C31899 * C11843 -
              C2655 * C11842) *
                 C31752) *
                C32142) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C815 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C809 +
            (C2661 - C2662 + C2663 - C2664) * C816 +
            (C2665 - C2666 + C2667 - C2668) * C810 + C2701 * C817 +
            C2702 * C32115) *
               C32096 +
           ((C32095 * C354 - C2654 * C344 + C31899 * C681 - C2655 * C676) *
                C815 +
            (C32095 * C374 - C2654 * C355 + C31899 * C691 - C2655 * C682) *
                C809 +
            (C3186 - C3185 + C3188 - C3187) * C816 +
            (C3190 - C3189 + C3192 - C3191) * C810 + C4183 * C817 +
            C4184 * C32115) *
               C31941) *
              C31813 * C235 +
          (((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                C815 +
            (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                C809 +
            (C3031 - C3032 + C3033 - C3034) * C816 +
            (C3035 - C3036 + C3037 - C3038) * C810 +
            (C3039 - C3040 + C3041 - C3042) * C817 +
            (C3043 - C3044 + C3045 - C3046) * C32115) *
               C32096 +
           ((C2654 * C676 - C32095 * C681 + C2655 * C1108 - C31899 * C1117) *
                C815 +
            (C2654 * C682 - C32095 * C691 + C2655 * C1118 - C31899 * C1135) *
                C809 +
            (C2654 * C677 - C32095 * C683 + C2655 * C1109 - C31899 * C1119) *
                C816 +
            (C2654 * C684 - C32095 * C692 + C2655 * C1120 - C31899 * C1136) *
                C810 +
            (C2654 * C678 - C32095 * C685 + C2655 * C1110 - C31899 * C1121) *
                C817 +
            (C2654 * C686 - C32095 * C693 + C2655 * C1122 - C31899 * C1137) *
                C32115) *
               C31941) *
              C31813 * C236 +
          (((C32095 * C259 - C2654 * C244 + C31899 * C980 - C2655 * C974) *
                C815 +
            (C32095 * C274 - C2654 * C260 + C31899 * C992 - C2655 * C981) *
                C809 +
            (C32095 * C261 - C2654 * C245 + C31899 * C982 - C2655 * C975) *
                C816 +
            (C32095 * C275 - C2654 * C262 + C31899 * C993 - C2655 * C983) *
                C810 +
            (C32095 * C263 - C2654 * C246 + C31899 * C984 - C2655 * C976) *
                C817 +
            (C32095 * C276 - C2654 * C264 + C31899 * C994 - C2655 * C985) *
                C32115) *
               C32096 +
           ((C32095 * C1117 - C2654 * C1108 + C31899 * C1641 - C2655 * C1638) *
                C815 +
            (C32095 * C1135 - C2654 * C1118 + C31899 * C1647 - C2655 * C1642) *
                C809 +
            (C32095 * C1119 - C2654 * C1109 + C31899 * C1643 - C2655 * C1639) *
                C816 +
            (C32095 * C1136 - C2654 * C1120 + C31899 * C1648 - C2655 * C1644) *
                C810 +
            (C32095 * C1121 - C2654 * C1110 + C31899 * C1645 - C2655 * C1640) *
                C817 +
            (C32095 * C1137 - C2654 * C1122 + C31899 * C1649 - C2655 * C1646) *
                C32115) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C815 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C809 +
            (C2661 - C2662 + C2663 - C2664) * C816 +
            (C2665 - C2666 + C2667 - C2668) * C810 + C2701 * C817 +
            C2702 * C32115) *
               C32096 +
           ((C32095 * C354 - C2654 * C344 + C31899 * C681 - C2655 * C676) *
                C815 +
            (C32095 * C374 - C2654 * C355 + C31899 * C691 - C2655 * C682) *
                C809 +
            (C3186 - C3185 + C3188 - C3187) * C816 +
            (C3190 - C3189 + C3192 - C3191) * C810 + C4183 * C817 +
            C4184 * C32115) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C2662 - C2661 + C2664 - C2663) * C815 +
            (C2666 - C2665 + C2668 - C2667) * C809 +
            (C2670 - C2669 + C2672 - C2671) * C816 +
            (C2674 - C2673 + C2676 - C2675) * C810 +
            (C2678 - C2677 + C2680 - C2679) * C817 +
            (C2682 - C2681 + C2684 - C2683) * C32115) *
               C32096 +
           ((C3185 - C3186 + C3187 - C3188) * C815 +
            (C3189 - C3190 + C3191 - C3192) * C809 +
            (C3193 - C3194 + C3195 - C3196) * C816 +
            (C3197 - C3198 + C3199 - C3200) * C810 +
            (C3201 - C3202 + C3203 - C3204) * C817 +
            (C3205 - C3206 + C3207 - C3208) * C32115) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C2701 * C815 + C2702 * C809 + C2703 * C816 + C2704 * C810 +
            (C2686 - C2685 + C2688 - C2687) * C817 +
            (C2690 - C2689 + C2692 - C2691) * C32115) *
               C32096 +
           (C4183 * C815 + C4184 * C809 +
            (C3202 - C3201 + C3204 - C3203) * C816 +
            (C3206 - C3205 + C3208 - C3207) * C810 +
            (C32095 * C362 - C2654 * C348 + C31899 * C689 - C2655 * C680) *
                C817 +
            (C32095 * C378 - C2654 * C363 + C31899 * C695 - C2655 * C690) *
                C32115) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
             C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
                C6079 +
            (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
             C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
                C31752) *
               C32096 +
           ((C7457 * C354 - C7463 * C344 + C7458 * C681 - C7464 * C676 +
             C7459 * C1117 - C7465 * C1108 + C32136 * C1641 - C7466 * C1638) *
                C6079 +
            (C7457 * C374 - C7463 * C355 + C7458 * C691 - C7464 * C682 +
             C7459 * C1135 - C7465 * C1118 + C32136 * C1647 - C7466 * C1642) *
                C31752) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C7471 - C7470 + C7473 - C7472 + C7475 - C7474 + C7477 - C7476) *
                C6079 +
            (C7479 - C7478 + C7481 - C7480 + C7483 - C7482 + C7485 - C7484) *
                C31752) *
               C32096 +
           ((C7974 - C7975 + C7976 - C7977 + C7978 - C7979 + C7980 - C7981) *
                C6079 +
            (C7982 - C7983 + C7984 - C7985 + C7986 - C7987 + C7988 - C7989) *
                C31752) *
               C31941) *
              C31813 * C31799 * C111 +
          (((C7487 - C7486 + C7489 - C7488 + C7491 - C7490 + C7493 - C7492) *
                C6079 +
            (C7495 - C7494 + C7497 - C7496 + C7499 - C7498 + C7501 - C7500) *
                C31752) *
               C32096 +
           ((C7457 * C358 - C7463 * C346 + C7458 * C685 - C7464 * C678 +
             C7459 * C1121 - C7465 * C1110 + C32136 * C1645 - C7466 * C1640) *
                C6079 +
            (C7457 * C376 - C7463 * C359 + C7458 * C693 - C7464 * C686 +
             C7459 * C1137 - C7465 * C1122 + C32136 * C1649 - C7466 * C1646) *
                C31752) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
             C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
                C6079 +
            (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
             C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
                C31752) *
               C32096 +
           ((C7457 * C354 - C7463 * C344 + C7458 * C681 - C7464 * C676 +
             C7459 * C1117 - C7465 * C1108 + C32136 * C1641 - C7466 * C1638) *
                C6079 +
            (C7457 * C374 - C7463 * C355 + C7458 * C691 - C7464 * C682 +
             C7459 * C1135 - C7465 * C1118 + C32136 * C1647 - C7466 * C1642) *
                C31752) *
               C31941) *
              C31813 * C235 +
          (((C7463 * C239 - C7457 * C249 + C7464 * C244 - C7458 * C259 +
             C7465 * C974 - C7459 * C980 + C7466 * C977 - C32136 * C986) *
                C6079 +
            (C7463 * C250 - C7457 * C269 + C7464 * C260 - C7458 * C274 +
             C7465 * C981 - C7459 * C992 + C7466 * C987 - C32136 * C995) *
                C31752) *
               C32096 +
           ((C7463 * C676 - C7457 * C681 + C7464 * C1108 - C7458 * C1117 +
             C7465 * C1638 - C7459 * C1641 + C7466 * C6212 - C32136 * C6215) *
                C6079 +
            (C7463 * C682 - C7457 * C691 + C7464 * C1118 - C7458 * C1135 +
             C7465 * C1642 - C7459 * C1647 + C7466 * C6216 - C32136 * C6221) *
                C31752) *
               C31941) *
              C31813 * C236 +
          (((C7457 * C259 - C7463 * C244 + C7458 * C980 - C7464 * C974 +
             C7459 * C986 - C7465 * C977 + C32136 * C6144 - C7466 * C6142) *
                C6079 +
            (C7457 * C274 - C7463 * C260 + C7458 * C992 - C7464 * C981 +
             C7459 * C995 - C7465 * C987 + C32136 * C6148 - C7466 * C6145) *
                C31752) *
               C32096 +
           ((C7457 * C1117 - C7463 * C1108 + C7458 * C1641 - C7464 * C1638 +
             C7459 * C6215 - C7465 * C6212 + C32136 * C6479 - C7466 * C6478) *
                C6079 +
            (C7457 * C1135 - C7463 * C1118 + C7458 * C1647 - C7464 * C1642 +
             C7459 * C6221 - C7465 * C6216 + C32136 * C6481 - C7466 * C6480) *
                C31752) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C6079 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C31752) *
               C13203 +
           ((C4477 - C4478 + C4479 - C4480) * C6079 +
            (C4481 - C4482 + C4483 - C4484) * C31752) *
               C13204 +
           (C12491 * C6079 + C12492 * C31752) * C13205 +
           ((C12476 - C12475 + C12478 - C12477) * C6079 +
            (C12480 - C12479 + C12482 - C12481) * C31752) *
               C32142) *
              C31813 * C31799 * C110 +
          (((C2662 - C2661 + C2664 - C2663) * C6079 +
            (C2666 - C2665 + C2668 - C2667) * C31752) *
               C13203 +
           (C4927 * C6079 + C4928 * C31752) * C13204 +
           (C12902 * C6079 + C12903 * C31752) * C13205 +
           ((C12483 - C12484 + C12485 - C12486) * C6079 +
            (C12487 - C12488 + C12489 - C12490) * C31752) *
               C32142) *
              C31813 * C31799 * C111 +
          ((C2701 * C6079 + C2702 * C31752) * C13203 +
           (C4183 * C6079 + C4184 * C31752) * C13204 +
           ((C4502 - C4501 + C4504 - C4503) * C6079 +
            (C4506 - C4505 + C4508 - C4507) * C31752) *
               C13205 +
           ((C32095 * C2009 - C2654 * C2001 + C31899 * C2537 - C2655 * C2532) *
                C6079 +
            (C32095 * C2019 - C2654 * C2010 + C31899 * C2541 - C2655 * C2538) *
                C31752) *
               C32142) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C6079 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C31752) *
               C13203 +
           ((C4477 - C4478 + C4479 - C4480) * C6079 +
            (C4481 - C4482 + C4483 - C4484) * C31752) *
               C13204 +
           (C12491 * C6079 + C12492 * C31752) * C13205 +
           ((C12476 - C12475 + C12478 - C12477) * C6079 +
            (C12480 - C12479 + C12482 - C12481) * C31752) *
               C32142) *
              C31813 * C235 +
          (((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                C6079 +
            (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                C31752) *
               C13203 +
           ((C5125 - C5126 + C5127 - C5128) * C6079 +
            (C5129 - C5130 + C5131 - C5132) * C31752) *
               C13204 +
           ((C13098 - C13099 + C13100 - C13101) * C6079 +
            (C13102 - C13103 + C13104 - C13105) * C31752) *
               C13205 +
           ((C2654 * C2530 - C32095 * C2533 + C2655 * C6812 - C31899 * C6815) *
                C6079 +
            (C2654 * C2534 - C32095 * C2539 + C2655 * C6816 - C31899 * C6821) *
                C31752) *
               C32142) *
              C31813 * C236 +
          (((C32095 * C259 - C2654 * C244 + C31899 * C980 - C2655 * C974) *
                C6079 +
            (C32095 * C274 - C2654 * C260 + C31899 * C992 - C2655 * C981) *
                C31752) *
               C13203 +
           ((C32095 * C1117 - C2654 * C1108 + C31899 * C1641 - C2655 * C1638) *
                C6079 +
            (C32095 * C1135 - C2654 * C1118 + C31899 * C1647 - C2655 * C1642) *
                C31752) *
               C13204 +
           ((C32095 * C1124 - C2654 * C1112 + C31899 * C6217 - C2655 * C6213) *
                C6079 +
            (C32095 * C1139 - C2654 * C1126 + C31899 * C6222 - C2655 * C6219) *
                C31752) *
               C13205 +
           ((C32095 * C6815 - C2654 * C6812 + C31899 * C7332 - C2655 * C7331) *
                C6079 +
            (C32095 * C6821 - C2654 * C6816 + C31899 * C7334 - C2655 * C7333) *
                C31752) *
               C32142) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C31836 * C126 - C113 * C119) * C114 +
                (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
                (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
                C171 * C105 + C172 * C118 + C173 * C106) *
                   C31854 * C31813 * C466 +
               ((C113 * C239 - C31836 * C249) * C114 +
                (C113 * C250 - C31836 * C269) * C102 + (C475 - C476) * C115 +
                (C477 - C478) * C103 + (C479 - C480) * C116 +
                (C481 - C482) * C104 + (C483 - C484) * C117 +
                (C485 - C486) * C105 + (C487 - C488) * C118 +
                (C489 - C490) * C106) *
                   C31854 * C31813 * C467) *
                  C468 +
              (((C149 - C148) * C114 + (C151 - C150) * C102 +
                (C153 - C152) * C115 + (C155 - C154) * C103 +
                (C157 - C156) * C116 + (C159 - C158) * C104 +
                (C161 - C160) * C117 + (C163 - C162) * C105 +
                (C164 - C165) * C118 + (C166 - C167) * C106) *
                   C31854 * C31813 * C466 +
               ((C476 - C475) * C114 + (C478 - C477) * C102 +
                (C480 - C479) * C115 + (C482 - C481) * C103 +
                (C484 - C483) * C116 + (C486 - C485) * C104 +
                (C488 - C487) * C117 + (C490 - C489) * C105 +
                (C31836 * C471 - C113 * C470) * C118 +
                (C31836 * C473 - C113 * C472) * C106) *
                   C31854 * C31813 * C467) *
                  C469) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
                 C32126 * C259 - C814 * C244) *
                    C815 +
                (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
                 C32126 * C274 - C814 * C260) *
                    C809 +
                (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
                (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
                C864 * C32115) *
                   C31854 * C31813 * C466 +
               ((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
                 C814 * C974 - C32126 * C980) *
                    C815 +
                (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
                 C814 * C981 - C32126 * C992) *
                    C809 +
                (C1295 - C1296 + C1297 - C1298 + C1299 - C1300) * C816 +
                (C1301 - C1302 + C1303 - C1304 + C1305 - C1306) * C810 +
                (C1307 - C1308 + C1309 - C1310 + C1311 - C1312) * C817 +
                (C1313 - C1314 + C1315 - C1316 + C1317 - C1318) * C32115) *
                   C31854 * C31813 * C467) *
                  C468 +
              (((C820 - C819 + C822 - C821 + C824 - C823) * C815 +
                (C826 - C825 + C828 - C827 + C830 - C829) * C809 +
                (C832 - C831 + C834 - C833 + C836 - C835) * C816 +
                (C838 - C837 + C840 - C839 + C842 - C841) * C810 +
                (C843 - C844 + C845 - C846 + C847 - C848) * C817 +
                (C849 - C850 + C851 - C852 + C853 - C854) * C32115) *
                   C31854 * C31813 * C466 +
               ((C1296 - C1295 + C1298 - C1297 + C1300 - C1299) * C815 +
                (C1302 - C1301 + C1304 - C1303 + C1306 - C1305) * C809 +
                (C1308 - C1307 + C1310 - C1309 + C1312 - C1311) * C816 +
                (C1314 - C1313 + C1316 - C1315 + C1318 - C1317) * C810 +
                (C32161 * C255 - C812 * C242 + C32149 * C265 - C813 * C247 +
                 C32126 * C1291 - C814 * C1290) *
                    C817 +
                (C32161 * C272 - C812 * C256 + C32149 * C277 - C813 * C266 +
                 C32126 * C1293 - C814 * C1292) *
                    C32115) *
                   C31854 * C31813 * C467) *
                  C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C815 +
             (C31836 * C140 - C113 * C127) * C809 + (C148 - C149) * C816 +
             (C150 - C151) * C810 + C168 * C817 + C169 * C32115) *
                C32162 +
            ((C2024 - C2025) * C815 + (C2026 - C2027) * C809 +
             (C580 - C579) * C816 + (C582 - C581) * C810 + C1764 * C817 +
             C1765 * C32115) *
                C32151 +
            C2058 * C32129) *
               C31813 * C466 +
           (((C113 * C239 - C31836 * C249) * C815 +
             (C113 * C250 - C31836 * C269) * C809 + (C475 - C476) * C816 +
             (C477 - C478) * C810 + (C479 - C480) * C817 +
             (C481 - C482) * C32115) *
                C32162 +
            ((C113 * C676 - C31836 * C681) * C815 +
             (C113 * C682 - C31836 * C691) * C809 + (C2209 - C2210) * C816 +
             (C2211 - C2212) * C810 + (C2213 - C2214) * C817 +
             (C2215 - C2216) * C32115) *
                C32151 +
            ((C113 * C1111 - C31836 * C1123) * C815 +
             (C113 * C1125 - C31836 * C1138) * C809 + (C2217 - C2218) * C816 +
             (C2219 - C2220) * C810 + (C2221 - C2222) * C817 +
             (C2223 - C2224) * C32115) *
                C32129) *
               C31813 * C467) *
              C468 +
          ((((C149 - C148) * C815 + (C151 - C150) * C809 +
             (C153 - C152) * C816 + (C155 - C154) * C810 +
             (C157 - C156) * C817 + (C159 - C158) * C32115) *
                C32162 +
            ((C579 - C580) * C815 + (C581 - C582) * C809 +
             (C583 - C584) * C816 + (C585 - C586) * C810 +
             (C587 - C588) * C817 + (C589 - C590) * C32115) *
                C32151 +
            ((C1767 - C1766) * C815 + (C1769 - C1768) * C809 +
             (C1771 - C1770) * C816 + (C1773 - C1772) * C810 +
             (C1774 - C1775) * C817 + (C1776 - C1777) * C32115) *
                C32129) *
               C31813 * C466 +
           (((C476 - C475) * C815 + (C478 - C477) * C809 +
             (C480 - C479) * C816 + (C482 - C481) * C810 +
             (C484 - C483) * C817 + (C486 - C485) * C32115) *
                C32162 +
            ((C2210 - C2209) * C815 + (C2212 - C2211) * C809 +
             (C2214 - C2213) * C816 + (C2216 - C2215) * C810 +
             (C31836 * C687 - C113 * C679) * C817 +
             (C31836 * C694 - C113 * C688) * C32115) *
                C32151 +
            ((C2218 - C2217) * C815 + (C2220 - C2219) * C809 +
             (C2222 - C2221) * C816 + (C2224 - C2223) * C810 +
             (C31836 * C2205 - C113 * C2204) * C817 +
             (C31836 * C2207 - C113 * C2206) * C32115) *
                C32129) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C5251 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C32158 +
            (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
            (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
            C5299 * C5253 + C5300 * C32115) *
               C31854 * C31813 * C466 +
           ((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
             C5250 * C974 - C32126 * C980) *
                C5251 +
            (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
             C5250 * C981 - C32126 * C992) *
                C32158 +
            (C5667 - C5668 + C5669 - C5670 + C5671 - C5672) * C5252 +
            (C5673 - C5674 + C5675 - C5676 + C5677 - C5678) * C32145 +
            (C5679 - C5680 + C5681 - C5682 + C5683 - C5684) * C5253 +
            (C5685 - C5686 + C5687 - C5688 + C5689 - C5690) * C32115) *
               C31854 * C31813 * C467) *
              C468 +
          (((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C5251 +
            (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C32158 +
            (C5268 - C5267 + C5270 - C5269 + C5272 - C5271) * C5252 +
            (C5274 - C5273 + C5276 - C5275 + C5278 - C5277) * C32145 +
            (C5279 - C5280 + C5281 - C5282 + C5283 - C5284) * C5253 +
            (C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C32115) *
               C31854 * C31813 * C466 +
           ((C5668 - C5667 + C5670 - C5669 + C5672 - C5671) * C5251 +
            (C5674 - C5673 + C5676 - C5675 + C5678 - C5677) * C32158 +
            (C5680 - C5679 + C5682 - C5681 + C5684 - C5683) * C5252 +
            (C5686 - C5685 + C5688 - C5687 + C5690 - C5689) * C32145 +
            (C5242 * C255 - C5248 * C242 + C5243 * C265 - C5249 * C247 +
             C32126 * C1291 - C5250 * C1290) *
                C5253 +
            (C5242 * C272 - C5248 * C256 + C5243 * C277 - C5249 * C266 +
             C32126 * C1293 - C5250 * C1292) *
                C32115) *
               C31854 * C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
             C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
             C6072 * C986 - C6078 * C977) *
                C6079 +
            (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
             C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
             C6072 * C995 - C6078 * C987) *
                C31752) *
               C31854 * C31813 * C466 +
           ((C6074 * C239 - C6068 * C249 + C6075 * C244 - C6069 * C259 +
             C6076 * C974 - C6070 * C980 + C6077 * C977 - C6071 * C986 +
             C6078 * C6142 - C6072 * C6144) *
                C6079 +
            (C6074 * C250 - C6068 * C269 + C6075 * C260 - C6069 * C274 +
             C6076 * C981 - C6070 * C992 + C6077 * C987 - C6071 * C995 +
             C6078 * C6145 - C6072 * C6148) *
                C31752) *
               C31854 * C31813 * C467) *
              C468 +
          (((C6074 * C120 - C6068 * C128 + C6075 * C240 - C6069 * C251 +
             C6076 * C245 - C6070 * C261 + C6077 * C975 - C6071 * C982 +
             C6078 * C978 - C6072 * C988) *
                C6079 +
            (C6074 * C129 - C6068 * C141 + C6075 * C252 - C6069 * C270 +
             C6076 * C262 - C6070 * C275 + C6077 * C983 - C6071 * C993 +
             C6078 * C989 - C6072 * C996) *
                C31752) *
               C31854 * C31813 * C466 +
           ((C6068 * C251 - C6074 * C240 + C6069 * C261 - C6075 * C245 +
             C6070 * C982 - C6076 * C975 + C6071 * C988 - C6077 * C978 +
             C6072 * C6307 - C6078 * C6306) *
                C6079 +
            (C6068 * C270 - C6074 * C252 + C6069 * C275 - C6075 * C262 +
             C6070 * C993 - C6076 * C983 + C6071 * C996 - C6077 * C989 +
             C6072 * C6309 - C6078 * C6308) *
                C31752) *
               C31854 * C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
              C32126 * C259 - C5250 * C244) *
                 C6079 +
             (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
              C32126 * C274 - C5250 * C260) *
                 C31752) *
                C32162 +
            ((C6825 - C6826 + C6827 - C6828 + C6829 - C6830) * C6079 +
             (C6831 - C6832 + C6833 - C6834 + C6835 - C6836) * C31752) *
                C32151 +
            C6873 * C32129) *
               C31813 * C466 +
           (((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
              C5250 * C974 - C32126 * C980) *
                 C6079 +
             (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
              C5250 * C981 - C32126 * C992) *
                 C31752) *
                C32162 +
            ((C5248 * C676 - C5242 * C681 + C5249 * C1108 - C5243 * C1117 +
              C5250 * C1638 - C32126 * C1641) *
                 C6079 +
             (C5248 * C682 - C5242 * C691 + C5249 * C1118 - C5243 * C1135 +
              C5250 * C1642 - C32126 * C1647) *
                 C31752) *
                C32151 +
            ((C5248 * C1111 - C5242 * C1123 + C5249 * C1112 - C5243 * C1124 +
              C5250 * C6213 - C32126 * C6217) *
                 C6079 +
             (C5248 * C1125 - C5242 * C1138 + C5249 * C1126 - C5243 * C1139 +
              C5250 * C6219 - C32126 * C6222) *
                 C31752) *
                C32129) *
               C31813 * C467) *
              C468 +
          ((((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C6079 +
             (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C31752) *
                C32162 +
            ((C5837 - C5838 + C5839 - C5840 + C5841 - C5842) * C6079 +
             (C5843 - C5844 + C5845 - C5846 + C5847 - C5848) * C31752) *
                C32151 +
            ((C5248 * C350 - C5242 * C366 + C5249 * C1113 - C5243 * C1127 +
              C5250 * C1114 - C32126 * C1128) *
                 C6079 +
             (C5248 * C367 - C5242 * C380 + C5249 * C1129 - C5243 * C1140 +
              C5250 * C1130 - C32126 * C1141) *
                 C31752) *
                C32129) *
               C31813 * C466 +
           (((C5668 - C5667 + C5670 - C5669 + C5672 - C5671) * C6079 +
             (C5674 - C5673 + C5676 - C5675 + C5678 - C5677) * C31752) *
                C32162 +
            ((C5242 * C683 - C5248 * C677 + C5243 * C1119 - C5249 * C1109 +
              C32126 * C1643 - C5250 * C1639) *
                 C6079 +
             (C5242 * C692 - C5248 * C684 + C5243 * C1136 - C5249 * C1120 +
              C32126 * C1648 - C5250 * C1644) *
                 C31752) *
                C32151 +
            ((C5242 * C1127 - C5248 * C1113 + C5243 * C1128 - C5249 * C1114 +
              C32126 * C7020 - C5250 * C7019) *
                 C6079 +
             (C5242 * C1140 - C5248 * C1129 + C5243 * C1141 - C5249 * C1130 +
              C32126 * C7022 - C5250 * C7021) *
                 C31752) *
                C32129) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C5251 +
             (C31836 * C140 - C113 * C127) * C32158 + (C148 - C149) * C5252 +
             (C150 - C151) * C32145 + C168 * C5253 + C169 * C32115) *
                C10013 +
            ((C2024 - C2025) * C5251 + (C2026 - C2027) * C32158 +
             C2375 * C5252 + C2376 * C32145 + C1764 * C5253 + C1765 * C32115) *
                C10014 +
            C10247 * C32129) *
               C31813 * C466 +
           (((C113 * C239 - C31836 * C249) * C5251 +
             (C113 * C250 - C31836 * C269) * C32158 + (C475 - C476) * C5252 +
             (C477 - C478) * C32145 + (C479 - C480) * C5253 +
             (C481 - C482) * C32115) *
                C10013 +
            ((C2543 - C2544) * C5251 + (C2545 - C2546) * C32158 +
             (C2209 - C2210) * C5252 + (C2211 - C2212) * C32145 +
             (C2213 - C2214) * C5253 + (C2215 - C2216) * C32115) *
                C10014 +
            ((C2547 - C2548) * C5251 + (C2549 - C2550) * C32158 +
             (C2217 - C2218) * C5252 + (C2219 - C2220) * C32145 +
             (C2221 - C2222) * C5253 + (C2223 - C2224) * C32115) *
                C32129) *
               C31813 * C467) *
              C468 +
          ((((C149 - C148) * C5251 + (C151 - C150) * C32158 +
             (C153 - C152) * C5252 + (C155 - C154) * C32145 +
             (C157 - C156) * C5253 + (C159 - C158) * C32115) *
                C10013 +
            (C2377 * C5251 + C2378 * C32158 + C2379 * C5252 + C2380 * C32145 +
             C3901 * C5253 + C3902 * C32115) *
                C10014 +
            (C2381 * C5251 + C2382 * C32158 + C2383 * C5252 + C2384 * C32145 +
             (C1774 - C1775) * C5253 + (C1776 - C1777) * C32115) *
                C32129) *
               C31813 * C466 +
           (((C476 - C475) * C5251 + (C478 - C477) * C32158 +
             (C480 - C479) * C5252 + (C482 - C481) * C32145 +
             (C484 - C483) * C5253 + (C486 - C485) * C32115) *
                C10013 +
            ((C2210 - C2209) * C5251 + (C2212 - C2211) * C32158 +
             (C2214 - C2213) * C5252 + (C2216 - C2215) * C32145 +
             (C3768 - C3767) * C5253 + (C3770 - C3769) * C32115) *
                C10014 +
            ((C2218 - C2217) * C5251 + (C2220 - C2219) * C32158 +
             (C2222 - C2221) * C5252 + (C2224 - C2223) * C32145 +
             (C31836 * C2205 - C113 * C2204) * C5253 +
             (C31836 * C2207 - C113 * C2206) * C32115) *
                C32129) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
              C32126 * C259 - C814 * C244) *
                 C6079 +
             (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
              C32126 * C274 - C814 * C260) *
                 C31752) *
                C10013 +
            ((C11016 - C11017 + C11018 - C11019 + C11020 - C11021) * C6079 +
             (C11022 - C11023 + C11024 - C11025 + C11026 - C11027) * C31752) *
                C10014 +
            C11064 * C32129) *
               C31813 * C466 +
           (((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
              C814 * C974 - C32126 * C980) *
                 C6079 +
             (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
              C814 * C981 - C32126 * C992) *
                 C31752) *
                C10013 +
            ((C812 * C676 - C32161 * C681 + C813 * C1108 - C32149 * C1117 +
              C814 * C1638 - C32126 * C1641) *
                 C6079 +
             (C812 * C682 - C32161 * C691 + C813 * C1118 - C32149 * C1135 +
              C814 * C1642 - C32126 * C1647) *
                 C31752) *
                C10014 +
            ((C812 * C1111 - C32161 * C1123 + C813 * C1112 - C32149 * C1124 +
              C814 * C6213 - C32126 * C6217) *
                 C6079 +
             (C812 * C1125 - C32161 * C1138 + C813 * C1126 - C32149 * C1139 +
              C814 * C6219 - C32126 * C6222) *
                 C31752) *
                C32129) *
               C31813 * C467) *
              C468 +
          ((((C820 - C819 + C822 - C821 + C824 - C823) * C6079 +
             (C826 - C825 + C828 - C827 + C830 - C829) * C31752) *
                C10013 +
            ((C1469 - C1470 + C1471 - C1472 + C1473 - C1474) * C6079 +
             (C1475 - C1476 + C1477 - C1478 + C1479 - C1480) * C31752) *
                C10014 +
            ((C812 * C350 - C32161 * C366 + C813 * C1113 - C32149 * C1127 +
              C814 * C1114 - C32126 * C1128) *
                 C6079 +
             (C812 * C367 - C32161 * C380 + C813 * C1129 - C32149 * C1140 +
              C814 * C1130 - C32126 * C1141) *
                 C31752) *
                C32129) *
               C31813 * C466 +
           (((C1296 - C1295 + C1298 - C1297 + C1300 - C1299) * C6079 +
             (C1302 - C1301 + C1304 - C1303 + C1306 - C1305) * C31752) *
                C10013 +
            ((C32161 * C683 - C812 * C677 + C32149 * C1119 - C813 * C1109 +
              C32126 * C1643 - C814 * C1639) *
                 C6079 +
             (C32161 * C692 - C812 * C684 + C32149 * C1136 - C813 * C1120 +
              C32126 * C1648 - C814 * C1644) *
                 C31752) *
                C10014 +
            ((C32161 * C1127 - C812 * C1113 + C32149 * C1128 - C813 * C1114 +
              C32126 * C7020 - C814 * C7019) *
                 C6079 +
             (C32161 * C1140 - C812 * C1129 + C32149 * C1141 - C813 * C1130 +
              C32126 * C7022 - C814 * C7021) *
                 C31752) *
                C32129) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C6079 +
             (C31836 * C140 - C113 * C127) * C31752) *
                C11600 +
            ((C2024 - C2025) * C6079 + (C2026 - C2027) * C31752) * C11601 +
            C11750 * C11602 + C11755 * C11603 + C11758 * C11604) *
               C31813 * C466 +
           (((C113 * C239 - C31836 * C249) * C6079 +
             (C113 * C250 - C31836 * C269) * C31752) *
                C11600 +
            ((C2543 - C2544) * C6079 + (C2545 - C2546) * C31752) * C11601 +
            ((C2547 - C2548) * C6079 + (C2549 - C2550) * C31752) * C11602 +
            ((C113 * C2530 - C31836 * C2533) * C6079 +
             (C113 * C2534 - C31836 * C2539) * C31752) *
                C11603 +
            ((C113 * C6813 - C31836 * C6817) * C6079 +
             (C113 * C6819 - C31836 * C6822) * C31752) *
                C11604) *
               C31813 * C467) *
              C468 +
          ((((C149 - C148) * C6079 + (C151 - C150) * C31752) * C11600 +
            (C2377 * C6079 + C2378 * C31752) * C11601 +
            (C2381 * C6079 + C2382 * C31752) * C11602 +
            ((C2040 - C2041) * C6079 + (C2042 - C2043) * C31752) * C11603 +
            ((C113 * C2003 - C31836 * C2013) * C6079 +
             (C113 * C2014 - C31836 * C2021) * C31752) *
                C11604) *
               C31813 * C466 +
           (((C476 - C475) * C6079 + (C478 - C477) * C31752) * C11600 +
            ((C2210 - C2209) * C6079 + (C2212 - C2211) * C31752) * C11601 +
            ((C2218 - C2217) * C6079 + (C2220 - C2219) * C31752) * C11602 +
            ((C31836 * C2535 - C113 * C2531) * C6079 +
             (C31836 * C2540 - C113 * C2536) * C31752) *
                C11603 +
            ((C31836 * C11841 - C113 * C11840) * C6079 +
             (C31836 * C11843 - C113 * C11842) * C31752) *
                C11604) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C31836 * C126 - C113 * C119) * C114 +
                (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
                (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
                C171 * C105 + C172 * C118 + C173 * C106) *
                   C31854 * C572 +
               ((C113 * C344 - C31836 * C354) * C114 +
                (C113 * C355 - C31836 * C374) * C102 + (C579 - C580) * C115 +
                (C581 - C582) * C103 + (C583 - C584) * C116 +
                (C585 - C586) * C104 + (C587 - C588) * C117 +
                (C589 - C590) * C105 + (C591 - C592) * C118 +
                (C593 - C594) * C106) *
                   C31854 * C573) *
                  C466 +
              (((C113 * C239 - C31836 * C249) * C114 +
                (C113 * C250 - C31836 * C269) * C102 + (C475 - C476) * C115 +
                (C477 - C478) * C103 + (C479 - C480) * C116 +
                (C481 - C482) * C104 + (C483 - C484) * C117 +
                (C485 - C486) * C105 + (C487 - C488) * C118 +
                (C489 - C490) * C106) *
                   C31854 * C572 +
               ((C31836 * C681 - C113 * C676) * C114 +
                (C31836 * C691 - C113 * C682) * C102 +
                (C31836 * C683 - C113 * C677) * C115 +
                (C31836 * C692 - C113 * C684) * C103 +
                (C31836 * C685 - C113 * C678) * C116 +
                (C31836 * C693 - C113 * C686) * C104 +
                (C31836 * C687 - C113 * C679) * C117 +
                (C31836 * C694 - C113 * C688) * C105 +
                (C31836 * C689 - C113 * C680) * C118 +
                (C31836 * C695 - C113 * C690) * C106) *
                   C31854 * C573) *
                  C467) *
             C31787 +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
                 C32126 * C259 - C814 * C244) *
                    C815 +
                (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
                 C32126 * C274 - C814 * C260) *
                    C809 +
                (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
                (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
                C864 * C32115) *
                   C31854 * C572 +
               ((C812 * C344 - C32161 * C354 + C813 * C676 - C32149 * C681 +
                 C814 * C1108 - C32126 * C1117) *
                    C815 +
                (C812 * C355 - C32161 * C374 + C813 * C682 - C32149 * C691 +
                 C814 * C1118 - C32126 * C1135) *
                    C809 +
                (C1469 - C1470 + C1471 - C1472 + C1473 - C1474) * C816 +
                (C1475 - C1476 + C1477 - C1478 + C1479 - C1480) * C810 +
                (C1481 - C1482 + C1483 - C1484 + C1485 - C1486) * C817 +
                (C1487 - C1488 + C1489 - C1490 + C1491 - C1492) * C32115) *
                   C31854 * C573) *
                  C466 +
              (((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
                 C814 * C974 - C32126 * C980) *
                    C815 +
                (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
                 C814 * C981 - C32126 * C992) *
                    C809 +
                (C1295 - C1296 + C1297 - C1298 + C1299 - C1300) * C816 +
                (C1301 - C1302 + C1303 - C1304 + C1305 - C1306) * C810 +
                (C1307 - C1308 + C1309 - C1310 + C1311 - C1312) * C817 +
                (C1313 - C1314 + C1315 - C1316 + C1317 - C1318) * C32115) *
                   C31854 * C572 +
               ((C32161 * C681 - C812 * C676 + C32149 * C1117 - C813 * C1108 +
                 C32126 * C1641 - C814 * C1638) *
                    C815 +
                (C32161 * C691 - C812 * C682 + C32149 * C1135 - C813 * C1118 +
                 C32126 * C1647 - C814 * C1642) *
                    C809 +
                (C32161 * C683 - C812 * C677 + C32149 * C1119 - C813 * C1109 +
                 C32126 * C1643 - C814 * C1639) *
                    C816 +
                (C32161 * C692 - C812 * C684 + C32149 * C1136 - C813 * C1120 +
                 C32126 * C1648 - C814 * C1644) *
                    C810 +
                (C32161 * C685 - C812 * C678 + C32149 * C1121 - C813 * C1110 +
                 C32126 * C1645 - C814 * C1640) *
                    C817 +
                (C32161 * C693 - C812 * C686 + C32149 * C1137 - C813 * C1122 +
                 C32126 * C1649 - C814 * C1646) *
                    C32115) *
                   C31854 * C573) *
                  C467) *
             C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C815 +
             (C31836 * C140 - C113 * C127) * C809 + (C148 - C149) * C816 +
             (C150 - C151) * C810 + C168 * C817 + C169 * C32115) *
                C32162 +
            ((C2024 - C2025) * C815 + (C2026 - C2027) * C809 + C2375 * C816 +
             C2376 * C810 + C1764 * C817 + C1765 * C32115) *
                C32151 +
            C2058 * C32129) *
               C572 +
           (((C2025 - C2024) * C815 + (C2027 - C2026) * C809 + C2377 * C816 +
             C2378 * C810 + C2379 * C817 + C2380 * C32115) *
                C32162 +
            ((C2029 - C2028) * C815 + (C2031 - C2030) * C809 + C2381 * C816 +
             C2382 * C810 + C2383 * C817 + C2384 * C32115) *
                C32151 +
            ((C2036 - C2037) * C815 + (C2038 - C2039) * C809 +
             (C2040 - C2041) * C816 + (C2042 - C2043) * C810 +
             (C2044 - C2045) * C817 + (C2046 - C2047) * C32115) *
                C32129) *
               C573) *
              C466 +
          ((((C113 * C239 - C31836 * C249) * C815 +
             (C113 * C250 - C31836 * C269) * C809 + (C475 - C476) * C816 +
             (C477 - C478) * C810 + (C479 - C480) * C817 +
             (C481 - C482) * C32115) *
                C32162 +
            ((C2543 - C2544) * C815 + (C2545 - C2546) * C809 +
             (C2209 - C2210) * C816 + (C2211 - C2212) * C810 +
             (C2213 - C2214) * C817 + (C2215 - C2216) * C32115) *
                C32151 +
            ((C2547 - C2548) * C815 + (C2549 - C2550) * C809 +
             (C2217 - C2218) * C816 + (C2219 - C2220) * C810 +
             (C2221 - C2222) * C817 + (C2223 - C2224) * C32115) *
                C32129) *
               C572 +
           (((C2544 - C2543) * C815 + (C2546 - C2545) * C809 +
             (C2210 - C2209) * C816 + (C2212 - C2211) * C810 +
             (C2214 - C2213) * C817 + (C2216 - C2215) * C32115) *
                C32162 +
            ((C2548 - C2547) * C815 + (C2550 - C2549) * C809 +
             (C2218 - C2217) * C816 + (C2220 - C2219) * C810 +
             (C2222 - C2221) * C817 + (C2224 - C2223) * C32115) *
                C32151 +
            ((C31836 * C2533 - C113 * C2530) * C815 +
             (C31836 * C2539 - C113 * C2534) * C809 +
             (C31836 * C2535 - C113 * C2531) * C816 +
             (C31836 * C2540 - C113 * C2536) * C810 +
             (C31836 * C2537 - C113 * C2532) * C817 +
             (C31836 * C2541 - C113 * C2538) * C32115) *
                C32129) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C5251 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C32158 +
            (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
            (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
            C5299 * C5253 + C5300 * C32115) *
               C31854 * C572 +
           ((C5248 * C344 - C5242 * C354 + C5249 * C676 - C5243 * C681 +
             C5250 * C1108 - C32126 * C1117) *
                C5251 +
            (C5248 * C355 - C5242 * C374 + C5249 * C682 - C5243 * C691 +
             C5250 * C1118 - C32126 * C1135) *
                C32158 +
            (C5837 - C5838 + C5839 - C5840 + C5841 - C5842) * C5252 +
            (C5843 - C5844 + C5845 - C5846 + C5847 - C5848) * C32145 +
            (C5849 - C5850 + C5851 - C5852 + C5853 - C5854) * C5253 +
            (C5855 - C5856 + C5857 - C5858 + C5859 - C5860) * C32115) *
               C31854 * C573) *
              C466 +
          (((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
             C5250 * C974 - C32126 * C980) *
                C5251 +
            (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
             C5250 * C981 - C32126 * C992) *
                C32158 +
            (C5667 - C5668 + C5669 - C5670 + C5671 - C5672) * C5252 +
            (C5673 - C5674 + C5675 - C5676 + C5677 - C5678) * C32145 +
            (C5679 - C5680 + C5681 - C5682 + C5683 - C5684) * C5253 +
            (C5685 - C5686 + C5687 - C5688 + C5689 - C5690) * C32115) *
               C31854 * C572 +
           ((C5242 * C681 - C5248 * C676 + C5243 * C1117 - C5249 * C1108 +
             C32126 * C1641 - C5250 * C1638) *
                C5251 +
            (C5242 * C691 - C5248 * C682 + C5243 * C1135 - C5249 * C1118 +
             C32126 * C1647 - C5250 * C1642) *
                C32158 +
            (C5242 * C683 - C5248 * C677 + C5243 * C1119 - C5249 * C1109 +
             C32126 * C1643 - C5250 * C1639) *
                C5252 +
            (C5242 * C692 - C5248 * C684 + C5243 * C1136 - C5249 * C1120 +
             C32126 * C1648 - C5250 * C1644) *
                C32145 +
            (C5242 * C685 - C5248 * C678 + C5243 * C1121 - C5249 * C1110 +
             C32126 * C1645 - C5250 * C1640) *
                C5253 +
            (C5242 * C693 - C5248 * C686 + C5243 * C1137 - C5249 * C1122 +
             C32126 * C1649 - C5250 * C1646) *
                C32115) *
               C31854 * C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
             C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
             C6072 * C986 - C6078 * C977) *
                C6079 +
            (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
             C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
             C6072 * C995 - C6078 * C987) *
                C31752) *
               C31854 * C572 +
           ((C6074 * C344 - C6068 * C354 + C6075 * C676 - C6069 * C681 +
             C6076 * C1108 - C6070 * C1117 + C6077 * C1638 - C6071 * C1641 +
             C6078 * C6212 - C6072 * C6215) *
                C6079 +
            (C6074 * C355 - C6068 * C374 + C6075 * C682 - C6069 * C691 +
             C6076 * C1118 - C6070 * C1135 + C6077 * C1642 - C6071 * C1647 +
             C6078 * C6216 - C6072 * C6221) *
                C31752) *
               C31854 * C573) *
              C466 +
          (((C6074 * C239 - C6068 * C249 + C6075 * C244 - C6069 * C259 +
             C6076 * C974 - C6070 * C980 + C6077 * C977 - C6071 * C986 +
             C6078 * C6142 - C6072 * C6144) *
                C6079 +
            (C6074 * C250 - C6068 * C269 + C6075 * C260 - C6069 * C274 +
             C6076 * C981 - C6070 * C992 + C6077 * C987 - C6071 * C995 +
             C6078 * C6145 - C6072 * C6148) *
                C31752) *
               C31854 * C572 +
           ((C6068 * C681 - C6074 * C676 + C6069 * C1117 - C6075 * C1108 +
             C6070 * C1641 - C6076 * C1638 + C6071 * C6215 - C6077 * C6212 +
             C6072 * C6479 - C6078 * C6478) *
                C6079 +
            (C6068 * C691 - C6074 * C682 + C6069 * C1135 - C6075 * C1118 +
             C6070 * C1647 - C6076 * C1642 + C6071 * C6221 - C6077 * C6216 +
             C6072 * C6481 - C6078 * C6480) *
                C31752) *
               C31854 * C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
              C32126 * C259 - C5250 * C244) *
                 C6079 +
             (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
              C32126 * C274 - C5250 * C260) *
                 C31752) *
                C32162 +
            ((C6825 - C6826 + C6827 - C6828 + C6829 - C6830) * C6079 +
             (C6831 - C6832 + C6833 - C6834 + C6835 - C6836) * C31752) *
                C32151 +
            C6873 * C32129) *
               C572 +
           (((C6826 - C6825 + C6828 - C6827 + C6830 - C6829) * C6079 +
             (C6832 - C6831 + C6834 - C6833 + C6836 - C6835) * C31752) *
                C32162 +
            ((C6838 - C6837 + C6840 - C6839 + C6842 - C6841) * C6079 +
             (C6844 - C6843 + C6846 - C6845 + C6848 - C6847) * C31752) *
                C32151 +
            ((C6849 - C6850 + C6851 - C6852 + C6853 - C6854) * C6079 +
             (C6855 - C6856 + C6857 - C6858 + C6859 - C6860) * C31752) *
                C32129) *
               C573) *
              C466 +
          ((((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
              C5250 * C974 - C32126 * C980) *
                 C6079 +
             (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
              C5250 * C981 - C32126 * C992) *
                 C31752) *
                C32162 +
            ((C7336 - C7337 + C7338 - C7339 + C7340 - C7341) * C6079 +
             (C7342 - C7343 + C7344 - C7345 + C7346 - C7347) * C31752) *
                C32151 +
            ((C7348 - C7349 + C7350 - C7351 + C7352 - C7353) * C6079 +
             (C7354 - C7355 + C7356 - C7357 + C7358 - C7359) * C31752) *
                C32129) *
               C572 +
           (((C7337 - C7336 + C7339 - C7338 + C7341 - C7340) * C6079 +
             (C7343 - C7342 + C7345 - C7344 + C7347 - C7346) * C31752) *
                C32162 +
            ((C7349 - C7348 + C7351 - C7350 + C7353 - C7352) * C6079 +
             (C7355 - C7354 + C7357 - C7356 + C7359 - C7358) * C31752) *
                C32151 +
            ((C5242 * C2533 - C5248 * C2530 + C5243 * C6815 - C5249 * C6812 +
              C32126 * C7332 - C5250 * C7331) *
                 C6079 +
             (C5242 * C2539 - C5248 * C2534 + C5243 * C6821 - C5249 * C6816 +
              C32126 * C7334 - C5250 * C7333) *
                 C31752) *
                C32129) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C5251 +
             (C31836 * C140 - C113 * C127) * C32158 + (C148 - C149) * C5252 +
             (C150 - C151) * C32145 + C168 * C5253 + C169 * C32115) *
                C10013 +
            ((C2024 - C2025) * C5251 + (C2026 - C2027) * C32158 +
             C2375 * C5252 + C2376 * C32145 + C1764 * C5253 + C1765 * C32115) *
                C10014 +
            C10247 * C32129) *
               C572 +
           (((C2025 - C2024) * C5251 + (C2027 - C2026) * C32158 +
             C2377 * C5252 + C2378 * C32145 + C2379 * C5253 + C2380 * C32115) *
                C10013 +
            ((C2029 - C2028) * C5251 + (C2031 - C2030) * C32158 +
             C2381 * C5252 + C2382 * C32145 + C2383 * C5253 + C2384 * C32115) *
                C10014 +
            ((C2036 - C2037) * C5251 + (C2038 - C2039) * C32158 +
             (C2040 - C2041) * C5252 + (C2042 - C2043) * C32145 +
             (C2044 - C2045) * C5253 + (C2046 - C2047) * C32115) *
                C32129) *
               C573) *
              C466 +
          ((((C113 * C239 - C31836 * C249) * C5251 +
             (C113 * C250 - C31836 * C269) * C32158 + (C475 - C476) * C5252 +
             (C477 - C478) * C32145 + (C479 - C480) * C5253 +
             (C481 - C482) * C32115) *
                C10013 +
            ((C2543 - C2544) * C5251 + (C2545 - C2546) * C32158 +
             (C2209 - C2210) * C5252 + (C2211 - C2212) * C32145 +
             (C2213 - C2214) * C5253 + (C2215 - C2216) * C32115) *
                C10014 +
            ((C2547 - C2548) * C5251 + (C2549 - C2550) * C32158 +
             (C2217 - C2218) * C5252 + (C2219 - C2220) * C32145 +
             (C2221 - C2222) * C5253 + (C2223 - C2224) * C32115) *
                C32129) *
               C572 +
           (((C2544 - C2543) * C5251 + (C2546 - C2545) * C32158 +
             (C2210 - C2209) * C5252 + (C2212 - C2211) * C32145 +
             (C2214 - C2213) * C5253 + (C2216 - C2215) * C32115) *
                C10013 +
            ((C2548 - C2547) * C5251 + (C2550 - C2549) * C32158 +
             (C2218 - C2217) * C5252 + (C2220 - C2219) * C32145 +
             (C2222 - C2221) * C5253 + (C2224 - C2223) * C32115) *
                C10014 +
            ((C31836 * C2533 - C113 * C2530) * C5251 +
             (C31836 * C2539 - C113 * C2534) * C32158 +
             (C31836 * C2535 - C113 * C2531) * C5252 +
             (C31836 * C2540 - C113 * C2536) * C32145 +
             (C31836 * C2537 - C113 * C2532) * C5253 +
             (C31836 * C2541 - C113 * C2538) * C32115) *
                C32129) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
              C32126 * C259 - C814 * C244) *
                 C6079 +
             (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
              C32126 * C274 - C814 * C260) *
                 C31752) *
                C10013 +
            ((C11016 - C11017 + C11018 - C11019 + C11020 - C11021) * C6079 +
             (C11022 - C11023 + C11024 - C11025 + C11026 - C11027) * C31752) *
                C10014 +
            C11064 * C32129) *
               C572 +
           (((C11017 - C11016 + C11019 - C11018 + C11021 - C11020) * C6079 +
             (C11023 - C11022 + C11025 - C11024 + C11027 - C11026) * C31752) *
                C10013 +
            ((C11029 - C11028 + C11031 - C11030 + C11033 - C11032) * C6079 +
             (C11035 - C11034 + C11037 - C11036 + C11039 - C11038) * C31752) *
                C10014 +
            ((C11040 - C11041 + C11042 - C11043 + C11044 - C11045) * C6079 +
             (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C31752) *
                C32129) *
               C573) *
              C466 +
          ((((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
              C814 * C974 - C32126 * C980) *
                 C6079 +
             (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
              C814 * C981 - C32126 * C992) *
                 C31752) *
                C10013 +
            ((C11515 - C11516 + C11517 - C11518 + C11519 - C11520) * C6079 +
             (C11521 - C11522 + C11523 - C11524 + C11525 - C11526) * C31752) *
                C10014 +
            ((C11527 - C11528 + C11529 - C11530 + C11531 - C11532) * C6079 +
             (C11533 - C11534 + C11535 - C11536 + C11537 - C11538) * C31752) *
                C32129) *
               C572 +
           (((C11516 - C11515 + C11518 - C11517 + C11520 - C11519) * C6079 +
             (C11522 - C11521 + C11524 - C11523 + C11526 - C11525) * C31752) *
                C10013 +
            ((C11528 - C11527 + C11530 - C11529 + C11532 - C11531) * C6079 +
             (C11534 - C11533 + C11536 - C11535 + C11538 - C11537) * C31752) *
                C10014 +
            ((C32161 * C2533 - C812 * C2530 + C32149 * C6815 - C813 * C6812 +
              C32126 * C7332 - C814 * C7331) *
                 C6079 +
             (C32161 * C2539 - C812 * C2534 + C32149 * C6821 - C813 * C6816 +
              C32126 * C7334 - C814 * C7333) *
                 C31752) *
                C32129) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C6079 +
             (C31836 * C140 - C113 * C127) * C31752) *
                C11600 +
            ((C2024 - C2025) * C6079 + (C2026 - C2027) * C31752) * C11601 +
            C11750 * C11602 + C11755 * C11603 + C11758 * C11604) *
               C572 +
           (((C2025 - C2024) * C6079 + (C2027 - C2026) * C31752) * C11600 +
            ((C2029 - C2028) * C6079 + (C2031 - C2030) * C31752) * C11601 +
            ((C2036 - C2037) * C6079 + (C2038 - C2039) * C31752) * C11602 +
            ((C11743 - C11742) * C6079 + (C11745 - C11744) * C31752) * C11603 +
            ((C11746 - C11747) * C6079 + (C11748 - C11749) * C31752) * C11604) *
               C573) *
              C466 +
          ((((C113 * C239 - C31836 * C249) * C6079 +
             (C113 * C250 - C31836 * C269) * C31752) *
                C11600 +
            ((C2543 - C2544) * C6079 + (C2545 - C2546) * C31752) * C11601 +
            ((C2547 - C2548) * C6079 + (C2549 - C2550) * C31752) * C11602 +
            ((C12021 - C12022) * C6079 + (C12023 - C12024) * C31752) * C11603 +
            ((C12025 - C12026) * C6079 + (C12027 - C12028) * C31752) * C11604) *
               C572 +
           (((C2544 - C2543) * C6079 + (C2546 - C2545) * C31752) * C11600 +
            ((C2548 - C2547) * C6079 + (C2550 - C2549) * C31752) * C11601 +
            ((C12022 - C12021) * C6079 + (C12024 - C12023) * C31752) * C11602 +
            ((C12026 - C12025) * C6079 + (C12028 - C12027) * C31752) * C11603 +
            ((C31836 * C12017 - C113 * C12016) * C6079 +
             (C31836 * C12019 - C113 * C12018) * C31752) *
                C11604) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (-0.25 * std::pow(Pi, 2.5) *
             (((C31836 * C126 - C113 * C119) * C114 +
               (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
               (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
               C171 * C105 + C172 * C118 + C173 * C106) *
                  C31854 * C31813 * C31799 * C110 +
              ((C149 - C148) * C114 + (C151 - C150) * C102 +
               (C153 - C152) * C115 + (C155 - C154) * C103 +
               (C157 - C156) * C116 + (C159 - C158) * C104 +
               (C161 - C160) * C117 + (C163 - C162) * C105 +
               (C164 - C165) * C118 + (C166 - C167) * C106) *
                  C31854 * C31813 * C31799 * C111 +
              (C168 * C114 + C169 * C102 + C170 * C115 + C171 * C103 +
               C172 * C116 + C173 * C104 + (C165 - C164) * C117 +
               (C167 - C166) * C105 + (C31836 * C138 - C113 * C125) * C118 +
               (C31836 * C146 - C113 * C139) * C106) *
                  C31854 * C31813 * C31799 * C112) -
         0.25 * std::pow(Pi, 2.5) *
             (((C31836 * C126 - C113 * C119) * C114 +
               (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
               (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
               C171 * C105 + C172 * C118 + C173 * C106) *
                  C31854 * C31813 * C235 +
              ((C113 * C239 - C31836 * C249) * C114 +
               (C113 * C250 - C31836 * C269) * C102 +
               (C113 * C240 - C31836 * C251) * C115 +
               (C113 * C252 - C31836 * C270) * C103 +
               (C113 * C241 - C31836 * C253) * C116 +
               (C113 * C254 - C31836 * C271) * C104 +
               (C113 * C242 - C31836 * C255) * C117 +
               (C113 * C256 - C31836 * C272) * C105 +
               (C113 * C243 - C31836 * C257) * C118 +
               (C113 * C258 - C31836 * C273) * C106) *
                  C31854 * C31813 * C236 +
              ((C31836 * C259 - C113 * C244) * C114 +
               (C31836 * C274 - C113 * C260) * C102 +
               (C31836 * C261 - C113 * C245) * C115 +
               (C31836 * C275 - C113 * C262) * C103 +
               (C31836 * C263 - C113 * C246) * C116 +
               (C31836 * C276 - C113 * C264) * C104 +
               (C31836 * C265 - C113 * C247) * C117 +
               (C31836 * C277 - C113 * C266) * C105 +
               (C31836 * C267 - C113 * C248) * C118 +
               (C31836 * C278 - C113 * C268) * C106) *
                  C31854 * C31813 * C237) *
             C31787 +
         0.5 * std::pow(Pi, 2.5) *
             (((C31836 * C126 - C113 * C119) * C114 +
               (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
               (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
               C171 * C105 + C172 * C118 + C173 * C106) *
                  C31854 * C341 +
              ((C113 * C344 - C31836 * C354) * C114 +
               (C113 * C355 - C31836 * C374) * C102 +
               (C113 * C345 - C31836 * C356) * C115 +
               (C113 * C357 - C31836 * C375) * C103 +
               (C113 * C346 - C31836 * C358) * C116 +
               (C113 * C359 - C31836 * C376) * C104 +
               (C113 * C347 - C31836 * C360) * C117 +
               (C113 * C361 - C31836 * C377) * C105 +
               (C113 * C348 - C31836 * C362) * C118 +
               (C113 * C363 - C31836 * C378) * C106) *
                  C31854 * C342 +
              ((C31836 * C364 - C113 * C349) * C114 +
               (C31836 * C379 - C113 * C365) * C102 +
               (C31836 * C366 - C113 * C350) * C115 +
               (C31836 * C380 - C113 * C367) * C103 +
               (C31836 * C368 - C113 * C351) * C116 +
               (C31836 * C381 - C113 * C369) * C104 +
               (C31836 * C370 - C113 * C352) * C117 +
               (C31836 * C382 - C113 * C371) * C105 +
               (C31836 * C372 - C113 * C353) * C118 +
               (C31836 * C383 - C113 * C373) * C106) *
                  C31854 * C343) *
             C31799 * C31787 -
         0.25 * std::pow(Pi, 2.5) *
             (((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
                C32126 * C259 - C814 * C244) *
                   C815 +
               (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
                C32126 * C274 - C814 * C260) *
                   C809 +
               (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
               (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
               C864 * C32115) *
                  C31854 * C31813 * C31799 * C110 +
              ((C820 - C819 + C822 - C821 + C824 - C823) * C815 +
               (C826 - C825 + C828 - C827 + C830 - C829) * C809 +
               (C832 - C831 + C834 - C833 + C836 - C835) * C816 +
               (C838 - C837 + C840 - C839 + C842 - C841) * C810 +
               (C843 - C844 + C845 - C846 + C847 - C848) * C817 +
               (C849 - C850 + C851 - C852 + C853 - C854) * C32115) *
                  C31854 * C31813 * C31799 * C111 +
              (C863 * C815 + C864 * C809 +
               (C844 - C843 + C846 - C845 + C848 - C847) * C816 +
               (C850 - C849 + C852 - C851 + C854 - C853) * C810 +
               (C32161 * C134 - C812 * C123 + C32149 * C257 - C813 * C243 +
                C32126 * C267 - C814 * C248) *
                   C817 +
               (C32161 * C144 - C812 * C135 + C32149 * C273 - C813 * C258 +
                C32126 * C278 - C814 * C268) *
                   C32115) *
                  C31854 * C31813 * C31799 * C112) -
         0.25 * std::pow(Pi, 2.5) *
             (((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
                C32126 * C259 - C814 * C244) *
                   C815 +
               (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
                C32126 * C274 - C814 * C260) *
                   C809 +
               (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
               (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
               C864 * C32115) *
                  C31854 * C31813 * C235 +
              ((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
                C814 * C974 - C32126 * C980) *
                   C815 +
               (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
                C814 * C981 - C32126 * C992) *
                   C809 +
               (C812 * C240 - C32161 * C251 + C813 * C245 - C32149 * C261 +
                C814 * C975 - C32126 * C982) *
                   C816 +
               (C812 * C252 - C32161 * C270 + C813 * C262 - C32149 * C275 +
                C814 * C983 - C32126 * C993) *
                   C810 +
               (C812 * C241 - C32161 * C253 + C813 * C246 - C32149 * C263 +
                C814 * C976 - C32126 * C984) *
                   C817 +
               (C812 * C254 - C32161 * C271 + C813 * C264 - C32149 * C276 +
                C814 * C985 - C32126 * C994) *
                   C32115) *
                  C31854 * C31813 * C236 +
              ((C32161 * C259 - C812 * C244 + C32149 * C980 - C813 * C974 +
                C32126 * C986 - C814 * C977) *
                   C815 +
               (C32161 * C274 - C812 * C260 + C32149 * C992 - C813 * C981 +
                C32126 * C995 - C814 * C987) *
                   C809 +
               (C32161 * C261 - C812 * C245 + C32149 * C982 - C813 * C975 +
                C32126 * C988 - C814 * C978) *
                   C816 +
               (C32161 * C275 - C812 * C262 + C32149 * C993 - C813 * C983 +
                C32126 * C996 - C814 * C989) *
                   C810 +
               (C32161 * C263 - C812 * C246 + C32149 * C984 - C813 * C976 +
                C32126 * C990 - C814 * C979) *
                   C817 +
               (C32161 * C276 - C812 * C264 + C32149 * C994 - C813 * C985 +
                C32126 * C997 - C814 * C991) *
                   C32115) *
                  C31854 * C31813 * C237) *
             C31787 +
         0.5 * std::pow(Pi, 2.5) *
             (((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
                C32126 * C259 - C814 * C244) *
                   C815 +
               (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
                C32126 * C274 - C814 * C260) *
                   C809 +
               (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
               (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
               C864 * C32115) *
                  C31854 * C341 +
              ((C812 * C344 - C32161 * C354 + C813 * C676 - C32149 * C681 +
                C814 * C1108 - C32126 * C1117) *
                   C815 +
               (C812 * C355 - C32161 * C374 + C813 * C682 - C32149 * C691 +
                C814 * C1118 - C32126 * C1135) *
                   C809 +
               (C812 * C345 - C32161 * C356 + C813 * C677 - C32149 * C683 +
                C814 * C1109 - C32126 * C1119) *
                   C816 +
               (C812 * C357 - C32161 * C375 + C813 * C684 - C32149 * C692 +
                C814 * C1120 - C32126 * C1136) *
                   C810 +
               (C812 * C346 - C32161 * C358 + C813 * C678 - C32149 * C685 +
                C814 * C1110 - C32126 * C1121) *
                   C817 +
               (C812 * C359 - C32161 * C376 + C813 * C686 - C32149 * C693 +
                C814 * C1122 - C32126 * C1137) *
                   C32115) *
                  C31854 * C342 +
              ((C32161 * C364 - C812 * C349 + C32149 * C1123 - C813 * C1111 +
                C32126 * C1124 - C814 * C1112) *
                   C815 +
               (C32161 * C379 - C812 * C365 + C32149 * C1138 - C813 * C1125 +
                C32126 * C1139 - C814 * C1126) *
                   C809 +
               (C32161 * C366 - C812 * C350 + C32149 * C1127 - C813 * C1113 +
                C32126 * C1128 - C814 * C1114) *
                   C816 +
               (C32161 * C380 - C812 * C367 + C32149 * C1140 - C813 * C1129 +
                C32126 * C1141 - C814 * C1130) *
                   C810 +
               (C32161 * C368 - C812 * C351 + C32149 * C1131 - C813 * C1115 +
                C32126 * C1132 - C814 * C1116) *
                   C817 +
               (C32161 * C381 - C812 * C369 + C32149 * C1142 - C813 * C1133 +
                C32126 * C1143 - C814 * C1134) *
                   C32115) *
                  C31854 * C343) *
             C31799 * C31787 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C31836 * C126 - C113 * C119) * C815 +
                (C31836 * C140 - C113 * C127) * C809 + (C148 - C149) * C816 +
                (C150 - C151) * C810 + C168 * C817 + C169 * C32115) *
                   C32162 +
               ((C31836 * C354 - C113 * C344) * C815 +
                (C31836 * C374 - C113 * C355) * C809 + (C580 - C579) * C816 +
                (C582 - C581) * C810 + C1764 * C817 + C1765 * C32115) *
                   C32151 +
               ((C31836 * C364 - C113 * C349) * C815 +
                (C31836 * C379 - C113 * C365) * C809 + (C1766 - C1767) * C816 +
                (C1768 - C1769) * C810 + C1778 * C817 + C1779 * C32115) *
                   C32129) *
                  C31813 * C31799 * C110 +
              (((C149 - C148) * C815 + (C151 - C150) * C809 +
                (C153 - C152) * C816 + (C155 - C154) * C810 +
                (C157 - C156) * C817 + (C159 - C158) * C32115) *
                   C32162 +
               ((C579 - C580) * C815 + (C581 - C582) * C809 +
                (C583 - C584) * C816 + (C585 - C586) * C810 +
                (C587 - C588) * C817 + (C589 - C590) * C32115) *
                   C32151 +
               ((C1767 - C1766) * C815 + (C1769 - C1768) * C809 +
                (C1771 - C1770) * C816 + (C1773 - C1772) * C810 +
                (C1774 - C1775) * C817 + (C1776 - C1777) * C32115) *
                   C32129) *
                  C31813 * C31799 * C111 +
              ((C168 * C815 + C169 * C809 + C170 * C816 + C171 * C810 +
                C172 * C817 + C173 * C32115) *
                   C32162 +
               (C1764 * C815 + C1765 * C809 + (C588 - C587) * C816 +
                (C590 - C589) * C810 + (C592 - C591) * C817 +
                (C594 - C593) * C32115) *
                   C32151 +
               (C1778 * C815 + C1779 * C809 + (C1775 - C1774) * C816 +
                (C1777 - C1776) * C810 + (C31836 * C372 - C113 * C353) * C817 +
                (C31836 * C383 - C113 * C373) * C32115) *
                   C32129) *
                  C31813 * C31799 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C31836 * C126 - C113 * C119) * C815 +
                (C31836 * C140 - C113 * C127) * C809 + (C148 - C149) * C816 +
                (C150 - C151) * C810 + C168 * C817 + C169 * C32115) *
                   C32162 +
               ((C31836 * C354 - C113 * C344) * C815 +
                (C31836 * C374 - C113 * C355) * C809 + (C580 - C579) * C816 +
                (C582 - C581) * C810 + C1764 * C817 + C1765 * C32115) *
                   C32151 +
               ((C31836 * C364 - C113 * C349) * C815 +
                (C31836 * C379 - C113 * C365) * C809 + (C1766 - C1767) * C816 +
                (C1768 - C1769) * C810 + C1778 * C817 + C1779 * C32115) *
                   C32129) *
                  C31813 * C235 +
              (((C113 * C239 - C31836 * C249) * C815 +
                (C113 * C250 - C31836 * C269) * C809 + (C475 - C476) * C816 +
                (C477 - C478) * C810 + (C479 - C480) * C817 +
                (C481 - C482) * C32115) *
                   C32162 +
               ((C113 * C676 - C31836 * C681) * C815 +
                (C113 * C682 - C31836 * C691) * C809 +
                (C113 * C677 - C31836 * C683) * C816 +
                (C113 * C684 - C31836 * C692) * C810 +
                (C113 * C678 - C31836 * C685) * C817 +
                (C113 * C686 - C31836 * C693) * C32115) *
                   C32151 +
               ((C113 * C1111 - C31836 * C1123) * C815 +
                (C113 * C1125 - C31836 * C1138) * C809 +
                (C113 * C1113 - C31836 * C1127) * C816 +
                (C113 * C1129 - C31836 * C1140) * C810 +
                (C113 * C1115 - C31836 * C1131) * C817 +
                (C113 * C1133 - C31836 * C1142) * C32115) *
                   C32129) *
                  C31813 * C236 +
              (((C31836 * C259 - C113 * C244) * C815 +
                (C31836 * C274 - C113 * C260) * C809 +
                (C31836 * C261 - C113 * C245) * C816 +
                (C31836 * C275 - C113 * C262) * C810 +
                (C31836 * C263 - C113 * C246) * C817 +
                (C31836 * C276 - C113 * C264) * C32115) *
                   C32162 +
               ((C31836 * C1117 - C113 * C1108) * C815 +
                (C31836 * C1135 - C113 * C1118) * C809 +
                (C31836 * C1119 - C113 * C1109) * C816 +
                (C31836 * C1136 - C113 * C1120) * C810 +
                (C31836 * C1121 - C113 * C1110) * C817 +
                (C31836 * C1137 - C113 * C1122) * C32115) *
                   C32151 +
               ((C31836 * C1124 - C113 * C1112) * C815 +
                (C31836 * C1139 - C113 * C1126) * C809 +
                (C31836 * C1128 - C113 * C1114) * C816 +
                (C31836 * C1141 - C113 * C1130) * C810 +
                (C31836 * C1132 - C113 * C1116) * C817 +
                (C31836 * C1143 - C113 * C1134) * C32115) *
                   C32129) *
                  C31813 * C237) *
             C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C815 +
            (C31836 * C140 - C113 * C127) * C809 + (C148 - C149) * C816 +
            (C150 - C151) * C810 + C168 * C817 + C169 * C32115) *
               C32162 +
           ((C2024 - C2025) * C815 + (C2026 - C2027) * C809 +
            (C580 - C579) * C816 + (C582 - C581) * C810 + C1764 * C817 +
            C1765 * C32115) *
               C32151 +
           C2058 * C32129) *
              C341 +
          (((C2025 - C2024) * C815 + (C2027 - C2026) * C809 +
            (C579 - C580) * C816 + (C581 - C582) * C810 + (C583 - C584) * C817 +
            (C585 - C586) * C32115) *
               C32162 +
           ((C2029 - C2028) * C815 + (C2031 - C2030) * C809 +
            (C1767 - C1766) * C816 + (C1769 - C1768) * C810 +
            (C1771 - C1770) * C817 + (C1773 - C1772) * C32115) *
               C32151 +
           ((C2036 - C2037) * C815 + (C2038 - C2039) * C809 +
            (C2040 - C2041) * C816 + (C2042 - C2043) * C810 +
            (C2044 - C2045) * C817 + (C2046 - C2047) * C32115) *
               C32129) *
              C342 +
          (C2058 * C32162 +
           ((C2037 - C2036) * C815 + (C2039 - C2038) * C809 +
            (C2041 - C2040) * C816 + (C2043 - C2042) * C810 +
            (C2045 - C2044) * C817 + (C2047 - C2046) * C32115) *
               C32151 +
           ((C31836 * C2011 - C113 * C2002) * C815 +
            (C31836 * C2020 - C113 * C2012) * C809 +
            (C31836 * C2013 - C113 * C2003) * C816 +
            (C31836 * C2021 - C113 * C2014) * C810 +
            (C31836 * C2015 - C113 * C2004) * C817 +
            (C31836 * C2022 - C113 * C2016) * C32115) *
               C32129) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
            C32126 * C259 - C5250 * C244) *
               C5251 +
           (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
            C32126 * C274 - C5250 * C260) *
               C32158 +
           (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
           (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
           C5299 * C5253 + C5300 * C32115) *
              C31854 * C31813 * C31799 * C110 +
          ((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C5251 +
           (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C32158 +
           (C5268 - C5267 + C5270 - C5269 + C5272 - C5271) * C5252 +
           (C5274 - C5273 + C5276 - C5275 + C5278 - C5277) * C32145 +
           (C5279 - C5280 + C5281 - C5282 + C5283 - C5284) * C5253 +
           (C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C32115) *
              C31854 * C31813 * C31799 * C111 +
          (C5299 * C5251 + C5300 * C32158 +
           (C5280 - C5279 + C5282 - C5281 + C5284 - C5283) * C5252 +
           (C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C32145 +
           (C5242 * C134 - C5248 * C123 + C5243 * C257 - C5249 * C243 +
            C32126 * C267 - C5250 * C248) *
               C5253 +
           (C5242 * C144 - C5248 * C135 + C5243 * C273 - C5249 * C258 +
            C32126 * C278 - C5250 * C268) *
               C32115) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
            C32126 * C259 - C5250 * C244) *
               C5251 +
           (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
            C32126 * C274 - C5250 * C260) *
               C32158 +
           (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
           (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
           C5299 * C5253 + C5300 * C32115) *
              C31854 * C31813 * C235 +
          ((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
            C5250 * C974 - C32126 * C980) *
               C5251 +
           (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
            C5250 * C981 - C32126 * C992) *
               C32158 +
           (C5248 * C240 - C5242 * C251 + C5249 * C245 - C5243 * C261 +
            C5250 * C975 - C32126 * C982) *
               C5252 +
           (C5248 * C252 - C5242 * C270 + C5249 * C262 - C5243 * C275 +
            C5250 * C983 - C32126 * C993) *
               C32145 +
           (C5248 * C241 - C5242 * C253 + C5249 * C246 - C5243 * C263 +
            C5250 * C976 - C32126 * C984) *
               C5253 +
           (C5248 * C254 - C5242 * C271 + C5249 * C264 - C5243 * C276 +
            C5250 * C985 - C32126 * C994) *
               C32115) *
              C31854 * C31813 * C236 +
          ((C5242 * C259 - C5248 * C244 + C5243 * C980 - C5249 * C974 +
            C32126 * C986 - C5250 * C977) *
               C5251 +
           (C5242 * C274 - C5248 * C260 + C5243 * C992 - C5249 * C981 +
            C32126 * C995 - C5250 * C987) *
               C32158 +
           (C5242 * C261 - C5248 * C245 + C5243 * C982 - C5249 * C975 +
            C32126 * C988 - C5250 * C978) *
               C5252 +
           (C5242 * C275 - C5248 * C262 + C5243 * C993 - C5249 * C983 +
            C32126 * C996 - C5250 * C989) *
               C32145 +
           (C5242 * C263 - C5248 * C246 + C5243 * C984 - C5249 * C976 +
            C32126 * C990 - C5250 * C979) *
               C5253 +
           (C5242 * C276 - C5248 * C264 + C5243 * C994 - C5249 * C985 +
            C32126 * C997 - C5250 * C991) *
               C32115) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
            C32126 * C259 - C5250 * C244) *
               C5251 +
           (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
            C32126 * C274 - C5250 * C260) *
               C32158 +
           (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
           (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
           C5299 * C5253 + C5300 * C32115) *
              C31854 * C341 +
          ((C5248 * C344 - C5242 * C354 + C5249 * C676 - C5243 * C681 +
            C5250 * C1108 - C32126 * C1117) *
               C5251 +
           (C5248 * C355 - C5242 * C374 + C5249 * C682 - C5243 * C691 +
            C5250 * C1118 - C32126 * C1135) *
               C32158 +
           (C5248 * C345 - C5242 * C356 + C5249 * C677 - C5243 * C683 +
            C5250 * C1109 - C32126 * C1119) *
               C5252 +
           (C5248 * C357 - C5242 * C375 + C5249 * C684 - C5243 * C692 +
            C5250 * C1120 - C32126 * C1136) *
               C32145 +
           (C5248 * C346 - C5242 * C358 + C5249 * C678 - C5243 * C685 +
            C5250 * C1110 - C32126 * C1121) *
               C5253 +
           (C5248 * C359 - C5242 * C376 + C5249 * C686 - C5243 * C693 +
            C5250 * C1122 - C32126 * C1137) *
               C32115) *
              C31854 * C342 +
          ((C5242 * C364 - C5248 * C349 + C5243 * C1123 - C5249 * C1111 +
            C32126 * C1124 - C5250 * C1112) *
               C5251 +
           (C5242 * C379 - C5248 * C365 + C5243 * C1138 - C5249 * C1125 +
            C32126 * C1139 - C5250 * C1126) *
               C32158 +
           (C5242 * C366 - C5248 * C350 + C5243 * C1127 - C5249 * C1113 +
            C32126 * C1128 - C5250 * C1114) *
               C5252 +
           (C5242 * C380 - C5248 * C367 + C5243 * C1140 - C5249 * C1129 +
            C32126 * C1141 - C5250 * C1130) *
               C32145 +
           (C5242 * C368 - C5248 * C351 + C5243 * C1131 - C5249 * C1115 +
            C32126 * C1132 - C5250 * C1116) *
               C5253 +
           (C5242 * C381 - C5248 * C369 + C5243 * C1142 - C5249 * C1133 +
            C32126 * C1143 - C5250 * C1134) *
               C32115) *
              C31854 * C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
            C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
            C6072 * C986 - C6078 * C977) *
               C6079 +
           (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
            C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
            C6072 * C995 - C6078 * C987) *
               C31752) *
              C31854 * C31813 * C31799 * C110 +
          ((C6074 * C120 - C6068 * C128 + C6075 * C240 - C6069 * C251 +
            C6076 * C245 - C6070 * C261 + C6077 * C975 - C6071 * C982 +
            C6078 * C978 - C6072 * C988) *
               C6079 +
           (C6074 * C129 - C6068 * C141 + C6075 * C252 - C6069 * C270 +
            C6076 * C262 - C6070 * C275 + C6077 * C983 - C6071 * C993 +
            C6078 * C989 - C6072 * C996) *
               C31752) *
              C31854 * C31813 * C31799 * C111 +
          ((C6068 * C130 - C6074 * C121 + C6069 * C253 - C6075 * C241 +
            C6070 * C263 - C6076 * C246 + C6071 * C984 - C6077 * C976 +
            C6072 * C990 - C6078 * C979) *
               C6079 +
           (C6068 * C142 - C6074 * C131 + C6069 * C271 - C6075 * C254 +
            C6070 * C276 - C6076 * C264 + C6071 * C994 - C6077 * C985 +
            C6072 * C997 - C6078 * C991) *
               C31752) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
            C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
            C6072 * C986 - C6078 * C977) *
               C6079 +
           (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
            C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
            C6072 * C995 - C6078 * C987) *
               C31752) *
              C31854 * C31813 * C235 +
          ((C6074 * C239 - C6068 * C249 + C6075 * C244 - C6069 * C259 +
            C6076 * C974 - C6070 * C980 + C6077 * C977 - C6071 * C986 +
            C6078 * C6142 - C6072 * C6144) *
               C6079 +
           (C6074 * C250 - C6068 * C269 + C6075 * C260 - C6069 * C274 +
            C6076 * C981 - C6070 * C992 + C6077 * C987 - C6071 * C995 +
            C6078 * C6145 - C6072 * C6148) *
               C31752) *
              C31854 * C31813 * C236 +
          ((C6068 * C259 - C6074 * C244 + C6069 * C980 - C6075 * C974 +
            C6070 * C986 - C6076 * C977 + C6071 * C6144 - C6077 * C6142 +
            C6072 * C6146 - C6078 * C6143) *
               C6079 +
           (C6068 * C274 - C6074 * C260 + C6069 * C992 - C6075 * C981 +
            C6070 * C995 - C6076 * C987 + C6071 * C6148 - C6077 * C6145 +
            C6072 * C6149 - C6078 * C6147) *
               C31752) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
            C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
            C6072 * C986 - C6078 * C977) *
               C6079 +
           (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
            C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
            C6072 * C995 - C6078 * C987) *
               C31752) *
              C31854 * C341 +
          ((C6074 * C344 - C6068 * C354 + C6075 * C676 - C6069 * C681 +
            C6076 * C1108 - C6070 * C1117 + C6077 * C1638 - C6071 * C1641 +
            C6078 * C6212 - C6072 * C6215) *
               C6079 +
           (C6074 * C355 - C6068 * C374 + C6075 * C682 - C6069 * C691 +
            C6076 * C1118 - C6070 * C1135 + C6077 * C1642 - C6071 * C1647 +
            C6078 * C6216 - C6072 * C6221) *
               C31752) *
              C31854 * C342 +
          ((C6068 * C364 - C6074 * C349 + C6069 * C1123 - C6075 * C1111 +
            C6070 * C1124 - C6076 * C1112 + C6071 * C6217 - C6077 * C6213 +
            C6072 * C6218 - C6078 * C6214) *
               C6079 +
           (C6068 * C379 - C6074 * C365 + C6069 * C1138 - C6075 * C1125 +
            C6070 * C1139 - C6076 * C1126 + C6071 * C6222 - C6077 * C6219 +
            C6072 * C6223 - C6078 * C6220) *
               C31752) *
              C31854 * C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C6079 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C31752) *
               C32162 +
           ((C5242 * C354 - C5248 * C344 + C5243 * C681 - C5249 * C676 +
             C32126 * C1117 - C5250 * C1108) *
                C6079 +
            (C5242 * C374 - C5248 * C355 + C5243 * C691 - C5249 * C682 +
             C32126 * C1135 - C5250 * C1118) *
                C31752) *
               C32151 +
           ((C5242 * C364 - C5248 * C349 + C5243 * C1123 - C5249 * C1111 +
             C32126 * C1124 - C5250 * C1112) *
                C6079 +
            (C5242 * C379 - C5248 * C365 + C5243 * C1138 - C5249 * C1125 +
             C32126 * C1139 - C5250 * C1126) *
                C31752) *
               C32129) *
              C31813 * C31799 * C110 +
          (((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C6079 +
            (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C31752) *
               C32162 +
           ((C5837 - C5838 + C5839 - C5840 + C5841 - C5842) * C6079 +
            (C5843 - C5844 + C5845 - C5846 + C5847 - C5848) * C31752) *
               C32151 +
           ((C5248 * C350 - C5242 * C366 + C5249 * C1113 - C5243 * C1127 +
             C5250 * C1114 - C32126 * C1128) *
                C6079 +
            (C5248 * C367 - C5242 * C380 + C5249 * C1129 - C5243 * C1140 +
             C5250 * C1130 - C32126 * C1141) *
                C31752) *
               C32129) *
              C31813 * C31799 * C111 +
          ((C5299 * C6079 + C5300 * C31752) * C32162 +
           ((C5850 - C5849 + C5852 - C5851 + C5854 - C5853) * C6079 +
            (C5856 - C5855 + C5858 - C5857 + C5860 - C5859) * C31752) *
               C32151 +
           ((C5242 * C368 - C5248 * C351 + C5243 * C1131 - C5249 * C1115 +
             C32126 * C1132 - C5250 * C1116) *
                C6079 +
            (C5242 * C381 - C5248 * C369 + C5243 * C1142 - C5249 * C1133 +
             C32126 * C1143 - C5250 * C1134) *
                C31752) *
               C32129) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C6079 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C31752) *
               C32162 +
           ((C5242 * C354 - C5248 * C344 + C5243 * C681 - C5249 * C676 +
             C32126 * C1117 - C5250 * C1108) *
                C6079 +
            (C5242 * C374 - C5248 * C355 + C5243 * C691 - C5249 * C682 +
             C32126 * C1135 - C5250 * C1118) *
                C31752) *
               C32151 +
           ((C5242 * C364 - C5248 * C349 + C5243 * C1123 - C5249 * C1111 +
             C32126 * C1124 - C5250 * C1112) *
                C6079 +
            (C5242 * C379 - C5248 * C365 + C5243 * C1138 - C5249 * C1125 +
             C32126 * C1139 - C5250 * C1126) *
                C31752) *
               C32129) *
              C31813 * C235 +
          (((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
             C5250 * C974 - C32126 * C980) *
                C6079 +
            (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
             C5250 * C981 - C32126 * C992) *
                C31752) *
               C32162 +
           ((C5248 * C676 - C5242 * C681 + C5249 * C1108 - C5243 * C1117 +
             C5250 * C1638 - C32126 * C1641) *
                C6079 +
            (C5248 * C682 - C5242 * C691 + C5249 * C1118 - C5243 * C1135 +
             C5250 * C1642 - C32126 * C1647) *
                C31752) *
               C32151 +
           ((C5248 * C1111 - C5242 * C1123 + C5249 * C1112 - C5243 * C1124 +
             C5250 * C6213 - C32126 * C6217) *
                C6079 +
            (C5248 * C1125 - C5242 * C1138 + C5249 * C1126 - C5243 * C1139 +
             C5250 * C6219 - C32126 * C6222) *
                C31752) *
               C32129) *
              C31813 * C236 +
          (((C5242 * C259 - C5248 * C244 + C5243 * C980 - C5249 * C974 +
             C32126 * C986 - C5250 * C977) *
                C6079 +
            (C5242 * C274 - C5248 * C260 + C5243 * C992 - C5249 * C981 +
             C32126 * C995 - C5250 * C987) *
                C31752) *
               C32162 +
           ((C5242 * C1117 - C5248 * C1108 + C5243 * C1641 - C5249 * C1638 +
             C32126 * C6215 - C5250 * C6212) *
                C6079 +
            (C5242 * C1135 - C5248 * C1118 + C5243 * C1647 - C5249 * C1642 +
             C32126 * C6221 - C5250 * C6216) *
                C31752) *
               C32151 +
           ((C5242 * C1124 - C5248 * C1112 + C5243 * C6217 - C5249 * C6213 +
             C32126 * C6218 - C5250 * C6214) *
                C6079 +
            (C5242 * C1139 - C5248 * C1126 + C5243 * C6222 - C5249 * C6219 +
             C32126 * C6223 - C5250 * C6220) *
                C31752) *
               C32129) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C6079 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C31752) *
               C32162 +
           ((C6825 - C6826 + C6827 - C6828 + C6829 - C6830) * C6079 +
            (C6831 - C6832 + C6833 - C6834 + C6835 - C6836) * C31752) *
               C32151 +
           C6873 * C32129) *
              C341 +
          (((C6826 - C6825 + C6828 - C6827 + C6830 - C6829) * C6079 +
            (C6832 - C6831 + C6834 - C6833 + C6836 - C6835) * C31752) *
               C32162 +
           ((C6838 - C6837 + C6840 - C6839 + C6842 - C6841) * C6079 +
            (C6844 - C6843 + C6846 - C6845 + C6848 - C6847) * C31752) *
               C32151 +
           ((C6849 - C6850 + C6851 - C6852 + C6853 - C6854) * C6079 +
            (C6855 - C6856 + C6857 - C6858 + C6859 - C6860) * C31752) *
               C32129) *
              C342 +
          (C6873 * C32162 +
           ((C6850 - C6849 + C6852 - C6851 + C6854 - C6853) * C6079 +
            (C6856 - C6855 + C6858 - C6857 + C6860 - C6859) * C31752) *
               C32151 +
           ((C5242 * C2011 - C5248 * C2002 + C5243 * C6817 - C5249 * C6813 +
             C32126 * C6818 - C5250 * C6814) *
                C6079 +
            (C5242 * C2020 - C5248 * C2012 + C5243 * C6822 - C5249 * C6819 +
             C32126 * C6823 - C5250 * C6820) *
                C31752) *
               C32129) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C5251 +
            (C31836 * C140 - C113 * C127) * C32158 + (C148 - C149) * C5252 +
            (C150 - C151) * C32145 + C168 * C5253 + C169 * C32115) *
               C10013 +
           ((C2024 - C2025) * C5251 + (C2026 - C2027) * C32158 + C2375 * C5252 +
            C2376 * C32145 + C1764 * C5253 + C1765 * C32115) *
               C10014 +
           (C2048 * C5251 + C2049 * C32158 + C2032 * C5252 + C2033 * C32145 +
            C1778 * C5253 + C1779 * C32115) *
               C32129) *
              C31813 * C31799 * C110 +
          (((C149 - C148) * C5251 + (C151 - C150) * C32158 +
            (C153 - C152) * C5252 + (C155 - C154) * C32145 +
            (C157 - C156) * C5253 + (C159 - C158) * C32115) *
               C10013 +
           (C2377 * C5251 + C2378 * C32158 + C2379 * C5252 + C2380 * C32145 +
            C3901 * C5253 + C3902 * C32115) *
               C10014 +
           (C2381 * C5251 + C2382 * C32158 + C2383 * C5252 + C2384 * C32145 +
            (C1774 - C1775) * C5253 + (C1776 - C1777) * C32115) *
               C32129) *
              C31813 * C31799 * C111 +
          ((C168 * C5251 + C169 * C32158 + C170 * C5252 + C171 * C32145 +
            C172 * C5253 + C173 * C32115) *
               C10013 +
           (C1764 * C5251 + C1765 * C32158 + C3439 * C5252 + C3440 * C32145 +
            (C592 - C591) * C5253 + (C594 - C593) * C32115) *
               C10014 +
           (C1778 * C5251 + C1779 * C32158 + (C1775 - C1774) * C5252 +
            (C1777 - C1776) * C32145 + (C31836 * C372 - C113 * C353) * C5253 +
            (C31836 * C383 - C113 * C373) * C32115) *
               C32129) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C5251 +
            (C31836 * C140 - C113 * C127) * C32158 + (C148 - C149) * C5252 +
            (C150 - C151) * C32145 + C168 * C5253 + C169 * C32115) *
               C10013 +
           ((C2024 - C2025) * C5251 + (C2026 - C2027) * C32158 + C2375 * C5252 +
            C2376 * C32145 + C1764 * C5253 + C1765 * C32115) *
               C10014 +
           (C2048 * C5251 + C2049 * C32158 + C2032 * C5252 + C2033 * C32145 +
            C1778 * C5253 + C1779 * C32115) *
               C32129) *
              C31813 * C235 +
          (((C113 * C239 - C31836 * C249) * C5251 +
            (C113 * C250 - C31836 * C269) * C32158 + (C475 - C476) * C5252 +
            (C477 - C478) * C32145 + (C479 - C480) * C5253 +
            (C481 - C482) * C32115) *
               C10013 +
           ((C2543 - C2544) * C5251 + (C2545 - C2546) * C32158 +
            (C2209 - C2210) * C5252 + (C2211 - C2212) * C32145 +
            (C2213 - C2214) * C5253 + (C2215 - C2216) * C32115) *
               C10014 +
           ((C2547 - C2548) * C5251 + (C2549 - C2550) * C32158 +
            (C2217 - C2218) * C5252 + (C2219 - C2220) * C32145 +
            (C2221 - C2222) * C5253 + (C2223 - C2224) * C32115) *
               C32129) *
              C31813 * C236 +
          (((C31836 * C259 - C113 * C244) * C5251 +
            (C31836 * C274 - C113 * C260) * C32158 +
            (C31836 * C261 - C113 * C245) * C5252 +
            (C31836 * C275 - C113 * C262) * C32145 +
            (C31836 * C263 - C113 * C246) * C5253 +
            (C31836 * C276 - C113 * C264) * C32115) *
               C10013 +
           ((C31836 * C1117 - C113 * C1108) * C5251 +
            (C31836 * C1135 - C113 * C1118) * C32158 +
            (C31836 * C1119 - C113 * C1109) * C5252 +
            (C31836 * C1136 - C113 * C1120) * C32145 +
            (C31836 * C1121 - C113 * C1110) * C5253 +
            (C31836 * C1137 - C113 * C1122) * C32115) *
               C10014 +
           ((C31836 * C1124 - C113 * C1112) * C5251 +
            (C31836 * C1139 - C113 * C1126) * C32158 +
            (C31836 * C1128 - C113 * C1114) * C5252 +
            (C31836 * C1141 - C113 * C1130) * C32145 +
            (C31836 * C1132 - C113 * C1116) * C5253 +
            (C31836 * C1143 - C113 * C1134) * C32115) *
               C32129) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C5251 +
            (C31836 * C140 - C113 * C127) * C32158 + (C148 - C149) * C5252 +
            (C150 - C151) * C32145 + C168 * C5253 + C169 * C32115) *
               C10013 +
           ((C2024 - C2025) * C5251 + (C2026 - C2027) * C32158 + C2375 * C5252 +
            C2376 * C32145 + C1764 * C5253 + C1765 * C32115) *
               C10014 +
           C10247 * C32129) *
              C341 +
          (((C2025 - C2024) * C5251 + (C2027 - C2026) * C32158 + C2377 * C5252 +
            C2378 * C32145 + C2379 * C5253 + C2380 * C32115) *
               C10013 +
           ((C2029 - C2028) * C5251 + (C2031 - C2030) * C32158 + C2381 * C5252 +
            C2382 * C32145 + C2383 * C5253 + C2384 * C32115) *
               C10014 +
           ((C2036 - C2037) * C5251 + (C2038 - C2039) * C32158 +
            (C2040 - C2041) * C5252 + (C2042 - C2043) * C32145 +
            (C2044 - C2045) * C5253 + (C2046 - C2047) * C32115) *
               C32129) *
              C342 +
          (C10247 * C10013 +
           ((C2037 - C2036) * C5251 + (C2039 - C2038) * C32158 +
            (C2041 - C2040) * C5252 + (C2043 - C2042) * C32145 +
            (C2045 - C2044) * C5253 + (C2047 - C2046) * C32115) *
               C10014 +
           ((C31836 * C2011 - C113 * C2002) * C5251 +
            (C31836 * C2020 - C113 * C2012) * C32158 +
            (C31836 * C2013 - C113 * C2003) * C5252 +
            (C31836 * C2021 - C113 * C2014) * C32145 +
            (C31836 * C2015 - C113 * C2004) * C5253 +
            (C31836 * C2022 - C113 * C2016) * C32115) *
               C32129) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C6079 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C31752) *
               C10013 +
           ((C32161 * C354 - C812 * C344 + C32149 * C681 - C813 * C676 +
             C32126 * C1117 - C814 * C1108) *
                C6079 +
            (C32161 * C374 - C812 * C355 + C32149 * C691 - C813 * C682 +
             C32126 * C1135 - C814 * C1118) *
                C31752) *
               C10014 +
           ((C32161 * C364 - C812 * C349 + C32149 * C1123 - C813 * C1111 +
             C32126 * C1124 - C814 * C1112) *
                C6079 +
            (C32161 * C379 - C812 * C365 + C32149 * C1138 - C813 * C1125 +
             C32126 * C1139 - C814 * C1126) *
                C31752) *
               C32129) *
              C31813 * C31799 * C110 +
          (((C820 - C819 + C822 - C821 + C824 - C823) * C6079 +
            (C826 - C825 + C828 - C827 + C830 - C829) * C31752) *
               C10013 +
           ((C1469 - C1470 + C1471 - C1472 + C1473 - C1474) * C6079 +
            (C1475 - C1476 + C1477 - C1478 + C1479 - C1480) * C31752) *
               C10014 +
           ((C812 * C350 - C32161 * C366 + C813 * C1113 - C32149 * C1127 +
             C814 * C1114 - C32126 * C1128) *
                C6079 +
            (C812 * C367 - C32161 * C380 + C813 * C1129 - C32149 * C1140 +
             C814 * C1130 - C32126 * C1141) *
                C31752) *
               C32129) *
              C31813 * C31799 * C111 +
          ((C863 * C6079 + C864 * C31752) * C10013 +
           ((C1482 - C1481 + C1484 - C1483 + C1486 - C1485) * C6079 +
            (C1488 - C1487 + C1490 - C1489 + C1492 - C1491) * C31752) *
               C10014 +
           ((C32161 * C368 - C812 * C351 + C32149 * C1131 - C813 * C1115 +
             C32126 * C1132 - C814 * C1116) *
                C6079 +
            (C32161 * C381 - C812 * C369 + C32149 * C1142 - C813 * C1133 +
             C32126 * C1143 - C814 * C1134) *
                C31752) *
               C32129) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C6079 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C31752) *
               C10013 +
           ((C32161 * C354 - C812 * C344 + C32149 * C681 - C813 * C676 +
             C32126 * C1117 - C814 * C1108) *
                C6079 +
            (C32161 * C374 - C812 * C355 + C32149 * C691 - C813 * C682 +
             C32126 * C1135 - C814 * C1118) *
                C31752) *
               C10014 +
           ((C32161 * C364 - C812 * C349 + C32149 * C1123 - C813 * C1111 +
             C32126 * C1124 - C814 * C1112) *
                C6079 +
            (C32161 * C379 - C812 * C365 + C32149 * C1138 - C813 * C1125 +
             C32126 * C1139 - C814 * C1126) *
                C31752) *
               C32129) *
              C31813 * C235 +
          (((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
             C814 * C974 - C32126 * C980) *
                C6079 +
            (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
             C814 * C981 - C32126 * C992) *
                C31752) *
               C10013 +
           ((C812 * C676 - C32161 * C681 + C813 * C1108 - C32149 * C1117 +
             C814 * C1638 - C32126 * C1641) *
                C6079 +
            (C812 * C682 - C32161 * C691 + C813 * C1118 - C32149 * C1135 +
             C814 * C1642 - C32126 * C1647) *
                C31752) *
               C10014 +
           ((C812 * C1111 - C32161 * C1123 + C813 * C1112 - C32149 * C1124 +
             C814 * C6213 - C32126 * C6217) *
                C6079 +
            (C812 * C1125 - C32161 * C1138 + C813 * C1126 - C32149 * C1139 +
             C814 * C6219 - C32126 * C6222) *
                C31752) *
               C32129) *
              C31813 * C236 +
          (((C32161 * C259 - C812 * C244 + C32149 * C980 - C813 * C974 +
             C32126 * C986 - C814 * C977) *
                C6079 +
            (C32161 * C274 - C812 * C260 + C32149 * C992 - C813 * C981 +
             C32126 * C995 - C814 * C987) *
                C31752) *
               C10013 +
           ((C32161 * C1117 - C812 * C1108 + C32149 * C1641 - C813 * C1638 +
             C32126 * C6215 - C814 * C6212) *
                C6079 +
            (C32161 * C1135 - C812 * C1118 + C32149 * C1647 - C813 * C1642 +
             C32126 * C6221 - C814 * C6216) *
                C31752) *
               C10014 +
           ((C32161 * C1124 - C812 * C1112 + C32149 * C6217 - C813 * C6213 +
             C32126 * C6218 - C814 * C6214) *
                C6079 +
            (C32161 * C1139 - C812 * C1126 + C32149 * C6222 - C813 * C6219 +
             C32126 * C6223 - C814 * C6220) *
                C31752) *
               C32129) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C6079 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C31752) *
               C10013 +
           ((C11016 - C11017 + C11018 - C11019 + C11020 - C11021) * C6079 +
            (C11022 - C11023 + C11024 - C11025 + C11026 - C11027) * C31752) *
               C10014 +
           C11064 * C32129) *
              C341 +
          (((C11017 - C11016 + C11019 - C11018 + C11021 - C11020) * C6079 +
            (C11023 - C11022 + C11025 - C11024 + C11027 - C11026) * C31752) *
               C10013 +
           ((C11029 - C11028 + C11031 - C11030 + C11033 - C11032) * C6079 +
            (C11035 - C11034 + C11037 - C11036 + C11039 - C11038) * C31752) *
               C10014 +
           ((C11040 - C11041 + C11042 - C11043 + C11044 - C11045) * C6079 +
            (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C31752) *
               C32129) *
              C342 +
          (C11064 * C10013 +
           ((C11041 - C11040 + C11043 - C11042 + C11045 - C11044) * C6079 +
            (C11047 - C11046 + C11049 - C11048 + C11051 - C11050) * C31752) *
               C10014 +
           ((C32161 * C2011 - C812 * C2002 + C32149 * C6817 - C813 * C6813 +
             C32126 * C6818 - C814 * C6814) *
                C6079 +
            (C32161 * C2020 - C812 * C2012 + C32149 * C6822 - C813 * C6819 +
             C32126 * C6823 - C814 * C6820) *
                C31752) *
               C32129) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C6079 +
            (C31836 * C140 - C113 * C127) * C31752) *
               C11600 +
           ((C2024 - C2025) * C6079 + (C2026 - C2027) * C31752) * C11601 +
           (C2048 * C6079 + C2049 * C31752) * C11602 +
           ((C2037 - C2036) * C6079 + (C2039 - C2038) * C31752) * C11603 +
           ((C31836 * C2011 - C113 * C2002) * C6079 +
            (C31836 * C2020 - C113 * C2012) * C31752) *
               C11604) *
              C31813 * C31799 * C110 +
          (((C149 - C148) * C6079 + (C151 - C150) * C31752) * C11600 +
           (C2377 * C6079 + C2378 * C31752) * C11601 +
           (C2381 * C6079 + C2382 * C31752) * C11602 +
           ((C2040 - C2041) * C6079 + (C2042 - C2043) * C31752) * C11603 +
           ((C113 * C2003 - C31836 * C2013) * C6079 +
            (C113 * C2014 - C31836 * C2021) * C31752) *
               C11604) *
              C31813 * C31799 * C111 +
          ((C168 * C6079 + C169 * C31752) * C11600 +
           (C1764 * C6079 + C1765 * C31752) * C11601 +
           (C1778 * C6079 + C1779 * C31752) * C11602 +
           ((C2045 - C2044) * C6079 + (C2047 - C2046) * C31752) * C11603 +
           ((C31836 * C2015 - C113 * C2004) * C6079 +
            (C31836 * C2022 - C113 * C2016) * C31752) *
               C11604) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C6079 +
            (C31836 * C140 - C113 * C127) * C31752) *
               C11600 +
           ((C2024 - C2025) * C6079 + (C2026 - C2027) * C31752) * C11601 +
           (C2048 * C6079 + C2049 * C31752) * C11602 +
           ((C2037 - C2036) * C6079 + (C2039 - C2038) * C31752) * C11603 +
           ((C31836 * C2011 - C113 * C2002) * C6079 +
            (C31836 * C2020 - C113 * C2012) * C31752) *
               C11604) *
              C31813 * C235 +
          (((C113 * C239 - C31836 * C249) * C6079 +
            (C113 * C250 - C31836 * C269) * C31752) *
               C11600 +
           ((C2543 - C2544) * C6079 + (C2545 - C2546) * C31752) * C11601 +
           ((C2547 - C2548) * C6079 + (C2549 - C2550) * C31752) * C11602 +
           ((C113 * C2530 - C31836 * C2533) * C6079 +
            (C113 * C2534 - C31836 * C2539) * C31752) *
               C11603 +
           ((C113 * C6813 - C31836 * C6817) * C6079 +
            (C113 * C6819 - C31836 * C6822) * C31752) *
               C11604) *
              C31813 * C236 +
          (((C31836 * C259 - C113 * C244) * C6079 +
            (C31836 * C274 - C113 * C260) * C31752) *
               C11600 +
           ((C31836 * C1117 - C113 * C1108) * C6079 +
            (C31836 * C1135 - C113 * C1118) * C31752) *
               C11601 +
           ((C31836 * C1124 - C113 * C1112) * C6079 +
            (C31836 * C1139 - C113 * C1126) * C31752) *
               C11602 +
           ((C31836 * C6815 - C113 * C6812) * C6079 +
            (C31836 * C6821 - C113 * C6816) * C31752) *
               C11603 +
           ((C31836 * C6818 - C113 * C6814) * C6079 +
            (C31836 * C6823 - C113 * C6820) * C31752) *
               C11604) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C6079 +
            (C31836 * C140 - C113 * C127) * C31752) *
               C11600 +
           ((C2024 - C2025) * C6079 + (C2026 - C2027) * C31752) * C11601 +
           C11750 * C11602 + C11755 * C11603 + C11758 * C11604) *
              C341 +
          (((C2025 - C2024) * C6079 + (C2027 - C2026) * C31752) * C11600 +
           ((C2029 - C2028) * C6079 + (C2031 - C2030) * C31752) * C11601 +
           ((C2036 - C2037) * C6079 + (C2038 - C2039) * C31752) * C11602 +
           ((C11743 - C11742) * C6079 + (C11745 - C11744) * C31752) * C11603 +
           ((C11746 - C11747) * C6079 + (C11748 - C11749) * C31752) * C11604) *
              C342 +
          (C11750 * C11600 + C11755 * C11601 + C11758 * C11602 +
           ((C11747 - C11746) * C6079 + (C11749 - C11748) * C31752) * C11603 +
           ((C31836 * C11733 - C113 * C11730) * C6079 +
            (C31836 * C11736 - C113 * C11734) * C31752) *
               C11604) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C31836 * C126 - C113 * C119) * C114 +
                (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
                (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
                C171 * C105 + C172 * C118 + C173 * C106) *
                   C31854 * C572 +
               ((C113 * C344 - C31836 * C354) * C114 +
                (C113 * C355 - C31836 * C374) * C102 + (C579 - C580) * C115 +
                (C581 - C582) * C103 + (C583 - C584) * C116 +
                (C585 - C586) * C104 + (C587 - C588) * C117 +
                (C589 - C590) * C105 + (C591 - C592) * C118 +
                (C593 - C594) * C106) *
                   C31854 * C573) *
                  C31799 * C468 +
              (((C149 - C148) * C114 + (C151 - C150) * C102 +
                (C153 - C152) * C115 + (C155 - C154) * C103 +
                (C157 - C156) * C116 + (C159 - C158) * C104 +
                (C161 - C160) * C117 + (C163 - C162) * C105 +
                (C164 - C165) * C118 + (C166 - C167) * C106) *
                   C31854 * C572 +
               ((C580 - C579) * C114 + (C582 - C581) * C102 +
                (C584 - C583) * C115 + (C586 - C585) * C103 +
                (C588 - C587) * C116 + (C590 - C589) * C104 +
                (C592 - C591) * C117 + (C594 - C593) * C105 +
                (C31836 * C575 - C113 * C574) * C118 +
                (C31836 * C577 - C113 * C576) * C106) *
                   C31854 * C573) *
                  C31799 * C469) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
                 C32126 * C259 - C814 * C244) *
                    C815 +
                (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
                 C32126 * C274 - C814 * C260) *
                    C809 +
                (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
                (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
                C864 * C32115) *
                   C31854 * C572 +
               ((C812 * C344 - C32161 * C354 + C813 * C676 - C32149 * C681 +
                 C814 * C1108 - C32126 * C1117) *
                    C815 +
                (C812 * C355 - C32161 * C374 + C813 * C682 - C32149 * C691 +
                 C814 * C1118 - C32126 * C1135) *
                    C809 +
                (C1469 - C1470 + C1471 - C1472 + C1473 - C1474) * C816 +
                (C1475 - C1476 + C1477 - C1478 + C1479 - C1480) * C810 +
                (C1481 - C1482 + C1483 - C1484 + C1485 - C1486) * C817 +
                (C1487 - C1488 + C1489 - C1490 + C1491 - C1492) * C32115) *
                   C31854 * C573) *
                  C31799 * C468 +
              (((C820 - C819 + C822 - C821 + C824 - C823) * C815 +
                (C826 - C825 + C828 - C827 + C830 - C829) * C809 +
                (C832 - C831 + C834 - C833 + C836 - C835) * C816 +
                (C838 - C837 + C840 - C839 + C842 - C841) * C810 +
                (C843 - C844 + C845 - C846 + C847 - C848) * C817 +
                (C849 - C850 + C851 - C852 + C853 - C854) * C32115) *
                   C31854 * C572 +
               ((C1470 - C1469 + C1472 - C1471 + C1474 - C1473) * C815 +
                (C1476 - C1475 + C1478 - C1477 + C1480 - C1479) * C809 +
                (C1482 - C1481 + C1484 - C1483 + C1486 - C1485) * C816 +
                (C1488 - C1487 + C1490 - C1489 + C1492 - C1491) * C810 +
                (C32161 * C360 - C812 * C347 + C32149 * C687 - C813 * C679 +
                 C32126 * C1465 - C814 * C1464) *
                    C817 +
                (C32161 * C377 - C812 * C361 + C32149 * C694 - C813 * C688 +
                 C32126 * C1467 - C814 * C1466) *
                    C32115) *
                   C31854 * C573) *
                  C31799 * C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C815 +
             (C31836 * C140 - C113 * C127) * C809 + (C148 - C149) * C816 +
             (C150 - C151) * C810 + C168 * C817 + C169 * C32115) *
                C32162 +
            ((C2024 - C2025) * C815 + (C2026 - C2027) * C809 + C2375 * C816 +
             C2376 * C810 + C1764 * C817 + C1765 * C32115) *
                C32151 +
            C2058 * C32129) *
               C572 +
           (((C2025 - C2024) * C815 + (C2027 - C2026) * C809 + C2377 * C816 +
             C2378 * C810 + C2379 * C817 + C2380 * C32115) *
                C32162 +
            ((C2029 - C2028) * C815 + (C2031 - C2030) * C809 + C2381 * C816 +
             C2382 * C810 + C2383 * C817 + C2384 * C32115) *
                C32151 +
            ((C2036 - C2037) * C815 + (C2038 - C2039) * C809 +
             (C2040 - C2041) * C816 + (C2042 - C2043) * C810 +
             (C2044 - C2045) * C817 + (C2046 - C2047) * C32115) *
                C32129) *
               C573) *
              C31799 * C468 +
          ((((C149 - C148) * C815 + (C151 - C150) * C809 +
             (C153 - C152) * C816 + (C155 - C154) * C810 +
             (C157 - C156) * C817 + (C159 - C158) * C32115) *
                C32162 +
            (C2377 * C815 + C2378 * C809 + C2379 * C816 + C2380 * C810 +
             (C587 - C588) * C817 + (C589 - C590) * C32115) *
                C32151 +
            (C2381 * C815 + C2382 * C809 + C2383 * C816 + C2384 * C810 +
             (C1774 - C1775) * C817 + (C1776 - C1777) * C32115) *
                C32129) *
               C572 +
           ((C2375 * C815 + C2376 * C809 + C1764 * C816 + C1765 * C810 +
             (C588 - C587) * C817 + (C590 - C589) * C32115) *
                C32162 +
            (C2032 * C815 + C2033 * C809 + C1778 * C816 + C1779 * C810 +
             (C1775 - C1774) * C817 + (C1777 - C1776) * C32115) *
                C32151 +
            ((C2041 - C2040) * C815 + (C2043 - C2042) * C809 +
             (C2045 - C2044) * C816 + (C2047 - C2046) * C810 +
             (C31836 * C2371 - C113 * C2370) * C817 +
             (C31836 * C2373 - C113 * C2372) * C32115) *
                C32129) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C5251 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C32158 +
            (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
            (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
            C5299 * C5253 + C5300 * C32115) *
               C31854 * C572 +
           ((C5248 * C344 - C5242 * C354 + C5249 * C676 - C5243 * C681 +
             C5250 * C1108 - C32126 * C1117) *
                C5251 +
            (C5248 * C355 - C5242 * C374 + C5249 * C682 - C5243 * C691 +
             C5250 * C1118 - C32126 * C1135) *
                C32158 +
            (C5837 - C5838 + C5839 - C5840 + C5841 - C5842) * C5252 +
            (C5843 - C5844 + C5845 - C5846 + C5847 - C5848) * C32145 +
            (C5849 - C5850 + C5851 - C5852 + C5853 - C5854) * C5253 +
            (C5855 - C5856 + C5857 - C5858 + C5859 - C5860) * C32115) *
               C31854 * C573) *
              C31799 * C468 +
          (((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C5251 +
            (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C32158 +
            (C5268 - C5267 + C5270 - C5269 + C5272 - C5271) * C5252 +
            (C5274 - C5273 + C5276 - C5275 + C5278 - C5277) * C32145 +
            (C5279 - C5280 + C5281 - C5282 + C5283 - C5284) * C5253 +
            (C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C32115) *
               C31854 * C572 +
           ((C5838 - C5837 + C5840 - C5839 + C5842 - C5841) * C5251 +
            (C5844 - C5843 + C5846 - C5845 + C5848 - C5847) * C32158 +
            (C5850 - C5849 + C5852 - C5851 + C5854 - C5853) * C5252 +
            (C5856 - C5855 + C5858 - C5857 + C5860 - C5859) * C32145 +
            (C5242 * C360 - C5248 * C347 + C5243 * C687 - C5249 * C679 +
             C32126 * C1465 - C5250 * C1464) *
                C5253 +
            (C5242 * C377 - C5248 * C361 + C5243 * C694 - C5249 * C688 +
             C32126 * C1467 - C5250 * C1466) *
                C32115) *
               C31854 * C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
             C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
             C6072 * C986 - C6078 * C977) *
                C6079 +
            (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
             C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
             C6072 * C995 - C6078 * C987) *
                C31752) *
               C31854 * C572 +
           ((C6074 * C344 - C6068 * C354 + C6075 * C676 - C6069 * C681 +
             C6076 * C1108 - C6070 * C1117 + C6077 * C1638 - C6071 * C1641 +
             C6078 * C6212 - C6072 * C6215) *
                C6079 +
            (C6074 * C355 - C6068 * C374 + C6075 * C682 - C6069 * C691 +
             C6076 * C1118 - C6070 * C1135 + C6077 * C1642 - C6071 * C1647 +
             C6078 * C6216 - C6072 * C6221) *
                C31752) *
               C31854 * C573) *
              C31799 * C468 +
          (((C6074 * C120 - C6068 * C128 + C6075 * C240 - C6069 * C251 +
             C6076 * C245 - C6070 * C261 + C6077 * C975 - C6071 * C982 +
             C6078 * C978 - C6072 * C988) *
                C6079 +
            (C6074 * C129 - C6068 * C141 + C6075 * C252 - C6069 * C270 +
             C6076 * C262 - C6070 * C275 + C6077 * C983 - C6071 * C993 +
             C6078 * C989 - C6072 * C996) *
                C31752) *
               C31854 * C572 +
           ((C6068 * C356 - C6074 * C345 + C6069 * C683 - C6075 * C677 +
             C6070 * C1119 - C6076 * C1109 + C6071 * C1643 - C6077 * C1639 +
             C6072 * C6393 - C6078 * C6392) *
                C6079 +
            (C6068 * C375 - C6074 * C357 + C6069 * C692 - C6075 * C684 +
             C6070 * C1136 - C6076 * C1120 + C6071 * C1648 - C6077 * C1644 +
             C6072 * C6395 - C6078 * C6394) *
                C31752) *
               C31854 * C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
              C32126 * C259 - C5250 * C244) *
                 C6079 +
             (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
              C32126 * C274 - C5250 * C260) *
                 C31752) *
                C32162 +
            ((C6825 - C6826 + C6827 - C6828 + C6829 - C6830) * C6079 +
             (C6831 - C6832 + C6833 - C6834 + C6835 - C6836) * C31752) *
                C32151 +
            C6873 * C32129) *
               C572 +
           (((C6826 - C6825 + C6828 - C6827 + C6830 - C6829) * C6079 +
             (C6832 - C6831 + C6834 - C6833 + C6836 - C6835) * C31752) *
                C32162 +
            ((C6838 - C6837 + C6840 - C6839 + C6842 - C6841) * C6079 +
             (C6844 - C6843 + C6846 - C6845 + C6848 - C6847) * C31752) *
                C32151 +
            ((C6849 - C6850 + C6851 - C6852 + C6853 - C6854) * C6079 +
             (C6855 - C6856 + C6857 - C6858 + C6859 - C6860) * C31752) *
                C32129) *
               C573) *
              C31799 * C468 +
          ((((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C6079 +
             (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C31752) *
                C32162 +
            ((C5837 - C5838 + C5839 - C5840 + C5841 - C5842) * C6079 +
             (C5843 - C5844 + C5845 - C5846 + C5847 - C5848) * C31752) *
                C32151 +
            ((C7174 - C7175 + C7176 - C7177 + C7178 - C7179) * C6079 +
             (C7180 - C7181 + C7182 - C7183 + C7184 - C7185) * C31752) *
                C32129) *
               C572 +
           (((C5838 - C5837 + C5840 - C5839 + C5842 - C5841) * C6079 +
             (C5844 - C5843 + C5846 - C5845 + C5848 - C5847) * C31752) *
                C32162 +
            ((C7175 - C7174 + C7177 - C7176 + C7179 - C7178) * C6079 +
             (C7181 - C7180 + C7183 - C7182 + C7185 - C7184) * C31752) *
                C32151 +
            ((C5242 * C2007 - C5248 * C2000 + C5243 * C2535 - C5249 * C2531 +
              C32126 * C7170 - C5250 * C7169) *
                 C6079 +
             (C5242 * C2018 - C5248 * C2008 + C5243 * C2540 - C5249 * C2536 +
              C32126 * C7172 - C5250 * C7171) *
                 C31752) *
                C32129) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C5251 +
             (C31836 * C140 - C113 * C127) * C32158 + (C148 - C149) * C5252 +
             (C150 - C151) * C32145 + C168 * C5253 + C169 * C32115) *
                C10013 +
            ((C2024 - C2025) * C5251 + (C2026 - C2027) * C32158 +
             C2375 * C5252 + C2376 * C32145 + C1764 * C5253 + C1765 * C32115) *
                C10014 +
            C10247 * C32129) *
               C572 +
           (((C2025 - C2024) * C5251 + (C2027 - C2026) * C32158 +
             C2377 * C5252 + C2378 * C32145 + C2379 * C5253 + C2380 * C32115) *
                C10013 +
            ((C2029 - C2028) * C5251 + (C2031 - C2030) * C32158 +
             C2381 * C5252 + C2382 * C32145 + C2383 * C5253 + C2384 * C32115) *
                C10014 +
            ((C2036 - C2037) * C5251 + (C2038 - C2039) * C32158 +
             (C2040 - C2041) * C5252 + (C2042 - C2043) * C32145 +
             (C2044 - C2045) * C5253 + (C2046 - C2047) * C32115) *
                C32129) *
               C573) *
              C31799 * C468 +
          ((((C149 - C148) * C5251 + (C151 - C150) * C32158 +
             (C153 - C152) * C5252 + (C155 - C154) * C32145 +
             (C157 - C156) * C5253 + (C159 - C158) * C32115) *
                C10013 +
            (C2377 * C5251 + C2378 * C32158 + C2379 * C5252 + C2380 * C32145 +
             C3901 * C5253 + C3902 * C32115) *
                C10014 +
            (C2381 * C5251 + C2382 * C32158 + C2383 * C5252 + C2384 * C32145 +
             (C1774 - C1775) * C5253 + (C1776 - C1777) * C32115) *
                C32129) *
               C572 +
           ((C2375 * C5251 + C2376 * C32158 + C1764 * C5252 + C1765 * C32145 +
             C3439 * C5253 + C3440 * C32115) *
                C10013 +
            (C2032 * C5251 + C2033 * C32158 + C1778 * C5252 + C1779 * C32145 +
             (C1775 - C1774) * C5253 + (C1777 - C1776) * C32115) *
                C10014 +
            ((C2041 - C2040) * C5251 + (C2043 - C2042) * C32158 +
             (C2045 - C2044) * C5252 + (C2047 - C2046) * C32145 +
             (C31836 * C2371 - C113 * C2370) * C5253 +
             (C31836 * C2373 - C113 * C2372) * C32115) *
                C32129) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
              C32126 * C259 - C814 * C244) *
                 C6079 +
             (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
              C32126 * C274 - C814 * C260) *
                 C31752) *
                C10013 +
            ((C11016 - C11017 + C11018 - C11019 + C11020 - C11021) * C6079 +
             (C11022 - C11023 + C11024 - C11025 + C11026 - C11027) * C31752) *
                C10014 +
            C11064 * C32129) *
               C572 +
           (((C11017 - C11016 + C11019 - C11018 + C11021 - C11020) * C6079 +
             (C11023 - C11022 + C11025 - C11024 + C11027 - C11026) * C31752) *
                C10013 +
            ((C11029 - C11028 + C11031 - C11030 + C11033 - C11032) * C6079 +
             (C11035 - C11034 + C11037 - C11036 + C11039 - C11038) * C31752) *
                C10014 +
            ((C11040 - C11041 + C11042 - C11043 + C11044 - C11045) * C6079 +
             (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C31752) *
                C32129) *
               C573) *
              C31799 * C468 +
          ((((C820 - C819 + C822 - C821 + C824 - C823) * C6079 +
             (C826 - C825 + C828 - C827 + C830 - C829) * C31752) *
                C10013 +
            ((C1469 - C1470 + C1471 - C1472 + C1473 - C1474) * C6079 +
             (C1475 - C1476 + C1477 - C1478 + C1479 - C1480) * C31752) *
                C10014 +
            ((C11357 - C11358 + C11359 - C11360 + C11361 - C11362) * C6079 +
             (C11363 - C11364 + C11365 - C11366 + C11367 - C11368) * C31752) *
                C32129) *
               C572 +
           (((C1470 - C1469 + C1472 - C1471 + C1474 - C1473) * C6079 +
             (C1476 - C1475 + C1478 - C1477 + C1480 - C1479) * C31752) *
                C10013 +
            ((C11358 - C11357 + C11360 - C11359 + C11362 - C11361) * C6079 +
             (C11364 - C11363 + C11366 - C11365 + C11368 - C11367) * C31752) *
                C10014 +
            ((C32161 * C2007 - C812 * C2000 + C32149 * C2535 - C813 * C2531 +
              C32126 * C7170 - C814 * C7169) *
                 C6079 +
             (C32161 * C2018 - C812 * C2008 + C32149 * C2540 - C813 * C2536 +
              C32126 * C7172 - C814 * C7171) *
                 C31752) *
                C32129) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C6079 +
             (C31836 * C140 - C113 * C127) * C31752) *
                C11600 +
            ((C2024 - C2025) * C6079 + (C2026 - C2027) * C31752) * C11601 +
            C11750 * C11602 + C11755 * C11603 + C11758 * C11604) *
               C572 +
           (((C2025 - C2024) * C6079 + (C2027 - C2026) * C31752) * C11600 +
            ((C2029 - C2028) * C6079 + (C2031 - C2030) * C31752) * C11601 +
            ((C2036 - C2037) * C6079 + (C2038 - C2039) * C31752) * C11602 +
            ((C11743 - C11742) * C6079 + (C11745 - C11744) * C31752) * C11603 +
            ((C11746 - C11747) * C6079 + (C11748 - C11749) * C31752) * C11604) *
               C573) *
              C31799 * C468 +
          ((((C149 - C148) * C6079 + (C151 - C150) * C31752) * C11600 +
            (C2377 * C6079 + C2378 * C31752) * C11601 +
            (C2381 * C6079 + C2382 * C31752) * C11602 +
            ((C2040 - C2041) * C6079 + (C2042 - C2043) * C31752) * C11603 +
            ((C11931 - C11932) * C6079 + (C11933 - C11934) * C31752) * C11604) *
               C572 +
           ((C2375 * C6079 + C2376 * C31752) * C11600 +
            (C2032 * C6079 + C2033 * C31752) * C11601 +
            ((C2041 - C2040) * C6079 + (C2043 - C2042) * C31752) * C11602 +
            ((C11932 - C11931) * C6079 + (C11934 - C11933) * C31752) * C11603 +
            ((C31836 * C11927 - C113 * C11926) * C6079 +
             (C31836 * C11929 - C113 * C11928) * C31752) *
                C11604) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C31836 * C126 - C113 * C119) * C114 +
           (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C31854 * C31813 * C31799 * C110 +
          ((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
           (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
           (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
           (C166 - C167) * C106) *
              C31854 * C31813 * C31799 * C111 +
          (C168 * C114 + C169 * C102 + C170 * C115 + C171 * C103 + C172 * C116 +
           C173 * C104 + (C165 - C164) * C117 + (C167 - C166) * C105 +
           (C31836 * C138 - C113 * C125) * C118 +
           (C31836 * C146 - C113 * C139) * C106) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C31836 * C126 - C113 * C119) * C114 +
           (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C31854 * C31813 * C235 +
          ((C113 * C239 - C31836 * C249) * C114 +
           (C113 * C250 - C31836 * C269) * C102 +
           (C113 * C240 - C31836 * C251) * C115 +
           (C113 * C252 - C31836 * C270) * C103 +
           (C113 * C241 - C31836 * C253) * C116 +
           (C113 * C254 - C31836 * C271) * C104 +
           (C113 * C242 - C31836 * C255) * C117 +
           (C113 * C256 - C31836 * C272) * C105 +
           (C113 * C243 - C31836 * C257) * C118 +
           (C113 * C258 - C31836 * C273) * C106) *
              C31854 * C31813 * C236 +
          ((C31836 * C259 - C113 * C244) * C114 +
           (C31836 * C274 - C113 * C260) * C102 +
           (C31836 * C261 - C113 * C245) * C115 +
           (C31836 * C275 - C113 * C262) * C103 +
           (C31836 * C263 - C113 * C246) * C116 +
           (C31836 * C276 - C113 * C264) * C104 +
           (C31836 * C265 - C113 * C247) * C117 +
           (C31836 * C277 - C113 * C266) * C105 +
           (C31836 * C267 - C113 * C248) * C118 +
           (C31836 * C278 - C113 * C268) * C106) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
            C32126 * C259 - C814 * C244) *
               C815 +
           (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
            C32126 * C274 - C814 * C260) *
               C809 +
           (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
           (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
           C864 * C32115) *
              C31854 * C31813 * C31799 * C110 +
          ((C820 - C819 + C822 - C821 + C824 - C823) * C815 +
           (C826 - C825 + C828 - C827 + C830 - C829) * C809 +
           (C832 - C831 + C834 - C833 + C836 - C835) * C816 +
           (C838 - C837 + C840 - C839 + C842 - C841) * C810 +
           (C843 - C844 + C845 - C846 + C847 - C848) * C817 +
           (C849 - C850 + C851 - C852 + C853 - C854) * C32115) *
              C31854 * C31813 * C31799 * C111 +
          (C863 * C815 + C864 * C809 +
           (C844 - C843 + C846 - C845 + C848 - C847) * C816 +
           (C850 - C849 + C852 - C851 + C854 - C853) * C810 +
           (C32161 * C134 - C812 * C123 + C32149 * C257 - C813 * C243 +
            C32126 * C267 - C814 * C248) *
               C817 +
           (C32161 * C144 - C812 * C135 + C32149 * C273 - C813 * C258 +
            C32126 * C278 - C814 * C268) *
               C32115) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
            C32126 * C259 - C814 * C244) *
               C815 +
           (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
            C32126 * C274 - C814 * C260) *
               C809 +
           (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
           (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
           C864 * C32115) *
              C31854 * C31813 * C235 +
          ((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
            C814 * C974 - C32126 * C980) *
               C815 +
           (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
            C814 * C981 - C32126 * C992) *
               C809 +
           (C812 * C240 - C32161 * C251 + C813 * C245 - C32149 * C261 +
            C814 * C975 - C32126 * C982) *
               C816 +
           (C812 * C252 - C32161 * C270 + C813 * C262 - C32149 * C275 +
            C814 * C983 - C32126 * C993) *
               C810 +
           (C812 * C241 - C32161 * C253 + C813 * C246 - C32149 * C263 +
            C814 * C976 - C32126 * C984) *
               C817 +
           (C812 * C254 - C32161 * C271 + C813 * C264 - C32149 * C276 +
            C814 * C985 - C32126 * C994) *
               C32115) *
              C31854 * C31813 * C236 +
          ((C32161 * C259 - C812 * C244 + C32149 * C980 - C813 * C974 +
            C32126 * C986 - C814 * C977) *
               C815 +
           (C32161 * C274 - C812 * C260 + C32149 * C992 - C813 * C981 +
            C32126 * C995 - C814 * C987) *
               C809 +
           (C32161 * C261 - C812 * C245 + C32149 * C982 - C813 * C975 +
            C32126 * C988 - C814 * C978) *
               C816 +
           (C32161 * C275 - C812 * C262 + C32149 * C993 - C813 * C983 +
            C32126 * C996 - C814 * C989) *
               C810 +
           (C32161 * C263 - C812 * C246 + C32149 * C984 - C813 * C976 +
            C32126 * C990 - C814 * C979) *
               C817 +
           (C32161 * C276 - C812 * C264 + C32149 * C994 - C813 * C985 +
            C32126 * C997 - C814 * C991) *
               C32115) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C815 +
            (C31836 * C140 - C113 * C127) * C809 + (C148 - C149) * C816 +
            (C150 - C151) * C810 + C168 * C817 + C169 * C32115) *
               C32162 +
           ((C31836 * C354 - C113 * C344) * C815 +
            (C31836 * C374 - C113 * C355) * C809 + (C580 - C579) * C816 +
            (C582 - C581) * C810 + C1764 * C817 + C1765 * C32115) *
               C32151 +
           ((C31836 * C364 - C113 * C349) * C815 +
            (C31836 * C379 - C113 * C365) * C809 + (C1766 - C1767) * C816 +
            (C1768 - C1769) * C810 + C1778 * C817 + C1779 * C32115) *
               C32129) *
              C31813 * C31799 * C110 +
          (((C149 - C148) * C815 + (C151 - C150) * C809 + (C153 - C152) * C816 +
            (C155 - C154) * C810 + (C157 - C156) * C817 +
            (C159 - C158) * C32115) *
               C32162 +
           ((C579 - C580) * C815 + (C581 - C582) * C809 + (C583 - C584) * C816 +
            (C585 - C586) * C810 + (C587 - C588) * C817 +
            (C589 - C590) * C32115) *
               C32151 +
           ((C1767 - C1766) * C815 + (C1769 - C1768) * C809 +
            (C1771 - C1770) * C816 + (C1773 - C1772) * C810 +
            (C1774 - C1775) * C817 + (C1776 - C1777) * C32115) *
               C32129) *
              C31813 * C31799 * C111 +
          ((C168 * C815 + C169 * C809 + C170 * C816 + C171 * C810 +
            C172 * C817 + C173 * C32115) *
               C32162 +
           (C1764 * C815 + C1765 * C809 + (C588 - C587) * C816 +
            (C590 - C589) * C810 + (C592 - C591) * C817 +
            (C594 - C593) * C32115) *
               C32151 +
           (C1778 * C815 + C1779 * C809 + (C1775 - C1774) * C816 +
            (C1777 - C1776) * C810 + (C31836 * C372 - C113 * C353) * C817 +
            (C31836 * C383 - C113 * C373) * C32115) *
               C32129) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C815 +
            (C31836 * C140 - C113 * C127) * C809 + (C148 - C149) * C816 +
            (C150 - C151) * C810 + C168 * C817 + C169 * C32115) *
               C32162 +
           ((C31836 * C354 - C113 * C344) * C815 +
            (C31836 * C374 - C113 * C355) * C809 + (C580 - C579) * C816 +
            (C582 - C581) * C810 + C1764 * C817 + C1765 * C32115) *
               C32151 +
           ((C31836 * C364 - C113 * C349) * C815 +
            (C31836 * C379 - C113 * C365) * C809 + (C1766 - C1767) * C816 +
            (C1768 - C1769) * C810 + C1778 * C817 + C1779 * C32115) *
               C32129) *
              C31813 * C235 +
          (((C113 * C239 - C31836 * C249) * C815 +
            (C113 * C250 - C31836 * C269) * C809 + (C475 - C476) * C816 +
            (C477 - C478) * C810 + (C479 - C480) * C817 +
            (C481 - C482) * C32115) *
               C32162 +
           ((C113 * C676 - C31836 * C681) * C815 +
            (C113 * C682 - C31836 * C691) * C809 +
            (C113 * C677 - C31836 * C683) * C816 +
            (C113 * C684 - C31836 * C692) * C810 +
            (C113 * C678 - C31836 * C685) * C817 +
            (C113 * C686 - C31836 * C693) * C32115) *
               C32151 +
           ((C113 * C1111 - C31836 * C1123) * C815 +
            (C113 * C1125 - C31836 * C1138) * C809 +
            (C113 * C1113 - C31836 * C1127) * C816 +
            (C113 * C1129 - C31836 * C1140) * C810 +
            (C113 * C1115 - C31836 * C1131) * C817 +
            (C113 * C1133 - C31836 * C1142) * C32115) *
               C32129) *
              C31813 * C236 +
          (((C31836 * C259 - C113 * C244) * C815 +
            (C31836 * C274 - C113 * C260) * C809 +
            (C31836 * C261 - C113 * C245) * C816 +
            (C31836 * C275 - C113 * C262) * C810 +
            (C31836 * C263 - C113 * C246) * C817 +
            (C31836 * C276 - C113 * C264) * C32115) *
               C32162 +
           ((C31836 * C1117 - C113 * C1108) * C815 +
            (C31836 * C1135 - C113 * C1118) * C809 +
            (C31836 * C1119 - C113 * C1109) * C816 +
            (C31836 * C1136 - C113 * C1120) * C810 +
            (C31836 * C1121 - C113 * C1110) * C817 +
            (C31836 * C1137 - C113 * C1122) * C32115) *
               C32151 +
           ((C31836 * C1124 - C113 * C1112) * C815 +
            (C31836 * C1139 - C113 * C1126) * C809 +
            (C31836 * C1128 - C113 * C1114) * C816 +
            (C31836 * C1141 - C113 * C1130) * C810 +
            (C31836 * C1132 - C113 * C1116) * C817 +
            (C31836 * C1143 - C113 * C1134) * C32115) *
               C32129) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
            C32126 * C259 - C5250 * C244) *
               C5251 +
           (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
            C32126 * C274 - C5250 * C260) *
               C32158 +
           (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
           (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
           C5299 * C5253 + C5300 * C32115) *
              C31854 * C31813 * C31799 * C110 +
          ((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C5251 +
           (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C32158 +
           (C5268 - C5267 + C5270 - C5269 + C5272 - C5271) * C5252 +
           (C5274 - C5273 + C5276 - C5275 + C5278 - C5277) * C32145 +
           (C5279 - C5280 + C5281 - C5282 + C5283 - C5284) * C5253 +
           (C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C32115) *
              C31854 * C31813 * C31799 * C111 +
          (C5299 * C5251 + C5300 * C32158 +
           (C5280 - C5279 + C5282 - C5281 + C5284 - C5283) * C5252 +
           (C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C32145 +
           (C5242 * C134 - C5248 * C123 + C5243 * C257 - C5249 * C243 +
            C32126 * C267 - C5250 * C248) *
               C5253 +
           (C5242 * C144 - C5248 * C135 + C5243 * C273 - C5249 * C258 +
            C32126 * C278 - C5250 * C268) *
               C32115) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
            C32126 * C259 - C5250 * C244) *
               C5251 +
           (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
            C32126 * C274 - C5250 * C260) *
               C32158 +
           (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
           (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
           C5299 * C5253 + C5300 * C32115) *
              C31854 * C31813 * C235 +
          ((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
            C5250 * C974 - C32126 * C980) *
               C5251 +
           (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
            C5250 * C981 - C32126 * C992) *
               C32158 +
           (C5248 * C240 - C5242 * C251 + C5249 * C245 - C5243 * C261 +
            C5250 * C975 - C32126 * C982) *
               C5252 +
           (C5248 * C252 - C5242 * C270 + C5249 * C262 - C5243 * C275 +
            C5250 * C983 - C32126 * C993) *
               C32145 +
           (C5248 * C241 - C5242 * C253 + C5249 * C246 - C5243 * C263 +
            C5250 * C976 - C32126 * C984) *
               C5253 +
           (C5248 * C254 - C5242 * C271 + C5249 * C264 - C5243 * C276 +
            C5250 * C985 - C32126 * C994) *
               C32115) *
              C31854 * C31813 * C236 +
          ((C5242 * C259 - C5248 * C244 + C5243 * C980 - C5249 * C974 +
            C32126 * C986 - C5250 * C977) *
               C5251 +
           (C5242 * C274 - C5248 * C260 + C5243 * C992 - C5249 * C981 +
            C32126 * C995 - C5250 * C987) *
               C32158 +
           (C5242 * C261 - C5248 * C245 + C5243 * C982 - C5249 * C975 +
            C32126 * C988 - C5250 * C978) *
               C5252 +
           (C5242 * C275 - C5248 * C262 + C5243 * C993 - C5249 * C983 +
            C32126 * C996 - C5250 * C989) *
               C32145 +
           (C5242 * C263 - C5248 * C246 + C5243 * C984 - C5249 * C976 +
            C32126 * C990 - C5250 * C979) *
               C5253 +
           (C5242 * C276 - C5248 * C264 + C5243 * C994 - C5249 * C985 +
            C32126 * C997 - C5250 * C991) *
               C32115) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
            C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
            C6072 * C986 - C6078 * C977) *
               C6079 +
           (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
            C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
            C6072 * C995 - C6078 * C987) *
               C31752) *
              C31854 * C31813 * C31799 * C110 +
          ((C6074 * C120 - C6068 * C128 + C6075 * C240 - C6069 * C251 +
            C6076 * C245 - C6070 * C261 + C6077 * C975 - C6071 * C982 +
            C6078 * C978 - C6072 * C988) *
               C6079 +
           (C6074 * C129 - C6068 * C141 + C6075 * C252 - C6069 * C270 +
            C6076 * C262 - C6070 * C275 + C6077 * C983 - C6071 * C993 +
            C6078 * C989 - C6072 * C996) *
               C31752) *
              C31854 * C31813 * C31799 * C111 +
          ((C6068 * C130 - C6074 * C121 + C6069 * C253 - C6075 * C241 +
            C6070 * C263 - C6076 * C246 + C6071 * C984 - C6077 * C976 +
            C6072 * C990 - C6078 * C979) *
               C6079 +
           (C6068 * C142 - C6074 * C131 + C6069 * C271 - C6075 * C254 +
            C6070 * C276 - C6076 * C264 + C6071 * C994 - C6077 * C985 +
            C6072 * C997 - C6078 * C991) *
               C31752) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
            C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
            C6072 * C986 - C6078 * C977) *
               C6079 +
           (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
            C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
            C6072 * C995 - C6078 * C987) *
               C31752) *
              C31854 * C31813 * C235 +
          ((C6074 * C239 - C6068 * C249 + C6075 * C244 - C6069 * C259 +
            C6076 * C974 - C6070 * C980 + C6077 * C977 - C6071 * C986 +
            C6078 * C6142 - C6072 * C6144) *
               C6079 +
           (C6074 * C250 - C6068 * C269 + C6075 * C260 - C6069 * C274 +
            C6076 * C981 - C6070 * C992 + C6077 * C987 - C6071 * C995 +
            C6078 * C6145 - C6072 * C6148) *
               C31752) *
              C31854 * C31813 * C236 +
          ((C6068 * C259 - C6074 * C244 + C6069 * C980 - C6075 * C974 +
            C6070 * C986 - C6076 * C977 + C6071 * C6144 - C6077 * C6142 +
            C6072 * C6146 - C6078 * C6143) *
               C6079 +
           (C6068 * C274 - C6074 * C260 + C6069 * C992 - C6075 * C981 +
            C6070 * C995 - C6076 * C987 + C6071 * C6148 - C6077 * C6145 +
            C6072 * C6149 - C6078 * C6147) *
               C31752) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C6079 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C31752) *
               C32162 +
           ((C5242 * C354 - C5248 * C344 + C5243 * C681 - C5249 * C676 +
             C32126 * C1117 - C5250 * C1108) *
                C6079 +
            (C5242 * C374 - C5248 * C355 + C5243 * C691 - C5249 * C682 +
             C32126 * C1135 - C5250 * C1118) *
                C31752) *
               C32151 +
           ((C5242 * C364 - C5248 * C349 + C5243 * C1123 - C5249 * C1111 +
             C32126 * C1124 - C5250 * C1112) *
                C6079 +
            (C5242 * C379 - C5248 * C365 + C5243 * C1138 - C5249 * C1125 +
             C32126 * C1139 - C5250 * C1126) *
                C31752) *
               C32129) *
              C31813 * C31799 * C110 +
          (((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C6079 +
            (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C31752) *
               C32162 +
           ((C5837 - C5838 + C5839 - C5840 + C5841 - C5842) * C6079 +
            (C5843 - C5844 + C5845 - C5846 + C5847 - C5848) * C31752) *
               C32151 +
           ((C5248 * C350 - C5242 * C366 + C5249 * C1113 - C5243 * C1127 +
             C5250 * C1114 - C32126 * C1128) *
                C6079 +
            (C5248 * C367 - C5242 * C380 + C5249 * C1129 - C5243 * C1140 +
             C5250 * C1130 - C32126 * C1141) *
                C31752) *
               C32129) *
              C31813 * C31799 * C111 +
          ((C5299 * C6079 + C5300 * C31752) * C32162 +
           ((C5850 - C5849 + C5852 - C5851 + C5854 - C5853) * C6079 +
            (C5856 - C5855 + C5858 - C5857 + C5860 - C5859) * C31752) *
               C32151 +
           ((C5242 * C368 - C5248 * C351 + C5243 * C1131 - C5249 * C1115 +
             C32126 * C1132 - C5250 * C1116) *
                C6079 +
            (C5242 * C381 - C5248 * C369 + C5243 * C1142 - C5249 * C1133 +
             C32126 * C1143 - C5250 * C1134) *
                C31752) *
               C32129) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C6079 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C31752) *
               C32162 +
           ((C5242 * C354 - C5248 * C344 + C5243 * C681 - C5249 * C676 +
             C32126 * C1117 - C5250 * C1108) *
                C6079 +
            (C5242 * C374 - C5248 * C355 + C5243 * C691 - C5249 * C682 +
             C32126 * C1135 - C5250 * C1118) *
                C31752) *
               C32151 +
           ((C5242 * C364 - C5248 * C349 + C5243 * C1123 - C5249 * C1111 +
             C32126 * C1124 - C5250 * C1112) *
                C6079 +
            (C5242 * C379 - C5248 * C365 + C5243 * C1138 - C5249 * C1125 +
             C32126 * C1139 - C5250 * C1126) *
                C31752) *
               C32129) *
              C31813 * C235 +
          (((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
             C5250 * C974 - C32126 * C980) *
                C6079 +
            (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
             C5250 * C981 - C32126 * C992) *
                C31752) *
               C32162 +
           ((C5248 * C676 - C5242 * C681 + C5249 * C1108 - C5243 * C1117 +
             C5250 * C1638 - C32126 * C1641) *
                C6079 +
            (C5248 * C682 - C5242 * C691 + C5249 * C1118 - C5243 * C1135 +
             C5250 * C1642 - C32126 * C1647) *
                C31752) *
               C32151 +
           ((C5248 * C1111 - C5242 * C1123 + C5249 * C1112 - C5243 * C1124 +
             C5250 * C6213 - C32126 * C6217) *
                C6079 +
            (C5248 * C1125 - C5242 * C1138 + C5249 * C1126 - C5243 * C1139 +
             C5250 * C6219 - C32126 * C6222) *
                C31752) *
               C32129) *
              C31813 * C236 +
          (((C5242 * C259 - C5248 * C244 + C5243 * C980 - C5249 * C974 +
             C32126 * C986 - C5250 * C977) *
                C6079 +
            (C5242 * C274 - C5248 * C260 + C5243 * C992 - C5249 * C981 +
             C32126 * C995 - C5250 * C987) *
                C31752) *
               C32162 +
           ((C5242 * C1117 - C5248 * C1108 + C5243 * C1641 - C5249 * C1638 +
             C32126 * C6215 - C5250 * C6212) *
                C6079 +
            (C5242 * C1135 - C5248 * C1118 + C5243 * C1647 - C5249 * C1642 +
             C32126 * C6221 - C5250 * C6216) *
                C31752) *
               C32151 +
           ((C5242 * C1124 - C5248 * C1112 + C5243 * C6217 - C5249 * C6213 +
             C32126 * C6218 - C5250 * C6214) *
                C6079 +
            (C5242 * C1139 - C5248 * C1126 + C5243 * C6222 - C5249 * C6219 +
             C32126 * C6223 - C5250 * C6220) *
                C31752) *
               C32129) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C5251 +
            (C31836 * C140 - C113 * C127) * C32158 + (C148 - C149) * C5252 +
            (C150 - C151) * C32145 + C168 * C5253 + C169 * C32115) *
               C10013 +
           ((C2024 - C2025) * C5251 + (C2026 - C2027) * C32158 + C2375 * C5252 +
            C2376 * C32145 + C1764 * C5253 + C1765 * C32115) *
               C10014 +
           (C2048 * C5251 + C2049 * C32158 + C2032 * C5252 + C2033 * C32145 +
            C1778 * C5253 + C1779 * C32115) *
               C32129) *
              C31813 * C31799 * C110 +
          (((C149 - C148) * C5251 + (C151 - C150) * C32158 +
            (C153 - C152) * C5252 + (C155 - C154) * C32145 +
            (C157 - C156) * C5253 + (C159 - C158) * C32115) *
               C10013 +
           (C2377 * C5251 + C2378 * C32158 + C2379 * C5252 + C2380 * C32145 +
            C3901 * C5253 + C3902 * C32115) *
               C10014 +
           (C2381 * C5251 + C2382 * C32158 + C2383 * C5252 + C2384 * C32145 +
            (C1774 - C1775) * C5253 + (C1776 - C1777) * C32115) *
               C32129) *
              C31813 * C31799 * C111 +
          ((C168 * C5251 + C169 * C32158 + C170 * C5252 + C171 * C32145 +
            C172 * C5253 + C173 * C32115) *
               C10013 +
           (C1764 * C5251 + C1765 * C32158 + C3439 * C5252 + C3440 * C32145 +
            (C592 - C591) * C5253 + (C594 - C593) * C32115) *
               C10014 +
           (C1778 * C5251 + C1779 * C32158 + (C1775 - C1774) * C5252 +
            (C1777 - C1776) * C32145 + (C31836 * C372 - C113 * C353) * C5253 +
            (C31836 * C383 - C113 * C373) * C32115) *
               C32129) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C5251 +
            (C31836 * C140 - C113 * C127) * C32158 + (C148 - C149) * C5252 +
            (C150 - C151) * C32145 + C168 * C5253 + C169 * C32115) *
               C10013 +
           ((C2024 - C2025) * C5251 + (C2026 - C2027) * C32158 + C2375 * C5252 +
            C2376 * C32145 + C1764 * C5253 + C1765 * C32115) *
               C10014 +
           (C2048 * C5251 + C2049 * C32158 + C2032 * C5252 + C2033 * C32145 +
            C1778 * C5253 + C1779 * C32115) *
               C32129) *
              C31813 * C235 +
          (((C113 * C239 - C31836 * C249) * C5251 +
            (C113 * C250 - C31836 * C269) * C32158 + (C475 - C476) * C5252 +
            (C477 - C478) * C32145 + (C479 - C480) * C5253 +
            (C481 - C482) * C32115) *
               C10013 +
           ((C2543 - C2544) * C5251 + (C2545 - C2546) * C32158 +
            (C2209 - C2210) * C5252 + (C2211 - C2212) * C32145 +
            (C2213 - C2214) * C5253 + (C2215 - C2216) * C32115) *
               C10014 +
           ((C2547 - C2548) * C5251 + (C2549 - C2550) * C32158 +
            (C2217 - C2218) * C5252 + (C2219 - C2220) * C32145 +
            (C2221 - C2222) * C5253 + (C2223 - C2224) * C32115) *
               C32129) *
              C31813 * C236 +
          (((C31836 * C259 - C113 * C244) * C5251 +
            (C31836 * C274 - C113 * C260) * C32158 +
            (C31836 * C261 - C113 * C245) * C5252 +
            (C31836 * C275 - C113 * C262) * C32145 +
            (C31836 * C263 - C113 * C246) * C5253 +
            (C31836 * C276 - C113 * C264) * C32115) *
               C10013 +
           ((C31836 * C1117 - C113 * C1108) * C5251 +
            (C31836 * C1135 - C113 * C1118) * C32158 +
            (C31836 * C1119 - C113 * C1109) * C5252 +
            (C31836 * C1136 - C113 * C1120) * C32145 +
            (C31836 * C1121 - C113 * C1110) * C5253 +
            (C31836 * C1137 - C113 * C1122) * C32115) *
               C10014 +
           ((C31836 * C1124 - C113 * C1112) * C5251 +
            (C31836 * C1139 - C113 * C1126) * C32158 +
            (C31836 * C1128 - C113 * C1114) * C5252 +
            (C31836 * C1141 - C113 * C1130) * C32145 +
            (C31836 * C1132 - C113 * C1116) * C5253 +
            (C31836 * C1143 - C113 * C1134) * C32115) *
               C32129) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C6079 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C31752) *
               C10013 +
           ((C32161 * C354 - C812 * C344 + C32149 * C681 - C813 * C676 +
             C32126 * C1117 - C814 * C1108) *
                C6079 +
            (C32161 * C374 - C812 * C355 + C32149 * C691 - C813 * C682 +
             C32126 * C1135 - C814 * C1118) *
                C31752) *
               C10014 +
           ((C32161 * C364 - C812 * C349 + C32149 * C1123 - C813 * C1111 +
             C32126 * C1124 - C814 * C1112) *
                C6079 +
            (C32161 * C379 - C812 * C365 + C32149 * C1138 - C813 * C1125 +
             C32126 * C1139 - C814 * C1126) *
                C31752) *
               C32129) *
              C31813 * C31799 * C110 +
          (((C820 - C819 + C822 - C821 + C824 - C823) * C6079 +
            (C826 - C825 + C828 - C827 + C830 - C829) * C31752) *
               C10013 +
           ((C1469 - C1470 + C1471 - C1472 + C1473 - C1474) * C6079 +
            (C1475 - C1476 + C1477 - C1478 + C1479 - C1480) * C31752) *
               C10014 +
           ((C812 * C350 - C32161 * C366 + C813 * C1113 - C32149 * C1127 +
             C814 * C1114 - C32126 * C1128) *
                C6079 +
            (C812 * C367 - C32161 * C380 + C813 * C1129 - C32149 * C1140 +
             C814 * C1130 - C32126 * C1141) *
                C31752) *
               C32129) *
              C31813 * C31799 * C111 +
          ((C863 * C6079 + C864 * C31752) * C10013 +
           ((C1482 - C1481 + C1484 - C1483 + C1486 - C1485) * C6079 +
            (C1488 - C1487 + C1490 - C1489 + C1492 - C1491) * C31752) *
               C10014 +
           ((C32161 * C368 - C812 * C351 + C32149 * C1131 - C813 * C1115 +
             C32126 * C1132 - C814 * C1116) *
                C6079 +
            (C32161 * C381 - C812 * C369 + C32149 * C1142 - C813 * C1133 +
             C32126 * C1143 - C814 * C1134) *
                C31752) *
               C32129) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C6079 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C31752) *
               C10013 +
           ((C32161 * C354 - C812 * C344 + C32149 * C681 - C813 * C676 +
             C32126 * C1117 - C814 * C1108) *
                C6079 +
            (C32161 * C374 - C812 * C355 + C32149 * C691 - C813 * C682 +
             C32126 * C1135 - C814 * C1118) *
                C31752) *
               C10014 +
           ((C32161 * C364 - C812 * C349 + C32149 * C1123 - C813 * C1111 +
             C32126 * C1124 - C814 * C1112) *
                C6079 +
            (C32161 * C379 - C812 * C365 + C32149 * C1138 - C813 * C1125 +
             C32126 * C1139 - C814 * C1126) *
                C31752) *
               C32129) *
              C31813 * C235 +
          (((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
             C814 * C974 - C32126 * C980) *
                C6079 +
            (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
             C814 * C981 - C32126 * C992) *
                C31752) *
               C10013 +
           ((C812 * C676 - C32161 * C681 + C813 * C1108 - C32149 * C1117 +
             C814 * C1638 - C32126 * C1641) *
                C6079 +
            (C812 * C682 - C32161 * C691 + C813 * C1118 - C32149 * C1135 +
             C814 * C1642 - C32126 * C1647) *
                C31752) *
               C10014 +
           ((C812 * C1111 - C32161 * C1123 + C813 * C1112 - C32149 * C1124 +
             C814 * C6213 - C32126 * C6217) *
                C6079 +
            (C812 * C1125 - C32161 * C1138 + C813 * C1126 - C32149 * C1139 +
             C814 * C6219 - C32126 * C6222) *
                C31752) *
               C32129) *
              C31813 * C236 +
          (((C32161 * C259 - C812 * C244 + C32149 * C980 - C813 * C974 +
             C32126 * C986 - C814 * C977) *
                C6079 +
            (C32161 * C274 - C812 * C260 + C32149 * C992 - C813 * C981 +
             C32126 * C995 - C814 * C987) *
                C31752) *
               C10013 +
           ((C32161 * C1117 - C812 * C1108 + C32149 * C1641 - C813 * C1638 +
             C32126 * C6215 - C814 * C6212) *
                C6079 +
            (C32161 * C1135 - C812 * C1118 + C32149 * C1647 - C813 * C1642 +
             C32126 * C6221 - C814 * C6216) *
                C31752) *
               C10014 +
           ((C32161 * C1124 - C812 * C1112 + C32149 * C6217 - C813 * C6213 +
             C32126 * C6218 - C814 * C6214) *
                C6079 +
            (C32161 * C1139 - C812 * C1126 + C32149 * C6222 - C813 * C6219 +
             C32126 * C6223 - C814 * C6220) *
                C31752) *
               C32129) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C6079 +
            (C31836 * C140 - C113 * C127) * C31752) *
               C11600 +
           ((C2024 - C2025) * C6079 + (C2026 - C2027) * C31752) * C11601 +
           (C2048 * C6079 + C2049 * C31752) * C11602 +
           ((C2037 - C2036) * C6079 + (C2039 - C2038) * C31752) * C11603 +
           ((C31836 * C2011 - C113 * C2002) * C6079 +
            (C31836 * C2020 - C113 * C2012) * C31752) *
               C11604) *
              C31813 * C31799 * C110 +
          (((C149 - C148) * C6079 + (C151 - C150) * C31752) * C11600 +
           (C2377 * C6079 + C2378 * C31752) * C11601 +
           (C2381 * C6079 + C2382 * C31752) * C11602 +
           ((C2040 - C2041) * C6079 + (C2042 - C2043) * C31752) * C11603 +
           ((C113 * C2003 - C31836 * C2013) * C6079 +
            (C113 * C2014 - C31836 * C2021) * C31752) *
               C11604) *
              C31813 * C31799 * C111 +
          ((C168 * C6079 + C169 * C31752) * C11600 +
           (C1764 * C6079 + C1765 * C31752) * C11601 +
           (C1778 * C6079 + C1779 * C31752) * C11602 +
           ((C2045 - C2044) * C6079 + (C2047 - C2046) * C31752) * C11603 +
           ((C31836 * C2015 - C113 * C2004) * C6079 +
            (C31836 * C2022 - C113 * C2016) * C31752) *
               C11604) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C6079 +
            (C31836 * C140 - C113 * C127) * C31752) *
               C11600 +
           ((C2024 - C2025) * C6079 + (C2026 - C2027) * C31752) * C11601 +
           (C2048 * C6079 + C2049 * C31752) * C11602 +
           ((C2037 - C2036) * C6079 + (C2039 - C2038) * C31752) * C11603 +
           ((C31836 * C2011 - C113 * C2002) * C6079 +
            (C31836 * C2020 - C113 * C2012) * C31752) *
               C11604) *
              C31813 * C235 +
          (((C113 * C239 - C31836 * C249) * C6079 +
            (C113 * C250 - C31836 * C269) * C31752) *
               C11600 +
           ((C2543 - C2544) * C6079 + (C2545 - C2546) * C31752) * C11601 +
           ((C2547 - C2548) * C6079 + (C2549 - C2550) * C31752) * C11602 +
           ((C113 * C2530 - C31836 * C2533) * C6079 +
            (C113 * C2534 - C31836 * C2539) * C31752) *
               C11603 +
           ((C113 * C6813 - C31836 * C6817) * C6079 +
            (C113 * C6819 - C31836 * C6822) * C31752) *
               C11604) *
              C31813 * C236 +
          (((C31836 * C259 - C113 * C244) * C6079 +
            (C31836 * C274 - C113 * C260) * C31752) *
               C11600 +
           ((C31836 * C1117 - C113 * C1108) * C6079 +
            (C31836 * C1135 - C113 * C1118) * C31752) *
               C11601 +
           ((C31836 * C1124 - C113 * C1112) * C6079 +
            (C31836 * C1139 - C113 * C1126) * C31752) *
               C11602 +
           ((C31836 * C6815 - C113 * C6812) * C6079 +
            (C31836 * C6821 - C113 * C6816) * C31752) *
               C11603 +
           ((C31836 * C6818 - C113 * C6814) * C6079 +
            (C31836 * C6823 - C113 * C6820) * C31752) *
               C11604) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
              C32126 * C259 - C5250 * C244) *
                 C30875 +
             (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
              C32126 * C274 - C5250 * C260) *
                 C32076 +
             (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C30856 +
             (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C31762) *
                C32096 +
            ((C6825 - C6826 + C6827 - C6828 + C6829 - C6830) * C30875 +
             (C6831 - C6832 + C6833 - C6834 + C6835 - C6836) * C32076 +
             (C5838 - C5837 + C5840 - C5839 + C5842 - C5841) * C30856 +
             (C5844 - C5843 + C5846 - C5845 + C5848 - C5847) * C31762) *
                C31941) *
               C31813 * C466 +
           (((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
              C5250 * C974 - C32126 * C980) *
                 C30875 +
             (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
              C5250 * C981 - C32126 * C992) *
                 C32076 +
             (C5667 - C5668 + C5669 - C5670 + C5671 - C5672) * C30856 +
             (C5673 - C5674 + C5675 - C5676 + C5677 - C5678) * C31762) *
                C32096 +
            ((C7336 - C7337 + C7338 - C7339 + C7340 - C7341) * C30875 +
             (C7342 - C7343 + C7344 - C7345 + C7346 - C7347) * C32076 +
             (C8752 - C8753 + C8754 - C8755 + C8756 - C8757) * C30856 +
             (C8758 - C8759 + C8760 - C8761 + C8762 - C8763) * C31762) *
                C31941) *
               C31813 * C467) *
              C468 +
          ((((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C30875 +
             (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C32076 +
             (C5268 - C5267 + C5270 - C5269 + C5272 - C5271) * C30856 +
             (C5274 - C5273 + C5276 - C5275 + C5278 - C5277) * C31762) *
                C32096 +
            ((C5837 - C5838 + C5839 - C5840 + C5841 - C5842) * C30875 +
             (C5843 - C5844 + C5845 - C5846 + C5847 - C5848) * C32076 +
             (C5849 - C5850 + C5851 - C5852 + C5853 - C5854) * C30856 +
             (C5855 - C5856 + C5857 - C5858 + C5859 - C5860) * C31762) *
                C31941) *
               C31813 * C466 +
           (((C5668 - C5667 + C5670 - C5669 + C5672 - C5671) * C30875 +
             (C5674 - C5673 + C5676 - C5675 + C5678 - C5677) * C32076 +
             (C5680 - C5679 + C5682 - C5681 + C5684 - C5683) * C30856 +
             (C5686 - C5685 + C5688 - C5687 + C5690 - C5689) * C31762) *
                C32096 +
            ((C8753 - C8752 + C8755 - C8754 + C8757 - C8756) * C30875 +
             (C8759 - C8758 + C8761 - C8760 + C8763 - C8762) * C32076 +
             (C5242 * C685 - C5248 * C678 + C5243 * C1121 - C5249 * C1110 +
              C32126 * C1645 - C5250 * C1640) *
                 C30856 +
             (C5242 * C693 - C5248 * C686 + C5243 * C1137 - C5249 * C1122 +
              C32126 * C1649 - C5250 * C1646) *
                 C31762) *
                C31941) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C2656 +
             (C31836 * C140 - C113 * C127) * C2650 + (C148 - C149) * C2657 +
             (C150 - C151) * C2651 + C168 * C2658 + C169 * C2652 +
             C170 * C2659 + C171 * C32130) *
                C32096 +
            ((C2024 - C2025) * C2656 + (C2026 - C2027) * C2650 + C2375 * C2657 +
             C2376 * C2651 + C1764 * C2658 + C1765 * C2652 + C3439 * C2659 +
             C3440 * C32130) *
                C31941) *
               C31813 * C466 +
           (((C113 * C239 - C31836 * C249) * C2656 +
             (C113 * C250 - C31836 * C269) * C2650 + (C475 - C476) * C2657 +
             (C477 - C478) * C2651 + (C479 - C480) * C2658 +
             (C481 - C482) * C2652 + (C483 - C484) * C2659 +
             (C485 - C486) * C32130) *
                C32096 +
            ((C2543 - C2544) * C2656 + (C2545 - C2546) * C2650 +
             (C2209 - C2210) * C2657 + (C2211 - C2212) * C2651 +
             (C2213 - C2214) * C2658 + (C2215 - C2216) * C2652 +
             (C3767 - C3768) * C2659 + (C3769 - C3770) * C32130) *
                C31941) *
               C31813 * C467) *
              C468 +
          ((((C149 - C148) * C2656 + (C151 - C150) * C2650 +
             (C153 - C152) * C2657 + (C155 - C154) * C2651 +
             (C157 - C156) * C2658 + (C159 - C158) * C2652 +
             (C161 - C160) * C2659 + (C163 - C162) * C32130) *
                C32096 +
            (C2377 * C2656 + C2378 * C2650 + C2379 * C2657 + C2380 * C2651 +
             (C587 - C588) * C2658 + (C589 - C590) * C2652 +
             (C591 - C592) * C2659 + (C593 - C594) * C32130) *
                C31941) *
               C31813 * C466 +
           (((C476 - C475) * C2656 + (C478 - C477) * C2650 +
             (C480 - C479) * C2657 + (C482 - C481) * C2651 +
             (C484 - C483) * C2658 + (C486 - C485) * C2652 +
             (C488 - C487) * C2659 + (C490 - C489) * C32130) *
                C32096 +
            ((C2210 - C2209) * C2656 + (C2212 - C2211) * C2650 +
             (C2214 - C2213) * C2657 + (C2216 - C2215) * C2651 +
             (C3768 - C3767) * C2658 + (C3770 - C3769) * C2652 +
             (C31836 * C689 - C113 * C680) * C2659 +
             (C31836 * C695 - C113 * C690) * C32130) *
                C31941) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C30875 +
             (C31836 * C140 - C113 * C127) * C32076 + (C148 - C149) * C30856 +
             (C150 - C151) * C31762) *
                C13203 +
            ((C2024 - C2025) * C30875 + (C2026 - C2027) * C32076 +
             C2375 * C30856 + C2376 * C31762) *
                C13204 +
            C13418 * C13205 + C13419 * C32142) *
               C31813 * C466 +
           (((C113 * C239 - C31836 * C249) * C30875 +
             (C113 * C250 - C31836 * C269) * C32076 + (C475 - C476) * C30856 +
             (C477 - C478) * C31762) *
                C13203 +
            ((C2543 - C2544) * C30875 + (C2545 - C2546) * C32076 +
             (C2209 - C2210) * C30856 + (C2211 - C2212) * C31762) *
                C13204 +
            ((C2547 - C2548) * C30875 + (C2549 - C2550) * C32076 +
             (C2217 - C2218) * C30856 + (C2219 - C2220) * C31762) *
                C13205 +
            ((C12021 - C12022) * C30875 + (C12023 - C12024) * C32076 +
             (C13550 - C13551) * C30856 + (C13552 - C13553) * C31762) *
                C32142) *
               C31813 * C467) *
              C468 +
          ((((C149 - C148) * C30875 + (C151 - C150) * C32076 +
             (C153 - C152) * C30856 + (C155 - C154) * C31762) *
                C13203 +
            (C2377 * C30875 + C2378 * C32076 + C2379 * C30856 +
             C2380 * C31762) *
                C13204 +
            (C2381 * C30875 + C2382 * C32076 + C2383 * C30856 +
             C2384 * C31762) *
                C13205 +
            ((C2040 - C2041) * C30875 + (C2042 - C2043) * C32076 +
             (C2044 - C2045) * C30856 + (C2046 - C2047) * C31762) *
                C32142) *
               C31813 * C466 +
           (((C476 - C475) * C30875 + (C478 - C477) * C32076 +
             (C480 - C479) * C30856 + (C482 - C481) * C31762) *
                C13203 +
            ((C2210 - C2209) * C30875 + (C2212 - C2211) * C32076 +
             (C2214 - C2213) * C30856 + (C2216 - C2215) * C31762) *
                C13204 +
            ((C2218 - C2217) * C30875 + (C2220 - C2219) * C32076 +
             (C2222 - C2221) * C30856 + (C2224 - C2223) * C31762) *
                C13205 +
            ((C13551 - C13550) * C30875 + (C13553 - C13552) * C32076 +
             (C31836 * C2537 - C113 * C2532) * C30856 +
             (C31836 * C2541 - C113 * C2538) * C31762) *
                C32142) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
              C32126 * C259 - C5250 * C244) *
                 C30875 +
             (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
              C32126 * C274 - C5250 * C260) *
                 C32076 +
             (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C30856 +
             (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C31762) *
                C32096 +
            ((C6825 - C6826 + C6827 - C6828 + C6829 - C6830) * C30875 +
             (C6831 - C6832 + C6833 - C6834 + C6835 - C6836) * C32076 +
             C8974 * C30856 + C8975 * C31762) *
                C31941) *
               C572 +
           (((C6826 - C6825 + C6828 - C6827 + C6830 - C6829) * C30875 +
             (C6832 - C6831 + C6834 - C6833 + C6836 - C6835) * C32076 +
             C8976 * C30856 + C8977 * C31762) *
                C32096 +
            ((C6838 - C6837 + C6840 - C6839 + C6842 - C6841) * C30875 +
             (C6844 - C6843 + C6846 - C6845 + C6848 - C6847) * C32076 +
             (C7174 - C7175 + C7176 - C7177 + C7178 - C7179) * C30856 +
             (C7180 - C7181 + C7182 - C7183 + C7184 - C7185) * C31762) *
                C31941) *
               C573) *
              C466 +
          ((((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
              C5250 * C974 - C32126 * C980) *
                 C30875 +
             (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
              C5250 * C981 - C32126 * C992) *
                 C32076 +
             (C5667 - C5668 + C5669 - C5670 + C5671 - C5672) * C30856 +
             (C5673 - C5674 + C5675 - C5676 + C5677 - C5678) * C31762) *
                C32096 +
            ((C7336 - C7337 + C7338 - C7339 + C7340 - C7341) * C30875 +
             (C7342 - C7343 + C7344 - C7345 + C7346 - C7347) * C32076 +
             (C8752 - C8753 + C8754 - C8755 + C8756 - C8757) * C30856 +
             (C8758 - C8759 + C8760 - C8761 + C8762 - C8763) * C31762) *
                C31941) *
               C572 +
           (((C7337 - C7336 + C7339 - C7338 + C7341 - C7340) * C30875 +
             (C7343 - C7342 + C7345 - C7344 + C7347 - C7346) * C32076 +
             (C8753 - C8752 + C8755 - C8754 + C8757 - C8756) * C30856 +
             (C8759 - C8758 + C8761 - C8760 + C8763 - C8762) * C31762) *
                C32096 +
            ((C7349 - C7348 + C7351 - C7350 + C7353 - C7352) * C30875 +
             (C7355 - C7354 + C7357 - C7356 + C7359 - C7358) * C32076 +
             (C5242 * C1127 - C5248 * C1113 + C5243 * C1128 - C5249 * C1114 +
              C32126 * C7020 - C5250 * C7019) *
                 C30856 +
             (C5242 * C1140 - C5248 * C1129 + C5243 * C1141 - C5249 * C1130 +
              C32126 * C7022 - C5250 * C7021) *
                 C31762) *
                C31941) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C2656 +
             (C31836 * C140 - C113 * C127) * C2650 + (C148 - C149) * C2657 +
             (C150 - C151) * C2651 + C168 * C2658 + C169 * C2652 +
             C170 * C2659 + C171 * C32130) *
                C32096 +
            ((C2024 - C2025) * C2656 + (C2026 - C2027) * C2650 + C2375 * C2657 +
             C2376 * C2651 + C1764 * C2658 + C1765 * C2652 + C3439 * C2659 +
             C3440 * C32130) *
                C31941) *
               C572 +
           (((C2025 - C2024) * C2656 + (C2027 - C2026) * C2650 + C2377 * C2657 +
             C2378 * C2651 + C2379 * C2658 + C2380 * C2652 + C3901 * C2659 +
             C3902 * C32130) *
                C32096 +
            ((C2029 - C2028) * C2656 + (C2031 - C2030) * C2650 + C2381 * C2657 +
             C2382 * C2651 + C2383 * C2658 + C2384 * C2652 +
             (C1774 - C1775) * C2659 + (C1776 - C1777) * C32130) *
                C31941) *
               C573) *
              C466 +
          ((((C113 * C239 - C31836 * C249) * C2656 +
             (C113 * C250 - C31836 * C269) * C2650 + (C475 - C476) * C2657 +
             (C477 - C478) * C2651 + (C479 - C480) * C2658 +
             (C481 - C482) * C2652 + (C483 - C484) * C2659 +
             (C485 - C486) * C32130) *
                C32096 +
            ((C2543 - C2544) * C2656 + (C2545 - C2546) * C2650 +
             (C2209 - C2210) * C2657 + (C2211 - C2212) * C2651 +
             (C2213 - C2214) * C2658 + (C2215 - C2216) * C2652 +
             (C3767 - C3768) * C2659 + (C3769 - C3770) * C32130) *
                C31941) *
               C572 +
           (((C2544 - C2543) * C2656 + (C2546 - C2545) * C2650 +
             (C2210 - C2209) * C2657 + (C2212 - C2211) * C2651 +
             (C2214 - C2213) * C2658 + (C2216 - C2215) * C2652 +
             (C3768 - C3767) * C2659 + (C3770 - C3769) * C32130) *
                C32096 +
            ((C2548 - C2547) * C2656 + (C2550 - C2549) * C2650 +
             (C2218 - C2217) * C2657 + (C2220 - C2219) * C2651 +
             (C2222 - C2221) * C2658 + (C2224 - C2223) * C2652 +
             (C31836 * C2205 - C113 * C2204) * C2659 +
             (C31836 * C2207 - C113 * C2206) * C32130) *
                C31941) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C30875 +
             (C31836 * C140 - C113 * C127) * C32076 + (C148 - C149) * C30856 +
             (C150 - C151) * C31762) *
                C13203 +
            ((C2024 - C2025) * C30875 + (C2026 - C2027) * C32076 +
             C2375 * C30856 + C2376 * C31762) *
                C13204 +
            C13418 * C13205 + C13419 * C32142) *
               C572 +
           (((C2025 - C2024) * C30875 + (C2027 - C2026) * C32076 +
             C2377 * C30856 + C2378 * C31762) *
                C13203 +
            ((C2029 - C2028) * C30875 + (C2031 - C2030) * C32076 +
             C2381 * C30856 + C2382 * C31762) *
                C13204 +
            ((C2036 - C2037) * C30875 + (C2038 - C2039) * C32076 +
             C13684 * C30856 + C13685 * C31762) *
                C13205 +
            ((C11743 - C11742) * C30875 + (C11745 - C11744) * C32076 +
             (C11931 - C11932) * C30856 + (C11933 - C11934) * C31762) *
                C32142) *
               C573) *
              C466 +
          ((((C113 * C239 - C31836 * C249) * C30875 +
             (C113 * C250 - C31836 * C269) * C32076 + (C475 - C476) * C30856 +
             (C477 - C478) * C31762) *
                C13203 +
            ((C2543 - C2544) * C30875 + (C2545 - C2546) * C32076 +
             (C2209 - C2210) * C30856 + (C2211 - C2212) * C31762) *
                C13204 +
            ((C2547 - C2548) * C30875 + (C2549 - C2550) * C32076 +
             (C2217 - C2218) * C30856 + (C2219 - C2220) * C31762) *
                C13205 +
            ((C12021 - C12022) * C30875 + (C12023 - C12024) * C32076 +
             (C13550 - C13551) * C30856 + (C13552 - C13553) * C31762) *
                C32142) *
               C572 +
           (((C2544 - C2543) * C30875 + (C2546 - C2545) * C32076 +
             (C2210 - C2209) * C30856 + (C2212 - C2211) * C31762) *
                C13203 +
            ((C2548 - C2547) * C30875 + (C2550 - C2549) * C32076 +
             (C2218 - C2217) * C30856 + (C2220 - C2219) * C31762) *
                C13204 +
            ((C12022 - C12021) * C30875 + (C12024 - C12023) * C32076 +
             (C13551 - C13550) * C30856 + (C13553 - C13552) * C31762) *
                C13205 +
            ((C12026 - C12025) * C30875 + (C12028 - C12027) * C32076 +
             (C31836 * C11841 - C113 * C11840) * C30856 +
             (C31836 * C11843 - C113 * C11842) * C31762) *
                C32142) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C31836 * C126 - C113 * C119) * C2656 +
                (C31836 * C140 - C113 * C127) * C2650 + (C148 - C149) * C2657 +
                (C150 - C151) * C2651 + C168 * C2658 + C169 * C2652 +
                C170 * C2659 + C171 * C32130) *
                   C32096 +
               ((C2024 - C2025) * C2656 + (C2026 - C2027) * C2650 +
                C2375 * C2657 + C2376 * C2651 + C1764 * C2658 + C1765 * C2652 +
                C3439 * C2659 + C3440 * C32130) *
                   C31941) *
                  C31813 * C31799 * C110 +
              (((C149 - C148) * C2656 + (C151 - C150) * C2650 +
                (C153 - C152) * C2657 + (C155 - C154) * C2651 +
                (C157 - C156) * C2658 + (C159 - C158) * C2652 +
                (C161 - C160) * C2659 + (C163 - C162) * C32130) *
                   C32096 +
               (C2377 * C2656 + C2378 * C2650 + C2379 * C2657 + C2380 * C2651 +
                (C587 - C588) * C2658 + (C589 - C590) * C2652 +
                (C591 - C592) * C2659 + (C593 - C594) * C32130) *
                   C31941) *
                  C31813 * C31799 * C111 +
              ((C168 * C2656 + C169 * C2650 + C170 * C2657 + C171 * C2651 +
                C172 * C2658 + C173 * C2652 + (C165 - C164) * C2659 +
                (C167 - C166) * C32130) *
                   C32096 +
               (C1764 * C2656 + C1765 * C2650 + C3439 * C2657 + C3440 * C2651 +
                (C592 - C591) * C2658 + (C594 - C593) * C2652 +
                (C31836 * C575 - C113 * C574) * C2659 +
                (C31836 * C577 - C113 * C576) * C32130) *
                   C31941) *
                  C31813 * C31799 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C31836 * C126 - C113 * C119) * C2656 +
                (C31836 * C140 - C113 * C127) * C2650 + (C148 - C149) * C2657 +
                (C150 - C151) * C2651 + C168 * C2658 + C169 * C2652 +
                C170 * C2659 + C171 * C32130) *
                   C32096 +
               ((C2024 - C2025) * C2656 + (C2026 - C2027) * C2650 +
                C2375 * C2657 + C2376 * C2651 + C1764 * C2658 + C1765 * C2652 +
                C3439 * C2659 + C3440 * C32130) *
                   C31941) *
                  C31813 * C235 +
              (((C113 * C239 - C31836 * C249) * C2656 +
                (C113 * C250 - C31836 * C269) * C2650 + (C475 - C476) * C2657 +
                (C477 - C478) * C2651 + (C479 - C480) * C2658 +
                (C481 - C482) * C2652 + (C483 - C484) * C2659 +
                (C485 - C486) * C32130) *
                   C32096 +
               ((C2543 - C2544) * C2656 + (C2545 - C2546) * C2650 +
                (C2209 - C2210) * C2657 + (C2211 - C2212) * C2651 +
                (C2213 - C2214) * C2658 + (C2215 - C2216) * C2652 +
                (C113 * C679 - C31836 * C687) * C2659 +
                (C113 * C688 - C31836 * C694) * C32130) *
                   C31941) *
                  C31813 * C236 +
              (((C31836 * C259 - C113 * C244) * C2656 +
                (C31836 * C274 - C113 * C260) * C2650 +
                (C31836 * C261 - C113 * C245) * C2657 +
                (C31836 * C275 - C113 * C262) * C2651 +
                (C31836 * C263 - C113 * C246) * C2658 +
                (C31836 * C276 - C113 * C264) * C2652 +
                (C31836 * C265 - C113 * C247) * C2659 +
                (C31836 * C277 - C113 * C266) * C32130) *
                   C32096 +
               ((C31836 * C1117 - C113 * C1108) * C2656 +
                (C31836 * C1135 - C113 * C1118) * C2650 +
                (C31836 * C1119 - C113 * C1109) * C2657 +
                (C31836 * C1136 - C113 * C1120) * C2651 +
                (C31836 * C1121 - C113 * C1110) * C2658 +
                (C31836 * C1137 - C113 * C1122) * C2652 +
                (C31836 * C1465 - C113 * C1464) * C2659 +
                (C31836 * C1467 - C113 * C1466) * C32130) *
                   C31941) *
                  C31813 * C237) *
             C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C2656 +
            (C31836 * C140 - C113 * C127) * C2650 + (C148 - C149) * C2657 +
            (C150 - C151) * C2651 + C168 * C2658 + C169 * C2652 + C170 * C2659 +
            C171 * C32130) *
               C32096 +
           ((C2024 - C2025) * C2656 + (C2026 - C2027) * C2650 + C2375 * C2657 +
            C2376 * C2651 + C1764 * C2658 + C1765 * C2652 + C3439 * C2659 +
            C3440 * C32130) *
               C31941) *
              C341 +
          (((C2025 - C2024) * C2656 + (C2027 - C2026) * C2650 + C2377 * C2657 +
            C2378 * C2651 + C2379 * C2658 + C2380 * C2652 +
            (C587 - C588) * C2659 + (C589 - C590) * C32130) *
               C32096 +
           ((C2029 - C2028) * C2656 + (C2031 - C2030) * C2650 + C2381 * C2657 +
            C2382 * C2651 + C2383 * C2658 + C2384 * C2652 +
            (C1774 - C1775) * C2659 + (C1776 - C1777) * C32130) *
               C31941) *
              C342 +
          ((C2048 * C2656 + C2049 * C2650 + C2032 * C2657 + C2033 * C2651 +
            C1778 * C2658 + C1779 * C2652 + (C1775 - C1774) * C2659 +
            (C1777 - C1776) * C32130) *
               C32096 +
           ((C2037 - C2036) * C2656 + (C2039 - C2038) * C2650 +
            (C2041 - C2040) * C2657 + (C2043 - C2042) * C2651 +
            (C2045 - C2044) * C2658 + (C2047 - C2046) * C2652 +
            (C31836 * C2371 - C113 * C2370) * C2659 +
            (C31836 * C2373 - C113 * C2372) * C32130) *
               C31941) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C30875 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C32076 +
            (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C30856 +
            (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C31762) *
               C32096 +
           ((C6825 - C6826 + C6827 - C6828 + C6829 - C6830) * C30875 +
            (C6831 - C6832 + C6833 - C6834 + C6835 - C6836) * C32076 +
            (C5838 - C5837 + C5840 - C5839 + C5842 - C5841) * C30856 +
            (C5844 - C5843 + C5846 - C5845 + C5848 - C5847) * C31762) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C30875 +
            (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C32076 +
            (C5268 - C5267 + C5270 - C5269 + C5272 - C5271) * C30856 +
            (C5274 - C5273 + C5276 - C5275 + C5278 - C5277) * C31762) *
               C32096 +
           ((C5837 - C5838 + C5839 - C5840 + C5841 - C5842) * C30875 +
            (C5843 - C5844 + C5845 - C5846 + C5847 - C5848) * C32076 +
            (C5849 - C5850 + C5851 - C5852 + C5853 - C5854) * C30856 +
            (C5855 - C5856 + C5857 - C5858 + C5859 - C5860) * C31762) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C5299 * C30875 + C5300 * C32076 +
            (C5280 - C5279 + C5282 - C5281 + C5284 - C5283) * C30856 +
            (C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C31762) *
               C32096 +
           ((C5850 - C5849 + C5852 - C5851 + C5854 - C5853) * C30875 +
            (C5856 - C5855 + C5858 - C5857 + C5860 - C5859) * C32076 +
            (C5242 * C360 - C5248 * C347 + C5243 * C687 - C5249 * C679 +
             C32126 * C1465 - C5250 * C1464) *
                C30856 +
            (C5242 * C377 - C5248 * C361 + C5243 * C694 - C5249 * C688 +
             C32126 * C1467 - C5250 * C1466) *
                C31762) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C30875 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C32076 +
            (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C30856 +
            (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C31762) *
               C32096 +
           ((C6825 - C6826 + C6827 - C6828 + C6829 - C6830) * C30875 +
            (C6831 - C6832 + C6833 - C6834 + C6835 - C6836) * C32076 +
            (C5838 - C5837 + C5840 - C5839 + C5842 - C5841) * C30856 +
            (C5844 - C5843 + C5846 - C5845 + C5848 - C5847) * C31762) *
               C31941) *
              C31813 * C235 +
          (((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
             C5250 * C974 - C32126 * C980) *
                C30875 +
            (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
             C5250 * C981 - C32126 * C992) *
                C32076 +
            (C5667 - C5668 + C5669 - C5670 + C5671 - C5672) * C30856 +
            (C5673 - C5674 + C5675 - C5676 + C5677 - C5678) * C31762) *
               C32096 +
           ((C7336 - C7337 + C7338 - C7339 + C7340 - C7341) * C30875 +
            (C7342 - C7343 + C7344 - C7345 + C7346 - C7347) * C32076 +
            (C5248 * C677 - C5242 * C683 + C5249 * C1109 - C5243 * C1119 +
             C5250 * C1639 - C32126 * C1643) *
                C30856 +
            (C5248 * C684 - C5242 * C692 + C5249 * C1120 - C5243 * C1136 +
             C5250 * C1644 - C32126 * C1648) *
                C31762) *
               C31941) *
              C31813 * C236 +
          (((C5242 * C259 - C5248 * C244 + C5243 * C980 - C5249 * C974 +
             C32126 * C986 - C5250 * C977) *
                C30875 +
            (C5242 * C274 - C5248 * C260 + C5243 * C992 - C5249 * C981 +
             C32126 * C995 - C5250 * C987) *
                C32076 +
            (C5242 * C261 - C5248 * C245 + C5243 * C982 - C5249 * C975 +
             C32126 * C988 - C5250 * C978) *
                C30856 +
            (C5242 * C275 - C5248 * C262 + C5243 * C993 - C5249 * C983 +
             C32126 * C996 - C5250 * C989) *
                C31762) *
               C32096 +
           ((C5242 * C1117 - C5248 * C1108 + C5243 * C1641 - C5249 * C1638 +
             C32126 * C6215 - C5250 * C6212) *
                C30875 +
            (C5242 * C1135 - C5248 * C1118 + C5243 * C1647 - C5249 * C1642 +
             C32126 * C6221 - C5250 * C6216) *
                C32076 +
            (C5242 * C1119 - C5248 * C1109 + C5243 * C1643 - C5249 * C1639 +
             C32126 * C6393 - C5250 * C6392) *
                C30856 +
            (C5242 * C1136 - C5248 * C1120 + C5243 * C1648 - C5249 * C1644 +
             C32126 * C6395 - C5250 * C6394) *
                C31762) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C30875 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C32076 +
            (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C30856 +
            (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C31762) *
               C32096 +
           ((C6825 - C6826 + C6827 - C6828 + C6829 - C6830) * C30875 +
            (C6831 - C6832 + C6833 - C6834 + C6835 - C6836) * C32076 +
            (C5838 - C5837 + C5840 - C5839 + C5842 - C5841) * C30856 +
            (C5844 - C5843 + C5846 - C5845 + C5848 - C5847) * C31762) *
               C31941) *
              C341 +
          (((C6826 - C6825 + C6828 - C6827 + C6830 - C6829) * C30875 +
            (C6832 - C6831 + C6834 - C6833 + C6836 - C6835) * C32076 +
            (C5837 - C5838 + C5839 - C5840 + C5841 - C5842) * C30856 +
            (C5843 - C5844 + C5845 - C5846 + C5847 - C5848) * C31762) *
               C32096 +
           ((C6838 - C6837 + C6840 - C6839 + C6842 - C6841) * C30875 +
            (C6844 - C6843 + C6846 - C6845 + C6848 - C6847) * C32076 +
            (C7174 - C7175 + C7176 - C7177 + C7178 - C7179) * C30856 +
            (C7180 - C7181 + C7182 - C7183 + C7184 - C7185) * C31762) *
               C31941) *
              C342 +
          ((C6869 * C30875 + C6870 * C32076 +
            (C7175 - C7174 + C7177 - C7176 + C7179 - C7178) * C30856 +
            (C7181 - C7180 + C7183 - C7182 + C7185 - C7184) * C31762) *
               C32096 +
           ((C6850 - C6849 + C6852 - C6851 + C6854 - C6853) * C30875 +
            (C6856 - C6855 + C6858 - C6857 + C6860 - C6859) * C32076 +
            (C5242 * C2007 - C5248 * C2000 + C5243 * C2535 - C5249 * C2531 +
             C32126 * C7170 - C5250 * C7169) *
                C30856 +
            (C5242 * C2018 - C5248 * C2008 + C5243 * C2540 - C5249 * C2536 +
             C32126 * C7172 - C5250 * C7171) *
                C31762) *
               C31941) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C30875 +
            (C31836 * C140 - C113 * C127) * C32076 + (C148 - C149) * C30856 +
            (C150 - C151) * C31762) *
               C13203 +
           ((C2024 - C2025) * C30875 + (C2026 - C2027) * C32076 +
            C2375 * C30856 + C2376 * C31762) *
               C13204 +
           (C2048 * C30875 + C2049 * C32076 + C2032 * C30856 + C2033 * C31762) *
               C13205 +
           (C11740 * C30875 + C11741 * C32076 + (C2041 - C2040) * C30856 +
            (C2043 - C2042) * C31762) *
               C32142) *
              C31813 * C31799 * C110 +
          (((C149 - C148) * C30875 + (C151 - C150) * C32076 +
            (C153 - C152) * C30856 + (C155 - C154) * C31762) *
               C13203 +
           (C2377 * C30875 + C2378 * C32076 + C2379 * C30856 + C2380 * C31762) *
               C13204 +
           (C2381 * C30875 + C2382 * C32076 + C2383 * C30856 + C2384 * C31762) *
               C13205 +
           ((C2040 - C2041) * C30875 + (C2042 - C2043) * C32076 +
            (C2044 - C2045) * C30856 + (C2046 - C2047) * C31762) *
               C32142) *
              C31813 * C31799 * C111 +
          ((C168 * C30875 + C169 * C32076 + C170 * C30856 + C171 * C31762) *
               C13203 +
           (C1764 * C30875 + C1765 * C32076 + C3439 * C30856 + C3440 * C31762) *
               C13204 +
           (C1778 * C30875 + C1779 * C32076 + (C1775 - C1774) * C30856 +
            (C1777 - C1776) * C31762) *
               C13205 +
           ((C2045 - C2044) * C30875 + (C2047 - C2046) * C32076 +
            (C31836 * C2371 - C113 * C2370) * C30856 +
            (C31836 * C2373 - C113 * C2372) * C31762) *
               C32142) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C30875 +
            (C31836 * C140 - C113 * C127) * C32076 + (C148 - C149) * C30856 +
            (C150 - C151) * C31762) *
               C13203 +
           ((C2024 - C2025) * C30875 + (C2026 - C2027) * C32076 +
            C2375 * C30856 + C2376 * C31762) *
               C13204 +
           (C2048 * C30875 + C2049 * C32076 + C2032 * C30856 + C2033 * C31762) *
               C13205 +
           (C11740 * C30875 + C11741 * C32076 + (C2041 - C2040) * C30856 +
            (C2043 - C2042) * C31762) *
               C32142) *
              C31813 * C235 +
          (((C113 * C239 - C31836 * C249) * C30875 +
            (C113 * C250 - C31836 * C269) * C32076 + (C475 - C476) * C30856 +
            (C477 - C478) * C31762) *
               C13203 +
           ((C2543 - C2544) * C30875 + (C2545 - C2546) * C32076 +
            (C2209 - C2210) * C30856 + (C2211 - C2212) * C31762) *
               C13204 +
           ((C2547 - C2548) * C30875 + (C2549 - C2550) * C32076 +
            (C2217 - C2218) * C30856 + (C2219 - C2220) * C31762) *
               C13205 +
           ((C12021 - C12022) * C30875 + (C12023 - C12024) * C32076 +
            (C113 * C2531 - C31836 * C2535) * C30856 +
            (C113 * C2536 - C31836 * C2540) * C31762) *
               C32142) *
              C31813 * C236 +
          (((C31836 * C259 - C113 * C244) * C30875 +
            (C31836 * C274 - C113 * C260) * C32076 +
            (C31836 * C261 - C113 * C245) * C30856 +
            (C31836 * C275 - C113 * C262) * C31762) *
               C13203 +
           ((C31836 * C1117 - C113 * C1108) * C30875 +
            (C31836 * C1135 - C113 * C1118) * C32076 +
            (C31836 * C1119 - C113 * C1109) * C30856 +
            (C31836 * C1136 - C113 * C1120) * C31762) *
               C13204 +
           ((C31836 * C1124 - C113 * C1112) * C30875 +
            (C31836 * C1139 - C113 * C1126) * C32076 +
            (C31836 * C1128 - C113 * C1114) * C30856 +
            (C31836 * C1141 - C113 * C1130) * C31762) *
               C13205 +
           ((C31836 * C6815 - C113 * C6812) * C30875 +
            (C31836 * C6821 - C113 * C6816) * C32076 +
            (C31836 * C7170 - C113 * C7169) * C30856 +
            (C31836 * C7172 - C113 * C7171) * C31762) *
               C32142) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C30875 +
            (C31836 * C140 - C113 * C127) * C32076 + (C148 - C149) * C30856 +
            (C150 - C151) * C31762) *
               C13203 +
           ((C2024 - C2025) * C30875 + (C2026 - C2027) * C32076 +
            C2375 * C30856 + C2376 * C31762) *
               C13204 +
           C13418 * C13205 + C13419 * C32142) *
              C341 +
          (((C2025 - C2024) * C30875 + (C2027 - C2026) * C32076 +
            C2377 * C30856 + C2378 * C31762) *
               C13203 +
           ((C2029 - C2028) * C30875 + (C2031 - C2030) * C32076 +
            C2381 * C30856 + C2382 * C31762) *
               C13204 +
           ((C2036 - C2037) * C30875 + (C2038 - C2039) * C32076 +
            (C2040 - C2041) * C30856 + (C2042 - C2043) * C31762) *
               C13205 +
           ((C11743 - C11742) * C30875 + (C11745 - C11744) * C32076 +
            (C11931 - C11932) * C30856 + (C11933 - C11934) * C31762) *
               C32142) *
              C342 +
          (C13418 * C13203 + C13419 * C13204 +
           (C11753 * C30875 + C11754 * C32076 + (C11932 - C11931) * C30856 +
            (C11934 - C11933) * C31762) *
               C13205 +
           ((C11747 - C11746) * C30875 + (C11749 - C11748) * C32076 +
            (C31836 * C11927 - C113 * C11926) * C30856 +
            (C31836 * C11929 - C113 * C11928) * C31762) *
               C32142) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
              C32126 * C259 - C5250 * C244) *
                 C30875 +
             (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
              C32126 * C274 - C5250 * C260) *
                 C32076 +
             (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C30856 +
             (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C31762) *
                C32096 +
            ((C6825 - C6826 + C6827 - C6828 + C6829 - C6830) * C30875 +
             (C6831 - C6832 + C6833 - C6834 + C6835 - C6836) * C32076 +
             C8974 * C30856 + C8975 * C31762) *
                C31941) *
               C572 +
           (((C6826 - C6825 + C6828 - C6827 + C6830 - C6829) * C30875 +
             (C6832 - C6831 + C6834 - C6833 + C6836 - C6835) * C32076 +
             C8976 * C30856 + C8977 * C31762) *
                C32096 +
            ((C6838 - C6837 + C6840 - C6839 + C6842 - C6841) * C30875 +
             (C6844 - C6843 + C6846 - C6845 + C6848 - C6847) * C32076 +
             (C7174 - C7175 + C7176 - C7177 + C7178 - C7179) * C30856 +
             (C7180 - C7181 + C7182 - C7183 + C7184 - C7185) * C31762) *
                C31941) *
               C573) *
              C31799 * C468 +
          ((((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C30875 +
             (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C32076 +
             (C5268 - C5267 + C5270 - C5269 + C5272 - C5271) * C30856 +
             (C5274 - C5273 + C5276 - C5275 + C5278 - C5277) * C31762) *
                C32096 +
            (C8976 * C30875 + C8977 * C32076 +
             (C5849 - C5850 + C5851 - C5852 + C5853 - C5854) * C30856 +
             (C5855 - C5856 + C5857 - C5858 + C5859 - C5860) * C31762) *
                C31941) *
               C572 +
           ((C8974 * C30875 + C8975 * C32076 +
             (C5850 - C5849 + C5852 - C5851 + C5854 - C5853) * C30856 +
             (C5856 - C5855 + C5858 - C5857 + C5860 - C5859) * C31762) *
                C32096 +
            ((C7175 - C7174 + C7177 - C7176 + C7179 - C7178) * C30875 +
             (C7181 - C7180 + C7183 - C7182 + C7185 - C7184) * C32076 +
             (C5242 * C368 - C5248 * C351 + C5243 * C1131 - C5249 * C1115 +
              C32126 * C1132 - C5250 * C1116) *
                 C30856 +
             (C5242 * C381 - C5248 * C369 + C5243 * C1142 - C5249 * C1133 +
              C32126 * C1143 - C5250 * C1134) *
                 C31762) *
                C31941) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C2656 +
             (C31836 * C140 - C113 * C127) * C2650 + (C148 - C149) * C2657 +
             (C150 - C151) * C2651 + C168 * C2658 + C169 * C2652 +
             C170 * C2659 + C171 * C32130) *
                C32096 +
            ((C2024 - C2025) * C2656 + (C2026 - C2027) * C2650 + C2375 * C2657 +
             C2376 * C2651 + C1764 * C2658 + C1765 * C2652 + C3439 * C2659 +
             C3440 * C32130) *
                C31941) *
               C572 +
           (((C2025 - C2024) * C2656 + (C2027 - C2026) * C2650 + C2377 * C2657 +
             C2378 * C2651 + C2379 * C2658 + C2380 * C2652 + C3901 * C2659 +
             C3902 * C32130) *
                C32096 +
            ((C2029 - C2028) * C2656 + (C2031 - C2030) * C2650 + C2381 * C2657 +
             C2382 * C2651 + C2383 * C2658 + C2384 * C2652 +
             (C1774 - C1775) * C2659 + (C1776 - C1777) * C32130) *
                C31941) *
               C573) *
              C31799 * C468 +
          ((((C149 - C148) * C2656 + (C151 - C150) * C2650 +
             (C153 - C152) * C2657 + (C155 - C154) * C2651 +
             (C157 - C156) * C2658 + (C159 - C158) * C2652 +
             (C161 - C160) * C2659 + (C163 - C162) * C32130) *
                C32096 +
            (C2377 * C2656 + C2378 * C2650 + C2379 * C2657 + C2380 * C2651 +
             C3901 * C2658 + C3902 * C2652 + (C591 - C592) * C2659 +
             (C593 - C594) * C32130) *
                C31941) *
               C572 +
           ((C2375 * C2656 + C2376 * C2650 + C1764 * C2657 + C1765 * C2651 +
             C3439 * C2658 + C3440 * C2652 + (C592 - C591) * C2659 +
             (C594 - C593) * C32130) *
                C32096 +
            (C2032 * C2656 + C2033 * C2650 + C1778 * C2657 + C1779 * C2651 +
             (C1775 - C1774) * C2658 + (C1777 - C1776) * C2652 +
             (C31836 * C372 - C113 * C353) * C2659 +
             (C31836 * C383 - C113 * C373) * C32130) *
                C31941) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C30875 +
             (C31836 * C140 - C113 * C127) * C32076 + (C148 - C149) * C30856 +
             (C150 - C151) * C31762) *
                C13203 +
            ((C2024 - C2025) * C30875 + (C2026 - C2027) * C32076 +
             C2375 * C30856 + C2376 * C31762) *
                C13204 +
            C13418 * C13205 + C13419 * C32142) *
               C572 +
           (((C2025 - C2024) * C30875 + (C2027 - C2026) * C32076 +
             C2377 * C30856 + C2378 * C31762) *
                C13203 +
            ((C2029 - C2028) * C30875 + (C2031 - C2030) * C32076 +
             C2381 * C30856 + C2382 * C31762) *
                C13204 +
            ((C2036 - C2037) * C30875 + (C2038 - C2039) * C32076 +
             C13684 * C30856 + C13685 * C31762) *
                C13205 +
            ((C11743 - C11742) * C30875 + (C11745 - C11744) * C32076 +
             (C11931 - C11932) * C30856 + (C11933 - C11934) * C31762) *
                C32142) *
               C573) *
              C31799 * C468 +
          ((((C149 - C148) * C30875 + (C151 - C150) * C32076 +
             (C153 - C152) * C30856 + (C155 - C154) * C31762) *
                C13203 +
            (C2377 * C30875 + C2378 * C32076 + C2379 * C30856 +
             C2380 * C31762) *
                C13204 +
            (C2381 * C30875 + C2382 * C32076 + C2383 * C30856 +
             C2384 * C31762) *
                C13205 +
            (C13684 * C30875 + C13685 * C32076 + (C2044 - C2045) * C30856 +
             (C2046 - C2047) * C31762) *
                C32142) *
               C572 +
           ((C2375 * C30875 + C2376 * C32076 + C1764 * C30856 +
             C1765 * C31762) *
                C13203 +
            (C2032 * C30875 + C2033 * C32076 + C1778 * C30856 +
             C1779 * C31762) *
                C13204 +
            (C13410 * C30875 + C13411 * C32076 + (C2045 - C2044) * C30856 +
             (C2047 - C2046) * C31762) *
                C13205 +
            ((C11932 - C11931) * C30875 + (C11934 - C11933) * C32076 +
             (C31836 * C2015 - C113 * C2004) * C30856 +
             (C31836 * C2022 - C113 * C2016) * C31762) *
                C32142) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C2656 +
            (C31836 * C140 - C113 * C127) * C2650 + (C148 - C149) * C2657 +
            (C150 - C151) * C2651 + C168 * C2658 + C169 * C2652 + C170 * C2659 +
            C171 * C32130) *
               C32096 +
           ((C2024 - C2025) * C2656 + (C2026 - C2027) * C2650 + C2375 * C2657 +
            C2376 * C2651 + C1764 * C2658 + C1765 * C2652 + C3439 * C2659 +
            C3440 * C32130) *
               C31941) *
              C31813 * C235 +
          (((C113 * C239 - C31836 * C249) * C2656 +
            (C113 * C250 - C31836 * C269) * C2650 + (C475 - C476) * C2657 +
            (C477 - C478) * C2651 + (C479 - C480) * C2658 +
            (C481 - C482) * C2652 + (C483 - C484) * C2659 +
            (C485 - C486) * C32130) *
               C32096 +
           ((C2543 - C2544) * C2656 + (C2545 - C2546) * C2650 +
            (C2209 - C2210) * C2657 + (C2211 - C2212) * C2651 +
            (C2213 - C2214) * C2658 + (C2215 - C2216) * C2652 +
            (C113 * C679 - C31836 * C687) * C2659 +
            (C113 * C688 - C31836 * C694) * C32130) *
               C31941) *
              C31813 * C236 +
          (((C31836 * C259 - C113 * C244) * C2656 +
            (C31836 * C274 - C113 * C260) * C2650 +
            (C31836 * C261 - C113 * C245) * C2657 +
            (C31836 * C275 - C113 * C262) * C2651 +
            (C31836 * C263 - C113 * C246) * C2658 +
            (C31836 * C276 - C113 * C264) * C2652 +
            (C31836 * C265 - C113 * C247) * C2659 +
            (C31836 * C277 - C113 * C266) * C32130) *
               C32096 +
           ((C31836 * C1117 - C113 * C1108) * C2656 +
            (C31836 * C1135 - C113 * C1118) * C2650 +
            (C31836 * C1119 - C113 * C1109) * C2657 +
            (C31836 * C1136 - C113 * C1120) * C2651 +
            (C31836 * C1121 - C113 * C1110) * C2658 +
            (C31836 * C1137 - C113 * C1122) * C2652 +
            (C31836 * C1465 - C113 * C1464) * C2659 +
            (C31836 * C1467 - C113 * C1466) * C32130) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C2656 +
            (C31836 * C140 - C113 * C127) * C2650 + (C148 - C149) * C2657 +
            (C150 - C151) * C2651 + C168 * C2658 + C169 * C2652 + C170 * C2659 +
            C171 * C32130) *
               C32096 +
           ((C2024 - C2025) * C2656 + (C2026 - C2027) * C2650 + C2375 * C2657 +
            C2376 * C2651 + C1764 * C2658 + C1765 * C2652 + C3439 * C2659 +
            C3440 * C32130) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C149 - C148) * C2656 + (C151 - C150) * C2650 +
            (C153 - C152) * C2657 + (C155 - C154) * C2651 +
            (C157 - C156) * C2658 + (C159 - C158) * C2652 +
            (C161 - C160) * C2659 + (C163 - C162) * C32130) *
               C32096 +
           (C2377 * C2656 + C2378 * C2650 + C2379 * C2657 + C2380 * C2651 +
            (C587 - C588) * C2658 + (C589 - C590) * C2652 +
            (C591 - C592) * C2659 + (C593 - C594) * C32130) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C168 * C2656 + C169 * C2650 + C170 * C2657 + C171 * C2651 +
            C172 * C2658 + C173 * C2652 + (C165 - C164) * C2659 +
            (C167 - C166) * C32130) *
               C32096 +
           (C1764 * C2656 + C1765 * C2650 + C3439 * C2657 + C3440 * C2651 +
            (C592 - C591) * C2658 + (C594 - C593) * C2652 +
            (C31836 * C575 - C113 * C574) * C2659 +
            (C31836 * C577 - C113 * C576) * C32130) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C30875 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C32076 +
            (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C30856 +
            (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C31762) *
               C32096 +
           ((C6825 - C6826 + C6827 - C6828 + C6829 - C6830) * C30875 +
            (C6831 - C6832 + C6833 - C6834 + C6835 - C6836) * C32076 +
            (C5838 - C5837 + C5840 - C5839 + C5842 - C5841) * C30856 +
            (C5844 - C5843 + C5846 - C5845 + C5848 - C5847) * C31762) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C30875 +
            (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C32076 +
            (C5268 - C5267 + C5270 - C5269 + C5272 - C5271) * C30856 +
            (C5274 - C5273 + C5276 - C5275 + C5278 - C5277) * C31762) *
               C32096 +
           ((C5837 - C5838 + C5839 - C5840 + C5841 - C5842) * C30875 +
            (C5843 - C5844 + C5845 - C5846 + C5847 - C5848) * C32076 +
            (C5849 - C5850 + C5851 - C5852 + C5853 - C5854) * C30856 +
            (C5855 - C5856 + C5857 - C5858 + C5859 - C5860) * C31762) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C5299 * C30875 + C5300 * C32076 +
            (C5280 - C5279 + C5282 - C5281 + C5284 - C5283) * C30856 +
            (C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C31762) *
               C32096 +
           ((C5850 - C5849 + C5852 - C5851 + C5854 - C5853) * C30875 +
            (C5856 - C5855 + C5858 - C5857 + C5860 - C5859) * C32076 +
            (C5242 * C360 - C5248 * C347 + C5243 * C687 - C5249 * C679 +
             C32126 * C1465 - C5250 * C1464) *
                C30856 +
            (C5242 * C377 - C5248 * C361 + C5243 * C694 - C5249 * C688 +
             C32126 * C1467 - C5250 * C1466) *
                C31762) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C30875 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C32076 +
            (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C30856 +
            (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C31762) *
               C32096 +
           ((C6825 - C6826 + C6827 - C6828 + C6829 - C6830) * C30875 +
            (C6831 - C6832 + C6833 - C6834 + C6835 - C6836) * C32076 +
            (C5838 - C5837 + C5840 - C5839 + C5842 - C5841) * C30856 +
            (C5844 - C5843 + C5846 - C5845 + C5848 - C5847) * C31762) *
               C31941) *
              C31813 * C235 +
          (((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
             C5250 * C974 - C32126 * C980) *
                C30875 +
            (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
             C5250 * C981 - C32126 * C992) *
                C32076 +
            (C5667 - C5668 + C5669 - C5670 + C5671 - C5672) * C30856 +
            (C5673 - C5674 + C5675 - C5676 + C5677 - C5678) * C31762) *
               C32096 +
           ((C7336 - C7337 + C7338 - C7339 + C7340 - C7341) * C30875 +
            (C7342 - C7343 + C7344 - C7345 + C7346 - C7347) * C32076 +
            (C5248 * C677 - C5242 * C683 + C5249 * C1109 - C5243 * C1119 +
             C5250 * C1639 - C32126 * C1643) *
                C30856 +
            (C5248 * C684 - C5242 * C692 + C5249 * C1120 - C5243 * C1136 +
             C5250 * C1644 - C32126 * C1648) *
                C31762) *
               C31941) *
              C31813 * C236 +
          (((C5242 * C259 - C5248 * C244 + C5243 * C980 - C5249 * C974 +
             C32126 * C986 - C5250 * C977) *
                C30875 +
            (C5242 * C274 - C5248 * C260 + C5243 * C992 - C5249 * C981 +
             C32126 * C995 - C5250 * C987) *
                C32076 +
            (C5242 * C261 - C5248 * C245 + C5243 * C982 - C5249 * C975 +
             C32126 * C988 - C5250 * C978) *
                C30856 +
            (C5242 * C275 - C5248 * C262 + C5243 * C993 - C5249 * C983 +
             C32126 * C996 - C5250 * C989) *
                C31762) *
               C32096 +
           ((C5242 * C1117 - C5248 * C1108 + C5243 * C1641 - C5249 * C1638 +
             C32126 * C6215 - C5250 * C6212) *
                C30875 +
            (C5242 * C1135 - C5248 * C1118 + C5243 * C1647 - C5249 * C1642 +
             C32126 * C6221 - C5250 * C6216) *
                C32076 +
            (C5242 * C1119 - C5248 * C1109 + C5243 * C1643 - C5249 * C1639 +
             C32126 * C6393 - C5250 * C6392) *
                C30856 +
            (C5242 * C1136 - C5248 * C1120 + C5243 * C1648 - C5249 * C1644 +
             C32126 * C6395 - C5250 * C6394) *
                C31762) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C30875 +
            (C31836 * C140 - C113 * C127) * C32076 + (C148 - C149) * C30856 +
            (C150 - C151) * C31762) *
               C13203 +
           ((C2024 - C2025) * C30875 + (C2026 - C2027) * C32076 +
            C2375 * C30856 + C2376 * C31762) *
               C13204 +
           (C2048 * C30875 + C2049 * C32076 + C2032 * C30856 + C2033 * C31762) *
               C13205 +
           (C11740 * C30875 + C11741 * C32076 + (C2041 - C2040) * C30856 +
            (C2043 - C2042) * C31762) *
               C32142) *
              C31813 * C31799 * C110 +
          (((C149 - C148) * C30875 + (C151 - C150) * C32076 +
            (C153 - C152) * C30856 + (C155 - C154) * C31762) *
               C13203 +
           (C2377 * C30875 + C2378 * C32076 + C2379 * C30856 + C2380 * C31762) *
               C13204 +
           (C2381 * C30875 + C2382 * C32076 + C2383 * C30856 + C2384 * C31762) *
               C13205 +
           ((C2040 - C2041) * C30875 + (C2042 - C2043) * C32076 +
            (C2044 - C2045) * C30856 + (C2046 - C2047) * C31762) *
               C32142) *
              C31813 * C31799 * C111 +
          ((C168 * C30875 + C169 * C32076 + C170 * C30856 + C171 * C31762) *
               C13203 +
           (C1764 * C30875 + C1765 * C32076 + C3439 * C30856 + C3440 * C31762) *
               C13204 +
           (C1778 * C30875 + C1779 * C32076 + (C1775 - C1774) * C30856 +
            (C1777 - C1776) * C31762) *
               C13205 +
           ((C2045 - C2044) * C30875 + (C2047 - C2046) * C32076 +
            (C31836 * C2371 - C113 * C2370) * C30856 +
            (C31836 * C2373 - C113 * C2372) * C31762) *
               C32142) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C30875 +
            (C31836 * C140 - C113 * C127) * C32076 + (C148 - C149) * C30856 +
            (C150 - C151) * C31762) *
               C13203 +
           ((C2024 - C2025) * C30875 + (C2026 - C2027) * C32076 +
            C2375 * C30856 + C2376 * C31762) *
               C13204 +
           (C2048 * C30875 + C2049 * C32076 + C2032 * C30856 + C2033 * C31762) *
               C13205 +
           (C11740 * C30875 + C11741 * C32076 + (C2041 - C2040) * C30856 +
            (C2043 - C2042) * C31762) *
               C32142) *
              C31813 * C235 +
          (((C113 * C239 - C31836 * C249) * C30875 +
            (C113 * C250 - C31836 * C269) * C32076 + (C475 - C476) * C30856 +
            (C477 - C478) * C31762) *
               C13203 +
           ((C2543 - C2544) * C30875 + (C2545 - C2546) * C32076 +
            (C2209 - C2210) * C30856 + (C2211 - C2212) * C31762) *
               C13204 +
           ((C2547 - C2548) * C30875 + (C2549 - C2550) * C32076 +
            (C2217 - C2218) * C30856 + (C2219 - C2220) * C31762) *
               C13205 +
           ((C12021 - C12022) * C30875 + (C12023 - C12024) * C32076 +
            (C113 * C2531 - C31836 * C2535) * C30856 +
            (C113 * C2536 - C31836 * C2540) * C31762) *
               C32142) *
              C31813 * C236 +
          (((C31836 * C259 - C113 * C244) * C30875 +
            (C31836 * C274 - C113 * C260) * C32076 +
            (C31836 * C261 - C113 * C245) * C30856 +
            (C31836 * C275 - C113 * C262) * C31762) *
               C13203 +
           ((C31836 * C1117 - C113 * C1108) * C30875 +
            (C31836 * C1135 - C113 * C1118) * C32076 +
            (C31836 * C1119 - C113 * C1109) * C30856 +
            (C31836 * C1136 - C113 * C1120) * C31762) *
               C13204 +
           ((C31836 * C1124 - C113 * C1112) * C30875 +
            (C31836 * C1139 - C113 * C1126) * C32076 +
            (C31836 * C1128 - C113 * C1114) * C30856 +
            (C31836 * C1141 - C113 * C1130) * C31762) *
               C13205 +
           ((C31836 * C6815 - C113 * C6812) * C30875 +
            (C31836 * C6821 - C113 * C6816) * C32076 +
            (C31836 * C7170 - C113 * C7169) * C30856 +
            (C31836 * C7172 - C113 * C7171) * C31762) *
               C32142) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C815 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C809 +
            (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
            (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
            C864 * C32115) *
               C31854 * C31813 * C466 +
           ((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
             C814 * C974 - C32126 * C980) *
                C815 +
            (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
             C814 * C981 - C32126 * C992) *
                C809 +
            (C1295 - C1296 + C1297 - C1298 + C1299 - C1300) * C816 +
            (C1301 - C1302 + C1303 - C1304 + C1305 - C1306) * C810 +
            (C1307 - C1308 + C1309 - C1310 + C1311 - C1312) * C817 +
            (C1313 - C1314 + C1315 - C1316 + C1317 - C1318) * C32115) *
               C31854 * C31813 * C467) *
              C468 +
          (((C820 - C819 + C822 - C821 + C824 - C823) * C815 +
            (C826 - C825 + C828 - C827 + C830 - C829) * C809 +
            (C832 - C831 + C834 - C833 + C836 - C835) * C816 +
            (C838 - C837 + C840 - C839 + C842 - C841) * C810 +
            (C843 - C844 + C845 - C846 + C847 - C848) * C817 +
            (C849 - C850 + C851 - C852 + C853 - C854) * C32115) *
               C31854 * C31813 * C466 +
           ((C1296 - C1295 + C1298 - C1297 + C1300 - C1299) * C815 +
            (C1302 - C1301 + C1304 - C1303 + C1306 - C1305) * C809 +
            (C1308 - C1307 + C1310 - C1309 + C1312 - C1311) * C816 +
            (C1314 - C1313 + C1316 - C1315 + C1318 - C1317) * C810 +
            (C32161 * C255 - C812 * C242 + C32149 * C265 - C813 * C247 +
             C32126 * C1291 - C814 * C1290) *
                C817 +
            (C32161 * C272 - C812 * C256 + C32149 * C277 - C813 * C266 +
             C32126 * C1293 - C814 * C1292) *
                C32115) *
               C31854 * C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C114 +
            (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C31854 * C31813 * C466 +
           ((C113 * C239 - C31836 * C249) * C114 +
            (C113 * C250 - C31836 * C269) * C102 + (C475 - C476) * C115 +
            (C477 - C478) * C103 + (C479 - C480) * C116 + (C481 - C482) * C104 +
            (C483 - C484) * C117 + (C485 - C486) * C105 + (C487 - C488) * C118 +
            (C489 - C490) * C106) *
               C31854 * C31813 * C467) *
              C468 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C31854 * C31813 * C466 +
           ((C476 - C475) * C114 + (C478 - C477) * C102 + (C480 - C479) * C115 +
            (C482 - C481) * C103 + (C484 - C483) * C116 + (C486 - C485) * C104 +
            (C488 - C487) * C117 + (C490 - C489) * C105 +
            (C31836 * C471 - C113 * C470) * C118 +
            (C31836 * C473 - C113 * C472) * C106) *
               C31854 * C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C5251 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C32158 +
            (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
            (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
            C5299 * C5253 + C5300 * C32115) *
               C31854 * C31813 * C466 +
           ((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
             C5250 * C974 - C32126 * C980) *
                C5251 +
            (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
             C5250 * C981 - C32126 * C992) *
                C32158 +
            (C5667 - C5668 + C5669 - C5670 + C5671 - C5672) * C5252 +
            (C5673 - C5674 + C5675 - C5676 + C5677 - C5678) * C32145 +
            (C5679 - C5680 + C5681 - C5682 + C5683 - C5684) * C5253 +
            (C5685 - C5686 + C5687 - C5688 + C5689 - C5690) * C32115) *
               C31854 * C31813 * C467) *
              C468 +
          (((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C5251 +
            (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C32158 +
            (C5268 - C5267 + C5270 - C5269 + C5272 - C5271) * C5252 +
            (C5274 - C5273 + C5276 - C5275 + C5278 - C5277) * C32145 +
            (C5279 - C5280 + C5281 - C5282 + C5283 - C5284) * C5253 +
            (C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C32115) *
               C31854 * C31813 * C466 +
           ((C5668 - C5667 + C5670 - C5669 + C5672 - C5671) * C5251 +
            (C5674 - C5673 + C5676 - C5675 + C5678 - C5677) * C32158 +
            (C5680 - C5679 + C5682 - C5681 + C5684 - C5683) * C5252 +
            (C5686 - C5685 + C5688 - C5687 + C5690 - C5689) * C32145 +
            (C5242 * C255 - C5248 * C242 + C5243 * C265 - C5249 * C247 +
             C32126 * C1291 - C5250 * C1290) *
                C5253 +
            (C5242 * C272 - C5248 * C256 + C5243 * C277 - C5249 * C266 +
             C32126 * C1293 - C5250 * C1292) *
                C32115) *
               C31854 * C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
             C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
             C6072 * C986 - C6078 * C977) *
                C6079 +
            (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
             C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
             C6072 * C995 - C6078 * C987) *
                C31752) *
               C31854 * C31813 * C466 +
           ((C6074 * C239 - C6068 * C249 + C6075 * C244 - C6069 * C259 +
             C6076 * C974 - C6070 * C980 + C6077 * C977 - C6071 * C986 +
             C6078 * C6142 - C6072 * C6144) *
                C6079 +
            (C6074 * C250 - C6068 * C269 + C6075 * C260 - C6069 * C274 +
             C6076 * C981 - C6070 * C992 + C6077 * C987 - C6071 * C995 +
             C6078 * C6145 - C6072 * C6148) *
                C31752) *
               C31854 * C31813 * C467) *
              C468 +
          (((C6074 * C120 - C6068 * C128 + C6075 * C240 - C6069 * C251 +
             C6076 * C245 - C6070 * C261 + C6077 * C975 - C6071 * C982 +
             C6078 * C978 - C6072 * C988) *
                C6079 +
            (C6074 * C129 - C6068 * C141 + C6075 * C252 - C6069 * C270 +
             C6076 * C262 - C6070 * C275 + C6077 * C983 - C6071 * C993 +
             C6078 * C989 - C6072 * C996) *
                C31752) *
               C31854 * C31813 * C466 +
           ((C6068 * C251 - C6074 * C240 + C6069 * C261 - C6075 * C245 +
             C6070 * C982 - C6076 * C975 + C6071 * C988 - C6077 * C978 +
             C6072 * C6307 - C6078 * C6306) *
                C6079 +
            (C6068 * C270 - C6074 * C252 + C6069 * C275 - C6075 * C262 +
             C6070 * C993 - C6076 * C983 + C6071 * C996 - C6077 * C989 +
             C6072 * C6309 - C6078 * C6308) *
                C31752) *
               C31854 * C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C5251 +
             (C31836 * C140 - C113 * C127) * C32158 + (C148 - C149) * C5252 +
             (C150 - C151) * C32145 + C168 * C5253 + C169 * C32115) *
                C10013 +
            ((C2024 - C2025) * C5251 + (C2026 - C2027) * C32158 +
             C2375 * C5252 + C2376 * C32145 + C1764 * C5253 + C1765 * C32115) *
                C10014 +
            C10247 * C32129) *
               C31813 * C466 +
           (((C113 * C239 - C31836 * C249) * C5251 +
             (C113 * C250 - C31836 * C269) * C32158 + (C475 - C476) * C5252 +
             (C477 - C478) * C32145 + (C479 - C480) * C5253 +
             (C481 - C482) * C32115) *
                C10013 +
            ((C2543 - C2544) * C5251 + (C2545 - C2546) * C32158 +
             (C2209 - C2210) * C5252 + (C2211 - C2212) * C32145 +
             (C2213 - C2214) * C5253 + (C2215 - C2216) * C32115) *
                C10014 +
            ((C2547 - C2548) * C5251 + (C2549 - C2550) * C32158 +
             (C2217 - C2218) * C5252 + (C2219 - C2220) * C32145 +
             (C2221 - C2222) * C5253 + (C2223 - C2224) * C32115) *
                C32129) *
               C31813 * C467) *
              C468 +
          ((((C149 - C148) * C5251 + (C151 - C150) * C32158 +
             (C153 - C152) * C5252 + (C155 - C154) * C32145 +
             (C157 - C156) * C5253 + (C159 - C158) * C32115) *
                C10013 +
            (C2377 * C5251 + C2378 * C32158 + C2379 * C5252 + C2380 * C32145 +
             C3901 * C5253 + C3902 * C32115) *
                C10014 +
            (C2381 * C5251 + C2382 * C32158 + C2383 * C5252 + C2384 * C32145 +
             (C1774 - C1775) * C5253 + (C1776 - C1777) * C32115) *
                C32129) *
               C31813 * C466 +
           (((C476 - C475) * C5251 + (C478 - C477) * C32158 +
             (C480 - C479) * C5252 + (C482 - C481) * C32145 +
             (C484 - C483) * C5253 + (C486 - C485) * C32115) *
                C10013 +
            ((C2210 - C2209) * C5251 + (C2212 - C2211) * C32158 +
             (C2214 - C2213) * C5252 + (C2216 - C2215) * C32145 +
             (C3768 - C3767) * C5253 + (C3770 - C3769) * C32115) *
                C10014 +
            ((C2218 - C2217) * C5251 + (C2220 - C2219) * C32158 +
             (C2222 - C2221) * C5252 + (C2224 - C2223) * C32145 +
             (C31836 * C2205 - C113 * C2204) * C5253 +
             (C31836 * C2207 - C113 * C2206) * C32115) *
                C32129) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
              C32126 * C259 - C814 * C244) *
                 C6079 +
             (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
              C32126 * C274 - C814 * C260) *
                 C31752) *
                C10013 +
            ((C11016 - C11017 + C11018 - C11019 + C11020 - C11021) * C6079 +
             (C11022 - C11023 + C11024 - C11025 + C11026 - C11027) * C31752) *
                C10014 +
            C11064 * C32129) *
               C31813 * C466 +
           (((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
              C814 * C974 - C32126 * C980) *
                 C6079 +
             (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
              C814 * C981 - C32126 * C992) *
                 C31752) *
                C10013 +
            ((C812 * C676 - C32161 * C681 + C813 * C1108 - C32149 * C1117 +
              C814 * C1638 - C32126 * C1641) *
                 C6079 +
             (C812 * C682 - C32161 * C691 + C813 * C1118 - C32149 * C1135 +
              C814 * C1642 - C32126 * C1647) *
                 C31752) *
                C10014 +
            ((C812 * C1111 - C32161 * C1123 + C813 * C1112 - C32149 * C1124 +
              C814 * C6213 - C32126 * C6217) *
                 C6079 +
             (C812 * C1125 - C32161 * C1138 + C813 * C1126 - C32149 * C1139 +
              C814 * C6219 - C32126 * C6222) *
                 C31752) *
                C32129) *
               C31813 * C467) *
              C468 +
          ((((C820 - C819 + C822 - C821 + C824 - C823) * C6079 +
             (C826 - C825 + C828 - C827 + C830 - C829) * C31752) *
                C10013 +
            ((C1469 - C1470 + C1471 - C1472 + C1473 - C1474) * C6079 +
             (C1475 - C1476 + C1477 - C1478 + C1479 - C1480) * C31752) *
                C10014 +
            ((C812 * C350 - C32161 * C366 + C813 * C1113 - C32149 * C1127 +
              C814 * C1114 - C32126 * C1128) *
                 C6079 +
             (C812 * C367 - C32161 * C380 + C813 * C1129 - C32149 * C1140 +
              C814 * C1130 - C32126 * C1141) *
                 C31752) *
                C32129) *
               C31813 * C466 +
           (((C1296 - C1295 + C1298 - C1297 + C1300 - C1299) * C6079 +
             (C1302 - C1301 + C1304 - C1303 + C1306 - C1305) * C31752) *
                C10013 +
            ((C32161 * C683 - C812 * C677 + C32149 * C1119 - C813 * C1109 +
              C32126 * C1643 - C814 * C1639) *
                 C6079 +
             (C32161 * C692 - C812 * C684 + C32149 * C1136 - C813 * C1120 +
              C32126 * C1648 - C814 * C1644) *
                 C31752) *
                C10014 +
            ((C32161 * C1127 - C812 * C1113 + C32149 * C1128 - C813 * C1114 +
              C32126 * C7020 - C814 * C7019) *
                 C6079 +
             (C32161 * C1140 - C812 * C1129 + C32149 * C1141 - C813 * C1130 +
              C32126 * C7022 - C814 * C7021) *
                 C31752) *
                C32129) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C815 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C809 +
            (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
            (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
            C864 * C32115) *
               C31854 * C572 +
           ((C812 * C344 - C32161 * C354 + C813 * C676 - C32149 * C681 +
             C814 * C1108 - C32126 * C1117) *
                C815 +
            (C812 * C355 - C32161 * C374 + C813 * C682 - C32149 * C691 +
             C814 * C1118 - C32126 * C1135) *
                C809 +
            (C1469 - C1470 + C1471 - C1472 + C1473 - C1474) * C816 +
            (C1475 - C1476 + C1477 - C1478 + C1479 - C1480) * C810 +
            (C1481 - C1482 + C1483 - C1484 + C1485 - C1486) * C817 +
            (C1487 - C1488 + C1489 - C1490 + C1491 - C1492) * C32115) *
               C31854 * C573) *
              C466 +
          (((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
             C814 * C974 - C32126 * C980) *
                C815 +
            (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
             C814 * C981 - C32126 * C992) *
                C809 +
            (C1295 - C1296 + C1297 - C1298 + C1299 - C1300) * C816 +
            (C1301 - C1302 + C1303 - C1304 + C1305 - C1306) * C810 +
            (C1307 - C1308 + C1309 - C1310 + C1311 - C1312) * C817 +
            (C1313 - C1314 + C1315 - C1316 + C1317 - C1318) * C32115) *
               C31854 * C572 +
           ((C32161 * C681 - C812 * C676 + C32149 * C1117 - C813 * C1108 +
             C32126 * C1641 - C814 * C1638) *
                C815 +
            (C32161 * C691 - C812 * C682 + C32149 * C1135 - C813 * C1118 +
             C32126 * C1647 - C814 * C1642) *
                C809 +
            (C32161 * C683 - C812 * C677 + C32149 * C1119 - C813 * C1109 +
             C32126 * C1643 - C814 * C1639) *
                C816 +
            (C32161 * C692 - C812 * C684 + C32149 * C1136 - C813 * C1120 +
             C32126 * C1648 - C814 * C1644) *
                C810 +
            (C32161 * C685 - C812 * C678 + C32149 * C1121 - C813 * C1110 +
             C32126 * C1645 - C814 * C1640) *
                C817 +
            (C32161 * C693 - C812 * C686 + C32149 * C1137 - C813 * C1122 +
             C32126 * C1649 - C814 * C1646) *
                C32115) *
               C31854 * C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C114 +
            (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C31854 * C572 +
           ((C113 * C344 - C31836 * C354) * C114 +
            (C113 * C355 - C31836 * C374) * C102 + (C579 - C580) * C115 +
            (C581 - C582) * C103 + (C583 - C584) * C116 + (C585 - C586) * C104 +
            (C587 - C588) * C117 + (C589 - C590) * C105 + (C591 - C592) * C118 +
            (C593 - C594) * C106) *
               C31854 * C573) *
              C466 +
          (((C113 * C239 - C31836 * C249) * C114 +
            (C113 * C250 - C31836 * C269) * C102 + (C475 - C476) * C115 +
            (C477 - C478) * C103 + (C479 - C480) * C116 + (C481 - C482) * C104 +
            (C483 - C484) * C117 + (C485 - C486) * C105 + (C487 - C488) * C118 +
            (C489 - C490) * C106) *
               C31854 * C572 +
           ((C31836 * C681 - C113 * C676) * C114 +
            (C31836 * C691 - C113 * C682) * C102 +
            (C31836 * C683 - C113 * C677) * C115 +
            (C31836 * C692 - C113 * C684) * C103 +
            (C31836 * C685 - C113 * C678) * C116 +
            (C31836 * C693 - C113 * C686) * C104 +
            (C31836 * C687 - C113 * C679) * C117 +
            (C31836 * C694 - C113 * C688) * C105 +
            (C31836 * C689 - C113 * C680) * C118 +
            (C31836 * C695 - C113 * C690) * C106) *
               C31854 * C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C5251 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C32158 +
            (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
            (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
            C5299 * C5253 + C5300 * C32115) *
               C31854 * C572 +
           ((C5248 * C344 - C5242 * C354 + C5249 * C676 - C5243 * C681 +
             C5250 * C1108 - C32126 * C1117) *
                C5251 +
            (C5248 * C355 - C5242 * C374 + C5249 * C682 - C5243 * C691 +
             C5250 * C1118 - C32126 * C1135) *
                C32158 +
            (C5837 - C5838 + C5839 - C5840 + C5841 - C5842) * C5252 +
            (C5843 - C5844 + C5845 - C5846 + C5847 - C5848) * C32145 +
            (C5849 - C5850 + C5851 - C5852 + C5853 - C5854) * C5253 +
            (C5855 - C5856 + C5857 - C5858 + C5859 - C5860) * C32115) *
               C31854 * C573) *
              C466 +
          (((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
             C5250 * C974 - C32126 * C980) *
                C5251 +
            (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
             C5250 * C981 - C32126 * C992) *
                C32158 +
            (C5667 - C5668 + C5669 - C5670 + C5671 - C5672) * C5252 +
            (C5673 - C5674 + C5675 - C5676 + C5677 - C5678) * C32145 +
            (C5679 - C5680 + C5681 - C5682 + C5683 - C5684) * C5253 +
            (C5685 - C5686 + C5687 - C5688 + C5689 - C5690) * C32115) *
               C31854 * C572 +
           ((C5242 * C681 - C5248 * C676 + C5243 * C1117 - C5249 * C1108 +
             C32126 * C1641 - C5250 * C1638) *
                C5251 +
            (C5242 * C691 - C5248 * C682 + C5243 * C1135 - C5249 * C1118 +
             C32126 * C1647 - C5250 * C1642) *
                C32158 +
            (C5242 * C683 - C5248 * C677 + C5243 * C1119 - C5249 * C1109 +
             C32126 * C1643 - C5250 * C1639) *
                C5252 +
            (C5242 * C692 - C5248 * C684 + C5243 * C1136 - C5249 * C1120 +
             C32126 * C1648 - C5250 * C1644) *
                C32145 +
            (C5242 * C685 - C5248 * C678 + C5243 * C1121 - C5249 * C1110 +
             C32126 * C1645 - C5250 * C1640) *
                C5253 +
            (C5242 * C693 - C5248 * C686 + C5243 * C1137 - C5249 * C1122 +
             C32126 * C1649 - C5250 * C1646) *
                C32115) *
               C31854 * C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
             C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
             C6072 * C986 - C6078 * C977) *
                C6079 +
            (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
             C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
             C6072 * C995 - C6078 * C987) *
                C31752) *
               C31854 * C572 +
           ((C6074 * C344 - C6068 * C354 + C6075 * C676 - C6069 * C681 +
             C6076 * C1108 - C6070 * C1117 + C6077 * C1638 - C6071 * C1641 +
             C6078 * C6212 - C6072 * C6215) *
                C6079 +
            (C6074 * C355 - C6068 * C374 + C6075 * C682 - C6069 * C691 +
             C6076 * C1118 - C6070 * C1135 + C6077 * C1642 - C6071 * C1647 +
             C6078 * C6216 - C6072 * C6221) *
                C31752) *
               C31854 * C573) *
              C466 +
          (((C6074 * C239 - C6068 * C249 + C6075 * C244 - C6069 * C259 +
             C6076 * C974 - C6070 * C980 + C6077 * C977 - C6071 * C986 +
             C6078 * C6142 - C6072 * C6144) *
                C6079 +
            (C6074 * C250 - C6068 * C269 + C6075 * C260 - C6069 * C274 +
             C6076 * C981 - C6070 * C992 + C6077 * C987 - C6071 * C995 +
             C6078 * C6145 - C6072 * C6148) *
                C31752) *
               C31854 * C572 +
           ((C6068 * C681 - C6074 * C676 + C6069 * C1117 - C6075 * C1108 +
             C6070 * C1641 - C6076 * C1638 + C6071 * C6215 - C6077 * C6212 +
             C6072 * C6479 - C6078 * C6478) *
                C6079 +
            (C6068 * C691 - C6074 * C682 + C6069 * C1135 - C6075 * C1118 +
             C6070 * C1647 - C6076 * C1642 + C6071 * C6221 - C6077 * C6216 +
             C6072 * C6481 - C6078 * C6480) *
                C31752) *
               C31854 * C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C5251 +
             (C31836 * C140 - C113 * C127) * C32158 + (C148 - C149) * C5252 +
             (C150 - C151) * C32145 + C168 * C5253 + C169 * C32115) *
                C10013 +
            ((C2024 - C2025) * C5251 + (C2026 - C2027) * C32158 +
             C2375 * C5252 + C2376 * C32145 + C1764 * C5253 + C1765 * C32115) *
                C10014 +
            C10247 * C32129) *
               C572 +
           (((C2025 - C2024) * C5251 + (C2027 - C2026) * C32158 +
             C2377 * C5252 + C2378 * C32145 + C2379 * C5253 + C2380 * C32115) *
                C10013 +
            ((C2029 - C2028) * C5251 + (C2031 - C2030) * C32158 +
             C2381 * C5252 + C2382 * C32145 + C2383 * C5253 + C2384 * C32115) *
                C10014 +
            ((C2036 - C2037) * C5251 + (C2038 - C2039) * C32158 +
             (C2040 - C2041) * C5252 + (C2042 - C2043) * C32145 +
             (C2044 - C2045) * C5253 + (C2046 - C2047) * C32115) *
                C32129) *
               C573) *
              C466 +
          ((((C113 * C239 - C31836 * C249) * C5251 +
             (C113 * C250 - C31836 * C269) * C32158 + (C475 - C476) * C5252 +
             (C477 - C478) * C32145 + (C479 - C480) * C5253 +
             (C481 - C482) * C32115) *
                C10013 +
            ((C2543 - C2544) * C5251 + (C2545 - C2546) * C32158 +
             (C2209 - C2210) * C5252 + (C2211 - C2212) * C32145 +
             (C2213 - C2214) * C5253 + (C2215 - C2216) * C32115) *
                C10014 +
            ((C2547 - C2548) * C5251 + (C2549 - C2550) * C32158 +
             (C2217 - C2218) * C5252 + (C2219 - C2220) * C32145 +
             (C2221 - C2222) * C5253 + (C2223 - C2224) * C32115) *
                C32129) *
               C572 +
           (((C2544 - C2543) * C5251 + (C2546 - C2545) * C32158 +
             (C2210 - C2209) * C5252 + (C2212 - C2211) * C32145 +
             (C2214 - C2213) * C5253 + (C2216 - C2215) * C32115) *
                C10013 +
            ((C2548 - C2547) * C5251 + (C2550 - C2549) * C32158 +
             (C2218 - C2217) * C5252 + (C2220 - C2219) * C32145 +
             (C2222 - C2221) * C5253 + (C2224 - C2223) * C32115) *
                C10014 +
            ((C31836 * C2533 - C113 * C2530) * C5251 +
             (C31836 * C2539 - C113 * C2534) * C32158 +
             (C31836 * C2535 - C113 * C2531) * C5252 +
             (C31836 * C2540 - C113 * C2536) * C32145 +
             (C31836 * C2537 - C113 * C2532) * C5253 +
             (C31836 * C2541 - C113 * C2538) * C32115) *
                C32129) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
              C32126 * C259 - C814 * C244) *
                 C6079 +
             (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
              C32126 * C274 - C814 * C260) *
                 C31752) *
                C10013 +
            ((C11016 - C11017 + C11018 - C11019 + C11020 - C11021) * C6079 +
             (C11022 - C11023 + C11024 - C11025 + C11026 - C11027) * C31752) *
                C10014 +
            C11064 * C32129) *
               C572 +
           (((C11017 - C11016 + C11019 - C11018 + C11021 - C11020) * C6079 +
             (C11023 - C11022 + C11025 - C11024 + C11027 - C11026) * C31752) *
                C10013 +
            ((C11029 - C11028 + C11031 - C11030 + C11033 - C11032) * C6079 +
             (C11035 - C11034 + C11037 - C11036 + C11039 - C11038) * C31752) *
                C10014 +
            ((C11040 - C11041 + C11042 - C11043 + C11044 - C11045) * C6079 +
             (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C31752) *
                C32129) *
               C573) *
              C466 +
          ((((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
              C814 * C974 - C32126 * C980) *
                 C6079 +
             (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
              C814 * C981 - C32126 * C992) *
                 C31752) *
                C10013 +
            ((C11515 - C11516 + C11517 - C11518 + C11519 - C11520) * C6079 +
             (C11521 - C11522 + C11523 - C11524 + C11525 - C11526) * C31752) *
                C10014 +
            ((C11527 - C11528 + C11529 - C11530 + C11531 - C11532) * C6079 +
             (C11533 - C11534 + C11535 - C11536 + C11537 - C11538) * C31752) *
                C32129) *
               C572 +
           (((C11516 - C11515 + C11518 - C11517 + C11520 - C11519) * C6079 +
             (C11522 - C11521 + C11524 - C11523 + C11526 - C11525) * C31752) *
                C10013 +
            ((C11528 - C11527 + C11530 - C11529 + C11532 - C11531) * C6079 +
             (C11534 - C11533 + C11536 - C11535 + C11538 - C11537) * C31752) *
                C10014 +
            ((C32161 * C2533 - C812 * C2530 + C32149 * C6815 - C813 * C6812 +
              C32126 * C7332 - C814 * C7331) *
                 C6079 +
             (C32161 * C2539 - C812 * C2534 + C32149 * C6821 - C813 * C6816 +
              C32126 * C7334 - C814 * C7333) *
                 C31752) *
                C32129) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((C31836 * C126 - C113 * C119) * C114 +
               (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
               (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
               C171 * C105 + C172 * C118 + C173 * C106) *
                  C31854 * C31813 * C31799 * C110 +
              ((C149 - C148) * C114 + (C151 - C150) * C102 +
               (C153 - C152) * C115 + (C155 - C154) * C103 +
               (C157 - C156) * C116 + (C159 - C158) * C104 +
               (C161 - C160) * C117 + (C163 - C162) * C105 +
               (C164 - C165) * C118 + (C166 - C167) * C106) *
                  C31854 * C31813 * C31799 * C111 +
              (C168 * C114 + C169 * C102 + C170 * C115 + C171 * C103 +
               C172 * C116 + C173 * C104 + (C165 - C164) * C117 +
               (C167 - C166) * C105 + (C31836 * C138 - C113 * C125) * C118 +
               (C31836 * C146 - C113 * C139) * C106) *
                  C31854 * C31813 * C31799 * C112) +
         std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((C31836 * C126 - C113 * C119) * C114 +
               (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
               (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
               C171 * C105 + C172 * C118 + C173 * C106) *
                  C31854 * C31813 * C235 +
              ((C113 * C239 - C31836 * C249) * C114 +
               (C113 * C250 - C31836 * C269) * C102 +
               (C113 * C240 - C31836 * C251) * C115 +
               (C113 * C252 - C31836 * C270) * C103 +
               (C113 * C241 - C31836 * C253) * C116 +
               (C113 * C254 - C31836 * C271) * C104 +
               (C113 * C242 - C31836 * C255) * C117 +
               (C113 * C256 - C31836 * C272) * C105 +
               (C113 * C243 - C31836 * C257) * C118 +
               (C113 * C258 - C31836 * C273) * C106) *
                  C31854 * C31813 * C236 +
              ((C31836 * C259 - C113 * C244) * C114 +
               (C31836 * C274 - C113 * C260) * C102 +
               (C31836 * C261 - C113 * C245) * C115 +
               (C31836 * C275 - C113 * C262) * C103 +
               (C31836 * C263 - C113 * C246) * C116 +
               (C31836 * C276 - C113 * C264) * C104 +
               (C31836 * C265 - C113 * C247) * C117 +
               (C31836 * C277 - C113 * C266) * C105 +
               (C31836 * C267 - C113 * C248) * C118 +
               (C31836 * C278 - C113 * C268) * C106) *
                  C31854 * C31813 * C237) *
             C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31836 * C126 - C113 * C119) * C114 +
           (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C31854 * C341 +
          ((C113 * C344 - C31836 * C354) * C114 +
           (C113 * C355 - C31836 * C374) * C102 +
           (C113 * C345 - C31836 * C356) * C115 +
           (C113 * C357 - C31836 * C375) * C103 +
           (C113 * C346 - C31836 * C358) * C116 +
           (C113 * C359 - C31836 * C376) * C104 +
           (C113 * C347 - C31836 * C360) * C117 +
           (C113 * C361 - C31836 * C377) * C105 +
           (C113 * C348 - C31836 * C362) * C118 +
           (C113 * C363 - C31836 * C378) * C106) *
              C31854 * C342 +
          ((C31836 * C364 - C113 * C349) * C114 +
           (C31836 * C379 - C113 * C365) * C102 +
           (C31836 * C366 - C113 * C350) * C115 +
           (C31836 * C380 - C113 * C367) * C103 +
           (C31836 * C368 - C113 * C351) * C116 +
           (C31836 * C381 - C113 * C369) * C104 +
           (C31836 * C370 - C113 * C352) * C117 +
           (C31836 * C382 - C113 * C371) * C105 +
           (C31836 * C372 - C113 * C353) * C118 +
           (C31836 * C383 - C113 * C373) * C106) *
              C31854 * C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
            C32126 * C259 - C814 * C244) *
               C815 +
           (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
            C32126 * C274 - C814 * C260) *
               C809 +
           (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
           (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
           C864 * C32115) *
              C31854 * C31813 * C31799 * C110 +
          ((C820 - C819 + C822 - C821 + C824 - C823) * C815 +
           (C826 - C825 + C828 - C827 + C830 - C829) * C809 +
           (C832 - C831 + C834 - C833 + C836 - C835) * C816 +
           (C838 - C837 + C840 - C839 + C842 - C841) * C810 +
           (C843 - C844 + C845 - C846 + C847 - C848) * C817 +
           (C849 - C850 + C851 - C852 + C853 - C854) * C32115) *
              C31854 * C31813 * C31799 * C111 +
          (C863 * C815 + C864 * C809 +
           (C844 - C843 + C846 - C845 + C848 - C847) * C816 +
           (C850 - C849 + C852 - C851 + C854 - C853) * C810 +
           (C32161 * C134 - C812 * C123 + C32149 * C257 - C813 * C243 +
            C32126 * C267 - C814 * C248) *
               C817 +
           (C32161 * C144 - C812 * C135 + C32149 * C273 - C813 * C258 +
            C32126 * C278 - C814 * C268) *
               C32115) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
            C32126 * C259 - C814 * C244) *
               C815 +
           (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
            C32126 * C274 - C814 * C260) *
               C809 +
           (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
           (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
           C864 * C32115) *
              C31854 * C31813 * C235 +
          ((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
            C814 * C974 - C32126 * C980) *
               C815 +
           (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
            C814 * C981 - C32126 * C992) *
               C809 +
           (C812 * C240 - C32161 * C251 + C813 * C245 - C32149 * C261 +
            C814 * C975 - C32126 * C982) *
               C816 +
           (C812 * C252 - C32161 * C270 + C813 * C262 - C32149 * C275 +
            C814 * C983 - C32126 * C993) *
               C810 +
           (C812 * C241 - C32161 * C253 + C813 * C246 - C32149 * C263 +
            C814 * C976 - C32126 * C984) *
               C817 +
           (C812 * C254 - C32161 * C271 + C813 * C264 - C32149 * C276 +
            C814 * C985 - C32126 * C994) *
               C32115) *
              C31854 * C31813 * C236 +
          ((C32161 * C259 - C812 * C244 + C32149 * C980 - C813 * C974 +
            C32126 * C986 - C814 * C977) *
               C815 +
           (C32161 * C274 - C812 * C260 + C32149 * C992 - C813 * C981 +
            C32126 * C995 - C814 * C987) *
               C809 +
           (C32161 * C261 - C812 * C245 + C32149 * C982 - C813 * C975 +
            C32126 * C988 - C814 * C978) *
               C816 +
           (C32161 * C275 - C812 * C262 + C32149 * C993 - C813 * C983 +
            C32126 * C996 - C814 * C989) *
               C810 +
           (C32161 * C263 - C812 * C246 + C32149 * C984 - C813 * C976 +
            C32126 * C990 - C814 * C979) *
               C817 +
           (C32161 * C276 - C812 * C264 + C32149 * C994 - C813 * C985 +
            C32126 * C997 - C814 * C991) *
               C32115) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
            C32126 * C259 - C814 * C244) *
               C815 +
           (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
            C32126 * C274 - C814 * C260) *
               C809 +
           (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
           (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
           C864 * C32115) *
              C31854 * C341 +
          ((C812 * C344 - C32161 * C354 + C813 * C676 - C32149 * C681 +
            C814 * C1108 - C32126 * C1117) *
               C815 +
           (C812 * C355 - C32161 * C374 + C813 * C682 - C32149 * C691 +
            C814 * C1118 - C32126 * C1135) *
               C809 +
           (C812 * C345 - C32161 * C356 + C813 * C677 - C32149 * C683 +
            C814 * C1109 - C32126 * C1119) *
               C816 +
           (C812 * C357 - C32161 * C375 + C813 * C684 - C32149 * C692 +
            C814 * C1120 - C32126 * C1136) *
               C810 +
           (C812 * C346 - C32161 * C358 + C813 * C678 - C32149 * C685 +
            C814 * C1110 - C32126 * C1121) *
               C817 +
           (C812 * C359 - C32161 * C376 + C813 * C686 - C32149 * C693 +
            C814 * C1122 - C32126 * C1137) *
               C32115) *
              C31854 * C342 +
          ((C32161 * C364 - C812 * C349 + C32149 * C1123 - C813 * C1111 +
            C32126 * C1124 - C814 * C1112) *
               C815 +
           (C32161 * C379 - C812 * C365 + C32149 * C1138 - C813 * C1125 +
            C32126 * C1139 - C814 * C1126) *
               C809 +
           (C32161 * C366 - C812 * C350 + C32149 * C1127 - C813 * C1113 +
            C32126 * C1128 - C814 * C1114) *
               C816 +
           (C32161 * C380 - C812 * C367 + C32149 * C1140 - C813 * C1129 +
            C32126 * C1141 - C814 * C1130) *
               C810 +
           (C32161 * C368 - C812 * C351 + C32149 * C1131 - C813 * C1115 +
            C32126 * C1132 - C814 * C1116) *
               C817 +
           (C32161 * C381 - C812 * C369 + C32149 * C1142 - C813 * C1133 +
            C32126 * C1143 - C814 * C1134) *
               C32115) *
              C31854 * C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
            C32126 * C259 - C5250 * C244) *
               C5251 +
           (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
            C32126 * C274 - C5250 * C260) *
               C32158 +
           (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
           (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
           C5299 * C5253 + C5300 * C32115) *
              C31854 * C31813 * C31799 * C110 +
          ((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C5251 +
           (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C32158 +
           (C5268 - C5267 + C5270 - C5269 + C5272 - C5271) * C5252 +
           (C5274 - C5273 + C5276 - C5275 + C5278 - C5277) * C32145 +
           (C5279 - C5280 + C5281 - C5282 + C5283 - C5284) * C5253 +
           (C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C32115) *
              C31854 * C31813 * C31799 * C111 +
          (C5299 * C5251 + C5300 * C32158 +
           (C5280 - C5279 + C5282 - C5281 + C5284 - C5283) * C5252 +
           (C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C32145 +
           (C5242 * C134 - C5248 * C123 + C5243 * C257 - C5249 * C243 +
            C32126 * C267 - C5250 * C248) *
               C5253 +
           (C5242 * C144 - C5248 * C135 + C5243 * C273 - C5249 * C258 +
            C32126 * C278 - C5250 * C268) *
               C32115) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
            C32126 * C259 - C5250 * C244) *
               C5251 +
           (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
            C32126 * C274 - C5250 * C260) *
               C32158 +
           (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
           (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
           C5299 * C5253 + C5300 * C32115) *
              C31854 * C31813 * C235 +
          ((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
            C5250 * C974 - C32126 * C980) *
               C5251 +
           (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
            C5250 * C981 - C32126 * C992) *
               C32158 +
           (C5248 * C240 - C5242 * C251 + C5249 * C245 - C5243 * C261 +
            C5250 * C975 - C32126 * C982) *
               C5252 +
           (C5248 * C252 - C5242 * C270 + C5249 * C262 - C5243 * C275 +
            C5250 * C983 - C32126 * C993) *
               C32145 +
           (C5248 * C241 - C5242 * C253 + C5249 * C246 - C5243 * C263 +
            C5250 * C976 - C32126 * C984) *
               C5253 +
           (C5248 * C254 - C5242 * C271 + C5249 * C264 - C5243 * C276 +
            C5250 * C985 - C32126 * C994) *
               C32115) *
              C31854 * C31813 * C236 +
          ((C5242 * C259 - C5248 * C244 + C5243 * C980 - C5249 * C974 +
            C32126 * C986 - C5250 * C977) *
               C5251 +
           (C5242 * C274 - C5248 * C260 + C5243 * C992 - C5249 * C981 +
            C32126 * C995 - C5250 * C987) *
               C32158 +
           (C5242 * C261 - C5248 * C245 + C5243 * C982 - C5249 * C975 +
            C32126 * C988 - C5250 * C978) *
               C5252 +
           (C5242 * C275 - C5248 * C262 + C5243 * C993 - C5249 * C983 +
            C32126 * C996 - C5250 * C989) *
               C32145 +
           (C5242 * C263 - C5248 * C246 + C5243 * C984 - C5249 * C976 +
            C32126 * C990 - C5250 * C979) *
               C5253 +
           (C5242 * C276 - C5248 * C264 + C5243 * C994 - C5249 * C985 +
            C32126 * C997 - C5250 * C991) *
               C32115) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
            C32126 * C259 - C5250 * C244) *
               C5251 +
           (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
            C32126 * C274 - C5250 * C260) *
               C32158 +
           (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
           (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
           C5299 * C5253 + C5300 * C32115) *
              C31854 * C341 +
          ((C5248 * C344 - C5242 * C354 + C5249 * C676 - C5243 * C681 +
            C5250 * C1108 - C32126 * C1117) *
               C5251 +
           (C5248 * C355 - C5242 * C374 + C5249 * C682 - C5243 * C691 +
            C5250 * C1118 - C32126 * C1135) *
               C32158 +
           (C5248 * C345 - C5242 * C356 + C5249 * C677 - C5243 * C683 +
            C5250 * C1109 - C32126 * C1119) *
               C5252 +
           (C5248 * C357 - C5242 * C375 + C5249 * C684 - C5243 * C692 +
            C5250 * C1120 - C32126 * C1136) *
               C32145 +
           (C5248 * C346 - C5242 * C358 + C5249 * C678 - C5243 * C685 +
            C5250 * C1110 - C32126 * C1121) *
               C5253 +
           (C5248 * C359 - C5242 * C376 + C5249 * C686 - C5243 * C693 +
            C5250 * C1122 - C32126 * C1137) *
               C32115) *
              C31854 * C342 +
          ((C5242 * C364 - C5248 * C349 + C5243 * C1123 - C5249 * C1111 +
            C32126 * C1124 - C5250 * C1112) *
               C5251 +
           (C5242 * C379 - C5248 * C365 + C5243 * C1138 - C5249 * C1125 +
            C32126 * C1139 - C5250 * C1126) *
               C32158 +
           (C5242 * C366 - C5248 * C350 + C5243 * C1127 - C5249 * C1113 +
            C32126 * C1128 - C5250 * C1114) *
               C5252 +
           (C5242 * C380 - C5248 * C367 + C5243 * C1140 - C5249 * C1129 +
            C32126 * C1141 - C5250 * C1130) *
               C32145 +
           (C5242 * C368 - C5248 * C351 + C5243 * C1131 - C5249 * C1115 +
            C32126 * C1132 - C5250 * C1116) *
               C5253 +
           (C5242 * C381 - C5248 * C369 + C5243 * C1142 - C5249 * C1133 +
            C32126 * C1143 - C5250 * C1134) *
               C32115) *
              C31854 * C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
            C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
            C6072 * C986 - C6078 * C977) *
               C6079 +
           (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
            C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
            C6072 * C995 - C6078 * C987) *
               C31752) *
              C31854 * C31813 * C31799 * C110 +
          ((C6074 * C120 - C6068 * C128 + C6075 * C240 - C6069 * C251 +
            C6076 * C245 - C6070 * C261 + C6077 * C975 - C6071 * C982 +
            C6078 * C978 - C6072 * C988) *
               C6079 +
           (C6074 * C129 - C6068 * C141 + C6075 * C252 - C6069 * C270 +
            C6076 * C262 - C6070 * C275 + C6077 * C983 - C6071 * C993 +
            C6078 * C989 - C6072 * C996) *
               C31752) *
              C31854 * C31813 * C31799 * C111 +
          ((C6068 * C130 - C6074 * C121 + C6069 * C253 - C6075 * C241 +
            C6070 * C263 - C6076 * C246 + C6071 * C984 - C6077 * C976 +
            C6072 * C990 - C6078 * C979) *
               C6079 +
           (C6068 * C142 - C6074 * C131 + C6069 * C271 - C6075 * C254 +
            C6070 * C276 - C6076 * C264 + C6071 * C994 - C6077 * C985 +
            C6072 * C997 - C6078 * C991) *
               C31752) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
            C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
            C6072 * C986 - C6078 * C977) *
               C6079 +
           (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
            C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
            C6072 * C995 - C6078 * C987) *
               C31752) *
              C31854 * C31813 * C235 +
          ((C6074 * C239 - C6068 * C249 + C6075 * C244 - C6069 * C259 +
            C6076 * C974 - C6070 * C980 + C6077 * C977 - C6071 * C986 +
            C6078 * C6142 - C6072 * C6144) *
               C6079 +
           (C6074 * C250 - C6068 * C269 + C6075 * C260 - C6069 * C274 +
            C6076 * C981 - C6070 * C992 + C6077 * C987 - C6071 * C995 +
            C6078 * C6145 - C6072 * C6148) *
               C31752) *
              C31854 * C31813 * C236 +
          ((C6068 * C259 - C6074 * C244 + C6069 * C980 - C6075 * C974 +
            C6070 * C986 - C6076 * C977 + C6071 * C6144 - C6077 * C6142 +
            C6072 * C6146 - C6078 * C6143) *
               C6079 +
           (C6068 * C274 - C6074 * C260 + C6069 * C992 - C6075 * C981 +
            C6070 * C995 - C6076 * C987 + C6071 * C6148 - C6077 * C6145 +
            C6072 * C6149 - C6078 * C6147) *
               C31752) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
            C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
            C6072 * C986 - C6078 * C977) *
               C6079 +
           (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
            C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
            C6072 * C995 - C6078 * C987) *
               C31752) *
              C31854 * C341 +
          ((C6074 * C344 - C6068 * C354 + C6075 * C676 - C6069 * C681 +
            C6076 * C1108 - C6070 * C1117 + C6077 * C1638 - C6071 * C1641 +
            C6078 * C6212 - C6072 * C6215) *
               C6079 +
           (C6074 * C355 - C6068 * C374 + C6075 * C682 - C6069 * C691 +
            C6076 * C1118 - C6070 * C1135 + C6077 * C1642 - C6071 * C1647 +
            C6078 * C6216 - C6072 * C6221) *
               C31752) *
              C31854 * C342 +
          ((C6068 * C364 - C6074 * C349 + C6069 * C1123 - C6075 * C1111 +
            C6070 * C1124 - C6076 * C1112 + C6071 * C6217 - C6077 * C6213 +
            C6072 * C6218 - C6078 * C6214) *
               C6079 +
           (C6068 * C379 - C6074 * C365 + C6069 * C1138 - C6075 * C1125 +
            C6070 * C1139 - C6076 * C1126 + C6071 * C6222 - C6077 * C6219 +
            C6072 * C6223 - C6078 * C6220) *
               C31752) *
              C31854 * C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C5251 +
            (C31836 * C140 - C113 * C127) * C32158 + (C148 - C149) * C5252 +
            (C150 - C151) * C32145 + C168 * C5253 + C169 * C32115) *
               C10013 +
           ((C2024 - C2025) * C5251 + (C2026 - C2027) * C32158 + C2375 * C5252 +
            C2376 * C32145 + C1764 * C5253 + C1765 * C32115) *
               C10014 +
           (C2048 * C5251 + C2049 * C32158 + C2032 * C5252 + C2033 * C32145 +
            C1778 * C5253 + C1779 * C32115) *
               C32129) *
              C31813 * C31799 * C110 +
          (((C149 - C148) * C5251 + (C151 - C150) * C32158 +
            (C153 - C152) * C5252 + (C155 - C154) * C32145 +
            (C157 - C156) * C5253 + (C159 - C158) * C32115) *
               C10013 +
           (C2377 * C5251 + C2378 * C32158 + C2379 * C5252 + C2380 * C32145 +
            C3901 * C5253 + C3902 * C32115) *
               C10014 +
           (C2381 * C5251 + C2382 * C32158 + C2383 * C5252 + C2384 * C32145 +
            (C1774 - C1775) * C5253 + (C1776 - C1777) * C32115) *
               C32129) *
              C31813 * C31799 * C111 +
          ((C168 * C5251 + C169 * C32158 + C170 * C5252 + C171 * C32145 +
            C172 * C5253 + C173 * C32115) *
               C10013 +
           (C1764 * C5251 + C1765 * C32158 + C3439 * C5252 + C3440 * C32145 +
            (C592 - C591) * C5253 + (C594 - C593) * C32115) *
               C10014 +
           (C1778 * C5251 + C1779 * C32158 + (C1775 - C1774) * C5252 +
            (C1777 - C1776) * C32145 + (C31836 * C372 - C113 * C353) * C5253 +
            (C31836 * C383 - C113 * C373) * C32115) *
               C32129) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C5251 +
            (C31836 * C140 - C113 * C127) * C32158 + (C148 - C149) * C5252 +
            (C150 - C151) * C32145 + C168 * C5253 + C169 * C32115) *
               C10013 +
           ((C2024 - C2025) * C5251 + (C2026 - C2027) * C32158 + C2375 * C5252 +
            C2376 * C32145 + C1764 * C5253 + C1765 * C32115) *
               C10014 +
           (C2048 * C5251 + C2049 * C32158 + C2032 * C5252 + C2033 * C32145 +
            C1778 * C5253 + C1779 * C32115) *
               C32129) *
              C31813 * C235 +
          (((C113 * C239 - C31836 * C249) * C5251 +
            (C113 * C250 - C31836 * C269) * C32158 + (C475 - C476) * C5252 +
            (C477 - C478) * C32145 + (C479 - C480) * C5253 +
            (C481 - C482) * C32115) *
               C10013 +
           ((C2543 - C2544) * C5251 + (C2545 - C2546) * C32158 +
            (C2209 - C2210) * C5252 + (C2211 - C2212) * C32145 +
            (C2213 - C2214) * C5253 + (C2215 - C2216) * C32115) *
               C10014 +
           ((C2547 - C2548) * C5251 + (C2549 - C2550) * C32158 +
            (C2217 - C2218) * C5252 + (C2219 - C2220) * C32145 +
            (C2221 - C2222) * C5253 + (C2223 - C2224) * C32115) *
               C32129) *
              C31813 * C236 +
          (((C31836 * C259 - C113 * C244) * C5251 +
            (C31836 * C274 - C113 * C260) * C32158 +
            (C31836 * C261 - C113 * C245) * C5252 +
            (C31836 * C275 - C113 * C262) * C32145 +
            (C31836 * C263 - C113 * C246) * C5253 +
            (C31836 * C276 - C113 * C264) * C32115) *
               C10013 +
           ((C31836 * C1117 - C113 * C1108) * C5251 +
            (C31836 * C1135 - C113 * C1118) * C32158 +
            (C31836 * C1119 - C113 * C1109) * C5252 +
            (C31836 * C1136 - C113 * C1120) * C32145 +
            (C31836 * C1121 - C113 * C1110) * C5253 +
            (C31836 * C1137 - C113 * C1122) * C32115) *
               C10014 +
           ((C31836 * C1124 - C113 * C1112) * C5251 +
            (C31836 * C1139 - C113 * C1126) * C32158 +
            (C31836 * C1128 - C113 * C1114) * C5252 +
            (C31836 * C1141 - C113 * C1130) * C32145 +
            (C31836 * C1132 - C113 * C1116) * C5253 +
            (C31836 * C1143 - C113 * C1134) * C32115) *
               C32129) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C5251 +
            (C31836 * C140 - C113 * C127) * C32158 + (C148 - C149) * C5252 +
            (C150 - C151) * C32145 + C168 * C5253 + C169 * C32115) *
               C10013 +
           ((C2024 - C2025) * C5251 + (C2026 - C2027) * C32158 + C2375 * C5252 +
            C2376 * C32145 + C1764 * C5253 + C1765 * C32115) *
               C10014 +
           C10247 * C32129) *
              C341 +
          (((C2025 - C2024) * C5251 + (C2027 - C2026) * C32158 + C2377 * C5252 +
            C2378 * C32145 + C2379 * C5253 + C2380 * C32115) *
               C10013 +
           ((C2029 - C2028) * C5251 + (C2031 - C2030) * C32158 + C2381 * C5252 +
            C2382 * C32145 + C2383 * C5253 + C2384 * C32115) *
               C10014 +
           ((C2036 - C2037) * C5251 + (C2038 - C2039) * C32158 +
            (C2040 - C2041) * C5252 + (C2042 - C2043) * C32145 +
            (C2044 - C2045) * C5253 + (C2046 - C2047) * C32115) *
               C32129) *
              C342 +
          (C10247 * C10013 +
           ((C2037 - C2036) * C5251 + (C2039 - C2038) * C32158 +
            (C2041 - C2040) * C5252 + (C2043 - C2042) * C32145 +
            (C2045 - C2044) * C5253 + (C2047 - C2046) * C32115) *
               C10014 +
           ((C31836 * C2011 - C113 * C2002) * C5251 +
            (C31836 * C2020 - C113 * C2012) * C32158 +
            (C31836 * C2013 - C113 * C2003) * C5252 +
            (C31836 * C2021 - C113 * C2014) * C32145 +
            (C31836 * C2015 - C113 * C2004) * C5253 +
            (C31836 * C2022 - C113 * C2016) * C32115) *
               C32129) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C6079 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C31752) *
               C10013 +
           ((C32161 * C354 - C812 * C344 + C32149 * C681 - C813 * C676 +
             C32126 * C1117 - C814 * C1108) *
                C6079 +
            (C32161 * C374 - C812 * C355 + C32149 * C691 - C813 * C682 +
             C32126 * C1135 - C814 * C1118) *
                C31752) *
               C10014 +
           ((C32161 * C364 - C812 * C349 + C32149 * C1123 - C813 * C1111 +
             C32126 * C1124 - C814 * C1112) *
                C6079 +
            (C32161 * C379 - C812 * C365 + C32149 * C1138 - C813 * C1125 +
             C32126 * C1139 - C814 * C1126) *
                C31752) *
               C32129) *
              C31813 * C31799 * C110 +
          (((C820 - C819 + C822 - C821 + C824 - C823) * C6079 +
            (C826 - C825 + C828 - C827 + C830 - C829) * C31752) *
               C10013 +
           ((C1469 - C1470 + C1471 - C1472 + C1473 - C1474) * C6079 +
            (C1475 - C1476 + C1477 - C1478 + C1479 - C1480) * C31752) *
               C10014 +
           ((C812 * C350 - C32161 * C366 + C813 * C1113 - C32149 * C1127 +
             C814 * C1114 - C32126 * C1128) *
                C6079 +
            (C812 * C367 - C32161 * C380 + C813 * C1129 - C32149 * C1140 +
             C814 * C1130 - C32126 * C1141) *
                C31752) *
               C32129) *
              C31813 * C31799 * C111 +
          ((C863 * C6079 + C864 * C31752) * C10013 +
           ((C1482 - C1481 + C1484 - C1483 + C1486 - C1485) * C6079 +
            (C1488 - C1487 + C1490 - C1489 + C1492 - C1491) * C31752) *
               C10014 +
           ((C32161 * C368 - C812 * C351 + C32149 * C1131 - C813 * C1115 +
             C32126 * C1132 - C814 * C1116) *
                C6079 +
            (C32161 * C381 - C812 * C369 + C32149 * C1142 - C813 * C1133 +
             C32126 * C1143 - C814 * C1134) *
                C31752) *
               C32129) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C6079 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C31752) *
               C10013 +
           ((C32161 * C354 - C812 * C344 + C32149 * C681 - C813 * C676 +
             C32126 * C1117 - C814 * C1108) *
                C6079 +
            (C32161 * C374 - C812 * C355 + C32149 * C691 - C813 * C682 +
             C32126 * C1135 - C814 * C1118) *
                C31752) *
               C10014 +
           ((C32161 * C364 - C812 * C349 + C32149 * C1123 - C813 * C1111 +
             C32126 * C1124 - C814 * C1112) *
                C6079 +
            (C32161 * C379 - C812 * C365 + C32149 * C1138 - C813 * C1125 +
             C32126 * C1139 - C814 * C1126) *
                C31752) *
               C32129) *
              C31813 * C235 +
          (((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
             C814 * C974 - C32126 * C980) *
                C6079 +
            (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
             C814 * C981 - C32126 * C992) *
                C31752) *
               C10013 +
           ((C812 * C676 - C32161 * C681 + C813 * C1108 - C32149 * C1117 +
             C814 * C1638 - C32126 * C1641) *
                C6079 +
            (C812 * C682 - C32161 * C691 + C813 * C1118 - C32149 * C1135 +
             C814 * C1642 - C32126 * C1647) *
                C31752) *
               C10014 +
           ((C812 * C1111 - C32161 * C1123 + C813 * C1112 - C32149 * C1124 +
             C814 * C6213 - C32126 * C6217) *
                C6079 +
            (C812 * C1125 - C32161 * C1138 + C813 * C1126 - C32149 * C1139 +
             C814 * C6219 - C32126 * C6222) *
                C31752) *
               C32129) *
              C31813 * C236 +
          (((C32161 * C259 - C812 * C244 + C32149 * C980 - C813 * C974 +
             C32126 * C986 - C814 * C977) *
                C6079 +
            (C32161 * C274 - C812 * C260 + C32149 * C992 - C813 * C981 +
             C32126 * C995 - C814 * C987) *
                C31752) *
               C10013 +
           ((C32161 * C1117 - C812 * C1108 + C32149 * C1641 - C813 * C1638 +
             C32126 * C6215 - C814 * C6212) *
                C6079 +
            (C32161 * C1135 - C812 * C1118 + C32149 * C1647 - C813 * C1642 +
             C32126 * C6221 - C814 * C6216) *
                C31752) *
               C10014 +
           ((C32161 * C1124 - C812 * C1112 + C32149 * C6217 - C813 * C6213 +
             C32126 * C6218 - C814 * C6214) *
                C6079 +
            (C32161 * C1139 - C812 * C1126 + C32149 * C6222 - C813 * C6219 +
             C32126 * C6223 - C814 * C6220) *
                C31752) *
               C32129) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C6079 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C31752) *
               C10013 +
           ((C11016 - C11017 + C11018 - C11019 + C11020 - C11021) * C6079 +
            (C11022 - C11023 + C11024 - C11025 + C11026 - C11027) * C31752) *
               C10014 +
           C11064 * C32129) *
              C341 +
          (((C11017 - C11016 + C11019 - C11018 + C11021 - C11020) * C6079 +
            (C11023 - C11022 + C11025 - C11024 + C11027 - C11026) * C31752) *
               C10013 +
           ((C11029 - C11028 + C11031 - C11030 + C11033 - C11032) * C6079 +
            (C11035 - C11034 + C11037 - C11036 + C11039 - C11038) * C31752) *
               C10014 +
           ((C11040 - C11041 + C11042 - C11043 + C11044 - C11045) * C6079 +
            (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C31752) *
               C32129) *
              C342 +
          (C11064 * C10013 +
           ((C11041 - C11040 + C11043 - C11042 + C11045 - C11044) * C6079 +
            (C11047 - C11046 + C11049 - C11048 + C11051 - C11050) * C31752) *
               C10014 +
           ((C32161 * C2011 - C812 * C2002 + C32149 * C6817 - C813 * C6813 +
             C32126 * C6818 - C814 * C6814) *
                C6079 +
            (C32161 * C2020 - C812 * C2012 + C32149 * C6822 - C813 * C6819 +
             C32126 * C6823 - C814 * C6820) *
                C31752) *
               C32129) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C815 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C809 +
            (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
            (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
            C864 * C32115) *
               C31854 * C572 +
           ((C812 * C344 - C32161 * C354 + C813 * C676 - C32149 * C681 +
             C814 * C1108 - C32126 * C1117) *
                C815 +
            (C812 * C355 - C32161 * C374 + C813 * C682 - C32149 * C691 +
             C814 * C1118 - C32126 * C1135) *
                C809 +
            (C1469 - C1470 + C1471 - C1472 + C1473 - C1474) * C816 +
            (C1475 - C1476 + C1477 - C1478 + C1479 - C1480) * C810 +
            (C1481 - C1482 + C1483 - C1484 + C1485 - C1486) * C817 +
            (C1487 - C1488 + C1489 - C1490 + C1491 - C1492) * C32115) *
               C31854 * C573) *
              C31799 * C468 +
          (((C820 - C819 + C822 - C821 + C824 - C823) * C815 +
            (C826 - C825 + C828 - C827 + C830 - C829) * C809 +
            (C832 - C831 + C834 - C833 + C836 - C835) * C816 +
            (C838 - C837 + C840 - C839 + C842 - C841) * C810 +
            (C843 - C844 + C845 - C846 + C847 - C848) * C817 +
            (C849 - C850 + C851 - C852 + C853 - C854) * C32115) *
               C31854 * C572 +
           ((C1470 - C1469 + C1472 - C1471 + C1474 - C1473) * C815 +
            (C1476 - C1475 + C1478 - C1477 + C1480 - C1479) * C809 +
            (C1482 - C1481 + C1484 - C1483 + C1486 - C1485) * C816 +
            (C1488 - C1487 + C1490 - C1489 + C1492 - C1491) * C810 +
            (C32161 * C360 - C812 * C347 + C32149 * C687 - C813 * C679 +
             C32126 * C1465 - C814 * C1464) *
                C817 +
            (C32161 * C377 - C812 * C361 + C32149 * C694 - C813 * C688 +
             C32126 * C1467 - C814 * C1466) *
                C32115) *
               C31854 * C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C114 +
            (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C31854 * C572 +
           ((C113 * C344 - C31836 * C354) * C114 +
            (C113 * C355 - C31836 * C374) * C102 + (C579 - C580) * C115 +
            (C581 - C582) * C103 + (C583 - C584) * C116 + (C585 - C586) * C104 +
            (C587 - C588) * C117 + (C589 - C590) * C105 + (C591 - C592) * C118 +
            (C593 - C594) * C106) *
               C31854 * C573) *
              C31799 * C468 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C31854 * C572 +
           ((C580 - C579) * C114 + (C582 - C581) * C102 + (C584 - C583) * C115 +
            (C586 - C585) * C103 + (C588 - C587) * C116 + (C590 - C589) * C104 +
            (C592 - C591) * C117 + (C594 - C593) * C105 +
            (C31836 * C575 - C113 * C574) * C118 +
            (C31836 * C577 - C113 * C576) * C106) *
               C31854 * C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C5251 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C32158 +
            (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
            (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
            C5299 * C5253 + C5300 * C32115) *
               C31854 * C572 +
           ((C5248 * C344 - C5242 * C354 + C5249 * C676 - C5243 * C681 +
             C5250 * C1108 - C32126 * C1117) *
                C5251 +
            (C5248 * C355 - C5242 * C374 + C5249 * C682 - C5243 * C691 +
             C5250 * C1118 - C32126 * C1135) *
                C32158 +
            (C5837 - C5838 + C5839 - C5840 + C5841 - C5842) * C5252 +
            (C5843 - C5844 + C5845 - C5846 + C5847 - C5848) * C32145 +
            (C5849 - C5850 + C5851 - C5852 + C5853 - C5854) * C5253 +
            (C5855 - C5856 + C5857 - C5858 + C5859 - C5860) * C32115) *
               C31854 * C573) *
              C31799 * C468 +
          (((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C5251 +
            (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C32158 +
            (C5268 - C5267 + C5270 - C5269 + C5272 - C5271) * C5252 +
            (C5274 - C5273 + C5276 - C5275 + C5278 - C5277) * C32145 +
            (C5279 - C5280 + C5281 - C5282 + C5283 - C5284) * C5253 +
            (C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C32115) *
               C31854 * C572 +
           ((C5838 - C5837 + C5840 - C5839 + C5842 - C5841) * C5251 +
            (C5844 - C5843 + C5846 - C5845 + C5848 - C5847) * C32158 +
            (C5850 - C5849 + C5852 - C5851 + C5854 - C5853) * C5252 +
            (C5856 - C5855 + C5858 - C5857 + C5860 - C5859) * C32145 +
            (C5242 * C360 - C5248 * C347 + C5243 * C687 - C5249 * C679 +
             C32126 * C1465 - C5250 * C1464) *
                C5253 +
            (C5242 * C377 - C5248 * C361 + C5243 * C694 - C5249 * C688 +
             C32126 * C1467 - C5250 * C1466) *
                C32115) *
               C31854 * C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
             C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
             C6072 * C986 - C6078 * C977) *
                C6079 +
            (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
             C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
             C6072 * C995 - C6078 * C987) *
                C31752) *
               C31854 * C572 +
           ((C6074 * C344 - C6068 * C354 + C6075 * C676 - C6069 * C681 +
             C6076 * C1108 - C6070 * C1117 + C6077 * C1638 - C6071 * C1641 +
             C6078 * C6212 - C6072 * C6215) *
                C6079 +
            (C6074 * C355 - C6068 * C374 + C6075 * C682 - C6069 * C691 +
             C6076 * C1118 - C6070 * C1135 + C6077 * C1642 - C6071 * C1647 +
             C6078 * C6216 - C6072 * C6221) *
                C31752) *
               C31854 * C573) *
              C31799 * C468 +
          (((C6074 * C120 - C6068 * C128 + C6075 * C240 - C6069 * C251 +
             C6076 * C245 - C6070 * C261 + C6077 * C975 - C6071 * C982 +
             C6078 * C978 - C6072 * C988) *
                C6079 +
            (C6074 * C129 - C6068 * C141 + C6075 * C252 - C6069 * C270 +
             C6076 * C262 - C6070 * C275 + C6077 * C983 - C6071 * C993 +
             C6078 * C989 - C6072 * C996) *
                C31752) *
               C31854 * C572 +
           ((C6068 * C356 - C6074 * C345 + C6069 * C683 - C6075 * C677 +
             C6070 * C1119 - C6076 * C1109 + C6071 * C1643 - C6077 * C1639 +
             C6072 * C6393 - C6078 * C6392) *
                C6079 +
            (C6068 * C375 - C6074 * C357 + C6069 * C692 - C6075 * C684 +
             C6070 * C1136 - C6076 * C1120 + C6071 * C1648 - C6077 * C1644 +
             C6072 * C6395 - C6078 * C6394) *
                C31752) *
               C31854 * C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C5251 +
             (C31836 * C140 - C113 * C127) * C32158 + (C148 - C149) * C5252 +
             (C150 - C151) * C32145 + C168 * C5253 + C169 * C32115) *
                C10013 +
            ((C2024 - C2025) * C5251 + (C2026 - C2027) * C32158 +
             C2375 * C5252 + C2376 * C32145 + C1764 * C5253 + C1765 * C32115) *
                C10014 +
            C10247 * C32129) *
               C572 +
           (((C2025 - C2024) * C5251 + (C2027 - C2026) * C32158 +
             C2377 * C5252 + C2378 * C32145 + C2379 * C5253 + C2380 * C32115) *
                C10013 +
            ((C2029 - C2028) * C5251 + (C2031 - C2030) * C32158 +
             C2381 * C5252 + C2382 * C32145 + C2383 * C5253 + C2384 * C32115) *
                C10014 +
            ((C2036 - C2037) * C5251 + (C2038 - C2039) * C32158 +
             (C2040 - C2041) * C5252 + (C2042 - C2043) * C32145 +
             (C2044 - C2045) * C5253 + (C2046 - C2047) * C32115) *
                C32129) *
               C573) *
              C31799 * C468 +
          ((((C149 - C148) * C5251 + (C151 - C150) * C32158 +
             (C153 - C152) * C5252 + (C155 - C154) * C32145 +
             (C157 - C156) * C5253 + (C159 - C158) * C32115) *
                C10013 +
            (C2377 * C5251 + C2378 * C32158 + C2379 * C5252 + C2380 * C32145 +
             C3901 * C5253 + C3902 * C32115) *
                C10014 +
            (C2381 * C5251 + C2382 * C32158 + C2383 * C5252 + C2384 * C32145 +
             (C1774 - C1775) * C5253 + (C1776 - C1777) * C32115) *
                C32129) *
               C572 +
           ((C2375 * C5251 + C2376 * C32158 + C1764 * C5252 + C1765 * C32145 +
             C3439 * C5253 + C3440 * C32115) *
                C10013 +
            (C2032 * C5251 + C2033 * C32158 + C1778 * C5252 + C1779 * C32145 +
             (C1775 - C1774) * C5253 + (C1777 - C1776) * C32115) *
                C10014 +
            ((C2041 - C2040) * C5251 + (C2043 - C2042) * C32158 +
             (C2045 - C2044) * C5252 + (C2047 - C2046) * C32145 +
             (C31836 * C2371 - C113 * C2370) * C5253 +
             (C31836 * C2373 - C113 * C2372) * C32115) *
                C32129) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
              C32126 * C259 - C814 * C244) *
                 C6079 +
             (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
              C32126 * C274 - C814 * C260) *
                 C31752) *
                C10013 +
            ((C11016 - C11017 + C11018 - C11019 + C11020 - C11021) * C6079 +
             (C11022 - C11023 + C11024 - C11025 + C11026 - C11027) * C31752) *
                C10014 +
            C11064 * C32129) *
               C572 +
           (((C11017 - C11016 + C11019 - C11018 + C11021 - C11020) * C6079 +
             (C11023 - C11022 + C11025 - C11024 + C11027 - C11026) * C31752) *
                C10013 +
            ((C11029 - C11028 + C11031 - C11030 + C11033 - C11032) * C6079 +
             (C11035 - C11034 + C11037 - C11036 + C11039 - C11038) * C31752) *
                C10014 +
            ((C11040 - C11041 + C11042 - C11043 + C11044 - C11045) * C6079 +
             (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C31752) *
                C32129) *
               C573) *
              C31799 * C468 +
          ((((C820 - C819 + C822 - C821 + C824 - C823) * C6079 +
             (C826 - C825 + C828 - C827 + C830 - C829) * C31752) *
                C10013 +
            ((C1469 - C1470 + C1471 - C1472 + C1473 - C1474) * C6079 +
             (C1475 - C1476 + C1477 - C1478 + C1479 - C1480) * C31752) *
                C10014 +
            ((C11357 - C11358 + C11359 - C11360 + C11361 - C11362) * C6079 +
             (C11363 - C11364 + C11365 - C11366 + C11367 - C11368) * C31752) *
                C32129) *
               C572 +
           (((C1470 - C1469 + C1472 - C1471 + C1474 - C1473) * C6079 +
             (C1476 - C1475 + C1478 - C1477 + C1480 - C1479) * C31752) *
                C10013 +
            ((C11358 - C11357 + C11360 - C11359 + C11362 - C11361) * C6079 +
             (C11364 - C11363 + C11366 - C11365 + C11368 - C11367) * C31752) *
                C10014 +
            ((C32161 * C2007 - C812 * C2000 + C32149 * C2535 - C813 * C2531 +
              C32126 * C7170 - C814 * C7169) *
                 C6079 +
             (C32161 * C2018 - C812 * C2008 + C32149 * C2540 - C813 * C2536 +
              C32126 * C7172 - C814 * C7171) *
                 C31752) *
                C32129) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C31836 * C126 - C113 * C119) * C114 +
           (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C31854 * C31813 * C235 +
          ((C113 * C239 - C31836 * C249) * C114 +
           (C113 * C250 - C31836 * C269) * C102 +
           (C113 * C240 - C31836 * C251) * C115 +
           (C113 * C252 - C31836 * C270) * C103 +
           (C113 * C241 - C31836 * C253) * C116 +
           (C113 * C254 - C31836 * C271) * C104 +
           (C113 * C242 - C31836 * C255) * C117 +
           (C113 * C256 - C31836 * C272) * C105 +
           (C113 * C243 - C31836 * C257) * C118 +
           (C113 * C258 - C31836 * C273) * C106) *
              C31854 * C31813 * C236 +
          ((C31836 * C259 - C113 * C244) * C114 +
           (C31836 * C274 - C113 * C260) * C102 +
           (C31836 * C261 - C113 * C245) * C115 +
           (C31836 * C275 - C113 * C262) * C103 +
           (C31836 * C263 - C113 * C246) * C116 +
           (C31836 * C276 - C113 * C264) * C104 +
           (C31836 * C265 - C113 * C247) * C117 +
           (C31836 * C277 - C113 * C266) * C105 +
           (C31836 * C267 - C113 * C248) * C118 +
           (C31836 * C278 - C113 * C268) * C106) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C31836 * C126 - C113 * C119) * C114 +
           (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C31854 * C31813 * C31799 * C110 +
          ((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
           (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
           (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
           (C166 - C167) * C106) *
              C31854 * C31813 * C31799 * C111 +
          (C168 * C114 + C169 * C102 + C170 * C115 + C171 * C103 + C172 * C116 +
           C173 * C104 + (C165 - C164) * C117 + (C167 - C166) * C105 +
           (C31836 * C138 - C113 * C125) * C118 +
           (C31836 * C146 - C113 * C139) * C106) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
            C32126 * C259 - C814 * C244) *
               C815 +
           (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
            C32126 * C274 - C814 * C260) *
               C809 +
           (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
           (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
           C864 * C32115) *
              C31854 * C31813 * C31799 * C110 +
          ((C820 - C819 + C822 - C821 + C824 - C823) * C815 +
           (C826 - C825 + C828 - C827 + C830 - C829) * C809 +
           (C832 - C831 + C834 - C833 + C836 - C835) * C816 +
           (C838 - C837 + C840 - C839 + C842 - C841) * C810 +
           (C843 - C844 + C845 - C846 + C847 - C848) * C817 +
           (C849 - C850 + C851 - C852 + C853 - C854) * C32115) *
              C31854 * C31813 * C31799 * C111 +
          (C863 * C815 + C864 * C809 +
           (C844 - C843 + C846 - C845 + C848 - C847) * C816 +
           (C850 - C849 + C852 - C851 + C854 - C853) * C810 +
           (C32161 * C134 - C812 * C123 + C32149 * C257 - C813 * C243 +
            C32126 * C267 - C814 * C248) *
               C817 +
           (C32161 * C144 - C812 * C135 + C32149 * C273 - C813 * C258 +
            C32126 * C278 - C814 * C268) *
               C32115) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
            C32126 * C259 - C814 * C244) *
               C815 +
           (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
            C32126 * C274 - C814 * C260) *
               C809 +
           (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
           (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
           C864 * C32115) *
              C31854 * C31813 * C235 +
          ((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
            C814 * C974 - C32126 * C980) *
               C815 +
           (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
            C814 * C981 - C32126 * C992) *
               C809 +
           (C812 * C240 - C32161 * C251 + C813 * C245 - C32149 * C261 +
            C814 * C975 - C32126 * C982) *
               C816 +
           (C812 * C252 - C32161 * C270 + C813 * C262 - C32149 * C275 +
            C814 * C983 - C32126 * C993) *
               C810 +
           (C812 * C241 - C32161 * C253 + C813 * C246 - C32149 * C263 +
            C814 * C976 - C32126 * C984) *
               C817 +
           (C812 * C254 - C32161 * C271 + C813 * C264 - C32149 * C276 +
            C814 * C985 - C32126 * C994) *
               C32115) *
              C31854 * C31813 * C236 +
          ((C32161 * C259 - C812 * C244 + C32149 * C980 - C813 * C974 +
            C32126 * C986 - C814 * C977) *
               C815 +
           (C32161 * C274 - C812 * C260 + C32149 * C992 - C813 * C981 +
            C32126 * C995 - C814 * C987) *
               C809 +
           (C32161 * C261 - C812 * C245 + C32149 * C982 - C813 * C975 +
            C32126 * C988 - C814 * C978) *
               C816 +
           (C32161 * C275 - C812 * C262 + C32149 * C993 - C813 * C983 +
            C32126 * C996 - C814 * C989) *
               C810 +
           (C32161 * C263 - C812 * C246 + C32149 * C984 - C813 * C976 +
            C32126 * C990 - C814 * C979) *
               C817 +
           (C32161 * C276 - C812 * C264 + C32149 * C994 - C813 * C985 +
            C32126 * C997 - C814 * C991) *
               C32115) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
            C32126 * C259 - C5250 * C244) *
               C5251 +
           (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
            C32126 * C274 - C5250 * C260) *
               C32158 +
           (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
           (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
           C5299 * C5253 + C5300 * C32115) *
              C31854 * C31813 * C31799 * C110 +
          ((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C5251 +
           (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C32158 +
           (C5268 - C5267 + C5270 - C5269 + C5272 - C5271) * C5252 +
           (C5274 - C5273 + C5276 - C5275 + C5278 - C5277) * C32145 +
           (C5279 - C5280 + C5281 - C5282 + C5283 - C5284) * C5253 +
           (C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C32115) *
              C31854 * C31813 * C31799 * C111 +
          (C5299 * C5251 + C5300 * C32158 +
           (C5280 - C5279 + C5282 - C5281 + C5284 - C5283) * C5252 +
           (C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C32145 +
           (C5242 * C134 - C5248 * C123 + C5243 * C257 - C5249 * C243 +
            C32126 * C267 - C5250 * C248) *
               C5253 +
           (C5242 * C144 - C5248 * C135 + C5243 * C273 - C5249 * C258 +
            C32126 * C278 - C5250 * C268) *
               C32115) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
            C32126 * C259 - C5250 * C244) *
               C5251 +
           (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
            C32126 * C274 - C5250 * C260) *
               C32158 +
           (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
           (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
           C5299 * C5253 + C5300 * C32115) *
              C31854 * C31813 * C235 +
          ((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
            C5250 * C974 - C32126 * C980) *
               C5251 +
           (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
            C5250 * C981 - C32126 * C992) *
               C32158 +
           (C5248 * C240 - C5242 * C251 + C5249 * C245 - C5243 * C261 +
            C5250 * C975 - C32126 * C982) *
               C5252 +
           (C5248 * C252 - C5242 * C270 + C5249 * C262 - C5243 * C275 +
            C5250 * C983 - C32126 * C993) *
               C32145 +
           (C5248 * C241 - C5242 * C253 + C5249 * C246 - C5243 * C263 +
            C5250 * C976 - C32126 * C984) *
               C5253 +
           (C5248 * C254 - C5242 * C271 + C5249 * C264 - C5243 * C276 +
            C5250 * C985 - C32126 * C994) *
               C32115) *
              C31854 * C31813 * C236 +
          ((C5242 * C259 - C5248 * C244 + C5243 * C980 - C5249 * C974 +
            C32126 * C986 - C5250 * C977) *
               C5251 +
           (C5242 * C274 - C5248 * C260 + C5243 * C992 - C5249 * C981 +
            C32126 * C995 - C5250 * C987) *
               C32158 +
           (C5242 * C261 - C5248 * C245 + C5243 * C982 - C5249 * C975 +
            C32126 * C988 - C5250 * C978) *
               C5252 +
           (C5242 * C275 - C5248 * C262 + C5243 * C993 - C5249 * C983 +
            C32126 * C996 - C5250 * C989) *
               C32145 +
           (C5242 * C263 - C5248 * C246 + C5243 * C984 - C5249 * C976 +
            C32126 * C990 - C5250 * C979) *
               C5253 +
           (C5242 * C276 - C5248 * C264 + C5243 * C994 - C5249 * C985 +
            C32126 * C997 - C5250 * C991) *
               C32115) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
            C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
            C6072 * C986 - C6078 * C977) *
               C6079 +
           (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
            C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
            C6072 * C995 - C6078 * C987) *
               C31752) *
              C31854 * C31813 * C31799 * C110 +
          ((C6074 * C120 - C6068 * C128 + C6075 * C240 - C6069 * C251 +
            C6076 * C245 - C6070 * C261 + C6077 * C975 - C6071 * C982 +
            C6078 * C978 - C6072 * C988) *
               C6079 +
           (C6074 * C129 - C6068 * C141 + C6075 * C252 - C6069 * C270 +
            C6076 * C262 - C6070 * C275 + C6077 * C983 - C6071 * C993 +
            C6078 * C989 - C6072 * C996) *
               C31752) *
              C31854 * C31813 * C31799 * C111 +
          ((C6068 * C130 - C6074 * C121 + C6069 * C253 - C6075 * C241 +
            C6070 * C263 - C6076 * C246 + C6071 * C984 - C6077 * C976 +
            C6072 * C990 - C6078 * C979) *
               C6079 +
           (C6068 * C142 - C6074 * C131 + C6069 * C271 - C6075 * C254 +
            C6070 * C276 - C6076 * C264 + C6071 * C994 - C6077 * C985 +
            C6072 * C997 - C6078 * C991) *
               C31752) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
            C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
            C6072 * C986 - C6078 * C977) *
               C6079 +
           (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
            C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
            C6072 * C995 - C6078 * C987) *
               C31752) *
              C31854 * C31813 * C235 +
          ((C6074 * C239 - C6068 * C249 + C6075 * C244 - C6069 * C259 +
            C6076 * C974 - C6070 * C980 + C6077 * C977 - C6071 * C986 +
            C6078 * C6142 - C6072 * C6144) *
               C6079 +
           (C6074 * C250 - C6068 * C269 + C6075 * C260 - C6069 * C274 +
            C6076 * C981 - C6070 * C992 + C6077 * C987 - C6071 * C995 +
            C6078 * C6145 - C6072 * C6148) *
               C31752) *
              C31854 * C31813 * C236 +
          ((C6068 * C259 - C6074 * C244 + C6069 * C980 - C6075 * C974 +
            C6070 * C986 - C6076 * C977 + C6071 * C6144 - C6077 * C6142 +
            C6072 * C6146 - C6078 * C6143) *
               C6079 +
           (C6068 * C274 - C6074 * C260 + C6069 * C992 - C6075 * C981 +
            C6070 * C995 - C6076 * C987 + C6071 * C6148 - C6077 * C6145 +
            C6072 * C6149 - C6078 * C6147) *
               C31752) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C5251 +
            (C31836 * C140 - C113 * C127) * C32158 + (C148 - C149) * C5252 +
            (C150 - C151) * C32145 + C168 * C5253 + C169 * C32115) *
               C10013 +
           ((C2024 - C2025) * C5251 + (C2026 - C2027) * C32158 + C2375 * C5252 +
            C2376 * C32145 + C1764 * C5253 + C1765 * C32115) *
               C10014 +
           (C2048 * C5251 + C2049 * C32158 + C2032 * C5252 + C2033 * C32145 +
            C1778 * C5253 + C1779 * C32115) *
               C32129) *
              C31813 * C31799 * C110 +
          (((C149 - C148) * C5251 + (C151 - C150) * C32158 +
            (C153 - C152) * C5252 + (C155 - C154) * C32145 +
            (C157 - C156) * C5253 + (C159 - C158) * C32115) *
               C10013 +
           (C2377 * C5251 + C2378 * C32158 + C2379 * C5252 + C2380 * C32145 +
            C3901 * C5253 + C3902 * C32115) *
               C10014 +
           (C2381 * C5251 + C2382 * C32158 + C2383 * C5252 + C2384 * C32145 +
            (C1774 - C1775) * C5253 + (C1776 - C1777) * C32115) *
               C32129) *
              C31813 * C31799 * C111 +
          ((C168 * C5251 + C169 * C32158 + C170 * C5252 + C171 * C32145 +
            C172 * C5253 + C173 * C32115) *
               C10013 +
           (C1764 * C5251 + C1765 * C32158 + C3439 * C5252 + C3440 * C32145 +
            (C592 - C591) * C5253 + (C594 - C593) * C32115) *
               C10014 +
           (C1778 * C5251 + C1779 * C32158 + (C1775 - C1774) * C5252 +
            (C1777 - C1776) * C32145 + (C31836 * C372 - C113 * C353) * C5253 +
            (C31836 * C383 - C113 * C373) * C32115) *
               C32129) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C5251 +
            (C31836 * C140 - C113 * C127) * C32158 + (C148 - C149) * C5252 +
            (C150 - C151) * C32145 + C168 * C5253 + C169 * C32115) *
               C10013 +
           ((C2024 - C2025) * C5251 + (C2026 - C2027) * C32158 + C2375 * C5252 +
            C2376 * C32145 + C1764 * C5253 + C1765 * C32115) *
               C10014 +
           (C2048 * C5251 + C2049 * C32158 + C2032 * C5252 + C2033 * C32145 +
            C1778 * C5253 + C1779 * C32115) *
               C32129) *
              C31813 * C235 +
          (((C113 * C239 - C31836 * C249) * C5251 +
            (C113 * C250 - C31836 * C269) * C32158 + (C475 - C476) * C5252 +
            (C477 - C478) * C32145 + (C479 - C480) * C5253 +
            (C481 - C482) * C32115) *
               C10013 +
           ((C2543 - C2544) * C5251 + (C2545 - C2546) * C32158 +
            (C2209 - C2210) * C5252 + (C2211 - C2212) * C32145 +
            (C2213 - C2214) * C5253 + (C2215 - C2216) * C32115) *
               C10014 +
           ((C2547 - C2548) * C5251 + (C2549 - C2550) * C32158 +
            (C2217 - C2218) * C5252 + (C2219 - C2220) * C32145 +
            (C2221 - C2222) * C5253 + (C2223 - C2224) * C32115) *
               C32129) *
              C31813 * C236 +
          (((C31836 * C259 - C113 * C244) * C5251 +
            (C31836 * C274 - C113 * C260) * C32158 +
            (C31836 * C261 - C113 * C245) * C5252 +
            (C31836 * C275 - C113 * C262) * C32145 +
            (C31836 * C263 - C113 * C246) * C5253 +
            (C31836 * C276 - C113 * C264) * C32115) *
               C10013 +
           ((C31836 * C1117 - C113 * C1108) * C5251 +
            (C31836 * C1135 - C113 * C1118) * C32158 +
            (C31836 * C1119 - C113 * C1109) * C5252 +
            (C31836 * C1136 - C113 * C1120) * C32145 +
            (C31836 * C1121 - C113 * C1110) * C5253 +
            (C31836 * C1137 - C113 * C1122) * C32115) *
               C10014 +
           ((C31836 * C1124 - C113 * C1112) * C5251 +
            (C31836 * C1139 - C113 * C1126) * C32158 +
            (C31836 * C1128 - C113 * C1114) * C5252 +
            (C31836 * C1141 - C113 * C1130) * C32145 +
            (C31836 * C1132 - C113 * C1116) * C5253 +
            (C31836 * C1143 - C113 * C1134) * C32115) *
               C32129) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C6079 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C31752) *
               C10013 +
           ((C32161 * C354 - C812 * C344 + C32149 * C681 - C813 * C676 +
             C32126 * C1117 - C814 * C1108) *
                C6079 +
            (C32161 * C374 - C812 * C355 + C32149 * C691 - C813 * C682 +
             C32126 * C1135 - C814 * C1118) *
                C31752) *
               C10014 +
           ((C32161 * C364 - C812 * C349 + C32149 * C1123 - C813 * C1111 +
             C32126 * C1124 - C814 * C1112) *
                C6079 +
            (C32161 * C379 - C812 * C365 + C32149 * C1138 - C813 * C1125 +
             C32126 * C1139 - C814 * C1126) *
                C31752) *
               C32129) *
              C31813 * C31799 * C110 +
          (((C820 - C819 + C822 - C821 + C824 - C823) * C6079 +
            (C826 - C825 + C828 - C827 + C830 - C829) * C31752) *
               C10013 +
           ((C1469 - C1470 + C1471 - C1472 + C1473 - C1474) * C6079 +
            (C1475 - C1476 + C1477 - C1478 + C1479 - C1480) * C31752) *
               C10014 +
           ((C812 * C350 - C32161 * C366 + C813 * C1113 - C32149 * C1127 +
             C814 * C1114 - C32126 * C1128) *
                C6079 +
            (C812 * C367 - C32161 * C380 + C813 * C1129 - C32149 * C1140 +
             C814 * C1130 - C32126 * C1141) *
                C31752) *
               C32129) *
              C31813 * C31799 * C111 +
          ((C863 * C6079 + C864 * C31752) * C10013 +
           ((C1482 - C1481 + C1484 - C1483 + C1486 - C1485) * C6079 +
            (C1488 - C1487 + C1490 - C1489 + C1492 - C1491) * C31752) *
               C10014 +
           ((C32161 * C368 - C812 * C351 + C32149 * C1131 - C813 * C1115 +
             C32126 * C1132 - C814 * C1116) *
                C6079 +
            (C32161 * C381 - C812 * C369 + C32149 * C1142 - C813 * C1133 +
             C32126 * C1143 - C814 * C1134) *
                C31752) *
               C32129) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C6079 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C31752) *
               C10013 +
           ((C32161 * C354 - C812 * C344 + C32149 * C681 - C813 * C676 +
             C32126 * C1117 - C814 * C1108) *
                C6079 +
            (C32161 * C374 - C812 * C355 + C32149 * C691 - C813 * C682 +
             C32126 * C1135 - C814 * C1118) *
                C31752) *
               C10014 +
           ((C32161 * C364 - C812 * C349 + C32149 * C1123 - C813 * C1111 +
             C32126 * C1124 - C814 * C1112) *
                C6079 +
            (C32161 * C379 - C812 * C365 + C32149 * C1138 - C813 * C1125 +
             C32126 * C1139 - C814 * C1126) *
                C31752) *
               C32129) *
              C31813 * C235 +
          (((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
             C814 * C974 - C32126 * C980) *
                C6079 +
            (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
             C814 * C981 - C32126 * C992) *
                C31752) *
               C10013 +
           ((C812 * C676 - C32161 * C681 + C813 * C1108 - C32149 * C1117 +
             C814 * C1638 - C32126 * C1641) *
                C6079 +
            (C812 * C682 - C32161 * C691 + C813 * C1118 - C32149 * C1135 +
             C814 * C1642 - C32126 * C1647) *
                C31752) *
               C10014 +
           ((C812 * C1111 - C32161 * C1123 + C813 * C1112 - C32149 * C1124 +
             C814 * C6213 - C32126 * C6217) *
                C6079 +
            (C812 * C1125 - C32161 * C1138 + C813 * C1126 - C32149 * C1139 +
             C814 * C6219 - C32126 * C6222) *
                C31752) *
               C32129) *
              C31813 * C236 +
          (((C32161 * C259 - C812 * C244 + C32149 * C980 - C813 * C974 +
             C32126 * C986 - C814 * C977) *
                C6079 +
            (C32161 * C274 - C812 * C260 + C32149 * C992 - C813 * C981 +
             C32126 * C995 - C814 * C987) *
                C31752) *
               C10013 +
           ((C32161 * C1117 - C812 * C1108 + C32149 * C1641 - C813 * C1638 +
             C32126 * C6215 - C814 * C6212) *
                C6079 +
            (C32161 * C1135 - C812 * C1118 + C32149 * C1647 - C813 * C1642 +
             C32126 * C6221 - C814 * C6216) *
                C31752) *
               C10014 +
           ((C32161 * C1124 - C812 * C1112 + C32149 * C6217 - C813 * C6213 +
             C32126 * C6218 - C814 * C6214) *
                C6079 +
            (C32161 * C1139 - C812 * C1126 + C32149 * C6222 - C813 * C6219 +
             C32126 * C6223 - C814 * C6220) *
                C31752) *
               C32129) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                 C30885 +
             (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                 C31757 +
             (C2661 - C2662 + C2663 - C2664) * C30881 +
             (C2665 - C2666 + C2667 - C2668) * C31765 + C2701 * C30891 +
             C2702 * C17327) *
                C20324 +
            ((C4477 - C4478 + C4479 - C4480) * C30885 +
             (C4481 - C4482 + C4483 - C4484) * C31757 + C4925 * C30881 +
             C4926 * C31765 + C4183 * C30891 + C4184 * C17327) *
                C31941) *
               C31813 * C466 +
           (((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                 C30885 +
             (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                 C31757 +
             (C3031 - C3032 + C3033 - C3034) * C30881 +
             (C3035 - C3036 + C3037 - C3038) * C31765 +
             (C3039 - C3040 + C3041 - C3042) * C30891 +
             (C3043 - C3044 + C3045 - C3046) * C17327) *
                C20324 +
            ((C5125 - C5126 + C5127 - C5128) * C30885 +
             (C5129 - C5130 + C5131 - C5132) * C31757 +
             (C4703 - C4704 + C4705 - C4706) * C30881 +
             (C4707 - C4708 + C4709 - C4710) * C31765 +
             (C4711 - C4712 + C4713 - C4714) * C30891 +
             (C4715 - C4716 + C4717 - C4718) * C17327) *
                C31941) *
               C31813 * C467) *
              C468 +
          ((((C2662 - C2661 + C2664 - C2663) * C30885 +
             (C2666 - C2665 + C2668 - C2667) * C31757 +
             (C2670 - C2669 + C2672 - C2671) * C30881 +
             (C2674 - C2673 + C2676 - C2675) * C31765 +
             (C2678 - C2677 + C2680 - C2679) * C30891 +
             (C2682 - C2681 + C2684 - C2683) * C17327) *
                C20324 +
            (C4927 * C30885 + C4928 * C31757 + C4929 * C30881 + C4930 * C31765 +
             (C3201 - C3202 + C3203 - C3204) * C30891 +
             (C3205 - C3206 + C3207 - C3208) * C17327) *
                C31941) *
               C31813 * C466 +
           (((C3032 - C3031 + C3034 - C3033) * C30885 +
             (C3036 - C3035 + C3038 - C3037) * C31757 +
             (C3040 - C3039 + C3042 - C3041) * C30881 +
             (C3044 - C3043 + C3046 - C3045) * C31765 +
             (C3048 - C3047 + C3050 - C3049) * C30891 +
             (C3052 - C3051 + C3054 - C3053) * C17327) *
                C20324 +
            ((C4704 - C4703 + C4706 - C4705) * C30885 +
             (C4708 - C4707 + C4710 - C4709) * C31757 +
             (C4712 - C4711 + C4714 - C4713) * C30881 +
             (C4716 - C4715 + C4718 - C4717) * C31765 +
             (C32095 * C687 - C2654 * C679 + C31899 * C1465 - C2655 * C1464) *
                 C30891 +
             (C32095 * C694 - C2654 * C688 + C31899 * C1467 - C2655 * C1466) *
                 C17327) *
                C31941) *
               C31813 * C467) *
              C469)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                 C30885 +
             (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                 C31757 +
             (C2661 - C2662 + C2663 - C2664) * C30881 +
             (C2665 - C2666 + C2667 - C2668) * C31765 + C2701 * C30891 +
             C2702 * C17327) *
                C20324 +
            ((C4477 - C4478 + C4479 - C4480) * C30885 +
             (C4481 - C4482 + C4483 - C4484) * C31757 + C4925 * C30881 +
             C4926 * C31765 + C4183 * C30891 + C4184 * C17327) *
                C31941) *
               C572 +
           (((C4478 - C4477 + C4480 - C4479) * C30885 +
             (C4482 - C4481 + C4484 - C4483) * C31757 + C4927 * C30881 +
             C4928 * C31765 + C4929 * C30891 + C4930 * C17327) *
                C20324 +
            ((C4485 - C4486 + C4487 - C4488) * C30885 +
             (C4489 - C4490 + C4491 - C4492) * C31757 + C12902 * C30881 +
             C12903 * C31765 + (C4501 - C4502 + C4503 - C4504) * C30891 +
             (C4505 - C4506 + C4507 - C4508) * C17327) *
                C31941) *
               C573) *
              C466 +
          ((((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                 C30885 +
             (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                 C31757 +
             (C3031 - C3032 + C3033 - C3034) * C30881 +
             (C3035 - C3036 + C3037 - C3038) * C31765 +
             (C3039 - C3040 + C3041 - C3042) * C30891 +
             (C3043 - C3044 + C3045 - C3046) * C17327) *
                C20324 +
            ((C5125 - C5126 + C5127 - C5128) * C30885 +
             (C5129 - C5130 + C5131 - C5132) * C31757 +
             (C4703 - C4704 + C4705 - C4706) * C30881 +
             (C4707 - C4708 + C4709 - C4710) * C31765 +
             (C4711 - C4712 + C4713 - C4714) * C30891 +
             (C4715 - C4716 + C4717 - C4718) * C17327) *
                C31941) *
               C572 +
           (((C5126 - C5125 + C5128 - C5127) * C30885 +
             (C5130 - C5129 + C5132 - C5131) * C31757 +
             (C4704 - C4703 + C4706 - C4705) * C30881 +
             (C4708 - C4707 + C4710 - C4709) * C31765 +
             (C4712 - C4711 + C4714 - C4713) * C30891 +
             (C4716 - C4715 + C4718 - C4717) * C17327) *
                C20324 +
            ((C13099 - C13098 + C13101 - C13100) * C30885 +
             (C13103 - C13102 + C13105 - C13104) * C31757 +
             (C12697 - C12696 + C12699 - C12698) * C30881 +
             (C12701 - C12700 + C12703 - C12702) * C31765 +
             (C32095 * C1131 - C2654 * C1115 + C31899 * C1132 - C2655 * C1116) *
                 C30891 +
             (C32095 * C1142 - C2654 * C1133 + C31899 * C1143 - C2655 * C1134) *
                 C17327) *
                C31941) *
               C573) *
              C467) *
         C31787) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C30885 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C31757 +
            (C2661 - C2662 + C2663 - C2664) * C30881 +
            (C2665 - C2666 + C2667 - C2668) * C31765 + C2701 * C30891 +
            C2702 * C17327) *
               C20324 +
           ((C4477 - C4478 + C4479 - C4480) * C30885 +
            (C4481 - C4482 + C4483 - C4484) * C31757 + C4925 * C30881 +
            C4926 * C31765 + C4183 * C30891 + C4184 * C17327) *
               C31941) *
              C31813 * C235 +
          (((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                C30885 +
            (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                C31757 +
            (C3031 - C3032 + C3033 - C3034) * C30881 +
            (C3035 - C3036 + C3037 - C3038) * C31765 +
            (C3039 - C3040 + C3041 - C3042) * C30891 +
            (C3043 - C3044 + C3045 - C3046) * C17327) *
               C20324 +
           ((C5125 - C5126 + C5127 - C5128) * C30885 +
            (C5129 - C5130 + C5131 - C5132) * C31757 +
            (C4703 - C4704 + C4705 - C4706) * C30881 +
            (C4707 - C4708 + C4709 - C4710) * C31765 +
            (C4711 - C4712 + C4713 - C4714) * C30891 +
            (C4715 - C4716 + C4717 - C4718) * C17327) *
               C31941) *
              C31813 * C236 +
          (((C32095 * C259 - C2654 * C244 + C31899 * C980 - C2655 * C974) *
                C30885 +
            (C32095 * C274 - C2654 * C260 + C31899 * C992 - C2655 * C981) *
                C31757 +
            (C32095 * C261 - C2654 * C245 + C31899 * C982 - C2655 * C975) *
                C30881 +
            (C32095 * C275 - C2654 * C262 + C31899 * C993 - C2655 * C983) *
                C31765 +
            (C32095 * C263 - C2654 * C246 + C31899 * C984 - C2655 * C976) *
                C30891 +
            (C32095 * C276 - C2654 * C264 + C31899 * C994 - C2655 * C985) *
                C17327) *
               C20324 +
           ((C32095 * C1117 - C2654 * C1108 + C31899 * C1641 - C2655 * C1638) *
                C30885 +
            (C32095 * C1135 - C2654 * C1118 + C31899 * C1647 - C2655 * C1642) *
                C31757 +
            (C32095 * C1119 - C2654 * C1109 + C31899 * C1643 - C2655 * C1639) *
                C30881 +
            (C32095 * C1136 - C2654 * C1120 + C31899 * C1648 - C2655 * C1644) *
                C31765 +
            (C32095 * C1121 - C2654 * C1110 + C31899 * C1645 - C2655 * C1640) *
                C30891 +
            (C32095 * C1137 - C2654 * C1122 + C31899 * C1649 - C2655 * C1646) *
                C17327) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C30885 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C31757 +
            (C2661 - C2662 + C2663 - C2664) * C30881 +
            (C2665 - C2666 + C2667 - C2668) * C31765 + C2701 * C30891 +
            C2702 * C17327) *
               C20324 +
           ((C4477 - C4478 + C4479 - C4480) * C30885 +
            (C4481 - C4482 + C4483 - C4484) * C31757 + C4925 * C30881 +
            C4926 * C31765 + C4183 * C30891 + C4184 * C17327) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C2662 - C2661 + C2664 - C2663) * C30885 +
            (C2666 - C2665 + C2668 - C2667) * C31757 +
            (C2670 - C2669 + C2672 - C2671) * C30881 +
            (C2674 - C2673 + C2676 - C2675) * C31765 +
            (C2678 - C2677 + C2680 - C2679) * C30891 +
            (C2682 - C2681 + C2684 - C2683) * C17327) *
               C20324 +
           (C4927 * C30885 + C4928 * C31757 + C4929 * C30881 + C4930 * C31765 +
            (C3201 - C3202 + C3203 - C3204) * C30891 +
            (C3205 - C3206 + C3207 - C3208) * C17327) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C2701 * C30885 + C2702 * C31757 + C2703 * C30881 + C2704 * C31765 +
            (C2686 - C2685 + C2688 - C2687) * C30891 +
            (C2690 - C2689 + C2692 - C2691) * C17327) *
               C20324 +
           (C4183 * C30885 + C4184 * C31757 +
            (C3202 - C3201 + C3204 - C3203) * C30881 +
            (C3206 - C3205 + C3208 - C3207) * C31765 +
            (C32095 * C362 - C2654 * C348 + C31899 * C689 - C2655 * C680) *
                C30891 +
            (C32095 * C378 - C2654 * C363 + C31899 * C695 - C2655 * C690) *
                C17327) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C30885 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C31757 +
            (C2661 - C2662 + C2663 - C2664) * C30881 +
            (C2665 - C2666 + C2667 - C2668) * C31765 + C2701 * C30891 +
            C2702 * C17327) *
               C20324 +
           ((C4477 - C4478 + C4479 - C4480) * C30885 +
            (C4481 - C4482 + C4483 - C4484) * C31757 + C4925 * C30881 +
            C4926 * C31765 + C4183 * C30891 + C4184 * C17327) *
               C31941) *
              C341 +
          (((C4478 - C4477 + C4480 - C4479) * C30885 +
            (C4482 - C4481 + C4484 - C4483) * C31757 + C4927 * C30881 +
            C4928 * C31765 + C4929 * C30891 + C4930 * C17327) *
               C20324 +
           ((C4485 - C4486 + C4487 - C4488) * C30885 +
            (C4489 - C4490 + C4491 - C4492) * C31757 + C12902 * C30881 +
            C12903 * C31765 + (C4501 - C4502 + C4503 - C4504) * C30891 +
            (C4505 - C4506 + C4507 - C4508) * C17327) *
               C31941) *
              C342 +
          ((C12491 * C30885 + C12492 * C31757 + C12493 * C30881 +
            C12494 * C31765 + (C4502 - C4501 + C4504 - C4503) * C30891 +
            (C4506 - C4505 + C4508 - C4507) * C17327) *
               C20324 +
           (C14125 * C30885 + C14126 * C31757 +
            (C12484 - C12483 + C12486 - C12485) * C30881 +
            (C12488 - C12487 + C12490 - C12489) * C31765 +
            (C32095 * C2009 - C2654 * C2001 + C31899 * C2537 - C2655 * C2532) *
                C30891 +
            (C32095 * C2019 - C2654 * C2010 + C31899 * C2541 - C2655 * C2538) *
                C17327) *
               C31941) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                 C30885 +
             (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                 C31757 +
             (C2661 - C2662 + C2663 - C2664) * C30881 +
             (C2665 - C2666 + C2667 - C2668) * C31765 + C2701 * C30891 +
             C2702 * C17327) *
                C20324 +
            ((C4477 - C4478 + C4479 - C4480) * C30885 +
             (C4481 - C4482 + C4483 - C4484) * C31757 + C4925 * C30881 +
             C4926 * C31765 + C4183 * C30891 + C4184 * C17327) *
                C31941) *
               C572 +
           (((C4478 - C4477 + C4480 - C4479) * C30885 +
             (C4482 - C4481 + C4484 - C4483) * C31757 + C4927 * C30881 +
             C4928 * C31765 + C4929 * C30891 + C4930 * C17327) *
                C20324 +
            ((C4485 - C4486 + C4487 - C4488) * C30885 +
             (C4489 - C4490 + C4491 - C4492) * C31757 + C12902 * C30881 +
             C12903 * C31765 + (C4501 - C4502 + C4503 - C4504) * C30891 +
             (C4505 - C4506 + C4507 - C4508) * C17327) *
                C31941) *
               C573) *
              C31799 * C468 +
          ((((C2662 - C2661 + C2664 - C2663) * C30885 +
             (C2666 - C2665 + C2668 - C2667) * C31757 +
             (C2670 - C2669 + C2672 - C2671) * C30881 +
             (C2674 - C2673 + C2676 - C2675) * C31765 +
             (C2678 - C2677 + C2680 - C2679) * C30891 +
             (C2682 - C2681 + C2684 - C2683) * C17327) *
                C20324 +
            (C4927 * C30885 + C4928 * C31757 + C4929 * C30881 + C4930 * C31765 +
             (C3201 - C3202 + C3203 - C3204) * C30891 +
             (C3205 - C3206 + C3207 - C3208) * C17327) *
                C31941) *
               C572 +
           ((C4925 * C30885 + C4926 * C31757 + C4183 * C30881 + C4184 * C31765 +
             (C3202 - C3201 + C3204 - C3203) * C30891 +
             (C3206 - C3205 + C3208 - C3207) * C17327) *
                C20324 +
            (C12493 * C30885 + C12494 * C31757 +
             (C4502 - C4501 + C4504 - C4503) * C30881 +
             (C4506 - C4505 + C4508 - C4507) * C31765 +
             (C32095 * C370 - C2654 * C352 + C31899 * C2205 - C2655 * C2204) *
                 C30891 +
             (C32095 * C382 - C2654 * C371 + C31899 * C2207 - C2655 * C2206) *
                 C17327) *
                C31941) *
               C573) *
              C31799 * C469)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C30885 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C31757 +
            (C2661 - C2662 + C2663 - C2664) * C30881 +
            (C2665 - C2666 + C2667 - C2668) * C31765 + C2701 * C30891 +
            C2702 * C17327) *
               C20324 +
           ((C4477 - C4478 + C4479 - C4480) * C30885 +
            (C4481 - C4482 + C4483 - C4484) * C31757 + C4925 * C30881 +
            C4926 * C31765 + C4183 * C30891 + C4184 * C17327) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C2662 - C2661 + C2664 - C2663) * C30885 +
            (C2666 - C2665 + C2668 - C2667) * C31757 +
            (C2670 - C2669 + C2672 - C2671) * C30881 +
            (C2674 - C2673 + C2676 - C2675) * C31765 +
            (C2678 - C2677 + C2680 - C2679) * C30891 +
            (C2682 - C2681 + C2684 - C2683) * C17327) *
               C20324 +
           (C4927 * C30885 + C4928 * C31757 + C4929 * C30881 + C4930 * C31765 +
            (C3201 - C3202 + C3203 - C3204) * C30891 +
            (C3205 - C3206 + C3207 - C3208) * C17327) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C2701 * C30885 + C2702 * C31757 + C2703 * C30881 + C2704 * C31765 +
            (C2686 - C2685 + C2688 - C2687) * C30891 +
            (C2690 - C2689 + C2692 - C2691) * C17327) *
               C20324 +
           (C4183 * C30885 + C4184 * C31757 +
            (C3202 - C3201 + C3204 - C3203) * C30881 +
            (C3206 - C3205 + C3208 - C3207) * C31765 +
            (C32095 * C362 - C2654 * C348 + C31899 * C689 - C2655 * C680) *
                C30891 +
            (C32095 * C378 - C2654 * C363 + C31899 * C695 - C2655 * C690) *
                C17327) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C30885 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C31757 +
            (C2661 - C2662 + C2663 - C2664) * C30881 +
            (C2665 - C2666 + C2667 - C2668) * C31765 + C2701 * C30891 +
            C2702 * C17327) *
               C20324 +
           ((C4477 - C4478 + C4479 - C4480) * C30885 +
            (C4481 - C4482 + C4483 - C4484) * C31757 + C4925 * C30881 +
            C4926 * C31765 + C4183 * C30891 + C4184 * C17327) *
               C31941) *
              C31813 * C235 +
          (((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                C30885 +
            (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                C31757 +
            (C3031 - C3032 + C3033 - C3034) * C30881 +
            (C3035 - C3036 + C3037 - C3038) * C31765 +
            (C3039 - C3040 + C3041 - C3042) * C30891 +
            (C3043 - C3044 + C3045 - C3046) * C17327) *
               C20324 +
           ((C5125 - C5126 + C5127 - C5128) * C30885 +
            (C5129 - C5130 + C5131 - C5132) * C31757 +
            (C4703 - C4704 + C4705 - C4706) * C30881 +
            (C4707 - C4708 + C4709 - C4710) * C31765 +
            (C4711 - C4712 + C4713 - C4714) * C30891 +
            (C4715 - C4716 + C4717 - C4718) * C17327) *
               C31941) *
              C31813 * C236 +
          (((C32095 * C259 - C2654 * C244 + C31899 * C980 - C2655 * C974) *
                C30885 +
            (C32095 * C274 - C2654 * C260 + C31899 * C992 - C2655 * C981) *
                C31757 +
            (C32095 * C261 - C2654 * C245 + C31899 * C982 - C2655 * C975) *
                C30881 +
            (C32095 * C275 - C2654 * C262 + C31899 * C993 - C2655 * C983) *
                C31765 +
            (C32095 * C263 - C2654 * C246 + C31899 * C984 - C2655 * C976) *
                C30891 +
            (C32095 * C276 - C2654 * C264 + C31899 * C994 - C2655 * C985) *
                C17327) *
               C20324 +
           ((C32095 * C1117 - C2654 * C1108 + C31899 * C1641 - C2655 * C1638) *
                C30885 +
            (C32095 * C1135 - C2654 * C1118 + C31899 * C1647 - C2655 * C1642) *
                C31757 +
            (C32095 * C1119 - C2654 * C1109 + C31899 * C1643 - C2655 * C1639) *
                C30881 +
            (C32095 * C1136 - C2654 * C1120 + C31899 * C1648 - C2655 * C1644) *
                C31765 +
            (C32095 * C1121 - C2654 * C1110 + C31899 * C1645 - C2655 * C1640) *
                C30891 +
            (C32095 * C1137 - C2654 * C1122 + C31899 * C1649 - C2655 * C1646) *
                C17327) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                 C15423 +
             (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                 C15417 +
             (C2661 - C2662 + C2663 - C2664) * C15424 +
             (C2665 - C2666 + C2667 - C2668) * C31762) *
                C31937 +
            ((C4477 - C4478 + C4479 - C4480) * C15423 +
             (C4481 - C4482 + C4483 - C4484) * C15417 + C4925 * C15424 +
             C4926 * C31762) *
                C31944 +
            C24913 * C23798) *
               C31813 * C466 +
           (((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                 C15423 +
             (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                 C15417 +
             (C3031 - C3032 + C3033 - C3034) * C15424 +
             (C3035 - C3036 + C3037 - C3038) * C31762) *
                C31937 +
            ((C5125 - C5126 + C5127 - C5128) * C15423 +
             (C5129 - C5130 + C5131 - C5132) * C15417 +
             (C4703 - C4704 + C4705 - C4706) * C15424 +
             (C4707 - C4708 + C4709 - C4710) * C31762) *
                C31944 +
            ((C13098 - C13099 + C13100 - C13101) * C15423 +
             (C13102 - C13103 + C13104 - C13105) * C15417 +
             (C12696 - C12697 + C12698 - C12699) * C15424 +
             (C12700 - C12701 + C12702 - C12703) * C31762) *
                C23798) *
               C31813 * C467) *
              C468 +
          ((((C2662 - C2661 + C2664 - C2663) * C15423 +
             (C2666 - C2665 + C2668 - C2667) * C15417 +
             (C2670 - C2669 + C2672 - C2671) * C15424 +
             (C2674 - C2673 + C2676 - C2675) * C31762) *
                C31937 +
            (C4927 * C15423 + C4928 * C15417 + C4929 * C15424 +
             C4930 * C31762) *
                C31944 +
            (C12902 * C15423 + C12903 * C15417 +
             (C4501 - C4502 + C4503 - C4504) * C15424 +
             (C4505 - C4506 + C4507 - C4508) * C31762) *
                C23798) *
               C31813 * C466 +
           (((C3032 - C3031 + C3034 - C3033) * C15423 +
             (C3036 - C3035 + C3038 - C3037) * C15417 +
             (C3040 - C3039 + C3042 - C3041) * C15424 +
             (C3044 - C3043 + C3046 - C3045) * C31762) *
                C31937 +
            ((C4704 - C4703 + C4706 - C4705) * C15423 +
             (C4708 - C4707 + C4710 - C4709) * C15417 +
             (C4712 - C4711 + C4714 - C4713) * C15424 +
             (C4716 - C4715 + C4718 - C4717) * C31762) *
                C31944 +
            ((C12697 - C12696 + C12699 - C12698) * C15423 +
             (C12701 - C12700 + C12703 - C12702) * C15417 +
             (C32095 * C1131 - C2654 * C1115 + C31899 * C1132 - C2655 * C1116) *
                 C15424 +
             (C32095 * C1142 - C2654 * C1133 + C31899 * C1143 - C2655 * C1134) *
                 C31762) *
                C23798) *
               C31813 * C467) *
              C469)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                 C15423 +
             (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                 C15417 +
             (C2661 - C2662 + C2663 - C2664) * C15424 +
             (C2665 - C2666 + C2667 - C2668) * C31762) *
                C31937 +
            ((C4477 - C4478 + C4479 - C4480) * C15423 +
             (C4481 - C4482 + C4483 - C4484) * C15417 + C4925 * C15424 +
             C4926 * C31762) *
                C31944 +
            C24913 * C23798) *
               C572 +
           (((C4478 - C4477 + C4480 - C4479) * C15423 +
             (C4482 - C4481 + C4484 - C4483) * C15417 + C4927 * C15424 +
             C4928 * C31762) *
                C31937 +
            ((C4485 - C4486 + C4487 - C4488) * C15423 +
             (C4489 - C4490 + C4491 - C4492) * C15417 + C12902 * C15424 +
             C12903 * C31762) *
                C31944 +
            ((C12475 - C12476 + C12477 - C12478) * C15423 +
             (C12479 - C12480 + C12481 - C12482) * C15417 +
             (C12483 - C12484 + C12485 - C12486) * C15424 +
             (C12487 - C12488 + C12489 - C12490) * C31762) *
                C23798) *
               C573) *
              C466 +
          ((((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                 C15423 +
             (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                 C15417 +
             (C3031 - C3032 + C3033 - C3034) * C15424 +
             (C3035 - C3036 + C3037 - C3038) * C31762) *
                C31937 +
            ((C5125 - C5126 + C5127 - C5128) * C15423 +
             (C5129 - C5130 + C5131 - C5132) * C15417 +
             (C4703 - C4704 + C4705 - C4706) * C15424 +
             (C4707 - C4708 + C4709 - C4710) * C31762) *
                C31944 +
            ((C13098 - C13099 + C13100 - C13101) * C15423 +
             (C13102 - C13103 + C13104 - C13105) * C15417 +
             (C12696 - C12697 + C12698 - C12699) * C15424 +
             (C12700 - C12701 + C12702 - C12703) * C31762) *
                C23798) *
               C572 +
           (((C5126 - C5125 + C5128 - C5127) * C15423 +
             (C5130 - C5129 + C5132 - C5131) * C15417 +
             (C4704 - C4703 + C4706 - C4705) * C15424 +
             (C4708 - C4707 + C4710 - C4709) * C31762) *
                C31937 +
            ((C13099 - C13098 + C13101 - C13100) * C15423 +
             (C13103 - C13102 + C13105 - C13104) * C15417 +
             (C12697 - C12696 + C12699 - C12698) * C15424 +
             (C12701 - C12700 + C12703 - C12702) * C31762) *
                C31944 +
            ((C14521 - C14520 + C14523 - C14522) * C15423 +
             (C14525 - C14524 + C14527 - C14526) * C15417 +
             (C32095 * C2535 - C2654 * C2531 + C31899 * C7170 - C2655 * C7169) *
                 C15424 +
             (C32095 * C2540 - C2654 * C2536 + C31899 * C7172 - C2655 * C7171) *
                 C31762) *
                C23798) *
               C573) *
              C467) *
         C31787) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C15423 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C15417 +
            (C2661 - C2662 + C2663 - C2664) * C15424 +
            (C2665 - C2666 + C2667 - C2668) * C31762) *
               C31937 +
           ((C4477 - C4478 + C4479 - C4480) * C15423 +
            (C4481 - C4482 + C4483 - C4484) * C15417 + C4925 * C15424 +
            C4926 * C31762) *
               C31944 +
           (C12491 * C15423 + C12492 * C15417 + C12493 * C15424 +
            C12494 * C31762) *
               C23798) *
              C31813 * C235 +
          (((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                C15423 +
            (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                C15417 +
            (C3031 - C3032 + C3033 - C3034) * C15424 +
            (C3035 - C3036 + C3037 - C3038) * C31762) *
               C31937 +
           ((C5125 - C5126 + C5127 - C5128) * C15423 +
            (C5129 - C5130 + C5131 - C5132) * C15417 +
            (C4703 - C4704 + C4705 - C4706) * C15424 +
            (C4707 - C4708 + C4709 - C4710) * C31762) *
               C31944 +
           ((C13098 - C13099 + C13100 - C13101) * C15423 +
            (C13102 - C13103 + C13104 - C13105) * C15417 +
            (C12696 - C12697 + C12698 - C12699) * C15424 +
            (C12700 - C12701 + C12702 - C12703) * C31762) *
               C23798) *
              C31813 * C236 +
          (((C32095 * C259 - C2654 * C244 + C31899 * C980 - C2655 * C974) *
                C15423 +
            (C32095 * C274 - C2654 * C260 + C31899 * C992 - C2655 * C981) *
                C15417 +
            (C32095 * C261 - C2654 * C245 + C31899 * C982 - C2655 * C975) *
                C15424 +
            (C32095 * C275 - C2654 * C262 + C31899 * C993 - C2655 * C983) *
                C31762) *
               C31937 +
           ((C32095 * C1117 - C2654 * C1108 + C31899 * C1641 - C2655 * C1638) *
                C15423 +
            (C32095 * C1135 - C2654 * C1118 + C31899 * C1647 - C2655 * C1642) *
                C15417 +
            (C32095 * C1119 - C2654 * C1109 + C31899 * C1643 - C2655 * C1639) *
                C15424 +
            (C32095 * C1136 - C2654 * C1120 + C31899 * C1648 - C2655 * C1644) *
                C31762) *
               C31944 +
           ((C32095 * C1124 - C2654 * C1112 + C31899 * C6217 - C2655 * C6213) *
                C15423 +
            (C32095 * C1139 - C2654 * C1126 + C31899 * C6222 - C2655 * C6219) *
                C15417 +
            (C32095 * C1128 - C2654 * C1114 + C31899 * C7020 - C2655 * C7019) *
                C15424 +
            (C32095 * C1141 - C2654 * C1130 + C31899 * C7022 - C2655 * C7021) *
                C31762) *
               C23798) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C15423 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C15417 +
            (C2661 - C2662 + C2663 - C2664) * C15424 +
            (C2665 - C2666 + C2667 - C2668) * C31762) *
               C31937 +
           ((C4477 - C4478 + C4479 - C4480) * C15423 +
            (C4481 - C4482 + C4483 - C4484) * C15417 + C4925 * C15424 +
            C4926 * C31762) *
               C31944 +
           (C12491 * C15423 + C12492 * C15417 + C12493 * C15424 +
            C12494 * C31762) *
               C23798) *
              C31813 * C31799 * C110 +
          (((C2662 - C2661 + C2664 - C2663) * C15423 +
            (C2666 - C2665 + C2668 - C2667) * C15417 +
            (C2670 - C2669 + C2672 - C2671) * C15424 +
            (C2674 - C2673 + C2676 - C2675) * C31762) *
               C31937 +
           (C4927 * C15423 + C4928 * C15417 + C4929 * C15424 + C4930 * C31762) *
               C31944 +
           (C12902 * C15423 + C12903 * C15417 +
            (C4501 - C4502 + C4503 - C4504) * C15424 +
            (C4505 - C4506 + C4507 - C4508) * C31762) *
               C23798) *
              C31813 * C31799 * C111 +
          ((C2701 * C15423 + C2702 * C15417 + C2703 * C15424 + C2704 * C31762) *
               C31937 +
           (C4183 * C15423 + C4184 * C15417 +
            (C3202 - C3201 + C3204 - C3203) * C15424 +
            (C3206 - C3205 + C3208 - C3207) * C31762) *
               C31944 +
           ((C4502 - C4501 + C4504 - C4503) * C15423 +
            (C4506 - C4505 + C4508 - C4507) * C15417 +
            (C32095 * C370 - C2654 * C352 + C31899 * C2205 - C2655 * C2204) *
                C15424 +
            (C32095 * C382 - C2654 * C371 + C31899 * C2207 - C2655 * C2206) *
                C31762) *
               C23798) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C15423 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C15417 +
            (C2661 - C2662 + C2663 - C2664) * C15424 +
            (C2665 - C2666 + C2667 - C2668) * C31762) *
               C31937 +
           ((C4477 - C4478 + C4479 - C4480) * C15423 +
            (C4481 - C4482 + C4483 - C4484) * C15417 + C4925 * C15424 +
            C4926 * C31762) *
               C31944 +
           C24913 * C23798) *
              C341 +
          (((C4478 - C4477 + C4480 - C4479) * C15423 +
            (C4482 - C4481 + C4484 - C4483) * C15417 + C4927 * C15424 +
            C4928 * C31762) *
               C31937 +
           ((C4485 - C4486 + C4487 - C4488) * C15423 +
            (C4489 - C4490 + C4491 - C4492) * C15417 + C12902 * C15424 +
            C12903 * C31762) *
               C31944 +
           ((C12475 - C12476 + C12477 - C12478) * C15423 +
            (C12479 - C12480 + C12481 - C12482) * C15417 +
            (C12483 - C12484 + C12485 - C12486) * C15424 +
            (C12487 - C12488 + C12489 - C12490) * C31762) *
               C23798) *
              C342 +
          (C24913 * C31937 +
           (C14125 * C15423 + C14126 * C15417 +
            (C12484 - C12483 + C12486 - C12485) * C15424 +
            (C12488 - C12487 + C12490 - C12489) * C31762) *
               C31944 +
           ((C14117 - C14116 + C14119 - C14118) * C15423 +
            (C14121 - C14120 + C14123 - C14122) * C15417 +
            (C32095 * C2013 - C2654 * C2003 + C31899 * C11841 -
             C2655 * C11840) *
                C15424 +
            (C32095 * C2021 - C2654 * C2014 + C31899 * C11843 -
             C2655 * C11842) *
                C31762) *
               C23798) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                 C15423 +
             (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                 C15417 +
             (C2661 - C2662 + C2663 - C2664) * C15424 +
             (C2665 - C2666 + C2667 - C2668) * C31762) *
                C31937 +
            ((C4477 - C4478 + C4479 - C4480) * C15423 +
             (C4481 - C4482 + C4483 - C4484) * C15417 + C4925 * C15424 +
             C4926 * C31762) *
                C31944 +
            C24913 * C23798) *
               C572 +
           (((C4478 - C4477 + C4480 - C4479) * C15423 +
             (C4482 - C4481 + C4484 - C4483) * C15417 + C4927 * C15424 +
             C4928 * C31762) *
                C31937 +
            ((C4485 - C4486 + C4487 - C4488) * C15423 +
             (C4489 - C4490 + C4491 - C4492) * C15417 + C12902 * C15424 +
             C12903 * C31762) *
                C31944 +
            ((C12475 - C12476 + C12477 - C12478) * C15423 +
             (C12479 - C12480 + C12481 - C12482) * C15417 +
             (C12483 - C12484 + C12485 - C12486) * C15424 +
             (C12487 - C12488 + C12489 - C12490) * C31762) *
                C23798) *
               C573) *
              C31799 * C468 +
          ((((C2662 - C2661 + C2664 - C2663) * C15423 +
             (C2666 - C2665 + C2668 - C2667) * C15417 +
             (C2670 - C2669 + C2672 - C2671) * C15424 +
             (C2674 - C2673 + C2676 - C2675) * C31762) *
                C31937 +
            (C4927 * C15423 + C4928 * C15417 + C4929 * C15424 +
             C4930 * C31762) *
                C31944 +
            (C12902 * C15423 + C12903 * C15417 +
             (C4501 - C4502 + C4503 - C4504) * C15424 +
             (C4505 - C4506 + C4507 - C4508) * C31762) *
                C23798) *
               C572 +
           ((C4925 * C15423 + C4926 * C15417 + C4183 * C15424 +
             C4184 * C31762) *
                C31937 +
            (C12493 * C15423 + C12494 * C15417 +
             (C4502 - C4501 + C4504 - C4503) * C15424 +
             (C4506 - C4505 + C4508 - C4507) * C31762) *
                C31944 +
            ((C12484 - C12483 + C12486 - C12485) * C15423 +
             (C12488 - C12487 + C12490 - C12489) * C15417 +
             (C32095 * C2009 - C2654 * C2001 + C31899 * C2537 - C2655 * C2532) *
                 C15424 +
             (C32095 * C2019 - C2654 * C2010 + C31899 * C2541 - C2655 * C2538) *
                 C31762) *
                C23798) *
               C573) *
              C31799 * C469)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C15423 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C15417 +
            (C2661 - C2662 + C2663 - C2664) * C15424 +
            (C2665 - C2666 + C2667 - C2668) * C31762) *
               C31937 +
           ((C4477 - C4478 + C4479 - C4480) * C15423 +
            (C4481 - C4482 + C4483 - C4484) * C15417 + C4925 * C15424 +
            C4926 * C31762) *
               C31944 +
           (C12491 * C15423 + C12492 * C15417 + C12493 * C15424 +
            C12494 * C31762) *
               C23798) *
              C31813 * C31799 * C110 +
          (((C2662 - C2661 + C2664 - C2663) * C15423 +
            (C2666 - C2665 + C2668 - C2667) * C15417 +
            (C2670 - C2669 + C2672 - C2671) * C15424 +
            (C2674 - C2673 + C2676 - C2675) * C31762) *
               C31937 +
           (C4927 * C15423 + C4928 * C15417 + C4929 * C15424 + C4930 * C31762) *
               C31944 +
           (C12902 * C15423 + C12903 * C15417 +
            (C4501 - C4502 + C4503 - C4504) * C15424 +
            (C4505 - C4506 + C4507 - C4508) * C31762) *
               C23798) *
              C31813 * C31799 * C111 +
          ((C2701 * C15423 + C2702 * C15417 + C2703 * C15424 + C2704 * C31762) *
               C31937 +
           (C4183 * C15423 + C4184 * C15417 +
            (C3202 - C3201 + C3204 - C3203) * C15424 +
            (C3206 - C3205 + C3208 - C3207) * C31762) *
               C31944 +
           ((C4502 - C4501 + C4504 - C4503) * C15423 +
            (C4506 - C4505 + C4508 - C4507) * C15417 +
            (C32095 * C370 - C2654 * C352 + C31899 * C2205 - C2655 * C2204) *
                C15424 +
            (C32095 * C382 - C2654 * C371 + C31899 * C2207 - C2655 * C2206) *
                C31762) *
               C23798) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C15423 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C15417 +
            (C2661 - C2662 + C2663 - C2664) * C15424 +
            (C2665 - C2666 + C2667 - C2668) * C31762) *
               C31937 +
           ((C4477 - C4478 + C4479 - C4480) * C15423 +
            (C4481 - C4482 + C4483 - C4484) * C15417 + C4925 * C15424 +
            C4926 * C31762) *
               C31944 +
           (C12491 * C15423 + C12492 * C15417 + C12493 * C15424 +
            C12494 * C31762) *
               C23798) *
              C31813 * C235 +
          (((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                C15423 +
            (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                C15417 +
            (C3031 - C3032 + C3033 - C3034) * C15424 +
            (C3035 - C3036 + C3037 - C3038) * C31762) *
               C31937 +
           ((C5125 - C5126 + C5127 - C5128) * C15423 +
            (C5129 - C5130 + C5131 - C5132) * C15417 +
            (C4703 - C4704 + C4705 - C4706) * C15424 +
            (C4707 - C4708 + C4709 - C4710) * C31762) *
               C31944 +
           ((C13098 - C13099 + C13100 - C13101) * C15423 +
            (C13102 - C13103 + C13104 - C13105) * C15417 +
            (C12696 - C12697 + C12698 - C12699) * C15424 +
            (C12700 - C12701 + C12702 - C12703) * C31762) *
               C23798) *
              C31813 * C236 +
          (((C32095 * C259 - C2654 * C244 + C31899 * C980 - C2655 * C974) *
                C15423 +
            (C32095 * C274 - C2654 * C260 + C31899 * C992 - C2655 * C981) *
                C15417 +
            (C32095 * C261 - C2654 * C245 + C31899 * C982 - C2655 * C975) *
                C15424 +
            (C32095 * C275 - C2654 * C262 + C31899 * C993 - C2655 * C983) *
                C31762) *
               C31937 +
           ((C32095 * C1117 - C2654 * C1108 + C31899 * C1641 - C2655 * C1638) *
                C15423 +
            (C32095 * C1135 - C2654 * C1118 + C31899 * C1647 - C2655 * C1642) *
                C15417 +
            (C32095 * C1119 - C2654 * C1109 + C31899 * C1643 - C2655 * C1639) *
                C15424 +
            (C32095 * C1136 - C2654 * C1120 + C31899 * C1648 - C2655 * C1644) *
                C31762) *
               C31944 +
           ((C32095 * C1124 - C2654 * C1112 + C31899 * C6217 - C2655 * C6213) *
                C15423 +
            (C32095 * C1139 - C2654 * C1126 + C31899 * C6222 - C2655 * C6219) *
                C15417 +
            (C32095 * C1128 - C2654 * C1114 + C31899 * C7020 - C2655 * C7019) *
                C15424 +
            (C32095 * C1141 - C2654 * C1130 + C31899 * C7022 - C2655 * C7021) *
                C31762) *
               C23798) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
              C32126 * C259 - C814 * C244) *
                 C15423 +
             (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
              C32126 * C274 - C814 * C260) *
                 C15417 +
             (C819 - C820 + C821 - C822 + C823 - C824) * C15424 +
             (C825 - C826 + C827 - C828 + C829 - C830) * C31762) *
                C20324 +
            ((C11016 - C11017 + C11018 - C11019 + C11020 - C11021) * C15423 +
             (C11022 - C11023 + C11024 - C11025 + C11026 - C11027) * C15417 +
             (C1470 - C1469 + C1472 - C1471 + C1474 - C1473) * C15424 +
             (C1476 - C1475 + C1478 - C1477 + C1480 - C1479) * C31762) *
                C31941) *
               C31813 * C466 +
           (((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
              C814 * C974 - C32126 * C980) *
                 C15423 +
             (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
              C814 * C981 - C32126 * C992) *
                 C15417 +
             (C1295 - C1296 + C1297 - C1298 + C1299 - C1300) * C15424 +
             (C1301 - C1302 + C1303 - C1304 + C1305 - C1306) * C31762) *
                C20324 +
            ((C11515 - C11516 + C11517 - C11518 + C11519 - C11520) * C15423 +
             (C11521 - C11522 + C11523 - C11524 + C11525 - C11526) * C15417 +
             (C21545 - C21546 + C21547 - C21548 + C21549 - C21550) * C15424 +
             (C21551 - C21552 + C21553 - C21554 + C21555 - C21556) * C31762) *
                C31941) *
               C31813 * C467) *
              C468 +
          ((((C820 - C819 + C822 - C821 + C824 - C823) * C15423 +
             (C826 - C825 + C828 - C827 + C830 - C829) * C15417 +
             (C832 - C831 + C834 - C833 + C836 - C835) * C15424 +
             (C838 - C837 + C840 - C839 + C842 - C841) * C31762) *
                C20324 +
            ((C1469 - C1470 + C1471 - C1472 + C1473 - C1474) * C15423 +
             (C1475 - C1476 + C1477 - C1478 + C1479 - C1480) * C15417 +
             (C1481 - C1482 + C1483 - C1484 + C1485 - C1486) * C15424 +
             (C1487 - C1488 + C1489 - C1490 + C1491 - C1492) * C31762) *
                C31941) *
               C31813 * C466 +
           (((C1296 - C1295 + C1298 - C1297 + C1300 - C1299) * C15423 +
             (C1302 - C1301 + C1304 - C1303 + C1306 - C1305) * C15417 +
             (C1308 - C1307 + C1310 - C1309 + C1312 - C1311) * C15424 +
             (C1314 - C1313 + C1316 - C1315 + C1318 - C1317) * C31762) *
                C20324 +
            ((C21546 - C21545 + C21548 - C21547 + C21550 - C21549) * C15423 +
             (C21552 - C21551 + C21554 - C21553 + C21556 - C21555) * C15417 +
             (C32161 * C685 - C812 * C678 + C32149 * C1121 - C813 * C1110 +
              C32126 * C1645 - C814 * C1640) *
                 C15424 +
             (C32161 * C693 - C812 * C686 + C32149 * C1137 - C813 * C1122 +
              C32126 * C1649 - C814 * C1646) *
                 C31762) *
                C31941) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C14633 +
             (C31836 * C140 - C113 * C127) * C32167 + (C148 - C149) * C14634 +
             (C150 - C151) * C32160 + C168 * C14635 + C169 * C32147 +
             C170 * C14636 + C171 * C32130) *
                C20324 +
            ((C2024 - C2025) * C14633 + (C2026 - C2027) * C32167 +
             C2375 * C14634 + C2376 * C32160 + C1764 * C14635 + C1765 * C32147 +
             C3439 * C14636 + C3440 * C32130) *
                C31941) *
               C31813 * C466 +
           (((C113 * C239 - C31836 * C249) * C14633 +
             (C113 * C250 - C31836 * C269) * C32167 + (C475 - C476) * C14634 +
             (C477 - C478) * C32160 + (C479 - C480) * C14635 +
             (C481 - C482) * C32147 + (C483 - C484) * C14636 +
             (C485 - C486) * C32130) *
                C20324 +
            ((C2543 - C2544) * C14633 + (C2545 - C2546) * C32167 +
             (C2209 - C2210) * C14634 + (C2211 - C2212) * C32160 +
             (C2213 - C2214) * C14635 + (C2215 - C2216) * C32147 +
             (C3767 - C3768) * C14636 + (C3769 - C3770) * C32130) *
                C31941) *
               C31813 * C467) *
              C468 +
          ((((C149 - C148) * C14633 + (C151 - C150) * C32167 +
             (C153 - C152) * C14634 + (C155 - C154) * C32160 +
             (C157 - C156) * C14635 + (C159 - C158) * C32147 +
             (C161 - C160) * C14636 + (C163 - C162) * C32130) *
                C20324 +
            (C2377 * C14633 + C2378 * C32167 + C2379 * C14634 + C2380 * C32160 +
             C3901 * C14635 + C3902 * C32147 + (C591 - C592) * C14636 +
             (C593 - C594) * C32130) *
                C31941) *
               C31813 * C466 +
           (((C476 - C475) * C14633 + (C478 - C477) * C32167 +
             (C480 - C479) * C14634 + (C482 - C481) * C32160 +
             (C484 - C483) * C14635 + (C486 - C485) * C32147 +
             (C488 - C487) * C14636 + (C490 - C489) * C32130) *
                C20324 +
            ((C2210 - C2209) * C14633 + (C2212 - C2211) * C32167 +
             (C2214 - C2213) * C14634 + (C2216 - C2215) * C32160 +
             (C3768 - C3767) * C14635 + (C3770 - C3769) * C32147 +
             (C31836 * C689 - C113 * C680) * C14636 +
             (C31836 * C695 - C113 * C690) * C32130) *
                C31941) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C15423 +
             (C31836 * C140 - C113 * C127) * C15417 + (C148 - C149) * C15424 +
             (C150 - C151) * C31762) *
                C32169 +
            ((C2024 - C2025) * C15423 + (C2026 - C2027) * C15417 +
             C2375 * C15424 + C2376 * C31762) *
                C32166 +
            C22275 * C32157 + C22276 * C32142) *
               C31813 * C466 +
           (((C113 * C239 - C31836 * C249) * C15423 +
             (C113 * C250 - C31836 * C269) * C15417 + (C475 - C476) * C15424 +
             (C477 - C478) * C31762) *
                C32169 +
            ((C2543 - C2544) * C15423 + (C2545 - C2546) * C15417 +
             (C2209 - C2210) * C15424 + (C2211 - C2212) * C31762) *
                C32166 +
            ((C2547 - C2548) * C15423 + (C2549 - C2550) * C15417 +
             (C2217 - C2218) * C15424 + (C2219 - C2220) * C31762) *
                C32157 +
            ((C12021 - C12022) * C15423 + (C12023 - C12024) * C15417 +
             (C13550 - C13551) * C15424 + (C13552 - C13553) * C31762) *
                C32142) *
               C31813 * C467) *
              C468 +
          ((((C149 - C148) * C15423 + (C151 - C150) * C15417 +
             (C153 - C152) * C15424 + (C155 - C154) * C31762) *
                C32169 +
            (C2377 * C15423 + C2378 * C15417 + C2379 * C15424 +
             C2380 * C31762) *
                C32166 +
            (C2381 * C15423 + C2382 * C15417 + C2383 * C15424 +
             C2384 * C31762) *
                C32157 +
            (C13684 * C15423 + C13685 * C15417 + (C2044 - C2045) * C15424 +
             (C2046 - C2047) * C31762) *
                C32142) *
               C31813 * C466 +
           (((C476 - C475) * C15423 + (C478 - C477) * C15417 +
             (C480 - C479) * C15424 + (C482 - C481) * C31762) *
                C32169 +
            ((C2210 - C2209) * C15423 + (C2212 - C2211) * C15417 +
             (C2214 - C2213) * C15424 + (C2216 - C2215) * C31762) *
                C32166 +
            ((C2218 - C2217) * C15423 + (C2220 - C2219) * C15417 +
             (C2222 - C2221) * C15424 + (C2224 - C2223) * C31762) *
                C32157 +
            ((C13551 - C13550) * C15423 + (C13553 - C13552) * C15417 +
             (C31836 * C2537 - C113 * C2532) * C15424 +
             (C31836 * C2541 - C113 * C2538) * C31762) *
                C32142) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
              C32126 * C259 - C814 * C244) *
                 C15423 +
             (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
              C32126 * C274 - C814 * C260) *
                 C15417 +
             (C819 - C820 + C821 - C822 + C823 - C824) * C15424 +
             (C825 - C826 + C827 - C828 + C829 - C830) * C31762) *
                C20324 +
            ((C11016 - C11017 + C11018 - C11019 + C11020 - C11021) * C15423 +
             (C11022 - C11023 + C11024 - C11025 + C11026 - C11027) * C15417 +
             C21767 * C15424 + C21768 * C31762) *
                C31941) *
               C572 +
           (((C11017 - C11016 + C11019 - C11018 + C11021 - C11020) * C15423 +
             (C11023 - C11022 + C11025 - C11024 + C11027 - C11026) * C15417 +
             C21769 * C15424 + C21770 * C31762) *
                C20324 +
            ((C11029 - C11028 + C11031 - C11030 + C11033 - C11032) * C15423 +
             (C11035 - C11034 + C11037 - C11036 + C11039 - C11038) * C15417 +
             (C11357 - C11358 + C11359 - C11360 + C11361 - C11362) * C15424 +
             (C11363 - C11364 + C11365 - C11366 + C11367 - C11368) * C31762) *
                C31941) *
               C573) *
              C466 +
          ((((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
              C814 * C974 - C32126 * C980) *
                 C15423 +
             (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
              C814 * C981 - C32126 * C992) *
                 C15417 +
             (C1295 - C1296 + C1297 - C1298 + C1299 - C1300) * C15424 +
             (C1301 - C1302 + C1303 - C1304 + C1305 - C1306) * C31762) *
                C20324 +
            ((C11515 - C11516 + C11517 - C11518 + C11519 - C11520) * C15423 +
             (C11521 - C11522 + C11523 - C11524 + C11525 - C11526) * C15417 +
             (C21545 - C21546 + C21547 - C21548 + C21549 - C21550) * C15424 +
             (C21551 - C21552 + C21553 - C21554 + C21555 - C21556) * C31762) *
                C31941) *
               C572 +
           (((C11516 - C11515 + C11518 - C11517 + C11520 - C11519) * C15423 +
             (C11522 - C11521 + C11524 - C11523 + C11526 - C11525) * C15417 +
             (C21546 - C21545 + C21548 - C21547 + C21550 - C21549) * C15424 +
             (C21552 - C21551 + C21554 - C21553 + C21556 - C21555) * C31762) *
                C20324 +
            ((C11528 - C11527 + C11530 - C11529 + C11532 - C11531) * C15423 +
             (C11534 - C11533 + C11536 - C11535 + C11538 - C11537) * C15417 +
             (C32161 * C1127 - C812 * C1113 + C32149 * C1128 - C813 * C1114 +
              C32126 * C7020 - C814 * C7019) *
                 C15424 +
             (C32161 * C1140 - C812 * C1129 + C32149 * C1141 - C813 * C1130 +
              C32126 * C7022 - C814 * C7021) *
                 C31762) *
                C31941) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C14633 +
             (C31836 * C140 - C113 * C127) * C32167 + (C148 - C149) * C14634 +
             (C150 - C151) * C32160 + C168 * C14635 + C169 * C32147 +
             C170 * C14636 + C171 * C32130) *
                C20324 +
            ((C2024 - C2025) * C14633 + (C2026 - C2027) * C32167 +
             C2375 * C14634 + C2376 * C32160 + C1764 * C14635 + C1765 * C32147 +
             C3439 * C14636 + C3440 * C32130) *
                C31941) *
               C572 +
           (((C2025 - C2024) * C14633 + (C2027 - C2026) * C32167 +
             C2377 * C14634 + C2378 * C32160 + C2379 * C14635 + C2380 * C32147 +
             C3901 * C14636 + C3902 * C32130) *
                C20324 +
            ((C2029 - C2028) * C14633 + (C2031 - C2030) * C32167 +
             C2381 * C14634 + C2382 * C32160 + C2383 * C14635 + C2384 * C32147 +
             (C1774 - C1775) * C14636 + (C1776 - C1777) * C32130) *
                C31941) *
               C573) *
              C466 +
          ((((C113 * C239 - C31836 * C249) * C14633 +
             (C113 * C250 - C31836 * C269) * C32167 + (C475 - C476) * C14634 +
             (C477 - C478) * C32160 + (C479 - C480) * C14635 +
             (C481 - C482) * C32147 + (C483 - C484) * C14636 +
             (C485 - C486) * C32130) *
                C20324 +
            ((C2543 - C2544) * C14633 + (C2545 - C2546) * C32167 +
             (C2209 - C2210) * C14634 + (C2211 - C2212) * C32160 +
             (C2213 - C2214) * C14635 + (C2215 - C2216) * C32147 +
             (C3767 - C3768) * C14636 + (C3769 - C3770) * C32130) *
                C31941) *
               C572 +
           (((C2544 - C2543) * C14633 + (C2546 - C2545) * C32167 +
             (C2210 - C2209) * C14634 + (C2212 - C2211) * C32160 +
             (C2214 - C2213) * C14635 + (C2216 - C2215) * C32147 +
             (C3768 - C3767) * C14636 + (C3770 - C3769) * C32130) *
                C20324 +
            ((C2548 - C2547) * C14633 + (C2550 - C2549) * C32167 +
             (C2218 - C2217) * C14634 + (C2220 - C2219) * C32160 +
             (C2222 - C2221) * C14635 + (C2224 - C2223) * C32147 +
             (C31836 * C2205 - C113 * C2204) * C14636 +
             (C31836 * C2207 - C113 * C2206) * C32130) *
                C31941) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C15423 +
             (C31836 * C140 - C113 * C127) * C15417 + (C148 - C149) * C15424 +
             (C150 - C151) * C31762) *
                C32169 +
            ((C2024 - C2025) * C15423 + (C2026 - C2027) * C15417 +
             C2375 * C15424 + C2376 * C31762) *
                C32166 +
            C22275 * C32157 + C22276 * C32142) *
               C572 +
           (((C2025 - C2024) * C15423 + (C2027 - C2026) * C15417 +
             C2377 * C15424 + C2378 * C31762) *
                C32169 +
            ((C2029 - C2028) * C15423 + (C2031 - C2030) * C15417 +
             C2381 * C15424 + C2382 * C31762) *
                C32166 +
            ((C2036 - C2037) * C15423 + (C2038 - C2039) * C15417 +
             C13684 * C15424 + C13685 * C31762) *
                C32157 +
            ((C11743 - C11742) * C15423 + (C11745 - C11744) * C15417 +
             (C11931 - C11932) * C15424 + (C11933 - C11934) * C31762) *
                C32142) *
               C573) *
              C466 +
          ((((C113 * C239 - C31836 * C249) * C15423 +
             (C113 * C250 - C31836 * C269) * C15417 + (C475 - C476) * C15424 +
             (C477 - C478) * C31762) *
                C32169 +
            ((C2543 - C2544) * C15423 + (C2545 - C2546) * C15417 +
             (C2209 - C2210) * C15424 + (C2211 - C2212) * C31762) *
                C32166 +
            ((C2547 - C2548) * C15423 + (C2549 - C2550) * C15417 +
             (C2217 - C2218) * C15424 + (C2219 - C2220) * C31762) *
                C32157 +
            ((C12021 - C12022) * C15423 + (C12023 - C12024) * C15417 +
             (C13550 - C13551) * C15424 + (C13552 - C13553) * C31762) *
                C32142) *
               C572 +
           (((C2544 - C2543) * C15423 + (C2546 - C2545) * C15417 +
             (C2210 - C2209) * C15424 + (C2212 - C2211) * C31762) *
                C32169 +
            ((C2548 - C2547) * C15423 + (C2550 - C2549) * C15417 +
             (C2218 - C2217) * C15424 + (C2220 - C2219) * C31762) *
                C32166 +
            ((C12022 - C12021) * C15423 + (C12024 - C12023) * C15417 +
             (C13551 - C13550) * C15424 + (C13553 - C13552) * C31762) *
                C32157 +
            ((C12026 - C12025) * C15423 + (C12028 - C12027) * C15417 +
             (C31836 * C11841 - C113 * C11840) * C15424 +
             (C31836 * C11843 - C113 * C11842) * C31762) *
                C32142) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C31836 * C126 - C113 * C119) * C14633 +
                (C31836 * C140 - C113 * C127) * C32167 +
                (C148 - C149) * C14634 + (C150 - C151) * C32160 +
                C168 * C14635 + C169 * C32147 + C170 * C14636 + C171 * C32130) *
                   C20324 +
               ((C2024 - C2025) * C14633 + (C2026 - C2027) * C32167 +
                C2375 * C14634 + C2376 * C32160 + C1764 * C14635 +
                C1765 * C32147 + C3439 * C14636 + C3440 * C32130) *
                   C31941) *
                  C31813 * C31799 * C110 +
              (((C149 - C148) * C14633 + (C151 - C150) * C32167 +
                (C153 - C152) * C14634 + (C155 - C154) * C32160 +
                (C157 - C156) * C14635 + (C159 - C158) * C32147 +
                (C161 - C160) * C14636 + (C163 - C162) * C32130) *
                   C20324 +
               (C2377 * C14633 + C2378 * C32167 + C2379 * C14634 +
                C2380 * C32160 + C3901 * C14635 + C3902 * C32147 +
                (C591 - C592) * C14636 + (C593 - C594) * C32130) *
                   C31941) *
                  C31813 * C31799 * C111 +
              ((C168 * C14633 + C169 * C32167 + C170 * C14634 + C171 * C32160 +
                C172 * C14635 + C173 * C32147 + (C165 - C164) * C14636 +
                (C167 - C166) * C32130) *
                   C20324 +
               (C1764 * C14633 + C1765 * C32167 + C3439 * C14634 +
                C3440 * C32160 + (C592 - C591) * C14635 +
                (C594 - C593) * C32147 +
                (C31836 * C575 - C113 * C574) * C14636 +
                (C31836 * C577 - C113 * C576) * C32130) *
                   C31941) *
                  C31813 * C31799 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C31836 * C126 - C113 * C119) * C14633 +
                (C31836 * C140 - C113 * C127) * C32167 +
                (C148 - C149) * C14634 + (C150 - C151) * C32160 +
                C168 * C14635 + C169 * C32147 + C170 * C14636 + C171 * C32130) *
                   C20324 +
               ((C2024 - C2025) * C14633 + (C2026 - C2027) * C32167 +
                C2375 * C14634 + C2376 * C32160 + C1764 * C14635 +
                C1765 * C32147 + C3439 * C14636 + C3440 * C32130) *
                   C31941) *
                  C31813 * C235 +
              (((C113 * C239 - C31836 * C249) * C14633 +
                (C113 * C250 - C31836 * C269) * C32167 +
                (C475 - C476) * C14634 + (C477 - C478) * C32160 +
                (C479 - C480) * C14635 + (C481 - C482) * C32147 +
                (C483 - C484) * C14636 + (C485 - C486) * C32130) *
                   C20324 +
               ((C2543 - C2544) * C14633 + (C2545 - C2546) * C32167 +
                (C2209 - C2210) * C14634 + (C2211 - C2212) * C32160 +
                (C2213 - C2214) * C14635 + (C2215 - C2216) * C32147 +
                (C3767 - C3768) * C14636 + (C3769 - C3770) * C32130) *
                   C31941) *
                  C31813 * C236 +
              (((C31836 * C259 - C113 * C244) * C14633 +
                (C31836 * C274 - C113 * C260) * C32167 +
                (C31836 * C261 - C113 * C245) * C14634 +
                (C31836 * C275 - C113 * C262) * C32160 +
                (C31836 * C263 - C113 * C246) * C14635 +
                (C31836 * C276 - C113 * C264) * C32147 +
                (C31836 * C265 - C113 * C247) * C14636 +
                (C31836 * C277 - C113 * C266) * C32130) *
                   C20324 +
               ((C31836 * C1117 - C113 * C1108) * C14633 +
                (C31836 * C1135 - C113 * C1118) * C32167 +
                (C31836 * C1119 - C113 * C1109) * C14634 +
                (C31836 * C1136 - C113 * C1120) * C32160 +
                (C31836 * C1121 - C113 * C1110) * C14635 +
                (C31836 * C1137 - C113 * C1122) * C32147 +
                (C31836 * C1465 - C113 * C1464) * C14636 +
                (C31836 * C1467 - C113 * C1466) * C32130) *
                   C31941) *
                  C31813 * C237) *
             C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C14633 +
            (C31836 * C140 - C113 * C127) * C32167 + (C148 - C149) * C14634 +
            (C150 - C151) * C32160 + C168 * C14635 + C169 * C32147 +
            C170 * C14636 + C171 * C32130) *
               C20324 +
           ((C2024 - C2025) * C14633 + (C2026 - C2027) * C32167 +
            C2375 * C14634 + C2376 * C32160 + C1764 * C14635 + C1765 * C32147 +
            C3439 * C14636 + C3440 * C32130) *
               C31941) *
              C341 +
          (((C2025 - C2024) * C14633 + (C2027 - C2026) * C32167 +
            C2377 * C14634 + C2378 * C32160 + C2379 * C14635 + C2380 * C32147 +
            C3901 * C14636 + C3902 * C32130) *
               C20324 +
           ((C2029 - C2028) * C14633 + (C2031 - C2030) * C32167 +
            C2381 * C14634 + C2382 * C32160 + C2383 * C14635 + C2384 * C32147 +
            (C1774 - C1775) * C14636 + (C1776 - C1777) * C32130) *
               C31941) *
              C342 +
          ((C2048 * C14633 + C2049 * C32167 + C2032 * C14634 + C2033 * C32160 +
            C1778 * C14635 + C1779 * C32147 + (C1775 - C1774) * C14636 +
            (C1777 - C1776) * C32130) *
               C20324 +
           (C11740 * C14633 + C11741 * C32167 + C13410 * C14634 +
            C13411 * C32160 + (C2045 - C2044) * C14635 +
            (C2047 - C2046) * C32147 +
            (C31836 * C2371 - C113 * C2370) * C14636 +
            (C31836 * C2373 - C113 * C2372) * C32130) *
               C31941) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C15423 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C15417 +
            (C819 - C820 + C821 - C822 + C823 - C824) * C15424 +
            (C825 - C826 + C827 - C828 + C829 - C830) * C31762) *
               C20324 +
           ((C11016 - C11017 + C11018 - C11019 + C11020 - C11021) * C15423 +
            (C11022 - C11023 + C11024 - C11025 + C11026 - C11027) * C15417 +
            (C1470 - C1469 + C1472 - C1471 + C1474 - C1473) * C15424 +
            (C1476 - C1475 + C1478 - C1477 + C1480 - C1479) * C31762) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C820 - C819 + C822 - C821 + C824 - C823) * C15423 +
            (C826 - C825 + C828 - C827 + C830 - C829) * C15417 +
            (C832 - C831 + C834 - C833 + C836 - C835) * C15424 +
            (C838 - C837 + C840 - C839 + C842 - C841) * C31762) *
               C20324 +
           ((C1469 - C1470 + C1471 - C1472 + C1473 - C1474) * C15423 +
            (C1475 - C1476 + C1477 - C1478 + C1479 - C1480) * C15417 +
            (C1481 - C1482 + C1483 - C1484 + C1485 - C1486) * C15424 +
            (C1487 - C1488 + C1489 - C1490 + C1491 - C1492) * C31762) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C863 * C15423 + C864 * C15417 +
            (C844 - C843 + C846 - C845 + C848 - C847) * C15424 +
            (C850 - C849 + C852 - C851 + C854 - C853) * C31762) *
               C20324 +
           ((C1482 - C1481 + C1484 - C1483 + C1486 - C1485) * C15423 +
            (C1488 - C1487 + C1490 - C1489 + C1492 - C1491) * C15417 +
            (C32161 * C360 - C812 * C347 + C32149 * C687 - C813 * C679 +
             C32126 * C1465 - C814 * C1464) *
                C15424 +
            (C32161 * C377 - C812 * C361 + C32149 * C694 - C813 * C688 +
             C32126 * C1467 - C814 * C1466) *
                C31762) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C15423 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C15417 +
            (C819 - C820 + C821 - C822 + C823 - C824) * C15424 +
            (C825 - C826 + C827 - C828 + C829 - C830) * C31762) *
               C20324 +
           ((C11016 - C11017 + C11018 - C11019 + C11020 - C11021) * C15423 +
            (C11022 - C11023 + C11024 - C11025 + C11026 - C11027) * C15417 +
            (C1470 - C1469 + C1472 - C1471 + C1474 - C1473) * C15424 +
            (C1476 - C1475 + C1478 - C1477 + C1480 - C1479) * C31762) *
               C31941) *
              C31813 * C235 +
          (((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
             C814 * C974 - C32126 * C980) *
                C15423 +
            (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
             C814 * C981 - C32126 * C992) *
                C15417 +
            (C1295 - C1296 + C1297 - C1298 + C1299 - C1300) * C15424 +
            (C1301 - C1302 + C1303 - C1304 + C1305 - C1306) * C31762) *
               C20324 +
           ((C11515 - C11516 + C11517 - C11518 + C11519 - C11520) * C15423 +
            (C11521 - C11522 + C11523 - C11524 + C11525 - C11526) * C15417 +
            (C812 * C677 - C32161 * C683 + C813 * C1109 - C32149 * C1119 +
             C814 * C1639 - C32126 * C1643) *
                C15424 +
            (C812 * C684 - C32161 * C692 + C813 * C1120 - C32149 * C1136 +
             C814 * C1644 - C32126 * C1648) *
                C31762) *
               C31941) *
              C31813 * C236 +
          (((C32161 * C259 - C812 * C244 + C32149 * C980 - C813 * C974 +
             C32126 * C986 - C814 * C977) *
                C15423 +
            (C32161 * C274 - C812 * C260 + C32149 * C992 - C813 * C981 +
             C32126 * C995 - C814 * C987) *
                C15417 +
            (C32161 * C261 - C812 * C245 + C32149 * C982 - C813 * C975 +
             C32126 * C988 - C814 * C978) *
                C15424 +
            (C32161 * C275 - C812 * C262 + C32149 * C993 - C813 * C983 +
             C32126 * C996 - C814 * C989) *
                C31762) *
               C20324 +
           ((C32161 * C1117 - C812 * C1108 + C32149 * C1641 - C813 * C1638 +
             C32126 * C6215 - C814 * C6212) *
                C15423 +
            (C32161 * C1135 - C812 * C1118 + C32149 * C1647 - C813 * C1642 +
             C32126 * C6221 - C814 * C6216) *
                C15417 +
            (C32161 * C1119 - C812 * C1109 + C32149 * C1643 - C813 * C1639 +
             C32126 * C6393 - C814 * C6392) *
                C15424 +
            (C32161 * C1136 - C812 * C1120 + C32149 * C1648 - C813 * C1644 +
             C32126 * C6395 - C814 * C6394) *
                C31762) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C15423 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C15417 +
            (C819 - C820 + C821 - C822 + C823 - C824) * C15424 +
            (C825 - C826 + C827 - C828 + C829 - C830) * C31762) *
               C20324 +
           ((C11016 - C11017 + C11018 - C11019 + C11020 - C11021) * C15423 +
            (C11022 - C11023 + C11024 - C11025 + C11026 - C11027) * C15417 +
            (C1470 - C1469 + C1472 - C1471 + C1474 - C1473) * C15424 +
            (C1476 - C1475 + C1478 - C1477 + C1480 - C1479) * C31762) *
               C31941) *
              C341 +
          (((C11017 - C11016 + C11019 - C11018 + C11021 - C11020) * C15423 +
            (C11023 - C11022 + C11025 - C11024 + C11027 - C11026) * C15417 +
            (C1469 - C1470 + C1471 - C1472 + C1473 - C1474) * C15424 +
            (C1475 - C1476 + C1477 - C1478 + C1479 - C1480) * C31762) *
               C20324 +
           ((C11029 - C11028 + C11031 - C11030 + C11033 - C11032) * C15423 +
            (C11035 - C11034 + C11037 - C11036 + C11039 - C11038) * C15417 +
            (C11357 - C11358 + C11359 - C11360 + C11361 - C11362) * C15424 +
            (C11363 - C11364 + C11365 - C11366 + C11367 - C11368) * C31762) *
               C31941) *
              C342 +
          ((C11060 * C15423 + C11061 * C15417 +
            (C11358 - C11357 + C11360 - C11359 + C11362 - C11361) * C15424 +
            (C11364 - C11363 + C11366 - C11365 + C11368 - C11367) * C31762) *
               C20324 +
           ((C11041 - C11040 + C11043 - C11042 + C11045 - C11044) * C15423 +
            (C11047 - C11046 + C11049 - C11048 + C11051 - C11050) * C15417 +
            (C32161 * C2007 - C812 * C2000 + C32149 * C2535 - C813 * C2531 +
             C32126 * C7170 - C814 * C7169) *
                C15424 +
            (C32161 * C2018 - C812 * C2008 + C32149 * C2540 - C813 * C2536 +
             C32126 * C7172 - C814 * C7171) *
                C31762) *
               C31941) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C15423 +
            (C31836 * C140 - C113 * C127) * C15417 + (C148 - C149) * C15424 +
            (C150 - C151) * C31762) *
               C32169 +
           ((C2024 - C2025) * C15423 + (C2026 - C2027) * C15417 +
            C2375 * C15424 + C2376 * C31762) *
               C32166 +
           (C2048 * C15423 + C2049 * C15417 + C2032 * C15424 + C2033 * C31762) *
               C32157 +
           (C11740 * C15423 + C11741 * C15417 + C13410 * C15424 +
            C13411 * C31762) *
               C32142) *
              C31813 * C31799 * C110 +
          (((C149 - C148) * C15423 + (C151 - C150) * C15417 +
            (C153 - C152) * C15424 + (C155 - C154) * C31762) *
               C32169 +
           (C2377 * C15423 + C2378 * C15417 + C2379 * C15424 + C2380 * C31762) *
               C32166 +
           (C2381 * C15423 + C2382 * C15417 + C2383 * C15424 + C2384 * C31762) *
               C32157 +
           (C13684 * C15423 + C13685 * C15417 + (C2044 - C2045) * C15424 +
            (C2046 - C2047) * C31762) *
               C32142) *
              C31813 * C31799 * C111 +
          ((C168 * C15423 + C169 * C15417 + C170 * C15424 + C171 * C31762) *
               C32169 +
           (C1764 * C15423 + C1765 * C15417 + C3439 * C15424 + C3440 * C31762) *
               C32166 +
           (C1778 * C15423 + C1779 * C15417 + (C1775 - C1774) * C15424 +
            (C1777 - C1776) * C31762) *
               C32157 +
           ((C2045 - C2044) * C15423 + (C2047 - C2046) * C15417 +
            (C31836 * C2371 - C113 * C2370) * C15424 +
            (C31836 * C2373 - C113 * C2372) * C31762) *
               C32142) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C15423 +
            (C31836 * C140 - C113 * C127) * C15417 + (C148 - C149) * C15424 +
            (C150 - C151) * C31762) *
               C32169 +
           ((C2024 - C2025) * C15423 + (C2026 - C2027) * C15417 +
            C2375 * C15424 + C2376 * C31762) *
               C32166 +
           (C2048 * C15423 + C2049 * C15417 + C2032 * C15424 + C2033 * C31762) *
               C32157 +
           (C11740 * C15423 + C11741 * C15417 + C13410 * C15424 +
            C13411 * C31762) *
               C32142) *
              C31813 * C235 +
          (((C113 * C239 - C31836 * C249) * C15423 +
            (C113 * C250 - C31836 * C269) * C15417 + (C475 - C476) * C15424 +
            (C477 - C478) * C31762) *
               C32169 +
           ((C2543 - C2544) * C15423 + (C2545 - C2546) * C15417 +
            (C2209 - C2210) * C15424 + (C2211 - C2212) * C31762) *
               C32166 +
           ((C2547 - C2548) * C15423 + (C2549 - C2550) * C15417 +
            (C2217 - C2218) * C15424 + (C2219 - C2220) * C31762) *
               C32157 +
           ((C12021 - C12022) * C15423 + (C12023 - C12024) * C15417 +
            (C13550 - C13551) * C15424 + (C13552 - C13553) * C31762) *
               C32142) *
              C31813 * C236 +
          (((C31836 * C259 - C113 * C244) * C15423 +
            (C31836 * C274 - C113 * C260) * C15417 +
            (C31836 * C261 - C113 * C245) * C15424 +
            (C31836 * C275 - C113 * C262) * C31762) *
               C32169 +
           ((C31836 * C1117 - C113 * C1108) * C15423 +
            (C31836 * C1135 - C113 * C1118) * C15417 +
            (C31836 * C1119 - C113 * C1109) * C15424 +
            (C31836 * C1136 - C113 * C1120) * C31762) *
               C32166 +
           ((C31836 * C1124 - C113 * C1112) * C15423 +
            (C31836 * C1139 - C113 * C1126) * C15417 +
            (C31836 * C1128 - C113 * C1114) * C15424 +
            (C31836 * C1141 - C113 * C1130) * C31762) *
               C32157 +
           ((C31836 * C6815 - C113 * C6812) * C15423 +
            (C31836 * C6821 - C113 * C6816) * C15417 +
            (C31836 * C7170 - C113 * C7169) * C15424 +
            (C31836 * C7172 - C113 * C7171) * C31762) *
               C32142) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C15423 +
            (C31836 * C140 - C113 * C127) * C15417 + (C148 - C149) * C15424 +
            (C150 - C151) * C31762) *
               C32169 +
           ((C2024 - C2025) * C15423 + (C2026 - C2027) * C15417 +
            C2375 * C15424 + C2376 * C31762) *
               C32166 +
           C22275 * C32157 + C22276 * C32142) *
              C341 +
          (((C2025 - C2024) * C15423 + (C2027 - C2026) * C15417 +
            C2377 * C15424 + C2378 * C31762) *
               C32169 +
           ((C2029 - C2028) * C15423 + (C2031 - C2030) * C15417 +
            C2381 * C15424 + C2382 * C31762) *
               C32166 +
           ((C2036 - C2037) * C15423 + (C2038 - C2039) * C15417 +
            C13684 * C15424 + C13685 * C31762) *
               C32157 +
           ((C11743 - C11742) * C15423 + (C11745 - C11744) * C15417 +
            (C11931 - C11932) * C15424 + (C11933 - C11934) * C31762) *
               C32142) *
              C342 +
          (C22275 * C32169 + C22276 * C32166 +
           (C11753 * C15423 + C11754 * C15417 + (C11932 - C11931) * C15424 +
            (C11934 - C11933) * C31762) *
               C32157 +
           ((C11747 - C11746) * C15423 + (C11749 - C11748) * C15417 +
            (C31836 * C11927 - C113 * C11926) * C15424 +
            (C31836 * C11929 - C113 * C11928) * C31762) *
               C32142) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
              C32126 * C259 - C814 * C244) *
                 C15423 +
             (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
              C32126 * C274 - C814 * C260) *
                 C15417 +
             (C819 - C820 + C821 - C822 + C823 - C824) * C15424 +
             (C825 - C826 + C827 - C828 + C829 - C830) * C31762) *
                C20324 +
            ((C11016 - C11017 + C11018 - C11019 + C11020 - C11021) * C15423 +
             (C11022 - C11023 + C11024 - C11025 + C11026 - C11027) * C15417 +
             C21767 * C15424 + C21768 * C31762) *
                C31941) *
               C572 +
           (((C11017 - C11016 + C11019 - C11018 + C11021 - C11020) * C15423 +
             (C11023 - C11022 + C11025 - C11024 + C11027 - C11026) * C15417 +
             C21769 * C15424 + C21770 * C31762) *
                C20324 +
            ((C11029 - C11028 + C11031 - C11030 + C11033 - C11032) * C15423 +
             (C11035 - C11034 + C11037 - C11036 + C11039 - C11038) * C15417 +
             (C11357 - C11358 + C11359 - C11360 + C11361 - C11362) * C15424 +
             (C11363 - C11364 + C11365 - C11366 + C11367 - C11368) * C31762) *
                C31941) *
               C573) *
              C31799 * C468 +
          ((((C820 - C819 + C822 - C821 + C824 - C823) * C15423 +
             (C826 - C825 + C828 - C827 + C830 - C829) * C15417 +
             (C832 - C831 + C834 - C833 + C836 - C835) * C15424 +
             (C838 - C837 + C840 - C839 + C842 - C841) * C31762) *
                C20324 +
            (C21769 * C15423 + C21770 * C15417 +
             (C1481 - C1482 + C1483 - C1484 + C1485 - C1486) * C15424 +
             (C1487 - C1488 + C1489 - C1490 + C1491 - C1492) * C31762) *
                C31941) *
               C572 +
           ((C21767 * C15423 + C21768 * C15417 +
             (C1482 - C1481 + C1484 - C1483 + C1486 - C1485) * C15424 +
             (C1488 - C1487 + C1490 - C1489 + C1492 - C1491) * C31762) *
                C20324 +
            ((C11358 - C11357 + C11360 - C11359 + C11362 - C11361) * C15423 +
             (C11364 - C11363 + C11366 - C11365 + C11368 - C11367) * C15417 +
             (C32161 * C368 - C812 * C351 + C32149 * C1131 - C813 * C1115 +
              C32126 * C1132 - C814 * C1116) *
                 C15424 +
             (C32161 * C381 - C812 * C369 + C32149 * C1142 - C813 * C1133 +
              C32126 * C1143 - C814 * C1134) *
                 C31762) *
                C31941) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C14633 +
             (C31836 * C140 - C113 * C127) * C32167 + (C148 - C149) * C14634 +
             (C150 - C151) * C32160 + C168 * C14635 + C169 * C32147 +
             C170 * C14636 + C171 * C32130) *
                C20324 +
            ((C2024 - C2025) * C14633 + (C2026 - C2027) * C32167 +
             C2375 * C14634 + C2376 * C32160 + C1764 * C14635 + C1765 * C32147 +
             C3439 * C14636 + C3440 * C32130) *
                C31941) *
               C572 +
           (((C2025 - C2024) * C14633 + (C2027 - C2026) * C32167 +
             C2377 * C14634 + C2378 * C32160 + C2379 * C14635 + C2380 * C32147 +
             C3901 * C14636 + C3902 * C32130) *
                C20324 +
            ((C2029 - C2028) * C14633 + (C2031 - C2030) * C32167 +
             C2381 * C14634 + C2382 * C32160 + C2383 * C14635 + C2384 * C32147 +
             (C1774 - C1775) * C14636 + (C1776 - C1777) * C32130) *
                C31941) *
               C573) *
              C31799 * C468 +
          ((((C149 - C148) * C14633 + (C151 - C150) * C32167 +
             (C153 - C152) * C14634 + (C155 - C154) * C32160 +
             (C157 - C156) * C14635 + (C159 - C158) * C32147 +
             (C161 - C160) * C14636 + (C163 - C162) * C32130) *
                C20324 +
            (C2377 * C14633 + C2378 * C32167 + C2379 * C14634 + C2380 * C32160 +
             C3901 * C14635 + C3902 * C32147 + (C591 - C592) * C14636 +
             (C593 - C594) * C32130) *
                C31941) *
               C572 +
           ((C2375 * C14633 + C2376 * C32167 + C1764 * C14634 + C1765 * C32160 +
             C3439 * C14635 + C3440 * C32147 + (C592 - C591) * C14636 +
             (C594 - C593) * C32130) *
                C20324 +
            (C2032 * C14633 + C2033 * C32167 + C1778 * C14634 + C1779 * C32160 +
             (C1775 - C1774) * C14635 + (C1777 - C1776) * C32147 +
             (C31836 * C372 - C113 * C353) * C14636 +
             (C31836 * C383 - C113 * C373) * C32130) *
                C31941) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C15423 +
             (C31836 * C140 - C113 * C127) * C15417 + (C148 - C149) * C15424 +
             (C150 - C151) * C31762) *
                C32169 +
            ((C2024 - C2025) * C15423 + (C2026 - C2027) * C15417 +
             C2375 * C15424 + C2376 * C31762) *
                C32166 +
            C22275 * C32157 + C22276 * C32142) *
               C572 +
           (((C2025 - C2024) * C15423 + (C2027 - C2026) * C15417 +
             C2377 * C15424 + C2378 * C31762) *
                C32169 +
            ((C2029 - C2028) * C15423 + (C2031 - C2030) * C15417 +
             C2381 * C15424 + C2382 * C31762) *
                C32166 +
            ((C2036 - C2037) * C15423 + (C2038 - C2039) * C15417 +
             C13684 * C15424 + C13685 * C31762) *
                C32157 +
            ((C11743 - C11742) * C15423 + (C11745 - C11744) * C15417 +
             (C11931 - C11932) * C15424 + (C11933 - C11934) * C31762) *
                C32142) *
               C573) *
              C31799 * C468 +
          ((((C149 - C148) * C15423 + (C151 - C150) * C15417 +
             (C153 - C152) * C15424 + (C155 - C154) * C31762) *
                C32169 +
            (C2377 * C15423 + C2378 * C15417 + C2379 * C15424 +
             C2380 * C31762) *
                C32166 +
            (C2381 * C15423 + C2382 * C15417 + C2383 * C15424 +
             C2384 * C31762) *
                C32157 +
            (C13684 * C15423 + C13685 * C15417 + (C2044 - C2045) * C15424 +
             (C2046 - C2047) * C31762) *
                C32142) *
               C572 +
           ((C2375 * C15423 + C2376 * C15417 + C1764 * C15424 +
             C1765 * C31762) *
                C32169 +
            (C2032 * C15423 + C2033 * C15417 + C1778 * C15424 +
             C1779 * C31762) *
                C32166 +
            (C13410 * C15423 + C13411 * C15417 + (C2045 - C2044) * C15424 +
             (C2047 - C2046) * C31762) *
                C32157 +
            ((C11932 - C11931) * C15423 + (C11934 - C11933) * C15417 +
             (C31836 * C2015 - C113 * C2004) * C15424 +
             (C31836 * C2022 - C113 * C2016) * C31762) *
                C32142) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C14633 +
            (C31836 * C140 - C113 * C127) * C32167 + (C148 - C149) * C14634 +
            (C150 - C151) * C32160 + C168 * C14635 + C169 * C32147 +
            C170 * C14636 + C171 * C32130) *
               C20324 +
           ((C2024 - C2025) * C14633 + (C2026 - C2027) * C32167 +
            C2375 * C14634 + C2376 * C32160 + C1764 * C14635 + C1765 * C32147 +
            C3439 * C14636 + C3440 * C32130) *
               C31941) *
              C31813 * C235 +
          (((C113 * C239 - C31836 * C249) * C14633 +
            (C113 * C250 - C31836 * C269) * C32167 + (C475 - C476) * C14634 +
            (C477 - C478) * C32160 + (C479 - C480) * C14635 +
            (C481 - C482) * C32147 + (C483 - C484) * C14636 +
            (C485 - C486) * C32130) *
               C20324 +
           ((C2543 - C2544) * C14633 + (C2545 - C2546) * C32167 +
            (C2209 - C2210) * C14634 + (C2211 - C2212) * C32160 +
            (C2213 - C2214) * C14635 + (C2215 - C2216) * C32147 +
            (C3767 - C3768) * C14636 + (C3769 - C3770) * C32130) *
               C31941) *
              C31813 * C236 +
          (((C31836 * C259 - C113 * C244) * C14633 +
            (C31836 * C274 - C113 * C260) * C32167 +
            (C31836 * C261 - C113 * C245) * C14634 +
            (C31836 * C275 - C113 * C262) * C32160 +
            (C31836 * C263 - C113 * C246) * C14635 +
            (C31836 * C276 - C113 * C264) * C32147 +
            (C31836 * C265 - C113 * C247) * C14636 +
            (C31836 * C277 - C113 * C266) * C32130) *
               C20324 +
           ((C31836 * C1117 - C113 * C1108) * C14633 +
            (C31836 * C1135 - C113 * C1118) * C32167 +
            (C31836 * C1119 - C113 * C1109) * C14634 +
            (C31836 * C1136 - C113 * C1120) * C32160 +
            (C31836 * C1121 - C113 * C1110) * C14635 +
            (C31836 * C1137 - C113 * C1122) * C32147 +
            (C31836 * C1465 - C113 * C1464) * C14636 +
            (C31836 * C1467 - C113 * C1466) * C32130) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C14633 +
            (C31836 * C140 - C113 * C127) * C32167 + (C148 - C149) * C14634 +
            (C150 - C151) * C32160 + C168 * C14635 + C169 * C32147 +
            C170 * C14636 + C171 * C32130) *
               C20324 +
           ((C2024 - C2025) * C14633 + (C2026 - C2027) * C32167 +
            C2375 * C14634 + C2376 * C32160 + C1764 * C14635 + C1765 * C32147 +
            C3439 * C14636 + C3440 * C32130) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C149 - C148) * C14633 + (C151 - C150) * C32167 +
            (C153 - C152) * C14634 + (C155 - C154) * C32160 +
            (C157 - C156) * C14635 + (C159 - C158) * C32147 +
            (C161 - C160) * C14636 + (C163 - C162) * C32130) *
               C20324 +
           (C2377 * C14633 + C2378 * C32167 + C2379 * C14634 + C2380 * C32160 +
            C3901 * C14635 + C3902 * C32147 + (C591 - C592) * C14636 +
            (C593 - C594) * C32130) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C168 * C14633 + C169 * C32167 + C170 * C14634 + C171 * C32160 +
            C172 * C14635 + C173 * C32147 + (C165 - C164) * C14636 +
            (C167 - C166) * C32130) *
               C20324 +
           (C1764 * C14633 + C1765 * C32167 + C3439 * C14634 + C3440 * C32160 +
            (C592 - C591) * C14635 + (C594 - C593) * C32147 +
            (C31836 * C575 - C113 * C574) * C14636 +
            (C31836 * C577 - C113 * C576) * C32130) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C15423 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C15417 +
            (C819 - C820 + C821 - C822 + C823 - C824) * C15424 +
            (C825 - C826 + C827 - C828 + C829 - C830) * C31762) *
               C20324 +
           ((C11016 - C11017 + C11018 - C11019 + C11020 - C11021) * C15423 +
            (C11022 - C11023 + C11024 - C11025 + C11026 - C11027) * C15417 +
            (C1470 - C1469 + C1472 - C1471 + C1474 - C1473) * C15424 +
            (C1476 - C1475 + C1478 - C1477 + C1480 - C1479) * C31762) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C820 - C819 + C822 - C821 + C824 - C823) * C15423 +
            (C826 - C825 + C828 - C827 + C830 - C829) * C15417 +
            (C832 - C831 + C834 - C833 + C836 - C835) * C15424 +
            (C838 - C837 + C840 - C839 + C842 - C841) * C31762) *
               C20324 +
           ((C1469 - C1470 + C1471 - C1472 + C1473 - C1474) * C15423 +
            (C1475 - C1476 + C1477 - C1478 + C1479 - C1480) * C15417 +
            (C1481 - C1482 + C1483 - C1484 + C1485 - C1486) * C15424 +
            (C1487 - C1488 + C1489 - C1490 + C1491 - C1492) * C31762) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C863 * C15423 + C864 * C15417 +
            (C844 - C843 + C846 - C845 + C848 - C847) * C15424 +
            (C850 - C849 + C852 - C851 + C854 - C853) * C31762) *
               C20324 +
           ((C1482 - C1481 + C1484 - C1483 + C1486 - C1485) * C15423 +
            (C1488 - C1487 + C1490 - C1489 + C1492 - C1491) * C15417 +
            (C32161 * C360 - C812 * C347 + C32149 * C687 - C813 * C679 +
             C32126 * C1465 - C814 * C1464) *
                C15424 +
            (C32161 * C377 - C812 * C361 + C32149 * C694 - C813 * C688 +
             C32126 * C1467 - C814 * C1466) *
                C31762) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C15423 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C15417 +
            (C819 - C820 + C821 - C822 + C823 - C824) * C15424 +
            (C825 - C826 + C827 - C828 + C829 - C830) * C31762) *
               C20324 +
           ((C11016 - C11017 + C11018 - C11019 + C11020 - C11021) * C15423 +
            (C11022 - C11023 + C11024 - C11025 + C11026 - C11027) * C15417 +
            (C1470 - C1469 + C1472 - C1471 + C1474 - C1473) * C15424 +
            (C1476 - C1475 + C1478 - C1477 + C1480 - C1479) * C31762) *
               C31941) *
              C31813 * C235 +
          (((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
             C814 * C974 - C32126 * C980) *
                C15423 +
            (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
             C814 * C981 - C32126 * C992) *
                C15417 +
            (C1295 - C1296 + C1297 - C1298 + C1299 - C1300) * C15424 +
            (C1301 - C1302 + C1303 - C1304 + C1305 - C1306) * C31762) *
               C20324 +
           ((C11515 - C11516 + C11517 - C11518 + C11519 - C11520) * C15423 +
            (C11521 - C11522 + C11523 - C11524 + C11525 - C11526) * C15417 +
            (C812 * C677 - C32161 * C683 + C813 * C1109 - C32149 * C1119 +
             C814 * C1639 - C32126 * C1643) *
                C15424 +
            (C812 * C684 - C32161 * C692 + C813 * C1120 - C32149 * C1136 +
             C814 * C1644 - C32126 * C1648) *
                C31762) *
               C31941) *
              C31813 * C236 +
          (((C32161 * C259 - C812 * C244 + C32149 * C980 - C813 * C974 +
             C32126 * C986 - C814 * C977) *
                C15423 +
            (C32161 * C274 - C812 * C260 + C32149 * C992 - C813 * C981 +
             C32126 * C995 - C814 * C987) *
                C15417 +
            (C32161 * C261 - C812 * C245 + C32149 * C982 - C813 * C975 +
             C32126 * C988 - C814 * C978) *
                C15424 +
            (C32161 * C275 - C812 * C262 + C32149 * C993 - C813 * C983 +
             C32126 * C996 - C814 * C989) *
                C31762) *
               C20324 +
           ((C32161 * C1117 - C812 * C1108 + C32149 * C1641 - C813 * C1638 +
             C32126 * C6215 - C814 * C6212) *
                C15423 +
            (C32161 * C1135 - C812 * C1118 + C32149 * C1647 - C813 * C1642 +
             C32126 * C6221 - C814 * C6216) *
                C15417 +
            (C32161 * C1119 - C812 * C1109 + C32149 * C1643 - C813 * C1639 +
             C32126 * C6393 - C814 * C6392) *
                C15424 +
            (C32161 * C1136 - C812 * C1120 + C32149 * C1648 - C813 * C1644 +
             C32126 * C6395 - C814 * C6394) *
                C31762) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C15423 +
            (C31836 * C140 - C113 * C127) * C15417 + (C148 - C149) * C15424 +
            (C150 - C151) * C31762) *
               C32169 +
           ((C2024 - C2025) * C15423 + (C2026 - C2027) * C15417 +
            C2375 * C15424 + C2376 * C31762) *
               C32166 +
           (C2048 * C15423 + C2049 * C15417 + C2032 * C15424 + C2033 * C31762) *
               C32157 +
           (C11740 * C15423 + C11741 * C15417 + C13410 * C15424 +
            C13411 * C31762) *
               C32142) *
              C31813 * C31799 * C110 +
          (((C149 - C148) * C15423 + (C151 - C150) * C15417 +
            (C153 - C152) * C15424 + (C155 - C154) * C31762) *
               C32169 +
           (C2377 * C15423 + C2378 * C15417 + C2379 * C15424 + C2380 * C31762) *
               C32166 +
           (C2381 * C15423 + C2382 * C15417 + C2383 * C15424 + C2384 * C31762) *
               C32157 +
           (C13684 * C15423 + C13685 * C15417 + (C2044 - C2045) * C15424 +
            (C2046 - C2047) * C31762) *
               C32142) *
              C31813 * C31799 * C111 +
          ((C168 * C15423 + C169 * C15417 + C170 * C15424 + C171 * C31762) *
               C32169 +
           (C1764 * C15423 + C1765 * C15417 + C3439 * C15424 + C3440 * C31762) *
               C32166 +
           (C1778 * C15423 + C1779 * C15417 + (C1775 - C1774) * C15424 +
            (C1777 - C1776) * C31762) *
               C32157 +
           ((C2045 - C2044) * C15423 + (C2047 - C2046) * C15417 +
            (C31836 * C2371 - C113 * C2370) * C15424 +
            (C31836 * C2373 - C113 * C2372) * C31762) *
               C32142) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C15423 +
            (C31836 * C140 - C113 * C127) * C15417 + (C148 - C149) * C15424 +
            (C150 - C151) * C31762) *
               C32169 +
           ((C2024 - C2025) * C15423 + (C2026 - C2027) * C15417 +
            C2375 * C15424 + C2376 * C31762) *
               C32166 +
           (C2048 * C15423 + C2049 * C15417 + C2032 * C15424 + C2033 * C31762) *
               C32157 +
           (C11740 * C15423 + C11741 * C15417 + C13410 * C15424 +
            C13411 * C31762) *
               C32142) *
              C31813 * C235 +
          (((C113 * C239 - C31836 * C249) * C15423 +
            (C113 * C250 - C31836 * C269) * C15417 + (C475 - C476) * C15424 +
            (C477 - C478) * C31762) *
               C32169 +
           ((C2543 - C2544) * C15423 + (C2545 - C2546) * C15417 +
            (C2209 - C2210) * C15424 + (C2211 - C2212) * C31762) *
               C32166 +
           ((C2547 - C2548) * C15423 + (C2549 - C2550) * C15417 +
            (C2217 - C2218) * C15424 + (C2219 - C2220) * C31762) *
               C32157 +
           ((C12021 - C12022) * C15423 + (C12023 - C12024) * C15417 +
            (C13550 - C13551) * C15424 + (C13552 - C13553) * C31762) *
               C32142) *
              C31813 * C236 +
          (((C31836 * C259 - C113 * C244) * C15423 +
            (C31836 * C274 - C113 * C260) * C15417 +
            (C31836 * C261 - C113 * C245) * C15424 +
            (C31836 * C275 - C113 * C262) * C31762) *
               C32169 +
           ((C31836 * C1117 - C113 * C1108) * C15423 +
            (C31836 * C1135 - C113 * C1118) * C15417 +
            (C31836 * C1119 - C113 * C1109) * C15424 +
            (C31836 * C1136 - C113 * C1120) * C31762) *
               C32166 +
           ((C31836 * C1124 - C113 * C1112) * C15423 +
            (C31836 * C1139 - C113 * C1126) * C15417 +
            (C31836 * C1128 - C113 * C1114) * C15424 +
            (C31836 * C1141 - C113 * C1130) * C31762) *
               C32157 +
           ((C31836 * C6815 - C113 * C6812) * C15423 +
            (C31836 * C6821 - C113 * C6816) * C15417 +
            (C31836 * C7170 - C113 * C7169) * C15424 +
            (C31836 * C7172 - C113 * C7171) * C31762) *
               C32142) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C30885 +
             (C31836 * C140 - C113 * C127) * C31757 + (C148 - C149) * C30881 +
             (C150 - C151) * C31765 + C168 * C30891 + C169 * C17327) *
                C31937 +
            ((C2024 - C2025) * C30885 + (C2026 - C2027) * C31757 +
             C2375 * C30881 + C2376 * C31765 + C1764 * C30891 +
             C1765 * C17327) *
                C31944 +
            C24030 * C23798) *
               C31813 * C466 +
           (((C113 * C239 - C31836 * C249) * C30885 +
             (C113 * C250 - C31836 * C269) * C31757 + (C475 - C476) * C30881 +
             (C477 - C478) * C31765 + (C479 - C480) * C30891 +
             (C481 - C482) * C17327) *
                C31937 +
            ((C2543 - C2544) * C30885 + (C2545 - C2546) * C31757 +
             (C2209 - C2210) * C30881 + (C2211 - C2212) * C31765 +
             (C2213 - C2214) * C30891 + (C2215 - C2216) * C17327) *
                C31944 +
            ((C2547 - C2548) * C30885 + (C2549 - C2550) * C31757 +
             (C2217 - C2218) * C30881 + (C2219 - C2220) * C31765 +
             (C2221 - C2222) * C30891 + (C2223 - C2224) * C17327) *
                C23798) *
               C31813 * C467) *
              C468 +
          ((((C149 - C148) * C30885 + (C151 - C150) * C31757 +
             (C153 - C152) * C30881 + (C155 - C154) * C31765 +
             (C157 - C156) * C30891 + (C159 - C158) * C17327) *
                C31937 +
            (C2377 * C30885 + C2378 * C31757 + C2379 * C30881 + C2380 * C31765 +
             C3901 * C30891 + C3902 * C17327) *
                C31944 +
            (C2381 * C30885 + C2382 * C31757 + C2383 * C30881 + C2384 * C31765 +
             (C1774 - C1775) * C30891 + (C1776 - C1777) * C17327) *
                C23798) *
               C31813 * C466 +
           (((C476 - C475) * C30885 + (C478 - C477) * C31757 +
             (C480 - C479) * C30881 + (C482 - C481) * C31765 +
             (C484 - C483) * C30891 + (C486 - C485) * C17327) *
                C31937 +
            ((C2210 - C2209) * C30885 + (C2212 - C2211) * C31757 +
             (C2214 - C2213) * C30881 + (C2216 - C2215) * C31765 +
             (C3768 - C3767) * C30891 + (C3770 - C3769) * C17327) *
                C31944 +
            ((C2218 - C2217) * C30885 + (C2220 - C2219) * C31757 +
             (C2222 - C2221) * C30881 + (C2224 - C2223) * C31765 +
             (C31836 * C2205 - C113 * C2204) * C30891 +
             (C31836 * C2207 - C113 * C2206) * C17327) *
                C23798) *
               C31813 * C467) *
              C469)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C30885 +
             (C31836 * C140 - C113 * C127) * C31757 + (C148 - C149) * C30881 +
             (C150 - C151) * C31765 + C168 * C30891 + C169 * C17327) *
                C31937 +
            ((C2024 - C2025) * C30885 + (C2026 - C2027) * C31757 +
             C2375 * C30881 + C2376 * C31765 + C1764 * C30891 +
             C1765 * C17327) *
                C31944 +
            C24030 * C23798) *
               C572 +
           (((C2025 - C2024) * C30885 + (C2027 - C2026) * C31757 +
             C2377 * C30881 + C2378 * C31765 + C2379 * C30891 +
             C2380 * C17327) *
                C31937 +
            ((C2029 - C2028) * C30885 + (C2031 - C2030) * C31757 +
             C2381 * C30881 + C2382 * C31765 + C2383 * C30891 +
             C2384 * C17327) *
                C31944 +
            ((C2036 - C2037) * C30885 + (C2038 - C2039) * C31757 +
             C13684 * C30881 + C13685 * C31765 + (C2044 - C2045) * C30891 +
             (C2046 - C2047) * C17327) *
                C23798) *
               C573) *
              C466 +
          ((((C113 * C239 - C31836 * C249) * C30885 +
             (C113 * C250 - C31836 * C269) * C31757 + (C475 - C476) * C30881 +
             (C477 - C478) * C31765 + (C479 - C480) * C30891 +
             (C481 - C482) * C17327) *
                C31937 +
            ((C2543 - C2544) * C30885 + (C2545 - C2546) * C31757 +
             (C2209 - C2210) * C30881 + (C2211 - C2212) * C31765 +
             (C2213 - C2214) * C30891 + (C2215 - C2216) * C17327) *
                C31944 +
            ((C2547 - C2548) * C30885 + (C2549 - C2550) * C31757 +
             (C2217 - C2218) * C30881 + (C2219 - C2220) * C31765 +
             (C2221 - C2222) * C30891 + (C2223 - C2224) * C17327) *
                C23798) *
               C572 +
           (((C2544 - C2543) * C30885 + (C2546 - C2545) * C31757 +
             (C2210 - C2209) * C30881 + (C2212 - C2211) * C31765 +
             (C2214 - C2213) * C30891 + (C2216 - C2215) * C17327) *
                C31937 +
            ((C2548 - C2547) * C30885 + (C2550 - C2549) * C31757 +
             (C2218 - C2217) * C30881 + (C2220 - C2219) * C31765 +
             (C2222 - C2221) * C30891 + (C2224 - C2223) * C17327) *
                C31944 +
            ((C12022 - C12021) * C30885 + (C12024 - C12023) * C31757 +
             (C13551 - C13550) * C30881 + (C13553 - C13552) * C31765 +
             (C31836 * C2537 - C113 * C2532) * C30891 +
             (C31836 * C2541 - C113 * C2538) * C17327) *
                C23798) *
               C573) *
              C467) *
         C31787) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C30885 +
            (C31836 * C140 - C113 * C127) * C31757 + (C148 - C149) * C30881 +
            (C150 - C151) * C31765 + C168 * C30891 + C169 * C17327) *
               C31937 +
           ((C2024 - C2025) * C30885 + (C2026 - C2027) * C31757 +
            C2375 * C30881 + C2376 * C31765 + C1764 * C30891 + C1765 * C17327) *
               C31944 +
           (C2048 * C30885 + C2049 * C31757 + C2032 * C30881 + C2033 * C31765 +
            C1778 * C30891 + C1779 * C17327) *
               C23798) *
              C31813 * C235 +
          (((C113 * C239 - C31836 * C249) * C30885 +
            (C113 * C250 - C31836 * C269) * C31757 + (C475 - C476) * C30881 +
            (C477 - C478) * C31765 + (C479 - C480) * C30891 +
            (C481 - C482) * C17327) *
               C31937 +
           ((C2543 - C2544) * C30885 + (C2545 - C2546) * C31757 +
            (C2209 - C2210) * C30881 + (C2211 - C2212) * C31765 +
            (C2213 - C2214) * C30891 + (C2215 - C2216) * C17327) *
               C31944 +
           ((C2547 - C2548) * C30885 + (C2549 - C2550) * C31757 +
            (C2217 - C2218) * C30881 + (C2219 - C2220) * C31765 +
            (C2221 - C2222) * C30891 + (C2223 - C2224) * C17327) *
               C23798) *
              C31813 * C236 +
          (((C31836 * C259 - C113 * C244) * C30885 +
            (C31836 * C274 - C113 * C260) * C31757 +
            (C31836 * C261 - C113 * C245) * C30881 +
            (C31836 * C275 - C113 * C262) * C31765 +
            (C31836 * C263 - C113 * C246) * C30891 +
            (C31836 * C276 - C113 * C264) * C17327) *
               C31937 +
           ((C31836 * C1117 - C113 * C1108) * C30885 +
            (C31836 * C1135 - C113 * C1118) * C31757 +
            (C31836 * C1119 - C113 * C1109) * C30881 +
            (C31836 * C1136 - C113 * C1120) * C31765 +
            (C31836 * C1121 - C113 * C1110) * C30891 +
            (C31836 * C1137 - C113 * C1122) * C17327) *
               C31944 +
           ((C31836 * C1124 - C113 * C1112) * C30885 +
            (C31836 * C1139 - C113 * C1126) * C31757 +
            (C31836 * C1128 - C113 * C1114) * C30881 +
            (C31836 * C1141 - C113 * C1130) * C31765 +
            (C31836 * C1132 - C113 * C1116) * C30891 +
            (C31836 * C1143 - C113 * C1134) * C17327) *
               C23798) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C30885 +
            (C31836 * C140 - C113 * C127) * C31757 + (C148 - C149) * C30881 +
            (C150 - C151) * C31765 + C168 * C30891 + C169 * C17327) *
               C31937 +
           ((C2024 - C2025) * C30885 + (C2026 - C2027) * C31757 +
            C2375 * C30881 + C2376 * C31765 + C1764 * C30891 + C1765 * C17327) *
               C31944 +
           (C2048 * C30885 + C2049 * C31757 + C2032 * C30881 + C2033 * C31765 +
            C1778 * C30891 + C1779 * C17327) *
               C23798) *
              C31813 * C31799 * C110 +
          (((C149 - C148) * C30885 + (C151 - C150) * C31757 +
            (C153 - C152) * C30881 + (C155 - C154) * C31765 +
            (C157 - C156) * C30891 + (C159 - C158) * C17327) *
               C31937 +
           (C2377 * C30885 + C2378 * C31757 + C2379 * C30881 + C2380 * C31765 +
            C3901 * C30891 + C3902 * C17327) *
               C31944 +
           (C2381 * C30885 + C2382 * C31757 + C2383 * C30881 + C2384 * C31765 +
            (C1774 - C1775) * C30891 + (C1776 - C1777) * C17327) *
               C23798) *
              C31813 * C31799 * C111 +
          ((C168 * C30885 + C169 * C31757 + C170 * C30881 + C171 * C31765 +
            C172 * C30891 + C173 * C17327) *
               C31937 +
           (C1764 * C30885 + C1765 * C31757 + C3439 * C30881 + C3440 * C31765 +
            (C592 - C591) * C30891 + (C594 - C593) * C17327) *
               C31944 +
           (C1778 * C30885 + C1779 * C31757 + (C1775 - C1774) * C30881 +
            (C1777 - C1776) * C31765 + (C31836 * C372 - C113 * C353) * C30891 +
            (C31836 * C383 - C113 * C373) * C17327) *
               C23798) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C30885 +
            (C31836 * C140 - C113 * C127) * C31757 + (C148 - C149) * C30881 +
            (C150 - C151) * C31765 + C168 * C30891 + C169 * C17327) *
               C31937 +
           ((C2024 - C2025) * C30885 + (C2026 - C2027) * C31757 +
            C2375 * C30881 + C2376 * C31765 + C1764 * C30891 + C1765 * C17327) *
               C31944 +
           C24030 * C23798) *
              C341 +
          (((C2025 - C2024) * C30885 + (C2027 - C2026) * C31757 +
            C2377 * C30881 + C2378 * C31765 + C2379 * C30891 + C2380 * C17327) *
               C31937 +
           ((C2029 - C2028) * C30885 + (C2031 - C2030) * C31757 +
            C2381 * C30881 + C2382 * C31765 + C2383 * C30891 + C2384 * C17327) *
               C31944 +
           ((C2036 - C2037) * C30885 + (C2038 - C2039) * C31757 +
            C13684 * C30881 + C13685 * C31765 + (C2044 - C2045) * C30891 +
            (C2046 - C2047) * C17327) *
               C23798) *
              C342 +
          (C24030 * C31937 +
           (C11740 * C30885 + C11741 * C31757 + C13410 * C30881 +
            C13411 * C31765 + (C2045 - C2044) * C30891 +
            (C2047 - C2046) * C17327) *
               C31944 +
           (C11753 * C30885 + C11754 * C31757 + (C11932 - C11931) * C30881 +
            (C11934 - C11933) * C31765 +
            (C31836 * C2015 - C113 * C2004) * C30891 +
            (C31836 * C2022 - C113 * C2016) * C17327) *
               C23798) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C30885 +
             (C31836 * C140 - C113 * C127) * C31757 + (C148 - C149) * C30881 +
             (C150 - C151) * C31765 + C168 * C30891 + C169 * C17327) *
                C31937 +
            ((C2024 - C2025) * C30885 + (C2026 - C2027) * C31757 +
             C2375 * C30881 + C2376 * C31765 + C1764 * C30891 +
             C1765 * C17327) *
                C31944 +
            C24030 * C23798) *
               C572 +
           (((C2025 - C2024) * C30885 + (C2027 - C2026) * C31757 +
             C2377 * C30881 + C2378 * C31765 + C2379 * C30891 +
             C2380 * C17327) *
                C31937 +
            ((C2029 - C2028) * C30885 + (C2031 - C2030) * C31757 +
             C2381 * C30881 + C2382 * C31765 + C2383 * C30891 +
             C2384 * C17327) *
                C31944 +
            ((C2036 - C2037) * C30885 + (C2038 - C2039) * C31757 +
             C13684 * C30881 + C13685 * C31765 + (C2044 - C2045) * C30891 +
             (C2046 - C2047) * C17327) *
                C23798) *
               C573) *
              C31799 * C468 +
          ((((C149 - C148) * C30885 + (C151 - C150) * C31757 +
             (C153 - C152) * C30881 + (C155 - C154) * C31765 +
             (C157 - C156) * C30891 + (C159 - C158) * C17327) *
                C31937 +
            (C2377 * C30885 + C2378 * C31757 + C2379 * C30881 + C2380 * C31765 +
             C3901 * C30891 + C3902 * C17327) *
                C31944 +
            (C2381 * C30885 + C2382 * C31757 + C2383 * C30881 + C2384 * C31765 +
             (C1774 - C1775) * C30891 + (C1776 - C1777) * C17327) *
                C23798) *
               C572 +
           ((C2375 * C30885 + C2376 * C31757 + C1764 * C30881 + C1765 * C31765 +
             C3439 * C30891 + C3440 * C17327) *
                C31937 +
            (C2032 * C30885 + C2033 * C31757 + C1778 * C30881 + C1779 * C31765 +
             (C1775 - C1774) * C30891 + (C1777 - C1776) * C17327) *
                C31944 +
            (C13410 * C30885 + C13411 * C31757 + (C2045 - C2044) * C30881 +
             (C2047 - C2046) * C31765 +
             (C31836 * C2371 - C113 * C2370) * C30891 +
             (C31836 * C2373 - C113 * C2372) * C17327) *
                C23798) *
               C573) *
              C31799 * C469)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C30885 +
            (C31836 * C140 - C113 * C127) * C31757 + (C148 - C149) * C30881 +
            (C150 - C151) * C31765 + C168 * C30891 + C169 * C17327) *
               C31937 +
           ((C2024 - C2025) * C30885 + (C2026 - C2027) * C31757 +
            C2375 * C30881 + C2376 * C31765 + C1764 * C30891 + C1765 * C17327) *
               C31944 +
           (C2048 * C30885 + C2049 * C31757 + C2032 * C30881 + C2033 * C31765 +
            C1778 * C30891 + C1779 * C17327) *
               C23798) *
              C31813 * C31799 * C110 +
          (((C149 - C148) * C30885 + (C151 - C150) * C31757 +
            (C153 - C152) * C30881 + (C155 - C154) * C31765 +
            (C157 - C156) * C30891 + (C159 - C158) * C17327) *
               C31937 +
           (C2377 * C30885 + C2378 * C31757 + C2379 * C30881 + C2380 * C31765 +
            C3901 * C30891 + C3902 * C17327) *
               C31944 +
           (C2381 * C30885 + C2382 * C31757 + C2383 * C30881 + C2384 * C31765 +
            (C1774 - C1775) * C30891 + (C1776 - C1777) * C17327) *
               C23798) *
              C31813 * C31799 * C111 +
          ((C168 * C30885 + C169 * C31757 + C170 * C30881 + C171 * C31765 +
            C172 * C30891 + C173 * C17327) *
               C31937 +
           (C1764 * C30885 + C1765 * C31757 + C3439 * C30881 + C3440 * C31765 +
            (C592 - C591) * C30891 + (C594 - C593) * C17327) *
               C31944 +
           (C1778 * C30885 + C1779 * C31757 + (C1775 - C1774) * C30881 +
            (C1777 - C1776) * C31765 + (C31836 * C372 - C113 * C353) * C30891 +
            (C31836 * C383 - C113 * C373) * C17327) *
               C23798) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C30885 +
            (C31836 * C140 - C113 * C127) * C31757 + (C148 - C149) * C30881 +
            (C150 - C151) * C31765 + C168 * C30891 + C169 * C17327) *
               C31937 +
           ((C2024 - C2025) * C30885 + (C2026 - C2027) * C31757 +
            C2375 * C30881 + C2376 * C31765 + C1764 * C30891 + C1765 * C17327) *
               C31944 +
           (C2048 * C30885 + C2049 * C31757 + C2032 * C30881 + C2033 * C31765 +
            C1778 * C30891 + C1779 * C17327) *
               C23798) *
              C31813 * C235 +
          (((C113 * C239 - C31836 * C249) * C30885 +
            (C113 * C250 - C31836 * C269) * C31757 + (C475 - C476) * C30881 +
            (C477 - C478) * C31765 + (C479 - C480) * C30891 +
            (C481 - C482) * C17327) *
               C31937 +
           ((C2543 - C2544) * C30885 + (C2545 - C2546) * C31757 +
            (C2209 - C2210) * C30881 + (C2211 - C2212) * C31765 +
            (C2213 - C2214) * C30891 + (C2215 - C2216) * C17327) *
               C31944 +
           ((C2547 - C2548) * C30885 + (C2549 - C2550) * C31757 +
            (C2217 - C2218) * C30881 + (C2219 - C2220) * C31765 +
            (C2221 - C2222) * C30891 + (C2223 - C2224) * C17327) *
               C23798) *
              C31813 * C236 +
          (((C31836 * C259 - C113 * C244) * C30885 +
            (C31836 * C274 - C113 * C260) * C31757 +
            (C31836 * C261 - C113 * C245) * C30881 +
            (C31836 * C275 - C113 * C262) * C31765 +
            (C31836 * C263 - C113 * C246) * C30891 +
            (C31836 * C276 - C113 * C264) * C17327) *
               C31937 +
           ((C31836 * C1117 - C113 * C1108) * C30885 +
            (C31836 * C1135 - C113 * C1118) * C31757 +
            (C31836 * C1119 - C113 * C1109) * C30881 +
            (C31836 * C1136 - C113 * C1120) * C31765 +
            (C31836 * C1121 - C113 * C1110) * C30891 +
            (C31836 * C1137 - C113 * C1122) * C17327) *
               C31944 +
           ((C31836 * C1124 - C113 * C1112) * C30885 +
            (C31836 * C1139 - C113 * C1126) * C31757 +
            (C31836 * C1128 - C113 * C1114) * C30881 +
            (C31836 * C1141 - C113 * C1130) * C31765 +
            (C31836 * C1132 - C113 * C1116) * C30891 +
            (C31836 * C1143 - C113 * C1134) * C17327) *
               C23798) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C14633 +
             (C31836 * C140 - C113 * C127) * C32167 + (C148 - C149) * C14634 +
             (C150 - C151) * C32160 + C168 * C14635 + C169 * C32147 +
             C170 * C14636 + C171 * C32130) *
                C20324 +
            ((C2024 - C2025) * C14633 + (C2026 - C2027) * C32167 +
             C2375 * C14634 + C2376 * C32160 + C1764 * C14635 + C1765 * C32147 +
             C3439 * C14636 + C3440 * C32130) *
                C31941) *
               C31813 * C466 +
           (((C113 * C239 - C31836 * C249) * C14633 +
             (C113 * C250 - C31836 * C269) * C32167 + (C475 - C476) * C14634 +
             (C477 - C478) * C32160 + (C479 - C480) * C14635 +
             (C481 - C482) * C32147 + (C483 - C484) * C14636 +
             (C485 - C486) * C32130) *
                C20324 +
            ((C2543 - C2544) * C14633 + (C2545 - C2546) * C32167 +
             (C2209 - C2210) * C14634 + (C2211 - C2212) * C32160 +
             (C2213 - C2214) * C14635 + (C2215 - C2216) * C32147 +
             (C3767 - C3768) * C14636 + (C3769 - C3770) * C32130) *
                C31941) *
               C31813 * C467) *
              C468 +
          ((((C149 - C148) * C14633 + (C151 - C150) * C32167 +
             (C153 - C152) * C14634 + (C155 - C154) * C32160 +
             (C157 - C156) * C14635 + (C159 - C158) * C32147 +
             (C161 - C160) * C14636 + (C163 - C162) * C32130) *
                C20324 +
            (C2377 * C14633 + C2378 * C32167 + C2379 * C14634 + C2380 * C32160 +
             C3901 * C14635 + C3902 * C32147 + (C591 - C592) * C14636 +
             (C593 - C594) * C32130) *
                C31941) *
               C31813 * C466 +
           (((C476 - C475) * C14633 + (C478 - C477) * C32167 +
             (C480 - C479) * C14634 + (C482 - C481) * C32160 +
             (C484 - C483) * C14635 + (C486 - C485) * C32147 +
             (C488 - C487) * C14636 + (C490 - C489) * C32130) *
                C20324 +
            ((C2210 - C2209) * C14633 + (C2212 - C2211) * C32167 +
             (C2214 - C2213) * C14634 + (C2216 - C2215) * C32160 +
             (C3768 - C3767) * C14635 + (C3770 - C3769) * C32147 +
             (C31836 * C689 - C113 * C680) * C14636 +
             (C31836 * C695 - C113 * C690) * C32130) *
                C31941) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
              C32126 * C259 - C814 * C244) *
                 C15423 +
             (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
              C32126 * C274 - C814 * C260) *
                 C15417 +
             (C819 - C820 + C821 - C822 + C823 - C824) * C15424 +
             (C825 - C826 + C827 - C828 + C829 - C830) * C31762) *
                C20324 +
            ((C11016 - C11017 + C11018 - C11019 + C11020 - C11021) * C15423 +
             (C11022 - C11023 + C11024 - C11025 + C11026 - C11027) * C15417 +
             (C1470 - C1469 + C1472 - C1471 + C1474 - C1473) * C15424 +
             (C1476 - C1475 + C1478 - C1477 + C1480 - C1479) * C31762) *
                C31941) *
               C31813 * C466 +
           (((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
              C814 * C974 - C32126 * C980) *
                 C15423 +
             (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
              C814 * C981 - C32126 * C992) *
                 C15417 +
             (C1295 - C1296 + C1297 - C1298 + C1299 - C1300) * C15424 +
             (C1301 - C1302 + C1303 - C1304 + C1305 - C1306) * C31762) *
                C20324 +
            ((C11515 - C11516 + C11517 - C11518 + C11519 - C11520) * C15423 +
             (C11521 - C11522 + C11523 - C11524 + C11525 - C11526) * C15417 +
             (C21545 - C21546 + C21547 - C21548 + C21549 - C21550) * C15424 +
             (C21551 - C21552 + C21553 - C21554 + C21555 - C21556) * C31762) *
                C31941) *
               C31813 * C467) *
              C468 +
          ((((C820 - C819 + C822 - C821 + C824 - C823) * C15423 +
             (C826 - C825 + C828 - C827 + C830 - C829) * C15417 +
             (C832 - C831 + C834 - C833 + C836 - C835) * C15424 +
             (C838 - C837 + C840 - C839 + C842 - C841) * C31762) *
                C20324 +
            ((C1469 - C1470 + C1471 - C1472 + C1473 - C1474) * C15423 +
             (C1475 - C1476 + C1477 - C1478 + C1479 - C1480) * C15417 +
             (C1481 - C1482 + C1483 - C1484 + C1485 - C1486) * C15424 +
             (C1487 - C1488 + C1489 - C1490 + C1491 - C1492) * C31762) *
                C31941) *
               C31813 * C466 +
           (((C1296 - C1295 + C1298 - C1297 + C1300 - C1299) * C15423 +
             (C1302 - C1301 + C1304 - C1303 + C1306 - C1305) * C15417 +
             (C1308 - C1307 + C1310 - C1309 + C1312 - C1311) * C15424 +
             (C1314 - C1313 + C1316 - C1315 + C1318 - C1317) * C31762) *
                C20324 +
            ((C21546 - C21545 + C21548 - C21547 + C21550 - C21549) * C15423 +
             (C21552 - C21551 + C21554 - C21553 + C21556 - C21555) * C15417 +
             (C32161 * C685 - C812 * C678 + C32149 * C1121 - C813 * C1110 +
              C32126 * C1645 - C814 * C1640) *
                 C15424 +
             (C32161 * C693 - C812 * C686 + C32149 * C1137 - C813 * C1122 +
              C32126 * C1649 - C814 * C1646) *
                 C31762) *
                C31941) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C14633 +
             (C31836 * C140 - C113 * C127) * C32167 + (C148 - C149) * C14634 +
             (C150 - C151) * C32160 + C168 * C14635 + C169 * C32147 +
             C170 * C14636 + C171 * C32130) *
                C20324 +
            ((C2024 - C2025) * C14633 + (C2026 - C2027) * C32167 +
             C2375 * C14634 + C2376 * C32160 + C1764 * C14635 + C1765 * C32147 +
             C3439 * C14636 + C3440 * C32130) *
                C31941) *
               C572 +
           (((C2025 - C2024) * C14633 + (C2027 - C2026) * C32167 +
             C2377 * C14634 + C2378 * C32160 + C2379 * C14635 + C2380 * C32147 +
             C3901 * C14636 + C3902 * C32130) *
                C20324 +
            ((C2029 - C2028) * C14633 + (C2031 - C2030) * C32167 +
             C2381 * C14634 + C2382 * C32160 + C2383 * C14635 + C2384 * C32147 +
             (C1774 - C1775) * C14636 + (C1776 - C1777) * C32130) *
                C31941) *
               C573) *
              C466 +
          ((((C113 * C239 - C31836 * C249) * C14633 +
             (C113 * C250 - C31836 * C269) * C32167 + (C475 - C476) * C14634 +
             (C477 - C478) * C32160 + (C479 - C480) * C14635 +
             (C481 - C482) * C32147 + (C483 - C484) * C14636 +
             (C485 - C486) * C32130) *
                C20324 +
            ((C2543 - C2544) * C14633 + (C2545 - C2546) * C32167 +
             (C2209 - C2210) * C14634 + (C2211 - C2212) * C32160 +
             (C2213 - C2214) * C14635 + (C2215 - C2216) * C32147 +
             (C3767 - C3768) * C14636 + (C3769 - C3770) * C32130) *
                C31941) *
               C572 +
           (((C2544 - C2543) * C14633 + (C2546 - C2545) * C32167 +
             (C2210 - C2209) * C14634 + (C2212 - C2211) * C32160 +
             (C2214 - C2213) * C14635 + (C2216 - C2215) * C32147 +
             (C3768 - C3767) * C14636 + (C3770 - C3769) * C32130) *
                C20324 +
            ((C2548 - C2547) * C14633 + (C2550 - C2549) * C32167 +
             (C2218 - C2217) * C14634 + (C2220 - C2219) * C32160 +
             (C2222 - C2221) * C14635 + (C2224 - C2223) * C32147 +
             (C31836 * C2205 - C113 * C2204) * C14636 +
             (C31836 * C2207 - C113 * C2206) * C32130) *
                C31941) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
              C32126 * C259 - C814 * C244) *
                 C15423 +
             (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
              C32126 * C274 - C814 * C260) *
                 C15417 +
             (C819 - C820 + C821 - C822 + C823 - C824) * C15424 +
             (C825 - C826 + C827 - C828 + C829 - C830) * C31762) *
                C20324 +
            ((C11016 - C11017 + C11018 - C11019 + C11020 - C11021) * C15423 +
             (C11022 - C11023 + C11024 - C11025 + C11026 - C11027) * C15417 +
             C21767 * C15424 + C21768 * C31762) *
                C31941) *
               C572 +
           (((C11017 - C11016 + C11019 - C11018 + C11021 - C11020) * C15423 +
             (C11023 - C11022 + C11025 - C11024 + C11027 - C11026) * C15417 +
             C21769 * C15424 + C21770 * C31762) *
                C20324 +
            ((C11029 - C11028 + C11031 - C11030 + C11033 - C11032) * C15423 +
             (C11035 - C11034 + C11037 - C11036 + C11039 - C11038) * C15417 +
             (C11357 - C11358 + C11359 - C11360 + C11361 - C11362) * C15424 +
             (C11363 - C11364 + C11365 - C11366 + C11367 - C11368) * C31762) *
                C31941) *
               C573) *
              C466 +
          ((((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
              C814 * C974 - C32126 * C980) *
                 C15423 +
             (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
              C814 * C981 - C32126 * C992) *
                 C15417 +
             (C1295 - C1296 + C1297 - C1298 + C1299 - C1300) * C15424 +
             (C1301 - C1302 + C1303 - C1304 + C1305 - C1306) * C31762) *
                C20324 +
            ((C11515 - C11516 + C11517 - C11518 + C11519 - C11520) * C15423 +
             (C11521 - C11522 + C11523 - C11524 + C11525 - C11526) * C15417 +
             (C21545 - C21546 + C21547 - C21548 + C21549 - C21550) * C15424 +
             (C21551 - C21552 + C21553 - C21554 + C21555 - C21556) * C31762) *
                C31941) *
               C572 +
           (((C11516 - C11515 + C11518 - C11517 + C11520 - C11519) * C15423 +
             (C11522 - C11521 + C11524 - C11523 + C11526 - C11525) * C15417 +
             (C21546 - C21545 + C21548 - C21547 + C21550 - C21549) * C15424 +
             (C21552 - C21551 + C21554 - C21553 + C21556 - C21555) * C31762) *
                C20324 +
            ((C11528 - C11527 + C11530 - C11529 + C11532 - C11531) * C15423 +
             (C11534 - C11533 + C11536 - C11535 + C11538 - C11537) * C15417 +
             (C32161 * C1127 - C812 * C1113 + C32149 * C1128 - C813 * C1114 +
              C32126 * C7020 - C814 * C7019) *
                 C15424 +
             (C32161 * C1140 - C812 * C1129 + C32149 * C1141 - C813 * C1130 +
              C32126 * C7022 - C814 * C7021) *
                 C31762) *
                C31941) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C14633 +
            (C31836 * C140 - C113 * C127) * C32167 + (C148 - C149) * C14634 +
            (C150 - C151) * C32160 + C168 * C14635 + C169 * C32147 +
            C170 * C14636 + C171 * C32130) *
               C20324 +
           ((C2024 - C2025) * C14633 + (C2026 - C2027) * C32167 +
            C2375 * C14634 + C2376 * C32160 + C1764 * C14635 + C1765 * C32147 +
            C3439 * C14636 + C3440 * C32130) *
               C31941) *
              C31813 * C235 +
          (((C113 * C239 - C31836 * C249) * C14633 +
            (C113 * C250 - C31836 * C269) * C32167 + (C475 - C476) * C14634 +
            (C477 - C478) * C32160 + (C479 - C480) * C14635 +
            (C481 - C482) * C32147 + (C483 - C484) * C14636 +
            (C485 - C486) * C32130) *
               C20324 +
           ((C2543 - C2544) * C14633 + (C2545 - C2546) * C32167 +
            (C2209 - C2210) * C14634 + (C2211 - C2212) * C32160 +
            (C2213 - C2214) * C14635 + (C2215 - C2216) * C32147 +
            (C3767 - C3768) * C14636 + (C3769 - C3770) * C32130) *
               C31941) *
              C31813 * C236 +
          (((C31836 * C259 - C113 * C244) * C14633 +
            (C31836 * C274 - C113 * C260) * C32167 +
            (C31836 * C261 - C113 * C245) * C14634 +
            (C31836 * C275 - C113 * C262) * C32160 +
            (C31836 * C263 - C113 * C246) * C14635 +
            (C31836 * C276 - C113 * C264) * C32147 +
            (C31836 * C265 - C113 * C247) * C14636 +
            (C31836 * C277 - C113 * C266) * C32130) *
               C20324 +
           ((C31836 * C1117 - C113 * C1108) * C14633 +
            (C31836 * C1135 - C113 * C1118) * C32167 +
            (C31836 * C1119 - C113 * C1109) * C14634 +
            (C31836 * C1136 - C113 * C1120) * C32160 +
            (C31836 * C1121 - C113 * C1110) * C14635 +
            (C31836 * C1137 - C113 * C1122) * C32147 +
            (C31836 * C1465 - C113 * C1464) * C14636 +
            (C31836 * C1467 - C113 * C1466) * C32130) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C14633 +
            (C31836 * C140 - C113 * C127) * C32167 + (C148 - C149) * C14634 +
            (C150 - C151) * C32160 + C168 * C14635 + C169 * C32147 +
            C170 * C14636 + C171 * C32130) *
               C20324 +
           ((C2024 - C2025) * C14633 + (C2026 - C2027) * C32167 +
            C2375 * C14634 + C2376 * C32160 + C1764 * C14635 + C1765 * C32147 +
            C3439 * C14636 + C3440 * C32130) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C149 - C148) * C14633 + (C151 - C150) * C32167 +
            (C153 - C152) * C14634 + (C155 - C154) * C32160 +
            (C157 - C156) * C14635 + (C159 - C158) * C32147 +
            (C161 - C160) * C14636 + (C163 - C162) * C32130) *
               C20324 +
           (C2377 * C14633 + C2378 * C32167 + C2379 * C14634 + C2380 * C32160 +
            C3901 * C14635 + C3902 * C32147 + (C591 - C592) * C14636 +
            (C593 - C594) * C32130) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C168 * C14633 + C169 * C32167 + C170 * C14634 + C171 * C32160 +
            C172 * C14635 + C173 * C32147 + (C165 - C164) * C14636 +
            (C167 - C166) * C32130) *
               C20324 +
           (C1764 * C14633 + C1765 * C32167 + C3439 * C14634 + C3440 * C32160 +
            (C592 - C591) * C14635 + (C594 - C593) * C32147 +
            (C31836 * C575 - C113 * C574) * C14636 +
            (C31836 * C577 - C113 * C576) * C32130) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C14633 +
            (C31836 * C140 - C113 * C127) * C32167 + (C148 - C149) * C14634 +
            (C150 - C151) * C32160 + C168 * C14635 + C169 * C32147 +
            C170 * C14636 + C171 * C32130) *
               C20324 +
           ((C2024 - C2025) * C14633 + (C2026 - C2027) * C32167 +
            C2375 * C14634 + C2376 * C32160 + C1764 * C14635 + C1765 * C32147 +
            C3439 * C14636 + C3440 * C32130) *
               C31941) *
              C341 +
          (((C2025 - C2024) * C14633 + (C2027 - C2026) * C32167 +
            C2377 * C14634 + C2378 * C32160 + C2379 * C14635 + C2380 * C32147 +
            C3901 * C14636 + C3902 * C32130) *
               C20324 +
           ((C2029 - C2028) * C14633 + (C2031 - C2030) * C32167 +
            C2381 * C14634 + C2382 * C32160 + C2383 * C14635 + C2384 * C32147 +
            (C1774 - C1775) * C14636 + (C1776 - C1777) * C32130) *
               C31941) *
              C342 +
          ((C2048 * C14633 + C2049 * C32167 + C2032 * C14634 + C2033 * C32160 +
            C1778 * C14635 + C1779 * C32147 + (C1775 - C1774) * C14636 +
            (C1777 - C1776) * C32130) *
               C20324 +
           (C11740 * C14633 + C11741 * C32167 + C13410 * C14634 +
            C13411 * C32160 + (C2045 - C2044) * C14635 +
            (C2047 - C2046) * C32147 +
            (C31836 * C2371 - C113 * C2370) * C14636 +
            (C31836 * C2373 - C113 * C2372) * C32130) *
               C31941) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C15423 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C15417 +
            (C819 - C820 + C821 - C822 + C823 - C824) * C15424 +
            (C825 - C826 + C827 - C828 + C829 - C830) * C31762) *
               C20324 +
           ((C11016 - C11017 + C11018 - C11019 + C11020 - C11021) * C15423 +
            (C11022 - C11023 + C11024 - C11025 + C11026 - C11027) * C15417 +
            (C1470 - C1469 + C1472 - C1471 + C1474 - C1473) * C15424 +
            (C1476 - C1475 + C1478 - C1477 + C1480 - C1479) * C31762) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C820 - C819 + C822 - C821 + C824 - C823) * C15423 +
            (C826 - C825 + C828 - C827 + C830 - C829) * C15417 +
            (C832 - C831 + C834 - C833 + C836 - C835) * C15424 +
            (C838 - C837 + C840 - C839 + C842 - C841) * C31762) *
               C20324 +
           ((C1469 - C1470 + C1471 - C1472 + C1473 - C1474) * C15423 +
            (C1475 - C1476 + C1477 - C1478 + C1479 - C1480) * C15417 +
            (C1481 - C1482 + C1483 - C1484 + C1485 - C1486) * C15424 +
            (C1487 - C1488 + C1489 - C1490 + C1491 - C1492) * C31762) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C863 * C15423 + C864 * C15417 +
            (C844 - C843 + C846 - C845 + C848 - C847) * C15424 +
            (C850 - C849 + C852 - C851 + C854 - C853) * C31762) *
               C20324 +
           ((C1482 - C1481 + C1484 - C1483 + C1486 - C1485) * C15423 +
            (C1488 - C1487 + C1490 - C1489 + C1492 - C1491) * C15417 +
            (C32161 * C360 - C812 * C347 + C32149 * C687 - C813 * C679 +
             C32126 * C1465 - C814 * C1464) *
                C15424 +
            (C32161 * C377 - C812 * C361 + C32149 * C694 - C813 * C688 +
             C32126 * C1467 - C814 * C1466) *
                C31762) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C15423 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C15417 +
            (C819 - C820 + C821 - C822 + C823 - C824) * C15424 +
            (C825 - C826 + C827 - C828 + C829 - C830) * C31762) *
               C20324 +
           ((C11016 - C11017 + C11018 - C11019 + C11020 - C11021) * C15423 +
            (C11022 - C11023 + C11024 - C11025 + C11026 - C11027) * C15417 +
            (C1470 - C1469 + C1472 - C1471 + C1474 - C1473) * C15424 +
            (C1476 - C1475 + C1478 - C1477 + C1480 - C1479) * C31762) *
               C31941) *
              C31813 * C235 +
          (((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
             C814 * C974 - C32126 * C980) *
                C15423 +
            (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
             C814 * C981 - C32126 * C992) *
                C15417 +
            (C1295 - C1296 + C1297 - C1298 + C1299 - C1300) * C15424 +
            (C1301 - C1302 + C1303 - C1304 + C1305 - C1306) * C31762) *
               C20324 +
           ((C11515 - C11516 + C11517 - C11518 + C11519 - C11520) * C15423 +
            (C11521 - C11522 + C11523 - C11524 + C11525 - C11526) * C15417 +
            (C812 * C677 - C32161 * C683 + C813 * C1109 - C32149 * C1119 +
             C814 * C1639 - C32126 * C1643) *
                C15424 +
            (C812 * C684 - C32161 * C692 + C813 * C1120 - C32149 * C1136 +
             C814 * C1644 - C32126 * C1648) *
                C31762) *
               C31941) *
              C31813 * C236 +
          (((C32161 * C259 - C812 * C244 + C32149 * C980 - C813 * C974 +
             C32126 * C986 - C814 * C977) *
                C15423 +
            (C32161 * C274 - C812 * C260 + C32149 * C992 - C813 * C981 +
             C32126 * C995 - C814 * C987) *
                C15417 +
            (C32161 * C261 - C812 * C245 + C32149 * C982 - C813 * C975 +
             C32126 * C988 - C814 * C978) *
                C15424 +
            (C32161 * C275 - C812 * C262 + C32149 * C993 - C813 * C983 +
             C32126 * C996 - C814 * C989) *
                C31762) *
               C20324 +
           ((C32161 * C1117 - C812 * C1108 + C32149 * C1641 - C813 * C1638 +
             C32126 * C6215 - C814 * C6212) *
                C15423 +
            (C32161 * C1135 - C812 * C1118 + C32149 * C1647 - C813 * C1642 +
             C32126 * C6221 - C814 * C6216) *
                C15417 +
            (C32161 * C1119 - C812 * C1109 + C32149 * C1643 - C813 * C1639 +
             C32126 * C6393 - C814 * C6392) *
                C15424 +
            (C32161 * C1136 - C812 * C1120 + C32149 * C1648 - C813 * C1644 +
             C32126 * C6395 - C814 * C6394) *
                C31762) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C15423 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C15417 +
            (C819 - C820 + C821 - C822 + C823 - C824) * C15424 +
            (C825 - C826 + C827 - C828 + C829 - C830) * C31762) *
               C20324 +
           ((C11016 - C11017 + C11018 - C11019 + C11020 - C11021) * C15423 +
            (C11022 - C11023 + C11024 - C11025 + C11026 - C11027) * C15417 +
            (C1470 - C1469 + C1472 - C1471 + C1474 - C1473) * C15424 +
            (C1476 - C1475 + C1478 - C1477 + C1480 - C1479) * C31762) *
               C31941) *
              C341 +
          (((C11017 - C11016 + C11019 - C11018 + C11021 - C11020) * C15423 +
            (C11023 - C11022 + C11025 - C11024 + C11027 - C11026) * C15417 +
            (C1469 - C1470 + C1471 - C1472 + C1473 - C1474) * C15424 +
            (C1475 - C1476 + C1477 - C1478 + C1479 - C1480) * C31762) *
               C20324 +
           ((C11029 - C11028 + C11031 - C11030 + C11033 - C11032) * C15423 +
            (C11035 - C11034 + C11037 - C11036 + C11039 - C11038) * C15417 +
            (C11357 - C11358 + C11359 - C11360 + C11361 - C11362) * C15424 +
            (C11363 - C11364 + C11365 - C11366 + C11367 - C11368) * C31762) *
               C31941) *
              C342 +
          ((C11060 * C15423 + C11061 * C15417 +
            (C11358 - C11357 + C11360 - C11359 + C11362 - C11361) * C15424 +
            (C11364 - C11363 + C11366 - C11365 + C11368 - C11367) * C31762) *
               C20324 +
           ((C11041 - C11040 + C11043 - C11042 + C11045 - C11044) * C15423 +
            (C11047 - C11046 + C11049 - C11048 + C11051 - C11050) * C15417 +
            (C32161 * C2007 - C812 * C2000 + C32149 * C2535 - C813 * C2531 +
             C32126 * C7170 - C814 * C7169) *
                C15424 +
            (C32161 * C2018 - C812 * C2008 + C32149 * C2540 - C813 * C2536 +
             C32126 * C7172 - C814 * C7171) *
                C31762) *
               C31941) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C14633 +
             (C31836 * C140 - C113 * C127) * C32167 + (C148 - C149) * C14634 +
             (C150 - C151) * C32160 + C168 * C14635 + C169 * C32147 +
             C170 * C14636 + C171 * C32130) *
                C20324 +
            ((C2024 - C2025) * C14633 + (C2026 - C2027) * C32167 +
             C2375 * C14634 + C2376 * C32160 + C1764 * C14635 + C1765 * C32147 +
             C3439 * C14636 + C3440 * C32130) *
                C31941) *
               C572 +
           (((C2025 - C2024) * C14633 + (C2027 - C2026) * C32167 +
             C2377 * C14634 + C2378 * C32160 + C2379 * C14635 + C2380 * C32147 +
             C3901 * C14636 + C3902 * C32130) *
                C20324 +
            ((C2029 - C2028) * C14633 + (C2031 - C2030) * C32167 +
             C2381 * C14634 + C2382 * C32160 + C2383 * C14635 + C2384 * C32147 +
             (C1774 - C1775) * C14636 + (C1776 - C1777) * C32130) *
                C31941) *
               C573) *
              C31799 * C468 +
          ((((C149 - C148) * C14633 + (C151 - C150) * C32167 +
             (C153 - C152) * C14634 + (C155 - C154) * C32160 +
             (C157 - C156) * C14635 + (C159 - C158) * C32147 +
             (C161 - C160) * C14636 + (C163 - C162) * C32130) *
                C20324 +
            (C2377 * C14633 + C2378 * C32167 + C2379 * C14634 + C2380 * C32160 +
             C3901 * C14635 + C3902 * C32147 + (C591 - C592) * C14636 +
             (C593 - C594) * C32130) *
                C31941) *
               C572 +
           ((C2375 * C14633 + C2376 * C32167 + C1764 * C14634 + C1765 * C32160 +
             C3439 * C14635 + C3440 * C32147 + (C592 - C591) * C14636 +
             (C594 - C593) * C32130) *
                C20324 +
            (C2032 * C14633 + C2033 * C32167 + C1778 * C14634 + C1779 * C32160 +
             (C1775 - C1774) * C14635 + (C1777 - C1776) * C32147 +
             (C31836 * C372 - C113 * C353) * C14636 +
             (C31836 * C383 - C113 * C373) * C32130) *
                C31941) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
              C32126 * C259 - C814 * C244) *
                 C15423 +
             (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
              C32126 * C274 - C814 * C260) *
                 C15417 +
             (C819 - C820 + C821 - C822 + C823 - C824) * C15424 +
             (C825 - C826 + C827 - C828 + C829 - C830) * C31762) *
                C20324 +
            ((C11016 - C11017 + C11018 - C11019 + C11020 - C11021) * C15423 +
             (C11022 - C11023 + C11024 - C11025 + C11026 - C11027) * C15417 +
             C21767 * C15424 + C21768 * C31762) *
                C31941) *
               C572 +
           (((C11017 - C11016 + C11019 - C11018 + C11021 - C11020) * C15423 +
             (C11023 - C11022 + C11025 - C11024 + C11027 - C11026) * C15417 +
             C21769 * C15424 + C21770 * C31762) *
                C20324 +
            ((C11029 - C11028 + C11031 - C11030 + C11033 - C11032) * C15423 +
             (C11035 - C11034 + C11037 - C11036 + C11039 - C11038) * C15417 +
             (C11357 - C11358 + C11359 - C11360 + C11361 - C11362) * C15424 +
             (C11363 - C11364 + C11365 - C11366 + C11367 - C11368) * C31762) *
                C31941) *
               C573) *
              C31799 * C468 +
          ((((C820 - C819 + C822 - C821 + C824 - C823) * C15423 +
             (C826 - C825 + C828 - C827 + C830 - C829) * C15417 +
             (C832 - C831 + C834 - C833 + C836 - C835) * C15424 +
             (C838 - C837 + C840 - C839 + C842 - C841) * C31762) *
                C20324 +
            (C21769 * C15423 + C21770 * C15417 +
             (C1481 - C1482 + C1483 - C1484 + C1485 - C1486) * C15424 +
             (C1487 - C1488 + C1489 - C1490 + C1491 - C1492) * C31762) *
                C31941) *
               C572 +
           ((C21767 * C15423 + C21768 * C15417 +
             (C1482 - C1481 + C1484 - C1483 + C1486 - C1485) * C15424 +
             (C1488 - C1487 + C1490 - C1489 + C1492 - C1491) * C31762) *
                C20324 +
            ((C11358 - C11357 + C11360 - C11359 + C11362 - C11361) * C15423 +
             (C11364 - C11363 + C11366 - C11365 + C11368 - C11367) * C15417 +
             (C32161 * C368 - C812 * C351 + C32149 * C1131 - C813 * C1115 +
              C32126 * C1132 - C814 * C1116) *
                 C15424 +
             (C32161 * C381 - C812 * C369 + C32149 * C1142 - C813 * C1133 +
              C32126 * C1143 - C814 * C1134) *
                 C31762) *
                C31941) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C14633 +
            (C31836 * C140 - C113 * C127) * C32167 + (C148 - C149) * C14634 +
            (C150 - C151) * C32160 + C168 * C14635 + C169 * C32147 +
            C170 * C14636 + C171 * C32130) *
               C20324 +
           ((C2024 - C2025) * C14633 + (C2026 - C2027) * C32167 +
            C2375 * C14634 + C2376 * C32160 + C1764 * C14635 + C1765 * C32147 +
            C3439 * C14636 + C3440 * C32130) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C149 - C148) * C14633 + (C151 - C150) * C32167 +
            (C153 - C152) * C14634 + (C155 - C154) * C32160 +
            (C157 - C156) * C14635 + (C159 - C158) * C32147 +
            (C161 - C160) * C14636 + (C163 - C162) * C32130) *
               C20324 +
           (C2377 * C14633 + C2378 * C32167 + C2379 * C14634 + C2380 * C32160 +
            C3901 * C14635 + C3902 * C32147 + (C591 - C592) * C14636 +
            (C593 - C594) * C32130) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C168 * C14633 + C169 * C32167 + C170 * C14634 + C171 * C32160 +
            C172 * C14635 + C173 * C32147 + (C165 - C164) * C14636 +
            (C167 - C166) * C32130) *
               C20324 +
           (C1764 * C14633 + C1765 * C32167 + C3439 * C14634 + C3440 * C32160 +
            (C592 - C591) * C14635 + (C594 - C593) * C32147 +
            (C31836 * C575 - C113 * C574) * C14636 +
            (C31836 * C577 - C113 * C576) * C32130) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C14633 +
            (C31836 * C140 - C113 * C127) * C32167 + (C148 - C149) * C14634 +
            (C150 - C151) * C32160 + C168 * C14635 + C169 * C32147 +
            C170 * C14636 + C171 * C32130) *
               C20324 +
           ((C2024 - C2025) * C14633 + (C2026 - C2027) * C32167 +
            C2375 * C14634 + C2376 * C32160 + C1764 * C14635 + C1765 * C32147 +
            C3439 * C14636 + C3440 * C32130) *
               C31941) *
              C31813 * C235 +
          (((C113 * C239 - C31836 * C249) * C14633 +
            (C113 * C250 - C31836 * C269) * C32167 + (C475 - C476) * C14634 +
            (C477 - C478) * C32160 + (C479 - C480) * C14635 +
            (C481 - C482) * C32147 + (C483 - C484) * C14636 +
            (C485 - C486) * C32130) *
               C20324 +
           ((C2543 - C2544) * C14633 + (C2545 - C2546) * C32167 +
            (C2209 - C2210) * C14634 + (C2211 - C2212) * C32160 +
            (C2213 - C2214) * C14635 + (C2215 - C2216) * C32147 +
            (C3767 - C3768) * C14636 + (C3769 - C3770) * C32130) *
               C31941) *
              C31813 * C236 +
          (((C31836 * C259 - C113 * C244) * C14633 +
            (C31836 * C274 - C113 * C260) * C32167 +
            (C31836 * C261 - C113 * C245) * C14634 +
            (C31836 * C275 - C113 * C262) * C32160 +
            (C31836 * C263 - C113 * C246) * C14635 +
            (C31836 * C276 - C113 * C264) * C32147 +
            (C31836 * C265 - C113 * C247) * C14636 +
            (C31836 * C277 - C113 * C266) * C32130) *
               C20324 +
           ((C31836 * C1117 - C113 * C1108) * C14633 +
            (C31836 * C1135 - C113 * C1118) * C32167 +
            (C31836 * C1119 - C113 * C1109) * C14634 +
            (C31836 * C1136 - C113 * C1120) * C32160 +
            (C31836 * C1121 - C113 * C1110) * C14635 +
            (C31836 * C1137 - C113 * C1122) * C32147 +
            (C31836 * C1465 - C113 * C1464) * C14636 +
            (C31836 * C1467 - C113 * C1466) * C32130) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C15423 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C15417 +
            (C819 - C820 + C821 - C822 + C823 - C824) * C15424 +
            (C825 - C826 + C827 - C828 + C829 - C830) * C31762) *
               C20324 +
           ((C11016 - C11017 + C11018 - C11019 + C11020 - C11021) * C15423 +
            (C11022 - C11023 + C11024 - C11025 + C11026 - C11027) * C15417 +
            (C1470 - C1469 + C1472 - C1471 + C1474 - C1473) * C15424 +
            (C1476 - C1475 + C1478 - C1477 + C1480 - C1479) * C31762) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C820 - C819 + C822 - C821 + C824 - C823) * C15423 +
            (C826 - C825 + C828 - C827 + C830 - C829) * C15417 +
            (C832 - C831 + C834 - C833 + C836 - C835) * C15424 +
            (C838 - C837 + C840 - C839 + C842 - C841) * C31762) *
               C20324 +
           ((C1469 - C1470 + C1471 - C1472 + C1473 - C1474) * C15423 +
            (C1475 - C1476 + C1477 - C1478 + C1479 - C1480) * C15417 +
            (C1481 - C1482 + C1483 - C1484 + C1485 - C1486) * C15424 +
            (C1487 - C1488 + C1489 - C1490 + C1491 - C1492) * C31762) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C863 * C15423 + C864 * C15417 +
            (C844 - C843 + C846 - C845 + C848 - C847) * C15424 +
            (C850 - C849 + C852 - C851 + C854 - C853) * C31762) *
               C20324 +
           ((C1482 - C1481 + C1484 - C1483 + C1486 - C1485) * C15423 +
            (C1488 - C1487 + C1490 - C1489 + C1492 - C1491) * C15417 +
            (C32161 * C360 - C812 * C347 + C32149 * C687 - C813 * C679 +
             C32126 * C1465 - C814 * C1464) *
                C15424 +
            (C32161 * C377 - C812 * C361 + C32149 * C694 - C813 * C688 +
             C32126 * C1467 - C814 * C1466) *
                C31762) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C15423 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C15417 +
            (C819 - C820 + C821 - C822 + C823 - C824) * C15424 +
            (C825 - C826 + C827 - C828 + C829 - C830) * C31762) *
               C20324 +
           ((C11016 - C11017 + C11018 - C11019 + C11020 - C11021) * C15423 +
            (C11022 - C11023 + C11024 - C11025 + C11026 - C11027) * C15417 +
            (C1470 - C1469 + C1472 - C1471 + C1474 - C1473) * C15424 +
            (C1476 - C1475 + C1478 - C1477 + C1480 - C1479) * C31762) *
               C31941) *
              C31813 * C235 +
          (((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
             C814 * C974 - C32126 * C980) *
                C15423 +
            (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
             C814 * C981 - C32126 * C992) *
                C15417 +
            (C1295 - C1296 + C1297 - C1298 + C1299 - C1300) * C15424 +
            (C1301 - C1302 + C1303 - C1304 + C1305 - C1306) * C31762) *
               C20324 +
           ((C11515 - C11516 + C11517 - C11518 + C11519 - C11520) * C15423 +
            (C11521 - C11522 + C11523 - C11524 + C11525 - C11526) * C15417 +
            (C812 * C677 - C32161 * C683 + C813 * C1109 - C32149 * C1119 +
             C814 * C1639 - C32126 * C1643) *
                C15424 +
            (C812 * C684 - C32161 * C692 + C813 * C1120 - C32149 * C1136 +
             C814 * C1644 - C32126 * C1648) *
                C31762) *
               C31941) *
              C31813 * C236 +
          (((C32161 * C259 - C812 * C244 + C32149 * C980 - C813 * C974 +
             C32126 * C986 - C814 * C977) *
                C15423 +
            (C32161 * C274 - C812 * C260 + C32149 * C992 - C813 * C981 +
             C32126 * C995 - C814 * C987) *
                C15417 +
            (C32161 * C261 - C812 * C245 + C32149 * C982 - C813 * C975 +
             C32126 * C988 - C814 * C978) *
                C15424 +
            (C32161 * C275 - C812 * C262 + C32149 * C993 - C813 * C983 +
             C32126 * C996 - C814 * C989) *
                C31762) *
               C20324 +
           ((C32161 * C1117 - C812 * C1108 + C32149 * C1641 - C813 * C1638 +
             C32126 * C6215 - C814 * C6212) *
                C15423 +
            (C32161 * C1135 - C812 * C1118 + C32149 * C1647 - C813 * C1642 +
             C32126 * C6221 - C814 * C6216) *
                C15417 +
            (C32161 * C1119 - C812 * C1109 + C32149 * C1643 - C813 * C1639 +
             C32126 * C6393 - C814 * C6392) *
                C15424 +
            (C32161 * C1136 - C812 * C1120 + C32149 * C1648 - C813 * C1644 +
             C32126 * C6395 - C814 * C6394) *
                C31762) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C2656 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C2650 +
            (C2661 - C2662 + C2663 - C2664) * C2657 +
            (C2665 - C2666 + C2667 - C2668) * C2651 + C2701 * C2658 +
            C2702 * C2652 + C2703 * C2659 + C2704 * C32130) *
               C31854 * C31813 * C466 +
           ((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                C2656 +
            (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                C2650 +
            (C3031 - C3032 + C3033 - C3034) * C2657 +
            (C3035 - C3036 + C3037 - C3038) * C2651 +
            (C3039 - C3040 + C3041 - C3042) * C2658 +
            (C3043 - C3044 + C3045 - C3046) * C2652 +
            (C3047 - C3048 + C3049 - C3050) * C2659 +
            (C3051 - C3052 + C3053 - C3054) * C32130) *
               C31854 * C31813 * C467) *
              C468 +
          (((C2662 - C2661 + C2664 - C2663) * C2656 +
            (C2666 - C2665 + C2668 - C2667) * C2650 +
            (C2670 - C2669 + C2672 - C2671) * C2657 +
            (C2674 - C2673 + C2676 - C2675) * C2651 +
            (C2678 - C2677 + C2680 - C2679) * C2658 +
            (C2682 - C2681 + C2684 - C2683) * C2652 +
            (C2685 - C2686 + C2687 - C2688) * C2659 +
            (C2689 - C2690 + C2691 - C2692) * C32130) *
               C31854 * C31813 * C466 +
           ((C3032 - C3031 + C3034 - C3033) * C2656 +
            (C3036 - C3035 + C3038 - C3037) * C2650 +
            (C3040 - C3039 + C3042 - C3041) * C2657 +
            (C3044 - C3043 + C3046 - C3045) * C2651 +
            (C3048 - C3047 + C3050 - C3049) * C2658 +
            (C3052 - C3051 + C3054 - C3053) * C2652 +
            (C32095 * C257 - C2654 * C243 + C31899 * C267 - C2655 * C248) *
                C2659 +
            (C32095 * C273 - C2654 * C258 + C31899 * C278 - C2655 * C268) *
                C32130) *
               C31854 * C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
             C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
                C30875 +
            (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
             C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
                C32076 +
            (C7470 - C7471 + C7472 - C7473 + C7474 - C7475 + C7476 - C7477) *
                C30856 +
            (C7478 - C7479 + C7480 - C7481 + C7482 - C7483 + C7484 - C7485) *
                C31762) *
               C31854 * C31813 * C466 +
           ((C7463 * C239 - C7457 * C249 + C7464 * C244 - C7458 * C259 +
             C7465 * C974 - C7459 * C980 + C7466 * C977 - C32136 * C986) *
                C30875 +
            (C7463 * C250 - C7457 * C269 + C7464 * C260 - C7458 * C274 +
             C7465 * C981 - C7459 * C992 + C7466 * C987 - C32136 * C995) *
                C32076 +
            (C7828 - C7829 + C7830 - C7831 + C7832 - C7833 + C7834 - C7835) *
                C30856 +
            (C7836 - C7837 + C7838 - C7839 + C7840 - C7841 + C7842 - C7843) *
                C31762) *
               C31854 * C31813 * C467) *
              C468 +
          (((C7471 - C7470 + C7473 - C7472 + C7475 - C7474 + C7477 - C7476) *
                C30875 +
            (C7479 - C7478 + C7481 - C7480 + C7483 - C7482 + C7485 - C7484) *
                C32076 +
            (C7486 - C7487 + C7488 - C7489 + C7490 - C7491 + C7492 - C7493) *
                C30856 +
            (C7494 - C7495 + C7496 - C7497 + C7498 - C7499 + C7500 - C7501) *
                C31762) *
               C31854 * C31813 * C466 +
           ((C7829 - C7828 + C7831 - C7830 + C7833 - C7832 + C7835 - C7834) *
                C30875 +
            (C7837 - C7836 + C7839 - C7838 + C7841 - C7840 + C7843 - C7842) *
                C32076 +
            (C7457 * C253 - C7463 * C241 + C7458 * C263 - C7464 * C246 +
             C7459 * C984 - C7465 * C976 + C32136 * C990 - C7466 * C979) *
                C30856 +
            (C7457 * C271 - C7463 * C254 + C7458 * C276 - C7464 * C264 +
             C7459 * C994 - C7465 * C985 + C32136 * C997 - C7466 * C991) *
                C31762) *
               C31854 * C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C2656 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C2650 +
            (C2661 - C2662 + C2663 - C2664) * C2657 +
            (C2665 - C2666 + C2667 - C2668) * C2651 + C2701 * C2658 +
            C2702 * C2652 + C2703 * C2659 + C2704 * C32130) *
               C31854 * C572 +
           ((C2654 * C344 - C32095 * C354 + C2655 * C676 - C31899 * C681) *
                C2656 +
            (C2654 * C355 - C32095 * C374 + C2655 * C682 - C31899 * C691) *
                C2650 +
            (C3185 - C3186 + C3187 - C3188) * C2657 +
            (C3189 - C3190 + C3191 - C3192) * C2651 +
            (C3193 - C3194 + C3195 - C3196) * C2658 +
            (C3197 - C3198 + C3199 - C3200) * C2652 +
            (C3201 - C3202 + C3203 - C3204) * C2659 +
            (C3205 - C3206 + C3207 - C3208) * C32130) *
               C31854 * C573) *
              C466 +
          (((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                C2656 +
            (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                C2650 +
            (C3031 - C3032 + C3033 - C3034) * C2657 +
            (C3035 - C3036 + C3037 - C3038) * C2651 +
            (C3039 - C3040 + C3041 - C3042) * C2658 +
            (C3043 - C3044 + C3045 - C3046) * C2652 +
            (C3047 - C3048 + C3049 - C3050) * C2659 +
            (C3051 - C3052 + C3053 - C3054) * C32130) *
               C31854 * C572 +
           ((C32095 * C681 - C2654 * C676 + C31899 * C1117 - C2655 * C1108) *
                C2656 +
            (C32095 * C691 - C2654 * C682 + C31899 * C1135 - C2655 * C1118) *
                C2650 +
            (C32095 * C683 - C2654 * C677 + C31899 * C1119 - C2655 * C1109) *
                C2657 +
            (C32095 * C692 - C2654 * C684 + C31899 * C1136 - C2655 * C1120) *
                C2651 +
            (C32095 * C685 - C2654 * C678 + C31899 * C1121 - C2655 * C1110) *
                C2658 +
            (C32095 * C693 - C2654 * C686 + C31899 * C1137 - C2655 * C1122) *
                C2652 +
            (C32095 * C687 - C2654 * C679 + C31899 * C1465 - C2655 * C1464) *
                C2659 +
            (C32095 * C694 - C2654 * C688 + C31899 * C1467 - C2655 * C1466) *
                C32130) *
               C31854 * C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
             C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
                C30875 +
            (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
             C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
                C32076 +
            (C7470 - C7471 + C7472 - C7473 + C7474 - C7475 + C7476 - C7477) *
                C30856 +
            (C7478 - C7479 + C7480 - C7481 + C7482 - C7483 + C7484 - C7485) *
                C31762) *
               C31854 * C572 +
           ((C7463 * C344 - C7457 * C354 + C7464 * C676 - C7458 * C681 +
             C7465 * C1108 - C7459 * C1117 + C7466 * C1638 - C32136 * C1641) *
                C30875 +
            (C7463 * C355 - C7457 * C374 + C7464 * C682 - C7458 * C691 +
             C7465 * C1118 - C7459 * C1135 + C7466 * C1642 - C32136 * C1647) *
                C32076 +
            (C7974 - C7975 + C7976 - C7977 + C7978 - C7979 + C7980 - C7981) *
                C30856 +
            (C7982 - C7983 + C7984 - C7985 + C7986 - C7987 + C7988 - C7989) *
                C31762) *
               C31854 * C573) *
              C466 +
          (((C7463 * C239 - C7457 * C249 + C7464 * C244 - C7458 * C259 +
             C7465 * C974 - C7459 * C980 + C7466 * C977 - C32136 * C986) *
                C30875 +
            (C7463 * C250 - C7457 * C269 + C7464 * C260 - C7458 * C274 +
             C7465 * C981 - C7459 * C992 + C7466 * C987 - C32136 * C995) *
                C32076 +
            (C7828 - C7829 + C7830 - C7831 + C7832 - C7833 + C7834 - C7835) *
                C30856 +
            (C7836 - C7837 + C7838 - C7839 + C7840 - C7841 + C7842 - C7843) *
                C31762) *
               C31854 * C572 +
           ((C7457 * C681 - C7463 * C676 + C7458 * C1117 - C7464 * C1108 +
             C7459 * C1641 - C7465 * C1638 + C32136 * C6215 - C7466 * C6212) *
                C30875 +
            (C7457 * C691 - C7463 * C682 + C7458 * C1135 - C7464 * C1118 +
             C7459 * C1647 - C7465 * C1642 + C32136 * C6221 - C7466 * C6216) *
                C32076 +
            (C7457 * C683 - C7463 * C677 + C7458 * C1119 - C7464 * C1109 +
             C7459 * C1643 - C7465 * C1639 + C32136 * C6393 - C7466 * C6392) *
                C30856 +
            (C7457 * C692 - C7463 * C684 + C7458 * C1136 - C7464 * C1120 +
             C7459 * C1648 - C7465 * C1644 + C32136 * C6395 - C7466 * C6394) *
                C31762) *
               C31854 * C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
               C2656 +
           (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
               C2650 +
           (C2661 - C2662 + C2663 - C2664) * C2657 +
           (C2665 - C2666 + C2667 - C2668) * C2651 + C2701 * C2658 +
           C2702 * C2652 + C2703 * C2659 + C2704 * C32130) *
              C31854 * C31813 * C235 +
          ((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
               C2656 +
           (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
               C2650 +
           (C2654 * C240 - C32095 * C251 + C2655 * C245 - C31899 * C261) *
               C2657 +
           (C2654 * C252 - C32095 * C270 + C2655 * C262 - C31899 * C275) *
               C2651 +
           (C2654 * C241 - C32095 * C253 + C2655 * C246 - C31899 * C263) *
               C2658 +
           (C2654 * C254 - C32095 * C271 + C2655 * C264 - C31899 * C276) *
               C2652 +
           (C2654 * C242 - C32095 * C255 + C2655 * C247 - C31899 * C265) *
               C2659 +
           (C2654 * C256 - C32095 * C272 + C2655 * C266 - C31899 * C277) *
               C32130) *
              C31854 * C31813 * C236 +
          ((C32095 * C259 - C2654 * C244 + C31899 * C980 - C2655 * C974) *
               C2656 +
           (C32095 * C274 - C2654 * C260 + C31899 * C992 - C2655 * C981) *
               C2650 +
           (C32095 * C261 - C2654 * C245 + C31899 * C982 - C2655 * C975) *
               C2657 +
           (C32095 * C275 - C2654 * C262 + C31899 * C993 - C2655 * C983) *
               C2651 +
           (C32095 * C263 - C2654 * C246 + C31899 * C984 - C2655 * C976) *
               C2658 +
           (C32095 * C276 - C2654 * C264 + C31899 * C994 - C2655 * C985) *
               C2652 +
           (C32095 * C265 - C2654 * C247 + C31899 * C1291 - C2655 * C1290) *
               C2659 +
           (C32095 * C277 - C2654 * C266 + C31899 * C1293 - C2655 * C1292) *
               C32130) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
               C2656 +
           (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
               C2650 +
           (C2661 - C2662 + C2663 - C2664) * C2657 +
           (C2665 - C2666 + C2667 - C2668) * C2651 + C2701 * C2658 +
           C2702 * C2652 + C2703 * C2659 + C2704 * C32130) *
              C31854 * C31813 * C31799 * C110 +
          ((C2662 - C2661 + C2664 - C2663) * C2656 +
           (C2666 - C2665 + C2668 - C2667) * C2650 +
           (C2670 - C2669 + C2672 - C2671) * C2657 +
           (C2674 - C2673 + C2676 - C2675) * C2651 +
           (C2678 - C2677 + C2680 - C2679) * C2658 +
           (C2682 - C2681 + C2684 - C2683) * C2652 +
           (C2685 - C2686 + C2687 - C2688) * C2659 +
           (C2689 - C2690 + C2691 - C2692) * C32130) *
              C31854 * C31813 * C31799 * C111 +
          (C2701 * C2656 + C2702 * C2650 + C2703 * C2657 + C2704 * C2651 +
           (C2686 - C2685 + C2688 - C2687) * C2658 +
           (C2690 - C2689 + C2692 - C2691) * C2652 +
           (C32095 * C136 - C2654 * C124 + C31899 * C471 - C2655 * C470) *
               C2659 +
           (C32095 * C145 - C2654 * C137 + C31899 * C473 - C2655 * C472) *
               C32130) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
               C2656 +
           (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
               C2650 +
           (C2661 - C2662 + C2663 - C2664) * C2657 +
           (C2665 - C2666 + C2667 - C2668) * C2651 + C2701 * C2658 +
           C2702 * C2652 + C2703 * C2659 + C2704 * C32130) *
              C31854 * C341 +
          ((C2654 * C344 - C32095 * C354 + C2655 * C676 - C31899 * C681) *
               C2656 +
           (C2654 * C355 - C32095 * C374 + C2655 * C682 - C31899 * C691) *
               C2650 +
           (C2654 * C345 - C32095 * C356 + C2655 * C677 - C31899 * C683) *
               C2657 +
           (C2654 * C357 - C32095 * C375 + C2655 * C684 - C31899 * C692) *
               C2651 +
           (C2654 * C346 - C32095 * C358 + C2655 * C678 - C31899 * C685) *
               C2658 +
           (C2654 * C359 - C32095 * C376 + C2655 * C686 - C31899 * C693) *
               C2652 +
           (C2654 * C347 - C32095 * C360 + C2655 * C679 - C31899 * C687) *
               C2659 +
           (C2654 * C361 - C32095 * C377 + C2655 * C688 - C31899 * C694) *
               C32130) *
              C31854 * C342 +
          ((C32095 * C364 - C2654 * C349 + C31899 * C1123 - C2655 * C1111) *
               C2656 +
           (C32095 * C379 - C2654 * C365 + C31899 * C1138 - C2655 * C1125) *
               C2650 +
           (C32095 * C366 - C2654 * C350 + C31899 * C1127 - C2655 * C1113) *
               C2657 +
           (C32095 * C380 - C2654 * C367 + C31899 * C1140 - C2655 * C1129) *
               C2651 +
           (C32095 * C368 - C2654 * C351 + C31899 * C1131 - C2655 * C1115) *
               C2658 +
           (C32095 * C381 - C2654 * C369 + C31899 * C1142 - C2655 * C1133) *
               C2652 +
           (C32095 * C370 - C2654 * C352 + C31899 * C2205 - C2655 * C2204) *
               C2659 +
           (C32095 * C382 - C2654 * C371 + C31899 * C2207 - C2655 * C2206) *
               C32130) *
              C31854 * C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
            C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
               C30875 +
           (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
            C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
               C32076 +
           (C7470 - C7471 + C7472 - C7473 + C7474 - C7475 + C7476 - C7477) *
               C30856 +
           (C7478 - C7479 + C7480 - C7481 + C7482 - C7483 + C7484 - C7485) *
               C31762) *
              C31854 * C31813 * C31799 * C110 +
          ((C7471 - C7470 + C7473 - C7472 + C7475 - C7474 + C7477 - C7476) *
               C30875 +
           (C7479 - C7478 + C7481 - C7480 + C7483 - C7482 + C7485 - C7484) *
               C32076 +
           (C7486 - C7487 + C7488 - C7489 + C7490 - C7491 + C7492 - C7493) *
               C30856 +
           (C7494 - C7495 + C7496 - C7497 + C7498 - C7499 + C7500 - C7501) *
               C31762) *
              C31854 * C31813 * C31799 * C111 +
          ((C7487 - C7486 + C7489 - C7488 + C7491 - C7490 + C7493 - C7492) *
               C30875 +
           (C7495 - C7494 + C7497 - C7496 + C7499 - C7498 + C7501 - C7500) *
               C32076 +
           (C7457 * C132 - C7463 * C122 + C7458 * C255 - C7464 * C242 +
            C7459 * C265 - C7465 * C247 + C32136 * C1291 - C7466 * C1290) *
               C30856 +
           (C7457 * C143 - C7463 * C133 + C7458 * C272 - C7464 * C256 +
            C7459 * C277 - C7465 * C266 + C32136 * C1293 - C7466 * C1292) *
               C31762) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
            C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
               C30875 +
           (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
            C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
               C32076 +
           (C7470 - C7471 + C7472 - C7473 + C7474 - C7475 + C7476 - C7477) *
               C30856 +
           (C7478 - C7479 + C7480 - C7481 + C7482 - C7483 + C7484 - C7485) *
               C31762) *
              C31854 * C31813 * C235 +
          ((C7463 * C239 - C7457 * C249 + C7464 * C244 - C7458 * C259 +
            C7465 * C974 - C7459 * C980 + C7466 * C977 - C32136 * C986) *
               C30875 +
           (C7463 * C250 - C7457 * C269 + C7464 * C260 - C7458 * C274 +
            C7465 * C981 - C7459 * C992 + C7466 * C987 - C32136 * C995) *
               C32076 +
           (C7463 * C240 - C7457 * C251 + C7464 * C245 - C7458 * C261 +
            C7465 * C975 - C7459 * C982 + C7466 * C978 - C32136 * C988) *
               C30856 +
           (C7463 * C252 - C7457 * C270 + C7464 * C262 - C7458 * C275 +
            C7465 * C983 - C7459 * C993 + C7466 * C989 - C32136 * C996) *
               C31762) *
              C31854 * C31813 * C236 +
          ((C7457 * C259 - C7463 * C244 + C7458 * C980 - C7464 * C974 +
            C7459 * C986 - C7465 * C977 + C32136 * C6144 - C7466 * C6142) *
               C30875 +
           (C7457 * C274 - C7463 * C260 + C7458 * C992 - C7464 * C981 +
            C7459 * C995 - C7465 * C987 + C32136 * C6148 - C7466 * C6145) *
               C32076 +
           (C7457 * C261 - C7463 * C245 + C7458 * C982 - C7464 * C975 +
            C7459 * C988 - C7465 * C978 + C32136 * C6307 - C7466 * C6306) *
               C30856 +
           (C7457 * C275 - C7463 * C262 + C7458 * C993 - C7464 * C983 +
            C7459 * C996 - C7465 * C989 + C32136 * C6309 - C7466 * C6308) *
               C31762) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
            C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
               C30875 +
           (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
            C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
               C32076 +
           (C7470 - C7471 + C7472 - C7473 + C7474 - C7475 + C7476 - C7477) *
               C30856 +
           (C7478 - C7479 + C7480 - C7481 + C7482 - C7483 + C7484 - C7485) *
               C31762) *
              C31854 * C341 +
          ((C7463 * C344 - C7457 * C354 + C7464 * C676 - C7458 * C681 +
            C7465 * C1108 - C7459 * C1117 + C7466 * C1638 - C32136 * C1641) *
               C30875 +
           (C7463 * C355 - C7457 * C374 + C7464 * C682 - C7458 * C691 +
            C7465 * C1118 - C7459 * C1135 + C7466 * C1642 - C32136 * C1647) *
               C32076 +
           (C7463 * C345 - C7457 * C356 + C7464 * C677 - C7458 * C683 +
            C7465 * C1109 - C7459 * C1119 + C7466 * C1639 - C32136 * C1643) *
               C30856 +
           (C7463 * C357 - C7457 * C375 + C7464 * C684 - C7458 * C692 +
            C7465 * C1120 - C7459 * C1136 + C7466 * C1644 - C32136 * C1648) *
               C31762) *
              C31854 * C342 +
          ((C7457 * C364 - C7463 * C349 + C7458 * C1123 - C7464 * C1111 +
            C7459 * C1124 - C7465 * C1112 + C32136 * C6217 - C7466 * C6213) *
               C30875 +
           (C7457 * C379 - C7463 * C365 + C7458 * C1138 - C7464 * C1125 +
            C7459 * C1139 - C7465 * C1126 + C32136 * C6222 - C7466 * C6219) *
               C32076 +
           (C7457 * C366 - C7463 * C350 + C7458 * C1127 - C7464 * C1113 +
            C7459 * C1128 - C7465 * C1114 + C32136 * C7020 - C7466 * C7019) *
               C30856 +
           (C7457 * C380 - C7463 * C367 + C7458 * C1140 - C7464 * C1129 +
            C7459 * C1141 - C7465 * C1130 + C32136 * C7022 - C7466 * C7021) *
               C31762) *
              C31854 * C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C2656 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C2650 +
            (C2661 - C2662 + C2663 - C2664) * C2657 +
            (C2665 - C2666 + C2667 - C2668) * C2651 + C2701 * C2658 +
            C2702 * C2652 + C2703 * C2659 + C2704 * C32130) *
               C31854 * C572 +
           ((C2654 * C344 - C32095 * C354 + C2655 * C676 - C31899 * C681) *
                C2656 +
            (C2654 * C355 - C32095 * C374 + C2655 * C682 - C31899 * C691) *
                C2650 +
            (C3185 - C3186 + C3187 - C3188) * C2657 +
            (C3189 - C3190 + C3191 - C3192) * C2651 +
            (C3193 - C3194 + C3195 - C3196) * C2658 +
            (C3197 - C3198 + C3199 - C3200) * C2652 +
            (C3201 - C3202 + C3203 - C3204) * C2659 +
            (C3205 - C3206 + C3207 - C3208) * C32130) *
               C31854 * C573) *
              C31799 * C468 +
          (((C2662 - C2661 + C2664 - C2663) * C2656 +
            (C2666 - C2665 + C2668 - C2667) * C2650 +
            (C2670 - C2669 + C2672 - C2671) * C2657 +
            (C2674 - C2673 + C2676 - C2675) * C2651 +
            (C2678 - C2677 + C2680 - C2679) * C2658 +
            (C2682 - C2681 + C2684 - C2683) * C2652 +
            (C2685 - C2686 + C2687 - C2688) * C2659 +
            (C2689 - C2690 + C2691 - C2692) * C32130) *
               C31854 * C572 +
           ((C3186 - C3185 + C3188 - C3187) * C2656 +
            (C3190 - C3189 + C3192 - C3191) * C2650 +
            (C3194 - C3193 + C3196 - C3195) * C2657 +
            (C3198 - C3197 + C3200 - C3199) * C2651 +
            (C3202 - C3201 + C3204 - C3203) * C2658 +
            (C3206 - C3205 + C3208 - C3207) * C2652 +
            (C32095 * C362 - C2654 * C348 + C31899 * C689 - C2655 * C680) *
                C2659 +
            (C32095 * C378 - C2654 * C363 + C31899 * C695 - C2655 * C690) *
                C32130) *
               C31854 * C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
             C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
                C30875 +
            (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
             C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
                C32076 +
            (C7470 - C7471 + C7472 - C7473 + C7474 - C7475 + C7476 - C7477) *
                C30856 +
            (C7478 - C7479 + C7480 - C7481 + C7482 - C7483 + C7484 - C7485) *
                C31762) *
               C31854 * C572 +
           ((C7463 * C344 - C7457 * C354 + C7464 * C676 - C7458 * C681 +
             C7465 * C1108 - C7459 * C1117 + C7466 * C1638 - C32136 * C1641) *
                C30875 +
            (C7463 * C355 - C7457 * C374 + C7464 * C682 - C7458 * C691 +
             C7465 * C1118 - C7459 * C1135 + C7466 * C1642 - C32136 * C1647) *
                C32076 +
            (C7974 - C7975 + C7976 - C7977 + C7978 - C7979 + C7980 - C7981) *
                C30856 +
            (C7982 - C7983 + C7984 - C7985 + C7986 - C7987 + C7988 - C7989) *
                C31762) *
               C31854 * C573) *
              C31799 * C468 +
          (((C7471 - C7470 + C7473 - C7472 + C7475 - C7474 + C7477 - C7476) *
                C30875 +
            (C7479 - C7478 + C7481 - C7480 + C7483 - C7482 + C7485 - C7484) *
                C32076 +
            (C7486 - C7487 + C7488 - C7489 + C7490 - C7491 + C7492 - C7493) *
                C30856 +
            (C7494 - C7495 + C7496 - C7497 + C7498 - C7499 + C7500 - C7501) *
                C31762) *
               C31854 * C572 +
           ((C7975 - C7974 + C7977 - C7976 + C7979 - C7978 + C7981 - C7980) *
                C30875 +
            (C7983 - C7982 + C7985 - C7984 + C7987 - C7986 + C7989 - C7988) *
                C32076 +
            (C7457 * C358 - C7463 * C346 + C7458 * C685 - C7464 * C678 +
             C7459 * C1121 - C7465 * C1110 + C32136 * C1645 - C7466 * C1640) *
                C30856 +
            (C7457 * C376 - C7463 * C359 + C7458 * C693 - C7464 * C686 +
             C7459 * C1137 - C7465 * C1122 + C32136 * C1649 - C7466 * C1646) *
                C31762) *
               C31854 * C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
               C2656 +
           (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
               C2650 +
           (C2661 - C2662 + C2663 - C2664) * C2657 +
           (C2665 - C2666 + C2667 - C2668) * C2651 + C2701 * C2658 +
           C2702 * C2652 + C2703 * C2659 + C2704 * C32130) *
              C31854 * C31813 * C31799 * C110 +
          ((C2662 - C2661 + C2664 - C2663) * C2656 +
           (C2666 - C2665 + C2668 - C2667) * C2650 +
           (C2670 - C2669 + C2672 - C2671) * C2657 +
           (C2674 - C2673 + C2676 - C2675) * C2651 +
           (C2678 - C2677 + C2680 - C2679) * C2658 +
           (C2682 - C2681 + C2684 - C2683) * C2652 +
           (C2685 - C2686 + C2687 - C2688) * C2659 +
           (C2689 - C2690 + C2691 - C2692) * C32130) *
              C31854 * C31813 * C31799 * C111 +
          (C2701 * C2656 + C2702 * C2650 + C2703 * C2657 + C2704 * C2651 +
           (C2686 - C2685 + C2688 - C2687) * C2658 +
           (C2690 - C2689 + C2692 - C2691) * C2652 +
           (C32095 * C136 - C2654 * C124 + C31899 * C471 - C2655 * C470) *
               C2659 +
           (C32095 * C145 - C2654 * C137 + C31899 * C473 - C2655 * C472) *
               C32130) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
               C2656 +
           (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
               C2650 +
           (C2661 - C2662 + C2663 - C2664) * C2657 +
           (C2665 - C2666 + C2667 - C2668) * C2651 + C2701 * C2658 +
           C2702 * C2652 + C2703 * C2659 + C2704 * C32130) *
              C31854 * C31813 * C235 +
          ((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
               C2656 +
           (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
               C2650 +
           (C2654 * C240 - C32095 * C251 + C2655 * C245 - C31899 * C261) *
               C2657 +
           (C2654 * C252 - C32095 * C270 + C2655 * C262 - C31899 * C275) *
               C2651 +
           (C2654 * C241 - C32095 * C253 + C2655 * C246 - C31899 * C263) *
               C2658 +
           (C2654 * C254 - C32095 * C271 + C2655 * C264 - C31899 * C276) *
               C2652 +
           (C2654 * C242 - C32095 * C255 + C2655 * C247 - C31899 * C265) *
               C2659 +
           (C2654 * C256 - C32095 * C272 + C2655 * C266 - C31899 * C277) *
               C32130) *
              C31854 * C31813 * C236 +
          ((C32095 * C259 - C2654 * C244 + C31899 * C980 - C2655 * C974) *
               C2656 +
           (C32095 * C274 - C2654 * C260 + C31899 * C992 - C2655 * C981) *
               C2650 +
           (C32095 * C261 - C2654 * C245 + C31899 * C982 - C2655 * C975) *
               C2657 +
           (C32095 * C275 - C2654 * C262 + C31899 * C993 - C2655 * C983) *
               C2651 +
           (C32095 * C263 - C2654 * C246 + C31899 * C984 - C2655 * C976) *
               C2658 +
           (C32095 * C276 - C2654 * C264 + C31899 * C994 - C2655 * C985) *
               C2652 +
           (C32095 * C265 - C2654 * C247 + C31899 * C1291 - C2655 * C1290) *
               C2659 +
           (C32095 * C277 - C2654 * C266 + C31899 * C1293 - C2655 * C1292) *
               C32130) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
            C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
               C30875 +
           (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
            C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
               C32076 +
           (C7470 - C7471 + C7472 - C7473 + C7474 - C7475 + C7476 - C7477) *
               C30856 +
           (C7478 - C7479 + C7480 - C7481 + C7482 - C7483 + C7484 - C7485) *
               C31762) *
              C31854 * C31813 * C31799 * C110 +
          ((C7471 - C7470 + C7473 - C7472 + C7475 - C7474 + C7477 - C7476) *
               C30875 +
           (C7479 - C7478 + C7481 - C7480 + C7483 - C7482 + C7485 - C7484) *
               C32076 +
           (C7486 - C7487 + C7488 - C7489 + C7490 - C7491 + C7492 - C7493) *
               C30856 +
           (C7494 - C7495 + C7496 - C7497 + C7498 - C7499 + C7500 - C7501) *
               C31762) *
              C31854 * C31813 * C31799 * C111 +
          ((C7487 - C7486 + C7489 - C7488 + C7491 - C7490 + C7493 - C7492) *
               C30875 +
           (C7495 - C7494 + C7497 - C7496 + C7499 - C7498 + C7501 - C7500) *
               C32076 +
           (C7457 * C132 - C7463 * C122 + C7458 * C255 - C7464 * C242 +
            C7459 * C265 - C7465 * C247 + C32136 * C1291 - C7466 * C1290) *
               C30856 +
           (C7457 * C143 - C7463 * C133 + C7458 * C272 - C7464 * C256 +
            C7459 * C277 - C7465 * C266 + C32136 * C1293 - C7466 * C1292) *
               C31762) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
            C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
               C30875 +
           (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
            C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
               C32076 +
           (C7470 - C7471 + C7472 - C7473 + C7474 - C7475 + C7476 - C7477) *
               C30856 +
           (C7478 - C7479 + C7480 - C7481 + C7482 - C7483 + C7484 - C7485) *
               C31762) *
              C31854 * C31813 * C235 +
          ((C7463 * C239 - C7457 * C249 + C7464 * C244 - C7458 * C259 +
            C7465 * C974 - C7459 * C980 + C7466 * C977 - C32136 * C986) *
               C30875 +
           (C7463 * C250 - C7457 * C269 + C7464 * C260 - C7458 * C274 +
            C7465 * C981 - C7459 * C992 + C7466 * C987 - C32136 * C995) *
               C32076 +
           (C7463 * C240 - C7457 * C251 + C7464 * C245 - C7458 * C261 +
            C7465 * C975 - C7459 * C982 + C7466 * C978 - C32136 * C988) *
               C30856 +
           (C7463 * C252 - C7457 * C270 + C7464 * C262 - C7458 * C275 +
            C7465 * C983 - C7459 * C993 + C7466 * C989 - C32136 * C996) *
               C31762) *
              C31854 * C31813 * C236 +
          ((C7457 * C259 - C7463 * C244 + C7458 * C980 - C7464 * C974 +
            C7459 * C986 - C7465 * C977 + C32136 * C6144 - C7466 * C6142) *
               C30875 +
           (C7457 * C274 - C7463 * C260 + C7458 * C992 - C7464 * C981 +
            C7459 * C995 - C7465 * C987 + C32136 * C6148 - C7466 * C6145) *
               C32076 +
           (C7457 * C261 - C7463 * C245 + C7458 * C982 - C7464 * C975 +
            C7459 * C988 - C7465 * C978 + C32136 * C6307 - C7466 * C6306) *
               C30856 +
           (C7457 * C275 - C7463 * C262 + C7458 * C993 - C7464 * C983 +
            C7459 * C996 - C7465 * C989 + C32136 * C6309 - C7466 * C6308) *
               C31762) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                 C815 +
             (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                 C809 +
             (C2661 - C2662 + C2663 - C2664) * C816 +
             (C2665 - C2666 + C2667 - C2668) * C810 + C2701 * C817 +
             C2702 * C32115) *
                C32096 +
            ((C4477 - C4478 + C4479 - C4480) * C815 +
             (C4481 - C4482 + C4483 - C4484) * C809 +
             (C3186 - C3185 + C3188 - C3187) * C816 +
             (C3190 - C3189 + C3192 - C3191) * C810 + C4183 * C817 +
             C4184 * C32115) *
                C31941) *
               C31813 * C466 +
           (((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                 C815 +
             (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                 C809 +
             (C3031 - C3032 + C3033 - C3034) * C816 +
             (C3035 - C3036 + C3037 - C3038) * C810 +
             (C3039 - C3040 + C3041 - C3042) * C817 +
             (C3043 - C3044 + C3045 - C3046) * C32115) *
                C32096 +
            ((C2654 * C676 - C32095 * C681 + C2655 * C1108 - C31899 * C1117) *
                 C815 +
             (C2654 * C682 - C32095 * C691 + C2655 * C1118 - C31899 * C1135) *
                 C809 +
             (C4703 - C4704 + C4705 - C4706) * C816 +
             (C4707 - C4708 + C4709 - C4710) * C810 +
             (C4711 - C4712 + C4713 - C4714) * C817 +
             (C4715 - C4716 + C4717 - C4718) * C32115) *
                C31941) *
               C31813 * C467) *
              C468 +
          ((((C2662 - C2661 + C2664 - C2663) * C815 +
             (C2666 - C2665 + C2668 - C2667) * C809 +
             (C2670 - C2669 + C2672 - C2671) * C816 +
             (C2674 - C2673 + C2676 - C2675) * C810 +
             (C2678 - C2677 + C2680 - C2679) * C817 +
             (C2682 - C2681 + C2684 - C2683) * C32115) *
                C32096 +
            ((C3185 - C3186 + C3187 - C3188) * C815 +
             (C3189 - C3190 + C3191 - C3192) * C809 +
             (C3193 - C3194 + C3195 - C3196) * C816 +
             (C3197 - C3198 + C3199 - C3200) * C810 +
             (C3201 - C3202 + C3203 - C3204) * C817 +
             (C3205 - C3206 + C3207 - C3208) * C32115) *
                C31941) *
               C31813 * C466 +
           (((C3032 - C3031 + C3034 - C3033) * C815 +
             (C3036 - C3035 + C3038 - C3037) * C809 +
             (C3040 - C3039 + C3042 - C3041) * C816 +
             (C3044 - C3043 + C3046 - C3045) * C810 +
             (C3048 - C3047 + C3050 - C3049) * C817 +
             (C3052 - C3051 + C3054 - C3053) * C32115) *
                C32096 +
            ((C4704 - C4703 + C4706 - C4705) * C815 +
             (C4708 - C4707 + C4710 - C4709) * C809 +
             (C4712 - C4711 + C4714 - C4713) * C816 +
             (C4716 - C4715 + C4718 - C4717) * C810 +
             (C32095 * C687 - C2654 * C679 + C31899 * C1465 - C2655 * C1464) *
                 C817 +
             (C32095 * C694 - C2654 * C688 + C31899 * C1467 - C2655 * C1466) *
                 C32115) *
                C31941) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
              C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
                 C6079 +
             (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
              C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
                 C31752) *
                C32096 +
            ((C9466 - C9467 + C9468 - C9469 + C9470 - C9471 + C9472 - C9473) *
                 C6079 +
             (C9474 - C9475 + C9476 - C9477 + C9478 - C9479 + C9480 - C9481) *
                 C31752) *
                C31941) *
               C31813 * C466 +
           (((C7463 * C239 - C7457 * C249 + C7464 * C244 - C7458 * C259 +
              C7465 * C974 - C7459 * C980 + C7466 * C977 - C32136 * C986) *
                 C6079 +
             (C7463 * C250 - C7457 * C269 + C7464 * C260 - C7458 * C274 +
              C7465 * C981 - C7459 * C992 + C7466 * C987 - C32136 * C995) *
                 C31752) *
                C32096 +
            ((C7463 * C676 - C7457 * C681 + C7464 * C1108 - C7458 * C1117 +
              C7465 * C1638 - C7459 * C1641 + C7466 * C6212 - C32136 * C6215) *
                 C6079 +
             (C7463 * C682 - C7457 * C691 + C7464 * C1118 - C7458 * C1135 +
              C7465 * C1642 - C7459 * C1647 + C7466 * C6216 - C32136 * C6221) *
                 C31752) *
                C31941) *
               C31813 * C467) *
              C468 +
          ((((C7471 - C7470 + C7473 - C7472 + C7475 - C7474 + C7477 - C7476) *
                 C6079 +
             (C7479 - C7478 + C7481 - C7480 + C7483 - C7482 + C7485 - C7484) *
                 C31752) *
                C32096 +
            ((C7974 - C7975 + C7976 - C7977 + C7978 - C7979 + C7980 - C7981) *
                 C6079 +
             (C7982 - C7983 + C7984 - C7985 + C7986 - C7987 + C7988 - C7989) *
                 C31752) *
                C31941) *
               C31813 * C466 +
           (((C7829 - C7828 + C7831 - C7830 + C7833 - C7832 + C7835 - C7834) *
                 C6079 +
             (C7837 - C7836 + C7839 - C7838 + C7841 - C7840 + C7843 - C7842) *
                 C31752) *
                C32096 +
            ((C7457 * C683 - C7463 * C677 + C7458 * C1119 - C7464 * C1109 +
              C7459 * C1643 - C7465 * C1639 + C32136 * C6393 - C7466 * C6392) *
                 C6079 +
             (C7457 * C692 - C7463 * C684 + C7458 * C1136 - C7464 * C1120 +
              C7459 * C1648 - C7465 * C1644 + C32136 * C6395 - C7466 * C6394) *
                 C31752) *
                C31941) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                 C815 +
             (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                 C809 +
             (C2661 - C2662 + C2663 - C2664) * C816 +
             (C2665 - C2666 + C2667 - C2668) * C810 + C2701 * C817 +
             C2702 * C32115) *
                C32096 +
            ((C4477 - C4478 + C4479 - C4480) * C815 +
             (C4481 - C4482 + C4483 - C4484) * C809 + C4925 * C816 +
             C4926 * C810 + C4183 * C817 + C4184 * C32115) *
                C31941) *
               C572 +
           (((C4478 - C4477 + C4480 - C4479) * C815 +
             (C4482 - C4481 + C4484 - C4483) * C809 + C4927 * C816 +
             C4928 * C810 + C4929 * C817 + C4930 * C32115) *
                C32096 +
            ((C4485 - C4486 + C4487 - C4488) * C815 +
             (C4489 - C4490 + C4491 - C4492) * C809 +
             (C4493 - C4494 + C4495 - C4496) * C816 +
             (C4497 - C4498 + C4499 - C4500) * C810 +
             (C4501 - C4502 + C4503 - C4504) * C817 +
             (C4505 - C4506 + C4507 - C4508) * C32115) *
                C31941) *
               C573) *
              C466 +
          ((((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                 C815 +
             (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                 C809 +
             (C3031 - C3032 + C3033 - C3034) * C816 +
             (C3035 - C3036 + C3037 - C3038) * C810 +
             (C3039 - C3040 + C3041 - C3042) * C817 +
             (C3043 - C3044 + C3045 - C3046) * C32115) *
                C32096 +
            ((C5125 - C5126 + C5127 - C5128) * C815 +
             (C5129 - C5130 + C5131 - C5132) * C809 +
             (C4703 - C4704 + C4705 - C4706) * C816 +
             (C4707 - C4708 + C4709 - C4710) * C810 +
             (C4711 - C4712 + C4713 - C4714) * C817 +
             (C4715 - C4716 + C4717 - C4718) * C32115) *
                C31941) *
               C572 +
           (((C5126 - C5125 + C5128 - C5127) * C815 +
             (C5130 - C5129 + C5132 - C5131) * C809 +
             (C4704 - C4703 + C4706 - C4705) * C816 +
             (C4708 - C4707 + C4710 - C4709) * C810 +
             (C4712 - C4711 + C4714 - C4713) * C817 +
             (C4716 - C4715 + C4718 - C4717) * C32115) *
                C32096 +
            ((C32095 * C1123 - C2654 * C1111 + C31899 * C1124 - C2655 * C1112) *
                 C815 +
             (C32095 * C1138 - C2654 * C1125 + C31899 * C1139 - C2655 * C1126) *
                 C809 +
             (C32095 * C1127 - C2654 * C1113 + C31899 * C1128 - C2655 * C1114) *
                 C816 +
             (C32095 * C1140 - C2654 * C1129 + C31899 * C1141 - C2655 * C1130) *
                 C810 +
             (C32095 * C1131 - C2654 * C1115 + C31899 * C1132 - C2655 * C1116) *
                 C817 +
             (C32095 * C1142 - C2654 * C1133 + C31899 * C1143 - C2655 * C1134) *
                 C32115) *
                C31941) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
              C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
                 C6079 +
             (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
              C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
                 C31752) *
                C32096 +
            ((C9466 - C9467 + C9468 - C9469 + C9470 - C9471 + C9472 - C9473) *
                 C6079 +
             (C9474 - C9475 + C9476 - C9477 + C9478 - C9479 + C9480 - C9481) *
                 C31752) *
                C31941) *
               C572 +
           (((C9467 - C9466 + C9469 - C9468 + C9471 - C9470 + C9473 - C9472) *
                 C6079 +
             (C9475 - C9474 + C9477 - C9476 + C9479 - C9478 + C9481 - C9480) *
                 C31752) *
                C32096 +
            ((C9482 - C9483 + C9484 - C9485 + C9486 - C9487 + C9488 - C9489) *
                 C6079 +
             (C9490 - C9491 + C9492 - C9493 + C9494 - C9495 + C9496 - C9497) *
                 C31752) *
                C31941) *
               C573) *
              C466 +
          ((((C7463 * C239 - C7457 * C249 + C7464 * C244 - C7458 * C259 +
              C7465 * C974 - C7459 * C980 + C7466 * C977 - C32136 * C986) *
                 C6079 +
             (C7463 * C250 - C7457 * C269 + C7464 * C260 - C7458 * C274 +
              C7465 * C981 - C7459 * C992 + C7466 * C987 - C32136 * C995) *
                 C31752) *
                C32096 +
            ((C9888 - C9889 + C9890 - C9891 + C9892 - C9893 + C9894 - C9895) *
                 C6079 +
             (C9896 - C9897 + C9898 - C9899 + C9900 - C9901 + C9902 - C9903) *
                 C31752) *
                C31941) *
               C572 +
           (((C9889 - C9888 + C9891 - C9890 + C9893 - C9892 + C9895 - C9894) *
                 C6079 +
             (C9897 - C9896 + C9899 - C9898 + C9901 - C9900 + C9903 - C9902) *
                 C31752) *
                C32096 +
            ((C7457 * C1123 - C7463 * C1111 + C7458 * C1124 - C7464 * C1112 +
              C7459 * C6217 - C7465 * C6213 + C32136 * C6218 - C7466 * C6214) *
                 C6079 +
             (C7457 * C1138 - C7463 * C1125 + C7458 * C1139 - C7464 * C1126 +
              C7459 * C6222 - C7465 * C6219 + C32136 * C6223 - C7466 * C6220) *
                 C31752) *
                C31941) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C815 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C809 +
            (C2661 - C2662 + C2663 - C2664) * C816 +
            (C2665 - C2666 + C2667 - C2668) * C810 + C2701 * C817 +
            C2702 * C32115) *
               C32096 +
           ((C32095 * C354 - C2654 * C344 + C31899 * C681 - C2655 * C676) *
                C815 +
            (C32095 * C374 - C2654 * C355 + C31899 * C691 - C2655 * C682) *
                C809 +
            (C3186 - C3185 + C3188 - C3187) * C816 +
            (C3190 - C3189 + C3192 - C3191) * C810 + C4183 * C817 +
            C4184 * C32115) *
               C31941) *
              C31813 * C235 +
          (((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                C815 +
            (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                C809 +
            (C3031 - C3032 + C3033 - C3034) * C816 +
            (C3035 - C3036 + C3037 - C3038) * C810 +
            (C3039 - C3040 + C3041 - C3042) * C817 +
            (C3043 - C3044 + C3045 - C3046) * C32115) *
               C32096 +
           ((C2654 * C676 - C32095 * C681 + C2655 * C1108 - C31899 * C1117) *
                C815 +
            (C2654 * C682 - C32095 * C691 + C2655 * C1118 - C31899 * C1135) *
                C809 +
            (C2654 * C677 - C32095 * C683 + C2655 * C1109 - C31899 * C1119) *
                C816 +
            (C2654 * C684 - C32095 * C692 + C2655 * C1120 - C31899 * C1136) *
                C810 +
            (C2654 * C678 - C32095 * C685 + C2655 * C1110 - C31899 * C1121) *
                C817 +
            (C2654 * C686 - C32095 * C693 + C2655 * C1122 - C31899 * C1137) *
                C32115) *
               C31941) *
              C31813 * C236 +
          (((C32095 * C259 - C2654 * C244 + C31899 * C980 - C2655 * C974) *
                C815 +
            (C32095 * C274 - C2654 * C260 + C31899 * C992 - C2655 * C981) *
                C809 +
            (C32095 * C261 - C2654 * C245 + C31899 * C982 - C2655 * C975) *
                C816 +
            (C32095 * C275 - C2654 * C262 + C31899 * C993 - C2655 * C983) *
                C810 +
            (C32095 * C263 - C2654 * C246 + C31899 * C984 - C2655 * C976) *
                C817 +
            (C32095 * C276 - C2654 * C264 + C31899 * C994 - C2655 * C985) *
                C32115) *
               C32096 +
           ((C32095 * C1117 - C2654 * C1108 + C31899 * C1641 - C2655 * C1638) *
                C815 +
            (C32095 * C1135 - C2654 * C1118 + C31899 * C1647 - C2655 * C1642) *
                C809 +
            (C32095 * C1119 - C2654 * C1109 + C31899 * C1643 - C2655 * C1639) *
                C816 +
            (C32095 * C1136 - C2654 * C1120 + C31899 * C1648 - C2655 * C1644) *
                C810 +
            (C32095 * C1121 - C2654 * C1110 + C31899 * C1645 - C2655 * C1640) *
                C817 +
            (C32095 * C1137 - C2654 * C1122 + C31899 * C1649 - C2655 * C1646) *
                C32115) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C815 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C809 +
            (C2661 - C2662 + C2663 - C2664) * C816 +
            (C2665 - C2666 + C2667 - C2668) * C810 + C2701 * C817 +
            C2702 * C32115) *
               C32096 +
           ((C32095 * C354 - C2654 * C344 + C31899 * C681 - C2655 * C676) *
                C815 +
            (C32095 * C374 - C2654 * C355 + C31899 * C691 - C2655 * C682) *
                C809 +
            (C3186 - C3185 + C3188 - C3187) * C816 +
            (C3190 - C3189 + C3192 - C3191) * C810 + C4183 * C817 +
            C4184 * C32115) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C2662 - C2661 + C2664 - C2663) * C815 +
            (C2666 - C2665 + C2668 - C2667) * C809 +
            (C2670 - C2669 + C2672 - C2671) * C816 +
            (C2674 - C2673 + C2676 - C2675) * C810 +
            (C2678 - C2677 + C2680 - C2679) * C817 +
            (C2682 - C2681 + C2684 - C2683) * C32115) *
               C32096 +
           ((C3185 - C3186 + C3187 - C3188) * C815 +
            (C3189 - C3190 + C3191 - C3192) * C809 +
            (C3193 - C3194 + C3195 - C3196) * C816 +
            (C3197 - C3198 + C3199 - C3200) * C810 +
            (C3201 - C3202 + C3203 - C3204) * C817 +
            (C3205 - C3206 + C3207 - C3208) * C32115) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C2701 * C815 + C2702 * C809 + C2703 * C816 + C2704 * C810 +
            (C2686 - C2685 + C2688 - C2687) * C817 +
            (C2690 - C2689 + C2692 - C2691) * C32115) *
               C32096 +
           (C4183 * C815 + C4184 * C809 +
            (C3202 - C3201 + C3204 - C3203) * C816 +
            (C3206 - C3205 + C3208 - C3207) * C810 +
            (C32095 * C362 - C2654 * C348 + C31899 * C689 - C2655 * C680) *
                C817 +
            (C32095 * C378 - C2654 * C363 + C31899 * C695 - C2655 * C690) *
                C32115) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C815 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C809 +
            (C2661 - C2662 + C2663 - C2664) * C816 +
            (C2665 - C2666 + C2667 - C2668) * C810 + C2701 * C817 +
            C2702 * C32115) *
               C32096 +
           ((C4477 - C4478 + C4479 - C4480) * C815 +
            (C4481 - C4482 + C4483 - C4484) * C809 +
            (C3186 - C3185 + C3188 - C3187) * C816 +
            (C3190 - C3189 + C3192 - C3191) * C810 + C4183 * C817 +
            C4184 * C32115) *
               C31941) *
              C341 +
          (((C4478 - C4477 + C4480 - C4479) * C815 +
            (C4482 - C4481 + C4484 - C4483) * C809 +
            (C3185 - C3186 + C3187 - C3188) * C816 +
            (C3189 - C3190 + C3191 - C3192) * C810 +
            (C3193 - C3194 + C3195 - C3196) * C817 +
            (C3197 - C3198 + C3199 - C3200) * C32115) *
               C32096 +
           ((C4485 - C4486 + C4487 - C4488) * C815 +
            (C4489 - C4490 + C4491 - C4492) * C809 +
            (C4493 - C4494 + C4495 - C4496) * C816 +
            (C4497 - C4498 + C4499 - C4500) * C810 +
            (C4501 - C4502 + C4503 - C4504) * C817 +
            (C4505 - C4506 + C4507 - C4508) * C32115) *
               C31941) *
              C342 +
          (((C4486 - C4485 + C4488 - C4487) * C815 +
            (C4490 - C4489 + C4492 - C4491) * C809 +
            (C4494 - C4493 + C4496 - C4495) * C816 +
            (C4498 - C4497 + C4500 - C4499) * C810 +
            (C4502 - C4501 + C4504 - C4503) * C817 +
            (C4506 - C4505 + C4508 - C4507) * C32115) *
               C32096 +
           ((C32095 * C2005 - C2654 * C1999 + C31899 * C2533 - C2655 * C2530) *
                C815 +
            (C32095 * C2017 - C2654 * C2006 + C31899 * C2539 - C2655 * C2534) *
                C809 +
            (C32095 * C2007 - C2654 * C2000 + C31899 * C2535 - C2655 * C2531) *
                C816 +
            (C32095 * C2018 - C2654 * C2008 + C31899 * C2540 - C2655 * C2536) *
                C810 +
            (C32095 * C2009 - C2654 * C2001 + C31899 * C2537 - C2655 * C2532) *
                C817 +
            (C32095 * C2019 - C2654 * C2010 + C31899 * C2541 - C2655 * C2538) *
                C32115) *
               C31941) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
             C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
                C6079 +
            (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
             C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
                C31752) *
               C32096 +
           ((C7457 * C354 - C7463 * C344 + C7458 * C681 - C7464 * C676 +
             C7459 * C1117 - C7465 * C1108 + C32136 * C1641 - C7466 * C1638) *
                C6079 +
            (C7457 * C374 - C7463 * C355 + C7458 * C691 - C7464 * C682 +
             C7459 * C1135 - C7465 * C1118 + C32136 * C1647 - C7466 * C1642) *
                C31752) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C7471 - C7470 + C7473 - C7472 + C7475 - C7474 + C7477 - C7476) *
                C6079 +
            (C7479 - C7478 + C7481 - C7480 + C7483 - C7482 + C7485 - C7484) *
                C31752) *
               C32096 +
           ((C7974 - C7975 + C7976 - C7977 + C7978 - C7979 + C7980 - C7981) *
                C6079 +
            (C7982 - C7983 + C7984 - C7985 + C7986 - C7987 + C7988 - C7989) *
                C31752) *
               C31941) *
              C31813 * C31799 * C111 +
          (((C7487 - C7486 + C7489 - C7488 + C7491 - C7490 + C7493 - C7492) *
                C6079 +
            (C7495 - C7494 + C7497 - C7496 + C7499 - C7498 + C7501 - C7500) *
                C31752) *
               C32096 +
           ((C7457 * C358 - C7463 * C346 + C7458 * C685 - C7464 * C678 +
             C7459 * C1121 - C7465 * C1110 + C32136 * C1645 - C7466 * C1640) *
                C6079 +
            (C7457 * C376 - C7463 * C359 + C7458 * C693 - C7464 * C686 +
             C7459 * C1137 - C7465 * C1122 + C32136 * C1649 - C7466 * C1646) *
                C31752) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
             C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
                C6079 +
            (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
             C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
                C31752) *
               C32096 +
           ((C7457 * C354 - C7463 * C344 + C7458 * C681 - C7464 * C676 +
             C7459 * C1117 - C7465 * C1108 + C32136 * C1641 - C7466 * C1638) *
                C6079 +
            (C7457 * C374 - C7463 * C355 + C7458 * C691 - C7464 * C682 +
             C7459 * C1135 - C7465 * C1118 + C32136 * C1647 - C7466 * C1642) *
                C31752) *
               C31941) *
              C31813 * C235 +
          (((C7463 * C239 - C7457 * C249 + C7464 * C244 - C7458 * C259 +
             C7465 * C974 - C7459 * C980 + C7466 * C977 - C32136 * C986) *
                C6079 +
            (C7463 * C250 - C7457 * C269 + C7464 * C260 - C7458 * C274 +
             C7465 * C981 - C7459 * C992 + C7466 * C987 - C32136 * C995) *
                C31752) *
               C32096 +
           ((C7463 * C676 - C7457 * C681 + C7464 * C1108 - C7458 * C1117 +
             C7465 * C1638 - C7459 * C1641 + C7466 * C6212 - C32136 * C6215) *
                C6079 +
            (C7463 * C682 - C7457 * C691 + C7464 * C1118 - C7458 * C1135 +
             C7465 * C1642 - C7459 * C1647 + C7466 * C6216 - C32136 * C6221) *
                C31752) *
               C31941) *
              C31813 * C236 +
          (((C7457 * C259 - C7463 * C244 + C7458 * C980 - C7464 * C974 +
             C7459 * C986 - C7465 * C977 + C32136 * C6144 - C7466 * C6142) *
                C6079 +
            (C7457 * C274 - C7463 * C260 + C7458 * C992 - C7464 * C981 +
             C7459 * C995 - C7465 * C987 + C32136 * C6148 - C7466 * C6145) *
                C31752) *
               C32096 +
           ((C7457 * C1117 - C7463 * C1108 + C7458 * C1641 - C7464 * C1638 +
             C7459 * C6215 - C7465 * C6212 + C32136 * C6479 - C7466 * C6478) *
                C6079 +
            (C7457 * C1135 - C7463 * C1118 + C7458 * C1647 - C7464 * C1642 +
             C7459 * C6221 - C7465 * C6216 + C32136 * C6481 - C7466 * C6480) *
                C31752) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
             C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
                C6079 +
            (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
             C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
                C31752) *
               C32096 +
           ((C9466 - C9467 + C9468 - C9469 + C9470 - C9471 + C9472 - C9473) *
                C6079 +
            (C9474 - C9475 + C9476 - C9477 + C9478 - C9479 + C9480 - C9481) *
                C31752) *
               C31941) *
              C341 +
          (((C9467 - C9466 + C9469 - C9468 + C9471 - C9470 + C9473 - C9472) *
                C6079 +
            (C9475 - C9474 + C9477 - C9476 + C9479 - C9478 + C9481 - C9480) *
                C31752) *
               C32096 +
           ((C9482 - C9483 + C9484 - C9485 + C9486 - C9487 + C9488 - C9489) *
                C6079 +
            (C9490 - C9491 + C9492 - C9493 + C9494 - C9495 + C9496 - C9497) *
                C31752) *
               C31941) *
              C342 +
          (((C9483 - C9482 + C9485 - C9484 + C9487 - C9486 + C9489 - C9488) *
                C6079 +
            (C9491 - C9490 + C9493 - C9492 + C9495 - C9494 + C9497 - C9496) *
                C31752) *
               C32096 +
           ((C7457 * C2005 - C7463 * C1999 + C7458 * C2533 - C7464 * C2530 +
             C7459 * C6815 - C7465 * C6812 + C32136 * C7332 - C7466 * C7331) *
                C6079 +
            (C7457 * C2017 - C7463 * C2006 + C7458 * C2539 - C7464 * C2534 +
             C7459 * C6821 - C7465 * C6816 + C32136 * C7334 - C7466 * C7333) *
                C31752) *
               C31941) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                 C815 +
             (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                 C809 +
             (C2661 - C2662 + C2663 - C2664) * C816 +
             (C2665 - C2666 + C2667 - C2668) * C810 + C2701 * C817 +
             C2702 * C32115) *
                C32096 +
            ((C4477 - C4478 + C4479 - C4480) * C815 +
             (C4481 - C4482 + C4483 - C4484) * C809 + C4925 * C816 +
             C4926 * C810 + C4183 * C817 + C4184 * C32115) *
                C31941) *
               C572 +
           (((C4478 - C4477 + C4480 - C4479) * C815 +
             (C4482 - C4481 + C4484 - C4483) * C809 + C4927 * C816 +
             C4928 * C810 + C4929 * C817 + C4930 * C32115) *
                C32096 +
            ((C4485 - C4486 + C4487 - C4488) * C815 +
             (C4489 - C4490 + C4491 - C4492) * C809 +
             (C4493 - C4494 + C4495 - C4496) * C816 +
             (C4497 - C4498 + C4499 - C4500) * C810 +
             (C4501 - C4502 + C4503 - C4504) * C817 +
             (C4505 - C4506 + C4507 - C4508) * C32115) *
                C31941) *
               C573) *
              C31799 * C468 +
          ((((C2662 - C2661 + C2664 - C2663) * C815 +
             (C2666 - C2665 + C2668 - C2667) * C809 +
             (C2670 - C2669 + C2672 - C2671) * C816 +
             (C2674 - C2673 + C2676 - C2675) * C810 +
             (C2678 - C2677 + C2680 - C2679) * C817 +
             (C2682 - C2681 + C2684 - C2683) * C32115) *
                C32096 +
            (C4927 * C815 + C4928 * C809 + C4929 * C816 + C4930 * C810 +
             (C3201 - C3202 + C3203 - C3204) * C817 +
             (C3205 - C3206 + C3207 - C3208) * C32115) *
                C31941) *
               C572 +
           ((C4925 * C815 + C4926 * C809 + C4183 * C816 + C4184 * C810 +
             (C3202 - C3201 + C3204 - C3203) * C817 +
             (C3206 - C3205 + C3208 - C3207) * C32115) *
                C32096 +
            ((C4494 - C4493 + C4496 - C4495) * C815 +
             (C4498 - C4497 + C4500 - C4499) * C809 +
             (C4502 - C4501 + C4504 - C4503) * C816 +
             (C4506 - C4505 + C4508 - C4507) * C810 +
             (C32095 * C370 - C2654 * C352 + C31899 * C2205 - C2655 * C2204) *
                 C817 +
             (C32095 * C382 - C2654 * C371 + C31899 * C2207 - C2655 * C2206) *
                 C32115) *
                C31941) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
              C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
                 C6079 +
             (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
              C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
                 C31752) *
                C32096 +
            ((C9466 - C9467 + C9468 - C9469 + C9470 - C9471 + C9472 - C9473) *
                 C6079 +
             (C9474 - C9475 + C9476 - C9477 + C9478 - C9479 + C9480 - C9481) *
                 C31752) *
                C31941) *
               C572 +
           (((C9467 - C9466 + C9469 - C9468 + C9471 - C9470 + C9473 - C9472) *
                 C6079 +
             (C9475 - C9474 + C9477 - C9476 + C9479 - C9478 + C9481 - C9480) *
                 C31752) *
                C32096 +
            ((C9482 - C9483 + C9484 - C9485 + C9486 - C9487 + C9488 - C9489) *
                 C6079 +
             (C9490 - C9491 + C9492 - C9493 + C9494 - C9495 + C9496 - C9497) *
                 C31752) *
                C31941) *
               C573) *
              C31799 * C468 +
          ((((C7471 - C7470 + C7473 - C7472 + C7475 - C7474 + C7477 - C7476) *
                 C6079 +
             (C7479 - C7478 + C7481 - C7480 + C7483 - C7482 + C7485 - C7484) *
                 C31752) *
                C32096 +
            ((C7974 - C7975 + C7976 - C7977 + C7978 - C7979 + C7980 - C7981) *
                 C6079 +
             (C7982 - C7983 + C7984 - C7985 + C7986 - C7987 + C7988 - C7989) *
                 C31752) *
                C31941) *
               C572 +
           (((C7975 - C7974 + C7977 - C7976 + C7979 - C7978 + C7981 - C7980) *
                 C6079 +
             (C7983 - C7982 + C7985 - C7984 + C7987 - C7986 + C7989 - C7988) *
                 C31752) *
                C32096 +
            ((C7457 * C366 - C7463 * C350 + C7458 * C1127 - C7464 * C1113 +
              C7459 * C1128 - C7465 * C1114 + C32136 * C7020 - C7466 * C7019) *
                 C6079 +
             (C7457 * C380 - C7463 * C367 + C7458 * C1140 - C7464 * C1129 +
              C7459 * C1141 - C7465 * C1130 + C32136 * C7022 - C7466 * C7021) *
                 C31752) *
                C31941) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C815 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C809 +
            (C2661 - C2662 + C2663 - C2664) * C816 +
            (C2665 - C2666 + C2667 - C2668) * C810 + C2701 * C817 +
            C2702 * C32115) *
               C32096 +
           ((C32095 * C354 - C2654 * C344 + C31899 * C681 - C2655 * C676) *
                C815 +
            (C32095 * C374 - C2654 * C355 + C31899 * C691 - C2655 * C682) *
                C809 +
            (C3186 - C3185 + C3188 - C3187) * C816 +
            (C3190 - C3189 + C3192 - C3191) * C810 + C4183 * C817 +
            C4184 * C32115) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C2662 - C2661 + C2664 - C2663) * C815 +
            (C2666 - C2665 + C2668 - C2667) * C809 +
            (C2670 - C2669 + C2672 - C2671) * C816 +
            (C2674 - C2673 + C2676 - C2675) * C810 +
            (C2678 - C2677 + C2680 - C2679) * C817 +
            (C2682 - C2681 + C2684 - C2683) * C32115) *
               C32096 +
           ((C3185 - C3186 + C3187 - C3188) * C815 +
            (C3189 - C3190 + C3191 - C3192) * C809 +
            (C3193 - C3194 + C3195 - C3196) * C816 +
            (C3197 - C3198 + C3199 - C3200) * C810 +
            (C3201 - C3202 + C3203 - C3204) * C817 +
            (C3205 - C3206 + C3207 - C3208) * C32115) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C2701 * C815 + C2702 * C809 + C2703 * C816 + C2704 * C810 +
            (C2686 - C2685 + C2688 - C2687) * C817 +
            (C2690 - C2689 + C2692 - C2691) * C32115) *
               C32096 +
           (C4183 * C815 + C4184 * C809 +
            (C3202 - C3201 + C3204 - C3203) * C816 +
            (C3206 - C3205 + C3208 - C3207) * C810 +
            (C32095 * C362 - C2654 * C348 + C31899 * C689 - C2655 * C680) *
                C817 +
            (C32095 * C378 - C2654 * C363 + C31899 * C695 - C2655 * C690) *
                C32115) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C32095 * C126 - C2654 * C119 + C31899 * C249 - C2655 * C239) *
                C815 +
            (C32095 * C140 - C2654 * C127 + C31899 * C269 - C2655 * C250) *
                C809 +
            (C2661 - C2662 + C2663 - C2664) * C816 +
            (C2665 - C2666 + C2667 - C2668) * C810 + C2701 * C817 +
            C2702 * C32115) *
               C32096 +
           ((C32095 * C354 - C2654 * C344 + C31899 * C681 - C2655 * C676) *
                C815 +
            (C32095 * C374 - C2654 * C355 + C31899 * C691 - C2655 * C682) *
                C809 +
            (C3186 - C3185 + C3188 - C3187) * C816 +
            (C3190 - C3189 + C3192 - C3191) * C810 + C4183 * C817 +
            C4184 * C32115) *
               C31941) *
              C31813 * C235 +
          (((C2654 * C239 - C32095 * C249 + C2655 * C244 - C31899 * C259) *
                C815 +
            (C2654 * C250 - C32095 * C269 + C2655 * C260 - C31899 * C274) *
                C809 +
            (C3031 - C3032 + C3033 - C3034) * C816 +
            (C3035 - C3036 + C3037 - C3038) * C810 +
            (C3039 - C3040 + C3041 - C3042) * C817 +
            (C3043 - C3044 + C3045 - C3046) * C32115) *
               C32096 +
           ((C2654 * C676 - C32095 * C681 + C2655 * C1108 - C31899 * C1117) *
                C815 +
            (C2654 * C682 - C32095 * C691 + C2655 * C1118 - C31899 * C1135) *
                C809 +
            (C2654 * C677 - C32095 * C683 + C2655 * C1109 - C31899 * C1119) *
                C816 +
            (C2654 * C684 - C32095 * C692 + C2655 * C1120 - C31899 * C1136) *
                C810 +
            (C2654 * C678 - C32095 * C685 + C2655 * C1110 - C31899 * C1121) *
                C817 +
            (C2654 * C686 - C32095 * C693 + C2655 * C1122 - C31899 * C1137) *
                C32115) *
               C31941) *
              C31813 * C236 +
          (((C32095 * C259 - C2654 * C244 + C31899 * C980 - C2655 * C974) *
                C815 +
            (C32095 * C274 - C2654 * C260 + C31899 * C992 - C2655 * C981) *
                C809 +
            (C32095 * C261 - C2654 * C245 + C31899 * C982 - C2655 * C975) *
                C816 +
            (C32095 * C275 - C2654 * C262 + C31899 * C993 - C2655 * C983) *
                C810 +
            (C32095 * C263 - C2654 * C246 + C31899 * C984 - C2655 * C976) *
                C817 +
            (C32095 * C276 - C2654 * C264 + C31899 * C994 - C2655 * C985) *
                C32115) *
               C32096 +
           ((C32095 * C1117 - C2654 * C1108 + C31899 * C1641 - C2655 * C1638) *
                C815 +
            (C32095 * C1135 - C2654 * C1118 + C31899 * C1647 - C2655 * C1642) *
                C809 +
            (C32095 * C1119 - C2654 * C1109 + C31899 * C1643 - C2655 * C1639) *
                C816 +
            (C32095 * C1136 - C2654 * C1120 + C31899 * C1648 - C2655 * C1644) *
                C810 +
            (C32095 * C1121 - C2654 * C1110 + C31899 * C1645 - C2655 * C1640) *
                C817 +
            (C32095 * C1137 - C2654 * C1122 + C31899 * C1649 - C2655 * C1646) *
                C32115) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
             C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
                C6079 +
            (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
             C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
                C31752) *
               C32096 +
           ((C7457 * C354 - C7463 * C344 + C7458 * C681 - C7464 * C676 +
             C7459 * C1117 - C7465 * C1108 + C32136 * C1641 - C7466 * C1638) *
                C6079 +
            (C7457 * C374 - C7463 * C355 + C7458 * C691 - C7464 * C682 +
             C7459 * C1135 - C7465 * C1118 + C32136 * C1647 - C7466 * C1642) *
                C31752) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C7471 - C7470 + C7473 - C7472 + C7475 - C7474 + C7477 - C7476) *
                C6079 +
            (C7479 - C7478 + C7481 - C7480 + C7483 - C7482 + C7485 - C7484) *
                C31752) *
               C32096 +
           ((C7974 - C7975 + C7976 - C7977 + C7978 - C7979 + C7980 - C7981) *
                C6079 +
            (C7982 - C7983 + C7984 - C7985 + C7986 - C7987 + C7988 - C7989) *
                C31752) *
               C31941) *
              C31813 * C31799 * C111 +
          (((C7487 - C7486 + C7489 - C7488 + C7491 - C7490 + C7493 - C7492) *
                C6079 +
            (C7495 - C7494 + C7497 - C7496 + C7499 - C7498 + C7501 - C7500) *
                C31752) *
               C32096 +
           ((C7457 * C358 - C7463 * C346 + C7458 * C685 - C7464 * C678 +
             C7459 * C1121 - C7465 * C1110 + C32136 * C1645 - C7466 * C1640) *
                C6079 +
            (C7457 * C376 - C7463 * C359 + C7458 * C693 - C7464 * C686 +
             C7459 * C1137 - C7465 * C1122 + C32136 * C1649 - C7466 * C1646) *
                C31752) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C7457 * C126 - C7463 * C119 + C7458 * C249 - C7464 * C239 +
             C7459 * C259 - C7465 * C244 + C32136 * C980 - C7466 * C974) *
                C6079 +
            (C7457 * C140 - C7463 * C127 + C7458 * C269 - C7464 * C250 +
             C7459 * C274 - C7465 * C260 + C32136 * C992 - C7466 * C981) *
                C31752) *
               C32096 +
           ((C7457 * C354 - C7463 * C344 + C7458 * C681 - C7464 * C676 +
             C7459 * C1117 - C7465 * C1108 + C32136 * C1641 - C7466 * C1638) *
                C6079 +
            (C7457 * C374 - C7463 * C355 + C7458 * C691 - C7464 * C682 +
             C7459 * C1135 - C7465 * C1118 + C32136 * C1647 - C7466 * C1642) *
                C31752) *
               C31941) *
              C31813 * C235 +
          (((C7463 * C239 - C7457 * C249 + C7464 * C244 - C7458 * C259 +
             C7465 * C974 - C7459 * C980 + C7466 * C977 - C32136 * C986) *
                C6079 +
            (C7463 * C250 - C7457 * C269 + C7464 * C260 - C7458 * C274 +
             C7465 * C981 - C7459 * C992 + C7466 * C987 - C32136 * C995) *
                C31752) *
               C32096 +
           ((C7463 * C676 - C7457 * C681 + C7464 * C1108 - C7458 * C1117 +
             C7465 * C1638 - C7459 * C1641 + C7466 * C6212 - C32136 * C6215) *
                C6079 +
            (C7463 * C682 - C7457 * C691 + C7464 * C1118 - C7458 * C1135 +
             C7465 * C1642 - C7459 * C1647 + C7466 * C6216 - C32136 * C6221) *
                C31752) *
               C31941) *
              C31813 * C236 +
          (((C7457 * C259 - C7463 * C244 + C7458 * C980 - C7464 * C974 +
             C7459 * C986 - C7465 * C977 + C32136 * C6144 - C7466 * C6142) *
                C6079 +
            (C7457 * C274 - C7463 * C260 + C7458 * C992 - C7464 * C981 +
             C7459 * C995 - C7465 * C987 + C32136 * C6148 - C7466 * C6145) *
                C31752) *
               C32096 +
           ((C7457 * C1117 - C7463 * C1108 + C7458 * C1641 - C7464 * C1638 +
             C7459 * C6215 - C7465 * C6212 + C32136 * C6479 - C7466 * C6478) *
                C6079 +
            (C7457 * C1135 - C7463 * C1118 + C7458 * C1647 - C7464 * C1642 +
             C7459 * C6221 - C7465 * C6216 + C32136 * C6481 - C7466 * C6480) *
                C31752) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C815 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C809 +
            (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
            (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
            C864 * C32115) *
               C31854 * C31813 * C466 +
           ((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
             C814 * C974 - C32126 * C980) *
                C815 +
            (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
             C814 * C981 - C32126 * C992) *
                C809 +
            (C1295 - C1296 + C1297 - C1298 + C1299 - C1300) * C816 +
            (C1301 - C1302 + C1303 - C1304 + C1305 - C1306) * C810 +
            (C1307 - C1308 + C1309 - C1310 + C1311 - C1312) * C817 +
            (C1313 - C1314 + C1315 - C1316 + C1317 - C1318) * C32115) *
               C31854 * C31813 * C467) *
              C468 +
          (((C820 - C819 + C822 - C821 + C824 - C823) * C815 +
            (C826 - C825 + C828 - C827 + C830 - C829) * C809 +
            (C832 - C831 + C834 - C833 + C836 - C835) * C816 +
            (C838 - C837 + C840 - C839 + C842 - C841) * C810 +
            (C843 - C844 + C845 - C846 + C847 - C848) * C817 +
            (C849 - C850 + C851 - C852 + C853 - C854) * C32115) *
               C31854 * C31813 * C466 +
           ((C1296 - C1295 + C1298 - C1297 + C1300 - C1299) * C815 +
            (C1302 - C1301 + C1304 - C1303 + C1306 - C1305) * C809 +
            (C1308 - C1307 + C1310 - C1309 + C1312 - C1311) * C816 +
            (C1314 - C1313 + C1316 - C1315 + C1318 - C1317) * C810 +
            (C32161 * C255 - C812 * C242 + C32149 * C265 - C813 * C247 +
             C32126 * C1291 - C814 * C1290) *
                C817 +
            (C32161 * C272 - C812 * C256 + C32149 * C277 - C813 * C266 +
             C32126 * C1293 - C814 * C1292) *
                C32115) *
               C31854 * C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C114 +
            (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C31854 * C31813 * C466 +
           ((C113 * C239 - C31836 * C249) * C114 +
            (C113 * C250 - C31836 * C269) * C102 + (C475 - C476) * C115 +
            (C477 - C478) * C103 + (C479 - C480) * C116 + (C481 - C482) * C104 +
            (C483 - C484) * C117 + (C485 - C486) * C105 + (C487 - C488) * C118 +
            (C489 - C490) * C106) *
               C31854 * C31813 * C467) *
              C468 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C31854 * C31813 * C466 +
           ((C476 - C475) * C114 + (C478 - C477) * C102 + (C480 - C479) * C115 +
            (C482 - C481) * C103 + (C484 - C483) * C116 + (C486 - C485) * C104 +
            (C488 - C487) * C117 + (C490 - C489) * C105 +
            (C31836 * C471 - C113 * C470) * C118 +
            (C31836 * C473 - C113 * C472) * C106) *
               C31854 * C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C815 +
             (C31836 * C140 - C113 * C127) * C809 + (C148 - C149) * C816 +
             (C150 - C151) * C810 + C168 * C817 + C169 * C32115) *
                C32162 +
            ((C2024 - C2025) * C815 + (C2026 - C2027) * C809 +
             (C580 - C579) * C816 + (C582 - C581) * C810 + C1764 * C817 +
             C1765 * C32115) *
                C32151 +
            C2058 * C32129) *
               C31813 * C466 +
           (((C113 * C239 - C31836 * C249) * C815 +
             (C113 * C250 - C31836 * C269) * C809 + (C475 - C476) * C816 +
             (C477 - C478) * C810 + (C479 - C480) * C817 +
             (C481 - C482) * C32115) *
                C32162 +
            ((C113 * C676 - C31836 * C681) * C815 +
             (C113 * C682 - C31836 * C691) * C809 + (C2209 - C2210) * C816 +
             (C2211 - C2212) * C810 + (C2213 - C2214) * C817 +
             (C2215 - C2216) * C32115) *
                C32151 +
            ((C113 * C1111 - C31836 * C1123) * C815 +
             (C113 * C1125 - C31836 * C1138) * C809 + (C2217 - C2218) * C816 +
             (C2219 - C2220) * C810 + (C2221 - C2222) * C817 +
             (C2223 - C2224) * C32115) *
                C32129) *
               C31813 * C467) *
              C468 +
          ((((C149 - C148) * C815 + (C151 - C150) * C809 +
             (C153 - C152) * C816 + (C155 - C154) * C810 +
             (C157 - C156) * C817 + (C159 - C158) * C32115) *
                C32162 +
            ((C579 - C580) * C815 + (C581 - C582) * C809 +
             (C583 - C584) * C816 + (C585 - C586) * C810 +
             (C587 - C588) * C817 + (C589 - C590) * C32115) *
                C32151 +
            ((C1767 - C1766) * C815 + (C1769 - C1768) * C809 +
             (C1771 - C1770) * C816 + (C1773 - C1772) * C810 +
             (C1774 - C1775) * C817 + (C1776 - C1777) * C32115) *
                C32129) *
               C31813 * C466 +
           (((C476 - C475) * C815 + (C478 - C477) * C809 +
             (C480 - C479) * C816 + (C482 - C481) * C810 +
             (C484 - C483) * C817 + (C486 - C485) * C32115) *
                C32162 +
            ((C2210 - C2209) * C815 + (C2212 - C2211) * C809 +
             (C2214 - C2213) * C816 + (C2216 - C2215) * C810 +
             (C31836 * C687 - C113 * C679) * C817 +
             (C31836 * C694 - C113 * C688) * C32115) *
                C32151 +
            ((C2218 - C2217) * C815 + (C2220 - C2219) * C809 +
             (C2222 - C2221) * C816 + (C2224 - C2223) * C810 +
             (C31836 * C2205 - C113 * C2204) * C817 +
             (C31836 * C2207 - C113 * C2206) * C32115) *
                C32129) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C5251 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C32158 +
            (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
            (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
            C5299 * C5253 + C5300 * C32115) *
               C31854 * C31813 * C466 +
           ((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
             C5250 * C974 - C32126 * C980) *
                C5251 +
            (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
             C5250 * C981 - C32126 * C992) *
                C32158 +
            (C5667 - C5668 + C5669 - C5670 + C5671 - C5672) * C5252 +
            (C5673 - C5674 + C5675 - C5676 + C5677 - C5678) * C32145 +
            (C5679 - C5680 + C5681 - C5682 + C5683 - C5684) * C5253 +
            (C5685 - C5686 + C5687 - C5688 + C5689 - C5690) * C32115) *
               C31854 * C31813 * C467) *
              C468 +
          (((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C5251 +
            (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C32158 +
            (C5268 - C5267 + C5270 - C5269 + C5272 - C5271) * C5252 +
            (C5274 - C5273 + C5276 - C5275 + C5278 - C5277) * C32145 +
            (C5279 - C5280 + C5281 - C5282 + C5283 - C5284) * C5253 +
            (C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C32115) *
               C31854 * C31813 * C466 +
           ((C5668 - C5667 + C5670 - C5669 + C5672 - C5671) * C5251 +
            (C5674 - C5673 + C5676 - C5675 + C5678 - C5677) * C32158 +
            (C5680 - C5679 + C5682 - C5681 + C5684 - C5683) * C5252 +
            (C5686 - C5685 + C5688 - C5687 + C5690 - C5689) * C32145 +
            (C5242 * C255 - C5248 * C242 + C5243 * C265 - C5249 * C247 +
             C32126 * C1291 - C5250 * C1290) *
                C5253 +
            (C5242 * C272 - C5248 * C256 + C5243 * C277 - C5249 * C266 +
             C32126 * C1293 - C5250 * C1292) *
                C32115) *
               C31854 * C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
             C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
             C6072 * C986 - C6078 * C977) *
                C6079 +
            (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
             C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
             C6072 * C995 - C6078 * C987) *
                C31752) *
               C31854 * C31813 * C466 +
           ((C6074 * C239 - C6068 * C249 + C6075 * C244 - C6069 * C259 +
             C6076 * C974 - C6070 * C980 + C6077 * C977 - C6071 * C986 +
             C6078 * C6142 - C6072 * C6144) *
                C6079 +
            (C6074 * C250 - C6068 * C269 + C6075 * C260 - C6069 * C274 +
             C6076 * C981 - C6070 * C992 + C6077 * C987 - C6071 * C995 +
             C6078 * C6145 - C6072 * C6148) *
                C31752) *
               C31854 * C31813 * C467) *
              C468 +
          (((C6074 * C120 - C6068 * C128 + C6075 * C240 - C6069 * C251 +
             C6076 * C245 - C6070 * C261 + C6077 * C975 - C6071 * C982 +
             C6078 * C978 - C6072 * C988) *
                C6079 +
            (C6074 * C129 - C6068 * C141 + C6075 * C252 - C6069 * C270 +
             C6076 * C262 - C6070 * C275 + C6077 * C983 - C6071 * C993 +
             C6078 * C989 - C6072 * C996) *
                C31752) *
               C31854 * C31813 * C466 +
           ((C6068 * C251 - C6074 * C240 + C6069 * C261 - C6075 * C245 +
             C6070 * C982 - C6076 * C975 + C6071 * C988 - C6077 * C978 +
             C6072 * C6307 - C6078 * C6306) *
                C6079 +
            (C6068 * C270 - C6074 * C252 + C6069 * C275 - C6075 * C262 +
             C6070 * C993 - C6076 * C983 + C6071 * C996 - C6077 * C989 +
             C6072 * C6309 - C6078 * C6308) *
                C31752) *
               C31854 * C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
              C32126 * C259 - C5250 * C244) *
                 C6079 +
             (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
              C32126 * C274 - C5250 * C260) *
                 C31752) *
                C32162 +
            ((C6825 - C6826 + C6827 - C6828 + C6829 - C6830) * C6079 +
             (C6831 - C6832 + C6833 - C6834 + C6835 - C6836) * C31752) *
                C32151 +
            C6873 * C32129) *
               C31813 * C466 +
           (((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
              C5250 * C974 - C32126 * C980) *
                 C6079 +
             (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
              C5250 * C981 - C32126 * C992) *
                 C31752) *
                C32162 +
            ((C5248 * C676 - C5242 * C681 + C5249 * C1108 - C5243 * C1117 +
              C5250 * C1638 - C32126 * C1641) *
                 C6079 +
             (C5248 * C682 - C5242 * C691 + C5249 * C1118 - C5243 * C1135 +
              C5250 * C1642 - C32126 * C1647) *
                 C31752) *
                C32151 +
            ((C5248 * C1111 - C5242 * C1123 + C5249 * C1112 - C5243 * C1124 +
              C5250 * C6213 - C32126 * C6217) *
                 C6079 +
             (C5248 * C1125 - C5242 * C1138 + C5249 * C1126 - C5243 * C1139 +
              C5250 * C6219 - C32126 * C6222) *
                 C31752) *
                C32129) *
               C31813 * C467) *
              C468 +
          ((((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C6079 +
             (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C31752) *
                C32162 +
            ((C5837 - C5838 + C5839 - C5840 + C5841 - C5842) * C6079 +
             (C5843 - C5844 + C5845 - C5846 + C5847 - C5848) * C31752) *
                C32151 +
            ((C5248 * C350 - C5242 * C366 + C5249 * C1113 - C5243 * C1127 +
              C5250 * C1114 - C32126 * C1128) *
                 C6079 +
             (C5248 * C367 - C5242 * C380 + C5249 * C1129 - C5243 * C1140 +
              C5250 * C1130 - C32126 * C1141) *
                 C31752) *
                C32129) *
               C31813 * C466 +
           (((C5668 - C5667 + C5670 - C5669 + C5672 - C5671) * C6079 +
             (C5674 - C5673 + C5676 - C5675 + C5678 - C5677) * C31752) *
                C32162 +
            ((C5242 * C683 - C5248 * C677 + C5243 * C1119 - C5249 * C1109 +
              C32126 * C1643 - C5250 * C1639) *
                 C6079 +
             (C5242 * C692 - C5248 * C684 + C5243 * C1136 - C5249 * C1120 +
              C32126 * C1648 - C5250 * C1644) *
                 C31752) *
                C32151 +
            ((C5242 * C1127 - C5248 * C1113 + C5243 * C1128 - C5249 * C1114 +
              C32126 * C7020 - C5250 * C7019) *
                 C6079 +
             (C5242 * C1140 - C5248 * C1129 + C5243 * C1141 - C5249 * C1130 +
              C32126 * C7022 - C5250 * C7021) *
                 C31752) *
                C32129) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C815 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C809 +
            (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
            (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
            C864 * C32115) *
               C31854 * C572 +
           ((C812 * C344 - C32161 * C354 + C813 * C676 - C32149 * C681 +
             C814 * C1108 - C32126 * C1117) *
                C815 +
            (C812 * C355 - C32161 * C374 + C813 * C682 - C32149 * C691 +
             C814 * C1118 - C32126 * C1135) *
                C809 +
            (C1469 - C1470 + C1471 - C1472 + C1473 - C1474) * C816 +
            (C1475 - C1476 + C1477 - C1478 + C1479 - C1480) * C810 +
            (C1481 - C1482 + C1483 - C1484 + C1485 - C1486) * C817 +
            (C1487 - C1488 + C1489 - C1490 + C1491 - C1492) * C32115) *
               C31854 * C573) *
              C466 +
          (((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
             C814 * C974 - C32126 * C980) *
                C815 +
            (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
             C814 * C981 - C32126 * C992) *
                C809 +
            (C1295 - C1296 + C1297 - C1298 + C1299 - C1300) * C816 +
            (C1301 - C1302 + C1303 - C1304 + C1305 - C1306) * C810 +
            (C1307 - C1308 + C1309 - C1310 + C1311 - C1312) * C817 +
            (C1313 - C1314 + C1315 - C1316 + C1317 - C1318) * C32115) *
               C31854 * C572 +
           ((C32161 * C681 - C812 * C676 + C32149 * C1117 - C813 * C1108 +
             C32126 * C1641 - C814 * C1638) *
                C815 +
            (C32161 * C691 - C812 * C682 + C32149 * C1135 - C813 * C1118 +
             C32126 * C1647 - C814 * C1642) *
                C809 +
            (C32161 * C683 - C812 * C677 + C32149 * C1119 - C813 * C1109 +
             C32126 * C1643 - C814 * C1639) *
                C816 +
            (C32161 * C692 - C812 * C684 + C32149 * C1136 - C813 * C1120 +
             C32126 * C1648 - C814 * C1644) *
                C810 +
            (C32161 * C685 - C812 * C678 + C32149 * C1121 - C813 * C1110 +
             C32126 * C1645 - C814 * C1640) *
                C817 +
            (C32161 * C693 - C812 * C686 + C32149 * C1137 - C813 * C1122 +
             C32126 * C1649 - C814 * C1646) *
                C32115) *
               C31854 * C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C114 +
            (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C31854 * C572 +
           ((C113 * C344 - C31836 * C354) * C114 +
            (C113 * C355 - C31836 * C374) * C102 + (C579 - C580) * C115 +
            (C581 - C582) * C103 + (C583 - C584) * C116 + (C585 - C586) * C104 +
            (C587 - C588) * C117 + (C589 - C590) * C105 + (C591 - C592) * C118 +
            (C593 - C594) * C106) *
               C31854 * C573) *
              C466 +
          (((C113 * C239 - C31836 * C249) * C114 +
            (C113 * C250 - C31836 * C269) * C102 + (C475 - C476) * C115 +
            (C477 - C478) * C103 + (C479 - C480) * C116 + (C481 - C482) * C104 +
            (C483 - C484) * C117 + (C485 - C486) * C105 + (C487 - C488) * C118 +
            (C489 - C490) * C106) *
               C31854 * C572 +
           ((C31836 * C681 - C113 * C676) * C114 +
            (C31836 * C691 - C113 * C682) * C102 +
            (C31836 * C683 - C113 * C677) * C115 +
            (C31836 * C692 - C113 * C684) * C103 +
            (C31836 * C685 - C113 * C678) * C116 +
            (C31836 * C693 - C113 * C686) * C104 +
            (C31836 * C687 - C113 * C679) * C117 +
            (C31836 * C694 - C113 * C688) * C105 +
            (C31836 * C689 - C113 * C680) * C118 +
            (C31836 * C695 - C113 * C690) * C106) *
               C31854 * C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C815 +
             (C31836 * C140 - C113 * C127) * C809 + (C148 - C149) * C816 +
             (C150 - C151) * C810 + C168 * C817 + C169 * C32115) *
                C32162 +
            ((C2024 - C2025) * C815 + (C2026 - C2027) * C809 + C2375 * C816 +
             C2376 * C810 + C1764 * C817 + C1765 * C32115) *
                C32151 +
            C2058 * C32129) *
               C572 +
           (((C2025 - C2024) * C815 + (C2027 - C2026) * C809 + C2377 * C816 +
             C2378 * C810 + C2379 * C817 + C2380 * C32115) *
                C32162 +
            ((C2029 - C2028) * C815 + (C2031 - C2030) * C809 + C2381 * C816 +
             C2382 * C810 + C2383 * C817 + C2384 * C32115) *
                C32151 +
            ((C2036 - C2037) * C815 + (C2038 - C2039) * C809 +
             (C2040 - C2041) * C816 + (C2042 - C2043) * C810 +
             (C2044 - C2045) * C817 + (C2046 - C2047) * C32115) *
                C32129) *
               C573) *
              C466 +
          ((((C113 * C239 - C31836 * C249) * C815 +
             (C113 * C250 - C31836 * C269) * C809 + (C475 - C476) * C816 +
             (C477 - C478) * C810 + (C479 - C480) * C817 +
             (C481 - C482) * C32115) *
                C32162 +
            ((C2543 - C2544) * C815 + (C2545 - C2546) * C809 +
             (C2209 - C2210) * C816 + (C2211 - C2212) * C810 +
             (C2213 - C2214) * C817 + (C2215 - C2216) * C32115) *
                C32151 +
            ((C2547 - C2548) * C815 + (C2549 - C2550) * C809 +
             (C2217 - C2218) * C816 + (C2219 - C2220) * C810 +
             (C2221 - C2222) * C817 + (C2223 - C2224) * C32115) *
                C32129) *
               C572 +
           (((C2544 - C2543) * C815 + (C2546 - C2545) * C809 +
             (C2210 - C2209) * C816 + (C2212 - C2211) * C810 +
             (C2214 - C2213) * C817 + (C2216 - C2215) * C32115) *
                C32162 +
            ((C2548 - C2547) * C815 + (C2550 - C2549) * C809 +
             (C2218 - C2217) * C816 + (C2220 - C2219) * C810 +
             (C2222 - C2221) * C817 + (C2224 - C2223) * C32115) *
                C32151 +
            ((C31836 * C2533 - C113 * C2530) * C815 +
             (C31836 * C2539 - C113 * C2534) * C809 +
             (C31836 * C2535 - C113 * C2531) * C816 +
             (C31836 * C2540 - C113 * C2536) * C810 +
             (C31836 * C2537 - C113 * C2532) * C817 +
             (C31836 * C2541 - C113 * C2538) * C32115) *
                C32129) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C5251 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C32158 +
            (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
            (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
            C5299 * C5253 + C5300 * C32115) *
               C31854 * C572 +
           ((C5248 * C344 - C5242 * C354 + C5249 * C676 - C5243 * C681 +
             C5250 * C1108 - C32126 * C1117) *
                C5251 +
            (C5248 * C355 - C5242 * C374 + C5249 * C682 - C5243 * C691 +
             C5250 * C1118 - C32126 * C1135) *
                C32158 +
            (C5837 - C5838 + C5839 - C5840 + C5841 - C5842) * C5252 +
            (C5843 - C5844 + C5845 - C5846 + C5847 - C5848) * C32145 +
            (C5849 - C5850 + C5851 - C5852 + C5853 - C5854) * C5253 +
            (C5855 - C5856 + C5857 - C5858 + C5859 - C5860) * C32115) *
               C31854 * C573) *
              C466 +
          (((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
             C5250 * C974 - C32126 * C980) *
                C5251 +
            (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
             C5250 * C981 - C32126 * C992) *
                C32158 +
            (C5667 - C5668 + C5669 - C5670 + C5671 - C5672) * C5252 +
            (C5673 - C5674 + C5675 - C5676 + C5677 - C5678) * C32145 +
            (C5679 - C5680 + C5681 - C5682 + C5683 - C5684) * C5253 +
            (C5685 - C5686 + C5687 - C5688 + C5689 - C5690) * C32115) *
               C31854 * C572 +
           ((C5242 * C681 - C5248 * C676 + C5243 * C1117 - C5249 * C1108 +
             C32126 * C1641 - C5250 * C1638) *
                C5251 +
            (C5242 * C691 - C5248 * C682 + C5243 * C1135 - C5249 * C1118 +
             C32126 * C1647 - C5250 * C1642) *
                C32158 +
            (C5242 * C683 - C5248 * C677 + C5243 * C1119 - C5249 * C1109 +
             C32126 * C1643 - C5250 * C1639) *
                C5252 +
            (C5242 * C692 - C5248 * C684 + C5243 * C1136 - C5249 * C1120 +
             C32126 * C1648 - C5250 * C1644) *
                C32145 +
            (C5242 * C685 - C5248 * C678 + C5243 * C1121 - C5249 * C1110 +
             C32126 * C1645 - C5250 * C1640) *
                C5253 +
            (C5242 * C693 - C5248 * C686 + C5243 * C1137 - C5249 * C1122 +
             C32126 * C1649 - C5250 * C1646) *
                C32115) *
               C31854 * C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
             C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
             C6072 * C986 - C6078 * C977) *
                C6079 +
            (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
             C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
             C6072 * C995 - C6078 * C987) *
                C31752) *
               C31854 * C572 +
           ((C6074 * C344 - C6068 * C354 + C6075 * C676 - C6069 * C681 +
             C6076 * C1108 - C6070 * C1117 + C6077 * C1638 - C6071 * C1641 +
             C6078 * C6212 - C6072 * C6215) *
                C6079 +
            (C6074 * C355 - C6068 * C374 + C6075 * C682 - C6069 * C691 +
             C6076 * C1118 - C6070 * C1135 + C6077 * C1642 - C6071 * C1647 +
             C6078 * C6216 - C6072 * C6221) *
                C31752) *
               C31854 * C573) *
              C466 +
          (((C6074 * C239 - C6068 * C249 + C6075 * C244 - C6069 * C259 +
             C6076 * C974 - C6070 * C980 + C6077 * C977 - C6071 * C986 +
             C6078 * C6142 - C6072 * C6144) *
                C6079 +
            (C6074 * C250 - C6068 * C269 + C6075 * C260 - C6069 * C274 +
             C6076 * C981 - C6070 * C992 + C6077 * C987 - C6071 * C995 +
             C6078 * C6145 - C6072 * C6148) *
                C31752) *
               C31854 * C572 +
           ((C6068 * C681 - C6074 * C676 + C6069 * C1117 - C6075 * C1108 +
             C6070 * C1641 - C6076 * C1638 + C6071 * C6215 - C6077 * C6212 +
             C6072 * C6479 - C6078 * C6478) *
                C6079 +
            (C6068 * C691 - C6074 * C682 + C6069 * C1135 - C6075 * C1118 +
             C6070 * C1647 - C6076 * C1642 + C6071 * C6221 - C6077 * C6216 +
             C6072 * C6481 - C6078 * C6480) *
                C31752) *
               C31854 * C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
              C32126 * C259 - C5250 * C244) *
                 C6079 +
             (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
              C32126 * C274 - C5250 * C260) *
                 C31752) *
                C32162 +
            ((C6825 - C6826 + C6827 - C6828 + C6829 - C6830) * C6079 +
             (C6831 - C6832 + C6833 - C6834 + C6835 - C6836) * C31752) *
                C32151 +
            C6873 * C32129) *
               C572 +
           (((C6826 - C6825 + C6828 - C6827 + C6830 - C6829) * C6079 +
             (C6832 - C6831 + C6834 - C6833 + C6836 - C6835) * C31752) *
                C32162 +
            ((C6838 - C6837 + C6840 - C6839 + C6842 - C6841) * C6079 +
             (C6844 - C6843 + C6846 - C6845 + C6848 - C6847) * C31752) *
                C32151 +
            ((C6849 - C6850 + C6851 - C6852 + C6853 - C6854) * C6079 +
             (C6855 - C6856 + C6857 - C6858 + C6859 - C6860) * C31752) *
                C32129) *
               C573) *
              C466 +
          ((((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
              C5250 * C974 - C32126 * C980) *
                 C6079 +
             (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
              C5250 * C981 - C32126 * C992) *
                 C31752) *
                C32162 +
            ((C7336 - C7337 + C7338 - C7339 + C7340 - C7341) * C6079 +
             (C7342 - C7343 + C7344 - C7345 + C7346 - C7347) * C31752) *
                C32151 +
            ((C7348 - C7349 + C7350 - C7351 + C7352 - C7353) * C6079 +
             (C7354 - C7355 + C7356 - C7357 + C7358 - C7359) * C31752) *
                C32129) *
               C572 +
           (((C7337 - C7336 + C7339 - C7338 + C7341 - C7340) * C6079 +
             (C7343 - C7342 + C7345 - C7344 + C7347 - C7346) * C31752) *
                C32162 +
            ((C7349 - C7348 + C7351 - C7350 + C7353 - C7352) * C6079 +
             (C7355 - C7354 + C7357 - C7356 + C7359 - C7358) * C31752) *
                C32151 +
            ((C5242 * C2533 - C5248 * C2530 + C5243 * C6815 - C5249 * C6812 +
              C32126 * C7332 - C5250 * C7331) *
                 C6079 +
             (C5242 * C2539 - C5248 * C2534 + C5243 * C6821 - C5249 * C6816 +
              C32126 * C7334 - C5250 * C7333) *
                 C31752) *
                C32129) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((C31836 * C126 - C113 * C119) * C114 +
               (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
               (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
               C171 * C105 + C172 * C118 + C173 * C106) *
                  C31854 * C31813 * C31799 * C110 +
              ((C149 - C148) * C114 + (C151 - C150) * C102 +
               (C153 - C152) * C115 + (C155 - C154) * C103 +
               (C157 - C156) * C116 + (C159 - C158) * C104 +
               (C161 - C160) * C117 + (C163 - C162) * C105 +
               (C164 - C165) * C118 + (C166 - C167) * C106) *
                  C31854 * C31813 * C31799 * C111 +
              (C168 * C114 + C169 * C102 + C170 * C115 + C171 * C103 +
               C172 * C116 + C173 * C104 + (C165 - C164) * C117 +
               (C167 - C166) * C105 + (C31836 * C138 - C113 * C125) * C118 +
               (C31836 * C146 - C113 * C139) * C106) *
                  C31854 * C31813 * C31799 * C112) +
         std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((C31836 * C126 - C113 * C119) * C114 +
               (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
               (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
               C171 * C105 + C172 * C118 + C173 * C106) *
                  C31854 * C31813 * C235 +
              ((C113 * C239 - C31836 * C249) * C114 +
               (C113 * C250 - C31836 * C269) * C102 +
               (C113 * C240 - C31836 * C251) * C115 +
               (C113 * C252 - C31836 * C270) * C103 +
               (C113 * C241 - C31836 * C253) * C116 +
               (C113 * C254 - C31836 * C271) * C104 +
               (C113 * C242 - C31836 * C255) * C117 +
               (C113 * C256 - C31836 * C272) * C105 +
               (C113 * C243 - C31836 * C257) * C118 +
               (C113 * C258 - C31836 * C273) * C106) *
                  C31854 * C31813 * C236 +
              ((C31836 * C259 - C113 * C244) * C114 +
               (C31836 * C274 - C113 * C260) * C102 +
               (C31836 * C261 - C113 * C245) * C115 +
               (C31836 * C275 - C113 * C262) * C103 +
               (C31836 * C263 - C113 * C246) * C116 +
               (C31836 * C276 - C113 * C264) * C104 +
               (C31836 * C265 - C113 * C247) * C117 +
               (C31836 * C277 - C113 * C266) * C105 +
               (C31836 * C267 - C113 * C248) * C118 +
               (C31836 * C278 - C113 * C268) * C106) *
                  C31854 * C31813 * C237) *
             C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31836 * C126 - C113 * C119) * C114 +
           (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C31854 * C341 +
          ((C113 * C344 - C31836 * C354) * C114 +
           (C113 * C355 - C31836 * C374) * C102 +
           (C113 * C345 - C31836 * C356) * C115 +
           (C113 * C357 - C31836 * C375) * C103 +
           (C113 * C346 - C31836 * C358) * C116 +
           (C113 * C359 - C31836 * C376) * C104 +
           (C113 * C347 - C31836 * C360) * C117 +
           (C113 * C361 - C31836 * C377) * C105 +
           (C113 * C348 - C31836 * C362) * C118 +
           (C113 * C363 - C31836 * C378) * C106) *
              C31854 * C342 +
          ((C31836 * C364 - C113 * C349) * C114 +
           (C31836 * C379 - C113 * C365) * C102 +
           (C31836 * C366 - C113 * C350) * C115 +
           (C31836 * C380 - C113 * C367) * C103 +
           (C31836 * C368 - C113 * C351) * C116 +
           (C31836 * C381 - C113 * C369) * C104 +
           (C31836 * C370 - C113 * C352) * C117 +
           (C31836 * C382 - C113 * C371) * C105 +
           (C31836 * C372 - C113 * C353) * C118 +
           (C31836 * C383 - C113 * C373) * C106) *
              C31854 * C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
            C32126 * C259 - C814 * C244) *
               C815 +
           (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
            C32126 * C274 - C814 * C260) *
               C809 +
           (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
           (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
           C864 * C32115) *
              C31854 * C31813 * C31799 * C110 +
          ((C820 - C819 + C822 - C821 + C824 - C823) * C815 +
           (C826 - C825 + C828 - C827 + C830 - C829) * C809 +
           (C832 - C831 + C834 - C833 + C836 - C835) * C816 +
           (C838 - C837 + C840 - C839 + C842 - C841) * C810 +
           (C843 - C844 + C845 - C846 + C847 - C848) * C817 +
           (C849 - C850 + C851 - C852 + C853 - C854) * C32115) *
              C31854 * C31813 * C31799 * C111 +
          (C863 * C815 + C864 * C809 +
           (C844 - C843 + C846 - C845 + C848 - C847) * C816 +
           (C850 - C849 + C852 - C851 + C854 - C853) * C810 +
           (C32161 * C134 - C812 * C123 + C32149 * C257 - C813 * C243 +
            C32126 * C267 - C814 * C248) *
               C817 +
           (C32161 * C144 - C812 * C135 + C32149 * C273 - C813 * C258 +
            C32126 * C278 - C814 * C268) *
               C32115) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
            C32126 * C259 - C814 * C244) *
               C815 +
           (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
            C32126 * C274 - C814 * C260) *
               C809 +
           (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
           (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
           C864 * C32115) *
              C31854 * C31813 * C235 +
          ((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
            C814 * C974 - C32126 * C980) *
               C815 +
           (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
            C814 * C981 - C32126 * C992) *
               C809 +
           (C812 * C240 - C32161 * C251 + C813 * C245 - C32149 * C261 +
            C814 * C975 - C32126 * C982) *
               C816 +
           (C812 * C252 - C32161 * C270 + C813 * C262 - C32149 * C275 +
            C814 * C983 - C32126 * C993) *
               C810 +
           (C812 * C241 - C32161 * C253 + C813 * C246 - C32149 * C263 +
            C814 * C976 - C32126 * C984) *
               C817 +
           (C812 * C254 - C32161 * C271 + C813 * C264 - C32149 * C276 +
            C814 * C985 - C32126 * C994) *
               C32115) *
              C31854 * C31813 * C236 +
          ((C32161 * C259 - C812 * C244 + C32149 * C980 - C813 * C974 +
            C32126 * C986 - C814 * C977) *
               C815 +
           (C32161 * C274 - C812 * C260 + C32149 * C992 - C813 * C981 +
            C32126 * C995 - C814 * C987) *
               C809 +
           (C32161 * C261 - C812 * C245 + C32149 * C982 - C813 * C975 +
            C32126 * C988 - C814 * C978) *
               C816 +
           (C32161 * C275 - C812 * C262 + C32149 * C993 - C813 * C983 +
            C32126 * C996 - C814 * C989) *
               C810 +
           (C32161 * C263 - C812 * C246 + C32149 * C984 - C813 * C976 +
            C32126 * C990 - C814 * C979) *
               C817 +
           (C32161 * C276 - C812 * C264 + C32149 * C994 - C813 * C985 +
            C32126 * C997 - C814 * C991) *
               C32115) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
            C32126 * C259 - C814 * C244) *
               C815 +
           (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
            C32126 * C274 - C814 * C260) *
               C809 +
           (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
           (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
           C864 * C32115) *
              C31854 * C341 +
          ((C812 * C344 - C32161 * C354 + C813 * C676 - C32149 * C681 +
            C814 * C1108 - C32126 * C1117) *
               C815 +
           (C812 * C355 - C32161 * C374 + C813 * C682 - C32149 * C691 +
            C814 * C1118 - C32126 * C1135) *
               C809 +
           (C812 * C345 - C32161 * C356 + C813 * C677 - C32149 * C683 +
            C814 * C1109 - C32126 * C1119) *
               C816 +
           (C812 * C357 - C32161 * C375 + C813 * C684 - C32149 * C692 +
            C814 * C1120 - C32126 * C1136) *
               C810 +
           (C812 * C346 - C32161 * C358 + C813 * C678 - C32149 * C685 +
            C814 * C1110 - C32126 * C1121) *
               C817 +
           (C812 * C359 - C32161 * C376 + C813 * C686 - C32149 * C693 +
            C814 * C1122 - C32126 * C1137) *
               C32115) *
              C31854 * C342 +
          ((C32161 * C364 - C812 * C349 + C32149 * C1123 - C813 * C1111 +
            C32126 * C1124 - C814 * C1112) *
               C815 +
           (C32161 * C379 - C812 * C365 + C32149 * C1138 - C813 * C1125 +
            C32126 * C1139 - C814 * C1126) *
               C809 +
           (C32161 * C366 - C812 * C350 + C32149 * C1127 - C813 * C1113 +
            C32126 * C1128 - C814 * C1114) *
               C816 +
           (C32161 * C380 - C812 * C367 + C32149 * C1140 - C813 * C1129 +
            C32126 * C1141 - C814 * C1130) *
               C810 +
           (C32161 * C368 - C812 * C351 + C32149 * C1131 - C813 * C1115 +
            C32126 * C1132 - C814 * C1116) *
               C817 +
           (C32161 * C381 - C812 * C369 + C32149 * C1142 - C813 * C1133 +
            C32126 * C1143 - C814 * C1134) *
               C32115) *
              C31854 * C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C815 +
            (C31836 * C140 - C113 * C127) * C809 + (C148 - C149) * C816 +
            (C150 - C151) * C810 + C168 * C817 + C169 * C32115) *
               C32162 +
           ((C31836 * C354 - C113 * C344) * C815 +
            (C31836 * C374 - C113 * C355) * C809 + (C580 - C579) * C816 +
            (C582 - C581) * C810 + C1764 * C817 + C1765 * C32115) *
               C32151 +
           ((C31836 * C364 - C113 * C349) * C815 +
            (C31836 * C379 - C113 * C365) * C809 + (C1766 - C1767) * C816 +
            (C1768 - C1769) * C810 + C1778 * C817 + C1779 * C32115) *
               C32129) *
              C31813 * C31799 * C110 +
          (((C149 - C148) * C815 + (C151 - C150) * C809 + (C153 - C152) * C816 +
            (C155 - C154) * C810 + (C157 - C156) * C817 +
            (C159 - C158) * C32115) *
               C32162 +
           ((C579 - C580) * C815 + (C581 - C582) * C809 + (C583 - C584) * C816 +
            (C585 - C586) * C810 + (C587 - C588) * C817 +
            (C589 - C590) * C32115) *
               C32151 +
           ((C1767 - C1766) * C815 + (C1769 - C1768) * C809 +
            (C1771 - C1770) * C816 + (C1773 - C1772) * C810 +
            (C1774 - C1775) * C817 + (C1776 - C1777) * C32115) *
               C32129) *
              C31813 * C31799 * C111 +
          ((C168 * C815 + C169 * C809 + C170 * C816 + C171 * C810 +
            C172 * C817 + C173 * C32115) *
               C32162 +
           (C1764 * C815 + C1765 * C809 + (C588 - C587) * C816 +
            (C590 - C589) * C810 + (C592 - C591) * C817 +
            (C594 - C593) * C32115) *
               C32151 +
           (C1778 * C815 + C1779 * C809 + (C1775 - C1774) * C816 +
            (C1777 - C1776) * C810 + (C31836 * C372 - C113 * C353) * C817 +
            (C31836 * C383 - C113 * C373) * C32115) *
               C32129) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C815 +
            (C31836 * C140 - C113 * C127) * C809 + (C148 - C149) * C816 +
            (C150 - C151) * C810 + C168 * C817 + C169 * C32115) *
               C32162 +
           ((C31836 * C354 - C113 * C344) * C815 +
            (C31836 * C374 - C113 * C355) * C809 + (C580 - C579) * C816 +
            (C582 - C581) * C810 + C1764 * C817 + C1765 * C32115) *
               C32151 +
           ((C31836 * C364 - C113 * C349) * C815 +
            (C31836 * C379 - C113 * C365) * C809 + (C1766 - C1767) * C816 +
            (C1768 - C1769) * C810 + C1778 * C817 + C1779 * C32115) *
               C32129) *
              C31813 * C235 +
          (((C113 * C239 - C31836 * C249) * C815 +
            (C113 * C250 - C31836 * C269) * C809 + (C475 - C476) * C816 +
            (C477 - C478) * C810 + (C479 - C480) * C817 +
            (C481 - C482) * C32115) *
               C32162 +
           ((C113 * C676 - C31836 * C681) * C815 +
            (C113 * C682 - C31836 * C691) * C809 +
            (C113 * C677 - C31836 * C683) * C816 +
            (C113 * C684 - C31836 * C692) * C810 +
            (C113 * C678 - C31836 * C685) * C817 +
            (C113 * C686 - C31836 * C693) * C32115) *
               C32151 +
           ((C113 * C1111 - C31836 * C1123) * C815 +
            (C113 * C1125 - C31836 * C1138) * C809 +
            (C113 * C1113 - C31836 * C1127) * C816 +
            (C113 * C1129 - C31836 * C1140) * C810 +
            (C113 * C1115 - C31836 * C1131) * C817 +
            (C113 * C1133 - C31836 * C1142) * C32115) *
               C32129) *
              C31813 * C236 +
          (((C31836 * C259 - C113 * C244) * C815 +
            (C31836 * C274 - C113 * C260) * C809 +
            (C31836 * C261 - C113 * C245) * C816 +
            (C31836 * C275 - C113 * C262) * C810 +
            (C31836 * C263 - C113 * C246) * C817 +
            (C31836 * C276 - C113 * C264) * C32115) *
               C32162 +
           ((C31836 * C1117 - C113 * C1108) * C815 +
            (C31836 * C1135 - C113 * C1118) * C809 +
            (C31836 * C1119 - C113 * C1109) * C816 +
            (C31836 * C1136 - C113 * C1120) * C810 +
            (C31836 * C1121 - C113 * C1110) * C817 +
            (C31836 * C1137 - C113 * C1122) * C32115) *
               C32151 +
           ((C31836 * C1124 - C113 * C1112) * C815 +
            (C31836 * C1139 - C113 * C1126) * C809 +
            (C31836 * C1128 - C113 * C1114) * C816 +
            (C31836 * C1141 - C113 * C1130) * C810 +
            (C31836 * C1132 - C113 * C1116) * C817 +
            (C31836 * C1143 - C113 * C1134) * C32115) *
               C32129) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C815 +
            (C31836 * C140 - C113 * C127) * C809 + (C148 - C149) * C816 +
            (C150 - C151) * C810 + C168 * C817 + C169 * C32115) *
               C32162 +
           ((C2024 - C2025) * C815 + (C2026 - C2027) * C809 +
            (C580 - C579) * C816 + (C582 - C581) * C810 + C1764 * C817 +
            C1765 * C32115) *
               C32151 +
           C2058 * C32129) *
              C341 +
          (((C2025 - C2024) * C815 + (C2027 - C2026) * C809 +
            (C579 - C580) * C816 + (C581 - C582) * C810 + (C583 - C584) * C817 +
            (C585 - C586) * C32115) *
               C32162 +
           ((C2029 - C2028) * C815 + (C2031 - C2030) * C809 +
            (C1767 - C1766) * C816 + (C1769 - C1768) * C810 +
            (C1771 - C1770) * C817 + (C1773 - C1772) * C32115) *
               C32151 +
           ((C2036 - C2037) * C815 + (C2038 - C2039) * C809 +
            (C2040 - C2041) * C816 + (C2042 - C2043) * C810 +
            (C2044 - C2045) * C817 + (C2046 - C2047) * C32115) *
               C32129) *
              C342 +
          (C2058 * C32162 +
           ((C2037 - C2036) * C815 + (C2039 - C2038) * C809 +
            (C2041 - C2040) * C816 + (C2043 - C2042) * C810 +
            (C2045 - C2044) * C817 + (C2047 - C2046) * C32115) *
               C32151 +
           ((C31836 * C2011 - C113 * C2002) * C815 +
            (C31836 * C2020 - C113 * C2012) * C809 +
            (C31836 * C2013 - C113 * C2003) * C816 +
            (C31836 * C2021 - C113 * C2014) * C810 +
            (C31836 * C2015 - C113 * C2004) * C817 +
            (C31836 * C2022 - C113 * C2016) * C32115) *
               C32129) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
            C32126 * C259 - C5250 * C244) *
               C5251 +
           (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
            C32126 * C274 - C5250 * C260) *
               C32158 +
           (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
           (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
           C5299 * C5253 + C5300 * C32115) *
              C31854 * C31813 * C31799 * C110 +
          ((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C5251 +
           (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C32158 +
           (C5268 - C5267 + C5270 - C5269 + C5272 - C5271) * C5252 +
           (C5274 - C5273 + C5276 - C5275 + C5278 - C5277) * C32145 +
           (C5279 - C5280 + C5281 - C5282 + C5283 - C5284) * C5253 +
           (C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C32115) *
              C31854 * C31813 * C31799 * C111 +
          (C5299 * C5251 + C5300 * C32158 +
           (C5280 - C5279 + C5282 - C5281 + C5284 - C5283) * C5252 +
           (C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C32145 +
           (C5242 * C134 - C5248 * C123 + C5243 * C257 - C5249 * C243 +
            C32126 * C267 - C5250 * C248) *
               C5253 +
           (C5242 * C144 - C5248 * C135 + C5243 * C273 - C5249 * C258 +
            C32126 * C278 - C5250 * C268) *
               C32115) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
            C32126 * C259 - C5250 * C244) *
               C5251 +
           (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
            C32126 * C274 - C5250 * C260) *
               C32158 +
           (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
           (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
           C5299 * C5253 + C5300 * C32115) *
              C31854 * C31813 * C235 +
          ((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
            C5250 * C974 - C32126 * C980) *
               C5251 +
           (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
            C5250 * C981 - C32126 * C992) *
               C32158 +
           (C5248 * C240 - C5242 * C251 + C5249 * C245 - C5243 * C261 +
            C5250 * C975 - C32126 * C982) *
               C5252 +
           (C5248 * C252 - C5242 * C270 + C5249 * C262 - C5243 * C275 +
            C5250 * C983 - C32126 * C993) *
               C32145 +
           (C5248 * C241 - C5242 * C253 + C5249 * C246 - C5243 * C263 +
            C5250 * C976 - C32126 * C984) *
               C5253 +
           (C5248 * C254 - C5242 * C271 + C5249 * C264 - C5243 * C276 +
            C5250 * C985 - C32126 * C994) *
               C32115) *
              C31854 * C31813 * C236 +
          ((C5242 * C259 - C5248 * C244 + C5243 * C980 - C5249 * C974 +
            C32126 * C986 - C5250 * C977) *
               C5251 +
           (C5242 * C274 - C5248 * C260 + C5243 * C992 - C5249 * C981 +
            C32126 * C995 - C5250 * C987) *
               C32158 +
           (C5242 * C261 - C5248 * C245 + C5243 * C982 - C5249 * C975 +
            C32126 * C988 - C5250 * C978) *
               C5252 +
           (C5242 * C275 - C5248 * C262 + C5243 * C993 - C5249 * C983 +
            C32126 * C996 - C5250 * C989) *
               C32145 +
           (C5242 * C263 - C5248 * C246 + C5243 * C984 - C5249 * C976 +
            C32126 * C990 - C5250 * C979) *
               C5253 +
           (C5242 * C276 - C5248 * C264 + C5243 * C994 - C5249 * C985 +
            C32126 * C997 - C5250 * C991) *
               C32115) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
            C32126 * C259 - C5250 * C244) *
               C5251 +
           (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
            C32126 * C274 - C5250 * C260) *
               C32158 +
           (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
           (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
           C5299 * C5253 + C5300 * C32115) *
              C31854 * C341 +
          ((C5248 * C344 - C5242 * C354 + C5249 * C676 - C5243 * C681 +
            C5250 * C1108 - C32126 * C1117) *
               C5251 +
           (C5248 * C355 - C5242 * C374 + C5249 * C682 - C5243 * C691 +
            C5250 * C1118 - C32126 * C1135) *
               C32158 +
           (C5248 * C345 - C5242 * C356 + C5249 * C677 - C5243 * C683 +
            C5250 * C1109 - C32126 * C1119) *
               C5252 +
           (C5248 * C357 - C5242 * C375 + C5249 * C684 - C5243 * C692 +
            C5250 * C1120 - C32126 * C1136) *
               C32145 +
           (C5248 * C346 - C5242 * C358 + C5249 * C678 - C5243 * C685 +
            C5250 * C1110 - C32126 * C1121) *
               C5253 +
           (C5248 * C359 - C5242 * C376 + C5249 * C686 - C5243 * C693 +
            C5250 * C1122 - C32126 * C1137) *
               C32115) *
              C31854 * C342 +
          ((C5242 * C364 - C5248 * C349 + C5243 * C1123 - C5249 * C1111 +
            C32126 * C1124 - C5250 * C1112) *
               C5251 +
           (C5242 * C379 - C5248 * C365 + C5243 * C1138 - C5249 * C1125 +
            C32126 * C1139 - C5250 * C1126) *
               C32158 +
           (C5242 * C366 - C5248 * C350 + C5243 * C1127 - C5249 * C1113 +
            C32126 * C1128 - C5250 * C1114) *
               C5252 +
           (C5242 * C380 - C5248 * C367 + C5243 * C1140 - C5249 * C1129 +
            C32126 * C1141 - C5250 * C1130) *
               C32145 +
           (C5242 * C368 - C5248 * C351 + C5243 * C1131 - C5249 * C1115 +
            C32126 * C1132 - C5250 * C1116) *
               C5253 +
           (C5242 * C381 - C5248 * C369 + C5243 * C1142 - C5249 * C1133 +
            C32126 * C1143 - C5250 * C1134) *
               C32115) *
              C31854 * C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
            C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
            C6072 * C986 - C6078 * C977) *
               C6079 +
           (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
            C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
            C6072 * C995 - C6078 * C987) *
               C31752) *
              C31854 * C31813 * C31799 * C110 +
          ((C6074 * C120 - C6068 * C128 + C6075 * C240 - C6069 * C251 +
            C6076 * C245 - C6070 * C261 + C6077 * C975 - C6071 * C982 +
            C6078 * C978 - C6072 * C988) *
               C6079 +
           (C6074 * C129 - C6068 * C141 + C6075 * C252 - C6069 * C270 +
            C6076 * C262 - C6070 * C275 + C6077 * C983 - C6071 * C993 +
            C6078 * C989 - C6072 * C996) *
               C31752) *
              C31854 * C31813 * C31799 * C111 +
          ((C6068 * C130 - C6074 * C121 + C6069 * C253 - C6075 * C241 +
            C6070 * C263 - C6076 * C246 + C6071 * C984 - C6077 * C976 +
            C6072 * C990 - C6078 * C979) *
               C6079 +
           (C6068 * C142 - C6074 * C131 + C6069 * C271 - C6075 * C254 +
            C6070 * C276 - C6076 * C264 + C6071 * C994 - C6077 * C985 +
            C6072 * C997 - C6078 * C991) *
               C31752) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
            C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
            C6072 * C986 - C6078 * C977) *
               C6079 +
           (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
            C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
            C6072 * C995 - C6078 * C987) *
               C31752) *
              C31854 * C31813 * C235 +
          ((C6074 * C239 - C6068 * C249 + C6075 * C244 - C6069 * C259 +
            C6076 * C974 - C6070 * C980 + C6077 * C977 - C6071 * C986 +
            C6078 * C6142 - C6072 * C6144) *
               C6079 +
           (C6074 * C250 - C6068 * C269 + C6075 * C260 - C6069 * C274 +
            C6076 * C981 - C6070 * C992 + C6077 * C987 - C6071 * C995 +
            C6078 * C6145 - C6072 * C6148) *
               C31752) *
              C31854 * C31813 * C236 +
          ((C6068 * C259 - C6074 * C244 + C6069 * C980 - C6075 * C974 +
            C6070 * C986 - C6076 * C977 + C6071 * C6144 - C6077 * C6142 +
            C6072 * C6146 - C6078 * C6143) *
               C6079 +
           (C6068 * C274 - C6074 * C260 + C6069 * C992 - C6075 * C981 +
            C6070 * C995 - C6076 * C987 + C6071 * C6148 - C6077 * C6145 +
            C6072 * C6149 - C6078 * C6147) *
               C31752) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
            C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
            C6072 * C986 - C6078 * C977) *
               C6079 +
           (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
            C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
            C6072 * C995 - C6078 * C987) *
               C31752) *
              C31854 * C341 +
          ((C6074 * C344 - C6068 * C354 + C6075 * C676 - C6069 * C681 +
            C6076 * C1108 - C6070 * C1117 + C6077 * C1638 - C6071 * C1641 +
            C6078 * C6212 - C6072 * C6215) *
               C6079 +
           (C6074 * C355 - C6068 * C374 + C6075 * C682 - C6069 * C691 +
            C6076 * C1118 - C6070 * C1135 + C6077 * C1642 - C6071 * C1647 +
            C6078 * C6216 - C6072 * C6221) *
               C31752) *
              C31854 * C342 +
          ((C6068 * C364 - C6074 * C349 + C6069 * C1123 - C6075 * C1111 +
            C6070 * C1124 - C6076 * C1112 + C6071 * C6217 - C6077 * C6213 +
            C6072 * C6218 - C6078 * C6214) *
               C6079 +
           (C6068 * C379 - C6074 * C365 + C6069 * C1138 - C6075 * C1125 +
            C6070 * C1139 - C6076 * C1126 + C6071 * C6222 - C6077 * C6219 +
            C6072 * C6223 - C6078 * C6220) *
               C31752) *
              C31854 * C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C6079 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C31752) *
               C32162 +
           ((C5242 * C354 - C5248 * C344 + C5243 * C681 - C5249 * C676 +
             C32126 * C1117 - C5250 * C1108) *
                C6079 +
            (C5242 * C374 - C5248 * C355 + C5243 * C691 - C5249 * C682 +
             C32126 * C1135 - C5250 * C1118) *
                C31752) *
               C32151 +
           ((C5242 * C364 - C5248 * C349 + C5243 * C1123 - C5249 * C1111 +
             C32126 * C1124 - C5250 * C1112) *
                C6079 +
            (C5242 * C379 - C5248 * C365 + C5243 * C1138 - C5249 * C1125 +
             C32126 * C1139 - C5250 * C1126) *
                C31752) *
               C32129) *
              C31813 * C31799 * C110 +
          (((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C6079 +
            (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C31752) *
               C32162 +
           ((C5837 - C5838 + C5839 - C5840 + C5841 - C5842) * C6079 +
            (C5843 - C5844 + C5845 - C5846 + C5847 - C5848) * C31752) *
               C32151 +
           ((C5248 * C350 - C5242 * C366 + C5249 * C1113 - C5243 * C1127 +
             C5250 * C1114 - C32126 * C1128) *
                C6079 +
            (C5248 * C367 - C5242 * C380 + C5249 * C1129 - C5243 * C1140 +
             C5250 * C1130 - C32126 * C1141) *
                C31752) *
               C32129) *
              C31813 * C31799 * C111 +
          ((C5299 * C6079 + C5300 * C31752) * C32162 +
           ((C5850 - C5849 + C5852 - C5851 + C5854 - C5853) * C6079 +
            (C5856 - C5855 + C5858 - C5857 + C5860 - C5859) * C31752) *
               C32151 +
           ((C5242 * C368 - C5248 * C351 + C5243 * C1131 - C5249 * C1115 +
             C32126 * C1132 - C5250 * C1116) *
                C6079 +
            (C5242 * C381 - C5248 * C369 + C5243 * C1142 - C5249 * C1133 +
             C32126 * C1143 - C5250 * C1134) *
                C31752) *
               C32129) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C6079 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C31752) *
               C32162 +
           ((C5242 * C354 - C5248 * C344 + C5243 * C681 - C5249 * C676 +
             C32126 * C1117 - C5250 * C1108) *
                C6079 +
            (C5242 * C374 - C5248 * C355 + C5243 * C691 - C5249 * C682 +
             C32126 * C1135 - C5250 * C1118) *
                C31752) *
               C32151 +
           ((C5242 * C364 - C5248 * C349 + C5243 * C1123 - C5249 * C1111 +
             C32126 * C1124 - C5250 * C1112) *
                C6079 +
            (C5242 * C379 - C5248 * C365 + C5243 * C1138 - C5249 * C1125 +
             C32126 * C1139 - C5250 * C1126) *
                C31752) *
               C32129) *
              C31813 * C235 +
          (((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
             C5250 * C974 - C32126 * C980) *
                C6079 +
            (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
             C5250 * C981 - C32126 * C992) *
                C31752) *
               C32162 +
           ((C5248 * C676 - C5242 * C681 + C5249 * C1108 - C5243 * C1117 +
             C5250 * C1638 - C32126 * C1641) *
                C6079 +
            (C5248 * C682 - C5242 * C691 + C5249 * C1118 - C5243 * C1135 +
             C5250 * C1642 - C32126 * C1647) *
                C31752) *
               C32151 +
           ((C5248 * C1111 - C5242 * C1123 + C5249 * C1112 - C5243 * C1124 +
             C5250 * C6213 - C32126 * C6217) *
                C6079 +
            (C5248 * C1125 - C5242 * C1138 + C5249 * C1126 - C5243 * C1139 +
             C5250 * C6219 - C32126 * C6222) *
                C31752) *
               C32129) *
              C31813 * C236 +
          (((C5242 * C259 - C5248 * C244 + C5243 * C980 - C5249 * C974 +
             C32126 * C986 - C5250 * C977) *
                C6079 +
            (C5242 * C274 - C5248 * C260 + C5243 * C992 - C5249 * C981 +
             C32126 * C995 - C5250 * C987) *
                C31752) *
               C32162 +
           ((C5242 * C1117 - C5248 * C1108 + C5243 * C1641 - C5249 * C1638 +
             C32126 * C6215 - C5250 * C6212) *
                C6079 +
            (C5242 * C1135 - C5248 * C1118 + C5243 * C1647 - C5249 * C1642 +
             C32126 * C6221 - C5250 * C6216) *
                C31752) *
               C32151 +
           ((C5242 * C1124 - C5248 * C1112 + C5243 * C6217 - C5249 * C6213 +
             C32126 * C6218 - C5250 * C6214) *
                C6079 +
            (C5242 * C1139 - C5248 * C1126 + C5243 * C6222 - C5249 * C6219 +
             C32126 * C6223 - C5250 * C6220) *
                C31752) *
               C32129) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C6079 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C31752) *
               C32162 +
           ((C6825 - C6826 + C6827 - C6828 + C6829 - C6830) * C6079 +
            (C6831 - C6832 + C6833 - C6834 + C6835 - C6836) * C31752) *
               C32151 +
           C6873 * C32129) *
              C341 +
          (((C6826 - C6825 + C6828 - C6827 + C6830 - C6829) * C6079 +
            (C6832 - C6831 + C6834 - C6833 + C6836 - C6835) * C31752) *
               C32162 +
           ((C6838 - C6837 + C6840 - C6839 + C6842 - C6841) * C6079 +
            (C6844 - C6843 + C6846 - C6845 + C6848 - C6847) * C31752) *
               C32151 +
           ((C6849 - C6850 + C6851 - C6852 + C6853 - C6854) * C6079 +
            (C6855 - C6856 + C6857 - C6858 + C6859 - C6860) * C31752) *
               C32129) *
              C342 +
          (C6873 * C32162 +
           ((C6850 - C6849 + C6852 - C6851 + C6854 - C6853) * C6079 +
            (C6856 - C6855 + C6858 - C6857 + C6860 - C6859) * C31752) *
               C32151 +
           ((C5242 * C2011 - C5248 * C2002 + C5243 * C6817 - C5249 * C6813 +
             C32126 * C6818 - C5250 * C6814) *
                C6079 +
            (C5242 * C2020 - C5248 * C2012 + C5243 * C6822 - C5249 * C6819 +
             C32126 * C6823 - C5250 * C6820) *
                C31752) *
               C32129) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C815 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C809 +
            (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
            (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
            C864 * C32115) *
               C31854 * C572 +
           ((C812 * C344 - C32161 * C354 + C813 * C676 - C32149 * C681 +
             C814 * C1108 - C32126 * C1117) *
                C815 +
            (C812 * C355 - C32161 * C374 + C813 * C682 - C32149 * C691 +
             C814 * C1118 - C32126 * C1135) *
                C809 +
            (C1469 - C1470 + C1471 - C1472 + C1473 - C1474) * C816 +
            (C1475 - C1476 + C1477 - C1478 + C1479 - C1480) * C810 +
            (C1481 - C1482 + C1483 - C1484 + C1485 - C1486) * C817 +
            (C1487 - C1488 + C1489 - C1490 + C1491 - C1492) * C32115) *
               C31854 * C573) *
              C31799 * C468 +
          (((C820 - C819 + C822 - C821 + C824 - C823) * C815 +
            (C826 - C825 + C828 - C827 + C830 - C829) * C809 +
            (C832 - C831 + C834 - C833 + C836 - C835) * C816 +
            (C838 - C837 + C840 - C839 + C842 - C841) * C810 +
            (C843 - C844 + C845 - C846 + C847 - C848) * C817 +
            (C849 - C850 + C851 - C852 + C853 - C854) * C32115) *
               C31854 * C572 +
           ((C1470 - C1469 + C1472 - C1471 + C1474 - C1473) * C815 +
            (C1476 - C1475 + C1478 - C1477 + C1480 - C1479) * C809 +
            (C1482 - C1481 + C1484 - C1483 + C1486 - C1485) * C816 +
            (C1488 - C1487 + C1490 - C1489 + C1492 - C1491) * C810 +
            (C32161 * C360 - C812 * C347 + C32149 * C687 - C813 * C679 +
             C32126 * C1465 - C814 * C1464) *
                C817 +
            (C32161 * C377 - C812 * C361 + C32149 * C694 - C813 * C688 +
             C32126 * C1467 - C814 * C1466) *
                C32115) *
               C31854 * C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C114 +
            (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C31854 * C572 +
           ((C113 * C344 - C31836 * C354) * C114 +
            (C113 * C355 - C31836 * C374) * C102 + (C579 - C580) * C115 +
            (C581 - C582) * C103 + (C583 - C584) * C116 + (C585 - C586) * C104 +
            (C587 - C588) * C117 + (C589 - C590) * C105 + (C591 - C592) * C118 +
            (C593 - C594) * C106) *
               C31854 * C573) *
              C31799 * C468 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C31854 * C572 +
           ((C580 - C579) * C114 + (C582 - C581) * C102 + (C584 - C583) * C115 +
            (C586 - C585) * C103 + (C588 - C587) * C116 + (C590 - C589) * C104 +
            (C592 - C591) * C117 + (C594 - C593) * C105 +
            (C31836 * C575 - C113 * C574) * C118 +
            (C31836 * C577 - C113 * C576) * C106) *
               C31854 * C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C815 +
             (C31836 * C140 - C113 * C127) * C809 + (C148 - C149) * C816 +
             (C150 - C151) * C810 + C168 * C817 + C169 * C32115) *
                C32162 +
            ((C2024 - C2025) * C815 + (C2026 - C2027) * C809 + C2375 * C816 +
             C2376 * C810 + C1764 * C817 + C1765 * C32115) *
                C32151 +
            C2058 * C32129) *
               C572 +
           (((C2025 - C2024) * C815 + (C2027 - C2026) * C809 + C2377 * C816 +
             C2378 * C810 + C2379 * C817 + C2380 * C32115) *
                C32162 +
            ((C2029 - C2028) * C815 + (C2031 - C2030) * C809 + C2381 * C816 +
             C2382 * C810 + C2383 * C817 + C2384 * C32115) *
                C32151 +
            ((C2036 - C2037) * C815 + (C2038 - C2039) * C809 +
             (C2040 - C2041) * C816 + (C2042 - C2043) * C810 +
             (C2044 - C2045) * C817 + (C2046 - C2047) * C32115) *
                C32129) *
               C573) *
              C31799 * C468 +
          ((((C149 - C148) * C815 + (C151 - C150) * C809 +
             (C153 - C152) * C816 + (C155 - C154) * C810 +
             (C157 - C156) * C817 + (C159 - C158) * C32115) *
                C32162 +
            (C2377 * C815 + C2378 * C809 + C2379 * C816 + C2380 * C810 +
             (C587 - C588) * C817 + (C589 - C590) * C32115) *
                C32151 +
            (C2381 * C815 + C2382 * C809 + C2383 * C816 + C2384 * C810 +
             (C1774 - C1775) * C817 + (C1776 - C1777) * C32115) *
                C32129) *
               C572 +
           ((C2375 * C815 + C2376 * C809 + C1764 * C816 + C1765 * C810 +
             (C588 - C587) * C817 + (C590 - C589) * C32115) *
                C32162 +
            (C2032 * C815 + C2033 * C809 + C1778 * C816 + C1779 * C810 +
             (C1775 - C1774) * C817 + (C1777 - C1776) * C32115) *
                C32151 +
            ((C2041 - C2040) * C815 + (C2043 - C2042) * C809 +
             (C2045 - C2044) * C816 + (C2047 - C2046) * C810 +
             (C31836 * C2371 - C113 * C2370) * C817 +
             (C31836 * C2373 - C113 * C2372) * C32115) *
                C32129) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C5251 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C32158 +
            (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
            (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
            C5299 * C5253 + C5300 * C32115) *
               C31854 * C572 +
           ((C5248 * C344 - C5242 * C354 + C5249 * C676 - C5243 * C681 +
             C5250 * C1108 - C32126 * C1117) *
                C5251 +
            (C5248 * C355 - C5242 * C374 + C5249 * C682 - C5243 * C691 +
             C5250 * C1118 - C32126 * C1135) *
                C32158 +
            (C5837 - C5838 + C5839 - C5840 + C5841 - C5842) * C5252 +
            (C5843 - C5844 + C5845 - C5846 + C5847 - C5848) * C32145 +
            (C5849 - C5850 + C5851 - C5852 + C5853 - C5854) * C5253 +
            (C5855 - C5856 + C5857 - C5858 + C5859 - C5860) * C32115) *
               C31854 * C573) *
              C31799 * C468 +
          (((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C5251 +
            (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C32158 +
            (C5268 - C5267 + C5270 - C5269 + C5272 - C5271) * C5252 +
            (C5274 - C5273 + C5276 - C5275 + C5278 - C5277) * C32145 +
            (C5279 - C5280 + C5281 - C5282 + C5283 - C5284) * C5253 +
            (C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C32115) *
               C31854 * C572 +
           ((C5838 - C5837 + C5840 - C5839 + C5842 - C5841) * C5251 +
            (C5844 - C5843 + C5846 - C5845 + C5848 - C5847) * C32158 +
            (C5850 - C5849 + C5852 - C5851 + C5854 - C5853) * C5252 +
            (C5856 - C5855 + C5858 - C5857 + C5860 - C5859) * C32145 +
            (C5242 * C360 - C5248 * C347 + C5243 * C687 - C5249 * C679 +
             C32126 * C1465 - C5250 * C1464) *
                C5253 +
            (C5242 * C377 - C5248 * C361 + C5243 * C694 - C5249 * C688 +
             C32126 * C1467 - C5250 * C1466) *
                C32115) *
               C31854 * C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
             C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
             C6072 * C986 - C6078 * C977) *
                C6079 +
            (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
             C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
             C6072 * C995 - C6078 * C987) *
                C31752) *
               C31854 * C572 +
           ((C6074 * C344 - C6068 * C354 + C6075 * C676 - C6069 * C681 +
             C6076 * C1108 - C6070 * C1117 + C6077 * C1638 - C6071 * C1641 +
             C6078 * C6212 - C6072 * C6215) *
                C6079 +
            (C6074 * C355 - C6068 * C374 + C6075 * C682 - C6069 * C691 +
             C6076 * C1118 - C6070 * C1135 + C6077 * C1642 - C6071 * C1647 +
             C6078 * C6216 - C6072 * C6221) *
                C31752) *
               C31854 * C573) *
              C31799 * C468 +
          (((C6074 * C120 - C6068 * C128 + C6075 * C240 - C6069 * C251 +
             C6076 * C245 - C6070 * C261 + C6077 * C975 - C6071 * C982 +
             C6078 * C978 - C6072 * C988) *
                C6079 +
            (C6074 * C129 - C6068 * C141 + C6075 * C252 - C6069 * C270 +
             C6076 * C262 - C6070 * C275 + C6077 * C983 - C6071 * C993 +
             C6078 * C989 - C6072 * C996) *
                C31752) *
               C31854 * C572 +
           ((C6068 * C356 - C6074 * C345 + C6069 * C683 - C6075 * C677 +
             C6070 * C1119 - C6076 * C1109 + C6071 * C1643 - C6077 * C1639 +
             C6072 * C6393 - C6078 * C6392) *
                C6079 +
            (C6068 * C375 - C6074 * C357 + C6069 * C692 - C6075 * C684 +
             C6070 * C1136 - C6076 * C1120 + C6071 * C1648 - C6077 * C1644 +
             C6072 * C6395 - C6078 * C6394) *
                C31752) *
               C31854 * C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
              C32126 * C259 - C5250 * C244) *
                 C6079 +
             (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
              C32126 * C274 - C5250 * C260) *
                 C31752) *
                C32162 +
            ((C6825 - C6826 + C6827 - C6828 + C6829 - C6830) * C6079 +
             (C6831 - C6832 + C6833 - C6834 + C6835 - C6836) * C31752) *
                C32151 +
            C6873 * C32129) *
               C572 +
           (((C6826 - C6825 + C6828 - C6827 + C6830 - C6829) * C6079 +
             (C6832 - C6831 + C6834 - C6833 + C6836 - C6835) * C31752) *
                C32162 +
            ((C6838 - C6837 + C6840 - C6839 + C6842 - C6841) * C6079 +
             (C6844 - C6843 + C6846 - C6845 + C6848 - C6847) * C31752) *
                C32151 +
            ((C6849 - C6850 + C6851 - C6852 + C6853 - C6854) * C6079 +
             (C6855 - C6856 + C6857 - C6858 + C6859 - C6860) * C31752) *
                C32129) *
               C573) *
              C31799 * C468 +
          ((((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C6079 +
             (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C31752) *
                C32162 +
            ((C5837 - C5838 + C5839 - C5840 + C5841 - C5842) * C6079 +
             (C5843 - C5844 + C5845 - C5846 + C5847 - C5848) * C31752) *
                C32151 +
            ((C7174 - C7175 + C7176 - C7177 + C7178 - C7179) * C6079 +
             (C7180 - C7181 + C7182 - C7183 + C7184 - C7185) * C31752) *
                C32129) *
               C572 +
           (((C5838 - C5837 + C5840 - C5839 + C5842 - C5841) * C6079 +
             (C5844 - C5843 + C5846 - C5845 + C5848 - C5847) * C31752) *
                C32162 +
            ((C7175 - C7174 + C7177 - C7176 + C7179 - C7178) * C6079 +
             (C7181 - C7180 + C7183 - C7182 + C7185 - C7184) * C31752) *
                C32151 +
            ((C5242 * C2007 - C5248 * C2000 + C5243 * C2535 - C5249 * C2531 +
              C32126 * C7170 - C5250 * C7169) *
                 C6079 +
             (C5242 * C2018 - C5248 * C2008 + C5243 * C2540 - C5249 * C2536 +
              C32126 * C7172 - C5250 * C7171) *
                 C31752) *
                C32129) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C31836 * C126 - C113 * C119) * C114 +
           (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C31854 * C31813 * C235 +
          ((C113 * C239 - C31836 * C249) * C114 +
           (C113 * C250 - C31836 * C269) * C102 +
           (C113 * C240 - C31836 * C251) * C115 +
           (C113 * C252 - C31836 * C270) * C103 +
           (C113 * C241 - C31836 * C253) * C116 +
           (C113 * C254 - C31836 * C271) * C104 +
           (C113 * C242 - C31836 * C255) * C117 +
           (C113 * C256 - C31836 * C272) * C105 +
           (C113 * C243 - C31836 * C257) * C118 +
           (C113 * C258 - C31836 * C273) * C106) *
              C31854 * C31813 * C236 +
          ((C31836 * C259 - C113 * C244) * C114 +
           (C31836 * C274 - C113 * C260) * C102 +
           (C31836 * C261 - C113 * C245) * C115 +
           (C31836 * C275 - C113 * C262) * C103 +
           (C31836 * C263 - C113 * C246) * C116 +
           (C31836 * C276 - C113 * C264) * C104 +
           (C31836 * C265 - C113 * C247) * C117 +
           (C31836 * C277 - C113 * C266) * C105 +
           (C31836 * C267 - C113 * C248) * C118 +
           (C31836 * C278 - C113 * C268) * C106) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C31836 * C126 - C113 * C119) * C114 +
           (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C31854 * C31813 * C31799 * C110 +
          ((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
           (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
           (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
           (C166 - C167) * C106) *
              C31854 * C31813 * C31799 * C111 +
          (C168 * C114 + C169 * C102 + C170 * C115 + C171 * C103 + C172 * C116 +
           C173 * C104 + (C165 - C164) * C117 + (C167 - C166) * C105 +
           (C31836 * C138 - C113 * C125) * C118 +
           (C31836 * C146 - C113 * C139) * C106) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
            C32126 * C259 - C814 * C244) *
               C815 +
           (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
            C32126 * C274 - C814 * C260) *
               C809 +
           (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
           (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
           C864 * C32115) *
              C31854 * C31813 * C31799 * C110 +
          ((C820 - C819 + C822 - C821 + C824 - C823) * C815 +
           (C826 - C825 + C828 - C827 + C830 - C829) * C809 +
           (C832 - C831 + C834 - C833 + C836 - C835) * C816 +
           (C838 - C837 + C840 - C839 + C842 - C841) * C810 +
           (C843 - C844 + C845 - C846 + C847 - C848) * C817 +
           (C849 - C850 + C851 - C852 + C853 - C854) * C32115) *
              C31854 * C31813 * C31799 * C111 +
          (C863 * C815 + C864 * C809 +
           (C844 - C843 + C846 - C845 + C848 - C847) * C816 +
           (C850 - C849 + C852 - C851 + C854 - C853) * C810 +
           (C32161 * C134 - C812 * C123 + C32149 * C257 - C813 * C243 +
            C32126 * C267 - C814 * C248) *
               C817 +
           (C32161 * C144 - C812 * C135 + C32149 * C273 - C813 * C258 +
            C32126 * C278 - C814 * C268) *
               C32115) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
            C32126 * C259 - C814 * C244) *
               C815 +
           (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
            C32126 * C274 - C814 * C260) *
               C809 +
           (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
           (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
           C864 * C32115) *
              C31854 * C31813 * C235 +
          ((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
            C814 * C974 - C32126 * C980) *
               C815 +
           (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
            C814 * C981 - C32126 * C992) *
               C809 +
           (C812 * C240 - C32161 * C251 + C813 * C245 - C32149 * C261 +
            C814 * C975 - C32126 * C982) *
               C816 +
           (C812 * C252 - C32161 * C270 + C813 * C262 - C32149 * C275 +
            C814 * C983 - C32126 * C993) *
               C810 +
           (C812 * C241 - C32161 * C253 + C813 * C246 - C32149 * C263 +
            C814 * C976 - C32126 * C984) *
               C817 +
           (C812 * C254 - C32161 * C271 + C813 * C264 - C32149 * C276 +
            C814 * C985 - C32126 * C994) *
               C32115) *
              C31854 * C31813 * C236 +
          ((C32161 * C259 - C812 * C244 + C32149 * C980 - C813 * C974 +
            C32126 * C986 - C814 * C977) *
               C815 +
           (C32161 * C274 - C812 * C260 + C32149 * C992 - C813 * C981 +
            C32126 * C995 - C814 * C987) *
               C809 +
           (C32161 * C261 - C812 * C245 + C32149 * C982 - C813 * C975 +
            C32126 * C988 - C814 * C978) *
               C816 +
           (C32161 * C275 - C812 * C262 + C32149 * C993 - C813 * C983 +
            C32126 * C996 - C814 * C989) *
               C810 +
           (C32161 * C263 - C812 * C246 + C32149 * C984 - C813 * C976 +
            C32126 * C990 - C814 * C979) *
               C817 +
           (C32161 * C276 - C812 * C264 + C32149 * C994 - C813 * C985 +
            C32126 * C997 - C814 * C991) *
               C32115) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C815 +
            (C31836 * C140 - C113 * C127) * C809 + (C148 - C149) * C816 +
            (C150 - C151) * C810 + C168 * C817 + C169 * C32115) *
               C32162 +
           ((C31836 * C354 - C113 * C344) * C815 +
            (C31836 * C374 - C113 * C355) * C809 + (C580 - C579) * C816 +
            (C582 - C581) * C810 + C1764 * C817 + C1765 * C32115) *
               C32151 +
           ((C31836 * C364 - C113 * C349) * C815 +
            (C31836 * C379 - C113 * C365) * C809 + (C1766 - C1767) * C816 +
            (C1768 - C1769) * C810 + C1778 * C817 + C1779 * C32115) *
               C32129) *
              C31813 * C31799 * C110 +
          (((C149 - C148) * C815 + (C151 - C150) * C809 + (C153 - C152) * C816 +
            (C155 - C154) * C810 + (C157 - C156) * C817 +
            (C159 - C158) * C32115) *
               C32162 +
           ((C579 - C580) * C815 + (C581 - C582) * C809 + (C583 - C584) * C816 +
            (C585 - C586) * C810 + (C587 - C588) * C817 +
            (C589 - C590) * C32115) *
               C32151 +
           ((C1767 - C1766) * C815 + (C1769 - C1768) * C809 +
            (C1771 - C1770) * C816 + (C1773 - C1772) * C810 +
            (C1774 - C1775) * C817 + (C1776 - C1777) * C32115) *
               C32129) *
              C31813 * C31799 * C111 +
          ((C168 * C815 + C169 * C809 + C170 * C816 + C171 * C810 +
            C172 * C817 + C173 * C32115) *
               C32162 +
           (C1764 * C815 + C1765 * C809 + (C588 - C587) * C816 +
            (C590 - C589) * C810 + (C592 - C591) * C817 +
            (C594 - C593) * C32115) *
               C32151 +
           (C1778 * C815 + C1779 * C809 + (C1775 - C1774) * C816 +
            (C1777 - C1776) * C810 + (C31836 * C372 - C113 * C353) * C817 +
            (C31836 * C383 - C113 * C373) * C32115) *
               C32129) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C815 +
            (C31836 * C140 - C113 * C127) * C809 + (C148 - C149) * C816 +
            (C150 - C151) * C810 + C168 * C817 + C169 * C32115) *
               C32162 +
           ((C31836 * C354 - C113 * C344) * C815 +
            (C31836 * C374 - C113 * C355) * C809 + (C580 - C579) * C816 +
            (C582 - C581) * C810 + C1764 * C817 + C1765 * C32115) *
               C32151 +
           ((C31836 * C364 - C113 * C349) * C815 +
            (C31836 * C379 - C113 * C365) * C809 + (C1766 - C1767) * C816 +
            (C1768 - C1769) * C810 + C1778 * C817 + C1779 * C32115) *
               C32129) *
              C31813 * C235 +
          (((C113 * C239 - C31836 * C249) * C815 +
            (C113 * C250 - C31836 * C269) * C809 + (C475 - C476) * C816 +
            (C477 - C478) * C810 + (C479 - C480) * C817 +
            (C481 - C482) * C32115) *
               C32162 +
           ((C113 * C676 - C31836 * C681) * C815 +
            (C113 * C682 - C31836 * C691) * C809 +
            (C113 * C677 - C31836 * C683) * C816 +
            (C113 * C684 - C31836 * C692) * C810 +
            (C113 * C678 - C31836 * C685) * C817 +
            (C113 * C686 - C31836 * C693) * C32115) *
               C32151 +
           ((C113 * C1111 - C31836 * C1123) * C815 +
            (C113 * C1125 - C31836 * C1138) * C809 +
            (C113 * C1113 - C31836 * C1127) * C816 +
            (C113 * C1129 - C31836 * C1140) * C810 +
            (C113 * C1115 - C31836 * C1131) * C817 +
            (C113 * C1133 - C31836 * C1142) * C32115) *
               C32129) *
              C31813 * C236 +
          (((C31836 * C259 - C113 * C244) * C815 +
            (C31836 * C274 - C113 * C260) * C809 +
            (C31836 * C261 - C113 * C245) * C816 +
            (C31836 * C275 - C113 * C262) * C810 +
            (C31836 * C263 - C113 * C246) * C817 +
            (C31836 * C276 - C113 * C264) * C32115) *
               C32162 +
           ((C31836 * C1117 - C113 * C1108) * C815 +
            (C31836 * C1135 - C113 * C1118) * C809 +
            (C31836 * C1119 - C113 * C1109) * C816 +
            (C31836 * C1136 - C113 * C1120) * C810 +
            (C31836 * C1121 - C113 * C1110) * C817 +
            (C31836 * C1137 - C113 * C1122) * C32115) *
               C32151 +
           ((C31836 * C1124 - C113 * C1112) * C815 +
            (C31836 * C1139 - C113 * C1126) * C809 +
            (C31836 * C1128 - C113 * C1114) * C816 +
            (C31836 * C1141 - C113 * C1130) * C810 +
            (C31836 * C1132 - C113 * C1116) * C817 +
            (C31836 * C1143 - C113 * C1134) * C32115) *
               C32129) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
            C32126 * C259 - C5250 * C244) *
               C5251 +
           (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
            C32126 * C274 - C5250 * C260) *
               C32158 +
           (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
           (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
           C5299 * C5253 + C5300 * C32115) *
              C31854 * C31813 * C31799 * C110 +
          ((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C5251 +
           (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C32158 +
           (C5268 - C5267 + C5270 - C5269 + C5272 - C5271) * C5252 +
           (C5274 - C5273 + C5276 - C5275 + C5278 - C5277) * C32145 +
           (C5279 - C5280 + C5281 - C5282 + C5283 - C5284) * C5253 +
           (C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C32115) *
              C31854 * C31813 * C31799 * C111 +
          (C5299 * C5251 + C5300 * C32158 +
           (C5280 - C5279 + C5282 - C5281 + C5284 - C5283) * C5252 +
           (C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C32145 +
           (C5242 * C134 - C5248 * C123 + C5243 * C257 - C5249 * C243 +
            C32126 * C267 - C5250 * C248) *
               C5253 +
           (C5242 * C144 - C5248 * C135 + C5243 * C273 - C5249 * C258 +
            C32126 * C278 - C5250 * C268) *
               C32115) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
            C32126 * C259 - C5250 * C244) *
               C5251 +
           (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
            C32126 * C274 - C5250 * C260) *
               C32158 +
           (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
           (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
           C5299 * C5253 + C5300 * C32115) *
              C31854 * C31813 * C235 +
          ((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
            C5250 * C974 - C32126 * C980) *
               C5251 +
           (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
            C5250 * C981 - C32126 * C992) *
               C32158 +
           (C5248 * C240 - C5242 * C251 + C5249 * C245 - C5243 * C261 +
            C5250 * C975 - C32126 * C982) *
               C5252 +
           (C5248 * C252 - C5242 * C270 + C5249 * C262 - C5243 * C275 +
            C5250 * C983 - C32126 * C993) *
               C32145 +
           (C5248 * C241 - C5242 * C253 + C5249 * C246 - C5243 * C263 +
            C5250 * C976 - C32126 * C984) *
               C5253 +
           (C5248 * C254 - C5242 * C271 + C5249 * C264 - C5243 * C276 +
            C5250 * C985 - C32126 * C994) *
               C32115) *
              C31854 * C31813 * C236 +
          ((C5242 * C259 - C5248 * C244 + C5243 * C980 - C5249 * C974 +
            C32126 * C986 - C5250 * C977) *
               C5251 +
           (C5242 * C274 - C5248 * C260 + C5243 * C992 - C5249 * C981 +
            C32126 * C995 - C5250 * C987) *
               C32158 +
           (C5242 * C261 - C5248 * C245 + C5243 * C982 - C5249 * C975 +
            C32126 * C988 - C5250 * C978) *
               C5252 +
           (C5242 * C275 - C5248 * C262 + C5243 * C993 - C5249 * C983 +
            C32126 * C996 - C5250 * C989) *
               C32145 +
           (C5242 * C263 - C5248 * C246 + C5243 * C984 - C5249 * C976 +
            C32126 * C990 - C5250 * C979) *
               C5253 +
           (C5242 * C276 - C5248 * C264 + C5243 * C994 - C5249 * C985 +
            C32126 * C997 - C5250 * C991) *
               C32115) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
            C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
            C6072 * C986 - C6078 * C977) *
               C6079 +
           (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
            C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
            C6072 * C995 - C6078 * C987) *
               C31752) *
              C31854 * C31813 * C31799 * C110 +
          ((C6074 * C120 - C6068 * C128 + C6075 * C240 - C6069 * C251 +
            C6076 * C245 - C6070 * C261 + C6077 * C975 - C6071 * C982 +
            C6078 * C978 - C6072 * C988) *
               C6079 +
           (C6074 * C129 - C6068 * C141 + C6075 * C252 - C6069 * C270 +
            C6076 * C262 - C6070 * C275 + C6077 * C983 - C6071 * C993 +
            C6078 * C989 - C6072 * C996) *
               C31752) *
              C31854 * C31813 * C31799 * C111 +
          ((C6068 * C130 - C6074 * C121 + C6069 * C253 - C6075 * C241 +
            C6070 * C263 - C6076 * C246 + C6071 * C984 - C6077 * C976 +
            C6072 * C990 - C6078 * C979) *
               C6079 +
           (C6068 * C142 - C6074 * C131 + C6069 * C271 - C6075 * C254 +
            C6070 * C276 - C6076 * C264 + C6071 * C994 - C6077 * C985 +
            C6072 * C997 - C6078 * C991) *
               C31752) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
            C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
            C6072 * C986 - C6078 * C977) *
               C6079 +
           (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
            C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
            C6072 * C995 - C6078 * C987) *
               C31752) *
              C31854 * C31813 * C235 +
          ((C6074 * C239 - C6068 * C249 + C6075 * C244 - C6069 * C259 +
            C6076 * C974 - C6070 * C980 + C6077 * C977 - C6071 * C986 +
            C6078 * C6142 - C6072 * C6144) *
               C6079 +
           (C6074 * C250 - C6068 * C269 + C6075 * C260 - C6069 * C274 +
            C6076 * C981 - C6070 * C992 + C6077 * C987 - C6071 * C995 +
            C6078 * C6145 - C6072 * C6148) *
               C31752) *
              C31854 * C31813 * C236 +
          ((C6068 * C259 - C6074 * C244 + C6069 * C980 - C6075 * C974 +
            C6070 * C986 - C6076 * C977 + C6071 * C6144 - C6077 * C6142 +
            C6072 * C6146 - C6078 * C6143) *
               C6079 +
           (C6068 * C274 - C6074 * C260 + C6069 * C992 - C6075 * C981 +
            C6070 * C995 - C6076 * C987 + C6071 * C6148 - C6077 * C6145 +
            C6072 * C6149 - C6078 * C6147) *
               C31752) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C6079 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C31752) *
               C32162 +
           ((C5242 * C354 - C5248 * C344 + C5243 * C681 - C5249 * C676 +
             C32126 * C1117 - C5250 * C1108) *
                C6079 +
            (C5242 * C374 - C5248 * C355 + C5243 * C691 - C5249 * C682 +
             C32126 * C1135 - C5250 * C1118) *
                C31752) *
               C32151 +
           ((C5242 * C364 - C5248 * C349 + C5243 * C1123 - C5249 * C1111 +
             C32126 * C1124 - C5250 * C1112) *
                C6079 +
            (C5242 * C379 - C5248 * C365 + C5243 * C1138 - C5249 * C1125 +
             C32126 * C1139 - C5250 * C1126) *
                C31752) *
               C32129) *
              C31813 * C31799 * C110 +
          (((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C6079 +
            (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C31752) *
               C32162 +
           ((C5837 - C5838 + C5839 - C5840 + C5841 - C5842) * C6079 +
            (C5843 - C5844 + C5845 - C5846 + C5847 - C5848) * C31752) *
               C32151 +
           ((C5248 * C350 - C5242 * C366 + C5249 * C1113 - C5243 * C1127 +
             C5250 * C1114 - C32126 * C1128) *
                C6079 +
            (C5248 * C367 - C5242 * C380 + C5249 * C1129 - C5243 * C1140 +
             C5250 * C1130 - C32126 * C1141) *
                C31752) *
               C32129) *
              C31813 * C31799 * C111 +
          ((C5299 * C6079 + C5300 * C31752) * C32162 +
           ((C5850 - C5849 + C5852 - C5851 + C5854 - C5853) * C6079 +
            (C5856 - C5855 + C5858 - C5857 + C5860 - C5859) * C31752) *
               C32151 +
           ((C5242 * C368 - C5248 * C351 + C5243 * C1131 - C5249 * C1115 +
             C32126 * C1132 - C5250 * C1116) *
                C6079 +
            (C5242 * C381 - C5248 * C369 + C5243 * C1142 - C5249 * C1133 +
             C32126 * C1143 - C5250 * C1134) *
                C31752) *
               C32129) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C6079 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C31752) *
               C32162 +
           ((C5242 * C354 - C5248 * C344 + C5243 * C681 - C5249 * C676 +
             C32126 * C1117 - C5250 * C1108) *
                C6079 +
            (C5242 * C374 - C5248 * C355 + C5243 * C691 - C5249 * C682 +
             C32126 * C1135 - C5250 * C1118) *
                C31752) *
               C32151 +
           ((C5242 * C364 - C5248 * C349 + C5243 * C1123 - C5249 * C1111 +
             C32126 * C1124 - C5250 * C1112) *
                C6079 +
            (C5242 * C379 - C5248 * C365 + C5243 * C1138 - C5249 * C1125 +
             C32126 * C1139 - C5250 * C1126) *
                C31752) *
               C32129) *
              C31813 * C235 +
          (((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
             C5250 * C974 - C32126 * C980) *
                C6079 +
            (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
             C5250 * C981 - C32126 * C992) *
                C31752) *
               C32162 +
           ((C5248 * C676 - C5242 * C681 + C5249 * C1108 - C5243 * C1117 +
             C5250 * C1638 - C32126 * C1641) *
                C6079 +
            (C5248 * C682 - C5242 * C691 + C5249 * C1118 - C5243 * C1135 +
             C5250 * C1642 - C32126 * C1647) *
                C31752) *
               C32151 +
           ((C5248 * C1111 - C5242 * C1123 + C5249 * C1112 - C5243 * C1124 +
             C5250 * C6213 - C32126 * C6217) *
                C6079 +
            (C5248 * C1125 - C5242 * C1138 + C5249 * C1126 - C5243 * C1139 +
             C5250 * C6219 - C32126 * C6222) *
                C31752) *
               C32129) *
              C31813 * C236 +
          (((C5242 * C259 - C5248 * C244 + C5243 * C980 - C5249 * C974 +
             C32126 * C986 - C5250 * C977) *
                C6079 +
            (C5242 * C274 - C5248 * C260 + C5243 * C992 - C5249 * C981 +
             C32126 * C995 - C5250 * C987) *
                C31752) *
               C32162 +
           ((C5242 * C1117 - C5248 * C1108 + C5243 * C1641 - C5249 * C1638 +
             C32126 * C6215 - C5250 * C6212) *
                C6079 +
            (C5242 * C1135 - C5248 * C1118 + C5243 * C1647 - C5249 * C1642 +
             C32126 * C6221 - C5250 * C6216) *
                C31752) *
               C32151 +
           ((C5242 * C1124 - C5248 * C1112 + C5243 * C6217 - C5249 * C6213 +
             C32126 * C6218 - C5250 * C6214) *
                C6079 +
            (C5242 * C1139 - C5248 * C1126 + C5243 * C6222 - C5249 * C6219 +
             C32126 * C6223 - C5250 * C6220) *
                C31752) *
               C32129) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C2656 +
             (C31836 * C140 - C113 * C127) * C2650 + (C148 - C149) * C2657 +
             (C150 - C151) * C2651 + C168 * C2658 + C169 * C2652 +
             C170 * C2659 + C171 * C32130) *
                C32096 +
            ((C2024 - C2025) * C2656 + (C2026 - C2027) * C2650 + C2375 * C2657 +
             C2376 * C2651 + C1764 * C2658 + C1765 * C2652 + C3439 * C2659 +
             C3440 * C32130) *
                C31941) *
               C31813 * C466 +
           (((C113 * C239 - C31836 * C249) * C2656 +
             (C113 * C250 - C31836 * C269) * C2650 + (C475 - C476) * C2657 +
             (C477 - C478) * C2651 + (C479 - C480) * C2658 +
             (C481 - C482) * C2652 + (C483 - C484) * C2659 +
             (C485 - C486) * C32130) *
                C32096 +
            ((C2543 - C2544) * C2656 + (C2545 - C2546) * C2650 +
             (C2209 - C2210) * C2657 + (C2211 - C2212) * C2651 +
             (C2213 - C2214) * C2658 + (C2215 - C2216) * C2652 +
             (C3767 - C3768) * C2659 + (C3769 - C3770) * C32130) *
                C31941) *
               C31813 * C467) *
              C468 +
          ((((C149 - C148) * C2656 + (C151 - C150) * C2650 +
             (C153 - C152) * C2657 + (C155 - C154) * C2651 +
             (C157 - C156) * C2658 + (C159 - C158) * C2652 +
             (C161 - C160) * C2659 + (C163 - C162) * C32130) *
                C32096 +
            (C2377 * C2656 + C2378 * C2650 + C2379 * C2657 + C2380 * C2651 +
             (C587 - C588) * C2658 + (C589 - C590) * C2652 +
             (C591 - C592) * C2659 + (C593 - C594) * C32130) *
                C31941) *
               C31813 * C466 +
           (((C476 - C475) * C2656 + (C478 - C477) * C2650 +
             (C480 - C479) * C2657 + (C482 - C481) * C2651 +
             (C484 - C483) * C2658 + (C486 - C485) * C2652 +
             (C488 - C487) * C2659 + (C490 - C489) * C32130) *
                C32096 +
            ((C2210 - C2209) * C2656 + (C2212 - C2211) * C2650 +
             (C2214 - C2213) * C2657 + (C2216 - C2215) * C2651 +
             (C3768 - C3767) * C2658 + (C3770 - C3769) * C2652 +
             (C31836 * C689 - C113 * C680) * C2659 +
             (C31836 * C695 - C113 * C690) * C32130) *
                C31941) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
              C32126 * C259 - C5250 * C244) *
                 C30875 +
             (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
              C32126 * C274 - C5250 * C260) *
                 C32076 +
             (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C30856 +
             (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C31762) *
                C32096 +
            ((C6825 - C6826 + C6827 - C6828 + C6829 - C6830) * C30875 +
             (C6831 - C6832 + C6833 - C6834 + C6835 - C6836) * C32076 +
             (C5838 - C5837 + C5840 - C5839 + C5842 - C5841) * C30856 +
             (C5844 - C5843 + C5846 - C5845 + C5848 - C5847) * C31762) *
                C31941) *
               C31813 * C466 +
           (((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
              C5250 * C974 - C32126 * C980) *
                 C30875 +
             (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
              C5250 * C981 - C32126 * C992) *
                 C32076 +
             (C5667 - C5668 + C5669 - C5670 + C5671 - C5672) * C30856 +
             (C5673 - C5674 + C5675 - C5676 + C5677 - C5678) * C31762) *
                C32096 +
            ((C7336 - C7337 + C7338 - C7339 + C7340 - C7341) * C30875 +
             (C7342 - C7343 + C7344 - C7345 + C7346 - C7347) * C32076 +
             (C8752 - C8753 + C8754 - C8755 + C8756 - C8757) * C30856 +
             (C8758 - C8759 + C8760 - C8761 + C8762 - C8763) * C31762) *
                C31941) *
               C31813 * C467) *
              C468 +
          ((((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C30875 +
             (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C32076 +
             (C5268 - C5267 + C5270 - C5269 + C5272 - C5271) * C30856 +
             (C5274 - C5273 + C5276 - C5275 + C5278 - C5277) * C31762) *
                C32096 +
            ((C5837 - C5838 + C5839 - C5840 + C5841 - C5842) * C30875 +
             (C5843 - C5844 + C5845 - C5846 + C5847 - C5848) * C32076 +
             (C5849 - C5850 + C5851 - C5852 + C5853 - C5854) * C30856 +
             (C5855 - C5856 + C5857 - C5858 + C5859 - C5860) * C31762) *
                C31941) *
               C31813 * C466 +
           (((C5668 - C5667 + C5670 - C5669 + C5672 - C5671) * C30875 +
             (C5674 - C5673 + C5676 - C5675 + C5678 - C5677) * C32076 +
             (C5680 - C5679 + C5682 - C5681 + C5684 - C5683) * C30856 +
             (C5686 - C5685 + C5688 - C5687 + C5690 - C5689) * C31762) *
                C32096 +
            ((C8753 - C8752 + C8755 - C8754 + C8757 - C8756) * C30875 +
             (C8759 - C8758 + C8761 - C8760 + C8763 - C8762) * C32076 +
             (C5242 * C685 - C5248 * C678 + C5243 * C1121 - C5249 * C1110 +
              C32126 * C1645 - C5250 * C1640) *
                 C30856 +
             (C5242 * C693 - C5248 * C686 + C5243 * C1137 - C5249 * C1122 +
              C32126 * C1649 - C5250 * C1646) *
                 C31762) *
                C31941) *
               C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C2656 +
             (C31836 * C140 - C113 * C127) * C2650 + (C148 - C149) * C2657 +
             (C150 - C151) * C2651 + C168 * C2658 + C169 * C2652 +
             C170 * C2659 + C171 * C32130) *
                C32096 +
            ((C2024 - C2025) * C2656 + (C2026 - C2027) * C2650 + C2375 * C2657 +
             C2376 * C2651 + C1764 * C2658 + C1765 * C2652 + C3439 * C2659 +
             C3440 * C32130) *
                C31941) *
               C572 +
           (((C2025 - C2024) * C2656 + (C2027 - C2026) * C2650 + C2377 * C2657 +
             C2378 * C2651 + C2379 * C2658 + C2380 * C2652 + C3901 * C2659 +
             C3902 * C32130) *
                C32096 +
            ((C2029 - C2028) * C2656 + (C2031 - C2030) * C2650 + C2381 * C2657 +
             C2382 * C2651 + C2383 * C2658 + C2384 * C2652 +
             (C1774 - C1775) * C2659 + (C1776 - C1777) * C32130) *
                C31941) *
               C573) *
              C466 +
          ((((C113 * C239 - C31836 * C249) * C2656 +
             (C113 * C250 - C31836 * C269) * C2650 + (C475 - C476) * C2657 +
             (C477 - C478) * C2651 + (C479 - C480) * C2658 +
             (C481 - C482) * C2652 + (C483 - C484) * C2659 +
             (C485 - C486) * C32130) *
                C32096 +
            ((C2543 - C2544) * C2656 + (C2545 - C2546) * C2650 +
             (C2209 - C2210) * C2657 + (C2211 - C2212) * C2651 +
             (C2213 - C2214) * C2658 + (C2215 - C2216) * C2652 +
             (C3767 - C3768) * C2659 + (C3769 - C3770) * C32130) *
                C31941) *
               C572 +
           (((C2544 - C2543) * C2656 + (C2546 - C2545) * C2650 +
             (C2210 - C2209) * C2657 + (C2212 - C2211) * C2651 +
             (C2214 - C2213) * C2658 + (C2216 - C2215) * C2652 +
             (C3768 - C3767) * C2659 + (C3770 - C3769) * C32130) *
                C32096 +
            ((C2548 - C2547) * C2656 + (C2550 - C2549) * C2650 +
             (C2218 - C2217) * C2657 + (C2220 - C2219) * C2651 +
             (C2222 - C2221) * C2658 + (C2224 - C2223) * C2652 +
             (C31836 * C2205 - C113 * C2204) * C2659 +
             (C31836 * C2207 - C113 * C2206) * C32130) *
                C31941) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
              C32126 * C259 - C5250 * C244) *
                 C30875 +
             (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
              C32126 * C274 - C5250 * C260) *
                 C32076 +
             (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C30856 +
             (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C31762) *
                C32096 +
            ((C6825 - C6826 + C6827 - C6828 + C6829 - C6830) * C30875 +
             (C6831 - C6832 + C6833 - C6834 + C6835 - C6836) * C32076 +
             C8974 * C30856 + C8975 * C31762) *
                C31941) *
               C572 +
           (((C6826 - C6825 + C6828 - C6827 + C6830 - C6829) * C30875 +
             (C6832 - C6831 + C6834 - C6833 + C6836 - C6835) * C32076 +
             C8976 * C30856 + C8977 * C31762) *
                C32096 +
            ((C6838 - C6837 + C6840 - C6839 + C6842 - C6841) * C30875 +
             (C6844 - C6843 + C6846 - C6845 + C6848 - C6847) * C32076 +
             (C7174 - C7175 + C7176 - C7177 + C7178 - C7179) * C30856 +
             (C7180 - C7181 + C7182 - C7183 + C7184 - C7185) * C31762) *
                C31941) *
               C573) *
              C466 +
          ((((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
              C5250 * C974 - C32126 * C980) *
                 C30875 +
             (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
              C5250 * C981 - C32126 * C992) *
                 C32076 +
             (C5667 - C5668 + C5669 - C5670 + C5671 - C5672) * C30856 +
             (C5673 - C5674 + C5675 - C5676 + C5677 - C5678) * C31762) *
                C32096 +
            ((C7336 - C7337 + C7338 - C7339 + C7340 - C7341) * C30875 +
             (C7342 - C7343 + C7344 - C7345 + C7346 - C7347) * C32076 +
             (C8752 - C8753 + C8754 - C8755 + C8756 - C8757) * C30856 +
             (C8758 - C8759 + C8760 - C8761 + C8762 - C8763) * C31762) *
                C31941) *
               C572 +
           (((C7337 - C7336 + C7339 - C7338 + C7341 - C7340) * C30875 +
             (C7343 - C7342 + C7345 - C7344 + C7347 - C7346) * C32076 +
             (C8753 - C8752 + C8755 - C8754 + C8757 - C8756) * C30856 +
             (C8759 - C8758 + C8761 - C8760 + C8763 - C8762) * C31762) *
                C32096 +
            ((C7349 - C7348 + C7351 - C7350 + C7353 - C7352) * C30875 +
             (C7355 - C7354 + C7357 - C7356 + C7359 - C7358) * C32076 +
             (C5242 * C1127 - C5248 * C1113 + C5243 * C1128 - C5249 * C1114 +
              C32126 * C7020 - C5250 * C7019) *
                 C30856 +
             (C5242 * C1140 - C5248 * C1129 + C5243 * C1141 - C5249 * C1130 +
              C32126 * C7022 - C5250 * C7021) *
                 C31762) *
                C31941) *
               C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C2656 +
            (C31836 * C140 - C113 * C127) * C2650 + (C148 - C149) * C2657 +
            (C150 - C151) * C2651 + C168 * C2658 + C169 * C2652 + C170 * C2659 +
            C171 * C32130) *
               C32096 +
           ((C2024 - C2025) * C2656 + (C2026 - C2027) * C2650 + C2375 * C2657 +
            C2376 * C2651 + C1764 * C2658 + C1765 * C2652 + C3439 * C2659 +
            C3440 * C32130) *
               C31941) *
              C31813 * C235 +
          (((C113 * C239 - C31836 * C249) * C2656 +
            (C113 * C250 - C31836 * C269) * C2650 + (C475 - C476) * C2657 +
            (C477 - C478) * C2651 + (C479 - C480) * C2658 +
            (C481 - C482) * C2652 + (C483 - C484) * C2659 +
            (C485 - C486) * C32130) *
               C32096 +
           ((C2543 - C2544) * C2656 + (C2545 - C2546) * C2650 +
            (C2209 - C2210) * C2657 + (C2211 - C2212) * C2651 +
            (C2213 - C2214) * C2658 + (C2215 - C2216) * C2652 +
            (C113 * C679 - C31836 * C687) * C2659 +
            (C113 * C688 - C31836 * C694) * C32130) *
               C31941) *
              C31813 * C236 +
          (((C31836 * C259 - C113 * C244) * C2656 +
            (C31836 * C274 - C113 * C260) * C2650 +
            (C31836 * C261 - C113 * C245) * C2657 +
            (C31836 * C275 - C113 * C262) * C2651 +
            (C31836 * C263 - C113 * C246) * C2658 +
            (C31836 * C276 - C113 * C264) * C2652 +
            (C31836 * C265 - C113 * C247) * C2659 +
            (C31836 * C277 - C113 * C266) * C32130) *
               C32096 +
           ((C31836 * C1117 - C113 * C1108) * C2656 +
            (C31836 * C1135 - C113 * C1118) * C2650 +
            (C31836 * C1119 - C113 * C1109) * C2657 +
            (C31836 * C1136 - C113 * C1120) * C2651 +
            (C31836 * C1121 - C113 * C1110) * C2658 +
            (C31836 * C1137 - C113 * C1122) * C2652 +
            (C31836 * C1465 - C113 * C1464) * C2659 +
            (C31836 * C1467 - C113 * C1466) * C32130) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C2656 +
            (C31836 * C140 - C113 * C127) * C2650 + (C148 - C149) * C2657 +
            (C150 - C151) * C2651 + C168 * C2658 + C169 * C2652 + C170 * C2659 +
            C171 * C32130) *
               C32096 +
           ((C2024 - C2025) * C2656 + (C2026 - C2027) * C2650 + C2375 * C2657 +
            C2376 * C2651 + C1764 * C2658 + C1765 * C2652 + C3439 * C2659 +
            C3440 * C32130) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C149 - C148) * C2656 + (C151 - C150) * C2650 +
            (C153 - C152) * C2657 + (C155 - C154) * C2651 +
            (C157 - C156) * C2658 + (C159 - C158) * C2652 +
            (C161 - C160) * C2659 + (C163 - C162) * C32130) *
               C32096 +
           (C2377 * C2656 + C2378 * C2650 + C2379 * C2657 + C2380 * C2651 +
            (C587 - C588) * C2658 + (C589 - C590) * C2652 +
            (C591 - C592) * C2659 + (C593 - C594) * C32130) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C168 * C2656 + C169 * C2650 + C170 * C2657 + C171 * C2651 +
            C172 * C2658 + C173 * C2652 + (C165 - C164) * C2659 +
            (C167 - C166) * C32130) *
               C32096 +
           (C1764 * C2656 + C1765 * C2650 + C3439 * C2657 + C3440 * C2651 +
            (C592 - C591) * C2658 + (C594 - C593) * C2652 +
            (C31836 * C575 - C113 * C574) * C2659 +
            (C31836 * C577 - C113 * C576) * C32130) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C2656 +
            (C31836 * C140 - C113 * C127) * C2650 + (C148 - C149) * C2657 +
            (C150 - C151) * C2651 + C168 * C2658 + C169 * C2652 + C170 * C2659 +
            C171 * C32130) *
               C32096 +
           ((C2024 - C2025) * C2656 + (C2026 - C2027) * C2650 + C2375 * C2657 +
            C2376 * C2651 + C1764 * C2658 + C1765 * C2652 + C3439 * C2659 +
            C3440 * C32130) *
               C31941) *
              C341 +
          (((C2025 - C2024) * C2656 + (C2027 - C2026) * C2650 + C2377 * C2657 +
            C2378 * C2651 + C2379 * C2658 + C2380 * C2652 +
            (C587 - C588) * C2659 + (C589 - C590) * C32130) *
               C32096 +
           ((C2029 - C2028) * C2656 + (C2031 - C2030) * C2650 + C2381 * C2657 +
            C2382 * C2651 + C2383 * C2658 + C2384 * C2652 +
            (C1774 - C1775) * C2659 + (C1776 - C1777) * C32130) *
               C31941) *
              C342 +
          ((C2048 * C2656 + C2049 * C2650 + C2032 * C2657 + C2033 * C2651 +
            C1778 * C2658 + C1779 * C2652 + (C1775 - C1774) * C2659 +
            (C1777 - C1776) * C32130) *
               C32096 +
           ((C2037 - C2036) * C2656 + (C2039 - C2038) * C2650 +
            (C2041 - C2040) * C2657 + (C2043 - C2042) * C2651 +
            (C2045 - C2044) * C2658 + (C2047 - C2046) * C2652 +
            (C31836 * C2371 - C113 * C2370) * C2659 +
            (C31836 * C2373 - C113 * C2372) * C32130) *
               C31941) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C30875 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C32076 +
            (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C30856 +
            (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C31762) *
               C32096 +
           ((C6825 - C6826 + C6827 - C6828 + C6829 - C6830) * C30875 +
            (C6831 - C6832 + C6833 - C6834 + C6835 - C6836) * C32076 +
            (C5838 - C5837 + C5840 - C5839 + C5842 - C5841) * C30856 +
            (C5844 - C5843 + C5846 - C5845 + C5848 - C5847) * C31762) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C30875 +
            (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C32076 +
            (C5268 - C5267 + C5270 - C5269 + C5272 - C5271) * C30856 +
            (C5274 - C5273 + C5276 - C5275 + C5278 - C5277) * C31762) *
               C32096 +
           ((C5837 - C5838 + C5839 - C5840 + C5841 - C5842) * C30875 +
            (C5843 - C5844 + C5845 - C5846 + C5847 - C5848) * C32076 +
            (C5849 - C5850 + C5851 - C5852 + C5853 - C5854) * C30856 +
            (C5855 - C5856 + C5857 - C5858 + C5859 - C5860) * C31762) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C5299 * C30875 + C5300 * C32076 +
            (C5280 - C5279 + C5282 - C5281 + C5284 - C5283) * C30856 +
            (C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C31762) *
               C32096 +
           ((C5850 - C5849 + C5852 - C5851 + C5854 - C5853) * C30875 +
            (C5856 - C5855 + C5858 - C5857 + C5860 - C5859) * C32076 +
            (C5242 * C360 - C5248 * C347 + C5243 * C687 - C5249 * C679 +
             C32126 * C1465 - C5250 * C1464) *
                C30856 +
            (C5242 * C377 - C5248 * C361 + C5243 * C694 - C5249 * C688 +
             C32126 * C1467 - C5250 * C1466) *
                C31762) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C30875 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C32076 +
            (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C30856 +
            (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C31762) *
               C32096 +
           ((C6825 - C6826 + C6827 - C6828 + C6829 - C6830) * C30875 +
            (C6831 - C6832 + C6833 - C6834 + C6835 - C6836) * C32076 +
            (C5838 - C5837 + C5840 - C5839 + C5842 - C5841) * C30856 +
            (C5844 - C5843 + C5846 - C5845 + C5848 - C5847) * C31762) *
               C31941) *
              C31813 * C235 +
          (((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
             C5250 * C974 - C32126 * C980) *
                C30875 +
            (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
             C5250 * C981 - C32126 * C992) *
                C32076 +
            (C5667 - C5668 + C5669 - C5670 + C5671 - C5672) * C30856 +
            (C5673 - C5674 + C5675 - C5676 + C5677 - C5678) * C31762) *
               C32096 +
           ((C7336 - C7337 + C7338 - C7339 + C7340 - C7341) * C30875 +
            (C7342 - C7343 + C7344 - C7345 + C7346 - C7347) * C32076 +
            (C5248 * C677 - C5242 * C683 + C5249 * C1109 - C5243 * C1119 +
             C5250 * C1639 - C32126 * C1643) *
                C30856 +
            (C5248 * C684 - C5242 * C692 + C5249 * C1120 - C5243 * C1136 +
             C5250 * C1644 - C32126 * C1648) *
                C31762) *
               C31941) *
              C31813 * C236 +
          (((C5242 * C259 - C5248 * C244 + C5243 * C980 - C5249 * C974 +
             C32126 * C986 - C5250 * C977) *
                C30875 +
            (C5242 * C274 - C5248 * C260 + C5243 * C992 - C5249 * C981 +
             C32126 * C995 - C5250 * C987) *
                C32076 +
            (C5242 * C261 - C5248 * C245 + C5243 * C982 - C5249 * C975 +
             C32126 * C988 - C5250 * C978) *
                C30856 +
            (C5242 * C275 - C5248 * C262 + C5243 * C993 - C5249 * C983 +
             C32126 * C996 - C5250 * C989) *
                C31762) *
               C32096 +
           ((C5242 * C1117 - C5248 * C1108 + C5243 * C1641 - C5249 * C1638 +
             C32126 * C6215 - C5250 * C6212) *
                C30875 +
            (C5242 * C1135 - C5248 * C1118 + C5243 * C1647 - C5249 * C1642 +
             C32126 * C6221 - C5250 * C6216) *
                C32076 +
            (C5242 * C1119 - C5248 * C1109 + C5243 * C1643 - C5249 * C1639 +
             C32126 * C6393 - C5250 * C6392) *
                C30856 +
            (C5242 * C1136 - C5248 * C1120 + C5243 * C1648 - C5249 * C1644 +
             C32126 * C6395 - C5250 * C6394) *
                C31762) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C30875 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C32076 +
            (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C30856 +
            (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C31762) *
               C32096 +
           ((C6825 - C6826 + C6827 - C6828 + C6829 - C6830) * C30875 +
            (C6831 - C6832 + C6833 - C6834 + C6835 - C6836) * C32076 +
            (C5838 - C5837 + C5840 - C5839 + C5842 - C5841) * C30856 +
            (C5844 - C5843 + C5846 - C5845 + C5848 - C5847) * C31762) *
               C31941) *
              C341 +
          (((C6826 - C6825 + C6828 - C6827 + C6830 - C6829) * C30875 +
            (C6832 - C6831 + C6834 - C6833 + C6836 - C6835) * C32076 +
            (C5837 - C5838 + C5839 - C5840 + C5841 - C5842) * C30856 +
            (C5843 - C5844 + C5845 - C5846 + C5847 - C5848) * C31762) *
               C32096 +
           ((C6838 - C6837 + C6840 - C6839 + C6842 - C6841) * C30875 +
            (C6844 - C6843 + C6846 - C6845 + C6848 - C6847) * C32076 +
            (C7174 - C7175 + C7176 - C7177 + C7178 - C7179) * C30856 +
            (C7180 - C7181 + C7182 - C7183 + C7184 - C7185) * C31762) *
               C31941) *
              C342 +
          ((C6869 * C30875 + C6870 * C32076 +
            (C7175 - C7174 + C7177 - C7176 + C7179 - C7178) * C30856 +
            (C7181 - C7180 + C7183 - C7182 + C7185 - C7184) * C31762) *
               C32096 +
           ((C6850 - C6849 + C6852 - C6851 + C6854 - C6853) * C30875 +
            (C6856 - C6855 + C6858 - C6857 + C6860 - C6859) * C32076 +
            (C5242 * C2007 - C5248 * C2000 + C5243 * C2535 - C5249 * C2531 +
             C32126 * C7170 - C5250 * C7169) *
                C30856 +
            (C5242 * C2018 - C5248 * C2008 + C5243 * C2540 - C5249 * C2536 +
             C32126 * C7172 - C5250 * C7171) *
                C31762) *
               C31941) *
              C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31836 * C126 - C113 * C119) * C2656 +
             (C31836 * C140 - C113 * C127) * C2650 + (C148 - C149) * C2657 +
             (C150 - C151) * C2651 + C168 * C2658 + C169 * C2652 +
             C170 * C2659 + C171 * C32130) *
                C32096 +
            ((C2024 - C2025) * C2656 + (C2026 - C2027) * C2650 + C2375 * C2657 +
             C2376 * C2651 + C1764 * C2658 + C1765 * C2652 + C3439 * C2659 +
             C3440 * C32130) *
                C31941) *
               C572 +
           (((C2025 - C2024) * C2656 + (C2027 - C2026) * C2650 + C2377 * C2657 +
             C2378 * C2651 + C2379 * C2658 + C2380 * C2652 + C3901 * C2659 +
             C3902 * C32130) *
                C32096 +
            ((C2029 - C2028) * C2656 + (C2031 - C2030) * C2650 + C2381 * C2657 +
             C2382 * C2651 + C2383 * C2658 + C2384 * C2652 +
             (C1774 - C1775) * C2659 + (C1776 - C1777) * C32130) *
                C31941) *
               C573) *
              C31799 * C468 +
          ((((C149 - C148) * C2656 + (C151 - C150) * C2650 +
             (C153 - C152) * C2657 + (C155 - C154) * C2651 +
             (C157 - C156) * C2658 + (C159 - C158) * C2652 +
             (C161 - C160) * C2659 + (C163 - C162) * C32130) *
                C32096 +
            (C2377 * C2656 + C2378 * C2650 + C2379 * C2657 + C2380 * C2651 +
             C3901 * C2658 + C3902 * C2652 + (C591 - C592) * C2659 +
             (C593 - C594) * C32130) *
                C31941) *
               C572 +
           ((C2375 * C2656 + C2376 * C2650 + C1764 * C2657 + C1765 * C2651 +
             C3439 * C2658 + C3440 * C2652 + (C592 - C591) * C2659 +
             (C594 - C593) * C32130) *
                C32096 +
            (C2032 * C2656 + C2033 * C2650 + C1778 * C2657 + C1779 * C2651 +
             (C1775 - C1774) * C2658 + (C1777 - C1776) * C2652 +
             (C31836 * C372 - C113 * C353) * C2659 +
             (C31836 * C383 - C113 * C373) * C32130) *
                C31941) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
              C32126 * C259 - C5250 * C244) *
                 C30875 +
             (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
              C32126 * C274 - C5250 * C260) *
                 C32076 +
             (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C30856 +
             (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C31762) *
                C32096 +
            ((C6825 - C6826 + C6827 - C6828 + C6829 - C6830) * C30875 +
             (C6831 - C6832 + C6833 - C6834 + C6835 - C6836) * C32076 +
             C8974 * C30856 + C8975 * C31762) *
                C31941) *
               C572 +
           (((C6826 - C6825 + C6828 - C6827 + C6830 - C6829) * C30875 +
             (C6832 - C6831 + C6834 - C6833 + C6836 - C6835) * C32076 +
             C8976 * C30856 + C8977 * C31762) *
                C32096 +
            ((C6838 - C6837 + C6840 - C6839 + C6842 - C6841) * C30875 +
             (C6844 - C6843 + C6846 - C6845 + C6848 - C6847) * C32076 +
             (C7174 - C7175 + C7176 - C7177 + C7178 - C7179) * C30856 +
             (C7180 - C7181 + C7182 - C7183 + C7184 - C7185) * C31762) *
                C31941) *
               C573) *
              C31799 * C468 +
          ((((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C30875 +
             (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C32076 +
             (C5268 - C5267 + C5270 - C5269 + C5272 - C5271) * C30856 +
             (C5274 - C5273 + C5276 - C5275 + C5278 - C5277) * C31762) *
                C32096 +
            (C8976 * C30875 + C8977 * C32076 +
             (C5849 - C5850 + C5851 - C5852 + C5853 - C5854) * C30856 +
             (C5855 - C5856 + C5857 - C5858 + C5859 - C5860) * C31762) *
                C31941) *
               C572 +
           ((C8974 * C30875 + C8975 * C32076 +
             (C5850 - C5849 + C5852 - C5851 + C5854 - C5853) * C30856 +
             (C5856 - C5855 + C5858 - C5857 + C5860 - C5859) * C31762) *
                C32096 +
            ((C7175 - C7174 + C7177 - C7176 + C7179 - C7178) * C30875 +
             (C7181 - C7180 + C7183 - C7182 + C7185 - C7184) * C32076 +
             (C5242 * C368 - C5248 * C351 + C5243 * C1131 - C5249 * C1115 +
              C32126 * C1132 - C5250 * C1116) *
                 C30856 +
             (C5242 * C381 - C5248 * C369 + C5243 * C1142 - C5249 * C1133 +
              C32126 * C1143 - C5250 * C1134) *
                 C31762) *
                C31941) *
               C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C2656 +
            (C31836 * C140 - C113 * C127) * C2650 + (C148 - C149) * C2657 +
            (C150 - C151) * C2651 + C168 * C2658 + C169 * C2652 + C170 * C2659 +
            C171 * C32130) *
               C32096 +
           ((C2024 - C2025) * C2656 + (C2026 - C2027) * C2650 + C2375 * C2657 +
            C2376 * C2651 + C1764 * C2658 + C1765 * C2652 + C3439 * C2659 +
            C3440 * C32130) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C149 - C148) * C2656 + (C151 - C150) * C2650 +
            (C153 - C152) * C2657 + (C155 - C154) * C2651 +
            (C157 - C156) * C2658 + (C159 - C158) * C2652 +
            (C161 - C160) * C2659 + (C163 - C162) * C32130) *
               C32096 +
           (C2377 * C2656 + C2378 * C2650 + C2379 * C2657 + C2380 * C2651 +
            (C587 - C588) * C2658 + (C589 - C590) * C2652 +
            (C591 - C592) * C2659 + (C593 - C594) * C32130) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C168 * C2656 + C169 * C2650 + C170 * C2657 + C171 * C2651 +
            C172 * C2658 + C173 * C2652 + (C165 - C164) * C2659 +
            (C167 - C166) * C32130) *
               C32096 +
           (C1764 * C2656 + C1765 * C2650 + C3439 * C2657 + C3440 * C2651 +
            (C592 - C591) * C2658 + (C594 - C593) * C2652 +
            (C31836 * C575 - C113 * C574) * C2659 +
            (C31836 * C577 - C113 * C576) * C32130) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C2656 +
            (C31836 * C140 - C113 * C127) * C2650 + (C148 - C149) * C2657 +
            (C150 - C151) * C2651 + C168 * C2658 + C169 * C2652 + C170 * C2659 +
            C171 * C32130) *
               C32096 +
           ((C2024 - C2025) * C2656 + (C2026 - C2027) * C2650 + C2375 * C2657 +
            C2376 * C2651 + C1764 * C2658 + C1765 * C2652 + C3439 * C2659 +
            C3440 * C32130) *
               C31941) *
              C31813 * C235 +
          (((C113 * C239 - C31836 * C249) * C2656 +
            (C113 * C250 - C31836 * C269) * C2650 + (C475 - C476) * C2657 +
            (C477 - C478) * C2651 + (C479 - C480) * C2658 +
            (C481 - C482) * C2652 + (C483 - C484) * C2659 +
            (C485 - C486) * C32130) *
               C32096 +
           ((C2543 - C2544) * C2656 + (C2545 - C2546) * C2650 +
            (C2209 - C2210) * C2657 + (C2211 - C2212) * C2651 +
            (C2213 - C2214) * C2658 + (C2215 - C2216) * C2652 +
            (C113 * C679 - C31836 * C687) * C2659 +
            (C113 * C688 - C31836 * C694) * C32130) *
               C31941) *
              C31813 * C236 +
          (((C31836 * C259 - C113 * C244) * C2656 +
            (C31836 * C274 - C113 * C260) * C2650 +
            (C31836 * C261 - C113 * C245) * C2657 +
            (C31836 * C275 - C113 * C262) * C2651 +
            (C31836 * C263 - C113 * C246) * C2658 +
            (C31836 * C276 - C113 * C264) * C2652 +
            (C31836 * C265 - C113 * C247) * C2659 +
            (C31836 * C277 - C113 * C266) * C32130) *
               C32096 +
           ((C31836 * C1117 - C113 * C1108) * C2656 +
            (C31836 * C1135 - C113 * C1118) * C2650 +
            (C31836 * C1119 - C113 * C1109) * C2657 +
            (C31836 * C1136 - C113 * C1120) * C2651 +
            (C31836 * C1121 - C113 * C1110) * C2658 +
            (C31836 * C1137 - C113 * C1122) * C2652 +
            (C31836 * C1465 - C113 * C1464) * C2659 +
            (C31836 * C1467 - C113 * C1466) * C32130) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C30875 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C32076 +
            (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C30856 +
            (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C31762) *
               C32096 +
           ((C6825 - C6826 + C6827 - C6828 + C6829 - C6830) * C30875 +
            (C6831 - C6832 + C6833 - C6834 + C6835 - C6836) * C32076 +
            (C5838 - C5837 + C5840 - C5839 + C5842 - C5841) * C30856 +
            (C5844 - C5843 + C5846 - C5845 + C5848 - C5847) * C31762) *
               C31941) *
              C31813 * C31799 * C110 +
          (((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C30875 +
            (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C32076 +
            (C5268 - C5267 + C5270 - C5269 + C5272 - C5271) * C30856 +
            (C5274 - C5273 + C5276 - C5275 + C5278 - C5277) * C31762) *
               C32096 +
           ((C5837 - C5838 + C5839 - C5840 + C5841 - C5842) * C30875 +
            (C5843 - C5844 + C5845 - C5846 + C5847 - C5848) * C32076 +
            (C5849 - C5850 + C5851 - C5852 + C5853 - C5854) * C30856 +
            (C5855 - C5856 + C5857 - C5858 + C5859 - C5860) * C31762) *
               C31941) *
              C31813 * C31799 * C111 +
          ((C5299 * C30875 + C5300 * C32076 +
            (C5280 - C5279 + C5282 - C5281 + C5284 - C5283) * C30856 +
            (C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C31762) *
               C32096 +
           ((C5850 - C5849 + C5852 - C5851 + C5854 - C5853) * C30875 +
            (C5856 - C5855 + C5858 - C5857 + C5860 - C5859) * C32076 +
            (C5242 * C360 - C5248 * C347 + C5243 * C687 - C5249 * C679 +
             C32126 * C1465 - C5250 * C1464) *
                C30856 +
            (C5242 * C377 - C5248 * C361 + C5243 * C694 - C5249 * C688 +
             C32126 * C1467 - C5250 * C1466) *
                C31762) *
               C31941) *
              C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C30875 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C32076 +
            (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C30856 +
            (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C31762) *
               C32096 +
           ((C6825 - C6826 + C6827 - C6828 + C6829 - C6830) * C30875 +
            (C6831 - C6832 + C6833 - C6834 + C6835 - C6836) * C32076 +
            (C5838 - C5837 + C5840 - C5839 + C5842 - C5841) * C30856 +
            (C5844 - C5843 + C5846 - C5845 + C5848 - C5847) * C31762) *
               C31941) *
              C31813 * C235 +
          (((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
             C5250 * C974 - C32126 * C980) *
                C30875 +
            (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
             C5250 * C981 - C32126 * C992) *
                C32076 +
            (C5667 - C5668 + C5669 - C5670 + C5671 - C5672) * C30856 +
            (C5673 - C5674 + C5675 - C5676 + C5677 - C5678) * C31762) *
               C32096 +
           ((C7336 - C7337 + C7338 - C7339 + C7340 - C7341) * C30875 +
            (C7342 - C7343 + C7344 - C7345 + C7346 - C7347) * C32076 +
            (C5248 * C677 - C5242 * C683 + C5249 * C1109 - C5243 * C1119 +
             C5250 * C1639 - C32126 * C1643) *
                C30856 +
            (C5248 * C684 - C5242 * C692 + C5249 * C1120 - C5243 * C1136 +
             C5250 * C1644 - C32126 * C1648) *
                C31762) *
               C31941) *
              C31813 * C236 +
          (((C5242 * C259 - C5248 * C244 + C5243 * C980 - C5249 * C974 +
             C32126 * C986 - C5250 * C977) *
                C30875 +
            (C5242 * C274 - C5248 * C260 + C5243 * C992 - C5249 * C981 +
             C32126 * C995 - C5250 * C987) *
                C32076 +
            (C5242 * C261 - C5248 * C245 + C5243 * C982 - C5249 * C975 +
             C32126 * C988 - C5250 * C978) *
                C30856 +
            (C5242 * C275 - C5248 * C262 + C5243 * C993 - C5249 * C983 +
             C32126 * C996 - C5250 * C989) *
                C31762) *
               C32096 +
           ((C5242 * C1117 - C5248 * C1108 + C5243 * C1641 - C5249 * C1638 +
             C32126 * C6215 - C5250 * C6212) *
                C30875 +
            (C5242 * C1135 - C5248 * C1118 + C5243 * C1647 - C5249 * C1642 +
             C32126 * C6221 - C5250 * C6216) *
                C32076 +
            (C5242 * C1119 - C5248 * C1109 + C5243 * C1643 - C5249 * C1639 +
             C32126 * C6393 - C5250 * C6392) *
                C30856 +
            (C5242 * C1136 - C5248 * C1120 + C5243 * C1648 - C5249 * C1644 +
             C32126 * C6395 - C5250 * C6394) *
                C31762) *
               C31941) *
              C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C114 +
            (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C31854 * C31813 * C466 +
           ((C113 * C239 - C31836 * C249) * C114 +
            (C113 * C250 - C31836 * C269) * C102 + (C475 - C476) * C115 +
            (C477 - C478) * C103 + (C479 - C480) * C116 + (C481 - C482) * C104 +
            (C483 - C484) * C117 + (C485 - C486) * C105 + (C487 - C488) * C118 +
            (C489 - C490) * C106) *
               C31854 * C31813 * C467) *
              C468 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C31854 * C31813 * C466 +
           ((C476 - C475) * C114 + (C478 - C477) * C102 + (C480 - C479) * C115 +
            (C482 - C481) * C103 + (C484 - C483) * C116 + (C486 - C485) * C104 +
            (C488 - C487) * C117 + (C490 - C489) * C105 +
            (C31836 * C471 - C113 * C470) * C118 +
            (C31836 * C473 - C113 * C472) * C106) *
               C31854 * C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C815 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C809 +
            (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
            (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
            C864 * C32115) *
               C31854 * C31813 * C466 +
           ((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
             C814 * C974 - C32126 * C980) *
                C815 +
            (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
             C814 * C981 - C32126 * C992) *
                C809 +
            (C1295 - C1296 + C1297 - C1298 + C1299 - C1300) * C816 +
            (C1301 - C1302 + C1303 - C1304 + C1305 - C1306) * C810 +
            (C1307 - C1308 + C1309 - C1310 + C1311 - C1312) * C817 +
            (C1313 - C1314 + C1315 - C1316 + C1317 - C1318) * C32115) *
               C31854 * C31813 * C467) *
              C468 +
          (((C820 - C819 + C822 - C821 + C824 - C823) * C815 +
            (C826 - C825 + C828 - C827 + C830 - C829) * C809 +
            (C832 - C831 + C834 - C833 + C836 - C835) * C816 +
            (C838 - C837 + C840 - C839 + C842 - C841) * C810 +
            (C843 - C844 + C845 - C846 + C847 - C848) * C817 +
            (C849 - C850 + C851 - C852 + C853 - C854) * C32115) *
               C31854 * C31813 * C466 +
           ((C1296 - C1295 + C1298 - C1297 + C1300 - C1299) * C815 +
            (C1302 - C1301 + C1304 - C1303 + C1306 - C1305) * C809 +
            (C1308 - C1307 + C1310 - C1309 + C1312 - C1311) * C816 +
            (C1314 - C1313 + C1316 - C1315 + C1318 - C1317) * C810 +
            (C32161 * C255 - C812 * C242 + C32149 * C265 - C813 * C247 +
             C32126 * C1291 - C814 * C1290) *
                C817 +
            (C32161 * C272 - C812 * C256 + C32149 * C277 - C813 * C266 +
             C32126 * C1293 - C814 * C1292) *
                C32115) *
               C31854 * C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C5251 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C32158 +
            (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
            (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
            C5299 * C5253 + C5300 * C32115) *
               C31854 * C31813 * C466 +
           ((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
             C5250 * C974 - C32126 * C980) *
                C5251 +
            (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
             C5250 * C981 - C32126 * C992) *
                C32158 +
            (C5667 - C5668 + C5669 - C5670 + C5671 - C5672) * C5252 +
            (C5673 - C5674 + C5675 - C5676 + C5677 - C5678) * C32145 +
            (C5679 - C5680 + C5681 - C5682 + C5683 - C5684) * C5253 +
            (C5685 - C5686 + C5687 - C5688 + C5689 - C5690) * C32115) *
               C31854 * C31813 * C467) *
              C468 +
          (((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C5251 +
            (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C32158 +
            (C5268 - C5267 + C5270 - C5269 + C5272 - C5271) * C5252 +
            (C5274 - C5273 + C5276 - C5275 + C5278 - C5277) * C32145 +
            (C5279 - C5280 + C5281 - C5282 + C5283 - C5284) * C5253 +
            (C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C32115) *
               C31854 * C31813 * C466 +
           ((C5668 - C5667 + C5670 - C5669 + C5672 - C5671) * C5251 +
            (C5674 - C5673 + C5676 - C5675 + C5678 - C5677) * C32158 +
            (C5680 - C5679 + C5682 - C5681 + C5684 - C5683) * C5252 +
            (C5686 - C5685 + C5688 - C5687 + C5690 - C5689) * C32145 +
            (C5242 * C255 - C5248 * C242 + C5243 * C265 - C5249 * C247 +
             C32126 * C1291 - C5250 * C1290) *
                C5253 +
            (C5242 * C272 - C5248 * C256 + C5243 * C277 - C5249 * C266 +
             C32126 * C1293 - C5250 * C1292) *
                C32115) *
               C31854 * C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
             C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
             C6072 * C986 - C6078 * C977) *
                C6079 +
            (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
             C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
             C6072 * C995 - C6078 * C987) *
                C31752) *
               C31854 * C31813 * C466 +
           ((C6074 * C239 - C6068 * C249 + C6075 * C244 - C6069 * C259 +
             C6076 * C974 - C6070 * C980 + C6077 * C977 - C6071 * C986 +
             C6078 * C6142 - C6072 * C6144) *
                C6079 +
            (C6074 * C250 - C6068 * C269 + C6075 * C260 - C6069 * C274 +
             C6076 * C981 - C6070 * C992 + C6077 * C987 - C6071 * C995 +
             C6078 * C6145 - C6072 * C6148) *
                C31752) *
               C31854 * C31813 * C467) *
              C468 +
          (((C6074 * C120 - C6068 * C128 + C6075 * C240 - C6069 * C251 +
             C6076 * C245 - C6070 * C261 + C6077 * C975 - C6071 * C982 +
             C6078 * C978 - C6072 * C988) *
                C6079 +
            (C6074 * C129 - C6068 * C141 + C6075 * C252 - C6069 * C270 +
             C6076 * C262 - C6070 * C275 + C6077 * C983 - C6071 * C993 +
             C6078 * C989 - C6072 * C996) *
                C31752) *
               C31854 * C31813 * C466 +
           ((C6068 * C251 - C6074 * C240 + C6069 * C261 - C6075 * C245 +
             C6070 * C982 - C6076 * C975 + C6071 * C988 - C6077 * C978 +
             C6072 * C6307 - C6078 * C6306) *
                C6079 +
            (C6068 * C270 - C6074 * C252 + C6069 * C275 - C6075 * C262 +
             C6070 * C993 - C6076 * C983 + C6071 * C996 - C6077 * C989 +
             C6072 * C6309 - C6078 * C6308) *
                C31752) *
               C31854 * C31813 * C467) *
              C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C114 +
            (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C31854 * C572 +
           ((C113 * C344 - C31836 * C354) * C114 +
            (C113 * C355 - C31836 * C374) * C102 + (C579 - C580) * C115 +
            (C581 - C582) * C103 + (C583 - C584) * C116 + (C585 - C586) * C104 +
            (C587 - C588) * C117 + (C589 - C590) * C105 + (C591 - C592) * C118 +
            (C593 - C594) * C106) *
               C31854 * C573) *
              C466 +
          (((C113 * C239 - C31836 * C249) * C114 +
            (C113 * C250 - C31836 * C269) * C102 + (C475 - C476) * C115 +
            (C477 - C478) * C103 + (C479 - C480) * C116 + (C481 - C482) * C104 +
            (C483 - C484) * C117 + (C485 - C486) * C105 + (C487 - C488) * C118 +
            (C489 - C490) * C106) *
               C31854 * C572 +
           ((C31836 * C681 - C113 * C676) * C114 +
            (C31836 * C691 - C113 * C682) * C102 +
            (C31836 * C683 - C113 * C677) * C115 +
            (C31836 * C692 - C113 * C684) * C103 +
            (C31836 * C685 - C113 * C678) * C116 +
            (C31836 * C693 - C113 * C686) * C104 +
            (C31836 * C687 - C113 * C679) * C117 +
            (C31836 * C694 - C113 * C688) * C105 +
            (C31836 * C689 - C113 * C680) * C118 +
            (C31836 * C695 - C113 * C690) * C106) *
               C31854 * C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C815 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C809 +
            (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
            (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
            C864 * C32115) *
               C31854 * C572 +
           ((C812 * C344 - C32161 * C354 + C813 * C676 - C32149 * C681 +
             C814 * C1108 - C32126 * C1117) *
                C815 +
            (C812 * C355 - C32161 * C374 + C813 * C682 - C32149 * C691 +
             C814 * C1118 - C32126 * C1135) *
                C809 +
            (C1469 - C1470 + C1471 - C1472 + C1473 - C1474) * C816 +
            (C1475 - C1476 + C1477 - C1478 + C1479 - C1480) * C810 +
            (C1481 - C1482 + C1483 - C1484 + C1485 - C1486) * C817 +
            (C1487 - C1488 + C1489 - C1490 + C1491 - C1492) * C32115) *
               C31854 * C573) *
              C466 +
          (((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
             C814 * C974 - C32126 * C980) *
                C815 +
            (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
             C814 * C981 - C32126 * C992) *
                C809 +
            (C1295 - C1296 + C1297 - C1298 + C1299 - C1300) * C816 +
            (C1301 - C1302 + C1303 - C1304 + C1305 - C1306) * C810 +
            (C1307 - C1308 + C1309 - C1310 + C1311 - C1312) * C817 +
            (C1313 - C1314 + C1315 - C1316 + C1317 - C1318) * C32115) *
               C31854 * C572 +
           ((C32161 * C681 - C812 * C676 + C32149 * C1117 - C813 * C1108 +
             C32126 * C1641 - C814 * C1638) *
                C815 +
            (C32161 * C691 - C812 * C682 + C32149 * C1135 - C813 * C1118 +
             C32126 * C1647 - C814 * C1642) *
                C809 +
            (C32161 * C683 - C812 * C677 + C32149 * C1119 - C813 * C1109 +
             C32126 * C1643 - C814 * C1639) *
                C816 +
            (C32161 * C692 - C812 * C684 + C32149 * C1136 - C813 * C1120 +
             C32126 * C1648 - C814 * C1644) *
                C810 +
            (C32161 * C685 - C812 * C678 + C32149 * C1121 - C813 * C1110 +
             C32126 * C1645 - C814 * C1640) *
                C817 +
            (C32161 * C693 - C812 * C686 + C32149 * C1137 - C813 * C1122 +
             C32126 * C1649 - C814 * C1646) *
                C32115) *
               C31854 * C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C5251 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C32158 +
            (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
            (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
            C5299 * C5253 + C5300 * C32115) *
               C31854 * C572 +
           ((C5248 * C344 - C5242 * C354 + C5249 * C676 - C5243 * C681 +
             C5250 * C1108 - C32126 * C1117) *
                C5251 +
            (C5248 * C355 - C5242 * C374 + C5249 * C682 - C5243 * C691 +
             C5250 * C1118 - C32126 * C1135) *
                C32158 +
            (C5837 - C5838 + C5839 - C5840 + C5841 - C5842) * C5252 +
            (C5843 - C5844 + C5845 - C5846 + C5847 - C5848) * C32145 +
            (C5849 - C5850 + C5851 - C5852 + C5853 - C5854) * C5253 +
            (C5855 - C5856 + C5857 - C5858 + C5859 - C5860) * C32115) *
               C31854 * C573) *
              C466 +
          (((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
             C5250 * C974 - C32126 * C980) *
                C5251 +
            (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
             C5250 * C981 - C32126 * C992) *
                C32158 +
            (C5667 - C5668 + C5669 - C5670 + C5671 - C5672) * C5252 +
            (C5673 - C5674 + C5675 - C5676 + C5677 - C5678) * C32145 +
            (C5679 - C5680 + C5681 - C5682 + C5683 - C5684) * C5253 +
            (C5685 - C5686 + C5687 - C5688 + C5689 - C5690) * C32115) *
               C31854 * C572 +
           ((C5242 * C681 - C5248 * C676 + C5243 * C1117 - C5249 * C1108 +
             C32126 * C1641 - C5250 * C1638) *
                C5251 +
            (C5242 * C691 - C5248 * C682 + C5243 * C1135 - C5249 * C1118 +
             C32126 * C1647 - C5250 * C1642) *
                C32158 +
            (C5242 * C683 - C5248 * C677 + C5243 * C1119 - C5249 * C1109 +
             C32126 * C1643 - C5250 * C1639) *
                C5252 +
            (C5242 * C692 - C5248 * C684 + C5243 * C1136 - C5249 * C1120 +
             C32126 * C1648 - C5250 * C1644) *
                C32145 +
            (C5242 * C685 - C5248 * C678 + C5243 * C1121 - C5249 * C1110 +
             C32126 * C1645 - C5250 * C1640) *
                C5253 +
            (C5242 * C693 - C5248 * C686 + C5243 * C1137 - C5249 * C1122 +
             C32126 * C1649 - C5250 * C1646) *
                C32115) *
               C31854 * C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
             C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
             C6072 * C986 - C6078 * C977) *
                C6079 +
            (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
             C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
             C6072 * C995 - C6078 * C987) *
                C31752) *
               C31854 * C572 +
           ((C6074 * C344 - C6068 * C354 + C6075 * C676 - C6069 * C681 +
             C6076 * C1108 - C6070 * C1117 + C6077 * C1638 - C6071 * C1641 +
             C6078 * C6212 - C6072 * C6215) *
                C6079 +
            (C6074 * C355 - C6068 * C374 + C6075 * C682 - C6069 * C691 +
             C6076 * C1118 - C6070 * C1135 + C6077 * C1642 - C6071 * C1647 +
             C6078 * C6216 - C6072 * C6221) *
                C31752) *
               C31854 * C573) *
              C466 +
          (((C6074 * C239 - C6068 * C249 + C6075 * C244 - C6069 * C259 +
             C6076 * C974 - C6070 * C980 + C6077 * C977 - C6071 * C986 +
             C6078 * C6142 - C6072 * C6144) *
                C6079 +
            (C6074 * C250 - C6068 * C269 + C6075 * C260 - C6069 * C274 +
             C6076 * C981 - C6070 * C992 + C6077 * C987 - C6071 * C995 +
             C6078 * C6145 - C6072 * C6148) *
                C31752) *
               C31854 * C572 +
           ((C6068 * C681 - C6074 * C676 + C6069 * C1117 - C6075 * C1108 +
             C6070 * C1641 - C6076 * C1638 + C6071 * C6215 - C6077 * C6212 +
             C6072 * C6479 - C6078 * C6478) *
                C6079 +
            (C6068 * C691 - C6074 * C682 + C6069 * C1135 - C6075 * C1118 +
             C6070 * C1647 - C6076 * C1642 + C6071 * C6221 - C6077 * C6216 +
             C6072 * C6481 - C6078 * C6480) *
                C31752) *
               C31854 * C573) *
              C467) *
         C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C31836 * C126 - C113 * C119) * C114 +
           (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C31854 * C31813 * C235 +
          ((C113 * C239 - C31836 * C249) * C114 +
           (C113 * C250 - C31836 * C269) * C102 +
           (C113 * C240 - C31836 * C251) * C115 +
           (C113 * C252 - C31836 * C270) * C103 +
           (C113 * C241 - C31836 * C253) * C116 +
           (C113 * C254 - C31836 * C271) * C104 +
           (C113 * C242 - C31836 * C255) * C117 +
           (C113 * C256 - C31836 * C272) * C105 +
           (C113 * C243 - C31836 * C257) * C118 +
           (C113 * C258 - C31836 * C273) * C106) *
              C31854 * C31813 * C236 +
          ((C31836 * C259 - C113 * C244) * C114 +
           (C31836 * C274 - C113 * C260) * C102 +
           (C31836 * C261 - C113 * C245) * C115 +
           (C31836 * C275 - C113 * C262) * C103 +
           (C31836 * C263 - C113 * C246) * C116 +
           (C31836 * C276 - C113 * C264) * C104 +
           (C31836 * C265 - C113 * C247) * C117 +
           (C31836 * C277 - C113 * C266) * C105 +
           (C31836 * C267 - C113 * C248) * C118 +
           (C31836 * C278 - C113 * C268) * C106) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C31836 * C126 - C113 * C119) * C114 +
           (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C31854 * C31813 * C31799 * C110 +
          ((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
           (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
           (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
           (C166 - C167) * C106) *
              C31854 * C31813 * C31799 * C111 +
          (C168 * C114 + C169 * C102 + C170 * C115 + C171 * C103 + C172 * C116 +
           C173 * C104 + (C165 - C164) * C117 + (C167 - C166) * C105 +
           (C31836 * C138 - C113 * C125) * C118 +
           (C31836 * C146 - C113 * C139) * C106) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31836 * C126 - C113 * C119) * C114 +
           (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C31854 * C341 +
          ((C113 * C344 - C31836 * C354) * C114 +
           (C113 * C355 - C31836 * C374) * C102 +
           (C113 * C345 - C31836 * C356) * C115 +
           (C113 * C357 - C31836 * C375) * C103 +
           (C113 * C346 - C31836 * C358) * C116 +
           (C113 * C359 - C31836 * C376) * C104 +
           (C113 * C347 - C31836 * C360) * C117 +
           (C113 * C361 - C31836 * C377) * C105 +
           (C113 * C348 - C31836 * C362) * C118 +
           (C113 * C363 - C31836 * C378) * C106) *
              C31854 * C342 +
          ((C31836 * C364 - C113 * C349) * C114 +
           (C31836 * C379 - C113 * C365) * C102 +
           (C31836 * C366 - C113 * C350) * C115 +
           (C31836 * C380 - C113 * C367) * C103 +
           (C31836 * C368 - C113 * C351) * C116 +
           (C31836 * C381 - C113 * C369) * C104 +
           (C31836 * C370 - C113 * C352) * C117 +
           (C31836 * C382 - C113 * C371) * C105 +
           (C31836 * C372 - C113 * C353) * C118 +
           (C31836 * C383 - C113 * C373) * C106) *
              C31854 * C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
            C32126 * C259 - C814 * C244) *
               C815 +
           (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
            C32126 * C274 - C814 * C260) *
               C809 +
           (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
           (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
           C864 * C32115) *
              C31854 * C31813 * C31799 * C110 +
          ((C820 - C819 + C822 - C821 + C824 - C823) * C815 +
           (C826 - C825 + C828 - C827 + C830 - C829) * C809 +
           (C832 - C831 + C834 - C833 + C836 - C835) * C816 +
           (C838 - C837 + C840 - C839 + C842 - C841) * C810 +
           (C843 - C844 + C845 - C846 + C847 - C848) * C817 +
           (C849 - C850 + C851 - C852 + C853 - C854) * C32115) *
              C31854 * C31813 * C31799 * C111 +
          (C863 * C815 + C864 * C809 +
           (C844 - C843 + C846 - C845 + C848 - C847) * C816 +
           (C850 - C849 + C852 - C851 + C854 - C853) * C810 +
           (C32161 * C134 - C812 * C123 + C32149 * C257 - C813 * C243 +
            C32126 * C267 - C814 * C248) *
               C817 +
           (C32161 * C144 - C812 * C135 + C32149 * C273 - C813 * C258 +
            C32126 * C278 - C814 * C268) *
               C32115) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
            C32126 * C259 - C814 * C244) *
               C815 +
           (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
            C32126 * C274 - C814 * C260) *
               C809 +
           (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
           (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
           C864 * C32115) *
              C31854 * C31813 * C235 +
          ((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
            C814 * C974 - C32126 * C980) *
               C815 +
           (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
            C814 * C981 - C32126 * C992) *
               C809 +
           (C812 * C240 - C32161 * C251 + C813 * C245 - C32149 * C261 +
            C814 * C975 - C32126 * C982) *
               C816 +
           (C812 * C252 - C32161 * C270 + C813 * C262 - C32149 * C275 +
            C814 * C983 - C32126 * C993) *
               C810 +
           (C812 * C241 - C32161 * C253 + C813 * C246 - C32149 * C263 +
            C814 * C976 - C32126 * C984) *
               C817 +
           (C812 * C254 - C32161 * C271 + C813 * C264 - C32149 * C276 +
            C814 * C985 - C32126 * C994) *
               C32115) *
              C31854 * C31813 * C236 +
          ((C32161 * C259 - C812 * C244 + C32149 * C980 - C813 * C974 +
            C32126 * C986 - C814 * C977) *
               C815 +
           (C32161 * C274 - C812 * C260 + C32149 * C992 - C813 * C981 +
            C32126 * C995 - C814 * C987) *
               C809 +
           (C32161 * C261 - C812 * C245 + C32149 * C982 - C813 * C975 +
            C32126 * C988 - C814 * C978) *
               C816 +
           (C32161 * C275 - C812 * C262 + C32149 * C993 - C813 * C983 +
            C32126 * C996 - C814 * C989) *
               C810 +
           (C32161 * C263 - C812 * C246 + C32149 * C984 - C813 * C976 +
            C32126 * C990 - C814 * C979) *
               C817 +
           (C32161 * C276 - C812 * C264 + C32149 * C994 - C813 * C985 +
            C32126 * C997 - C814 * C991) *
               C32115) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
            C32126 * C259 - C814 * C244) *
               C815 +
           (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
            C32126 * C274 - C814 * C260) *
               C809 +
           (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
           (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
           C864 * C32115) *
              C31854 * C341 +
          ((C812 * C344 - C32161 * C354 + C813 * C676 - C32149 * C681 +
            C814 * C1108 - C32126 * C1117) *
               C815 +
           (C812 * C355 - C32161 * C374 + C813 * C682 - C32149 * C691 +
            C814 * C1118 - C32126 * C1135) *
               C809 +
           (C812 * C345 - C32161 * C356 + C813 * C677 - C32149 * C683 +
            C814 * C1109 - C32126 * C1119) *
               C816 +
           (C812 * C357 - C32161 * C375 + C813 * C684 - C32149 * C692 +
            C814 * C1120 - C32126 * C1136) *
               C810 +
           (C812 * C346 - C32161 * C358 + C813 * C678 - C32149 * C685 +
            C814 * C1110 - C32126 * C1121) *
               C817 +
           (C812 * C359 - C32161 * C376 + C813 * C686 - C32149 * C693 +
            C814 * C1122 - C32126 * C1137) *
               C32115) *
              C31854 * C342 +
          ((C32161 * C364 - C812 * C349 + C32149 * C1123 - C813 * C1111 +
            C32126 * C1124 - C814 * C1112) *
               C815 +
           (C32161 * C379 - C812 * C365 + C32149 * C1138 - C813 * C1125 +
            C32126 * C1139 - C814 * C1126) *
               C809 +
           (C32161 * C366 - C812 * C350 + C32149 * C1127 - C813 * C1113 +
            C32126 * C1128 - C814 * C1114) *
               C816 +
           (C32161 * C380 - C812 * C367 + C32149 * C1140 - C813 * C1129 +
            C32126 * C1141 - C814 * C1130) *
               C810 +
           (C32161 * C368 - C812 * C351 + C32149 * C1131 - C813 * C1115 +
            C32126 * C1132 - C814 * C1116) *
               C817 +
           (C32161 * C381 - C812 * C369 + C32149 * C1142 - C813 * C1133 +
            C32126 * C1143 - C814 * C1134) *
               C32115) *
              C31854 * C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
            C32126 * C259 - C5250 * C244) *
               C5251 +
           (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
            C32126 * C274 - C5250 * C260) *
               C32158 +
           (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
           (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
           C5299 * C5253 + C5300 * C32115) *
              C31854 * C31813 * C31799 * C110 +
          ((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C5251 +
           (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C32158 +
           (C5268 - C5267 + C5270 - C5269 + C5272 - C5271) * C5252 +
           (C5274 - C5273 + C5276 - C5275 + C5278 - C5277) * C32145 +
           (C5279 - C5280 + C5281 - C5282 + C5283 - C5284) * C5253 +
           (C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C32115) *
              C31854 * C31813 * C31799 * C111 +
          (C5299 * C5251 + C5300 * C32158 +
           (C5280 - C5279 + C5282 - C5281 + C5284 - C5283) * C5252 +
           (C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C32145 +
           (C5242 * C134 - C5248 * C123 + C5243 * C257 - C5249 * C243 +
            C32126 * C267 - C5250 * C248) *
               C5253 +
           (C5242 * C144 - C5248 * C135 + C5243 * C273 - C5249 * C258 +
            C32126 * C278 - C5250 * C268) *
               C32115) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
            C32126 * C259 - C5250 * C244) *
               C5251 +
           (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
            C32126 * C274 - C5250 * C260) *
               C32158 +
           (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
           (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
           C5299 * C5253 + C5300 * C32115) *
              C31854 * C31813 * C235 +
          ((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
            C5250 * C974 - C32126 * C980) *
               C5251 +
           (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
            C5250 * C981 - C32126 * C992) *
               C32158 +
           (C5248 * C240 - C5242 * C251 + C5249 * C245 - C5243 * C261 +
            C5250 * C975 - C32126 * C982) *
               C5252 +
           (C5248 * C252 - C5242 * C270 + C5249 * C262 - C5243 * C275 +
            C5250 * C983 - C32126 * C993) *
               C32145 +
           (C5248 * C241 - C5242 * C253 + C5249 * C246 - C5243 * C263 +
            C5250 * C976 - C32126 * C984) *
               C5253 +
           (C5248 * C254 - C5242 * C271 + C5249 * C264 - C5243 * C276 +
            C5250 * C985 - C32126 * C994) *
               C32115) *
              C31854 * C31813 * C236 +
          ((C5242 * C259 - C5248 * C244 + C5243 * C980 - C5249 * C974 +
            C32126 * C986 - C5250 * C977) *
               C5251 +
           (C5242 * C274 - C5248 * C260 + C5243 * C992 - C5249 * C981 +
            C32126 * C995 - C5250 * C987) *
               C32158 +
           (C5242 * C261 - C5248 * C245 + C5243 * C982 - C5249 * C975 +
            C32126 * C988 - C5250 * C978) *
               C5252 +
           (C5242 * C275 - C5248 * C262 + C5243 * C993 - C5249 * C983 +
            C32126 * C996 - C5250 * C989) *
               C32145 +
           (C5242 * C263 - C5248 * C246 + C5243 * C984 - C5249 * C976 +
            C32126 * C990 - C5250 * C979) *
               C5253 +
           (C5242 * C276 - C5248 * C264 + C5243 * C994 - C5249 * C985 +
            C32126 * C997 - C5250 * C991) *
               C32115) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
            C32126 * C259 - C5250 * C244) *
               C5251 +
           (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
            C32126 * C274 - C5250 * C260) *
               C32158 +
           (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
           (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
           C5299 * C5253 + C5300 * C32115) *
              C31854 * C341 +
          ((C5248 * C344 - C5242 * C354 + C5249 * C676 - C5243 * C681 +
            C5250 * C1108 - C32126 * C1117) *
               C5251 +
           (C5248 * C355 - C5242 * C374 + C5249 * C682 - C5243 * C691 +
            C5250 * C1118 - C32126 * C1135) *
               C32158 +
           (C5248 * C345 - C5242 * C356 + C5249 * C677 - C5243 * C683 +
            C5250 * C1109 - C32126 * C1119) *
               C5252 +
           (C5248 * C357 - C5242 * C375 + C5249 * C684 - C5243 * C692 +
            C5250 * C1120 - C32126 * C1136) *
               C32145 +
           (C5248 * C346 - C5242 * C358 + C5249 * C678 - C5243 * C685 +
            C5250 * C1110 - C32126 * C1121) *
               C5253 +
           (C5248 * C359 - C5242 * C376 + C5249 * C686 - C5243 * C693 +
            C5250 * C1122 - C32126 * C1137) *
               C32115) *
              C31854 * C342 +
          ((C5242 * C364 - C5248 * C349 + C5243 * C1123 - C5249 * C1111 +
            C32126 * C1124 - C5250 * C1112) *
               C5251 +
           (C5242 * C379 - C5248 * C365 + C5243 * C1138 - C5249 * C1125 +
            C32126 * C1139 - C5250 * C1126) *
               C32158 +
           (C5242 * C366 - C5248 * C350 + C5243 * C1127 - C5249 * C1113 +
            C32126 * C1128 - C5250 * C1114) *
               C5252 +
           (C5242 * C380 - C5248 * C367 + C5243 * C1140 - C5249 * C1129 +
            C32126 * C1141 - C5250 * C1130) *
               C32145 +
           (C5242 * C368 - C5248 * C351 + C5243 * C1131 - C5249 * C1115 +
            C32126 * C1132 - C5250 * C1116) *
               C5253 +
           (C5242 * C381 - C5248 * C369 + C5243 * C1142 - C5249 * C1133 +
            C32126 * C1143 - C5250 * C1134) *
               C32115) *
              C31854 * C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
            C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
            C6072 * C986 - C6078 * C977) *
               C6079 +
           (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
            C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
            C6072 * C995 - C6078 * C987) *
               C31752) *
              C31854 * C31813 * C31799 * C110 +
          ((C6074 * C120 - C6068 * C128 + C6075 * C240 - C6069 * C251 +
            C6076 * C245 - C6070 * C261 + C6077 * C975 - C6071 * C982 +
            C6078 * C978 - C6072 * C988) *
               C6079 +
           (C6074 * C129 - C6068 * C141 + C6075 * C252 - C6069 * C270 +
            C6076 * C262 - C6070 * C275 + C6077 * C983 - C6071 * C993 +
            C6078 * C989 - C6072 * C996) *
               C31752) *
              C31854 * C31813 * C31799 * C111 +
          ((C6068 * C130 - C6074 * C121 + C6069 * C253 - C6075 * C241 +
            C6070 * C263 - C6076 * C246 + C6071 * C984 - C6077 * C976 +
            C6072 * C990 - C6078 * C979) *
               C6079 +
           (C6068 * C142 - C6074 * C131 + C6069 * C271 - C6075 * C254 +
            C6070 * C276 - C6076 * C264 + C6071 * C994 - C6077 * C985 +
            C6072 * C997 - C6078 * C991) *
               C31752) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
            C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
            C6072 * C986 - C6078 * C977) *
               C6079 +
           (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
            C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
            C6072 * C995 - C6078 * C987) *
               C31752) *
              C31854 * C31813 * C235 +
          ((C6074 * C239 - C6068 * C249 + C6075 * C244 - C6069 * C259 +
            C6076 * C974 - C6070 * C980 + C6077 * C977 - C6071 * C986 +
            C6078 * C6142 - C6072 * C6144) *
               C6079 +
           (C6074 * C250 - C6068 * C269 + C6075 * C260 - C6069 * C274 +
            C6076 * C981 - C6070 * C992 + C6077 * C987 - C6071 * C995 +
            C6078 * C6145 - C6072 * C6148) *
               C31752) *
              C31854 * C31813 * C236 +
          ((C6068 * C259 - C6074 * C244 + C6069 * C980 - C6075 * C974 +
            C6070 * C986 - C6076 * C977 + C6071 * C6144 - C6077 * C6142 +
            C6072 * C6146 - C6078 * C6143) *
               C6079 +
           (C6068 * C274 - C6074 * C260 + C6069 * C992 - C6075 * C981 +
            C6070 * C995 - C6076 * C987 + C6071 * C6148 - C6077 * C6145 +
            C6072 * C6149 - C6078 * C6147) *
               C31752) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
            C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
            C6072 * C986 - C6078 * C977) *
               C6079 +
           (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
            C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
            C6072 * C995 - C6078 * C987) *
               C31752) *
              C31854 * C341 +
          ((C6074 * C344 - C6068 * C354 + C6075 * C676 - C6069 * C681 +
            C6076 * C1108 - C6070 * C1117 + C6077 * C1638 - C6071 * C1641 +
            C6078 * C6212 - C6072 * C6215) *
               C6079 +
           (C6074 * C355 - C6068 * C374 + C6075 * C682 - C6069 * C691 +
            C6076 * C1118 - C6070 * C1135 + C6077 * C1642 - C6071 * C1647 +
            C6078 * C6216 - C6072 * C6221) *
               C31752) *
              C31854 * C342 +
          ((C6068 * C364 - C6074 * C349 + C6069 * C1123 - C6075 * C1111 +
            C6070 * C1124 - C6076 * C1112 + C6071 * C6217 - C6077 * C6213 +
            C6072 * C6218 - C6078 * C6214) *
               C6079 +
           (C6068 * C379 - C6074 * C365 + C6069 * C1138 - C6075 * C1125 +
            C6070 * C1139 - C6076 * C1126 + C6071 * C6222 - C6077 * C6219 +
            C6072 * C6223 - C6078 * C6220) *
               C31752) *
              C31854 * C343) *
         C31799 * C31787) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C31836 * C126 - C113 * C119) * C114 +
            (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C31854 * C572 +
           ((C113 * C344 - C31836 * C354) * C114 +
            (C113 * C355 - C31836 * C374) * C102 + (C579 - C580) * C115 +
            (C581 - C582) * C103 + (C583 - C584) * C116 + (C585 - C586) * C104 +
            (C587 - C588) * C117 + (C589 - C590) * C105 + (C591 - C592) * C118 +
            (C593 - C594) * C106) *
               C31854 * C573) *
              C31799 * C468 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C31854 * C572 +
           ((C580 - C579) * C114 + (C582 - C581) * C102 + (C584 - C583) * C115 +
            (C586 - C585) * C103 + (C588 - C587) * C116 + (C590 - C589) * C104 +
            (C592 - C591) * C117 + (C594 - C593) * C105 +
            (C31836 * C575 - C113 * C574) * C118 +
            (C31836 * C577 - C113 * C576) * C106) *
               C31854 * C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
             C32126 * C259 - C814 * C244) *
                C815 +
            (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
             C32126 * C274 - C814 * C260) *
                C809 +
            (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
            (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
            C864 * C32115) *
               C31854 * C572 +
           ((C812 * C344 - C32161 * C354 + C813 * C676 - C32149 * C681 +
             C814 * C1108 - C32126 * C1117) *
                C815 +
            (C812 * C355 - C32161 * C374 + C813 * C682 - C32149 * C691 +
             C814 * C1118 - C32126 * C1135) *
                C809 +
            (C1469 - C1470 + C1471 - C1472 + C1473 - C1474) * C816 +
            (C1475 - C1476 + C1477 - C1478 + C1479 - C1480) * C810 +
            (C1481 - C1482 + C1483 - C1484 + C1485 - C1486) * C817 +
            (C1487 - C1488 + C1489 - C1490 + C1491 - C1492) * C32115) *
               C31854 * C573) *
              C31799 * C468 +
          (((C820 - C819 + C822 - C821 + C824 - C823) * C815 +
            (C826 - C825 + C828 - C827 + C830 - C829) * C809 +
            (C832 - C831 + C834 - C833 + C836 - C835) * C816 +
            (C838 - C837 + C840 - C839 + C842 - C841) * C810 +
            (C843 - C844 + C845 - C846 + C847 - C848) * C817 +
            (C849 - C850 + C851 - C852 + C853 - C854) * C32115) *
               C31854 * C572 +
           ((C1470 - C1469 + C1472 - C1471 + C1474 - C1473) * C815 +
            (C1476 - C1475 + C1478 - C1477 + C1480 - C1479) * C809 +
            (C1482 - C1481 + C1484 - C1483 + C1486 - C1485) * C816 +
            (C1488 - C1487 + C1490 - C1489 + C1492 - C1491) * C810 +
            (C32161 * C360 - C812 * C347 + C32149 * C687 - C813 * C679 +
             C32126 * C1465 - C814 * C1464) *
                C817 +
            (C32161 * C377 - C812 * C361 + C32149 * C694 - C813 * C688 +
             C32126 * C1467 - C814 * C1466) *
                C32115) *
               C31854 * C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
             C32126 * C259 - C5250 * C244) *
                C5251 +
            (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
             C32126 * C274 - C5250 * C260) *
                C32158 +
            (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
            (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
            C5299 * C5253 + C5300 * C32115) *
               C31854 * C572 +
           ((C5248 * C344 - C5242 * C354 + C5249 * C676 - C5243 * C681 +
             C5250 * C1108 - C32126 * C1117) *
                C5251 +
            (C5248 * C355 - C5242 * C374 + C5249 * C682 - C5243 * C691 +
             C5250 * C1118 - C32126 * C1135) *
                C32158 +
            (C5837 - C5838 + C5839 - C5840 + C5841 - C5842) * C5252 +
            (C5843 - C5844 + C5845 - C5846 + C5847 - C5848) * C32145 +
            (C5849 - C5850 + C5851 - C5852 + C5853 - C5854) * C5253 +
            (C5855 - C5856 + C5857 - C5858 + C5859 - C5860) * C32115) *
               C31854 * C573) *
              C31799 * C468 +
          (((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C5251 +
            (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C32158 +
            (C5268 - C5267 + C5270 - C5269 + C5272 - C5271) * C5252 +
            (C5274 - C5273 + C5276 - C5275 + C5278 - C5277) * C32145 +
            (C5279 - C5280 + C5281 - C5282 + C5283 - C5284) * C5253 +
            (C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C32115) *
               C31854 * C572 +
           ((C5838 - C5837 + C5840 - C5839 + C5842 - C5841) * C5251 +
            (C5844 - C5843 + C5846 - C5845 + C5848 - C5847) * C32158 +
            (C5850 - C5849 + C5852 - C5851 + C5854 - C5853) * C5252 +
            (C5856 - C5855 + C5858 - C5857 + C5860 - C5859) * C32145 +
            (C5242 * C360 - C5248 * C347 + C5243 * C687 - C5249 * C679 +
             C32126 * C1465 - C5250 * C1464) *
                C5253 +
            (C5242 * C377 - C5248 * C361 + C5243 * C694 - C5249 * C688 +
             C32126 * C1467 - C5250 * C1466) *
                C32115) *
               C31854 * C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
             C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
             C6072 * C986 - C6078 * C977) *
                C6079 +
            (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
             C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
             C6072 * C995 - C6078 * C987) *
                C31752) *
               C31854 * C572 +
           ((C6074 * C344 - C6068 * C354 + C6075 * C676 - C6069 * C681 +
             C6076 * C1108 - C6070 * C1117 + C6077 * C1638 - C6071 * C1641 +
             C6078 * C6212 - C6072 * C6215) *
                C6079 +
            (C6074 * C355 - C6068 * C374 + C6075 * C682 - C6069 * C691 +
             C6076 * C1118 - C6070 * C1135 + C6077 * C1642 - C6071 * C1647 +
             C6078 * C6216 - C6072 * C6221) *
                C31752) *
               C31854 * C573) *
              C31799 * C468 +
          (((C6074 * C120 - C6068 * C128 + C6075 * C240 - C6069 * C251 +
             C6076 * C245 - C6070 * C261 + C6077 * C975 - C6071 * C982 +
             C6078 * C978 - C6072 * C988) *
                C6079 +
            (C6074 * C129 - C6068 * C141 + C6075 * C252 - C6069 * C270 +
             C6076 * C262 - C6070 * C275 + C6077 * C983 - C6071 * C993 +
             C6078 * C989 - C6072 * C996) *
                C31752) *
               C31854 * C572 +
           ((C6068 * C356 - C6074 * C345 + C6069 * C683 - C6075 * C677 +
             C6070 * C1119 - C6076 * C1109 + C6071 * C1643 - C6077 * C1639 +
             C6072 * C6393 - C6078 * C6392) *
                C6079 +
            (C6068 * C375 - C6074 * C357 + C6069 * C692 - C6075 * C684 +
             C6070 * C1136 - C6076 * C1120 + C6071 * C1648 - C6077 * C1644 +
             C6072 * C6395 - C6078 * C6394) *
                C31752) *
               C31854 * C573) *
              C31799 * C469)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C31836 * C126 - C113 * C119) * C114 +
           (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C31854 * C31813 * C31799 * C110 +
          ((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
           (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
           (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
           (C166 - C167) * C106) *
              C31854 * C31813 * C31799 * C111 +
          (C168 * C114 + C169 * C102 + C170 * C115 + C171 * C103 + C172 * C116 +
           C173 * C104 + (C165 - C164) * C117 + (C167 - C166) * C105 +
           (C31836 * C138 - C113 * C125) * C118 +
           (C31836 * C146 - C113 * C139) * C106) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C31836 * C126 - C113 * C119) * C114 +
           (C31836 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C31854 * C31813 * C235 +
          ((C113 * C239 - C31836 * C249) * C114 +
           (C113 * C250 - C31836 * C269) * C102 +
           (C113 * C240 - C31836 * C251) * C115 +
           (C113 * C252 - C31836 * C270) * C103 +
           (C113 * C241 - C31836 * C253) * C116 +
           (C113 * C254 - C31836 * C271) * C104 +
           (C113 * C242 - C31836 * C255) * C117 +
           (C113 * C256 - C31836 * C272) * C105 +
           (C113 * C243 - C31836 * C257) * C118 +
           (C113 * C258 - C31836 * C273) * C106) *
              C31854 * C31813 * C236 +
          ((C31836 * C259 - C113 * C244) * C114 +
           (C31836 * C274 - C113 * C260) * C102 +
           (C31836 * C261 - C113 * C245) * C115 +
           (C31836 * C275 - C113 * C262) * C103 +
           (C31836 * C263 - C113 * C246) * C116 +
           (C31836 * C276 - C113 * C264) * C104 +
           (C31836 * C265 - C113 * C247) * C117 +
           (C31836 * C277 - C113 * C266) * C105 +
           (C31836 * C267 - C113 * C248) * C118 +
           (C31836 * C278 - C113 * C268) * C106) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
            C32126 * C259 - C814 * C244) *
               C815 +
           (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
            C32126 * C274 - C814 * C260) *
               C809 +
           (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
           (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
           C864 * C32115) *
              C31854 * C31813 * C31799 * C110 +
          ((C820 - C819 + C822 - C821 + C824 - C823) * C815 +
           (C826 - C825 + C828 - C827 + C830 - C829) * C809 +
           (C832 - C831 + C834 - C833 + C836 - C835) * C816 +
           (C838 - C837 + C840 - C839 + C842 - C841) * C810 +
           (C843 - C844 + C845 - C846 + C847 - C848) * C817 +
           (C849 - C850 + C851 - C852 + C853 - C854) * C32115) *
              C31854 * C31813 * C31799 * C111 +
          (C863 * C815 + C864 * C809 +
           (C844 - C843 + C846 - C845 + C848 - C847) * C816 +
           (C850 - C849 + C852 - C851 + C854 - C853) * C810 +
           (C32161 * C134 - C812 * C123 + C32149 * C257 - C813 * C243 +
            C32126 * C267 - C814 * C248) *
               C817 +
           (C32161 * C144 - C812 * C135 + C32149 * C273 - C813 * C258 +
            C32126 * C278 - C814 * C268) *
               C32115) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C32161 * C126 - C812 * C119 + C32149 * C249 - C813 * C239 +
            C32126 * C259 - C814 * C244) *
               C815 +
           (C32161 * C140 - C812 * C127 + C32149 * C269 - C813 * C250 +
            C32126 * C274 - C814 * C260) *
               C809 +
           (C819 - C820 + C821 - C822 + C823 - C824) * C816 +
           (C825 - C826 + C827 - C828 + C829 - C830) * C810 + C863 * C817 +
           C864 * C32115) *
              C31854 * C31813 * C235 +
          ((C812 * C239 - C32161 * C249 + C813 * C244 - C32149 * C259 +
            C814 * C974 - C32126 * C980) *
               C815 +
           (C812 * C250 - C32161 * C269 + C813 * C260 - C32149 * C274 +
            C814 * C981 - C32126 * C992) *
               C809 +
           (C812 * C240 - C32161 * C251 + C813 * C245 - C32149 * C261 +
            C814 * C975 - C32126 * C982) *
               C816 +
           (C812 * C252 - C32161 * C270 + C813 * C262 - C32149 * C275 +
            C814 * C983 - C32126 * C993) *
               C810 +
           (C812 * C241 - C32161 * C253 + C813 * C246 - C32149 * C263 +
            C814 * C976 - C32126 * C984) *
               C817 +
           (C812 * C254 - C32161 * C271 + C813 * C264 - C32149 * C276 +
            C814 * C985 - C32126 * C994) *
               C32115) *
              C31854 * C31813 * C236 +
          ((C32161 * C259 - C812 * C244 + C32149 * C980 - C813 * C974 +
            C32126 * C986 - C814 * C977) *
               C815 +
           (C32161 * C274 - C812 * C260 + C32149 * C992 - C813 * C981 +
            C32126 * C995 - C814 * C987) *
               C809 +
           (C32161 * C261 - C812 * C245 + C32149 * C982 - C813 * C975 +
            C32126 * C988 - C814 * C978) *
               C816 +
           (C32161 * C275 - C812 * C262 + C32149 * C993 - C813 * C983 +
            C32126 * C996 - C814 * C989) *
               C810 +
           (C32161 * C263 - C812 * C246 + C32149 * C984 - C813 * C976 +
            C32126 * C990 - C814 * C979) *
               C817 +
           (C32161 * C276 - C812 * C264 + C32149 * C994 - C813 * C985 +
            C32126 * C997 - C814 * C991) *
               C32115) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
            C32126 * C259 - C5250 * C244) *
               C5251 +
           (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
            C32126 * C274 - C5250 * C260) *
               C32158 +
           (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
           (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
           C5299 * C5253 + C5300 * C32115) *
              C31854 * C31813 * C31799 * C110 +
          ((C5256 - C5255 + C5258 - C5257 + C5260 - C5259) * C5251 +
           (C5262 - C5261 + C5264 - C5263 + C5266 - C5265) * C32158 +
           (C5268 - C5267 + C5270 - C5269 + C5272 - C5271) * C5252 +
           (C5274 - C5273 + C5276 - C5275 + C5278 - C5277) * C32145 +
           (C5279 - C5280 + C5281 - C5282 + C5283 - C5284) * C5253 +
           (C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C32115) *
              C31854 * C31813 * C31799 * C111 +
          (C5299 * C5251 + C5300 * C32158 +
           (C5280 - C5279 + C5282 - C5281 + C5284 - C5283) * C5252 +
           (C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C32145 +
           (C5242 * C134 - C5248 * C123 + C5243 * C257 - C5249 * C243 +
            C32126 * C267 - C5250 * C248) *
               C5253 +
           (C5242 * C144 - C5248 * C135 + C5243 * C273 - C5249 * C258 +
            C32126 * C278 - C5250 * C268) *
               C32115) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C5242 * C126 - C5248 * C119 + C5243 * C249 - C5249 * C239 +
            C32126 * C259 - C5250 * C244) *
               C5251 +
           (C5242 * C140 - C5248 * C127 + C5243 * C269 - C5249 * C250 +
            C32126 * C274 - C5250 * C260) *
               C32158 +
           (C5255 - C5256 + C5257 - C5258 + C5259 - C5260) * C5252 +
           (C5261 - C5262 + C5263 - C5264 + C5265 - C5266) * C32145 +
           C5299 * C5253 + C5300 * C32115) *
              C31854 * C31813 * C235 +
          ((C5248 * C239 - C5242 * C249 + C5249 * C244 - C5243 * C259 +
            C5250 * C974 - C32126 * C980) *
               C5251 +
           (C5248 * C250 - C5242 * C269 + C5249 * C260 - C5243 * C274 +
            C5250 * C981 - C32126 * C992) *
               C32158 +
           (C5248 * C240 - C5242 * C251 + C5249 * C245 - C5243 * C261 +
            C5250 * C975 - C32126 * C982) *
               C5252 +
           (C5248 * C252 - C5242 * C270 + C5249 * C262 - C5243 * C275 +
            C5250 * C983 - C32126 * C993) *
               C32145 +
           (C5248 * C241 - C5242 * C253 + C5249 * C246 - C5243 * C263 +
            C5250 * C976 - C32126 * C984) *
               C5253 +
           (C5248 * C254 - C5242 * C271 + C5249 * C264 - C5243 * C276 +
            C5250 * C985 - C32126 * C994) *
               C32115) *
              C31854 * C31813 * C236 +
          ((C5242 * C259 - C5248 * C244 + C5243 * C980 - C5249 * C974 +
            C32126 * C986 - C5250 * C977) *
               C5251 +
           (C5242 * C274 - C5248 * C260 + C5243 * C992 - C5249 * C981 +
            C32126 * C995 - C5250 * C987) *
               C32158 +
           (C5242 * C261 - C5248 * C245 + C5243 * C982 - C5249 * C975 +
            C32126 * C988 - C5250 * C978) *
               C5252 +
           (C5242 * C275 - C5248 * C262 + C5243 * C993 - C5249 * C983 +
            C32126 * C996 - C5250 * C989) *
               C32145 +
           (C5242 * C263 - C5248 * C246 + C5243 * C984 - C5249 * C976 +
            C32126 * C990 - C5250 * C979) *
               C5253 +
           (C5242 * C276 - C5248 * C264 + C5243 * C994 - C5249 * C985 +
            C32126 * C997 - C5250 * C991) *
               C32115) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
            C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
            C6072 * C986 - C6078 * C977) *
               C6079 +
           (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
            C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
            C6072 * C995 - C6078 * C987) *
               C31752) *
              C31854 * C31813 * C31799 * C110 +
          ((C6074 * C120 - C6068 * C128 + C6075 * C240 - C6069 * C251 +
            C6076 * C245 - C6070 * C261 + C6077 * C975 - C6071 * C982 +
            C6078 * C978 - C6072 * C988) *
               C6079 +
           (C6074 * C129 - C6068 * C141 + C6075 * C252 - C6069 * C270 +
            C6076 * C262 - C6070 * C275 + C6077 * C983 - C6071 * C993 +
            C6078 * C989 - C6072 * C996) *
               C31752) *
              C31854 * C31813 * C31799 * C111 +
          ((C6068 * C130 - C6074 * C121 + C6069 * C253 - C6075 * C241 +
            C6070 * C263 - C6076 * C246 + C6071 * C984 - C6077 * C976 +
            C6072 * C990 - C6078 * C979) *
               C6079 +
           (C6068 * C142 - C6074 * C131 + C6069 * C271 - C6075 * C254 +
            C6070 * C276 - C6076 * C264 + C6071 * C994 - C6077 * C985 +
            C6072 * C997 - C6078 * C991) *
               C31752) *
              C31854 * C31813 * C31799 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C6068 * C126 - C6074 * C119 + C6069 * C249 - C6075 * C239 +
            C6070 * C259 - C6076 * C244 + C6071 * C980 - C6077 * C974 +
            C6072 * C986 - C6078 * C977) *
               C6079 +
           (C6068 * C140 - C6074 * C127 + C6069 * C269 - C6075 * C250 +
            C6070 * C274 - C6076 * C260 + C6071 * C992 - C6077 * C981 +
            C6072 * C995 - C6078 * C987) *
               C31752) *
              C31854 * C31813 * C235 +
          ((C6074 * C239 - C6068 * C249 + C6075 * C244 - C6069 * C259 +
            C6076 * C974 - C6070 * C980 + C6077 * C977 - C6071 * C986 +
            C6078 * C6142 - C6072 * C6144) *
               C6079 +
           (C6074 * C250 - C6068 * C269 + C6075 * C260 - C6069 * C274 +
            C6076 * C981 - C6070 * C992 + C6077 * C987 - C6071 * C995 +
            C6078 * C6145 - C6072 * C6148) *
               C31752) *
              C31854 * C31813 * C236 +
          ((C6068 * C259 - C6074 * C244 + C6069 * C980 - C6075 * C974 +
            C6070 * C986 - C6076 * C977 + C6071 * C6144 - C6077 * C6142 +
            C6072 * C6146 - C6078 * C6143) *
               C6079 +
           (C6068 * C274 - C6074 * C260 + C6069 * C992 - C6075 * C981 +
            C6070 * C995 - C6076 * C987 + C6071 * C6148 - C6077 * C6145 +
            C6072 * C6149 - C6078 * C6147) *
               C31752) *
              C31854 * C31813 * C237) *
         C31787) /
            (p * q * std::sqrt(p + q));
}
