/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ddsd_AB_yx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_2202_12_21(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C30832 = 0 * ae;
    const double C30831 = ae * be;
    const double C30830 = 0 * be;
    const double C30829 = 0 * be;
    const double C30828 = ae + be;
    const double C30827 = 0 * be;
    const double C30826 = xA - xB;
    const double C30887 = 0 * be;
    const double C30914 = 0 * be;
    const double C30913 = yA - yB;
    const double C30965 = 0 * ae;
    const double C30960 = 0 * be;
    const double C30959 = 0 * be;
    const double C31010 = 0 * be;
    const double C31074 = xP - xQ;
    const double C31073 = yP - yQ;
    const double C31072 = p + q;
    const double C31071 = p * q;
    const double C31079 = bs[3];
    const double C31089 = bs[4];
    const double C31098 = bs[5];
    const double C31112 = bs[6];
    const double C31134 = bs[7];
    const double C31243 = zP - zQ;
    const double C31406 = bs[2];
    const double C119 = bs[0];
    const double C31804 = ce + de;
    const double C31803 = ce * de;
    const double C31802 = xC - xD;
    const double C31816 = yC - yD;
    const double C31830 = zC - zD;
    const double C31871 = zA - zB;
    const double C30839 = C30832 / C30828;
    const double C30836 = C30830 / C30828;
    const double C30834 = 2 * C30828;
    const double C30833 = std::pow(C30828, 2);
    const double C30838 = C30831 * C30826;
    const double C30837 = C30826 * C30830;
    const double C30835 = C30826 * C30829;
    const double C31768 = C30826 * be;
    const double C31767 = C30826 * ae;
    const double C31766 = std::pow(C30826, 2);
    const double C30888 = C30887 / C30828;
    const double C30961 = C30914 / C30828;
    const double C30915 = C30831 * C30913;
    const double C30962 = C30913 * C30914;
    const double C31860 = std::pow(C30913, 2);
    const double C31915 = C30913 * be;
    const double C31913 = C30913 * ae;
    const double C30972 = C30965 / C30828;
    const double C30967 = C30913 * C30960;
    const double C31011 = C31010 / C30828;
    const double C31099 = std::pow(C31074, 2);
    const double C31159 = C31074 * be;
    const double C31081 = C31073 * ae;
    const double C31080 = C31073 * C31074;
    const double C31255 = std::pow(C31073, 2);
    const double C31075 = 2 * C31071;
    const double C31277 = std::pow(C31243, 2);
    const double C32110 = 2 * C31804;
    const double C32109 = std::pow(C31804, 2);
    const double C31805 = std::pow(C31802, 2);
    const double C32108 = C31802 * ce;
    const double C31817 = std::pow(C31816, 2);
    const double C32111 = C31816 * ce;
    const double C31831 = std::pow(C31830, 2);
    const double C32112 = C31830 * ce;
    const double C31872 = std::pow(C31871, 2);
    const double C31955 = C31871 * be;
    const double C31953 = C31871 * ae;
    const double C31780 = std::pow(C30834, -1);
    const double C32103 = std::pow(C30834, -2);
    const double C30840 = 2 * C30833;
    const double C140 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (yP - yQ) * (xP - xQ) * ae * be) /
                        C30833;
    const double C32107 = C30833 * C30834;
    const double C32106 = 4 * C30833;
    const double C30842 = C30837 / C30828;
    const double C30841 = C30835 / C30828;
    const double C32096 = std::pow(C31767, 2);
    const double C31769 = C31766 * C30831;
    const double C30970 = C30962 / C30828;
    const double C31861 = C31860 * C30831;
    const double C32113 = std::pow(C31913, 2);
    const double C30973 = C30967 / C30828;
    const double C31162 = C31089 * C31159;
    const double C31166 = C31098 * C31159;
    const double C31176 = C31079 * C31159;
    const double C31189 = C31112 * C31159;
    const double C31206 = C31134 * C31159;
    const double C31084 = C31079 * C31081;
    const double C31091 = C31089 * C31081;
    const double C31101 = C31098 * C31081;
    const double C31116 = C31112 * C31081;
    const double C31140 = C31134 * C31081;
    const double C31083 = C31080 * ae;
    const double C31076 = C31075 / C31072;
    const double C126 = (-(bs[1] * C31159 * C31075) / C31072) / C30828;
    const double C131 = (-(bs[1] * C31081 * C31075) / C31072) / C30828;
    const double C120 = -(C31074 * bs[1] * C31075) / C31072;
    const double C213 = -(C31073 * bs[1] * C31075) / C31072;
    const double C318 = -(C31243 * bs[1] * C31075) / C31072;
    const double C32143 = std::pow(C32110, -2);
    const double C32141 = std::pow(C32110, -1);
    const double C31806 = C31805 * C31803;
    const double C31818 = C31817 * C31803;
    const double C31832 = C31831 * C31803;
    const double C31873 = C31872 * C30831;
    const double C32115 = std::pow(C31953, 2);
    const double C30849 = C30830 / C30840;
    const double C30846 = C30829 / C30840;
    const double C30845 = C30827 / C30840;
    const double C30964 = C30914 / C30840;
    const double C30969 = C30960 / C30840;
    const double C30968 = C30959 / C30840;
    const double C32140 = 4 * C32107;
    const double C32139 = C30828 * C32106;
    const double C30847 = 0 - C30842;
    const double C30844 = 0 - C30841;
    const double C31770 = C31769 / C30828;
    const double C30974 = 0 - C30970;
    const double C31862 = C31861 / C30828;
    const double C30977 = 0 - C30973;
    const double C31085 = C31083 * be;
    const double C31078 = -C31076;
    const double C31088 = std::pow(C31076, 4);
    const double C31111 = std::pow(C31076, 6);
    const double C141 =
        (be * std::pow(C31076, 2) * bs[2] * C31073 * ae +
         C31074 * std::pow(-C31076, 3) * bs[3] * C31073 * C31074 * ae * be) /
        C30833;
    const double C31405 = std::pow(C31076, 2);
    const double C127 =
        (C31074 * std::pow(C31076, 2) * bs[2] * C31159) / C30828 -
        (be * bs[1] * C31075) / (C31072 * C30828);
    const double C31807 = C31806 / C31804;
    const double C31819 = C31818 / C31804;
    const double C31833 = C31832 / C31804;
    const double C31874 = C31873 / C30828;
    const double C30852 = C30847 * ae;
    const double C30851 = C30844 * ae;
    const double C31771 = -C31770;
    const double C30978 = C30974 * ae;
    const double C31863 = -C31862;
    const double C30981 = C30977 * ae;
    const double C31090 = C31089 * C31085;
    const double C31100 = C31098 * C31085;
    const double C31114 = C31112 * C31085;
    const double C31138 = C31134 * C31085;
    const double C31082 = std::pow(C31078, 3);
    const double C31097 = std::pow(C31078, 5);
    const double C31133 = std::pow(C31078, 7);
    const double C31093 = C31088 * C31091;
    const double C31163 = C31089 * C31088;
    const double C31164 = C31088 * C31162;
    const double C31119 = C31111 * C31116;
    const double C31193 = C31111 * C31189;
    const double C31207 = C31112 * C31111;
    const double C31407 = C31406 * C31405;
    const double C132 = (C31074 * C31405 * C31406 * C31081) / C30828;
    const double C223 = (C31073 * C31405 * C31406 * C31159) / C30828;
    const double C228 = (C31073 * C31405 * C31406 * C31081) / C30828 -
                        (ae * bs[1] * C31075) / (C31072 * C30828);
    const double C328 = (C31243 * C31405 * C31406 * C31159) / C30828;
    const double C333 = (C31243 * C31405 * C31406 * C31081) / C30828;
    const double C31808 = -C31807;
    const double C31820 = -C31819;
    const double C31834 = -C31833;
    const double C31875 = -C31874;
    const double C30856 = C30852 / C30828;
    const double C30855 = C30851 / C30828;
    const double C31772 = std::exp(C31771);
    const double C30982 = C30978 / C30828;
    const double C31864 = std::exp(C31863);
    const double C30985 = C30981 / C30828;
    const double C31092 = C31088 * C31090;
    const double C31118 = C31111 * C31114;
    const double C31086 = C31082 * C31084;
    const double C31160 = C31079 * C31082;
    const double C31177 = C31082 * C31176;
    const double C243 = (ae * std::pow(C31076, 2) * bs[2] * C31074 * be +
                         C31073 * C31082 * C31079 * C31085) /
                        C30833;
    const double C348 = ((zP - zQ) * C31082 * C31079 * C31085) / C30833;
    const double C31103 = C31097 * C31101;
    const double C31102 = C31097 * C31100;
    const double C31169 = C31098 * C31097;
    const double C31170 = C31097 * C31166;
    const double C31143 = C31133 * C31140;
    const double C31142 = C31133 * C31138;
    const double C31209 = C31133 * C31206;
    const double C31096 = be * C31093;
    const double C31095 = C31074 * C31093;
    const double C31492 = C31073 * C31093;
    const double C31168 = C31074 * C31163;
    const double C31167 = C31163 * be;
    const double C31411 = C31163 * C31099;
    const double C31495 = C31163 * C31255;
    const double C31566 = C31073 * C31163;
    const double C31565 = C31163 * ae;
    const double C31748 = C31163 * C31277;
    const double C31751 = C31243 * C31163;
    const double C31179 = C31074 * C31164;
    const double C31253 = ae * C31164;
    const double C31252 = C31073 * C31164;
    const double C31121 = C31119 * C31099;
    const double C31132 = be * C31119;
    const double C31131 = C31074 * C31119;
    const double C31580 = C31073 * C31119;
    const double C31649 = C31119 * C31277;
    const double C31195 = C31074 * C31193;
    const double C31306 = C31193 * C31255;
    const double C31320 = ae * C31193;
    const double C31319 = C31073 * C31193;
    const double C31348 = C31193 * C31277;
    const double C31377 = C31243 * C31193;
    const double C31212 = C31207 * C31099;
    const double C31211 = C31074 * C31207;
    const double C31210 = C31207 * be;
    const double C31584 = C31207 * C31255;
    const double C121 = C31407 * C31099 - (bs[1] * C31075) / C31072;
    const double C214 = C31073 * C31074 * C31407;
    const double C218 = C31407 * C31255 - (bs[1] * C31075) / C31072;
    const double C319 = C31243 * C31074 * C31407;
    const double C323 = C31407 * C31277 - (bs[1] * C31075) / C31072;
    const double C618 = C31243 * C31073 * C31407;
    const double C31809 = std::exp(C31808);
    const double C31821 = std::exp(C31820);
    const double C31835 = std::exp(C31834);
    const double C31876 = std::exp(C31875);
    const double C30860 = C30856 - C30846;
    const double C30859 = C30855 - C30845;
    const double C6057 = C31772 * C223;
    const double C6805 = C31772 * C328;
    const double C30843 = C30838 * C31772;
    const double C31774 = C31772 * C31767;
    const double C31773 = C31772 / C30834;
    const double C31782 = C31780 * C31772;
    const double C32099 = C31772 * C31768;
    const double C32137 = C32103 * C31772;
    const double C32131 = C31772 * C32096;
    const double C30986 = C30982 - C30969;
    const double C30916 = C30915 * C31864;
    const double C118 = -(2 * C30831 * (yA - yB) * C31864) / C30828;
    const double C31914 = C31864 / C30834;
    const double C31916 = C31864 * C31913;
    const double C31923 = C31780 * C31864;
    const double C32119 = C31864 * C31915;
    const double C32148 = C32103 * C31864;
    const double C32146 = C31864 * C32113;
    const double C30989 = C30985 - C30968;
    const double C353 =
        (C31082 * C31079 * C31085 + C31092 * std::pow(zP - zQ, 2)) / C30833;
    const double C31120 = C31074 * C31118;
    const double C31305 = C31073 * C31118;
    const double C31340 = C31243 * C31118;
    const double C31345 = C31118 * C31277;
    const double C142 = (C31082 * C31079 * C31085 + be * C31074 * C31086 +
                         C31074 * (be * C31086 + C31074 * std::pow(C31076, 4) *
                                                     bs[4] * C31085)) /
                        C30833;
    const double C143 =
        (2 * (be * C31086 + C31074 * C31092) +
         be * (C31086 + C31093 * std::pow(C31074, 2)) +
         C31074 * (C31092 + be * C31074 * C31093 +
                   C31074 * (be * C31093 +
                             C31074 * std::pow(C31078, 5) * bs[5] * C31085))) /
        C30833;
    const double C244 = (ae * (C31074 * C31082 * C31079 * C31074 * be +
                               bs[2] * std::pow(C31076, 2) * be) +
                         C31073 * (be * C31086 + C31074 * C31092)) /
                        C30833;
    const double C349 = ((zP - zQ) * (be * C31086 + C31074 * C31092)) / C30833;
    const double C133 = (C31405 * C31406 * C31081 + C31086 * C31099) / C30828;
    const double C134 =
        (2 * C31074 * C31086 + C31074 * (C31086 + C31093 * C31099)) / C30828;
    const double C229 =
        (C31073 * C31074 * C31086 + C31074 * C31407 * ae) / C30828;
    const double C238 =
        (C31405 * C31406 * C31081 + C31073 * (C31073 * C31086 + C31407 * ae) +
         C31073 * C31407 * ae) /
        C30828;
    const double C334 = (C31243 * C31074 * C31086) / C30828;
    const double C335 = (C31243 * (C31086 + C31093 * C31099)) / C30828;
    const double C343 = (C31405 * C31406 * C31081 + C31086 * C31277) / C30828;
    const double C628 = (C31243 * (C31073 * C31086 + C31407 * ae)) / C30828;
    const double C1934 =
        (2 * C31243 * C31086 + C31243 * (C31086 + C31093 * C31277)) / C30828;
    const double C31180 = C31160 * be;
    const double C31410 = C31074 * C31160;
    const double C31494 = C31073 * C31160;
    const double C31493 = C31160 * ae;
    const double C230 = (C31073 * (C31086 + C31093 * C31099) +
                         (C31407 + C31160 * C31099) * ae) /
                        C30828;
    const double C879 =
        (2 * (C31073 * C31086 + C31407 * ae) +
         C31073 * (C31086 + C31073 * (C31073 * C31093 + C31160 * ae) +
                   C31073 * C31160 * ae) +
         (C31407 + C31160 * C31255) * ae) /
        C30828;
    const double C122 =
        2 * C31074 * C31407 + C31074 * (C31407 + C31160 * C31099);
    const double C215 = C31073 * (C31407 + C31160 * C31099);
    const double C320 = C31243 * (C31407 + C31160 * C31099);
    const double C870 =
        2 * C31073 * C31407 + C31073 * (C31407 + C31160 * C31255);
    const double C1050 = C31243 * (C31407 + C31160 * C31255);
    const double C1925 =
        2 * C31243 * C31407 + C31243 * (C31407 + C31160 * C31277);
    const double C1928 =
        3 * (C31407 + C31160 * C31277) +
        C31243 * (2 * C31243 * C31160 + C31243 * (C31160 + C31163 * C31277));
    const double C248 = (C31082 * C31079 * C31085 + ae * C31073 * C31177 +
                         C31073 * (ae * C31177 + C31073 * C31092)) /
                        C30833;
    const double C633 =
        (ae * C31243 * C31177 + C31073 * C31243 * C31092) / C30833;
    const double C128 =
        (C31405 * C31406 * C31159 + C31074 * (C31074 * C31177 + C31407 * be) +
         C31074 * C31407 * be) /
        C30828;
    const double C224 = (C31073 * (C31074 * C31177 + C31407 * be)) / C30828;
    const double C233 = (C31405 * C31406 * C31159 + C31177 * C31255) / C30828;
    const double C329 = (C31243 * (C31074 * C31177 + C31407 * be)) / C30828;
    const double C338 = (C31405 * C31406 * C31159 + C31177 * C31277) / C30828;
    const double C623 = (C31243 * C31073 * C31177) / C30828;
    const double C876 =
        (2 * C31073 * C31177 + C31073 * (C31177 + C31164 * C31255)) / C30828;
    const double C1059 = (C31243 * (C31177 + C31164 * C31255)) / C30828;
    const double C1931 =
        (2 * C31243 * C31177 + C31243 * (C31177 + C31164 * C31277)) / C30828;
    const double C6059 = C31772 * C243;
    const double C6807 = C31772 * C348;
    const double C31105 = C31103 * C31099;
    const double C31110 = be * C31103;
    const double C31109 = C31074 * C31103;
    const double C31564 = C31073 * C31103;
    const double C31641 = C31103 * C31277;
    const double C31648 = C31243 * C31103;
    const double C1940 =
        (3 * (C31086 + C31093 * C31277) +
         C31243 * (2 * C31243 * C31093 + C31243 * (C31093 + C31103 * C31277))) /
        C30828;
    const double C31104 = C31074 * C31102;
    const double C31254 = C31073 * C31102;
    const double C31286 = C31243 * C31102;
    const double C888 = (2 * (ae * C31177 + C31073 * C31092) +
                         ae * (C31177 + C31164 * std::pow(C31073, 2)) +
                         C31073 * (C31092 + ae * C31073 * C31164 +
                                   C31073 * (ae * C31164 + C31073 * C31102))) /
                        C30833;
    const double C1080 = (ae * (C31177 + C31164 * C31277) +
                          C31073 * (C31092 + C31102 * C31277)) /
                         C30833;
    const double C1943 =
        (2 * C31243 * C31092 + C31243 * (C31092 + C31102 * C31277)) / C30833;
    const double C31171 = C31169 * C31099;
    const double C31191 = C31074 * C31169;
    const double C31190 = C31169 * be;
    const double C31567 = C31169 * C31255;
    const double C31582 = C31073 * C31169;
    const double C31581 = C31169 * ae;
    const double C31752 = C31169 * C31277;
    const double C31172 = C31074 * C31170;
    const double C31257 = C31170 * C31255;
    const double C31304 = ae * C31170;
    const double C31303 = C31073 * C31170;
    const double C31339 = C31243 * C31170;
    const double C31638 = C31170 * C31277;
    const double C1937 =
        (3 * (C31177 + C31164 * C31277) +
         C31243 * (2 * C31243 * C31164 + C31243 * (C31164 + C31170 * C31277))) /
        C30828;
    const double C31145 = C31143 * C31099;
    const double C31144 = C31074 * C31142;
    const double C31321 = C31073 * C31142;
    const double C31349 = C31142 * C31277;
    const double C31378 = C31243 * C31142;
    const double C31213 = C31074 * C31209;
    const double C31323 = C31209 * C31255;
    const double C344 = (C31074 * C31086 + C31095 * C31277) / C30828;
    const double C31184 = C31168 * be;
    const double C31419 = 2 * C31168;
    const double C31501 = C31073 * C31168;
    const double C31500 = C31168 * ae;
    const double C31412 = C31160 + C31411;
    const double C31497 = C31160 + C31495;
    const double C31571 = 2 * C31566;
    const double C31569 = C31566 * ae;
    const double C31749 = C31160 + C31748;
    const double C31753 = 2 * C31751;
    const double C1077 =
        (C31243 * C31092 + ae * C31243 * C31252 +
         C31073 * (ae * C31243 * C31164 + C31073 * C31243 * C31102)) /
        C30833;
    const double C1083 =
        (C31092 + C31102 * C31277 + ae * (C31252 + C31073 * C31170 * C31277) +
         C31073 * (ae * (C31164 + C31170 * C31277) +
                   C31073 * (C31102 + C31118 * C31277))) /
        C30833;
    const double C1065 = (C31073 * C31177 + C31252 * C31277) / C30828;
    const double C31123 = C31103 + C31121;
    const double C31139 = 2 * C31131;
    const double C31137 = be * C31131;
    const double C31608 = C31073 * C31131;
    const double C31660 = C31131 * C31277;
    const double C31651 = C31103 + C31649;
    const double C31310 = C31170 + C31306;
    const double C31327 = 2 * C31319;
    const double C31325 = ae * C31319;
    const double C31376 = C31243 * C31319;
    const double C31663 = C31319 * C31277;
    const double C31350 = C31170 + C31348;
    const double C31380 = ae * C31377;
    const double C31215 = C31169 + C31212;
    const double C31214 = C31211 * be;
    const double C31611 = C31211 * C31255;
    const double C31588 = C31169 + C31584;
    const double C32142 = C31809 * C32108;
    const double C110 =
        (C31809 * std::pow(C32108, 2)) / C32109 + C31809 / C32110;
    const double C112 = C32143 * C31809;
    const double C443 = C32141 * C31809;
    const double C32144 = C31821 * C32111;
    const double C209 =
        (C31821 * std::pow(C32111, 2)) / C32109 + C31821 / C32110;
    const double C211 = C32143 * C31821;
    const double C441 = C32141 * C31821;
    const double C32145 = C31835 * C32112;
    const double C315 =
        (C31835 * std::pow(C32112, 2)) / C32109 + C31835 / C32110;
    const double C317 = C32143 * C31835;
    const double C531 = C32141 * C31835;
    const double C31954 = C31876 / C30834;
    const double C31956 = C31876 * C31953;
    const double C31963 = C31780 * C31876;
    const double C32125 = C31876 * C31955;
    const double C32151 = C32103 * C31876;
    const double C32149 = C31876 * C32115;
    const double C30865 = C30860 / C30834;
    const double C30864 = C30826 * C30860;
    const double C30863 = C30859 + C30836;
    const double C30850 = C30843 / C30833;
    const double C30848 = 2 * C30843;
    const double C31775 = C31774 * C31768;
    const double C31781 = C31774 / C30840;
    const double C32100 = C31780 * C31774;
    const double C32098 = C31774 / C30828;
    const double C748 = (C31772 * std::pow(C31768, 2)) / C30833 + C31773;
    const double C31783 = C31782 * C31768;
    const double C32104 = C31767 * C31782;
    const double C32102 = 2 * C31782;
    const double C32152 = C31782 / C32106;
    const double C105 = C31782 / C32140;
    const double C17324 = C31782 / C30834;
    const double C32133 = C32099 / C30828;
    const double C749 = (-2 * C31780 * C32099) / C30828;
    const double C32165 = C32131 / C30833;
    const double C30991 = C30986 / C30834;
    const double C30990 = C30913 * C30986;
    const double C30942 = 2 * C30916;
    const double C30966 = C30916 / C30833;
    const double C759 =
        ((0 * ae) / C30828 - C30916 / C30833) / C30834 + (0 * ae) / C30828;
    const double C2600 =
        ((C31864 - (C30913 * 2 * C30916) / C30828) * ae) / C30828 -
        C30914 / C30840;
    const double C2601 = (0 * ae) / C30828 - C30916 / C30833;
    const double C5151 = (C31864 * std::pow(C31915, 2)) / C30833 + C31914;
    const double C31917 = C31916 * C31915;
    const double C31922 = C31916 / C30840;
    const double C32117 = C31916 / C30828;
    const double C32114 = C31780 * C31916;
    const double C758 =
        (((C31864 - (C30913 * 2 * C30916) / C30828) * ae) / C30828 -
         C30914 / C30840) /
            C30834 +
        ((C30913 * ((0 * ae) / C30828 - C30916 / C30833) + C31923) * ae) /
            C30828;
    const double C31924 = C31923 * C31915;
    const double C32123 = C31913 * C31923;
    const double C32122 = 2 * C31923;
    const double C32158 = C31923 / C32106;
    const double C5979 = C31923 / C32140;
    const double C17327 = C31923 / C30834;
    const double C32154 = C32119 / C30828;
    const double C5152 = (-2 * C31780 * C32119) / C30828;
    const double C32170 = C32146 / C30833;
    const double C30995 = C30989 + C30961;
    const double C6811 = C31772 * C353;
    const double C31342 = C31073 * C31340;
    const double C31394 = 2 * C31340;
    const double C31346 = C31102 + C31345;
    const double C6246 = C31772 * C244;
    const double C7538 = C31782 * C244;
    const double C15502 = C31782 * C244;
    const double C7159 = C31772 * C349;
    const double C8562 = C31782 * C349;
    const double C16536 = C31782 * C349;
    const double C31181 = C31179 + C31180;
    const double C239 =
        (C31074 * C31086 + C31073 * (C31073 * C31095 + C31410 * ae) +
         C31073 * C31410 * ae) /
        C30828;
    const double C629 = (C31243 * (C31073 * C31095 + C31410 * ae)) / C30828;
    const double C219 = C31074 * C31407 + C31410 * C31255;
    const double C324 = C31074 * C31407 + C31410 * C31277;
    const double C619 = C31243 * C31073 * C31410;
    const double C871 =
        2 * C31073 * C31410 + C31073 * (C31410 + C31168 * C31255);
    const double C1051 = C31243 * (C31410 + C31168 * C31255);
    const double C1926 =
        2 * C31243 * C31410 + C31243 * (C31410 + C31168 * C31277);
    const double C1053 = C31073 * C31407 + C31494 * C31277;
    const double C2468 =
        2 * C31243 * C31494 + C31243 * (C31494 + C31566 * C31277);
    const double C31496 = C31492 + C31493;
    const double C6063 = C31772 * C248;
    const double C6434 = C31772 * C633;
    const double C6244 = C31772 * C224;
    const double C7534 = C31782 * C224;
    const double C15498 = C31782 * C224;
    const double C6061 = C31772 * C233;
    const double C7157 = C31772 * C329;
    const double C8558 = C31782 * C329;
    const double C16532 = C31782 * C329;
    const double C6809 = C31772 * C338;
    const double C6432 = C31772 * C623;
    const double C6065 = C31772 * C876;
    const double C6436 = C31772 * C1059;
    const double C6818 = C31772 * C1931;
    const double C31107 = C31093 + C31105;
    const double C31122 = C31110 + C31120;
    const double C31115 = 2 * C31109;
    const double C31113 = be * C31109;
    const double C31499 = C31073 * C31109;
    const double C880 =
        (2 * (C31073 * C31095 + C31410 * ae) +
         C31073 * (C31095 + C31073 * (C31073 * C31109 + C31168 * ae) +
                   C31073 * C31168 * ae) +
         (C31410 + C31168 * C31255) * ae) /
        C30828;
    const double C1935 =
        (2 * C31243 * C31095 + C31243 * (C31095 + C31109 * C31277)) / C30828;
    const double C1941 =
        (3 * (C31095 + C31109 * C31277) +
         C31243 * (2 * C31243 * C31109 + C31243 * (C31109 + C31131 * C31277))) /
        C30828;
    const double C31568 = C31564 + C31565;
    const double C31642 = C31093 + C31641;
    const double C31650 = 2 * C31648;
    const double C31106 = C31096 + C31104;
    const double C31256 = C31253 + C31254;
    const double C1946 =
        (3 * (C31092 + C31102 * C31277) +
         C31243 * (2 * C31286 + C31243 * (C31102 + C31118 * C31277))) /
        C30833;
    const double C2477 =
        (ae * (2 * C31243 * C31164 + C31243 * (C31164 + C31170 * C31277)) +
         C31073 * (2 * C31286 + C31243 * (C31102 + C31118 * C31277))) /
        C30833;
    const double C6067 = C31772 * C888;
    const double C6671 = C31772 * C1080;
    const double C6820 = C31772 * C1943;
    const double C31173 = C31163 + C31171;
    const double C31194 = C31191 * be;
    const double C31208 = 2 * C31191;
    const double C31502 = C31191 * C31255;
    const double C31610 = C31073 * C31191;
    const double C31609 = C31191 * ae;
    const double C31759 = C31191 * C31277;
    const double C1929 =
        3 * (C31410 + C31168 * C31277) +
        C31243 * (2 * C31243 * C31168 + C31243 * (C31168 + C31191 * C31277));
    const double C31196 = C31195 + C31190;
    const double C31570 = C31163 + C31567;
    const double C31589 = 2 * C31582;
    const double C31587 = C31582 * ae;
    const double C31762 = C31582 * C31277;
    const double C6793 =
        3 * (C31494 + C31566 * C31277) +
        C31243 * (2 * C31243 * C31566 + C31243 * (C31566 + C31582 * C31277));
    const double C31586 = C31580 + C31581;
    const double C31754 = C31163 + C31752;
    const double C31174 = C31172 + C31167;
    const double C31258 = C31164 + C31257;
    const double C31308 = C31304 + C31305;
    const double C31309 = 2 * C31303;
    const double C31307 = ae * C31303;
    const double C2471 =
        (2 * C31243 * C31252 + C31243 * (C31252 + C31303 * C31277)) / C30828;
    const double C6797 =
        (3 * (C31252 + C31303 * C31277) +
         C31243 * (2 * C31243 * C31303 + C31243 * (C31303 + C31319 * C31277))) /
        C30828;
    const double C31341 = ae * C31339;
    const double C31644 = 2 * C31339;
    const double C31639 = C31164 + C31638;
    const double C11742 = C31772 * C1937;
    const double C31147 = C31119 + C31145;
    const double C31146 = C31132 + C31144;
    const double C31326 = C31320 + C31321;
    const double C31351 = C31118 + C31349;
    const double C31381 = C31073 * C31378;
    const double C31216 = C31213 + C31210;
    const double C31328 = C31193 + C31323;
    const double C1054 = C31073 * C31410 + C31501 * C31277;
    const double C123 = 3 * (C31407 + C31160 * C31099) +
                        C31074 * (2 * C31410 + C31074 * C31412);
    const double C216 = C31073 * (2 * C31410 + C31074 * C31412);
    const double C220 = C31407 + C31160 * C31099 + C31412 * C31255;
    const double C321 = C31243 * (2 * C31410 + C31074 * C31412);
    const double C325 = C31407 + C31160 * C31099 + C31412 * C31277;
    const double C620 = C31243 * C31073 * C31412;
    const double C873 = 3 * (C31407 + C31160 * C31255) +
                        C31073 * (2 * C31494 + C31073 * C31497);
    const double C1056 = C31407 + C31160 * C31255 + C31497 * C31277;
    const double C1556 = C31243 * (2 * C31494 + C31073 * C31497);
    const double C11729 =
        4 * (2 * C31243 * C31160 + C31243 * C31749) +
        C31243 * (3 * C31749 + C31243 * (2 * C31243 * C31163 +
                                         C31243 * (C31163 + C31169 * C31277)));
    const double C6438 = C31772 * C1077;
    const double C6675 = C31772 * C1083;
    const double C6669 = C31772 * C1065;
    const double C31125 = C31074 * C31123;
    const double C31135 = 3 * C31123;
    const double C31130 = be * C31123;
    const double C31506 = C31073 * C31123;
    const double C31141 = C31118 + C31137;
    const double C31661 = C31109 + C31660;
    const double C31652 = C31243 * C31651;
    const double C31313 = C31073 * C31310;
    const double C31322 = 3 * C31310;
    const double C31318 = ae * C31310;
    const double C31329 = C31118 + C31325;
    const double C31379 = ae * C31376;
    const double C31664 = C31303 + C31663;
    const double C31352 = ae * C31350;
    const double C31645 = C31243 * C31350;
    const double C31218 = C31074 * C31215;
    const double C31217 = C31215 * be;
    const double C31509 = C31215 * C31255;
    const double C31614 = C31191 + C31611;
    const double C31591 = C31073 * C31588;
    const double C111 = (2 * C32141 * C32142) / C31804;
    const double C442 = C32142 / C31804;
    const double C210 = (2 * C32141 * C32144) / C31804;
    const double C440 = C32144 / C31804;
    const double C316 = (2 * C32141 * C32145) / C31804;
    const double C530 = C32145 / C31804;
    const double C10013 = (C31876 * std::pow(C31955, 2)) / C30833 + C31954;
    const double C31957 = C31956 * C31955;
    const double C31962 = C31956 / C30840;
    const double C32118 = C31956 / C30828;
    const double C32116 = C31780 * C31956;
    const double C31964 = C31963 * C31955;
    const double C32129 = C31953 * C31963;
    const double C32128 = 2 * C31963;
    const double C32164 = C31963 / C32106;
    const double C11604 = C31963 / C32140;
    const double C23828 = C31963 / C30834;
    const double C32160 = C32125 / C30828;
    const double C10014 = (-2 * C31780 * C32125) / C30828;
    const double C32172 = C32149 / C30833;
    const double C30869 = C30864 + 0;
    const double C30868 = C30863 / C30834;
    const double C30854 = C30839 - C30850;
    const double C30853 = C30826 * C30848;
    const double C756 =
        ((-C30848 / C30828) / C30834 - (0 * be) / C30828) / C30834 -
        (0 * be) / C30828;
    const double C5980 = -C30848 / C30828;
    const double C15392 = (-C30848 / C30828) / C30834 - (0 * be) / C30828;
    const double C31776 = C31775 / C30833;
    const double C32134 = 2 * C32100;
    const double C7552 = C32098 * C888;
    const double C7548 = C32098 * C876;
    const double C7544 = C32098 * C248;
    const double C7540 = C32098 * C233;
    const double C7536 = C32098 * C243;
    const double C7532 = C32098 * C223;
    const double C7809 = C32098 * C244;
    const double C7805 = C32098 * C224;
    const double C8101 = C32098 * C1077;
    const double C8097 = C32098 * C1059;
    const double C8093 = C32098 * C633;
    const double C8089 = C32098 * C623;
    const double C8585 = C32098 * C1083;
    const double C8577 = C32098 * C1080;
    const double C8573 = C32098 * C1065;
    const double C8569 = C32098 * C353;
    const double C8565 = C32098 * C338;
    const double C8560 = C32098 * C348;
    const double C8556 = C32098 * C328;
    const double C8997 = C32098 * C349;
    const double C8993 = C32098 * C329;
    const double C12480 = C32098 * C1943;
    const double C12476 = C32098 * C1931;
    const double C13411 = C32098 * C1937;
    const double C926 = C748 * C888;
    const double C920 = C748 * C876;
    const double C913 = C748 * C248;
    const double C907 = C748 * C233;
    const double C901 = C748 * C243;
    const double C895 = C748 * C223;
    const double C1244 = C748 * C244;
    const double C1238 = C748 * C224;
    const double C1588 = C748 * C1077;
    const double C1582 = C748 * C1059;
    const double C1576 = C748 * C633;
    const double C1570 = C748 * C623;
    const double C1981 = C748 * C1943;
    const double C1975 = C748 * C1931;
    const double C1968 = C748 * C353;
    const double C1962 = C748 * C338;
    const double C1956 = C748 * C348;
    const double C1950 = C748 * C328;
    const double C2306 = C748 * C349;
    const double C2300 = C748 * C329;
    const double C2488 = C748 * C1080;
    const double C2482 = C748 * C1065;
    const double C31784 = C31783 / C30828;
    const double C32138 = C32104 / C30840;
    const double C32166 = C32098 - C32133;
    const double C15385 = -C32133;
    const double C903 = C749 * C244;
    const double C897 = C749 * C224;
    const double C1958 = C749 * C349;
    const double C1952 = C749 * C329;
    const double C32180 = C32165 + C31773;
    const double C30996 = C30990 + 0;
    const double C30963 = C30913 * C30942;
    const double C5158 =
        ((-C30914 / C30828) / C30834 -
         ((C31864 - (C30913 * C30942) / C30828) * be) / C30828) /
            C30834 -
        ((C30913 * ((-C30942 / C30828) / C30834 - (0 * be) / C30828) + C31923) *
         be) /
            C30828;
    const double C5159 =
        ((-C30942 / C30828) / C30834 - (0 * be) / C30828) / C30834 -
        (0 * be) / C30828;
    const double C14636 = (-C30942 / C30828) / C30834 - (0 * be) / C30828;
    const double C30976 = C30972 - C30966;
    const double C31918 = C31917 / C30833;
    const double C757 =
        (((0 - (C30913 * C30914) / C30828) * ae) / C30828 - (0 * be) / C30840) /
            C30834 +
        ((C30913 * (((C31864 - (C30913 * 2 * C30916) / C30828) * ae) / C30828 -
                    C30914 / C30840) +
          C32117) *
         ae) /
            C30828 +
        (0 * ae) / C30828 - C30916 / C30833;
    const double C32147 = 2 * C32114;
    const double C31925 = C31924 / C30828;
    const double C32157 = C32123 / C30840;
    const double C32174 = C32117 - C32154;
    const double C14629 = -C32154;
    const double C32183 = C32170 + C31914;
    const double C30999 = C30995 / C30834;
    const double C129 =
        (2 * (C31074 * C31177 + C31407 * be) +
         C31074 * (C31177 + C31074 * C31181 + C31074 * C31160 * be) +
         (C31407 + C31160 * C31099) * be) /
        C30828;
    const double C225 =
        (C31073 * (C31177 + C31074 * C31181 + C31410 * be)) / C30828;
    const double C234 =
        (C31074 * C31177 + C31407 * be + C31181 * C31255) / C30828;
    const double C330 =
        (C31243 * (C31177 + C31074 * C31181 + C31410 * be)) / C30828;
    const double C339 =
        (C31074 * C31177 + C31407 * be + C31181 * C31277) / C30828;
    const double C624 = (C31243 * C31073 * C31181) / C30828;
    const double C885 =
        (3 * (C31086 + C31073 * C31496 + C31494 * ae) +
         C31073 * (2 * C31496 +
                   C31073 * (C31093 + C31073 * (C31073 * C31103 + C31163 * ae) +
                             C31073 * C31163 * ae) +
                   C31497 * ae) +
         (2 * C31494 + C31073 * C31497) * ae) /
        C30828;
    const double C1062 =
        (C31243 * (C31086 + C31073 * C31496 + C31494 * ae)) / C30828;
    const double C1068 =
        (C31073 * C31086 + C31407 * ae + C31496 * C31277) / C30828;
    const double C1074 = (C31086 + C31073 * C31496 + C31494 * ae +
                          (C31093 + C31073 * (C31073 * C31103 + C31163 * ae) +
                           C31073 * C31163 * ae) *
                              C31277) /
                         C30828;
    const double C1562 =
        (C31243 * (2 * C31496 +
                   C31073 * (C31093 + C31073 * (C31073 * C31103 + C31163 * ae) +
                             C31073 * C31163 * ae) +
                   C31497 * ae)) /
        C30828;
    const double C2474 =
        (2 * C31243 * C31496 +
         C31243 * (C31496 + (C31073 * C31103 + C31163 * ae) * C31277)) /
        C30828;
    const double C135 = (3 * (C31086 + C31093 * C31099) +
                         C31074 * (2 * C31095 + C31074 * C31107)) /
                        C30828;
    const double C231 = (C31073 * (2 * C31095 + C31074 * C31107) +
                         (2 * C31410 + C31074 * C31412) * ae) /
                        C30828;
    const double C240 =
        (C31086 + C31093 * C31099 + C31073 * (C31073 * C31107 + C31412 * ae) +
         C31073 * C31412 * ae) /
        C30828;
    const double C336 = (C31243 * (2 * C31095 + C31074 * C31107)) / C30828;
    const double C345 = (C31086 + C31093 * C31099 + C31107 * C31277) / C30828;
    const double C630 = (C31243 * (C31073 * C31107 + C31412 * ae)) / C30828;
    const double C1936 =
        (2 * C31243 * C31107 + C31243 * (C31107 + C31123 * C31277)) / C30828;
    const double C31124 = C31074 * C31122;
    const double C31129 = 2 * C31122;
    const double C31262 = C31073 * C31122;
    const double C31288 = C31243 * C31122;
    const double C31117 = C31102 + C31113;
    const double C31503 = C31499 + C31500;
    const double C31572 = C31073 * C31568;
    const double C31579 = 2 * C31568;
    const double C11732 =
        (4 * (2 * C31243 * C31093 + C31243 * C31642) +
         C31243 *
             (3 * C31642 + C31243 * (2 * C31243 * C31103 +
                                     C31243 * (C31103 + C31119 * C31277)))) /
        C30828;
    const double C144 =
        (3 * (C31092 + be * C31095 + C31074 * C31106) +
         be * (2 * C31095 + C31074 * C31107) +
         C31074 *
             (2 * C31106 + be * C31107 +
              C31074 * (C31102 + be * C31074 * C31103 +
                        C31074 * (be * C31103 + C31074 * std::pow(C31076, 6) *
                                                    bs[6] * C31085)))) /
        C30833;
    const double C245 =
        (ae * (C31082 * C31079 * C31159 +
               C31074 * (C31074 * C31088 * C31089 * C31159 + C31160 * be) +
               C31074 * C31160 * be) +
         C31073 * (C31092 + be * C31095 + C31074 * C31106)) /
        C30833;
    const double C249 = (be * C31086 + C31074 * C31092 + ae * C31073 * C31181 +
                         C31073 * (ae * C31181 + C31073 * C31106)) /
                        C30833;
    const double C350 =
        ((zP - zQ) * (C31092 + be * C31095 + C31074 * C31106)) / C30833;
    const double C354 =
        (be * C31086 + C31074 * C31092 + C31106 * std::pow(zP - zQ, 2)) /
        C30833;
    const double C634 =
        (ae * C31243 * C31181 + C31073 * C31243 * C31106) / C30833;
    const double C1944 =
        (2 * C31243 * C31106 + C31243 * (C31106 + C31122 * C31277)) / C30833;
    const double C11744 = C31772 * C1946;
    const double C13415 = C32098 * C1946;
    const double C6824 = C31772 * C2477;
    const double C12488 = C32098 * C2477;
    const double C31192 = C31173 * be;
    const double C31420 = C31074 * C31173;
    const double C31424 = 3 * C31173;
    const double C31508 = C31073 * C31173;
    const double C31507 = C31173 * ae;
    const double C881 =
        (2 * (C31073 * C31107 + C31412 * ae) +
         C31073 * (C31107 + C31073 * (C31073 * C31123 + C31173 * ae) +
                   C31073 * C31173 * ae) +
         (C31412 + C31173 * C31255) * ae) /
        C30828;
    const double C872 =
        2 * C31073 * C31412 + C31073 * (C31412 + C31173 * C31255);
    const double C1052 = C31243 * (C31412 + C31173 * C31255);
    const double C1927 =
        2 * C31243 * C31412 + C31243 * (C31412 + C31173 * C31277);
    const double C1930 =
        3 * (C31412 + C31173 * C31277) +
        C31243 * (2 * C31243 * C31173 + C31243 * (C31173 + C31215 * C31277));
    const double C31504 = C31168 + C31502;
    const double C31615 = 2 * C31610;
    const double C31613 = C31610 * ae;
    const double C2469 =
        2 * C31243 * C31501 + C31243 * (C31501 + C31610 * C31277);
    const double C11840 =
        3 * (C31501 + C31610 * C31277) +
        C31243 * (2 * C31243 * C31610 +
                  C31243 * (C31610 + C31073 * C31211 * C31277));
    const double C31612 = C31608 + C31609;
    const double C31760 = C31168 + C31759;
    const double C31197 = C31074 * C31196;
    const double C31205 = 2 * C31196;
    const double C31263 = C31196 * C31255;
    const double C31357 = ae * C31196;
    const double C31356 = C31073 * C31196;
    const double C31370 = C31243 * C31196;
    const double C31657 = C31196 * C31277;
    const double C31573 = C31073 * C31570;
    const double C31585 = 3 * C31570;
    const double C31583 = C31570 * ae;
    const double C6792 =
        2 * C31243 * C31497 + C31243 * (C31497 + C31570 * C31277);
    const double C6794 =
        3 * (C31497 + C31570 * C31277) +
        C31243 * (2 * C31243 * C31570 + C31243 * (C31570 + C31588 * C31277));
    const double C31763 = C31566 + C31762;
    const double C31590 = C31073 * C31586;
    const double C31666 = C31586 * C31277;
    const double C6798 =
        (3 * (C31496 + C31568 * C31277) +
         C31243 * (2 * C31243 * C31568 + C31243 * (C31568 + C31586 * C31277))) /
        C30828;
    const double C31755 = C31243 * C31754;
    const double C31183 = C31074 * C31174;
    const double C31188 = 2 * C31174;
    const double C31261 = ae * C31174;
    const double C31260 = C31073 * C31174;
    const double C889 = (2 * (ae * C31181 + C31073 * C31106) +
                         ae * (C31181 + C31174 * std::pow(C31073, 2)) +
                         C31073 * (C31106 + ae * C31073 * C31174 +
                                   C31073 * (ae * C31174 + C31073 * C31122))) /
                        C30833;
    const double C1081 = (ae * (C31181 + C31174 * C31277) +
                          C31073 * (C31106 + C31122 * C31277)) /
                         C30833;
    const double C877 =
        (2 * C31073 * C31181 + C31073 * (C31181 + C31174 * C31255)) / C30828;
    const double C1060 = (C31243 * (C31181 + C31174 * C31255)) / C30828;
    const double C1932 =
        (2 * C31243 * C31181 + C31243 * (C31181 + C31174 * C31277)) / C30828;
    const double C1938 =
        (3 * (C31181 + C31174 * C31277) +
         C31243 * (2 * C31243 * C31174 + C31243 * (C31174 + C31196 * C31277))) /
        C30828;
    const double C891 =
        (3 * (C31092 + ae * C31252 + C31073 * C31256) +
         ae * (2 * C31252 + C31073 * C31258) +
         C31073 * (2 * C31256 + ae * C31258 +
                   C31073 * (C31102 + ae * C31073 * C31170 +
                             C31073 * (ae * C31170 + C31073 * C31118)))) /
        C30833;
    const double C1565 =
        (2 * (ae * C31243 * C31164 + C31073 * C31286) + ae * C31243 * C31258 +
         C31073 *
             (C31286 + ae * C31243 * C31073 * C31170 +
              C31073 * (ae * C31243 * C31170 + C31073 * C31243 * C31118))) /
        C30833;
    const double C6154 =
        (2 * (ae * (C31164 + C31170 * C31277) + C31073 * C31346) +
         ae * (C31258 + C31310 * C31277) +
         C31073 * (C31346 + ae * (C31303 + C31319 * C31277) +
                   C31073 * (ae * (C31170 + C31193 * C31277) +
                             C31073 * (C31118 + C31142 * C31277)))) /
        C30833;
    const double C882 = (3 * (C31177 + C31164 * C31255) +
                         C31073 * (2 * C31252 + C31073 * C31258)) /
                        C30828;
    const double C1071 = (C31177 + C31164 * C31255 + C31258 * C31277) / C30828;
    const double C1559 = (C31243 * (2 * C31252 + C31073 * C31258)) / C30828;
    const double C6795 =
        (2 * C31243 * C31258 + C31243 * (C31258 + C31310 * C31277)) / C30828;
    const double C31312 = C31073 * C31308;
    const double C31317 = 2 * C31308;
    const double C31311 = C31102 + C31307;
    const double C6822 = C31772 * C2471;
    const double C12484 = C32098 * C2471;
    const double C12026 = C31772 * C6797;
    const double C31343 = C31341 + C31342;
    const double C11731 =
        (4 * (2 * C31243 * C31164 + C31243 * C31639) +
         C31243 * (3 * C31639 + C31243 * (2 * C31339 + C31243 * C31350))) /
        C30828;
    const double C31149 = C31074 * C31147;
    const double C1942 =
        (3 * (C31107 + C31123 * C31277) +
         C31243 * (2 * C31243 * C31123 + C31243 * (C31123 + C31147 * C31277))) /
        C30828;
    const double C31148 = C31074 * C31146;
    const double C31358 = C31073 * C31146;
    const double C31371 = C31243 * C31146;
    const double C31390 = C31146 * C31277;
    const double C31330 = C31073 * C31326;
    const double C31353 = C31073 * C31351;
    const double C31395 = C31243 * C31351;
    const double C6801 =
        (2 * C31286 + C31243 * C31346 +
         ae * (2 * C31243 * C31303 + C31243 * (C31303 + C31319 * C31277)) +
         C31073 * (ae * (2 * C31339 + C31243 * C31350) +
                   C31073 * (2 * C31340 + C31243 * C31351))) /
        C30833;
    const double C6802 =
        (ae * (3 * (C31164 + C31170 * C31277) +
               C31243 * (2 * C31339 + C31243 * C31350)) +
         C31073 * (3 * C31346 + C31243 * (2 * C31340 + C31243 * C31351))) /
        C30833;
    const double C6803 =
        (3 * C31346 + C31243 * (2 * C31340 + C31243 * C31351) +
         ae * (3 * (C31303 + C31319 * C31277) +
               C31243 * (2 * C31376 +
                         C31243 * (C31319 + C31073 * C31209 * C31277))) +
         C31073 * (ae * (3 * C31350 +
                         C31243 * (2 * C31377 +
                                   C31243 * (C31193 + C31209 * C31277))) +
                   C31073 * (3 * C31351 +
                             C31243 * (2 * C31378 +
                                       C31243 * (C31142 + std::pow(C31076, 8) *
                                                              bs[8] * C31085 *
                                                              C31277))))) /
        C30833;
    const double C31383 = C31380 + C31381;
    const double C31219 = C31074 * C31216;
    const double C31359 = C31216 * C31255;
    const double C31331 = C31073 * C31328;
    const double C6799 =
        (3 * (C31258 + C31310 * C31277) +
         C31243 * (2 * C31243 * C31310 + C31243 * (C31310 + C31328 * C31277))) /
        C30828;
    const double C31127 = C31115 + C31125;
    const double C11928 =
        (4 * (2 * C31243 * C31109 + C31243 * C31661) +
         C31243 * (3 * C31661 +
                   C31243 * (2 * C31243 * C31131 +
                             C31243 * (C31131 + C31074 * C31143 * C31277)))) /
        C30828;
    const double C31653 = C31650 + C31652;
    const double C31315 = C31309 + C31313;
    const double C31382 = C31340 + C31379;
    const double C12021 =
        (4 * (2 * C31243 * C31303 + C31243 * C31664) +
         C31243 * (3 * C31664 +
                   C31243 * (2 * C31376 +
                             C31243 * (C31319 + C31073 * C31209 * C31277)))) /
        C30828;
    const double C31646 = C31644 + C31645;
    const double C31220 = C31208 + C31218;
    const double C31511 = C31173 + C31509;
    const double C31617 = C31073 * C31614;
    const double C31593 = C31589 + C31591;
    const double C31958 = C31957 / C30833;
    const double C32150 = 2 * C32116;
    const double C31965 = C31964 / C30828;
    const double C32163 = C32129 / C30840;
    const double C32177 = C32118 - C32160;
    const double C20324 = -C32160;
    const double C32184 = C32172 + C31954;
    const double C30872 = C30869 * be;
    const double C7555 = C30854 * C880;
    const double C7551 = C30854 * C871;
    const double C7547 = C30854 * C239;
    const double C7543 = C30854 * C219;
    const double C7539 = C30854 * C229;
    const double C7535 = C30854 * C214;
    const double C7814 = C30854 * C220;
    const double C7810 = C30854 * C230;
    const double C7806 = C30854 * C215;
    const double C8098 = C30854 * C1051;
    const double C8094 = C30854 * C629;
    const double C8090 = C30854 * C619;
    const double C8574 = C30854 * C1054;
    const double C8570 = C30854 * C344;
    const double C8566 = C30854 * C324;
    const double C8563 = C30854 * C334;
    const double C8559 = C30854 * C319;
    const double C8784 = C30854 * C620;
    const double C8998 = C30854 * C335;
    const double C8994 = C30854 * C320;
    const double C12481 = C30854 * C1935;
    const double C12477 = C30854 * C1926;
    const double C12900 = C30854 * C325;
    const double C13416 = C30854 * C1941;
    const double C13412 = C30854 * C1929;
    const double C30858 = C30826 * C30854;
    const double C30886 = C30854 / C30834;
    const double C30857 = C30853 / C30828;
    const double C912 = C756 * C220;
    const double C906 = C756 * C230;
    const double C900 = C756 * C215;
    const double C1241 = C756 * C216;
    const double C1573 = C756 * C620;
    const double C1967 = C756 * C325;
    const double C1961 = C756 * C335;
    const double C1955 = C756 * C320;
    const double C2303 = C756 * C321;
    const double C6070 = C5980 * C873;
    const double C6068 = C5980 * C879;
    const double C6066 = C5980 * C870;
    const double C6064 = C5980 * C238;
    const double C6062 = C5980 * C218;
    const double C6060 = C5980 * C228;
    const double C6058 = C5980 * C213;
    const double C6253 = C5980 * C880;
    const double C6251 = C5980 * C871;
    const double C6249 = C5980 * C239;
    const double C6247 = C5980 * C219;
    const double C6245 = C5980 * C229;
    const double C6243 = C5980 * C214;
    const double C6439 = C5980 * C1556;
    const double C6435 = C5980 * C1050;
    const double C6433 = C5980 * C628;
    const double C6431 = C5980 * C618;
    const double C6674 = C5980 * C1056;
    const double C6670 = C5980 * C1053;
    const double C6821 = C5980 * C2468;
    const double C6819 = C5980 * C1934;
    const double C6817 = C5980 * C1925;
    const double C6812 = C5980 * C343;
    const double C6810 = C5980 * C323;
    const double C6808 = C5980 * C333;
    const double C6806 = C5980 * C318;
    const double C6998 = C5980 * C1054;
    const double C6994 = C5980 * C1051;
    const double C6992 = C5980 * C629;
    const double C6990 = C5980 * C619;
    const double C7162 = C5980 * C344;
    const double C7160 = C5980 * C324;
    const double C7158 = C5980 * C334;
    const double C7156 = C5980 * C319;
    const double C11746 = C5980 * C11729;
    const double C11745 = C5980 * C1940;
    const double C11743 = C5980 * C1928;
    const double C11937 = C5980 * C1941;
    const double C11935 = C5980 * C1929;
    const double C11933 = C5980 * C1935;
    const double C11931 = C5980 * C1926;
    const double C12025 = C5980 * C6793;
    const double C15519 = C15392 * C880;
    const double C15515 = C15392 * C871;
    const double C15511 = C15392 * C239;
    const double C15507 = C15392 * C219;
    const double C15503 = C15392 * C229;
    const double C15499 = C15392 * C214;
    const double C15778 = C15392 * C220;
    const double C15774 = C15392 * C230;
    const double C15770 = C15392 * C215;
    const double C16062 = C15392 * C1051;
    const double C16058 = C15392 * C629;
    const double C16054 = C15392 * C619;
    const double C16371 = C15392 * C1054;
    const double C16556 = C15392 * C1935;
    const double C16552 = C15392 * C1926;
    const double C16545 = C15392 * C344;
    const double C16541 = C15392 * C324;
    const double C16537 = C15392 * C334;
    const double C16533 = C15392 * C319;
    const double C16777 = C15392 * C620;
    const double C16995 = C15392 * C325;
    const double C16991 = C15392 * C335;
    const double C16987 = C15392 * C320;
    const double C22291 = C15392 * C1941;
    const double C22287 = C15392 * C1929;
    const double C31777 = C31773 - C31776;
    const double C32167 = C32134 / C30828;
    const double C31785 = C31781 - C31784;
    const double C32181 = C32166 / C30834;
    const double C15516 = C15385 * C888;
    const double C15512 = C15385 * C876;
    const double C15508 = C15385 * C248;
    const double C15504 = C15385 * C233;
    const double C15500 = C15385 * C243;
    const double C15496 = C15385 * C223;
    const double C15773 = C15385 * C244;
    const double C15769 = C15385 * C224;
    const double C16065 = C15385 * C1077;
    const double C16061 = C15385 * C1059;
    const double C16057 = C15385 * C633;
    const double C16053 = C15385 * C623;
    const double C16381 = C15385 * C1083;
    const double C16372 = C15385 * C1080;
    const double C16368 = C15385 * C1065;
    const double C16563 = C15385 * C2477;
    const double C16559 = C15385 * C2471;
    const double C16555 = C15385 * C1943;
    const double C16551 = C15385 * C1931;
    const double C16542 = C15385 * C353;
    const double C16538 = C15385 * C338;
    const double C16534 = C15385 * C348;
    const double C16530 = C15385 * C328;
    const double C16990 = C15385 * C349;
    const double C16986 = C15385 * C329;
    const double C22290 = C15385 * C1946;
    const double C22286 = C15385 * C1937;
    const double C5302 = C32180 * C888;
    const double C5296 = C32180 * C876;
    const double C5289 = C32180 * C248;
    const double C5283 = C32180 * C233;
    const double C5277 = C32180 * C243;
    const double C5271 = C32180 * C223;
    const double C5580 = C32180 * C244;
    const double C5574 = C32180 * C224;
    const double C5908 = C32180 * C1077;
    const double C5902 = C32180 * C1059;
    const double C5896 = C32180 * C633;
    const double C5890 = C32180 * C623;
    const double C10268 = C32180 * C1943;
    const double C10262 = C32180 * C1931;
    const double C10255 = C32180 * C353;
    const double C10249 = C32180 * C338;
    const double C10243 = C32180 * C348;
    const double C10237 = C32180 * C328;
    const double C10585 = C32180 * C349;
    const double C10579 = C32180 * C329;
    const double C10755 = C32180 * C1080;
    const double C10749 = C32180 * C1065;
    const double C31000 = C30996 * be;
    const double C30971 = C30963 / C30828;
    const double C30980 = C30913 * C30976;
    const double C31009 = C30976 / C30834;
    const double C31919 = C31914 - C31918;
    const double C32171 = C32147 / C30828;
    const double C31926 = C31922 - C31925;
    const double C32185 = C32174 / C30834;
    const double C5157 =
        ((-(0 * be) / C30828) / C30834 -
         ((0 - (C30913 * C30914) / C30828) * be) / C30828) /
            C30834 -
        ((C30913 * ((-C30914 / C30828) / C30834 -
                    ((C31864 - (C30913 * C30942) / C30828) * be) / C30828) +
          C14629) *
         be) /
            C30828 +
        (-C30942 / C30828) / C30834 - (0 * be) / C30828;
    const double C899 = C32137 * C225;
    const double C1240 = C749 * C225;
    const double C5275 = C32137 * C225;
    const double C7807 = C31782 * C225;
    const double C15771 = C31782 * C225;
    const double C17449 = C17324 * C225;
    const double C909 = C749 * C234;
    const double C1250 = C748 * C234;
    const double C5586 = C32180 * C234;
    const double C6248 = C31772 * C234;
    const double C7542 = C31782 * C234;
    const double C7813 = C32098 * C234;
    const double C15506 = C31782 * C234;
    const double C15777 = C15385 * C234;
    const double C1954 = C32137 * C330;
    const double C2302 = C749 * C330;
    const double C8995 = C31782 * C330;
    const double C10241 = C32137 * C330;
    const double C16988 = C31782 * C330;
    const double C18529 = C17324 * C330;
    const double C1964 = C749 * C339;
    const double C2312 = C748 * C339;
    const double C7161 = C31772 * C339;
    const double C8567 = C31782 * C339;
    const double C10591 = C32180 * C339;
    const double C12899 = C32098 * C339;
    const double C16540 = C31782 * C339;
    const double C16994 = C15385 * C339;
    const double C1572 = C749 * C624;
    const double C4620 = C748 * C624;
    const double C6991 = C31772 * C624;
    const double C8091 = C31782 * C624;
    const double C8783 = C32098 * C624;
    const double C16055 = C31782 * C624;
    const double C16776 = C15385 * C624;
    const double C26185 = C32180 * C624;
    const double C6072 = C5980 * C885;
    const double C6437 = C5980 * C1062;
    const double C6672 = C5980 * C1068;
    const double C6676 = C5980 * C1074;
    const double C6441 = C5980 * C1562;
    const double C6823 = C5980 * C2474;
    const double C1247 = C756 * C231;
    const double C918 = C756 * C240;
    const double C7818 = C30854 * C240;
    const double C15782 = C15392 * C240;
    const double C2309 = C756 * C336;
    const double C1973 = C756 * C345;
    const double C12904 = C30854 * C345;
    const double C16999 = C15392 * C345;
    const double C1579 = C756 * C630;
    const double C8788 = C30854 * C630;
    const double C16781 = C15392 * C630;
    const double C1984 = C756 * C1936;
    const double C13690 = C30854 * C1936;
    const double C22565 = C15392 * C1936;
    const double C31136 = C31129 + C31130;
    const double C1947 =
        (3 * (C31106 + C31122 * C31277) +
         C31243 * (2 * C31288 + C31243 * (C31122 + C31146 * C31277))) /
        C30833;
    const double C2478 =
        (ae * (2 * C31243 * C31174 + C31243 * (C31174 + C31196 * C31277)) +
         C31073 * (2 * C31288 + C31243 * (C31122 + C31146 * C31277))) /
        C30833;
    const double C31126 = C31117 + C31124;
    const double C1063 =
        (C31243 * (C31095 + C31073 * C31503 + C31501 * ae)) / C30828;
    const double C1069 =
        (C31073 * C31095 + C31410 * ae + C31503 * C31277) / C30828;
    const double C1075 = (C31095 + C31073 * C31503 + C31501 * ae +
                          (C31109 + C31073 * (C31073 * C31131 + C31191 * ae) +
                           C31073 * C31191 * ae) *
                              C31277) /
                         C30828;
    const double C2475 =
        (2 * C31243 * C31503 +
         C31243 * (C31503 + (C31073 * C31131 + C31191 * ae) * C31277)) /
        C30828;
    const double C31574 = C31093 + C31572;
    const double C11748 = C5980 * C11732;
    const double C905 = C32137 * C245;
    const double C1246 = C749 * C245;
    const double C5281 = C32137 * C245;
    const double C7811 = C31782 * C245;
    const double C15775 = C31782 * C245;
    const double C17455 = C17324 * C245;
    const double C915 = C749 * C249;
    const double C1256 = C748 * C249;
    const double C5592 = C32180 * C249;
    const double C6250 = C31772 * C249;
    const double C7546 = C31782 * C249;
    const double C7817 = C32098 * C249;
    const double C15510 = C31782 * C249;
    const double C15781 = C15385 * C249;
    const double C1960 = C32137 * C350;
    const double C2308 = C749 * C350;
    const double C8999 = C31782 * C350;
    const double C10247 = C32137 * C350;
    const double C16992 = C31782 * C350;
    const double C18535 = C17324 * C350;
    const double C1970 = C749 * C354;
    const double C2318 = C748 * C354;
    const double C7163 = C31772 * C354;
    const double C8571 = C31782 * C354;
    const double C10597 = C32180 * C354;
    const double C12903 = C32098 * C354;
    const double C16544 = C31782 * C354;
    const double C16998 = C15385 * C354;
    const double C1578 = C749 * C634;
    const double C4626 = C748 * C634;
    const double C6993 = C31772 * C634;
    const double C8095 = C31782 * C634;
    const double C8787 = C32098 * C634;
    const double C16059 = C31782 * C634;
    const double C16780 = C15385 * C634;
    const double C26191 = C32180 * C634;
    const double C1983 = C749 * C1944;
    const double C11934 = C31772 * C1944;
    const double C12482 = C31782 * C1944;
    const double C13689 = C32098 * C1944;
    const double C16557 = C31782 * C1944;
    const double C22564 = C15385 * C1944;
    const double C31421 = C31419 + C31420;
    const double C1055 = C31073 * C31412 + C31508 * C31277;
    const double C2470 =
        2 * C31243 * C31508 + C31243 * (C31508 + C31073 * C31215 * C31277);
    const double C31510 = C31506 + C31507;
    const double C929 = C756 * C881;
    const double C7826 = C30854 * C881;
    const double C15790 = C15392 * C881;
    const double C923 = C756 * C872;
    const double C7822 = C30854 * C872;
    const double C15786 = C15392 * C872;
    const double C1585 = C756 * C1052;
    const double C8792 = C30854 * C1052;
    const double C19827 = C15392 * C1052;
    const double C1978 = C756 * C1927;
    const double C13686 = C30854 * C1927;
    const double C22561 = C15392 * C1927;
    const double C886 =
        (3 * (C31095 + C31073 * C31503 + C31501 * ae) +
         C31073 * (2 * C31503 +
                   C31073 * (C31109 + C31073 * (C31073 * C31131 + C31191 * ae) +
                             C31073 * C31191 * ae) +
                   C31504 * ae) +
         (2 * C31501 + C31073 * C31504) * ae) /
        C30828;
    const double C1563 =
        (C31243 * (2 * C31503 +
                   C31073 * (C31109 + C31073 * (C31073 * C31131 + C31191 * ae) +
                             C31073 * C31191 * ae) +
                   C31504 * ae)) /
        C30828;
    const double C874 = 3 * (C31410 + C31168 * C31255) +
                        C31073 * (2 * C31501 + C31073 * C31504);
    const double C1057 = C31410 + C31168 * C31255 + C31504 * C31277;
    const double C1557 = C31243 * (2 * C31501 + C31073 * C31504);
    const double C7151 =
        2 * C31243 * C31504 + C31243 * (C31504 + C31614 * C31277);
    const double C12485 = C30854 * C2469;
    const double C14262 = C5980 * C2469;
    const double C16560 = C15392 * C2469;
    const double C31616 = C31073 * C31612;
    const double C11842 =
        (3 * (C31503 + C31612 * C31277) +
         C31243 * (2 * C31243 * C31612 +
                   C31243 * (C31612 + (C31073 * C31074 * C31143 + C31211 * ae) *
                                          C31277))) /
        C30828;
    const double C11926 =
        4 * (2 * C31243 * C31168 + C31243 * C31760) +
        C31243 * (3 * C31760 + C31243 * (2 * C31243 * C31191 +
                                         C31243 * (C31191 + C31211 * C31277)));
    const double C31198 = C31170 + C31197;
    const double C31265 = C31174 + C31263;
    const double C31362 = 2 * C31356;
    const double C31360 = ae * C31356;
    const double C31372 = ae * C31370;
    const double C31658 = C31174 + C31657;
    const double C31575 = C31571 + C31573;
    const double C6825 = C5980 * C6792;
    const double C12020 =
        4 * (2 * C31243 * C31566 + C31243 * C31763) +
        C31243 * (3 * C31763 +
                  C31243 * (2 * C31243 * C31582 +
                            C31243 * (C31582 + C31073 * C31207 * C31277)));
    const double C31592 = C31103 + C31590;
    const double C31667 = C31568 + C31666;
    const double C12027 = C5980 * C6798;
    const double C31756 = C31753 + C31755;
    const double C31185 = C31164 + C31183;
    const double C31264 = C31261 + C31262;
    const double C1078 =
        (C31243 * C31106 + ae * C31243 * C31260 +
         C31073 * (ae * C31243 * C31174 + C31073 * C31243 * C31122)) /
        C30833;
    const double C1084 =
        (C31106 + C31122 * C31277 + ae * (C31260 + C31073 * C31196 * C31277) +
         C31073 * (ae * (C31174 + C31196 * C31277) +
                   C31073 * (C31122 + C31146 * C31277))) /
        C30833;
    const double C1066 = (C31073 * C31181 + C31260 * C31277) / C30828;
    const double C2472 =
        (2 * C31243 * C31260 + C31243 * (C31260 + C31356 * C31277)) / C30828;
    const double C11841 =
        (3 * (C31260 + C31356 * C31277) +
         C31243 * (2 * C31243 * C31356 +
                   C31243 * (C31356 + C31073 * C31216 * C31277))) /
        C30828;
    const double C928 = C749 * C889;
    const double C6254 = C31772 * C889;
    const double C7554 = C31782 * C889;
    const double C7825 = C32098 * C889;
    const double C15518 = C31782 * C889;
    const double C15789 = C15385 * C889;
    const double C2490 = C749 * C1081;
    const double C7001 = C31772 * C1081;
    const double C8579 = C31782 * C1081;
    const double C12701 = C32098 * C1081;
    const double C16374 = C31782 * C1081;
    const double C16788 = C15385 * C1081;
    const double C922 = C749 * C877;
    const double C6252 = C31772 * C877;
    const double C7550 = C31782 * C877;
    const double C7821 = C32098 * C877;
    const double C15514 = C31782 * C877;
    const double C15785 = C15385 * C877;
    const double C1584 = C749 * C1060;
    const double C6995 = C31772 * C1060;
    const double C8099 = C31782 * C1060;
    const double C8791 = C32098 * C1060;
    const double C16063 = C31782 * C1060;
    const double C19826 = C15385 * C1060;
    const double C1977 = C749 * C1932;
    const double C11932 = C31772 * C1932;
    const double C12478 = C31782 * C1932;
    const double C13685 = C32098 * C1932;
    const double C16553 = C31782 * C1932;
    const double C22560 = C15385 * C1932;
    const double C11936 = C31772 * C1938;
    const double C13413 = C31782 * C1938;
    const double C22288 = C31782 * C1938;
    const double C6071 = C31772 * C891;
    const double C7561 = C32098 * C891;
    const double C15525 = C15385 * C891;
    const double C6442 = C31772 * C1565;
    const double C8109 = C32098 * C1565;
    const double C16073 = C15385 * C1565;
    const double C6680 = C31772 * C6154;
    const double C6069 = C31772 * C882;
    const double C7557 = C32098 * C882;
    const double C15521 = C15385 * C882;
    const double C6673 = C31772 * C1071;
    const double C8581 = C32098 * C1071;
    const double C16377 = C15385 * C1071;
    const double C6440 = C31772 * C1559;
    const double C8105 = C32098 * C1559;
    const double C16069 = C15385 * C1559;
    const double C6826 = C31772 * C6795;
    const double C31324 = C31317 + C31318;
    const double C31314 = C31311 + C31312;
    const double C11747 = C31772 * C11731;
    const double C31151 = C31139 + C31149;
    const double C31150 = C31141 + C31148;
    const double C31361 = C31357 + C31358;
    const double C31373 = C31073 * C31371;
    const double C31391 = C31122 + C31390;
    const double C31332 = C31329 + C31330;
    const double C31354 = C31352 + C31353;
    const double C31396 = C31394 + C31395;
    const double C6828 = C31772 * C6801;
    const double C12028 = C31772 * C6802;
    const double C31384 = C31073 * C31383;
    const double C31221 = C31193 + C31219;
    const double C31363 = C31196 + C31359;
    const double C31333 = C31327 + C31331;
    const double C137 = (4 * (2 * C31095 + C31074 * C31107) +
                         C31074 * (3 * C31107 + C31074 * C31127)) /
                        C30828;
    const double C337 = (C31243 * (3 * C31107 + C31074 * C31127)) / C30828;
    const double C346 =
        (2 * C31095 + C31074 * C31107 + C31127 * C31277) / C30828;
    const double C11734 =
        (5 * (3 * C31642 + C31243 * C31653) +
         C31243 * (4 * C31653 +
                   C31243 * (3 * C31651 +
                             C31243 * (2 * C31243 * C31119 +
                                       C31243 * (C31119 + C31143 * C31277))))) /
        C30828;
    const double C6153 =
        (3 * (C31286 + ae * C31243 * C31303 + C31073 * C31343) +
         ae * C31243 * C31315 +
         C31073 * (2 * C31343 + ae * C31243 * C31310 +
                   C31073 * (C31340 + ae * C31243 * C31319 +
                             C31073 * (ae * C31243 * C31193 +
                                       C31073 * C31243 * C31142)))) /
        C30833;
    const double C6050 = (4 * (2 * C31252 + C31073 * C31258) +
                          C31073 * (3 * C31258 + C31073 * C31315)) /
                         C30828;
    const double C6147 = (C31243 * (3 * C31258 + C31073 * C31315)) / C30828;
    const double C6149 =
        (2 * C31252 + C31073 * C31258 + C31315 * C31277) / C30828;
    const double C11733 =
        (5 * (3 * C31639 + C31243 * C31646) +
         C31243 * (4 * C31646 +
                   C31243 * (3 * C31350 +
                             C31243 * (2 * C31377 +
                                       C31243 * (C31193 + C31209 * C31277))))) /
        C30828;
    const double C31222 = C31220 * be;
    const double C31425 = C31074 * C31220;
    const double C875 = 3 * (C31412 + C31173 * C31255) +
                        C31073 * (2 * C31508 + C31073 * C31511);
    const double C1058 = C31412 + C31173 * C31255 + C31511 * C31277;
    const double C1558 = C31243 * (2 * C31508 + C31073 * C31511);
    const double C31619 = C31615 + C31617;
    const double C31595 = C31073 * C31593;
    const double C31959 = C31954 - C31958;
    const double C32173 = C32150 / C30828;
    const double C31966 = C31962 - C31965;
    const double C32187 = C32177 / C30834;
    const double C30874 = C30872 / C30828;
    const double C30862 = C30858 + C31782;
    const double C30889 = C30886 - C30888;
    const double C5156 = C30886 + (0 * ae) / C30828;
    const double C30861 = C31772 - C30857;
    const double C6080 = C6067 - C6068;
    const double C6079 = C6065 - C6066;
    const double C6078 = C6063 - C6064;
    const double C6077 = C6061 - C6062;
    const double C6667 = C6436 - C6435;
    const double C7318 = C6435 - C6436;
    const double C7317 = C6433 - C6434;
    const double C7315 = C6434 - C6433;
    const double C7316 = C6431 - C6432;
    const double C7314 = C6432 - C6431;
    const double C6813 = C6669 - C6670;
    const double C7320 = C6670 - C6669;
    const double C14122 = C6822 - C6821;
    const double C14526 = C6821 - C6822;
    const double C11741 = C6820 - C6819;
    const double C11740 = C6818 - C6817;
    const double C6830 = C6811 - C6812;
    const double C6829 = C6809 - C6810;
    const double C11754 = C11744 - C11745;
    const double C11753 = C11742 - C11743;
    const double C17476 = C31777 * C888;
    const double C17470 = C31777 * C876;
    const double C17463 = C31777 * C248;
    const double C17457 = C31777 * C233;
    const double C17451 = C31777 * C243;
    const double C17445 = C31777 * C223;
    const double C17766 = C31777 * C249;
    const double C17760 = C31777 * C234;
    const double C17754 = C31777 * C244;
    const double C17748 = C31777 * C224;
    const double C18082 = C31777 * C1077;
    const double C18076 = C31777 * C1059;
    const double C18070 = C31777 * C633;
    const double C18064 = C31777 * C623;
    const double C18556 = C31777 * C1080;
    const double C18550 = C31777 * C1065;
    const double C18544 = C31777 * C353;
    const double C18538 = C31777 * C338;
    const double C18531 = C31777 * C348;
    const double C18525 = C31777 * C328;
    const double C18762 = C31777 * C634;
    const double C18756 = C31777 * C624;
    const double C18968 = C31777 * C349;
    const double C18962 = C31777 * C329;
    const double C24063 = C31777 * C1943;
    const double C24057 = C31777 * C1931;
    const double C24374 = C31777 * C354;
    const double C24368 = C31777 * C339;
    const double C32097 = C31777 * C31767;
    const double C32136 = C32102 + C31777;
    const double C5304 = C32167 * C889;
    const double C5298 = C32167 * C877;
    const double C5291 = C32167 * C249;
    const double C5285 = C32167 * C234;
    const double C5279 = C32167 * C244;
    const double C5273 = C32167 * C224;
    const double C5582 = C32167 * C245;
    const double C5576 = C32167 * C225;
    const double C5904 = C32167 * C1060;
    const double C5898 = C32167 * C634;
    const double C5892 = C32167 * C624;
    const double C10270 = C32167 * C1944;
    const double C10264 = C32167 * C1932;
    const double C10257 = C32167 * C354;
    const double C10251 = C32167 * C339;
    const double C10245 = C32167 * C349;
    const double C10239 = C32167 * C329;
    const double C10587 = C32167 * C350;
    const double C10581 = C32167 * C330;
    const double C10757 = C32167 * C1081;
    const double C17478 = C31785 * C889;
    const double C17472 = C31785 * C877;
    const double C17465 = C31785 * C249;
    const double C17459 = C31785 * C234;
    const double C17453 = C31785 * C244;
    const double C17447 = C31785 * C224;
    const double C17756 = C31785 * C245;
    const double C17750 = C31785 * C225;
    const double C18078 = C31785 * C1060;
    const double C18072 = C31785 * C634;
    const double C18066 = C31785 * C624;
    const double C18558 = C31785 * C1081;
    const double C18546 = C31785 * C354;
    const double C18540 = C31785 * C339;
    const double C18533 = C31785 * C349;
    const double C18527 = C31785 * C329;
    const double C18970 = C31785 * C350;
    const double C18964 = C31785 * C330;
    const double C24065 = C31785 * C1944;
    const double C24059 = C31785 * C1932;
    const double C32105 = C31785 / C30834;
    const double C32101 = C31785 * C31767;
    const double C2590 = C32181 - (C31777 * C31768) / C30828;
    const double C31002 = C31000 / C30828;
    const double C30975 = C31864 - C30971;
    const double C30984 = C30980 + C31923;
    const double C31012 = C31009 - C31011;
    const double C32120 = C31919 * C31913;
    const double C32156 = C32122 + C31919;
    const double C32124 = C31926 / C30834;
    const double C32121 = C31926 * C31913;
    const double C7423 = C32185 - (C31919 * C31915) / C30828;
    const double C7565 = C7542 - C7543;
    const double C15529 = C15506 - C15507;
    const double C12468 = C8567 - C8566;
    const double C16567 = C16540 - C16541;
    const double C9199 = C8090 - C8091;
    const double C9195 = C8091 - C8090;
    const double C17200 = C16054 - C16055;
    const double C17196 = C16055 - C16054;
    const double C6668 = C6438 - C6437;
    const double C7319 = C6437 - C6438;
    const double C6814 = C6671 - C6672;
    const double C7321 = C6672 - C6671;
    const double C6682 = C6675 - C6676;
    const double C7323 = C6676 - C6675;
    const double C14123 = C6824 - C6823;
    const double C14527 = C6823 - C6824;
    const double C11938 = C31772 * C1947;
    const double C13417 = C31782 * C1947;
    const double C22292 = C31782 * C1947;
    const double C12490 = C31782 * C2478;
    const double C14265 = C31772 * C2478;
    const double C16565 = C31782 * C2478;
    const double C145 =
        (4 * (2 * C31106 + be * C31107 + C31074 * C31126) +
         be * (3 * C31107 + C31074 * C31127) +
         C31074 * (3 * C31126 + be * C31127 +
                   C31074 * (2 * C31122 + be * C31123 +
                             C31074 * (C31118 + be * C31074 * C31119 +
                                       C31074 * (be * C31119 +
                                                 C31074 * std::pow(C31078, 7) *
                                                     bs[7] * C31085))))) /
        C30833;
    const double C246 =
        (ae * (2 * (C31074 * C31164 + C31160 * be) +
               C31074 *
                   (C31164 +
                    C31074 * (C31074 * C31097 * C31098 * C31159 + C31163 * be) +
                    C31074 * C31163 * be) +
               (C31160 + C31163 * C31099) * be) +
         C31073 * (2 * C31106 + be * C31107 + C31074 * C31126)) /
        C30833;
    const double C351 =
        ((zP - zQ) * (2 * C31106 + be * C31107 + C31074 * C31126)) / C30833;
    const double C355 = (C31092 + be * C31095 + C31074 * C31106 +
                         C31126 * std::pow(zP - zQ, 2)) /
                        C30833;
    const double C6996 = C5980 * C1063;
    const double C8102 = C30854 * C1063;
    const double C16066 = C15392 * C1063;
    const double C7000 = C5980 * C1069;
    const double C8578 = C30854 * C1069;
    const double C16375 = C15392 * C1069;
    const double C7004 = C5980 * C1075;
    const double C8586 = C30854 * C1075;
    const double C16382 = C15392 * C1075;
    const double C12489 = C30854 * C2475;
    const double C14264 = C5980 * C2475;
    const double C16564 = C15392 * C2475;
    const double C31576 = C31574 + C31569;
    const double C7567 = C7546 - C7547;
    const double C15531 = C15510 - C15511;
    const double C12470 = C8571 - C8570;
    const double C16569 = C16544 - C16545;
    const double C9201 = C8094 - C8095;
    const double C9197 = C8095 - C8094;
    const double C17202 = C16058 - C16059;
    const double C17198 = C16059 - C16058;
    const double C13409 = C12482 - C12481;
    const double C22284 = C16557 - C16556;
    const double C232 = (C31073 * (3 * C31107 + C31074 * C31127) +
                         (3 * C31412 + C31074 * C31421) * ae) /
                        C30828;
    const double C241 =
        (2 * C31095 + C31074 * C31107 +
         C31073 * (C31073 * C31127 + C31421 * ae) + C31073 * C31421 * ae) /
        C30828;
    const double C631 = (C31243 * (C31073 * C31127 + C31421 * ae)) / C30828;
    const double C124 = 4 * (2 * C31410 + C31074 * C31412) +
                        C31074 * (3 * C31412 + C31074 * C31421);
    const double C217 = C31073 * (3 * C31412 + C31074 * C31421);
    const double C221 = 2 * C31410 + C31074 * C31412 + C31421 * C31255;
    const double C322 = C31243 * (3 * C31412 + C31074 * C31421);
    const double C326 = 2 * C31410 + C31074 * C31412 + C31421 * C31277;
    const double C621 = C31243 * C31073 * C31421;
    const double C1232 =
        2 * C31073 * C31421 + C31073 * (C31421 + C31220 * C31255);
    const double C1406 = C31243 * (C31421 + C31220 * C31255);
    const double C2144 = C31073 * C31421 + C31073 * C31220 * C31277;
    const double C2294 =
        2 * C31243 * C31421 + C31243 * (C31421 + C31220 * C31277);
    const double C2485 = C756 * C1055;
    const double C12698 = C30854 * C1055;
    const double C16785 = C15392 * C1055;
    const double C887 =
        (3 * (C31107 + C31073 * C31510 + C31508 * ae) +
         C31073 * (2 * C31510 +
                   C31073 * (C31123 + C31073 * (C31073 * C31147 + C31215 * ae) +
                             C31073 * C31215 * ae) +
                   C31511 * ae) +
         (2 * C31508 + C31073 * C31511) * ae) /
        C30828;
    const double C1064 =
        (C31243 * (C31107 + C31073 * C31510 + C31508 * ae)) / C30828;
    const double C1070 =
        (C31073 * C31107 + C31412 * ae + C31510 * C31277) / C30828;
    const double C1076 = (C31107 + C31073 * C31510 + C31508 * ae +
                          (C31123 + C31073 * (C31073 * C31147 + C31215 * ae) +
                           C31073 * C31215 * ae) *
                              C31277) /
                         C30828;
    const double C1564 =
        (C31243 * (2 * C31510 +
                   C31073 * (C31123 + C31073 * (C31073 * C31147 + C31215 * ae) +
                             C31073 * C31215 * ae) +
                   C31511 * ae)) /
        C30828;
    const double C2476 =
        (2 * C31243 * C31510 +
         C31243 * (C31510 + (C31073 * C31147 + C31215 * ae) * C31277)) /
        C30828;
    const double C6257 = C5980 * C886;
    const double C7562 = C30854 * C886;
    const double C15526 = C15392 * C886;
    const double C8110 = C30854 * C1563;
    const double C9640 = C5980 * C1563;
    const double C16074 = C15392 * C1563;
    const double C6255 = C5980 * C874;
    const double C7558 = C30854 * C874;
    const double C15522 = C15392 * C874;
    const double C7002 = C5980 * C1057;
    const double C8582 = C30854 * C1057;
    const double C16378 = C15392 * C1057;
    const double C8106 = C30854 * C1557;
    const double C9638 = C5980 * C1557;
    const double C16070 = C15392 * C1557;
    const double C31618 = C31109 + C31616;
    const double C31199 = C31198 + C31194;
    const double C1566 =
        (2 * (ae * C31243 * C31174 + C31073 * C31288) + ae * C31243 * C31265 +
         C31073 *
             (C31288 + ae * C31243 * C31073 * C31196 +
              C31073 * (ae * C31243 * C31196 + C31073 * C31243 * C31146))) /
        C30833;
    const double C883 = (3 * (C31181 + C31174 * C31255) +
                         C31073 * (2 * C31260 + C31073 * C31265)) /
                        C30828;
    const double C1072 = (C31181 + C31174 * C31255 + C31265 * C31277) / C30828;
    const double C1560 = (C31243 * (2 * C31260 + C31073 * C31265)) / C30828;
    const double C31364 = C31122 + C31360;
    const double C11927 =
        (4 * (2 * C31243 * C31174 + C31243 * C31658) +
         C31243 *
             (3 * C31658 +
              C31243 * (2 * C31370 + C31243 * (C31196 + C31216 * C31277)))) /
        C30828;
    const double C6048 = 4 * (2 * C31494 + C31073 * C31497) +
                         C31073 * (3 * C31497 + C31073 * C31575);
    const double C6144 = C31243 * (3 * C31497 + C31073 * C31575);
    const double C6145 = 2 * C31494 + C31073 * C31497 + C31575 * C31277;
    const double C7309 =
        2 * C31243 * C31575 + C31243 * (C31575 + C31593 * C31277);
    const double C31594 = C31592 + C31587;
    const double C12022 =
        (4 * (2 * C31243 * C31568 + C31243 * C31667) +
         C31243 * (3 * C31667 + C31243 * (2 * C31243 * C31586 +
                                          C31243 * (C31586 + (C31073 * C31143 +
                                                              C31207 * ae) *
                                                                 C31277)))) /
        C30828;
    const double C11730 =
        5 * (3 * C31749 + C31243 * C31756) +
        C31243 * (4 * C31756 +
                  C31243 * (3 * C31754 +
                            C31243 * (2 * C31243 * C31169 +
                                      C31243 * (C31169 + C31207 * C31277))));
    const double C31186 = C31185 + C31184;
    const double C892 =
        (3 * (C31106 + ae * C31260 + C31073 * C31264) +
         ae * (2 * C31260 + C31073 * C31265) +
         C31073 * (2 * C31264 + ae * C31265 +
                   C31073 * (C31122 + ae * C31073 * C31196 +
                             C31073 * (ae * C31196 + C31073 * C31146)))) /
        C30833;
    const double C1590 = C749 * C1078;
    const double C5910 = C32167 * C1078;
    const double C6997 = C31772 * C1078;
    const double C8103 = C31782 * C1078;
    const double C8795 = C32098 * C1078;
    const double C16067 = C31782 * C1078;
    const double C18084 = C31785 * C1078;
    const double C19830 = C15385 * C1078;
    const double C7005 = C31772 * C1084;
    const double C8587 = C31782 * C1084;
    const double C16383 = C31782 * C1084;
    const double C2484 = C749 * C1066;
    const double C6999 = C31772 * C1066;
    const double C8575 = C31782 * C1066;
    const double C10751 = C32167 * C1066;
    const double C12697 = C32098 * C1066;
    const double C16370 = C31782 * C1066;
    const double C16784 = C15385 * C1066;
    const double C18552 = C31785 * C1066;
    const double C12486 = C31782 * C2472;
    const double C14263 = C31772 * C2472;
    const double C16561 = C31782 * C2472;
    const double C7571 = C7554 - C7555;
    const double C15535 = C15518 - C15519;
    const double C7569 = C7550 - C7551;
    const double C15533 = C15514 - C15515;
    const double C8405 = C8099 - C8098;
    const double C9203 = C8098 - C8099;
    const double C19480 = C16063 - C16062;
    const double C20222 = C16062 - C16063;
    const double C13407 = C12478 - C12477;
    const double C22282 = C16553 - C16552;
    const double C6082 = C6071 - C6072;
    const double C9409 = C6442 - C6441;
    const double C9903 = C6441 - C6442;
    const double C6081 = C6069 - C6070;
    const double C6681 = C6673 - C6674;
    const double C7322 = C6674 - C6673;
    const double C9408 = C6440 - C6439;
    const double C9902 = C6439 - C6440;
    const double C6054 =
        (4 * (2 * C31256 + ae * C31258 + C31073 * C31314) +
         ae * (3 * C31258 + C31073 * C31315) +
         C31073 *
             (3 * C31314 + ae * C31315 +
              C31073 * (2 * C31308 + ae * C31310 +
                        C31073 * (C31118 + ae * C31073 * C31193 +
                                  C31073 * (ae * C31193 + C31073 * C31142))))) /
        C30833;
    const double C31153 = C31074 * C31151;
    const double C1234 =
        (2 * (C31073 * C31127 + C31421 * ae) +
         C31073 * (C31127 + C31073 * (C31073 * C31151 + C31220 * ae) +
                   C31073 * C31220 * ae) +
         (C31421 + C31220 * C31255) * ae) /
        C30828;
    const double C1408 =
        (C31243 * (C31127 + C31073 * (C31073 * C31151 + C31220 * ae) +
                   C31073 * C31220 * ae)) /
        C30828;
    const double C2146 = (C31073 * C31127 + C31421 * ae +
                          (C31073 * C31151 + C31220 * ae) * C31277) /
                         C30828;
    const double C2296 =
        (2 * C31243 * C31127 + C31243 * (C31127 + C31151 * C31277)) / C30828;
    const double C31152 = C31074 * C31150;
    const double C31269 = C31073 * C31150;
    const double C31290 = C31243 * C31150;
    const double C1945 =
        (2 * C31243 * C31126 + C31243 * (C31126 + C31150 * C31277)) / C30833;
    const double C31365 = C31073 * C31361;
    const double C31374 = C31372 + C31373;
    const double C7154 =
        (2 * C31288 + C31243 * C31391 +
         ae * (2 * C31243 * C31356 +
               C31243 * (C31356 + C31073 * C31216 * C31277)) +
         C31073 * (ae * (2 * C31370 + C31243 * (C31196 + C31216 * C31277)) +
                   C31073 * (2 * C31371 +
                             C31243 * (C31146 + (be * C31143 +
                                                 C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085) *
                                                    C31277)))) /
        C30833;
    const double C11843 =
        (ae * (3 * (C31174 + C31196 * C31277) +
               C31243 * (2 * C31370 + C31243 * (C31196 + C31216 * C31277))) +
         C31073 * (3 * C31391 +
                   C31243 * (2 * C31371 +
                             C31243 * (C31146 + (be * C31143 +
                                                 C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085) *
                                                    C31277)))) /
        C30833;
    const double C11929 =
        (4 * (2 * C31288 + C31243 * C31391) +
         C31243 * (3 * C31391 +
                   C31243 * (2 * C31371 +
                             C31243 * (C31146 + (be * C31143 +
                                                 C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085) *
                                                    C31277)))) /
        C30833;
    const double C31334 = C31073 * C31332;
    const double C7312 =
        (2 * (ae * (2 * C31339 + C31243 * C31350) + C31073 * C31396) +
         ae * (2 * C31243 * C31310 + C31243 * (C31310 + C31328 * C31277)) +
         C31073 *
             (C31396 +
              ae * (2 * C31376 + C31243 * (C31319 + C31073 * C31209 * C31277)) +
              C31073 *
                  (ae * (2 * C31377 + C31243 * (C31193 + C31209 * C31277)) +
                   C31073 * (2 * C31378 +
                             C31243 * (C31142 + std::pow(C31076, 8) * bs[8] *
                                                    C31085 * C31277))))) /
        C30833;
    const double C11735 = (4 * (2 * C31286 + C31243 * C31346) +
                           C31243 * (3 * C31346 + C31243 * C31396)) /
                          C30833;
    const double C11736 =
        (5 * (3 * C31346 + C31243 * C31396) +
         C31243 * (4 * C31396 +
                   C31243 * (3 * C31351 +
                             C31243 * (2 * C31378 +
                                       C31243 * (C31142 + std::pow(C31076, 8) *
                                                              bs[8] * C31085 *
                                                              C31277))))) /
        C30833;
    const double C12023 =
        (ae * (4 * (2 * C31339 + C31243 * C31350) +
               C31243 * (3 * C31350 +
                         C31243 * (2 * C31377 +
                                   C31243 * (C31193 + C31209 * C31277)))) +
         C31073 * (4 * C31396 +
                   C31243 * (3 * C31351 +
                             C31243 * (2 * C31378 +
                                       C31243 * (C31142 + std::pow(C31076, 8) *
                                                              bs[8] * C31085 *
                                                              C31277))))) /
        C30833;
    const double C31385 = C31382 + C31384;
    const double C31223 = C31221 + C31214;
    const double C31366 = C31073 * C31363;
    const double C6988 =
        (2 * (ae * (C31174 + C31196 * C31277) + C31073 * C31391) +
         ae * (C31265 + C31363 * C31277) +
         C31073 * (C31391 + ae * (C31356 + C31073 * C31216 * C31277) +
                   C31073 * (ae * (C31196 + C31216 * C31277) +
                             C31073 * (C31146 + (be * C31143 +
                                                 C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085) *
                                                    C31277)))) /
        C30833;
    const double C7152 =
        (2 * C31243 * C31265 + C31243 * (C31265 + C31363 * C31277)) / C30828;
    const double C31335 = C31073 * C31333;
    const double C6155 =
        (3 * (C31346 + ae * (C31303 + C31319 * C31277) + C31073 * C31354) +
         ae * (C31315 + C31333 * C31277) +
         C31073 * (2 * C31354 + ae * (C31310 + C31328 * C31277) +
                   C31073 * (C31351 + ae * (C31319 + C31073 * C31209 * C31277) +
                             C31073 * (ae * (C31193 + C31209 * C31277) +
                                       C31073 * (C31142 + std::pow(C31076, 8) *
                                                              bs[8] * C31085 *
                                                              C31277))))) /
        C30833;
    const double C7310 =
        (2 * C31243 * C31315 + C31243 * (C31315 + C31333 * C31277)) / C30828;
    const double C2321 = C756 * C346;
    const double C6446 = C31772 * C6153;
    const double C6074 = C31772 * C6050;
    const double C6444 = C31772 * C6147;
    const double C6678 = C31772 * C6149;
    const double C31426 = C31424 + C31425;
    const double C6238 = 4 * (2 * C31501 + C31073 * C31504) +
                         C31073 * (3 * C31504 + C31073 * C31619);
    const double C6340 = C31243 * (3 * C31504 + C31073 * C31619);
    const double C6985 = 2 * C31501 + C31073 * C31504 + C31619 * C31277;
    const double C31597 = C31585 + C31595;
    const double C32126 = C31959 * C31953;
    const double C32162 = C32128 + C31959;
    const double C32130 = C31966 / C30834;
    const double C32127 = C31966 * C31953;
    const double C13203 = C32187 - (C31959 * C31955) / C30828;
    const double C30877 = C30868 - C30874;
    const double C30867 = C30862 * be;
    const double C17479 = C30889 * C881;
    const double C17473 = C30889 * C872;
    const double C17468 = C30889 * C240;
    const double C17462 = C30889 * C220;
    const double C17456 = C30889 * C230;
    const double C17450 = C30889 * C215;
    const double C17757 = C30889 * C231;
    const double C17751 = C30889 * C216;
    const double C18079 = C30889 * C1052;
    const double C18073 = C30889 * C630;
    const double C18067 = C30889 * C620;
    const double C18553 = C30889 * C1055;
    const double C18547 = C30889 * C345;
    const double C18541 = C30889 * C325;
    const double C18536 = C30889 * C335;
    const double C18530 = C30889 * C320;
    const double C18971 = C30889 * C336;
    const double C18965 = C30889 * C321;
    const double C24066 = C30889 * C1936;
    const double C24060 = C30889 * C1927;
    const double C24377 = C30889 * C346;
    const double C117 =
        (C30889 / C30834 + (0 * ae) / C30828) / C30834 - (0 * be) / C30828;
    const double C2599 = C30889 / C30834 - (0 * be) / C30828;
    const double C14634 = C30889 / C30834 + (0 * ae) / C30828;
    const double C5305 = C5156 * C881;
    const double C5299 = C5156 * C872;
    const double C5294 = C5156 * C240;
    const double C5288 = C5156 * C220;
    const double C5282 = C5156 * C230;
    const double C5276 = C5156 * C215;
    const double C5583 = C5156 * C231;
    const double C5577 = C5156 * C216;
    const double C5905 = C5156 * C1052;
    const double C5899 = C5156 * C630;
    const double C5893 = C5156 * C620;
    const double C10271 = C5156 * C1936;
    const double C10265 = C5156 * C1927;
    const double C10260 = C5156 * C345;
    const double C10254 = C5156 * C325;
    const double C10248 = C5156 * C335;
    const double C10242 = C5156 * C320;
    const double C10600 = C5156 * C346;
    const double C10588 = C5156 * C336;
    const double C10582 = C5156 * C321;
    const double C10752 = C5156 * C1055;
    const double C30866 = C30861 * ae;
    const double C754 =
        ((-C30829 / C30828) / C30834 - (C30847 * be) / C30828) / C30834 -
        ((C30826 * ((-C30836) / C30834 - (C30861 * be) / C30828) + C15385) *
         be) /
            C30828 +
        (-C30848 / C30828) / C30834 - (0 * be) / C30828;
    const double C755 =
        ((-C30836) / C30834 - (C30861 * be) / C30828) / C30834 -
        ((C30826 * ((-C30848 / C30828) / C30834 - (0 * be) / C30828) + C31782) *
         be) /
            C30828;
    const double C15391 = (-C30836) / C30834 - (C30861 * be) / C30828;
    const double C6831 = C6813 * C5158;
    const double C11092 = C6813 * C758;
    const double C14118 = C6813 * C2601;
    const double C27584 = C6813 * C14636;
    const double C14126 = C14122 * C2601;
    const double C27588 = C14122 * C14636;
    const double C11752 = C11741 * C31864;
    const double C14121 = C11741 * C32117;
    const double C27587 = C11741 * C14629;
    const double C11751 = C11740 * C118;
    const double C14120 = C11740 * C2600;
    const double C6834 = C6830 * C5151;
    const double C11091 = C6830 * C32183;
    const double C11739 = C6830 * C31864;
    const double C14117 = C6830 * C32117;
    const double C27583 = C6830 * C14629;
    const double C30364 = C6830 * C31919;
    const double C6833 = C6829 * C5157;
    const double C11090 = C6829 * C757;
    const double C11738 = C6829 * C118;
    const double C14116 = C6829 * C2600;
    const double C11757 = C11754 * C31864;
    const double C11756 = C11753 * C118;
    const double C32132 = C32097 / C30828;
    const double C32168 = C32136 / C30834;
    const double C32169 = C32138 + C32105;
    const double C2592 = C32105 - C31783 / C30840;
    const double C32135 = C32101 / C30828;
    const double C2726 = C2590 * C248;
    const double C2718 = C2590 * C233;
    const double C2709 = C2590 * C243;
    const double C2701 = C2590 * C223;
    const double C2970 = C2590 * C244;
    const double C2962 = C2590 * C224;
    const double C3246 = C2590 * C633;
    const double C3238 = C2590 * C623;
    const double C3574 = C2590 * C353;
    const double C3566 = C2590 * C338;
    const double C3557 = C2590 * C348;
    const double C3549 = C2590 * C328;
    const double C3850 = C2590 * C349;
    const double C3842 = C2590 * C329;
    const double C31004 = C30999 - C31002;
    const double C30979 = C30975 * ae;
    const double C14635 = (-C30961) / C30834 - (C30975 * be) / C30828;
    const double C30988 = C30984 * be;
    const double C5985 =
        (C31012 / C30834 + (0 * ae) / C30828) / C30834 - (0 * be) / C30828;
    const double C7432 = C31012 / C30834 - (0 * be) / C30828;
    const double C15396 = C31012 / C30834 + (0 * ae) / C30828;
    const double C32153 = C32120 / C30828;
    const double C32175 = C32156 / C30834;
    const double C32176 = C32157 + C32124;
    const double C7425 = C32124 - C31924 / C30840;
    const double C32155 = C32121 / C30828;
    const double C6832 = C6814 * C5152;
    const double C11093 = C6814 * C32171;
    const double C14119 = C6814 * C31923;
    const double C27585 = C6814 * C31923;
    const double C30366 = C6814 * C31926;
    const double C6816 = C6682 * C32148;
    const double C11095 = C6682 * C32148;
    const double C30368 = C6682 * C17327;
    const double C14127 = C14123 * C31923;
    const double C27589 = C14123 * C31923;
    const double C1248 = C32137 * C246;
    const double C2715 = C32152 * C246;
    const double C5584 = C32137 * C246;
    const double C14750 = C32152 * C246;
    const double C17758 = C17324 * C246;
    const double C2310 = C32137 * C351;
    const double C3563 = C32152 * C351;
    const double C10589 = C32137 * C351;
    const double C18972 = C17324 * C351;
    const double C20537 = C32152 * C351;
    const double C1972 = C32137 * C355;
    const double C2320 = C749 * C355;
    const double C10259 = C32137 * C355;
    const double C10599 = C32167 * C355;
    const double C12905 = C31782 * C355;
    const double C17000 = C31782 * C355;
    const double C18548 = C17324 * C355;
    const double C24376 = C31785 * C355;
    const double C12474 = C8579 - C8578;
    const double C13103 = C8578 - C8579;
    const double C16549 = C16374 - C16375;
    const double C17206 = C16375 - C16374;
    const double C6051 =
        (4 * (2 * C31496 + C31073 * C31576 + C31497 * ae) +
         C31073 *
             (3 * C31576 +
              C31073 *
                  (2 * C31568 +
                   C31073 * (C31103 + C31073 * (C31073 * C31119 + C31169 * ae) +
                             C31073 * C31169 * ae) +
                   C31570 * ae) +
              C31575 * ae) +
         (3 * C31497 + C31073 * C31575) * ae) /
        C30828;
    const double C1259 = C756 * C241;
    const double C5595 = C5156 * C241;
    const double C17769 = C30889 * C241;
    const double C4629 = C756 * C631;
    const double C18765 = C30889 * C631;
    const double C26194 = C5156 * C631;
    const double C1253 = C756 * C221;
    const double C5589 = C5156 * C221;
    const double C17763 = C30889 * C221;
    const double C2315 = C756 * C326;
    const double C10594 = C5156 * C326;
    const double C24371 = C30889 * C326;
    const double C4623 = C756 * C621;
    const double C18759 = C30889 * C621;
    const double C26188 = C5156 * C621;
    const double C1591 = C756 * C1064;
    const double C5911 = C5156 * C1064;
    const double C8796 = C30854 * C1064;
    const double C18085 = C30889 * C1064;
    const double C19831 = C15392 * C1064;
    const double C2491 = C756 * C1070;
    const double C10758 = C5156 * C1070;
    const double C12702 = C30854 * C1070;
    const double C16789 = C15392 * C1070;
    const double C18559 = C30889 * C1070;
    const double C31620 = C31618 + C31613;
    const double C31200 = C31074 * C31199;
    const double C31204 = 3 * C31199;
    const double C31268 = ae * C31199;
    const double C31267 = C31073 * C31199;
    const double C8111 = C31782 * C1566;
    const double C9641 = C31772 * C1566;
    const double C16075 = C31782 * C1566;
    const double C6256 = C31772 * C883;
    const double C7559 = C31782 * C883;
    const double C15523 = C31782 * C883;
    const double C7003 = C31772 * C1072;
    const double C8583 = C31782 * C1072;
    const double C16379 = C31782 * C1072;
    const double C8107 = C31782 * C1560;
    const double C9639 = C31772 * C1560;
    const double C16071 = C31782 * C1560;
    const double C6073 = C5980 * C6048;
    const double C6443 = C5980 * C6144;
    const double C6677 = C5980 * C6145;
    const double C31596 = C31073 * C31594;
    const double C6796 =
        (2 * C31243 * C31576 + C31243 * (C31576 + C31594 * C31277)) / C30828;
    const double C6800 =
        (3 * (C31576 + C31594 * C31277) +
         C31243 *
             (2 * C31243 * C31594 +
              C31243 *
                  (C31594 + (C31119 + C31073 * (C31073 * C31143 + C31207 * ae) +
                             C31073 * C31207 * ae) *
                                C31277))) /
        C30828;
    const double C250 =
        (C31092 + be * C31095 + C31074 * C31106 + ae * C31073 * C31186 +
         C31073 * (ae * C31186 + C31073 * C31126)) /
        C30833;
    const double C635 =
        (ae * C31243 * C31186 + C31073 * C31243 * C31126) / C30833;
    const double C890 = (2 * (ae * C31186 + C31073 * C31126) +
                         ae * (C31186 + C31199 * std::pow(C31073, 2)) +
                         C31073 * (C31126 + ae * C31073 * C31199 +
                                   C31073 * (ae * C31199 + C31073 * C31150))) /
                        C30833;
    const double C1082 = (ae * (C31186 + C31199 * C31277) +
                          C31073 * (C31126 + C31150 * C31277)) /
                         C30833;
    const double C130 = (3 * (C31177 + C31074 * C31181 + C31410 * be) +
                         C31074 * (2 * C31181 + C31074 * C31186 + C31412 * be) +
                         (2 * C31410 + C31074 * C31412) * be) /
                        C30828;
    const double C226 =
        (C31073 * (2 * C31181 + C31074 * C31186 + C31412 * be)) / C30828;
    const double C235 =
        (C31177 + C31074 * C31181 + C31410 * be + C31186 * C31255) / C30828;
    const double C331 =
        (C31243 * (2 * C31181 + C31074 * C31186 + C31412 * be)) / C30828;
    const double C340 =
        (C31177 + C31074 * C31181 + C31410 * be + C31186 * C31277) / C30828;
    const double C625 = (C31243 * C31073 * C31186) / C30828;
    const double C878 =
        (2 * C31073 * C31186 + C31073 * (C31186 + C31199 * C31255)) / C30828;
    const double C1061 = (C31243 * (C31186 + C31199 * C31255)) / C30828;
    const double C1933 =
        (2 * C31243 * C31186 + C31243 * (C31186 + C31199 * C31277)) / C30828;
    const double C6258 = C31772 * C892;
    const double C7563 = C31782 * C892;
    const double C15527 = C31782 * C892;
    const double C8407 = C8103 - C8102;
    const double C9205 = C8102 - C8103;
    const double C19482 = C16067 - C16066;
    const double C20224 = C16066 - C16067;
    const double C12472 = C8575 - C8574;
    const double C13101 = C8574 - C8575;
    const double C16547 = C16370 - C16371;
    const double C17204 = C16371 - C16370;
    const double C6815 = C6681 * C5159;
    const double C11094 = C6681 * C759;
    const double C30367 = C6681 * C31012;
    const double C6076 = C31772 * C6054;
    const double C31155 = C31135 + C31153;
    const double C31154 = C31136 + C31152;
    const double C1948 =
        (3 * (C31126 + C31150 * C31277) +
         C31243 * (2 * C31290 +
                   C31243 * (C31150 + (C31142 + be * C31074 * C31143 +
                                       C31074 * (be * C31143 +
                                                 C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085)) *
                                          C31277))) /
        C30833;
    const double C1985 = C32137 * C1945;
    const double C10272 = C32137 * C1945;
    const double C13691 = C31782 * C1945;
    const double C22566 = C31782 * C1945;
    const double C24067 = C17324 * C1945;
    const double C31367 = C31364 + C31365;
    const double C31336 = C31324 + C31334;
    const double C11749 = C31772 * C11735;
    const double C31224 = C31074 * C31223;
    const double C31270 = C31223 * C31255;
    const double C2479 =
        (ae * (2 * C31243 * C31199 + C31243 * (C31199 + C31223 * C31277)) +
         C31073 * (2 * C31290 +
                   C31243 * (C31150 + (C31142 + be * C31074 * C31143 +
                                       C31074 * (be * C31143 +
                                                 C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085)) *
                                          C31277))) /
        C30833;
    const double C1939 =
        (3 * (C31186 + C31199 * C31277) +
         C31243 * (2 * C31243 * C31199 + C31243 * (C31199 + C31223 * C31277))) /
        C30828;
    const double C31368 = C31362 + C31366;
    const double C31337 = C31322 + C31335;
    const double C125 = 5 * (3 * C31412 + C31074 * C31421) +
                        C31074 * (4 * C31421 + C31074 * C31426);
    const double C222 = 3 * C31412 + C31074 * C31421 + C31426 * C31255;
    const double C327 = 3 * C31412 + C31074 * C31421 + C31426 * C31277;
    const double C444 = C31073 * (4 * C31421 + C31074 * C31426);
    const double C532 = C31243 * (4 * C31421 + C31074 * C31426);
    const double C622 = C31243 * C31073 * C31426;
    const double C6049 = 5 * (3 * C31497 + C31073 * C31575) +
                         C31073 * (4 * C31575 + C31073 * C31597);
    const double C6146 = 3 * C31497 + C31073 * C31575 + C31597 * C31277;
    const double C6426 = C31243 * (4 * C31575 + C31073 * C31597);
    const double C32159 = C32126 / C30828;
    const double C32178 = C32162 / C30834;
    const double C32179 = C32163 + C32130;
    const double C13205 = C32130 - C31964 / C30840;
    const double C32161 = C32127 / C30828;
    const double C30871 = C30867 / C30828;
    const double C2731 = C2599 * C241;
    const double C2723 = C2599 * C221;
    const double C2716 = C2599 * C231;
    const double C2708 = C2599 * C216;
    const double C2975 = C2599 * C232;
    const double C2967 = C2599 * C217;
    const double C3251 = C2599 * C631;
    const double C3243 = C2599 * C621;
    const double C3579 = C2599 * C346;
    const double C3571 = C2599 * C326;
    const double C3564 = C2599 * C336;
    const double C3556 = C2599 * C321;
    const double C3855 = C2599 * C337;
    const double C3847 = C2599 * C322;
    const double C14766 = C14634 * C241;
    const double C14758 = C14634 * C221;
    const double C14751 = C14634 * C231;
    const double C14743 = C14634 * C216;
    const double C15010 = C14634 * C232;
    const double C15002 = C14634 * C217;
    const double C15286 = C14634 * C631;
    const double C15278 = C14634 * C621;
    const double C20553 = C14634 * C346;
    const double C20545 = C14634 * C326;
    const double C20538 = C14634 * C336;
    const double C20530 = C14634 * C321;
    const double C20829 = C14634 * C337;
    const double C20821 = C14634 * C322;
    const double C30870 = C30866 / C30828;
    const double C925 = C754 * C879;
    const double C919 = C754 * C870;
    const double C914 = C754 * C238;
    const double C908 = C754 * C218;
    const double C902 = C754 * C228;
    const double C896 = C754 * C213;
    const double C1255 = C754 * C239;
    const double C1249 = C754 * C219;
    const double C1243 = C754 * C229;
    const double C1237 = C754 * C214;
    const double C1587 = C754 * C1062;
    const double C1581 = C754 * C1050;
    const double C1575 = C754 * C628;
    const double C1569 = C754 * C618;
    const double C1980 = C754 * C1934;
    const double C1974 = C754 * C1925;
    const double C1969 = C754 * C343;
    const double C1963 = C754 * C323;
    const double C1957 = C754 * C333;
    const double C1951 = C754 * C318;
    const double C2317 = C754 * C344;
    const double C2311 = C754 * C324;
    const double C2305 = C754 * C334;
    const double C2299 = C754 * C319;
    const double C2487 = C754 * C1068;
    const double C2481 = C754 * C1053;
    const double C4625 = C754 * C629;
    const double C4619 = C754 * C619;
    const double C927 = C755 * C880;
    const double C921 = C755 * C871;
    const double C916 = C755 * C239;
    const double C910 = C755 * C219;
    const double C904 = C755 * C229;
    const double C898 = C755 * C214;
    const double C1257 = C755 * C240;
    const double C1251 = C755 * C220;
    const double C1245 = C755 * C230;
    const double C1239 = C755 * C215;
    const double C1589 = C755 * C1063;
    const double C1583 = C755 * C1051;
    const double C1577 = C755 * C629;
    const double C1571 = C755 * C619;
    const double C1982 = C755 * C1935;
    const double C1976 = C755 * C1926;
    const double C1971 = C755 * C344;
    const double C1965 = C755 * C324;
    const double C1959 = C755 * C334;
    const double C1953 = C755 * C319;
    const double C2319 = C755 * C345;
    const double C2313 = C755 * C325;
    const double C2307 = C755 * C335;
    const double C2301 = C755 * C320;
    const double C2489 = C755 * C1069;
    const double C2483 = C755 * C1054;
    const double C4627 = C755 * C630;
    const double C4621 = C755 * C620;
    const double C15524 = C15391 * C885;
    const double C15520 = C15391 * C873;
    const double C15517 = C15391 * C879;
    const double C15513 = C15391 * C870;
    const double C15509 = C15391 * C238;
    const double C15505 = C15391 * C218;
    const double C15501 = C15391 * C228;
    const double C15497 = C15391 * C213;
    const double C15788 = C15391 * C880;
    const double C15784 = C15391 * C871;
    const double C15780 = C15391 * C239;
    const double C15776 = C15391 * C219;
    const double C15772 = C15391 * C229;
    const double C15768 = C15391 * C214;
    const double C16072 = C15391 * C1562;
    const double C16068 = C15391 * C1556;
    const double C16064 = C15391 * C1062;
    const double C16060 = C15391 * C1050;
    const double C16056 = C15391 * C628;
    const double C16052 = C15391 * C618;
    const double C16380 = C15391 * C1074;
    const double C16376 = C15391 * C1056;
    const double C16373 = C15391 * C1068;
    const double C16369 = C15391 * C1053;
    const double C16562 = C15391 * C2474;
    const double C16558 = C15391 * C2468;
    const double C16554 = C15391 * C1934;
    const double C16550 = C15391 * C1925;
    const double C16543 = C15391 * C343;
    const double C16539 = C15391 * C323;
    const double C16535 = C15391 * C333;
    const double C16531 = C15391 * C318;
    const double C16787 = C15391 * C1069;
    const double C16783 = C15391 * C1054;
    const double C16779 = C15391 * C629;
    const double C16775 = C15391 * C619;
    const double C16997 = C15391 * C344;
    const double C16993 = C15391 * C324;
    const double C16989 = C15391 * C334;
    const double C16985 = C15391 * C319;
    const double C19829 = C15391 * C1063;
    const double C19825 = C15391 * C1051;
    const double C22289 = C15391 * C1940;
    const double C22285 = C15391 * C1928;
    const double C22563 = C15391 * C1935;
    const double C22559 = C15391 * C1926;
    const double C11755 = C11751 + C11752;
    const double C14125 = C14120 + C14121;
    const double C6835 = C6833 + C6834;
    const double C11096 = C11090 + C11091;
    const double C11750 = C11738 + C11739;
    const double C14124 = C14116 + C14117;
    const double C11758 = C11756 + C11757;
    const double C32189 = C32132 + C32181;
    const double C2591 = C32168 - (C31785 * C31768) / C30828;
    const double C14748 = C32169 * C245;
    const double C14740 = C32169 * C225;
    const double C15009 = C32169 * C246;
    const double C20552 = C32169 * C355;
    const double C20535 = C32169 * C350;
    const double C20527 = C32169 * C330;
    const double C20828 = C32169 * C351;
    const double C104 = C32169 / C30834 - C31783 / C32139;
    const double C2713 = C2592 * C245;
    const double C2705 = C2592 * C225;
    const double C2974 = C2592 * C246;
    const double C3578 = C2592 * C355;
    const double C3561 = C2592 * C350;
    const double C3553 = C2592 * C330;
    const double C3854 = C2592 * C351;
    const double C32182 = C32135 + C32168;
    const double C30983 = C30979 / C30828;
    const double C27586 = C11740 * C14635;
    const double C27582 = C6829 * C14635;
    const double C30994 = C30988 / C30828;
    const double C32190 = C32153 + C32185;
    const double C7424 = C32175 - (C31926 * C31915) / C30828;
    const double C5978 = C32176 / C30834 - C31924 / C32139;
    const double C32186 = C32155 + C32175;
    const double C1991 = C1972 - C1973;
    const double C10278 = C10259 - C10260;
    const double C24055 = C18548 - C18547;
    const double C6075 = C5980 * C6051;
    const double C6240 =
        (4 * (2 * C31503 + C31073 * C31620 + C31504 * ae) +
         C31073 * (3 * C31620 +
                   C31073 * (2 * C31612 +
                             C31073 * (C31131 +
                                       C31073 * (C31073 * C31074 * C31143 +
                                                 C31211 * ae) +
                                       C31073 * C31211 * ae) +
                             C31614 * ae) +
                   C31619 * ae) +
         (3 * C31504 + C31073 * C31619) * ae) /
        C30828;
    const double C6342 =
        (C31243 * (3 * C31620 +
                   C31073 * (2 * C31612 +
                             C31073 * (C31131 +
                                       C31073 * (C31073 * C31074 * C31143 +
                                                 C31211 * ae) +
                                       C31073 * C31211 * ae) +
                             C31614 * ae) +
                   C31619 * ae)) /
        C30828;
    const double C6987 =
        (2 * C31503 + C31073 * C31620 + C31504 * ae +
         (2 * C31612 +
          C31073 * (C31131 + C31073 * (C31073 * C31074 * C31143 + C31211 * ae) +
                    C31073 * C31211 * ae) +
          C31614 * ae) *
             C31277) /
        C30828;
    const double C7153 =
        (2 * C31243 * C31620 +
         C31243 * (C31620 +
                   (C31131 + C31073 * (C31073 * C31074 * C31143 + C31211 * ae) +
                    C31073 * C31211 * ae) *
                       C31277)) /
        C30828;
    const double C31201 = C31188 + C31200;
    const double C31271 = C31268 + C31269;
    const double C1079 =
        (C31243 * C31126 + ae * C31243 * C31267 +
         C31073 * (ae * C31243 * C31199 + C31073 * C31243 * C31150)) /
        C30833;
    const double C1085 =
        (C31126 + C31150 * C31277 + ae * (C31267 + C31073 * C31223 * C31277) +
         C31073 * (ae * (C31199 + C31223 * C31277) +
                   C31073 * (C31150 + (C31142 + be * C31074 * C31143 +
                                       C31074 * (be * C31143 +
                                                 C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085)) *
                                          C31277))) /
        C30833;
    const double C1067 = (C31073 * C31186 + C31267 * C31277) / C30828;
    const double C2473 =
        (2 * C31243 * C31267 + C31243 * (C31267 + C31073 * C31223 * C31277)) /
        C30828;
    const double C31598 = C31579 + C31596;
    const double C6827 = C5980 * C6796;
    const double C917 = C32137 * C250;
    const double C1258 = C749 * C250;
    const double C2730 = C2592 * C250;
    const double C5293 = C32137 * C250;
    const double C5594 = C32167 * C250;
    const double C7819 = C31782 * C250;
    const double C14765 = C32169 * C250;
    const double C15783 = C31782 * C250;
    const double C17467 = C17324 * C250;
    const double C17768 = C31785 * C250;
    const double C1580 = C32137 * C635;
    const double C3250 = C2592 * C635;
    const double C4628 = C749 * C635;
    const double C5900 = C32137 * C635;
    const double C8789 = C31782 * C635;
    const double C15285 = C32169 * C635;
    const double C16782 = C31782 * C635;
    const double C18074 = C17324 * C635;
    const double C18764 = C31785 * C635;
    const double C26193 = C32167 * C635;
    const double C930 = C32137 * C890;
    const double C5306 = C32137 * C890;
    const double C7827 = C31782 * C890;
    const double C15791 = C31782 * C890;
    const double C17480 = C17324 * C890;
    const double C2492 = C32137 * C1082;
    const double C10759 = C32137 * C1082;
    const double C12703 = C31782 * C1082;
    const double C16790 = C31782 * C1082;
    const double C18560 = C17324 * C1082;
    const double C1242 = C32137 * C226;
    const double C2707 = C32152 * C226;
    const double C2966 = C2592 * C226;
    const double C5578 = C32137 * C226;
    const double C14742 = C32152 * C226;
    const double C15001 = C32169 * C226;
    const double C17752 = C17324 * C226;
    const double C911 = C32137 * C235;
    const double C1252 = C749 * C235;
    const double C2722 = C2592 * C235;
    const double C5287 = C32137 * C235;
    const double C5588 = C32167 * C235;
    const double C7815 = C31782 * C235;
    const double C14757 = C32169 * C235;
    const double C15779 = C31782 * C235;
    const double C17461 = C17324 * C235;
    const double C17762 = C31785 * C235;
    const double C2304 = C32137 * C331;
    const double C3555 = C32152 * C331;
    const double C3846 = C2592 * C331;
    const double C10583 = C32137 * C331;
    const double C18966 = C17324 * C331;
    const double C20529 = C32152 * C331;
    const double C20820 = C32169 * C331;
    const double C1966 = C32137 * C340;
    const double C2314 = C749 * C340;
    const double C3570 = C2592 * C340;
    const double C10253 = C32137 * C340;
    const double C10593 = C32167 * C340;
    const double C12901 = C31782 * C340;
    const double C16996 = C31782 * C340;
    const double C18542 = C17324 * C340;
    const double C20544 = C32169 * C340;
    const double C24370 = C31785 * C340;
    const double C1574 = C32137 * C625;
    const double C3242 = C2592 * C625;
    const double C4622 = C749 * C625;
    const double C5894 = C32137 * C625;
    const double C8785 = C31782 * C625;
    const double C15277 = C32169 * C625;
    const double C16778 = C31782 * C625;
    const double C18068 = C17324 * C625;
    const double C18758 = C31785 * C625;
    const double C26187 = C32167 * C625;
    const double C924 = C32137 * C878;
    const double C5300 = C32137 * C878;
    const double C7823 = C31782 * C878;
    const double C15787 = C31782 * C878;
    const double C17474 = C17324 * C878;
    const double C1586 = C32137 * C1061;
    const double C5906 = C32137 * C1061;
    const double C8793 = C31782 * C1061;
    const double C18080 = C17324 * C1061;
    const double C19828 = C31782 * C1061;
    const double C1979 = C32137 * C1933;
    const double C10266 = C32137 * C1933;
    const double C13687 = C31782 * C1933;
    const double C22562 = C31782 * C1933;
    const double C24061 = C17324 * C1933;
    const double C139 = (5 * (3 * C31107 + C31074 * C31127) +
                         C31074 * (4 * C31127 + C31074 * C31155)) /
                        C30828;
    const double C242 =
        (3 * C31107 + C31074 * C31127 +
         C31073 * (C31073 * C31155 + C31426 * ae) + C31073 * C31426 * ae) /
        C30828;
    const double C347 =
        (3 * C31107 + C31074 * C31127 + C31155 * C31277) / C30828;
    const double C446 = (C31073 * (4 * C31127 + C31074 * C31155) +
                         (4 * C31421 + C31074 * C31426) * ae) /
                        C30828;
    const double C534 = (C31243 * (4 * C31127 + C31074 * C31155)) / C30828;
    const double C632 = (C31243 * (C31073 * C31155 + C31426 * ae)) / C30828;
    const double C146 =
        (5 * (3 * C31126 + be * C31127 + C31074 * C31154) +
         be * (4 * C31127 + C31074 * C31155) +
         C31074 *
             (4 * C31154 + be * C31155 +
              C31074 *
                  (3 * C31150 + be * C31151 +
                   C31074 * (2 * C31146 + be * C31147 +
                             C31074 * (C31142 + be * C31074 * C31143 +
                                       C31074 * (be * C31143 +
                                                 C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085)))))) /
        C30833;
    const double C247 =
        (ae * (3 * (C31164 + C31074 * C31174 + C31168 * be) +
               C31074 * (2 * C31174 +
                         C31074 * (C31170 +
                                   C31074 * (C31074 * C31111 * C31112 * C31159 +
                                             C31169 * be) +
                                   C31074 * C31169 * be) +
                         C31173 * be) +
               (2 * C31168 + C31074 * C31173) * be) +
         C31073 * (3 * C31126 + be * C31127 + C31074 * C31154)) /
        C30833;
    const double C352 =
        ((zP - zQ) * (3 * C31126 + be * C31127 + C31074 * C31154)) / C30833;
    const double C356 = (2 * C31106 + be * C31107 + C31074 * C31126 +
                         C31154 * std::pow(zP - zQ, 2)) /
                        C30833;
    const double C357 =
        (3 * C31126 + be * C31127 + C31074 * C31154 +
         (3 * C31150 + be * C31151 +
          C31074 *
              (2 * C31146 + be * C31147 +
               C31074 * (C31142 + be * C31074 * C31143 +
                         C31074 * (be * C31143 + C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085)))) *
             std::pow(zP - zQ, 2)) /
        C30833;
    const double C535 =
        ((zP - zQ) *
         (4 * C31154 + be * C31155 +
          C31074 * (3 * C31150 + be * C31151 +
                    C31074 * (2 * C31146 + be * C31147 +
                              C31074 * (C31142 + be * C31074 * C31143 +
                                        C31074 * (be * C31143 +
                                                  C31074 * std::pow(C31076, 8) *
                                                      bs[8] * C31085)))))) /
        C30833;
    const double C2297 =
        (2 * C31243 * C31154 +
         C31243 * (C31154 + (2 * C31146 + be * C31147 +
                             C31074 * (C31142 + be * C31074 * C31143 +
                                       C31074 * (be * C31143 +
                                                 C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085))) *
                                C31277)) /
        C30833;
    const double C31225 = C31205 + C31224;
    const double C31272 = C31199 + C31270;
    const double C6241 =
        (4 * (2 * C31264 + ae * C31265 + C31073 * C31367) +
         ae * (3 * C31265 + C31073 * C31368) +
         C31073 *
             (3 * C31367 + ae * C31368 +
              C31073 *
                  (2 * C31361 + ae * C31363 +
                   C31073 * (C31146 + ae * C31073 * C31216 +
                             C31073 * (ae * C31216 +
                                       C31073 * (be * C31143 +
                                                 C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085)))))) /
        C30833;
    const double C6343 =
        (3 * (C31288 + ae * C31243 * C31356 + C31073 * C31374) +
         ae * C31243 * C31368 +
         C31073 * (2 * C31374 + ae * C31243 * C31363 +
                   C31073 * (C31371 + ae * C31243 * C31073 * C31216 +
                             C31073 * (ae * C31243 * C31216 +
                                       C31073 * C31243 *
                                           (be * C31143 +
                                            C31074 * std::pow(C31076, 8) *
                                                bs[8] * C31085))))) /
        C30833;
    const double C6239 = (4 * (2 * C31260 + C31073 * C31265) +
                          C31073 * (3 * C31265 + C31073 * C31368)) /
                         C30828;
    const double C6341 = (C31243 * (3 * C31265 + C31073 * C31368)) / C30828;
    const double C6986 =
        (2 * C31260 + C31073 * C31265 + C31368 * C31277) / C30828;
    const double C6055 =
        (5 * (3 * C31314 + ae * C31315 + C31073 * C31336) +
         ae * (4 * C31315 + C31073 * C31337) +
         C31073 *
             (4 * C31336 + ae * C31337 +
              C31073 *
                  (3 * C31332 + ae * C31333 +
                   C31073 * (2 * C31326 + ae * C31328 +
                             C31073 * (C31142 + ae * C31073 * C31209 +
                                       C31073 * (ae * C31209 +
                                                 C31073 * std::pow(C31076, 8) *
                                                     bs[8] * C31085)))))) /
        C30833;
    const double C6429 =
        (4 * (2 * C31343 + ae * C31243 * C31310 + C31073 * C31385) +
         ae * C31243 * C31337 +
         C31073 * (3 * C31385 + ae * C31243 * C31333 +
                   C31073 * (2 * C31383 + ae * C31243 * C31328 +
                             C31073 * (C31378 + ae * C31243 * C31073 * C31209 +
                                       C31073 * (ae * C31243 * C31209 +
                                                 C31073 * C31243 *
                                                     std::pow(C31076, 8) *
                                                     bs[8] * C31085))))) /
        C30833;
    const double C6052 = (5 * (3 * C31258 + C31073 * C31315) +
                          C31073 * (4 * C31315 + C31073 * C31337)) /
                         C30828;
    const double C6151 =
        (3 * C31258 + C31073 * C31315 + C31337 * C31277) / C30828;
    const double C6427 = (C31243 * (4 * C31315 + C31073 * C31337)) / C30828;
    const double C32191 = C32159 + C32187;
    const double C13204 = C32178 - (C31966 * C31955) / C30828;
    const double C11603 = C32179 / C30834 - C31964 / C32139;
    const double C32188 = C32161 + C32178;
    const double C30873 = C30870 - C30849;
    const double C934 = C913 - C914;
    const double C931 = C907 - C908;
    const double C5028 = C1575 - C1576;
    const double C5022 = C1576 - C1575;
    const double C5025 = C1569 - C1570;
    const double C5019 = C1570 - C1569;
    const double C1989 = C1968 - C1969;
    const double C1986 = C1962 - C1963;
    const double C935 = C915 - C916;
    const double C932 = C909 - C910;
    const double C5029 = C1577 - C1578;
    const double C5023 = C1578 - C1577;
    const double C5026 = C1571 - C1572;
    const double C5020 = C1572 - C1571;
    const double C1990 = C1970 - C1971;
    const double C1987 = C1964 - C1965;
    const double C15534 = C15516 - C15517;
    const double C15532 = C15512 - C15513;
    const double C15530 = C15508 - C15509;
    const double C15528 = C15504 - C15505;
    const double C19481 = C16065 - C16064;
    const double C20223 = C16064 - C16065;
    const double C19479 = C16061 - C16060;
    const double C20221 = C16060 - C16061;
    const double C17201 = C16056 - C16057;
    const double C17197 = C16057 - C16056;
    const double C17199 = C16052 - C16053;
    const double C17195 = C16053 - C16052;
    const double C16548 = C16372 - C16373;
    const double C17205 = C16373 - C16372;
    const double C16546 = C16368 - C16369;
    const double C17203 = C16369 - C16368;
    const double C22283 = C16555 - C16554;
    const double C22281 = C16551 - C16550;
    const double C16568 = C16542 - C16543;
    const double C16566 = C16538 - C16539;
    const double C14129 = C14125 + C14126;
    const double C6836 = C6835 + C6831;
    const double C11097 = C11096 + C11092;
    const double C14128 = C14124 + C14118;
    const double C14761 = C32189 * C248;
    const double C14753 = C32189 * C233;
    const double C14744 = C32189 * C243;
    const double C14736 = C32189 * C223;
    const double C15005 = C32189 * C244;
    const double C14997 = C32189 * C224;
    const double C15281 = C32189 * C633;
    const double C15273 = C32189 * C623;
    const double C20548 = C32189 * C353;
    const double C20540 = C32189 * C338;
    const double C20531 = C32189 * C348;
    const double C20523 = C32189 * C328;
    const double C20824 = C32189 * C349;
    const double C20816 = C32189 * C329;
    const double C101 =
        (C32180 + 2 * C31777) / C30834 - (C32189 * C31768) / C30828;
    const double C2728 = C2591 * C249;
    const double C2720 = C2591 * C234;
    const double C2711 = C2591 * C244;
    const double C2703 = C2591 * C224;
    const double C2972 = C2591 * C245;
    const double C2964 = C2591 * C225;
    const double C3248 = C2591 * C634;
    const double C3240 = C2591 * C624;
    const double C3576 = C2591 * C354;
    const double C3568 = C2591 * C339;
    const double C3559 = C2591 * C349;
    const double C3551 = C2591 * C329;
    const double C3852 = C2591 * C350;
    const double C3844 = C2591 * C330;
    const double C14763 = C32182 * C249;
    const double C14755 = C32182 * C234;
    const double C14746 = C32182 * C244;
    const double C14738 = C32182 * C224;
    const double C15007 = C32182 * C245;
    const double C14999 = C32182 * C225;
    const double C15283 = C32182 * C634;
    const double C15275 = C32182 * C624;
    const double C20550 = C32182 * C354;
    const double C20542 = C32182 * C339;
    const double C20533 = C32182 * C349;
    const double C20525 = C32182 * C329;
    const double C20826 = C32182 * C350;
    const double C20818 = C32182 * C330;
    const double C102 =
        (C32167 + 2 * C31785 + C32189) / C30834 - (C32182 * C31768) / C30828;
    const double C103 = (C32137 + C31782 / C30828 + C32182) / C30834 -
                        (C32169 * C31768) / C30828;
    const double C30987 = C30983 - C30964;
    const double C27591 = C27586 + C27587;
    const double C27590 = C27582 + C27583;
    const double C5975 =
        (C32183 + 2 * C31919) / C30834 - (C32190 * C31915) / C30828;
    const double C5976 =
        (C32171 + 2 * C31926 + C32190) / C30834 - (C32186 * C31915) / C30828;
    const double C5977 = (C32148 + C31923 / C30828 + C32186) / C30834 -
                         (C32176 * C31915) / C30828;
    const double C31202 = C31201 + C31192;
    const double C1592 = C32137 * C1079;
    const double C5912 = C32137 * C1079;
    const double C8797 = C31782 * C1079;
    const double C18086 = C17324 * C1079;
    const double C19832 = C31782 * C1079;
    const double C2486 = C32137 * C1067;
    const double C10753 = C32137 * C1067;
    const double C12699 = C31782 * C1067;
    const double C16786 = C31782 * C1067;
    const double C18554 = C17324 * C1067;
    const double C31599 = C31598 + C31583;
    const double C936 = C917 - C918;
    const double C5312 = C5293 - C5294;
    const double C17486 = C17467 - C17468;
    const double C5030 = C1579 - C1580;
    const double C5024 = C1580 - C1579;
    const double C26595 = C5899 - C5900;
    const double C26589 = C5900 - C5899;
    const double C19178 = C18073 - C18074;
    const double C19172 = C18074 - C18073;
    const double C933 = C911 - C912;
    const double C5309 = C5287 - C5288;
    const double C17483 = C17461 - C17462;
    const double C1988 = C1966 - C1967;
    const double C10275 = C10253 - C10254;
    const double C24052 = C18542 - C18541;
    const double C5027 = C1573 - C1574;
    const double C5021 = C1574 - C1573;
    const double C26592 = C5893 - C5894;
    const double C26586 = C5894 - C5893;
    const double C19175 = C18067 - C18068;
    const double C19169 = C18068 - C18067;
    const double C2976 = C32152 * C247;
    const double C15011 = C32152 * C247;
    const double C3856 = C32152 * C352;
    const double C20830 = C32152 * C352;
    const double C2322 = C32137 * C356;
    const double C3580 = C32152 * C356;
    const double C10601 = C32137 * C356;
    const double C20554 = C32152 * C356;
    const double C24378 = C17324 * C356;
    const double C31226 = C31225 + C31217;
    const double C893 =
        (3 * (C31126 + ae * C31267 + C31073 * C31271) +
         ae * (2 * C31267 + C31073 * C31272) +
         C31073 *
             (2 * C31271 + ae * C31272 +
              C31073 *
                  (C31150 + ae * C31073 * C31223 +
                   C31073 * (ae * C31223 +
                             C31073 * (C31142 + be * C31074 * C31143 +
                                       C31074 * (be * C31143 +
                                                 C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085)))))) /
        C30833;
    const double C1567 =
        (2 * (ae * C31243 * C31199 + C31073 * C31290) + ae * C31243 * C31272 +
         C31073 * (C31290 + ae * C31243 * C31073 * C31223 +
                   C31073 * (ae * C31243 * C31223 +
                             C31073 * C31243 *
                                 (C31142 + be * C31074 * C31143 +
                                  C31074 * (be * C31143 +
                                            C31074 * std::pow(C31076, 8) *
                                                bs[8] * C31085))))) /
        C30833;
    const double C884 = (3 * (C31186 + C31199 * C31255) +
                         C31073 * (2 * C31267 + C31073 * C31272)) /
                        C30828;
    const double C1073 = (C31186 + C31199 * C31255 + C31272 * C31277) / C30828;
    const double C1561 = (C31243 * (2 * C31267 + C31073 * C31272)) / C30828;
    const double C11600 =
        (C32184 + 2 * C31959) / C30834 - (C32191 * C31955) / C30828;
    const double C11601 =
        (C32173 + 2 * C31966 + C32191) / C30834 - (C32188 * C31955) / C30828;
    const double C11602 = (C32151 + C31963 / C30828 + C32188) / C30834 -
                          (C32179 * C31955) / C30828;
    const double C7560 = C30873 * C885;
    const double C7556 = C30873 * C873;
    const double C7553 = C30873 * C879;
    const double C7549 = C30873 * C870;
    const double C7545 = C30873 * C238;
    const double C7541 = C30873 * C218;
    const double C7537 = C30873 * C228;
    const double C7533 = C30873 * C213;
    const double C7824 = C30873 * C880;
    const double C7820 = C30873 * C871;
    const double C7816 = C30873 * C239;
    const double C7812 = C30873 * C219;
    const double C7808 = C30873 * C229;
    const double C7804 = C30873 * C214;
    const double C8108 = C30873 * C1562;
    const double C8104 = C30873 * C1556;
    const double C8100 = C30873 * C1062;
    const double C8096 = C30873 * C1050;
    const double C8092 = C30873 * C628;
    const double C8088 = C30873 * C618;
    const double C8584 = C30873 * C1074;
    const double C8580 = C30873 * C1056;
    const double C8576 = C30873 * C1068;
    const double C8572 = C30873 * C1053;
    const double C8568 = C30873 * C343;
    const double C8564 = C30873 * C323;
    const double C8561 = C30873 * C333;
    const double C8557 = C30873 * C318;
    const double C8794 = C30873 * C1063;
    const double C8790 = C30873 * C1051;
    const double C8786 = C30873 * C629;
    const double C8782 = C30873 * C619;
    const double C8996 = C30873 * C334;
    const double C8992 = C30873 * C319;
    const double C12487 = C30873 * C2474;
    const double C12483 = C30873 * C2468;
    const double C12479 = C30873 * C1934;
    const double C12475 = C30873 * C1925;
    const double C12700 = C30873 * C1069;
    const double C12696 = C30873 * C1054;
    const double C12902 = C30873 * C344;
    const double C12898 = C30873 * C324;
    const double C13414 = C30873 * C1940;
    const double C13410 = C30873 * C1928;
    const double C13688 = C30873 * C1935;
    const double C13684 = C30873 * C1926;
    const double C30876 = C30873 / C30834;
    const double C30875 = C30826 * C30873;
    const double C938 = C934 + C935;
    const double C937 = C931 + C932;
    const double C5034 = C5028 + C5029;
    const double C5032 = C5022 + C5023;
    const double C5033 = C5025 + C5026;
    const double C5031 = C5019 + C5020;
    const double C1993 = C1989 + C1990;
    const double C1992 = C1986 + C1987;
    const double C15539 = C15534 + C15535;
    const double C15538 = C15532 + C15533;
    const double C15537 = C15530 + C15531;
    const double C15536 = C15528 + C15529;
    const double C19484 = C19481 + C19482;
    const double C20226 = C20223 + C20224;
    const double C19483 = C19479 + C19480;
    const double C20225 = C20221 + C20222;
    const double C17210 = C17201 + C17202;
    const double C17208 = C17197 + C17198;
    const double C17209 = C17199 + C17200;
    const double C17207 = C17195 + C17196;
    const double C16571 = C16548 + C16549;
    const double C17212 = C17205 + C17206;
    const double C16570 = C16546 + C16547;
    const double C17211 = C17203 + C17204;
    const double C22295 = C22283 + C22284;
    const double C22294 = C22281 + C22282;
    const double C16573 = C16568 + C16569;
    const double C16572 = C16566 + C16567;
    const double C14131 = C14129 + C14127;
    const double C6837 = C6836 + C6832;
    const double C11098 = C11097 + C11093;
    const double C14130 = C14128 + C14119;
    const double C30993 = C30987 / C30834;
    const double C30992 = C30913 * C30987;
    const double C27593 = C27591 + C27588;
    const double C27592 = C27590 + C27584;
    const double C251 =
        (2 * C31106 + be * C31107 + C31074 * C31126 + ae * C31073 * C31202 +
         C31073 * (ae * C31202 + C31073 * C31154)) /
        C30833;
    const double C636 =
        (ae * C31243 * C31202 + C31073 * C31243 * C31154) / C30833;
    const double C136 = (4 * (2 * C31181 + C31074 * C31186 + C31412 * be) +
                         C31074 * (3 * C31186 + C31074 * C31202 + C31421 * be) +
                         (3 * C31412 + C31074 * C31421) * be) /
                        C30828;
    const double C227 =
        (C31073 * (3 * C31186 + C31074 * C31202 + C31421 * be)) / C30828;
    const double C236 =
        (2 * C31181 + C31074 * C31186 + C31412 * be + C31202 * C31255) / C30828;
    const double C332 =
        (C31243 * (3 * C31186 + C31074 * C31202 + C31421 * be)) / C30828;
    const double C341 =
        (2 * C31181 + C31074 * C31186 + C31412 * be + C31202 * C31277) / C30828;
    const double C626 = (C31243 * C31073 * C31202) / C30828;
    const double C6053 =
        (5 * (3 * C31576 + C31073 * C31599 + C31575 * ae) +
         C31073 * (4 * C31599 +
                   C31073 * (3 * C31594 +
                             C31073 * (2 * C31586 +
                                       C31073 * (C31119 +
                                                 C31073 * (C31073 * C31143 +
                                                           C31207 * ae) +
                                                 C31073 * C31207 * ae) +
                                       C31588 * ae) +
                             C31593 * ae) +
                   C31597 * ae) +
         (4 * C31575 + C31073 * C31597) * ae) /
        C30828;
    const double C6148 =
        (C31243 * (3 * C31576 + C31073 * C31599 + C31575 * ae)) / C30828;
    const double C6150 =
        (2 * C31496 + C31073 * C31576 + C31497 * ae + C31599 * C31277) / C30828;
    const double C6152 =
        (3 * C31576 + C31073 * C31599 + C31575 * ae +
         (3 * C31594 +
          C31073 *
              (2 * C31586 +
               C31073 * (C31119 + C31073 * (C31073 * C31143 + C31207 * ae) +
                         C31073 * C31207 * ae) +
               C31588 * ae) +
          C31593 * ae) *
             C31277) /
        C30828;
    const double C6428 =
        (C31243 *
         (4 * C31599 +
          C31073 *
              (3 * C31594 +
               C31073 * (2 * C31586 +
                         C31073 * (C31119 +
                                   C31073 * (C31073 * C31143 + C31207 * ae) +
                                   C31073 * C31207 * ae) +
                         C31588 * ae) +
               C31593 * ae) +
          C31597 * ae)) /
        C30828;
    const double C7311 =
        (2 * C31243 * C31599 +
         C31243 *
             (C31599 +
              (2 * C31586 +
               C31073 * (C31119 + C31073 * (C31073 * C31143 + C31207 * ae) +
                         C31073 * C31207 * ae) +
               C31588 * ae) *
                  C31277)) /
        C30828;
    const double C31227 = C31074 * C31226;
    const double C1235 =
        (2 * (ae * C31202 + C31073 * C31154) + ae * (C31202 + C31226 * C31255) +
         C31073 *
             (C31154 + ae * C31073 * C31226 +
              C31073 *
                  (ae * C31226 +
                   C31073 * (2 * C31146 + be * C31147 +
                             C31074 * (C31142 + be * C31074 * C31143 +
                                       C31074 * (be * C31143 +
                                                 C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085)))))) /
        C30833;
    const double C1409 =
        (C31243 * C31154 + ae * C31243 * C31073 * C31226 +
         C31073 * (ae * C31243 * C31226 +
                   C31073 * C31243 *
                       (2 * C31146 + be * C31147 +
                        C31074 * (C31142 + be * C31074 * C31143 +
                                  C31074 * (be * C31143 +
                                            C31074 * std::pow(C31076, 8) *
                                                bs[8] * C31085))))) /
        C30833;
    const double C2147 =
        (ae * (C31202 + C31226 * C31277) +
         C31073 * (C31154 + (2 * C31146 + be * C31147 +
                             C31074 * (C31142 + be * C31074 * C31143 +
                                       C31074 * (be * C31143 +
                                                 C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085))) *
                                C31277)) /
        C30833;
    const double C1233 =
        (2 * C31073 * C31202 + C31073 * (C31202 + C31226 * C31255)) / C30828;
    const double C1407 = (C31243 * (C31202 + C31226 * C31255)) / C30828;
    const double C2145 = (C31073 * C31202 + C31073 * C31226 * C31277) / C30828;
    const double C2295 =
        (2 * C31243 * C31202 + C31243 * (C31202 + C31226 * C31277)) / C30828;
    const double C7570 = C7552 - C7553;
    const double C7568 = C7548 - C7549;
    const double C7566 = C7544 - C7545;
    const double C7564 = C7540 - C7541;
    const double C8406 = C8101 - C8100;
    const double C9204 = C8100 - C8101;
    const double C8404 = C8097 - C8096;
    const double C9202 = C8096 - C8097;
    const double C9200 = C8092 - C8093;
    const double C9196 = C8093 - C8092;
    const double C9198 = C8088 - C8089;
    const double C9194 = C8089 - C8088;
    const double C12473 = C8577 - C8576;
    const double C13102 = C8576 - C8577;
    const double C12471 = C8573 - C8572;
    const double C13100 = C8572 - C8573;
    const double C12469 = C8569 - C8568;
    const double C12467 = C8565 - C8564;
    const double C13408 = C12480 - C12479;
    const double C13406 = C12476 - C12475;
    const double C30879 = C30876 - C30871;
    const double C5155 = C30876 + (C30862 * ae) / C30828;
    const double C30878 = C30875 + C32098;
    const double C940 = C938 + C936;
    const double C939 = C937 + C933;
    const double C5038 = C5034 + C5030;
    const double C5036 = C5032 + C5024;
    const double C5037 = C5033 + C5027;
    const double C5035 = C5031 + C5021;
    const double C1995 = C1993 + C1991;
    const double C1994 = C1992 + C1988;
    const double C16575 = C16571 * C31923;
    const double C24966 = C16571 * C31923;
    const double C16574 = C16570 * C14636;
    const double C24965 = C16570 * C2601;
    const double C22297 = C22295 * C31864;
    const double C22296 = C22294 * C118;
    const double C16577 = C16573 * C14629;
    const double C22280 = C16573 * C31864;
    const double C24964 = C16573 * C32117;
    const double C16576 = C16572 * C14635;
    const double C22279 = C16572 * C118;
    const double C24963 = C16572 * C2600;
    const double C6838 = C6837 + C6815;
    const double C11099 = C11098 + C11094;
    const double C30998 = C30993 - C30994;
    const double C30997 = C30992 + C32117;
    const double C27595 = C27593 + C27589;
    const double C27594 = C27592 + C27585;
    const double C1260 = C32137 * C251;
    const double C2732 = C32152 * C251;
    const double C5596 = C32137 * C251;
    const double C14767 = C32152 * C251;
    const double C17770 = C17324 * C251;
    const double C3252 = C32152 * C636;
    const double C4630 = C32137 * C636;
    const double C15287 = C32152 * C636;
    const double C18766 = C17324 * C636;
    const double C26195 = C32137 * C636;
    const double C2968 = C32152 * C227;
    const double C15003 = C32152 * C227;
    const double C1254 = C32137 * C236;
    const double C2724 = C32152 * C236;
    const double C5590 = C32137 * C236;
    const double C14759 = C32152 * C236;
    const double C17764 = C17324 * C236;
    const double C3848 = C32152 * C332;
    const double C20822 = C32152 * C332;
    const double C2316 = C32137 * C341;
    const double C3572 = C32152 * C341;
    const double C10595 = C32137 * C341;
    const double C20546 = C32152 * C341;
    const double C24372 = C17324 * C341;
    const double C3244 = C32152 * C626;
    const double C4624 = C32137 * C626;
    const double C15279 = C32152 * C626;
    const double C18760 = C17324 * C626;
    const double C26189 = C32137 * C626;
    const double C6445 = C5980 * C6148;
    const double C6679 = C5980 * C6150;
    const double C31228 = C31204 + C31227;
    const double C7575 = C7570 + C7571;
    const double C7574 = C7568 + C7569;
    const double C7573 = C7566 + C7567;
    const double C7572 = C7564 + C7565;
    const double C8409 = C8406 + C8407;
    const double C9211 = C9204 + C9205;
    const double C8408 = C8404 + C8405;
    const double C9210 = C9202 + C9203;
    const double C9209 = C9200 + C9201;
    const double C9207 = C9196 + C9197;
    const double C9208 = C9198 + C9199;
    const double C9206 = C9194 + C9195;
    const double C12494 = C12473 + C12474;
    const double C13105 = C13102 + C13103;
    const double C12493 = C12471 + C12472;
    const double C13104 = C13100 + C13101;
    const double C12492 = C12469 + C12470;
    const double C12491 = C12467 + C12468;
    const double C13420 = C13408 + C13409;
    const double C13419 = C13406 + C13407;
    const double C17477 = C30879 * C880;
    const double C17471 = C30879 * C871;
    const double C17466 = C30879 * C239;
    const double C17460 = C30879 * C219;
    const double C17454 = C30879 * C229;
    const double C17448 = C30879 * C214;
    const double C17767 = C30879 * C240;
    const double C17761 = C30879 * C220;
    const double C17755 = C30879 * C230;
    const double C17749 = C30879 * C215;
    const double C18083 = C30879 * C1063;
    const double C18077 = C30879 * C1051;
    const double C18071 = C30879 * C629;
    const double C18065 = C30879 * C619;
    const double C18557 = C30879 * C1069;
    const double C18551 = C30879 * C1054;
    const double C18545 = C30879 * C344;
    const double C18539 = C30879 * C324;
    const double C18534 = C30879 * C334;
    const double C18528 = C30879 * C319;
    const double C18763 = C30879 * C630;
    const double C18757 = C30879 * C620;
    const double C18969 = C30879 * C335;
    const double C18963 = C30879 * C320;
    const double C24064 = C30879 * C1935;
    const double C24058 = C30879 * C1926;
    const double C24375 = C30879 * C345;
    const double C24369 = C30879 * C325;
    const double C116 =
        (C30879 / C30834 + ((C30826 * C30889 + C17324) * ae) / C30828) /
            C30834 -
        ((C30826 * (C30889 / C30834 + (0 * ae) / C30828) + C32152) * be) /
            C30828;
    const double C2598 =
        C30879 / C30834 - ((C30826 * C30889 + C17324) * be) / C30828;
    const double C14633 =
        C30879 / C30834 + ((C30826 * C30889 + C17324) * ae) / C30828;
    const double C5303 = C5155 * C880;
    const double C5297 = C5155 * C871;
    const double C5292 = C5155 * C239;
    const double C5286 = C5155 * C219;
    const double C5280 = C5155 * C229;
    const double C5274 = C5155 * C214;
    const double C5593 = C5155 * C240;
    const double C5587 = C5155 * C220;
    const double C5581 = C5155 * C230;
    const double C5575 = C5155 * C215;
    const double C5909 = C5155 * C1063;
    const double C5903 = C5155 * C1051;
    const double C5897 = C5155 * C629;
    const double C5891 = C5155 * C619;
    const double C10269 = C5155 * C1935;
    const double C10263 = C5155 * C1926;
    const double C10258 = C5155 * C344;
    const double C10252 = C5155 * C324;
    const double C10246 = C5155 * C334;
    const double C10240 = C5155 * C319;
    const double C10598 = C5155 * C345;
    const double C10592 = C5155 * C325;
    const double C10586 = C5155 * C335;
    const double C10580 = C5155 * C320;
    const double C10756 = C5155 * C1069;
    const double C10750 = C5155 * C1054;
    const double C26192 = C5155 * C630;
    const double C26186 = C5155 * C620;
    const double C30880 = C30878 * be;
    const double C5154 = C30865 + (C30878 * ae) / C30828 + C30854;
    const double C1997 = C1995 * C31864;
    const double C1996 = C1994 * C118;
    const double C22298 = C22296 + C22297;
    const double C16578 = C16576 + C16577;
    const double C22293 = C22279 + C22280;
    const double C24967 = C24963 + C24964;
    const double C6839 = C6838 + C6816;
    const double C11100 = C11099 + C11095;
    const double C30365 = C6813 * C30998;
    const double C5984 =
        (C30998 / C30834 + ((C30913 * C31012 + C17327) * ae) / C30828) /
            C30834 -
        ((C30913 * (C31012 / C30834 + (0 * ae) / C30828) + C32158) * be) /
            C30828;
    const double C7431 =
        C30998 / C30834 - ((C30913 * C31012 + C17327) * be) / C30828;
    const double C15395 =
        C30998 / C30834 + ((C30913 * C31012 + C17327) * ae) / C30828;
    const double C31001 = C30997 * be;
    const double C31229 = C31228 + C31222;
    const double C12498 = C12494 * C31923;
    const double C29447 = C12494 * C31923;
    const double C12497 = C12493 * C2601;
    const double C29446 = C12493 * C14636;
    const double C12496 = C12492 * C32117;
    const double C13405 = C12492 * C31864;
    const double C29445 = C12492 * C14629;
    const double C12495 = C12491 * C2600;
    const double C13404 = C12491 * C118;
    const double C29444 = C12491 * C14635;
    const double C13422 = C13420 * C31864;
    const double C13421 = C13419 * C118;
    const double C17485 = C17465 - C17466;
    const double C17482 = C17459 - C17460;
    const double C19177 = C18071 - C18072;
    const double C19171 = C18072 - C18071;
    const double C19174 = C18065 - C18066;
    const double C19168 = C18066 - C18065;
    const double C24054 = C18546 - C18545;
    const double C24051 = C18540 - C18539;
    const double C2729 = C2598 * C240;
    const double C2721 = C2598 * C220;
    const double C2714 = C2598 * C230;
    const double C2706 = C2598 * C215;
    const double C2973 = C2598 * C231;
    const double C2965 = C2598 * C216;
    const double C3249 = C2598 * C630;
    const double C3241 = C2598 * C620;
    const double C3577 = C2598 * C345;
    const double C3569 = C2598 * C325;
    const double C3562 = C2598 * C335;
    const double C3554 = C2598 * C320;
    const double C3853 = C2598 * C336;
    const double C3845 = C2598 * C321;
    const double C14764 = C14633 * C240;
    const double C14756 = C14633 * C220;
    const double C14749 = C14633 * C230;
    const double C14741 = C14633 * C215;
    const double C15008 = C14633 * C231;
    const double C15000 = C14633 * C216;
    const double C15284 = C14633 * C630;
    const double C15276 = C14633 * C620;
    const double C20551 = C14633 * C345;
    const double C20543 = C14633 * C325;
    const double C20536 = C14633 * C335;
    const double C20528 = C14633 * C320;
    const double C20827 = C14633 * C336;
    const double C20819 = C14633 * C321;
    const double C5311 = C5291 - C5292;
    const double C5308 = C5285 - C5286;
    const double C26594 = C5897 - C5898;
    const double C26588 = C5898 - C5897;
    const double C26591 = C5891 - C5892;
    const double C26585 = C5892 - C5891;
    const double C10277 = C10257 - C10258;
    const double C10274 = C10251 - C10252;
    const double C30881 = C30880 / C30828;
    const double C5301 = C5154 * C879;
    const double C5295 = C5154 * C870;
    const double C5290 = C5154 * C238;
    const double C5284 = C5154 * C218;
    const double C5278 = C5154 * C228;
    const double C5272 = C5154 * C213;
    const double C5591 = C5154 * C239;
    const double C5585 = C5154 * C219;
    const double C5579 = C5154 * C229;
    const double C5573 = C5154 * C214;
    const double C5907 = C5154 * C1062;
    const double C5901 = C5154 * C1050;
    const double C5895 = C5154 * C628;
    const double C5889 = C5154 * C618;
    const double C10267 = C5154 * C1934;
    const double C10261 = C5154 * C1925;
    const double C10256 = C5154 * C343;
    const double C10250 = C5154 * C323;
    const double C10244 = C5154 * C333;
    const double C10238 = C5154 * C318;
    const double C10596 = C5154 * C344;
    const double C10590 = C5154 * C324;
    const double C10584 = C5154 * C334;
    const double C10578 = C5154 * C319;
    const double C10754 = C5154 * C1068;
    const double C10748 = C5154 * C1053;
    const double C26190 = C5154 * C629;
    const double C26184 = C5154 * C619;
    const double C1998 = C1996 + C1997;
    const double C16579 = C16578 + C16574;
    const double C24968 = C24967 + C24965;
    const double C31003 = C31001 / C30828;
    const double C252 =
        (3 * C31126 + be * C31127 + C31074 * C31154 + ae * C31073 * C31229 +
         C31073 *
             (ae * C31229 +
              C31073 *
                  (3 * C31150 + be * C31151 +
                   C31074 * (2 * C31146 + be * C31147 +
                             C31074 * (C31142 + be * C31074 * C31143 +
                                       C31074 * (be * C31143 +
                                                 C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085)))))) /
        C30833;
    const double C447 =
        (ae * (4 * C31202 + C31074 * C31229 +
               (3 * C31173 + C31074 * C31220) * be) +
         C31073 *
             (4 * C31154 + be * C31155 +
              C31074 *
                  (3 * C31150 + be * C31151 +
                   C31074 * (2 * C31146 + be * C31147 +
                             C31074 * (C31142 + be * C31074 * C31143 +
                                       C31074 * (be * C31143 +
                                                 C31074 * std::pow(C31076, 8) *
                                                     bs[8] * C31085)))))) /
        C30833;
    const double C637 =
        (ae * C31243 * C31229 +
         C31073 * C31243 *
             (3 * C31150 + be * C31151 +
              C31074 * (2 * C31146 + be * C31147 +
                        C31074 * (C31142 + be * C31074 * C31143 +
                                  C31074 * (be * C31143 +
                                            C31074 * std::pow(C31076, 8) *
                                                bs[8] * C31085))))) /
        C30833;
    const double C138 = (5 * (3 * C31186 + C31074 * C31202 + C31421 * be) +
                         C31074 * (4 * C31202 + C31074 * C31229 + C31426 * be) +
                         (4 * C31421 + C31074 * C31426) * be) /
                        C30828;
    const double C237 =
        (3 * C31186 + C31074 * C31202 + C31421 * be + C31229 * C31255) / C30828;
    const double C342 =
        (3 * C31186 + C31074 * C31202 + C31421 * be + C31229 * C31277) / C30828;
    const double C445 =
        (C31073 * (4 * C31202 + C31074 * C31229 + C31426 * be)) / C30828;
    const double C533 =
        (C31243 * (4 * C31202 + C31074 * C31229 + C31426 * be)) / C30828;
    const double C627 = (C31243 * C31073 * C31229) / C30828;
    const double C12499 = C12495 + C12496;
    const double C13418 = C13404 + C13405;
    const double C29448 = C29444 + C29445;
    const double C13423 = C13421 + C13422;
    const double C30882 = C30865 - C30881;
    const double C5310 = C5289 - C5290;
    const double C5307 = C5283 - C5284;
    const double C26593 = C5895 - C5896;
    const double C26587 = C5896 - C5895;
    const double C26590 = C5889 - C5890;
    const double C26584 = C5890 - C5889;
    const double C10276 = C10255 - C10256;
    const double C10273 = C10249 - C10250;
    const double C16580 = C16579 + C16575;
    const double C24969 = C24968 + C24966;
    const double C31005 = C30991 - C31003;
    const double C12500 = C12499 + C12497;
    const double C29449 = C29448 + C29446;
    const double C30883 = C30882 + C30854;
    const double C5314 = C5310 + C5311;
    const double C5313 = C5307 + C5308;
    const double C26599 = C26593 + C26594;
    const double C26597 = C26587 + C26588;
    const double C26598 = C26590 + C26591;
    const double C26596 = C26584 + C26585;
    const double C10280 = C10276 + C10277;
    const double C10279 = C10273 + C10274;
    const double C31006 = C31005 + C30976;
    const double C12501 = C12500 + C12498;
    const double C29450 = C29449 + C29447;
    const double C17475 = C30883 * C879;
    const double C17469 = C30883 * C870;
    const double C17464 = C30883 * C238;
    const double C17458 = C30883 * C218;
    const double C17452 = C30883 * C228;
    const double C17446 = C30883 * C213;
    const double C17765 = C30883 * C239;
    const double C17759 = C30883 * C219;
    const double C17753 = C30883 * C229;
    const double C17747 = C30883 * C214;
    const double C18081 = C30883 * C1062;
    const double C18075 = C30883 * C1050;
    const double C18069 = C30883 * C628;
    const double C18063 = C30883 * C618;
    const double C18555 = C30883 * C1068;
    const double C18549 = C30883 * C1053;
    const double C18543 = C30883 * C343;
    const double C18537 = C30883 * C323;
    const double C18532 = C30883 * C333;
    const double C18526 = C30883 * C318;
    const double C18761 = C30883 * C629;
    const double C18755 = C30883 * C619;
    const double C18967 = C30883 * C334;
    const double C18961 = C30883 * C319;
    const double C24062 = C30883 * C1934;
    const double C24056 = C30883 * C1925;
    const double C24373 = C30883 * C344;
    const double C24367 = C30883 * C324;
    const double C113 =
        (((((0 - (C30826 * C30827) / C30828) * ae) / C30828 -
           (0 * be) / C30840 + (2 * C30829) / C30828) /
              C30834 -
          ((C30826 * C30863 + 0) * be) / C30828 + C30846 - C30856) /
             C30834 +
         ((C30826 * C30877 + 0) * ae) / C30828) /
            C30834 -
        ((C30826 * (C30877 / C30834 +
                    ((C30826 * C30883 + C31777) * ae) / C30828 + C30879) +
          C32189) *
         be) /
            C30828 +
        C30883 / C30834 + ((C30826 * C30879 + C31785) * ae) / C30828 +
        2 * (C30854 / C30834 - (0 * be) / C30828);
    const double C114 =
        (C30877 / C30834 + ((C30826 * C30883 + C31777) * ae) / C30828 +
         C30879) /
            C30834 -
        ((C30826 * (C30883 / C30834 +
                    ((C30826 * C30879 + C31785) * ae) / C30828 + 2 * C30889) +
          C32182) *
         be) /
            C30828 +
        2 * (C30879 / C30834 + ((C30826 * C30889 + C17324) * ae) / C30828);
    const double C115 =
        (C30883 / C30834 + ((C30826 * C30879 + C31785) * ae) / C30828 +
         2 * C30889) /
            C30834 -
        ((C30826 *
              (C30879 / C30834 + ((C30826 * C30889 + C17324) * ae) / C30828) +
          C32169) *
         be) /
            C30828 +
        3 * (C30889 / C30834 + (0 * ae) / C30828);
    const double C2596 =
        C30877 / C30834 - ((C30826 * C30883 + C31777) * be) / C30828 + C30879;
    const double C2597 = C30883 / C30834 -
                         ((C30826 * C30879 + C31785) * be) / C30828 +
                         2 * C30889;
    const double C14631 =
        C30877 / C30834 + ((C30826 * C30883 + C31777) * ae) / C30828 + C30879;
    const double C14632 = C30883 / C30834 +
                          ((C30826 * C30879 + C31785) * ae) / C30828 +
                          2 * C30889;
    const double C5316 = C5314 + C5312;
    const double C5315 = C5313 + C5309;
    const double C26603 = C26599 + C26595;
    const double C26601 = C26597 + C26589;
    const double C26602 = C26598 + C26592;
    const double C26600 = C26596 + C26586;
    const double C10282 = C10280 + C10278;
    const double C10281 = C10279 + C10275;
    const double C30363 = C6829 * C31006;
    const double C5981 =
        (((((0 - (C30913 * C30959) / C30828) * ae) / C30828 -
           (0 * be) / C30840 + (2 * C30960) / C30828) /
              C30834 -
          ((C30913 * C30995 + 0) * be) / C30828 + C30969 - C30982) /
             C30834 +
         ((C30913 * C31004 + 0) * ae) / C30828) /
            C30834 -
        ((C30913 * (C31004 / C30834 +
                    ((C30913 * C31006 + C31919) * ae) / C30828 + C30998) +
          C32190) *
         be) /
            C30828 +
        C31006 / C30834 + ((C30913 * C30998 + C31926) * ae) / C30828 +
        2 * (C30976 / C30834 - (0 * be) / C30828);
    const double C5982 =
        (C31004 / C30834 + ((C30913 * C31006 + C31919) * ae) / C30828 +
         C30998) /
            C30834 -
        ((C30913 * (C31006 / C30834 +
                    ((C30913 * C30998 + C31926) * ae) / C30828 + 2 * C31012) +
          C32186) *
         be) /
            C30828 +
        2 * (C30998 / C30834 + ((C30913 * C31012 + C17327) * ae) / C30828);
    const double C5983 =
        (C31006 / C30834 + ((C30913 * C30998 + C31926) * ae) / C30828 +
         2 * C31012) /
            C30834 -
        ((C30913 *
              (C30998 / C30834 + ((C30913 * C31012 + C17327) * ae) / C30828) +
          C32176) *
         be) /
            C30828 +
        3 * (C31012 / C30834 + (0 * ae) / C30828);
    const double C7429 =
        C31004 / C30834 - ((C30913 * C31006 + C31919) * be) / C30828 + C30998;
    const double C7430 = C31006 / C30834 -
                         ((C30913 * C30998 + C31926) * be) / C30828 +
                         2 * C31012;
    const double C15393 =
        C31004 / C30834 + ((C30913 * C31006 + C31919) * ae) / C30828 + C30998;
    const double C15394 = C31006 / C30834 +
                          ((C30913 * C30998 + C31926) * ae) / C30828 +
                          2 * C31012;
    const double C17484 = C17463 - C17464;
    const double C17481 = C17457 - C17458;
    const double C19176 = C18069 - C18070;
    const double C19170 = C18070 - C18069;
    const double C19173 = C18063 - C18064;
    const double C19167 = C18064 - C18063;
    const double C24053 = C18544 - C18543;
    const double C24050 = C18538 - C18537;
    const double C2725 = C2596 * C238;
    const double C2717 = C2596 * C218;
    const double C2710 = C2596 * C228;
    const double C2702 = C2596 * C213;
    const double C2969 = C2596 * C229;
    const double C2961 = C2596 * C214;
    const double C3245 = C2596 * C628;
    const double C3237 = C2596 * C618;
    const double C3573 = C2596 * C343;
    const double C3565 = C2596 * C323;
    const double C3558 = C2596 * C333;
    const double C3550 = C2596 * C318;
    const double C3849 = C2596 * C334;
    const double C3841 = C2596 * C319;
    const double C2727 = C2597 * C239;
    const double C2719 = C2597 * C219;
    const double C2712 = C2597 * C229;
    const double C2704 = C2597 * C214;
    const double C2971 = C2597 * C230;
    const double C2963 = C2597 * C215;
    const double C3247 = C2597 * C629;
    const double C3239 = C2597 * C619;
    const double C3575 = C2597 * C344;
    const double C3567 = C2597 * C324;
    const double C3560 = C2597 * C334;
    const double C3552 = C2597 * C319;
    const double C3851 = C2597 * C335;
    const double C3843 = C2597 * C320;
    const double C14760 = C14631 * C238;
    const double C14752 = C14631 * C218;
    const double C14745 = C14631 * C228;
    const double C14737 = C14631 * C213;
    const double C15004 = C14631 * C229;
    const double C14996 = C14631 * C214;
    const double C15280 = C14631 * C628;
    const double C15272 = C14631 * C618;
    const double C20547 = C14631 * C343;
    const double C20539 = C14631 * C323;
    const double C20532 = C14631 * C333;
    const double C20524 = C14631 * C318;
    const double C20823 = C14631 * C334;
    const double C20815 = C14631 * C319;
    const double C14762 = C14632 * C239;
    const double C14754 = C14632 * C219;
    const double C14747 = C14632 * C229;
    const double C14739 = C14632 * C214;
    const double C15006 = C14632 * C230;
    const double C14998 = C14632 * C215;
    const double C15282 = C14632 * C629;
    const double C15274 = C14632 * C619;
    const double C20549 = C14632 * C344;
    const double C20541 = C14632 * C324;
    const double C20534 = C14632 * C334;
    const double C20526 = C14632 * C319;
    const double C20825 = C14632 * C335;
    const double C20817 = C14632 * C320;
    const double C10284 = C10282 * C31864;
    const double C10283 = C10281 * C118;
    const double C30369 = C30363 + C30364;
    const double C17488 = C17484 + C17485;
    const double C17487 = C17481 + C17482;
    const double C19182 = C19176 + C19177;
    const double C19180 = C19170 + C19171;
    const double C19181 = C19173 + C19174;
    const double C19179 = C19167 + C19168;
    const double C24069 = C24053 + C24054;
    const double C24068 = C24050 + C24051;
    const double C10285 = C10283 + C10284;
    const double C30370 = C30369 + C30365;
    const double C17490 = C17488 + C17486;
    const double C17489 = C17487 + C17483;
    const double C19186 = C19182 + C19178;
    const double C19184 = C19180 + C19172;
    const double C19185 = C19181 + C19175;
    const double C19183 = C19179 + C19169;
    const double C24071 = C24069 + C24055;
    const double C24070 = C24068 + C24052;
    const double C30371 = C30370 + C30366;
    const double C24073 = C24071 * C31864;
    const double C24072 = C24070 * C118;
    const double C30372 = C30371 + C30367;
    const double C24074 = C24072 + C24073;
    const double C30373 = C30372 + C30368;
    d2ee[0] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
             C17324 * C128 - C30889 * C121) *
                C31006 +
            (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
             C17324 * C142 - C30889 * C133) *
                C31919 +
            (C17445 - C17446 + C17447 - C17448 + C17449 - C17450) * C30998 +
            (C17451 - C17452 + C17453 - C17454 + C17455 - C17456) * C31926 +
            C17489 * C31012 + C17490 * C17327) *
               C31876 * C31835 * C440 +
           ((C17446 - C17445 + C17448 - C17447 + C17450 - C17449) * C31006 +
            (C17452 - C17451 + C17454 - C17453 + C17456 - C17455) * C31919 +
            (C17458 - C17457 + C17460 - C17459 + C17462 - C17461) * C30998 +
            (C17464 - C17463 + C17466 - C17465 + C17468 - C17467) * C31926 +
            (C17469 - C17470 + C17471 - C17472 + C17473 - C17474) * C31012 +
            (C17475 - C17476 + C17477 - C17478 + C17479 - C17480) * C17327) *
               C31876 * C31835 * C441) *
              C442 +
          (((C30883 * C120 - C31777 * C127 + C30879 * C121 - C31785 * C128 +
             C30889 * C122 - C17324 * C129) *
                C31006 +
            (C30883 * C132 - C31777 * C141 + C30879 * C133 - C31785 * C142 +
             C30889 * C134 - C17324 * C143) *
                C31919 +
            (C17747 - C17748 + C17749 - C17750 + C17751 - C17752) * C30998 +
            (C17753 - C17754 + C17755 - C17756 + C17757 - C17758) * C31926 +
            (C17759 - C17760 + C17761 - C17762 + C17763 - C17764) * C31012 +
            (C17765 - C17766 + C17767 - C17768 + C17769 - C17770) * C17327) *
               C31876 * C31835 * C440 +
           ((C17748 - C17747 + C17750 - C17749 + C17752 - C17751) * C31006 +
            (C17754 - C17753 + C17756 - C17755 + C17758 - C17757) * C31919 +
            (C17760 - C17759 + C17762 - C17761 + C17764 - C17763) * C30998 +
            (C17766 - C17765 + C17768 - C17767 + C17770 - C17769) * C31926 +
            (C31777 * C877 - C30883 * C871 + C31785 * C878 - C30879 * C872 +
             C17324 * C1233 - C30889 * C1232) *
                C31012 +
            (C31777 * C889 - C30883 * C880 + C31785 * C890 - C30879 * C881 +
             C17324 * C1235 - C30889 * C1234) *
                C17327) *
               C31876 * C31835 * C441) *
              C443)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
             C17324 * C128 - C30889 * C121) *
                C31006 +
            (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
             C17324 * C142 - C30889 * C133) *
                C31919 +
            (C17445 - C17446 + C17447 - C17448 + C17449 - C17450) * C30998 +
            (C17451 - C17452 + C17453 - C17454 + C17455 - C17456) * C31926 +
            C17489 * C31012 + C17490 * C17327) *
               C31876 * C530 +
           ((C30883 * C318 - C31777 * C328 + C30879 * C319 - C31785 * C329 +
             C30889 * C320 - C17324 * C330) *
                C31006 +
            (C30883 * C333 - C31777 * C348 + C30879 * C334 - C31785 * C349 +
             C30889 * C335 - C17324 * C350) *
                C31919 +
            (C18063 - C18064 + C18065 - C18066 + C18067 - C18068) * C30998 +
            (C18069 - C18070 + C18071 - C18072 + C18073 - C18074) * C31926 +
            (C18075 - C18076 + C18077 - C18078 + C18079 - C18080) * C31012 +
            (C18081 - C18082 + C18083 - C18084 + C18085 - C18086) * C17327) *
               C31876 * C531) *
              C440 +
          (((C17446 - C17445 + C17448 - C17447 + C17450 - C17449) * C31006 +
            (C17452 - C17451 + C17454 - C17453 + C17456 - C17455) * C31919 +
            (C17458 - C17457 + C17460 - C17459 + C17462 - C17461) * C30998 +
            (C17464 - C17463 + C17466 - C17465 + C17468 - C17467) * C31926 +
            (C17469 - C17470 + C17471 - C17472 + C17473 - C17474) * C31012 +
            (C17475 - C17476 + C17477 - C17478 + C17479 - C17480) * C17327) *
               C31876 * C530 +
           ((C18064 - C18063 + C18066 - C18065 + C18068 - C18067) * C31006 +
            (C18070 - C18069 + C18072 - C18071 + C18074 - C18073) * C31919 +
            (C18076 - C18075 + C18078 - C18077 + C18080 - C18079) * C30998 +
            (C18082 - C18081 + C18084 - C18083 + C18086 - C18085) * C31926 +
            (C31777 * C1559 - C30883 * C1556 + C31785 * C1560 - C30879 * C1557 +
             C17324 * C1561 - C30889 * C1558) *
                C31012 +
            (C31777 * C1565 - C30883 * C1562 + C31785 * C1566 - C30879 * C1563 +
             C17324 * C1567 - C30889 * C1564) *
                C17327) *
               C31876 * C531) *
              C441) *
         C31809) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
            C17324 * C128 - C30889 * C121) *
               C31006 +
           (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
            C17324 * C142 - C30889 * C133) *
               C31919 +
           (C17445 - C17446 + C17447 - C17448 + C17449 - C17450) * C30998 +
           (C17451 - C17452 + C17453 - C17454 + C17455 - C17456) * C31926 +
           C17489 * C31012 + C17490 * C17327) *
              C31876 * C31835 * C209 +
          ((C17446 - C17445 + C17448 - C17447 + C17450 - C17449) * C31006 +
           (C17452 - C17451 + C17454 - C17453 + C17456 - C17455) * C31919 +
           (C17458 - C17457 + C17460 - C17459 + C17462 - C17461) * C30998 +
           (C17464 - C17463 + C17466 - C17465 + C17468 - C17467) * C31926 +
           (C17469 - C17470 + C17471 - C17472 + C17473 - C17474) * C31012 +
           (C17475 - C17476 + C17477 - C17478 + C17479 - C17480) * C17327) *
              C31876 * C31835 * C210 +
          (C17489 * C31006 + C17490 * C31919 +
           (C17470 - C17469 + C17472 - C17471 + C17474 - C17473) * C30998 +
           (C17476 - C17475 + C17478 - C17477 + C17480 - C17479) * C31926 +
           (C31777 * C882 - C30883 * C873 + C31785 * C883 - C30879 * C874 +
            C17324 * C884 - C30889 * C875) *
               C31012 +
           (C31777 * C891 - C30883 * C885 + C31785 * C892 - C30879 * C886 +
            C17324 * C893 - C30889 * C887) *
               C17327) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
            C17324 * C128 - C30889 * C121) *
               C31006 +
           (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
            C17324 * C142 - C30889 * C133) *
               C31919 +
           (C31777 * C223 - C30883 * C213 + C31785 * C224 - C30879 * C214 +
            C17324 * C225 - C30889 * C215) *
               C30998 +
           (C31777 * C243 - C30883 * C228 + C31785 * C244 - C30879 * C229 +
            C17324 * C245 - C30889 * C230) *
               C31926 +
           (C31777 * C233 - C30883 * C218 + C31785 * C234 - C30879 * C219 +
            C17324 * C235 - C30889 * C220) *
               C31012 +
           (C31777 * C248 - C30883 * C238 + C31785 * C249 - C30879 * C239 +
            C17324 * C250 - C30889 * C240) *
               C17327) *
              C31876 * C31835 * C31821 * C110 +
          ((C30883 * C120 - C31777 * C127 + C30879 * C121 - C31785 * C128 +
            C30889 * C122 - C17324 * C129) *
               C31006 +
           (C30883 * C132 - C31777 * C141 + C30879 * C133 - C31785 * C142 +
            C30889 * C134 - C17324 * C143) *
               C31919 +
           (C30883 * C214 - C31777 * C224 + C30879 * C215 - C31785 * C225 +
            C30889 * C216 - C17324 * C226) *
               C30998 +
           (C30883 * C229 - C31777 * C244 + C30879 * C230 - C31785 * C245 +
            C30889 * C231 - C17324 * C246) *
               C31926 +
           (C30883 * C219 - C31777 * C234 + C30879 * C220 - C31785 * C235 +
            C30889 * C221 - C17324 * C236) *
               C31012 +
           (C30883 * C239 - C31777 * C249 + C30879 * C240 - C31785 * C250 +
            C30889 * C241 - C17324 * C251) *
               C17327) *
              C31876 * C31835 * C31821 * C111 +
          ((C31777 * C128 - C30883 * C121 + C31785 * C129 - C30879 * C122 +
            C17324 * C130 - C30889 * C123) *
               C31006 +
           (C31777 * C142 - C30883 * C133 + C31785 * C143 - C30879 * C134 +
            C17324 * C144 - C30889 * C135) *
               C31919 +
           (C31777 * C225 - C30883 * C215 + C31785 * C226 - C30879 * C216 +
            C17324 * C227 - C30889 * C217) *
               C30998 +
           (C31777 * C245 - C30883 * C230 + C31785 * C246 - C30879 * C231 +
            C17324 * C247 - C30889 * C232) *
               C31926 +
           (C31777 * C235 - C30883 * C220 + C31785 * C236 - C30879 * C221 +
            C17324 * C237 - C30889 * C222) *
               C31012 +
           (C31777 * C250 - C30883 * C240 + C31785 * C251 - C30879 * C241 +
            C17324 * C252 - C30889 * C242) *
               C17327) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
            C17324 * C128 - C30889 * C121) *
               C31006 +
           (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
            C17324 * C142 - C30889 * C133) *
               C31919 +
           (C17445 - C17446 + C17447 - C17448 + C17449 - C17450) * C30998 +
           (C17451 - C17452 + C17453 - C17454 + C17455 - C17456) * C31926 +
           C17489 * C31012 + C17490 * C17327) *
              C31876 * C315 +
          ((C30883 * C318 - C31777 * C328 + C30879 * C319 - C31785 * C329 +
            C30889 * C320 - C17324 * C330) *
               C31006 +
           (C30883 * C333 - C31777 * C348 + C30879 * C334 - C31785 * C349 +
            C30889 * C335 - C17324 * C350) *
               C31919 +
           (C30883 * C618 - C31777 * C623 + C30879 * C619 - C31785 * C624 +
            C30889 * C620 - C17324 * C625) *
               C30998 +
           (C30883 * C628 - C31777 * C633 + C30879 * C629 - C31785 * C634 +
            C30889 * C630 - C17324 * C635) *
               C31926 +
           (C30883 * C1050 - C31777 * C1059 + C30879 * C1051 - C31785 * C1060 +
            C30889 * C1052 - C17324 * C1061) *
               C31012 +
           (C30883 * C1062 - C31777 * C1077 + C30879 * C1063 - C31785 * C1078 +
            C30889 * C1064 - C17324 * C1079) *
               C17327) *
              C31876 * C316 +
          ((C31777 * C338 - C30883 * C323 + C31785 * C339 - C30879 * C324 +
            C17324 * C340 - C30889 * C325) *
               C31006 +
           (C31777 * C353 - C30883 * C343 + C31785 * C354 - C30879 * C344 +
            C17324 * C355 - C30889 * C345) *
               C31919 +
           (C31777 * C1065 - C30883 * C1053 + C31785 * C1066 - C30879 * C1054 +
            C17324 * C1067 - C30889 * C1055) *
               C30998 +
           (C31777 * C1080 - C30883 * C1068 + C31785 * C1081 - C30879 * C1069 +
            C17324 * C1082 - C30889 * C1070) *
               C31926 +
           (C31777 * C1071 - C30883 * C1056 + C31785 * C1072 - C30879 * C1057 +
            C17324 * C1073 - C30889 * C1058) *
               C31012 +
           (C31777 * C1083 - C30883 * C1074 + C31785 * C1084 - C30879 * C1075 +
            C17324 * C1085 - C30889 * C1076) *
               C17327) *
              C31876 * C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
             C17324 * C128 - C30889 * C121) *
                C31006 +
            (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
             C17324 * C142 - C30889 * C133) *
                C31919 +
            (C17445 - C17446 + C17447 - C17448 + C17449 - C17450) * C30998 +
            (C17451 - C17452 + C17453 - C17454 + C17455 - C17456) * C31926 +
            C17489 * C31012 + C17490 * C17327) *
               C31876 * C530 +
           ((C30883 * C318 - C31777 * C328 + C30879 * C319 - C31785 * C329 +
             C30889 * C320 - C17324 * C330) *
                C31006 +
            (C30883 * C333 - C31777 * C348 + C30879 * C334 - C31785 * C349 +
             C30889 * C335 - C17324 * C350) *
                C31919 +
            (C30883 * C618 - C31777 * C623 + C30879 * C619 - C31785 * C624 +
             C30889 * C620 - C17324 * C625) *
                C30998 +
            (C30883 * C628 - C31777 * C633 + C30879 * C629 - C31785 * C634 +
             C30889 * C630 - C17324 * C635) *
                C31926 +
            (C30883 * C1050 - C31777 * C1059 + C30879 * C1051 - C31785 * C1060 +
             C30889 * C1052 - C17324 * C1061) *
                C31012 +
            (C30883 * C1062 - C31777 * C1077 + C30879 * C1063 - C31785 * C1078 +
             C30889 * C1064 - C17324 * C1079) *
                C17327) *
               C31876 * C531) *
              C31821 * C442 +
          (((C30883 * C120 - C31777 * C127 + C30879 * C121 - C31785 * C128 +
             C30889 * C122 - C17324 * C129) *
                C31006 +
            (C30883 * C132 - C31777 * C141 + C30879 * C133 - C31785 * C142 +
             C30889 * C134 - C17324 * C143) *
                C31919 +
            (C17747 - C17748 + C17749 - C17750 + C17751 - C17752) * C30998 +
            (C17753 - C17754 + C17755 - C17756 + C17757 - C17758) * C31926 +
            (C17759 - C17760 + C17761 - C17762 + C17763 - C17764) * C31012 +
            (C17765 - C17766 + C17767 - C17768 + C17769 - C17770) * C17327) *
               C31876 * C530 +
           ((C31777 * C329 - C30883 * C319 + C31785 * C330 - C30879 * C320 +
             C17324 * C331 - C30889 * C321) *
                C31006 +
            (C31777 * C349 - C30883 * C334 + C31785 * C350 - C30879 * C335 +
             C17324 * C351 - C30889 * C336) *
                C31919 +
            (C31777 * C624 - C30883 * C619 + C31785 * C625 - C30879 * C620 +
             C17324 * C626 - C30889 * C621) *
                C30998 +
            (C31777 * C634 - C30883 * C629 + C31785 * C635 - C30879 * C630 +
             C17324 * C636 - C30889 * C631) *
                C31926 +
            (C31777 * C1060 - C30883 * C1051 + C31785 * C1061 - C30879 * C1052 +
             C17324 * C1407 - C30889 * C1406) *
                C31012 +
            (C31777 * C1078 - C30883 * C1063 + C31785 * C1079 - C30879 * C1064 +
             C17324 * C1409 - C30889 * C1408) *
                C17327) *
               C31876 * C531) *
              C31821 * C443)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
            C17324 * C128 - C30889 * C121) *
               C31006 +
           (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
            C17324 * C142 - C30889 * C133) *
               C31919 +
           (C31777 * C223 - C30883 * C213 + C31785 * C224 - C30879 * C214 +
            C17324 * C225 - C30889 * C215) *
               C30998 +
           (C31777 * C243 - C30883 * C228 + C31785 * C244 - C30879 * C229 +
            C17324 * C245 - C30889 * C230) *
               C31926 +
           (C31777 * C233 - C30883 * C218 + C31785 * C234 - C30879 * C219 +
            C17324 * C235 - C30889 * C220) *
               C31012 +
           (C31777 * C248 - C30883 * C238 + C31785 * C249 - C30879 * C239 +
            C17324 * C250 - C30889 * C240) *
               C17327) *
              C31876 * C31835 * C31821 * C110 +
          ((C30883 * C120 - C31777 * C127 + C30879 * C121 - C31785 * C128 +
            C30889 * C122 - C17324 * C129) *
               C31006 +
           (C30883 * C132 - C31777 * C141 + C30879 * C133 - C31785 * C142 +
            C30889 * C134 - C17324 * C143) *
               C31919 +
           (C30883 * C214 - C31777 * C224 + C30879 * C215 - C31785 * C225 +
            C30889 * C216 - C17324 * C226) *
               C30998 +
           (C30883 * C229 - C31777 * C244 + C30879 * C230 - C31785 * C245 +
            C30889 * C231 - C17324 * C246) *
               C31926 +
           (C30883 * C219 - C31777 * C234 + C30879 * C220 - C31785 * C235 +
            C30889 * C221 - C17324 * C236) *
               C31012 +
           (C30883 * C239 - C31777 * C249 + C30879 * C240 - C31785 * C250 +
            C30889 * C241 - C17324 * C251) *
               C17327) *
              C31876 * C31835 * C31821 * C111 +
          ((C31777 * C128 - C30883 * C121 + C31785 * C129 - C30879 * C122 +
            C17324 * C130 - C30889 * C123) *
               C31006 +
           (C31777 * C142 - C30883 * C133 + C31785 * C143 - C30879 * C134 +
            C17324 * C144 - C30889 * C135) *
               C31919 +
           (C31777 * C225 - C30883 * C215 + C31785 * C226 - C30879 * C216 +
            C17324 * C227 - C30889 * C217) *
               C30998 +
           (C31777 * C245 - C30883 * C230 + C31785 * C246 - C30879 * C231 +
            C17324 * C247 - C30889 * C232) *
               C31926 +
           (C31777 * C235 - C30883 * C220 + C31785 * C236 - C30879 * C221 +
            C17324 * C237 - C30889 * C222) *
               C31012 +
           (C31777 * C250 - C30883 * C240 + C31785 * C251 - C30879 * C241 +
            C17324 * C252 - C30889 * C242) *
               C17327) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
            C17324 * C128 - C30889 * C121) *
               C31006 +
           (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
            C17324 * C142 - C30889 * C133) *
               C31919 +
           (C17445 - C17446 + C17447 - C17448 + C17449 - C17450) * C30998 +
           (C17451 - C17452 + C17453 - C17454 + C17455 - C17456) * C31926 +
           C17489 * C31012 + C17490 * C17327) *
              C31876 * C31835 * C209 +
          ((C17446 - C17445 + C17448 - C17447 + C17450 - C17449) * C31006 +
           (C17452 - C17451 + C17454 - C17453 + C17456 - C17455) * C31919 +
           (C17458 - C17457 + C17460 - C17459 + C17462 - C17461) * C30998 +
           (C17464 - C17463 + C17466 - C17465 + C17468 - C17467) * C31926 +
           (C17469 - C17470 + C17471 - C17472 + C17473 - C17474) * C31012 +
           (C17475 - C17476 + C17477 - C17478 + C17479 - C17480) * C17327) *
              C31876 * C31835 * C210 +
          (C17489 * C31006 + C17490 * C31919 +
           (C17470 - C17469 + C17472 - C17471 + C17474 - C17473) * C30998 +
           (C17476 - C17475 + C17478 - C17477 + C17480 - C17479) * C31926 +
           (C31777 * C882 - C30883 * C873 + C31785 * C883 - C30879 * C874 +
            C17324 * C884 - C30889 * C875) *
               C31012 +
           (C31777 * C891 - C30883 * C885 + C31785 * C892 - C30879 * C886 +
            C17324 * C893 - C30889 * C887) *
               C17327) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                 C31006 +
             (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                 C31919 +
             (C15496 - C15497 + C15498 - C15499) * C30998 +
             (C15500 - C15501 + C15502 - C15503) * C31926 + C15536 * C31012 +
             C15537 * C17327) *
                C32118 +
            ((C16530 - C16531 + C16532 - C16533) * C31006 +
             (C16534 - C16535 + C16536 - C16537) * C31919 + C17207 * C30998 +
             C17208 * C31926 + C19483 * C31012 + C19484 * C17327) *
                C31963) *
               C31835 * C440 +
           (((C15497 - C15496 + C15499 - C15498) * C31006 +
             (C15501 - C15500 + C15503 - C15502) * C31919 +
             (C15505 - C15504 + C15507 - C15506) * C30998 +
             (C15509 - C15508 + C15511 - C15510) * C31926 +
             (C15513 - C15512 + C15515 - C15514) * C31012 +
             (C15517 - C15516 + C15519 - C15518) * C17327) *
                C32118 +
            (C17209 * C31006 + C17210 * C31919 +
             (C16060 - C16061 + C16062 - C16063) * C30998 +
             (C16064 - C16065 + C16066 - C16067) * C31926 +
             (C16068 - C16069 + C16070 - C16071) * C31012 +
             (C16072 - C16073 + C16074 - C16075) * C17327) *
                C31963) *
               C31835 * C441) *
              C442 +
          ((((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                 C31006 +
             (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                 C31919 +
             (C15768 - C15769 + C15770 - C15771) * C30998 +
             (C15772 - C15773 + C15774 - C15775) * C31926 +
             (C15776 - C15777 + C15778 - C15779) * C31012 +
             (C15780 - C15781 + C15782 - C15783) * C17327) *
                C32118 +
            ((C16985 - C16986 + C16987 - C16988) * C31006 +
             (C16989 - C16990 + C16991 - C16992) * C31919 +
             (C16775 - C16776 + C16777 - C16778) * C30998 +
             (C16779 - C16780 + C16781 - C16782) * C31926 +
             (C19825 - C19826 + C19827 - C19828) * C31012 +
             (C19829 - C19830 + C19831 - C19832) * C17327) *
                C31963) *
               C31835 * C440 +
           (((C15769 - C15768 + C15771 - C15770) * C31006 +
             (C15773 - C15772 + C15775 - C15774) * C31919 +
             (C15777 - C15776 + C15779 - C15778) * C30998 +
             (C15781 - C15780 + C15783 - C15782) * C31926 +
             (C15785 - C15784 + C15787 - C15786) * C31012 +
             (C15789 - C15788 + C15791 - C15790) * C17327) *
                C32118 +
            ((C16776 - C16775 + C16778 - C16777) * C31006 +
             (C16780 - C16779 + C16782 - C16781) * C31919 +
             (C19826 - C19825 + C19828 - C19827) * C30998 +
             (C19830 - C19829 + C19832 - C19831) * C31926 +
             (C15385 * C1560 - C15391 * C1557 + C31782 * C1561 -
              C15392 * C1558) *
                 C31012 +
             (C15385 * C1566 - C15391 * C1563 + C31782 * C1567 -
              C15392 * C1564) *
                 C17327) *
                C31963) *
               C31835 * C441) *
              C443)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                 C31006 +
             (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                 C31919 +
             (C15496 - C15497 + C15498 - C15499) * C30998 +
             (C15500 - C15501 + C15502 - C15503) * C31926 + C15536 * C31012 +
             C15537 * C17327) *
                C32118 +
            ((C16530 - C16531 + C16532 - C16533) * C31006 +
             (C16534 - C16535 + C16536 - C16537) * C31919 + C17207 * C30998 +
             C17208 * C31926 + C19483 * C31012 + C19484 * C17327) *
                C31963) *
               C530 +
           (((C16531 - C16530 + C16533 - C16532) * C31006 +
             (C16535 - C16534 + C16537 - C16536) * C31919 + C17209 * C30998 +
             C17210 * C31926 + C20225 * C31012 + C20226 * C17327) *
                C32118 +
            ((C16539 - C16538 + C16541 - C16540) * C31006 +
             (C16543 - C16542 + C16545 - C16544) * C31919 + C17211 * C30998 +
             C17212 * C31926 + (C16376 - C16377 + C16378 - C16379) * C31012 +
             (C16380 - C16381 + C16382 - C16383) * C17327) *
                C31963) *
               C531) *
              C440 +
          ((((C15497 - C15496 + C15499 - C15498) * C31006 +
             (C15501 - C15500 + C15503 - C15502) * C31919 +
             (C15505 - C15504 + C15507 - C15506) * C30998 +
             (C15509 - C15508 + C15511 - C15510) * C31926 +
             (C15513 - C15512 + C15515 - C15514) * C31012 +
             (C15517 - C15516 + C15519 - C15518) * C17327) *
                C32118 +
            (C17209 * C31006 + C17210 * C31919 + C20225 * C30998 +
             C20226 * C31926 + (C16068 - C16069 + C16070 - C16071) * C31012 +
             (C16072 - C16073 + C16074 - C16075) * C17327) *
                C31963) *
               C530 +
           ((C17207 * C31006 + C17208 * C31919 + C19483 * C30998 +
             C19484 * C31926 + (C16069 - C16068 + C16071 - C16070) * C31012 +
             (C16073 - C16072 + C16075 - C16074) * C17327) *
                C32118 +
            (C16570 * C31006 + C16571 * C31919 +
             (C16377 - C16376 + C16379 - C16378) * C30998 +
             (C16381 - C16380 + C16383 - C16382) * C31926 +
             (C15385 * C6149 - C15391 * C6145 + C31782 * C6986 -
              C15392 * C6985) *
                 C31012 +
             (C15385 * C6154 - C15391 * C6150 + C31782 * C6988 -
              C15392 * C6987) *
                 C17327) *
                C31963) *
               C531) *
              C441) *
         C31809) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C31006 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C31919 +
            (C15496 - C15497 + C15498 - C15499) * C30998 +
            (C15500 - C15501 + C15502 - C15503) * C31926 + C15536 * C31012 +
            C15537 * C17327) *
               C32118 +
           ((C16530 - C16531 + C16532 - C16533) * C31006 +
            (C16534 - C16535 + C16536 - C16537) * C31919 + C17207 * C30998 +
            C17208 * C31926 + C19483 * C31012 + C19484 * C17327) *
               C31963) *
              C31835 * C209 +
          (((C15497 - C15496 + C15499 - C15498) * C31006 +
            (C15501 - C15500 + C15503 - C15502) * C31919 +
            (C15505 - C15504 + C15507 - C15506) * C30998 +
            (C15509 - C15508 + C15511 - C15510) * C31926 +
            (C15513 - C15512 + C15515 - C15514) * C31012 +
            (C15517 - C15516 + C15519 - C15518) * C17327) *
               C32118 +
           (C17209 * C31006 + C17210 * C31919 +
            (C16060 - C16061 + C16062 - C16063) * C30998 +
            (C16064 - C16065 + C16066 - C16067) * C31926 +
            (C16068 - C16069 + C16070 - C16071) * C31012 +
            (C16072 - C16073 + C16074 - C16075) * C17327) *
               C31963) *
              C31835 * C210 +
          ((C15536 * C31006 + C15537 * C31919 + C15538 * C30998 +
            C15539 * C31926 + (C15521 - C15520 + C15523 - C15522) * C31012 +
            (C15525 - C15524 + C15527 - C15526) * C17327) *
               C32118 +
           (C19483 * C31006 + C19484 * C31919 +
            (C16069 - C16068 + C16071 - C16070) * C30998 +
            (C16073 - C16072 + C16075 - C16074) * C31926 +
            (C15385 * C6147 - C15391 * C6144 + C31782 * C6341 -
             C15392 * C6340) *
                C31012 +
            (C15385 * C6153 - C15391 * C6148 + C31782 * C6343 -
             C15392 * C6342) *
                C17327) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C31006 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C31919 +
            (C15496 - C15497 + C15498 - C15499) * C30998 +
            (C15500 - C15501 + C15502 - C15503) * C31926 + C15536 * C31012 +
            C15537 * C17327) *
               C32118 +
           ((C16530 - C16531 + C16532 - C16533) * C31006 +
            (C16534 - C16535 + C16536 - C16537) * C31919 + C17207 * C30998 +
            C17208 * C31926 + (C16061 - C16060 + C16063 - C16062) * C31012 +
            (C16065 - C16064 + C16067 - C16066) * C17327) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                C31006 +
            (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                C31919 +
            (C15768 - C15769 + C15770 - C15771) * C30998 +
            (C15772 - C15773 + C15774 - C15775) * C31926 +
            (C15776 - C15777 + C15778 - C15779) * C31012 +
            (C15780 - C15781 + C15782 - C15783) * C17327) *
               C32118 +
           ((C16985 - C16986 + C16987 - C16988) * C31006 +
            (C16989 - C16990 + C16991 - C16992) * C31919 +
            (C16775 - C16776 + C16777 - C16778) * C30998 +
            (C16779 - C16780 + C16781 - C16782) * C31926 +
            (C15391 * C1051 - C15385 * C1060 + C15392 * C1052 -
             C31782 * C1061) *
                C31012 +
            (C15391 * C1063 - C15385 * C1078 + C15392 * C1064 -
             C31782 * C1079) *
                C17327) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C15385 * C128 - C15391 * C121 + C31782 * C129 - C15392 * C122) *
                C31006 +
            (C15385 * C142 - C15391 * C133 + C31782 * C143 - C15392 * C134) *
                C31919 +
            (C15385 * C225 - C15391 * C215 + C31782 * C226 - C15392 * C216) *
                C30998 +
            (C15385 * C245 - C15391 * C230 + C31782 * C246 - C15392 * C231) *
                C31926 +
            (C15385 * C235 - C15391 * C220 + C31782 * C236 - C15392 * C221) *
                C31012 +
            (C15385 * C250 - C15391 * C240 + C31782 * C251 - C15392 * C241) *
                C17327) *
               C32118 +
           ((C15385 * C330 - C15391 * C320 + C31782 * C331 - C15392 * C321) *
                C31006 +
            (C15385 * C350 - C15391 * C335 + C31782 * C351 - C15392 * C336) *
                C31919 +
            (C15385 * C625 - C15391 * C620 + C31782 * C626 - C15392 * C621) *
                C30998 +
            (C15385 * C635 - C15391 * C630 + C31782 * C636 - C15392 * C631) *
                C31926 +
            (C15385 * C1061 - C15391 * C1052 + C31782 * C1407 -
             C15392 * C1406) *
                C31012 +
            (C15385 * C1079 - C15391 * C1064 + C31782 * C1409 -
             C15392 * C1408) *
                C17327) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C31006 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C31919 +
            (C15496 - C15497 + C15498 - C15499) * C30998 +
            (C15500 - C15501 + C15502 - C15503) * C31926 + C15536 * C31012 +
            C15537 * C17327) *
               C32118 +
           ((C16530 - C16531 + C16532 - C16533) * C31006 +
            (C16534 - C16535 + C16536 - C16537) * C31919 + C17207 * C30998 +
            C17208 * C31926 + C19483 * C31012 + C19484 * C17327) *
               C31963) *
              C315 +
          (((C16531 - C16530 + C16533 - C16532) * C31006 +
            (C16535 - C16534 + C16537 - C16536) * C31919 + C17209 * C30998 +
            C17210 * C31926 + (C16060 - C16061 + C16062 - C16063) * C31012 +
            (C16064 - C16065 + C16066 - C16067) * C17327) *
               C32118 +
           ((C16539 - C16538 + C16541 - C16540) * C31006 +
            (C16543 - C16542 + C16545 - C16544) * C31919 + C17211 * C30998 +
            C17212 * C31926 + (C16376 - C16377 + C16378 - C16379) * C31012 +
            (C16380 - C16381 + C16382 - C16383) * C17327) *
               C31963) *
              C316 +
          ((C16572 * C31006 + C16573 * C31919 + C16570 * C30998 +
            C16571 * C31926 + (C16377 - C16376 + C16379 - C16378) * C31012 +
            (C16381 - C16380 + C16383 - C16382) * C17327) *
               C32118 +
           ((C16551 - C16550 + C16553 - C16552) * C31006 +
            (C16555 - C16554 + C16557 - C16556) * C31919 +
            (C16559 - C16558 + C16561 - C16560) * C30998 +
            (C16563 - C16562 + C16565 - C16564) * C31926 +
            (C15385 * C6795 - C15391 * C6792 + C31782 * C7152 -
             C15392 * C7151) *
                C31012 +
            (C15385 * C6801 - C15391 * C6796 + C31782 * C7154 -
             C15392 * C7153) *
                C17327) *
               C31963) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                 C31006 +
             (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                 C31919 +
             (C15496 - C15497 + C15498 - C15499) * C30998 +
             (C15500 - C15501 + C15502 - C15503) * C31926 + C15536 * C31012 +
             C15537 * C17327) *
                C32118 +
            ((C16530 - C16531 + C16532 - C16533) * C31006 +
             (C16534 - C16535 + C16536 - C16537) * C31919 + C17207 * C30998 +
             C17208 * C31926 + C19483 * C31012 + C19484 * C17327) *
                C31963) *
               C530 +
           (((C16531 - C16530 + C16533 - C16532) * C31006 +
             (C16535 - C16534 + C16537 - C16536) * C31919 + C17209 * C30998 +
             C17210 * C31926 + (C16060 - C16061 + C16062 - C16063) * C31012 +
             (C16064 - C16065 + C16066 - C16067) * C17327) *
                C32118 +
            ((C16539 - C16538 + C16541 - C16540) * C31006 +
             (C16543 - C16542 + C16545 - C16544) * C31919 + C17211 * C30998 +
             C17212 * C31926 + (C16376 - C16377 + C16378 - C16379) * C31012 +
             (C16380 - C16381 + C16382 - C16383) * C17327) *
                C31963) *
               C531) *
              C31821 * C442 +
          ((((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                 C31006 +
             (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                 C31919 +
             (C15768 - C15769 + C15770 - C15771) * C30998 +
             (C15772 - C15773 + C15774 - C15775) * C31926 +
             (C15776 - C15777 + C15778 - C15779) * C31012 +
             (C15780 - C15781 + C15782 - C15783) * C17327) *
                C32118 +
            ((C16985 - C16986 + C16987 - C16988) * C31006 +
             (C16989 - C16990 + C16991 - C16992) * C31919 +
             (C16775 - C16776 + C16777 - C16778) * C30998 +
             (C16779 - C16780 + C16781 - C16782) * C31926 +
             (C19825 - C19826 + C19827 - C19828) * C31012 +
             (C19829 - C19830 + C19831 - C19832) * C17327) *
                C31963) *
               C530 +
           (((C16986 - C16985 + C16988 - C16987) * C31006 +
             (C16990 - C16989 + C16992 - C16991) * C31919 +
             (C16776 - C16775 + C16778 - C16777) * C30998 +
             (C16780 - C16779 + C16782 - C16781) * C31926 +
             (C19826 - C19825 + C19828 - C19827) * C31012 +
             (C19830 - C19829 + C19832 - C19831) * C17327) *
                C32118 +
            ((C16994 - C16993 + C16996 - C16995) * C31006 +
             (C16998 - C16997 + C17000 - C16999) * C31919 +
             (C16784 - C16783 + C16786 - C16785) * C30998 +
             (C16788 - C16787 + C16790 - C16789) * C31926 +
             (C15385 * C1072 - C15391 * C1057 + C31782 * C1073 -
              C15392 * C1058) *
                 C31012 +
             (C15385 * C1084 - C15391 * C1075 + C31782 * C1085 -
              C15392 * C1076) *
                 C17327) *
                C31963) *
               C531) *
              C31821 * C443)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C31006 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C31919 +
            (C15496 - C15497 + C15498 - C15499) * C30998 +
            (C15500 - C15501 + C15502 - C15503) * C31926 + C15536 * C31012 +
            C15537 * C17327) *
               C32118 +
           ((C16530 - C16531 + C16532 - C16533) * C31006 +
            (C16534 - C16535 + C16536 - C16537) * C31919 + C17207 * C30998 +
            C17208 * C31926 + (C16061 - C16060 + C16063 - C16062) * C31012 +
            (C16065 - C16064 + C16067 - C16066) * C17327) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                C31006 +
            (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                C31919 +
            (C15768 - C15769 + C15770 - C15771) * C30998 +
            (C15772 - C15773 + C15774 - C15775) * C31926 +
            (C15776 - C15777 + C15778 - C15779) * C31012 +
            (C15780 - C15781 + C15782 - C15783) * C17327) *
               C32118 +
           ((C16985 - C16986 + C16987 - C16988) * C31006 +
            (C16989 - C16990 + C16991 - C16992) * C31919 +
            (C16775 - C16776 + C16777 - C16778) * C30998 +
            (C16779 - C16780 + C16781 - C16782) * C31926 +
            (C15391 * C1051 - C15385 * C1060 + C15392 * C1052 -
             C31782 * C1061) *
                C31012 +
            (C15391 * C1063 - C15385 * C1078 + C15392 * C1064 -
             C31782 * C1079) *
                C17327) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C15385 * C128 - C15391 * C121 + C31782 * C129 - C15392 * C122) *
                C31006 +
            (C15385 * C142 - C15391 * C133 + C31782 * C143 - C15392 * C134) *
                C31919 +
            (C15385 * C225 - C15391 * C215 + C31782 * C226 - C15392 * C216) *
                C30998 +
            (C15385 * C245 - C15391 * C230 + C31782 * C246 - C15392 * C231) *
                C31926 +
            (C15385 * C235 - C15391 * C220 + C31782 * C236 - C15392 * C221) *
                C31012 +
            (C15385 * C250 - C15391 * C240 + C31782 * C251 - C15392 * C241) *
                C17327) *
               C32118 +
           ((C15385 * C330 - C15391 * C320 + C31782 * C331 - C15392 * C321) *
                C31006 +
            (C15385 * C350 - C15391 * C335 + C31782 * C351 - C15392 * C336) *
                C31919 +
            (C15385 * C625 - C15391 * C620 + C31782 * C626 - C15392 * C621) *
                C30998 +
            (C15385 * C635 - C15391 * C630 + C31782 * C636 - C15392 * C631) *
                C31926 +
            (C15385 * C1061 - C15391 * C1052 + C31782 * C1407 -
             C15392 * C1406) *
                C31012 +
            (C15385 * C1079 - C15391 * C1064 + C31782 * C1409 -
             C15392 * C1408) *
                C17327) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C31006 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C31919 +
            (C15496 - C15497 + C15498 - C15499) * C30998 +
            (C15500 - C15501 + C15502 - C15503) * C31926 + C15536 * C31012 +
            C15537 * C17327) *
               C32118 +
           ((C16530 - C16531 + C16532 - C16533) * C31006 +
            (C16534 - C16535 + C16536 - C16537) * C31919 + C17207 * C30998 +
            C17208 * C31926 + C19483 * C31012 + C19484 * C17327) *
               C31963) *
              C31835 * C209 +
          (((C15497 - C15496 + C15499 - C15498) * C31006 +
            (C15501 - C15500 + C15503 - C15502) * C31919 +
            (C15505 - C15504 + C15507 - C15506) * C30998 +
            (C15509 - C15508 + C15511 - C15510) * C31926 +
            (C15513 - C15512 + C15515 - C15514) * C31012 +
            (C15517 - C15516 + C15519 - C15518) * C17327) *
               C32118 +
           (C17209 * C31006 + C17210 * C31919 +
            (C16060 - C16061 + C16062 - C16063) * C30998 +
            (C16064 - C16065 + C16066 - C16067) * C31926 +
            (C16068 - C16069 + C16070 - C16071) * C31012 +
            (C16072 - C16073 + C16074 - C16075) * C17327) *
               C31963) *
              C31835 * C210 +
          ((C15536 * C31006 + C15537 * C31919 + C15538 * C30998 +
            C15539 * C31926 + (C15521 - C15520 + C15523 - C15522) * C31012 +
            (C15525 - C15524 + C15527 - C15526) * C17327) *
               C32118 +
           (C19483 * C31006 + C19484 * C31919 +
            (C16069 - C16068 + C16071 - C16070) * C30998 +
            (C16073 - C16072 + C16075 - C16074) * C31926 +
            (C15385 * C6147 - C15391 * C6144 + C31782 * C6341 -
             C15392 * C6340) *
                C31012 +
            (C15385 * C6153 - C15391 * C6148 + C31782 * C6343 -
             C15392 * C6342) *
                C17327) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C15393 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C32190 +
            (C15496 - C15497 + C15498 - C15499) * C15394 +
            (C15500 - C15501 + C15502 - C15503) * C32186 + C15536 * C15395 +
            C15537 * C32176 + C15538 * C15396 + C15539 * C32158) *
               C31876 * C31835 * C440 +
           ((C15497 - C15496 + C15499 - C15498) * C15393 +
            (C15501 - C15500 + C15503 - C15502) * C32190 +
            (C15505 - C15504 + C15507 - C15506) * C15394 +
            (C15509 - C15508 + C15511 - C15510) * C32186 +
            (C15513 - C15512 + C15515 - C15514) * C15395 +
            (C15517 - C15516 + C15519 - C15518) * C32176 +
            (C15520 - C15521 + C15522 - C15523) * C15396 +
            (C15524 - C15525 + C15526 - C15527) * C32158) *
               C31876 * C31835 * C441) *
              C442 +
          (((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                C15393 +
            (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                C32190 +
            (C15768 - C15769 + C15770 - C15771) * C15394 +
            (C15772 - C15773 + C15774 - C15775) * C32186 +
            (C15776 - C15777 + C15778 - C15779) * C15395 +
            (C15780 - C15781 + C15782 - C15783) * C32176 +
            (C15784 - C15785 + C15786 - C15787) * C15396 +
            (C15788 - C15789 + C15790 - C15791) * C32158) *
               C31876 * C31835 * C440 +
           ((C15769 - C15768 + C15771 - C15770) * C15393 +
            (C15773 - C15772 + C15775 - C15774) * C32190 +
            (C15777 - C15776 + C15779 - C15778) * C15394 +
            (C15781 - C15780 + C15783 - C15782) * C32186 +
            (C15785 - C15784 + C15787 - C15786) * C15395 +
            (C15789 - C15788 + C15791 - C15790) * C32176 +
            (C15385 * C883 - C15391 * C874 + C31782 * C884 - C15392 * C875) *
                C15396 +
            (C15385 * C892 - C15391 * C886 + C31782 * C893 - C15392 * C887) *
                C32158) *
               C31876 * C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
             C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
                C14635 +
            (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
             C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
                C14629 +
            (C14736 - C14737 + C14738 - C14739 + C14740 - C14741 + C14742 -
             C14743) *
                C14636 +
            (C14744 - C14745 + C14746 - C14747 + C14748 - C14749 + C14750 -
             C14751) *
                C31923) *
               C31876 * C31835 * C440 +
           ((C14737 - C14736 + C14739 - C14738 + C14741 - C14740 + C14743 -
             C14742) *
                C14635 +
            (C14745 - C14744 + C14747 - C14746 + C14749 - C14748 + C14751 -
             C14750) *
                C14629 +
            (C14752 - C14753 + C14754 - C14755 + C14756 - C14757 + C14758 -
             C14759) *
                C14636 +
            (C14760 - C14761 + C14762 - C14763 + C14764 - C14765 + C14766 -
             C14767) *
                C31923) *
               C31876 * C31835 * C441) *
              C442 +
          (((C14631 * C120 - C32189 * C127 + C14632 * C121 - C32182 * C128 +
             C14633 * C122 - C32169 * C129 + C14634 * C123 - C32152 * C130) *
                C14635 +
            (C14631 * C132 - C32189 * C141 + C14632 * C133 - C32182 * C142 +
             C14633 * C134 - C32169 * C143 + C14634 * C135 - C32152 * C144) *
                C14629 +
            (C14996 - C14997 + C14998 - C14999 + C15000 - C15001 + C15002 -
             C15003) *
                C14636 +
            (C15004 - C15005 + C15006 - C15007 + C15008 - C15009 + C15010 -
             C15011) *
                C31923) *
               C31876 * C31835 * C440 +
           ((C14997 - C14996 + C14999 - C14998 + C15001 - C15000 + C15003 -
             C15002) *
                C14635 +
            (C15005 - C15004 + C15007 - C15006 + C15009 - C15008 + C15011 -
             C15010) *
                C14629 +
            (C32189 * C234 - C14631 * C219 + C32182 * C235 - C14632 * C220 +
             C32169 * C236 - C14633 * C221 + C32152 * C237 - C14634 * C222) *
                C14636 +
            (C32189 * C249 - C14631 * C239 + C32182 * C250 - C14632 * C240 +
             C32169 * C251 - C14633 * C241 + C32152 * C252 - C14634 * C242) *
                C31923) *
               C31876 * C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                 C14635 +
             (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                 C14629 +
             (C15496 - C15497 + C15498 - C15499) * C14636 +
             (C15500 - C15501 + C15502 - C15503) * C31923) *
                C32184 +
            ((C16530 - C16531 + C16532 - C16533) * C14635 +
             (C16534 - C16535 + C16536 - C16537) * C14629 +
             (C16053 - C16052 + C16055 - C16054) * C14636 +
             (C16057 - C16056 + C16059 - C16058) * C31923) *
                C32173 +
            C16580 * C32151) *
               C31835 * C440 +
           (((C15497 - C15496 + C15499 - C15498) * C14635 +
             (C15501 - C15500 + C15503 - C15502) * C14629 +
             (C15505 - C15504 + C15507 - C15506) * C14636 +
             (C15509 - C15508 + C15511 - C15510) * C31923) *
                C32184 +
            ((C16052 - C16053 + C16054 - C16055) * C14635 +
             (C16056 - C16057 + C16058 - C16059) * C14629 +
             (C16060 - C16061 + C16062 - C16063) * C14636 +
             (C16064 - C16065 + C16066 - C16067) * C31923) *
                C32173 +
            ((C16369 - C16368 + C16371 - C16370) * C14635 +
             (C16373 - C16372 + C16375 - C16374) * C14629 +
             (C16376 - C16377 + C16378 - C16379) * C14636 +
             (C16380 - C16381 + C16382 - C16383) * C31923) *
                C32151) *
               C31835 * C441) *
              C442 +
          ((((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                 C14635 +
             (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                 C14629 +
             (C15768 - C15769 + C15770 - C15771) * C14636 +
             (C15772 - C15773 + C15774 - C15775) * C31923) *
                C32184 +
            ((C15391 * C319 - C15385 * C329 + C15392 * C320 - C31782 * C330) *
                 C14635 +
             (C15391 * C334 - C15385 * C349 + C15392 * C335 - C31782 * C350) *
                 C14629 +
             (C16775 - C16776 + C16777 - C16778) * C14636 +
             (C16779 - C16780 + C16781 - C16782) * C31923) *
                C32173 +
            ((C15391 * C324 - C15385 * C339 + C15392 * C325 - C31782 * C340) *
                 C14635 +
             (C15391 * C344 - C15385 * C354 + C15392 * C345 - C31782 * C355) *
                 C14629 +
             (C16783 - C16784 + C16785 - C16786) * C14636 +
             (C16787 - C16788 + C16789 - C16790) * C31923) *
                C32151) *
               C31835 * C440 +
           (((C15769 - C15768 + C15771 - C15770) * C14635 +
             (C15773 - C15772 + C15775 - C15774) * C14629 +
             (C15777 - C15776 + C15779 - C15778) * C14636 +
             (C15781 - C15780 + C15783 - C15782) * C31923) *
                C32184 +
            ((C16776 - C16775 + C16778 - C16777) * C14635 +
             (C16780 - C16779 + C16782 - C16781) * C14629 +
             (C15385 * C1060 - C15391 * C1051 + C31782 * C1061 -
              C15392 * C1052) *
                 C14636 +
             (C15385 * C1078 - C15391 * C1063 + C31782 * C1079 -
              C15392 * C1064) *
                 C31923) *
                C32173 +
            ((C16784 - C16783 + C16786 - C16785) * C14635 +
             (C16788 - C16787 + C16790 - C16789) * C14629 +
             (C15385 * C1072 - C15391 * C1057 + C31782 * C1073 -
              C15392 * C1058) *
                 C14636 +
             (C15385 * C1084 - C15391 * C1075 + C31782 * C1085 -
              C15392 * C1076) *
                 C31923) *
                C32151) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C15393 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C32190 +
            (C15496 - C15497 + C15498 - C15499) * C15394 +
            (C15500 - C15501 + C15502 - C15503) * C32186 + C15536 * C15395 +
            C15537 * C32176 + C15538 * C15396 + C15539 * C32158) *
               C31876 * C530 +
           ((C15391 * C318 - C15385 * C328 + C15392 * C319 - C31782 * C329) *
                C15393 +
            (C15391 * C333 - C15385 * C348 + C15392 * C334 - C31782 * C349) *
                C32190 +
            (C16052 - C16053 + C16054 - C16055) * C15394 +
            (C16056 - C16057 + C16058 - C16059) * C32186 +
            (C16060 - C16061 + C16062 - C16063) * C15395 +
            (C16064 - C16065 + C16066 - C16067) * C32176 +
            (C16068 - C16069 + C16070 - C16071) * C15396 +
            (C16072 - C16073 + C16074 - C16075) * C32158) *
               C31876 * C531) *
              C440 +
          (((C15497 - C15496 + C15499 - C15498) * C15393 +
            (C15501 - C15500 + C15503 - C15502) * C32190 +
            (C15505 - C15504 + C15507 - C15506) * C15394 +
            (C15509 - C15508 + C15511 - C15510) * C32186 +
            (C15513 - C15512 + C15515 - C15514) * C15395 +
            (C15517 - C15516 + C15519 - C15518) * C32176 +
            (C15520 - C15521 + C15522 - C15523) * C15396 +
            (C15524 - C15525 + C15526 - C15527) * C32158) *
               C31876 * C530 +
           ((C16053 - C16052 + C16055 - C16054) * C15393 +
            (C16057 - C16056 + C16059 - C16058) * C32190 +
            (C16061 - C16060 + C16063 - C16062) * C15394 +
            (C16065 - C16064 + C16067 - C16066) * C32186 +
            (C16069 - C16068 + C16071 - C16070) * C15395 +
            (C16073 - C16072 + C16075 - C16074) * C32176 +
            (C15385 * C6147 - C15391 * C6144 + C31782 * C6341 -
             C15392 * C6340) *
                C15396 +
            (C15385 * C6153 - C15391 * C6148 + C31782 * C6343 -
             C15392 * C6342) *
                C32158) *
               C31876 * C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
             C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
                C14635 +
            (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
             C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
                C14629 +
            (C14736 - C14737 + C14738 - C14739 + C14740 - C14741 + C14742 -
             C14743) *
                C14636 +
            (C14744 - C14745 + C14746 - C14747 + C14748 - C14749 + C14750 -
             C14751) *
                C31923) *
               C31876 * C530 +
           ((C14631 * C318 - C32189 * C328 + C14632 * C319 - C32182 * C329 +
             C14633 * C320 - C32169 * C330 + C14634 * C321 - C32152 * C331) *
                C14635 +
            (C14631 * C333 - C32189 * C348 + C14632 * C334 - C32182 * C349 +
             C14633 * C335 - C32169 * C350 + C14634 * C336 - C32152 * C351) *
                C14629 +
            (C15272 - C15273 + C15274 - C15275 + C15276 - C15277 + C15278 -
             C15279) *
                C14636 +
            (C15280 - C15281 + C15282 - C15283 + C15284 - C15285 + C15286 -
             C15287) *
                C31923) *
               C31876 * C531) *
              C440 +
          (((C14737 - C14736 + C14739 - C14738 + C14741 - C14740 + C14743 -
             C14742) *
                C14635 +
            (C14745 - C14744 + C14747 - C14746 + C14749 - C14748 + C14751 -
             C14750) *
                C14629 +
            (C14752 - C14753 + C14754 - C14755 + C14756 - C14757 + C14758 -
             C14759) *
                C14636 +
            (C14760 - C14761 + C14762 - C14763 + C14764 - C14765 + C14766 -
             C14767) *
                C31923) *
               C31876 * C530 +
           ((C15273 - C15272 + C15275 - C15274 + C15277 - C15276 + C15279 -
             C15278) *
                C14635 +
            (C15281 - C15280 + C15283 - C15282 + C15285 - C15284 + C15287 -
             C15286) *
                C14629 +
            (C32189 * C1059 - C14631 * C1050 + C32182 * C1060 - C14632 * C1051 +
             C32169 * C1061 - C14633 * C1052 + C32152 * C1407 -
             C14634 * C1406) *
                C14636 +
            (C32189 * C1077 - C14631 * C1062 + C32182 * C1078 - C14632 * C1063 +
             C32169 * C1079 - C14633 * C1064 + C32152 * C1409 -
             C14634 * C1408) *
                C31923) *
               C31876 * C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                 C14635 +
             (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                 C14629 +
             (C15496 - C15497 + C15498 - C15499) * C14636 +
             (C15500 - C15501 + C15502 - C15503) * C31923) *
                C32184 +
            ((C16530 - C16531 + C16532 - C16533) * C14635 +
             (C16534 - C16535 + C16536 - C16537) * C14629 + C17207 * C14636 +
             C17208 * C31923) *
                C32173 +
            C16580 * C32151) *
               C530 +
           (((C16531 - C16530 + C16533 - C16532) * C14635 +
             (C16535 - C16534 + C16537 - C16536) * C14629 + C17209 * C14636 +
             C17210 * C31923) *
                C32184 +
            ((C16539 - C16538 + C16541 - C16540) * C14635 +
             (C16543 - C16542 + C16545 - C16544) * C14629 + C17211 * C14636 +
             C17212 * C31923) *
                C32173 +
            ((C16550 - C16551 + C16552 - C16553) * C14635 +
             (C16554 - C16555 + C16556 - C16557) * C14629 +
             (C16558 - C16559 + C16560 - C16561) * C14636 +
             (C16562 - C16563 + C16564 - C16565) * C31923) *
                C32151) *
               C531) *
              C440 +
          ((((C15497 - C15496 + C15499 - C15498) * C14635 +
             (C15501 - C15500 + C15503 - C15502) * C14629 +
             (C15505 - C15504 + C15507 - C15506) * C14636 +
             (C15509 - C15508 + C15511 - C15510) * C31923) *
                C32184 +
            (C17209 * C14635 + C17210 * C14629 +
             (C16060 - C16061 + C16062 - C16063) * C14636 +
             (C16064 - C16065 + C16066 - C16067) * C31923) *
                C32173 +
            (C17211 * C14635 + C17212 * C14629 +
             (C16376 - C16377 + C16378 - C16379) * C14636 +
             (C16380 - C16381 + C16382 - C16383) * C31923) *
                C32151) *
               C530 +
           ((C17207 * C14635 + C17208 * C14629 +
             (C16061 - C16060 + C16063 - C16062) * C14636 +
             (C16065 - C16064 + C16067 - C16066) * C31923) *
                C32184 +
            (C16570 * C14635 + C16571 * C14629 +
             (C16377 - C16376 + C16379 - C16378) * C14636 +
             (C16381 - C16380 + C16383 - C16382) * C31923) *
                C32173 +
            ((C16559 - C16558 + C16561 - C16560) * C14635 +
             (C16563 - C16562 + C16565 - C16564) * C14629 +
             (C15385 * C6795 - C15391 * C6792 + C31782 * C7152 -
              C15392 * C7151) *
                 C14636 +
             (C15385 * C6801 - C15391 * C6796 + C31782 * C7154 -
              C15392 * C7153) *
                 C31923) *
                C32151) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
                C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
                   C14635 +
               (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
                C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
                   C14629 +
               (C32189 * C223 - C14631 * C213 + C32182 * C224 - C14632 * C214 +
                C32169 * C225 - C14633 * C215 + C32152 * C226 - C14634 * C216) *
                   C14636 +
               (C32189 * C243 - C14631 * C228 + C32182 * C244 - C14632 * C229 +
                C32169 * C245 - C14633 * C230 + C32152 * C246 - C14634 * C231) *
                   C31923) *
                  C31876 * C31835 * C31821 * C110 +
              ((C14631 * C120 - C32189 * C127 + C14632 * C121 - C32182 * C128 +
                C14633 * C122 - C32169 * C129 + C14634 * C123 - C32152 * C130) *
                   C14635 +
               (C14631 * C132 - C32189 * C141 + C14632 * C133 - C32182 * C142 +
                C14633 * C134 - C32169 * C143 + C14634 * C135 - C32152 * C144) *
                   C14629 +
               (C14631 * C214 - C32189 * C224 + C14632 * C215 - C32182 * C225 +
                C14633 * C216 - C32169 * C226 + C14634 * C217 - C32152 * C227) *
                   C14636 +
               (C14631 * C229 - C32189 * C244 + C14632 * C230 - C32182 * C245 +
                C14633 * C231 - C32169 * C246 + C14634 * C232 - C32152 * C247) *
                   C31923) *
                  C31876 * C31835 * C31821 * C111 +
              ((C32189 * C128 - C14631 * C121 + C32182 * C129 - C14632 * C122 +
                C32169 * C130 - C14633 * C123 + C32152 * C136 - C14634 * C124) *
                   C14635 +
               (C32189 * C142 - C14631 * C133 + C32182 * C143 - C14632 * C134 +
                C32169 * C144 - C14633 * C135 + C32152 * C145 - C14634 * C137) *
                   C14629 +
               (C32189 * C225 - C14631 * C215 + C32182 * C226 - C14632 * C216 +
                C32169 * C227 - C14633 * C217 + C32152 * C445 - C14634 * C444) *
                   C14636 +
               (C32189 * C245 - C14631 * C230 + C32182 * C246 - C14632 * C231 +
                C32169 * C247 - C14633 * C232 + C32152 * C447 - C14634 * C446) *
                   C31923) *
                  C31876 * C31835 * C31821 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
                C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
                   C14635 +
               (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
                C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
                   C14629 +
               (C14736 - C14737 + C14738 - C14739 + C14740 - C14741 + C14742 -
                C14743) *
                   C14636 +
               (C14744 - C14745 + C14746 - C14747 + C14748 - C14749 + C14750 -
                C14751) *
                   C31923) *
                  C31876 * C31835 * C209 +
              ((C14737 - C14736 + C14739 - C14738 + C14741 - C14740 + C14743 -
                C14742) *
                   C14635 +
               (C14745 - C14744 + C14747 - C14746 + C14749 - C14748 + C14751 -
                C14750) *
                   C14629 +
               (C14752 - C14753 + C14754 - C14755 + C14756 - C14757 + C14758 -
                C14759) *
                   C14636 +
               (C14760 - C14761 + C14762 - C14763 + C14764 - C14765 + C14766 -
                C14767) *
                   C31923) *
                  C31876 * C31835 * C210 +
              ((C14753 - C14752 + C14755 - C14754 + C14757 - C14756 + C14759 -
                C14758) *
                   C14635 +
               (C14761 - C14760 + C14763 - C14762 + C14765 - C14764 + C14767 -
                C14766) *
                   C14629 +
               (C32189 * C876 - C14631 * C870 + C32182 * C877 - C14632 * C871 +
                C32169 * C878 - C14633 * C872 + C32152 * C1233 -
                C14634 * C1232) *
                   C14636 +
               (C32189 * C888 - C14631 * C879 + C32182 * C889 - C14632 * C880 +
                C32169 * C890 - C14633 * C881 + C32152 * C1235 -
                C14634 * C1234) *
                   C31923) *
                  C31876 * C31835 * C211) *
             C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
            C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
               C14635 +
           (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
            C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
               C14629 +
           (C14736 - C14737 + C14738 - C14739 + C14740 - C14741 + C14742 -
            C14743) *
               C14636 +
           (C14744 - C14745 + C14746 - C14747 + C14748 - C14749 + C14750 -
            C14751) *
               C31923) *
              C31876 * C315 +
          ((C14631 * C318 - C32189 * C328 + C14632 * C319 - C32182 * C329 +
            C14633 * C320 - C32169 * C330 + C14634 * C321 - C32152 * C331) *
               C14635 +
           (C14631 * C333 - C32189 * C348 + C14632 * C334 - C32182 * C349 +
            C14633 * C335 - C32169 * C350 + C14634 * C336 - C32152 * C351) *
               C14629 +
           (C14631 * C618 - C32189 * C623 + C14632 * C619 - C32182 * C624 +
            C14633 * C620 - C32169 * C625 + C14634 * C621 - C32152 * C626) *
               C14636 +
           (C14631 * C628 - C32189 * C633 + C14632 * C629 - C32182 * C634 +
            C14633 * C630 - C32169 * C635 + C14634 * C631 - C32152 * C636) *
               C31923) *
              C31876 * C316 +
          ((C32189 * C338 - C14631 * C323 + C32182 * C339 - C14632 * C324 +
            C32169 * C340 - C14633 * C325 + C32152 * C341 - C14634 * C326) *
               C14635 +
           (C32189 * C353 - C14631 * C343 + C32182 * C354 - C14632 * C344 +
            C32169 * C355 - C14633 * C345 + C32152 * C356 - C14634 * C346) *
               C14629 +
           (C32189 * C1065 - C14631 * C1053 + C32182 * C1066 - C14632 * C1054 +
            C32169 * C1067 - C14633 * C1055 + C32152 * C2145 - C14634 * C2144) *
               C14636 +
           (C32189 * C1080 - C14631 * C1068 + C32182 * C1081 - C14632 * C1069 +
            C32169 * C1082 - C14633 * C1070 + C32152 * C2147 - C14634 * C2146) *
               C31923) *
              C31876 * C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
               C15393 +
           (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
               C32190 +
           (C15385 * C223 - C15391 * C213 + C31782 * C224 - C15392 * C214) *
               C15394 +
           (C15385 * C243 - C15391 * C228 + C31782 * C244 - C15392 * C229) *
               C32186 +
           (C15385 * C233 - C15391 * C218 + C31782 * C234 - C15392 * C219) *
               C15395 +
           (C15385 * C248 - C15391 * C238 + C31782 * C249 - C15392 * C239) *
               C32176 +
           (C15385 * C876 - C15391 * C870 + C31782 * C877 - C15392 * C871) *
               C15396 +
           (C15385 * C888 - C15391 * C879 + C31782 * C889 - C15392 * C880) *
               C32158) *
              C31876 * C31835 * C31821 * C110 +
          ((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
               C15393 +
           (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
               C32190 +
           (C15391 * C214 - C15385 * C224 + C15392 * C215 - C31782 * C225) *
               C15394 +
           (C15391 * C229 - C15385 * C244 + C15392 * C230 - C31782 * C245) *
               C32186 +
           (C15391 * C219 - C15385 * C234 + C15392 * C220 - C31782 * C235) *
               C15395 +
           (C15391 * C239 - C15385 * C249 + C15392 * C240 - C31782 * C250) *
               C32176 +
           (C15391 * C871 - C15385 * C877 + C15392 * C872 - C31782 * C878) *
               C15396 +
           (C15391 * C880 - C15385 * C889 + C15392 * C881 - C31782 * C890) *
               C32158) *
              C31876 * C31835 * C31821 * C111 +
          ((C15385 * C128 - C15391 * C121 + C31782 * C129 - C15392 * C122) *
               C15393 +
           (C15385 * C142 - C15391 * C133 + C31782 * C143 - C15392 * C134) *
               C32190 +
           (C15385 * C225 - C15391 * C215 + C31782 * C226 - C15392 * C216) *
               C15394 +
           (C15385 * C245 - C15391 * C230 + C31782 * C246 - C15392 * C231) *
               C32186 +
           (C15385 * C235 - C15391 * C220 + C31782 * C236 - C15392 * C221) *
               C15395 +
           (C15385 * C250 - C15391 * C240 + C31782 * C251 - C15392 * C241) *
               C32176 +
           (C15385 * C878 - C15391 * C872 + C31782 * C1233 - C15392 * C1232) *
               C15396 +
           (C15385 * C890 - C15391 * C881 + C31782 * C1235 - C15392 * C1234) *
               C32158) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
               C15393 +
           (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
               C32190 +
           (C15496 - C15497 + C15498 - C15499) * C15394 +
           (C15500 - C15501 + C15502 - C15503) * C32186 + C15536 * C15395 +
           C15537 * C32176 + C15538 * C15396 + C15539 * C32158) *
              C31876 * C31835 * C209 +
          ((C15497 - C15496 + C15499 - C15498) * C15393 +
           (C15501 - C15500 + C15503 - C15502) * C32190 +
           (C15505 - C15504 + C15507 - C15506) * C15394 +
           (C15509 - C15508 + C15511 - C15510) * C32186 +
           (C15513 - C15512 + C15515 - C15514) * C15395 +
           (C15517 - C15516 + C15519 - C15518) * C32176 +
           (C15520 - C15521 + C15522 - C15523) * C15396 +
           (C15524 - C15525 + C15526 - C15527) * C32158) *
              C31876 * C31835 * C210 +
          (C15536 * C15393 + C15537 * C32190 + C15538 * C15394 +
           C15539 * C32186 + (C15521 - C15520 + C15523 - C15522) * C15395 +
           (C15525 - C15524 + C15527 - C15526) * C32176 +
           (C15385 * C6050 - C15391 * C6048 + C31782 * C6239 - C15392 * C6238) *
               C15396 +
           (C15385 * C6054 - C15391 * C6051 + C31782 * C6241 - C15392 * C6240) *
               C32158) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
               C15393 +
           (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
               C32190 +
           (C15496 - C15497 + C15498 - C15499) * C15394 +
           (C15500 - C15501 + C15502 - C15503) * C32186 + C15536 * C15395 +
           C15537 * C32176 + C15538 * C15396 + C15539 * C32158) *
              C31876 * C315 +
          ((C15391 * C318 - C15385 * C328 + C15392 * C319 - C31782 * C329) *
               C15393 +
           (C15391 * C333 - C15385 * C348 + C15392 * C334 - C31782 * C349) *
               C32190 +
           (C15391 * C618 - C15385 * C623 + C15392 * C619 - C31782 * C624) *
               C15394 +
           (C15391 * C628 - C15385 * C633 + C15392 * C629 - C31782 * C634) *
               C32186 +
           (C15391 * C1050 - C15385 * C1059 + C15392 * C1051 - C31782 * C1060) *
               C15395 +
           (C15391 * C1062 - C15385 * C1077 + C15392 * C1063 - C31782 * C1078) *
               C32176 +
           (C15391 * C1556 - C15385 * C1559 + C15392 * C1557 - C31782 * C1560) *
               C15396 +
           (C15391 * C1562 - C15385 * C1565 + C15392 * C1563 - C31782 * C1566) *
               C32158) *
              C31876 * C316 +
          ((C15385 * C338 - C15391 * C323 + C31782 * C339 - C15392 * C324) *
               C15393 +
           (C15385 * C353 - C15391 * C343 + C31782 * C354 - C15392 * C344) *
               C32190 +
           (C15385 * C1065 - C15391 * C1053 + C31782 * C1066 - C15392 * C1054) *
               C15394 +
           (C15385 * C1080 - C15391 * C1068 + C31782 * C1081 - C15392 * C1069) *
               C32186 +
           (C15385 * C1071 - C15391 * C1056 + C31782 * C1072 - C15392 * C1057) *
               C15395 +
           (C15385 * C1083 - C15391 * C1074 + C31782 * C1084 - C15392 * C1075) *
               C32176 +
           (C15385 * C6149 - C15391 * C6145 + C31782 * C6986 - C15392 * C6985) *
               C15396 +
           (C15385 * C6154 - C15391 * C6150 + C31782 * C6988 - C15392 * C6987) *
               C32158) *
              C31876 * C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C14635 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C14629 +
            (C15496 - C15497 + C15498 - C15499) * C14636 +
            (C15500 - C15501 + C15502 - C15503) * C31923) *
               C32184 +
           ((C15385 * C328 - C15391 * C318 + C31782 * C329 - C15392 * C319) *
                C14635 +
            (C15385 * C348 - C15391 * C333 + C31782 * C349 - C15392 * C334) *
                C14629 +
            (C16053 - C16052 + C16055 - C16054) * C14636 +
            (C16057 - C16056 + C16059 - C16058) * C31923) *
               C32173 +
           ((C15385 * C338 - C15391 * C323 + C31782 * C339 - C15392 * C324) *
                C14635 +
            (C15385 * C353 - C15391 * C343 + C31782 * C354 - C15392 * C344) *
                C14629 +
            (C15385 * C1065 - C15391 * C1053 + C31782 * C1066 -
             C15392 * C1054) *
                C14636 +
            (C15385 * C1080 - C15391 * C1068 + C31782 * C1081 -
             C15392 * C1069) *
                C31923) *
               C32151) *
              C31835 * C31821 * C110 +
          (((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                C14635 +
            (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                C14629 +
            (C15768 - C15769 + C15770 - C15771) * C14636 +
            (C15772 - C15773 + C15774 - C15775) * C31923) *
               C32184 +
           ((C15391 * C319 - C15385 * C329 + C15392 * C320 - C31782 * C330) *
                C14635 +
            (C15391 * C334 - C15385 * C349 + C15392 * C335 - C31782 * C350) *
                C14629 +
            (C15391 * C619 - C15385 * C624 + C15392 * C620 - C31782 * C625) *
                C14636 +
            (C15391 * C629 - C15385 * C634 + C15392 * C630 - C31782 * C635) *
                C31923) *
               C32173 +
           ((C15391 * C324 - C15385 * C339 + C15392 * C325 - C31782 * C340) *
                C14635 +
            (C15391 * C344 - C15385 * C354 + C15392 * C345 - C31782 * C355) *
                C14629 +
            (C15391 * C1054 - C15385 * C1066 + C15392 * C1055 -
             C31782 * C1067) *
                C14636 +
            (C15391 * C1069 - C15385 * C1081 + C15392 * C1070 -
             C31782 * C1082) *
                C31923) *
               C32151) *
              C31835 * C31821 * C111 +
          (((C15385 * C128 - C15391 * C121 + C31782 * C129 - C15392 * C122) *
                C14635 +
            (C15385 * C142 - C15391 * C133 + C31782 * C143 - C15392 * C134) *
                C14629 +
            (C15385 * C225 - C15391 * C215 + C31782 * C226 - C15392 * C216) *
                C14636 +
            (C15385 * C245 - C15391 * C230 + C31782 * C246 - C15392 * C231) *
                C31923) *
               C32184 +
           ((C15385 * C330 - C15391 * C320 + C31782 * C331 - C15392 * C321) *
                C14635 +
            (C15385 * C350 - C15391 * C335 + C31782 * C351 - C15392 * C336) *
                C14629 +
            (C15385 * C625 - C15391 * C620 + C31782 * C626 - C15392 * C621) *
                C14636 +
            (C15385 * C635 - C15391 * C630 + C31782 * C636 - C15392 * C631) *
                C31923) *
               C32173 +
           ((C15385 * C340 - C15391 * C325 + C31782 * C341 - C15392 * C326) *
                C14635 +
            (C15385 * C355 - C15391 * C345 + C31782 * C356 - C15392 * C346) *
                C14629 +
            (C15385 * C1067 - C15391 * C1055 + C31782 * C2145 -
             C15392 * C2144) *
                C14636 +
            (C15385 * C1082 - C15391 * C1070 + C31782 * C2147 -
             C15392 * C2146) *
                C31923) *
               C32151) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C14635 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C14629 +
            (C15496 - C15497 + C15498 - C15499) * C14636 +
            (C15500 - C15501 + C15502 - C15503) * C31923) *
               C32184 +
           ((C15385 * C328 - C15391 * C318 + C31782 * C329 - C15392 * C319) *
                C14635 +
            (C15385 * C348 - C15391 * C333 + C31782 * C349 - C15392 * C334) *
                C14629 +
            (C16053 - C16052 + C16055 - C16054) * C14636 +
            (C16057 - C16056 + C16059 - C16058) * C31923) *
               C32173 +
           ((C15385 * C338 - C15391 * C323 + C31782 * C339 - C15392 * C324) *
                C14635 +
            (C15385 * C353 - C15391 * C343 + C31782 * C354 - C15392 * C344) *
                C14629 +
            (C16368 - C16369 + C16370 - C16371) * C14636 +
            (C16372 - C16373 + C16374 - C16375) * C31923) *
               C32151) *
              C31835 * C209 +
          (((C15497 - C15496 + C15499 - C15498) * C14635 +
            (C15501 - C15500 + C15503 - C15502) * C14629 +
            (C15505 - C15504 + C15507 - C15506) * C14636 +
            (C15509 - C15508 + C15511 - C15510) * C31923) *
               C32184 +
           ((C16052 - C16053 + C16054 - C16055) * C14635 +
            (C16056 - C16057 + C16058 - C16059) * C14629 +
            (C16060 - C16061 + C16062 - C16063) * C14636 +
            (C16064 - C16065 + C16066 - C16067) * C31923) *
               C32173 +
           ((C16369 - C16368 + C16371 - C16370) * C14635 +
            (C16373 - C16372 + C16375 - C16374) * C14629 +
            (C16376 - C16377 + C16378 - C16379) * C14636 +
            (C16380 - C16381 + C16382 - C16383) * C31923) *
               C32151) *
              C31835 * C210 +
          ((C15536 * C14635 + C15537 * C14629 + C15538 * C14636 +
            C15539 * C31923) *
               C32184 +
           ((C16061 - C16060 + C16063 - C16062) * C14635 +
            (C16065 - C16064 + C16067 - C16066) * C14629 +
            (C16069 - C16068 + C16071 - C16070) * C14636 +
            (C16073 - C16072 + C16075 - C16074) * C31923) *
               C32173 +
           ((C16377 - C16376 + C16379 - C16378) * C14635 +
            (C16381 - C16380 + C16383 - C16382) * C14629 +
            (C15385 * C6149 - C15391 * C6145 + C31782 * C6986 -
             C15392 * C6985) *
                C14636 +
            (C15385 * C6154 - C15391 * C6150 + C31782 * C6988 -
             C15392 * C6987) *
                C31923) *
               C32151) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C14635 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C14629 +
            (C15496 - C15497 + C15498 - C15499) * C14636 +
            (C15500 - C15501 + C15502 - C15503) * C31923) *
               C32184 +
           ((C16530 - C16531 + C16532 - C16533) * C14635 +
            (C16534 - C16535 + C16536 - C16537) * C14629 +
            (C16053 - C16052 + C16055 - C16054) * C14636 +
            (C16057 - C16056 + C16059 - C16058) * C31923) *
               C32173 +
           C16580 * C32151) *
              C315 +
          (((C16531 - C16530 + C16533 - C16532) * C14635 +
            (C16535 - C16534 + C16537 - C16536) * C14629 +
            (C16052 - C16053 + C16054 - C16055) * C14636 +
            (C16056 - C16057 + C16058 - C16059) * C31923) *
               C32184 +
           ((C16539 - C16538 + C16541 - C16540) * C14635 +
            (C16543 - C16542 + C16545 - C16544) * C14629 +
            (C16369 - C16368 + C16371 - C16370) * C14636 +
            (C16373 - C16372 + C16375 - C16374) * C31923) *
               C32173 +
           ((C16550 - C16551 + C16552 - C16553) * C14635 +
            (C16554 - C16555 + C16556 - C16557) * C14629 +
            (C16558 - C16559 + C16560 - C16561) * C14636 +
            (C16562 - C16563 + C16564 - C16565) * C31923) *
               C32151) *
              C316 +
          (C16580 * C32184 +
           ((C16551 - C16550 + C16553 - C16552) * C14635 +
            (C16555 - C16554 + C16557 - C16556) * C14629 +
            (C16559 - C16558 + C16561 - C16560) * C14636 +
            (C16563 - C16562 + C16565 - C16564) * C31923) *
               C32173 +
           ((C15385 * C1937 - C15391 * C1928 + C31782 * C1938 -
             C15392 * C1929) *
                C14635 +
            (C15385 * C1946 - C15391 * C1940 + C31782 * C1947 -
             C15392 * C1941) *
                C14629 +
            (C15385 * C6797 - C15391 * C6793 + C31782 * C11841 -
             C15392 * C11840) *
                C14636 +
            (C15385 * C6802 - C15391 * C6798 + C31782 * C11843 -
             C15392 * C11842) *
                C31923) *
               C32151) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C15393 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C32190 +
            (C15496 - C15497 + C15498 - C15499) * C15394 +
            (C15500 - C15501 + C15502 - C15503) * C32186 + C15536 * C15395 +
            C15537 * C32176 + C15538 * C15396 + C15539 * C32158) *
               C31876 * C530 +
           ((C15391 * C318 - C15385 * C328 + C15392 * C319 - C31782 * C329) *
                C15393 +
            (C15391 * C333 - C15385 * C348 + C15392 * C334 - C31782 * C349) *
                C32190 +
            (C15391 * C618 - C15385 * C623 + C15392 * C619 - C31782 * C624) *
                C15394 +
            (C15391 * C628 - C15385 * C633 + C15392 * C629 - C31782 * C634) *
                C32186 +
            (C15391 * C1050 - C15385 * C1059 + C15392 * C1051 -
             C31782 * C1060) *
                C15395 +
            (C15391 * C1062 - C15385 * C1077 + C15392 * C1063 -
             C31782 * C1078) *
                C32176 +
            (C15391 * C1556 - C15385 * C1559 + C15392 * C1557 -
             C31782 * C1560) *
                C15396 +
            (C15391 * C1562 - C15385 * C1565 + C15392 * C1563 -
             C31782 * C1566) *
                C32158) *
               C31876 * C531) *
              C31821 * C442 +
          (((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                C15393 +
            (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                C32190 +
            (C15768 - C15769 + C15770 - C15771) * C15394 +
            (C15772 - C15773 + C15774 - C15775) * C32186 +
            (C15776 - C15777 + C15778 - C15779) * C15395 +
            (C15780 - C15781 + C15782 - C15783) * C32176 +
            (C15784 - C15785 + C15786 - C15787) * C15396 +
            (C15788 - C15789 + C15790 - C15791) * C32158) *
               C31876 * C530 +
           ((C15385 * C329 - C15391 * C319 + C31782 * C330 - C15392 * C320) *
                C15393 +
            (C15385 * C349 - C15391 * C334 + C31782 * C350 - C15392 * C335) *
                C32190 +
            (C15385 * C624 - C15391 * C619 + C31782 * C625 - C15392 * C620) *
                C15394 +
            (C15385 * C634 - C15391 * C629 + C31782 * C635 - C15392 * C630) *
                C32186 +
            (C15385 * C1060 - C15391 * C1051 + C31782 * C1061 -
             C15392 * C1052) *
                C15395 +
            (C15385 * C1078 - C15391 * C1063 + C31782 * C1079 -
             C15392 * C1064) *
                C32176 +
            (C15385 * C1560 - C15391 * C1557 + C31782 * C1561 -
             C15392 * C1558) *
                C15396 +
            (C15385 * C1566 - C15391 * C1563 + C31782 * C1567 -
             C15392 * C1564) *
                C32158) *
               C31876 * C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
             C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
                C14635 +
            (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
             C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
                C14629 +
            (C14736 - C14737 + C14738 - C14739 + C14740 - C14741 + C14742 -
             C14743) *
                C14636 +
            (C14744 - C14745 + C14746 - C14747 + C14748 - C14749 + C14750 -
             C14751) *
                C31923) *
               C31876 * C530 +
           ((C14631 * C318 - C32189 * C328 + C14632 * C319 - C32182 * C329 +
             C14633 * C320 - C32169 * C330 + C14634 * C321 - C32152 * C331) *
                C14635 +
            (C14631 * C333 - C32189 * C348 + C14632 * C334 - C32182 * C349 +
             C14633 * C335 - C32169 * C350 + C14634 * C336 - C32152 * C351) *
                C14629 +
            (C14631 * C618 - C32189 * C623 + C14632 * C619 - C32182 * C624 +
             C14633 * C620 - C32169 * C625 + C14634 * C621 - C32152 * C626) *
                C14636 +
            (C14631 * C628 - C32189 * C633 + C14632 * C629 - C32182 * C634 +
             C14633 * C630 - C32169 * C635 + C14634 * C631 - C32152 * C636) *
                C31923) *
               C31876 * C531) *
              C31821 * C442 +
          (((C14631 * C120 - C32189 * C127 + C14632 * C121 - C32182 * C128 +
             C14633 * C122 - C32169 * C129 + C14634 * C123 - C32152 * C130) *
                C14635 +
            (C14631 * C132 - C32189 * C141 + C14632 * C133 - C32182 * C142 +
             C14633 * C134 - C32169 * C143 + C14634 * C135 - C32152 * C144) *
                C14629 +
            (C14996 - C14997 + C14998 - C14999 + C15000 - C15001 + C15002 -
             C15003) *
                C14636 +
            (C15004 - C15005 + C15006 - C15007 + C15008 - C15009 + C15010 -
             C15011) *
                C31923) *
               C31876 * C530 +
           ((C32189 * C329 - C14631 * C319 + C32182 * C330 - C14632 * C320 +
             C32169 * C331 - C14633 * C321 + C32152 * C332 - C14634 * C322) *
                C14635 +
            (C32189 * C349 - C14631 * C334 + C32182 * C350 - C14632 * C335 +
             C32169 * C351 - C14633 * C336 + C32152 * C352 - C14634 * C337) *
                C14629 +
            (C32189 * C624 - C14631 * C619 + C32182 * C625 - C14632 * C620 +
             C32169 * C626 - C14633 * C621 + C32152 * C627 - C14634 * C622) *
                C14636 +
            (C32189 * C634 - C14631 * C629 + C32182 * C635 - C14632 * C630 +
             C32169 * C636 - C14633 * C631 + C32152 * C637 - C14634 * C632) *
                C31923) *
               C31876 * C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                 C14635 +
             (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                 C14629 +
             (C15496 - C15497 + C15498 - C15499) * C14636 +
             (C15500 - C15501 + C15502 - C15503) * C31923) *
                C32184 +
            ((C16530 - C16531 + C16532 - C16533) * C14635 +
             (C16534 - C16535 + C16536 - C16537) * C14629 +
             (C16053 - C16052 + C16055 - C16054) * C14636 +
             (C16057 - C16056 + C16059 - C16058) * C31923) *
                C32173 +
            C16580 * C32151) *
               C530 +
           (((C16531 - C16530 + C16533 - C16532) * C14635 +
             (C16535 - C16534 + C16537 - C16536) * C14629 +
             (C16052 - C16053 + C16054 - C16055) * C14636 +
             (C16056 - C16057 + C16058 - C16059) * C31923) *
                C32184 +
            ((C16539 - C16538 + C16541 - C16540) * C14635 +
             (C16543 - C16542 + C16545 - C16544) * C14629 +
             (C16369 - C16368 + C16371 - C16370) * C14636 +
             (C16373 - C16372 + C16375 - C16374) * C31923) *
                C32173 +
            ((C16550 - C16551 + C16552 - C16553) * C14635 +
             (C16554 - C16555 + C16556 - C16557) * C14629 +
             (C16558 - C16559 + C16560 - C16561) * C14636 +
             (C16562 - C16563 + C16564 - C16565) * C31923) *
                C32151) *
               C531) *
              C31821 * C442 +
          ((((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                 C14635 +
             (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                 C14629 +
             (C15768 - C15769 + C15770 - C15771) * C14636 +
             (C15772 - C15773 + C15774 - C15775) * C31923) *
                C32184 +
            ((C16985 - C16986 + C16987 - C16988) * C14635 +
             (C16989 - C16990 + C16991 - C16992) * C14629 +
             (C16775 - C16776 + C16777 - C16778) * C14636 +
             (C16779 - C16780 + C16781 - C16782) * C31923) *
                C32173 +
            ((C16993 - C16994 + C16995 - C16996) * C14635 +
             (C16997 - C16998 + C16999 - C17000) * C14629 +
             (C16783 - C16784 + C16785 - C16786) * C14636 +
             (C16787 - C16788 + C16789 - C16790) * C31923) *
                C32151) *
               C530 +
           (((C16986 - C16985 + C16988 - C16987) * C14635 +
             (C16990 - C16989 + C16992 - C16991) * C14629 +
             (C16776 - C16775 + C16778 - C16777) * C14636 +
             (C16780 - C16779 + C16782 - C16781) * C31923) *
                C32184 +
            ((C16994 - C16993 + C16996 - C16995) * C14635 +
             (C16998 - C16997 + C17000 - C16999) * C14629 +
             (C16784 - C16783 + C16786 - C16785) * C14636 +
             (C16788 - C16787 + C16790 - C16789) * C31923) *
                C32173 +
            ((C15385 * C1932 - C15391 * C1926 + C31782 * C1933 -
              C15392 * C1927) *
                 C14635 +
             (C15385 * C1944 - C15391 * C1935 + C31782 * C1945 -
              C15392 * C1936) *
                 C14629 +
             (C15385 * C2472 - C15391 * C2469 + C31782 * C2473 -
              C15392 * C2470) *
                 C14636 +
             (C15385 * C2478 - C15391 * C2475 + C31782 * C2479 -
              C15392 * C2476) *
                 C31923) *
                C32151) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
            C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
               C14635 +
           (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
            C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
               C14629 +
           (C14736 - C14737 + C14738 - C14739 + C14740 - C14741 + C14742 -
            C14743) *
               C14636 +
           (C14744 - C14745 + C14746 - C14747 + C14748 - C14749 + C14750 -
            C14751) *
               C31923) *
              C31876 * C31835 * C209 +
          ((C14737 - C14736 + C14739 - C14738 + C14741 - C14740 + C14743 -
            C14742) *
               C14635 +
           (C14745 - C14744 + C14747 - C14746 + C14749 - C14748 + C14751 -
            C14750) *
               C14629 +
           (C14752 - C14753 + C14754 - C14755 + C14756 - C14757 + C14758 -
            C14759) *
               C14636 +
           (C14760 - C14761 + C14762 - C14763 + C14764 - C14765 + C14766 -
            C14767) *
               C31923) *
              C31876 * C31835 * C210 +
          ((C14753 - C14752 + C14755 - C14754 + C14757 - C14756 + C14759 -
            C14758) *
               C14635 +
           (C14761 - C14760 + C14763 - C14762 + C14765 - C14764 + C14767 -
            C14766) *
               C14629 +
           (C32189 * C876 - C14631 * C870 + C32182 * C877 - C14632 * C871 +
            C32169 * C878 - C14633 * C872 + C32152 * C1233 - C14634 * C1232) *
               C14636 +
           (C32189 * C888 - C14631 * C879 + C32182 * C889 - C14632 * C880 +
            C32169 * C890 - C14633 * C881 + C32152 * C1235 - C14634 * C1234) *
               C31923) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
            C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
               C14635 +
           (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
            C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
               C14629 +
           (C32189 * C223 - C14631 * C213 + C32182 * C224 - C14632 * C214 +
            C32169 * C225 - C14633 * C215 + C32152 * C226 - C14634 * C216) *
               C14636 +
           (C32189 * C243 - C14631 * C228 + C32182 * C244 - C14632 * C229 +
            C32169 * C245 - C14633 * C230 + C32152 * C246 - C14634 * C231) *
               C31923) *
              C31876 * C31835 * C31821 * C110 +
          ((C14631 * C120 - C32189 * C127 + C14632 * C121 - C32182 * C128 +
            C14633 * C122 - C32169 * C129 + C14634 * C123 - C32152 * C130) *
               C14635 +
           (C14631 * C132 - C32189 * C141 + C14632 * C133 - C32182 * C142 +
            C14633 * C134 - C32169 * C143 + C14634 * C135 - C32152 * C144) *
               C14629 +
           (C14631 * C214 - C32189 * C224 + C14632 * C215 - C32182 * C225 +
            C14633 * C216 - C32169 * C226 + C14634 * C217 - C32152 * C227) *
               C14636 +
           (C14631 * C229 - C32189 * C244 + C14632 * C230 - C32182 * C245 +
            C14633 * C231 - C32169 * C246 + C14634 * C232 - C32152 * C247) *
               C31923) *
              C31876 * C31835 * C31821 * C111 +
          ((C32189 * C128 - C14631 * C121 + C32182 * C129 - C14632 * C122 +
            C32169 * C130 - C14633 * C123 + C32152 * C136 - C14634 * C124) *
               C14635 +
           (C32189 * C142 - C14631 * C133 + C32182 * C143 - C14632 * C134 +
            C32169 * C144 - C14633 * C135 + C32152 * C145 - C14634 * C137) *
               C14629 +
           (C32189 * C225 - C14631 * C215 + C32182 * C226 - C14632 * C216 +
            C32169 * C227 - C14633 * C217 + C32152 * C445 - C14634 * C444) *
               C14636 +
           (C32189 * C245 - C14631 * C230 + C32182 * C246 - C14632 * C231 +
            C32169 * C247 - C14633 * C232 + C32152 * C447 - C14634 * C446) *
               C31923) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
               C15393 +
           (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
               C32190 +
           (C15385 * C223 - C15391 * C213 + C31782 * C224 - C15392 * C214) *
               C15394 +
           (C15385 * C243 - C15391 * C228 + C31782 * C244 - C15392 * C229) *
               C32186 +
           (C15385 * C233 - C15391 * C218 + C31782 * C234 - C15392 * C219) *
               C15395 +
           (C15385 * C248 - C15391 * C238 + C31782 * C249 - C15392 * C239) *
               C32176 +
           (C15385 * C876 - C15391 * C870 + C31782 * C877 - C15392 * C871) *
               C15396 +
           (C15385 * C888 - C15391 * C879 + C31782 * C889 - C15392 * C880) *
               C32158) *
              C31876 * C31835 * C31821 * C110 +
          ((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
               C15393 +
           (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
               C32190 +
           (C15391 * C214 - C15385 * C224 + C15392 * C215 - C31782 * C225) *
               C15394 +
           (C15391 * C229 - C15385 * C244 + C15392 * C230 - C31782 * C245) *
               C32186 +
           (C15391 * C219 - C15385 * C234 + C15392 * C220 - C31782 * C235) *
               C15395 +
           (C15391 * C239 - C15385 * C249 + C15392 * C240 - C31782 * C250) *
               C32176 +
           (C15391 * C871 - C15385 * C877 + C15392 * C872 - C31782 * C878) *
               C15396 +
           (C15391 * C880 - C15385 * C889 + C15392 * C881 - C31782 * C890) *
               C32158) *
              C31876 * C31835 * C31821 * C111 +
          ((C15385 * C128 - C15391 * C121 + C31782 * C129 - C15392 * C122) *
               C15393 +
           (C15385 * C142 - C15391 * C133 + C31782 * C143 - C15392 * C134) *
               C32190 +
           (C15385 * C225 - C15391 * C215 + C31782 * C226 - C15392 * C216) *
               C15394 +
           (C15385 * C245 - C15391 * C230 + C31782 * C246 - C15392 * C231) *
               C32186 +
           (C15385 * C235 - C15391 * C220 + C31782 * C236 - C15392 * C221) *
               C15395 +
           (C15385 * C250 - C15391 * C240 + C31782 * C251 - C15392 * C241) *
               C32176 +
           (C15385 * C878 - C15391 * C872 + C31782 * C1233 - C15392 * C1232) *
               C15396 +
           (C15385 * C890 - C15391 * C881 + C31782 * C1235 - C15392 * C1234) *
               C32158) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
               C15393 +
           (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
               C32190 +
           (C15496 - C15497 + C15498 - C15499) * C15394 +
           (C15500 - C15501 + C15502 - C15503) * C32186 + C15536 * C15395 +
           C15537 * C32176 + C15538 * C15396 + C15539 * C32158) *
              C31876 * C31835 * C209 +
          ((C15497 - C15496 + C15499 - C15498) * C15393 +
           (C15501 - C15500 + C15503 - C15502) * C32190 +
           (C15505 - C15504 + C15507 - C15506) * C15394 +
           (C15509 - C15508 + C15511 - C15510) * C32186 +
           (C15513 - C15512 + C15515 - C15514) * C15395 +
           (C15517 - C15516 + C15519 - C15518) * C32176 +
           (C15520 - C15521 + C15522 - C15523) * C15396 +
           (C15524 - C15525 + C15526 - C15527) * C32158) *
              C31876 * C31835 * C210 +
          (C15536 * C15393 + C15537 * C32190 + C15538 * C15394 +
           C15539 * C32186 + (C15521 - C15520 + C15523 - C15522) * C15395 +
           (C15525 - C15524 + C15527 - C15526) * C32176 +
           (C15385 * C6050 - C15391 * C6048 + C31782 * C6239 - C15392 * C6238) *
               C15396 +
           (C15385 * C6054 - C15391 * C6051 + C31782 * C6241 - C15392 * C6240) *
               C32158) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C14635 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C14629 +
            (C15496 - C15497 + C15498 - C15499) * C14636 +
            (C15500 - C15501 + C15502 - C15503) * C31923) *
               C32184 +
           ((C15385 * C328 - C15391 * C318 + C31782 * C329 - C15392 * C319) *
                C14635 +
            (C15385 * C348 - C15391 * C333 + C31782 * C349 - C15392 * C334) *
                C14629 +
            (C16053 - C16052 + C16055 - C16054) * C14636 +
            (C16057 - C16056 + C16059 - C16058) * C31923) *
               C32173 +
           ((C15385 * C338 - C15391 * C323 + C31782 * C339 - C15392 * C324) *
                C14635 +
            (C15385 * C353 - C15391 * C343 + C31782 * C354 - C15392 * C344) *
                C14629 +
            (C15385 * C1065 - C15391 * C1053 + C31782 * C1066 -
             C15392 * C1054) *
                C14636 +
            (C15385 * C1080 - C15391 * C1068 + C31782 * C1081 -
             C15392 * C1069) *
                C31923) *
               C32151) *
              C31835 * C31821 * C110 +
          (((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                C14635 +
            (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                C14629 +
            (C15768 - C15769 + C15770 - C15771) * C14636 +
            (C15772 - C15773 + C15774 - C15775) * C31923) *
               C32184 +
           ((C15391 * C319 - C15385 * C329 + C15392 * C320 - C31782 * C330) *
                C14635 +
            (C15391 * C334 - C15385 * C349 + C15392 * C335 - C31782 * C350) *
                C14629 +
            (C15391 * C619 - C15385 * C624 + C15392 * C620 - C31782 * C625) *
                C14636 +
            (C15391 * C629 - C15385 * C634 + C15392 * C630 - C31782 * C635) *
                C31923) *
               C32173 +
           ((C15391 * C324 - C15385 * C339 + C15392 * C325 - C31782 * C340) *
                C14635 +
            (C15391 * C344 - C15385 * C354 + C15392 * C345 - C31782 * C355) *
                C14629 +
            (C15391 * C1054 - C15385 * C1066 + C15392 * C1055 -
             C31782 * C1067) *
                C14636 +
            (C15391 * C1069 - C15385 * C1081 + C15392 * C1070 -
             C31782 * C1082) *
                C31923) *
               C32151) *
              C31835 * C31821 * C111 +
          (((C15385 * C128 - C15391 * C121 + C31782 * C129 - C15392 * C122) *
                C14635 +
            (C15385 * C142 - C15391 * C133 + C31782 * C143 - C15392 * C134) *
                C14629 +
            (C15385 * C225 - C15391 * C215 + C31782 * C226 - C15392 * C216) *
                C14636 +
            (C15385 * C245 - C15391 * C230 + C31782 * C246 - C15392 * C231) *
                C31923) *
               C32184 +
           ((C15385 * C330 - C15391 * C320 + C31782 * C331 - C15392 * C321) *
                C14635 +
            (C15385 * C350 - C15391 * C335 + C31782 * C351 - C15392 * C336) *
                C14629 +
            (C15385 * C625 - C15391 * C620 + C31782 * C626 - C15392 * C621) *
                C14636 +
            (C15385 * C635 - C15391 * C630 + C31782 * C636 - C15392 * C631) *
                C31923) *
               C32173 +
           ((C15385 * C340 - C15391 * C325 + C31782 * C341 - C15392 * C326) *
                C14635 +
            (C15385 * C355 - C15391 * C345 + C31782 * C356 - C15392 * C346) *
                C14629 +
            (C15385 * C1067 - C15391 * C1055 + C31782 * C2145 -
             C15392 * C2144) *
                C14636 +
            (C15385 * C1082 - C15391 * C1070 + C31782 * C2147 -
             C15392 * C2146) *
                C31923) *
               C32151) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C14635 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C14629 +
            (C15496 - C15497 + C15498 - C15499) * C14636 +
            (C15500 - C15501 + C15502 - C15503) * C31923) *
               C32184 +
           ((C15385 * C328 - C15391 * C318 + C31782 * C329 - C15392 * C319) *
                C14635 +
            (C15385 * C348 - C15391 * C333 + C31782 * C349 - C15392 * C334) *
                C14629 +
            (C16053 - C16052 + C16055 - C16054) * C14636 +
            (C16057 - C16056 + C16059 - C16058) * C31923) *
               C32173 +
           ((C15385 * C338 - C15391 * C323 + C31782 * C339 - C15392 * C324) *
                C14635 +
            (C15385 * C353 - C15391 * C343 + C31782 * C354 - C15392 * C344) *
                C14629 +
            (C16368 - C16369 + C16370 - C16371) * C14636 +
            (C16372 - C16373 + C16374 - C16375) * C31923) *
               C32151) *
              C31835 * C209 +
          (((C15497 - C15496 + C15499 - C15498) * C14635 +
            (C15501 - C15500 + C15503 - C15502) * C14629 +
            (C15505 - C15504 + C15507 - C15506) * C14636 +
            (C15509 - C15508 + C15511 - C15510) * C31923) *
               C32184 +
           ((C16052 - C16053 + C16054 - C16055) * C14635 +
            (C16056 - C16057 + C16058 - C16059) * C14629 +
            (C16060 - C16061 + C16062 - C16063) * C14636 +
            (C16064 - C16065 + C16066 - C16067) * C31923) *
               C32173 +
           ((C16369 - C16368 + C16371 - C16370) * C14635 +
            (C16373 - C16372 + C16375 - C16374) * C14629 +
            (C16376 - C16377 + C16378 - C16379) * C14636 +
            (C16380 - C16381 + C16382 - C16383) * C31923) *
               C32151) *
              C31835 * C210 +
          ((C15536 * C14635 + C15537 * C14629 + C15538 * C14636 +
            C15539 * C31923) *
               C32184 +
           ((C16061 - C16060 + C16063 - C16062) * C14635 +
            (C16065 - C16064 + C16067 - C16066) * C14629 +
            (C16069 - C16068 + C16071 - C16070) * C14636 +
            (C16073 - C16072 + C16075 - C16074) * C31923) *
               C32173 +
           ((C16377 - C16376 + C16379 - C16378) * C14635 +
            (C16381 - C16380 + C16383 - C16382) * C14629 +
            (C15385 * C6149 - C15391 * C6145 + C31782 * C6986 -
             C15392 * C6985) *
                C14636 +
            (C15385 * C6154 - C15391 * C6150 + C31782 * C6988 -
             C15392 * C6987) *
                C31923) *
               C32151) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
              C17324 * C128 - C30889 * C121) *
                 C14635 +
             (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
              C17324 * C142 - C30889 * C133) *
                 C14629 +
             (C17445 - C17446 + C17447 - C17448 + C17449 - C17450) * C14636 +
             (C17451 - C17452 + C17453 - C17454 + C17455 - C17456) * C31923) *
                C32118 +
            ((C18525 - C18526 + C18527 - C18528 + C18529 - C18530) * C14635 +
             (C18531 - C18532 + C18533 - C18534 + C18535 - C18536) * C14629 +
             (C18064 - C18063 + C18066 - C18065 + C18068 - C18067) * C14636 +
             (C18070 - C18069 + C18072 - C18071 + C18074 - C18073) * C31923) *
                C31963) *
               C31835 * C440 +
           (((C17446 - C17445 + C17448 - C17447 + C17450 - C17449) * C14635 +
             (C17452 - C17451 + C17454 - C17453 + C17456 - C17455) * C14629 +
             (C17458 - C17457 + C17460 - C17459 + C17462 - C17461) * C14636 +
             (C17464 - C17463 + C17466 - C17465 + C17468 - C17467) * C31923) *
                C32118 +
            ((C18063 - C18064 + C18065 - C18066 + C18067 - C18068) * C14635 +
             (C18069 - C18070 + C18071 - C18072 + C18073 - C18074) * C14629 +
             (C18075 - C18076 + C18077 - C18078 + C18079 - C18080) * C14636 +
             (C18081 - C18082 + C18083 - C18084 + C18085 - C18086) * C31923) *
                C31963) *
               C31835 * C441) *
              C442 +
          ((((C30883 * C120 - C31777 * C127 + C30879 * C121 - C31785 * C128 +
              C30889 * C122 - C17324 * C129) *
                 C14635 +
             (C30883 * C132 - C31777 * C141 + C30879 * C133 - C31785 * C142 +
              C30889 * C134 - C17324 * C143) *
                 C14629 +
             (C17747 - C17748 + C17749 - C17750 + C17751 - C17752) * C14636 +
             (C17753 - C17754 + C17755 - C17756 + C17757 - C17758) * C31923) *
                C32118 +
            ((C30883 * C319 - C31777 * C329 + C30879 * C320 - C31785 * C330 +
              C30889 * C321 - C17324 * C331) *
                 C14635 +
             (C30883 * C334 - C31777 * C349 + C30879 * C335 - C31785 * C350 +
              C30889 * C336 - C17324 * C351) *
                 C14629 +
             (C18755 - C18756 + C18757 - C18758 + C18759 - C18760) * C14636 +
             (C18761 - C18762 + C18763 - C18764 + C18765 - C18766) * C31923) *
                C31963) *
               C31835 * C440 +
           (((C17748 - C17747 + C17750 - C17749 + C17752 - C17751) * C14635 +
             (C17754 - C17753 + C17756 - C17755 + C17758 - C17757) * C14629 +
             (C17760 - C17759 + C17762 - C17761 + C17764 - C17763) * C14636 +
             (C17766 - C17765 + C17768 - C17767 + C17770 - C17769) * C31923) *
                C32118 +
            ((C18756 - C18755 + C18758 - C18757 + C18760 - C18759) * C14635 +
             (C18762 - C18761 + C18764 - C18763 + C18766 - C18765) * C14629 +
             (C31777 * C1060 - C30883 * C1051 + C31785 * C1061 -
              C30879 * C1052 + C17324 * C1407 - C30889 * C1406) *
                 C14636 +
             (C31777 * C1078 - C30883 * C1063 + C31785 * C1079 -
              C30879 * C1064 + C17324 * C1409 - C30889 * C1408) *
                 C31923) *
                C31963) *
               C31835 * C441) *
              C443)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
              C17324 * C128 - C30889 * C121) *
                 C14635 +
             (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
              C17324 * C142 - C30889 * C133) *
                 C14629 +
             (C17445 - C17446 + C17447 - C17448 + C17449 - C17450) * C14636 +
             (C17451 - C17452 + C17453 - C17454 + C17455 - C17456) * C31923) *
                C32118 +
            ((C18525 - C18526 + C18527 - C18528 + C18529 - C18530) * C14635 +
             (C18531 - C18532 + C18533 - C18534 + C18535 - C18536) * C14629 +
             C19183 * C14636 + C19184 * C31923) *
                C31963) *
               C530 +
           (((C18526 - C18525 + C18528 - C18527 + C18530 - C18529) * C14635 +
             (C18532 - C18531 + C18534 - C18533 + C18536 - C18535) * C14629 +
             C19185 * C14636 + C19186 * C31923) *
                C32118 +
            ((C18537 - C18538 + C18539 - C18540 + C18541 - C18542) * C14635 +
             (C18543 - C18544 + C18545 - C18546 + C18547 - C18548) * C14629 +
             (C18549 - C18550 + C18551 - C18552 + C18553 - C18554) * C14636 +
             (C18555 - C18556 + C18557 - C18558 + C18559 - C18560) * C31923) *
                C31963) *
               C531) *
              C440 +
          ((((C17446 - C17445 + C17448 - C17447 + C17450 - C17449) * C14635 +
             (C17452 - C17451 + C17454 - C17453 + C17456 - C17455) * C14629 +
             (C17458 - C17457 + C17460 - C17459 + C17462 - C17461) * C14636 +
             (C17464 - C17463 + C17466 - C17465 + C17468 - C17467) * C31923) *
                C32118 +
            (C19185 * C14635 + C19186 * C14629 +
             (C18075 - C18076 + C18077 - C18078 + C18079 - C18080) * C14636 +
             (C18081 - C18082 + C18083 - C18084 + C18085 - C18086) * C31923) *
                C31963) *
               C530 +
           ((C19183 * C14635 + C19184 * C14629 +
             (C18076 - C18075 + C18078 - C18077 + C18080 - C18079) * C14636 +
             (C18082 - C18081 + C18084 - C18083 + C18086 - C18085) * C31923) *
                C32118 +
            ((C18550 - C18549 + C18552 - C18551 + C18554 - C18553) * C14635 +
             (C18556 - C18555 + C18558 - C18557 + C18560 - C18559) * C14629 +
             (C31777 * C1071 - C30883 * C1056 + C31785 * C1072 -
              C30879 * C1057 + C17324 * C1073 - C30889 * C1058) *
                 C14636 +
             (C31777 * C1083 - C30883 * C1074 + C31785 * C1084 -
              C30879 * C1075 + C17324 * C1085 - C30889 * C1076) *
                 C31923) *
                C31963) *
               C531) *
              C441) *
         C31809) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
             C17324 * C128 - C30889 * C121) *
                C14635 +
            (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
             C17324 * C142 - C30889 * C133) *
                C14629 +
            (C17445 - C17446 + C17447 - C17448 + C17449 - C17450) * C14636 +
            (C17451 - C17452 + C17453 - C17454 + C17455 - C17456) * C31923) *
               C32118 +
           ((C31777 * C328 - C30883 * C318 + C31785 * C329 - C30879 * C319 +
             C17324 * C330 - C30889 * C320) *
                C14635 +
            (C31777 * C348 - C30883 * C333 + C31785 * C349 - C30879 * C334 +
             C17324 * C350 - C30889 * C335) *
                C14629 +
            (C18064 - C18063 + C18066 - C18065 + C18068 - C18067) * C14636 +
            (C18070 - C18069 + C18072 - C18071 + C18074 - C18073) * C31923) *
               C31963) *
              C31835 * C209 +
          (((C17446 - C17445 + C17448 - C17447 + C17450 - C17449) * C14635 +
            (C17452 - C17451 + C17454 - C17453 + C17456 - C17455) * C14629 +
            (C17458 - C17457 + C17460 - C17459 + C17462 - C17461) * C14636 +
            (C17464 - C17463 + C17466 - C17465 + C17468 - C17467) * C31923) *
               C32118 +
           ((C18063 - C18064 + C18065 - C18066 + C18067 - C18068) * C14635 +
            (C18069 - C18070 + C18071 - C18072 + C18073 - C18074) * C14629 +
            (C18075 - C18076 + C18077 - C18078 + C18079 - C18080) * C14636 +
            (C18081 - C18082 + C18083 - C18084 + C18085 - C18086) * C31923) *
               C31963) *
              C31835 * C210 +
          ((C17489 * C14635 + C17490 * C14629 +
            (C17470 - C17469 + C17472 - C17471 + C17474 - C17473) * C14636 +
            (C17476 - C17475 + C17478 - C17477 + C17480 - C17479) * C31923) *
               C32118 +
           ((C18076 - C18075 + C18078 - C18077 + C18080 - C18079) * C14635 +
            (C18082 - C18081 + C18084 - C18083 + C18086 - C18085) * C14629 +
            (C31777 * C1559 - C30883 * C1556 + C31785 * C1560 - C30879 * C1557 +
             C17324 * C1561 - C30889 * C1558) *
                C14636 +
            (C31777 * C1565 - C30883 * C1562 + C31785 * C1566 - C30879 * C1563 +
             C17324 * C1567 - C30889 * C1564) *
                C31923) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
             C17324 * C128 - C30889 * C121) *
                C14635 +
            (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
             C17324 * C142 - C30889 * C133) *
                C14629 +
            (C17445 - C17446 + C17447 - C17448 + C17449 - C17450) * C14636 +
            (C17451 - C17452 + C17453 - C17454 + C17455 - C17456) * C31923) *
               C32118 +
           ((C31777 * C328 - C30883 * C318 + C31785 * C329 - C30879 * C319 +
             C17324 * C330 - C30889 * C320) *
                C14635 +
            (C31777 * C348 - C30883 * C333 + C31785 * C349 - C30879 * C334 +
             C17324 * C350 - C30889 * C335) *
                C14629 +
            (C18064 - C18063 + C18066 - C18065 + C18068 - C18067) * C14636 +
            (C18070 - C18069 + C18072 - C18071 + C18074 - C18073) * C31923) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C30883 * C120 - C31777 * C127 + C30879 * C121 - C31785 * C128 +
             C30889 * C122 - C17324 * C129) *
                C14635 +
            (C30883 * C132 - C31777 * C141 + C30879 * C133 - C31785 * C142 +
             C30889 * C134 - C17324 * C143) *
                C14629 +
            (C17747 - C17748 + C17749 - C17750 + C17751 - C17752) * C14636 +
            (C17753 - C17754 + C17755 - C17756 + C17757 - C17758) * C31923) *
               C32118 +
           ((C30883 * C319 - C31777 * C329 + C30879 * C320 - C31785 * C330 +
             C30889 * C321 - C17324 * C331) *
                C14635 +
            (C30883 * C334 - C31777 * C349 + C30879 * C335 - C31785 * C350 +
             C30889 * C336 - C17324 * C351) *
                C14629 +
            (C30883 * C619 - C31777 * C624 + C30879 * C620 - C31785 * C625 +
             C30889 * C621 - C17324 * C626) *
                C14636 +
            (C30883 * C629 - C31777 * C634 + C30879 * C630 - C31785 * C635 +
             C30889 * C631 - C17324 * C636) *
                C31923) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C31777 * C128 - C30883 * C121 + C31785 * C129 - C30879 * C122 +
             C17324 * C130 - C30889 * C123) *
                C14635 +
            (C31777 * C142 - C30883 * C133 + C31785 * C143 - C30879 * C134 +
             C17324 * C144 - C30889 * C135) *
                C14629 +
            (C31777 * C225 - C30883 * C215 + C31785 * C226 - C30879 * C216 +
             C17324 * C227 - C30889 * C217) *
                C14636 +
            (C31777 * C245 - C30883 * C230 + C31785 * C246 - C30879 * C231 +
             C17324 * C247 - C30889 * C232) *
                C31923) *
               C32118 +
           ((C31777 * C330 - C30883 * C320 + C31785 * C331 - C30879 * C321 +
             C17324 * C332 - C30889 * C322) *
                C14635 +
            (C31777 * C350 - C30883 * C335 + C31785 * C351 - C30879 * C336 +
             C17324 * C352 - C30889 * C337) *
                C14629 +
            (C31777 * C625 - C30883 * C620 + C31785 * C626 - C30879 * C621 +
             C17324 * C627 - C30889 * C622) *
                C14636 +
            (C31777 * C635 - C30883 * C630 + C31785 * C636 - C30879 * C631 +
             C17324 * C637 - C30889 * C632) *
                C31923) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
             C17324 * C128 - C30889 * C121) *
                C14635 +
            (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
             C17324 * C142 - C30889 * C133) *
                C14629 +
            (C17445 - C17446 + C17447 - C17448 + C17449 - C17450) * C14636 +
            (C17451 - C17452 + C17453 - C17454 + C17455 - C17456) * C31923) *
               C32118 +
           ((C18525 - C18526 + C18527 - C18528 + C18529 - C18530) * C14635 +
            (C18531 - C18532 + C18533 - C18534 + C18535 - C18536) * C14629 +
            (C18064 - C18063 + C18066 - C18065 + C18068 - C18067) * C14636 +
            (C18070 - C18069 + C18072 - C18071 + C18074 - C18073) * C31923) *
               C31963) *
              C315 +
          (((C18526 - C18525 + C18528 - C18527 + C18530 - C18529) * C14635 +
            (C18532 - C18531 + C18534 - C18533 + C18536 - C18535) * C14629 +
            (C18063 - C18064 + C18065 - C18066 + C18067 - C18068) * C14636 +
            (C18069 - C18070 + C18071 - C18072 + C18073 - C18074) * C31923) *
               C32118 +
           ((C18537 - C18538 + C18539 - C18540 + C18541 - C18542) * C14635 +
            (C18543 - C18544 + C18545 - C18546 + C18547 - C18548) * C14629 +
            (C18549 - C18550 + C18551 - C18552 + C18553 - C18554) * C14636 +
            (C18555 - C18556 + C18557 - C18558 + C18559 - C18560) * C31923) *
               C31963) *
              C316 +
          (((C18538 - C18537 + C18540 - C18539 + C18542 - C18541) * C14635 +
            (C18544 - C18543 + C18546 - C18545 + C18548 - C18547) * C14629 +
            (C18550 - C18549 + C18552 - C18551 + C18554 - C18553) * C14636 +
            (C18556 - C18555 + C18558 - C18557 + C18560 - C18559) * C31923) *
               C32118 +
           ((C31777 * C1931 - C30883 * C1925 + C31785 * C1932 - C30879 * C1926 +
             C17324 * C1933 - C30889 * C1927) *
                C14635 +
            (C31777 * C1943 - C30883 * C1934 + C31785 * C1944 - C30879 * C1935 +
             C17324 * C1945 - C30889 * C1936) *
                C14629 +
            (C31777 * C2471 - C30883 * C2468 + C31785 * C2472 - C30879 * C2469 +
             C17324 * C2473 - C30889 * C2470) *
                C14636 +
            (C31777 * C2477 - C30883 * C2474 + C31785 * C2478 - C30879 * C2475 +
             C17324 * C2479 - C30889 * C2476) *
                C31923) *
               C31963) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
              C17324 * C128 - C30889 * C121) *
                 C14635 +
             (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
              C17324 * C142 - C30889 * C133) *
                 C14629 +
             (C17445 - C17446 + C17447 - C17448 + C17449 - C17450) * C14636 +
             (C17451 - C17452 + C17453 - C17454 + C17455 - C17456) * C31923) *
                C32118 +
            ((C18525 - C18526 + C18527 - C18528 + C18529 - C18530) * C14635 +
             (C18531 - C18532 + C18533 - C18534 + C18535 - C18536) * C14629 +
             (C18064 - C18063 + C18066 - C18065 + C18068 - C18067) * C14636 +
             (C18070 - C18069 + C18072 - C18071 + C18074 - C18073) * C31923) *
                C31963) *
               C530 +
           (((C18526 - C18525 + C18528 - C18527 + C18530 - C18529) * C14635 +
             (C18532 - C18531 + C18534 - C18533 + C18536 - C18535) * C14629 +
             (C18063 - C18064 + C18065 - C18066 + C18067 - C18068) * C14636 +
             (C18069 - C18070 + C18071 - C18072 + C18073 - C18074) * C31923) *
                C32118 +
            ((C18537 - C18538 + C18539 - C18540 + C18541 - C18542) * C14635 +
             (C18543 - C18544 + C18545 - C18546 + C18547 - C18548) * C14629 +
             (C18549 - C18550 + C18551 - C18552 + C18553 - C18554) * C14636 +
             (C18555 - C18556 + C18557 - C18558 + C18559 - C18560) * C31923) *
                C31963) *
               C531) *
              C31821 * C442 +
          ((((C30883 * C120 - C31777 * C127 + C30879 * C121 - C31785 * C128 +
              C30889 * C122 - C17324 * C129) *
                 C14635 +
             (C30883 * C132 - C31777 * C141 + C30879 * C133 - C31785 * C142 +
              C30889 * C134 - C17324 * C143) *
                 C14629 +
             (C17747 - C17748 + C17749 - C17750 + C17751 - C17752) * C14636 +
             (C17753 - C17754 + C17755 - C17756 + C17757 - C17758) * C31923) *
                C32118 +
            ((C18961 - C18962 + C18963 - C18964 + C18965 - C18966) * C14635 +
             (C18967 - C18968 + C18969 - C18970 + C18971 - C18972) * C14629 +
             (C18755 - C18756 + C18757 - C18758 + C18759 - C18760) * C14636 +
             (C18761 - C18762 + C18763 - C18764 + C18765 - C18766) * C31923) *
                C31963) *
               C530 +
           (((C18962 - C18961 + C18964 - C18963 + C18966 - C18965) * C14635 +
             (C18968 - C18967 + C18970 - C18969 + C18972 - C18971) * C14629 +
             (C18756 - C18755 + C18758 - C18757 + C18760 - C18759) * C14636 +
             (C18762 - C18761 + C18764 - C18763 + C18766 - C18765) * C31923) *
                C32118 +
            ((C31777 * C339 - C30883 * C324 + C31785 * C340 - C30879 * C325 +
              C17324 * C341 - C30889 * C326) *
                 C14635 +
             (C31777 * C354 - C30883 * C344 + C31785 * C355 - C30879 * C345 +
              C17324 * C356 - C30889 * C346) *
                 C14629 +
             (C31777 * C1066 - C30883 * C1054 + C31785 * C1067 -
              C30879 * C1055 + C17324 * C2145 - C30889 * C2144) *
                 C14636 +
             (C31777 * C1081 - C30883 * C1069 + C31785 * C1082 -
              C30879 * C1070 + C17324 * C2147 - C30889 * C2146) *
                 C31923) *
                C31963) *
               C531) *
              C31821 * C443)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
             C17324 * C128 - C30889 * C121) *
                C14635 +
            (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
             C17324 * C142 - C30889 * C133) *
                C14629 +
            (C17445 - C17446 + C17447 - C17448 + C17449 - C17450) * C14636 +
            (C17451 - C17452 + C17453 - C17454 + C17455 - C17456) * C31923) *
               C32118 +
           ((C31777 * C328 - C30883 * C318 + C31785 * C329 - C30879 * C319 +
             C17324 * C330 - C30889 * C320) *
                C14635 +
            (C31777 * C348 - C30883 * C333 + C31785 * C349 - C30879 * C334 +
             C17324 * C350 - C30889 * C335) *
                C14629 +
            (C18064 - C18063 + C18066 - C18065 + C18068 - C18067) * C14636 +
            (C18070 - C18069 + C18072 - C18071 + C18074 - C18073) * C31923) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C30883 * C120 - C31777 * C127 + C30879 * C121 - C31785 * C128 +
             C30889 * C122 - C17324 * C129) *
                C14635 +
            (C30883 * C132 - C31777 * C141 + C30879 * C133 - C31785 * C142 +
             C30889 * C134 - C17324 * C143) *
                C14629 +
            (C17747 - C17748 + C17749 - C17750 + C17751 - C17752) * C14636 +
            (C17753 - C17754 + C17755 - C17756 + C17757 - C17758) * C31923) *
               C32118 +
           ((C30883 * C319 - C31777 * C329 + C30879 * C320 - C31785 * C330 +
             C30889 * C321 - C17324 * C331) *
                C14635 +
            (C30883 * C334 - C31777 * C349 + C30879 * C335 - C31785 * C350 +
             C30889 * C336 - C17324 * C351) *
                C14629 +
            (C30883 * C619 - C31777 * C624 + C30879 * C620 - C31785 * C625 +
             C30889 * C621 - C17324 * C626) *
                C14636 +
            (C30883 * C629 - C31777 * C634 + C30879 * C630 - C31785 * C635 +
             C30889 * C631 - C17324 * C636) *
                C31923) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C31777 * C128 - C30883 * C121 + C31785 * C129 - C30879 * C122 +
             C17324 * C130 - C30889 * C123) *
                C14635 +
            (C31777 * C142 - C30883 * C133 + C31785 * C143 - C30879 * C134 +
             C17324 * C144 - C30889 * C135) *
                C14629 +
            (C31777 * C225 - C30883 * C215 + C31785 * C226 - C30879 * C216 +
             C17324 * C227 - C30889 * C217) *
                C14636 +
            (C31777 * C245 - C30883 * C230 + C31785 * C246 - C30879 * C231 +
             C17324 * C247 - C30889 * C232) *
                C31923) *
               C32118 +
           ((C31777 * C330 - C30883 * C320 + C31785 * C331 - C30879 * C321 +
             C17324 * C332 - C30889 * C322) *
                C14635 +
            (C31777 * C350 - C30883 * C335 + C31785 * C351 - C30879 * C336 +
             C17324 * C352 - C30889 * C337) *
                C14629 +
            (C31777 * C625 - C30883 * C620 + C31785 * C626 - C30879 * C621 +
             C17324 * C627 - C30889 * C622) *
                C14636 +
            (C31777 * C635 - C30883 * C630 + C31785 * C636 - C30879 * C631 +
             C17324 * C637 - C30889 * C632) *
                C31923) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
             C17324 * C128 - C30889 * C121) *
                C14635 +
            (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
             C17324 * C142 - C30889 * C133) *
                C14629 +
            (C17445 - C17446 + C17447 - C17448 + C17449 - C17450) * C14636 +
            (C17451 - C17452 + C17453 - C17454 + C17455 - C17456) * C31923) *
               C32118 +
           ((C31777 * C328 - C30883 * C318 + C31785 * C329 - C30879 * C319 +
             C17324 * C330 - C30889 * C320) *
                C14635 +
            (C31777 * C348 - C30883 * C333 + C31785 * C349 - C30879 * C334 +
             C17324 * C350 - C30889 * C335) *
                C14629 +
            (C18064 - C18063 + C18066 - C18065 + C18068 - C18067) * C14636 +
            (C18070 - C18069 + C18072 - C18071 + C18074 - C18073) * C31923) *
               C31963) *
              C31835 * C209 +
          (((C17446 - C17445 + C17448 - C17447 + C17450 - C17449) * C14635 +
            (C17452 - C17451 + C17454 - C17453 + C17456 - C17455) * C14629 +
            (C17458 - C17457 + C17460 - C17459 + C17462 - C17461) * C14636 +
            (C17464 - C17463 + C17466 - C17465 + C17468 - C17467) * C31923) *
               C32118 +
           ((C18063 - C18064 + C18065 - C18066 + C18067 - C18068) * C14635 +
            (C18069 - C18070 + C18071 - C18072 + C18073 - C18074) * C14629 +
            (C18075 - C18076 + C18077 - C18078 + C18079 - C18080) * C14636 +
            (C18081 - C18082 + C18083 - C18084 + C18085 - C18086) * C31923) *
               C31963) *
              C31835 * C210 +
          ((C17489 * C14635 + C17490 * C14629 +
            (C17470 - C17469 + C17472 - C17471 + C17474 - C17473) * C14636 +
            (C17476 - C17475 + C17478 - C17477 + C17480 - C17479) * C31923) *
               C32118 +
           ((C18076 - C18075 + C18078 - C18077 + C18080 - C18079) * C14635 +
            (C18082 - C18081 + C18084 - C18083 + C18086 - C18085) * C14629 +
            (C31777 * C1559 - C30883 * C1556 + C31785 * C1560 - C30879 * C1557 +
             C17324 * C1561 - C30889 * C1558) *
                C14636 +
            (C31777 * C1565 - C30883 * C1562 + C31785 * C1566 - C30879 * C1563 +
             C17324 * C1567 - C30889 * C1564) *
                C31923) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
             C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
                C14635 +
            (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
             C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
                C14629 +
            (C14736 - C14737 + C14738 - C14739 + C14740 - C14741 + C14742 -
             C14743) *
                C14636 +
            (C14744 - C14745 + C14746 - C14747 + C14748 - C14749 + C14750 -
             C14751) *
                C31923) *
               C31876 * C31835 * C440 +
           ((C14737 - C14736 + C14739 - C14738 + C14741 - C14740 + C14743 -
             C14742) *
                C14635 +
            (C14745 - C14744 + C14747 - C14746 + C14749 - C14748 + C14751 -
             C14750) *
                C14629 +
            (C14752 - C14753 + C14754 - C14755 + C14756 - C14757 + C14758 -
             C14759) *
                C14636 +
            (C14760 - C14761 + C14762 - C14763 + C14764 - C14765 + C14766 -
             C14767) *
                C31923) *
               C31876 * C31835 * C441) *
              C442 +
          (((C14631 * C120 - C32189 * C127 + C14632 * C121 - C32182 * C128 +
             C14633 * C122 - C32169 * C129 + C14634 * C123 - C32152 * C130) *
                C14635 +
            (C14631 * C132 - C32189 * C141 + C14632 * C133 - C32182 * C142 +
             C14633 * C134 - C32169 * C143 + C14634 * C135 - C32152 * C144) *
                C14629 +
            (C14996 - C14997 + C14998 - C14999 + C15000 - C15001 + C15002 -
             C15003) *
                C14636 +
            (C15004 - C15005 + C15006 - C15007 + C15008 - C15009 + C15010 -
             C15011) *
                C31923) *
               C31876 * C31835 * C440 +
           ((C14997 - C14996 + C14999 - C14998 + C15001 - C15000 + C15003 -
             C15002) *
                C14635 +
            (C15005 - C15004 + C15007 - C15006 + C15009 - C15008 + C15011 -
             C15010) *
                C14629 +
            (C32189 * C234 - C14631 * C219 + C32182 * C235 - C14632 * C220 +
             C32169 * C236 - C14633 * C221 + C32152 * C237 - C14634 * C222) *
                C14636 +
            (C32189 * C249 - C14631 * C239 + C32182 * C250 - C14632 * C240 +
             C32169 * C251 - C14633 * C241 + C32152 * C252 - C14634 * C242) *
                C31923) *
               C31876 * C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C15393 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C32190 +
            (C15496 - C15497 + C15498 - C15499) * C15394 +
            (C15500 - C15501 + C15502 - C15503) * C32186 + C15536 * C15395 +
            C15537 * C32176 + C15538 * C15396 + C15539 * C32158) *
               C31876 * C31835 * C440 +
           ((C15497 - C15496 + C15499 - C15498) * C15393 +
            (C15501 - C15500 + C15503 - C15502) * C32190 +
            (C15505 - C15504 + C15507 - C15506) * C15394 +
            (C15509 - C15508 + C15511 - C15510) * C32186 +
            (C15513 - C15512 + C15515 - C15514) * C15395 +
            (C15517 - C15516 + C15519 - C15518) * C32176 +
            (C15520 - C15521 + C15522 - C15523) * C15396 +
            (C15524 - C15525 + C15526 - C15527) * C32158) *
               C31876 * C31835 * C441) *
              C442 +
          (((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                C15393 +
            (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                C32190 +
            (C15768 - C15769 + C15770 - C15771) * C15394 +
            (C15772 - C15773 + C15774 - C15775) * C32186 +
            (C15776 - C15777 + C15778 - C15779) * C15395 +
            (C15780 - C15781 + C15782 - C15783) * C32176 +
            (C15784 - C15785 + C15786 - C15787) * C15396 +
            (C15788 - C15789 + C15790 - C15791) * C32158) *
               C31876 * C31835 * C440 +
           ((C15769 - C15768 + C15771 - C15770) * C15393 +
            (C15773 - C15772 + C15775 - C15774) * C32190 +
            (C15777 - C15776 + C15779 - C15778) * C15394 +
            (C15781 - C15780 + C15783 - C15782) * C32186 +
            (C15785 - C15784 + C15787 - C15786) * C15395 +
            (C15789 - C15788 + C15791 - C15790) * C32176 +
            (C15385 * C883 - C15391 * C874 + C31782 * C884 - C15392 * C875) *
                C15396 +
            (C15385 * C892 - C15391 * C886 + C31782 * C893 - C15392 * C887) *
                C32158) *
               C31876 * C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
             C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
                C14635 +
            (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
             C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
                C14629 +
            (C14736 - C14737 + C14738 - C14739 + C14740 - C14741 + C14742 -
             C14743) *
                C14636 +
            (C14744 - C14745 + C14746 - C14747 + C14748 - C14749 + C14750 -
             C14751) *
                C31923) *
               C31876 * C530 +
           ((C14631 * C318 - C32189 * C328 + C14632 * C319 - C32182 * C329 +
             C14633 * C320 - C32169 * C330 + C14634 * C321 - C32152 * C331) *
                C14635 +
            (C14631 * C333 - C32189 * C348 + C14632 * C334 - C32182 * C349 +
             C14633 * C335 - C32169 * C350 + C14634 * C336 - C32152 * C351) *
                C14629 +
            (C15272 - C15273 + C15274 - C15275 + C15276 - C15277 + C15278 -
             C15279) *
                C14636 +
            (C15280 - C15281 + C15282 - C15283 + C15284 - C15285 + C15286 -
             C15287) *
                C31923) *
               C31876 * C531) *
              C440 +
          (((C14737 - C14736 + C14739 - C14738 + C14741 - C14740 + C14743 -
             C14742) *
                C14635 +
            (C14745 - C14744 + C14747 - C14746 + C14749 - C14748 + C14751 -
             C14750) *
                C14629 +
            (C14752 - C14753 + C14754 - C14755 + C14756 - C14757 + C14758 -
             C14759) *
                C14636 +
            (C14760 - C14761 + C14762 - C14763 + C14764 - C14765 + C14766 -
             C14767) *
                C31923) *
               C31876 * C530 +
           ((C15273 - C15272 + C15275 - C15274 + C15277 - C15276 + C15279 -
             C15278) *
                C14635 +
            (C15281 - C15280 + C15283 - C15282 + C15285 - C15284 + C15287 -
             C15286) *
                C14629 +
            (C32189 * C1059 - C14631 * C1050 + C32182 * C1060 - C14632 * C1051 +
             C32169 * C1061 - C14633 * C1052 + C32152 * C1407 -
             C14634 * C1406) *
                C14636 +
            (C32189 * C1077 - C14631 * C1062 + C32182 * C1078 - C14632 * C1063 +
             C32169 * C1079 - C14633 * C1064 + C32152 * C1409 -
             C14634 * C1408) *
                C31923) *
               C31876 * C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C15393 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C32190 +
            (C15496 - C15497 + C15498 - C15499) * C15394 +
            (C15500 - C15501 + C15502 - C15503) * C32186 + C15536 * C15395 +
            C15537 * C32176 + C15538 * C15396 + C15539 * C32158) *
               C31876 * C530 +
           ((C15391 * C318 - C15385 * C328 + C15392 * C319 - C31782 * C329) *
                C15393 +
            (C15391 * C333 - C15385 * C348 + C15392 * C334 - C31782 * C349) *
                C32190 +
            (C16052 - C16053 + C16054 - C16055) * C15394 +
            (C16056 - C16057 + C16058 - C16059) * C32186 +
            (C16060 - C16061 + C16062 - C16063) * C15395 +
            (C16064 - C16065 + C16066 - C16067) * C32176 +
            (C16068 - C16069 + C16070 - C16071) * C15396 +
            (C16072 - C16073 + C16074 - C16075) * C32158) *
               C31876 * C531) *
              C440 +
          (((C15497 - C15496 + C15499 - C15498) * C15393 +
            (C15501 - C15500 + C15503 - C15502) * C32190 +
            (C15505 - C15504 + C15507 - C15506) * C15394 +
            (C15509 - C15508 + C15511 - C15510) * C32186 +
            (C15513 - C15512 + C15515 - C15514) * C15395 +
            (C15517 - C15516 + C15519 - C15518) * C32176 +
            (C15520 - C15521 + C15522 - C15523) * C15396 +
            (C15524 - C15525 + C15526 - C15527) * C32158) *
               C31876 * C530 +
           ((C16053 - C16052 + C16055 - C16054) * C15393 +
            (C16057 - C16056 + C16059 - C16058) * C32190 +
            (C16061 - C16060 + C16063 - C16062) * C15394 +
            (C16065 - C16064 + C16067 - C16066) * C32186 +
            (C16069 - C16068 + C16071 - C16070) * C15395 +
            (C16073 - C16072 + C16075 - C16074) * C32176 +
            (C15385 * C6147 - C15391 * C6144 + C31782 * C6341 -
             C15392 * C6340) *
                C15396 +
            (C15385 * C6153 - C15391 * C6148 + C31782 * C6343 -
             C15392 * C6342) *
                C32158) *
               C31876 * C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
            C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
               C14635 +
           (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
            C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
               C14629 +
           (C14736 - C14737 + C14738 - C14739 + C14740 - C14741 + C14742 -
            C14743) *
               C14636 +
           (C14744 - C14745 + C14746 - C14747 + C14748 - C14749 + C14750 -
            C14751) *
               C31923) *
              C31876 * C31835 * C209 +
          ((C14737 - C14736 + C14739 - C14738 + C14741 - C14740 + C14743 -
            C14742) *
               C14635 +
           (C14745 - C14744 + C14747 - C14746 + C14749 - C14748 + C14751 -
            C14750) *
               C14629 +
           (C14752 - C14753 + C14754 - C14755 + C14756 - C14757 + C14758 -
            C14759) *
               C14636 +
           (C14760 - C14761 + C14762 - C14763 + C14764 - C14765 + C14766 -
            C14767) *
               C31923) *
              C31876 * C31835 * C210 +
          ((C14753 - C14752 + C14755 - C14754 + C14757 - C14756 + C14759 -
            C14758) *
               C14635 +
           (C14761 - C14760 + C14763 - C14762 + C14765 - C14764 + C14767 -
            C14766) *
               C14629 +
           (C32189 * C876 - C14631 * C870 + C32182 * C877 - C14632 * C871 +
            C32169 * C878 - C14633 * C872 + C32152 * C1233 - C14634 * C1232) *
               C14636 +
           (C32189 * C888 - C14631 * C879 + C32182 * C889 - C14632 * C880 +
            C32169 * C890 - C14633 * C881 + C32152 * C1235 - C14634 * C1234) *
               C31923) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
            C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
               C14635 +
           (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
            C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
               C14629 +
           (C32189 * C223 - C14631 * C213 + C32182 * C224 - C14632 * C214 +
            C32169 * C225 - C14633 * C215 + C32152 * C226 - C14634 * C216) *
               C14636 +
           (C32189 * C243 - C14631 * C228 + C32182 * C244 - C14632 * C229 +
            C32169 * C245 - C14633 * C230 + C32152 * C246 - C14634 * C231) *
               C31923) *
              C31876 * C31835 * C31821 * C110 +
          ((C14631 * C120 - C32189 * C127 + C14632 * C121 - C32182 * C128 +
            C14633 * C122 - C32169 * C129 + C14634 * C123 - C32152 * C130) *
               C14635 +
           (C14631 * C132 - C32189 * C141 + C14632 * C133 - C32182 * C142 +
            C14633 * C134 - C32169 * C143 + C14634 * C135 - C32152 * C144) *
               C14629 +
           (C14631 * C214 - C32189 * C224 + C14632 * C215 - C32182 * C225 +
            C14633 * C216 - C32169 * C226 + C14634 * C217 - C32152 * C227) *
               C14636 +
           (C14631 * C229 - C32189 * C244 + C14632 * C230 - C32182 * C245 +
            C14633 * C231 - C32169 * C246 + C14634 * C232 - C32152 * C247) *
               C31923) *
              C31876 * C31835 * C31821 * C111 +
          ((C32189 * C128 - C14631 * C121 + C32182 * C129 - C14632 * C122 +
            C32169 * C130 - C14633 * C123 + C32152 * C136 - C14634 * C124) *
               C14635 +
           (C32189 * C142 - C14631 * C133 + C32182 * C143 - C14632 * C134 +
            C32169 * C144 - C14633 * C135 + C32152 * C145 - C14634 * C137) *
               C14629 +
           (C32189 * C225 - C14631 * C215 + C32182 * C226 - C14632 * C216 +
            C32169 * C227 - C14633 * C217 + C32152 * C445 - C14634 * C444) *
               C14636 +
           (C32189 * C245 - C14631 * C230 + C32182 * C246 - C14632 * C231 +
            C32169 * C247 - C14633 * C232 + C32152 * C447 - C14634 * C446) *
               C31923) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
            C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
               C14635 +
           (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
            C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
               C14629 +
           (C14736 - C14737 + C14738 - C14739 + C14740 - C14741 + C14742 -
            C14743) *
               C14636 +
           (C14744 - C14745 + C14746 - C14747 + C14748 - C14749 + C14750 -
            C14751) *
               C31923) *
              C31876 * C315 +
          ((C14631 * C318 - C32189 * C328 + C14632 * C319 - C32182 * C329 +
            C14633 * C320 - C32169 * C330 + C14634 * C321 - C32152 * C331) *
               C14635 +
           (C14631 * C333 - C32189 * C348 + C14632 * C334 - C32182 * C349 +
            C14633 * C335 - C32169 * C350 + C14634 * C336 - C32152 * C351) *
               C14629 +
           (C14631 * C618 - C32189 * C623 + C14632 * C619 - C32182 * C624 +
            C14633 * C620 - C32169 * C625 + C14634 * C621 - C32152 * C626) *
               C14636 +
           (C14631 * C628 - C32189 * C633 + C14632 * C629 - C32182 * C634 +
            C14633 * C630 - C32169 * C635 + C14634 * C631 - C32152 * C636) *
               C31923) *
              C31876 * C316 +
          ((C32189 * C338 - C14631 * C323 + C32182 * C339 - C14632 * C324 +
            C32169 * C340 - C14633 * C325 + C32152 * C341 - C14634 * C326) *
               C14635 +
           (C32189 * C353 - C14631 * C343 + C32182 * C354 - C14632 * C344 +
            C32169 * C355 - C14633 * C345 + C32152 * C356 - C14634 * C346) *
               C14629 +
           (C32189 * C1065 - C14631 * C1053 + C32182 * C1066 - C14632 * C1054 +
            C32169 * C1067 - C14633 * C1055 + C32152 * C2145 - C14634 * C2144) *
               C14636 +
           (C32189 * C1080 - C14631 * C1068 + C32182 * C1081 - C14632 * C1069 +
            C32169 * C1082 - C14633 * C1070 + C32152 * C2147 - C14634 * C2146) *
               C31923) *
              C31876 * C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
               C15393 +
           (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
               C32190 +
           (C15385 * C223 - C15391 * C213 + C31782 * C224 - C15392 * C214) *
               C15394 +
           (C15385 * C243 - C15391 * C228 + C31782 * C244 - C15392 * C229) *
               C32186 +
           (C15385 * C233 - C15391 * C218 + C31782 * C234 - C15392 * C219) *
               C15395 +
           (C15385 * C248 - C15391 * C238 + C31782 * C249 - C15392 * C239) *
               C32176 +
           (C15385 * C876 - C15391 * C870 + C31782 * C877 - C15392 * C871) *
               C15396 +
           (C15385 * C888 - C15391 * C879 + C31782 * C889 - C15392 * C880) *
               C32158) *
              C31876 * C31835 * C31821 * C110 +
          ((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
               C15393 +
           (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
               C32190 +
           (C15391 * C214 - C15385 * C224 + C15392 * C215 - C31782 * C225) *
               C15394 +
           (C15391 * C229 - C15385 * C244 + C15392 * C230 - C31782 * C245) *
               C32186 +
           (C15391 * C219 - C15385 * C234 + C15392 * C220 - C31782 * C235) *
               C15395 +
           (C15391 * C239 - C15385 * C249 + C15392 * C240 - C31782 * C250) *
               C32176 +
           (C15391 * C871 - C15385 * C877 + C15392 * C872 - C31782 * C878) *
               C15396 +
           (C15391 * C880 - C15385 * C889 + C15392 * C881 - C31782 * C890) *
               C32158) *
              C31876 * C31835 * C31821 * C111 +
          ((C15385 * C128 - C15391 * C121 + C31782 * C129 - C15392 * C122) *
               C15393 +
           (C15385 * C142 - C15391 * C133 + C31782 * C143 - C15392 * C134) *
               C32190 +
           (C15385 * C225 - C15391 * C215 + C31782 * C226 - C15392 * C216) *
               C15394 +
           (C15385 * C245 - C15391 * C230 + C31782 * C246 - C15392 * C231) *
               C32186 +
           (C15385 * C235 - C15391 * C220 + C31782 * C236 - C15392 * C221) *
               C15395 +
           (C15385 * C250 - C15391 * C240 + C31782 * C251 - C15392 * C241) *
               C32176 +
           (C15385 * C878 - C15391 * C872 + C31782 * C1233 - C15392 * C1232) *
               C15396 +
           (C15385 * C890 - C15391 * C881 + C31782 * C1235 - C15392 * C1234) *
               C32158) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
               C15393 +
           (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
               C32190 +
           (C15496 - C15497 + C15498 - C15499) * C15394 +
           (C15500 - C15501 + C15502 - C15503) * C32186 + C15536 * C15395 +
           C15537 * C32176 + C15538 * C15396 + C15539 * C32158) *
              C31876 * C31835 * C209 +
          ((C15497 - C15496 + C15499 - C15498) * C15393 +
           (C15501 - C15500 + C15503 - C15502) * C32190 +
           (C15505 - C15504 + C15507 - C15506) * C15394 +
           (C15509 - C15508 + C15511 - C15510) * C32186 +
           (C15513 - C15512 + C15515 - C15514) * C15395 +
           (C15517 - C15516 + C15519 - C15518) * C32176 +
           (C15520 - C15521 + C15522 - C15523) * C15396 +
           (C15524 - C15525 + C15526 - C15527) * C32158) *
              C31876 * C31835 * C210 +
          (C15536 * C15393 + C15537 * C32190 + C15538 * C15394 +
           C15539 * C32186 + (C15521 - C15520 + C15523 - C15522) * C15395 +
           (C15525 - C15524 + C15527 - C15526) * C32176 +
           (C15385 * C6050 - C15391 * C6048 + C31782 * C6239 - C15392 * C6238) *
               C15396 +
           (C15385 * C6054 - C15391 * C6051 + C31782 * C6241 - C15392 * C6240) *
               C32158) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
               C15393 +
           (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
               C32190 +
           (C15496 - C15497 + C15498 - C15499) * C15394 +
           (C15500 - C15501 + C15502 - C15503) * C32186 + C15536 * C15395 +
           C15537 * C32176 + C15538 * C15396 + C15539 * C32158) *
              C31876 * C315 +
          ((C15391 * C318 - C15385 * C328 + C15392 * C319 - C31782 * C329) *
               C15393 +
           (C15391 * C333 - C15385 * C348 + C15392 * C334 - C31782 * C349) *
               C32190 +
           (C15391 * C618 - C15385 * C623 + C15392 * C619 - C31782 * C624) *
               C15394 +
           (C15391 * C628 - C15385 * C633 + C15392 * C629 - C31782 * C634) *
               C32186 +
           (C15391 * C1050 - C15385 * C1059 + C15392 * C1051 - C31782 * C1060) *
               C15395 +
           (C15391 * C1062 - C15385 * C1077 + C15392 * C1063 - C31782 * C1078) *
               C32176 +
           (C15391 * C1556 - C15385 * C1559 + C15392 * C1557 - C31782 * C1560) *
               C15396 +
           (C15391 * C1562 - C15385 * C1565 + C15392 * C1563 - C31782 * C1566) *
               C32158) *
              C31876 * C316 +
          ((C15385 * C338 - C15391 * C323 + C31782 * C339 - C15392 * C324) *
               C15393 +
           (C15385 * C353 - C15391 * C343 + C31782 * C354 - C15392 * C344) *
               C32190 +
           (C15385 * C1065 - C15391 * C1053 + C31782 * C1066 - C15392 * C1054) *
               C15394 +
           (C15385 * C1080 - C15391 * C1068 + C31782 * C1081 - C15392 * C1069) *
               C32186 +
           (C15385 * C1071 - C15391 * C1056 + C31782 * C1072 - C15392 * C1057) *
               C15395 +
           (C15385 * C1083 - C15391 * C1074 + C31782 * C1084 - C15392 * C1075) *
               C32176 +
           (C15385 * C6149 - C15391 * C6145 + C31782 * C6986 - C15392 * C6985) *
               C15396 +
           (C15385 * C6154 - C15391 * C6150 + C31782 * C6988 - C15392 * C6987) *
               C32158) *
              C31876 * C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
             C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
                C14635 +
            (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
             C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
                C14629 +
            (C14736 - C14737 + C14738 - C14739 + C14740 - C14741 + C14742 -
             C14743) *
                C14636 +
            (C14744 - C14745 + C14746 - C14747 + C14748 - C14749 + C14750 -
             C14751) *
                C31923) *
               C31876 * C530 +
           ((C14631 * C318 - C32189 * C328 + C14632 * C319 - C32182 * C329 +
             C14633 * C320 - C32169 * C330 + C14634 * C321 - C32152 * C331) *
                C14635 +
            (C14631 * C333 - C32189 * C348 + C14632 * C334 - C32182 * C349 +
             C14633 * C335 - C32169 * C350 + C14634 * C336 - C32152 * C351) *
                C14629 +
            (C14631 * C618 - C32189 * C623 + C14632 * C619 - C32182 * C624 +
             C14633 * C620 - C32169 * C625 + C14634 * C621 - C32152 * C626) *
                C14636 +
            (C14631 * C628 - C32189 * C633 + C14632 * C629 - C32182 * C634 +
             C14633 * C630 - C32169 * C635 + C14634 * C631 - C32152 * C636) *
                C31923) *
               C31876 * C531) *
              C31821 * C442 +
          (((C14631 * C120 - C32189 * C127 + C14632 * C121 - C32182 * C128 +
             C14633 * C122 - C32169 * C129 + C14634 * C123 - C32152 * C130) *
                C14635 +
            (C14631 * C132 - C32189 * C141 + C14632 * C133 - C32182 * C142 +
             C14633 * C134 - C32169 * C143 + C14634 * C135 - C32152 * C144) *
                C14629 +
            (C14996 - C14997 + C14998 - C14999 + C15000 - C15001 + C15002 -
             C15003) *
                C14636 +
            (C15004 - C15005 + C15006 - C15007 + C15008 - C15009 + C15010 -
             C15011) *
                C31923) *
               C31876 * C530 +
           ((C32189 * C329 - C14631 * C319 + C32182 * C330 - C14632 * C320 +
             C32169 * C331 - C14633 * C321 + C32152 * C332 - C14634 * C322) *
                C14635 +
            (C32189 * C349 - C14631 * C334 + C32182 * C350 - C14632 * C335 +
             C32169 * C351 - C14633 * C336 + C32152 * C352 - C14634 * C337) *
                C14629 +
            (C32189 * C624 - C14631 * C619 + C32182 * C625 - C14632 * C620 +
             C32169 * C626 - C14633 * C621 + C32152 * C627 - C14634 * C622) *
                C14636 +
            (C32189 * C634 - C14631 * C629 + C32182 * C635 - C14632 * C630 +
             C32169 * C636 - C14633 * C631 + C32152 * C637 - C14634 * C632) *
                C31923) *
               C31876 * C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C15393 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C32190 +
            (C15496 - C15497 + C15498 - C15499) * C15394 +
            (C15500 - C15501 + C15502 - C15503) * C32186 + C15536 * C15395 +
            C15537 * C32176 + C15538 * C15396 + C15539 * C32158) *
               C31876 * C530 +
           ((C15391 * C318 - C15385 * C328 + C15392 * C319 - C31782 * C329) *
                C15393 +
            (C15391 * C333 - C15385 * C348 + C15392 * C334 - C31782 * C349) *
                C32190 +
            (C15391 * C618 - C15385 * C623 + C15392 * C619 - C31782 * C624) *
                C15394 +
            (C15391 * C628 - C15385 * C633 + C15392 * C629 - C31782 * C634) *
                C32186 +
            (C15391 * C1050 - C15385 * C1059 + C15392 * C1051 -
             C31782 * C1060) *
                C15395 +
            (C15391 * C1062 - C15385 * C1077 + C15392 * C1063 -
             C31782 * C1078) *
                C32176 +
            (C15391 * C1556 - C15385 * C1559 + C15392 * C1557 -
             C31782 * C1560) *
                C15396 +
            (C15391 * C1562 - C15385 * C1565 + C15392 * C1563 -
             C31782 * C1566) *
                C32158) *
               C31876 * C531) *
              C31821 * C442 +
          (((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                C15393 +
            (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                C32190 +
            (C15768 - C15769 + C15770 - C15771) * C15394 +
            (C15772 - C15773 + C15774 - C15775) * C32186 +
            (C15776 - C15777 + C15778 - C15779) * C15395 +
            (C15780 - C15781 + C15782 - C15783) * C32176 +
            (C15784 - C15785 + C15786 - C15787) * C15396 +
            (C15788 - C15789 + C15790 - C15791) * C32158) *
               C31876 * C530 +
           ((C15385 * C329 - C15391 * C319 + C31782 * C330 - C15392 * C320) *
                C15393 +
            (C15385 * C349 - C15391 * C334 + C31782 * C350 - C15392 * C335) *
                C32190 +
            (C15385 * C624 - C15391 * C619 + C31782 * C625 - C15392 * C620) *
                C15394 +
            (C15385 * C634 - C15391 * C629 + C31782 * C635 - C15392 * C630) *
                C32186 +
            (C15385 * C1060 - C15391 * C1051 + C31782 * C1061 -
             C15392 * C1052) *
                C15395 +
            (C15385 * C1078 - C15391 * C1063 + C31782 * C1079 -
             C15392 * C1064) *
                C32176 +
            (C15385 * C1560 - C15391 * C1557 + C31782 * C1561 -
             C15392 * C1558) *
                C15396 +
            (C15385 * C1566 - C15391 * C1563 + C31782 * C1567 -
             C15392 * C1564) *
                C32158) *
               C31876 * C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
            C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
               C14635 +
           (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
            C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
               C14629 +
           (C32189 * C223 - C14631 * C213 + C32182 * C224 - C14632 * C214 +
            C32169 * C225 - C14633 * C215 + C32152 * C226 - C14634 * C216) *
               C14636 +
           (C32189 * C243 - C14631 * C228 + C32182 * C244 - C14632 * C229 +
            C32169 * C245 - C14633 * C230 + C32152 * C246 - C14634 * C231) *
               C31923) *
              C31876 * C31835 * C31821 * C110 +
          ((C14631 * C120 - C32189 * C127 + C14632 * C121 - C32182 * C128 +
            C14633 * C122 - C32169 * C129 + C14634 * C123 - C32152 * C130) *
               C14635 +
           (C14631 * C132 - C32189 * C141 + C14632 * C133 - C32182 * C142 +
            C14633 * C134 - C32169 * C143 + C14634 * C135 - C32152 * C144) *
               C14629 +
           (C14631 * C214 - C32189 * C224 + C14632 * C215 - C32182 * C225 +
            C14633 * C216 - C32169 * C226 + C14634 * C217 - C32152 * C227) *
               C14636 +
           (C14631 * C229 - C32189 * C244 + C14632 * C230 - C32182 * C245 +
            C14633 * C231 - C32169 * C246 + C14634 * C232 - C32152 * C247) *
               C31923) *
              C31876 * C31835 * C31821 * C111 +
          ((C32189 * C128 - C14631 * C121 + C32182 * C129 - C14632 * C122 +
            C32169 * C130 - C14633 * C123 + C32152 * C136 - C14634 * C124) *
               C14635 +
           (C32189 * C142 - C14631 * C133 + C32182 * C143 - C14632 * C134 +
            C32169 * C144 - C14633 * C135 + C32152 * C145 - C14634 * C137) *
               C14629 +
           (C32189 * C225 - C14631 * C215 + C32182 * C226 - C14632 * C216 +
            C32169 * C227 - C14633 * C217 + C32152 * C445 - C14634 * C444) *
               C14636 +
           (C32189 * C245 - C14631 * C230 + C32182 * C246 - C14632 * C231 +
            C32169 * C247 - C14633 * C232 + C32152 * C447 - C14634 * C446) *
               C31923) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
            C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
               C14635 +
           (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
            C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
               C14629 +
           (C14736 - C14737 + C14738 - C14739 + C14740 - C14741 + C14742 -
            C14743) *
               C14636 +
           (C14744 - C14745 + C14746 - C14747 + C14748 - C14749 + C14750 -
            C14751) *
               C31923) *
              C31876 * C31835 * C209 +
          ((C14737 - C14736 + C14739 - C14738 + C14741 - C14740 + C14743 -
            C14742) *
               C14635 +
           (C14745 - C14744 + C14747 - C14746 + C14749 - C14748 + C14751 -
            C14750) *
               C14629 +
           (C14752 - C14753 + C14754 - C14755 + C14756 - C14757 + C14758 -
            C14759) *
               C14636 +
           (C14760 - C14761 + C14762 - C14763 + C14764 - C14765 + C14766 -
            C14767) *
               C31923) *
              C31876 * C31835 * C210 +
          ((C14753 - C14752 + C14755 - C14754 + C14757 - C14756 + C14759 -
            C14758) *
               C14635 +
           (C14761 - C14760 + C14763 - C14762 + C14765 - C14764 + C14767 -
            C14766) *
               C14629 +
           (C32189 * C876 - C14631 * C870 + C32182 * C877 - C14632 * C871 +
            C32169 * C878 - C14633 * C872 + C32152 * C1233 - C14634 * C1232) *
               C14636 +
           (C32189 * C888 - C14631 * C879 + C32182 * C889 - C14632 * C880 +
            C32169 * C890 - C14633 * C881 + C32152 * C1235 - C14634 * C1234) *
               C31923) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
               C15393 +
           (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
               C32190 +
           (C15385 * C223 - C15391 * C213 + C31782 * C224 - C15392 * C214) *
               C15394 +
           (C15385 * C243 - C15391 * C228 + C31782 * C244 - C15392 * C229) *
               C32186 +
           (C15385 * C233 - C15391 * C218 + C31782 * C234 - C15392 * C219) *
               C15395 +
           (C15385 * C248 - C15391 * C238 + C31782 * C249 - C15392 * C239) *
               C32176 +
           (C15385 * C876 - C15391 * C870 + C31782 * C877 - C15392 * C871) *
               C15396 +
           (C15385 * C888 - C15391 * C879 + C31782 * C889 - C15392 * C880) *
               C32158) *
              C31876 * C31835 * C31821 * C110 +
          ((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
               C15393 +
           (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
               C32190 +
           (C15391 * C214 - C15385 * C224 + C15392 * C215 - C31782 * C225) *
               C15394 +
           (C15391 * C229 - C15385 * C244 + C15392 * C230 - C31782 * C245) *
               C32186 +
           (C15391 * C219 - C15385 * C234 + C15392 * C220 - C31782 * C235) *
               C15395 +
           (C15391 * C239 - C15385 * C249 + C15392 * C240 - C31782 * C250) *
               C32176 +
           (C15391 * C871 - C15385 * C877 + C15392 * C872 - C31782 * C878) *
               C15396 +
           (C15391 * C880 - C15385 * C889 + C15392 * C881 - C31782 * C890) *
               C32158) *
              C31876 * C31835 * C31821 * C111 +
          ((C15385 * C128 - C15391 * C121 + C31782 * C129 - C15392 * C122) *
               C15393 +
           (C15385 * C142 - C15391 * C133 + C31782 * C143 - C15392 * C134) *
               C32190 +
           (C15385 * C225 - C15391 * C215 + C31782 * C226 - C15392 * C216) *
               C15394 +
           (C15385 * C245 - C15391 * C230 + C31782 * C246 - C15392 * C231) *
               C32186 +
           (C15385 * C235 - C15391 * C220 + C31782 * C236 - C15392 * C221) *
               C15395 +
           (C15385 * C250 - C15391 * C240 + C31782 * C251 - C15392 * C241) *
               C32176 +
           (C15385 * C878 - C15391 * C872 + C31782 * C1233 - C15392 * C1232) *
               C15396 +
           (C15385 * C890 - C15391 * C881 + C31782 * C1235 - C15392 * C1234) *
               C32158) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
               C15393 +
           (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
               C32190 +
           (C15496 - C15497 + C15498 - C15499) * C15394 +
           (C15500 - C15501 + C15502 - C15503) * C32186 + C15536 * C15395 +
           C15537 * C32176 + C15538 * C15396 + C15539 * C32158) *
              C31876 * C31835 * C209 +
          ((C15497 - C15496 + C15499 - C15498) * C15393 +
           (C15501 - C15500 + C15503 - C15502) * C32190 +
           (C15505 - C15504 + C15507 - C15506) * C15394 +
           (C15509 - C15508 + C15511 - C15510) * C32186 +
           (C15513 - C15512 + C15515 - C15514) * C15395 +
           (C15517 - C15516 + C15519 - C15518) * C32176 +
           (C15520 - C15521 + C15522 - C15523) * C15396 +
           (C15524 - C15525 + C15526 - C15527) * C32158) *
              C31876 * C31835 * C210 +
          (C15536 * C15393 + C15537 * C32190 + C15538 * C15394 +
           C15539 * C32186 + (C15521 - C15520 + C15523 - C15522) * C15395 +
           (C15525 - C15524 + C15527 - C15526) * C32176 +
           (C15385 * C6050 - C15391 * C6048 + C31782 * C6239 - C15392 * C6238) *
               C15396 +
           (C15385 * C6054 - C15391 * C6051 + C31782 * C6241 - C15392 * C6240) *
               C32158) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                 C31006 +
             (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                 C31919 +
             (C7532 - C7533 + C7534 - C7535) * C30998 +
             (C7536 - C7537 + C7538 - C7539) * C31926 + C7572 * C31012 +
             C7573 * C17327) *
                C20324 +
            ((C8556 - C8557 + C8558 - C8559) * C31006 +
             (C8560 - C8561 + C8562 - C8563) * C31919 + C9206 * C30998 +
             C9207 * C31926 + C8408 * C31012 + C8409 * C17327) *
                C31963) *
               C31835 * C440 +
           (((C7533 - C7532 + C7535 - C7534) * C31006 +
             (C7537 - C7536 + C7539 - C7538) * C31919 +
             (C7541 - C7540 + C7543 - C7542) * C30998 +
             (C7545 - C7544 + C7547 - C7546) * C31926 +
             (C7549 - C7548 + C7551 - C7550) * C31012 +
             (C7553 - C7552 + C7555 - C7554) * C17327) *
                C20324 +
            (C9208 * C31006 + C9209 * C31919 + C9210 * C30998 + C9211 * C31926 +
             (C8104 - C8105 + C8106 - C8107) * C31012 +
             (C8108 - C8109 + C8110 - C8111) * C17327) *
                C31963) *
               C31835 * C441) *
              C442 +
          ((((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                 C31006 +
             (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                 C31919 +
             (C7804 - C7805 + C7806 - C7807) * C30998 +
             (C7808 - C7809 + C7810 - C7811) * C31926 +
             (C7812 - C7813 + C7814 - C7815) * C31012 +
             (C7816 - C7817 + C7818 - C7819) * C17327) *
                C20324 +
            ((C8992 - C8993 + C8994 - C8995) * C31006 +
             (C8996 - C8997 + C8998 - C8999) * C31919 +
             (C8782 - C8783 + C8784 - C8785) * C30998 +
             (C8786 - C8787 + C8788 - C8789) * C31926 +
             (C8790 - C8791 + C8792 - C8793) * C31012 +
             (C8794 - C8795 + C8796 - C8797) * C17327) *
                C31963) *
               C31835 * C440 +
           (((C7805 - C7804 + C7807 - C7806) * C31006 +
             (C7809 - C7808 + C7811 - C7810) * C31919 +
             (C7813 - C7812 + C7815 - C7814) * C30998 +
             (C7817 - C7816 + C7819 - C7818) * C31926 +
             (C7821 - C7820 + C7823 - C7822) * C31012 +
             (C7825 - C7824 + C7827 - C7826) * C17327) *
                C20324 +
            ((C8783 - C8782 + C8785 - C8784) * C31006 +
             (C8787 - C8786 + C8789 - C8788) * C31919 +
             (C8791 - C8790 + C8793 - C8792) * C30998 +
             (C8795 - C8794 + C8797 - C8796) * C31926 +
             (C32098 * C1560 - C30873 * C1557 + C31782 * C1561 -
              C30854 * C1558) *
                 C31012 +
             (C32098 * C1566 - C30873 * C1563 + C31782 * C1567 -
              C30854 * C1564) *
                 C17327) *
                C31963) *
               C31835 * C441) *
              C443)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                 C31006 +
             (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                 C31919 +
             (C7532 - C7533 + C7534 - C7535) * C30998 +
             (C7536 - C7537 + C7538 - C7539) * C31926 + C7572 * C31012 +
             C7573 * C17327) *
                C20324 +
            ((C8556 - C8557 + C8558 - C8559) * C31006 +
             (C8560 - C8561 + C8562 - C8563) * C31919 + C9206 * C30998 +
             C9207 * C31926 + C8408 * C31012 + C8409 * C17327) *
                C31963) *
               C530 +
           (((C8557 - C8556 + C8559 - C8558) * C31006 +
             (C8561 - C8560 + C8563 - C8562) * C31919 + C9208 * C30998 +
             C9209 * C31926 + C9210 * C31012 + C9211 * C17327) *
                C20324 +
            ((C8564 - C8565 + C8566 - C8567) * C31006 +
             (C8568 - C8569 + C8570 - C8571) * C31919 + C13104 * C30998 +
             C13105 * C31926 + (C8580 - C8581 + C8582 - C8583) * C31012 +
             (C8584 - C8585 + C8586 - C8587) * C17327) *
                C31963) *
               C531) *
              C440 +
          ((((C7533 - C7532 + C7535 - C7534) * C31006 +
             (C7537 - C7536 + C7539 - C7538) * C31919 +
             (C7541 - C7540 + C7543 - C7542) * C30998 +
             (C7545 - C7544 + C7547 - C7546) * C31926 +
             (C7549 - C7548 + C7551 - C7550) * C31012 +
             (C7553 - C7552 + C7555 - C7554) * C17327) *
                C20324 +
            (C9208 * C31006 + C9209 * C31919 + C9210 * C30998 + C9211 * C31926 +
             (C8104 - C8105 + C8106 - C8107) * C31012 +
             (C8108 - C8109 + C8110 - C8111) * C17327) *
                C31963) *
               C530 +
           ((C9206 * C31006 + C9207 * C31919 + C8408 * C30998 + C8409 * C31926 +
             (C8105 - C8104 + C8107 - C8106) * C31012 +
             (C8109 - C8108 + C8111 - C8110) * C17327) *
                C20324 +
            (C12493 * C31006 + C12494 * C31919 +
             (C8581 - C8580 + C8583 - C8582) * C30998 +
             (C8585 - C8584 + C8587 - C8586) * C31926 +
             (C32098 * C6149 - C30873 * C6145 + C31782 * C6986 -
              C30854 * C6985) *
                 C31012 +
             (C32098 * C6154 - C30873 * C6150 + C31782 * C6988 -
              C30854 * C6987) *
                 C17327) *
                C31963) *
               C531) *
              C441) *
         C31809) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C31006 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C31919 +
            (C7532 - C7533 + C7534 - C7535) * C30998 +
            (C7536 - C7537 + C7538 - C7539) * C31926 + C7572 * C31012 +
            C7573 * C17327) *
               C20324 +
           ((C8556 - C8557 + C8558 - C8559) * C31006 +
            (C8560 - C8561 + C8562 - C8563) * C31919 + C9206 * C30998 +
            C9207 * C31926 + C8408 * C31012 + C8409 * C17327) *
               C31963) *
              C31835 * C209 +
          (((C7533 - C7532 + C7535 - C7534) * C31006 +
            (C7537 - C7536 + C7539 - C7538) * C31919 +
            (C7541 - C7540 + C7543 - C7542) * C30998 +
            (C7545 - C7544 + C7547 - C7546) * C31926 +
            (C7549 - C7548 + C7551 - C7550) * C31012 +
            (C7553 - C7552 + C7555 - C7554) * C17327) *
               C20324 +
           (C9208 * C31006 + C9209 * C31919 + C9210 * C30998 + C9211 * C31926 +
            (C8104 - C8105 + C8106 - C8107) * C31012 +
            (C8108 - C8109 + C8110 - C8111) * C17327) *
               C31963) *
              C31835 * C210 +
          ((C7572 * C31006 + C7573 * C31919 + C7574 * C30998 + C7575 * C31926 +
            (C7557 - C7556 + C7559 - C7558) * C31012 +
            (C7561 - C7560 + C7563 - C7562) * C17327) *
               C20324 +
           (C8408 * C31006 + C8409 * C31919 +
            (C8105 - C8104 + C8107 - C8106) * C30998 +
            (C8109 - C8108 + C8111 - C8110) * C31926 +
            (C32098 * C6147 - C30873 * C6144 + C31782 * C6341 -
             C30854 * C6340) *
                C31012 +
            (C32098 * C6153 - C30873 * C6148 + C31782 * C6343 -
             C30854 * C6342) *
                C17327) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C31006 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C31919 +
            (C7532 - C7533 + C7534 - C7535) * C30998 +
            (C7536 - C7537 + C7538 - C7539) * C31926 + C7572 * C31012 +
            C7573 * C17327) *
               C20324 +
           ((C8556 - C8557 + C8558 - C8559) * C31006 +
            (C8560 - C8561 + C8562 - C8563) * C31919 + C9206 * C30998 +
            C9207 * C31926 + C8408 * C31012 + C8409 * C17327) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                C31006 +
            (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                C31919 +
            (C7804 - C7805 + C7806 - C7807) * C30998 +
            (C7808 - C7809 + C7810 - C7811) * C31926 +
            (C7812 - C7813 + C7814 - C7815) * C31012 +
            (C7816 - C7817 + C7818 - C7819) * C17327) *
               C20324 +
           ((C8992 - C8993 + C8994 - C8995) * C31006 +
            (C8996 - C8997 + C8998 - C8999) * C31919 +
            (C8782 - C8783 + C8784 - C8785) * C30998 +
            (C8786 - C8787 + C8788 - C8789) * C31926 +
            (C8790 - C8791 + C8792 - C8793) * C31012 +
            (C8794 - C8795 + C8796 - C8797) * C17327) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C32098 * C128 - C30873 * C121 + C31782 * C129 - C30854 * C122) *
                C31006 +
            (C32098 * C142 - C30873 * C133 + C31782 * C143 - C30854 * C134) *
                C31919 +
            (C32098 * C225 - C30873 * C215 + C31782 * C226 - C30854 * C216) *
                C30998 +
            (C32098 * C245 - C30873 * C230 + C31782 * C246 - C30854 * C231) *
                C31926 +
            (C32098 * C235 - C30873 * C220 + C31782 * C236 - C30854 * C221) *
                C31012 +
            (C32098 * C250 - C30873 * C240 + C31782 * C251 - C30854 * C241) *
                C17327) *
               C20324 +
           ((C32098 * C330 - C30873 * C320 + C31782 * C331 - C30854 * C321) *
                C31006 +
            (C32098 * C350 - C30873 * C335 + C31782 * C351 - C30854 * C336) *
                C31919 +
            (C32098 * C625 - C30873 * C620 + C31782 * C626 - C30854 * C621) *
                C30998 +
            (C32098 * C635 - C30873 * C630 + C31782 * C636 - C30854 * C631) *
                C31926 +
            (C32098 * C1061 - C30873 * C1052 + C31782 * C1407 -
             C30854 * C1406) *
                C31012 +
            (C32098 * C1079 - C30873 * C1064 + C31782 * C1409 -
             C30854 * C1408) *
                C17327) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C31006 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C31919 +
            (C7532 - C7533 + C7534 - C7535) * C30998 +
            (C7536 - C7537 + C7538 - C7539) * C31926 + C7572 * C31012 +
            C7573 * C17327) *
               C20324 +
           ((C8556 - C8557 + C8558 - C8559) * C31006 +
            (C8560 - C8561 + C8562 - C8563) * C31919 + C9206 * C30998 +
            C9207 * C31926 + C8408 * C31012 + C8409 * C17327) *
               C31963) *
              C315 +
          (((C8557 - C8556 + C8559 - C8558) * C31006 +
            (C8561 - C8560 + C8563 - C8562) * C31919 + C9208 * C30998 +
            C9209 * C31926 + C9210 * C31012 + C9211 * C17327) *
               C20324 +
           ((C8564 - C8565 + C8566 - C8567) * C31006 +
            (C8568 - C8569 + C8570 - C8571) * C31919 + C13104 * C30998 +
            C13105 * C31926 + (C8580 - C8581 + C8582 - C8583) * C31012 +
            (C8584 - C8585 + C8586 - C8587) * C17327) *
               C31963) *
              C316 +
          ((C12491 * C31006 + C12492 * C31919 + C12493 * C30998 +
            C12494 * C31926 + (C8581 - C8580 + C8583 - C8582) * C31012 +
            (C8585 - C8584 + C8587 - C8586) * C17327) *
               C20324 +
           (C13419 * C31006 + C13420 * C31919 +
            (C12484 - C12483 + C12486 - C12485) * C30998 +
            (C12488 - C12487 + C12490 - C12489) * C31926 +
            (C32098 * C6795 - C30873 * C6792 + C31782 * C7152 -
             C30854 * C7151) *
                C31012 +
            (C32098 * C6801 - C30873 * C6796 + C31782 * C7154 -
             C30854 * C7153) *
                C17327) *
               C31963) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                 C31006 +
             (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                 C31919 +
             (C7532 - C7533 + C7534 - C7535) * C30998 +
             (C7536 - C7537 + C7538 - C7539) * C31926 + C7572 * C31012 +
             C7573 * C17327) *
                C20324 +
            ((C8556 - C8557 + C8558 - C8559) * C31006 +
             (C8560 - C8561 + C8562 - C8563) * C31919 + C9206 * C30998 +
             C9207 * C31926 + C8408 * C31012 + C8409 * C17327) *
                C31963) *
               C530 +
           (((C8557 - C8556 + C8559 - C8558) * C31006 +
             (C8561 - C8560 + C8563 - C8562) * C31919 + C9208 * C30998 +
             C9209 * C31926 + C9210 * C31012 + C9211 * C17327) *
                C20324 +
            ((C8564 - C8565 + C8566 - C8567) * C31006 +
             (C8568 - C8569 + C8570 - C8571) * C31919 + C13104 * C30998 +
             C13105 * C31926 + (C8580 - C8581 + C8582 - C8583) * C31012 +
             (C8584 - C8585 + C8586 - C8587) * C17327) *
                C31963) *
               C531) *
              C31821 * C442 +
          ((((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                 C31006 +
             (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                 C31919 +
             (C7804 - C7805 + C7806 - C7807) * C30998 +
             (C7808 - C7809 + C7810 - C7811) * C31926 +
             (C7812 - C7813 + C7814 - C7815) * C31012 +
             (C7816 - C7817 + C7818 - C7819) * C17327) *
                C20324 +
            ((C8992 - C8993 + C8994 - C8995) * C31006 +
             (C8996 - C8997 + C8998 - C8999) * C31919 +
             (C8782 - C8783 + C8784 - C8785) * C30998 +
             (C8786 - C8787 + C8788 - C8789) * C31926 +
             (C8790 - C8791 + C8792 - C8793) * C31012 +
             (C8794 - C8795 + C8796 - C8797) * C17327) *
                C31963) *
               C530 +
           (((C8993 - C8992 + C8995 - C8994) * C31006 +
             (C8997 - C8996 + C8999 - C8998) * C31919 +
             (C8783 - C8782 + C8785 - C8784) * C30998 +
             (C8787 - C8786 + C8789 - C8788) * C31926 +
             (C8791 - C8790 + C8793 - C8792) * C31012 +
             (C8795 - C8794 + C8797 - C8796) * C17327) *
                C20324 +
            ((C12899 - C12898 + C12901 - C12900) * C31006 +
             (C12903 - C12902 + C12905 - C12904) * C31919 +
             (C12697 - C12696 + C12699 - C12698) * C30998 +
             (C12701 - C12700 + C12703 - C12702) * C31926 +
             (C32098 * C1072 - C30873 * C1057 + C31782 * C1073 -
              C30854 * C1058) *
                 C31012 +
             (C32098 * C1084 - C30873 * C1075 + C31782 * C1085 -
              C30854 * C1076) *
                 C17327) *
                C31963) *
               C531) *
              C31821 * C443)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C31006 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C31919 +
            (C7532 - C7533 + C7534 - C7535) * C30998 +
            (C7536 - C7537 + C7538 - C7539) * C31926 + C7572 * C31012 +
            C7573 * C17327) *
               C20324 +
           ((C8556 - C8557 + C8558 - C8559) * C31006 +
            (C8560 - C8561 + C8562 - C8563) * C31919 + C9206 * C30998 +
            C9207 * C31926 + C8408 * C31012 + C8409 * C17327) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                C31006 +
            (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                C31919 +
            (C7804 - C7805 + C7806 - C7807) * C30998 +
            (C7808 - C7809 + C7810 - C7811) * C31926 +
            (C7812 - C7813 + C7814 - C7815) * C31012 +
            (C7816 - C7817 + C7818 - C7819) * C17327) *
               C20324 +
           ((C8992 - C8993 + C8994 - C8995) * C31006 +
            (C8996 - C8997 + C8998 - C8999) * C31919 +
            (C8782 - C8783 + C8784 - C8785) * C30998 +
            (C8786 - C8787 + C8788 - C8789) * C31926 +
            (C8790 - C8791 + C8792 - C8793) * C31012 +
            (C8794 - C8795 + C8796 - C8797) * C17327) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C32098 * C128 - C30873 * C121 + C31782 * C129 - C30854 * C122) *
                C31006 +
            (C32098 * C142 - C30873 * C133 + C31782 * C143 - C30854 * C134) *
                C31919 +
            (C32098 * C225 - C30873 * C215 + C31782 * C226 - C30854 * C216) *
                C30998 +
            (C32098 * C245 - C30873 * C230 + C31782 * C246 - C30854 * C231) *
                C31926 +
            (C32098 * C235 - C30873 * C220 + C31782 * C236 - C30854 * C221) *
                C31012 +
            (C32098 * C250 - C30873 * C240 + C31782 * C251 - C30854 * C241) *
                C17327) *
               C20324 +
           ((C32098 * C330 - C30873 * C320 + C31782 * C331 - C30854 * C321) *
                C31006 +
            (C32098 * C350 - C30873 * C335 + C31782 * C351 - C30854 * C336) *
                C31919 +
            (C32098 * C625 - C30873 * C620 + C31782 * C626 - C30854 * C621) *
                C30998 +
            (C32098 * C635 - C30873 * C630 + C31782 * C636 - C30854 * C631) *
                C31926 +
            (C32098 * C1061 - C30873 * C1052 + C31782 * C1407 -
             C30854 * C1406) *
                C31012 +
            (C32098 * C1079 - C30873 * C1064 + C31782 * C1409 -
             C30854 * C1408) *
                C17327) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C31006 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C31919 +
            (C7532 - C7533 + C7534 - C7535) * C30998 +
            (C7536 - C7537 + C7538 - C7539) * C31926 + C7572 * C31012 +
            C7573 * C17327) *
               C20324 +
           ((C8556 - C8557 + C8558 - C8559) * C31006 +
            (C8560 - C8561 + C8562 - C8563) * C31919 + C9206 * C30998 +
            C9207 * C31926 + C8408 * C31012 + C8409 * C17327) *
               C31963) *
              C31835 * C209 +
          (((C7533 - C7532 + C7535 - C7534) * C31006 +
            (C7537 - C7536 + C7539 - C7538) * C31919 +
            (C7541 - C7540 + C7543 - C7542) * C30998 +
            (C7545 - C7544 + C7547 - C7546) * C31926 +
            (C7549 - C7548 + C7551 - C7550) * C31012 +
            (C7553 - C7552 + C7555 - C7554) * C17327) *
               C20324 +
           (C9208 * C31006 + C9209 * C31919 + C9210 * C30998 + C9211 * C31926 +
            (C8104 - C8105 + C8106 - C8107) * C31012 +
            (C8108 - C8109 + C8110 - C8111) * C17327) *
               C31963) *
              C31835 * C210 +
          ((C7572 * C31006 + C7573 * C31919 + C7574 * C30998 + C7575 * C31926 +
            (C7557 - C7556 + C7559 - C7558) * C31012 +
            (C7561 - C7560 + C7563 - C7562) * C17327) *
               C20324 +
           (C8408 * C31006 + C8409 * C31919 +
            (C8105 - C8104 + C8107 - C8106) * C30998 +
            (C8109 - C8108 + C8111 - C8110) * C31926 +
            (C32098 * C6147 - C30873 * C6144 + C31782 * C6341 -
             C30854 * C6340) *
                C31012 +
            (C32098 * C6153 - C30873 * C6148 + C31782 * C6343 -
             C30854 * C6342) *
                C17327) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C31006 +
             (C31772 * C140 - C5980 * C131) * C31919 +
             (C6057 - C6058) * C30998 + (C6059 - C6060) * C31926 +
             C6077 * C31012 + C6078 * C17327) *
                C31959 +
            ((C6805 - C6806) * C31006 + (C6807 - C6808) * C31919 +
             C7314 * C30998 + C7315 * C31926 + C6667 * C31012 +
             C6668 * C17327) *
                C31966 +
            C30373 * C23828) *
               C31835 * C440 +
           (((C6058 - C6057) * C31006 + (C6060 - C6059) * C31919 +
             (C6062 - C6061) * C30998 + (C6064 - C6063) * C31926 +
             (C6066 - C6065) * C31012 + (C6068 - C6067) * C17327) *
                C31959 +
            (C7316 * C31006 + C7317 * C31919 + C7318 * C30998 + C7319 * C31926 +
             C9902 * C31012 + C9903 * C17327) *
                C31966 +
            (C7320 * C31006 + C7321 * C31919 + C7322 * C30998 + C7323 * C31926 +
             (C6677 - C6678) * C31012 + (C6679 - C6680) * C17327) *
                C23828) *
               C31835 * C441) *
              C442 +
          ((((C5980 * C120 - C31772 * C127) * C31006 +
             (C5980 * C132 - C31772 * C141) * C31919 +
             (C6243 - C6244) * C30998 + (C6245 - C6246) * C31926 +
             (C6247 - C6248) * C31012 + (C6249 - C6250) * C17327) *
                C31959 +
            ((C7156 - C7157) * C31006 + (C7158 - C7159) * C31919 +
             (C6990 - C6991) * C30998 + (C6992 - C6993) * C31926 +
             (C6994 - C6995) * C31012 + (C6996 - C6997) * C17327) *
                C31966 +
            ((C7160 - C7161) * C31006 + (C7162 - C7163) * C31919 +
             (C6998 - C6999) * C30998 + (C7000 - C7001) * C31926 +
             (C7002 - C7003) * C31012 + (C7004 - C7005) * C17327) *
                C23828) *
               C31835 * C440 +
           (((C6244 - C6243) * C31006 + (C6246 - C6245) * C31919 +
             (C6248 - C6247) * C30998 + (C6250 - C6249) * C31926 +
             (C6252 - C6251) * C31012 + (C6254 - C6253) * C17327) *
                C31959 +
            ((C6991 - C6990) * C31006 + (C6993 - C6992) * C31919 +
             (C6995 - C6994) * C30998 + (C6997 - C6996) * C31926 +
             (C9639 - C9638) * C31012 + (C9641 - C9640) * C17327) *
                C31966 +
            ((C6999 - C6998) * C31006 + (C7001 - C7000) * C31919 +
             (C7003 - C7002) * C30998 + (C7005 - C7004) * C31926 +
             (C31772 * C6986 - C5980 * C6985) * C31012 +
             (C31772 * C6988 - C5980 * C6987) * C17327) *
                C23828) *
               C31835 * C441) *
              C443)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C31006 +
             (C31772 * C140 - C5980 * C131) * C31919 +
             (C6057 - C6058) * C30998 + (C6059 - C6060) * C31926 +
             C6077 * C31012 + C6078 * C17327) *
                C31959 +
            ((C6805 - C6806) * C31006 + (C6807 - C6808) * C31919 +
             C7314 * C30998 + C7315 * C31926 + C6667 * C31012 +
             C6668 * C17327) *
                C31966 +
            C30373 * C23828) *
               C530 +
           (((C6806 - C6805) * C31006 + (C6808 - C6807) * C31919 +
             C7316 * C30998 + C7317 * C31926 + C7318 * C31012 +
             C7319 * C17327) *
                C31959 +
            ((C6810 - C6809) * C31006 + (C6812 - C6811) * C31919 +
             C7320 * C30998 + C7321 * C31926 + C7322 * C31012 +
             C7323 * C17327) *
                C31966 +
            ((C6817 - C6818) * C31006 + (C6819 - C6820) * C31919 +
             C14526 * C30998 + C14527 * C31926 + (C6825 - C6826) * C31012 +
             (C6827 - C6828) * C17327) *
                C23828) *
               C531) *
              C440 +
          ((((C6058 - C6057) * C31006 + (C6060 - C6059) * C31919 +
             (C6062 - C6061) * C30998 + (C6064 - C6063) * C31926 +
             (C6066 - C6065) * C31012 + (C6068 - C6067) * C17327) *
                C31959 +
            (C7316 * C31006 + C7317 * C31919 + C7318 * C30998 + C7319 * C31926 +
             C9902 * C31012 + C9903 * C17327) *
                C31966 +
            (C7320 * C31006 + C7321 * C31919 + C7322 * C30998 + C7323 * C31926 +
             (C6677 - C6678) * C31012 + (C6679 - C6680) * C17327) *
                C23828) *
               C530 +
           ((C7314 * C31006 + C7315 * C31919 + C6667 * C30998 + C6668 * C31926 +
             C9408 * C31012 + C9409 * C17327) *
                C31959 +
            (C6813 * C31006 + C6814 * C31919 + C6681 * C30998 + C6682 * C31926 +
             (C6678 - C6677) * C31012 + (C6680 - C6679) * C17327) *
                C31966 +
            (C14122 * C31006 + C14123 * C31919 + (C6826 - C6825) * C30998 +
             (C6828 - C6827) * C31926 +
             (C31772 * C7310 - C5980 * C7309) * C31012 +
             (C31772 * C7312 - C5980 * C7311) * C17327) *
                C23828) *
               C531) *
              C441) *
         C31809) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C31006 +
            (C31772 * C140 - C5980 * C131) * C31919 + (C6057 - C6058) * C30998 +
            (C6059 - C6060) * C31926 + C6077 * C31012 + C6078 * C17327) *
               C31959 +
           ((C6805 - C6806) * C31006 + (C6807 - C6808) * C31919 +
            C7314 * C30998 + C7315 * C31926 + C6667 * C31012 + C6668 * C17327) *
               C31966 +
           (C6829 * C31006 + C6830 * C31919 + C6813 * C30998 + C6814 * C31926 +
            C6681 * C31012 + C6682 * C17327) *
               C23828) *
              C31835 * C209 +
          (((C6058 - C6057) * C31006 + (C6060 - C6059) * C31919 +
            (C6062 - C6061) * C30998 + (C6064 - C6063) * C31926 +
            (C6066 - C6065) * C31012 + (C6068 - C6067) * C17327) *
               C31959 +
           (C7316 * C31006 + C7317 * C31919 + C7318 * C30998 + C7319 * C31926 +
            C9902 * C31012 + C9903 * C17327) *
               C31966 +
           (C7320 * C31006 + C7321 * C31919 + C7322 * C30998 + C7323 * C31926 +
            (C6677 - C6678) * C31012 + (C6679 - C6680) * C17327) *
               C23828) *
              C31835 * C210 +
          ((C6077 * C31006 + C6078 * C31919 + C6079 * C30998 + C6080 * C31926 +
            C6081 * C31012 + C6082 * C17327) *
               C31959 +
           (C6667 * C31006 + C6668 * C31919 + C9408 * C30998 + C9409 * C31926 +
            (C6444 - C6443) * C31012 + (C6446 - C6445) * C17327) *
               C31966 +
           (C6681 * C31006 + C6682 * C31919 + (C6678 - C6677) * C30998 +
            (C6680 - C6679) * C31926 +
            (C31772 * C6151 - C5980 * C6146) * C31012 +
            (C31772 * C6155 - C5980 * C6152) * C17327) *
               C23828) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C31006 +
            (C31772 * C140 - C5980 * C131) * C31919 + (C6057 - C6058) * C30998 +
            (C6059 - C6060) * C31926 + C6077 * C31012 + C6078 * C17327) *
               C31959 +
           ((C6805 - C6806) * C31006 + (C6807 - C6808) * C31919 +
            C7314 * C30998 + C7315 * C31926 + C6667 * C31012 + C6668 * C17327) *
               C31966 +
           (C6829 * C31006 + C6830 * C31919 + C6813 * C30998 + C6814 * C31926 +
            C6681 * C31012 + C6682 * C17327) *
               C23828) *
              C31835 * C31821 * C110 +
          (((C5980 * C120 - C31772 * C127) * C31006 +
            (C5980 * C132 - C31772 * C141) * C31919 + (C6243 - C6244) * C30998 +
            (C6245 - C6246) * C31926 + (C6247 - C6248) * C31012 +
            (C6249 - C6250) * C17327) *
               C31959 +
           ((C7156 - C7157) * C31006 + (C7158 - C7159) * C31919 +
            (C6990 - C6991) * C30998 + (C6992 - C6993) * C31926 +
            (C6994 - C6995) * C31012 + (C6996 - C6997) * C17327) *
               C31966 +
           ((C7160 - C7161) * C31006 + (C7162 - C7163) * C31919 +
            (C6998 - C6999) * C30998 + (C7000 - C7001) * C31926 +
            (C7002 - C7003) * C31012 + (C7004 - C7005) * C17327) *
               C23828) *
              C31835 * C31821 * C111 +
          (((C31772 * C128 - C5980 * C121) * C31006 +
            (C31772 * C142 - C5980 * C133) * C31919 +
            (C31772 * C225 - C5980 * C215) * C30998 +
            (C31772 * C245 - C5980 * C230) * C31926 +
            (C31772 * C235 - C5980 * C220) * C31012 +
            (C31772 * C250 - C5980 * C240) * C17327) *
               C31959 +
           ((C31772 * C330 - C5980 * C320) * C31006 +
            (C31772 * C350 - C5980 * C335) * C31919 +
            (C31772 * C625 - C5980 * C620) * C30998 +
            (C31772 * C635 - C5980 * C630) * C31926 +
            (C31772 * C1061 - C5980 * C1052) * C31012 +
            (C31772 * C1079 - C5980 * C1064) * C17327) *
               C31966 +
           ((C31772 * C340 - C5980 * C325) * C31006 +
            (C31772 * C355 - C5980 * C345) * C31919 +
            (C31772 * C1067 - C5980 * C1055) * C30998 +
            (C31772 * C1082 - C5980 * C1070) * C31926 +
            (C31772 * C1073 - C5980 * C1058) * C31012 +
            (C31772 * C1085 - C5980 * C1076) * C17327) *
               C23828) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C31006 +
            (C31772 * C140 - C5980 * C131) * C31919 + (C6057 - C6058) * C30998 +
            (C6059 - C6060) * C31926 + C6077 * C31012 + C6078 * C17327) *
               C31959 +
           ((C6805 - C6806) * C31006 + (C6807 - C6808) * C31919 +
            C7314 * C30998 + C7315 * C31926 + C6667 * C31012 + C6668 * C17327) *
               C31966 +
           C30373 * C23828) *
              C315 +
          (((C6806 - C6805) * C31006 + (C6808 - C6807) * C31919 +
            C7316 * C30998 + C7317 * C31926 + C7318 * C31012 + C7319 * C17327) *
               C31959 +
           ((C6810 - C6809) * C31006 + (C6812 - C6811) * C31919 +
            C7320 * C30998 + C7321 * C31926 + C7322 * C31012 + C7323 * C17327) *
               C31966 +
           ((C6817 - C6818) * C31006 + (C6819 - C6820) * C31919 +
            C14526 * C30998 + C14527 * C31926 + (C6825 - C6826) * C31012 +
            (C6827 - C6828) * C17327) *
               C23828) *
              C316 +
          (C30373 * C31959 +
           (C11740 * C31006 + C11741 * C31919 + C14122 * C30998 +
            C14123 * C31926 + (C6826 - C6825) * C31012 +
            (C6828 - C6827) * C17327) *
               C31966 +
           (C11753 * C31006 + C11754 * C31919 + (C12026 - C12025) * C30998 +
            (C12028 - C12027) * C31926 +
            (C31772 * C6799 - C5980 * C6794) * C31012 +
            (C31772 * C6803 - C5980 * C6800) * C17327) *
               C23828) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[33] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C31772 * C126 - C5980 * C119) * C31006 +
                     (C31772 * C140 - C5980 * C131) * C31919 +
                     (C6057 - C6058) * C30998 + (C6059 - C6060) * C31926 +
                     C6077 * C31012 + C6078 * C17327) *
                        C31959 +
                    ((C6805 - C6806) * C31006 + (C6807 - C6808) * C31919 +
                     C7314 * C30998 + C7315 * C31926 + C6667 * C31012 +
                     C6668 * C17327) *
                        C31966 +
                    C30373 * C23828) *
                       C530 +
                   (((C6806 - C6805) * C31006 + (C6808 - C6807) * C31919 +
                     C7316 * C30998 + C7317 * C31926 + C7318 * C31012 +
                     C7319 * C17327) *
                        C31959 +
                    ((C6810 - C6809) * C31006 + (C6812 - C6811) * C31919 +
                     C7320 * C30998 + C7321 * C31926 + C7322 * C31012 +
                     C7323 * C17327) *
                        C31966 +
                    ((C6817 - C6818) * C31006 + (C6819 - C6820) * C31919 +
                     C14526 * C30998 + C14527 * C31926 +
                     (C6825 - C6826) * C31012 + (C6827 - C6828) * C17327) *
                        C23828) *
                       C531) *
                      C31821 * C442 +
                  ((((C5980 * C120 - C31772 * C127) * C31006 +
                     (C5980 * C132 - C31772 * C141) * C31919 +
                     (C6243 - C6244) * C30998 + (C6245 - C6246) * C31926 +
                     (C6247 - C6248) * C31012 + (C6249 - C6250) * C17327) *
                        C31959 +
                    ((C7156 - C7157) * C31006 + (C7158 - C7159) * C31919 +
                     (C6990 - C6991) * C30998 + (C6992 - C6993) * C31926 +
                     (C6994 - C6995) * C31012 + (C6996 - C6997) * C17327) *
                        C31966 +
                    ((C7160 - C7161) * C31006 + (C7162 - C7163) * C31919 +
                     (C6998 - C6999) * C30998 + (C7000 - C7001) * C31926 +
                     (C7002 - C7003) * C31012 + (C7004 - C7005) * C17327) *
                        C23828) *
                       C530 +
                   (((C7157 - C7156) * C31006 + (C7159 - C7158) * C31919 +
                     (C6991 - C6990) * C30998 + (C6993 - C6992) * C31926 +
                     (C6995 - C6994) * C31012 + (C6997 - C6996) * C17327) *
                        C31959 +
                    ((C7161 - C7160) * C31006 + (C7163 - C7162) * C31919 +
                     (C6999 - C6998) * C30998 + (C7001 - C7000) * C31926 +
                     (C7003 - C7002) * C31012 + (C7005 - C7004) * C17327) *
                        C31966 +
                    ((C11932 - C11931) * C31006 + (C11934 - C11933) * C31919 +
                     (C14263 - C14262) * C30998 + (C14265 - C14264) * C31926 +
                     (C31772 * C7152 - C5980 * C7151) * C31012 +
                     (C31772 * C7154 - C5980 * C7153) * C17327) *
                        C23828) *
                       C531) *
                      C31821 * C443)) /
                (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C31006 +
            (C31772 * C140 - C5980 * C131) * C31919 + (C6057 - C6058) * C30998 +
            (C6059 - C6060) * C31926 + C6077 * C31012 + C6078 * C17327) *
               C31959 +
           ((C6805 - C6806) * C31006 + (C6807 - C6808) * C31919 +
            C7314 * C30998 + C7315 * C31926 + C6667 * C31012 + C6668 * C17327) *
               C31966 +
           (C6829 * C31006 + C6830 * C31919 + C6813 * C30998 + C6814 * C31926 +
            C6681 * C31012 + C6682 * C17327) *
               C23828) *
              C31835 * C31821 * C110 +
          (((C5980 * C120 - C31772 * C127) * C31006 +
            (C5980 * C132 - C31772 * C141) * C31919 + (C6243 - C6244) * C30998 +
            (C6245 - C6246) * C31926 + (C6247 - C6248) * C31012 +
            (C6249 - C6250) * C17327) *
               C31959 +
           ((C7156 - C7157) * C31006 + (C7158 - C7159) * C31919 +
            (C6990 - C6991) * C30998 + (C6992 - C6993) * C31926 +
            (C6994 - C6995) * C31012 + (C6996 - C6997) * C17327) *
               C31966 +
           ((C7160 - C7161) * C31006 + (C7162 - C7163) * C31919 +
            (C6998 - C6999) * C30998 + (C7000 - C7001) * C31926 +
            (C7002 - C7003) * C31012 + (C7004 - C7005) * C17327) *
               C23828) *
              C31835 * C31821 * C111 +
          (((C31772 * C128 - C5980 * C121) * C31006 +
            (C31772 * C142 - C5980 * C133) * C31919 +
            (C31772 * C225 - C5980 * C215) * C30998 +
            (C31772 * C245 - C5980 * C230) * C31926 +
            (C31772 * C235 - C5980 * C220) * C31012 +
            (C31772 * C250 - C5980 * C240) * C17327) *
               C31959 +
           ((C31772 * C330 - C5980 * C320) * C31006 +
            (C31772 * C350 - C5980 * C335) * C31919 +
            (C31772 * C625 - C5980 * C620) * C30998 +
            (C31772 * C635 - C5980 * C630) * C31926 +
            (C31772 * C1061 - C5980 * C1052) * C31012 +
            (C31772 * C1079 - C5980 * C1064) * C17327) *
               C31966 +
           ((C31772 * C340 - C5980 * C325) * C31006 +
            (C31772 * C355 - C5980 * C345) * C31919 +
            (C31772 * C1067 - C5980 * C1055) * C30998 +
            (C31772 * C1082 - C5980 * C1070) * C31926 +
            (C31772 * C1073 - C5980 * C1058) * C31012 +
            (C31772 * C1085 - C5980 * C1076) * C17327) *
               C23828) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C31006 +
            (C31772 * C140 - C5980 * C131) * C31919 + (C6057 - C6058) * C30998 +
            (C6059 - C6060) * C31926 + C6077 * C31012 + C6078 * C17327) *
               C31959 +
           ((C6805 - C6806) * C31006 + (C6807 - C6808) * C31919 +
            C7314 * C30998 + C7315 * C31926 + C6667 * C31012 + C6668 * C17327) *
               C31966 +
           (C6829 * C31006 + C6830 * C31919 + C6813 * C30998 + C6814 * C31926 +
            C6681 * C31012 + C6682 * C17327) *
               C23828) *
              C31835 * C209 +
          (((C6058 - C6057) * C31006 + (C6060 - C6059) * C31919 +
            (C6062 - C6061) * C30998 + (C6064 - C6063) * C31926 +
            (C6066 - C6065) * C31012 + (C6068 - C6067) * C17327) *
               C31959 +
           (C7316 * C31006 + C7317 * C31919 + C7318 * C30998 + C7319 * C31926 +
            C9902 * C31012 + C9903 * C17327) *
               C31966 +
           (C7320 * C31006 + C7321 * C31919 + C7322 * C30998 + C7323 * C31926 +
            (C6677 - C6678) * C31012 + (C6679 - C6680) * C17327) *
               C23828) *
              C31835 * C210 +
          ((C6077 * C31006 + C6078 * C31919 + C6079 * C30998 + C6080 * C31926 +
            C6081 * C31012 + C6082 * C17327) *
               C31959 +
           (C6667 * C31006 + C6668 * C31919 + C9408 * C30998 + C9409 * C31926 +
            (C6444 - C6443) * C31012 + (C6446 - C6445) * C17327) *
               C31966 +
           (C6681 * C31006 + C6682 * C31919 + (C6678 - C6677) * C30998 +
            (C6680 - C6679) * C31926 +
            (C31772 * C6151 - C5980 * C6146) * C31012 +
            (C31772 * C6155 - C5980 * C6152) * C17327) *
               C23828) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C15393 +
             (C31772 * C140 - C5980 * C131) * C32190 +
             (C6057 - C6058) * C15394 + (C6059 - C6060) * C32186 +
             C6077 * C15395 + C6078 * C32176 + C6079 * C15396 +
             C6080 * C32158) *
                C20324 +
            ((C6805 - C6806) * C15393 + (C6807 - C6808) * C32190 +
             C7314 * C15394 + C7315 * C32186 + C6667 * C15395 + C6668 * C32176 +
             C9408 * C15396 + C9409 * C32158) *
                C31963) *
               C31835 * C440 +
           (((C6058 - C6057) * C15393 + (C6060 - C6059) * C32190 +
             (C6062 - C6061) * C15394 + (C6064 - C6063) * C32186 +
             (C6066 - C6065) * C15395 + (C6068 - C6067) * C32176 +
             (C6070 - C6069) * C15396 + (C6072 - C6071) * C32158) *
                C20324 +
            (C7316 * C15393 + C7317 * C32190 + C7318 * C15394 + C7319 * C32186 +
             C9902 * C15395 + C9903 * C32176 + (C6443 - C6444) * C15396 +
             (C6445 - C6446) * C32158) *
                C31963) *
               C31835 * C441) *
              C442 +
          ((((C5980 * C120 - C31772 * C127) * C15393 +
             (C5980 * C132 - C31772 * C141) * C32190 +
             (C6243 - C6244) * C15394 + (C6245 - C6246) * C32186 +
             (C6247 - C6248) * C15395 + (C6249 - C6250) * C32176 +
             (C6251 - C6252) * C15396 + (C6253 - C6254) * C32158) *
                C20324 +
            ((C7156 - C7157) * C15393 + (C7158 - C7159) * C32190 +
             (C6990 - C6991) * C15394 + (C6992 - C6993) * C32186 +
             (C6994 - C6995) * C15395 + (C6996 - C6997) * C32176 +
             (C9638 - C9639) * C15396 + (C9640 - C9641) * C32158) *
                C31963) *
               C31835 * C440 +
           (((C6244 - C6243) * C15393 + (C6246 - C6245) * C32190 +
             (C6248 - C6247) * C15394 + (C6250 - C6249) * C32186 +
             (C6252 - C6251) * C15395 + (C6254 - C6253) * C32176 +
             (C6256 - C6255) * C15396 + (C6258 - C6257) * C32158) *
                C20324 +
            ((C6991 - C6990) * C15393 + (C6993 - C6992) * C32190 +
             (C6995 - C6994) * C15394 + (C6997 - C6996) * C32186 +
             (C9639 - C9638) * C15395 + (C9641 - C9640) * C32176 +
             (C31772 * C6341 - C5980 * C6340) * C15396 +
             (C31772 * C6343 - C5980 * C6342) * C32158) *
                C31963) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
              C32137 * C128 - C5156 * C121) *
                 C14635 +
             (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
              C32137 * C142 - C5156 * C133) *
                 C14629 +
             (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C14636 +
             (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C31923) *
                C20324 +
            ((C10237 - C10238 + C10239 - C10240 + C10241 - C10242) * C14635 +
             (C10243 - C10244 + C10245 - C10246 + C10247 - C10248) * C14629 +
             (C5890 - C5889 + C5892 - C5891 + C5894 - C5893) * C14636 +
             (C5896 - C5895 + C5898 - C5897 + C5900 - C5899) * C31923) *
                C31963) *
               C31835 * C440 +
           (((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C14635 +
             (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C14629 +
             (C5284 - C5283 + C5286 - C5285 + C5288 - C5287) * C14636 +
             (C5290 - C5289 + C5292 - C5291 + C5294 - C5293) * C31923) *
                C20324 +
            ((C5889 - C5890 + C5891 - C5892 + C5893 - C5894) * C14635 +
             (C5895 - C5896 + C5897 - C5898 + C5899 - C5900) * C14629 +
             (C5901 - C5902 + C5903 - C5904 + C5905 - C5906) * C14636 +
             (C5907 - C5908 + C5909 - C5910 + C5911 - C5912) * C31923) *
                C31963) *
               C31835 * C441) *
              C442 +
          ((((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
              C5156 * C122 - C32137 * C129) *
                 C14635 +
             (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
              C5156 * C134 - C32137 * C143) *
                 C14629 +
             (C5573 - C5574 + C5575 - C5576 + C5577 - C5578) * C14636 +
             (C5579 - C5580 + C5581 - C5582 + C5583 - C5584) * C31923) *
                C20324 +
            ((C10578 - C10579 + C10580 - C10581 + C10582 - C10583) * C14635 +
             (C10584 - C10585 + C10586 - C10587 + C10588 - C10589) * C14629 +
             (C26184 - C26185 + C26186 - C26187 + C26188 - C26189) * C14636 +
             (C26190 - C26191 + C26192 - C26193 + C26194 - C26195) * C31923) *
                C31963) *
               C31835 * C440 +
           (((C5574 - C5573 + C5576 - C5575 + C5578 - C5577) * C14635 +
             (C5580 - C5579 + C5582 - C5581 + C5584 - C5583) * C14629 +
             (C5586 - C5585 + C5588 - C5587 + C5590 - C5589) * C14636 +
             (C5592 - C5591 + C5594 - C5593 + C5596 - C5595) * C31923) *
                C20324 +
            ((C26185 - C26184 + C26187 - C26186 + C26189 - C26188) * C14635 +
             (C26191 - C26190 + C26193 - C26192 + C26195 - C26194) * C14629 +
             (C32180 * C1060 - C5154 * C1051 + C32167 * C1061 - C5155 * C1052 +
              C32137 * C1407 - C5156 * C1406) *
                 C14636 +
             (C32180 * C1078 - C5154 * C1063 + C32167 * C1079 - C5155 * C1064 +
              C32137 * C1409 - C5156 * C1408) *
                 C31923) *
                C31963) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C14635 +
             (C31772 * C140 - C5980 * C131) * C14629 +
             (C6057 - C6058) * C14636 + (C6059 - C6060) * C31923) *
                C32191 +
            ((C6805 - C6806) * C14635 + (C6807 - C6808) * C14629 +
             C7314 * C14636 + C7315 * C31923) *
                C32188 +
            C27594 * C32179 + C27595 * C32164) *
               C31835 * C440 +
           (((C6058 - C6057) * C14635 + (C6060 - C6059) * C14629 +
             (C6062 - C6061) * C14636 + (C6064 - C6063) * C31923) *
                C32191 +
            (C7316 * C14635 + C7317 * C14629 + C7318 * C14636 +
             C7319 * C31923) *
                C32188 +
            (C7320 * C14635 + C7321 * C14629 + C7322 * C14636 +
             C7323 * C31923) *
                C32179 +
            (C14526 * C14635 + C14527 * C14629 + (C6825 - C6826) * C14636 +
             (C6827 - C6828) * C31923) *
                C32164) *
               C31835 * C441) *
              C442 +
          ((((C5980 * C120 - C31772 * C127) * C14635 +
             (C5980 * C132 - C31772 * C141) * C14629 +
             (C6243 - C6244) * C14636 + (C6245 - C6246) * C31923) *
                C32191 +
            ((C7156 - C7157) * C14635 + (C7158 - C7159) * C14629 +
             (C6990 - C6991) * C14636 + (C6992 - C6993) * C31923) *
                C32188 +
            ((C7160 - C7161) * C14635 + (C7162 - C7163) * C14629 +
             (C6998 - C6999) * C14636 + (C7000 - C7001) * C31923) *
                C32179 +
            ((C11931 - C11932) * C14635 + (C11933 - C11934) * C14629 +
             (C14262 - C14263) * C14636 + (C14264 - C14265) * C31923) *
                C32164) *
               C31835 * C440 +
           (((C6244 - C6243) * C14635 + (C6246 - C6245) * C14629 +
             (C6248 - C6247) * C14636 + (C6250 - C6249) * C31923) *
                C32191 +
            ((C6991 - C6990) * C14635 + (C6993 - C6992) * C14629 +
             (C6995 - C6994) * C14636 + (C6997 - C6996) * C31923) *
                C32188 +
            ((C6999 - C6998) * C14635 + (C7001 - C7000) * C14629 +
             (C7003 - C7002) * C14636 + (C7005 - C7004) * C31923) *
                C32179 +
            ((C14263 - C14262) * C14635 + (C14265 - C14264) * C14629 +
             (C31772 * C7152 - C5980 * C7151) * C14636 +
             (C31772 * C7154 - C5980 * C7153) * C31923) *
                C32164) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C15393 +
             (C31772 * C140 - C5980 * C131) * C32190 +
             (C6057 - C6058) * C15394 + (C6059 - C6060) * C32186 +
             C6077 * C15395 + C6078 * C32176 + C6079 * C15396 +
             C6080 * C32158) *
                C20324 +
            ((C6805 - C6806) * C15393 + (C6807 - C6808) * C32190 +
             C7314 * C15394 + C7315 * C32186 + C6667 * C15395 + C6668 * C32176 +
             C9408 * C15396 + C9409 * C32158) *
                C31963) *
               C530 +
           (((C6806 - C6805) * C15393 + (C6808 - C6807) * C32190 +
             C7316 * C15394 + C7317 * C32186 + C7318 * C15395 + C7319 * C32176 +
             C9902 * C15396 + C9903 * C32158) *
                C20324 +
            ((C6810 - C6809) * C15393 + (C6812 - C6811) * C32190 +
             C7320 * C15394 + C7321 * C32186 + C7322 * C15395 + C7323 * C32176 +
             (C6677 - C6678) * C15396 + (C6679 - C6680) * C32158) *
                C31963) *
               C531) *
              C440 +
          ((((C6058 - C6057) * C15393 + (C6060 - C6059) * C32190 +
             (C6062 - C6061) * C15394 + (C6064 - C6063) * C32186 +
             (C6066 - C6065) * C15395 + (C6068 - C6067) * C32176 +
             (C6070 - C6069) * C15396 + (C6072 - C6071) * C32158) *
                C20324 +
            (C7316 * C15393 + C7317 * C32190 + C7318 * C15394 + C7319 * C32186 +
             C9902 * C15395 + C9903 * C32176 + (C6443 - C6444) * C15396 +
             (C6445 - C6446) * C32158) *
                C31963) *
               C530 +
           ((C7314 * C15393 + C7315 * C32190 + C6667 * C15394 + C6668 * C32186 +
             C9408 * C15395 + C9409 * C32176 + (C6444 - C6443) * C15396 +
             (C6446 - C6445) * C32158) *
                C20324 +
            (C6813 * C15393 + C6814 * C32190 + C6681 * C15394 + C6682 * C32186 +
             (C6678 - C6677) * C15395 + (C6680 - C6679) * C32176 +
             (C31772 * C6151 - C5980 * C6146) * C15396 +
             (C31772 * C6155 - C5980 * C6152) * C32158) *
                C31963) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
              C32137 * C128 - C5156 * C121) *
                 C14635 +
             (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
              C32137 * C142 - C5156 * C133) *
                 C14629 +
             (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C14636 +
             (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C31923) *
                C20324 +
            ((C10237 - C10238 + C10239 - C10240 + C10241 - C10242) * C14635 +
             (C10243 - C10244 + C10245 - C10246 + C10247 - C10248) * C14629 +
             C26600 * C14636 + C26601 * C31923) *
                C31963) *
               C530 +
           (((C10238 - C10237 + C10240 - C10239 + C10242 - C10241) * C14635 +
             (C10244 - C10243 + C10246 - C10245 + C10248 - C10247) * C14629 +
             C26602 * C14636 + C26603 * C31923) *
                C20324 +
            ((C10250 - C10249 + C10252 - C10251 + C10254 - C10253) * C14635 +
             (C10256 - C10255 + C10258 - C10257 + C10260 - C10259) * C14629 +
             (C10748 - C10749 + C10750 - C10751 + C10752 - C10753) * C14636 +
             (C10754 - C10755 + C10756 - C10757 + C10758 - C10759) * C31923) *
                C31963) *
               C531) *
              C440 +
          ((((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C14635 +
             (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C14629 +
             (C5284 - C5283 + C5286 - C5285 + C5288 - C5287) * C14636 +
             (C5290 - C5289 + C5292 - C5291 + C5294 - C5293) * C31923) *
                C20324 +
            (C26602 * C14635 + C26603 * C14629 +
             (C5901 - C5902 + C5903 - C5904 + C5905 - C5906) * C14636 +
             (C5907 - C5908 + C5909 - C5910 + C5911 - C5912) * C31923) *
                C31963) *
               C530 +
           ((C26600 * C14635 + C26601 * C14629 +
             (C5902 - C5901 + C5904 - C5903 + C5906 - C5905) * C14636 +
             (C5908 - C5907 + C5910 - C5909 + C5912 - C5911) * C31923) *
                C20324 +
            ((C10749 - C10748 + C10751 - C10750 + C10753 - C10752) * C14635 +
             (C10755 - C10754 + C10757 - C10756 + C10759 - C10758) * C14629 +
             (C32180 * C1071 - C5154 * C1056 + C32167 * C1072 - C5155 * C1057 +
              C32137 * C1073 - C5156 * C1058) *
                 C14636 +
             (C32180 * C1083 - C5154 * C1074 + C32167 * C1084 - C5155 * C1075 +
              C32137 * C1085 - C5156 * C1076) *
                 C31923) *
                C31963) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C14635 +
             (C31772 * C140 - C5980 * C131) * C14629 +
             (C6057 - C6058) * C14636 + (C6059 - C6060) * C31923) *
                C32191 +
            ((C6805 - C6806) * C14635 + (C6807 - C6808) * C14629 +
             C7314 * C14636 + C7315 * C31923) *
                C32188 +
            C27594 * C32179 + C27595 * C32164) *
               C530 +
           (((C6806 - C6805) * C14635 + (C6808 - C6807) * C14629 +
             C7316 * C14636 + C7317 * C31923) *
                C32191 +
            ((C6810 - C6809) * C14635 + (C6812 - C6811) * C14629 +
             C7320 * C14636 + C7321 * C31923) *
                C32188 +
            ((C6817 - C6818) * C14635 + (C6819 - C6820) * C14629 +
             C14526 * C14636 + C14527 * C31923) *
                C32179 +
            ((C11743 - C11742) * C14635 + (C11745 - C11744) * C14629 +
             (C12025 - C12026) * C14636 + (C12027 - C12028) * C31923) *
                C32164) *
               C531) *
              C440 +
          ((((C6058 - C6057) * C14635 + (C6060 - C6059) * C14629 +
             (C6062 - C6061) * C14636 + (C6064 - C6063) * C31923) *
                C32191 +
            (C7316 * C14635 + C7317 * C14629 + C7318 * C14636 +
             C7319 * C31923) *
                C32188 +
            (C7320 * C14635 + C7321 * C14629 + C7322 * C14636 +
             C7323 * C31923) *
                C32179 +
            (C14526 * C14635 + C14527 * C14629 + (C6825 - C6826) * C14636 +
             (C6827 - C6828) * C31923) *
                C32164) *
               C530 +
           ((C7314 * C14635 + C7315 * C14629 + C6667 * C14636 +
             C6668 * C31923) *
                C32191 +
            (C6813 * C14635 + C6814 * C14629 + C6681 * C14636 +
             C6682 * C31923) *
                C32188 +
            (C14122 * C14635 + C14123 * C14629 + (C6826 - C6825) * C14636 +
             (C6828 - C6827) * C31923) *
                C32179 +
            ((C12026 - C12025) * C14635 + (C12028 - C12027) * C14629 +
             (C31772 * C6799 - C5980 * C6794) * C14636 +
             (C31772 * C6803 - C5980 * C6800) * C31923) *
                C32164) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
                 C32137 * C128 - C5156 * C121) *
                    C14635 +
                (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
                 C32137 * C142 - C5156 * C133) *
                    C14629 +
                (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C14636 +
                (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C31923) *
                   C20324 +
               ((C10237 - C10238 + C10239 - C10240 + C10241 - C10242) * C14635 +
                (C10243 - C10244 + C10245 - C10246 + C10247 - C10248) * C14629 +
                (C5890 - C5889 + C5892 - C5891 + C5894 - C5893) * C14636 +
                (C5896 - C5895 + C5898 - C5897 + C5900 - C5899) * C31923) *
                   C31963) *
                  C31835 * C31821 * C110 +
              (((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
                 C5156 * C122 - C32137 * C129) *
                    C14635 +
                (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
                 C5156 * C134 - C32137 * C143) *
                    C14629 +
                (C5573 - C5574 + C5575 - C5576 + C5577 - C5578) * C14636 +
                (C5579 - C5580 + C5581 - C5582 + C5583 - C5584) * C31923) *
                   C20324 +
               ((C10578 - C10579 + C10580 - C10581 + C10582 - C10583) * C14635 +
                (C10584 - C10585 + C10586 - C10587 + C10588 - C10589) * C14629 +
                (C5154 * C619 - C32180 * C624 + C5155 * C620 - C32167 * C625 +
                 C5156 * C621 - C32137 * C626) *
                    C14636 +
                (C5154 * C629 - C32180 * C634 + C5155 * C630 - C32167 * C635 +
                 C5156 * C631 - C32137 * C636) *
                    C31923) *
                   C31963) *
                  C31835 * C31821 * C111 +
              (((C32180 * C128 - C5154 * C121 + C32167 * C129 - C5155 * C122 +
                 C32137 * C130 - C5156 * C123) *
                    C14635 +
                (C32180 * C142 - C5154 * C133 + C32167 * C143 - C5155 * C134 +
                 C32137 * C144 - C5156 * C135) *
                    C14629 +
                (C32180 * C225 - C5154 * C215 + C32167 * C226 - C5155 * C216 +
                 C32137 * C227 - C5156 * C217) *
                    C14636 +
                (C32180 * C245 - C5154 * C230 + C32167 * C246 - C5155 * C231 +
                 C32137 * C247 - C5156 * C232) *
                    C31923) *
                   C20324 +
               ((C32180 * C330 - C5154 * C320 + C32167 * C331 - C5155 * C321 +
                 C32137 * C332 - C5156 * C322) *
                    C14635 +
                (C32180 * C350 - C5154 * C335 + C32167 * C351 - C5155 * C336 +
                 C32137 * C352 - C5156 * C337) *
                    C14629 +
                (C32180 * C625 - C5154 * C620 + C32167 * C626 - C5155 * C621 +
                 C32137 * C627 - C5156 * C622) *
                    C14636 +
                (C32180 * C635 - C5154 * C630 + C32167 * C636 - C5155 * C631 +
                 C32137 * C637 - C5156 * C632) *
                    C31923) *
                   C31963) *
                  C31835 * C31821 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
                 C32137 * C128 - C5156 * C121) *
                    C14635 +
                (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
                 C32137 * C142 - C5156 * C133) *
                    C14629 +
                (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C14636 +
                (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C31923) *
                   C20324 +
               ((C10237 - C10238 + C10239 - C10240 + C10241 - C10242) * C14635 +
                (C10243 - C10244 + C10245 - C10246 + C10247 - C10248) * C14629 +
                (C5890 - C5889 + C5892 - C5891 + C5894 - C5893) * C14636 +
                (C5896 - C5895 + C5898 - C5897 + C5900 - C5899) * C31923) *
                   C31963) *
                  C31835 * C209 +
              (((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C14635 +
                (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C14629 +
                (C5284 - C5283 + C5286 - C5285 + C5288 - C5287) * C14636 +
                (C5290 - C5289 + C5292 - C5291 + C5294 - C5293) * C31923) *
                   C20324 +
               ((C5889 - C5890 + C5891 - C5892 + C5893 - C5894) * C14635 +
                (C5895 - C5896 + C5897 - C5898 + C5899 - C5900) * C14629 +
                (C5901 - C5902 + C5903 - C5904 + C5905 - C5906) * C14636 +
                (C5907 - C5908 + C5909 - C5910 + C5911 - C5912) * C31923) *
                   C31963) *
                  C31835 * C210 +
              ((C5315 * C14635 + C5316 * C14629 +
                (C5296 - C5295 + C5298 - C5297 + C5300 - C5299) * C14636 +
                (C5302 - C5301 + C5304 - C5303 + C5306 - C5305) * C31923) *
                   C20324 +
               ((C5902 - C5901 + C5904 - C5903 + C5906 - C5905) * C14635 +
                (C5908 - C5907 + C5910 - C5909 + C5912 - C5911) * C14629 +
                (C32180 * C1559 - C5154 * C1556 + C32167 * C1560 -
                 C5155 * C1557 + C32137 * C1561 - C5156 * C1558) *
                    C14636 +
                (C32180 * C1565 - C5154 * C1562 + C32167 * C1566 -
                 C5155 * C1563 + C32137 * C1567 - C5156 * C1564) *
                    C31923) *
                   C31963) *
                  C31835 * C211) *
             C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C14635 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C14629 +
            (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C14636 +
            (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C31923) *
               C20324 +
           ((C10237 - C10238 + C10239 - C10240 + C10241 - C10242) * C14635 +
            (C10243 - C10244 + C10245 - C10246 + C10247 - C10248) * C14629 +
            (C5890 - C5889 + C5892 - C5891 + C5894 - C5893) * C14636 +
            (C5896 - C5895 + C5898 - C5897 + C5900 - C5899) * C31923) *
               C31963) *
              C315 +
          (((C10238 - C10237 + C10240 - C10239 + C10242 - C10241) * C14635 +
            (C10244 - C10243 + C10246 - C10245 + C10248 - C10247) * C14629 +
            (C5889 - C5890 + C5891 - C5892 + C5893 - C5894) * C14636 +
            (C5895 - C5896 + C5897 - C5898 + C5899 - C5900) * C31923) *
               C20324 +
           ((C10250 - C10249 + C10252 - C10251 + C10254 - C10253) * C14635 +
            (C10256 - C10255 + C10258 - C10257 + C10260 - C10259) * C14629 +
            (C10748 - C10749 + C10750 - C10751 + C10752 - C10753) * C14636 +
            (C10754 - C10755 + C10756 - C10757 + C10758 - C10759) * C31923) *
               C31963) *
              C316 +
          ((C10281 * C14635 + C10282 * C14629 +
            (C10749 - C10748 + C10751 - C10750 + C10753 - C10752) * C14636 +
            (C10755 - C10754 + C10757 - C10756 + C10759 - C10758) * C31923) *
               C20324 +
           ((C10262 - C10261 + C10264 - C10263 + C10266 - C10265) * C14635 +
            (C10268 - C10267 + C10270 - C10269 + C10272 - C10271) * C14629 +
            (C32180 * C2471 - C5154 * C2468 + C32167 * C2472 - C5155 * C2469 +
             C32137 * C2473 - C5156 * C2470) *
                C14636 +
            (C32180 * C2477 - C5154 * C2474 + C32167 * C2478 - C5155 * C2475 +
             C32137 * C2479 - C5156 * C2476) *
                C31923) *
               C31963) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C15393 +
            (C31772 * C140 - C5980 * C131) * C32190 + (C6057 - C6058) * C15394 +
            (C6059 - C6060) * C32186 + C6077 * C15395 + C6078 * C32176 +
            C6079 * C15396 + C6080 * C32158) *
               C20324 +
           ((C6805 - C6806) * C15393 + (C6807 - C6808) * C32190 +
            C7314 * C15394 + C7315 * C32186 + C6667 * C15395 + C6668 * C32176 +
            C9408 * C15396 + C9409 * C32158) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C5980 * C120 - C31772 * C127) * C15393 +
            (C5980 * C132 - C31772 * C141) * C32190 + (C6243 - C6244) * C15394 +
            (C6245 - C6246) * C32186 + (C6247 - C6248) * C15395 +
            (C6249 - C6250) * C32176 + (C6251 - C6252) * C15396 +
            (C6253 - C6254) * C32158) *
               C20324 +
           ((C7156 - C7157) * C15393 + (C7158 - C7159) * C32190 +
            (C6990 - C6991) * C15394 + (C6992 - C6993) * C32186 +
            (C6994 - C6995) * C15395 + (C6996 - C6997) * C32176 +
            (C9638 - C9639) * C15396 + (C9640 - C9641) * C32158) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C31772 * C128 - C5980 * C121) * C15393 +
            (C31772 * C142 - C5980 * C133) * C32190 +
            (C31772 * C225 - C5980 * C215) * C15394 +
            (C31772 * C245 - C5980 * C230) * C32186 +
            (C31772 * C235 - C5980 * C220) * C15395 +
            (C31772 * C250 - C5980 * C240) * C32176 +
            (C31772 * C878 - C5980 * C872) * C15396 +
            (C31772 * C890 - C5980 * C881) * C32158) *
               C20324 +
           ((C31772 * C330 - C5980 * C320) * C15393 +
            (C31772 * C350 - C5980 * C335) * C32190 +
            (C31772 * C625 - C5980 * C620) * C15394 +
            (C31772 * C635 - C5980 * C630) * C32186 +
            (C31772 * C1061 - C5980 * C1052) * C15395 +
            (C31772 * C1079 - C5980 * C1064) * C32176 +
            (C31772 * C1561 - C5980 * C1558) * C15396 +
            (C31772 * C1567 - C5980 * C1564) * C32158) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C15393 +
            (C31772 * C140 - C5980 * C131) * C32190 + (C6057 - C6058) * C15394 +
            (C6059 - C6060) * C32186 + C6077 * C15395 + C6078 * C32176 +
            C6079 * C15396 + C6080 * C32158) *
               C20324 +
           ((C6805 - C6806) * C15393 + (C6807 - C6808) * C32190 +
            C7314 * C15394 + C7315 * C32186 + C6667 * C15395 + C6668 * C32176 +
            C9408 * C15396 + C9409 * C32158) *
               C31963) *
              C31835 * C209 +
          (((C6058 - C6057) * C15393 + (C6060 - C6059) * C32190 +
            (C6062 - C6061) * C15394 + (C6064 - C6063) * C32186 +
            (C6066 - C6065) * C15395 + (C6068 - C6067) * C32176 +
            (C6070 - C6069) * C15396 + (C6072 - C6071) * C32158) *
               C20324 +
           (C7316 * C15393 + C7317 * C32190 + C7318 * C15394 + C7319 * C32186 +
            C9902 * C15395 + C9903 * C32176 + (C6443 - C6444) * C15396 +
            (C6445 - C6446) * C32158) *
               C31963) *
              C31835 * C210 +
          ((C6077 * C15393 + C6078 * C32190 + C6079 * C15394 + C6080 * C32186 +
            C6081 * C15395 + C6082 * C32176 + (C6074 - C6073) * C15396 +
            (C6076 - C6075) * C32158) *
               C20324 +
           (C6667 * C15393 + C6668 * C32190 + C9408 * C15394 + C9409 * C32186 +
            (C6444 - C6443) * C15395 + (C6446 - C6445) * C32176 +
            (C31772 * C6427 - C5980 * C6426) * C15396 +
            (C31772 * C6429 - C5980 * C6428) * C32158) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C15393 +
            (C31772 * C140 - C5980 * C131) * C32190 + (C6057 - C6058) * C15394 +
            (C6059 - C6060) * C32186 + C6077 * C15395 + C6078 * C32176 +
            C6079 * C15396 + C6080 * C32158) *
               C20324 +
           ((C6805 - C6806) * C15393 + (C6807 - C6808) * C32190 +
            C7314 * C15394 + C7315 * C32186 + C6667 * C15395 + C6668 * C32176 +
            C9408 * C15396 + C9409 * C32158) *
               C31963) *
              C315 +
          (((C6806 - C6805) * C15393 + (C6808 - C6807) * C32190 +
            C7316 * C15394 + C7317 * C32186 + C7318 * C15395 + C7319 * C32176 +
            C9902 * C15396 + C9903 * C32158) *
               C20324 +
           ((C6810 - C6809) * C15393 + (C6812 - C6811) * C32190 +
            C7320 * C15394 + C7321 * C32186 + C7322 * C15395 + C7323 * C32176 +
            (C6677 - C6678) * C15396 + (C6679 - C6680) * C32158) *
               C31963) *
              C316 +
          ((C6829 * C15393 + C6830 * C32190 + C6813 * C15394 + C6814 * C32186 +
            C6681 * C15395 + C6682 * C32176 + (C6678 - C6677) * C15396 +
            (C6680 - C6679) * C32158) *
               C20324 +
           (C11740 * C15393 + C11741 * C32190 + C14122 * C15394 +
            C14123 * C32186 + (C6826 - C6825) * C15395 +
            (C6828 - C6827) * C32176 +
            (C31772 * C7310 - C5980 * C7309) * C15396 +
            (C31772 * C7312 - C5980 * C7311) * C32158) *
               C31963) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C14635 +
            (C31772 * C140 - C5980 * C131) * C14629 + (C6057 - C6058) * C14636 +
            (C6059 - C6060) * C31923) *
               C32191 +
           ((C6805 - C6806) * C14635 + (C6807 - C6808) * C14629 +
            C7314 * C14636 + C7315 * C31923) *
               C32188 +
           (C6829 * C14635 + C6830 * C14629 + C6813 * C14636 + C6814 * C31923) *
               C32179 +
           (C11740 * C14635 + C11741 * C14629 + C14122 * C14636 +
            C14123 * C31923) *
               C32164) *
              C31835 * C31821 * C110 +
          (((C5980 * C120 - C31772 * C127) * C14635 +
            (C5980 * C132 - C31772 * C141) * C14629 + (C6243 - C6244) * C14636 +
            (C6245 - C6246) * C31923) *
               C32191 +
           ((C7156 - C7157) * C14635 + (C7158 - C7159) * C14629 +
            (C6990 - C6991) * C14636 + (C6992 - C6993) * C31923) *
               C32188 +
           ((C7160 - C7161) * C14635 + (C7162 - C7163) * C14629 +
            (C6998 - C6999) * C14636 + (C7000 - C7001) * C31923) *
               C32179 +
           ((C11931 - C11932) * C14635 + (C11933 - C11934) * C14629 +
            (C14262 - C14263) * C14636 + (C14264 - C14265) * C31923) *
               C32164) *
              C31835 * C31821 * C111 +
          (((C31772 * C128 - C5980 * C121) * C14635 +
            (C31772 * C142 - C5980 * C133) * C14629 +
            (C31772 * C225 - C5980 * C215) * C14636 +
            (C31772 * C245 - C5980 * C230) * C31923) *
               C32191 +
           ((C31772 * C330 - C5980 * C320) * C14635 +
            (C31772 * C350 - C5980 * C335) * C14629 +
            (C31772 * C625 - C5980 * C620) * C14636 +
            (C31772 * C635 - C5980 * C630) * C31923) *
               C32188 +
           ((C31772 * C340 - C5980 * C325) * C14635 +
            (C31772 * C355 - C5980 * C345) * C14629 +
            (C31772 * C1067 - C5980 * C1055) * C14636 +
            (C31772 * C1082 - C5980 * C1070) * C31923) *
               C32179 +
           ((C31772 * C1933 - C5980 * C1927) * C14635 +
            (C31772 * C1945 - C5980 * C1936) * C14629 +
            (C31772 * C2473 - C5980 * C2470) * C14636 +
            (C31772 * C2479 - C5980 * C2476) * C31923) *
               C32164) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C14635 +
            (C31772 * C140 - C5980 * C131) * C14629 + (C6057 - C6058) * C14636 +
            (C6059 - C6060) * C31923) *
               C32191 +
           ((C6805 - C6806) * C14635 + (C6807 - C6808) * C14629 +
            C7314 * C14636 + C7315 * C31923) *
               C32188 +
           (C6829 * C14635 + C6830 * C14629 + C6813 * C14636 + C6814 * C31923) *
               C32179 +
           (C11740 * C14635 + C11741 * C14629 + C14122 * C14636 +
            C14123 * C31923) *
               C32164) *
              C31835 * C209 +
          (((C6058 - C6057) * C14635 + (C6060 - C6059) * C14629 +
            (C6062 - C6061) * C14636 + (C6064 - C6063) * C31923) *
               C32191 +
           (C7316 * C14635 + C7317 * C14629 + C7318 * C14636 + C7319 * C31923) *
               C32188 +
           (C7320 * C14635 + C7321 * C14629 + C7322 * C14636 + C7323 * C31923) *
               C32179 +
           (C14526 * C14635 + C14527 * C14629 + (C6825 - C6826) * C14636 +
            (C6827 - C6828) * C31923) *
               C32164) *
              C31835 * C210 +
          ((C6077 * C14635 + C6078 * C14629 + C6079 * C14636 + C6080 * C31923) *
               C32191 +
           (C6667 * C14635 + C6668 * C14629 + C9408 * C14636 + C9409 * C31923) *
               C32188 +
           (C6681 * C14635 + C6682 * C14629 + (C6678 - C6677) * C14636 +
            (C6680 - C6679) * C31923) *
               C32179 +
           ((C6826 - C6825) * C14635 + (C6828 - C6827) * C14629 +
            (C31772 * C7310 - C5980 * C7309) * C14636 +
            (C31772 * C7312 - C5980 * C7311) * C31923) *
               C32164) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C14635 +
            (C31772 * C140 - C5980 * C131) * C14629 + (C6057 - C6058) * C14636 +
            (C6059 - C6060) * C31923) *
               C32191 +
           ((C6805 - C6806) * C14635 + (C6807 - C6808) * C14629 +
            C7314 * C14636 + C7315 * C31923) *
               C32188 +
           C27594 * C32179 + C27595 * C32164) *
              C315 +
          (((C6806 - C6805) * C14635 + (C6808 - C6807) * C14629 +
            C7316 * C14636 + C7317 * C31923) *
               C32191 +
           ((C6810 - C6809) * C14635 + (C6812 - C6811) * C14629 +
            C7320 * C14636 + C7321 * C31923) *
               C32188 +
           ((C6817 - C6818) * C14635 + (C6819 - C6820) * C14629 +
            C14526 * C14636 + C14527 * C31923) *
               C32179 +
           ((C11743 - C11742) * C14635 + (C11745 - C11744) * C14629 +
            (C12025 - C12026) * C14636 + (C12027 - C12028) * C31923) *
               C32164) *
              C316 +
          (C27594 * C32191 + C27595 * C32188 +
           (C11753 * C14635 + C11754 * C14629 + (C12026 - C12025) * C14636 +
            (C12028 - C12027) * C31923) *
               C32179 +
           ((C11747 - C11746) * C14635 + (C11749 - C11748) * C14629 +
            (C31772 * C12021 - C5980 * C12020) * C14636 +
            (C31772 * C12023 - C5980 * C12022) * C31923) *
               C32164) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C15393 +
             (C31772 * C140 - C5980 * C131) * C32190 +
             (C6057 - C6058) * C15394 + (C6059 - C6060) * C32186 +
             C6077 * C15395 + C6078 * C32176 + C6079 * C15396 +
             C6080 * C32158) *
                C20324 +
            ((C6805 - C6806) * C15393 + (C6807 - C6808) * C32190 +
             C7314 * C15394 + C7315 * C32186 + C6667 * C15395 + C6668 * C32176 +
             C9408 * C15396 + C9409 * C32158) *
                C31963) *
               C530 +
           (((C6806 - C6805) * C15393 + (C6808 - C6807) * C32190 +
             C7316 * C15394 + C7317 * C32186 + C7318 * C15395 + C7319 * C32176 +
             C9902 * C15396 + C9903 * C32158) *
                C20324 +
            ((C6810 - C6809) * C15393 + (C6812 - C6811) * C32190 +
             C7320 * C15394 + C7321 * C32186 + C7322 * C15395 + C7323 * C32176 +
             (C6677 - C6678) * C15396 + (C6679 - C6680) * C32158) *
                C31963) *
               C531) *
              C31821 * C442 +
          ((((C5980 * C120 - C31772 * C127) * C15393 +
             (C5980 * C132 - C31772 * C141) * C32190 +
             (C6243 - C6244) * C15394 + (C6245 - C6246) * C32186 +
             (C6247 - C6248) * C15395 + (C6249 - C6250) * C32176 +
             (C6251 - C6252) * C15396 + (C6253 - C6254) * C32158) *
                C20324 +
            ((C7156 - C7157) * C15393 + (C7158 - C7159) * C32190 +
             (C6990 - C6991) * C15394 + (C6992 - C6993) * C32186 +
             (C6994 - C6995) * C15395 + (C6996 - C6997) * C32176 +
             (C9638 - C9639) * C15396 + (C9640 - C9641) * C32158) *
                C31963) *
               C530 +
           (((C7157 - C7156) * C15393 + (C7159 - C7158) * C32190 +
             (C6991 - C6990) * C15394 + (C6993 - C6992) * C32186 +
             (C6995 - C6994) * C15395 + (C6997 - C6996) * C32176 +
             (C9639 - C9638) * C15396 + (C9641 - C9640) * C32158) *
                C20324 +
            ((C7161 - C7160) * C15393 + (C7163 - C7162) * C32190 +
             (C6999 - C6998) * C15394 + (C7001 - C7000) * C32186 +
             (C7003 - C7002) * C15395 + (C7005 - C7004) * C32176 +
             (C31772 * C6986 - C5980 * C6985) * C15396 +
             (C31772 * C6988 - C5980 * C6987) * C32158) *
                C31963) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
              C32137 * C128 - C5156 * C121) *
                 C14635 +
             (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
              C32137 * C142 - C5156 * C133) *
                 C14629 +
             (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C14636 +
             (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C31923) *
                C20324 +
            ((C10237 - C10238 + C10239 - C10240 + C10241 - C10242) * C14635 +
             (C10243 - C10244 + C10245 - C10246 + C10247 - C10248) * C14629 +
             (C5890 - C5889 + C5892 - C5891 + C5894 - C5893) * C14636 +
             (C5896 - C5895 + C5898 - C5897 + C5900 - C5899) * C31923) *
                C31963) *
               C530 +
           (((C10238 - C10237 + C10240 - C10239 + C10242 - C10241) * C14635 +
             (C10244 - C10243 + C10246 - C10245 + C10248 - C10247) * C14629 +
             (C5889 - C5890 + C5891 - C5892 + C5893 - C5894) * C14636 +
             (C5895 - C5896 + C5897 - C5898 + C5899 - C5900) * C31923) *
                C20324 +
            ((C10250 - C10249 + C10252 - C10251 + C10254 - C10253) * C14635 +
             (C10256 - C10255 + C10258 - C10257 + C10260 - C10259) * C14629 +
             (C10748 - C10749 + C10750 - C10751 + C10752 - C10753) * C14636 +
             (C10754 - C10755 + C10756 - C10757 + C10758 - C10759) * C31923) *
                C31963) *
               C531) *
              C31821 * C442 +
          ((((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
              C5156 * C122 - C32137 * C129) *
                 C14635 +
             (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
              C5156 * C134 - C32137 * C143) *
                 C14629 +
             (C5573 - C5574 + C5575 - C5576 + C5577 - C5578) * C14636 +
             (C5579 - C5580 + C5581 - C5582 + C5583 - C5584) * C31923) *
                C20324 +
            ((C10578 - C10579 + C10580 - C10581 + C10582 - C10583) * C14635 +
             (C10584 - C10585 + C10586 - C10587 + C10588 - C10589) * C14629 +
             (C26184 - C26185 + C26186 - C26187 + C26188 - C26189) * C14636 +
             (C26190 - C26191 + C26192 - C26193 + C26194 - C26195) * C31923) *
                C31963) *
               C530 +
           (((C10579 - C10578 + C10581 - C10580 + C10583 - C10582) * C14635 +
             (C10585 - C10584 + C10587 - C10586 + C10589 - C10588) * C14629 +
             (C26185 - C26184 + C26187 - C26186 + C26189 - C26188) * C14636 +
             (C26191 - C26190 + C26193 - C26192 + C26195 - C26194) * C31923) *
                C20324 +
            ((C10591 - C10590 + C10593 - C10592 + C10595 - C10594) * C14635 +
             (C10597 - C10596 + C10599 - C10598 + C10601 - C10600) * C14629 +
             (C32180 * C1066 - C5154 * C1054 + C32167 * C1067 - C5155 * C1055 +
              C32137 * C2145 - C5156 * C2144) *
                 C14636 +
             (C32180 * C1081 - C5154 * C1069 + C32167 * C1082 - C5155 * C1070 +
              C32137 * C2147 - C5156 * C2146) *
                 C31923) *
                C31963) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C14635 +
             (C31772 * C140 - C5980 * C131) * C14629 +
             (C6057 - C6058) * C14636 + (C6059 - C6060) * C31923) *
                C32191 +
            ((C6805 - C6806) * C14635 + (C6807 - C6808) * C14629 +
             C7314 * C14636 + C7315 * C31923) *
                C32188 +
            C27594 * C32179 + C27595 * C32164) *
               C530 +
           (((C6806 - C6805) * C14635 + (C6808 - C6807) * C14629 +
             C7316 * C14636 + C7317 * C31923) *
                C32191 +
            ((C6810 - C6809) * C14635 + (C6812 - C6811) * C14629 +
             C7320 * C14636 + C7321 * C31923) *
                C32188 +
            ((C6817 - C6818) * C14635 + (C6819 - C6820) * C14629 +
             C14526 * C14636 + C14527 * C31923) *
                C32179 +
            ((C11743 - C11742) * C14635 + (C11745 - C11744) * C14629 +
             (C12025 - C12026) * C14636 + (C12027 - C12028) * C31923) *
                C32164) *
               C531) *
              C31821 * C442 +
          ((((C5980 * C120 - C31772 * C127) * C14635 +
             (C5980 * C132 - C31772 * C141) * C14629 +
             (C6243 - C6244) * C14636 + (C6245 - C6246) * C31923) *
                C32191 +
            ((C7156 - C7157) * C14635 + (C7158 - C7159) * C14629 +
             (C6990 - C6991) * C14636 + (C6992 - C6993) * C31923) *
                C32188 +
            ((C7160 - C7161) * C14635 + (C7162 - C7163) * C14629 +
             (C6998 - C6999) * C14636 + (C7000 - C7001) * C31923) *
                C32179 +
            ((C11931 - C11932) * C14635 + (C11933 - C11934) * C14629 +
             (C14262 - C14263) * C14636 + (C14264 - C14265) * C31923) *
                C32164) *
               C530 +
           (((C7157 - C7156) * C14635 + (C7159 - C7158) * C14629 +
             (C6991 - C6990) * C14636 + (C6993 - C6992) * C31923) *
                C32191 +
            ((C7161 - C7160) * C14635 + (C7163 - C7162) * C14629 +
             (C6999 - C6998) * C14636 + (C7001 - C7000) * C31923) *
                C32188 +
            ((C11932 - C11931) * C14635 + (C11934 - C11933) * C14629 +
             (C14263 - C14262) * C14636 + (C14265 - C14264) * C31923) *
                C32179 +
            ((C11936 - C11935) * C14635 + (C11938 - C11937) * C14629 +
             (C31772 * C11841 - C5980 * C11840) * C14636 +
             (C31772 * C11843 - C5980 * C11842) * C31923) *
                C32164) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C14635 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C14629 +
            (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C14636 +
            (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C31923) *
               C20324 +
           ((C10237 - C10238 + C10239 - C10240 + C10241 - C10242) * C14635 +
            (C10243 - C10244 + C10245 - C10246 + C10247 - C10248) * C14629 +
            (C5890 - C5889 + C5892 - C5891 + C5894 - C5893) * C14636 +
            (C5896 - C5895 + C5898 - C5897 + C5900 - C5899) * C31923) *
               C31963) *
              C31835 * C209 +
          (((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C14635 +
            (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C14629 +
            (C5284 - C5283 + C5286 - C5285 + C5288 - C5287) * C14636 +
            (C5290 - C5289 + C5292 - C5291 + C5294 - C5293) * C31923) *
               C20324 +
           ((C5889 - C5890 + C5891 - C5892 + C5893 - C5894) * C14635 +
            (C5895 - C5896 + C5897 - C5898 + C5899 - C5900) * C14629 +
            (C5901 - C5902 + C5903 - C5904 + C5905 - C5906) * C14636 +
            (C5907 - C5908 + C5909 - C5910 + C5911 - C5912) * C31923) *
               C31963) *
              C31835 * C210 +
          ((C5315 * C14635 + C5316 * C14629 +
            (C5296 - C5295 + C5298 - C5297 + C5300 - C5299) * C14636 +
            (C5302 - C5301 + C5304 - C5303 + C5306 - C5305) * C31923) *
               C20324 +
           ((C5902 - C5901 + C5904 - C5903 + C5906 - C5905) * C14635 +
            (C5908 - C5907 + C5910 - C5909 + C5912 - C5911) * C14629 +
            (C32180 * C1559 - C5154 * C1556 + C32167 * C1560 - C5155 * C1557 +
             C32137 * C1561 - C5156 * C1558) *
                C14636 +
            (C32180 * C1565 - C5154 * C1562 + C32167 * C1566 - C5155 * C1563 +
             C32137 * C1567 - C5156 * C1564) *
                C31923) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C14635 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C14629 +
            (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C14636 +
            (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C31923) *
               C20324 +
           ((C10237 - C10238 + C10239 - C10240 + C10241 - C10242) * C14635 +
            (C10243 - C10244 + C10245 - C10246 + C10247 - C10248) * C14629 +
            (C5890 - C5889 + C5892 - C5891 + C5894 - C5893) * C14636 +
            (C5896 - C5895 + C5898 - C5897 + C5900 - C5899) * C31923) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
             C5156 * C122 - C32137 * C129) *
                C14635 +
            (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
             C5156 * C134 - C32137 * C143) *
                C14629 +
            (C5573 - C5574 + C5575 - C5576 + C5577 - C5578) * C14636 +
            (C5579 - C5580 + C5581 - C5582 + C5583 - C5584) * C31923) *
               C20324 +
           ((C10578 - C10579 + C10580 - C10581 + C10582 - C10583) * C14635 +
            (C10584 - C10585 + C10586 - C10587 + C10588 - C10589) * C14629 +
            (C5154 * C619 - C32180 * C624 + C5155 * C620 - C32167 * C625 +
             C5156 * C621 - C32137 * C626) *
                C14636 +
            (C5154 * C629 - C32180 * C634 + C5155 * C630 - C32167 * C635 +
             C5156 * C631 - C32137 * C636) *
                C31923) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C32180 * C128 - C5154 * C121 + C32167 * C129 - C5155 * C122 +
             C32137 * C130 - C5156 * C123) *
                C14635 +
            (C32180 * C142 - C5154 * C133 + C32167 * C143 - C5155 * C134 +
             C32137 * C144 - C5156 * C135) *
                C14629 +
            (C32180 * C225 - C5154 * C215 + C32167 * C226 - C5155 * C216 +
             C32137 * C227 - C5156 * C217) *
                C14636 +
            (C32180 * C245 - C5154 * C230 + C32167 * C246 - C5155 * C231 +
             C32137 * C247 - C5156 * C232) *
                C31923) *
               C20324 +
           ((C32180 * C330 - C5154 * C320 + C32167 * C331 - C5155 * C321 +
             C32137 * C332 - C5156 * C322) *
                C14635 +
            (C32180 * C350 - C5154 * C335 + C32167 * C351 - C5155 * C336 +
             C32137 * C352 - C5156 * C337) *
                C14629 +
            (C32180 * C625 - C5154 * C620 + C32167 * C626 - C5155 * C621 +
             C32137 * C627 - C5156 * C622) *
                C14636 +
            (C32180 * C635 - C5154 * C630 + C32167 * C636 - C5155 * C631 +
             C32137 * C637 - C5156 * C632) *
                C31923) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C15393 +
            (C31772 * C140 - C5980 * C131) * C32190 + (C6057 - C6058) * C15394 +
            (C6059 - C6060) * C32186 + C6077 * C15395 + C6078 * C32176 +
            C6079 * C15396 + C6080 * C32158) *
               C20324 +
           ((C6805 - C6806) * C15393 + (C6807 - C6808) * C32190 +
            C7314 * C15394 + C7315 * C32186 + C6667 * C15395 + C6668 * C32176 +
            C9408 * C15396 + C9409 * C32158) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C5980 * C120 - C31772 * C127) * C15393 +
            (C5980 * C132 - C31772 * C141) * C32190 + (C6243 - C6244) * C15394 +
            (C6245 - C6246) * C32186 + (C6247 - C6248) * C15395 +
            (C6249 - C6250) * C32176 + (C6251 - C6252) * C15396 +
            (C6253 - C6254) * C32158) *
               C20324 +
           ((C7156 - C7157) * C15393 + (C7158 - C7159) * C32190 +
            (C6990 - C6991) * C15394 + (C6992 - C6993) * C32186 +
            (C6994 - C6995) * C15395 + (C6996 - C6997) * C32176 +
            (C9638 - C9639) * C15396 + (C9640 - C9641) * C32158) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C31772 * C128 - C5980 * C121) * C15393 +
            (C31772 * C142 - C5980 * C133) * C32190 +
            (C31772 * C225 - C5980 * C215) * C15394 +
            (C31772 * C245 - C5980 * C230) * C32186 +
            (C31772 * C235 - C5980 * C220) * C15395 +
            (C31772 * C250 - C5980 * C240) * C32176 +
            (C31772 * C878 - C5980 * C872) * C15396 +
            (C31772 * C890 - C5980 * C881) * C32158) *
               C20324 +
           ((C31772 * C330 - C5980 * C320) * C15393 +
            (C31772 * C350 - C5980 * C335) * C32190 +
            (C31772 * C625 - C5980 * C620) * C15394 +
            (C31772 * C635 - C5980 * C630) * C32186 +
            (C31772 * C1061 - C5980 * C1052) * C15395 +
            (C31772 * C1079 - C5980 * C1064) * C32176 +
            (C31772 * C1561 - C5980 * C1558) * C15396 +
            (C31772 * C1567 - C5980 * C1564) * C32158) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C15393 +
            (C31772 * C140 - C5980 * C131) * C32190 + (C6057 - C6058) * C15394 +
            (C6059 - C6060) * C32186 + C6077 * C15395 + C6078 * C32176 +
            C6079 * C15396 + C6080 * C32158) *
               C20324 +
           ((C6805 - C6806) * C15393 + (C6807 - C6808) * C32190 +
            C7314 * C15394 + C7315 * C32186 + C6667 * C15395 + C6668 * C32176 +
            C9408 * C15396 + C9409 * C32158) *
               C31963) *
              C31835 * C209 +
          (((C6058 - C6057) * C15393 + (C6060 - C6059) * C32190 +
            (C6062 - C6061) * C15394 + (C6064 - C6063) * C32186 +
            (C6066 - C6065) * C15395 + (C6068 - C6067) * C32176 +
            (C6070 - C6069) * C15396 + (C6072 - C6071) * C32158) *
               C20324 +
           (C7316 * C15393 + C7317 * C32190 + C7318 * C15394 + C7319 * C32186 +
            C9902 * C15395 + C9903 * C32176 + (C6443 - C6444) * C15396 +
            (C6445 - C6446) * C32158) *
               C31963) *
              C31835 * C210 +
          ((C6077 * C15393 + C6078 * C32190 + C6079 * C15394 + C6080 * C32186 +
            C6081 * C15395 + C6082 * C32176 + (C6074 - C6073) * C15396 +
            (C6076 - C6075) * C32158) *
               C20324 +
           (C6667 * C15393 + C6668 * C32190 + C9408 * C15394 + C9409 * C32186 +
            (C6444 - C6443) * C15395 + (C6446 - C6445) * C32176 +
            (C31772 * C6427 - C5980 * C6426) * C15396 +
            (C31772 * C6429 - C5980 * C6428) * C32158) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C14635 +
            (C31772 * C140 - C5980 * C131) * C14629 + (C6057 - C6058) * C14636 +
            (C6059 - C6060) * C31923) *
               C32191 +
           ((C6805 - C6806) * C14635 + (C6807 - C6808) * C14629 +
            C7314 * C14636 + C7315 * C31923) *
               C32188 +
           (C6829 * C14635 + C6830 * C14629 + C6813 * C14636 + C6814 * C31923) *
               C32179 +
           (C11740 * C14635 + C11741 * C14629 + C14122 * C14636 +
            C14123 * C31923) *
               C32164) *
              C31835 * C31821 * C110 +
          (((C5980 * C120 - C31772 * C127) * C14635 +
            (C5980 * C132 - C31772 * C141) * C14629 + (C6243 - C6244) * C14636 +
            (C6245 - C6246) * C31923) *
               C32191 +
           ((C7156 - C7157) * C14635 + (C7158 - C7159) * C14629 +
            (C6990 - C6991) * C14636 + (C6992 - C6993) * C31923) *
               C32188 +
           ((C7160 - C7161) * C14635 + (C7162 - C7163) * C14629 +
            (C6998 - C6999) * C14636 + (C7000 - C7001) * C31923) *
               C32179 +
           ((C11931 - C11932) * C14635 + (C11933 - C11934) * C14629 +
            (C14262 - C14263) * C14636 + (C14264 - C14265) * C31923) *
               C32164) *
              C31835 * C31821 * C111 +
          (((C31772 * C128 - C5980 * C121) * C14635 +
            (C31772 * C142 - C5980 * C133) * C14629 +
            (C31772 * C225 - C5980 * C215) * C14636 +
            (C31772 * C245 - C5980 * C230) * C31923) *
               C32191 +
           ((C31772 * C330 - C5980 * C320) * C14635 +
            (C31772 * C350 - C5980 * C335) * C14629 +
            (C31772 * C625 - C5980 * C620) * C14636 +
            (C31772 * C635 - C5980 * C630) * C31923) *
               C32188 +
           ((C31772 * C340 - C5980 * C325) * C14635 +
            (C31772 * C355 - C5980 * C345) * C14629 +
            (C31772 * C1067 - C5980 * C1055) * C14636 +
            (C31772 * C1082 - C5980 * C1070) * C31923) *
               C32179 +
           ((C31772 * C1933 - C5980 * C1927) * C14635 +
            (C31772 * C1945 - C5980 * C1936) * C14629 +
            (C31772 * C2473 - C5980 * C2470) * C14636 +
            (C31772 * C2479 - C5980 * C2476) * C31923) *
               C32164) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C14635 +
            (C31772 * C140 - C5980 * C131) * C14629 + (C6057 - C6058) * C14636 +
            (C6059 - C6060) * C31923) *
               C32191 +
           ((C6805 - C6806) * C14635 + (C6807 - C6808) * C14629 +
            C7314 * C14636 + C7315 * C31923) *
               C32188 +
           (C6829 * C14635 + C6830 * C14629 + C6813 * C14636 + C6814 * C31923) *
               C32179 +
           (C11740 * C14635 + C11741 * C14629 + C14122 * C14636 +
            C14123 * C31923) *
               C32164) *
              C31835 * C209 +
          (((C6058 - C6057) * C14635 + (C6060 - C6059) * C14629 +
            (C6062 - C6061) * C14636 + (C6064 - C6063) * C31923) *
               C32191 +
           (C7316 * C14635 + C7317 * C14629 + C7318 * C14636 + C7319 * C31923) *
               C32188 +
           (C7320 * C14635 + C7321 * C14629 + C7322 * C14636 + C7323 * C31923) *
               C32179 +
           (C14526 * C14635 + C14527 * C14629 + (C6825 - C6826) * C14636 +
            (C6827 - C6828) * C31923) *
               C32164) *
              C31835 * C210 +
          ((C6077 * C14635 + C6078 * C14629 + C6079 * C14636 + C6080 * C31923) *
               C32191 +
           (C6667 * C14635 + C6668 * C14629 + C9408 * C14636 + C9409 * C31923) *
               C32188 +
           (C6681 * C14635 + C6682 * C14629 + (C6678 - C6677) * C14636 +
            (C6680 - C6679) * C31923) *
               C32179 +
           ((C6826 - C6825) * C14635 + (C6828 - C6827) * C14629 +
            (C31772 * C7310 - C5980 * C7309) * C14636 +
            (C31772 * C7312 - C5980 * C7311) * C31923) *
               C32164) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                 C14635 +
             (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                 C14629 +
             (C7532 - C7533 + C7534 - C7535) * C14636 +
             (C7536 - C7537 + C7538 - C7539) * C31923) *
                C31959 +
            ((C8556 - C8557 + C8558 - C8559) * C14635 +
             (C8560 - C8561 + C8562 - C8563) * C14629 + C9206 * C14636 +
             C9207 * C31923) *
                C31966 +
            C29450 * C23828) *
               C31835 * C440 +
           (((C7533 - C7532 + C7535 - C7534) * C14635 +
             (C7537 - C7536 + C7539 - C7538) * C14629 +
             (C7541 - C7540 + C7543 - C7542) * C14636 +
             (C7545 - C7544 + C7547 - C7546) * C31923) *
                C31959 +
            (C9208 * C14635 + C9209 * C14629 + C9210 * C14636 +
             C9211 * C31923) *
                C31966 +
            (C13104 * C14635 + C13105 * C14629 +
             (C8580 - C8581 + C8582 - C8583) * C14636 +
             (C8584 - C8585 + C8586 - C8587) * C31923) *
                C23828) *
               C31835 * C441) *
              C442 +
          ((((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                 C14635 +
             (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                 C14629 +
             (C7804 - C7805 + C7806 - C7807) * C14636 +
             (C7808 - C7809 + C7810 - C7811) * C31923) *
                C31959 +
            ((C8992 - C8993 + C8994 - C8995) * C14635 +
             (C8996 - C8997 + C8998 - C8999) * C14629 +
             (C8782 - C8783 + C8784 - C8785) * C14636 +
             (C8786 - C8787 + C8788 - C8789) * C31923) *
                C31966 +
            ((C12898 - C12899 + C12900 - C12901) * C14635 +
             (C12902 - C12903 + C12904 - C12905) * C14629 +
             (C12696 - C12697 + C12698 - C12699) * C14636 +
             (C12700 - C12701 + C12702 - C12703) * C31923) *
                C23828) *
               C31835 * C440 +
           (((C7805 - C7804 + C7807 - C7806) * C14635 +
             (C7809 - C7808 + C7811 - C7810) * C14629 +
             (C7813 - C7812 + C7815 - C7814) * C14636 +
             (C7817 - C7816 + C7819 - C7818) * C31923) *
                C31959 +
            ((C8783 - C8782 + C8785 - C8784) * C14635 +
             (C8787 - C8786 + C8789 - C8788) * C14629 +
             (C8791 - C8790 + C8793 - C8792) * C14636 +
             (C8795 - C8794 + C8797 - C8796) * C31923) *
                C31966 +
            ((C12697 - C12696 + C12699 - C12698) * C14635 +
             (C12701 - C12700 + C12703 - C12702) * C14629 +
             (C32098 * C1072 - C30873 * C1057 + C31782 * C1073 -
              C30854 * C1058) *
                 C14636 +
             (C32098 * C1084 - C30873 * C1075 + C31782 * C1085 -
              C30854 * C1076) *
                 C31923) *
                C23828) *
               C31835 * C441) *
              C443)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                 C14635 +
             (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                 C14629 +
             (C7532 - C7533 + C7534 - C7535) * C14636 +
             (C7536 - C7537 + C7538 - C7539) * C31923) *
                C31959 +
            ((C8556 - C8557 + C8558 - C8559) * C14635 +
             (C8560 - C8561 + C8562 - C8563) * C14629 + C9206 * C14636 +
             C9207 * C31923) *
                C31966 +
            C29450 * C23828) *
               C530 +
           (((C8557 - C8556 + C8559 - C8558) * C14635 +
             (C8561 - C8560 + C8563 - C8562) * C14629 + C9208 * C14636 +
             C9209 * C31923) *
                C31959 +
            ((C8564 - C8565 + C8566 - C8567) * C14635 +
             (C8568 - C8569 + C8570 - C8571) * C14629 + C13104 * C14636 +
             C13105 * C31923) *
                C31966 +
            ((C12475 - C12476 + C12477 - C12478) * C14635 +
             (C12479 - C12480 + C12481 - C12482) * C14629 +
             (C12483 - C12484 + C12485 - C12486) * C14636 +
             (C12487 - C12488 + C12489 - C12490) * C31923) *
                C23828) *
               C531) *
              C440 +
          ((((C7533 - C7532 + C7535 - C7534) * C14635 +
             (C7537 - C7536 + C7539 - C7538) * C14629 +
             (C7541 - C7540 + C7543 - C7542) * C14636 +
             (C7545 - C7544 + C7547 - C7546) * C31923) *
                C31959 +
            (C9208 * C14635 + C9209 * C14629 + C9210 * C14636 +
             C9211 * C31923) *
                C31966 +
            (C13104 * C14635 + C13105 * C14629 +
             (C8580 - C8581 + C8582 - C8583) * C14636 +
             (C8584 - C8585 + C8586 - C8587) * C31923) *
                C23828) *
               C530 +
           ((C9206 * C14635 + C9207 * C14629 + C8408 * C14636 +
             C8409 * C31923) *
                C31959 +
            (C12493 * C14635 + C12494 * C14629 +
             (C8581 - C8580 + C8583 - C8582) * C14636 +
             (C8585 - C8584 + C8587 - C8586) * C31923) *
                C31966 +
            ((C12484 - C12483 + C12486 - C12485) * C14635 +
             (C12488 - C12487 + C12490 - C12489) * C14629 +
             (C32098 * C6795 - C30873 * C6792 + C31782 * C7152 -
              C30854 * C7151) *
                 C14636 +
             (C32098 * C6801 - C30873 * C6796 + C31782 * C7154 -
              C30854 * C7153) *
                 C31923) *
                C23828) *
               C531) *
              C441) *
         C31809) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C14635 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C14629 +
            (C7532 - C7533 + C7534 - C7535) * C14636 +
            (C7536 - C7537 + C7538 - C7539) * C31923) *
               C31959 +
           ((C8556 - C8557 + C8558 - C8559) * C14635 +
            (C8560 - C8561 + C8562 - C8563) * C14629 + C9206 * C14636 +
            C9207 * C31923) *
               C31966 +
           (C12491 * C14635 + C12492 * C14629 + C12493 * C14636 +
            C12494 * C31923) *
               C23828) *
              C31835 * C209 +
          (((C7533 - C7532 + C7535 - C7534) * C14635 +
            (C7537 - C7536 + C7539 - C7538) * C14629 +
            (C7541 - C7540 + C7543 - C7542) * C14636 +
            (C7545 - C7544 + C7547 - C7546) * C31923) *
               C31959 +
           (C9208 * C14635 + C9209 * C14629 + C9210 * C14636 + C9211 * C31923) *
               C31966 +
           (C13104 * C14635 + C13105 * C14629 +
            (C8580 - C8581 + C8582 - C8583) * C14636 +
            (C8584 - C8585 + C8586 - C8587) * C31923) *
               C23828) *
              C31835 * C210 +
          ((C7572 * C14635 + C7573 * C14629 + C7574 * C14636 + C7575 * C31923) *
               C31959 +
           (C8408 * C14635 + C8409 * C14629 +
            (C8105 - C8104 + C8107 - C8106) * C14636 +
            (C8109 - C8108 + C8111 - C8110) * C31923) *
               C31966 +
           ((C8581 - C8580 + C8583 - C8582) * C14635 +
            (C8585 - C8584 + C8587 - C8586) * C14629 +
            (C32098 * C6149 - C30873 * C6145 + C31782 * C6986 -
             C30854 * C6985) *
                C14636 +
            (C32098 * C6154 - C30873 * C6150 + C31782 * C6988 -
             C30854 * C6987) *
                C31923) *
               C23828) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C14635 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C14629 +
            (C7532 - C7533 + C7534 - C7535) * C14636 +
            (C7536 - C7537 + C7538 - C7539) * C31923) *
               C31959 +
           ((C8556 - C8557 + C8558 - C8559) * C14635 +
            (C8560 - C8561 + C8562 - C8563) * C14629 + C9206 * C14636 +
            C9207 * C31923) *
               C31966 +
           (C12491 * C14635 + C12492 * C14629 + C12493 * C14636 +
            C12494 * C31923) *
               C23828) *
              C31835 * C31821 * C110 +
          (((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                C14635 +
            (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                C14629 +
            (C7804 - C7805 + C7806 - C7807) * C14636 +
            (C7808 - C7809 + C7810 - C7811) * C31923) *
               C31959 +
           ((C8992 - C8993 + C8994 - C8995) * C14635 +
            (C8996 - C8997 + C8998 - C8999) * C14629 +
            (C8782 - C8783 + C8784 - C8785) * C14636 +
            (C8786 - C8787 + C8788 - C8789) * C31923) *
               C31966 +
           ((C12898 - C12899 + C12900 - C12901) * C14635 +
            (C12902 - C12903 + C12904 - C12905) * C14629 +
            (C12696 - C12697 + C12698 - C12699) * C14636 +
            (C12700 - C12701 + C12702 - C12703) * C31923) *
               C23828) *
              C31835 * C31821 * C111 +
          (((C32098 * C128 - C30873 * C121 + C31782 * C129 - C30854 * C122) *
                C14635 +
            (C32098 * C142 - C30873 * C133 + C31782 * C143 - C30854 * C134) *
                C14629 +
            (C32098 * C225 - C30873 * C215 + C31782 * C226 - C30854 * C216) *
                C14636 +
            (C32098 * C245 - C30873 * C230 + C31782 * C246 - C30854 * C231) *
                C31923) *
               C31959 +
           ((C32098 * C330 - C30873 * C320 + C31782 * C331 - C30854 * C321) *
                C14635 +
            (C32098 * C350 - C30873 * C335 + C31782 * C351 - C30854 * C336) *
                C14629 +
            (C32098 * C625 - C30873 * C620 + C31782 * C626 - C30854 * C621) *
                C14636 +
            (C32098 * C635 - C30873 * C630 + C31782 * C636 - C30854 * C631) *
                C31923) *
               C31966 +
           ((C32098 * C340 - C30873 * C325 + C31782 * C341 - C30854 * C326) *
                C14635 +
            (C32098 * C355 - C30873 * C345 + C31782 * C356 - C30854 * C346) *
                C14629 +
            (C32098 * C1067 - C30873 * C1055 + C31782 * C2145 -
             C30854 * C2144) *
                C14636 +
            (C32098 * C1082 - C30873 * C1070 + C31782 * C2147 -
             C30854 * C2146) *
                C31923) *
               C23828) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C14635 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C14629 +
            (C7532 - C7533 + C7534 - C7535) * C14636 +
            (C7536 - C7537 + C7538 - C7539) * C31923) *
               C31959 +
           ((C8556 - C8557 + C8558 - C8559) * C14635 +
            (C8560 - C8561 + C8562 - C8563) * C14629 + C9206 * C14636 +
            C9207 * C31923) *
               C31966 +
           C29450 * C23828) *
              C315 +
          (((C8557 - C8556 + C8559 - C8558) * C14635 +
            (C8561 - C8560 + C8563 - C8562) * C14629 + C9208 * C14636 +
            C9209 * C31923) *
               C31959 +
           ((C8564 - C8565 + C8566 - C8567) * C14635 +
            (C8568 - C8569 + C8570 - C8571) * C14629 + C13104 * C14636 +
            C13105 * C31923) *
               C31966 +
           ((C12475 - C12476 + C12477 - C12478) * C14635 +
            (C12479 - C12480 + C12481 - C12482) * C14629 +
            (C12483 - C12484 + C12485 - C12486) * C14636 +
            (C12487 - C12488 + C12489 - C12490) * C31923) *
               C23828) *
              C316 +
          (C29450 * C31959 +
           (C13419 * C14635 + C13420 * C14629 +
            (C12484 - C12483 + C12486 - C12485) * C14636 +
            (C12488 - C12487 + C12490 - C12489) * C31923) *
               C31966 +
           ((C13411 - C13410 + C13413 - C13412) * C14635 +
            (C13415 - C13414 + C13417 - C13416) * C14629 +
            (C32098 * C6797 - C30873 * C6793 + C31782 * C11841 -
             C30854 * C11840) *
                C14636 +
            (C32098 * C6802 - C30873 * C6798 + C31782 * C11843 -
             C30854 * C11842) *
                C31923) *
               C23828) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                 C14635 +
             (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                 C14629 +
             (C7532 - C7533 + C7534 - C7535) * C14636 +
             (C7536 - C7537 + C7538 - C7539) * C31923) *
                C31959 +
            ((C8556 - C8557 + C8558 - C8559) * C14635 +
             (C8560 - C8561 + C8562 - C8563) * C14629 + C9206 * C14636 +
             C9207 * C31923) *
                C31966 +
            C29450 * C23828) *
               C530 +
           (((C8557 - C8556 + C8559 - C8558) * C14635 +
             (C8561 - C8560 + C8563 - C8562) * C14629 + C9208 * C14636 +
             C9209 * C31923) *
                C31959 +
            ((C8564 - C8565 + C8566 - C8567) * C14635 +
             (C8568 - C8569 + C8570 - C8571) * C14629 + C13104 * C14636 +
             C13105 * C31923) *
                C31966 +
            ((C12475 - C12476 + C12477 - C12478) * C14635 +
             (C12479 - C12480 + C12481 - C12482) * C14629 +
             (C12483 - C12484 + C12485 - C12486) * C14636 +
             (C12487 - C12488 + C12489 - C12490) * C31923) *
                C23828) *
               C531) *
              C31821 * C442 +
          ((((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                 C14635 +
             (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                 C14629 +
             (C7804 - C7805 + C7806 - C7807) * C14636 +
             (C7808 - C7809 + C7810 - C7811) * C31923) *
                C31959 +
            ((C8992 - C8993 + C8994 - C8995) * C14635 +
             (C8996 - C8997 + C8998 - C8999) * C14629 +
             (C8782 - C8783 + C8784 - C8785) * C14636 +
             (C8786 - C8787 + C8788 - C8789) * C31923) *
                C31966 +
            ((C12898 - C12899 + C12900 - C12901) * C14635 +
             (C12902 - C12903 + C12904 - C12905) * C14629 +
             (C12696 - C12697 + C12698 - C12699) * C14636 +
             (C12700 - C12701 + C12702 - C12703) * C31923) *
                C23828) *
               C530 +
           (((C8993 - C8992 + C8995 - C8994) * C14635 +
             (C8997 - C8996 + C8999 - C8998) * C14629 +
             (C8783 - C8782 + C8785 - C8784) * C14636 +
             (C8787 - C8786 + C8789 - C8788) * C31923) *
                C31959 +
            ((C12899 - C12898 + C12901 - C12900) * C14635 +
             (C12903 - C12902 + C12905 - C12904) * C14629 +
             (C12697 - C12696 + C12699 - C12698) * C14636 +
             (C12701 - C12700 + C12703 - C12702) * C31923) *
                C31966 +
            ((C13685 - C13684 + C13687 - C13686) * C14635 +
             (C13689 - C13688 + C13691 - C13690) * C14629 +
             (C32098 * C2472 - C30873 * C2469 + C31782 * C2473 -
              C30854 * C2470) *
                 C14636 +
             (C32098 * C2478 - C30873 * C2475 + C31782 * C2479 -
              C30854 * C2476) *
                 C31923) *
                C23828) *
               C531) *
              C31821 * C443)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C14635 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C14629 +
            (C7532 - C7533 + C7534 - C7535) * C14636 +
            (C7536 - C7537 + C7538 - C7539) * C31923) *
               C31959 +
           ((C8556 - C8557 + C8558 - C8559) * C14635 +
            (C8560 - C8561 + C8562 - C8563) * C14629 + C9206 * C14636 +
            C9207 * C31923) *
               C31966 +
           (C12491 * C14635 + C12492 * C14629 + C12493 * C14636 +
            C12494 * C31923) *
               C23828) *
              C31835 * C31821 * C110 +
          (((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                C14635 +
            (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                C14629 +
            (C7804 - C7805 + C7806 - C7807) * C14636 +
            (C7808 - C7809 + C7810 - C7811) * C31923) *
               C31959 +
           ((C8992 - C8993 + C8994 - C8995) * C14635 +
            (C8996 - C8997 + C8998 - C8999) * C14629 +
            (C8782 - C8783 + C8784 - C8785) * C14636 +
            (C8786 - C8787 + C8788 - C8789) * C31923) *
               C31966 +
           ((C12898 - C12899 + C12900 - C12901) * C14635 +
            (C12902 - C12903 + C12904 - C12905) * C14629 +
            (C12696 - C12697 + C12698 - C12699) * C14636 +
            (C12700 - C12701 + C12702 - C12703) * C31923) *
               C23828) *
              C31835 * C31821 * C111 +
          (((C32098 * C128 - C30873 * C121 + C31782 * C129 - C30854 * C122) *
                C14635 +
            (C32098 * C142 - C30873 * C133 + C31782 * C143 - C30854 * C134) *
                C14629 +
            (C32098 * C225 - C30873 * C215 + C31782 * C226 - C30854 * C216) *
                C14636 +
            (C32098 * C245 - C30873 * C230 + C31782 * C246 - C30854 * C231) *
                C31923) *
               C31959 +
           ((C32098 * C330 - C30873 * C320 + C31782 * C331 - C30854 * C321) *
                C14635 +
            (C32098 * C350 - C30873 * C335 + C31782 * C351 - C30854 * C336) *
                C14629 +
            (C32098 * C625 - C30873 * C620 + C31782 * C626 - C30854 * C621) *
                C14636 +
            (C32098 * C635 - C30873 * C630 + C31782 * C636 - C30854 * C631) *
                C31923) *
               C31966 +
           ((C32098 * C340 - C30873 * C325 + C31782 * C341 - C30854 * C326) *
                C14635 +
            (C32098 * C355 - C30873 * C345 + C31782 * C356 - C30854 * C346) *
                C14629 +
            (C32098 * C1067 - C30873 * C1055 + C31782 * C2145 -
             C30854 * C2144) *
                C14636 +
            (C32098 * C1082 - C30873 * C1070 + C31782 * C2147 -
             C30854 * C2146) *
                C31923) *
               C23828) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C14635 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C14629 +
            (C7532 - C7533 + C7534 - C7535) * C14636 +
            (C7536 - C7537 + C7538 - C7539) * C31923) *
               C31959 +
           ((C8556 - C8557 + C8558 - C8559) * C14635 +
            (C8560 - C8561 + C8562 - C8563) * C14629 + C9206 * C14636 +
            C9207 * C31923) *
               C31966 +
           (C12491 * C14635 + C12492 * C14629 + C12493 * C14636 +
            C12494 * C31923) *
               C23828) *
              C31835 * C209 +
          (((C7533 - C7532 + C7535 - C7534) * C14635 +
            (C7537 - C7536 + C7539 - C7538) * C14629 +
            (C7541 - C7540 + C7543 - C7542) * C14636 +
            (C7545 - C7544 + C7547 - C7546) * C31923) *
               C31959 +
           (C9208 * C14635 + C9209 * C14629 + C9210 * C14636 + C9211 * C31923) *
               C31966 +
           (C13104 * C14635 + C13105 * C14629 +
            (C8580 - C8581 + C8582 - C8583) * C14636 +
            (C8584 - C8585 + C8586 - C8587) * C31923) *
               C23828) *
              C31835 * C210 +
          ((C7572 * C14635 + C7573 * C14629 + C7574 * C14636 + C7575 * C31923) *
               C31959 +
           (C8408 * C14635 + C8409 * C14629 +
            (C8105 - C8104 + C8107 - C8106) * C14636 +
            (C8109 - C8108 + C8111 - C8110) * C31923) *
               C31966 +
           ((C8581 - C8580 + C8583 - C8582) * C14635 +
            (C8585 - C8584 + C8587 - C8586) * C14629 +
            (C32098 * C6149 - C30873 * C6145 + C31782 * C6986 -
             C30854 * C6985) *
                C14636 +
            (C32098 * C6154 - C30873 * C6150 + C31782 * C6988 -
             C30854 * C6987) *
                C31923) *
               C23828) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
              C32137 * C128 - C5156 * C121) *
                 C14635 +
             (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
              C32137 * C142 - C5156 * C133) *
                 C14629 +
             (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C14636 +
             (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C31923) *
                C20324 +
            ((C10237 - C10238 + C10239 - C10240 + C10241 - C10242) * C14635 +
             (C10243 - C10244 + C10245 - C10246 + C10247 - C10248) * C14629 +
             (C5890 - C5889 + C5892 - C5891 + C5894 - C5893) * C14636 +
             (C5896 - C5895 + C5898 - C5897 + C5900 - C5899) * C31923) *
                C31963) *
               C31835 * C440 +
           (((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C14635 +
             (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C14629 +
             (C5284 - C5283 + C5286 - C5285 + C5288 - C5287) * C14636 +
             (C5290 - C5289 + C5292 - C5291 + C5294 - C5293) * C31923) *
                C20324 +
            ((C5889 - C5890 + C5891 - C5892 + C5893 - C5894) * C14635 +
             (C5895 - C5896 + C5897 - C5898 + C5899 - C5900) * C14629 +
             (C5901 - C5902 + C5903 - C5904 + C5905 - C5906) * C14636 +
             (C5907 - C5908 + C5909 - C5910 + C5911 - C5912) * C31923) *
                C31963) *
               C31835 * C441) *
              C442 +
          ((((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
              C5156 * C122 - C32137 * C129) *
                 C14635 +
             (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
              C5156 * C134 - C32137 * C143) *
                 C14629 +
             (C5573 - C5574 + C5575 - C5576 + C5577 - C5578) * C14636 +
             (C5579 - C5580 + C5581 - C5582 + C5583 - C5584) * C31923) *
                C20324 +
            ((C10578 - C10579 + C10580 - C10581 + C10582 - C10583) * C14635 +
             (C10584 - C10585 + C10586 - C10587 + C10588 - C10589) * C14629 +
             (C26184 - C26185 + C26186 - C26187 + C26188 - C26189) * C14636 +
             (C26190 - C26191 + C26192 - C26193 + C26194 - C26195) * C31923) *
                C31963) *
               C31835 * C440 +
           (((C5574 - C5573 + C5576 - C5575 + C5578 - C5577) * C14635 +
             (C5580 - C5579 + C5582 - C5581 + C5584 - C5583) * C14629 +
             (C5586 - C5585 + C5588 - C5587 + C5590 - C5589) * C14636 +
             (C5592 - C5591 + C5594 - C5593 + C5596 - C5595) * C31923) *
                C20324 +
            ((C26185 - C26184 + C26187 - C26186 + C26189 - C26188) * C14635 +
             (C26191 - C26190 + C26193 - C26192 + C26195 - C26194) * C14629 +
             (C32180 * C1060 - C5154 * C1051 + C32167 * C1061 - C5155 * C1052 +
              C32137 * C1407 - C5156 * C1406) *
                 C14636 +
             (C32180 * C1078 - C5154 * C1063 + C32167 * C1079 - C5155 * C1064 +
              C32137 * C1409 - C5156 * C1408) *
                 C31923) *
                C31963) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C15393 +
             (C31772 * C140 - C5980 * C131) * C32190 +
             (C6057 - C6058) * C15394 + (C6059 - C6060) * C32186 +
             C6077 * C15395 + C6078 * C32176 + C6079 * C15396 +
             C6080 * C32158) *
                C20324 +
            ((C6805 - C6806) * C15393 + (C6807 - C6808) * C32190 +
             C7314 * C15394 + C7315 * C32186 + C6667 * C15395 + C6668 * C32176 +
             C9408 * C15396 + C9409 * C32158) *
                C31963) *
               C31835 * C440 +
           (((C6058 - C6057) * C15393 + (C6060 - C6059) * C32190 +
             (C6062 - C6061) * C15394 + (C6064 - C6063) * C32186 +
             (C6066 - C6065) * C15395 + (C6068 - C6067) * C32176 +
             (C6070 - C6069) * C15396 + (C6072 - C6071) * C32158) *
                C20324 +
            (C7316 * C15393 + C7317 * C32190 + C7318 * C15394 + C7319 * C32186 +
             C9902 * C15395 + C9903 * C32176 + (C6443 - C6444) * C15396 +
             (C6445 - C6446) * C32158) *
                C31963) *
               C31835 * C441) *
              C442 +
          ((((C5980 * C120 - C31772 * C127) * C15393 +
             (C5980 * C132 - C31772 * C141) * C32190 +
             (C6243 - C6244) * C15394 + (C6245 - C6246) * C32186 +
             (C6247 - C6248) * C15395 + (C6249 - C6250) * C32176 +
             (C6251 - C6252) * C15396 + (C6253 - C6254) * C32158) *
                C20324 +
            ((C7156 - C7157) * C15393 + (C7158 - C7159) * C32190 +
             (C6990 - C6991) * C15394 + (C6992 - C6993) * C32186 +
             (C6994 - C6995) * C15395 + (C6996 - C6997) * C32176 +
             (C9638 - C9639) * C15396 + (C9640 - C9641) * C32158) *
                C31963) *
               C31835 * C440 +
           (((C6244 - C6243) * C15393 + (C6246 - C6245) * C32190 +
             (C6248 - C6247) * C15394 + (C6250 - C6249) * C32186 +
             (C6252 - C6251) * C15395 + (C6254 - C6253) * C32176 +
             (C6256 - C6255) * C15396 + (C6258 - C6257) * C32158) *
                C20324 +
            ((C6991 - C6990) * C15393 + (C6993 - C6992) * C32190 +
             (C6995 - C6994) * C15394 + (C6997 - C6996) * C32186 +
             (C9639 - C9638) * C15395 + (C9641 - C9640) * C32176 +
             (C31772 * C6341 - C5980 * C6340) * C15396 +
             (C31772 * C6343 - C5980 * C6342) * C32158) *
                C31963) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
              C32137 * C128 - C5156 * C121) *
                 C14635 +
             (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
              C32137 * C142 - C5156 * C133) *
                 C14629 +
             (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C14636 +
             (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C31923) *
                C20324 +
            ((C10237 - C10238 + C10239 - C10240 + C10241 - C10242) * C14635 +
             (C10243 - C10244 + C10245 - C10246 + C10247 - C10248) * C14629 +
             C26600 * C14636 + C26601 * C31923) *
                C31963) *
               C530 +
           (((C10238 - C10237 + C10240 - C10239 + C10242 - C10241) * C14635 +
             (C10244 - C10243 + C10246 - C10245 + C10248 - C10247) * C14629 +
             C26602 * C14636 + C26603 * C31923) *
                C20324 +
            ((C10250 - C10249 + C10252 - C10251 + C10254 - C10253) * C14635 +
             (C10256 - C10255 + C10258 - C10257 + C10260 - C10259) * C14629 +
             (C10748 - C10749 + C10750 - C10751 + C10752 - C10753) * C14636 +
             (C10754 - C10755 + C10756 - C10757 + C10758 - C10759) * C31923) *
                C31963) *
               C531) *
              C440 +
          ((((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C14635 +
             (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C14629 +
             (C5284 - C5283 + C5286 - C5285 + C5288 - C5287) * C14636 +
             (C5290 - C5289 + C5292 - C5291 + C5294 - C5293) * C31923) *
                C20324 +
            (C26602 * C14635 + C26603 * C14629 +
             (C5901 - C5902 + C5903 - C5904 + C5905 - C5906) * C14636 +
             (C5907 - C5908 + C5909 - C5910 + C5911 - C5912) * C31923) *
                C31963) *
               C530 +
           ((C26600 * C14635 + C26601 * C14629 +
             (C5902 - C5901 + C5904 - C5903 + C5906 - C5905) * C14636 +
             (C5908 - C5907 + C5910 - C5909 + C5912 - C5911) * C31923) *
                C20324 +
            ((C10749 - C10748 + C10751 - C10750 + C10753 - C10752) * C14635 +
             (C10755 - C10754 + C10757 - C10756 + C10759 - C10758) * C14629 +
             (C32180 * C1071 - C5154 * C1056 + C32167 * C1072 - C5155 * C1057 +
              C32137 * C1073 - C5156 * C1058) *
                 C14636 +
             (C32180 * C1083 - C5154 * C1074 + C32167 * C1084 - C5155 * C1075 +
              C32137 * C1085 - C5156 * C1076) *
                 C31923) *
                C31963) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C15393 +
             (C31772 * C140 - C5980 * C131) * C32190 +
             (C6057 - C6058) * C15394 + (C6059 - C6060) * C32186 +
             C6077 * C15395 + C6078 * C32176 + C6079 * C15396 +
             C6080 * C32158) *
                C20324 +
            ((C6805 - C6806) * C15393 + (C6807 - C6808) * C32190 +
             C7314 * C15394 + C7315 * C32186 + C6667 * C15395 + C6668 * C32176 +
             C9408 * C15396 + C9409 * C32158) *
                C31963) *
               C530 +
           (((C6806 - C6805) * C15393 + (C6808 - C6807) * C32190 +
             C7316 * C15394 + C7317 * C32186 + C7318 * C15395 + C7319 * C32176 +
             C9902 * C15396 + C9903 * C32158) *
                C20324 +
            ((C6810 - C6809) * C15393 + (C6812 - C6811) * C32190 +
             C7320 * C15394 + C7321 * C32186 + C7322 * C15395 + C7323 * C32176 +
             (C6677 - C6678) * C15396 + (C6679 - C6680) * C32158) *
                C31963) *
               C531) *
              C440 +
          ((((C6058 - C6057) * C15393 + (C6060 - C6059) * C32190 +
             (C6062 - C6061) * C15394 + (C6064 - C6063) * C32186 +
             (C6066 - C6065) * C15395 + (C6068 - C6067) * C32176 +
             (C6070 - C6069) * C15396 + (C6072 - C6071) * C32158) *
                C20324 +
            (C7316 * C15393 + C7317 * C32190 + C7318 * C15394 + C7319 * C32186 +
             C9902 * C15395 + C9903 * C32176 + (C6443 - C6444) * C15396 +
             (C6445 - C6446) * C32158) *
                C31963) *
               C530 +
           ((C7314 * C15393 + C7315 * C32190 + C6667 * C15394 + C6668 * C32186 +
             C9408 * C15395 + C9409 * C32176 + (C6444 - C6443) * C15396 +
             (C6446 - C6445) * C32158) *
                C20324 +
            (C6813 * C15393 + C6814 * C32190 + C6681 * C15394 + C6682 * C32186 +
             (C6678 - C6677) * C15395 + (C6680 - C6679) * C32176 +
             (C31772 * C6151 - C5980 * C6146) * C15396 +
             (C31772 * C6155 - C5980 * C6152) * C32158) *
                C31963) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C14635 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C14629 +
            (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C14636 +
            (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C31923) *
               C20324 +
           ((C10237 - C10238 + C10239 - C10240 + C10241 - C10242) * C14635 +
            (C10243 - C10244 + C10245 - C10246 + C10247 - C10248) * C14629 +
            (C5890 - C5889 + C5892 - C5891 + C5894 - C5893) * C14636 +
            (C5896 - C5895 + C5898 - C5897 + C5900 - C5899) * C31923) *
               C31963) *
              C31835 * C209 +
          (((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C14635 +
            (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C14629 +
            (C5284 - C5283 + C5286 - C5285 + C5288 - C5287) * C14636 +
            (C5290 - C5289 + C5292 - C5291 + C5294 - C5293) * C31923) *
               C20324 +
           ((C5889 - C5890 + C5891 - C5892 + C5893 - C5894) * C14635 +
            (C5895 - C5896 + C5897 - C5898 + C5899 - C5900) * C14629 +
            (C5901 - C5902 + C5903 - C5904 + C5905 - C5906) * C14636 +
            (C5907 - C5908 + C5909 - C5910 + C5911 - C5912) * C31923) *
               C31963) *
              C31835 * C210 +
          ((C5315 * C14635 + C5316 * C14629 +
            (C5296 - C5295 + C5298 - C5297 + C5300 - C5299) * C14636 +
            (C5302 - C5301 + C5304 - C5303 + C5306 - C5305) * C31923) *
               C20324 +
           ((C5902 - C5901 + C5904 - C5903 + C5906 - C5905) * C14635 +
            (C5908 - C5907 + C5910 - C5909 + C5912 - C5911) * C14629 +
            (C32180 * C1559 - C5154 * C1556 + C32167 * C1560 - C5155 * C1557 +
             C32137 * C1561 - C5156 * C1558) *
                C14636 +
            (C32180 * C1565 - C5154 * C1562 + C32167 * C1566 - C5155 * C1563 +
             C32137 * C1567 - C5156 * C1564) *
                C31923) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C14635 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C14629 +
            (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C14636 +
            (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C31923) *
               C20324 +
           ((C10237 - C10238 + C10239 - C10240 + C10241 - C10242) * C14635 +
            (C10243 - C10244 + C10245 - C10246 + C10247 - C10248) * C14629 +
            (C5890 - C5889 + C5892 - C5891 + C5894 - C5893) * C14636 +
            (C5896 - C5895 + C5898 - C5897 + C5900 - C5899) * C31923) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
             C5156 * C122 - C32137 * C129) *
                C14635 +
            (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
             C5156 * C134 - C32137 * C143) *
                C14629 +
            (C5573 - C5574 + C5575 - C5576 + C5577 - C5578) * C14636 +
            (C5579 - C5580 + C5581 - C5582 + C5583 - C5584) * C31923) *
               C20324 +
           ((C10578 - C10579 + C10580 - C10581 + C10582 - C10583) * C14635 +
            (C10584 - C10585 + C10586 - C10587 + C10588 - C10589) * C14629 +
            (C5154 * C619 - C32180 * C624 + C5155 * C620 - C32167 * C625 +
             C5156 * C621 - C32137 * C626) *
                C14636 +
            (C5154 * C629 - C32180 * C634 + C5155 * C630 - C32167 * C635 +
             C5156 * C631 - C32137 * C636) *
                C31923) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C32180 * C128 - C5154 * C121 + C32167 * C129 - C5155 * C122 +
             C32137 * C130 - C5156 * C123) *
                C14635 +
            (C32180 * C142 - C5154 * C133 + C32167 * C143 - C5155 * C134 +
             C32137 * C144 - C5156 * C135) *
                C14629 +
            (C32180 * C225 - C5154 * C215 + C32167 * C226 - C5155 * C216 +
             C32137 * C227 - C5156 * C217) *
                C14636 +
            (C32180 * C245 - C5154 * C230 + C32167 * C246 - C5155 * C231 +
             C32137 * C247 - C5156 * C232) *
                C31923) *
               C20324 +
           ((C32180 * C330 - C5154 * C320 + C32167 * C331 - C5155 * C321 +
             C32137 * C332 - C5156 * C322) *
                C14635 +
            (C32180 * C350 - C5154 * C335 + C32167 * C351 - C5155 * C336 +
             C32137 * C352 - C5156 * C337) *
                C14629 +
            (C32180 * C625 - C5154 * C620 + C32167 * C626 - C5155 * C621 +
             C32137 * C627 - C5156 * C622) *
                C14636 +
            (C32180 * C635 - C5154 * C630 + C32167 * C636 - C5155 * C631 +
             C32137 * C637 - C5156 * C632) *
                C31923) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C14635 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C14629 +
            (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C14636 +
            (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C31923) *
               C20324 +
           ((C10237 - C10238 + C10239 - C10240 + C10241 - C10242) * C14635 +
            (C10243 - C10244 + C10245 - C10246 + C10247 - C10248) * C14629 +
            (C5890 - C5889 + C5892 - C5891 + C5894 - C5893) * C14636 +
            (C5896 - C5895 + C5898 - C5897 + C5900 - C5899) * C31923) *
               C31963) *
              C315 +
          (((C10238 - C10237 + C10240 - C10239 + C10242 - C10241) * C14635 +
            (C10244 - C10243 + C10246 - C10245 + C10248 - C10247) * C14629 +
            (C5889 - C5890 + C5891 - C5892 + C5893 - C5894) * C14636 +
            (C5895 - C5896 + C5897 - C5898 + C5899 - C5900) * C31923) *
               C20324 +
           ((C10250 - C10249 + C10252 - C10251 + C10254 - C10253) * C14635 +
            (C10256 - C10255 + C10258 - C10257 + C10260 - C10259) * C14629 +
            (C10748 - C10749 + C10750 - C10751 + C10752 - C10753) * C14636 +
            (C10754 - C10755 + C10756 - C10757 + C10758 - C10759) * C31923) *
               C31963) *
              C316 +
          ((C10281 * C14635 + C10282 * C14629 +
            (C10749 - C10748 + C10751 - C10750 + C10753 - C10752) * C14636 +
            (C10755 - C10754 + C10757 - C10756 + C10759 - C10758) * C31923) *
               C20324 +
           ((C10262 - C10261 + C10264 - C10263 + C10266 - C10265) * C14635 +
            (C10268 - C10267 + C10270 - C10269 + C10272 - C10271) * C14629 +
            (C32180 * C2471 - C5154 * C2468 + C32167 * C2472 - C5155 * C2469 +
             C32137 * C2473 - C5156 * C2470) *
                C14636 +
            (C32180 * C2477 - C5154 * C2474 + C32167 * C2478 - C5155 * C2475 +
             C32137 * C2479 - C5156 * C2476) *
                C31923) *
               C31963) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C15393 +
            (C31772 * C140 - C5980 * C131) * C32190 + (C6057 - C6058) * C15394 +
            (C6059 - C6060) * C32186 + C6077 * C15395 + C6078 * C32176 +
            C6079 * C15396 + C6080 * C32158) *
               C20324 +
           ((C6805 - C6806) * C15393 + (C6807 - C6808) * C32190 +
            C7314 * C15394 + C7315 * C32186 + C6667 * C15395 + C6668 * C32176 +
            C9408 * C15396 + C9409 * C32158) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C5980 * C120 - C31772 * C127) * C15393 +
            (C5980 * C132 - C31772 * C141) * C32190 + (C6243 - C6244) * C15394 +
            (C6245 - C6246) * C32186 + (C6247 - C6248) * C15395 +
            (C6249 - C6250) * C32176 + (C6251 - C6252) * C15396 +
            (C6253 - C6254) * C32158) *
               C20324 +
           ((C7156 - C7157) * C15393 + (C7158 - C7159) * C32190 +
            (C6990 - C6991) * C15394 + (C6992 - C6993) * C32186 +
            (C6994 - C6995) * C15395 + (C6996 - C6997) * C32176 +
            (C9638 - C9639) * C15396 + (C9640 - C9641) * C32158) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C31772 * C128 - C5980 * C121) * C15393 +
            (C31772 * C142 - C5980 * C133) * C32190 +
            (C31772 * C225 - C5980 * C215) * C15394 +
            (C31772 * C245 - C5980 * C230) * C32186 +
            (C31772 * C235 - C5980 * C220) * C15395 +
            (C31772 * C250 - C5980 * C240) * C32176 +
            (C31772 * C878 - C5980 * C872) * C15396 +
            (C31772 * C890 - C5980 * C881) * C32158) *
               C20324 +
           ((C31772 * C330 - C5980 * C320) * C15393 +
            (C31772 * C350 - C5980 * C335) * C32190 +
            (C31772 * C625 - C5980 * C620) * C15394 +
            (C31772 * C635 - C5980 * C630) * C32186 +
            (C31772 * C1061 - C5980 * C1052) * C15395 +
            (C31772 * C1079 - C5980 * C1064) * C32176 +
            (C31772 * C1561 - C5980 * C1558) * C15396 +
            (C31772 * C1567 - C5980 * C1564) * C32158) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C15393 +
            (C31772 * C140 - C5980 * C131) * C32190 + (C6057 - C6058) * C15394 +
            (C6059 - C6060) * C32186 + C6077 * C15395 + C6078 * C32176 +
            C6079 * C15396 + C6080 * C32158) *
               C20324 +
           ((C6805 - C6806) * C15393 + (C6807 - C6808) * C32190 +
            C7314 * C15394 + C7315 * C32186 + C6667 * C15395 + C6668 * C32176 +
            C9408 * C15396 + C9409 * C32158) *
               C31963) *
              C31835 * C209 +
          (((C6058 - C6057) * C15393 + (C6060 - C6059) * C32190 +
            (C6062 - C6061) * C15394 + (C6064 - C6063) * C32186 +
            (C6066 - C6065) * C15395 + (C6068 - C6067) * C32176 +
            (C6070 - C6069) * C15396 + (C6072 - C6071) * C32158) *
               C20324 +
           (C7316 * C15393 + C7317 * C32190 + C7318 * C15394 + C7319 * C32186 +
            C9902 * C15395 + C9903 * C32176 + (C6443 - C6444) * C15396 +
            (C6445 - C6446) * C32158) *
               C31963) *
              C31835 * C210 +
          ((C6077 * C15393 + C6078 * C32190 + C6079 * C15394 + C6080 * C32186 +
            C6081 * C15395 + C6082 * C32176 + (C6074 - C6073) * C15396 +
            (C6076 - C6075) * C32158) *
               C20324 +
           (C6667 * C15393 + C6668 * C32190 + C9408 * C15394 + C9409 * C32186 +
            (C6444 - C6443) * C15395 + (C6446 - C6445) * C32176 +
            (C31772 * C6427 - C5980 * C6426) * C15396 +
            (C31772 * C6429 - C5980 * C6428) * C32158) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C15393 +
            (C31772 * C140 - C5980 * C131) * C32190 + (C6057 - C6058) * C15394 +
            (C6059 - C6060) * C32186 + C6077 * C15395 + C6078 * C32176 +
            C6079 * C15396 + C6080 * C32158) *
               C20324 +
           ((C6805 - C6806) * C15393 + (C6807 - C6808) * C32190 +
            C7314 * C15394 + C7315 * C32186 + C6667 * C15395 + C6668 * C32176 +
            C9408 * C15396 + C9409 * C32158) *
               C31963) *
              C315 +
          (((C6806 - C6805) * C15393 + (C6808 - C6807) * C32190 +
            C7316 * C15394 + C7317 * C32186 + C7318 * C15395 + C7319 * C32176 +
            C9902 * C15396 + C9903 * C32158) *
               C20324 +
           ((C6810 - C6809) * C15393 + (C6812 - C6811) * C32190 +
            C7320 * C15394 + C7321 * C32186 + C7322 * C15395 + C7323 * C32176 +
            (C6677 - C6678) * C15396 + (C6679 - C6680) * C32158) *
               C31963) *
              C316 +
          ((C6829 * C15393 + C6830 * C32190 + C6813 * C15394 + C6814 * C32186 +
            C6681 * C15395 + C6682 * C32176 + (C6678 - C6677) * C15396 +
            (C6680 - C6679) * C32158) *
               C20324 +
           (C11740 * C15393 + C11741 * C32190 + C14122 * C15394 +
            C14123 * C32186 + (C6826 - C6825) * C15395 +
            (C6828 - C6827) * C32176 +
            (C31772 * C7310 - C5980 * C7309) * C15396 +
            (C31772 * C7312 - C5980 * C7311) * C32158) *
               C31963) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
              C32137 * C128 - C5156 * C121) *
                 C14635 +
             (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
              C32137 * C142 - C5156 * C133) *
                 C14629 +
             (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C14636 +
             (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C31923) *
                C20324 +
            ((C10237 - C10238 + C10239 - C10240 + C10241 - C10242) * C14635 +
             (C10243 - C10244 + C10245 - C10246 + C10247 - C10248) * C14629 +
             (C5890 - C5889 + C5892 - C5891 + C5894 - C5893) * C14636 +
             (C5896 - C5895 + C5898 - C5897 + C5900 - C5899) * C31923) *
                C31963) *
               C530 +
           (((C10238 - C10237 + C10240 - C10239 + C10242 - C10241) * C14635 +
             (C10244 - C10243 + C10246 - C10245 + C10248 - C10247) * C14629 +
             (C5889 - C5890 + C5891 - C5892 + C5893 - C5894) * C14636 +
             (C5895 - C5896 + C5897 - C5898 + C5899 - C5900) * C31923) *
                C20324 +
            ((C10250 - C10249 + C10252 - C10251 + C10254 - C10253) * C14635 +
             (C10256 - C10255 + C10258 - C10257 + C10260 - C10259) * C14629 +
             (C10748 - C10749 + C10750 - C10751 + C10752 - C10753) * C14636 +
             (C10754 - C10755 + C10756 - C10757 + C10758 - C10759) * C31923) *
                C31963) *
               C531) *
              C31821 * C442 +
          ((((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
              C5156 * C122 - C32137 * C129) *
                 C14635 +
             (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
              C5156 * C134 - C32137 * C143) *
                 C14629 +
             (C5573 - C5574 + C5575 - C5576 + C5577 - C5578) * C14636 +
             (C5579 - C5580 + C5581 - C5582 + C5583 - C5584) * C31923) *
                C20324 +
            ((C10578 - C10579 + C10580 - C10581 + C10582 - C10583) * C14635 +
             (C10584 - C10585 + C10586 - C10587 + C10588 - C10589) * C14629 +
             (C26184 - C26185 + C26186 - C26187 + C26188 - C26189) * C14636 +
             (C26190 - C26191 + C26192 - C26193 + C26194 - C26195) * C31923) *
                C31963) *
               C530 +
           (((C10579 - C10578 + C10581 - C10580 + C10583 - C10582) * C14635 +
             (C10585 - C10584 + C10587 - C10586 + C10589 - C10588) * C14629 +
             (C26185 - C26184 + C26187 - C26186 + C26189 - C26188) * C14636 +
             (C26191 - C26190 + C26193 - C26192 + C26195 - C26194) * C31923) *
                C20324 +
            ((C10591 - C10590 + C10593 - C10592 + C10595 - C10594) * C14635 +
             (C10597 - C10596 + C10599 - C10598 + C10601 - C10600) * C14629 +
             (C32180 * C1066 - C5154 * C1054 + C32167 * C1067 - C5155 * C1055 +
              C32137 * C2145 - C5156 * C2144) *
                 C14636 +
             (C32180 * C1081 - C5154 * C1069 + C32167 * C1082 - C5155 * C1070 +
              C32137 * C2147 - C5156 * C2146) *
                 C31923) *
                C31963) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C15393 +
             (C31772 * C140 - C5980 * C131) * C32190 +
             (C6057 - C6058) * C15394 + (C6059 - C6060) * C32186 +
             C6077 * C15395 + C6078 * C32176 + C6079 * C15396 +
             C6080 * C32158) *
                C20324 +
            ((C6805 - C6806) * C15393 + (C6807 - C6808) * C32190 +
             C7314 * C15394 + C7315 * C32186 + C6667 * C15395 + C6668 * C32176 +
             C9408 * C15396 + C9409 * C32158) *
                C31963) *
               C530 +
           (((C6806 - C6805) * C15393 + (C6808 - C6807) * C32190 +
             C7316 * C15394 + C7317 * C32186 + C7318 * C15395 + C7319 * C32176 +
             C9902 * C15396 + C9903 * C32158) *
                C20324 +
            ((C6810 - C6809) * C15393 + (C6812 - C6811) * C32190 +
             C7320 * C15394 + C7321 * C32186 + C7322 * C15395 + C7323 * C32176 +
             (C6677 - C6678) * C15396 + (C6679 - C6680) * C32158) *
                C31963) *
               C531) *
              C31821 * C442 +
          ((((C5980 * C120 - C31772 * C127) * C15393 +
             (C5980 * C132 - C31772 * C141) * C32190 +
             (C6243 - C6244) * C15394 + (C6245 - C6246) * C32186 +
             (C6247 - C6248) * C15395 + (C6249 - C6250) * C32176 +
             (C6251 - C6252) * C15396 + (C6253 - C6254) * C32158) *
                C20324 +
            ((C7156 - C7157) * C15393 + (C7158 - C7159) * C32190 +
             (C6990 - C6991) * C15394 + (C6992 - C6993) * C32186 +
             (C6994 - C6995) * C15395 + (C6996 - C6997) * C32176 +
             (C9638 - C9639) * C15396 + (C9640 - C9641) * C32158) *
                C31963) *
               C530 +
           (((C7157 - C7156) * C15393 + (C7159 - C7158) * C32190 +
             (C6991 - C6990) * C15394 + (C6993 - C6992) * C32186 +
             (C6995 - C6994) * C15395 + (C6997 - C6996) * C32176 +
             (C9639 - C9638) * C15396 + (C9641 - C9640) * C32158) *
                C20324 +
            ((C7161 - C7160) * C15393 + (C7163 - C7162) * C32190 +
             (C6999 - C6998) * C15394 + (C7001 - C7000) * C32186 +
             (C7003 - C7002) * C15395 + (C7005 - C7004) * C32176 +
             (C31772 * C6986 - C5980 * C6985) * C15396 +
             (C31772 * C6988 - C5980 * C6987) * C32158) *
                C31963) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C14635 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C14629 +
            (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C14636 +
            (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C31923) *
               C20324 +
           ((C10237 - C10238 + C10239 - C10240 + C10241 - C10242) * C14635 +
            (C10243 - C10244 + C10245 - C10246 + C10247 - C10248) * C14629 +
            (C5890 - C5889 + C5892 - C5891 + C5894 - C5893) * C14636 +
            (C5896 - C5895 + C5898 - C5897 + C5900 - C5899) * C31923) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
             C5156 * C122 - C32137 * C129) *
                C14635 +
            (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
             C5156 * C134 - C32137 * C143) *
                C14629 +
            (C5573 - C5574 + C5575 - C5576 + C5577 - C5578) * C14636 +
            (C5579 - C5580 + C5581 - C5582 + C5583 - C5584) * C31923) *
               C20324 +
           ((C10578 - C10579 + C10580 - C10581 + C10582 - C10583) * C14635 +
            (C10584 - C10585 + C10586 - C10587 + C10588 - C10589) * C14629 +
            (C5154 * C619 - C32180 * C624 + C5155 * C620 - C32167 * C625 +
             C5156 * C621 - C32137 * C626) *
                C14636 +
            (C5154 * C629 - C32180 * C634 + C5155 * C630 - C32167 * C635 +
             C5156 * C631 - C32137 * C636) *
                C31923) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C32180 * C128 - C5154 * C121 + C32167 * C129 - C5155 * C122 +
             C32137 * C130 - C5156 * C123) *
                C14635 +
            (C32180 * C142 - C5154 * C133 + C32167 * C143 - C5155 * C134 +
             C32137 * C144 - C5156 * C135) *
                C14629 +
            (C32180 * C225 - C5154 * C215 + C32167 * C226 - C5155 * C216 +
             C32137 * C227 - C5156 * C217) *
                C14636 +
            (C32180 * C245 - C5154 * C230 + C32167 * C246 - C5155 * C231 +
             C32137 * C247 - C5156 * C232) *
                C31923) *
               C20324 +
           ((C32180 * C330 - C5154 * C320 + C32167 * C331 - C5155 * C321 +
             C32137 * C332 - C5156 * C322) *
                C14635 +
            (C32180 * C350 - C5154 * C335 + C32167 * C351 - C5155 * C336 +
             C32137 * C352 - C5156 * C337) *
                C14629 +
            (C32180 * C625 - C5154 * C620 + C32167 * C626 - C5155 * C621 +
             C32137 * C627 - C5156 * C622) *
                C14636 +
            (C32180 * C635 - C5154 * C630 + C32167 * C636 - C5155 * C631 +
             C32137 * C637 - C5156 * C632) *
                C31923) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C14635 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C14629 +
            (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C14636 +
            (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C31923) *
               C20324 +
           ((C10237 - C10238 + C10239 - C10240 + C10241 - C10242) * C14635 +
            (C10243 - C10244 + C10245 - C10246 + C10247 - C10248) * C14629 +
            (C5890 - C5889 + C5892 - C5891 + C5894 - C5893) * C14636 +
            (C5896 - C5895 + C5898 - C5897 + C5900 - C5899) * C31923) *
               C31963) *
              C31835 * C209 +
          (((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C14635 +
            (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C14629 +
            (C5284 - C5283 + C5286 - C5285 + C5288 - C5287) * C14636 +
            (C5290 - C5289 + C5292 - C5291 + C5294 - C5293) * C31923) *
               C20324 +
           ((C5889 - C5890 + C5891 - C5892 + C5893 - C5894) * C14635 +
            (C5895 - C5896 + C5897 - C5898 + C5899 - C5900) * C14629 +
            (C5901 - C5902 + C5903 - C5904 + C5905 - C5906) * C14636 +
            (C5907 - C5908 + C5909 - C5910 + C5911 - C5912) * C31923) *
               C31963) *
              C31835 * C210 +
          ((C5315 * C14635 + C5316 * C14629 +
            (C5296 - C5295 + C5298 - C5297 + C5300 - C5299) * C14636 +
            (C5302 - C5301 + C5304 - C5303 + C5306 - C5305) * C31923) *
               C20324 +
           ((C5902 - C5901 + C5904 - C5903 + C5906 - C5905) * C14635 +
            (C5908 - C5907 + C5910 - C5909 + C5912 - C5911) * C14629 +
            (C32180 * C1559 - C5154 * C1556 + C32167 * C1560 - C5155 * C1557 +
             C32137 * C1561 - C5156 * C1558) *
                C14636 +
            (C32180 * C1565 - C5154 * C1562 + C32167 * C1566 - C5155 * C1563 +
             C32137 * C1567 - C5156 * C1564) *
                C31923) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C15393 +
            (C31772 * C140 - C5980 * C131) * C32190 + (C6057 - C6058) * C15394 +
            (C6059 - C6060) * C32186 + C6077 * C15395 + C6078 * C32176 +
            C6079 * C15396 + C6080 * C32158) *
               C20324 +
           ((C6805 - C6806) * C15393 + (C6807 - C6808) * C32190 +
            C7314 * C15394 + C7315 * C32186 + C6667 * C15395 + C6668 * C32176 +
            C9408 * C15396 + C9409 * C32158) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C5980 * C120 - C31772 * C127) * C15393 +
            (C5980 * C132 - C31772 * C141) * C32190 + (C6243 - C6244) * C15394 +
            (C6245 - C6246) * C32186 + (C6247 - C6248) * C15395 +
            (C6249 - C6250) * C32176 + (C6251 - C6252) * C15396 +
            (C6253 - C6254) * C32158) *
               C20324 +
           ((C7156 - C7157) * C15393 + (C7158 - C7159) * C32190 +
            (C6990 - C6991) * C15394 + (C6992 - C6993) * C32186 +
            (C6994 - C6995) * C15395 + (C6996 - C6997) * C32176 +
            (C9638 - C9639) * C15396 + (C9640 - C9641) * C32158) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C31772 * C128 - C5980 * C121) * C15393 +
            (C31772 * C142 - C5980 * C133) * C32190 +
            (C31772 * C225 - C5980 * C215) * C15394 +
            (C31772 * C245 - C5980 * C230) * C32186 +
            (C31772 * C235 - C5980 * C220) * C15395 +
            (C31772 * C250 - C5980 * C240) * C32176 +
            (C31772 * C878 - C5980 * C872) * C15396 +
            (C31772 * C890 - C5980 * C881) * C32158) *
               C20324 +
           ((C31772 * C330 - C5980 * C320) * C15393 +
            (C31772 * C350 - C5980 * C335) * C32190 +
            (C31772 * C625 - C5980 * C620) * C15394 +
            (C31772 * C635 - C5980 * C630) * C32186 +
            (C31772 * C1061 - C5980 * C1052) * C15395 +
            (C31772 * C1079 - C5980 * C1064) * C32176 +
            (C31772 * C1561 - C5980 * C1558) * C15396 +
            (C31772 * C1567 - C5980 * C1564) * C32158) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C15393 +
            (C31772 * C140 - C5980 * C131) * C32190 + (C6057 - C6058) * C15394 +
            (C6059 - C6060) * C32186 + C6077 * C15395 + C6078 * C32176 +
            C6079 * C15396 + C6080 * C32158) *
               C20324 +
           ((C6805 - C6806) * C15393 + (C6807 - C6808) * C32190 +
            C7314 * C15394 + C7315 * C32186 + C6667 * C15395 + C6668 * C32176 +
            C9408 * C15396 + C9409 * C32158) *
               C31963) *
              C31835 * C209 +
          (((C6058 - C6057) * C15393 + (C6060 - C6059) * C32190 +
            (C6062 - C6061) * C15394 + (C6064 - C6063) * C32186 +
            (C6066 - C6065) * C15395 + (C6068 - C6067) * C32176 +
            (C6070 - C6069) * C15396 + (C6072 - C6071) * C32158) *
               C20324 +
           (C7316 * C15393 + C7317 * C32190 + C7318 * C15394 + C7319 * C32186 +
            C9902 * C15395 + C9903 * C32176 + (C6443 - C6444) * C15396 +
            (C6445 - C6446) * C32158) *
               C31963) *
              C31835 * C210 +
          ((C6077 * C15393 + C6078 * C32190 + C6079 * C15394 + C6080 * C32186 +
            C6081 * C15395 + C6082 * C32176 + (C6074 - C6073) * C15396 +
            (C6076 - C6075) * C32158) *
               C20324 +
           (C6667 * C15393 + C6668 * C32190 + C9408 * C15394 + C9409 * C32186 +
            (C6444 - C6443) * C15395 + (C6446 - C6445) * C32176 +
            (C31772 * C6427 - C5980 * C6426) * C15396 +
            (C31772 * C6429 - C5980 * C6428) * C32158) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C7429 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C7423 +
            (C7532 - C7533 + C7534 - C7535) * C7430 +
            (C7536 - C7537 + C7538 - C7539) * C7424 + C7572 * C7431 +
            C7573 * C7425 + C7574 * C7432 + C7575 * C32158) *
               C31876 * C31835 * C440 +
           ((C7533 - C7532 + C7535 - C7534) * C7429 +
            (C7537 - C7536 + C7539 - C7538) * C7423 +
            (C7541 - C7540 + C7543 - C7542) * C7430 +
            (C7545 - C7544 + C7547 - C7546) * C7424 +
            (C7549 - C7548 + C7551 - C7550) * C7431 +
            (C7553 - C7552 + C7555 - C7554) * C7425 +
            (C7556 - C7557 + C7558 - C7559) * C7432 +
            (C7560 - C7561 + C7562 - C7563) * C32158) *
               C31876 * C31835 * C441) *
              C442 +
          (((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                C7429 +
            (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                C7423 +
            (C7804 - C7805 + C7806 - C7807) * C7430 +
            (C7808 - C7809 + C7810 - C7811) * C7424 +
            (C7812 - C7813 + C7814 - C7815) * C7431 +
            (C7816 - C7817 + C7818 - C7819) * C7425 +
            (C7820 - C7821 + C7822 - C7823) * C7432 +
            (C7824 - C7825 + C7826 - C7827) * C32158) *
               C31876 * C31835 * C440 +
           ((C7805 - C7804 + C7807 - C7806) * C7429 +
            (C7809 - C7808 + C7811 - C7810) * C7423 +
            (C7813 - C7812 + C7815 - C7814) * C7430 +
            (C7817 - C7816 + C7819 - C7818) * C7424 +
            (C7821 - C7820 + C7823 - C7822) * C7431 +
            (C7825 - C7824 + C7827 - C7826) * C7425 +
            (C32098 * C883 - C30873 * C874 + C31782 * C884 - C30854 * C875) *
                C7432 +
            (C32098 * C892 - C30873 * C886 + C31782 * C893 - C30854 * C887) *
                C32158) *
               C31876 * C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
             C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
                C2600 +
            (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
             C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
                C32117 +
            (C2701 - C2702 + C2703 - C2704 + C2705 - C2706 + C2707 - C2708) *
                C2601 +
            (C2709 - C2710 + C2711 - C2712 + C2713 - C2714 + C2715 - C2716) *
                C31923) *
               C31876 * C31835 * C440 +
           ((C2702 - C2701 + C2704 - C2703 + C2706 - C2705 + C2708 - C2707) *
                C2600 +
            (C2710 - C2709 + C2712 - C2711 + C2714 - C2713 + C2716 - C2715) *
                C32117 +
            (C2717 - C2718 + C2719 - C2720 + C2721 - C2722 + C2723 - C2724) *
                C2601 +
            (C2725 - C2726 + C2727 - C2728 + C2729 - C2730 + C2731 - C2732) *
                C31923) *
               C31876 * C31835 * C441) *
              C442 +
          (((C2596 * C120 - C2590 * C127 + C2597 * C121 - C2591 * C128 +
             C2598 * C122 - C2592 * C129 + C2599 * C123 - C32152 * C130) *
                C2600 +
            (C2596 * C132 - C2590 * C141 + C2597 * C133 - C2591 * C142 +
             C2598 * C134 - C2592 * C143 + C2599 * C135 - C32152 * C144) *
                C32117 +
            (C2961 - C2962 + C2963 - C2964 + C2965 - C2966 + C2967 - C2968) *
                C2601 +
            (C2969 - C2970 + C2971 - C2972 + C2973 - C2974 + C2975 - C2976) *
                C31923) *
               C31876 * C31835 * C440 +
           ((C2962 - C2961 + C2964 - C2963 + C2966 - C2965 + C2968 - C2967) *
                C2600 +
            (C2970 - C2969 + C2972 - C2971 + C2974 - C2973 + C2976 - C2975) *
                C32117 +
            (C2590 * C234 - C2596 * C219 + C2591 * C235 - C2597 * C220 +
             C2592 * C236 - C2598 * C221 + C32152 * C237 - C2599 * C222) *
                C2601 +
            (C2590 * C249 - C2596 * C239 + C2591 * C250 - C2597 * C240 +
             C2592 * C251 - C2598 * C241 + C32152 * C252 - C2599 * C242) *
                C31923) *
               C31876 * C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                 C2600 +
             (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                 C32117 +
             (C7532 - C7533 + C7534 - C7535) * C2601 +
             (C7536 - C7537 + C7538 - C7539) * C31923) *
                C10013 +
            ((C8556 - C8557 + C8558 - C8559) * C2600 +
             (C8560 - C8561 + C8562 - C8563) * C32117 + C9206 * C2601 +
             C9207 * C31923) *
                C10014 +
            C12501 * C32151) *
               C31835 * C440 +
           (((C7533 - C7532 + C7535 - C7534) * C2600 +
             (C7537 - C7536 + C7539 - C7538) * C32117 +
             (C7541 - C7540 + C7543 - C7542) * C2601 +
             (C7545 - C7544 + C7547 - C7546) * C31923) *
                C10013 +
            (C9208 * C2600 + C9209 * C32117 + C9210 * C2601 + C9211 * C31923) *
                C10014 +
            ((C8572 - C8573 + C8574 - C8575) * C2600 +
             (C8576 - C8577 + C8578 - C8579) * C32117 +
             (C8580 - C8581 + C8582 - C8583) * C2601 +
             (C8584 - C8585 + C8586 - C8587) * C31923) *
                C32151) *
               C31835 * C441) *
              C442 +
          ((((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                 C2600 +
             (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                 C32117 +
             (C7804 - C7805 + C7806 - C7807) * C2601 +
             (C7808 - C7809 + C7810 - C7811) * C31923) *
                C10013 +
            ((C8992 - C8993 + C8994 - C8995) * C2600 +
             (C8996 - C8997 + C8998 - C8999) * C32117 +
             (C8782 - C8783 + C8784 - C8785) * C2601 +
             (C8786 - C8787 + C8788 - C8789) * C31923) *
                C10014 +
            ((C30873 * C324 - C32098 * C339 + C30854 * C325 - C31782 * C340) *
                 C2600 +
             (C30873 * C344 - C32098 * C354 + C30854 * C345 - C31782 * C355) *
                 C32117 +
             (C12696 - C12697 + C12698 - C12699) * C2601 +
             (C12700 - C12701 + C12702 - C12703) * C31923) *
                C32151) *
               C31835 * C440 +
           (((C7805 - C7804 + C7807 - C7806) * C2600 +
             (C7809 - C7808 + C7811 - C7810) * C32117 +
             (C7813 - C7812 + C7815 - C7814) * C2601 +
             (C7817 - C7816 + C7819 - C7818) * C31923) *
                C10013 +
            ((C8783 - C8782 + C8785 - C8784) * C2600 +
             (C8787 - C8786 + C8789 - C8788) * C32117 +
             (C8791 - C8790 + C8793 - C8792) * C2601 +
             (C8795 - C8794 + C8797 - C8796) * C31923) *
                C10014 +
            ((C12697 - C12696 + C12699 - C12698) * C2600 +
             (C12701 - C12700 + C12703 - C12702) * C32117 +
             (C32098 * C1072 - C30873 * C1057 + C31782 * C1073 -
              C30854 * C1058) *
                 C2601 +
             (C32098 * C1084 - C30873 * C1075 + C31782 * C1085 -
              C30854 * C1076) *
                 C31923) *
                C32151) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C7429 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C7423 +
            (C7532 - C7533 + C7534 - C7535) * C7430 +
            (C7536 - C7537 + C7538 - C7539) * C7424 + C7572 * C7431 +
            C7573 * C7425 + C7574 * C7432 + C7575 * C32158) *
               C31876 * C530 +
           ((C30873 * C318 - C32098 * C328 + C30854 * C319 - C31782 * C329) *
                C7429 +
            (C30873 * C333 - C32098 * C348 + C30854 * C334 - C31782 * C349) *
                C7423 +
            (C8088 - C8089 + C8090 - C8091) * C7430 +
            (C8092 - C8093 + C8094 - C8095) * C7424 +
            (C8096 - C8097 + C8098 - C8099) * C7431 +
            (C8100 - C8101 + C8102 - C8103) * C7425 +
            (C8104 - C8105 + C8106 - C8107) * C7432 +
            (C8108 - C8109 + C8110 - C8111) * C32158) *
               C31876 * C531) *
              C440 +
          (((C7533 - C7532 + C7535 - C7534) * C7429 +
            (C7537 - C7536 + C7539 - C7538) * C7423 +
            (C7541 - C7540 + C7543 - C7542) * C7430 +
            (C7545 - C7544 + C7547 - C7546) * C7424 +
            (C7549 - C7548 + C7551 - C7550) * C7431 +
            (C7553 - C7552 + C7555 - C7554) * C7425 +
            (C7556 - C7557 + C7558 - C7559) * C7432 +
            (C7560 - C7561 + C7562 - C7563) * C32158) *
               C31876 * C530 +
           ((C8089 - C8088 + C8091 - C8090) * C7429 +
            (C8093 - C8092 + C8095 - C8094) * C7423 +
            (C8097 - C8096 + C8099 - C8098) * C7430 +
            (C8101 - C8100 + C8103 - C8102) * C7424 +
            (C8105 - C8104 + C8107 - C8106) * C7431 +
            (C8109 - C8108 + C8111 - C8110) * C7425 +
            (C32098 * C6147 - C30873 * C6144 + C31782 * C6341 -
             C30854 * C6340) *
                C7432 +
            (C32098 * C6153 - C30873 * C6148 + C31782 * C6343 -
             C30854 * C6342) *
                C32158) *
               C31876 * C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
             C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
                C2600 +
            (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
             C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
                C32117 +
            (C2701 - C2702 + C2703 - C2704 + C2705 - C2706 + C2707 - C2708) *
                C2601 +
            (C2709 - C2710 + C2711 - C2712 + C2713 - C2714 + C2715 - C2716) *
                C31923) *
               C31876 * C530 +
           ((C2596 * C318 - C2590 * C328 + C2597 * C319 - C2591 * C329 +
             C2598 * C320 - C2592 * C330 + C2599 * C321 - C32152 * C331) *
                C2600 +
            (C2596 * C333 - C2590 * C348 + C2597 * C334 - C2591 * C349 +
             C2598 * C335 - C2592 * C350 + C2599 * C336 - C32152 * C351) *
                C32117 +
            (C3237 - C3238 + C3239 - C3240 + C3241 - C3242 + C3243 - C3244) *
                C2601 +
            (C3245 - C3246 + C3247 - C3248 + C3249 - C3250 + C3251 - C3252) *
                C31923) *
               C31876 * C531) *
              C440 +
          (((C2702 - C2701 + C2704 - C2703 + C2706 - C2705 + C2708 - C2707) *
                C2600 +
            (C2710 - C2709 + C2712 - C2711 + C2714 - C2713 + C2716 - C2715) *
                C32117 +
            (C2717 - C2718 + C2719 - C2720 + C2721 - C2722 + C2723 - C2724) *
                C2601 +
            (C2725 - C2726 + C2727 - C2728 + C2729 - C2730 + C2731 - C2732) *
                C31923) *
               C31876 * C530 +
           ((C3238 - C3237 + C3240 - C3239 + C3242 - C3241 + C3244 - C3243) *
                C2600 +
            (C3246 - C3245 + C3248 - C3247 + C3250 - C3249 + C3252 - C3251) *
                C32117 +
            (C2590 * C1059 - C2596 * C1050 + C2591 * C1060 - C2597 * C1051 +
             C2592 * C1061 - C2598 * C1052 + C32152 * C1407 - C2599 * C1406) *
                C2601 +
            (C2590 * C1077 - C2596 * C1062 + C2591 * C1078 - C2597 * C1063 +
             C2592 * C1079 - C2598 * C1064 + C32152 * C1409 - C2599 * C1408) *
                C31923) *
               C31876 * C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                 C2600 +
             (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                 C32117 +
             (C7532 - C7533 + C7534 - C7535) * C2601 +
             (C7536 - C7537 + C7538 - C7539) * C31923) *
                C10013 +
            ((C8556 - C8557 + C8558 - C8559) * C2600 +
             (C8560 - C8561 + C8562 - C8563) * C32117 + C9206 * C2601 +
             C9207 * C31923) *
                C10014 +
            C12501 * C32151) *
               C530 +
           (((C8557 - C8556 + C8559 - C8558) * C2600 +
             (C8561 - C8560 + C8563 - C8562) * C32117 + C9208 * C2601 +
             C9209 * C31923) *
                C10013 +
            ((C8564 - C8565 + C8566 - C8567) * C2600 +
             (C8568 - C8569 + C8570 - C8571) * C32117 + C13104 * C2601 +
             C13105 * C31923) *
                C10014 +
            ((C12475 - C12476 + C12477 - C12478) * C2600 +
             (C12479 - C12480 + C12481 - C12482) * C32117 +
             (C12483 - C12484 + C12485 - C12486) * C2601 +
             (C12487 - C12488 + C12489 - C12490) * C31923) *
                C32151) *
               C531) *
              C440 +
          ((((C7533 - C7532 + C7535 - C7534) * C2600 +
             (C7537 - C7536 + C7539 - C7538) * C32117 +
             (C7541 - C7540 + C7543 - C7542) * C2601 +
             (C7545 - C7544 + C7547 - C7546) * C31923) *
                C10013 +
            (C9208 * C2600 + C9209 * C32117 + C9210 * C2601 + C9211 * C31923) *
                C10014 +
            (C13104 * C2600 + C13105 * C32117 +
             (C8580 - C8581 + C8582 - C8583) * C2601 +
             (C8584 - C8585 + C8586 - C8587) * C31923) *
                C32151) *
               C530 +
           ((C9206 * C2600 + C9207 * C32117 + C8408 * C2601 + C8409 * C31923) *
                C10013 +
            (C12493 * C2600 + C12494 * C32117 +
             (C8581 - C8580 + C8583 - C8582) * C2601 +
             (C8585 - C8584 + C8587 - C8586) * C31923) *
                C10014 +
            ((C12484 - C12483 + C12486 - C12485) * C2600 +
             (C12488 - C12487 + C12490 - C12489) * C32117 +
             (C32098 * C6795 - C30873 * C6792 + C31782 * C7152 -
              C30854 * C7151) *
                 C2601 +
             (C32098 * C6801 - C30873 * C6796 + C31782 * C7154 -
              C30854 * C7153) *
                 C31923) *
                C32151) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
                C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
                   C2600 +
               (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
                C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
                   C32117 +
               (C2590 * C223 - C2596 * C213 + C2591 * C224 - C2597 * C214 +
                C2592 * C225 - C2598 * C215 + C32152 * C226 - C2599 * C216) *
                   C2601 +
               (C2590 * C243 - C2596 * C228 + C2591 * C244 - C2597 * C229 +
                C2592 * C245 - C2598 * C230 + C32152 * C246 - C2599 * C231) *
                   C31923) *
                  C31876 * C31835 * C31821 * C110 +
              ((C2596 * C120 - C2590 * C127 + C2597 * C121 - C2591 * C128 +
                C2598 * C122 - C2592 * C129 + C2599 * C123 - C32152 * C130) *
                   C2600 +
               (C2596 * C132 - C2590 * C141 + C2597 * C133 - C2591 * C142 +
                C2598 * C134 - C2592 * C143 + C2599 * C135 - C32152 * C144) *
                   C32117 +
               (C2596 * C214 - C2590 * C224 + C2597 * C215 - C2591 * C225 +
                C2598 * C216 - C2592 * C226 + C2599 * C217 - C32152 * C227) *
                   C2601 +
               (C2596 * C229 - C2590 * C244 + C2597 * C230 - C2591 * C245 +
                C2598 * C231 - C2592 * C246 + C2599 * C232 - C32152 * C247) *
                   C31923) *
                  C31876 * C31835 * C31821 * C111 +
              ((C2590 * C128 - C2596 * C121 + C2591 * C129 - C2597 * C122 +
                C2592 * C130 - C2598 * C123 + C32152 * C136 - C2599 * C124) *
                   C2600 +
               (C2590 * C142 - C2596 * C133 + C2591 * C143 - C2597 * C134 +
                C2592 * C144 - C2598 * C135 + C32152 * C145 - C2599 * C137) *
                   C32117 +
               (C2590 * C225 - C2596 * C215 + C2591 * C226 - C2597 * C216 +
                C2592 * C227 - C2598 * C217 + C32152 * C445 - C2599 * C444) *
                   C2601 +
               (C2590 * C245 - C2596 * C230 + C2591 * C246 - C2597 * C231 +
                C2592 * C247 - C2598 * C232 + C32152 * C447 - C2599 * C446) *
                   C31923) *
                  C31876 * C31835 * C31821 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
                C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
                   C2600 +
               (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
                C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
                   C32117 +
               (C2701 - C2702 + C2703 - C2704 + C2705 - C2706 + C2707 - C2708) *
                   C2601 +
               (C2709 - C2710 + C2711 - C2712 + C2713 - C2714 + C2715 - C2716) *
                   C31923) *
                  C31876 * C31835 * C209 +
              ((C2702 - C2701 + C2704 - C2703 + C2706 - C2705 + C2708 - C2707) *
                   C2600 +
               (C2710 - C2709 + C2712 - C2711 + C2714 - C2713 + C2716 - C2715) *
                   C32117 +
               (C2717 - C2718 + C2719 - C2720 + C2721 - C2722 + C2723 - C2724) *
                   C2601 +
               (C2725 - C2726 + C2727 - C2728 + C2729 - C2730 + C2731 - C2732) *
                   C31923) *
                  C31876 * C31835 * C210 +
              ((C2718 - C2717 + C2720 - C2719 + C2722 - C2721 + C2724 - C2723) *
                   C2600 +
               (C2726 - C2725 + C2728 - C2727 + C2730 - C2729 + C2732 - C2731) *
                   C32117 +
               (C2590 * C876 - C2596 * C870 + C2591 * C877 - C2597 * C871 +
                C2592 * C878 - C2598 * C872 + C32152 * C1233 - C2599 * C1232) *
                   C2601 +
               (C2590 * C888 - C2596 * C879 + C2591 * C889 - C2597 * C880 +
                C2592 * C890 - C2598 * C881 + C32152 * C1235 - C2599 * C1234) *
                   C31923) *
                  C31876 * C31835 * C211) *
             C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
            C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
               C2600 +
           (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
            C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
               C32117 +
           (C2701 - C2702 + C2703 - C2704 + C2705 - C2706 + C2707 - C2708) *
               C2601 +
           (C2709 - C2710 + C2711 - C2712 + C2713 - C2714 + C2715 - C2716) *
               C31923) *
              C31876 * C315 +
          ((C2596 * C318 - C2590 * C328 + C2597 * C319 - C2591 * C329 +
            C2598 * C320 - C2592 * C330 + C2599 * C321 - C32152 * C331) *
               C2600 +
           (C2596 * C333 - C2590 * C348 + C2597 * C334 - C2591 * C349 +
            C2598 * C335 - C2592 * C350 + C2599 * C336 - C32152 * C351) *
               C32117 +
           (C2596 * C618 - C2590 * C623 + C2597 * C619 - C2591 * C624 +
            C2598 * C620 - C2592 * C625 + C2599 * C621 - C32152 * C626) *
               C2601 +
           (C2596 * C628 - C2590 * C633 + C2597 * C629 - C2591 * C634 +
            C2598 * C630 - C2592 * C635 + C2599 * C631 - C32152 * C636) *
               C31923) *
              C31876 * C316 +
          ((C2590 * C338 - C2596 * C323 + C2591 * C339 - C2597 * C324 +
            C2592 * C340 - C2598 * C325 + C32152 * C341 - C2599 * C326) *
               C2600 +
           (C2590 * C353 - C2596 * C343 + C2591 * C354 - C2597 * C344 +
            C2592 * C355 - C2598 * C345 + C32152 * C356 - C2599 * C346) *
               C32117 +
           (C2590 * C1065 - C2596 * C1053 + C2591 * C1066 - C2597 * C1054 +
            C2592 * C1067 - C2598 * C1055 + C32152 * C2145 - C2599 * C2144) *
               C2601 +
           (C2590 * C1080 - C2596 * C1068 + C2591 * C1081 - C2597 * C1069 +
            C2592 * C1082 - C2598 * C1070 + C32152 * C2147 - C2599 * C2146) *
               C31923) *
              C31876 * C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
               C7429 +
           (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
               C7423 +
           (C32098 * C223 - C30873 * C213 + C31782 * C224 - C30854 * C214) *
               C7430 +
           (C32098 * C243 - C30873 * C228 + C31782 * C244 - C30854 * C229) *
               C7424 +
           (C32098 * C233 - C30873 * C218 + C31782 * C234 - C30854 * C219) *
               C7431 +
           (C32098 * C248 - C30873 * C238 + C31782 * C249 - C30854 * C239) *
               C7425 +
           (C32098 * C876 - C30873 * C870 + C31782 * C877 - C30854 * C871) *
               C7432 +
           (C32098 * C888 - C30873 * C879 + C31782 * C889 - C30854 * C880) *
               C32158) *
              C31876 * C31835 * C31821 * C110 +
          ((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
               C7429 +
           (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
               C7423 +
           (C30873 * C214 - C32098 * C224 + C30854 * C215 - C31782 * C225) *
               C7430 +
           (C30873 * C229 - C32098 * C244 + C30854 * C230 - C31782 * C245) *
               C7424 +
           (C30873 * C219 - C32098 * C234 + C30854 * C220 - C31782 * C235) *
               C7431 +
           (C30873 * C239 - C32098 * C249 + C30854 * C240 - C31782 * C250) *
               C7425 +
           (C30873 * C871 - C32098 * C877 + C30854 * C872 - C31782 * C878) *
               C7432 +
           (C30873 * C880 - C32098 * C889 + C30854 * C881 - C31782 * C890) *
               C32158) *
              C31876 * C31835 * C31821 * C111 +
          ((C32098 * C128 - C30873 * C121 + C31782 * C129 - C30854 * C122) *
               C7429 +
           (C32098 * C142 - C30873 * C133 + C31782 * C143 - C30854 * C134) *
               C7423 +
           (C32098 * C225 - C30873 * C215 + C31782 * C226 - C30854 * C216) *
               C7430 +
           (C32098 * C245 - C30873 * C230 + C31782 * C246 - C30854 * C231) *
               C7424 +
           (C32098 * C235 - C30873 * C220 + C31782 * C236 - C30854 * C221) *
               C7431 +
           (C32098 * C250 - C30873 * C240 + C31782 * C251 - C30854 * C241) *
               C7425 +
           (C32098 * C878 - C30873 * C872 + C31782 * C1233 - C30854 * C1232) *
               C7432 +
           (C32098 * C890 - C30873 * C881 + C31782 * C1235 - C30854 * C1234) *
               C32158) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
               C7429 +
           (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
               C7423 +
           (C7532 - C7533 + C7534 - C7535) * C7430 +
           (C7536 - C7537 + C7538 - C7539) * C7424 + C7572 * C7431 +
           C7573 * C7425 + C7574 * C7432 + C7575 * C32158) *
              C31876 * C31835 * C209 +
          ((C7533 - C7532 + C7535 - C7534) * C7429 +
           (C7537 - C7536 + C7539 - C7538) * C7423 +
           (C7541 - C7540 + C7543 - C7542) * C7430 +
           (C7545 - C7544 + C7547 - C7546) * C7424 +
           (C7549 - C7548 + C7551 - C7550) * C7431 +
           (C7553 - C7552 + C7555 - C7554) * C7425 +
           (C7556 - C7557 + C7558 - C7559) * C7432 +
           (C7560 - C7561 + C7562 - C7563) * C32158) *
              C31876 * C31835 * C210 +
          (C7572 * C7429 + C7573 * C7423 + C7574 * C7430 + C7575 * C7424 +
           (C7557 - C7556 + C7559 - C7558) * C7431 +
           (C7561 - C7560 + C7563 - C7562) * C7425 +
           (C32098 * C6050 - C30873 * C6048 + C31782 * C6239 - C30854 * C6238) *
               C7432 +
           (C32098 * C6054 - C30873 * C6051 + C31782 * C6241 - C30854 * C6240) *
               C32158) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
               C7429 +
           (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
               C7423 +
           (C7532 - C7533 + C7534 - C7535) * C7430 +
           (C7536 - C7537 + C7538 - C7539) * C7424 + C7572 * C7431 +
           C7573 * C7425 + C7574 * C7432 + C7575 * C32158) *
              C31876 * C315 +
          ((C30873 * C318 - C32098 * C328 + C30854 * C319 - C31782 * C329) *
               C7429 +
           (C30873 * C333 - C32098 * C348 + C30854 * C334 - C31782 * C349) *
               C7423 +
           (C30873 * C618 - C32098 * C623 + C30854 * C619 - C31782 * C624) *
               C7430 +
           (C30873 * C628 - C32098 * C633 + C30854 * C629 - C31782 * C634) *
               C7424 +
           (C30873 * C1050 - C32098 * C1059 + C30854 * C1051 - C31782 * C1060) *
               C7431 +
           (C30873 * C1062 - C32098 * C1077 + C30854 * C1063 - C31782 * C1078) *
               C7425 +
           (C30873 * C1556 - C32098 * C1559 + C30854 * C1557 - C31782 * C1560) *
               C7432 +
           (C30873 * C1562 - C32098 * C1565 + C30854 * C1563 - C31782 * C1566) *
               C32158) *
              C31876 * C316 +
          ((C32098 * C338 - C30873 * C323 + C31782 * C339 - C30854 * C324) *
               C7429 +
           (C32098 * C353 - C30873 * C343 + C31782 * C354 - C30854 * C344) *
               C7423 +
           (C32098 * C1065 - C30873 * C1053 + C31782 * C1066 - C30854 * C1054) *
               C7430 +
           (C32098 * C1080 - C30873 * C1068 + C31782 * C1081 - C30854 * C1069) *
               C7424 +
           (C32098 * C1071 - C30873 * C1056 + C31782 * C1072 - C30854 * C1057) *
               C7431 +
           (C32098 * C1083 - C30873 * C1074 + C31782 * C1084 - C30854 * C1075) *
               C7425 +
           (C32098 * C6149 - C30873 * C6145 + C31782 * C6986 - C30854 * C6985) *
               C7432 +
           (C32098 * C6154 - C30873 * C6150 + C31782 * C6988 - C30854 * C6987) *
               C32158) *
              C31876 * C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C2600 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C32117 +
            (C7532 - C7533 + C7534 - C7535) * C2601 +
            (C7536 - C7537 + C7538 - C7539) * C31923) *
               C10013 +
           ((C8556 - C8557 + C8558 - C8559) * C2600 +
            (C8560 - C8561 + C8562 - C8563) * C32117 + C9206 * C2601 +
            C9207 * C31923) *
               C10014 +
           ((C8565 - C8564 + C8567 - C8566) * C2600 +
            (C8569 - C8568 + C8571 - C8570) * C32117 +
            (C8573 - C8572 + C8575 - C8574) * C2601 +
            (C8577 - C8576 + C8579 - C8578) * C31923) *
               C32151) *
              C31835 * C31821 * C110 +
          (((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                C2600 +
            (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                C32117 +
            (C7804 - C7805 + C7806 - C7807) * C2601 +
            (C7808 - C7809 + C7810 - C7811) * C31923) *
               C10013 +
           ((C8992 - C8993 + C8994 - C8995) * C2600 +
            (C8996 - C8997 + C8998 - C8999) * C32117 +
            (C8782 - C8783 + C8784 - C8785) * C2601 +
            (C8786 - C8787 + C8788 - C8789) * C31923) *
               C10014 +
           ((C30873 * C324 - C32098 * C339 + C30854 * C325 - C31782 * C340) *
                C2600 +
            (C30873 * C344 - C32098 * C354 + C30854 * C345 - C31782 * C355) *
                C32117 +
            (C30873 * C1054 - C32098 * C1066 + C30854 * C1055 -
             C31782 * C1067) *
                C2601 +
            (C30873 * C1069 - C32098 * C1081 + C30854 * C1070 -
             C31782 * C1082) *
                C31923) *
               C32151) *
              C31835 * C31821 * C111 +
          (((C32098 * C128 - C30873 * C121 + C31782 * C129 - C30854 * C122) *
                C2600 +
            (C32098 * C142 - C30873 * C133 + C31782 * C143 - C30854 * C134) *
                C32117 +
            (C32098 * C225 - C30873 * C215 + C31782 * C226 - C30854 * C216) *
                C2601 +
            (C32098 * C245 - C30873 * C230 + C31782 * C246 - C30854 * C231) *
                C31923) *
               C10013 +
           ((C32098 * C330 - C30873 * C320 + C31782 * C331 - C30854 * C321) *
                C2600 +
            (C32098 * C350 - C30873 * C335 + C31782 * C351 - C30854 * C336) *
                C32117 +
            (C32098 * C625 - C30873 * C620 + C31782 * C626 - C30854 * C621) *
                C2601 +
            (C32098 * C635 - C30873 * C630 + C31782 * C636 - C30854 * C631) *
                C31923) *
               C10014 +
           ((C32098 * C340 - C30873 * C325 + C31782 * C341 - C30854 * C326) *
                C2600 +
            (C32098 * C355 - C30873 * C345 + C31782 * C356 - C30854 * C346) *
                C32117 +
            (C32098 * C1067 - C30873 * C1055 + C31782 * C2145 -
             C30854 * C2144) *
                C2601 +
            (C32098 * C1082 - C30873 * C1070 + C31782 * C2147 -
             C30854 * C2146) *
                C31923) *
               C32151) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C2600 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C32117 +
            (C7532 - C7533 + C7534 - C7535) * C2601 +
            (C7536 - C7537 + C7538 - C7539) * C31923) *
               C10013 +
           ((C8556 - C8557 + C8558 - C8559) * C2600 +
            (C8560 - C8561 + C8562 - C8563) * C32117 + C9206 * C2601 +
            C9207 * C31923) *
               C10014 +
           ((C8565 - C8564 + C8567 - C8566) * C2600 +
            (C8569 - C8568 + C8571 - C8570) * C32117 +
            (C8573 - C8572 + C8575 - C8574) * C2601 +
            (C8577 - C8576 + C8579 - C8578) * C31923) *
               C32151) *
              C31835 * C209 +
          (((C7533 - C7532 + C7535 - C7534) * C2600 +
            (C7537 - C7536 + C7539 - C7538) * C32117 +
            (C7541 - C7540 + C7543 - C7542) * C2601 +
            (C7545 - C7544 + C7547 - C7546) * C31923) *
               C10013 +
           (C9208 * C2600 + C9209 * C32117 + C9210 * C2601 + C9211 * C31923) *
               C10014 +
           ((C8572 - C8573 + C8574 - C8575) * C2600 +
            (C8576 - C8577 + C8578 - C8579) * C32117 +
            (C8580 - C8581 + C8582 - C8583) * C2601 +
            (C8584 - C8585 + C8586 - C8587) * C31923) *
               C32151) *
              C31835 * C210 +
          ((C7572 * C2600 + C7573 * C32117 + C7574 * C2601 + C7575 * C31923) *
               C10013 +
           (C8408 * C2600 + C8409 * C32117 +
            (C8105 - C8104 + C8107 - C8106) * C2601 +
            (C8109 - C8108 + C8111 - C8110) * C31923) *
               C10014 +
           ((C8581 - C8580 + C8583 - C8582) * C2600 +
            (C8585 - C8584 + C8587 - C8586) * C32117 +
            (C32098 * C6149 - C30873 * C6145 + C31782 * C6986 -
             C30854 * C6985) *
                C2601 +
            (C32098 * C6154 - C30873 * C6150 + C31782 * C6988 -
             C30854 * C6987) *
                C31923) *
               C32151) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C2600 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C32117 +
            (C7532 - C7533 + C7534 - C7535) * C2601 +
            (C7536 - C7537 + C7538 - C7539) * C31923) *
               C10013 +
           ((C8556 - C8557 + C8558 - C8559) * C2600 +
            (C8560 - C8561 + C8562 - C8563) * C32117 + C9206 * C2601 +
            C9207 * C31923) *
               C10014 +
           C12501 * C32151) *
              C315 +
          (((C8557 - C8556 + C8559 - C8558) * C2600 +
            (C8561 - C8560 + C8563 - C8562) * C32117 + C9208 * C2601 +
            C9209 * C31923) *
               C10013 +
           ((C8564 - C8565 + C8566 - C8567) * C2600 +
            (C8568 - C8569 + C8570 - C8571) * C32117 +
            (C8572 - C8573 + C8574 - C8575) * C2601 +
            (C8576 - C8577 + C8578 - C8579) * C31923) *
               C10014 +
           ((C12475 - C12476 + C12477 - C12478) * C2600 +
            (C12479 - C12480 + C12481 - C12482) * C32117 +
            (C12483 - C12484 + C12485 - C12486) * C2601 +
            (C12487 - C12488 + C12489 - C12490) * C31923) *
               C32151) *
              C316 +
          (C12501 * C10013 +
           ((C12476 - C12475 + C12478 - C12477) * C2600 +
            (C12480 - C12479 + C12482 - C12481) * C32117 +
            (C12484 - C12483 + C12486 - C12485) * C2601 +
            (C12488 - C12487 + C12490 - C12489) * C31923) *
               C10014 +
           ((C32098 * C1937 - C30873 * C1928 + C31782 * C1938 -
             C30854 * C1929) *
                C2600 +
            (C32098 * C1946 - C30873 * C1940 + C31782 * C1947 -
             C30854 * C1941) *
                C32117 +
            (C32098 * C6797 - C30873 * C6793 + C31782 * C11841 -
             C30854 * C11840) *
                C2601 +
            (C32098 * C6802 - C30873 * C6798 + C31782 * C11843 -
             C30854 * C11842) *
                C31923) *
               C32151) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C7429 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C7423 +
            (C7532 - C7533 + C7534 - C7535) * C7430 +
            (C7536 - C7537 + C7538 - C7539) * C7424 + C7572 * C7431 +
            C7573 * C7425 + C7574 * C7432 + C7575 * C32158) *
               C31876 * C530 +
           ((C30873 * C318 - C32098 * C328 + C30854 * C319 - C31782 * C329) *
                C7429 +
            (C30873 * C333 - C32098 * C348 + C30854 * C334 - C31782 * C349) *
                C7423 +
            (C30873 * C618 - C32098 * C623 + C30854 * C619 - C31782 * C624) *
                C7430 +
            (C30873 * C628 - C32098 * C633 + C30854 * C629 - C31782 * C634) *
                C7424 +
            (C30873 * C1050 - C32098 * C1059 + C30854 * C1051 -
             C31782 * C1060) *
                C7431 +
            (C30873 * C1062 - C32098 * C1077 + C30854 * C1063 -
             C31782 * C1078) *
                C7425 +
            (C30873 * C1556 - C32098 * C1559 + C30854 * C1557 -
             C31782 * C1560) *
                C7432 +
            (C30873 * C1562 - C32098 * C1565 + C30854 * C1563 -
             C31782 * C1566) *
                C32158) *
               C31876 * C531) *
              C31821 * C442 +
          (((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                C7429 +
            (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                C7423 +
            (C7804 - C7805 + C7806 - C7807) * C7430 +
            (C7808 - C7809 + C7810 - C7811) * C7424 +
            (C7812 - C7813 + C7814 - C7815) * C7431 +
            (C7816 - C7817 + C7818 - C7819) * C7425 +
            (C7820 - C7821 + C7822 - C7823) * C7432 +
            (C7824 - C7825 + C7826 - C7827) * C32158) *
               C31876 * C530 +
           ((C32098 * C329 - C30873 * C319 + C31782 * C330 - C30854 * C320) *
                C7429 +
            (C32098 * C349 - C30873 * C334 + C31782 * C350 - C30854 * C335) *
                C7423 +
            (C32098 * C624 - C30873 * C619 + C31782 * C625 - C30854 * C620) *
                C7430 +
            (C32098 * C634 - C30873 * C629 + C31782 * C635 - C30854 * C630) *
                C7424 +
            (C32098 * C1060 - C30873 * C1051 + C31782 * C1061 -
             C30854 * C1052) *
                C7431 +
            (C32098 * C1078 - C30873 * C1063 + C31782 * C1079 -
             C30854 * C1064) *
                C7425 +
            (C32098 * C1560 - C30873 * C1557 + C31782 * C1561 -
             C30854 * C1558) *
                C7432 +
            (C32098 * C1566 - C30873 * C1563 + C31782 * C1567 -
             C30854 * C1564) *
                C32158) *
               C31876 * C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
             C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
                C2600 +
            (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
             C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
                C32117 +
            (C2701 - C2702 + C2703 - C2704 + C2705 - C2706 + C2707 - C2708) *
                C2601 +
            (C2709 - C2710 + C2711 - C2712 + C2713 - C2714 + C2715 - C2716) *
                C31923) *
               C31876 * C530 +
           ((C2596 * C318 - C2590 * C328 + C2597 * C319 - C2591 * C329 +
             C2598 * C320 - C2592 * C330 + C2599 * C321 - C32152 * C331) *
                C2600 +
            (C2596 * C333 - C2590 * C348 + C2597 * C334 - C2591 * C349 +
             C2598 * C335 - C2592 * C350 + C2599 * C336 - C32152 * C351) *
                C32117 +
            (C2596 * C618 - C2590 * C623 + C2597 * C619 - C2591 * C624 +
             C2598 * C620 - C2592 * C625 + C2599 * C621 - C32152 * C626) *
                C2601 +
            (C2596 * C628 - C2590 * C633 + C2597 * C629 - C2591 * C634 +
             C2598 * C630 - C2592 * C635 + C2599 * C631 - C32152 * C636) *
                C31923) *
               C31876 * C531) *
              C31821 * C442 +
          (((C2596 * C120 - C2590 * C127 + C2597 * C121 - C2591 * C128 +
             C2598 * C122 - C2592 * C129 + C2599 * C123 - C32152 * C130) *
                C2600 +
            (C2596 * C132 - C2590 * C141 + C2597 * C133 - C2591 * C142 +
             C2598 * C134 - C2592 * C143 + C2599 * C135 - C32152 * C144) *
                C32117 +
            (C2961 - C2962 + C2963 - C2964 + C2965 - C2966 + C2967 - C2968) *
                C2601 +
            (C2969 - C2970 + C2971 - C2972 + C2973 - C2974 + C2975 - C2976) *
                C31923) *
               C31876 * C530 +
           ((C2590 * C329 - C2596 * C319 + C2591 * C330 - C2597 * C320 +
             C2592 * C331 - C2598 * C321 + C32152 * C332 - C2599 * C322) *
                C2600 +
            (C2590 * C349 - C2596 * C334 + C2591 * C350 - C2597 * C335 +
             C2592 * C351 - C2598 * C336 + C32152 * C352 - C2599 * C337) *
                C32117 +
            (C2590 * C624 - C2596 * C619 + C2591 * C625 - C2597 * C620 +
             C2592 * C626 - C2598 * C621 + C32152 * C627 - C2599 * C622) *
                C2601 +
            (C2590 * C634 - C2596 * C629 + C2591 * C635 - C2597 * C630 +
             C2592 * C636 - C2598 * C631 + C32152 * C637 - C2599 * C632) *
                C31923) *
               C31876 * C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                 C2600 +
             (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                 C32117 +
             (C7532 - C7533 + C7534 - C7535) * C2601 +
             (C7536 - C7537 + C7538 - C7539) * C31923) *
                C10013 +
            ((C8556 - C8557 + C8558 - C8559) * C2600 +
             (C8560 - C8561 + C8562 - C8563) * C32117 + C9206 * C2601 +
             C9207 * C31923) *
                C10014 +
            C12501 * C32151) *
               C530 +
           (((C8557 - C8556 + C8559 - C8558) * C2600 +
             (C8561 - C8560 + C8563 - C8562) * C32117 + C9208 * C2601 +
             C9209 * C31923) *
                C10013 +
            ((C8564 - C8565 + C8566 - C8567) * C2600 +
             (C8568 - C8569 + C8570 - C8571) * C32117 +
             (C8572 - C8573 + C8574 - C8575) * C2601 +
             (C8576 - C8577 + C8578 - C8579) * C31923) *
                C10014 +
            ((C12475 - C12476 + C12477 - C12478) * C2600 +
             (C12479 - C12480 + C12481 - C12482) * C32117 +
             (C12483 - C12484 + C12485 - C12486) * C2601 +
             (C12487 - C12488 + C12489 - C12490) * C31923) *
                C32151) *
               C531) *
              C31821 * C442 +
          ((((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                 C2600 +
             (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                 C32117 +
             (C7804 - C7805 + C7806 - C7807) * C2601 +
             (C7808 - C7809 + C7810 - C7811) * C31923) *
                C10013 +
            ((C8992 - C8993 + C8994 - C8995) * C2600 +
             (C8996 - C8997 + C8998 - C8999) * C32117 +
             (C8782 - C8783 + C8784 - C8785) * C2601 +
             (C8786 - C8787 + C8788 - C8789) * C31923) *
                C10014 +
            ((C12898 - C12899 + C12900 - C12901) * C2600 +
             (C12902 - C12903 + C12904 - C12905) * C32117 +
             (C12696 - C12697 + C12698 - C12699) * C2601 +
             (C12700 - C12701 + C12702 - C12703) * C31923) *
                C32151) *
               C530 +
           (((C8993 - C8992 + C8995 - C8994) * C2600 +
             (C8997 - C8996 + C8999 - C8998) * C32117 +
             (C8783 - C8782 + C8785 - C8784) * C2601 +
             (C8787 - C8786 + C8789 - C8788) * C31923) *
                C10013 +
            ((C12899 - C12898 + C12901 - C12900) * C2600 +
             (C12903 - C12902 + C12905 - C12904) * C32117 +
             (C12697 - C12696 + C12699 - C12698) * C2601 +
             (C12701 - C12700 + C12703 - C12702) * C31923) *
                C10014 +
            ((C32098 * C1932 - C30873 * C1926 + C31782 * C1933 -
              C30854 * C1927) *
                 C2600 +
             (C32098 * C1944 - C30873 * C1935 + C31782 * C1945 -
              C30854 * C1936) *
                 C32117 +
             (C32098 * C2472 - C30873 * C2469 + C31782 * C2473 -
              C30854 * C2470) *
                 C2601 +
             (C32098 * C2478 - C30873 * C2475 + C31782 * C2479 -
              C30854 * C2476) *
                 C31923) *
                C32151) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
            C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
               C2600 +
           (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
            C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
               C32117 +
           (C2701 - C2702 + C2703 - C2704 + C2705 - C2706 + C2707 - C2708) *
               C2601 +
           (C2709 - C2710 + C2711 - C2712 + C2713 - C2714 + C2715 - C2716) *
               C31923) *
              C31876 * C31835 * C209 +
          ((C2702 - C2701 + C2704 - C2703 + C2706 - C2705 + C2708 - C2707) *
               C2600 +
           (C2710 - C2709 + C2712 - C2711 + C2714 - C2713 + C2716 - C2715) *
               C32117 +
           (C2717 - C2718 + C2719 - C2720 + C2721 - C2722 + C2723 - C2724) *
               C2601 +
           (C2725 - C2726 + C2727 - C2728 + C2729 - C2730 + C2731 - C2732) *
               C31923) *
              C31876 * C31835 * C210 +
          ((C2718 - C2717 + C2720 - C2719 + C2722 - C2721 + C2724 - C2723) *
               C2600 +
           (C2726 - C2725 + C2728 - C2727 + C2730 - C2729 + C2732 - C2731) *
               C32117 +
           (C2590 * C876 - C2596 * C870 + C2591 * C877 - C2597 * C871 +
            C2592 * C878 - C2598 * C872 + C32152 * C1233 - C2599 * C1232) *
               C2601 +
           (C2590 * C888 - C2596 * C879 + C2591 * C889 - C2597 * C880 +
            C2592 * C890 - C2598 * C881 + C32152 * C1235 - C2599 * C1234) *
               C31923) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
            C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
               C2600 +
           (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
            C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
               C32117 +
           (C2590 * C223 - C2596 * C213 + C2591 * C224 - C2597 * C214 +
            C2592 * C225 - C2598 * C215 + C32152 * C226 - C2599 * C216) *
               C2601 +
           (C2590 * C243 - C2596 * C228 + C2591 * C244 - C2597 * C229 +
            C2592 * C245 - C2598 * C230 + C32152 * C246 - C2599 * C231) *
               C31923) *
              C31876 * C31835 * C31821 * C110 +
          ((C2596 * C120 - C2590 * C127 + C2597 * C121 - C2591 * C128 +
            C2598 * C122 - C2592 * C129 + C2599 * C123 - C32152 * C130) *
               C2600 +
           (C2596 * C132 - C2590 * C141 + C2597 * C133 - C2591 * C142 +
            C2598 * C134 - C2592 * C143 + C2599 * C135 - C32152 * C144) *
               C32117 +
           (C2596 * C214 - C2590 * C224 + C2597 * C215 - C2591 * C225 +
            C2598 * C216 - C2592 * C226 + C2599 * C217 - C32152 * C227) *
               C2601 +
           (C2596 * C229 - C2590 * C244 + C2597 * C230 - C2591 * C245 +
            C2598 * C231 - C2592 * C246 + C2599 * C232 - C32152 * C247) *
               C31923) *
              C31876 * C31835 * C31821 * C111 +
          ((C2590 * C128 - C2596 * C121 + C2591 * C129 - C2597 * C122 +
            C2592 * C130 - C2598 * C123 + C32152 * C136 - C2599 * C124) *
               C2600 +
           (C2590 * C142 - C2596 * C133 + C2591 * C143 - C2597 * C134 +
            C2592 * C144 - C2598 * C135 + C32152 * C145 - C2599 * C137) *
               C32117 +
           (C2590 * C225 - C2596 * C215 + C2591 * C226 - C2597 * C216 +
            C2592 * C227 - C2598 * C217 + C32152 * C445 - C2599 * C444) *
               C2601 +
           (C2590 * C245 - C2596 * C230 + C2591 * C246 - C2597 * C231 +
            C2592 * C247 - C2598 * C232 + C32152 * C447 - C2599 * C446) *
               C31923) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
               C7429 +
           (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
               C7423 +
           (C32098 * C223 - C30873 * C213 + C31782 * C224 - C30854 * C214) *
               C7430 +
           (C32098 * C243 - C30873 * C228 + C31782 * C244 - C30854 * C229) *
               C7424 +
           (C32098 * C233 - C30873 * C218 + C31782 * C234 - C30854 * C219) *
               C7431 +
           (C32098 * C248 - C30873 * C238 + C31782 * C249 - C30854 * C239) *
               C7425 +
           (C32098 * C876 - C30873 * C870 + C31782 * C877 - C30854 * C871) *
               C7432 +
           (C32098 * C888 - C30873 * C879 + C31782 * C889 - C30854 * C880) *
               C32158) *
              C31876 * C31835 * C31821 * C110 +
          ((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
               C7429 +
           (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
               C7423 +
           (C30873 * C214 - C32098 * C224 + C30854 * C215 - C31782 * C225) *
               C7430 +
           (C30873 * C229 - C32098 * C244 + C30854 * C230 - C31782 * C245) *
               C7424 +
           (C30873 * C219 - C32098 * C234 + C30854 * C220 - C31782 * C235) *
               C7431 +
           (C30873 * C239 - C32098 * C249 + C30854 * C240 - C31782 * C250) *
               C7425 +
           (C30873 * C871 - C32098 * C877 + C30854 * C872 - C31782 * C878) *
               C7432 +
           (C30873 * C880 - C32098 * C889 + C30854 * C881 - C31782 * C890) *
               C32158) *
              C31876 * C31835 * C31821 * C111 +
          ((C32098 * C128 - C30873 * C121 + C31782 * C129 - C30854 * C122) *
               C7429 +
           (C32098 * C142 - C30873 * C133 + C31782 * C143 - C30854 * C134) *
               C7423 +
           (C32098 * C225 - C30873 * C215 + C31782 * C226 - C30854 * C216) *
               C7430 +
           (C32098 * C245 - C30873 * C230 + C31782 * C246 - C30854 * C231) *
               C7424 +
           (C32098 * C235 - C30873 * C220 + C31782 * C236 - C30854 * C221) *
               C7431 +
           (C32098 * C250 - C30873 * C240 + C31782 * C251 - C30854 * C241) *
               C7425 +
           (C32098 * C878 - C30873 * C872 + C31782 * C1233 - C30854 * C1232) *
               C7432 +
           (C32098 * C890 - C30873 * C881 + C31782 * C1235 - C30854 * C1234) *
               C32158) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
               C7429 +
           (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
               C7423 +
           (C7532 - C7533 + C7534 - C7535) * C7430 +
           (C7536 - C7537 + C7538 - C7539) * C7424 + C7572 * C7431 +
           C7573 * C7425 + C7574 * C7432 + C7575 * C32158) *
              C31876 * C31835 * C209 +
          ((C7533 - C7532 + C7535 - C7534) * C7429 +
           (C7537 - C7536 + C7539 - C7538) * C7423 +
           (C7541 - C7540 + C7543 - C7542) * C7430 +
           (C7545 - C7544 + C7547 - C7546) * C7424 +
           (C7549 - C7548 + C7551 - C7550) * C7431 +
           (C7553 - C7552 + C7555 - C7554) * C7425 +
           (C7556 - C7557 + C7558 - C7559) * C7432 +
           (C7560 - C7561 + C7562 - C7563) * C32158) *
              C31876 * C31835 * C210 +
          (C7572 * C7429 + C7573 * C7423 + C7574 * C7430 + C7575 * C7424 +
           (C7557 - C7556 + C7559 - C7558) * C7431 +
           (C7561 - C7560 + C7563 - C7562) * C7425 +
           (C32098 * C6050 - C30873 * C6048 + C31782 * C6239 - C30854 * C6238) *
               C7432 +
           (C32098 * C6054 - C30873 * C6051 + C31782 * C6241 - C30854 * C6240) *
               C32158) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C2600 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C32117 +
            (C7532 - C7533 + C7534 - C7535) * C2601 +
            (C7536 - C7537 + C7538 - C7539) * C31923) *
               C10013 +
           ((C8556 - C8557 + C8558 - C8559) * C2600 +
            (C8560 - C8561 + C8562 - C8563) * C32117 + C9206 * C2601 +
            C9207 * C31923) *
               C10014 +
           ((C8565 - C8564 + C8567 - C8566) * C2600 +
            (C8569 - C8568 + C8571 - C8570) * C32117 +
            (C8573 - C8572 + C8575 - C8574) * C2601 +
            (C8577 - C8576 + C8579 - C8578) * C31923) *
               C32151) *
              C31835 * C31821 * C110 +
          (((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                C2600 +
            (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                C32117 +
            (C7804 - C7805 + C7806 - C7807) * C2601 +
            (C7808 - C7809 + C7810 - C7811) * C31923) *
               C10013 +
           ((C8992 - C8993 + C8994 - C8995) * C2600 +
            (C8996 - C8997 + C8998 - C8999) * C32117 +
            (C8782 - C8783 + C8784 - C8785) * C2601 +
            (C8786 - C8787 + C8788 - C8789) * C31923) *
               C10014 +
           ((C30873 * C324 - C32098 * C339 + C30854 * C325 - C31782 * C340) *
                C2600 +
            (C30873 * C344 - C32098 * C354 + C30854 * C345 - C31782 * C355) *
                C32117 +
            (C30873 * C1054 - C32098 * C1066 + C30854 * C1055 -
             C31782 * C1067) *
                C2601 +
            (C30873 * C1069 - C32098 * C1081 + C30854 * C1070 -
             C31782 * C1082) *
                C31923) *
               C32151) *
              C31835 * C31821 * C111 +
          (((C32098 * C128 - C30873 * C121 + C31782 * C129 - C30854 * C122) *
                C2600 +
            (C32098 * C142 - C30873 * C133 + C31782 * C143 - C30854 * C134) *
                C32117 +
            (C32098 * C225 - C30873 * C215 + C31782 * C226 - C30854 * C216) *
                C2601 +
            (C32098 * C245 - C30873 * C230 + C31782 * C246 - C30854 * C231) *
                C31923) *
               C10013 +
           ((C32098 * C330 - C30873 * C320 + C31782 * C331 - C30854 * C321) *
                C2600 +
            (C32098 * C350 - C30873 * C335 + C31782 * C351 - C30854 * C336) *
                C32117 +
            (C32098 * C625 - C30873 * C620 + C31782 * C626 - C30854 * C621) *
                C2601 +
            (C32098 * C635 - C30873 * C630 + C31782 * C636 - C30854 * C631) *
                C31923) *
               C10014 +
           ((C32098 * C340 - C30873 * C325 + C31782 * C341 - C30854 * C326) *
                C2600 +
            (C32098 * C355 - C30873 * C345 + C31782 * C356 - C30854 * C346) *
                C32117 +
            (C32098 * C1067 - C30873 * C1055 + C31782 * C2145 -
             C30854 * C2144) *
                C2601 +
            (C32098 * C1082 - C30873 * C1070 + C31782 * C2147 -
             C30854 * C2146) *
                C31923) *
               C32151) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C2600 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C32117 +
            (C7532 - C7533 + C7534 - C7535) * C2601 +
            (C7536 - C7537 + C7538 - C7539) * C31923) *
               C10013 +
           ((C8556 - C8557 + C8558 - C8559) * C2600 +
            (C8560 - C8561 + C8562 - C8563) * C32117 + C9206 * C2601 +
            C9207 * C31923) *
               C10014 +
           ((C8565 - C8564 + C8567 - C8566) * C2600 +
            (C8569 - C8568 + C8571 - C8570) * C32117 +
            (C8573 - C8572 + C8575 - C8574) * C2601 +
            (C8577 - C8576 + C8579 - C8578) * C31923) *
               C32151) *
              C31835 * C209 +
          (((C7533 - C7532 + C7535 - C7534) * C2600 +
            (C7537 - C7536 + C7539 - C7538) * C32117 +
            (C7541 - C7540 + C7543 - C7542) * C2601 +
            (C7545 - C7544 + C7547 - C7546) * C31923) *
               C10013 +
           (C9208 * C2600 + C9209 * C32117 + C9210 * C2601 + C9211 * C31923) *
               C10014 +
           ((C8572 - C8573 + C8574 - C8575) * C2600 +
            (C8576 - C8577 + C8578 - C8579) * C32117 +
            (C8580 - C8581 + C8582 - C8583) * C2601 +
            (C8584 - C8585 + C8586 - C8587) * C31923) *
               C32151) *
              C31835 * C210 +
          ((C7572 * C2600 + C7573 * C32117 + C7574 * C2601 + C7575 * C31923) *
               C10013 +
           (C8408 * C2600 + C8409 * C32117 +
            (C8105 - C8104 + C8107 - C8106) * C2601 +
            (C8109 - C8108 + C8111 - C8110) * C31923) *
               C10014 +
           ((C8581 - C8580 + C8583 - C8582) * C2600 +
            (C8585 - C8584 + C8587 - C8586) * C32117 +
            (C32098 * C6149 - C30873 * C6145 + C31782 * C6986 -
             C30854 * C6985) *
                C2601 +
            (C32098 * C6154 - C30873 * C6150 + C31782 * C6988 -
             C30854 * C6987) *
                C31923) *
               C32151) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C7429 +
             (C31772 * C140 - C5980 * C131) * C7423 + (C6057 - C6058) * C7430 +
             (C6059 - C6060) * C7424 + C6077 * C7431 + C6078 * C7425 +
             C6079 * C7432 + C6080 * C32158) *
                C32118 +
            ((C6805 - C6806) * C7429 + (C6807 - C6808) * C7423 + C7314 * C7430 +
             C7315 * C7424 + C6667 * C7431 + C6668 * C7425 + C9408 * C7432 +
             C9409 * C32158) *
                C31963) *
               C31835 * C440 +
           (((C6058 - C6057) * C7429 + (C6060 - C6059) * C7423 +
             (C6062 - C6061) * C7430 + (C6064 - C6063) * C7424 +
             (C6066 - C6065) * C7431 + (C6068 - C6067) * C7425 +
             (C6070 - C6069) * C7432 + (C6072 - C6071) * C32158) *
                C32118 +
            (C7316 * C7429 + C7317 * C7423 + C7318 * C7430 + C7319 * C7424 +
             (C6439 - C6440) * C7431 + (C6441 - C6442) * C7425 +
             (C6443 - C6444) * C7432 + (C6445 - C6446) * C32158) *
                C31963) *
               C31835 * C441) *
              C442 +
          ((((C5980 * C120 - C31772 * C127) * C7429 +
             (C5980 * C132 - C31772 * C141) * C7423 + (C6243 - C6244) * C7430 +
             (C6245 - C6246) * C7424 + (C6247 - C6248) * C7431 +
             (C6249 - C6250) * C7425 + (C6251 - C6252) * C7432 +
             (C6253 - C6254) * C32158) *
                C32118 +
            ((C7156 - C7157) * C7429 + (C7158 - C7159) * C7423 +
             (C6990 - C6991) * C7430 + (C6992 - C6993) * C7424 +
             (C6994 - C6995) * C7431 + (C6996 - C6997) * C7425 +
             (C9638 - C9639) * C7432 + (C9640 - C9641) * C32158) *
                C31963) *
               C31835 * C440 +
           (((C6244 - C6243) * C7429 + (C6246 - C6245) * C7423 +
             (C6248 - C6247) * C7430 + (C6250 - C6249) * C7424 +
             (C6252 - C6251) * C7431 + (C6254 - C6253) * C7425 +
             (C6256 - C6255) * C7432 + (C6258 - C6257) * C32158) *
                C32118 +
            ((C6991 - C6990) * C7429 + (C6993 - C6992) * C7423 +
             (C6995 - C6994) * C7430 + (C6997 - C6996) * C7424 +
             (C9639 - C9638) * C7431 + (C9641 - C9640) * C7425 +
             (C31772 * C6341 - C5980 * C6340) * C7432 +
             (C31772 * C6343 - C5980 * C6342) * C32158) *
                C31963) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
              C32137 * C128 - C756 * C121) *
                 C2600 +
             (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
              C32137 * C142 - C756 * C133) *
                 C32117 +
             (C895 - C896 + C897 - C898 + C899 - C900) * C2601 +
             (C901 - C902 + C903 - C904 + C905 - C906) * C31923) *
                C32118 +
            ((C1950 - C1951 + C1952 - C1953 + C1954 - C1955) * C2600 +
             (C1956 - C1957 + C1958 - C1959 + C1960 - C1961) * C32117 +
             (C1570 - C1569 + C1572 - C1571 + C1574 - C1573) * C2601 +
             (C1576 - C1575 + C1578 - C1577 + C1580 - C1579) * C31923) *
                C31963) *
               C31835 * C440 +
           (((C896 - C895 + C898 - C897 + C900 - C899) * C2600 +
             (C902 - C901 + C904 - C903 + C906 - C905) * C32117 +
             (C908 - C907 + C910 - C909 + C912 - C911) * C2601 +
             (C914 - C913 + C916 - C915 + C918 - C917) * C31923) *
                C32118 +
            ((C1569 - C1570 + C1571 - C1572 + C1573 - C1574) * C2600 +
             (C1575 - C1576 + C1577 - C1578 + C1579 - C1580) * C32117 +
             (C1581 - C1582 + C1583 - C1584 + C1585 - C1586) * C2601 +
             (C1587 - C1588 + C1589 - C1590 + C1591 - C1592) * C31923) *
                C31963) *
               C31835 * C441) *
              C442 +
          ((((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
              C756 * C122 - C32137 * C129) *
                 C2600 +
             (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
              C756 * C134 - C32137 * C143) *
                 C32117 +
             (C1237 - C1238 + C1239 - C1240 + C1241 - C1242) * C2601 +
             (C1243 - C1244 + C1245 - C1246 + C1247 - C1248) * C31923) *
                C32118 +
            ((C2299 - C2300 + C2301 - C2302 + C2303 - C2304) * C2600 +
             (C2305 - C2306 + C2307 - C2308 + C2309 - C2310) * C32117 +
             (C4619 - C4620 + C4621 - C4622 + C4623 - C4624) * C2601 +
             (C4625 - C4626 + C4627 - C4628 + C4629 - C4630) * C31923) *
                C31963) *
               C31835 * C440 +
           (((C1238 - C1237 + C1240 - C1239 + C1242 - C1241) * C2600 +
             (C1244 - C1243 + C1246 - C1245 + C1248 - C1247) * C32117 +
             (C1250 - C1249 + C1252 - C1251 + C1254 - C1253) * C2601 +
             (C1256 - C1255 + C1258 - C1257 + C1260 - C1259) * C31923) *
                C32118 +
            ((C4620 - C4619 + C4622 - C4621 + C4624 - C4623) * C2600 +
             (C4626 - C4625 + C4628 - C4627 + C4630 - C4629) * C32117 +
             (C748 * C1060 - C754 * C1051 + C749 * C1061 - C755 * C1052 +
              C32137 * C1407 - C756 * C1406) *
                 C2601 +
             (C748 * C1078 - C754 * C1063 + C749 * C1079 - C755 * C1064 +
              C32137 * C1409 - C756 * C1408) *
                 C31923) *
                C31963) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C2600 +
             (C31772 * C140 - C5980 * C131) * C32117 + (C6057 - C6058) * C2601 +
             (C6059 - C6060) * C31923) *
                C13203 +
            ((C6805 - C6806) * C2600 + (C6807 - C6808) * C32117 +
             C7314 * C2601 + C7315 * C31923) *
                C13204 +
            C14130 * C13205 + C14131 * C32164) *
               C31835 * C440 +
           (((C6058 - C6057) * C2600 + (C6060 - C6059) * C32117 +
             (C6062 - C6061) * C2601 + (C6064 - C6063) * C31923) *
                C13203 +
            (C7316 * C2600 + C7317 * C32117 + C7318 * C2601 + C7319 * C31923) *
                C13204 +
            (C7320 * C2600 + C7321 * C32117 + C7322 * C2601 + C7323 * C31923) *
                C13205 +
            ((C6821 - C6822) * C2600 + (C6823 - C6824) * C32117 +
             (C6825 - C6826) * C2601 + (C6827 - C6828) * C31923) *
                C32164) *
               C31835 * C441) *
              C442 +
          ((((C5980 * C120 - C31772 * C127) * C2600 +
             (C5980 * C132 - C31772 * C141) * C32117 + (C6243 - C6244) * C2601 +
             (C6245 - C6246) * C31923) *
                C13203 +
            ((C7156 - C7157) * C2600 + (C7158 - C7159) * C32117 +
             (C6990 - C6991) * C2601 + (C6992 - C6993) * C31923) *
                C13204 +
            ((C7160 - C7161) * C2600 + (C7162 - C7163) * C32117 +
             (C6998 - C6999) * C2601 + (C7000 - C7001) * C31923) *
                C13205 +
            ((C11931 - C11932) * C2600 + (C11933 - C11934) * C32117 +
             (C14262 - C14263) * C2601 + (C14264 - C14265) * C31923) *
                C32164) *
               C31835 * C440 +
           (((C6244 - C6243) * C2600 + (C6246 - C6245) * C32117 +
             (C6248 - C6247) * C2601 + (C6250 - C6249) * C31923) *
                C13203 +
            ((C6991 - C6990) * C2600 + (C6993 - C6992) * C32117 +
             (C6995 - C6994) * C2601 + (C6997 - C6996) * C31923) *
                C13204 +
            ((C6999 - C6998) * C2600 + (C7001 - C7000) * C32117 +
             (C7003 - C7002) * C2601 + (C7005 - C7004) * C31923) *
                C13205 +
            ((C14263 - C14262) * C2600 + (C14265 - C14264) * C32117 +
             (C31772 * C7152 - C5980 * C7151) * C2601 +
             (C31772 * C7154 - C5980 * C7153) * C31923) *
                C32164) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C7429 +
             (C31772 * C140 - C5980 * C131) * C7423 + (C6057 - C6058) * C7430 +
             (C6059 - C6060) * C7424 + C6077 * C7431 + C6078 * C7425 +
             C6079 * C7432 + C6080 * C32158) *
                C32118 +
            ((C6805 - C6806) * C7429 + (C6807 - C6808) * C7423 + C7314 * C7430 +
             C7315 * C7424 + C6667 * C7431 + C6668 * C7425 + C9408 * C7432 +
             C9409 * C32158) *
                C31963) *
               C530 +
           (((C6806 - C6805) * C7429 + (C6808 - C6807) * C7423 + C7316 * C7430 +
             C7317 * C7424 + C7318 * C7431 + C7319 * C7425 + C9902 * C7432 +
             C9903 * C32158) *
                C32118 +
            ((C6810 - C6809) * C7429 + (C6812 - C6811) * C7423 + C7320 * C7430 +
             C7321 * C7424 + C7322 * C7431 + C7323 * C7425 +
             (C6677 - C6678) * C7432 + (C6679 - C6680) * C32158) *
                C31963) *
               C531) *
              C440 +
          ((((C6058 - C6057) * C7429 + (C6060 - C6059) * C7423 +
             (C6062 - C6061) * C7430 + (C6064 - C6063) * C7424 +
             (C6066 - C6065) * C7431 + (C6068 - C6067) * C7425 +
             (C6070 - C6069) * C7432 + (C6072 - C6071) * C32158) *
                C32118 +
            (C7316 * C7429 + C7317 * C7423 + C7318 * C7430 + C7319 * C7424 +
             C9902 * C7431 + C9903 * C7425 + (C6443 - C6444) * C7432 +
             (C6445 - C6446) * C32158) *
                C31963) *
               C530 +
           ((C7314 * C7429 + C7315 * C7423 + C6667 * C7430 + C6668 * C7424 +
             C9408 * C7431 + C9409 * C7425 + (C6444 - C6443) * C7432 +
             (C6446 - C6445) * C32158) *
                C32118 +
            (C6813 * C7429 + C6814 * C7423 + C6681 * C7430 + C6682 * C7424 +
             (C6678 - C6677) * C7431 + (C6680 - C6679) * C7425 +
             (C31772 * C6151 - C5980 * C6146) * C7432 +
             (C31772 * C6155 - C5980 * C6152) * C32158) *
                C31963) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
              C32137 * C128 - C756 * C121) *
                 C2600 +
             (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
              C32137 * C142 - C756 * C133) *
                 C32117 +
             (C895 - C896 + C897 - C898 + C899 - C900) * C2601 +
             (C901 - C902 + C903 - C904 + C905 - C906) * C31923) *
                C32118 +
            ((C1950 - C1951 + C1952 - C1953 + C1954 - C1955) * C2600 +
             (C1956 - C1957 + C1958 - C1959 + C1960 - C1961) * C32117 +
             C5035 * C2601 + C5036 * C31923) *
                C31963) *
               C530 +
           (((C1951 - C1950 + C1953 - C1952 + C1955 - C1954) * C2600 +
             (C1957 - C1956 + C1959 - C1958 + C1961 - C1960) * C32117 +
             C5037 * C2601 + C5038 * C31923) *
                C32118 +
            ((C1963 - C1962 + C1965 - C1964 + C1967 - C1966) * C2600 +
             (C1969 - C1968 + C1971 - C1970 + C1973 - C1972) * C32117 +
             (C2481 - C2482 + C2483 - C2484 + C2485 - C2486) * C2601 +
             (C2487 - C2488 + C2489 - C2490 + C2491 - C2492) * C31923) *
                C31963) *
               C531) *
              C440 +
          ((((C896 - C895 + C898 - C897 + C900 - C899) * C2600 +
             (C902 - C901 + C904 - C903 + C906 - C905) * C32117 +
             (C908 - C907 + C910 - C909 + C912 - C911) * C2601 +
             (C914 - C913 + C916 - C915 + C918 - C917) * C31923) *
                C32118 +
            (C5037 * C2600 + C5038 * C32117 +
             (C1581 - C1582 + C1583 - C1584 + C1585 - C1586) * C2601 +
             (C1587 - C1588 + C1589 - C1590 + C1591 - C1592) * C31923) *
                C31963) *
               C530 +
           ((C5035 * C2600 + C5036 * C32117 +
             (C1582 - C1581 + C1584 - C1583 + C1586 - C1585) * C2601 +
             (C1588 - C1587 + C1590 - C1589 + C1592 - C1591) * C31923) *
                C32118 +
            ((C2482 - C2481 + C2484 - C2483 + C2486 - C2485) * C2600 +
             (C2488 - C2487 + C2490 - C2489 + C2492 - C2491) * C32117 +
             (C748 * C1071 - C754 * C1056 + C749 * C1072 - C755 * C1057 +
              C32137 * C1073 - C756 * C1058) *
                 C2601 +
             (C748 * C1083 - C754 * C1074 + C749 * C1084 - C755 * C1075 +
              C32137 * C1085 - C756 * C1076) *
                 C31923) *
                C31963) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C2600 +
             (C31772 * C140 - C5980 * C131) * C32117 + (C6057 - C6058) * C2601 +
             (C6059 - C6060) * C31923) *
                C13203 +
            ((C6805 - C6806) * C2600 + (C6807 - C6808) * C32117 +
             C7314 * C2601 + C7315 * C31923) *
                C13204 +
            C14130 * C13205 + C14131 * C32164) *
               C530 +
           (((C6806 - C6805) * C2600 + (C6808 - C6807) * C32117 +
             C7316 * C2601 + C7317 * C31923) *
                C13203 +
            ((C6810 - C6809) * C2600 + (C6812 - C6811) * C32117 +
             C7320 * C2601 + C7321 * C31923) *
                C13204 +
            ((C6817 - C6818) * C2600 + (C6819 - C6820) * C32117 +
             C14526 * C2601 + C14527 * C31923) *
                C13205 +
            ((C11743 - C11742) * C2600 + (C11745 - C11744) * C32117 +
             (C12025 - C12026) * C2601 + (C12027 - C12028) * C31923) *
                C32164) *
               C531) *
              C440 +
          ((((C6058 - C6057) * C2600 + (C6060 - C6059) * C32117 +
             (C6062 - C6061) * C2601 + (C6064 - C6063) * C31923) *
                C13203 +
            (C7316 * C2600 + C7317 * C32117 + C7318 * C2601 + C7319 * C31923) *
                C13204 +
            (C7320 * C2600 + C7321 * C32117 + C7322 * C2601 + C7323 * C31923) *
                C13205 +
            (C14526 * C2600 + C14527 * C32117 + (C6825 - C6826) * C2601 +
             (C6827 - C6828) * C31923) *
                C32164) *
               C530 +
           ((C7314 * C2600 + C7315 * C32117 + C6667 * C2601 + C6668 * C31923) *
                C13203 +
            (C6813 * C2600 + C6814 * C32117 + C6681 * C2601 + C6682 * C31923) *
                C13204 +
            (C14122 * C2600 + C14123 * C32117 + (C6826 - C6825) * C2601 +
             (C6828 - C6827) * C31923) *
                C13205 +
            ((C12026 - C12025) * C2600 + (C12028 - C12027) * C32117 +
             (C31772 * C6799 - C5980 * C6794) * C2601 +
             (C31772 * C6803 - C5980 * C6800) * C31923) *
                C32164) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
                 C32137 * C128 - C756 * C121) *
                    C2600 +
                (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
                 C32137 * C142 - C756 * C133) *
                    C32117 +
                (C895 - C896 + C897 - C898 + C899 - C900) * C2601 +
                (C901 - C902 + C903 - C904 + C905 - C906) * C31923) *
                   C32118 +
               ((C1950 - C1951 + C1952 - C1953 + C1954 - C1955) * C2600 +
                (C1956 - C1957 + C1958 - C1959 + C1960 - C1961) * C32117 +
                (C1570 - C1569 + C1572 - C1571 + C1574 - C1573) * C2601 +
                (C1576 - C1575 + C1578 - C1577 + C1580 - C1579) * C31923) *
                   C31963) *
                  C31835 * C31821 * C110 +
              (((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
                 C756 * C122 - C32137 * C129) *
                    C2600 +
                (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
                 C756 * C134 - C32137 * C143) *
                    C32117 +
                (C1237 - C1238 + C1239 - C1240 + C1241 - C1242) * C2601 +
                (C1243 - C1244 + C1245 - C1246 + C1247 - C1248) * C31923) *
                   C32118 +
               ((C2299 - C2300 + C2301 - C2302 + C2303 - C2304) * C2600 +
                (C2305 - C2306 + C2307 - C2308 + C2309 - C2310) * C32117 +
                (C754 * C619 - C748 * C624 + C755 * C620 - C749 * C625 +
                 C756 * C621 - C32137 * C626) *
                    C2601 +
                (C754 * C629 - C748 * C634 + C755 * C630 - C749 * C635 +
                 C756 * C631 - C32137 * C636) *
                    C31923) *
                   C31963) *
                  C31835 * C31821 * C111 +
              (((C748 * C128 - C754 * C121 + C749 * C129 - C755 * C122 +
                 C32137 * C130 - C756 * C123) *
                    C2600 +
                (C748 * C142 - C754 * C133 + C749 * C143 - C755 * C134 +
                 C32137 * C144 - C756 * C135) *
                    C32117 +
                (C748 * C225 - C754 * C215 + C749 * C226 - C755 * C216 +
                 C32137 * C227 - C756 * C217) *
                    C2601 +
                (C748 * C245 - C754 * C230 + C749 * C246 - C755 * C231 +
                 C32137 * C247 - C756 * C232) *
                    C31923) *
                   C32118 +
               ((C748 * C330 - C754 * C320 + C749 * C331 - C755 * C321 +
                 C32137 * C332 - C756 * C322) *
                    C2600 +
                (C748 * C350 - C754 * C335 + C749 * C351 - C755 * C336 +
                 C32137 * C352 - C756 * C337) *
                    C32117 +
                (C748 * C625 - C754 * C620 + C749 * C626 - C755 * C621 +
                 C32137 * C627 - C756 * C622) *
                    C2601 +
                (C748 * C635 - C754 * C630 + C749 * C636 - C755 * C631 +
                 C32137 * C637 - C756 * C632) *
                    C31923) *
                   C31963) *
                  C31835 * C31821 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
                 C32137 * C128 - C756 * C121) *
                    C2600 +
                (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
                 C32137 * C142 - C756 * C133) *
                    C32117 +
                (C895 - C896 + C897 - C898 + C899 - C900) * C2601 +
                (C901 - C902 + C903 - C904 + C905 - C906) * C31923) *
                   C32118 +
               ((C1950 - C1951 + C1952 - C1953 + C1954 - C1955) * C2600 +
                (C1956 - C1957 + C1958 - C1959 + C1960 - C1961) * C32117 +
                (C1570 - C1569 + C1572 - C1571 + C1574 - C1573) * C2601 +
                (C1576 - C1575 + C1578 - C1577 + C1580 - C1579) * C31923) *
                   C31963) *
                  C31835 * C209 +
              (((C896 - C895 + C898 - C897 + C900 - C899) * C2600 +
                (C902 - C901 + C904 - C903 + C906 - C905) * C32117 +
                (C908 - C907 + C910 - C909 + C912 - C911) * C2601 +
                (C914 - C913 + C916 - C915 + C918 - C917) * C31923) *
                   C32118 +
               ((C1569 - C1570 + C1571 - C1572 + C1573 - C1574) * C2600 +
                (C1575 - C1576 + C1577 - C1578 + C1579 - C1580) * C32117 +
                (C1581 - C1582 + C1583 - C1584 + C1585 - C1586) * C2601 +
                (C1587 - C1588 + C1589 - C1590 + C1591 - C1592) * C31923) *
                   C31963) *
                  C31835 * C210 +
              ((C939 * C2600 + C940 * C32117 +
                (C920 - C919 + C922 - C921 + C924 - C923) * C2601 +
                (C926 - C925 + C928 - C927 + C930 - C929) * C31923) *
                   C32118 +
               ((C1582 - C1581 + C1584 - C1583 + C1586 - C1585) * C2600 +
                (C1588 - C1587 + C1590 - C1589 + C1592 - C1591) * C32117 +
                (C748 * C1559 - C754 * C1556 + C749 * C1560 - C755 * C1557 +
                 C32137 * C1561 - C756 * C1558) *
                    C2601 +
                (C748 * C1565 - C754 * C1562 + C749 * C1566 - C755 * C1563 +
                 C32137 * C1567 - C756 * C1564) *
                    C31923) *
                   C31963) *
                  C31835 * C211) *
             C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
             C32137 * C128 - C756 * C121) *
                C2600 +
            (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
             C32137 * C142 - C756 * C133) *
                C32117 +
            (C895 - C896 + C897 - C898 + C899 - C900) * C2601 +
            (C901 - C902 + C903 - C904 + C905 - C906) * C31923) *
               C32118 +
           ((C1950 - C1951 + C1952 - C1953 + C1954 - C1955) * C2600 +
            (C1956 - C1957 + C1958 - C1959 + C1960 - C1961) * C32117 +
            (C1570 - C1569 + C1572 - C1571 + C1574 - C1573) * C2601 +
            (C1576 - C1575 + C1578 - C1577 + C1580 - C1579) * C31923) *
               C31963) *
              C315 +
          (((C1951 - C1950 + C1953 - C1952 + C1955 - C1954) * C2600 +
            (C1957 - C1956 + C1959 - C1958 + C1961 - C1960) * C32117 +
            (C1569 - C1570 + C1571 - C1572 + C1573 - C1574) * C2601 +
            (C1575 - C1576 + C1577 - C1578 + C1579 - C1580) * C31923) *
               C32118 +
           ((C1963 - C1962 + C1965 - C1964 + C1967 - C1966) * C2600 +
            (C1969 - C1968 + C1971 - C1970 + C1973 - C1972) * C32117 +
            (C2481 - C2482 + C2483 - C2484 + C2485 - C2486) * C2601 +
            (C2487 - C2488 + C2489 - C2490 + C2491 - C2492) * C31923) *
               C31963) *
              C316 +
          ((C1994 * C2600 + C1995 * C32117 +
            (C2482 - C2481 + C2484 - C2483 + C2486 - C2485) * C2601 +
            (C2488 - C2487 + C2490 - C2489 + C2492 - C2491) * C31923) *
               C32118 +
           ((C1975 - C1974 + C1977 - C1976 + C1979 - C1978) * C2600 +
            (C1981 - C1980 + C1983 - C1982 + C1985 - C1984) * C32117 +
            (C748 * C2471 - C754 * C2468 + C749 * C2472 - C755 * C2469 +
             C32137 * C2473 - C756 * C2470) *
                C2601 +
            (C748 * C2477 - C754 * C2474 + C749 * C2478 - C755 * C2475 +
             C32137 * C2479 - C756 * C2476) *
                C31923) *
               C31963) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C7429 +
            (C31772 * C140 - C5980 * C131) * C7423 + (C6057 - C6058) * C7430 +
            (C6059 - C6060) * C7424 + C6077 * C7431 + C6078 * C7425 +
            C6079 * C7432 + C6080 * C32158) *
               C32118 +
           ((C6805 - C6806) * C7429 + (C6807 - C6808) * C7423 + C7314 * C7430 +
            C7315 * C7424 + C6667 * C7431 + C6668 * C7425 +
            (C6440 - C6439) * C7432 + (C6442 - C6441) * C32158) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C5980 * C120 - C31772 * C127) * C7429 +
            (C5980 * C132 - C31772 * C141) * C7423 + (C6243 - C6244) * C7430 +
            (C6245 - C6246) * C7424 + (C6247 - C6248) * C7431 +
            (C6249 - C6250) * C7425 + (C6251 - C6252) * C7432 +
            (C6253 - C6254) * C32158) *
               C32118 +
           ((C7156 - C7157) * C7429 + (C7158 - C7159) * C7423 +
            (C6990 - C6991) * C7430 + (C6992 - C6993) * C7424 +
            (C6994 - C6995) * C7431 + (C6996 - C6997) * C7425 +
            (C5980 * C1557 - C31772 * C1560) * C7432 +
            (C5980 * C1563 - C31772 * C1566) * C32158) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C31772 * C128 - C5980 * C121) * C7429 +
            (C31772 * C142 - C5980 * C133) * C7423 +
            (C31772 * C225 - C5980 * C215) * C7430 +
            (C31772 * C245 - C5980 * C230) * C7424 +
            (C31772 * C235 - C5980 * C220) * C7431 +
            (C31772 * C250 - C5980 * C240) * C7425 +
            (C31772 * C878 - C5980 * C872) * C7432 +
            (C31772 * C890 - C5980 * C881) * C32158) *
               C32118 +
           ((C31772 * C330 - C5980 * C320) * C7429 +
            (C31772 * C350 - C5980 * C335) * C7423 +
            (C31772 * C625 - C5980 * C620) * C7430 +
            (C31772 * C635 - C5980 * C630) * C7424 +
            (C31772 * C1061 - C5980 * C1052) * C7431 +
            (C31772 * C1079 - C5980 * C1064) * C7425 +
            (C31772 * C1561 - C5980 * C1558) * C7432 +
            (C31772 * C1567 - C5980 * C1564) * C32158) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C7429 +
            (C31772 * C140 - C5980 * C131) * C7423 + (C6057 - C6058) * C7430 +
            (C6059 - C6060) * C7424 + C6077 * C7431 + C6078 * C7425 +
            C6079 * C7432 + C6080 * C32158) *
               C32118 +
           ((C6805 - C6806) * C7429 + (C6807 - C6808) * C7423 + C7314 * C7430 +
            C7315 * C7424 + C6667 * C7431 + C6668 * C7425 + C9408 * C7432 +
            C9409 * C32158) *
               C31963) *
              C31835 * C209 +
          (((C6058 - C6057) * C7429 + (C6060 - C6059) * C7423 +
            (C6062 - C6061) * C7430 + (C6064 - C6063) * C7424 +
            (C6066 - C6065) * C7431 + (C6068 - C6067) * C7425 +
            (C6070 - C6069) * C7432 + (C6072 - C6071) * C32158) *
               C32118 +
           (C7316 * C7429 + C7317 * C7423 + C7318 * C7430 + C7319 * C7424 +
            (C6439 - C6440) * C7431 + (C6441 - C6442) * C7425 +
            (C6443 - C6444) * C7432 + (C6445 - C6446) * C32158) *
               C31963) *
              C31835 * C210 +
          ((C6077 * C7429 + C6078 * C7423 + C6079 * C7430 + C6080 * C7424 +
            C6081 * C7431 + C6082 * C7425 + (C6074 - C6073) * C7432 +
            (C6076 - C6075) * C32158) *
               C32118 +
           (C6667 * C7429 + C6668 * C7423 + C9408 * C7430 + C9409 * C7424 +
            (C6444 - C6443) * C7431 + (C6446 - C6445) * C7425 +
            (C31772 * C6427 - C5980 * C6426) * C7432 +
            (C31772 * C6429 - C5980 * C6428) * C32158) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C7429 +
            (C31772 * C140 - C5980 * C131) * C7423 + (C6057 - C6058) * C7430 +
            (C6059 - C6060) * C7424 + C6077 * C7431 + C6078 * C7425 +
            C6079 * C7432 + C6080 * C32158) *
               C32118 +
           ((C6805 - C6806) * C7429 + (C6807 - C6808) * C7423 + C7314 * C7430 +
            C7315 * C7424 + C6667 * C7431 + C6668 * C7425 + C9408 * C7432 +
            C9409 * C32158) *
               C31963) *
              C315 +
          (((C6806 - C6805) * C7429 + (C6808 - C6807) * C7423 + C7316 * C7430 +
            C7317 * C7424 + C7318 * C7431 + C7319 * C7425 +
            (C6439 - C6440) * C7432 + (C6441 - C6442) * C32158) *
               C32118 +
           ((C6810 - C6809) * C7429 + (C6812 - C6811) * C7423 + C7320 * C7430 +
            C7321 * C7424 + C7322 * C7431 + C7323 * C7425 +
            (C6677 - C6678) * C7432 + (C6679 - C6680) * C32158) *
               C31963) *
              C316 +
          ((C6829 * C7429 + C6830 * C7423 + C6813 * C7430 + C6814 * C7424 +
            C6681 * C7431 + C6682 * C7425 + (C6678 - C6677) * C7432 +
            (C6680 - C6679) * C32158) *
               C32118 +
           ((C6818 - C6817) * C7429 + (C6820 - C6819) * C7423 +
            (C6822 - C6821) * C7430 + (C6824 - C6823) * C7424 +
            (C6826 - C6825) * C7431 + (C6828 - C6827) * C7425 +
            (C31772 * C7310 - C5980 * C7309) * C7432 +
            (C31772 * C7312 - C5980 * C7311) * C32158) *
               C31963) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C2600 +
            (C31772 * C140 - C5980 * C131) * C32117 + (C6057 - C6058) * C2601 +
            (C6059 - C6060) * C31923) *
               C13203 +
           ((C6805 - C6806) * C2600 + (C6807 - C6808) * C32117 + C7314 * C2601 +
            C7315 * C31923) *
               C13204 +
           (C6829 * C2600 + C6830 * C32117 + C6813 * C2601 + C6814 * C31923) *
               C13205 +
           (C11740 * C2600 + C11741 * C32117 + (C6822 - C6821) * C2601 +
            (C6824 - C6823) * C31923) *
               C32164) *
              C31835 * C31821 * C110 +
          (((C5980 * C120 - C31772 * C127) * C2600 +
            (C5980 * C132 - C31772 * C141) * C32117 + (C6243 - C6244) * C2601 +
            (C6245 - C6246) * C31923) *
               C13203 +
           ((C7156 - C7157) * C2600 + (C7158 - C7159) * C32117 +
            (C6990 - C6991) * C2601 + (C6992 - C6993) * C31923) *
               C13204 +
           ((C7160 - C7161) * C2600 + (C7162 - C7163) * C32117 +
            (C6998 - C6999) * C2601 + (C7000 - C7001) * C31923) *
               C13205 +
           ((C11931 - C11932) * C2600 + (C11933 - C11934) * C32117 +
            (C5980 * C2469 - C31772 * C2472) * C2601 +
            (C5980 * C2475 - C31772 * C2478) * C31923) *
               C32164) *
              C31835 * C31821 * C111 +
          (((C31772 * C128 - C5980 * C121) * C2600 +
            (C31772 * C142 - C5980 * C133) * C32117 +
            (C31772 * C225 - C5980 * C215) * C2601 +
            (C31772 * C245 - C5980 * C230) * C31923) *
               C13203 +
           ((C31772 * C330 - C5980 * C320) * C2600 +
            (C31772 * C350 - C5980 * C335) * C32117 +
            (C31772 * C625 - C5980 * C620) * C2601 +
            (C31772 * C635 - C5980 * C630) * C31923) *
               C13204 +
           ((C31772 * C340 - C5980 * C325) * C2600 +
            (C31772 * C355 - C5980 * C345) * C32117 +
            (C31772 * C1067 - C5980 * C1055) * C2601 +
            (C31772 * C1082 - C5980 * C1070) * C31923) *
               C13205 +
           ((C31772 * C1933 - C5980 * C1927) * C2600 +
            (C31772 * C1945 - C5980 * C1936) * C32117 +
            (C31772 * C2473 - C5980 * C2470) * C2601 +
            (C31772 * C2479 - C5980 * C2476) * C31923) *
               C32164) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C2600 +
            (C31772 * C140 - C5980 * C131) * C32117 + (C6057 - C6058) * C2601 +
            (C6059 - C6060) * C31923) *
               C13203 +
           ((C6805 - C6806) * C2600 + (C6807 - C6808) * C32117 + C7314 * C2601 +
            C7315 * C31923) *
               C13204 +
           (C6829 * C2600 + C6830 * C32117 + C6813 * C2601 + C6814 * C31923) *
               C13205 +
           (C11740 * C2600 + C11741 * C32117 + (C6822 - C6821) * C2601 +
            (C6824 - C6823) * C31923) *
               C32164) *
              C31835 * C209 +
          (((C6058 - C6057) * C2600 + (C6060 - C6059) * C32117 +
            (C6062 - C6061) * C2601 + (C6064 - C6063) * C31923) *
               C13203 +
           (C7316 * C2600 + C7317 * C32117 + C7318 * C2601 + C7319 * C31923) *
               C13204 +
           (C7320 * C2600 + C7321 * C32117 + C7322 * C2601 + C7323 * C31923) *
               C13205 +
           ((C6821 - C6822) * C2600 + (C6823 - C6824) * C32117 +
            (C6825 - C6826) * C2601 + (C6827 - C6828) * C31923) *
               C32164) *
              C31835 * C210 +
          ((C6077 * C2600 + C6078 * C32117 + C6079 * C2601 + C6080 * C31923) *
               C13203 +
           (C6667 * C2600 + C6668 * C32117 + C9408 * C2601 + C9409 * C31923) *
               C13204 +
           (C6681 * C2600 + C6682 * C32117 + (C6678 - C6677) * C2601 +
            (C6680 - C6679) * C31923) *
               C13205 +
           ((C6826 - C6825) * C2600 + (C6828 - C6827) * C32117 +
            (C31772 * C7310 - C5980 * C7309) * C2601 +
            (C31772 * C7312 - C5980 * C7311) * C31923) *
               C32164) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C2600 +
            (C31772 * C140 - C5980 * C131) * C32117 + (C6057 - C6058) * C2601 +
            (C6059 - C6060) * C31923) *
               C13203 +
           ((C6805 - C6806) * C2600 + (C6807 - C6808) * C32117 + C7314 * C2601 +
            C7315 * C31923) *
               C13204 +
           C14130 * C13205 + C14131 * C32164) *
              C315 +
          (((C6806 - C6805) * C2600 + (C6808 - C6807) * C32117 + C7316 * C2601 +
            C7317 * C31923) *
               C13203 +
           ((C6810 - C6809) * C2600 + (C6812 - C6811) * C32117 + C7320 * C2601 +
            C7321 * C31923) *
               C13204 +
           ((C6817 - C6818) * C2600 + (C6819 - C6820) * C32117 +
            (C6821 - C6822) * C2601 + (C6823 - C6824) * C31923) *
               C13205 +
           ((C11743 - C11742) * C2600 + (C11745 - C11744) * C32117 +
            (C12025 - C12026) * C2601 + (C12027 - C12028) * C31923) *
               C32164) *
              C316 +
          (C14130 * C13203 + C14131 * C13204 +
           (C11753 * C2600 + C11754 * C32117 + (C12026 - C12025) * C2601 +
            (C12028 - C12027) * C31923) *
               C13205 +
           ((C11747 - C11746) * C2600 + (C11749 - C11748) * C32117 +
            (C31772 * C12021 - C5980 * C12020) * C2601 +
            (C31772 * C12023 - C5980 * C12022) * C31923) *
               C32164) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C7429 +
             (C31772 * C140 - C5980 * C131) * C7423 + (C6057 - C6058) * C7430 +
             (C6059 - C6060) * C7424 + C6077 * C7431 + C6078 * C7425 +
             C6079 * C7432 + C6080 * C32158) *
                C32118 +
            ((C6805 - C6806) * C7429 + (C6807 - C6808) * C7423 + C7314 * C7430 +
             C7315 * C7424 + C6667 * C7431 + C6668 * C7425 + C9408 * C7432 +
             C9409 * C32158) *
                C31963) *
               C530 +
           (((C6806 - C6805) * C7429 + (C6808 - C6807) * C7423 + C7316 * C7430 +
             C7317 * C7424 + C7318 * C7431 + C7319 * C7425 +
             (C6439 - C6440) * C7432 + (C6441 - C6442) * C32158) *
                C32118 +
            ((C6810 - C6809) * C7429 + (C6812 - C6811) * C7423 + C7320 * C7430 +
             C7321 * C7424 + C7322 * C7431 + C7323 * C7425 +
             (C6677 - C6678) * C7432 + (C6679 - C6680) * C32158) *
                C31963) *
               C531) *
              C31821 * C442 +
          ((((C5980 * C120 - C31772 * C127) * C7429 +
             (C5980 * C132 - C31772 * C141) * C7423 + (C6243 - C6244) * C7430 +
             (C6245 - C6246) * C7424 + (C6247 - C6248) * C7431 +
             (C6249 - C6250) * C7425 + (C6251 - C6252) * C7432 +
             (C6253 - C6254) * C32158) *
                C32118 +
            ((C7156 - C7157) * C7429 + (C7158 - C7159) * C7423 +
             (C6990 - C6991) * C7430 + (C6992 - C6993) * C7424 +
             (C6994 - C6995) * C7431 + (C6996 - C6997) * C7425 +
             (C9638 - C9639) * C7432 + (C9640 - C9641) * C32158) *
                C31963) *
               C530 +
           (((C7157 - C7156) * C7429 + (C7159 - C7158) * C7423 +
             (C6991 - C6990) * C7430 + (C6993 - C6992) * C7424 +
             (C6995 - C6994) * C7431 + (C6997 - C6996) * C7425 +
             (C9639 - C9638) * C7432 + (C9641 - C9640) * C32158) *
                C32118 +
            ((C7161 - C7160) * C7429 + (C7163 - C7162) * C7423 +
             (C6999 - C6998) * C7430 + (C7001 - C7000) * C7424 +
             (C7003 - C7002) * C7431 + (C7005 - C7004) * C7425 +
             (C31772 * C6986 - C5980 * C6985) * C7432 +
             (C31772 * C6988 - C5980 * C6987) * C32158) *
                C31963) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
              C32137 * C128 - C756 * C121) *
                 C2600 +
             (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
              C32137 * C142 - C756 * C133) *
                 C32117 +
             (C895 - C896 + C897 - C898 + C899 - C900) * C2601 +
             (C901 - C902 + C903 - C904 + C905 - C906) * C31923) *
                C32118 +
            ((C1950 - C1951 + C1952 - C1953 + C1954 - C1955) * C2600 +
             (C1956 - C1957 + C1958 - C1959 + C1960 - C1961) * C32117 +
             (C1570 - C1569 + C1572 - C1571 + C1574 - C1573) * C2601 +
             (C1576 - C1575 + C1578 - C1577 + C1580 - C1579) * C31923) *
                C31963) *
               C530 +
           (((C1951 - C1950 + C1953 - C1952 + C1955 - C1954) * C2600 +
             (C1957 - C1956 + C1959 - C1958 + C1961 - C1960) * C32117 +
             (C1569 - C1570 + C1571 - C1572 + C1573 - C1574) * C2601 +
             (C1575 - C1576 + C1577 - C1578 + C1579 - C1580) * C31923) *
                C32118 +
            ((C1963 - C1962 + C1965 - C1964 + C1967 - C1966) * C2600 +
             (C1969 - C1968 + C1971 - C1970 + C1973 - C1972) * C32117 +
             (C2481 - C2482 + C2483 - C2484 + C2485 - C2486) * C2601 +
             (C2487 - C2488 + C2489 - C2490 + C2491 - C2492) * C31923) *
                C31963) *
               C531) *
              C31821 * C442 +
          ((((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
              C756 * C122 - C32137 * C129) *
                 C2600 +
             (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
              C756 * C134 - C32137 * C143) *
                 C32117 +
             (C1237 - C1238 + C1239 - C1240 + C1241 - C1242) * C2601 +
             (C1243 - C1244 + C1245 - C1246 + C1247 - C1248) * C31923) *
                C32118 +
            ((C2299 - C2300 + C2301 - C2302 + C2303 - C2304) * C2600 +
             (C2305 - C2306 + C2307 - C2308 + C2309 - C2310) * C32117 +
             (C4619 - C4620 + C4621 - C4622 + C4623 - C4624) * C2601 +
             (C4625 - C4626 + C4627 - C4628 + C4629 - C4630) * C31923) *
                C31963) *
               C530 +
           (((C2300 - C2299 + C2302 - C2301 + C2304 - C2303) * C2600 +
             (C2306 - C2305 + C2308 - C2307 + C2310 - C2309) * C32117 +
             (C4620 - C4619 + C4622 - C4621 + C4624 - C4623) * C2601 +
             (C4626 - C4625 + C4628 - C4627 + C4630 - C4629) * C31923) *
                C32118 +
            ((C2312 - C2311 + C2314 - C2313 + C2316 - C2315) * C2600 +
             (C2318 - C2317 + C2320 - C2319 + C2322 - C2321) * C32117 +
             (C748 * C1066 - C754 * C1054 + C749 * C1067 - C755 * C1055 +
              C32137 * C2145 - C756 * C2144) *
                 C2601 +
             (C748 * C1081 - C754 * C1069 + C749 * C1082 - C755 * C1070 +
              C32137 * C2147 - C756 * C2146) *
                 C31923) *
                C31963) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C2600 +
             (C31772 * C140 - C5980 * C131) * C32117 + (C6057 - C6058) * C2601 +
             (C6059 - C6060) * C31923) *
                C13203 +
            ((C6805 - C6806) * C2600 + (C6807 - C6808) * C32117 +
             C7314 * C2601 + C7315 * C31923) *
                C13204 +
            C14130 * C13205 + C14131 * C32164) *
               C530 +
           (((C6806 - C6805) * C2600 + (C6808 - C6807) * C32117 +
             C7316 * C2601 + C7317 * C31923) *
                C13203 +
            ((C6810 - C6809) * C2600 + (C6812 - C6811) * C32117 +
             C7320 * C2601 + C7321 * C31923) *
                C13204 +
            ((C6817 - C6818) * C2600 + (C6819 - C6820) * C32117 +
             (C6821 - C6822) * C2601 + (C6823 - C6824) * C31923) *
                C13205 +
            ((C11743 - C11742) * C2600 + (C11745 - C11744) * C32117 +
             (C12025 - C12026) * C2601 + (C12027 - C12028) * C31923) *
                C32164) *
               C531) *
              C31821 * C442 +
          ((((C5980 * C120 - C31772 * C127) * C2600 +
             (C5980 * C132 - C31772 * C141) * C32117 + (C6243 - C6244) * C2601 +
             (C6245 - C6246) * C31923) *
                C13203 +
            ((C7156 - C7157) * C2600 + (C7158 - C7159) * C32117 +
             (C6990 - C6991) * C2601 + (C6992 - C6993) * C31923) *
                C13204 +
            ((C7160 - C7161) * C2600 + (C7162 - C7163) * C32117 +
             (C6998 - C6999) * C2601 + (C7000 - C7001) * C31923) *
                C13205 +
            ((C11931 - C11932) * C2600 + (C11933 - C11934) * C32117 +
             (C14262 - C14263) * C2601 + (C14264 - C14265) * C31923) *
                C32164) *
               C530 +
           (((C7157 - C7156) * C2600 + (C7159 - C7158) * C32117 +
             (C6991 - C6990) * C2601 + (C6993 - C6992) * C31923) *
                C13203 +
            ((C7161 - C7160) * C2600 + (C7163 - C7162) * C32117 +
             (C6999 - C6998) * C2601 + (C7001 - C7000) * C31923) *
                C13204 +
            ((C11932 - C11931) * C2600 + (C11934 - C11933) * C32117 +
             (C14263 - C14262) * C2601 + (C14265 - C14264) * C31923) *
                C13205 +
            ((C11936 - C11935) * C2600 + (C11938 - C11937) * C32117 +
             (C31772 * C11841 - C5980 * C11840) * C2601 +
             (C31772 * C11843 - C5980 * C11842) * C31923) *
                C32164) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
             C32137 * C128 - C756 * C121) *
                C2600 +
            (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
             C32137 * C142 - C756 * C133) *
                C32117 +
            (C895 - C896 + C897 - C898 + C899 - C900) * C2601 +
            (C901 - C902 + C903 - C904 + C905 - C906) * C31923) *
               C32118 +
           ((C1950 - C1951 + C1952 - C1953 + C1954 - C1955) * C2600 +
            (C1956 - C1957 + C1958 - C1959 + C1960 - C1961) * C32117 +
            (C1570 - C1569 + C1572 - C1571 + C1574 - C1573) * C2601 +
            (C1576 - C1575 + C1578 - C1577 + C1580 - C1579) * C31923) *
               C31963) *
              C31835 * C209 +
          (((C896 - C895 + C898 - C897 + C900 - C899) * C2600 +
            (C902 - C901 + C904 - C903 + C906 - C905) * C32117 +
            (C908 - C907 + C910 - C909 + C912 - C911) * C2601 +
            (C914 - C913 + C916 - C915 + C918 - C917) * C31923) *
               C32118 +
           ((C1569 - C1570 + C1571 - C1572 + C1573 - C1574) * C2600 +
            (C1575 - C1576 + C1577 - C1578 + C1579 - C1580) * C32117 +
            (C1581 - C1582 + C1583 - C1584 + C1585 - C1586) * C2601 +
            (C1587 - C1588 + C1589 - C1590 + C1591 - C1592) * C31923) *
               C31963) *
              C31835 * C210 +
          ((C939 * C2600 + C940 * C32117 +
            (C920 - C919 + C922 - C921 + C924 - C923) * C2601 +
            (C926 - C925 + C928 - C927 + C930 - C929) * C31923) *
               C32118 +
           ((C1582 - C1581 + C1584 - C1583 + C1586 - C1585) * C2600 +
            (C1588 - C1587 + C1590 - C1589 + C1592 - C1591) * C32117 +
            (C748 * C1559 - C754 * C1556 + C749 * C1560 - C755 * C1557 +
             C32137 * C1561 - C756 * C1558) *
                C2601 +
            (C748 * C1565 - C754 * C1562 + C749 * C1566 - C755 * C1563 +
             C32137 * C1567 - C756 * C1564) *
                C31923) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
             C32137 * C128 - C756 * C121) *
                C2600 +
            (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
             C32137 * C142 - C756 * C133) *
                C32117 +
            (C895 - C896 + C897 - C898 + C899 - C900) * C2601 +
            (C901 - C902 + C903 - C904 + C905 - C906) * C31923) *
               C32118 +
           ((C1950 - C1951 + C1952 - C1953 + C1954 - C1955) * C2600 +
            (C1956 - C1957 + C1958 - C1959 + C1960 - C1961) * C32117 +
            (C1570 - C1569 + C1572 - C1571 + C1574 - C1573) * C2601 +
            (C1576 - C1575 + C1578 - C1577 + C1580 - C1579) * C31923) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
             C756 * C122 - C32137 * C129) *
                C2600 +
            (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
             C756 * C134 - C32137 * C143) *
                C32117 +
            (C1237 - C1238 + C1239 - C1240 + C1241 - C1242) * C2601 +
            (C1243 - C1244 + C1245 - C1246 + C1247 - C1248) * C31923) *
               C32118 +
           ((C2299 - C2300 + C2301 - C2302 + C2303 - C2304) * C2600 +
            (C2305 - C2306 + C2307 - C2308 + C2309 - C2310) * C32117 +
            (C754 * C619 - C748 * C624 + C755 * C620 - C749 * C625 +
             C756 * C621 - C32137 * C626) *
                C2601 +
            (C754 * C629 - C748 * C634 + C755 * C630 - C749 * C635 +
             C756 * C631 - C32137 * C636) *
                C31923) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C748 * C128 - C754 * C121 + C749 * C129 - C755 * C122 +
             C32137 * C130 - C756 * C123) *
                C2600 +
            (C748 * C142 - C754 * C133 + C749 * C143 - C755 * C134 +
             C32137 * C144 - C756 * C135) *
                C32117 +
            (C748 * C225 - C754 * C215 + C749 * C226 - C755 * C216 +
             C32137 * C227 - C756 * C217) *
                C2601 +
            (C748 * C245 - C754 * C230 + C749 * C246 - C755 * C231 +
             C32137 * C247 - C756 * C232) *
                C31923) *
               C32118 +
           ((C748 * C330 - C754 * C320 + C749 * C331 - C755 * C321 +
             C32137 * C332 - C756 * C322) *
                C2600 +
            (C748 * C350 - C754 * C335 + C749 * C351 - C755 * C336 +
             C32137 * C352 - C756 * C337) *
                C32117 +
            (C748 * C625 - C754 * C620 + C749 * C626 - C755 * C621 +
             C32137 * C627 - C756 * C622) *
                C2601 +
            (C748 * C635 - C754 * C630 + C749 * C636 - C755 * C631 +
             C32137 * C637 - C756 * C632) *
                C31923) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C7429 +
            (C31772 * C140 - C5980 * C131) * C7423 + (C6057 - C6058) * C7430 +
            (C6059 - C6060) * C7424 + C6077 * C7431 + C6078 * C7425 +
            C6079 * C7432 + C6080 * C32158) *
               C32118 +
           ((C6805 - C6806) * C7429 + (C6807 - C6808) * C7423 + C7314 * C7430 +
            C7315 * C7424 + C6667 * C7431 + C6668 * C7425 +
            (C6440 - C6439) * C7432 + (C6442 - C6441) * C32158) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C5980 * C120 - C31772 * C127) * C7429 +
            (C5980 * C132 - C31772 * C141) * C7423 + (C6243 - C6244) * C7430 +
            (C6245 - C6246) * C7424 + (C6247 - C6248) * C7431 +
            (C6249 - C6250) * C7425 + (C6251 - C6252) * C7432 +
            (C6253 - C6254) * C32158) *
               C32118 +
           ((C7156 - C7157) * C7429 + (C7158 - C7159) * C7423 +
            (C6990 - C6991) * C7430 + (C6992 - C6993) * C7424 +
            (C6994 - C6995) * C7431 + (C6996 - C6997) * C7425 +
            (C5980 * C1557 - C31772 * C1560) * C7432 +
            (C5980 * C1563 - C31772 * C1566) * C32158) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C31772 * C128 - C5980 * C121) * C7429 +
            (C31772 * C142 - C5980 * C133) * C7423 +
            (C31772 * C225 - C5980 * C215) * C7430 +
            (C31772 * C245 - C5980 * C230) * C7424 +
            (C31772 * C235 - C5980 * C220) * C7431 +
            (C31772 * C250 - C5980 * C240) * C7425 +
            (C31772 * C878 - C5980 * C872) * C7432 +
            (C31772 * C890 - C5980 * C881) * C32158) *
               C32118 +
           ((C31772 * C330 - C5980 * C320) * C7429 +
            (C31772 * C350 - C5980 * C335) * C7423 +
            (C31772 * C625 - C5980 * C620) * C7430 +
            (C31772 * C635 - C5980 * C630) * C7424 +
            (C31772 * C1061 - C5980 * C1052) * C7431 +
            (C31772 * C1079 - C5980 * C1064) * C7425 +
            (C31772 * C1561 - C5980 * C1558) * C7432 +
            (C31772 * C1567 - C5980 * C1564) * C32158) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C7429 +
            (C31772 * C140 - C5980 * C131) * C7423 + (C6057 - C6058) * C7430 +
            (C6059 - C6060) * C7424 + C6077 * C7431 + C6078 * C7425 +
            C6079 * C7432 + C6080 * C32158) *
               C32118 +
           ((C6805 - C6806) * C7429 + (C6807 - C6808) * C7423 + C7314 * C7430 +
            C7315 * C7424 + C6667 * C7431 + C6668 * C7425 + C9408 * C7432 +
            C9409 * C32158) *
               C31963) *
              C31835 * C209 +
          (((C6058 - C6057) * C7429 + (C6060 - C6059) * C7423 +
            (C6062 - C6061) * C7430 + (C6064 - C6063) * C7424 +
            (C6066 - C6065) * C7431 + (C6068 - C6067) * C7425 +
            (C6070 - C6069) * C7432 + (C6072 - C6071) * C32158) *
               C32118 +
           (C7316 * C7429 + C7317 * C7423 + C7318 * C7430 + C7319 * C7424 +
            (C6439 - C6440) * C7431 + (C6441 - C6442) * C7425 +
            (C6443 - C6444) * C7432 + (C6445 - C6446) * C32158) *
               C31963) *
              C31835 * C210 +
          ((C6077 * C7429 + C6078 * C7423 + C6079 * C7430 + C6080 * C7424 +
            C6081 * C7431 + C6082 * C7425 + (C6074 - C6073) * C7432 +
            (C6076 - C6075) * C32158) *
               C32118 +
           (C6667 * C7429 + C6668 * C7423 + C9408 * C7430 + C9409 * C7424 +
            (C6444 - C6443) * C7431 + (C6446 - C6445) * C7425 +
            (C31772 * C6427 - C5980 * C6426) * C7432 +
            (C31772 * C6429 - C5980 * C6428) * C32158) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C2600 +
            (C31772 * C140 - C5980 * C131) * C32117 + (C6057 - C6058) * C2601 +
            (C6059 - C6060) * C31923) *
               C13203 +
           ((C6805 - C6806) * C2600 + (C6807 - C6808) * C32117 + C7314 * C2601 +
            C7315 * C31923) *
               C13204 +
           (C6829 * C2600 + C6830 * C32117 + C6813 * C2601 + C6814 * C31923) *
               C13205 +
           (C11740 * C2600 + C11741 * C32117 + (C6822 - C6821) * C2601 +
            (C6824 - C6823) * C31923) *
               C32164) *
              C31835 * C31821 * C110 +
          (((C5980 * C120 - C31772 * C127) * C2600 +
            (C5980 * C132 - C31772 * C141) * C32117 + (C6243 - C6244) * C2601 +
            (C6245 - C6246) * C31923) *
               C13203 +
           ((C7156 - C7157) * C2600 + (C7158 - C7159) * C32117 +
            (C6990 - C6991) * C2601 + (C6992 - C6993) * C31923) *
               C13204 +
           ((C7160 - C7161) * C2600 + (C7162 - C7163) * C32117 +
            (C6998 - C6999) * C2601 + (C7000 - C7001) * C31923) *
               C13205 +
           ((C11931 - C11932) * C2600 + (C11933 - C11934) * C32117 +
            (C5980 * C2469 - C31772 * C2472) * C2601 +
            (C5980 * C2475 - C31772 * C2478) * C31923) *
               C32164) *
              C31835 * C31821 * C111 +
          (((C31772 * C128 - C5980 * C121) * C2600 +
            (C31772 * C142 - C5980 * C133) * C32117 +
            (C31772 * C225 - C5980 * C215) * C2601 +
            (C31772 * C245 - C5980 * C230) * C31923) *
               C13203 +
           ((C31772 * C330 - C5980 * C320) * C2600 +
            (C31772 * C350 - C5980 * C335) * C32117 +
            (C31772 * C625 - C5980 * C620) * C2601 +
            (C31772 * C635 - C5980 * C630) * C31923) *
               C13204 +
           ((C31772 * C340 - C5980 * C325) * C2600 +
            (C31772 * C355 - C5980 * C345) * C32117 +
            (C31772 * C1067 - C5980 * C1055) * C2601 +
            (C31772 * C1082 - C5980 * C1070) * C31923) *
               C13205 +
           ((C31772 * C1933 - C5980 * C1927) * C2600 +
            (C31772 * C1945 - C5980 * C1936) * C32117 +
            (C31772 * C2473 - C5980 * C2470) * C2601 +
            (C31772 * C2479 - C5980 * C2476) * C31923) *
               C32164) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C2600 +
            (C31772 * C140 - C5980 * C131) * C32117 + (C6057 - C6058) * C2601 +
            (C6059 - C6060) * C31923) *
               C13203 +
           ((C6805 - C6806) * C2600 + (C6807 - C6808) * C32117 + C7314 * C2601 +
            C7315 * C31923) *
               C13204 +
           (C6829 * C2600 + C6830 * C32117 + C6813 * C2601 + C6814 * C31923) *
               C13205 +
           (C11740 * C2600 + C11741 * C32117 + (C6822 - C6821) * C2601 +
            (C6824 - C6823) * C31923) *
               C32164) *
              C31835 * C209 +
          (((C6058 - C6057) * C2600 + (C6060 - C6059) * C32117 +
            (C6062 - C6061) * C2601 + (C6064 - C6063) * C31923) *
               C13203 +
           (C7316 * C2600 + C7317 * C32117 + C7318 * C2601 + C7319 * C31923) *
               C13204 +
           (C7320 * C2600 + C7321 * C32117 + C7322 * C2601 + C7323 * C31923) *
               C13205 +
           ((C6821 - C6822) * C2600 + (C6823 - C6824) * C32117 +
            (C6825 - C6826) * C2601 + (C6827 - C6828) * C31923) *
               C32164) *
              C31835 * C210 +
          ((C6077 * C2600 + C6078 * C32117 + C6079 * C2601 + C6080 * C31923) *
               C13203 +
           (C6667 * C2600 + C6668 * C32117 + C9408 * C2601 + C9409 * C31923) *
               C13204 +
           (C6681 * C2600 + C6682 * C32117 + (C6678 - C6677) * C2601 +
            (C6680 - C6679) * C31923) *
               C13205 +
           ((C6826 - C6825) * C2600 + (C6828 - C6827) * C32117 +
            (C31772 * C7310 - C5980 * C7309) * C2601 +
            (C31772 * C7312 - C5980 * C7311) * C31923) *
               C32164) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                 C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                 C105 * C130 - C117 * C123) *
                    C118 +
                (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                 C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                 C105 * C144 - C117 * C135) *
                    C31864) *
                   C31876 * C31835 * C440 +
               ((C113 * C213 - C101 * C223 + C114 * C214 - C102 * C224 +
                 C115 * C215 - C103 * C225 + C116 * C216 - C104 * C226 +
                 C117 * C217 - C105 * C227) *
                    C118 +
                (C113 * C228 - C101 * C243 + C114 * C229 - C102 * C244 +
                 C115 * C230 - C103 * C245 + C116 * C231 - C104 * C246 +
                 C117 * C232 - C105 * C247) *
                    C31864) *
                   C31876 * C31835 * C441) *
                  C442 +
              (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
                 C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
                 C117 * C124 - C105 * C136) *
                    C118 +
                (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
                 C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
                 C117 * C137 - C105 * C145) *
                    C31864) *
                   C31876 * C31835 * C440 +
               ((C101 * C224 - C113 * C214 + C102 * C225 - C114 * C215 +
                 C103 * C226 - C115 * C216 + C104 * C227 - C116 * C217 +
                 C105 * C445 - C117 * C444) *
                    C118 +
                (C101 * C244 - C113 * C229 + C102 * C245 - C114 * C230 +
                 C103 * C246 - C115 * C231 + C104 * C247 - C116 * C232 +
                 C105 * C447 - C117 * C446) *
                    C31864) *
                   C31876 * C31835 * C441) *
                  C443) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
                 C32137 * C128 - C756 * C121) *
                    C757 +
                (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
                 C32137 * C142 - C756 * C133) *
                    C32183 +
                (C895 - C896 + C897 - C898 + C899 - C900) * C758 +
                (C901 - C902 + C903 - C904 + C905 - C906) * C32171 +
                C939 * C759 + C940 * C32148) *
                   C31876 * C31835 * C440 +
               ((C896 - C895 + C898 - C897 + C900 - C899) * C757 +
                (C902 - C901 + C904 - C903 + C906 - C905) * C32183 +
                (C908 - C907 + C910 - C909 + C912 - C911) * C758 +
                (C914 - C913 + C916 - C915 + C918 - C917) * C32171 +
                (C919 - C920 + C921 - C922 + C923 - C924) * C759 +
                (C925 - C926 + C927 - C928 + C929 - C930) * C32148) *
                   C31876 * C31835 * C441) *
                  C442 +
              (((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
                 C756 * C122 - C32137 * C129) *
                    C757 +
                (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
                 C756 * C134 - C32137 * C143) *
                    C32183 +
                (C1237 - C1238 + C1239 - C1240 + C1241 - C1242) * C758 +
                (C1243 - C1244 + C1245 - C1246 + C1247 - C1248) * C32171 +
                (C1249 - C1250 + C1251 - C1252 + C1253 - C1254) * C759 +
                (C1255 - C1256 + C1257 - C1258 + C1259 - C1260) * C32148) *
                   C31876 * C31835 * C440 +
               ((C1238 - C1237 + C1240 - C1239 + C1242 - C1241) * C757 +
                (C1244 - C1243 + C1246 - C1245 + C1248 - C1247) * C32183 +
                (C1250 - C1249 + C1252 - C1251 + C1254 - C1253) * C758 +
                (C1256 - C1255 + C1258 - C1257 + C1260 - C1259) * C32171 +
                (C748 * C877 - C754 * C871 + C749 * C878 - C755 * C872 +
                 C32137 * C1233 - C756 * C1232) *
                    C759 +
                (C748 * C889 - C754 * C880 + C749 * C890 - C755 * C881 +
                 C32137 * C1235 - C756 * C1234) *
                    C32148) *
                   C31876 * C31835 * C441) *
                  C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
              C32137 * C128 - C756 * C121) *
                 C118 +
             (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
              C32137 * C142 - C756 * C133) *
                 C31864) *
                C32184 +
            ((C1950 - C1951 + C1952 - C1953 + C1954 - C1955) * C118 +
             (C1956 - C1957 + C1958 - C1959 + C1960 - C1961) * C31864) *
                C32173 +
            C1998 * C32151) *
               C31835 * C440 +
           (((C896 - C895 + C898 - C897 + C900 - C899) * C118 +
             (C902 - C901 + C904 - C903 + C906 - C905) * C31864) *
                C32184 +
            ((C1569 - C1570 + C1571 - C1572 + C1573 - C1574) * C118 +
             (C1575 - C1576 + C1577 - C1578 + C1579 - C1580) * C31864) *
                C32173 +
            ((C754 * C1053 - C748 * C1065 + C755 * C1054 - C749 * C1066 +
              C756 * C1055 - C32137 * C1067) *
                 C118 +
             (C754 * C1068 - C748 * C1080 + C755 * C1069 - C749 * C1081 +
              C756 * C1070 - C32137 * C1082) *
                 C31864) *
                C32151) *
               C31835 * C441) *
              C442 +
          ((((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
              C756 * C122 - C32137 * C129) *
                 C118 +
             (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
              C756 * C134 - C32137 * C143) *
                 C31864) *
                C32184 +
            ((C754 * C319 - C748 * C329 + C755 * C320 - C749 * C330 +
              C756 * C321 - C32137 * C331) *
                 C118 +
             (C754 * C334 - C748 * C349 + C755 * C335 - C749 * C350 +
              C756 * C336 - C32137 * C351) *
                 C31864) *
                C32173 +
            ((C754 * C324 - C748 * C339 + C755 * C325 - C749 * C340 +
              C756 * C326 - C32137 * C341) *
                 C118 +
             (C754 * C344 - C748 * C354 + C755 * C345 - C749 * C355 +
              C756 * C346 - C32137 * C356) *
                 C31864) *
                C32151) *
               C31835 * C440 +
           (((C1238 - C1237 + C1240 - C1239 + C1242 - C1241) * C118 +
             (C1244 - C1243 + C1246 - C1245 + C1248 - C1247) * C31864) *
                C32184 +
            ((C748 * C624 - C754 * C619 + C749 * C625 - C755 * C620 +
              C32137 * C626 - C756 * C621) *
                 C118 +
             (C748 * C634 - C754 * C629 + C749 * C635 - C755 * C630 +
              C32137 * C636 - C756 * C631) *
                 C31864) *
                C32173 +
            ((C748 * C1066 - C754 * C1054 + C749 * C1067 - C755 * C1055 +
              C32137 * C2145 - C756 * C2144) *
                 C118 +
             (C748 * C1081 - C754 * C1069 + C749 * C1082 - C755 * C1070 +
              C32137 * C2147 - C756 * C2146) *
                 C31864) *
                C32151) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C5157 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C5151 +
            (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C5158 +
            (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C5152 +
            C5315 * C5159 + C5316 * C32148) *
               C31876 * C31835 * C440 +
           ((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C5157 +
            (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C5151 +
            (C5284 - C5283 + C5286 - C5285 + C5288 - C5287) * C5158 +
            (C5290 - C5289 + C5292 - C5291 + C5294 - C5293) * C5152 +
            (C5295 - C5296 + C5297 - C5298 + C5299 - C5300) * C5159 +
            (C5301 - C5302 + C5303 - C5304 + C5305 - C5306) * C32148) *
               C31876 * C31835 * C441) *
              C442 +
          (((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
             C5156 * C122 - C32137 * C129) *
                C5157 +
            (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
             C5156 * C134 - C32137 * C143) *
                C5151 +
            (C5573 - C5574 + C5575 - C5576 + C5577 - C5578) * C5158 +
            (C5579 - C5580 + C5581 - C5582 + C5583 - C5584) * C5152 +
            (C5585 - C5586 + C5587 - C5588 + C5589 - C5590) * C5159 +
            (C5591 - C5592 + C5593 - C5594 + C5595 - C5596) * C32148) *
               C31876 * C31835 * C440 +
           ((C5574 - C5573 + C5576 - C5575 + C5578 - C5577) * C5157 +
            (C5580 - C5579 + C5582 - C5581 + C5584 - C5583) * C5151 +
            (C5586 - C5585 + C5588 - C5587 + C5590 - C5589) * C5158 +
            (C5592 - C5591 + C5594 - C5593 + C5596 - C5595) * C5152 +
            (C32180 * C877 - C5154 * C871 + C32167 * C878 - C5155 * C872 +
             C32137 * C1233 - C5156 * C1232) *
                C5159 +
            (C32180 * C889 - C5154 * C880 + C32167 * C890 - C5155 * C881 +
             C32137 * C1235 - C5156 * C1234) *
                C32148) *
               C31876 * C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C5981 +
            (C31772 * C140 - C5980 * C131) * C5975 + (C6057 - C6058) * C5982 +
            (C6059 - C6060) * C5976 + C6077 * C5983 + C6078 * C5977 +
            C6079 * C5984 + C6080 * C5978 + C6081 * C5985 + C6082 * C5979) *
               C31876 * C31835 * C440 +
           ((C6058 - C6057) * C5981 + (C6060 - C6059) * C5975 +
            (C6062 - C6061) * C5982 + (C6064 - C6063) * C5976 +
            (C6066 - C6065) * C5983 + (C6068 - C6067) * C5977 +
            (C6070 - C6069) * C5984 + (C6072 - C6071) * C5978 +
            (C6073 - C6074) * C5985 + (C6075 - C6076) * C5979) *
               C31876 * C31835 * C441) *
              C442 +
          (((C5980 * C120 - C31772 * C127) * C5981 +
            (C5980 * C132 - C31772 * C141) * C5975 + (C6243 - C6244) * C5982 +
            (C6245 - C6246) * C5976 + (C6247 - C6248) * C5983 +
            (C6249 - C6250) * C5977 + (C6251 - C6252) * C5984 +
            (C6253 - C6254) * C5978 + (C6255 - C6256) * C5985 +
            (C6257 - C6258) * C5979) *
               C31876 * C31835 * C440 +
           ((C6244 - C6243) * C5981 + (C6246 - C6245) * C5975 +
            (C6248 - C6247) * C5982 + (C6250 - C6249) * C5976 +
            (C6252 - C6251) * C5983 + (C6254 - C6253) * C5977 +
            (C6256 - C6255) * C5984 + (C6258 - C6257) * C5978 +
            (C31772 * C6239 - C5980 * C6238) * C5985 +
            (C31772 * C6241 - C5980 * C6240) * C5979) *
               C31876 * C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C5157 +
             (C31772 * C140 - C5980 * C131) * C5151 + (C6057 - C6058) * C5158 +
             (C6059 - C6060) * C5152 + C6077 * C5159 + C6078 * C32148) *
                C32184 +
            ((C6805 - C6806) * C5157 + (C6807 - C6808) * C5151 +
             (C6432 - C6431) * C5158 + (C6434 - C6433) * C5152 + C6667 * C5159 +
             C6668 * C32148) *
                C32173 +
            C6839 * C32151) *
               C31835 * C440 +
           (((C6058 - C6057) * C5157 + (C6060 - C6059) * C5151 +
             (C6062 - C6061) * C5158 + (C6064 - C6063) * C5152 +
             (C6066 - C6065) * C5159 + (C6068 - C6067) * C32148) *
                C32184 +
            ((C6431 - C6432) * C5157 + (C6433 - C6434) * C5151 +
             (C6435 - C6436) * C5158 + (C6437 - C6438) * C5152 +
             (C6439 - C6440) * C5159 + (C6441 - C6442) * C32148) *
                C32173 +
            ((C6670 - C6669) * C5157 + (C6672 - C6671) * C5151 +
             (C6674 - C6673) * C5158 + (C6676 - C6675) * C5152 +
             (C6677 - C6678) * C5159 + (C6679 - C6680) * C32148) *
                C32151) *
               C31835 * C441) *
              C442 +
          ((((C5980 * C120 - C31772 * C127) * C5157 +
             (C5980 * C132 - C31772 * C141) * C5151 + (C6243 - C6244) * C5158 +
             (C6245 - C6246) * C5152 + (C6247 - C6248) * C5159 +
             (C6249 - C6250) * C32148) *
                C32184 +
            ((C5980 * C319 - C31772 * C329) * C5157 +
             (C5980 * C334 - C31772 * C349) * C5151 + (C6990 - C6991) * C5158 +
             (C6992 - C6993) * C5152 + (C6994 - C6995) * C5159 +
             (C6996 - C6997) * C32148) *
                C32173 +
            ((C5980 * C324 - C31772 * C339) * C5157 +
             (C5980 * C344 - C31772 * C354) * C5151 + (C6998 - C6999) * C5158 +
             (C7000 - C7001) * C5152 + (C7002 - C7003) * C5159 +
             (C7004 - C7005) * C32148) *
                C32151) *
               C31835 * C440 +
           (((C6244 - C6243) * C5157 + (C6246 - C6245) * C5151 +
             (C6248 - C6247) * C5158 + (C6250 - C6249) * C5152 +
             (C6252 - C6251) * C5159 + (C6254 - C6253) * C32148) *
                C32184 +
            ((C6991 - C6990) * C5157 + (C6993 - C6992) * C5151 +
             (C6995 - C6994) * C5158 + (C6997 - C6996) * C5152 +
             (C31772 * C1560 - C5980 * C1557) * C5159 +
             (C31772 * C1566 - C5980 * C1563) * C32148) *
                C32173 +
            ((C6999 - C6998) * C5157 + (C7001 - C7000) * C5151 +
             (C7003 - C7002) * C5158 + (C7005 - C7004) * C5152 +
             (C31772 * C6986 - C5980 * C6985) * C5159 +
             (C31772 * C6988 - C5980 * C6987) * C32148) *
                C32151) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
              C32137 * C128 - C5156 * C121) *
                 C118 +
             (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
              C32137 * C142 - C5156 * C133) *
                 C31864) *
                C10013 +
            ((C10237 - C10238 + C10239 - C10240 + C10241 - C10242) * C118 +
             (C10243 - C10244 + C10245 - C10246 + C10247 - C10248) * C31864) *
                C10014 +
            C10285 * C32151) *
               C31835 * C440 +
           (((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C118 +
             (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C31864) *
                C10013 +
            ((C5889 - C5890 + C5891 - C5892 + C5893 - C5894) * C118 +
             (C5895 - C5896 + C5897 - C5898 + C5899 - C5900) * C31864) *
                C10014 +
            ((C5154 * C1053 - C32180 * C1065 + C5155 * C1054 - C32167 * C1066 +
              C5156 * C1055 - C32137 * C1067) *
                 C118 +
             (C5154 * C1068 - C32180 * C1080 + C5155 * C1069 - C32167 * C1081 +
              C5156 * C1070 - C32137 * C1082) *
                 C31864) *
                C32151) *
               C31835 * C441) *
              C442 +
          ((((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
              C5156 * C122 - C32137 * C129) *
                 C118 +
             (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
              C5156 * C134 - C32137 * C143) *
                 C31864) *
                C10013 +
            ((C5154 * C319 - C32180 * C329 + C5155 * C320 - C32167 * C330 +
              C5156 * C321 - C32137 * C331) *
                 C118 +
             (C5154 * C334 - C32180 * C349 + C5155 * C335 - C32167 * C350 +
              C5156 * C336 - C32137 * C351) *
                 C31864) *
                C10014 +
            ((C5154 * C324 - C32180 * C339 + C5155 * C325 - C32167 * C340 +
              C5156 * C326 - C32137 * C341) *
                 C118 +
             (C5154 * C344 - C32180 * C354 + C5155 * C345 - C32167 * C355 +
              C5156 * C346 - C32137 * C356) *
                 C31864) *
                C32151) *
               C31835 * C440 +
           (((C5574 - C5573 + C5576 - C5575 + C5578 - C5577) * C118 +
             (C5580 - C5579 + C5582 - C5581 + C5584 - C5583) * C31864) *
                C10013 +
            ((C32180 * C624 - C5154 * C619 + C32167 * C625 - C5155 * C620 +
              C32137 * C626 - C5156 * C621) *
                 C118 +
             (C32180 * C634 - C5154 * C629 + C32167 * C635 - C5155 * C630 +
              C32137 * C636 - C5156 * C631) *
                 C31864) *
                C10014 +
            ((C32180 * C1066 - C5154 * C1054 + C32167 * C1067 - C5155 * C1055 +
              C32137 * C2145 - C5156 * C2144) *
                 C118 +
             (C32180 * C1081 - C5154 * C1069 + C32167 * C1082 - C5155 * C1070 +
              C32137 * C2147 - C5156 * C2146) *
                 C31864) *
                C32151) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C757 +
             (C31772 * C140 - C5980 * C131) * C32183 + (C6057 - C6058) * C758 +
             (C6059 - C6060) * C32171 + C6077 * C759 + C6078 * C32148) *
                C10013 +
            ((C6805 - C6806) * C757 + (C6807 - C6808) * C32183 + C7314 * C758 +
             C7315 * C32171 + C6667 * C759 + C6668 * C32148) *
                C10014 +
            C11100 * C32151) *
               C31835 * C440 +
           (((C6058 - C6057) * C757 + (C6060 - C6059) * C32183 +
             (C6062 - C6061) * C758 + (C6064 - C6063) * C32171 +
             (C6066 - C6065) * C759 + (C6068 - C6067) * C32148) *
                C10013 +
            (C7316 * C757 + C7317 * C32183 + C7318 * C758 + C7319 * C32171 +
             C9902 * C759 + C9903 * C32148) *
                C10014 +
            (C7320 * C757 + C7321 * C32183 + C7322 * C758 + C7323 * C32171 +
             (C6677 - C6678) * C759 + (C6679 - C6680) * C32148) *
                C32151) *
               C31835 * C441) *
              C442 +
          ((((C5980 * C120 - C31772 * C127) * C757 +
             (C5980 * C132 - C31772 * C141) * C32183 + (C6243 - C6244) * C758 +
             (C6245 - C6246) * C32171 + (C6247 - C6248) * C759 +
             (C6249 - C6250) * C32148) *
                C10013 +
            ((C7156 - C7157) * C757 + (C7158 - C7159) * C32183 +
             (C6990 - C6991) * C758 + (C6992 - C6993) * C32171 +
             (C6994 - C6995) * C759 + (C6996 - C6997) * C32148) *
                C10014 +
            ((C7160 - C7161) * C757 + (C7162 - C7163) * C32183 +
             (C6998 - C6999) * C758 + (C7000 - C7001) * C32171 +
             (C7002 - C7003) * C759 + (C7004 - C7005) * C32148) *
                C32151) *
               C31835 * C440 +
           (((C6244 - C6243) * C757 + (C6246 - C6245) * C32183 +
             (C6248 - C6247) * C758 + (C6250 - C6249) * C32171 +
             (C6252 - C6251) * C759 + (C6254 - C6253) * C32148) *
                C10013 +
            ((C6991 - C6990) * C757 + (C6993 - C6992) * C32183 +
             (C6995 - C6994) * C758 + (C6997 - C6996) * C32171 +
             (C9639 - C9638) * C759 + (C9641 - C9640) * C32148) *
                C10014 +
            ((C6999 - C6998) * C757 + (C7001 - C7000) * C32183 +
             (C7003 - C7002) * C758 + (C7005 - C7004) * C32171 +
             (C31772 * C6986 - C5980 * C6985) * C759 +
             (C31772 * C6988 - C5980 * C6987) * C32148) *
                C32151) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C118 +
             (C31772 * C140 - C5980 * C131) * C31864) *
                C11600 +
            ((C6805 - C6806) * C118 + (C6807 - C6808) * C31864) * C11601 +
            C11750 * C11602 + C11755 * C11603 + C11758 * C11604) *
               C31835 * C440 +
           (((C6058 - C6057) * C118 + (C6060 - C6059) * C31864) * C11600 +
            (C7316 * C118 + C7317 * C31864) * C11601 +
            (C7320 * C118 + C7321 * C31864) * C11602 +
            ((C6821 - C6822) * C118 + (C6823 - C6824) * C31864) * C11603 +
            ((C5980 * C6793 - C31772 * C6797) * C118 +
             (C5980 * C6798 - C31772 * C6802) * C31864) *
                C11604) *
               C31835 * C441) *
              C442 +
          ((((C5980 * C120 - C31772 * C127) * C118 +
             (C5980 * C132 - C31772 * C141) * C31864) *
                C11600 +
            ((C7156 - C7157) * C118 + (C7158 - C7159) * C31864) * C11601 +
            ((C7160 - C7161) * C118 + (C7162 - C7163) * C31864) * C11602 +
            ((C5980 * C1926 - C31772 * C1932) * C118 +
             (C5980 * C1935 - C31772 * C1944) * C31864) *
                C11603 +
            ((C5980 * C1929 - C31772 * C1938) * C118 +
             (C5980 * C1941 - C31772 * C1947) * C31864) *
                C11604) *
               C31835 * C440 +
           (((C6244 - C6243) * C118 + (C6246 - C6245) * C31864) * C11600 +
            ((C6991 - C6990) * C118 + (C6993 - C6992) * C31864) * C11601 +
            ((C6999 - C6998) * C118 + (C7001 - C7000) * C31864) * C11602 +
            ((C31772 * C2472 - C5980 * C2469) * C118 +
             (C31772 * C2478 - C5980 * C2475) * C31864) *
                C11603 +
            ((C31772 * C11841 - C5980 * C11840) * C118 +
             (C31772 * C11843 - C5980 * C11842) * C31864) *
                C11604) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                 C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                 C105 * C130 - C117 * C123) *
                    C118 +
                (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                 C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                 C105 * C144 - C117 * C135) *
                    C31864) *
                   C31876 * C530 +
               ((C113 * C318 - C101 * C328 + C114 * C319 - C102 * C329 +
                 C115 * C320 - C103 * C330 + C116 * C321 - C104 * C331 +
                 C117 * C322 - C105 * C332) *
                    C118 +
                (C113 * C333 - C101 * C348 + C114 * C334 - C102 * C349 +
                 C115 * C335 - C103 * C350 + C116 * C336 - C104 * C351 +
                 C117 * C337 - C105 * C352) *
                    C31864) *
                   C31876 * C531) *
                  C440 +
              (((C113 * C213 - C101 * C223 + C114 * C214 - C102 * C224 +
                 C115 * C215 - C103 * C225 + C116 * C216 - C104 * C226 +
                 C117 * C217 - C105 * C227) *
                    C118 +
                (C113 * C228 - C101 * C243 + C114 * C229 - C102 * C244 +
                 C115 * C230 - C103 * C245 + C116 * C231 - C104 * C246 +
                 C117 * C232 - C105 * C247) *
                    C31864) *
                   C31876 * C530 +
               ((C101 * C623 - C113 * C618 + C102 * C624 - C114 * C619 +
                 C103 * C625 - C115 * C620 + C104 * C626 - C116 * C621 +
                 C105 * C627 - C117 * C622) *
                    C118 +
                (C101 * C633 - C113 * C628 + C102 * C634 - C114 * C629 +
                 C103 * C635 - C115 * C630 + C104 * C636 - C116 * C631 +
                 C105 * C637 - C117 * C632) *
                    C31864) *
                   C31876 * C531) *
                  C441) *
             C31809 +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
                 C32137 * C128 - C756 * C121) *
                    C757 +
                (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
                 C32137 * C142 - C756 * C133) *
                    C32183 +
                (C895 - C896 + C897 - C898 + C899 - C900) * C758 +
                (C901 - C902 + C903 - C904 + C905 - C906) * C32171 +
                C939 * C759 + C940 * C32148) *
                   C31876 * C530 +
               ((C754 * C318 - C748 * C328 + C755 * C319 - C749 * C329 +
                 C756 * C320 - C32137 * C330) *
                    C757 +
                (C754 * C333 - C748 * C348 + C755 * C334 - C749 * C349 +
                 C756 * C335 - C32137 * C350) *
                    C32183 +
                (C1569 - C1570 + C1571 - C1572 + C1573 - C1574) * C758 +
                (C1575 - C1576 + C1577 - C1578 + C1579 - C1580) * C32171 +
                (C1581 - C1582 + C1583 - C1584 + C1585 - C1586) * C759 +
                (C1587 - C1588 + C1589 - C1590 + C1591 - C1592) * C32148) *
                   C31876 * C531) *
                  C440 +
              (((C896 - C895 + C898 - C897 + C900 - C899) * C757 +
                (C902 - C901 + C904 - C903 + C906 - C905) * C32183 +
                (C908 - C907 + C910 - C909 + C912 - C911) * C758 +
                (C914 - C913 + C916 - C915 + C918 - C917) * C32171 +
                (C919 - C920 + C921 - C922 + C923 - C924) * C759 +
                (C925 - C926 + C927 - C928 + C929 - C930) * C32148) *
                   C31876 * C530 +
               ((C1570 - C1569 + C1572 - C1571 + C1574 - C1573) * C757 +
                (C1576 - C1575 + C1578 - C1577 + C1580 - C1579) * C32183 +
                (C1582 - C1581 + C1584 - C1583 + C1586 - C1585) * C758 +
                (C1588 - C1587 + C1590 - C1589 + C1592 - C1591) * C32171 +
                (C748 * C1559 - C754 * C1556 + C749 * C1560 - C755 * C1557 +
                 C32137 * C1561 - C756 * C1558) *
                    C759 +
                (C748 * C1565 - C754 * C1562 + C749 * C1566 - C755 * C1563 +
                 C32137 * C1567 - C756 * C1564) *
                    C32148) *
                   C31876 * C531) *
                  C441) *
             C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
              C32137 * C128 - C756 * C121) *
                 C118 +
             (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
              C32137 * C142 - C756 * C133) *
                 C31864) *
                C32184 +
            ((C1950 - C1951 + C1952 - C1953 + C1954 - C1955) * C118 +
             (C1956 - C1957 + C1958 - C1959 + C1960 - C1961) * C31864) *
                C32173 +
            C1998 * C32151) *
               C530 +
           (((C1951 - C1950 + C1953 - C1952 + C1955 - C1954) * C118 +
             (C1957 - C1956 + C1959 - C1958 + C1961 - C1960) * C31864) *
                C32184 +
            ((C1963 - C1962 + C1965 - C1964 + C1967 - C1966) * C118 +
             (C1969 - C1968 + C1971 - C1970 + C1973 - C1972) * C31864) *
                C32173 +
            ((C1974 - C1975 + C1976 - C1977 + C1978 - C1979) * C118 +
             (C1980 - C1981 + C1982 - C1983 + C1984 - C1985) * C31864) *
                C32151) *
               C531) *
              C440 +
          ((((C896 - C895 + C898 - C897 + C900 - C899) * C118 +
             (C902 - C901 + C904 - C903 + C906 - C905) * C31864) *
                C32184 +
            ((C1569 - C1570 + C1571 - C1572 + C1573 - C1574) * C118 +
             (C1575 - C1576 + C1577 - C1578 + C1579 - C1580) * C31864) *
                C32173 +
            ((C2481 - C2482 + C2483 - C2484 + C2485 - C2486) * C118 +
             (C2487 - C2488 + C2489 - C2490 + C2491 - C2492) * C31864) *
                C32151) *
               C530 +
           (((C1570 - C1569 + C1572 - C1571 + C1574 - C1573) * C118 +
             (C1576 - C1575 + C1578 - C1577 + C1580 - C1579) * C31864) *
                C32184 +
            ((C2482 - C2481 + C2484 - C2483 + C2486 - C2485) * C118 +
             (C2488 - C2487 + C2490 - C2489 + C2492 - C2491) * C31864) *
                C32173 +
            ((C748 * C2471 - C754 * C2468 + C749 * C2472 - C755 * C2469 +
              C32137 * C2473 - C756 * C2470) *
                 C118 +
             (C748 * C2477 - C754 * C2474 + C749 * C2478 - C755 * C2475 +
              C32137 * C2479 - C756 * C2476) *
                 C31864) *
                C32151) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C5157 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C5151 +
            (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C5158 +
            (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C5152 +
            C5315 * C5159 + C5316 * C32148) *
               C31876 * C530 +
           ((C5154 * C318 - C32180 * C328 + C5155 * C319 - C32167 * C329 +
             C5156 * C320 - C32137 * C330) *
                C5157 +
            (C5154 * C333 - C32180 * C348 + C5155 * C334 - C32167 * C349 +
             C5156 * C335 - C32137 * C350) *
                C5151 +
            (C5889 - C5890 + C5891 - C5892 + C5893 - C5894) * C5158 +
            (C5895 - C5896 + C5897 - C5898 + C5899 - C5900) * C5152 +
            (C5901 - C5902 + C5903 - C5904 + C5905 - C5906) * C5159 +
            (C5907 - C5908 + C5909 - C5910 + C5911 - C5912) * C32148) *
               C31876 * C531) *
              C440 +
          (((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C5157 +
            (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C5151 +
            (C5284 - C5283 + C5286 - C5285 + C5288 - C5287) * C5158 +
            (C5290 - C5289 + C5292 - C5291 + C5294 - C5293) * C5152 +
            (C5295 - C5296 + C5297 - C5298 + C5299 - C5300) * C5159 +
            (C5301 - C5302 + C5303 - C5304 + C5305 - C5306) * C32148) *
               C31876 * C530 +
           ((C5890 - C5889 + C5892 - C5891 + C5894 - C5893) * C5157 +
            (C5896 - C5895 + C5898 - C5897 + C5900 - C5899) * C5151 +
            (C5902 - C5901 + C5904 - C5903 + C5906 - C5905) * C5158 +
            (C5908 - C5907 + C5910 - C5909 + C5912 - C5911) * C5152 +
            (C32180 * C1559 - C5154 * C1556 + C32167 * C1560 - C5155 * C1557 +
             C32137 * C1561 - C5156 * C1558) *
                C5159 +
            (C32180 * C1565 - C5154 * C1562 + C32167 * C1566 - C5155 * C1563 +
             C32137 * C1567 - C5156 * C1564) *
                C32148) *
               C31876 * C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C5981 +
            (C31772 * C140 - C5980 * C131) * C5975 + (C6057 - C6058) * C5982 +
            (C6059 - C6060) * C5976 + C6077 * C5983 + C6078 * C5977 +
            C6079 * C5984 + C6080 * C5978 + C6081 * C5985 + C6082 * C5979) *
               C31876 * C530 +
           ((C5980 * C318 - C31772 * C328) * C5981 +
            (C5980 * C333 - C31772 * C348) * C5975 + (C6431 - C6432) * C5982 +
            (C6433 - C6434) * C5976 + (C6435 - C6436) * C5983 +
            (C6437 - C6438) * C5977 + (C6439 - C6440) * C5984 +
            (C6441 - C6442) * C5978 + (C6443 - C6444) * C5985 +
            (C6445 - C6446) * C5979) *
               C31876 * C531) *
              C440 +
          (((C6058 - C6057) * C5981 + (C6060 - C6059) * C5975 +
            (C6062 - C6061) * C5982 + (C6064 - C6063) * C5976 +
            (C6066 - C6065) * C5983 + (C6068 - C6067) * C5977 +
            (C6070 - C6069) * C5984 + (C6072 - C6071) * C5978 +
            (C6073 - C6074) * C5985 + (C6075 - C6076) * C5979) *
               C31876 * C530 +
           ((C6432 - C6431) * C5981 + (C6434 - C6433) * C5975 +
            (C6436 - C6435) * C5982 + (C6438 - C6437) * C5976 +
            (C6440 - C6439) * C5983 + (C6442 - C6441) * C5977 +
            (C6444 - C6443) * C5984 + (C6446 - C6445) * C5978 +
            (C31772 * C6427 - C5980 * C6426) * C5985 +
            (C31772 * C6429 - C5980 * C6428) * C5979) *
               C31876 * C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C5157 +
             (C31772 * C140 - C5980 * C131) * C5151 + (C6057 - C6058) * C5158 +
             (C6059 - C6060) * C5152 + C6077 * C5159 + C6078 * C32148) *
                C32184 +
            ((C6805 - C6806) * C5157 + (C6807 - C6808) * C5151 + C7314 * C5158 +
             C7315 * C5152 + C6667 * C5159 + C6668 * C32148) *
                C32173 +
            C6839 * C32151) *
               C530 +
           (((C6806 - C6805) * C5157 + (C6808 - C6807) * C5151 + C7316 * C5158 +
             C7317 * C5152 + C7318 * C5159 + C7319 * C32148) *
                C32184 +
            ((C6810 - C6809) * C5157 + (C6812 - C6811) * C5151 + C7320 * C5158 +
             C7321 * C5152 + C7322 * C5159 + C7323 * C32148) *
                C32173 +
            ((C6817 - C6818) * C5157 + (C6819 - C6820) * C5151 +
             (C6821 - C6822) * C5158 + (C6823 - C6824) * C5152 +
             (C6825 - C6826) * C5159 + (C6827 - C6828) * C32148) *
                C32151) *
               C531) *
              C440 +
          ((((C6058 - C6057) * C5157 + (C6060 - C6059) * C5151 +
             (C6062 - C6061) * C5158 + (C6064 - C6063) * C5152 +
             (C6066 - C6065) * C5159 + (C6068 - C6067) * C32148) *
                C32184 +
            (C7316 * C5157 + C7317 * C5151 + C7318 * C5158 + C7319 * C5152 +
             (C6439 - C6440) * C5159 + (C6441 - C6442) * C32148) *
                C32173 +
            (C7320 * C5157 + C7321 * C5151 + C7322 * C5158 + C7323 * C5152 +
             (C6677 - C6678) * C5159 + (C6679 - C6680) * C32148) *
                C32151) *
               C530 +
           ((C7314 * C5157 + C7315 * C5151 + C6667 * C5158 + C6668 * C5152 +
             (C6440 - C6439) * C5159 + (C6442 - C6441) * C32148) *
                C32184 +
            (C6813 * C5157 + C6814 * C5151 + C6681 * C5158 + C6682 * C5152 +
             (C6678 - C6677) * C5159 + (C6680 - C6679) * C32148) *
                C32173 +
            ((C6822 - C6821) * C5157 + (C6824 - C6823) * C5151 +
             (C6826 - C6825) * C5158 + (C6828 - C6827) * C5152 +
             (C31772 * C7310 - C5980 * C7309) * C5159 +
             (C31772 * C7312 - C5980 * C7311) * C32148) *
                C32151) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
              C32137 * C128 - C5156 * C121) *
                 C118 +
             (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
              C32137 * C142 - C5156 * C133) *
                 C31864) *
                C10013 +
            ((C10237 - C10238 + C10239 - C10240 + C10241 - C10242) * C118 +
             (C10243 - C10244 + C10245 - C10246 + C10247 - C10248) * C31864) *
                C10014 +
            C10285 * C32151) *
               C530 +
           (((C10238 - C10237 + C10240 - C10239 + C10242 - C10241) * C118 +
             (C10244 - C10243 + C10246 - C10245 + C10248 - C10247) * C31864) *
                C10013 +
            ((C10250 - C10249 + C10252 - C10251 + C10254 - C10253) * C118 +
             (C10256 - C10255 + C10258 - C10257 + C10260 - C10259) * C31864) *
                C10014 +
            ((C10261 - C10262 + C10263 - C10264 + C10265 - C10266) * C118 +
             (C10267 - C10268 + C10269 - C10270 + C10271 - C10272) * C31864) *
                C32151) *
               C531) *
              C440 +
          ((((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C118 +
             (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C31864) *
                C10013 +
            ((C5889 - C5890 + C5891 - C5892 + C5893 - C5894) * C118 +
             (C5895 - C5896 + C5897 - C5898 + C5899 - C5900) * C31864) *
                C10014 +
            ((C10748 - C10749 + C10750 - C10751 + C10752 - C10753) * C118 +
             (C10754 - C10755 + C10756 - C10757 + C10758 - C10759) * C31864) *
                C32151) *
               C530 +
           (((C5890 - C5889 + C5892 - C5891 + C5894 - C5893) * C118 +
             (C5896 - C5895 + C5898 - C5897 + C5900 - C5899) * C31864) *
                C10013 +
            ((C10749 - C10748 + C10751 - C10750 + C10753 - C10752) * C118 +
             (C10755 - C10754 + C10757 - C10756 + C10759 - C10758) * C31864) *
                C10014 +
            ((C32180 * C2471 - C5154 * C2468 + C32167 * C2472 - C5155 * C2469 +
              C32137 * C2473 - C5156 * C2470) *
                 C118 +
             (C32180 * C2477 - C5154 * C2474 + C32167 * C2478 - C5155 * C2475 +
              C32137 * C2479 - C5156 * C2476) *
                 C31864) *
                C32151) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C757 +
             (C31772 * C140 - C5980 * C131) * C32183 + (C6057 - C6058) * C758 +
             (C6059 - C6060) * C32171 + C6077 * C759 + C6078 * C32148) *
                C10013 +
            ((C6805 - C6806) * C757 + (C6807 - C6808) * C32183 + C7314 * C758 +
             C7315 * C32171 + C6667 * C759 + C6668 * C32148) *
                C10014 +
            C11100 * C32151) *
               C530 +
           (((C6806 - C6805) * C757 + (C6808 - C6807) * C32183 + C7316 * C758 +
             C7317 * C32171 + C7318 * C759 + C7319 * C32148) *
                C10013 +
            ((C6810 - C6809) * C757 + (C6812 - C6811) * C32183 + C7320 * C758 +
             C7321 * C32171 + C7322 * C759 + C7323 * C32148) *
                C10014 +
            ((C6817 - C6818) * C757 + (C6819 - C6820) * C32183 +
             (C6821 - C6822) * C758 + (C6823 - C6824) * C32171 +
             (C6825 - C6826) * C759 + (C6827 - C6828) * C32148) *
                C32151) *
               C531) *
              C440 +
          ((((C6058 - C6057) * C757 + (C6060 - C6059) * C32183 +
             (C6062 - C6061) * C758 + (C6064 - C6063) * C32171 +
             (C6066 - C6065) * C759 + (C6068 - C6067) * C32148) *
                C10013 +
            (C7316 * C757 + C7317 * C32183 + C7318 * C758 + C7319 * C32171 +
             C9902 * C759 + C9903 * C32148) *
                C10014 +
            (C7320 * C757 + C7321 * C32183 + C7322 * C758 + C7323 * C32171 +
             (C6677 - C6678) * C759 + (C6679 - C6680) * C32148) *
                C32151) *
               C530 +
           ((C7314 * C757 + C7315 * C32183 + C6667 * C758 + C6668 * C32171 +
             C9408 * C759 + C9409 * C32148) *
                C10013 +
            (C6813 * C757 + C6814 * C32183 + C6681 * C758 + C6682 * C32171 +
             (C6678 - C6677) * C759 + (C6680 - C6679) * C32148) *
                C10014 +
            ((C6822 - C6821) * C757 + (C6824 - C6823) * C32183 +
             (C6826 - C6825) * C758 + (C6828 - C6827) * C32171 +
             (C31772 * C7310 - C5980 * C7309) * C759 +
             (C31772 * C7312 - C5980 * C7311) * C32148) *
                C32151) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C118 +
             (C31772 * C140 - C5980 * C131) * C31864) *
                C11600 +
            ((C6805 - C6806) * C118 + (C6807 - C6808) * C31864) * C11601 +
            C11750 * C11602 + C11755 * C11603 + C11758 * C11604) *
               C530 +
           (((C6806 - C6805) * C118 + (C6808 - C6807) * C31864) * C11600 +
            ((C6810 - C6809) * C118 + (C6812 - C6811) * C31864) * C11601 +
            ((C6817 - C6818) * C118 + (C6819 - C6820) * C31864) * C11602 +
            ((C11743 - C11742) * C118 + (C11745 - C11744) * C31864) * C11603 +
            ((C11746 - C11747) * C118 + (C11748 - C11749) * C31864) * C11604) *
               C531) *
              C440 +
          ((((C6058 - C6057) * C118 + (C6060 - C6059) * C31864) * C11600 +
            (C7316 * C118 + C7317 * C31864) * C11601 +
            (C7320 * C118 + C7321 * C31864) * C11602 +
            ((C6821 - C6822) * C118 + (C6823 - C6824) * C31864) * C11603 +
            ((C12025 - C12026) * C118 + (C12027 - C12028) * C31864) * C11604) *
               C530 +
           ((C7314 * C118 + C7315 * C31864) * C11600 +
            (C6813 * C118 + C6814 * C31864) * C11601 +
            ((C6822 - C6821) * C118 + (C6824 - C6823) * C31864) * C11602 +
            ((C12026 - C12025) * C118 + (C12028 - C12027) * C31864) * C11603 +
            ((C31772 * C12021 - C5980 * C12020) * C118 +
             (C31772 * C12023 - C5980 * C12022) * C31864) *
                C11604) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (-0.25 * std::pow(Pi, 2.5) *
             (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                C105 * C130 - C117 * C123) *
                   C118 +
               (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                C105 * C144 - C117 * C135) *
                   C31864) *
                  C31876 * C31835 * C31821 * C110 +
              ((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
                C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
                C117 * C124 - C105 * C136) *
                   C118 +
               (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
                C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
                C117 * C137 - C105 * C145) *
                   C31864) *
                  C31876 * C31835 * C31821 * C111 +
              ((C101 * C128 - C113 * C121 + C102 * C129 - C114 * C122 +
                C103 * C130 - C115 * C123 + C104 * C136 - C116 * C124 +
                C105 * C138 - C117 * C125) *
                   C118 +
               (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C134 +
                C103 * C144 - C115 * C135 + C104 * C145 - C116 * C137 +
                C105 * C146 - C117 * C139) *
                   C31864) *
                  C31876 * C31835 * C31821 * C112) -
         0.25 * std::pow(Pi, 2.5) *
             (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                C105 * C130 - C117 * C123) *
                   C118 +
               (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                C105 * C144 - C117 * C135) *
                   C31864) *
                  C31876 * C31835 * C209 +
              ((C113 * C213 - C101 * C223 + C114 * C214 - C102 * C224 +
                C115 * C215 - C103 * C225 + C116 * C216 - C104 * C226 +
                C117 * C217 - C105 * C227) *
                   C118 +
               (C113 * C228 - C101 * C243 + C114 * C229 - C102 * C244 +
                C115 * C230 - C103 * C245 + C116 * C231 - C104 * C246 +
                C117 * C232 - C105 * C247) *
                   C31864) *
                  C31876 * C31835 * C210 +
              ((C101 * C233 - C113 * C218 + C102 * C234 - C114 * C219 +
                C103 * C235 - C115 * C220 + C104 * C236 - C116 * C221 +
                C105 * C237 - C117 * C222) *
                   C118 +
               (C101 * C248 - C113 * C238 + C102 * C249 - C114 * C239 +
                C103 * C250 - C115 * C240 + C104 * C251 - C116 * C241 +
                C105 * C252 - C117 * C242) *
                   C31864) *
                  C31876 * C31835 * C211) *
             C31809 +
         0.5 * std::pow(Pi, 2.5) *
             (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                C105 * C130 - C117 * C123) *
                   C118 +
               (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                C105 * C144 - C117 * C135) *
                   C31864) *
                  C31876 * C315 +
              ((C113 * C318 - C101 * C328 + C114 * C319 - C102 * C329 +
                C115 * C320 - C103 * C330 + C116 * C321 - C104 * C331 +
                C117 * C322 - C105 * C332) *
                   C118 +
               (C113 * C333 - C101 * C348 + C114 * C334 - C102 * C349 +
                C115 * C335 - C103 * C350 + C116 * C336 - C104 * C351 +
                C117 * C337 - C105 * C352) *
                   C31864) *
                  C31876 * C316 +
              ((C101 * C338 - C113 * C323 + C102 * C339 - C114 * C324 +
                C103 * C340 - C115 * C325 + C104 * C341 - C116 * C326 +
                C105 * C342 - C117 * C327) *
                   C118 +
               (C101 * C353 - C113 * C343 + C102 * C354 - C114 * C344 +
                C103 * C355 - C115 * C345 + C104 * C356 - C116 * C346 +
                C105 * C357 - C117 * C347) *
                   C31864) *
                  C31876 * C317) *
             C31821 * C31809 -
         0.25 * std::pow(Pi, 2.5) *
             (((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
                C32137 * C128 - C756 * C121) *
                   C757 +
               (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
                C32137 * C142 - C756 * C133) *
                   C32183 +
               (C748 * C223 - C754 * C213 + C749 * C224 - C755 * C214 +
                C32137 * C225 - C756 * C215) *
                   C758 +
               (C748 * C243 - C754 * C228 + C749 * C244 - C755 * C229 +
                C32137 * C245 - C756 * C230) *
                   C32171 +
               (C748 * C233 - C754 * C218 + C749 * C234 - C755 * C219 +
                C32137 * C235 - C756 * C220) *
                   C759 +
               (C748 * C248 - C754 * C238 + C749 * C249 - C755 * C239 +
                C32137 * C250 - C756 * C240) *
                   C32148) *
                  C31876 * C31835 * C31821 * C110 +
              ((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
                C756 * C122 - C32137 * C129) *
                   C757 +
               (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
                C756 * C134 - C32137 * C143) *
                   C32183 +
               (C754 * C214 - C748 * C224 + C755 * C215 - C749 * C225 +
                C756 * C216 - C32137 * C226) *
                   C758 +
               (C754 * C229 - C748 * C244 + C755 * C230 - C749 * C245 +
                C756 * C231 - C32137 * C246) *
                   C32171 +
               (C754 * C219 - C748 * C234 + C755 * C220 - C749 * C235 +
                C756 * C221 - C32137 * C236) *
                   C759 +
               (C754 * C239 - C748 * C249 + C755 * C240 - C749 * C250 +
                C756 * C241 - C32137 * C251) *
                   C32148) *
                  C31876 * C31835 * C31821 * C111 +
              ((C748 * C128 - C754 * C121 + C749 * C129 - C755 * C122 +
                C32137 * C130 - C756 * C123) *
                   C757 +
               (C748 * C142 - C754 * C133 + C749 * C143 - C755 * C134 +
                C32137 * C144 - C756 * C135) *
                   C32183 +
               (C748 * C225 - C754 * C215 + C749 * C226 - C755 * C216 +
                C32137 * C227 - C756 * C217) *
                   C758 +
               (C748 * C245 - C754 * C230 + C749 * C246 - C755 * C231 +
                C32137 * C247 - C756 * C232) *
                   C32171 +
               (C748 * C235 - C754 * C220 + C749 * C236 - C755 * C221 +
                C32137 * C237 - C756 * C222) *
                   C759 +
               (C748 * C250 - C754 * C240 + C749 * C251 - C755 * C241 +
                C32137 * C252 - C756 * C242) *
                   C32148) *
                  C31876 * C31835 * C31821 * C112) -
         0.25 * std::pow(Pi, 2.5) *
             (((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
                C32137 * C128 - C756 * C121) *
                   C757 +
               (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
                C32137 * C142 - C756 * C133) *
                   C32183 +
               (C895 - C896 + C897 - C898 + C899 - C900) * C758 +
               (C901 - C902 + C903 - C904 + C905 - C906) * C32171 +
               C939 * C759 + C940 * C32148) *
                  C31876 * C31835 * C209 +
              ((C896 - C895 + C898 - C897 + C900 - C899) * C757 +
               (C902 - C901 + C904 - C903 + C906 - C905) * C32183 +
               (C908 - C907 + C910 - C909 + C912 - C911) * C758 +
               (C914 - C913 + C916 - C915 + C918 - C917) * C32171 +
               (C919 - C920 + C921 - C922 + C923 - C924) * C759 +
               (C925 - C926 + C927 - C928 + C929 - C930) * C32148) *
                  C31876 * C31835 * C210 +
              (C939 * C757 + C940 * C32183 +
               (C920 - C919 + C922 - C921 + C924 - C923) * C758 +
               (C926 - C925 + C928 - C927 + C930 - C929) * C32171 +
               (C748 * C882 - C754 * C873 + C749 * C883 - C755 * C874 +
                C32137 * C884 - C756 * C875) *
                   C759 +
               (C748 * C891 - C754 * C885 + C749 * C892 - C755 * C886 +
                C32137 * C893 - C756 * C887) *
                   C32148) *
                  C31876 * C31835 * C211) *
             C31809 +
         0.5 * std::pow(Pi, 2.5) *
             (((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
                C32137 * C128 - C756 * C121) *
                   C757 +
               (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
                C32137 * C142 - C756 * C133) *
                   C32183 +
               (C895 - C896 + C897 - C898 + C899 - C900) * C758 +
               (C901 - C902 + C903 - C904 + C905 - C906) * C32171 +
               C939 * C759 + C940 * C32148) *
                  C31876 * C315 +
              ((C754 * C318 - C748 * C328 + C755 * C319 - C749 * C329 +
                C756 * C320 - C32137 * C330) *
                   C757 +
               (C754 * C333 - C748 * C348 + C755 * C334 - C749 * C349 +
                C756 * C335 - C32137 * C350) *
                   C32183 +
               (C754 * C618 - C748 * C623 + C755 * C619 - C749 * C624 +
                C756 * C620 - C32137 * C625) *
                   C758 +
               (C754 * C628 - C748 * C633 + C755 * C629 - C749 * C634 +
                C756 * C630 - C32137 * C635) *
                   C32171 +
               (C754 * C1050 - C748 * C1059 + C755 * C1051 - C749 * C1060 +
                C756 * C1052 - C32137 * C1061) *
                   C759 +
               (C754 * C1062 - C748 * C1077 + C755 * C1063 - C749 * C1078 +
                C756 * C1064 - C32137 * C1079) *
                   C32148) *
                  C31876 * C316 +
              ((C748 * C338 - C754 * C323 + C749 * C339 - C755 * C324 +
                C32137 * C340 - C756 * C325) *
                   C757 +
               (C748 * C353 - C754 * C343 + C749 * C354 - C755 * C344 +
                C32137 * C355 - C756 * C345) *
                   C32183 +
               (C748 * C1065 - C754 * C1053 + C749 * C1066 - C755 * C1054 +
                C32137 * C1067 - C756 * C1055) *
                   C758 +
               (C748 * C1080 - C754 * C1068 + C749 * C1081 - C755 * C1069 +
                C32137 * C1082 - C756 * C1070) *
                   C32171 +
               (C748 * C1071 - C754 * C1056 + C749 * C1072 - C755 * C1057 +
                C32137 * C1073 - C756 * C1058) *
                   C759 +
               (C748 * C1083 - C754 * C1074 + C749 * C1084 - C755 * C1075 +
                C32137 * C1085 - C756 * C1076) *
                   C32148) *
                  C31876 * C317) *
             C31821 * C31809 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
                 C32137 * C128 - C756 * C121) *
                    C118 +
                (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
                 C32137 * C142 - C756 * C133) *
                    C31864) *
                   C32184 +
               ((C748 * C328 - C754 * C318 + C749 * C329 - C755 * C319 +
                 C32137 * C330 - C756 * C320) *
                    C118 +
                (C748 * C348 - C754 * C333 + C749 * C349 - C755 * C334 +
                 C32137 * C350 - C756 * C335) *
                    C31864) *
                   C32173 +
               ((C748 * C338 - C754 * C323 + C749 * C339 - C755 * C324 +
                 C32137 * C340 - C756 * C325) *
                    C118 +
                (C748 * C353 - C754 * C343 + C749 * C354 - C755 * C344 +
                 C32137 * C355 - C756 * C345) *
                    C31864) *
                   C32151) *
                  C31835 * C31821 * C110 +
              (((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
                 C756 * C122 - C32137 * C129) *
                    C118 +
                (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
                 C756 * C134 - C32137 * C143) *
                    C31864) *
                   C32184 +
               ((C754 * C319 - C748 * C329 + C755 * C320 - C749 * C330 +
                 C756 * C321 - C32137 * C331) *
                    C118 +
                (C754 * C334 - C748 * C349 + C755 * C335 - C749 * C350 +
                 C756 * C336 - C32137 * C351) *
                    C31864) *
                   C32173 +
               ((C754 * C324 - C748 * C339 + C755 * C325 - C749 * C340 +
                 C756 * C326 - C32137 * C341) *
                    C118 +
                (C754 * C344 - C748 * C354 + C755 * C345 - C749 * C355 +
                 C756 * C346 - C32137 * C356) *
                    C31864) *
                   C32151) *
                  C31835 * C31821 * C111 +
              (((C748 * C128 - C754 * C121 + C749 * C129 - C755 * C122 +
                 C32137 * C130 - C756 * C123) *
                    C118 +
                (C748 * C142 - C754 * C133 + C749 * C143 - C755 * C134 +
                 C32137 * C144 - C756 * C135) *
                    C31864) *
                   C32184 +
               ((C748 * C330 - C754 * C320 + C749 * C331 - C755 * C321 +
                 C32137 * C332 - C756 * C322) *
                    C118 +
                (C748 * C350 - C754 * C335 + C749 * C351 - C755 * C336 +
                 C32137 * C352 - C756 * C337) *
                    C31864) *
                   C32173 +
               ((C748 * C340 - C754 * C325 + C749 * C341 - C755 * C326 +
                 C32137 * C342 - C756 * C327) *
                    C118 +
                (C748 * C355 - C754 * C345 + C749 * C356 - C755 * C346 +
                 C32137 * C357 - C756 * C347) *
                    C31864) *
                   C32151) *
                  C31835 * C31821 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
                 C32137 * C128 - C756 * C121) *
                    C118 +
                (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
                 C32137 * C142 - C756 * C133) *
                    C31864) *
                   C32184 +
               ((C748 * C328 - C754 * C318 + C749 * C329 - C755 * C319 +
                 C32137 * C330 - C756 * C320) *
                    C118 +
                (C748 * C348 - C754 * C333 + C749 * C349 - C755 * C334 +
                 C32137 * C350 - C756 * C335) *
                    C31864) *
                   C32173 +
               ((C748 * C338 - C754 * C323 + C749 * C339 - C755 * C324 +
                 C32137 * C340 - C756 * C325) *
                    C118 +
                (C748 * C353 - C754 * C343 + C749 * C354 - C755 * C344 +
                 C32137 * C355 - C756 * C345) *
                    C31864) *
                   C32151) *
                  C31835 * C209 +
              (((C896 - C895 + C898 - C897 + C900 - C899) * C118 +
                (C902 - C901 + C904 - C903 + C906 - C905) * C31864) *
                   C32184 +
               ((C1569 - C1570 + C1571 - C1572 + C1573 - C1574) * C118 +
                (C1575 - C1576 + C1577 - C1578 + C1579 - C1580) * C31864) *
                   C32173 +
               ((C754 * C1053 - C748 * C1065 + C755 * C1054 - C749 * C1066 +
                 C756 * C1055 - C32137 * C1067) *
                    C118 +
                (C754 * C1068 - C748 * C1080 + C755 * C1069 - C749 * C1081 +
                 C756 * C1070 - C32137 * C1082) *
                    C31864) *
                   C32151) *
                  C31835 * C210 +
              ((C939 * C118 + C940 * C31864) * C32184 +
               ((C1582 - C1581 + C1584 - C1583 + C1586 - C1585) * C118 +
                (C1588 - C1587 + C1590 - C1589 + C1592 - C1591) * C31864) *
                   C32173 +
               ((C748 * C1071 - C754 * C1056 + C749 * C1072 - C755 * C1057 +
                 C32137 * C1073 - C756 * C1058) *
                    C118 +
                (C748 * C1083 - C754 * C1074 + C749 * C1084 - C755 * C1075 +
                 C32137 * C1085 - C756 * C1076) *
                    C31864) *
                   C32151) *
                  C31835 * C211) *
             C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
             C32137 * C128 - C756 * C121) *
                C118 +
            (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
             C32137 * C142 - C756 * C133) *
                C31864) *
               C32184 +
           ((C1950 - C1951 + C1952 - C1953 + C1954 - C1955) * C118 +
            (C1956 - C1957 + C1958 - C1959 + C1960 - C1961) * C31864) *
               C32173 +
           C1998 * C32151) *
              C315 +
          (((C1951 - C1950 + C1953 - C1952 + C1955 - C1954) * C118 +
            (C1957 - C1956 + C1959 - C1958 + C1961 - C1960) * C31864) *
               C32184 +
           ((C1963 - C1962 + C1965 - C1964 + C1967 - C1966) * C118 +
            (C1969 - C1968 + C1971 - C1970 + C1973 - C1972) * C31864) *
               C32173 +
           ((C1974 - C1975 + C1976 - C1977 + C1978 - C1979) * C118 +
            (C1980 - C1981 + C1982 - C1983 + C1984 - C1985) * C31864) *
               C32151) *
              C316 +
          (C1998 * C32184 +
           ((C1975 - C1974 + C1977 - C1976 + C1979 - C1978) * C118 +
            (C1981 - C1980 + C1983 - C1982 + C1985 - C1984) * C31864) *
               C32173 +
           ((C748 * C1937 - C754 * C1928 + C749 * C1938 - C755 * C1929 +
             C32137 * C1939 - C756 * C1930) *
                C118 +
            (C748 * C1946 - C754 * C1940 + C749 * C1947 - C755 * C1941 +
             C32137 * C1948 - C756 * C1942) *
                C31864) *
               C32151) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
            C32137 * C128 - C5156 * C121) *
               C5157 +
           (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
            C32137 * C142 - C5156 * C133) *
               C5151 +
           (C32180 * C223 - C5154 * C213 + C32167 * C224 - C5155 * C214 +
            C32137 * C225 - C5156 * C215) *
               C5158 +
           (C32180 * C243 - C5154 * C228 + C32167 * C244 - C5155 * C229 +
            C32137 * C245 - C5156 * C230) *
               C5152 +
           (C32180 * C233 - C5154 * C218 + C32167 * C234 - C5155 * C219 +
            C32137 * C235 - C5156 * C220) *
               C5159 +
           (C32180 * C248 - C5154 * C238 + C32167 * C249 - C5155 * C239 +
            C32137 * C250 - C5156 * C240) *
               C32148) *
              C31876 * C31835 * C31821 * C110 +
          ((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
            C5156 * C122 - C32137 * C129) *
               C5157 +
           (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
            C5156 * C134 - C32137 * C143) *
               C5151 +
           (C5154 * C214 - C32180 * C224 + C5155 * C215 - C32167 * C225 +
            C5156 * C216 - C32137 * C226) *
               C5158 +
           (C5154 * C229 - C32180 * C244 + C5155 * C230 - C32167 * C245 +
            C5156 * C231 - C32137 * C246) *
               C5152 +
           (C5154 * C219 - C32180 * C234 + C5155 * C220 - C32167 * C235 +
            C5156 * C221 - C32137 * C236) *
               C5159 +
           (C5154 * C239 - C32180 * C249 + C5155 * C240 - C32167 * C250 +
            C5156 * C241 - C32137 * C251) *
               C32148) *
              C31876 * C31835 * C31821 * C111 +
          ((C32180 * C128 - C5154 * C121 + C32167 * C129 - C5155 * C122 +
            C32137 * C130 - C5156 * C123) *
               C5157 +
           (C32180 * C142 - C5154 * C133 + C32167 * C143 - C5155 * C134 +
            C32137 * C144 - C5156 * C135) *
               C5151 +
           (C32180 * C225 - C5154 * C215 + C32167 * C226 - C5155 * C216 +
            C32137 * C227 - C5156 * C217) *
               C5158 +
           (C32180 * C245 - C5154 * C230 + C32167 * C246 - C5155 * C231 +
            C32137 * C247 - C5156 * C232) *
               C5152 +
           (C32180 * C235 - C5154 * C220 + C32167 * C236 - C5155 * C221 +
            C32137 * C237 - C5156 * C222) *
               C5159 +
           (C32180 * C250 - C5154 * C240 + C32167 * C251 - C5155 * C241 +
            C32137 * C252 - C5156 * C242) *
               C32148) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
            C32137 * C128 - C5156 * C121) *
               C5157 +
           (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
            C32137 * C142 - C5156 * C133) *
               C5151 +
           (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C5158 +
           (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C5152 +
           C5315 * C5159 + C5316 * C32148) *
              C31876 * C31835 * C209 +
          ((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C5157 +
           (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C5151 +
           (C5284 - C5283 + C5286 - C5285 + C5288 - C5287) * C5158 +
           (C5290 - C5289 + C5292 - C5291 + C5294 - C5293) * C5152 +
           (C5295 - C5296 + C5297 - C5298 + C5299 - C5300) * C5159 +
           (C5301 - C5302 + C5303 - C5304 + C5305 - C5306) * C32148) *
              C31876 * C31835 * C210 +
          (C5315 * C5157 + C5316 * C5151 +
           (C5296 - C5295 + C5298 - C5297 + C5300 - C5299) * C5158 +
           (C5302 - C5301 + C5304 - C5303 + C5306 - C5305) * C5152 +
           (C32180 * C882 - C5154 * C873 + C32167 * C883 - C5155 * C874 +
            C32137 * C884 - C5156 * C875) *
               C5159 +
           (C32180 * C891 - C5154 * C885 + C32167 * C892 - C5155 * C886 +
            C32137 * C893 - C5156 * C887) *
               C32148) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
            C32137 * C128 - C5156 * C121) *
               C5157 +
           (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
            C32137 * C142 - C5156 * C133) *
               C5151 +
           (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C5158 +
           (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C5152 +
           C5315 * C5159 + C5316 * C32148) *
              C31876 * C315 +
          ((C5154 * C318 - C32180 * C328 + C5155 * C319 - C32167 * C329 +
            C5156 * C320 - C32137 * C330) *
               C5157 +
           (C5154 * C333 - C32180 * C348 + C5155 * C334 - C32167 * C349 +
            C5156 * C335 - C32137 * C350) *
               C5151 +
           (C5154 * C618 - C32180 * C623 + C5155 * C619 - C32167 * C624 +
            C5156 * C620 - C32137 * C625) *
               C5158 +
           (C5154 * C628 - C32180 * C633 + C5155 * C629 - C32167 * C634 +
            C5156 * C630 - C32137 * C635) *
               C5152 +
           (C5154 * C1050 - C32180 * C1059 + C5155 * C1051 - C32167 * C1060 +
            C5156 * C1052 - C32137 * C1061) *
               C5159 +
           (C5154 * C1062 - C32180 * C1077 + C5155 * C1063 - C32167 * C1078 +
            C5156 * C1064 - C32137 * C1079) *
               C32148) *
              C31876 * C316 +
          ((C32180 * C338 - C5154 * C323 + C32167 * C339 - C5155 * C324 +
            C32137 * C340 - C5156 * C325) *
               C5157 +
           (C32180 * C353 - C5154 * C343 + C32167 * C354 - C5155 * C344 +
            C32137 * C355 - C5156 * C345) *
               C5151 +
           (C32180 * C1065 - C5154 * C1053 + C32167 * C1066 - C5155 * C1054 +
            C32137 * C1067 - C5156 * C1055) *
               C5158 +
           (C32180 * C1080 - C5154 * C1068 + C32167 * C1081 - C5155 * C1069 +
            C32137 * C1082 - C5156 * C1070) *
               C5152 +
           (C32180 * C1071 - C5154 * C1056 + C32167 * C1072 - C5155 * C1057 +
            C32137 * C1073 - C5156 * C1058) *
               C5159 +
           (C32180 * C1083 - C5154 * C1074 + C32167 * C1084 - C5155 * C1075 +
            C32137 * C1085 - C5156 * C1076) *
               C32148) *
              C31876 * C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C31772 * C126 - C5980 * C119) * C5981 +
           (C31772 * C140 - C5980 * C131) * C5975 +
           (C31772 * C223 - C5980 * C213) * C5982 +
           (C31772 * C243 - C5980 * C228) * C5976 +
           (C31772 * C233 - C5980 * C218) * C5983 +
           (C31772 * C248 - C5980 * C238) * C5977 +
           (C31772 * C876 - C5980 * C870) * C5984 +
           (C31772 * C888 - C5980 * C879) * C5978 +
           (C31772 * C882 - C5980 * C873) * C5985 +
           (C31772 * C891 - C5980 * C885) * C5979) *
              C31876 * C31835 * C31821 * C110 +
          ((C5980 * C120 - C31772 * C127) * C5981 +
           (C5980 * C132 - C31772 * C141) * C5975 +
           (C5980 * C214 - C31772 * C224) * C5982 +
           (C5980 * C229 - C31772 * C244) * C5976 +
           (C5980 * C219 - C31772 * C234) * C5983 +
           (C5980 * C239 - C31772 * C249) * C5977 +
           (C5980 * C871 - C31772 * C877) * C5984 +
           (C5980 * C880 - C31772 * C889) * C5978 +
           (C5980 * C874 - C31772 * C883) * C5985 +
           (C5980 * C886 - C31772 * C892) * C5979) *
              C31876 * C31835 * C31821 * C111 +
          ((C31772 * C128 - C5980 * C121) * C5981 +
           (C31772 * C142 - C5980 * C133) * C5975 +
           (C31772 * C225 - C5980 * C215) * C5982 +
           (C31772 * C245 - C5980 * C230) * C5976 +
           (C31772 * C235 - C5980 * C220) * C5983 +
           (C31772 * C250 - C5980 * C240) * C5977 +
           (C31772 * C878 - C5980 * C872) * C5984 +
           (C31772 * C890 - C5980 * C881) * C5978 +
           (C31772 * C884 - C5980 * C875) * C5985 +
           (C31772 * C893 - C5980 * C887) * C5979) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C31772 * C126 - C5980 * C119) * C5981 +
           (C31772 * C140 - C5980 * C131) * C5975 + (C6057 - C6058) * C5982 +
           (C6059 - C6060) * C5976 + C6077 * C5983 + C6078 * C5977 +
           C6079 * C5984 + C6080 * C5978 + C6081 * C5985 + C6082 * C5979) *
              C31876 * C31835 * C209 +
          ((C6058 - C6057) * C5981 + (C6060 - C6059) * C5975 +
           (C6062 - C6061) * C5982 + (C6064 - C6063) * C5976 +
           (C6066 - C6065) * C5983 + (C6068 - C6067) * C5977 +
           (C6070 - C6069) * C5984 + (C6072 - C6071) * C5978 +
           (C6073 - C6074) * C5985 + (C6075 - C6076) * C5979) *
              C31876 * C31835 * C210 +
          (C6077 * C5981 + C6078 * C5975 + C6079 * C5982 + C6080 * C5976 +
           C6081 * C5983 + C6082 * C5977 + (C6074 - C6073) * C5984 +
           (C6076 - C6075) * C5978 + (C31772 * C6052 - C5980 * C6049) * C5985 +
           (C31772 * C6055 - C5980 * C6053) * C5979) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C31772 * C126 - C5980 * C119) * C5981 +
           (C31772 * C140 - C5980 * C131) * C5975 + (C6057 - C6058) * C5982 +
           (C6059 - C6060) * C5976 + C6077 * C5983 + C6078 * C5977 +
           C6079 * C5984 + C6080 * C5978 + C6081 * C5985 + C6082 * C5979) *
              C31876 * C315 +
          ((C5980 * C318 - C31772 * C328) * C5981 +
           (C5980 * C333 - C31772 * C348) * C5975 +
           (C5980 * C618 - C31772 * C623) * C5982 +
           (C5980 * C628 - C31772 * C633) * C5976 +
           (C5980 * C1050 - C31772 * C1059) * C5983 +
           (C5980 * C1062 - C31772 * C1077) * C5977 +
           (C5980 * C1556 - C31772 * C1559) * C5984 +
           (C5980 * C1562 - C31772 * C1565) * C5978 +
           (C5980 * C6144 - C31772 * C6147) * C5985 +
           (C5980 * C6148 - C31772 * C6153) * C5979) *
              C31876 * C316 +
          ((C31772 * C338 - C5980 * C323) * C5981 +
           (C31772 * C353 - C5980 * C343) * C5975 +
           (C31772 * C1065 - C5980 * C1053) * C5982 +
           (C31772 * C1080 - C5980 * C1068) * C5976 +
           (C31772 * C1071 - C5980 * C1056) * C5983 +
           (C31772 * C1083 - C5980 * C1074) * C5977 +
           (C31772 * C6149 - C5980 * C6145) * C5984 +
           (C31772 * C6154 - C5980 * C6150) * C5978 +
           (C31772 * C6151 - C5980 * C6146) * C5985 +
           (C31772 * C6155 - C5980 * C6152) * C5979) *
              C31876 * C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C5157 +
            (C31772 * C140 - C5980 * C131) * C5151 + (C6057 - C6058) * C5158 +
            (C6059 - C6060) * C5152 + C6077 * C5159 + C6078 * C32148) *
               C32184 +
           ((C31772 * C328 - C5980 * C318) * C5157 +
            (C31772 * C348 - C5980 * C333) * C5151 + (C6432 - C6431) * C5158 +
            (C6434 - C6433) * C5152 + (C6436 - C6435) * C5159 +
            (C6438 - C6437) * C32148) *
               C32173 +
           ((C31772 * C338 - C5980 * C323) * C5157 +
            (C31772 * C353 - C5980 * C343) * C5151 +
            (C31772 * C1065 - C5980 * C1053) * C5158 +
            (C31772 * C1080 - C5980 * C1068) * C5152 +
            (C31772 * C1071 - C5980 * C1056) * C5159 +
            (C31772 * C1083 - C5980 * C1074) * C32148) *
               C32151) *
              C31835 * C31821 * C110 +
          (((C5980 * C120 - C31772 * C127) * C5157 +
            (C5980 * C132 - C31772 * C141) * C5151 + (C6243 - C6244) * C5158 +
            (C6245 - C6246) * C5152 + (C6247 - C6248) * C5159 +
            (C6249 - C6250) * C32148) *
               C32184 +
           ((C5980 * C319 - C31772 * C329) * C5157 +
            (C5980 * C334 - C31772 * C349) * C5151 +
            (C5980 * C619 - C31772 * C624) * C5158 +
            (C5980 * C629 - C31772 * C634) * C5152 +
            (C5980 * C1051 - C31772 * C1060) * C5159 +
            (C5980 * C1063 - C31772 * C1078) * C32148) *
               C32173 +
           ((C5980 * C324 - C31772 * C339) * C5157 +
            (C5980 * C344 - C31772 * C354) * C5151 +
            (C5980 * C1054 - C31772 * C1066) * C5158 +
            (C5980 * C1069 - C31772 * C1081) * C5152 +
            (C5980 * C1057 - C31772 * C1072) * C5159 +
            (C5980 * C1075 - C31772 * C1084) * C32148) *
               C32151) *
              C31835 * C31821 * C111 +
          (((C31772 * C128 - C5980 * C121) * C5157 +
            (C31772 * C142 - C5980 * C133) * C5151 +
            (C31772 * C225 - C5980 * C215) * C5158 +
            (C31772 * C245 - C5980 * C230) * C5152 +
            (C31772 * C235 - C5980 * C220) * C5159 +
            (C31772 * C250 - C5980 * C240) * C32148) *
               C32184 +
           ((C31772 * C330 - C5980 * C320) * C5157 +
            (C31772 * C350 - C5980 * C335) * C5151 +
            (C31772 * C625 - C5980 * C620) * C5158 +
            (C31772 * C635 - C5980 * C630) * C5152 +
            (C31772 * C1061 - C5980 * C1052) * C5159 +
            (C31772 * C1079 - C5980 * C1064) * C32148) *
               C32173 +
           ((C31772 * C340 - C5980 * C325) * C5157 +
            (C31772 * C355 - C5980 * C345) * C5151 +
            (C31772 * C1067 - C5980 * C1055) * C5158 +
            (C31772 * C1082 - C5980 * C1070) * C5152 +
            (C31772 * C1073 - C5980 * C1058) * C5159 +
            (C31772 * C1085 - C5980 * C1076) * C32148) *
               C32151) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C5157 +
            (C31772 * C140 - C5980 * C131) * C5151 + (C6057 - C6058) * C5158 +
            (C6059 - C6060) * C5152 + C6077 * C5159 + C6078 * C32148) *
               C32184 +
           ((C31772 * C328 - C5980 * C318) * C5157 +
            (C31772 * C348 - C5980 * C333) * C5151 + (C6432 - C6431) * C5158 +
            (C6434 - C6433) * C5152 + C6667 * C5159 + C6668 * C32148) *
               C32173 +
           ((C31772 * C338 - C5980 * C323) * C5157 +
            (C31772 * C353 - C5980 * C343) * C5151 + (C6669 - C6670) * C5158 +
            (C6671 - C6672) * C5152 + C6681 * C5159 + C6682 * C32148) *
               C32151) *
              C31835 * C209 +
          (((C6058 - C6057) * C5157 + (C6060 - C6059) * C5151 +
            (C6062 - C6061) * C5158 + (C6064 - C6063) * C5152 +
            (C6066 - C6065) * C5159 + (C6068 - C6067) * C32148) *
               C32184 +
           ((C6431 - C6432) * C5157 + (C6433 - C6434) * C5151 +
            (C6435 - C6436) * C5158 + (C6437 - C6438) * C5152 +
            (C6439 - C6440) * C5159 + (C6441 - C6442) * C32148) *
               C32173 +
           ((C6670 - C6669) * C5157 + (C6672 - C6671) * C5151 +
            (C6674 - C6673) * C5158 + (C6676 - C6675) * C5152 +
            (C6677 - C6678) * C5159 + (C6679 - C6680) * C32148) *
               C32151) *
              C31835 * C210 +
          ((C6077 * C5157 + C6078 * C5151 + C6079 * C5158 + C6080 * C5152 +
            C6081 * C5159 + C6082 * C32148) *
               C32184 +
           (C6667 * C5157 + C6668 * C5151 + (C6440 - C6439) * C5158 +
            (C6442 - C6441) * C5152 + (C6444 - C6443) * C5159 +
            (C6446 - C6445) * C32148) *
               C32173 +
           (C6681 * C5157 + C6682 * C5151 + (C6678 - C6677) * C5158 +
            (C6680 - C6679) * C5152 + (C31772 * C6151 - C5980 * C6146) * C5159 +
            (C31772 * C6155 - C5980 * C6152) * C32148) *
               C32151) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C5157 +
            (C31772 * C140 - C5980 * C131) * C5151 + (C6057 - C6058) * C5158 +
            (C6059 - C6060) * C5152 + C6077 * C5159 + C6078 * C32148) *
               C32184 +
           ((C6805 - C6806) * C5157 + (C6807 - C6808) * C5151 +
            (C6432 - C6431) * C5158 + (C6434 - C6433) * C5152 + C6667 * C5159 +
            C6668 * C32148) *
               C32173 +
           C6839 * C32151) *
              C315 +
          (((C6806 - C6805) * C5157 + (C6808 - C6807) * C5151 +
            (C6431 - C6432) * C5158 + (C6433 - C6434) * C5152 +
            (C6435 - C6436) * C5159 + (C6437 - C6438) * C32148) *
               C32184 +
           ((C6810 - C6809) * C5157 + (C6812 - C6811) * C5151 +
            (C6670 - C6669) * C5158 + (C6672 - C6671) * C5152 +
            (C6674 - C6673) * C5159 + (C6676 - C6675) * C32148) *
               C32173 +
           ((C6817 - C6818) * C5157 + (C6819 - C6820) * C5151 +
            (C6821 - C6822) * C5158 + (C6823 - C6824) * C5152 +
            (C6825 - C6826) * C5159 + (C6827 - C6828) * C32148) *
               C32151) *
              C316 +
          (C6839 * C32184 +
           ((C6818 - C6817) * C5157 + (C6820 - C6819) * C5151 +
            (C6822 - C6821) * C5158 + (C6824 - C6823) * C5152 +
            (C6826 - C6825) * C5159 + (C6828 - C6827) * C32148) *
               C32173 +
           ((C31772 * C1937 - C5980 * C1928) * C5157 +
            (C31772 * C1946 - C5980 * C1940) * C5151 +
            (C31772 * C6797 - C5980 * C6793) * C5158 +
            (C31772 * C6802 - C5980 * C6798) * C5152 +
            (C31772 * C6799 - C5980 * C6794) * C5159 +
            (C31772 * C6803 - C5980 * C6800) * C32148) *
               C32151) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C118 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C31864) *
               C10013 +
           ((C32180 * C328 - C5154 * C318 + C32167 * C329 - C5155 * C319 +
             C32137 * C330 - C5156 * C320) *
                C118 +
            (C32180 * C348 - C5154 * C333 + C32167 * C349 - C5155 * C334 +
             C32137 * C350 - C5156 * C335) *
                C31864) *
               C10014 +
           ((C32180 * C338 - C5154 * C323 + C32167 * C339 - C5155 * C324 +
             C32137 * C340 - C5156 * C325) *
                C118 +
            (C32180 * C353 - C5154 * C343 + C32167 * C354 - C5155 * C344 +
             C32137 * C355 - C5156 * C345) *
                C31864) *
               C32151) *
              C31835 * C31821 * C110 +
          (((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
             C5156 * C122 - C32137 * C129) *
                C118 +
            (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
             C5156 * C134 - C32137 * C143) *
                C31864) *
               C10013 +
           ((C5154 * C319 - C32180 * C329 + C5155 * C320 - C32167 * C330 +
             C5156 * C321 - C32137 * C331) *
                C118 +
            (C5154 * C334 - C32180 * C349 + C5155 * C335 - C32167 * C350 +
             C5156 * C336 - C32137 * C351) *
                C31864) *
               C10014 +
           ((C5154 * C324 - C32180 * C339 + C5155 * C325 - C32167 * C340 +
             C5156 * C326 - C32137 * C341) *
                C118 +
            (C5154 * C344 - C32180 * C354 + C5155 * C345 - C32167 * C355 +
             C5156 * C346 - C32137 * C356) *
                C31864) *
               C32151) *
              C31835 * C31821 * C111 +
          (((C32180 * C128 - C5154 * C121 + C32167 * C129 - C5155 * C122 +
             C32137 * C130 - C5156 * C123) *
                C118 +
            (C32180 * C142 - C5154 * C133 + C32167 * C143 - C5155 * C134 +
             C32137 * C144 - C5156 * C135) *
                C31864) *
               C10013 +
           ((C32180 * C330 - C5154 * C320 + C32167 * C331 - C5155 * C321 +
             C32137 * C332 - C5156 * C322) *
                C118 +
            (C32180 * C350 - C5154 * C335 + C32167 * C351 - C5155 * C336 +
             C32137 * C352 - C5156 * C337) *
                C31864) *
               C10014 +
           ((C32180 * C340 - C5154 * C325 + C32167 * C341 - C5155 * C326 +
             C32137 * C342 - C5156 * C327) *
                C118 +
            (C32180 * C355 - C5154 * C345 + C32167 * C356 - C5155 * C346 +
             C32137 * C357 - C5156 * C347) *
                C31864) *
               C32151) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C118 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C31864) *
               C10013 +
           ((C32180 * C328 - C5154 * C318 + C32167 * C329 - C5155 * C319 +
             C32137 * C330 - C5156 * C320) *
                C118 +
            (C32180 * C348 - C5154 * C333 + C32167 * C349 - C5155 * C334 +
             C32137 * C350 - C5156 * C335) *
                C31864) *
               C10014 +
           ((C32180 * C338 - C5154 * C323 + C32167 * C339 - C5155 * C324 +
             C32137 * C340 - C5156 * C325) *
                C118 +
            (C32180 * C353 - C5154 * C343 + C32167 * C354 - C5155 * C344 +
             C32137 * C355 - C5156 * C345) *
                C31864) *
               C32151) *
              C31835 * C209 +
          (((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C118 +
            (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C31864) *
               C10013 +
           ((C5889 - C5890 + C5891 - C5892 + C5893 - C5894) * C118 +
            (C5895 - C5896 + C5897 - C5898 + C5899 - C5900) * C31864) *
               C10014 +
           ((C5154 * C1053 - C32180 * C1065 + C5155 * C1054 - C32167 * C1066 +
             C5156 * C1055 - C32137 * C1067) *
                C118 +
            (C5154 * C1068 - C32180 * C1080 + C5155 * C1069 - C32167 * C1081 +
             C5156 * C1070 - C32137 * C1082) *
                C31864) *
               C32151) *
              C31835 * C210 +
          ((C5315 * C118 + C5316 * C31864) * C10013 +
           ((C5902 - C5901 + C5904 - C5903 + C5906 - C5905) * C118 +
            (C5908 - C5907 + C5910 - C5909 + C5912 - C5911) * C31864) *
               C10014 +
           ((C32180 * C1071 - C5154 * C1056 + C32167 * C1072 - C5155 * C1057 +
             C32137 * C1073 - C5156 * C1058) *
                C118 +
            (C32180 * C1083 - C5154 * C1074 + C32167 * C1084 - C5155 * C1075 +
             C32137 * C1085 - C5156 * C1076) *
                C31864) *
               C32151) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C118 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C31864) *
               C10013 +
           ((C10237 - C10238 + C10239 - C10240 + C10241 - C10242) * C118 +
            (C10243 - C10244 + C10245 - C10246 + C10247 - C10248) * C31864) *
               C10014 +
           C10285 * C32151) *
              C315 +
          (((C10238 - C10237 + C10240 - C10239 + C10242 - C10241) * C118 +
            (C10244 - C10243 + C10246 - C10245 + C10248 - C10247) * C31864) *
               C10013 +
           ((C10250 - C10249 + C10252 - C10251 + C10254 - C10253) * C118 +
            (C10256 - C10255 + C10258 - C10257 + C10260 - C10259) * C31864) *
               C10014 +
           ((C10261 - C10262 + C10263 - C10264 + C10265 - C10266) * C118 +
            (C10267 - C10268 + C10269 - C10270 + C10271 - C10272) * C31864) *
               C32151) *
              C316 +
          (C10285 * C10013 +
           ((C10262 - C10261 + C10264 - C10263 + C10266 - C10265) * C118 +
            (C10268 - C10267 + C10270 - C10269 + C10272 - C10271) * C31864) *
               C10014 +
           ((C32180 * C1937 - C5154 * C1928 + C32167 * C1938 - C5155 * C1929 +
             C32137 * C1939 - C5156 * C1930) *
                C118 +
            (C32180 * C1946 - C5154 * C1940 + C32167 * C1947 - C5155 * C1941 +
             C32137 * C1948 - C5156 * C1942) *
                C31864) *
               C32151) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C757 +
            (C31772 * C140 - C5980 * C131) * C32183 + (C6057 - C6058) * C758 +
            (C6059 - C6060) * C32171 + C6077 * C759 + C6078 * C32148) *
               C10013 +
           ((C6805 - C6806) * C757 + (C6807 - C6808) * C32183 + C7314 * C758 +
            C7315 * C32171 + C6667 * C759 + C6668 * C32148) *
               C10014 +
           (C6829 * C757 + C6830 * C32183 + C6813 * C758 + C6814 * C32171 +
            C6681 * C759 + C6682 * C32148) *
               C32151) *
              C31835 * C31821 * C110 +
          (((C5980 * C120 - C31772 * C127) * C757 +
            (C5980 * C132 - C31772 * C141) * C32183 + (C6243 - C6244) * C758 +
            (C6245 - C6246) * C32171 + (C6247 - C6248) * C759 +
            (C6249 - C6250) * C32148) *
               C10013 +
           ((C7156 - C7157) * C757 + (C7158 - C7159) * C32183 +
            (C6990 - C6991) * C758 + (C6992 - C6993) * C32171 +
            (C6994 - C6995) * C759 + (C6996 - C6997) * C32148) *
               C10014 +
           ((C7160 - C7161) * C757 + (C7162 - C7163) * C32183 +
            (C6998 - C6999) * C758 + (C7000 - C7001) * C32171 +
            (C7002 - C7003) * C759 + (C7004 - C7005) * C32148) *
               C32151) *
              C31835 * C31821 * C111 +
          (((C31772 * C128 - C5980 * C121) * C757 +
            (C31772 * C142 - C5980 * C133) * C32183 +
            (C31772 * C225 - C5980 * C215) * C758 +
            (C31772 * C245 - C5980 * C230) * C32171 +
            (C31772 * C235 - C5980 * C220) * C759 +
            (C31772 * C250 - C5980 * C240) * C32148) *
               C10013 +
           ((C31772 * C330 - C5980 * C320) * C757 +
            (C31772 * C350 - C5980 * C335) * C32183 +
            (C31772 * C625 - C5980 * C620) * C758 +
            (C31772 * C635 - C5980 * C630) * C32171 +
            (C31772 * C1061 - C5980 * C1052) * C759 +
            (C31772 * C1079 - C5980 * C1064) * C32148) *
               C10014 +
           ((C31772 * C340 - C5980 * C325) * C757 +
            (C31772 * C355 - C5980 * C345) * C32183 +
            (C31772 * C1067 - C5980 * C1055) * C758 +
            (C31772 * C1082 - C5980 * C1070) * C32171 +
            (C31772 * C1073 - C5980 * C1058) * C759 +
            (C31772 * C1085 - C5980 * C1076) * C32148) *
               C32151) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C757 +
            (C31772 * C140 - C5980 * C131) * C32183 + (C6057 - C6058) * C758 +
            (C6059 - C6060) * C32171 + C6077 * C759 + C6078 * C32148) *
               C10013 +
           ((C6805 - C6806) * C757 + (C6807 - C6808) * C32183 + C7314 * C758 +
            C7315 * C32171 + C6667 * C759 + C6668 * C32148) *
               C10014 +
           (C6829 * C757 + C6830 * C32183 + C6813 * C758 + C6814 * C32171 +
            C6681 * C759 + C6682 * C32148) *
               C32151) *
              C31835 * C209 +
          (((C6058 - C6057) * C757 + (C6060 - C6059) * C32183 +
            (C6062 - C6061) * C758 + (C6064 - C6063) * C32171 +
            (C6066 - C6065) * C759 + (C6068 - C6067) * C32148) *
               C10013 +
           (C7316 * C757 + C7317 * C32183 + C7318 * C758 + C7319 * C32171 +
            C9902 * C759 + C9903 * C32148) *
               C10014 +
           (C7320 * C757 + C7321 * C32183 + C7322 * C758 + C7323 * C32171 +
            (C6677 - C6678) * C759 + (C6679 - C6680) * C32148) *
               C32151) *
              C31835 * C210 +
          ((C6077 * C757 + C6078 * C32183 + C6079 * C758 + C6080 * C32171 +
            C6081 * C759 + C6082 * C32148) *
               C10013 +
           (C6667 * C757 + C6668 * C32183 + C9408 * C758 + C9409 * C32171 +
            (C6444 - C6443) * C759 + (C6446 - C6445) * C32148) *
               C10014 +
           (C6681 * C757 + C6682 * C32183 + (C6678 - C6677) * C758 +
            (C6680 - C6679) * C32171 + (C31772 * C6151 - C5980 * C6146) * C759 +
            (C31772 * C6155 - C5980 * C6152) * C32148) *
               C32151) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C757 +
            (C31772 * C140 - C5980 * C131) * C32183 + (C6057 - C6058) * C758 +
            (C6059 - C6060) * C32171 + C6077 * C759 + C6078 * C32148) *
               C10013 +
           ((C6805 - C6806) * C757 + (C6807 - C6808) * C32183 + C7314 * C758 +
            C7315 * C32171 + C6667 * C759 + C6668 * C32148) *
               C10014 +
           C11100 * C32151) *
              C315 +
          (((C6806 - C6805) * C757 + (C6808 - C6807) * C32183 + C7316 * C758 +
            C7317 * C32171 + C7318 * C759 + C7319 * C32148) *
               C10013 +
           ((C6810 - C6809) * C757 + (C6812 - C6811) * C32183 + C7320 * C758 +
            C7321 * C32171 + C7322 * C759 + C7323 * C32148) *
               C10014 +
           ((C6817 - C6818) * C757 + (C6819 - C6820) * C32183 +
            (C6821 - C6822) * C758 + (C6823 - C6824) * C32171 +
            (C6825 - C6826) * C759 + (C6827 - C6828) * C32148) *
               C32151) *
              C316 +
          (C11100 * C10013 +
           ((C6818 - C6817) * C757 + (C6820 - C6819) * C32183 +
            (C6822 - C6821) * C758 + (C6824 - C6823) * C32171 +
            (C6826 - C6825) * C759 + (C6828 - C6827) * C32148) *
               C10014 +
           ((C31772 * C1937 - C5980 * C1928) * C757 +
            (C31772 * C1946 - C5980 * C1940) * C32183 +
            (C31772 * C6797 - C5980 * C6793) * C758 +
            (C31772 * C6802 - C5980 * C6798) * C32171 +
            (C31772 * C6799 - C5980 * C6794) * C759 +
            (C31772 * C6803 - C5980 * C6800) * C32148) *
               C32151) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C118 +
            (C31772 * C140 - C5980 * C131) * C31864) *
               C11600 +
           ((C6805 - C6806) * C118 + (C6807 - C6808) * C31864) * C11601 +
           (C6829 * C118 + C6830 * C31864) * C11602 +
           ((C6818 - C6817) * C118 + (C6820 - C6819) * C31864) * C11603 +
           ((C31772 * C1937 - C5980 * C1928) * C118 +
            (C31772 * C1946 - C5980 * C1940) * C31864) *
               C11604) *
              C31835 * C31821 * C110 +
          (((C5980 * C120 - C31772 * C127) * C118 +
            (C5980 * C132 - C31772 * C141) * C31864) *
               C11600 +
           ((C7156 - C7157) * C118 + (C7158 - C7159) * C31864) * C11601 +
           ((C7160 - C7161) * C118 + (C7162 - C7163) * C31864) * C11602 +
           ((C5980 * C1926 - C31772 * C1932) * C118 +
            (C5980 * C1935 - C31772 * C1944) * C31864) *
               C11603 +
           ((C5980 * C1929 - C31772 * C1938) * C118 +
            (C5980 * C1941 - C31772 * C1947) * C31864) *
               C11604) *
              C31835 * C31821 * C111 +
          (((C31772 * C128 - C5980 * C121) * C118 +
            (C31772 * C142 - C5980 * C133) * C31864) *
               C11600 +
           ((C31772 * C330 - C5980 * C320) * C118 +
            (C31772 * C350 - C5980 * C335) * C31864) *
               C11601 +
           ((C31772 * C340 - C5980 * C325) * C118 +
            (C31772 * C355 - C5980 * C345) * C31864) *
               C11602 +
           ((C31772 * C1933 - C5980 * C1927) * C118 +
            (C31772 * C1945 - C5980 * C1936) * C31864) *
               C11603 +
           ((C31772 * C1939 - C5980 * C1930) * C118 +
            (C31772 * C1948 - C5980 * C1942) * C31864) *
               C11604) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C118 +
            (C31772 * C140 - C5980 * C131) * C31864) *
               C11600 +
           ((C6805 - C6806) * C118 + (C6807 - C6808) * C31864) * C11601 +
           (C6829 * C118 + C6830 * C31864) * C11602 +
           ((C6818 - C6817) * C118 + (C6820 - C6819) * C31864) * C11603 +
           ((C31772 * C1937 - C5980 * C1928) * C118 +
            (C31772 * C1946 - C5980 * C1940) * C31864) *
               C11604) *
              C31835 * C209 +
          (((C6058 - C6057) * C118 + (C6060 - C6059) * C31864) * C11600 +
           (C7316 * C118 + C7317 * C31864) * C11601 +
           (C7320 * C118 + C7321 * C31864) * C11602 +
           ((C6821 - C6822) * C118 + (C6823 - C6824) * C31864) * C11603 +
           ((C5980 * C6793 - C31772 * C6797) * C118 +
            (C5980 * C6798 - C31772 * C6802) * C31864) *
               C11604) *
              C31835 * C210 +
          ((C6077 * C118 + C6078 * C31864) * C11600 +
           (C6667 * C118 + C6668 * C31864) * C11601 +
           (C6681 * C118 + C6682 * C31864) * C11602 +
           ((C6826 - C6825) * C118 + (C6828 - C6827) * C31864) * C11603 +
           ((C31772 * C6799 - C5980 * C6794) * C118 +
            (C31772 * C6803 - C5980 * C6800) * C31864) *
               C11604) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C118 +
            (C31772 * C140 - C5980 * C131) * C31864) *
               C11600 +
           ((C6805 - C6806) * C118 + (C6807 - C6808) * C31864) * C11601 +
           C11750 * C11602 + C11755 * C11603 + C11758 * C11604) *
              C315 +
          (((C6806 - C6805) * C118 + (C6808 - C6807) * C31864) * C11600 +
           ((C6810 - C6809) * C118 + (C6812 - C6811) * C31864) * C11601 +
           ((C6817 - C6818) * C118 + (C6819 - C6820) * C31864) * C11602 +
           ((C11743 - C11742) * C118 + (C11745 - C11744) * C31864) * C11603 +
           ((C11746 - C11747) * C118 + (C11748 - C11749) * C31864) * C11604) *
              C316 +
          (C11750 * C11600 + C11755 * C11601 + C11758 * C11602 +
           ((C11747 - C11746) * C118 + (C11749 - C11748) * C31864) * C11603 +
           ((C31772 * C11733 - C5980 * C11730) * C118 +
            (C31772 * C11736 - C5980 * C11734) * C31864) *
               C11604) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                 C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                 C105 * C130 - C117 * C123) *
                    C118 +
                (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                 C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                 C105 * C144 - C117 * C135) *
                    C31864) *
                   C31876 * C530 +
               ((C113 * C318 - C101 * C328 + C114 * C319 - C102 * C329 +
                 C115 * C320 - C103 * C330 + C116 * C321 - C104 * C331 +
                 C117 * C322 - C105 * C332) *
                    C118 +
                (C113 * C333 - C101 * C348 + C114 * C334 - C102 * C349 +
                 C115 * C335 - C103 * C350 + C116 * C336 - C104 * C351 +
                 C117 * C337 - C105 * C352) *
                    C31864) *
                   C31876 * C531) *
                  C31821 * C442 +
              (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
                 C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
                 C117 * C124 - C105 * C136) *
                    C118 +
                (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
                 C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
                 C117 * C137 - C105 * C145) *
                    C31864) *
                   C31876 * C530 +
               ((C101 * C329 - C113 * C319 + C102 * C330 - C114 * C320 +
                 C103 * C331 - C115 * C321 + C104 * C332 - C116 * C322 +
                 C105 * C533 - C117 * C532) *
                    C118 +
                (C101 * C349 - C113 * C334 + C102 * C350 - C114 * C335 +
                 C103 * C351 - C115 * C336 + C104 * C352 - C116 * C337 +
                 C105 * C535 - C117 * C534) *
                    C31864) *
                   C31876 * C531) *
                  C31821 * C443) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
                 C32137 * C128 - C756 * C121) *
                    C757 +
                (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
                 C32137 * C142 - C756 * C133) *
                    C32183 +
                (C895 - C896 + C897 - C898 + C899 - C900) * C758 +
                (C901 - C902 + C903 - C904 + C905 - C906) * C32171 +
                C939 * C759 + C940 * C32148) *
                   C31876 * C530 +
               ((C754 * C318 - C748 * C328 + C755 * C319 - C749 * C329 +
                 C756 * C320 - C32137 * C330) *
                    C757 +
                (C754 * C333 - C748 * C348 + C755 * C334 - C749 * C349 +
                 C756 * C335 - C32137 * C350) *
                    C32183 +
                (C754 * C618 - C748 * C623 + C755 * C619 - C749 * C624 +
                 C756 * C620 - C32137 * C625) *
                    C758 +
                (C754 * C628 - C748 * C633 + C755 * C629 - C749 * C634 +
                 C756 * C630 - C32137 * C635) *
                    C32171 +
                (C754 * C1050 - C748 * C1059 + C755 * C1051 - C749 * C1060 +
                 C756 * C1052 - C32137 * C1061) *
                    C759 +
                (C754 * C1062 - C748 * C1077 + C755 * C1063 - C749 * C1078 +
                 C756 * C1064 - C32137 * C1079) *
                    C32148) *
                   C31876 * C531) *
                  C31821 * C442 +
              (((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
                 C756 * C122 - C32137 * C129) *
                    C757 +
                (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
                 C756 * C134 - C32137 * C143) *
                    C32183 +
                (C1237 - C1238 + C1239 - C1240 + C1241 - C1242) * C758 +
                (C1243 - C1244 + C1245 - C1246 + C1247 - C1248) * C32171 +
                (C1249 - C1250 + C1251 - C1252 + C1253 - C1254) * C759 +
                (C1255 - C1256 + C1257 - C1258 + C1259 - C1260) * C32148) *
                   C31876 * C530 +
               ((C748 * C329 - C754 * C319 + C749 * C330 - C755 * C320 +
                 C32137 * C331 - C756 * C321) *
                    C757 +
                (C748 * C349 - C754 * C334 + C749 * C350 - C755 * C335 +
                 C32137 * C351 - C756 * C336) *
                    C32183 +
                (C748 * C624 - C754 * C619 + C749 * C625 - C755 * C620 +
                 C32137 * C626 - C756 * C621) *
                    C758 +
                (C748 * C634 - C754 * C629 + C749 * C635 - C755 * C630 +
                 C32137 * C636 - C756 * C631) *
                    C32171 +
                (C748 * C1060 - C754 * C1051 + C749 * C1061 - C755 * C1052 +
                 C32137 * C1407 - C756 * C1406) *
                    C759 +
                (C748 * C1078 - C754 * C1063 + C749 * C1079 - C755 * C1064 +
                 C32137 * C1409 - C756 * C1408) *
                    C32148) *
                   C31876 * C531) *
                  C31821 * C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
              C32137 * C128 - C756 * C121) *
                 C118 +
             (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
              C32137 * C142 - C756 * C133) *
                 C31864) *
                C32184 +
            ((C1950 - C1951 + C1952 - C1953 + C1954 - C1955) * C118 +
             (C1956 - C1957 + C1958 - C1959 + C1960 - C1961) * C31864) *
                C32173 +
            C1998 * C32151) *
               C530 +
           (((C1951 - C1950 + C1953 - C1952 + C1955 - C1954) * C118 +
             (C1957 - C1956 + C1959 - C1958 + C1961 - C1960) * C31864) *
                C32184 +
            ((C1963 - C1962 + C1965 - C1964 + C1967 - C1966) * C118 +
             (C1969 - C1968 + C1971 - C1970 + C1973 - C1972) * C31864) *
                C32173 +
            ((C1974 - C1975 + C1976 - C1977 + C1978 - C1979) * C118 +
             (C1980 - C1981 + C1982 - C1983 + C1984 - C1985) * C31864) *
                C32151) *
               C531) *
              C31821 * C442 +
          ((((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
              C756 * C122 - C32137 * C129) *
                 C118 +
             (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
              C756 * C134 - C32137 * C143) *
                 C31864) *
                C32184 +
            ((C2299 - C2300 + C2301 - C2302 + C2303 - C2304) * C118 +
             (C2305 - C2306 + C2307 - C2308 + C2309 - C2310) * C31864) *
                C32173 +
            ((C2311 - C2312 + C2313 - C2314 + C2315 - C2316) * C118 +
             (C2317 - C2318 + C2319 - C2320 + C2321 - C2322) * C31864) *
                C32151) *
               C530 +
           (((C2300 - C2299 + C2302 - C2301 + C2304 - C2303) * C118 +
             (C2306 - C2305 + C2308 - C2307 + C2310 - C2309) * C31864) *
                C32184 +
            ((C2312 - C2311 + C2314 - C2313 + C2316 - C2315) * C118 +
             (C2318 - C2317 + C2320 - C2319 + C2322 - C2321) * C31864) *
                C32173 +
            ((C748 * C1932 - C754 * C1926 + C749 * C1933 - C755 * C1927 +
              C32137 * C2295 - C756 * C2294) *
                 C118 +
             (C748 * C1944 - C754 * C1935 + C749 * C1945 - C755 * C1936 +
              C32137 * C2297 - C756 * C2296) *
                 C31864) *
                C32151) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C5157 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C5151 +
            (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C5158 +
            (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C5152 +
            C5315 * C5159 + C5316 * C32148) *
               C31876 * C530 +
           ((C5154 * C318 - C32180 * C328 + C5155 * C319 - C32167 * C329 +
             C5156 * C320 - C32137 * C330) *
                C5157 +
            (C5154 * C333 - C32180 * C348 + C5155 * C334 - C32167 * C349 +
             C5156 * C335 - C32137 * C350) *
                C5151 +
            (C5154 * C618 - C32180 * C623 + C5155 * C619 - C32167 * C624 +
             C5156 * C620 - C32137 * C625) *
                C5158 +
            (C5154 * C628 - C32180 * C633 + C5155 * C629 - C32167 * C634 +
             C5156 * C630 - C32137 * C635) *
                C5152 +
            (C5154 * C1050 - C32180 * C1059 + C5155 * C1051 - C32167 * C1060 +
             C5156 * C1052 - C32137 * C1061) *
                C5159 +
            (C5154 * C1062 - C32180 * C1077 + C5155 * C1063 - C32167 * C1078 +
             C5156 * C1064 - C32137 * C1079) *
                C32148) *
               C31876 * C531) *
              C31821 * C442 +
          (((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
             C5156 * C122 - C32137 * C129) *
                C5157 +
            (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
             C5156 * C134 - C32137 * C143) *
                C5151 +
            (C5573 - C5574 + C5575 - C5576 + C5577 - C5578) * C5158 +
            (C5579 - C5580 + C5581 - C5582 + C5583 - C5584) * C5152 +
            (C5585 - C5586 + C5587 - C5588 + C5589 - C5590) * C5159 +
            (C5591 - C5592 + C5593 - C5594 + C5595 - C5596) * C32148) *
               C31876 * C530 +
           ((C32180 * C329 - C5154 * C319 + C32167 * C330 - C5155 * C320 +
             C32137 * C331 - C5156 * C321) *
                C5157 +
            (C32180 * C349 - C5154 * C334 + C32167 * C350 - C5155 * C335 +
             C32137 * C351 - C5156 * C336) *
                C5151 +
            (C32180 * C624 - C5154 * C619 + C32167 * C625 - C5155 * C620 +
             C32137 * C626 - C5156 * C621) *
                C5158 +
            (C32180 * C634 - C5154 * C629 + C32167 * C635 - C5155 * C630 +
             C32137 * C636 - C5156 * C631) *
                C5152 +
            (C32180 * C1060 - C5154 * C1051 + C32167 * C1061 - C5155 * C1052 +
             C32137 * C1407 - C5156 * C1406) *
                C5159 +
            (C32180 * C1078 - C5154 * C1063 + C32167 * C1079 - C5155 * C1064 +
             C32137 * C1409 - C5156 * C1408) *
                C32148) *
               C31876 * C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C5981 +
            (C31772 * C140 - C5980 * C131) * C5975 + (C6057 - C6058) * C5982 +
            (C6059 - C6060) * C5976 + C6077 * C5983 + C6078 * C5977 +
            C6079 * C5984 + C6080 * C5978 + C6081 * C5985 + C6082 * C5979) *
               C31876 * C530 +
           ((C5980 * C318 - C31772 * C328) * C5981 +
            (C5980 * C333 - C31772 * C348) * C5975 +
            (C5980 * C618 - C31772 * C623) * C5982 +
            (C5980 * C628 - C31772 * C633) * C5976 +
            (C5980 * C1050 - C31772 * C1059) * C5983 +
            (C5980 * C1062 - C31772 * C1077) * C5977 +
            (C5980 * C1556 - C31772 * C1559) * C5984 +
            (C5980 * C1562 - C31772 * C1565) * C5978 +
            (C5980 * C6144 - C31772 * C6147) * C5985 +
            (C5980 * C6148 - C31772 * C6153) * C5979) *
               C31876 * C531) *
              C31821 * C442 +
          (((C5980 * C120 - C31772 * C127) * C5981 +
            (C5980 * C132 - C31772 * C141) * C5975 + (C6243 - C6244) * C5982 +
            (C6245 - C6246) * C5976 + (C6247 - C6248) * C5983 +
            (C6249 - C6250) * C5977 + (C6251 - C6252) * C5984 +
            (C6253 - C6254) * C5978 + (C6255 - C6256) * C5985 +
            (C6257 - C6258) * C5979) *
               C31876 * C530 +
           ((C31772 * C329 - C5980 * C319) * C5981 +
            (C31772 * C349 - C5980 * C334) * C5975 +
            (C31772 * C624 - C5980 * C619) * C5982 +
            (C31772 * C634 - C5980 * C629) * C5976 +
            (C31772 * C1060 - C5980 * C1051) * C5983 +
            (C31772 * C1078 - C5980 * C1063) * C5977 +
            (C31772 * C1560 - C5980 * C1557) * C5984 +
            (C31772 * C1566 - C5980 * C1563) * C5978 +
            (C31772 * C6341 - C5980 * C6340) * C5985 +
            (C31772 * C6343 - C5980 * C6342) * C5979) *
               C31876 * C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C5157 +
             (C31772 * C140 - C5980 * C131) * C5151 + (C6057 - C6058) * C5158 +
             (C6059 - C6060) * C5152 + C6077 * C5159 + C6078 * C32148) *
                C32184 +
            ((C6805 - C6806) * C5157 + (C6807 - C6808) * C5151 +
             (C6432 - C6431) * C5158 + (C6434 - C6433) * C5152 + C6667 * C5159 +
             C6668 * C32148) *
                C32173 +
            C6839 * C32151) *
               C530 +
           (((C6806 - C6805) * C5157 + (C6808 - C6807) * C5151 +
             (C6431 - C6432) * C5158 + (C6433 - C6434) * C5152 +
             (C6435 - C6436) * C5159 + (C6437 - C6438) * C32148) *
                C32184 +
            ((C6810 - C6809) * C5157 + (C6812 - C6811) * C5151 +
             (C6670 - C6669) * C5158 + (C6672 - C6671) * C5152 +
             (C6674 - C6673) * C5159 + (C6676 - C6675) * C32148) *
                C32173 +
            ((C6817 - C6818) * C5157 + (C6819 - C6820) * C5151 +
             (C6821 - C6822) * C5158 + (C6823 - C6824) * C5152 +
             (C6825 - C6826) * C5159 + (C6827 - C6828) * C32148) *
                C32151) *
               C531) *
              C31821 * C442 +
          ((((C5980 * C120 - C31772 * C127) * C5157 +
             (C5980 * C132 - C31772 * C141) * C5151 + (C6243 - C6244) * C5158 +
             (C6245 - C6246) * C5152 + (C6247 - C6248) * C5159 +
             (C6249 - C6250) * C32148) *
                C32184 +
            ((C7156 - C7157) * C5157 + (C7158 - C7159) * C5151 +
             (C6990 - C6991) * C5158 + (C6992 - C6993) * C5152 +
             (C6994 - C6995) * C5159 + (C6996 - C6997) * C32148) *
                C32173 +
            ((C7160 - C7161) * C5157 + (C7162 - C7163) * C5151 +
             (C6998 - C6999) * C5158 + (C7000 - C7001) * C5152 +
             (C7002 - C7003) * C5159 + (C7004 - C7005) * C32148) *
                C32151) *
               C530 +
           (((C7157 - C7156) * C5157 + (C7159 - C7158) * C5151 +
             (C6991 - C6990) * C5158 + (C6993 - C6992) * C5152 +
             (C6995 - C6994) * C5159 + (C6997 - C6996) * C32148) *
                C32184 +
            ((C7161 - C7160) * C5157 + (C7163 - C7162) * C5151 +
             (C6999 - C6998) * C5158 + (C7001 - C7000) * C5152 +
             (C7003 - C7002) * C5159 + (C7005 - C7004) * C32148) *
                C32173 +
            ((C31772 * C1932 - C5980 * C1926) * C5157 +
             (C31772 * C1944 - C5980 * C1935) * C5151 +
             (C31772 * C2472 - C5980 * C2469) * C5158 +
             (C31772 * C2478 - C5980 * C2475) * C5152 +
             (C31772 * C7152 - C5980 * C7151) * C5159 +
             (C31772 * C7154 - C5980 * C7153) * C32148) *
                C32151) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
              C32137 * C128 - C5156 * C121) *
                 C118 +
             (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
              C32137 * C142 - C5156 * C133) *
                 C31864) *
                C10013 +
            ((C10237 - C10238 + C10239 - C10240 + C10241 - C10242) * C118 +
             (C10243 - C10244 + C10245 - C10246 + C10247 - C10248) * C31864) *
                C10014 +
            C10285 * C32151) *
               C530 +
           (((C10238 - C10237 + C10240 - C10239 + C10242 - C10241) * C118 +
             (C10244 - C10243 + C10246 - C10245 + C10248 - C10247) * C31864) *
                C10013 +
            ((C10250 - C10249 + C10252 - C10251 + C10254 - C10253) * C118 +
             (C10256 - C10255 + C10258 - C10257 + C10260 - C10259) * C31864) *
                C10014 +
            ((C10261 - C10262 + C10263 - C10264 + C10265 - C10266) * C118 +
             (C10267 - C10268 + C10269 - C10270 + C10271 - C10272) * C31864) *
                C32151) *
               C531) *
              C31821 * C442 +
          ((((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
              C5156 * C122 - C32137 * C129) *
                 C118 +
             (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
              C5156 * C134 - C32137 * C143) *
                 C31864) *
                C10013 +
            ((C10578 - C10579 + C10580 - C10581 + C10582 - C10583) * C118 +
             (C10584 - C10585 + C10586 - C10587 + C10588 - C10589) * C31864) *
                C10014 +
            ((C10590 - C10591 + C10592 - C10593 + C10594 - C10595) * C118 +
             (C10596 - C10597 + C10598 - C10599 + C10600 - C10601) * C31864) *
                C32151) *
               C530 +
           (((C10579 - C10578 + C10581 - C10580 + C10583 - C10582) * C118 +
             (C10585 - C10584 + C10587 - C10586 + C10589 - C10588) * C31864) *
                C10013 +
            ((C10591 - C10590 + C10593 - C10592 + C10595 - C10594) * C118 +
             (C10597 - C10596 + C10599 - C10598 + C10601 - C10600) * C31864) *
                C10014 +
            ((C32180 * C1932 - C5154 * C1926 + C32167 * C1933 - C5155 * C1927 +
              C32137 * C2295 - C5156 * C2294) *
                 C118 +
             (C32180 * C1944 - C5154 * C1935 + C32167 * C1945 - C5155 * C1936 +
              C32137 * C2297 - C5156 * C2296) *
                 C31864) *
                C32151) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C757 +
             (C31772 * C140 - C5980 * C131) * C32183 + (C6057 - C6058) * C758 +
             (C6059 - C6060) * C32171 + C6077 * C759 + C6078 * C32148) *
                C10013 +
            ((C6805 - C6806) * C757 + (C6807 - C6808) * C32183 + C7314 * C758 +
             C7315 * C32171 + C6667 * C759 + C6668 * C32148) *
                C10014 +
            C11100 * C32151) *
               C530 +
           (((C6806 - C6805) * C757 + (C6808 - C6807) * C32183 + C7316 * C758 +
             C7317 * C32171 + C7318 * C759 + C7319 * C32148) *
                C10013 +
            ((C6810 - C6809) * C757 + (C6812 - C6811) * C32183 + C7320 * C758 +
             C7321 * C32171 + C7322 * C759 + C7323 * C32148) *
                C10014 +
            ((C6817 - C6818) * C757 + (C6819 - C6820) * C32183 +
             (C6821 - C6822) * C758 + (C6823 - C6824) * C32171 +
             (C6825 - C6826) * C759 + (C6827 - C6828) * C32148) *
                C32151) *
               C531) *
              C31821 * C442 +
          ((((C5980 * C120 - C31772 * C127) * C757 +
             (C5980 * C132 - C31772 * C141) * C32183 + (C6243 - C6244) * C758 +
             (C6245 - C6246) * C32171 + (C6247 - C6248) * C759 +
             (C6249 - C6250) * C32148) *
                C10013 +
            ((C7156 - C7157) * C757 + (C7158 - C7159) * C32183 +
             (C6990 - C6991) * C758 + (C6992 - C6993) * C32171 +
             (C6994 - C6995) * C759 + (C6996 - C6997) * C32148) *
                C10014 +
            ((C7160 - C7161) * C757 + (C7162 - C7163) * C32183 +
             (C6998 - C6999) * C758 + (C7000 - C7001) * C32171 +
             (C7002 - C7003) * C759 + (C7004 - C7005) * C32148) *
                C32151) *
               C530 +
           (((C7157 - C7156) * C757 + (C7159 - C7158) * C32183 +
             (C6991 - C6990) * C758 + (C6993 - C6992) * C32171 +
             (C6995 - C6994) * C759 + (C6997 - C6996) * C32148) *
                C10013 +
            ((C7161 - C7160) * C757 + (C7163 - C7162) * C32183 +
             (C6999 - C6998) * C758 + (C7001 - C7000) * C32171 +
             (C7003 - C7002) * C759 + (C7005 - C7004) * C32148) *
                C10014 +
            ((C31772 * C1932 - C5980 * C1926) * C757 +
             (C31772 * C1944 - C5980 * C1935) * C32183 +
             (C31772 * C2472 - C5980 * C2469) * C758 +
             (C31772 * C2478 - C5980 * C2475) * C32171 +
             (C31772 * C7152 - C5980 * C7151) * C759 +
             (C31772 * C7154 - C5980 * C7153) * C32148) *
                C32151) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C118 +
             (C31772 * C140 - C5980 * C131) * C31864) *
                C11600 +
            ((C6805 - C6806) * C118 + (C6807 - C6808) * C31864) * C11601 +
            C11750 * C11602 + C11755 * C11603 + C11758 * C11604) *
               C530 +
           (((C6806 - C6805) * C118 + (C6808 - C6807) * C31864) * C11600 +
            ((C6810 - C6809) * C118 + (C6812 - C6811) * C31864) * C11601 +
            ((C6817 - C6818) * C118 + (C6819 - C6820) * C31864) * C11602 +
            ((C11743 - C11742) * C118 + (C11745 - C11744) * C31864) * C11603 +
            ((C11746 - C11747) * C118 + (C11748 - C11749) * C31864) * C11604) *
               C531) *
              C31821 * C442 +
          ((((C5980 * C120 - C31772 * C127) * C118 +
             (C5980 * C132 - C31772 * C141) * C31864) *
                C11600 +
            ((C7156 - C7157) * C118 + (C7158 - C7159) * C31864) * C11601 +
            ((C7160 - C7161) * C118 + (C7162 - C7163) * C31864) * C11602 +
            ((C11931 - C11932) * C118 + (C11933 - C11934) * C31864) * C11603 +
            ((C11935 - C11936) * C118 + (C11937 - C11938) * C31864) * C11604) *
               C530 +
           (((C7157 - C7156) * C118 + (C7159 - C7158) * C31864) * C11600 +
            ((C7161 - C7160) * C118 + (C7163 - C7162) * C31864) * C11601 +
            ((C11932 - C11931) * C118 + (C11934 - C11933) * C31864) * C11602 +
            ((C11936 - C11935) * C118 + (C11938 - C11937) * C31864) * C11603 +
            ((C31772 * C11927 - C5980 * C11926) * C118 +
             (C31772 * C11929 - C5980 * C11928) * C31864) *
                C11604) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
            C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
            C105 * C130 - C117 * C123) *
               C118 +
           (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
            C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
            C105 * C144 - C117 * C135) *
               C31864) *
              C31876 * C31835 * C31821 * C110 +
          ((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
            C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
            C117 * C124 - C105 * C136) *
               C118 +
           (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
            C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
            C117 * C137 - C105 * C145) *
               C31864) *
              C31876 * C31835 * C31821 * C111 +
          ((C101 * C128 - C113 * C121 + C102 * C129 - C114 * C122 +
            C103 * C130 - C115 * C123 + C104 * C136 - C116 * C124 +
            C105 * C138 - C117 * C125) *
               C118 +
           (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C134 +
            C103 * C144 - C115 * C135 + C104 * C145 - C116 * C137 +
            C105 * C146 - C117 * C139) *
               C31864) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
            C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
            C105 * C130 - C117 * C123) *
               C118 +
           (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
            C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
            C105 * C144 - C117 * C135) *
               C31864) *
              C31876 * C31835 * C209 +
          ((C113 * C213 - C101 * C223 + C114 * C214 - C102 * C224 +
            C115 * C215 - C103 * C225 + C116 * C216 - C104 * C226 +
            C117 * C217 - C105 * C227) *
               C118 +
           (C113 * C228 - C101 * C243 + C114 * C229 - C102 * C244 +
            C115 * C230 - C103 * C245 + C116 * C231 - C104 * C246 +
            C117 * C232 - C105 * C247) *
               C31864) *
              C31876 * C31835 * C210 +
          ((C101 * C233 - C113 * C218 + C102 * C234 - C114 * C219 +
            C103 * C235 - C115 * C220 + C104 * C236 - C116 * C221 +
            C105 * C237 - C117 * C222) *
               C118 +
           (C101 * C248 - C113 * C238 + C102 * C249 - C114 * C239 +
            C103 * C250 - C115 * C240 + C104 * C251 - C116 * C241 +
            C105 * C252 - C117 * C242) *
               C31864) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
            C32137 * C128 - C756 * C121) *
               C757 +
           (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
            C32137 * C142 - C756 * C133) *
               C32183 +
           (C748 * C223 - C754 * C213 + C749 * C224 - C755 * C214 +
            C32137 * C225 - C756 * C215) *
               C758 +
           (C748 * C243 - C754 * C228 + C749 * C244 - C755 * C229 +
            C32137 * C245 - C756 * C230) *
               C32171 +
           (C748 * C233 - C754 * C218 + C749 * C234 - C755 * C219 +
            C32137 * C235 - C756 * C220) *
               C759 +
           (C748 * C248 - C754 * C238 + C749 * C249 - C755 * C239 +
            C32137 * C250 - C756 * C240) *
               C32148) *
              C31876 * C31835 * C31821 * C110 +
          ((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
            C756 * C122 - C32137 * C129) *
               C757 +
           (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
            C756 * C134 - C32137 * C143) *
               C32183 +
           (C754 * C214 - C748 * C224 + C755 * C215 - C749 * C225 +
            C756 * C216 - C32137 * C226) *
               C758 +
           (C754 * C229 - C748 * C244 + C755 * C230 - C749 * C245 +
            C756 * C231 - C32137 * C246) *
               C32171 +
           (C754 * C219 - C748 * C234 + C755 * C220 - C749 * C235 +
            C756 * C221 - C32137 * C236) *
               C759 +
           (C754 * C239 - C748 * C249 + C755 * C240 - C749 * C250 +
            C756 * C241 - C32137 * C251) *
               C32148) *
              C31876 * C31835 * C31821 * C111 +
          ((C748 * C128 - C754 * C121 + C749 * C129 - C755 * C122 +
            C32137 * C130 - C756 * C123) *
               C757 +
           (C748 * C142 - C754 * C133 + C749 * C143 - C755 * C134 +
            C32137 * C144 - C756 * C135) *
               C32183 +
           (C748 * C225 - C754 * C215 + C749 * C226 - C755 * C216 +
            C32137 * C227 - C756 * C217) *
               C758 +
           (C748 * C245 - C754 * C230 + C749 * C246 - C755 * C231 +
            C32137 * C247 - C756 * C232) *
               C32171 +
           (C748 * C235 - C754 * C220 + C749 * C236 - C755 * C221 +
            C32137 * C237 - C756 * C222) *
               C759 +
           (C748 * C250 - C754 * C240 + C749 * C251 - C755 * C241 +
            C32137 * C252 - C756 * C242) *
               C32148) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
            C32137 * C128 - C756 * C121) *
               C757 +
           (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
            C32137 * C142 - C756 * C133) *
               C32183 +
           (C895 - C896 + C897 - C898 + C899 - C900) * C758 +
           (C901 - C902 + C903 - C904 + C905 - C906) * C32171 + C939 * C759 +
           C940 * C32148) *
              C31876 * C31835 * C209 +
          ((C896 - C895 + C898 - C897 + C900 - C899) * C757 +
           (C902 - C901 + C904 - C903 + C906 - C905) * C32183 +
           (C908 - C907 + C910 - C909 + C912 - C911) * C758 +
           (C914 - C913 + C916 - C915 + C918 - C917) * C32171 +
           (C919 - C920 + C921 - C922 + C923 - C924) * C759 +
           (C925 - C926 + C927 - C928 + C929 - C930) * C32148) *
              C31876 * C31835 * C210 +
          (C939 * C757 + C940 * C32183 +
           (C920 - C919 + C922 - C921 + C924 - C923) * C758 +
           (C926 - C925 + C928 - C927 + C930 - C929) * C32171 +
           (C748 * C882 - C754 * C873 + C749 * C883 - C755 * C874 +
            C32137 * C884 - C756 * C875) *
               C759 +
           (C748 * C891 - C754 * C885 + C749 * C892 - C755 * C886 +
            C32137 * C893 - C756 * C887) *
               C32148) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
             C32137 * C128 - C756 * C121) *
                C118 +
            (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
             C32137 * C142 - C756 * C133) *
                C31864) *
               C32184 +
           ((C748 * C328 - C754 * C318 + C749 * C329 - C755 * C319 +
             C32137 * C330 - C756 * C320) *
                C118 +
            (C748 * C348 - C754 * C333 + C749 * C349 - C755 * C334 +
             C32137 * C350 - C756 * C335) *
                C31864) *
               C32173 +
           ((C748 * C338 - C754 * C323 + C749 * C339 - C755 * C324 +
             C32137 * C340 - C756 * C325) *
                C118 +
            (C748 * C353 - C754 * C343 + C749 * C354 - C755 * C344 +
             C32137 * C355 - C756 * C345) *
                C31864) *
               C32151) *
              C31835 * C31821 * C110 +
          (((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
             C756 * C122 - C32137 * C129) *
                C118 +
            (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
             C756 * C134 - C32137 * C143) *
                C31864) *
               C32184 +
           ((C754 * C319 - C748 * C329 + C755 * C320 - C749 * C330 +
             C756 * C321 - C32137 * C331) *
                C118 +
            (C754 * C334 - C748 * C349 + C755 * C335 - C749 * C350 +
             C756 * C336 - C32137 * C351) *
                C31864) *
               C32173 +
           ((C754 * C324 - C748 * C339 + C755 * C325 - C749 * C340 +
             C756 * C326 - C32137 * C341) *
                C118 +
            (C754 * C344 - C748 * C354 + C755 * C345 - C749 * C355 +
             C756 * C346 - C32137 * C356) *
                C31864) *
               C32151) *
              C31835 * C31821 * C111 +
          (((C748 * C128 - C754 * C121 + C749 * C129 - C755 * C122 +
             C32137 * C130 - C756 * C123) *
                C118 +
            (C748 * C142 - C754 * C133 + C749 * C143 - C755 * C134 +
             C32137 * C144 - C756 * C135) *
                C31864) *
               C32184 +
           ((C748 * C330 - C754 * C320 + C749 * C331 - C755 * C321 +
             C32137 * C332 - C756 * C322) *
                C118 +
            (C748 * C350 - C754 * C335 + C749 * C351 - C755 * C336 +
             C32137 * C352 - C756 * C337) *
                C31864) *
               C32173 +
           ((C748 * C340 - C754 * C325 + C749 * C341 - C755 * C326 +
             C32137 * C342 - C756 * C327) *
                C118 +
            (C748 * C355 - C754 * C345 + C749 * C356 - C755 * C346 +
             C32137 * C357 - C756 * C347) *
                C31864) *
               C32151) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
             C32137 * C128 - C756 * C121) *
                C118 +
            (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
             C32137 * C142 - C756 * C133) *
                C31864) *
               C32184 +
           ((C748 * C328 - C754 * C318 + C749 * C329 - C755 * C319 +
             C32137 * C330 - C756 * C320) *
                C118 +
            (C748 * C348 - C754 * C333 + C749 * C349 - C755 * C334 +
             C32137 * C350 - C756 * C335) *
                C31864) *
               C32173 +
           ((C748 * C338 - C754 * C323 + C749 * C339 - C755 * C324 +
             C32137 * C340 - C756 * C325) *
                C118 +
            (C748 * C353 - C754 * C343 + C749 * C354 - C755 * C344 +
             C32137 * C355 - C756 * C345) *
                C31864) *
               C32151) *
              C31835 * C209 +
          (((C896 - C895 + C898 - C897 + C900 - C899) * C118 +
            (C902 - C901 + C904 - C903 + C906 - C905) * C31864) *
               C32184 +
           ((C1569 - C1570 + C1571 - C1572 + C1573 - C1574) * C118 +
            (C1575 - C1576 + C1577 - C1578 + C1579 - C1580) * C31864) *
               C32173 +
           ((C754 * C1053 - C748 * C1065 + C755 * C1054 - C749 * C1066 +
             C756 * C1055 - C32137 * C1067) *
                C118 +
            (C754 * C1068 - C748 * C1080 + C755 * C1069 - C749 * C1081 +
             C756 * C1070 - C32137 * C1082) *
                C31864) *
               C32151) *
              C31835 * C210 +
          ((C939 * C118 + C940 * C31864) * C32184 +
           ((C1582 - C1581 + C1584 - C1583 + C1586 - C1585) * C118 +
            (C1588 - C1587 + C1590 - C1589 + C1592 - C1591) * C31864) *
               C32173 +
           ((C748 * C1071 - C754 * C1056 + C749 * C1072 - C755 * C1057 +
             C32137 * C1073 - C756 * C1058) *
                C118 +
            (C748 * C1083 - C754 * C1074 + C749 * C1084 - C755 * C1075 +
             C32137 * C1085 - C756 * C1076) *
                C31864) *
               C32151) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
            C32137 * C128 - C5156 * C121) *
               C5157 +
           (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
            C32137 * C142 - C5156 * C133) *
               C5151 +
           (C32180 * C223 - C5154 * C213 + C32167 * C224 - C5155 * C214 +
            C32137 * C225 - C5156 * C215) *
               C5158 +
           (C32180 * C243 - C5154 * C228 + C32167 * C244 - C5155 * C229 +
            C32137 * C245 - C5156 * C230) *
               C5152 +
           (C32180 * C233 - C5154 * C218 + C32167 * C234 - C5155 * C219 +
            C32137 * C235 - C5156 * C220) *
               C5159 +
           (C32180 * C248 - C5154 * C238 + C32167 * C249 - C5155 * C239 +
            C32137 * C250 - C5156 * C240) *
               C32148) *
              C31876 * C31835 * C31821 * C110 +
          ((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
            C5156 * C122 - C32137 * C129) *
               C5157 +
           (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
            C5156 * C134 - C32137 * C143) *
               C5151 +
           (C5154 * C214 - C32180 * C224 + C5155 * C215 - C32167 * C225 +
            C5156 * C216 - C32137 * C226) *
               C5158 +
           (C5154 * C229 - C32180 * C244 + C5155 * C230 - C32167 * C245 +
            C5156 * C231 - C32137 * C246) *
               C5152 +
           (C5154 * C219 - C32180 * C234 + C5155 * C220 - C32167 * C235 +
            C5156 * C221 - C32137 * C236) *
               C5159 +
           (C5154 * C239 - C32180 * C249 + C5155 * C240 - C32167 * C250 +
            C5156 * C241 - C32137 * C251) *
               C32148) *
              C31876 * C31835 * C31821 * C111 +
          ((C32180 * C128 - C5154 * C121 + C32167 * C129 - C5155 * C122 +
            C32137 * C130 - C5156 * C123) *
               C5157 +
           (C32180 * C142 - C5154 * C133 + C32167 * C143 - C5155 * C134 +
            C32137 * C144 - C5156 * C135) *
               C5151 +
           (C32180 * C225 - C5154 * C215 + C32167 * C226 - C5155 * C216 +
            C32137 * C227 - C5156 * C217) *
               C5158 +
           (C32180 * C245 - C5154 * C230 + C32167 * C246 - C5155 * C231 +
            C32137 * C247 - C5156 * C232) *
               C5152 +
           (C32180 * C235 - C5154 * C220 + C32167 * C236 - C5155 * C221 +
            C32137 * C237 - C5156 * C222) *
               C5159 +
           (C32180 * C250 - C5154 * C240 + C32167 * C251 - C5155 * C241 +
            C32137 * C252 - C5156 * C242) *
               C32148) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
            C32137 * C128 - C5156 * C121) *
               C5157 +
           (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
            C32137 * C142 - C5156 * C133) *
               C5151 +
           (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C5158 +
           (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C5152 +
           C5315 * C5159 + C5316 * C32148) *
              C31876 * C31835 * C209 +
          ((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C5157 +
           (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C5151 +
           (C5284 - C5283 + C5286 - C5285 + C5288 - C5287) * C5158 +
           (C5290 - C5289 + C5292 - C5291 + C5294 - C5293) * C5152 +
           (C5295 - C5296 + C5297 - C5298 + C5299 - C5300) * C5159 +
           (C5301 - C5302 + C5303 - C5304 + C5305 - C5306) * C32148) *
              C31876 * C31835 * C210 +
          (C5315 * C5157 + C5316 * C5151 +
           (C5296 - C5295 + C5298 - C5297 + C5300 - C5299) * C5158 +
           (C5302 - C5301 + C5304 - C5303 + C5306 - C5305) * C5152 +
           (C32180 * C882 - C5154 * C873 + C32167 * C883 - C5155 * C874 +
            C32137 * C884 - C5156 * C875) *
               C5159 +
           (C32180 * C891 - C5154 * C885 + C32167 * C892 - C5155 * C886 +
            C32137 * C893 - C5156 * C887) *
               C32148) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C31772 * C126 - C5980 * C119) * C5981 +
           (C31772 * C140 - C5980 * C131) * C5975 +
           (C31772 * C223 - C5980 * C213) * C5982 +
           (C31772 * C243 - C5980 * C228) * C5976 +
           (C31772 * C233 - C5980 * C218) * C5983 +
           (C31772 * C248 - C5980 * C238) * C5977 +
           (C31772 * C876 - C5980 * C870) * C5984 +
           (C31772 * C888 - C5980 * C879) * C5978 +
           (C31772 * C882 - C5980 * C873) * C5985 +
           (C31772 * C891 - C5980 * C885) * C5979) *
              C31876 * C31835 * C31821 * C110 +
          ((C5980 * C120 - C31772 * C127) * C5981 +
           (C5980 * C132 - C31772 * C141) * C5975 +
           (C5980 * C214 - C31772 * C224) * C5982 +
           (C5980 * C229 - C31772 * C244) * C5976 +
           (C5980 * C219 - C31772 * C234) * C5983 +
           (C5980 * C239 - C31772 * C249) * C5977 +
           (C5980 * C871 - C31772 * C877) * C5984 +
           (C5980 * C880 - C31772 * C889) * C5978 +
           (C5980 * C874 - C31772 * C883) * C5985 +
           (C5980 * C886 - C31772 * C892) * C5979) *
              C31876 * C31835 * C31821 * C111 +
          ((C31772 * C128 - C5980 * C121) * C5981 +
           (C31772 * C142 - C5980 * C133) * C5975 +
           (C31772 * C225 - C5980 * C215) * C5982 +
           (C31772 * C245 - C5980 * C230) * C5976 +
           (C31772 * C235 - C5980 * C220) * C5983 +
           (C31772 * C250 - C5980 * C240) * C5977 +
           (C31772 * C878 - C5980 * C872) * C5984 +
           (C31772 * C890 - C5980 * C881) * C5978 +
           (C31772 * C884 - C5980 * C875) * C5985 +
           (C31772 * C893 - C5980 * C887) * C5979) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C31772 * C126 - C5980 * C119) * C5981 +
           (C31772 * C140 - C5980 * C131) * C5975 + (C6057 - C6058) * C5982 +
           (C6059 - C6060) * C5976 + C6077 * C5983 + C6078 * C5977 +
           C6079 * C5984 + C6080 * C5978 + C6081 * C5985 + C6082 * C5979) *
              C31876 * C31835 * C209 +
          ((C6058 - C6057) * C5981 + (C6060 - C6059) * C5975 +
           (C6062 - C6061) * C5982 + (C6064 - C6063) * C5976 +
           (C6066 - C6065) * C5983 + (C6068 - C6067) * C5977 +
           (C6070 - C6069) * C5984 + (C6072 - C6071) * C5978 +
           (C6073 - C6074) * C5985 + (C6075 - C6076) * C5979) *
              C31876 * C31835 * C210 +
          (C6077 * C5981 + C6078 * C5975 + C6079 * C5982 + C6080 * C5976 +
           C6081 * C5983 + C6082 * C5977 + (C6074 - C6073) * C5984 +
           (C6076 - C6075) * C5978 + (C31772 * C6052 - C5980 * C6049) * C5985 +
           (C31772 * C6055 - C5980 * C6053) * C5979) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C5157 +
            (C31772 * C140 - C5980 * C131) * C5151 + (C6057 - C6058) * C5158 +
            (C6059 - C6060) * C5152 + C6077 * C5159 + C6078 * C32148) *
               C32184 +
           ((C31772 * C328 - C5980 * C318) * C5157 +
            (C31772 * C348 - C5980 * C333) * C5151 + (C6432 - C6431) * C5158 +
            (C6434 - C6433) * C5152 + (C6436 - C6435) * C5159 +
            (C6438 - C6437) * C32148) *
               C32173 +
           ((C31772 * C338 - C5980 * C323) * C5157 +
            (C31772 * C353 - C5980 * C343) * C5151 +
            (C31772 * C1065 - C5980 * C1053) * C5158 +
            (C31772 * C1080 - C5980 * C1068) * C5152 +
            (C31772 * C1071 - C5980 * C1056) * C5159 +
            (C31772 * C1083 - C5980 * C1074) * C32148) *
               C32151) *
              C31835 * C31821 * C110 +
          (((C5980 * C120 - C31772 * C127) * C5157 +
            (C5980 * C132 - C31772 * C141) * C5151 + (C6243 - C6244) * C5158 +
            (C6245 - C6246) * C5152 + (C6247 - C6248) * C5159 +
            (C6249 - C6250) * C32148) *
               C32184 +
           ((C5980 * C319 - C31772 * C329) * C5157 +
            (C5980 * C334 - C31772 * C349) * C5151 +
            (C5980 * C619 - C31772 * C624) * C5158 +
            (C5980 * C629 - C31772 * C634) * C5152 +
            (C5980 * C1051 - C31772 * C1060) * C5159 +
            (C5980 * C1063 - C31772 * C1078) * C32148) *
               C32173 +
           ((C5980 * C324 - C31772 * C339) * C5157 +
            (C5980 * C344 - C31772 * C354) * C5151 +
            (C5980 * C1054 - C31772 * C1066) * C5158 +
            (C5980 * C1069 - C31772 * C1081) * C5152 +
            (C5980 * C1057 - C31772 * C1072) * C5159 +
            (C5980 * C1075 - C31772 * C1084) * C32148) *
               C32151) *
              C31835 * C31821 * C111 +
          (((C31772 * C128 - C5980 * C121) * C5157 +
            (C31772 * C142 - C5980 * C133) * C5151 +
            (C31772 * C225 - C5980 * C215) * C5158 +
            (C31772 * C245 - C5980 * C230) * C5152 +
            (C31772 * C235 - C5980 * C220) * C5159 +
            (C31772 * C250 - C5980 * C240) * C32148) *
               C32184 +
           ((C31772 * C330 - C5980 * C320) * C5157 +
            (C31772 * C350 - C5980 * C335) * C5151 +
            (C31772 * C625 - C5980 * C620) * C5158 +
            (C31772 * C635 - C5980 * C630) * C5152 +
            (C31772 * C1061 - C5980 * C1052) * C5159 +
            (C31772 * C1079 - C5980 * C1064) * C32148) *
               C32173 +
           ((C31772 * C340 - C5980 * C325) * C5157 +
            (C31772 * C355 - C5980 * C345) * C5151 +
            (C31772 * C1067 - C5980 * C1055) * C5158 +
            (C31772 * C1082 - C5980 * C1070) * C5152 +
            (C31772 * C1073 - C5980 * C1058) * C5159 +
            (C31772 * C1085 - C5980 * C1076) * C32148) *
               C32151) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C5157 +
            (C31772 * C140 - C5980 * C131) * C5151 + (C6057 - C6058) * C5158 +
            (C6059 - C6060) * C5152 + C6077 * C5159 + C6078 * C32148) *
               C32184 +
           ((C31772 * C328 - C5980 * C318) * C5157 +
            (C31772 * C348 - C5980 * C333) * C5151 + (C6432 - C6431) * C5158 +
            (C6434 - C6433) * C5152 + C6667 * C5159 + C6668 * C32148) *
               C32173 +
           ((C31772 * C338 - C5980 * C323) * C5157 +
            (C31772 * C353 - C5980 * C343) * C5151 + (C6669 - C6670) * C5158 +
            (C6671 - C6672) * C5152 + C6681 * C5159 + C6682 * C32148) *
               C32151) *
              C31835 * C209 +
          (((C6058 - C6057) * C5157 + (C6060 - C6059) * C5151 +
            (C6062 - C6061) * C5158 + (C6064 - C6063) * C5152 +
            (C6066 - C6065) * C5159 + (C6068 - C6067) * C32148) *
               C32184 +
           ((C6431 - C6432) * C5157 + (C6433 - C6434) * C5151 +
            (C6435 - C6436) * C5158 + (C6437 - C6438) * C5152 +
            (C6439 - C6440) * C5159 + (C6441 - C6442) * C32148) *
               C32173 +
           ((C6670 - C6669) * C5157 + (C6672 - C6671) * C5151 +
            (C6674 - C6673) * C5158 + (C6676 - C6675) * C5152 +
            (C6677 - C6678) * C5159 + (C6679 - C6680) * C32148) *
               C32151) *
              C31835 * C210 +
          ((C6077 * C5157 + C6078 * C5151 + C6079 * C5158 + C6080 * C5152 +
            C6081 * C5159 + C6082 * C32148) *
               C32184 +
           (C6667 * C5157 + C6668 * C5151 + (C6440 - C6439) * C5158 +
            (C6442 - C6441) * C5152 + (C6444 - C6443) * C5159 +
            (C6446 - C6445) * C32148) *
               C32173 +
           (C6681 * C5157 + C6682 * C5151 + (C6678 - C6677) * C5158 +
            (C6680 - C6679) * C5152 + (C31772 * C6151 - C5980 * C6146) * C5159 +
            (C31772 * C6155 - C5980 * C6152) * C32148) *
               C32151) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C118 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C31864) *
               C10013 +
           ((C32180 * C328 - C5154 * C318 + C32167 * C329 - C5155 * C319 +
             C32137 * C330 - C5156 * C320) *
                C118 +
            (C32180 * C348 - C5154 * C333 + C32167 * C349 - C5155 * C334 +
             C32137 * C350 - C5156 * C335) *
                C31864) *
               C10014 +
           ((C32180 * C338 - C5154 * C323 + C32167 * C339 - C5155 * C324 +
             C32137 * C340 - C5156 * C325) *
                C118 +
            (C32180 * C353 - C5154 * C343 + C32167 * C354 - C5155 * C344 +
             C32137 * C355 - C5156 * C345) *
                C31864) *
               C32151) *
              C31835 * C31821 * C110 +
          (((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
             C5156 * C122 - C32137 * C129) *
                C118 +
            (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
             C5156 * C134 - C32137 * C143) *
                C31864) *
               C10013 +
           ((C5154 * C319 - C32180 * C329 + C5155 * C320 - C32167 * C330 +
             C5156 * C321 - C32137 * C331) *
                C118 +
            (C5154 * C334 - C32180 * C349 + C5155 * C335 - C32167 * C350 +
             C5156 * C336 - C32137 * C351) *
                C31864) *
               C10014 +
           ((C5154 * C324 - C32180 * C339 + C5155 * C325 - C32167 * C340 +
             C5156 * C326 - C32137 * C341) *
                C118 +
            (C5154 * C344 - C32180 * C354 + C5155 * C345 - C32167 * C355 +
             C5156 * C346 - C32137 * C356) *
                C31864) *
               C32151) *
              C31835 * C31821 * C111 +
          (((C32180 * C128 - C5154 * C121 + C32167 * C129 - C5155 * C122 +
             C32137 * C130 - C5156 * C123) *
                C118 +
            (C32180 * C142 - C5154 * C133 + C32167 * C143 - C5155 * C134 +
             C32137 * C144 - C5156 * C135) *
                C31864) *
               C10013 +
           ((C32180 * C330 - C5154 * C320 + C32167 * C331 - C5155 * C321 +
             C32137 * C332 - C5156 * C322) *
                C118 +
            (C32180 * C350 - C5154 * C335 + C32167 * C351 - C5155 * C336 +
             C32137 * C352 - C5156 * C337) *
                C31864) *
               C10014 +
           ((C32180 * C340 - C5154 * C325 + C32167 * C341 - C5155 * C326 +
             C32137 * C342 - C5156 * C327) *
                C118 +
            (C32180 * C355 - C5154 * C345 + C32167 * C356 - C5155 * C346 +
             C32137 * C357 - C5156 * C347) *
                C31864) *
               C32151) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C118 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C31864) *
               C10013 +
           ((C32180 * C328 - C5154 * C318 + C32167 * C329 - C5155 * C319 +
             C32137 * C330 - C5156 * C320) *
                C118 +
            (C32180 * C348 - C5154 * C333 + C32167 * C349 - C5155 * C334 +
             C32137 * C350 - C5156 * C335) *
                C31864) *
               C10014 +
           ((C32180 * C338 - C5154 * C323 + C32167 * C339 - C5155 * C324 +
             C32137 * C340 - C5156 * C325) *
                C118 +
            (C32180 * C353 - C5154 * C343 + C32167 * C354 - C5155 * C344 +
             C32137 * C355 - C5156 * C345) *
                C31864) *
               C32151) *
              C31835 * C209 +
          (((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C118 +
            (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C31864) *
               C10013 +
           ((C5889 - C5890 + C5891 - C5892 + C5893 - C5894) * C118 +
            (C5895 - C5896 + C5897 - C5898 + C5899 - C5900) * C31864) *
               C10014 +
           ((C5154 * C1053 - C32180 * C1065 + C5155 * C1054 - C32167 * C1066 +
             C5156 * C1055 - C32137 * C1067) *
                C118 +
            (C5154 * C1068 - C32180 * C1080 + C5155 * C1069 - C32167 * C1081 +
             C5156 * C1070 - C32137 * C1082) *
                C31864) *
               C32151) *
              C31835 * C210 +
          ((C5315 * C118 + C5316 * C31864) * C10013 +
           ((C5902 - C5901 + C5904 - C5903 + C5906 - C5905) * C118 +
            (C5908 - C5907 + C5910 - C5909 + C5912 - C5911) * C31864) *
               C10014 +
           ((C32180 * C1071 - C5154 * C1056 + C32167 * C1072 - C5155 * C1057 +
             C32137 * C1073 - C5156 * C1058) *
                C118 +
            (C32180 * C1083 - C5154 * C1074 + C32167 * C1084 - C5155 * C1075 +
             C32137 * C1085 - C5156 * C1076) *
                C31864) *
               C32151) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C757 +
            (C31772 * C140 - C5980 * C131) * C32183 + (C6057 - C6058) * C758 +
            (C6059 - C6060) * C32171 + C6077 * C759 + C6078 * C32148) *
               C10013 +
           ((C6805 - C6806) * C757 + (C6807 - C6808) * C32183 + C7314 * C758 +
            C7315 * C32171 + C6667 * C759 + C6668 * C32148) *
               C10014 +
           (C6829 * C757 + C6830 * C32183 + C6813 * C758 + C6814 * C32171 +
            C6681 * C759 + C6682 * C32148) *
               C32151) *
              C31835 * C31821 * C110 +
          (((C5980 * C120 - C31772 * C127) * C757 +
            (C5980 * C132 - C31772 * C141) * C32183 + (C6243 - C6244) * C758 +
            (C6245 - C6246) * C32171 + (C6247 - C6248) * C759 +
            (C6249 - C6250) * C32148) *
               C10013 +
           ((C7156 - C7157) * C757 + (C7158 - C7159) * C32183 +
            (C6990 - C6991) * C758 + (C6992 - C6993) * C32171 +
            (C6994 - C6995) * C759 + (C6996 - C6997) * C32148) *
               C10014 +
           ((C7160 - C7161) * C757 + (C7162 - C7163) * C32183 +
            (C6998 - C6999) * C758 + (C7000 - C7001) * C32171 +
            (C7002 - C7003) * C759 + (C7004 - C7005) * C32148) *
               C32151) *
              C31835 * C31821 * C111 +
          (((C31772 * C128 - C5980 * C121) * C757 +
            (C31772 * C142 - C5980 * C133) * C32183 +
            (C31772 * C225 - C5980 * C215) * C758 +
            (C31772 * C245 - C5980 * C230) * C32171 +
            (C31772 * C235 - C5980 * C220) * C759 +
            (C31772 * C250 - C5980 * C240) * C32148) *
               C10013 +
           ((C31772 * C330 - C5980 * C320) * C757 +
            (C31772 * C350 - C5980 * C335) * C32183 +
            (C31772 * C625 - C5980 * C620) * C758 +
            (C31772 * C635 - C5980 * C630) * C32171 +
            (C31772 * C1061 - C5980 * C1052) * C759 +
            (C31772 * C1079 - C5980 * C1064) * C32148) *
               C10014 +
           ((C31772 * C340 - C5980 * C325) * C757 +
            (C31772 * C355 - C5980 * C345) * C32183 +
            (C31772 * C1067 - C5980 * C1055) * C758 +
            (C31772 * C1082 - C5980 * C1070) * C32171 +
            (C31772 * C1073 - C5980 * C1058) * C759 +
            (C31772 * C1085 - C5980 * C1076) * C32148) *
               C32151) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C757 +
            (C31772 * C140 - C5980 * C131) * C32183 + (C6057 - C6058) * C758 +
            (C6059 - C6060) * C32171 + C6077 * C759 + C6078 * C32148) *
               C10013 +
           ((C6805 - C6806) * C757 + (C6807 - C6808) * C32183 + C7314 * C758 +
            C7315 * C32171 + C6667 * C759 + C6668 * C32148) *
               C10014 +
           (C6829 * C757 + C6830 * C32183 + C6813 * C758 + C6814 * C32171 +
            C6681 * C759 + C6682 * C32148) *
               C32151) *
              C31835 * C209 +
          (((C6058 - C6057) * C757 + (C6060 - C6059) * C32183 +
            (C6062 - C6061) * C758 + (C6064 - C6063) * C32171 +
            (C6066 - C6065) * C759 + (C6068 - C6067) * C32148) *
               C10013 +
           (C7316 * C757 + C7317 * C32183 + C7318 * C758 + C7319 * C32171 +
            C9902 * C759 + C9903 * C32148) *
               C10014 +
           (C7320 * C757 + C7321 * C32183 + C7322 * C758 + C7323 * C32171 +
            (C6677 - C6678) * C759 + (C6679 - C6680) * C32148) *
               C32151) *
              C31835 * C210 +
          ((C6077 * C757 + C6078 * C32183 + C6079 * C758 + C6080 * C32171 +
            C6081 * C759 + C6082 * C32148) *
               C10013 +
           (C6667 * C757 + C6668 * C32183 + C9408 * C758 + C9409 * C32171 +
            (C6444 - C6443) * C759 + (C6446 - C6445) * C32148) *
               C10014 +
           (C6681 * C757 + C6682 * C32183 + (C6678 - C6677) * C758 +
            (C6680 - C6679) * C32171 + (C31772 * C6151 - C5980 * C6146) * C759 +
            (C31772 * C6155 - C5980 * C6152) * C32148) *
               C32151) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C118 +
            (C31772 * C140 - C5980 * C131) * C31864) *
               C11600 +
           ((C6805 - C6806) * C118 + (C6807 - C6808) * C31864) * C11601 +
           (C6829 * C118 + C6830 * C31864) * C11602 +
           ((C6818 - C6817) * C118 + (C6820 - C6819) * C31864) * C11603 +
           ((C31772 * C1937 - C5980 * C1928) * C118 +
            (C31772 * C1946 - C5980 * C1940) * C31864) *
               C11604) *
              C31835 * C31821 * C110 +
          (((C5980 * C120 - C31772 * C127) * C118 +
            (C5980 * C132 - C31772 * C141) * C31864) *
               C11600 +
           ((C7156 - C7157) * C118 + (C7158 - C7159) * C31864) * C11601 +
           ((C7160 - C7161) * C118 + (C7162 - C7163) * C31864) * C11602 +
           ((C5980 * C1926 - C31772 * C1932) * C118 +
            (C5980 * C1935 - C31772 * C1944) * C31864) *
               C11603 +
           ((C5980 * C1929 - C31772 * C1938) * C118 +
            (C5980 * C1941 - C31772 * C1947) * C31864) *
               C11604) *
              C31835 * C31821 * C111 +
          (((C31772 * C128 - C5980 * C121) * C118 +
            (C31772 * C142 - C5980 * C133) * C31864) *
               C11600 +
           ((C31772 * C330 - C5980 * C320) * C118 +
            (C31772 * C350 - C5980 * C335) * C31864) *
               C11601 +
           ((C31772 * C340 - C5980 * C325) * C118 +
            (C31772 * C355 - C5980 * C345) * C31864) *
               C11602 +
           ((C31772 * C1933 - C5980 * C1927) * C118 +
            (C31772 * C1945 - C5980 * C1936) * C31864) *
               C11603 +
           ((C31772 * C1939 - C5980 * C1930) * C118 +
            (C31772 * C1948 - C5980 * C1942) * C31864) *
               C11604) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C118 +
            (C31772 * C140 - C5980 * C131) * C31864) *
               C11600 +
           ((C6805 - C6806) * C118 + (C6807 - C6808) * C31864) * C11601 +
           (C6829 * C118 + C6830 * C31864) * C11602 +
           ((C6818 - C6817) * C118 + (C6820 - C6819) * C31864) * C11603 +
           ((C31772 * C1937 - C5980 * C1928) * C118 +
            (C31772 * C1946 - C5980 * C1940) * C31864) *
               C11604) *
              C31835 * C209 +
          (((C6058 - C6057) * C118 + (C6060 - C6059) * C31864) * C11600 +
           (C7316 * C118 + C7317 * C31864) * C11601 +
           (C7320 * C118 + C7321 * C31864) * C11602 +
           ((C6821 - C6822) * C118 + (C6823 - C6824) * C31864) * C11603 +
           ((C5980 * C6793 - C31772 * C6797) * C118 +
            (C5980 * C6798 - C31772 * C6802) * C31864) *
               C11604) *
              C31835 * C210 +
          ((C6077 * C118 + C6078 * C31864) * C11600 +
           (C6667 * C118 + C6668 * C31864) * C11601 +
           (C6681 * C118 + C6682 * C31864) * C11602 +
           ((C6826 - C6825) * C118 + (C6828 - C6827) * C31864) * C11603 +
           ((C31772 * C6799 - C5980 * C6794) * C118 +
            (C31772 * C6803 - C5980 * C6800) * C31864) *
               C11604) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                 C5157 +
             (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                 C5151 +
             (C7532 - C7533 + C7534 - C7535) * C5158 +
             (C7536 - C7537 + C7538 - C7539) * C5152 + C7572 * C5159 +
             C7573 * C32148) *
                C32118 +
            ((C8556 - C8557 + C8558 - C8559) * C5157 +
             (C8560 - C8561 + C8562 - C8563) * C5151 +
             (C8089 - C8088 + C8091 - C8090) * C5158 +
             (C8093 - C8092 + C8095 - C8094) * C5152 + C8408 * C5159 +
             C8409 * C32148) *
                C31963) *
               C31835 * C440 +
           (((C7533 - C7532 + C7535 - C7534) * C5157 +
             (C7537 - C7536 + C7539 - C7538) * C5151 +
             (C7541 - C7540 + C7543 - C7542) * C5158 +
             (C7545 - C7544 + C7547 - C7546) * C5152 +
             (C7549 - C7548 + C7551 - C7550) * C5159 +
             (C7553 - C7552 + C7555 - C7554) * C32148) *
                C32118 +
            ((C8088 - C8089 + C8090 - C8091) * C5157 +
             (C8092 - C8093 + C8094 - C8095) * C5151 +
             (C8096 - C8097 + C8098 - C8099) * C5158 +
             (C8100 - C8101 + C8102 - C8103) * C5152 +
             (C8104 - C8105 + C8106 - C8107) * C5159 +
             (C8108 - C8109 + C8110 - C8111) * C32148) *
                C31963) *
               C31835 * C441) *
              C442 +
          ((((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                 C5157 +
             (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                 C5151 +
             (C7804 - C7805 + C7806 - C7807) * C5158 +
             (C7808 - C7809 + C7810 - C7811) * C5152 +
             (C7812 - C7813 + C7814 - C7815) * C5159 +
             (C7816 - C7817 + C7818 - C7819) * C32148) *
                C32118 +
            ((C30873 * C319 - C32098 * C329 + C30854 * C320 - C31782 * C330) *
                 C5157 +
             (C30873 * C334 - C32098 * C349 + C30854 * C335 - C31782 * C350) *
                 C5151 +
             (C8782 - C8783 + C8784 - C8785) * C5158 +
             (C8786 - C8787 + C8788 - C8789) * C5152 +
             (C8790 - C8791 + C8792 - C8793) * C5159 +
             (C8794 - C8795 + C8796 - C8797) * C32148) *
                C31963) *
               C31835 * C440 +
           (((C7805 - C7804 + C7807 - C7806) * C5157 +
             (C7809 - C7808 + C7811 - C7810) * C5151 +
             (C7813 - C7812 + C7815 - C7814) * C5158 +
             (C7817 - C7816 + C7819 - C7818) * C5152 +
             (C7821 - C7820 + C7823 - C7822) * C5159 +
             (C7825 - C7824 + C7827 - C7826) * C32148) *
                C32118 +
            ((C8783 - C8782 + C8785 - C8784) * C5157 +
             (C8787 - C8786 + C8789 - C8788) * C5151 +
             (C8791 - C8790 + C8793 - C8792) * C5158 +
             (C8795 - C8794 + C8797 - C8796) * C5152 +
             (C32098 * C1560 - C30873 * C1557 + C31782 * C1561 -
              C30854 * C1558) *
                 C5159 +
             (C32098 * C1566 - C30873 * C1563 + C31782 * C1567 -
              C30854 * C1564) *
                 C32148) *
                C31963) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
              C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
                 C118 +
             (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
              C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
                 C31864) *
                C32118 +
            ((C3549 - C3550 + C3551 - C3552 + C3553 - C3554 + C3555 - C3556) *
                 C118 +
             (C3557 - C3558 + C3559 - C3560 + C3561 - C3562 + C3563 - C3564) *
                 C31864) *
                C31963) *
               C31835 * C440 +
           (((C2702 - C2701 + C2704 - C2703 + C2706 - C2705 + C2708 - C2707) *
                 C118 +
             (C2710 - C2709 + C2712 - C2711 + C2714 - C2713 + C2716 - C2715) *
                 C31864) *
                C32118 +
            ((C3237 - C3238 + C3239 - C3240 + C3241 - C3242 + C3243 - C3244) *
                 C118 +
             (C3245 - C3246 + C3247 - C3248 + C3249 - C3250 + C3251 - C3252) *
                 C31864) *
                C31963) *
               C31835 * C441) *
              C442 +
          ((((C2596 * C120 - C2590 * C127 + C2597 * C121 - C2591 * C128 +
              C2598 * C122 - C2592 * C129 + C2599 * C123 - C32152 * C130) *
                 C118 +
             (C2596 * C132 - C2590 * C141 + C2597 * C133 - C2591 * C142 +
              C2598 * C134 - C2592 * C143 + C2599 * C135 - C32152 * C144) *
                 C31864) *
                C32118 +
            ((C2596 * C319 - C2590 * C329 + C2597 * C320 - C2591 * C330 +
              C2598 * C321 - C2592 * C331 + C2599 * C322 - C32152 * C332) *
                 C118 +
             (C2596 * C334 - C2590 * C349 + C2597 * C335 - C2591 * C350 +
              C2598 * C336 - C2592 * C351 + C2599 * C337 - C32152 * C352) *
                 C31864) *
                C31963) *
               C31835 * C440 +
           (((C2962 - C2961 + C2964 - C2963 + C2966 - C2965 + C2968 - C2967) *
                 C118 +
             (C2970 - C2969 + C2972 - C2971 + C2974 - C2973 + C2976 - C2975) *
                 C31864) *
                C32118 +
            ((C2590 * C624 - C2596 * C619 + C2591 * C625 - C2597 * C620 +
              C2592 * C626 - C2598 * C621 + C32152 * C627 - C2599 * C622) *
                 C118 +
             (C2590 * C634 - C2596 * C629 + C2591 * C635 - C2597 * C630 +
              C2592 * C636 - C2598 * C631 + C32152 * C637 - C2599 * C632) *
                 C31864) *
                C31963) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                 C118 +
             (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                 C31864) *
                C13203 +
            ((C8556 - C8557 + C8558 - C8559) * C118 +
             (C8560 - C8561 + C8562 - C8563) * C31864) *
                C13204 +
            C13418 * C13205 + C13423 * C32164) *
               C31835 * C440 +
           (((C7533 - C7532 + C7535 - C7534) * C118 +
             (C7537 - C7536 + C7539 - C7538) * C31864) *
                C13203 +
            (C9208 * C118 + C9209 * C31864) * C13204 +
            (C13104 * C118 + C13105 * C31864) * C13205 +
            ((C12483 - C12484 + C12485 - C12486) * C118 +
             (C12487 - C12488 + C12489 - C12490) * C31864) *
                C32164) *
               C31835 * C441) *
              C442 +
          ((((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                 C118 +
             (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                 C31864) *
                C13203 +
            ((C8992 - C8993 + C8994 - C8995) * C118 +
             (C8996 - C8997 + C8998 - C8999) * C31864) *
                C13204 +
            ((C12898 - C12899 + C12900 - C12901) * C118 +
             (C12902 - C12903 + C12904 - C12905) * C31864) *
                C13205 +
            ((C30873 * C1926 - C32098 * C1932 + C30854 * C1927 -
              C31782 * C1933) *
                 C118 +
             (C30873 * C1935 - C32098 * C1944 + C30854 * C1936 -
              C31782 * C1945) *
                 C31864) *
                C32164) *
               C31835 * C440 +
           (((C7805 - C7804 + C7807 - C7806) * C118 +
             (C7809 - C7808 + C7811 - C7810) * C31864) *
                C13203 +
            ((C8783 - C8782 + C8785 - C8784) * C118 +
             (C8787 - C8786 + C8789 - C8788) * C31864) *
                C13204 +
            ((C12697 - C12696 + C12699 - C12698) * C118 +
             (C12701 - C12700 + C12703 - C12702) * C31864) *
                C13205 +
            ((C32098 * C2472 - C30873 * C2469 + C31782 * C2473 -
              C30854 * C2470) *
                 C118 +
             (C32098 * C2478 - C30873 * C2475 + C31782 * C2479 -
              C30854 * C2476) *
                 C31864) *
                C32164) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                 C5157 +
             (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                 C5151 +
             (C7532 - C7533 + C7534 - C7535) * C5158 +
             (C7536 - C7537 + C7538 - C7539) * C5152 + C7572 * C5159 +
             C7573 * C32148) *
                C32118 +
            ((C8556 - C8557 + C8558 - C8559) * C5157 +
             (C8560 - C8561 + C8562 - C8563) * C5151 + C9206 * C5158 +
             C9207 * C5152 + C8408 * C5159 + C8409 * C32148) *
                C31963) *
               C530 +
           (((C8557 - C8556 + C8559 - C8558) * C5157 +
             (C8561 - C8560 + C8563 - C8562) * C5151 + C9208 * C5158 +
             C9209 * C5152 + C9210 * C5159 + C9211 * C32148) *
                C32118 +
            ((C8564 - C8565 + C8566 - C8567) * C5157 +
             (C8568 - C8569 + C8570 - C8571) * C5151 +
             (C8572 - C8573 + C8574 - C8575) * C5158 +
             (C8576 - C8577 + C8578 - C8579) * C5152 +
             (C8580 - C8581 + C8582 - C8583) * C5159 +
             (C8584 - C8585 + C8586 - C8587) * C32148) *
                C31963) *
               C531) *
              C440 +
          ((((C7533 - C7532 + C7535 - C7534) * C5157 +
             (C7537 - C7536 + C7539 - C7538) * C5151 +
             (C7541 - C7540 + C7543 - C7542) * C5158 +
             (C7545 - C7544 + C7547 - C7546) * C5152 +
             (C7549 - C7548 + C7551 - C7550) * C5159 +
             (C7553 - C7552 + C7555 - C7554) * C32148) *
                C32118 +
            (C9208 * C5157 + C9209 * C5151 + C9210 * C5158 + C9211 * C5152 +
             (C8104 - C8105 + C8106 - C8107) * C5159 +
             (C8108 - C8109 + C8110 - C8111) * C32148) *
                C31963) *
               C530 +
           ((C9206 * C5157 + C9207 * C5151 + C8408 * C5158 + C8409 * C5152 +
             (C8105 - C8104 + C8107 - C8106) * C5159 +
             (C8109 - C8108 + C8111 - C8110) * C32148) *
                C32118 +
            ((C8573 - C8572 + C8575 - C8574) * C5157 +
             (C8577 - C8576 + C8579 - C8578) * C5151 +
             (C8581 - C8580 + C8583 - C8582) * C5158 +
             (C8585 - C8584 + C8587 - C8586) * C5152 +
             (C32098 * C6149 - C30873 * C6145 + C31782 * C6986 -
              C30854 * C6985) *
                 C5159 +
             (C32098 * C6154 - C30873 * C6150 + C31782 * C6988 -
              C30854 * C6987) *
                 C32148) *
                C31963) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
              C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
                 C118 +
             (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
              C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
                 C31864) *
                C32118 +
            ((C3549 - C3550 + C3551 - C3552 + C3553 - C3554 + C3555 - C3556) *
                 C118 +
             (C3557 - C3558 + C3559 - C3560 + C3561 - C3562 + C3563 - C3564) *
                 C31864) *
                C31963) *
               C530 +
           (((C3550 - C3549 + C3552 - C3551 + C3554 - C3553 + C3556 - C3555) *
                 C118 +
             (C3558 - C3557 + C3560 - C3559 + C3562 - C3561 + C3564 - C3563) *
                 C31864) *
                C32118 +
            ((C3565 - C3566 + C3567 - C3568 + C3569 - C3570 + C3571 - C3572) *
                 C118 +
             (C3573 - C3574 + C3575 - C3576 + C3577 - C3578 + C3579 - C3580) *
                 C31864) *
                C31963) *
               C531) *
              C440 +
          ((((C2702 - C2701 + C2704 - C2703 + C2706 - C2705 + C2708 - C2707) *
                 C118 +
             (C2710 - C2709 + C2712 - C2711 + C2714 - C2713 + C2716 - C2715) *
                 C31864) *
                C32118 +
            ((C3237 - C3238 + C3239 - C3240 + C3241 - C3242 + C3243 - C3244) *
                 C118 +
             (C3245 - C3246 + C3247 - C3248 + C3249 - C3250 + C3251 - C3252) *
                 C31864) *
                C31963) *
               C530 +
           (((C3238 - C3237 + C3240 - C3239 + C3242 - C3241 + C3244 - C3243) *
                 C118 +
             (C3246 - C3245 + C3248 - C3247 + C3250 - C3249 + C3252 - C3251) *
                 C31864) *
                C32118 +
            ((C2590 * C1065 - C2596 * C1053 + C2591 * C1066 - C2597 * C1054 +
              C2592 * C1067 - C2598 * C1055 + C32152 * C2145 - C2599 * C2144) *
                 C118 +
             (C2590 * C1080 - C2596 * C1068 + C2591 * C1081 - C2597 * C1069 +
              C2592 * C1082 - C2598 * C1070 + C32152 * C2147 - C2599 * C2146) *
                 C31864) *
                C31963) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                 C118 +
             (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                 C31864) *
                C13203 +
            ((C8556 - C8557 + C8558 - C8559) * C118 +
             (C8560 - C8561 + C8562 - C8563) * C31864) *
                C13204 +
            C13418 * C13205 + C13423 * C32164) *
               C530 +
           (((C8557 - C8556 + C8559 - C8558) * C118 +
             (C8561 - C8560 + C8563 - C8562) * C31864) *
                C13203 +
            ((C8564 - C8565 + C8566 - C8567) * C118 +
             (C8568 - C8569 + C8570 - C8571) * C31864) *
                C13204 +
            ((C12475 - C12476 + C12477 - C12478) * C118 +
             (C12479 - C12480 + C12481 - C12482) * C31864) *
                C13205 +
            ((C13410 - C13411 + C13412 - C13413) * C118 +
             (C13414 - C13415 + C13416 - C13417) * C31864) *
                C32164) *
               C531) *
              C440 +
          ((((C7533 - C7532 + C7535 - C7534) * C118 +
             (C7537 - C7536 + C7539 - C7538) * C31864) *
                C13203 +
            (C9208 * C118 + C9209 * C31864) * C13204 +
            (C13104 * C118 + C13105 * C31864) * C13205 +
            ((C12483 - C12484 + C12485 - C12486) * C118 +
             (C12487 - C12488 + C12489 - C12490) * C31864) *
                C32164) *
               C530 +
           ((C9206 * C118 + C9207 * C31864) * C13203 +
            (C12493 * C118 + C12494 * C31864) * C13204 +
            ((C12484 - C12483 + C12486 - C12485) * C118 +
             (C12488 - C12487 + C12490 - C12489) * C31864) *
                C13205 +
            ((C32098 * C6797 - C30873 * C6793 + C31782 * C11841 -
              C30854 * C11840) *
                 C118 +
             (C32098 * C6802 - C30873 * C6798 + C31782 * C11843 -
              C30854 * C11842) *
                 C31864) *
                C32164) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
                 C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
                    C118 +
                (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
                 C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
                    C31864) *
                   C32118 +
               ((C2590 * C328 - C2596 * C318 + C2591 * C329 - C2597 * C319 +
                 C2592 * C330 - C2598 * C320 + C32152 * C331 - C2599 * C321) *
                    C118 +
                (C2590 * C348 - C2596 * C333 + C2591 * C349 - C2597 * C334 +
                 C2592 * C350 - C2598 * C335 + C32152 * C351 - C2599 * C336) *
                    C31864) *
                   C31963) *
                  C31835 * C31821 * C110 +
              (((C2596 * C120 - C2590 * C127 + C2597 * C121 - C2591 * C128 +
                 C2598 * C122 - C2592 * C129 + C2599 * C123 - C32152 * C130) *
                    C118 +
                (C2596 * C132 - C2590 * C141 + C2597 * C133 - C2591 * C142 +
                 C2598 * C134 - C2592 * C143 + C2599 * C135 - C32152 * C144) *
                    C31864) *
                   C32118 +
               ((C2596 * C319 - C2590 * C329 + C2597 * C320 - C2591 * C330 +
                 C2598 * C321 - C2592 * C331 + C2599 * C322 - C32152 * C332) *
                    C118 +
                (C2596 * C334 - C2590 * C349 + C2597 * C335 - C2591 * C350 +
                 C2598 * C336 - C2592 * C351 + C2599 * C337 - C32152 * C352) *
                    C31864) *
                   C31963) *
                  C31835 * C31821 * C111 +
              (((C2590 * C128 - C2596 * C121 + C2591 * C129 - C2597 * C122 +
                 C2592 * C130 - C2598 * C123 + C32152 * C136 - C2599 * C124) *
                    C118 +
                (C2590 * C142 - C2596 * C133 + C2591 * C143 - C2597 * C134 +
                 C2592 * C144 - C2598 * C135 + C32152 * C145 - C2599 * C137) *
                    C31864) *
                   C32118 +
               ((C2590 * C330 - C2596 * C320 + C2591 * C331 - C2597 * C321 +
                 C2592 * C332 - C2598 * C322 + C32152 * C533 - C2599 * C532) *
                    C118 +
                (C2590 * C350 - C2596 * C335 + C2591 * C351 - C2597 * C336 +
                 C2592 * C352 - C2598 * C337 + C32152 * C535 - C2599 * C534) *
                    C31864) *
                   C31963) *
                  C31835 * C31821 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
                 C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
                    C118 +
                (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
                 C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
                    C31864) *
                   C32118 +
               ((C2590 * C328 - C2596 * C318 + C2591 * C329 - C2597 * C319 +
                 C2592 * C330 - C2598 * C320 + C32152 * C331 - C2599 * C321) *
                    C118 +
                (C2590 * C348 - C2596 * C333 + C2591 * C349 - C2597 * C334 +
                 C2592 * C350 - C2598 * C335 + C32152 * C351 - C2599 * C336) *
                    C31864) *
                   C31963) *
                  C31835 * C209 +
              (((C2702 - C2701 + C2704 - C2703 + C2706 - C2705 + C2708 -
                 C2707) *
                    C118 +
                (C2710 - C2709 + C2712 - C2711 + C2714 - C2713 + C2716 -
                 C2715) *
                    C31864) *
                   C32118 +
               ((C3237 - C3238 + C3239 - C3240 + C3241 - C3242 + C3243 -
                 C3244) *
                    C118 +
                (C3245 - C3246 + C3247 - C3248 + C3249 - C3250 + C3251 -
                 C3252) *
                    C31864) *
                   C31963) *
                  C31835 * C210 +
              (((C2718 - C2717 + C2720 - C2719 + C2722 - C2721 + C2724 -
                 C2723) *
                    C118 +
                (C2726 - C2725 + C2728 - C2727 + C2730 - C2729 + C2732 -
                 C2731) *
                    C31864) *
                   C32118 +
               ((C2590 * C1059 - C2596 * C1050 + C2591 * C1060 - C2597 * C1051 +
                 C2592 * C1061 - C2598 * C1052 + C32152 * C1407 -
                 C2599 * C1406) *
                    C118 +
                (C2590 * C1077 - C2596 * C1062 + C2591 * C1078 - C2597 * C1063 +
                 C2592 * C1079 - C2598 * C1064 + C32152 * C1409 -
                 C2599 * C1408) *
                    C31864) *
                   C31963) *
                  C31835 * C211) *
             C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
             C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
                C118 +
            (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
             C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
                C31864) *
               C32118 +
           ((C3549 - C3550 + C3551 - C3552 + C3553 - C3554 + C3555 - C3556) *
                C118 +
            (C3557 - C3558 + C3559 - C3560 + C3561 - C3562 + C3563 - C3564) *
                C31864) *
               C31963) *
              C315 +
          (((C3550 - C3549 + C3552 - C3551 + C3554 - C3553 + C3556 - C3555) *
                C118 +
            (C3558 - C3557 + C3560 - C3559 + C3562 - C3561 + C3564 - C3563) *
                C31864) *
               C32118 +
           ((C3565 - C3566 + C3567 - C3568 + C3569 - C3570 + C3571 - C3572) *
                C118 +
            (C3573 - C3574 + C3575 - C3576 + C3577 - C3578 + C3579 - C3580) *
                C31864) *
               C31963) *
              C316 +
          (((C3566 - C3565 + C3568 - C3567 + C3570 - C3569 + C3572 - C3571) *
                C118 +
            (C3574 - C3573 + C3576 - C3575 + C3578 - C3577 + C3580 - C3579) *
                C31864) *
               C32118 +
           ((C2590 * C1931 - C2596 * C1925 + C2591 * C1932 - C2597 * C1926 +
             C2592 * C1933 - C2598 * C1927 + C32152 * C2295 - C2599 * C2294) *
                C118 +
            (C2590 * C1943 - C2596 * C1934 + C2591 * C1944 - C2597 * C1935 +
             C2592 * C1945 - C2598 * C1936 + C32152 * C2297 - C2599 * C2296) *
                C31864) *
               C31963) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C5157 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C5151 +
            (C7532 - C7533 + C7534 - C7535) * C5158 +
            (C7536 - C7537 + C7538 - C7539) * C5152 + C7572 * C5159 +
            C7573 * C32148) *
               C32118 +
           ((C32098 * C328 - C30873 * C318 + C31782 * C329 - C30854 * C319) *
                C5157 +
            (C32098 * C348 - C30873 * C333 + C31782 * C349 - C30854 * C334) *
                C5151 +
            (C8089 - C8088 + C8091 - C8090) * C5158 +
            (C8093 - C8092 + C8095 - C8094) * C5152 +
            (C8097 - C8096 + C8099 - C8098) * C5159 +
            (C8101 - C8100 + C8103 - C8102) * C32148) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                C5157 +
            (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                C5151 +
            (C7804 - C7805 + C7806 - C7807) * C5158 +
            (C7808 - C7809 + C7810 - C7811) * C5152 +
            (C7812 - C7813 + C7814 - C7815) * C5159 +
            (C7816 - C7817 + C7818 - C7819) * C32148) *
               C32118 +
           ((C30873 * C319 - C32098 * C329 + C30854 * C320 - C31782 * C330) *
                C5157 +
            (C30873 * C334 - C32098 * C349 + C30854 * C335 - C31782 * C350) *
                C5151 +
            (C30873 * C619 - C32098 * C624 + C30854 * C620 - C31782 * C625) *
                C5158 +
            (C30873 * C629 - C32098 * C634 + C30854 * C630 - C31782 * C635) *
                C5152 +
            (C30873 * C1051 - C32098 * C1060 + C30854 * C1052 -
             C31782 * C1061) *
                C5159 +
            (C30873 * C1063 - C32098 * C1078 + C30854 * C1064 -
             C31782 * C1079) *
                C32148) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C32098 * C128 - C30873 * C121 + C31782 * C129 - C30854 * C122) *
                C5157 +
            (C32098 * C142 - C30873 * C133 + C31782 * C143 - C30854 * C134) *
                C5151 +
            (C32098 * C225 - C30873 * C215 + C31782 * C226 - C30854 * C216) *
                C5158 +
            (C32098 * C245 - C30873 * C230 + C31782 * C246 - C30854 * C231) *
                C5152 +
            (C32098 * C235 - C30873 * C220 + C31782 * C236 - C30854 * C221) *
                C5159 +
            (C32098 * C250 - C30873 * C240 + C31782 * C251 - C30854 * C241) *
                C32148) *
               C32118 +
           ((C32098 * C330 - C30873 * C320 + C31782 * C331 - C30854 * C321) *
                C5157 +
            (C32098 * C350 - C30873 * C335 + C31782 * C351 - C30854 * C336) *
                C5151 +
            (C32098 * C625 - C30873 * C620 + C31782 * C626 - C30854 * C621) *
                C5158 +
            (C32098 * C635 - C30873 * C630 + C31782 * C636 - C30854 * C631) *
                C5152 +
            (C32098 * C1061 - C30873 * C1052 + C31782 * C1407 -
             C30854 * C1406) *
                C5159 +
            (C32098 * C1079 - C30873 * C1064 + C31782 * C1409 -
             C30854 * C1408) *
                C32148) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C5157 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C5151 +
            (C7532 - C7533 + C7534 - C7535) * C5158 +
            (C7536 - C7537 + C7538 - C7539) * C5152 + C7572 * C5159 +
            C7573 * C32148) *
               C32118 +
           ((C32098 * C328 - C30873 * C318 + C31782 * C329 - C30854 * C319) *
                C5157 +
            (C32098 * C348 - C30873 * C333 + C31782 * C349 - C30854 * C334) *
                C5151 +
            (C8089 - C8088 + C8091 - C8090) * C5158 +
            (C8093 - C8092 + C8095 - C8094) * C5152 + C8408 * C5159 +
            C8409 * C32148) *
               C31963) *
              C31835 * C209 +
          (((C7533 - C7532 + C7535 - C7534) * C5157 +
            (C7537 - C7536 + C7539 - C7538) * C5151 +
            (C7541 - C7540 + C7543 - C7542) * C5158 +
            (C7545 - C7544 + C7547 - C7546) * C5152 +
            (C7549 - C7548 + C7551 - C7550) * C5159 +
            (C7553 - C7552 + C7555 - C7554) * C32148) *
               C32118 +
           ((C8088 - C8089 + C8090 - C8091) * C5157 +
            (C8092 - C8093 + C8094 - C8095) * C5151 +
            (C8096 - C8097 + C8098 - C8099) * C5158 +
            (C8100 - C8101 + C8102 - C8103) * C5152 +
            (C8104 - C8105 + C8106 - C8107) * C5159 +
            (C8108 - C8109 + C8110 - C8111) * C32148) *
               C31963) *
              C31835 * C210 +
          ((C7572 * C5157 + C7573 * C5151 + C7574 * C5158 + C7575 * C5152 +
            (C7557 - C7556 + C7559 - C7558) * C5159 +
            (C7561 - C7560 + C7563 - C7562) * C32148) *
               C32118 +
           (C8408 * C5157 + C8409 * C5151 +
            (C8105 - C8104 + C8107 - C8106) * C5158 +
            (C8109 - C8108 + C8111 - C8110) * C5152 +
            (C32098 * C6147 - C30873 * C6144 + C31782 * C6341 -
             C30854 * C6340) *
                C5159 +
            (C32098 * C6153 - C30873 * C6148 + C31782 * C6343 -
             C30854 * C6342) *
                C32148) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C5157 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C5151 +
            (C7532 - C7533 + C7534 - C7535) * C5158 +
            (C7536 - C7537 + C7538 - C7539) * C5152 + C7572 * C5159 +
            C7573 * C32148) *
               C32118 +
           ((C8556 - C8557 + C8558 - C8559) * C5157 +
            (C8560 - C8561 + C8562 - C8563) * C5151 +
            (C8089 - C8088 + C8091 - C8090) * C5158 +
            (C8093 - C8092 + C8095 - C8094) * C5152 + C8408 * C5159 +
            C8409 * C32148) *
               C31963) *
              C315 +
          (((C8557 - C8556 + C8559 - C8558) * C5157 +
            (C8561 - C8560 + C8563 - C8562) * C5151 +
            (C8088 - C8089 + C8090 - C8091) * C5158 +
            (C8092 - C8093 + C8094 - C8095) * C5152 +
            (C8096 - C8097 + C8098 - C8099) * C5159 +
            (C8100 - C8101 + C8102 - C8103) * C32148) *
               C32118 +
           ((C8564 - C8565 + C8566 - C8567) * C5157 +
            (C8568 - C8569 + C8570 - C8571) * C5151 +
            (C8572 - C8573 + C8574 - C8575) * C5158 +
            (C8576 - C8577 + C8578 - C8579) * C5152 +
            (C8580 - C8581 + C8582 - C8583) * C5159 +
            (C8584 - C8585 + C8586 - C8587) * C32148) *
               C31963) *
              C316 +
          (((C8565 - C8564 + C8567 - C8566) * C5157 +
            (C8569 - C8568 + C8571 - C8570) * C5151 +
            (C8573 - C8572 + C8575 - C8574) * C5158 +
            (C8577 - C8576 + C8579 - C8578) * C5152 +
            (C8581 - C8580 + C8583 - C8582) * C5159 +
            (C8585 - C8584 + C8587 - C8586) * C32148) *
               C32118 +
           ((C32098 * C1931 - C30873 * C1925 + C31782 * C1932 -
             C30854 * C1926) *
                C5157 +
            (C32098 * C1943 - C30873 * C1934 + C31782 * C1944 -
             C30854 * C1935) *
                C5151 +
            (C32098 * C2471 - C30873 * C2468 + C31782 * C2472 -
             C30854 * C2469) *
                C5158 +
            (C32098 * C2477 - C30873 * C2474 + C31782 * C2478 -
             C30854 * C2475) *
                C5152 +
            (C32098 * C6795 - C30873 * C6792 + C31782 * C7152 -
             C30854 * C7151) *
                C5159 +
            (C32098 * C6801 - C30873 * C6796 + C31782 * C7154 -
             C30854 * C7153) *
                C32148) *
               C31963) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C118 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C31864) *
               C13203 +
           ((C8556 - C8557 + C8558 - C8559) * C118 +
            (C8560 - C8561 + C8562 - C8563) * C31864) *
               C13204 +
           (C12491 * C118 + C12492 * C31864) * C13205 +
           ((C12476 - C12475 + C12478 - C12477) * C118 +
            (C12480 - C12479 + C12482 - C12481) * C31864) *
               C32164) *
              C31835 * C31821 * C110 +
          (((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                C118 +
            (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                C31864) *
               C13203 +
           ((C8992 - C8993 + C8994 - C8995) * C118 +
            (C8996 - C8997 + C8998 - C8999) * C31864) *
               C13204 +
           ((C12898 - C12899 + C12900 - C12901) * C118 +
            (C12902 - C12903 + C12904 - C12905) * C31864) *
               C13205 +
           ((C30873 * C1926 - C32098 * C1932 + C30854 * C1927 -
             C31782 * C1933) *
                C118 +
            (C30873 * C1935 - C32098 * C1944 + C30854 * C1936 -
             C31782 * C1945) *
                C31864) *
               C32164) *
              C31835 * C31821 * C111 +
          (((C32098 * C128 - C30873 * C121 + C31782 * C129 - C30854 * C122) *
                C118 +
            (C32098 * C142 - C30873 * C133 + C31782 * C143 - C30854 * C134) *
                C31864) *
               C13203 +
           ((C32098 * C330 - C30873 * C320 + C31782 * C331 - C30854 * C321) *
                C118 +
            (C32098 * C350 - C30873 * C335 + C31782 * C351 - C30854 * C336) *
                C31864) *
               C13204 +
           ((C32098 * C340 - C30873 * C325 + C31782 * C341 - C30854 * C326) *
                C118 +
            (C32098 * C355 - C30873 * C345 + C31782 * C356 - C30854 * C346) *
                C31864) *
               C13205 +
           ((C32098 * C1933 - C30873 * C1927 + C31782 * C2295 -
             C30854 * C2294) *
                C118 +
            (C32098 * C1945 - C30873 * C1936 + C31782 * C2297 -
             C30854 * C2296) *
                C31864) *
               C32164) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C118 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C31864) *
               C13203 +
           ((C8556 - C8557 + C8558 - C8559) * C118 +
            (C8560 - C8561 + C8562 - C8563) * C31864) *
               C13204 +
           (C12491 * C118 + C12492 * C31864) * C13205 +
           ((C12476 - C12475 + C12478 - C12477) * C118 +
            (C12480 - C12479 + C12482 - C12481) * C31864) *
               C32164) *
              C31835 * C209 +
          (((C7533 - C7532 + C7535 - C7534) * C118 +
            (C7537 - C7536 + C7539 - C7538) * C31864) *
               C13203 +
           (C9208 * C118 + C9209 * C31864) * C13204 +
           (C13104 * C118 + C13105 * C31864) * C13205 +
           ((C12483 - C12484 + C12485 - C12486) * C118 +
            (C12487 - C12488 + C12489 - C12490) * C31864) *
               C32164) *
              C31835 * C210 +
          ((C7572 * C118 + C7573 * C31864) * C13203 +
           (C8408 * C118 + C8409 * C31864) * C13204 +
           ((C8581 - C8580 + C8583 - C8582) * C118 +
            (C8585 - C8584 + C8587 - C8586) * C31864) *
               C13205 +
           ((C32098 * C6795 - C30873 * C6792 + C31782 * C7152 -
             C30854 * C7151) *
                C118 +
            (C32098 * C6801 - C30873 * C6796 + C31782 * C7154 -
             C30854 * C7153) *
                C31864) *
               C32164) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C118 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C31864) *
               C13203 +
           ((C8556 - C8557 + C8558 - C8559) * C118 +
            (C8560 - C8561 + C8562 - C8563) * C31864) *
               C13204 +
           C13418 * C13205 + C13423 * C32164) *
              C315 +
          (((C8557 - C8556 + C8559 - C8558) * C118 +
            (C8561 - C8560 + C8563 - C8562) * C31864) *
               C13203 +
           ((C8564 - C8565 + C8566 - C8567) * C118 +
            (C8568 - C8569 + C8570 - C8571) * C31864) *
               C13204 +
           ((C12475 - C12476 + C12477 - C12478) * C118 +
            (C12479 - C12480 + C12481 - C12482) * C31864) *
               C13205 +
           ((C13410 - C13411 + C13412 - C13413) * C118 +
            (C13414 - C13415 + C13416 - C13417) * C31864) *
               C32164) *
              C316 +
          (C13418 * C13203 + C13423 * C13204 +
           ((C13411 - C13410 + C13413 - C13412) * C118 +
            (C13415 - C13414 + C13417 - C13416) * C31864) *
               C13205 +
           ((C32098 * C11731 - C30873 * C11729 + C31782 * C11927 -
             C30854 * C11926) *
                C118 +
            (C32098 * C11735 - C30873 * C11732 + C31782 * C11929 -
             C30854 * C11928) *
                C31864) *
               C32164) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                 C5157 +
             (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                 C5151 +
             (C7532 - C7533 + C7534 - C7535) * C5158 +
             (C7536 - C7537 + C7538 - C7539) * C5152 + C7572 * C5159 +
             C7573 * C32148) *
                C32118 +
            ((C8556 - C8557 + C8558 - C8559) * C5157 +
             (C8560 - C8561 + C8562 - C8563) * C5151 +
             (C8089 - C8088 + C8091 - C8090) * C5158 +
             (C8093 - C8092 + C8095 - C8094) * C5152 + C8408 * C5159 +
             C8409 * C32148) *
                C31963) *
               C530 +
           (((C8557 - C8556 + C8559 - C8558) * C5157 +
             (C8561 - C8560 + C8563 - C8562) * C5151 +
             (C8088 - C8089 + C8090 - C8091) * C5158 +
             (C8092 - C8093 + C8094 - C8095) * C5152 +
             (C8096 - C8097 + C8098 - C8099) * C5159 +
             (C8100 - C8101 + C8102 - C8103) * C32148) *
                C32118 +
            ((C8564 - C8565 + C8566 - C8567) * C5157 +
             (C8568 - C8569 + C8570 - C8571) * C5151 +
             (C8572 - C8573 + C8574 - C8575) * C5158 +
             (C8576 - C8577 + C8578 - C8579) * C5152 +
             (C8580 - C8581 + C8582 - C8583) * C5159 +
             (C8584 - C8585 + C8586 - C8587) * C32148) *
                C31963) *
               C531) *
              C31821 * C442 +
          ((((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                 C5157 +
             (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                 C5151 +
             (C7804 - C7805 + C7806 - C7807) * C5158 +
             (C7808 - C7809 + C7810 - C7811) * C5152 +
             (C7812 - C7813 + C7814 - C7815) * C5159 +
             (C7816 - C7817 + C7818 - C7819) * C32148) *
                C32118 +
            ((C8992 - C8993 + C8994 - C8995) * C5157 +
             (C8996 - C8997 + C8998 - C8999) * C5151 +
             (C8782 - C8783 + C8784 - C8785) * C5158 +
             (C8786 - C8787 + C8788 - C8789) * C5152 +
             (C8790 - C8791 + C8792 - C8793) * C5159 +
             (C8794 - C8795 + C8796 - C8797) * C32148) *
                C31963) *
               C530 +
           (((C8993 - C8992 + C8995 - C8994) * C5157 +
             (C8997 - C8996 + C8999 - C8998) * C5151 +
             (C8783 - C8782 + C8785 - C8784) * C5158 +
             (C8787 - C8786 + C8789 - C8788) * C5152 +
             (C8791 - C8790 + C8793 - C8792) * C5159 +
             (C8795 - C8794 + C8797 - C8796) * C32148) *
                C32118 +
            ((C32098 * C339 - C30873 * C324 + C31782 * C340 - C30854 * C325) *
                 C5157 +
             (C32098 * C354 - C30873 * C344 + C31782 * C355 - C30854 * C345) *
                 C5151 +
             (C32098 * C1066 - C30873 * C1054 + C31782 * C1067 -
              C30854 * C1055) *
                 C5158 +
             (C32098 * C1081 - C30873 * C1069 + C31782 * C1082 -
              C30854 * C1070) *
                 C5152 +
             (C32098 * C1072 - C30873 * C1057 + C31782 * C1073 -
              C30854 * C1058) *
                 C5159 +
             (C32098 * C1084 - C30873 * C1075 + C31782 * C1085 -
              C30854 * C1076) *
                 C32148) *
                C31963) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
              C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
                 C118 +
             (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
              C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
                 C31864) *
                C32118 +
            ((C3549 - C3550 + C3551 - C3552 + C3553 - C3554 + C3555 - C3556) *
                 C118 +
             (C3557 - C3558 + C3559 - C3560 + C3561 - C3562 + C3563 - C3564) *
                 C31864) *
                C31963) *
               C530 +
           (((C3550 - C3549 + C3552 - C3551 + C3554 - C3553 + C3556 - C3555) *
                 C118 +
             (C3558 - C3557 + C3560 - C3559 + C3562 - C3561 + C3564 - C3563) *
                 C31864) *
                C32118 +
            ((C3565 - C3566 + C3567 - C3568 + C3569 - C3570 + C3571 - C3572) *
                 C118 +
             (C3573 - C3574 + C3575 - C3576 + C3577 - C3578 + C3579 - C3580) *
                 C31864) *
                C31963) *
               C531) *
              C31821 * C442 +
          ((((C2596 * C120 - C2590 * C127 + C2597 * C121 - C2591 * C128 +
              C2598 * C122 - C2592 * C129 + C2599 * C123 - C32152 * C130) *
                 C118 +
             (C2596 * C132 - C2590 * C141 + C2597 * C133 - C2591 * C142 +
              C2598 * C134 - C2592 * C143 + C2599 * C135 - C32152 * C144) *
                 C31864) *
                C32118 +
            ((C3841 - C3842 + C3843 - C3844 + C3845 - C3846 + C3847 - C3848) *
                 C118 +
             (C3849 - C3850 + C3851 - C3852 + C3853 - C3854 + C3855 - C3856) *
                 C31864) *
                C31963) *
               C530 +
           (((C3842 - C3841 + C3844 - C3843 + C3846 - C3845 + C3848 - C3847) *
                 C118 +
             (C3850 - C3849 + C3852 - C3851 + C3854 - C3853 + C3856 - C3855) *
                 C31864) *
                C32118 +
            ((C2590 * C339 - C2596 * C324 + C2591 * C340 - C2597 * C325 +
              C2592 * C341 - C2598 * C326 + C32152 * C342 - C2599 * C327) *
                 C118 +
             (C2590 * C354 - C2596 * C344 + C2591 * C355 - C2597 * C345 +
              C2592 * C356 - C2598 * C346 + C32152 * C357 - C2599 * C347) *
                 C31864) *
                C31963) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                 C118 +
             (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                 C31864) *
                C13203 +
            ((C8556 - C8557 + C8558 - C8559) * C118 +
             (C8560 - C8561 + C8562 - C8563) * C31864) *
                C13204 +
            C13418 * C13205 + C13423 * C32164) *
               C530 +
           (((C8557 - C8556 + C8559 - C8558) * C118 +
             (C8561 - C8560 + C8563 - C8562) * C31864) *
                C13203 +
            ((C8564 - C8565 + C8566 - C8567) * C118 +
             (C8568 - C8569 + C8570 - C8571) * C31864) *
                C13204 +
            ((C12475 - C12476 + C12477 - C12478) * C118 +
             (C12479 - C12480 + C12481 - C12482) * C31864) *
                C13205 +
            ((C13410 - C13411 + C13412 - C13413) * C118 +
             (C13414 - C13415 + C13416 - C13417) * C31864) *
                C32164) *
               C531) *
              C31821 * C442 +
          ((((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                 C118 +
             (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                 C31864) *
                C13203 +
            ((C8992 - C8993 + C8994 - C8995) * C118 +
             (C8996 - C8997 + C8998 - C8999) * C31864) *
                C13204 +
            ((C12898 - C12899 + C12900 - C12901) * C118 +
             (C12902 - C12903 + C12904 - C12905) * C31864) *
                C13205 +
            ((C13684 - C13685 + C13686 - C13687) * C118 +
             (C13688 - C13689 + C13690 - C13691) * C31864) *
                C32164) *
               C530 +
           (((C8993 - C8992 + C8995 - C8994) * C118 +
             (C8997 - C8996 + C8999 - C8998) * C31864) *
                C13203 +
            ((C12899 - C12898 + C12901 - C12900) * C118 +
             (C12903 - C12902 + C12905 - C12904) * C31864) *
                C13204 +
            ((C13685 - C13684 + C13687 - C13686) * C118 +
             (C13689 - C13688 + C13691 - C13690) * C31864) *
                C13205 +
            ((C32098 * C1938 - C30873 * C1929 + C31782 * C1939 -
              C30854 * C1930) *
                 C118 +
             (C32098 * C1947 - C30873 * C1941 + C31782 * C1948 -
              C30854 * C1942) *
                 C31864) *
                C32164) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
             C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
                C118 +
            (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
             C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
                C31864) *
               C32118 +
           ((C2590 * C328 - C2596 * C318 + C2591 * C329 - C2597 * C319 +
             C2592 * C330 - C2598 * C320 + C32152 * C331 - C2599 * C321) *
                C118 +
            (C2590 * C348 - C2596 * C333 + C2591 * C349 - C2597 * C334 +
             C2592 * C350 - C2598 * C335 + C32152 * C351 - C2599 * C336) *
                C31864) *
               C31963) *
              C31835 * C209 +
          (((C2702 - C2701 + C2704 - C2703 + C2706 - C2705 + C2708 - C2707) *
                C118 +
            (C2710 - C2709 + C2712 - C2711 + C2714 - C2713 + C2716 - C2715) *
                C31864) *
               C32118 +
           ((C3237 - C3238 + C3239 - C3240 + C3241 - C3242 + C3243 - C3244) *
                C118 +
            (C3245 - C3246 + C3247 - C3248 + C3249 - C3250 + C3251 - C3252) *
                C31864) *
               C31963) *
              C31835 * C210 +
          (((C2718 - C2717 + C2720 - C2719 + C2722 - C2721 + C2724 - C2723) *
                C118 +
            (C2726 - C2725 + C2728 - C2727 + C2730 - C2729 + C2732 - C2731) *
                C31864) *
               C32118 +
           ((C2590 * C1059 - C2596 * C1050 + C2591 * C1060 - C2597 * C1051 +
             C2592 * C1061 - C2598 * C1052 + C32152 * C1407 - C2599 * C1406) *
                C118 +
            (C2590 * C1077 - C2596 * C1062 + C2591 * C1078 - C2597 * C1063 +
             C2592 * C1079 - C2598 * C1064 + C32152 * C1409 - C2599 * C1408) *
                C31864) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
             C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
                C118 +
            (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
             C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
                C31864) *
               C32118 +
           ((C2590 * C328 - C2596 * C318 + C2591 * C329 - C2597 * C319 +
             C2592 * C330 - C2598 * C320 + C32152 * C331 - C2599 * C321) *
                C118 +
            (C2590 * C348 - C2596 * C333 + C2591 * C349 - C2597 * C334 +
             C2592 * C350 - C2598 * C335 + C32152 * C351 - C2599 * C336) *
                C31864) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C2596 * C120 - C2590 * C127 + C2597 * C121 - C2591 * C128 +
             C2598 * C122 - C2592 * C129 + C2599 * C123 - C32152 * C130) *
                C118 +
            (C2596 * C132 - C2590 * C141 + C2597 * C133 - C2591 * C142 +
             C2598 * C134 - C2592 * C143 + C2599 * C135 - C32152 * C144) *
                C31864) *
               C32118 +
           ((C2596 * C319 - C2590 * C329 + C2597 * C320 - C2591 * C330 +
             C2598 * C321 - C2592 * C331 + C2599 * C322 - C32152 * C332) *
                C118 +
            (C2596 * C334 - C2590 * C349 + C2597 * C335 - C2591 * C350 +
             C2598 * C336 - C2592 * C351 + C2599 * C337 - C32152 * C352) *
                C31864) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C2590 * C128 - C2596 * C121 + C2591 * C129 - C2597 * C122 +
             C2592 * C130 - C2598 * C123 + C32152 * C136 - C2599 * C124) *
                C118 +
            (C2590 * C142 - C2596 * C133 + C2591 * C143 - C2597 * C134 +
             C2592 * C144 - C2598 * C135 + C32152 * C145 - C2599 * C137) *
                C31864) *
               C32118 +
           ((C2590 * C330 - C2596 * C320 + C2591 * C331 - C2597 * C321 +
             C2592 * C332 - C2598 * C322 + C32152 * C533 - C2599 * C532) *
                C118 +
            (C2590 * C350 - C2596 * C335 + C2591 * C351 - C2597 * C336 +
             C2592 * C352 - C2598 * C337 + C32152 * C535 - C2599 * C534) *
                C31864) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C5157 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C5151 +
            (C7532 - C7533 + C7534 - C7535) * C5158 +
            (C7536 - C7537 + C7538 - C7539) * C5152 + C7572 * C5159 +
            C7573 * C32148) *
               C32118 +
           ((C32098 * C328 - C30873 * C318 + C31782 * C329 - C30854 * C319) *
                C5157 +
            (C32098 * C348 - C30873 * C333 + C31782 * C349 - C30854 * C334) *
                C5151 +
            (C8089 - C8088 + C8091 - C8090) * C5158 +
            (C8093 - C8092 + C8095 - C8094) * C5152 +
            (C8097 - C8096 + C8099 - C8098) * C5159 +
            (C8101 - C8100 + C8103 - C8102) * C32148) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                C5157 +
            (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                C5151 +
            (C7804 - C7805 + C7806 - C7807) * C5158 +
            (C7808 - C7809 + C7810 - C7811) * C5152 +
            (C7812 - C7813 + C7814 - C7815) * C5159 +
            (C7816 - C7817 + C7818 - C7819) * C32148) *
               C32118 +
           ((C30873 * C319 - C32098 * C329 + C30854 * C320 - C31782 * C330) *
                C5157 +
            (C30873 * C334 - C32098 * C349 + C30854 * C335 - C31782 * C350) *
                C5151 +
            (C30873 * C619 - C32098 * C624 + C30854 * C620 - C31782 * C625) *
                C5158 +
            (C30873 * C629 - C32098 * C634 + C30854 * C630 - C31782 * C635) *
                C5152 +
            (C30873 * C1051 - C32098 * C1060 + C30854 * C1052 -
             C31782 * C1061) *
                C5159 +
            (C30873 * C1063 - C32098 * C1078 + C30854 * C1064 -
             C31782 * C1079) *
                C32148) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C32098 * C128 - C30873 * C121 + C31782 * C129 - C30854 * C122) *
                C5157 +
            (C32098 * C142 - C30873 * C133 + C31782 * C143 - C30854 * C134) *
                C5151 +
            (C32098 * C225 - C30873 * C215 + C31782 * C226 - C30854 * C216) *
                C5158 +
            (C32098 * C245 - C30873 * C230 + C31782 * C246 - C30854 * C231) *
                C5152 +
            (C32098 * C235 - C30873 * C220 + C31782 * C236 - C30854 * C221) *
                C5159 +
            (C32098 * C250 - C30873 * C240 + C31782 * C251 - C30854 * C241) *
                C32148) *
               C32118 +
           ((C32098 * C330 - C30873 * C320 + C31782 * C331 - C30854 * C321) *
                C5157 +
            (C32098 * C350 - C30873 * C335 + C31782 * C351 - C30854 * C336) *
                C5151 +
            (C32098 * C625 - C30873 * C620 + C31782 * C626 - C30854 * C621) *
                C5158 +
            (C32098 * C635 - C30873 * C630 + C31782 * C636 - C30854 * C631) *
                C5152 +
            (C32098 * C1061 - C30873 * C1052 + C31782 * C1407 -
             C30854 * C1406) *
                C5159 +
            (C32098 * C1079 - C30873 * C1064 + C31782 * C1409 -
             C30854 * C1408) *
                C32148) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C5157 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C5151 +
            (C7532 - C7533 + C7534 - C7535) * C5158 +
            (C7536 - C7537 + C7538 - C7539) * C5152 + C7572 * C5159 +
            C7573 * C32148) *
               C32118 +
           ((C32098 * C328 - C30873 * C318 + C31782 * C329 - C30854 * C319) *
                C5157 +
            (C32098 * C348 - C30873 * C333 + C31782 * C349 - C30854 * C334) *
                C5151 +
            (C8089 - C8088 + C8091 - C8090) * C5158 +
            (C8093 - C8092 + C8095 - C8094) * C5152 + C8408 * C5159 +
            C8409 * C32148) *
               C31963) *
              C31835 * C209 +
          (((C7533 - C7532 + C7535 - C7534) * C5157 +
            (C7537 - C7536 + C7539 - C7538) * C5151 +
            (C7541 - C7540 + C7543 - C7542) * C5158 +
            (C7545 - C7544 + C7547 - C7546) * C5152 +
            (C7549 - C7548 + C7551 - C7550) * C5159 +
            (C7553 - C7552 + C7555 - C7554) * C32148) *
               C32118 +
           ((C8088 - C8089 + C8090 - C8091) * C5157 +
            (C8092 - C8093 + C8094 - C8095) * C5151 +
            (C8096 - C8097 + C8098 - C8099) * C5158 +
            (C8100 - C8101 + C8102 - C8103) * C5152 +
            (C8104 - C8105 + C8106 - C8107) * C5159 +
            (C8108 - C8109 + C8110 - C8111) * C32148) *
               C31963) *
              C31835 * C210 +
          ((C7572 * C5157 + C7573 * C5151 + C7574 * C5158 + C7575 * C5152 +
            (C7557 - C7556 + C7559 - C7558) * C5159 +
            (C7561 - C7560 + C7563 - C7562) * C32148) *
               C32118 +
           (C8408 * C5157 + C8409 * C5151 +
            (C8105 - C8104 + C8107 - C8106) * C5158 +
            (C8109 - C8108 + C8111 - C8110) * C5152 +
            (C32098 * C6147 - C30873 * C6144 + C31782 * C6341 -
             C30854 * C6340) *
                C5159 +
            (C32098 * C6153 - C30873 * C6148 + C31782 * C6343 -
             C30854 * C6342) *
                C32148) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C118 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C31864) *
               C13203 +
           ((C8556 - C8557 + C8558 - C8559) * C118 +
            (C8560 - C8561 + C8562 - C8563) * C31864) *
               C13204 +
           (C12491 * C118 + C12492 * C31864) * C13205 +
           ((C12476 - C12475 + C12478 - C12477) * C118 +
            (C12480 - C12479 + C12482 - C12481) * C31864) *
               C32164) *
              C31835 * C31821 * C110 +
          (((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                C118 +
            (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                C31864) *
               C13203 +
           ((C8992 - C8993 + C8994 - C8995) * C118 +
            (C8996 - C8997 + C8998 - C8999) * C31864) *
               C13204 +
           ((C12898 - C12899 + C12900 - C12901) * C118 +
            (C12902 - C12903 + C12904 - C12905) * C31864) *
               C13205 +
           ((C30873 * C1926 - C32098 * C1932 + C30854 * C1927 -
             C31782 * C1933) *
                C118 +
            (C30873 * C1935 - C32098 * C1944 + C30854 * C1936 -
             C31782 * C1945) *
                C31864) *
               C32164) *
              C31835 * C31821 * C111 +
          (((C32098 * C128 - C30873 * C121 + C31782 * C129 - C30854 * C122) *
                C118 +
            (C32098 * C142 - C30873 * C133 + C31782 * C143 - C30854 * C134) *
                C31864) *
               C13203 +
           ((C32098 * C330 - C30873 * C320 + C31782 * C331 - C30854 * C321) *
                C118 +
            (C32098 * C350 - C30873 * C335 + C31782 * C351 - C30854 * C336) *
                C31864) *
               C13204 +
           ((C32098 * C340 - C30873 * C325 + C31782 * C341 - C30854 * C326) *
                C118 +
            (C32098 * C355 - C30873 * C345 + C31782 * C356 - C30854 * C346) *
                C31864) *
               C13205 +
           ((C32098 * C1933 - C30873 * C1927 + C31782 * C2295 -
             C30854 * C2294) *
                C118 +
            (C32098 * C1945 - C30873 * C1936 + C31782 * C2297 -
             C30854 * C2296) *
                C31864) *
               C32164) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C118 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C31864) *
               C13203 +
           ((C8556 - C8557 + C8558 - C8559) * C118 +
            (C8560 - C8561 + C8562 - C8563) * C31864) *
               C13204 +
           (C12491 * C118 + C12492 * C31864) * C13205 +
           ((C12476 - C12475 + C12478 - C12477) * C118 +
            (C12480 - C12479 + C12482 - C12481) * C31864) *
               C32164) *
              C31835 * C209 +
          (((C7533 - C7532 + C7535 - C7534) * C118 +
            (C7537 - C7536 + C7539 - C7538) * C31864) *
               C13203 +
           (C9208 * C118 + C9209 * C31864) * C13204 +
           (C13104 * C118 + C13105 * C31864) * C13205 +
           ((C12483 - C12484 + C12485 - C12486) * C118 +
            (C12487 - C12488 + C12489 - C12490) * C31864) *
               C32164) *
              C31835 * C210 +
          ((C7572 * C118 + C7573 * C31864) * C13203 +
           (C8408 * C118 + C8409 * C31864) * C13204 +
           ((C8581 - C8580 + C8583 - C8582) * C118 +
            (C8585 - C8584 + C8587 - C8586) * C31864) *
               C13205 +
           ((C32098 * C6795 - C30873 * C6792 + C31782 * C7152 -
             C30854 * C7151) *
                C118 +
            (C32098 * C6801 - C30873 * C6796 + C31782 * C7154 -
             C30854 * C7153) *
                C31864) *
               C32164) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
             C32137 * C128 - C756 * C121) *
                C757 +
            (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
             C32137 * C142 - C756 * C133) *
                C32183 +
            (C895 - C896 + C897 - C898 + C899 - C900) * C758 +
            (C901 - C902 + C903 - C904 + C905 - C906) * C32171 + C939 * C759 +
            C940 * C32148) *
               C31876 * C31835 * C440 +
           ((C896 - C895 + C898 - C897 + C900 - C899) * C757 +
            (C902 - C901 + C904 - C903 + C906 - C905) * C32183 +
            (C908 - C907 + C910 - C909 + C912 - C911) * C758 +
            (C914 - C913 + C916 - C915 + C918 - C917) * C32171 +
            (C919 - C920 + C921 - C922 + C923 - C924) * C759 +
            (C925 - C926 + C927 - C928 + C929 - C930) * C32148) *
               C31876 * C31835 * C441) *
              C442 +
          (((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
             C756 * C122 - C32137 * C129) *
                C757 +
            (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
             C756 * C134 - C32137 * C143) *
                C32183 +
            (C1237 - C1238 + C1239 - C1240 + C1241 - C1242) * C758 +
            (C1243 - C1244 + C1245 - C1246 + C1247 - C1248) * C32171 +
            (C1249 - C1250 + C1251 - C1252 + C1253 - C1254) * C759 +
            (C1255 - C1256 + C1257 - C1258 + C1259 - C1260) * C32148) *
               C31876 * C31835 * C440 +
           ((C1238 - C1237 + C1240 - C1239 + C1242 - C1241) * C757 +
            (C1244 - C1243 + C1246 - C1245 + C1248 - C1247) * C32183 +
            (C1250 - C1249 + C1252 - C1251 + C1254 - C1253) * C758 +
            (C1256 - C1255 + C1258 - C1257 + C1260 - C1259) * C32171 +
            (C748 * C877 - C754 * C871 + C749 * C878 - C755 * C872 +
             C32137 * C1233 - C756 * C1232) *
                C759 +
            (C748 * C889 - C754 * C880 + C749 * C890 - C755 * C881 +
             C32137 * C1235 - C756 * C1234) *
                C32148) *
               C31876 * C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C31864) *
               C31876 * C31835 * C440 +
           ((C113 * C213 - C101 * C223 + C114 * C214 - C102 * C224 +
             C115 * C215 - C103 * C225 + C116 * C216 - C104 * C226 +
             C117 * C217 - C105 * C227) *
                C118 +
            (C113 * C228 - C101 * C243 + C114 * C229 - C102 * C244 +
             C115 * C230 - C103 * C245 + C116 * C231 - C104 * C246 +
             C117 * C232 - C105 * C247) *
                C31864) *
               C31876 * C31835 * C441) *
              C442 +
          (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
             C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
             C117 * C124 - C105 * C136) *
                C118 +
            (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
             C117 * C137 - C105 * C145) *
                C31864) *
               C31876 * C31835 * C440 +
           ((C101 * C224 - C113 * C214 + C102 * C225 - C114 * C215 +
             C103 * C226 - C115 * C216 + C104 * C227 - C116 * C217 +
             C105 * C445 - C117 * C444) *
                C118 +
            (C101 * C244 - C113 * C229 + C102 * C245 - C114 * C230 +
             C103 * C246 - C115 * C231 + C104 * C247 - C116 * C232 +
             C105 * C447 - C117 * C446) *
                C31864) *
               C31876 * C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C5157 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C5151 +
            (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C5158 +
            (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C5152 +
            C5315 * C5159 + C5316 * C32148) *
               C31876 * C31835 * C440 +
           ((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C5157 +
            (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C5151 +
            (C5284 - C5283 + C5286 - C5285 + C5288 - C5287) * C5158 +
            (C5290 - C5289 + C5292 - C5291 + C5294 - C5293) * C5152 +
            (C5295 - C5296 + C5297 - C5298 + C5299 - C5300) * C5159 +
            (C5301 - C5302 + C5303 - C5304 + C5305 - C5306) * C32148) *
               C31876 * C31835 * C441) *
              C442 +
          (((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
             C5156 * C122 - C32137 * C129) *
                C5157 +
            (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
             C5156 * C134 - C32137 * C143) *
                C5151 +
            (C5573 - C5574 + C5575 - C5576 + C5577 - C5578) * C5158 +
            (C5579 - C5580 + C5581 - C5582 + C5583 - C5584) * C5152 +
            (C5585 - C5586 + C5587 - C5588 + C5589 - C5590) * C5159 +
            (C5591 - C5592 + C5593 - C5594 + C5595 - C5596) * C32148) *
               C31876 * C31835 * C440 +
           ((C5574 - C5573 + C5576 - C5575 + C5578 - C5577) * C5157 +
            (C5580 - C5579 + C5582 - C5581 + C5584 - C5583) * C5151 +
            (C5586 - C5585 + C5588 - C5587 + C5590 - C5589) * C5158 +
            (C5592 - C5591 + C5594 - C5593 + C5596 - C5595) * C5152 +
            (C32180 * C877 - C5154 * C871 + C32167 * C878 - C5155 * C872 +
             C32137 * C1233 - C5156 * C1232) *
                C5159 +
            (C32180 * C889 - C5154 * C880 + C32167 * C890 - C5155 * C881 +
             C32137 * C1235 - C5156 * C1234) *
                C32148) *
               C31876 * C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C5981 +
            (C31772 * C140 - C5980 * C131) * C5975 + (C6057 - C6058) * C5982 +
            (C6059 - C6060) * C5976 + C6077 * C5983 + C6078 * C5977 +
            C6079 * C5984 + C6080 * C5978 + C6081 * C5985 + C6082 * C5979) *
               C31876 * C31835 * C440 +
           ((C6058 - C6057) * C5981 + (C6060 - C6059) * C5975 +
            (C6062 - C6061) * C5982 + (C6064 - C6063) * C5976 +
            (C6066 - C6065) * C5983 + (C6068 - C6067) * C5977 +
            (C6070 - C6069) * C5984 + (C6072 - C6071) * C5978 +
            (C6073 - C6074) * C5985 + (C6075 - C6076) * C5979) *
               C31876 * C31835 * C441) *
              C442 +
          (((C5980 * C120 - C31772 * C127) * C5981 +
            (C5980 * C132 - C31772 * C141) * C5975 + (C6243 - C6244) * C5982 +
            (C6245 - C6246) * C5976 + (C6247 - C6248) * C5983 +
            (C6249 - C6250) * C5977 + (C6251 - C6252) * C5984 +
            (C6253 - C6254) * C5978 + (C6255 - C6256) * C5985 +
            (C6257 - C6258) * C5979) *
               C31876 * C31835 * C440 +
           ((C6244 - C6243) * C5981 + (C6246 - C6245) * C5975 +
            (C6248 - C6247) * C5982 + (C6250 - C6249) * C5976 +
            (C6252 - C6251) * C5983 + (C6254 - C6253) * C5977 +
            (C6256 - C6255) * C5984 + (C6258 - C6257) * C5978 +
            (C31772 * C6239 - C5980 * C6238) * C5985 +
            (C31772 * C6241 - C5980 * C6240) * C5979) *
               C31876 * C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
              C32137 * C128 - C5156 * C121) *
                 C118 +
             (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
              C32137 * C142 - C5156 * C133) *
                 C31864) *
                C10013 +
            ((C10237 - C10238 + C10239 - C10240 + C10241 - C10242) * C118 +
             (C10243 - C10244 + C10245 - C10246 + C10247 - C10248) * C31864) *
                C10014 +
            C10285 * C32151) *
               C31835 * C440 +
           (((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C118 +
             (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C31864) *
                C10013 +
            ((C5889 - C5890 + C5891 - C5892 + C5893 - C5894) * C118 +
             (C5895 - C5896 + C5897 - C5898 + C5899 - C5900) * C31864) *
                C10014 +
            ((C5154 * C1053 - C32180 * C1065 + C5155 * C1054 - C32167 * C1066 +
              C5156 * C1055 - C32137 * C1067) *
                 C118 +
             (C5154 * C1068 - C32180 * C1080 + C5155 * C1069 - C32167 * C1081 +
              C5156 * C1070 - C32137 * C1082) *
                 C31864) *
                C32151) *
               C31835 * C441) *
              C442 +
          ((((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
              C5156 * C122 - C32137 * C129) *
                 C118 +
             (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
              C5156 * C134 - C32137 * C143) *
                 C31864) *
                C10013 +
            ((C5154 * C319 - C32180 * C329 + C5155 * C320 - C32167 * C330 +
              C5156 * C321 - C32137 * C331) *
                 C118 +
             (C5154 * C334 - C32180 * C349 + C5155 * C335 - C32167 * C350 +
              C5156 * C336 - C32137 * C351) *
                 C31864) *
                C10014 +
            ((C5154 * C324 - C32180 * C339 + C5155 * C325 - C32167 * C340 +
              C5156 * C326 - C32137 * C341) *
                 C118 +
             (C5154 * C344 - C32180 * C354 + C5155 * C345 - C32167 * C355 +
              C5156 * C346 - C32137 * C356) *
                 C31864) *
                C32151) *
               C31835 * C440 +
           (((C5574 - C5573 + C5576 - C5575 + C5578 - C5577) * C118 +
             (C5580 - C5579 + C5582 - C5581 + C5584 - C5583) * C31864) *
                C10013 +
            ((C32180 * C624 - C5154 * C619 + C32167 * C625 - C5155 * C620 +
              C32137 * C626 - C5156 * C621) *
                 C118 +
             (C32180 * C634 - C5154 * C629 + C32167 * C635 - C5155 * C630 +
              C32137 * C636 - C5156 * C631) *
                 C31864) *
                C10014 +
            ((C32180 * C1066 - C5154 * C1054 + C32167 * C1067 - C5155 * C1055 +
              C32137 * C2145 - C5156 * C2144) *
                 C118 +
             (C32180 * C1081 - C5154 * C1069 + C32167 * C1082 - C5155 * C1070 +
              C32137 * C2147 - C5156 * C2146) *
                 C31864) *
                C32151) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C757 +
             (C31772 * C140 - C5980 * C131) * C32183 + (C6057 - C6058) * C758 +
             (C6059 - C6060) * C32171 + C6077 * C759 + C6078 * C32148) *
                C10013 +
            ((C6805 - C6806) * C757 + (C6807 - C6808) * C32183 + C7314 * C758 +
             C7315 * C32171 + C6667 * C759 + C6668 * C32148) *
                C10014 +
            C11100 * C32151) *
               C31835 * C440 +
           (((C6058 - C6057) * C757 + (C6060 - C6059) * C32183 +
             (C6062 - C6061) * C758 + (C6064 - C6063) * C32171 +
             (C6066 - C6065) * C759 + (C6068 - C6067) * C32148) *
                C10013 +
            (C7316 * C757 + C7317 * C32183 + C7318 * C758 + C7319 * C32171 +
             C9902 * C759 + C9903 * C32148) *
                C10014 +
            (C7320 * C757 + C7321 * C32183 + C7322 * C758 + C7323 * C32171 +
             (C6677 - C6678) * C759 + (C6679 - C6680) * C32148) *
                C32151) *
               C31835 * C441) *
              C442 +
          ((((C5980 * C120 - C31772 * C127) * C757 +
             (C5980 * C132 - C31772 * C141) * C32183 + (C6243 - C6244) * C758 +
             (C6245 - C6246) * C32171 + (C6247 - C6248) * C759 +
             (C6249 - C6250) * C32148) *
                C10013 +
            ((C7156 - C7157) * C757 + (C7158 - C7159) * C32183 +
             (C6990 - C6991) * C758 + (C6992 - C6993) * C32171 +
             (C6994 - C6995) * C759 + (C6996 - C6997) * C32148) *
                C10014 +
            ((C7160 - C7161) * C757 + (C7162 - C7163) * C32183 +
             (C6998 - C6999) * C758 + (C7000 - C7001) * C32171 +
             (C7002 - C7003) * C759 + (C7004 - C7005) * C32148) *
                C32151) *
               C31835 * C440 +
           (((C6244 - C6243) * C757 + (C6246 - C6245) * C32183 +
             (C6248 - C6247) * C758 + (C6250 - C6249) * C32171 +
             (C6252 - C6251) * C759 + (C6254 - C6253) * C32148) *
                C10013 +
            ((C6991 - C6990) * C757 + (C6993 - C6992) * C32183 +
             (C6995 - C6994) * C758 + (C6997 - C6996) * C32171 +
             (C9639 - C9638) * C759 + (C9641 - C9640) * C32148) *
                C10014 +
            ((C6999 - C6998) * C757 + (C7001 - C7000) * C32183 +
             (C7003 - C7002) * C758 + (C7005 - C7004) * C32171 +
             (C31772 * C6986 - C5980 * C6985) * C759 +
             (C31772 * C6988 - C5980 * C6987) * C32148) *
                C32151) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
             C32137 * C128 - C756 * C121) *
                C757 +
            (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
             C32137 * C142 - C756 * C133) *
                C32183 +
            (C895 - C896 + C897 - C898 + C899 - C900) * C758 +
            (C901 - C902 + C903 - C904 + C905 - C906) * C32171 + C939 * C759 +
            C940 * C32148) *
               C31876 * C530 +
           ((C754 * C318 - C748 * C328 + C755 * C319 - C749 * C329 +
             C756 * C320 - C32137 * C330) *
                C757 +
            (C754 * C333 - C748 * C348 + C755 * C334 - C749 * C349 +
             C756 * C335 - C32137 * C350) *
                C32183 +
            (C1569 - C1570 + C1571 - C1572 + C1573 - C1574) * C758 +
            (C1575 - C1576 + C1577 - C1578 + C1579 - C1580) * C32171 +
            (C1581 - C1582 + C1583 - C1584 + C1585 - C1586) * C759 +
            (C1587 - C1588 + C1589 - C1590 + C1591 - C1592) * C32148) *
               C31876 * C531) *
              C440 +
          (((C896 - C895 + C898 - C897 + C900 - C899) * C757 +
            (C902 - C901 + C904 - C903 + C906 - C905) * C32183 +
            (C908 - C907 + C910 - C909 + C912 - C911) * C758 +
            (C914 - C913 + C916 - C915 + C918 - C917) * C32171 +
            (C919 - C920 + C921 - C922 + C923 - C924) * C759 +
            (C925 - C926 + C927 - C928 + C929 - C930) * C32148) *
               C31876 * C530 +
           ((C1570 - C1569 + C1572 - C1571 + C1574 - C1573) * C757 +
            (C1576 - C1575 + C1578 - C1577 + C1580 - C1579) * C32183 +
            (C1582 - C1581 + C1584 - C1583 + C1586 - C1585) * C758 +
            (C1588 - C1587 + C1590 - C1589 + C1592 - C1591) * C32171 +
            (C748 * C1559 - C754 * C1556 + C749 * C1560 - C755 * C1557 +
             C32137 * C1561 - C756 * C1558) *
                C759 +
            (C748 * C1565 - C754 * C1562 + C749 * C1566 - C755 * C1563 +
             C32137 * C1567 - C756 * C1564) *
                C32148) *
               C31876 * C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C31864) *
               C31876 * C530 +
           ((C113 * C318 - C101 * C328 + C114 * C319 - C102 * C329 +
             C115 * C320 - C103 * C330 + C116 * C321 - C104 * C331 +
             C117 * C322 - C105 * C332) *
                C118 +
            (C113 * C333 - C101 * C348 + C114 * C334 - C102 * C349 +
             C115 * C335 - C103 * C350 + C116 * C336 - C104 * C351 +
             C117 * C337 - C105 * C352) *
                C31864) *
               C31876 * C531) *
              C440 +
          (((C113 * C213 - C101 * C223 + C114 * C214 - C102 * C224 +
             C115 * C215 - C103 * C225 + C116 * C216 - C104 * C226 +
             C117 * C217 - C105 * C227) *
                C118 +
            (C113 * C228 - C101 * C243 + C114 * C229 - C102 * C244 +
             C115 * C230 - C103 * C245 + C116 * C231 - C104 * C246 +
             C117 * C232 - C105 * C247) *
                C31864) *
               C31876 * C530 +
           ((C101 * C623 - C113 * C618 + C102 * C624 - C114 * C619 +
             C103 * C625 - C115 * C620 + C104 * C626 - C116 * C621 +
             C105 * C627 - C117 * C622) *
                C118 +
            (C101 * C633 - C113 * C628 + C102 * C634 - C114 * C629 +
             C103 * C635 - C115 * C630 + C104 * C636 - C116 * C631 +
             C105 * C637 - C117 * C632) *
                C31864) *
               C31876 * C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C5157 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C5151 +
            (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C5158 +
            (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C5152 +
            C5315 * C5159 + C5316 * C32148) *
               C31876 * C530 +
           ((C5154 * C318 - C32180 * C328 + C5155 * C319 - C32167 * C329 +
             C5156 * C320 - C32137 * C330) *
                C5157 +
            (C5154 * C333 - C32180 * C348 + C5155 * C334 - C32167 * C349 +
             C5156 * C335 - C32137 * C350) *
                C5151 +
            (C5889 - C5890 + C5891 - C5892 + C5893 - C5894) * C5158 +
            (C5895 - C5896 + C5897 - C5898 + C5899 - C5900) * C5152 +
            (C5901 - C5902 + C5903 - C5904 + C5905 - C5906) * C5159 +
            (C5907 - C5908 + C5909 - C5910 + C5911 - C5912) * C32148) *
               C31876 * C531) *
              C440 +
          (((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C5157 +
            (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C5151 +
            (C5284 - C5283 + C5286 - C5285 + C5288 - C5287) * C5158 +
            (C5290 - C5289 + C5292 - C5291 + C5294 - C5293) * C5152 +
            (C5295 - C5296 + C5297 - C5298 + C5299 - C5300) * C5159 +
            (C5301 - C5302 + C5303 - C5304 + C5305 - C5306) * C32148) *
               C31876 * C530 +
           ((C5890 - C5889 + C5892 - C5891 + C5894 - C5893) * C5157 +
            (C5896 - C5895 + C5898 - C5897 + C5900 - C5899) * C5151 +
            (C5902 - C5901 + C5904 - C5903 + C5906 - C5905) * C5158 +
            (C5908 - C5907 + C5910 - C5909 + C5912 - C5911) * C5152 +
            (C32180 * C1559 - C5154 * C1556 + C32167 * C1560 - C5155 * C1557 +
             C32137 * C1561 - C5156 * C1558) *
                C5159 +
            (C32180 * C1565 - C5154 * C1562 + C32167 * C1566 - C5155 * C1563 +
             C32137 * C1567 - C5156 * C1564) *
                C32148) *
               C31876 * C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C5981 +
            (C31772 * C140 - C5980 * C131) * C5975 + (C6057 - C6058) * C5982 +
            (C6059 - C6060) * C5976 + C6077 * C5983 + C6078 * C5977 +
            C6079 * C5984 + C6080 * C5978 + C6081 * C5985 + C6082 * C5979) *
               C31876 * C530 +
           ((C5980 * C318 - C31772 * C328) * C5981 +
            (C5980 * C333 - C31772 * C348) * C5975 + (C6431 - C6432) * C5982 +
            (C6433 - C6434) * C5976 + (C6435 - C6436) * C5983 +
            (C6437 - C6438) * C5977 + (C6439 - C6440) * C5984 +
            (C6441 - C6442) * C5978 + (C6443 - C6444) * C5985 +
            (C6445 - C6446) * C5979) *
               C31876 * C531) *
              C440 +
          (((C6058 - C6057) * C5981 + (C6060 - C6059) * C5975 +
            (C6062 - C6061) * C5982 + (C6064 - C6063) * C5976 +
            (C6066 - C6065) * C5983 + (C6068 - C6067) * C5977 +
            (C6070 - C6069) * C5984 + (C6072 - C6071) * C5978 +
            (C6073 - C6074) * C5985 + (C6075 - C6076) * C5979) *
               C31876 * C530 +
           ((C6432 - C6431) * C5981 + (C6434 - C6433) * C5975 +
            (C6436 - C6435) * C5982 + (C6438 - C6437) * C5976 +
            (C6440 - C6439) * C5983 + (C6442 - C6441) * C5977 +
            (C6444 - C6443) * C5984 + (C6446 - C6445) * C5978 +
            (C31772 * C6427 - C5980 * C6426) * C5985 +
            (C31772 * C6429 - C5980 * C6428) * C5979) *
               C31876 * C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
              C32137 * C128 - C5156 * C121) *
                 C118 +
             (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
              C32137 * C142 - C5156 * C133) *
                 C31864) *
                C10013 +
            ((C10237 - C10238 + C10239 - C10240 + C10241 - C10242) * C118 +
             (C10243 - C10244 + C10245 - C10246 + C10247 - C10248) * C31864) *
                C10014 +
            C10285 * C32151) *
               C530 +
           (((C10238 - C10237 + C10240 - C10239 + C10242 - C10241) * C118 +
             (C10244 - C10243 + C10246 - C10245 + C10248 - C10247) * C31864) *
                C10013 +
            ((C10250 - C10249 + C10252 - C10251 + C10254 - C10253) * C118 +
             (C10256 - C10255 + C10258 - C10257 + C10260 - C10259) * C31864) *
                C10014 +
            ((C10261 - C10262 + C10263 - C10264 + C10265 - C10266) * C118 +
             (C10267 - C10268 + C10269 - C10270 + C10271 - C10272) * C31864) *
                C32151) *
               C531) *
              C440 +
          ((((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C118 +
             (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C31864) *
                C10013 +
            ((C5889 - C5890 + C5891 - C5892 + C5893 - C5894) * C118 +
             (C5895 - C5896 + C5897 - C5898 + C5899 - C5900) * C31864) *
                C10014 +
            ((C10748 - C10749 + C10750 - C10751 + C10752 - C10753) * C118 +
             (C10754 - C10755 + C10756 - C10757 + C10758 - C10759) * C31864) *
                C32151) *
               C530 +
           (((C5890 - C5889 + C5892 - C5891 + C5894 - C5893) * C118 +
             (C5896 - C5895 + C5898 - C5897 + C5900 - C5899) * C31864) *
                C10013 +
            ((C10749 - C10748 + C10751 - C10750 + C10753 - C10752) * C118 +
             (C10755 - C10754 + C10757 - C10756 + C10759 - C10758) * C31864) *
                C10014 +
            ((C32180 * C2471 - C5154 * C2468 + C32167 * C2472 - C5155 * C2469 +
              C32137 * C2473 - C5156 * C2470) *
                 C118 +
             (C32180 * C2477 - C5154 * C2474 + C32167 * C2478 - C5155 * C2475 +
              C32137 * C2479 - C5156 * C2476) *
                 C31864) *
                C32151) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C757 +
             (C31772 * C140 - C5980 * C131) * C32183 + (C6057 - C6058) * C758 +
             (C6059 - C6060) * C32171 + C6077 * C759 + C6078 * C32148) *
                C10013 +
            ((C6805 - C6806) * C757 + (C6807 - C6808) * C32183 + C7314 * C758 +
             C7315 * C32171 + C6667 * C759 + C6668 * C32148) *
                C10014 +
            C11100 * C32151) *
               C530 +
           (((C6806 - C6805) * C757 + (C6808 - C6807) * C32183 + C7316 * C758 +
             C7317 * C32171 + C7318 * C759 + C7319 * C32148) *
                C10013 +
            ((C6810 - C6809) * C757 + (C6812 - C6811) * C32183 + C7320 * C758 +
             C7321 * C32171 + C7322 * C759 + C7323 * C32148) *
                C10014 +
            ((C6817 - C6818) * C757 + (C6819 - C6820) * C32183 +
             (C6821 - C6822) * C758 + (C6823 - C6824) * C32171 +
             (C6825 - C6826) * C759 + (C6827 - C6828) * C32148) *
                C32151) *
               C531) *
              C440 +
          ((((C6058 - C6057) * C757 + (C6060 - C6059) * C32183 +
             (C6062 - C6061) * C758 + (C6064 - C6063) * C32171 +
             (C6066 - C6065) * C759 + (C6068 - C6067) * C32148) *
                C10013 +
            (C7316 * C757 + C7317 * C32183 + C7318 * C758 + C7319 * C32171 +
             C9902 * C759 + C9903 * C32148) *
                C10014 +
            (C7320 * C757 + C7321 * C32183 + C7322 * C758 + C7323 * C32171 +
             (C6677 - C6678) * C759 + (C6679 - C6680) * C32148) *
                C32151) *
               C530 +
           ((C7314 * C757 + C7315 * C32183 + C6667 * C758 + C6668 * C32171 +
             C9408 * C759 + C9409 * C32148) *
                C10013 +
            (C6813 * C757 + C6814 * C32183 + C6681 * C758 + C6682 * C32171 +
             (C6678 - C6677) * C759 + (C6680 - C6679) * C32148) *
                C10014 +
            ((C6822 - C6821) * C757 + (C6824 - C6823) * C32183 +
             (C6826 - C6825) * C758 + (C6828 - C6827) * C32171 +
             (C31772 * C7310 - C5980 * C7309) * C759 +
             (C31772 * C7312 - C5980 * C7311) * C32148) *
                C32151) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                C105 * C130 - C117 * C123) *
                   C118 +
               (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                C105 * C144 - C117 * C135) *
                   C31864) *
                  C31876 * C31835 * C31821 * C110 +
              ((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
                C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
                C117 * C124 - C105 * C136) *
                   C118 +
               (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
                C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
                C117 * C137 - C105 * C145) *
                   C31864) *
                  C31876 * C31835 * C31821 * C111 +
              ((C101 * C128 - C113 * C121 + C102 * C129 - C114 * C122 +
                C103 * C130 - C115 * C123 + C104 * C136 - C116 * C124 +
                C105 * C138 - C117 * C125) *
                   C118 +
               (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C134 +
                C103 * C144 - C115 * C135 + C104 * C145 - C116 * C137 +
                C105 * C146 - C117 * C139) *
                   C31864) *
                  C31876 * C31835 * C31821 * C112) +
         std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                C105 * C130 - C117 * C123) *
                   C118 +
               (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                C105 * C144 - C117 * C135) *
                   C31864) *
                  C31876 * C31835 * C209 +
              ((C113 * C213 - C101 * C223 + C114 * C214 - C102 * C224 +
                C115 * C215 - C103 * C225 + C116 * C216 - C104 * C226 +
                C117 * C217 - C105 * C227) *
                   C118 +
               (C113 * C228 - C101 * C243 + C114 * C229 - C102 * C244 +
                C115 * C230 - C103 * C245 + C116 * C231 - C104 * C246 +
                C117 * C232 - C105 * C247) *
                   C31864) *
                  C31876 * C31835 * C210 +
              ((C101 * C233 - C113 * C218 + C102 * C234 - C114 * C219 +
                C103 * C235 - C115 * C220 + C104 * C236 - C116 * C221 +
                C105 * C237 - C117 * C222) *
                   C118 +
               (C101 * C248 - C113 * C238 + C102 * C249 - C114 * C239 +
                C103 * C250 - C115 * C240 + C104 * C251 - C116 * C241 +
                C105 * C252 - C117 * C242) *
                   C31864) *
                  C31876 * C31835 * C211) *
             C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
            C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
            C105 * C130 - C117 * C123) *
               C118 +
           (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
            C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
            C105 * C144 - C117 * C135) *
               C31864) *
              C31876 * C315 +
          ((C113 * C318 - C101 * C328 + C114 * C319 - C102 * C329 +
            C115 * C320 - C103 * C330 + C116 * C321 - C104 * C331 +
            C117 * C322 - C105 * C332) *
               C118 +
           (C113 * C333 - C101 * C348 + C114 * C334 - C102 * C349 +
            C115 * C335 - C103 * C350 + C116 * C336 - C104 * C351 +
            C117 * C337 - C105 * C352) *
               C31864) *
              C31876 * C316 +
          ((C101 * C338 - C113 * C323 + C102 * C339 - C114 * C324 +
            C103 * C340 - C115 * C325 + C104 * C341 - C116 * C326 +
            C105 * C342 - C117 * C327) *
               C118 +
           (C101 * C353 - C113 * C343 + C102 * C354 - C114 * C344 +
            C103 * C355 - C115 * C345 + C104 * C356 - C116 * C346 +
            C105 * C357 - C117 * C347) *
               C31864) *
              C31876 * C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
            C32137 * C128 - C756 * C121) *
               C757 +
           (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
            C32137 * C142 - C756 * C133) *
               C32183 +
           (C748 * C223 - C754 * C213 + C749 * C224 - C755 * C214 +
            C32137 * C225 - C756 * C215) *
               C758 +
           (C748 * C243 - C754 * C228 + C749 * C244 - C755 * C229 +
            C32137 * C245 - C756 * C230) *
               C32171 +
           (C748 * C233 - C754 * C218 + C749 * C234 - C755 * C219 +
            C32137 * C235 - C756 * C220) *
               C759 +
           (C748 * C248 - C754 * C238 + C749 * C249 - C755 * C239 +
            C32137 * C250 - C756 * C240) *
               C32148) *
              C31876 * C31835 * C31821 * C110 +
          ((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
            C756 * C122 - C32137 * C129) *
               C757 +
           (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
            C756 * C134 - C32137 * C143) *
               C32183 +
           (C754 * C214 - C748 * C224 + C755 * C215 - C749 * C225 +
            C756 * C216 - C32137 * C226) *
               C758 +
           (C754 * C229 - C748 * C244 + C755 * C230 - C749 * C245 +
            C756 * C231 - C32137 * C246) *
               C32171 +
           (C754 * C219 - C748 * C234 + C755 * C220 - C749 * C235 +
            C756 * C221 - C32137 * C236) *
               C759 +
           (C754 * C239 - C748 * C249 + C755 * C240 - C749 * C250 +
            C756 * C241 - C32137 * C251) *
               C32148) *
              C31876 * C31835 * C31821 * C111 +
          ((C748 * C128 - C754 * C121 + C749 * C129 - C755 * C122 +
            C32137 * C130 - C756 * C123) *
               C757 +
           (C748 * C142 - C754 * C133 + C749 * C143 - C755 * C134 +
            C32137 * C144 - C756 * C135) *
               C32183 +
           (C748 * C225 - C754 * C215 + C749 * C226 - C755 * C216 +
            C32137 * C227 - C756 * C217) *
               C758 +
           (C748 * C245 - C754 * C230 + C749 * C246 - C755 * C231 +
            C32137 * C247 - C756 * C232) *
               C32171 +
           (C748 * C235 - C754 * C220 + C749 * C236 - C755 * C221 +
            C32137 * C237 - C756 * C222) *
               C759 +
           (C748 * C250 - C754 * C240 + C749 * C251 - C755 * C241 +
            C32137 * C252 - C756 * C242) *
               C32148) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
            C32137 * C128 - C756 * C121) *
               C757 +
           (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
            C32137 * C142 - C756 * C133) *
               C32183 +
           (C895 - C896 + C897 - C898 + C899 - C900) * C758 +
           (C901 - C902 + C903 - C904 + C905 - C906) * C32171 + C939 * C759 +
           C940 * C32148) *
              C31876 * C31835 * C209 +
          ((C896 - C895 + C898 - C897 + C900 - C899) * C757 +
           (C902 - C901 + C904 - C903 + C906 - C905) * C32183 +
           (C908 - C907 + C910 - C909 + C912 - C911) * C758 +
           (C914 - C913 + C916 - C915 + C918 - C917) * C32171 +
           (C919 - C920 + C921 - C922 + C923 - C924) * C759 +
           (C925 - C926 + C927 - C928 + C929 - C930) * C32148) *
              C31876 * C31835 * C210 +
          (C939 * C757 + C940 * C32183 +
           (C920 - C919 + C922 - C921 + C924 - C923) * C758 +
           (C926 - C925 + C928 - C927 + C930 - C929) * C32171 +
           (C748 * C882 - C754 * C873 + C749 * C883 - C755 * C874 +
            C32137 * C884 - C756 * C875) *
               C759 +
           (C748 * C891 - C754 * C885 + C749 * C892 - C755 * C886 +
            C32137 * C893 - C756 * C887) *
               C32148) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
            C32137 * C128 - C756 * C121) *
               C757 +
           (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
            C32137 * C142 - C756 * C133) *
               C32183 +
           (C895 - C896 + C897 - C898 + C899 - C900) * C758 +
           (C901 - C902 + C903 - C904 + C905 - C906) * C32171 + C939 * C759 +
           C940 * C32148) *
              C31876 * C315 +
          ((C754 * C318 - C748 * C328 + C755 * C319 - C749 * C329 +
            C756 * C320 - C32137 * C330) *
               C757 +
           (C754 * C333 - C748 * C348 + C755 * C334 - C749 * C349 +
            C756 * C335 - C32137 * C350) *
               C32183 +
           (C754 * C618 - C748 * C623 + C755 * C619 - C749 * C624 +
            C756 * C620 - C32137 * C625) *
               C758 +
           (C754 * C628 - C748 * C633 + C755 * C629 - C749 * C634 +
            C756 * C630 - C32137 * C635) *
               C32171 +
           (C754 * C1050 - C748 * C1059 + C755 * C1051 - C749 * C1060 +
            C756 * C1052 - C32137 * C1061) *
               C759 +
           (C754 * C1062 - C748 * C1077 + C755 * C1063 - C749 * C1078 +
            C756 * C1064 - C32137 * C1079) *
               C32148) *
              C31876 * C316 +
          ((C748 * C338 - C754 * C323 + C749 * C339 - C755 * C324 +
            C32137 * C340 - C756 * C325) *
               C757 +
           (C748 * C353 - C754 * C343 + C749 * C354 - C755 * C344 +
            C32137 * C355 - C756 * C345) *
               C32183 +
           (C748 * C1065 - C754 * C1053 + C749 * C1066 - C755 * C1054 +
            C32137 * C1067 - C756 * C1055) *
               C758 +
           (C748 * C1080 - C754 * C1068 + C749 * C1081 - C755 * C1069 +
            C32137 * C1082 - C756 * C1070) *
               C32171 +
           (C748 * C1071 - C754 * C1056 + C749 * C1072 - C755 * C1057 +
            C32137 * C1073 - C756 * C1058) *
               C759 +
           (C748 * C1083 - C754 * C1074 + C749 * C1084 - C755 * C1075 +
            C32137 * C1085 - C756 * C1076) *
               C32148) *
              C31876 * C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
            C32137 * C128 - C5156 * C121) *
               C5157 +
           (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
            C32137 * C142 - C5156 * C133) *
               C5151 +
           (C32180 * C223 - C5154 * C213 + C32167 * C224 - C5155 * C214 +
            C32137 * C225 - C5156 * C215) *
               C5158 +
           (C32180 * C243 - C5154 * C228 + C32167 * C244 - C5155 * C229 +
            C32137 * C245 - C5156 * C230) *
               C5152 +
           (C32180 * C233 - C5154 * C218 + C32167 * C234 - C5155 * C219 +
            C32137 * C235 - C5156 * C220) *
               C5159 +
           (C32180 * C248 - C5154 * C238 + C32167 * C249 - C5155 * C239 +
            C32137 * C250 - C5156 * C240) *
               C32148) *
              C31876 * C31835 * C31821 * C110 +
          ((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
            C5156 * C122 - C32137 * C129) *
               C5157 +
           (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
            C5156 * C134 - C32137 * C143) *
               C5151 +
           (C5154 * C214 - C32180 * C224 + C5155 * C215 - C32167 * C225 +
            C5156 * C216 - C32137 * C226) *
               C5158 +
           (C5154 * C229 - C32180 * C244 + C5155 * C230 - C32167 * C245 +
            C5156 * C231 - C32137 * C246) *
               C5152 +
           (C5154 * C219 - C32180 * C234 + C5155 * C220 - C32167 * C235 +
            C5156 * C221 - C32137 * C236) *
               C5159 +
           (C5154 * C239 - C32180 * C249 + C5155 * C240 - C32167 * C250 +
            C5156 * C241 - C32137 * C251) *
               C32148) *
              C31876 * C31835 * C31821 * C111 +
          ((C32180 * C128 - C5154 * C121 + C32167 * C129 - C5155 * C122 +
            C32137 * C130 - C5156 * C123) *
               C5157 +
           (C32180 * C142 - C5154 * C133 + C32167 * C143 - C5155 * C134 +
            C32137 * C144 - C5156 * C135) *
               C5151 +
           (C32180 * C225 - C5154 * C215 + C32167 * C226 - C5155 * C216 +
            C32137 * C227 - C5156 * C217) *
               C5158 +
           (C32180 * C245 - C5154 * C230 + C32167 * C246 - C5155 * C231 +
            C32137 * C247 - C5156 * C232) *
               C5152 +
           (C32180 * C235 - C5154 * C220 + C32167 * C236 - C5155 * C221 +
            C32137 * C237 - C5156 * C222) *
               C5159 +
           (C32180 * C250 - C5154 * C240 + C32167 * C251 - C5155 * C241 +
            C32137 * C252 - C5156 * C242) *
               C32148) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
            C32137 * C128 - C5156 * C121) *
               C5157 +
           (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
            C32137 * C142 - C5156 * C133) *
               C5151 +
           (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C5158 +
           (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C5152 +
           C5315 * C5159 + C5316 * C32148) *
              C31876 * C31835 * C209 +
          ((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C5157 +
           (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C5151 +
           (C5284 - C5283 + C5286 - C5285 + C5288 - C5287) * C5158 +
           (C5290 - C5289 + C5292 - C5291 + C5294 - C5293) * C5152 +
           (C5295 - C5296 + C5297 - C5298 + C5299 - C5300) * C5159 +
           (C5301 - C5302 + C5303 - C5304 + C5305 - C5306) * C32148) *
              C31876 * C31835 * C210 +
          (C5315 * C5157 + C5316 * C5151 +
           (C5296 - C5295 + C5298 - C5297 + C5300 - C5299) * C5158 +
           (C5302 - C5301 + C5304 - C5303 + C5306 - C5305) * C5152 +
           (C32180 * C882 - C5154 * C873 + C32167 * C883 - C5155 * C874 +
            C32137 * C884 - C5156 * C875) *
               C5159 +
           (C32180 * C891 - C5154 * C885 + C32167 * C892 - C5155 * C886 +
            C32137 * C893 - C5156 * C887) *
               C32148) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
            C32137 * C128 - C5156 * C121) *
               C5157 +
           (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
            C32137 * C142 - C5156 * C133) *
               C5151 +
           (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C5158 +
           (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C5152 +
           C5315 * C5159 + C5316 * C32148) *
              C31876 * C315 +
          ((C5154 * C318 - C32180 * C328 + C5155 * C319 - C32167 * C329 +
            C5156 * C320 - C32137 * C330) *
               C5157 +
           (C5154 * C333 - C32180 * C348 + C5155 * C334 - C32167 * C349 +
            C5156 * C335 - C32137 * C350) *
               C5151 +
           (C5154 * C618 - C32180 * C623 + C5155 * C619 - C32167 * C624 +
            C5156 * C620 - C32137 * C625) *
               C5158 +
           (C5154 * C628 - C32180 * C633 + C5155 * C629 - C32167 * C634 +
            C5156 * C630 - C32137 * C635) *
               C5152 +
           (C5154 * C1050 - C32180 * C1059 + C5155 * C1051 - C32167 * C1060 +
            C5156 * C1052 - C32137 * C1061) *
               C5159 +
           (C5154 * C1062 - C32180 * C1077 + C5155 * C1063 - C32167 * C1078 +
            C5156 * C1064 - C32137 * C1079) *
               C32148) *
              C31876 * C316 +
          ((C32180 * C338 - C5154 * C323 + C32167 * C339 - C5155 * C324 +
            C32137 * C340 - C5156 * C325) *
               C5157 +
           (C32180 * C353 - C5154 * C343 + C32167 * C354 - C5155 * C344 +
            C32137 * C355 - C5156 * C345) *
               C5151 +
           (C32180 * C1065 - C5154 * C1053 + C32167 * C1066 - C5155 * C1054 +
            C32137 * C1067 - C5156 * C1055) *
               C5158 +
           (C32180 * C1080 - C5154 * C1068 + C32167 * C1081 - C5155 * C1069 +
            C32137 * C1082 - C5156 * C1070) *
               C5152 +
           (C32180 * C1071 - C5154 * C1056 + C32167 * C1072 - C5155 * C1057 +
            C32137 * C1073 - C5156 * C1058) *
               C5159 +
           (C32180 * C1083 - C5154 * C1074 + C32167 * C1084 - C5155 * C1075 +
            C32137 * C1085 - C5156 * C1076) *
               C32148) *
              C31876 * C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C31772 * C126 - C5980 * C119) * C5981 +
           (C31772 * C140 - C5980 * C131) * C5975 +
           (C31772 * C223 - C5980 * C213) * C5982 +
           (C31772 * C243 - C5980 * C228) * C5976 +
           (C31772 * C233 - C5980 * C218) * C5983 +
           (C31772 * C248 - C5980 * C238) * C5977 +
           (C31772 * C876 - C5980 * C870) * C5984 +
           (C31772 * C888 - C5980 * C879) * C5978 +
           (C31772 * C882 - C5980 * C873) * C5985 +
           (C31772 * C891 - C5980 * C885) * C5979) *
              C31876 * C31835 * C31821 * C110 +
          ((C5980 * C120 - C31772 * C127) * C5981 +
           (C5980 * C132 - C31772 * C141) * C5975 +
           (C5980 * C214 - C31772 * C224) * C5982 +
           (C5980 * C229 - C31772 * C244) * C5976 +
           (C5980 * C219 - C31772 * C234) * C5983 +
           (C5980 * C239 - C31772 * C249) * C5977 +
           (C5980 * C871 - C31772 * C877) * C5984 +
           (C5980 * C880 - C31772 * C889) * C5978 +
           (C5980 * C874 - C31772 * C883) * C5985 +
           (C5980 * C886 - C31772 * C892) * C5979) *
              C31876 * C31835 * C31821 * C111 +
          ((C31772 * C128 - C5980 * C121) * C5981 +
           (C31772 * C142 - C5980 * C133) * C5975 +
           (C31772 * C225 - C5980 * C215) * C5982 +
           (C31772 * C245 - C5980 * C230) * C5976 +
           (C31772 * C235 - C5980 * C220) * C5983 +
           (C31772 * C250 - C5980 * C240) * C5977 +
           (C31772 * C878 - C5980 * C872) * C5984 +
           (C31772 * C890 - C5980 * C881) * C5978 +
           (C31772 * C884 - C5980 * C875) * C5985 +
           (C31772 * C893 - C5980 * C887) * C5979) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C31772 * C126 - C5980 * C119) * C5981 +
           (C31772 * C140 - C5980 * C131) * C5975 + (C6057 - C6058) * C5982 +
           (C6059 - C6060) * C5976 + C6077 * C5983 + C6078 * C5977 +
           C6079 * C5984 + C6080 * C5978 + C6081 * C5985 + C6082 * C5979) *
              C31876 * C31835 * C209 +
          ((C6058 - C6057) * C5981 + (C6060 - C6059) * C5975 +
           (C6062 - C6061) * C5982 + (C6064 - C6063) * C5976 +
           (C6066 - C6065) * C5983 + (C6068 - C6067) * C5977 +
           (C6070 - C6069) * C5984 + (C6072 - C6071) * C5978 +
           (C6073 - C6074) * C5985 + (C6075 - C6076) * C5979) *
              C31876 * C31835 * C210 +
          (C6077 * C5981 + C6078 * C5975 + C6079 * C5982 + C6080 * C5976 +
           C6081 * C5983 + C6082 * C5977 + (C6074 - C6073) * C5984 +
           (C6076 - C6075) * C5978 + (C31772 * C6052 - C5980 * C6049) * C5985 +
           (C31772 * C6055 - C5980 * C6053) * C5979) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31772 * C126 - C5980 * C119) * C5981 +
           (C31772 * C140 - C5980 * C131) * C5975 + (C6057 - C6058) * C5982 +
           (C6059 - C6060) * C5976 + C6077 * C5983 + C6078 * C5977 +
           C6079 * C5984 + C6080 * C5978 + C6081 * C5985 + C6082 * C5979) *
              C31876 * C315 +
          ((C5980 * C318 - C31772 * C328) * C5981 +
           (C5980 * C333 - C31772 * C348) * C5975 +
           (C5980 * C618 - C31772 * C623) * C5982 +
           (C5980 * C628 - C31772 * C633) * C5976 +
           (C5980 * C1050 - C31772 * C1059) * C5983 +
           (C5980 * C1062 - C31772 * C1077) * C5977 +
           (C5980 * C1556 - C31772 * C1559) * C5984 +
           (C5980 * C1562 - C31772 * C1565) * C5978 +
           (C5980 * C6144 - C31772 * C6147) * C5985 +
           (C5980 * C6148 - C31772 * C6153) * C5979) *
              C31876 * C316 +
          ((C31772 * C338 - C5980 * C323) * C5981 +
           (C31772 * C353 - C5980 * C343) * C5975 +
           (C31772 * C1065 - C5980 * C1053) * C5982 +
           (C31772 * C1080 - C5980 * C1068) * C5976 +
           (C31772 * C1071 - C5980 * C1056) * C5983 +
           (C31772 * C1083 - C5980 * C1074) * C5977 +
           (C31772 * C6149 - C5980 * C6145) * C5984 +
           (C31772 * C6154 - C5980 * C6150) * C5978 +
           (C31772 * C6151 - C5980 * C6146) * C5985 +
           (C31772 * C6155 - C5980 * C6152) * C5979) *
              C31876 * C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C118 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C31864) *
               C10013 +
           ((C32180 * C328 - C5154 * C318 + C32167 * C329 - C5155 * C319 +
             C32137 * C330 - C5156 * C320) *
                C118 +
            (C32180 * C348 - C5154 * C333 + C32167 * C349 - C5155 * C334 +
             C32137 * C350 - C5156 * C335) *
                C31864) *
               C10014 +
           ((C32180 * C338 - C5154 * C323 + C32167 * C339 - C5155 * C324 +
             C32137 * C340 - C5156 * C325) *
                C118 +
            (C32180 * C353 - C5154 * C343 + C32167 * C354 - C5155 * C344 +
             C32137 * C355 - C5156 * C345) *
                C31864) *
               C32151) *
              C31835 * C31821 * C110 +
          (((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
             C5156 * C122 - C32137 * C129) *
                C118 +
            (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
             C5156 * C134 - C32137 * C143) *
                C31864) *
               C10013 +
           ((C5154 * C319 - C32180 * C329 + C5155 * C320 - C32167 * C330 +
             C5156 * C321 - C32137 * C331) *
                C118 +
            (C5154 * C334 - C32180 * C349 + C5155 * C335 - C32167 * C350 +
             C5156 * C336 - C32137 * C351) *
                C31864) *
               C10014 +
           ((C5154 * C324 - C32180 * C339 + C5155 * C325 - C32167 * C340 +
             C5156 * C326 - C32137 * C341) *
                C118 +
            (C5154 * C344 - C32180 * C354 + C5155 * C345 - C32167 * C355 +
             C5156 * C346 - C32137 * C356) *
                C31864) *
               C32151) *
              C31835 * C31821 * C111 +
          (((C32180 * C128 - C5154 * C121 + C32167 * C129 - C5155 * C122 +
             C32137 * C130 - C5156 * C123) *
                C118 +
            (C32180 * C142 - C5154 * C133 + C32167 * C143 - C5155 * C134 +
             C32137 * C144 - C5156 * C135) *
                C31864) *
               C10013 +
           ((C32180 * C330 - C5154 * C320 + C32167 * C331 - C5155 * C321 +
             C32137 * C332 - C5156 * C322) *
                C118 +
            (C32180 * C350 - C5154 * C335 + C32167 * C351 - C5155 * C336 +
             C32137 * C352 - C5156 * C337) *
                C31864) *
               C10014 +
           ((C32180 * C340 - C5154 * C325 + C32167 * C341 - C5155 * C326 +
             C32137 * C342 - C5156 * C327) *
                C118 +
            (C32180 * C355 - C5154 * C345 + C32167 * C356 - C5155 * C346 +
             C32137 * C357 - C5156 * C347) *
                C31864) *
               C32151) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C118 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C31864) *
               C10013 +
           ((C32180 * C328 - C5154 * C318 + C32167 * C329 - C5155 * C319 +
             C32137 * C330 - C5156 * C320) *
                C118 +
            (C32180 * C348 - C5154 * C333 + C32167 * C349 - C5155 * C334 +
             C32137 * C350 - C5156 * C335) *
                C31864) *
               C10014 +
           ((C32180 * C338 - C5154 * C323 + C32167 * C339 - C5155 * C324 +
             C32137 * C340 - C5156 * C325) *
                C118 +
            (C32180 * C353 - C5154 * C343 + C32167 * C354 - C5155 * C344 +
             C32137 * C355 - C5156 * C345) *
                C31864) *
               C32151) *
              C31835 * C209 +
          (((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C118 +
            (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C31864) *
               C10013 +
           ((C5889 - C5890 + C5891 - C5892 + C5893 - C5894) * C118 +
            (C5895 - C5896 + C5897 - C5898 + C5899 - C5900) * C31864) *
               C10014 +
           ((C5154 * C1053 - C32180 * C1065 + C5155 * C1054 - C32167 * C1066 +
             C5156 * C1055 - C32137 * C1067) *
                C118 +
            (C5154 * C1068 - C32180 * C1080 + C5155 * C1069 - C32167 * C1081 +
             C5156 * C1070 - C32137 * C1082) *
                C31864) *
               C32151) *
              C31835 * C210 +
          ((C5315 * C118 + C5316 * C31864) * C10013 +
           ((C5902 - C5901 + C5904 - C5903 + C5906 - C5905) * C118 +
            (C5908 - C5907 + C5910 - C5909 + C5912 - C5911) * C31864) *
               C10014 +
           ((C32180 * C1071 - C5154 * C1056 + C32167 * C1072 - C5155 * C1057 +
             C32137 * C1073 - C5156 * C1058) *
                C118 +
            (C32180 * C1083 - C5154 * C1074 + C32167 * C1084 - C5155 * C1075 +
             C32137 * C1085 - C5156 * C1076) *
                C31864) *
               C32151) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C118 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C31864) *
               C10013 +
           ((C10237 - C10238 + C10239 - C10240 + C10241 - C10242) * C118 +
            (C10243 - C10244 + C10245 - C10246 + C10247 - C10248) * C31864) *
               C10014 +
           C10285 * C32151) *
              C315 +
          (((C10238 - C10237 + C10240 - C10239 + C10242 - C10241) * C118 +
            (C10244 - C10243 + C10246 - C10245 + C10248 - C10247) * C31864) *
               C10013 +
           ((C10250 - C10249 + C10252 - C10251 + C10254 - C10253) * C118 +
            (C10256 - C10255 + C10258 - C10257 + C10260 - C10259) * C31864) *
               C10014 +
           ((C10261 - C10262 + C10263 - C10264 + C10265 - C10266) * C118 +
            (C10267 - C10268 + C10269 - C10270 + C10271 - C10272) * C31864) *
               C32151) *
              C316 +
          (C10285 * C10013 +
           ((C10262 - C10261 + C10264 - C10263 + C10266 - C10265) * C118 +
            (C10268 - C10267 + C10270 - C10269 + C10272 - C10271) * C31864) *
               C10014 +
           ((C32180 * C1937 - C5154 * C1928 + C32167 * C1938 - C5155 * C1929 +
             C32137 * C1939 - C5156 * C1930) *
                C118 +
            (C32180 * C1946 - C5154 * C1940 + C32167 * C1947 - C5155 * C1941 +
             C32137 * C1948 - C5156 * C1942) *
                C31864) *
               C32151) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C757 +
            (C31772 * C140 - C5980 * C131) * C32183 + (C6057 - C6058) * C758 +
            (C6059 - C6060) * C32171 + C6077 * C759 + C6078 * C32148) *
               C10013 +
           ((C6805 - C6806) * C757 + (C6807 - C6808) * C32183 + C7314 * C758 +
            C7315 * C32171 + C6667 * C759 + C6668 * C32148) *
               C10014 +
           (C6829 * C757 + C6830 * C32183 + C6813 * C758 + C6814 * C32171 +
            C6681 * C759 + C6682 * C32148) *
               C32151) *
              C31835 * C31821 * C110 +
          (((C5980 * C120 - C31772 * C127) * C757 +
            (C5980 * C132 - C31772 * C141) * C32183 + (C6243 - C6244) * C758 +
            (C6245 - C6246) * C32171 + (C6247 - C6248) * C759 +
            (C6249 - C6250) * C32148) *
               C10013 +
           ((C7156 - C7157) * C757 + (C7158 - C7159) * C32183 +
            (C6990 - C6991) * C758 + (C6992 - C6993) * C32171 +
            (C6994 - C6995) * C759 + (C6996 - C6997) * C32148) *
               C10014 +
           ((C7160 - C7161) * C757 + (C7162 - C7163) * C32183 +
            (C6998 - C6999) * C758 + (C7000 - C7001) * C32171 +
            (C7002 - C7003) * C759 + (C7004 - C7005) * C32148) *
               C32151) *
              C31835 * C31821 * C111 +
          (((C31772 * C128 - C5980 * C121) * C757 +
            (C31772 * C142 - C5980 * C133) * C32183 +
            (C31772 * C225 - C5980 * C215) * C758 +
            (C31772 * C245 - C5980 * C230) * C32171 +
            (C31772 * C235 - C5980 * C220) * C759 +
            (C31772 * C250 - C5980 * C240) * C32148) *
               C10013 +
           ((C31772 * C330 - C5980 * C320) * C757 +
            (C31772 * C350 - C5980 * C335) * C32183 +
            (C31772 * C625 - C5980 * C620) * C758 +
            (C31772 * C635 - C5980 * C630) * C32171 +
            (C31772 * C1061 - C5980 * C1052) * C759 +
            (C31772 * C1079 - C5980 * C1064) * C32148) *
               C10014 +
           ((C31772 * C340 - C5980 * C325) * C757 +
            (C31772 * C355 - C5980 * C345) * C32183 +
            (C31772 * C1067 - C5980 * C1055) * C758 +
            (C31772 * C1082 - C5980 * C1070) * C32171 +
            (C31772 * C1073 - C5980 * C1058) * C759 +
            (C31772 * C1085 - C5980 * C1076) * C32148) *
               C32151) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C757 +
            (C31772 * C140 - C5980 * C131) * C32183 + (C6057 - C6058) * C758 +
            (C6059 - C6060) * C32171 + C6077 * C759 + C6078 * C32148) *
               C10013 +
           ((C6805 - C6806) * C757 + (C6807 - C6808) * C32183 + C7314 * C758 +
            C7315 * C32171 + C6667 * C759 + C6668 * C32148) *
               C10014 +
           (C6829 * C757 + C6830 * C32183 + C6813 * C758 + C6814 * C32171 +
            C6681 * C759 + C6682 * C32148) *
               C32151) *
              C31835 * C209 +
          (((C6058 - C6057) * C757 + (C6060 - C6059) * C32183 +
            (C6062 - C6061) * C758 + (C6064 - C6063) * C32171 +
            (C6066 - C6065) * C759 + (C6068 - C6067) * C32148) *
               C10013 +
           (C7316 * C757 + C7317 * C32183 + C7318 * C758 + C7319 * C32171 +
            C9902 * C759 + C9903 * C32148) *
               C10014 +
           (C7320 * C757 + C7321 * C32183 + C7322 * C758 + C7323 * C32171 +
            (C6677 - C6678) * C759 + (C6679 - C6680) * C32148) *
               C32151) *
              C31835 * C210 +
          ((C6077 * C757 + C6078 * C32183 + C6079 * C758 + C6080 * C32171 +
            C6081 * C759 + C6082 * C32148) *
               C10013 +
           (C6667 * C757 + C6668 * C32183 + C9408 * C758 + C9409 * C32171 +
            (C6444 - C6443) * C759 + (C6446 - C6445) * C32148) *
               C10014 +
           (C6681 * C757 + C6682 * C32183 + (C6678 - C6677) * C758 +
            (C6680 - C6679) * C32171 + (C31772 * C6151 - C5980 * C6146) * C759 +
            (C31772 * C6155 - C5980 * C6152) * C32148) *
               C32151) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C757 +
            (C31772 * C140 - C5980 * C131) * C32183 + (C6057 - C6058) * C758 +
            (C6059 - C6060) * C32171 + C6077 * C759 + C6078 * C32148) *
               C10013 +
           ((C6805 - C6806) * C757 + (C6807 - C6808) * C32183 + C7314 * C758 +
            C7315 * C32171 + C6667 * C759 + C6668 * C32148) *
               C10014 +
           C11100 * C32151) *
              C315 +
          (((C6806 - C6805) * C757 + (C6808 - C6807) * C32183 + C7316 * C758 +
            C7317 * C32171 + C7318 * C759 + C7319 * C32148) *
               C10013 +
           ((C6810 - C6809) * C757 + (C6812 - C6811) * C32183 + C7320 * C758 +
            C7321 * C32171 + C7322 * C759 + C7323 * C32148) *
               C10014 +
           ((C6817 - C6818) * C757 + (C6819 - C6820) * C32183 +
            (C6821 - C6822) * C758 + (C6823 - C6824) * C32171 +
            (C6825 - C6826) * C759 + (C6827 - C6828) * C32148) *
               C32151) *
              C316 +
          (C11100 * C10013 +
           ((C6818 - C6817) * C757 + (C6820 - C6819) * C32183 +
            (C6822 - C6821) * C758 + (C6824 - C6823) * C32171 +
            (C6826 - C6825) * C759 + (C6828 - C6827) * C32148) *
               C10014 +
           ((C31772 * C1937 - C5980 * C1928) * C757 +
            (C31772 * C1946 - C5980 * C1940) * C32183 +
            (C31772 * C6797 - C5980 * C6793) * C758 +
            (C31772 * C6802 - C5980 * C6798) * C32171 +
            (C31772 * C6799 - C5980 * C6794) * C759 +
            (C31772 * C6803 - C5980 * C6800) * C32148) *
               C32151) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
             C32137 * C128 - C756 * C121) *
                C757 +
            (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
             C32137 * C142 - C756 * C133) *
                C32183 +
            (C895 - C896 + C897 - C898 + C899 - C900) * C758 +
            (C901 - C902 + C903 - C904 + C905 - C906) * C32171 + C939 * C759 +
            C940 * C32148) *
               C31876 * C530 +
           ((C754 * C318 - C748 * C328 + C755 * C319 - C749 * C329 +
             C756 * C320 - C32137 * C330) *
                C757 +
            (C754 * C333 - C748 * C348 + C755 * C334 - C749 * C349 +
             C756 * C335 - C32137 * C350) *
                C32183 +
            (C754 * C618 - C748 * C623 + C755 * C619 - C749 * C624 +
             C756 * C620 - C32137 * C625) *
                C758 +
            (C754 * C628 - C748 * C633 + C755 * C629 - C749 * C634 +
             C756 * C630 - C32137 * C635) *
                C32171 +
            (C754 * C1050 - C748 * C1059 + C755 * C1051 - C749 * C1060 +
             C756 * C1052 - C32137 * C1061) *
                C759 +
            (C754 * C1062 - C748 * C1077 + C755 * C1063 - C749 * C1078 +
             C756 * C1064 - C32137 * C1079) *
                C32148) *
               C31876 * C531) *
              C31821 * C442 +
          (((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
             C756 * C122 - C32137 * C129) *
                C757 +
            (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
             C756 * C134 - C32137 * C143) *
                C32183 +
            (C1237 - C1238 + C1239 - C1240 + C1241 - C1242) * C758 +
            (C1243 - C1244 + C1245 - C1246 + C1247 - C1248) * C32171 +
            (C1249 - C1250 + C1251 - C1252 + C1253 - C1254) * C759 +
            (C1255 - C1256 + C1257 - C1258 + C1259 - C1260) * C32148) *
               C31876 * C530 +
           ((C748 * C329 - C754 * C319 + C749 * C330 - C755 * C320 +
             C32137 * C331 - C756 * C321) *
                C757 +
            (C748 * C349 - C754 * C334 + C749 * C350 - C755 * C335 +
             C32137 * C351 - C756 * C336) *
                C32183 +
            (C748 * C624 - C754 * C619 + C749 * C625 - C755 * C620 +
             C32137 * C626 - C756 * C621) *
                C758 +
            (C748 * C634 - C754 * C629 + C749 * C635 - C755 * C630 +
             C32137 * C636 - C756 * C631) *
                C32171 +
            (C748 * C1060 - C754 * C1051 + C749 * C1061 - C755 * C1052 +
             C32137 * C1407 - C756 * C1406) *
                C759 +
            (C748 * C1078 - C754 * C1063 + C749 * C1079 - C755 * C1064 +
             C32137 * C1409 - C756 * C1408) *
                C32148) *
               C31876 * C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C31864) *
               C31876 * C530 +
           ((C113 * C318 - C101 * C328 + C114 * C319 - C102 * C329 +
             C115 * C320 - C103 * C330 + C116 * C321 - C104 * C331 +
             C117 * C322 - C105 * C332) *
                C118 +
            (C113 * C333 - C101 * C348 + C114 * C334 - C102 * C349 +
             C115 * C335 - C103 * C350 + C116 * C336 - C104 * C351 +
             C117 * C337 - C105 * C352) *
                C31864) *
               C31876 * C531) *
              C31821 * C442 +
          (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
             C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
             C117 * C124 - C105 * C136) *
                C118 +
            (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
             C117 * C137 - C105 * C145) *
                C31864) *
               C31876 * C530 +
           ((C101 * C329 - C113 * C319 + C102 * C330 - C114 * C320 +
             C103 * C331 - C115 * C321 + C104 * C332 - C116 * C322 +
             C105 * C533 - C117 * C532) *
                C118 +
            (C101 * C349 - C113 * C334 + C102 * C350 - C114 * C335 +
             C103 * C351 - C115 * C336 + C104 * C352 - C116 * C337 +
             C105 * C535 - C117 * C534) *
                C31864) *
               C31876 * C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C5157 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C5151 +
            (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C5158 +
            (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C5152 +
            C5315 * C5159 + C5316 * C32148) *
               C31876 * C530 +
           ((C5154 * C318 - C32180 * C328 + C5155 * C319 - C32167 * C329 +
             C5156 * C320 - C32137 * C330) *
                C5157 +
            (C5154 * C333 - C32180 * C348 + C5155 * C334 - C32167 * C349 +
             C5156 * C335 - C32137 * C350) *
                C5151 +
            (C5154 * C618 - C32180 * C623 + C5155 * C619 - C32167 * C624 +
             C5156 * C620 - C32137 * C625) *
                C5158 +
            (C5154 * C628 - C32180 * C633 + C5155 * C629 - C32167 * C634 +
             C5156 * C630 - C32137 * C635) *
                C5152 +
            (C5154 * C1050 - C32180 * C1059 + C5155 * C1051 - C32167 * C1060 +
             C5156 * C1052 - C32137 * C1061) *
                C5159 +
            (C5154 * C1062 - C32180 * C1077 + C5155 * C1063 - C32167 * C1078 +
             C5156 * C1064 - C32137 * C1079) *
                C32148) *
               C31876 * C531) *
              C31821 * C442 +
          (((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
             C5156 * C122 - C32137 * C129) *
                C5157 +
            (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
             C5156 * C134 - C32137 * C143) *
                C5151 +
            (C5573 - C5574 + C5575 - C5576 + C5577 - C5578) * C5158 +
            (C5579 - C5580 + C5581 - C5582 + C5583 - C5584) * C5152 +
            (C5585 - C5586 + C5587 - C5588 + C5589 - C5590) * C5159 +
            (C5591 - C5592 + C5593 - C5594 + C5595 - C5596) * C32148) *
               C31876 * C530 +
           ((C32180 * C329 - C5154 * C319 + C32167 * C330 - C5155 * C320 +
             C32137 * C331 - C5156 * C321) *
                C5157 +
            (C32180 * C349 - C5154 * C334 + C32167 * C350 - C5155 * C335 +
             C32137 * C351 - C5156 * C336) *
                C5151 +
            (C32180 * C624 - C5154 * C619 + C32167 * C625 - C5155 * C620 +
             C32137 * C626 - C5156 * C621) *
                C5158 +
            (C32180 * C634 - C5154 * C629 + C32167 * C635 - C5155 * C630 +
             C32137 * C636 - C5156 * C631) *
                C5152 +
            (C32180 * C1060 - C5154 * C1051 + C32167 * C1061 - C5155 * C1052 +
             C32137 * C1407 - C5156 * C1406) *
                C5159 +
            (C32180 * C1078 - C5154 * C1063 + C32167 * C1079 - C5155 * C1064 +
             C32137 * C1409 - C5156 * C1408) *
                C32148) *
               C31876 * C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C5981 +
            (C31772 * C140 - C5980 * C131) * C5975 + (C6057 - C6058) * C5982 +
            (C6059 - C6060) * C5976 + C6077 * C5983 + C6078 * C5977 +
            C6079 * C5984 + C6080 * C5978 + C6081 * C5985 + C6082 * C5979) *
               C31876 * C530 +
           ((C5980 * C318 - C31772 * C328) * C5981 +
            (C5980 * C333 - C31772 * C348) * C5975 +
            (C5980 * C618 - C31772 * C623) * C5982 +
            (C5980 * C628 - C31772 * C633) * C5976 +
            (C5980 * C1050 - C31772 * C1059) * C5983 +
            (C5980 * C1062 - C31772 * C1077) * C5977 +
            (C5980 * C1556 - C31772 * C1559) * C5984 +
            (C5980 * C1562 - C31772 * C1565) * C5978 +
            (C5980 * C6144 - C31772 * C6147) * C5985 +
            (C5980 * C6148 - C31772 * C6153) * C5979) *
               C31876 * C531) *
              C31821 * C442 +
          (((C5980 * C120 - C31772 * C127) * C5981 +
            (C5980 * C132 - C31772 * C141) * C5975 + (C6243 - C6244) * C5982 +
            (C6245 - C6246) * C5976 + (C6247 - C6248) * C5983 +
            (C6249 - C6250) * C5977 + (C6251 - C6252) * C5984 +
            (C6253 - C6254) * C5978 + (C6255 - C6256) * C5985 +
            (C6257 - C6258) * C5979) *
               C31876 * C530 +
           ((C31772 * C329 - C5980 * C319) * C5981 +
            (C31772 * C349 - C5980 * C334) * C5975 +
            (C31772 * C624 - C5980 * C619) * C5982 +
            (C31772 * C634 - C5980 * C629) * C5976 +
            (C31772 * C1060 - C5980 * C1051) * C5983 +
            (C31772 * C1078 - C5980 * C1063) * C5977 +
            (C31772 * C1560 - C5980 * C1557) * C5984 +
            (C31772 * C1566 - C5980 * C1563) * C5978 +
            (C31772 * C6341 - C5980 * C6340) * C5985 +
            (C31772 * C6343 - C5980 * C6342) * C5979) *
               C31876 * C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
              C32137 * C128 - C5156 * C121) *
                 C118 +
             (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
              C32137 * C142 - C5156 * C133) *
                 C31864) *
                C10013 +
            ((C10237 - C10238 + C10239 - C10240 + C10241 - C10242) * C118 +
             (C10243 - C10244 + C10245 - C10246 + C10247 - C10248) * C31864) *
                C10014 +
            C10285 * C32151) *
               C530 +
           (((C10238 - C10237 + C10240 - C10239 + C10242 - C10241) * C118 +
             (C10244 - C10243 + C10246 - C10245 + C10248 - C10247) * C31864) *
                C10013 +
            ((C10250 - C10249 + C10252 - C10251 + C10254 - C10253) * C118 +
             (C10256 - C10255 + C10258 - C10257 + C10260 - C10259) * C31864) *
                C10014 +
            ((C10261 - C10262 + C10263 - C10264 + C10265 - C10266) * C118 +
             (C10267 - C10268 + C10269 - C10270 + C10271 - C10272) * C31864) *
                C32151) *
               C531) *
              C31821 * C442 +
          ((((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
              C5156 * C122 - C32137 * C129) *
                 C118 +
             (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
              C5156 * C134 - C32137 * C143) *
                 C31864) *
                C10013 +
            ((C10578 - C10579 + C10580 - C10581 + C10582 - C10583) * C118 +
             (C10584 - C10585 + C10586 - C10587 + C10588 - C10589) * C31864) *
                C10014 +
            ((C10590 - C10591 + C10592 - C10593 + C10594 - C10595) * C118 +
             (C10596 - C10597 + C10598 - C10599 + C10600 - C10601) * C31864) *
                C32151) *
               C530 +
           (((C10579 - C10578 + C10581 - C10580 + C10583 - C10582) * C118 +
             (C10585 - C10584 + C10587 - C10586 + C10589 - C10588) * C31864) *
                C10013 +
            ((C10591 - C10590 + C10593 - C10592 + C10595 - C10594) * C118 +
             (C10597 - C10596 + C10599 - C10598 + C10601 - C10600) * C31864) *
                C10014 +
            ((C32180 * C1932 - C5154 * C1926 + C32167 * C1933 - C5155 * C1927 +
              C32137 * C2295 - C5156 * C2294) *
                 C118 +
             (C32180 * C1944 - C5154 * C1935 + C32167 * C1945 - C5155 * C1936 +
              C32137 * C2297 - C5156 * C2296) *
                 C31864) *
                C32151) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C757 +
             (C31772 * C140 - C5980 * C131) * C32183 + (C6057 - C6058) * C758 +
             (C6059 - C6060) * C32171 + C6077 * C759 + C6078 * C32148) *
                C10013 +
            ((C6805 - C6806) * C757 + (C6807 - C6808) * C32183 + C7314 * C758 +
             C7315 * C32171 + C6667 * C759 + C6668 * C32148) *
                C10014 +
            C11100 * C32151) *
               C530 +
           (((C6806 - C6805) * C757 + (C6808 - C6807) * C32183 + C7316 * C758 +
             C7317 * C32171 + C7318 * C759 + C7319 * C32148) *
                C10013 +
            ((C6810 - C6809) * C757 + (C6812 - C6811) * C32183 + C7320 * C758 +
             C7321 * C32171 + C7322 * C759 + C7323 * C32148) *
                C10014 +
            ((C6817 - C6818) * C757 + (C6819 - C6820) * C32183 +
             (C6821 - C6822) * C758 + (C6823 - C6824) * C32171 +
             (C6825 - C6826) * C759 + (C6827 - C6828) * C32148) *
                C32151) *
               C531) *
              C31821 * C442 +
          ((((C5980 * C120 - C31772 * C127) * C757 +
             (C5980 * C132 - C31772 * C141) * C32183 + (C6243 - C6244) * C758 +
             (C6245 - C6246) * C32171 + (C6247 - C6248) * C759 +
             (C6249 - C6250) * C32148) *
                C10013 +
            ((C7156 - C7157) * C757 + (C7158 - C7159) * C32183 +
             (C6990 - C6991) * C758 + (C6992 - C6993) * C32171 +
             (C6994 - C6995) * C759 + (C6996 - C6997) * C32148) *
                C10014 +
            ((C7160 - C7161) * C757 + (C7162 - C7163) * C32183 +
             (C6998 - C6999) * C758 + (C7000 - C7001) * C32171 +
             (C7002 - C7003) * C759 + (C7004 - C7005) * C32148) *
                C32151) *
               C530 +
           (((C7157 - C7156) * C757 + (C7159 - C7158) * C32183 +
             (C6991 - C6990) * C758 + (C6993 - C6992) * C32171 +
             (C6995 - C6994) * C759 + (C6997 - C6996) * C32148) *
                C10013 +
            ((C7161 - C7160) * C757 + (C7163 - C7162) * C32183 +
             (C6999 - C6998) * C758 + (C7001 - C7000) * C32171 +
             (C7003 - C7002) * C759 + (C7005 - C7004) * C32148) *
                C10014 +
            ((C31772 * C1932 - C5980 * C1926) * C757 +
             (C31772 * C1944 - C5980 * C1935) * C32183 +
             (C31772 * C2472 - C5980 * C2469) * C758 +
             (C31772 * C2478 - C5980 * C2475) * C32171 +
             (C31772 * C7152 - C5980 * C7151) * C759 +
             (C31772 * C7154 - C5980 * C7153) * C32148) *
                C32151) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
            C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
            C105 * C130 - C117 * C123) *
               C118 +
           (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
            C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
            C105 * C144 - C117 * C135) *
               C31864) *
              C31876 * C31835 * C209 +
          ((C113 * C213 - C101 * C223 + C114 * C214 - C102 * C224 +
            C115 * C215 - C103 * C225 + C116 * C216 - C104 * C226 +
            C117 * C217 - C105 * C227) *
               C118 +
           (C113 * C228 - C101 * C243 + C114 * C229 - C102 * C244 +
            C115 * C230 - C103 * C245 + C116 * C231 - C104 * C246 +
            C117 * C232 - C105 * C247) *
               C31864) *
              C31876 * C31835 * C210 +
          ((C101 * C233 - C113 * C218 + C102 * C234 - C114 * C219 +
            C103 * C235 - C115 * C220 + C104 * C236 - C116 * C221 +
            C105 * C237 - C117 * C222) *
               C118 +
           (C101 * C248 - C113 * C238 + C102 * C249 - C114 * C239 +
            C103 * C250 - C115 * C240 + C104 * C251 - C116 * C241 +
            C105 * C252 - C117 * C242) *
               C31864) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
            C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
            C105 * C130 - C117 * C123) *
               C118 +
           (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
            C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
            C105 * C144 - C117 * C135) *
               C31864) *
              C31876 * C31835 * C31821 * C110 +
          ((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
            C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
            C117 * C124 - C105 * C136) *
               C118 +
           (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
            C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
            C117 * C137 - C105 * C145) *
               C31864) *
              C31876 * C31835 * C31821 * C111 +
          ((C101 * C128 - C113 * C121 + C102 * C129 - C114 * C122 +
            C103 * C130 - C115 * C123 + C104 * C136 - C116 * C124 +
            C105 * C138 - C117 * C125) *
               C118 +
           (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C134 +
            C103 * C144 - C115 * C135 + C104 * C145 - C116 * C137 +
            C105 * C146 - C117 * C139) *
               C31864) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
            C32137 * C128 - C756 * C121) *
               C757 +
           (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
            C32137 * C142 - C756 * C133) *
               C32183 +
           (C748 * C223 - C754 * C213 + C749 * C224 - C755 * C214 +
            C32137 * C225 - C756 * C215) *
               C758 +
           (C748 * C243 - C754 * C228 + C749 * C244 - C755 * C229 +
            C32137 * C245 - C756 * C230) *
               C32171 +
           (C748 * C233 - C754 * C218 + C749 * C234 - C755 * C219 +
            C32137 * C235 - C756 * C220) *
               C759 +
           (C748 * C248 - C754 * C238 + C749 * C249 - C755 * C239 +
            C32137 * C250 - C756 * C240) *
               C32148) *
              C31876 * C31835 * C31821 * C110 +
          ((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
            C756 * C122 - C32137 * C129) *
               C757 +
           (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
            C756 * C134 - C32137 * C143) *
               C32183 +
           (C754 * C214 - C748 * C224 + C755 * C215 - C749 * C225 +
            C756 * C216 - C32137 * C226) *
               C758 +
           (C754 * C229 - C748 * C244 + C755 * C230 - C749 * C245 +
            C756 * C231 - C32137 * C246) *
               C32171 +
           (C754 * C219 - C748 * C234 + C755 * C220 - C749 * C235 +
            C756 * C221 - C32137 * C236) *
               C759 +
           (C754 * C239 - C748 * C249 + C755 * C240 - C749 * C250 +
            C756 * C241 - C32137 * C251) *
               C32148) *
              C31876 * C31835 * C31821 * C111 +
          ((C748 * C128 - C754 * C121 + C749 * C129 - C755 * C122 +
            C32137 * C130 - C756 * C123) *
               C757 +
           (C748 * C142 - C754 * C133 + C749 * C143 - C755 * C134 +
            C32137 * C144 - C756 * C135) *
               C32183 +
           (C748 * C225 - C754 * C215 + C749 * C226 - C755 * C216 +
            C32137 * C227 - C756 * C217) *
               C758 +
           (C748 * C245 - C754 * C230 + C749 * C246 - C755 * C231 +
            C32137 * C247 - C756 * C232) *
               C32171 +
           (C748 * C235 - C754 * C220 + C749 * C236 - C755 * C221 +
            C32137 * C237 - C756 * C222) *
               C759 +
           (C748 * C250 - C754 * C240 + C749 * C251 - C755 * C241 +
            C32137 * C252 - C756 * C242) *
               C32148) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
            C32137 * C128 - C756 * C121) *
               C757 +
           (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
            C32137 * C142 - C756 * C133) *
               C32183 +
           (C895 - C896 + C897 - C898 + C899 - C900) * C758 +
           (C901 - C902 + C903 - C904 + C905 - C906) * C32171 + C939 * C759 +
           C940 * C32148) *
              C31876 * C31835 * C209 +
          ((C896 - C895 + C898 - C897 + C900 - C899) * C757 +
           (C902 - C901 + C904 - C903 + C906 - C905) * C32183 +
           (C908 - C907 + C910 - C909 + C912 - C911) * C758 +
           (C914 - C913 + C916 - C915 + C918 - C917) * C32171 +
           (C919 - C920 + C921 - C922 + C923 - C924) * C759 +
           (C925 - C926 + C927 - C928 + C929 - C930) * C32148) *
              C31876 * C31835 * C210 +
          (C939 * C757 + C940 * C32183 +
           (C920 - C919 + C922 - C921 + C924 - C923) * C758 +
           (C926 - C925 + C928 - C927 + C930 - C929) * C32171 +
           (C748 * C882 - C754 * C873 + C749 * C883 - C755 * C874 +
            C32137 * C884 - C756 * C875) *
               C759 +
           (C748 * C891 - C754 * C885 + C749 * C892 - C755 * C886 +
            C32137 * C893 - C756 * C887) *
               C32148) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
            C32137 * C128 - C5156 * C121) *
               C5157 +
           (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
            C32137 * C142 - C5156 * C133) *
               C5151 +
           (C32180 * C223 - C5154 * C213 + C32167 * C224 - C5155 * C214 +
            C32137 * C225 - C5156 * C215) *
               C5158 +
           (C32180 * C243 - C5154 * C228 + C32167 * C244 - C5155 * C229 +
            C32137 * C245 - C5156 * C230) *
               C5152 +
           (C32180 * C233 - C5154 * C218 + C32167 * C234 - C5155 * C219 +
            C32137 * C235 - C5156 * C220) *
               C5159 +
           (C32180 * C248 - C5154 * C238 + C32167 * C249 - C5155 * C239 +
            C32137 * C250 - C5156 * C240) *
               C32148) *
              C31876 * C31835 * C31821 * C110 +
          ((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
            C5156 * C122 - C32137 * C129) *
               C5157 +
           (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
            C5156 * C134 - C32137 * C143) *
               C5151 +
           (C5154 * C214 - C32180 * C224 + C5155 * C215 - C32167 * C225 +
            C5156 * C216 - C32137 * C226) *
               C5158 +
           (C5154 * C229 - C32180 * C244 + C5155 * C230 - C32167 * C245 +
            C5156 * C231 - C32137 * C246) *
               C5152 +
           (C5154 * C219 - C32180 * C234 + C5155 * C220 - C32167 * C235 +
            C5156 * C221 - C32137 * C236) *
               C5159 +
           (C5154 * C239 - C32180 * C249 + C5155 * C240 - C32167 * C250 +
            C5156 * C241 - C32137 * C251) *
               C32148) *
              C31876 * C31835 * C31821 * C111 +
          ((C32180 * C128 - C5154 * C121 + C32167 * C129 - C5155 * C122 +
            C32137 * C130 - C5156 * C123) *
               C5157 +
           (C32180 * C142 - C5154 * C133 + C32167 * C143 - C5155 * C134 +
            C32137 * C144 - C5156 * C135) *
               C5151 +
           (C32180 * C225 - C5154 * C215 + C32167 * C226 - C5155 * C216 +
            C32137 * C227 - C5156 * C217) *
               C5158 +
           (C32180 * C245 - C5154 * C230 + C32167 * C246 - C5155 * C231 +
            C32137 * C247 - C5156 * C232) *
               C5152 +
           (C32180 * C235 - C5154 * C220 + C32167 * C236 - C5155 * C221 +
            C32137 * C237 - C5156 * C222) *
               C5159 +
           (C32180 * C250 - C5154 * C240 + C32167 * C251 - C5155 * C241 +
            C32137 * C252 - C5156 * C242) *
               C32148) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
            C32137 * C128 - C5156 * C121) *
               C5157 +
           (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
            C32137 * C142 - C5156 * C133) *
               C5151 +
           (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C5158 +
           (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C5152 +
           C5315 * C5159 + C5316 * C32148) *
              C31876 * C31835 * C209 +
          ((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C5157 +
           (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C5151 +
           (C5284 - C5283 + C5286 - C5285 + C5288 - C5287) * C5158 +
           (C5290 - C5289 + C5292 - C5291 + C5294 - C5293) * C5152 +
           (C5295 - C5296 + C5297 - C5298 + C5299 - C5300) * C5159 +
           (C5301 - C5302 + C5303 - C5304 + C5305 - C5306) * C32148) *
              C31876 * C31835 * C210 +
          (C5315 * C5157 + C5316 * C5151 +
           (C5296 - C5295 + C5298 - C5297 + C5300 - C5299) * C5158 +
           (C5302 - C5301 + C5304 - C5303 + C5306 - C5305) * C5152 +
           (C32180 * C882 - C5154 * C873 + C32167 * C883 - C5155 * C874 +
            C32137 * C884 - C5156 * C875) *
               C5159 +
           (C32180 * C891 - C5154 * C885 + C32167 * C892 - C5155 * C886 +
            C32137 * C893 - C5156 * C887) *
               C32148) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C31772 * C126 - C5980 * C119) * C5981 +
           (C31772 * C140 - C5980 * C131) * C5975 +
           (C31772 * C223 - C5980 * C213) * C5982 +
           (C31772 * C243 - C5980 * C228) * C5976 +
           (C31772 * C233 - C5980 * C218) * C5983 +
           (C31772 * C248 - C5980 * C238) * C5977 +
           (C31772 * C876 - C5980 * C870) * C5984 +
           (C31772 * C888 - C5980 * C879) * C5978 +
           (C31772 * C882 - C5980 * C873) * C5985 +
           (C31772 * C891 - C5980 * C885) * C5979) *
              C31876 * C31835 * C31821 * C110 +
          ((C5980 * C120 - C31772 * C127) * C5981 +
           (C5980 * C132 - C31772 * C141) * C5975 +
           (C5980 * C214 - C31772 * C224) * C5982 +
           (C5980 * C229 - C31772 * C244) * C5976 +
           (C5980 * C219 - C31772 * C234) * C5983 +
           (C5980 * C239 - C31772 * C249) * C5977 +
           (C5980 * C871 - C31772 * C877) * C5984 +
           (C5980 * C880 - C31772 * C889) * C5978 +
           (C5980 * C874 - C31772 * C883) * C5985 +
           (C5980 * C886 - C31772 * C892) * C5979) *
              C31876 * C31835 * C31821 * C111 +
          ((C31772 * C128 - C5980 * C121) * C5981 +
           (C31772 * C142 - C5980 * C133) * C5975 +
           (C31772 * C225 - C5980 * C215) * C5982 +
           (C31772 * C245 - C5980 * C230) * C5976 +
           (C31772 * C235 - C5980 * C220) * C5983 +
           (C31772 * C250 - C5980 * C240) * C5977 +
           (C31772 * C878 - C5980 * C872) * C5984 +
           (C31772 * C890 - C5980 * C881) * C5978 +
           (C31772 * C884 - C5980 * C875) * C5985 +
           (C31772 * C893 - C5980 * C887) * C5979) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C31772 * C126 - C5980 * C119) * C5981 +
           (C31772 * C140 - C5980 * C131) * C5975 + (C6057 - C6058) * C5982 +
           (C6059 - C6060) * C5976 + C6077 * C5983 + C6078 * C5977 +
           C6079 * C5984 + C6080 * C5978 + C6081 * C5985 + C6082 * C5979) *
              C31876 * C31835 * C209 +
          ((C6058 - C6057) * C5981 + (C6060 - C6059) * C5975 +
           (C6062 - C6061) * C5982 + (C6064 - C6063) * C5976 +
           (C6066 - C6065) * C5983 + (C6068 - C6067) * C5977 +
           (C6070 - C6069) * C5984 + (C6072 - C6071) * C5978 +
           (C6073 - C6074) * C5985 + (C6075 - C6076) * C5979) *
              C31876 * C31835 * C210 +
          (C6077 * C5981 + C6078 * C5975 + C6079 * C5982 + C6080 * C5976 +
           C6081 * C5983 + C6082 * C5977 + (C6074 - C6073) * C5984 +
           (C6076 - C6075) * C5978 + (C31772 * C6052 - C5980 * C6049) * C5985 +
           (C31772 * C6055 - C5980 * C6053) * C5979) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C118 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C31864) *
               C10013 +
           ((C32180 * C328 - C5154 * C318 + C32167 * C329 - C5155 * C319 +
             C32137 * C330 - C5156 * C320) *
                C118 +
            (C32180 * C348 - C5154 * C333 + C32167 * C349 - C5155 * C334 +
             C32137 * C350 - C5156 * C335) *
                C31864) *
               C10014 +
           ((C32180 * C338 - C5154 * C323 + C32167 * C339 - C5155 * C324 +
             C32137 * C340 - C5156 * C325) *
                C118 +
            (C32180 * C353 - C5154 * C343 + C32167 * C354 - C5155 * C344 +
             C32137 * C355 - C5156 * C345) *
                C31864) *
               C32151) *
              C31835 * C31821 * C110 +
          (((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
             C5156 * C122 - C32137 * C129) *
                C118 +
            (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
             C5156 * C134 - C32137 * C143) *
                C31864) *
               C10013 +
           ((C5154 * C319 - C32180 * C329 + C5155 * C320 - C32167 * C330 +
             C5156 * C321 - C32137 * C331) *
                C118 +
            (C5154 * C334 - C32180 * C349 + C5155 * C335 - C32167 * C350 +
             C5156 * C336 - C32137 * C351) *
                C31864) *
               C10014 +
           ((C5154 * C324 - C32180 * C339 + C5155 * C325 - C32167 * C340 +
             C5156 * C326 - C32137 * C341) *
                C118 +
            (C5154 * C344 - C32180 * C354 + C5155 * C345 - C32167 * C355 +
             C5156 * C346 - C32137 * C356) *
                C31864) *
               C32151) *
              C31835 * C31821 * C111 +
          (((C32180 * C128 - C5154 * C121 + C32167 * C129 - C5155 * C122 +
             C32137 * C130 - C5156 * C123) *
                C118 +
            (C32180 * C142 - C5154 * C133 + C32167 * C143 - C5155 * C134 +
             C32137 * C144 - C5156 * C135) *
                C31864) *
               C10013 +
           ((C32180 * C330 - C5154 * C320 + C32167 * C331 - C5155 * C321 +
             C32137 * C332 - C5156 * C322) *
                C118 +
            (C32180 * C350 - C5154 * C335 + C32167 * C351 - C5155 * C336 +
             C32137 * C352 - C5156 * C337) *
                C31864) *
               C10014 +
           ((C32180 * C340 - C5154 * C325 + C32167 * C341 - C5155 * C326 +
             C32137 * C342 - C5156 * C327) *
                C118 +
            (C32180 * C355 - C5154 * C345 + C32167 * C356 - C5155 * C346 +
             C32137 * C357 - C5156 * C347) *
                C31864) *
               C32151) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C118 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C31864) *
               C10013 +
           ((C32180 * C328 - C5154 * C318 + C32167 * C329 - C5155 * C319 +
             C32137 * C330 - C5156 * C320) *
                C118 +
            (C32180 * C348 - C5154 * C333 + C32167 * C349 - C5155 * C334 +
             C32137 * C350 - C5156 * C335) *
                C31864) *
               C10014 +
           ((C32180 * C338 - C5154 * C323 + C32167 * C339 - C5155 * C324 +
             C32137 * C340 - C5156 * C325) *
                C118 +
            (C32180 * C353 - C5154 * C343 + C32167 * C354 - C5155 * C344 +
             C32137 * C355 - C5156 * C345) *
                C31864) *
               C32151) *
              C31835 * C209 +
          (((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C118 +
            (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C31864) *
               C10013 +
           ((C5889 - C5890 + C5891 - C5892 + C5893 - C5894) * C118 +
            (C5895 - C5896 + C5897 - C5898 + C5899 - C5900) * C31864) *
               C10014 +
           ((C5154 * C1053 - C32180 * C1065 + C5155 * C1054 - C32167 * C1066 +
             C5156 * C1055 - C32137 * C1067) *
                C118 +
            (C5154 * C1068 - C32180 * C1080 + C5155 * C1069 - C32167 * C1081 +
             C5156 * C1070 - C32137 * C1082) *
                C31864) *
               C32151) *
              C31835 * C210 +
          ((C5315 * C118 + C5316 * C31864) * C10013 +
           ((C5902 - C5901 + C5904 - C5903 + C5906 - C5905) * C118 +
            (C5908 - C5907 + C5910 - C5909 + C5912 - C5911) * C31864) *
               C10014 +
           ((C32180 * C1071 - C5154 * C1056 + C32167 * C1072 - C5155 * C1057 +
             C32137 * C1073 - C5156 * C1058) *
                C118 +
            (C32180 * C1083 - C5154 * C1074 + C32167 * C1084 - C5155 * C1075 +
             C32137 * C1085 - C5156 * C1076) *
                C31864) *
               C32151) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C757 +
            (C31772 * C140 - C5980 * C131) * C32183 + (C6057 - C6058) * C758 +
            (C6059 - C6060) * C32171 + C6077 * C759 + C6078 * C32148) *
               C10013 +
           ((C6805 - C6806) * C757 + (C6807 - C6808) * C32183 + C7314 * C758 +
            C7315 * C32171 + C6667 * C759 + C6668 * C32148) *
               C10014 +
           (C6829 * C757 + C6830 * C32183 + C6813 * C758 + C6814 * C32171 +
            C6681 * C759 + C6682 * C32148) *
               C32151) *
              C31835 * C31821 * C110 +
          (((C5980 * C120 - C31772 * C127) * C757 +
            (C5980 * C132 - C31772 * C141) * C32183 + (C6243 - C6244) * C758 +
            (C6245 - C6246) * C32171 + (C6247 - C6248) * C759 +
            (C6249 - C6250) * C32148) *
               C10013 +
           ((C7156 - C7157) * C757 + (C7158 - C7159) * C32183 +
            (C6990 - C6991) * C758 + (C6992 - C6993) * C32171 +
            (C6994 - C6995) * C759 + (C6996 - C6997) * C32148) *
               C10014 +
           ((C7160 - C7161) * C757 + (C7162 - C7163) * C32183 +
            (C6998 - C6999) * C758 + (C7000 - C7001) * C32171 +
            (C7002 - C7003) * C759 + (C7004 - C7005) * C32148) *
               C32151) *
              C31835 * C31821 * C111 +
          (((C31772 * C128 - C5980 * C121) * C757 +
            (C31772 * C142 - C5980 * C133) * C32183 +
            (C31772 * C225 - C5980 * C215) * C758 +
            (C31772 * C245 - C5980 * C230) * C32171 +
            (C31772 * C235 - C5980 * C220) * C759 +
            (C31772 * C250 - C5980 * C240) * C32148) *
               C10013 +
           ((C31772 * C330 - C5980 * C320) * C757 +
            (C31772 * C350 - C5980 * C335) * C32183 +
            (C31772 * C625 - C5980 * C620) * C758 +
            (C31772 * C635 - C5980 * C630) * C32171 +
            (C31772 * C1061 - C5980 * C1052) * C759 +
            (C31772 * C1079 - C5980 * C1064) * C32148) *
               C10014 +
           ((C31772 * C340 - C5980 * C325) * C757 +
            (C31772 * C355 - C5980 * C345) * C32183 +
            (C31772 * C1067 - C5980 * C1055) * C758 +
            (C31772 * C1082 - C5980 * C1070) * C32171 +
            (C31772 * C1073 - C5980 * C1058) * C759 +
            (C31772 * C1085 - C5980 * C1076) * C32148) *
               C32151) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C757 +
            (C31772 * C140 - C5980 * C131) * C32183 + (C6057 - C6058) * C758 +
            (C6059 - C6060) * C32171 + C6077 * C759 + C6078 * C32148) *
               C10013 +
           ((C6805 - C6806) * C757 + (C6807 - C6808) * C32183 + C7314 * C758 +
            C7315 * C32171 + C6667 * C759 + C6668 * C32148) *
               C10014 +
           (C6829 * C757 + C6830 * C32183 + C6813 * C758 + C6814 * C32171 +
            C6681 * C759 + C6682 * C32148) *
               C32151) *
              C31835 * C209 +
          (((C6058 - C6057) * C757 + (C6060 - C6059) * C32183 +
            (C6062 - C6061) * C758 + (C6064 - C6063) * C32171 +
            (C6066 - C6065) * C759 + (C6068 - C6067) * C32148) *
               C10013 +
           (C7316 * C757 + C7317 * C32183 + C7318 * C758 + C7319 * C32171 +
            C9902 * C759 + C9903 * C32148) *
               C10014 +
           (C7320 * C757 + C7321 * C32183 + C7322 * C758 + C7323 * C32171 +
            (C6677 - C6678) * C759 + (C6679 - C6680) * C32148) *
               C32151) *
              C31835 * C210 +
          ((C6077 * C757 + C6078 * C32183 + C6079 * C758 + C6080 * C32171 +
            C6081 * C759 + C6082 * C32148) *
               C10013 +
           (C6667 * C757 + C6668 * C32183 + C9408 * C758 + C9409 * C32171 +
            (C6444 - C6443) * C759 + (C6446 - C6445) * C32148) *
               C10014 +
           (C6681 * C757 + C6682 * C32183 + (C6678 - C6677) * C758 +
            (C6680 - C6679) * C32171 + (C31772 * C6151 - C5980 * C6146) * C759 +
            (C31772 * C6155 - C5980 * C6152) * C32148) *
               C32151) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
              C17324 * C128 - C30889 * C121) *
                 C2600 +
             (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
              C17324 * C142 - C30889 * C133) *
                 C32117 +
             (C17445 - C17446 + C17447 - C17448 + C17449 - C17450) * C2601 +
             (C17451 - C17452 + C17453 - C17454 + C17455 - C17456) * C31923) *
                C20324 +
            ((C18525 - C18526 + C18527 - C18528 + C18529 - C18530) * C2600 +
             (C18531 - C18532 + C18533 - C18534 + C18535 - C18536) * C32117 +
             C19183 * C2601 + C19184 * C31923) *
                C31963) *
               C31835 * C440 +
           (((C17446 - C17445 + C17448 - C17447 + C17450 - C17449) * C2600 +
             (C17452 - C17451 + C17454 - C17453 + C17456 - C17455) * C32117 +
             (C17458 - C17457 + C17460 - C17459 + C17462 - C17461) * C2601 +
             (C17464 - C17463 + C17466 - C17465 + C17468 - C17467) * C31923) *
                C20324 +
            (C19185 * C2600 + C19186 * C32117 +
             (C18075 - C18076 + C18077 - C18078 + C18079 - C18080) * C2601 +
             (C18081 - C18082 + C18083 - C18084 + C18085 - C18086) * C31923) *
                C31963) *
               C31835 * C441) *
              C442 +
          ((((C30883 * C120 - C31777 * C127 + C30879 * C121 - C31785 * C128 +
              C30889 * C122 - C17324 * C129) *
                 C2600 +
             (C30883 * C132 - C31777 * C141 + C30879 * C133 - C31785 * C142 +
              C30889 * C134 - C17324 * C143) *
                 C32117 +
             (C17747 - C17748 + C17749 - C17750 + C17751 - C17752) * C2601 +
             (C17753 - C17754 + C17755 - C17756 + C17757 - C17758) * C31923) *
                C20324 +
            ((C18961 - C18962 + C18963 - C18964 + C18965 - C18966) * C2600 +
             (C18967 - C18968 + C18969 - C18970 + C18971 - C18972) * C32117 +
             (C18755 - C18756 + C18757 - C18758 + C18759 - C18760) * C2601 +
             (C18761 - C18762 + C18763 - C18764 + C18765 - C18766) * C31923) *
                C31963) *
               C31835 * C440 +
           (((C17748 - C17747 + C17750 - C17749 + C17752 - C17751) * C2600 +
             (C17754 - C17753 + C17756 - C17755 + C17758 - C17757) * C32117 +
             (C17760 - C17759 + C17762 - C17761 + C17764 - C17763) * C2601 +
             (C17766 - C17765 + C17768 - C17767 + C17770 - C17769) * C31923) *
                C20324 +
            ((C18756 - C18755 + C18758 - C18757 + C18760 - C18759) * C2600 +
             (C18762 - C18761 + C18764 - C18763 + C18766 - C18765) * C32117 +
             (C31777 * C1060 - C30883 * C1051 + C31785 * C1061 -
              C30879 * C1052 + C17324 * C1407 - C30889 * C1406) *
                 C2601 +
             (C31777 * C1078 - C30883 * C1063 + C31785 * C1079 -
              C30879 * C1064 + C17324 * C1409 - C30889 * C1408) *
                 C31923) *
                C31963) *
               C31835 * C441) *
              C443)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
              C17324 * C128 - C30889 * C121) *
                 C2600 +
             (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
              C17324 * C142 - C30889 * C133) *
                 C32117 +
             (C17445 - C17446 + C17447 - C17448 + C17449 - C17450) * C2601 +
             (C17451 - C17452 + C17453 - C17454 + C17455 - C17456) * C31923) *
                C20324 +
            ((C18525 - C18526 + C18527 - C18528 + C18529 - C18530) * C2600 +
             (C18531 - C18532 + C18533 - C18534 + C18535 - C18536) * C32117 +
             C19183 * C2601 + C19184 * C31923) *
                C31963) *
               C530 +
           (((C18526 - C18525 + C18528 - C18527 + C18530 - C18529) * C2600 +
             (C18532 - C18531 + C18534 - C18533 + C18536 - C18535) * C32117 +
             C19185 * C2601 + C19186 * C31923) *
                C20324 +
            ((C18537 - C18538 + C18539 - C18540 + C18541 - C18542) * C2600 +
             (C18543 - C18544 + C18545 - C18546 + C18547 - C18548) * C32117 +
             (C18549 - C18550 + C18551 - C18552 + C18553 - C18554) * C2601 +
             (C18555 - C18556 + C18557 - C18558 + C18559 - C18560) * C31923) *
                C31963) *
               C531) *
              C440 +
          ((((C17446 - C17445 + C17448 - C17447 + C17450 - C17449) * C2600 +
             (C17452 - C17451 + C17454 - C17453 + C17456 - C17455) * C32117 +
             (C17458 - C17457 + C17460 - C17459 + C17462 - C17461) * C2601 +
             (C17464 - C17463 + C17466 - C17465 + C17468 - C17467) * C31923) *
                C20324 +
            (C19185 * C2600 + C19186 * C32117 +
             (C18075 - C18076 + C18077 - C18078 + C18079 - C18080) * C2601 +
             (C18081 - C18082 + C18083 - C18084 + C18085 - C18086) * C31923) *
                C31963) *
               C530 +
           ((C19183 * C2600 + C19184 * C32117 +
             (C18076 - C18075 + C18078 - C18077 + C18080 - C18079) * C2601 +
             (C18082 - C18081 + C18084 - C18083 + C18086 - C18085) * C31923) *
                C20324 +
            ((C18550 - C18549 + C18552 - C18551 + C18554 - C18553) * C2600 +
             (C18556 - C18555 + C18558 - C18557 + C18560 - C18559) * C32117 +
             (C31777 * C1071 - C30883 * C1056 + C31785 * C1072 -
              C30879 * C1057 + C17324 * C1073 - C30889 * C1058) *
                 C2601 +
             (C31777 * C1083 - C30883 * C1074 + C31785 * C1084 -
              C30879 * C1075 + C17324 * C1085 - C30889 * C1076) *
                 C31923) *
                C31963) *
               C531) *
              C441) *
         C31809) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
             C17324 * C128 - C30889 * C121) *
                C2600 +
            (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
             C17324 * C142 - C30889 * C133) *
                C32117 +
            (C17445 - C17446 + C17447 - C17448 + C17449 - C17450) * C2601 +
            (C17451 - C17452 + C17453 - C17454 + C17455 - C17456) * C31923) *
               C20324 +
           ((C18525 - C18526 + C18527 - C18528 + C18529 - C18530) * C2600 +
            (C18531 - C18532 + C18533 - C18534 + C18535 - C18536) * C32117 +
            C19183 * C2601 + C19184 * C31923) *
               C31963) *
              C31835 * C209 +
          (((C17446 - C17445 + C17448 - C17447 + C17450 - C17449) * C2600 +
            (C17452 - C17451 + C17454 - C17453 + C17456 - C17455) * C32117 +
            (C17458 - C17457 + C17460 - C17459 + C17462 - C17461) * C2601 +
            (C17464 - C17463 + C17466 - C17465 + C17468 - C17467) * C31923) *
               C20324 +
           (C19185 * C2600 + C19186 * C32117 +
            (C18075 - C18076 + C18077 - C18078 + C18079 - C18080) * C2601 +
            (C18081 - C18082 + C18083 - C18084 + C18085 - C18086) * C31923) *
               C31963) *
              C31835 * C210 +
          ((C17489 * C2600 + C17490 * C32117 +
            (C17470 - C17469 + C17472 - C17471 + C17474 - C17473) * C2601 +
            (C17476 - C17475 + C17478 - C17477 + C17480 - C17479) * C31923) *
               C20324 +
           ((C18076 - C18075 + C18078 - C18077 + C18080 - C18079) * C2600 +
            (C18082 - C18081 + C18084 - C18083 + C18086 - C18085) * C32117 +
            (C31777 * C1559 - C30883 * C1556 + C31785 * C1560 - C30879 * C1557 +
             C17324 * C1561 - C30889 * C1558) *
                C2601 +
            (C31777 * C1565 - C30883 * C1562 + C31785 * C1566 - C30879 * C1563 +
             C17324 * C1567 - C30889 * C1564) *
                C31923) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
             C17324 * C128 - C30889 * C121) *
                C2600 +
            (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
             C17324 * C142 - C30889 * C133) *
                C32117 +
            (C17445 - C17446 + C17447 - C17448 + C17449 - C17450) * C2601 +
            (C17451 - C17452 + C17453 - C17454 + C17455 - C17456) * C31923) *
               C20324 +
           ((C18525 - C18526 + C18527 - C18528 + C18529 - C18530) * C2600 +
            (C18531 - C18532 + C18533 - C18534 + C18535 - C18536) * C32117 +
            C19183 * C2601 + C19184 * C31923) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C30883 * C120 - C31777 * C127 + C30879 * C121 - C31785 * C128 +
             C30889 * C122 - C17324 * C129) *
                C2600 +
            (C30883 * C132 - C31777 * C141 + C30879 * C133 - C31785 * C142 +
             C30889 * C134 - C17324 * C143) *
                C32117 +
            (C17747 - C17748 + C17749 - C17750 + C17751 - C17752) * C2601 +
            (C17753 - C17754 + C17755 - C17756 + C17757 - C17758) * C31923) *
               C20324 +
           ((C18961 - C18962 + C18963 - C18964 + C18965 - C18966) * C2600 +
            (C18967 - C18968 + C18969 - C18970 + C18971 - C18972) * C32117 +
            (C18755 - C18756 + C18757 - C18758 + C18759 - C18760) * C2601 +
            (C18761 - C18762 + C18763 - C18764 + C18765 - C18766) * C31923) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C31777 * C128 - C30883 * C121 + C31785 * C129 - C30879 * C122 +
             C17324 * C130 - C30889 * C123) *
                C2600 +
            (C31777 * C142 - C30883 * C133 + C31785 * C143 - C30879 * C134 +
             C17324 * C144 - C30889 * C135) *
                C32117 +
            (C31777 * C225 - C30883 * C215 + C31785 * C226 - C30879 * C216 +
             C17324 * C227 - C30889 * C217) *
                C2601 +
            (C31777 * C245 - C30883 * C230 + C31785 * C246 - C30879 * C231 +
             C17324 * C247 - C30889 * C232) *
                C31923) *
               C20324 +
           ((C31777 * C330 - C30883 * C320 + C31785 * C331 - C30879 * C321 +
             C17324 * C332 - C30889 * C322) *
                C2600 +
            (C31777 * C350 - C30883 * C335 + C31785 * C351 - C30879 * C336 +
             C17324 * C352 - C30889 * C337) *
                C32117 +
            (C31777 * C625 - C30883 * C620 + C31785 * C626 - C30879 * C621 +
             C17324 * C627 - C30889 * C622) *
                C2601 +
            (C31777 * C635 - C30883 * C630 + C31785 * C636 - C30879 * C631 +
             C17324 * C637 - C30889 * C632) *
                C31923) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
             C17324 * C128 - C30889 * C121) *
                C2600 +
            (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
             C17324 * C142 - C30889 * C133) *
                C32117 +
            (C17445 - C17446 + C17447 - C17448 + C17449 - C17450) * C2601 +
            (C17451 - C17452 + C17453 - C17454 + C17455 - C17456) * C31923) *
               C20324 +
           ((C18525 - C18526 + C18527 - C18528 + C18529 - C18530) * C2600 +
            (C18531 - C18532 + C18533 - C18534 + C18535 - C18536) * C32117 +
            C19183 * C2601 + C19184 * C31923) *
               C31963) *
              C315 +
          (((C18526 - C18525 + C18528 - C18527 + C18530 - C18529) * C2600 +
            (C18532 - C18531 + C18534 - C18533 + C18536 - C18535) * C32117 +
            C19185 * C2601 + C19186 * C31923) *
               C20324 +
           ((C18537 - C18538 + C18539 - C18540 + C18541 - C18542) * C2600 +
            (C18543 - C18544 + C18545 - C18546 + C18547 - C18548) * C32117 +
            (C18549 - C18550 + C18551 - C18552 + C18553 - C18554) * C2601 +
            (C18555 - C18556 + C18557 - C18558 + C18559 - C18560) * C31923) *
               C31963) *
              C316 +
          (((C18538 - C18537 + C18540 - C18539 + C18542 - C18541) * C2600 +
            (C18544 - C18543 + C18546 - C18545 + C18548 - C18547) * C32117 +
            (C18550 - C18549 + C18552 - C18551 + C18554 - C18553) * C2601 +
            (C18556 - C18555 + C18558 - C18557 + C18560 - C18559) * C31923) *
               C20324 +
           ((C31777 * C1931 - C30883 * C1925 + C31785 * C1932 - C30879 * C1926 +
             C17324 * C1933 - C30889 * C1927) *
                C2600 +
            (C31777 * C1943 - C30883 * C1934 + C31785 * C1944 - C30879 * C1935 +
             C17324 * C1945 - C30889 * C1936) *
                C32117 +
            (C31777 * C2471 - C30883 * C2468 + C31785 * C2472 - C30879 * C2469 +
             C17324 * C2473 - C30889 * C2470) *
                C2601 +
            (C31777 * C2477 - C30883 * C2474 + C31785 * C2478 - C30879 * C2475 +
             C17324 * C2479 - C30889 * C2476) *
                C31923) *
               C31963) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
              C17324 * C128 - C30889 * C121) *
                 C2600 +
             (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
              C17324 * C142 - C30889 * C133) *
                 C32117 +
             (C17445 - C17446 + C17447 - C17448 + C17449 - C17450) * C2601 +
             (C17451 - C17452 + C17453 - C17454 + C17455 - C17456) * C31923) *
                C20324 +
            ((C18525 - C18526 + C18527 - C18528 + C18529 - C18530) * C2600 +
             (C18531 - C18532 + C18533 - C18534 + C18535 - C18536) * C32117 +
             C19183 * C2601 + C19184 * C31923) *
                C31963) *
               C530 +
           (((C18526 - C18525 + C18528 - C18527 + C18530 - C18529) * C2600 +
             (C18532 - C18531 + C18534 - C18533 + C18536 - C18535) * C32117 +
             C19185 * C2601 + C19186 * C31923) *
                C20324 +
            ((C18537 - C18538 + C18539 - C18540 + C18541 - C18542) * C2600 +
             (C18543 - C18544 + C18545 - C18546 + C18547 - C18548) * C32117 +
             (C18549 - C18550 + C18551 - C18552 + C18553 - C18554) * C2601 +
             (C18555 - C18556 + C18557 - C18558 + C18559 - C18560) * C31923) *
                C31963) *
               C531) *
              C31821 * C442 +
          ((((C30883 * C120 - C31777 * C127 + C30879 * C121 - C31785 * C128 +
              C30889 * C122 - C17324 * C129) *
                 C2600 +
             (C30883 * C132 - C31777 * C141 + C30879 * C133 - C31785 * C142 +
              C30889 * C134 - C17324 * C143) *
                 C32117 +
             (C17747 - C17748 + C17749 - C17750 + C17751 - C17752) * C2601 +
             (C17753 - C17754 + C17755 - C17756 + C17757 - C17758) * C31923) *
                C20324 +
            ((C18961 - C18962 + C18963 - C18964 + C18965 - C18966) * C2600 +
             (C18967 - C18968 + C18969 - C18970 + C18971 - C18972) * C32117 +
             (C18755 - C18756 + C18757 - C18758 + C18759 - C18760) * C2601 +
             (C18761 - C18762 + C18763 - C18764 + C18765 - C18766) * C31923) *
                C31963) *
               C530 +
           (((C18962 - C18961 + C18964 - C18963 + C18966 - C18965) * C2600 +
             (C18968 - C18967 + C18970 - C18969 + C18972 - C18971) * C32117 +
             (C18756 - C18755 + C18758 - C18757 + C18760 - C18759) * C2601 +
             (C18762 - C18761 + C18764 - C18763 + C18766 - C18765) * C31923) *
                C20324 +
            ((C31777 * C339 - C30883 * C324 + C31785 * C340 - C30879 * C325 +
              C17324 * C341 - C30889 * C326) *
                 C2600 +
             (C31777 * C354 - C30883 * C344 + C31785 * C355 - C30879 * C345 +
              C17324 * C356 - C30889 * C346) *
                 C32117 +
             (C31777 * C1066 - C30883 * C1054 + C31785 * C1067 -
              C30879 * C1055 + C17324 * C2145 - C30889 * C2144) *
                 C2601 +
             (C31777 * C1081 - C30883 * C1069 + C31785 * C1082 -
              C30879 * C1070 + C17324 * C2147 - C30889 * C2146) *
                 C31923) *
                C31963) *
               C531) *
              C31821 * C443)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
             C17324 * C128 - C30889 * C121) *
                C2600 +
            (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
             C17324 * C142 - C30889 * C133) *
                C32117 +
            (C17445 - C17446 + C17447 - C17448 + C17449 - C17450) * C2601 +
            (C17451 - C17452 + C17453 - C17454 + C17455 - C17456) * C31923) *
               C20324 +
           ((C18525 - C18526 + C18527 - C18528 + C18529 - C18530) * C2600 +
            (C18531 - C18532 + C18533 - C18534 + C18535 - C18536) * C32117 +
            C19183 * C2601 + C19184 * C31923) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C30883 * C120 - C31777 * C127 + C30879 * C121 - C31785 * C128 +
             C30889 * C122 - C17324 * C129) *
                C2600 +
            (C30883 * C132 - C31777 * C141 + C30879 * C133 - C31785 * C142 +
             C30889 * C134 - C17324 * C143) *
                C32117 +
            (C17747 - C17748 + C17749 - C17750 + C17751 - C17752) * C2601 +
            (C17753 - C17754 + C17755 - C17756 + C17757 - C17758) * C31923) *
               C20324 +
           ((C18961 - C18962 + C18963 - C18964 + C18965 - C18966) * C2600 +
            (C18967 - C18968 + C18969 - C18970 + C18971 - C18972) * C32117 +
            (C18755 - C18756 + C18757 - C18758 + C18759 - C18760) * C2601 +
            (C18761 - C18762 + C18763 - C18764 + C18765 - C18766) * C31923) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C31777 * C128 - C30883 * C121 + C31785 * C129 - C30879 * C122 +
             C17324 * C130 - C30889 * C123) *
                C2600 +
            (C31777 * C142 - C30883 * C133 + C31785 * C143 - C30879 * C134 +
             C17324 * C144 - C30889 * C135) *
                C32117 +
            (C31777 * C225 - C30883 * C215 + C31785 * C226 - C30879 * C216 +
             C17324 * C227 - C30889 * C217) *
                C2601 +
            (C31777 * C245 - C30883 * C230 + C31785 * C246 - C30879 * C231 +
             C17324 * C247 - C30889 * C232) *
                C31923) *
               C20324 +
           ((C31777 * C330 - C30883 * C320 + C31785 * C331 - C30879 * C321 +
             C17324 * C332 - C30889 * C322) *
                C2600 +
            (C31777 * C350 - C30883 * C335 + C31785 * C351 - C30879 * C336 +
             C17324 * C352 - C30889 * C337) *
                C32117 +
            (C31777 * C625 - C30883 * C620 + C31785 * C626 - C30879 * C621 +
             C17324 * C627 - C30889 * C622) *
                C2601 +
            (C31777 * C635 - C30883 * C630 + C31785 * C636 - C30879 * C631 +
             C17324 * C637 - C30889 * C632) *
                C31923) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
             C17324 * C128 - C30889 * C121) *
                C2600 +
            (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
             C17324 * C142 - C30889 * C133) *
                C32117 +
            (C17445 - C17446 + C17447 - C17448 + C17449 - C17450) * C2601 +
            (C17451 - C17452 + C17453 - C17454 + C17455 - C17456) * C31923) *
               C20324 +
           ((C18525 - C18526 + C18527 - C18528 + C18529 - C18530) * C2600 +
            (C18531 - C18532 + C18533 - C18534 + C18535 - C18536) * C32117 +
            C19183 * C2601 + C19184 * C31923) *
               C31963) *
              C31835 * C209 +
          (((C17446 - C17445 + C17448 - C17447 + C17450 - C17449) * C2600 +
            (C17452 - C17451 + C17454 - C17453 + C17456 - C17455) * C32117 +
            (C17458 - C17457 + C17460 - C17459 + C17462 - C17461) * C2601 +
            (C17464 - C17463 + C17466 - C17465 + C17468 - C17467) * C31923) *
               C20324 +
           (C19185 * C2600 + C19186 * C32117 +
            (C18075 - C18076 + C18077 - C18078 + C18079 - C18080) * C2601 +
            (C18081 - C18082 + C18083 - C18084 + C18085 - C18086) * C31923) *
               C31963) *
              C31835 * C210 +
          ((C17489 * C2600 + C17490 * C32117 +
            (C17470 - C17469 + C17472 - C17471 + C17474 - C17473) * C2601 +
            (C17476 - C17475 + C17478 - C17477 + C17480 - C17479) * C31923) *
               C20324 +
           ((C18076 - C18075 + C18078 - C18077 + C18080 - C18079) * C2600 +
            (C18082 - C18081 + C18084 - C18083 + C18086 - C18085) * C32117 +
            (C31777 * C1559 - C30883 * C1556 + C31785 * C1560 - C30879 * C1557 +
             C17324 * C1561 - C30889 * C1558) *
                C2601 +
            (C31777 * C1565 - C30883 * C1562 + C31785 * C1566 - C30879 * C1563 +
             C17324 * C1567 - C30889 * C1564) *
                C31923) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                 C2600 +
             (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                 C32117 +
             (C15496 - C15497 + C15498 - C15499) * C2601 +
             (C15500 - C15501 + C15502 - C15503) * C31923) *
                C31959 +
            ((C16530 - C16531 + C16532 - C16533) * C2600 +
             (C16534 - C16535 + C16536 - C16537) * C32117 + C17207 * C2601 +
             C17208 * C31923) *
                C31966 +
            C24969 * C23828) *
               C31835 * C440 +
           (((C15497 - C15496 + C15499 - C15498) * C2600 +
             (C15501 - C15500 + C15503 - C15502) * C32117 +
             (C15505 - C15504 + C15507 - C15506) * C2601 +
             (C15509 - C15508 + C15511 - C15510) * C31923) *
                C31959 +
            (C17209 * C2600 + C17210 * C32117 + C20225 * C2601 +
             C20226 * C31923) *
                C31966 +
            (C17211 * C2600 + C17212 * C32117 +
             (C16376 - C16377 + C16378 - C16379) * C2601 +
             (C16380 - C16381 + C16382 - C16383) * C31923) *
                C23828) *
               C31835 * C441) *
              C442 +
          ((((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                 C2600 +
             (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                 C32117 +
             (C15768 - C15769 + C15770 - C15771) * C2601 +
             (C15772 - C15773 + C15774 - C15775) * C31923) *
                C31959 +
            ((C16985 - C16986 + C16987 - C16988) * C2600 +
             (C16989 - C16990 + C16991 - C16992) * C32117 +
             (C16775 - C16776 + C16777 - C16778) * C2601 +
             (C16779 - C16780 + C16781 - C16782) * C31923) *
                C31966 +
            ((C16993 - C16994 + C16995 - C16996) * C2600 +
             (C16997 - C16998 + C16999 - C17000) * C32117 +
             (C16783 - C16784 + C16785 - C16786) * C2601 +
             (C16787 - C16788 + C16789 - C16790) * C31923) *
                C23828) *
               C31835 * C440 +
           (((C15769 - C15768 + C15771 - C15770) * C2600 +
             (C15773 - C15772 + C15775 - C15774) * C32117 +
             (C15777 - C15776 + C15779 - C15778) * C2601 +
             (C15781 - C15780 + C15783 - C15782) * C31923) *
                C31959 +
            ((C16776 - C16775 + C16778 - C16777) * C2600 +
             (C16780 - C16779 + C16782 - C16781) * C32117 +
             (C19826 - C19825 + C19828 - C19827) * C2601 +
             (C19830 - C19829 + C19832 - C19831) * C31923) *
                C31966 +
            ((C16784 - C16783 + C16786 - C16785) * C2600 +
             (C16788 - C16787 + C16790 - C16789) * C32117 +
             (C15385 * C1072 - C15391 * C1057 + C31782 * C1073 -
              C15392 * C1058) *
                 C2601 +
             (C15385 * C1084 - C15391 * C1075 + C31782 * C1085 -
              C15392 * C1076) *
                 C31923) *
                C23828) *
               C31835 * C441) *
              C443)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                 C2600 +
             (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                 C32117 +
             (C15496 - C15497 + C15498 - C15499) * C2601 +
             (C15500 - C15501 + C15502 - C15503) * C31923) *
                C31959 +
            ((C16530 - C16531 + C16532 - C16533) * C2600 +
             (C16534 - C16535 + C16536 - C16537) * C32117 + C17207 * C2601 +
             C17208 * C31923) *
                C31966 +
            C24969 * C23828) *
               C530 +
           (((C16531 - C16530 + C16533 - C16532) * C2600 +
             (C16535 - C16534 + C16537 - C16536) * C32117 + C17209 * C2601 +
             C17210 * C31923) *
                C31959 +
            ((C16539 - C16538 + C16541 - C16540) * C2600 +
             (C16543 - C16542 + C16545 - C16544) * C32117 + C17211 * C2601 +
             C17212 * C31923) *
                C31966 +
            ((C16550 - C16551 + C16552 - C16553) * C2600 +
             (C16554 - C16555 + C16556 - C16557) * C32117 +
             (C16558 - C16559 + C16560 - C16561) * C2601 +
             (C16562 - C16563 + C16564 - C16565) * C31923) *
                C23828) *
               C531) *
              C440 +
          ((((C15497 - C15496 + C15499 - C15498) * C2600 +
             (C15501 - C15500 + C15503 - C15502) * C32117 +
             (C15505 - C15504 + C15507 - C15506) * C2601 +
             (C15509 - C15508 + C15511 - C15510) * C31923) *
                C31959 +
            (C17209 * C2600 + C17210 * C32117 + C20225 * C2601 +
             C20226 * C31923) *
                C31966 +
            (C17211 * C2600 + C17212 * C32117 +
             (C16376 - C16377 + C16378 - C16379) * C2601 +
             (C16380 - C16381 + C16382 - C16383) * C31923) *
                C23828) *
               C530 +
           ((C17207 * C2600 + C17208 * C32117 + C19483 * C2601 +
             C19484 * C31923) *
                C31959 +
            (C16570 * C2600 + C16571 * C32117 +
             (C16377 - C16376 + C16379 - C16378) * C2601 +
             (C16381 - C16380 + C16383 - C16382) * C31923) *
                C31966 +
            ((C16559 - C16558 + C16561 - C16560) * C2600 +
             (C16563 - C16562 + C16565 - C16564) * C32117 +
             (C15385 * C6795 - C15391 * C6792 + C31782 * C7152 -
              C15392 * C7151) *
                 C2601 +
             (C15385 * C6801 - C15391 * C6796 + C31782 * C7154 -
              C15392 * C7153) *
                 C31923) *
                C23828) *
               C531) *
              C441) *
         C31809) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C2600 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C32117 +
            (C15496 - C15497 + C15498 - C15499) * C2601 +
            (C15500 - C15501 + C15502 - C15503) * C31923) *
               C31959 +
           ((C16530 - C16531 + C16532 - C16533) * C2600 +
            (C16534 - C16535 + C16536 - C16537) * C32117 + C17207 * C2601 +
            C17208 * C31923) *
               C31966 +
           (C16572 * C2600 + C16573 * C32117 + C16570 * C2601 +
            C16571 * C31923) *
               C23828) *
              C31835 * C209 +
          (((C15497 - C15496 + C15499 - C15498) * C2600 +
            (C15501 - C15500 + C15503 - C15502) * C32117 +
            (C15505 - C15504 + C15507 - C15506) * C2601 +
            (C15509 - C15508 + C15511 - C15510) * C31923) *
               C31959 +
           (C17209 * C2600 + C17210 * C32117 + C20225 * C2601 +
            C20226 * C31923) *
               C31966 +
           (C17211 * C2600 + C17212 * C32117 +
            (C16376 - C16377 + C16378 - C16379) * C2601 +
            (C16380 - C16381 + C16382 - C16383) * C31923) *
               C23828) *
              C31835 * C210 +
          ((C15536 * C2600 + C15537 * C32117 + C15538 * C2601 +
            C15539 * C31923) *
               C31959 +
           (C19483 * C2600 + C19484 * C32117 +
            (C16069 - C16068 + C16071 - C16070) * C2601 +
            (C16073 - C16072 + C16075 - C16074) * C31923) *
               C31966 +
           ((C16377 - C16376 + C16379 - C16378) * C2600 +
            (C16381 - C16380 + C16383 - C16382) * C32117 +
            (C15385 * C6149 - C15391 * C6145 + C31782 * C6986 -
             C15392 * C6985) *
                C2601 +
            (C15385 * C6154 - C15391 * C6150 + C31782 * C6988 -
             C15392 * C6987) *
                C31923) *
               C23828) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C2600 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C32117 +
            (C15496 - C15497 + C15498 - C15499) * C2601 +
            (C15500 - C15501 + C15502 - C15503) * C31923) *
               C31959 +
           ((C16530 - C16531 + C16532 - C16533) * C2600 +
            (C16534 - C16535 + C16536 - C16537) * C32117 + C17207 * C2601 +
            C17208 * C31923) *
               C31966 +
           (C16572 * C2600 + C16573 * C32117 + C16570 * C2601 +
            C16571 * C31923) *
               C23828) *
              C31835 * C31821 * C110 +
          (((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                C2600 +
            (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                C32117 +
            (C15768 - C15769 + C15770 - C15771) * C2601 +
            (C15772 - C15773 + C15774 - C15775) * C31923) *
               C31959 +
           ((C16985 - C16986 + C16987 - C16988) * C2600 +
            (C16989 - C16990 + C16991 - C16992) * C32117 +
            (C16775 - C16776 + C16777 - C16778) * C2601 +
            (C16779 - C16780 + C16781 - C16782) * C31923) *
               C31966 +
           ((C16993 - C16994 + C16995 - C16996) * C2600 +
            (C16997 - C16998 + C16999 - C17000) * C32117 +
            (C16783 - C16784 + C16785 - C16786) * C2601 +
            (C16787 - C16788 + C16789 - C16790) * C31923) *
               C23828) *
              C31835 * C31821 * C111 +
          (((C15385 * C128 - C15391 * C121 + C31782 * C129 - C15392 * C122) *
                C2600 +
            (C15385 * C142 - C15391 * C133 + C31782 * C143 - C15392 * C134) *
                C32117 +
            (C15385 * C225 - C15391 * C215 + C31782 * C226 - C15392 * C216) *
                C2601 +
            (C15385 * C245 - C15391 * C230 + C31782 * C246 - C15392 * C231) *
                C31923) *
               C31959 +
           ((C15385 * C330 - C15391 * C320 + C31782 * C331 - C15392 * C321) *
                C2600 +
            (C15385 * C350 - C15391 * C335 + C31782 * C351 - C15392 * C336) *
                C32117 +
            (C15385 * C625 - C15391 * C620 + C31782 * C626 - C15392 * C621) *
                C2601 +
            (C15385 * C635 - C15391 * C630 + C31782 * C636 - C15392 * C631) *
                C31923) *
               C31966 +
           ((C15385 * C340 - C15391 * C325 + C31782 * C341 - C15392 * C326) *
                C2600 +
            (C15385 * C355 - C15391 * C345 + C31782 * C356 - C15392 * C346) *
                C32117 +
            (C15385 * C1067 - C15391 * C1055 + C31782 * C2145 -
             C15392 * C2144) *
                C2601 +
            (C15385 * C1082 - C15391 * C1070 + C31782 * C2147 -
             C15392 * C2146) *
                C31923) *
               C23828) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C2600 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C32117 +
            (C15496 - C15497 + C15498 - C15499) * C2601 +
            (C15500 - C15501 + C15502 - C15503) * C31923) *
               C31959 +
           ((C16530 - C16531 + C16532 - C16533) * C2600 +
            (C16534 - C16535 + C16536 - C16537) * C32117 + C17207 * C2601 +
            C17208 * C31923) *
               C31966 +
           C24969 * C23828) *
              C315 +
          (((C16531 - C16530 + C16533 - C16532) * C2600 +
            (C16535 - C16534 + C16537 - C16536) * C32117 + C17209 * C2601 +
            C17210 * C31923) *
               C31959 +
           ((C16539 - C16538 + C16541 - C16540) * C2600 +
            (C16543 - C16542 + C16545 - C16544) * C32117 + C17211 * C2601 +
            C17212 * C31923) *
               C31966 +
           ((C16550 - C16551 + C16552 - C16553) * C2600 +
            (C16554 - C16555 + C16556 - C16557) * C32117 +
            (C16558 - C16559 + C16560 - C16561) * C2601 +
            (C16562 - C16563 + C16564 - C16565) * C31923) *
               C23828) *
              C316 +
          (C24969 * C31959 +
           (C22294 * C2600 + C22295 * C32117 +
            (C16559 - C16558 + C16561 - C16560) * C2601 +
            (C16563 - C16562 + C16565 - C16564) * C31923) *
               C31966 +
           ((C22286 - C22285 + C22288 - C22287) * C2600 +
            (C22290 - C22289 + C22292 - C22291) * C32117 +
            (C15385 * C6797 - C15391 * C6793 + C31782 * C11841 -
             C15392 * C11840) *
                C2601 +
            (C15385 * C6802 - C15391 * C6798 + C31782 * C11843 -
             C15392 * C11842) *
                C31923) *
               C23828) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                 C2600 +
             (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                 C32117 +
             (C15496 - C15497 + C15498 - C15499) * C2601 +
             (C15500 - C15501 + C15502 - C15503) * C31923) *
                C31959 +
            ((C16530 - C16531 + C16532 - C16533) * C2600 +
             (C16534 - C16535 + C16536 - C16537) * C32117 + C17207 * C2601 +
             C17208 * C31923) *
                C31966 +
            C24969 * C23828) *
               C530 +
           (((C16531 - C16530 + C16533 - C16532) * C2600 +
             (C16535 - C16534 + C16537 - C16536) * C32117 + C17209 * C2601 +
             C17210 * C31923) *
                C31959 +
            ((C16539 - C16538 + C16541 - C16540) * C2600 +
             (C16543 - C16542 + C16545 - C16544) * C32117 + C17211 * C2601 +
             C17212 * C31923) *
                C31966 +
            ((C16550 - C16551 + C16552 - C16553) * C2600 +
             (C16554 - C16555 + C16556 - C16557) * C32117 +
             (C16558 - C16559 + C16560 - C16561) * C2601 +
             (C16562 - C16563 + C16564 - C16565) * C31923) *
                C23828) *
               C531) *
              C31821 * C442 +
          ((((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                 C2600 +
             (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                 C32117 +
             (C15768 - C15769 + C15770 - C15771) * C2601 +
             (C15772 - C15773 + C15774 - C15775) * C31923) *
                C31959 +
            ((C16985 - C16986 + C16987 - C16988) * C2600 +
             (C16989 - C16990 + C16991 - C16992) * C32117 +
             (C16775 - C16776 + C16777 - C16778) * C2601 +
             (C16779 - C16780 + C16781 - C16782) * C31923) *
                C31966 +
            ((C16993 - C16994 + C16995 - C16996) * C2600 +
             (C16997 - C16998 + C16999 - C17000) * C32117 +
             (C16783 - C16784 + C16785 - C16786) * C2601 +
             (C16787 - C16788 + C16789 - C16790) * C31923) *
                C23828) *
               C530 +
           (((C16986 - C16985 + C16988 - C16987) * C2600 +
             (C16990 - C16989 + C16992 - C16991) * C32117 +
             (C16776 - C16775 + C16778 - C16777) * C2601 +
             (C16780 - C16779 + C16782 - C16781) * C31923) *
                C31959 +
            ((C16994 - C16993 + C16996 - C16995) * C2600 +
             (C16998 - C16997 + C17000 - C16999) * C32117 +
             (C16784 - C16783 + C16786 - C16785) * C2601 +
             (C16788 - C16787 + C16790 - C16789) * C31923) *
                C31966 +
            ((C22560 - C22559 + C22562 - C22561) * C2600 +
             (C22564 - C22563 + C22566 - C22565) * C32117 +
             (C15385 * C2472 - C15391 * C2469 + C31782 * C2473 -
              C15392 * C2470) *
                 C2601 +
             (C15385 * C2478 - C15391 * C2475 + C31782 * C2479 -
              C15392 * C2476) *
                 C31923) *
                C23828) *
               C531) *
              C31821 * C443)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C2600 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C32117 +
            (C15496 - C15497 + C15498 - C15499) * C2601 +
            (C15500 - C15501 + C15502 - C15503) * C31923) *
               C31959 +
           ((C16530 - C16531 + C16532 - C16533) * C2600 +
            (C16534 - C16535 + C16536 - C16537) * C32117 + C17207 * C2601 +
            C17208 * C31923) *
               C31966 +
           (C16572 * C2600 + C16573 * C32117 + C16570 * C2601 +
            C16571 * C31923) *
               C23828) *
              C31835 * C31821 * C110 +
          (((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                C2600 +
            (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                C32117 +
            (C15768 - C15769 + C15770 - C15771) * C2601 +
            (C15772 - C15773 + C15774 - C15775) * C31923) *
               C31959 +
           ((C16985 - C16986 + C16987 - C16988) * C2600 +
            (C16989 - C16990 + C16991 - C16992) * C32117 +
            (C16775 - C16776 + C16777 - C16778) * C2601 +
            (C16779 - C16780 + C16781 - C16782) * C31923) *
               C31966 +
           ((C16993 - C16994 + C16995 - C16996) * C2600 +
            (C16997 - C16998 + C16999 - C17000) * C32117 +
            (C16783 - C16784 + C16785 - C16786) * C2601 +
            (C16787 - C16788 + C16789 - C16790) * C31923) *
               C23828) *
              C31835 * C31821 * C111 +
          (((C15385 * C128 - C15391 * C121 + C31782 * C129 - C15392 * C122) *
                C2600 +
            (C15385 * C142 - C15391 * C133 + C31782 * C143 - C15392 * C134) *
                C32117 +
            (C15385 * C225 - C15391 * C215 + C31782 * C226 - C15392 * C216) *
                C2601 +
            (C15385 * C245 - C15391 * C230 + C31782 * C246 - C15392 * C231) *
                C31923) *
               C31959 +
           ((C15385 * C330 - C15391 * C320 + C31782 * C331 - C15392 * C321) *
                C2600 +
            (C15385 * C350 - C15391 * C335 + C31782 * C351 - C15392 * C336) *
                C32117 +
            (C15385 * C625 - C15391 * C620 + C31782 * C626 - C15392 * C621) *
                C2601 +
            (C15385 * C635 - C15391 * C630 + C31782 * C636 - C15392 * C631) *
                C31923) *
               C31966 +
           ((C15385 * C340 - C15391 * C325 + C31782 * C341 - C15392 * C326) *
                C2600 +
            (C15385 * C355 - C15391 * C345 + C31782 * C356 - C15392 * C346) *
                C32117 +
            (C15385 * C1067 - C15391 * C1055 + C31782 * C2145 -
             C15392 * C2144) *
                C2601 +
            (C15385 * C1082 - C15391 * C1070 + C31782 * C2147 -
             C15392 * C2146) *
                C31923) *
               C23828) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C2600 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C32117 +
            (C15496 - C15497 + C15498 - C15499) * C2601 +
            (C15500 - C15501 + C15502 - C15503) * C31923) *
               C31959 +
           ((C16530 - C16531 + C16532 - C16533) * C2600 +
            (C16534 - C16535 + C16536 - C16537) * C32117 + C17207 * C2601 +
            C17208 * C31923) *
               C31966 +
           (C16572 * C2600 + C16573 * C32117 + C16570 * C2601 +
            C16571 * C31923) *
               C23828) *
              C31835 * C209 +
          (((C15497 - C15496 + C15499 - C15498) * C2600 +
            (C15501 - C15500 + C15503 - C15502) * C32117 +
            (C15505 - C15504 + C15507 - C15506) * C2601 +
            (C15509 - C15508 + C15511 - C15510) * C31923) *
               C31959 +
           (C17209 * C2600 + C17210 * C32117 + C20225 * C2601 +
            C20226 * C31923) *
               C31966 +
           (C17211 * C2600 + C17212 * C32117 +
            (C16376 - C16377 + C16378 - C16379) * C2601 +
            (C16380 - C16381 + C16382 - C16383) * C31923) *
               C23828) *
              C31835 * C210 +
          ((C15536 * C2600 + C15537 * C32117 + C15538 * C2601 +
            C15539 * C31923) *
               C31959 +
           (C19483 * C2600 + C19484 * C32117 +
            (C16069 - C16068 + C16071 - C16070) * C2601 +
            (C16073 - C16072 + C16075 - C16074) * C31923) *
               C31966 +
           ((C16377 - C16376 + C16379 - C16378) * C2600 +
            (C16381 - C16380 + C16383 - C16382) * C32117 +
            (C15385 * C6149 - C15391 * C6145 + C31782 * C6986 -
             C15392 * C6985) *
                C2601 +
            (C15385 * C6154 - C15391 * C6150 + C31782 * C6988 -
             C15392 * C6987) *
                C31923) *
               C23828) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                 C757 +
             (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                 C32183 +
             (C15496 - C15497 + C15498 - C15499) * C758 +
             (C15500 - C15501 + C15502 - C15503) * C32171 + C15536 * C759 +
             C15537 * C32148) *
                C20324 +
            ((C16530 - C16531 + C16532 - C16533) * C757 +
             (C16534 - C16535 + C16536 - C16537) * C32183 + C17207 * C758 +
             C17208 * C32171 + C19483 * C759 + C19484 * C32148) *
                C31963) *
               C31835 * C440 +
           (((C15497 - C15496 + C15499 - C15498) * C757 +
             (C15501 - C15500 + C15503 - C15502) * C32183 +
             (C15505 - C15504 + C15507 - C15506) * C758 +
             (C15509 - C15508 + C15511 - C15510) * C32171 +
             (C15513 - C15512 + C15515 - C15514) * C759 +
             (C15517 - C15516 + C15519 - C15518) * C32148) *
                C20324 +
            (C17209 * C757 + C17210 * C32183 + C20225 * C758 + C20226 * C32171 +
             (C16068 - C16069 + C16070 - C16071) * C759 +
             (C16072 - C16073 + C16074 - C16075) * C32148) *
                C31963) *
               C31835 * C441) *
              C442 +
          ((((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                 C757 +
             (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                 C32183 +
             (C15768 - C15769 + C15770 - C15771) * C758 +
             (C15772 - C15773 + C15774 - C15775) * C32171 +
             (C15776 - C15777 + C15778 - C15779) * C759 +
             (C15780 - C15781 + C15782 - C15783) * C32148) *
                C20324 +
            ((C16985 - C16986 + C16987 - C16988) * C757 +
             (C16989 - C16990 + C16991 - C16992) * C32183 +
             (C16775 - C16776 + C16777 - C16778) * C758 +
             (C16779 - C16780 + C16781 - C16782) * C32171 +
             (C19825 - C19826 + C19827 - C19828) * C759 +
             (C19829 - C19830 + C19831 - C19832) * C32148) *
                C31963) *
               C31835 * C440 +
           (((C15769 - C15768 + C15771 - C15770) * C757 +
             (C15773 - C15772 + C15775 - C15774) * C32183 +
             (C15777 - C15776 + C15779 - C15778) * C758 +
             (C15781 - C15780 + C15783 - C15782) * C32171 +
             (C15785 - C15784 + C15787 - C15786) * C759 +
             (C15789 - C15788 + C15791 - C15790) * C32148) *
                C20324 +
            ((C16776 - C16775 + C16778 - C16777) * C757 +
             (C16780 - C16779 + C16782 - C16781) * C32183 +
             (C19826 - C19825 + C19828 - C19827) * C758 +
             (C19830 - C19829 + C19832 - C19831) * C32171 +
             (C15385 * C1560 - C15391 * C1557 + C31782 * C1561 -
              C15392 * C1558) *
                 C759 +
             (C15385 * C1566 - C15391 * C1563 + C31782 * C1567 -
              C15392 * C1564) *
                 C32148) *
                C31963) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
              C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
                 C118 +
             (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
              C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
                 C31864) *
                C20324 +
            ((C20523 - C20524 + C20525 - C20526 + C20527 - C20528 + C20529 -
              C20530) *
                 C118 +
             (C20531 - C20532 + C20533 - C20534 + C20535 - C20536 + C20537 -
              C20538) *
                 C31864) *
                C31963) *
               C31835 * C440 +
           (((C14737 - C14736 + C14739 - C14738 + C14741 - C14740 + C14743 -
              C14742) *
                 C118 +
             (C14745 - C14744 + C14747 - C14746 + C14749 - C14748 + C14751 -
              C14750) *
                 C31864) *
                C20324 +
            ((C15272 - C15273 + C15274 - C15275 + C15276 - C15277 + C15278 -
              C15279) *
                 C118 +
             (C15280 - C15281 + C15282 - C15283 + C15284 - C15285 + C15286 -
              C15287) *
                 C31864) *
                C31963) *
               C31835 * C441) *
              C442 +
          ((((C14631 * C120 - C32189 * C127 + C14632 * C121 - C32182 * C128 +
              C14633 * C122 - C32169 * C129 + C14634 * C123 - C32152 * C130) *
                 C118 +
             (C14631 * C132 - C32189 * C141 + C14632 * C133 - C32182 * C142 +
              C14633 * C134 - C32169 * C143 + C14634 * C135 - C32152 * C144) *
                 C31864) *
                C20324 +
            ((C14631 * C319 - C32189 * C329 + C14632 * C320 - C32182 * C330 +
              C14633 * C321 - C32169 * C331 + C14634 * C322 - C32152 * C332) *
                 C118 +
             (C14631 * C334 - C32189 * C349 + C14632 * C335 - C32182 * C350 +
              C14633 * C336 - C32169 * C351 + C14634 * C337 - C32152 * C352) *
                 C31864) *
                C31963) *
               C31835 * C440 +
           (((C14997 - C14996 + C14999 - C14998 + C15001 - C15000 + C15003 -
              C15002) *
                 C118 +
             (C15005 - C15004 + C15007 - C15006 + C15009 - C15008 + C15011 -
              C15010) *
                 C31864) *
                C20324 +
            ((C32189 * C624 - C14631 * C619 + C32182 * C625 - C14632 * C620 +
              C32169 * C626 - C14633 * C621 + C32152 * C627 - C14634 * C622) *
                 C118 +
             (C32189 * C634 - C14631 * C629 + C32182 * C635 - C14632 * C630 +
              C32169 * C636 - C14633 * C631 + C32152 * C637 - C14634 * C632) *
                 C31864) *
                C31963) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                 C118 +
             (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                 C31864) *
                C32191 +
            ((C16530 - C16531 + C16532 - C16533) * C118 +
             (C16534 - C16535 + C16536 - C16537) * C31864) *
                C32188 +
            C22293 * C32179 + C22298 * C32164) *
               C31835 * C440 +
           (((C15497 - C15496 + C15499 - C15498) * C118 +
             (C15501 - C15500 + C15503 - C15502) * C31864) *
                C32191 +
            (C17209 * C118 + C17210 * C31864) * C32188 +
            (C17211 * C118 + C17212 * C31864) * C32179 +
            ((C16558 - C16559 + C16560 - C16561) * C118 +
             (C16562 - C16563 + C16564 - C16565) * C31864) *
                C32164) *
               C31835 * C441) *
              C442 +
          ((((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                 C118 +
             (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                 C31864) *
                C32191 +
            ((C16985 - C16986 + C16987 - C16988) * C118 +
             (C16989 - C16990 + C16991 - C16992) * C31864) *
                C32188 +
            ((C16993 - C16994 + C16995 - C16996) * C118 +
             (C16997 - C16998 + C16999 - C17000) * C31864) *
                C32179 +
            ((C15391 * C1926 - C15385 * C1932 + C15392 * C1927 -
              C31782 * C1933) *
                 C118 +
             (C15391 * C1935 - C15385 * C1944 + C15392 * C1936 -
              C31782 * C1945) *
                 C31864) *
                C32164) *
               C31835 * C440 +
           (((C15769 - C15768 + C15771 - C15770) * C118 +
             (C15773 - C15772 + C15775 - C15774) * C31864) *
                C32191 +
            ((C16776 - C16775 + C16778 - C16777) * C118 +
             (C16780 - C16779 + C16782 - C16781) * C31864) *
                C32188 +
            ((C16784 - C16783 + C16786 - C16785) * C118 +
             (C16788 - C16787 + C16790 - C16789) * C31864) *
                C32179 +
            ((C15385 * C2472 - C15391 * C2469 + C31782 * C2473 -
              C15392 * C2470) *
                 C118 +
             (C15385 * C2478 - C15391 * C2475 + C31782 * C2479 -
              C15392 * C2476) *
                 C31864) *
                C32164) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                 C757 +
             (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                 C32183 +
             (C15496 - C15497 + C15498 - C15499) * C758 +
             (C15500 - C15501 + C15502 - C15503) * C32171 + C15536 * C759 +
             C15537 * C32148) *
                C20324 +
            ((C16530 - C16531 + C16532 - C16533) * C757 +
             (C16534 - C16535 + C16536 - C16537) * C32183 + C17207 * C758 +
             C17208 * C32171 + C19483 * C759 + C19484 * C32148) *
                C31963) *
               C530 +
           (((C16531 - C16530 + C16533 - C16532) * C757 +
             (C16535 - C16534 + C16537 - C16536) * C32183 + C17209 * C758 +
             C17210 * C32171 + C20225 * C759 + C20226 * C32148) *
                C20324 +
            ((C16539 - C16538 + C16541 - C16540) * C757 +
             (C16543 - C16542 + C16545 - C16544) * C32183 + C17211 * C758 +
             C17212 * C32171 + (C16376 - C16377 + C16378 - C16379) * C759 +
             (C16380 - C16381 + C16382 - C16383) * C32148) *
                C31963) *
               C531) *
              C440 +
          ((((C15497 - C15496 + C15499 - C15498) * C757 +
             (C15501 - C15500 + C15503 - C15502) * C32183 +
             (C15505 - C15504 + C15507 - C15506) * C758 +
             (C15509 - C15508 + C15511 - C15510) * C32171 +
             (C15513 - C15512 + C15515 - C15514) * C759 +
             (C15517 - C15516 + C15519 - C15518) * C32148) *
                C20324 +
            (C17209 * C757 + C17210 * C32183 + C20225 * C758 + C20226 * C32171 +
             (C16068 - C16069 + C16070 - C16071) * C759 +
             (C16072 - C16073 + C16074 - C16075) * C32148) *
                C31963) *
               C530 +
           ((C17207 * C757 + C17208 * C32183 + C19483 * C758 + C19484 * C32171 +
             (C16069 - C16068 + C16071 - C16070) * C759 +
             (C16073 - C16072 + C16075 - C16074) * C32148) *
                C20324 +
            (C16570 * C757 + C16571 * C32183 +
             (C16377 - C16376 + C16379 - C16378) * C758 +
             (C16381 - C16380 + C16383 - C16382) * C32171 +
             (C15385 * C6149 - C15391 * C6145 + C31782 * C6986 -
              C15392 * C6985) *
                 C759 +
             (C15385 * C6154 - C15391 * C6150 + C31782 * C6988 -
              C15392 * C6987) *
                 C32148) *
                C31963) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
              C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
                 C118 +
             (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
              C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
                 C31864) *
                C20324 +
            ((C20523 - C20524 + C20525 - C20526 + C20527 - C20528 + C20529 -
              C20530) *
                 C118 +
             (C20531 - C20532 + C20533 - C20534 + C20535 - C20536 + C20537 -
              C20538) *
                 C31864) *
                C31963) *
               C530 +
           (((C20524 - C20523 + C20526 - C20525 + C20528 - C20527 + C20530 -
              C20529) *
                 C118 +
             (C20532 - C20531 + C20534 - C20533 + C20536 - C20535 + C20538 -
              C20537) *
                 C31864) *
                C20324 +
            ((C20539 - C20540 + C20541 - C20542 + C20543 - C20544 + C20545 -
              C20546) *
                 C118 +
             (C20547 - C20548 + C20549 - C20550 + C20551 - C20552 + C20553 -
              C20554) *
                 C31864) *
                C31963) *
               C531) *
              C440 +
          ((((C14737 - C14736 + C14739 - C14738 + C14741 - C14740 + C14743 -
              C14742) *
                 C118 +
             (C14745 - C14744 + C14747 - C14746 + C14749 - C14748 + C14751 -
              C14750) *
                 C31864) *
                C20324 +
            ((C15272 - C15273 + C15274 - C15275 + C15276 - C15277 + C15278 -
              C15279) *
                 C118 +
             (C15280 - C15281 + C15282 - C15283 + C15284 - C15285 + C15286 -
              C15287) *
                 C31864) *
                C31963) *
               C530 +
           (((C15273 - C15272 + C15275 - C15274 + C15277 - C15276 + C15279 -
              C15278) *
                 C118 +
             (C15281 - C15280 + C15283 - C15282 + C15285 - C15284 + C15287 -
              C15286) *
                 C31864) *
                C20324 +
            ((C32189 * C1065 - C14631 * C1053 + C32182 * C1066 -
              C14632 * C1054 + C32169 * C1067 - C14633 * C1055 +
              C32152 * C2145 - C14634 * C2144) *
                 C118 +
             (C32189 * C1080 - C14631 * C1068 + C32182 * C1081 -
              C14632 * C1069 + C32169 * C1082 - C14633 * C1070 +
              C32152 * C2147 - C14634 * C2146) *
                 C31864) *
                C31963) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                 C118 +
             (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                 C31864) *
                C32191 +
            ((C16530 - C16531 + C16532 - C16533) * C118 +
             (C16534 - C16535 + C16536 - C16537) * C31864) *
                C32188 +
            C22293 * C32179 + C22298 * C32164) *
               C530 +
           (((C16531 - C16530 + C16533 - C16532) * C118 +
             (C16535 - C16534 + C16537 - C16536) * C31864) *
                C32191 +
            ((C16539 - C16538 + C16541 - C16540) * C118 +
             (C16543 - C16542 + C16545 - C16544) * C31864) *
                C32188 +
            ((C16550 - C16551 + C16552 - C16553) * C118 +
             (C16554 - C16555 + C16556 - C16557) * C31864) *
                C32179 +
            ((C22285 - C22286 + C22287 - C22288) * C118 +
             (C22289 - C22290 + C22291 - C22292) * C31864) *
                C32164) *
               C531) *
              C440 +
          ((((C15497 - C15496 + C15499 - C15498) * C118 +
             (C15501 - C15500 + C15503 - C15502) * C31864) *
                C32191 +
            (C17209 * C118 + C17210 * C31864) * C32188 +
            (C17211 * C118 + C17212 * C31864) * C32179 +
            ((C16558 - C16559 + C16560 - C16561) * C118 +
             (C16562 - C16563 + C16564 - C16565) * C31864) *
                C32164) *
               C530 +
           ((C17207 * C118 + C17208 * C31864) * C32191 +
            (C16570 * C118 + C16571 * C31864) * C32188 +
            ((C16559 - C16558 + C16561 - C16560) * C118 +
             (C16563 - C16562 + C16565 - C16564) * C31864) *
                C32179 +
            ((C15385 * C6797 - C15391 * C6793 + C31782 * C11841 -
              C15392 * C11840) *
                 C118 +
             (C15385 * C6802 - C15391 * C6798 + C31782 * C11843 -
              C15392 * C11842) *
                 C31864) *
                C32164) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
                 C32169 * C128 - C14633 * C121 + C32152 * C129 -
                 C14634 * C122) *
                    C118 +
                (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
                 C32169 * C142 - C14633 * C133 + C32152 * C143 -
                 C14634 * C134) *
                    C31864) *
                   C20324 +
               ((C32189 * C328 - C14631 * C318 + C32182 * C329 - C14632 * C319 +
                 C32169 * C330 - C14633 * C320 + C32152 * C331 -
                 C14634 * C321) *
                    C118 +
                (C32189 * C348 - C14631 * C333 + C32182 * C349 - C14632 * C334 +
                 C32169 * C350 - C14633 * C335 + C32152 * C351 -
                 C14634 * C336) *
                    C31864) *
                   C31963) *
                  C31835 * C31821 * C110 +
              (((C14631 * C120 - C32189 * C127 + C14632 * C121 - C32182 * C128 +
                 C14633 * C122 - C32169 * C129 + C14634 * C123 -
                 C32152 * C130) *
                    C118 +
                (C14631 * C132 - C32189 * C141 + C14632 * C133 - C32182 * C142 +
                 C14633 * C134 - C32169 * C143 + C14634 * C135 -
                 C32152 * C144) *
                    C31864) *
                   C20324 +
               ((C14631 * C319 - C32189 * C329 + C14632 * C320 - C32182 * C330 +
                 C14633 * C321 - C32169 * C331 + C14634 * C322 -
                 C32152 * C332) *
                    C118 +
                (C14631 * C334 - C32189 * C349 + C14632 * C335 - C32182 * C350 +
                 C14633 * C336 - C32169 * C351 + C14634 * C337 -
                 C32152 * C352) *
                    C31864) *
                   C31963) *
                  C31835 * C31821 * C111 +
              (((C32189 * C128 - C14631 * C121 + C32182 * C129 - C14632 * C122 +
                 C32169 * C130 - C14633 * C123 + C32152 * C136 -
                 C14634 * C124) *
                    C118 +
                (C32189 * C142 - C14631 * C133 + C32182 * C143 - C14632 * C134 +
                 C32169 * C144 - C14633 * C135 + C32152 * C145 -
                 C14634 * C137) *
                    C31864) *
                   C20324 +
               ((C32189 * C330 - C14631 * C320 + C32182 * C331 - C14632 * C321 +
                 C32169 * C332 - C14633 * C322 + C32152 * C533 -
                 C14634 * C532) *
                    C118 +
                (C32189 * C350 - C14631 * C335 + C32182 * C351 - C14632 * C336 +
                 C32169 * C352 - C14633 * C337 + C32152 * C535 -
                 C14634 * C534) *
                    C31864) *
                   C31963) *
                  C31835 * C31821 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
                 C32169 * C128 - C14633 * C121 + C32152 * C129 -
                 C14634 * C122) *
                    C118 +
                (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
                 C32169 * C142 - C14633 * C133 + C32152 * C143 -
                 C14634 * C134) *
                    C31864) *
                   C20324 +
               ((C32189 * C328 - C14631 * C318 + C32182 * C329 - C14632 * C319 +
                 C32169 * C330 - C14633 * C320 + C32152 * C331 -
                 C14634 * C321) *
                    C118 +
                (C32189 * C348 - C14631 * C333 + C32182 * C349 - C14632 * C334 +
                 C32169 * C350 - C14633 * C335 + C32152 * C351 -
                 C14634 * C336) *
                    C31864) *
                   C31963) *
                  C31835 * C209 +
              (((C14737 - C14736 + C14739 - C14738 + C14741 - C14740 + C14743 -
                 C14742) *
                    C118 +
                (C14745 - C14744 + C14747 - C14746 + C14749 - C14748 + C14751 -
                 C14750) *
                    C31864) *
                   C20324 +
               ((C15272 - C15273 + C15274 - C15275 + C15276 - C15277 + C15278 -
                 C15279) *
                    C118 +
                (C15280 - C15281 + C15282 - C15283 + C15284 - C15285 + C15286 -
                 C15287) *
                    C31864) *
                   C31963) *
                  C31835 * C210 +
              (((C14753 - C14752 + C14755 - C14754 + C14757 - C14756 + C14759 -
                 C14758) *
                    C118 +
                (C14761 - C14760 + C14763 - C14762 + C14765 - C14764 + C14767 -
                 C14766) *
                    C31864) *
                   C20324 +
               ((C32189 * C1059 - C14631 * C1050 + C32182 * C1060 -
                 C14632 * C1051 + C32169 * C1061 - C14633 * C1052 +
                 C32152 * C1407 - C14634 * C1406) *
                    C118 +
                (C32189 * C1077 - C14631 * C1062 + C32182 * C1078 -
                 C14632 * C1063 + C32169 * C1079 - C14633 * C1064 +
                 C32152 * C1409 - C14634 * C1408) *
                    C31864) *
                   C31963) *
                  C31835 * C211) *
             C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
             C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
                C118 +
            (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
             C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
                C31864) *
               C20324 +
           ((C20523 - C20524 + C20525 - C20526 + C20527 - C20528 + C20529 -
             C20530) *
                C118 +
            (C20531 - C20532 + C20533 - C20534 + C20535 - C20536 + C20537 -
             C20538) *
                C31864) *
               C31963) *
              C315 +
          (((C20524 - C20523 + C20526 - C20525 + C20528 - C20527 + C20530 -
             C20529) *
                C118 +
            (C20532 - C20531 + C20534 - C20533 + C20536 - C20535 + C20538 -
             C20537) *
                C31864) *
               C20324 +
           ((C20539 - C20540 + C20541 - C20542 + C20543 - C20544 + C20545 -
             C20546) *
                C118 +
            (C20547 - C20548 + C20549 - C20550 + C20551 - C20552 + C20553 -
             C20554) *
                C31864) *
               C31963) *
              C316 +
          (((C20540 - C20539 + C20542 - C20541 + C20544 - C20543 + C20546 -
             C20545) *
                C118 +
            (C20548 - C20547 + C20550 - C20549 + C20552 - C20551 + C20554 -
             C20553) *
                C31864) *
               C20324 +
           ((C32189 * C1931 - C14631 * C1925 + C32182 * C1932 - C14632 * C1926 +
             C32169 * C1933 - C14633 * C1927 + C32152 * C2295 -
             C14634 * C2294) *
                C118 +
            (C32189 * C1943 - C14631 * C1934 + C32182 * C1944 - C14632 * C1935 +
             C32169 * C1945 - C14633 * C1936 + C32152 * C2297 -
             C14634 * C2296) *
                C31864) *
               C31963) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C757 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C32183 +
            (C15496 - C15497 + C15498 - C15499) * C758 +
            (C15500 - C15501 + C15502 - C15503) * C32171 + C15536 * C759 +
            C15537 * C32148) *
               C20324 +
           ((C16530 - C16531 + C16532 - C16533) * C757 +
            (C16534 - C16535 + C16536 - C16537) * C32183 + C17207 * C758 +
            C17208 * C32171 + C19483 * C759 + C19484 * C32148) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                C757 +
            (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                C32183 +
            (C15768 - C15769 + C15770 - C15771) * C758 +
            (C15772 - C15773 + C15774 - C15775) * C32171 +
            (C15776 - C15777 + C15778 - C15779) * C759 +
            (C15780 - C15781 + C15782 - C15783) * C32148) *
               C20324 +
           ((C16985 - C16986 + C16987 - C16988) * C757 +
            (C16989 - C16990 + C16991 - C16992) * C32183 +
            (C16775 - C16776 + C16777 - C16778) * C758 +
            (C16779 - C16780 + C16781 - C16782) * C32171 +
            (C19825 - C19826 + C19827 - C19828) * C759 +
            (C19829 - C19830 + C19831 - C19832) * C32148) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C15385 * C128 - C15391 * C121 + C31782 * C129 - C15392 * C122) *
                C757 +
            (C15385 * C142 - C15391 * C133 + C31782 * C143 - C15392 * C134) *
                C32183 +
            (C15385 * C225 - C15391 * C215 + C31782 * C226 - C15392 * C216) *
                C758 +
            (C15385 * C245 - C15391 * C230 + C31782 * C246 - C15392 * C231) *
                C32171 +
            (C15385 * C235 - C15391 * C220 + C31782 * C236 - C15392 * C221) *
                C759 +
            (C15385 * C250 - C15391 * C240 + C31782 * C251 - C15392 * C241) *
                C32148) *
               C20324 +
           ((C15385 * C330 - C15391 * C320 + C31782 * C331 - C15392 * C321) *
                C757 +
            (C15385 * C350 - C15391 * C335 + C31782 * C351 - C15392 * C336) *
                C32183 +
            (C15385 * C625 - C15391 * C620 + C31782 * C626 - C15392 * C621) *
                C758 +
            (C15385 * C635 - C15391 * C630 + C31782 * C636 - C15392 * C631) *
                C32171 +
            (C15385 * C1061 - C15391 * C1052 + C31782 * C1407 -
             C15392 * C1406) *
                C759 +
            (C15385 * C1079 - C15391 * C1064 + C31782 * C1409 -
             C15392 * C1408) *
                C32148) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C757 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C32183 +
            (C15496 - C15497 + C15498 - C15499) * C758 +
            (C15500 - C15501 + C15502 - C15503) * C32171 + C15536 * C759 +
            C15537 * C32148) *
               C20324 +
           ((C16530 - C16531 + C16532 - C16533) * C757 +
            (C16534 - C16535 + C16536 - C16537) * C32183 + C17207 * C758 +
            C17208 * C32171 + C19483 * C759 + C19484 * C32148) *
               C31963) *
              C31835 * C209 +
          (((C15497 - C15496 + C15499 - C15498) * C757 +
            (C15501 - C15500 + C15503 - C15502) * C32183 +
            (C15505 - C15504 + C15507 - C15506) * C758 +
            (C15509 - C15508 + C15511 - C15510) * C32171 +
            (C15513 - C15512 + C15515 - C15514) * C759 +
            (C15517 - C15516 + C15519 - C15518) * C32148) *
               C20324 +
           (C17209 * C757 + C17210 * C32183 + C20225 * C758 + C20226 * C32171 +
            (C16068 - C16069 + C16070 - C16071) * C759 +
            (C16072 - C16073 + C16074 - C16075) * C32148) *
               C31963) *
              C31835 * C210 +
          ((C15536 * C757 + C15537 * C32183 + C15538 * C758 + C15539 * C32171 +
            (C15521 - C15520 + C15523 - C15522) * C759 +
            (C15525 - C15524 + C15527 - C15526) * C32148) *
               C20324 +
           (C19483 * C757 + C19484 * C32183 +
            (C16069 - C16068 + C16071 - C16070) * C758 +
            (C16073 - C16072 + C16075 - C16074) * C32171 +
            (C15385 * C6147 - C15391 * C6144 + C31782 * C6341 -
             C15392 * C6340) *
                C759 +
            (C15385 * C6153 - C15391 * C6148 + C31782 * C6343 -
             C15392 * C6342) *
                C32148) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C757 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C32183 +
            (C15496 - C15497 + C15498 - C15499) * C758 +
            (C15500 - C15501 + C15502 - C15503) * C32171 + C15536 * C759 +
            C15537 * C32148) *
               C20324 +
           ((C16530 - C16531 + C16532 - C16533) * C757 +
            (C16534 - C16535 + C16536 - C16537) * C32183 + C17207 * C758 +
            C17208 * C32171 + C19483 * C759 + C19484 * C32148) *
               C31963) *
              C315 +
          (((C16531 - C16530 + C16533 - C16532) * C757 +
            (C16535 - C16534 + C16537 - C16536) * C32183 + C17209 * C758 +
            C17210 * C32171 + C20225 * C759 + C20226 * C32148) *
               C20324 +
           ((C16539 - C16538 + C16541 - C16540) * C757 +
            (C16543 - C16542 + C16545 - C16544) * C32183 + C17211 * C758 +
            C17212 * C32171 + (C16376 - C16377 + C16378 - C16379) * C759 +
            (C16380 - C16381 + C16382 - C16383) * C32148) *
               C31963) *
              C316 +
          ((C16572 * C757 + C16573 * C32183 + C16570 * C758 + C16571 * C32171 +
            (C16377 - C16376 + C16379 - C16378) * C759 +
            (C16381 - C16380 + C16383 - C16382) * C32148) *
               C20324 +
           ((C16551 - C16550 + C16553 - C16552) * C757 +
            (C16555 - C16554 + C16557 - C16556) * C32183 +
            (C16559 - C16558 + C16561 - C16560) * C758 +
            (C16563 - C16562 + C16565 - C16564) * C32171 +
            (C15385 * C6795 - C15391 * C6792 + C31782 * C7152 -
             C15392 * C7151) *
                C759 +
            (C15385 * C6801 - C15391 * C6796 + C31782 * C7154 -
             C15392 * C7153) *
                C32148) *
               C31963) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C118 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C31864) *
               C32191 +
           ((C16530 - C16531 + C16532 - C16533) * C118 +
            (C16534 - C16535 + C16536 - C16537) * C31864) *
               C32188 +
           (C16572 * C118 + C16573 * C31864) * C32179 +
           ((C16551 - C16550 + C16553 - C16552) * C118 +
            (C16555 - C16554 + C16557 - C16556) * C31864) *
               C32164) *
              C31835 * C31821 * C110 +
          (((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                C118 +
            (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                C31864) *
               C32191 +
           ((C16985 - C16986 + C16987 - C16988) * C118 +
            (C16989 - C16990 + C16991 - C16992) * C31864) *
               C32188 +
           ((C16993 - C16994 + C16995 - C16996) * C118 +
            (C16997 - C16998 + C16999 - C17000) * C31864) *
               C32179 +
           ((C15391 * C1926 - C15385 * C1932 + C15392 * C1927 -
             C31782 * C1933) *
                C118 +
            (C15391 * C1935 - C15385 * C1944 + C15392 * C1936 -
             C31782 * C1945) *
                C31864) *
               C32164) *
              C31835 * C31821 * C111 +
          (((C15385 * C128 - C15391 * C121 + C31782 * C129 - C15392 * C122) *
                C118 +
            (C15385 * C142 - C15391 * C133 + C31782 * C143 - C15392 * C134) *
                C31864) *
               C32191 +
           ((C15385 * C330 - C15391 * C320 + C31782 * C331 - C15392 * C321) *
                C118 +
            (C15385 * C350 - C15391 * C335 + C31782 * C351 - C15392 * C336) *
                C31864) *
               C32188 +
           ((C15385 * C340 - C15391 * C325 + C31782 * C341 - C15392 * C326) *
                C118 +
            (C15385 * C355 - C15391 * C345 + C31782 * C356 - C15392 * C346) *
                C31864) *
               C32179 +
           ((C15385 * C1933 - C15391 * C1927 + C31782 * C2295 -
             C15392 * C2294) *
                C118 +
            (C15385 * C1945 - C15391 * C1936 + C31782 * C2297 -
             C15392 * C2296) *
                C31864) *
               C32164) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C118 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C31864) *
               C32191 +
           ((C16530 - C16531 + C16532 - C16533) * C118 +
            (C16534 - C16535 + C16536 - C16537) * C31864) *
               C32188 +
           (C16572 * C118 + C16573 * C31864) * C32179 +
           ((C16551 - C16550 + C16553 - C16552) * C118 +
            (C16555 - C16554 + C16557 - C16556) * C31864) *
               C32164) *
              C31835 * C209 +
          (((C15497 - C15496 + C15499 - C15498) * C118 +
            (C15501 - C15500 + C15503 - C15502) * C31864) *
               C32191 +
           (C17209 * C118 + C17210 * C31864) * C32188 +
           (C17211 * C118 + C17212 * C31864) * C32179 +
           ((C16558 - C16559 + C16560 - C16561) * C118 +
            (C16562 - C16563 + C16564 - C16565) * C31864) *
               C32164) *
              C31835 * C210 +
          ((C15536 * C118 + C15537 * C31864) * C32191 +
           (C19483 * C118 + C19484 * C31864) * C32188 +
           ((C16377 - C16376 + C16379 - C16378) * C118 +
            (C16381 - C16380 + C16383 - C16382) * C31864) *
               C32179 +
           ((C15385 * C6795 - C15391 * C6792 + C31782 * C7152 -
             C15392 * C7151) *
                C118 +
            (C15385 * C6801 - C15391 * C6796 + C31782 * C7154 -
             C15392 * C7153) *
                C31864) *
               C32164) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C118 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C31864) *
               C32191 +
           ((C16530 - C16531 + C16532 - C16533) * C118 +
            (C16534 - C16535 + C16536 - C16537) * C31864) *
               C32188 +
           C22293 * C32179 + C22298 * C32164) *
              C315 +
          (((C16531 - C16530 + C16533 - C16532) * C118 +
            (C16535 - C16534 + C16537 - C16536) * C31864) *
               C32191 +
           ((C16539 - C16538 + C16541 - C16540) * C118 +
            (C16543 - C16542 + C16545 - C16544) * C31864) *
               C32188 +
           ((C16550 - C16551 + C16552 - C16553) * C118 +
            (C16554 - C16555 + C16556 - C16557) * C31864) *
               C32179 +
           ((C22285 - C22286 + C22287 - C22288) * C118 +
            (C22289 - C22290 + C22291 - C22292) * C31864) *
               C32164) *
              C316 +
          (C22293 * C32191 + C22298 * C32188 +
           ((C22286 - C22285 + C22288 - C22287) * C118 +
            (C22290 - C22289 + C22292 - C22291) * C31864) *
               C32179 +
           ((C15385 * C11731 - C15391 * C11729 + C31782 * C11927 -
             C15392 * C11926) *
                C118 +
            (C15385 * C11735 - C15391 * C11732 + C31782 * C11929 -
             C15392 * C11928) *
                C31864) *
               C32164) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                 C757 +
             (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                 C32183 +
             (C15496 - C15497 + C15498 - C15499) * C758 +
             (C15500 - C15501 + C15502 - C15503) * C32171 + C15536 * C759 +
             C15537 * C32148) *
                C20324 +
            ((C16530 - C16531 + C16532 - C16533) * C757 +
             (C16534 - C16535 + C16536 - C16537) * C32183 + C17207 * C758 +
             C17208 * C32171 + C19483 * C759 + C19484 * C32148) *
                C31963) *
               C530 +
           (((C16531 - C16530 + C16533 - C16532) * C757 +
             (C16535 - C16534 + C16537 - C16536) * C32183 + C17209 * C758 +
             C17210 * C32171 + C20225 * C759 + C20226 * C32148) *
                C20324 +
            ((C16539 - C16538 + C16541 - C16540) * C757 +
             (C16543 - C16542 + C16545 - C16544) * C32183 + C17211 * C758 +
             C17212 * C32171 + (C16376 - C16377 + C16378 - C16379) * C759 +
             (C16380 - C16381 + C16382 - C16383) * C32148) *
                C31963) *
               C531) *
              C31821 * C442 +
          ((((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                 C757 +
             (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                 C32183 +
             (C15768 - C15769 + C15770 - C15771) * C758 +
             (C15772 - C15773 + C15774 - C15775) * C32171 +
             (C15776 - C15777 + C15778 - C15779) * C759 +
             (C15780 - C15781 + C15782 - C15783) * C32148) *
                C20324 +
            ((C16985 - C16986 + C16987 - C16988) * C757 +
             (C16989 - C16990 + C16991 - C16992) * C32183 +
             (C16775 - C16776 + C16777 - C16778) * C758 +
             (C16779 - C16780 + C16781 - C16782) * C32171 +
             (C19825 - C19826 + C19827 - C19828) * C759 +
             (C19829 - C19830 + C19831 - C19832) * C32148) *
                C31963) *
               C530 +
           (((C16986 - C16985 + C16988 - C16987) * C757 +
             (C16990 - C16989 + C16992 - C16991) * C32183 +
             (C16776 - C16775 + C16778 - C16777) * C758 +
             (C16780 - C16779 + C16782 - C16781) * C32171 +
             (C19826 - C19825 + C19828 - C19827) * C759 +
             (C19830 - C19829 + C19832 - C19831) * C32148) *
                C20324 +
            ((C16994 - C16993 + C16996 - C16995) * C757 +
             (C16998 - C16997 + C17000 - C16999) * C32183 +
             (C16784 - C16783 + C16786 - C16785) * C758 +
             (C16788 - C16787 + C16790 - C16789) * C32171 +
             (C15385 * C1072 - C15391 * C1057 + C31782 * C1073 -
              C15392 * C1058) *
                 C759 +
             (C15385 * C1084 - C15391 * C1075 + C31782 * C1085 -
              C15392 * C1076) *
                 C32148) *
                C31963) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
              C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
                 C118 +
             (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
              C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
                 C31864) *
                C20324 +
            ((C20523 - C20524 + C20525 - C20526 + C20527 - C20528 + C20529 -
              C20530) *
                 C118 +
             (C20531 - C20532 + C20533 - C20534 + C20535 - C20536 + C20537 -
              C20538) *
                 C31864) *
                C31963) *
               C530 +
           (((C20524 - C20523 + C20526 - C20525 + C20528 - C20527 + C20530 -
              C20529) *
                 C118 +
             (C20532 - C20531 + C20534 - C20533 + C20536 - C20535 + C20538 -
              C20537) *
                 C31864) *
                C20324 +
            ((C20539 - C20540 + C20541 - C20542 + C20543 - C20544 + C20545 -
              C20546) *
                 C118 +
             (C20547 - C20548 + C20549 - C20550 + C20551 - C20552 + C20553 -
              C20554) *
                 C31864) *
                C31963) *
               C531) *
              C31821 * C442 +
          ((((C14631 * C120 - C32189 * C127 + C14632 * C121 - C32182 * C128 +
              C14633 * C122 - C32169 * C129 + C14634 * C123 - C32152 * C130) *
                 C118 +
             (C14631 * C132 - C32189 * C141 + C14632 * C133 - C32182 * C142 +
              C14633 * C134 - C32169 * C143 + C14634 * C135 - C32152 * C144) *
                 C31864) *
                C20324 +
            ((C20815 - C20816 + C20817 - C20818 + C20819 - C20820 + C20821 -
              C20822) *
                 C118 +
             (C20823 - C20824 + C20825 - C20826 + C20827 - C20828 + C20829 -
              C20830) *
                 C31864) *
                C31963) *
               C530 +
           (((C20816 - C20815 + C20818 - C20817 + C20820 - C20819 + C20822 -
              C20821) *
                 C118 +
             (C20824 - C20823 + C20826 - C20825 + C20828 - C20827 + C20830 -
              C20829) *
                 C31864) *
                C20324 +
            ((C32189 * C339 - C14631 * C324 + C32182 * C340 - C14632 * C325 +
              C32169 * C341 - C14633 * C326 + C32152 * C342 - C14634 * C327) *
                 C118 +
             (C32189 * C354 - C14631 * C344 + C32182 * C355 - C14632 * C345 +
              C32169 * C356 - C14633 * C346 + C32152 * C357 - C14634 * C347) *
                 C31864) *
                C31963) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                 C118 +
             (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                 C31864) *
                C32191 +
            ((C16530 - C16531 + C16532 - C16533) * C118 +
             (C16534 - C16535 + C16536 - C16537) * C31864) *
                C32188 +
            C22293 * C32179 + C22298 * C32164) *
               C530 +
           (((C16531 - C16530 + C16533 - C16532) * C118 +
             (C16535 - C16534 + C16537 - C16536) * C31864) *
                C32191 +
            ((C16539 - C16538 + C16541 - C16540) * C118 +
             (C16543 - C16542 + C16545 - C16544) * C31864) *
                C32188 +
            ((C16550 - C16551 + C16552 - C16553) * C118 +
             (C16554 - C16555 + C16556 - C16557) * C31864) *
                C32179 +
            ((C22285 - C22286 + C22287 - C22288) * C118 +
             (C22289 - C22290 + C22291 - C22292) * C31864) *
                C32164) *
               C531) *
              C31821 * C442 +
          ((((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                 C118 +
             (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                 C31864) *
                C32191 +
            ((C16985 - C16986 + C16987 - C16988) * C118 +
             (C16989 - C16990 + C16991 - C16992) * C31864) *
                C32188 +
            ((C16993 - C16994 + C16995 - C16996) * C118 +
             (C16997 - C16998 + C16999 - C17000) * C31864) *
                C32179 +
            ((C22559 - C22560 + C22561 - C22562) * C118 +
             (C22563 - C22564 + C22565 - C22566) * C31864) *
                C32164) *
               C530 +
           (((C16986 - C16985 + C16988 - C16987) * C118 +
             (C16990 - C16989 + C16992 - C16991) * C31864) *
                C32191 +
            ((C16994 - C16993 + C16996 - C16995) * C118 +
             (C16998 - C16997 + C17000 - C16999) * C31864) *
                C32188 +
            ((C22560 - C22559 + C22562 - C22561) * C118 +
             (C22564 - C22563 + C22566 - C22565) * C31864) *
                C32179 +
            ((C15385 * C1938 - C15391 * C1929 + C31782 * C1939 -
              C15392 * C1930) *
                 C118 +
             (C15385 * C1947 - C15391 * C1941 + C31782 * C1948 -
              C15392 * C1942) *
                 C31864) *
                C32164) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
             C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
                C118 +
            (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
             C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
                C31864) *
               C20324 +
           ((C32189 * C328 - C14631 * C318 + C32182 * C329 - C14632 * C319 +
             C32169 * C330 - C14633 * C320 + C32152 * C331 - C14634 * C321) *
                C118 +
            (C32189 * C348 - C14631 * C333 + C32182 * C349 - C14632 * C334 +
             C32169 * C350 - C14633 * C335 + C32152 * C351 - C14634 * C336) *
                C31864) *
               C31963) *
              C31835 * C209 +
          (((C14737 - C14736 + C14739 - C14738 + C14741 - C14740 + C14743 -
             C14742) *
                C118 +
            (C14745 - C14744 + C14747 - C14746 + C14749 - C14748 + C14751 -
             C14750) *
                C31864) *
               C20324 +
           ((C15272 - C15273 + C15274 - C15275 + C15276 - C15277 + C15278 -
             C15279) *
                C118 +
            (C15280 - C15281 + C15282 - C15283 + C15284 - C15285 + C15286 -
             C15287) *
                C31864) *
               C31963) *
              C31835 * C210 +
          (((C14753 - C14752 + C14755 - C14754 + C14757 - C14756 + C14759 -
             C14758) *
                C118 +
            (C14761 - C14760 + C14763 - C14762 + C14765 - C14764 + C14767 -
             C14766) *
                C31864) *
               C20324 +
           ((C32189 * C1059 - C14631 * C1050 + C32182 * C1060 - C14632 * C1051 +
             C32169 * C1061 - C14633 * C1052 + C32152 * C1407 -
             C14634 * C1406) *
                C118 +
            (C32189 * C1077 - C14631 * C1062 + C32182 * C1078 - C14632 * C1063 +
             C32169 * C1079 - C14633 * C1064 + C32152 * C1409 -
             C14634 * C1408) *
                C31864) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
             C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
                C118 +
            (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
             C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
                C31864) *
               C20324 +
           ((C32189 * C328 - C14631 * C318 + C32182 * C329 - C14632 * C319 +
             C32169 * C330 - C14633 * C320 + C32152 * C331 - C14634 * C321) *
                C118 +
            (C32189 * C348 - C14631 * C333 + C32182 * C349 - C14632 * C334 +
             C32169 * C350 - C14633 * C335 + C32152 * C351 - C14634 * C336) *
                C31864) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C14631 * C120 - C32189 * C127 + C14632 * C121 - C32182 * C128 +
             C14633 * C122 - C32169 * C129 + C14634 * C123 - C32152 * C130) *
                C118 +
            (C14631 * C132 - C32189 * C141 + C14632 * C133 - C32182 * C142 +
             C14633 * C134 - C32169 * C143 + C14634 * C135 - C32152 * C144) *
                C31864) *
               C20324 +
           ((C14631 * C319 - C32189 * C329 + C14632 * C320 - C32182 * C330 +
             C14633 * C321 - C32169 * C331 + C14634 * C322 - C32152 * C332) *
                C118 +
            (C14631 * C334 - C32189 * C349 + C14632 * C335 - C32182 * C350 +
             C14633 * C336 - C32169 * C351 + C14634 * C337 - C32152 * C352) *
                C31864) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C32189 * C128 - C14631 * C121 + C32182 * C129 - C14632 * C122 +
             C32169 * C130 - C14633 * C123 + C32152 * C136 - C14634 * C124) *
                C118 +
            (C32189 * C142 - C14631 * C133 + C32182 * C143 - C14632 * C134 +
             C32169 * C144 - C14633 * C135 + C32152 * C145 - C14634 * C137) *
                C31864) *
               C20324 +
           ((C32189 * C330 - C14631 * C320 + C32182 * C331 - C14632 * C321 +
             C32169 * C332 - C14633 * C322 + C32152 * C533 - C14634 * C532) *
                C118 +
            (C32189 * C350 - C14631 * C335 + C32182 * C351 - C14632 * C336 +
             C32169 * C352 - C14633 * C337 + C32152 * C535 - C14634 * C534) *
                C31864) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C757 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C32183 +
            (C15496 - C15497 + C15498 - C15499) * C758 +
            (C15500 - C15501 + C15502 - C15503) * C32171 + C15536 * C759 +
            C15537 * C32148) *
               C20324 +
           ((C16530 - C16531 + C16532 - C16533) * C757 +
            (C16534 - C16535 + C16536 - C16537) * C32183 + C17207 * C758 +
            C17208 * C32171 + C19483 * C759 + C19484 * C32148) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                C757 +
            (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                C32183 +
            (C15768 - C15769 + C15770 - C15771) * C758 +
            (C15772 - C15773 + C15774 - C15775) * C32171 +
            (C15776 - C15777 + C15778 - C15779) * C759 +
            (C15780 - C15781 + C15782 - C15783) * C32148) *
               C20324 +
           ((C16985 - C16986 + C16987 - C16988) * C757 +
            (C16989 - C16990 + C16991 - C16992) * C32183 +
            (C16775 - C16776 + C16777 - C16778) * C758 +
            (C16779 - C16780 + C16781 - C16782) * C32171 +
            (C19825 - C19826 + C19827 - C19828) * C759 +
            (C19829 - C19830 + C19831 - C19832) * C32148) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C15385 * C128 - C15391 * C121 + C31782 * C129 - C15392 * C122) *
                C757 +
            (C15385 * C142 - C15391 * C133 + C31782 * C143 - C15392 * C134) *
                C32183 +
            (C15385 * C225 - C15391 * C215 + C31782 * C226 - C15392 * C216) *
                C758 +
            (C15385 * C245 - C15391 * C230 + C31782 * C246 - C15392 * C231) *
                C32171 +
            (C15385 * C235 - C15391 * C220 + C31782 * C236 - C15392 * C221) *
                C759 +
            (C15385 * C250 - C15391 * C240 + C31782 * C251 - C15392 * C241) *
                C32148) *
               C20324 +
           ((C15385 * C330 - C15391 * C320 + C31782 * C331 - C15392 * C321) *
                C757 +
            (C15385 * C350 - C15391 * C335 + C31782 * C351 - C15392 * C336) *
                C32183 +
            (C15385 * C625 - C15391 * C620 + C31782 * C626 - C15392 * C621) *
                C758 +
            (C15385 * C635 - C15391 * C630 + C31782 * C636 - C15392 * C631) *
                C32171 +
            (C15385 * C1061 - C15391 * C1052 + C31782 * C1407 -
             C15392 * C1406) *
                C759 +
            (C15385 * C1079 - C15391 * C1064 + C31782 * C1409 -
             C15392 * C1408) *
                C32148) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C757 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C32183 +
            (C15496 - C15497 + C15498 - C15499) * C758 +
            (C15500 - C15501 + C15502 - C15503) * C32171 + C15536 * C759 +
            C15537 * C32148) *
               C20324 +
           ((C16530 - C16531 + C16532 - C16533) * C757 +
            (C16534 - C16535 + C16536 - C16537) * C32183 + C17207 * C758 +
            C17208 * C32171 + C19483 * C759 + C19484 * C32148) *
               C31963) *
              C31835 * C209 +
          (((C15497 - C15496 + C15499 - C15498) * C757 +
            (C15501 - C15500 + C15503 - C15502) * C32183 +
            (C15505 - C15504 + C15507 - C15506) * C758 +
            (C15509 - C15508 + C15511 - C15510) * C32171 +
            (C15513 - C15512 + C15515 - C15514) * C759 +
            (C15517 - C15516 + C15519 - C15518) * C32148) *
               C20324 +
           (C17209 * C757 + C17210 * C32183 + C20225 * C758 + C20226 * C32171 +
            (C16068 - C16069 + C16070 - C16071) * C759 +
            (C16072 - C16073 + C16074 - C16075) * C32148) *
               C31963) *
              C31835 * C210 +
          ((C15536 * C757 + C15537 * C32183 + C15538 * C758 + C15539 * C32171 +
            (C15521 - C15520 + C15523 - C15522) * C759 +
            (C15525 - C15524 + C15527 - C15526) * C32148) *
               C20324 +
           (C19483 * C757 + C19484 * C32183 +
            (C16069 - C16068 + C16071 - C16070) * C758 +
            (C16073 - C16072 + C16075 - C16074) * C32171 +
            (C15385 * C6147 - C15391 * C6144 + C31782 * C6341 -
             C15392 * C6340) *
                C759 +
            (C15385 * C6153 - C15391 * C6148 + C31782 * C6343 -
             C15392 * C6342) *
                C32148) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C118 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C31864) *
               C32191 +
           ((C16530 - C16531 + C16532 - C16533) * C118 +
            (C16534 - C16535 + C16536 - C16537) * C31864) *
               C32188 +
           (C16572 * C118 + C16573 * C31864) * C32179 +
           ((C16551 - C16550 + C16553 - C16552) * C118 +
            (C16555 - C16554 + C16557 - C16556) * C31864) *
               C32164) *
              C31835 * C31821 * C110 +
          (((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                C118 +
            (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                C31864) *
               C32191 +
           ((C16985 - C16986 + C16987 - C16988) * C118 +
            (C16989 - C16990 + C16991 - C16992) * C31864) *
               C32188 +
           ((C16993 - C16994 + C16995 - C16996) * C118 +
            (C16997 - C16998 + C16999 - C17000) * C31864) *
               C32179 +
           ((C15391 * C1926 - C15385 * C1932 + C15392 * C1927 -
             C31782 * C1933) *
                C118 +
            (C15391 * C1935 - C15385 * C1944 + C15392 * C1936 -
             C31782 * C1945) *
                C31864) *
               C32164) *
              C31835 * C31821 * C111 +
          (((C15385 * C128 - C15391 * C121 + C31782 * C129 - C15392 * C122) *
                C118 +
            (C15385 * C142 - C15391 * C133 + C31782 * C143 - C15392 * C134) *
                C31864) *
               C32191 +
           ((C15385 * C330 - C15391 * C320 + C31782 * C331 - C15392 * C321) *
                C118 +
            (C15385 * C350 - C15391 * C335 + C31782 * C351 - C15392 * C336) *
                C31864) *
               C32188 +
           ((C15385 * C340 - C15391 * C325 + C31782 * C341 - C15392 * C326) *
                C118 +
            (C15385 * C355 - C15391 * C345 + C31782 * C356 - C15392 * C346) *
                C31864) *
               C32179 +
           ((C15385 * C1933 - C15391 * C1927 + C31782 * C2295 -
             C15392 * C2294) *
                C118 +
            (C15385 * C1945 - C15391 * C1936 + C31782 * C2297 -
             C15392 * C2296) *
                C31864) *
               C32164) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C118 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C31864) *
               C32191 +
           ((C16530 - C16531 + C16532 - C16533) * C118 +
            (C16534 - C16535 + C16536 - C16537) * C31864) *
               C32188 +
           (C16572 * C118 + C16573 * C31864) * C32179 +
           ((C16551 - C16550 + C16553 - C16552) * C118 +
            (C16555 - C16554 + C16557 - C16556) * C31864) *
               C32164) *
              C31835 * C209 +
          (((C15497 - C15496 + C15499 - C15498) * C118 +
            (C15501 - C15500 + C15503 - C15502) * C31864) *
               C32191 +
           (C17209 * C118 + C17210 * C31864) * C32188 +
           (C17211 * C118 + C17212 * C31864) * C32179 +
           ((C16558 - C16559 + C16560 - C16561) * C118 +
            (C16562 - C16563 + C16564 - C16565) * C31864) *
               C32164) *
              C31835 * C210 +
          ((C15536 * C118 + C15537 * C31864) * C32191 +
           (C19483 * C118 + C19484 * C31864) * C32188 +
           ((C16377 - C16376 + C16379 - C16378) * C118 +
            (C16381 - C16380 + C16383 - C16382) * C31864) *
               C32179 +
           ((C15385 * C6795 - C15391 * C6792 + C31782 * C7152 -
             C15392 * C7151) *
                C118 +
            (C15385 * C6801 - C15391 * C6796 + C31782 * C7154 -
             C15392 * C7153) *
                C31864) *
               C32164) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
              C17324 * C128 - C30889 * C121) *
                 C118 +
             (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
              C17324 * C142 - C30889 * C133) *
                 C31864) *
                C31959 +
            ((C18525 - C18526 + C18527 - C18528 + C18529 - C18530) * C118 +
             (C18531 - C18532 + C18533 - C18534 + C18535 - C18536) * C31864) *
                C31966 +
            C24074 * C23828) *
               C31835 * C440 +
           (((C17446 - C17445 + C17448 - C17447 + C17450 - C17449) * C118 +
             (C17452 - C17451 + C17454 - C17453 + C17456 - C17455) * C31864) *
                C31959 +
            (C19185 * C118 + C19186 * C31864) * C31966 +
            ((C18549 - C18550 + C18551 - C18552 + C18553 - C18554) * C118 +
             (C18555 - C18556 + C18557 - C18558 + C18559 - C18560) * C31864) *
                C23828) *
               C31835 * C441) *
              C442 +
          ((((C30883 * C120 - C31777 * C127 + C30879 * C121 - C31785 * C128 +
              C30889 * C122 - C17324 * C129) *
                 C118 +
             (C30883 * C132 - C31777 * C141 + C30879 * C133 - C31785 * C142 +
              C30889 * C134 - C17324 * C143) *
                 C31864) *
                C31959 +
            ((C18961 - C18962 + C18963 - C18964 + C18965 - C18966) * C118 +
             (C18967 - C18968 + C18969 - C18970 + C18971 - C18972) * C31864) *
                C31966 +
            ((C30883 * C324 - C31777 * C339 + C30879 * C325 - C31785 * C340 +
              C30889 * C326 - C17324 * C341) *
                 C118 +
             (C30883 * C344 - C31777 * C354 + C30879 * C345 - C31785 * C355 +
              C30889 * C346 - C17324 * C356) *
                 C31864) *
                C23828) *
               C31835 * C440 +
           (((C17748 - C17747 + C17750 - C17749 + C17752 - C17751) * C118 +
             (C17754 - C17753 + C17756 - C17755 + C17758 - C17757) * C31864) *
                C31959 +
            ((C18756 - C18755 + C18758 - C18757 + C18760 - C18759) * C118 +
             (C18762 - C18761 + C18764 - C18763 + C18766 - C18765) * C31864) *
                C31966 +
            ((C31777 * C1066 - C30883 * C1054 + C31785 * C1067 -
              C30879 * C1055 + C17324 * C2145 - C30889 * C2144) *
                 C118 +
             (C31777 * C1081 - C30883 * C1069 + C31785 * C1082 -
              C30879 * C1070 + C17324 * C2147 - C30889 * C2146) *
                 C31864) *
                C23828) *
               C31835 * C441) *
              C443)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
              C17324 * C128 - C30889 * C121) *
                 C118 +
             (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
              C17324 * C142 - C30889 * C133) *
                 C31864) *
                C31959 +
            ((C18525 - C18526 + C18527 - C18528 + C18529 - C18530) * C118 +
             (C18531 - C18532 + C18533 - C18534 + C18535 - C18536) * C31864) *
                C31966 +
            C24074 * C23828) *
               C530 +
           (((C18526 - C18525 + C18528 - C18527 + C18530 - C18529) * C118 +
             (C18532 - C18531 + C18534 - C18533 + C18536 - C18535) * C31864) *
                C31959 +
            ((C18537 - C18538 + C18539 - C18540 + C18541 - C18542) * C118 +
             (C18543 - C18544 + C18545 - C18546 + C18547 - C18548) * C31864) *
                C31966 +
            ((C24056 - C24057 + C24058 - C24059 + C24060 - C24061) * C118 +
             (C24062 - C24063 + C24064 - C24065 + C24066 - C24067) * C31864) *
                C23828) *
               C531) *
              C440 +
          ((((C17446 - C17445 + C17448 - C17447 + C17450 - C17449) * C118 +
             (C17452 - C17451 + C17454 - C17453 + C17456 - C17455) * C31864) *
                C31959 +
            (C19185 * C118 + C19186 * C31864) * C31966 +
            ((C18549 - C18550 + C18551 - C18552 + C18553 - C18554) * C118 +
             (C18555 - C18556 + C18557 - C18558 + C18559 - C18560) * C31864) *
                C23828) *
               C530 +
           ((C19183 * C118 + C19184 * C31864) * C31959 +
            ((C18550 - C18549 + C18552 - C18551 + C18554 - C18553) * C118 +
             (C18556 - C18555 + C18558 - C18557 + C18560 - C18559) * C31864) *
                C31966 +
            ((C31777 * C2471 - C30883 * C2468 + C31785 * C2472 -
              C30879 * C2469 + C17324 * C2473 - C30889 * C2470) *
                 C118 +
             (C31777 * C2477 - C30883 * C2474 + C31785 * C2478 -
              C30879 * C2475 + C17324 * C2479 - C30889 * C2476) *
                 C31864) *
                C23828) *
               C531) *
              C441) *
         C31809) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
             C17324 * C128 - C30889 * C121) *
                C118 +
            (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
             C17324 * C142 - C30889 * C133) *
                C31864) *
               C31959 +
           ((C18525 - C18526 + C18527 - C18528 + C18529 - C18530) * C118 +
            (C18531 - C18532 + C18533 - C18534 + C18535 - C18536) * C31864) *
               C31966 +
           ((C18538 - C18537 + C18540 - C18539 + C18542 - C18541) * C118 +
            (C18544 - C18543 + C18546 - C18545 + C18548 - C18547) * C31864) *
               C23828) *
              C31835 * C209 +
          (((C17446 - C17445 + C17448 - C17447 + C17450 - C17449) * C118 +
            (C17452 - C17451 + C17454 - C17453 + C17456 - C17455) * C31864) *
               C31959 +
           (C19185 * C118 + C19186 * C31864) * C31966 +
           ((C18549 - C18550 + C18551 - C18552 + C18553 - C18554) * C118 +
            (C18555 - C18556 + C18557 - C18558 + C18559 - C18560) * C31864) *
               C23828) *
              C31835 * C210 +
          ((C17489 * C118 + C17490 * C31864) * C31959 +
           ((C18076 - C18075 + C18078 - C18077 + C18080 - C18079) * C118 +
            (C18082 - C18081 + C18084 - C18083 + C18086 - C18085) * C31864) *
               C31966 +
           ((C31777 * C1071 - C30883 * C1056 + C31785 * C1072 - C30879 * C1057 +
             C17324 * C1073 - C30889 * C1058) *
                C118 +
            (C31777 * C1083 - C30883 * C1074 + C31785 * C1084 - C30879 * C1075 +
             C17324 * C1085 - C30889 * C1076) *
                C31864) *
               C23828) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
             C17324 * C128 - C30889 * C121) *
                C118 +
            (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
             C17324 * C142 - C30889 * C133) *
                C31864) *
               C31959 +
           ((C18525 - C18526 + C18527 - C18528 + C18529 - C18530) * C118 +
            (C18531 - C18532 + C18533 - C18534 + C18535 - C18536) * C31864) *
               C31966 +
           ((C18538 - C18537 + C18540 - C18539 + C18542 - C18541) * C118 +
            (C18544 - C18543 + C18546 - C18545 + C18548 - C18547) * C31864) *
               C23828) *
              C31835 * C31821 * C110 +
          (((C30883 * C120 - C31777 * C127 + C30879 * C121 - C31785 * C128 +
             C30889 * C122 - C17324 * C129) *
                C118 +
            (C30883 * C132 - C31777 * C141 + C30879 * C133 - C31785 * C142 +
             C30889 * C134 - C17324 * C143) *
                C31864) *
               C31959 +
           ((C18961 - C18962 + C18963 - C18964 + C18965 - C18966) * C118 +
            (C18967 - C18968 + C18969 - C18970 + C18971 - C18972) * C31864) *
               C31966 +
           ((C30883 * C324 - C31777 * C339 + C30879 * C325 - C31785 * C340 +
             C30889 * C326 - C17324 * C341) *
                C118 +
            (C30883 * C344 - C31777 * C354 + C30879 * C345 - C31785 * C355 +
             C30889 * C346 - C17324 * C356) *
                C31864) *
               C23828) *
              C31835 * C31821 * C111 +
          (((C31777 * C128 - C30883 * C121 + C31785 * C129 - C30879 * C122 +
             C17324 * C130 - C30889 * C123) *
                C118 +
            (C31777 * C142 - C30883 * C133 + C31785 * C143 - C30879 * C134 +
             C17324 * C144 - C30889 * C135) *
                C31864) *
               C31959 +
           ((C31777 * C330 - C30883 * C320 + C31785 * C331 - C30879 * C321 +
             C17324 * C332 - C30889 * C322) *
                C118 +
            (C31777 * C350 - C30883 * C335 + C31785 * C351 - C30879 * C336 +
             C17324 * C352 - C30889 * C337) *
                C31864) *
               C31966 +
           ((C31777 * C340 - C30883 * C325 + C31785 * C341 - C30879 * C326 +
             C17324 * C342 - C30889 * C327) *
                C118 +
            (C31777 * C355 - C30883 * C345 + C31785 * C356 - C30879 * C346 +
             C17324 * C357 - C30889 * C347) *
                C31864) *
               C23828) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
             C17324 * C128 - C30889 * C121) *
                C118 +
            (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
             C17324 * C142 - C30889 * C133) *
                C31864) *
               C31959 +
           ((C18525 - C18526 + C18527 - C18528 + C18529 - C18530) * C118 +
            (C18531 - C18532 + C18533 - C18534 + C18535 - C18536) * C31864) *
               C31966 +
           C24074 * C23828) *
              C315 +
          (((C18526 - C18525 + C18528 - C18527 + C18530 - C18529) * C118 +
            (C18532 - C18531 + C18534 - C18533 + C18536 - C18535) * C31864) *
               C31959 +
           ((C18537 - C18538 + C18539 - C18540 + C18541 - C18542) * C118 +
            (C18543 - C18544 + C18545 - C18546 + C18547 - C18548) * C31864) *
               C31966 +
           ((C24056 - C24057 + C24058 - C24059 + C24060 - C24061) * C118 +
            (C24062 - C24063 + C24064 - C24065 + C24066 - C24067) * C31864) *
               C23828) *
              C316 +
          (C24074 * C31959 +
           ((C24057 - C24056 + C24059 - C24058 + C24061 - C24060) * C118 +
            (C24063 - C24062 + C24065 - C24064 + C24067 - C24066) * C31864) *
               C31966 +
           ((C31777 * C1937 - C30883 * C1928 + C31785 * C1938 - C30879 * C1929 +
             C17324 * C1939 - C30889 * C1930) *
                C118 +
            (C31777 * C1946 - C30883 * C1940 + C31785 * C1947 - C30879 * C1941 +
             C17324 * C1948 - C30889 * C1942) *
                C31864) *
               C23828) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
              C17324 * C128 - C30889 * C121) *
                 C118 +
             (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
              C17324 * C142 - C30889 * C133) *
                 C31864) *
                C31959 +
            ((C18525 - C18526 + C18527 - C18528 + C18529 - C18530) * C118 +
             (C18531 - C18532 + C18533 - C18534 + C18535 - C18536) * C31864) *
                C31966 +
            C24074 * C23828) *
               C530 +
           (((C18526 - C18525 + C18528 - C18527 + C18530 - C18529) * C118 +
             (C18532 - C18531 + C18534 - C18533 + C18536 - C18535) * C31864) *
                C31959 +
            ((C18537 - C18538 + C18539 - C18540 + C18541 - C18542) * C118 +
             (C18543 - C18544 + C18545 - C18546 + C18547 - C18548) * C31864) *
                C31966 +
            ((C24056 - C24057 + C24058 - C24059 + C24060 - C24061) * C118 +
             (C24062 - C24063 + C24064 - C24065 + C24066 - C24067) * C31864) *
                C23828) *
               C531) *
              C31821 * C442 +
          ((((C30883 * C120 - C31777 * C127 + C30879 * C121 - C31785 * C128 +
              C30889 * C122 - C17324 * C129) *
                 C118 +
             (C30883 * C132 - C31777 * C141 + C30879 * C133 - C31785 * C142 +
              C30889 * C134 - C17324 * C143) *
                 C31864) *
                C31959 +
            ((C18961 - C18962 + C18963 - C18964 + C18965 - C18966) * C118 +
             (C18967 - C18968 + C18969 - C18970 + C18971 - C18972) * C31864) *
                C31966 +
            ((C24367 - C24368 + C24369 - C24370 + C24371 - C24372) * C118 +
             (C24373 - C24374 + C24375 - C24376 + C24377 - C24378) * C31864) *
                C23828) *
               C530 +
           (((C18962 - C18961 + C18964 - C18963 + C18966 - C18965) * C118 +
             (C18968 - C18967 + C18970 - C18969 + C18972 - C18971) * C31864) *
                C31959 +
            ((C24368 - C24367 + C24370 - C24369 + C24372 - C24371) * C118 +
             (C24374 - C24373 + C24376 - C24375 + C24378 - C24377) * C31864) *
                C31966 +
            ((C31777 * C1932 - C30883 * C1926 + C31785 * C1933 -
              C30879 * C1927 + C17324 * C2295 - C30889 * C2294) *
                 C118 +
             (C31777 * C1944 - C30883 * C1935 + C31785 * C1945 -
              C30879 * C1936 + C17324 * C2297 - C30889 * C2296) *
                 C31864) *
                C23828) *
               C531) *
              C31821 * C443)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
             C17324 * C128 - C30889 * C121) *
                C118 +
            (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
             C17324 * C142 - C30889 * C133) *
                C31864) *
               C31959 +
           ((C18525 - C18526 + C18527 - C18528 + C18529 - C18530) * C118 +
            (C18531 - C18532 + C18533 - C18534 + C18535 - C18536) * C31864) *
               C31966 +
           ((C18538 - C18537 + C18540 - C18539 + C18542 - C18541) * C118 +
            (C18544 - C18543 + C18546 - C18545 + C18548 - C18547) * C31864) *
               C23828) *
              C31835 * C31821 * C110 +
          (((C30883 * C120 - C31777 * C127 + C30879 * C121 - C31785 * C128 +
             C30889 * C122 - C17324 * C129) *
                C118 +
            (C30883 * C132 - C31777 * C141 + C30879 * C133 - C31785 * C142 +
             C30889 * C134 - C17324 * C143) *
                C31864) *
               C31959 +
           ((C18961 - C18962 + C18963 - C18964 + C18965 - C18966) * C118 +
            (C18967 - C18968 + C18969 - C18970 + C18971 - C18972) * C31864) *
               C31966 +
           ((C30883 * C324 - C31777 * C339 + C30879 * C325 - C31785 * C340 +
             C30889 * C326 - C17324 * C341) *
                C118 +
            (C30883 * C344 - C31777 * C354 + C30879 * C345 - C31785 * C355 +
             C30889 * C346 - C17324 * C356) *
                C31864) *
               C23828) *
              C31835 * C31821 * C111 +
          (((C31777 * C128 - C30883 * C121 + C31785 * C129 - C30879 * C122 +
             C17324 * C130 - C30889 * C123) *
                C118 +
            (C31777 * C142 - C30883 * C133 + C31785 * C143 - C30879 * C134 +
             C17324 * C144 - C30889 * C135) *
                C31864) *
               C31959 +
           ((C31777 * C330 - C30883 * C320 + C31785 * C331 - C30879 * C321 +
             C17324 * C332 - C30889 * C322) *
                C118 +
            (C31777 * C350 - C30883 * C335 + C31785 * C351 - C30879 * C336 +
             C17324 * C352 - C30889 * C337) *
                C31864) *
               C31966 +
           ((C31777 * C340 - C30883 * C325 + C31785 * C341 - C30879 * C326 +
             C17324 * C342 - C30889 * C327) *
                C118 +
            (C31777 * C355 - C30883 * C345 + C31785 * C356 - C30879 * C346 +
             C17324 * C357 - C30889 * C347) *
                C31864) *
               C23828) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31777 * C126 - C30883 * C119 + C31785 * C127 - C30879 * C120 +
             C17324 * C128 - C30889 * C121) *
                C118 +
            (C31777 * C140 - C30883 * C131 + C31785 * C141 - C30879 * C132 +
             C17324 * C142 - C30889 * C133) *
                C31864) *
               C31959 +
           ((C18525 - C18526 + C18527 - C18528 + C18529 - C18530) * C118 +
            (C18531 - C18532 + C18533 - C18534 + C18535 - C18536) * C31864) *
               C31966 +
           ((C18538 - C18537 + C18540 - C18539 + C18542 - C18541) * C118 +
            (C18544 - C18543 + C18546 - C18545 + C18548 - C18547) * C31864) *
               C23828) *
              C31835 * C209 +
          (((C17446 - C17445 + C17448 - C17447 + C17450 - C17449) * C118 +
            (C17452 - C17451 + C17454 - C17453 + C17456 - C17455) * C31864) *
               C31959 +
           (C19185 * C118 + C19186 * C31864) * C31966 +
           ((C18549 - C18550 + C18551 - C18552 + C18553 - C18554) * C118 +
            (C18555 - C18556 + C18557 - C18558 + C18559 - C18560) * C31864) *
               C23828) *
              C31835 * C210 +
          ((C17489 * C118 + C17490 * C31864) * C31959 +
           ((C18076 - C18075 + C18078 - C18077 + C18080 - C18079) * C118 +
            (C18082 - C18081 + C18084 - C18083 + C18086 - C18085) * C31864) *
               C31966 +
           ((C31777 * C1071 - C30883 * C1056 + C31785 * C1072 - C30879 * C1057 +
             C17324 * C1073 - C30889 * C1058) *
                C118 +
            (C31777 * C1083 - C30883 * C1074 + C31785 * C1084 - C30879 * C1075 +
             C17324 * C1085 - C30889 * C1076) *
                C31864) *
               C23828) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
              C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
                 C118 +
             (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
              C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
                 C31864) *
                C20324 +
            ((C20523 - C20524 + C20525 - C20526 + C20527 - C20528 + C20529 -
              C20530) *
                 C118 +
             (C20531 - C20532 + C20533 - C20534 + C20535 - C20536 + C20537 -
              C20538) *
                 C31864) *
                C31963) *
               C31835 * C440 +
           (((C14737 - C14736 + C14739 - C14738 + C14741 - C14740 + C14743 -
              C14742) *
                 C118 +
             (C14745 - C14744 + C14747 - C14746 + C14749 - C14748 + C14751 -
              C14750) *
                 C31864) *
                C20324 +
            ((C15272 - C15273 + C15274 - C15275 + C15276 - C15277 + C15278 -
              C15279) *
                 C118 +
             (C15280 - C15281 + C15282 - C15283 + C15284 - C15285 + C15286 -
              C15287) *
                 C31864) *
                C31963) *
               C31835 * C441) *
              C442 +
          ((((C14631 * C120 - C32189 * C127 + C14632 * C121 - C32182 * C128 +
              C14633 * C122 - C32169 * C129 + C14634 * C123 - C32152 * C130) *
                 C118 +
             (C14631 * C132 - C32189 * C141 + C14632 * C133 - C32182 * C142 +
              C14633 * C134 - C32169 * C143 + C14634 * C135 - C32152 * C144) *
                 C31864) *
                C20324 +
            ((C14631 * C319 - C32189 * C329 + C14632 * C320 - C32182 * C330 +
              C14633 * C321 - C32169 * C331 + C14634 * C322 - C32152 * C332) *
                 C118 +
             (C14631 * C334 - C32189 * C349 + C14632 * C335 - C32182 * C350 +
              C14633 * C336 - C32169 * C351 + C14634 * C337 - C32152 * C352) *
                 C31864) *
                C31963) *
               C31835 * C440 +
           (((C14997 - C14996 + C14999 - C14998 + C15001 - C15000 + C15003 -
              C15002) *
                 C118 +
             (C15005 - C15004 + C15007 - C15006 + C15009 - C15008 + C15011 -
              C15010) *
                 C31864) *
                C20324 +
            ((C32189 * C624 - C14631 * C619 + C32182 * C625 - C14632 * C620 +
              C32169 * C626 - C14633 * C621 + C32152 * C627 - C14634 * C622) *
                 C118 +
             (C32189 * C634 - C14631 * C629 + C32182 * C635 - C14632 * C630 +
              C32169 * C636 - C14633 * C631 + C32152 * C637 - C14634 * C632) *
                 C31864) *
                C31963) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                 C757 +
             (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                 C32183 +
             (C15496 - C15497 + C15498 - C15499) * C758 +
             (C15500 - C15501 + C15502 - C15503) * C32171 + C15536 * C759 +
             C15537 * C32148) *
                C20324 +
            ((C16530 - C16531 + C16532 - C16533) * C757 +
             (C16534 - C16535 + C16536 - C16537) * C32183 + C17207 * C758 +
             C17208 * C32171 + C19483 * C759 + C19484 * C32148) *
                C31963) *
               C31835 * C440 +
           (((C15497 - C15496 + C15499 - C15498) * C757 +
             (C15501 - C15500 + C15503 - C15502) * C32183 +
             (C15505 - C15504 + C15507 - C15506) * C758 +
             (C15509 - C15508 + C15511 - C15510) * C32171 +
             (C15513 - C15512 + C15515 - C15514) * C759 +
             (C15517 - C15516 + C15519 - C15518) * C32148) *
                C20324 +
            (C17209 * C757 + C17210 * C32183 + C20225 * C758 + C20226 * C32171 +
             (C16068 - C16069 + C16070 - C16071) * C759 +
             (C16072 - C16073 + C16074 - C16075) * C32148) *
                C31963) *
               C31835 * C441) *
              C442 +
          ((((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                 C757 +
             (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                 C32183 +
             (C15768 - C15769 + C15770 - C15771) * C758 +
             (C15772 - C15773 + C15774 - C15775) * C32171 +
             (C15776 - C15777 + C15778 - C15779) * C759 +
             (C15780 - C15781 + C15782 - C15783) * C32148) *
                C20324 +
            ((C16985 - C16986 + C16987 - C16988) * C757 +
             (C16989 - C16990 + C16991 - C16992) * C32183 +
             (C16775 - C16776 + C16777 - C16778) * C758 +
             (C16779 - C16780 + C16781 - C16782) * C32171 +
             (C19825 - C19826 + C19827 - C19828) * C759 +
             (C19829 - C19830 + C19831 - C19832) * C32148) *
                C31963) *
               C31835 * C440 +
           (((C15769 - C15768 + C15771 - C15770) * C757 +
             (C15773 - C15772 + C15775 - C15774) * C32183 +
             (C15777 - C15776 + C15779 - C15778) * C758 +
             (C15781 - C15780 + C15783 - C15782) * C32171 +
             (C15785 - C15784 + C15787 - C15786) * C759 +
             (C15789 - C15788 + C15791 - C15790) * C32148) *
                C20324 +
            ((C16776 - C16775 + C16778 - C16777) * C757 +
             (C16780 - C16779 + C16782 - C16781) * C32183 +
             (C19826 - C19825 + C19828 - C19827) * C758 +
             (C19830 - C19829 + C19832 - C19831) * C32171 +
             (C15385 * C1560 - C15391 * C1557 + C31782 * C1561 -
              C15392 * C1558) *
                 C759 +
             (C15385 * C1566 - C15391 * C1563 + C31782 * C1567 -
              C15392 * C1564) *
                 C32148) *
                C31963) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
              C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
                 C118 +
             (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
              C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
                 C31864) *
                C20324 +
            ((C20523 - C20524 + C20525 - C20526 + C20527 - C20528 + C20529 -
              C20530) *
                 C118 +
             (C20531 - C20532 + C20533 - C20534 + C20535 - C20536 + C20537 -
              C20538) *
                 C31864) *
                C31963) *
               C530 +
           (((C20524 - C20523 + C20526 - C20525 + C20528 - C20527 + C20530 -
              C20529) *
                 C118 +
             (C20532 - C20531 + C20534 - C20533 + C20536 - C20535 + C20538 -
              C20537) *
                 C31864) *
                C20324 +
            ((C20539 - C20540 + C20541 - C20542 + C20543 - C20544 + C20545 -
              C20546) *
                 C118 +
             (C20547 - C20548 + C20549 - C20550 + C20551 - C20552 + C20553 -
              C20554) *
                 C31864) *
                C31963) *
               C531) *
              C440 +
          ((((C14737 - C14736 + C14739 - C14738 + C14741 - C14740 + C14743 -
              C14742) *
                 C118 +
             (C14745 - C14744 + C14747 - C14746 + C14749 - C14748 + C14751 -
              C14750) *
                 C31864) *
                C20324 +
            ((C15272 - C15273 + C15274 - C15275 + C15276 - C15277 + C15278 -
              C15279) *
                 C118 +
             (C15280 - C15281 + C15282 - C15283 + C15284 - C15285 + C15286 -
              C15287) *
                 C31864) *
                C31963) *
               C530 +
           (((C15273 - C15272 + C15275 - C15274 + C15277 - C15276 + C15279 -
              C15278) *
                 C118 +
             (C15281 - C15280 + C15283 - C15282 + C15285 - C15284 + C15287 -
              C15286) *
                 C31864) *
                C20324 +
            ((C32189 * C1065 - C14631 * C1053 + C32182 * C1066 -
              C14632 * C1054 + C32169 * C1067 - C14633 * C1055 +
              C32152 * C2145 - C14634 * C2144) *
                 C118 +
             (C32189 * C1080 - C14631 * C1068 + C32182 * C1081 -
              C14632 * C1069 + C32169 * C1082 - C14633 * C1070 +
              C32152 * C2147 - C14634 * C2146) *
                 C31864) *
                C31963) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                 C757 +
             (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                 C32183 +
             (C15496 - C15497 + C15498 - C15499) * C758 +
             (C15500 - C15501 + C15502 - C15503) * C32171 + C15536 * C759 +
             C15537 * C32148) *
                C20324 +
            ((C16530 - C16531 + C16532 - C16533) * C757 +
             (C16534 - C16535 + C16536 - C16537) * C32183 + C17207 * C758 +
             C17208 * C32171 + C19483 * C759 + C19484 * C32148) *
                C31963) *
               C530 +
           (((C16531 - C16530 + C16533 - C16532) * C757 +
             (C16535 - C16534 + C16537 - C16536) * C32183 + C17209 * C758 +
             C17210 * C32171 + C20225 * C759 + C20226 * C32148) *
                C20324 +
            ((C16539 - C16538 + C16541 - C16540) * C757 +
             (C16543 - C16542 + C16545 - C16544) * C32183 + C17211 * C758 +
             C17212 * C32171 + (C16376 - C16377 + C16378 - C16379) * C759 +
             (C16380 - C16381 + C16382 - C16383) * C32148) *
                C31963) *
               C531) *
              C440 +
          ((((C15497 - C15496 + C15499 - C15498) * C757 +
             (C15501 - C15500 + C15503 - C15502) * C32183 +
             (C15505 - C15504 + C15507 - C15506) * C758 +
             (C15509 - C15508 + C15511 - C15510) * C32171 +
             (C15513 - C15512 + C15515 - C15514) * C759 +
             (C15517 - C15516 + C15519 - C15518) * C32148) *
                C20324 +
            (C17209 * C757 + C17210 * C32183 + C20225 * C758 + C20226 * C32171 +
             (C16068 - C16069 + C16070 - C16071) * C759 +
             (C16072 - C16073 + C16074 - C16075) * C32148) *
                C31963) *
               C530 +
           ((C17207 * C757 + C17208 * C32183 + C19483 * C758 + C19484 * C32171 +
             (C16069 - C16068 + C16071 - C16070) * C759 +
             (C16073 - C16072 + C16075 - C16074) * C32148) *
                C20324 +
            (C16570 * C757 + C16571 * C32183 +
             (C16377 - C16376 + C16379 - C16378) * C758 +
             (C16381 - C16380 + C16383 - C16382) * C32171 +
             (C15385 * C6149 - C15391 * C6145 + C31782 * C6986 -
              C15392 * C6985) *
                 C759 +
             (C15385 * C6154 - C15391 * C6150 + C31782 * C6988 -
              C15392 * C6987) *
                 C32148) *
                C31963) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
             C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
                C118 +
            (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
             C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
                C31864) *
               C20324 +
           ((C32189 * C328 - C14631 * C318 + C32182 * C329 - C14632 * C319 +
             C32169 * C330 - C14633 * C320 + C32152 * C331 - C14634 * C321) *
                C118 +
            (C32189 * C348 - C14631 * C333 + C32182 * C349 - C14632 * C334 +
             C32169 * C350 - C14633 * C335 + C32152 * C351 - C14634 * C336) *
                C31864) *
               C31963) *
              C31835 * C209 +
          (((C14737 - C14736 + C14739 - C14738 + C14741 - C14740 + C14743 -
             C14742) *
                C118 +
            (C14745 - C14744 + C14747 - C14746 + C14749 - C14748 + C14751 -
             C14750) *
                C31864) *
               C20324 +
           ((C15272 - C15273 + C15274 - C15275 + C15276 - C15277 + C15278 -
             C15279) *
                C118 +
            (C15280 - C15281 + C15282 - C15283 + C15284 - C15285 + C15286 -
             C15287) *
                C31864) *
               C31963) *
              C31835 * C210 +
          (((C14753 - C14752 + C14755 - C14754 + C14757 - C14756 + C14759 -
             C14758) *
                C118 +
            (C14761 - C14760 + C14763 - C14762 + C14765 - C14764 + C14767 -
             C14766) *
                C31864) *
               C20324 +
           ((C32189 * C1059 - C14631 * C1050 + C32182 * C1060 - C14632 * C1051 +
             C32169 * C1061 - C14633 * C1052 + C32152 * C1407 -
             C14634 * C1406) *
                C118 +
            (C32189 * C1077 - C14631 * C1062 + C32182 * C1078 - C14632 * C1063 +
             C32169 * C1079 - C14633 * C1064 + C32152 * C1409 -
             C14634 * C1408) *
                C31864) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
             C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
                C118 +
            (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
             C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
                C31864) *
               C20324 +
           ((C32189 * C328 - C14631 * C318 + C32182 * C329 - C14632 * C319 +
             C32169 * C330 - C14633 * C320 + C32152 * C331 - C14634 * C321) *
                C118 +
            (C32189 * C348 - C14631 * C333 + C32182 * C349 - C14632 * C334 +
             C32169 * C350 - C14633 * C335 + C32152 * C351 - C14634 * C336) *
                C31864) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C14631 * C120 - C32189 * C127 + C14632 * C121 - C32182 * C128 +
             C14633 * C122 - C32169 * C129 + C14634 * C123 - C32152 * C130) *
                C118 +
            (C14631 * C132 - C32189 * C141 + C14632 * C133 - C32182 * C142 +
             C14633 * C134 - C32169 * C143 + C14634 * C135 - C32152 * C144) *
                C31864) *
               C20324 +
           ((C14631 * C319 - C32189 * C329 + C14632 * C320 - C32182 * C330 +
             C14633 * C321 - C32169 * C331 + C14634 * C322 - C32152 * C332) *
                C118 +
            (C14631 * C334 - C32189 * C349 + C14632 * C335 - C32182 * C350 +
             C14633 * C336 - C32169 * C351 + C14634 * C337 - C32152 * C352) *
                C31864) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C32189 * C128 - C14631 * C121 + C32182 * C129 - C14632 * C122 +
             C32169 * C130 - C14633 * C123 + C32152 * C136 - C14634 * C124) *
                C118 +
            (C32189 * C142 - C14631 * C133 + C32182 * C143 - C14632 * C134 +
             C32169 * C144 - C14633 * C135 + C32152 * C145 - C14634 * C137) *
                C31864) *
               C20324 +
           ((C32189 * C330 - C14631 * C320 + C32182 * C331 - C14632 * C321 +
             C32169 * C332 - C14633 * C322 + C32152 * C533 - C14634 * C532) *
                C118 +
            (C32189 * C350 - C14631 * C335 + C32182 * C351 - C14632 * C336 +
             C32169 * C352 - C14633 * C337 + C32152 * C535 - C14634 * C534) *
                C31864) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
             C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
                C118 +
            (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
             C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
                C31864) *
               C20324 +
           ((C20523 - C20524 + C20525 - C20526 + C20527 - C20528 + C20529 -
             C20530) *
                C118 +
            (C20531 - C20532 + C20533 - C20534 + C20535 - C20536 + C20537 -
             C20538) *
                C31864) *
               C31963) *
              C315 +
          (((C20524 - C20523 + C20526 - C20525 + C20528 - C20527 + C20530 -
             C20529) *
                C118 +
            (C20532 - C20531 + C20534 - C20533 + C20536 - C20535 + C20538 -
             C20537) *
                C31864) *
               C20324 +
           ((C20539 - C20540 + C20541 - C20542 + C20543 - C20544 + C20545 -
             C20546) *
                C118 +
            (C20547 - C20548 + C20549 - C20550 + C20551 - C20552 + C20553 -
             C20554) *
                C31864) *
               C31963) *
              C316 +
          (((C20540 - C20539 + C20542 - C20541 + C20544 - C20543 + C20546 -
             C20545) *
                C118 +
            (C20548 - C20547 + C20550 - C20549 + C20552 - C20551 + C20554 -
             C20553) *
                C31864) *
               C20324 +
           ((C32189 * C1931 - C14631 * C1925 + C32182 * C1932 - C14632 * C1926 +
             C32169 * C1933 - C14633 * C1927 + C32152 * C2295 -
             C14634 * C2294) *
                C118 +
            (C32189 * C1943 - C14631 * C1934 + C32182 * C1944 - C14632 * C1935 +
             C32169 * C1945 - C14633 * C1936 + C32152 * C2297 -
             C14634 * C2296) *
                C31864) *
               C31963) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C757 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C32183 +
            (C15496 - C15497 + C15498 - C15499) * C758 +
            (C15500 - C15501 + C15502 - C15503) * C32171 + C15536 * C759 +
            C15537 * C32148) *
               C20324 +
           ((C16530 - C16531 + C16532 - C16533) * C757 +
            (C16534 - C16535 + C16536 - C16537) * C32183 + C17207 * C758 +
            C17208 * C32171 + C19483 * C759 + C19484 * C32148) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                C757 +
            (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                C32183 +
            (C15768 - C15769 + C15770 - C15771) * C758 +
            (C15772 - C15773 + C15774 - C15775) * C32171 +
            (C15776 - C15777 + C15778 - C15779) * C759 +
            (C15780 - C15781 + C15782 - C15783) * C32148) *
               C20324 +
           ((C16985 - C16986 + C16987 - C16988) * C757 +
            (C16989 - C16990 + C16991 - C16992) * C32183 +
            (C16775 - C16776 + C16777 - C16778) * C758 +
            (C16779 - C16780 + C16781 - C16782) * C32171 +
            (C19825 - C19826 + C19827 - C19828) * C759 +
            (C19829 - C19830 + C19831 - C19832) * C32148) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C15385 * C128 - C15391 * C121 + C31782 * C129 - C15392 * C122) *
                C757 +
            (C15385 * C142 - C15391 * C133 + C31782 * C143 - C15392 * C134) *
                C32183 +
            (C15385 * C225 - C15391 * C215 + C31782 * C226 - C15392 * C216) *
                C758 +
            (C15385 * C245 - C15391 * C230 + C31782 * C246 - C15392 * C231) *
                C32171 +
            (C15385 * C235 - C15391 * C220 + C31782 * C236 - C15392 * C221) *
                C759 +
            (C15385 * C250 - C15391 * C240 + C31782 * C251 - C15392 * C241) *
                C32148) *
               C20324 +
           ((C15385 * C330 - C15391 * C320 + C31782 * C331 - C15392 * C321) *
                C757 +
            (C15385 * C350 - C15391 * C335 + C31782 * C351 - C15392 * C336) *
                C32183 +
            (C15385 * C625 - C15391 * C620 + C31782 * C626 - C15392 * C621) *
                C758 +
            (C15385 * C635 - C15391 * C630 + C31782 * C636 - C15392 * C631) *
                C32171 +
            (C15385 * C1061 - C15391 * C1052 + C31782 * C1407 -
             C15392 * C1406) *
                C759 +
            (C15385 * C1079 - C15391 * C1064 + C31782 * C1409 -
             C15392 * C1408) *
                C32148) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C757 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C32183 +
            (C15496 - C15497 + C15498 - C15499) * C758 +
            (C15500 - C15501 + C15502 - C15503) * C32171 + C15536 * C759 +
            C15537 * C32148) *
               C20324 +
           ((C16530 - C16531 + C16532 - C16533) * C757 +
            (C16534 - C16535 + C16536 - C16537) * C32183 + C17207 * C758 +
            C17208 * C32171 + C19483 * C759 + C19484 * C32148) *
               C31963) *
              C31835 * C209 +
          (((C15497 - C15496 + C15499 - C15498) * C757 +
            (C15501 - C15500 + C15503 - C15502) * C32183 +
            (C15505 - C15504 + C15507 - C15506) * C758 +
            (C15509 - C15508 + C15511 - C15510) * C32171 +
            (C15513 - C15512 + C15515 - C15514) * C759 +
            (C15517 - C15516 + C15519 - C15518) * C32148) *
               C20324 +
           (C17209 * C757 + C17210 * C32183 + C20225 * C758 + C20226 * C32171 +
            (C16068 - C16069 + C16070 - C16071) * C759 +
            (C16072 - C16073 + C16074 - C16075) * C32148) *
               C31963) *
              C31835 * C210 +
          ((C15536 * C757 + C15537 * C32183 + C15538 * C758 + C15539 * C32171 +
            (C15521 - C15520 + C15523 - C15522) * C759 +
            (C15525 - C15524 + C15527 - C15526) * C32148) *
               C20324 +
           (C19483 * C757 + C19484 * C32183 +
            (C16069 - C16068 + C16071 - C16070) * C758 +
            (C16073 - C16072 + C16075 - C16074) * C32171 +
            (C15385 * C6147 - C15391 * C6144 + C31782 * C6341 -
             C15392 * C6340) *
                C759 +
            (C15385 * C6153 - C15391 * C6148 + C31782 * C6343 -
             C15392 * C6342) *
                C32148) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C757 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C32183 +
            (C15496 - C15497 + C15498 - C15499) * C758 +
            (C15500 - C15501 + C15502 - C15503) * C32171 + C15536 * C759 +
            C15537 * C32148) *
               C20324 +
           ((C16530 - C16531 + C16532 - C16533) * C757 +
            (C16534 - C16535 + C16536 - C16537) * C32183 + C17207 * C758 +
            C17208 * C32171 + C19483 * C759 + C19484 * C32148) *
               C31963) *
              C315 +
          (((C16531 - C16530 + C16533 - C16532) * C757 +
            (C16535 - C16534 + C16537 - C16536) * C32183 + C17209 * C758 +
            C17210 * C32171 + C20225 * C759 + C20226 * C32148) *
               C20324 +
           ((C16539 - C16538 + C16541 - C16540) * C757 +
            (C16543 - C16542 + C16545 - C16544) * C32183 + C17211 * C758 +
            C17212 * C32171 + (C16376 - C16377 + C16378 - C16379) * C759 +
            (C16380 - C16381 + C16382 - C16383) * C32148) *
               C31963) *
              C316 +
          ((C16572 * C757 + C16573 * C32183 + C16570 * C758 + C16571 * C32171 +
            (C16377 - C16376 + C16379 - C16378) * C759 +
            (C16381 - C16380 + C16383 - C16382) * C32148) *
               C20324 +
           ((C16551 - C16550 + C16553 - C16552) * C757 +
            (C16555 - C16554 + C16557 - C16556) * C32183 +
            (C16559 - C16558 + C16561 - C16560) * C758 +
            (C16563 - C16562 + C16565 - C16564) * C32171 +
            (C15385 * C6795 - C15391 * C6792 + C31782 * C7152 -
             C15392 * C7151) *
                C759 +
            (C15385 * C6801 - C15391 * C6796 + C31782 * C7154 -
             C15392 * C7153) *
                C32148) *
               C31963) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
              C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
                 C118 +
             (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
              C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
                 C31864) *
                C20324 +
            ((C20523 - C20524 + C20525 - C20526 + C20527 - C20528 + C20529 -
              C20530) *
                 C118 +
             (C20531 - C20532 + C20533 - C20534 + C20535 - C20536 + C20537 -
              C20538) *
                 C31864) *
                C31963) *
               C530 +
           (((C20524 - C20523 + C20526 - C20525 + C20528 - C20527 + C20530 -
              C20529) *
                 C118 +
             (C20532 - C20531 + C20534 - C20533 + C20536 - C20535 + C20538 -
              C20537) *
                 C31864) *
                C20324 +
            ((C20539 - C20540 + C20541 - C20542 + C20543 - C20544 + C20545 -
              C20546) *
                 C118 +
             (C20547 - C20548 + C20549 - C20550 + C20551 - C20552 + C20553 -
              C20554) *
                 C31864) *
                C31963) *
               C531) *
              C31821 * C442 +
          ((((C14631 * C120 - C32189 * C127 + C14632 * C121 - C32182 * C128 +
              C14633 * C122 - C32169 * C129 + C14634 * C123 - C32152 * C130) *
                 C118 +
             (C14631 * C132 - C32189 * C141 + C14632 * C133 - C32182 * C142 +
              C14633 * C134 - C32169 * C143 + C14634 * C135 - C32152 * C144) *
                 C31864) *
                C20324 +
            ((C20815 - C20816 + C20817 - C20818 + C20819 - C20820 + C20821 -
              C20822) *
                 C118 +
             (C20823 - C20824 + C20825 - C20826 + C20827 - C20828 + C20829 -
              C20830) *
                 C31864) *
                C31963) *
               C530 +
           (((C20816 - C20815 + C20818 - C20817 + C20820 - C20819 + C20822 -
              C20821) *
                 C118 +
             (C20824 - C20823 + C20826 - C20825 + C20828 - C20827 + C20830 -
              C20829) *
                 C31864) *
                C20324 +
            ((C32189 * C339 - C14631 * C324 + C32182 * C340 - C14632 * C325 +
              C32169 * C341 - C14633 * C326 + C32152 * C342 - C14634 * C327) *
                 C118 +
             (C32189 * C354 - C14631 * C344 + C32182 * C355 - C14632 * C345 +
              C32169 * C356 - C14633 * C346 + C32152 * C357 - C14634 * C347) *
                 C31864) *
                C31963) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                 C757 +
             (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                 C32183 +
             (C15496 - C15497 + C15498 - C15499) * C758 +
             (C15500 - C15501 + C15502 - C15503) * C32171 + C15536 * C759 +
             C15537 * C32148) *
                C20324 +
            ((C16530 - C16531 + C16532 - C16533) * C757 +
             (C16534 - C16535 + C16536 - C16537) * C32183 + C17207 * C758 +
             C17208 * C32171 + C19483 * C759 + C19484 * C32148) *
                C31963) *
               C530 +
           (((C16531 - C16530 + C16533 - C16532) * C757 +
             (C16535 - C16534 + C16537 - C16536) * C32183 + C17209 * C758 +
             C17210 * C32171 + C20225 * C759 + C20226 * C32148) *
                C20324 +
            ((C16539 - C16538 + C16541 - C16540) * C757 +
             (C16543 - C16542 + C16545 - C16544) * C32183 + C17211 * C758 +
             C17212 * C32171 + (C16376 - C16377 + C16378 - C16379) * C759 +
             (C16380 - C16381 + C16382 - C16383) * C32148) *
                C31963) *
               C531) *
              C31821 * C442 +
          ((((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                 C757 +
             (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                 C32183 +
             (C15768 - C15769 + C15770 - C15771) * C758 +
             (C15772 - C15773 + C15774 - C15775) * C32171 +
             (C15776 - C15777 + C15778 - C15779) * C759 +
             (C15780 - C15781 + C15782 - C15783) * C32148) *
                C20324 +
            ((C16985 - C16986 + C16987 - C16988) * C757 +
             (C16989 - C16990 + C16991 - C16992) * C32183 +
             (C16775 - C16776 + C16777 - C16778) * C758 +
             (C16779 - C16780 + C16781 - C16782) * C32171 +
             (C19825 - C19826 + C19827 - C19828) * C759 +
             (C19829 - C19830 + C19831 - C19832) * C32148) *
                C31963) *
               C530 +
           (((C16986 - C16985 + C16988 - C16987) * C757 +
             (C16990 - C16989 + C16992 - C16991) * C32183 +
             (C16776 - C16775 + C16778 - C16777) * C758 +
             (C16780 - C16779 + C16782 - C16781) * C32171 +
             (C19826 - C19825 + C19828 - C19827) * C759 +
             (C19830 - C19829 + C19832 - C19831) * C32148) *
                C20324 +
            ((C16994 - C16993 + C16996 - C16995) * C757 +
             (C16998 - C16997 + C17000 - C16999) * C32183 +
             (C16784 - C16783 + C16786 - C16785) * C758 +
             (C16788 - C16787 + C16790 - C16789) * C32171 +
             (C15385 * C1072 - C15391 * C1057 + C31782 * C1073 -
              C15392 * C1058) *
                 C759 +
             (C15385 * C1084 - C15391 * C1075 + C31782 * C1085 -
              C15392 * C1076) *
                 C32148) *
                C31963) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
             C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
                C118 +
            (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
             C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
                C31864) *
               C20324 +
           ((C32189 * C328 - C14631 * C318 + C32182 * C329 - C14632 * C319 +
             C32169 * C330 - C14633 * C320 + C32152 * C331 - C14634 * C321) *
                C118 +
            (C32189 * C348 - C14631 * C333 + C32182 * C349 - C14632 * C334 +
             C32169 * C350 - C14633 * C335 + C32152 * C351 - C14634 * C336) *
                C31864) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C14631 * C120 - C32189 * C127 + C14632 * C121 - C32182 * C128 +
             C14633 * C122 - C32169 * C129 + C14634 * C123 - C32152 * C130) *
                C118 +
            (C14631 * C132 - C32189 * C141 + C14632 * C133 - C32182 * C142 +
             C14633 * C134 - C32169 * C143 + C14634 * C135 - C32152 * C144) *
                C31864) *
               C20324 +
           ((C14631 * C319 - C32189 * C329 + C14632 * C320 - C32182 * C330 +
             C14633 * C321 - C32169 * C331 + C14634 * C322 - C32152 * C332) *
                C118 +
            (C14631 * C334 - C32189 * C349 + C14632 * C335 - C32182 * C350 +
             C14633 * C336 - C32169 * C351 + C14634 * C337 - C32152 * C352) *
                C31864) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C32189 * C128 - C14631 * C121 + C32182 * C129 - C14632 * C122 +
             C32169 * C130 - C14633 * C123 + C32152 * C136 - C14634 * C124) *
                C118 +
            (C32189 * C142 - C14631 * C133 + C32182 * C143 - C14632 * C134 +
             C32169 * C144 - C14633 * C135 + C32152 * C145 - C14634 * C137) *
                C31864) *
               C20324 +
           ((C32189 * C330 - C14631 * C320 + C32182 * C331 - C14632 * C321 +
             C32169 * C332 - C14633 * C322 + C32152 * C533 - C14634 * C532) *
                C118 +
            (C32189 * C350 - C14631 * C335 + C32182 * C351 - C14632 * C336 +
             C32169 * C352 - C14633 * C337 + C32152 * C535 - C14634 * C534) *
                C31864) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C32189 * C126 - C14631 * C119 + C32182 * C127 - C14632 * C120 +
             C32169 * C128 - C14633 * C121 + C32152 * C129 - C14634 * C122) *
                C118 +
            (C32189 * C140 - C14631 * C131 + C32182 * C141 - C14632 * C132 +
             C32169 * C142 - C14633 * C133 + C32152 * C143 - C14634 * C134) *
                C31864) *
               C20324 +
           ((C32189 * C328 - C14631 * C318 + C32182 * C329 - C14632 * C319 +
             C32169 * C330 - C14633 * C320 + C32152 * C331 - C14634 * C321) *
                C118 +
            (C32189 * C348 - C14631 * C333 + C32182 * C349 - C14632 * C334 +
             C32169 * C350 - C14633 * C335 + C32152 * C351 - C14634 * C336) *
                C31864) *
               C31963) *
              C31835 * C209 +
          (((C14737 - C14736 + C14739 - C14738 + C14741 - C14740 + C14743 -
             C14742) *
                C118 +
            (C14745 - C14744 + C14747 - C14746 + C14749 - C14748 + C14751 -
             C14750) *
                C31864) *
               C20324 +
           ((C15272 - C15273 + C15274 - C15275 + C15276 - C15277 + C15278 -
             C15279) *
                C118 +
            (C15280 - C15281 + C15282 - C15283 + C15284 - C15285 + C15286 -
             C15287) *
                C31864) *
               C31963) *
              C31835 * C210 +
          (((C14753 - C14752 + C14755 - C14754 + C14757 - C14756 + C14759 -
             C14758) *
                C118 +
            (C14761 - C14760 + C14763 - C14762 + C14765 - C14764 + C14767 -
             C14766) *
                C31864) *
               C20324 +
           ((C32189 * C1059 - C14631 * C1050 + C32182 * C1060 - C14632 * C1051 +
             C32169 * C1061 - C14633 * C1052 + C32152 * C1407 -
             C14634 * C1406) *
                C118 +
            (C32189 * C1077 - C14631 * C1062 + C32182 * C1078 - C14632 * C1063 +
             C32169 * C1079 - C14633 * C1064 + C32152 * C1409 -
             C14634 * C1408) *
                C31864) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C757 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C32183 +
            (C15496 - C15497 + C15498 - C15499) * C758 +
            (C15500 - C15501 + C15502 - C15503) * C32171 + C15536 * C759 +
            C15537 * C32148) *
               C20324 +
           ((C16530 - C16531 + C16532 - C16533) * C757 +
            (C16534 - C16535 + C16536 - C16537) * C32183 + C17207 * C758 +
            C17208 * C32171 + C19483 * C759 + C19484 * C32148) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C15391 * C120 - C15385 * C127 + C15392 * C121 - C31782 * C128) *
                C757 +
            (C15391 * C132 - C15385 * C141 + C15392 * C133 - C31782 * C142) *
                C32183 +
            (C15768 - C15769 + C15770 - C15771) * C758 +
            (C15772 - C15773 + C15774 - C15775) * C32171 +
            (C15776 - C15777 + C15778 - C15779) * C759 +
            (C15780 - C15781 + C15782 - C15783) * C32148) *
               C20324 +
           ((C16985 - C16986 + C16987 - C16988) * C757 +
            (C16989 - C16990 + C16991 - C16992) * C32183 +
            (C16775 - C16776 + C16777 - C16778) * C758 +
            (C16779 - C16780 + C16781 - C16782) * C32171 +
            (C19825 - C19826 + C19827 - C19828) * C759 +
            (C19829 - C19830 + C19831 - C19832) * C32148) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C15385 * C128 - C15391 * C121 + C31782 * C129 - C15392 * C122) *
                C757 +
            (C15385 * C142 - C15391 * C133 + C31782 * C143 - C15392 * C134) *
                C32183 +
            (C15385 * C225 - C15391 * C215 + C31782 * C226 - C15392 * C216) *
                C758 +
            (C15385 * C245 - C15391 * C230 + C31782 * C246 - C15392 * C231) *
                C32171 +
            (C15385 * C235 - C15391 * C220 + C31782 * C236 - C15392 * C221) *
                C759 +
            (C15385 * C250 - C15391 * C240 + C31782 * C251 - C15392 * C241) *
                C32148) *
               C20324 +
           ((C15385 * C330 - C15391 * C320 + C31782 * C331 - C15392 * C321) *
                C757 +
            (C15385 * C350 - C15391 * C335 + C31782 * C351 - C15392 * C336) *
                C32183 +
            (C15385 * C625 - C15391 * C620 + C31782 * C626 - C15392 * C621) *
                C758 +
            (C15385 * C635 - C15391 * C630 + C31782 * C636 - C15392 * C631) *
                C32171 +
            (C15385 * C1061 - C15391 * C1052 + C31782 * C1407 -
             C15392 * C1406) *
                C759 +
            (C15385 * C1079 - C15391 * C1064 + C31782 * C1409 -
             C15392 * C1408) *
                C32148) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C15385 * C126 - C15391 * C119 + C31782 * C127 - C15392 * C120) *
                C757 +
            (C15385 * C140 - C15391 * C131 + C31782 * C141 - C15392 * C132) *
                C32183 +
            (C15496 - C15497 + C15498 - C15499) * C758 +
            (C15500 - C15501 + C15502 - C15503) * C32171 + C15536 * C759 +
            C15537 * C32148) *
               C20324 +
           ((C16530 - C16531 + C16532 - C16533) * C757 +
            (C16534 - C16535 + C16536 - C16537) * C32183 + C17207 * C758 +
            C17208 * C32171 + C19483 * C759 + C19484 * C32148) *
               C31963) *
              C31835 * C209 +
          (((C15497 - C15496 + C15499 - C15498) * C757 +
            (C15501 - C15500 + C15503 - C15502) * C32183 +
            (C15505 - C15504 + C15507 - C15506) * C758 +
            (C15509 - C15508 + C15511 - C15510) * C32171 +
            (C15513 - C15512 + C15515 - C15514) * C759 +
            (C15517 - C15516 + C15519 - C15518) * C32148) *
               C20324 +
           (C17209 * C757 + C17210 * C32183 + C20225 * C758 + C20226 * C32171 +
            (C16068 - C16069 + C16070 - C16071) * C759 +
            (C16072 - C16073 + C16074 - C16075) * C32148) *
               C31963) *
              C31835 * C210 +
          ((C15536 * C757 + C15537 * C32183 + C15538 * C758 + C15539 * C32171 +
            (C15521 - C15520 + C15523 - C15522) * C759 +
            (C15525 - C15524 + C15527 - C15526) * C32148) *
               C20324 +
           (C19483 * C757 + C19484 * C32183 +
            (C16069 - C16068 + C16071 - C16070) * C758 +
            (C16073 - C16072 + C16075 - C16074) * C32171 +
            (C15385 * C6147 - C15391 * C6144 + C31782 * C6341 -
             C15392 * C6340) *
                C759 +
            (C15385 * C6153 - C15391 * C6148 + C31782 * C6343 -
             C15392 * C6342) *
                C32148) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
             C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
                C2600 +
            (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
             C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
                C32117 +
            (C2701 - C2702 + C2703 - C2704 + C2705 - C2706 + C2707 - C2708) *
                C2601 +
            (C2709 - C2710 + C2711 - C2712 + C2713 - C2714 + C2715 - C2716) *
                C31923) *
               C31876 * C31835 * C440 +
           ((C2702 - C2701 + C2704 - C2703 + C2706 - C2705 + C2708 - C2707) *
                C2600 +
            (C2710 - C2709 + C2712 - C2711 + C2714 - C2713 + C2716 - C2715) *
                C32117 +
            (C2717 - C2718 + C2719 - C2720 + C2721 - C2722 + C2723 - C2724) *
                C2601 +
            (C2725 - C2726 + C2727 - C2728 + C2729 - C2730 + C2731 - C2732) *
                C31923) *
               C31876 * C31835 * C441) *
              C442 +
          (((C2596 * C120 - C2590 * C127 + C2597 * C121 - C2591 * C128 +
             C2598 * C122 - C2592 * C129 + C2599 * C123 - C32152 * C130) *
                C2600 +
            (C2596 * C132 - C2590 * C141 + C2597 * C133 - C2591 * C142 +
             C2598 * C134 - C2592 * C143 + C2599 * C135 - C32152 * C144) *
                C32117 +
            (C2961 - C2962 + C2963 - C2964 + C2965 - C2966 + C2967 - C2968) *
                C2601 +
            (C2969 - C2970 + C2971 - C2972 + C2973 - C2974 + C2975 - C2976) *
                C31923) *
               C31876 * C31835 * C440 +
           ((C2962 - C2961 + C2964 - C2963 + C2966 - C2965 + C2968 - C2967) *
                C2600 +
            (C2970 - C2969 + C2972 - C2971 + C2974 - C2973 + C2976 - C2975) *
                C32117 +
            (C2590 * C234 - C2596 * C219 + C2591 * C235 - C2597 * C220 +
             C2592 * C236 - C2598 * C221 + C32152 * C237 - C2599 * C222) *
                C2601 +
            (C2590 * C249 - C2596 * C239 + C2591 * C250 - C2597 * C240 +
             C2592 * C251 - C2598 * C241 + C32152 * C252 - C2599 * C242) *
                C31923) *
               C31876 * C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C7429 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C7423 +
            (C7532 - C7533 + C7534 - C7535) * C7430 +
            (C7536 - C7537 + C7538 - C7539) * C7424 + C7572 * C7431 +
            C7573 * C7425 + C7574 * C7432 + C7575 * C32158) *
               C31876 * C31835 * C440 +
           ((C7533 - C7532 + C7535 - C7534) * C7429 +
            (C7537 - C7536 + C7539 - C7538) * C7423 +
            (C7541 - C7540 + C7543 - C7542) * C7430 +
            (C7545 - C7544 + C7547 - C7546) * C7424 +
            (C7549 - C7548 + C7551 - C7550) * C7431 +
            (C7553 - C7552 + C7555 - C7554) * C7425 +
            (C7556 - C7557 + C7558 - C7559) * C7432 +
            (C7560 - C7561 + C7562 - C7563) * C32158) *
               C31876 * C31835 * C441) *
              C442 +
          (((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                C7429 +
            (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                C7423 +
            (C7804 - C7805 + C7806 - C7807) * C7430 +
            (C7808 - C7809 + C7810 - C7811) * C7424 +
            (C7812 - C7813 + C7814 - C7815) * C7431 +
            (C7816 - C7817 + C7818 - C7819) * C7425 +
            (C7820 - C7821 + C7822 - C7823) * C7432 +
            (C7824 - C7825 + C7826 - C7827) * C32158) *
               C31876 * C31835 * C440 +
           ((C7805 - C7804 + C7807 - C7806) * C7429 +
            (C7809 - C7808 + C7811 - C7810) * C7423 +
            (C7813 - C7812 + C7815 - C7814) * C7430 +
            (C7817 - C7816 + C7819 - C7818) * C7424 +
            (C7821 - C7820 + C7823 - C7822) * C7431 +
            (C7825 - C7824 + C7827 - C7826) * C7425 +
            (C32098 * C883 - C30873 * C874 + C31782 * C884 - C30854 * C875) *
                C7432 +
            (C32098 * C892 - C30873 * C886 + C31782 * C893 - C30854 * C887) *
                C32158) *
               C31876 * C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
             C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
                C2600 +
            (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
             C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
                C32117 +
            (C2701 - C2702 + C2703 - C2704 + C2705 - C2706 + C2707 - C2708) *
                C2601 +
            (C2709 - C2710 + C2711 - C2712 + C2713 - C2714 + C2715 - C2716) *
                C31923) *
               C31876 * C530 +
           ((C2596 * C318 - C2590 * C328 + C2597 * C319 - C2591 * C329 +
             C2598 * C320 - C2592 * C330 + C2599 * C321 - C32152 * C331) *
                C2600 +
            (C2596 * C333 - C2590 * C348 + C2597 * C334 - C2591 * C349 +
             C2598 * C335 - C2592 * C350 + C2599 * C336 - C32152 * C351) *
                C32117 +
            (C3237 - C3238 + C3239 - C3240 + C3241 - C3242 + C3243 - C3244) *
                C2601 +
            (C3245 - C3246 + C3247 - C3248 + C3249 - C3250 + C3251 - C3252) *
                C31923) *
               C31876 * C531) *
              C440 +
          (((C2702 - C2701 + C2704 - C2703 + C2706 - C2705 + C2708 - C2707) *
                C2600 +
            (C2710 - C2709 + C2712 - C2711 + C2714 - C2713 + C2716 - C2715) *
                C32117 +
            (C2717 - C2718 + C2719 - C2720 + C2721 - C2722 + C2723 - C2724) *
                C2601 +
            (C2725 - C2726 + C2727 - C2728 + C2729 - C2730 + C2731 - C2732) *
                C31923) *
               C31876 * C530 +
           ((C3238 - C3237 + C3240 - C3239 + C3242 - C3241 + C3244 - C3243) *
                C2600 +
            (C3246 - C3245 + C3248 - C3247 + C3250 - C3249 + C3252 - C3251) *
                C32117 +
            (C2590 * C1059 - C2596 * C1050 + C2591 * C1060 - C2597 * C1051 +
             C2592 * C1061 - C2598 * C1052 + C32152 * C1407 - C2599 * C1406) *
                C2601 +
            (C2590 * C1077 - C2596 * C1062 + C2591 * C1078 - C2597 * C1063 +
             C2592 * C1079 - C2598 * C1064 + C32152 * C1409 - C2599 * C1408) *
                C31923) *
               C31876 * C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C7429 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C7423 +
            (C7532 - C7533 + C7534 - C7535) * C7430 +
            (C7536 - C7537 + C7538 - C7539) * C7424 + C7572 * C7431 +
            C7573 * C7425 + C7574 * C7432 + C7575 * C32158) *
               C31876 * C530 +
           ((C30873 * C318 - C32098 * C328 + C30854 * C319 - C31782 * C329) *
                C7429 +
            (C30873 * C333 - C32098 * C348 + C30854 * C334 - C31782 * C349) *
                C7423 +
            (C8088 - C8089 + C8090 - C8091) * C7430 +
            (C8092 - C8093 + C8094 - C8095) * C7424 +
            (C8096 - C8097 + C8098 - C8099) * C7431 +
            (C8100 - C8101 + C8102 - C8103) * C7425 +
            (C8104 - C8105 + C8106 - C8107) * C7432 +
            (C8108 - C8109 + C8110 - C8111) * C32158) *
               C31876 * C531) *
              C440 +
          (((C7533 - C7532 + C7535 - C7534) * C7429 +
            (C7537 - C7536 + C7539 - C7538) * C7423 +
            (C7541 - C7540 + C7543 - C7542) * C7430 +
            (C7545 - C7544 + C7547 - C7546) * C7424 +
            (C7549 - C7548 + C7551 - C7550) * C7431 +
            (C7553 - C7552 + C7555 - C7554) * C7425 +
            (C7556 - C7557 + C7558 - C7559) * C7432 +
            (C7560 - C7561 + C7562 - C7563) * C32158) *
               C31876 * C530 +
           ((C8089 - C8088 + C8091 - C8090) * C7429 +
            (C8093 - C8092 + C8095 - C8094) * C7423 +
            (C8097 - C8096 + C8099 - C8098) * C7430 +
            (C8101 - C8100 + C8103 - C8102) * C7424 +
            (C8105 - C8104 + C8107 - C8106) * C7431 +
            (C8109 - C8108 + C8111 - C8110) * C7425 +
            (C32098 * C6147 - C30873 * C6144 + C31782 * C6341 -
             C30854 * C6340) *
                C7432 +
            (C32098 * C6153 - C30873 * C6148 + C31782 * C6343 -
             C30854 * C6342) *
                C32158) *
               C31876 * C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
            C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
               C2600 +
           (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
            C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
               C32117 +
           (C2701 - C2702 + C2703 - C2704 + C2705 - C2706 + C2707 - C2708) *
               C2601 +
           (C2709 - C2710 + C2711 - C2712 + C2713 - C2714 + C2715 - C2716) *
               C31923) *
              C31876 * C31835 * C209 +
          ((C2702 - C2701 + C2704 - C2703 + C2706 - C2705 + C2708 - C2707) *
               C2600 +
           (C2710 - C2709 + C2712 - C2711 + C2714 - C2713 + C2716 - C2715) *
               C32117 +
           (C2717 - C2718 + C2719 - C2720 + C2721 - C2722 + C2723 - C2724) *
               C2601 +
           (C2725 - C2726 + C2727 - C2728 + C2729 - C2730 + C2731 - C2732) *
               C31923) *
              C31876 * C31835 * C210 +
          ((C2718 - C2717 + C2720 - C2719 + C2722 - C2721 + C2724 - C2723) *
               C2600 +
           (C2726 - C2725 + C2728 - C2727 + C2730 - C2729 + C2732 - C2731) *
               C32117 +
           (C2590 * C876 - C2596 * C870 + C2591 * C877 - C2597 * C871 +
            C2592 * C878 - C2598 * C872 + C32152 * C1233 - C2599 * C1232) *
               C2601 +
           (C2590 * C888 - C2596 * C879 + C2591 * C889 - C2597 * C880 +
            C2592 * C890 - C2598 * C881 + C32152 * C1235 - C2599 * C1234) *
               C31923) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
            C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
               C2600 +
           (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
            C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
               C32117 +
           (C2590 * C223 - C2596 * C213 + C2591 * C224 - C2597 * C214 +
            C2592 * C225 - C2598 * C215 + C32152 * C226 - C2599 * C216) *
               C2601 +
           (C2590 * C243 - C2596 * C228 + C2591 * C244 - C2597 * C229 +
            C2592 * C245 - C2598 * C230 + C32152 * C246 - C2599 * C231) *
               C31923) *
              C31876 * C31835 * C31821 * C110 +
          ((C2596 * C120 - C2590 * C127 + C2597 * C121 - C2591 * C128 +
            C2598 * C122 - C2592 * C129 + C2599 * C123 - C32152 * C130) *
               C2600 +
           (C2596 * C132 - C2590 * C141 + C2597 * C133 - C2591 * C142 +
            C2598 * C134 - C2592 * C143 + C2599 * C135 - C32152 * C144) *
               C32117 +
           (C2596 * C214 - C2590 * C224 + C2597 * C215 - C2591 * C225 +
            C2598 * C216 - C2592 * C226 + C2599 * C217 - C32152 * C227) *
               C2601 +
           (C2596 * C229 - C2590 * C244 + C2597 * C230 - C2591 * C245 +
            C2598 * C231 - C2592 * C246 + C2599 * C232 - C32152 * C247) *
               C31923) *
              C31876 * C31835 * C31821 * C111 +
          ((C2590 * C128 - C2596 * C121 + C2591 * C129 - C2597 * C122 +
            C2592 * C130 - C2598 * C123 + C32152 * C136 - C2599 * C124) *
               C2600 +
           (C2590 * C142 - C2596 * C133 + C2591 * C143 - C2597 * C134 +
            C2592 * C144 - C2598 * C135 + C32152 * C145 - C2599 * C137) *
               C32117 +
           (C2590 * C225 - C2596 * C215 + C2591 * C226 - C2597 * C216 +
            C2592 * C227 - C2598 * C217 + C32152 * C445 - C2599 * C444) *
               C2601 +
           (C2590 * C245 - C2596 * C230 + C2591 * C246 - C2597 * C231 +
            C2592 * C247 - C2598 * C232 + C32152 * C447 - C2599 * C446) *
               C31923) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
            C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
               C2600 +
           (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
            C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
               C32117 +
           (C2701 - C2702 + C2703 - C2704 + C2705 - C2706 + C2707 - C2708) *
               C2601 +
           (C2709 - C2710 + C2711 - C2712 + C2713 - C2714 + C2715 - C2716) *
               C31923) *
              C31876 * C315 +
          ((C2596 * C318 - C2590 * C328 + C2597 * C319 - C2591 * C329 +
            C2598 * C320 - C2592 * C330 + C2599 * C321 - C32152 * C331) *
               C2600 +
           (C2596 * C333 - C2590 * C348 + C2597 * C334 - C2591 * C349 +
            C2598 * C335 - C2592 * C350 + C2599 * C336 - C32152 * C351) *
               C32117 +
           (C2596 * C618 - C2590 * C623 + C2597 * C619 - C2591 * C624 +
            C2598 * C620 - C2592 * C625 + C2599 * C621 - C32152 * C626) *
               C2601 +
           (C2596 * C628 - C2590 * C633 + C2597 * C629 - C2591 * C634 +
            C2598 * C630 - C2592 * C635 + C2599 * C631 - C32152 * C636) *
               C31923) *
              C31876 * C316 +
          ((C2590 * C338 - C2596 * C323 + C2591 * C339 - C2597 * C324 +
            C2592 * C340 - C2598 * C325 + C32152 * C341 - C2599 * C326) *
               C2600 +
           (C2590 * C353 - C2596 * C343 + C2591 * C354 - C2597 * C344 +
            C2592 * C355 - C2598 * C345 + C32152 * C356 - C2599 * C346) *
               C32117 +
           (C2590 * C1065 - C2596 * C1053 + C2591 * C1066 - C2597 * C1054 +
            C2592 * C1067 - C2598 * C1055 + C32152 * C2145 - C2599 * C2144) *
               C2601 +
           (C2590 * C1080 - C2596 * C1068 + C2591 * C1081 - C2597 * C1069 +
            C2592 * C1082 - C2598 * C1070 + C32152 * C2147 - C2599 * C2146) *
               C31923) *
              C31876 * C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
               C7429 +
           (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
               C7423 +
           (C32098 * C223 - C30873 * C213 + C31782 * C224 - C30854 * C214) *
               C7430 +
           (C32098 * C243 - C30873 * C228 + C31782 * C244 - C30854 * C229) *
               C7424 +
           (C32098 * C233 - C30873 * C218 + C31782 * C234 - C30854 * C219) *
               C7431 +
           (C32098 * C248 - C30873 * C238 + C31782 * C249 - C30854 * C239) *
               C7425 +
           (C32098 * C876 - C30873 * C870 + C31782 * C877 - C30854 * C871) *
               C7432 +
           (C32098 * C888 - C30873 * C879 + C31782 * C889 - C30854 * C880) *
               C32158) *
              C31876 * C31835 * C31821 * C110 +
          ((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
               C7429 +
           (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
               C7423 +
           (C30873 * C214 - C32098 * C224 + C30854 * C215 - C31782 * C225) *
               C7430 +
           (C30873 * C229 - C32098 * C244 + C30854 * C230 - C31782 * C245) *
               C7424 +
           (C30873 * C219 - C32098 * C234 + C30854 * C220 - C31782 * C235) *
               C7431 +
           (C30873 * C239 - C32098 * C249 + C30854 * C240 - C31782 * C250) *
               C7425 +
           (C30873 * C871 - C32098 * C877 + C30854 * C872 - C31782 * C878) *
               C7432 +
           (C30873 * C880 - C32098 * C889 + C30854 * C881 - C31782 * C890) *
               C32158) *
              C31876 * C31835 * C31821 * C111 +
          ((C32098 * C128 - C30873 * C121 + C31782 * C129 - C30854 * C122) *
               C7429 +
           (C32098 * C142 - C30873 * C133 + C31782 * C143 - C30854 * C134) *
               C7423 +
           (C32098 * C225 - C30873 * C215 + C31782 * C226 - C30854 * C216) *
               C7430 +
           (C32098 * C245 - C30873 * C230 + C31782 * C246 - C30854 * C231) *
               C7424 +
           (C32098 * C235 - C30873 * C220 + C31782 * C236 - C30854 * C221) *
               C7431 +
           (C32098 * C250 - C30873 * C240 + C31782 * C251 - C30854 * C241) *
               C7425 +
           (C32098 * C878 - C30873 * C872 + C31782 * C1233 - C30854 * C1232) *
               C7432 +
           (C32098 * C890 - C30873 * C881 + C31782 * C1235 - C30854 * C1234) *
               C32158) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
               C7429 +
           (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
               C7423 +
           (C7532 - C7533 + C7534 - C7535) * C7430 +
           (C7536 - C7537 + C7538 - C7539) * C7424 + C7572 * C7431 +
           C7573 * C7425 + C7574 * C7432 + C7575 * C32158) *
              C31876 * C31835 * C209 +
          ((C7533 - C7532 + C7535 - C7534) * C7429 +
           (C7537 - C7536 + C7539 - C7538) * C7423 +
           (C7541 - C7540 + C7543 - C7542) * C7430 +
           (C7545 - C7544 + C7547 - C7546) * C7424 +
           (C7549 - C7548 + C7551 - C7550) * C7431 +
           (C7553 - C7552 + C7555 - C7554) * C7425 +
           (C7556 - C7557 + C7558 - C7559) * C7432 +
           (C7560 - C7561 + C7562 - C7563) * C32158) *
              C31876 * C31835 * C210 +
          (C7572 * C7429 + C7573 * C7423 + C7574 * C7430 + C7575 * C7424 +
           (C7557 - C7556 + C7559 - C7558) * C7431 +
           (C7561 - C7560 + C7563 - C7562) * C7425 +
           (C32098 * C6050 - C30873 * C6048 + C31782 * C6239 - C30854 * C6238) *
               C7432 +
           (C32098 * C6054 - C30873 * C6051 + C31782 * C6241 - C30854 * C6240) *
               C32158) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
               C7429 +
           (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
               C7423 +
           (C7532 - C7533 + C7534 - C7535) * C7430 +
           (C7536 - C7537 + C7538 - C7539) * C7424 + C7572 * C7431 +
           C7573 * C7425 + C7574 * C7432 + C7575 * C32158) *
              C31876 * C315 +
          ((C30873 * C318 - C32098 * C328 + C30854 * C319 - C31782 * C329) *
               C7429 +
           (C30873 * C333 - C32098 * C348 + C30854 * C334 - C31782 * C349) *
               C7423 +
           (C30873 * C618 - C32098 * C623 + C30854 * C619 - C31782 * C624) *
               C7430 +
           (C30873 * C628 - C32098 * C633 + C30854 * C629 - C31782 * C634) *
               C7424 +
           (C30873 * C1050 - C32098 * C1059 + C30854 * C1051 - C31782 * C1060) *
               C7431 +
           (C30873 * C1062 - C32098 * C1077 + C30854 * C1063 - C31782 * C1078) *
               C7425 +
           (C30873 * C1556 - C32098 * C1559 + C30854 * C1557 - C31782 * C1560) *
               C7432 +
           (C30873 * C1562 - C32098 * C1565 + C30854 * C1563 - C31782 * C1566) *
               C32158) *
              C31876 * C316 +
          ((C32098 * C338 - C30873 * C323 + C31782 * C339 - C30854 * C324) *
               C7429 +
           (C32098 * C353 - C30873 * C343 + C31782 * C354 - C30854 * C344) *
               C7423 +
           (C32098 * C1065 - C30873 * C1053 + C31782 * C1066 - C30854 * C1054) *
               C7430 +
           (C32098 * C1080 - C30873 * C1068 + C31782 * C1081 - C30854 * C1069) *
               C7424 +
           (C32098 * C1071 - C30873 * C1056 + C31782 * C1072 - C30854 * C1057) *
               C7431 +
           (C32098 * C1083 - C30873 * C1074 + C31782 * C1084 - C30854 * C1075) *
               C7425 +
           (C32098 * C6149 - C30873 * C6145 + C31782 * C6986 - C30854 * C6985) *
               C7432 +
           (C32098 * C6154 - C30873 * C6150 + C31782 * C6988 - C30854 * C6987) *
               C32158) *
              C31876 * C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
             C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
                C2600 +
            (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
             C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
                C32117 +
            (C2701 - C2702 + C2703 - C2704 + C2705 - C2706 + C2707 - C2708) *
                C2601 +
            (C2709 - C2710 + C2711 - C2712 + C2713 - C2714 + C2715 - C2716) *
                C31923) *
               C31876 * C530 +
           ((C2596 * C318 - C2590 * C328 + C2597 * C319 - C2591 * C329 +
             C2598 * C320 - C2592 * C330 + C2599 * C321 - C32152 * C331) *
                C2600 +
            (C2596 * C333 - C2590 * C348 + C2597 * C334 - C2591 * C349 +
             C2598 * C335 - C2592 * C350 + C2599 * C336 - C32152 * C351) *
                C32117 +
            (C2596 * C618 - C2590 * C623 + C2597 * C619 - C2591 * C624 +
             C2598 * C620 - C2592 * C625 + C2599 * C621 - C32152 * C626) *
                C2601 +
            (C2596 * C628 - C2590 * C633 + C2597 * C629 - C2591 * C634 +
             C2598 * C630 - C2592 * C635 + C2599 * C631 - C32152 * C636) *
                C31923) *
               C31876 * C531) *
              C31821 * C442 +
          (((C2596 * C120 - C2590 * C127 + C2597 * C121 - C2591 * C128 +
             C2598 * C122 - C2592 * C129 + C2599 * C123 - C32152 * C130) *
                C2600 +
            (C2596 * C132 - C2590 * C141 + C2597 * C133 - C2591 * C142 +
             C2598 * C134 - C2592 * C143 + C2599 * C135 - C32152 * C144) *
                C32117 +
            (C2961 - C2962 + C2963 - C2964 + C2965 - C2966 + C2967 - C2968) *
                C2601 +
            (C2969 - C2970 + C2971 - C2972 + C2973 - C2974 + C2975 - C2976) *
                C31923) *
               C31876 * C530 +
           ((C2590 * C329 - C2596 * C319 + C2591 * C330 - C2597 * C320 +
             C2592 * C331 - C2598 * C321 + C32152 * C332 - C2599 * C322) *
                C2600 +
            (C2590 * C349 - C2596 * C334 + C2591 * C350 - C2597 * C335 +
             C2592 * C351 - C2598 * C336 + C32152 * C352 - C2599 * C337) *
                C32117 +
            (C2590 * C624 - C2596 * C619 + C2591 * C625 - C2597 * C620 +
             C2592 * C626 - C2598 * C621 + C32152 * C627 - C2599 * C622) *
                C2601 +
            (C2590 * C634 - C2596 * C629 + C2591 * C635 - C2597 * C630 +
             C2592 * C636 - C2598 * C631 + C32152 * C637 - C2599 * C632) *
                C31923) *
               C31876 * C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C7429 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C7423 +
            (C7532 - C7533 + C7534 - C7535) * C7430 +
            (C7536 - C7537 + C7538 - C7539) * C7424 + C7572 * C7431 +
            C7573 * C7425 + C7574 * C7432 + C7575 * C32158) *
               C31876 * C530 +
           ((C30873 * C318 - C32098 * C328 + C30854 * C319 - C31782 * C329) *
                C7429 +
            (C30873 * C333 - C32098 * C348 + C30854 * C334 - C31782 * C349) *
                C7423 +
            (C30873 * C618 - C32098 * C623 + C30854 * C619 - C31782 * C624) *
                C7430 +
            (C30873 * C628 - C32098 * C633 + C30854 * C629 - C31782 * C634) *
                C7424 +
            (C30873 * C1050 - C32098 * C1059 + C30854 * C1051 -
             C31782 * C1060) *
                C7431 +
            (C30873 * C1062 - C32098 * C1077 + C30854 * C1063 -
             C31782 * C1078) *
                C7425 +
            (C30873 * C1556 - C32098 * C1559 + C30854 * C1557 -
             C31782 * C1560) *
                C7432 +
            (C30873 * C1562 - C32098 * C1565 + C30854 * C1563 -
             C31782 * C1566) *
                C32158) *
               C31876 * C531) *
              C31821 * C442 +
          (((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                C7429 +
            (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                C7423 +
            (C7804 - C7805 + C7806 - C7807) * C7430 +
            (C7808 - C7809 + C7810 - C7811) * C7424 +
            (C7812 - C7813 + C7814 - C7815) * C7431 +
            (C7816 - C7817 + C7818 - C7819) * C7425 +
            (C7820 - C7821 + C7822 - C7823) * C7432 +
            (C7824 - C7825 + C7826 - C7827) * C32158) *
               C31876 * C530 +
           ((C32098 * C329 - C30873 * C319 + C31782 * C330 - C30854 * C320) *
                C7429 +
            (C32098 * C349 - C30873 * C334 + C31782 * C350 - C30854 * C335) *
                C7423 +
            (C32098 * C624 - C30873 * C619 + C31782 * C625 - C30854 * C620) *
                C7430 +
            (C32098 * C634 - C30873 * C629 + C31782 * C635 - C30854 * C630) *
                C7424 +
            (C32098 * C1060 - C30873 * C1051 + C31782 * C1061 -
             C30854 * C1052) *
                C7431 +
            (C32098 * C1078 - C30873 * C1063 + C31782 * C1079 -
             C30854 * C1064) *
                C7425 +
            (C32098 * C1560 - C30873 * C1557 + C31782 * C1561 -
             C30854 * C1558) *
                C7432 +
            (C32098 * C1566 - C30873 * C1563 + C31782 * C1567 -
             C30854 * C1564) *
                C32158) *
               C31876 * C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
            C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
               C2600 +
           (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
            C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
               C32117 +
           (C2590 * C223 - C2596 * C213 + C2591 * C224 - C2597 * C214 +
            C2592 * C225 - C2598 * C215 + C32152 * C226 - C2599 * C216) *
               C2601 +
           (C2590 * C243 - C2596 * C228 + C2591 * C244 - C2597 * C229 +
            C2592 * C245 - C2598 * C230 + C32152 * C246 - C2599 * C231) *
               C31923) *
              C31876 * C31835 * C31821 * C110 +
          ((C2596 * C120 - C2590 * C127 + C2597 * C121 - C2591 * C128 +
            C2598 * C122 - C2592 * C129 + C2599 * C123 - C32152 * C130) *
               C2600 +
           (C2596 * C132 - C2590 * C141 + C2597 * C133 - C2591 * C142 +
            C2598 * C134 - C2592 * C143 + C2599 * C135 - C32152 * C144) *
               C32117 +
           (C2596 * C214 - C2590 * C224 + C2597 * C215 - C2591 * C225 +
            C2598 * C216 - C2592 * C226 + C2599 * C217 - C32152 * C227) *
               C2601 +
           (C2596 * C229 - C2590 * C244 + C2597 * C230 - C2591 * C245 +
            C2598 * C231 - C2592 * C246 + C2599 * C232 - C32152 * C247) *
               C31923) *
              C31876 * C31835 * C31821 * C111 +
          ((C2590 * C128 - C2596 * C121 + C2591 * C129 - C2597 * C122 +
            C2592 * C130 - C2598 * C123 + C32152 * C136 - C2599 * C124) *
               C2600 +
           (C2590 * C142 - C2596 * C133 + C2591 * C143 - C2597 * C134 +
            C2592 * C144 - C2598 * C135 + C32152 * C145 - C2599 * C137) *
               C32117 +
           (C2590 * C225 - C2596 * C215 + C2591 * C226 - C2597 * C216 +
            C2592 * C227 - C2598 * C217 + C32152 * C445 - C2599 * C444) *
               C2601 +
           (C2590 * C245 - C2596 * C230 + C2591 * C246 - C2597 * C231 +
            C2592 * C247 - C2598 * C232 + C32152 * C447 - C2599 * C446) *
               C31923) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
            C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
               C2600 +
           (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
            C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
               C32117 +
           (C2701 - C2702 + C2703 - C2704 + C2705 - C2706 + C2707 - C2708) *
               C2601 +
           (C2709 - C2710 + C2711 - C2712 + C2713 - C2714 + C2715 - C2716) *
               C31923) *
              C31876 * C31835 * C209 +
          ((C2702 - C2701 + C2704 - C2703 + C2706 - C2705 + C2708 - C2707) *
               C2600 +
           (C2710 - C2709 + C2712 - C2711 + C2714 - C2713 + C2716 - C2715) *
               C32117 +
           (C2717 - C2718 + C2719 - C2720 + C2721 - C2722 + C2723 - C2724) *
               C2601 +
           (C2725 - C2726 + C2727 - C2728 + C2729 - C2730 + C2731 - C2732) *
               C31923) *
              C31876 * C31835 * C210 +
          ((C2718 - C2717 + C2720 - C2719 + C2722 - C2721 + C2724 - C2723) *
               C2600 +
           (C2726 - C2725 + C2728 - C2727 + C2730 - C2729 + C2732 - C2731) *
               C32117 +
           (C2590 * C876 - C2596 * C870 + C2591 * C877 - C2597 * C871 +
            C2592 * C878 - C2598 * C872 + C32152 * C1233 - C2599 * C1232) *
               C2601 +
           (C2590 * C888 - C2596 * C879 + C2591 * C889 - C2597 * C880 +
            C2592 * C890 - C2598 * C881 + C32152 * C1235 - C2599 * C1234) *
               C31923) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
               C7429 +
           (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
               C7423 +
           (C32098 * C223 - C30873 * C213 + C31782 * C224 - C30854 * C214) *
               C7430 +
           (C32098 * C243 - C30873 * C228 + C31782 * C244 - C30854 * C229) *
               C7424 +
           (C32098 * C233 - C30873 * C218 + C31782 * C234 - C30854 * C219) *
               C7431 +
           (C32098 * C248 - C30873 * C238 + C31782 * C249 - C30854 * C239) *
               C7425 +
           (C32098 * C876 - C30873 * C870 + C31782 * C877 - C30854 * C871) *
               C7432 +
           (C32098 * C888 - C30873 * C879 + C31782 * C889 - C30854 * C880) *
               C32158) *
              C31876 * C31835 * C31821 * C110 +
          ((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
               C7429 +
           (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
               C7423 +
           (C30873 * C214 - C32098 * C224 + C30854 * C215 - C31782 * C225) *
               C7430 +
           (C30873 * C229 - C32098 * C244 + C30854 * C230 - C31782 * C245) *
               C7424 +
           (C30873 * C219 - C32098 * C234 + C30854 * C220 - C31782 * C235) *
               C7431 +
           (C30873 * C239 - C32098 * C249 + C30854 * C240 - C31782 * C250) *
               C7425 +
           (C30873 * C871 - C32098 * C877 + C30854 * C872 - C31782 * C878) *
               C7432 +
           (C30873 * C880 - C32098 * C889 + C30854 * C881 - C31782 * C890) *
               C32158) *
              C31876 * C31835 * C31821 * C111 +
          ((C32098 * C128 - C30873 * C121 + C31782 * C129 - C30854 * C122) *
               C7429 +
           (C32098 * C142 - C30873 * C133 + C31782 * C143 - C30854 * C134) *
               C7423 +
           (C32098 * C225 - C30873 * C215 + C31782 * C226 - C30854 * C216) *
               C7430 +
           (C32098 * C245 - C30873 * C230 + C31782 * C246 - C30854 * C231) *
               C7424 +
           (C32098 * C235 - C30873 * C220 + C31782 * C236 - C30854 * C221) *
               C7431 +
           (C32098 * C250 - C30873 * C240 + C31782 * C251 - C30854 * C241) *
               C7425 +
           (C32098 * C878 - C30873 * C872 + C31782 * C1233 - C30854 * C1232) *
               C7432 +
           (C32098 * C890 - C30873 * C881 + C31782 * C1235 - C30854 * C1234) *
               C32158) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
               C7429 +
           (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
               C7423 +
           (C7532 - C7533 + C7534 - C7535) * C7430 +
           (C7536 - C7537 + C7538 - C7539) * C7424 + C7572 * C7431 +
           C7573 * C7425 + C7574 * C7432 + C7575 * C32158) *
              C31876 * C31835 * C209 +
          ((C7533 - C7532 + C7535 - C7534) * C7429 +
           (C7537 - C7536 + C7539 - C7538) * C7423 +
           (C7541 - C7540 + C7543 - C7542) * C7430 +
           (C7545 - C7544 + C7547 - C7546) * C7424 +
           (C7549 - C7548 + C7551 - C7550) * C7431 +
           (C7553 - C7552 + C7555 - C7554) * C7425 +
           (C7556 - C7557 + C7558 - C7559) * C7432 +
           (C7560 - C7561 + C7562 - C7563) * C32158) *
              C31876 * C31835 * C210 +
          (C7572 * C7429 + C7573 * C7423 + C7574 * C7430 + C7575 * C7424 +
           (C7557 - C7556 + C7559 - C7558) * C7431 +
           (C7561 - C7560 + C7563 - C7562) * C7425 +
           (C32098 * C6050 - C30873 * C6048 + C31782 * C6239 - C30854 * C6238) *
               C7432 +
           (C32098 * C6054 - C30873 * C6051 + C31782 * C6241 - C30854 * C6240) *
               C32158) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
              C32137 * C128 - C756 * C121) *
                 C2600 +
             (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
              C32137 * C142 - C756 * C133) *
                 C32117 +
             (C895 - C896 + C897 - C898 + C899 - C900) * C2601 +
             (C901 - C902 + C903 - C904 + C905 - C906) * C31923) *
                C32118 +
            ((C1950 - C1951 + C1952 - C1953 + C1954 - C1955) * C2600 +
             (C1956 - C1957 + C1958 - C1959 + C1960 - C1961) * C32117 +
             (C1570 - C1569 + C1572 - C1571 + C1574 - C1573) * C2601 +
             (C1576 - C1575 + C1578 - C1577 + C1580 - C1579) * C31923) *
                C31963) *
               C31835 * C440 +
           (((C896 - C895 + C898 - C897 + C900 - C899) * C2600 +
             (C902 - C901 + C904 - C903 + C906 - C905) * C32117 +
             (C908 - C907 + C910 - C909 + C912 - C911) * C2601 +
             (C914 - C913 + C916 - C915 + C918 - C917) * C31923) *
                C32118 +
            ((C1569 - C1570 + C1571 - C1572 + C1573 - C1574) * C2600 +
             (C1575 - C1576 + C1577 - C1578 + C1579 - C1580) * C32117 +
             (C1581 - C1582 + C1583 - C1584 + C1585 - C1586) * C2601 +
             (C1587 - C1588 + C1589 - C1590 + C1591 - C1592) * C31923) *
                C31963) *
               C31835 * C441) *
              C442 +
          ((((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
              C756 * C122 - C32137 * C129) *
                 C2600 +
             (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
              C756 * C134 - C32137 * C143) *
                 C32117 +
             (C1237 - C1238 + C1239 - C1240 + C1241 - C1242) * C2601 +
             (C1243 - C1244 + C1245 - C1246 + C1247 - C1248) * C31923) *
                C32118 +
            ((C2299 - C2300 + C2301 - C2302 + C2303 - C2304) * C2600 +
             (C2305 - C2306 + C2307 - C2308 + C2309 - C2310) * C32117 +
             (C4619 - C4620 + C4621 - C4622 + C4623 - C4624) * C2601 +
             (C4625 - C4626 + C4627 - C4628 + C4629 - C4630) * C31923) *
                C31963) *
               C31835 * C440 +
           (((C1238 - C1237 + C1240 - C1239 + C1242 - C1241) * C2600 +
             (C1244 - C1243 + C1246 - C1245 + C1248 - C1247) * C32117 +
             (C1250 - C1249 + C1252 - C1251 + C1254 - C1253) * C2601 +
             (C1256 - C1255 + C1258 - C1257 + C1260 - C1259) * C31923) *
                C32118 +
            ((C4620 - C4619 + C4622 - C4621 + C4624 - C4623) * C2600 +
             (C4626 - C4625 + C4628 - C4627 + C4630 - C4629) * C32117 +
             (C748 * C1060 - C754 * C1051 + C749 * C1061 - C755 * C1052 +
              C32137 * C1407 - C756 * C1406) *
                 C2601 +
             (C748 * C1078 - C754 * C1063 + C749 * C1079 - C755 * C1064 +
              C32137 * C1409 - C756 * C1408) *
                 C31923) *
                C31963) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C7429 +
             (C31772 * C140 - C5980 * C131) * C7423 + (C6057 - C6058) * C7430 +
             (C6059 - C6060) * C7424 + C6077 * C7431 + C6078 * C7425 +
             C6079 * C7432 + C6080 * C32158) *
                C32118 +
            ((C6805 - C6806) * C7429 + (C6807 - C6808) * C7423 + C7314 * C7430 +
             C7315 * C7424 + C6667 * C7431 + C6668 * C7425 + C9408 * C7432 +
             C9409 * C32158) *
                C31963) *
               C31835 * C440 +
           (((C6058 - C6057) * C7429 + (C6060 - C6059) * C7423 +
             (C6062 - C6061) * C7430 + (C6064 - C6063) * C7424 +
             (C6066 - C6065) * C7431 + (C6068 - C6067) * C7425 +
             (C6070 - C6069) * C7432 + (C6072 - C6071) * C32158) *
                C32118 +
            (C7316 * C7429 + C7317 * C7423 + C7318 * C7430 + C7319 * C7424 +
             (C6439 - C6440) * C7431 + (C6441 - C6442) * C7425 +
             (C6443 - C6444) * C7432 + (C6445 - C6446) * C32158) *
                C31963) *
               C31835 * C441) *
              C442 +
          ((((C5980 * C120 - C31772 * C127) * C7429 +
             (C5980 * C132 - C31772 * C141) * C7423 + (C6243 - C6244) * C7430 +
             (C6245 - C6246) * C7424 + (C6247 - C6248) * C7431 +
             (C6249 - C6250) * C7425 + (C6251 - C6252) * C7432 +
             (C6253 - C6254) * C32158) *
                C32118 +
            ((C7156 - C7157) * C7429 + (C7158 - C7159) * C7423 +
             (C6990 - C6991) * C7430 + (C6992 - C6993) * C7424 +
             (C6994 - C6995) * C7431 + (C6996 - C6997) * C7425 +
             (C9638 - C9639) * C7432 + (C9640 - C9641) * C32158) *
                C31963) *
               C31835 * C440 +
           (((C6244 - C6243) * C7429 + (C6246 - C6245) * C7423 +
             (C6248 - C6247) * C7430 + (C6250 - C6249) * C7424 +
             (C6252 - C6251) * C7431 + (C6254 - C6253) * C7425 +
             (C6256 - C6255) * C7432 + (C6258 - C6257) * C32158) *
                C32118 +
            ((C6991 - C6990) * C7429 + (C6993 - C6992) * C7423 +
             (C6995 - C6994) * C7430 + (C6997 - C6996) * C7424 +
             (C9639 - C9638) * C7431 + (C9641 - C9640) * C7425 +
             (C31772 * C6341 - C5980 * C6340) * C7432 +
             (C31772 * C6343 - C5980 * C6342) * C32158) *
                C31963) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
              C32137 * C128 - C756 * C121) *
                 C2600 +
             (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
              C32137 * C142 - C756 * C133) *
                 C32117 +
             (C895 - C896 + C897 - C898 + C899 - C900) * C2601 +
             (C901 - C902 + C903 - C904 + C905 - C906) * C31923) *
                C32118 +
            ((C1950 - C1951 + C1952 - C1953 + C1954 - C1955) * C2600 +
             (C1956 - C1957 + C1958 - C1959 + C1960 - C1961) * C32117 +
             C5035 * C2601 + C5036 * C31923) *
                C31963) *
               C530 +
           (((C1951 - C1950 + C1953 - C1952 + C1955 - C1954) * C2600 +
             (C1957 - C1956 + C1959 - C1958 + C1961 - C1960) * C32117 +
             C5037 * C2601 + C5038 * C31923) *
                C32118 +
            ((C1963 - C1962 + C1965 - C1964 + C1967 - C1966) * C2600 +
             (C1969 - C1968 + C1971 - C1970 + C1973 - C1972) * C32117 +
             (C2481 - C2482 + C2483 - C2484 + C2485 - C2486) * C2601 +
             (C2487 - C2488 + C2489 - C2490 + C2491 - C2492) * C31923) *
                C31963) *
               C531) *
              C440 +
          ((((C896 - C895 + C898 - C897 + C900 - C899) * C2600 +
             (C902 - C901 + C904 - C903 + C906 - C905) * C32117 +
             (C908 - C907 + C910 - C909 + C912 - C911) * C2601 +
             (C914 - C913 + C916 - C915 + C918 - C917) * C31923) *
                C32118 +
            (C5037 * C2600 + C5038 * C32117 +
             (C1581 - C1582 + C1583 - C1584 + C1585 - C1586) * C2601 +
             (C1587 - C1588 + C1589 - C1590 + C1591 - C1592) * C31923) *
                C31963) *
               C530 +
           ((C5035 * C2600 + C5036 * C32117 +
             (C1582 - C1581 + C1584 - C1583 + C1586 - C1585) * C2601 +
             (C1588 - C1587 + C1590 - C1589 + C1592 - C1591) * C31923) *
                C32118 +
            ((C2482 - C2481 + C2484 - C2483 + C2486 - C2485) * C2600 +
             (C2488 - C2487 + C2490 - C2489 + C2492 - C2491) * C32117 +
             (C748 * C1071 - C754 * C1056 + C749 * C1072 - C755 * C1057 +
              C32137 * C1073 - C756 * C1058) *
                 C2601 +
             (C748 * C1083 - C754 * C1074 + C749 * C1084 - C755 * C1075 +
              C32137 * C1085 - C756 * C1076) *
                 C31923) *
                C31963) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C7429 +
             (C31772 * C140 - C5980 * C131) * C7423 + (C6057 - C6058) * C7430 +
             (C6059 - C6060) * C7424 + C6077 * C7431 + C6078 * C7425 +
             C6079 * C7432 + C6080 * C32158) *
                C32118 +
            ((C6805 - C6806) * C7429 + (C6807 - C6808) * C7423 + C7314 * C7430 +
             C7315 * C7424 + C6667 * C7431 + C6668 * C7425 + C9408 * C7432 +
             C9409 * C32158) *
                C31963) *
               C530 +
           (((C6806 - C6805) * C7429 + (C6808 - C6807) * C7423 + C7316 * C7430 +
             C7317 * C7424 + C7318 * C7431 + C7319 * C7425 + C9902 * C7432 +
             C9903 * C32158) *
                C32118 +
            ((C6810 - C6809) * C7429 + (C6812 - C6811) * C7423 + C7320 * C7430 +
             C7321 * C7424 + C7322 * C7431 + C7323 * C7425 +
             (C6677 - C6678) * C7432 + (C6679 - C6680) * C32158) *
                C31963) *
               C531) *
              C440 +
          ((((C6058 - C6057) * C7429 + (C6060 - C6059) * C7423 +
             (C6062 - C6061) * C7430 + (C6064 - C6063) * C7424 +
             (C6066 - C6065) * C7431 + (C6068 - C6067) * C7425 +
             (C6070 - C6069) * C7432 + (C6072 - C6071) * C32158) *
                C32118 +
            (C7316 * C7429 + C7317 * C7423 + C7318 * C7430 + C7319 * C7424 +
             C9902 * C7431 + C9903 * C7425 + (C6443 - C6444) * C7432 +
             (C6445 - C6446) * C32158) *
                C31963) *
               C530 +
           ((C7314 * C7429 + C7315 * C7423 + C6667 * C7430 + C6668 * C7424 +
             C9408 * C7431 + C9409 * C7425 + (C6444 - C6443) * C7432 +
             (C6446 - C6445) * C32158) *
                C32118 +
            (C6813 * C7429 + C6814 * C7423 + C6681 * C7430 + C6682 * C7424 +
             (C6678 - C6677) * C7431 + (C6680 - C6679) * C7425 +
             (C31772 * C6151 - C5980 * C6146) * C7432 +
             (C31772 * C6155 - C5980 * C6152) * C32158) *
                C31963) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
             C32137 * C128 - C756 * C121) *
                C2600 +
            (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
             C32137 * C142 - C756 * C133) *
                C32117 +
            (C895 - C896 + C897 - C898 + C899 - C900) * C2601 +
            (C901 - C902 + C903 - C904 + C905 - C906) * C31923) *
               C32118 +
           ((C1950 - C1951 + C1952 - C1953 + C1954 - C1955) * C2600 +
            (C1956 - C1957 + C1958 - C1959 + C1960 - C1961) * C32117 +
            (C1570 - C1569 + C1572 - C1571 + C1574 - C1573) * C2601 +
            (C1576 - C1575 + C1578 - C1577 + C1580 - C1579) * C31923) *
               C31963) *
              C31835 * C209 +
          (((C896 - C895 + C898 - C897 + C900 - C899) * C2600 +
            (C902 - C901 + C904 - C903 + C906 - C905) * C32117 +
            (C908 - C907 + C910 - C909 + C912 - C911) * C2601 +
            (C914 - C913 + C916 - C915 + C918 - C917) * C31923) *
               C32118 +
           ((C1569 - C1570 + C1571 - C1572 + C1573 - C1574) * C2600 +
            (C1575 - C1576 + C1577 - C1578 + C1579 - C1580) * C32117 +
            (C1581 - C1582 + C1583 - C1584 + C1585 - C1586) * C2601 +
            (C1587 - C1588 + C1589 - C1590 + C1591 - C1592) * C31923) *
               C31963) *
              C31835 * C210 +
          ((C939 * C2600 + C940 * C32117 +
            (C920 - C919 + C922 - C921 + C924 - C923) * C2601 +
            (C926 - C925 + C928 - C927 + C930 - C929) * C31923) *
               C32118 +
           ((C1582 - C1581 + C1584 - C1583 + C1586 - C1585) * C2600 +
            (C1588 - C1587 + C1590 - C1589 + C1592 - C1591) * C32117 +
            (C748 * C1559 - C754 * C1556 + C749 * C1560 - C755 * C1557 +
             C32137 * C1561 - C756 * C1558) *
                C2601 +
            (C748 * C1565 - C754 * C1562 + C749 * C1566 - C755 * C1563 +
             C32137 * C1567 - C756 * C1564) *
                C31923) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
             C32137 * C128 - C756 * C121) *
                C2600 +
            (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
             C32137 * C142 - C756 * C133) *
                C32117 +
            (C895 - C896 + C897 - C898 + C899 - C900) * C2601 +
            (C901 - C902 + C903 - C904 + C905 - C906) * C31923) *
               C32118 +
           ((C1950 - C1951 + C1952 - C1953 + C1954 - C1955) * C2600 +
            (C1956 - C1957 + C1958 - C1959 + C1960 - C1961) * C32117 +
            (C1570 - C1569 + C1572 - C1571 + C1574 - C1573) * C2601 +
            (C1576 - C1575 + C1578 - C1577 + C1580 - C1579) * C31923) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
             C756 * C122 - C32137 * C129) *
                C2600 +
            (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
             C756 * C134 - C32137 * C143) *
                C32117 +
            (C1237 - C1238 + C1239 - C1240 + C1241 - C1242) * C2601 +
            (C1243 - C1244 + C1245 - C1246 + C1247 - C1248) * C31923) *
               C32118 +
           ((C2299 - C2300 + C2301 - C2302 + C2303 - C2304) * C2600 +
            (C2305 - C2306 + C2307 - C2308 + C2309 - C2310) * C32117 +
            (C754 * C619 - C748 * C624 + C755 * C620 - C749 * C625 +
             C756 * C621 - C32137 * C626) *
                C2601 +
            (C754 * C629 - C748 * C634 + C755 * C630 - C749 * C635 +
             C756 * C631 - C32137 * C636) *
                C31923) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C748 * C128 - C754 * C121 + C749 * C129 - C755 * C122 +
             C32137 * C130 - C756 * C123) *
                C2600 +
            (C748 * C142 - C754 * C133 + C749 * C143 - C755 * C134 +
             C32137 * C144 - C756 * C135) *
                C32117 +
            (C748 * C225 - C754 * C215 + C749 * C226 - C755 * C216 +
             C32137 * C227 - C756 * C217) *
                C2601 +
            (C748 * C245 - C754 * C230 + C749 * C246 - C755 * C231 +
             C32137 * C247 - C756 * C232) *
                C31923) *
               C32118 +
           ((C748 * C330 - C754 * C320 + C749 * C331 - C755 * C321 +
             C32137 * C332 - C756 * C322) *
                C2600 +
            (C748 * C350 - C754 * C335 + C749 * C351 - C755 * C336 +
             C32137 * C352 - C756 * C337) *
                C32117 +
            (C748 * C625 - C754 * C620 + C749 * C626 - C755 * C621 +
             C32137 * C627 - C756 * C622) *
                C2601 +
            (C748 * C635 - C754 * C630 + C749 * C636 - C755 * C631 +
             C32137 * C637 - C756 * C632) *
                C31923) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
             C32137 * C128 - C756 * C121) *
                C2600 +
            (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
             C32137 * C142 - C756 * C133) *
                C32117 +
            (C895 - C896 + C897 - C898 + C899 - C900) * C2601 +
            (C901 - C902 + C903 - C904 + C905 - C906) * C31923) *
               C32118 +
           ((C1950 - C1951 + C1952 - C1953 + C1954 - C1955) * C2600 +
            (C1956 - C1957 + C1958 - C1959 + C1960 - C1961) * C32117 +
            (C1570 - C1569 + C1572 - C1571 + C1574 - C1573) * C2601 +
            (C1576 - C1575 + C1578 - C1577 + C1580 - C1579) * C31923) *
               C31963) *
              C315 +
          (((C1951 - C1950 + C1953 - C1952 + C1955 - C1954) * C2600 +
            (C1957 - C1956 + C1959 - C1958 + C1961 - C1960) * C32117 +
            (C1569 - C1570 + C1571 - C1572 + C1573 - C1574) * C2601 +
            (C1575 - C1576 + C1577 - C1578 + C1579 - C1580) * C31923) *
               C32118 +
           ((C1963 - C1962 + C1965 - C1964 + C1967 - C1966) * C2600 +
            (C1969 - C1968 + C1971 - C1970 + C1973 - C1972) * C32117 +
            (C2481 - C2482 + C2483 - C2484 + C2485 - C2486) * C2601 +
            (C2487 - C2488 + C2489 - C2490 + C2491 - C2492) * C31923) *
               C31963) *
              C316 +
          ((C1994 * C2600 + C1995 * C32117 +
            (C2482 - C2481 + C2484 - C2483 + C2486 - C2485) * C2601 +
            (C2488 - C2487 + C2490 - C2489 + C2492 - C2491) * C31923) *
               C32118 +
           ((C1975 - C1974 + C1977 - C1976 + C1979 - C1978) * C2600 +
            (C1981 - C1980 + C1983 - C1982 + C1985 - C1984) * C32117 +
            (C748 * C2471 - C754 * C2468 + C749 * C2472 - C755 * C2469 +
             C32137 * C2473 - C756 * C2470) *
                C2601 +
            (C748 * C2477 - C754 * C2474 + C749 * C2478 - C755 * C2475 +
             C32137 * C2479 - C756 * C2476) *
                C31923) *
               C31963) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C7429 +
            (C31772 * C140 - C5980 * C131) * C7423 + (C6057 - C6058) * C7430 +
            (C6059 - C6060) * C7424 + C6077 * C7431 + C6078 * C7425 +
            C6079 * C7432 + C6080 * C32158) *
               C32118 +
           ((C6805 - C6806) * C7429 + (C6807 - C6808) * C7423 + C7314 * C7430 +
            C7315 * C7424 + C6667 * C7431 + C6668 * C7425 +
            (C6440 - C6439) * C7432 + (C6442 - C6441) * C32158) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C5980 * C120 - C31772 * C127) * C7429 +
            (C5980 * C132 - C31772 * C141) * C7423 + (C6243 - C6244) * C7430 +
            (C6245 - C6246) * C7424 + (C6247 - C6248) * C7431 +
            (C6249 - C6250) * C7425 + (C6251 - C6252) * C7432 +
            (C6253 - C6254) * C32158) *
               C32118 +
           ((C7156 - C7157) * C7429 + (C7158 - C7159) * C7423 +
            (C6990 - C6991) * C7430 + (C6992 - C6993) * C7424 +
            (C6994 - C6995) * C7431 + (C6996 - C6997) * C7425 +
            (C5980 * C1557 - C31772 * C1560) * C7432 +
            (C5980 * C1563 - C31772 * C1566) * C32158) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C31772 * C128 - C5980 * C121) * C7429 +
            (C31772 * C142 - C5980 * C133) * C7423 +
            (C31772 * C225 - C5980 * C215) * C7430 +
            (C31772 * C245 - C5980 * C230) * C7424 +
            (C31772 * C235 - C5980 * C220) * C7431 +
            (C31772 * C250 - C5980 * C240) * C7425 +
            (C31772 * C878 - C5980 * C872) * C7432 +
            (C31772 * C890 - C5980 * C881) * C32158) *
               C32118 +
           ((C31772 * C330 - C5980 * C320) * C7429 +
            (C31772 * C350 - C5980 * C335) * C7423 +
            (C31772 * C625 - C5980 * C620) * C7430 +
            (C31772 * C635 - C5980 * C630) * C7424 +
            (C31772 * C1061 - C5980 * C1052) * C7431 +
            (C31772 * C1079 - C5980 * C1064) * C7425 +
            (C31772 * C1561 - C5980 * C1558) * C7432 +
            (C31772 * C1567 - C5980 * C1564) * C32158) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C7429 +
            (C31772 * C140 - C5980 * C131) * C7423 + (C6057 - C6058) * C7430 +
            (C6059 - C6060) * C7424 + C6077 * C7431 + C6078 * C7425 +
            C6079 * C7432 + C6080 * C32158) *
               C32118 +
           ((C6805 - C6806) * C7429 + (C6807 - C6808) * C7423 + C7314 * C7430 +
            C7315 * C7424 + C6667 * C7431 + C6668 * C7425 + C9408 * C7432 +
            C9409 * C32158) *
               C31963) *
              C31835 * C209 +
          (((C6058 - C6057) * C7429 + (C6060 - C6059) * C7423 +
            (C6062 - C6061) * C7430 + (C6064 - C6063) * C7424 +
            (C6066 - C6065) * C7431 + (C6068 - C6067) * C7425 +
            (C6070 - C6069) * C7432 + (C6072 - C6071) * C32158) *
               C32118 +
           (C7316 * C7429 + C7317 * C7423 + C7318 * C7430 + C7319 * C7424 +
            (C6439 - C6440) * C7431 + (C6441 - C6442) * C7425 +
            (C6443 - C6444) * C7432 + (C6445 - C6446) * C32158) *
               C31963) *
              C31835 * C210 +
          ((C6077 * C7429 + C6078 * C7423 + C6079 * C7430 + C6080 * C7424 +
            C6081 * C7431 + C6082 * C7425 + (C6074 - C6073) * C7432 +
            (C6076 - C6075) * C32158) *
               C32118 +
           (C6667 * C7429 + C6668 * C7423 + C9408 * C7430 + C9409 * C7424 +
            (C6444 - C6443) * C7431 + (C6446 - C6445) * C7425 +
            (C31772 * C6427 - C5980 * C6426) * C7432 +
            (C31772 * C6429 - C5980 * C6428) * C32158) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C7429 +
            (C31772 * C140 - C5980 * C131) * C7423 + (C6057 - C6058) * C7430 +
            (C6059 - C6060) * C7424 + C6077 * C7431 + C6078 * C7425 +
            C6079 * C7432 + C6080 * C32158) *
               C32118 +
           ((C6805 - C6806) * C7429 + (C6807 - C6808) * C7423 + C7314 * C7430 +
            C7315 * C7424 + C6667 * C7431 + C6668 * C7425 + C9408 * C7432 +
            C9409 * C32158) *
               C31963) *
              C315 +
          (((C6806 - C6805) * C7429 + (C6808 - C6807) * C7423 + C7316 * C7430 +
            C7317 * C7424 + C7318 * C7431 + C7319 * C7425 +
            (C6439 - C6440) * C7432 + (C6441 - C6442) * C32158) *
               C32118 +
           ((C6810 - C6809) * C7429 + (C6812 - C6811) * C7423 + C7320 * C7430 +
            C7321 * C7424 + C7322 * C7431 + C7323 * C7425 +
            (C6677 - C6678) * C7432 + (C6679 - C6680) * C32158) *
               C31963) *
              C316 +
          ((C6829 * C7429 + C6830 * C7423 + C6813 * C7430 + C6814 * C7424 +
            C6681 * C7431 + C6682 * C7425 + (C6678 - C6677) * C7432 +
            (C6680 - C6679) * C32158) *
               C32118 +
           ((C6818 - C6817) * C7429 + (C6820 - C6819) * C7423 +
            (C6822 - C6821) * C7430 + (C6824 - C6823) * C7424 +
            (C6826 - C6825) * C7431 + (C6828 - C6827) * C7425 +
            (C31772 * C7310 - C5980 * C7309) * C7432 +
            (C31772 * C7312 - C5980 * C7311) * C32158) *
               C31963) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
              C32137 * C128 - C756 * C121) *
                 C2600 +
             (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
              C32137 * C142 - C756 * C133) *
                 C32117 +
             (C895 - C896 + C897 - C898 + C899 - C900) * C2601 +
             (C901 - C902 + C903 - C904 + C905 - C906) * C31923) *
                C32118 +
            ((C1950 - C1951 + C1952 - C1953 + C1954 - C1955) * C2600 +
             (C1956 - C1957 + C1958 - C1959 + C1960 - C1961) * C32117 +
             (C1570 - C1569 + C1572 - C1571 + C1574 - C1573) * C2601 +
             (C1576 - C1575 + C1578 - C1577 + C1580 - C1579) * C31923) *
                C31963) *
               C530 +
           (((C1951 - C1950 + C1953 - C1952 + C1955 - C1954) * C2600 +
             (C1957 - C1956 + C1959 - C1958 + C1961 - C1960) * C32117 +
             (C1569 - C1570 + C1571 - C1572 + C1573 - C1574) * C2601 +
             (C1575 - C1576 + C1577 - C1578 + C1579 - C1580) * C31923) *
                C32118 +
            ((C1963 - C1962 + C1965 - C1964 + C1967 - C1966) * C2600 +
             (C1969 - C1968 + C1971 - C1970 + C1973 - C1972) * C32117 +
             (C2481 - C2482 + C2483 - C2484 + C2485 - C2486) * C2601 +
             (C2487 - C2488 + C2489 - C2490 + C2491 - C2492) * C31923) *
                C31963) *
               C531) *
              C31821 * C442 +
          ((((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
              C756 * C122 - C32137 * C129) *
                 C2600 +
             (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
              C756 * C134 - C32137 * C143) *
                 C32117 +
             (C1237 - C1238 + C1239 - C1240 + C1241 - C1242) * C2601 +
             (C1243 - C1244 + C1245 - C1246 + C1247 - C1248) * C31923) *
                C32118 +
            ((C2299 - C2300 + C2301 - C2302 + C2303 - C2304) * C2600 +
             (C2305 - C2306 + C2307 - C2308 + C2309 - C2310) * C32117 +
             (C4619 - C4620 + C4621 - C4622 + C4623 - C4624) * C2601 +
             (C4625 - C4626 + C4627 - C4628 + C4629 - C4630) * C31923) *
                C31963) *
               C530 +
           (((C2300 - C2299 + C2302 - C2301 + C2304 - C2303) * C2600 +
             (C2306 - C2305 + C2308 - C2307 + C2310 - C2309) * C32117 +
             (C4620 - C4619 + C4622 - C4621 + C4624 - C4623) * C2601 +
             (C4626 - C4625 + C4628 - C4627 + C4630 - C4629) * C31923) *
                C32118 +
            ((C2312 - C2311 + C2314 - C2313 + C2316 - C2315) * C2600 +
             (C2318 - C2317 + C2320 - C2319 + C2322 - C2321) * C32117 +
             (C748 * C1066 - C754 * C1054 + C749 * C1067 - C755 * C1055 +
              C32137 * C2145 - C756 * C2144) *
                 C2601 +
             (C748 * C1081 - C754 * C1069 + C749 * C1082 - C755 * C1070 +
              C32137 * C2147 - C756 * C2146) *
                 C31923) *
                C31963) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C7429 +
             (C31772 * C140 - C5980 * C131) * C7423 + (C6057 - C6058) * C7430 +
             (C6059 - C6060) * C7424 + C6077 * C7431 + C6078 * C7425 +
             C6079 * C7432 + C6080 * C32158) *
                C32118 +
            ((C6805 - C6806) * C7429 + (C6807 - C6808) * C7423 + C7314 * C7430 +
             C7315 * C7424 + C6667 * C7431 + C6668 * C7425 + C9408 * C7432 +
             C9409 * C32158) *
                C31963) *
               C530 +
           (((C6806 - C6805) * C7429 + (C6808 - C6807) * C7423 + C7316 * C7430 +
             C7317 * C7424 + C7318 * C7431 + C7319 * C7425 +
             (C6439 - C6440) * C7432 + (C6441 - C6442) * C32158) *
                C32118 +
            ((C6810 - C6809) * C7429 + (C6812 - C6811) * C7423 + C7320 * C7430 +
             C7321 * C7424 + C7322 * C7431 + C7323 * C7425 +
             (C6677 - C6678) * C7432 + (C6679 - C6680) * C32158) *
                C31963) *
               C531) *
              C31821 * C442 +
          ((((C5980 * C120 - C31772 * C127) * C7429 +
             (C5980 * C132 - C31772 * C141) * C7423 + (C6243 - C6244) * C7430 +
             (C6245 - C6246) * C7424 + (C6247 - C6248) * C7431 +
             (C6249 - C6250) * C7425 + (C6251 - C6252) * C7432 +
             (C6253 - C6254) * C32158) *
                C32118 +
            ((C7156 - C7157) * C7429 + (C7158 - C7159) * C7423 +
             (C6990 - C6991) * C7430 + (C6992 - C6993) * C7424 +
             (C6994 - C6995) * C7431 + (C6996 - C6997) * C7425 +
             (C9638 - C9639) * C7432 + (C9640 - C9641) * C32158) *
                C31963) *
               C530 +
           (((C7157 - C7156) * C7429 + (C7159 - C7158) * C7423 +
             (C6991 - C6990) * C7430 + (C6993 - C6992) * C7424 +
             (C6995 - C6994) * C7431 + (C6997 - C6996) * C7425 +
             (C9639 - C9638) * C7432 + (C9641 - C9640) * C32158) *
                C32118 +
            ((C7161 - C7160) * C7429 + (C7163 - C7162) * C7423 +
             (C6999 - C6998) * C7430 + (C7001 - C7000) * C7424 +
             (C7003 - C7002) * C7431 + (C7005 - C7004) * C7425 +
             (C31772 * C6986 - C5980 * C6985) * C7432 +
             (C31772 * C6988 - C5980 * C6987) * C32158) *
                C31963) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
             C32137 * C128 - C756 * C121) *
                C2600 +
            (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
             C32137 * C142 - C756 * C133) *
                C32117 +
            (C895 - C896 + C897 - C898 + C899 - C900) * C2601 +
            (C901 - C902 + C903 - C904 + C905 - C906) * C31923) *
               C32118 +
           ((C1950 - C1951 + C1952 - C1953 + C1954 - C1955) * C2600 +
            (C1956 - C1957 + C1958 - C1959 + C1960 - C1961) * C32117 +
            (C1570 - C1569 + C1572 - C1571 + C1574 - C1573) * C2601 +
            (C1576 - C1575 + C1578 - C1577 + C1580 - C1579) * C31923) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
             C756 * C122 - C32137 * C129) *
                C2600 +
            (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
             C756 * C134 - C32137 * C143) *
                C32117 +
            (C1237 - C1238 + C1239 - C1240 + C1241 - C1242) * C2601 +
            (C1243 - C1244 + C1245 - C1246 + C1247 - C1248) * C31923) *
               C32118 +
           ((C2299 - C2300 + C2301 - C2302 + C2303 - C2304) * C2600 +
            (C2305 - C2306 + C2307 - C2308 + C2309 - C2310) * C32117 +
            (C754 * C619 - C748 * C624 + C755 * C620 - C749 * C625 +
             C756 * C621 - C32137 * C626) *
                C2601 +
            (C754 * C629 - C748 * C634 + C755 * C630 - C749 * C635 +
             C756 * C631 - C32137 * C636) *
                C31923) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C748 * C128 - C754 * C121 + C749 * C129 - C755 * C122 +
             C32137 * C130 - C756 * C123) *
                C2600 +
            (C748 * C142 - C754 * C133 + C749 * C143 - C755 * C134 +
             C32137 * C144 - C756 * C135) *
                C32117 +
            (C748 * C225 - C754 * C215 + C749 * C226 - C755 * C216 +
             C32137 * C227 - C756 * C217) *
                C2601 +
            (C748 * C245 - C754 * C230 + C749 * C246 - C755 * C231 +
             C32137 * C247 - C756 * C232) *
                C31923) *
               C32118 +
           ((C748 * C330 - C754 * C320 + C749 * C331 - C755 * C321 +
             C32137 * C332 - C756 * C322) *
                C2600 +
            (C748 * C350 - C754 * C335 + C749 * C351 - C755 * C336 +
             C32137 * C352 - C756 * C337) *
                C32117 +
            (C748 * C625 - C754 * C620 + C749 * C626 - C755 * C621 +
             C32137 * C627 - C756 * C622) *
                C2601 +
            (C748 * C635 - C754 * C630 + C749 * C636 - C755 * C631 +
             C32137 * C637 - C756 * C632) *
                C31923) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
             C32137 * C128 - C756 * C121) *
                C2600 +
            (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
             C32137 * C142 - C756 * C133) *
                C32117 +
            (C895 - C896 + C897 - C898 + C899 - C900) * C2601 +
            (C901 - C902 + C903 - C904 + C905 - C906) * C31923) *
               C32118 +
           ((C1950 - C1951 + C1952 - C1953 + C1954 - C1955) * C2600 +
            (C1956 - C1957 + C1958 - C1959 + C1960 - C1961) * C32117 +
            (C1570 - C1569 + C1572 - C1571 + C1574 - C1573) * C2601 +
            (C1576 - C1575 + C1578 - C1577 + C1580 - C1579) * C31923) *
               C31963) *
              C31835 * C209 +
          (((C896 - C895 + C898 - C897 + C900 - C899) * C2600 +
            (C902 - C901 + C904 - C903 + C906 - C905) * C32117 +
            (C908 - C907 + C910 - C909 + C912 - C911) * C2601 +
            (C914 - C913 + C916 - C915 + C918 - C917) * C31923) *
               C32118 +
           ((C1569 - C1570 + C1571 - C1572 + C1573 - C1574) * C2600 +
            (C1575 - C1576 + C1577 - C1578 + C1579 - C1580) * C32117 +
            (C1581 - C1582 + C1583 - C1584 + C1585 - C1586) * C2601 +
            (C1587 - C1588 + C1589 - C1590 + C1591 - C1592) * C31923) *
               C31963) *
              C31835 * C210 +
          ((C939 * C2600 + C940 * C32117 +
            (C920 - C919 + C922 - C921 + C924 - C923) * C2601 +
            (C926 - C925 + C928 - C927 + C930 - C929) * C31923) *
               C32118 +
           ((C1582 - C1581 + C1584 - C1583 + C1586 - C1585) * C2600 +
            (C1588 - C1587 + C1590 - C1589 + C1592 - C1591) * C32117 +
            (C748 * C1559 - C754 * C1556 + C749 * C1560 - C755 * C1557 +
             C32137 * C1561 - C756 * C1558) *
                C2601 +
            (C748 * C1565 - C754 * C1562 + C749 * C1566 - C755 * C1563 +
             C32137 * C1567 - C756 * C1564) *
                C31923) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C7429 +
            (C31772 * C140 - C5980 * C131) * C7423 + (C6057 - C6058) * C7430 +
            (C6059 - C6060) * C7424 + C6077 * C7431 + C6078 * C7425 +
            C6079 * C7432 + C6080 * C32158) *
               C32118 +
           ((C6805 - C6806) * C7429 + (C6807 - C6808) * C7423 + C7314 * C7430 +
            C7315 * C7424 + C6667 * C7431 + C6668 * C7425 +
            (C6440 - C6439) * C7432 + (C6442 - C6441) * C32158) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C5980 * C120 - C31772 * C127) * C7429 +
            (C5980 * C132 - C31772 * C141) * C7423 + (C6243 - C6244) * C7430 +
            (C6245 - C6246) * C7424 + (C6247 - C6248) * C7431 +
            (C6249 - C6250) * C7425 + (C6251 - C6252) * C7432 +
            (C6253 - C6254) * C32158) *
               C32118 +
           ((C7156 - C7157) * C7429 + (C7158 - C7159) * C7423 +
            (C6990 - C6991) * C7430 + (C6992 - C6993) * C7424 +
            (C6994 - C6995) * C7431 + (C6996 - C6997) * C7425 +
            (C5980 * C1557 - C31772 * C1560) * C7432 +
            (C5980 * C1563 - C31772 * C1566) * C32158) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C31772 * C128 - C5980 * C121) * C7429 +
            (C31772 * C142 - C5980 * C133) * C7423 +
            (C31772 * C225 - C5980 * C215) * C7430 +
            (C31772 * C245 - C5980 * C230) * C7424 +
            (C31772 * C235 - C5980 * C220) * C7431 +
            (C31772 * C250 - C5980 * C240) * C7425 +
            (C31772 * C878 - C5980 * C872) * C7432 +
            (C31772 * C890 - C5980 * C881) * C32158) *
               C32118 +
           ((C31772 * C330 - C5980 * C320) * C7429 +
            (C31772 * C350 - C5980 * C335) * C7423 +
            (C31772 * C625 - C5980 * C620) * C7430 +
            (C31772 * C635 - C5980 * C630) * C7424 +
            (C31772 * C1061 - C5980 * C1052) * C7431 +
            (C31772 * C1079 - C5980 * C1064) * C7425 +
            (C31772 * C1561 - C5980 * C1558) * C7432 +
            (C31772 * C1567 - C5980 * C1564) * C32158) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C7429 +
            (C31772 * C140 - C5980 * C131) * C7423 + (C6057 - C6058) * C7430 +
            (C6059 - C6060) * C7424 + C6077 * C7431 + C6078 * C7425 +
            C6079 * C7432 + C6080 * C32158) *
               C32118 +
           ((C6805 - C6806) * C7429 + (C6807 - C6808) * C7423 + C7314 * C7430 +
            C7315 * C7424 + C6667 * C7431 + C6668 * C7425 + C9408 * C7432 +
            C9409 * C32158) *
               C31963) *
              C31835 * C209 +
          (((C6058 - C6057) * C7429 + (C6060 - C6059) * C7423 +
            (C6062 - C6061) * C7430 + (C6064 - C6063) * C7424 +
            (C6066 - C6065) * C7431 + (C6068 - C6067) * C7425 +
            (C6070 - C6069) * C7432 + (C6072 - C6071) * C32158) *
               C32118 +
           (C7316 * C7429 + C7317 * C7423 + C7318 * C7430 + C7319 * C7424 +
            (C6439 - C6440) * C7431 + (C6441 - C6442) * C7425 +
            (C6443 - C6444) * C7432 + (C6445 - C6446) * C32158) *
               C31963) *
              C31835 * C210 +
          ((C6077 * C7429 + C6078 * C7423 + C6079 * C7430 + C6080 * C7424 +
            C6081 * C7431 + C6082 * C7425 + (C6074 - C6073) * C7432 +
            (C6076 - C6075) * C32158) *
               C32118 +
           (C6667 * C7429 + C6668 * C7423 + C9408 * C7430 + C9409 * C7424 +
            (C6444 - C6443) * C7431 + (C6446 - C6445) * C7425 +
            (C31772 * C6427 - C5980 * C6426) * C7432 +
            (C31772 * C6429 - C5980 * C6428) * C32158) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
             C32137 * C128 - C756 * C121) *
                C757 +
            (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
             C32137 * C142 - C756 * C133) *
                C32183 +
            (C895 - C896 + C897 - C898 + C899 - C900) * C758 +
            (C901 - C902 + C903 - C904 + C905 - C906) * C32171 + C939 * C759 +
            C940 * C32148) *
               C31876 * C31835 * C440 +
           ((C896 - C895 + C898 - C897 + C900 - C899) * C757 +
            (C902 - C901 + C904 - C903 + C906 - C905) * C32183 +
            (C908 - C907 + C910 - C909 + C912 - C911) * C758 +
            (C914 - C913 + C916 - C915 + C918 - C917) * C32171 +
            (C919 - C920 + C921 - C922 + C923 - C924) * C759 +
            (C925 - C926 + C927 - C928 + C929 - C930) * C32148) *
               C31876 * C31835 * C441) *
              C442 +
          (((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
             C756 * C122 - C32137 * C129) *
                C757 +
            (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
             C756 * C134 - C32137 * C143) *
                C32183 +
            (C1237 - C1238 + C1239 - C1240 + C1241 - C1242) * C758 +
            (C1243 - C1244 + C1245 - C1246 + C1247 - C1248) * C32171 +
            (C1249 - C1250 + C1251 - C1252 + C1253 - C1254) * C759 +
            (C1255 - C1256 + C1257 - C1258 + C1259 - C1260) * C32148) *
               C31876 * C31835 * C440 +
           ((C1238 - C1237 + C1240 - C1239 + C1242 - C1241) * C757 +
            (C1244 - C1243 + C1246 - C1245 + C1248 - C1247) * C32183 +
            (C1250 - C1249 + C1252 - C1251 + C1254 - C1253) * C758 +
            (C1256 - C1255 + C1258 - C1257 + C1260 - C1259) * C32171 +
            (C748 * C877 - C754 * C871 + C749 * C878 - C755 * C872 +
             C32137 * C1233 - C756 * C1232) *
                C759 +
            (C748 * C889 - C754 * C880 + C749 * C890 - C755 * C881 +
             C32137 * C1235 - C756 * C1234) *
                C32148) *
               C31876 * C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C31864) *
               C31876 * C31835 * C440 +
           ((C113 * C213 - C101 * C223 + C114 * C214 - C102 * C224 +
             C115 * C215 - C103 * C225 + C116 * C216 - C104 * C226 +
             C117 * C217 - C105 * C227) *
                C118 +
            (C113 * C228 - C101 * C243 + C114 * C229 - C102 * C244 +
             C115 * C230 - C103 * C245 + C116 * C231 - C104 * C246 +
             C117 * C232 - C105 * C247) *
                C31864) *
               C31876 * C31835 * C441) *
              C442 +
          (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
             C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
             C117 * C124 - C105 * C136) *
                C118 +
            (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
             C117 * C137 - C105 * C145) *
                C31864) *
               C31876 * C31835 * C440 +
           ((C101 * C224 - C113 * C214 + C102 * C225 - C114 * C215 +
             C103 * C226 - C115 * C216 + C104 * C227 - C116 * C217 +
             C105 * C445 - C117 * C444) *
                C118 +
            (C101 * C244 - C113 * C229 + C102 * C245 - C114 * C230 +
             C103 * C246 - C115 * C231 + C104 * C247 - C116 * C232 +
             C105 * C447 - C117 * C446) *
                C31864) *
               C31876 * C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
              C32137 * C128 - C756 * C121) *
                 C118 +
             (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
              C32137 * C142 - C756 * C133) *
                 C31864) *
                C32184 +
            ((C1950 - C1951 + C1952 - C1953 + C1954 - C1955) * C118 +
             (C1956 - C1957 + C1958 - C1959 + C1960 - C1961) * C31864) *
                C32173 +
            C1998 * C32151) *
               C31835 * C440 +
           (((C896 - C895 + C898 - C897 + C900 - C899) * C118 +
             (C902 - C901 + C904 - C903 + C906 - C905) * C31864) *
                C32184 +
            ((C1569 - C1570 + C1571 - C1572 + C1573 - C1574) * C118 +
             (C1575 - C1576 + C1577 - C1578 + C1579 - C1580) * C31864) *
                C32173 +
            ((C754 * C1053 - C748 * C1065 + C755 * C1054 - C749 * C1066 +
              C756 * C1055 - C32137 * C1067) *
                 C118 +
             (C754 * C1068 - C748 * C1080 + C755 * C1069 - C749 * C1081 +
              C756 * C1070 - C32137 * C1082) *
                 C31864) *
                C32151) *
               C31835 * C441) *
              C442 +
          ((((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
              C756 * C122 - C32137 * C129) *
                 C118 +
             (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
              C756 * C134 - C32137 * C143) *
                 C31864) *
                C32184 +
            ((C754 * C319 - C748 * C329 + C755 * C320 - C749 * C330 +
              C756 * C321 - C32137 * C331) *
                 C118 +
             (C754 * C334 - C748 * C349 + C755 * C335 - C749 * C350 +
              C756 * C336 - C32137 * C351) *
                 C31864) *
                C32173 +
            ((C754 * C324 - C748 * C339 + C755 * C325 - C749 * C340 +
              C756 * C326 - C32137 * C341) *
                 C118 +
             (C754 * C344 - C748 * C354 + C755 * C345 - C749 * C355 +
              C756 * C346 - C32137 * C356) *
                 C31864) *
                C32151) *
               C31835 * C440 +
           (((C1238 - C1237 + C1240 - C1239 + C1242 - C1241) * C118 +
             (C1244 - C1243 + C1246 - C1245 + C1248 - C1247) * C31864) *
                C32184 +
            ((C748 * C624 - C754 * C619 + C749 * C625 - C755 * C620 +
              C32137 * C626 - C756 * C621) *
                 C118 +
             (C748 * C634 - C754 * C629 + C749 * C635 - C755 * C630 +
              C32137 * C636 - C756 * C631) *
                 C31864) *
                C32173 +
            ((C748 * C1066 - C754 * C1054 + C749 * C1067 - C755 * C1055 +
              C32137 * C2145 - C756 * C2144) *
                 C118 +
             (C748 * C1081 - C754 * C1069 + C749 * C1082 - C755 * C1070 +
              C32137 * C2147 - C756 * C2146) *
                 C31864) *
                C32151) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C5157 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C5151 +
            (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C5158 +
            (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C5152 +
            C5315 * C5159 + C5316 * C32148) *
               C31876 * C31835 * C440 +
           ((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C5157 +
            (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C5151 +
            (C5284 - C5283 + C5286 - C5285 + C5288 - C5287) * C5158 +
            (C5290 - C5289 + C5292 - C5291 + C5294 - C5293) * C5152 +
            (C5295 - C5296 + C5297 - C5298 + C5299 - C5300) * C5159 +
            (C5301 - C5302 + C5303 - C5304 + C5305 - C5306) * C32148) *
               C31876 * C31835 * C441) *
              C442 +
          (((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
             C5156 * C122 - C32137 * C129) *
                C5157 +
            (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
             C5156 * C134 - C32137 * C143) *
                C5151 +
            (C5573 - C5574 + C5575 - C5576 + C5577 - C5578) * C5158 +
            (C5579 - C5580 + C5581 - C5582 + C5583 - C5584) * C5152 +
            (C5585 - C5586 + C5587 - C5588 + C5589 - C5590) * C5159 +
            (C5591 - C5592 + C5593 - C5594 + C5595 - C5596) * C32148) *
               C31876 * C31835 * C440 +
           ((C5574 - C5573 + C5576 - C5575 + C5578 - C5577) * C5157 +
            (C5580 - C5579 + C5582 - C5581 + C5584 - C5583) * C5151 +
            (C5586 - C5585 + C5588 - C5587 + C5590 - C5589) * C5158 +
            (C5592 - C5591 + C5594 - C5593 + C5596 - C5595) * C5152 +
            (C32180 * C877 - C5154 * C871 + C32167 * C878 - C5155 * C872 +
             C32137 * C1233 - C5156 * C1232) *
                C5159 +
            (C32180 * C889 - C5154 * C880 + C32167 * C890 - C5155 * C881 +
             C32137 * C1235 - C5156 * C1234) *
                C32148) *
               C31876 * C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C5981 +
            (C31772 * C140 - C5980 * C131) * C5975 + (C6057 - C6058) * C5982 +
            (C6059 - C6060) * C5976 + C6077 * C5983 + C6078 * C5977 +
            C6079 * C5984 + C6080 * C5978 + C6081 * C5985 + C6082 * C5979) *
               C31876 * C31835 * C440 +
           ((C6058 - C6057) * C5981 + (C6060 - C6059) * C5975 +
            (C6062 - C6061) * C5982 + (C6064 - C6063) * C5976 +
            (C6066 - C6065) * C5983 + (C6068 - C6067) * C5977 +
            (C6070 - C6069) * C5984 + (C6072 - C6071) * C5978 +
            (C6073 - C6074) * C5985 + (C6075 - C6076) * C5979) *
               C31876 * C31835 * C441) *
              C442 +
          (((C5980 * C120 - C31772 * C127) * C5981 +
            (C5980 * C132 - C31772 * C141) * C5975 + (C6243 - C6244) * C5982 +
            (C6245 - C6246) * C5976 + (C6247 - C6248) * C5983 +
            (C6249 - C6250) * C5977 + (C6251 - C6252) * C5984 +
            (C6253 - C6254) * C5978 + (C6255 - C6256) * C5985 +
            (C6257 - C6258) * C5979) *
               C31876 * C31835 * C440 +
           ((C6244 - C6243) * C5981 + (C6246 - C6245) * C5975 +
            (C6248 - C6247) * C5982 + (C6250 - C6249) * C5976 +
            (C6252 - C6251) * C5983 + (C6254 - C6253) * C5977 +
            (C6256 - C6255) * C5984 + (C6258 - C6257) * C5978 +
            (C31772 * C6239 - C5980 * C6238) * C5985 +
            (C31772 * C6241 - C5980 * C6240) * C5979) *
               C31876 * C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C5157 +
             (C31772 * C140 - C5980 * C131) * C5151 + (C6057 - C6058) * C5158 +
             (C6059 - C6060) * C5152 + C6077 * C5159 + C6078 * C32148) *
                C32184 +
            ((C6805 - C6806) * C5157 + (C6807 - C6808) * C5151 +
             (C6432 - C6431) * C5158 + (C6434 - C6433) * C5152 + C6667 * C5159 +
             C6668 * C32148) *
                C32173 +
            C6839 * C32151) *
               C31835 * C440 +
           (((C6058 - C6057) * C5157 + (C6060 - C6059) * C5151 +
             (C6062 - C6061) * C5158 + (C6064 - C6063) * C5152 +
             (C6066 - C6065) * C5159 + (C6068 - C6067) * C32148) *
                C32184 +
            ((C6431 - C6432) * C5157 + (C6433 - C6434) * C5151 +
             (C6435 - C6436) * C5158 + (C6437 - C6438) * C5152 +
             (C6439 - C6440) * C5159 + (C6441 - C6442) * C32148) *
                C32173 +
            ((C6670 - C6669) * C5157 + (C6672 - C6671) * C5151 +
             (C6674 - C6673) * C5158 + (C6676 - C6675) * C5152 +
             (C6677 - C6678) * C5159 + (C6679 - C6680) * C32148) *
                C32151) *
               C31835 * C441) *
              C442 +
          ((((C5980 * C120 - C31772 * C127) * C5157 +
             (C5980 * C132 - C31772 * C141) * C5151 + (C6243 - C6244) * C5158 +
             (C6245 - C6246) * C5152 + (C6247 - C6248) * C5159 +
             (C6249 - C6250) * C32148) *
                C32184 +
            ((C5980 * C319 - C31772 * C329) * C5157 +
             (C5980 * C334 - C31772 * C349) * C5151 + (C6990 - C6991) * C5158 +
             (C6992 - C6993) * C5152 + (C6994 - C6995) * C5159 +
             (C6996 - C6997) * C32148) *
                C32173 +
            ((C5980 * C324 - C31772 * C339) * C5157 +
             (C5980 * C344 - C31772 * C354) * C5151 + (C6998 - C6999) * C5158 +
             (C7000 - C7001) * C5152 + (C7002 - C7003) * C5159 +
             (C7004 - C7005) * C32148) *
                C32151) *
               C31835 * C440 +
           (((C6244 - C6243) * C5157 + (C6246 - C6245) * C5151 +
             (C6248 - C6247) * C5158 + (C6250 - C6249) * C5152 +
             (C6252 - C6251) * C5159 + (C6254 - C6253) * C32148) *
                C32184 +
            ((C6991 - C6990) * C5157 + (C6993 - C6992) * C5151 +
             (C6995 - C6994) * C5158 + (C6997 - C6996) * C5152 +
             (C31772 * C1560 - C5980 * C1557) * C5159 +
             (C31772 * C1566 - C5980 * C1563) * C32148) *
                C32173 +
            ((C6999 - C6998) * C5157 + (C7001 - C7000) * C5151 +
             (C7003 - C7002) * C5158 + (C7005 - C7004) * C5152 +
             (C31772 * C6986 - C5980 * C6985) * C5159 +
             (C31772 * C6988 - C5980 * C6987) * C32148) *
                C32151) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
             C32137 * C128 - C756 * C121) *
                C757 +
            (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
             C32137 * C142 - C756 * C133) *
                C32183 +
            (C895 - C896 + C897 - C898 + C899 - C900) * C758 +
            (C901 - C902 + C903 - C904 + C905 - C906) * C32171 + C939 * C759 +
            C940 * C32148) *
               C31876 * C530 +
           ((C754 * C318 - C748 * C328 + C755 * C319 - C749 * C329 +
             C756 * C320 - C32137 * C330) *
                C757 +
            (C754 * C333 - C748 * C348 + C755 * C334 - C749 * C349 +
             C756 * C335 - C32137 * C350) *
                C32183 +
            (C1569 - C1570 + C1571 - C1572 + C1573 - C1574) * C758 +
            (C1575 - C1576 + C1577 - C1578 + C1579 - C1580) * C32171 +
            (C1581 - C1582 + C1583 - C1584 + C1585 - C1586) * C759 +
            (C1587 - C1588 + C1589 - C1590 + C1591 - C1592) * C32148) *
               C31876 * C531) *
              C440 +
          (((C896 - C895 + C898 - C897 + C900 - C899) * C757 +
            (C902 - C901 + C904 - C903 + C906 - C905) * C32183 +
            (C908 - C907 + C910 - C909 + C912 - C911) * C758 +
            (C914 - C913 + C916 - C915 + C918 - C917) * C32171 +
            (C919 - C920 + C921 - C922 + C923 - C924) * C759 +
            (C925 - C926 + C927 - C928 + C929 - C930) * C32148) *
               C31876 * C530 +
           ((C1570 - C1569 + C1572 - C1571 + C1574 - C1573) * C757 +
            (C1576 - C1575 + C1578 - C1577 + C1580 - C1579) * C32183 +
            (C1582 - C1581 + C1584 - C1583 + C1586 - C1585) * C758 +
            (C1588 - C1587 + C1590 - C1589 + C1592 - C1591) * C32171 +
            (C748 * C1559 - C754 * C1556 + C749 * C1560 - C755 * C1557 +
             C32137 * C1561 - C756 * C1558) *
                C759 +
            (C748 * C1565 - C754 * C1562 + C749 * C1566 - C755 * C1563 +
             C32137 * C1567 - C756 * C1564) *
                C32148) *
               C31876 * C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C31864) *
               C31876 * C530 +
           ((C113 * C318 - C101 * C328 + C114 * C319 - C102 * C329 +
             C115 * C320 - C103 * C330 + C116 * C321 - C104 * C331 +
             C117 * C322 - C105 * C332) *
                C118 +
            (C113 * C333 - C101 * C348 + C114 * C334 - C102 * C349 +
             C115 * C335 - C103 * C350 + C116 * C336 - C104 * C351 +
             C117 * C337 - C105 * C352) *
                C31864) *
               C31876 * C531) *
              C440 +
          (((C113 * C213 - C101 * C223 + C114 * C214 - C102 * C224 +
             C115 * C215 - C103 * C225 + C116 * C216 - C104 * C226 +
             C117 * C217 - C105 * C227) *
                C118 +
            (C113 * C228 - C101 * C243 + C114 * C229 - C102 * C244 +
             C115 * C230 - C103 * C245 + C116 * C231 - C104 * C246 +
             C117 * C232 - C105 * C247) *
                C31864) *
               C31876 * C530 +
           ((C101 * C623 - C113 * C618 + C102 * C624 - C114 * C619 +
             C103 * C625 - C115 * C620 + C104 * C626 - C116 * C621 +
             C105 * C627 - C117 * C622) *
                C118 +
            (C101 * C633 - C113 * C628 + C102 * C634 - C114 * C629 +
             C103 * C635 - C115 * C630 + C104 * C636 - C116 * C631 +
             C105 * C637 - C117 * C632) *
                C31864) *
               C31876 * C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
              C32137 * C128 - C756 * C121) *
                 C118 +
             (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
              C32137 * C142 - C756 * C133) *
                 C31864) *
                C32184 +
            ((C1950 - C1951 + C1952 - C1953 + C1954 - C1955) * C118 +
             (C1956 - C1957 + C1958 - C1959 + C1960 - C1961) * C31864) *
                C32173 +
            C1998 * C32151) *
               C530 +
           (((C1951 - C1950 + C1953 - C1952 + C1955 - C1954) * C118 +
             (C1957 - C1956 + C1959 - C1958 + C1961 - C1960) * C31864) *
                C32184 +
            ((C1963 - C1962 + C1965 - C1964 + C1967 - C1966) * C118 +
             (C1969 - C1968 + C1971 - C1970 + C1973 - C1972) * C31864) *
                C32173 +
            ((C1974 - C1975 + C1976 - C1977 + C1978 - C1979) * C118 +
             (C1980 - C1981 + C1982 - C1983 + C1984 - C1985) * C31864) *
                C32151) *
               C531) *
              C440 +
          ((((C896 - C895 + C898 - C897 + C900 - C899) * C118 +
             (C902 - C901 + C904 - C903 + C906 - C905) * C31864) *
                C32184 +
            ((C1569 - C1570 + C1571 - C1572 + C1573 - C1574) * C118 +
             (C1575 - C1576 + C1577 - C1578 + C1579 - C1580) * C31864) *
                C32173 +
            ((C2481 - C2482 + C2483 - C2484 + C2485 - C2486) * C118 +
             (C2487 - C2488 + C2489 - C2490 + C2491 - C2492) * C31864) *
                C32151) *
               C530 +
           (((C1570 - C1569 + C1572 - C1571 + C1574 - C1573) * C118 +
             (C1576 - C1575 + C1578 - C1577 + C1580 - C1579) * C31864) *
                C32184 +
            ((C2482 - C2481 + C2484 - C2483 + C2486 - C2485) * C118 +
             (C2488 - C2487 + C2490 - C2489 + C2492 - C2491) * C31864) *
                C32173 +
            ((C748 * C2471 - C754 * C2468 + C749 * C2472 - C755 * C2469 +
              C32137 * C2473 - C756 * C2470) *
                 C118 +
             (C748 * C2477 - C754 * C2474 + C749 * C2478 - C755 * C2475 +
              C32137 * C2479 - C756 * C2476) *
                 C31864) *
                C32151) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C5157 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C5151 +
            (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C5158 +
            (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C5152 +
            C5315 * C5159 + C5316 * C32148) *
               C31876 * C530 +
           ((C5154 * C318 - C32180 * C328 + C5155 * C319 - C32167 * C329 +
             C5156 * C320 - C32137 * C330) *
                C5157 +
            (C5154 * C333 - C32180 * C348 + C5155 * C334 - C32167 * C349 +
             C5156 * C335 - C32137 * C350) *
                C5151 +
            (C5889 - C5890 + C5891 - C5892 + C5893 - C5894) * C5158 +
            (C5895 - C5896 + C5897 - C5898 + C5899 - C5900) * C5152 +
            (C5901 - C5902 + C5903 - C5904 + C5905 - C5906) * C5159 +
            (C5907 - C5908 + C5909 - C5910 + C5911 - C5912) * C32148) *
               C31876 * C531) *
              C440 +
          (((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C5157 +
            (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C5151 +
            (C5284 - C5283 + C5286 - C5285 + C5288 - C5287) * C5158 +
            (C5290 - C5289 + C5292 - C5291 + C5294 - C5293) * C5152 +
            (C5295 - C5296 + C5297 - C5298 + C5299 - C5300) * C5159 +
            (C5301 - C5302 + C5303 - C5304 + C5305 - C5306) * C32148) *
               C31876 * C530 +
           ((C5890 - C5889 + C5892 - C5891 + C5894 - C5893) * C5157 +
            (C5896 - C5895 + C5898 - C5897 + C5900 - C5899) * C5151 +
            (C5902 - C5901 + C5904 - C5903 + C5906 - C5905) * C5158 +
            (C5908 - C5907 + C5910 - C5909 + C5912 - C5911) * C5152 +
            (C32180 * C1559 - C5154 * C1556 + C32167 * C1560 - C5155 * C1557 +
             C32137 * C1561 - C5156 * C1558) *
                C5159 +
            (C32180 * C1565 - C5154 * C1562 + C32167 * C1566 - C5155 * C1563 +
             C32137 * C1567 - C5156 * C1564) *
                C32148) *
               C31876 * C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C5981 +
            (C31772 * C140 - C5980 * C131) * C5975 + (C6057 - C6058) * C5982 +
            (C6059 - C6060) * C5976 + C6077 * C5983 + C6078 * C5977 +
            C6079 * C5984 + C6080 * C5978 + C6081 * C5985 + C6082 * C5979) *
               C31876 * C530 +
           ((C5980 * C318 - C31772 * C328) * C5981 +
            (C5980 * C333 - C31772 * C348) * C5975 + (C6431 - C6432) * C5982 +
            (C6433 - C6434) * C5976 + (C6435 - C6436) * C5983 +
            (C6437 - C6438) * C5977 + (C6439 - C6440) * C5984 +
            (C6441 - C6442) * C5978 + (C6443 - C6444) * C5985 +
            (C6445 - C6446) * C5979) *
               C31876 * C531) *
              C440 +
          (((C6058 - C6057) * C5981 + (C6060 - C6059) * C5975 +
            (C6062 - C6061) * C5982 + (C6064 - C6063) * C5976 +
            (C6066 - C6065) * C5983 + (C6068 - C6067) * C5977 +
            (C6070 - C6069) * C5984 + (C6072 - C6071) * C5978 +
            (C6073 - C6074) * C5985 + (C6075 - C6076) * C5979) *
               C31876 * C530 +
           ((C6432 - C6431) * C5981 + (C6434 - C6433) * C5975 +
            (C6436 - C6435) * C5982 + (C6438 - C6437) * C5976 +
            (C6440 - C6439) * C5983 + (C6442 - C6441) * C5977 +
            (C6444 - C6443) * C5984 + (C6446 - C6445) * C5978 +
            (C31772 * C6427 - C5980 * C6426) * C5985 +
            (C31772 * C6429 - C5980 * C6428) * C5979) *
               C31876 * C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C5157 +
             (C31772 * C140 - C5980 * C131) * C5151 + (C6057 - C6058) * C5158 +
             (C6059 - C6060) * C5152 + C6077 * C5159 + C6078 * C32148) *
                C32184 +
            ((C6805 - C6806) * C5157 + (C6807 - C6808) * C5151 + C7314 * C5158 +
             C7315 * C5152 + C6667 * C5159 + C6668 * C32148) *
                C32173 +
            C6839 * C32151) *
               C530 +
           (((C6806 - C6805) * C5157 + (C6808 - C6807) * C5151 + C7316 * C5158 +
             C7317 * C5152 + C7318 * C5159 + C7319 * C32148) *
                C32184 +
            ((C6810 - C6809) * C5157 + (C6812 - C6811) * C5151 + C7320 * C5158 +
             C7321 * C5152 + C7322 * C5159 + C7323 * C32148) *
                C32173 +
            ((C6817 - C6818) * C5157 + (C6819 - C6820) * C5151 +
             (C6821 - C6822) * C5158 + (C6823 - C6824) * C5152 +
             (C6825 - C6826) * C5159 + (C6827 - C6828) * C32148) *
                C32151) *
               C531) *
              C440 +
          ((((C6058 - C6057) * C5157 + (C6060 - C6059) * C5151 +
             (C6062 - C6061) * C5158 + (C6064 - C6063) * C5152 +
             (C6066 - C6065) * C5159 + (C6068 - C6067) * C32148) *
                C32184 +
            (C7316 * C5157 + C7317 * C5151 + C7318 * C5158 + C7319 * C5152 +
             (C6439 - C6440) * C5159 + (C6441 - C6442) * C32148) *
                C32173 +
            (C7320 * C5157 + C7321 * C5151 + C7322 * C5158 + C7323 * C5152 +
             (C6677 - C6678) * C5159 + (C6679 - C6680) * C32148) *
                C32151) *
               C530 +
           ((C7314 * C5157 + C7315 * C5151 + C6667 * C5158 + C6668 * C5152 +
             (C6440 - C6439) * C5159 + (C6442 - C6441) * C32148) *
                C32184 +
            (C6813 * C5157 + C6814 * C5151 + C6681 * C5158 + C6682 * C5152 +
             (C6678 - C6677) * C5159 + (C6680 - C6679) * C32148) *
                C32173 +
            ((C6822 - C6821) * C5157 + (C6824 - C6823) * C5151 +
             (C6826 - C6825) * C5158 + (C6828 - C6827) * C5152 +
             (C31772 * C7310 - C5980 * C7309) * C5159 +
             (C31772 * C7312 - C5980 * C7311) * C32148) *
                C32151) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                C105 * C130 - C117 * C123) *
                   C118 +
               (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                C105 * C144 - C117 * C135) *
                   C31864) *
                  C31876 * C31835 * C31821 * C110 +
              ((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
                C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
                C117 * C124 - C105 * C136) *
                   C118 +
               (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
                C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
                C117 * C137 - C105 * C145) *
                   C31864) *
                  C31876 * C31835 * C31821 * C111 +
              ((C101 * C128 - C113 * C121 + C102 * C129 - C114 * C122 +
                C103 * C130 - C115 * C123 + C104 * C136 - C116 * C124 +
                C105 * C138 - C117 * C125) *
                   C118 +
               (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C134 +
                C103 * C144 - C115 * C135 + C104 * C145 - C116 * C137 +
                C105 * C146 - C117 * C139) *
                   C31864) *
                  C31876 * C31835 * C31821 * C112) +
         std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                C105 * C130 - C117 * C123) *
                   C118 +
               (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                C105 * C144 - C117 * C135) *
                   C31864) *
                  C31876 * C31835 * C209 +
              ((C113 * C213 - C101 * C223 + C114 * C214 - C102 * C224 +
                C115 * C215 - C103 * C225 + C116 * C216 - C104 * C226 +
                C117 * C217 - C105 * C227) *
                   C118 +
               (C113 * C228 - C101 * C243 + C114 * C229 - C102 * C244 +
                C115 * C230 - C103 * C245 + C116 * C231 - C104 * C246 +
                C117 * C232 - C105 * C247) *
                   C31864) *
                  C31876 * C31835 * C210 +
              ((C101 * C233 - C113 * C218 + C102 * C234 - C114 * C219 +
                C103 * C235 - C115 * C220 + C104 * C236 - C116 * C221 +
                C105 * C237 - C117 * C222) *
                   C118 +
               (C101 * C248 - C113 * C238 + C102 * C249 - C114 * C239 +
                C103 * C250 - C115 * C240 + C104 * C251 - C116 * C241 +
                C105 * C252 - C117 * C242) *
                   C31864) *
                  C31876 * C31835 * C211) *
             C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
            C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
            C105 * C130 - C117 * C123) *
               C118 +
           (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
            C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
            C105 * C144 - C117 * C135) *
               C31864) *
              C31876 * C315 +
          ((C113 * C318 - C101 * C328 + C114 * C319 - C102 * C329 +
            C115 * C320 - C103 * C330 + C116 * C321 - C104 * C331 +
            C117 * C322 - C105 * C332) *
               C118 +
           (C113 * C333 - C101 * C348 + C114 * C334 - C102 * C349 +
            C115 * C335 - C103 * C350 + C116 * C336 - C104 * C351 +
            C117 * C337 - C105 * C352) *
               C31864) *
              C31876 * C316 +
          ((C101 * C338 - C113 * C323 + C102 * C339 - C114 * C324 +
            C103 * C340 - C115 * C325 + C104 * C341 - C116 * C326 +
            C105 * C342 - C117 * C327) *
               C118 +
           (C101 * C353 - C113 * C343 + C102 * C354 - C114 * C344 +
            C103 * C355 - C115 * C345 + C104 * C356 - C116 * C346 +
            C105 * C357 - C117 * C347) *
               C31864) *
              C31876 * C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
            C32137 * C128 - C756 * C121) *
               C757 +
           (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
            C32137 * C142 - C756 * C133) *
               C32183 +
           (C748 * C223 - C754 * C213 + C749 * C224 - C755 * C214 +
            C32137 * C225 - C756 * C215) *
               C758 +
           (C748 * C243 - C754 * C228 + C749 * C244 - C755 * C229 +
            C32137 * C245 - C756 * C230) *
               C32171 +
           (C748 * C233 - C754 * C218 + C749 * C234 - C755 * C219 +
            C32137 * C235 - C756 * C220) *
               C759 +
           (C748 * C248 - C754 * C238 + C749 * C249 - C755 * C239 +
            C32137 * C250 - C756 * C240) *
               C32148) *
              C31876 * C31835 * C31821 * C110 +
          ((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
            C756 * C122 - C32137 * C129) *
               C757 +
           (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
            C756 * C134 - C32137 * C143) *
               C32183 +
           (C754 * C214 - C748 * C224 + C755 * C215 - C749 * C225 +
            C756 * C216 - C32137 * C226) *
               C758 +
           (C754 * C229 - C748 * C244 + C755 * C230 - C749 * C245 +
            C756 * C231 - C32137 * C246) *
               C32171 +
           (C754 * C219 - C748 * C234 + C755 * C220 - C749 * C235 +
            C756 * C221 - C32137 * C236) *
               C759 +
           (C754 * C239 - C748 * C249 + C755 * C240 - C749 * C250 +
            C756 * C241 - C32137 * C251) *
               C32148) *
              C31876 * C31835 * C31821 * C111 +
          ((C748 * C128 - C754 * C121 + C749 * C129 - C755 * C122 +
            C32137 * C130 - C756 * C123) *
               C757 +
           (C748 * C142 - C754 * C133 + C749 * C143 - C755 * C134 +
            C32137 * C144 - C756 * C135) *
               C32183 +
           (C748 * C225 - C754 * C215 + C749 * C226 - C755 * C216 +
            C32137 * C227 - C756 * C217) *
               C758 +
           (C748 * C245 - C754 * C230 + C749 * C246 - C755 * C231 +
            C32137 * C247 - C756 * C232) *
               C32171 +
           (C748 * C235 - C754 * C220 + C749 * C236 - C755 * C221 +
            C32137 * C237 - C756 * C222) *
               C759 +
           (C748 * C250 - C754 * C240 + C749 * C251 - C755 * C241 +
            C32137 * C252 - C756 * C242) *
               C32148) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
            C32137 * C128 - C756 * C121) *
               C757 +
           (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
            C32137 * C142 - C756 * C133) *
               C32183 +
           (C895 - C896 + C897 - C898 + C899 - C900) * C758 +
           (C901 - C902 + C903 - C904 + C905 - C906) * C32171 + C939 * C759 +
           C940 * C32148) *
              C31876 * C31835 * C209 +
          ((C896 - C895 + C898 - C897 + C900 - C899) * C757 +
           (C902 - C901 + C904 - C903 + C906 - C905) * C32183 +
           (C908 - C907 + C910 - C909 + C912 - C911) * C758 +
           (C914 - C913 + C916 - C915 + C918 - C917) * C32171 +
           (C919 - C920 + C921 - C922 + C923 - C924) * C759 +
           (C925 - C926 + C927 - C928 + C929 - C930) * C32148) *
              C31876 * C31835 * C210 +
          (C939 * C757 + C940 * C32183 +
           (C920 - C919 + C922 - C921 + C924 - C923) * C758 +
           (C926 - C925 + C928 - C927 + C930 - C929) * C32171 +
           (C748 * C882 - C754 * C873 + C749 * C883 - C755 * C874 +
            C32137 * C884 - C756 * C875) *
               C759 +
           (C748 * C891 - C754 * C885 + C749 * C892 - C755 * C886 +
            C32137 * C893 - C756 * C887) *
               C32148) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
            C32137 * C128 - C756 * C121) *
               C757 +
           (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
            C32137 * C142 - C756 * C133) *
               C32183 +
           (C895 - C896 + C897 - C898 + C899 - C900) * C758 +
           (C901 - C902 + C903 - C904 + C905 - C906) * C32171 + C939 * C759 +
           C940 * C32148) *
              C31876 * C315 +
          ((C754 * C318 - C748 * C328 + C755 * C319 - C749 * C329 +
            C756 * C320 - C32137 * C330) *
               C757 +
           (C754 * C333 - C748 * C348 + C755 * C334 - C749 * C349 +
            C756 * C335 - C32137 * C350) *
               C32183 +
           (C754 * C618 - C748 * C623 + C755 * C619 - C749 * C624 +
            C756 * C620 - C32137 * C625) *
               C758 +
           (C754 * C628 - C748 * C633 + C755 * C629 - C749 * C634 +
            C756 * C630 - C32137 * C635) *
               C32171 +
           (C754 * C1050 - C748 * C1059 + C755 * C1051 - C749 * C1060 +
            C756 * C1052 - C32137 * C1061) *
               C759 +
           (C754 * C1062 - C748 * C1077 + C755 * C1063 - C749 * C1078 +
            C756 * C1064 - C32137 * C1079) *
               C32148) *
              C31876 * C316 +
          ((C748 * C338 - C754 * C323 + C749 * C339 - C755 * C324 +
            C32137 * C340 - C756 * C325) *
               C757 +
           (C748 * C353 - C754 * C343 + C749 * C354 - C755 * C344 +
            C32137 * C355 - C756 * C345) *
               C32183 +
           (C748 * C1065 - C754 * C1053 + C749 * C1066 - C755 * C1054 +
            C32137 * C1067 - C756 * C1055) *
               C758 +
           (C748 * C1080 - C754 * C1068 + C749 * C1081 - C755 * C1069 +
            C32137 * C1082 - C756 * C1070) *
               C32171 +
           (C748 * C1071 - C754 * C1056 + C749 * C1072 - C755 * C1057 +
            C32137 * C1073 - C756 * C1058) *
               C759 +
           (C748 * C1083 - C754 * C1074 + C749 * C1084 - C755 * C1075 +
            C32137 * C1085 - C756 * C1076) *
               C32148) *
              C31876 * C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
             C32137 * C128 - C756 * C121) *
                C118 +
            (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
             C32137 * C142 - C756 * C133) *
                C31864) *
               C32184 +
           ((C748 * C328 - C754 * C318 + C749 * C329 - C755 * C319 +
             C32137 * C330 - C756 * C320) *
                C118 +
            (C748 * C348 - C754 * C333 + C749 * C349 - C755 * C334 +
             C32137 * C350 - C756 * C335) *
                C31864) *
               C32173 +
           ((C748 * C338 - C754 * C323 + C749 * C339 - C755 * C324 +
             C32137 * C340 - C756 * C325) *
                C118 +
            (C748 * C353 - C754 * C343 + C749 * C354 - C755 * C344 +
             C32137 * C355 - C756 * C345) *
                C31864) *
               C32151) *
              C31835 * C31821 * C110 +
          (((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
             C756 * C122 - C32137 * C129) *
                C118 +
            (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
             C756 * C134 - C32137 * C143) *
                C31864) *
               C32184 +
           ((C754 * C319 - C748 * C329 + C755 * C320 - C749 * C330 +
             C756 * C321 - C32137 * C331) *
                C118 +
            (C754 * C334 - C748 * C349 + C755 * C335 - C749 * C350 +
             C756 * C336 - C32137 * C351) *
                C31864) *
               C32173 +
           ((C754 * C324 - C748 * C339 + C755 * C325 - C749 * C340 +
             C756 * C326 - C32137 * C341) *
                C118 +
            (C754 * C344 - C748 * C354 + C755 * C345 - C749 * C355 +
             C756 * C346 - C32137 * C356) *
                C31864) *
               C32151) *
              C31835 * C31821 * C111 +
          (((C748 * C128 - C754 * C121 + C749 * C129 - C755 * C122 +
             C32137 * C130 - C756 * C123) *
                C118 +
            (C748 * C142 - C754 * C133 + C749 * C143 - C755 * C134 +
             C32137 * C144 - C756 * C135) *
                C31864) *
               C32184 +
           ((C748 * C330 - C754 * C320 + C749 * C331 - C755 * C321 +
             C32137 * C332 - C756 * C322) *
                C118 +
            (C748 * C350 - C754 * C335 + C749 * C351 - C755 * C336 +
             C32137 * C352 - C756 * C337) *
                C31864) *
               C32173 +
           ((C748 * C340 - C754 * C325 + C749 * C341 - C755 * C326 +
             C32137 * C342 - C756 * C327) *
                C118 +
            (C748 * C355 - C754 * C345 + C749 * C356 - C755 * C346 +
             C32137 * C357 - C756 * C347) *
                C31864) *
               C32151) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
             C32137 * C128 - C756 * C121) *
                C118 +
            (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
             C32137 * C142 - C756 * C133) *
                C31864) *
               C32184 +
           ((C748 * C328 - C754 * C318 + C749 * C329 - C755 * C319 +
             C32137 * C330 - C756 * C320) *
                C118 +
            (C748 * C348 - C754 * C333 + C749 * C349 - C755 * C334 +
             C32137 * C350 - C756 * C335) *
                C31864) *
               C32173 +
           ((C748 * C338 - C754 * C323 + C749 * C339 - C755 * C324 +
             C32137 * C340 - C756 * C325) *
                C118 +
            (C748 * C353 - C754 * C343 + C749 * C354 - C755 * C344 +
             C32137 * C355 - C756 * C345) *
                C31864) *
               C32151) *
              C31835 * C209 +
          (((C896 - C895 + C898 - C897 + C900 - C899) * C118 +
            (C902 - C901 + C904 - C903 + C906 - C905) * C31864) *
               C32184 +
           ((C1569 - C1570 + C1571 - C1572 + C1573 - C1574) * C118 +
            (C1575 - C1576 + C1577 - C1578 + C1579 - C1580) * C31864) *
               C32173 +
           ((C754 * C1053 - C748 * C1065 + C755 * C1054 - C749 * C1066 +
             C756 * C1055 - C32137 * C1067) *
                C118 +
            (C754 * C1068 - C748 * C1080 + C755 * C1069 - C749 * C1081 +
             C756 * C1070 - C32137 * C1082) *
                C31864) *
               C32151) *
              C31835 * C210 +
          ((C939 * C118 + C940 * C31864) * C32184 +
           ((C1582 - C1581 + C1584 - C1583 + C1586 - C1585) * C118 +
            (C1588 - C1587 + C1590 - C1589 + C1592 - C1591) * C31864) *
               C32173 +
           ((C748 * C1071 - C754 * C1056 + C749 * C1072 - C755 * C1057 +
             C32137 * C1073 - C756 * C1058) *
                C118 +
            (C748 * C1083 - C754 * C1074 + C749 * C1084 - C755 * C1075 +
             C32137 * C1085 - C756 * C1076) *
                C31864) *
               C32151) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
             C32137 * C128 - C756 * C121) *
                C118 +
            (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
             C32137 * C142 - C756 * C133) *
                C31864) *
               C32184 +
           ((C1950 - C1951 + C1952 - C1953 + C1954 - C1955) * C118 +
            (C1956 - C1957 + C1958 - C1959 + C1960 - C1961) * C31864) *
               C32173 +
           C1998 * C32151) *
              C315 +
          (((C1951 - C1950 + C1953 - C1952 + C1955 - C1954) * C118 +
            (C1957 - C1956 + C1959 - C1958 + C1961 - C1960) * C31864) *
               C32184 +
           ((C1963 - C1962 + C1965 - C1964 + C1967 - C1966) * C118 +
            (C1969 - C1968 + C1971 - C1970 + C1973 - C1972) * C31864) *
               C32173 +
           ((C1974 - C1975 + C1976 - C1977 + C1978 - C1979) * C118 +
            (C1980 - C1981 + C1982 - C1983 + C1984 - C1985) * C31864) *
               C32151) *
              C316 +
          (C1998 * C32184 +
           ((C1975 - C1974 + C1977 - C1976 + C1979 - C1978) * C118 +
            (C1981 - C1980 + C1983 - C1982 + C1985 - C1984) * C31864) *
               C32173 +
           ((C748 * C1937 - C754 * C1928 + C749 * C1938 - C755 * C1929 +
             C32137 * C1939 - C756 * C1930) *
                C118 +
            (C748 * C1946 - C754 * C1940 + C749 * C1947 - C755 * C1941 +
             C32137 * C1948 - C756 * C1942) *
                C31864) *
               C32151) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
            C32137 * C128 - C5156 * C121) *
               C5157 +
           (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
            C32137 * C142 - C5156 * C133) *
               C5151 +
           (C32180 * C223 - C5154 * C213 + C32167 * C224 - C5155 * C214 +
            C32137 * C225 - C5156 * C215) *
               C5158 +
           (C32180 * C243 - C5154 * C228 + C32167 * C244 - C5155 * C229 +
            C32137 * C245 - C5156 * C230) *
               C5152 +
           (C32180 * C233 - C5154 * C218 + C32167 * C234 - C5155 * C219 +
            C32137 * C235 - C5156 * C220) *
               C5159 +
           (C32180 * C248 - C5154 * C238 + C32167 * C249 - C5155 * C239 +
            C32137 * C250 - C5156 * C240) *
               C32148) *
              C31876 * C31835 * C31821 * C110 +
          ((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
            C5156 * C122 - C32137 * C129) *
               C5157 +
           (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
            C5156 * C134 - C32137 * C143) *
               C5151 +
           (C5154 * C214 - C32180 * C224 + C5155 * C215 - C32167 * C225 +
            C5156 * C216 - C32137 * C226) *
               C5158 +
           (C5154 * C229 - C32180 * C244 + C5155 * C230 - C32167 * C245 +
            C5156 * C231 - C32137 * C246) *
               C5152 +
           (C5154 * C219 - C32180 * C234 + C5155 * C220 - C32167 * C235 +
            C5156 * C221 - C32137 * C236) *
               C5159 +
           (C5154 * C239 - C32180 * C249 + C5155 * C240 - C32167 * C250 +
            C5156 * C241 - C32137 * C251) *
               C32148) *
              C31876 * C31835 * C31821 * C111 +
          ((C32180 * C128 - C5154 * C121 + C32167 * C129 - C5155 * C122 +
            C32137 * C130 - C5156 * C123) *
               C5157 +
           (C32180 * C142 - C5154 * C133 + C32167 * C143 - C5155 * C134 +
            C32137 * C144 - C5156 * C135) *
               C5151 +
           (C32180 * C225 - C5154 * C215 + C32167 * C226 - C5155 * C216 +
            C32137 * C227 - C5156 * C217) *
               C5158 +
           (C32180 * C245 - C5154 * C230 + C32167 * C246 - C5155 * C231 +
            C32137 * C247 - C5156 * C232) *
               C5152 +
           (C32180 * C235 - C5154 * C220 + C32167 * C236 - C5155 * C221 +
            C32137 * C237 - C5156 * C222) *
               C5159 +
           (C32180 * C250 - C5154 * C240 + C32167 * C251 - C5155 * C241 +
            C32137 * C252 - C5156 * C242) *
               C32148) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
            C32137 * C128 - C5156 * C121) *
               C5157 +
           (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
            C32137 * C142 - C5156 * C133) *
               C5151 +
           (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C5158 +
           (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C5152 +
           C5315 * C5159 + C5316 * C32148) *
              C31876 * C31835 * C209 +
          ((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C5157 +
           (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C5151 +
           (C5284 - C5283 + C5286 - C5285 + C5288 - C5287) * C5158 +
           (C5290 - C5289 + C5292 - C5291 + C5294 - C5293) * C5152 +
           (C5295 - C5296 + C5297 - C5298 + C5299 - C5300) * C5159 +
           (C5301 - C5302 + C5303 - C5304 + C5305 - C5306) * C32148) *
              C31876 * C31835 * C210 +
          (C5315 * C5157 + C5316 * C5151 +
           (C5296 - C5295 + C5298 - C5297 + C5300 - C5299) * C5158 +
           (C5302 - C5301 + C5304 - C5303 + C5306 - C5305) * C5152 +
           (C32180 * C882 - C5154 * C873 + C32167 * C883 - C5155 * C874 +
            C32137 * C884 - C5156 * C875) *
               C5159 +
           (C32180 * C891 - C5154 * C885 + C32167 * C892 - C5155 * C886 +
            C32137 * C893 - C5156 * C887) *
               C32148) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
            C32137 * C128 - C5156 * C121) *
               C5157 +
           (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
            C32137 * C142 - C5156 * C133) *
               C5151 +
           (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C5158 +
           (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C5152 +
           C5315 * C5159 + C5316 * C32148) *
              C31876 * C315 +
          ((C5154 * C318 - C32180 * C328 + C5155 * C319 - C32167 * C329 +
            C5156 * C320 - C32137 * C330) *
               C5157 +
           (C5154 * C333 - C32180 * C348 + C5155 * C334 - C32167 * C349 +
            C5156 * C335 - C32137 * C350) *
               C5151 +
           (C5154 * C618 - C32180 * C623 + C5155 * C619 - C32167 * C624 +
            C5156 * C620 - C32137 * C625) *
               C5158 +
           (C5154 * C628 - C32180 * C633 + C5155 * C629 - C32167 * C634 +
            C5156 * C630 - C32137 * C635) *
               C5152 +
           (C5154 * C1050 - C32180 * C1059 + C5155 * C1051 - C32167 * C1060 +
            C5156 * C1052 - C32137 * C1061) *
               C5159 +
           (C5154 * C1062 - C32180 * C1077 + C5155 * C1063 - C32167 * C1078 +
            C5156 * C1064 - C32137 * C1079) *
               C32148) *
              C31876 * C316 +
          ((C32180 * C338 - C5154 * C323 + C32167 * C339 - C5155 * C324 +
            C32137 * C340 - C5156 * C325) *
               C5157 +
           (C32180 * C353 - C5154 * C343 + C32167 * C354 - C5155 * C344 +
            C32137 * C355 - C5156 * C345) *
               C5151 +
           (C32180 * C1065 - C5154 * C1053 + C32167 * C1066 - C5155 * C1054 +
            C32137 * C1067 - C5156 * C1055) *
               C5158 +
           (C32180 * C1080 - C5154 * C1068 + C32167 * C1081 - C5155 * C1069 +
            C32137 * C1082 - C5156 * C1070) *
               C5152 +
           (C32180 * C1071 - C5154 * C1056 + C32167 * C1072 - C5155 * C1057 +
            C32137 * C1073 - C5156 * C1058) *
               C5159 +
           (C32180 * C1083 - C5154 * C1074 + C32167 * C1084 - C5155 * C1075 +
            C32137 * C1085 - C5156 * C1076) *
               C32148) *
              C31876 * C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C31772 * C126 - C5980 * C119) * C5981 +
           (C31772 * C140 - C5980 * C131) * C5975 +
           (C31772 * C223 - C5980 * C213) * C5982 +
           (C31772 * C243 - C5980 * C228) * C5976 +
           (C31772 * C233 - C5980 * C218) * C5983 +
           (C31772 * C248 - C5980 * C238) * C5977 +
           (C31772 * C876 - C5980 * C870) * C5984 +
           (C31772 * C888 - C5980 * C879) * C5978 +
           (C31772 * C882 - C5980 * C873) * C5985 +
           (C31772 * C891 - C5980 * C885) * C5979) *
              C31876 * C31835 * C31821 * C110 +
          ((C5980 * C120 - C31772 * C127) * C5981 +
           (C5980 * C132 - C31772 * C141) * C5975 +
           (C5980 * C214 - C31772 * C224) * C5982 +
           (C5980 * C229 - C31772 * C244) * C5976 +
           (C5980 * C219 - C31772 * C234) * C5983 +
           (C5980 * C239 - C31772 * C249) * C5977 +
           (C5980 * C871 - C31772 * C877) * C5984 +
           (C5980 * C880 - C31772 * C889) * C5978 +
           (C5980 * C874 - C31772 * C883) * C5985 +
           (C5980 * C886 - C31772 * C892) * C5979) *
              C31876 * C31835 * C31821 * C111 +
          ((C31772 * C128 - C5980 * C121) * C5981 +
           (C31772 * C142 - C5980 * C133) * C5975 +
           (C31772 * C225 - C5980 * C215) * C5982 +
           (C31772 * C245 - C5980 * C230) * C5976 +
           (C31772 * C235 - C5980 * C220) * C5983 +
           (C31772 * C250 - C5980 * C240) * C5977 +
           (C31772 * C878 - C5980 * C872) * C5984 +
           (C31772 * C890 - C5980 * C881) * C5978 +
           (C31772 * C884 - C5980 * C875) * C5985 +
           (C31772 * C893 - C5980 * C887) * C5979) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C31772 * C126 - C5980 * C119) * C5981 +
           (C31772 * C140 - C5980 * C131) * C5975 + (C6057 - C6058) * C5982 +
           (C6059 - C6060) * C5976 + C6077 * C5983 + C6078 * C5977 +
           C6079 * C5984 + C6080 * C5978 + C6081 * C5985 + C6082 * C5979) *
              C31876 * C31835 * C209 +
          ((C6058 - C6057) * C5981 + (C6060 - C6059) * C5975 +
           (C6062 - C6061) * C5982 + (C6064 - C6063) * C5976 +
           (C6066 - C6065) * C5983 + (C6068 - C6067) * C5977 +
           (C6070 - C6069) * C5984 + (C6072 - C6071) * C5978 +
           (C6073 - C6074) * C5985 + (C6075 - C6076) * C5979) *
              C31876 * C31835 * C210 +
          (C6077 * C5981 + C6078 * C5975 + C6079 * C5982 + C6080 * C5976 +
           C6081 * C5983 + C6082 * C5977 + (C6074 - C6073) * C5984 +
           (C6076 - C6075) * C5978 + (C31772 * C6052 - C5980 * C6049) * C5985 +
           (C31772 * C6055 - C5980 * C6053) * C5979) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31772 * C126 - C5980 * C119) * C5981 +
           (C31772 * C140 - C5980 * C131) * C5975 + (C6057 - C6058) * C5982 +
           (C6059 - C6060) * C5976 + C6077 * C5983 + C6078 * C5977 +
           C6079 * C5984 + C6080 * C5978 + C6081 * C5985 + C6082 * C5979) *
              C31876 * C315 +
          ((C5980 * C318 - C31772 * C328) * C5981 +
           (C5980 * C333 - C31772 * C348) * C5975 +
           (C5980 * C618 - C31772 * C623) * C5982 +
           (C5980 * C628 - C31772 * C633) * C5976 +
           (C5980 * C1050 - C31772 * C1059) * C5983 +
           (C5980 * C1062 - C31772 * C1077) * C5977 +
           (C5980 * C1556 - C31772 * C1559) * C5984 +
           (C5980 * C1562 - C31772 * C1565) * C5978 +
           (C5980 * C6144 - C31772 * C6147) * C5985 +
           (C5980 * C6148 - C31772 * C6153) * C5979) *
              C31876 * C316 +
          ((C31772 * C338 - C5980 * C323) * C5981 +
           (C31772 * C353 - C5980 * C343) * C5975 +
           (C31772 * C1065 - C5980 * C1053) * C5982 +
           (C31772 * C1080 - C5980 * C1068) * C5976 +
           (C31772 * C1071 - C5980 * C1056) * C5983 +
           (C31772 * C1083 - C5980 * C1074) * C5977 +
           (C31772 * C6149 - C5980 * C6145) * C5984 +
           (C31772 * C6154 - C5980 * C6150) * C5978 +
           (C31772 * C6151 - C5980 * C6146) * C5985 +
           (C31772 * C6155 - C5980 * C6152) * C5979) *
              C31876 * C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C5157 +
            (C31772 * C140 - C5980 * C131) * C5151 + (C6057 - C6058) * C5158 +
            (C6059 - C6060) * C5152 + C6077 * C5159 + C6078 * C32148) *
               C32184 +
           ((C31772 * C328 - C5980 * C318) * C5157 +
            (C31772 * C348 - C5980 * C333) * C5151 + (C6432 - C6431) * C5158 +
            (C6434 - C6433) * C5152 + (C6436 - C6435) * C5159 +
            (C6438 - C6437) * C32148) *
               C32173 +
           ((C31772 * C338 - C5980 * C323) * C5157 +
            (C31772 * C353 - C5980 * C343) * C5151 +
            (C31772 * C1065 - C5980 * C1053) * C5158 +
            (C31772 * C1080 - C5980 * C1068) * C5152 +
            (C31772 * C1071 - C5980 * C1056) * C5159 +
            (C31772 * C1083 - C5980 * C1074) * C32148) *
               C32151) *
              C31835 * C31821 * C110 +
          (((C5980 * C120 - C31772 * C127) * C5157 +
            (C5980 * C132 - C31772 * C141) * C5151 + (C6243 - C6244) * C5158 +
            (C6245 - C6246) * C5152 + (C6247 - C6248) * C5159 +
            (C6249 - C6250) * C32148) *
               C32184 +
           ((C5980 * C319 - C31772 * C329) * C5157 +
            (C5980 * C334 - C31772 * C349) * C5151 +
            (C5980 * C619 - C31772 * C624) * C5158 +
            (C5980 * C629 - C31772 * C634) * C5152 +
            (C5980 * C1051 - C31772 * C1060) * C5159 +
            (C5980 * C1063 - C31772 * C1078) * C32148) *
               C32173 +
           ((C5980 * C324 - C31772 * C339) * C5157 +
            (C5980 * C344 - C31772 * C354) * C5151 +
            (C5980 * C1054 - C31772 * C1066) * C5158 +
            (C5980 * C1069 - C31772 * C1081) * C5152 +
            (C5980 * C1057 - C31772 * C1072) * C5159 +
            (C5980 * C1075 - C31772 * C1084) * C32148) *
               C32151) *
              C31835 * C31821 * C111 +
          (((C31772 * C128 - C5980 * C121) * C5157 +
            (C31772 * C142 - C5980 * C133) * C5151 +
            (C31772 * C225 - C5980 * C215) * C5158 +
            (C31772 * C245 - C5980 * C230) * C5152 +
            (C31772 * C235 - C5980 * C220) * C5159 +
            (C31772 * C250 - C5980 * C240) * C32148) *
               C32184 +
           ((C31772 * C330 - C5980 * C320) * C5157 +
            (C31772 * C350 - C5980 * C335) * C5151 +
            (C31772 * C625 - C5980 * C620) * C5158 +
            (C31772 * C635 - C5980 * C630) * C5152 +
            (C31772 * C1061 - C5980 * C1052) * C5159 +
            (C31772 * C1079 - C5980 * C1064) * C32148) *
               C32173 +
           ((C31772 * C340 - C5980 * C325) * C5157 +
            (C31772 * C355 - C5980 * C345) * C5151 +
            (C31772 * C1067 - C5980 * C1055) * C5158 +
            (C31772 * C1082 - C5980 * C1070) * C5152 +
            (C31772 * C1073 - C5980 * C1058) * C5159 +
            (C31772 * C1085 - C5980 * C1076) * C32148) *
               C32151) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C5157 +
            (C31772 * C140 - C5980 * C131) * C5151 + (C6057 - C6058) * C5158 +
            (C6059 - C6060) * C5152 + C6077 * C5159 + C6078 * C32148) *
               C32184 +
           ((C31772 * C328 - C5980 * C318) * C5157 +
            (C31772 * C348 - C5980 * C333) * C5151 + (C6432 - C6431) * C5158 +
            (C6434 - C6433) * C5152 + C6667 * C5159 + C6668 * C32148) *
               C32173 +
           ((C31772 * C338 - C5980 * C323) * C5157 +
            (C31772 * C353 - C5980 * C343) * C5151 + (C6669 - C6670) * C5158 +
            (C6671 - C6672) * C5152 + C6681 * C5159 + C6682 * C32148) *
               C32151) *
              C31835 * C209 +
          (((C6058 - C6057) * C5157 + (C6060 - C6059) * C5151 +
            (C6062 - C6061) * C5158 + (C6064 - C6063) * C5152 +
            (C6066 - C6065) * C5159 + (C6068 - C6067) * C32148) *
               C32184 +
           ((C6431 - C6432) * C5157 + (C6433 - C6434) * C5151 +
            (C6435 - C6436) * C5158 + (C6437 - C6438) * C5152 +
            (C6439 - C6440) * C5159 + (C6441 - C6442) * C32148) *
               C32173 +
           ((C6670 - C6669) * C5157 + (C6672 - C6671) * C5151 +
            (C6674 - C6673) * C5158 + (C6676 - C6675) * C5152 +
            (C6677 - C6678) * C5159 + (C6679 - C6680) * C32148) *
               C32151) *
              C31835 * C210 +
          ((C6077 * C5157 + C6078 * C5151 + C6079 * C5158 + C6080 * C5152 +
            C6081 * C5159 + C6082 * C32148) *
               C32184 +
           (C6667 * C5157 + C6668 * C5151 + (C6440 - C6439) * C5158 +
            (C6442 - C6441) * C5152 + (C6444 - C6443) * C5159 +
            (C6446 - C6445) * C32148) *
               C32173 +
           (C6681 * C5157 + C6682 * C5151 + (C6678 - C6677) * C5158 +
            (C6680 - C6679) * C5152 + (C31772 * C6151 - C5980 * C6146) * C5159 +
            (C31772 * C6155 - C5980 * C6152) * C32148) *
               C32151) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C5157 +
            (C31772 * C140 - C5980 * C131) * C5151 + (C6057 - C6058) * C5158 +
            (C6059 - C6060) * C5152 + C6077 * C5159 + C6078 * C32148) *
               C32184 +
           ((C6805 - C6806) * C5157 + (C6807 - C6808) * C5151 +
            (C6432 - C6431) * C5158 + (C6434 - C6433) * C5152 + C6667 * C5159 +
            C6668 * C32148) *
               C32173 +
           C6839 * C32151) *
              C315 +
          (((C6806 - C6805) * C5157 + (C6808 - C6807) * C5151 +
            (C6431 - C6432) * C5158 + (C6433 - C6434) * C5152 +
            (C6435 - C6436) * C5159 + (C6437 - C6438) * C32148) *
               C32184 +
           ((C6810 - C6809) * C5157 + (C6812 - C6811) * C5151 +
            (C6670 - C6669) * C5158 + (C6672 - C6671) * C5152 +
            (C6674 - C6673) * C5159 + (C6676 - C6675) * C32148) *
               C32173 +
           ((C6817 - C6818) * C5157 + (C6819 - C6820) * C5151 +
            (C6821 - C6822) * C5158 + (C6823 - C6824) * C5152 +
            (C6825 - C6826) * C5159 + (C6827 - C6828) * C32148) *
               C32151) *
              C316 +
          (C6839 * C32184 +
           ((C6818 - C6817) * C5157 + (C6820 - C6819) * C5151 +
            (C6822 - C6821) * C5158 + (C6824 - C6823) * C5152 +
            (C6826 - C6825) * C5159 + (C6828 - C6827) * C32148) *
               C32173 +
           ((C31772 * C1937 - C5980 * C1928) * C5157 +
            (C31772 * C1946 - C5980 * C1940) * C5151 +
            (C31772 * C6797 - C5980 * C6793) * C5158 +
            (C31772 * C6802 - C5980 * C6798) * C5152 +
            (C31772 * C6799 - C5980 * C6794) * C5159 +
            (C31772 * C6803 - C5980 * C6800) * C32148) *
               C32151) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
             C32137 * C128 - C756 * C121) *
                C757 +
            (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
             C32137 * C142 - C756 * C133) *
                C32183 +
            (C895 - C896 + C897 - C898 + C899 - C900) * C758 +
            (C901 - C902 + C903 - C904 + C905 - C906) * C32171 + C939 * C759 +
            C940 * C32148) *
               C31876 * C530 +
           ((C754 * C318 - C748 * C328 + C755 * C319 - C749 * C329 +
             C756 * C320 - C32137 * C330) *
                C757 +
            (C754 * C333 - C748 * C348 + C755 * C334 - C749 * C349 +
             C756 * C335 - C32137 * C350) *
                C32183 +
            (C754 * C618 - C748 * C623 + C755 * C619 - C749 * C624 +
             C756 * C620 - C32137 * C625) *
                C758 +
            (C754 * C628 - C748 * C633 + C755 * C629 - C749 * C634 +
             C756 * C630 - C32137 * C635) *
                C32171 +
            (C754 * C1050 - C748 * C1059 + C755 * C1051 - C749 * C1060 +
             C756 * C1052 - C32137 * C1061) *
                C759 +
            (C754 * C1062 - C748 * C1077 + C755 * C1063 - C749 * C1078 +
             C756 * C1064 - C32137 * C1079) *
                C32148) *
               C31876 * C531) *
              C31821 * C442 +
          (((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
             C756 * C122 - C32137 * C129) *
                C757 +
            (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
             C756 * C134 - C32137 * C143) *
                C32183 +
            (C1237 - C1238 + C1239 - C1240 + C1241 - C1242) * C758 +
            (C1243 - C1244 + C1245 - C1246 + C1247 - C1248) * C32171 +
            (C1249 - C1250 + C1251 - C1252 + C1253 - C1254) * C759 +
            (C1255 - C1256 + C1257 - C1258 + C1259 - C1260) * C32148) *
               C31876 * C530 +
           ((C748 * C329 - C754 * C319 + C749 * C330 - C755 * C320 +
             C32137 * C331 - C756 * C321) *
                C757 +
            (C748 * C349 - C754 * C334 + C749 * C350 - C755 * C335 +
             C32137 * C351 - C756 * C336) *
                C32183 +
            (C748 * C624 - C754 * C619 + C749 * C625 - C755 * C620 +
             C32137 * C626 - C756 * C621) *
                C758 +
            (C748 * C634 - C754 * C629 + C749 * C635 - C755 * C630 +
             C32137 * C636 - C756 * C631) *
                C32171 +
            (C748 * C1060 - C754 * C1051 + C749 * C1061 - C755 * C1052 +
             C32137 * C1407 - C756 * C1406) *
                C759 +
            (C748 * C1078 - C754 * C1063 + C749 * C1079 - C755 * C1064 +
             C32137 * C1409 - C756 * C1408) *
                C32148) *
               C31876 * C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C31864) *
               C31876 * C530 +
           ((C113 * C318 - C101 * C328 + C114 * C319 - C102 * C329 +
             C115 * C320 - C103 * C330 + C116 * C321 - C104 * C331 +
             C117 * C322 - C105 * C332) *
                C118 +
            (C113 * C333 - C101 * C348 + C114 * C334 - C102 * C349 +
             C115 * C335 - C103 * C350 + C116 * C336 - C104 * C351 +
             C117 * C337 - C105 * C352) *
                C31864) *
               C31876 * C531) *
              C31821 * C442 +
          (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
             C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
             C117 * C124 - C105 * C136) *
                C118 +
            (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
             C117 * C137 - C105 * C145) *
                C31864) *
               C31876 * C530 +
           ((C101 * C329 - C113 * C319 + C102 * C330 - C114 * C320 +
             C103 * C331 - C115 * C321 + C104 * C332 - C116 * C322 +
             C105 * C533 - C117 * C532) *
                C118 +
            (C101 * C349 - C113 * C334 + C102 * C350 - C114 * C335 +
             C103 * C351 - C115 * C336 + C104 * C352 - C116 * C337 +
             C105 * C535 - C117 * C534) *
                C31864) *
               C31876 * C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
              C32137 * C128 - C756 * C121) *
                 C118 +
             (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
              C32137 * C142 - C756 * C133) *
                 C31864) *
                C32184 +
            ((C1950 - C1951 + C1952 - C1953 + C1954 - C1955) * C118 +
             (C1956 - C1957 + C1958 - C1959 + C1960 - C1961) * C31864) *
                C32173 +
            C1998 * C32151) *
               C530 +
           (((C1951 - C1950 + C1953 - C1952 + C1955 - C1954) * C118 +
             (C1957 - C1956 + C1959 - C1958 + C1961 - C1960) * C31864) *
                C32184 +
            ((C1963 - C1962 + C1965 - C1964 + C1967 - C1966) * C118 +
             (C1969 - C1968 + C1971 - C1970 + C1973 - C1972) * C31864) *
                C32173 +
            ((C1974 - C1975 + C1976 - C1977 + C1978 - C1979) * C118 +
             (C1980 - C1981 + C1982 - C1983 + C1984 - C1985) * C31864) *
                C32151) *
               C531) *
              C31821 * C442 +
          ((((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
              C756 * C122 - C32137 * C129) *
                 C118 +
             (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
              C756 * C134 - C32137 * C143) *
                 C31864) *
                C32184 +
            ((C2299 - C2300 + C2301 - C2302 + C2303 - C2304) * C118 +
             (C2305 - C2306 + C2307 - C2308 + C2309 - C2310) * C31864) *
                C32173 +
            ((C2311 - C2312 + C2313 - C2314 + C2315 - C2316) * C118 +
             (C2317 - C2318 + C2319 - C2320 + C2321 - C2322) * C31864) *
                C32151) *
               C530 +
           (((C2300 - C2299 + C2302 - C2301 + C2304 - C2303) * C118 +
             (C2306 - C2305 + C2308 - C2307 + C2310 - C2309) * C31864) *
                C32184 +
            ((C2312 - C2311 + C2314 - C2313 + C2316 - C2315) * C118 +
             (C2318 - C2317 + C2320 - C2319 + C2322 - C2321) * C31864) *
                C32173 +
            ((C748 * C1932 - C754 * C1926 + C749 * C1933 - C755 * C1927 +
              C32137 * C2295 - C756 * C2294) *
                 C118 +
             (C748 * C1944 - C754 * C1935 + C749 * C1945 - C755 * C1936 +
              C32137 * C2297 - C756 * C2296) *
                 C31864) *
                C32151) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C5157 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C5151 +
            (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C5158 +
            (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C5152 +
            C5315 * C5159 + C5316 * C32148) *
               C31876 * C530 +
           ((C5154 * C318 - C32180 * C328 + C5155 * C319 - C32167 * C329 +
             C5156 * C320 - C32137 * C330) *
                C5157 +
            (C5154 * C333 - C32180 * C348 + C5155 * C334 - C32167 * C349 +
             C5156 * C335 - C32137 * C350) *
                C5151 +
            (C5154 * C618 - C32180 * C623 + C5155 * C619 - C32167 * C624 +
             C5156 * C620 - C32137 * C625) *
                C5158 +
            (C5154 * C628 - C32180 * C633 + C5155 * C629 - C32167 * C634 +
             C5156 * C630 - C32137 * C635) *
                C5152 +
            (C5154 * C1050 - C32180 * C1059 + C5155 * C1051 - C32167 * C1060 +
             C5156 * C1052 - C32137 * C1061) *
                C5159 +
            (C5154 * C1062 - C32180 * C1077 + C5155 * C1063 - C32167 * C1078 +
             C5156 * C1064 - C32137 * C1079) *
                C32148) *
               C31876 * C531) *
              C31821 * C442 +
          (((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
             C5156 * C122 - C32137 * C129) *
                C5157 +
            (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
             C5156 * C134 - C32137 * C143) *
                C5151 +
            (C5573 - C5574 + C5575 - C5576 + C5577 - C5578) * C5158 +
            (C5579 - C5580 + C5581 - C5582 + C5583 - C5584) * C5152 +
            (C5585 - C5586 + C5587 - C5588 + C5589 - C5590) * C5159 +
            (C5591 - C5592 + C5593 - C5594 + C5595 - C5596) * C32148) *
               C31876 * C530 +
           ((C32180 * C329 - C5154 * C319 + C32167 * C330 - C5155 * C320 +
             C32137 * C331 - C5156 * C321) *
                C5157 +
            (C32180 * C349 - C5154 * C334 + C32167 * C350 - C5155 * C335 +
             C32137 * C351 - C5156 * C336) *
                C5151 +
            (C32180 * C624 - C5154 * C619 + C32167 * C625 - C5155 * C620 +
             C32137 * C626 - C5156 * C621) *
                C5158 +
            (C32180 * C634 - C5154 * C629 + C32167 * C635 - C5155 * C630 +
             C32137 * C636 - C5156 * C631) *
                C5152 +
            (C32180 * C1060 - C5154 * C1051 + C32167 * C1061 - C5155 * C1052 +
             C32137 * C1407 - C5156 * C1406) *
                C5159 +
            (C32180 * C1078 - C5154 * C1063 + C32167 * C1079 - C5155 * C1064 +
             C32137 * C1409 - C5156 * C1408) *
                C32148) *
               C31876 * C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C5981 +
            (C31772 * C140 - C5980 * C131) * C5975 + (C6057 - C6058) * C5982 +
            (C6059 - C6060) * C5976 + C6077 * C5983 + C6078 * C5977 +
            C6079 * C5984 + C6080 * C5978 + C6081 * C5985 + C6082 * C5979) *
               C31876 * C530 +
           ((C5980 * C318 - C31772 * C328) * C5981 +
            (C5980 * C333 - C31772 * C348) * C5975 +
            (C5980 * C618 - C31772 * C623) * C5982 +
            (C5980 * C628 - C31772 * C633) * C5976 +
            (C5980 * C1050 - C31772 * C1059) * C5983 +
            (C5980 * C1062 - C31772 * C1077) * C5977 +
            (C5980 * C1556 - C31772 * C1559) * C5984 +
            (C5980 * C1562 - C31772 * C1565) * C5978 +
            (C5980 * C6144 - C31772 * C6147) * C5985 +
            (C5980 * C6148 - C31772 * C6153) * C5979) *
               C31876 * C531) *
              C31821 * C442 +
          (((C5980 * C120 - C31772 * C127) * C5981 +
            (C5980 * C132 - C31772 * C141) * C5975 + (C6243 - C6244) * C5982 +
            (C6245 - C6246) * C5976 + (C6247 - C6248) * C5983 +
            (C6249 - C6250) * C5977 + (C6251 - C6252) * C5984 +
            (C6253 - C6254) * C5978 + (C6255 - C6256) * C5985 +
            (C6257 - C6258) * C5979) *
               C31876 * C530 +
           ((C31772 * C329 - C5980 * C319) * C5981 +
            (C31772 * C349 - C5980 * C334) * C5975 +
            (C31772 * C624 - C5980 * C619) * C5982 +
            (C31772 * C634 - C5980 * C629) * C5976 +
            (C31772 * C1060 - C5980 * C1051) * C5983 +
            (C31772 * C1078 - C5980 * C1063) * C5977 +
            (C31772 * C1560 - C5980 * C1557) * C5984 +
            (C31772 * C1566 - C5980 * C1563) * C5978 +
            (C31772 * C6341 - C5980 * C6340) * C5985 +
            (C31772 * C6343 - C5980 * C6342) * C5979) *
               C31876 * C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31772 * C126 - C5980 * C119) * C5157 +
             (C31772 * C140 - C5980 * C131) * C5151 + (C6057 - C6058) * C5158 +
             (C6059 - C6060) * C5152 + C6077 * C5159 + C6078 * C32148) *
                C32184 +
            ((C6805 - C6806) * C5157 + (C6807 - C6808) * C5151 +
             (C6432 - C6431) * C5158 + (C6434 - C6433) * C5152 + C6667 * C5159 +
             C6668 * C32148) *
                C32173 +
            C6839 * C32151) *
               C530 +
           (((C6806 - C6805) * C5157 + (C6808 - C6807) * C5151 +
             (C6431 - C6432) * C5158 + (C6433 - C6434) * C5152 +
             (C6435 - C6436) * C5159 + (C6437 - C6438) * C32148) *
                C32184 +
            ((C6810 - C6809) * C5157 + (C6812 - C6811) * C5151 +
             (C6670 - C6669) * C5158 + (C6672 - C6671) * C5152 +
             (C6674 - C6673) * C5159 + (C6676 - C6675) * C32148) *
                C32173 +
            ((C6817 - C6818) * C5157 + (C6819 - C6820) * C5151 +
             (C6821 - C6822) * C5158 + (C6823 - C6824) * C5152 +
             (C6825 - C6826) * C5159 + (C6827 - C6828) * C32148) *
                C32151) *
               C531) *
              C31821 * C442 +
          ((((C5980 * C120 - C31772 * C127) * C5157 +
             (C5980 * C132 - C31772 * C141) * C5151 + (C6243 - C6244) * C5158 +
             (C6245 - C6246) * C5152 + (C6247 - C6248) * C5159 +
             (C6249 - C6250) * C32148) *
                C32184 +
            ((C7156 - C7157) * C5157 + (C7158 - C7159) * C5151 +
             (C6990 - C6991) * C5158 + (C6992 - C6993) * C5152 +
             (C6994 - C6995) * C5159 + (C6996 - C6997) * C32148) *
                C32173 +
            ((C7160 - C7161) * C5157 + (C7162 - C7163) * C5151 +
             (C6998 - C6999) * C5158 + (C7000 - C7001) * C5152 +
             (C7002 - C7003) * C5159 + (C7004 - C7005) * C32148) *
                C32151) *
               C530 +
           (((C7157 - C7156) * C5157 + (C7159 - C7158) * C5151 +
             (C6991 - C6990) * C5158 + (C6993 - C6992) * C5152 +
             (C6995 - C6994) * C5159 + (C6997 - C6996) * C32148) *
                C32184 +
            ((C7161 - C7160) * C5157 + (C7163 - C7162) * C5151 +
             (C6999 - C6998) * C5158 + (C7001 - C7000) * C5152 +
             (C7003 - C7002) * C5159 + (C7005 - C7004) * C32148) *
                C32173 +
            ((C31772 * C1932 - C5980 * C1926) * C5157 +
             (C31772 * C1944 - C5980 * C1935) * C5151 +
             (C31772 * C2472 - C5980 * C2469) * C5158 +
             (C31772 * C2478 - C5980 * C2475) * C5152 +
             (C31772 * C7152 - C5980 * C7151) * C5159 +
             (C31772 * C7154 - C5980 * C7153) * C32148) *
                C32151) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
            C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
            C105 * C130 - C117 * C123) *
               C118 +
           (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
            C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
            C105 * C144 - C117 * C135) *
               C31864) *
              C31876 * C31835 * C209 +
          ((C113 * C213 - C101 * C223 + C114 * C214 - C102 * C224 +
            C115 * C215 - C103 * C225 + C116 * C216 - C104 * C226 +
            C117 * C217 - C105 * C227) *
               C118 +
           (C113 * C228 - C101 * C243 + C114 * C229 - C102 * C244 +
            C115 * C230 - C103 * C245 + C116 * C231 - C104 * C246 +
            C117 * C232 - C105 * C247) *
               C31864) *
              C31876 * C31835 * C210 +
          ((C101 * C233 - C113 * C218 + C102 * C234 - C114 * C219 +
            C103 * C235 - C115 * C220 + C104 * C236 - C116 * C221 +
            C105 * C237 - C117 * C222) *
               C118 +
           (C101 * C248 - C113 * C238 + C102 * C249 - C114 * C239 +
            C103 * C250 - C115 * C240 + C104 * C251 - C116 * C241 +
            C105 * C252 - C117 * C242) *
               C31864) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
            C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
            C105 * C130 - C117 * C123) *
               C118 +
           (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
            C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
            C105 * C144 - C117 * C135) *
               C31864) *
              C31876 * C31835 * C31821 * C110 +
          ((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
            C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
            C117 * C124 - C105 * C136) *
               C118 +
           (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
            C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
            C117 * C137 - C105 * C145) *
               C31864) *
              C31876 * C31835 * C31821 * C111 +
          ((C101 * C128 - C113 * C121 + C102 * C129 - C114 * C122 +
            C103 * C130 - C115 * C123 + C104 * C136 - C116 * C124 +
            C105 * C138 - C117 * C125) *
               C118 +
           (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C134 +
            C103 * C144 - C115 * C135 + C104 * C145 - C116 * C137 +
            C105 * C146 - C117 * C139) *
               C31864) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
            C32137 * C128 - C756 * C121) *
               C757 +
           (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
            C32137 * C142 - C756 * C133) *
               C32183 +
           (C748 * C223 - C754 * C213 + C749 * C224 - C755 * C214 +
            C32137 * C225 - C756 * C215) *
               C758 +
           (C748 * C243 - C754 * C228 + C749 * C244 - C755 * C229 +
            C32137 * C245 - C756 * C230) *
               C32171 +
           (C748 * C233 - C754 * C218 + C749 * C234 - C755 * C219 +
            C32137 * C235 - C756 * C220) *
               C759 +
           (C748 * C248 - C754 * C238 + C749 * C249 - C755 * C239 +
            C32137 * C250 - C756 * C240) *
               C32148) *
              C31876 * C31835 * C31821 * C110 +
          ((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
            C756 * C122 - C32137 * C129) *
               C757 +
           (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
            C756 * C134 - C32137 * C143) *
               C32183 +
           (C754 * C214 - C748 * C224 + C755 * C215 - C749 * C225 +
            C756 * C216 - C32137 * C226) *
               C758 +
           (C754 * C229 - C748 * C244 + C755 * C230 - C749 * C245 +
            C756 * C231 - C32137 * C246) *
               C32171 +
           (C754 * C219 - C748 * C234 + C755 * C220 - C749 * C235 +
            C756 * C221 - C32137 * C236) *
               C759 +
           (C754 * C239 - C748 * C249 + C755 * C240 - C749 * C250 +
            C756 * C241 - C32137 * C251) *
               C32148) *
              C31876 * C31835 * C31821 * C111 +
          ((C748 * C128 - C754 * C121 + C749 * C129 - C755 * C122 +
            C32137 * C130 - C756 * C123) *
               C757 +
           (C748 * C142 - C754 * C133 + C749 * C143 - C755 * C134 +
            C32137 * C144 - C756 * C135) *
               C32183 +
           (C748 * C225 - C754 * C215 + C749 * C226 - C755 * C216 +
            C32137 * C227 - C756 * C217) *
               C758 +
           (C748 * C245 - C754 * C230 + C749 * C246 - C755 * C231 +
            C32137 * C247 - C756 * C232) *
               C32171 +
           (C748 * C235 - C754 * C220 + C749 * C236 - C755 * C221 +
            C32137 * C237 - C756 * C222) *
               C759 +
           (C748 * C250 - C754 * C240 + C749 * C251 - C755 * C241 +
            C32137 * C252 - C756 * C242) *
               C32148) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
            C32137 * C128 - C756 * C121) *
               C757 +
           (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
            C32137 * C142 - C756 * C133) *
               C32183 +
           (C895 - C896 + C897 - C898 + C899 - C900) * C758 +
           (C901 - C902 + C903 - C904 + C905 - C906) * C32171 + C939 * C759 +
           C940 * C32148) *
              C31876 * C31835 * C209 +
          ((C896 - C895 + C898 - C897 + C900 - C899) * C757 +
           (C902 - C901 + C904 - C903 + C906 - C905) * C32183 +
           (C908 - C907 + C910 - C909 + C912 - C911) * C758 +
           (C914 - C913 + C916 - C915 + C918 - C917) * C32171 +
           (C919 - C920 + C921 - C922 + C923 - C924) * C759 +
           (C925 - C926 + C927 - C928 + C929 - C930) * C32148) *
              C31876 * C31835 * C210 +
          (C939 * C757 + C940 * C32183 +
           (C920 - C919 + C922 - C921 + C924 - C923) * C758 +
           (C926 - C925 + C928 - C927 + C930 - C929) * C32171 +
           (C748 * C882 - C754 * C873 + C749 * C883 - C755 * C874 +
            C32137 * C884 - C756 * C875) *
               C759 +
           (C748 * C891 - C754 * C885 + C749 * C892 - C755 * C886 +
            C32137 * C893 - C756 * C887) *
               C32148) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
             C32137 * C128 - C756 * C121) *
                C118 +
            (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
             C32137 * C142 - C756 * C133) *
                C31864) *
               C32184 +
           ((C748 * C328 - C754 * C318 + C749 * C329 - C755 * C319 +
             C32137 * C330 - C756 * C320) *
                C118 +
            (C748 * C348 - C754 * C333 + C749 * C349 - C755 * C334 +
             C32137 * C350 - C756 * C335) *
                C31864) *
               C32173 +
           ((C748 * C338 - C754 * C323 + C749 * C339 - C755 * C324 +
             C32137 * C340 - C756 * C325) *
                C118 +
            (C748 * C353 - C754 * C343 + C749 * C354 - C755 * C344 +
             C32137 * C355 - C756 * C345) *
                C31864) *
               C32151) *
              C31835 * C31821 * C110 +
          (((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
             C756 * C122 - C32137 * C129) *
                C118 +
            (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
             C756 * C134 - C32137 * C143) *
                C31864) *
               C32184 +
           ((C754 * C319 - C748 * C329 + C755 * C320 - C749 * C330 +
             C756 * C321 - C32137 * C331) *
                C118 +
            (C754 * C334 - C748 * C349 + C755 * C335 - C749 * C350 +
             C756 * C336 - C32137 * C351) *
                C31864) *
               C32173 +
           ((C754 * C324 - C748 * C339 + C755 * C325 - C749 * C340 +
             C756 * C326 - C32137 * C341) *
                C118 +
            (C754 * C344 - C748 * C354 + C755 * C345 - C749 * C355 +
             C756 * C346 - C32137 * C356) *
                C31864) *
               C32151) *
              C31835 * C31821 * C111 +
          (((C748 * C128 - C754 * C121 + C749 * C129 - C755 * C122 +
             C32137 * C130 - C756 * C123) *
                C118 +
            (C748 * C142 - C754 * C133 + C749 * C143 - C755 * C134 +
             C32137 * C144 - C756 * C135) *
                C31864) *
               C32184 +
           ((C748 * C330 - C754 * C320 + C749 * C331 - C755 * C321 +
             C32137 * C332 - C756 * C322) *
                C118 +
            (C748 * C350 - C754 * C335 + C749 * C351 - C755 * C336 +
             C32137 * C352 - C756 * C337) *
                C31864) *
               C32173 +
           ((C748 * C340 - C754 * C325 + C749 * C341 - C755 * C326 +
             C32137 * C342 - C756 * C327) *
                C118 +
            (C748 * C355 - C754 * C345 + C749 * C356 - C755 * C346 +
             C32137 * C357 - C756 * C347) *
                C31864) *
               C32151) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
             C32137 * C128 - C756 * C121) *
                C118 +
            (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
             C32137 * C142 - C756 * C133) *
                C31864) *
               C32184 +
           ((C748 * C328 - C754 * C318 + C749 * C329 - C755 * C319 +
             C32137 * C330 - C756 * C320) *
                C118 +
            (C748 * C348 - C754 * C333 + C749 * C349 - C755 * C334 +
             C32137 * C350 - C756 * C335) *
                C31864) *
               C32173 +
           ((C748 * C338 - C754 * C323 + C749 * C339 - C755 * C324 +
             C32137 * C340 - C756 * C325) *
                C118 +
            (C748 * C353 - C754 * C343 + C749 * C354 - C755 * C344 +
             C32137 * C355 - C756 * C345) *
                C31864) *
               C32151) *
              C31835 * C209 +
          (((C896 - C895 + C898 - C897 + C900 - C899) * C118 +
            (C902 - C901 + C904 - C903 + C906 - C905) * C31864) *
               C32184 +
           ((C1569 - C1570 + C1571 - C1572 + C1573 - C1574) * C118 +
            (C1575 - C1576 + C1577 - C1578 + C1579 - C1580) * C31864) *
               C32173 +
           ((C754 * C1053 - C748 * C1065 + C755 * C1054 - C749 * C1066 +
             C756 * C1055 - C32137 * C1067) *
                C118 +
            (C754 * C1068 - C748 * C1080 + C755 * C1069 - C749 * C1081 +
             C756 * C1070 - C32137 * C1082) *
                C31864) *
               C32151) *
              C31835 * C210 +
          ((C939 * C118 + C940 * C31864) * C32184 +
           ((C1582 - C1581 + C1584 - C1583 + C1586 - C1585) * C118 +
            (C1588 - C1587 + C1590 - C1589 + C1592 - C1591) * C31864) *
               C32173 +
           ((C748 * C1071 - C754 * C1056 + C749 * C1072 - C755 * C1057 +
             C32137 * C1073 - C756 * C1058) *
                C118 +
            (C748 * C1083 - C754 * C1074 + C749 * C1084 - C755 * C1075 +
             C32137 * C1085 - C756 * C1076) *
                C31864) *
               C32151) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
            C32137 * C128 - C5156 * C121) *
               C5157 +
           (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
            C32137 * C142 - C5156 * C133) *
               C5151 +
           (C32180 * C223 - C5154 * C213 + C32167 * C224 - C5155 * C214 +
            C32137 * C225 - C5156 * C215) *
               C5158 +
           (C32180 * C243 - C5154 * C228 + C32167 * C244 - C5155 * C229 +
            C32137 * C245 - C5156 * C230) *
               C5152 +
           (C32180 * C233 - C5154 * C218 + C32167 * C234 - C5155 * C219 +
            C32137 * C235 - C5156 * C220) *
               C5159 +
           (C32180 * C248 - C5154 * C238 + C32167 * C249 - C5155 * C239 +
            C32137 * C250 - C5156 * C240) *
               C32148) *
              C31876 * C31835 * C31821 * C110 +
          ((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
            C5156 * C122 - C32137 * C129) *
               C5157 +
           (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
            C5156 * C134 - C32137 * C143) *
               C5151 +
           (C5154 * C214 - C32180 * C224 + C5155 * C215 - C32167 * C225 +
            C5156 * C216 - C32137 * C226) *
               C5158 +
           (C5154 * C229 - C32180 * C244 + C5155 * C230 - C32167 * C245 +
            C5156 * C231 - C32137 * C246) *
               C5152 +
           (C5154 * C219 - C32180 * C234 + C5155 * C220 - C32167 * C235 +
            C5156 * C221 - C32137 * C236) *
               C5159 +
           (C5154 * C239 - C32180 * C249 + C5155 * C240 - C32167 * C250 +
            C5156 * C241 - C32137 * C251) *
               C32148) *
              C31876 * C31835 * C31821 * C111 +
          ((C32180 * C128 - C5154 * C121 + C32167 * C129 - C5155 * C122 +
            C32137 * C130 - C5156 * C123) *
               C5157 +
           (C32180 * C142 - C5154 * C133 + C32167 * C143 - C5155 * C134 +
            C32137 * C144 - C5156 * C135) *
               C5151 +
           (C32180 * C225 - C5154 * C215 + C32167 * C226 - C5155 * C216 +
            C32137 * C227 - C5156 * C217) *
               C5158 +
           (C32180 * C245 - C5154 * C230 + C32167 * C246 - C5155 * C231 +
            C32137 * C247 - C5156 * C232) *
               C5152 +
           (C32180 * C235 - C5154 * C220 + C32167 * C236 - C5155 * C221 +
            C32137 * C237 - C5156 * C222) *
               C5159 +
           (C32180 * C250 - C5154 * C240 + C32167 * C251 - C5155 * C241 +
            C32137 * C252 - C5156 * C242) *
               C32148) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
            C32137 * C128 - C5156 * C121) *
               C5157 +
           (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
            C32137 * C142 - C5156 * C133) *
               C5151 +
           (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C5158 +
           (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C5152 +
           C5315 * C5159 + C5316 * C32148) *
              C31876 * C31835 * C209 +
          ((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C5157 +
           (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C5151 +
           (C5284 - C5283 + C5286 - C5285 + C5288 - C5287) * C5158 +
           (C5290 - C5289 + C5292 - C5291 + C5294 - C5293) * C5152 +
           (C5295 - C5296 + C5297 - C5298 + C5299 - C5300) * C5159 +
           (C5301 - C5302 + C5303 - C5304 + C5305 - C5306) * C32148) *
              C31876 * C31835 * C210 +
          (C5315 * C5157 + C5316 * C5151 +
           (C5296 - C5295 + C5298 - C5297 + C5300 - C5299) * C5158 +
           (C5302 - C5301 + C5304 - C5303 + C5306 - C5305) * C5152 +
           (C32180 * C882 - C5154 * C873 + C32167 * C883 - C5155 * C874 +
            C32137 * C884 - C5156 * C875) *
               C5159 +
           (C32180 * C891 - C5154 * C885 + C32167 * C892 - C5155 * C886 +
            C32137 * C893 - C5156 * C887) *
               C32148) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C31772 * C126 - C5980 * C119) * C5981 +
           (C31772 * C140 - C5980 * C131) * C5975 +
           (C31772 * C223 - C5980 * C213) * C5982 +
           (C31772 * C243 - C5980 * C228) * C5976 +
           (C31772 * C233 - C5980 * C218) * C5983 +
           (C31772 * C248 - C5980 * C238) * C5977 +
           (C31772 * C876 - C5980 * C870) * C5984 +
           (C31772 * C888 - C5980 * C879) * C5978 +
           (C31772 * C882 - C5980 * C873) * C5985 +
           (C31772 * C891 - C5980 * C885) * C5979) *
              C31876 * C31835 * C31821 * C110 +
          ((C5980 * C120 - C31772 * C127) * C5981 +
           (C5980 * C132 - C31772 * C141) * C5975 +
           (C5980 * C214 - C31772 * C224) * C5982 +
           (C5980 * C229 - C31772 * C244) * C5976 +
           (C5980 * C219 - C31772 * C234) * C5983 +
           (C5980 * C239 - C31772 * C249) * C5977 +
           (C5980 * C871 - C31772 * C877) * C5984 +
           (C5980 * C880 - C31772 * C889) * C5978 +
           (C5980 * C874 - C31772 * C883) * C5985 +
           (C5980 * C886 - C31772 * C892) * C5979) *
              C31876 * C31835 * C31821 * C111 +
          ((C31772 * C128 - C5980 * C121) * C5981 +
           (C31772 * C142 - C5980 * C133) * C5975 +
           (C31772 * C225 - C5980 * C215) * C5982 +
           (C31772 * C245 - C5980 * C230) * C5976 +
           (C31772 * C235 - C5980 * C220) * C5983 +
           (C31772 * C250 - C5980 * C240) * C5977 +
           (C31772 * C878 - C5980 * C872) * C5984 +
           (C31772 * C890 - C5980 * C881) * C5978 +
           (C31772 * C884 - C5980 * C875) * C5985 +
           (C31772 * C893 - C5980 * C887) * C5979) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C31772 * C126 - C5980 * C119) * C5981 +
           (C31772 * C140 - C5980 * C131) * C5975 + (C6057 - C6058) * C5982 +
           (C6059 - C6060) * C5976 + C6077 * C5983 + C6078 * C5977 +
           C6079 * C5984 + C6080 * C5978 + C6081 * C5985 + C6082 * C5979) *
              C31876 * C31835 * C209 +
          ((C6058 - C6057) * C5981 + (C6060 - C6059) * C5975 +
           (C6062 - C6061) * C5982 + (C6064 - C6063) * C5976 +
           (C6066 - C6065) * C5983 + (C6068 - C6067) * C5977 +
           (C6070 - C6069) * C5984 + (C6072 - C6071) * C5978 +
           (C6073 - C6074) * C5985 + (C6075 - C6076) * C5979) *
              C31876 * C31835 * C210 +
          (C6077 * C5981 + C6078 * C5975 + C6079 * C5982 + C6080 * C5976 +
           C6081 * C5983 + C6082 * C5977 + (C6074 - C6073) * C5984 +
           (C6076 - C6075) * C5978 + (C31772 * C6052 - C5980 * C6049) * C5985 +
           (C31772 * C6055 - C5980 * C6053) * C5979) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C5157 +
            (C31772 * C140 - C5980 * C131) * C5151 + (C6057 - C6058) * C5158 +
            (C6059 - C6060) * C5152 + C6077 * C5159 + C6078 * C32148) *
               C32184 +
           ((C31772 * C328 - C5980 * C318) * C5157 +
            (C31772 * C348 - C5980 * C333) * C5151 + (C6432 - C6431) * C5158 +
            (C6434 - C6433) * C5152 + (C6436 - C6435) * C5159 +
            (C6438 - C6437) * C32148) *
               C32173 +
           ((C31772 * C338 - C5980 * C323) * C5157 +
            (C31772 * C353 - C5980 * C343) * C5151 +
            (C31772 * C1065 - C5980 * C1053) * C5158 +
            (C31772 * C1080 - C5980 * C1068) * C5152 +
            (C31772 * C1071 - C5980 * C1056) * C5159 +
            (C31772 * C1083 - C5980 * C1074) * C32148) *
               C32151) *
              C31835 * C31821 * C110 +
          (((C5980 * C120 - C31772 * C127) * C5157 +
            (C5980 * C132 - C31772 * C141) * C5151 + (C6243 - C6244) * C5158 +
            (C6245 - C6246) * C5152 + (C6247 - C6248) * C5159 +
            (C6249 - C6250) * C32148) *
               C32184 +
           ((C5980 * C319 - C31772 * C329) * C5157 +
            (C5980 * C334 - C31772 * C349) * C5151 +
            (C5980 * C619 - C31772 * C624) * C5158 +
            (C5980 * C629 - C31772 * C634) * C5152 +
            (C5980 * C1051 - C31772 * C1060) * C5159 +
            (C5980 * C1063 - C31772 * C1078) * C32148) *
               C32173 +
           ((C5980 * C324 - C31772 * C339) * C5157 +
            (C5980 * C344 - C31772 * C354) * C5151 +
            (C5980 * C1054 - C31772 * C1066) * C5158 +
            (C5980 * C1069 - C31772 * C1081) * C5152 +
            (C5980 * C1057 - C31772 * C1072) * C5159 +
            (C5980 * C1075 - C31772 * C1084) * C32148) *
               C32151) *
              C31835 * C31821 * C111 +
          (((C31772 * C128 - C5980 * C121) * C5157 +
            (C31772 * C142 - C5980 * C133) * C5151 +
            (C31772 * C225 - C5980 * C215) * C5158 +
            (C31772 * C245 - C5980 * C230) * C5152 +
            (C31772 * C235 - C5980 * C220) * C5159 +
            (C31772 * C250 - C5980 * C240) * C32148) *
               C32184 +
           ((C31772 * C330 - C5980 * C320) * C5157 +
            (C31772 * C350 - C5980 * C335) * C5151 +
            (C31772 * C625 - C5980 * C620) * C5158 +
            (C31772 * C635 - C5980 * C630) * C5152 +
            (C31772 * C1061 - C5980 * C1052) * C5159 +
            (C31772 * C1079 - C5980 * C1064) * C32148) *
               C32173 +
           ((C31772 * C340 - C5980 * C325) * C5157 +
            (C31772 * C355 - C5980 * C345) * C5151 +
            (C31772 * C1067 - C5980 * C1055) * C5158 +
            (C31772 * C1082 - C5980 * C1070) * C5152 +
            (C31772 * C1073 - C5980 * C1058) * C5159 +
            (C31772 * C1085 - C5980 * C1076) * C32148) *
               C32151) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C5157 +
            (C31772 * C140 - C5980 * C131) * C5151 + (C6057 - C6058) * C5158 +
            (C6059 - C6060) * C5152 + C6077 * C5159 + C6078 * C32148) *
               C32184 +
           ((C31772 * C328 - C5980 * C318) * C5157 +
            (C31772 * C348 - C5980 * C333) * C5151 + (C6432 - C6431) * C5158 +
            (C6434 - C6433) * C5152 + C6667 * C5159 + C6668 * C32148) *
               C32173 +
           ((C31772 * C338 - C5980 * C323) * C5157 +
            (C31772 * C353 - C5980 * C343) * C5151 + (C6669 - C6670) * C5158 +
            (C6671 - C6672) * C5152 + C6681 * C5159 + C6682 * C32148) *
               C32151) *
              C31835 * C209 +
          (((C6058 - C6057) * C5157 + (C6060 - C6059) * C5151 +
            (C6062 - C6061) * C5158 + (C6064 - C6063) * C5152 +
            (C6066 - C6065) * C5159 + (C6068 - C6067) * C32148) *
               C32184 +
           ((C6431 - C6432) * C5157 + (C6433 - C6434) * C5151 +
            (C6435 - C6436) * C5158 + (C6437 - C6438) * C5152 +
            (C6439 - C6440) * C5159 + (C6441 - C6442) * C32148) *
               C32173 +
           ((C6670 - C6669) * C5157 + (C6672 - C6671) * C5151 +
            (C6674 - C6673) * C5158 + (C6676 - C6675) * C5152 +
            (C6677 - C6678) * C5159 + (C6679 - C6680) * C32148) *
               C32151) *
              C31835 * C210 +
          ((C6077 * C5157 + C6078 * C5151 + C6079 * C5158 + C6080 * C5152 +
            C6081 * C5159 + C6082 * C32148) *
               C32184 +
           (C6667 * C5157 + C6668 * C5151 + (C6440 - C6439) * C5158 +
            (C6442 - C6441) * C5152 + (C6444 - C6443) * C5159 +
            (C6446 - C6445) * C32148) *
               C32173 +
           (C6681 * C5157 + C6682 * C5151 + (C6678 - C6677) * C5158 +
            (C6680 - C6679) * C5152 + (C31772 * C6151 - C5980 * C6146) * C5159 +
            (C31772 * C6155 - C5980 * C6152) * C32148) *
               C32151) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
              C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
                 C118 +
             (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
              C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
                 C31864) *
                C32118 +
            ((C3549 - C3550 + C3551 - C3552 + C3553 - C3554 + C3555 - C3556) *
                 C118 +
             (C3557 - C3558 + C3559 - C3560 + C3561 - C3562 + C3563 - C3564) *
                 C31864) *
                C31963) *
               C31835 * C440 +
           (((C2702 - C2701 + C2704 - C2703 + C2706 - C2705 + C2708 - C2707) *
                 C118 +
             (C2710 - C2709 + C2712 - C2711 + C2714 - C2713 + C2716 - C2715) *
                 C31864) *
                C32118 +
            ((C3237 - C3238 + C3239 - C3240 + C3241 - C3242 + C3243 - C3244) *
                 C118 +
             (C3245 - C3246 + C3247 - C3248 + C3249 - C3250 + C3251 - C3252) *
                 C31864) *
                C31963) *
               C31835 * C441) *
              C442 +
          ((((C2596 * C120 - C2590 * C127 + C2597 * C121 - C2591 * C128 +
              C2598 * C122 - C2592 * C129 + C2599 * C123 - C32152 * C130) *
                 C118 +
             (C2596 * C132 - C2590 * C141 + C2597 * C133 - C2591 * C142 +
              C2598 * C134 - C2592 * C143 + C2599 * C135 - C32152 * C144) *
                 C31864) *
                C32118 +
            ((C2596 * C319 - C2590 * C329 + C2597 * C320 - C2591 * C330 +
              C2598 * C321 - C2592 * C331 + C2599 * C322 - C32152 * C332) *
                 C118 +
             (C2596 * C334 - C2590 * C349 + C2597 * C335 - C2591 * C350 +
              C2598 * C336 - C2592 * C351 + C2599 * C337 - C32152 * C352) *
                 C31864) *
                C31963) *
               C31835 * C440 +
           (((C2962 - C2961 + C2964 - C2963 + C2966 - C2965 + C2968 - C2967) *
                 C118 +
             (C2970 - C2969 + C2972 - C2971 + C2974 - C2973 + C2976 - C2975) *
                 C31864) *
                C32118 +
            ((C2590 * C624 - C2596 * C619 + C2591 * C625 - C2597 * C620 +
              C2592 * C626 - C2598 * C621 + C32152 * C627 - C2599 * C622) *
                 C118 +
             (C2590 * C634 - C2596 * C629 + C2591 * C635 - C2597 * C630 +
              C2592 * C636 - C2598 * C631 + C32152 * C637 - C2599 * C632) *
                 C31864) *
                C31963) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                 C5157 +
             (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                 C5151 +
             (C7532 - C7533 + C7534 - C7535) * C5158 +
             (C7536 - C7537 + C7538 - C7539) * C5152 + C7572 * C5159 +
             C7573 * C32148) *
                C32118 +
            ((C8556 - C8557 + C8558 - C8559) * C5157 +
             (C8560 - C8561 + C8562 - C8563) * C5151 +
             (C8089 - C8088 + C8091 - C8090) * C5158 +
             (C8093 - C8092 + C8095 - C8094) * C5152 + C8408 * C5159 +
             C8409 * C32148) *
                C31963) *
               C31835 * C440 +
           (((C7533 - C7532 + C7535 - C7534) * C5157 +
             (C7537 - C7536 + C7539 - C7538) * C5151 +
             (C7541 - C7540 + C7543 - C7542) * C5158 +
             (C7545 - C7544 + C7547 - C7546) * C5152 +
             (C7549 - C7548 + C7551 - C7550) * C5159 +
             (C7553 - C7552 + C7555 - C7554) * C32148) *
                C32118 +
            ((C8088 - C8089 + C8090 - C8091) * C5157 +
             (C8092 - C8093 + C8094 - C8095) * C5151 +
             (C8096 - C8097 + C8098 - C8099) * C5158 +
             (C8100 - C8101 + C8102 - C8103) * C5152 +
             (C8104 - C8105 + C8106 - C8107) * C5159 +
             (C8108 - C8109 + C8110 - C8111) * C32148) *
                C31963) *
               C31835 * C441) *
              C442 +
          ((((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                 C5157 +
             (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                 C5151 +
             (C7804 - C7805 + C7806 - C7807) * C5158 +
             (C7808 - C7809 + C7810 - C7811) * C5152 +
             (C7812 - C7813 + C7814 - C7815) * C5159 +
             (C7816 - C7817 + C7818 - C7819) * C32148) *
                C32118 +
            ((C30873 * C319 - C32098 * C329 + C30854 * C320 - C31782 * C330) *
                 C5157 +
             (C30873 * C334 - C32098 * C349 + C30854 * C335 - C31782 * C350) *
                 C5151 +
             (C8782 - C8783 + C8784 - C8785) * C5158 +
             (C8786 - C8787 + C8788 - C8789) * C5152 +
             (C8790 - C8791 + C8792 - C8793) * C5159 +
             (C8794 - C8795 + C8796 - C8797) * C32148) *
                C31963) *
               C31835 * C440 +
           (((C7805 - C7804 + C7807 - C7806) * C5157 +
             (C7809 - C7808 + C7811 - C7810) * C5151 +
             (C7813 - C7812 + C7815 - C7814) * C5158 +
             (C7817 - C7816 + C7819 - C7818) * C5152 +
             (C7821 - C7820 + C7823 - C7822) * C5159 +
             (C7825 - C7824 + C7827 - C7826) * C32148) *
                C32118 +
            ((C8783 - C8782 + C8785 - C8784) * C5157 +
             (C8787 - C8786 + C8789 - C8788) * C5151 +
             (C8791 - C8790 + C8793 - C8792) * C5158 +
             (C8795 - C8794 + C8797 - C8796) * C5152 +
             (C32098 * C1560 - C30873 * C1557 + C31782 * C1561 -
              C30854 * C1558) *
                 C5159 +
             (C32098 * C1566 - C30873 * C1563 + C31782 * C1567 -
              C30854 * C1564) *
                 C32148) *
                C31963) *
               C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
              C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
                 C118 +
             (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
              C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
                 C31864) *
                C32118 +
            ((C3549 - C3550 + C3551 - C3552 + C3553 - C3554 + C3555 - C3556) *
                 C118 +
             (C3557 - C3558 + C3559 - C3560 + C3561 - C3562 + C3563 - C3564) *
                 C31864) *
                C31963) *
               C530 +
           (((C3550 - C3549 + C3552 - C3551 + C3554 - C3553 + C3556 - C3555) *
                 C118 +
             (C3558 - C3557 + C3560 - C3559 + C3562 - C3561 + C3564 - C3563) *
                 C31864) *
                C32118 +
            ((C3565 - C3566 + C3567 - C3568 + C3569 - C3570 + C3571 - C3572) *
                 C118 +
             (C3573 - C3574 + C3575 - C3576 + C3577 - C3578 + C3579 - C3580) *
                 C31864) *
                C31963) *
               C531) *
              C440 +
          ((((C2702 - C2701 + C2704 - C2703 + C2706 - C2705 + C2708 - C2707) *
                 C118 +
             (C2710 - C2709 + C2712 - C2711 + C2714 - C2713 + C2716 - C2715) *
                 C31864) *
                C32118 +
            ((C3237 - C3238 + C3239 - C3240 + C3241 - C3242 + C3243 - C3244) *
                 C118 +
             (C3245 - C3246 + C3247 - C3248 + C3249 - C3250 + C3251 - C3252) *
                 C31864) *
                C31963) *
               C530 +
           (((C3238 - C3237 + C3240 - C3239 + C3242 - C3241 + C3244 - C3243) *
                 C118 +
             (C3246 - C3245 + C3248 - C3247 + C3250 - C3249 + C3252 - C3251) *
                 C31864) *
                C32118 +
            ((C2590 * C1065 - C2596 * C1053 + C2591 * C1066 - C2597 * C1054 +
              C2592 * C1067 - C2598 * C1055 + C32152 * C2145 - C2599 * C2144) *
                 C118 +
             (C2590 * C1080 - C2596 * C1068 + C2591 * C1081 - C2597 * C1069 +
              C2592 * C1082 - C2598 * C1070 + C32152 * C2147 - C2599 * C2146) *
                 C31864) *
                C31963) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                 C5157 +
             (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                 C5151 +
             (C7532 - C7533 + C7534 - C7535) * C5158 +
             (C7536 - C7537 + C7538 - C7539) * C5152 + C7572 * C5159 +
             C7573 * C32148) *
                C32118 +
            ((C8556 - C8557 + C8558 - C8559) * C5157 +
             (C8560 - C8561 + C8562 - C8563) * C5151 + C9206 * C5158 +
             C9207 * C5152 + C8408 * C5159 + C8409 * C32148) *
                C31963) *
               C530 +
           (((C8557 - C8556 + C8559 - C8558) * C5157 +
             (C8561 - C8560 + C8563 - C8562) * C5151 + C9208 * C5158 +
             C9209 * C5152 + C9210 * C5159 + C9211 * C32148) *
                C32118 +
            ((C8564 - C8565 + C8566 - C8567) * C5157 +
             (C8568 - C8569 + C8570 - C8571) * C5151 +
             (C8572 - C8573 + C8574 - C8575) * C5158 +
             (C8576 - C8577 + C8578 - C8579) * C5152 +
             (C8580 - C8581 + C8582 - C8583) * C5159 +
             (C8584 - C8585 + C8586 - C8587) * C32148) *
                C31963) *
               C531) *
              C440 +
          ((((C7533 - C7532 + C7535 - C7534) * C5157 +
             (C7537 - C7536 + C7539 - C7538) * C5151 +
             (C7541 - C7540 + C7543 - C7542) * C5158 +
             (C7545 - C7544 + C7547 - C7546) * C5152 +
             (C7549 - C7548 + C7551 - C7550) * C5159 +
             (C7553 - C7552 + C7555 - C7554) * C32148) *
                C32118 +
            (C9208 * C5157 + C9209 * C5151 + C9210 * C5158 + C9211 * C5152 +
             (C8104 - C8105 + C8106 - C8107) * C5159 +
             (C8108 - C8109 + C8110 - C8111) * C32148) *
                C31963) *
               C530 +
           ((C9206 * C5157 + C9207 * C5151 + C8408 * C5158 + C8409 * C5152 +
             (C8105 - C8104 + C8107 - C8106) * C5159 +
             (C8109 - C8108 + C8111 - C8110) * C32148) *
                C32118 +
            ((C8573 - C8572 + C8575 - C8574) * C5157 +
             (C8577 - C8576 + C8579 - C8578) * C5151 +
             (C8581 - C8580 + C8583 - C8582) * C5158 +
             (C8585 - C8584 + C8587 - C8586) * C5152 +
             (C32098 * C6149 - C30873 * C6145 + C31782 * C6986 -
              C30854 * C6985) *
                 C5159 +
             (C32098 * C6154 - C30873 * C6150 + C31782 * C6988 -
              C30854 * C6987) *
                 C32148) *
                C31963) *
               C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
             C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
                C118 +
            (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
             C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
                C31864) *
               C32118 +
           ((C2590 * C328 - C2596 * C318 + C2591 * C329 - C2597 * C319 +
             C2592 * C330 - C2598 * C320 + C32152 * C331 - C2599 * C321) *
                C118 +
            (C2590 * C348 - C2596 * C333 + C2591 * C349 - C2597 * C334 +
             C2592 * C350 - C2598 * C335 + C32152 * C351 - C2599 * C336) *
                C31864) *
               C31963) *
              C31835 * C209 +
          (((C2702 - C2701 + C2704 - C2703 + C2706 - C2705 + C2708 - C2707) *
                C118 +
            (C2710 - C2709 + C2712 - C2711 + C2714 - C2713 + C2716 - C2715) *
                C31864) *
               C32118 +
           ((C3237 - C3238 + C3239 - C3240 + C3241 - C3242 + C3243 - C3244) *
                C118 +
            (C3245 - C3246 + C3247 - C3248 + C3249 - C3250 + C3251 - C3252) *
                C31864) *
               C31963) *
              C31835 * C210 +
          (((C2718 - C2717 + C2720 - C2719 + C2722 - C2721 + C2724 - C2723) *
                C118 +
            (C2726 - C2725 + C2728 - C2727 + C2730 - C2729 + C2732 - C2731) *
                C31864) *
               C32118 +
           ((C2590 * C1059 - C2596 * C1050 + C2591 * C1060 - C2597 * C1051 +
             C2592 * C1061 - C2598 * C1052 + C32152 * C1407 - C2599 * C1406) *
                C118 +
            (C2590 * C1077 - C2596 * C1062 + C2591 * C1078 - C2597 * C1063 +
             C2592 * C1079 - C2598 * C1064 + C32152 * C1409 - C2599 * C1408) *
                C31864) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
             C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
                C118 +
            (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
             C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
                C31864) *
               C32118 +
           ((C2590 * C328 - C2596 * C318 + C2591 * C329 - C2597 * C319 +
             C2592 * C330 - C2598 * C320 + C32152 * C331 - C2599 * C321) *
                C118 +
            (C2590 * C348 - C2596 * C333 + C2591 * C349 - C2597 * C334 +
             C2592 * C350 - C2598 * C335 + C32152 * C351 - C2599 * C336) *
                C31864) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C2596 * C120 - C2590 * C127 + C2597 * C121 - C2591 * C128 +
             C2598 * C122 - C2592 * C129 + C2599 * C123 - C32152 * C130) *
                C118 +
            (C2596 * C132 - C2590 * C141 + C2597 * C133 - C2591 * C142 +
             C2598 * C134 - C2592 * C143 + C2599 * C135 - C32152 * C144) *
                C31864) *
               C32118 +
           ((C2596 * C319 - C2590 * C329 + C2597 * C320 - C2591 * C330 +
             C2598 * C321 - C2592 * C331 + C2599 * C322 - C32152 * C332) *
                C118 +
            (C2596 * C334 - C2590 * C349 + C2597 * C335 - C2591 * C350 +
             C2598 * C336 - C2592 * C351 + C2599 * C337 - C32152 * C352) *
                C31864) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C2590 * C128 - C2596 * C121 + C2591 * C129 - C2597 * C122 +
             C2592 * C130 - C2598 * C123 + C32152 * C136 - C2599 * C124) *
                C118 +
            (C2590 * C142 - C2596 * C133 + C2591 * C143 - C2597 * C134 +
             C2592 * C144 - C2598 * C135 + C32152 * C145 - C2599 * C137) *
                C31864) *
               C32118 +
           ((C2590 * C330 - C2596 * C320 + C2591 * C331 - C2597 * C321 +
             C2592 * C332 - C2598 * C322 + C32152 * C533 - C2599 * C532) *
                C118 +
            (C2590 * C350 - C2596 * C335 + C2591 * C351 - C2597 * C336 +
             C2592 * C352 - C2598 * C337 + C32152 * C535 - C2599 * C534) *
                C31864) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
             C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
                C118 +
            (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
             C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
                C31864) *
               C32118 +
           ((C3549 - C3550 + C3551 - C3552 + C3553 - C3554 + C3555 - C3556) *
                C118 +
            (C3557 - C3558 + C3559 - C3560 + C3561 - C3562 + C3563 - C3564) *
                C31864) *
               C31963) *
              C315 +
          (((C3550 - C3549 + C3552 - C3551 + C3554 - C3553 + C3556 - C3555) *
                C118 +
            (C3558 - C3557 + C3560 - C3559 + C3562 - C3561 + C3564 - C3563) *
                C31864) *
               C32118 +
           ((C3565 - C3566 + C3567 - C3568 + C3569 - C3570 + C3571 - C3572) *
                C118 +
            (C3573 - C3574 + C3575 - C3576 + C3577 - C3578 + C3579 - C3580) *
                C31864) *
               C31963) *
              C316 +
          (((C3566 - C3565 + C3568 - C3567 + C3570 - C3569 + C3572 - C3571) *
                C118 +
            (C3574 - C3573 + C3576 - C3575 + C3578 - C3577 + C3580 - C3579) *
                C31864) *
               C32118 +
           ((C2590 * C1931 - C2596 * C1925 + C2591 * C1932 - C2597 * C1926 +
             C2592 * C1933 - C2598 * C1927 + C32152 * C2295 - C2599 * C2294) *
                C118 +
            (C2590 * C1943 - C2596 * C1934 + C2591 * C1944 - C2597 * C1935 +
             C2592 * C1945 - C2598 * C1936 + C32152 * C2297 - C2599 * C2296) *
                C31864) *
               C31963) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C5157 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C5151 +
            (C7532 - C7533 + C7534 - C7535) * C5158 +
            (C7536 - C7537 + C7538 - C7539) * C5152 + C7572 * C5159 +
            C7573 * C32148) *
               C32118 +
           ((C32098 * C328 - C30873 * C318 + C31782 * C329 - C30854 * C319) *
                C5157 +
            (C32098 * C348 - C30873 * C333 + C31782 * C349 - C30854 * C334) *
                C5151 +
            (C8089 - C8088 + C8091 - C8090) * C5158 +
            (C8093 - C8092 + C8095 - C8094) * C5152 +
            (C8097 - C8096 + C8099 - C8098) * C5159 +
            (C8101 - C8100 + C8103 - C8102) * C32148) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                C5157 +
            (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                C5151 +
            (C7804 - C7805 + C7806 - C7807) * C5158 +
            (C7808 - C7809 + C7810 - C7811) * C5152 +
            (C7812 - C7813 + C7814 - C7815) * C5159 +
            (C7816 - C7817 + C7818 - C7819) * C32148) *
               C32118 +
           ((C30873 * C319 - C32098 * C329 + C30854 * C320 - C31782 * C330) *
                C5157 +
            (C30873 * C334 - C32098 * C349 + C30854 * C335 - C31782 * C350) *
                C5151 +
            (C30873 * C619 - C32098 * C624 + C30854 * C620 - C31782 * C625) *
                C5158 +
            (C30873 * C629 - C32098 * C634 + C30854 * C630 - C31782 * C635) *
                C5152 +
            (C30873 * C1051 - C32098 * C1060 + C30854 * C1052 -
             C31782 * C1061) *
                C5159 +
            (C30873 * C1063 - C32098 * C1078 + C30854 * C1064 -
             C31782 * C1079) *
                C32148) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C32098 * C128 - C30873 * C121 + C31782 * C129 - C30854 * C122) *
                C5157 +
            (C32098 * C142 - C30873 * C133 + C31782 * C143 - C30854 * C134) *
                C5151 +
            (C32098 * C225 - C30873 * C215 + C31782 * C226 - C30854 * C216) *
                C5158 +
            (C32098 * C245 - C30873 * C230 + C31782 * C246 - C30854 * C231) *
                C5152 +
            (C32098 * C235 - C30873 * C220 + C31782 * C236 - C30854 * C221) *
                C5159 +
            (C32098 * C250 - C30873 * C240 + C31782 * C251 - C30854 * C241) *
                C32148) *
               C32118 +
           ((C32098 * C330 - C30873 * C320 + C31782 * C331 - C30854 * C321) *
                C5157 +
            (C32098 * C350 - C30873 * C335 + C31782 * C351 - C30854 * C336) *
                C5151 +
            (C32098 * C625 - C30873 * C620 + C31782 * C626 - C30854 * C621) *
                C5158 +
            (C32098 * C635 - C30873 * C630 + C31782 * C636 - C30854 * C631) *
                C5152 +
            (C32098 * C1061 - C30873 * C1052 + C31782 * C1407 -
             C30854 * C1406) *
                C5159 +
            (C32098 * C1079 - C30873 * C1064 + C31782 * C1409 -
             C30854 * C1408) *
                C32148) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C5157 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C5151 +
            (C7532 - C7533 + C7534 - C7535) * C5158 +
            (C7536 - C7537 + C7538 - C7539) * C5152 + C7572 * C5159 +
            C7573 * C32148) *
               C32118 +
           ((C32098 * C328 - C30873 * C318 + C31782 * C329 - C30854 * C319) *
                C5157 +
            (C32098 * C348 - C30873 * C333 + C31782 * C349 - C30854 * C334) *
                C5151 +
            (C8089 - C8088 + C8091 - C8090) * C5158 +
            (C8093 - C8092 + C8095 - C8094) * C5152 + C8408 * C5159 +
            C8409 * C32148) *
               C31963) *
              C31835 * C209 +
          (((C7533 - C7532 + C7535 - C7534) * C5157 +
            (C7537 - C7536 + C7539 - C7538) * C5151 +
            (C7541 - C7540 + C7543 - C7542) * C5158 +
            (C7545 - C7544 + C7547 - C7546) * C5152 +
            (C7549 - C7548 + C7551 - C7550) * C5159 +
            (C7553 - C7552 + C7555 - C7554) * C32148) *
               C32118 +
           ((C8088 - C8089 + C8090 - C8091) * C5157 +
            (C8092 - C8093 + C8094 - C8095) * C5151 +
            (C8096 - C8097 + C8098 - C8099) * C5158 +
            (C8100 - C8101 + C8102 - C8103) * C5152 +
            (C8104 - C8105 + C8106 - C8107) * C5159 +
            (C8108 - C8109 + C8110 - C8111) * C32148) *
               C31963) *
              C31835 * C210 +
          ((C7572 * C5157 + C7573 * C5151 + C7574 * C5158 + C7575 * C5152 +
            (C7557 - C7556 + C7559 - C7558) * C5159 +
            (C7561 - C7560 + C7563 - C7562) * C32148) *
               C32118 +
           (C8408 * C5157 + C8409 * C5151 +
            (C8105 - C8104 + C8107 - C8106) * C5158 +
            (C8109 - C8108 + C8111 - C8110) * C5152 +
            (C32098 * C6147 - C30873 * C6144 + C31782 * C6341 -
             C30854 * C6340) *
                C5159 +
            (C32098 * C6153 - C30873 * C6148 + C31782 * C6343 -
             C30854 * C6342) *
                C32148) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C5157 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C5151 +
            (C7532 - C7533 + C7534 - C7535) * C5158 +
            (C7536 - C7537 + C7538 - C7539) * C5152 + C7572 * C5159 +
            C7573 * C32148) *
               C32118 +
           ((C8556 - C8557 + C8558 - C8559) * C5157 +
            (C8560 - C8561 + C8562 - C8563) * C5151 +
            (C8089 - C8088 + C8091 - C8090) * C5158 +
            (C8093 - C8092 + C8095 - C8094) * C5152 + C8408 * C5159 +
            C8409 * C32148) *
               C31963) *
              C315 +
          (((C8557 - C8556 + C8559 - C8558) * C5157 +
            (C8561 - C8560 + C8563 - C8562) * C5151 +
            (C8088 - C8089 + C8090 - C8091) * C5158 +
            (C8092 - C8093 + C8094 - C8095) * C5152 +
            (C8096 - C8097 + C8098 - C8099) * C5159 +
            (C8100 - C8101 + C8102 - C8103) * C32148) *
               C32118 +
           ((C8564 - C8565 + C8566 - C8567) * C5157 +
            (C8568 - C8569 + C8570 - C8571) * C5151 +
            (C8572 - C8573 + C8574 - C8575) * C5158 +
            (C8576 - C8577 + C8578 - C8579) * C5152 +
            (C8580 - C8581 + C8582 - C8583) * C5159 +
            (C8584 - C8585 + C8586 - C8587) * C32148) *
               C31963) *
              C316 +
          (((C8565 - C8564 + C8567 - C8566) * C5157 +
            (C8569 - C8568 + C8571 - C8570) * C5151 +
            (C8573 - C8572 + C8575 - C8574) * C5158 +
            (C8577 - C8576 + C8579 - C8578) * C5152 +
            (C8581 - C8580 + C8583 - C8582) * C5159 +
            (C8585 - C8584 + C8587 - C8586) * C32148) *
               C32118 +
           ((C32098 * C1931 - C30873 * C1925 + C31782 * C1932 -
             C30854 * C1926) *
                C5157 +
            (C32098 * C1943 - C30873 * C1934 + C31782 * C1944 -
             C30854 * C1935) *
                C5151 +
            (C32098 * C2471 - C30873 * C2468 + C31782 * C2472 -
             C30854 * C2469) *
                C5158 +
            (C32098 * C2477 - C30873 * C2474 + C31782 * C2478 -
             C30854 * C2475) *
                C5152 +
            (C32098 * C6795 - C30873 * C6792 + C31782 * C7152 -
             C30854 * C7151) *
                C5159 +
            (C32098 * C6801 - C30873 * C6796 + C31782 * C7154 -
             C30854 * C7153) *
                C32148) *
               C31963) *
              C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
              C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
                 C118 +
             (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
              C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
                 C31864) *
                C32118 +
            ((C3549 - C3550 + C3551 - C3552 + C3553 - C3554 + C3555 - C3556) *
                 C118 +
             (C3557 - C3558 + C3559 - C3560 + C3561 - C3562 + C3563 - C3564) *
                 C31864) *
                C31963) *
               C530 +
           (((C3550 - C3549 + C3552 - C3551 + C3554 - C3553 + C3556 - C3555) *
                 C118 +
             (C3558 - C3557 + C3560 - C3559 + C3562 - C3561 + C3564 - C3563) *
                 C31864) *
                C32118 +
            ((C3565 - C3566 + C3567 - C3568 + C3569 - C3570 + C3571 - C3572) *
                 C118 +
             (C3573 - C3574 + C3575 - C3576 + C3577 - C3578 + C3579 - C3580) *
                 C31864) *
                C31963) *
               C531) *
              C31821 * C442 +
          ((((C2596 * C120 - C2590 * C127 + C2597 * C121 - C2591 * C128 +
              C2598 * C122 - C2592 * C129 + C2599 * C123 - C32152 * C130) *
                 C118 +
             (C2596 * C132 - C2590 * C141 + C2597 * C133 - C2591 * C142 +
              C2598 * C134 - C2592 * C143 + C2599 * C135 - C32152 * C144) *
                 C31864) *
                C32118 +
            ((C3841 - C3842 + C3843 - C3844 + C3845 - C3846 + C3847 - C3848) *
                 C118 +
             (C3849 - C3850 + C3851 - C3852 + C3853 - C3854 + C3855 - C3856) *
                 C31864) *
                C31963) *
               C530 +
           (((C3842 - C3841 + C3844 - C3843 + C3846 - C3845 + C3848 - C3847) *
                 C118 +
             (C3850 - C3849 + C3852 - C3851 + C3854 - C3853 + C3856 - C3855) *
                 C31864) *
                C32118 +
            ((C2590 * C339 - C2596 * C324 + C2591 * C340 - C2597 * C325 +
              C2592 * C341 - C2598 * C326 + C32152 * C342 - C2599 * C327) *
                 C118 +
             (C2590 * C354 - C2596 * C344 + C2591 * C355 - C2597 * C345 +
              C2592 * C356 - C2598 * C346 + C32152 * C357 - C2599 * C347) *
                 C31864) *
                C31963) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                 C5157 +
             (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                 C5151 +
             (C7532 - C7533 + C7534 - C7535) * C5158 +
             (C7536 - C7537 + C7538 - C7539) * C5152 + C7572 * C5159 +
             C7573 * C32148) *
                C32118 +
            ((C8556 - C8557 + C8558 - C8559) * C5157 +
             (C8560 - C8561 + C8562 - C8563) * C5151 +
             (C8089 - C8088 + C8091 - C8090) * C5158 +
             (C8093 - C8092 + C8095 - C8094) * C5152 + C8408 * C5159 +
             C8409 * C32148) *
                C31963) *
               C530 +
           (((C8557 - C8556 + C8559 - C8558) * C5157 +
             (C8561 - C8560 + C8563 - C8562) * C5151 +
             (C8088 - C8089 + C8090 - C8091) * C5158 +
             (C8092 - C8093 + C8094 - C8095) * C5152 +
             (C8096 - C8097 + C8098 - C8099) * C5159 +
             (C8100 - C8101 + C8102 - C8103) * C32148) *
                C32118 +
            ((C8564 - C8565 + C8566 - C8567) * C5157 +
             (C8568 - C8569 + C8570 - C8571) * C5151 +
             (C8572 - C8573 + C8574 - C8575) * C5158 +
             (C8576 - C8577 + C8578 - C8579) * C5152 +
             (C8580 - C8581 + C8582 - C8583) * C5159 +
             (C8584 - C8585 + C8586 - C8587) * C32148) *
                C31963) *
               C531) *
              C31821 * C442 +
          ((((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                 C5157 +
             (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                 C5151 +
             (C7804 - C7805 + C7806 - C7807) * C5158 +
             (C7808 - C7809 + C7810 - C7811) * C5152 +
             (C7812 - C7813 + C7814 - C7815) * C5159 +
             (C7816 - C7817 + C7818 - C7819) * C32148) *
                C32118 +
            ((C8992 - C8993 + C8994 - C8995) * C5157 +
             (C8996 - C8997 + C8998 - C8999) * C5151 +
             (C8782 - C8783 + C8784 - C8785) * C5158 +
             (C8786 - C8787 + C8788 - C8789) * C5152 +
             (C8790 - C8791 + C8792 - C8793) * C5159 +
             (C8794 - C8795 + C8796 - C8797) * C32148) *
                C31963) *
               C530 +
           (((C8993 - C8992 + C8995 - C8994) * C5157 +
             (C8997 - C8996 + C8999 - C8998) * C5151 +
             (C8783 - C8782 + C8785 - C8784) * C5158 +
             (C8787 - C8786 + C8789 - C8788) * C5152 +
             (C8791 - C8790 + C8793 - C8792) * C5159 +
             (C8795 - C8794 + C8797 - C8796) * C32148) *
                C32118 +
            ((C32098 * C339 - C30873 * C324 + C31782 * C340 - C30854 * C325) *
                 C5157 +
             (C32098 * C354 - C30873 * C344 + C31782 * C355 - C30854 * C345) *
                 C5151 +
             (C32098 * C1066 - C30873 * C1054 + C31782 * C1067 -
              C30854 * C1055) *
                 C5158 +
             (C32098 * C1081 - C30873 * C1069 + C31782 * C1082 -
              C30854 * C1070) *
                 C5152 +
             (C32098 * C1072 - C30873 * C1057 + C31782 * C1073 -
              C30854 * C1058) *
                 C5159 +
             (C32098 * C1084 - C30873 * C1075 + C31782 * C1085 -
              C30854 * C1076) *
                 C32148) *
                C31963) *
               C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
             C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
                C118 +
            (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
             C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
                C31864) *
               C32118 +
           ((C2590 * C328 - C2596 * C318 + C2591 * C329 - C2597 * C319 +
             C2592 * C330 - C2598 * C320 + C32152 * C331 - C2599 * C321) *
                C118 +
            (C2590 * C348 - C2596 * C333 + C2591 * C349 - C2597 * C334 +
             C2592 * C350 - C2598 * C335 + C32152 * C351 - C2599 * C336) *
                C31864) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C2596 * C120 - C2590 * C127 + C2597 * C121 - C2591 * C128 +
             C2598 * C122 - C2592 * C129 + C2599 * C123 - C32152 * C130) *
                C118 +
            (C2596 * C132 - C2590 * C141 + C2597 * C133 - C2591 * C142 +
             C2598 * C134 - C2592 * C143 + C2599 * C135 - C32152 * C144) *
                C31864) *
               C32118 +
           ((C2596 * C319 - C2590 * C329 + C2597 * C320 - C2591 * C330 +
             C2598 * C321 - C2592 * C331 + C2599 * C322 - C32152 * C332) *
                C118 +
            (C2596 * C334 - C2590 * C349 + C2597 * C335 - C2591 * C350 +
             C2598 * C336 - C2592 * C351 + C2599 * C337 - C32152 * C352) *
                C31864) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C2590 * C128 - C2596 * C121 + C2591 * C129 - C2597 * C122 +
             C2592 * C130 - C2598 * C123 + C32152 * C136 - C2599 * C124) *
                C118 +
            (C2590 * C142 - C2596 * C133 + C2591 * C143 - C2597 * C134 +
             C2592 * C144 - C2598 * C135 + C32152 * C145 - C2599 * C137) *
                C31864) *
               C32118 +
           ((C2590 * C330 - C2596 * C320 + C2591 * C331 - C2597 * C321 +
             C2592 * C332 - C2598 * C322 + C32152 * C533 - C2599 * C532) *
                C118 +
            (C2590 * C350 - C2596 * C335 + C2591 * C351 - C2597 * C336 +
             C2592 * C352 - C2598 * C337 + C32152 * C535 - C2599 * C534) *
                C31864) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C2590 * C126 - C2596 * C119 + C2591 * C127 - C2597 * C120 +
             C2592 * C128 - C2598 * C121 + C32152 * C129 - C2599 * C122) *
                C118 +
            (C2590 * C140 - C2596 * C131 + C2591 * C141 - C2597 * C132 +
             C2592 * C142 - C2598 * C133 + C32152 * C143 - C2599 * C134) *
                C31864) *
               C32118 +
           ((C2590 * C328 - C2596 * C318 + C2591 * C329 - C2597 * C319 +
             C2592 * C330 - C2598 * C320 + C32152 * C331 - C2599 * C321) *
                C118 +
            (C2590 * C348 - C2596 * C333 + C2591 * C349 - C2597 * C334 +
             C2592 * C350 - C2598 * C335 + C32152 * C351 - C2599 * C336) *
                C31864) *
               C31963) *
              C31835 * C209 +
          (((C2702 - C2701 + C2704 - C2703 + C2706 - C2705 + C2708 - C2707) *
                C118 +
            (C2710 - C2709 + C2712 - C2711 + C2714 - C2713 + C2716 - C2715) *
                C31864) *
               C32118 +
           ((C3237 - C3238 + C3239 - C3240 + C3241 - C3242 + C3243 - C3244) *
                C118 +
            (C3245 - C3246 + C3247 - C3248 + C3249 - C3250 + C3251 - C3252) *
                C31864) *
               C31963) *
              C31835 * C210 +
          (((C2718 - C2717 + C2720 - C2719 + C2722 - C2721 + C2724 - C2723) *
                C118 +
            (C2726 - C2725 + C2728 - C2727 + C2730 - C2729 + C2732 - C2731) *
                C31864) *
               C32118 +
           ((C2590 * C1059 - C2596 * C1050 + C2591 * C1060 - C2597 * C1051 +
             C2592 * C1061 - C2598 * C1052 + C32152 * C1407 - C2599 * C1406) *
                C118 +
            (C2590 * C1077 - C2596 * C1062 + C2591 * C1078 - C2597 * C1063 +
             C2592 * C1079 - C2598 * C1064 + C32152 * C1409 - C2599 * C1408) *
                C31864) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C5157 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C5151 +
            (C7532 - C7533 + C7534 - C7535) * C5158 +
            (C7536 - C7537 + C7538 - C7539) * C5152 + C7572 * C5159 +
            C7573 * C32148) *
               C32118 +
           ((C32098 * C328 - C30873 * C318 + C31782 * C329 - C30854 * C319) *
                C5157 +
            (C32098 * C348 - C30873 * C333 + C31782 * C349 - C30854 * C334) *
                C5151 +
            (C8089 - C8088 + C8091 - C8090) * C5158 +
            (C8093 - C8092 + C8095 - C8094) * C5152 +
            (C8097 - C8096 + C8099 - C8098) * C5159 +
            (C8101 - C8100 + C8103 - C8102) * C32148) *
               C31963) *
              C31835 * C31821 * C110 +
          (((C30873 * C120 - C32098 * C127 + C30854 * C121 - C31782 * C128) *
                C5157 +
            (C30873 * C132 - C32098 * C141 + C30854 * C133 - C31782 * C142) *
                C5151 +
            (C7804 - C7805 + C7806 - C7807) * C5158 +
            (C7808 - C7809 + C7810 - C7811) * C5152 +
            (C7812 - C7813 + C7814 - C7815) * C5159 +
            (C7816 - C7817 + C7818 - C7819) * C32148) *
               C32118 +
           ((C30873 * C319 - C32098 * C329 + C30854 * C320 - C31782 * C330) *
                C5157 +
            (C30873 * C334 - C32098 * C349 + C30854 * C335 - C31782 * C350) *
                C5151 +
            (C30873 * C619 - C32098 * C624 + C30854 * C620 - C31782 * C625) *
                C5158 +
            (C30873 * C629 - C32098 * C634 + C30854 * C630 - C31782 * C635) *
                C5152 +
            (C30873 * C1051 - C32098 * C1060 + C30854 * C1052 -
             C31782 * C1061) *
                C5159 +
            (C30873 * C1063 - C32098 * C1078 + C30854 * C1064 -
             C31782 * C1079) *
                C32148) *
               C31963) *
              C31835 * C31821 * C111 +
          (((C32098 * C128 - C30873 * C121 + C31782 * C129 - C30854 * C122) *
                C5157 +
            (C32098 * C142 - C30873 * C133 + C31782 * C143 - C30854 * C134) *
                C5151 +
            (C32098 * C225 - C30873 * C215 + C31782 * C226 - C30854 * C216) *
                C5158 +
            (C32098 * C245 - C30873 * C230 + C31782 * C246 - C30854 * C231) *
                C5152 +
            (C32098 * C235 - C30873 * C220 + C31782 * C236 - C30854 * C221) *
                C5159 +
            (C32098 * C250 - C30873 * C240 + C31782 * C251 - C30854 * C241) *
                C32148) *
               C32118 +
           ((C32098 * C330 - C30873 * C320 + C31782 * C331 - C30854 * C321) *
                C5157 +
            (C32098 * C350 - C30873 * C335 + C31782 * C351 - C30854 * C336) *
                C5151 +
            (C32098 * C625 - C30873 * C620 + C31782 * C626 - C30854 * C621) *
                C5158 +
            (C32098 * C635 - C30873 * C630 + C31782 * C636 - C30854 * C631) *
                C5152 +
            (C32098 * C1061 - C30873 * C1052 + C31782 * C1407 -
             C30854 * C1406) *
                C5159 +
            (C32098 * C1079 - C30873 * C1064 + C31782 * C1409 -
             C30854 * C1408) *
                C32148) *
               C31963) *
              C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C32098 * C126 - C30873 * C119 + C31782 * C127 - C30854 * C120) *
                C5157 +
            (C32098 * C140 - C30873 * C131 + C31782 * C141 - C30854 * C132) *
                C5151 +
            (C7532 - C7533 + C7534 - C7535) * C5158 +
            (C7536 - C7537 + C7538 - C7539) * C5152 + C7572 * C5159 +
            C7573 * C32148) *
               C32118 +
           ((C32098 * C328 - C30873 * C318 + C31782 * C329 - C30854 * C319) *
                C5157 +
            (C32098 * C348 - C30873 * C333 + C31782 * C349 - C30854 * C334) *
                C5151 +
            (C8089 - C8088 + C8091 - C8090) * C5158 +
            (C8093 - C8092 + C8095 - C8094) * C5152 + C8408 * C5159 +
            C8409 * C32148) *
               C31963) *
              C31835 * C209 +
          (((C7533 - C7532 + C7535 - C7534) * C5157 +
            (C7537 - C7536 + C7539 - C7538) * C5151 +
            (C7541 - C7540 + C7543 - C7542) * C5158 +
            (C7545 - C7544 + C7547 - C7546) * C5152 +
            (C7549 - C7548 + C7551 - C7550) * C5159 +
            (C7553 - C7552 + C7555 - C7554) * C32148) *
               C32118 +
           ((C8088 - C8089 + C8090 - C8091) * C5157 +
            (C8092 - C8093 + C8094 - C8095) * C5151 +
            (C8096 - C8097 + C8098 - C8099) * C5158 +
            (C8100 - C8101 + C8102 - C8103) * C5152 +
            (C8104 - C8105 + C8106 - C8107) * C5159 +
            (C8108 - C8109 + C8110 - C8111) * C32148) *
               C31963) *
              C31835 * C210 +
          ((C7572 * C5157 + C7573 * C5151 + C7574 * C5158 + C7575 * C5152 +
            (C7557 - C7556 + C7559 - C7558) * C5159 +
            (C7561 - C7560 + C7563 - C7562) * C32148) *
               C32118 +
           (C8408 * C5157 + C8409 * C5151 +
            (C8105 - C8104 + C8107 - C8106) * C5158 +
            (C8109 - C8108 + C8111 - C8110) * C5152 +
            (C32098 * C6147 - C30873 * C6144 + C31782 * C6341 -
             C30854 * C6340) *
                C5159 +
            (C32098 * C6153 - C30873 * C6148 + C31782 * C6343 -
             C30854 * C6342) *
                C32148) *
               C31963) *
              C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C31864) *
               C31876 * C31835 * C440 +
           ((C113 * C213 - C101 * C223 + C114 * C214 - C102 * C224 +
             C115 * C215 - C103 * C225 + C116 * C216 - C104 * C226 +
             C117 * C217 - C105 * C227) *
                C118 +
            (C113 * C228 - C101 * C243 + C114 * C229 - C102 * C244 +
             C115 * C230 - C103 * C245 + C116 * C231 - C104 * C246 +
             C117 * C232 - C105 * C247) *
                C31864) *
               C31876 * C31835 * C441) *
              C442 +
          (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
             C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
             C117 * C124 - C105 * C136) *
                C118 +
            (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
             C117 * C137 - C105 * C145) *
                C31864) *
               C31876 * C31835 * C440 +
           ((C101 * C224 - C113 * C214 + C102 * C225 - C114 * C215 +
             C103 * C226 - C115 * C216 + C104 * C227 - C116 * C217 +
             C105 * C445 - C117 * C444) *
                C118 +
            (C101 * C244 - C113 * C229 + C102 * C245 - C114 * C230 +
             C103 * C246 - C115 * C231 + C104 * C247 - C116 * C232 +
             C105 * C447 - C117 * C446) *
                C31864) *
               C31876 * C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
             C32137 * C128 - C756 * C121) *
                C757 +
            (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
             C32137 * C142 - C756 * C133) *
                C32183 +
            (C895 - C896 + C897 - C898 + C899 - C900) * C758 +
            (C901 - C902 + C903 - C904 + C905 - C906) * C32171 + C939 * C759 +
            C940 * C32148) *
               C31876 * C31835 * C440 +
           ((C896 - C895 + C898 - C897 + C900 - C899) * C757 +
            (C902 - C901 + C904 - C903 + C906 - C905) * C32183 +
            (C908 - C907 + C910 - C909 + C912 - C911) * C758 +
            (C914 - C913 + C916 - C915 + C918 - C917) * C32171 +
            (C919 - C920 + C921 - C922 + C923 - C924) * C759 +
            (C925 - C926 + C927 - C928 + C929 - C930) * C32148) *
               C31876 * C31835 * C441) *
              C442 +
          (((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
             C756 * C122 - C32137 * C129) *
                C757 +
            (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
             C756 * C134 - C32137 * C143) *
                C32183 +
            (C1237 - C1238 + C1239 - C1240 + C1241 - C1242) * C758 +
            (C1243 - C1244 + C1245 - C1246 + C1247 - C1248) * C32171 +
            (C1249 - C1250 + C1251 - C1252 + C1253 - C1254) * C759 +
            (C1255 - C1256 + C1257 - C1258 + C1259 - C1260) * C32148) *
               C31876 * C31835 * C440 +
           ((C1238 - C1237 + C1240 - C1239 + C1242 - C1241) * C757 +
            (C1244 - C1243 + C1246 - C1245 + C1248 - C1247) * C32183 +
            (C1250 - C1249 + C1252 - C1251 + C1254 - C1253) * C758 +
            (C1256 - C1255 + C1258 - C1257 + C1260 - C1259) * C32171 +
            (C748 * C877 - C754 * C871 + C749 * C878 - C755 * C872 +
             C32137 * C1233 - C756 * C1232) *
                C759 +
            (C748 * C889 - C754 * C880 + C749 * C890 - C755 * C881 +
             C32137 * C1235 - C756 * C1234) *
                C32148) *
               C31876 * C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C5157 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C5151 +
            (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C5158 +
            (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C5152 +
            C5315 * C5159 + C5316 * C32148) *
               C31876 * C31835 * C440 +
           ((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C5157 +
            (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C5151 +
            (C5284 - C5283 + C5286 - C5285 + C5288 - C5287) * C5158 +
            (C5290 - C5289 + C5292 - C5291 + C5294 - C5293) * C5152 +
            (C5295 - C5296 + C5297 - C5298 + C5299 - C5300) * C5159 +
            (C5301 - C5302 + C5303 - C5304 + C5305 - C5306) * C32148) *
               C31876 * C31835 * C441) *
              C442 +
          (((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
             C5156 * C122 - C32137 * C129) *
                C5157 +
            (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
             C5156 * C134 - C32137 * C143) *
                C5151 +
            (C5573 - C5574 + C5575 - C5576 + C5577 - C5578) * C5158 +
            (C5579 - C5580 + C5581 - C5582 + C5583 - C5584) * C5152 +
            (C5585 - C5586 + C5587 - C5588 + C5589 - C5590) * C5159 +
            (C5591 - C5592 + C5593 - C5594 + C5595 - C5596) * C32148) *
               C31876 * C31835 * C440 +
           ((C5574 - C5573 + C5576 - C5575 + C5578 - C5577) * C5157 +
            (C5580 - C5579 + C5582 - C5581 + C5584 - C5583) * C5151 +
            (C5586 - C5585 + C5588 - C5587 + C5590 - C5589) * C5158 +
            (C5592 - C5591 + C5594 - C5593 + C5596 - C5595) * C5152 +
            (C32180 * C877 - C5154 * C871 + C32167 * C878 - C5155 * C872 +
             C32137 * C1233 - C5156 * C1232) *
                C5159 +
            (C32180 * C889 - C5154 * C880 + C32167 * C890 - C5155 * C881 +
             C32137 * C1235 - C5156 * C1234) *
                C32148) *
               C31876 * C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C5981 +
            (C31772 * C140 - C5980 * C131) * C5975 + (C6057 - C6058) * C5982 +
            (C6059 - C6060) * C5976 + C6077 * C5983 + C6078 * C5977 +
            C6079 * C5984 + C6080 * C5978 + C6081 * C5985 + C6082 * C5979) *
               C31876 * C31835 * C440 +
           ((C6058 - C6057) * C5981 + (C6060 - C6059) * C5975 +
            (C6062 - C6061) * C5982 + (C6064 - C6063) * C5976 +
            (C6066 - C6065) * C5983 + (C6068 - C6067) * C5977 +
            (C6070 - C6069) * C5984 + (C6072 - C6071) * C5978 +
            (C6073 - C6074) * C5985 + (C6075 - C6076) * C5979) *
               C31876 * C31835 * C441) *
              C442 +
          (((C5980 * C120 - C31772 * C127) * C5981 +
            (C5980 * C132 - C31772 * C141) * C5975 + (C6243 - C6244) * C5982 +
            (C6245 - C6246) * C5976 + (C6247 - C6248) * C5983 +
            (C6249 - C6250) * C5977 + (C6251 - C6252) * C5984 +
            (C6253 - C6254) * C5978 + (C6255 - C6256) * C5985 +
            (C6257 - C6258) * C5979) *
               C31876 * C31835 * C440 +
           ((C6244 - C6243) * C5981 + (C6246 - C6245) * C5975 +
            (C6248 - C6247) * C5982 + (C6250 - C6249) * C5976 +
            (C6252 - C6251) * C5983 + (C6254 - C6253) * C5977 +
            (C6256 - C6255) * C5984 + (C6258 - C6257) * C5978 +
            (C31772 * C6239 - C5980 * C6238) * C5985 +
            (C31772 * C6241 - C5980 * C6240) * C5979) *
               C31876 * C31835 * C441) *
              C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C31864) *
               C31876 * C530 +
           ((C113 * C318 - C101 * C328 + C114 * C319 - C102 * C329 +
             C115 * C320 - C103 * C330 + C116 * C321 - C104 * C331 +
             C117 * C322 - C105 * C332) *
                C118 +
            (C113 * C333 - C101 * C348 + C114 * C334 - C102 * C349 +
             C115 * C335 - C103 * C350 + C116 * C336 - C104 * C351 +
             C117 * C337 - C105 * C352) *
                C31864) *
               C31876 * C531) *
              C440 +
          (((C113 * C213 - C101 * C223 + C114 * C214 - C102 * C224 +
             C115 * C215 - C103 * C225 + C116 * C216 - C104 * C226 +
             C117 * C217 - C105 * C227) *
                C118 +
            (C113 * C228 - C101 * C243 + C114 * C229 - C102 * C244 +
             C115 * C230 - C103 * C245 + C116 * C231 - C104 * C246 +
             C117 * C232 - C105 * C247) *
                C31864) *
               C31876 * C530 +
           ((C101 * C623 - C113 * C618 + C102 * C624 - C114 * C619 +
             C103 * C625 - C115 * C620 + C104 * C626 - C116 * C621 +
             C105 * C627 - C117 * C622) *
                C118 +
            (C101 * C633 - C113 * C628 + C102 * C634 - C114 * C629 +
             C103 * C635 - C115 * C630 + C104 * C636 - C116 * C631 +
             C105 * C637 - C117 * C632) *
                C31864) *
               C31876 * C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
             C32137 * C128 - C756 * C121) *
                C757 +
            (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
             C32137 * C142 - C756 * C133) *
                C32183 +
            (C895 - C896 + C897 - C898 + C899 - C900) * C758 +
            (C901 - C902 + C903 - C904 + C905 - C906) * C32171 + C939 * C759 +
            C940 * C32148) *
               C31876 * C530 +
           ((C754 * C318 - C748 * C328 + C755 * C319 - C749 * C329 +
             C756 * C320 - C32137 * C330) *
                C757 +
            (C754 * C333 - C748 * C348 + C755 * C334 - C749 * C349 +
             C756 * C335 - C32137 * C350) *
                C32183 +
            (C1569 - C1570 + C1571 - C1572 + C1573 - C1574) * C758 +
            (C1575 - C1576 + C1577 - C1578 + C1579 - C1580) * C32171 +
            (C1581 - C1582 + C1583 - C1584 + C1585 - C1586) * C759 +
            (C1587 - C1588 + C1589 - C1590 + C1591 - C1592) * C32148) *
               C31876 * C531) *
              C440 +
          (((C896 - C895 + C898 - C897 + C900 - C899) * C757 +
            (C902 - C901 + C904 - C903 + C906 - C905) * C32183 +
            (C908 - C907 + C910 - C909 + C912 - C911) * C758 +
            (C914 - C913 + C916 - C915 + C918 - C917) * C32171 +
            (C919 - C920 + C921 - C922 + C923 - C924) * C759 +
            (C925 - C926 + C927 - C928 + C929 - C930) * C32148) *
               C31876 * C530 +
           ((C1570 - C1569 + C1572 - C1571 + C1574 - C1573) * C757 +
            (C1576 - C1575 + C1578 - C1577 + C1580 - C1579) * C32183 +
            (C1582 - C1581 + C1584 - C1583 + C1586 - C1585) * C758 +
            (C1588 - C1587 + C1590 - C1589 + C1592 - C1591) * C32171 +
            (C748 * C1559 - C754 * C1556 + C749 * C1560 - C755 * C1557 +
             C32137 * C1561 - C756 * C1558) *
                C759 +
            (C748 * C1565 - C754 * C1562 + C749 * C1566 - C755 * C1563 +
             C32137 * C1567 - C756 * C1564) *
                C32148) *
               C31876 * C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C5157 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C5151 +
            (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C5158 +
            (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C5152 +
            C5315 * C5159 + C5316 * C32148) *
               C31876 * C530 +
           ((C5154 * C318 - C32180 * C328 + C5155 * C319 - C32167 * C329 +
             C5156 * C320 - C32137 * C330) *
                C5157 +
            (C5154 * C333 - C32180 * C348 + C5155 * C334 - C32167 * C349 +
             C5156 * C335 - C32137 * C350) *
                C5151 +
            (C5889 - C5890 + C5891 - C5892 + C5893 - C5894) * C5158 +
            (C5895 - C5896 + C5897 - C5898 + C5899 - C5900) * C5152 +
            (C5901 - C5902 + C5903 - C5904 + C5905 - C5906) * C5159 +
            (C5907 - C5908 + C5909 - C5910 + C5911 - C5912) * C32148) *
               C31876 * C531) *
              C440 +
          (((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C5157 +
            (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C5151 +
            (C5284 - C5283 + C5286 - C5285 + C5288 - C5287) * C5158 +
            (C5290 - C5289 + C5292 - C5291 + C5294 - C5293) * C5152 +
            (C5295 - C5296 + C5297 - C5298 + C5299 - C5300) * C5159 +
            (C5301 - C5302 + C5303 - C5304 + C5305 - C5306) * C32148) *
               C31876 * C530 +
           ((C5890 - C5889 + C5892 - C5891 + C5894 - C5893) * C5157 +
            (C5896 - C5895 + C5898 - C5897 + C5900 - C5899) * C5151 +
            (C5902 - C5901 + C5904 - C5903 + C5906 - C5905) * C5158 +
            (C5908 - C5907 + C5910 - C5909 + C5912 - C5911) * C5152 +
            (C32180 * C1559 - C5154 * C1556 + C32167 * C1560 - C5155 * C1557 +
             C32137 * C1561 - C5156 * C1558) *
                C5159 +
            (C32180 * C1565 - C5154 * C1562 + C32167 * C1566 - C5155 * C1563 +
             C32137 * C1567 - C5156 * C1564) *
                C32148) *
               C31876 * C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C5981 +
            (C31772 * C140 - C5980 * C131) * C5975 + (C6057 - C6058) * C5982 +
            (C6059 - C6060) * C5976 + C6077 * C5983 + C6078 * C5977 +
            C6079 * C5984 + C6080 * C5978 + C6081 * C5985 + C6082 * C5979) *
               C31876 * C530 +
           ((C5980 * C318 - C31772 * C328) * C5981 +
            (C5980 * C333 - C31772 * C348) * C5975 + (C6431 - C6432) * C5982 +
            (C6433 - C6434) * C5976 + (C6435 - C6436) * C5983 +
            (C6437 - C6438) * C5977 + (C6439 - C6440) * C5984 +
            (C6441 - C6442) * C5978 + (C6443 - C6444) * C5985 +
            (C6445 - C6446) * C5979) *
               C31876 * C531) *
              C440 +
          (((C6058 - C6057) * C5981 + (C6060 - C6059) * C5975 +
            (C6062 - C6061) * C5982 + (C6064 - C6063) * C5976 +
            (C6066 - C6065) * C5983 + (C6068 - C6067) * C5977 +
            (C6070 - C6069) * C5984 + (C6072 - C6071) * C5978 +
            (C6073 - C6074) * C5985 + (C6075 - C6076) * C5979) *
               C31876 * C530 +
           ((C6432 - C6431) * C5981 + (C6434 - C6433) * C5975 +
            (C6436 - C6435) * C5982 + (C6438 - C6437) * C5976 +
            (C6440 - C6439) * C5983 + (C6442 - C6441) * C5977 +
            (C6444 - C6443) * C5984 + (C6446 - C6445) * C5978 +
            (C31772 * C6427 - C5980 * C6426) * C5985 +
            (C31772 * C6429 - C5980 * C6428) * C5979) *
               C31876 * C531) *
              C441) *
         C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
            C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
            C105 * C130 - C117 * C123) *
               C118 +
           (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
            C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
            C105 * C144 - C117 * C135) *
               C31864) *
              C31876 * C31835 * C209 +
          ((C113 * C213 - C101 * C223 + C114 * C214 - C102 * C224 +
            C115 * C215 - C103 * C225 + C116 * C216 - C104 * C226 +
            C117 * C217 - C105 * C227) *
               C118 +
           (C113 * C228 - C101 * C243 + C114 * C229 - C102 * C244 +
            C115 * C230 - C103 * C245 + C116 * C231 - C104 * C246 +
            C117 * C232 - C105 * C247) *
               C31864) *
              C31876 * C31835 * C210 +
          ((C101 * C233 - C113 * C218 + C102 * C234 - C114 * C219 +
            C103 * C235 - C115 * C220 + C104 * C236 - C116 * C221 +
            C105 * C237 - C117 * C222) *
               C118 +
           (C101 * C248 - C113 * C238 + C102 * C249 - C114 * C239 +
            C103 * C250 - C115 * C240 + C104 * C251 - C116 * C241 +
            C105 * C252 - C117 * C242) *
               C31864) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
            C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
            C105 * C130 - C117 * C123) *
               C118 +
           (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
            C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
            C105 * C144 - C117 * C135) *
               C31864) *
              C31876 * C31835 * C31821 * C110 +
          ((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
            C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
            C117 * C124 - C105 * C136) *
               C118 +
           (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
            C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
            C117 * C137 - C105 * C145) *
               C31864) *
              C31876 * C31835 * C31821 * C111 +
          ((C101 * C128 - C113 * C121 + C102 * C129 - C114 * C122 +
            C103 * C130 - C115 * C123 + C104 * C136 - C116 * C124 +
            C105 * C138 - C117 * C125) *
               C118 +
           (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C134 +
            C103 * C144 - C115 * C135 + C104 * C145 - C116 * C137 +
            C105 * C146 - C117 * C139) *
               C31864) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
            C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
            C105 * C130 - C117 * C123) *
               C118 +
           (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
            C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
            C105 * C144 - C117 * C135) *
               C31864) *
              C31876 * C315 +
          ((C113 * C318 - C101 * C328 + C114 * C319 - C102 * C329 +
            C115 * C320 - C103 * C330 + C116 * C321 - C104 * C331 +
            C117 * C322 - C105 * C332) *
               C118 +
           (C113 * C333 - C101 * C348 + C114 * C334 - C102 * C349 +
            C115 * C335 - C103 * C350 + C116 * C336 - C104 * C351 +
            C117 * C337 - C105 * C352) *
               C31864) *
              C31876 * C316 +
          ((C101 * C338 - C113 * C323 + C102 * C339 - C114 * C324 +
            C103 * C340 - C115 * C325 + C104 * C341 - C116 * C326 +
            C105 * C342 - C117 * C327) *
               C118 +
           (C101 * C353 - C113 * C343 + C102 * C354 - C114 * C344 +
            C103 * C355 - C115 * C345 + C104 * C356 - C116 * C346 +
            C105 * C357 - C117 * C347) *
               C31864) *
              C31876 * C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
            C32137 * C128 - C756 * C121) *
               C757 +
           (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
            C32137 * C142 - C756 * C133) *
               C32183 +
           (C748 * C223 - C754 * C213 + C749 * C224 - C755 * C214 +
            C32137 * C225 - C756 * C215) *
               C758 +
           (C748 * C243 - C754 * C228 + C749 * C244 - C755 * C229 +
            C32137 * C245 - C756 * C230) *
               C32171 +
           (C748 * C233 - C754 * C218 + C749 * C234 - C755 * C219 +
            C32137 * C235 - C756 * C220) *
               C759 +
           (C748 * C248 - C754 * C238 + C749 * C249 - C755 * C239 +
            C32137 * C250 - C756 * C240) *
               C32148) *
              C31876 * C31835 * C31821 * C110 +
          ((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
            C756 * C122 - C32137 * C129) *
               C757 +
           (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
            C756 * C134 - C32137 * C143) *
               C32183 +
           (C754 * C214 - C748 * C224 + C755 * C215 - C749 * C225 +
            C756 * C216 - C32137 * C226) *
               C758 +
           (C754 * C229 - C748 * C244 + C755 * C230 - C749 * C245 +
            C756 * C231 - C32137 * C246) *
               C32171 +
           (C754 * C219 - C748 * C234 + C755 * C220 - C749 * C235 +
            C756 * C221 - C32137 * C236) *
               C759 +
           (C754 * C239 - C748 * C249 + C755 * C240 - C749 * C250 +
            C756 * C241 - C32137 * C251) *
               C32148) *
              C31876 * C31835 * C31821 * C111 +
          ((C748 * C128 - C754 * C121 + C749 * C129 - C755 * C122 +
            C32137 * C130 - C756 * C123) *
               C757 +
           (C748 * C142 - C754 * C133 + C749 * C143 - C755 * C134 +
            C32137 * C144 - C756 * C135) *
               C32183 +
           (C748 * C225 - C754 * C215 + C749 * C226 - C755 * C216 +
            C32137 * C227 - C756 * C217) *
               C758 +
           (C748 * C245 - C754 * C230 + C749 * C246 - C755 * C231 +
            C32137 * C247 - C756 * C232) *
               C32171 +
           (C748 * C235 - C754 * C220 + C749 * C236 - C755 * C221 +
            C32137 * C237 - C756 * C222) *
               C759 +
           (C748 * C250 - C754 * C240 + C749 * C251 - C755 * C241 +
            C32137 * C252 - C756 * C242) *
               C32148) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
            C32137 * C128 - C756 * C121) *
               C757 +
           (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
            C32137 * C142 - C756 * C133) *
               C32183 +
           (C895 - C896 + C897 - C898 + C899 - C900) * C758 +
           (C901 - C902 + C903 - C904 + C905 - C906) * C32171 + C939 * C759 +
           C940 * C32148) *
              C31876 * C31835 * C209 +
          ((C896 - C895 + C898 - C897 + C900 - C899) * C757 +
           (C902 - C901 + C904 - C903 + C906 - C905) * C32183 +
           (C908 - C907 + C910 - C909 + C912 - C911) * C758 +
           (C914 - C913 + C916 - C915 + C918 - C917) * C32171 +
           (C919 - C920 + C921 - C922 + C923 - C924) * C759 +
           (C925 - C926 + C927 - C928 + C929 - C930) * C32148) *
              C31876 * C31835 * C210 +
          (C939 * C757 + C940 * C32183 +
           (C920 - C919 + C922 - C921 + C924 - C923) * C758 +
           (C926 - C925 + C928 - C927 + C930 - C929) * C32171 +
           (C748 * C882 - C754 * C873 + C749 * C883 - C755 * C874 +
            C32137 * C884 - C756 * C875) *
               C759 +
           (C748 * C891 - C754 * C885 + C749 * C892 - C755 * C886 +
            C32137 * C893 - C756 * C887) *
               C32148) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
            C32137 * C128 - C756 * C121) *
               C757 +
           (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
            C32137 * C142 - C756 * C133) *
               C32183 +
           (C895 - C896 + C897 - C898 + C899 - C900) * C758 +
           (C901 - C902 + C903 - C904 + C905 - C906) * C32171 + C939 * C759 +
           C940 * C32148) *
              C31876 * C315 +
          ((C754 * C318 - C748 * C328 + C755 * C319 - C749 * C329 +
            C756 * C320 - C32137 * C330) *
               C757 +
           (C754 * C333 - C748 * C348 + C755 * C334 - C749 * C349 +
            C756 * C335 - C32137 * C350) *
               C32183 +
           (C754 * C618 - C748 * C623 + C755 * C619 - C749 * C624 +
            C756 * C620 - C32137 * C625) *
               C758 +
           (C754 * C628 - C748 * C633 + C755 * C629 - C749 * C634 +
            C756 * C630 - C32137 * C635) *
               C32171 +
           (C754 * C1050 - C748 * C1059 + C755 * C1051 - C749 * C1060 +
            C756 * C1052 - C32137 * C1061) *
               C759 +
           (C754 * C1062 - C748 * C1077 + C755 * C1063 - C749 * C1078 +
            C756 * C1064 - C32137 * C1079) *
               C32148) *
              C31876 * C316 +
          ((C748 * C338 - C754 * C323 + C749 * C339 - C755 * C324 +
            C32137 * C340 - C756 * C325) *
               C757 +
           (C748 * C353 - C754 * C343 + C749 * C354 - C755 * C344 +
            C32137 * C355 - C756 * C345) *
               C32183 +
           (C748 * C1065 - C754 * C1053 + C749 * C1066 - C755 * C1054 +
            C32137 * C1067 - C756 * C1055) *
               C758 +
           (C748 * C1080 - C754 * C1068 + C749 * C1081 - C755 * C1069 +
            C32137 * C1082 - C756 * C1070) *
               C32171 +
           (C748 * C1071 - C754 * C1056 + C749 * C1072 - C755 * C1057 +
            C32137 * C1073 - C756 * C1058) *
               C759 +
           (C748 * C1083 - C754 * C1074 + C749 * C1084 - C755 * C1075 +
            C32137 * C1085 - C756 * C1076) *
               C32148) *
              C31876 * C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
            C32137 * C128 - C5156 * C121) *
               C5157 +
           (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
            C32137 * C142 - C5156 * C133) *
               C5151 +
           (C32180 * C223 - C5154 * C213 + C32167 * C224 - C5155 * C214 +
            C32137 * C225 - C5156 * C215) *
               C5158 +
           (C32180 * C243 - C5154 * C228 + C32167 * C244 - C5155 * C229 +
            C32137 * C245 - C5156 * C230) *
               C5152 +
           (C32180 * C233 - C5154 * C218 + C32167 * C234 - C5155 * C219 +
            C32137 * C235 - C5156 * C220) *
               C5159 +
           (C32180 * C248 - C5154 * C238 + C32167 * C249 - C5155 * C239 +
            C32137 * C250 - C5156 * C240) *
               C32148) *
              C31876 * C31835 * C31821 * C110 +
          ((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
            C5156 * C122 - C32137 * C129) *
               C5157 +
           (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
            C5156 * C134 - C32137 * C143) *
               C5151 +
           (C5154 * C214 - C32180 * C224 + C5155 * C215 - C32167 * C225 +
            C5156 * C216 - C32137 * C226) *
               C5158 +
           (C5154 * C229 - C32180 * C244 + C5155 * C230 - C32167 * C245 +
            C5156 * C231 - C32137 * C246) *
               C5152 +
           (C5154 * C219 - C32180 * C234 + C5155 * C220 - C32167 * C235 +
            C5156 * C221 - C32137 * C236) *
               C5159 +
           (C5154 * C239 - C32180 * C249 + C5155 * C240 - C32167 * C250 +
            C5156 * C241 - C32137 * C251) *
               C32148) *
              C31876 * C31835 * C31821 * C111 +
          ((C32180 * C128 - C5154 * C121 + C32167 * C129 - C5155 * C122 +
            C32137 * C130 - C5156 * C123) *
               C5157 +
           (C32180 * C142 - C5154 * C133 + C32167 * C143 - C5155 * C134 +
            C32137 * C144 - C5156 * C135) *
               C5151 +
           (C32180 * C225 - C5154 * C215 + C32167 * C226 - C5155 * C216 +
            C32137 * C227 - C5156 * C217) *
               C5158 +
           (C32180 * C245 - C5154 * C230 + C32167 * C246 - C5155 * C231 +
            C32137 * C247 - C5156 * C232) *
               C5152 +
           (C32180 * C235 - C5154 * C220 + C32167 * C236 - C5155 * C221 +
            C32137 * C237 - C5156 * C222) *
               C5159 +
           (C32180 * C250 - C5154 * C240 + C32167 * C251 - C5155 * C241 +
            C32137 * C252 - C5156 * C242) *
               C32148) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
            C32137 * C128 - C5156 * C121) *
               C5157 +
           (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
            C32137 * C142 - C5156 * C133) *
               C5151 +
           (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C5158 +
           (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C5152 +
           C5315 * C5159 + C5316 * C32148) *
              C31876 * C31835 * C209 +
          ((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C5157 +
           (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C5151 +
           (C5284 - C5283 + C5286 - C5285 + C5288 - C5287) * C5158 +
           (C5290 - C5289 + C5292 - C5291 + C5294 - C5293) * C5152 +
           (C5295 - C5296 + C5297 - C5298 + C5299 - C5300) * C5159 +
           (C5301 - C5302 + C5303 - C5304 + C5305 - C5306) * C32148) *
              C31876 * C31835 * C210 +
          (C5315 * C5157 + C5316 * C5151 +
           (C5296 - C5295 + C5298 - C5297 + C5300 - C5299) * C5158 +
           (C5302 - C5301 + C5304 - C5303 + C5306 - C5305) * C5152 +
           (C32180 * C882 - C5154 * C873 + C32167 * C883 - C5155 * C874 +
            C32137 * C884 - C5156 * C875) *
               C5159 +
           (C32180 * C891 - C5154 * C885 + C32167 * C892 - C5155 * C886 +
            C32137 * C893 - C5156 * C887) *
               C32148) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
            C32137 * C128 - C5156 * C121) *
               C5157 +
           (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
            C32137 * C142 - C5156 * C133) *
               C5151 +
           (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C5158 +
           (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C5152 +
           C5315 * C5159 + C5316 * C32148) *
              C31876 * C315 +
          ((C5154 * C318 - C32180 * C328 + C5155 * C319 - C32167 * C329 +
            C5156 * C320 - C32137 * C330) *
               C5157 +
           (C5154 * C333 - C32180 * C348 + C5155 * C334 - C32167 * C349 +
            C5156 * C335 - C32137 * C350) *
               C5151 +
           (C5154 * C618 - C32180 * C623 + C5155 * C619 - C32167 * C624 +
            C5156 * C620 - C32137 * C625) *
               C5158 +
           (C5154 * C628 - C32180 * C633 + C5155 * C629 - C32167 * C634 +
            C5156 * C630 - C32137 * C635) *
               C5152 +
           (C5154 * C1050 - C32180 * C1059 + C5155 * C1051 - C32167 * C1060 +
            C5156 * C1052 - C32137 * C1061) *
               C5159 +
           (C5154 * C1062 - C32180 * C1077 + C5155 * C1063 - C32167 * C1078 +
            C5156 * C1064 - C32137 * C1079) *
               C32148) *
              C31876 * C316 +
          ((C32180 * C338 - C5154 * C323 + C32167 * C339 - C5155 * C324 +
            C32137 * C340 - C5156 * C325) *
               C5157 +
           (C32180 * C353 - C5154 * C343 + C32167 * C354 - C5155 * C344 +
            C32137 * C355 - C5156 * C345) *
               C5151 +
           (C32180 * C1065 - C5154 * C1053 + C32167 * C1066 - C5155 * C1054 +
            C32137 * C1067 - C5156 * C1055) *
               C5158 +
           (C32180 * C1080 - C5154 * C1068 + C32167 * C1081 - C5155 * C1069 +
            C32137 * C1082 - C5156 * C1070) *
               C5152 +
           (C32180 * C1071 - C5154 * C1056 + C32167 * C1072 - C5155 * C1057 +
            C32137 * C1073 - C5156 * C1058) *
               C5159 +
           (C32180 * C1083 - C5154 * C1074 + C32167 * C1084 - C5155 * C1075 +
            C32137 * C1085 - C5156 * C1076) *
               C32148) *
              C31876 * C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C31772 * C126 - C5980 * C119) * C5981 +
           (C31772 * C140 - C5980 * C131) * C5975 +
           (C31772 * C223 - C5980 * C213) * C5982 +
           (C31772 * C243 - C5980 * C228) * C5976 +
           (C31772 * C233 - C5980 * C218) * C5983 +
           (C31772 * C248 - C5980 * C238) * C5977 +
           (C31772 * C876 - C5980 * C870) * C5984 +
           (C31772 * C888 - C5980 * C879) * C5978 +
           (C31772 * C882 - C5980 * C873) * C5985 +
           (C31772 * C891 - C5980 * C885) * C5979) *
              C31876 * C31835 * C31821 * C110 +
          ((C5980 * C120 - C31772 * C127) * C5981 +
           (C5980 * C132 - C31772 * C141) * C5975 +
           (C5980 * C214 - C31772 * C224) * C5982 +
           (C5980 * C229 - C31772 * C244) * C5976 +
           (C5980 * C219 - C31772 * C234) * C5983 +
           (C5980 * C239 - C31772 * C249) * C5977 +
           (C5980 * C871 - C31772 * C877) * C5984 +
           (C5980 * C880 - C31772 * C889) * C5978 +
           (C5980 * C874 - C31772 * C883) * C5985 +
           (C5980 * C886 - C31772 * C892) * C5979) *
              C31876 * C31835 * C31821 * C111 +
          ((C31772 * C128 - C5980 * C121) * C5981 +
           (C31772 * C142 - C5980 * C133) * C5975 +
           (C31772 * C225 - C5980 * C215) * C5982 +
           (C31772 * C245 - C5980 * C230) * C5976 +
           (C31772 * C235 - C5980 * C220) * C5983 +
           (C31772 * C250 - C5980 * C240) * C5977 +
           (C31772 * C878 - C5980 * C872) * C5984 +
           (C31772 * C890 - C5980 * C881) * C5978 +
           (C31772 * C884 - C5980 * C875) * C5985 +
           (C31772 * C893 - C5980 * C887) * C5979) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C31772 * C126 - C5980 * C119) * C5981 +
           (C31772 * C140 - C5980 * C131) * C5975 + (C6057 - C6058) * C5982 +
           (C6059 - C6060) * C5976 + C6077 * C5983 + C6078 * C5977 +
           C6079 * C5984 + C6080 * C5978 + C6081 * C5985 + C6082 * C5979) *
              C31876 * C31835 * C209 +
          ((C6058 - C6057) * C5981 + (C6060 - C6059) * C5975 +
           (C6062 - C6061) * C5982 + (C6064 - C6063) * C5976 +
           (C6066 - C6065) * C5983 + (C6068 - C6067) * C5977 +
           (C6070 - C6069) * C5984 + (C6072 - C6071) * C5978 +
           (C6073 - C6074) * C5985 + (C6075 - C6076) * C5979) *
              C31876 * C31835 * C210 +
          (C6077 * C5981 + C6078 * C5975 + C6079 * C5982 + C6080 * C5976 +
           C6081 * C5983 + C6082 * C5977 + (C6074 - C6073) * C5984 +
           (C6076 - C6075) * C5978 + (C31772 * C6052 - C5980 * C6049) * C5985 +
           (C31772 * C6055 - C5980 * C6053) * C5979) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31772 * C126 - C5980 * C119) * C5981 +
           (C31772 * C140 - C5980 * C131) * C5975 + (C6057 - C6058) * C5982 +
           (C6059 - C6060) * C5976 + C6077 * C5983 + C6078 * C5977 +
           C6079 * C5984 + C6080 * C5978 + C6081 * C5985 + C6082 * C5979) *
              C31876 * C315 +
          ((C5980 * C318 - C31772 * C328) * C5981 +
           (C5980 * C333 - C31772 * C348) * C5975 +
           (C5980 * C618 - C31772 * C623) * C5982 +
           (C5980 * C628 - C31772 * C633) * C5976 +
           (C5980 * C1050 - C31772 * C1059) * C5983 +
           (C5980 * C1062 - C31772 * C1077) * C5977 +
           (C5980 * C1556 - C31772 * C1559) * C5984 +
           (C5980 * C1562 - C31772 * C1565) * C5978 +
           (C5980 * C6144 - C31772 * C6147) * C5985 +
           (C5980 * C6148 - C31772 * C6153) * C5979) *
              C31876 * C316 +
          ((C31772 * C338 - C5980 * C323) * C5981 +
           (C31772 * C353 - C5980 * C343) * C5975 +
           (C31772 * C1065 - C5980 * C1053) * C5982 +
           (C31772 * C1080 - C5980 * C1068) * C5976 +
           (C31772 * C1071 - C5980 * C1056) * C5983 +
           (C31772 * C1083 - C5980 * C1074) * C5977 +
           (C31772 * C6149 - C5980 * C6145) * C5984 +
           (C31772 * C6154 - C5980 * C6150) * C5978 +
           (C31772 * C6151 - C5980 * C6146) * C5985 +
           (C31772 * C6155 - C5980 * C6152) * C5979) *
              C31876 * C317) *
         C31821 * C31809) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C31864) *
               C31876 * C530 +
           ((C113 * C318 - C101 * C328 + C114 * C319 - C102 * C329 +
             C115 * C320 - C103 * C330 + C116 * C321 - C104 * C331 +
             C117 * C322 - C105 * C332) *
                C118 +
            (C113 * C333 - C101 * C348 + C114 * C334 - C102 * C349 +
             C115 * C335 - C103 * C350 + C116 * C336 - C104 * C351 +
             C117 * C337 - C105 * C352) *
                C31864) *
               C31876 * C531) *
              C31821 * C442 +
          (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
             C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
             C117 * C124 - C105 * C136) *
                C118 +
            (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
             C117 * C137 - C105 * C145) *
                C31864) *
               C31876 * C530 +
           ((C101 * C329 - C113 * C319 + C102 * C330 - C114 * C320 +
             C103 * C331 - C115 * C321 + C104 * C332 - C116 * C322 +
             C105 * C533 - C117 * C532) *
                C118 +
            (C101 * C349 - C113 * C334 + C102 * C350 - C114 * C335 +
             C103 * C351 - C115 * C336 + C104 * C352 - C116 * C337 +
             C105 * C535 - C117 * C534) *
                C31864) *
               C31876 * C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
             C32137 * C128 - C756 * C121) *
                C757 +
            (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
             C32137 * C142 - C756 * C133) *
                C32183 +
            (C895 - C896 + C897 - C898 + C899 - C900) * C758 +
            (C901 - C902 + C903 - C904 + C905 - C906) * C32171 + C939 * C759 +
            C940 * C32148) *
               C31876 * C530 +
           ((C754 * C318 - C748 * C328 + C755 * C319 - C749 * C329 +
             C756 * C320 - C32137 * C330) *
                C757 +
            (C754 * C333 - C748 * C348 + C755 * C334 - C749 * C349 +
             C756 * C335 - C32137 * C350) *
                C32183 +
            (C754 * C618 - C748 * C623 + C755 * C619 - C749 * C624 +
             C756 * C620 - C32137 * C625) *
                C758 +
            (C754 * C628 - C748 * C633 + C755 * C629 - C749 * C634 +
             C756 * C630 - C32137 * C635) *
                C32171 +
            (C754 * C1050 - C748 * C1059 + C755 * C1051 - C749 * C1060 +
             C756 * C1052 - C32137 * C1061) *
                C759 +
            (C754 * C1062 - C748 * C1077 + C755 * C1063 - C749 * C1078 +
             C756 * C1064 - C32137 * C1079) *
                C32148) *
               C31876 * C531) *
              C31821 * C442 +
          (((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
             C756 * C122 - C32137 * C129) *
                C757 +
            (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
             C756 * C134 - C32137 * C143) *
                C32183 +
            (C1237 - C1238 + C1239 - C1240 + C1241 - C1242) * C758 +
            (C1243 - C1244 + C1245 - C1246 + C1247 - C1248) * C32171 +
            (C1249 - C1250 + C1251 - C1252 + C1253 - C1254) * C759 +
            (C1255 - C1256 + C1257 - C1258 + C1259 - C1260) * C32148) *
               C31876 * C530 +
           ((C748 * C329 - C754 * C319 + C749 * C330 - C755 * C320 +
             C32137 * C331 - C756 * C321) *
                C757 +
            (C748 * C349 - C754 * C334 + C749 * C350 - C755 * C335 +
             C32137 * C351 - C756 * C336) *
                C32183 +
            (C748 * C624 - C754 * C619 + C749 * C625 - C755 * C620 +
             C32137 * C626 - C756 * C621) *
                C758 +
            (C748 * C634 - C754 * C629 + C749 * C635 - C755 * C630 +
             C32137 * C636 - C756 * C631) *
                C32171 +
            (C748 * C1060 - C754 * C1051 + C749 * C1061 - C755 * C1052 +
             C32137 * C1407 - C756 * C1406) *
                C759 +
            (C748 * C1078 - C754 * C1063 + C749 * C1079 - C755 * C1064 +
             C32137 * C1409 - C756 * C1408) *
                C32148) *
               C31876 * C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
             C32137 * C128 - C5156 * C121) *
                C5157 +
            (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
             C32137 * C142 - C5156 * C133) *
                C5151 +
            (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C5158 +
            (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C5152 +
            C5315 * C5159 + C5316 * C32148) *
               C31876 * C530 +
           ((C5154 * C318 - C32180 * C328 + C5155 * C319 - C32167 * C329 +
             C5156 * C320 - C32137 * C330) *
                C5157 +
            (C5154 * C333 - C32180 * C348 + C5155 * C334 - C32167 * C349 +
             C5156 * C335 - C32137 * C350) *
                C5151 +
            (C5154 * C618 - C32180 * C623 + C5155 * C619 - C32167 * C624 +
             C5156 * C620 - C32137 * C625) *
                C5158 +
            (C5154 * C628 - C32180 * C633 + C5155 * C629 - C32167 * C634 +
             C5156 * C630 - C32137 * C635) *
                C5152 +
            (C5154 * C1050 - C32180 * C1059 + C5155 * C1051 - C32167 * C1060 +
             C5156 * C1052 - C32137 * C1061) *
                C5159 +
            (C5154 * C1062 - C32180 * C1077 + C5155 * C1063 - C32167 * C1078 +
             C5156 * C1064 - C32137 * C1079) *
                C32148) *
               C31876 * C531) *
              C31821 * C442 +
          (((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
             C5156 * C122 - C32137 * C129) *
                C5157 +
            (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
             C5156 * C134 - C32137 * C143) *
                C5151 +
            (C5573 - C5574 + C5575 - C5576 + C5577 - C5578) * C5158 +
            (C5579 - C5580 + C5581 - C5582 + C5583 - C5584) * C5152 +
            (C5585 - C5586 + C5587 - C5588 + C5589 - C5590) * C5159 +
            (C5591 - C5592 + C5593 - C5594 + C5595 - C5596) * C32148) *
               C31876 * C530 +
           ((C32180 * C329 - C5154 * C319 + C32167 * C330 - C5155 * C320 +
             C32137 * C331 - C5156 * C321) *
                C5157 +
            (C32180 * C349 - C5154 * C334 + C32167 * C350 - C5155 * C335 +
             C32137 * C351 - C5156 * C336) *
                C5151 +
            (C32180 * C624 - C5154 * C619 + C32167 * C625 - C5155 * C620 +
             C32137 * C626 - C5156 * C621) *
                C5158 +
            (C32180 * C634 - C5154 * C629 + C32167 * C635 - C5155 * C630 +
             C32137 * C636 - C5156 * C631) *
                C5152 +
            (C32180 * C1060 - C5154 * C1051 + C32167 * C1061 - C5155 * C1052 +
             C32137 * C1407 - C5156 * C1406) *
                C5159 +
            (C32180 * C1078 - C5154 * C1063 + C32167 * C1079 - C5155 * C1064 +
             C32137 * C1409 - C5156 * C1408) *
                C32148) *
               C31876 * C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C31772 * C126 - C5980 * C119) * C5981 +
            (C31772 * C140 - C5980 * C131) * C5975 + (C6057 - C6058) * C5982 +
            (C6059 - C6060) * C5976 + C6077 * C5983 + C6078 * C5977 +
            C6079 * C5984 + C6080 * C5978 + C6081 * C5985 + C6082 * C5979) *
               C31876 * C530 +
           ((C5980 * C318 - C31772 * C328) * C5981 +
            (C5980 * C333 - C31772 * C348) * C5975 +
            (C5980 * C618 - C31772 * C623) * C5982 +
            (C5980 * C628 - C31772 * C633) * C5976 +
            (C5980 * C1050 - C31772 * C1059) * C5983 +
            (C5980 * C1062 - C31772 * C1077) * C5977 +
            (C5980 * C1556 - C31772 * C1559) * C5984 +
            (C5980 * C1562 - C31772 * C1565) * C5978 +
            (C5980 * C6144 - C31772 * C6147) * C5985 +
            (C5980 * C6148 - C31772 * C6153) * C5979) *
               C31876 * C531) *
              C31821 * C442 +
          (((C5980 * C120 - C31772 * C127) * C5981 +
            (C5980 * C132 - C31772 * C141) * C5975 + (C6243 - C6244) * C5982 +
            (C6245 - C6246) * C5976 + (C6247 - C6248) * C5983 +
            (C6249 - C6250) * C5977 + (C6251 - C6252) * C5984 +
            (C6253 - C6254) * C5978 + (C6255 - C6256) * C5985 +
            (C6257 - C6258) * C5979) *
               C31876 * C530 +
           ((C31772 * C329 - C5980 * C319) * C5981 +
            (C31772 * C349 - C5980 * C334) * C5975 +
            (C31772 * C624 - C5980 * C619) * C5982 +
            (C31772 * C634 - C5980 * C629) * C5976 +
            (C31772 * C1060 - C5980 * C1051) * C5983 +
            (C31772 * C1078 - C5980 * C1063) * C5977 +
            (C31772 * C1560 - C5980 * C1557) * C5984 +
            (C31772 * C1566 - C5980 * C1563) * C5978 +
            (C31772 * C6341 - C5980 * C6340) * C5985 +
            (C31772 * C6343 - C5980 * C6342) * C5979) *
               C31876 * C531) *
              C31821 * C443)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
            C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
            C105 * C130 - C117 * C123) *
               C118 +
           (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
            C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
            C105 * C144 - C117 * C135) *
               C31864) *
              C31876 * C31835 * C31821 * C110 +
          ((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
            C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
            C117 * C124 - C105 * C136) *
               C118 +
           (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
            C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
            C117 * C137 - C105 * C145) *
               C31864) *
              C31876 * C31835 * C31821 * C111 +
          ((C101 * C128 - C113 * C121 + C102 * C129 - C114 * C122 +
            C103 * C130 - C115 * C123 + C104 * C136 - C116 * C124 +
            C105 * C138 - C117 * C125) *
               C118 +
           (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C134 +
            C103 * C144 - C115 * C135 + C104 * C145 - C116 * C137 +
            C105 * C146 - C117 * C139) *
               C31864) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
            C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
            C105 * C130 - C117 * C123) *
               C118 +
           (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
            C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
            C105 * C144 - C117 * C135) *
               C31864) *
              C31876 * C31835 * C209 +
          ((C113 * C213 - C101 * C223 + C114 * C214 - C102 * C224 +
            C115 * C215 - C103 * C225 + C116 * C216 - C104 * C226 +
            C117 * C217 - C105 * C227) *
               C118 +
           (C113 * C228 - C101 * C243 + C114 * C229 - C102 * C244 +
            C115 * C230 - C103 * C245 + C116 * C231 - C104 * C246 +
            C117 * C232 - C105 * C247) *
               C31864) *
              C31876 * C31835 * C210 +
          ((C101 * C233 - C113 * C218 + C102 * C234 - C114 * C219 +
            C103 * C235 - C115 * C220 + C104 * C236 - C116 * C221 +
            C105 * C237 - C117 * C222) *
               C118 +
           (C101 * C248 - C113 * C238 + C102 * C249 - C114 * C239 +
            C103 * C250 - C115 * C240 + C104 * C251 - C116 * C241 +
            C105 * C252 - C117 * C242) *
               C31864) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
            C32137 * C128 - C756 * C121) *
               C757 +
           (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
            C32137 * C142 - C756 * C133) *
               C32183 +
           (C748 * C223 - C754 * C213 + C749 * C224 - C755 * C214 +
            C32137 * C225 - C756 * C215) *
               C758 +
           (C748 * C243 - C754 * C228 + C749 * C244 - C755 * C229 +
            C32137 * C245 - C756 * C230) *
               C32171 +
           (C748 * C233 - C754 * C218 + C749 * C234 - C755 * C219 +
            C32137 * C235 - C756 * C220) *
               C759 +
           (C748 * C248 - C754 * C238 + C749 * C249 - C755 * C239 +
            C32137 * C250 - C756 * C240) *
               C32148) *
              C31876 * C31835 * C31821 * C110 +
          ((C754 * C120 - C748 * C127 + C755 * C121 - C749 * C128 +
            C756 * C122 - C32137 * C129) *
               C757 +
           (C754 * C132 - C748 * C141 + C755 * C133 - C749 * C142 +
            C756 * C134 - C32137 * C143) *
               C32183 +
           (C754 * C214 - C748 * C224 + C755 * C215 - C749 * C225 +
            C756 * C216 - C32137 * C226) *
               C758 +
           (C754 * C229 - C748 * C244 + C755 * C230 - C749 * C245 +
            C756 * C231 - C32137 * C246) *
               C32171 +
           (C754 * C219 - C748 * C234 + C755 * C220 - C749 * C235 +
            C756 * C221 - C32137 * C236) *
               C759 +
           (C754 * C239 - C748 * C249 + C755 * C240 - C749 * C250 +
            C756 * C241 - C32137 * C251) *
               C32148) *
              C31876 * C31835 * C31821 * C111 +
          ((C748 * C128 - C754 * C121 + C749 * C129 - C755 * C122 +
            C32137 * C130 - C756 * C123) *
               C757 +
           (C748 * C142 - C754 * C133 + C749 * C143 - C755 * C134 +
            C32137 * C144 - C756 * C135) *
               C32183 +
           (C748 * C225 - C754 * C215 + C749 * C226 - C755 * C216 +
            C32137 * C227 - C756 * C217) *
               C758 +
           (C748 * C245 - C754 * C230 + C749 * C246 - C755 * C231 +
            C32137 * C247 - C756 * C232) *
               C32171 +
           (C748 * C235 - C754 * C220 + C749 * C236 - C755 * C221 +
            C32137 * C237 - C756 * C222) *
               C759 +
           (C748 * C250 - C754 * C240 + C749 * C251 - C755 * C241 +
            C32137 * C252 - C756 * C242) *
               C32148) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C748 * C126 - C754 * C119 + C749 * C127 - C755 * C120 +
            C32137 * C128 - C756 * C121) *
               C757 +
           (C748 * C140 - C754 * C131 + C749 * C141 - C755 * C132 +
            C32137 * C142 - C756 * C133) *
               C32183 +
           (C895 - C896 + C897 - C898 + C899 - C900) * C758 +
           (C901 - C902 + C903 - C904 + C905 - C906) * C32171 + C939 * C759 +
           C940 * C32148) *
              C31876 * C31835 * C209 +
          ((C896 - C895 + C898 - C897 + C900 - C899) * C757 +
           (C902 - C901 + C904 - C903 + C906 - C905) * C32183 +
           (C908 - C907 + C910 - C909 + C912 - C911) * C758 +
           (C914 - C913 + C916 - C915 + C918 - C917) * C32171 +
           (C919 - C920 + C921 - C922 + C923 - C924) * C759 +
           (C925 - C926 + C927 - C928 + C929 - C930) * C32148) *
              C31876 * C31835 * C210 +
          (C939 * C757 + C940 * C32183 +
           (C920 - C919 + C922 - C921 + C924 - C923) * C758 +
           (C926 - C925 + C928 - C927 + C930 - C929) * C32171 +
           (C748 * C882 - C754 * C873 + C749 * C883 - C755 * C874 +
            C32137 * C884 - C756 * C875) *
               C759 +
           (C748 * C891 - C754 * C885 + C749 * C892 - C755 * C886 +
            C32137 * C893 - C756 * C887) *
               C32148) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
            C32137 * C128 - C5156 * C121) *
               C5157 +
           (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
            C32137 * C142 - C5156 * C133) *
               C5151 +
           (C32180 * C223 - C5154 * C213 + C32167 * C224 - C5155 * C214 +
            C32137 * C225 - C5156 * C215) *
               C5158 +
           (C32180 * C243 - C5154 * C228 + C32167 * C244 - C5155 * C229 +
            C32137 * C245 - C5156 * C230) *
               C5152 +
           (C32180 * C233 - C5154 * C218 + C32167 * C234 - C5155 * C219 +
            C32137 * C235 - C5156 * C220) *
               C5159 +
           (C32180 * C248 - C5154 * C238 + C32167 * C249 - C5155 * C239 +
            C32137 * C250 - C5156 * C240) *
               C32148) *
              C31876 * C31835 * C31821 * C110 +
          ((C5154 * C120 - C32180 * C127 + C5155 * C121 - C32167 * C128 +
            C5156 * C122 - C32137 * C129) *
               C5157 +
           (C5154 * C132 - C32180 * C141 + C5155 * C133 - C32167 * C142 +
            C5156 * C134 - C32137 * C143) *
               C5151 +
           (C5154 * C214 - C32180 * C224 + C5155 * C215 - C32167 * C225 +
            C5156 * C216 - C32137 * C226) *
               C5158 +
           (C5154 * C229 - C32180 * C244 + C5155 * C230 - C32167 * C245 +
            C5156 * C231 - C32137 * C246) *
               C5152 +
           (C5154 * C219 - C32180 * C234 + C5155 * C220 - C32167 * C235 +
            C5156 * C221 - C32137 * C236) *
               C5159 +
           (C5154 * C239 - C32180 * C249 + C5155 * C240 - C32167 * C250 +
            C5156 * C241 - C32137 * C251) *
               C32148) *
              C31876 * C31835 * C31821 * C111 +
          ((C32180 * C128 - C5154 * C121 + C32167 * C129 - C5155 * C122 +
            C32137 * C130 - C5156 * C123) *
               C5157 +
           (C32180 * C142 - C5154 * C133 + C32167 * C143 - C5155 * C134 +
            C32137 * C144 - C5156 * C135) *
               C5151 +
           (C32180 * C225 - C5154 * C215 + C32167 * C226 - C5155 * C216 +
            C32137 * C227 - C5156 * C217) *
               C5158 +
           (C32180 * C245 - C5154 * C230 + C32167 * C246 - C5155 * C231 +
            C32137 * C247 - C5156 * C232) *
               C5152 +
           (C32180 * C235 - C5154 * C220 + C32167 * C236 - C5155 * C221 +
            C32137 * C237 - C5156 * C222) *
               C5159 +
           (C32180 * C250 - C5154 * C240 + C32167 * C251 - C5155 * C241 +
            C32137 * C252 - C5156 * C242) *
               C32148) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C32180 * C126 - C5154 * C119 + C32167 * C127 - C5155 * C120 +
            C32137 * C128 - C5156 * C121) *
               C5157 +
           (C32180 * C140 - C5154 * C131 + C32167 * C141 - C5155 * C132 +
            C32137 * C142 - C5156 * C133) *
               C5151 +
           (C5271 - C5272 + C5273 - C5274 + C5275 - C5276) * C5158 +
           (C5277 - C5278 + C5279 - C5280 + C5281 - C5282) * C5152 +
           C5315 * C5159 + C5316 * C32148) *
              C31876 * C31835 * C209 +
          ((C5272 - C5271 + C5274 - C5273 + C5276 - C5275) * C5157 +
           (C5278 - C5277 + C5280 - C5279 + C5282 - C5281) * C5151 +
           (C5284 - C5283 + C5286 - C5285 + C5288 - C5287) * C5158 +
           (C5290 - C5289 + C5292 - C5291 + C5294 - C5293) * C5152 +
           (C5295 - C5296 + C5297 - C5298 + C5299 - C5300) * C5159 +
           (C5301 - C5302 + C5303 - C5304 + C5305 - C5306) * C32148) *
              C31876 * C31835 * C210 +
          (C5315 * C5157 + C5316 * C5151 +
           (C5296 - C5295 + C5298 - C5297 + C5300 - C5299) * C5158 +
           (C5302 - C5301 + C5304 - C5303 + C5306 - C5305) * C5152 +
           (C32180 * C882 - C5154 * C873 + C32167 * C883 - C5155 * C874 +
            C32137 * C884 - C5156 * C875) *
               C5159 +
           (C32180 * C891 - C5154 * C885 + C32167 * C892 - C5155 * C886 +
            C32137 * C893 - C5156 * C887) *
               C32148) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C31772 * C126 - C5980 * C119) * C5981 +
           (C31772 * C140 - C5980 * C131) * C5975 +
           (C31772 * C223 - C5980 * C213) * C5982 +
           (C31772 * C243 - C5980 * C228) * C5976 +
           (C31772 * C233 - C5980 * C218) * C5983 +
           (C31772 * C248 - C5980 * C238) * C5977 +
           (C31772 * C876 - C5980 * C870) * C5984 +
           (C31772 * C888 - C5980 * C879) * C5978 +
           (C31772 * C882 - C5980 * C873) * C5985 +
           (C31772 * C891 - C5980 * C885) * C5979) *
              C31876 * C31835 * C31821 * C110 +
          ((C5980 * C120 - C31772 * C127) * C5981 +
           (C5980 * C132 - C31772 * C141) * C5975 +
           (C5980 * C214 - C31772 * C224) * C5982 +
           (C5980 * C229 - C31772 * C244) * C5976 +
           (C5980 * C219 - C31772 * C234) * C5983 +
           (C5980 * C239 - C31772 * C249) * C5977 +
           (C5980 * C871 - C31772 * C877) * C5984 +
           (C5980 * C880 - C31772 * C889) * C5978 +
           (C5980 * C874 - C31772 * C883) * C5985 +
           (C5980 * C886 - C31772 * C892) * C5979) *
              C31876 * C31835 * C31821 * C111 +
          ((C31772 * C128 - C5980 * C121) * C5981 +
           (C31772 * C142 - C5980 * C133) * C5975 +
           (C31772 * C225 - C5980 * C215) * C5982 +
           (C31772 * C245 - C5980 * C230) * C5976 +
           (C31772 * C235 - C5980 * C220) * C5983 +
           (C31772 * C250 - C5980 * C240) * C5977 +
           (C31772 * C878 - C5980 * C872) * C5984 +
           (C31772 * C890 - C5980 * C881) * C5978 +
           (C31772 * C884 - C5980 * C875) * C5985 +
           (C31772 * C893 - C5980 * C887) * C5979) *
              C31876 * C31835 * C31821 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C31772 * C126 - C5980 * C119) * C5981 +
           (C31772 * C140 - C5980 * C131) * C5975 + (C6057 - C6058) * C5982 +
           (C6059 - C6060) * C5976 + C6077 * C5983 + C6078 * C5977 +
           C6079 * C5984 + C6080 * C5978 + C6081 * C5985 + C6082 * C5979) *
              C31876 * C31835 * C209 +
          ((C6058 - C6057) * C5981 + (C6060 - C6059) * C5975 +
           (C6062 - C6061) * C5982 + (C6064 - C6063) * C5976 +
           (C6066 - C6065) * C5983 + (C6068 - C6067) * C5977 +
           (C6070 - C6069) * C5984 + (C6072 - C6071) * C5978 +
           (C6073 - C6074) * C5985 + (C6075 - C6076) * C5979) *
              C31876 * C31835 * C210 +
          (C6077 * C5981 + C6078 * C5975 + C6079 * C5982 + C6080 * C5976 +
           C6081 * C5983 + C6082 * C5977 + (C6074 - C6073) * C5984 +
           (C6076 - C6075) * C5978 + (C31772 * C6052 - C5980 * C6049) * C5985 +
           (C31772 * C6055 - C5980 * C6053) * C5979) *
              C31876 * C31835 * C211) *
         C31809) /
            (p * q * std::sqrt(p + q));
}
