/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ddsd_AB_zy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_2202_12_32(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C30825 = ae * be;
    const double C30824 = ae + be;
    const double C30823 = 0 * be;
    const double C30822 = yA - yB;
    const double C30842 = 0 * be;
    const double C30841 = zA - zB;
    const double C30882 = 0 * ae;
    const double C30877 = 0 * be;
    const double C30876 = 0 * be;
    const double C30927 = 0 * be;
    const double C30969 = 0 * ae;
    const double C30964 = 0 * be;
    const double C30963 = 0 * be;
    const double C31014 = 0 * be;
    const double C31075 = yP - yQ;
    const double C31074 = zP - zQ;
    const double C31073 = p + q;
    const double C31072 = p * q;
    const double C31084 = bs[4];
    const double C31082 = xP - xQ;
    const double C31089 = bs[5];
    const double C31096 = bs[6];
    const double C31104 = bs[7];
    const double C31124 = bs[3];
    const double C31545 = bs[2];
    const double C115 = bs[0];
    const double C31904 = xA - xB;
    const double C31939 = ce + de;
    const double C31938 = ce * de;
    const double C31937 = xC - xD;
    const double C31951 = yC - yD;
    const double C31965 = zC - zD;
    const double C30826 = std::pow(C30824, 2);
    const double C30860 = 2 * C30824;
    const double C30878 = C30823 / C30824;
    const double C30827 = C30825 * C30822;
    const double C30879 = C30822 * C30823;
    const double C31989 = std::pow(C30822, 2);
    const double C32047 = C30822 * be;
    const double C32045 = C30822 * ae;
    const double C30965 = C30842 / C30824;
    const double C30843 = C30825 * C30841;
    const double C30966 = C30841 * C30842;
    const double C32006 = std::pow(C30841, 2);
    const double C32089 = C30841 * be;
    const double C32087 = C30841 * ae;
    const double C30889 = C30882 / C30824;
    const double C30884 = C30822 * C30877;
    const double C30928 = C30927 / C30824;
    const double C30976 = C30969 / C30824;
    const double C30971 = C30841 * C30964;
    const double C31015 = C31014 / C30824;
    const double C31156 = C31075 * be;
    const double C31209 = std::pow(C31075, 2);
    const double C31077 = C31074 * C31075;
    const double C31115 = C31074 * ae;
    const double C31292 = std::pow(C31074, 2);
    const double C31076 = 2 * C31072;
    const double C31090 = std::pow(C31082, 2);
    const double C31907 = C31904 * be;
    const double C31906 = C31904 * ae;
    const double C31905 = std::pow(C31904, 2);
    const double C32244 = 2 * C31939;
    const double C32243 = std::pow(C31939, 2);
    const double C31940 = std::pow(C31937, 2);
    const double C32242 = C31937 * ce;
    const double C31952 = std::pow(C31951, 2);
    const double C32245 = C31951 * ce;
    const double C31966 = std::pow(C31965, 2);
    const double C32246 = C31965 * ce;
    const double C30828 = 2 * C30826;
    const double C136 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (zP - zQ) * (yP - yQ) * ae * be) /
                        C30826;
    const double C137 = ((xP - xQ) * std::pow(-(2 * p * q) / (p + q), 3) *
                         bs[3] * (zP - zQ) * (yP - yQ) * ae * be) /
                        C30826;
    const double C32240 = 4 * C30826;
    const double C31919 = std::pow(C30860, -1);
    const double C32241 = C30826 * C30860;
    const double C32237 = std::pow(C30860, -2);
    const double C30887 = C30879 / C30824;
    const double C31990 = C31989 * C30825;
    const double C32247 = std::pow(C32045, 2);
    const double C30974 = C30966 / C30824;
    const double C32007 = C32006 * C30825;
    const double C32249 = std::pow(C32087, 2);
    const double C30890 = C30884 / C30824;
    const double C30977 = C30971 / C30824;
    const double C31158 = C31084 * C31156;
    const double C31161 = C31089 * C31156;
    const double C31164 = C31124 * C31156;
    const double C31173 = C31096 * C31156;
    const double C31183 = C31104 * C31156;
    const double C31079 = C31077 * ae;
    const double C31117 = C31084 * C31115;
    const double C31120 = C31089 * C31115;
    const double C31125 = C31124 * C31115;
    const double C31134 = C31096 * C31115;
    const double C31144 = C31104 * C31115;
    const double C31078 = C31076 / C31073;
    const double C122 = (-(bs[1] * C31156 * C31076) / C31073) / C30824;
    const double C123 = (-(bs[1] * C31115 * C31076) / C31073) / C30824;
    const double C116 = -(C31082 * bs[1] * C31076) / C31073;
    const double C244 = -(C31075 * bs[1] * C31076) / C31073;
    const double C349 = -(C31074 * bs[1] * C31076) / C31073;
    const double C32230 = std::pow(C31906, 2);
    const double C31908 = C31905 * C30825;
    const double C32277 = std::pow(C32244, -2);
    const double C32275 = std::pow(C32244, -1);
    const double C31941 = C31940 * C31938;
    const double C31953 = C31952 * C31938;
    const double C31967 = C31966 * C31938;
    const double C30881 = C30823 / C30828;
    const double C30886 = C30877 / C30828;
    const double C30885 = C30876 / C30828;
    const double C30968 = C30842 / C30828;
    const double C30973 = C30964 / C30828;
    const double C30972 = C30963 / C30828;
    const double C32273 = C30824 * C32240;
    const double C32274 = 4 * C32241;
    const double C30891 = 0 - C30887;
    const double C31991 = C31990 / C30824;
    const double C30978 = 0 - C30974;
    const double C32008 = C32007 / C30824;
    const double C30894 = 0 - C30890;
    const double C30981 = 0 - C30977;
    const double C31080 = C31079 * be;
    const double C31083 = std::pow(C31078, 4);
    const double C31088 = -C31078;
    const double C31095 = std::pow(C31078, 6);
    const double C31544 = std::pow(C31078, 2);
    const double C124 =
        (C31082 * std::pow(C31078, 2) * bs[2] * C31156) / C30824;
    const double C125 =
        (C31082 * std::pow(C31078, 2) * bs[2] * C31115) / C30824;
    const double C254 =
        (C31075 * std::pow(C31078, 2) * bs[2] * C31156) / C30824 -
        (be * bs[1] * C31076) / (C31073 * C30824);
    const double C255 =
        (C31075 * std::pow(C31078, 2) * bs[2] * C31115) / C30824;
    const double C31909 = C31908 / C30824;
    const double C31942 = C31941 / C31939;
    const double C31954 = C31953 / C31939;
    const double C31968 = C31967 / C31939;
    const double C30895 = C30891 * ae;
    const double C31992 = -C31991;
    const double C30982 = C30978 * ae;
    const double C32009 = -C32008;
    const double C30898 = C30894 * ae;
    const double C30985 = C30981 * ae;
    const double C31085 = C31084 * C31080;
    const double C31092 = C31089 * C31080;
    const double C31097 = C31096 * C31080;
    const double C31106 = C31104 * C31080;
    const double C138 =
        (std::pow(-C31078, 3) * bs[3] * C31080 +
         std::pow(C31078, 4) * bs[4] * C31080 * std::pow(xP - xQ, 2)) /
        C30826;
    const double C31118 = C31083 * C31117;
    const double C31159 = C31083 * C31158;
    const double C31198 = C31084 * C31083;
    const double C31091 = std::pow(C31088, 5);
    const double C31103 = std::pow(C31088, 7);
    const double C31123 = std::pow(C31088, 3);
    const double C274 = (be * std::pow(C31078, 2) * bs[2] * C31074 * ae +
                         C31075 * std::pow(C31088, 3) * bs[3] * C31080) /
                        C30826;
    const double C31136 = C31095 * C31134;
    const double C31175 = C31095 * C31173;
    const double C31267 = C31096 * C31095;
    const double C31546 = C31545 * C31544;
    const double C359 = (C31074 * C31544 * C31545 * C31156) / C30824;
    const double C360 = (C31074 * C31544 * C31545 * C31115) / C30824 -
                        (ae * bs[1] * C31076) / (C31073 * C30824);
    const double C31910 = -C31909;
    const double C31943 = -C31942;
    const double C31955 = -C31954;
    const double C31969 = -C31968;
    const double C30899 = C30895 / C30824;
    const double C31993 = std::exp(C31992);
    const double C30986 = C30982 / C30824;
    const double C32010 = std::exp(C32009);
    const double C30902 = C30898 / C30824;
    const double C30989 = C30985 / C30824;
    const double C31086 = C31083 * C31085;
    const double C31098 = C31095 * C31097;
    const double C31128 = C31082 * C31118;
    const double C31207 = be * C31118;
    const double C31206 = C31075 * C31118;
    const double C31656 = C31074 * C31118;
    const double C31167 = C31082 * C31159;
    const double C31235 = C31075 * C31159;
    const double C31290 = ae * C31159;
    const double C31289 = C31074 * C31159;
    const double C31230 = C31082 * C31198;
    const double C31241 = C31075 * C31198;
    const double C31240 = C31198 * be;
    const double C31552 = C31198 * C31090;
    const double C31607 = C31198 * C31209;
    const double C31659 = C31198 * C31292;
    const double C31742 = C31074 * C31198;
    const double C31741 = C31198 * ae;
    const double C31093 = C31091 * C31092;
    const double C31121 = C31091 * C31120;
    const double C31162 = C31091 * C31161;
    const double C31200 = C31089 * C31091;
    const double C31107 = C31103 * C31106;
    const double C31146 = C31103 * C31144;
    const double C31185 = C31103 * C31183;
    const double C31126 = C31123 * C31125;
    const double C31165 = C31123 * C31164;
    const double C31228 = C31124 * C31123;
    const double C379 = (ae * std::pow(C31078, 2) * bs[2] * C31075 * be +
                         C31074 * C31123 * C31124 * C31080) /
                        C30826;
    const double C31137 = C31136 * C31090;
    const double C31143 = C31082 * C31136;
    const double C31322 = C31136 * C31209;
    const double C31336 = be * C31136;
    const double C31335 = C31075 * C31136;
    const double C31756 = C31074 * C31136;
    const double C31176 = C31175 * C31090;
    const double C31182 = C31082 * C31175;
    const double C31359 = C31075 * C31175;
    const double C31452 = C31175 * C31292;
    const double C31466 = ae * C31175;
    const double C31465 = C31074 * C31175;
    const double C31268 = C31267 * C31090;
    const double C31377 = C31267 * C31209;
    const double C31376 = C31075 * C31267;
    const double C31375 = C31267 * be;
    const double C31412 = C31082 * C31267;
    const double C31760 = C31267 * C31292;
    const double C117 = C31546 * C31090 - (bs[1] * C31076) / C31073;
    const double C245 = C31075 * C31082 * C31546;
    const double C249 = C31546 * C31209 - (bs[1] * C31076) / C31073;
    const double C350 = C31074 * C31082 * C31546;
    const double C354 = C31546 * C31292 - (bs[1] * C31076) / C31073;
    const double C681 = C31074 * C31075 * C31546;
    const double C31911 = std::exp(C31910);
    const double C31944 = std::exp(C31943);
    const double C31956 = std::exp(C31955);
    const double C31970 = std::exp(C31969);
    const double C30903 = C30899 - C30886;
    const double C150 = C31993 * C138;
    const double C146 = C31993 * C137;
    const double C144 = C31993 * C124;
    const double C2043 = C31993 * C359;
    const double C30829 = C30827 * C31993;
    const double C113 = -(2 * ae * be * (yA - yB) * C31993) / (ae + be);
    const double C32046 = C31993 / C30860;
    const double C32048 = C31993 * C32045;
    const double C32055 = C31919 * C31993;
    const double C32253 = C31993 * C32047;
    const double C32282 = C32237 * C31993;
    const double C32280 = C31993 * C32247;
    const double C30990 = C30986 - C30973;
    const double C30844 = C30843 * C32010;
    const double C114 = -(2 * ae * be * (zA - zB) * C32010) / (ae + be);
    const double C32088 = C32010 / C30860;
    const double C32090 = C32010 * C32087;
    const double C32097 = C31919 * C32010;
    const double C32259 = C32010 * C32089;
    const double C32285 = C32237 * C32010;
    const double C32283 = C32010 * C32249;
    const double C30906 = C30902 - C30885;
    const double C30993 = C30989 - C30972;
    const double C139 = (2 * C31082 * C31086 +
                         C31082 * (C31086 + std::pow(-C31078, 5) * bs[5] *
                                                C31080 * std::pow(C31082, 2))) /
                        C30826;
    const double C275 =
        (be * C31082 * std::pow(C31088, 3) * bs[3] * C31074 * ae +
         C31075 * C31082 * C31086) /
        C30826;
    const double C380 = (ae * C31082 * C31123 * C31124 * C31075 * be +
                         C31074 * C31082 * C31086) /
                        C30826;
    const double C31099 = C31098 * C31090;
    const double C31102 = C31082 * C31098;
    const double C31321 = C31075 * C31098;
    const double C31451 = C31074 * C31098;
    const double C31249 = C31230 * be;
    const double C31556 = 2 * C31230;
    const double C31611 = C31075 * C31230;
    const double C31666 = C31074 * C31230;
    const double C31665 = C31230 * ae;
    const double C31243 = C31241 * be;
    const double C31690 = 2 * C31241;
    const double C31721 = C31074 * C31241;
    const double C31720 = C31241 * ae;
    const double C31747 = 2 * C31742;
    const double C31745 = C31742 * ae;
    const double C31203 = C31082 * C31093;
    const double C31208 = C31075 * C31093;
    const double C31291 = C31074 * C31093;
    const double C140 =
        (3 * (C31086 + C31093 * C31090) +
         C31082 * (2 * C31082 * C31093 +
                   C31082 * (C31093 +
                             std::pow(C31078, 6) * bs[6] * C31080 * C31090))) /
        C30826;
    const double C276 = (be * (std::pow(C31088, 3) * bs[3] * C31115 +
                               C31083 * C31084 * C31115 * C31090) +
                         C31075 * (C31086 + C31093 * C31090)) /
                        C30826;
    const double C280 = (C31082 * C31086 + be * C31075 * C31128 +
                         C31075 * (be * C31128 + C31075 * C31082 * C31093)) /
                        C30826;
    const double C381 =
        (ae * (C31123 * C31124 * C31156 + C31083 * C31084 * C31156 * C31090) +
         C31074 * (C31086 + C31093 * C31090)) /
        C30826;
    const double C385 = (C31082 * C31086 + ae * C31074 * C31167 +
                         C31074 * (ae * C31167 + C31074 * C31082 * C31093)) /
                        C30826;
    const double C697 =
        (ae * (C31075 * C31167 + C31082 * C31124 * C31123 * be) +
         C31074 * (be * C31128 + C31075 * C31082 * C31093)) /
        C30826;
    const double C31130 = C31121 * C31090;
    const double C31133 = C31082 * C31121;
    const double C31211 = C31121 * C31209;
    const double C31320 = be * C31121;
    const double C31319 = C31075 * C31121;
    const double C31740 = C31074 * C31121;
    const double C31169 = C31162 * C31090;
    const double C31172 = C31082 * C31162;
    const double C31239 = C31075 * C31162;
    const double C31294 = C31162 * C31292;
    const double C31450 = ae * C31162;
    const double C31449 = C31074 * C31162;
    const double C31232 = C31200 * C31090;
    const double C31253 = C31082 * C31200;
    const double C31355 = C31200 * C31209;
    const double C31361 = C31075 * C31200;
    const double C31360 = C31200 * be;
    const double C31743 = C31200 * C31292;
    const double C31758 = C31074 * C31200;
    const double C31757 = C31200 * ae;
    const double C31108 = C31107 * C31090;
    const double C31337 = C31075 * C31107;
    const double C31398 = C31082 * C31107;
    const double C31467 = C31074 * C31107;
    const double C31147 = C31146 * C31090;
    const double C31339 = C31146 * C31209;
    const double C31399 = C31082 * C31146;
    const double C31186 = C31185 * C31090;
    const double C31374 = C31075 * C31185;
    const double C31433 = C31082 * C31185;
    const double C31469 = C31185 * C31292;
    const double C279 = (C31123 * C31124 * C31080 + be * C31075 * C31126 +
                         C31075 * (be * C31126 + C31075 * C31086)) /
                        C30826;
    const double C997 = (2 * (be * C31126 + C31075 * C31086) +
                         be * (C31126 + C31118 * std::pow(C31075, 2)) +
                         C31075 * (C31086 + be * C31075 * C31118 +
                                   C31075 * (be * C31118 + C31075 * C31093))) /
                        C30826;
    const double C127 =
        (std::pow(C31078, 2) * bs[2] * C31115 + C31126 * C31090) / C30824;
    const double C129 =
        (2 * C31082 * C31126 + C31082 * (C31126 + C31118 * C31090)) / C30824;
    const double C257 = (C31075 * C31082 * C31126) / C30824;
    const double C259 = (C31075 * (C31126 + C31118 * C31090)) / C30824;
    const double C265 = (C31544 * C31545 * C31115 + C31126 * C31209) / C30824;
    const double C267 = (C31082 * C31126 + C31128 * C31209) / C30824;
    const double C362 =
        (C31074 * C31082 * C31126 + C31082 * C31546 * ae) / C30824;
    const double C370 =
        (C31544 * C31545 * C31115 + C31074 * (C31074 * C31126 + C31546 * ae) +
         C31074 * C31546 * ae) /
        C30824;
    const double C687 =
        (C31074 * C31075 * C31126 + C31075 * C31546 * ae) / C30824;
    const double C986 =
        (2 * C31075 * C31126 + C31075 * (C31126 + C31118 * C31209)) / C30824;
    const double C384 = (C31123 * C31124 * C31080 + ae * C31074 * C31165 +
                         C31074 * (ae * C31165 + C31074 * C31086)) /
                        C30826;
    const double C696 =
        (ae * (C31075 * C31165 + bs[2] * std::pow(C31078, 2) * be) +
         C31074 * (be * C31126 + C31075 * C31086)) /
        C30826;
    const double C2036 = (2 * (ae * C31165 + C31074 * C31086) +
                          ae * (C31165 + C31159 * std::pow(C31074, 2)) +
                          C31074 * (C31086 + ae * C31074 * C31159 +
                                    C31074 * (ae * C31159 + C31074 * C31093))) /
                         C30826;
    const double C126 =
        (std::pow(C31078, 2) * bs[2] * C31156 + C31165 * C31090) / C30824;
    const double C128 =
        (2 * C31082 * C31165 + C31082 * (C31165 + C31159 * C31090)) / C30824;
    const double C256 =
        (C31075 * C31082 * C31165 + C31082 * bs[2] * std::pow(C31078, 2) * be) /
        C30824;
    const double C264 =
        (C31544 * C31545 * C31156 + C31075 * (C31075 * C31165 + C31546 * be) +
         C31075 * C31546 * be) /
        C30824;
    const double C361 = (C31074 * C31082 * C31165) / C30824;
    const double C363 = (C31074 * (C31165 + C31159 * C31090)) / C30824;
    const double C369 = (C31544 * C31545 * C31156 + C31165 * C31292) / C30824;
    const double C371 = (C31082 * C31165 + C31167 * C31292) / C30824;
    const double C686 = (C31074 * (C31075 * C31165 + C31546 * be)) / C30824;
    const double C2024 =
        (2 * C31074 * C31165 + C31074 * (C31165 + C31159 * C31292)) / C30824;
    const double C31236 = C31228 * be;
    const double C31549 = C31082 * C31228;
    const double C31553 = C31228 + C31552;
    const double C31606 = C31075 * C31228;
    const double C31608 = C31228 + C31607;
    const double C31658 = C31074 * C31228;
    const double C31657 = C31228 * ae;
    const double C31661 = C31228 + C31659;
    const double C258 = (C31075 * (C31165 + C31159 * C31090) +
                         (bs[2] * std::pow(C31078, 2) + C31228 * C31090) * be) /
                        C30824;
    const double C364 = (C31074 * (C31126 + C31118 * C31090) +
                         (C31546 + C31228 * C31090) * ae) /
                        C30824;
    const double C1123 = (C31074 * (C31126 + C31118 * C31209) +
                          (C31546 + C31228 * C31209) * ae) /
                         C30824;
    const double C2025 =
        (2 * (C31074 * C31126 + C31546 * ae) +
         C31074 * (C31126 + C31074 * (C31074 * C31118 + C31228 * ae) +
                   C31074 * C31228 * ae) +
         (C31546 + C31228 * C31292) * ae) /
        C30824;
    const double C118 =
        2 * C31082 * C31546 + C31082 * (C31546 + C31228 * C31090);
    const double C246 = C31075 * (C31546 + C31228 * C31090);
    const double C351 = C31074 * (C31546 + C31228 * C31090);
    const double C979 =
        2 * C31075 * C31546 + C31075 * (C31546 + C31228 * C31209);
    const double C1113 = C31074 * (C31546 + C31228 * C31209);
    const double C2018 =
        2 * C31074 * C31546 + C31074 * (C31546 + C31228 * C31292);
    const double C2045 = C31993 * C379;
    const double C31138 = C31121 + C31137;
    const double C31145 = 2 * C31143;
    const double C31217 = C31143 * C31209;
    const double C31397 = be * C31143;
    const double C31396 = C31075 * C31143;
    const double C31786 = C31074 * C31143;
    const double C31326 = C31121 + C31322;
    const double C31343 = 2 * C31335;
    const double C31341 = be * C31335;
    const double C31801 = C31074 * C31335;
    const double C31177 = C31162 + C31176;
    const double C31184 = 2 * C31182;
    const double C31252 = C31075 * C31182;
    const double C31300 = C31182 * C31292;
    const double C31493 = ae * C31182;
    const double C31492 = C31074 * C31182;
    const double C31456 = C31162 + C31452;
    const double C31473 = 2 * C31465;
    const double C31471 = ae * C31465;
    const double C31269 = C31200 + C31268;
    const double C31381 = C31200 + C31377;
    const double C31380 = C31376 * be;
    const double C31804 = C31376 * C31292;
    const double C31413 = C31412 * C31209;
    const double C31435 = C31075 * C31412;
    const double C31434 = C31412 * be;
    const double C31789 = C31412 * C31292;
    const double C31764 = C31200 + C31760;
    const double C31913 = C31911 * C31906;
    const double C31912 = C31911 / C30860;
    const double C31921 = C31919 * C31911;
    const double C32233 = C31911 * C31907;
    const double C32271 = C32237 * C31911;
    const double C32265 = C31911 * C32230;
    const double C32276 = C31944 * C32242;
    const double C110 =
        (C31944 * std::pow(C32242, 2)) / C32243 + C31944 / C32244;
    const double C112 = C32277 * C31944;
    const double C474 = C32275 * C31944;
    const double C32278 = C31956 * C32245;
    const double C240 =
        (C31956 * std::pow(C32245, 2)) / C32243 + C31956 / C32244;
    const double C242 = C32277 * C31956;
    const double C472 = C32275 * C31956;
    const double C32279 = C31970 * C32246;
    const double C346 =
        (C31970 * std::pow(C32246, 2)) / C32243 + C31970 / C32244;
    const double C348 = C32277 * C31970;
    const double C578 = C32275 * C31970;
    const double C30908 = C30903 / C30860;
    const double C30907 = C30822 * C30903;
    const double C30861 = 2 * C30829;
    const double C30883 = C30829 / C30826;
    const double C819 = ((0 * ae) / C30824 - C30829 / C30826) / (2 * C30824) +
                        (0 * ae) / C30824;
    const double C2662 =
        ((C31993 - (C30822 * 2 * C30829) / C30824) * ae) / C30824 -
        C30823 / C30828;
    const double C2663 = (0 * ae) / C30824 - C30829 / C30826;
    const double C149 = C113 * C117;
    const double C147 = C113 * C125;
    const double C145 = C113 * C116;
    const double C480 = C113 * C245;
    const double C584 = C113 * C350;
    const double C2048 = C113 * C354;
    const double C2046 = C113 * C360;
    const double C2044 = C113 * C349;
    const double C2551 = C113 * C681;
    const double C5275 = (C31993 * std::pow(C32047, 2)) / C30826 + C32046;
    const double C32049 = C32048 * C32047;
    const double C32054 = C32048 / C30828;
    const double C32251 = C32048 / C30824;
    const double C32248 = C31919 * C32048;
    const double C818 =
        (((C31993 - (C30822 * 2 * C30829) / C30824) * ae) / C30824 -
         C30823 / C30828) /
            (2 * C30824) +
        ((C30822 * ((0 * ae) / C30824 - C30829 / C30826) + C32055) * ae) /
            C30824;
    const double C32056 = C32055 * C32047;
    const double C32257 = C32045 * C32055;
    const double C32256 = 2 * C32055;
    const double C32292 = C32055 / C32240;
    const double C6105 = C32055 / C32274;
    const double C17317 = C32055 / C30860;
    const double C32288 = C32253 / C30824;
    const double C5276 = (-2 * C31919 * C32253) / C30824;
    const double C32304 = C32280 / C30826;
    const double C30995 = C30990 / C30860;
    const double C30994 = C30841 * C30990;
    const double C30948 = 2 * C30844;
    const double C30970 = C30844 / C30826;
    const double C1770 = ((0 * ae) / C30824 - C30844 / C30826) / (2 * C30824) +
                         (0 * ae) / C30824;
    const double C3448 =
        ((C32010 - (C30841 * 2 * C30844) / C30824) * ae) / C30824 -
        C30842 / C30828;
    const double C3449 = (0 * ae) / C30824 - C30844 / C30826;
    const double C10040 = (C32010 * std::pow(C32089, 2)) / C30826 + C32088;
    const double C32091 = C32090 * C32089;
    const double C32096 = C32090 / C30828;
    const double C32252 = C32090 / C30824;
    const double C32250 = C31919 * C32090;
    const double C1769 =
        (((C32010 - (C30841 * 2 * C30844) / C30824) * ae) / C30824 -
         C30842 / C30828) /
            (2 * C30824) +
        ((C30841 * ((0 * ae) / C30824 - C30844 / C30826) + C32097) * ae) /
            C30824;
    const double C32098 = C32097 * C32089;
    const double C32263 = C32087 * C32097;
    const double C32262 = 2 * C32097;
    const double C32298 = C32097 / C32240;
    const double C11631 = C32097 / C32274;
    const double C23811 = C32097 / C30860;
    const double C32294 = C32259 / C30824;
    const double C10041 = (-2 * C31919 * C32259) / C30824;
    const double C32306 = C32283 / C30826;
    const double C30912 = C30906 + C30878;
    const double C30999 = C30993 + C30965;
    const double C154 = C31993 * C139;
    const double C483 = C31993 * C275;
    const double C2671 = C32055 * C275;
    const double C14640 = C32055 * C275;
    const double C587 = C31993 * C380;
    const double C31100 = C31093 + C31099;
    const double C31105 = 2 * C31102;
    const double C31216 = C31075 * C31102;
    const double C31299 = C31074 * C31102;
    const double C31210 = C31207 + C31208;
    const double C31293 = C31290 + C31291;
    const double C158 = C31993 * C140;
    const double C487 = C31993 * C276;
    const double C2679 = C32055 * C276;
    const double C14648 = C32055 * C276;
    const double C831 = C32282 * C280;
    const double C3048 = C32055 * C280;
    const double C5295 = C32282 * C280;
    const double C15017 = C32055 * C280;
    const double C591 = C31993 * C381;
    const double C1774 = C31993 * C385;
    const double C2220 = C31993 * C697;
    const double C3202 = C32055 * C697;
    const double C15171 = C32055 * C697;
    const double C31131 = C31118 + C31130;
    const double C31135 = 2 * C31133;
    const double C31215 = be * C31133;
    const double C31214 = C31075 * C31133;
    const double C998 = (2 * (be * C31128 + C31075 * C31203) +
                         be * (C31128 + C31133 * std::pow(C31075, 2)) +
                         C31075 * (C31203 + be * C31075 * C31133 +
                                   C31075 * (be * C31133 + C31075 * C31102))) /
                        C30826;
    const double C31664 = C31074 * C31133;
    const double C988 =
        (2 * C31075 * C31128 + C31075 * (C31128 + C31133 * C31209)) / C30824;
    const double C31212 = C31118 + C31211;
    const double C31324 = C31320 + C31321;
    const double C31325 = 2 * C31319;
    const double C31323 = be * C31319;
    const double C31719 = C31074 * C31319;
    const double C31744 = C31740 + C31741;
    const double C31170 = C31159 + C31169;
    const double C31174 = 2 * C31172;
    const double C31248 = C31075 * C31172;
    const double C31298 = ae * C31172;
    const double C31297 = C31074 * C31172;
    const double C2037 = (2 * (ae * C31167 + C31074 * C31203) +
                          ae * (C31167 + C31172 * std::pow(C31074, 2)) +
                          C31074 * (C31203 + ae * C31074 * C31172 +
                                    C31074 * (ae * C31172 + C31074 * C31102))) /
                         C30826;
    const double C2026 =
        (2 * C31074 * C31167 + C31074 * (C31167 + C31172 * C31292)) / C30824;
    const double C31242 = C31239 + C31240;
    const double C31295 = C31159 + C31294;
    const double C31454 = C31450 + C31451;
    const double C31455 = 2 * C31449;
    const double C31453 = ae * C31449;
    const double C31233 = C31198 + C31232;
    const double C31255 = C31075 * C31253;
    const double C31254 = C31253 * be;
    const double C31279 = 2 * C31253;
    const double C31612 = C31253 * C31209;
    const double C31667 = C31253 * C31292;
    const double C31788 = C31074 * C31253;
    const double C31787 = C31253 * ae;
    const double C31356 = C31198 + C31355;
    const double C31364 = C31361 * be;
    const double C31378 = 2 * C31361;
    const double C31722 = C31361 * C31292;
    const double C31803 = C31074 * C31361;
    const double C31802 = C31361 * ae;
    const double C31363 = C31359 + C31360;
    const double C31746 = C31198 + C31743;
    const double C31765 = 2 * C31758;
    const double C31763 = C31758 * ae;
    const double C31762 = C31756 + C31757;
    const double C31109 = C31098 + C31108;
    const double C31342 = C31336 + C31337;
    const double C31401 = C31075 * C31398;
    const double C31494 = C31074 * C31398;
    const double C31472 = C31466 + C31467;
    const double C31148 = C31136 + C31147;
    const double C31344 = C31136 + C31339;
    const double C31403 = C31399 * C31209;
    const double C31187 = C31175 + C31186;
    const double C31379 = C31374 + C31375;
    const double C31437 = C31075 * C31433;
    const double C31495 = C31433 * C31292;
    const double C31474 = C31175 + C31469;
    const double C151 = C113 * C127;
    const double C155 = C113 * C129;
    const double C482 = C113 * C257;
    const double C486 = C113 * C259;
    const double C586 = C113 * C362;
    const double C2050 = C113 * C370;
    const double C2553 = C113 * C687;
    const double C2049 = C31993 * C384;
    const double C2554 = C31993 * C696;
    const double C4516 = C32055 * C696;
    const double C16536 = C32055 * C696;
    const double C2056 = C31993 * C2036;
    const double C148 = C31993 * C126;
    const double C152 = C31993 * C128;
    const double C481 = C31993 * C256;
    const double C2667 = C32055 * C256;
    const double C14636 = C32055 * C256;
    const double C585 = C31993 * C361;
    const double C589 = C31993 * C363;
    const double C2047 = C31993 * C369;
    const double C1772 = C31993 * C371;
    const double C2552 = C31993 * C686;
    const double C4512 = C32055 * C686;
    const double C16532 = C32055 * C686;
    const double C2054 = C31993 * C2024;
    const double C31237 = C31235 + C31236;
    const double C266 =
        (C31082 * C31165 + C31075 * (C31075 * C31167 + C31549 * be) +
         C31075 * C31549 * be) /
        C30824;
    const double C372 =
        (C31082 * C31126 + C31074 * (C31074 * C31128 + C31549 * ae) +
         C31074 * C31549 * ae) /
        C30824;
    const double C688 = (C31074 * (C31075 * C31167 + C31549 * be)) / C30824;
    const double C689 =
        (C31074 * C31075 * C31128 + C31075 * C31549 * ae) / C30824;
    const double C1125 = (C31074 * (C31128 + C31133 * C31209) +
                          (C31549 + C31230 * C31209) * ae) /
                         C30824;
    const double C2027 =
        (2 * (C31074 * C31128 + C31549 * ae) +
         C31074 * (C31128 + C31074 * (C31074 * C31133 + C31230 * ae) +
                   C31074 * C31230 * ae) +
         (C31549 + C31230 * C31292) * ae) /
        C30824;
    const double C250 = C31082 * C31546 + C31549 * C31209;
    const double C355 = C31082 * C31546 + C31549 * C31292;
    const double C682 = C31074 * C31075 * C31549;
    const double C980 =
        2 * C31075 * C31549 + C31075 * (C31549 + C31230 * C31209);
    const double C1114 = C31074 * (C31549 + C31230 * C31209);
    const double C1118 = C31075 * C31549 + C31611 * C31292;
    const double C2019 =
        2 * C31074 * C31549 + C31074 * (C31549 + C31230 * C31292);
    const double C119 = 3 * (C31546 + C31228 * C31090) +
                        C31082 * (2 * C31549 + C31082 * C31553);
    const double C247 = C31075 * (2 * C31549 + C31082 * C31553);
    const double C251 = C31546 + C31228 * C31090 + C31553 * C31209;
    const double C352 = C31074 * (2 * C31549 + C31082 * C31553);
    const double C356 = C31546 + C31228 * C31090 + C31553 * C31292;
    const double C683 = C31074 * C31075 * C31553;
    const double C1130 =
        (C31075 * C31126 + C31074 * (C31074 * C31206 + C31606 * ae) +
         C31074 * C31606 * ae) /
        C30824;
    const double C2542 =
        (2 * (C31074 * C31206 + C31606 * ae) +
         C31074 * (C31206 + C31074 * (C31074 * C31319 + C31241 * ae) +
                   C31074 * C31241 * ae) +
         (C31606 + C31241 * C31292) * ae) /
        C30824;
    const double C1116 = C31075 * C31546 + C31606 * C31292;
    const double C2538 =
        2 * C31074 * C31606 + C31074 * (C31606 + C31241 * C31292);
    const double C982 = 3 * (C31546 + C31228 * C31209) +
                        C31075 * (2 * C31606 + C31075 * C31608);
    const double C1117 = C31546 + C31228 * C31209 + C31608 * C31292;
    const double C1643 = C31074 * (2 * C31606 + C31075 * C31608);
    const double C31660 = C31656 + C31657;
    const double C2021 = 3 * (C31546 + C31228 * C31292) +
                         C31074 * (2 * C31658 + C31074 * C31661);
    const double C485 = C31993 * C258;
    const double C2675 = C32055 * C258;
    const double C14644 = C32055 * C258;
    const double C590 = C113 * C364;
    const double C2055 = C113 * C2025;
    const double C153 = C113 * C118;
    const double C484 = C113 * C246;
    const double C588 = C113 * C351;
    const double C2053 = C113 * C2018;
    const double C31139 = C31082 * C31138;
    const double C31142 = 3 * C31138;
    const double C31222 = be * C31138;
    const double C31221 = C31075 * C31138;
    const double C31672 = C31074 * C31138;
    const double C31219 = C31133 + C31217;
    const double C31402 = 2 * C31396;
    const double C31400 = be * C31396;
    const double C31778 = C31074 * C31396;
    const double C31329 = C31075 * C31326;
    const double C31338 = 3 * C31326;
    const double C31334 = be * C31326;
    const double C31726 = C31074 * C31326;
    const double C31345 = C31098 + C31341;
    const double C31178 = C31082 * C31177;
    const double C31181 = 3 * C31177;
    const double C31262 = C31075 * C31177;
    const double C31305 = ae * C31177;
    const double C31304 = C31074 * C31177;
    const double C31302 = C31172 + C31300;
    const double C31498 = 2 * C31492;
    const double C31496 = ae * C31492;
    const double C31459 = C31074 * C31456;
    const double C31468 = 3 * C31456;
    const double C31464 = ae * C31456;
    const double C31475 = C31098 + C31471;
    const double C31271 = C31075 * C31269;
    const double C31270 = C31269 * be;
    const double C31280 = C31082 * C31269;
    const double C31617 = C31269 * C31209;
    const double C31675 = C31269 * C31292;
    const double C31384 = C31075 * C31381;
    const double C31383 = C31381 * be;
    const double C31729 = C31381 * C31292;
    const double C31807 = C31361 + C31804;
    const double C31414 = C31253 + C31413;
    const double C31438 = C31435 * be;
    const double C31781 = C31435 * C31292;
    const double C31792 = C31253 + C31789;
    const double C31767 = C31074 * C31764;
    const double C31914 = C31913 * C31907;
    const double C31920 = C31913 / C30828;
    const double C32234 = C31919 * C31913;
    const double C32232 = C31913 / C30824;
    const double C814 = (C31911 * std::pow(C31907, 2)) / C30826 + C31912;
    const double C31922 = C31921 * C31907;
    const double C32238 = C31906 * C31921;
    const double C32236 = 2 * C31921;
    const double C32286 = C31921 / C32240;
    const double C107 = C31921 / C32274;
    const double C17320 = C31921 / C30860;
    const double C32267 = C32233 / C30824;
    const double C815 = (-2 * C31919 * C32233) / C30824;
    const double C32299 = C32265 / C30826;
    const double C111 = (2 * C32275 * C32276) / C31939;
    const double C473 = C32276 / C31939;
    const double C241 = (2 * C32275 * C32278) / C31939;
    const double C471 = C32278 / C31939;
    const double C347 = (2 * C32275 * C32279) / C31939;
    const double C577 = C32279 / C31939;
    const double C30913 = C30907 + 0;
    const double C30880 = C30822 * C30861;
    const double C5282 =
        ((-C30823 / C30824) / C30860 -
         ((C31993 - (C30822 * C30861) / C30824) * be) / C30824) /
            C30860 -
        ((C30822 * ((-C30861 / C30824) / C30860 - (0 * be) / C30824) + C32055) *
         be) /
            C30824;
    const double C5283 =
        ((-C30861 / C30824) / C30860 - (0 * be) / C30824) / C30860 -
        (0 * be) / C30824;
    const double C14632 = (-C30861 / C30824) / C30860 - (0 * be) / C30824;
    const double C30893 = C30889 - C30883;
    const double C832 = C819 * C267;
    const double C11057 = C819 * C1123;
    const double C11051 = C819 * C1113;
    const double C2686 = C2662 * C129;
    const double C2682 = C2662 * C118;
    const double C2678 = C2662 * C127;
    const double C2674 = C2662 * C117;
    const double C2670 = C2662 * C125;
    const double C2666 = C2662 * C116;
    const double C3053 = C2662 * C259;
    const double C3049 = C2662 * C246;
    const double C3045 = C2662 * C257;
    const double C3041 = C2662 * C245;
    const double C3207 = C2662 * C364;
    const double C3203 = C2662 * C351;
    const double C3199 = C2662 * C362;
    const double C3195 = C2662 * C350;
    const double C4522 = C2662 * C370;
    const double C4518 = C2662 * C354;
    const double C4515 = C2662 * C360;
    const double C4511 = C2662 * C349;
    const double C5162 = C2662 * C687;
    const double C5158 = C2662 * C681;
    const double C12502 = C2662 * C2025;
    const double C12498 = C2662 * C2018;
    const double C2680 = C2663 * C259;
    const double C2676 = C2663 * C246;
    const double C2672 = C2663 * C257;
    const double C2668 = C2663 * C245;
    const double C3047 = C2663 * C267;
    const double C4517 = C2663 * C687;
    const double C4513 = C2663 * C681;
    const double C5164 = C2663 * C1123;
    const double C5160 = C2663 * C1113;
    const double C5316 = C5275 * C139;
    const double C5310 = C5275 * C128;
    const double C5303 = C5275 * C138;
    const double C5297 = C5275 * C126;
    const double C5291 = C5275 * C137;
    const double C5285 = C5275 * C124;
    const double C5719 = C5275 * C276;
    const double C5713 = C5275 * C258;
    const double C5707 = C5275 * C275;
    const double C5701 = C5275 * C256;
    const double C5889 = C5275 * C381;
    const double C5883 = C5275 * C363;
    const double C5877 = C5275 * C380;
    const double C5871 = C5275 * C361;
    const double C6888 = C5275 * C2036;
    const double C6882 = C5275 * C2024;
    const double C6875 = C5275 * C384;
    const double C6869 = C5275 * C369;
    const double C6863 = C5275 * C379;
    const double C6857 = C5275 * C359;
    const double C7210 = C5275 * C385;
    const double C7204 = C5275 * C371;
    const double C7372 = C5275 * C696;
    const double C7366 = C5275 * C686;
    const double C8786 = C5275 * C697;
    const double C32050 = C32049 / C30826;
    const double C2694 = C32251 * C140;
    const double C2685 = C32251 * C139;
    const double C2681 = C32251 * C128;
    const double C2677 = C32251 * C138;
    const double C2673 = C32251 * C126;
    const double C2669 = C32251 * C137;
    const double C2665 = C32251 * C124;
    const double C3054 = C32251 * C276;
    const double C3050 = C32251 * C258;
    const double C3046 = C32251 * C275;
    const double C3042 = C32251 * C256;
    const double C3208 = C32251 * C381;
    const double C3204 = C32251 * C363;
    const double C3200 = C32251 * C380;
    const double C3196 = C32251 * C361;
    const double C4531 = C32251 * C385;
    const double C4527 = C32251 * C371;
    const double C4523 = C32251 * C384;
    const double C4519 = C32251 * C369;
    const double C4514 = C32251 * C379;
    const double C4510 = C32251 * C359;
    const double C4741 = C32251 * C697;
    const double C5163 = C32251 * C696;
    const double C5159 = C32251 * C686;
    const double C12503 = C32251 * C2036;
    const double C12499 = C32251 * C2024;
    const double C817 =
        (((0 - (C30822 * C30823) / C30824) * ae) / C30824 - (0 * be) / C30828) /
            (2 * C30824) +
        ((C30822 * (((C31993 - (C30822 * 2 * C30829) / C30824) * ae) / C30824 -
                    C30823 / C30828) +
          C32251) *
         ae) /
            C30824 +
        (0 * ae) / C30824 - C30829 / C30826;
    const double C32281 = 2 * C32248;
    const double C842 = C818 * C259;
    const double C836 = C818 * C246;
    const double C830 = C818 * C257;
    const double C824 = C818 * C245;
    const double C1308 = C818 * C267;
    const double C11055 = C818 * C687;
    const double C11049 = C818 * C681;
    const double C11550 = C818 * C1123;
    const double C11544 = C818 * C1113;
    const double C32057 = C32056 / C30824;
    const double C32291 = C32257 / C30828;
    const double C17335 = C17317 * C280;
    const double C32308 = C32251 - C32288;
    const double C14625 = -C32288;
    const double C5305 = C5276 * C276;
    const double C5299 = C5276 * C258;
    const double C5293 = C5276 * C275;
    const double C5287 = C5276 * C256;
    const double C5709 = C5276 * C280;
    const double C5879 = C5276 * C697;
    const double C6865 = C5276 * C696;
    const double C6859 = C5276 * C686;
    const double C32317 = C32304 + C32046;
    const double C31000 = C30994 + 0;
    const double C30967 = C30841 * C30948;
    const double C10044 =
        ((-C30842 / C30824) / C30860 -
         ((C32010 - (C30841 * C30948) / C30824) * be) / C30824) /
            C30860 -
        ((C30841 * ((-C30948 / C30824) / C30860 - (0 * be) / C30824) + C32097) *
         be) /
            C30824;
    const double C10045 =
        ((-C30948 / C30824) / C30860 - (0 * be) / C30824) / C30860 -
        (0 * be) / C30824;
    const double C20327 = (-C30948 / C30824) / C30860 - (0 * be) / C30824;
    const double C30980 = C30976 - C30970;
    const double C32092 = C32091 / C30826;
    const double C1768 =
        (((0 - (C30841 * C30842) / C30824) * ae) / C30824 - (0 * be) / C30828) /
            (2 * C30824) +
        ((C30841 * (((C32010 - (C30841 * 2 * C30844) / C30824) * ae) / C30824 -
                    C30842 / C30828) +
          C32252) *
         ae) /
            C30824 +
        (0 * ae) / C30824 - C30844 / C30826;
    const double C32284 = 2 * C32250;
    const double C32099 = C32098 / C30824;
    const double C32297 = C32263 / C30828;
    const double C32311 = C32252 - C32294;
    const double C20324 = -C32294;
    const double C32318 = C32306 + C32088;
    const double C30916 = C30912 / C30860;
    const double C31003 = C30999 / C30860;
    const double C141 =
        (4 * (2 * C31082 * C31093 + C31082 * C31100) +
         C31082 * (3 * C31100 +
                   C31082 * (2 * C31082 * C31098 +
                             C31082 * (C31098 + std::pow(C31088, 7) * bs[7] *
                                                    C31080 * C31090)))) /
        C30826;
    const double C277 =
        (be * (2 * C31082 * C31118 +
               C31082 * (C31118 + C31091 * C31089 * C31115 * C31090)) +
         C31075 * (2 * C31082 * C31093 + C31082 * C31100)) /
        C30826;
    const double C382 =
        (ae * (2 * C31082 * C31159 +
               C31082 * (C31159 + C31091 * C31089 * C31156 * C31090)) +
         C31074 * (2 * C31082 * C31093 + C31082 * C31100)) /
        C30826;
    const double C1140 =
        (ae * (C31165 + C31075 * (C31075 * C31159 + C31228 * be) +
               C31075 * C31228 * be) +
         C31074 * (C31086 + be * C31206 + C31075 * C31210)) /
        C30826;
    const double C281 = (C31086 + C31093 * C31090 + be * C31075 * C31131 +
                         C31075 * (be * C31131 + C31075 * C31100)) /
                        C30826;
    const double C131 = (3 * (C31126 + C31118 * C31090) +
                         C31082 * (2 * C31128 + C31082 * C31131)) /
                        C30824;
    const double C261 = (C31075 * (2 * C31128 + C31082 * C31131)) / C30824;
    const double C269 = (C31126 + C31118 * C31090 + C31131 * C31209) / C30824;
    const double C366 = (C31074 * (2 * C31128 + C31082 * C31131) +
                         (2 * C31549 + C31082 * C31553) * ae) /
                        C30824;
    const double C374 =
        (C31126 + C31118 * C31090 + C31074 * (C31074 * C31131 + C31553 * ae) +
         C31074 * C31553 * ae) /
        C30824;
    const double C691 =
        (C31074 * C31075 * C31131 + C31075 * C31553 * ae) / C30824;
    const double C990 =
        (2 * C31075 * C31131 + C31075 * (C31131 + C31138 * C31209)) / C30824;
    const double C31218 = C31215 + C31216;
    const double C1134 =
        (C31075 * C31128 + C31074 * (C31074 * C31214 + C31611 * ae) +
         C31074 * C31611 * ae) /
        C30824;
    const double C1311 = C32282 * C998;
    const double C5711 = C32282 * C998;
    const double C7511 = C32292 * C998;
    const double C15440 = C32292 * C998;
    const double C17751 = C17317 * C998;
    const double C31668 = C31664 + C31665;
    const double C1310 = C819 * C988;
    const double C1000 =
        (3 * (C31086 + be * C31206 + C31075 * C31210) +
         be * (2 * C31206 + C31075 * C31212) +
         C31075 * (2 * C31210 + be * C31212 +
                   C31075 * (C31093 + be * C31075 * C31121 +
                             C31075 * (be * C31121 + C31075 * C31098)))) /
        C30826;
    const double C992 = (3 * (C31126 + C31118 * C31209) +
                         C31075 * (2 * C31206 + C31075 * C31212)) /
                        C30824;
    const double C1131 =
        (C31126 + C31118 * C31209 + C31074 * (C31074 * C31212 + C31608 * ae) +
         C31074 * C31608 * ae) /
        C30824;
    const double C1647 = (C31074 * (2 * C31206 + C31075 * C31212) +
                          (2 * C31606 + C31075 * C31608) * ae) /
                         C30824;
    const double C31328 = C31075 * C31324;
    const double C31333 = 2 * C31324;
    const double C31420 = C31074 * C31324;
    const double C31327 = C31093 + C31323;
    const double C31723 = C31719 + C31720;
    const double C31748 = C31074 * C31744;
    const double C31755 = 2 * C31744;
    const double C386 = (C31086 + C31093 * C31090 + ae * C31074 * C31170 +
                         C31074 * (ae * C31170 + C31074 * C31100)) /
                        C30826;
    const double C698 =
        (ae * (C31075 * C31170 +
               (C31124 * C31123 + C31084 * C31083 * C31090) * be) +
         C31074 * (be * C31131 + C31075 * C31100)) /
        C30826;
    const double C130 = (3 * (C31165 + C31159 * C31090) +
                         C31082 * (2 * C31167 + C31082 * C31170)) /
                        C30824;
    const double C260 =
        (C31075 * (2 * C31167 + C31082 * C31170) +
         (2 * C31082 * C31228 + C31082 * (C31228 + C31198 * C31090)) * be) /
        C30824;
    const double C268 =
        (C31165 + C31159 * C31090 + C31075 * (C31075 * C31170 + C31553 * be) +
         C31075 * C31553 * be) /
        C30824;
    const double C365 = (C31074 * (2 * C31167 + C31082 * C31170)) / C30824;
    const double C373 = (C31165 + C31159 * C31090 + C31170 * C31292) / C30824;
    const double C690 = (C31074 * (C31075 * C31170 + C31553 * be)) / C30824;
    const double C2028 =
        (2 * C31074 * C31170 + C31074 * (C31170 + C31177 * C31292)) / C30824;
    const double C31250 = C31248 + C31249;
    const double C31301 = C31298 + C31299;
    const double C2060 = C31993 * C2037;
    const double C12511 = C32251 * C2037;
    const double C2058 = C31993 * C2026;
    const double C12507 = C32251 * C2026;
    const double C31244 = C31075 * C31242;
    const double C31358 = 2 * C31242;
    const double C31419 = ae * C31242;
    const double C31418 = C31074 * C31242;
    const double C2039 =
        (3 * (C31086 + ae * C31289 + C31074 * C31293) +
         ae * (2 * C31289 + C31074 * C31295) +
         C31074 * (2 * C31293 + ae * C31295 +
                   C31074 * (C31093 + ae * C31074 * C31162 +
                             C31074 * (ae * C31162 + C31074 * C31098)))) /
        C30826;
    const double C2030 = (3 * (C31165 + C31159 * C31292) +
                          C31074 * (2 * C31289 + C31074 * C31295)) /
                         C30824;
    const double C31458 = C31074 * C31454;
    const double C31463 = 2 * C31454;
    const double C31457 = C31093 + C31453;
    const double C31263 = C31233 * be;
    const double C31557 = C31082 * C31233;
    const double C31561 = 3 * C31233;
    const double C31616 = C31075 * C31233;
    const double C31674 = C31074 * C31233;
    const double C31673 = C31233 * ae;
    const double C1127 = (C31074 * (C31131 + C31138 * C31209) +
                          (C31553 + C31233 * C31209) * ae) /
                         C30824;
    const double C2029 =
        (2 * (C31074 * C31131 + C31553 * ae) +
         C31074 * (C31131 + C31074 * (C31074 * C31138 + C31233 * ae) +
                   C31074 * C31233 * ae) +
         (C31553 + C31233 * C31292) * ae) /
        C30824;
    const double C981 =
        2 * C31075 * C31553 + C31075 * (C31553 + C31233 * C31209);
    const double C1115 = C31074 * (C31553 + C31233 * C31209);
    const double C2020 =
        2 * C31074 * C31553 + C31074 * (C31553 + C31233 * C31292);
    const double C31257 = C31255 * be;
    const double C31706 = 2 * C31255;
    const double C31780 = C31074 * C31255;
    const double C31779 = C31255 * ae;
    const double C2544 =
        (2 * (C31074 * C31214 + C31611 * ae) +
         C31074 * (C31214 + C31074 * (C31074 * C31396 + C31255 * ae) +
                   C31074 * C31255 * ae) +
         (C31611 + C31255 * C31292) * ae) /
        C30824;
    const double C2539 =
        2 * C31074 * C31611 + C31074 * (C31611 + C31255 * C31292);
    const double C31256 = C31252 + C31254;
    const double C31613 = C31230 + C31612;
    const double C31669 = C31230 + C31667;
    const double C31793 = 2 * C31788;
    const double C31791 = C31788 * ae;
    const double C31790 = C31786 + C31787;
    const double C31362 = C31356 * be;
    const double C31691 = C31075 * C31356;
    const double C31695 = 3 * C31356;
    const double C31728 = C31074 * C31356;
    const double C31727 = C31356 * ae;
    const double C6848 =
        (2 * (C31074 * C31212 + C31608 * ae) +
         C31074 * (C31212 + C31074 * (C31074 * C31326 + C31356 * ae) +
                   C31074 * C31356 * ae) +
         (C31608 + C31356 * C31292) * ae) /
        C30824;
    const double C6844 =
        2 * C31074 * C31608 + C31074 * (C31608 + C31356 * C31292);
    const double C31724 = C31241 + C31722;
    const double C31808 = 2 * C31803;
    const double C31806 = C31803 * ae;
    const double C31805 = C31801 + C31802;
    const double C31365 = C31075 * C31363;
    const double C31373 = 2 * C31363;
    const double C31421 = C31363 * C31292;
    const double C31507 = ae * C31363;
    const double C31506 = C31074 * C31363;
    const double C31749 = C31074 * C31746;
    const double C31761 = 3 * C31746;
    const double C31759 = C31746 * ae;
    const double C31766 = C31074 * C31762;
    const double C31110 = C31082 * C31109;
    const double C31223 = C31075 * C31109;
    const double C31306 = C31074 * C31109;
    const double C999 = (2 * (be * C31131 + C31075 * C31100) +
                         be * (C31131 + C31138 * std::pow(C31075, 2)) +
                         C31075 * (C31100 + be * C31075 * C31138 +
                                   C31075 * (be * C31138 + C31075 * C31109))) /
                        C30826;
    const double C2038 = (2 * (ae * C31170 + C31074 * C31100) +
                          ae * (C31170 + C31177 * std::pow(C31074, 2)) +
                          C31074 * (C31100 + ae * C31074 * C31177 +
                                    C31074 * (ae * C31177 + C31074 * C31109))) /
                         C30826;
    const double C31346 = C31075 * C31342;
    const double C31508 = C31074 * C31342;
    const double C31405 = C31397 + C31401;
    const double C31497 = C31493 + C31494;
    const double C31476 = C31074 * C31472;
    const double C31149 = C31082 * C31148;
    const double C31224 = C31148 * C31209;
    const double C31347 = C31075 * C31344;
    const double C31406 = C31143 + C31403;
    const double C31188 = C31082 * C31187;
    const double C31266 = C31075 * C31187;
    const double C31307 = C31187 * C31292;
    const double C31382 = C31075 * C31379;
    const double C31509 = C31379 * C31292;
    const double C31439 = C31437 + C31434;
    const double C31499 = C31182 + C31495;
    const double C31477 = C31074 * C31474;
    const double C165 = C150 - C151;
    const double C167 = C154 - C155;
    const double C2386 = C586 - C587;
    const double C2384 = C587 - C586;
    const double C2066 = C2049 - C2050;
    const double C164 = C148 - C149;
    const double C2385 = C584 - C585;
    const double C2383 = C585 - C584;
    const double C2065 = C2047 - C2048;
    const double C1143 = (be * C31126 + C31075 * C31086 + ae * C31074 * C31237 +
                          C31074 * (ae * C31237 + C31074 * C31210)) /
                         C30826;
    const double C2547 =
        (2 * (ae * C31237 + C31074 * C31210) + ae * (C31237 + C31242 * C31292) +
         C31074 * (C31210 + ae * C31074 * C31242 +
                   C31074 * (ae * C31242 +
                             C31074 * (be * C31121 + C31075 * C31098)))) /
        C30826;
    const double C985 =
        (2 * (C31075 * C31165 + C31546 * be) +
         C31075 * (C31165 + C31075 * C31237 + C31075 * C31228 * be) +
         (C31546 + C31228 * C31209) * be) /
        C30824;
    const double C1122 =
        (C31074 * (C31165 + C31075 * C31237 + C31606 * be)) / C30824;
    const double C1128 =
        (C31075 * C31165 + C31546 * be + C31237 * C31292) / C30824;
    const double C2541 =
        (2 * C31074 * C31237 + C31074 * (C31237 + C31242 * C31292)) / C30824;
    const double C825 = C32282 * C266;
    const double C3044 = C32055 * C266;
    const double C5289 = C32282 * C266;
    const double C5703 = C5276 * C266;
    const double C15013 = C32055 * C266;
    const double C17329 = C17317 * C266;
    const double C1775 = C113 * C372;
    const double C4530 = C2662 * C372;
    const double C2218 = C31993 * C688;
    const double C3198 = C32055 * C688;
    const double C4737 = C32251 * C688;
    const double C5873 = C5276 * C688;
    const double C8780 = C5275 * C688;
    const double C15167 = C32055 * C688;
    const double C1482 = C818 * C689;
    const double C2219 = C113 * C689;
    const double C3201 = C2663 * C689;
    const double C4740 = C2662 * C689;
    const double C1484 = C819 * C1125;
    const double C4742 = C2663 * C1125;
    const double C21569 = C818 * C1125;
    const double C2059 = C113 * C2027;
    const double C12510 = C2662 * C2027;
    const double C826 = C819 * C250;
    const double C1302 = C818 * C250;
    const double C3043 = C2663 * C250;
    const double C1773 = C113 * C355;
    const double C4526 = C2662 * C355;
    const double C1476 = C818 * C682;
    const double C2217 = C113 * C682;
    const double C3197 = C2663 * C682;
    const double C4736 = C2662 * C682;
    const double C1304 = C819 * C980;
    const double C1478 = C819 * C1114;
    const double C4738 = C2663 * C1114;
    const double C21563 = C818 * C1114;
    const double C2221 = C113 * C1118;
    const double C4528 = C2663 * C1118;
    const double C11386 = C818 * C1118;
    const double C12712 = C2662 * C1118;
    const double C2057 = C113 * C2019;
    const double C12506 = C2662 * C2019;
    const double C157 = C113 * C119;
    const double C2689 = C2662 * C119;
    const double C488 = C113 * C247;
    const double C847 = C818 * C247;
    const double C2684 = C2663 * C247;
    const double C3057 = C2662 * C247;
    const double C838 = C819 * C251;
    const double C1314 = C818 * C251;
    const double C3051 = C2663 * C251;
    const double C592 = C113 * C352;
    const double C3211 = C2662 * C352;
    const double C1781 = C113 * C356;
    const double C4534 = C2662 * C356;
    const double C1488 = C818 * C683;
    const double C2225 = C113 * C683;
    const double C3205 = C2663 * C683;
    const double C4744 = C2662 * C683;
    const double C2557 = C113 * C1130;
    const double C4524 = C2663 * C1130;
    const double C11067 = C818 * C1130;
    const double C13118 = C2662 * C1130;
    const double C11078 = C818 * C2542;
    const double C12046 = C113 * C2542;
    const double C12504 = C2663 * C2542;
    const double C14524 = C2662 * C2542;
    const double C2555 = C113 * C1116;
    const double C4520 = C2663 * C1116;
    const double C11061 = C818 * C1116;
    const double C13114 = C2662 * C1116;
    const double C11072 = C818 * C2538;
    const double C12044 = C113 * C2538;
    const double C12500 = C2663 * C2538;
    const double C14520 = C2662 * C2538;
    const double C11063 = C819 * C1117;
    const double C11556 = C818 * C1117;
    const double C13116 = C2663 * C1117;
    const double C11546 = C819 * C1643;
    const double C2031 =
        (3 * (C31126 + C31074 * C31660 + C31658 * ae) +
         C31074 * (2 * C31660 +
                   C31074 * (C31118 + C31074 * (C31074 * C31121 + C31198 * ae) +
                             C31074 * C31198 * ae) +
                   C31661 * ae) +
         (2 * C31658 + C31074 * C31661) * ae) /
        C30824;
    const double C11773 = C113 * C2021;
    const double C14120 = C2662 * C2021;
    const double C1779 = C591 - C590;
    const double C2390 = C590 - C591;
    const double C11771 = C2056 - C2055;
    const double C166 = C152 - C153;
    const double C1778 = C589 - C588;
    const double C2389 = C588 - C589;
    const double C11770 = C2054 - C2053;
    const double C31140 = C31135 + C31139;
    const double C994 = (3 * (C31128 + C31133 * C31209) +
                         C31075 * (2 * C31214 + C31075 * C31219)) /
                        C30824;
    const double C31404 = C31102 + C31400;
    const double C31331 = C31325 + C31329;
    const double C31179 = C31174 + C31178;
    const double C2032 = (3 * (C31167 + C31172 * C31292) +
                          C31074 * (2 * C31297 + C31074 * C31302)) /
                         C30824;
    const double C31500 = C31102 + C31496;
    const double C31461 = C31455 + C31459;
    const double C31273 = C31271 * be;
    const double C31281 = C31279 + C31280;
    const double C31618 = C31233 + C31617;
    const double C31677 = C31233 + C31675;
    const double C31386 = C31378 + C31384;
    const double C31731 = C31356 + C31729;
    const double C31810 = C31074 * C31807;
    const double C31436 = C31414 * be;
    const double C31707 = C31075 * C31414;
    const double C31783 = C31255 + C31781;
    const double C31795 = C31074 * C31792;
    const double C31769 = C31765 + C31767;
    const double C31915 = C31914 / C30826;
    const double C32268 = 2 * C32234;
    const double C31923 = C31922 / C30824;
    const double C32272 = C32238 / C30828;
    const double C32300 = C32232 - C32267;
    const double C15419 = -C32267;
    const double C32314 = C32299 + C31912;
    const double C30917 = C30913 * be;
    const double C30888 = C30880 / C30824;
    const double C5311 = C5282 * C247;
    const double C5306 = C5282 * C259;
    const double C5300 = C5282 * C246;
    const double C5294 = C5282 * C257;
    const double C5288 = C5282 * C245;
    const double C5714 = C5282 * C251;
    const double C5708 = C5282 * C267;
    const double C5702 = C5282 * C250;
    const double C5884 = C5282 * C683;
    const double C5878 = C5282 * C689;
    const double C5872 = C5282 * C682;
    const double C6889 = C5282 * C2542;
    const double C6883 = C5282 * C2538;
    const double C6878 = C5282 * C1130;
    const double C6872 = C5282 * C1116;
    const double C6866 = C5282 * C687;
    const double C6860 = C5282 * C681;
    const double C7205 = C5282 * C1118;
    const double C7379 = C5282 * C1117;
    const double C7373 = C5282 * C1123;
    const double C7367 = C5282 * C1113;
    const double C8787 = C5282 * C1125;
    const double C8781 = C5282 * C1114;
    const double C5302 = C5283 * C251;
    const double C5296 = C5283 * C267;
    const double C5290 = C5283 * C250;
    const double C5710 = C5283 * C988;
    const double C5704 = C5283 * C980;
    const double C5880 = C5283 * C1125;
    const double C5874 = C5283 * C1114;
    const double C6874 = C5283 * C1117;
    const double C6868 = C5283 * C1123;
    const double C6862 = C5283 * C1113;
    const double C7369 = C5283 * C1643;
    const double C14653 = C14632 * C247;
    const double C14649 = C14632 * C259;
    const double C14645 = C14632 * C246;
    const double C14641 = C14632 * C257;
    const double C14637 = C14632 * C245;
    const double C15020 = C14632 * C251;
    const double C15016 = C14632 * C267;
    const double C15012 = C14632 * C250;
    const double C15174 = C14632 * C683;
    const double C15170 = C14632 * C689;
    const double C15166 = C14632 * C682;
    const double C16225 = C14632 * C1118;
    const double C16556 = C14632 * C2542;
    const double C16552 = C14632 * C2538;
    const double C16545 = C14632 * C1130;
    const double C16541 = C14632 * C1116;
    const double C16537 = C14632 * C687;
    const double C16533 = C14632 * C681;
    const double C16774 = C14632 * C1125;
    const double C16770 = C14632 * C1114;
    const double C17200 = C14632 * C1117;
    const double C17196 = C14632 * C1123;
    const double C17192 = C14632 * C1113;
    const double C30897 = C30822 * C30893;
    const double C30926 = C30893 / C30860;
    const double C2700 = C2679 - C2680;
    const double C2698 = C2675 - C2676;
    const double C32051 = C32046 - C32050;
    const double C2703 = C2685 - C2686;
    const double C2701 = C2681 - C2682;
    const double C2699 = C2677 - C2678;
    const double C2697 = C2673 - C2674;
    const double C4209 = C3208 - C3207;
    const double C4956 = C3207 - C3208;
    const double C4207 = C3204 - C3203;
    const double C4954 = C3203 - C3204;
    const double C4952 = C3199 - C3200;
    const double C4948 = C3200 - C3199;
    const double C4950 = C3195 - C3196;
    const double C4946 = C3196 - C3195;
    const double C12492 = C4523 - C4522;
    const double C12490 = C4519 - C4518;
    const double C14118 = C12503 - C12502;
    const double C14116 = C12499 - C12498;
    const double C851 = C817 * C129;
    const double C845 = C817 * C118;
    const double C840 = C817 * C127;
    const double C834 = C817 * C117;
    const double C828 = C817 * C125;
    const double C822 = C817 * C116;
    const double C1318 = C817 * C259;
    const double C1312 = C817 * C246;
    const double C1306 = C817 * C257;
    const double C1300 = C817 * C245;
    const double C1492 = C817 * C364;
    const double C1486 = C817 * C351;
    const double C1480 = C817 * C362;
    const double C1474 = C817 * C350;
    const double C11076 = C817 * C2025;
    const double C11070 = C817 * C2018;
    const double C11065 = C817 * C370;
    const double C11059 = C817 * C354;
    const double C11053 = C817 * C360;
    const double C11047 = C817 * C349;
    const double C11390 = C817 * C372;
    const double C11384 = C817 * C355;
    const double C11560 = C817 * C1130;
    const double C11554 = C817 * C1116;
    const double C11548 = C817 * C687;
    const double C11542 = C817 * C681;
    const double C21567 = C817 * C689;
    const double C21561 = C817 * C682;
    const double C32305 = C32281 / C30824;
    const double C32058 = C32054 - C32057;
    const double C32319 = C32308 / C30860;
    const double C14663 = C14625 * C140;
    const double C14654 = C14625 * C139;
    const double C14650 = C14625 * C128;
    const double C14646 = C14625 * C138;
    const double C14642 = C14625 * C126;
    const double C14638 = C14625 * C137;
    const double C14634 = C14625 * C124;
    const double C15023 = C14625 * C276;
    const double C15019 = C14625 * C258;
    const double C15015 = C14625 * C275;
    const double C15011 = C14625 * C256;
    const double C15177 = C14625 * C381;
    const double C15173 = C14625 * C363;
    const double C15169 = C14625 * C380;
    const double C15165 = C14625 * C361;
    const double C16226 = C14625 * C385;
    const double C16222 = C14625 * C371;
    const double C16563 = C14625 * C2037;
    const double C16559 = C14625 * C2026;
    const double C16555 = C14625 * C2036;
    const double C16551 = C14625 * C2024;
    const double C16542 = C14625 * C384;
    const double C16538 = C14625 * C369;
    const double C16534 = C14625 * C379;
    const double C16530 = C14625 * C359;
    const double C16773 = C14625 * C697;
    const double C16769 = C14625 * C688;
    const double C17195 = C14625 * C696;
    const double C17191 = C14625 * C686;
    const double C5281 =
        ((-(0 * be) / C30824) / C30860 -
         ((0 - (C30822 * C30823) / C30824) * be) / C30824) /
            C30860 -
        ((C30822 * ((-C30823 / C30824) / C30860 -
                    ((C31993 - (C30822 * C30861) / C30824) * be) / C30824) +
          C14625) *
         be) /
            C30824 +
        (-C30861 / C30824) / C30860 - (0 * be) / C30824;
    const double C852 = C32317 * C139;
    const double C846 = C32317 * C128;
    const double C839 = C32317 * C138;
    const double C833 = C32317 * C126;
    const double C827 = C32317 * C137;
    const double C821 = C32317 * C124;
    const double C1319 = C32317 * C276;
    const double C1313 = C32317 * C258;
    const double C1307 = C32317 * C275;
    const double C1301 = C32317 * C256;
    const double C1493 = C32317 * C381;
    const double C1487 = C32317 * C363;
    const double C1481 = C32317 * C380;
    const double C1475 = C32317 * C361;
    const double C11077 = C32317 * C2036;
    const double C11071 = C32317 * C2024;
    const double C11064 = C32317 * C384;
    const double C11058 = C32317 * C369;
    const double C11052 = C32317 * C379;
    const double C11046 = C32317 * C359;
    const double C11391 = C32317 * C385;
    const double C11385 = C32317 * C371;
    const double C11549 = C32317 * C696;
    const double C11543 = C32317 * C686;
    const double C21568 = C32317 * C697;
    const double C21562 = C32317 * C688;
    const double C31004 = C31000 * be;
    const double C30975 = C30967 / C30824;
    const double C30984 = C30841 * C30980;
    const double C31013 = C30980 / C30860;
    const double C32093 = C32088 - C32092;
    const double C32307 = C32284 / C30824;
    const double C32100 = C32096 - C32099;
    const double C32321 = C32311 / C30860;
    const double C10043 =
        ((-(0 * be) / C30824) / C30860 -
         ((0 - (C30841 * C30842) / C30824) * be) / C30824) /
            C30860 -
        ((C30841 * ((-C30842 / C30824) / C30860 -
                    ((C32010 - (C30841 * C30948) / C30824) * be) / C30824) +
          C20324) *
         be) /
            C30824 +
        (-C30948 / C30824) / C30860 - (0 * be) / C30824;
    const double C163 = C31993 * C141;
    const double C491 = C31993 * C277;
    const double C2687 = C32055 * C277;
    const double C3062 = C32251 * C277;
    const double C5318 = C5276 * C277;
    const double C14656 = C32055 * C277;
    const double C15031 = C14625 * C277;
    const double C595 = C31993 * C382;
    const double C3216 = C32251 * C382;
    const double C15185 = C14625 * C382;
    const double C5165 = C32055 * C1140;
    const double C6867 = C32282 * C1140;
    const double C7374 = C5276 * C1140;
    const double C11056 = C32282 * C1140;
    const double C17197 = C32055 * C1140;
    const double C19575 = C17317 * C1140;
    const double C843 = C32282 * C281;
    const double C3056 = C32055 * C281;
    const double C5307 = C32282 * C281;
    const double C5721 = C5276 * C281;
    const double C15025 = C32055 * C281;
    const double C17347 = C17317 * C281;
    const double C159 = C113 * C131;
    const double C2693 = C2662 * C131;
    const double C490 = C113 * C261;
    const double C853 = C818 * C261;
    const double C2688 = C2663 * C261;
    const double C3061 = C2662 * C261;
    const double C5317 = C5282 * C261;
    const double C14657 = C14632 * C261;
    const double C844 = C819 * C269;
    const double C1320 = C818 * C269;
    const double C3055 = C2663 * C269;
    const double C5308 = C5283 * C269;
    const double C5720 = C5282 * C269;
    const double C15024 = C14632 * C269;
    const double C594 = C113 * C366;
    const double C3215 = C2662 * C366;
    const double C1783 = C113 * C374;
    const double C4538 = C2662 * C374;
    const double C1494 = C818 * C691;
    const double C2227 = C113 * C691;
    const double C3209 = C2663 * C691;
    const double C4748 = C2662 * C691;
    const double C5890 = C5282 * C691;
    const double C15178 = C14632 * C691;
    const double C1322 = C819 * C990;
    const double C5722 = C5283 * C990;
    const double C1001 =
        (3 * (C31203 + be * C31214 + C31075 * C31218) +
         be * (2 * C31214 + C31075 * C31219) +
         C31075 *
             (2 * C31218 + be * C31219 +
              C31075 * (C31102 + be * C31075 * C31143 +
                        C31075 * (be * C31143 + C31075 * C31082 * C31107)))) /
        C30826;
    const double C1141 =
        (ae * (C31167 + C31075 * (C31075 * C31172 + C31230 * be) +
               C31075 * C31230 * be) +
         C31074 * (C31203 + be * C31214 + C31075 * C31218)) /
        C30826;
    const double C2223 = C113 * C1134;
    const double C4532 = C2663 * C1134;
    const double C7211 = C5282 * C1134;
    const double C11392 = C818 * C1134;
    const double C12716 = C2662 * C1134;
    const double C16229 = C14632 * C1134;
    const double C6880 = C5283 * C1131;
    const double C7385 = C5282 * C1131;
    const double C11069 = C819 * C1131;
    const double C11562 = C818 * C1131;
    const double C13120 = C2663 * C1131;
    const double C17204 = C14632 * C1131;
    const double C7375 = C5283 * C1647;
    const double C11552 = C819 * C1647;
    const double C31340 = C31333 + C31334;
    const double C31330 = C31327 + C31328;
    const double C31750 = C31118 + C31748;
    const double C1782 = C31993 * C386;
    const double C4539 = C32251 * C386;
    const double C16235 = C14625 * C386;
    const double C2228 = C31993 * C698;
    const double C3210 = C32055 * C698;
    const double C4749 = C32251 * C698;
    const double C5891 = C5276 * C698;
    const double C15179 = C32055 * C698;
    const double C18730 = C14625 * C698;
    const double C156 = C31993 * C130;
    const double C2690 = C32251 * C130;
    const double C14659 = C14625 * C130;
    const double C489 = C31993 * C260;
    const double C2683 = C32055 * C260;
    const double C3058 = C32251 * C260;
    const double C5312 = C5276 * C260;
    const double C14652 = C32055 * C260;
    const double C15027 = C14625 * C260;
    const double C837 = C32282 * C268;
    const double C3052 = C32055 * C268;
    const double C5301 = C32282 * C268;
    const double C5715 = C5276 * C268;
    const double C15021 = C32055 * C268;
    const double C17341 = C17317 * C268;
    const double C593 = C31993 * C365;
    const double C3212 = C32251 * C365;
    const double C15181 = C14625 * C365;
    const double C1780 = C31993 * C373;
    const double C4535 = C32251 * C373;
    const double C16231 = C14625 * C373;
    const double C2226 = C31993 * C690;
    const double C3206 = C32055 * C690;
    const double C4745 = C32251 * C690;
    const double C5885 = C5276 * C690;
    const double C15175 = C32055 * C690;
    const double C18726 = C14625 * C690;
    const double C2062 = C31993 * C2028;
    const double C1145 = (be * C31128 + C31075 * C31203 + ae * C31074 * C31250 +
                          C31074 * (ae * C31250 + C31074 * C31218)) /
                         C30826;
    const double C987 =
        (2 * (C31075 * C31167 + C31549 * be) +
         C31075 * (C31167 + C31075 * C31250 + C31075 * C31230 * be) +
         (C31549 + C31230 * C31209) * be) /
        C30824;
    const double C1124 =
        (C31074 * (C31167 + C31075 * C31250 + C31611 * be)) / C30824;
    const double C1132 =
        (C31075 * C31167 + C31549 * be + C31250 * C31292) / C30824;
    const double C2040 =
        (3 * (C31203 + ae * C31297 + C31074 * C31301) +
         ae * (2 * C31297 + C31074 * C31302) +
         C31074 *
             (2 * C31301 + ae * C31302 +
              C31074 * (C31102 + ae * C31074 * C31182 +
                        C31074 * (ae * C31182 + C31074 * C31082 * C31107)))) /
        C30826;
    const double C31245 = C31159 + C31244;
    const double C31422 = C31419 + C31420;
    const double C11774 = C31993 * C2039;
    const double C14125 = C32251 * C2039;
    const double C27567 = C14625 * C2039;
    const double C11772 = C31993 * C2030;
    const double C14121 = C32251 * C2030;
    const double C27563 = C14625 * C2030;
    const double C31470 = C31463 + C31464;
    const double C31460 = C31457 + C31458;
    const double C31264 = C31262 + C31263;
    const double C31558 = C31556 + C31557;
    const double C1138 =
        (C31075 * C31131 + C31074 * (C31074 * C31221 + C31616 * ae) +
         C31074 * C31616 * ae) /
        C30824;
    const double C2546 =
        (2 * (C31074 * C31221 + C31616 * ae) +
         C31074 * (C31221 + C31074 * (C31074 * C31075 * C31148 + C31271 * ae) +
                   C31074 * C31271 * ae) +
         (C31616 + C31271 * C31292) * ae) /
        C30824;
    const double C1120 = C31075 * C31553 + C31616 * C31292;
    const double C2540 =
        2 * C31074 * C31616 + C31074 * (C31616 + C31271 * C31292);
    const double C31676 = C31672 + C31673;
    const double C1496 = C819 * C1127;
    const double C4750 = C2663 * C1127;
    const double C5892 = C5283 * C1127;
    const double C18731 = C14632 * C1127;
    const double C2063 = C113 * C2029;
    const double C1316 = C819 * C981;
    const double C5716 = C5283 * C981;
    const double C1490 = C819 * C1115;
    const double C4746 = C2663 * C1115;
    const double C5886 = C5283 * C1115;
    const double C18727 = C14632 * C1115;
    const double C2061 = C113 * C2020;
    const double C31782 = C31778 + C31779;
    const double C12512 = C2663 * C2544;
    const double C13558 = C113 * C2544;
    const double C16564 = C14632 * C2544;
    const double C12508 = C2663 * C2539;
    const double C13556 = C113 * C2539;
    const double C16560 = C14632 * C2539;
    const double C31258 = C31075 * C31256;
    const double C31432 = 2 * C31256;
    const double C31486 = ae * C31256;
    const double C31485 = C31074 * C31256;
    const double C2548 =
        (2 * (ae * C31250 + C31074 * C31218) + ae * (C31250 + C31256 * C31292) +
         C31074 *
             (C31218 + ae * C31074 * C31256 +
              C31074 * (ae * C31256 +
                        C31074 * (be * C31143 + C31075 * C31082 * C31107)))) /
        C30826;
    const double C2543 =
        (2 * C31074 * C31250 + C31074 * (C31250 + C31256 * C31292)) / C30824;
    const double C1135 =
        (C31128 + C31133 * C31209 + C31074 * (C31074 * C31219 + C31613 * ae) +
         C31074 * C31613 * ae) /
        C30824;
    const double C1649 = (C31074 * (2 * C31214 + C31075 * C31219) +
                          (2 * C31611 + C31075 * C31613) * ae) /
                         C30824;
    const double C983 = 3 * (C31549 + C31230 * C31209) +
                        C31075 * (2 * C31611 + C31075 * C31613);
    const double C1119 = C31549 + C31230 * C31209 + C31613 * C31292;
    const double C1644 = C31074 * (2 * C31611 + C31075 * C31613);
    const double C7198 =
        2 * C31074 * C31613 + C31074 * (C31613 + C31414 * C31292);
    const double C2033 =
        (3 * (C31128 + C31074 * C31668 + C31666 * ae) +
         C31074 * (2 * C31668 +
                   C31074 * (C31133 + C31074 * (C31074 * C31143 + C31253 * ae) +
                             C31074 * C31253 * ae) +
                   C31669 * ae) +
         (2 * C31666 + C31074 * C31669) * ae) /
        C30824;
    const double C2022 = 3 * (C31549 + C31230 * C31292) +
                         C31074 * (2 * C31666 + C31074 * C31669);
    const double C31794 = C31074 * C31790;
    const double C31692 = C31690 + C31691;
    const double C31730 = C31726 + C31727;
    const double C6891 = C5283 * C6848;
    const double C11080 = C819 * C6848;
    const double C14526 = C2663 * C6848;
    const double C27968 = C14632 * C6848;
    const double C6885 = C5283 * C6844;
    const double C11074 = C819 * C6844;
    const double C14522 = C2663 * C6844;
    const double C27964 = C14632 * C6844;
    const double C6851 =
        (3 * (C31206 + C31074 * C31723 + C31721 * ae) +
         C31074 * (2 * C31723 +
                   C31074 * (C31319 + C31074 * (C31074 * C31335 + C31361 * ae) +
                             C31074 * C31361 * ae) +
                   C31724 * ae) +
         (2 * C31721 + C31074 * C31724) * ae) /
        C30824;
    const double C6845 = 3 * (C31606 + C31241 * C31292) +
                         C31074 * (2 * C31721 + C31074 * C31724);
    const double C31809 = C31074 * C31805;
    const double C31366 = C31162 + C31365;
    const double C31423 = C31242 + C31421;
    const double C31512 = 2 * C31506;
    const double C31510 = ae * C31506;
    const double C31751 = C31747 + C31749;
    const double C31768 = C31121 + C31766;
    const double C31111 = C31105 + C31110;
    const double C31225 = C31222 + C31223;
    const double C31308 = C31305 + C31306;
    const double C1323 = C32282 * C999;
    const double C5723 = C32282 * C999;
    const double C7528 = C32292 * C999;
    const double C15457 = C32292 * C999;
    const double C17763 = C17317 * C999;
    const double C2064 = C31993 * C2038;
    const double C31348 = C31345 + C31346;
    const double C31511 = C31507 + C31508;
    const double C31407 = C31075 * C31405;
    const double C31487 = C31074 * C31405;
    const double C31501 = C31074 * C31497;
    const double C31478 = C31475 + C31476;
    const double C31150 = C31145 + C31149;
    const double C31226 = C31138 + C31224;
    const double C31349 = C31343 + C31347;
    const double C31408 = C31075 * C31406;
    const double C7200 =
        (2 * (C31074 * C31219 + C31613 * ae) +
         C31074 * (C31219 + C31074 * (C31074 * C31406 + C31414 * ae) +
                   C31074 * C31414 * ae) +
         (C31613 + C31414 * C31292) * ae) /
        C30824;
    const double C31189 = C31184 + C31188;
    const double C31272 = C31266 + C31270;
    const double C31309 = C31177 + C31307;
    const double C31385 = C31175 + C31382;
    const double C31513 = C31363 + C31509;
    const double C31440 = C31075 * C31439;
    const double C31488 = C31439 * C31292;
    const double C31502 = C31074 * C31499;
    const double C31479 = C31473 + C31477;
    const double C171 = C165 * C32010;
    const double C1777 = C165 * C32318;
    const double C3452 = C165 * C32252;
    const double C10048 = C165 * C10040;
    const double C20330 = C165 * C20324;
    const double C173 = C167 * C32010;
    const double C3456 = C167 * C32252;
    const double C20334 = C167 * C20324;
    const double C170 = C164 * C114;
    const double C1776 = C164 * C1768;
    const double C3451 = C164 * C3448;
    const double C2558 = C31993 * C1143;
    const double C4525 = C32055 * C1143;
    const double C6877 = C5276 * C1143;
    const double C7384 = C5275 * C1143;
    const double C11561 = C32317 * C1143;
    const double C13119 = C32251 * C1143;
    const double C16544 = C32055 * C1143;
    const double C17203 = C14625 * C1143;
    const double C6890 = C5276 * C2547;
    const double C12047 = C31993 * C2547;
    const double C12505 = C32055 * C2547;
    const double C14525 = C32251 * C2547;
    const double C16557 = C32055 * C2547;
    const double C27967 = C14625 * C2547;
    const double C5161 = C32055 * C1122;
    const double C6861 = C32282 * C1122;
    const double C7368 = C5276 * C1122;
    const double C11050 = C32282 * C1122;
    const double C17193 = C32055 * C1122;
    const double C19569 = C17317 * C1122;
    const double C2556 = C31993 * C1128;
    const double C4521 = C32055 * C1128;
    const double C6871 = C5276 * C1128;
    const double C7378 = C5275 * C1128;
    const double C11555 = C32317 * C1128;
    const double C13115 = C32251 * C1128;
    const double C16540 = C32055 * C1128;
    const double C17199 = C14625 * C1128;
    const double C6884 = C5276 * C2541;
    const double C12045 = C31993 * C2541;
    const double C12501 = C32055 * C2541;
    const double C14521 = C32251 * C2541;
    const double C16553 = C32055 * C2541;
    const double C27963 = C14625 * C2541;
    const double C2052 = C1774 - C1775;
    const double C2388 = C1775 - C1774;
    const double C12496 = C4531 - C4530;
    const double C12916 = C4530 - C4531;
    const double C4953 = C3201 - C3202;
    const double C4949 = C3202 - C3201;
    const double C13425 = C2060 - C2059;
    const double C13691 = C2059 - C2060;
    const double C2051 = C1772 - C1773;
    const double C2387 = C1773 - C1772;
    const double C12494 = C4527 - C4526;
    const double C12914 = C4526 - C4527;
    const double C4951 = C3197 - C3198;
    const double C4947 = C3198 - C3197;
    const double C13424 = C2058 - C2057;
    const double C13690 = C2057 - C2058;
    const double C11775 = C113 * C2031;
    const double C14124 = C2662 * C2031;
    const double C3454 = C1779 * C32097;
    const double C10050 = C1779 * C10041;
    const double C20332 = C1779 * C32097;
    const double C172 = C166 * C114;
    const double C3455 = C166 * C3448;
    const double C1789 = C1778 * C1769;
    const double C3453 = C1778 * C3449;
    const double C10049 = C1778 * C10044;
    const double C20331 = C1778 * C20327;
    const double C133 = (4 * (2 * C31128 + C31082 * C31131) +
                         C31082 * (3 * C31131 + C31082 * C31140)) /
                        C30824;
    const double C263 = (C31075 * (3 * C31131 + C31082 * C31140)) / C30824;
    const double C271 =
        (2 * C31128 + C31082 * C31131 + C31140 * C31209) / C30824;
    const double C6177 = (4 * (2 * C31206 + C31075 * C31212) +
                          C31075 * (3 * C31212 + C31075 * C31331)) /
                         C30824;
    const double C132 = (4 * (2 * C31167 + C31082 * C31170) +
                         C31082 * (3 * C31170 + C31082 * C31179)) /
                        C30824;
    const double C262 = (C31075 * (3 * C31170 + C31082 * C31179) +
                         (3 * (C31228 + C31198 * C31090) +
                          C31082 * (2 * C31230 + C31082 * C31233)) *
                             be) /
                        C30824;
    const double C367 = (C31074 * (3 * C31170 + C31082 * C31179)) / C30824;
    const double C375 =
        (2 * C31167 + C31082 * C31170 + C31179 * C31292) / C30824;
    const double C11955 = C31993 * C2032;
    const double C11763 = (4 * (2 * C31289 + C31074 * C31295) +
                           C31074 * (3 * C31295 + C31074 * C31461)) /
                          C30824;
    const double C31312 = C31281 * be;
    const double C31562 = C31082 * C31281;
    const double C31680 = C31075 * C31281;
    const double C984 = 3 * (C31553 + C31233 * C31209) +
                        C31075 * (2 * C31616 + C31075 * C31618);
    const double C1121 = C31553 + C31233 * C31209 + C31618 * C31292;
    const double C1645 = C31074 * (2 * C31616 + C31075 * C31618);
    const double C2023 = 3 * (C31553 + C31233 * C31292) +
                         C31074 * (2 * C31674 + C31074 * C31677);
    const double C31388 = C31386 * be;
    const double C31696 = C31075 * C31386;
    const double C6846 = 3 * (C31608 + C31356 * C31292) +
                         C31074 * (2 * C31728 + C31074 * C31731);
    const double C31812 = C31808 + C31810;
    const double C31708 = C31706 + C31707;
    const double C11863 = 3 * (C31611 + C31255 * C31292) +
                          C31074 * (2 * C31780 + C31074 * C31783);
    const double C31797 = C31793 + C31795;
    const double C31771 = C31074 * C31769;
    const double C31916 = C31912 - C31915;
    const double C32301 = C32268 / C30824;
    const double C31924 = C31920 - C31923;
    const double C32315 = C32300 / C30860;
    const double C30919 = C30917 / C30824;
    const double C30892 = C31993 - C30888;
    const double C5325 = C5305 - C5306;
    const double C5322 = C5299 - C5300;
    const double C8995 = C5878 - C5879;
    const double C8989 = C5879 - C5878;
    const double C8992 = C5872 - C5873;
    const double C8986 = C5873 - C5872;
    const double C14669 = C14648 - C14649;
    const double C14667 = C14644 - C14645;
    const double C16985 = C15170 - C15171;
    const double C16981 = C15171 - C15170;
    const double C16983 = C15166 - C15167;
    const double C16979 = C15167 - C15166;
    const double C30901 = C30897 + C32055;
    const double C30929 = C30926 - C30928;
    const double C17356 = C32051 * C139;
    const double C17350 = C32051 * C128;
    const double C17343 = C32051 * C138;
    const double C17337 = C32051 * C126;
    const double C17331 = C32051 * C137;
    const double C17325 = C32051 * C124;
    const double C17759 = C32051 * C276;
    const double C17753 = C32051 * C258;
    const double C17747 = C32051 * C275;
    const double C17741 = C32051 * C256;
    const double C17929 = C32051 * C381;
    const double C17923 = C32051 * C363;
    const double C17917 = C32051 * C380;
    const double C17911 = C32051 * C361;
    const double C19596 = C32051 * C385;
    const double C19590 = C32051 * C371;
    const double C19584 = C32051 * C384;
    const double C19578 = C32051 * C369;
    const double C19571 = C32051 * C379;
    const double C19565 = C32051 * C359;
    const double C19802 = C32051 * C697;
    const double C19796 = C32051 * C688;
    const double C20222 = C32051 * C696;
    const double C20216 = C32051 * C686;
    const double C30353 = C32051 * C2036;
    const double C30347 = C32051 * C2024;
    const double C30807 = C32051 * C1143;
    const double C30801 = C32051 * C1128;
    const double C32254 = C32051 * C32045;
    const double C32290 = C32256 + C32051;
    const double C2706 = C2699 + C2700;
    const double C2705 = C2697 + C2698;
    const double C854 = C32305 * C277;
    const double C848 = C32305 * C260;
    const double C841 = C32305 * C276;
    const double C835 = C32305 * C258;
    const double C829 = C32305 * C275;
    const double C823 = C32305 * C256;
    const double C1321 = C32305 * C281;
    const double C1315 = C32305 * C268;
    const double C1309 = C32305 * C280;
    const double C1303 = C32305 * C266;
    const double C1495 = C32305 * C698;
    const double C1489 = C32305 * C690;
    const double C1483 = C32305 * C697;
    const double C1477 = C32305 * C688;
    const double C11079 = C32305 * C2547;
    const double C11073 = C32305 * C2541;
    const double C11066 = C32305 * C1143;
    const double C11060 = C32305 * C1128;
    const double C11054 = C32305 * C696;
    const double C11048 = C32305 * C686;
    const double C11551 = C32305 * C1140;
    const double C11545 = C32305 * C1122;
    const double C17358 = C32058 * C277;
    const double C17352 = C32058 * C260;
    const double C17345 = C32058 * C276;
    const double C17339 = C32058 * C258;
    const double C17333 = C32058 * C275;
    const double C17327 = C32058 * C256;
    const double C17761 = C32058 * C281;
    const double C17755 = C32058 * C268;
    const double C17749 = C32058 * C280;
    const double C17743 = C32058 * C266;
    const double C17931 = C32058 * C698;
    const double C17925 = C32058 * C690;
    const double C17919 = C32058 * C697;
    const double C17913 = C32058 * C688;
    const double C19586 = C32058 * C1143;
    const double C19580 = C32058 * C1128;
    const double C19573 = C32058 * C696;
    const double C19567 = C32058 * C686;
    const double C20224 = C32058 * C1140;
    const double C20218 = C32058 * C1122;
    const double C30355 = C32058 * C2547;
    const double C30349 = C32058 * C2541;
    const double C32258 = C32058 / C30860;
    const double C32255 = C32058 * C32045;
    const double C7486 = C32319 - (C32051 * C32047) / C30824;
    const double C5315 = C5281 * C129;
    const double C5309 = C5281 * C118;
    const double C5304 = C5281 * C127;
    const double C5298 = C5281 * C117;
    const double C5292 = C5281 * C125;
    const double C5286 = C5281 * C116;
    const double C5718 = C5281 * C259;
    const double C5712 = C5281 * C246;
    const double C5706 = C5281 * C257;
    const double C5700 = C5281 * C245;
    const double C5888 = C5281 * C364;
    const double C5882 = C5281 * C351;
    const double C5876 = C5281 * C362;
    const double C5870 = C5281 * C350;
    const double C6887 = C5281 * C2025;
    const double C6881 = C5281 * C2018;
    const double C6876 = C5281 * C370;
    const double C6870 = C5281 * C354;
    const double C6864 = C5281 * C360;
    const double C6858 = C5281 * C349;
    const double C7209 = C5281 * C372;
    const double C7203 = C5281 * C355;
    const double C7383 = C5281 * C1130;
    const double C7377 = C5281 * C1116;
    const double C7371 = C5281 * C687;
    const double C7365 = C5281 * C681;
    const double C8785 = C5281 * C689;
    const double C8779 = C5281 * C682;
    const double C860 = C839 - C840;
    const double C857 = C833 - C834;
    const double C21776 = C1480 - C1481;
    const double C21770 = C1481 - C1480;
    const double C21773 = C1474 - C1475;
    const double C21767 = C1475 - C1474;
    const double C11085 = C11064 - C11065;
    const double C11082 = C11058 - C11059;
    const double C31006 = C31004 / C30824;
    const double C30979 = C32010 - C30975;
    const double C30988 = C30984 + C32097;
    const double C31016 = C31013 - C31015;
    const double C23817 = C165 * C32093;
    const double C32260 = C32093 * C32087;
    const double C32296 = C32262 + C32093;
    const double C1790 = C1779 * C32307;
    const double C23819 = C1779 * C32100;
    const double C32264 = C32100 / C30860;
    const double C32261 = C32100 * C32087;
    const double C13219 = C32321 - (C32093 * C32089) / C30824;
    const double C10047 = C164 * C10043;
    const double C169 = C158 - C159;
    const double C2704 = C2687 - C2688;
    const double C14673 = C14656 - C14657;
    const double C862 = C843 - C844;
    const double C5326 = C5307 - C5308;
    const double C3458 = C595 - C594;
    const double C3928 = C594 - C595;
    const double C7870 = C32292 * C1001;
    const double C15799 = C32292 * C1001;
    const double C1485 = C32282 * C1141;
    const double C4743 = C32055 * C1141;
    const double C5881 = C32282 * C1141;
    const double C8788 = C5276 * C1141;
    const double C16775 = C32055 * C1141;
    const double C17921 = C17317 * C1141;
    const double C19804 = C32058 * C1141;
    const double C21570 = C32305 * C1141;
    const double C6180 =
        (4 * (2 * C31210 + be * C31212 + C31075 * C31330) +
         be * (3 * C31212 + C31075 * C31331) +
         C31075 *
             (3 * C31330 + be * C31331 +
              C31075 * (2 * C31324 + be * C31326 +
                        C31075 * (C31098 + be * C31075 * C31136 +
                                  C31075 * (be * C31136 + C31075 * C31107))))) /
        C30826;
    const double C31752 = C31750 + C31745;
    const double C1792 = C1782 - C1783;
    const double C2392 = C1783 - C1782;
    const double C4210 = C3210 - C3209;
    const double C4957 = C3209 - C3210;
    const double C18231 = C15179 - C15178;
    const double C18930 = C15178 - C15179;
    const double C168 = C156 - C157;
    const double C2702 = C2683 - C2684;
    const double C14671 = C14652 - C14653;
    const double C859 = C837 - C838;
    const double C5323 = C5301 - C5302;
    const double C3457 = C593 - C592;
    const double C3927 = C592 - C593;
    const double C1791 = C1780 - C1781;
    const double C2391 = C1781 - C1780;
    const double C4208 = C3206 - C3205;
    const double C4955 = C3205 - C3206;
    const double C18229 = C15175 - C15174;
    const double C18928 = C15174 - C15175;
    const double C2224 = C31993 * C1145;
    const double C4533 = C32055 * C1145;
    const double C7212 = C5276 * C1145;
    const double C11393 = C32305 * C1145;
    const double C12717 = C32251 * C1145;
    const double C16228 = C32055 * C1145;
    const double C16781 = C14625 * C1145;
    const double C19598 = C32058 * C1145;
    const double C1305 = C32282 * C987;
    const double C5705 = C32282 * C987;
    const double C7503 = C32292 * C987;
    const double C15432 = C32292 * C987;
    const double C17745 = C17317 * C987;
    const double C1479 = C32282 * C1124;
    const double C4739 = C32055 * C1124;
    const double C5875 = C32282 * C1124;
    const double C8782 = C5276 * C1124;
    const double C16771 = C32055 * C1124;
    const double C17915 = C17317 * C1124;
    const double C19798 = C32058 * C1124;
    const double C21564 = C32305 * C1124;
    const double C2222 = C31993 * C1132;
    const double C4529 = C32055 * C1132;
    const double C7206 = C5276 * C1132;
    const double C11387 = C32305 * C1132;
    const double C12713 = C32251 * C1132;
    const double C16224 = C32055 * C1132;
    const double C16777 = C14625 * C1132;
    const double C19592 = C32058 * C1132;
    const double C11957 = C31993 * C2040;
    const double C31246 = C31245 + C31243;
    const double C11780 = C11772 - C11773;
    const double C11767 =
        (4 * (2 * C31293 + ae * C31295 + C31074 * C31460) +
         ae * (3 * C31295 + C31074 * C31461) +
         C31074 *
             (3 * C31460 + ae * C31461 +
              C31074 * (2 * C31454 + ae * C31456 +
                        C31074 * (C31098 + ae * C31074 * C31175 +
                                  C31074 * (ae * C31175 + C31074 * C31107))))) /
        C30826;
    const double C989 =
        (2 * (C31075 * C31170 + C31553 * be) +
         C31075 * (C31170 + C31075 * C31264 + C31075 * C31233 * be) +
         (C31553 + C31233 * C31209) * be) /
        C30824;
    const double C1126 =
        (C31074 * (C31170 + C31075 * C31264 + C31616 * be)) / C30824;
    const double C1136 =
        (C31075 * C31170 + C31553 * be + C31264 * C31292) / C30824;
    const double C270 =
        (2 * C31167 + C31082 * C31170 +
         C31075 * (C31075 * C31179 + C31558 * be) + C31075 * C31558 * be) /
        C30824;
    const double C368 = (C31074 * (3 * C31131 + C31082 * C31140) +
                         (3 * C31553 + C31082 * C31558) * ae) /
                        C30824;
    const double C376 =
        (2 * C31128 + C31082 * C31131 +
         C31074 * (C31074 * C31140 + C31558 * ae) + C31074 * C31558 * ae) /
        C30824;
    const double C692 = (C31074 * (C31075 * C31179 + C31558 * be)) / C30824;
    const double C693 =
        (C31074 * C31075 * C31140 + C31075 * C31558 * ae) / C30824;
    const double C120 = 4 * (2 * C31549 + C31082 * C31553) +
                        C31082 * (3 * C31553 + C31082 * C31558);
    const double C248 = C31075 * (3 * C31553 + C31082 * C31558);
    const double C252 = 2 * C31549 + C31082 * C31553 + C31558 * C31209;
    const double C353 = C31074 * (3 * C31553 + C31082 * C31558);
    const double C357 = 2 * C31549 + C31082 * C31553 + C31558 * C31292;
    const double C684 = C31074 * C31075 * C31558;
    const double C1295 =
        2 * C31075 * C31558 + C31075 * (C31558 + C31281 * C31209);
    const double C1469 = C31074 * (C31558 + C31281 * C31209);
    const double C2378 =
        2 * C31074 * C31558 + C31074 * (C31558 + C31281 * C31292);
    const double C2231 = C113 * C1138;
    const double C4540 = C2663 * C1138;
    const double C16236 = C14632 * C1138;
    const double C2229 = C113 * C1120;
    const double C4536 = C2663 * C1120;
    const double C16232 = C14632 * C1120;
    const double C2035 =
        (3 * (C31131 + C31074 * C31676 + C31674 * ae) +
         C31074 * (2 * C31676 +
                   C31074 * (C31138 + C31074 * (C31074 * C31148 + C31269 * ae) +
                             C31074 * C31269 * ae) +
                   C31677 * ae) +
         (2 * C31674 + C31074 * C31677) * ae) /
        C30824;
    const double C11865 =
        (3 * (C31214 + C31074 * C31782 + C31780 * ae) +
         C31074 * (2 * C31782 +
                   C31074 * (C31396 +
                             C31074 * (C31074 * C31075 * C31399 + C31435 * ae) +
                             C31074 * C31435 * ae) +
                   C31783 * ae) +
         (2 * C31780 + C31074 * C31783) * ae) /
        C30824;
    const double C31259 = C31172 + C31258;
    const double C12513 = C32055 * C2548;
    const double C13559 = C31993 * C2548;
    const double C16565 = C32055 * C2548;
    const double C12509 = C32055 * C2543;
    const double C13557 = C31993 * C2543;
    const double C16561 = C32055 * C2543;
    const double C7213 = C5283 * C1135;
    const double C11394 = C819 * C1135;
    const double C12718 = C2663 * C1135;
    const double C16782 = C14632 * C1135;
    const double C8789 = C5283 * C1649;
    const double C21571 = C819 * C1649;
    const double C7207 = C5283 * C1119;
    const double C11388 = C819 * C1119;
    const double C12714 = C2663 * C1119;
    const double C16778 = C14632 * C1119;
    const double C8783 = C5283 * C1644;
    const double C21565 = C819 * C1644;
    const double C11956 = C113 * C2033;
    const double C11954 = C113 * C2022;
    const double C31796 = C31133 + C31794;
    const double C6248 = (C31074 * (3 * C31212 + C31075 * C31331) +
                          (3 * C31608 + C31075 * C31692) * ae) /
                         C30824;
    const double C6251 =
        (2 * C31206 + C31075 * C31212 +
         C31074 * (C31074 * C31331 + C31692 * ae) + C31074 * C31692 * ae) /
        C30824;
    const double C6174 = 4 * (2 * C31606 + C31075 * C31608) +
                         C31075 * (3 * C31608 + C31075 * C31692);
    const double C6244 = C31074 * (3 * C31608 + C31075 * C31692);
    const double C6245 = 2 * C31606 + C31075 * C31608 + C31692 * C31292;
    const double C7360 =
        2 * C31074 * C31692 + C31074 * (C31692 + C31386 * C31292);
    const double C6852 =
        (3 * (C31212 + C31074 * C31730 + C31728 * ae) +
         C31074 * (2 * C31730 +
                   C31074 * (C31326 + C31074 * (C31074 * C31344 + C31381 * ae) +
                             C31074 * C31381 * ae) +
                   C31731 * ae) +
         (2 * C31728 + C31074 * C31731) * ae) /
        C30824;
    const double C12050 = C113 * C6851;
    const double C14126 = C2663 * C6851;
    const double C27568 = C14632 * C6851;
    const double C12048 = C113 * C6845;
    const double C14122 = C2663 * C6845;
    const double C27564 = C14632 * C6845;
    const double C31811 = C31319 + C31809;
    const double C31367 = C31366 + C31364;
    const double C6854 =
        (3 * (C31210 + ae * C31418 + C31074 * C31422) +
         ae * (2 * C31418 + C31074 * C31423) +
         C31074 * (2 * C31422 + ae * C31423 +
                   C31074 * (C31324 + ae * C31074 * C31363 +
                             C31074 * (ae * C31363 + C31074 * C31342)))) /
        C30826;
    const double C6849 = (3 * (C31237 + C31242 * C31292) +
                          C31074 * (2 * C31418 + C31074 * C31423)) /
                         C30824;
    const double C31514 = C31324 + C31510;
    const double C11761 = 4 * (2 * C31658 + C31074 * C31661) +
                          C31074 * (3 * C31661 + C31074 * C31751);
    const double C31770 = C31768 + C31763;
    const double C142 =
        (5 * (3 * C31100 + C31082 * C31111) +
         C31082 * (4 * C31111 +
                   C31082 * (3 * C31109 +
                             C31082 * (2 * C31082 * C31107 +
                                       C31082 * (C31107 + std::pow(C31078, 8) *
                                                              bs[8] * C31080 *
                                                              C31090))))) /
        C30826;
    const double C278 =
        (be * (3 * (C31118 + C31121 * C31090) +
               C31082 *
                   (2 * C31082 * C31121 +
                    C31082 * (C31121 + C31095 * C31096 * C31115 * C31090))) +
         C31075 * (3 * C31100 + C31082 * C31111)) /
        C30826;
    const double C282 =
        (2 * C31082 * C31093 + C31082 * C31100 + be * C31075 * C31140 +
         C31075 * (be * C31140 + C31075 * C31111)) /
        C30826;
    const double C383 =
        (ae * (3 * (C31159 + C31162 * C31090) +
               C31082 *
                   (2 * C31082 * C31162 +
                    C31082 * (C31162 + C31095 * C31096 * C31156 * C31090))) +
         C31074 * (3 * C31100 + C31082 * C31111)) /
        C30826;
    const double C387 =
        (2 * C31082 * C31093 + C31082 * C31100 + ae * C31074 * C31179 +
         C31074 * (ae * C31179 + C31074 * C31111)) /
        C30826;
    const double C699 = (ae * (C31075 * C31179 +
                               (2 * C31082 * C31198 +
                                C31082 * (C31198 + C31089 * C31091 * C31090)) *
                                   be) +
                         C31074 * (be * C31140 + C31075 * C31111)) /
                        C30826;
    const double C1142 =
        (ae * (C31170 + C31075 * (C31075 * C31177 + C31233 * be) +
               C31075 * C31233 * be) +
         C31074 * (C31100 + be * C31221 + C31075 * C31225)) /
        C30826;
    const double C1147 = (be * C31131 + C31075 * C31100 + ae * C31074 * C31264 +
                          C31074 * (ae * C31264 + C31074 * C31225)) /
                         C30826;
    const double C31350 = C31075 * C31348;
    const double C31427 = C31074 * C31348;
    const double C31515 = C31074 * C31511;
    const double C31409 = C31404 + C31407;
    const double C31489 = C31486 + C31487;
    const double C31503 = C31500 + C31501;
    const double C31480 = C31074 * C31478;
    const double C31151 = C31082 * C31150;
    const double C1298 =
        (2 * (be * C31140 + C31075 * C31111) + be * (C31140 + C31150 * C31209) +
         C31075 * (C31111 + be * C31075 * C31150 +
                   C31075 * (be * C31150 +
                             C31075 * (2 * C31082 * C31107 +
                                       C31082 * (C31107 + std::pow(C31078, 8) *
                                                              bs[8] * C31080 *
                                                              C31090))))) /
        C30826;
    const double C1297 =
        (2 * C31075 * C31140 + C31075 * (C31140 + C31150 * C31209)) / C30824;
    const double C1471 = (C31074 * (C31140 + C31150 * C31209) +
                          (C31558 + C31281 * C31209) * ae) /
                         C30824;
    const double C2380 =
        (2 * (C31074 * C31140 + C31558 * ae) +
         C31074 * (C31140 + C31074 * (C31074 * C31150 + C31281 * ae) +
                   C31074 * C31281 * ae) +
         (C31558 + C31281 * C31292) * ae) /
        C30824;
    const double C1002 =
        (3 * (C31100 + be * C31221 + C31075 * C31225) +
         be * (2 * C31221 + C31075 * C31226) +
         C31075 * (2 * C31225 + be * C31226 +
                   C31075 * (C31109 + be * C31075 * C31148 +
                             C31075 * (be * C31148 +
                                       C31075 * (C31107 + std::pow(C31078, 8) *
                                                              bs[8] * C31080 *
                                                              C31090))))) /
        C30826;
    const double C996 = (3 * (C31131 + C31138 * C31209) +
                         C31075 * (2 * C31221 + C31075 * C31226)) /
                        C30824;
    const double C1139 =
        (C31131 + C31138 * C31209 + C31074 * (C31074 * C31226 + C31618 * ae) +
         C31074 * C31618 * ae) /
        C30824;
    const double C1651 = (C31074 * (2 * C31221 + C31075 * C31226) +
                          (2 * C31616 + C31075 * C31618) * ae) /
                         C30824;
    const double C31351 = C31075 * C31349;
    const double C7362 =
        (2 * (C31074 * C31331 + C31692 * ae) +
         C31074 * (C31331 + C31074 * (C31074 * C31349 + C31386 * ae) +
                   C31074 * C31386 * ae) +
         (C31692 + C31386 * C31292) * ae) /
        C30824;
    const double C31410 = C31402 + C31408;
    const double C31190 = C31082 * C31189;
    const double C31311 = C31075 * C31189;
    const double C1472 =
        (ae * (C31179 + C31075 * (C31075 * C31189 + C31281 * be) +
               C31075 * C31281 * be) +
         C31074 * (C31111 + be * C31075 * C31150 +
                   C31075 * (be * C31150 +
                             C31075 * (2 * C31082 * C31107 +
                                       C31082 * (C31107 + std::pow(C31078, 8) *
                                                              bs[8] * C31080 *
                                                              C31090))))) /
        C30826;
    const double C2381 =
        (2 * (ae * C31179 + C31074 * C31111) + ae * (C31179 + C31189 * C31292) +
         C31074 * (C31111 + ae * C31074 * C31189 +
                   C31074 * (ae * C31189 +
                             C31074 * (2 * C31082 * C31107 +
                                       C31082 * (C31107 + std::pow(C31078, 8) *
                                                              bs[8] * C31080 *
                                                              C31090))))) /
        C30826;
    const double C2379 =
        (2 * C31074 * C31179 + C31074 * (C31179 + C31189 * C31292)) / C30824;
    const double C31274 = C31075 * C31272;
    const double C2549 =
        (2 * (ae * C31264 + C31074 * C31225) + ae * (C31264 + C31272 * C31292) +
         C31074 * (C31225 + ae * C31074 * C31272 +
                   C31074 * (ae * C31272 +
                             C31074 * (be * C31148 +
                                       C31075 * (C31107 + std::pow(C31078, 8) *
                                                              bs[8] * C31080 *
                                                              C31090))))) /
        C30826;
    const double C2545 =
        (2 * C31074 * C31264 + C31074 * (C31264 + C31272 * C31292)) / C30824;
    const double C2041 =
        (3 * (C31100 + ae * C31304 + C31074 * C31308) +
         ae * (2 * C31304 + C31074 * C31309) +
         C31074 * (2 * C31308 + ae * C31309 +
                   C31074 * (C31109 + ae * C31074 * C31187 +
                             C31074 * (ae * C31187 +
                                       C31074 * (C31107 + std::pow(C31078, 8) *
                                                              bs[8] * C31080 *
                                                              C31090))))) /
        C30826;
    const double C2034 = (3 * (C31170 + C31177 * C31292) +
                          C31074 * (2 * C31304 + C31074 * C31309)) /
                         C30824;
    const double C31387 = C31385 + C31380;
    const double C31516 = C31074 * C31513;
    const double C31441 = C31182 + C31440;
    const double C31490 = C31256 + C31488;
    const double C31504 = C31498 + C31502;
    const double C31481 = C31074 * C31479;
    const double C176 = C170 + C171;
    const double C1788 = C1776 + C1777;
    const double C3459 = C3451 + C3452;
    const double C12493 = C4525 - C4524;
    const double C6897 = C6877 - C6878;
    const double C16569 = C16544 - C16545;
    const double C14119 = C12505 - C12504;
    const double C27561 = C16557 - C16556;
    const double C12491 = C4521 - C4520;
    const double C6894 = C6871 - C6872;
    const double C16567 = C16540 - C16541;
    const double C14117 = C12501 - C12500;
    const double C27559 = C16553 - C16552;
    const double C4961 = C4952 + C4953;
    const double C4959 = C4948 + C4949;
    const double C4960 = C4950 + C4951;
    const double C4958 = C4946 + C4947;
    const double C11781 = C11774 - C11775;
    const double C177 = C172 + C173;
    const double C3460 = C3455 + C3456;
    const double C162 = C113 * C133;
    const double C494 = C113 * C263;
    const double C2695 = C2663 * C263;
    const double C14664 = C14632 * C263;
    const double C855 = C819 * C271;
    const double C3063 = C2663 * C271;
    const double C5319 = C5283 * C271;
    const double C15032 = C14632 * C271;
    const double C161 = C31993 * C132;
    const double C493 = C31993 * C262;
    const double C2692 = C32055 * C262;
    const double C14661 = C32055 * C262;
    const double C597 = C31993 * C367;
    const double C1785 = C31993 * C375;
    const double C11777 = C31993 * C11763;
    const double C31563 = C31561 + C31562;
    const double C2214 =
        (C31075 * C31140 + C31074 * (C31074 * C31075 * C31150 + C31680 * ae) +
         C31074 * C31680 * ae) /
        C30824;
    const double C2212 = C31075 * C31558 + C31680 * C31292;
    const double C31697 = C31695 + C31696;
    const double C12039 = 4 * (2 * C31721 + C31074 * C31724) +
                          C31074 * (3 * C31724 + C31074 * C31812);
    const double C6338 = 4 * (2 * C31611 + C31075 * C31613) +
                         C31075 * (3 * C31613 + C31075 * C31708);
    const double C6424 = C31074 * (3 * C31613 + C31075 * C31708);
    const double C7048 = 2 * C31611 + C31075 * C31613 + C31708 * C31292;
    const double C11949 = 4 * (2 * C31666 + C31074 * C31669) +
                          C31074 * (3 * C31669 + C31074 * C31797);
    const double C31773 = C31761 + C31771;
    const double C32231 = C31916 * C31906;
    const double C32270 = C32236 + C31916;
    const double C32239 = C31924 / C30860;
    const double C32235 = C31924 * C31906;
    const double C2658 = C32315 - (C31916 * C31907) / C30824;
    const double C30921 = C30916 - C30919;
    const double C30896 = C30892 * ae;
    const double C14631 = (-C30878) / C30860 - (C30892 * be) / C30824;
    const double C30905 = C30901 * be;
    const double C17359 = C30929 * C271;
    const double C17348 = C30929 * C269;
    const double C17342 = C30929 * C251;
    const double C17336 = C30929 * C267;
    const double C17330 = C30929 * C250;
    const double C17762 = C30929 * C990;
    const double C17756 = C30929 * C981;
    const double C17750 = C30929 * C988;
    const double C17744 = C30929 * C980;
    const double C17932 = C30929 * C1127;
    const double C17926 = C30929 * C1115;
    const double C17920 = C30929 * C1125;
    const double C17914 = C30929 * C1114;
    const double C19599 = C30929 * C1135;
    const double C19593 = C30929 * C1119;
    const double C19587 = C30929 * C1131;
    const double C19581 = C30929 * C1117;
    const double C19576 = C30929 * C1123;
    const double C19570 = C30929 * C1113;
    const double C19805 = C30929 * C1649;
    const double C19799 = C30929 * C1644;
    const double C20225 = C30929 * C1647;
    const double C20219 = C30929 * C1643;
    const double C30356 = C30929 * C6848;
    const double C30350 = C30929 * C6844;
    const double C6111 =
        (C30929 / C30860 + (0 * ae) / C30824) / C30860 - (0 * be) / C30824;
    const double C7495 = C30929 / C30860 - (0 * be) / C30824;
    const double C15424 = C30929 / C30860 + (0 * ae) / C30824;
    const double C32287 = C32254 / C30824;
    const double C32309 = C32290 / C30860;
    const double C2710 = C2706 * C32010;
    const double C4206 = C2706 * C32252;
    const double C22820 = C2706 * C20324;
    const double C2709 = C2705 * C114;
    const double C4205 = C2705 * C3448;
    const double C861 = C841 - C842;
    const double C858 = C835 - C836;
    const double C21777 = C1482 - C1483;
    const double C21771 = C1483 - C1482;
    const double C21774 = C1476 - C1477;
    const double C21768 = C1477 - C1476;
    const double C11086 = C11066 - C11067;
    const double C11083 = C11060 - C11061;
    const double C32310 = C32291 + C32258;
    const double C7488 = C32258 - C32056 / C30828;
    const double C32289 = C32255 / C30824;
    const double C7522 = C7486 * C138;
    const double C7514 = C7486 * C126;
    const double C7505 = C7486 * C137;
    const double C7497 = C7486 * C124;
    const double C7864 = C7486 * C275;
    const double C7856 = C7486 * C256;
    const double C8010 = C7486 * C380;
    const double C8002 = C7486 * C361;
    const double C9518 = C7486 * C384;
    const double C9510 = C7486 * C369;
    const double C9501 = C7486 * C379;
    const double C9493 = C7486 * C359;
    const double C9924 = C7486 * C696;
    const double C9916 = C7486 * C686;
    const double C5324 = C5303 - C5304;
    const double C5321 = C5297 - C5298;
    const double C8994 = C5876 - C5877;
    const double C8988 = C5877 - C5876;
    const double C8991 = C5870 - C5871;
    const double C8985 = C5871 - C5870;
    const double C6896 = C6875 - C6876;
    const double C6893 = C6869 - C6870;
    const double C31008 = C31003 - C31006;
    const double C30983 = C30979 * ae;
    const double C20326 = (-C30965) / C30860 - (C30979 * be) / C30824;
    const double C30992 = C30988 * be;
    const double C11636 =
        (C31016 / C30860 + (0 * ae) / C30824) / C30860 - (0 * be) / C30824;
    const double C13226 = C31016 / C30860 - (0 * be) / C30824;
    const double C22085 = C31016 / C30860 + (0 * ae) / C30824;
    const double C32293 = C32260 / C30824;
    const double C32312 = C32296 / C30860;
    const double C32313 = C32297 + C32264;
    const double C13221 = C32264 - C32098 / C30828;
    const double C32295 = C32261 / C30824;
    const double C10053 = C10047 + C10048;
    const double C175 = C169 * C32010;
    const double C2708 = C2703 + C2704;
    const double C3462 = C3458 * C32097;
    const double C20336 = C3458 * C32097;
    const double C21778 = C1484 - C1485;
    const double C21772 = C1485 - C1484;
    const double C8996 = C5880 - C5881;
    const double C8990 = C5881 - C5880;
    const double C11764 =
        (4 * (2 * C31660 + C31074 * C31752 + C31661 * ae) +
         C31074 *
             (3 * C31752 +
              C31074 *
                  (2 * C31744 +
                   C31074 * (C31121 + C31074 * (C31074 * C31136 + C31200 * ae) +
                             C31074 * C31200 * ae) +
                   C31746 * ae) +
              C31751 * ae) +
         (3 * C31661 + C31074 * C31751) * ae) /
        C30824;
    const double C1795 = C1792 * C32285;
    const double C10052 = C1792 * C32285;
    const double C23821 = C1792 * C23811;
    const double C4213 = C4209 + C4210;
    const double C4963 = C4956 + C4957;
    const double C174 = C168 * C114;
    const double C2707 = C2701 + C2702;
    const double C3461 = C3457 * C3449;
    const double C20335 = C3457 * C20327;
    const double C1794 = C1791 * C1770;
    const double C10051 = C1791 * C10045;
    const double C23820 = C1791 * C31016;
    const double C4212 = C4207 + C4208;
    const double C4962 = C4954 + C4955;
    const double C12497 = C4533 - C4532;
    const double C12917 = C4532 - C4533;
    const double C16549 = C16228 - C16229;
    const double C16989 = C16229 - C16228;
    const double C21775 = C1478 - C1479;
    const double C21769 = C1479 - C1478;
    const double C8993 = C5874 - C5875;
    const double C8987 = C5875 - C5874;
    const double C12495 = C4529 - C4528;
    const double C12915 = C4528 - C4529;
    const double C16547 = C16224 - C16225;
    const double C16987 = C16225 - C16224;
    const double C1144 =
        (C31086 + be * C31206 + C31075 * C31210 + ae * C31074 * C31246 +
         C31074 * (ae * C31246 +
                   C31074 * (C31093 + be * C31075 * C31121 +
                             C31075 * (be * C31121 + C31075 * C31098)))) /
        C30826;
    const double C1652 =
        (ae * (2 * C31237 + C31075 * C31246 + (C31228 + C31198 * C31209) * be) +
         C31074 * (2 * C31210 + be * C31212 +
                   C31075 * (C31093 + be * C31075 * C31121 +
                             C31075 * (be * C31121 + C31075 * C31098)))) /
        C30826;
    const double C991 = (3 * (C31165 + C31075 * C31237 + C31606 * be) +
                         C31075 * (2 * C31237 + C31075 * C31246 + C31608 * be) +
                         (2 * C31606 + C31075 * C31608) * be) /
                        C30824;
    const double C1129 =
        (C31165 + C31075 * C31237 + C31606 * be + C31246 * C31292) / C30824;
    const double C1646 =
        (C31074 * (2 * C31237 + C31075 * C31246 + C31608 * be)) / C30824;
    const double C11779 = C31993 * C11767;
    const double C1317 = C32282 * C989;
    const double C5717 = C32282 * C989;
    const double C7520 = C32292 * C989;
    const double C15449 = C32292 * C989;
    const double C17757 = C17317 * C989;
    const double C1491 = C32282 * C1126;
    const double C4747 = C32055 * C1126;
    const double C5887 = C32282 * C1126;
    const double C17927 = C17317 * C1126;
    const double C18728 = C32055 * C1126;
    const double C2230 = C31993 * C1136;
    const double C4537 = C32055 * C1136;
    const double C16233 = C32055 * C1136;
    const double C850 = C32282 * C270;
    const double C3060 = C32055 * C270;
    const double C5314 = C32282 * C270;
    const double C15029 = C32055 * C270;
    const double C17354 = C17317 * C270;
    const double C598 = C113 * C368;
    const double C1786 = C113 * C376;
    const double C3214 = C32055 * C692;
    const double C3794 = C31993 * C692;
    const double C15183 = C32055 * C692;
    const double C3217 = C2663 * C693;
    const double C3795 = C113 * C693;
    const double C15186 = C14632 * C693;
    const double C160 = C113 * C120;
    const double C492 = C113 * C248;
    const double C2691 = C2663 * C248;
    const double C14660 = C14632 * C248;
    const double C849 = C819 * C252;
    const double C3059 = C2663 * C252;
    const double C5313 = C5283 * C252;
    const double C15028 = C14632 * C252;
    const double C17353 = C30929 * C252;
    const double C596 = C113 * C353;
    const double C1784 = C113 * C357;
    const double C3213 = C2663 * C684;
    const double C3793 = C113 * C684;
    const double C15182 = C14632 * C684;
    const double C31260 = C31259 + C31257;
    const double C31798 = C31796 + C31791;
    const double C7387 = C5283 * C6251;
    const double C11564 = C819 * C6251;
    const double C30810 = C30929 * C6251;
    const double C7381 = C5283 * C6245;
    const double C11558 = C819 * C6245;
    const double C30804 = C30929 * C6245;
    const double C31813 = C31811 + C31806;
    const double C31368 = C31075 * C31367;
    const double C31372 = 3 * C31367;
    const double C31426 = ae * C31367;
    const double C31425 = C31074 * C31367;
    const double C6853 =
        (2 * (ae * C31246 + C31074 * C31330) + ae * (C31246 + C31367 * C31292) +
         C31074 * (C31330 + ae * C31074 * C31367 +
                   C31074 * (ae * C31367 + C31074 * C31348))) /
        C30826;
    const double C6847 =
        (2 * C31074 * C31246 + C31074 * (C31246 + C31367 * C31292)) / C30824;
    const double C12051 = C31993 * C6854;
    const double C14127 = C32055 * C6854;
    const double C27569 = C32055 * C6854;
    const double C12049 = C31993 * C6849;
    const double C14123 = C32055 * C6849;
    const double C27565 = C32055 * C6849;
    const double C11776 = C113 * C11761;
    const double C31772 = C31074 * C31770;
    const double C495 = C31993 * C278;
    const double C2696 = C32055 * C278;
    const double C14665 = C32055 * C278;
    const double C856 = C32282 * C282;
    const double C3064 = C32055 * C282;
    const double C5320 = C32282 * C282;
    const double C15033 = C32055 * C282;
    const double C17360 = C17317 * C282;
    const double C599 = C31993 * C383;
    const double C1787 = C31993 * C387;
    const double C3218 = C32055 * C699;
    const double C3796 = C31993 * C699;
    const double C15187 = C32055 * C699;
    const double C1497 = C32282 * C1142;
    const double C4751 = C32055 * C1142;
    const double C5893 = C32282 * C1142;
    const double C17933 = C17317 * C1142;
    const double C18732 = C32055 * C1142;
    const double C2232 = C31993 * C1147;
    const double C4541 = C32055 * C1147;
    const double C16237 = C32055 * C1147;
    const double C31352 = C31340 + C31350;
    const double C31517 = C31514 + C31515;
    const double C31482 = C31470 + C31480;
    const double C31152 = C31142 + C31151;
    const double C31353 = C31338 + C31351;
    const double C6341 =
        (4 * (2 * C31218 + be * C31219 + C31075 * C31409) +
         be * (3 * C31219 + C31075 * C31410) +
         C31075 * (3 * C31409 + be * C31410 +
                   C31075 * (2 * C31405 + be * C31406 +
                             C31075 * (C31398 + be * C31075 * C31399 +
                                       C31075 * (be * C31399 +
                                                 C31075 * C31082 *
                                                     std::pow(C31078, 8) *
                                                     bs[8] * C31080))))) /
        C30826;
    const double C6340 = (4 * (2 * C31214 + C31075 * C31219) +
                          C31075 * (3 * C31219 + C31075 * C31410)) /
                         C30824;
    const double C6426 = (C31074 * (3 * C31219 + C31075 * C31410) +
                          (3 * C31613 + C31075 * C31708) * ae) /
                         C30824;
    const double C7050 =
        (2 * C31214 + C31075 * C31219 +
         C31074 * (C31074 * C31410 + C31708 * ae) + C31074 * C31708 * ae) /
        C30824;
    const double C31191 = C31181 + C31190;
    const double C31313 = C31311 + C31312;
    const double C31275 = C31177 + C31274;
    const double C31389 = C31075 * C31387;
    const double C31428 = C31387 * C31292;
    const double C31518 = C31512 + C31516;
    const double C31442 = C31441 + C31438;
    const double C11866 =
        (3 * (C31218 + ae * C31485 + C31074 * C31489) +
         ae * (2 * C31485 + C31074 * C31490) +
         C31074 * (2 * C31489 + ae * C31490 +
                   C31074 * (C31405 + ae * C31074 * C31439 +
                             C31074 * (ae * C31439 +
                                       C31074 * (be * C31399 +
                                                 C31075 * C31082 *
                                                     std::pow(C31078, 8) *
                                                     bs[8] * C31080))))) /
        C30826;
    const double C11864 = (3 * (C31250 + C31256 * C31292) +
                           C31074 * (2 * C31485 + C31074 * C31490)) /
                          C30824;
    const double C11952 =
        (4 * (2 * C31301 + ae * C31302 + C31074 * C31503) +
         ae * (3 * C31302 + C31074 * C31504) +
         C31074 * (3 * C31503 + ae * C31504 +
                   C31074 * (2 * C31497 + ae * C31499 +
                             C31074 * (C31398 + ae * C31074 * C31433 +
                                       C31074 * (ae * C31433 +
                                                 C31074 * C31082 *
                                                     std::pow(C31078, 8) *
                                                     bs[8] * C31080))))) /
        C30826;
    const double C11950 = (4 * (2 * C31297 + C31074 * C31302) +
                           C31074 * (3 * C31302 + C31074 * C31504)) /
                          C30824;
    const double C31483 = C31468 + C31481;
    const double C1793 = C1788 + C1789;
    const double C3463 = C3459 + C3453;
    const double C12515 = C12492 + C12493;
    const double C14129 = C14118 + C14119;
    const double C12514 = C12490 + C12491;
    const double C14128 = C14116 + C14117;
    const double C121 = 5 * (3 * C31553 + C31082 * C31558) +
                        C31082 * (4 * C31558 + C31082 * C31563);
    const double C253 = 3 * C31553 + C31082 * C31558 + C31563 * C31209;
    const double C358 = 3 * C31553 + C31082 * C31558 + C31563 * C31292;
    const double C475 = C31075 * (4 * C31558 + C31082 * C31563);
    const double C579 = C31074 * (4 * C31558 + C31082 * C31563);
    const double C685 = C31074 * C31075 * C31563;
    const double C6175 = 5 * (3 * C31608 + C31075 * C31692) +
                         C31075 * (4 * C31692 + C31075 * C31697);
    const double C6246 = 3 * C31608 + C31075 * C31692 + C31697 * C31292;
    const double C6510 = C31074 * (4 * C31692 + C31075 * C31697);
    const double C11762 = 5 * (3 * C31661 + C31074 * C31751) +
                          C31074 * (4 * C31751 + C31074 * C31773);
    const double C32266 = C32231 / C30824;
    const double C32302 = C32270 / C30860;
    const double C32303 = C32272 + C32239;
    const double C2660 = C32239 - C31922 / C30828;
    const double C32269 = C32235 / C30824;
    const double C30900 = C30896 / C30824;
    const double C14662 = C14631 * C131;
    const double C14658 = C14631 * C119;
    const double C14655 = C14631 * C129;
    const double C14651 = C14631 * C118;
    const double C14647 = C14631 * C127;
    const double C14643 = C14631 * C117;
    const double C14639 = C14631 * C125;
    const double C14635 = C14631 * C116;
    const double C15030 = C14631 * C261;
    const double C15026 = C14631 * C247;
    const double C15022 = C14631 * C259;
    const double C15018 = C14631 * C246;
    const double C15014 = C14631 * C257;
    const double C15010 = C14631 * C245;
    const double C15184 = C14631 * C366;
    const double C15180 = C14631 * C352;
    const double C15176 = C14631 * C364;
    const double C15172 = C14631 * C351;
    const double C15168 = C14631 * C362;
    const double C15164 = C14631 * C350;
    const double C16234 = C14631 * C374;
    const double C16230 = C14631 * C356;
    const double C16227 = C14631 * C372;
    const double C16223 = C14631 * C355;
    const double C16562 = C14631 * C2027;
    const double C16558 = C14631 * C2019;
    const double C16554 = C14631 * C2025;
    const double C16550 = C14631 * C2018;
    const double C16543 = C14631 * C370;
    const double C16539 = C14631 * C354;
    const double C16535 = C14631 * C360;
    const double C16531 = C14631 * C349;
    const double C16780 = C14631 * C1134;
    const double C16776 = C14631 * C1118;
    const double C16772 = C14631 * C689;
    const double C16768 = C14631 * C682;
    const double C17202 = C14631 * C1130;
    const double C17198 = C14631 * C1116;
    const double C17194 = C14631 * C687;
    const double C17190 = C14631 * C681;
    const double C18729 = C14631 * C691;
    const double C18725 = C14631 * C683;
    const double C27566 = C14631 * C2031;
    const double C27562 = C14631 * C2021;
    const double C27966 = C14631 * C2542;
    const double C27962 = C14631 * C2538;
    const double C30911 = C30905 / C30824;
    const double C17366 = C17347 - C17348;
    const double C17363 = C17341 - C17342;
    const double C20012 = C17920 - C17921;
    const double C20006 = C17921 - C17920;
    const double C20009 = C17914 - C17915;
    const double C20003 = C17915 - C17914;
    const double C7527 = C7495 * C990;
    const double C7519 = C7495 * C981;
    const double C7512 = C7495 * C988;
    const double C7504 = C7495 * C980;
    const double C7869 = C7495 * C994;
    const double C7861 = C7495 * C983;
    const double C8015 = C7495 * C1649;
    const double C8007 = C7495 * C1644;
    const double C9523 = C7495 * C6251;
    const double C9515 = C7495 * C6245;
    const double C9508 = C7495 * C1647;
    const double C9500 = C7495 * C1643;
    const double C9929 = C7495 * C6248;
    const double C9921 = C7495 * C6244;
    const double C15456 = C15424 * C990;
    const double C15448 = C15424 * C981;
    const double C15441 = C15424 * C988;
    const double C15433 = C15424 * C980;
    const double C15798 = C15424 * C994;
    const double C15790 = C15424 * C983;
    const double C15944 = C15424 * C1649;
    const double C15936 = C15424 * C1644;
    const double C26856 = C15424 * C6251;
    const double C26848 = C15424 * C6245;
    const double C26841 = C15424 * C1647;
    const double C26833 = C15424 * C1643;
    const double C27262 = C15424 * C6248;
    const double C27254 = C15424 * C6244;
    const double C32324 = C32287 + C32319;
    const double C7487 = C32309 - (C32058 * C32047) / C30824;
    const double C2713 = C2709 + C2710;
    const double C4211 = C4205 + C4206;
    const double C864 = C860 + C861;
    const double C863 = C857 + C858;
    const double C21782 = C21776 + C21777;
    const double C21780 = C21770 + C21771;
    const double C21781 = C21773 + C21774;
    const double C21779 = C21767 + C21768;
    const double C11089 = C11085 + C11086;
    const double C11088 = C11082 + C11083;
    const double C15455 = C32310 * C281;
    const double C15447 = C32310 * C268;
    const double C15438 = C32310 * C280;
    const double C15430 = C32310 * C266;
    const double C15797 = C32310 * C998;
    const double C15789 = C32310 * C987;
    const double C15943 = C32310 * C1141;
    const double C15935 = C32310 * C1124;
    const double C26838 = C32310 * C1140;
    const double C26830 = C32310 * C1122;
    const double C6104 = C32310 / C30860 - C32056 / C32273;
    const double C7526 = C7488 * C281;
    const double C7518 = C7488 * C268;
    const double C7509 = C7488 * C280;
    const double C7501 = C7488 * C266;
    const double C7868 = C7488 * C998;
    const double C7860 = C7488 * C987;
    const double C8014 = C7488 * C1141;
    const double C8006 = C7488 * C1124;
    const double C9505 = C7488 * C1140;
    const double C9497 = C7488 * C1122;
    const double C32320 = C32289 + C32309;
    const double C5328 = C5324 + C5325;
    const double C5327 = C5321 + C5322;
    const double C9000 = C8994 + C8995;
    const double C8998 = C8988 + C8989;
    const double C8999 = C8991 + C8992;
    const double C8997 = C8985 + C8986;
    const double C6900 = C6896 + C6897;
    const double C6899 = C6893 + C6894;
    const double C30987 = C30983 / C30824;
    const double C20333 = C166 * C20326;
    const double C20329 = C164 * C20326;
    const double C22819 = C2705 * C20326;
    const double C30998 = C30992 / C30824;
    const double C32325 = C32293 + C32321;
    const double C13220 = C32312 - (C32100 * C32089) / C30824;
    const double C11630 = C32313 / C30860 - C32098 / C32273;
    const double C32322 = C32295 + C32312;
    const double C10054 = C10053 + C10049;
    const double C2712 = C2708 * C32010;
    const double C11778 = C113 * C11764;
    const double C4215 = C4213 * C32097;
    const double C22822 = C4213 * C32097;
    const double C178 = C174 + C175;
    const double C2711 = C2707 * C114;
    const double C3464 = C3460 + C3461;
    const double C4214 = C4212 * C3449;
    const double C22821 = C4212 * C20327;
    const double C12517 = C12496 + C12497;
    const double C12919 = C12916 + C12917;
    const double C12516 = C12494 + C12495;
    const double C12918 = C12914 + C12915;
    const double C6879 = C32282 * C1144;
    const double C7386 = C5276 * C1144;
    const double C9522 = C7488 * C1144;
    const double C11068 = C32282 * C1144;
    const double C11563 = C32305 * C1144;
    const double C13121 = C32055 * C1144;
    const double C17205 = C32055 * C1144;
    const double C19588 = C17317 * C1144;
    const double C26855 = C32310 * C1144;
    const double C30809 = C32058 * C1144;
    const double C7376 = C32282 * C1652;
    const double C9507 = C32292 * C1652;
    const double C9928 = C7488 * C1652;
    const double C11553 = C32282 * C1652;
    const double C20226 = C17317 * C1652;
    const double C26840 = C32292 * C1652;
    const double C27261 = C32310 * C1652;
    const double C6873 = C32282 * C1129;
    const double C7380 = C5276 * C1129;
    const double C9514 = C7488 * C1129;
    const double C11062 = C32282 * C1129;
    const double C11557 = C32305 * C1129;
    const double C13117 = C32055 * C1129;
    const double C17201 = C32055 * C1129;
    const double C19582 = C17317 * C1129;
    const double C26847 = C32310 * C1129;
    const double C30803 = C32058 * C1129;
    const double C7370 = C32282 * C1646;
    const double C9499 = C32292 * C1646;
    const double C9920 = C7488 * C1646;
    const double C11547 = C32282 * C1646;
    const double C20220 = C17317 * C1646;
    const double C26832 = C32292 * C1646;
    const double C27253 = C32310 * C1646;
    const double C1146 =
        (C31203 + be * C31214 + C31075 * C31218 + ae * C31074 * C31260 +
         C31074 *
             (ae * C31260 +
              C31074 * (C31102 + be * C31075 * C31143 +
                        C31075 * (be * C31143 + C31075 * C31082 * C31107)))) /
        C30826;
    const double C1653 =
        (ae * (2 * C31250 + C31075 * C31260 + (C31230 + C31253 * C31209) * be) +
         C31074 *
             (2 * C31218 + be * C31219 +
              C31075 * (C31102 + be * C31075 * C31143 +
                        C31075 * (be * C31143 + C31075 * C31082 * C31107)))) /
        C30826;
    const double C6427 =
        (ae * (3 * C31260 +
               C31075 * (2 * C31256 +
                         C31075 * (C31182 +
                                   C31075 * (C31075 * C31082 * C31185 +
                                             C31412 * be) +
                                   C31075 * C31412 * be) +
                         C31414 * be) +
               (2 * C31255 + C31075 * C31414) * be) +
         C31074 * (3 * C31409 + be * C31410 +
                   C31075 * (2 * C31405 + be * C31406 +
                             C31075 * (C31398 + be * C31075 * C31399 +
                                       C31075 * (be * C31399 +
                                                 C31075 * C31082 *
                                                     std::pow(C31078, 8) *
                                                     bs[8] * C31080))))) /
        C30826;
    const double C993 = (3 * (C31167 + C31075 * C31250 + C31611 * be) +
                         C31075 * (2 * C31250 + C31075 * C31260 + C31613 * be) +
                         (2 * C31611 + C31075 * C31613) * be) /
                        C30824;
    const double C1133 =
        (C31167 + C31075 * C31250 + C31611 * be + C31260 * C31292) / C30824;
    const double C1648 =
        (C31074 * (2 * C31250 + C31075 * C31260 + C31613 * be)) / C30824;
    const double C11951 =
        (4 * (2 * C31668 + C31074 * C31798 + C31669 * ae) +
         C31074 *
             (3 * C31798 +
              C31074 *
                  (2 * C31790 +
                   C31074 * (C31143 + C31074 * (C31074 * C31399 + C31412 * ae) +
                             C31074 * C31412 * ae) +
                   C31792 * ae) +
              C31797 * ae) +
         (3 * C31669 + C31074 * C31797) * ae) /
        C30824;
    const double C12041 =
        (4 * (2 * C31723 + C31074 * C31813 + C31724 * ae) +
         C31074 * (3 * C31813 +
                   C31074 * (2 * C31805 +
                             C31074 * (C31335 +
                                       C31074 * (C31074 * C31075 * C31146 +
                                                 C31376 * ae) +
                                       C31074 * C31376 * ae) +
                             C31807 * ae) +
                   C31812 * ae) +
         (3 * C31724 + C31074 * C31812) * ae) /
        C30824;
    const double C31369 = C31358 + C31368;
    const double C31429 = C31426 + C31427;
    const double C6892 = C32282 * C6853;
    const double C11081 = C32282 * C6853;
    const double C14527 = C32055 * C6853;
    const double C27969 = C32055 * C6853;
    const double C30357 = C17317 * C6853;
    const double C6886 = C32282 * C6847;
    const double C11075 = C32282 * C6847;
    const double C14523 = C32055 * C6847;
    const double C27965 = C32055 * C6847;
    const double C30351 = C17317 * C6847;
    const double C31774 = C31755 + C31772;
    const double C6253 =
        (ae * (3 * C31246 +
               C31075 * (2 * C31242 +
                         C31075 * (C31162 +
                                   C31075 * (C31075 * C31175 + C31200 * be) +
                                   C31075 * C31200 * be) +
                         C31356 * be) +
               (2 * C31241 + C31075 * C31356) * be) +
         C31074 * (3 * C31330 + be * C31331 + C31075 * C31352)) /
        C30826;
    const double C283 =
        (3 * C31100 + C31082 * C31111 + be * C31075 * C31152 +
         C31075 * (be * C31152 +
                   C31075 * (3 * C31109 +
                             C31082 * (2 * C31082 * C31107 +
                                       C31082 * (C31107 + std::pow(C31078, 8) *
                                                              bs[8] * C31080 *
                                                              C31090))))) /
        C30826;
    const double C478 =
        (be * (4 * C31140 + C31082 * C31152) +
         C31075 * (4 * C31111 +
                   C31082 * (3 * C31109 +
                             C31082 * (2 * C31082 * C31107 +
                                       C31082 * (C31107 + std::pow(C31078, 8) *
                                                              bs[8] * C31080 *
                                                              C31090))))) /
        C30826;
    const double C135 = (5 * (3 * C31131 + C31082 * C31140) +
                         C31082 * (4 * C31140 + C31082 * C31152)) /
                        C30824;
    const double C273 =
        (3 * C31131 + C31082 * C31140 + C31152 * C31209) / C30824;
    const double C378 =
        (3 * C31131 + C31082 * C31140 +
         C31074 * (C31074 * C31152 + C31563 * ae) + C31074 * C31563 * ae) /
        C30824;
    const double C477 = (C31075 * (4 * C31140 + C31082 * C31152)) / C30824;
    const double C581 = (C31074 * (4 * C31140 + C31082 * C31152) +
                         (4 * C31558 + C31082 * C31563) * ae) /
                        C30824;
    const double C695 =
        (C31074 * C31075 * C31152 + C31075 * C31563 * ae) / C30824;
    const double C6181 =
        (5 * (3 * C31330 + be * C31331 + C31075 * C31352) +
         be * (4 * C31331 + C31075 * C31353) +
         C31075 *
             (4 * C31352 + be * C31353 +
              C31075 *
                  (3 * C31348 + be * C31349 +
                   C31075 * (2 * C31342 + be * C31344 +
                             C31075 * (C31107 + be * C31075 * C31146 +
                                       C31075 * (be * C31146 +
                                                 C31075 * std::pow(C31078, 8) *
                                                     bs[8] * C31080)))))) /
        C30826;
    const double C6179 = (5 * (3 * C31212 + C31075 * C31331) +
                          C31075 * (4 * C31331 + C31075 * C31353)) /
                         C30824;
    const double C6252 =
        (3 * C31212 + C31075 * C31331 +
         C31074 * (C31074 * C31353 + C31697 * ae) + C31074 * C31697 * ae) /
        C30824;
    const double C6512 = (C31074 * (4 * C31331 + C31075 * C31353) +
                          (4 * C31692 + C31075 * C31697) * ae) /
                         C30824;
    const double C388 =
        (3 * C31100 + C31082 * C31111 + ae * C31074 * C31191 +
         C31074 * (ae * C31191 +
                   C31074 * (3 * C31109 +
                             C31082 * (2 * C31082 * C31107 +
                                       C31082 * (C31107 + std::pow(C31078, 8) *
                                                              bs[8] * C31080 *
                                                              C31090))))) /
        C30826;
    const double C582 =
        (ae * (4 * C31179 + C31082 * C31191) +
         C31074 * (4 * C31111 +
                   C31082 * (3 * C31109 +
                             C31082 * (2 * C31082 * C31107 +
                                       C31082 * (C31107 + std::pow(C31078, 8) *
                                                              bs[8] * C31080 *
                                                              C31090))))) /
        C30826;
    const double C700 =
        (ae * (C31075 * C31191 +
               (3 * (C31198 + C31200 * C31090) +
                C31082 * (2 * C31082 * C31200 +
                          C31082 * (C31200 + C31096 * C31095 * C31090))) *
                   be) +
         C31074 * (be * C31152 +
                   C31075 * (3 * C31109 +
                             C31082 * (2 * C31082 * C31107 +
                                       C31082 * (C31107 + std::pow(C31078, 8) *
                                                              bs[8] * C31080 *
                                                              C31090))))) /
        C30826;
    const double C134 = (5 * (3 * C31170 + C31082 * C31179) +
                         C31082 * (4 * C31179 + C31082 * C31191)) /
                        C30824;
    const double C272 =
        (3 * C31170 + C31082 * C31179 +
         C31075 * (C31075 * C31191 + C31563 * be) + C31075 * C31563 * be) /
        C30824;
    const double C377 =
        (3 * C31170 + C31082 * C31179 + C31191 * C31292) / C30824;
    const double C476 = (C31075 * (4 * C31179 + C31082 * C31191) +
                         (4 * C31558 + C31082 * C31563) * be) /
                        C30824;
    const double C580 = (C31074 * (4 * C31179 + C31082 * C31191)) / C30824;
    const double C694 = (C31074 * (C31075 * C31191 + C31563 * be)) / C30824;
    const double C2215 =
        (be * C31140 + C31075 * C31111 + ae * C31074 * C31313 +
         C31074 * (ae * C31313 +
                   C31074 * (be * C31150 +
                             C31075 * (2 * C31082 * C31107 +
                                       C31082 * (C31107 + std::pow(C31078, 8) *
                                                              bs[8] * C31080 *
                                                              C31090))))) /
        C30826;
    const double C1296 =
        (2 * (C31075 * C31179 + C31558 * be) +
         C31075 * (C31179 + C31075 * C31313 + C31075 * C31281 * be) +
         (C31558 + C31281 * C31209) * be) /
        C30824;
    const double C1470 =
        (C31074 * (C31179 + C31075 * C31313 + C31075 * C31281 * be)) / C30824;
    const double C2213 =
        (C31075 * C31179 + C31558 * be + C31313 * C31292) / C30824;
    const double C31276 = C31275 + C31273;
    const double C31390 = C31373 + C31389;
    const double C31430 = C31367 + C31428;
    const double C12042 =
        (4 * (2 * C31422 + ae * C31423 + C31074 * C31517) +
         ae * (3 * C31423 + C31074 * C31518) +
         C31074 *
             (3 * C31517 + ae * C31518 +
              C31074 *
                  (2 * C31511 + ae * C31513 +
                   C31074 * (C31342 + ae * C31074 * C31379 +
                             C31074 * (ae * C31379 +
                                       C31074 * (be * C31146 +
                                                 C31075 * std::pow(C31078, 8) *
                                                     bs[8] * C31080)))))) /
        C30826;
    const double C12040 = (4 * (2 * C31418 + C31074 * C31423) +
                           C31074 * (3 * C31423 + C31074 * C31518)) /
                          C30824;
    const double C31443 = C31075 * C31442;
    const double C7201 =
        (2 * (ae * C31260 + C31074 * C31409) + ae * (C31260 + C31442 * C31292) +
         C31074 * (C31409 + ae * C31074 * C31442 +
                   C31074 * (ae * C31442 +
                             C31074 * (C31398 + be * C31075 * C31399 +
                                       C31075 * (be * C31399 +
                                                 C31075 * C31082 *
                                                     std::pow(C31078, 8) *
                                                     bs[8] * C31080))))) /
        C30826;
    const double C7199 =
        (2 * C31074 * C31260 + C31074 * (C31260 + C31442 * C31292)) / C30824;
    const double C11768 =
        (5 * (3 * C31460 + ae * C31461 + C31074 * C31482) +
         ae * (4 * C31461 + C31074 * C31483) +
         C31074 *
             (4 * C31482 + ae * C31483 +
              C31074 *
                  (3 * C31478 + ae * C31479 +
                   C31074 * (2 * C31472 + ae * C31474 +
                             C31074 * (C31107 + ae * C31074 * C31185 +
                                       C31074 * (ae * C31185 +
                                                 C31074 * std::pow(C31078, 8) *
                                                     bs[8] * C31080)))))) /
        C30826;
    const double C11765 = (5 * (3 * C31295 + C31074 * C31461) +
                           C31074 * (4 * C31461 + C31074 * C31483)) /
                          C30824;
    const double C1796 = C1793 + C1790;
    const double C3465 = C3463 + C3454;
    const double C32323 = C32266 + C32315;
    const double C2659 = C32302 - (C31924 * C31907) / C30824;
    const double C106 = C32303 / C30860 - C31922 / C32273;
    const double C32316 = C32269 + C32302;
    const double C30904 = C30900 - C30881;
    const double C14672 = C14654 - C14655;
    const double C14670 = C14650 - C14651;
    const double C14668 = C14646 - C14647;
    const double C14666 = C14642 - C14643;
    const double C18230 = C15177 - C15176;
    const double C18929 = C15176 - C15177;
    const double C18228 = C15173 - C15172;
    const double C18927 = C15172 - C15173;
    const double C16984 = C15168 - C15169;
    const double C16980 = C15169 - C15168;
    const double C16982 = C15164 - C15165;
    const double C16978 = C15165 - C15164;
    const double C16548 = C16226 - C16227;
    const double C16988 = C16227 - C16226;
    const double C16546 = C16222 - C16223;
    const double C16986 = C16223 - C16222;
    const double C27560 = C16555 - C16554;
    const double C27558 = C16551 - C16550;
    const double C16568 = C16542 - C16543;
    const double C16566 = C16538 - C16539;
    const double C15451 = C32324 * C138;
    const double C15443 = C32324 * C126;
    const double C15434 = C32324 * C137;
    const double C15426 = C32324 * C124;
    const double C15793 = C32324 * C275;
    const double C15785 = C32324 * C256;
    const double C15939 = C32324 * C380;
    const double C15931 = C32324 * C361;
    const double C26851 = C32324 * C384;
    const double C26843 = C32324 * C369;
    const double C26834 = C32324 * C379;
    const double C26826 = C32324 * C359;
    const double C27257 = C32324 * C696;
    const double C27249 = C32324 * C686;
    const double C6101 =
        (C32317 + 2 * C32051) / C30860 - (C32324 * C32047) / C30824;
    const double C7524 = C7487 * C276;
    const double C7516 = C7487 * C258;
    const double C7507 = C7487 * C275;
    const double C7499 = C7487 * C256;
    const double C7866 = C7487 * C280;
    const double C7858 = C7487 * C266;
    const double C8012 = C7487 * C697;
    const double C8004 = C7487 * C688;
    const double C9520 = C7487 * C1143;
    const double C9512 = C7487 * C1128;
    const double C9503 = C7487 * C696;
    const double C9495 = C7487 * C686;
    const double C9926 = C7487 * C1140;
    const double C9918 = C7487 * C1122;
    const double C866 = C864 + C862;
    const double C865 = C863 + C859;
    const double C21786 = C21782 + C21778;
    const double C21784 = C21780 + C21772;
    const double C21785 = C21781 + C21775;
    const double C21783 = C21779 + C21769;
    const double C15453 = C32320 * C276;
    const double C15445 = C32320 * C258;
    const double C15436 = C32320 * C275;
    const double C15428 = C32320 * C256;
    const double C15795 = C32320 * C280;
    const double C15787 = C32320 * C266;
    const double C15941 = C32320 * C697;
    const double C15933 = C32320 * C688;
    const double C26853 = C32320 * C1143;
    const double C26845 = C32320 * C1128;
    const double C26836 = C32320 * C696;
    const double C26828 = C32320 * C686;
    const double C27259 = C32320 * C1140;
    const double C27251 = C32320 * C1122;
    const double C6102 =
        (C32305 + 2 * C32058 + C32324) / C30860 - (C32320 * C32047) / C30824;
    const double C6103 = (C32282 + C32055 / C30824 + C32320) / C30860 -
                         (C32310 * C32047) / C30824;
    const double C5330 = C5328 + C5326;
    const double C5329 = C5327 + C5323;
    const double C9004 = C9000 + C8996;
    const double C9002 = C8998 + C8990;
    const double C9003 = C8999 + C8993;
    const double C9001 = C8997 + C8987;
    const double C30991 = C30987 - C30968;
    const double C20338 = C20333 + C20334;
    const double C20337 = C20329 + C20330;
    const double C22823 = C22819 + C22820;
    const double C11627 =
        (C32318 + 2 * C32093) / C30860 - (C32325 * C32089) / C30824;
    const double C11628 =
        (C32307 + 2 * C32100 + C32325) / C30860 - (C32322 * C32089) / C30824;
    const double C11629 = (C32285 + C32097 / C30824 + C32322) / C30860 -
                          (C32313 * C32089) / C30824;
    const double C10055 = C10054 + C10050;
    const double C2714 = C2711 + C2712;
    const double C3466 = C3464 + C3462;
    const double C4216 = C4211 + C4214;
    const double C6898 = C6879 - C6880;
    const double C11087 = C11068 - C11069;
    const double C30345 = C19588 - C19587;
    const double C6895 = C6873 - C6874;
    const double C11084 = C11062 - C11063;
    const double C30342 = C19582 - C19581;
    const double C7214 = C32282 * C1146;
    const double C11395 = C32282 * C1146;
    const double C12719 = C32055 * C1146;
    const double C16783 = C32055 * C1146;
    const double C19600 = C17317 * C1146;
    const double C8016 = C32292 * C1653;
    const double C8790 = C32282 * C1653;
    const double C15945 = C32292 * C1653;
    const double C19806 = C17317 * C1653;
    const double C21572 = C32282 * C1653;
    const double C7862 = C32292 * C993;
    const double C15791 = C32292 * C993;
    const double C7208 = C32282 * C1133;
    const double C11389 = C32282 * C1133;
    const double C12715 = C32055 * C1133;
    const double C16779 = C32055 * C1133;
    const double C19594 = C17317 * C1133;
    const double C8008 = C32292 * C1648;
    const double C8784 = C32282 * C1648;
    const double C15937 = C32292 * C1648;
    const double C19800 = C17317 * C1648;
    const double C21566 = C32282 * C1648;
    const double C31370 = C31369 + C31362;
    const double C31775 = C31774 + C31759;
    const double C9930 = C32292 * C6253;
    const double C27263 = C32292 * C6253;
    const double C1148 =
        (C31100 + be * C31221 + C31075 * C31225 + ae * C31074 * C31276 +
         C31074 * (ae * C31276 +
                   C31074 * (C31109 + be * C31075 * C31148 +
                             C31075 * (be * C31148 +
                                       C31075 * (C31107 + std::pow(C31078, 8) *
                                                              bs[8] * C31080 *
                                                              C31090))))) /
        C30826;
    const double C1654 =
        (ae * (2 * C31264 + C31075 * C31276 + (C31233 + C31269 * C31209) * be) +
         C31074 * (2 * C31225 + be * C31226 +
                   C31075 * (C31109 + be * C31075 * C31148 +
                             C31075 * (be * C31148 +
                                       C31075 * (C31107 + std::pow(C31078, 8) *
                                                              bs[8] * C31080 *
                                                              C31090))))) /
        C30826;
    const double C995 = (3 * (C31170 + C31075 * C31264 + C31616 * be) +
                         C31075 * (2 * C31264 + C31075 * C31276 + C31618 * be) +
                         (2 * C31616 + C31075 * C31618) * be) /
                        C30824;
    const double C1137 =
        (C31170 + C31075 * C31264 + C31616 * be + C31276 * C31292) / C30824;
    const double C1650 =
        (C31074 * (2 * C31264 + C31075 * C31276 + C31618 * be)) / C30824;
    const double C31391 = C31390 + C31383;
    const double C6855 =
        (3 * (C31330 + ae * C31425 + C31074 * C31429) +
         ae * (2 * C31425 + C31074 * C31430) +
         C31074 *
             (2 * C31429 + ae * C31430 +
              C31074 *
                  (C31348 + ae * C31074 * C31387 +
                   C31074 * (ae * C31387 +
                             C31074 * (C31107 + be * C31075 * C31146 +
                                       C31075 * (be * C31146 +
                                                 C31075 * std::pow(C31078, 8) *
                                                     bs[8] * C31080)))))) /
        C30826;
    const double C6850 = (3 * (C31246 + C31367 * C31292) +
                          C31074 * (2 * C31425 + C31074 * C31430)) /
                         C30824;
    const double C31444 = C31432 + C31443;
    const double C1797 = C1796 + C1794;
    const double C103 =
        (C32314 + 2 * C31916) / C30860 - (C32323 * C31907) / C30824;
    const double C104 =
        (C32301 + 2 * C31924 + C32323) / C30860 - (C32316 * C31907) / C30824;
    const double C105 = (C32271 + C31921 / C30824 + C32316) / C30860 -
                        (C32303 * C31907) / C30824;
    const double C30910 = C30904 / C30860;
    const double C30909 = C30822 * C30904;
    const double C14677 = C14672 + C14673;
    const double C14676 = C14670 + C14671;
    const double C14675 = C14668 + C14669;
    const double C14674 = C14666 + C14667;
    const double C18234 = C18230 + C18231;
    const double C18932 = C18929 + C18930;
    const double C18233 = C18228 + C18229;
    const double C18931 = C18927 + C18928;
    const double C16993 = C16984 + C16985;
    const double C16991 = C16980 + C16981;
    const double C16992 = C16982 + C16983;
    const double C16990 = C16978 + C16979;
    const double C16571 = C16548 + C16549;
    const double C16995 = C16988 + C16989;
    const double C16570 = C16546 + C16547;
    const double C16994 = C16986 + C16987;
    const double C27571 = C27560 + C27561;
    const double C27570 = C27558 + C27559;
    const double C16573 = C16568 + C16569;
    const double C16572 = C16566 + C16567;
    const double C868 = C866 * C32010;
    const double C867 = C865 * C114;
    const double C5332 = C5330 * C32010;
    const double C5331 = C5329 * C114;
    const double C30997 = C30991 / C30860;
    const double C30996 = C30841 * C30991;
    const double C20340 = C20338 + C20335;
    const double C20339 = C20337 + C20331;
    const double C22824 = C22823 + C22821;
    const double C10056 = C10055 + C10051;
    const double C4217 = C4216 + C4215;
    const double C6902 = C6900 + C6898;
    const double C11091 = C11089 + C11087;
    const double C6901 = C6899 + C6895;
    const double C11090 = C11088 + C11084;
    const double C6254 =
        (2 * C31210 + be * C31212 + C31075 * C31330 + ae * C31074 * C31370 +
         C31074 * (ae * C31370 + C31074 * C31352)) /
        C30826;
    const double C6176 =
        (4 * (2 * C31237 + C31075 * C31246 + C31608 * be) +
         C31075 * (3 * C31246 + C31075 * C31370 + C31692 * be) +
         (3 * C31608 + C31075 * C31692) * be) /
        C30824;
    const double C6247 =
        (C31074 * (3 * C31246 + C31075 * C31370 + C31692 * be)) / C30824;
    const double C6249 =
        (2 * C31237 + C31075 * C31246 + C31608 * be + C31370 * C31292) / C30824;
    const double C11766 =
        (5 * (3 * C31752 + C31074 * C31775 + C31751 * ae) +
         C31074 * (4 * C31775 +
                   C31074 * (3 * C31770 +
                             C31074 * (2 * C31762 +
                                       C31074 * (C31136 +
                                                 C31074 * (C31074 * C31146 +
                                                           C31267 * ae) +
                                                 C31074 * C31267 * ae) +
                                       C31764 * ae) +
                             C31769 * ae) +
                   C31773 * ae) +
         (4 * C31751 + C31074 * C31773) * ae) /
        C30824;
    const double C31392 = C31075 * C31391;
    const double C7363 =
        (2 * (ae * C31370 + C31074 * C31352) + ae * (C31370 + C31391 * C31292) +
         C31074 *
             (C31352 + ae * C31074 * C31391 +
              C31074 *
                  (ae * C31391 +
                   C31074 * (2 * C31342 + be * C31344 +
                             C31075 * (C31107 + be * C31075 * C31146 +
                                       C31075 * (be * C31146 +
                                                 C31075 * std::pow(C31078, 8) *
                                                     bs[8] * C31080)))))) /
        C30826;
    const double C7361 =
        (2 * C31074 * C31370 + C31074 * (C31370 + C31391 * C31292)) / C30824;
    const double C31445 = C31444 + C31436;
    const double C1798 = C1797 + C1795;
    const double C30915 = C30910 - C30911;
    const double C30914 = C30909 + C32251;
    const double C14681 = C14677 * C32010;
    const double C14680 = C14676 * C114;
    const double C14679 = C14675 * C32010;
    const double C18227 = C14675 * C32252;
    const double C25652 = C14675 * C20324;
    const double C14678 = C14674 * C114;
    const double C18226 = C14674 * C3448;
    const double C25651 = C14674 * C20326;
    const double C18236 = C18234 * C32097;
    const double C25654 = C18234 * C32097;
    const double C18235 = C18233 * C3449;
    const double C25653 = C18233 * C20327;
    const double C869 = C867 + C868;
    const double C5333 = C5331 + C5332;
    const double C31002 = C30997 - C30998;
    const double C31001 = C30996 + C32252;
    const double C20342 = C20340 + C20336;
    const double C20341 = C20339 + C20332;
    const double C22825 = C22824 + C22822;
    const double C10057 = C10056 + C10052;
    const double C7388 = C32282 * C6254;
    const double C9524 = C32292 * C6254;
    const double C11565 = C32282 * C6254;
    const double C26857 = C32292 * C6254;
    const double C30811 = C17317 * C6254;
    const double C9922 = C32292 * C6247;
    const double C27255 = C32292 * C6247;
    const double C7382 = C32282 * C6249;
    const double C9516 = C32292 * C6249;
    const double C11559 = C32282 * C6249;
    const double C26849 = C32292 * C6249;
    const double C30805 = C17317 * C6249;
    const double C31393 = C31372 + C31392;
    const double C7051 =
        (2 * C31218 + be * C31219 + C31075 * C31409 + ae * C31074 * C31445 +
         C31074 * (ae * C31445 +
                   C31074 * (2 * C31405 + be * C31406 +
                             C31075 * (C31398 + be * C31075 * C31399 +
                                       C31075 * (be * C31399 +
                                                 C31075 * C31082 *
                                                     std::pow(C31078, 8) *
                                                     bs[8] * C31080))))) /
        C30826;
    const double C6339 =
        (4 * (2 * C31250 + C31075 * C31260 + C31613 * be) +
         C31075 * (3 * C31260 + C31075 * C31445 + C31708 * be) +
         (3 * C31613 + C31075 * C31708) * be) /
        C30824;
    const double C6425 =
        (C31074 * (3 * C31260 + C31075 * C31445 + C31708 * be)) / C30824;
    const double C7049 =
        (2 * C31250 + C31075 * C31260 + C31613 * be + C31445 * C31292) / C30824;
    const double C17357 = C30915 * C261;
    const double C17351 = C30915 * C247;
    const double C17346 = C30915 * C259;
    const double C17340 = C30915 * C246;
    const double C17334 = C30915 * C257;
    const double C17328 = C30915 * C245;
    const double C17760 = C30915 * C269;
    const double C17754 = C30915 * C251;
    const double C17748 = C30915 * C267;
    const double C17742 = C30915 * C250;
    const double C17930 = C30915 * C691;
    const double C17924 = C30915 * C683;
    const double C17918 = C30915 * C689;
    const double C17912 = C30915 * C682;
    const double C19597 = C30915 * C1134;
    const double C19591 = C30915 * C1118;
    const double C19585 = C30915 * C1130;
    const double C19579 = C30915 * C1116;
    const double C19574 = C30915 * C687;
    const double C19568 = C30915 * C681;
    const double C19803 = C30915 * C1125;
    const double C19797 = C30915 * C1114;
    const double C20223 = C30915 * C1123;
    const double C20217 = C30915 * C1113;
    const double C30354 = C30915 * C2542;
    const double C30348 = C30915 * C2538;
    const double C30808 = C30915 * C1131;
    const double C30802 = C30915 * C1117;
    const double C6110 =
        (C30915 / C30860 + ((C30822 * C30929 + C17317) * ae) / C30824) /
            C30860 -
        ((C30822 * (C30929 / C30860 + (0 * ae) / C30824) + C32292) * be) /
            C30824;
    const double C7494 =
        C30915 / C30860 - ((C30822 * C30929 + C17317) * be) / C30824;
    const double C15423 =
        C30915 / C30860 + ((C30822 * C30929 + C17317) * ae) / C30824;
    const double C30918 = C30914 * be;
    const double C14683 = C14680 + C14681;
    const double C14682 = C14678 + C14679;
    const double C18232 = C18226 + C18227;
    const double C25655 = C25651 + C25652;
    const double C23818 = C1778 * C31002;
    const double C11635 =
        (C31002 / C30860 + ((C30841 * C31016 + C23811) * ae) / C30824) /
            C30860 -
        ((C30841 * (C31016 / C30860 + (0 * ae) / C30824) + C32298) * be) /
            C30824;
    const double C13225 =
        C31002 / C30860 - ((C30841 * C31016 + C23811) * be) / C30824;
    const double C22084 =
        C31002 / C30860 + ((C30841 * C31016 + C23811) * ae) / C30824;
    const double C31005 = C31001 * be;
    const double C31394 = C31393 + C31388;
    const double C17365 = C17345 - C17346;
    const double C17362 = C17339 - C17340;
    const double C20011 = C17918 - C17919;
    const double C20005 = C17919 - C17918;
    const double C20008 = C17912 - C17913;
    const double C20002 = C17913 - C17912;
    const double C30344 = C19586 - C19585;
    const double C30341 = C19580 - C19579;
    const double C7525 = C7494 * C269;
    const double C7517 = C7494 * C251;
    const double C7510 = C7494 * C267;
    const double C7502 = C7494 * C250;
    const double C7867 = C7494 * C988;
    const double C7859 = C7494 * C980;
    const double C8013 = C7494 * C1125;
    const double C8005 = C7494 * C1114;
    const double C9521 = C7494 * C1131;
    const double C9513 = C7494 * C1117;
    const double C9506 = C7494 * C1123;
    const double C9498 = C7494 * C1113;
    const double C9927 = C7494 * C1647;
    const double C9919 = C7494 * C1643;
    const double C15454 = C15423 * C269;
    const double C15446 = C15423 * C251;
    const double C15439 = C15423 * C267;
    const double C15431 = C15423 * C250;
    const double C15796 = C15423 * C988;
    const double C15788 = C15423 * C980;
    const double C15942 = C15423 * C1125;
    const double C15934 = C15423 * C1114;
    const double C26854 = C15423 * C1131;
    const double C26846 = C15423 * C1117;
    const double C26839 = C15423 * C1123;
    const double C26831 = C15423 * C1113;
    const double C27260 = C15423 * C1647;
    const double C27252 = C15423 * C1643;
    const double C30920 = C30918 / C30824;
    const double C18237 = C18232 + C18235;
    const double C25656 = C25655 + C25653;
    const double C31007 = C31005 / C30824;
    const double C6255 =
        (3 * C31330 + be * C31331 + C31075 * C31352 + ae * C31074 * C31394 +
         C31074 *
             (ae * C31394 +
              C31074 *
                  (3 * C31348 + be * C31349 +
                   C31075 * (2 * C31342 + be * C31344 +
                             C31075 * (C31107 + be * C31075 * C31146 +
                                       C31075 * (be * C31146 +
                                                 C31075 * std::pow(C31078, 8) *
                                                     bs[8] * C31080)))))) /
        C30826;
    const double C6513 =
        (ae * (4 * C31370 + C31075 * C31394 +
               (3 * C31356 + C31075 * C31386) * be) +
         C31074 *
             (4 * C31352 + be * C31353 +
              C31075 *
                  (3 * C31348 + be * C31349 +
                   C31075 * (2 * C31342 + be * C31344 +
                             C31075 * (C31107 + be * C31075 * C31146 +
                                       C31075 * (be * C31146 +
                                                 C31075 * std::pow(C31078, 8) *
                                                     bs[8] * C31080)))))) /
        C30826;
    const double C6178 =
        (5 * (3 * C31246 + C31075 * C31370 + C31692 * be) +
         C31075 * (4 * C31370 + C31075 * C31394 + C31697 * be) +
         (4 * C31692 + C31075 * C31697) * be) /
        C30824;
    const double C6250 =
        (3 * C31246 + C31075 * C31370 + C31692 * be + C31394 * C31292) / C30824;
    const double C6511 =
        (C31074 * (4 * C31370 + C31075 * C31394 + C31697 * be)) / C30824;
    const double C30922 = C30908 - C30920;
    const double C18238 = C18237 + C18236;
    const double C25657 = C25656 + C25654;
    const double C31009 = C30995 - C31007;
    const double C30923 = C30922 + C30893;
    const double C31010 = C31009 + C30980;
    const double C17355 = C30923 * C129;
    const double C17349 = C30923 * C118;
    const double C17344 = C30923 * C127;
    const double C17338 = C30923 * C117;
    const double C17332 = C30923 * C125;
    const double C17326 = C30923 * C116;
    const double C17758 = C30923 * C259;
    const double C17752 = C30923 * C246;
    const double C17746 = C30923 * C257;
    const double C17740 = C30923 * C245;
    const double C17928 = C30923 * C364;
    const double C17922 = C30923 * C351;
    const double C17916 = C30923 * C362;
    const double C17910 = C30923 * C350;
    const double C19595 = C30923 * C372;
    const double C19589 = C30923 * C355;
    const double C19583 = C30923 * C370;
    const double C19577 = C30923 * C354;
    const double C19572 = C30923 * C360;
    const double C19566 = C30923 * C349;
    const double C19801 = C30923 * C689;
    const double C19795 = C30923 * C682;
    const double C20221 = C30923 * C687;
    const double C20215 = C30923 * C681;
    const double C30352 = C30923 * C2025;
    const double C30346 = C30923 * C2018;
    const double C30806 = C30923 * C1130;
    const double C30800 = C30923 * C1116;
    const double C6107 =
        (((((0 - (C30822 * C30876) / C30824) * ae) / C30824 -
           (0 * be) / C30828 + (2 * C30877) / C30824) /
              C30860 -
          ((C30822 * C30912 + 0) * be) / C30824 + C30886 - C30899) /
             C30860 +
         ((C30822 * C30921 + 0) * ae) / C30824) /
            C30860 -
        ((C30822 * (C30921 / C30860 +
                    ((C30822 * C30923 + C32051) * ae) / C30824 + C30915) +
          C32324) *
         be) /
            C30824 +
        C30923 / C30860 + ((C30822 * C30915 + C32058) * ae) / C30824 +
        2 * (C30893 / C30860 - (0 * be) / C30824);
    const double C6108 =
        (C30921 / C30860 + ((C30822 * C30923 + C32051) * ae) / C30824 +
         C30915) /
            C30860 -
        ((C30822 * (C30923 / C30860 +
                    ((C30822 * C30915 + C32058) * ae) / C30824 + 2 * C30929) +
          C32320) *
         be) /
            C30824 +
        2 * (C30915 / C30860 + ((C30822 * C30929 + C17317) * ae) / C30824);
    const double C6109 =
        (C30923 / C30860 + ((C30822 * C30915 + C32058) * ae) / C30824 +
         2 * C30929) /
            C30860 -
        ((C30822 *
              (C30915 / C30860 + ((C30822 * C30929 + C17317) * ae) / C30824) +
          C32310) *
         be) /
            C30824 +
        3 * (C30929 / C30860 + (0 * ae) / C30824);
    const double C7492 =
        C30921 / C30860 - ((C30822 * C30923 + C32051) * be) / C30824 + C30915;
    const double C7493 = C30923 / C30860 -
                         ((C30822 * C30915 + C32058) * be) / C30824 +
                         2 * C30929;
    const double C15421 =
        C30921 / C30860 + ((C30822 * C30923 + C32051) * ae) / C30824 + C30915;
    const double C15422 = C30923 / C30860 +
                          ((C30822 * C30915 + C32058) * ae) / C30824 +
                          2 * C30929;
    const double C23816 = C164 * C31010;
    const double C11632 =
        (((((0 - (C30841 * C30963) / C30824) * ae) / C30824 -
           (0 * be) / C30828 + (2 * C30964) / C30824) /
              C30860 -
          ((C30841 * C30999 + 0) * be) / C30824 + C30973 - C30986) /
             C30860 +
         ((C30841 * C31008 + 0) * ae) / C30824) /
            C30860 -
        ((C30841 * (C31008 / C30860 +
                    ((C30841 * C31010 + C32093) * ae) / C30824 + C31002) +
          C32325) *
         be) /
            C30824 +
        C31010 / C30860 + ((C30841 * C31002 + C32100) * ae) / C30824 +
        2 * (C30980 / C30860 - (0 * be) / C30824);
    const double C11633 =
        (C31008 / C30860 + ((C30841 * C31010 + C32093) * ae) / C30824 +
         C31002) /
            C30860 -
        ((C30841 * (C31010 / C30860 +
                    ((C30841 * C31002 + C32100) * ae) / C30824 + 2 * C31016) +
          C32322) *
         be) /
            C30824 +
        2 * (C31002 / C30860 + ((C30841 * C31016 + C23811) * ae) / C30824);
    const double C11634 =
        (C31010 / C30860 + ((C30841 * C31002 + C32100) * ae) / C30824 +
         2 * C31016) /
            C30860 -
        ((C30841 *
              (C31002 / C30860 + ((C30841 * C31016 + C23811) * ae) / C30824) +
          C32313) *
         be) /
            C30824 +
        3 * (C31016 / C30860 + (0 * ae) / C30824);
    const double C13223 =
        C31008 / C30860 - ((C30841 * C31010 + C32093) * be) / C30824 + C31002;
    const double C13224 = C31010 / C30860 -
                          ((C30841 * C31002 + C32100) * be) / C30824 +
                          2 * C31016;
    const double C22082 =
        C31008 / C30860 + ((C30841 * C31010 + C32093) * ae) / C30824 + C31002;
    const double C22083 = C31010 / C30860 +
                          ((C30841 * C31002 + C32100) * ae) / C30824 +
                          2 * C31016;
    const double C17364 = C17343 - C17344;
    const double C17361 = C17337 - C17338;
    const double C20010 = C17916 - C17917;
    const double C20004 = C17917 - C17916;
    const double C20007 = C17910 - C17911;
    const double C20001 = C17911 - C17910;
    const double C30343 = C19584 - C19583;
    const double C30340 = C19578 - C19577;
    const double C7521 = C7492 * C127;
    const double C7513 = C7492 * C117;
    const double C7506 = C7492 * C125;
    const double C7498 = C7492 * C116;
    const double C7863 = C7492 * C257;
    const double C7855 = C7492 * C245;
    const double C8009 = C7492 * C362;
    const double C8001 = C7492 * C350;
    const double C9517 = C7492 * C370;
    const double C9509 = C7492 * C354;
    const double C9502 = C7492 * C360;
    const double C9494 = C7492 * C349;
    const double C9923 = C7492 * C687;
    const double C9915 = C7492 * C681;
    const double C7523 = C7493 * C259;
    const double C7515 = C7493 * C246;
    const double C7508 = C7493 * C257;
    const double C7500 = C7493 * C245;
    const double C7865 = C7493 * C267;
    const double C7857 = C7493 * C250;
    const double C8011 = C7493 * C689;
    const double C8003 = C7493 * C682;
    const double C9519 = C7493 * C1130;
    const double C9511 = C7493 * C1116;
    const double C9504 = C7493 * C687;
    const double C9496 = C7493 * C681;
    const double C9925 = C7493 * C1123;
    const double C9917 = C7493 * C1113;
    const double C15450 = C15421 * C127;
    const double C15442 = C15421 * C117;
    const double C15435 = C15421 * C125;
    const double C15427 = C15421 * C116;
    const double C15792 = C15421 * C257;
    const double C15784 = C15421 * C245;
    const double C15938 = C15421 * C362;
    const double C15930 = C15421 * C350;
    const double C26850 = C15421 * C370;
    const double C26842 = C15421 * C354;
    const double C26835 = C15421 * C360;
    const double C26827 = C15421 * C349;
    const double C27256 = C15421 * C687;
    const double C27248 = C15421 * C681;
    const double C15452 = C15422 * C259;
    const double C15444 = C15422 * C246;
    const double C15437 = C15422 * C257;
    const double C15429 = C15422 * C245;
    const double C15794 = C15422 * C267;
    const double C15786 = C15422 * C250;
    const double C15940 = C15422 * C689;
    const double C15932 = C15422 * C682;
    const double C26852 = C15422 * C1130;
    const double C26844 = C15422 * C1116;
    const double C26837 = C15422 * C687;
    const double C26829 = C15422 * C681;
    const double C27258 = C15422 * C1123;
    const double C27250 = C15422 * C1113;
    const double C23822 = C23816 + C23817;
    const double C17368 = C17364 + C17365;
    const double C17367 = C17361 + C17362;
    const double C20016 = C20010 + C20011;
    const double C20014 = C20004 + C20005;
    const double C20015 = C20007 + C20008;
    const double C20013 = C20001 + C20002;
    const double C30359 = C30343 + C30344;
    const double C30358 = C30340 + C30341;
    const double C23823 = C23822 + C23818;
    const double C17370 = C17368 + C17366;
    const double C17369 = C17367 + C17363;
    const double C20020 = C20016 + C20012;
    const double C20018 = C20014 + C20006;
    const double C20019 = C20015 + C20009;
    const double C20017 = C20013 + C20003;
    const double C30361 = C30359 + C30345;
    const double C30360 = C30358 + C30342;
    const double C23824 = C23823 + C23819;
    const double C17372 = C17370 * C32010;
    const double C17371 = C17369 * C114;
    const double C23825 = C23824 + C23820;
    const double C17373 = C17371 + C17372;
    const double C23826 = C23825 + C23821;
    d2ee[0] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
              C17317 * C264 - C30929 * C249) *
                 C114 +
             (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
              C17317 * C279 - C30929 * C265) *
                 C32010) *
                C31916 +
            ((C17325 - C17326 + C17327 - C17328 + C17329 - C17330) * C114 +
             (C17331 - C17332 + C17333 - C17334 + C17335 - C17336) * C32010) *
                C31924 +
            C17373 * C17320) *
               C31970 * C471 +
           (((C30923 * C244 - C32051 * C254 + C30915 * C249 - C32058 * C264 +
              C30929 * C979 - C17317 * C985) *
                 C114 +
             (C30923 * C255 - C32051 * C274 + C30915 * C265 - C32058 * C279 +
              C30929 * C986 - C17317 * C997) *
                 C32010) *
                C31916 +
            ((C17740 - C17741 + C17742 - C17743 + C17744 - C17745) * C114 +
             (C17746 - C17747 + C17748 - C17749 + C17750 - C17751) * C32010) *
                C31924 +
            ((C17752 - C17753 + C17754 - C17755 + C17756 - C17757) * C114 +
             (C17758 - C17759 + C17760 - C17761 + C17762 - C17763) * C32010) *
                C17320) *
               C31970 * C472) *
              C473 +
          ((((C17326 - C17325 + C17328 - C17327 + C17330 - C17329) * C114 +
             (C17332 - C17331 + C17334 - C17333 + C17336 - C17335) * C32010) *
                C31916 +
            ((C17338 - C17337 + C17340 - C17339 + C17342 - C17341) * C114 +
             (C17344 - C17343 + C17346 - C17345 + C17348 - C17347) * C32010) *
                C31924 +
            ((C17349 - C17350 + C17351 - C17352 + C17353 - C17354) * C114 +
             (C17355 - C17356 + C17357 - C17358 + C17359 - C17360) * C32010) *
                C17320) *
               C31970 * C471 +
           (((C17741 - C17740 + C17743 - C17742 + C17745 - C17744) * C114 +
             (C17747 - C17746 + C17749 - C17748 + C17751 - C17750) * C32010) *
                C31916 +
            ((C17753 - C17752 + C17755 - C17754 + C17757 - C17756) * C114 +
             (C17759 - C17758 + C17761 - C17760 + C17763 - C17762) * C32010) *
                C31924 +
            ((C32051 * C260 - C30923 * C247 + C32058 * C270 - C30915 * C252 +
              C17317 * C1296 - C30929 * C1295) *
                 C114 +
             (C32051 * C277 - C30923 * C261 + C32058 * C282 - C30915 * C271 +
              C17317 * C1298 - C30929 * C1297) *
                 C32010) *
                C17320) *
               C31970 * C472) *
              C474)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
              C17317 * C264 - C30929 * C249) *
                 C114 +
             (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
              C17317 * C279 - C30929 * C265) *
                 C32010) *
                C31916 +
            ((C17325 - C17326 + C17327 - C17328 + C17329 - C17330) * C114 +
             (C17331 - C17332 + C17333 - C17334 + C17335 - C17336) * C32010) *
                C31924 +
            C17373 * C17320) *
               C577 +
           (((C30923 * C349 - C32051 * C359 + C30915 * C681 - C32058 * C686 +
              C30929 * C1113 - C17317 * C1122) *
                 C114 +
             (C30923 * C360 - C32051 * C379 + C30915 * C687 - C32058 * C696 +
              C30929 * C1123 - C17317 * C1140) *
                 C32010) *
                C31916 +
            ((C17910 - C17911 + C17912 - C17913 + C17914 - C17915) * C114 +
             (C17916 - C17917 + C17918 - C17919 + C17920 - C17921) * C32010) *
                C31924 +
            ((C17922 - C17923 + C17924 - C17925 + C17926 - C17927) * C114 +
             (C17928 - C17929 + C17930 - C17931 + C17932 - C17933) * C32010) *
                C17320) *
               C578) *
              C471 +
          ((((C30923 * C244 - C32051 * C254 + C30915 * C249 - C32058 * C264 +
              C30929 * C979 - C17317 * C985) *
                 C114 +
             (C30923 * C255 - C32051 * C274 + C30915 * C265 - C32058 * C279 +
              C30929 * C986 - C17317 * C997) *
                 C32010) *
                C31916 +
            ((C17740 - C17741 + C17742 - C17743 + C17744 - C17745) * C114 +
             (C17746 - C17747 + C17748 - C17749 + C17750 - C17751) * C32010) *
                C31924 +
            ((C17752 - C17753 + C17754 - C17755 + C17756 - C17757) * C114 +
             (C17758 - C17759 + C17760 - C17761 + C17762 - C17763) * C32010) *
                C17320) *
               C577 +
           (((C32051 * C686 - C30923 * C681 + C32058 * C1122 - C30915 * C1113 +
              C17317 * C1646 - C30929 * C1643) *
                 C114 +
             (C32051 * C696 - C30923 * C687 + C32058 * C1140 - C30915 * C1123 +
              C17317 * C1652 - C30929 * C1647) *
                 C32010) *
                C31916 +
            ((C32051 * C688 - C30923 * C682 + C32058 * C1124 - C30915 * C1114 +
              C17317 * C1648 - C30929 * C1644) *
                 C114 +
             (C32051 * C697 - C30923 * C689 + C32058 * C1141 - C30915 * C1125 +
              C17317 * C1653 - C30929 * C1649) *
                 C32010) *
                C31924 +
            ((C32051 * C690 - C30923 * C683 + C32058 * C1126 - C30915 * C1115 +
              C17317 * C1650 - C30929 * C1645) *
                 C114 +
             (C32051 * C698 - C30923 * C691 + C32058 * C1142 - C30915 * C1127 +
              C17317 * C1654 - C30929 * C1651) *
                 C32010) *
                C17320) *
               C578) *
              C472) *
         C31944) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
             C17317 * C264 - C30929 * C249) *
                C114 +
            (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
             C17317 * C279 - C30929 * C265) *
                C32010) *
               C31916 +
           ((C17325 - C17326 + C17327 - C17328 + C17329 - C17330) * C114 +
            (C17331 - C17332 + C17333 - C17334 + C17335 - C17336) * C32010) *
               C31924 +
           C17373 * C17320) *
              C31970 * C240 +
          (((C30923 * C244 - C32051 * C254 + C30915 * C249 - C32058 * C264 +
             C30929 * C979 - C17317 * C985) *
                C114 +
            (C30923 * C255 - C32051 * C274 + C30915 * C265 - C32058 * C279 +
             C30929 * C986 - C17317 * C997) *
                C32010) *
               C31916 +
           ((C30923 * C245 - C32051 * C256 + C30915 * C250 - C32058 * C266 +
             C30929 * C980 - C17317 * C987) *
                C114 +
            (C30923 * C257 - C32051 * C275 + C30915 * C267 - C32058 * C280 +
             C30929 * C988 - C17317 * C998) *
                C32010) *
               C31924 +
           ((C30923 * C246 - C32051 * C258 + C30915 * C251 - C32058 * C268 +
             C30929 * C981 - C17317 * C989) *
                C114 +
            (C30923 * C259 - C32051 * C276 + C30915 * C269 - C32058 * C281 +
             C30929 * C990 - C17317 * C999) *
                C32010) *
               C17320) *
              C31970 * C241 +
          (((C32051 * C264 - C30923 * C249 + C32058 * C985 - C30915 * C979 +
             C17317 * C991 - C30929 * C982) *
                C114 +
            (C32051 * C279 - C30923 * C265 + C32058 * C997 - C30915 * C986 +
             C17317 * C1000 - C30929 * C992) *
                C32010) *
               C31916 +
           ((C32051 * C266 - C30923 * C250 + C32058 * C987 - C30915 * C980 +
             C17317 * C993 - C30929 * C983) *
                C114 +
            (C32051 * C280 - C30923 * C267 + C32058 * C998 - C30915 * C988 +
             C17317 * C1001 - C30929 * C994) *
                C32010) *
               C31924 +
           ((C32051 * C268 - C30923 * C251 + C32058 * C989 - C30915 * C981 +
             C17317 * C995 - C30929 * C984) *
                C114 +
            (C32051 * C281 - C30923 * C269 + C32058 * C999 - C30915 * C990 +
             C17317 * C1002 - C30929 * C996) *
                C32010) *
               C17320) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
             C17317 * C264 - C30929 * C249) *
                C114 +
            (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
             C17317 * C279 - C30929 * C265) *
                C32010) *
               C31916 +
           ((C17325 - C17326 + C17327 - C17328 + C17329 - C17330) * C114 +
            (C17331 - C17332 + C17333 - C17334 + C17335 - C17336) * C32010) *
               C31924 +
           C17373 * C17320) *
              C31970 * C31956 * C110 +
          (((C17326 - C17325 + C17328 - C17327 + C17330 - C17329) * C114 +
            (C17332 - C17331 + C17334 - C17333 + C17336 - C17335) * C32010) *
               C31916 +
           ((C17338 - C17337 + C17340 - C17339 + C17342 - C17341) * C114 +
            (C17344 - C17343 + C17346 - C17345 + C17348 - C17347) * C32010) *
               C31924 +
           ((C17349 - C17350 + C17351 - C17352 + C17353 - C17354) * C114 +
            (C17355 - C17356 + C17357 - C17358 + C17359 - C17360) * C32010) *
               C17320) *
              C31970 * C31956 * C111 +
          (C17373 * C31916 +
           ((C17350 - C17349 + C17352 - C17351 + C17354 - C17353) * C114 +
            (C17356 - C17355 + C17358 - C17357 + C17360 - C17359) * C32010) *
               C31924 +
           ((C32051 * C130 - C30923 * C119 + C32058 * C262 - C30915 * C248 +
             C17317 * C272 - C30929 * C253) *
                C114 +
            (C32051 * C140 - C30923 * C131 + C32058 * C278 - C30915 * C263 +
             C17317 * C283 - C30929 * C273) *
                C32010) *
               C17320) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
             C17317 * C264 - C30929 * C249) *
                C114 +
            (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
             C17317 * C279 - C30929 * C265) *
                C32010) *
               C31916 +
           ((C17325 - C17326 + C17327 - C17328 + C17329 - C17330) * C114 +
            (C17331 - C17332 + C17333 - C17334 + C17335 - C17336) * C32010) *
               C31924 +
           C17373 * C17320) *
              C346 +
          (((C30923 * C349 - C32051 * C359 + C30915 * C681 - C32058 * C686 +
             C30929 * C1113 - C17317 * C1122) *
                C114 +
            (C30923 * C360 - C32051 * C379 + C30915 * C687 - C32058 * C696 +
             C30929 * C1123 - C17317 * C1140) *
                C32010) *
               C31916 +
           ((C30923 * C350 - C32051 * C361 + C30915 * C682 - C32058 * C688 +
             C30929 * C1114 - C17317 * C1124) *
                C114 +
            (C30923 * C362 - C32051 * C380 + C30915 * C689 - C32058 * C697 +
             C30929 * C1125 - C17317 * C1141) *
                C32010) *
               C31924 +
           ((C30923 * C351 - C32051 * C363 + C30915 * C683 - C32058 * C690 +
             C30929 * C1115 - C17317 * C1126) *
                C114 +
            (C30923 * C364 - C32051 * C381 + C30915 * C691 - C32058 * C698 +
             C30929 * C1127 - C17317 * C1142) *
                C32010) *
               C17320) *
              C347 +
          (((C32051 * C369 - C30923 * C354 + C32058 * C1128 - C30915 * C1116 +
             C17317 * C1129 - C30929 * C1117) *
                C114 +
            (C32051 * C384 - C30923 * C370 + C32058 * C1143 - C30915 * C1130 +
             C17317 * C1144 - C30929 * C1131) *
                C32010) *
               C31916 +
           ((C32051 * C371 - C30923 * C355 + C32058 * C1132 - C30915 * C1118 +
             C17317 * C1133 - C30929 * C1119) *
                C114 +
            (C32051 * C385 - C30923 * C372 + C32058 * C1145 - C30915 * C1134 +
             C17317 * C1146 - C30929 * C1135) *
                C32010) *
               C31924 +
           ((C32051 * C373 - C30923 * C356 + C32058 * C1136 - C30915 * C1120 +
             C17317 * C1137 - C30929 * C1121) *
                C114 +
            (C32051 * C386 - C30923 * C374 + C32058 * C1147 - C30915 * C1138 +
             C17317 * C1148 - C30929 * C1139) *
                C32010) *
               C17320) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
              C17317 * C264 - C30929 * C249) *
                 C114 +
             (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
              C17317 * C279 - C30929 * C265) *
                 C32010) *
                C31916 +
            ((C17325 - C17326 + C17327 - C17328 + C17329 - C17330) * C114 +
             (C17331 - C17332 + C17333 - C17334 + C17335 - C17336) * C32010) *
                C31924 +
            C17373 * C17320) *
               C577 +
           (((C30923 * C349 - C32051 * C359 + C30915 * C681 - C32058 * C686 +
              C30929 * C1113 - C17317 * C1122) *
                 C114 +
             (C30923 * C360 - C32051 * C379 + C30915 * C687 - C32058 * C696 +
              C30929 * C1123 - C17317 * C1140) *
                 C32010) *
                C31916 +
            ((C17910 - C17911 + C17912 - C17913 + C17914 - C17915) * C114 +
             (C17916 - C17917 + C17918 - C17919 + C17920 - C17921) * C32010) *
                C31924 +
            ((C17922 - C17923 + C17924 - C17925 + C17926 - C17927) * C114 +
             (C17928 - C17929 + C17930 - C17931 + C17932 - C17933) * C32010) *
                C17320) *
               C578) *
              C31956 * C473 +
          ((((C17326 - C17325 + C17328 - C17327 + C17330 - C17329) * C114 +
             (C17332 - C17331 + C17334 - C17333 + C17336 - C17335) * C32010) *
                C31916 +
            ((C17338 - C17337 + C17340 - C17339 + C17342 - C17341) * C114 +
             (C17344 - C17343 + C17346 - C17345 + C17348 - C17347) * C32010) *
                C31924 +
            ((C17349 - C17350 + C17351 - C17352 + C17353 - C17354) * C114 +
             (C17355 - C17356 + C17357 - C17358 + C17359 - C17360) * C32010) *
                C17320) *
               C577 +
           (((C17911 - C17910 + C17913 - C17912 + C17915 - C17914) * C114 +
             (C17917 - C17916 + C17919 - C17918 + C17921 - C17920) * C32010) *
                C31916 +
            ((C17923 - C17922 + C17925 - C17924 + C17927 - C17926) * C114 +
             (C17929 - C17928 + C17931 - C17930 + C17933 - C17932) * C32010) *
                C31924 +
            ((C32051 * C365 - C30923 * C352 + C32058 * C692 - C30915 * C684 +
              C17317 * C1470 - C30929 * C1469) *
                 C114 +
             (C32051 * C382 - C30923 * C366 + C32058 * C699 - C30915 * C693 +
              C17317 * C1472 - C30929 * C1471) *
                 C32010) *
                C17320) *
               C578) *
              C31956 * C474)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
             C17317 * C264 - C30929 * C249) *
                C114 +
            (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
             C17317 * C279 - C30929 * C265) *
                C32010) *
               C31916 +
           ((C17325 - C17326 + C17327 - C17328 + C17329 - C17330) * C114 +
            (C17331 - C17332 + C17333 - C17334 + C17335 - C17336) * C32010) *
               C31924 +
           C17373 * C17320) *
              C31970 * C31956 * C110 +
          (((C17326 - C17325 + C17328 - C17327 + C17330 - C17329) * C114 +
            (C17332 - C17331 + C17334 - C17333 + C17336 - C17335) * C32010) *
               C31916 +
           ((C17338 - C17337 + C17340 - C17339 + C17342 - C17341) * C114 +
            (C17344 - C17343 + C17346 - C17345 + C17348 - C17347) * C32010) *
               C31924 +
           ((C17349 - C17350 + C17351 - C17352 + C17353 - C17354) * C114 +
            (C17355 - C17356 + C17357 - C17358 + C17359 - C17360) * C32010) *
               C17320) *
              C31970 * C31956 * C111 +
          (C17373 * C31916 +
           ((C17350 - C17349 + C17352 - C17351 + C17354 - C17353) * C114 +
            (C17356 - C17355 + C17358 - C17357 + C17360 - C17359) * C32010) *
               C31924 +
           ((C32051 * C130 - C30923 * C119 + C32058 * C262 - C30915 * C248 +
             C17317 * C272 - C30929 * C253) *
                C114 +
            (C32051 * C140 - C30923 * C131 + C32058 * C278 - C30915 * C263 +
             C17317 * C283 - C30929 * C273) *
                C32010) *
               C17320) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
             C17317 * C264 - C30929 * C249) *
                C114 +
            (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
             C17317 * C279 - C30929 * C265) *
                C32010) *
               C31916 +
           ((C17325 - C17326 + C17327 - C17328 + C17329 - C17330) * C114 +
            (C17331 - C17332 + C17333 - C17334 + C17335 - C17336) * C32010) *
               C31924 +
           C17373 * C17320) *
              C31970 * C240 +
          (((C30923 * C244 - C32051 * C254 + C30915 * C249 - C32058 * C264 +
             C30929 * C979 - C17317 * C985) *
                C114 +
            (C30923 * C255 - C32051 * C274 + C30915 * C265 - C32058 * C279 +
             C30929 * C986 - C17317 * C997) *
                C32010) *
               C31916 +
           ((C30923 * C245 - C32051 * C256 + C30915 * C250 - C32058 * C266 +
             C30929 * C980 - C17317 * C987) *
                C114 +
            (C30923 * C257 - C32051 * C275 + C30915 * C267 - C32058 * C280 +
             C30929 * C988 - C17317 * C998) *
                C32010) *
               C31924 +
           ((C30923 * C246 - C32051 * C258 + C30915 * C251 - C32058 * C268 +
             C30929 * C981 - C17317 * C989) *
                C114 +
            (C30923 * C259 - C32051 * C276 + C30915 * C269 - C32058 * C281 +
             C30929 * C990 - C17317 * C999) *
                C32010) *
               C17320) *
              C31970 * C241 +
          (((C32051 * C264 - C30923 * C249 + C32058 * C985 - C30915 * C979 +
             C17317 * C991 - C30929 * C982) *
                C114 +
            (C32051 * C279 - C30923 * C265 + C32058 * C997 - C30915 * C986 +
             C17317 * C1000 - C30929 * C992) *
                C32010) *
               C31916 +
           ((C32051 * C266 - C30923 * C250 + C32058 * C987 - C30915 * C980 +
             C17317 * C993 - C30929 * C983) *
                C114 +
            (C32051 * C280 - C30923 * C267 + C32058 * C998 - C30915 * C988 +
             C17317 * C1001 - C30929 * C994) *
                C32010) *
               C31924 +
           ((C32051 * C268 - C30923 * C251 + C32058 * C989 - C30915 * C981 +
             C17317 * C995 - C30929 * C984) *
                C114 +
            (C32051 * C281 - C30923 * C269 + C32058 * C999 - C30915 * C990 +
             C17317 * C1002 - C30929 * C996) *
                C32010) *
               C17320) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
              C17317 * C264 - C30929 * C249) *
                 C3448 +
             (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
              C17317 * C279 - C30929 * C265) *
                 C32252 +
             (C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C3449 +
             (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32097) *
                C15419 +
            ((C17325 - C17326 + C17327 - C17328 + C17329 - C17330) * C3448 +
             (C17331 - C17332 + C17333 - C17334 + C17335 - C17336) * C32252 +
             (C17911 - C17910 + C17913 - C17912 + C17915 - C17914) * C3449 +
             (C17917 - C17916 + C17919 - C17918 + C17921 - C17920) * C32097) *
                C31921) *
               C31970 * C471 +
           (((C30923 * C244 - C32051 * C254 + C30915 * C249 - C32058 * C264 +
              C30929 * C979 - C17317 * C985) *
                 C3448 +
             (C30923 * C255 - C32051 * C274 + C30915 * C265 - C32058 * C279 +
              C30929 * C986 - C17317 * C997) *
                 C32252 +
             (C30923 * C681 - C32051 * C686 + C30915 * C1113 - C32058 * C1122 +
              C30929 * C1643 - C17317 * C1646) *
                 C3449 +
             (C30923 * C687 - C32051 * C696 + C30915 * C1123 - C32058 * C1140 +
              C30929 * C1647 - C17317 * C1652) *
                 C32097) *
                C15419 +
            ((C17740 - C17741 + C17742 - C17743 + C17744 - C17745) * C3448 +
             (C17746 - C17747 + C17748 - C17749 + C17750 - C17751) * C32252 +
             (C19795 - C19796 + C19797 - C19798 + C19799 - C19800) * C3449 +
             (C19801 - C19802 + C19803 - C19804 + C19805 - C19806) * C32097) *
                C31921) *
               C31970 * C472) *
              C473 +
          ((((C17326 - C17325 + C17328 - C17327 + C17330 - C17329) * C3448 +
             (C17332 - C17331 + C17334 - C17333 + C17336 - C17335) * C32252 +
             (C17910 - C17911 + C17912 - C17913 + C17914 - C17915) * C3449 +
             (C17916 - C17917 + C17918 - C17919 + C17920 - C17921) * C32097) *
                C15419 +
            ((C17338 - C17337 + C17340 - C17339 + C17342 - C17341) * C3448 +
             (C17344 - C17343 + C17346 - C17345 + C17348 - C17347) * C32252 +
             (C17922 - C17923 + C17924 - C17925 + C17926 - C17927) * C3449 +
             (C17928 - C17929 + C17930 - C17931 + C17932 - C17933) * C32097) *
                C31921) *
               C31970 * C471 +
           (((C17741 - C17740 + C17743 - C17742 + C17745 - C17744) * C3448 +
             (C17747 - C17746 + C17749 - C17748 + C17751 - C17750) * C32252 +
             (C19796 - C19795 + C19798 - C19797 + C19800 - C19799) * C3449 +
             (C19802 - C19801 + C19804 - C19803 + C19806 - C19805) * C32097) *
                C15419 +
            ((C17753 - C17752 + C17755 - C17754 + C17757 - C17756) * C3448 +
             (C17759 - C17758 + C17761 - C17760 + C17763 - C17762) * C32252 +
             (C32051 * C690 - C30923 * C683 + C32058 * C1126 - C30915 * C1115 +
              C17317 * C1650 - C30929 * C1645) *
                 C3449 +
             (C32051 * C698 - C30923 * C691 + C32058 * C1142 - C30915 * C1127 +
              C17317 * C1654 - C30929 * C1651) *
                 C32097) *
                C31921) *
               C31970 * C472) *
              C474)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
              C17317 * C264 - C30929 * C249) *
                 C3448 +
             (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
              C17317 * C279 - C30929 * C265) *
                 C32252 +
             (C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C3449 +
             (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32097) *
                C15419 +
            ((C17325 - C17326 + C17327 - C17328 + C17329 - C17330) * C3448 +
             (C17331 - C17332 + C17333 - C17334 + C17335 - C17336) * C32252 +
             C20017 * C3449 + C20018 * C32097) *
                C31921) *
               C577 +
           (((C19566 - C19565 + C19568 - C19567 + C19570 - C19569) * C3448 +
             (C19572 - C19571 + C19574 - C19573 + C19576 - C19575) * C32252 +
             (C19577 - C19578 + C19579 - C19580 + C19581 - C19582) * C3449 +
             (C19583 - C19584 + C19585 - C19586 + C19587 - C19588) * C32097) *
                C15419 +
            (C20019 * C3448 + C20020 * C32252 +
             (C19589 - C19590 + C19591 - C19592 + C19593 - C19594) * C3449 +
             (C19595 - C19596 + C19597 - C19598 + C19599 - C19600) * C32097) *
                C31921) *
               C578) *
              C471 +
          ((((C30923 * C244 - C32051 * C254 + C30915 * C249 - C32058 * C264 +
              C30929 * C979 - C17317 * C985) *
                 C3448 +
             (C30923 * C255 - C32051 * C274 + C30915 * C265 - C32058 * C279 +
              C30929 * C986 - C17317 * C997) *
                 C32252 +
             (C20215 - C20216 + C20217 - C20218 + C20219 - C20220) * C3449 +
             (C20221 - C20222 + C20223 - C20224 + C20225 - C20226) * C32097) *
                C15419 +
            ((C17740 - C17741 + C17742 - C17743 + C17744 - C17745) * C3448 +
             (C17746 - C17747 + C17748 - C17749 + C17750 - C17751) * C32252 +
             (C19795 - C19796 + C19797 - C19798 + C19799 - C19800) * C3449 +
             (C19801 - C19802 + C19803 - C19804 + C19805 - C19806) * C32097) *
                C31921) *
               C577 +
           (((C20216 - C20215 + C20218 - C20217 + C20220 - C20219) * C3448 +
             (C20222 - C20221 + C20224 - C20223 + C20226 - C20225) * C32252 +
             (C32051 * C1128 - C30923 * C1116 + C32058 * C1129 -
              C30915 * C1117 + C17317 * C6249 - C30929 * C6245) *
                 C3449 +
             (C32051 * C1143 - C30923 * C1130 + C32058 * C1144 -
              C30915 * C1131 + C17317 * C6254 - C30929 * C6251) *
                 C32097) *
                C15419 +
            ((C19796 - C19795 + C19798 - C19797 + C19800 - C19799) * C3448 +
             (C19802 - C19801 + C19804 - C19803 + C19806 - C19805) * C32252 +
             (C32051 * C1132 - C30923 * C1118 + C32058 * C1133 -
              C30915 * C1119 + C17317 * C7049 - C30929 * C7048) *
                 C3449 +
             (C32051 * C1145 - C30923 * C1134 + C32058 * C1146 -
              C30915 * C1135 + C17317 * C7051 - C30929 * C7050) *
                 C32097) *
                C31921) *
               C578) *
              C472) *
         C31944) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
             C17317 * C264 - C30929 * C249) *
                C3448 +
            (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
             C17317 * C279 - C30929 * C265) *
                C32252 +
            (C32051 * C359 - C30923 * C349 + C32058 * C686 - C30915 * C681 +
             C17317 * C1122 - C30929 * C1113) *
                C3449 +
            (C32051 * C379 - C30923 * C360 + C32058 * C696 - C30915 * C687 +
             C17317 * C1140 - C30929 * C1123) *
                C32097) *
               C15419 +
           ((C17325 - C17326 + C17327 - C17328 + C17329 - C17330) * C3448 +
            (C17331 - C17332 + C17333 - C17334 + C17335 - C17336) * C32252 +
            (C17911 - C17910 + C17913 - C17912 + C17915 - C17914) * C3449 +
            (C17917 - C17916 + C17919 - C17918 + C17921 - C17920) * C32097) *
               C31921) *
              C31970 * C240 +
          (((C30923 * C244 - C32051 * C254 + C30915 * C249 - C32058 * C264 +
             C30929 * C979 - C17317 * C985) *
                C3448 +
            (C30923 * C255 - C32051 * C274 + C30915 * C265 - C32058 * C279 +
             C30929 * C986 - C17317 * C997) *
                C32252 +
            (C30923 * C681 - C32051 * C686 + C30915 * C1113 - C32058 * C1122 +
             C30929 * C1643 - C17317 * C1646) *
                C3449 +
            (C30923 * C687 - C32051 * C696 + C30915 * C1123 - C32058 * C1140 +
             C30929 * C1647 - C17317 * C1652) *
                C32097) *
               C15419 +
           ((C17740 - C17741 + C17742 - C17743 + C17744 - C17745) * C3448 +
            (C17746 - C17747 + C17748 - C17749 + C17750 - C17751) * C32252 +
            (C30923 * C682 - C32051 * C688 + C30915 * C1114 - C32058 * C1124 +
             C30929 * C1644 - C17317 * C1648) *
                C3449 +
            (C30923 * C689 - C32051 * C697 + C30915 * C1125 - C32058 * C1141 +
             C30929 * C1649 - C17317 * C1653) *
                C32097) *
               C31921) *
              C31970 * C241 +
          (((C32051 * C264 - C30923 * C249 + C32058 * C985 - C30915 * C979 +
             C17317 * C991 - C30929 * C982) *
                C3448 +
            (C32051 * C279 - C30923 * C265 + C32058 * C997 - C30915 * C986 +
             C17317 * C1000 - C30929 * C992) *
                C32252 +
            (C32051 * C1122 - C30923 * C1113 + C32058 * C1646 - C30915 * C1643 +
             C17317 * C6247 - C30929 * C6244) *
                C3449 +
            (C32051 * C1140 - C30923 * C1123 + C32058 * C1652 - C30915 * C1647 +
             C17317 * C6253 - C30929 * C6248) *
                C32097) *
               C15419 +
           ((C32051 * C266 - C30923 * C250 + C32058 * C987 - C30915 * C980 +
             C17317 * C993 - C30929 * C983) *
                C3448 +
            (C32051 * C280 - C30923 * C267 + C32058 * C998 - C30915 * C988 +
             C17317 * C1001 - C30929 * C994) *
                C32252 +
            (C32051 * C1124 - C30923 * C1114 + C32058 * C1648 - C30915 * C1644 +
             C17317 * C6425 - C30929 * C6424) *
                C3449 +
            (C32051 * C1141 - C30923 * C1125 + C32058 * C1653 - C30915 * C1649 +
             C17317 * C6427 - C30929 * C6426) *
                C32097) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
             C17317 * C264 - C30929 * C249) *
                C3448 +
            (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
             C17317 * C279 - C30929 * C265) *
                C32252 +
            (C32051 * C359 - C30923 * C349 + C32058 * C686 - C30915 * C681 +
             C17317 * C1122 - C30929 * C1113) *
                C3449 +
            (C32051 * C379 - C30923 * C360 + C32058 * C696 - C30915 * C687 +
             C17317 * C1140 - C30929 * C1123) *
                C32097) *
               C15419 +
           ((C17325 - C17326 + C17327 - C17328 + C17329 - C17330) * C3448 +
            (C17331 - C17332 + C17333 - C17334 + C17335 - C17336) * C32252 +
            (C17911 - C17910 + C17913 - C17912 + C17915 - C17914) * C3449 +
            (C17917 - C17916 + C17919 - C17918 + C17921 - C17920) * C32097) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C17326 - C17325 + C17328 - C17327 + C17330 - C17329) * C3448 +
            (C17332 - C17331 + C17334 - C17333 + C17336 - C17335) * C32252 +
            (C17910 - C17911 + C17912 - C17913 + C17914 - C17915) * C3449 +
            (C17916 - C17917 + C17918 - C17919 + C17920 - C17921) * C32097) *
               C15419 +
           ((C17338 - C17337 + C17340 - C17339 + C17342 - C17341) * C3448 +
            (C17344 - C17343 + C17346 - C17345 + C17348 - C17347) * C32252 +
            (C17922 - C17923 + C17924 - C17925 + C17926 - C17927) * C3449 +
            (C17928 - C17929 + C17930 - C17931 + C17932 - C17933) * C32097) *
               C31921) *
              C31970 * C31956 * C111 +
          ((C17369 * C3448 + C17370 * C32252 +
            (C17923 - C17922 + C17925 - C17924 + C17927 - C17926) * C3449 +
            (C17929 - C17928 + C17931 - C17930 + C17933 - C17932) * C32097) *
               C15419 +
           ((C17350 - C17349 + C17352 - C17351 + C17354 - C17353) * C3448 +
            (C17356 - C17355 + C17358 - C17357 + C17360 - C17359) * C32252 +
            (C32051 * C365 - C30923 * C352 + C32058 * C692 - C30915 * C684 +
             C17317 * C1470 - C30929 * C1469) *
                C3449 +
            (C32051 * C382 - C30923 * C366 + C32058 * C699 - C30915 * C693 +
             C17317 * C1472 - C30929 * C1471) *
                C32097) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
             C17317 * C264 - C30929 * C249) *
                C3448 +
            (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
             C17317 * C279 - C30929 * C265) *
                C32252 +
            (C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C3449 +
            (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32097) *
               C15419 +
           ((C17325 - C17326 + C17327 - C17328 + C17329 - C17330) * C3448 +
            (C17331 - C17332 + C17333 - C17334 + C17335 - C17336) * C32252 +
            (C17911 - C17910 + C17913 - C17912 + C17915 - C17914) * C3449 +
            (C17917 - C17916 + C17919 - C17918 + C17921 - C17920) * C32097) *
               C31921) *
              C346 +
          (((C19566 - C19565 + C19568 - C19567 + C19570 - C19569) * C3448 +
            (C19572 - C19571 + C19574 - C19573 + C19576 - C19575) * C32252 +
            (C19577 - C19578 + C19579 - C19580 + C19581 - C19582) * C3449 +
            (C19583 - C19584 + C19585 - C19586 + C19587 - C19588) * C32097) *
               C15419 +
           ((C17910 - C17911 + C17912 - C17913 + C17914 - C17915) * C3448 +
            (C17916 - C17917 + C17918 - C17919 + C17920 - C17921) * C32252 +
            (C19589 - C19590 + C19591 - C19592 + C19593 - C19594) * C3449 +
            (C19595 - C19596 + C19597 - C19598 + C19599 - C19600) * C32097) *
               C31921) *
              C347 +
          (((C19578 - C19577 + C19580 - C19579 + C19582 - C19581) * C3448 +
            (C19584 - C19583 + C19586 - C19585 + C19588 - C19587) * C32252 +
            (C32051 * C2024 - C30923 * C2018 + C32058 * C2541 - C30915 * C2538 +
             C17317 * C6847 - C30929 * C6844) *
                C3449 +
            (C32051 * C2036 - C30923 * C2025 + C32058 * C2547 - C30915 * C2542 +
             C17317 * C6853 - C30929 * C6848) *
                C32097) *
               C15419 +
           ((C19590 - C19589 + C19592 - C19591 + C19594 - C19593) * C3448 +
            (C19596 - C19595 + C19598 - C19597 + C19600 - C19599) * C32252 +
            (C32051 * C2026 - C30923 * C2019 + C32058 * C2543 - C30915 * C2539 +
             C17317 * C7199 - C30929 * C7198) *
                C3449 +
            (C32051 * C2037 - C30923 * C2027 + C32058 * C2548 - C30915 * C2544 +
             C17317 * C7201 - C30929 * C7200) *
                C32097) *
               C31921) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
              C17317 * C264 - C30929 * C249) *
                 C3448 +
             (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
              C17317 * C279 - C30929 * C265) *
                 C32252 +
             (C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C3449 +
             (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32097) *
                C15419 +
            ((C17325 - C17326 + C17327 - C17328 + C17329 - C17330) * C3448 +
             (C17331 - C17332 + C17333 - C17334 + C17335 - C17336) * C32252 +
             C20017 * C3449 + C20018 * C32097) *
                C31921) *
               C577 +
           (((C19566 - C19565 + C19568 - C19567 + C19570 - C19569) * C3448 +
             (C19572 - C19571 + C19574 - C19573 + C19576 - C19575) * C32252 +
             (C19577 - C19578 + C19579 - C19580 + C19581 - C19582) * C3449 +
             (C19583 - C19584 + C19585 - C19586 + C19587 - C19588) * C32097) *
                C15419 +
            (C20019 * C3448 + C20020 * C32252 +
             (C19589 - C19590 + C19591 - C19592 + C19593 - C19594) * C3449 +
             (C19595 - C19596 + C19597 - C19598 + C19599 - C19600) * C32097) *
                C31921) *
               C578) *
              C31956 * C473 +
          ((((C17326 - C17325 + C17328 - C17327 + C17330 - C17329) * C3448 +
             (C17332 - C17331 + C17334 - C17333 + C17336 - C17335) * C32252 +
             C20019 * C3449 + C20020 * C32097) *
                C15419 +
            ((C17338 - C17337 + C17340 - C17339 + C17342 - C17341) * C3448 +
             (C17344 - C17343 + C17346 - C17345 + C17348 - C17347) * C32252 +
             (C17922 - C17923 + C17924 - C17925 + C17926 - C17927) * C3449 +
             (C17928 - C17929 + C17930 - C17931 + C17932 - C17933) * C32097) *
                C31921) *
               C577 +
           ((C20017 * C3448 + C20018 * C32252 +
             (C19590 - C19589 + C19592 - C19591 + C19594 - C19593) * C3449 +
             (C19596 - C19595 + C19598 - C19597 + C19600 - C19599) * C32097) *
                C15419 +
            ((C17923 - C17922 + C17925 - C17924 + C17927 - C17926) * C3448 +
             (C17929 - C17928 + C17931 - C17930 + C17933 - C17932) * C32252 +
             (C32051 * C373 - C30923 * C356 + C32058 * C1136 - C30915 * C1120 +
              C17317 * C1137 - C30929 * C1121) *
                 C3449 +
             (C32051 * C386 - C30923 * C374 + C32058 * C1147 - C30915 * C1138 +
              C17317 * C1148 - C30929 * C1139) *
                 C32097) *
                C31921) *
               C578) *
              C31956 * C474)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
             C17317 * C264 - C30929 * C249) *
                C3448 +
            (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
             C17317 * C279 - C30929 * C265) *
                C32252 +
            (C32051 * C359 - C30923 * C349 + C32058 * C686 - C30915 * C681 +
             C17317 * C1122 - C30929 * C1113) *
                C3449 +
            (C32051 * C379 - C30923 * C360 + C32058 * C696 - C30915 * C687 +
             C17317 * C1140 - C30929 * C1123) *
                C32097) *
               C15419 +
           ((C17325 - C17326 + C17327 - C17328 + C17329 - C17330) * C3448 +
            (C17331 - C17332 + C17333 - C17334 + C17335 - C17336) * C32252 +
            (C17911 - C17910 + C17913 - C17912 + C17915 - C17914) * C3449 +
            (C17917 - C17916 + C17919 - C17918 + C17921 - C17920) * C32097) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C17326 - C17325 + C17328 - C17327 + C17330 - C17329) * C3448 +
            (C17332 - C17331 + C17334 - C17333 + C17336 - C17335) * C32252 +
            (C17910 - C17911 + C17912 - C17913 + C17914 - C17915) * C3449 +
            (C17916 - C17917 + C17918 - C17919 + C17920 - C17921) * C32097) *
               C15419 +
           ((C17338 - C17337 + C17340 - C17339 + C17342 - C17341) * C3448 +
            (C17344 - C17343 + C17346 - C17345 + C17348 - C17347) * C32252 +
            (C17922 - C17923 + C17924 - C17925 + C17926 - C17927) * C3449 +
            (C17928 - C17929 + C17930 - C17931 + C17932 - C17933) * C32097) *
               C31921) *
              C31970 * C31956 * C111 +
          ((C17369 * C3448 + C17370 * C32252 +
            (C17923 - C17922 + C17925 - C17924 + C17927 - C17926) * C3449 +
            (C17929 - C17928 + C17931 - C17930 + C17933 - C17932) * C32097) *
               C15419 +
           ((C17350 - C17349 + C17352 - C17351 + C17354 - C17353) * C3448 +
            (C17356 - C17355 + C17358 - C17357 + C17360 - C17359) * C32252 +
            (C32051 * C365 - C30923 * C352 + C32058 * C692 - C30915 * C684 +
             C17317 * C1470 - C30929 * C1469) *
                C3449 +
            (C32051 * C382 - C30923 * C366 + C32058 * C699 - C30915 * C693 +
             C17317 * C1472 - C30929 * C1471) *
                C32097) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
             C17317 * C264 - C30929 * C249) *
                C3448 +
            (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
             C17317 * C279 - C30929 * C265) *
                C32252 +
            (C32051 * C359 - C30923 * C349 + C32058 * C686 - C30915 * C681 +
             C17317 * C1122 - C30929 * C1113) *
                C3449 +
            (C32051 * C379 - C30923 * C360 + C32058 * C696 - C30915 * C687 +
             C17317 * C1140 - C30929 * C1123) *
                C32097) *
               C15419 +
           ((C17325 - C17326 + C17327 - C17328 + C17329 - C17330) * C3448 +
            (C17331 - C17332 + C17333 - C17334 + C17335 - C17336) * C32252 +
            (C17911 - C17910 + C17913 - C17912 + C17915 - C17914) * C3449 +
            (C17917 - C17916 + C17919 - C17918 + C17921 - C17920) * C32097) *
               C31921) *
              C31970 * C240 +
          (((C30923 * C244 - C32051 * C254 + C30915 * C249 - C32058 * C264 +
             C30929 * C979 - C17317 * C985) *
                C3448 +
            (C30923 * C255 - C32051 * C274 + C30915 * C265 - C32058 * C279 +
             C30929 * C986 - C17317 * C997) *
                C32252 +
            (C30923 * C681 - C32051 * C686 + C30915 * C1113 - C32058 * C1122 +
             C30929 * C1643 - C17317 * C1646) *
                C3449 +
            (C30923 * C687 - C32051 * C696 + C30915 * C1123 - C32058 * C1140 +
             C30929 * C1647 - C17317 * C1652) *
                C32097) *
               C15419 +
           ((C17740 - C17741 + C17742 - C17743 + C17744 - C17745) * C3448 +
            (C17746 - C17747 + C17748 - C17749 + C17750 - C17751) * C32252 +
            (C30923 * C682 - C32051 * C688 + C30915 * C1114 - C32058 * C1124 +
             C30929 * C1644 - C17317 * C1648) *
                C3449 +
            (C30923 * C689 - C32051 * C697 + C30915 * C1125 - C32058 * C1141 +
             C30929 * C1649 - C17317 * C1653) *
                C32097) *
               C31921) *
              C31970 * C241 +
          (((C32051 * C264 - C30923 * C249 + C32058 * C985 - C30915 * C979 +
             C17317 * C991 - C30929 * C982) *
                C3448 +
            (C32051 * C279 - C30923 * C265 + C32058 * C997 - C30915 * C986 +
             C17317 * C1000 - C30929 * C992) *
                C32252 +
            (C32051 * C1122 - C30923 * C1113 + C32058 * C1646 - C30915 * C1643 +
             C17317 * C6247 - C30929 * C6244) *
                C3449 +
            (C32051 * C1140 - C30923 * C1123 + C32058 * C1652 - C30915 * C1647 +
             C17317 * C6253 - C30929 * C6248) *
                C32097) *
               C15419 +
           ((C32051 * C266 - C30923 * C250 + C32058 * C987 - C30915 * C980 +
             C17317 * C993 - C30929 * C983) *
                C3448 +
            (C32051 * C280 - C30923 * C267 + C32058 * C998 - C30915 * C988 +
             C17317 * C1001 - C30929 * C994) *
                C32252 +
            (C32051 * C1124 - C30923 * C1114 + C32058 * C1648 - C30915 * C1644 +
             C17317 * C6425 - C30929 * C6424) *
                C3449 +
            (C32051 * C1141 - C30923 * C1125 + C32058 * C1653 - C30915 * C1649 +
             C17317 * C6427 - C30929 * C6426) *
                C32097) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
              C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
                 C114 +
             (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
              C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
                 C32010) *
                C15419 +
            ((C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
              C15433) *
                 C114 +
             (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
              C15441) *
                 C32010) *
                C31921) *
               C31970 * C471 +
           (((C15421 * C244 - C32324 * C254 + C15422 * C249 - C32320 * C264 +
              C15423 * C979 - C32310 * C985 + C15424 * C982 - C32292 * C991) *
                 C114 +
             (C15421 * C255 - C32324 * C274 + C15422 * C265 - C32320 * C279 +
              C15423 * C986 - C32310 * C997 + C15424 * C992 - C32292 * C1000) *
                 C32010) *
                C15419 +
            ((C15784 - C15785 + C15786 - C15787 + C15788 - C15789 + C15790 -
              C15791) *
                 C114 +
             (C15792 - C15793 + C15794 - C15795 + C15796 - C15797 + C15798 -
              C15799) *
                 C32010) *
                C31921) *
               C31970 * C472) *
              C473 +
          ((((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
              C15432) *
                 C114 +
             (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
              C15440) *
                 C32010) *
                C15419 +
            ((C15442 - C15443 + C15444 - C15445 + C15446 - C15447 + C15448 -
              C15449) *
                 C114 +
             (C15450 - C15451 + C15452 - C15453 + C15454 - C15455 + C15456 -
              C15457) *
                 C32010) *
                C31921) *
               C31970 * C471 +
           (((C15785 - C15784 + C15787 - C15786 + C15789 - C15788 + C15791 -
              C15790) *
                 C114 +
             (C15793 - C15792 + C15795 - C15794 + C15797 - C15796 + C15799 -
              C15798) *
                 C32010) *
                C15419 +
            ((C32324 * C258 - C15421 * C246 + C32320 * C268 - C15422 * C251 +
              C32310 * C989 - C15423 * C981 + C32292 * C995 - C15424 * C984) *
                 C114 +
             (C32324 * C276 - C15421 * C259 + C32320 * C281 - C15422 * C269 +
              C32310 * C999 - C15423 * C990 + C32292 * C1002 - C15424 * C996) *
                 C32010) *
                C31921) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                 C114 +
             (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                 C32010) *
                C32323 +
            ((C14634 - C14635 + C14636 - C14637) * C114 +
             (C14638 - C14639 + C14640 - C14641) * C32010) *
                C32316 +
            C14682 * C32303 + C14683 * C32286) *
               C31970 * C471 +
           (((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                 C114 +
             (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                 C32010) *
                C32323 +
            ((C15010 - C15011 + C15012 - C15013) * C114 +
             (C15014 - C15015 + C15016 - C15017) * C32010) *
                C32316 +
            ((C15018 - C15019 + C15020 - C15021) * C114 +
             (C15022 - C15023 + C15024 - C15025) * C32010) *
                C32303 +
            ((C15026 - C15027 + C15028 - C15029) * C114 +
             (C15030 - C15031 + C15032 - C15033) * C32010) *
                C32286) *
               C31970 * C472) *
              C473 +
          ((((C14635 - C14634 + C14637 - C14636) * C114 +
             (C14639 - C14638 + C14641 - C14640) * C32010) *
                C32323 +
            ((C14643 - C14642 + C14645 - C14644) * C114 +
             (C14647 - C14646 + C14649 - C14648) * C32010) *
                C32316 +
            ((C14651 - C14650 + C14653 - C14652) * C114 +
             (C14655 - C14654 + C14657 - C14656) * C32010) *
                C32303 +
            ((C14658 - C14659 + C14660 - C14661) * C114 +
             (C14662 - C14663 + C14664 - C14665) * C32010) *
                C32286) *
               C31970 * C471 +
           (((C15011 - C15010 + C15013 - C15012) * C114 +
             (C15015 - C15014 + C15017 - C15016) * C32010) *
                C32323 +
            ((C15019 - C15018 + C15021 - C15020) * C114 +
             (C15023 - C15022 + C15025 - C15024) * C32010) *
                C32316 +
            ((C15027 - C15026 + C15029 - C15028) * C114 +
             (C15031 - C15030 + C15033 - C15032) * C32010) *
                C32303 +
            ((C14625 * C262 - C14631 * C248 + C32055 * C272 - C14632 * C253) *
                 C114 +
             (C14625 * C278 - C14631 * C263 + C32055 * C283 - C14632 * C273) *
                 C32010) *
                C32286) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                 C1768 +
             (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                 C32318 +
             (C16530 - C16531 + C16532 - C16533) * C1769 +
             (C16534 - C16535 + C16536 - C16537) * C32307 + C16572 * C1770 +
             C16573 * C32285) *
                C15419 +
            ((C14634 - C14635 + C14636 - C14637) * C1768 +
             (C14638 - C14639 + C14640 - C14641) * C32318 +
             (C15165 - C15164 + C15167 - C15166) * C1769 +
             (C15169 - C15168 + C15171 - C15170) * C32307 + C16570 * C1770 +
             C16571 * C32285) *
                C31921) *
               C31970 * C471 +
           (((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                 C1768 +
             (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                 C32318 +
             (C14631 * C681 - C14625 * C686 + C14632 * C1113 - C32055 * C1122) *
                 C1769 +
             (C14631 * C687 - C14625 * C696 + C14632 * C1123 - C32055 * C1140) *
                 C32307 +
             (C14631 * C1116 - C14625 * C1128 + C14632 * C1117 -
              C32055 * C1129) *
                 C1770 +
             (C14631 * C1130 - C14625 * C1143 + C14632 * C1131 -
              C32055 * C1144) *
                 C32285) *
                C15419 +
            ((C15010 - C15011 + C15012 - C15013) * C1768 +
             (C15014 - C15015 + C15016 - C15017) * C32318 +
             (C16768 - C16769 + C16770 - C16771) * C1769 +
             (C16772 - C16773 + C16774 - C16775) * C32307 +
             (C16776 - C16777 + C16778 - C16779) * C1770 +
             (C16780 - C16781 + C16782 - C16783) * C32285) *
                C31921) *
               C31970 * C472) *
              C473 +
          ((((C14635 - C14634 + C14637 - C14636) * C1768 +
             (C14639 - C14638 + C14641 - C14640) * C32318 +
             (C15164 - C15165 + C15166 - C15167) * C1769 +
             (C15168 - C15169 + C15170 - C15171) * C32307 +
             (C16223 - C16222 + C16225 - C16224) * C1770 +
             (C16227 - C16226 + C16229 - C16228) * C32285) *
                C15419 +
            ((C14643 - C14642 + C14645 - C14644) * C1768 +
             (C14647 - C14646 + C14649 - C14648) * C32318 +
             (C15172 - C15173 + C15174 - C15175) * C1769 +
             (C15176 - C15177 + C15178 - C15179) * C32307 +
             (C16230 - C16231 + C16232 - C16233) * C1770 +
             (C16234 - C16235 + C16236 - C16237) * C32285) *
                C31921) *
               C31970 * C471 +
           (((C15011 - C15010 + C15013 - C15012) * C1768 +
             (C15015 - C15014 + C15017 - C15016) * C32318 +
             (C16769 - C16768 + C16771 - C16770) * C1769 +
             (C16773 - C16772 + C16775 - C16774) * C32307 +
             (C16777 - C16776 + C16779 - C16778) * C1770 +
             (C16781 - C16780 + C16783 - C16782) * C32285) *
                C15419 +
            ((C15019 - C15018 + C15021 - C15020) * C1768 +
             (C15023 - C15022 + C15025 - C15024) * C32318 +
             (C14625 * C690 - C14631 * C683 + C32055 * C1126 - C14632 * C1115) *
                 C1769 +
             (C14625 * C698 - C14631 * C691 + C32055 * C1142 - C14632 * C1127) *
                 C32307 +
             (C14625 * C1136 - C14631 * C1120 + C32055 * C1137 -
              C14632 * C1121) *
                 C1770 +
             (C14625 * C1147 - C14631 * C1138 + C32055 * C1148 -
              C14632 * C1139) *
                 C32285) *
                C31921) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
              C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
                 C114 +
             (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
              C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
                 C32010) *
                C15419 +
            ((C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
              C15433) *
                 C114 +
             (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
              C15441) *
                 C32010) *
                C31921) *
               C577 +
           (((C15421 * C349 - C32324 * C359 + C15422 * C681 - C32320 * C686 +
              C15423 * C1113 - C32310 * C1122 + C15424 * C1643 -
              C32292 * C1646) *
                 C114 +
             (C15421 * C360 - C32324 * C379 + C15422 * C687 - C32320 * C696 +
              C15423 * C1123 - C32310 * C1140 + C15424 * C1647 -
              C32292 * C1652) *
                 C32010) *
                C15419 +
            ((C15930 - C15931 + C15932 - C15933 + C15934 - C15935 + C15936 -
              C15937) *
                 C114 +
             (C15938 - C15939 + C15940 - C15941 + C15942 - C15943 + C15944 -
              C15945) *
                 C32010) *
                C31921) *
               C578) *
              C471 +
          ((((C15421 * C244 - C32324 * C254 + C15422 * C249 - C32320 * C264 +
              C15423 * C979 - C32310 * C985 + C15424 * C982 - C32292 * C991) *
                 C114 +
             (C15421 * C255 - C32324 * C274 + C15422 * C265 - C32320 * C279 +
              C15423 * C986 - C32310 * C997 + C15424 * C992 - C32292 * C1000) *
                 C32010) *
                C15419 +
            ((C15784 - C15785 + C15786 - C15787 + C15788 - C15789 + C15790 -
              C15791) *
                 C114 +
             (C15792 - C15793 + C15794 - C15795 + C15796 - C15797 + C15798 -
              C15799) *
                 C32010) *
                C31921) *
               C577 +
           (((C32324 * C686 - C15421 * C681 + C32320 * C1122 - C15422 * C1113 +
              C32310 * C1646 - C15423 * C1643 + C32292 * C6247 -
              C15424 * C6244) *
                 C114 +
             (C32324 * C696 - C15421 * C687 + C32320 * C1140 - C15422 * C1123 +
              C32310 * C1652 - C15423 * C1647 + C32292 * C6253 -
              C15424 * C6248) *
                 C32010) *
                C15419 +
            ((C32324 * C688 - C15421 * C682 + C32320 * C1124 - C15422 * C1114 +
              C32310 * C1648 - C15423 * C1644 + C32292 * C6425 -
              C15424 * C6424) *
                 C114 +
             (C32324 * C697 - C15421 * C689 + C32320 * C1141 - C15422 * C1125 +
              C32310 * C1653 - C15423 * C1649 + C32292 * C6427 -
              C15424 * C6426) *
                 C32010) *
                C31921) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                 C114 +
             (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                 C32010) *
                C32323 +
            ((C14634 - C14635 + C14636 - C14637) * C114 +
             (C14638 - C14639 + C14640 - C14641) * C32010) *
                C32316 +
            C14682 * C32303 + C14683 * C32286) *
               C577 +
           (((C14631 * C349 - C14625 * C359 + C14632 * C681 - C32055 * C686) *
                 C114 +
             (C14631 * C360 - C14625 * C379 + C14632 * C687 - C32055 * C696) *
                 C32010) *
                C32323 +
            ((C15164 - C15165 + C15166 - C15167) * C114 +
             (C15168 - C15169 + C15170 - C15171) * C32010) *
                C32316 +
            ((C15172 - C15173 + C15174 - C15175) * C114 +
             (C15176 - C15177 + C15178 - C15179) * C32010) *
                C32303 +
            ((C15180 - C15181 + C15182 - C15183) * C114 +
             (C15184 - C15185 + C15186 - C15187) * C32010) *
                C32286) *
               C578) *
              C471 +
          ((((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                 C114 +
             (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                 C32010) *
                C32323 +
            ((C15010 - C15011 + C15012 - C15013) * C114 +
             (C15014 - C15015 + C15016 - C15017) * C32010) *
                C32316 +
            ((C15018 - C15019 + C15020 - C15021) * C114 +
             (C15022 - C15023 + C15024 - C15025) * C32010) *
                C32303 +
            ((C15026 - C15027 + C15028 - C15029) * C114 +
             (C15030 - C15031 + C15032 - C15033) * C32010) *
                C32286) *
               C577 +
           (((C14625 * C686 - C14631 * C681 + C32055 * C1122 - C14632 * C1113) *
                 C114 +
             (C14625 * C696 - C14631 * C687 + C32055 * C1140 - C14632 * C1123) *
                 C32010) *
                C32323 +
            ((C14625 * C688 - C14631 * C682 + C32055 * C1124 - C14632 * C1114) *
                 C114 +
             (C14625 * C697 - C14631 * C689 + C32055 * C1141 - C14632 * C1125) *
                 C32010) *
                C32316 +
            ((C14625 * C690 - C14631 * C683 + C32055 * C1126 - C14632 * C1115) *
                 C114 +
             (C14625 * C698 - C14631 * C691 + C32055 * C1142 - C14632 * C1127) *
                 C32010) *
                C32303 +
            ((C14625 * C692 - C14631 * C684 + C32055 * C1470 - C14632 * C1469) *
                 C114 +
             (C14625 * C699 - C14631 * C693 + C32055 * C1472 - C14632 * C1471) *
                 C32010) *
                C32286) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                 C1768 +
             (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                 C32318 +
             (C16530 - C16531 + C16532 - C16533) * C1769 +
             (C16534 - C16535 + C16536 - C16537) * C32307 + C16572 * C1770 +
             C16573 * C32285) *
                C15419 +
            ((C14634 - C14635 + C14636 - C14637) * C1768 +
             (C14638 - C14639 + C14640 - C14641) * C32318 + C16990 * C1769 +
             C16991 * C32307 + C16570 * C1770 + C16571 * C32285) *
                C31921) *
               C577 +
           (((C16531 - C16530 + C16533 - C16532) * C1768 +
             (C16535 - C16534 + C16537 - C16536) * C32318 +
             (C16539 - C16538 + C16541 - C16540) * C1769 +
             (C16543 - C16542 + C16545 - C16544) * C32307 +
             (C16550 - C16551 + C16552 - C16553) * C1770 +
             (C16554 - C16555 + C16556 - C16557) * C32285) *
                C15419 +
            (C16992 * C1768 + C16993 * C32318 + C16994 * C1769 +
             C16995 * C32307 + (C16558 - C16559 + C16560 - C16561) * C1770 +
             (C16562 - C16563 + C16564 - C16565) * C32285) *
                C31921) *
               C578) *
              C471 +
          ((((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                 C1768 +
             (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                 C32318 +
             (C17190 - C17191 + C17192 - C17193) * C1769 +
             (C17194 - C17195 + C17196 - C17197) * C32307 +
             (C17198 - C17199 + C17200 - C17201) * C1770 +
             (C17202 - C17203 + C17204 - C17205) * C32285) *
                C15419 +
            ((C15010 - C15011 + C15012 - C15013) * C1768 +
             (C15014 - C15015 + C15016 - C15017) * C32318 +
             (C16768 - C16769 + C16770 - C16771) * C1769 +
             (C16772 - C16773 + C16774 - C16775) * C32307 +
             (C16776 - C16777 + C16778 - C16779) * C1770 +
             (C16780 - C16781 + C16782 - C16783) * C32285) *
                C31921) *
               C577 +
           (((C17191 - C17190 + C17193 - C17192) * C1768 +
             (C17195 - C17194 + C17197 - C17196) * C32318 +
             (C17199 - C17198 + C17201 - C17200) * C1769 +
             (C17203 - C17202 + C17205 - C17204) * C32307 +
             (C14625 * C2541 - C14631 * C2538 + C32055 * C6847 -
              C14632 * C6844) *
                 C1770 +
             (C14625 * C2547 - C14631 * C2542 + C32055 * C6853 -
              C14632 * C6848) *
                 C32285) *
                C15419 +
            ((C16769 - C16768 + C16771 - C16770) * C1768 +
             (C16773 - C16772 + C16775 - C16774) * C32318 +
             (C16777 - C16776 + C16779 - C16778) * C1769 +
             (C16781 - C16780 + C16783 - C16782) * C32307 +
             (C14625 * C2543 - C14631 * C2539 + C32055 * C7199 -
              C14632 * C7198) *
                 C1770 +
             (C14625 * C2548 - C14631 * C2544 + C32055 * C7201 -
              C14632 * C7200) *
                 C32285) *
                C31921) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C14625 * C122 - C14631 * C115 + C32055 * C254 -
                 C14632 * C244) *
                    C114 +
                (C14625 * C136 - C14631 * C123 + C32055 * C274 -
                 C14632 * C255) *
                    C32010) *
                   C32323 +
               ((C14634 - C14635 + C14636 - C14637) * C114 +
                (C14638 - C14639 + C14640 - C14641) * C32010) *
                   C32316 +
               C14682 * C32303 + C14683 * C32286) *
                  C31970 * C31956 * C110 +
              (((C14635 - C14634 + C14637 - C14636) * C114 +
                (C14639 - C14638 + C14641 - C14640) * C32010) *
                   C32323 +
               ((C14643 - C14642 + C14645 - C14644) * C114 +
                (C14647 - C14646 + C14649 - C14648) * C32010) *
                   C32316 +
               ((C14651 - C14650 + C14653 - C14652) * C114 +
                (C14655 - C14654 + C14657 - C14656) * C32010) *
                   C32303 +
               ((C14658 - C14659 + C14660 - C14661) * C114 +
                (C14662 - C14663 + C14664 - C14665) * C32010) *
                   C32286) *
                  C31970 * C31956 * C111 +
              (C14682 * C32323 + C14683 * C32316 +
               ((C14659 - C14658 + C14661 - C14660) * C114 +
                (C14663 - C14662 + C14665 - C14664) * C32010) *
                   C32303 +
               ((C14625 * C132 - C14631 * C120 + C32055 * C476 -
                 C14632 * C475) *
                    C114 +
                (C14625 * C141 - C14631 * C133 + C32055 * C478 -
                 C14632 * C477) *
                    C32010) *
                   C32286) *
                  C31970 * C31956 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C14625 * C122 - C14631 * C115 + C32055 * C254 -
                 C14632 * C244) *
                    C114 +
                (C14625 * C136 - C14631 * C123 + C32055 * C274 -
                 C14632 * C255) *
                    C32010) *
                   C32323 +
               ((C14634 - C14635 + C14636 - C14637) * C114 +
                (C14638 - C14639 + C14640 - C14641) * C32010) *
                   C32316 +
               C14682 * C32303 + C14683 * C32286) *
                  C31970 * C240 +
              (((C14631 * C244 - C14625 * C254 + C14632 * C249 -
                 C32055 * C264) *
                    C114 +
                (C14631 * C255 - C14625 * C274 + C14632 * C265 -
                 C32055 * C279) *
                    C32010) *
                   C32323 +
               ((C14631 * C245 - C14625 * C256 + C14632 * C250 -
                 C32055 * C266) *
                    C114 +
                (C14631 * C257 - C14625 * C275 + C14632 * C267 -
                 C32055 * C280) *
                    C32010) *
                   C32316 +
               ((C14631 * C246 - C14625 * C258 + C14632 * C251 -
                 C32055 * C268) *
                    C114 +
                (C14631 * C259 - C14625 * C276 + C14632 * C269 -
                 C32055 * C281) *
                    C32010) *
                   C32303 +
               ((C14631 * C247 - C14625 * C260 + C14632 * C252 -
                 C32055 * C270) *
                    C114 +
                (C14631 * C261 - C14625 * C277 + C14632 * C271 -
                 C32055 * C282) *
                    C32010) *
                   C32286) *
                  C31970 * C241 +
              (((C14625 * C264 - C14631 * C249 + C32055 * C985 -
                 C14632 * C979) *
                    C114 +
                (C14625 * C279 - C14631 * C265 + C32055 * C997 -
                 C14632 * C986) *
                    C32010) *
                   C32323 +
               ((C14625 * C266 - C14631 * C250 + C32055 * C987 -
                 C14632 * C980) *
                    C114 +
                (C14625 * C280 - C14631 * C267 + C32055 * C998 -
                 C14632 * C988) *
                    C32010) *
                   C32316 +
               ((C14625 * C268 - C14631 * C251 + C32055 * C989 -
                 C14632 * C981) *
                    C114 +
                (C14625 * C281 - C14631 * C269 + C32055 * C999 -
                 C14632 * C990) *
                    C32010) *
                   C32303 +
               ((C14625 * C270 - C14631 * C252 + C32055 * C1296 -
                 C14632 * C1295) *
                    C114 +
                (C14625 * C282 - C14631 * C271 + C32055 * C1298 -
                 C14632 * C1297) *
                    C32010) *
                   C32286) *
                  C31970 * C242) *
             C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C114 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C32010) *
               C32323 +
           ((C14634 - C14635 + C14636 - C14637) * C114 +
            (C14638 - C14639 + C14640 - C14641) * C32010) *
               C32316 +
           C14682 * C32303 + C14683 * C32286) *
              C346 +
          (((C14631 * C349 - C14625 * C359 + C14632 * C681 - C32055 * C686) *
                C114 +
            (C14631 * C360 - C14625 * C379 + C14632 * C687 - C32055 * C696) *
                C32010) *
               C32323 +
           ((C14631 * C350 - C14625 * C361 + C14632 * C682 - C32055 * C688) *
                C114 +
            (C14631 * C362 - C14625 * C380 + C14632 * C689 - C32055 * C697) *
                C32010) *
               C32316 +
           ((C14631 * C351 - C14625 * C363 + C14632 * C683 - C32055 * C690) *
                C114 +
            (C14631 * C364 - C14625 * C381 + C14632 * C691 - C32055 * C698) *
                C32010) *
               C32303 +
           ((C14631 * C352 - C14625 * C365 + C14632 * C684 - C32055 * C692) *
                C114 +
            (C14631 * C366 - C14625 * C382 + C14632 * C693 - C32055 * C699) *
                C32010) *
               C32286) *
              C347 +
          (((C14625 * C369 - C14631 * C354 + C32055 * C1128 - C14632 * C1116) *
                C114 +
            (C14625 * C384 - C14631 * C370 + C32055 * C1143 - C14632 * C1130) *
                C32010) *
               C32323 +
           ((C14625 * C371 - C14631 * C355 + C32055 * C1132 - C14632 * C1118) *
                C114 +
            (C14625 * C385 - C14631 * C372 + C32055 * C1145 - C14632 * C1134) *
                C32010) *
               C32316 +
           ((C14625 * C373 - C14631 * C356 + C32055 * C1136 - C14632 * C1120) *
                C114 +
            (C14625 * C386 - C14631 * C374 + C32055 * C1147 - C14632 * C1138) *
                C32010) *
               C32303 +
           ((C14625 * C375 - C14631 * C357 + C32055 * C2213 - C14632 * C2212) *
                C114 +
            (C14625 * C387 - C14631 * C376 + C32055 * C2215 - C14632 * C2214) *
                C32010) *
               C32286) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
             C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
                C114 +
            (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
             C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
                C32010) *
               C15419 +
           ((C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
             C15433) *
                C114 +
            (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
             C15441) *
                C32010) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
             C15432) *
                C114 +
            (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
             C15440) *
                C32010) *
               C15419 +
           ((C15442 - C15443 + C15444 - C15445 + C15446 - C15447 + C15448 -
             C15449) *
                C114 +
            (C15450 - C15451 + C15452 - C15453 + C15454 - C15455 + C15456 -
             C15457) *
                C32010) *
               C31921) *
              C31970 * C31956 * C111 +
          (((C15443 - C15442 + C15445 - C15444 + C15447 - C15446 + C15449 -
             C15448) *
                C114 +
            (C15451 - C15450 + C15453 - C15452 + C15455 - C15454 + C15457 -
             C15456) *
                C32010) *
               C15419 +
           ((C32324 * C128 - C15421 * C118 + C32320 * C260 - C15422 * C247 +
             C32310 * C270 - C15423 * C252 + C32292 * C1296 - C15424 * C1295) *
                C114 +
            (C32324 * C139 - C15421 * C129 + C32320 * C277 - C15422 * C261 +
             C32310 * C282 - C15423 * C271 + C32292 * C1298 - C15424 * C1297) *
                C32010) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
             C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
                C114 +
            (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
             C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
                C32010) *
               C15419 +
           ((C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
             C15433) *
                C114 +
            (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
             C15441) *
                C32010) *
               C31921) *
              C31970 * C240 +
          (((C15421 * C244 - C32324 * C254 + C15422 * C249 - C32320 * C264 +
             C15423 * C979 - C32310 * C985 + C15424 * C982 - C32292 * C991) *
                C114 +
            (C15421 * C255 - C32324 * C274 + C15422 * C265 - C32320 * C279 +
             C15423 * C986 - C32310 * C997 + C15424 * C992 - C32292 * C1000) *
                C32010) *
               C15419 +
           ((C15421 * C245 - C32324 * C256 + C15422 * C250 - C32320 * C266 +
             C15423 * C980 - C32310 * C987 + C15424 * C983 - C32292 * C993) *
                C114 +
            (C15421 * C257 - C32324 * C275 + C15422 * C267 - C32320 * C280 +
             C15423 * C988 - C32310 * C998 + C15424 * C994 - C32292 * C1001) *
                C32010) *
               C31921) *
              C31970 * C241 +
          (((C32324 * C264 - C15421 * C249 + C32320 * C985 - C15422 * C979 +
             C32310 * C991 - C15423 * C982 + C32292 * C6176 - C15424 * C6174) *
                C114 +
            (C32324 * C279 - C15421 * C265 + C32320 * C997 - C15422 * C986 +
             C32310 * C1000 - C15423 * C992 + C32292 * C6180 - C15424 * C6177) *
                C32010) *
               C15419 +
           ((C32324 * C266 - C15421 * C250 + C32320 * C987 - C15422 * C980 +
             C32310 * C993 - C15423 * C983 + C32292 * C6339 - C15424 * C6338) *
                C114 +
            (C32324 * C280 - C15421 * C267 + C32320 * C998 - C15422 * C988 +
             C32310 * C1001 - C15423 * C994 + C32292 * C6341 - C15424 * C6340) *
                C32010) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
             C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
                C114 +
            (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
             C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
                C32010) *
               C15419 +
           ((C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
             C15433) *
                C114 +
            (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
             C15441) *
                C32010) *
               C31921) *
              C346 +
          (((C15421 * C349 - C32324 * C359 + C15422 * C681 - C32320 * C686 +
             C15423 * C1113 - C32310 * C1122 + C15424 * C1643 -
             C32292 * C1646) *
                C114 +
            (C15421 * C360 - C32324 * C379 + C15422 * C687 - C32320 * C696 +
             C15423 * C1123 - C32310 * C1140 + C15424 * C1647 -
             C32292 * C1652) *
                C32010) *
               C15419 +
           ((C15421 * C350 - C32324 * C361 + C15422 * C682 - C32320 * C688 +
             C15423 * C1114 - C32310 * C1124 + C15424 * C1644 -
             C32292 * C1648) *
                C114 +
            (C15421 * C362 - C32324 * C380 + C15422 * C689 - C32320 * C697 +
             C15423 * C1125 - C32310 * C1141 + C15424 * C1649 -
             C32292 * C1653) *
                C32010) *
               C31921) *
              C347 +
          (((C32324 * C369 - C15421 * C354 + C32320 * C1128 - C15422 * C1116 +
             C32310 * C1129 - C15423 * C1117 + C32292 * C6249 -
             C15424 * C6245) *
                C114 +
            (C32324 * C384 - C15421 * C370 + C32320 * C1143 - C15422 * C1130 +
             C32310 * C1144 - C15423 * C1131 + C32292 * C6254 -
             C15424 * C6251) *
                C32010) *
               C15419 +
           ((C32324 * C371 - C15421 * C355 + C32320 * C1132 - C15422 * C1118 +
             C32310 * C1133 - C15423 * C1119 + C32292 * C7049 -
             C15424 * C7048) *
                C114 +
            (C32324 * C385 - C15421 * C372 + C32320 * C1145 - C15422 * C1134 +
             C32310 * C1146 - C15423 * C1135 + C32292 * C7051 -
             C15424 * C7050) *
                C32010) *
               C31921) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C1768 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C32318 +
            (C14625 * C359 - C14631 * C349 + C32055 * C686 - C14632 * C681) *
                C1769 +
            (C14625 * C379 - C14631 * C360 + C32055 * C696 - C14632 * C687) *
                C32307 +
            (C14625 * C369 - C14631 * C354 + C32055 * C1128 - C14632 * C1116) *
                C1770 +
            (C14625 * C384 - C14631 * C370 + C32055 * C1143 - C14632 * C1130) *
                C32285) *
               C15419 +
           ((C14634 - C14635 + C14636 - C14637) * C1768 +
            (C14638 - C14639 + C14640 - C14641) * C32318 +
            (C15165 - C15164 + C15167 - C15166) * C1769 +
            (C15169 - C15168 + C15171 - C15170) * C32307 +
            (C16222 - C16223 + C16224 - C16225) * C1770 +
            (C16226 - C16227 + C16228 - C16229) * C32285) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C14635 - C14634 + C14637 - C14636) * C1768 +
            (C14639 - C14638 + C14641 - C14640) * C32318 +
            (C15164 - C15165 + C15166 - C15167) * C1769 +
            (C15168 - C15169 + C15170 - C15171) * C32307 +
            (C16223 - C16222 + C16225 - C16224) * C1770 +
            (C16227 - C16226 + C16229 - C16228) * C32285) *
               C15419 +
           ((C14643 - C14642 + C14645 - C14644) * C1768 +
            (C14647 - C14646 + C14649 - C14648) * C32318 +
            (C15172 - C15173 + C15174 - C15175) * C1769 +
            (C15176 - C15177 + C15178 - C15179) * C32307 +
            (C16230 - C16231 + C16232 - C16233) * C1770 +
            (C16234 - C16235 + C16236 - C16237) * C32285) *
               C31921) *
              C31970 * C31956 * C111 +
          ((C14674 * C1768 + C14675 * C32318 +
            (C15173 - C15172 + C15175 - C15174) * C1769 +
            (C15177 - C15176 + C15179 - C15178) * C32307 +
            (C16231 - C16230 + C16233 - C16232) * C1770 +
            (C16235 - C16234 + C16237 - C16236) * C32285) *
               C15419 +
           (C14676 * C1768 + C14677 * C32318 +
            (C15181 - C15180 + C15183 - C15182) * C1769 +
            (C15185 - C15184 + C15187 - C15186) * C32307 +
            (C14625 * C375 - C14631 * C357 + C32055 * C2213 - C14632 * C2212) *
                C1770 +
            (C14625 * C387 - C14631 * C376 + C32055 * C2215 - C14632 * C2214) *
                C32285) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C1768 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C32318 +
            (C14625 * C359 - C14631 * C349 + C32055 * C686 - C14632 * C681) *
                C1769 +
            (C14625 * C379 - C14631 * C360 + C32055 * C696 - C14632 * C687) *
                C32307 +
            (C14625 * C369 - C14631 * C354 + C32055 * C1128 - C14632 * C1116) *
                C1770 +
            (C14625 * C384 - C14631 * C370 + C32055 * C1143 - C14632 * C1130) *
                C32285) *
               C15419 +
           ((C14634 - C14635 + C14636 - C14637) * C1768 +
            (C14638 - C14639 + C14640 - C14641) * C32318 +
            (C15165 - C15164 + C15167 - C15166) * C1769 +
            (C15169 - C15168 + C15171 - C15170) * C32307 +
            (C16222 - C16223 + C16224 - C16225) * C1770 +
            (C16226 - C16227 + C16228 - C16229) * C32285) *
               C31921) *
              C31970 * C240 +
          (((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                C1768 +
            (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                C32318 +
            (C14631 * C681 - C14625 * C686 + C14632 * C1113 - C32055 * C1122) *
                C1769 +
            (C14631 * C687 - C14625 * C696 + C14632 * C1123 - C32055 * C1140) *
                C32307 +
            (C14631 * C1116 - C14625 * C1128 + C14632 * C1117 -
             C32055 * C1129) *
                C1770 +
            (C14631 * C1130 - C14625 * C1143 + C14632 * C1131 -
             C32055 * C1144) *
                C32285) *
               C15419 +
           ((C15010 - C15011 + C15012 - C15013) * C1768 +
            (C15014 - C15015 + C15016 - C15017) * C32318 +
            (C14631 * C682 - C14625 * C688 + C14632 * C1114 - C32055 * C1124) *
                C1769 +
            (C14631 * C689 - C14625 * C697 + C14632 * C1125 - C32055 * C1141) *
                C32307 +
            (C14631 * C1118 - C14625 * C1132 + C14632 * C1119 -
             C32055 * C1133) *
                C1770 +
            (C14631 * C1134 - C14625 * C1145 + C14632 * C1135 -
             C32055 * C1146) *
                C32285) *
               C31921) *
              C31970 * C241 +
          (((C14625 * C264 - C14631 * C249 + C32055 * C985 - C14632 * C979) *
                C1768 +
            (C14625 * C279 - C14631 * C265 + C32055 * C997 - C14632 * C986) *
                C32318 +
            (C14625 * C1122 - C14631 * C1113 + C32055 * C1646 -
             C14632 * C1643) *
                C1769 +
            (C14625 * C1140 - C14631 * C1123 + C32055 * C1652 -
             C14632 * C1647) *
                C32307 +
            (C14625 * C1129 - C14631 * C1117 + C32055 * C6249 -
             C14632 * C6245) *
                C1770 +
            (C14625 * C1144 - C14631 * C1131 + C32055 * C6254 -
             C14632 * C6251) *
                C32285) *
               C15419 +
           ((C14625 * C266 - C14631 * C250 + C32055 * C987 - C14632 * C980) *
                C1768 +
            (C14625 * C280 - C14631 * C267 + C32055 * C998 - C14632 * C988) *
                C32318 +
            (C14625 * C1124 - C14631 * C1114 + C32055 * C1648 -
             C14632 * C1644) *
                C1769 +
            (C14625 * C1141 - C14631 * C1125 + C32055 * C1653 -
             C14632 * C1649) *
                C32307 +
            (C14625 * C1133 - C14631 * C1119 + C32055 * C7049 -
             C14632 * C7048) *
                C1770 +
            (C14625 * C1146 - C14631 * C1135 + C32055 * C7051 -
             C14632 * C7050) *
                C32285) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C1768 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C32318 +
            (C16530 - C16531 + C16532 - C16533) * C1769 +
            (C16534 - C16535 + C16536 - C16537) * C32307 + C16572 * C1770 +
            C16573 * C32285) *
               C15419 +
           ((C14634 - C14635 + C14636 - C14637) * C1768 +
            (C14638 - C14639 + C14640 - C14641) * C32318 +
            (C15165 - C15164 + C15167 - C15166) * C1769 +
            (C15169 - C15168 + C15171 - C15170) * C32307 + C16570 * C1770 +
            C16571 * C32285) *
               C31921) *
              C346 +
          (((C16531 - C16530 + C16533 - C16532) * C1768 +
            (C16535 - C16534 + C16537 - C16536) * C32318 +
            (C16539 - C16538 + C16541 - C16540) * C1769 +
            (C16543 - C16542 + C16545 - C16544) * C32307 +
            (C16550 - C16551 + C16552 - C16553) * C1770 +
            (C16554 - C16555 + C16556 - C16557) * C32285) *
               C15419 +
           ((C15164 - C15165 + C15166 - C15167) * C1768 +
            (C15168 - C15169 + C15170 - C15171) * C32318 +
            (C16223 - C16222 + C16225 - C16224) * C1769 +
            (C16227 - C16226 + C16229 - C16228) * C32307 +
            (C16558 - C16559 + C16560 - C16561) * C1770 +
            (C16562 - C16563 + C16564 - C16565) * C32285) *
               C31921) *
              C347 +
          ((C16572 * C1768 + C16573 * C32318 +
            (C16551 - C16550 + C16553 - C16552) * C1769 +
            (C16555 - C16554 + C16557 - C16556) * C32307 +
            (C14625 * C2030 - C14631 * C2021 + C32055 * C6849 -
             C14632 * C6845) *
                C1770 +
            (C14625 * C2039 - C14631 * C2031 + C32055 * C6854 -
             C14632 * C6851) *
                C32285) *
               C15419 +
           (C16570 * C1768 + C16571 * C32318 +
            (C16559 - C16558 + C16561 - C16560) * C1769 +
            (C16563 - C16562 + C16565 - C16564) * C32307 +
            (C14625 * C2032 - C14631 * C2022 + C32055 * C11864 -
             C14632 * C11863) *
                C1770 +
            (C14625 * C2040 - C14631 * C2033 + C32055 * C11866 -
             C14632 * C11865) *
                C32285) *
               C31921) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
              C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
                 C114 +
             (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
              C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
                 C32010) *
                C15419 +
            ((C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
              C15433) *
                 C114 +
             (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
              C15441) *
                 C32010) *
                C31921) *
               C577 +
           (((C15421 * C349 - C32324 * C359 + C15422 * C681 - C32320 * C686 +
              C15423 * C1113 - C32310 * C1122 + C15424 * C1643 -
              C32292 * C1646) *
                 C114 +
             (C15421 * C360 - C32324 * C379 + C15422 * C687 - C32320 * C696 +
              C15423 * C1123 - C32310 * C1140 + C15424 * C1647 -
              C32292 * C1652) *
                 C32010) *
                C15419 +
            ((C15930 - C15931 + C15932 - C15933 + C15934 - C15935 + C15936 -
              C15937) *
                 C114 +
             (C15938 - C15939 + C15940 - C15941 + C15942 - C15943 + C15944 -
              C15945) *
                 C32010) *
                C31921) *
               C578) *
              C31956 * C473 +
          ((((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
              C15432) *
                 C114 +
             (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
              C15440) *
                 C32010) *
                C15419 +
            ((C15442 - C15443 + C15444 - C15445 + C15446 - C15447 + C15448 -
              C15449) *
                 C114 +
             (C15450 - C15451 + C15452 - C15453 + C15454 - C15455 + C15456 -
              C15457) *
                 C32010) *
                C31921) *
               C577 +
           (((C15931 - C15930 + C15933 - C15932 + C15935 - C15934 + C15937 -
              C15936) *
                 C114 +
             (C15939 - C15938 + C15941 - C15940 + C15943 - C15942 + C15945 -
              C15944) *
                 C32010) *
                C15419 +
            ((C32324 * C363 - C15421 * C351 + C32320 * C690 - C15422 * C683 +
              C32310 * C1126 - C15423 * C1115 + C32292 * C1650 -
              C15424 * C1645) *
                 C114 +
             (C32324 * C381 - C15421 * C364 + C32320 * C698 - C15422 * C691 +
              C32310 * C1142 - C15423 * C1127 + C32292 * C1654 -
              C15424 * C1651) *
                 C32010) *
                C31921) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                 C114 +
             (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                 C32010) *
                C32323 +
            ((C14634 - C14635 + C14636 - C14637) * C114 +
             (C14638 - C14639 + C14640 - C14641) * C32010) *
                C32316 +
            C14682 * C32303 + C14683 * C32286) *
               C577 +
           (((C14631 * C349 - C14625 * C359 + C14632 * C681 - C32055 * C686) *
                 C114 +
             (C14631 * C360 - C14625 * C379 + C14632 * C687 - C32055 * C696) *
                 C32010) *
                C32323 +
            ((C15164 - C15165 + C15166 - C15167) * C114 +
             (C15168 - C15169 + C15170 - C15171) * C32010) *
                C32316 +
            ((C15172 - C15173 + C15174 - C15175) * C114 +
             (C15176 - C15177 + C15178 - C15179) * C32010) *
                C32303 +
            ((C15180 - C15181 + C15182 - C15183) * C114 +
             (C15184 - C15185 + C15186 - C15187) * C32010) *
                C32286) *
               C578) *
              C31956 * C473 +
          ((((C14635 - C14634 + C14637 - C14636) * C114 +
             (C14639 - C14638 + C14641 - C14640) * C32010) *
                C32323 +
            ((C14643 - C14642 + C14645 - C14644) * C114 +
             (C14647 - C14646 + C14649 - C14648) * C32010) *
                C32316 +
            ((C14651 - C14650 + C14653 - C14652) * C114 +
             (C14655 - C14654 + C14657 - C14656) * C32010) *
                C32303 +
            ((C14658 - C14659 + C14660 - C14661) * C114 +
             (C14662 - C14663 + C14664 - C14665) * C32010) *
                C32286) *
               C577 +
           (((C15165 - C15164 + C15167 - C15166) * C114 +
             (C15169 - C15168 + C15171 - C15170) * C32010) *
                C32323 +
            ((C15173 - C15172 + C15175 - C15174) * C114 +
             (C15177 - C15176 + C15179 - C15178) * C32010) *
                C32316 +
            ((C15181 - C15180 + C15183 - C15182) * C114 +
             (C15185 - C15184 + C15187 - C15186) * C32010) *
                C32303 +
            ((C14625 * C367 - C14631 * C353 + C32055 * C694 - C14632 * C685) *
                 C114 +
             (C14625 * C383 - C14631 * C368 + C32055 * C700 - C14632 * C695) *
                 C32010) *
                C32286) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                 C1768 +
             (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                 C32318 +
             (C16530 - C16531 + C16532 - C16533) * C1769 +
             (C16534 - C16535 + C16536 - C16537) * C32307 + C16572 * C1770 +
             C16573 * C32285) *
                C15419 +
            ((C14634 - C14635 + C14636 - C14637) * C1768 +
             (C14638 - C14639 + C14640 - C14641) * C32318 + C16990 * C1769 +
             C16991 * C32307 + C16570 * C1770 + C16571 * C32285) *
                C31921) *
               C577 +
           (((C16531 - C16530 + C16533 - C16532) * C1768 +
             (C16535 - C16534 + C16537 - C16536) * C32318 +
             (C16539 - C16538 + C16541 - C16540) * C1769 +
             (C16543 - C16542 + C16545 - C16544) * C32307 +
             (C16550 - C16551 + C16552 - C16553) * C1770 +
             (C16554 - C16555 + C16556 - C16557) * C32285) *
                C15419 +
            (C16992 * C1768 + C16993 * C32318 + C16994 * C1769 +
             C16995 * C32307 + (C16558 - C16559 + C16560 - C16561) * C1770 +
             (C16562 - C16563 + C16564 - C16565) * C32285) *
                C31921) *
               C578) *
              C31956 * C473 +
          ((((C14635 - C14634 + C14637 - C14636) * C1768 +
             (C14639 - C14638 + C14641 - C14640) * C32318 + C16992 * C1769 +
             C16993 * C32307 + C16994 * C1770 + C16995 * C32285) *
                C15419 +
            ((C14643 - C14642 + C14645 - C14644) * C1768 +
             (C14647 - C14646 + C14649 - C14648) * C32318 +
             (C15172 - C15173 + C15174 - C15175) * C1769 +
             (C15176 - C15177 + C15178 - C15179) * C32307 +
             (C16230 - C16231 + C16232 - C16233) * C1770 +
             (C16234 - C16235 + C16236 - C16237) * C32285) *
                C31921) *
               C577 +
           ((C16990 * C1768 + C16991 * C32318 + C16570 * C1769 +
             C16571 * C32307 + (C16559 - C16558 + C16561 - C16560) * C1770 +
             (C16563 - C16562 + C16565 - C16564) * C32285) *
                C15419 +
            ((C15173 - C15172 + C15175 - C15174) * C1768 +
             (C15177 - C15176 + C15179 - C15178) * C32318 +
             (C16231 - C16230 + C16233 - C16232) * C1769 +
             (C16235 - C16234 + C16237 - C16236) * C32307 +
             (C14625 * C2028 - C14631 * C2020 + C32055 * C2545 -
              C14632 * C2540) *
                 C1770 +
             (C14625 * C2038 - C14631 * C2029 + C32055 * C2549 -
              C14632 * C2546) *
                 C32285) *
                C31921) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C114 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C32010) *
               C32323 +
           ((C14634 - C14635 + C14636 - C14637) * C114 +
            (C14638 - C14639 + C14640 - C14641) * C32010) *
               C32316 +
           C14682 * C32303 + C14683 * C32286) *
              C31970 * C240 +
          (((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                C114 +
            (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                C32010) *
               C32323 +
           ((C14631 * C245 - C14625 * C256 + C14632 * C250 - C32055 * C266) *
                C114 +
            (C14631 * C257 - C14625 * C275 + C14632 * C267 - C32055 * C280) *
                C32010) *
               C32316 +
           ((C14631 * C246 - C14625 * C258 + C14632 * C251 - C32055 * C268) *
                C114 +
            (C14631 * C259 - C14625 * C276 + C14632 * C269 - C32055 * C281) *
                C32010) *
               C32303 +
           ((C14631 * C247 - C14625 * C260 + C14632 * C252 - C32055 * C270) *
                C114 +
            (C14631 * C261 - C14625 * C277 + C14632 * C271 - C32055 * C282) *
                C32010) *
               C32286) *
              C31970 * C241 +
          (((C14625 * C264 - C14631 * C249 + C32055 * C985 - C14632 * C979) *
                C114 +
            (C14625 * C279 - C14631 * C265 + C32055 * C997 - C14632 * C986) *
                C32010) *
               C32323 +
           ((C14625 * C266 - C14631 * C250 + C32055 * C987 - C14632 * C980) *
                C114 +
            (C14625 * C280 - C14631 * C267 + C32055 * C998 - C14632 * C988) *
                C32010) *
               C32316 +
           ((C14625 * C268 - C14631 * C251 + C32055 * C989 - C14632 * C981) *
                C114 +
            (C14625 * C281 - C14631 * C269 + C32055 * C999 - C14632 * C990) *
                C32010) *
               C32303 +
           ((C14625 * C270 - C14631 * C252 + C32055 * C1296 - C14632 * C1295) *
                C114 +
            (C14625 * C282 - C14631 * C271 + C32055 * C1298 - C14632 * C1297) *
                C32010) *
               C32286) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C114 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C32010) *
               C32323 +
           ((C14634 - C14635 + C14636 - C14637) * C114 +
            (C14638 - C14639 + C14640 - C14641) * C32010) *
               C32316 +
           C14682 * C32303 + C14683 * C32286) *
              C31970 * C31956 * C110 +
          (((C14635 - C14634 + C14637 - C14636) * C114 +
            (C14639 - C14638 + C14641 - C14640) * C32010) *
               C32323 +
           ((C14643 - C14642 + C14645 - C14644) * C114 +
            (C14647 - C14646 + C14649 - C14648) * C32010) *
               C32316 +
           ((C14651 - C14650 + C14653 - C14652) * C114 +
            (C14655 - C14654 + C14657 - C14656) * C32010) *
               C32303 +
           ((C14658 - C14659 + C14660 - C14661) * C114 +
            (C14662 - C14663 + C14664 - C14665) * C32010) *
               C32286) *
              C31970 * C31956 * C111 +
          (C14682 * C32323 + C14683 * C32316 +
           ((C14659 - C14658 + C14661 - C14660) * C114 +
            (C14663 - C14662 + C14665 - C14664) * C32010) *
               C32303 +
           ((C14625 * C132 - C14631 * C120 + C32055 * C476 - C14632 * C475) *
                C114 +
            (C14625 * C141 - C14631 * C133 + C32055 * C478 - C14632 * C477) *
                C32010) *
               C32286) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
             C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
                C114 +
            (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
             C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
                C32010) *
               C15419 +
           ((C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
             C15433) *
                C114 +
            (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
             C15441) *
                C32010) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
             C15432) *
                C114 +
            (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
             C15440) *
                C32010) *
               C15419 +
           ((C15442 - C15443 + C15444 - C15445 + C15446 - C15447 + C15448 -
             C15449) *
                C114 +
            (C15450 - C15451 + C15452 - C15453 + C15454 - C15455 + C15456 -
             C15457) *
                C32010) *
               C31921) *
              C31970 * C31956 * C111 +
          (((C15443 - C15442 + C15445 - C15444 + C15447 - C15446 + C15449 -
             C15448) *
                C114 +
            (C15451 - C15450 + C15453 - C15452 + C15455 - C15454 + C15457 -
             C15456) *
                C32010) *
               C15419 +
           ((C32324 * C128 - C15421 * C118 + C32320 * C260 - C15422 * C247 +
             C32310 * C270 - C15423 * C252 + C32292 * C1296 - C15424 * C1295) *
                C114 +
            (C32324 * C139 - C15421 * C129 + C32320 * C277 - C15422 * C261 +
             C32310 * C282 - C15423 * C271 + C32292 * C1298 - C15424 * C1297) *
                C32010) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
             C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
                C114 +
            (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
             C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
                C32010) *
               C15419 +
           ((C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
             C15433) *
                C114 +
            (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
             C15441) *
                C32010) *
               C31921) *
              C31970 * C240 +
          (((C15421 * C244 - C32324 * C254 + C15422 * C249 - C32320 * C264 +
             C15423 * C979 - C32310 * C985 + C15424 * C982 - C32292 * C991) *
                C114 +
            (C15421 * C255 - C32324 * C274 + C15422 * C265 - C32320 * C279 +
             C15423 * C986 - C32310 * C997 + C15424 * C992 - C32292 * C1000) *
                C32010) *
               C15419 +
           ((C15421 * C245 - C32324 * C256 + C15422 * C250 - C32320 * C266 +
             C15423 * C980 - C32310 * C987 + C15424 * C983 - C32292 * C993) *
                C114 +
            (C15421 * C257 - C32324 * C275 + C15422 * C267 - C32320 * C280 +
             C15423 * C988 - C32310 * C998 + C15424 * C994 - C32292 * C1001) *
                C32010) *
               C31921) *
              C31970 * C241 +
          (((C32324 * C264 - C15421 * C249 + C32320 * C985 - C15422 * C979 +
             C32310 * C991 - C15423 * C982 + C32292 * C6176 - C15424 * C6174) *
                C114 +
            (C32324 * C279 - C15421 * C265 + C32320 * C997 - C15422 * C986 +
             C32310 * C1000 - C15423 * C992 + C32292 * C6180 - C15424 * C6177) *
                C32010) *
               C15419 +
           ((C32324 * C266 - C15421 * C250 + C32320 * C987 - C15422 * C980 +
             C32310 * C993 - C15423 * C983 + C32292 * C6339 - C15424 * C6338) *
                C114 +
            (C32324 * C280 - C15421 * C267 + C32320 * C998 - C15422 * C988 +
             C32310 * C1001 - C15423 * C994 + C32292 * C6341 - C15424 * C6340) *
                C32010) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C1768 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C32318 +
            (C14625 * C359 - C14631 * C349 + C32055 * C686 - C14632 * C681) *
                C1769 +
            (C14625 * C379 - C14631 * C360 + C32055 * C696 - C14632 * C687) *
                C32307 +
            (C14625 * C369 - C14631 * C354 + C32055 * C1128 - C14632 * C1116) *
                C1770 +
            (C14625 * C384 - C14631 * C370 + C32055 * C1143 - C14632 * C1130) *
                C32285) *
               C15419 +
           ((C14634 - C14635 + C14636 - C14637) * C1768 +
            (C14638 - C14639 + C14640 - C14641) * C32318 +
            (C15165 - C15164 + C15167 - C15166) * C1769 +
            (C15169 - C15168 + C15171 - C15170) * C32307 +
            (C16222 - C16223 + C16224 - C16225) * C1770 +
            (C16226 - C16227 + C16228 - C16229) * C32285) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C14635 - C14634 + C14637 - C14636) * C1768 +
            (C14639 - C14638 + C14641 - C14640) * C32318 +
            (C15164 - C15165 + C15166 - C15167) * C1769 +
            (C15168 - C15169 + C15170 - C15171) * C32307 +
            (C16223 - C16222 + C16225 - C16224) * C1770 +
            (C16227 - C16226 + C16229 - C16228) * C32285) *
               C15419 +
           ((C14643 - C14642 + C14645 - C14644) * C1768 +
            (C14647 - C14646 + C14649 - C14648) * C32318 +
            (C15172 - C15173 + C15174 - C15175) * C1769 +
            (C15176 - C15177 + C15178 - C15179) * C32307 +
            (C16230 - C16231 + C16232 - C16233) * C1770 +
            (C16234 - C16235 + C16236 - C16237) * C32285) *
               C31921) *
              C31970 * C31956 * C111 +
          ((C14674 * C1768 + C14675 * C32318 +
            (C15173 - C15172 + C15175 - C15174) * C1769 +
            (C15177 - C15176 + C15179 - C15178) * C32307 +
            (C16231 - C16230 + C16233 - C16232) * C1770 +
            (C16235 - C16234 + C16237 - C16236) * C32285) *
               C15419 +
           (C14676 * C1768 + C14677 * C32318 +
            (C15181 - C15180 + C15183 - C15182) * C1769 +
            (C15185 - C15184 + C15187 - C15186) * C32307 +
            (C14625 * C375 - C14631 * C357 + C32055 * C2213 - C14632 * C2212) *
                C1770 +
            (C14625 * C387 - C14631 * C376 + C32055 * C2215 - C14632 * C2214) *
                C32285) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C1768 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C32318 +
            (C14625 * C359 - C14631 * C349 + C32055 * C686 - C14632 * C681) *
                C1769 +
            (C14625 * C379 - C14631 * C360 + C32055 * C696 - C14632 * C687) *
                C32307 +
            (C14625 * C369 - C14631 * C354 + C32055 * C1128 - C14632 * C1116) *
                C1770 +
            (C14625 * C384 - C14631 * C370 + C32055 * C1143 - C14632 * C1130) *
                C32285) *
               C15419 +
           ((C14634 - C14635 + C14636 - C14637) * C1768 +
            (C14638 - C14639 + C14640 - C14641) * C32318 +
            (C15165 - C15164 + C15167 - C15166) * C1769 +
            (C15169 - C15168 + C15171 - C15170) * C32307 +
            (C16222 - C16223 + C16224 - C16225) * C1770 +
            (C16226 - C16227 + C16228 - C16229) * C32285) *
               C31921) *
              C31970 * C240 +
          (((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                C1768 +
            (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                C32318 +
            (C14631 * C681 - C14625 * C686 + C14632 * C1113 - C32055 * C1122) *
                C1769 +
            (C14631 * C687 - C14625 * C696 + C14632 * C1123 - C32055 * C1140) *
                C32307 +
            (C14631 * C1116 - C14625 * C1128 + C14632 * C1117 -
             C32055 * C1129) *
                C1770 +
            (C14631 * C1130 - C14625 * C1143 + C14632 * C1131 -
             C32055 * C1144) *
                C32285) *
               C15419 +
           ((C15010 - C15011 + C15012 - C15013) * C1768 +
            (C15014 - C15015 + C15016 - C15017) * C32318 +
            (C14631 * C682 - C14625 * C688 + C14632 * C1114 - C32055 * C1124) *
                C1769 +
            (C14631 * C689 - C14625 * C697 + C14632 * C1125 - C32055 * C1141) *
                C32307 +
            (C14631 * C1118 - C14625 * C1132 + C14632 * C1119 -
             C32055 * C1133) *
                C1770 +
            (C14631 * C1134 - C14625 * C1145 + C14632 * C1135 -
             C32055 * C1146) *
                C32285) *
               C31921) *
              C31970 * C241 +
          (((C14625 * C264 - C14631 * C249 + C32055 * C985 - C14632 * C979) *
                C1768 +
            (C14625 * C279 - C14631 * C265 + C32055 * C997 - C14632 * C986) *
                C32318 +
            (C14625 * C1122 - C14631 * C1113 + C32055 * C1646 -
             C14632 * C1643) *
                C1769 +
            (C14625 * C1140 - C14631 * C1123 + C32055 * C1652 -
             C14632 * C1647) *
                C32307 +
            (C14625 * C1129 - C14631 * C1117 + C32055 * C6249 -
             C14632 * C6245) *
                C1770 +
            (C14625 * C1144 - C14631 * C1131 + C32055 * C6254 -
             C14632 * C6251) *
                C32285) *
               C15419 +
           ((C14625 * C266 - C14631 * C250 + C32055 * C987 - C14632 * C980) *
                C1768 +
            (C14625 * C280 - C14631 * C267 + C32055 * C998 - C14632 * C988) *
                C32318 +
            (C14625 * C1124 - C14631 * C1114 + C32055 * C1648 -
             C14632 * C1644) *
                C1769 +
            (C14625 * C1141 - C14631 * C1125 + C32055 * C1653 -
             C14632 * C1649) *
                C32307 +
            (C14625 * C1133 - C14631 * C1119 + C32055 * C7049 -
             C14632 * C7048) *
                C1770 +
            (C14625 * C1146 - C14631 * C1135 + C32055 * C7051 -
             C14632 * C7050) *
                C32285) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                 C3448 +
             (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                 C32252 +
             (C16530 - C16531 + C16532 - C16533) * C3449 +
             (C16534 - C16535 + C16536 - C16537) * C32097) *
                C31916 +
            ((C14634 - C14635 + C14636 - C14637) * C3448 +
             (C14638 - C14639 + C14640 - C14641) * C32252 + C16990 * C3449 +
             C16991 * C32097) *
                C31924 +
            C18238 * C17320) *
               C31970 * C471 +
           (((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                 C3448 +
             (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                 C32252 +
             (C17190 - C17191 + C17192 - C17193) * C3449 +
             (C17194 - C17195 + C17196 - C17197) * C32097) *
                C31916 +
            ((C15010 - C15011 + C15012 - C15013) * C3448 +
             (C15014 - C15015 + C15016 - C15017) * C32252 +
             (C16768 - C16769 + C16770 - C16771) * C3449 +
             (C16772 - C16773 + C16774 - C16775) * C32097) *
                C31924 +
            ((C15018 - C15019 + C15020 - C15021) * C3448 +
             (C15022 - C15023 + C15024 - C15025) * C32252 +
             (C18725 - C18726 + C18727 - C18728) * C3449 +
             (C18729 - C18730 + C18731 - C18732) * C32097) *
                C17320) *
               C31970 * C472) *
              C473 +
          ((((C14635 - C14634 + C14637 - C14636) * C3448 +
             (C14639 - C14638 + C14641 - C14640) * C32252 + C16992 * C3449 +
             C16993 * C32097) *
                C31916 +
            ((C14643 - C14642 + C14645 - C14644) * C3448 +
             (C14647 - C14646 + C14649 - C14648) * C32252 +
             (C15172 - C15173 + C15174 - C15175) * C3449 +
             (C15176 - C15177 + C15178 - C15179) * C32097) *
                C31924 +
            ((C14651 - C14650 + C14653 - C14652) * C3448 +
             (C14655 - C14654 + C14657 - C14656) * C32252 +
             (C15180 - C15181 + C15182 - C15183) * C3449 +
             (C15184 - C15185 + C15186 - C15187) * C32097) *
                C17320) *
               C31970 * C471 +
           (((C15011 - C15010 + C15013 - C15012) * C3448 +
             (C15015 - C15014 + C15017 - C15016) * C32252 +
             (C16769 - C16768 + C16771 - C16770) * C3449 +
             (C16773 - C16772 + C16775 - C16774) * C32097) *
                C31916 +
            ((C15019 - C15018 + C15021 - C15020) * C3448 +
             (C15023 - C15022 + C15025 - C15024) * C32252 +
             (C18726 - C18725 + C18728 - C18727) * C3449 +
             (C18730 - C18729 + C18732 - C18731) * C32097) *
                C31924 +
            ((C15027 - C15026 + C15029 - C15028) * C3448 +
             (C15031 - C15030 + C15033 - C15032) * C32252 +
             (C14625 * C692 - C14631 * C684 + C32055 * C1470 - C14632 * C1469) *
                 C3449 +
             (C14625 * C699 - C14631 * C693 + C32055 * C1472 - C14632 * C1471) *
                 C32097) *
                C17320) *
               C31970 * C472) *
              C474)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                 C3448 +
             (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                 C32252 +
             (C16530 - C16531 + C16532 - C16533) * C3449 +
             (C16534 - C16535 + C16536 - C16537) * C32097) *
                C31916 +
            ((C14634 - C14635 + C14636 - C14637) * C3448 +
             (C14638 - C14639 + C14640 - C14641) * C32252 + C16990 * C3449 +
             C16991 * C32097) *
                C31924 +
            C18238 * C17320) *
               C577 +
           (((C16531 - C16530 + C16533 - C16532) * C3448 +
             (C16535 - C16534 + C16537 - C16536) * C32252 +
             (C16539 - C16538 + C16541 - C16540) * C3449 +
             (C16543 - C16542 + C16545 - C16544) * C32097) *
                C31916 +
            (C16992 * C3448 + C16993 * C32252 + C16994 * C3449 +
             C16995 * C32097) *
                C31924 +
            (C18931 * C3448 + C18932 * C32252 +
             (C16230 - C16231 + C16232 - C16233) * C3449 +
             (C16234 - C16235 + C16236 - C16237) * C32097) *
                C17320) *
               C578) *
              C471 +
          ((((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                 C3448 +
             (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                 C32252 +
             (C17190 - C17191 + C17192 - C17193) * C3449 +
             (C17194 - C17195 + C17196 - C17197) * C32097) *
                C31916 +
            ((C15010 - C15011 + C15012 - C15013) * C3448 +
             (C15014 - C15015 + C15016 - C15017) * C32252 +
             (C16768 - C16769 + C16770 - C16771) * C3449 +
             (C16772 - C16773 + C16774 - C16775) * C32097) *
                C31924 +
            ((C15018 - C15019 + C15020 - C15021) * C3448 +
             (C15022 - C15023 + C15024 - C15025) * C32252 +
             (C18725 - C18726 + C18727 - C18728) * C3449 +
             (C18729 - C18730 + C18731 - C18732) * C32097) *
                C17320) *
               C577 +
           (((C17191 - C17190 + C17193 - C17192) * C3448 +
             (C17195 - C17194 + C17197 - C17196) * C32252 +
             (C17199 - C17198 + C17201 - C17200) * C3449 +
             (C17203 - C17202 + C17205 - C17204) * C32097) *
                C31916 +
            ((C16769 - C16768 + C16771 - C16770) * C3448 +
             (C16773 - C16772 + C16775 - C16774) * C32252 +
             (C16777 - C16776 + C16779 - C16778) * C3449 +
             (C16781 - C16780 + C16783 - C16782) * C32097) *
                C31924 +
            ((C18726 - C18725 + C18728 - C18727) * C3448 +
             (C18730 - C18729 + C18732 - C18731) * C32252 +
             (C14625 * C1136 - C14631 * C1120 + C32055 * C1137 -
              C14632 * C1121) *
                 C3449 +
             (C14625 * C1147 - C14631 * C1138 + C32055 * C1148 -
              C14632 * C1139) *
                 C32097) *
                C17320) *
               C578) *
              C472) *
         C31944) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C3448 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C32252 +
            (C16530 - C16531 + C16532 - C16533) * C3449 +
            (C16534 - C16535 + C16536 - C16537) * C32097) *
               C31916 +
           ((C14634 - C14635 + C14636 - C14637) * C3448 +
            (C14638 - C14639 + C14640 - C14641) * C32252 + C16990 * C3449 +
            C16991 * C32097) *
               C31924 +
           C18238 * C17320) *
              C31970 * C240 +
          (((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                C3448 +
            (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                C32252 +
            (C17190 - C17191 + C17192 - C17193) * C3449 +
            (C17194 - C17195 + C17196 - C17197) * C32097) *
               C31916 +
           ((C15010 - C15011 + C15012 - C15013) * C3448 +
            (C15014 - C15015 + C15016 - C15017) * C32252 +
            (C16768 - C16769 + C16770 - C16771) * C3449 +
            (C16772 - C16773 + C16774 - C16775) * C32097) *
               C31924 +
           ((C15018 - C15019 + C15020 - C15021) * C3448 +
            (C15022 - C15023 + C15024 - C15025) * C32252 +
            (C14631 * C683 - C14625 * C690 + C14632 * C1115 - C32055 * C1126) *
                C3449 +
            (C14631 * C691 - C14625 * C698 + C14632 * C1127 - C32055 * C1142) *
                C32097) *
               C17320) *
              C31970 * C241 +
          (((C14625 * C264 - C14631 * C249 + C32055 * C985 - C14632 * C979) *
                C3448 +
            (C14625 * C279 - C14631 * C265 + C32055 * C997 - C14632 * C986) *
                C32252 +
            (C14625 * C1122 - C14631 * C1113 + C32055 * C1646 -
             C14632 * C1643) *
                C3449 +
            (C14625 * C1140 - C14631 * C1123 + C32055 * C1652 -
             C14632 * C1647) *
                C32097) *
               C31916 +
           ((C14625 * C266 - C14631 * C250 + C32055 * C987 - C14632 * C980) *
                C3448 +
            (C14625 * C280 - C14631 * C267 + C32055 * C998 - C14632 * C988) *
                C32252 +
            (C14625 * C1124 - C14631 * C1114 + C32055 * C1648 -
             C14632 * C1644) *
                C3449 +
            (C14625 * C1141 - C14631 * C1125 + C32055 * C1653 -
             C14632 * C1649) *
                C32097) *
               C31924 +
           ((C14625 * C268 - C14631 * C251 + C32055 * C989 - C14632 * C981) *
                C3448 +
            (C14625 * C281 - C14631 * C269 + C32055 * C999 - C14632 * C990) *
                C32252 +
            (C14625 * C1126 - C14631 * C1115 + C32055 * C1650 -
             C14632 * C1645) *
                C3449 +
            (C14625 * C1142 - C14631 * C1127 + C32055 * C1654 -
             C14632 * C1651) *
                C32097) *
               C17320) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C3448 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C32252 +
            (C16530 - C16531 + C16532 - C16533) * C3449 +
            (C16534 - C16535 + C16536 - C16537) * C32097) *
               C31916 +
           ((C14634 - C14635 + C14636 - C14637) * C3448 +
            (C14638 - C14639 + C14640 - C14641) * C32252 + C16990 * C3449 +
            C16991 * C32097) *
               C31924 +
           C18238 * C17320) *
              C31970 * C31956 * C110 +
          (((C14635 - C14634 + C14637 - C14636) * C3448 +
            (C14639 - C14638 + C14641 - C14640) * C32252 + C16992 * C3449 +
            C16993 * C32097) *
               C31916 +
           ((C14643 - C14642 + C14645 - C14644) * C3448 +
            (C14647 - C14646 + C14649 - C14648) * C32252 +
            (C15172 - C15173 + C15174 - C15175) * C3449 +
            (C15176 - C15177 + C15178 - C15179) * C32097) *
               C31924 +
           ((C14651 - C14650 + C14653 - C14652) * C3448 +
            (C14655 - C14654 + C14657 - C14656) * C32252 +
            (C15180 - C15181 + C15182 - C15183) * C3449 +
            (C15184 - C15185 + C15186 - C15187) * C32097) *
               C17320) *
              C31970 * C31956 * C111 +
          (C18238 * C31916 +
           (C14676 * C3448 + C14677 * C32252 +
            (C15181 - C15180 + C15183 - C15182) * C3449 +
            (C15185 - C15184 + C15187 - C15186) * C32097) *
               C31924 +
           ((C14659 - C14658 + C14661 - C14660) * C3448 +
            (C14663 - C14662 + C14665 - C14664) * C32252 +
            (C14625 * C367 - C14631 * C353 + C32055 * C694 - C14632 * C685) *
                C3449 +
            (C14625 * C383 - C14631 * C368 + C32055 * C700 - C14632 * C695) *
                C32097) *
               C17320) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C3448 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C32252 +
            (C16530 - C16531 + C16532 - C16533) * C3449 +
            (C16534 - C16535 + C16536 - C16537) * C32097) *
               C31916 +
           ((C14634 - C14635 + C14636 - C14637) * C3448 +
            (C14638 - C14639 + C14640 - C14641) * C32252 + C16990 * C3449 +
            C16991 * C32097) *
               C31924 +
           C18238 * C17320) *
              C346 +
          (((C16531 - C16530 + C16533 - C16532) * C3448 +
            (C16535 - C16534 + C16537 - C16536) * C32252 +
            (C16539 - C16538 + C16541 - C16540) * C3449 +
            (C16543 - C16542 + C16545 - C16544) * C32097) *
               C31916 +
           (C16992 * C3448 + C16993 * C32252 + C16994 * C3449 +
            C16995 * C32097) *
               C31924 +
           ((C15172 - C15173 + C15174 - C15175) * C3448 +
            (C15176 - C15177 + C15178 - C15179) * C32252 +
            (C16230 - C16231 + C16232 - C16233) * C3449 +
            (C16234 - C16235 + C16236 - C16237) * C32097) *
               C17320) *
              C347 +
          ((C16572 * C3448 + C16573 * C32252 +
            (C16551 - C16550 + C16553 - C16552) * C3449 +
            (C16555 - C16554 + C16557 - C16556) * C32097) *
               C31916 +
           (C16570 * C3448 + C16571 * C32252 +
            (C16559 - C16558 + C16561 - C16560) * C3449 +
            (C16563 - C16562 + C16565 - C16564) * C32097) *
               C31924 +
           ((C16231 - C16230 + C16233 - C16232) * C3448 +
            (C16235 - C16234 + C16237 - C16236) * C32252 +
            (C14625 * C2028 - C14631 * C2020 + C32055 * C2545 -
             C14632 * C2540) *
                C3449 +
            (C14625 * C2038 - C14631 * C2029 + C32055 * C2549 -
             C14632 * C2546) *
                C32097) *
               C17320) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                 C3448 +
             (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                 C32252 +
             (C16530 - C16531 + C16532 - C16533) * C3449 +
             (C16534 - C16535 + C16536 - C16537) * C32097) *
                C31916 +
            ((C14634 - C14635 + C14636 - C14637) * C3448 +
             (C14638 - C14639 + C14640 - C14641) * C32252 + C16990 * C3449 +
             C16991 * C32097) *
                C31924 +
            C18238 * C17320) *
               C577 +
           (((C16531 - C16530 + C16533 - C16532) * C3448 +
             (C16535 - C16534 + C16537 - C16536) * C32252 +
             (C16539 - C16538 + C16541 - C16540) * C3449 +
             (C16543 - C16542 + C16545 - C16544) * C32097) *
                C31916 +
            (C16992 * C3448 + C16993 * C32252 + C16994 * C3449 +
             C16995 * C32097) *
                C31924 +
            (C18931 * C3448 + C18932 * C32252 +
             (C16230 - C16231 + C16232 - C16233) * C3449 +
             (C16234 - C16235 + C16236 - C16237) * C32097) *
                C17320) *
               C578) *
              C31956 * C473 +
          ((((C14635 - C14634 + C14637 - C14636) * C3448 +
             (C14639 - C14638 + C14641 - C14640) * C32252 + C16992 * C3449 +
             C16993 * C32097) *
                C31916 +
            ((C14643 - C14642 + C14645 - C14644) * C3448 +
             (C14647 - C14646 + C14649 - C14648) * C32252 + C18931 * C3449 +
             C18932 * C32097) *
                C31924 +
            ((C14651 - C14650 + C14653 - C14652) * C3448 +
             (C14655 - C14654 + C14657 - C14656) * C32252 +
             (C15180 - C15181 + C15182 - C15183) * C3449 +
             (C15184 - C15185 + C15186 - C15187) * C32097) *
                C17320) *
               C577 +
           ((C16990 * C3448 + C16991 * C32252 + C16570 * C3449 +
             C16571 * C32097) *
                C31916 +
            (C18233 * C3448 + C18234 * C32252 +
             (C16231 - C16230 + C16233 - C16232) * C3449 +
             (C16235 - C16234 + C16237 - C16236) * C32097) *
                C31924 +
            ((C15181 - C15180 + C15183 - C15182) * C3448 +
             (C15185 - C15184 + C15187 - C15186) * C32252 +
             (C14625 * C375 - C14631 * C357 + C32055 * C2213 - C14632 * C2212) *
                 C3449 +
             (C14625 * C387 - C14631 * C376 + C32055 * C2215 - C14632 * C2214) *
                 C32097) *
                C17320) *
               C578) *
              C31956 * C474)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C3448 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C32252 +
            (C16530 - C16531 + C16532 - C16533) * C3449 +
            (C16534 - C16535 + C16536 - C16537) * C32097) *
               C31916 +
           ((C14634 - C14635 + C14636 - C14637) * C3448 +
            (C14638 - C14639 + C14640 - C14641) * C32252 + C16990 * C3449 +
            C16991 * C32097) *
               C31924 +
           C18238 * C17320) *
              C31970 * C31956 * C110 +
          (((C14635 - C14634 + C14637 - C14636) * C3448 +
            (C14639 - C14638 + C14641 - C14640) * C32252 + C16992 * C3449 +
            C16993 * C32097) *
               C31916 +
           ((C14643 - C14642 + C14645 - C14644) * C3448 +
            (C14647 - C14646 + C14649 - C14648) * C32252 +
            (C15172 - C15173 + C15174 - C15175) * C3449 +
            (C15176 - C15177 + C15178 - C15179) * C32097) *
               C31924 +
           ((C14651 - C14650 + C14653 - C14652) * C3448 +
            (C14655 - C14654 + C14657 - C14656) * C32252 +
            (C15180 - C15181 + C15182 - C15183) * C3449 +
            (C15184 - C15185 + C15186 - C15187) * C32097) *
               C17320) *
              C31970 * C31956 * C111 +
          (C18238 * C31916 +
           (C14676 * C3448 + C14677 * C32252 +
            (C15181 - C15180 + C15183 - C15182) * C3449 +
            (C15185 - C15184 + C15187 - C15186) * C32097) *
               C31924 +
           ((C14659 - C14658 + C14661 - C14660) * C3448 +
            (C14663 - C14662 + C14665 - C14664) * C32252 +
            (C14625 * C367 - C14631 * C353 + C32055 * C694 - C14632 * C685) *
                C3449 +
            (C14625 * C383 - C14631 * C368 + C32055 * C700 - C14632 * C695) *
                C32097) *
               C17320) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C3448 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C32252 +
            (C16530 - C16531 + C16532 - C16533) * C3449 +
            (C16534 - C16535 + C16536 - C16537) * C32097) *
               C31916 +
           ((C14634 - C14635 + C14636 - C14637) * C3448 +
            (C14638 - C14639 + C14640 - C14641) * C32252 + C16990 * C3449 +
            C16991 * C32097) *
               C31924 +
           C18238 * C17320) *
              C31970 * C240 +
          (((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                C3448 +
            (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                C32252 +
            (C17190 - C17191 + C17192 - C17193) * C3449 +
            (C17194 - C17195 + C17196 - C17197) * C32097) *
               C31916 +
           ((C15010 - C15011 + C15012 - C15013) * C3448 +
            (C15014 - C15015 + C15016 - C15017) * C32252 +
            (C16768 - C16769 + C16770 - C16771) * C3449 +
            (C16772 - C16773 + C16774 - C16775) * C32097) *
               C31924 +
           ((C15018 - C15019 + C15020 - C15021) * C3448 +
            (C15022 - C15023 + C15024 - C15025) * C32252 +
            (C14631 * C683 - C14625 * C690 + C14632 * C1115 - C32055 * C1126) *
                C3449 +
            (C14631 * C691 - C14625 * C698 + C14632 * C1127 - C32055 * C1142) *
                C32097) *
               C17320) *
              C31970 * C241 +
          (((C14625 * C264 - C14631 * C249 + C32055 * C985 - C14632 * C979) *
                C3448 +
            (C14625 * C279 - C14631 * C265 + C32055 * C997 - C14632 * C986) *
                C32252 +
            (C14625 * C1122 - C14631 * C1113 + C32055 * C1646 -
             C14632 * C1643) *
                C3449 +
            (C14625 * C1140 - C14631 * C1123 + C32055 * C1652 -
             C14632 * C1647) *
                C32097) *
               C31916 +
           ((C14625 * C266 - C14631 * C250 + C32055 * C987 - C14632 * C980) *
                C3448 +
            (C14625 * C280 - C14631 * C267 + C32055 * C998 - C14632 * C988) *
                C32252 +
            (C14625 * C1124 - C14631 * C1114 + C32055 * C1648 -
             C14632 * C1644) *
                C3449 +
            (C14625 * C1141 - C14631 * C1125 + C32055 * C1653 -
             C14632 * C1649) *
                C32097) *
               C31924 +
           ((C14625 * C268 - C14631 * C251 + C32055 * C989 - C14632 * C981) *
                C3448 +
            (C14625 * C281 - C14631 * C269 + C32055 * C999 - C14632 * C990) *
                C32252 +
            (C14625 * C1126 - C14631 * C1115 + C32055 * C1650 -
             C14632 * C1645) *
                C3449 +
            (C14625 * C1142 - C14631 * C1127 + C32055 * C1654 -
             C14632 * C1651) *
                C32097) *
               C17320) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                 C114 +
             (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                 C32010) *
                C32323 +
            ((C14634 - C14635 + C14636 - C14637) * C114 +
             (C14638 - C14639 + C14640 - C14641) * C32010) *
                C32316 +
            C14682 * C32303 + C14683 * C32286) *
               C31970 * C471 +
           (((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                 C114 +
             (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                 C32010) *
                C32323 +
            ((C15010 - C15011 + C15012 - C15013) * C114 +
             (C15014 - C15015 + C15016 - C15017) * C32010) *
                C32316 +
            ((C15018 - C15019 + C15020 - C15021) * C114 +
             (C15022 - C15023 + C15024 - C15025) * C32010) *
                C32303 +
            ((C15026 - C15027 + C15028 - C15029) * C114 +
             (C15030 - C15031 + C15032 - C15033) * C32010) *
                C32286) *
               C31970 * C472) *
              C473 +
          ((((C14635 - C14634 + C14637 - C14636) * C114 +
             (C14639 - C14638 + C14641 - C14640) * C32010) *
                C32323 +
            ((C14643 - C14642 + C14645 - C14644) * C114 +
             (C14647 - C14646 + C14649 - C14648) * C32010) *
                C32316 +
            ((C14651 - C14650 + C14653 - C14652) * C114 +
             (C14655 - C14654 + C14657 - C14656) * C32010) *
                C32303 +
            ((C14658 - C14659 + C14660 - C14661) * C114 +
             (C14662 - C14663 + C14664 - C14665) * C32010) *
                C32286) *
               C31970 * C471 +
           (((C15011 - C15010 + C15013 - C15012) * C114 +
             (C15015 - C15014 + C15017 - C15016) * C32010) *
                C32323 +
            ((C15019 - C15018 + C15021 - C15020) * C114 +
             (C15023 - C15022 + C15025 - C15024) * C32010) *
                C32316 +
            ((C15027 - C15026 + C15029 - C15028) * C114 +
             (C15031 - C15030 + C15033 - C15032) * C32010) *
                C32303 +
            ((C14625 * C262 - C14631 * C248 + C32055 * C272 - C14632 * C253) *
                 C114 +
             (C14625 * C278 - C14631 * C263 + C32055 * C283 - C14632 * C273) *
                 C32010) *
                C32286) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
              C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
                 C114 +
             (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
              C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
                 C32010) *
                C15419 +
            ((C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
              C15433) *
                 C114 +
             (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
              C15441) *
                 C32010) *
                C31921) *
               C31970 * C471 +
           (((C15421 * C244 - C32324 * C254 + C15422 * C249 - C32320 * C264 +
              C15423 * C979 - C32310 * C985 + C15424 * C982 - C32292 * C991) *
                 C114 +
             (C15421 * C255 - C32324 * C274 + C15422 * C265 - C32320 * C279 +
              C15423 * C986 - C32310 * C997 + C15424 * C992 - C32292 * C1000) *
                 C32010) *
                C15419 +
            ((C15784 - C15785 + C15786 - C15787 + C15788 - C15789 + C15790 -
              C15791) *
                 C114 +
             (C15792 - C15793 + C15794 - C15795 + C15796 - C15797 + C15798 -
              C15799) *
                 C32010) *
                C31921) *
               C31970 * C472) *
              C473 +
          ((((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
              C15432) *
                 C114 +
             (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
              C15440) *
                 C32010) *
                C15419 +
            ((C15442 - C15443 + C15444 - C15445 + C15446 - C15447 + C15448 -
              C15449) *
                 C114 +
             (C15450 - C15451 + C15452 - C15453 + C15454 - C15455 + C15456 -
              C15457) *
                 C32010) *
                C31921) *
               C31970 * C471 +
           (((C15785 - C15784 + C15787 - C15786 + C15789 - C15788 + C15791 -
              C15790) *
                 C114 +
             (C15793 - C15792 + C15795 - C15794 + C15797 - C15796 + C15799 -
              C15798) *
                 C32010) *
                C15419 +
            ((C32324 * C258 - C15421 * C246 + C32320 * C268 - C15422 * C251 +
              C32310 * C989 - C15423 * C981 + C32292 * C995 - C15424 * C984) *
                 C114 +
             (C32324 * C276 - C15421 * C259 + C32320 * C281 - C15422 * C269 +
              C32310 * C999 - C15423 * C990 + C32292 * C1002 - C15424 * C996) *
                 C32010) *
                C31921) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                 C114 +
             (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                 C32010) *
                C32323 +
            ((C14634 - C14635 + C14636 - C14637) * C114 +
             (C14638 - C14639 + C14640 - C14641) * C32010) *
                C32316 +
            C14682 * C32303 + C14683 * C32286) *
               C577 +
           (((C14631 * C349 - C14625 * C359 + C14632 * C681 - C32055 * C686) *
                 C114 +
             (C14631 * C360 - C14625 * C379 + C14632 * C687 - C32055 * C696) *
                 C32010) *
                C32323 +
            ((C15164 - C15165 + C15166 - C15167) * C114 +
             (C15168 - C15169 + C15170 - C15171) * C32010) *
                C32316 +
            ((C15172 - C15173 + C15174 - C15175) * C114 +
             (C15176 - C15177 + C15178 - C15179) * C32010) *
                C32303 +
            ((C15180 - C15181 + C15182 - C15183) * C114 +
             (C15184 - C15185 + C15186 - C15187) * C32010) *
                C32286) *
               C578) *
              C471 +
          ((((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                 C114 +
             (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                 C32010) *
                C32323 +
            ((C15010 - C15011 + C15012 - C15013) * C114 +
             (C15014 - C15015 + C15016 - C15017) * C32010) *
                C32316 +
            ((C15018 - C15019 + C15020 - C15021) * C114 +
             (C15022 - C15023 + C15024 - C15025) * C32010) *
                C32303 +
            ((C15026 - C15027 + C15028 - C15029) * C114 +
             (C15030 - C15031 + C15032 - C15033) * C32010) *
                C32286) *
               C577 +
           (((C14625 * C686 - C14631 * C681 + C32055 * C1122 - C14632 * C1113) *
                 C114 +
             (C14625 * C696 - C14631 * C687 + C32055 * C1140 - C14632 * C1123) *
                 C32010) *
                C32323 +
            ((C14625 * C688 - C14631 * C682 + C32055 * C1124 - C14632 * C1114) *
                 C114 +
             (C14625 * C697 - C14631 * C689 + C32055 * C1141 - C14632 * C1125) *
                 C32010) *
                C32316 +
            ((C14625 * C690 - C14631 * C683 + C32055 * C1126 - C14632 * C1115) *
                 C114 +
             (C14625 * C698 - C14631 * C691 + C32055 * C1142 - C14632 * C1127) *
                 C32010) *
                C32303 +
            ((C14625 * C692 - C14631 * C684 + C32055 * C1470 - C14632 * C1469) *
                 C114 +
             (C14625 * C699 - C14631 * C693 + C32055 * C1472 - C14632 * C1471) *
                 C32010) *
                C32286) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
              C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
                 C114 +
             (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
              C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
                 C32010) *
                C15419 +
            ((C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
              C15433) *
                 C114 +
             (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
              C15441) *
                 C32010) *
                C31921) *
               C577 +
           (((C15421 * C349 - C32324 * C359 + C15422 * C681 - C32320 * C686 +
              C15423 * C1113 - C32310 * C1122 + C15424 * C1643 -
              C32292 * C1646) *
                 C114 +
             (C15421 * C360 - C32324 * C379 + C15422 * C687 - C32320 * C696 +
              C15423 * C1123 - C32310 * C1140 + C15424 * C1647 -
              C32292 * C1652) *
                 C32010) *
                C15419 +
            ((C15930 - C15931 + C15932 - C15933 + C15934 - C15935 + C15936 -
              C15937) *
                 C114 +
             (C15938 - C15939 + C15940 - C15941 + C15942 - C15943 + C15944 -
              C15945) *
                 C32010) *
                C31921) *
               C578) *
              C471 +
          ((((C15421 * C244 - C32324 * C254 + C15422 * C249 - C32320 * C264 +
              C15423 * C979 - C32310 * C985 + C15424 * C982 - C32292 * C991) *
                 C114 +
             (C15421 * C255 - C32324 * C274 + C15422 * C265 - C32320 * C279 +
              C15423 * C986 - C32310 * C997 + C15424 * C992 - C32292 * C1000) *
                 C32010) *
                C15419 +
            ((C15784 - C15785 + C15786 - C15787 + C15788 - C15789 + C15790 -
              C15791) *
                 C114 +
             (C15792 - C15793 + C15794 - C15795 + C15796 - C15797 + C15798 -
              C15799) *
                 C32010) *
                C31921) *
               C577 +
           (((C32324 * C686 - C15421 * C681 + C32320 * C1122 - C15422 * C1113 +
              C32310 * C1646 - C15423 * C1643 + C32292 * C6247 -
              C15424 * C6244) *
                 C114 +
             (C32324 * C696 - C15421 * C687 + C32320 * C1140 - C15422 * C1123 +
              C32310 * C1652 - C15423 * C1647 + C32292 * C6253 -
              C15424 * C6248) *
                 C32010) *
                C15419 +
            ((C32324 * C688 - C15421 * C682 + C32320 * C1124 - C15422 * C1114 +
              C32310 * C1648 - C15423 * C1644 + C32292 * C6425 -
              C15424 * C6424) *
                 C114 +
             (C32324 * C697 - C15421 * C689 + C32320 * C1141 - C15422 * C1125 +
              C32310 * C1653 - C15423 * C1649 + C32292 * C6427 -
              C15424 * C6426) *
                 C32010) *
                C31921) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C114 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C32010) *
               C32323 +
           ((C14634 - C14635 + C14636 - C14637) * C114 +
            (C14638 - C14639 + C14640 - C14641) * C32010) *
               C32316 +
           C14682 * C32303 + C14683 * C32286) *
              C31970 * C240 +
          (((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                C114 +
            (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                C32010) *
               C32323 +
           ((C14631 * C245 - C14625 * C256 + C14632 * C250 - C32055 * C266) *
                C114 +
            (C14631 * C257 - C14625 * C275 + C14632 * C267 - C32055 * C280) *
                C32010) *
               C32316 +
           ((C14631 * C246 - C14625 * C258 + C14632 * C251 - C32055 * C268) *
                C114 +
            (C14631 * C259 - C14625 * C276 + C14632 * C269 - C32055 * C281) *
                C32010) *
               C32303 +
           ((C14631 * C247 - C14625 * C260 + C14632 * C252 - C32055 * C270) *
                C114 +
            (C14631 * C261 - C14625 * C277 + C14632 * C271 - C32055 * C282) *
                C32010) *
               C32286) *
              C31970 * C241 +
          (((C14625 * C264 - C14631 * C249 + C32055 * C985 - C14632 * C979) *
                C114 +
            (C14625 * C279 - C14631 * C265 + C32055 * C997 - C14632 * C986) *
                C32010) *
               C32323 +
           ((C14625 * C266 - C14631 * C250 + C32055 * C987 - C14632 * C980) *
                C114 +
            (C14625 * C280 - C14631 * C267 + C32055 * C998 - C14632 * C988) *
                C32010) *
               C32316 +
           ((C14625 * C268 - C14631 * C251 + C32055 * C989 - C14632 * C981) *
                C114 +
            (C14625 * C281 - C14631 * C269 + C32055 * C999 - C14632 * C990) *
                C32010) *
               C32303 +
           ((C14625 * C270 - C14631 * C252 + C32055 * C1296 - C14632 * C1295) *
                C114 +
            (C14625 * C282 - C14631 * C271 + C32055 * C1298 - C14632 * C1297) *
                C32010) *
               C32286) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C114 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C32010) *
               C32323 +
           ((C14634 - C14635 + C14636 - C14637) * C114 +
            (C14638 - C14639 + C14640 - C14641) * C32010) *
               C32316 +
           C14682 * C32303 + C14683 * C32286) *
              C31970 * C31956 * C110 +
          (((C14635 - C14634 + C14637 - C14636) * C114 +
            (C14639 - C14638 + C14641 - C14640) * C32010) *
               C32323 +
           ((C14643 - C14642 + C14645 - C14644) * C114 +
            (C14647 - C14646 + C14649 - C14648) * C32010) *
               C32316 +
           ((C14651 - C14650 + C14653 - C14652) * C114 +
            (C14655 - C14654 + C14657 - C14656) * C32010) *
               C32303 +
           ((C14658 - C14659 + C14660 - C14661) * C114 +
            (C14662 - C14663 + C14664 - C14665) * C32010) *
               C32286) *
              C31970 * C31956 * C111 +
          (C14682 * C32323 + C14683 * C32316 +
           ((C14659 - C14658 + C14661 - C14660) * C114 +
            (C14663 - C14662 + C14665 - C14664) * C32010) *
               C32303 +
           ((C14625 * C132 - C14631 * C120 + C32055 * C476 - C14632 * C475) *
                C114 +
            (C14625 * C141 - C14631 * C133 + C32055 * C478 - C14632 * C477) *
                C32010) *
               C32286) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C114 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C32010) *
               C32323 +
           ((C14634 - C14635 + C14636 - C14637) * C114 +
            (C14638 - C14639 + C14640 - C14641) * C32010) *
               C32316 +
           C14682 * C32303 + C14683 * C32286) *
              C346 +
          (((C14631 * C349 - C14625 * C359 + C14632 * C681 - C32055 * C686) *
                C114 +
            (C14631 * C360 - C14625 * C379 + C14632 * C687 - C32055 * C696) *
                C32010) *
               C32323 +
           ((C14631 * C350 - C14625 * C361 + C14632 * C682 - C32055 * C688) *
                C114 +
            (C14631 * C362 - C14625 * C380 + C14632 * C689 - C32055 * C697) *
                C32010) *
               C32316 +
           ((C14631 * C351 - C14625 * C363 + C14632 * C683 - C32055 * C690) *
                C114 +
            (C14631 * C364 - C14625 * C381 + C14632 * C691 - C32055 * C698) *
                C32010) *
               C32303 +
           ((C14631 * C352 - C14625 * C365 + C14632 * C684 - C32055 * C692) *
                C114 +
            (C14631 * C366 - C14625 * C382 + C14632 * C693 - C32055 * C699) *
                C32010) *
               C32286) *
              C347 +
          (((C14625 * C369 - C14631 * C354 + C32055 * C1128 - C14632 * C1116) *
                C114 +
            (C14625 * C384 - C14631 * C370 + C32055 * C1143 - C14632 * C1130) *
                C32010) *
               C32323 +
           ((C14625 * C371 - C14631 * C355 + C32055 * C1132 - C14632 * C1118) *
                C114 +
            (C14625 * C385 - C14631 * C372 + C32055 * C1145 - C14632 * C1134) *
                C32010) *
               C32316 +
           ((C14625 * C373 - C14631 * C356 + C32055 * C1136 - C14632 * C1120) *
                C114 +
            (C14625 * C386 - C14631 * C374 + C32055 * C1147 - C14632 * C1138) *
                C32010) *
               C32303 +
           ((C14625 * C375 - C14631 * C357 + C32055 * C2213 - C14632 * C2212) *
                C114 +
            (C14625 * C387 - C14631 * C376 + C32055 * C2215 - C14632 * C2214) *
                C32010) *
               C32286) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
             C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
                C114 +
            (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
             C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
                C32010) *
               C15419 +
           ((C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
             C15433) *
                C114 +
            (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
             C15441) *
                C32010) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
             C15432) *
                C114 +
            (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
             C15440) *
                C32010) *
               C15419 +
           ((C15442 - C15443 + C15444 - C15445 + C15446 - C15447 + C15448 -
             C15449) *
                C114 +
            (C15450 - C15451 + C15452 - C15453 + C15454 - C15455 + C15456 -
             C15457) *
                C32010) *
               C31921) *
              C31970 * C31956 * C111 +
          (((C15443 - C15442 + C15445 - C15444 + C15447 - C15446 + C15449 -
             C15448) *
                C114 +
            (C15451 - C15450 + C15453 - C15452 + C15455 - C15454 + C15457 -
             C15456) *
                C32010) *
               C15419 +
           ((C32324 * C128 - C15421 * C118 + C32320 * C260 - C15422 * C247 +
             C32310 * C270 - C15423 * C252 + C32292 * C1296 - C15424 * C1295) *
                C114 +
            (C32324 * C139 - C15421 * C129 + C32320 * C277 - C15422 * C261 +
             C32310 * C282 - C15423 * C271 + C32292 * C1298 - C15424 * C1297) *
                C32010) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
             C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
                C114 +
            (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
             C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
                C32010) *
               C15419 +
           ((C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
             C15433) *
                C114 +
            (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
             C15441) *
                C32010) *
               C31921) *
              C31970 * C240 +
          (((C15421 * C244 - C32324 * C254 + C15422 * C249 - C32320 * C264 +
             C15423 * C979 - C32310 * C985 + C15424 * C982 - C32292 * C991) *
                C114 +
            (C15421 * C255 - C32324 * C274 + C15422 * C265 - C32320 * C279 +
             C15423 * C986 - C32310 * C997 + C15424 * C992 - C32292 * C1000) *
                C32010) *
               C15419 +
           ((C15421 * C245 - C32324 * C256 + C15422 * C250 - C32320 * C266 +
             C15423 * C980 - C32310 * C987 + C15424 * C983 - C32292 * C993) *
                C114 +
            (C15421 * C257 - C32324 * C275 + C15422 * C267 - C32320 * C280 +
             C15423 * C988 - C32310 * C998 + C15424 * C994 - C32292 * C1001) *
                C32010) *
               C31921) *
              C31970 * C241 +
          (((C32324 * C264 - C15421 * C249 + C32320 * C985 - C15422 * C979 +
             C32310 * C991 - C15423 * C982 + C32292 * C6176 - C15424 * C6174) *
                C114 +
            (C32324 * C279 - C15421 * C265 + C32320 * C997 - C15422 * C986 +
             C32310 * C1000 - C15423 * C992 + C32292 * C6180 - C15424 * C6177) *
                C32010) *
               C15419 +
           ((C32324 * C266 - C15421 * C250 + C32320 * C987 - C15422 * C980 +
             C32310 * C993 - C15423 * C983 + C32292 * C6339 - C15424 * C6338) *
                C114 +
            (C32324 * C280 - C15421 * C267 + C32320 * C998 - C15422 * C988 +
             C32310 * C1001 - C15423 * C994 + C32292 * C6341 - C15424 * C6340) *
                C32010) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
             C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
                C114 +
            (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
             C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
                C32010) *
               C15419 +
           ((C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
             C15433) *
                C114 +
            (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
             C15441) *
                C32010) *
               C31921) *
              C346 +
          (((C15421 * C349 - C32324 * C359 + C15422 * C681 - C32320 * C686 +
             C15423 * C1113 - C32310 * C1122 + C15424 * C1643 -
             C32292 * C1646) *
                C114 +
            (C15421 * C360 - C32324 * C379 + C15422 * C687 - C32320 * C696 +
             C15423 * C1123 - C32310 * C1140 + C15424 * C1647 -
             C32292 * C1652) *
                C32010) *
               C15419 +
           ((C15421 * C350 - C32324 * C361 + C15422 * C682 - C32320 * C688 +
             C15423 * C1114 - C32310 * C1124 + C15424 * C1644 -
             C32292 * C1648) *
                C114 +
            (C15421 * C362 - C32324 * C380 + C15422 * C689 - C32320 * C697 +
             C15423 * C1125 - C32310 * C1141 + C15424 * C1649 -
             C32292 * C1653) *
                C32010) *
               C31921) *
              C347 +
          (((C32324 * C369 - C15421 * C354 + C32320 * C1128 - C15422 * C1116 +
             C32310 * C1129 - C15423 * C1117 + C32292 * C6249 -
             C15424 * C6245) *
                C114 +
            (C32324 * C384 - C15421 * C370 + C32320 * C1143 - C15422 * C1130 +
             C32310 * C1144 - C15423 * C1131 + C32292 * C6254 -
             C15424 * C6251) *
                C32010) *
               C15419 +
           ((C32324 * C371 - C15421 * C355 + C32320 * C1132 - C15422 * C1118 +
             C32310 * C1133 - C15423 * C1119 + C32292 * C7049 -
             C15424 * C7048) *
                C114 +
            (C32324 * C385 - C15421 * C372 + C32320 * C1145 - C15422 * C1134 +
             C32310 * C1146 - C15423 * C1135 + C32292 * C7051 -
             C15424 * C7050) *
                C32010) *
               C31921) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                 C114 +
             (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                 C32010) *
                C32323 +
            ((C14634 - C14635 + C14636 - C14637) * C114 +
             (C14638 - C14639 + C14640 - C14641) * C32010) *
                C32316 +
            C14682 * C32303 + C14683 * C32286) *
               C577 +
           (((C14631 * C349 - C14625 * C359 + C14632 * C681 - C32055 * C686) *
                 C114 +
             (C14631 * C360 - C14625 * C379 + C14632 * C687 - C32055 * C696) *
                 C32010) *
                C32323 +
            ((C15164 - C15165 + C15166 - C15167) * C114 +
             (C15168 - C15169 + C15170 - C15171) * C32010) *
                C32316 +
            ((C15172 - C15173 + C15174 - C15175) * C114 +
             (C15176 - C15177 + C15178 - C15179) * C32010) *
                C32303 +
            ((C15180 - C15181 + C15182 - C15183) * C114 +
             (C15184 - C15185 + C15186 - C15187) * C32010) *
                C32286) *
               C578) *
              C31956 * C473 +
          ((((C14635 - C14634 + C14637 - C14636) * C114 +
             (C14639 - C14638 + C14641 - C14640) * C32010) *
                C32323 +
            ((C14643 - C14642 + C14645 - C14644) * C114 +
             (C14647 - C14646 + C14649 - C14648) * C32010) *
                C32316 +
            ((C14651 - C14650 + C14653 - C14652) * C114 +
             (C14655 - C14654 + C14657 - C14656) * C32010) *
                C32303 +
            ((C14658 - C14659 + C14660 - C14661) * C114 +
             (C14662 - C14663 + C14664 - C14665) * C32010) *
                C32286) *
               C577 +
           (((C15165 - C15164 + C15167 - C15166) * C114 +
             (C15169 - C15168 + C15171 - C15170) * C32010) *
                C32323 +
            ((C15173 - C15172 + C15175 - C15174) * C114 +
             (C15177 - C15176 + C15179 - C15178) * C32010) *
                C32316 +
            ((C15181 - C15180 + C15183 - C15182) * C114 +
             (C15185 - C15184 + C15187 - C15186) * C32010) *
                C32303 +
            ((C14625 * C367 - C14631 * C353 + C32055 * C694 - C14632 * C685) *
                 C114 +
             (C14625 * C383 - C14631 * C368 + C32055 * C700 - C14632 * C695) *
                 C32010) *
                C32286) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
              C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
                 C114 +
             (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
              C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
                 C32010) *
                C15419 +
            ((C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
              C15433) *
                 C114 +
             (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
              C15441) *
                 C32010) *
                C31921) *
               C577 +
           (((C15421 * C349 - C32324 * C359 + C15422 * C681 - C32320 * C686 +
              C15423 * C1113 - C32310 * C1122 + C15424 * C1643 -
              C32292 * C1646) *
                 C114 +
             (C15421 * C360 - C32324 * C379 + C15422 * C687 - C32320 * C696 +
              C15423 * C1123 - C32310 * C1140 + C15424 * C1647 -
              C32292 * C1652) *
                 C32010) *
                C15419 +
            ((C15930 - C15931 + C15932 - C15933 + C15934 - C15935 + C15936 -
              C15937) *
                 C114 +
             (C15938 - C15939 + C15940 - C15941 + C15942 - C15943 + C15944 -
              C15945) *
                 C32010) *
                C31921) *
               C578) *
              C31956 * C473 +
          ((((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
              C15432) *
                 C114 +
             (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
              C15440) *
                 C32010) *
                C15419 +
            ((C15442 - C15443 + C15444 - C15445 + C15446 - C15447 + C15448 -
              C15449) *
                 C114 +
             (C15450 - C15451 + C15452 - C15453 + C15454 - C15455 + C15456 -
              C15457) *
                 C32010) *
                C31921) *
               C577 +
           (((C15931 - C15930 + C15933 - C15932 + C15935 - C15934 + C15937 -
              C15936) *
                 C114 +
             (C15939 - C15938 + C15941 - C15940 + C15943 - C15942 + C15945 -
              C15944) *
                 C32010) *
                C15419 +
            ((C32324 * C363 - C15421 * C351 + C32320 * C690 - C15422 * C683 +
              C32310 * C1126 - C15423 * C1115 + C32292 * C1650 -
              C15424 * C1645) *
                 C114 +
             (C32324 * C381 - C15421 * C364 + C32320 * C698 - C15422 * C691 +
              C32310 * C1142 - C15423 * C1127 + C32292 * C1654 -
              C15424 * C1651) *
                 C32010) *
                C31921) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C114 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C32010) *
               C32323 +
           ((C14634 - C14635 + C14636 - C14637) * C114 +
            (C14638 - C14639 + C14640 - C14641) * C32010) *
               C32316 +
           C14682 * C32303 + C14683 * C32286) *
              C31970 * C31956 * C110 +
          (((C14635 - C14634 + C14637 - C14636) * C114 +
            (C14639 - C14638 + C14641 - C14640) * C32010) *
               C32323 +
           ((C14643 - C14642 + C14645 - C14644) * C114 +
            (C14647 - C14646 + C14649 - C14648) * C32010) *
               C32316 +
           ((C14651 - C14650 + C14653 - C14652) * C114 +
            (C14655 - C14654 + C14657 - C14656) * C32010) *
               C32303 +
           ((C14658 - C14659 + C14660 - C14661) * C114 +
            (C14662 - C14663 + C14664 - C14665) * C32010) *
               C32286) *
              C31970 * C31956 * C111 +
          (C14682 * C32323 + C14683 * C32316 +
           ((C14659 - C14658 + C14661 - C14660) * C114 +
            (C14663 - C14662 + C14665 - C14664) * C32010) *
               C32303 +
           ((C14625 * C132 - C14631 * C120 + C32055 * C476 - C14632 * C475) *
                C114 +
            (C14625 * C141 - C14631 * C133 + C32055 * C478 - C14632 * C477) *
                C32010) *
               C32286) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C114 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C32010) *
               C32323 +
           ((C14634 - C14635 + C14636 - C14637) * C114 +
            (C14638 - C14639 + C14640 - C14641) * C32010) *
               C32316 +
           C14682 * C32303 + C14683 * C32286) *
              C31970 * C240 +
          (((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                C114 +
            (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                C32010) *
               C32323 +
           ((C14631 * C245 - C14625 * C256 + C14632 * C250 - C32055 * C266) *
                C114 +
            (C14631 * C257 - C14625 * C275 + C14632 * C267 - C32055 * C280) *
                C32010) *
               C32316 +
           ((C14631 * C246 - C14625 * C258 + C14632 * C251 - C32055 * C268) *
                C114 +
            (C14631 * C259 - C14625 * C276 + C14632 * C269 - C32055 * C281) *
                C32010) *
               C32303 +
           ((C14631 * C247 - C14625 * C260 + C14632 * C252 - C32055 * C270) *
                C114 +
            (C14631 * C261 - C14625 * C277 + C14632 * C271 - C32055 * C282) *
                C32010) *
               C32286) *
              C31970 * C241 +
          (((C14625 * C264 - C14631 * C249 + C32055 * C985 - C14632 * C979) *
                C114 +
            (C14625 * C279 - C14631 * C265 + C32055 * C997 - C14632 * C986) *
                C32010) *
               C32323 +
           ((C14625 * C266 - C14631 * C250 + C32055 * C987 - C14632 * C980) *
                C114 +
            (C14625 * C280 - C14631 * C267 + C32055 * C998 - C14632 * C988) *
                C32010) *
               C32316 +
           ((C14625 * C268 - C14631 * C251 + C32055 * C989 - C14632 * C981) *
                C114 +
            (C14625 * C281 - C14631 * C269 + C32055 * C999 - C14632 * C990) *
                C32010) *
               C32303 +
           ((C14625 * C270 - C14631 * C252 + C32055 * C1296 - C14632 * C1295) *
                C114 +
            (C14625 * C282 - C14631 * C271 + C32055 * C1298 - C14632 * C1297) *
                C32010) *
               C32286) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
             C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
                C114 +
            (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
             C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
                C32010) *
               C15419 +
           ((C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
             C15433) *
                C114 +
            (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
             C15441) *
                C32010) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
             C15432) *
                C114 +
            (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
             C15440) *
                C32010) *
               C15419 +
           ((C15442 - C15443 + C15444 - C15445 + C15446 - C15447 + C15448 -
             C15449) *
                C114 +
            (C15450 - C15451 + C15452 - C15453 + C15454 - C15455 + C15456 -
             C15457) *
                C32010) *
               C31921) *
              C31970 * C31956 * C111 +
          (((C15443 - C15442 + C15445 - C15444 + C15447 - C15446 + C15449 -
             C15448) *
                C114 +
            (C15451 - C15450 + C15453 - C15452 + C15455 - C15454 + C15457 -
             C15456) *
                C32010) *
               C15419 +
           ((C32324 * C128 - C15421 * C118 + C32320 * C260 - C15422 * C247 +
             C32310 * C270 - C15423 * C252 + C32292 * C1296 - C15424 * C1295) *
                C114 +
            (C32324 * C139 - C15421 * C129 + C32320 * C277 - C15422 * C261 +
             C32310 * C282 - C15423 * C271 + C32292 * C1298 - C15424 * C1297) *
                C32010) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
             C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
                C114 +
            (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
             C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
                C32010) *
               C15419 +
           ((C15426 - C15427 + C15428 - C15429 + C15430 - C15431 + C15432 -
             C15433) *
                C114 +
            (C15434 - C15435 + C15436 - C15437 + C15438 - C15439 + C15440 -
             C15441) *
                C32010) *
               C31921) *
              C31970 * C240 +
          (((C15421 * C244 - C32324 * C254 + C15422 * C249 - C32320 * C264 +
             C15423 * C979 - C32310 * C985 + C15424 * C982 - C32292 * C991) *
                C114 +
            (C15421 * C255 - C32324 * C274 + C15422 * C265 - C32320 * C279 +
             C15423 * C986 - C32310 * C997 + C15424 * C992 - C32292 * C1000) *
                C32010) *
               C15419 +
           ((C15421 * C245 - C32324 * C256 + C15422 * C250 - C32320 * C266 +
             C15423 * C980 - C32310 * C987 + C15424 * C983 - C32292 * C993) *
                C114 +
            (C15421 * C257 - C32324 * C275 + C15422 * C267 - C32320 * C280 +
             C15423 * C988 - C32310 * C998 + C15424 * C994 - C32292 * C1001) *
                C32010) *
               C31921) *
              C31970 * C241 +
          (((C32324 * C264 - C15421 * C249 + C32320 * C985 - C15422 * C979 +
             C32310 * C991 - C15423 * C982 + C32292 * C6176 - C15424 * C6174) *
                C114 +
            (C32324 * C279 - C15421 * C265 + C32320 * C997 - C15422 * C986 +
             C32310 * C1000 - C15423 * C992 + C32292 * C6180 - C15424 * C6177) *
                C32010) *
               C15419 +
           ((C32324 * C266 - C15421 * C250 + C32320 * C987 - C15422 * C980 +
             C32310 * C993 - C15423 * C983 + C32292 * C6339 - C15424 * C6338) *
                C114 +
            (C32324 * C280 - C15421 * C267 + C32320 * C998 - C15422 * C988 +
             C32310 * C1001 - C15423 * C994 + C32292 * C6341 - C15424 * C6340) *
                C32010) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
              C17317 * C264 - C30929 * C249) *
                 C20326 +
             (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
              C17317 * C279 - C30929 * C265) *
                 C20324 +
             (C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C20327 +
             (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32097) *
                C32232 +
            ((C17325 - C17326 + C17327 - C17328 + C17329 - C17330) * C20326 +
             (C17331 - C17332 + C17333 - C17334 + C17335 - C17336) * C20324 +
             C20017 * C20327 + C20018 * C32097) *
                C31921) *
               C31970 * C471 +
           (((C30923 * C244 - C32051 * C254 + C30915 * C249 - C32058 * C264 +
              C30929 * C979 - C17317 * C985) *
                 C20326 +
             (C30923 * C255 - C32051 * C274 + C30915 * C265 - C32058 * C279 +
              C30929 * C986 - C17317 * C997) *
                 C20324 +
             (C20215 - C20216 + C20217 - C20218 + C20219 - C20220) * C20327 +
             (C20221 - C20222 + C20223 - C20224 + C20225 - C20226) * C32097) *
                C32232 +
            ((C17740 - C17741 + C17742 - C17743 + C17744 - C17745) * C20326 +
             (C17746 - C17747 + C17748 - C17749 + C17750 - C17751) * C20324 +
             (C19795 - C19796 + C19797 - C19798 + C19799 - C19800) * C20327 +
             (C19801 - C19802 + C19803 - C19804 + C19805 - C19806) * C32097) *
                C31921) *
               C31970 * C472) *
              C473 +
          ((((C17326 - C17325 + C17328 - C17327 + C17330 - C17329) * C20326 +
             (C17332 - C17331 + C17334 - C17333 + C17336 - C17335) * C20324 +
             C20019 * C20327 + C20020 * C32097) *
                C32232 +
            ((C17338 - C17337 + C17340 - C17339 + C17342 - C17341) * C20326 +
             (C17344 - C17343 + C17346 - C17345 + C17348 - C17347) * C20324 +
             (C17922 - C17923 + C17924 - C17925 + C17926 - C17927) * C20327 +
             (C17928 - C17929 + C17930 - C17931 + C17932 - C17933) * C32097) *
                C31921) *
               C31970 * C471 +
           (((C17741 - C17740 + C17743 - C17742 + C17745 - C17744) * C20326 +
             (C17747 - C17746 + C17749 - C17748 + C17751 - C17750) * C20324 +
             (C19796 - C19795 + C19798 - C19797 + C19800 - C19799) * C20327 +
             (C19802 - C19801 + C19804 - C19803 + C19806 - C19805) * C32097) *
                C32232 +
            ((C17753 - C17752 + C17755 - C17754 + C17757 - C17756) * C20326 +
             (C17759 - C17758 + C17761 - C17760 + C17763 - C17762) * C20324 +
             (C32051 * C690 - C30923 * C683 + C32058 * C1126 - C30915 * C1115 +
              C17317 * C1650 - C30929 * C1645) *
                 C20327 +
             (C32051 * C698 - C30923 * C691 + C32058 * C1142 - C30915 * C1127 +
              C17317 * C1654 - C30929 * C1651) *
                 C32097) *
                C31921) *
               C31970 * C472) *
              C474)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
              C17317 * C264 - C30929 * C249) *
                 C20326 +
             (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
              C17317 * C279 - C30929 * C265) *
                 C20324 +
             (C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C20327 +
             (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32097) *
                C32232 +
            ((C17325 - C17326 + C17327 - C17328 + C17329 - C17330) * C20326 +
             (C17331 - C17332 + C17333 - C17334 + C17335 - C17336) * C20324 +
             C20017 * C20327 + C20018 * C32097) *
                C31921) *
               C577 +
           (((C19566 - C19565 + C19568 - C19567 + C19570 - C19569) * C20326 +
             (C19572 - C19571 + C19574 - C19573 + C19576 - C19575) * C20324 +
             (C19577 - C19578 + C19579 - C19580 + C19581 - C19582) * C20327 +
             (C19583 - C19584 + C19585 - C19586 + C19587 - C19588) * C32097) *
                C32232 +
            (C20019 * C20326 + C20020 * C20324 +
             (C19589 - C19590 + C19591 - C19592 + C19593 - C19594) * C20327 +
             (C19595 - C19596 + C19597 - C19598 + C19599 - C19600) * C32097) *
                C31921) *
               C578) *
              C471 +
          ((((C30923 * C244 - C32051 * C254 + C30915 * C249 - C32058 * C264 +
              C30929 * C979 - C17317 * C985) *
                 C20326 +
             (C30923 * C255 - C32051 * C274 + C30915 * C265 - C32058 * C279 +
              C30929 * C986 - C17317 * C997) *
                 C20324 +
             (C20215 - C20216 + C20217 - C20218 + C20219 - C20220) * C20327 +
             (C20221 - C20222 + C20223 - C20224 + C20225 - C20226) * C32097) *
                C32232 +
            ((C17740 - C17741 + C17742 - C17743 + C17744 - C17745) * C20326 +
             (C17746 - C17747 + C17748 - C17749 + C17750 - C17751) * C20324 +
             (C19795 - C19796 + C19797 - C19798 + C19799 - C19800) * C20327 +
             (C19801 - C19802 + C19803 - C19804 + C19805 - C19806) * C32097) *
                C31921) *
               C577 +
           (((C20216 - C20215 + C20218 - C20217 + C20220 - C20219) * C20326 +
             (C20222 - C20221 + C20224 - C20223 + C20226 - C20225) * C20324 +
             (C32051 * C1128 - C30923 * C1116 + C32058 * C1129 -
              C30915 * C1117 + C17317 * C6249 - C30929 * C6245) *
                 C20327 +
             (C32051 * C1143 - C30923 * C1130 + C32058 * C1144 -
              C30915 * C1131 + C17317 * C6254 - C30929 * C6251) *
                 C32097) *
                C32232 +
            ((C19796 - C19795 + C19798 - C19797 + C19800 - C19799) * C20326 +
             (C19802 - C19801 + C19804 - C19803 + C19806 - C19805) * C20324 +
             (C32051 * C1132 - C30923 * C1118 + C32058 * C1133 -
              C30915 * C1119 + C17317 * C7049 - C30929 * C7048) *
                 C20327 +
             (C32051 * C1145 - C30923 * C1134 + C32058 * C1146 -
              C30915 * C1135 + C17317 * C7051 - C30929 * C7050) *
                 C32097) *
                C31921) *
               C578) *
              C472) *
         C31944) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
             C17317 * C264 - C30929 * C249) *
                C20326 +
            (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
             C17317 * C279 - C30929 * C265) *
                C20324 +
            (C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C20327 +
            (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32097) *
               C32232 +
           ((C17325 - C17326 + C17327 - C17328 + C17329 - C17330) * C20326 +
            (C17331 - C17332 + C17333 - C17334 + C17335 - C17336) * C20324 +
            C20017 * C20327 + C20018 * C32097) *
               C31921) *
              C31970 * C240 +
          (((C30923 * C244 - C32051 * C254 + C30915 * C249 - C32058 * C264 +
             C30929 * C979 - C17317 * C985) *
                C20326 +
            (C30923 * C255 - C32051 * C274 + C30915 * C265 - C32058 * C279 +
             C30929 * C986 - C17317 * C997) *
                C20324 +
            (C20215 - C20216 + C20217 - C20218 + C20219 - C20220) * C20327 +
            (C20221 - C20222 + C20223 - C20224 + C20225 - C20226) * C32097) *
               C32232 +
           ((C17740 - C17741 + C17742 - C17743 + C17744 - C17745) * C20326 +
            (C17746 - C17747 + C17748 - C17749 + C17750 - C17751) * C20324 +
            (C19795 - C19796 + C19797 - C19798 + C19799 - C19800) * C20327 +
            (C19801 - C19802 + C19803 - C19804 + C19805 - C19806) * C32097) *
               C31921) *
              C31970 * C241 +
          (((C32051 * C264 - C30923 * C249 + C32058 * C985 - C30915 * C979 +
             C17317 * C991 - C30929 * C982) *
                C20326 +
            (C32051 * C279 - C30923 * C265 + C32058 * C997 - C30915 * C986 +
             C17317 * C1000 - C30929 * C992) *
                C20324 +
            (C32051 * C1122 - C30923 * C1113 + C32058 * C1646 - C30915 * C1643 +
             C17317 * C6247 - C30929 * C6244) *
                C20327 +
            (C32051 * C1140 - C30923 * C1123 + C32058 * C1652 - C30915 * C1647 +
             C17317 * C6253 - C30929 * C6248) *
                C32097) *
               C32232 +
           ((C32051 * C266 - C30923 * C250 + C32058 * C987 - C30915 * C980 +
             C17317 * C993 - C30929 * C983) *
                C20326 +
            (C32051 * C280 - C30923 * C267 + C32058 * C998 - C30915 * C988 +
             C17317 * C1001 - C30929 * C994) *
                C20324 +
            (C32051 * C1124 - C30923 * C1114 + C32058 * C1648 - C30915 * C1644 +
             C17317 * C6425 - C30929 * C6424) *
                C20327 +
            (C32051 * C1141 - C30923 * C1125 + C32058 * C1653 - C30915 * C1649 +
             C17317 * C6427 - C30929 * C6426) *
                C32097) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
             C17317 * C264 - C30929 * C249) *
                C20326 +
            (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
             C17317 * C279 - C30929 * C265) *
                C20324 +
            (C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C20327 +
            (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32097) *
               C32232 +
           ((C17325 - C17326 + C17327 - C17328 + C17329 - C17330) * C20326 +
            (C17331 - C17332 + C17333 - C17334 + C17335 - C17336) * C20324 +
            C20017 * C20327 + C20018 * C32097) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C17326 - C17325 + C17328 - C17327 + C17330 - C17329) * C20326 +
            (C17332 - C17331 + C17334 - C17333 + C17336 - C17335) * C20324 +
            C20019 * C20327 + C20020 * C32097) *
               C32232 +
           ((C17338 - C17337 + C17340 - C17339 + C17342 - C17341) * C20326 +
            (C17344 - C17343 + C17346 - C17345 + C17348 - C17347) * C20324 +
            (C17922 - C17923 + C17924 - C17925 + C17926 - C17927) * C20327 +
            (C17928 - C17929 + C17930 - C17931 + C17932 - C17933) * C32097) *
               C31921) *
              C31970 * C31956 * C111 +
          ((C17369 * C20326 + C17370 * C20324 +
            (C17923 - C17922 + C17925 - C17924 + C17927 - C17926) * C20327 +
            (C17929 - C17928 + C17931 - C17930 + C17933 - C17932) * C32097) *
               C32232 +
           ((C17350 - C17349 + C17352 - C17351 + C17354 - C17353) * C20326 +
            (C17356 - C17355 + C17358 - C17357 + C17360 - C17359) * C20324 +
            (C32051 * C365 - C30923 * C352 + C32058 * C692 - C30915 * C684 +
             C17317 * C1470 - C30929 * C1469) *
                C20327 +
            (C32051 * C382 - C30923 * C366 + C32058 * C699 - C30915 * C693 +
             C17317 * C1472 - C30929 * C1471) *
                C32097) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
             C17317 * C264 - C30929 * C249) *
                C20326 +
            (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
             C17317 * C279 - C30929 * C265) *
                C20324 +
            (C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C20327 +
            (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32097) *
               C32232 +
           ((C17325 - C17326 + C17327 - C17328 + C17329 - C17330) * C20326 +
            (C17331 - C17332 + C17333 - C17334 + C17335 - C17336) * C20324 +
            C20017 * C20327 + C20018 * C32097) *
               C31921) *
              C346 +
          (((C19566 - C19565 + C19568 - C19567 + C19570 - C19569) * C20326 +
            (C19572 - C19571 + C19574 - C19573 + C19576 - C19575) * C20324 +
            (C19577 - C19578 + C19579 - C19580 + C19581 - C19582) * C20327 +
            (C19583 - C19584 + C19585 - C19586 + C19587 - C19588) * C32097) *
               C32232 +
           (C20019 * C20326 + C20020 * C20324 +
            (C19589 - C19590 + C19591 - C19592 + C19593 - C19594) * C20327 +
            (C19595 - C19596 + C19597 - C19598 + C19599 - C19600) * C32097) *
               C31921) *
              C347 +
          (((C19578 - C19577 + C19580 - C19579 + C19582 - C19581) * C20326 +
            (C19584 - C19583 + C19586 - C19585 + C19588 - C19587) * C20324 +
            (C32051 * C2024 - C30923 * C2018 + C32058 * C2541 - C30915 * C2538 +
             C17317 * C6847 - C30929 * C6844) *
                C20327 +
            (C32051 * C2036 - C30923 * C2025 + C32058 * C2547 - C30915 * C2542 +
             C17317 * C6853 - C30929 * C6848) *
                C32097) *
               C32232 +
           ((C19590 - C19589 + C19592 - C19591 + C19594 - C19593) * C20326 +
            (C19596 - C19595 + C19598 - C19597 + C19600 - C19599) * C20324 +
            (C32051 * C2026 - C30923 * C2019 + C32058 * C2543 - C30915 * C2539 +
             C17317 * C7199 - C30929 * C7198) *
                C20327 +
            (C32051 * C2037 - C30923 * C2027 + C32058 * C2548 - C30915 * C2544 +
             C17317 * C7201 - C30929 * C7200) *
                C32097) *
               C31921) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
              C17317 * C264 - C30929 * C249) *
                 C20326 +
             (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
              C17317 * C279 - C30929 * C265) *
                 C20324 +
             (C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C20327 +
             (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32097) *
                C32232 +
            ((C17325 - C17326 + C17327 - C17328 + C17329 - C17330) * C20326 +
             (C17331 - C17332 + C17333 - C17334 + C17335 - C17336) * C20324 +
             C20017 * C20327 + C20018 * C32097) *
                C31921) *
               C577 +
           (((C19566 - C19565 + C19568 - C19567 + C19570 - C19569) * C20326 +
             (C19572 - C19571 + C19574 - C19573 + C19576 - C19575) * C20324 +
             (C19577 - C19578 + C19579 - C19580 + C19581 - C19582) * C20327 +
             (C19583 - C19584 + C19585 - C19586 + C19587 - C19588) * C32097) *
                C32232 +
            (C20019 * C20326 + C20020 * C20324 +
             (C19589 - C19590 + C19591 - C19592 + C19593 - C19594) * C20327 +
             (C19595 - C19596 + C19597 - C19598 + C19599 - C19600) * C32097) *
                C31921) *
               C578) *
              C31956 * C473 +
          ((((C17326 - C17325 + C17328 - C17327 + C17330 - C17329) * C20326 +
             (C17332 - C17331 + C17334 - C17333 + C17336 - C17335) * C20324 +
             C20019 * C20327 + C20020 * C32097) *
                C32232 +
            ((C17338 - C17337 + C17340 - C17339 + C17342 - C17341) * C20326 +
             (C17344 - C17343 + C17346 - C17345 + C17348 - C17347) * C20324 +
             (C17922 - C17923 + C17924 - C17925 + C17926 - C17927) * C20327 +
             (C17928 - C17929 + C17930 - C17931 + C17932 - C17933) * C32097) *
                C31921) *
               C577 +
           ((C20017 * C20326 + C20018 * C20324 +
             (C19590 - C19589 + C19592 - C19591 + C19594 - C19593) * C20327 +
             (C19596 - C19595 + C19598 - C19597 + C19600 - C19599) * C32097) *
                C32232 +
            ((C17923 - C17922 + C17925 - C17924 + C17927 - C17926) * C20326 +
             (C17929 - C17928 + C17931 - C17930 + C17933 - C17932) * C20324 +
             (C32051 * C373 - C30923 * C356 + C32058 * C1136 - C30915 * C1120 +
              C17317 * C1137 - C30929 * C1121) *
                 C20327 +
             (C32051 * C386 - C30923 * C374 + C32058 * C1147 - C30915 * C1138 +
              C17317 * C1148 - C30929 * C1139) *
                 C32097) *
                C31921) *
               C578) *
              C31956 * C474)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
             C17317 * C264 - C30929 * C249) *
                C20326 +
            (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
             C17317 * C279 - C30929 * C265) *
                C20324 +
            (C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C20327 +
            (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32097) *
               C32232 +
           ((C17325 - C17326 + C17327 - C17328 + C17329 - C17330) * C20326 +
            (C17331 - C17332 + C17333 - C17334 + C17335 - C17336) * C20324 +
            C20017 * C20327 + C20018 * C32097) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C17326 - C17325 + C17328 - C17327 + C17330 - C17329) * C20326 +
            (C17332 - C17331 + C17334 - C17333 + C17336 - C17335) * C20324 +
            C20019 * C20327 + C20020 * C32097) *
               C32232 +
           ((C17338 - C17337 + C17340 - C17339 + C17342 - C17341) * C20326 +
            (C17344 - C17343 + C17346 - C17345 + C17348 - C17347) * C20324 +
            (C17922 - C17923 + C17924 - C17925 + C17926 - C17927) * C20327 +
            (C17928 - C17929 + C17930 - C17931 + C17932 - C17933) * C32097) *
               C31921) *
              C31970 * C31956 * C111 +
          ((C17369 * C20326 + C17370 * C20324 +
            (C17923 - C17922 + C17925 - C17924 + C17927 - C17926) * C20327 +
            (C17929 - C17928 + C17931 - C17930 + C17933 - C17932) * C32097) *
               C32232 +
           ((C17350 - C17349 + C17352 - C17351 + C17354 - C17353) * C20326 +
            (C17356 - C17355 + C17358 - C17357 + C17360 - C17359) * C20324 +
            (C32051 * C365 - C30923 * C352 + C32058 * C692 - C30915 * C684 +
             C17317 * C1470 - C30929 * C1469) *
                C20327 +
            (C32051 * C382 - C30923 * C366 + C32058 * C699 - C30915 * C693 +
             C17317 * C1472 - C30929 * C1471) *
                C32097) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
             C17317 * C264 - C30929 * C249) *
                C20326 +
            (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
             C17317 * C279 - C30929 * C265) *
                C20324 +
            (C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C20327 +
            (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32097) *
               C32232 +
           ((C17325 - C17326 + C17327 - C17328 + C17329 - C17330) * C20326 +
            (C17331 - C17332 + C17333 - C17334 + C17335 - C17336) * C20324 +
            C20017 * C20327 + C20018 * C32097) *
               C31921) *
              C31970 * C240 +
          (((C30923 * C244 - C32051 * C254 + C30915 * C249 - C32058 * C264 +
             C30929 * C979 - C17317 * C985) *
                C20326 +
            (C30923 * C255 - C32051 * C274 + C30915 * C265 - C32058 * C279 +
             C30929 * C986 - C17317 * C997) *
                C20324 +
            (C20215 - C20216 + C20217 - C20218 + C20219 - C20220) * C20327 +
            (C20221 - C20222 + C20223 - C20224 + C20225 - C20226) * C32097) *
               C32232 +
           ((C17740 - C17741 + C17742 - C17743 + C17744 - C17745) * C20326 +
            (C17746 - C17747 + C17748 - C17749 + C17750 - C17751) * C20324 +
            (C19795 - C19796 + C19797 - C19798 + C19799 - C19800) * C20327 +
            (C19801 - C19802 + C19803 - C19804 + C19805 - C19806) * C32097) *
               C31921) *
              C31970 * C241 +
          (((C32051 * C264 - C30923 * C249 + C32058 * C985 - C30915 * C979 +
             C17317 * C991 - C30929 * C982) *
                C20326 +
            (C32051 * C279 - C30923 * C265 + C32058 * C997 - C30915 * C986 +
             C17317 * C1000 - C30929 * C992) *
                C20324 +
            (C32051 * C1122 - C30923 * C1113 + C32058 * C1646 - C30915 * C1643 +
             C17317 * C6247 - C30929 * C6244) *
                C20327 +
            (C32051 * C1140 - C30923 * C1123 + C32058 * C1652 - C30915 * C1647 +
             C17317 * C6253 - C30929 * C6248) *
                C32097) *
               C32232 +
           ((C32051 * C266 - C30923 * C250 + C32058 * C987 - C30915 * C980 +
             C17317 * C993 - C30929 * C983) *
                C20326 +
            (C32051 * C280 - C30923 * C267 + C32058 * C998 - C30915 * C988 +
             C17317 * C1001 - C30929 * C994) *
                C20324 +
            (C32051 * C1124 - C30923 * C1114 + C32058 * C1648 - C30915 * C1644 +
             C17317 * C6425 - C30929 * C6424) *
                C20327 +
            (C32051 * C1141 - C30923 * C1125 + C32058 * C1653 - C30915 * C1649 +
             C17317 * C6427 - C30929 * C6426) *
                C32097) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
             C17317 * C264 - C30929 * C249) *
                C31010 +
            (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
             C17317 * C279 - C30929 * C265) *
                C32093 +
            (C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C31002 +
            (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32100 +
            C30360 * C31016 + C30361 * C23811) *
               C31911 * C31970 * C471 +
           ((C30923 * C244 - C32051 * C254 + C30915 * C249 - C32058 * C264 +
             C30929 * C979 - C17317 * C985) *
                C31010 +
            (C30923 * C255 - C32051 * C274 + C30915 * C265 - C32058 * C279 +
             C30929 * C986 - C17317 * C997) *
                C32093 +
            (C20215 - C20216 + C20217 - C20218 + C20219 - C20220) * C31002 +
            (C20221 - C20222 + C20223 - C20224 + C20225 - C20226) * C32100 +
            (C30923 * C1116 - C32051 * C1128 + C30915 * C1117 - C32058 * C1129 +
             C30929 * C6245 - C17317 * C6249) *
                C31016 +
            (C30923 * C1130 - C32051 * C1143 + C30915 * C1131 - C32058 * C1144 +
             C30929 * C6251 - C17317 * C6254) *
                C23811) *
               C31911 * C31970 * C472) *
              C473 +
          (((C17326 - C17325 + C17328 - C17327 + C17330 - C17329) * C31010 +
            (C17332 - C17331 + C17334 - C17333 + C17336 - C17335) * C32093 +
            C20019 * C31002 + C20020 * C32100 +
            (C19589 - C19590 + C19591 - C19592 + C19593 - C19594) * C31016 +
            (C19595 - C19596 + C19597 - C19598 + C19599 - C19600) * C23811) *
               C31911 * C31970 * C471 +
           ((C17741 - C17740 + C17743 - C17742 + C17745 - C17744) * C31010 +
            (C17747 - C17746 + C17749 - C17748 + C17751 - C17750) * C32093 +
            (C19796 - C19795 + C19798 - C19797 + C19800 - C19799) * C31002 +
            (C19802 - C19801 + C19804 - C19803 + C19806 - C19805) * C32100 +
            (C32051 * C1132 - C30923 * C1118 + C32058 * C1133 - C30915 * C1119 +
             C17317 * C7049 - C30929 * C7048) *
                C31016 +
            (C32051 * C1145 - C30923 * C1134 + C32058 * C1146 - C30915 * C1135 +
             C17317 * C7051 - C30929 * C7050) *
                C23811) *
               C31911 * C31970 * C472) *
              C474)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
             C17317 * C264 - C30929 * C249) *
                C31010 +
            (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
             C17317 * C279 - C30929 * C265) *
                C32093 +
            (C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C31002 +
            (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32100 +
            C30360 * C31016 + C30361 * C23811) *
               C31911 * C577 +
           ((C19566 - C19565 + C19568 - C19567 + C19570 - C19569) * C31010 +
            (C19572 - C19571 + C19574 - C19573 + C19576 - C19575) * C32093 +
            (C19577 - C19578 + C19579 - C19580 + C19581 - C19582) * C31002 +
            (C19583 - C19584 + C19585 - C19586 + C19587 - C19588) * C32100 +
            (C30346 - C30347 + C30348 - C30349 + C30350 - C30351) * C31016 +
            (C30352 - C30353 + C30354 - C30355 + C30356 - C30357) * C23811) *
               C31911 * C578) *
              C471 +
          (((C30923 * C244 - C32051 * C254 + C30915 * C249 - C32058 * C264 +
             C30929 * C979 - C17317 * C985) *
                C31010 +
            (C30923 * C255 - C32051 * C274 + C30915 * C265 - C32058 * C279 +
             C30929 * C986 - C17317 * C997) *
                C32093 +
            (C20215 - C20216 + C20217 - C20218 + C20219 - C20220) * C31002 +
            (C20221 - C20222 + C20223 - C20224 + C20225 - C20226) * C32100 +
            (C30800 - C30801 + C30802 - C30803 + C30804 - C30805) * C31016 +
            (C30806 - C30807 + C30808 - C30809 + C30810 - C30811) * C23811) *
               C31911 * C577 +
           ((C20216 - C20215 + C20218 - C20217 + C20220 - C20219) * C31010 +
            (C20222 - C20221 + C20224 - C20223 + C20226 - C20225) * C32093 +
            (C30801 - C30800 + C30803 - C30802 + C30805 - C30804) * C31002 +
            (C30807 - C30806 + C30809 - C30808 + C30811 - C30810) * C32100 +
            (C32051 * C2541 - C30923 * C2538 + C32058 * C6847 - C30915 * C6844 +
             C17317 * C7361 - C30929 * C7360) *
                C31016 +
            (C32051 * C2547 - C30923 * C2542 + C32058 * C6853 - C30915 * C6848 +
             C17317 * C7363 - C30929 * C7362) *
                C23811) *
               C31911 * C578) *
              C472) *
         C31944) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
            C17317 * C264 - C30929 * C249) *
               C31010 +
           (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
            C17317 * C279 - C30929 * C265) *
               C32093 +
           (C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C31002 +
           (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32100 +
           (C19578 - C19577 + C19580 - C19579 + C19582 - C19581) * C31016 +
           (C19584 - C19583 + C19586 - C19585 + C19588 - C19587) * C23811) *
              C31911 * C31970 * C240 +
          ((C30923 * C244 - C32051 * C254 + C30915 * C249 - C32058 * C264 +
            C30929 * C979 - C17317 * C985) *
               C31010 +
           (C30923 * C255 - C32051 * C274 + C30915 * C265 - C32058 * C279 +
            C30929 * C986 - C17317 * C997) *
               C32093 +
           (C20215 - C20216 + C20217 - C20218 + C20219 - C20220) * C31002 +
           (C20221 - C20222 + C20223 - C20224 + C20225 - C20226) * C32100 +
           (C30923 * C1116 - C32051 * C1128 + C30915 * C1117 - C32058 * C1129 +
            C30929 * C6245 - C17317 * C6249) *
               C31016 +
           (C30923 * C1130 - C32051 * C1143 + C30915 * C1131 - C32058 * C1144 +
            C30929 * C6251 - C17317 * C6254) *
               C23811) *
              C31911 * C31970 * C241 +
          ((C32051 * C264 - C30923 * C249 + C32058 * C985 - C30915 * C979 +
            C17317 * C991 - C30929 * C982) *
               C31010 +
           (C32051 * C279 - C30923 * C265 + C32058 * C997 - C30915 * C986 +
            C17317 * C1000 - C30929 * C992) *
               C32093 +
           (C32051 * C1122 - C30923 * C1113 + C32058 * C1646 - C30915 * C1643 +
            C17317 * C6247 - C30929 * C6244) *
               C31002 +
           (C32051 * C1140 - C30923 * C1123 + C32058 * C1652 - C30915 * C1647 +
            C17317 * C6253 - C30929 * C6248) *
               C32100 +
           (C32051 * C1129 - C30923 * C1117 + C32058 * C6249 - C30915 * C6245 +
            C17317 * C6250 - C30929 * C6246) *
               C31016 +
           (C32051 * C1144 - C30923 * C1131 + C32058 * C6254 - C30915 * C6251 +
            C17317 * C6255 - C30929 * C6252) *
               C23811) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
            C17317 * C264 - C30929 * C249) *
               C31010 +
           (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
            C17317 * C279 - C30929 * C265) *
               C32093 +
           (C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C31002 +
           (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32100 +
           (C19578 - C19577 + C19580 - C19579 + C19582 - C19581) * C31016 +
           (C19584 - C19583 + C19586 - C19585 + C19588 - C19587) * C23811) *
              C31911 * C31970 * C31956 * C110 +
          ((C17326 - C17325 + C17328 - C17327 + C17330 - C17329) * C31010 +
           (C17332 - C17331 + C17334 - C17333 + C17336 - C17335) * C32093 +
           C20019 * C31002 + C20020 * C32100 +
           (C19589 - C19590 + C19591 - C19592 + C19593 - C19594) * C31016 +
           (C19595 - C19596 + C19597 - C19598 + C19599 - C19600) * C23811) *
              C31911 * C31970 * C31956 * C111 +
          (C17369 * C31010 + C17370 * C32093 +
           (C17923 - C17922 + C17925 - C17924 + C17927 - C17926) * C31002 +
           (C17929 - C17928 + C17931 - C17930 + C17933 - C17932) * C32100 +
           (C32051 * C373 - C30923 * C356 + C32058 * C1136 - C30915 * C1120 +
            C17317 * C1137 - C30929 * C1121) *
               C31016 +
           (C32051 * C386 - C30923 * C374 + C32058 * C1147 - C30915 * C1138 +
            C17317 * C1148 - C30929 * C1139) *
               C23811) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
            C17317 * C264 - C30929 * C249) *
               C31010 +
           (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
            C17317 * C279 - C30929 * C265) *
               C32093 +
           (C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C31002 +
           (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32100 +
           C30360 * C31016 + C30361 * C23811) *
              C31911 * C346 +
          ((C19566 - C19565 + C19568 - C19567 + C19570 - C19569) * C31010 +
           (C19572 - C19571 + C19574 - C19573 + C19576 - C19575) * C32093 +
           (C19577 - C19578 + C19579 - C19580 + C19581 - C19582) * C31002 +
           (C19583 - C19584 + C19585 - C19586 + C19587 - C19588) * C32100 +
           (C30346 - C30347 + C30348 - C30349 + C30350 - C30351) * C31016 +
           (C30352 - C30353 + C30354 - C30355 + C30356 - C30357) * C23811) *
              C31911 * C347 +
          (C30360 * C31010 + C30361 * C32093 +
           (C30347 - C30346 + C30349 - C30348 + C30351 - C30350) * C31002 +
           (C30353 - C30352 + C30355 - C30354 + C30357 - C30356) * C32100 +
           (C32051 * C2030 - C30923 * C2021 + C32058 * C6849 - C30915 * C6845 +
            C17317 * C6850 - C30929 * C6846) *
               C31016 +
           (C32051 * C2039 - C30923 * C2031 + C32058 * C6854 - C30915 * C6851 +
            C17317 * C6855 - C30929 * C6852) *
               C23811) *
              C31911 * C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
             C17317 * C264 - C30929 * C249) *
                C31010 +
            (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
             C17317 * C279 - C30929 * C265) *
                C32093 +
            (C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C31002 +
            (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32100 +
            C30360 * C31016 + C30361 * C23811) *
               C31911 * C577 +
           ((C19566 - C19565 + C19568 - C19567 + C19570 - C19569) * C31010 +
            (C19572 - C19571 + C19574 - C19573 + C19576 - C19575) * C32093 +
            (C19577 - C19578 + C19579 - C19580 + C19581 - C19582) * C31002 +
            (C19583 - C19584 + C19585 - C19586 + C19587 - C19588) * C32100 +
            (C30346 - C30347 + C30348 - C30349 + C30350 - C30351) * C31016 +
            (C30352 - C30353 + C30354 - C30355 + C30356 - C30357) * C23811) *
               C31911 * C578) *
              C31956 * C473 +
          (((C17326 - C17325 + C17328 - C17327 + C17330 - C17329) * C31010 +
            (C17332 - C17331 + C17334 - C17333 + C17336 - C17335) * C32093 +
            C20019 * C31002 + C20020 * C32100 +
            (C19589 - C19590 + C19591 - C19592 + C19593 - C19594) * C31016 +
            (C19595 - C19596 + C19597 - C19598 + C19599 - C19600) * C23811) *
               C31911 * C577 +
           (C20017 * C31010 + C20018 * C32093 +
            (C19590 - C19589 + C19592 - C19591 + C19594 - C19593) * C31002 +
            (C19596 - C19595 + C19598 - C19597 + C19600 - C19599) * C32100 +
            (C32051 * C2026 - C30923 * C2019 + C32058 * C2543 - C30915 * C2539 +
             C17317 * C7199 - C30929 * C7198) *
                C31016 +
            (C32051 * C2037 - C30923 * C2027 + C32058 * C2548 - C30915 * C2544 +
             C17317 * C7201 - C30929 * C7200) *
                C23811) *
               C31911 * C578) *
              C31956 * C474)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
            C17317 * C264 - C30929 * C249) *
               C31010 +
           (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
            C17317 * C279 - C30929 * C265) *
               C32093 +
           (C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C31002 +
           (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32100 +
           (C19578 - C19577 + C19580 - C19579 + C19582 - C19581) * C31016 +
           (C19584 - C19583 + C19586 - C19585 + C19588 - C19587) * C23811) *
              C31911 * C31970 * C31956 * C110 +
          ((C17326 - C17325 + C17328 - C17327 + C17330 - C17329) * C31010 +
           (C17332 - C17331 + C17334 - C17333 + C17336 - C17335) * C32093 +
           C20019 * C31002 + C20020 * C32100 +
           (C19589 - C19590 + C19591 - C19592 + C19593 - C19594) * C31016 +
           (C19595 - C19596 + C19597 - C19598 + C19599 - C19600) * C23811) *
              C31911 * C31970 * C31956 * C111 +
          (C17369 * C31010 + C17370 * C32093 +
           (C17923 - C17922 + C17925 - C17924 + C17927 - C17926) * C31002 +
           (C17929 - C17928 + C17931 - C17930 + C17933 - C17932) * C32100 +
           (C32051 * C373 - C30923 * C356 + C32058 * C1136 - C30915 * C1120 +
            C17317 * C1137 - C30929 * C1121) *
               C31016 +
           (C32051 * C386 - C30923 * C374 + C32058 * C1147 - C30915 * C1138 +
            C17317 * C1148 - C30929 * C1139) *
               C23811) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((C32051 * C122 - C30923 * C115 + C32058 * C254 - C30915 * C244 +
            C17317 * C264 - C30929 * C249) *
               C31010 +
           (C32051 * C136 - C30923 * C123 + C32058 * C274 - C30915 * C255 +
            C17317 * C279 - C30929 * C265) *
               C32093 +
           (C19565 - C19566 + C19567 - C19568 + C19569 - C19570) * C31002 +
           (C19571 - C19572 + C19573 - C19574 + C19575 - C19576) * C32100 +
           (C19578 - C19577 + C19580 - C19579 + C19582 - C19581) * C31016 +
           (C19584 - C19583 + C19586 - C19585 + C19588 - C19587) * C23811) *
              C31911 * C31970 * C240 +
          ((C30923 * C244 - C32051 * C254 + C30915 * C249 - C32058 * C264 +
            C30929 * C979 - C17317 * C985) *
               C31010 +
           (C30923 * C255 - C32051 * C274 + C30915 * C265 - C32058 * C279 +
            C30929 * C986 - C17317 * C997) *
               C32093 +
           (C20215 - C20216 + C20217 - C20218 + C20219 - C20220) * C31002 +
           (C20221 - C20222 + C20223 - C20224 + C20225 - C20226) * C32100 +
           (C30923 * C1116 - C32051 * C1128 + C30915 * C1117 - C32058 * C1129 +
            C30929 * C6245 - C17317 * C6249) *
               C31016 +
           (C30923 * C1130 - C32051 * C1143 + C30915 * C1131 - C32058 * C1144 +
            C30929 * C6251 - C17317 * C6254) *
               C23811) *
              C31911 * C31970 * C241 +
          ((C32051 * C264 - C30923 * C249 + C32058 * C985 - C30915 * C979 +
            C17317 * C991 - C30929 * C982) *
               C31010 +
           (C32051 * C279 - C30923 * C265 + C32058 * C997 - C30915 * C986 +
            C17317 * C1000 - C30929 * C992) *
               C32093 +
           (C32051 * C1122 - C30923 * C1113 + C32058 * C1646 - C30915 * C1643 +
            C17317 * C6247 - C30929 * C6244) *
               C31002 +
           (C32051 * C1140 - C30923 * C1123 + C32058 * C1652 - C30915 * C1647 +
            C17317 * C6253 - C30929 * C6248) *
               C32100 +
           (C32051 * C1129 - C30923 * C1117 + C32058 * C6249 - C30915 * C6245 +
            C17317 * C6250 - C30929 * C6246) *
               C31016 +
           (C32051 * C1144 - C30923 * C1131 + C32058 * C6254 - C30915 * C6251 +
            C17317 * C6255 - C30929 * C6252) *
               C23811) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
             C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
                C20326 +
            (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
             C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
                C20324 +
            (C26826 - C26827 + C26828 - C26829 + C26830 - C26831 + C26832 -
             C26833) *
                C20327 +
            (C26834 - C26835 + C26836 - C26837 + C26838 - C26839 + C26840 -
             C26841) *
                C32097) *
               C31911 * C31970 * C471 +
           ((C15421 * C244 - C32324 * C254 + C15422 * C249 - C32320 * C264 +
             C15423 * C979 - C32310 * C985 + C15424 * C982 - C32292 * C991) *
                C20326 +
            (C15421 * C255 - C32324 * C274 + C15422 * C265 - C32320 * C279 +
             C15423 * C986 - C32310 * C997 + C15424 * C992 - C32292 * C1000) *
                C20324 +
            (C15421 * C681 - C32324 * C686 + C15422 * C1113 - C32320 * C1122 +
             C15423 * C1643 - C32310 * C1646 + C15424 * C6244 -
             C32292 * C6247) *
                C20327 +
            (C15421 * C687 - C32324 * C696 + C15422 * C1123 - C32320 * C1140 +
             C15423 * C1647 - C32310 * C1652 + C15424 * C6248 -
             C32292 * C6253) *
                C32097) *
               C31911 * C31970 * C472) *
              C473 +
          (((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
             C15432) *
                C20326 +
            (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
             C15440) *
                C20324 +
            (C15930 - C15931 + C15932 - C15933 + C15934 - C15935 + C15936 -
             C15937) *
                C20327 +
            (C15938 - C15939 + C15940 - C15941 + C15942 - C15943 + C15944 -
             C15945) *
                C32097) *
               C31911 * C31970 * C471 +
           ((C15785 - C15784 + C15787 - C15786 + C15789 - C15788 + C15791 -
             C15790) *
                C20326 +
            (C15793 - C15792 + C15795 - C15794 + C15797 - C15796 + C15799 -
             C15798) *
                C20324 +
            (C32324 * C688 - C15421 * C682 + C32320 * C1124 - C15422 * C1114 +
             C32310 * C1648 - C15423 * C1644 + C32292 * C6425 -
             C15424 * C6424) *
                C20327 +
            (C32324 * C697 - C15421 * C689 + C32320 * C1141 - C15422 * C1125 +
             C32310 * C1653 - C15423 * C1649 + C32292 * C6427 -
             C15424 * C6426) *
                C32097) *
               C31911 * C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                 C20326 +
             (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                 C20324 +
             (C16530 - C16531 + C16532 - C16533) * C20327 +
             (C16534 - C16535 + C16536 - C16537) * C32097) *
                C32314 +
            ((C14634 - C14635 + C14636 - C14637) * C20326 +
             (C14638 - C14639 + C14640 - C14641) * C20324 + C16990 * C20327 +
             C16991 * C32097) *
                C32301 +
            C25657 * C32271) *
               C31970 * C471 +
           (((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                 C20326 +
             (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                 C20324 +
             (C17190 - C17191 + C17192 - C17193) * C20327 +
             (C17194 - C17195 + C17196 - C17197) * C32097) *
                C32314 +
            ((C15010 - C15011 + C15012 - C15013) * C20326 +
             (C15014 - C15015 + C15016 - C15017) * C20324 +
             (C16768 - C16769 + C16770 - C16771) * C20327 +
             (C16772 - C16773 + C16774 - C16775) * C32097) *
                C32301 +
            ((C15018 - C15019 + C15020 - C15021) * C20326 +
             (C15022 - C15023 + C15024 - C15025) * C20324 +
             (C18725 - C18726 + C18727 - C18728) * C20327 +
             (C18729 - C18730 + C18731 - C18732) * C32097) *
                C32271) *
               C31970 * C472) *
              C473 +
          ((((C14635 - C14634 + C14637 - C14636) * C20326 +
             (C14639 - C14638 + C14641 - C14640) * C20324 + C16992 * C20327 +
             C16993 * C32097) *
                C32314 +
            ((C14643 - C14642 + C14645 - C14644) * C20326 +
             (C14647 - C14646 + C14649 - C14648) * C20324 + C18931 * C20327 +
             C18932 * C32097) *
                C32301 +
            ((C14651 - C14650 + C14653 - C14652) * C20326 +
             (C14655 - C14654 + C14657 - C14656) * C20324 +
             (C15180 - C15181 + C15182 - C15183) * C20327 +
             (C15184 - C15185 + C15186 - C15187) * C32097) *
                C32271) *
               C31970 * C471 +
           (((C15011 - C15010 + C15013 - C15012) * C20326 +
             (C15015 - C15014 + C15017 - C15016) * C20324 +
             (C16769 - C16768 + C16771 - C16770) * C20327 +
             (C16773 - C16772 + C16775 - C16774) * C32097) *
                C32314 +
            ((C15019 - C15018 + C15021 - C15020) * C20326 +
             (C15023 - C15022 + C15025 - C15024) * C20324 +
             (C18726 - C18725 + C18728 - C18727) * C20327 +
             (C18730 - C18729 + C18732 - C18731) * C32097) *
                C32301 +
            ((C15027 - C15026 + C15029 - C15028) * C20326 +
             (C15031 - C15030 + C15033 - C15032) * C20324 +
             (C14625 * C692 - C14631 * C684 + C32055 * C1470 - C14632 * C1469) *
                 C20327 +
             (C14625 * C699 - C14631 * C693 + C32055 * C1472 - C14632 * C1471) *
                 C32097) *
                C32271) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C22082 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C32325 +
            (C16530 - C16531 + C16532 - C16533) * C22083 +
            (C16534 - C16535 + C16536 - C16537) * C32322 + C16572 * C22084 +
            C16573 * C32313 + C27570 * C22085 + C27571 * C32298) *
               C31911 * C31970 * C471 +
           ((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                C22082 +
            (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                C32325 +
            (C17190 - C17191 + C17192 - C17193) * C22083 +
            (C17194 - C17195 + C17196 - C17197) * C32322 +
            (C17198 - C17199 + C17200 - C17201) * C22084 +
            (C17202 - C17203 + C17204 - C17205) * C32313 +
            (C14631 * C2538 - C14625 * C2541 + C14632 * C6844 -
             C32055 * C6847) *
                C22085 +
            (C14631 * C2542 - C14625 * C2547 + C14632 * C6848 -
             C32055 * C6853) *
                C32298) *
               C31911 * C31970 * C472) *
              C473 +
          (((C14635 - C14634 + C14637 - C14636) * C22082 +
            (C14639 - C14638 + C14641 - C14640) * C32325 + C16992 * C22083 +
            C16993 * C32322 + C16994 * C22084 + C16995 * C32313 +
            (C16558 - C16559 + C16560 - C16561) * C22085 +
            (C16562 - C16563 + C16564 - C16565) * C32298) *
               C31911 * C31970 * C471 +
           ((C15011 - C15010 + C15013 - C15012) * C22082 +
            (C15015 - C15014 + C15017 - C15016) * C32325 +
            (C16769 - C16768 + C16771 - C16770) * C22083 +
            (C16773 - C16772 + C16775 - C16774) * C32322 +
            (C16777 - C16776 + C16779 - C16778) * C22084 +
            (C16781 - C16780 + C16783 - C16782) * C32313 +
            (C14625 * C2543 - C14631 * C2539 + C32055 * C7199 -
             C14632 * C7198) *
                C22085 +
            (C14625 * C2548 - C14631 * C2544 + C32055 * C7201 -
             C14632 * C7200) *
                C32298) *
               C31911 * C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
             C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
                C20326 +
            (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
             C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
                C20324 +
            (C26826 - C26827 + C26828 - C26829 + C26830 - C26831 + C26832 -
             C26833) *
                C20327 +
            (C26834 - C26835 + C26836 - C26837 + C26838 - C26839 + C26840 -
             C26841) *
                C32097) *
               C31911 * C577 +
           ((C26827 - C26826 + C26829 - C26828 + C26831 - C26830 + C26833 -
             C26832) *
                C20326 +
            (C26835 - C26834 + C26837 - C26836 + C26839 - C26838 + C26841 -
             C26840) *
                C20324 +
            (C26842 - C26843 + C26844 - C26845 + C26846 - C26847 + C26848 -
             C26849) *
                C20327 +
            (C26850 - C26851 + C26852 - C26853 + C26854 - C26855 + C26856 -
             C26857) *
                C32097) *
               C31911 * C578) *
              C471 +
          (((C15421 * C244 - C32324 * C254 + C15422 * C249 - C32320 * C264 +
             C15423 * C979 - C32310 * C985 + C15424 * C982 - C32292 * C991) *
                C20326 +
            (C15421 * C255 - C32324 * C274 + C15422 * C265 - C32320 * C279 +
             C15423 * C986 - C32310 * C997 + C15424 * C992 - C32292 * C1000) *
                C20324 +
            (C27248 - C27249 + C27250 - C27251 + C27252 - C27253 + C27254 -
             C27255) *
                C20327 +
            (C27256 - C27257 + C27258 - C27259 + C27260 - C27261 + C27262 -
             C27263) *
                C32097) *
               C31911 * C577 +
           ((C27249 - C27248 + C27251 - C27250 + C27253 - C27252 + C27255 -
             C27254) *
                C20326 +
            (C27257 - C27256 + C27259 - C27258 + C27261 - C27260 + C27263 -
             C27262) *
                C20324 +
            (C32324 * C1128 - C15421 * C1116 + C32320 * C1129 - C15422 * C1117 +
             C32310 * C6249 - C15423 * C6245 + C32292 * C6250 -
             C15424 * C6246) *
                C20327 +
            (C32324 * C1143 - C15421 * C1130 + C32320 * C1144 - C15422 * C1131 +
             C32310 * C6254 - C15423 * C6251 + C32292 * C6255 -
             C15424 * C6252) *
                C32097) *
               C31911 * C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                 C20326 +
             (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                 C20324 +
             (C16530 - C16531 + C16532 - C16533) * C20327 +
             (C16534 - C16535 + C16536 - C16537) * C32097) *
                C32314 +
            ((C14634 - C14635 + C14636 - C14637) * C20326 +
             (C14638 - C14639 + C14640 - C14641) * C20324 + C16990 * C20327 +
             C16991 * C32097) *
                C32301 +
            C25657 * C32271) *
               C577 +
           (((C16531 - C16530 + C16533 - C16532) * C20326 +
             (C16535 - C16534 + C16537 - C16536) * C20324 +
             (C16539 - C16538 + C16541 - C16540) * C20327 +
             (C16543 - C16542 + C16545 - C16544) * C32097) *
                C32314 +
            (C16992 * C20326 + C16993 * C20324 + C16994 * C20327 +
             C16995 * C32097) *
                C32301 +
            (C18931 * C20326 + C18932 * C20324 +
             (C16230 - C16231 + C16232 - C16233) * C20327 +
             (C16234 - C16235 + C16236 - C16237) * C32097) *
                C32271) *
               C578) *
              C471 +
          ((((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                 C20326 +
             (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                 C20324 +
             (C17190 - C17191 + C17192 - C17193) * C20327 +
             (C17194 - C17195 + C17196 - C17197) * C32097) *
                C32314 +
            ((C15010 - C15011 + C15012 - C15013) * C20326 +
             (C15014 - C15015 + C15016 - C15017) * C20324 +
             (C16768 - C16769 + C16770 - C16771) * C20327 +
             (C16772 - C16773 + C16774 - C16775) * C32097) *
                C32301 +
            ((C15018 - C15019 + C15020 - C15021) * C20326 +
             (C15022 - C15023 + C15024 - C15025) * C20324 +
             (C18725 - C18726 + C18727 - C18728) * C20327 +
             (C18729 - C18730 + C18731 - C18732) * C32097) *
                C32271) *
               C577 +
           (((C17191 - C17190 + C17193 - C17192) * C20326 +
             (C17195 - C17194 + C17197 - C17196) * C20324 +
             (C17199 - C17198 + C17201 - C17200) * C20327 +
             (C17203 - C17202 + C17205 - C17204) * C32097) *
                C32314 +
            ((C16769 - C16768 + C16771 - C16770) * C20326 +
             (C16773 - C16772 + C16775 - C16774) * C20324 +
             (C16777 - C16776 + C16779 - C16778) * C20327 +
             (C16781 - C16780 + C16783 - C16782) * C32097) *
                C32301 +
            ((C18726 - C18725 + C18728 - C18727) * C20326 +
             (C18730 - C18729 + C18732 - C18731) * C20324 +
             (C14625 * C1136 - C14631 * C1120 + C32055 * C1137 -
              C14632 * C1121) *
                 C20327 +
             (C14625 * C1147 - C14631 * C1138 + C32055 * C1148 -
              C14632 * C1139) *
                 C32097) *
                C32271) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C22082 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C32325 +
            (C16530 - C16531 + C16532 - C16533) * C22083 +
            (C16534 - C16535 + C16536 - C16537) * C32322 + C16572 * C22084 +
            C16573 * C32313 + C27570 * C22085 + C27571 * C32298) *
               C31911 * C577 +
           ((C16531 - C16530 + C16533 - C16532) * C22082 +
            (C16535 - C16534 + C16537 - C16536) * C32325 +
            (C16539 - C16538 + C16541 - C16540) * C22083 +
            (C16543 - C16542 + C16545 - C16544) * C32322 +
            (C16550 - C16551 + C16552 - C16553) * C22084 +
            (C16554 - C16555 + C16556 - C16557) * C32313 +
            (C27562 - C27563 + C27564 - C27565) * C22085 +
            (C27566 - C27567 + C27568 - C27569) * C32298) *
               C31911 * C578) *
              C471 +
          (((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                C22082 +
            (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                C32325 +
            (C17190 - C17191 + C17192 - C17193) * C22083 +
            (C17194 - C17195 + C17196 - C17197) * C32322 +
            (C17198 - C17199 + C17200 - C17201) * C22084 +
            (C17202 - C17203 + C17204 - C17205) * C32313 +
            (C27962 - C27963 + C27964 - C27965) * C22085 +
            (C27966 - C27967 + C27968 - C27969) * C32298) *
               C31911 * C577 +
           ((C17191 - C17190 + C17193 - C17192) * C22082 +
            (C17195 - C17194 + C17197 - C17196) * C32325 +
            (C17199 - C17198 + C17201 - C17200) * C22083 +
            (C17203 - C17202 + C17205 - C17204) * C32322 +
            (C27963 - C27962 + C27965 - C27964) * C22084 +
            (C27967 - C27966 + C27969 - C27968) * C32313 +
            (C14625 * C6849 - C14631 * C6845 + C32055 * C6850 -
             C14632 * C6846) *
                C22085 +
            (C14625 * C6854 - C14631 * C6851 + C32055 * C6855 -
             C14632 * C6852) *
                C32298) *
               C31911 * C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C14625 * C122 - C14631 * C115 + C32055 * C254 -
                 C14632 * C244) *
                    C20326 +
                (C14625 * C136 - C14631 * C123 + C32055 * C274 -
                 C14632 * C255) *
                    C20324 +
                (C16530 - C16531 + C16532 - C16533) * C20327 +
                (C16534 - C16535 + C16536 - C16537) * C32097) *
                   C32314 +
               ((C14634 - C14635 + C14636 - C14637) * C20326 +
                (C14638 - C14639 + C14640 - C14641) * C20324 + C16990 * C20327 +
                C16991 * C32097) *
                   C32301 +
               C25657 * C32271) *
                  C31970 * C31956 * C110 +
              (((C14635 - C14634 + C14637 - C14636) * C20326 +
                (C14639 - C14638 + C14641 - C14640) * C20324 + C16992 * C20327 +
                C16993 * C32097) *
                   C32314 +
               ((C14643 - C14642 + C14645 - C14644) * C20326 +
                (C14647 - C14646 + C14649 - C14648) * C20324 + C18931 * C20327 +
                C18932 * C32097) *
                   C32301 +
               ((C14651 - C14650 + C14653 - C14652) * C20326 +
                (C14655 - C14654 + C14657 - C14656) * C20324 +
                (C15180 - C15181 + C15182 - C15183) * C20327 +
                (C15184 - C15185 + C15186 - C15187) * C32097) *
                   C32271) *
                  C31970 * C31956 * C111 +
              (C25657 * C32314 +
               (C14676 * C20326 + C14677 * C20324 +
                (C15181 - C15180 + C15183 - C15182) * C20327 +
                (C15185 - C15184 + C15187 - C15186) * C32097) *
                   C32301 +
               ((C14659 - C14658 + C14661 - C14660) * C20326 +
                (C14663 - C14662 + C14665 - C14664) * C20324 +
                (C14625 * C367 - C14631 * C353 + C32055 * C694 -
                 C14632 * C685) *
                    C20327 +
                (C14625 * C383 - C14631 * C368 + C32055 * C700 -
                 C14632 * C695) *
                    C32097) *
                   C32271) *
                  C31970 * C31956 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C14625 * C122 - C14631 * C115 + C32055 * C254 -
                 C14632 * C244) *
                    C20326 +
                (C14625 * C136 - C14631 * C123 + C32055 * C274 -
                 C14632 * C255) *
                    C20324 +
                (C16530 - C16531 + C16532 - C16533) * C20327 +
                (C16534 - C16535 + C16536 - C16537) * C32097) *
                   C32314 +
               ((C14634 - C14635 + C14636 - C14637) * C20326 +
                (C14638 - C14639 + C14640 - C14641) * C20324 + C16990 * C20327 +
                C16991 * C32097) *
                   C32301 +
               C25657 * C32271) *
                  C31970 * C240 +
              (((C14631 * C244 - C14625 * C254 + C14632 * C249 -
                 C32055 * C264) *
                    C20326 +
                (C14631 * C255 - C14625 * C274 + C14632 * C265 -
                 C32055 * C279) *
                    C20324 +
                (C17190 - C17191 + C17192 - C17193) * C20327 +
                (C17194 - C17195 + C17196 - C17197) * C32097) *
                   C32314 +
               ((C15010 - C15011 + C15012 - C15013) * C20326 +
                (C15014 - C15015 + C15016 - C15017) * C20324 +
                (C16768 - C16769 + C16770 - C16771) * C20327 +
                (C16772 - C16773 + C16774 - C16775) * C32097) *
                   C32301 +
               ((C15018 - C15019 + C15020 - C15021) * C20326 +
                (C15022 - C15023 + C15024 - C15025) * C20324 +
                (C18725 - C18726 + C18727 - C18728) * C20327 +
                (C18729 - C18730 + C18731 - C18732) * C32097) *
                   C32271) *
                  C31970 * C241 +
              (((C14625 * C264 - C14631 * C249 + C32055 * C985 -
                 C14632 * C979) *
                    C20326 +
                (C14625 * C279 - C14631 * C265 + C32055 * C997 -
                 C14632 * C986) *
                    C20324 +
                (C14625 * C1122 - C14631 * C1113 + C32055 * C1646 -
                 C14632 * C1643) *
                    C20327 +
                (C14625 * C1140 - C14631 * C1123 + C32055 * C1652 -
                 C14632 * C1647) *
                    C32097) *
                   C32314 +
               ((C14625 * C266 - C14631 * C250 + C32055 * C987 -
                 C14632 * C980) *
                    C20326 +
                (C14625 * C280 - C14631 * C267 + C32055 * C998 -
                 C14632 * C988) *
                    C20324 +
                (C14625 * C1124 - C14631 * C1114 + C32055 * C1648 -
                 C14632 * C1644) *
                    C20327 +
                (C14625 * C1141 - C14631 * C1125 + C32055 * C1653 -
                 C14632 * C1649) *
                    C32097) *
                   C32301 +
               ((C14625 * C268 - C14631 * C251 + C32055 * C989 -
                 C14632 * C981) *
                    C20326 +
                (C14625 * C281 - C14631 * C269 + C32055 * C999 -
                 C14632 * C990) *
                    C20324 +
                (C14625 * C1126 - C14631 * C1115 + C32055 * C1650 -
                 C14632 * C1645) *
                    C20327 +
                (C14625 * C1142 - C14631 * C1127 + C32055 * C1654 -
                 C14632 * C1651) *
                    C32097) *
                   C32271) *
                  C31970 * C242) *
             C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C20326 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C20324 +
            (C16530 - C16531 + C16532 - C16533) * C20327 +
            (C16534 - C16535 + C16536 - C16537) * C32097) *
               C32314 +
           ((C14634 - C14635 + C14636 - C14637) * C20326 +
            (C14638 - C14639 + C14640 - C14641) * C20324 + C16990 * C20327 +
            C16991 * C32097) *
               C32301 +
           C25657 * C32271) *
              C346 +
          (((C16531 - C16530 + C16533 - C16532) * C20326 +
            (C16535 - C16534 + C16537 - C16536) * C20324 +
            (C16539 - C16538 + C16541 - C16540) * C20327 +
            (C16543 - C16542 + C16545 - C16544) * C32097) *
               C32314 +
           (C16992 * C20326 + C16993 * C20324 + C16994 * C20327 +
            C16995 * C32097) *
               C32301 +
           (C18931 * C20326 + C18932 * C20324 +
            (C16230 - C16231 + C16232 - C16233) * C20327 +
            (C16234 - C16235 + C16236 - C16237) * C32097) *
               C32271) *
              C347 +
          ((C16572 * C20326 + C16573 * C20324 +
            (C16551 - C16550 + C16553 - C16552) * C20327 +
            (C16555 - C16554 + C16557 - C16556) * C32097) *
               C32314 +
           (C16570 * C20326 + C16571 * C20324 +
            (C16559 - C16558 + C16561 - C16560) * C20327 +
            (C16563 - C16562 + C16565 - C16564) * C32097) *
               C32301 +
           ((C16231 - C16230 + C16233 - C16232) * C20326 +
            (C16235 - C16234 + C16237 - C16236) * C20324 +
            (C14625 * C2028 - C14631 * C2020 + C32055 * C2545 -
             C14632 * C2540) *
                C20327 +
            (C14625 * C2038 - C14631 * C2029 + C32055 * C2549 -
             C14632 * C2546) *
                C32097) *
               C32271) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
            C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
               C20326 +
           (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
            C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
               C20324 +
           (C32324 * C359 - C15421 * C349 + C32320 * C686 - C15422 * C681 +
            C32310 * C1122 - C15423 * C1113 + C32292 * C1646 - C15424 * C1643) *
               C20327 +
           (C32324 * C379 - C15421 * C360 + C32320 * C696 - C15422 * C687 +
            C32310 * C1140 - C15423 * C1123 + C32292 * C1652 - C15424 * C1647) *
               C32097) *
              C31911 * C31970 * C31956 * C110 +
          ((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
            C15432) *
               C20326 +
           (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
            C15440) *
               C20324 +
           (C15930 - C15931 + C15932 - C15933 + C15934 - C15935 + C15936 -
            C15937) *
               C20327 +
           (C15938 - C15939 + C15940 - C15941 + C15942 - C15943 + C15944 -
            C15945) *
               C32097) *
              C31911 * C31970 * C31956 * C111 +
          ((C15443 - C15442 + C15445 - C15444 + C15447 - C15446 + C15449 -
            C15448) *
               C20326 +
           (C15451 - C15450 + C15453 - C15452 + C15455 - C15454 + C15457 -
            C15456) *
               C20324 +
           (C32324 * C363 - C15421 * C351 + C32320 * C690 - C15422 * C683 +
            C32310 * C1126 - C15423 * C1115 + C32292 * C1650 - C15424 * C1645) *
               C20327 +
           (C32324 * C381 - C15421 * C364 + C32320 * C698 - C15422 * C691 +
            C32310 * C1142 - C15423 * C1127 + C32292 * C1654 - C15424 * C1651) *
               C32097) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
            C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
               C20326 +
           (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
            C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
               C20324 +
           (C32324 * C359 - C15421 * C349 + C32320 * C686 - C15422 * C681 +
            C32310 * C1122 - C15423 * C1113 + C32292 * C1646 - C15424 * C1643) *
               C20327 +
           (C32324 * C379 - C15421 * C360 + C32320 * C696 - C15422 * C687 +
            C32310 * C1140 - C15423 * C1123 + C32292 * C1652 - C15424 * C1647) *
               C32097) *
              C31911 * C31970 * C240 +
          ((C15421 * C244 - C32324 * C254 + C15422 * C249 - C32320 * C264 +
            C15423 * C979 - C32310 * C985 + C15424 * C982 - C32292 * C991) *
               C20326 +
           (C15421 * C255 - C32324 * C274 + C15422 * C265 - C32320 * C279 +
            C15423 * C986 - C32310 * C997 + C15424 * C992 - C32292 * C1000) *
               C20324 +
           (C15421 * C681 - C32324 * C686 + C15422 * C1113 - C32320 * C1122 +
            C15423 * C1643 - C32310 * C1646 + C15424 * C6244 - C32292 * C6247) *
               C20327 +
           (C15421 * C687 - C32324 * C696 + C15422 * C1123 - C32320 * C1140 +
            C15423 * C1647 - C32310 * C1652 + C15424 * C6248 - C32292 * C6253) *
               C32097) *
              C31911 * C31970 * C241 +
          ((C32324 * C264 - C15421 * C249 + C32320 * C985 - C15422 * C979 +
            C32310 * C991 - C15423 * C982 + C32292 * C6176 - C15424 * C6174) *
               C20326 +
           (C32324 * C279 - C15421 * C265 + C32320 * C997 - C15422 * C986 +
            C32310 * C1000 - C15423 * C992 + C32292 * C6180 - C15424 * C6177) *
               C20324 +
           (C32324 * C1122 - C15421 * C1113 + C32320 * C1646 - C15422 * C1643 +
            C32310 * C6247 - C15423 * C6244 + C32292 * C6511 - C15424 * C6510) *
               C20327 +
           (C32324 * C1140 - C15421 * C1123 + C32320 * C1652 - C15422 * C1647 +
            C32310 * C6253 - C15423 * C6248 + C32292 * C6513 - C15424 * C6512) *
               C32097) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
            C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
               C20326 +
           (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
            C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
               C20324 +
           (C26826 - C26827 + C26828 - C26829 + C26830 - C26831 + C26832 -
            C26833) *
               C20327 +
           (C26834 - C26835 + C26836 - C26837 + C26838 - C26839 + C26840 -
            C26841) *
               C32097) *
              C31911 * C346 +
          ((C26827 - C26826 + C26829 - C26828 + C26831 - C26830 + C26833 -
            C26832) *
               C20326 +
           (C26835 - C26834 + C26837 - C26836 + C26839 - C26838 + C26841 -
            C26840) *
               C20324 +
           (C26842 - C26843 + C26844 - C26845 + C26846 - C26847 + C26848 -
            C26849) *
               C20327 +
           (C26850 - C26851 + C26852 - C26853 + C26854 - C26855 + C26856 -
            C26857) *
               C32097) *
              C31911 * C347 +
          ((C26843 - C26842 + C26845 - C26844 + C26847 - C26846 + C26849 -
            C26848) *
               C20326 +
           (C26851 - C26850 + C26853 - C26852 + C26855 - C26854 + C26857 -
            C26856) *
               C20324 +
           (C32324 * C2024 - C15421 * C2018 + C32320 * C2541 - C15422 * C2538 +
            C32310 * C6847 - C15423 * C6844 + C32292 * C7361 - C15424 * C7360) *
               C20327 +
           (C32324 * C2036 - C15421 * C2025 + C32320 * C2547 - C15422 * C2542 +
            C32310 * C6853 - C15423 * C6848 + C32292 * C7363 - C15424 * C7362) *
               C32097) *
              C31911 * C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
               C22082 +
           (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
               C32325 +
           (C16530 - C16531 + C16532 - C16533) * C22083 +
           (C16534 - C16535 + C16536 - C16537) * C32322 + C16572 * C22084 +
           C16573 * C32313 + (C16551 - C16550 + C16553 - C16552) * C22085 +
           (C16555 - C16554 + C16557 - C16556) * C32298) *
              C31911 * C31970 * C31956 * C110 +
          ((C14635 - C14634 + C14637 - C14636) * C22082 +
           (C14639 - C14638 + C14641 - C14640) * C32325 + C16992 * C22083 +
           C16993 * C32322 + C16994 * C22084 + C16995 * C32313 +
           (C16558 - C16559 + C16560 - C16561) * C22085 +
           (C16562 - C16563 + C16564 - C16565) * C32298) *
              C31911 * C31970 * C31956 * C111 +
          (C14674 * C22082 + C14675 * C32325 + C18233 * C22083 +
           C18234 * C32322 + (C16231 - C16230 + C16233 - C16232) * C22084 +
           (C16235 - C16234 + C16237 - C16236) * C32313 +
           (C14625 * C2028 - C14631 * C2020 + C32055 * C2545 - C14632 * C2540) *
               C22085 +
           (C14625 * C2038 - C14631 * C2029 + C32055 * C2549 - C14632 * C2546) *
               C32298) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
               C22082 +
           (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
               C32325 +
           (C16530 - C16531 + C16532 - C16533) * C22083 +
           (C16534 - C16535 + C16536 - C16537) * C32322 + C16572 * C22084 +
           C16573 * C32313 + (C16551 - C16550 + C16553 - C16552) * C22085 +
           (C16555 - C16554 + C16557 - C16556) * C32298) *
              C31911 * C31970 * C240 +
          ((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
               C22082 +
           (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
               C32325 +
           (C17190 - C17191 + C17192 - C17193) * C22083 +
           (C17194 - C17195 + C17196 - C17197) * C32322 +
           (C17198 - C17199 + C17200 - C17201) * C22084 +
           (C17202 - C17203 + C17204 - C17205) * C32313 +
           (C14631 * C2538 - C14625 * C2541 + C14632 * C6844 - C32055 * C6847) *
               C22085 +
           (C14631 * C2542 - C14625 * C2547 + C14632 * C6848 - C32055 * C6853) *
               C32298) *
              C31911 * C31970 * C241 +
          ((C14625 * C264 - C14631 * C249 + C32055 * C985 - C14632 * C979) *
               C22082 +
           (C14625 * C279 - C14631 * C265 + C32055 * C997 - C14632 * C986) *
               C32325 +
           (C14625 * C1122 - C14631 * C1113 + C32055 * C1646 - C14632 * C1643) *
               C22083 +
           (C14625 * C1140 - C14631 * C1123 + C32055 * C1652 - C14632 * C1647) *
               C32322 +
           (C14625 * C1129 - C14631 * C1117 + C32055 * C6249 - C14632 * C6245) *
               C22084 +
           (C14625 * C1144 - C14631 * C1131 + C32055 * C6254 - C14632 * C6251) *
               C32313 +
           (C14625 * C6847 - C14631 * C6844 + C32055 * C7361 - C14632 * C7360) *
               C22085 +
           (C14625 * C6853 - C14631 * C6848 + C32055 * C7363 - C14632 * C7362) *
               C32298) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
               C22082 +
           (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
               C32325 +
           (C16530 - C16531 + C16532 - C16533) * C22083 +
           (C16534 - C16535 + C16536 - C16537) * C32322 + C16572 * C22084 +
           C16573 * C32313 + C27570 * C22085 + C27571 * C32298) *
              C31911 * C346 +
          ((C16531 - C16530 + C16533 - C16532) * C22082 +
           (C16535 - C16534 + C16537 - C16536) * C32325 +
           (C16539 - C16538 + C16541 - C16540) * C22083 +
           (C16543 - C16542 + C16545 - C16544) * C32322 +
           (C16550 - C16551 + C16552 - C16553) * C22084 +
           (C16554 - C16555 + C16556 - C16557) * C32313 +
           (C27562 - C27563 + C27564 - C27565) * C22085 +
           (C27566 - C27567 + C27568 - C27569) * C32298) *
              C31911 * C347 +
          (C16572 * C22082 + C16573 * C32325 + C27570 * C22083 +
           C27571 * C32322 + (C27563 - C27562 + C27565 - C27564) * C22084 +
           (C27567 - C27566 + C27569 - C27568) * C32313 +
           (C14625 * C11763 - C14631 * C11761 + C32055 * C12040 -
            C14632 * C12039) *
               C22085 +
           (C14625 * C11767 - C14631 * C11764 + C32055 * C12042 -
            C14632 * C12041) *
               C32298) *
              C31911 * C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
             C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
                C20326 +
            (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
             C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
                C20324 +
            (C26826 - C26827 + C26828 - C26829 + C26830 - C26831 + C26832 -
             C26833) *
                C20327 +
            (C26834 - C26835 + C26836 - C26837 + C26838 - C26839 + C26840 -
             C26841) *
                C32097) *
               C31911 * C577 +
           ((C26827 - C26826 + C26829 - C26828 + C26831 - C26830 + C26833 -
             C26832) *
                C20326 +
            (C26835 - C26834 + C26837 - C26836 + C26839 - C26838 + C26841 -
             C26840) *
                C20324 +
            (C26842 - C26843 + C26844 - C26845 + C26846 - C26847 + C26848 -
             C26849) *
                C20327 +
            (C26850 - C26851 + C26852 - C26853 + C26854 - C26855 + C26856 -
             C26857) *
                C32097) *
               C31911 * C578) *
              C31956 * C473 +
          (((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
             C15432) *
                C20326 +
            (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
             C15440) *
                C20324 +
            (C15930 - C15931 + C15932 - C15933 + C15934 - C15935 + C15936 -
             C15937) *
                C20327 +
            (C15938 - C15939 + C15940 - C15941 + C15942 - C15943 + C15944 -
             C15945) *
                C32097) *
               C31911 * C577 +
           ((C15931 - C15930 + C15933 - C15932 + C15935 - C15934 + C15937 -
             C15936) *
                C20326 +
            (C15939 - C15938 + C15941 - C15940 + C15943 - C15942 + C15945 -
             C15944) *
                C20324 +
            (C32324 * C371 - C15421 * C355 + C32320 * C1132 - C15422 * C1118 +
             C32310 * C1133 - C15423 * C1119 + C32292 * C7049 -
             C15424 * C7048) *
                C20327 +
            (C32324 * C385 - C15421 * C372 + C32320 * C1145 - C15422 * C1134 +
             C32310 * C1146 - C15423 * C1135 + C32292 * C7051 -
             C15424 * C7050) *
                C32097) *
               C31911 * C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                 C20326 +
             (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                 C20324 +
             (C16530 - C16531 + C16532 - C16533) * C20327 +
             (C16534 - C16535 + C16536 - C16537) * C32097) *
                C32314 +
            ((C14634 - C14635 + C14636 - C14637) * C20326 +
             (C14638 - C14639 + C14640 - C14641) * C20324 + C16990 * C20327 +
             C16991 * C32097) *
                C32301 +
            C25657 * C32271) *
               C577 +
           (((C16531 - C16530 + C16533 - C16532) * C20326 +
             (C16535 - C16534 + C16537 - C16536) * C20324 +
             (C16539 - C16538 + C16541 - C16540) * C20327 +
             (C16543 - C16542 + C16545 - C16544) * C32097) *
                C32314 +
            (C16992 * C20326 + C16993 * C20324 + C16994 * C20327 +
             C16995 * C32097) *
                C32301 +
            (C18931 * C20326 + C18932 * C20324 +
             (C16230 - C16231 + C16232 - C16233) * C20327 +
             (C16234 - C16235 + C16236 - C16237) * C32097) *
                C32271) *
               C578) *
              C31956 * C473 +
          ((((C14635 - C14634 + C14637 - C14636) * C20326 +
             (C14639 - C14638 + C14641 - C14640) * C20324 + C16992 * C20327 +
             C16993 * C32097) *
                C32314 +
            ((C14643 - C14642 + C14645 - C14644) * C20326 +
             (C14647 - C14646 + C14649 - C14648) * C20324 + C18931 * C20327 +
             C18932 * C32097) *
                C32301 +
            ((C14651 - C14650 + C14653 - C14652) * C20326 +
             (C14655 - C14654 + C14657 - C14656) * C20324 +
             (C15180 - C15181 + C15182 - C15183) * C20327 +
             (C15184 - C15185 + C15186 - C15187) * C32097) *
                C32271) *
               C577 +
           ((C16990 * C20326 + C16991 * C20324 + C16570 * C20327 +
             C16571 * C32097) *
                C32314 +
            (C18233 * C20326 + C18234 * C20324 +
             (C16231 - C16230 + C16233 - C16232) * C20327 +
             (C16235 - C16234 + C16237 - C16236) * C32097) *
                C32301 +
            ((C15181 - C15180 + C15183 - C15182) * C20326 +
             (C15185 - C15184 + C15187 - C15186) * C20324 +
             (C14625 * C375 - C14631 * C357 + C32055 * C2213 - C14632 * C2212) *
                 C20327 +
             (C14625 * C387 - C14631 * C376 + C32055 * C2215 - C14632 * C2214) *
                 C32097) *
                C32271) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C22082 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C32325 +
            (C16530 - C16531 + C16532 - C16533) * C22083 +
            (C16534 - C16535 + C16536 - C16537) * C32322 + C16572 * C22084 +
            C16573 * C32313 + C27570 * C22085 + C27571 * C32298) *
               C31911 * C577 +
           ((C16531 - C16530 + C16533 - C16532) * C22082 +
            (C16535 - C16534 + C16537 - C16536) * C32325 +
            (C16539 - C16538 + C16541 - C16540) * C22083 +
            (C16543 - C16542 + C16545 - C16544) * C32322 +
            (C16550 - C16551 + C16552 - C16553) * C22084 +
            (C16554 - C16555 + C16556 - C16557) * C32313 +
            (C27562 - C27563 + C27564 - C27565) * C22085 +
            (C27566 - C27567 + C27568 - C27569) * C32298) *
               C31911 * C578) *
              C31956 * C473 +
          (((C14635 - C14634 + C14637 - C14636) * C22082 +
            (C14639 - C14638 + C14641 - C14640) * C32325 + C16992 * C22083 +
            C16993 * C32322 + C16994 * C22084 + C16995 * C32313 +
            (C16558 - C16559 + C16560 - C16561) * C22085 +
            (C16562 - C16563 + C16564 - C16565) * C32298) *
               C31911 * C577 +
           (C16990 * C22082 + C16991 * C32325 + C16570 * C22083 +
            C16571 * C32322 + (C16559 - C16558 + C16561 - C16560) * C22084 +
            (C16563 - C16562 + C16565 - C16564) * C32313 +
            (C14625 * C2032 - C14631 * C2022 + C32055 * C11864 -
             C14632 * C11863) *
                C22085 +
            (C14625 * C2040 - C14631 * C2033 + C32055 * C11866 -
             C14632 * C11865) *
                C32298) *
               C31911 * C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C20326 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C20324 +
            (C16530 - C16531 + C16532 - C16533) * C20327 +
            (C16534 - C16535 + C16536 - C16537) * C32097) *
               C32314 +
           ((C14634 - C14635 + C14636 - C14637) * C20326 +
            (C14638 - C14639 + C14640 - C14641) * C20324 + C16990 * C20327 +
            C16991 * C32097) *
               C32301 +
           C25657 * C32271) *
              C31970 * C240 +
          (((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                C20326 +
            (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                C20324 +
            (C17190 - C17191 + C17192 - C17193) * C20327 +
            (C17194 - C17195 + C17196 - C17197) * C32097) *
               C32314 +
           ((C15010 - C15011 + C15012 - C15013) * C20326 +
            (C15014 - C15015 + C15016 - C15017) * C20324 +
            (C16768 - C16769 + C16770 - C16771) * C20327 +
            (C16772 - C16773 + C16774 - C16775) * C32097) *
               C32301 +
           ((C15018 - C15019 + C15020 - C15021) * C20326 +
            (C15022 - C15023 + C15024 - C15025) * C20324 +
            (C18725 - C18726 + C18727 - C18728) * C20327 +
            (C18729 - C18730 + C18731 - C18732) * C32097) *
               C32271) *
              C31970 * C241 +
          (((C14625 * C264 - C14631 * C249 + C32055 * C985 - C14632 * C979) *
                C20326 +
            (C14625 * C279 - C14631 * C265 + C32055 * C997 - C14632 * C986) *
                C20324 +
            (C14625 * C1122 - C14631 * C1113 + C32055 * C1646 -
             C14632 * C1643) *
                C20327 +
            (C14625 * C1140 - C14631 * C1123 + C32055 * C1652 -
             C14632 * C1647) *
                C32097) *
               C32314 +
           ((C14625 * C266 - C14631 * C250 + C32055 * C987 - C14632 * C980) *
                C20326 +
            (C14625 * C280 - C14631 * C267 + C32055 * C998 - C14632 * C988) *
                C20324 +
            (C14625 * C1124 - C14631 * C1114 + C32055 * C1648 -
             C14632 * C1644) *
                C20327 +
            (C14625 * C1141 - C14631 * C1125 + C32055 * C1653 -
             C14632 * C1649) *
                C32097) *
               C32301 +
           ((C14625 * C268 - C14631 * C251 + C32055 * C989 - C14632 * C981) *
                C20326 +
            (C14625 * C281 - C14631 * C269 + C32055 * C999 - C14632 * C990) *
                C20324 +
            (C14625 * C1126 - C14631 * C1115 + C32055 * C1650 -
             C14632 * C1645) *
                C20327 +
            (C14625 * C1142 - C14631 * C1127 + C32055 * C1654 -
             C14632 * C1651) *
                C32097) *
               C32271) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C20326 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C20324 +
            (C16530 - C16531 + C16532 - C16533) * C20327 +
            (C16534 - C16535 + C16536 - C16537) * C32097) *
               C32314 +
           ((C14634 - C14635 + C14636 - C14637) * C20326 +
            (C14638 - C14639 + C14640 - C14641) * C20324 + C16990 * C20327 +
            C16991 * C32097) *
               C32301 +
           C25657 * C32271) *
              C31970 * C31956 * C110 +
          (((C14635 - C14634 + C14637 - C14636) * C20326 +
            (C14639 - C14638 + C14641 - C14640) * C20324 + C16992 * C20327 +
            C16993 * C32097) *
               C32314 +
           ((C14643 - C14642 + C14645 - C14644) * C20326 +
            (C14647 - C14646 + C14649 - C14648) * C20324 + C18931 * C20327 +
            C18932 * C32097) *
               C32301 +
           ((C14651 - C14650 + C14653 - C14652) * C20326 +
            (C14655 - C14654 + C14657 - C14656) * C20324 +
            (C15180 - C15181 + C15182 - C15183) * C20327 +
            (C15184 - C15185 + C15186 - C15187) * C32097) *
               C32271) *
              C31970 * C31956 * C111 +
          (C25657 * C32314 +
           (C14676 * C20326 + C14677 * C20324 +
            (C15181 - C15180 + C15183 - C15182) * C20327 +
            (C15185 - C15184 + C15187 - C15186) * C32097) *
               C32301 +
           ((C14659 - C14658 + C14661 - C14660) * C20326 +
            (C14663 - C14662 + C14665 - C14664) * C20324 +
            (C14625 * C367 - C14631 * C353 + C32055 * C694 - C14632 * C685) *
                C20327 +
            (C14625 * C383 - C14631 * C368 + C32055 * C700 - C14632 * C695) *
                C32097) *
               C32271) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
            C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
               C20326 +
           (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
            C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
               C20324 +
           (C32324 * C359 - C15421 * C349 + C32320 * C686 - C15422 * C681 +
            C32310 * C1122 - C15423 * C1113 + C32292 * C1646 - C15424 * C1643) *
               C20327 +
           (C32324 * C379 - C15421 * C360 + C32320 * C696 - C15422 * C687 +
            C32310 * C1140 - C15423 * C1123 + C32292 * C1652 - C15424 * C1647) *
               C32097) *
              C31911 * C31970 * C31956 * C110 +
          ((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
            C15432) *
               C20326 +
           (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
            C15440) *
               C20324 +
           (C15930 - C15931 + C15932 - C15933 + C15934 - C15935 + C15936 -
            C15937) *
               C20327 +
           (C15938 - C15939 + C15940 - C15941 + C15942 - C15943 + C15944 -
            C15945) *
               C32097) *
              C31911 * C31970 * C31956 * C111 +
          ((C15443 - C15442 + C15445 - C15444 + C15447 - C15446 + C15449 -
            C15448) *
               C20326 +
           (C15451 - C15450 + C15453 - C15452 + C15455 - C15454 + C15457 -
            C15456) *
               C20324 +
           (C32324 * C363 - C15421 * C351 + C32320 * C690 - C15422 * C683 +
            C32310 * C1126 - C15423 * C1115 + C32292 * C1650 - C15424 * C1645) *
               C20327 +
           (C32324 * C381 - C15421 * C364 + C32320 * C698 - C15422 * C691 +
            C32310 * C1142 - C15423 * C1127 + C32292 * C1654 - C15424 * C1651) *
               C32097) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
            C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
               C20326 +
           (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
            C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
               C20324 +
           (C32324 * C359 - C15421 * C349 + C32320 * C686 - C15422 * C681 +
            C32310 * C1122 - C15423 * C1113 + C32292 * C1646 - C15424 * C1643) *
               C20327 +
           (C32324 * C379 - C15421 * C360 + C32320 * C696 - C15422 * C687 +
            C32310 * C1140 - C15423 * C1123 + C32292 * C1652 - C15424 * C1647) *
               C32097) *
              C31911 * C31970 * C240 +
          ((C15421 * C244 - C32324 * C254 + C15422 * C249 - C32320 * C264 +
            C15423 * C979 - C32310 * C985 + C15424 * C982 - C32292 * C991) *
               C20326 +
           (C15421 * C255 - C32324 * C274 + C15422 * C265 - C32320 * C279 +
            C15423 * C986 - C32310 * C997 + C15424 * C992 - C32292 * C1000) *
               C20324 +
           (C15421 * C681 - C32324 * C686 + C15422 * C1113 - C32320 * C1122 +
            C15423 * C1643 - C32310 * C1646 + C15424 * C6244 - C32292 * C6247) *
               C20327 +
           (C15421 * C687 - C32324 * C696 + C15422 * C1123 - C32320 * C1140 +
            C15423 * C1647 - C32310 * C1652 + C15424 * C6248 - C32292 * C6253) *
               C32097) *
              C31911 * C31970 * C241 +
          ((C32324 * C264 - C15421 * C249 + C32320 * C985 - C15422 * C979 +
            C32310 * C991 - C15423 * C982 + C32292 * C6176 - C15424 * C6174) *
               C20326 +
           (C32324 * C279 - C15421 * C265 + C32320 * C997 - C15422 * C986 +
            C32310 * C1000 - C15423 * C992 + C32292 * C6180 - C15424 * C6177) *
               C20324 +
           (C32324 * C1122 - C15421 * C1113 + C32320 * C1646 - C15422 * C1643 +
            C32310 * C6247 - C15423 * C6244 + C32292 * C6511 - C15424 * C6510) *
               C20327 +
           (C32324 * C1140 - C15421 * C1123 + C32320 * C1652 - C15422 * C1647 +
            C32310 * C6253 - C15423 * C6248 + C32292 * C6513 - C15424 * C6512) *
               C32097) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
               C22082 +
           (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
               C32325 +
           (C16530 - C16531 + C16532 - C16533) * C22083 +
           (C16534 - C16535 + C16536 - C16537) * C32322 + C16572 * C22084 +
           C16573 * C32313 + (C16551 - C16550 + C16553 - C16552) * C22085 +
           (C16555 - C16554 + C16557 - C16556) * C32298) *
              C31911 * C31970 * C31956 * C110 +
          ((C14635 - C14634 + C14637 - C14636) * C22082 +
           (C14639 - C14638 + C14641 - C14640) * C32325 + C16992 * C22083 +
           C16993 * C32322 + C16994 * C22084 + C16995 * C32313 +
           (C16558 - C16559 + C16560 - C16561) * C22085 +
           (C16562 - C16563 + C16564 - C16565) * C32298) *
              C31911 * C31970 * C31956 * C111 +
          (C14674 * C22082 + C14675 * C32325 + C18233 * C22083 +
           C18234 * C32322 + (C16231 - C16230 + C16233 - C16232) * C22084 +
           (C16235 - C16234 + C16237 - C16236) * C32313 +
           (C14625 * C2028 - C14631 * C2020 + C32055 * C2545 - C14632 * C2540) *
               C22085 +
           (C14625 * C2038 - C14631 * C2029 + C32055 * C2549 - C14632 * C2546) *
               C32298) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
               C22082 +
           (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
               C32325 +
           (C16530 - C16531 + C16532 - C16533) * C22083 +
           (C16534 - C16535 + C16536 - C16537) * C32322 + C16572 * C22084 +
           C16573 * C32313 + (C16551 - C16550 + C16553 - C16552) * C22085 +
           (C16555 - C16554 + C16557 - C16556) * C32298) *
              C31911 * C31970 * C240 +
          ((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
               C22082 +
           (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
               C32325 +
           (C17190 - C17191 + C17192 - C17193) * C22083 +
           (C17194 - C17195 + C17196 - C17197) * C32322 +
           (C17198 - C17199 + C17200 - C17201) * C22084 +
           (C17202 - C17203 + C17204 - C17205) * C32313 +
           (C14631 * C2538 - C14625 * C2541 + C14632 * C6844 - C32055 * C6847) *
               C22085 +
           (C14631 * C2542 - C14625 * C2547 + C14632 * C6848 - C32055 * C6853) *
               C32298) *
              C31911 * C31970 * C241 +
          ((C14625 * C264 - C14631 * C249 + C32055 * C985 - C14632 * C979) *
               C22082 +
           (C14625 * C279 - C14631 * C265 + C32055 * C997 - C14632 * C986) *
               C32325 +
           (C14625 * C1122 - C14631 * C1113 + C32055 * C1646 - C14632 * C1643) *
               C22083 +
           (C14625 * C1140 - C14631 * C1123 + C32055 * C1652 - C14632 * C1647) *
               C32322 +
           (C14625 * C1129 - C14631 * C1117 + C32055 * C6249 - C14632 * C6245) *
               C22084 +
           (C14625 * C1144 - C14631 * C1131 + C32055 * C6254 - C14632 * C6251) *
               C32313 +
           (C14625 * C6847 - C14631 * C6844 + C32055 * C7361 - C14632 * C7360) *
               C22085 +
           (C14625 * C6853 - C14631 * C6848 + C32055 * C7363 - C14632 * C7362) *
               C32298) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                 C31010 +
             (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                 C32093 +
             (C16530 - C16531 + C16532 - C16533) * C31002 +
             (C16534 - C16535 + C16536 - C16537) * C32100 + C16572 * C31016 +
             C16573 * C23811) *
                C32232 +
            ((C14634 - C14635 + C14636 - C14637) * C31010 +
             (C14638 - C14639 + C14640 - C14641) * C32093 + C16990 * C31002 +
             C16991 * C32100 + C16570 * C31016 + C16571 * C23811) *
                C31921) *
               C31970 * C471 +
           (((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                 C31010 +
             (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                 C32093 +
             (C17190 - C17191 + C17192 - C17193) * C31002 +
             (C17194 - C17195 + C17196 - C17197) * C32100 +
             (C17198 - C17199 + C17200 - C17201) * C31016 +
             (C17202 - C17203 + C17204 - C17205) * C23811) *
                C32232 +
            ((C15010 - C15011 + C15012 - C15013) * C31010 +
             (C15014 - C15015 + C15016 - C15017) * C32093 +
             (C16768 - C16769 + C16770 - C16771) * C31002 +
             (C16772 - C16773 + C16774 - C16775) * C32100 +
             (C16776 - C16777 + C16778 - C16779) * C31016 +
             (C16780 - C16781 + C16782 - C16783) * C23811) *
                C31921) *
               C31970 * C472) *
              C473 +
          ((((C14635 - C14634 + C14637 - C14636) * C31010 +
             (C14639 - C14638 + C14641 - C14640) * C32093 + C16992 * C31002 +
             C16993 * C32100 + C16994 * C31016 + C16995 * C23811) *
                C32232 +
            ((C14643 - C14642 + C14645 - C14644) * C31010 +
             (C14647 - C14646 + C14649 - C14648) * C32093 + C18931 * C31002 +
             C18932 * C32100 + (C16230 - C16231 + C16232 - C16233) * C31016 +
             (C16234 - C16235 + C16236 - C16237) * C23811) *
                C31921) *
               C31970 * C471 +
           (((C15011 - C15010 + C15013 - C15012) * C31010 +
             (C15015 - C15014 + C15017 - C15016) * C32093 +
             (C16769 - C16768 + C16771 - C16770) * C31002 +
             (C16773 - C16772 + C16775 - C16774) * C32100 +
             (C16777 - C16776 + C16779 - C16778) * C31016 +
             (C16781 - C16780 + C16783 - C16782) * C23811) *
                C32232 +
            ((C15019 - C15018 + C15021 - C15020) * C31010 +
             (C15023 - C15022 + C15025 - C15024) * C32093 +
             (C18726 - C18725 + C18728 - C18727) * C31002 +
             (C18730 - C18729 + C18732 - C18731) * C32100 +
             (C14625 * C1136 - C14631 * C1120 + C32055 * C1137 -
              C14632 * C1121) *
                 C31016 +
             (C14625 * C1147 - C14631 * C1138 + C32055 * C1148 -
              C14632 * C1139) *
                 C23811) *
                C31921) *
               C31970 * C472) *
              C474)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                 C31010 +
             (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                 C32093 +
             (C16530 - C16531 + C16532 - C16533) * C31002 +
             (C16534 - C16535 + C16536 - C16537) * C32100 + C16572 * C31016 +
             C16573 * C23811) *
                C32232 +
            ((C14634 - C14635 + C14636 - C14637) * C31010 +
             (C14638 - C14639 + C14640 - C14641) * C32093 + C16990 * C31002 +
             C16991 * C32100 + C16570 * C31016 + C16571 * C23811) *
                C31921) *
               C577 +
           (((C16531 - C16530 + C16533 - C16532) * C31010 +
             (C16535 - C16534 + C16537 - C16536) * C32093 +
             (C16539 - C16538 + C16541 - C16540) * C31002 +
             (C16543 - C16542 + C16545 - C16544) * C32100 +
             (C16550 - C16551 + C16552 - C16553) * C31016 +
             (C16554 - C16555 + C16556 - C16557) * C23811) *
                C32232 +
            (C16992 * C31010 + C16993 * C32093 + C16994 * C31002 +
             C16995 * C32100 + (C16558 - C16559 + C16560 - C16561) * C31016 +
             (C16562 - C16563 + C16564 - C16565) * C23811) *
                C31921) *
               C578) *
              C471 +
          ((((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                 C31010 +
             (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                 C32093 +
             (C17190 - C17191 + C17192 - C17193) * C31002 +
             (C17194 - C17195 + C17196 - C17197) * C32100 +
             (C17198 - C17199 + C17200 - C17201) * C31016 +
             (C17202 - C17203 + C17204 - C17205) * C23811) *
                C32232 +
            ((C15010 - C15011 + C15012 - C15013) * C31010 +
             (C15014 - C15015 + C15016 - C15017) * C32093 +
             (C16768 - C16769 + C16770 - C16771) * C31002 +
             (C16772 - C16773 + C16774 - C16775) * C32100 +
             (C16776 - C16777 + C16778 - C16779) * C31016 +
             (C16780 - C16781 + C16782 - C16783) * C23811) *
                C31921) *
               C577 +
           (((C17191 - C17190 + C17193 - C17192) * C31010 +
             (C17195 - C17194 + C17197 - C17196) * C32093 +
             (C17199 - C17198 + C17201 - C17200) * C31002 +
             (C17203 - C17202 + C17205 - C17204) * C32100 +
             (C27963 - C27962 + C27965 - C27964) * C31016 +
             (C27967 - C27966 + C27969 - C27968) * C23811) *
                C32232 +
            ((C16769 - C16768 + C16771 - C16770) * C31010 +
             (C16773 - C16772 + C16775 - C16774) * C32093 +
             (C16777 - C16776 + C16779 - C16778) * C31002 +
             (C16781 - C16780 + C16783 - C16782) * C32100 +
             (C14625 * C2543 - C14631 * C2539 + C32055 * C7199 -
              C14632 * C7198) *
                 C31016 +
             (C14625 * C2548 - C14631 * C2544 + C32055 * C7201 -
              C14632 * C7200) *
                 C23811) *
                C31921) *
               C578) *
              C472) *
         C31944) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C31010 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C32093 +
            (C16530 - C16531 + C16532 - C16533) * C31002 +
            (C16534 - C16535 + C16536 - C16537) * C32100 + C16572 * C31016 +
            C16573 * C23811) *
               C32232 +
           ((C14634 - C14635 + C14636 - C14637) * C31010 +
            (C14638 - C14639 + C14640 - C14641) * C32093 + C16990 * C31002 +
            C16991 * C32100 + C16570 * C31016 + C16571 * C23811) *
               C31921) *
              C31970 * C240 +
          (((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                C31010 +
            (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                C32093 +
            (C17190 - C17191 + C17192 - C17193) * C31002 +
            (C17194 - C17195 + C17196 - C17197) * C32100 +
            (C17198 - C17199 + C17200 - C17201) * C31016 +
            (C17202 - C17203 + C17204 - C17205) * C23811) *
               C32232 +
           ((C15010 - C15011 + C15012 - C15013) * C31010 +
            (C15014 - C15015 + C15016 - C15017) * C32093 +
            (C16768 - C16769 + C16770 - C16771) * C31002 +
            (C16772 - C16773 + C16774 - C16775) * C32100 +
            (C16776 - C16777 + C16778 - C16779) * C31016 +
            (C16780 - C16781 + C16782 - C16783) * C23811) *
               C31921) *
              C31970 * C241 +
          (((C14625 * C264 - C14631 * C249 + C32055 * C985 - C14632 * C979) *
                C31010 +
            (C14625 * C279 - C14631 * C265 + C32055 * C997 - C14632 * C986) *
                C32093 +
            (C14625 * C1122 - C14631 * C1113 + C32055 * C1646 -
             C14632 * C1643) *
                C31002 +
            (C14625 * C1140 - C14631 * C1123 + C32055 * C1652 -
             C14632 * C1647) *
                C32100 +
            (C14625 * C1129 - C14631 * C1117 + C32055 * C6249 -
             C14632 * C6245) *
                C31016 +
            (C14625 * C1144 - C14631 * C1131 + C32055 * C6254 -
             C14632 * C6251) *
                C23811) *
               C32232 +
           ((C14625 * C266 - C14631 * C250 + C32055 * C987 - C14632 * C980) *
                C31010 +
            (C14625 * C280 - C14631 * C267 + C32055 * C998 - C14632 * C988) *
                C32093 +
            (C14625 * C1124 - C14631 * C1114 + C32055 * C1648 -
             C14632 * C1644) *
                C31002 +
            (C14625 * C1141 - C14631 * C1125 + C32055 * C1653 -
             C14632 * C1649) *
                C32100 +
            (C14625 * C1133 - C14631 * C1119 + C32055 * C7049 -
             C14632 * C7048) *
                C31016 +
            (C14625 * C1146 - C14631 * C1135 + C32055 * C7051 -
             C14632 * C7050) *
                C23811) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C31010 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C32093 +
            (C16530 - C16531 + C16532 - C16533) * C31002 +
            (C16534 - C16535 + C16536 - C16537) * C32100 + C16572 * C31016 +
            C16573 * C23811) *
               C32232 +
           ((C14634 - C14635 + C14636 - C14637) * C31010 +
            (C14638 - C14639 + C14640 - C14641) * C32093 + C16990 * C31002 +
            C16991 * C32100 + C16570 * C31016 + C16571 * C23811) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C14635 - C14634 + C14637 - C14636) * C31010 +
            (C14639 - C14638 + C14641 - C14640) * C32093 + C16992 * C31002 +
            C16993 * C32100 + C16994 * C31016 + C16995 * C23811) *
               C32232 +
           ((C14643 - C14642 + C14645 - C14644) * C31010 +
            (C14647 - C14646 + C14649 - C14648) * C32093 + C18931 * C31002 +
            C18932 * C32100 + (C16230 - C16231 + C16232 - C16233) * C31016 +
            (C16234 - C16235 + C16236 - C16237) * C23811) *
               C31921) *
              C31970 * C31956 * C111 +
          ((C14674 * C31010 + C14675 * C32093 + C18233 * C31002 +
            C18234 * C32100 + (C16231 - C16230 + C16233 - C16232) * C31016 +
            (C16235 - C16234 + C16237 - C16236) * C23811) *
               C32232 +
           (C14676 * C31010 + C14677 * C32093 +
            (C15181 - C15180 + C15183 - C15182) * C31002 +
            (C15185 - C15184 + C15187 - C15186) * C32100 +
            (C14625 * C375 - C14631 * C357 + C32055 * C2213 - C14632 * C2212) *
                C31016 +
            (C14625 * C387 - C14631 * C376 + C32055 * C2215 - C14632 * C2214) *
                C23811) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C31010 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C32093 +
            (C16530 - C16531 + C16532 - C16533) * C31002 +
            (C16534 - C16535 + C16536 - C16537) * C32100 + C16572 * C31016 +
            C16573 * C23811) *
               C32232 +
           ((C14634 - C14635 + C14636 - C14637) * C31010 +
            (C14638 - C14639 + C14640 - C14641) * C32093 + C16990 * C31002 +
            C16991 * C32100 + C16570 * C31016 + C16571 * C23811) *
               C31921) *
              C346 +
          (((C16531 - C16530 + C16533 - C16532) * C31010 +
            (C16535 - C16534 + C16537 - C16536) * C32093 +
            (C16539 - C16538 + C16541 - C16540) * C31002 +
            (C16543 - C16542 + C16545 - C16544) * C32100 +
            (C16550 - C16551 + C16552 - C16553) * C31016 +
            (C16554 - C16555 + C16556 - C16557) * C23811) *
               C32232 +
           (C16992 * C31010 + C16993 * C32093 + C16994 * C31002 +
            C16995 * C32100 + (C16558 - C16559 + C16560 - C16561) * C31016 +
            (C16562 - C16563 + C16564 - C16565) * C23811) *
               C31921) *
              C347 +
          ((C16572 * C31010 + C16573 * C32093 + C27570 * C31002 +
            C27571 * C32100 + (C27563 - C27562 + C27565 - C27564) * C31016 +
            (C27567 - C27566 + C27569 - C27568) * C23811) *
               C32232 +
           (C16570 * C31010 + C16571 * C32093 +
            (C16559 - C16558 + C16561 - C16560) * C31002 +
            (C16563 - C16562 + C16565 - C16564) * C32100 +
            (C14625 * C2032 - C14631 * C2022 + C32055 * C11864 -
             C14632 * C11863) *
                C31016 +
            (C14625 * C2040 - C14631 * C2033 + C32055 * C11866 -
             C14632 * C11865) *
                C23811) *
               C31921) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                 C31010 +
             (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                 C32093 +
             (C16530 - C16531 + C16532 - C16533) * C31002 +
             (C16534 - C16535 + C16536 - C16537) * C32100 + C16572 * C31016 +
             C16573 * C23811) *
                C32232 +
            ((C14634 - C14635 + C14636 - C14637) * C31010 +
             (C14638 - C14639 + C14640 - C14641) * C32093 + C16990 * C31002 +
             C16991 * C32100 + C16570 * C31016 + C16571 * C23811) *
                C31921) *
               C577 +
           (((C16531 - C16530 + C16533 - C16532) * C31010 +
             (C16535 - C16534 + C16537 - C16536) * C32093 +
             (C16539 - C16538 + C16541 - C16540) * C31002 +
             (C16543 - C16542 + C16545 - C16544) * C32100 +
             (C16550 - C16551 + C16552 - C16553) * C31016 +
             (C16554 - C16555 + C16556 - C16557) * C23811) *
                C32232 +
            (C16992 * C31010 + C16993 * C32093 + C16994 * C31002 +
             C16995 * C32100 + (C16558 - C16559 + C16560 - C16561) * C31016 +
             (C16562 - C16563 + C16564 - C16565) * C23811) *
                C31921) *
               C578) *
              C31956 * C473 +
          ((((C14635 - C14634 + C14637 - C14636) * C31010 +
             (C14639 - C14638 + C14641 - C14640) * C32093 + C16992 * C31002 +
             C16993 * C32100 + C16994 * C31016 + C16995 * C23811) *
                C32232 +
            ((C14643 - C14642 + C14645 - C14644) * C31010 +
             (C14647 - C14646 + C14649 - C14648) * C32093 + C18931 * C31002 +
             C18932 * C32100 + (C16230 - C16231 + C16232 - C16233) * C31016 +
             (C16234 - C16235 + C16236 - C16237) * C23811) *
                C31921) *
               C577 +
           ((C16990 * C31010 + C16991 * C32093 + C16570 * C31002 +
             C16571 * C32100 + (C16559 - C16558 + C16561 - C16560) * C31016 +
             (C16563 - C16562 + C16565 - C16564) * C23811) *
                C32232 +
            (C18233 * C31010 + C18234 * C32093 +
             (C16231 - C16230 + C16233 - C16232) * C31002 +
             (C16235 - C16234 + C16237 - C16236) * C32100 +
             (C14625 * C2028 - C14631 * C2020 + C32055 * C2545 -
              C14632 * C2540) *
                 C31016 +
             (C14625 * C2038 - C14631 * C2029 + C32055 * C2549 -
              C14632 * C2546) *
                 C23811) *
                C31921) *
               C578) *
              C31956 * C474)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C31010 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C32093 +
            (C16530 - C16531 + C16532 - C16533) * C31002 +
            (C16534 - C16535 + C16536 - C16537) * C32100 + C16572 * C31016 +
            C16573 * C23811) *
               C32232 +
           ((C14634 - C14635 + C14636 - C14637) * C31010 +
            (C14638 - C14639 + C14640 - C14641) * C32093 + C16990 * C31002 +
            C16991 * C32100 + C16570 * C31016 + C16571 * C23811) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C14635 - C14634 + C14637 - C14636) * C31010 +
            (C14639 - C14638 + C14641 - C14640) * C32093 + C16992 * C31002 +
            C16993 * C32100 + C16994 * C31016 + C16995 * C23811) *
               C32232 +
           ((C14643 - C14642 + C14645 - C14644) * C31010 +
            (C14647 - C14646 + C14649 - C14648) * C32093 + C18931 * C31002 +
            C18932 * C32100 + (C16230 - C16231 + C16232 - C16233) * C31016 +
            (C16234 - C16235 + C16236 - C16237) * C23811) *
               C31921) *
              C31970 * C31956 * C111 +
          ((C14674 * C31010 + C14675 * C32093 + C18233 * C31002 +
            C18234 * C32100 + (C16231 - C16230 + C16233 - C16232) * C31016 +
            (C16235 - C16234 + C16237 - C16236) * C23811) *
               C32232 +
           (C14676 * C31010 + C14677 * C32093 +
            (C15181 - C15180 + C15183 - C15182) * C31002 +
            (C15185 - C15184 + C15187 - C15186) * C32100 +
            (C14625 * C375 - C14631 * C357 + C32055 * C2213 - C14632 * C2212) *
                C31016 +
            (C14625 * C387 - C14631 * C376 + C32055 * C2215 - C14632 * C2214) *
                C23811) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C31010 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C32093 +
            (C16530 - C16531 + C16532 - C16533) * C31002 +
            (C16534 - C16535 + C16536 - C16537) * C32100 + C16572 * C31016 +
            C16573 * C23811) *
               C32232 +
           ((C14634 - C14635 + C14636 - C14637) * C31010 +
            (C14638 - C14639 + C14640 - C14641) * C32093 + C16990 * C31002 +
            C16991 * C32100 + C16570 * C31016 + C16571 * C23811) *
               C31921) *
              C31970 * C240 +
          (((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                C31010 +
            (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                C32093 +
            (C17190 - C17191 + C17192 - C17193) * C31002 +
            (C17194 - C17195 + C17196 - C17197) * C32100 +
            (C17198 - C17199 + C17200 - C17201) * C31016 +
            (C17202 - C17203 + C17204 - C17205) * C23811) *
               C32232 +
           ((C15010 - C15011 + C15012 - C15013) * C31010 +
            (C15014 - C15015 + C15016 - C15017) * C32093 +
            (C16768 - C16769 + C16770 - C16771) * C31002 +
            (C16772 - C16773 + C16774 - C16775) * C32100 +
            (C16776 - C16777 + C16778 - C16779) * C31016 +
            (C16780 - C16781 + C16782 - C16783) * C23811) *
               C31921) *
              C31970 * C241 +
          (((C14625 * C264 - C14631 * C249 + C32055 * C985 - C14632 * C979) *
                C31010 +
            (C14625 * C279 - C14631 * C265 + C32055 * C997 - C14632 * C986) *
                C32093 +
            (C14625 * C1122 - C14631 * C1113 + C32055 * C1646 -
             C14632 * C1643) *
                C31002 +
            (C14625 * C1140 - C14631 * C1123 + C32055 * C1652 -
             C14632 * C1647) *
                C32100 +
            (C14625 * C1129 - C14631 * C1117 + C32055 * C6249 -
             C14632 * C6245) *
                C31016 +
            (C14625 * C1144 - C14631 * C1131 + C32055 * C6254 -
             C14632 * C6251) *
                C23811) *
               C32232 +
           ((C14625 * C266 - C14631 * C250 + C32055 * C987 - C14632 * C980) *
                C31010 +
            (C14625 * C280 - C14631 * C267 + C32055 * C998 - C14632 * C988) *
                C32093 +
            (C14625 * C1124 - C14631 * C1114 + C32055 * C1648 -
             C14632 * C1644) *
                C31002 +
            (C14625 * C1141 - C14631 * C1125 + C32055 * C1653 -
             C14632 * C1649) *
                C32100 +
            (C14625 * C1133 - C14631 * C1119 + C32055 * C7049 -
             C14632 * C7048) *
                C31016 +
            (C14625 * C1146 - C14631 * C1135 + C32055 * C7051 -
             C14632 * C7050) *
                C23811) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                 C20326 +
             (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                 C20324 +
             (C16530 - C16531 + C16532 - C16533) * C20327 +
             (C16534 - C16535 + C16536 - C16537) * C32097) *
                C32314 +
            ((C14634 - C14635 + C14636 - C14637) * C20326 +
             (C14638 - C14639 + C14640 - C14641) * C20324 + C16990 * C20327 +
             C16991 * C32097) *
                C32301 +
            C25657 * C32271) *
               C31970 * C471 +
           (((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                 C20326 +
             (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                 C20324 +
             (C17190 - C17191 + C17192 - C17193) * C20327 +
             (C17194 - C17195 + C17196 - C17197) * C32097) *
                C32314 +
            ((C15010 - C15011 + C15012 - C15013) * C20326 +
             (C15014 - C15015 + C15016 - C15017) * C20324 +
             (C16768 - C16769 + C16770 - C16771) * C20327 +
             (C16772 - C16773 + C16774 - C16775) * C32097) *
                C32301 +
            ((C15018 - C15019 + C15020 - C15021) * C20326 +
             (C15022 - C15023 + C15024 - C15025) * C20324 +
             (C18725 - C18726 + C18727 - C18728) * C20327 +
             (C18729 - C18730 + C18731 - C18732) * C32097) *
                C32271) *
               C31970 * C472) *
              C473 +
          ((((C14635 - C14634 + C14637 - C14636) * C20326 +
             (C14639 - C14638 + C14641 - C14640) * C20324 + C16992 * C20327 +
             C16993 * C32097) *
                C32314 +
            ((C14643 - C14642 + C14645 - C14644) * C20326 +
             (C14647 - C14646 + C14649 - C14648) * C20324 + C18931 * C20327 +
             C18932 * C32097) *
                C32301 +
            ((C14651 - C14650 + C14653 - C14652) * C20326 +
             (C14655 - C14654 + C14657 - C14656) * C20324 +
             (C15180 - C15181 + C15182 - C15183) * C20327 +
             (C15184 - C15185 + C15186 - C15187) * C32097) *
                C32271) *
               C31970 * C471 +
           (((C15011 - C15010 + C15013 - C15012) * C20326 +
             (C15015 - C15014 + C15017 - C15016) * C20324 +
             (C16769 - C16768 + C16771 - C16770) * C20327 +
             (C16773 - C16772 + C16775 - C16774) * C32097) *
                C32314 +
            ((C15019 - C15018 + C15021 - C15020) * C20326 +
             (C15023 - C15022 + C15025 - C15024) * C20324 +
             (C18726 - C18725 + C18728 - C18727) * C20327 +
             (C18730 - C18729 + C18732 - C18731) * C32097) *
                C32301 +
            ((C15027 - C15026 + C15029 - C15028) * C20326 +
             (C15031 - C15030 + C15033 - C15032) * C20324 +
             (C14625 * C692 - C14631 * C684 + C32055 * C1470 - C14632 * C1469) *
                 C20327 +
             (C14625 * C699 - C14631 * C693 + C32055 * C1472 - C14632 * C1471) *
                 C32097) *
                C32271) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
             C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
                C20326 +
            (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
             C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
                C20324 +
            (C26826 - C26827 + C26828 - C26829 + C26830 - C26831 + C26832 -
             C26833) *
                C20327 +
            (C26834 - C26835 + C26836 - C26837 + C26838 - C26839 + C26840 -
             C26841) *
                C32097) *
               C31911 * C31970 * C471 +
           ((C15421 * C244 - C32324 * C254 + C15422 * C249 - C32320 * C264 +
             C15423 * C979 - C32310 * C985 + C15424 * C982 - C32292 * C991) *
                C20326 +
            (C15421 * C255 - C32324 * C274 + C15422 * C265 - C32320 * C279 +
             C15423 * C986 - C32310 * C997 + C15424 * C992 - C32292 * C1000) *
                C20324 +
            (C15421 * C681 - C32324 * C686 + C15422 * C1113 - C32320 * C1122 +
             C15423 * C1643 - C32310 * C1646 + C15424 * C6244 -
             C32292 * C6247) *
                C20327 +
            (C15421 * C687 - C32324 * C696 + C15422 * C1123 - C32320 * C1140 +
             C15423 * C1647 - C32310 * C1652 + C15424 * C6248 -
             C32292 * C6253) *
                C32097) *
               C31911 * C31970 * C472) *
              C473 +
          (((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
             C15432) *
                C20326 +
            (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
             C15440) *
                C20324 +
            (C15930 - C15931 + C15932 - C15933 + C15934 - C15935 + C15936 -
             C15937) *
                C20327 +
            (C15938 - C15939 + C15940 - C15941 + C15942 - C15943 + C15944 -
             C15945) *
                C32097) *
               C31911 * C31970 * C471 +
           ((C15785 - C15784 + C15787 - C15786 + C15789 - C15788 + C15791 -
             C15790) *
                C20326 +
            (C15793 - C15792 + C15795 - C15794 + C15797 - C15796 + C15799 -
             C15798) *
                C20324 +
            (C32324 * C688 - C15421 * C682 + C32320 * C1124 - C15422 * C1114 +
             C32310 * C1648 - C15423 * C1644 + C32292 * C6425 -
             C15424 * C6424) *
                C20327 +
            (C32324 * C697 - C15421 * C689 + C32320 * C1141 - C15422 * C1125 +
             C32310 * C1653 - C15423 * C1649 + C32292 * C6427 -
             C15424 * C6426) *
                C32097) *
               C31911 * C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                 C20326 +
             (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                 C20324 +
             (C16530 - C16531 + C16532 - C16533) * C20327 +
             (C16534 - C16535 + C16536 - C16537) * C32097) *
                C32314 +
            ((C14634 - C14635 + C14636 - C14637) * C20326 +
             (C14638 - C14639 + C14640 - C14641) * C20324 + C16990 * C20327 +
             C16991 * C32097) *
                C32301 +
            C25657 * C32271) *
               C577 +
           (((C16531 - C16530 + C16533 - C16532) * C20326 +
             (C16535 - C16534 + C16537 - C16536) * C20324 +
             (C16539 - C16538 + C16541 - C16540) * C20327 +
             (C16543 - C16542 + C16545 - C16544) * C32097) *
                C32314 +
            (C16992 * C20326 + C16993 * C20324 + C16994 * C20327 +
             C16995 * C32097) *
                C32301 +
            (C18931 * C20326 + C18932 * C20324 +
             (C16230 - C16231 + C16232 - C16233) * C20327 +
             (C16234 - C16235 + C16236 - C16237) * C32097) *
                C32271) *
               C578) *
              C471 +
          ((((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                 C20326 +
             (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                 C20324 +
             (C17190 - C17191 + C17192 - C17193) * C20327 +
             (C17194 - C17195 + C17196 - C17197) * C32097) *
                C32314 +
            ((C15010 - C15011 + C15012 - C15013) * C20326 +
             (C15014 - C15015 + C15016 - C15017) * C20324 +
             (C16768 - C16769 + C16770 - C16771) * C20327 +
             (C16772 - C16773 + C16774 - C16775) * C32097) *
                C32301 +
            ((C15018 - C15019 + C15020 - C15021) * C20326 +
             (C15022 - C15023 + C15024 - C15025) * C20324 +
             (C18725 - C18726 + C18727 - C18728) * C20327 +
             (C18729 - C18730 + C18731 - C18732) * C32097) *
                C32271) *
               C577 +
           (((C17191 - C17190 + C17193 - C17192) * C20326 +
             (C17195 - C17194 + C17197 - C17196) * C20324 +
             (C17199 - C17198 + C17201 - C17200) * C20327 +
             (C17203 - C17202 + C17205 - C17204) * C32097) *
                C32314 +
            ((C16769 - C16768 + C16771 - C16770) * C20326 +
             (C16773 - C16772 + C16775 - C16774) * C20324 +
             (C16777 - C16776 + C16779 - C16778) * C20327 +
             (C16781 - C16780 + C16783 - C16782) * C32097) *
                C32301 +
            ((C18726 - C18725 + C18728 - C18727) * C20326 +
             (C18730 - C18729 + C18732 - C18731) * C20324 +
             (C14625 * C1136 - C14631 * C1120 + C32055 * C1137 -
              C14632 * C1121) *
                 C20327 +
             (C14625 * C1147 - C14631 * C1138 + C32055 * C1148 -
              C14632 * C1139) *
                 C32097) *
                C32271) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
             C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
                C20326 +
            (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
             C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
                C20324 +
            (C26826 - C26827 + C26828 - C26829 + C26830 - C26831 + C26832 -
             C26833) *
                C20327 +
            (C26834 - C26835 + C26836 - C26837 + C26838 - C26839 + C26840 -
             C26841) *
                C32097) *
               C31911 * C577 +
           ((C26827 - C26826 + C26829 - C26828 + C26831 - C26830 + C26833 -
             C26832) *
                C20326 +
            (C26835 - C26834 + C26837 - C26836 + C26839 - C26838 + C26841 -
             C26840) *
                C20324 +
            (C26842 - C26843 + C26844 - C26845 + C26846 - C26847 + C26848 -
             C26849) *
                C20327 +
            (C26850 - C26851 + C26852 - C26853 + C26854 - C26855 + C26856 -
             C26857) *
                C32097) *
               C31911 * C578) *
              C471 +
          (((C15421 * C244 - C32324 * C254 + C15422 * C249 - C32320 * C264 +
             C15423 * C979 - C32310 * C985 + C15424 * C982 - C32292 * C991) *
                C20326 +
            (C15421 * C255 - C32324 * C274 + C15422 * C265 - C32320 * C279 +
             C15423 * C986 - C32310 * C997 + C15424 * C992 - C32292 * C1000) *
                C20324 +
            (C27248 - C27249 + C27250 - C27251 + C27252 - C27253 + C27254 -
             C27255) *
                C20327 +
            (C27256 - C27257 + C27258 - C27259 + C27260 - C27261 + C27262 -
             C27263) *
                C32097) *
               C31911 * C577 +
           ((C27249 - C27248 + C27251 - C27250 + C27253 - C27252 + C27255 -
             C27254) *
                C20326 +
            (C27257 - C27256 + C27259 - C27258 + C27261 - C27260 + C27263 -
             C27262) *
                C20324 +
            (C32324 * C1128 - C15421 * C1116 + C32320 * C1129 - C15422 * C1117 +
             C32310 * C6249 - C15423 * C6245 + C32292 * C6250 -
             C15424 * C6246) *
                C20327 +
            (C32324 * C1143 - C15421 * C1130 + C32320 * C1144 - C15422 * C1131 +
             C32310 * C6254 - C15423 * C6251 + C32292 * C6255 -
             C15424 * C6252) *
                C32097) *
               C31911 * C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C20326 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C20324 +
            (C16530 - C16531 + C16532 - C16533) * C20327 +
            (C16534 - C16535 + C16536 - C16537) * C32097) *
               C32314 +
           ((C14634 - C14635 + C14636 - C14637) * C20326 +
            (C14638 - C14639 + C14640 - C14641) * C20324 + C16990 * C20327 +
            C16991 * C32097) *
               C32301 +
           C25657 * C32271) *
              C31970 * C240 +
          (((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                C20326 +
            (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                C20324 +
            (C17190 - C17191 + C17192 - C17193) * C20327 +
            (C17194 - C17195 + C17196 - C17197) * C32097) *
               C32314 +
           ((C15010 - C15011 + C15012 - C15013) * C20326 +
            (C15014 - C15015 + C15016 - C15017) * C20324 +
            (C16768 - C16769 + C16770 - C16771) * C20327 +
            (C16772 - C16773 + C16774 - C16775) * C32097) *
               C32301 +
           ((C15018 - C15019 + C15020 - C15021) * C20326 +
            (C15022 - C15023 + C15024 - C15025) * C20324 +
            (C18725 - C18726 + C18727 - C18728) * C20327 +
            (C18729 - C18730 + C18731 - C18732) * C32097) *
               C32271) *
              C31970 * C241 +
          (((C14625 * C264 - C14631 * C249 + C32055 * C985 - C14632 * C979) *
                C20326 +
            (C14625 * C279 - C14631 * C265 + C32055 * C997 - C14632 * C986) *
                C20324 +
            (C14625 * C1122 - C14631 * C1113 + C32055 * C1646 -
             C14632 * C1643) *
                C20327 +
            (C14625 * C1140 - C14631 * C1123 + C32055 * C1652 -
             C14632 * C1647) *
                C32097) *
               C32314 +
           ((C14625 * C266 - C14631 * C250 + C32055 * C987 - C14632 * C980) *
                C20326 +
            (C14625 * C280 - C14631 * C267 + C32055 * C998 - C14632 * C988) *
                C20324 +
            (C14625 * C1124 - C14631 * C1114 + C32055 * C1648 -
             C14632 * C1644) *
                C20327 +
            (C14625 * C1141 - C14631 * C1125 + C32055 * C1653 -
             C14632 * C1649) *
                C32097) *
               C32301 +
           ((C14625 * C268 - C14631 * C251 + C32055 * C989 - C14632 * C981) *
                C20326 +
            (C14625 * C281 - C14631 * C269 + C32055 * C999 - C14632 * C990) *
                C20324 +
            (C14625 * C1126 - C14631 * C1115 + C32055 * C1650 -
             C14632 * C1645) *
                C20327 +
            (C14625 * C1142 - C14631 * C1127 + C32055 * C1654 -
             C14632 * C1651) *
                C32097) *
               C32271) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C20326 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C20324 +
            (C16530 - C16531 + C16532 - C16533) * C20327 +
            (C16534 - C16535 + C16536 - C16537) * C32097) *
               C32314 +
           ((C14634 - C14635 + C14636 - C14637) * C20326 +
            (C14638 - C14639 + C14640 - C14641) * C20324 + C16990 * C20327 +
            C16991 * C32097) *
               C32301 +
           C25657 * C32271) *
              C31970 * C31956 * C110 +
          (((C14635 - C14634 + C14637 - C14636) * C20326 +
            (C14639 - C14638 + C14641 - C14640) * C20324 + C16992 * C20327 +
            C16993 * C32097) *
               C32314 +
           ((C14643 - C14642 + C14645 - C14644) * C20326 +
            (C14647 - C14646 + C14649 - C14648) * C20324 + C18931 * C20327 +
            C18932 * C32097) *
               C32301 +
           ((C14651 - C14650 + C14653 - C14652) * C20326 +
            (C14655 - C14654 + C14657 - C14656) * C20324 +
            (C15180 - C15181 + C15182 - C15183) * C20327 +
            (C15184 - C15185 + C15186 - C15187) * C32097) *
               C32271) *
              C31970 * C31956 * C111 +
          (C25657 * C32314 +
           (C14676 * C20326 + C14677 * C20324 +
            (C15181 - C15180 + C15183 - C15182) * C20327 +
            (C15185 - C15184 + C15187 - C15186) * C32097) *
               C32301 +
           ((C14659 - C14658 + C14661 - C14660) * C20326 +
            (C14663 - C14662 + C14665 - C14664) * C20324 +
            (C14625 * C367 - C14631 * C353 + C32055 * C694 - C14632 * C685) *
                C20327 +
            (C14625 * C383 - C14631 * C368 + C32055 * C700 - C14632 * C695) *
                C32097) *
               C32271) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C20326 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C20324 +
            (C16530 - C16531 + C16532 - C16533) * C20327 +
            (C16534 - C16535 + C16536 - C16537) * C32097) *
               C32314 +
           ((C14634 - C14635 + C14636 - C14637) * C20326 +
            (C14638 - C14639 + C14640 - C14641) * C20324 + C16990 * C20327 +
            C16991 * C32097) *
               C32301 +
           C25657 * C32271) *
              C346 +
          (((C16531 - C16530 + C16533 - C16532) * C20326 +
            (C16535 - C16534 + C16537 - C16536) * C20324 +
            (C16539 - C16538 + C16541 - C16540) * C20327 +
            (C16543 - C16542 + C16545 - C16544) * C32097) *
               C32314 +
           (C16992 * C20326 + C16993 * C20324 + C16994 * C20327 +
            C16995 * C32097) *
               C32301 +
           (C18931 * C20326 + C18932 * C20324 +
            (C16230 - C16231 + C16232 - C16233) * C20327 +
            (C16234 - C16235 + C16236 - C16237) * C32097) *
               C32271) *
              C347 +
          ((C16572 * C20326 + C16573 * C20324 +
            (C16551 - C16550 + C16553 - C16552) * C20327 +
            (C16555 - C16554 + C16557 - C16556) * C32097) *
               C32314 +
           (C16570 * C20326 + C16571 * C20324 +
            (C16559 - C16558 + C16561 - C16560) * C20327 +
            (C16563 - C16562 + C16565 - C16564) * C32097) *
               C32301 +
           ((C16231 - C16230 + C16233 - C16232) * C20326 +
            (C16235 - C16234 + C16237 - C16236) * C20324 +
            (C14625 * C2028 - C14631 * C2020 + C32055 * C2545 -
             C14632 * C2540) *
                C20327 +
            (C14625 * C2038 - C14631 * C2029 + C32055 * C2549 -
             C14632 * C2546) *
                C32097) *
               C32271) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
            C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
               C20326 +
           (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
            C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
               C20324 +
           (C32324 * C359 - C15421 * C349 + C32320 * C686 - C15422 * C681 +
            C32310 * C1122 - C15423 * C1113 + C32292 * C1646 - C15424 * C1643) *
               C20327 +
           (C32324 * C379 - C15421 * C360 + C32320 * C696 - C15422 * C687 +
            C32310 * C1140 - C15423 * C1123 + C32292 * C1652 - C15424 * C1647) *
               C32097) *
              C31911 * C31970 * C31956 * C110 +
          ((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
            C15432) *
               C20326 +
           (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
            C15440) *
               C20324 +
           (C15930 - C15931 + C15932 - C15933 + C15934 - C15935 + C15936 -
            C15937) *
               C20327 +
           (C15938 - C15939 + C15940 - C15941 + C15942 - C15943 + C15944 -
            C15945) *
               C32097) *
              C31911 * C31970 * C31956 * C111 +
          ((C15443 - C15442 + C15445 - C15444 + C15447 - C15446 + C15449 -
            C15448) *
               C20326 +
           (C15451 - C15450 + C15453 - C15452 + C15455 - C15454 + C15457 -
            C15456) *
               C20324 +
           (C32324 * C363 - C15421 * C351 + C32320 * C690 - C15422 * C683 +
            C32310 * C1126 - C15423 * C1115 + C32292 * C1650 - C15424 * C1645) *
               C20327 +
           (C32324 * C381 - C15421 * C364 + C32320 * C698 - C15422 * C691 +
            C32310 * C1142 - C15423 * C1127 + C32292 * C1654 - C15424 * C1651) *
               C32097) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
            C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
               C20326 +
           (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
            C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
               C20324 +
           (C32324 * C359 - C15421 * C349 + C32320 * C686 - C15422 * C681 +
            C32310 * C1122 - C15423 * C1113 + C32292 * C1646 - C15424 * C1643) *
               C20327 +
           (C32324 * C379 - C15421 * C360 + C32320 * C696 - C15422 * C687 +
            C32310 * C1140 - C15423 * C1123 + C32292 * C1652 - C15424 * C1647) *
               C32097) *
              C31911 * C31970 * C240 +
          ((C15421 * C244 - C32324 * C254 + C15422 * C249 - C32320 * C264 +
            C15423 * C979 - C32310 * C985 + C15424 * C982 - C32292 * C991) *
               C20326 +
           (C15421 * C255 - C32324 * C274 + C15422 * C265 - C32320 * C279 +
            C15423 * C986 - C32310 * C997 + C15424 * C992 - C32292 * C1000) *
               C20324 +
           (C15421 * C681 - C32324 * C686 + C15422 * C1113 - C32320 * C1122 +
            C15423 * C1643 - C32310 * C1646 + C15424 * C6244 - C32292 * C6247) *
               C20327 +
           (C15421 * C687 - C32324 * C696 + C15422 * C1123 - C32320 * C1140 +
            C15423 * C1647 - C32310 * C1652 + C15424 * C6248 - C32292 * C6253) *
               C32097) *
              C31911 * C31970 * C241 +
          ((C32324 * C264 - C15421 * C249 + C32320 * C985 - C15422 * C979 +
            C32310 * C991 - C15423 * C982 + C32292 * C6176 - C15424 * C6174) *
               C20326 +
           (C32324 * C279 - C15421 * C265 + C32320 * C997 - C15422 * C986 +
            C32310 * C1000 - C15423 * C992 + C32292 * C6180 - C15424 * C6177) *
               C20324 +
           (C32324 * C1122 - C15421 * C1113 + C32320 * C1646 - C15422 * C1643 +
            C32310 * C6247 - C15423 * C6244 + C32292 * C6511 - C15424 * C6510) *
               C20327 +
           (C32324 * C1140 - C15421 * C1123 + C32320 * C1652 - C15422 * C1647 +
            C32310 * C6253 - C15423 * C6248 + C32292 * C6513 - C15424 * C6512) *
               C32097) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
            C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
               C20326 +
           (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
            C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
               C20324 +
           (C26826 - C26827 + C26828 - C26829 + C26830 - C26831 + C26832 -
            C26833) *
               C20327 +
           (C26834 - C26835 + C26836 - C26837 + C26838 - C26839 + C26840 -
            C26841) *
               C32097) *
              C31911 * C346 +
          ((C26827 - C26826 + C26829 - C26828 + C26831 - C26830 + C26833 -
            C26832) *
               C20326 +
           (C26835 - C26834 + C26837 - C26836 + C26839 - C26838 + C26841 -
            C26840) *
               C20324 +
           (C26842 - C26843 + C26844 - C26845 + C26846 - C26847 + C26848 -
            C26849) *
               C20327 +
           (C26850 - C26851 + C26852 - C26853 + C26854 - C26855 + C26856 -
            C26857) *
               C32097) *
              C31911 * C347 +
          ((C26843 - C26842 + C26845 - C26844 + C26847 - C26846 + C26849 -
            C26848) *
               C20326 +
           (C26851 - C26850 + C26853 - C26852 + C26855 - C26854 + C26857 -
            C26856) *
               C20324 +
           (C32324 * C2024 - C15421 * C2018 + C32320 * C2541 - C15422 * C2538 +
            C32310 * C6847 - C15423 * C6844 + C32292 * C7361 - C15424 * C7360) *
               C20327 +
           (C32324 * C2036 - C15421 * C2025 + C32320 * C2547 - C15422 * C2542 +
            C32310 * C6853 - C15423 * C6848 + C32292 * C7363 - C15424 * C7362) *
               C32097) *
              C31911 * C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                 C20326 +
             (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                 C20324 +
             (C16530 - C16531 + C16532 - C16533) * C20327 +
             (C16534 - C16535 + C16536 - C16537) * C32097) *
                C32314 +
            ((C14634 - C14635 + C14636 - C14637) * C20326 +
             (C14638 - C14639 + C14640 - C14641) * C20324 + C16990 * C20327 +
             C16991 * C32097) *
                C32301 +
            C25657 * C32271) *
               C577 +
           (((C16531 - C16530 + C16533 - C16532) * C20326 +
             (C16535 - C16534 + C16537 - C16536) * C20324 +
             (C16539 - C16538 + C16541 - C16540) * C20327 +
             (C16543 - C16542 + C16545 - C16544) * C32097) *
                C32314 +
            (C16992 * C20326 + C16993 * C20324 + C16994 * C20327 +
             C16995 * C32097) *
                C32301 +
            (C18931 * C20326 + C18932 * C20324 +
             (C16230 - C16231 + C16232 - C16233) * C20327 +
             (C16234 - C16235 + C16236 - C16237) * C32097) *
                C32271) *
               C578) *
              C31956 * C473 +
          ((((C14635 - C14634 + C14637 - C14636) * C20326 +
             (C14639 - C14638 + C14641 - C14640) * C20324 + C16992 * C20327 +
             C16993 * C32097) *
                C32314 +
            ((C14643 - C14642 + C14645 - C14644) * C20326 +
             (C14647 - C14646 + C14649 - C14648) * C20324 + C18931 * C20327 +
             C18932 * C32097) *
                C32301 +
            ((C14651 - C14650 + C14653 - C14652) * C20326 +
             (C14655 - C14654 + C14657 - C14656) * C20324 +
             (C15180 - C15181 + C15182 - C15183) * C20327 +
             (C15184 - C15185 + C15186 - C15187) * C32097) *
                C32271) *
               C577 +
           ((C16990 * C20326 + C16991 * C20324 + C16570 * C20327 +
             C16571 * C32097) *
                C32314 +
            (C18233 * C20326 + C18234 * C20324 +
             (C16231 - C16230 + C16233 - C16232) * C20327 +
             (C16235 - C16234 + C16237 - C16236) * C32097) *
                C32301 +
            ((C15181 - C15180 + C15183 - C15182) * C20326 +
             (C15185 - C15184 + C15187 - C15186) * C20324 +
             (C14625 * C375 - C14631 * C357 + C32055 * C2213 - C14632 * C2212) *
                 C20327 +
             (C14625 * C387 - C14631 * C376 + C32055 * C2215 - C14632 * C2214) *
                 C32097) *
                C32271) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
             C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
                C20326 +
            (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
             C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
                C20324 +
            (C26826 - C26827 + C26828 - C26829 + C26830 - C26831 + C26832 -
             C26833) *
                C20327 +
            (C26834 - C26835 + C26836 - C26837 + C26838 - C26839 + C26840 -
             C26841) *
                C32097) *
               C31911 * C577 +
           ((C26827 - C26826 + C26829 - C26828 + C26831 - C26830 + C26833 -
             C26832) *
                C20326 +
            (C26835 - C26834 + C26837 - C26836 + C26839 - C26838 + C26841 -
             C26840) *
                C20324 +
            (C26842 - C26843 + C26844 - C26845 + C26846 - C26847 + C26848 -
             C26849) *
                C20327 +
            (C26850 - C26851 + C26852 - C26853 + C26854 - C26855 + C26856 -
             C26857) *
                C32097) *
               C31911 * C578) *
              C31956 * C473 +
          (((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
             C15432) *
                C20326 +
            (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
             C15440) *
                C20324 +
            (C15930 - C15931 + C15932 - C15933 + C15934 - C15935 + C15936 -
             C15937) *
                C20327 +
            (C15938 - C15939 + C15940 - C15941 + C15942 - C15943 + C15944 -
             C15945) *
                C32097) *
               C31911 * C577 +
           ((C15931 - C15930 + C15933 - C15932 + C15935 - C15934 + C15937 -
             C15936) *
                C20326 +
            (C15939 - C15938 + C15941 - C15940 + C15943 - C15942 + C15945 -
             C15944) *
                C20324 +
            (C32324 * C371 - C15421 * C355 + C32320 * C1132 - C15422 * C1118 +
             C32310 * C1133 - C15423 * C1119 + C32292 * C7049 -
             C15424 * C7048) *
                C20327 +
            (C32324 * C385 - C15421 * C372 + C32320 * C1145 - C15422 * C1134 +
             C32310 * C1146 - C15423 * C1135 + C32292 * C7051 -
             C15424 * C7050) *
                C32097) *
               C31911 * C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C20326 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C20324 +
            (C16530 - C16531 + C16532 - C16533) * C20327 +
            (C16534 - C16535 + C16536 - C16537) * C32097) *
               C32314 +
           ((C14634 - C14635 + C14636 - C14637) * C20326 +
            (C14638 - C14639 + C14640 - C14641) * C20324 + C16990 * C20327 +
            C16991 * C32097) *
               C32301 +
           C25657 * C32271) *
              C31970 * C31956 * C110 +
          (((C14635 - C14634 + C14637 - C14636) * C20326 +
            (C14639 - C14638 + C14641 - C14640) * C20324 + C16992 * C20327 +
            C16993 * C32097) *
               C32314 +
           ((C14643 - C14642 + C14645 - C14644) * C20326 +
            (C14647 - C14646 + C14649 - C14648) * C20324 + C18931 * C20327 +
            C18932 * C32097) *
               C32301 +
           ((C14651 - C14650 + C14653 - C14652) * C20326 +
            (C14655 - C14654 + C14657 - C14656) * C20324 +
            (C15180 - C15181 + C15182 - C15183) * C20327 +
            (C15184 - C15185 + C15186 - C15187) * C32097) *
               C32271) *
              C31970 * C31956 * C111 +
          (C25657 * C32314 +
           (C14676 * C20326 + C14677 * C20324 +
            (C15181 - C15180 + C15183 - C15182) * C20327 +
            (C15185 - C15184 + C15187 - C15186) * C32097) *
               C32301 +
           ((C14659 - C14658 + C14661 - C14660) * C20326 +
            (C14663 - C14662 + C14665 - C14664) * C20324 +
            (C14625 * C367 - C14631 * C353 + C32055 * C694 - C14632 * C685) *
                C20327 +
            (C14625 * C383 - C14631 * C368 + C32055 * C700 - C14632 * C695) *
                C32097) *
               C32271) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C14625 * C122 - C14631 * C115 + C32055 * C254 - C14632 * C244) *
                C20326 +
            (C14625 * C136 - C14631 * C123 + C32055 * C274 - C14632 * C255) *
                C20324 +
            (C16530 - C16531 + C16532 - C16533) * C20327 +
            (C16534 - C16535 + C16536 - C16537) * C32097) *
               C32314 +
           ((C14634 - C14635 + C14636 - C14637) * C20326 +
            (C14638 - C14639 + C14640 - C14641) * C20324 + C16990 * C20327 +
            C16991 * C32097) *
               C32301 +
           C25657 * C32271) *
              C31970 * C240 +
          (((C14631 * C244 - C14625 * C254 + C14632 * C249 - C32055 * C264) *
                C20326 +
            (C14631 * C255 - C14625 * C274 + C14632 * C265 - C32055 * C279) *
                C20324 +
            (C17190 - C17191 + C17192 - C17193) * C20327 +
            (C17194 - C17195 + C17196 - C17197) * C32097) *
               C32314 +
           ((C15010 - C15011 + C15012 - C15013) * C20326 +
            (C15014 - C15015 + C15016 - C15017) * C20324 +
            (C16768 - C16769 + C16770 - C16771) * C20327 +
            (C16772 - C16773 + C16774 - C16775) * C32097) *
               C32301 +
           ((C15018 - C15019 + C15020 - C15021) * C20326 +
            (C15022 - C15023 + C15024 - C15025) * C20324 +
            (C18725 - C18726 + C18727 - C18728) * C20327 +
            (C18729 - C18730 + C18731 - C18732) * C32097) *
               C32271) *
              C31970 * C241 +
          (((C14625 * C264 - C14631 * C249 + C32055 * C985 - C14632 * C979) *
                C20326 +
            (C14625 * C279 - C14631 * C265 + C32055 * C997 - C14632 * C986) *
                C20324 +
            (C14625 * C1122 - C14631 * C1113 + C32055 * C1646 -
             C14632 * C1643) *
                C20327 +
            (C14625 * C1140 - C14631 * C1123 + C32055 * C1652 -
             C14632 * C1647) *
                C32097) *
               C32314 +
           ((C14625 * C266 - C14631 * C250 + C32055 * C987 - C14632 * C980) *
                C20326 +
            (C14625 * C280 - C14631 * C267 + C32055 * C998 - C14632 * C988) *
                C20324 +
            (C14625 * C1124 - C14631 * C1114 + C32055 * C1648 -
             C14632 * C1644) *
                C20327 +
            (C14625 * C1141 - C14631 * C1125 + C32055 * C1653 -
             C14632 * C1649) *
                C32097) *
               C32301 +
           ((C14625 * C268 - C14631 * C251 + C32055 * C989 - C14632 * C981) *
                C20326 +
            (C14625 * C281 - C14631 * C269 + C32055 * C999 - C14632 * C990) *
                C20324 +
            (C14625 * C1126 - C14631 * C1115 + C32055 * C1650 -
             C14632 * C1645) *
                C20327 +
            (C14625 * C1142 - C14631 * C1127 + C32055 * C1654 -
             C14632 * C1651) *
                C32097) *
               C32271) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
            C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
               C20326 +
           (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
            C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
               C20324 +
           (C32324 * C359 - C15421 * C349 + C32320 * C686 - C15422 * C681 +
            C32310 * C1122 - C15423 * C1113 + C32292 * C1646 - C15424 * C1643) *
               C20327 +
           (C32324 * C379 - C15421 * C360 + C32320 * C696 - C15422 * C687 +
            C32310 * C1140 - C15423 * C1123 + C32292 * C1652 - C15424 * C1647) *
               C32097) *
              C31911 * C31970 * C31956 * C110 +
          ((C15427 - C15426 + C15429 - C15428 + C15431 - C15430 + C15433 -
            C15432) *
               C20326 +
           (C15435 - C15434 + C15437 - C15436 + C15439 - C15438 + C15441 -
            C15440) *
               C20324 +
           (C15930 - C15931 + C15932 - C15933 + C15934 - C15935 + C15936 -
            C15937) *
               C20327 +
           (C15938 - C15939 + C15940 - C15941 + C15942 - C15943 + C15944 -
            C15945) *
               C32097) *
              C31911 * C31970 * C31956 * C111 +
          ((C15443 - C15442 + C15445 - C15444 + C15447 - C15446 + C15449 -
            C15448) *
               C20326 +
           (C15451 - C15450 + C15453 - C15452 + C15455 - C15454 + C15457 -
            C15456) *
               C20324 +
           (C32324 * C363 - C15421 * C351 + C32320 * C690 - C15422 * C683 +
            C32310 * C1126 - C15423 * C1115 + C32292 * C1650 - C15424 * C1645) *
               C20327 +
           (C32324 * C381 - C15421 * C364 + C32320 * C698 - C15422 * C691 +
            C32310 * C1142 - C15423 * C1127 + C32292 * C1654 - C15424 * C1651) *
               C32097) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C32324 * C122 - C15421 * C115 + C32320 * C254 - C15422 * C244 +
            C32310 * C264 - C15423 * C249 + C32292 * C985 - C15424 * C979) *
               C20326 +
           (C32324 * C136 - C15421 * C123 + C32320 * C274 - C15422 * C255 +
            C32310 * C279 - C15423 * C265 + C32292 * C997 - C15424 * C986) *
               C20324 +
           (C32324 * C359 - C15421 * C349 + C32320 * C686 - C15422 * C681 +
            C32310 * C1122 - C15423 * C1113 + C32292 * C1646 - C15424 * C1643) *
               C20327 +
           (C32324 * C379 - C15421 * C360 + C32320 * C696 - C15422 * C687 +
            C32310 * C1140 - C15423 * C1123 + C32292 * C1652 - C15424 * C1647) *
               C32097) *
              C31911 * C31970 * C240 +
          ((C15421 * C244 - C32324 * C254 + C15422 * C249 - C32320 * C264 +
            C15423 * C979 - C32310 * C985 + C15424 * C982 - C32292 * C991) *
               C20326 +
           (C15421 * C255 - C32324 * C274 + C15422 * C265 - C32320 * C279 +
            C15423 * C986 - C32310 * C997 + C15424 * C992 - C32292 * C1000) *
               C20324 +
           (C15421 * C681 - C32324 * C686 + C15422 * C1113 - C32320 * C1122 +
            C15423 * C1643 - C32310 * C1646 + C15424 * C6244 - C32292 * C6247) *
               C20327 +
           (C15421 * C687 - C32324 * C696 + C15422 * C1123 - C32320 * C1140 +
            C15423 * C1647 - C32310 * C1652 + C15424 * C6248 - C32292 * C6253) *
               C32097) *
              C31911 * C31970 * C241 +
          ((C32324 * C264 - C15421 * C249 + C32320 * C985 - C15422 * C979 +
            C32310 * C991 - C15423 * C982 + C32292 * C6176 - C15424 * C6174) *
               C20326 +
           (C32324 * C279 - C15421 * C265 + C32320 * C997 - C15422 * C986 +
            C32310 * C1000 - C15423 * C992 + C32292 * C6180 - C15424 * C6177) *
               C20324 +
           (C32324 * C1122 - C15421 * C1113 + C32320 * C1646 - C15422 * C1643 +
            C32310 * C6247 - C15423 * C6244 + C32292 * C6511 - C15424 * C6510) *
               C20327 +
           (C32324 * C1140 - C15421 * C1123 + C32320 * C1652 - C15422 * C1647 +
            C32310 * C6253 - C15423 * C6248 + C32292 * C6513 - C15424 * C6512) *
               C32097) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
              C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
                 C114 +
             (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
              C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
                 C32010) *
                C32232 +
            ((C7497 - C7498 + C7499 - C7500 + C7501 - C7502 + C7503 - C7504) *
                 C114 +
             (C7505 - C7506 + C7507 - C7508 + C7509 - C7510 + C7511 - C7512) *
                 C32010) *
                C31921) *
               C31970 * C471 +
           (((C7492 * C244 - C7486 * C254 + C7493 * C249 - C7487 * C264 +
              C7494 * C979 - C7488 * C985 + C7495 * C982 - C32292 * C991) *
                 C114 +
             (C7492 * C255 - C7486 * C274 + C7493 * C265 - C7487 * C279 +
              C7494 * C986 - C7488 * C997 + C7495 * C992 - C32292 * C1000) *
                 C32010) *
                C32232 +
            ((C7855 - C7856 + C7857 - C7858 + C7859 - C7860 + C7861 - C7862) *
                 C114 +
             (C7863 - C7864 + C7865 - C7866 + C7867 - C7868 + C7869 - C7870) *
                 C32010) *
                C31921) *
               C31970 * C472) *
              C473 +
          ((((C7498 - C7497 + C7500 - C7499 + C7502 - C7501 + C7504 - C7503) *
                 C114 +
             (C7506 - C7505 + C7508 - C7507 + C7510 - C7509 + C7512 - C7511) *
                 C32010) *
                C32232 +
            ((C7513 - C7514 + C7515 - C7516 + C7517 - C7518 + C7519 - C7520) *
                 C114 +
             (C7521 - C7522 + C7523 - C7524 + C7525 - C7526 + C7527 - C7528) *
                 C32010) *
                C31921) *
               C31970 * C471 +
           (((C7856 - C7855 + C7858 - C7857 + C7860 - C7859 + C7862 - C7861) *
                 C114 +
             (C7864 - C7863 + C7866 - C7865 + C7868 - C7867 + C7870 - C7869) *
                 C32010) *
                C32232 +
            ((C7486 * C258 - C7492 * C246 + C7487 * C268 - C7493 * C251 +
              C7488 * C989 - C7494 * C981 + C32292 * C995 - C7495 * C984) *
                 C114 +
             (C7486 * C276 - C7492 * C259 + C7487 * C281 - C7493 * C269 +
              C7488 * C999 - C7494 * C990 + C32292 * C1002 - C7495 * C996) *
                 C32010) *
                C31921) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                 C114 +
             (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                 C32010) *
                C2658 +
            ((C2665 - C2666 + C2667 - C2668) * C114 +
             (C2669 - C2670 + C2671 - C2672) * C32010) *
                C2659 +
            C2713 * C2660 + C2714 * C32286) *
               C31970 * C471 +
           (((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                 C114 +
             (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                 C32010) *
                C2658 +
            ((C3041 - C3042 + C3043 - C3044) * C114 +
             (C3045 - C3046 + C3047 - C3048) * C32010) *
                C2659 +
            ((C3049 - C3050 + C3051 - C3052) * C114 +
             (C3053 - C3054 + C3055 - C3056) * C32010) *
                C2660 +
            ((C3057 - C3058 + C3059 - C3060) * C114 +
             (C3061 - C3062 + C3063 - C3064) * C32010) *
                C32286) *
               C31970 * C472) *
              C473 +
          ((((C2666 - C2665 + C2668 - C2667) * C114 +
             (C2670 - C2669 + C2672 - C2671) * C32010) *
                C2658 +
            ((C2674 - C2673 + C2676 - C2675) * C114 +
             (C2678 - C2677 + C2680 - C2679) * C32010) *
                C2659 +
            ((C2682 - C2681 + C2684 - C2683) * C114 +
             (C2686 - C2685 + C2688 - C2687) * C32010) *
                C2660 +
            ((C2689 - C2690 + C2691 - C2692) * C114 +
             (C2693 - C2694 + C2695 - C2696) * C32010) *
                C32286) *
               C31970 * C471 +
           (((C3042 - C3041 + C3044 - C3043) * C114 +
             (C3046 - C3045 + C3048 - C3047) * C32010) *
                C2658 +
            ((C3050 - C3049 + C3052 - C3051) * C114 +
             (C3054 - C3053 + C3056 - C3055) * C32010) *
                C2659 +
            ((C3058 - C3057 + C3060 - C3059) * C114 +
             (C3062 - C3061 + C3064 - C3063) * C32010) *
                C2660 +
            ((C32251 * C262 - C2662 * C248 + C32055 * C272 - C2663 * C253) *
                 C114 +
             (C32251 * C278 - C2662 * C263 + C32055 * C283 - C2663 * C273) *
                 C32010) *
                C32286) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                 C10043 +
             (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                 C10040 +
             (C4510 - C4511 + C4512 - C4513) * C10044 +
             (C4514 - C4515 + C4516 - C4517) * C10041 + C12514 * C10045 +
             C12515 * C32285) *
                C32232 +
            ((C2665 - C2666 + C2667 - C2668) * C10043 +
             (C2669 - C2670 + C2671 - C2672) * C10040 + C4958 * C10044 +
             C4959 * C10041 + C12516 * C10045 + C12517 * C32285) *
                C31921) *
               C31970 * C471 +
           (((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                 C10043 +
             (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                 C10040 +
             (C5158 - C5159 + C5160 - C5161) * C10044 +
             (C5162 - C5163 + C5164 - C5165) * C10041 +
             (C2662 * C1116 - C32251 * C1128 + C2663 * C1117 - C32055 * C1129) *
                 C10045 +
             (C2662 * C1130 - C32251 * C1143 + C2663 * C1131 - C32055 * C1144) *
                 C32285) *
                C32232 +
            ((C3041 - C3042 + C3043 - C3044) * C10043 +
             (C3045 - C3046 + C3047 - C3048) * C10040 +
             (C4736 - C4737 + C4738 - C4739) * C10044 +
             (C4740 - C4741 + C4742 - C4743) * C10041 +
             (C12712 - C12713 + C12714 - C12715) * C10045 +
             (C12716 - C12717 + C12718 - C12719) * C32285) *
                C31921) *
               C31970 * C472) *
              C473 +
          ((((C2666 - C2665 + C2668 - C2667) * C10043 +
             (C2670 - C2669 + C2672 - C2671) * C10040 + C4960 * C10044 +
             C4961 * C10041 + (C4526 - C4527 + C4528 - C4529) * C10045 +
             (C4530 - C4531 + C4532 - C4533) * C32285) *
                C32232 +
            ((C2674 - C2673 + C2676 - C2675) * C10043 +
             (C2678 - C2677 + C2680 - C2679) * C10040 + C4962 * C10044 +
             C4963 * C10041 + (C4534 - C4535 + C4536 - C4537) * C10045 +
             (C4538 - C4539 + C4540 - C4541) * C32285) *
                C31921) *
               C31970 * C471 +
           (((C3042 - C3041 + C3044 - C3043) * C10043 +
             (C3046 - C3045 + C3048 - C3047) * C10040 +
             (C4737 - C4736 + C4739 - C4738) * C10044 +
             (C4741 - C4740 + C4743 - C4742) * C10041 +
             (C12713 - C12712 + C12715 - C12714) * C10045 +
             (C12717 - C12716 + C12719 - C12718) * C32285) *
                C32232 +
            ((C3050 - C3049 + C3052 - C3051) * C10043 +
             (C3054 - C3053 + C3056 - C3055) * C10040 +
             (C4745 - C4744 + C4747 - C4746) * C10044 +
             (C4749 - C4748 + C4751 - C4750) * C10041 +
             (C32251 * C1136 - C2662 * C1120 + C32055 * C1137 - C2663 * C1121) *
                 C10045 +
             (C32251 * C1147 - C2662 * C1138 + C32055 * C1148 - C2663 * C1139) *
                 C32285) *
                C31921) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
              C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
                 C114 +
             (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
              C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
                 C32010) *
                C32232 +
            ((C7497 - C7498 + C7499 - C7500 + C7501 - C7502 + C7503 - C7504) *
                 C114 +
             (C7505 - C7506 + C7507 - C7508 + C7509 - C7510 + C7511 - C7512) *
                 C32010) *
                C31921) *
               C577 +
           (((C7492 * C349 - C7486 * C359 + C7493 * C681 - C7487 * C686 +
              C7494 * C1113 - C7488 * C1122 + C7495 * C1643 - C32292 * C1646) *
                 C114 +
             (C7492 * C360 - C7486 * C379 + C7493 * C687 - C7487 * C696 +
              C7494 * C1123 - C7488 * C1140 + C7495 * C1647 - C32292 * C1652) *
                 C32010) *
                C32232 +
            ((C8001 - C8002 + C8003 - C8004 + C8005 - C8006 + C8007 - C8008) *
                 C114 +
             (C8009 - C8010 + C8011 - C8012 + C8013 - C8014 + C8015 - C8016) *
                 C32010) *
                C31921) *
               C578) *
              C471 +
          ((((C7492 * C244 - C7486 * C254 + C7493 * C249 - C7487 * C264 +
              C7494 * C979 - C7488 * C985 + C7495 * C982 - C32292 * C991) *
                 C114 +
             (C7492 * C255 - C7486 * C274 + C7493 * C265 - C7487 * C279 +
              C7494 * C986 - C7488 * C997 + C7495 * C992 - C32292 * C1000) *
                 C32010) *
                C32232 +
            ((C7855 - C7856 + C7857 - C7858 + C7859 - C7860 + C7861 - C7862) *
                 C114 +
             (C7863 - C7864 + C7865 - C7866 + C7867 - C7868 + C7869 - C7870) *
                 C32010) *
                C31921) *
               C577 +
           (((C7486 * C686 - C7492 * C681 + C7487 * C1122 - C7493 * C1113 +
              C7488 * C1646 - C7494 * C1643 + C32292 * C6247 - C7495 * C6244) *
                 C114 +
             (C7486 * C696 - C7492 * C687 + C7487 * C1140 - C7493 * C1123 +
              C7488 * C1652 - C7494 * C1647 + C32292 * C6253 - C7495 * C6248) *
                 C32010) *
                C32232 +
            ((C7486 * C688 - C7492 * C682 + C7487 * C1124 - C7493 * C1114 +
              C7488 * C1648 - C7494 * C1644 + C32292 * C6425 - C7495 * C6424) *
                 C114 +
             (C7486 * C697 - C7492 * C689 + C7487 * C1141 - C7493 * C1125 +
              C7488 * C1653 - C7494 * C1649 + C32292 * C6427 - C7495 * C6426) *
                 C32010) *
                C31921) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                 C114 +
             (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                 C32010) *
                C2658 +
            ((C2665 - C2666 + C2667 - C2668) * C114 +
             (C2669 - C2670 + C2671 - C2672) * C32010) *
                C2659 +
            C2713 * C2660 + C2714 * C32286) *
               C577 +
           (((C2662 * C349 - C32251 * C359 + C2663 * C681 - C32055 * C686) *
                 C114 +
             (C2662 * C360 - C32251 * C379 + C2663 * C687 - C32055 * C696) *
                 C32010) *
                C2658 +
            ((C3195 - C3196 + C3197 - C3198) * C114 +
             (C3199 - C3200 + C3201 - C3202) * C32010) *
                C2659 +
            ((C3203 - C3204 + C3205 - C3206) * C114 +
             (C3207 - C3208 + C3209 - C3210) * C32010) *
                C2660 +
            ((C3211 - C3212 + C3213 - C3214) * C114 +
             (C3215 - C3216 + C3217 - C3218) * C32010) *
                C32286) *
               C578) *
              C471 +
          ((((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                 C114 +
             (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                 C32010) *
                C2658 +
            ((C3041 - C3042 + C3043 - C3044) * C114 +
             (C3045 - C3046 + C3047 - C3048) * C32010) *
                C2659 +
            ((C3049 - C3050 + C3051 - C3052) * C114 +
             (C3053 - C3054 + C3055 - C3056) * C32010) *
                C2660 +
            ((C3057 - C3058 + C3059 - C3060) * C114 +
             (C3061 - C3062 + C3063 - C3064) * C32010) *
                C32286) *
               C577 +
           (((C32251 * C686 - C2662 * C681 + C32055 * C1122 - C2663 * C1113) *
                 C114 +
             (C32251 * C696 - C2662 * C687 + C32055 * C1140 - C2663 * C1123) *
                 C32010) *
                C2658 +
            ((C32251 * C688 - C2662 * C682 + C32055 * C1124 - C2663 * C1114) *
                 C114 +
             (C32251 * C697 - C2662 * C689 + C32055 * C1141 - C2663 * C1125) *
                 C32010) *
                C2659 +
            ((C32251 * C690 - C2662 * C683 + C32055 * C1126 - C2663 * C1115) *
                 C114 +
             (C32251 * C698 - C2662 * C691 + C32055 * C1142 - C2663 * C1127) *
                 C32010) *
                C2660 +
            ((C32251 * C692 - C2662 * C684 + C32055 * C1470 - C2663 * C1469) *
                 C114 +
             (C32251 * C699 - C2662 * C693 + C32055 * C1472 - C2663 * C1471) *
                 C32010) *
                C32286) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                 C10043 +
             (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                 C10040 +
             (C4510 - C4511 + C4512 - C4513) * C10044 +
             (C4514 - C4515 + C4516 - C4517) * C10041 + C12514 * C10045 +
             C12515 * C32285) *
                C32232 +
            ((C2665 - C2666 + C2667 - C2668) * C10043 +
             (C2669 - C2670 + C2671 - C2672) * C10040 + C4958 * C10044 +
             C4959 * C10041 + C12516 * C10045 + C12517 * C32285) *
                C31921) *
               C577 +
           (((C4511 - C4510 + C4513 - C4512) * C10043 +
             (C4515 - C4514 + C4517 - C4516) * C10040 +
             (C4518 - C4519 + C4520 - C4521) * C10044 +
             (C4522 - C4523 + C4524 - C4525) * C10041 +
             (C12498 - C12499 + C12500 - C12501) * C10045 +
             (C12502 - C12503 + C12504 - C12505) * C32285) *
                C32232 +
            (C4960 * C10043 + C4961 * C10040 + C12918 * C10044 +
             C12919 * C10041 + (C12506 - C12507 + C12508 - C12509) * C10045 +
             (C12510 - C12511 + C12512 - C12513) * C32285) *
                C31921) *
               C578) *
              C471 +
          ((((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                 C10043 +
             (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                 C10040 +
             (C5158 - C5159 + C5160 - C5161) * C10044 +
             (C5162 - C5163 + C5164 - C5165) * C10041 +
             (C13114 - C13115 + C13116 - C13117) * C10045 +
             (C13118 - C13119 + C13120 - C13121) * C32285) *
                C32232 +
            ((C3041 - C3042 + C3043 - C3044) * C10043 +
             (C3045 - C3046 + C3047 - C3048) * C10040 +
             (C4736 - C4737 + C4738 - C4739) * C10044 +
             (C4740 - C4741 + C4742 - C4743) * C10041 +
             (C12712 - C12713 + C12714 - C12715) * C10045 +
             (C12716 - C12717 + C12718 - C12719) * C32285) *
                C31921) *
               C577 +
           (((C5159 - C5158 + C5161 - C5160) * C10043 +
             (C5163 - C5162 + C5165 - C5164) * C10040 +
             (C13115 - C13114 + C13117 - C13116) * C10044 +
             (C13119 - C13118 + C13121 - C13120) * C10041 +
             (C32251 * C2541 - C2662 * C2538 + C32055 * C6847 - C2663 * C6844) *
                 C10045 +
             (C32251 * C2547 - C2662 * C2542 + C32055 * C6853 - C2663 * C6848) *
                 C32285) *
                C32232 +
            ((C4737 - C4736 + C4739 - C4738) * C10043 +
             (C4741 - C4740 + C4743 - C4742) * C10040 +
             (C12713 - C12712 + C12715 - C12714) * C10044 +
             (C12717 - C12716 + C12719 - C12718) * C10041 +
             (C32251 * C2543 - C2662 * C2539 + C32055 * C7199 - C2663 * C7198) *
                 C10045 +
             (C32251 * C2548 - C2662 * C2544 + C32055 * C7201 - C2663 * C7200) *
                 C32285) *
                C31921) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                    C114 +
                (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                    C32010) *
                   C2658 +
               ((C2665 - C2666 + C2667 - C2668) * C114 +
                (C2669 - C2670 + C2671 - C2672) * C32010) *
                   C2659 +
               C2713 * C2660 + C2714 * C32286) *
                  C31970 * C31956 * C110 +
              (((C2666 - C2665 + C2668 - C2667) * C114 +
                (C2670 - C2669 + C2672 - C2671) * C32010) *
                   C2658 +
               ((C2674 - C2673 + C2676 - C2675) * C114 +
                (C2678 - C2677 + C2680 - C2679) * C32010) *
                   C2659 +
               ((C2682 - C2681 + C2684 - C2683) * C114 +
                (C2686 - C2685 + C2688 - C2687) * C32010) *
                   C2660 +
               ((C2689 - C2690 + C2691 - C2692) * C114 +
                (C2693 - C2694 + C2695 - C2696) * C32010) *
                   C32286) *
                  C31970 * C31956 * C111 +
              (C2713 * C2658 + C2714 * C2659 +
               ((C2690 - C2689 + C2692 - C2691) * C114 +
                (C2694 - C2693 + C2696 - C2695) * C32010) *
                   C2660 +
               ((C32251 * C132 - C2662 * C120 + C32055 * C476 - C2663 * C475) *
                    C114 +
                (C32251 * C141 - C2662 * C133 + C32055 * C478 - C2663 * C477) *
                    C32010) *
                   C32286) *
                  C31970 * C31956 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                    C114 +
                (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                    C32010) *
                   C2658 +
               ((C2665 - C2666 + C2667 - C2668) * C114 +
                (C2669 - C2670 + C2671 - C2672) * C32010) *
                   C2659 +
               C2713 * C2660 + C2714 * C32286) *
                  C31970 * C240 +
              (((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                    C114 +
                (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                    C32010) *
                   C2658 +
               ((C2662 * C245 - C32251 * C256 + C2663 * C250 - C32055 * C266) *
                    C114 +
                (C2662 * C257 - C32251 * C275 + C2663 * C267 - C32055 * C280) *
                    C32010) *
                   C2659 +
               ((C2662 * C246 - C32251 * C258 + C2663 * C251 - C32055 * C268) *
                    C114 +
                (C2662 * C259 - C32251 * C276 + C2663 * C269 - C32055 * C281) *
                    C32010) *
                   C2660 +
               ((C2662 * C247 - C32251 * C260 + C2663 * C252 - C32055 * C270) *
                    C114 +
                (C2662 * C261 - C32251 * C277 + C2663 * C271 - C32055 * C282) *
                    C32010) *
                   C32286) *
                  C31970 * C241 +
              (((C32251 * C264 - C2662 * C249 + C32055 * C985 - C2663 * C979) *
                    C114 +
                (C32251 * C279 - C2662 * C265 + C32055 * C997 - C2663 * C986) *
                    C32010) *
                   C2658 +
               ((C32251 * C266 - C2662 * C250 + C32055 * C987 - C2663 * C980) *
                    C114 +
                (C32251 * C280 - C2662 * C267 + C32055 * C998 - C2663 * C988) *
                    C32010) *
                   C2659 +
               ((C32251 * C268 - C2662 * C251 + C32055 * C989 - C2663 * C981) *
                    C114 +
                (C32251 * C281 - C2662 * C269 + C32055 * C999 - C2663 * C990) *
                    C32010) *
                   C2660 +
               ((C32251 * C270 - C2662 * C252 + C32055 * C1296 -
                 C2663 * C1295) *
                    C114 +
                (C32251 * C282 - C2662 * C271 + C32055 * C1298 -
                 C2663 * C1297) *
                    C32010) *
                   C32286) *
                  C31970 * C242) *
             C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C114 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C32010) *
               C2658 +
           ((C2665 - C2666 + C2667 - C2668) * C114 +
            (C2669 - C2670 + C2671 - C2672) * C32010) *
               C2659 +
           C2713 * C2660 + C2714 * C32286) *
              C346 +
          (((C2662 * C349 - C32251 * C359 + C2663 * C681 - C32055 * C686) *
                C114 +
            (C2662 * C360 - C32251 * C379 + C2663 * C687 - C32055 * C696) *
                C32010) *
               C2658 +
           ((C2662 * C350 - C32251 * C361 + C2663 * C682 - C32055 * C688) *
                C114 +
            (C2662 * C362 - C32251 * C380 + C2663 * C689 - C32055 * C697) *
                C32010) *
               C2659 +
           ((C2662 * C351 - C32251 * C363 + C2663 * C683 - C32055 * C690) *
                C114 +
            (C2662 * C364 - C32251 * C381 + C2663 * C691 - C32055 * C698) *
                C32010) *
               C2660 +
           ((C2662 * C352 - C32251 * C365 + C2663 * C684 - C32055 * C692) *
                C114 +
            (C2662 * C366 - C32251 * C382 + C2663 * C693 - C32055 * C699) *
                C32010) *
               C32286) *
              C347 +
          (((C32251 * C369 - C2662 * C354 + C32055 * C1128 - C2663 * C1116) *
                C114 +
            (C32251 * C384 - C2662 * C370 + C32055 * C1143 - C2663 * C1130) *
                C32010) *
               C2658 +
           ((C32251 * C371 - C2662 * C355 + C32055 * C1132 - C2663 * C1118) *
                C114 +
            (C32251 * C385 - C2662 * C372 + C32055 * C1145 - C2663 * C1134) *
                C32010) *
               C2659 +
           ((C32251 * C373 - C2662 * C356 + C32055 * C1136 - C2663 * C1120) *
                C114 +
            (C32251 * C386 - C2662 * C374 + C32055 * C1147 - C2663 * C1138) *
                C32010) *
               C2660 +
           ((C32251 * C375 - C2662 * C357 + C32055 * C2213 - C2663 * C2212) *
                C114 +
            (C32251 * C387 - C2662 * C376 + C32055 * C2215 - C2663 * C2214) *
                C32010) *
               C32286) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
             C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
                C114 +
            (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
             C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
                C32010) *
               C32232 +
           ((C7497 - C7498 + C7499 - C7500 + C7501 - C7502 + C7503 - C7504) *
                C114 +
            (C7505 - C7506 + C7507 - C7508 + C7509 - C7510 + C7511 - C7512) *
                C32010) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C7498 - C7497 + C7500 - C7499 + C7502 - C7501 + C7504 - C7503) *
                C114 +
            (C7506 - C7505 + C7508 - C7507 + C7510 - C7509 + C7512 - C7511) *
                C32010) *
               C32232 +
           ((C7513 - C7514 + C7515 - C7516 + C7517 - C7518 + C7519 - C7520) *
                C114 +
            (C7521 - C7522 + C7523 - C7524 + C7525 - C7526 + C7527 - C7528) *
                C32010) *
               C31921) *
              C31970 * C31956 * C111 +
          (((C7514 - C7513 + C7516 - C7515 + C7518 - C7517 + C7520 - C7519) *
                C114 +
            (C7522 - C7521 + C7524 - C7523 + C7526 - C7525 + C7528 - C7527) *
                C32010) *
               C32232 +
           ((C7486 * C128 - C7492 * C118 + C7487 * C260 - C7493 * C247 +
             C7488 * C270 - C7494 * C252 + C32292 * C1296 - C7495 * C1295) *
                C114 +
            (C7486 * C139 - C7492 * C129 + C7487 * C277 - C7493 * C261 +
             C7488 * C282 - C7494 * C271 + C32292 * C1298 - C7495 * C1297) *
                C32010) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
             C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
                C114 +
            (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
             C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
                C32010) *
               C32232 +
           ((C7497 - C7498 + C7499 - C7500 + C7501 - C7502 + C7503 - C7504) *
                C114 +
            (C7505 - C7506 + C7507 - C7508 + C7509 - C7510 + C7511 - C7512) *
                C32010) *
               C31921) *
              C31970 * C240 +
          (((C7492 * C244 - C7486 * C254 + C7493 * C249 - C7487 * C264 +
             C7494 * C979 - C7488 * C985 + C7495 * C982 - C32292 * C991) *
                C114 +
            (C7492 * C255 - C7486 * C274 + C7493 * C265 - C7487 * C279 +
             C7494 * C986 - C7488 * C997 + C7495 * C992 - C32292 * C1000) *
                C32010) *
               C32232 +
           ((C7492 * C245 - C7486 * C256 + C7493 * C250 - C7487 * C266 +
             C7494 * C980 - C7488 * C987 + C7495 * C983 - C32292 * C993) *
                C114 +
            (C7492 * C257 - C7486 * C275 + C7493 * C267 - C7487 * C280 +
             C7494 * C988 - C7488 * C998 + C7495 * C994 - C32292 * C1001) *
                C32010) *
               C31921) *
              C31970 * C241 +
          (((C7486 * C264 - C7492 * C249 + C7487 * C985 - C7493 * C979 +
             C7488 * C991 - C7494 * C982 + C32292 * C6176 - C7495 * C6174) *
                C114 +
            (C7486 * C279 - C7492 * C265 + C7487 * C997 - C7493 * C986 +
             C7488 * C1000 - C7494 * C992 + C32292 * C6180 - C7495 * C6177) *
                C32010) *
               C32232 +
           ((C7486 * C266 - C7492 * C250 + C7487 * C987 - C7493 * C980 +
             C7488 * C993 - C7494 * C983 + C32292 * C6339 - C7495 * C6338) *
                C114 +
            (C7486 * C280 - C7492 * C267 + C7487 * C998 - C7493 * C988 +
             C7488 * C1001 - C7494 * C994 + C32292 * C6341 - C7495 * C6340) *
                C32010) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
             C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
                C114 +
            (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
             C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
                C32010) *
               C32232 +
           ((C7497 - C7498 + C7499 - C7500 + C7501 - C7502 + C7503 - C7504) *
                C114 +
            (C7505 - C7506 + C7507 - C7508 + C7509 - C7510 + C7511 - C7512) *
                C32010) *
               C31921) *
              C346 +
          (((C7492 * C349 - C7486 * C359 + C7493 * C681 - C7487 * C686 +
             C7494 * C1113 - C7488 * C1122 + C7495 * C1643 - C32292 * C1646) *
                C114 +
            (C7492 * C360 - C7486 * C379 + C7493 * C687 - C7487 * C696 +
             C7494 * C1123 - C7488 * C1140 + C7495 * C1647 - C32292 * C1652) *
                C32010) *
               C32232 +
           ((C7492 * C350 - C7486 * C361 + C7493 * C682 - C7487 * C688 +
             C7494 * C1114 - C7488 * C1124 + C7495 * C1644 - C32292 * C1648) *
                C114 +
            (C7492 * C362 - C7486 * C380 + C7493 * C689 - C7487 * C697 +
             C7494 * C1125 - C7488 * C1141 + C7495 * C1649 - C32292 * C1653) *
                C32010) *
               C31921) *
              C347 +
          (((C7486 * C369 - C7492 * C354 + C7487 * C1128 - C7493 * C1116 +
             C7488 * C1129 - C7494 * C1117 + C32292 * C6249 - C7495 * C6245) *
                C114 +
            (C7486 * C384 - C7492 * C370 + C7487 * C1143 - C7493 * C1130 +
             C7488 * C1144 - C7494 * C1131 + C32292 * C6254 - C7495 * C6251) *
                C32010) *
               C32232 +
           ((C7486 * C371 - C7492 * C355 + C7487 * C1132 - C7493 * C1118 +
             C7488 * C1133 - C7494 * C1119 + C32292 * C7049 - C7495 * C7048) *
                C114 +
            (C7486 * C385 - C7492 * C372 + C7487 * C1145 - C7493 * C1134 +
             C7488 * C1146 - C7494 * C1135 + C32292 * C7051 - C7495 * C7050) *
                C32010) *
               C31921) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C10043 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C10040 +
            (C4510 - C4511 + C4512 - C4513) * C10044 +
            (C4514 - C4515 + C4516 - C4517) * C10041 +
            (C4519 - C4518 + C4521 - C4520) * C10045 +
            (C4523 - C4522 + C4525 - C4524) * C32285) *
               C32232 +
           ((C2665 - C2666 + C2667 - C2668) * C10043 +
            (C2669 - C2670 + C2671 - C2672) * C10040 + C4958 * C10044 +
            C4959 * C10041 + (C4527 - C4526 + C4529 - C4528) * C10045 +
            (C4531 - C4530 + C4533 - C4532) * C32285) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C2666 - C2665 + C2668 - C2667) * C10043 +
            (C2670 - C2669 + C2672 - C2671) * C10040 + C4960 * C10044 +
            C4961 * C10041 + (C4526 - C4527 + C4528 - C4529) * C10045 +
            (C4530 - C4531 + C4532 - C4533) * C32285) *
               C32232 +
           ((C2674 - C2673 + C2676 - C2675) * C10043 +
            (C2678 - C2677 + C2680 - C2679) * C10040 + C4962 * C10044 +
            C4963 * C10041 + (C4534 - C4535 + C4536 - C4537) * C10045 +
            (C4538 - C4539 + C4540 - C4541) * C32285) *
               C31921) *
              C31970 * C31956 * C111 +
          ((C2705 * C10043 + C2706 * C10040 + C4212 * C10044 + C4213 * C10041 +
            (C4535 - C4534 + C4537 - C4536) * C10045 +
            (C4539 - C4538 + C4541 - C4540) * C32285) *
               C32232 +
           (C2707 * C10043 + C2708 * C10040 +
            (C3212 - C3211 + C3214 - C3213) * C10044 +
            (C3216 - C3215 + C3218 - C3217) * C10041 +
            (C32251 * C375 - C2662 * C357 + C32055 * C2213 - C2663 * C2212) *
                C10045 +
            (C32251 * C387 - C2662 * C376 + C32055 * C2215 - C2663 * C2214) *
                C32285) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C10043 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C10040 +
            (C4510 - C4511 + C4512 - C4513) * C10044 +
            (C4514 - C4515 + C4516 - C4517) * C10041 +
            (C4519 - C4518 + C4521 - C4520) * C10045 +
            (C4523 - C4522 + C4525 - C4524) * C32285) *
               C32232 +
           ((C2665 - C2666 + C2667 - C2668) * C10043 +
            (C2669 - C2670 + C2671 - C2672) * C10040 + C4958 * C10044 +
            C4959 * C10041 + (C4527 - C4526 + C4529 - C4528) * C10045 +
            (C4531 - C4530 + C4533 - C4532) * C32285) *
               C31921) *
              C31970 * C240 +
          (((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                C10043 +
            (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                C10040 +
            (C5158 - C5159 + C5160 - C5161) * C10044 +
            (C5162 - C5163 + C5164 - C5165) * C10041 +
            (C2662 * C1116 - C32251 * C1128 + C2663 * C1117 - C32055 * C1129) *
                C10045 +
            (C2662 * C1130 - C32251 * C1143 + C2663 * C1131 - C32055 * C1144) *
                C32285) *
               C32232 +
           ((C3041 - C3042 + C3043 - C3044) * C10043 +
            (C3045 - C3046 + C3047 - C3048) * C10040 +
            (C4736 - C4737 + C4738 - C4739) * C10044 +
            (C4740 - C4741 + C4742 - C4743) * C10041 +
            (C2662 * C1118 - C32251 * C1132 + C2663 * C1119 - C32055 * C1133) *
                C10045 +
            (C2662 * C1134 - C32251 * C1145 + C2663 * C1135 - C32055 * C1146) *
                C32285) *
               C31921) *
              C31970 * C241 +
          (((C32251 * C264 - C2662 * C249 + C32055 * C985 - C2663 * C979) *
                C10043 +
            (C32251 * C279 - C2662 * C265 + C32055 * C997 - C2663 * C986) *
                C10040 +
            (C32251 * C1122 - C2662 * C1113 + C32055 * C1646 - C2663 * C1643) *
                C10044 +
            (C32251 * C1140 - C2662 * C1123 + C32055 * C1652 - C2663 * C1647) *
                C10041 +
            (C32251 * C1129 - C2662 * C1117 + C32055 * C6249 - C2663 * C6245) *
                C10045 +
            (C32251 * C1144 - C2662 * C1131 + C32055 * C6254 - C2663 * C6251) *
                C32285) *
               C32232 +
           ((C32251 * C266 - C2662 * C250 + C32055 * C987 - C2663 * C980) *
                C10043 +
            (C32251 * C280 - C2662 * C267 + C32055 * C998 - C2663 * C988) *
                C10040 +
            (C32251 * C1124 - C2662 * C1114 + C32055 * C1648 - C2663 * C1644) *
                C10044 +
            (C32251 * C1141 - C2662 * C1125 + C32055 * C1653 - C2663 * C1649) *
                C10041 +
            (C32251 * C1133 - C2662 * C1119 + C32055 * C7049 - C2663 * C7048) *
                C10045 +
            (C32251 * C1146 - C2662 * C1135 + C32055 * C7051 - C2663 * C7050) *
                C32285) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C10043 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C10040 +
            (C4510 - C4511 + C4512 - C4513) * C10044 +
            (C4514 - C4515 + C4516 - C4517) * C10041 + C12514 * C10045 +
            C12515 * C32285) *
               C32232 +
           ((C2665 - C2666 + C2667 - C2668) * C10043 +
            (C2669 - C2670 + C2671 - C2672) * C10040 + C4958 * C10044 +
            C4959 * C10041 + C12516 * C10045 + C12517 * C32285) *
               C31921) *
              C346 +
          (((C4511 - C4510 + C4513 - C4512) * C10043 +
            (C4515 - C4514 + C4517 - C4516) * C10040 +
            (C4518 - C4519 + C4520 - C4521) * C10044 +
            (C4522 - C4523 + C4524 - C4525) * C10041 +
            (C12498 - C12499 + C12500 - C12501) * C10045 +
            (C12502 - C12503 + C12504 - C12505) * C32285) *
               C32232 +
           (C4960 * C10043 + C4961 * C10040 +
            (C4526 - C4527 + C4528 - C4529) * C10044 +
            (C4530 - C4531 + C4532 - C4533) * C10041 +
            (C12506 - C12507 + C12508 - C12509) * C10045 +
            (C12510 - C12511 + C12512 - C12513) * C32285) *
               C31921) *
              C347 +
          ((C12514 * C10043 + C12515 * C10040 +
            (C12499 - C12498 + C12501 - C12500) * C10044 +
            (C12503 - C12502 + C12505 - C12504) * C10041 +
            (C32251 * C2030 - C2662 * C2021 + C32055 * C6849 - C2663 * C6845) *
                C10045 +
            (C32251 * C2039 - C2662 * C2031 + C32055 * C6854 - C2663 * C6851) *
                C32285) *
               C32232 +
           (C12516 * C10043 + C12517 * C10040 +
            (C12507 - C12506 + C12509 - C12508) * C10044 +
            (C12511 - C12510 + C12513 - C12512) * C10041 +
            (C32251 * C2032 - C2662 * C2022 + C32055 * C11864 -
             C2663 * C11863) *
                C10045 +
            (C32251 * C2040 - C2662 * C2033 + C32055 * C11866 -
             C2663 * C11865) *
                C32285) *
               C31921) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
              C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
                 C114 +
             (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
              C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
                 C32010) *
                C32232 +
            ((C7497 - C7498 + C7499 - C7500 + C7501 - C7502 + C7503 - C7504) *
                 C114 +
             (C7505 - C7506 + C7507 - C7508 + C7509 - C7510 + C7511 - C7512) *
                 C32010) *
                C31921) *
               C577 +
           (((C7492 * C349 - C7486 * C359 + C7493 * C681 - C7487 * C686 +
              C7494 * C1113 - C7488 * C1122 + C7495 * C1643 - C32292 * C1646) *
                 C114 +
             (C7492 * C360 - C7486 * C379 + C7493 * C687 - C7487 * C696 +
              C7494 * C1123 - C7488 * C1140 + C7495 * C1647 - C32292 * C1652) *
                 C32010) *
                C32232 +
            ((C8001 - C8002 + C8003 - C8004 + C8005 - C8006 + C8007 - C8008) *
                 C114 +
             (C8009 - C8010 + C8011 - C8012 + C8013 - C8014 + C8015 - C8016) *
                 C32010) *
                C31921) *
               C578) *
              C31956 * C473 +
          ((((C7498 - C7497 + C7500 - C7499 + C7502 - C7501 + C7504 - C7503) *
                 C114 +
             (C7506 - C7505 + C7508 - C7507 + C7510 - C7509 + C7512 - C7511) *
                 C32010) *
                C32232 +
            ((C7513 - C7514 + C7515 - C7516 + C7517 - C7518 + C7519 - C7520) *
                 C114 +
             (C7521 - C7522 + C7523 - C7524 + C7525 - C7526 + C7527 - C7528) *
                 C32010) *
                C31921) *
               C577 +
           (((C8002 - C8001 + C8004 - C8003 + C8006 - C8005 + C8008 - C8007) *
                 C114 +
             (C8010 - C8009 + C8012 - C8011 + C8014 - C8013 + C8016 - C8015) *
                 C32010) *
                C32232 +
            ((C7486 * C363 - C7492 * C351 + C7487 * C690 - C7493 * C683 +
              C7488 * C1126 - C7494 * C1115 + C32292 * C1650 - C7495 * C1645) *
                 C114 +
             (C7486 * C381 - C7492 * C364 + C7487 * C698 - C7493 * C691 +
              C7488 * C1142 - C7494 * C1127 + C32292 * C1654 - C7495 * C1651) *
                 C32010) *
                C31921) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                 C114 +
             (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                 C32010) *
                C2658 +
            ((C2665 - C2666 + C2667 - C2668) * C114 +
             (C2669 - C2670 + C2671 - C2672) * C32010) *
                C2659 +
            C2713 * C2660 + C2714 * C32286) *
               C577 +
           (((C2662 * C349 - C32251 * C359 + C2663 * C681 - C32055 * C686) *
                 C114 +
             (C2662 * C360 - C32251 * C379 + C2663 * C687 - C32055 * C696) *
                 C32010) *
                C2658 +
            ((C3195 - C3196 + C3197 - C3198) * C114 +
             (C3199 - C3200 + C3201 - C3202) * C32010) *
                C2659 +
            ((C3203 - C3204 + C3205 - C3206) * C114 +
             (C3207 - C3208 + C3209 - C3210) * C32010) *
                C2660 +
            ((C3211 - C3212 + C3213 - C3214) * C114 +
             (C3215 - C3216 + C3217 - C3218) * C32010) *
                C32286) *
               C578) *
              C31956 * C473 +
          ((((C2666 - C2665 + C2668 - C2667) * C114 +
             (C2670 - C2669 + C2672 - C2671) * C32010) *
                C2658 +
            ((C2674 - C2673 + C2676 - C2675) * C114 +
             (C2678 - C2677 + C2680 - C2679) * C32010) *
                C2659 +
            ((C2682 - C2681 + C2684 - C2683) * C114 +
             (C2686 - C2685 + C2688 - C2687) * C32010) *
                C2660 +
            ((C2689 - C2690 + C2691 - C2692) * C114 +
             (C2693 - C2694 + C2695 - C2696) * C32010) *
                C32286) *
               C577 +
           (((C3196 - C3195 + C3198 - C3197) * C114 +
             (C3200 - C3199 + C3202 - C3201) * C32010) *
                C2658 +
            ((C3204 - C3203 + C3206 - C3205) * C114 +
             (C3208 - C3207 + C3210 - C3209) * C32010) *
                C2659 +
            ((C3212 - C3211 + C3214 - C3213) * C114 +
             (C3216 - C3215 + C3218 - C3217) * C32010) *
                C2660 +
            ((C32251 * C367 - C2662 * C353 + C32055 * C694 - C2663 * C685) *
                 C114 +
             (C32251 * C383 - C2662 * C368 + C32055 * C700 - C2663 * C695) *
                 C32010) *
                C32286) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                 C10043 +
             (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                 C10040 +
             (C4510 - C4511 + C4512 - C4513) * C10044 +
             (C4514 - C4515 + C4516 - C4517) * C10041 + C12514 * C10045 +
             C12515 * C32285) *
                C32232 +
            ((C2665 - C2666 + C2667 - C2668) * C10043 +
             (C2669 - C2670 + C2671 - C2672) * C10040 + C4958 * C10044 +
             C4959 * C10041 + C12516 * C10045 + C12517 * C32285) *
                C31921) *
               C577 +
           (((C4511 - C4510 + C4513 - C4512) * C10043 +
             (C4515 - C4514 + C4517 - C4516) * C10040 +
             (C4518 - C4519 + C4520 - C4521) * C10044 +
             (C4522 - C4523 + C4524 - C4525) * C10041 +
             (C12498 - C12499 + C12500 - C12501) * C10045 +
             (C12502 - C12503 + C12504 - C12505) * C32285) *
                C32232 +
            (C4960 * C10043 + C4961 * C10040 + C12918 * C10044 +
             C12919 * C10041 + (C12506 - C12507 + C12508 - C12509) * C10045 +
             (C12510 - C12511 + C12512 - C12513) * C32285) *
                C31921) *
               C578) *
              C31956 * C473 +
          ((((C2666 - C2665 + C2668 - C2667) * C10043 +
             (C2670 - C2669 + C2672 - C2671) * C10040 + C4960 * C10044 +
             C4961 * C10041 + C12918 * C10045 + C12919 * C32285) *
                C32232 +
            ((C2674 - C2673 + C2676 - C2675) * C10043 +
             (C2678 - C2677 + C2680 - C2679) * C10040 + C4962 * C10044 +
             C4963 * C10041 + (C4534 - C4535 + C4536 - C4537) * C10045 +
             (C4538 - C4539 + C4540 - C4541) * C32285) *
                C31921) *
               C577 +
           ((C4958 * C10043 + C4959 * C10040 + C12516 * C10044 +
             C12517 * C10041 + (C12507 - C12506 + C12509 - C12508) * C10045 +
             (C12511 - C12510 + C12513 - C12512) * C32285) *
                C32232 +
            (C4212 * C10043 + C4213 * C10040 +
             (C4535 - C4534 + C4537 - C4536) * C10044 +
             (C4539 - C4538 + C4541 - C4540) * C10041 +
             (C32251 * C2028 - C2662 * C2020 + C32055 * C2545 - C2663 * C2540) *
                 C10045 +
             (C32251 * C2038 - C2662 * C2029 + C32055 * C2549 - C2663 * C2546) *
                 C32285) *
                C31921) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C114 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C32010) *
               C2658 +
           ((C2665 - C2666 + C2667 - C2668) * C114 +
            (C2669 - C2670 + C2671 - C2672) * C32010) *
               C2659 +
           C2713 * C2660 + C2714 * C32286) *
              C31970 * C240 +
          (((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                C114 +
            (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                C32010) *
               C2658 +
           ((C2662 * C245 - C32251 * C256 + C2663 * C250 - C32055 * C266) *
                C114 +
            (C2662 * C257 - C32251 * C275 + C2663 * C267 - C32055 * C280) *
                C32010) *
               C2659 +
           ((C2662 * C246 - C32251 * C258 + C2663 * C251 - C32055 * C268) *
                C114 +
            (C2662 * C259 - C32251 * C276 + C2663 * C269 - C32055 * C281) *
                C32010) *
               C2660 +
           ((C2662 * C247 - C32251 * C260 + C2663 * C252 - C32055 * C270) *
                C114 +
            (C2662 * C261 - C32251 * C277 + C2663 * C271 - C32055 * C282) *
                C32010) *
               C32286) *
              C31970 * C241 +
          (((C32251 * C264 - C2662 * C249 + C32055 * C985 - C2663 * C979) *
                C114 +
            (C32251 * C279 - C2662 * C265 + C32055 * C997 - C2663 * C986) *
                C32010) *
               C2658 +
           ((C32251 * C266 - C2662 * C250 + C32055 * C987 - C2663 * C980) *
                C114 +
            (C32251 * C280 - C2662 * C267 + C32055 * C998 - C2663 * C988) *
                C32010) *
               C2659 +
           ((C32251 * C268 - C2662 * C251 + C32055 * C989 - C2663 * C981) *
                C114 +
            (C32251 * C281 - C2662 * C269 + C32055 * C999 - C2663 * C990) *
                C32010) *
               C2660 +
           ((C32251 * C270 - C2662 * C252 + C32055 * C1296 - C2663 * C1295) *
                C114 +
            (C32251 * C282 - C2662 * C271 + C32055 * C1298 - C2663 * C1297) *
                C32010) *
               C32286) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C114 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C32010) *
               C2658 +
           ((C2665 - C2666 + C2667 - C2668) * C114 +
            (C2669 - C2670 + C2671 - C2672) * C32010) *
               C2659 +
           C2713 * C2660 + C2714 * C32286) *
              C31970 * C31956 * C110 +
          (((C2666 - C2665 + C2668 - C2667) * C114 +
            (C2670 - C2669 + C2672 - C2671) * C32010) *
               C2658 +
           ((C2674 - C2673 + C2676 - C2675) * C114 +
            (C2678 - C2677 + C2680 - C2679) * C32010) *
               C2659 +
           ((C2682 - C2681 + C2684 - C2683) * C114 +
            (C2686 - C2685 + C2688 - C2687) * C32010) *
               C2660 +
           ((C2689 - C2690 + C2691 - C2692) * C114 +
            (C2693 - C2694 + C2695 - C2696) * C32010) *
               C32286) *
              C31970 * C31956 * C111 +
          (C2713 * C2658 + C2714 * C2659 +
           ((C2690 - C2689 + C2692 - C2691) * C114 +
            (C2694 - C2693 + C2696 - C2695) * C32010) *
               C2660 +
           ((C32251 * C132 - C2662 * C120 + C32055 * C476 - C2663 * C475) *
                C114 +
            (C32251 * C141 - C2662 * C133 + C32055 * C478 - C2663 * C477) *
                C32010) *
               C32286) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
             C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
                C114 +
            (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
             C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
                C32010) *
               C32232 +
           ((C7497 - C7498 + C7499 - C7500 + C7501 - C7502 + C7503 - C7504) *
                C114 +
            (C7505 - C7506 + C7507 - C7508 + C7509 - C7510 + C7511 - C7512) *
                C32010) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C7498 - C7497 + C7500 - C7499 + C7502 - C7501 + C7504 - C7503) *
                C114 +
            (C7506 - C7505 + C7508 - C7507 + C7510 - C7509 + C7512 - C7511) *
                C32010) *
               C32232 +
           ((C7513 - C7514 + C7515 - C7516 + C7517 - C7518 + C7519 - C7520) *
                C114 +
            (C7521 - C7522 + C7523 - C7524 + C7525 - C7526 + C7527 - C7528) *
                C32010) *
               C31921) *
              C31970 * C31956 * C111 +
          (((C7514 - C7513 + C7516 - C7515 + C7518 - C7517 + C7520 - C7519) *
                C114 +
            (C7522 - C7521 + C7524 - C7523 + C7526 - C7525 + C7528 - C7527) *
                C32010) *
               C32232 +
           ((C7486 * C128 - C7492 * C118 + C7487 * C260 - C7493 * C247 +
             C7488 * C270 - C7494 * C252 + C32292 * C1296 - C7495 * C1295) *
                C114 +
            (C7486 * C139 - C7492 * C129 + C7487 * C277 - C7493 * C261 +
             C7488 * C282 - C7494 * C271 + C32292 * C1298 - C7495 * C1297) *
                C32010) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
             C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
                C114 +
            (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
             C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
                C32010) *
               C32232 +
           ((C7497 - C7498 + C7499 - C7500 + C7501 - C7502 + C7503 - C7504) *
                C114 +
            (C7505 - C7506 + C7507 - C7508 + C7509 - C7510 + C7511 - C7512) *
                C32010) *
               C31921) *
              C31970 * C240 +
          (((C7492 * C244 - C7486 * C254 + C7493 * C249 - C7487 * C264 +
             C7494 * C979 - C7488 * C985 + C7495 * C982 - C32292 * C991) *
                C114 +
            (C7492 * C255 - C7486 * C274 + C7493 * C265 - C7487 * C279 +
             C7494 * C986 - C7488 * C997 + C7495 * C992 - C32292 * C1000) *
                C32010) *
               C32232 +
           ((C7492 * C245 - C7486 * C256 + C7493 * C250 - C7487 * C266 +
             C7494 * C980 - C7488 * C987 + C7495 * C983 - C32292 * C993) *
                C114 +
            (C7492 * C257 - C7486 * C275 + C7493 * C267 - C7487 * C280 +
             C7494 * C988 - C7488 * C998 + C7495 * C994 - C32292 * C1001) *
                C32010) *
               C31921) *
              C31970 * C241 +
          (((C7486 * C264 - C7492 * C249 + C7487 * C985 - C7493 * C979 +
             C7488 * C991 - C7494 * C982 + C32292 * C6176 - C7495 * C6174) *
                C114 +
            (C7486 * C279 - C7492 * C265 + C7487 * C997 - C7493 * C986 +
             C7488 * C1000 - C7494 * C992 + C32292 * C6180 - C7495 * C6177) *
                C32010) *
               C32232 +
           ((C7486 * C266 - C7492 * C250 + C7487 * C987 - C7493 * C980 +
             C7488 * C993 - C7494 * C983 + C32292 * C6339 - C7495 * C6338) *
                C114 +
            (C7486 * C280 - C7492 * C267 + C7487 * C998 - C7493 * C988 +
             C7488 * C1001 - C7494 * C994 + C32292 * C6341 - C7495 * C6340) *
                C32010) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C10043 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C10040 +
            (C4510 - C4511 + C4512 - C4513) * C10044 +
            (C4514 - C4515 + C4516 - C4517) * C10041 +
            (C4519 - C4518 + C4521 - C4520) * C10045 +
            (C4523 - C4522 + C4525 - C4524) * C32285) *
               C32232 +
           ((C2665 - C2666 + C2667 - C2668) * C10043 +
            (C2669 - C2670 + C2671 - C2672) * C10040 + C4958 * C10044 +
            C4959 * C10041 + (C4527 - C4526 + C4529 - C4528) * C10045 +
            (C4531 - C4530 + C4533 - C4532) * C32285) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C2666 - C2665 + C2668 - C2667) * C10043 +
            (C2670 - C2669 + C2672 - C2671) * C10040 + C4960 * C10044 +
            C4961 * C10041 + (C4526 - C4527 + C4528 - C4529) * C10045 +
            (C4530 - C4531 + C4532 - C4533) * C32285) *
               C32232 +
           ((C2674 - C2673 + C2676 - C2675) * C10043 +
            (C2678 - C2677 + C2680 - C2679) * C10040 + C4962 * C10044 +
            C4963 * C10041 + (C4534 - C4535 + C4536 - C4537) * C10045 +
            (C4538 - C4539 + C4540 - C4541) * C32285) *
               C31921) *
              C31970 * C31956 * C111 +
          ((C2705 * C10043 + C2706 * C10040 + C4212 * C10044 + C4213 * C10041 +
            (C4535 - C4534 + C4537 - C4536) * C10045 +
            (C4539 - C4538 + C4541 - C4540) * C32285) *
               C32232 +
           (C2707 * C10043 + C2708 * C10040 +
            (C3212 - C3211 + C3214 - C3213) * C10044 +
            (C3216 - C3215 + C3218 - C3217) * C10041 +
            (C32251 * C375 - C2662 * C357 + C32055 * C2213 - C2663 * C2212) *
                C10045 +
            (C32251 * C387 - C2662 * C376 + C32055 * C2215 - C2663 * C2214) *
                C32285) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C10043 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C10040 +
            (C4510 - C4511 + C4512 - C4513) * C10044 +
            (C4514 - C4515 + C4516 - C4517) * C10041 +
            (C4519 - C4518 + C4521 - C4520) * C10045 +
            (C4523 - C4522 + C4525 - C4524) * C32285) *
               C32232 +
           ((C2665 - C2666 + C2667 - C2668) * C10043 +
            (C2669 - C2670 + C2671 - C2672) * C10040 + C4958 * C10044 +
            C4959 * C10041 + (C4527 - C4526 + C4529 - C4528) * C10045 +
            (C4531 - C4530 + C4533 - C4532) * C32285) *
               C31921) *
              C31970 * C240 +
          (((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                C10043 +
            (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                C10040 +
            (C5158 - C5159 + C5160 - C5161) * C10044 +
            (C5162 - C5163 + C5164 - C5165) * C10041 +
            (C2662 * C1116 - C32251 * C1128 + C2663 * C1117 - C32055 * C1129) *
                C10045 +
            (C2662 * C1130 - C32251 * C1143 + C2663 * C1131 - C32055 * C1144) *
                C32285) *
               C32232 +
           ((C3041 - C3042 + C3043 - C3044) * C10043 +
            (C3045 - C3046 + C3047 - C3048) * C10040 +
            (C4736 - C4737 + C4738 - C4739) * C10044 +
            (C4740 - C4741 + C4742 - C4743) * C10041 +
            (C2662 * C1118 - C32251 * C1132 + C2663 * C1119 - C32055 * C1133) *
                C10045 +
            (C2662 * C1134 - C32251 * C1145 + C2663 * C1135 - C32055 * C1146) *
                C32285) *
               C31921) *
              C31970 * C241 +
          (((C32251 * C264 - C2662 * C249 + C32055 * C985 - C2663 * C979) *
                C10043 +
            (C32251 * C279 - C2662 * C265 + C32055 * C997 - C2663 * C986) *
                C10040 +
            (C32251 * C1122 - C2662 * C1113 + C32055 * C1646 - C2663 * C1643) *
                C10044 +
            (C32251 * C1140 - C2662 * C1123 + C32055 * C1652 - C2663 * C1647) *
                C10041 +
            (C32251 * C1129 - C2662 * C1117 + C32055 * C6249 - C2663 * C6245) *
                C10045 +
            (C32251 * C1144 - C2662 * C1131 + C32055 * C6254 - C2663 * C6251) *
                C32285) *
               C32232 +
           ((C32251 * C266 - C2662 * C250 + C32055 * C987 - C2663 * C980) *
                C10043 +
            (C32251 * C280 - C2662 * C267 + C32055 * C998 - C2663 * C988) *
                C10040 +
            (C32251 * C1124 - C2662 * C1114 + C32055 * C1648 - C2663 * C1644) *
                C10044 +
            (C32251 * C1141 - C2662 * C1125 + C32055 * C1653 - C2663 * C1649) *
                C10041 +
            (C32251 * C1133 - C2662 * C1119 + C32055 * C7049 - C2663 * C7048) *
                C10045 +
            (C32251 * C1146 - C2662 * C1135 + C32055 * C7051 - C2663 * C7050) *
                C32285) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
             C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
                C3448 +
            (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
             C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
                C32252 +
            (C9493 - C9494 + C9495 - C9496 + C9497 - C9498 + C9499 - C9500) *
                C3449 +
            (C9501 - C9502 + C9503 - C9504 + C9505 - C9506 + C9507 - C9508) *
                C32097) *
               C31911 * C31970 * C471 +
           ((C7492 * C244 - C7486 * C254 + C7493 * C249 - C7487 * C264 +
             C7494 * C979 - C7488 * C985 + C7495 * C982 - C32292 * C991) *
                C3448 +
            (C7492 * C255 - C7486 * C274 + C7493 * C265 - C7487 * C279 +
             C7494 * C986 - C7488 * C997 + C7495 * C992 - C32292 * C1000) *
                C32252 +
            (C7492 * C681 - C7486 * C686 + C7493 * C1113 - C7487 * C1122 +
             C7494 * C1643 - C7488 * C1646 + C7495 * C6244 - C32292 * C6247) *
                C3449 +
            (C7492 * C687 - C7486 * C696 + C7493 * C1123 - C7487 * C1140 +
             C7494 * C1647 - C7488 * C1652 + C7495 * C6248 - C32292 * C6253) *
                C32097) *
               C31911 * C31970 * C472) *
              C473 +
          (((C7498 - C7497 + C7500 - C7499 + C7502 - C7501 + C7504 - C7503) *
                C3448 +
            (C7506 - C7505 + C7508 - C7507 + C7510 - C7509 + C7512 - C7511) *
                C32252 +
            (C8001 - C8002 + C8003 - C8004 + C8005 - C8006 + C8007 - C8008) *
                C3449 +
            (C8009 - C8010 + C8011 - C8012 + C8013 - C8014 + C8015 - C8016) *
                C32097) *
               C31911 * C31970 * C471 +
           ((C7856 - C7855 + C7858 - C7857 + C7860 - C7859 + C7862 - C7861) *
                C3448 +
            (C7864 - C7863 + C7866 - C7865 + C7868 - C7867 + C7870 - C7869) *
                C32252 +
            (C7486 * C688 - C7492 * C682 + C7487 * C1124 - C7493 * C1114 +
             C7488 * C1648 - C7494 * C1644 + C32292 * C6425 - C7495 * C6424) *
                C3449 +
            (C7486 * C697 - C7492 * C689 + C7487 * C1141 - C7493 * C1125 +
             C7488 * C1653 - C7494 * C1649 + C32292 * C6427 - C7495 * C6426) *
                C32097) *
               C31911 * C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                 C3448 +
             (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                 C32252 +
             (C4510 - C4511 + C4512 - C4513) * C3449 +
             (C4514 - C4515 + C4516 - C4517) * C32097) *
                C814 +
            ((C2665 - C2666 + C2667 - C2668) * C3448 +
             (C2669 - C2670 + C2671 - C2672) * C32252 +
             (C3196 - C3195 + C3198 - C3197) * C3449 +
             (C3200 - C3199 + C3202 - C3201) * C32097) *
                C815 +
            C4217 * C32271) *
               C31970 * C471 +
           (((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                 C3448 +
             (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                 C32252 +
             (C2662 * C681 - C32251 * C686 + C2663 * C1113 - C32055 * C1122) *
                 C3449 +
             (C2662 * C687 - C32251 * C696 + C2663 * C1123 - C32055 * C1140) *
                 C32097) *
                C814 +
            ((C3041 - C3042 + C3043 - C3044) * C3448 +
             (C3045 - C3046 + C3047 - C3048) * C32252 +
             (C4736 - C4737 + C4738 - C4739) * C3449 +
             (C4740 - C4741 + C4742 - C4743) * C32097) *
                C815 +
            ((C3049 - C3050 + C3051 - C3052) * C3448 +
             (C3053 - C3054 + C3055 - C3056) * C32252 +
             (C4744 - C4745 + C4746 - C4747) * C3449 +
             (C4748 - C4749 + C4750 - C4751) * C32097) *
                C32271) *
               C31970 * C472) *
              C473 +
          ((((C2666 - C2665 + C2668 - C2667) * C3448 +
             (C2670 - C2669 + C2672 - C2671) * C32252 +
             (C3195 - C3196 + C3197 - C3198) * C3449 +
             (C3199 - C3200 + C3201 - C3202) * C32097) *
                C814 +
            ((C2674 - C2673 + C2676 - C2675) * C3448 +
             (C2678 - C2677 + C2680 - C2679) * C32252 +
             (C3203 - C3204 + C3205 - C3206) * C3449 +
             (C3207 - C3208 + C3209 - C3210) * C32097) *
                C815 +
            ((C2682 - C2681 + C2684 - C2683) * C3448 +
             (C2686 - C2685 + C2688 - C2687) * C32252 +
             (C3211 - C3212 + C3213 - C3214) * C3449 +
             (C3215 - C3216 + C3217 - C3218) * C32097) *
                C32271) *
               C31970 * C471 +
           (((C3042 - C3041 + C3044 - C3043) * C3448 +
             (C3046 - C3045 + C3048 - C3047) * C32252 +
             (C4737 - C4736 + C4739 - C4738) * C3449 +
             (C4741 - C4740 + C4743 - C4742) * C32097) *
                C814 +
            ((C3050 - C3049 + C3052 - C3051) * C3448 +
             (C3054 - C3053 + C3056 - C3055) * C32252 +
             (C4745 - C4744 + C4747 - C4746) * C3449 +
             (C4749 - C4748 + C4751 - C4750) * C32097) *
                C815 +
            ((C3058 - C3057 + C3060 - C3059) * C3448 +
             (C3062 - C3061 + C3064 - C3063) * C32252 +
             (C32251 * C692 - C2662 * C684 + C32055 * C1470 - C2663 * C1469) *
                 C3449 +
             (C32251 * C699 - C2662 * C693 + C32055 * C1472 - C2663 * C1471) *
                 C32097) *
                C32271) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C13223 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C13219 +
            (C4510 - C4511 + C4512 - C4513) * C13224 +
            (C4514 - C4515 + C4516 - C4517) * C13220 + C12514 * C13225 +
            C12515 * C13221 + C14128 * C13226 + C14129 * C32298) *
               C31911 * C31970 * C471 +
           ((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                C13223 +
            (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                C13219 +
            (C5158 - C5159 + C5160 - C5161) * C13224 +
            (C5162 - C5163 + C5164 - C5165) * C13220 +
            (C13114 - C13115 + C13116 - C13117) * C13225 +
            (C13118 - C13119 + C13120 - C13121) * C13221 +
            (C2662 * C2538 - C32251 * C2541 + C2663 * C6844 - C32055 * C6847) *
                C13226 +
            (C2662 * C2542 - C32251 * C2547 + C2663 * C6848 - C32055 * C6853) *
                C32298) *
               C31911 * C31970 * C472) *
              C473 +
          (((C2666 - C2665 + C2668 - C2667) * C13223 +
            (C2670 - C2669 + C2672 - C2671) * C13219 + C4960 * C13224 +
            C4961 * C13220 + C12918 * C13225 + C12919 * C13221 +
            (C12506 - C12507 + C12508 - C12509) * C13226 +
            (C12510 - C12511 + C12512 - C12513) * C32298) *
               C31911 * C31970 * C471 +
           ((C3042 - C3041 + C3044 - C3043) * C13223 +
            (C3046 - C3045 + C3048 - C3047) * C13219 +
            (C4737 - C4736 + C4739 - C4738) * C13224 +
            (C4741 - C4740 + C4743 - C4742) * C13220 +
            (C12713 - C12712 + C12715 - C12714) * C13225 +
            (C12717 - C12716 + C12719 - C12718) * C13221 +
            (C32251 * C2543 - C2662 * C2539 + C32055 * C7199 - C2663 * C7198) *
                C13226 +
            (C32251 * C2548 - C2662 * C2544 + C32055 * C7201 - C2663 * C7200) *
                C32298) *
               C31911 * C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
             C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
                C3448 +
            (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
             C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
                C32252 +
            (C9493 - C9494 + C9495 - C9496 + C9497 - C9498 + C9499 - C9500) *
                C3449 +
            (C9501 - C9502 + C9503 - C9504 + C9505 - C9506 + C9507 - C9508) *
                C32097) *
               C31911 * C577 +
           ((C9494 - C9493 + C9496 - C9495 + C9498 - C9497 + C9500 - C9499) *
                C3448 +
            (C9502 - C9501 + C9504 - C9503 + C9506 - C9505 + C9508 - C9507) *
                C32252 +
            (C9509 - C9510 + C9511 - C9512 + C9513 - C9514 + C9515 - C9516) *
                C3449 +
            (C9517 - C9518 + C9519 - C9520 + C9521 - C9522 + C9523 - C9524) *
                C32097) *
               C31911 * C578) *
              C471 +
          (((C7492 * C244 - C7486 * C254 + C7493 * C249 - C7487 * C264 +
             C7494 * C979 - C7488 * C985 + C7495 * C982 - C32292 * C991) *
                C3448 +
            (C7492 * C255 - C7486 * C274 + C7493 * C265 - C7487 * C279 +
             C7494 * C986 - C7488 * C997 + C7495 * C992 - C32292 * C1000) *
                C32252 +
            (C9915 - C9916 + C9917 - C9918 + C9919 - C9920 + C9921 - C9922) *
                C3449 +
            (C9923 - C9924 + C9925 - C9926 + C9927 - C9928 + C9929 - C9930) *
                C32097) *
               C31911 * C577 +
           ((C9916 - C9915 + C9918 - C9917 + C9920 - C9919 + C9922 - C9921) *
                C3448 +
            (C9924 - C9923 + C9926 - C9925 + C9928 - C9927 + C9930 - C9929) *
                C32252 +
            (C7486 * C1128 - C7492 * C1116 + C7487 * C1129 - C7493 * C1117 +
             C7488 * C6249 - C7494 * C6245 + C32292 * C6250 - C7495 * C6246) *
                C3449 +
            (C7486 * C1143 - C7492 * C1130 + C7487 * C1144 - C7493 * C1131 +
             C7488 * C6254 - C7494 * C6251 + C32292 * C6255 - C7495 * C6252) *
                C32097) *
               C31911 * C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                 C3448 +
             (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                 C32252 +
             (C4510 - C4511 + C4512 - C4513) * C3449 +
             (C4514 - C4515 + C4516 - C4517) * C32097) *
                C814 +
            ((C2665 - C2666 + C2667 - C2668) * C3448 +
             (C2669 - C2670 + C2671 - C2672) * C32252 + C4958 * C3449 +
             C4959 * C32097) *
                C815 +
            C4217 * C32271) *
               C577 +
           (((C4511 - C4510 + C4513 - C4512) * C3448 +
             (C4515 - C4514 + C4517 - C4516) * C32252 +
             (C4518 - C4519 + C4520 - C4521) * C3449 +
             (C4522 - C4523 + C4524 - C4525) * C32097) *
                C814 +
            (C4960 * C3448 + C4961 * C32252 +
             (C4526 - C4527 + C4528 - C4529) * C3449 +
             (C4530 - C4531 + C4532 - C4533) * C32097) *
                C815 +
            (C4962 * C3448 + C4963 * C32252 +
             (C4534 - C4535 + C4536 - C4537) * C3449 +
             (C4538 - C4539 + C4540 - C4541) * C32097) *
                C32271) *
               C578) *
              C471 +
          ((((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                 C3448 +
             (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                 C32252 +
             (C5158 - C5159 + C5160 - C5161) * C3449 +
             (C5162 - C5163 + C5164 - C5165) * C32097) *
                C814 +
            ((C3041 - C3042 + C3043 - C3044) * C3448 +
             (C3045 - C3046 + C3047 - C3048) * C32252 +
             (C4736 - C4737 + C4738 - C4739) * C3449 +
             (C4740 - C4741 + C4742 - C4743) * C32097) *
                C815 +
            ((C3049 - C3050 + C3051 - C3052) * C3448 +
             (C3053 - C3054 + C3055 - C3056) * C32252 +
             (C4744 - C4745 + C4746 - C4747) * C3449 +
             (C4748 - C4749 + C4750 - C4751) * C32097) *
                C32271) *
               C577 +
           (((C5159 - C5158 + C5161 - C5160) * C3448 +
             (C5163 - C5162 + C5165 - C5164) * C32252 +
             (C32251 * C1128 - C2662 * C1116 + C32055 * C1129 - C2663 * C1117) *
                 C3449 +
             (C32251 * C1143 - C2662 * C1130 + C32055 * C1144 - C2663 * C1131) *
                 C32097) *
                C814 +
            ((C4737 - C4736 + C4739 - C4738) * C3448 +
             (C4741 - C4740 + C4743 - C4742) * C32252 +
             (C32251 * C1132 - C2662 * C1118 + C32055 * C1133 - C2663 * C1119) *
                 C3449 +
             (C32251 * C1145 - C2662 * C1134 + C32055 * C1146 - C2663 * C1135) *
                 C32097) *
                C815 +
            ((C4745 - C4744 + C4747 - C4746) * C3448 +
             (C4749 - C4748 + C4751 - C4750) * C32252 +
             (C32251 * C1136 - C2662 * C1120 + C32055 * C1137 - C2663 * C1121) *
                 C3449 +
             (C32251 * C1147 - C2662 * C1138 + C32055 * C1148 - C2663 * C1139) *
                 C32097) *
                C32271) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C13223 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C13219 +
            (C4510 - C4511 + C4512 - C4513) * C13224 +
            (C4514 - C4515 + C4516 - C4517) * C13220 + C12514 * C13225 +
            C12515 * C13221 + C14128 * C13226 + C14129 * C32298) *
               C31911 * C577 +
           ((C4511 - C4510 + C4513 - C4512) * C13223 +
            (C4515 - C4514 + C4517 - C4516) * C13219 +
            (C4518 - C4519 + C4520 - C4521) * C13224 +
            (C4522 - C4523 + C4524 - C4525) * C13220 +
            (C12498 - C12499 + C12500 - C12501) * C13225 +
            (C12502 - C12503 + C12504 - C12505) * C13221 +
            (C14120 - C14121 + C14122 - C14123) * C13226 +
            (C14124 - C14125 + C14126 - C14127) * C32298) *
               C31911 * C578) *
              C471 +
          (((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                C13223 +
            (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                C13219 +
            (C5158 - C5159 + C5160 - C5161) * C13224 +
            (C5162 - C5163 + C5164 - C5165) * C13220 +
            (C13114 - C13115 + C13116 - C13117) * C13225 +
            (C13118 - C13119 + C13120 - C13121) * C13221 +
            (C14520 - C14521 + C14522 - C14523) * C13226 +
            (C14524 - C14525 + C14526 - C14527) * C32298) *
               C31911 * C577 +
           ((C5159 - C5158 + C5161 - C5160) * C13223 +
            (C5163 - C5162 + C5165 - C5164) * C13219 +
            (C13115 - C13114 + C13117 - C13116) * C13224 +
            (C13119 - C13118 + C13121 - C13120) * C13220 +
            (C14521 - C14520 + C14523 - C14522) * C13225 +
            (C14525 - C14524 + C14527 - C14526) * C13221 +
            (C32251 * C6849 - C2662 * C6845 + C32055 * C6850 - C2663 * C6846) *
                C13226 +
            (C32251 * C6854 - C2662 * C6851 + C32055 * C6855 - C2663 * C6852) *
                C32298) *
               C31911 * C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                    C3448 +
                (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                    C32252 +
                (C32251 * C359 - C2662 * C349 + C32055 * C686 - C2663 * C681) *
                    C3449 +
                (C32251 * C379 - C2662 * C360 + C32055 * C696 - C2663 * C687) *
                    C32097) *
                   C814 +
               ((C2665 - C2666 + C2667 - C2668) * C3448 +
                (C2669 - C2670 + C2671 - C2672) * C32252 +
                (C3196 - C3195 + C3198 - C3197) * C3449 +
                (C3200 - C3199 + C3202 - C3201) * C32097) *
                   C815 +
               C4217 * C32271) *
                  C31970 * C31956 * C110 +
              (((C2666 - C2665 + C2668 - C2667) * C3448 +
                (C2670 - C2669 + C2672 - C2671) * C32252 +
                (C3195 - C3196 + C3197 - C3198) * C3449 +
                (C3199 - C3200 + C3201 - C3202) * C32097) *
                   C814 +
               ((C2674 - C2673 + C2676 - C2675) * C3448 +
                (C2678 - C2677 + C2680 - C2679) * C32252 +
                (C3203 - C3204 + C3205 - C3206) * C3449 +
                (C3207 - C3208 + C3209 - C3210) * C32097) *
                   C815 +
               ((C2682 - C2681 + C2684 - C2683) * C3448 +
                (C2686 - C2685 + C2688 - C2687) * C32252 +
                (C3211 - C3212 + C3213 - C3214) * C3449 +
                (C3215 - C3216 + C3217 - C3218) * C32097) *
                   C32271) *
                  C31970 * C31956 * C111 +
              (C4217 * C814 +
               (C2707 * C3448 + C2708 * C32252 +
                (C3212 - C3211 + C3214 - C3213) * C3449 +
                (C3216 - C3215 + C3218 - C3217) * C32097) *
                   C815 +
               ((C2690 - C2689 + C2692 - C2691) * C3448 +
                (C2694 - C2693 + C2696 - C2695) * C32252 +
                (C32251 * C367 - C2662 * C353 + C32055 * C694 - C2663 * C685) *
                    C3449 +
                (C32251 * C383 - C2662 * C368 + C32055 * C700 - C2663 * C695) *
                    C32097) *
                   C32271) *
                  C31970 * C31956 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                    C3448 +
                (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                    C32252 +
                (C32251 * C359 - C2662 * C349 + C32055 * C686 - C2663 * C681) *
                    C3449 +
                (C32251 * C379 - C2662 * C360 + C32055 * C696 - C2663 * C687) *
                    C32097) *
                   C814 +
               ((C2665 - C2666 + C2667 - C2668) * C3448 +
                (C2669 - C2670 + C2671 - C2672) * C32252 +
                (C3196 - C3195 + C3198 - C3197) * C3449 +
                (C3200 - C3199 + C3202 - C3201) * C32097) *
                   C815 +
               C4217 * C32271) *
                  C31970 * C240 +
              (((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                    C3448 +
                (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                    C32252 +
                (C2662 * C681 - C32251 * C686 + C2663 * C1113 -
                 C32055 * C1122) *
                    C3449 +
                (C2662 * C687 - C32251 * C696 + C2663 * C1123 -
                 C32055 * C1140) *
                    C32097) *
                   C814 +
               ((C3041 - C3042 + C3043 - C3044) * C3448 +
                (C3045 - C3046 + C3047 - C3048) * C32252 +
                (C2662 * C682 - C32251 * C688 + C2663 * C1114 -
                 C32055 * C1124) *
                    C3449 +
                (C2662 * C689 - C32251 * C697 + C2663 * C1125 -
                 C32055 * C1141) *
                    C32097) *
                   C815 +
               ((C3049 - C3050 + C3051 - C3052) * C3448 +
                (C3053 - C3054 + C3055 - C3056) * C32252 +
                (C2662 * C683 - C32251 * C690 + C2663 * C1115 -
                 C32055 * C1126) *
                    C3449 +
                (C2662 * C691 - C32251 * C698 + C2663 * C1127 -
                 C32055 * C1142) *
                    C32097) *
                   C32271) *
                  C31970 * C241 +
              (((C32251 * C264 - C2662 * C249 + C32055 * C985 - C2663 * C979) *
                    C3448 +
                (C32251 * C279 - C2662 * C265 + C32055 * C997 - C2663 * C986) *
                    C32252 +
                (C32251 * C1122 - C2662 * C1113 + C32055 * C1646 -
                 C2663 * C1643) *
                    C3449 +
                (C32251 * C1140 - C2662 * C1123 + C32055 * C1652 -
                 C2663 * C1647) *
                    C32097) *
                   C814 +
               ((C32251 * C266 - C2662 * C250 + C32055 * C987 - C2663 * C980) *
                    C3448 +
                (C32251 * C280 - C2662 * C267 + C32055 * C998 - C2663 * C988) *
                    C32252 +
                (C32251 * C1124 - C2662 * C1114 + C32055 * C1648 -
                 C2663 * C1644) *
                    C3449 +
                (C32251 * C1141 - C2662 * C1125 + C32055 * C1653 -
                 C2663 * C1649) *
                    C32097) *
                   C815 +
               ((C32251 * C268 - C2662 * C251 + C32055 * C989 - C2663 * C981) *
                    C3448 +
                (C32251 * C281 - C2662 * C269 + C32055 * C999 - C2663 * C990) *
                    C32252 +
                (C32251 * C1126 - C2662 * C1115 + C32055 * C1650 -
                 C2663 * C1645) *
                    C3449 +
                (C32251 * C1142 - C2662 * C1127 + C32055 * C1654 -
                 C2663 * C1651) *
                    C32097) *
                   C32271) *
                  C31970 * C242) *
             C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C3448 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C32252 +
            (C4510 - C4511 + C4512 - C4513) * C3449 +
            (C4514 - C4515 + C4516 - C4517) * C32097) *
               C814 +
           ((C2665 - C2666 + C2667 - C2668) * C3448 +
            (C2669 - C2670 + C2671 - C2672) * C32252 +
            (C3196 - C3195 + C3198 - C3197) * C3449 +
            (C3200 - C3199 + C3202 - C3201) * C32097) *
               C815 +
           C4217 * C32271) *
              C346 +
          (((C4511 - C4510 + C4513 - C4512) * C3448 +
            (C4515 - C4514 + C4517 - C4516) * C32252 +
            (C4518 - C4519 + C4520 - C4521) * C3449 +
            (C4522 - C4523 + C4524 - C4525) * C32097) *
               C814 +
           ((C3195 - C3196 + C3197 - C3198) * C3448 +
            (C3199 - C3200 + C3201 - C3202) * C32252 +
            (C4526 - C4527 + C4528 - C4529) * C3449 +
            (C4530 - C4531 + C4532 - C4533) * C32097) *
               C815 +
           ((C3203 - C3204 + C3205 - C3206) * C3448 +
            (C3207 - C3208 + C3209 - C3210) * C32252 +
            (C4534 - C4535 + C4536 - C4537) * C3449 +
            (C4538 - C4539 + C4540 - C4541) * C32097) *
               C32271) *
              C347 +
          (((C4519 - C4518 + C4521 - C4520) * C3448 +
            (C4523 - C4522 + C4525 - C4524) * C32252 +
            (C32251 * C2024 - C2662 * C2018 + C32055 * C2541 - C2663 * C2538) *
                C3449 +
            (C32251 * C2036 - C2662 * C2025 + C32055 * C2547 - C2663 * C2542) *
                C32097) *
               C814 +
           ((C4527 - C4526 + C4529 - C4528) * C3448 +
            (C4531 - C4530 + C4533 - C4532) * C32252 +
            (C32251 * C2026 - C2662 * C2019 + C32055 * C2543 - C2663 * C2539) *
                C3449 +
            (C32251 * C2037 - C2662 * C2027 + C32055 * C2548 - C2663 * C2544) *
                C32097) *
               C815 +
           ((C4535 - C4534 + C4537 - C4536) * C3448 +
            (C4539 - C4538 + C4541 - C4540) * C32252 +
            (C32251 * C2028 - C2662 * C2020 + C32055 * C2545 - C2663 * C2540) *
                C3449 +
            (C32251 * C2038 - C2662 * C2029 + C32055 * C2549 - C2663 * C2546) *
                C32097) *
               C32271) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
            C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
               C3448 +
           (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
            C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
               C32252 +
           (C7486 * C359 - C7492 * C349 + C7487 * C686 - C7493 * C681 +
            C7488 * C1122 - C7494 * C1113 + C32292 * C1646 - C7495 * C1643) *
               C3449 +
           (C7486 * C379 - C7492 * C360 + C7487 * C696 - C7493 * C687 +
            C7488 * C1140 - C7494 * C1123 + C32292 * C1652 - C7495 * C1647) *
               C32097) *
              C31911 * C31970 * C31956 * C110 +
          ((C7498 - C7497 + C7500 - C7499 + C7502 - C7501 + C7504 - C7503) *
               C3448 +
           (C7506 - C7505 + C7508 - C7507 + C7510 - C7509 + C7512 - C7511) *
               C32252 +
           (C8001 - C8002 + C8003 - C8004 + C8005 - C8006 + C8007 - C8008) *
               C3449 +
           (C8009 - C8010 + C8011 - C8012 + C8013 - C8014 + C8015 - C8016) *
               C32097) *
              C31911 * C31970 * C31956 * C111 +
          ((C7514 - C7513 + C7516 - C7515 + C7518 - C7517 + C7520 - C7519) *
               C3448 +
           (C7522 - C7521 + C7524 - C7523 + C7526 - C7525 + C7528 - C7527) *
               C32252 +
           (C7486 * C363 - C7492 * C351 + C7487 * C690 - C7493 * C683 +
            C7488 * C1126 - C7494 * C1115 + C32292 * C1650 - C7495 * C1645) *
               C3449 +
           (C7486 * C381 - C7492 * C364 + C7487 * C698 - C7493 * C691 +
            C7488 * C1142 - C7494 * C1127 + C32292 * C1654 - C7495 * C1651) *
               C32097) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
            C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
               C3448 +
           (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
            C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
               C32252 +
           (C7486 * C359 - C7492 * C349 + C7487 * C686 - C7493 * C681 +
            C7488 * C1122 - C7494 * C1113 + C32292 * C1646 - C7495 * C1643) *
               C3449 +
           (C7486 * C379 - C7492 * C360 + C7487 * C696 - C7493 * C687 +
            C7488 * C1140 - C7494 * C1123 + C32292 * C1652 - C7495 * C1647) *
               C32097) *
              C31911 * C31970 * C240 +
          ((C7492 * C244 - C7486 * C254 + C7493 * C249 - C7487 * C264 +
            C7494 * C979 - C7488 * C985 + C7495 * C982 - C32292 * C991) *
               C3448 +
           (C7492 * C255 - C7486 * C274 + C7493 * C265 - C7487 * C279 +
            C7494 * C986 - C7488 * C997 + C7495 * C992 - C32292 * C1000) *
               C32252 +
           (C7492 * C681 - C7486 * C686 + C7493 * C1113 - C7487 * C1122 +
            C7494 * C1643 - C7488 * C1646 + C7495 * C6244 - C32292 * C6247) *
               C3449 +
           (C7492 * C687 - C7486 * C696 + C7493 * C1123 - C7487 * C1140 +
            C7494 * C1647 - C7488 * C1652 + C7495 * C6248 - C32292 * C6253) *
               C32097) *
              C31911 * C31970 * C241 +
          ((C7486 * C264 - C7492 * C249 + C7487 * C985 - C7493 * C979 +
            C7488 * C991 - C7494 * C982 + C32292 * C6176 - C7495 * C6174) *
               C3448 +
           (C7486 * C279 - C7492 * C265 + C7487 * C997 - C7493 * C986 +
            C7488 * C1000 - C7494 * C992 + C32292 * C6180 - C7495 * C6177) *
               C32252 +
           (C7486 * C1122 - C7492 * C1113 + C7487 * C1646 - C7493 * C1643 +
            C7488 * C6247 - C7494 * C6244 + C32292 * C6511 - C7495 * C6510) *
               C3449 +
           (C7486 * C1140 - C7492 * C1123 + C7487 * C1652 - C7493 * C1647 +
            C7488 * C6253 - C7494 * C6248 + C32292 * C6513 - C7495 * C6512) *
               C32097) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
            C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
               C3448 +
           (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
            C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
               C32252 +
           (C9493 - C9494 + C9495 - C9496 + C9497 - C9498 + C9499 - C9500) *
               C3449 +
           (C9501 - C9502 + C9503 - C9504 + C9505 - C9506 + C9507 - C9508) *
               C32097) *
              C31911 * C346 +
          ((C9494 - C9493 + C9496 - C9495 + C9498 - C9497 + C9500 - C9499) *
               C3448 +
           (C9502 - C9501 + C9504 - C9503 + C9506 - C9505 + C9508 - C9507) *
               C32252 +
           (C9509 - C9510 + C9511 - C9512 + C9513 - C9514 + C9515 - C9516) *
               C3449 +
           (C9517 - C9518 + C9519 - C9520 + C9521 - C9522 + C9523 - C9524) *
               C32097) *
              C31911 * C347 +
          ((C9510 - C9509 + C9512 - C9511 + C9514 - C9513 + C9516 - C9515) *
               C3448 +
           (C9518 - C9517 + C9520 - C9519 + C9522 - C9521 + C9524 - C9523) *
               C32252 +
           (C7486 * C2024 - C7492 * C2018 + C7487 * C2541 - C7493 * C2538 +
            C7488 * C6847 - C7494 * C6844 + C32292 * C7361 - C7495 * C7360) *
               C3449 +
           (C7486 * C2036 - C7492 * C2025 + C7487 * C2547 - C7493 * C2542 +
            C7488 * C6853 - C7494 * C6848 + C32292 * C7363 - C7495 * C7362) *
               C32097) *
              C31911 * C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
               C13223 +
           (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
               C13219 +
           (C4510 - C4511 + C4512 - C4513) * C13224 +
           (C4514 - C4515 + C4516 - C4517) * C13220 + C12514 * C13225 +
           C12515 * C13221 + (C12499 - C12498 + C12501 - C12500) * C13226 +
           (C12503 - C12502 + C12505 - C12504) * C32298) *
              C31911 * C31970 * C31956 * C110 +
          ((C2666 - C2665 + C2668 - C2667) * C13223 +
           (C2670 - C2669 + C2672 - C2671) * C13219 + C4960 * C13224 +
           C4961 * C13220 + C12918 * C13225 + C12919 * C13221 +
           (C12506 - C12507 + C12508 - C12509) * C13226 +
           (C12510 - C12511 + C12512 - C12513) * C32298) *
              C31911 * C31970 * C31956 * C111 +
          (C2705 * C13223 + C2706 * C13219 + C4212 * C13224 + C4213 * C13220 +
           (C4535 - C4534 + C4537 - C4536) * C13225 +
           (C4539 - C4538 + C4541 - C4540) * C13221 +
           (C32251 * C2028 - C2662 * C2020 + C32055 * C2545 - C2663 * C2540) *
               C13226 +
           (C32251 * C2038 - C2662 * C2029 + C32055 * C2549 - C2663 * C2546) *
               C32298) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
               C13223 +
           (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
               C13219 +
           (C4510 - C4511 + C4512 - C4513) * C13224 +
           (C4514 - C4515 + C4516 - C4517) * C13220 + C12514 * C13225 +
           C12515 * C13221 + (C12499 - C12498 + C12501 - C12500) * C13226 +
           (C12503 - C12502 + C12505 - C12504) * C32298) *
              C31911 * C31970 * C240 +
          ((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
               C13223 +
           (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
               C13219 +
           (C5158 - C5159 + C5160 - C5161) * C13224 +
           (C5162 - C5163 + C5164 - C5165) * C13220 +
           (C13114 - C13115 + C13116 - C13117) * C13225 +
           (C13118 - C13119 + C13120 - C13121) * C13221 +
           (C2662 * C2538 - C32251 * C2541 + C2663 * C6844 - C32055 * C6847) *
               C13226 +
           (C2662 * C2542 - C32251 * C2547 + C2663 * C6848 - C32055 * C6853) *
               C32298) *
              C31911 * C31970 * C241 +
          ((C32251 * C264 - C2662 * C249 + C32055 * C985 - C2663 * C979) *
               C13223 +
           (C32251 * C279 - C2662 * C265 + C32055 * C997 - C2663 * C986) *
               C13219 +
           (C32251 * C1122 - C2662 * C1113 + C32055 * C1646 - C2663 * C1643) *
               C13224 +
           (C32251 * C1140 - C2662 * C1123 + C32055 * C1652 - C2663 * C1647) *
               C13220 +
           (C32251 * C1129 - C2662 * C1117 + C32055 * C6249 - C2663 * C6245) *
               C13225 +
           (C32251 * C1144 - C2662 * C1131 + C32055 * C6254 - C2663 * C6251) *
               C13221 +
           (C32251 * C6847 - C2662 * C6844 + C32055 * C7361 - C2663 * C7360) *
               C13226 +
           (C32251 * C6853 - C2662 * C6848 + C32055 * C7363 - C2663 * C7362) *
               C32298) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
               C13223 +
           (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
               C13219 +
           (C4510 - C4511 + C4512 - C4513) * C13224 +
           (C4514 - C4515 + C4516 - C4517) * C13220 + C12514 * C13225 +
           C12515 * C13221 + C14128 * C13226 + C14129 * C32298) *
              C31911 * C346 +
          ((C4511 - C4510 + C4513 - C4512) * C13223 +
           (C4515 - C4514 + C4517 - C4516) * C13219 +
           (C4518 - C4519 + C4520 - C4521) * C13224 +
           (C4522 - C4523 + C4524 - C4525) * C13220 +
           (C12498 - C12499 + C12500 - C12501) * C13225 +
           (C12502 - C12503 + C12504 - C12505) * C13221 +
           (C14120 - C14121 + C14122 - C14123) * C13226 +
           (C14124 - C14125 + C14126 - C14127) * C32298) *
              C31911 * C347 +
          (C12514 * C13223 + C12515 * C13219 + C14128 * C13224 +
           C14129 * C13220 + (C14121 - C14120 + C14123 - C14122) * C13225 +
           (C14125 - C14124 + C14127 - C14126) * C13221 +
           (C32251 * C11763 - C2662 * C11761 + C32055 * C12040 -
            C2663 * C12039) *
               C13226 +
           (C32251 * C11767 - C2662 * C11764 + C32055 * C12042 -
            C2663 * C12041) *
               C32298) *
              C31911 * C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
             C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
                C3448 +
            (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
             C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
                C32252 +
            (C9493 - C9494 + C9495 - C9496 + C9497 - C9498 + C9499 - C9500) *
                C3449 +
            (C9501 - C9502 + C9503 - C9504 + C9505 - C9506 + C9507 - C9508) *
                C32097) *
               C31911 * C577 +
           ((C9494 - C9493 + C9496 - C9495 + C9498 - C9497 + C9500 - C9499) *
                C3448 +
            (C9502 - C9501 + C9504 - C9503 + C9506 - C9505 + C9508 - C9507) *
                C32252 +
            (C9509 - C9510 + C9511 - C9512 + C9513 - C9514 + C9515 - C9516) *
                C3449 +
            (C9517 - C9518 + C9519 - C9520 + C9521 - C9522 + C9523 - C9524) *
                C32097) *
               C31911 * C578) *
              C31956 * C473 +
          (((C7498 - C7497 + C7500 - C7499 + C7502 - C7501 + C7504 - C7503) *
                C3448 +
            (C7506 - C7505 + C7508 - C7507 + C7510 - C7509 + C7512 - C7511) *
                C32252 +
            (C8001 - C8002 + C8003 - C8004 + C8005 - C8006 + C8007 - C8008) *
                C3449 +
            (C8009 - C8010 + C8011 - C8012 + C8013 - C8014 + C8015 - C8016) *
                C32097) *
               C31911 * C577 +
           ((C8002 - C8001 + C8004 - C8003 + C8006 - C8005 + C8008 - C8007) *
                C3448 +
            (C8010 - C8009 + C8012 - C8011 + C8014 - C8013 + C8016 - C8015) *
                C32252 +
            (C7486 * C371 - C7492 * C355 + C7487 * C1132 - C7493 * C1118 +
             C7488 * C1133 - C7494 * C1119 + C32292 * C7049 - C7495 * C7048) *
                C3449 +
            (C7486 * C385 - C7492 * C372 + C7487 * C1145 - C7493 * C1134 +
             C7488 * C1146 - C7494 * C1135 + C32292 * C7051 - C7495 * C7050) *
                C32097) *
               C31911 * C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                 C3448 +
             (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                 C32252 +
             (C4510 - C4511 + C4512 - C4513) * C3449 +
             (C4514 - C4515 + C4516 - C4517) * C32097) *
                C814 +
            ((C2665 - C2666 + C2667 - C2668) * C3448 +
             (C2669 - C2670 + C2671 - C2672) * C32252 + C4958 * C3449 +
             C4959 * C32097) *
                C815 +
            C4217 * C32271) *
               C577 +
           (((C4511 - C4510 + C4513 - C4512) * C3448 +
             (C4515 - C4514 + C4517 - C4516) * C32252 +
             (C4518 - C4519 + C4520 - C4521) * C3449 +
             (C4522 - C4523 + C4524 - C4525) * C32097) *
                C814 +
            (C4960 * C3448 + C4961 * C32252 +
             (C4526 - C4527 + C4528 - C4529) * C3449 +
             (C4530 - C4531 + C4532 - C4533) * C32097) *
                C815 +
            (C4962 * C3448 + C4963 * C32252 +
             (C4534 - C4535 + C4536 - C4537) * C3449 +
             (C4538 - C4539 + C4540 - C4541) * C32097) *
                C32271) *
               C578) *
              C31956 * C473 +
          ((((C2666 - C2665 + C2668 - C2667) * C3448 +
             (C2670 - C2669 + C2672 - C2671) * C32252 + C4960 * C3449 +
             C4961 * C32097) *
                C814 +
            ((C2674 - C2673 + C2676 - C2675) * C3448 +
             (C2678 - C2677 + C2680 - C2679) * C32252 + C4962 * C3449 +
             C4963 * C32097) *
                C815 +
            ((C2682 - C2681 + C2684 - C2683) * C3448 +
             (C2686 - C2685 + C2688 - C2687) * C32252 +
             (C3211 - C3212 + C3213 - C3214) * C3449 +
             (C3215 - C3216 + C3217 - C3218) * C32097) *
                C32271) *
               C577 +
           ((C4958 * C3448 + C4959 * C32252 +
             (C4527 - C4526 + C4529 - C4528) * C3449 +
             (C4531 - C4530 + C4533 - C4532) * C32097) *
                C814 +
            (C4212 * C3448 + C4213 * C32252 +
             (C4535 - C4534 + C4537 - C4536) * C3449 +
             (C4539 - C4538 + C4541 - C4540) * C32097) *
                C815 +
            ((C3212 - C3211 + C3214 - C3213) * C3448 +
             (C3216 - C3215 + C3218 - C3217) * C32252 +
             (C32251 * C375 - C2662 * C357 + C32055 * C2213 - C2663 * C2212) *
                 C3449 +
             (C32251 * C387 - C2662 * C376 + C32055 * C2215 - C2663 * C2214) *
                 C32097) *
                C32271) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C13223 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C13219 +
            (C4510 - C4511 + C4512 - C4513) * C13224 +
            (C4514 - C4515 + C4516 - C4517) * C13220 + C12514 * C13225 +
            C12515 * C13221 + C14128 * C13226 + C14129 * C32298) *
               C31911 * C577 +
           ((C4511 - C4510 + C4513 - C4512) * C13223 +
            (C4515 - C4514 + C4517 - C4516) * C13219 +
            (C4518 - C4519 + C4520 - C4521) * C13224 +
            (C4522 - C4523 + C4524 - C4525) * C13220 +
            (C12498 - C12499 + C12500 - C12501) * C13225 +
            (C12502 - C12503 + C12504 - C12505) * C13221 +
            (C14120 - C14121 + C14122 - C14123) * C13226 +
            (C14124 - C14125 + C14126 - C14127) * C32298) *
               C31911 * C578) *
              C31956 * C473 +
          (((C2666 - C2665 + C2668 - C2667) * C13223 +
            (C2670 - C2669 + C2672 - C2671) * C13219 + C4960 * C13224 +
            C4961 * C13220 + C12918 * C13225 + C12919 * C13221 +
            (C12506 - C12507 + C12508 - C12509) * C13226 +
            (C12510 - C12511 + C12512 - C12513) * C32298) *
               C31911 * C577 +
           (C4958 * C13223 + C4959 * C13219 + C12516 * C13224 +
            C12517 * C13220 + (C12507 - C12506 + C12509 - C12508) * C13225 +
            (C12511 - C12510 + C12513 - C12512) * C13221 +
            (C32251 * C2032 - C2662 * C2022 + C32055 * C11864 -
             C2663 * C11863) *
                C13226 +
            (C32251 * C2040 - C2662 * C2033 + C32055 * C11866 -
             C2663 * C11865) *
                C32298) *
               C31911 * C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C3448 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C32252 +
            (C32251 * C359 - C2662 * C349 + C32055 * C686 - C2663 * C681) *
                C3449 +
            (C32251 * C379 - C2662 * C360 + C32055 * C696 - C2663 * C687) *
                C32097) *
               C814 +
           ((C2665 - C2666 + C2667 - C2668) * C3448 +
            (C2669 - C2670 + C2671 - C2672) * C32252 +
            (C3196 - C3195 + C3198 - C3197) * C3449 +
            (C3200 - C3199 + C3202 - C3201) * C32097) *
               C815 +
           C4217 * C32271) *
              C31970 * C240 +
          (((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                C3448 +
            (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                C32252 +
            (C2662 * C681 - C32251 * C686 + C2663 * C1113 - C32055 * C1122) *
                C3449 +
            (C2662 * C687 - C32251 * C696 + C2663 * C1123 - C32055 * C1140) *
                C32097) *
               C814 +
           ((C3041 - C3042 + C3043 - C3044) * C3448 +
            (C3045 - C3046 + C3047 - C3048) * C32252 +
            (C2662 * C682 - C32251 * C688 + C2663 * C1114 - C32055 * C1124) *
                C3449 +
            (C2662 * C689 - C32251 * C697 + C2663 * C1125 - C32055 * C1141) *
                C32097) *
               C815 +
           ((C3049 - C3050 + C3051 - C3052) * C3448 +
            (C3053 - C3054 + C3055 - C3056) * C32252 +
            (C2662 * C683 - C32251 * C690 + C2663 * C1115 - C32055 * C1126) *
                C3449 +
            (C2662 * C691 - C32251 * C698 + C2663 * C1127 - C32055 * C1142) *
                C32097) *
               C32271) *
              C31970 * C241 +
          (((C32251 * C264 - C2662 * C249 + C32055 * C985 - C2663 * C979) *
                C3448 +
            (C32251 * C279 - C2662 * C265 + C32055 * C997 - C2663 * C986) *
                C32252 +
            (C32251 * C1122 - C2662 * C1113 + C32055 * C1646 - C2663 * C1643) *
                C3449 +
            (C32251 * C1140 - C2662 * C1123 + C32055 * C1652 - C2663 * C1647) *
                C32097) *
               C814 +
           ((C32251 * C266 - C2662 * C250 + C32055 * C987 - C2663 * C980) *
                C3448 +
            (C32251 * C280 - C2662 * C267 + C32055 * C998 - C2663 * C988) *
                C32252 +
            (C32251 * C1124 - C2662 * C1114 + C32055 * C1648 - C2663 * C1644) *
                C3449 +
            (C32251 * C1141 - C2662 * C1125 + C32055 * C1653 - C2663 * C1649) *
                C32097) *
               C815 +
           ((C32251 * C268 - C2662 * C251 + C32055 * C989 - C2663 * C981) *
                C3448 +
            (C32251 * C281 - C2662 * C269 + C32055 * C999 - C2663 * C990) *
                C32252 +
            (C32251 * C1126 - C2662 * C1115 + C32055 * C1650 - C2663 * C1645) *
                C3449 +
            (C32251 * C1142 - C2662 * C1127 + C32055 * C1654 - C2663 * C1651) *
                C32097) *
               C32271) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C3448 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C32252 +
            (C32251 * C359 - C2662 * C349 + C32055 * C686 - C2663 * C681) *
                C3449 +
            (C32251 * C379 - C2662 * C360 + C32055 * C696 - C2663 * C687) *
                C32097) *
               C814 +
           ((C2665 - C2666 + C2667 - C2668) * C3448 +
            (C2669 - C2670 + C2671 - C2672) * C32252 +
            (C3196 - C3195 + C3198 - C3197) * C3449 +
            (C3200 - C3199 + C3202 - C3201) * C32097) *
               C815 +
           C4217 * C32271) *
              C31970 * C31956 * C110 +
          (((C2666 - C2665 + C2668 - C2667) * C3448 +
            (C2670 - C2669 + C2672 - C2671) * C32252 +
            (C3195 - C3196 + C3197 - C3198) * C3449 +
            (C3199 - C3200 + C3201 - C3202) * C32097) *
               C814 +
           ((C2674 - C2673 + C2676 - C2675) * C3448 +
            (C2678 - C2677 + C2680 - C2679) * C32252 +
            (C3203 - C3204 + C3205 - C3206) * C3449 +
            (C3207 - C3208 + C3209 - C3210) * C32097) *
               C815 +
           ((C2682 - C2681 + C2684 - C2683) * C3448 +
            (C2686 - C2685 + C2688 - C2687) * C32252 +
            (C3211 - C3212 + C3213 - C3214) * C3449 +
            (C3215 - C3216 + C3217 - C3218) * C32097) *
               C32271) *
              C31970 * C31956 * C111 +
          (C4217 * C814 +
           (C2707 * C3448 + C2708 * C32252 +
            (C3212 - C3211 + C3214 - C3213) * C3449 +
            (C3216 - C3215 + C3218 - C3217) * C32097) *
               C815 +
           ((C2690 - C2689 + C2692 - C2691) * C3448 +
            (C2694 - C2693 + C2696 - C2695) * C32252 +
            (C32251 * C367 - C2662 * C353 + C32055 * C694 - C2663 * C685) *
                C3449 +
            (C32251 * C383 - C2662 * C368 + C32055 * C700 - C2663 * C695) *
                C32097) *
               C32271) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
            C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
               C3448 +
           (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
            C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
               C32252 +
           (C7486 * C359 - C7492 * C349 + C7487 * C686 - C7493 * C681 +
            C7488 * C1122 - C7494 * C1113 + C32292 * C1646 - C7495 * C1643) *
               C3449 +
           (C7486 * C379 - C7492 * C360 + C7487 * C696 - C7493 * C687 +
            C7488 * C1140 - C7494 * C1123 + C32292 * C1652 - C7495 * C1647) *
               C32097) *
              C31911 * C31970 * C31956 * C110 +
          ((C7498 - C7497 + C7500 - C7499 + C7502 - C7501 + C7504 - C7503) *
               C3448 +
           (C7506 - C7505 + C7508 - C7507 + C7510 - C7509 + C7512 - C7511) *
               C32252 +
           (C8001 - C8002 + C8003 - C8004 + C8005 - C8006 + C8007 - C8008) *
               C3449 +
           (C8009 - C8010 + C8011 - C8012 + C8013 - C8014 + C8015 - C8016) *
               C32097) *
              C31911 * C31970 * C31956 * C111 +
          ((C7514 - C7513 + C7516 - C7515 + C7518 - C7517 + C7520 - C7519) *
               C3448 +
           (C7522 - C7521 + C7524 - C7523 + C7526 - C7525 + C7528 - C7527) *
               C32252 +
           (C7486 * C363 - C7492 * C351 + C7487 * C690 - C7493 * C683 +
            C7488 * C1126 - C7494 * C1115 + C32292 * C1650 - C7495 * C1645) *
               C3449 +
           (C7486 * C381 - C7492 * C364 + C7487 * C698 - C7493 * C691 +
            C7488 * C1142 - C7494 * C1127 + C32292 * C1654 - C7495 * C1651) *
               C32097) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
            C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
               C3448 +
           (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
            C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
               C32252 +
           (C7486 * C359 - C7492 * C349 + C7487 * C686 - C7493 * C681 +
            C7488 * C1122 - C7494 * C1113 + C32292 * C1646 - C7495 * C1643) *
               C3449 +
           (C7486 * C379 - C7492 * C360 + C7487 * C696 - C7493 * C687 +
            C7488 * C1140 - C7494 * C1123 + C32292 * C1652 - C7495 * C1647) *
               C32097) *
              C31911 * C31970 * C240 +
          ((C7492 * C244 - C7486 * C254 + C7493 * C249 - C7487 * C264 +
            C7494 * C979 - C7488 * C985 + C7495 * C982 - C32292 * C991) *
               C3448 +
           (C7492 * C255 - C7486 * C274 + C7493 * C265 - C7487 * C279 +
            C7494 * C986 - C7488 * C997 + C7495 * C992 - C32292 * C1000) *
               C32252 +
           (C7492 * C681 - C7486 * C686 + C7493 * C1113 - C7487 * C1122 +
            C7494 * C1643 - C7488 * C1646 + C7495 * C6244 - C32292 * C6247) *
               C3449 +
           (C7492 * C687 - C7486 * C696 + C7493 * C1123 - C7487 * C1140 +
            C7494 * C1647 - C7488 * C1652 + C7495 * C6248 - C32292 * C6253) *
               C32097) *
              C31911 * C31970 * C241 +
          ((C7486 * C264 - C7492 * C249 + C7487 * C985 - C7493 * C979 +
            C7488 * C991 - C7494 * C982 + C32292 * C6176 - C7495 * C6174) *
               C3448 +
           (C7486 * C279 - C7492 * C265 + C7487 * C997 - C7493 * C986 +
            C7488 * C1000 - C7494 * C992 + C32292 * C6180 - C7495 * C6177) *
               C32252 +
           (C7486 * C1122 - C7492 * C1113 + C7487 * C1646 - C7493 * C1643 +
            C7488 * C6247 - C7494 * C6244 + C32292 * C6511 - C7495 * C6510) *
               C3449 +
           (C7486 * C1140 - C7492 * C1123 + C7487 * C1652 - C7493 * C1647 +
            C7488 * C6253 - C7494 * C6248 + C32292 * C6513 - C7495 * C6512) *
               C32097) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
               C13223 +
           (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
               C13219 +
           (C4510 - C4511 + C4512 - C4513) * C13224 +
           (C4514 - C4515 + C4516 - C4517) * C13220 + C12514 * C13225 +
           C12515 * C13221 + (C12499 - C12498 + C12501 - C12500) * C13226 +
           (C12503 - C12502 + C12505 - C12504) * C32298) *
              C31911 * C31970 * C31956 * C110 +
          ((C2666 - C2665 + C2668 - C2667) * C13223 +
           (C2670 - C2669 + C2672 - C2671) * C13219 + C4960 * C13224 +
           C4961 * C13220 + C12918 * C13225 + C12919 * C13221 +
           (C12506 - C12507 + C12508 - C12509) * C13226 +
           (C12510 - C12511 + C12512 - C12513) * C32298) *
              C31911 * C31970 * C31956 * C111 +
          (C2705 * C13223 + C2706 * C13219 + C4212 * C13224 + C4213 * C13220 +
           (C4535 - C4534 + C4537 - C4536) * C13225 +
           (C4539 - C4538 + C4541 - C4540) * C13221 +
           (C32251 * C2028 - C2662 * C2020 + C32055 * C2545 - C2663 * C2540) *
               C13226 +
           (C32251 * C2038 - C2662 * C2029 + C32055 * C2549 - C2663 * C2546) *
               C32298) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
               C13223 +
           (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
               C13219 +
           (C4510 - C4511 + C4512 - C4513) * C13224 +
           (C4514 - C4515 + C4516 - C4517) * C13220 + C12514 * C13225 +
           C12515 * C13221 + (C12499 - C12498 + C12501 - C12500) * C13226 +
           (C12503 - C12502 + C12505 - C12504) * C32298) *
              C31911 * C31970 * C240 +
          ((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
               C13223 +
           (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
               C13219 +
           (C5158 - C5159 + C5160 - C5161) * C13224 +
           (C5162 - C5163 + C5164 - C5165) * C13220 +
           (C13114 - C13115 + C13116 - C13117) * C13225 +
           (C13118 - C13119 + C13120 - C13121) * C13221 +
           (C2662 * C2538 - C32251 * C2541 + C2663 * C6844 - C32055 * C6847) *
               C13226 +
           (C2662 * C2542 - C32251 * C2547 + C2663 * C6848 - C32055 * C6853) *
               C32298) *
              C31911 * C31970 * C241 +
          ((C32251 * C264 - C2662 * C249 + C32055 * C985 - C2663 * C979) *
               C13223 +
           (C32251 * C279 - C2662 * C265 + C32055 * C997 - C2663 * C986) *
               C13219 +
           (C32251 * C1122 - C2662 * C1113 + C32055 * C1646 - C2663 * C1643) *
               C13224 +
           (C32251 * C1140 - C2662 * C1123 + C32055 * C1652 - C2663 * C1647) *
               C13220 +
           (C32251 * C1129 - C2662 * C1117 + C32055 * C6249 - C2663 * C6245) *
               C13225 +
           (C32251 * C1144 - C2662 * C1131 + C32055 * C6254 - C2663 * C6251) *
               C13221 +
           (C32251 * C6847 - C2662 * C6844 + C32055 * C7361 - C2663 * C7360) *
               C13226 +
           (C32251 * C6853 - C2662 * C6848 + C32055 * C7363 - C2663 * C7362) *
               C32298) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C31993 * C122 - C113 * C115) * C114 +
                 (C31993 * C136 - C113 * C123) * C32010) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
                C176 * C105 + C177 * C106 + C178 * C107) *
                   C31970 * C471 +
               (((C113 * C244 - C31993 * C254) * C114 +
                 (C113 * C255 - C31993 * C274) * C32010) *
                    C103 +
                ((C480 - C481) * C114 + (C482 - C483) * C32010) * C104 +
                ((C484 - C485) * C114 + (C486 - C487) * C32010) * C105 +
                ((C488 - C489) * C114 + (C490 - C491) * C32010) * C106 +
                ((C492 - C493) * C114 + (C494 - C495) * C32010) * C107) *
                   C31970 * C472) *
                  C473 +
              ((((C145 - C144) * C114 + (C147 - C146) * C32010) * C103 +
                ((C149 - C148) * C114 + (C151 - C150) * C32010) * C104 +
                ((C153 - C152) * C114 + (C155 - C154) * C32010) * C105 +
                ((C157 - C156) * C114 + (C159 - C158) * C32010) * C106 +
                ((C160 - C161) * C114 + (C162 - C163) * C32010) * C107) *
                   C31970 * C471 +
               (((C481 - C480) * C114 + (C483 - C482) * C32010) * C103 +
                ((C485 - C484) * C114 + (C487 - C486) * C32010) * C104 +
                ((C489 - C488) * C114 + (C491 - C490) * C32010) * C105 +
                ((C493 - C492) * C114 + (C495 - C494) * C32010) * C106 +
                ((C31993 * C476 - C113 * C475) * C114 +
                 (C31993 * C478 - C113 * C477) * C32010) *
                    C107) *
                   C31970 * C472) *
                  C474) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
                  C32282 * C264 - C819 * C249) *
                     C114 +
                 (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
                  C32282 * C279 - C819 * C265) *
                     C32010) *
                    C814 +
                ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
                 (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
                    C815 +
                C869 * C32271) *
                   C31970 * C471 +
               (((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
                  C819 * C979 - C32282 * C985) *
                     C114 +
                 (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
                  C819 * C986 - C32282 * C997) *
                     C32010) *
                    C814 +
                ((C1300 - C1301 + C1302 - C1303 + C1304 - C1305) * C114 +
                 (C1306 - C1307 + C1308 - C1309 + C1310 - C1311) * C32010) *
                    C815 +
                ((C1312 - C1313 + C1314 - C1315 + C1316 - C1317) * C114 +
                 (C1318 - C1319 + C1320 - C1321 + C1322 - C1323) * C32010) *
                    C32271) *
                   C31970 * C472) *
                  C473 +
              ((((C822 - C821 + C824 - C823 + C826 - C825) * C114 +
                 (C828 - C827 + C830 - C829 + C832 - C831) * C32010) *
                    C814 +
                ((C834 - C833 + C836 - C835 + C838 - C837) * C114 +
                 (C840 - C839 + C842 - C841 + C844 - C843) * C32010) *
                    C815 +
                ((C845 - C846 + C847 - C848 + C849 - C850) * C114 +
                 (C851 - C852 + C853 - C854 + C855 - C856) * C32010) *
                    C32271) *
                   C31970 * C471 +
               (((C1301 - C1300 + C1303 - C1302 + C1305 - C1304) * C114 +
                 (C1307 - C1306 + C1309 - C1308 + C1311 - C1310) * C32010) *
                    C814 +
                ((C1313 - C1312 + C1315 - C1314 + C1317 - C1316) * C114 +
                 (C1319 - C1318 + C1321 - C1320 + C1323 - C1322) * C32010) *
                    C815 +
                ((C32317 * C260 - C817 * C247 + C32305 * C270 - C818 * C252 +
                  C32282 * C1296 - C819 * C1295) *
                     C114 +
                 (C32317 * C277 - C817 * C261 + C32305 * C282 - C818 * C271 +
                  C32282 * C1298 - C819 * C1297) *
                     C32010) *
                    C32271) *
                   C31970 * C472) *
                  C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C1768 +
             (C31993 * C136 - C113 * C123) * C32318 + (C2043 - C2044) * C1769 +
             (C2045 - C2046) * C32307 + C2065 * C1770 + C2066 * C32285) *
                C814 +
            ((C144 - C145) * C1768 + (C146 - C147) * C32318 +
             (C585 - C584) * C1769 + (C587 - C586) * C32307 + C2051 * C1770 +
             C2052 * C32285) *
                C815 +
            C1798 * C32271) *
               C31970 * C471 +
           (((C113 * C244 - C31993 * C254) * C1768 +
             (C113 * C255 - C31993 * C274) * C32318 +
             (C113 * C681 - C31993 * C686) * C1769 +
             (C113 * C687 - C31993 * C696) * C32307 +
             (C113 * C1116 - C31993 * C1128) * C1770 +
             (C113 * C1130 - C31993 * C1143) * C32285) *
                C814 +
            ((C480 - C481) * C1768 + (C482 - C483) * C32318 +
             (C2217 - C2218) * C1769 + (C2219 - C2220) * C32307 +
             (C2221 - C2222) * C1770 + (C2223 - C2224) * C32285) *
                C815 +
            ((C484 - C485) * C1768 + (C486 - C487) * C32318 +
             (C2225 - C2226) * C1769 + (C2227 - C2228) * C32307 +
             (C2229 - C2230) * C1770 + (C2231 - C2232) * C32285) *
                C32271) *
               C31970 * C472) *
              C473 +
          ((((C145 - C144) * C1768 + (C147 - C146) * C32318 +
             (C584 - C585) * C1769 + (C586 - C587) * C32307 +
             (C1773 - C1772) * C1770 + (C1775 - C1774) * C32285) *
                C814 +
            ((C149 - C148) * C1768 + (C151 - C150) * C32318 +
             (C588 - C589) * C1769 + (C590 - C591) * C32307 +
             (C1781 - C1780) * C1770 + (C1783 - C1782) * C32285) *
                C815 +
            ((C153 - C152) * C1768 + (C155 - C154) * C32318 +
             (C592 - C593) * C1769 + (C594 - C595) * C32307 +
             (C1784 - C1785) * C1770 + (C1786 - C1787) * C32285) *
                C32271) *
               C31970 * C471 +
           (((C481 - C480) * C1768 + (C483 - C482) * C32318 +
             (C2218 - C2217) * C1769 + (C2220 - C2219) * C32307 +
             (C2222 - C2221) * C1770 + (C2224 - C2223) * C32285) *
                C814 +
            ((C485 - C484) * C1768 + (C487 - C486) * C32318 +
             (C2226 - C2225) * C1769 + (C2228 - C2227) * C32307 +
             (C2230 - C2229) * C1770 + (C2232 - C2231) * C32285) *
                C815 +
            ((C489 - C488) * C1768 + (C491 - C490) * C32318 +
             (C31993 * C692 - C113 * C684) * C1769 +
             (C31993 * C699 - C113 * C693) * C32307 +
             (C31993 * C2213 - C113 * C2212) * C1770 +
             (C31993 * C2215 - C113 * C2214) * C32285) *
                C32271) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
              C32282 * C264 - C5283 * C249) *
                 C114 +
             (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
              C32282 * C279 - C5283 * C265) *
                 C32010) *
                C32314 +
            ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
             (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
                C32301 +
            C5333 * C32271) *
               C31970 * C471 +
           (((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
              C5283 * C979 - C32282 * C985) *
                 C114 +
             (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
              C5283 * C986 - C32282 * C997) *
                 C32010) *
                C32314 +
            ((C5700 - C5701 + C5702 - C5703 + C5704 - C5705) * C114 +
             (C5706 - C5707 + C5708 - C5709 + C5710 - C5711) * C32010) *
                C32301 +
            ((C5712 - C5713 + C5714 - C5715 + C5716 - C5717) * C114 +
             (C5718 - C5719 + C5720 - C5721 + C5722 - C5723) * C32010) *
                C32271) *
               C31970 * C472) *
              C473 +
          ((((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C114 +
             (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32010) *
                C32314 +
            ((C5298 - C5297 + C5300 - C5299 + C5302 - C5301) * C114 +
             (C5304 - C5303 + C5306 - C5305 + C5308 - C5307) * C32010) *
                C32301 +
            ((C5309 - C5310 + C5311 - C5312 + C5313 - C5314) * C114 +
             (C5315 - C5316 + C5317 - C5318 + C5319 - C5320) * C32010) *
                C32271) *
               C31970 * C471 +
           (((C5701 - C5700 + C5703 - C5702 + C5705 - C5704) * C114 +
             (C5707 - C5706 + C5709 - C5708 + C5711 - C5710) * C32010) *
                C32314 +
            ((C5713 - C5712 + C5715 - C5714 + C5717 - C5716) * C114 +
             (C5719 - C5718 + C5721 - C5720 + C5723 - C5722) * C32010) *
                C32301 +
            ((C5275 * C260 - C5281 * C247 + C5276 * C270 - C5282 * C252 +
              C32282 * C1296 - C5283 * C1295) *
                 C114 +
             (C5275 * C277 - C5281 * C261 + C5276 * C282 - C5282 * C271 +
              C32282 * C1298 - C5283 * C1297) *
                 C32010) *
                C32271) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
             C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
             C6105 * C991 - C6111 * C982) *
                C114 +
            (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
             C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
             C6105 * C1000 - C6111 * C992) *
                C32010) *
               C31911 * C31970 * C471 +
           ((C6107 * C244 - C6101 * C254 + C6108 * C249 - C6102 * C264 +
             C6109 * C979 - C6103 * C985 + C6110 * C982 - C6104 * C991 +
             C6111 * C6174 - C6105 * C6176) *
                C114 +
            (C6107 * C255 - C6101 * C274 + C6108 * C265 - C6102 * C279 +
             C6109 * C986 - C6103 * C997 + C6110 * C992 - C6104 * C1000 +
             C6111 * C6177 - C6105 * C6180) *
                C32010) *
               C31911 * C31970 * C472) *
              C473 +
          (((C6107 * C116 - C6101 * C124 + C6108 * C245 - C6102 * C256 +
             C6109 * C250 - C6103 * C266 + C6110 * C980 - C6104 * C987 +
             C6111 * C983 - C6105 * C993) *
                C114 +
            (C6107 * C125 - C6101 * C137 + C6108 * C257 - C6102 * C275 +
             C6109 * C267 - C6103 * C280 + C6110 * C988 - C6104 * C998 +
             C6111 * C994 - C6105 * C1001) *
                C32010) *
               C31911 * C31970 * C471 +
           ((C6101 * C256 - C6107 * C245 + C6102 * C266 - C6108 * C250 +
             C6103 * C987 - C6109 * C980 + C6104 * C993 - C6110 * C983 +
             C6105 * C6339 - C6111 * C6338) *
                C114 +
            (C6101 * C275 - C6107 * C257 + C6102 * C280 - C6108 * C267 +
             C6103 * C998 - C6109 * C988 + C6104 * C1001 - C6110 * C994 +
             C6105 * C6341 - C6111 * C6340) *
                C32010) *
               C31911 * C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C1768 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32318 +
            (C6857 - C6858 + C6859 - C6860 + C6861 - C6862) * C1769 +
            (C6863 - C6864 + C6865 - C6866 + C6867 - C6868) * C32307 +
            C6901 * C1770 + C6902 * C32285) *
               C31911 * C31970 * C471 +
           ((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
             C5283 * C979 - C32282 * C985) *
                C1768 +
            (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
             C5283 * C986 - C32282 * C997) *
                C32318 +
            (C5281 * C681 - C5275 * C686 + C5282 * C1113 - C5276 * C1122 +
             C5283 * C1643 - C32282 * C1646) *
                C1769 +
            (C5281 * C687 - C5275 * C696 + C5282 * C1123 - C5276 * C1140 +
             C5283 * C1647 - C32282 * C1652) *
                C32307 +
            (C5281 * C1116 - C5275 * C1128 + C5282 * C1117 - C5276 * C1129 +
             C5283 * C6245 - C32282 * C6249) *
                C1770 +
            (C5281 * C1130 - C5275 * C1143 + C5282 * C1131 - C5276 * C1144 +
             C5283 * C6251 - C32282 * C6254) *
                C32285) *
               C31911 * C31970 * C472) *
              C473 +
          (((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C1768 +
            (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32318 +
            (C5870 - C5871 + C5872 - C5873 + C5874 - C5875) * C1769 +
            (C5876 - C5877 + C5878 - C5879 + C5880 - C5881) * C32307 +
            (C5281 * C355 - C5275 * C371 + C5282 * C1118 - C5276 * C1132 +
             C5283 * C1119 - C32282 * C1133) *
                C1770 +
            (C5281 * C372 - C5275 * C385 + C5282 * C1134 - C5276 * C1145 +
             C5283 * C1135 - C32282 * C1146) *
                C32285) *
               C31911 * C31970 * C471 +
           ((C5701 - C5700 + C5703 - C5702 + C5705 - C5704) * C1768 +
            (C5707 - C5706 + C5709 - C5708 + C5711 - C5710) * C32318 +
            (C5275 * C688 - C5281 * C682 + C5276 * C1124 - C5282 * C1114 +
             C32282 * C1648 - C5283 * C1644) *
                C1769 +
            (C5275 * C697 - C5281 * C689 + C5276 * C1141 - C5282 * C1125 +
             C32282 * C1653 - C5283 * C1649) *
                C32307 +
            (C5275 * C1132 - C5281 * C1118 + C5276 * C1133 - C5282 * C1119 +
             C32282 * C7049 - C5283 * C7048) *
                C1770 +
            (C5275 * C1145 - C5281 * C1134 + C5276 * C1146 - C5282 * C1135 +
             C32282 * C7051 - C5283 * C7050) *
                C32285) *
               C31911 * C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C10043 +
             (C31993 * C136 - C113 * C123) * C10040 + (C2043 - C2044) * C10044 +
             (C2045 - C2046) * C10041 + C2065 * C10045 + C2066 * C32285) *
                C32314 +
            ((C144 - C145) * C10043 + (C146 - C147) * C10040 + C2383 * C10044 +
             C2384 * C10041 + C2051 * C10045 + C2052 * C32285) *
                C32301 +
            C10057 * C32271) *
               C31970 * C471 +
           (((C113 * C244 - C31993 * C254) * C10043 +
             (C113 * C255 - C31993 * C274) * C10040 + (C2551 - C2552) * C10044 +
             (C2553 - C2554) * C10041 + (C2555 - C2556) * C10045 +
             (C2557 - C2558) * C32285) *
                C32314 +
            ((C480 - C481) * C10043 + (C482 - C483) * C10040 +
             (C2217 - C2218) * C10044 + (C2219 - C2220) * C10041 +
             (C2221 - C2222) * C10045 + (C2223 - C2224) * C32285) *
                C32301 +
            ((C484 - C485) * C10043 + (C486 - C487) * C10040 +
             (C2225 - C2226) * C10044 + (C2227 - C2228) * C10041 +
             (C2229 - C2230) * C10045 + (C2231 - C2232) * C32285) *
                C32271) *
               C31970 * C472) *
              C473 +
          ((((C145 - C144) * C10043 + (C147 - C146) * C10040 + C2385 * C10044 +
             C2386 * C10041 + C2387 * C10045 + C2388 * C32285) *
                C32314 +
            ((C149 - C148) * C10043 + (C151 - C150) * C10040 + C2389 * C10044 +
             C2390 * C10041 + C2391 * C10045 + C2392 * C32285) *
                C32301 +
            ((C153 - C152) * C10043 + (C155 - C154) * C10040 + C3927 * C10044 +
             C3928 * C10041 + (C1784 - C1785) * C10045 +
             (C1786 - C1787) * C32285) *
                C32271) *
               C31970 * C471 +
           (((C481 - C480) * C10043 + (C483 - C482) * C10040 +
             (C2218 - C2217) * C10044 + (C2220 - C2219) * C10041 +
             (C2222 - C2221) * C10045 + (C2224 - C2223) * C32285) *
                C32314 +
            ((C485 - C484) * C10043 + (C487 - C486) * C10040 +
             (C2226 - C2225) * C10044 + (C2228 - C2227) * C10041 +
             (C2230 - C2229) * C10045 + (C2232 - C2231) * C32285) *
                C32301 +
            ((C489 - C488) * C10043 + (C491 - C490) * C10040 +
             (C3794 - C3793) * C10044 + (C3796 - C3795) * C10041 +
             (C31993 * C2213 - C113 * C2212) * C10045 +
             (C31993 * C2215 - C113 * C2214) * C32285) *
                C32271) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C10043 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C10040 +
            (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C10044 +
            (C11052 - C11053 + C11054 - C11055 + C11056 - C11057) * C10041 +
            C11090 * C10045 + C11091 * C32285) *
               C31911 * C31970 * C471 +
           ((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
             C819 * C979 - C32282 * C985) *
                C10043 +
            (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
             C819 * C986 - C32282 * C997) *
                C10040 +
            (C817 * C681 - C32317 * C686 + C818 * C1113 - C32305 * C1122 +
             C819 * C1643 - C32282 * C1646) *
                C10044 +
            (C817 * C687 - C32317 * C696 + C818 * C1123 - C32305 * C1140 +
             C819 * C1647 - C32282 * C1652) *
                C10041 +
            (C817 * C1116 - C32317 * C1128 + C818 * C1117 - C32305 * C1129 +
             C819 * C6245 - C32282 * C6249) *
                C10045 +
            (C817 * C1130 - C32317 * C1143 + C818 * C1131 - C32305 * C1144 +
             C819 * C6251 - C32282 * C6254) *
                C32285) *
               C31911 * C31970 * C472) *
              C473 +
          (((C822 - C821 + C824 - C823 + C826 - C825) * C10043 +
            (C828 - C827 + C830 - C829 + C832 - C831) * C10040 +
            (C1474 - C1475 + C1476 - C1477 + C1478 - C1479) * C10044 +
            (C1480 - C1481 + C1482 - C1483 + C1484 - C1485) * C10041 +
            (C817 * C355 - C32317 * C371 + C818 * C1118 - C32305 * C1132 +
             C819 * C1119 - C32282 * C1133) *
                C10045 +
            (C817 * C372 - C32317 * C385 + C818 * C1134 - C32305 * C1145 +
             C819 * C1135 - C32282 * C1146) *
                C32285) *
               C31911 * C31970 * C471 +
           ((C1301 - C1300 + C1303 - C1302 + C1305 - C1304) * C10043 +
            (C1307 - C1306 + C1309 - C1308 + C1311 - C1310) * C10040 +
            (C32317 * C688 - C817 * C682 + C32305 * C1124 - C818 * C1114 +
             C32282 * C1648 - C819 * C1644) *
                C10044 +
            (C32317 * C697 - C817 * C689 + C32305 * C1141 - C818 * C1125 +
             C32282 * C1653 - C819 * C1649) *
                C10041 +
            (C32317 * C1132 - C817 * C1118 + C32305 * C1133 - C818 * C1119 +
             C32282 * C7049 - C819 * C7048) *
                C10045 +
            (C32317 * C1145 - C817 * C1134 + C32305 * C1146 - C818 * C1135 +
             C32282 * C7051 - C819 * C7050) *
                C32285) *
               C31911 * C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C11632 +
            (C31993 * C136 - C113 * C123) * C11627 + (C2043 - C2044) * C11633 +
            (C2045 - C2046) * C11628 + C2065 * C11634 + C2066 * C11629 +
            C11770 * C11635 + C11771 * C11630 + C11780 * C11636 +
            C11781 * C11631) *
               C31911 * C31970 * C471 +
           ((C113 * C244 - C31993 * C254) * C11632 +
            (C113 * C255 - C31993 * C274) * C11627 + (C2551 - C2552) * C11633 +
            (C2553 - C2554) * C11628 + (C2555 - C2556) * C11634 +
            (C2557 - C2558) * C11629 +
            (C113 * C2538 - C31993 * C2541) * C11635 +
            (C113 * C2542 - C31993 * C2547) * C11630 +
            (C113 * C6845 - C31993 * C6849) * C11636 +
            (C113 * C6851 - C31993 * C6854) * C11631) *
               C31911 * C31970 * C472) *
              C473 +
          (((C145 - C144) * C11632 + (C147 - C146) * C11627 + C2385 * C11633 +
            C2386 * C11628 + C2387 * C11634 + C2388 * C11629 +
            (C2057 - C2058) * C11635 + (C2059 - C2060) * C11630 +
            (C113 * C2022 - C31993 * C2032) * C11636 +
            (C113 * C2033 - C31993 * C2040) * C11631) *
               C31911 * C31970 * C471 +
           ((C481 - C480) * C11632 + (C483 - C482) * C11627 +
            (C2218 - C2217) * C11633 + (C2220 - C2219) * C11628 +
            (C2222 - C2221) * C11634 + (C2224 - C2223) * C11629 +
            (C31993 * C2543 - C113 * C2539) * C11635 +
            (C31993 * C2548 - C113 * C2544) * C11630 +
            (C31993 * C11864 - C113 * C11863) * C11636 +
            (C31993 * C11866 - C113 * C11865) * C11631) *
               C31911 * C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C31993 * C122 - C113 * C115) * C114 +
                 (C31993 * C136 - C113 * C123) * C32010) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
                C176 * C105 + C177 * C106 + C178 * C107) *
                   C577 +
               (((C113 * C349 - C31993 * C359) * C114 +
                 (C113 * C360 - C31993 * C379) * C32010) *
                    C103 +
                ((C584 - C585) * C114 + (C586 - C587) * C32010) * C104 +
                ((C588 - C589) * C114 + (C590 - C591) * C32010) * C105 +
                ((C592 - C593) * C114 + (C594 - C595) * C32010) * C106 +
                ((C596 - C597) * C114 + (C598 - C599) * C32010) * C107) *
                   C578) *
                  C471 +
              ((((C113 * C244 - C31993 * C254) * C114 +
                 (C113 * C255 - C31993 * C274) * C32010) *
                    C103 +
                ((C480 - C481) * C114 + (C482 - C483) * C32010) * C104 +
                ((C484 - C485) * C114 + (C486 - C487) * C32010) * C105 +
                ((C488 - C489) * C114 + (C490 - C491) * C32010) * C106 +
                ((C492 - C493) * C114 + (C494 - C495) * C32010) * C107) *
                   C577 +
               (((C31993 * C686 - C113 * C681) * C114 +
                 (C31993 * C696 - C113 * C687) * C32010) *
                    C103 +
                ((C31993 * C688 - C113 * C682) * C114 +
                 (C31993 * C697 - C113 * C689) * C32010) *
                    C104 +
                ((C31993 * C690 - C113 * C683) * C114 +
                 (C31993 * C698 - C113 * C691) * C32010) *
                    C105 +
                ((C31993 * C692 - C113 * C684) * C114 +
                 (C31993 * C699 - C113 * C693) * C32010) *
                    C106 +
                ((C31993 * C694 - C113 * C685) * C114 +
                 (C31993 * C700 - C113 * C695) * C32010) *
                    C107) *
                   C578) *
                  C472) *
             C31944 +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
                  C32282 * C264 - C819 * C249) *
                     C114 +
                 (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
                  C32282 * C279 - C819 * C265) *
                     C32010) *
                    C814 +
                ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
                 (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
                    C815 +
                C869 * C32271) *
                   C577 +
               (((C817 * C349 - C32317 * C359 + C818 * C681 - C32305 * C686 +
                  C819 * C1113 - C32282 * C1122) *
                     C114 +
                 (C817 * C360 - C32317 * C379 + C818 * C687 - C32305 * C696 +
                  C819 * C1123 - C32282 * C1140) *
                     C32010) *
                    C814 +
                ((C1474 - C1475 + C1476 - C1477 + C1478 - C1479) * C114 +
                 (C1480 - C1481 + C1482 - C1483 + C1484 - C1485) * C32010) *
                    C815 +
                ((C1486 - C1487 + C1488 - C1489 + C1490 - C1491) * C114 +
                 (C1492 - C1493 + C1494 - C1495 + C1496 - C1497) * C32010) *
                    C32271) *
                   C578) *
                  C471 +
              ((((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
                  C819 * C979 - C32282 * C985) *
                     C114 +
                 (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
                  C819 * C986 - C32282 * C997) *
                     C32010) *
                    C814 +
                ((C1300 - C1301 + C1302 - C1303 + C1304 - C1305) * C114 +
                 (C1306 - C1307 + C1308 - C1309 + C1310 - C1311) * C32010) *
                    C815 +
                ((C1312 - C1313 + C1314 - C1315 + C1316 - C1317) * C114 +
                 (C1318 - C1319 + C1320 - C1321 + C1322 - C1323) * C32010) *
                    C32271) *
                   C577 +
               (((C32317 * C686 - C817 * C681 + C32305 * C1122 - C818 * C1113 +
                  C32282 * C1646 - C819 * C1643) *
                     C114 +
                 (C32317 * C696 - C817 * C687 + C32305 * C1140 - C818 * C1123 +
                  C32282 * C1652 - C819 * C1647) *
                     C32010) *
                    C814 +
                ((C32317 * C688 - C817 * C682 + C32305 * C1124 - C818 * C1114 +
                  C32282 * C1648 - C819 * C1644) *
                     C114 +
                 (C32317 * C697 - C817 * C689 + C32305 * C1141 - C818 * C1125 +
                  C32282 * C1653 - C819 * C1649) *
                     C32010) *
                    C815 +
                ((C32317 * C690 - C817 * C683 + C32305 * C1126 - C818 * C1115 +
                  C32282 * C1650 - C819 * C1645) *
                     C114 +
                 (C32317 * C698 - C817 * C691 + C32305 * C1142 - C818 * C1127 +
                  C32282 * C1654 - C819 * C1651) *
                     C32010) *
                    C32271) *
                   C578) *
                  C472) *
             C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C1768 +
             (C31993 * C136 - C113 * C123) * C32318 + (C2043 - C2044) * C1769 +
             (C2045 - C2046) * C32307 + C2065 * C1770 + C2066 * C32285) *
                C814 +
            ((C144 - C145) * C1768 + (C146 - C147) * C32318 + C2383 * C1769 +
             C2384 * C32307 + C2051 * C1770 + C2052 * C32285) *
                C815 +
            C1798 * C32271) *
               C577 +
           (((C2044 - C2043) * C1768 + (C2046 - C2045) * C32318 +
             (C2048 - C2047) * C1769 + (C2050 - C2049) * C32307 +
             (C2053 - C2054) * C1770 + (C2055 - C2056) * C32285) *
                C814 +
            (C2385 * C1768 + C2386 * C32318 + C2387 * C1769 + C2388 * C32307 +
             (C2057 - C2058) * C1770 + (C2059 - C2060) * C32285) *
                C815 +
            (C2389 * C1768 + C2390 * C32318 + C2391 * C1769 + C2392 * C32307 +
             (C2061 - C2062) * C1770 + (C2063 - C2064) * C32285) *
                C32271) *
               C578) *
              C471 +
          ((((C113 * C244 - C31993 * C254) * C1768 +
             (C113 * C255 - C31993 * C274) * C32318 + (C2551 - C2552) * C1769 +
             (C2553 - C2554) * C32307 + (C2555 - C2556) * C1770 +
             (C2557 - C2558) * C32285) *
                C814 +
            ((C480 - C481) * C1768 + (C482 - C483) * C32318 +
             (C2217 - C2218) * C1769 + (C2219 - C2220) * C32307 +
             (C2221 - C2222) * C1770 + (C2223 - C2224) * C32285) *
                C815 +
            ((C484 - C485) * C1768 + (C486 - C487) * C32318 +
             (C2225 - C2226) * C1769 + (C2227 - C2228) * C32307 +
             (C2229 - C2230) * C1770 + (C2231 - C2232) * C32285) *
                C32271) *
               C577 +
           (((C2552 - C2551) * C1768 + (C2554 - C2553) * C32318 +
             (C2556 - C2555) * C1769 + (C2558 - C2557) * C32307 +
             (C31993 * C2541 - C113 * C2538) * C1770 +
             (C31993 * C2547 - C113 * C2542) * C32285) *
                C814 +
            ((C2218 - C2217) * C1768 + (C2220 - C2219) * C32318 +
             (C2222 - C2221) * C1769 + (C2224 - C2223) * C32307 +
             (C31993 * C2543 - C113 * C2539) * C1770 +
             (C31993 * C2548 - C113 * C2544) * C32285) *
                C815 +
            ((C2226 - C2225) * C1768 + (C2228 - C2227) * C32318 +
             (C2230 - C2229) * C1769 + (C2232 - C2231) * C32307 +
             (C31993 * C2545 - C113 * C2540) * C1770 +
             (C31993 * C2549 - C113 * C2546) * C32285) *
                C32271) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
              C32282 * C264 - C5283 * C249) *
                 C114 +
             (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
              C32282 * C279 - C5283 * C265) *
                 C32010) *
                C32314 +
            ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
             (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
                C32301 +
            C5333 * C32271) *
               C577 +
           (((C5281 * C349 - C5275 * C359 + C5282 * C681 - C5276 * C686 +
              C5283 * C1113 - C32282 * C1122) *
                 C114 +
             (C5281 * C360 - C5275 * C379 + C5282 * C687 - C5276 * C696 +
              C5283 * C1123 - C32282 * C1140) *
                 C32010) *
                C32314 +
            ((C5870 - C5871 + C5872 - C5873 + C5874 - C5875) * C114 +
             (C5876 - C5877 + C5878 - C5879 + C5880 - C5881) * C32010) *
                C32301 +
            ((C5882 - C5883 + C5884 - C5885 + C5886 - C5887) * C114 +
             (C5888 - C5889 + C5890 - C5891 + C5892 - C5893) * C32010) *
                C32271) *
               C578) *
              C471 +
          ((((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
              C5283 * C979 - C32282 * C985) *
                 C114 +
             (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
              C5283 * C986 - C32282 * C997) *
                 C32010) *
                C32314 +
            ((C5700 - C5701 + C5702 - C5703 + C5704 - C5705) * C114 +
             (C5706 - C5707 + C5708 - C5709 + C5710 - C5711) * C32010) *
                C32301 +
            ((C5712 - C5713 + C5714 - C5715 + C5716 - C5717) * C114 +
             (C5718 - C5719 + C5720 - C5721 + C5722 - C5723) * C32010) *
                C32271) *
               C577 +
           (((C5275 * C686 - C5281 * C681 + C5276 * C1122 - C5282 * C1113 +
              C32282 * C1646 - C5283 * C1643) *
                 C114 +
             (C5275 * C696 - C5281 * C687 + C5276 * C1140 - C5282 * C1123 +
              C32282 * C1652 - C5283 * C1647) *
                 C32010) *
                C32314 +
            ((C5275 * C688 - C5281 * C682 + C5276 * C1124 - C5282 * C1114 +
              C32282 * C1648 - C5283 * C1644) *
                 C114 +
             (C5275 * C697 - C5281 * C689 + C5276 * C1141 - C5282 * C1125 +
              C32282 * C1653 - C5283 * C1649) *
                 C32010) *
                C32301 +
            ((C5275 * C690 - C5281 * C683 + C5276 * C1126 - C5282 * C1115 +
              C32282 * C1650 - C5283 * C1645) *
                 C114 +
             (C5275 * C698 - C5281 * C691 + C5276 * C1142 - C5282 * C1127 +
              C32282 * C1654 - C5283 * C1651) *
                 C32010) *
                C32271) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
             C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
             C6105 * C991 - C6111 * C982) *
                C114 +
            (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
             C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
             C6105 * C1000 - C6111 * C992) *
                C32010) *
               C31911 * C577 +
           ((C6107 * C349 - C6101 * C359 + C6108 * C681 - C6102 * C686 +
             C6109 * C1113 - C6103 * C1122 + C6110 * C1643 - C6104 * C1646 +
             C6111 * C6244 - C6105 * C6247) *
                C114 +
            (C6107 * C360 - C6101 * C379 + C6108 * C687 - C6102 * C696 +
             C6109 * C1123 - C6103 * C1140 + C6110 * C1647 - C6104 * C1652 +
             C6111 * C6248 - C6105 * C6253) *
                C32010) *
               C31911 * C578) *
              C471 +
          (((C6107 * C244 - C6101 * C254 + C6108 * C249 - C6102 * C264 +
             C6109 * C979 - C6103 * C985 + C6110 * C982 - C6104 * C991 +
             C6111 * C6174 - C6105 * C6176) *
                C114 +
            (C6107 * C255 - C6101 * C274 + C6108 * C265 - C6102 * C279 +
             C6109 * C986 - C6103 * C997 + C6110 * C992 - C6104 * C1000 +
             C6111 * C6177 - C6105 * C6180) *
                C32010) *
               C31911 * C577 +
           ((C6101 * C686 - C6107 * C681 + C6102 * C1122 - C6108 * C1113 +
             C6103 * C1646 - C6109 * C1643 + C6104 * C6247 - C6110 * C6244 +
             C6105 * C6511 - C6111 * C6510) *
                C114 +
            (C6101 * C696 - C6107 * C687 + C6102 * C1140 - C6108 * C1123 +
             C6103 * C1652 - C6109 * C1647 + C6104 * C6253 - C6110 * C6248 +
             C6105 * C6513 - C6111 * C6512) *
                C32010) *
               C31911 * C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C1768 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32318 +
            (C6857 - C6858 + C6859 - C6860 + C6861 - C6862) * C1769 +
            (C6863 - C6864 + C6865 - C6866 + C6867 - C6868) * C32307 +
            C6901 * C1770 + C6902 * C32285) *
               C31911 * C577 +
           ((C6858 - C6857 + C6860 - C6859 + C6862 - C6861) * C1768 +
            (C6864 - C6863 + C6866 - C6865 + C6868 - C6867) * C32318 +
            (C6870 - C6869 + C6872 - C6871 + C6874 - C6873) * C1769 +
            (C6876 - C6875 + C6878 - C6877 + C6880 - C6879) * C32307 +
            (C6881 - C6882 + C6883 - C6884 + C6885 - C6886) * C1770 +
            (C6887 - C6888 + C6889 - C6890 + C6891 - C6892) * C32285) *
               C31911 * C578) *
              C471 +
          (((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
             C5283 * C979 - C32282 * C985) *
                C1768 +
            (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
             C5283 * C986 - C32282 * C997) *
                C32318 +
            (C7365 - C7366 + C7367 - C7368 + C7369 - C7370) * C1769 +
            (C7371 - C7372 + C7373 - C7374 + C7375 - C7376) * C32307 +
            (C7377 - C7378 + C7379 - C7380 + C7381 - C7382) * C1770 +
            (C7383 - C7384 + C7385 - C7386 + C7387 - C7388) * C32285) *
               C31911 * C577 +
           ((C7366 - C7365 + C7368 - C7367 + C7370 - C7369) * C1768 +
            (C7372 - C7371 + C7374 - C7373 + C7376 - C7375) * C32318 +
            (C7378 - C7377 + C7380 - C7379 + C7382 - C7381) * C1769 +
            (C7384 - C7383 + C7386 - C7385 + C7388 - C7387) * C32307 +
            (C5275 * C2541 - C5281 * C2538 + C5276 * C6847 - C5282 * C6844 +
             C32282 * C7361 - C5283 * C7360) *
                C1770 +
            (C5275 * C2547 - C5281 * C2542 + C5276 * C6853 - C5282 * C6848 +
             C32282 * C7363 - C5283 * C7362) *
                C32285) *
               C31911 * C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C10043 +
             (C31993 * C136 - C113 * C123) * C10040 + (C2043 - C2044) * C10044 +
             (C2045 - C2046) * C10041 + C2065 * C10045 + C2066 * C32285) *
                C32314 +
            ((C144 - C145) * C10043 + (C146 - C147) * C10040 + C2383 * C10044 +
             C2384 * C10041 + C2051 * C10045 + C2052 * C32285) *
                C32301 +
            C10057 * C32271) *
               C577 +
           (((C2044 - C2043) * C10043 + (C2046 - C2045) * C10040 +
             (C2048 - C2047) * C10044 + (C2050 - C2049) * C10041 +
             (C2053 - C2054) * C10045 + (C2055 - C2056) * C32285) *
                C32314 +
            (C2385 * C10043 + C2386 * C10040 + C2387 * C10044 + C2388 * C10041 +
             (C2057 - C2058) * C10045 + (C2059 - C2060) * C32285) *
                C32301 +
            (C2389 * C10043 + C2390 * C10040 + C2391 * C10044 + C2392 * C10041 +
             (C2061 - C2062) * C10045 + (C2063 - C2064) * C32285) *
                C32271) *
               C578) *
              C471 +
          ((((C113 * C244 - C31993 * C254) * C10043 +
             (C113 * C255 - C31993 * C274) * C10040 + (C2551 - C2552) * C10044 +
             (C2553 - C2554) * C10041 + (C2555 - C2556) * C10045 +
             (C2557 - C2558) * C32285) *
                C32314 +
            ((C480 - C481) * C10043 + (C482 - C483) * C10040 +
             (C2217 - C2218) * C10044 + (C2219 - C2220) * C10041 +
             (C2221 - C2222) * C10045 + (C2223 - C2224) * C32285) *
                C32301 +
            ((C484 - C485) * C10043 + (C486 - C487) * C10040 +
             (C2225 - C2226) * C10044 + (C2227 - C2228) * C10041 +
             (C2229 - C2230) * C10045 + (C2231 - C2232) * C32285) *
                C32271) *
               C577 +
           (((C2552 - C2551) * C10043 + (C2554 - C2553) * C10040 +
             (C2556 - C2555) * C10044 + (C2558 - C2557) * C10041 +
             (C31993 * C2541 - C113 * C2538) * C10045 +
             (C31993 * C2547 - C113 * C2542) * C32285) *
                C32314 +
            ((C2218 - C2217) * C10043 + (C2220 - C2219) * C10040 +
             (C2222 - C2221) * C10044 + (C2224 - C2223) * C10041 +
             (C31993 * C2543 - C113 * C2539) * C10045 +
             (C31993 * C2548 - C113 * C2544) * C32285) *
                C32301 +
            ((C2226 - C2225) * C10043 + (C2228 - C2227) * C10040 +
             (C2230 - C2229) * C10044 + (C2232 - C2231) * C10041 +
             (C31993 * C2545 - C113 * C2540) * C10045 +
             (C31993 * C2549 - C113 * C2546) * C32285) *
                C32271) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C10043 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C10040 +
            (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C10044 +
            (C11052 - C11053 + C11054 - C11055 + C11056 - C11057) * C10041 +
            C11090 * C10045 + C11091 * C32285) *
               C31911 * C577 +
           ((C11047 - C11046 + C11049 - C11048 + C11051 - C11050) * C10043 +
            (C11053 - C11052 + C11055 - C11054 + C11057 - C11056) * C10040 +
            (C11059 - C11058 + C11061 - C11060 + C11063 - C11062) * C10044 +
            (C11065 - C11064 + C11067 - C11066 + C11069 - C11068) * C10041 +
            (C11070 - C11071 + C11072 - C11073 + C11074 - C11075) * C10045 +
            (C11076 - C11077 + C11078 - C11079 + C11080 - C11081) * C32285) *
               C31911 * C578) *
              C471 +
          (((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
             C819 * C979 - C32282 * C985) *
                C10043 +
            (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
             C819 * C986 - C32282 * C997) *
                C10040 +
            (C11542 - C11543 + C11544 - C11545 + C11546 - C11547) * C10044 +
            (C11548 - C11549 + C11550 - C11551 + C11552 - C11553) * C10041 +
            (C11554 - C11555 + C11556 - C11557 + C11558 - C11559) * C10045 +
            (C11560 - C11561 + C11562 - C11563 + C11564 - C11565) * C32285) *
               C31911 * C577 +
           ((C11543 - C11542 + C11545 - C11544 + C11547 - C11546) * C10043 +
            (C11549 - C11548 + C11551 - C11550 + C11553 - C11552) * C10040 +
            (C11555 - C11554 + C11557 - C11556 + C11559 - C11558) * C10044 +
            (C11561 - C11560 + C11563 - C11562 + C11565 - C11564) * C10041 +
            (C32317 * C2541 - C817 * C2538 + C32305 * C6847 - C818 * C6844 +
             C32282 * C7361 - C819 * C7360) *
                C10045 +
            (C32317 * C2547 - C817 * C2542 + C32305 * C6853 - C818 * C6848 +
             C32282 * C7363 - C819 * C7362) *
                C32285) *
               C31911 * C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C11632 +
            (C31993 * C136 - C113 * C123) * C11627 + (C2043 - C2044) * C11633 +
            (C2045 - C2046) * C11628 + C2065 * C11634 + C2066 * C11629 +
            C11770 * C11635 + C11771 * C11630 + C11780 * C11636 +
            C11781 * C11631) *
               C31911 * C577 +
           ((C2044 - C2043) * C11632 + (C2046 - C2045) * C11627 +
            (C2048 - C2047) * C11633 + (C2050 - C2049) * C11628 +
            (C2053 - C2054) * C11634 + (C2055 - C2056) * C11629 +
            (C11773 - C11772) * C11635 + (C11775 - C11774) * C11630 +
            (C11776 - C11777) * C11636 + (C11778 - C11779) * C11631) *
               C31911 * C578) *
              C471 +
          (((C113 * C244 - C31993 * C254) * C11632 +
            (C113 * C255 - C31993 * C274) * C11627 + (C2551 - C2552) * C11633 +
            (C2553 - C2554) * C11628 + (C2555 - C2556) * C11634 +
            (C2557 - C2558) * C11629 + (C12044 - C12045) * C11635 +
            (C12046 - C12047) * C11630 + (C12048 - C12049) * C11636 +
            (C12050 - C12051) * C11631) *
               C31911 * C577 +
           ((C2552 - C2551) * C11632 + (C2554 - C2553) * C11627 +
            (C2556 - C2555) * C11633 + (C2558 - C2557) * C11628 +
            (C12045 - C12044) * C11634 + (C12047 - C12046) * C11629 +
            (C12049 - C12048) * C11635 + (C12051 - C12050) * C11630 +
            (C31993 * C12040 - C113 * C12039) * C11636 +
            (C31993 * C12042 - C113 * C12041) * C11631) *
               C31911 * C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (-0.25 * std::pow(Pi, 2.5) *
             ((((C31993 * C122 - C113 * C115) * C114 +
                (C31993 * C136 - C113 * C123) * C32010) *
                   C103 +
               ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
               C176 * C105 + C177 * C106 + C178 * C107) *
                  C31970 * C31956 * C110 +
              (((C145 - C144) * C114 + (C147 - C146) * C32010) * C103 +
               ((C149 - C148) * C114 + (C151 - C150) * C32010) * C104 +
               ((C153 - C152) * C114 + (C155 - C154) * C32010) * C105 +
               ((C157 - C156) * C114 + (C159 - C158) * C32010) * C106 +
               ((C160 - C161) * C114 + (C162 - C163) * C32010) * C107) *
                  C31970 * C31956 * C111 +
              (C176 * C103 + C177 * C104 + C178 * C105 +
               ((C161 - C160) * C114 + (C163 - C162) * C32010) * C106 +
               ((C31993 * C134 - C113 * C121) * C114 +
                (C31993 * C142 - C113 * C135) * C32010) *
                   C107) *
                  C31970 * C31956 * C112) -
         0.25 * std::pow(Pi, 2.5) *
             ((((C31993 * C122 - C113 * C115) * C114 +
                (C31993 * C136 - C113 * C123) * C32010) *
                   C103 +
               ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
               C176 * C105 + C177 * C106 + C178 * C107) *
                  C31970 * C240 +
              (((C113 * C244 - C31993 * C254) * C114 +
                (C113 * C255 - C31993 * C274) * C32010) *
                   C103 +
               ((C113 * C245 - C31993 * C256) * C114 +
                (C113 * C257 - C31993 * C275) * C32010) *
                   C104 +
               ((C113 * C246 - C31993 * C258) * C114 +
                (C113 * C259 - C31993 * C276) * C32010) *
                   C105 +
               ((C113 * C247 - C31993 * C260) * C114 +
                (C113 * C261 - C31993 * C277) * C32010) *
                   C106 +
               ((C113 * C248 - C31993 * C262) * C114 +
                (C113 * C263 - C31993 * C278) * C32010) *
                   C107) *
                  C31970 * C241 +
              (((C31993 * C264 - C113 * C249) * C114 +
                (C31993 * C279 - C113 * C265) * C32010) *
                   C103 +
               ((C31993 * C266 - C113 * C250) * C114 +
                (C31993 * C280 - C113 * C267) * C32010) *
                   C104 +
               ((C31993 * C268 - C113 * C251) * C114 +
                (C31993 * C281 - C113 * C269) * C32010) *
                   C105 +
               ((C31993 * C270 - C113 * C252) * C114 +
                (C31993 * C282 - C113 * C271) * C32010) *
                   C106 +
               ((C31993 * C272 - C113 * C253) * C114 +
                (C31993 * C283 - C113 * C273) * C32010) *
                   C107) *
                  C31970 * C242) *
             C31944 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C31993 * C122 - C113 * C115) * C114 +
                (C31993 * C136 - C113 * C123) * C32010) *
                   C103 +
               ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
               C176 * C105 + C177 * C106 + C178 * C107) *
                  C346 +
              (((C113 * C349 - C31993 * C359) * C114 +
                (C113 * C360 - C31993 * C379) * C32010) *
                   C103 +
               ((C113 * C350 - C31993 * C361) * C114 +
                (C113 * C362 - C31993 * C380) * C32010) *
                   C104 +
               ((C113 * C351 - C31993 * C363) * C114 +
                (C113 * C364 - C31993 * C381) * C32010) *
                   C105 +
               ((C113 * C352 - C31993 * C365) * C114 +
                (C113 * C366 - C31993 * C382) * C32010) *
                   C106 +
               ((C113 * C353 - C31993 * C367) * C114 +
                (C113 * C368 - C31993 * C383) * C32010) *
                   C107) *
                  C347 +
              (((C31993 * C369 - C113 * C354) * C114 +
                (C31993 * C384 - C113 * C370) * C32010) *
                   C103 +
               ((C31993 * C371 - C113 * C355) * C114 +
                (C31993 * C385 - C113 * C372) * C32010) *
                   C104 +
               ((C31993 * C373 - C113 * C356) * C114 +
                (C31993 * C386 - C113 * C374) * C32010) *
                   C105 +
               ((C31993 * C375 - C113 * C357) * C114 +
                (C31993 * C387 - C113 * C376) * C32010) *
                   C106 +
               ((C31993 * C377 - C113 * C358) * C114 +
                (C31993 * C388 - C113 * C378) * C32010) *
                   C107) *
                  C348) *
             C31956 * C31944 -
         0.25 * std::pow(Pi, 2.5) *
             ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
                 C32282 * C264 - C819 * C249) *
                    C114 +
                (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
                 C32282 * C279 - C819 * C265) *
                    C32010) *
                   C814 +
               ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
                (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
                   C815 +
               C869 * C32271) *
                  C31970 * C31956 * C110 +
              (((C822 - C821 + C824 - C823 + C826 - C825) * C114 +
                (C828 - C827 + C830 - C829 + C832 - C831) * C32010) *
                   C814 +
               ((C834 - C833 + C836 - C835 + C838 - C837) * C114 +
                (C840 - C839 + C842 - C841 + C844 - C843) * C32010) *
                   C815 +
               ((C845 - C846 + C847 - C848 + C849 - C850) * C114 +
                (C851 - C852 + C853 - C854 + C855 - C856) * C32010) *
                   C32271) *
                  C31970 * C31956 * C111 +
              (C869 * C814 +
               ((C846 - C845 + C848 - C847 + C850 - C849) * C114 +
                (C852 - C851 + C854 - C853 + C856 - C855) * C32010) *
                   C815 +
               ((C32317 * C130 - C817 * C119 + C32305 * C262 - C818 * C248 +
                 C32282 * C272 - C819 * C253) *
                    C114 +
                (C32317 * C140 - C817 * C131 + C32305 * C278 - C818 * C263 +
                 C32282 * C283 - C819 * C273) *
                    C32010) *
                   C32271) *
                  C31970 * C31956 * C112) -
         0.25 * std::pow(Pi, 2.5) *
             ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
                 C32282 * C264 - C819 * C249) *
                    C114 +
                (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
                 C32282 * C279 - C819 * C265) *
                    C32010) *
                   C814 +
               ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
                (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
                   C815 +
               C869 * C32271) *
                  C31970 * C240 +
              (((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
                 C819 * C979 - C32282 * C985) *
                    C114 +
                (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
                 C819 * C986 - C32282 * C997) *
                    C32010) *
                   C814 +
               ((C817 * C245 - C32317 * C256 + C818 * C250 - C32305 * C266 +
                 C819 * C980 - C32282 * C987) *
                    C114 +
                (C817 * C257 - C32317 * C275 + C818 * C267 - C32305 * C280 +
                 C819 * C988 - C32282 * C998) *
                    C32010) *
                   C815 +
               ((C817 * C246 - C32317 * C258 + C818 * C251 - C32305 * C268 +
                 C819 * C981 - C32282 * C989) *
                    C114 +
                (C817 * C259 - C32317 * C276 + C818 * C269 - C32305 * C281 +
                 C819 * C990 - C32282 * C999) *
                    C32010) *
                   C32271) *
                  C31970 * C241 +
              (((C32317 * C264 - C817 * C249 + C32305 * C985 - C818 * C979 +
                 C32282 * C991 - C819 * C982) *
                    C114 +
                (C32317 * C279 - C817 * C265 + C32305 * C997 - C818 * C986 +
                 C32282 * C1000 - C819 * C992) *
                    C32010) *
                   C814 +
               ((C32317 * C266 - C817 * C250 + C32305 * C987 - C818 * C980 +
                 C32282 * C993 - C819 * C983) *
                    C114 +
                (C32317 * C280 - C817 * C267 + C32305 * C998 - C818 * C988 +
                 C32282 * C1001 - C819 * C994) *
                    C32010) *
                   C815 +
               ((C32317 * C268 - C817 * C251 + C32305 * C989 - C818 * C981 +
                 C32282 * C995 - C819 * C984) *
                    C114 +
                (C32317 * C281 - C817 * C269 + C32305 * C999 - C818 * C990 +
                 C32282 * C1002 - C819 * C996) *
                    C32010) *
                   C32271) *
                  C31970 * C242) *
             C31944 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
                 C32282 * C264 - C819 * C249) *
                    C114 +
                (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
                 C32282 * C279 - C819 * C265) *
                    C32010) *
                   C814 +
               ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
                (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
                   C815 +
               C869 * C32271) *
                  C346 +
              (((C817 * C349 - C32317 * C359 + C818 * C681 - C32305 * C686 +
                 C819 * C1113 - C32282 * C1122) *
                    C114 +
                (C817 * C360 - C32317 * C379 + C818 * C687 - C32305 * C696 +
                 C819 * C1123 - C32282 * C1140) *
                    C32010) *
                   C814 +
               ((C817 * C350 - C32317 * C361 + C818 * C682 - C32305 * C688 +
                 C819 * C1114 - C32282 * C1124) *
                    C114 +
                (C817 * C362 - C32317 * C380 + C818 * C689 - C32305 * C697 +
                 C819 * C1125 - C32282 * C1141) *
                    C32010) *
                   C815 +
               ((C817 * C351 - C32317 * C363 + C818 * C683 - C32305 * C690 +
                 C819 * C1115 - C32282 * C1126) *
                    C114 +
                (C817 * C364 - C32317 * C381 + C818 * C691 - C32305 * C698 +
                 C819 * C1127 - C32282 * C1142) *
                    C32010) *
                   C32271) *
                  C347 +
              (((C32317 * C369 - C817 * C354 + C32305 * C1128 - C818 * C1116 +
                 C32282 * C1129 - C819 * C1117) *
                    C114 +
                (C32317 * C384 - C817 * C370 + C32305 * C1143 - C818 * C1130 +
                 C32282 * C1144 - C819 * C1131) *
                    C32010) *
                   C814 +
               ((C32317 * C371 - C817 * C355 + C32305 * C1132 - C818 * C1118 +
                 C32282 * C1133 - C819 * C1119) *
                    C114 +
                (C32317 * C385 - C817 * C372 + C32305 * C1145 - C818 * C1134 +
                 C32282 * C1146 - C819 * C1135) *
                    C32010) *
                   C815 +
               ((C32317 * C373 - C817 * C356 + C32305 * C1136 - C818 * C1120 +
                 C32282 * C1137 - C819 * C1121) *
                    C114 +
                (C32317 * C386 - C817 * C374 + C32305 * C1147 - C818 * C1138 +
                 C32282 * C1148 - C819 * C1139) *
                    C32010) *
                   C32271) *
                  C348) *
             C31956 * C31944 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C31993 * C122 - C113 * C115) * C1768 +
                (C31993 * C136 - C113 * C123) * C32318 +
                (C31993 * C359 - C113 * C349) * C1769 +
                (C31993 * C379 - C113 * C360) * C32307 +
                (C31993 * C369 - C113 * C354) * C1770 +
                (C31993 * C384 - C113 * C370) * C32285) *
                   C814 +
               ((C144 - C145) * C1768 + (C146 - C147) * C32318 +
                (C585 - C584) * C1769 + (C587 - C586) * C32307 +
                (C1772 - C1773) * C1770 + (C1774 - C1775) * C32285) *
                   C815 +
               C1798 * C32271) *
                  C31970 * C31956 * C110 +
              (((C145 - C144) * C1768 + (C147 - C146) * C32318 +
                (C584 - C585) * C1769 + (C586 - C587) * C32307 +
                (C1773 - C1772) * C1770 + (C1775 - C1774) * C32285) *
                   C814 +
               ((C149 - C148) * C1768 + (C151 - C150) * C32318 +
                (C588 - C589) * C1769 + (C590 - C591) * C32307 +
                (C1781 - C1780) * C1770 + (C1783 - C1782) * C32285) *
                   C815 +
               ((C153 - C152) * C1768 + (C155 - C154) * C32318 +
                (C592 - C593) * C1769 + (C594 - C595) * C32307 +
                (C1784 - C1785) * C1770 + (C1786 - C1787) * C32285) *
                   C32271) *
                  C31970 * C31956 * C111 +
              (C1798 * C814 +
               (C166 * C1768 + C167 * C32318 + (C593 - C592) * C1769 +
                (C595 - C594) * C32307 + (C1785 - C1784) * C1770 +
                (C1787 - C1786) * C32285) *
                   C815 +
               (C168 * C1768 + C169 * C32318 + (C597 - C596) * C1769 +
                (C599 - C598) * C32307 + (C31993 * C377 - C113 * C358) * C1770 +
                (C31993 * C388 - C113 * C378) * C32285) *
                   C32271) *
                  C31970 * C31956 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C31993 * C122 - C113 * C115) * C1768 +
                (C31993 * C136 - C113 * C123) * C32318 +
                (C31993 * C359 - C113 * C349) * C1769 +
                (C31993 * C379 - C113 * C360) * C32307 +
                (C31993 * C369 - C113 * C354) * C1770 +
                (C31993 * C384 - C113 * C370) * C32285) *
                   C814 +
               ((C144 - C145) * C1768 + (C146 - C147) * C32318 +
                (C585 - C584) * C1769 + (C587 - C586) * C32307 +
                (C1772 - C1773) * C1770 + (C1774 - C1775) * C32285) *
                   C815 +
               C1798 * C32271) *
                  C31970 * C240 +
              (((C113 * C244 - C31993 * C254) * C1768 +
                (C113 * C255 - C31993 * C274) * C32318 +
                (C113 * C681 - C31993 * C686) * C1769 +
                (C113 * C687 - C31993 * C696) * C32307 +
                (C113 * C1116 - C31993 * C1128) * C1770 +
                (C113 * C1130 - C31993 * C1143) * C32285) *
                   C814 +
               ((C480 - C481) * C1768 + (C482 - C483) * C32318 +
                (C113 * C682 - C31993 * C688) * C1769 +
                (C113 * C689 - C31993 * C697) * C32307 +
                (C113 * C1118 - C31993 * C1132) * C1770 +
                (C113 * C1134 - C31993 * C1145) * C32285) *
                   C815 +
               ((C484 - C485) * C1768 + (C486 - C487) * C32318 +
                (C113 * C683 - C31993 * C690) * C1769 +
                (C113 * C691 - C31993 * C698) * C32307 +
                (C113 * C1120 - C31993 * C1136) * C1770 +
                (C113 * C1138 - C31993 * C1147) * C32285) *
                   C32271) *
                  C31970 * C241 +
              (((C31993 * C264 - C113 * C249) * C1768 +
                (C31993 * C279 - C113 * C265) * C32318 +
                (C31993 * C1122 - C113 * C1113) * C1769 +
                (C31993 * C1140 - C113 * C1123) * C32307 +
                (C31993 * C1129 - C113 * C1117) * C1770 +
                (C31993 * C1144 - C113 * C1131) * C32285) *
                   C814 +
               ((C31993 * C266 - C113 * C250) * C1768 +
                (C31993 * C280 - C113 * C267) * C32318 +
                (C31993 * C1124 - C113 * C1114) * C1769 +
                (C31993 * C1141 - C113 * C1125) * C32307 +
                (C31993 * C1133 - C113 * C1119) * C1770 +
                (C31993 * C1146 - C113 * C1135) * C32285) *
                   C815 +
               ((C31993 * C268 - C113 * C251) * C1768 +
                (C31993 * C281 - C113 * C269) * C32318 +
                (C31993 * C1126 - C113 * C1115) * C1769 +
                (C31993 * C1142 - C113 * C1127) * C32307 +
                (C31993 * C1137 - C113 * C1121) * C1770 +
                (C31993 * C1148 - C113 * C1139) * C32285) *
                   C32271) *
                  C31970 * C242) *
             C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C1768 +
            (C31993 * C136 - C113 * C123) * C32318 + (C2043 - C2044) * C1769 +
            (C2045 - C2046) * C32307 + C2065 * C1770 + C2066 * C32285) *
               C814 +
           ((C144 - C145) * C1768 + (C146 - C147) * C32318 +
            (C585 - C584) * C1769 + (C587 - C586) * C32307 + C2051 * C1770 +
            C2052 * C32285) *
               C815 +
           C1798 * C32271) *
              C346 +
          (((C2044 - C2043) * C1768 + (C2046 - C2045) * C32318 +
            (C2048 - C2047) * C1769 + (C2050 - C2049) * C32307 +
            (C2053 - C2054) * C1770 + (C2055 - C2056) * C32285) *
               C814 +
           ((C584 - C585) * C1768 + (C586 - C587) * C32318 +
            (C1773 - C1772) * C1769 + (C1775 - C1774) * C32307 +
            (C2057 - C2058) * C1770 + (C2059 - C2060) * C32285) *
               C815 +
           ((C588 - C589) * C1768 + (C590 - C591) * C32318 +
            (C1781 - C1780) * C1769 + (C1783 - C1782) * C32307 +
            (C2061 - C2062) * C1770 + (C2063 - C2064) * C32285) *
               C32271) *
              C347 +
          ((C2065 * C1768 + C2066 * C32318 + (C2054 - C2053) * C1769 +
            (C2056 - C2055) * C32307 + (C31993 * C2030 - C113 * C2021) * C1770 +
            (C31993 * C2039 - C113 * C2031) * C32285) *
               C814 +
           (C2051 * C1768 + C2052 * C32318 + (C2058 - C2057) * C1769 +
            (C2060 - C2059) * C32307 + (C31993 * C2032 - C113 * C2022) * C1770 +
            (C31993 * C2040 - C113 * C2033) * C32285) *
               C815 +
           (C1791 * C1768 + C1792 * C32318 + (C2062 - C2061) * C1769 +
            (C2064 - C2063) * C32307 + (C31993 * C2034 - C113 * C2023) * C1770 +
            (C31993 * C2041 - C113 * C2035) * C32285) *
               C32271) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C114 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32010) *
               C32314 +
           ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
            (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
               C32301 +
           C5333 * C32271) *
              C31970 * C31956 * C110 +
          (((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C114 +
            (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32010) *
               C32314 +
           ((C5298 - C5297 + C5300 - C5299 + C5302 - C5301) * C114 +
            (C5304 - C5303 + C5306 - C5305 + C5308 - C5307) * C32010) *
               C32301 +
           ((C5309 - C5310 + C5311 - C5312 + C5313 - C5314) * C114 +
            (C5315 - C5316 + C5317 - C5318 + C5319 - C5320) * C32010) *
               C32271) *
              C31970 * C31956 * C111 +
          (C5333 * C32314 +
           ((C5310 - C5309 + C5312 - C5311 + C5314 - C5313) * C114 +
            (C5316 - C5315 + C5318 - C5317 + C5320 - C5319) * C32010) *
               C32301 +
           ((C5275 * C130 - C5281 * C119 + C5276 * C262 - C5282 * C248 +
             C32282 * C272 - C5283 * C253) *
                C114 +
            (C5275 * C140 - C5281 * C131 + C5276 * C278 - C5282 * C263 +
             C32282 * C283 - C5283 * C273) *
                C32010) *
               C32271) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C114 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32010) *
               C32314 +
           ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
            (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
               C32301 +
           C5333 * C32271) *
              C31970 * C240 +
          (((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
             C5283 * C979 - C32282 * C985) *
                C114 +
            (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
             C5283 * C986 - C32282 * C997) *
                C32010) *
               C32314 +
           ((C5281 * C245 - C5275 * C256 + C5282 * C250 - C5276 * C266 +
             C5283 * C980 - C32282 * C987) *
                C114 +
            (C5281 * C257 - C5275 * C275 + C5282 * C267 - C5276 * C280 +
             C5283 * C988 - C32282 * C998) *
                C32010) *
               C32301 +
           ((C5281 * C246 - C5275 * C258 + C5282 * C251 - C5276 * C268 +
             C5283 * C981 - C32282 * C989) *
                C114 +
            (C5281 * C259 - C5275 * C276 + C5282 * C269 - C5276 * C281 +
             C5283 * C990 - C32282 * C999) *
                C32010) *
               C32271) *
              C31970 * C241 +
          (((C5275 * C264 - C5281 * C249 + C5276 * C985 - C5282 * C979 +
             C32282 * C991 - C5283 * C982) *
                C114 +
            (C5275 * C279 - C5281 * C265 + C5276 * C997 - C5282 * C986 +
             C32282 * C1000 - C5283 * C992) *
                C32010) *
               C32314 +
           ((C5275 * C266 - C5281 * C250 + C5276 * C987 - C5282 * C980 +
             C32282 * C993 - C5283 * C983) *
                C114 +
            (C5275 * C280 - C5281 * C267 + C5276 * C998 - C5282 * C988 +
             C32282 * C1001 - C5283 * C994) *
                C32010) *
               C32301 +
           ((C5275 * C268 - C5281 * C251 + C5276 * C989 - C5282 * C981 +
             C32282 * C995 - C5283 * C984) *
                C114 +
            (C5275 * C281 - C5281 * C269 + C5276 * C999 - C5282 * C990 +
             C32282 * C1002 - C5283 * C996) *
                C32010) *
               C32271) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C114 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32010) *
               C32314 +
           ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
            (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
               C32301 +
           C5333 * C32271) *
              C346 +
          (((C5281 * C349 - C5275 * C359 + C5282 * C681 - C5276 * C686 +
             C5283 * C1113 - C32282 * C1122) *
                C114 +
            (C5281 * C360 - C5275 * C379 + C5282 * C687 - C5276 * C696 +
             C5283 * C1123 - C32282 * C1140) *
                C32010) *
               C32314 +
           ((C5281 * C350 - C5275 * C361 + C5282 * C682 - C5276 * C688 +
             C5283 * C1114 - C32282 * C1124) *
                C114 +
            (C5281 * C362 - C5275 * C380 + C5282 * C689 - C5276 * C697 +
             C5283 * C1125 - C32282 * C1141) *
                C32010) *
               C32301 +
           ((C5281 * C351 - C5275 * C363 + C5282 * C683 - C5276 * C690 +
             C5283 * C1115 - C32282 * C1126) *
                C114 +
            (C5281 * C364 - C5275 * C381 + C5282 * C691 - C5276 * C698 +
             C5283 * C1127 - C32282 * C1142) *
                C32010) *
               C32271) *
              C347 +
          (((C5275 * C369 - C5281 * C354 + C5276 * C1128 - C5282 * C1116 +
             C32282 * C1129 - C5283 * C1117) *
                C114 +
            (C5275 * C384 - C5281 * C370 + C5276 * C1143 - C5282 * C1130 +
             C32282 * C1144 - C5283 * C1131) *
                C32010) *
               C32314 +
           ((C5275 * C371 - C5281 * C355 + C5276 * C1132 - C5282 * C1118 +
             C32282 * C1133 - C5283 * C1119) *
                C114 +
            (C5275 * C385 - C5281 * C372 + C5276 * C1145 - C5282 * C1134 +
             C32282 * C1146 - C5283 * C1135) *
                C32010) *
               C32301 +
           ((C5275 * C373 - C5281 * C356 + C5276 * C1136 - C5282 * C1120 +
             C32282 * C1137 - C5283 * C1121) *
                C114 +
            (C5275 * C386 - C5281 * C374 + C5276 * C1147 - C5282 * C1138 +
             C32282 * C1148 - C5283 * C1139) *
                C32010) *
               C32271) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
            C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
            C6105 * C991 - C6111 * C982) *
               C114 +
           (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
            C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
            C6105 * C1000 - C6111 * C992) *
               C32010) *
              C31911 * C31970 * C31956 * C110 +
          ((C6107 * C116 - C6101 * C124 + C6108 * C245 - C6102 * C256 +
            C6109 * C250 - C6103 * C266 + C6110 * C980 - C6104 * C987 +
            C6111 * C983 - C6105 * C993) *
               C114 +
           (C6107 * C125 - C6101 * C137 + C6108 * C257 - C6102 * C275 +
            C6109 * C267 - C6103 * C280 + C6110 * C988 - C6104 * C998 +
            C6111 * C994 - C6105 * C1001) *
               C32010) *
              C31911 * C31970 * C31956 * C111 +
          ((C6101 * C126 - C6107 * C117 + C6102 * C258 - C6108 * C246 +
            C6103 * C268 - C6109 * C251 + C6104 * C989 - C6110 * C981 +
            C6105 * C995 - C6111 * C984) *
               C114 +
           (C6101 * C138 - C6107 * C127 + C6102 * C276 - C6108 * C259 +
            C6103 * C281 - C6109 * C269 + C6104 * C999 - C6110 * C990 +
            C6105 * C1002 - C6111 * C996) *
               C32010) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
            C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
            C6105 * C991 - C6111 * C982) *
               C114 +
           (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
            C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
            C6105 * C1000 - C6111 * C992) *
               C32010) *
              C31911 * C31970 * C240 +
          ((C6107 * C244 - C6101 * C254 + C6108 * C249 - C6102 * C264 +
            C6109 * C979 - C6103 * C985 + C6110 * C982 - C6104 * C991 +
            C6111 * C6174 - C6105 * C6176) *
               C114 +
           (C6107 * C255 - C6101 * C274 + C6108 * C265 - C6102 * C279 +
            C6109 * C986 - C6103 * C997 + C6110 * C992 - C6104 * C1000 +
            C6111 * C6177 - C6105 * C6180) *
               C32010) *
              C31911 * C31970 * C241 +
          ((C6101 * C264 - C6107 * C249 + C6102 * C985 - C6108 * C979 +
            C6103 * C991 - C6109 * C982 + C6104 * C6176 - C6110 * C6174 +
            C6105 * C6178 - C6111 * C6175) *
               C114 +
           (C6101 * C279 - C6107 * C265 + C6102 * C997 - C6108 * C986 +
            C6103 * C1000 - C6109 * C992 + C6104 * C6180 - C6110 * C6177 +
            C6105 * C6181 - C6111 * C6179) *
               C32010) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
            C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
            C6105 * C991 - C6111 * C982) *
               C114 +
           (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
            C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
            C6105 * C1000 - C6111 * C992) *
               C32010) *
              C31911 * C346 +
          ((C6107 * C349 - C6101 * C359 + C6108 * C681 - C6102 * C686 +
            C6109 * C1113 - C6103 * C1122 + C6110 * C1643 - C6104 * C1646 +
            C6111 * C6244 - C6105 * C6247) *
               C114 +
           (C6107 * C360 - C6101 * C379 + C6108 * C687 - C6102 * C696 +
            C6109 * C1123 - C6103 * C1140 + C6110 * C1647 - C6104 * C1652 +
            C6111 * C6248 - C6105 * C6253) *
               C32010) *
              C31911 * C347 +
          ((C6101 * C369 - C6107 * C354 + C6102 * C1128 - C6108 * C1116 +
            C6103 * C1129 - C6109 * C1117 + C6104 * C6249 - C6110 * C6245 +
            C6105 * C6250 - C6111 * C6246) *
               C114 +
           (C6101 * C384 - C6107 * C370 + C6102 * C1143 - C6108 * C1130 +
            C6103 * C1144 - C6109 * C1131 + C6104 * C6254 - C6110 * C6251 +
            C6105 * C6255 - C6111 * C6252) *
               C32010) *
              C31911 * C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
            C32282 * C264 - C5283 * C249) *
               C1768 +
           (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
            C32282 * C279 - C5283 * C265) *
               C32318 +
           (C5275 * C359 - C5281 * C349 + C5276 * C686 - C5282 * C681 +
            C32282 * C1122 - C5283 * C1113) *
               C1769 +
           (C5275 * C379 - C5281 * C360 + C5276 * C696 - C5282 * C687 +
            C32282 * C1140 - C5283 * C1123) *
               C32307 +
           (C5275 * C369 - C5281 * C354 + C5276 * C1128 - C5282 * C1116 +
            C32282 * C1129 - C5283 * C1117) *
               C1770 +
           (C5275 * C384 - C5281 * C370 + C5276 * C1143 - C5282 * C1130 +
            C32282 * C1144 - C5283 * C1131) *
               C32285) *
              C31911 * C31970 * C31956 * C110 +
          ((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C1768 +
           (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32318 +
           (C5870 - C5871 + C5872 - C5873 + C5874 - C5875) * C1769 +
           (C5876 - C5877 + C5878 - C5879 + C5880 - C5881) * C32307 +
           (C5281 * C355 - C5275 * C371 + C5282 * C1118 - C5276 * C1132 +
            C5283 * C1119 - C32282 * C1133) *
               C1770 +
           (C5281 * C372 - C5275 * C385 + C5282 * C1134 - C5276 * C1145 +
            C5283 * C1135 - C32282 * C1146) *
               C32285) *
              C31911 * C31970 * C31956 * C111 +
          (C5329 * C1768 + C5330 * C32318 +
           (C5883 - C5882 + C5885 - C5884 + C5887 - C5886) * C1769 +
           (C5889 - C5888 + C5891 - C5890 + C5893 - C5892) * C32307 +
           (C5275 * C373 - C5281 * C356 + C5276 * C1136 - C5282 * C1120 +
            C32282 * C1137 - C5283 * C1121) *
               C1770 +
           (C5275 * C386 - C5281 * C374 + C5276 * C1147 - C5282 * C1138 +
            C32282 * C1148 - C5283 * C1139) *
               C32285) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
            C32282 * C264 - C5283 * C249) *
               C1768 +
           (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
            C32282 * C279 - C5283 * C265) *
               C32318 +
           (C5275 * C359 - C5281 * C349 + C5276 * C686 - C5282 * C681 +
            C32282 * C1122 - C5283 * C1113) *
               C1769 +
           (C5275 * C379 - C5281 * C360 + C5276 * C696 - C5282 * C687 +
            C32282 * C1140 - C5283 * C1123) *
               C32307 +
           (C5275 * C369 - C5281 * C354 + C5276 * C1128 - C5282 * C1116 +
            C32282 * C1129 - C5283 * C1117) *
               C1770 +
           (C5275 * C384 - C5281 * C370 + C5276 * C1143 - C5282 * C1130 +
            C32282 * C1144 - C5283 * C1131) *
               C32285) *
              C31911 * C31970 * C240 +
          ((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
            C5283 * C979 - C32282 * C985) *
               C1768 +
           (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
            C5283 * C986 - C32282 * C997) *
               C32318 +
           (C5281 * C681 - C5275 * C686 + C5282 * C1113 - C5276 * C1122 +
            C5283 * C1643 - C32282 * C1646) *
               C1769 +
           (C5281 * C687 - C5275 * C696 + C5282 * C1123 - C5276 * C1140 +
            C5283 * C1647 - C32282 * C1652) *
               C32307 +
           (C5281 * C1116 - C5275 * C1128 + C5282 * C1117 - C5276 * C1129 +
            C5283 * C6245 - C32282 * C6249) *
               C1770 +
           (C5281 * C1130 - C5275 * C1143 + C5282 * C1131 - C5276 * C1144 +
            C5283 * C6251 - C32282 * C6254) *
               C32285) *
              C31911 * C31970 * C241 +
          ((C5275 * C264 - C5281 * C249 + C5276 * C985 - C5282 * C979 +
            C32282 * C991 - C5283 * C982) *
               C1768 +
           (C5275 * C279 - C5281 * C265 + C5276 * C997 - C5282 * C986 +
            C32282 * C1000 - C5283 * C992) *
               C32318 +
           (C5275 * C1122 - C5281 * C1113 + C5276 * C1646 - C5282 * C1643 +
            C32282 * C6247 - C5283 * C6244) *
               C1769 +
           (C5275 * C1140 - C5281 * C1123 + C5276 * C1652 - C5282 * C1647 +
            C32282 * C6253 - C5283 * C6248) *
               C32307 +
           (C5275 * C1129 - C5281 * C1117 + C5276 * C6249 - C5282 * C6245 +
            C32282 * C6250 - C5283 * C6246) *
               C1770 +
           (C5275 * C1144 - C5281 * C1131 + C5276 * C6254 - C5282 * C6251 +
            C32282 * C6255 - C5283 * C6252) *
               C32285) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
            C32282 * C264 - C5283 * C249) *
               C1768 +
           (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
            C32282 * C279 - C5283 * C265) *
               C32318 +
           (C6857 - C6858 + C6859 - C6860 + C6861 - C6862) * C1769 +
           (C6863 - C6864 + C6865 - C6866 + C6867 - C6868) * C32307 +
           C6901 * C1770 + C6902 * C32285) *
              C31911 * C346 +
          ((C6858 - C6857 + C6860 - C6859 + C6862 - C6861) * C1768 +
           (C6864 - C6863 + C6866 - C6865 + C6868 - C6867) * C32318 +
           (C6870 - C6869 + C6872 - C6871 + C6874 - C6873) * C1769 +
           (C6876 - C6875 + C6878 - C6877 + C6880 - C6879) * C32307 +
           (C6881 - C6882 + C6883 - C6884 + C6885 - C6886) * C1770 +
           (C6887 - C6888 + C6889 - C6890 + C6891 - C6892) * C32285) *
              C31911 * C347 +
          (C6901 * C1768 + C6902 * C32318 +
           (C6882 - C6881 + C6884 - C6883 + C6886 - C6885) * C1769 +
           (C6888 - C6887 + C6890 - C6889 + C6892 - C6891) * C32307 +
           (C5275 * C2030 - C5281 * C2021 + C5276 * C6849 - C5282 * C6845 +
            C32282 * C6850 - C5283 * C6846) *
               C1770 +
           (C5275 * C2039 - C5281 * C2031 + C5276 * C6854 - C5282 * C6851 +
            C32282 * C6855 - C5283 * C6852) *
               C32285) *
              C31911 * C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C10043 +
            (C31993 * C136 - C113 * C123) * C10040 + (C2043 - C2044) * C10044 +
            (C2045 - C2046) * C10041 + C2065 * C10045 + C2066 * C32285) *
               C32314 +
           ((C144 - C145) * C10043 + (C146 - C147) * C10040 + C2383 * C10044 +
            C2384 * C10041 + C2051 * C10045 + C2052 * C32285) *
               C32301 +
           C10057 * C32271) *
              C31970 * C31956 * C110 +
          (((C145 - C144) * C10043 + (C147 - C146) * C10040 + C2385 * C10044 +
            C2386 * C10041 + C2387 * C10045 + C2388 * C32285) *
               C32314 +
           ((C149 - C148) * C10043 + (C151 - C150) * C10040 + C2389 * C10044 +
            C2390 * C10041 + C2391 * C10045 + C2392 * C32285) *
               C32301 +
           ((C153 - C152) * C10043 + (C155 - C154) * C10040 + C3927 * C10044 +
            C3928 * C10041 + (C1784 - C1785) * C10045 +
            (C1786 - C1787) * C32285) *
               C32271) *
              C31970 * C31956 * C111 +
          (C10057 * C32314 +
           (C166 * C10043 + C167 * C10040 + C3457 * C10044 + C3458 * C10041 +
            (C1785 - C1784) * C10045 + (C1787 - C1786) * C32285) *
               C32301 +
           (C168 * C10043 + C169 * C10040 + (C597 - C596) * C10044 +
            (C599 - C598) * C10041 + (C31993 * C377 - C113 * C358) * C10045 +
            (C31993 * C388 - C113 * C378) * C32285) *
               C32271) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C10043 +
            (C31993 * C136 - C113 * C123) * C10040 + (C2043 - C2044) * C10044 +
            (C2045 - C2046) * C10041 + C2065 * C10045 + C2066 * C32285) *
               C32314 +
           ((C144 - C145) * C10043 + (C146 - C147) * C10040 + C2383 * C10044 +
            C2384 * C10041 + C2051 * C10045 + C2052 * C32285) *
               C32301 +
           C10057 * C32271) *
              C31970 * C240 +
          (((C113 * C244 - C31993 * C254) * C10043 +
            (C113 * C255 - C31993 * C274) * C10040 + (C2551 - C2552) * C10044 +
            (C2553 - C2554) * C10041 + (C2555 - C2556) * C10045 +
            (C2557 - C2558) * C32285) *
               C32314 +
           ((C480 - C481) * C10043 + (C482 - C483) * C10040 +
            (C2217 - C2218) * C10044 + (C2219 - C2220) * C10041 +
            (C2221 - C2222) * C10045 + (C2223 - C2224) * C32285) *
               C32301 +
           ((C484 - C485) * C10043 + (C486 - C487) * C10040 +
            (C2225 - C2226) * C10044 + (C2227 - C2228) * C10041 +
            (C2229 - C2230) * C10045 + (C2231 - C2232) * C32285) *
               C32271) *
              C31970 * C241 +
          (((C31993 * C264 - C113 * C249) * C10043 +
            (C31993 * C279 - C113 * C265) * C10040 +
            (C31993 * C1122 - C113 * C1113) * C10044 +
            (C31993 * C1140 - C113 * C1123) * C10041 +
            (C31993 * C1129 - C113 * C1117) * C10045 +
            (C31993 * C1144 - C113 * C1131) * C32285) *
               C32314 +
           ((C31993 * C266 - C113 * C250) * C10043 +
            (C31993 * C280 - C113 * C267) * C10040 +
            (C31993 * C1124 - C113 * C1114) * C10044 +
            (C31993 * C1141 - C113 * C1125) * C10041 +
            (C31993 * C1133 - C113 * C1119) * C10045 +
            (C31993 * C1146 - C113 * C1135) * C32285) *
               C32301 +
           ((C31993 * C268 - C113 * C251) * C10043 +
            (C31993 * C281 - C113 * C269) * C10040 +
            (C31993 * C1126 - C113 * C1115) * C10044 +
            (C31993 * C1142 - C113 * C1127) * C10041 +
            (C31993 * C1137 - C113 * C1121) * C10045 +
            (C31993 * C1148 - C113 * C1139) * C32285) *
               C32271) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C10043 +
            (C31993 * C136 - C113 * C123) * C10040 + (C2043 - C2044) * C10044 +
            (C2045 - C2046) * C10041 + C2065 * C10045 + C2066 * C32285) *
               C32314 +
           ((C144 - C145) * C10043 + (C146 - C147) * C10040 + C2383 * C10044 +
            C2384 * C10041 + C2051 * C10045 + C2052 * C32285) *
               C32301 +
           C10057 * C32271) *
              C346 +
          (((C2044 - C2043) * C10043 + (C2046 - C2045) * C10040 +
            (C2048 - C2047) * C10044 + (C2050 - C2049) * C10041 +
            (C2053 - C2054) * C10045 + (C2055 - C2056) * C32285) *
               C32314 +
           (C2385 * C10043 + C2386 * C10040 + C2387 * C10044 + C2388 * C10041 +
            (C2057 - C2058) * C10045 + (C2059 - C2060) * C32285) *
               C32301 +
           (C2389 * C10043 + C2390 * C10040 + C2391 * C10044 + C2392 * C10041 +
            (C2061 - C2062) * C10045 + (C2063 - C2064) * C32285) *
               C32271) *
              C347 +
          ((C2065 * C10043 + C2066 * C10040 + (C2054 - C2053) * C10044 +
            (C2056 - C2055) * C10041 +
            (C31993 * C2030 - C113 * C2021) * C10045 +
            (C31993 * C2039 - C113 * C2031) * C32285) *
               C32314 +
           (C2051 * C10043 + C2052 * C10040 + (C2058 - C2057) * C10044 +
            (C2060 - C2059) * C10041 +
            (C31993 * C2032 - C113 * C2022) * C10045 +
            (C31993 * C2040 - C113 * C2033) * C32285) *
               C32301 +
           (C1791 * C10043 + C1792 * C10040 + (C2062 - C2061) * C10044 +
            (C2064 - C2063) * C10041 +
            (C31993 * C2034 - C113 * C2023) * C10045 +
            (C31993 * C2041 - C113 * C2035) * C32285) *
               C32271) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
            C32282 * C264 - C819 * C249) *
               C10043 +
           (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
            C32282 * C279 - C819 * C265) *
               C10040 +
           (C32317 * C359 - C817 * C349 + C32305 * C686 - C818 * C681 +
            C32282 * C1122 - C819 * C1113) *
               C10044 +
           (C32317 * C379 - C817 * C360 + C32305 * C696 - C818 * C687 +
            C32282 * C1140 - C819 * C1123) *
               C10041 +
           (C32317 * C369 - C817 * C354 + C32305 * C1128 - C818 * C1116 +
            C32282 * C1129 - C819 * C1117) *
               C10045 +
           (C32317 * C384 - C817 * C370 + C32305 * C1143 - C818 * C1130 +
            C32282 * C1144 - C819 * C1131) *
               C32285) *
              C31911 * C31970 * C31956 * C110 +
          ((C822 - C821 + C824 - C823 + C826 - C825) * C10043 +
           (C828 - C827 + C830 - C829 + C832 - C831) * C10040 +
           (C1474 - C1475 + C1476 - C1477 + C1478 - C1479) * C10044 +
           (C1480 - C1481 + C1482 - C1483 + C1484 - C1485) * C10041 +
           (C817 * C355 - C32317 * C371 + C818 * C1118 - C32305 * C1132 +
            C819 * C1119 - C32282 * C1133) *
               C10045 +
           (C817 * C372 - C32317 * C385 + C818 * C1134 - C32305 * C1145 +
            C819 * C1135 - C32282 * C1146) *
               C32285) *
              C31911 * C31970 * C31956 * C111 +
          (C865 * C10043 + C866 * C10040 +
           (C1487 - C1486 + C1489 - C1488 + C1491 - C1490) * C10044 +
           (C1493 - C1492 + C1495 - C1494 + C1497 - C1496) * C10041 +
           (C32317 * C373 - C817 * C356 + C32305 * C1136 - C818 * C1120 +
            C32282 * C1137 - C819 * C1121) *
               C10045 +
           (C32317 * C386 - C817 * C374 + C32305 * C1147 - C818 * C1138 +
            C32282 * C1148 - C819 * C1139) *
               C32285) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
            C32282 * C264 - C819 * C249) *
               C10043 +
           (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
            C32282 * C279 - C819 * C265) *
               C10040 +
           (C32317 * C359 - C817 * C349 + C32305 * C686 - C818 * C681 +
            C32282 * C1122 - C819 * C1113) *
               C10044 +
           (C32317 * C379 - C817 * C360 + C32305 * C696 - C818 * C687 +
            C32282 * C1140 - C819 * C1123) *
               C10041 +
           (C32317 * C369 - C817 * C354 + C32305 * C1128 - C818 * C1116 +
            C32282 * C1129 - C819 * C1117) *
               C10045 +
           (C32317 * C384 - C817 * C370 + C32305 * C1143 - C818 * C1130 +
            C32282 * C1144 - C819 * C1131) *
               C32285) *
              C31911 * C31970 * C240 +
          ((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
            C819 * C979 - C32282 * C985) *
               C10043 +
           (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
            C819 * C986 - C32282 * C997) *
               C10040 +
           (C817 * C681 - C32317 * C686 + C818 * C1113 - C32305 * C1122 +
            C819 * C1643 - C32282 * C1646) *
               C10044 +
           (C817 * C687 - C32317 * C696 + C818 * C1123 - C32305 * C1140 +
            C819 * C1647 - C32282 * C1652) *
               C10041 +
           (C817 * C1116 - C32317 * C1128 + C818 * C1117 - C32305 * C1129 +
            C819 * C6245 - C32282 * C6249) *
               C10045 +
           (C817 * C1130 - C32317 * C1143 + C818 * C1131 - C32305 * C1144 +
            C819 * C6251 - C32282 * C6254) *
               C32285) *
              C31911 * C31970 * C241 +
          ((C32317 * C264 - C817 * C249 + C32305 * C985 - C818 * C979 +
            C32282 * C991 - C819 * C982) *
               C10043 +
           (C32317 * C279 - C817 * C265 + C32305 * C997 - C818 * C986 +
            C32282 * C1000 - C819 * C992) *
               C10040 +
           (C32317 * C1122 - C817 * C1113 + C32305 * C1646 - C818 * C1643 +
            C32282 * C6247 - C819 * C6244) *
               C10044 +
           (C32317 * C1140 - C817 * C1123 + C32305 * C1652 - C818 * C1647 +
            C32282 * C6253 - C819 * C6248) *
               C10041 +
           (C32317 * C1129 - C817 * C1117 + C32305 * C6249 - C818 * C6245 +
            C32282 * C6250 - C819 * C6246) *
               C10045 +
           (C32317 * C1144 - C817 * C1131 + C32305 * C6254 - C818 * C6251 +
            C32282 * C6255 - C819 * C6252) *
               C32285) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
            C32282 * C264 - C819 * C249) *
               C10043 +
           (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
            C32282 * C279 - C819 * C265) *
               C10040 +
           (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C10044 +
           (C11052 - C11053 + C11054 - C11055 + C11056 - C11057) * C10041 +
           C11090 * C10045 + C11091 * C32285) *
              C31911 * C346 +
          ((C11047 - C11046 + C11049 - C11048 + C11051 - C11050) * C10043 +
           (C11053 - C11052 + C11055 - C11054 + C11057 - C11056) * C10040 +
           (C11059 - C11058 + C11061 - C11060 + C11063 - C11062) * C10044 +
           (C11065 - C11064 + C11067 - C11066 + C11069 - C11068) * C10041 +
           (C11070 - C11071 + C11072 - C11073 + C11074 - C11075) * C10045 +
           (C11076 - C11077 + C11078 - C11079 + C11080 - C11081) * C32285) *
              C31911 * C347 +
          (C11090 * C10043 + C11091 * C10040 +
           (C11071 - C11070 + C11073 - C11072 + C11075 - C11074) * C10044 +
           (C11077 - C11076 + C11079 - C11078 + C11081 - C11080) * C10041 +
           (C32317 * C2030 - C817 * C2021 + C32305 * C6849 - C818 * C6845 +
            C32282 * C6850 - C819 * C6846) *
               C10045 +
           (C32317 * C2039 - C817 * C2031 + C32305 * C6854 - C818 * C6851 +
            C32282 * C6855 - C819 * C6852) *
               C32285) *
              C31911 * C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C31993 * C122 - C113 * C115) * C11632 +
           (C31993 * C136 - C113 * C123) * C11627 + (C2043 - C2044) * C11633 +
           (C2045 - C2046) * C11628 + C2065 * C11634 + C2066 * C11629 +
           (C2054 - C2053) * C11635 + (C2056 - C2055) * C11630 +
           (C31993 * C2030 - C113 * C2021) * C11636 +
           (C31993 * C2039 - C113 * C2031) * C11631) *
              C31911 * C31970 * C31956 * C110 +
          ((C145 - C144) * C11632 + (C147 - C146) * C11627 + C2385 * C11633 +
           C2386 * C11628 + C2387 * C11634 + C2388 * C11629 +
           (C2057 - C2058) * C11635 + (C2059 - C2060) * C11630 +
           (C113 * C2022 - C31993 * C2032) * C11636 +
           (C113 * C2033 - C31993 * C2040) * C11631) *
              C31911 * C31970 * C31956 * C111 +
          (C164 * C11632 + C165 * C11627 + C1778 * C11633 + C1779 * C11628 +
           C1791 * C11634 + C1792 * C11629 + (C2062 - C2061) * C11635 +
           (C2064 - C2063) * C11630 + (C31993 * C2034 - C113 * C2023) * C11636 +
           (C31993 * C2041 - C113 * C2035) * C11631) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C31993 * C122 - C113 * C115) * C11632 +
           (C31993 * C136 - C113 * C123) * C11627 + (C2043 - C2044) * C11633 +
           (C2045 - C2046) * C11628 + C2065 * C11634 + C2066 * C11629 +
           (C2054 - C2053) * C11635 + (C2056 - C2055) * C11630 +
           (C31993 * C2030 - C113 * C2021) * C11636 +
           (C31993 * C2039 - C113 * C2031) * C11631) *
              C31911 * C31970 * C240 +
          ((C113 * C244 - C31993 * C254) * C11632 +
           (C113 * C255 - C31993 * C274) * C11627 + (C2551 - C2552) * C11633 +
           (C2553 - C2554) * C11628 + (C2555 - C2556) * C11634 +
           (C2557 - C2558) * C11629 + (C113 * C2538 - C31993 * C2541) * C11635 +
           (C113 * C2542 - C31993 * C2547) * C11630 +
           (C113 * C6845 - C31993 * C6849) * C11636 +
           (C113 * C6851 - C31993 * C6854) * C11631) *
              C31911 * C31970 * C241 +
          ((C31993 * C264 - C113 * C249) * C11632 +
           (C31993 * C279 - C113 * C265) * C11627 +
           (C31993 * C1122 - C113 * C1113) * C11633 +
           (C31993 * C1140 - C113 * C1123) * C11628 +
           (C31993 * C1129 - C113 * C1117) * C11634 +
           (C31993 * C1144 - C113 * C1131) * C11629 +
           (C31993 * C6847 - C113 * C6844) * C11635 +
           (C31993 * C6853 - C113 * C6848) * C11630 +
           (C31993 * C6850 - C113 * C6846) * C11636 +
           (C31993 * C6855 - C113 * C6852) * C11631) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C31993 * C122 - C113 * C115) * C11632 +
           (C31993 * C136 - C113 * C123) * C11627 + (C2043 - C2044) * C11633 +
           (C2045 - C2046) * C11628 + C2065 * C11634 + C2066 * C11629 +
           C11770 * C11635 + C11771 * C11630 + C11780 * C11636 +
           C11781 * C11631) *
              C31911 * C346 +
          ((C2044 - C2043) * C11632 + (C2046 - C2045) * C11627 +
           (C2048 - C2047) * C11633 + (C2050 - C2049) * C11628 +
           (C2053 - C2054) * C11634 + (C2055 - C2056) * C11629 +
           (C11773 - C11772) * C11635 + (C11775 - C11774) * C11630 +
           (C11776 - C11777) * C11636 + (C11778 - C11779) * C11631) *
              C31911 * C347 +
          (C2065 * C11632 + C2066 * C11627 + C11770 * C11633 + C11771 * C11628 +
           C11780 * C11634 + C11781 * C11629 + (C11777 - C11776) * C11635 +
           (C11779 - C11778) * C11630 +
           (C31993 * C11765 - C113 * C11762) * C11636 +
           (C31993 * C11768 - C113 * C11766) * C11631) *
              C31911 * C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C31993 * C122 - C113 * C115) * C114 +
                 (C31993 * C136 - C113 * C123) * C32010) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
                C176 * C105 + C177 * C106 + C178 * C107) *
                   C577 +
               (((C113 * C349 - C31993 * C359) * C114 +
                 (C113 * C360 - C31993 * C379) * C32010) *
                    C103 +
                ((C584 - C585) * C114 + (C586 - C587) * C32010) * C104 +
                ((C588 - C589) * C114 + (C590 - C591) * C32010) * C105 +
                ((C592 - C593) * C114 + (C594 - C595) * C32010) * C106 +
                ((C596 - C597) * C114 + (C598 - C599) * C32010) * C107) *
                   C578) *
                  C31956 * C473 +
              ((((C145 - C144) * C114 + (C147 - C146) * C32010) * C103 +
                ((C149 - C148) * C114 + (C151 - C150) * C32010) * C104 +
                ((C153 - C152) * C114 + (C155 - C154) * C32010) * C105 +
                ((C157 - C156) * C114 + (C159 - C158) * C32010) * C106 +
                ((C160 - C161) * C114 + (C162 - C163) * C32010) * C107) *
                   C577 +
               (((C585 - C584) * C114 + (C587 - C586) * C32010) * C103 +
                ((C589 - C588) * C114 + (C591 - C590) * C32010) * C104 +
                ((C593 - C592) * C114 + (C595 - C594) * C32010) * C105 +
                ((C597 - C596) * C114 + (C599 - C598) * C32010) * C106 +
                ((C31993 * C580 - C113 * C579) * C114 +
                 (C31993 * C582 - C113 * C581) * C32010) *
                    C107) *
                   C578) *
                  C31956 * C474) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
                  C32282 * C264 - C819 * C249) *
                     C114 +
                 (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
                  C32282 * C279 - C819 * C265) *
                     C32010) *
                    C814 +
                ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
                 (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
                    C815 +
                C869 * C32271) *
                   C577 +
               (((C817 * C349 - C32317 * C359 + C818 * C681 - C32305 * C686 +
                  C819 * C1113 - C32282 * C1122) *
                     C114 +
                 (C817 * C360 - C32317 * C379 + C818 * C687 - C32305 * C696 +
                  C819 * C1123 - C32282 * C1140) *
                     C32010) *
                    C814 +
                ((C1474 - C1475 + C1476 - C1477 + C1478 - C1479) * C114 +
                 (C1480 - C1481 + C1482 - C1483 + C1484 - C1485) * C32010) *
                    C815 +
                ((C1486 - C1487 + C1488 - C1489 + C1490 - C1491) * C114 +
                 (C1492 - C1493 + C1494 - C1495 + C1496 - C1497) * C32010) *
                    C32271) *
                   C578) *
                  C31956 * C473 +
              ((((C822 - C821 + C824 - C823 + C826 - C825) * C114 +
                 (C828 - C827 + C830 - C829 + C832 - C831) * C32010) *
                    C814 +
                ((C834 - C833 + C836 - C835 + C838 - C837) * C114 +
                 (C840 - C839 + C842 - C841 + C844 - C843) * C32010) *
                    C815 +
                ((C845 - C846 + C847 - C848 + C849 - C850) * C114 +
                 (C851 - C852 + C853 - C854 + C855 - C856) * C32010) *
                    C32271) *
                   C577 +
               (((C1475 - C1474 + C1477 - C1476 + C1479 - C1478) * C114 +
                 (C1481 - C1480 + C1483 - C1482 + C1485 - C1484) * C32010) *
                    C814 +
                ((C1487 - C1486 + C1489 - C1488 + C1491 - C1490) * C114 +
                 (C1493 - C1492 + C1495 - C1494 + C1497 - C1496) * C32010) *
                    C815 +
                ((C32317 * C365 - C817 * C352 + C32305 * C692 - C818 * C684 +
                  C32282 * C1470 - C819 * C1469) *
                     C114 +
                 (C32317 * C382 - C817 * C366 + C32305 * C699 - C818 * C693 +
                  C32282 * C1472 - C819 * C1471) *
                     C32010) *
                    C32271) *
                   C578) *
                  C31956 * C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C1768 +
             (C31993 * C136 - C113 * C123) * C32318 + (C2043 - C2044) * C1769 +
             (C2045 - C2046) * C32307 + C2065 * C1770 + C2066 * C32285) *
                C814 +
            ((C144 - C145) * C1768 + (C146 - C147) * C32318 + C2383 * C1769 +
             C2384 * C32307 + C2051 * C1770 + C2052 * C32285) *
                C815 +
            C1798 * C32271) *
               C577 +
           (((C2044 - C2043) * C1768 + (C2046 - C2045) * C32318 +
             (C2048 - C2047) * C1769 + (C2050 - C2049) * C32307 +
             (C2053 - C2054) * C1770 + (C2055 - C2056) * C32285) *
                C814 +
            (C2385 * C1768 + C2386 * C32318 + C2387 * C1769 + C2388 * C32307 +
             (C2057 - C2058) * C1770 + (C2059 - C2060) * C32285) *
                C815 +
            (C2389 * C1768 + C2390 * C32318 + C2391 * C1769 + C2392 * C32307 +
             (C2061 - C2062) * C1770 + (C2063 - C2064) * C32285) *
                C32271) *
               C578) *
              C31956 * C473 +
          ((((C145 - C144) * C1768 + (C147 - C146) * C32318 + C2385 * C1769 +
             C2386 * C32307 + C2387 * C1770 + C2388 * C32285) *
                C814 +
            ((C149 - C148) * C1768 + (C151 - C150) * C32318 + C2389 * C1769 +
             C2390 * C32307 + C2391 * C1770 + C2392 * C32285) *
                C815 +
            ((C153 - C152) * C1768 + (C155 - C154) * C32318 +
             (C592 - C593) * C1769 + (C594 - C595) * C32307 +
             (C1784 - C1785) * C1770 + (C1786 - C1787) * C32285) *
                C32271) *
               C577 +
           ((C2383 * C1768 + C2384 * C32318 + C2051 * C1769 + C2052 * C32307 +
             (C2058 - C2057) * C1770 + (C2060 - C2059) * C32285) *
                C814 +
            (C1778 * C1768 + C1779 * C32318 + C1791 * C1769 + C1792 * C32307 +
             (C2062 - C2061) * C1770 + (C2064 - C2063) * C32285) *
                C815 +
            ((C593 - C592) * C1768 + (C595 - C594) * C32318 +
             (C1785 - C1784) * C1769 + (C1787 - C1786) * C32307 +
             (C31993 * C2379 - C113 * C2378) * C1770 +
             (C31993 * C2381 - C113 * C2380) * C32285) *
                C32271) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
              C32282 * C264 - C5283 * C249) *
                 C114 +
             (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
              C32282 * C279 - C5283 * C265) *
                 C32010) *
                C32314 +
            ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
             (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
                C32301 +
            C5333 * C32271) *
               C577 +
           (((C5281 * C349 - C5275 * C359 + C5282 * C681 - C5276 * C686 +
              C5283 * C1113 - C32282 * C1122) *
                 C114 +
             (C5281 * C360 - C5275 * C379 + C5282 * C687 - C5276 * C696 +
              C5283 * C1123 - C32282 * C1140) *
                 C32010) *
                C32314 +
            ((C5870 - C5871 + C5872 - C5873 + C5874 - C5875) * C114 +
             (C5876 - C5877 + C5878 - C5879 + C5880 - C5881) * C32010) *
                C32301 +
            ((C5882 - C5883 + C5884 - C5885 + C5886 - C5887) * C114 +
             (C5888 - C5889 + C5890 - C5891 + C5892 - C5893) * C32010) *
                C32271) *
               C578) *
              C31956 * C473 +
          ((((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C114 +
             (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32010) *
                C32314 +
            ((C5298 - C5297 + C5300 - C5299 + C5302 - C5301) * C114 +
             (C5304 - C5303 + C5306 - C5305 + C5308 - C5307) * C32010) *
                C32301 +
            ((C5309 - C5310 + C5311 - C5312 + C5313 - C5314) * C114 +
             (C5315 - C5316 + C5317 - C5318 + C5319 - C5320) * C32010) *
                C32271) *
               C577 +
           (((C5871 - C5870 + C5873 - C5872 + C5875 - C5874) * C114 +
             (C5877 - C5876 + C5879 - C5878 + C5881 - C5880) * C32010) *
                C32314 +
            ((C5883 - C5882 + C5885 - C5884 + C5887 - C5886) * C114 +
             (C5889 - C5888 + C5891 - C5890 + C5893 - C5892) * C32010) *
                C32301 +
            ((C5275 * C365 - C5281 * C352 + C5276 * C692 - C5282 * C684 +
              C32282 * C1470 - C5283 * C1469) *
                 C114 +
             (C5275 * C382 - C5281 * C366 + C5276 * C699 - C5282 * C693 +
              C32282 * C1472 - C5283 * C1471) *
                 C32010) *
                C32271) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
             C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
             C6105 * C991 - C6111 * C982) *
                C114 +
            (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
             C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
             C6105 * C1000 - C6111 * C992) *
                C32010) *
               C31911 * C577 +
           ((C6107 * C349 - C6101 * C359 + C6108 * C681 - C6102 * C686 +
             C6109 * C1113 - C6103 * C1122 + C6110 * C1643 - C6104 * C1646 +
             C6111 * C6244 - C6105 * C6247) *
                C114 +
            (C6107 * C360 - C6101 * C379 + C6108 * C687 - C6102 * C696 +
             C6109 * C1123 - C6103 * C1140 + C6110 * C1647 - C6104 * C1652 +
             C6111 * C6248 - C6105 * C6253) *
                C32010) *
               C31911 * C578) *
              C31956 * C473 +
          (((C6107 * C116 - C6101 * C124 + C6108 * C245 - C6102 * C256 +
             C6109 * C250 - C6103 * C266 + C6110 * C980 - C6104 * C987 +
             C6111 * C983 - C6105 * C993) *
                C114 +
            (C6107 * C125 - C6101 * C137 + C6108 * C257 - C6102 * C275 +
             C6109 * C267 - C6103 * C280 + C6110 * C988 - C6104 * C998 +
             C6111 * C994 - C6105 * C1001) *
                C32010) *
               C31911 * C577 +
           ((C6101 * C361 - C6107 * C350 + C6102 * C688 - C6108 * C682 +
             C6103 * C1124 - C6109 * C1114 + C6104 * C1648 - C6110 * C1644 +
             C6105 * C6425 - C6111 * C6424) *
                C114 +
            (C6101 * C380 - C6107 * C362 + C6102 * C697 - C6108 * C689 +
             C6103 * C1141 - C6109 * C1125 + C6104 * C1653 - C6110 * C1649 +
             C6105 * C6427 - C6111 * C6426) *
                C32010) *
               C31911 * C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C1768 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32318 +
            (C6857 - C6858 + C6859 - C6860 + C6861 - C6862) * C1769 +
            (C6863 - C6864 + C6865 - C6866 + C6867 - C6868) * C32307 +
            C6901 * C1770 + C6902 * C32285) *
               C31911 * C577 +
           ((C6858 - C6857 + C6860 - C6859 + C6862 - C6861) * C1768 +
            (C6864 - C6863 + C6866 - C6865 + C6868 - C6867) * C32318 +
            (C6870 - C6869 + C6872 - C6871 + C6874 - C6873) * C1769 +
            (C6876 - C6875 + C6878 - C6877 + C6880 - C6879) * C32307 +
            (C6881 - C6882 + C6883 - C6884 + C6885 - C6886) * C1770 +
            (C6887 - C6888 + C6889 - C6890 + C6891 - C6892) * C32285) *
               C31911 * C578) *
              C31956 * C473 +
          (((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C1768 +
            (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32318 +
            (C5870 - C5871 + C5872 - C5873 + C5874 - C5875) * C1769 +
            (C5876 - C5877 + C5878 - C5879 + C5880 - C5881) * C32307 +
            (C7203 - C7204 + C7205 - C7206 + C7207 - C7208) * C1770 +
            (C7209 - C7210 + C7211 - C7212 + C7213 - C7214) * C32285) *
               C31911 * C577 +
           ((C5871 - C5870 + C5873 - C5872 + C5875 - C5874) * C1768 +
            (C5877 - C5876 + C5879 - C5878 + C5881 - C5880) * C32318 +
            (C7204 - C7203 + C7206 - C7205 + C7208 - C7207) * C1769 +
            (C7210 - C7209 + C7212 - C7211 + C7214 - C7213) * C32307 +
            (C5275 * C2026 - C5281 * C2019 + C5276 * C2543 - C5282 * C2539 +
             C32282 * C7199 - C5283 * C7198) *
                C1770 +
            (C5275 * C2037 - C5281 * C2027 + C5276 * C2548 - C5282 * C2544 +
             C32282 * C7201 - C5283 * C7200) *
                C32285) *
               C31911 * C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C10043 +
             (C31993 * C136 - C113 * C123) * C10040 + (C2043 - C2044) * C10044 +
             (C2045 - C2046) * C10041 + C2065 * C10045 + C2066 * C32285) *
                C32314 +
            ((C144 - C145) * C10043 + (C146 - C147) * C10040 + C2383 * C10044 +
             C2384 * C10041 + C2051 * C10045 + C2052 * C32285) *
                C32301 +
            C10057 * C32271) *
               C577 +
           (((C2044 - C2043) * C10043 + (C2046 - C2045) * C10040 +
             (C2048 - C2047) * C10044 + (C2050 - C2049) * C10041 +
             (C2053 - C2054) * C10045 + (C2055 - C2056) * C32285) *
                C32314 +
            (C2385 * C10043 + C2386 * C10040 + C2387 * C10044 + C2388 * C10041 +
             (C2057 - C2058) * C10045 + (C2059 - C2060) * C32285) *
                C32301 +
            (C2389 * C10043 + C2390 * C10040 + C2391 * C10044 + C2392 * C10041 +
             (C2061 - C2062) * C10045 + (C2063 - C2064) * C32285) *
                C32271) *
               C578) *
              C31956 * C473 +
          ((((C145 - C144) * C10043 + (C147 - C146) * C10040 + C2385 * C10044 +
             C2386 * C10041 + C2387 * C10045 + C2388 * C32285) *
                C32314 +
            ((C149 - C148) * C10043 + (C151 - C150) * C10040 + C2389 * C10044 +
             C2390 * C10041 + C2391 * C10045 + C2392 * C32285) *
                C32301 +
            ((C153 - C152) * C10043 + (C155 - C154) * C10040 + C3927 * C10044 +
             C3928 * C10041 + (C1784 - C1785) * C10045 +
             (C1786 - C1787) * C32285) *
                C32271) *
               C577 +
           ((C2383 * C10043 + C2384 * C10040 + C2051 * C10044 + C2052 * C10041 +
             (C2058 - C2057) * C10045 + (C2060 - C2059) * C32285) *
                C32314 +
            (C1778 * C10043 + C1779 * C10040 + C1791 * C10044 + C1792 * C10041 +
             (C2062 - C2061) * C10045 + (C2064 - C2063) * C32285) *
                C32301 +
            (C3457 * C10043 + C3458 * C10040 + (C1785 - C1784) * C10044 +
             (C1787 - C1786) * C10041 +
             (C31993 * C2379 - C113 * C2378) * C10045 +
             (C31993 * C2381 - C113 * C2380) * C32285) *
                C32271) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C10043 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C10040 +
            (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C10044 +
            (C11052 - C11053 + C11054 - C11055 + C11056 - C11057) * C10041 +
            C11090 * C10045 + C11091 * C32285) *
               C31911 * C577 +
           ((C11047 - C11046 + C11049 - C11048 + C11051 - C11050) * C10043 +
            (C11053 - C11052 + C11055 - C11054 + C11057 - C11056) * C10040 +
            (C11059 - C11058 + C11061 - C11060 + C11063 - C11062) * C10044 +
            (C11065 - C11064 + C11067 - C11066 + C11069 - C11068) * C10041 +
            (C11070 - C11071 + C11072 - C11073 + C11074 - C11075) * C10045 +
            (C11076 - C11077 + C11078 - C11079 + C11080 - C11081) * C32285) *
               C31911 * C578) *
              C31956 * C473 +
          (((C822 - C821 + C824 - C823 + C826 - C825) * C10043 +
            (C828 - C827 + C830 - C829 + C832 - C831) * C10040 +
            (C1474 - C1475 + C1476 - C1477 + C1478 - C1479) * C10044 +
            (C1480 - C1481 + C1482 - C1483 + C1484 - C1485) * C10041 +
            (C11384 - C11385 + C11386 - C11387 + C11388 - C11389) * C10045 +
            (C11390 - C11391 + C11392 - C11393 + C11394 - C11395) * C32285) *
               C31911 * C577 +
           ((C1475 - C1474 + C1477 - C1476 + C1479 - C1478) * C10043 +
            (C1481 - C1480 + C1483 - C1482 + C1485 - C1484) * C10040 +
            (C11385 - C11384 + C11387 - C11386 + C11389 - C11388) * C10044 +
            (C11391 - C11390 + C11393 - C11392 + C11395 - C11394) * C10041 +
            (C32317 * C2026 - C817 * C2019 + C32305 * C2543 - C818 * C2539 +
             C32282 * C7199 - C819 * C7198) *
                C10045 +
            (C32317 * C2037 - C817 * C2027 + C32305 * C2548 - C818 * C2544 +
             C32282 * C7201 - C819 * C7200) *
                C32285) *
               C31911 * C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C11632 +
            (C31993 * C136 - C113 * C123) * C11627 + (C2043 - C2044) * C11633 +
            (C2045 - C2046) * C11628 + C2065 * C11634 + C2066 * C11629 +
            C11770 * C11635 + C11771 * C11630 + C11780 * C11636 +
            C11781 * C11631) *
               C31911 * C577 +
           ((C2044 - C2043) * C11632 + (C2046 - C2045) * C11627 +
            (C2048 - C2047) * C11633 + (C2050 - C2049) * C11628 +
            (C2053 - C2054) * C11634 + (C2055 - C2056) * C11629 +
            (C11773 - C11772) * C11635 + (C11775 - C11774) * C11630 +
            (C11776 - C11777) * C11636 + (C11778 - C11779) * C11631) *
               C31911 * C578) *
              C31956 * C473 +
          (((C145 - C144) * C11632 + (C147 - C146) * C11627 + C2385 * C11633 +
            C2386 * C11628 + C2387 * C11634 + C2388 * C11629 +
            (C2057 - C2058) * C11635 + (C2059 - C2060) * C11630 +
            (C11954 - C11955) * C11636 + (C11956 - C11957) * C11631) *
               C31911 * C577 +
           (C2383 * C11632 + C2384 * C11627 + C2051 * C11633 + C2052 * C11628 +
            (C2058 - C2057) * C11634 + (C2060 - C2059) * C11629 +
            (C11955 - C11954) * C11635 + (C11957 - C11956) * C11630 +
            (C31993 * C11950 - C113 * C11949) * C11636 +
            (C31993 * C11952 - C113 * C11951) * C11631) *
               C31911 * C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C114 +
            (C31993 * C136 - C113 * C123) * C32010) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C31970 * C31956 * C110 +
          (((C145 - C144) * C114 + (C147 - C146) * C32010) * C103 +
           ((C149 - C148) * C114 + (C151 - C150) * C32010) * C104 +
           ((C153 - C152) * C114 + (C155 - C154) * C32010) * C105 +
           ((C157 - C156) * C114 + (C159 - C158) * C32010) * C106 +
           ((C160 - C161) * C114 + (C162 - C163) * C32010) * C107) *
              C31970 * C31956 * C111 +
          (C176 * C103 + C177 * C104 + C178 * C105 +
           ((C161 - C160) * C114 + (C163 - C162) * C32010) * C106 +
           ((C31993 * C134 - C113 * C121) * C114 +
            (C31993 * C142 - C113 * C135) * C32010) *
               C107) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C114 +
            (C31993 * C136 - C113 * C123) * C32010) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C31970 * C240 +
          (((C113 * C244 - C31993 * C254) * C114 +
            (C113 * C255 - C31993 * C274) * C32010) *
               C103 +
           ((C113 * C245 - C31993 * C256) * C114 +
            (C113 * C257 - C31993 * C275) * C32010) *
               C104 +
           ((C113 * C246 - C31993 * C258) * C114 +
            (C113 * C259 - C31993 * C276) * C32010) *
               C105 +
           ((C113 * C247 - C31993 * C260) * C114 +
            (C113 * C261 - C31993 * C277) * C32010) *
               C106 +
           ((C113 * C248 - C31993 * C262) * C114 +
            (C113 * C263 - C31993 * C278) * C32010) *
               C107) *
              C31970 * C241 +
          (((C31993 * C264 - C113 * C249) * C114 +
            (C31993 * C279 - C113 * C265) * C32010) *
               C103 +
           ((C31993 * C266 - C113 * C250) * C114 +
            (C31993 * C280 - C113 * C267) * C32010) *
               C104 +
           ((C31993 * C268 - C113 * C251) * C114 +
            (C31993 * C281 - C113 * C269) * C32010) *
               C105 +
           ((C31993 * C270 - C113 * C252) * C114 +
            (C31993 * C282 - C113 * C271) * C32010) *
               C106 +
           ((C31993 * C272 - C113 * C253) * C114 +
            (C31993 * C283 - C113 * C273) * C32010) *
               C107) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C114 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C32010) *
               C814 +
           ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
            (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
               C815 +
           C869 * C32271) *
              C31970 * C31956 * C110 +
          (((C822 - C821 + C824 - C823 + C826 - C825) * C114 +
            (C828 - C827 + C830 - C829 + C832 - C831) * C32010) *
               C814 +
           ((C834 - C833 + C836 - C835 + C838 - C837) * C114 +
            (C840 - C839 + C842 - C841 + C844 - C843) * C32010) *
               C815 +
           ((C845 - C846 + C847 - C848 + C849 - C850) * C114 +
            (C851 - C852 + C853 - C854 + C855 - C856) * C32010) *
               C32271) *
              C31970 * C31956 * C111 +
          (C869 * C814 +
           ((C846 - C845 + C848 - C847 + C850 - C849) * C114 +
            (C852 - C851 + C854 - C853 + C856 - C855) * C32010) *
               C815 +
           ((C32317 * C130 - C817 * C119 + C32305 * C262 - C818 * C248 +
             C32282 * C272 - C819 * C253) *
                C114 +
            (C32317 * C140 - C817 * C131 + C32305 * C278 - C818 * C263 +
             C32282 * C283 - C819 * C273) *
                C32010) *
               C32271) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C114 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C32010) *
               C814 +
           ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
            (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
               C815 +
           C869 * C32271) *
              C31970 * C240 +
          (((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
             C819 * C979 - C32282 * C985) *
                C114 +
            (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
             C819 * C986 - C32282 * C997) *
                C32010) *
               C814 +
           ((C817 * C245 - C32317 * C256 + C818 * C250 - C32305 * C266 +
             C819 * C980 - C32282 * C987) *
                C114 +
            (C817 * C257 - C32317 * C275 + C818 * C267 - C32305 * C280 +
             C819 * C988 - C32282 * C998) *
                C32010) *
               C815 +
           ((C817 * C246 - C32317 * C258 + C818 * C251 - C32305 * C268 +
             C819 * C981 - C32282 * C989) *
                C114 +
            (C817 * C259 - C32317 * C276 + C818 * C269 - C32305 * C281 +
             C819 * C990 - C32282 * C999) *
                C32010) *
               C32271) *
              C31970 * C241 +
          (((C32317 * C264 - C817 * C249 + C32305 * C985 - C818 * C979 +
             C32282 * C991 - C819 * C982) *
                C114 +
            (C32317 * C279 - C817 * C265 + C32305 * C997 - C818 * C986 +
             C32282 * C1000 - C819 * C992) *
                C32010) *
               C814 +
           ((C32317 * C266 - C817 * C250 + C32305 * C987 - C818 * C980 +
             C32282 * C993 - C819 * C983) *
                C114 +
            (C32317 * C280 - C817 * C267 + C32305 * C998 - C818 * C988 +
             C32282 * C1001 - C819 * C994) *
                C32010) *
               C815 +
           ((C32317 * C268 - C817 * C251 + C32305 * C989 - C818 * C981 +
             C32282 * C995 - C819 * C984) *
                C114 +
            (C32317 * C281 - C817 * C269 + C32305 * C999 - C818 * C990 +
             C32282 * C1002 - C819 * C996) *
                C32010) *
               C32271) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C1768 +
            (C31993 * C136 - C113 * C123) * C32318 +
            (C31993 * C359 - C113 * C349) * C1769 +
            (C31993 * C379 - C113 * C360) * C32307 +
            (C31993 * C369 - C113 * C354) * C1770 +
            (C31993 * C384 - C113 * C370) * C32285) *
               C814 +
           ((C144 - C145) * C1768 + (C146 - C147) * C32318 +
            (C585 - C584) * C1769 + (C587 - C586) * C32307 +
            (C1772 - C1773) * C1770 + (C1774 - C1775) * C32285) *
               C815 +
           C1798 * C32271) *
              C31970 * C31956 * C110 +
          (((C145 - C144) * C1768 + (C147 - C146) * C32318 +
            (C584 - C585) * C1769 + (C586 - C587) * C32307 +
            (C1773 - C1772) * C1770 + (C1775 - C1774) * C32285) *
               C814 +
           ((C149 - C148) * C1768 + (C151 - C150) * C32318 +
            (C588 - C589) * C1769 + (C590 - C591) * C32307 +
            (C1781 - C1780) * C1770 + (C1783 - C1782) * C32285) *
               C815 +
           ((C153 - C152) * C1768 + (C155 - C154) * C32318 +
            (C592 - C593) * C1769 + (C594 - C595) * C32307 +
            (C1784 - C1785) * C1770 + (C1786 - C1787) * C32285) *
               C32271) *
              C31970 * C31956 * C111 +
          (C1798 * C814 +
           (C166 * C1768 + C167 * C32318 + (C593 - C592) * C1769 +
            (C595 - C594) * C32307 + (C1785 - C1784) * C1770 +
            (C1787 - C1786) * C32285) *
               C815 +
           (C168 * C1768 + C169 * C32318 + (C597 - C596) * C1769 +
            (C599 - C598) * C32307 + (C31993 * C377 - C113 * C358) * C1770 +
            (C31993 * C388 - C113 * C378) * C32285) *
               C32271) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C1768 +
            (C31993 * C136 - C113 * C123) * C32318 +
            (C31993 * C359 - C113 * C349) * C1769 +
            (C31993 * C379 - C113 * C360) * C32307 +
            (C31993 * C369 - C113 * C354) * C1770 +
            (C31993 * C384 - C113 * C370) * C32285) *
               C814 +
           ((C144 - C145) * C1768 + (C146 - C147) * C32318 +
            (C585 - C584) * C1769 + (C587 - C586) * C32307 +
            (C1772 - C1773) * C1770 + (C1774 - C1775) * C32285) *
               C815 +
           C1798 * C32271) *
              C31970 * C240 +
          (((C113 * C244 - C31993 * C254) * C1768 +
            (C113 * C255 - C31993 * C274) * C32318 +
            (C113 * C681 - C31993 * C686) * C1769 +
            (C113 * C687 - C31993 * C696) * C32307 +
            (C113 * C1116 - C31993 * C1128) * C1770 +
            (C113 * C1130 - C31993 * C1143) * C32285) *
               C814 +
           ((C480 - C481) * C1768 + (C482 - C483) * C32318 +
            (C113 * C682 - C31993 * C688) * C1769 +
            (C113 * C689 - C31993 * C697) * C32307 +
            (C113 * C1118 - C31993 * C1132) * C1770 +
            (C113 * C1134 - C31993 * C1145) * C32285) *
               C815 +
           ((C484 - C485) * C1768 + (C486 - C487) * C32318 +
            (C113 * C683 - C31993 * C690) * C1769 +
            (C113 * C691 - C31993 * C698) * C32307 +
            (C113 * C1120 - C31993 * C1136) * C1770 +
            (C113 * C1138 - C31993 * C1147) * C32285) *
               C32271) *
              C31970 * C241 +
          (((C31993 * C264 - C113 * C249) * C1768 +
            (C31993 * C279 - C113 * C265) * C32318 +
            (C31993 * C1122 - C113 * C1113) * C1769 +
            (C31993 * C1140 - C113 * C1123) * C32307 +
            (C31993 * C1129 - C113 * C1117) * C1770 +
            (C31993 * C1144 - C113 * C1131) * C32285) *
               C814 +
           ((C31993 * C266 - C113 * C250) * C1768 +
            (C31993 * C280 - C113 * C267) * C32318 +
            (C31993 * C1124 - C113 * C1114) * C1769 +
            (C31993 * C1141 - C113 * C1125) * C32307 +
            (C31993 * C1133 - C113 * C1119) * C1770 +
            (C31993 * C1146 - C113 * C1135) * C32285) *
               C815 +
           ((C31993 * C268 - C113 * C251) * C1768 +
            (C31993 * C281 - C113 * C269) * C32318 +
            (C31993 * C1126 - C113 * C1115) * C1769 +
            (C31993 * C1142 - C113 * C1127) * C32307 +
            (C31993 * C1137 - C113 * C1121) * C1770 +
            (C31993 * C1148 - C113 * C1139) * C32285) *
               C32271) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C114 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32010) *
               C32314 +
           ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
            (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
               C32301 +
           C5333 * C32271) *
              C31970 * C31956 * C110 +
          (((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C114 +
            (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32010) *
               C32314 +
           ((C5298 - C5297 + C5300 - C5299 + C5302 - C5301) * C114 +
            (C5304 - C5303 + C5306 - C5305 + C5308 - C5307) * C32010) *
               C32301 +
           ((C5309 - C5310 + C5311 - C5312 + C5313 - C5314) * C114 +
            (C5315 - C5316 + C5317 - C5318 + C5319 - C5320) * C32010) *
               C32271) *
              C31970 * C31956 * C111 +
          (C5333 * C32314 +
           ((C5310 - C5309 + C5312 - C5311 + C5314 - C5313) * C114 +
            (C5316 - C5315 + C5318 - C5317 + C5320 - C5319) * C32010) *
               C32301 +
           ((C5275 * C130 - C5281 * C119 + C5276 * C262 - C5282 * C248 +
             C32282 * C272 - C5283 * C253) *
                C114 +
            (C5275 * C140 - C5281 * C131 + C5276 * C278 - C5282 * C263 +
             C32282 * C283 - C5283 * C273) *
                C32010) *
               C32271) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C114 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32010) *
               C32314 +
           ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
            (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
               C32301 +
           C5333 * C32271) *
              C31970 * C240 +
          (((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
             C5283 * C979 - C32282 * C985) *
                C114 +
            (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
             C5283 * C986 - C32282 * C997) *
                C32010) *
               C32314 +
           ((C5281 * C245 - C5275 * C256 + C5282 * C250 - C5276 * C266 +
             C5283 * C980 - C32282 * C987) *
                C114 +
            (C5281 * C257 - C5275 * C275 + C5282 * C267 - C5276 * C280 +
             C5283 * C988 - C32282 * C998) *
                C32010) *
               C32301 +
           ((C5281 * C246 - C5275 * C258 + C5282 * C251 - C5276 * C268 +
             C5283 * C981 - C32282 * C989) *
                C114 +
            (C5281 * C259 - C5275 * C276 + C5282 * C269 - C5276 * C281 +
             C5283 * C990 - C32282 * C999) *
                C32010) *
               C32271) *
              C31970 * C241 +
          (((C5275 * C264 - C5281 * C249 + C5276 * C985 - C5282 * C979 +
             C32282 * C991 - C5283 * C982) *
                C114 +
            (C5275 * C279 - C5281 * C265 + C5276 * C997 - C5282 * C986 +
             C32282 * C1000 - C5283 * C992) *
                C32010) *
               C32314 +
           ((C5275 * C266 - C5281 * C250 + C5276 * C987 - C5282 * C980 +
             C32282 * C993 - C5283 * C983) *
                C114 +
            (C5275 * C280 - C5281 * C267 + C5276 * C998 - C5282 * C988 +
             C32282 * C1001 - C5283 * C994) *
                C32010) *
               C32301 +
           ((C5275 * C268 - C5281 * C251 + C5276 * C989 - C5282 * C981 +
             C32282 * C995 - C5283 * C984) *
                C114 +
            (C5275 * C281 - C5281 * C269 + C5276 * C999 - C5282 * C990 +
             C32282 * C1002 - C5283 * C996) *
                C32010) *
               C32271) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
            C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
            C6105 * C991 - C6111 * C982) *
               C114 +
           (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
            C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
            C6105 * C1000 - C6111 * C992) *
               C32010) *
              C31911 * C31970 * C31956 * C110 +
          ((C6107 * C116 - C6101 * C124 + C6108 * C245 - C6102 * C256 +
            C6109 * C250 - C6103 * C266 + C6110 * C980 - C6104 * C987 +
            C6111 * C983 - C6105 * C993) *
               C114 +
           (C6107 * C125 - C6101 * C137 + C6108 * C257 - C6102 * C275 +
            C6109 * C267 - C6103 * C280 + C6110 * C988 - C6104 * C998 +
            C6111 * C994 - C6105 * C1001) *
               C32010) *
              C31911 * C31970 * C31956 * C111 +
          ((C6101 * C126 - C6107 * C117 + C6102 * C258 - C6108 * C246 +
            C6103 * C268 - C6109 * C251 + C6104 * C989 - C6110 * C981 +
            C6105 * C995 - C6111 * C984) *
               C114 +
           (C6101 * C138 - C6107 * C127 + C6102 * C276 - C6108 * C259 +
            C6103 * C281 - C6109 * C269 + C6104 * C999 - C6110 * C990 +
            C6105 * C1002 - C6111 * C996) *
               C32010) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
            C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
            C6105 * C991 - C6111 * C982) *
               C114 +
           (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
            C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
            C6105 * C1000 - C6111 * C992) *
               C32010) *
              C31911 * C31970 * C240 +
          ((C6107 * C244 - C6101 * C254 + C6108 * C249 - C6102 * C264 +
            C6109 * C979 - C6103 * C985 + C6110 * C982 - C6104 * C991 +
            C6111 * C6174 - C6105 * C6176) *
               C114 +
           (C6107 * C255 - C6101 * C274 + C6108 * C265 - C6102 * C279 +
            C6109 * C986 - C6103 * C997 + C6110 * C992 - C6104 * C1000 +
            C6111 * C6177 - C6105 * C6180) *
               C32010) *
              C31911 * C31970 * C241 +
          ((C6101 * C264 - C6107 * C249 + C6102 * C985 - C6108 * C979 +
            C6103 * C991 - C6109 * C982 + C6104 * C6176 - C6110 * C6174 +
            C6105 * C6178 - C6111 * C6175) *
               C114 +
           (C6101 * C279 - C6107 * C265 + C6102 * C997 - C6108 * C986 +
            C6103 * C1000 - C6109 * C992 + C6104 * C6180 - C6110 * C6177 +
            C6105 * C6181 - C6111 * C6179) *
               C32010) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
            C32282 * C264 - C5283 * C249) *
               C1768 +
           (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
            C32282 * C279 - C5283 * C265) *
               C32318 +
           (C5275 * C359 - C5281 * C349 + C5276 * C686 - C5282 * C681 +
            C32282 * C1122 - C5283 * C1113) *
               C1769 +
           (C5275 * C379 - C5281 * C360 + C5276 * C696 - C5282 * C687 +
            C32282 * C1140 - C5283 * C1123) *
               C32307 +
           (C5275 * C369 - C5281 * C354 + C5276 * C1128 - C5282 * C1116 +
            C32282 * C1129 - C5283 * C1117) *
               C1770 +
           (C5275 * C384 - C5281 * C370 + C5276 * C1143 - C5282 * C1130 +
            C32282 * C1144 - C5283 * C1131) *
               C32285) *
              C31911 * C31970 * C31956 * C110 +
          ((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C1768 +
           (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32318 +
           (C5870 - C5871 + C5872 - C5873 + C5874 - C5875) * C1769 +
           (C5876 - C5877 + C5878 - C5879 + C5880 - C5881) * C32307 +
           (C5281 * C355 - C5275 * C371 + C5282 * C1118 - C5276 * C1132 +
            C5283 * C1119 - C32282 * C1133) *
               C1770 +
           (C5281 * C372 - C5275 * C385 + C5282 * C1134 - C5276 * C1145 +
            C5283 * C1135 - C32282 * C1146) *
               C32285) *
              C31911 * C31970 * C31956 * C111 +
          (C5329 * C1768 + C5330 * C32318 +
           (C5883 - C5882 + C5885 - C5884 + C5887 - C5886) * C1769 +
           (C5889 - C5888 + C5891 - C5890 + C5893 - C5892) * C32307 +
           (C5275 * C373 - C5281 * C356 + C5276 * C1136 - C5282 * C1120 +
            C32282 * C1137 - C5283 * C1121) *
               C1770 +
           (C5275 * C386 - C5281 * C374 + C5276 * C1147 - C5282 * C1138 +
            C32282 * C1148 - C5283 * C1139) *
               C32285) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
            C32282 * C264 - C5283 * C249) *
               C1768 +
           (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
            C32282 * C279 - C5283 * C265) *
               C32318 +
           (C5275 * C359 - C5281 * C349 + C5276 * C686 - C5282 * C681 +
            C32282 * C1122 - C5283 * C1113) *
               C1769 +
           (C5275 * C379 - C5281 * C360 + C5276 * C696 - C5282 * C687 +
            C32282 * C1140 - C5283 * C1123) *
               C32307 +
           (C5275 * C369 - C5281 * C354 + C5276 * C1128 - C5282 * C1116 +
            C32282 * C1129 - C5283 * C1117) *
               C1770 +
           (C5275 * C384 - C5281 * C370 + C5276 * C1143 - C5282 * C1130 +
            C32282 * C1144 - C5283 * C1131) *
               C32285) *
              C31911 * C31970 * C240 +
          ((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
            C5283 * C979 - C32282 * C985) *
               C1768 +
           (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
            C5283 * C986 - C32282 * C997) *
               C32318 +
           (C5281 * C681 - C5275 * C686 + C5282 * C1113 - C5276 * C1122 +
            C5283 * C1643 - C32282 * C1646) *
               C1769 +
           (C5281 * C687 - C5275 * C696 + C5282 * C1123 - C5276 * C1140 +
            C5283 * C1647 - C32282 * C1652) *
               C32307 +
           (C5281 * C1116 - C5275 * C1128 + C5282 * C1117 - C5276 * C1129 +
            C5283 * C6245 - C32282 * C6249) *
               C1770 +
           (C5281 * C1130 - C5275 * C1143 + C5282 * C1131 - C5276 * C1144 +
            C5283 * C6251 - C32282 * C6254) *
               C32285) *
              C31911 * C31970 * C241 +
          ((C5275 * C264 - C5281 * C249 + C5276 * C985 - C5282 * C979 +
            C32282 * C991 - C5283 * C982) *
               C1768 +
           (C5275 * C279 - C5281 * C265 + C5276 * C997 - C5282 * C986 +
            C32282 * C1000 - C5283 * C992) *
               C32318 +
           (C5275 * C1122 - C5281 * C1113 + C5276 * C1646 - C5282 * C1643 +
            C32282 * C6247 - C5283 * C6244) *
               C1769 +
           (C5275 * C1140 - C5281 * C1123 + C5276 * C1652 - C5282 * C1647 +
            C32282 * C6253 - C5283 * C6248) *
               C32307 +
           (C5275 * C1129 - C5281 * C1117 + C5276 * C6249 - C5282 * C6245 +
            C32282 * C6250 - C5283 * C6246) *
               C1770 +
           (C5275 * C1144 - C5281 * C1131 + C5276 * C6254 - C5282 * C6251 +
            C32282 * C6255 - C5283 * C6252) *
               C32285) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C10043 +
            (C31993 * C136 - C113 * C123) * C10040 + (C2043 - C2044) * C10044 +
            (C2045 - C2046) * C10041 + C2065 * C10045 + C2066 * C32285) *
               C32314 +
           ((C144 - C145) * C10043 + (C146 - C147) * C10040 + C2383 * C10044 +
            C2384 * C10041 + C2051 * C10045 + C2052 * C32285) *
               C32301 +
           C10057 * C32271) *
              C31970 * C31956 * C110 +
          (((C145 - C144) * C10043 + (C147 - C146) * C10040 + C2385 * C10044 +
            C2386 * C10041 + C2387 * C10045 + C2388 * C32285) *
               C32314 +
           ((C149 - C148) * C10043 + (C151 - C150) * C10040 + C2389 * C10044 +
            C2390 * C10041 + C2391 * C10045 + C2392 * C32285) *
               C32301 +
           ((C153 - C152) * C10043 + (C155 - C154) * C10040 + C3927 * C10044 +
            C3928 * C10041 + (C1784 - C1785) * C10045 +
            (C1786 - C1787) * C32285) *
               C32271) *
              C31970 * C31956 * C111 +
          (C10057 * C32314 +
           (C166 * C10043 + C167 * C10040 + C3457 * C10044 + C3458 * C10041 +
            (C1785 - C1784) * C10045 + (C1787 - C1786) * C32285) *
               C32301 +
           (C168 * C10043 + C169 * C10040 + (C597 - C596) * C10044 +
            (C599 - C598) * C10041 + (C31993 * C377 - C113 * C358) * C10045 +
            (C31993 * C388 - C113 * C378) * C32285) *
               C32271) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C10043 +
            (C31993 * C136 - C113 * C123) * C10040 + (C2043 - C2044) * C10044 +
            (C2045 - C2046) * C10041 + C2065 * C10045 + C2066 * C32285) *
               C32314 +
           ((C144 - C145) * C10043 + (C146 - C147) * C10040 + C2383 * C10044 +
            C2384 * C10041 + C2051 * C10045 + C2052 * C32285) *
               C32301 +
           C10057 * C32271) *
              C31970 * C240 +
          (((C113 * C244 - C31993 * C254) * C10043 +
            (C113 * C255 - C31993 * C274) * C10040 + (C2551 - C2552) * C10044 +
            (C2553 - C2554) * C10041 + (C2555 - C2556) * C10045 +
            (C2557 - C2558) * C32285) *
               C32314 +
           ((C480 - C481) * C10043 + (C482 - C483) * C10040 +
            (C2217 - C2218) * C10044 + (C2219 - C2220) * C10041 +
            (C2221 - C2222) * C10045 + (C2223 - C2224) * C32285) *
               C32301 +
           ((C484 - C485) * C10043 + (C486 - C487) * C10040 +
            (C2225 - C2226) * C10044 + (C2227 - C2228) * C10041 +
            (C2229 - C2230) * C10045 + (C2231 - C2232) * C32285) *
               C32271) *
              C31970 * C241 +
          (((C31993 * C264 - C113 * C249) * C10043 +
            (C31993 * C279 - C113 * C265) * C10040 +
            (C31993 * C1122 - C113 * C1113) * C10044 +
            (C31993 * C1140 - C113 * C1123) * C10041 +
            (C31993 * C1129 - C113 * C1117) * C10045 +
            (C31993 * C1144 - C113 * C1131) * C32285) *
               C32314 +
           ((C31993 * C266 - C113 * C250) * C10043 +
            (C31993 * C280 - C113 * C267) * C10040 +
            (C31993 * C1124 - C113 * C1114) * C10044 +
            (C31993 * C1141 - C113 * C1125) * C10041 +
            (C31993 * C1133 - C113 * C1119) * C10045 +
            (C31993 * C1146 - C113 * C1135) * C32285) *
               C32301 +
           ((C31993 * C268 - C113 * C251) * C10043 +
            (C31993 * C281 - C113 * C269) * C10040 +
            (C31993 * C1126 - C113 * C1115) * C10044 +
            (C31993 * C1142 - C113 * C1127) * C10041 +
            (C31993 * C1137 - C113 * C1121) * C10045 +
            (C31993 * C1148 - C113 * C1139) * C32285) *
               C32271) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
            C32282 * C264 - C819 * C249) *
               C10043 +
           (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
            C32282 * C279 - C819 * C265) *
               C10040 +
           (C32317 * C359 - C817 * C349 + C32305 * C686 - C818 * C681 +
            C32282 * C1122 - C819 * C1113) *
               C10044 +
           (C32317 * C379 - C817 * C360 + C32305 * C696 - C818 * C687 +
            C32282 * C1140 - C819 * C1123) *
               C10041 +
           (C32317 * C369 - C817 * C354 + C32305 * C1128 - C818 * C1116 +
            C32282 * C1129 - C819 * C1117) *
               C10045 +
           (C32317 * C384 - C817 * C370 + C32305 * C1143 - C818 * C1130 +
            C32282 * C1144 - C819 * C1131) *
               C32285) *
              C31911 * C31970 * C31956 * C110 +
          ((C822 - C821 + C824 - C823 + C826 - C825) * C10043 +
           (C828 - C827 + C830 - C829 + C832 - C831) * C10040 +
           (C1474 - C1475 + C1476 - C1477 + C1478 - C1479) * C10044 +
           (C1480 - C1481 + C1482 - C1483 + C1484 - C1485) * C10041 +
           (C817 * C355 - C32317 * C371 + C818 * C1118 - C32305 * C1132 +
            C819 * C1119 - C32282 * C1133) *
               C10045 +
           (C817 * C372 - C32317 * C385 + C818 * C1134 - C32305 * C1145 +
            C819 * C1135 - C32282 * C1146) *
               C32285) *
              C31911 * C31970 * C31956 * C111 +
          (C865 * C10043 + C866 * C10040 +
           (C1487 - C1486 + C1489 - C1488 + C1491 - C1490) * C10044 +
           (C1493 - C1492 + C1495 - C1494 + C1497 - C1496) * C10041 +
           (C32317 * C373 - C817 * C356 + C32305 * C1136 - C818 * C1120 +
            C32282 * C1137 - C819 * C1121) *
               C10045 +
           (C32317 * C386 - C817 * C374 + C32305 * C1147 - C818 * C1138 +
            C32282 * C1148 - C819 * C1139) *
               C32285) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
            C32282 * C264 - C819 * C249) *
               C10043 +
           (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
            C32282 * C279 - C819 * C265) *
               C10040 +
           (C32317 * C359 - C817 * C349 + C32305 * C686 - C818 * C681 +
            C32282 * C1122 - C819 * C1113) *
               C10044 +
           (C32317 * C379 - C817 * C360 + C32305 * C696 - C818 * C687 +
            C32282 * C1140 - C819 * C1123) *
               C10041 +
           (C32317 * C369 - C817 * C354 + C32305 * C1128 - C818 * C1116 +
            C32282 * C1129 - C819 * C1117) *
               C10045 +
           (C32317 * C384 - C817 * C370 + C32305 * C1143 - C818 * C1130 +
            C32282 * C1144 - C819 * C1131) *
               C32285) *
              C31911 * C31970 * C240 +
          ((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
            C819 * C979 - C32282 * C985) *
               C10043 +
           (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
            C819 * C986 - C32282 * C997) *
               C10040 +
           (C817 * C681 - C32317 * C686 + C818 * C1113 - C32305 * C1122 +
            C819 * C1643 - C32282 * C1646) *
               C10044 +
           (C817 * C687 - C32317 * C696 + C818 * C1123 - C32305 * C1140 +
            C819 * C1647 - C32282 * C1652) *
               C10041 +
           (C817 * C1116 - C32317 * C1128 + C818 * C1117 - C32305 * C1129 +
            C819 * C6245 - C32282 * C6249) *
               C10045 +
           (C817 * C1130 - C32317 * C1143 + C818 * C1131 - C32305 * C1144 +
            C819 * C6251 - C32282 * C6254) *
               C32285) *
              C31911 * C31970 * C241 +
          ((C32317 * C264 - C817 * C249 + C32305 * C985 - C818 * C979 +
            C32282 * C991 - C819 * C982) *
               C10043 +
           (C32317 * C279 - C817 * C265 + C32305 * C997 - C818 * C986 +
            C32282 * C1000 - C819 * C992) *
               C10040 +
           (C32317 * C1122 - C817 * C1113 + C32305 * C1646 - C818 * C1643 +
            C32282 * C6247 - C819 * C6244) *
               C10044 +
           (C32317 * C1140 - C817 * C1123 + C32305 * C1652 - C818 * C1647 +
            C32282 * C6253 - C819 * C6248) *
               C10041 +
           (C32317 * C1129 - C817 * C1117 + C32305 * C6249 - C818 * C6245 +
            C32282 * C6250 - C819 * C6246) *
               C10045 +
           (C32317 * C1144 - C817 * C1131 + C32305 * C6254 - C818 * C6251 +
            C32282 * C6255 - C819 * C6252) *
               C32285) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C31993 * C122 - C113 * C115) * C11632 +
           (C31993 * C136 - C113 * C123) * C11627 + (C2043 - C2044) * C11633 +
           (C2045 - C2046) * C11628 + C2065 * C11634 + C2066 * C11629 +
           (C2054 - C2053) * C11635 + (C2056 - C2055) * C11630 +
           (C31993 * C2030 - C113 * C2021) * C11636 +
           (C31993 * C2039 - C113 * C2031) * C11631) *
              C31911 * C31970 * C31956 * C110 +
          ((C145 - C144) * C11632 + (C147 - C146) * C11627 + C2385 * C11633 +
           C2386 * C11628 + C2387 * C11634 + C2388 * C11629 +
           (C2057 - C2058) * C11635 + (C2059 - C2060) * C11630 +
           (C113 * C2022 - C31993 * C2032) * C11636 +
           (C113 * C2033 - C31993 * C2040) * C11631) *
              C31911 * C31970 * C31956 * C111 +
          (C164 * C11632 + C165 * C11627 + C1778 * C11633 + C1779 * C11628 +
           C1791 * C11634 + C1792 * C11629 + (C2062 - C2061) * C11635 +
           (C2064 - C2063) * C11630 + (C31993 * C2034 - C113 * C2023) * C11636 +
           (C31993 * C2041 - C113 * C2035) * C11631) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C31993 * C122 - C113 * C115) * C11632 +
           (C31993 * C136 - C113 * C123) * C11627 + (C2043 - C2044) * C11633 +
           (C2045 - C2046) * C11628 + C2065 * C11634 + C2066 * C11629 +
           (C2054 - C2053) * C11635 + (C2056 - C2055) * C11630 +
           (C31993 * C2030 - C113 * C2021) * C11636 +
           (C31993 * C2039 - C113 * C2031) * C11631) *
              C31911 * C31970 * C240 +
          ((C113 * C244 - C31993 * C254) * C11632 +
           (C113 * C255 - C31993 * C274) * C11627 + (C2551 - C2552) * C11633 +
           (C2553 - C2554) * C11628 + (C2555 - C2556) * C11634 +
           (C2557 - C2558) * C11629 + (C113 * C2538 - C31993 * C2541) * C11635 +
           (C113 * C2542 - C31993 * C2547) * C11630 +
           (C113 * C6845 - C31993 * C6849) * C11636 +
           (C113 * C6851 - C31993 * C6854) * C11631) *
              C31911 * C31970 * C241 +
          ((C31993 * C264 - C113 * C249) * C11632 +
           (C31993 * C279 - C113 * C265) * C11627 +
           (C31993 * C1122 - C113 * C1113) * C11633 +
           (C31993 * C1140 - C113 * C1123) * C11628 +
           (C31993 * C1129 - C113 * C1117) * C11634 +
           (C31993 * C1144 - C113 * C1131) * C11629 +
           (C31993 * C6847 - C113 * C6844) * C11635 +
           (C31993 * C6853 - C113 * C6848) * C11630 +
           (C31993 * C6850 - C113 * C6846) * C11636 +
           (C31993 * C6855 - C113 * C6852) * C11631) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
              C32282 * C264 - C5283 * C249) *
                 C3448 +
             (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
              C32282 * C279 - C5283 * C265) *
                 C32252 +
             (C6857 - C6858 + C6859 - C6860 + C6861 - C6862) * C3449 +
             (C6863 - C6864 + C6865 - C6866 + C6867 - C6868) * C32097) *
                C32232 +
            ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C3448 +
             (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32252 +
             (C5871 - C5870 + C5873 - C5872 + C5875 - C5874) * C3449 +
             (C5877 - C5876 + C5879 - C5878 + C5881 - C5880) * C32097) *
                C31921) *
               C31970 * C471 +
           (((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
              C5283 * C979 - C32282 * C985) *
                 C3448 +
             (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
              C5283 * C986 - C32282 * C997) *
                 C32252 +
             (C7365 - C7366 + C7367 - C7368 + C7369 - C7370) * C3449 +
             (C7371 - C7372 + C7373 - C7374 + C7375 - C7376) * C32097) *
                C32232 +
            ((C5700 - C5701 + C5702 - C5703 + C5704 - C5705) * C3448 +
             (C5706 - C5707 + C5708 - C5709 + C5710 - C5711) * C32252 +
             (C8779 - C8780 + C8781 - C8782 + C8783 - C8784) * C3449 +
             (C8785 - C8786 + C8787 - C8788 + C8789 - C8790) * C32097) *
                C31921) *
               C31970 * C472) *
              C473 +
          ((((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C3448 +
             (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32252 +
             (C5870 - C5871 + C5872 - C5873 + C5874 - C5875) * C3449 +
             (C5876 - C5877 + C5878 - C5879 + C5880 - C5881) * C32097) *
                C32232 +
            ((C5298 - C5297 + C5300 - C5299 + C5302 - C5301) * C3448 +
             (C5304 - C5303 + C5306 - C5305 + C5308 - C5307) * C32252 +
             (C5882 - C5883 + C5884 - C5885 + C5886 - C5887) * C3449 +
             (C5888 - C5889 + C5890 - C5891 + C5892 - C5893) * C32097) *
                C31921) *
               C31970 * C471 +
           (((C5701 - C5700 + C5703 - C5702 + C5705 - C5704) * C3448 +
             (C5707 - C5706 + C5709 - C5708 + C5711 - C5710) * C32252 +
             (C8780 - C8779 + C8782 - C8781 + C8784 - C8783) * C3449 +
             (C8786 - C8785 + C8788 - C8787 + C8790 - C8789) * C32097) *
                C32232 +
            ((C5713 - C5712 + C5715 - C5714 + C5717 - C5716) * C3448 +
             (C5719 - C5718 + C5721 - C5720 + C5723 - C5722) * C32252 +
             (C5275 * C690 - C5281 * C683 + C5276 * C1126 - C5282 * C1115 +
              C32282 * C1650 - C5283 * C1645) *
                 C3449 +
             (C5275 * C698 - C5281 * C691 + C5276 * C1142 - C5282 * C1127 +
              C32282 * C1654 - C5283 * C1651) *
                 C32097) *
                C31921) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C3448 +
             (C31993 * C136 - C113 * C123) * C32252 + (C2043 - C2044) * C3449 +
             (C2045 - C2046) * C32097) *
                C2658 +
            ((C144 - C145) * C3448 + (C146 - C147) * C32252 + C2383 * C3449 +
             C2384 * C32097) *
                C2659 +
            C3465 * C2660 + C3466 * C32286) *
               C31970 * C471 +
           (((C113 * C244 - C31993 * C254) * C3448 +
             (C113 * C255 - C31993 * C274) * C32252 + (C2551 - C2552) * C3449 +
             (C2553 - C2554) * C32097) *
                C2658 +
            ((C480 - C481) * C3448 + (C482 - C483) * C32252 +
             (C2217 - C2218) * C3449 + (C2219 - C2220) * C32097) *
                C2659 +
            ((C484 - C485) * C3448 + (C486 - C487) * C32252 +
             (C2225 - C2226) * C3449 + (C2227 - C2228) * C32097) *
                C2660 +
            ((C488 - C489) * C3448 + (C490 - C491) * C32252 +
             (C3793 - C3794) * C3449 + (C3795 - C3796) * C32097) *
                C32286) *
               C31970 * C472) *
              C473 +
          ((((C145 - C144) * C3448 + (C147 - C146) * C32252 + C2385 * C3449 +
             C2386 * C32097) *
                C2658 +
            ((C149 - C148) * C3448 + (C151 - C150) * C32252 + C2389 * C3449 +
             C2390 * C32097) *
                C2659 +
            ((C153 - C152) * C3448 + (C155 - C154) * C32252 +
             (C592 - C593) * C3449 + (C594 - C595) * C32097) *
                C2660 +
            ((C157 - C156) * C3448 + (C159 - C158) * C32252 +
             (C596 - C597) * C3449 + (C598 - C599) * C32097) *
                C32286) *
               C31970 * C471 +
           (((C481 - C480) * C3448 + (C483 - C482) * C32252 +
             (C2218 - C2217) * C3449 + (C2220 - C2219) * C32097) *
                C2658 +
            ((C485 - C484) * C3448 + (C487 - C486) * C32252 +
             (C2226 - C2225) * C3449 + (C2228 - C2227) * C32097) *
                C2659 +
            ((C489 - C488) * C3448 + (C491 - C490) * C32252 +
             (C3794 - C3793) * C3449 + (C3796 - C3795) * C32097) *
                C2660 +
            ((C493 - C492) * C3448 + (C495 - C494) * C32252 +
             (C31993 * C694 - C113 * C685) * C3449 +
             (C31993 * C700 - C113 * C695) * C32097) *
                C32286) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C13223 +
             (C31993 * C136 - C113 * C123) * C13219 + (C2043 - C2044) * C13224 +
             (C2045 - C2046) * C13220 + C2065 * C13225 + C2066 * C13221 +
             C11770 * C13226 + C11771 * C32298) *
                C32232 +
            ((C144 - C145) * C13223 + (C146 - C147) * C13219 + C2383 * C13224 +
             C2384 * C13220 + C2051 * C13225 + C2052 * C13221 +
             C13424 * C13226 + C13425 * C32298) *
                C31921) *
               C31970 * C471 +
           (((C113 * C244 - C31993 * C254) * C13223 +
             (C113 * C255 - C31993 * C274) * C13219 + (C2551 - C2552) * C13224 +
             (C2553 - C2554) * C13220 + (C2555 - C2556) * C13225 +
             (C2557 - C2558) * C13221 + (C12044 - C12045) * C13226 +
             (C12046 - C12047) * C32298) *
                C32232 +
            ((C480 - C481) * C13223 + (C482 - C483) * C13219 +
             (C2217 - C2218) * C13224 + (C2219 - C2220) * C13220 +
             (C2221 - C2222) * C13225 + (C2223 - C2224) * C13221 +
             (C13556 - C13557) * C13226 + (C13558 - C13559) * C32298) *
                C31921) *
               C31970 * C472) *
              C473 +
          ((((C145 - C144) * C13223 + (C147 - C146) * C13219 + C2385 * C13224 +
             C2386 * C13220 + C2387 * C13225 + C2388 * C13221 +
             (C2057 - C2058) * C13226 + (C2059 - C2060) * C32298) *
                C32232 +
            ((C149 - C148) * C13223 + (C151 - C150) * C13219 + C2389 * C13224 +
             C2390 * C13220 + C2391 * C13225 + C2392 * C13221 +
             (C2061 - C2062) * C13226 + (C2063 - C2064) * C32298) *
                C31921) *
               C31970 * C471 +
           (((C481 - C480) * C13223 + (C483 - C482) * C13219 +
             (C2218 - C2217) * C13224 + (C2220 - C2219) * C13220 +
             (C2222 - C2221) * C13225 + (C2224 - C2223) * C13221 +
             (C13557 - C13556) * C13226 + (C13559 - C13558) * C32298) *
                C32232 +
            ((C485 - C484) * C13223 + (C487 - C486) * C13219 +
             (C2226 - C2225) * C13224 + (C2228 - C2227) * C13220 +
             (C2230 - C2229) * C13225 + (C2232 - C2231) * C13221 +
             (C31993 * C2545 - C113 * C2540) * C13226 +
             (C31993 * C2549 - C113 * C2546) * C32298) *
                C31921) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
              C32282 * C264 - C5283 * C249) *
                 C3448 +
             (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
              C32282 * C279 - C5283 * C265) *
                 C32252 +
             (C6857 - C6858 + C6859 - C6860 + C6861 - C6862) * C3449 +
             (C6863 - C6864 + C6865 - C6866 + C6867 - C6868) * C32097) *
                C32232 +
            ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C3448 +
             (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32252 +
             C9001 * C3449 + C9002 * C32097) *
                C31921) *
               C577 +
           (((C6858 - C6857 + C6860 - C6859 + C6862 - C6861) * C3448 +
             (C6864 - C6863 + C6866 - C6865 + C6868 - C6867) * C32252 +
             (C6870 - C6869 + C6872 - C6871 + C6874 - C6873) * C3449 +
             (C6876 - C6875 + C6878 - C6877 + C6880 - C6879) * C32097) *
                C32232 +
            (C9003 * C3448 + C9004 * C32252 +
             (C7203 - C7204 + C7205 - C7206 + C7207 - C7208) * C3449 +
             (C7209 - C7210 + C7211 - C7212 + C7213 - C7214) * C32097) *
                C31921) *
               C578) *
              C471 +
          ((((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
              C5283 * C979 - C32282 * C985) *
                 C3448 +
             (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
              C5283 * C986 - C32282 * C997) *
                 C32252 +
             (C7365 - C7366 + C7367 - C7368 + C7369 - C7370) * C3449 +
             (C7371 - C7372 + C7373 - C7374 + C7375 - C7376) * C32097) *
                C32232 +
            ((C5700 - C5701 + C5702 - C5703 + C5704 - C5705) * C3448 +
             (C5706 - C5707 + C5708 - C5709 + C5710 - C5711) * C32252 +
             (C8779 - C8780 + C8781 - C8782 + C8783 - C8784) * C3449 +
             (C8785 - C8786 + C8787 - C8788 + C8789 - C8790) * C32097) *
                C31921) *
               C577 +
           (((C7366 - C7365 + C7368 - C7367 + C7370 - C7369) * C3448 +
             (C7372 - C7371 + C7374 - C7373 + C7376 - C7375) * C32252 +
             (C7378 - C7377 + C7380 - C7379 + C7382 - C7381) * C3449 +
             (C7384 - C7383 + C7386 - C7385 + C7388 - C7387) * C32097) *
                C32232 +
            ((C8780 - C8779 + C8782 - C8781 + C8784 - C8783) * C3448 +
             (C8786 - C8785 + C8788 - C8787 + C8790 - C8789) * C32252 +
             (C5275 * C1132 - C5281 * C1118 + C5276 * C1133 - C5282 * C1119 +
              C32282 * C7049 - C5283 * C7048) *
                 C3449 +
             (C5275 * C1145 - C5281 * C1134 + C5276 * C1146 - C5282 * C1135 +
              C32282 * C7051 - C5283 * C7050) *
                 C32097) *
                C31921) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C3448 +
             (C31993 * C136 - C113 * C123) * C32252 + (C2043 - C2044) * C3449 +
             (C2045 - C2046) * C32097) *
                C2658 +
            ((C144 - C145) * C3448 + (C146 - C147) * C32252 + C2383 * C3449 +
             C2384 * C32097) *
                C2659 +
            C3465 * C2660 + C3466 * C32286) *
               C577 +
           (((C2044 - C2043) * C3448 + (C2046 - C2045) * C32252 +
             (C2048 - C2047) * C3449 + (C2050 - C2049) * C32097) *
                C2658 +
            (C2385 * C3448 + C2386 * C32252 + C2387 * C3449 + C2388 * C32097) *
                C2659 +
            (C2389 * C3448 + C2390 * C32252 + C2391 * C3449 + C2392 * C32097) *
                C2660 +
            (C3927 * C3448 + C3928 * C32252 + (C1784 - C1785) * C3449 +
             (C1786 - C1787) * C32097) *
                C32286) *
               C578) *
              C471 +
          ((((C113 * C244 - C31993 * C254) * C3448 +
             (C113 * C255 - C31993 * C274) * C32252 + (C2551 - C2552) * C3449 +
             (C2553 - C2554) * C32097) *
                C2658 +
            ((C480 - C481) * C3448 + (C482 - C483) * C32252 +
             (C2217 - C2218) * C3449 + (C2219 - C2220) * C32097) *
                C2659 +
            ((C484 - C485) * C3448 + (C486 - C487) * C32252 +
             (C2225 - C2226) * C3449 + (C2227 - C2228) * C32097) *
                C2660 +
            ((C488 - C489) * C3448 + (C490 - C491) * C32252 +
             (C3793 - C3794) * C3449 + (C3795 - C3796) * C32097) *
                C32286) *
               C577 +
           (((C2552 - C2551) * C3448 + (C2554 - C2553) * C32252 +
             (C2556 - C2555) * C3449 + (C2558 - C2557) * C32097) *
                C2658 +
            ((C2218 - C2217) * C3448 + (C2220 - C2219) * C32252 +
             (C2222 - C2221) * C3449 + (C2224 - C2223) * C32097) *
                C2659 +
            ((C2226 - C2225) * C3448 + (C2228 - C2227) * C32252 +
             (C2230 - C2229) * C3449 + (C2232 - C2231) * C32097) *
                C2660 +
            ((C3794 - C3793) * C3448 + (C3796 - C3795) * C32252 +
             (C31993 * C2213 - C113 * C2212) * C3449 +
             (C31993 * C2215 - C113 * C2214) * C32097) *
                C32286) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C13223 +
             (C31993 * C136 - C113 * C123) * C13219 + (C2043 - C2044) * C13224 +
             (C2045 - C2046) * C13220 + C2065 * C13225 + C2066 * C13221 +
             C11770 * C13226 + C11771 * C32298) *
                C32232 +
            ((C144 - C145) * C13223 + (C146 - C147) * C13219 + C2383 * C13224 +
             C2384 * C13220 + C2051 * C13225 + C2052 * C13221 +
             C13424 * C13226 + C13425 * C32298) *
                C31921) *
               C577 +
           (((C2044 - C2043) * C13223 + (C2046 - C2045) * C13219 +
             (C2048 - C2047) * C13224 + (C2050 - C2049) * C13220 +
             (C2053 - C2054) * C13225 + (C2055 - C2056) * C13221 +
             (C11773 - C11772) * C13226 + (C11775 - C11774) * C32298) *
                C32232 +
            (C2385 * C13223 + C2386 * C13219 + C2387 * C13224 + C2388 * C13220 +
             C13690 * C13225 + C13691 * C13221 + (C11954 - C11955) * C13226 +
             (C11956 - C11957) * C32298) *
                C31921) *
               C578) *
              C471 +
          ((((C113 * C244 - C31993 * C254) * C13223 +
             (C113 * C255 - C31993 * C274) * C13219 + (C2551 - C2552) * C13224 +
             (C2553 - C2554) * C13220 + (C2555 - C2556) * C13225 +
             (C2557 - C2558) * C13221 + (C12044 - C12045) * C13226 +
             (C12046 - C12047) * C32298) *
                C32232 +
            ((C480 - C481) * C13223 + (C482 - C483) * C13219 +
             (C2217 - C2218) * C13224 + (C2219 - C2220) * C13220 +
             (C2221 - C2222) * C13225 + (C2223 - C2224) * C13221 +
             (C13556 - C13557) * C13226 + (C13558 - C13559) * C32298) *
                C31921) *
               C577 +
           (((C2552 - C2551) * C13223 + (C2554 - C2553) * C13219 +
             (C2556 - C2555) * C13224 + (C2558 - C2557) * C13220 +
             (C12045 - C12044) * C13225 + (C12047 - C12046) * C13221 +
             (C12049 - C12048) * C13226 + (C12051 - C12050) * C32298) *
                C32232 +
            ((C2218 - C2217) * C13223 + (C2220 - C2219) * C13219 +
             (C2222 - C2221) * C13224 + (C2224 - C2223) * C13220 +
             (C13557 - C13556) * C13225 + (C13559 - C13558) * C13221 +
             (C31993 * C11864 - C113 * C11863) * C13226 +
             (C31993 * C11866 - C113 * C11865) * C32298) *
                C31921) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C31993 * C122 - C113 * C115) * C3448 +
                (C31993 * C136 - C113 * C123) * C32252 +
                (C2043 - C2044) * C3449 + (C2045 - C2046) * C32097) *
                   C2658 +
               ((C144 - C145) * C3448 + (C146 - C147) * C32252 + C2383 * C3449 +
                C2384 * C32097) *
                   C2659 +
               C3465 * C2660 + C3466 * C32286) *
                  C31970 * C31956 * C110 +
              (((C145 - C144) * C3448 + (C147 - C146) * C32252 + C2385 * C3449 +
                C2386 * C32097) *
                   C2658 +
               ((C149 - C148) * C3448 + (C151 - C150) * C32252 + C2389 * C3449 +
                C2390 * C32097) *
                   C2659 +
               ((C153 - C152) * C3448 + (C155 - C154) * C32252 +
                (C592 - C593) * C3449 + (C594 - C595) * C32097) *
                   C2660 +
               ((C157 - C156) * C3448 + (C159 - C158) * C32252 +
                (C596 - C597) * C3449 + (C598 - C599) * C32097) *
                   C32286) *
                  C31970 * C31956 * C111 +
              (C3465 * C2658 + C3466 * C2659 +
               (C168 * C3448 + C169 * C32252 + (C597 - C596) * C3449 +
                (C599 - C598) * C32097) *
                   C2660 +
               ((C161 - C160) * C3448 + (C163 - C162) * C32252 +
                (C31993 * C580 - C113 * C579) * C3449 +
                (C31993 * C582 - C113 * C581) * C32097) *
                   C32286) *
                  C31970 * C31956 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C31993 * C122 - C113 * C115) * C3448 +
                (C31993 * C136 - C113 * C123) * C32252 +
                (C2043 - C2044) * C3449 + (C2045 - C2046) * C32097) *
                   C2658 +
               ((C144 - C145) * C3448 + (C146 - C147) * C32252 + C2383 * C3449 +
                C2384 * C32097) *
                   C2659 +
               C3465 * C2660 + C3466 * C32286) *
                  C31970 * C240 +
              (((C113 * C244 - C31993 * C254) * C3448 +
                (C113 * C255 - C31993 * C274) * C32252 +
                (C2551 - C2552) * C3449 + (C2553 - C2554) * C32097) *
                   C2658 +
               ((C480 - C481) * C3448 + (C482 - C483) * C32252 +
                (C2217 - C2218) * C3449 + (C2219 - C2220) * C32097) *
                   C2659 +
               ((C484 - C485) * C3448 + (C486 - C487) * C32252 +
                (C2225 - C2226) * C3449 + (C2227 - C2228) * C32097) *
                   C2660 +
               ((C488 - C489) * C3448 + (C490 - C491) * C32252 +
                (C113 * C684 - C31993 * C692) * C3449 +
                (C113 * C693 - C31993 * C699) * C32097) *
                   C32286) *
                  C31970 * C241 +
              (((C31993 * C264 - C113 * C249) * C3448 +
                (C31993 * C279 - C113 * C265) * C32252 +
                (C31993 * C1122 - C113 * C1113) * C3449 +
                (C31993 * C1140 - C113 * C1123) * C32097) *
                   C2658 +
               ((C31993 * C266 - C113 * C250) * C3448 +
                (C31993 * C280 - C113 * C267) * C32252 +
                (C31993 * C1124 - C113 * C1114) * C3449 +
                (C31993 * C1141 - C113 * C1125) * C32097) *
                   C2659 +
               ((C31993 * C268 - C113 * C251) * C3448 +
                (C31993 * C281 - C113 * C269) * C32252 +
                (C31993 * C1126 - C113 * C1115) * C3449 +
                (C31993 * C1142 - C113 * C1127) * C32097) *
                   C2660 +
               ((C31993 * C270 - C113 * C252) * C3448 +
                (C31993 * C282 - C113 * C271) * C32252 +
                (C31993 * C1470 - C113 * C1469) * C3449 +
                (C31993 * C1472 - C113 * C1471) * C32097) *
                   C32286) *
                  C31970 * C242) *
             C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C3448 +
            (C31993 * C136 - C113 * C123) * C32252 + (C2043 - C2044) * C3449 +
            (C2045 - C2046) * C32097) *
               C2658 +
           ((C144 - C145) * C3448 + (C146 - C147) * C32252 + C2383 * C3449 +
            C2384 * C32097) *
               C2659 +
           C3465 * C2660 + C3466 * C32286) *
              C346 +
          (((C2044 - C2043) * C3448 + (C2046 - C2045) * C32252 +
            (C2048 - C2047) * C3449 + (C2050 - C2049) * C32097) *
               C2658 +
           (C2385 * C3448 + C2386 * C32252 + C2387 * C3449 + C2388 * C32097) *
               C2659 +
           (C2389 * C3448 + C2390 * C32252 + C2391 * C3449 + C2392 * C32097) *
               C2660 +
           ((C592 - C593) * C3448 + (C594 - C595) * C32252 +
            (C1784 - C1785) * C3449 + (C1786 - C1787) * C32097) *
               C32286) *
              C347 +
          ((C2065 * C3448 + C2066 * C32252 + (C2054 - C2053) * C3449 +
            (C2056 - C2055) * C32097) *
               C2658 +
           (C2051 * C3448 + C2052 * C32252 + (C2058 - C2057) * C3449 +
            (C2060 - C2059) * C32097) *
               C2659 +
           (C1791 * C3448 + C1792 * C32252 + (C2062 - C2061) * C3449 +
            (C2064 - C2063) * C32097) *
               C2660 +
           ((C1785 - C1784) * C3448 + (C1787 - C1786) * C32252 +
            (C31993 * C2379 - C113 * C2378) * C3449 +
            (C31993 * C2381 - C113 * C2380) * C32097) *
               C32286) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C3448 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32252 +
            (C6857 - C6858 + C6859 - C6860 + C6861 - C6862) * C3449 +
            (C6863 - C6864 + C6865 - C6866 + C6867 - C6868) * C32097) *
               C32232 +
           ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C3448 +
            (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32252 +
            (C5871 - C5870 + C5873 - C5872 + C5875 - C5874) * C3449 +
            (C5877 - C5876 + C5879 - C5878 + C5881 - C5880) * C32097) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C3448 +
            (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32252 +
            (C5870 - C5871 + C5872 - C5873 + C5874 - C5875) * C3449 +
            (C5876 - C5877 + C5878 - C5879 + C5880 - C5881) * C32097) *
               C32232 +
           ((C5298 - C5297 + C5300 - C5299 + C5302 - C5301) * C3448 +
            (C5304 - C5303 + C5306 - C5305 + C5308 - C5307) * C32252 +
            (C5882 - C5883 + C5884 - C5885 + C5886 - C5887) * C3449 +
            (C5888 - C5889 + C5890 - C5891 + C5892 - C5893) * C32097) *
               C31921) *
              C31970 * C31956 * C111 +
          ((C5329 * C3448 + C5330 * C32252 +
            (C5883 - C5882 + C5885 - C5884 + C5887 - C5886) * C3449 +
            (C5889 - C5888 + C5891 - C5890 + C5893 - C5892) * C32097) *
               C32232 +
           ((C5310 - C5309 + C5312 - C5311 + C5314 - C5313) * C3448 +
            (C5316 - C5315 + C5318 - C5317 + C5320 - C5319) * C32252 +
            (C5275 * C365 - C5281 * C352 + C5276 * C692 - C5282 * C684 +
             C32282 * C1470 - C5283 * C1469) *
                C3449 +
            (C5275 * C382 - C5281 * C366 + C5276 * C699 - C5282 * C693 +
             C32282 * C1472 - C5283 * C1471) *
                C32097) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C3448 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32252 +
            (C6857 - C6858 + C6859 - C6860 + C6861 - C6862) * C3449 +
            (C6863 - C6864 + C6865 - C6866 + C6867 - C6868) * C32097) *
               C32232 +
           ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C3448 +
            (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32252 +
            (C5871 - C5870 + C5873 - C5872 + C5875 - C5874) * C3449 +
            (C5877 - C5876 + C5879 - C5878 + C5881 - C5880) * C32097) *
               C31921) *
              C31970 * C240 +
          (((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
             C5283 * C979 - C32282 * C985) *
                C3448 +
            (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
             C5283 * C986 - C32282 * C997) *
                C32252 +
            (C7365 - C7366 + C7367 - C7368 + C7369 - C7370) * C3449 +
            (C7371 - C7372 + C7373 - C7374 + C7375 - C7376) * C32097) *
               C32232 +
           ((C5700 - C5701 + C5702 - C5703 + C5704 - C5705) * C3448 +
            (C5706 - C5707 + C5708 - C5709 + C5710 - C5711) * C32252 +
            (C5281 * C682 - C5275 * C688 + C5282 * C1114 - C5276 * C1124 +
             C5283 * C1644 - C32282 * C1648) *
                C3449 +
            (C5281 * C689 - C5275 * C697 + C5282 * C1125 - C5276 * C1141 +
             C5283 * C1649 - C32282 * C1653) *
                C32097) *
               C31921) *
              C31970 * C241 +
          (((C5275 * C264 - C5281 * C249 + C5276 * C985 - C5282 * C979 +
             C32282 * C991 - C5283 * C982) *
                C3448 +
            (C5275 * C279 - C5281 * C265 + C5276 * C997 - C5282 * C986 +
             C32282 * C1000 - C5283 * C992) *
                C32252 +
            (C5275 * C1122 - C5281 * C1113 + C5276 * C1646 - C5282 * C1643 +
             C32282 * C6247 - C5283 * C6244) *
                C3449 +
            (C5275 * C1140 - C5281 * C1123 + C5276 * C1652 - C5282 * C1647 +
             C32282 * C6253 - C5283 * C6248) *
                C32097) *
               C32232 +
           ((C5275 * C266 - C5281 * C250 + C5276 * C987 - C5282 * C980 +
             C32282 * C993 - C5283 * C983) *
                C3448 +
            (C5275 * C280 - C5281 * C267 + C5276 * C998 - C5282 * C988 +
             C32282 * C1001 - C5283 * C994) *
                C32252 +
            (C5275 * C1124 - C5281 * C1114 + C5276 * C1648 - C5282 * C1644 +
             C32282 * C6425 - C5283 * C6424) *
                C3449 +
            (C5275 * C1141 - C5281 * C1125 + C5276 * C1653 - C5282 * C1649 +
             C32282 * C6427 - C5283 * C6426) *
                C32097) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C3448 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32252 +
            (C6857 - C6858 + C6859 - C6860 + C6861 - C6862) * C3449 +
            (C6863 - C6864 + C6865 - C6866 + C6867 - C6868) * C32097) *
               C32232 +
           ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C3448 +
            (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32252 +
            (C5871 - C5870 + C5873 - C5872 + C5875 - C5874) * C3449 +
            (C5877 - C5876 + C5879 - C5878 + C5881 - C5880) * C32097) *
               C31921) *
              C346 +
          (((C6858 - C6857 + C6860 - C6859 + C6862 - C6861) * C3448 +
            (C6864 - C6863 + C6866 - C6865 + C6868 - C6867) * C32252 +
            (C6870 - C6869 + C6872 - C6871 + C6874 - C6873) * C3449 +
            (C6876 - C6875 + C6878 - C6877 + C6880 - C6879) * C32097) *
               C32232 +
           ((C5870 - C5871 + C5872 - C5873 + C5874 - C5875) * C3448 +
            (C5876 - C5877 + C5878 - C5879 + C5880 - C5881) * C32252 +
            (C7203 - C7204 + C7205 - C7206 + C7207 - C7208) * C3449 +
            (C7209 - C7210 + C7211 - C7212 + C7213 - C7214) * C32097) *
               C31921) *
              C347 +
          ((C6901 * C3448 + C6902 * C32252 +
            (C6882 - C6881 + C6884 - C6883 + C6886 - C6885) * C3449 +
            (C6888 - C6887 + C6890 - C6889 + C6892 - C6891) * C32097) *
               C32232 +
           ((C7204 - C7203 + C7206 - C7205 + C7208 - C7207) * C3448 +
            (C7210 - C7209 + C7212 - C7211 + C7214 - C7213) * C32252 +
            (C5275 * C2026 - C5281 * C2019 + C5276 * C2543 - C5282 * C2539 +
             C32282 * C7199 - C5283 * C7198) *
                C3449 +
            (C5275 * C2037 - C5281 * C2027 + C5276 * C2548 - C5282 * C2544 +
             C32282 * C7201 - C5283 * C7200) *
                C32097) *
               C31921) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C13223 +
            (C31993 * C136 - C113 * C123) * C13219 + (C2043 - C2044) * C13224 +
            (C2045 - C2046) * C13220 + C2065 * C13225 + C2066 * C13221 +
            C11770 * C13226 + C11771 * C32298) *
               C32232 +
           ((C144 - C145) * C13223 + (C146 - C147) * C13219 + C2383 * C13224 +
            C2384 * C13220 + C2051 * C13225 + C2052 * C13221 +
            (C2058 - C2057) * C13226 + (C2060 - C2059) * C32298) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C145 - C144) * C13223 + (C147 - C146) * C13219 + C2385 * C13224 +
            C2386 * C13220 + C2387 * C13225 + C2388 * C13221 +
            (C2057 - C2058) * C13226 + (C2059 - C2060) * C32298) *
               C32232 +
           ((C149 - C148) * C13223 + (C151 - C150) * C13219 + C2389 * C13224 +
            C2390 * C13220 + C2391 * C13225 + C2392 * C13221 +
            (C2061 - C2062) * C13226 + (C2063 - C2064) * C32298) *
               C31921) *
              C31970 * C31956 * C111 +
          ((C164 * C13223 + C165 * C13219 + C1778 * C13224 + C1779 * C13220 +
            C1791 * C13225 + C1792 * C13221 + (C2062 - C2061) * C13226 +
            (C2064 - C2063) * C32298) *
               C32232 +
           (C166 * C13223 + C167 * C13219 + C3457 * C13224 + C3458 * C13220 +
            (C1785 - C1784) * C13225 + (C1787 - C1786) * C13221 +
            (C31993 * C2379 - C113 * C2378) * C13226 +
            (C31993 * C2381 - C113 * C2380) * C32298) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C13223 +
            (C31993 * C136 - C113 * C123) * C13219 + (C2043 - C2044) * C13224 +
            (C2045 - C2046) * C13220 + C2065 * C13225 + C2066 * C13221 +
            C11770 * C13226 + C11771 * C32298) *
               C32232 +
           ((C144 - C145) * C13223 + (C146 - C147) * C13219 + C2383 * C13224 +
            C2384 * C13220 + C2051 * C13225 + C2052 * C13221 +
            (C2058 - C2057) * C13226 + (C2060 - C2059) * C32298) *
               C31921) *
              C31970 * C240 +
          (((C113 * C244 - C31993 * C254) * C13223 +
            (C113 * C255 - C31993 * C274) * C13219 + (C2551 - C2552) * C13224 +
            (C2553 - C2554) * C13220 + (C2555 - C2556) * C13225 +
            (C2557 - C2558) * C13221 + (C12044 - C12045) * C13226 +
            (C12046 - C12047) * C32298) *
               C32232 +
           ((C480 - C481) * C13223 + (C482 - C483) * C13219 +
            (C2217 - C2218) * C13224 + (C2219 - C2220) * C13220 +
            (C2221 - C2222) * C13225 + (C2223 - C2224) * C13221 +
            (C113 * C2539 - C31993 * C2543) * C13226 +
            (C113 * C2544 - C31993 * C2548) * C32298) *
               C31921) *
              C31970 * C241 +
          (((C31993 * C264 - C113 * C249) * C13223 +
            (C31993 * C279 - C113 * C265) * C13219 +
            (C31993 * C1122 - C113 * C1113) * C13224 +
            (C31993 * C1140 - C113 * C1123) * C13220 +
            (C31993 * C1129 - C113 * C1117) * C13225 +
            (C31993 * C1144 - C113 * C1131) * C13221 +
            (C31993 * C6847 - C113 * C6844) * C13226 +
            (C31993 * C6853 - C113 * C6848) * C32298) *
               C32232 +
           ((C31993 * C266 - C113 * C250) * C13223 +
            (C31993 * C280 - C113 * C267) * C13219 +
            (C31993 * C1124 - C113 * C1114) * C13224 +
            (C31993 * C1141 - C113 * C1125) * C13220 +
            (C31993 * C1133 - C113 * C1119) * C13225 +
            (C31993 * C1146 - C113 * C1135) * C13221 +
            (C31993 * C7199 - C113 * C7198) * C13226 +
            (C31993 * C7201 - C113 * C7200) * C32298) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C13223 +
            (C31993 * C136 - C113 * C123) * C13219 + (C2043 - C2044) * C13224 +
            (C2045 - C2046) * C13220 + C2065 * C13225 + C2066 * C13221 +
            C11770 * C13226 + C11771 * C32298) *
               C32232 +
           ((C144 - C145) * C13223 + (C146 - C147) * C13219 + C2383 * C13224 +
            C2384 * C13220 + C2051 * C13225 + C2052 * C13221 + C13424 * C13226 +
            C13425 * C32298) *
               C31921) *
              C346 +
          (((C2044 - C2043) * C13223 + (C2046 - C2045) * C13219 +
            (C2048 - C2047) * C13224 + (C2050 - C2049) * C13220 +
            (C2053 - C2054) * C13225 + (C2055 - C2056) * C13221 +
            (C11773 - C11772) * C13226 + (C11775 - C11774) * C32298) *
               C32232 +
           (C2385 * C13223 + C2386 * C13219 + C2387 * C13224 + C2388 * C13220 +
            (C2057 - C2058) * C13225 + (C2059 - C2060) * C13221 +
            (C11954 - C11955) * C13226 + (C11956 - C11957) * C32298) *
               C31921) *
              C347 +
          ((C2065 * C13223 + C2066 * C13219 + C11770 * C13224 +
            C11771 * C13220 + C11780 * C13225 + C11781 * C13221 +
            (C11777 - C11776) * C13226 + (C11779 - C11778) * C32298) *
               C32232 +
           (C2051 * C13223 + C2052 * C13219 + C13424 * C13224 +
            C13425 * C13220 + (C11955 - C11954) * C13225 +
            (C11957 - C11956) * C13221 +
            (C31993 * C11950 - C113 * C11949) * C13226 +
            (C31993 * C11952 - C113 * C11951) * C32298) *
               C31921) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
              C32282 * C264 - C5283 * C249) *
                 C3448 +
             (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
              C32282 * C279 - C5283 * C265) *
                 C32252 +
             (C6857 - C6858 + C6859 - C6860 + C6861 - C6862) * C3449 +
             (C6863 - C6864 + C6865 - C6866 + C6867 - C6868) * C32097) *
                C32232 +
            ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C3448 +
             (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32252 +
             C9001 * C3449 + C9002 * C32097) *
                C31921) *
               C577 +
           (((C6858 - C6857 + C6860 - C6859 + C6862 - C6861) * C3448 +
             (C6864 - C6863 + C6866 - C6865 + C6868 - C6867) * C32252 +
             (C6870 - C6869 + C6872 - C6871 + C6874 - C6873) * C3449 +
             (C6876 - C6875 + C6878 - C6877 + C6880 - C6879) * C32097) *
                C32232 +
            (C9003 * C3448 + C9004 * C32252 +
             (C7203 - C7204 + C7205 - C7206 + C7207 - C7208) * C3449 +
             (C7209 - C7210 + C7211 - C7212 + C7213 - C7214) * C32097) *
                C31921) *
               C578) *
              C31956 * C473 +
          ((((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C3448 +
             (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32252 +
             C9003 * C3449 + C9004 * C32097) *
                C32232 +
            ((C5298 - C5297 + C5300 - C5299 + C5302 - C5301) * C3448 +
             (C5304 - C5303 + C5306 - C5305 + C5308 - C5307) * C32252 +
             (C5882 - C5883 + C5884 - C5885 + C5886 - C5887) * C3449 +
             (C5888 - C5889 + C5890 - C5891 + C5892 - C5893) * C32097) *
                C31921) *
               C577 +
           ((C9001 * C3448 + C9002 * C32252 +
             (C7204 - C7203 + C7206 - C7205 + C7208 - C7207) * C3449 +
             (C7210 - C7209 + C7212 - C7211 + C7214 - C7213) * C32097) *
                C32232 +
            ((C5883 - C5882 + C5885 - C5884 + C5887 - C5886) * C3448 +
             (C5889 - C5888 + C5891 - C5890 + C5893 - C5892) * C32252 +
             (C5275 * C373 - C5281 * C356 + C5276 * C1136 - C5282 * C1120 +
              C32282 * C1137 - C5283 * C1121) *
                 C3449 +
             (C5275 * C386 - C5281 * C374 + C5276 * C1147 - C5282 * C1138 +
              C32282 * C1148 - C5283 * C1139) *
                 C32097) *
                C31921) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C3448 +
             (C31993 * C136 - C113 * C123) * C32252 + (C2043 - C2044) * C3449 +
             (C2045 - C2046) * C32097) *
                C2658 +
            ((C144 - C145) * C3448 + (C146 - C147) * C32252 + C2383 * C3449 +
             C2384 * C32097) *
                C2659 +
            C3465 * C2660 + C3466 * C32286) *
               C577 +
           (((C2044 - C2043) * C3448 + (C2046 - C2045) * C32252 +
             (C2048 - C2047) * C3449 + (C2050 - C2049) * C32097) *
                C2658 +
            (C2385 * C3448 + C2386 * C32252 + C2387 * C3449 + C2388 * C32097) *
                C2659 +
            (C2389 * C3448 + C2390 * C32252 + C2391 * C3449 + C2392 * C32097) *
                C2660 +
            (C3927 * C3448 + C3928 * C32252 + (C1784 - C1785) * C3449 +
             (C1786 - C1787) * C32097) *
                C32286) *
               C578) *
              C31956 * C473 +
          ((((C145 - C144) * C3448 + (C147 - C146) * C32252 + C2385 * C3449 +
             C2386 * C32097) *
                C2658 +
            ((C149 - C148) * C3448 + (C151 - C150) * C32252 + C2389 * C3449 +
             C2390 * C32097) *
                C2659 +
            ((C153 - C152) * C3448 + (C155 - C154) * C32252 + C3927 * C3449 +
             C3928 * C32097) *
                C2660 +
            ((C157 - C156) * C3448 + (C159 - C158) * C32252 +
             (C596 - C597) * C3449 + (C598 - C599) * C32097) *
                C32286) *
               C577 +
           ((C2383 * C3448 + C2384 * C32252 + C2051 * C3449 + C2052 * C32097) *
                C2658 +
            (C1778 * C3448 + C1779 * C32252 + C1791 * C3449 + C1792 * C32097) *
                C2659 +
            (C3457 * C3448 + C3458 * C32252 + (C1785 - C1784) * C3449 +
             (C1787 - C1786) * C32097) *
                C2660 +
            ((C597 - C596) * C3448 + (C599 - C598) * C32252 +
             (C31993 * C377 - C113 * C358) * C3449 +
             (C31993 * C388 - C113 * C378) * C32097) *
                C32286) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C13223 +
             (C31993 * C136 - C113 * C123) * C13219 + (C2043 - C2044) * C13224 +
             (C2045 - C2046) * C13220 + C2065 * C13225 + C2066 * C13221 +
             C11770 * C13226 + C11771 * C32298) *
                C32232 +
            ((C144 - C145) * C13223 + (C146 - C147) * C13219 + C2383 * C13224 +
             C2384 * C13220 + C2051 * C13225 + C2052 * C13221 +
             C13424 * C13226 + C13425 * C32298) *
                C31921) *
               C577 +
           (((C2044 - C2043) * C13223 + (C2046 - C2045) * C13219 +
             (C2048 - C2047) * C13224 + (C2050 - C2049) * C13220 +
             (C2053 - C2054) * C13225 + (C2055 - C2056) * C13221 +
             (C11773 - C11772) * C13226 + (C11775 - C11774) * C32298) *
                C32232 +
            (C2385 * C13223 + C2386 * C13219 + C2387 * C13224 + C2388 * C13220 +
             C13690 * C13225 + C13691 * C13221 + (C11954 - C11955) * C13226 +
             (C11956 - C11957) * C32298) *
                C31921) *
               C578) *
              C31956 * C473 +
          ((((C145 - C144) * C13223 + (C147 - C146) * C13219 + C2385 * C13224 +
             C2386 * C13220 + C2387 * C13225 + C2388 * C13221 +
             C13690 * C13226 + C13691 * C32298) *
                C32232 +
            ((C149 - C148) * C13223 + (C151 - C150) * C13219 + C2389 * C13224 +
             C2390 * C13220 + C2391 * C13225 + C2392 * C13221 +
             (C2061 - C2062) * C13226 + (C2063 - C2064) * C32298) *
                C31921) *
               C577 +
           ((C2383 * C13223 + C2384 * C13219 + C2051 * C13224 + C2052 * C13220 +
             C13424 * C13225 + C13425 * C13221 + (C11955 - C11954) * C13226 +
             (C11957 - C11956) * C32298) *
                C32232 +
            (C1778 * C13223 + C1779 * C13219 + C1791 * C13224 + C1792 * C13220 +
             (C2062 - C2061) * C13225 + (C2064 - C2063) * C13221 +
             (C31993 * C2034 - C113 * C2023) * C13226 +
             (C31993 * C2041 - C113 * C2035) * C32298) *
                C31921) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C3448 +
            (C31993 * C136 - C113 * C123) * C32252 + (C2043 - C2044) * C3449 +
            (C2045 - C2046) * C32097) *
               C2658 +
           ((C144 - C145) * C3448 + (C146 - C147) * C32252 + C2383 * C3449 +
            C2384 * C32097) *
               C2659 +
           C3465 * C2660 + C3466 * C32286) *
              C31970 * C240 +
          (((C113 * C244 - C31993 * C254) * C3448 +
            (C113 * C255 - C31993 * C274) * C32252 + (C2551 - C2552) * C3449 +
            (C2553 - C2554) * C32097) *
               C2658 +
           ((C480 - C481) * C3448 + (C482 - C483) * C32252 +
            (C2217 - C2218) * C3449 + (C2219 - C2220) * C32097) *
               C2659 +
           ((C484 - C485) * C3448 + (C486 - C487) * C32252 +
            (C2225 - C2226) * C3449 + (C2227 - C2228) * C32097) *
               C2660 +
           ((C488 - C489) * C3448 + (C490 - C491) * C32252 +
            (C113 * C684 - C31993 * C692) * C3449 +
            (C113 * C693 - C31993 * C699) * C32097) *
               C32286) *
              C31970 * C241 +
          (((C31993 * C264 - C113 * C249) * C3448 +
            (C31993 * C279 - C113 * C265) * C32252 +
            (C31993 * C1122 - C113 * C1113) * C3449 +
            (C31993 * C1140 - C113 * C1123) * C32097) *
               C2658 +
           ((C31993 * C266 - C113 * C250) * C3448 +
            (C31993 * C280 - C113 * C267) * C32252 +
            (C31993 * C1124 - C113 * C1114) * C3449 +
            (C31993 * C1141 - C113 * C1125) * C32097) *
               C2659 +
           ((C31993 * C268 - C113 * C251) * C3448 +
            (C31993 * C281 - C113 * C269) * C32252 +
            (C31993 * C1126 - C113 * C1115) * C3449 +
            (C31993 * C1142 - C113 * C1127) * C32097) *
               C2660 +
           ((C31993 * C270 - C113 * C252) * C3448 +
            (C31993 * C282 - C113 * C271) * C32252 +
            (C31993 * C1470 - C113 * C1469) * C3449 +
            (C31993 * C1472 - C113 * C1471) * C32097) *
               C32286) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C3448 +
            (C31993 * C136 - C113 * C123) * C32252 + (C2043 - C2044) * C3449 +
            (C2045 - C2046) * C32097) *
               C2658 +
           ((C144 - C145) * C3448 + (C146 - C147) * C32252 + C2383 * C3449 +
            C2384 * C32097) *
               C2659 +
           C3465 * C2660 + C3466 * C32286) *
              C31970 * C31956 * C110 +
          (((C145 - C144) * C3448 + (C147 - C146) * C32252 + C2385 * C3449 +
            C2386 * C32097) *
               C2658 +
           ((C149 - C148) * C3448 + (C151 - C150) * C32252 + C2389 * C3449 +
            C2390 * C32097) *
               C2659 +
           ((C153 - C152) * C3448 + (C155 - C154) * C32252 +
            (C592 - C593) * C3449 + (C594 - C595) * C32097) *
               C2660 +
           ((C157 - C156) * C3448 + (C159 - C158) * C32252 +
            (C596 - C597) * C3449 + (C598 - C599) * C32097) *
               C32286) *
              C31970 * C31956 * C111 +
          (C3465 * C2658 + C3466 * C2659 +
           (C168 * C3448 + C169 * C32252 + (C597 - C596) * C3449 +
            (C599 - C598) * C32097) *
               C2660 +
           ((C161 - C160) * C3448 + (C163 - C162) * C32252 +
            (C31993 * C580 - C113 * C579) * C3449 +
            (C31993 * C582 - C113 * C581) * C32097) *
               C32286) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C3448 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32252 +
            (C6857 - C6858 + C6859 - C6860 + C6861 - C6862) * C3449 +
            (C6863 - C6864 + C6865 - C6866 + C6867 - C6868) * C32097) *
               C32232 +
           ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C3448 +
            (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32252 +
            (C5871 - C5870 + C5873 - C5872 + C5875 - C5874) * C3449 +
            (C5877 - C5876 + C5879 - C5878 + C5881 - C5880) * C32097) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C3448 +
            (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32252 +
            (C5870 - C5871 + C5872 - C5873 + C5874 - C5875) * C3449 +
            (C5876 - C5877 + C5878 - C5879 + C5880 - C5881) * C32097) *
               C32232 +
           ((C5298 - C5297 + C5300 - C5299 + C5302 - C5301) * C3448 +
            (C5304 - C5303 + C5306 - C5305 + C5308 - C5307) * C32252 +
            (C5882 - C5883 + C5884 - C5885 + C5886 - C5887) * C3449 +
            (C5888 - C5889 + C5890 - C5891 + C5892 - C5893) * C32097) *
               C31921) *
              C31970 * C31956 * C111 +
          ((C5329 * C3448 + C5330 * C32252 +
            (C5883 - C5882 + C5885 - C5884 + C5887 - C5886) * C3449 +
            (C5889 - C5888 + C5891 - C5890 + C5893 - C5892) * C32097) *
               C32232 +
           ((C5310 - C5309 + C5312 - C5311 + C5314 - C5313) * C3448 +
            (C5316 - C5315 + C5318 - C5317 + C5320 - C5319) * C32252 +
            (C5275 * C365 - C5281 * C352 + C5276 * C692 - C5282 * C684 +
             C32282 * C1470 - C5283 * C1469) *
                C3449 +
            (C5275 * C382 - C5281 * C366 + C5276 * C699 - C5282 * C693 +
             C32282 * C1472 - C5283 * C1471) *
                C32097) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C3448 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32252 +
            (C6857 - C6858 + C6859 - C6860 + C6861 - C6862) * C3449 +
            (C6863 - C6864 + C6865 - C6866 + C6867 - C6868) * C32097) *
               C32232 +
           ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C3448 +
            (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32252 +
            (C5871 - C5870 + C5873 - C5872 + C5875 - C5874) * C3449 +
            (C5877 - C5876 + C5879 - C5878 + C5881 - C5880) * C32097) *
               C31921) *
              C31970 * C240 +
          (((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
             C5283 * C979 - C32282 * C985) *
                C3448 +
            (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
             C5283 * C986 - C32282 * C997) *
                C32252 +
            (C7365 - C7366 + C7367 - C7368 + C7369 - C7370) * C3449 +
            (C7371 - C7372 + C7373 - C7374 + C7375 - C7376) * C32097) *
               C32232 +
           ((C5700 - C5701 + C5702 - C5703 + C5704 - C5705) * C3448 +
            (C5706 - C5707 + C5708 - C5709 + C5710 - C5711) * C32252 +
            (C5281 * C682 - C5275 * C688 + C5282 * C1114 - C5276 * C1124 +
             C5283 * C1644 - C32282 * C1648) *
                C3449 +
            (C5281 * C689 - C5275 * C697 + C5282 * C1125 - C5276 * C1141 +
             C5283 * C1649 - C32282 * C1653) *
                C32097) *
               C31921) *
              C31970 * C241 +
          (((C5275 * C264 - C5281 * C249 + C5276 * C985 - C5282 * C979 +
             C32282 * C991 - C5283 * C982) *
                C3448 +
            (C5275 * C279 - C5281 * C265 + C5276 * C997 - C5282 * C986 +
             C32282 * C1000 - C5283 * C992) *
                C32252 +
            (C5275 * C1122 - C5281 * C1113 + C5276 * C1646 - C5282 * C1643 +
             C32282 * C6247 - C5283 * C6244) *
                C3449 +
            (C5275 * C1140 - C5281 * C1123 + C5276 * C1652 - C5282 * C1647 +
             C32282 * C6253 - C5283 * C6248) *
                C32097) *
               C32232 +
           ((C5275 * C266 - C5281 * C250 + C5276 * C987 - C5282 * C980 +
             C32282 * C993 - C5283 * C983) *
                C3448 +
            (C5275 * C280 - C5281 * C267 + C5276 * C998 - C5282 * C988 +
             C32282 * C1001 - C5283 * C994) *
                C32252 +
            (C5275 * C1124 - C5281 * C1114 + C5276 * C1648 - C5282 * C1644 +
             C32282 * C6425 - C5283 * C6424) *
                C3449 +
            (C5275 * C1141 - C5281 * C1125 + C5276 * C1653 - C5282 * C1649 +
             C32282 * C6427 - C5283 * C6426) *
                C32097) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C13223 +
            (C31993 * C136 - C113 * C123) * C13219 + (C2043 - C2044) * C13224 +
            (C2045 - C2046) * C13220 + C2065 * C13225 + C2066 * C13221 +
            C11770 * C13226 + C11771 * C32298) *
               C32232 +
           ((C144 - C145) * C13223 + (C146 - C147) * C13219 + C2383 * C13224 +
            C2384 * C13220 + C2051 * C13225 + C2052 * C13221 +
            (C2058 - C2057) * C13226 + (C2060 - C2059) * C32298) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C145 - C144) * C13223 + (C147 - C146) * C13219 + C2385 * C13224 +
            C2386 * C13220 + C2387 * C13225 + C2388 * C13221 +
            (C2057 - C2058) * C13226 + (C2059 - C2060) * C32298) *
               C32232 +
           ((C149 - C148) * C13223 + (C151 - C150) * C13219 + C2389 * C13224 +
            C2390 * C13220 + C2391 * C13225 + C2392 * C13221 +
            (C2061 - C2062) * C13226 + (C2063 - C2064) * C32298) *
               C31921) *
              C31970 * C31956 * C111 +
          ((C164 * C13223 + C165 * C13219 + C1778 * C13224 + C1779 * C13220 +
            C1791 * C13225 + C1792 * C13221 + (C2062 - C2061) * C13226 +
            (C2064 - C2063) * C32298) *
               C32232 +
           (C166 * C13223 + C167 * C13219 + C3457 * C13224 + C3458 * C13220 +
            (C1785 - C1784) * C13225 + (C1787 - C1786) * C13221 +
            (C31993 * C2379 - C113 * C2378) * C13226 +
            (C31993 * C2381 - C113 * C2380) * C32298) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C13223 +
            (C31993 * C136 - C113 * C123) * C13219 + (C2043 - C2044) * C13224 +
            (C2045 - C2046) * C13220 + C2065 * C13225 + C2066 * C13221 +
            C11770 * C13226 + C11771 * C32298) *
               C32232 +
           ((C144 - C145) * C13223 + (C146 - C147) * C13219 + C2383 * C13224 +
            C2384 * C13220 + C2051 * C13225 + C2052 * C13221 +
            (C2058 - C2057) * C13226 + (C2060 - C2059) * C32298) *
               C31921) *
              C31970 * C240 +
          (((C113 * C244 - C31993 * C254) * C13223 +
            (C113 * C255 - C31993 * C274) * C13219 + (C2551 - C2552) * C13224 +
            (C2553 - C2554) * C13220 + (C2555 - C2556) * C13225 +
            (C2557 - C2558) * C13221 + (C12044 - C12045) * C13226 +
            (C12046 - C12047) * C32298) *
               C32232 +
           ((C480 - C481) * C13223 + (C482 - C483) * C13219 +
            (C2217 - C2218) * C13224 + (C2219 - C2220) * C13220 +
            (C2221 - C2222) * C13225 + (C2223 - C2224) * C13221 +
            (C113 * C2539 - C31993 * C2543) * C13226 +
            (C113 * C2544 - C31993 * C2548) * C32298) *
               C31921) *
              C31970 * C241 +
          (((C31993 * C264 - C113 * C249) * C13223 +
            (C31993 * C279 - C113 * C265) * C13219 +
            (C31993 * C1122 - C113 * C1113) * C13224 +
            (C31993 * C1140 - C113 * C1123) * C13220 +
            (C31993 * C1129 - C113 * C1117) * C13225 +
            (C31993 * C1144 - C113 * C1131) * C13221 +
            (C31993 * C6847 - C113 * C6844) * C13226 +
            (C31993 * C6853 - C113 * C6848) * C32298) *
               C32232 +
           ((C31993 * C266 - C113 * C250) * C13223 +
            (C31993 * C280 - C113 * C267) * C13219 +
            (C31993 * C1124 - C113 * C1114) * C13224 +
            (C31993 * C1141 - C113 * C1125) * C13220 +
            (C31993 * C1133 - C113 * C1119) * C13225 +
            (C31993 * C1146 - C113 * C1135) * C13221 +
            (C31993 * C7199 - C113 * C7198) * C13226 +
            (C31993 * C7201 - C113 * C7200) * C32298) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
              C32282 * C264 - C819 * C249) *
                 C114 +
             (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
              C32282 * C279 - C819 * C265) *
                 C32010) *
                C814 +
            ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
             (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
                C815 +
            C869 * C32271) *
               C31970 * C471 +
           (((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
              C819 * C979 - C32282 * C985) *
                 C114 +
             (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
              C819 * C986 - C32282 * C997) *
                 C32010) *
                C814 +
            ((C1300 - C1301 + C1302 - C1303 + C1304 - C1305) * C114 +
             (C1306 - C1307 + C1308 - C1309 + C1310 - C1311) * C32010) *
                C815 +
            ((C1312 - C1313 + C1314 - C1315 + C1316 - C1317) * C114 +
             (C1318 - C1319 + C1320 - C1321 + C1322 - C1323) * C32010) *
                C32271) *
               C31970 * C472) *
              C473 +
          ((((C822 - C821 + C824 - C823 + C826 - C825) * C114 +
             (C828 - C827 + C830 - C829 + C832 - C831) * C32010) *
                C814 +
            ((C834 - C833 + C836 - C835 + C838 - C837) * C114 +
             (C840 - C839 + C842 - C841 + C844 - C843) * C32010) *
                C815 +
            ((C845 - C846 + C847 - C848 + C849 - C850) * C114 +
             (C851 - C852 + C853 - C854 + C855 - C856) * C32010) *
                C32271) *
               C31970 * C471 +
           (((C1301 - C1300 + C1303 - C1302 + C1305 - C1304) * C114 +
             (C1307 - C1306 + C1309 - C1308 + C1311 - C1310) * C32010) *
                C814 +
            ((C1313 - C1312 + C1315 - C1314 + C1317 - C1316) * C114 +
             (C1319 - C1318 + C1321 - C1320 + C1323 - C1322) * C32010) *
                C815 +
            ((C32317 * C260 - C817 * C247 + C32305 * C270 - C818 * C252 +
              C32282 * C1296 - C819 * C1295) *
                 C114 +
             (C32317 * C277 - C817 * C261 + C32305 * C282 - C818 * C271 +
              C32282 * C1298 - C819 * C1297) *
                 C32010) *
                C32271) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C114 +
             (C31993 * C136 - C113 * C123) * C32010) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C31970 * C471 +
           (((C113 * C244 - C31993 * C254) * C114 +
             (C113 * C255 - C31993 * C274) * C32010) *
                C103 +
            ((C480 - C481) * C114 + (C482 - C483) * C32010) * C104 +
            ((C484 - C485) * C114 + (C486 - C487) * C32010) * C105 +
            ((C488 - C489) * C114 + (C490 - C491) * C32010) * C106 +
            ((C492 - C493) * C114 + (C494 - C495) * C32010) * C107) *
               C31970 * C472) *
              C473 +
          ((((C145 - C144) * C114 + (C147 - C146) * C32010) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C32010) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C32010) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C32010) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C32010) * C107) *
               C31970 * C471 +
           (((C481 - C480) * C114 + (C483 - C482) * C32010) * C103 +
            ((C485 - C484) * C114 + (C487 - C486) * C32010) * C104 +
            ((C489 - C488) * C114 + (C491 - C490) * C32010) * C105 +
            ((C493 - C492) * C114 + (C495 - C494) * C32010) * C106 +
            ((C31993 * C476 - C113 * C475) * C114 +
             (C31993 * C478 - C113 * C477) * C32010) *
                C107) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
              C32282 * C264 - C5283 * C249) *
                 C114 +
             (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
              C32282 * C279 - C5283 * C265) *
                 C32010) *
                C32314 +
            ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
             (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
                C32301 +
            C5333 * C32271) *
               C31970 * C471 +
           (((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
              C5283 * C979 - C32282 * C985) *
                 C114 +
             (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
              C5283 * C986 - C32282 * C997) *
                 C32010) *
                C32314 +
            ((C5700 - C5701 + C5702 - C5703 + C5704 - C5705) * C114 +
             (C5706 - C5707 + C5708 - C5709 + C5710 - C5711) * C32010) *
                C32301 +
            ((C5712 - C5713 + C5714 - C5715 + C5716 - C5717) * C114 +
             (C5718 - C5719 + C5720 - C5721 + C5722 - C5723) * C32010) *
                C32271) *
               C31970 * C472) *
              C473 +
          ((((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C114 +
             (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32010) *
                C32314 +
            ((C5298 - C5297 + C5300 - C5299 + C5302 - C5301) * C114 +
             (C5304 - C5303 + C5306 - C5305 + C5308 - C5307) * C32010) *
                C32301 +
            ((C5309 - C5310 + C5311 - C5312 + C5313 - C5314) * C114 +
             (C5315 - C5316 + C5317 - C5318 + C5319 - C5320) * C32010) *
                C32271) *
               C31970 * C471 +
           (((C5701 - C5700 + C5703 - C5702 + C5705 - C5704) * C114 +
             (C5707 - C5706 + C5709 - C5708 + C5711 - C5710) * C32010) *
                C32314 +
            ((C5713 - C5712 + C5715 - C5714 + C5717 - C5716) * C114 +
             (C5719 - C5718 + C5721 - C5720 + C5723 - C5722) * C32010) *
                C32301 +
            ((C5275 * C260 - C5281 * C247 + C5276 * C270 - C5282 * C252 +
              C32282 * C1296 - C5283 * C1295) *
                 C114 +
             (C5275 * C277 - C5281 * C261 + C5276 * C282 - C5282 * C271 +
              C32282 * C1298 - C5283 * C1297) *
                 C32010) *
                C32271) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
             C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
             C6105 * C991 - C6111 * C982) *
                C114 +
            (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
             C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
             C6105 * C1000 - C6111 * C992) *
                C32010) *
               C31911 * C31970 * C471 +
           ((C6107 * C244 - C6101 * C254 + C6108 * C249 - C6102 * C264 +
             C6109 * C979 - C6103 * C985 + C6110 * C982 - C6104 * C991 +
             C6111 * C6174 - C6105 * C6176) *
                C114 +
            (C6107 * C255 - C6101 * C274 + C6108 * C265 - C6102 * C279 +
             C6109 * C986 - C6103 * C997 + C6110 * C992 - C6104 * C1000 +
             C6111 * C6177 - C6105 * C6180) *
                C32010) *
               C31911 * C31970 * C472) *
              C473 +
          (((C6107 * C116 - C6101 * C124 + C6108 * C245 - C6102 * C256 +
             C6109 * C250 - C6103 * C266 + C6110 * C980 - C6104 * C987 +
             C6111 * C983 - C6105 * C993) *
                C114 +
            (C6107 * C125 - C6101 * C137 + C6108 * C257 - C6102 * C275 +
             C6109 * C267 - C6103 * C280 + C6110 * C988 - C6104 * C998 +
             C6111 * C994 - C6105 * C1001) *
                C32010) *
               C31911 * C31970 * C471 +
           ((C6101 * C256 - C6107 * C245 + C6102 * C266 - C6108 * C250 +
             C6103 * C987 - C6109 * C980 + C6104 * C993 - C6110 * C983 +
             C6105 * C6339 - C6111 * C6338) *
                C114 +
            (C6101 * C275 - C6107 * C257 + C6102 * C280 - C6108 * C267 +
             C6103 * C998 - C6109 * C988 + C6104 * C1001 - C6110 * C994 +
             C6105 * C6341 - C6111 * C6340) *
                C32010) *
               C31911 * C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C10043 +
             (C31993 * C136 - C113 * C123) * C10040 + (C2043 - C2044) * C10044 +
             (C2045 - C2046) * C10041 + C2065 * C10045 + C2066 * C32285) *
                C32314 +
            ((C144 - C145) * C10043 + (C146 - C147) * C10040 + C2383 * C10044 +
             C2384 * C10041 + C2051 * C10045 + C2052 * C32285) *
                C32301 +
            C10057 * C32271) *
               C31970 * C471 +
           (((C113 * C244 - C31993 * C254) * C10043 +
             (C113 * C255 - C31993 * C274) * C10040 + (C2551 - C2552) * C10044 +
             (C2553 - C2554) * C10041 + (C2555 - C2556) * C10045 +
             (C2557 - C2558) * C32285) *
                C32314 +
            ((C480 - C481) * C10043 + (C482 - C483) * C10040 +
             (C2217 - C2218) * C10044 + (C2219 - C2220) * C10041 +
             (C2221 - C2222) * C10045 + (C2223 - C2224) * C32285) *
                C32301 +
            ((C484 - C485) * C10043 + (C486 - C487) * C10040 +
             (C2225 - C2226) * C10044 + (C2227 - C2228) * C10041 +
             (C2229 - C2230) * C10045 + (C2231 - C2232) * C32285) *
                C32271) *
               C31970 * C472) *
              C473 +
          ((((C145 - C144) * C10043 + (C147 - C146) * C10040 + C2385 * C10044 +
             C2386 * C10041 + C2387 * C10045 + C2388 * C32285) *
                C32314 +
            ((C149 - C148) * C10043 + (C151 - C150) * C10040 + C2389 * C10044 +
             C2390 * C10041 + C2391 * C10045 + C2392 * C32285) *
                C32301 +
            ((C153 - C152) * C10043 + (C155 - C154) * C10040 + C3927 * C10044 +
             C3928 * C10041 + (C1784 - C1785) * C10045 +
             (C1786 - C1787) * C32285) *
                C32271) *
               C31970 * C471 +
           (((C481 - C480) * C10043 + (C483 - C482) * C10040 +
             (C2218 - C2217) * C10044 + (C2220 - C2219) * C10041 +
             (C2222 - C2221) * C10045 + (C2224 - C2223) * C32285) *
                C32314 +
            ((C485 - C484) * C10043 + (C487 - C486) * C10040 +
             (C2226 - C2225) * C10044 + (C2228 - C2227) * C10041 +
             (C2230 - C2229) * C10045 + (C2232 - C2231) * C32285) *
                C32301 +
            ((C489 - C488) * C10043 + (C491 - C490) * C10040 +
             (C3794 - C3793) * C10044 + (C3796 - C3795) * C10041 +
             (C31993 * C2213 - C113 * C2212) * C10045 +
             (C31993 * C2215 - C113 * C2214) * C32285) *
                C32271) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C10043 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C10040 +
            (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C10044 +
            (C11052 - C11053 + C11054 - C11055 + C11056 - C11057) * C10041 +
            C11090 * C10045 + C11091 * C32285) *
               C31911 * C31970 * C471 +
           ((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
             C819 * C979 - C32282 * C985) *
                C10043 +
            (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
             C819 * C986 - C32282 * C997) *
                C10040 +
            (C817 * C681 - C32317 * C686 + C818 * C1113 - C32305 * C1122 +
             C819 * C1643 - C32282 * C1646) *
                C10044 +
            (C817 * C687 - C32317 * C696 + C818 * C1123 - C32305 * C1140 +
             C819 * C1647 - C32282 * C1652) *
                C10041 +
            (C817 * C1116 - C32317 * C1128 + C818 * C1117 - C32305 * C1129 +
             C819 * C6245 - C32282 * C6249) *
                C10045 +
            (C817 * C1130 - C32317 * C1143 + C818 * C1131 - C32305 * C1144 +
             C819 * C6251 - C32282 * C6254) *
                C32285) *
               C31911 * C31970 * C472) *
              C473 +
          (((C822 - C821 + C824 - C823 + C826 - C825) * C10043 +
            (C828 - C827 + C830 - C829 + C832 - C831) * C10040 +
            (C1474 - C1475 + C1476 - C1477 + C1478 - C1479) * C10044 +
            (C1480 - C1481 + C1482 - C1483 + C1484 - C1485) * C10041 +
            (C817 * C355 - C32317 * C371 + C818 * C1118 - C32305 * C1132 +
             C819 * C1119 - C32282 * C1133) *
                C10045 +
            (C817 * C372 - C32317 * C385 + C818 * C1134 - C32305 * C1145 +
             C819 * C1135 - C32282 * C1146) *
                C32285) *
               C31911 * C31970 * C471 +
           ((C1301 - C1300 + C1303 - C1302 + C1305 - C1304) * C10043 +
            (C1307 - C1306 + C1309 - C1308 + C1311 - C1310) * C10040 +
            (C32317 * C688 - C817 * C682 + C32305 * C1124 - C818 * C1114 +
             C32282 * C1648 - C819 * C1644) *
                C10044 +
            (C32317 * C697 - C817 * C689 + C32305 * C1141 - C818 * C1125 +
             C32282 * C1653 - C819 * C1649) *
                C10041 +
            (C32317 * C1132 - C817 * C1118 + C32305 * C1133 - C818 * C1119 +
             C32282 * C7049 - C819 * C7048) *
                C10045 +
            (C32317 * C1145 - C817 * C1134 + C32305 * C1146 - C818 * C1135 +
             C32282 * C7051 - C819 * C7050) *
                C32285) *
               C31911 * C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
              C32282 * C264 - C819 * C249) *
                 C114 +
             (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
              C32282 * C279 - C819 * C265) *
                 C32010) *
                C814 +
            ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
             (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
                C815 +
            C869 * C32271) *
               C577 +
           (((C817 * C349 - C32317 * C359 + C818 * C681 - C32305 * C686 +
              C819 * C1113 - C32282 * C1122) *
                 C114 +
             (C817 * C360 - C32317 * C379 + C818 * C687 - C32305 * C696 +
              C819 * C1123 - C32282 * C1140) *
                 C32010) *
                C814 +
            ((C1474 - C1475 + C1476 - C1477 + C1478 - C1479) * C114 +
             (C1480 - C1481 + C1482 - C1483 + C1484 - C1485) * C32010) *
                C815 +
            ((C1486 - C1487 + C1488 - C1489 + C1490 - C1491) * C114 +
             (C1492 - C1493 + C1494 - C1495 + C1496 - C1497) * C32010) *
                C32271) *
               C578) *
              C471 +
          ((((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
              C819 * C979 - C32282 * C985) *
                 C114 +
             (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
              C819 * C986 - C32282 * C997) *
                 C32010) *
                C814 +
            ((C1300 - C1301 + C1302 - C1303 + C1304 - C1305) * C114 +
             (C1306 - C1307 + C1308 - C1309 + C1310 - C1311) * C32010) *
                C815 +
            ((C1312 - C1313 + C1314 - C1315 + C1316 - C1317) * C114 +
             (C1318 - C1319 + C1320 - C1321 + C1322 - C1323) * C32010) *
                C32271) *
               C577 +
           (((C32317 * C686 - C817 * C681 + C32305 * C1122 - C818 * C1113 +
              C32282 * C1646 - C819 * C1643) *
                 C114 +
             (C32317 * C696 - C817 * C687 + C32305 * C1140 - C818 * C1123 +
              C32282 * C1652 - C819 * C1647) *
                 C32010) *
                C814 +
            ((C32317 * C688 - C817 * C682 + C32305 * C1124 - C818 * C1114 +
              C32282 * C1648 - C819 * C1644) *
                 C114 +
             (C32317 * C697 - C817 * C689 + C32305 * C1141 - C818 * C1125 +
              C32282 * C1653 - C819 * C1649) *
                 C32010) *
                C815 +
            ((C32317 * C690 - C817 * C683 + C32305 * C1126 - C818 * C1115 +
              C32282 * C1650 - C819 * C1645) *
                 C114 +
             (C32317 * C698 - C817 * C691 + C32305 * C1142 - C818 * C1127 +
              C32282 * C1654 - C819 * C1651) *
                 C32010) *
                C32271) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C114 +
             (C31993 * C136 - C113 * C123) * C32010) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C577 +
           (((C113 * C349 - C31993 * C359) * C114 +
             (C113 * C360 - C31993 * C379) * C32010) *
                C103 +
            ((C584 - C585) * C114 + (C586 - C587) * C32010) * C104 +
            ((C588 - C589) * C114 + (C590 - C591) * C32010) * C105 +
            ((C592 - C593) * C114 + (C594 - C595) * C32010) * C106 +
            ((C596 - C597) * C114 + (C598 - C599) * C32010) * C107) *
               C578) *
              C471 +
          ((((C113 * C244 - C31993 * C254) * C114 +
             (C113 * C255 - C31993 * C274) * C32010) *
                C103 +
            ((C480 - C481) * C114 + (C482 - C483) * C32010) * C104 +
            ((C484 - C485) * C114 + (C486 - C487) * C32010) * C105 +
            ((C488 - C489) * C114 + (C490 - C491) * C32010) * C106 +
            ((C492 - C493) * C114 + (C494 - C495) * C32010) * C107) *
               C577 +
           (((C31993 * C686 - C113 * C681) * C114 +
             (C31993 * C696 - C113 * C687) * C32010) *
                C103 +
            ((C31993 * C688 - C113 * C682) * C114 +
             (C31993 * C697 - C113 * C689) * C32010) *
                C104 +
            ((C31993 * C690 - C113 * C683) * C114 +
             (C31993 * C698 - C113 * C691) * C32010) *
                C105 +
            ((C31993 * C692 - C113 * C684) * C114 +
             (C31993 * C699 - C113 * C693) * C32010) *
                C106 +
            ((C31993 * C694 - C113 * C685) * C114 +
             (C31993 * C700 - C113 * C695) * C32010) *
                C107) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
              C32282 * C264 - C5283 * C249) *
                 C114 +
             (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
              C32282 * C279 - C5283 * C265) *
                 C32010) *
                C32314 +
            ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
             (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
                C32301 +
            C5333 * C32271) *
               C577 +
           (((C5281 * C349 - C5275 * C359 + C5282 * C681 - C5276 * C686 +
              C5283 * C1113 - C32282 * C1122) *
                 C114 +
             (C5281 * C360 - C5275 * C379 + C5282 * C687 - C5276 * C696 +
              C5283 * C1123 - C32282 * C1140) *
                 C32010) *
                C32314 +
            ((C5870 - C5871 + C5872 - C5873 + C5874 - C5875) * C114 +
             (C5876 - C5877 + C5878 - C5879 + C5880 - C5881) * C32010) *
                C32301 +
            ((C5882 - C5883 + C5884 - C5885 + C5886 - C5887) * C114 +
             (C5888 - C5889 + C5890 - C5891 + C5892 - C5893) * C32010) *
                C32271) *
               C578) *
              C471 +
          ((((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
              C5283 * C979 - C32282 * C985) *
                 C114 +
             (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
              C5283 * C986 - C32282 * C997) *
                 C32010) *
                C32314 +
            ((C5700 - C5701 + C5702 - C5703 + C5704 - C5705) * C114 +
             (C5706 - C5707 + C5708 - C5709 + C5710 - C5711) * C32010) *
                C32301 +
            ((C5712 - C5713 + C5714 - C5715 + C5716 - C5717) * C114 +
             (C5718 - C5719 + C5720 - C5721 + C5722 - C5723) * C32010) *
                C32271) *
               C577 +
           (((C5275 * C686 - C5281 * C681 + C5276 * C1122 - C5282 * C1113 +
              C32282 * C1646 - C5283 * C1643) *
                 C114 +
             (C5275 * C696 - C5281 * C687 + C5276 * C1140 - C5282 * C1123 +
              C32282 * C1652 - C5283 * C1647) *
                 C32010) *
                C32314 +
            ((C5275 * C688 - C5281 * C682 + C5276 * C1124 - C5282 * C1114 +
              C32282 * C1648 - C5283 * C1644) *
                 C114 +
             (C5275 * C697 - C5281 * C689 + C5276 * C1141 - C5282 * C1125 +
              C32282 * C1653 - C5283 * C1649) *
                 C32010) *
                C32301 +
            ((C5275 * C690 - C5281 * C683 + C5276 * C1126 - C5282 * C1115 +
              C32282 * C1650 - C5283 * C1645) *
                 C114 +
             (C5275 * C698 - C5281 * C691 + C5276 * C1142 - C5282 * C1127 +
              C32282 * C1654 - C5283 * C1651) *
                 C32010) *
                C32271) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
             C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
             C6105 * C991 - C6111 * C982) *
                C114 +
            (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
             C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
             C6105 * C1000 - C6111 * C992) *
                C32010) *
               C31911 * C577 +
           ((C6107 * C349 - C6101 * C359 + C6108 * C681 - C6102 * C686 +
             C6109 * C1113 - C6103 * C1122 + C6110 * C1643 - C6104 * C1646 +
             C6111 * C6244 - C6105 * C6247) *
                C114 +
            (C6107 * C360 - C6101 * C379 + C6108 * C687 - C6102 * C696 +
             C6109 * C1123 - C6103 * C1140 + C6110 * C1647 - C6104 * C1652 +
             C6111 * C6248 - C6105 * C6253) *
                C32010) *
               C31911 * C578) *
              C471 +
          (((C6107 * C244 - C6101 * C254 + C6108 * C249 - C6102 * C264 +
             C6109 * C979 - C6103 * C985 + C6110 * C982 - C6104 * C991 +
             C6111 * C6174 - C6105 * C6176) *
                C114 +
            (C6107 * C255 - C6101 * C274 + C6108 * C265 - C6102 * C279 +
             C6109 * C986 - C6103 * C997 + C6110 * C992 - C6104 * C1000 +
             C6111 * C6177 - C6105 * C6180) *
                C32010) *
               C31911 * C577 +
           ((C6101 * C686 - C6107 * C681 + C6102 * C1122 - C6108 * C1113 +
             C6103 * C1646 - C6109 * C1643 + C6104 * C6247 - C6110 * C6244 +
             C6105 * C6511 - C6111 * C6510) *
                C114 +
            (C6101 * C696 - C6107 * C687 + C6102 * C1140 - C6108 * C1123 +
             C6103 * C1652 - C6109 * C1647 + C6104 * C6253 - C6110 * C6248 +
             C6105 * C6513 - C6111 * C6512) *
                C32010) *
               C31911 * C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C10043 +
             (C31993 * C136 - C113 * C123) * C10040 + (C2043 - C2044) * C10044 +
             (C2045 - C2046) * C10041 + C2065 * C10045 + C2066 * C32285) *
                C32314 +
            ((C144 - C145) * C10043 + (C146 - C147) * C10040 + C2383 * C10044 +
             C2384 * C10041 + C2051 * C10045 + C2052 * C32285) *
                C32301 +
            C10057 * C32271) *
               C577 +
           (((C2044 - C2043) * C10043 + (C2046 - C2045) * C10040 +
             (C2048 - C2047) * C10044 + (C2050 - C2049) * C10041 +
             (C2053 - C2054) * C10045 + (C2055 - C2056) * C32285) *
                C32314 +
            (C2385 * C10043 + C2386 * C10040 + C2387 * C10044 + C2388 * C10041 +
             (C2057 - C2058) * C10045 + (C2059 - C2060) * C32285) *
                C32301 +
            (C2389 * C10043 + C2390 * C10040 + C2391 * C10044 + C2392 * C10041 +
             (C2061 - C2062) * C10045 + (C2063 - C2064) * C32285) *
                C32271) *
               C578) *
              C471 +
          ((((C113 * C244 - C31993 * C254) * C10043 +
             (C113 * C255 - C31993 * C274) * C10040 + (C2551 - C2552) * C10044 +
             (C2553 - C2554) * C10041 + (C2555 - C2556) * C10045 +
             (C2557 - C2558) * C32285) *
                C32314 +
            ((C480 - C481) * C10043 + (C482 - C483) * C10040 +
             (C2217 - C2218) * C10044 + (C2219 - C2220) * C10041 +
             (C2221 - C2222) * C10045 + (C2223 - C2224) * C32285) *
                C32301 +
            ((C484 - C485) * C10043 + (C486 - C487) * C10040 +
             (C2225 - C2226) * C10044 + (C2227 - C2228) * C10041 +
             (C2229 - C2230) * C10045 + (C2231 - C2232) * C32285) *
                C32271) *
               C577 +
           (((C2552 - C2551) * C10043 + (C2554 - C2553) * C10040 +
             (C2556 - C2555) * C10044 + (C2558 - C2557) * C10041 +
             (C31993 * C2541 - C113 * C2538) * C10045 +
             (C31993 * C2547 - C113 * C2542) * C32285) *
                C32314 +
            ((C2218 - C2217) * C10043 + (C2220 - C2219) * C10040 +
             (C2222 - C2221) * C10044 + (C2224 - C2223) * C10041 +
             (C31993 * C2543 - C113 * C2539) * C10045 +
             (C31993 * C2548 - C113 * C2544) * C32285) *
                C32301 +
            ((C2226 - C2225) * C10043 + (C2228 - C2227) * C10040 +
             (C2230 - C2229) * C10044 + (C2232 - C2231) * C10041 +
             (C31993 * C2545 - C113 * C2540) * C10045 +
             (C31993 * C2549 - C113 * C2546) * C32285) *
                C32271) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C10043 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C10040 +
            (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C10044 +
            (C11052 - C11053 + C11054 - C11055 + C11056 - C11057) * C10041 +
            C11090 * C10045 + C11091 * C32285) *
               C31911 * C577 +
           ((C11047 - C11046 + C11049 - C11048 + C11051 - C11050) * C10043 +
            (C11053 - C11052 + C11055 - C11054 + C11057 - C11056) * C10040 +
            (C11059 - C11058 + C11061 - C11060 + C11063 - C11062) * C10044 +
            (C11065 - C11064 + C11067 - C11066 + C11069 - C11068) * C10041 +
            (C11070 - C11071 + C11072 - C11073 + C11074 - C11075) * C10045 +
            (C11076 - C11077 + C11078 - C11079 + C11080 - C11081) * C32285) *
               C31911 * C578) *
              C471 +
          (((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
             C819 * C979 - C32282 * C985) *
                C10043 +
            (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
             C819 * C986 - C32282 * C997) *
                C10040 +
            (C11542 - C11543 + C11544 - C11545 + C11546 - C11547) * C10044 +
            (C11548 - C11549 + C11550 - C11551 + C11552 - C11553) * C10041 +
            (C11554 - C11555 + C11556 - C11557 + C11558 - C11559) * C10045 +
            (C11560 - C11561 + C11562 - C11563 + C11564 - C11565) * C32285) *
               C31911 * C577 +
           ((C11543 - C11542 + C11545 - C11544 + C11547 - C11546) * C10043 +
            (C11549 - C11548 + C11551 - C11550 + C11553 - C11552) * C10040 +
            (C11555 - C11554 + C11557 - C11556 + C11559 - C11558) * C10044 +
            (C11561 - C11560 + C11563 - C11562 + C11565 - C11564) * C10041 +
            (C32317 * C2541 - C817 * C2538 + C32305 * C6847 - C818 * C6844 +
             C32282 * C7361 - C819 * C7360) *
                C10045 +
            (C32317 * C2547 - C817 * C2542 + C32305 * C6853 - C818 * C6848 +
             C32282 * C7363 - C819 * C7362) *
                C32285) *
               C31911 * C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             ((((C31993 * C122 - C113 * C115) * C114 +
                (C31993 * C136 - C113 * C123) * C32010) *
                   C103 +
               ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
               C176 * C105 + C177 * C106 + C178 * C107) *
                  C31970 * C31956 * C110 +
              (((C145 - C144) * C114 + (C147 - C146) * C32010) * C103 +
               ((C149 - C148) * C114 + (C151 - C150) * C32010) * C104 +
               ((C153 - C152) * C114 + (C155 - C154) * C32010) * C105 +
               ((C157 - C156) * C114 + (C159 - C158) * C32010) * C106 +
               ((C160 - C161) * C114 + (C162 - C163) * C32010) * C107) *
                  C31970 * C31956 * C111 +
              (C176 * C103 + C177 * C104 + C178 * C105 +
               ((C161 - C160) * C114 + (C163 - C162) * C32010) * C106 +
               ((C31993 * C134 - C113 * C121) * C114 +
                (C31993 * C142 - C113 * C135) * C32010) *
                   C107) *
                  C31970 * C31956 * C112) +
         std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             ((((C31993 * C122 - C113 * C115) * C114 +
                (C31993 * C136 - C113 * C123) * C32010) *
                   C103 +
               ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
               C176 * C105 + C177 * C106 + C178 * C107) *
                  C31970 * C240 +
              (((C113 * C244 - C31993 * C254) * C114 +
                (C113 * C255 - C31993 * C274) * C32010) *
                   C103 +
               ((C113 * C245 - C31993 * C256) * C114 +
                (C113 * C257 - C31993 * C275) * C32010) *
                   C104 +
               ((C113 * C246 - C31993 * C258) * C114 +
                (C113 * C259 - C31993 * C276) * C32010) *
                   C105 +
               ((C113 * C247 - C31993 * C260) * C114 +
                (C113 * C261 - C31993 * C277) * C32010) *
                   C106 +
               ((C113 * C248 - C31993 * C262) * C114 +
                (C113 * C263 - C31993 * C278) * C32010) *
                   C107) *
                  C31970 * C241 +
              (((C31993 * C264 - C113 * C249) * C114 +
                (C31993 * C279 - C113 * C265) * C32010) *
                   C103 +
               ((C31993 * C266 - C113 * C250) * C114 +
                (C31993 * C280 - C113 * C267) * C32010) *
                   C104 +
               ((C31993 * C268 - C113 * C251) * C114 +
                (C31993 * C281 - C113 * C269) * C32010) *
                   C105 +
               ((C31993 * C270 - C113 * C252) * C114 +
                (C31993 * C282 - C113 * C271) * C32010) *
                   C106 +
               ((C31993 * C272 - C113 * C253) * C114 +
                (C31993 * C283 - C113 * C273) * C32010) *
                   C107) *
                  C31970 * C242) *
             C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C114 +
            (C31993 * C136 - C113 * C123) * C32010) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C346 +
          (((C113 * C349 - C31993 * C359) * C114 +
            (C113 * C360 - C31993 * C379) * C32010) *
               C103 +
           ((C113 * C350 - C31993 * C361) * C114 +
            (C113 * C362 - C31993 * C380) * C32010) *
               C104 +
           ((C113 * C351 - C31993 * C363) * C114 +
            (C113 * C364 - C31993 * C381) * C32010) *
               C105 +
           ((C113 * C352 - C31993 * C365) * C114 +
            (C113 * C366 - C31993 * C382) * C32010) *
               C106 +
           ((C113 * C353 - C31993 * C367) * C114 +
            (C113 * C368 - C31993 * C383) * C32010) *
               C107) *
              C347 +
          (((C31993 * C369 - C113 * C354) * C114 +
            (C31993 * C384 - C113 * C370) * C32010) *
               C103 +
           ((C31993 * C371 - C113 * C355) * C114 +
            (C31993 * C385 - C113 * C372) * C32010) *
               C104 +
           ((C31993 * C373 - C113 * C356) * C114 +
            (C31993 * C386 - C113 * C374) * C32010) *
               C105 +
           ((C31993 * C375 - C113 * C357) * C114 +
            (C31993 * C387 - C113 * C376) * C32010) *
               C106 +
           ((C31993 * C377 - C113 * C358) * C114 +
            (C31993 * C388 - C113 * C378) * C32010) *
               C107) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C114 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C32010) *
               C814 +
           ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
            (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
               C815 +
           C869 * C32271) *
              C31970 * C31956 * C110 +
          (((C822 - C821 + C824 - C823 + C826 - C825) * C114 +
            (C828 - C827 + C830 - C829 + C832 - C831) * C32010) *
               C814 +
           ((C834 - C833 + C836 - C835 + C838 - C837) * C114 +
            (C840 - C839 + C842 - C841 + C844 - C843) * C32010) *
               C815 +
           ((C845 - C846 + C847 - C848 + C849 - C850) * C114 +
            (C851 - C852 + C853 - C854 + C855 - C856) * C32010) *
               C32271) *
              C31970 * C31956 * C111 +
          (C869 * C814 +
           ((C846 - C845 + C848 - C847 + C850 - C849) * C114 +
            (C852 - C851 + C854 - C853 + C856 - C855) * C32010) *
               C815 +
           ((C32317 * C130 - C817 * C119 + C32305 * C262 - C818 * C248 +
             C32282 * C272 - C819 * C253) *
                C114 +
            (C32317 * C140 - C817 * C131 + C32305 * C278 - C818 * C263 +
             C32282 * C283 - C819 * C273) *
                C32010) *
               C32271) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C114 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C32010) *
               C814 +
           ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
            (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
               C815 +
           C869 * C32271) *
              C31970 * C240 +
          (((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
             C819 * C979 - C32282 * C985) *
                C114 +
            (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
             C819 * C986 - C32282 * C997) *
                C32010) *
               C814 +
           ((C817 * C245 - C32317 * C256 + C818 * C250 - C32305 * C266 +
             C819 * C980 - C32282 * C987) *
                C114 +
            (C817 * C257 - C32317 * C275 + C818 * C267 - C32305 * C280 +
             C819 * C988 - C32282 * C998) *
                C32010) *
               C815 +
           ((C817 * C246 - C32317 * C258 + C818 * C251 - C32305 * C268 +
             C819 * C981 - C32282 * C989) *
                C114 +
            (C817 * C259 - C32317 * C276 + C818 * C269 - C32305 * C281 +
             C819 * C990 - C32282 * C999) *
                C32010) *
               C32271) *
              C31970 * C241 +
          (((C32317 * C264 - C817 * C249 + C32305 * C985 - C818 * C979 +
             C32282 * C991 - C819 * C982) *
                C114 +
            (C32317 * C279 - C817 * C265 + C32305 * C997 - C818 * C986 +
             C32282 * C1000 - C819 * C992) *
                C32010) *
               C814 +
           ((C32317 * C266 - C817 * C250 + C32305 * C987 - C818 * C980 +
             C32282 * C993 - C819 * C983) *
                C114 +
            (C32317 * C280 - C817 * C267 + C32305 * C998 - C818 * C988 +
             C32282 * C1001 - C819 * C994) *
                C32010) *
               C815 +
           ((C32317 * C268 - C817 * C251 + C32305 * C989 - C818 * C981 +
             C32282 * C995 - C819 * C984) *
                C114 +
            (C32317 * C281 - C817 * C269 + C32305 * C999 - C818 * C990 +
             C32282 * C1002 - C819 * C996) *
                C32010) *
               C32271) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C114 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C32010) *
               C814 +
           ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
            (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
               C815 +
           C869 * C32271) *
              C346 +
          (((C817 * C349 - C32317 * C359 + C818 * C681 - C32305 * C686 +
             C819 * C1113 - C32282 * C1122) *
                C114 +
            (C817 * C360 - C32317 * C379 + C818 * C687 - C32305 * C696 +
             C819 * C1123 - C32282 * C1140) *
                C32010) *
               C814 +
           ((C817 * C350 - C32317 * C361 + C818 * C682 - C32305 * C688 +
             C819 * C1114 - C32282 * C1124) *
                C114 +
            (C817 * C362 - C32317 * C380 + C818 * C689 - C32305 * C697 +
             C819 * C1125 - C32282 * C1141) *
                C32010) *
               C815 +
           ((C817 * C351 - C32317 * C363 + C818 * C683 - C32305 * C690 +
             C819 * C1115 - C32282 * C1126) *
                C114 +
            (C817 * C364 - C32317 * C381 + C818 * C691 - C32305 * C698 +
             C819 * C1127 - C32282 * C1142) *
                C32010) *
               C32271) *
              C347 +
          (((C32317 * C369 - C817 * C354 + C32305 * C1128 - C818 * C1116 +
             C32282 * C1129 - C819 * C1117) *
                C114 +
            (C32317 * C384 - C817 * C370 + C32305 * C1143 - C818 * C1130 +
             C32282 * C1144 - C819 * C1131) *
                C32010) *
               C814 +
           ((C32317 * C371 - C817 * C355 + C32305 * C1132 - C818 * C1118 +
             C32282 * C1133 - C819 * C1119) *
                C114 +
            (C32317 * C385 - C817 * C372 + C32305 * C1145 - C818 * C1134 +
             C32282 * C1146 - C819 * C1135) *
                C32010) *
               C815 +
           ((C32317 * C373 - C817 * C356 + C32305 * C1136 - C818 * C1120 +
             C32282 * C1137 - C819 * C1121) *
                C114 +
            (C32317 * C386 - C817 * C374 + C32305 * C1147 - C818 * C1138 +
             C32282 * C1148 - C819 * C1139) *
                C32010) *
               C32271) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C114 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32010) *
               C32314 +
           ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
            (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
               C32301 +
           C5333 * C32271) *
              C31970 * C31956 * C110 +
          (((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C114 +
            (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32010) *
               C32314 +
           ((C5298 - C5297 + C5300 - C5299 + C5302 - C5301) * C114 +
            (C5304 - C5303 + C5306 - C5305 + C5308 - C5307) * C32010) *
               C32301 +
           ((C5309 - C5310 + C5311 - C5312 + C5313 - C5314) * C114 +
            (C5315 - C5316 + C5317 - C5318 + C5319 - C5320) * C32010) *
               C32271) *
              C31970 * C31956 * C111 +
          (C5333 * C32314 +
           ((C5310 - C5309 + C5312 - C5311 + C5314 - C5313) * C114 +
            (C5316 - C5315 + C5318 - C5317 + C5320 - C5319) * C32010) *
               C32301 +
           ((C5275 * C130 - C5281 * C119 + C5276 * C262 - C5282 * C248 +
             C32282 * C272 - C5283 * C253) *
                C114 +
            (C5275 * C140 - C5281 * C131 + C5276 * C278 - C5282 * C263 +
             C32282 * C283 - C5283 * C273) *
                C32010) *
               C32271) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C114 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32010) *
               C32314 +
           ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
            (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
               C32301 +
           C5333 * C32271) *
              C31970 * C240 +
          (((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
             C5283 * C979 - C32282 * C985) *
                C114 +
            (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
             C5283 * C986 - C32282 * C997) *
                C32010) *
               C32314 +
           ((C5281 * C245 - C5275 * C256 + C5282 * C250 - C5276 * C266 +
             C5283 * C980 - C32282 * C987) *
                C114 +
            (C5281 * C257 - C5275 * C275 + C5282 * C267 - C5276 * C280 +
             C5283 * C988 - C32282 * C998) *
                C32010) *
               C32301 +
           ((C5281 * C246 - C5275 * C258 + C5282 * C251 - C5276 * C268 +
             C5283 * C981 - C32282 * C989) *
                C114 +
            (C5281 * C259 - C5275 * C276 + C5282 * C269 - C5276 * C281 +
             C5283 * C990 - C32282 * C999) *
                C32010) *
               C32271) *
              C31970 * C241 +
          (((C5275 * C264 - C5281 * C249 + C5276 * C985 - C5282 * C979 +
             C32282 * C991 - C5283 * C982) *
                C114 +
            (C5275 * C279 - C5281 * C265 + C5276 * C997 - C5282 * C986 +
             C32282 * C1000 - C5283 * C992) *
                C32010) *
               C32314 +
           ((C5275 * C266 - C5281 * C250 + C5276 * C987 - C5282 * C980 +
             C32282 * C993 - C5283 * C983) *
                C114 +
            (C5275 * C280 - C5281 * C267 + C5276 * C998 - C5282 * C988 +
             C32282 * C1001 - C5283 * C994) *
                C32010) *
               C32301 +
           ((C5275 * C268 - C5281 * C251 + C5276 * C989 - C5282 * C981 +
             C32282 * C995 - C5283 * C984) *
                C114 +
            (C5275 * C281 - C5281 * C269 + C5276 * C999 - C5282 * C990 +
             C32282 * C1002 - C5283 * C996) *
                C32010) *
               C32271) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C114 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32010) *
               C32314 +
           ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
            (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
               C32301 +
           C5333 * C32271) *
              C346 +
          (((C5281 * C349 - C5275 * C359 + C5282 * C681 - C5276 * C686 +
             C5283 * C1113 - C32282 * C1122) *
                C114 +
            (C5281 * C360 - C5275 * C379 + C5282 * C687 - C5276 * C696 +
             C5283 * C1123 - C32282 * C1140) *
                C32010) *
               C32314 +
           ((C5281 * C350 - C5275 * C361 + C5282 * C682 - C5276 * C688 +
             C5283 * C1114 - C32282 * C1124) *
                C114 +
            (C5281 * C362 - C5275 * C380 + C5282 * C689 - C5276 * C697 +
             C5283 * C1125 - C32282 * C1141) *
                C32010) *
               C32301 +
           ((C5281 * C351 - C5275 * C363 + C5282 * C683 - C5276 * C690 +
             C5283 * C1115 - C32282 * C1126) *
                C114 +
            (C5281 * C364 - C5275 * C381 + C5282 * C691 - C5276 * C698 +
             C5283 * C1127 - C32282 * C1142) *
                C32010) *
               C32271) *
              C347 +
          (((C5275 * C369 - C5281 * C354 + C5276 * C1128 - C5282 * C1116 +
             C32282 * C1129 - C5283 * C1117) *
                C114 +
            (C5275 * C384 - C5281 * C370 + C5276 * C1143 - C5282 * C1130 +
             C32282 * C1144 - C5283 * C1131) *
                C32010) *
               C32314 +
           ((C5275 * C371 - C5281 * C355 + C5276 * C1132 - C5282 * C1118 +
             C32282 * C1133 - C5283 * C1119) *
                C114 +
            (C5275 * C385 - C5281 * C372 + C5276 * C1145 - C5282 * C1134 +
             C32282 * C1146 - C5283 * C1135) *
                C32010) *
               C32301 +
           ((C5275 * C373 - C5281 * C356 + C5276 * C1136 - C5282 * C1120 +
             C32282 * C1137 - C5283 * C1121) *
                C114 +
            (C5275 * C386 - C5281 * C374 + C5276 * C1147 - C5282 * C1138 +
             C32282 * C1148 - C5283 * C1139) *
                C32010) *
               C32271) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
            C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
            C6105 * C991 - C6111 * C982) *
               C114 +
           (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
            C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
            C6105 * C1000 - C6111 * C992) *
               C32010) *
              C31911 * C31970 * C31956 * C110 +
          ((C6107 * C116 - C6101 * C124 + C6108 * C245 - C6102 * C256 +
            C6109 * C250 - C6103 * C266 + C6110 * C980 - C6104 * C987 +
            C6111 * C983 - C6105 * C993) *
               C114 +
           (C6107 * C125 - C6101 * C137 + C6108 * C257 - C6102 * C275 +
            C6109 * C267 - C6103 * C280 + C6110 * C988 - C6104 * C998 +
            C6111 * C994 - C6105 * C1001) *
               C32010) *
              C31911 * C31970 * C31956 * C111 +
          ((C6101 * C126 - C6107 * C117 + C6102 * C258 - C6108 * C246 +
            C6103 * C268 - C6109 * C251 + C6104 * C989 - C6110 * C981 +
            C6105 * C995 - C6111 * C984) *
               C114 +
           (C6101 * C138 - C6107 * C127 + C6102 * C276 - C6108 * C259 +
            C6103 * C281 - C6109 * C269 + C6104 * C999 - C6110 * C990 +
            C6105 * C1002 - C6111 * C996) *
               C32010) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
            C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
            C6105 * C991 - C6111 * C982) *
               C114 +
           (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
            C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
            C6105 * C1000 - C6111 * C992) *
               C32010) *
              C31911 * C31970 * C240 +
          ((C6107 * C244 - C6101 * C254 + C6108 * C249 - C6102 * C264 +
            C6109 * C979 - C6103 * C985 + C6110 * C982 - C6104 * C991 +
            C6111 * C6174 - C6105 * C6176) *
               C114 +
           (C6107 * C255 - C6101 * C274 + C6108 * C265 - C6102 * C279 +
            C6109 * C986 - C6103 * C997 + C6110 * C992 - C6104 * C1000 +
            C6111 * C6177 - C6105 * C6180) *
               C32010) *
              C31911 * C31970 * C241 +
          ((C6101 * C264 - C6107 * C249 + C6102 * C985 - C6108 * C979 +
            C6103 * C991 - C6109 * C982 + C6104 * C6176 - C6110 * C6174 +
            C6105 * C6178 - C6111 * C6175) *
               C114 +
           (C6101 * C279 - C6107 * C265 + C6102 * C997 - C6108 * C986 +
            C6103 * C1000 - C6109 * C992 + C6104 * C6180 - C6110 * C6177 +
            C6105 * C6181 - C6111 * C6179) *
               C32010) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
            C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
            C6105 * C991 - C6111 * C982) *
               C114 +
           (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
            C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
            C6105 * C1000 - C6111 * C992) *
               C32010) *
              C31911 * C346 +
          ((C6107 * C349 - C6101 * C359 + C6108 * C681 - C6102 * C686 +
            C6109 * C1113 - C6103 * C1122 + C6110 * C1643 - C6104 * C1646 +
            C6111 * C6244 - C6105 * C6247) *
               C114 +
           (C6107 * C360 - C6101 * C379 + C6108 * C687 - C6102 * C696 +
            C6109 * C1123 - C6103 * C1140 + C6110 * C1647 - C6104 * C1652 +
            C6111 * C6248 - C6105 * C6253) *
               C32010) *
              C31911 * C347 +
          ((C6101 * C369 - C6107 * C354 + C6102 * C1128 - C6108 * C1116 +
            C6103 * C1129 - C6109 * C1117 + C6104 * C6249 - C6110 * C6245 +
            C6105 * C6250 - C6111 * C6246) *
               C114 +
           (C6101 * C384 - C6107 * C370 + C6102 * C1143 - C6108 * C1130 +
            C6103 * C1144 - C6109 * C1131 + C6104 * C6254 - C6110 * C6251 +
            C6105 * C6255 - C6111 * C6252) *
               C32010) *
              C31911 * C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C10043 +
            (C31993 * C136 - C113 * C123) * C10040 + (C2043 - C2044) * C10044 +
            (C2045 - C2046) * C10041 + C2065 * C10045 + C2066 * C32285) *
               C32314 +
           ((C144 - C145) * C10043 + (C146 - C147) * C10040 + C2383 * C10044 +
            C2384 * C10041 + C2051 * C10045 + C2052 * C32285) *
               C32301 +
           C10057 * C32271) *
              C31970 * C31956 * C110 +
          (((C145 - C144) * C10043 + (C147 - C146) * C10040 + C2385 * C10044 +
            C2386 * C10041 + C2387 * C10045 + C2388 * C32285) *
               C32314 +
           ((C149 - C148) * C10043 + (C151 - C150) * C10040 + C2389 * C10044 +
            C2390 * C10041 + C2391 * C10045 + C2392 * C32285) *
               C32301 +
           ((C153 - C152) * C10043 + (C155 - C154) * C10040 + C3927 * C10044 +
            C3928 * C10041 + (C1784 - C1785) * C10045 +
            (C1786 - C1787) * C32285) *
               C32271) *
              C31970 * C31956 * C111 +
          (C10057 * C32314 +
           (C166 * C10043 + C167 * C10040 + C3457 * C10044 + C3458 * C10041 +
            (C1785 - C1784) * C10045 + (C1787 - C1786) * C32285) *
               C32301 +
           (C168 * C10043 + C169 * C10040 + (C597 - C596) * C10044 +
            (C599 - C598) * C10041 + (C31993 * C377 - C113 * C358) * C10045 +
            (C31993 * C388 - C113 * C378) * C32285) *
               C32271) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C10043 +
            (C31993 * C136 - C113 * C123) * C10040 + (C2043 - C2044) * C10044 +
            (C2045 - C2046) * C10041 + C2065 * C10045 + C2066 * C32285) *
               C32314 +
           ((C144 - C145) * C10043 + (C146 - C147) * C10040 + C2383 * C10044 +
            C2384 * C10041 + C2051 * C10045 + C2052 * C32285) *
               C32301 +
           C10057 * C32271) *
              C31970 * C240 +
          (((C113 * C244 - C31993 * C254) * C10043 +
            (C113 * C255 - C31993 * C274) * C10040 + (C2551 - C2552) * C10044 +
            (C2553 - C2554) * C10041 + (C2555 - C2556) * C10045 +
            (C2557 - C2558) * C32285) *
               C32314 +
           ((C480 - C481) * C10043 + (C482 - C483) * C10040 +
            (C2217 - C2218) * C10044 + (C2219 - C2220) * C10041 +
            (C2221 - C2222) * C10045 + (C2223 - C2224) * C32285) *
               C32301 +
           ((C484 - C485) * C10043 + (C486 - C487) * C10040 +
            (C2225 - C2226) * C10044 + (C2227 - C2228) * C10041 +
            (C2229 - C2230) * C10045 + (C2231 - C2232) * C32285) *
               C32271) *
              C31970 * C241 +
          (((C31993 * C264 - C113 * C249) * C10043 +
            (C31993 * C279 - C113 * C265) * C10040 +
            (C31993 * C1122 - C113 * C1113) * C10044 +
            (C31993 * C1140 - C113 * C1123) * C10041 +
            (C31993 * C1129 - C113 * C1117) * C10045 +
            (C31993 * C1144 - C113 * C1131) * C32285) *
               C32314 +
           ((C31993 * C266 - C113 * C250) * C10043 +
            (C31993 * C280 - C113 * C267) * C10040 +
            (C31993 * C1124 - C113 * C1114) * C10044 +
            (C31993 * C1141 - C113 * C1125) * C10041 +
            (C31993 * C1133 - C113 * C1119) * C10045 +
            (C31993 * C1146 - C113 * C1135) * C32285) *
               C32301 +
           ((C31993 * C268 - C113 * C251) * C10043 +
            (C31993 * C281 - C113 * C269) * C10040 +
            (C31993 * C1126 - C113 * C1115) * C10044 +
            (C31993 * C1142 - C113 * C1127) * C10041 +
            (C31993 * C1137 - C113 * C1121) * C10045 +
            (C31993 * C1148 - C113 * C1139) * C32285) *
               C32271) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C10043 +
            (C31993 * C136 - C113 * C123) * C10040 + (C2043 - C2044) * C10044 +
            (C2045 - C2046) * C10041 + C2065 * C10045 + C2066 * C32285) *
               C32314 +
           ((C144 - C145) * C10043 + (C146 - C147) * C10040 + C2383 * C10044 +
            C2384 * C10041 + C2051 * C10045 + C2052 * C32285) *
               C32301 +
           C10057 * C32271) *
              C346 +
          (((C2044 - C2043) * C10043 + (C2046 - C2045) * C10040 +
            (C2048 - C2047) * C10044 + (C2050 - C2049) * C10041 +
            (C2053 - C2054) * C10045 + (C2055 - C2056) * C32285) *
               C32314 +
           (C2385 * C10043 + C2386 * C10040 + C2387 * C10044 + C2388 * C10041 +
            (C2057 - C2058) * C10045 + (C2059 - C2060) * C32285) *
               C32301 +
           (C2389 * C10043 + C2390 * C10040 + C2391 * C10044 + C2392 * C10041 +
            (C2061 - C2062) * C10045 + (C2063 - C2064) * C32285) *
               C32271) *
              C347 +
          ((C2065 * C10043 + C2066 * C10040 + (C2054 - C2053) * C10044 +
            (C2056 - C2055) * C10041 +
            (C31993 * C2030 - C113 * C2021) * C10045 +
            (C31993 * C2039 - C113 * C2031) * C32285) *
               C32314 +
           (C2051 * C10043 + C2052 * C10040 + (C2058 - C2057) * C10044 +
            (C2060 - C2059) * C10041 +
            (C31993 * C2032 - C113 * C2022) * C10045 +
            (C31993 * C2040 - C113 * C2033) * C32285) *
               C32301 +
           (C1791 * C10043 + C1792 * C10040 + (C2062 - C2061) * C10044 +
            (C2064 - C2063) * C10041 +
            (C31993 * C2034 - C113 * C2023) * C10045 +
            (C31993 * C2041 - C113 * C2035) * C32285) *
               C32271) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
            C32282 * C264 - C819 * C249) *
               C10043 +
           (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
            C32282 * C279 - C819 * C265) *
               C10040 +
           (C32317 * C359 - C817 * C349 + C32305 * C686 - C818 * C681 +
            C32282 * C1122 - C819 * C1113) *
               C10044 +
           (C32317 * C379 - C817 * C360 + C32305 * C696 - C818 * C687 +
            C32282 * C1140 - C819 * C1123) *
               C10041 +
           (C32317 * C369 - C817 * C354 + C32305 * C1128 - C818 * C1116 +
            C32282 * C1129 - C819 * C1117) *
               C10045 +
           (C32317 * C384 - C817 * C370 + C32305 * C1143 - C818 * C1130 +
            C32282 * C1144 - C819 * C1131) *
               C32285) *
              C31911 * C31970 * C31956 * C110 +
          ((C822 - C821 + C824 - C823 + C826 - C825) * C10043 +
           (C828 - C827 + C830 - C829 + C832 - C831) * C10040 +
           (C1474 - C1475 + C1476 - C1477 + C1478 - C1479) * C10044 +
           (C1480 - C1481 + C1482 - C1483 + C1484 - C1485) * C10041 +
           (C817 * C355 - C32317 * C371 + C818 * C1118 - C32305 * C1132 +
            C819 * C1119 - C32282 * C1133) *
               C10045 +
           (C817 * C372 - C32317 * C385 + C818 * C1134 - C32305 * C1145 +
            C819 * C1135 - C32282 * C1146) *
               C32285) *
              C31911 * C31970 * C31956 * C111 +
          (C865 * C10043 + C866 * C10040 +
           (C1487 - C1486 + C1489 - C1488 + C1491 - C1490) * C10044 +
           (C1493 - C1492 + C1495 - C1494 + C1497 - C1496) * C10041 +
           (C32317 * C373 - C817 * C356 + C32305 * C1136 - C818 * C1120 +
            C32282 * C1137 - C819 * C1121) *
               C10045 +
           (C32317 * C386 - C817 * C374 + C32305 * C1147 - C818 * C1138 +
            C32282 * C1148 - C819 * C1139) *
               C32285) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
            C32282 * C264 - C819 * C249) *
               C10043 +
           (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
            C32282 * C279 - C819 * C265) *
               C10040 +
           (C32317 * C359 - C817 * C349 + C32305 * C686 - C818 * C681 +
            C32282 * C1122 - C819 * C1113) *
               C10044 +
           (C32317 * C379 - C817 * C360 + C32305 * C696 - C818 * C687 +
            C32282 * C1140 - C819 * C1123) *
               C10041 +
           (C32317 * C369 - C817 * C354 + C32305 * C1128 - C818 * C1116 +
            C32282 * C1129 - C819 * C1117) *
               C10045 +
           (C32317 * C384 - C817 * C370 + C32305 * C1143 - C818 * C1130 +
            C32282 * C1144 - C819 * C1131) *
               C32285) *
              C31911 * C31970 * C240 +
          ((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
            C819 * C979 - C32282 * C985) *
               C10043 +
           (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
            C819 * C986 - C32282 * C997) *
               C10040 +
           (C817 * C681 - C32317 * C686 + C818 * C1113 - C32305 * C1122 +
            C819 * C1643 - C32282 * C1646) *
               C10044 +
           (C817 * C687 - C32317 * C696 + C818 * C1123 - C32305 * C1140 +
            C819 * C1647 - C32282 * C1652) *
               C10041 +
           (C817 * C1116 - C32317 * C1128 + C818 * C1117 - C32305 * C1129 +
            C819 * C6245 - C32282 * C6249) *
               C10045 +
           (C817 * C1130 - C32317 * C1143 + C818 * C1131 - C32305 * C1144 +
            C819 * C6251 - C32282 * C6254) *
               C32285) *
              C31911 * C31970 * C241 +
          ((C32317 * C264 - C817 * C249 + C32305 * C985 - C818 * C979 +
            C32282 * C991 - C819 * C982) *
               C10043 +
           (C32317 * C279 - C817 * C265 + C32305 * C997 - C818 * C986 +
            C32282 * C1000 - C819 * C992) *
               C10040 +
           (C32317 * C1122 - C817 * C1113 + C32305 * C1646 - C818 * C1643 +
            C32282 * C6247 - C819 * C6244) *
               C10044 +
           (C32317 * C1140 - C817 * C1123 + C32305 * C1652 - C818 * C1647 +
            C32282 * C6253 - C819 * C6248) *
               C10041 +
           (C32317 * C1129 - C817 * C1117 + C32305 * C6249 - C818 * C6245 +
            C32282 * C6250 - C819 * C6246) *
               C10045 +
           (C32317 * C1144 - C817 * C1131 + C32305 * C6254 - C818 * C6251 +
            C32282 * C6255 - C819 * C6252) *
               C32285) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
            C32282 * C264 - C819 * C249) *
               C10043 +
           (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
            C32282 * C279 - C819 * C265) *
               C10040 +
           (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C10044 +
           (C11052 - C11053 + C11054 - C11055 + C11056 - C11057) * C10041 +
           C11090 * C10045 + C11091 * C32285) *
              C31911 * C346 +
          ((C11047 - C11046 + C11049 - C11048 + C11051 - C11050) * C10043 +
           (C11053 - C11052 + C11055 - C11054 + C11057 - C11056) * C10040 +
           (C11059 - C11058 + C11061 - C11060 + C11063 - C11062) * C10044 +
           (C11065 - C11064 + C11067 - C11066 + C11069 - C11068) * C10041 +
           (C11070 - C11071 + C11072 - C11073 + C11074 - C11075) * C10045 +
           (C11076 - C11077 + C11078 - C11079 + C11080 - C11081) * C32285) *
              C31911 * C347 +
          (C11090 * C10043 + C11091 * C10040 +
           (C11071 - C11070 + C11073 - C11072 + C11075 - C11074) * C10044 +
           (C11077 - C11076 + C11079 - C11078 + C11081 - C11080) * C10041 +
           (C32317 * C2030 - C817 * C2021 + C32305 * C6849 - C818 * C6845 +
            C32282 * C6850 - C819 * C6846) *
               C10045 +
           (C32317 * C2039 - C817 * C2031 + C32305 * C6854 - C818 * C6851 +
            C32282 * C6855 - C819 * C6852) *
               C32285) *
              C31911 * C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
              C32282 * C264 - C819 * C249) *
                 C114 +
             (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
              C32282 * C279 - C819 * C265) *
                 C32010) *
                C814 +
            ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
             (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
                C815 +
            C869 * C32271) *
               C577 +
           (((C817 * C349 - C32317 * C359 + C818 * C681 - C32305 * C686 +
              C819 * C1113 - C32282 * C1122) *
                 C114 +
             (C817 * C360 - C32317 * C379 + C818 * C687 - C32305 * C696 +
              C819 * C1123 - C32282 * C1140) *
                 C32010) *
                C814 +
            ((C1474 - C1475 + C1476 - C1477 + C1478 - C1479) * C114 +
             (C1480 - C1481 + C1482 - C1483 + C1484 - C1485) * C32010) *
                C815 +
            ((C1486 - C1487 + C1488 - C1489 + C1490 - C1491) * C114 +
             (C1492 - C1493 + C1494 - C1495 + C1496 - C1497) * C32010) *
                C32271) *
               C578) *
              C31956 * C473 +
          ((((C822 - C821 + C824 - C823 + C826 - C825) * C114 +
             (C828 - C827 + C830 - C829 + C832 - C831) * C32010) *
                C814 +
            ((C834 - C833 + C836 - C835 + C838 - C837) * C114 +
             (C840 - C839 + C842 - C841 + C844 - C843) * C32010) *
                C815 +
            ((C845 - C846 + C847 - C848 + C849 - C850) * C114 +
             (C851 - C852 + C853 - C854 + C855 - C856) * C32010) *
                C32271) *
               C577 +
           (((C1475 - C1474 + C1477 - C1476 + C1479 - C1478) * C114 +
             (C1481 - C1480 + C1483 - C1482 + C1485 - C1484) * C32010) *
                C814 +
            ((C1487 - C1486 + C1489 - C1488 + C1491 - C1490) * C114 +
             (C1493 - C1492 + C1495 - C1494 + C1497 - C1496) * C32010) *
                C815 +
            ((C32317 * C365 - C817 * C352 + C32305 * C692 - C818 * C684 +
              C32282 * C1470 - C819 * C1469) *
                 C114 +
             (C32317 * C382 - C817 * C366 + C32305 * C699 - C818 * C693 +
              C32282 * C1472 - C819 * C1471) *
                 C32010) *
                C32271) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C114 +
             (C31993 * C136 - C113 * C123) * C32010) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C577 +
           (((C113 * C349 - C31993 * C359) * C114 +
             (C113 * C360 - C31993 * C379) * C32010) *
                C103 +
            ((C584 - C585) * C114 + (C586 - C587) * C32010) * C104 +
            ((C588 - C589) * C114 + (C590 - C591) * C32010) * C105 +
            ((C592 - C593) * C114 + (C594 - C595) * C32010) * C106 +
            ((C596 - C597) * C114 + (C598 - C599) * C32010) * C107) *
               C578) *
              C31956 * C473 +
          ((((C145 - C144) * C114 + (C147 - C146) * C32010) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C32010) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C32010) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C32010) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C32010) * C107) *
               C577 +
           (((C585 - C584) * C114 + (C587 - C586) * C32010) * C103 +
            ((C589 - C588) * C114 + (C591 - C590) * C32010) * C104 +
            ((C593 - C592) * C114 + (C595 - C594) * C32010) * C105 +
            ((C597 - C596) * C114 + (C599 - C598) * C32010) * C106 +
            ((C31993 * C580 - C113 * C579) * C114 +
             (C31993 * C582 - C113 * C581) * C32010) *
                C107) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
              C32282 * C264 - C5283 * C249) *
                 C114 +
             (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
              C32282 * C279 - C5283 * C265) *
                 C32010) *
                C32314 +
            ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
             (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
                C32301 +
            C5333 * C32271) *
               C577 +
           (((C5281 * C349 - C5275 * C359 + C5282 * C681 - C5276 * C686 +
              C5283 * C1113 - C32282 * C1122) *
                 C114 +
             (C5281 * C360 - C5275 * C379 + C5282 * C687 - C5276 * C696 +
              C5283 * C1123 - C32282 * C1140) *
                 C32010) *
                C32314 +
            ((C5870 - C5871 + C5872 - C5873 + C5874 - C5875) * C114 +
             (C5876 - C5877 + C5878 - C5879 + C5880 - C5881) * C32010) *
                C32301 +
            ((C5882 - C5883 + C5884 - C5885 + C5886 - C5887) * C114 +
             (C5888 - C5889 + C5890 - C5891 + C5892 - C5893) * C32010) *
                C32271) *
               C578) *
              C31956 * C473 +
          ((((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C114 +
             (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32010) *
                C32314 +
            ((C5298 - C5297 + C5300 - C5299 + C5302 - C5301) * C114 +
             (C5304 - C5303 + C5306 - C5305 + C5308 - C5307) * C32010) *
                C32301 +
            ((C5309 - C5310 + C5311 - C5312 + C5313 - C5314) * C114 +
             (C5315 - C5316 + C5317 - C5318 + C5319 - C5320) * C32010) *
                C32271) *
               C577 +
           (((C5871 - C5870 + C5873 - C5872 + C5875 - C5874) * C114 +
             (C5877 - C5876 + C5879 - C5878 + C5881 - C5880) * C32010) *
                C32314 +
            ((C5883 - C5882 + C5885 - C5884 + C5887 - C5886) * C114 +
             (C5889 - C5888 + C5891 - C5890 + C5893 - C5892) * C32010) *
                C32301 +
            ((C5275 * C365 - C5281 * C352 + C5276 * C692 - C5282 * C684 +
              C32282 * C1470 - C5283 * C1469) *
                 C114 +
             (C5275 * C382 - C5281 * C366 + C5276 * C699 - C5282 * C693 +
              C32282 * C1472 - C5283 * C1471) *
                 C32010) *
                C32271) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
             C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
             C6105 * C991 - C6111 * C982) *
                C114 +
            (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
             C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
             C6105 * C1000 - C6111 * C992) *
                C32010) *
               C31911 * C577 +
           ((C6107 * C349 - C6101 * C359 + C6108 * C681 - C6102 * C686 +
             C6109 * C1113 - C6103 * C1122 + C6110 * C1643 - C6104 * C1646 +
             C6111 * C6244 - C6105 * C6247) *
                C114 +
            (C6107 * C360 - C6101 * C379 + C6108 * C687 - C6102 * C696 +
             C6109 * C1123 - C6103 * C1140 + C6110 * C1647 - C6104 * C1652 +
             C6111 * C6248 - C6105 * C6253) *
                C32010) *
               C31911 * C578) *
              C31956 * C473 +
          (((C6107 * C116 - C6101 * C124 + C6108 * C245 - C6102 * C256 +
             C6109 * C250 - C6103 * C266 + C6110 * C980 - C6104 * C987 +
             C6111 * C983 - C6105 * C993) *
                C114 +
            (C6107 * C125 - C6101 * C137 + C6108 * C257 - C6102 * C275 +
             C6109 * C267 - C6103 * C280 + C6110 * C988 - C6104 * C998 +
             C6111 * C994 - C6105 * C1001) *
                C32010) *
               C31911 * C577 +
           ((C6101 * C361 - C6107 * C350 + C6102 * C688 - C6108 * C682 +
             C6103 * C1124 - C6109 * C1114 + C6104 * C1648 - C6110 * C1644 +
             C6105 * C6425 - C6111 * C6424) *
                C114 +
            (C6101 * C380 - C6107 * C362 + C6102 * C697 - C6108 * C689 +
             C6103 * C1141 - C6109 * C1125 + C6104 * C1653 - C6110 * C1649 +
             C6105 * C6427 - C6111 * C6426) *
                C32010) *
               C31911 * C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C10043 +
             (C31993 * C136 - C113 * C123) * C10040 + (C2043 - C2044) * C10044 +
             (C2045 - C2046) * C10041 + C2065 * C10045 + C2066 * C32285) *
                C32314 +
            ((C144 - C145) * C10043 + (C146 - C147) * C10040 + C2383 * C10044 +
             C2384 * C10041 + C2051 * C10045 + C2052 * C32285) *
                C32301 +
            C10057 * C32271) *
               C577 +
           (((C2044 - C2043) * C10043 + (C2046 - C2045) * C10040 +
             (C2048 - C2047) * C10044 + (C2050 - C2049) * C10041 +
             (C2053 - C2054) * C10045 + (C2055 - C2056) * C32285) *
                C32314 +
            (C2385 * C10043 + C2386 * C10040 + C2387 * C10044 + C2388 * C10041 +
             (C2057 - C2058) * C10045 + (C2059 - C2060) * C32285) *
                C32301 +
            (C2389 * C10043 + C2390 * C10040 + C2391 * C10044 + C2392 * C10041 +
             (C2061 - C2062) * C10045 + (C2063 - C2064) * C32285) *
                C32271) *
               C578) *
              C31956 * C473 +
          ((((C145 - C144) * C10043 + (C147 - C146) * C10040 + C2385 * C10044 +
             C2386 * C10041 + C2387 * C10045 + C2388 * C32285) *
                C32314 +
            ((C149 - C148) * C10043 + (C151 - C150) * C10040 + C2389 * C10044 +
             C2390 * C10041 + C2391 * C10045 + C2392 * C32285) *
                C32301 +
            ((C153 - C152) * C10043 + (C155 - C154) * C10040 + C3927 * C10044 +
             C3928 * C10041 + (C1784 - C1785) * C10045 +
             (C1786 - C1787) * C32285) *
                C32271) *
               C577 +
           ((C2383 * C10043 + C2384 * C10040 + C2051 * C10044 + C2052 * C10041 +
             (C2058 - C2057) * C10045 + (C2060 - C2059) * C32285) *
                C32314 +
            (C1778 * C10043 + C1779 * C10040 + C1791 * C10044 + C1792 * C10041 +
             (C2062 - C2061) * C10045 + (C2064 - C2063) * C32285) *
                C32301 +
            (C3457 * C10043 + C3458 * C10040 + (C1785 - C1784) * C10044 +
             (C1787 - C1786) * C10041 +
             (C31993 * C2379 - C113 * C2378) * C10045 +
             (C31993 * C2381 - C113 * C2380) * C32285) *
                C32271) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C10043 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C10040 +
            (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C10044 +
            (C11052 - C11053 + C11054 - C11055 + C11056 - C11057) * C10041 +
            C11090 * C10045 + C11091 * C32285) *
               C31911 * C577 +
           ((C11047 - C11046 + C11049 - C11048 + C11051 - C11050) * C10043 +
            (C11053 - C11052 + C11055 - C11054 + C11057 - C11056) * C10040 +
            (C11059 - C11058 + C11061 - C11060 + C11063 - C11062) * C10044 +
            (C11065 - C11064 + C11067 - C11066 + C11069 - C11068) * C10041 +
            (C11070 - C11071 + C11072 - C11073 + C11074 - C11075) * C10045 +
            (C11076 - C11077 + C11078 - C11079 + C11080 - C11081) * C32285) *
               C31911 * C578) *
              C31956 * C473 +
          (((C822 - C821 + C824 - C823 + C826 - C825) * C10043 +
            (C828 - C827 + C830 - C829 + C832 - C831) * C10040 +
            (C1474 - C1475 + C1476 - C1477 + C1478 - C1479) * C10044 +
            (C1480 - C1481 + C1482 - C1483 + C1484 - C1485) * C10041 +
            (C11384 - C11385 + C11386 - C11387 + C11388 - C11389) * C10045 +
            (C11390 - C11391 + C11392 - C11393 + C11394 - C11395) * C32285) *
               C31911 * C577 +
           ((C1475 - C1474 + C1477 - C1476 + C1479 - C1478) * C10043 +
            (C1481 - C1480 + C1483 - C1482 + C1485 - C1484) * C10040 +
            (C11385 - C11384 + C11387 - C11386 + C11389 - C11388) * C10044 +
            (C11391 - C11390 + C11393 - C11392 + C11395 - C11394) * C10041 +
            (C32317 * C2026 - C817 * C2019 + C32305 * C2543 - C818 * C2539 +
             C32282 * C7199 - C819 * C7198) *
                C10045 +
            (C32317 * C2037 - C817 * C2027 + C32305 * C2548 - C818 * C2544 +
             C32282 * C7201 - C819 * C7200) *
                C32285) *
               C31911 * C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C114 +
            (C31993 * C136 - C113 * C123) * C32010) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C31970 * C240 +
          (((C113 * C244 - C31993 * C254) * C114 +
            (C113 * C255 - C31993 * C274) * C32010) *
               C103 +
           ((C113 * C245 - C31993 * C256) * C114 +
            (C113 * C257 - C31993 * C275) * C32010) *
               C104 +
           ((C113 * C246 - C31993 * C258) * C114 +
            (C113 * C259 - C31993 * C276) * C32010) *
               C105 +
           ((C113 * C247 - C31993 * C260) * C114 +
            (C113 * C261 - C31993 * C277) * C32010) *
               C106 +
           ((C113 * C248 - C31993 * C262) * C114 +
            (C113 * C263 - C31993 * C278) * C32010) *
               C107) *
              C31970 * C241 +
          (((C31993 * C264 - C113 * C249) * C114 +
            (C31993 * C279 - C113 * C265) * C32010) *
               C103 +
           ((C31993 * C266 - C113 * C250) * C114 +
            (C31993 * C280 - C113 * C267) * C32010) *
               C104 +
           ((C31993 * C268 - C113 * C251) * C114 +
            (C31993 * C281 - C113 * C269) * C32010) *
               C105 +
           ((C31993 * C270 - C113 * C252) * C114 +
            (C31993 * C282 - C113 * C271) * C32010) *
               C106 +
           ((C31993 * C272 - C113 * C253) * C114 +
            (C31993 * C283 - C113 * C273) * C32010) *
               C107) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C114 +
            (C31993 * C136 - C113 * C123) * C32010) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C31970 * C31956 * C110 +
          (((C145 - C144) * C114 + (C147 - C146) * C32010) * C103 +
           ((C149 - C148) * C114 + (C151 - C150) * C32010) * C104 +
           ((C153 - C152) * C114 + (C155 - C154) * C32010) * C105 +
           ((C157 - C156) * C114 + (C159 - C158) * C32010) * C106 +
           ((C160 - C161) * C114 + (C162 - C163) * C32010) * C107) *
              C31970 * C31956 * C111 +
          (C176 * C103 + C177 * C104 + C178 * C105 +
           ((C161 - C160) * C114 + (C163 - C162) * C32010) * C106 +
           ((C31993 * C134 - C113 * C121) * C114 +
            (C31993 * C142 - C113 * C135) * C32010) *
               C107) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C114 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C32010) *
               C814 +
           ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
            (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
               C815 +
           C869 * C32271) *
              C31970 * C31956 * C110 +
          (((C822 - C821 + C824 - C823 + C826 - C825) * C114 +
            (C828 - C827 + C830 - C829 + C832 - C831) * C32010) *
               C814 +
           ((C834 - C833 + C836 - C835 + C838 - C837) * C114 +
            (C840 - C839 + C842 - C841 + C844 - C843) * C32010) *
               C815 +
           ((C845 - C846 + C847 - C848 + C849 - C850) * C114 +
            (C851 - C852 + C853 - C854 + C855 - C856) * C32010) *
               C32271) *
              C31970 * C31956 * C111 +
          (C869 * C814 +
           ((C846 - C845 + C848 - C847 + C850 - C849) * C114 +
            (C852 - C851 + C854 - C853 + C856 - C855) * C32010) *
               C815 +
           ((C32317 * C130 - C817 * C119 + C32305 * C262 - C818 * C248 +
             C32282 * C272 - C819 * C253) *
                C114 +
            (C32317 * C140 - C817 * C131 + C32305 * C278 - C818 * C263 +
             C32282 * C283 - C819 * C273) *
                C32010) *
               C32271) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C114 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C32010) *
               C814 +
           ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
            (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
               C815 +
           C869 * C32271) *
              C31970 * C240 +
          (((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
             C819 * C979 - C32282 * C985) *
                C114 +
            (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
             C819 * C986 - C32282 * C997) *
                C32010) *
               C814 +
           ((C817 * C245 - C32317 * C256 + C818 * C250 - C32305 * C266 +
             C819 * C980 - C32282 * C987) *
                C114 +
            (C817 * C257 - C32317 * C275 + C818 * C267 - C32305 * C280 +
             C819 * C988 - C32282 * C998) *
                C32010) *
               C815 +
           ((C817 * C246 - C32317 * C258 + C818 * C251 - C32305 * C268 +
             C819 * C981 - C32282 * C989) *
                C114 +
            (C817 * C259 - C32317 * C276 + C818 * C269 - C32305 * C281 +
             C819 * C990 - C32282 * C999) *
                C32010) *
               C32271) *
              C31970 * C241 +
          (((C32317 * C264 - C817 * C249 + C32305 * C985 - C818 * C979 +
             C32282 * C991 - C819 * C982) *
                C114 +
            (C32317 * C279 - C817 * C265 + C32305 * C997 - C818 * C986 +
             C32282 * C1000 - C819 * C992) *
                C32010) *
               C814 +
           ((C32317 * C266 - C817 * C250 + C32305 * C987 - C818 * C980 +
             C32282 * C993 - C819 * C983) *
                C114 +
            (C32317 * C280 - C817 * C267 + C32305 * C998 - C818 * C988 +
             C32282 * C1001 - C819 * C994) *
                C32010) *
               C815 +
           ((C32317 * C268 - C817 * C251 + C32305 * C989 - C818 * C981 +
             C32282 * C995 - C819 * C984) *
                C114 +
            (C32317 * C281 - C817 * C269 + C32305 * C999 - C818 * C990 +
             C32282 * C1002 - C819 * C996) *
                C32010) *
               C32271) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C114 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32010) *
               C32314 +
           ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
            (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
               C32301 +
           C5333 * C32271) *
              C31970 * C31956 * C110 +
          (((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C114 +
            (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32010) *
               C32314 +
           ((C5298 - C5297 + C5300 - C5299 + C5302 - C5301) * C114 +
            (C5304 - C5303 + C5306 - C5305 + C5308 - C5307) * C32010) *
               C32301 +
           ((C5309 - C5310 + C5311 - C5312 + C5313 - C5314) * C114 +
            (C5315 - C5316 + C5317 - C5318 + C5319 - C5320) * C32010) *
               C32271) *
              C31970 * C31956 * C111 +
          (C5333 * C32314 +
           ((C5310 - C5309 + C5312 - C5311 + C5314 - C5313) * C114 +
            (C5316 - C5315 + C5318 - C5317 + C5320 - C5319) * C32010) *
               C32301 +
           ((C5275 * C130 - C5281 * C119 + C5276 * C262 - C5282 * C248 +
             C32282 * C272 - C5283 * C253) *
                C114 +
            (C5275 * C140 - C5281 * C131 + C5276 * C278 - C5282 * C263 +
             C32282 * C283 - C5283 * C273) *
                C32010) *
               C32271) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C114 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32010) *
               C32314 +
           ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
            (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
               C32301 +
           C5333 * C32271) *
              C31970 * C240 +
          (((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
             C5283 * C979 - C32282 * C985) *
                C114 +
            (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
             C5283 * C986 - C32282 * C997) *
                C32010) *
               C32314 +
           ((C5281 * C245 - C5275 * C256 + C5282 * C250 - C5276 * C266 +
             C5283 * C980 - C32282 * C987) *
                C114 +
            (C5281 * C257 - C5275 * C275 + C5282 * C267 - C5276 * C280 +
             C5283 * C988 - C32282 * C998) *
                C32010) *
               C32301 +
           ((C5281 * C246 - C5275 * C258 + C5282 * C251 - C5276 * C268 +
             C5283 * C981 - C32282 * C989) *
                C114 +
            (C5281 * C259 - C5275 * C276 + C5282 * C269 - C5276 * C281 +
             C5283 * C990 - C32282 * C999) *
                C32010) *
               C32271) *
              C31970 * C241 +
          (((C5275 * C264 - C5281 * C249 + C5276 * C985 - C5282 * C979 +
             C32282 * C991 - C5283 * C982) *
                C114 +
            (C5275 * C279 - C5281 * C265 + C5276 * C997 - C5282 * C986 +
             C32282 * C1000 - C5283 * C992) *
                C32010) *
               C32314 +
           ((C5275 * C266 - C5281 * C250 + C5276 * C987 - C5282 * C980 +
             C32282 * C993 - C5283 * C983) *
                C114 +
            (C5275 * C280 - C5281 * C267 + C5276 * C998 - C5282 * C988 +
             C32282 * C1001 - C5283 * C994) *
                C32010) *
               C32301 +
           ((C5275 * C268 - C5281 * C251 + C5276 * C989 - C5282 * C981 +
             C32282 * C995 - C5283 * C984) *
                C114 +
            (C5275 * C281 - C5281 * C269 + C5276 * C999 - C5282 * C990 +
             C32282 * C1002 - C5283 * C996) *
                C32010) *
               C32271) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
            C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
            C6105 * C991 - C6111 * C982) *
               C114 +
           (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
            C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
            C6105 * C1000 - C6111 * C992) *
               C32010) *
              C31911 * C31970 * C31956 * C110 +
          ((C6107 * C116 - C6101 * C124 + C6108 * C245 - C6102 * C256 +
            C6109 * C250 - C6103 * C266 + C6110 * C980 - C6104 * C987 +
            C6111 * C983 - C6105 * C993) *
               C114 +
           (C6107 * C125 - C6101 * C137 + C6108 * C257 - C6102 * C275 +
            C6109 * C267 - C6103 * C280 + C6110 * C988 - C6104 * C998 +
            C6111 * C994 - C6105 * C1001) *
               C32010) *
              C31911 * C31970 * C31956 * C111 +
          ((C6101 * C126 - C6107 * C117 + C6102 * C258 - C6108 * C246 +
            C6103 * C268 - C6109 * C251 + C6104 * C989 - C6110 * C981 +
            C6105 * C995 - C6111 * C984) *
               C114 +
           (C6101 * C138 - C6107 * C127 + C6102 * C276 - C6108 * C259 +
            C6103 * C281 - C6109 * C269 + C6104 * C999 - C6110 * C990 +
            C6105 * C1002 - C6111 * C996) *
               C32010) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
            C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
            C6105 * C991 - C6111 * C982) *
               C114 +
           (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
            C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
            C6105 * C1000 - C6111 * C992) *
               C32010) *
              C31911 * C31970 * C240 +
          ((C6107 * C244 - C6101 * C254 + C6108 * C249 - C6102 * C264 +
            C6109 * C979 - C6103 * C985 + C6110 * C982 - C6104 * C991 +
            C6111 * C6174 - C6105 * C6176) *
               C114 +
           (C6107 * C255 - C6101 * C274 + C6108 * C265 - C6102 * C279 +
            C6109 * C986 - C6103 * C997 + C6110 * C992 - C6104 * C1000 +
            C6111 * C6177 - C6105 * C6180) *
               C32010) *
              C31911 * C31970 * C241 +
          ((C6101 * C264 - C6107 * C249 + C6102 * C985 - C6108 * C979 +
            C6103 * C991 - C6109 * C982 + C6104 * C6176 - C6110 * C6174 +
            C6105 * C6178 - C6111 * C6175) *
               C114 +
           (C6101 * C279 - C6107 * C265 + C6102 * C997 - C6108 * C986 +
            C6103 * C1000 - C6109 * C992 + C6104 * C6180 - C6110 * C6177 +
            C6105 * C6181 - C6111 * C6179) *
               C32010) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C10043 +
            (C31993 * C136 - C113 * C123) * C10040 + (C2043 - C2044) * C10044 +
            (C2045 - C2046) * C10041 + C2065 * C10045 + C2066 * C32285) *
               C32314 +
           ((C144 - C145) * C10043 + (C146 - C147) * C10040 + C2383 * C10044 +
            C2384 * C10041 + C2051 * C10045 + C2052 * C32285) *
               C32301 +
           C10057 * C32271) *
              C31970 * C31956 * C110 +
          (((C145 - C144) * C10043 + (C147 - C146) * C10040 + C2385 * C10044 +
            C2386 * C10041 + C2387 * C10045 + C2388 * C32285) *
               C32314 +
           ((C149 - C148) * C10043 + (C151 - C150) * C10040 + C2389 * C10044 +
            C2390 * C10041 + C2391 * C10045 + C2392 * C32285) *
               C32301 +
           ((C153 - C152) * C10043 + (C155 - C154) * C10040 + C3927 * C10044 +
            C3928 * C10041 + (C1784 - C1785) * C10045 +
            (C1786 - C1787) * C32285) *
               C32271) *
              C31970 * C31956 * C111 +
          (C10057 * C32314 +
           (C166 * C10043 + C167 * C10040 + C3457 * C10044 + C3458 * C10041 +
            (C1785 - C1784) * C10045 + (C1787 - C1786) * C32285) *
               C32301 +
           (C168 * C10043 + C169 * C10040 + (C597 - C596) * C10044 +
            (C599 - C598) * C10041 + (C31993 * C377 - C113 * C358) * C10045 +
            (C31993 * C388 - C113 * C378) * C32285) *
               C32271) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C10043 +
            (C31993 * C136 - C113 * C123) * C10040 + (C2043 - C2044) * C10044 +
            (C2045 - C2046) * C10041 + C2065 * C10045 + C2066 * C32285) *
               C32314 +
           ((C144 - C145) * C10043 + (C146 - C147) * C10040 + C2383 * C10044 +
            C2384 * C10041 + C2051 * C10045 + C2052 * C32285) *
               C32301 +
           C10057 * C32271) *
              C31970 * C240 +
          (((C113 * C244 - C31993 * C254) * C10043 +
            (C113 * C255 - C31993 * C274) * C10040 + (C2551 - C2552) * C10044 +
            (C2553 - C2554) * C10041 + (C2555 - C2556) * C10045 +
            (C2557 - C2558) * C32285) *
               C32314 +
           ((C480 - C481) * C10043 + (C482 - C483) * C10040 +
            (C2217 - C2218) * C10044 + (C2219 - C2220) * C10041 +
            (C2221 - C2222) * C10045 + (C2223 - C2224) * C32285) *
               C32301 +
           ((C484 - C485) * C10043 + (C486 - C487) * C10040 +
            (C2225 - C2226) * C10044 + (C2227 - C2228) * C10041 +
            (C2229 - C2230) * C10045 + (C2231 - C2232) * C32285) *
               C32271) *
              C31970 * C241 +
          (((C31993 * C264 - C113 * C249) * C10043 +
            (C31993 * C279 - C113 * C265) * C10040 +
            (C31993 * C1122 - C113 * C1113) * C10044 +
            (C31993 * C1140 - C113 * C1123) * C10041 +
            (C31993 * C1129 - C113 * C1117) * C10045 +
            (C31993 * C1144 - C113 * C1131) * C32285) *
               C32314 +
           ((C31993 * C266 - C113 * C250) * C10043 +
            (C31993 * C280 - C113 * C267) * C10040 +
            (C31993 * C1124 - C113 * C1114) * C10044 +
            (C31993 * C1141 - C113 * C1125) * C10041 +
            (C31993 * C1133 - C113 * C1119) * C10045 +
            (C31993 * C1146 - C113 * C1135) * C32285) *
               C32301 +
           ((C31993 * C268 - C113 * C251) * C10043 +
            (C31993 * C281 - C113 * C269) * C10040 +
            (C31993 * C1126 - C113 * C1115) * C10044 +
            (C31993 * C1142 - C113 * C1127) * C10041 +
            (C31993 * C1137 - C113 * C1121) * C10045 +
            (C31993 * C1148 - C113 * C1139) * C32285) *
               C32271) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
            C32282 * C264 - C819 * C249) *
               C10043 +
           (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
            C32282 * C279 - C819 * C265) *
               C10040 +
           (C32317 * C359 - C817 * C349 + C32305 * C686 - C818 * C681 +
            C32282 * C1122 - C819 * C1113) *
               C10044 +
           (C32317 * C379 - C817 * C360 + C32305 * C696 - C818 * C687 +
            C32282 * C1140 - C819 * C1123) *
               C10041 +
           (C32317 * C369 - C817 * C354 + C32305 * C1128 - C818 * C1116 +
            C32282 * C1129 - C819 * C1117) *
               C10045 +
           (C32317 * C384 - C817 * C370 + C32305 * C1143 - C818 * C1130 +
            C32282 * C1144 - C819 * C1131) *
               C32285) *
              C31911 * C31970 * C31956 * C110 +
          ((C822 - C821 + C824 - C823 + C826 - C825) * C10043 +
           (C828 - C827 + C830 - C829 + C832 - C831) * C10040 +
           (C1474 - C1475 + C1476 - C1477 + C1478 - C1479) * C10044 +
           (C1480 - C1481 + C1482 - C1483 + C1484 - C1485) * C10041 +
           (C817 * C355 - C32317 * C371 + C818 * C1118 - C32305 * C1132 +
            C819 * C1119 - C32282 * C1133) *
               C10045 +
           (C817 * C372 - C32317 * C385 + C818 * C1134 - C32305 * C1145 +
            C819 * C1135 - C32282 * C1146) *
               C32285) *
              C31911 * C31970 * C31956 * C111 +
          (C865 * C10043 + C866 * C10040 +
           (C1487 - C1486 + C1489 - C1488 + C1491 - C1490) * C10044 +
           (C1493 - C1492 + C1495 - C1494 + C1497 - C1496) * C10041 +
           (C32317 * C373 - C817 * C356 + C32305 * C1136 - C818 * C1120 +
            C32282 * C1137 - C819 * C1121) *
               C10045 +
           (C32317 * C386 - C817 * C374 + C32305 * C1147 - C818 * C1138 +
            C32282 * C1148 - C819 * C1139) *
               C32285) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
            C32282 * C264 - C819 * C249) *
               C10043 +
           (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
            C32282 * C279 - C819 * C265) *
               C10040 +
           (C32317 * C359 - C817 * C349 + C32305 * C686 - C818 * C681 +
            C32282 * C1122 - C819 * C1113) *
               C10044 +
           (C32317 * C379 - C817 * C360 + C32305 * C696 - C818 * C687 +
            C32282 * C1140 - C819 * C1123) *
               C10041 +
           (C32317 * C369 - C817 * C354 + C32305 * C1128 - C818 * C1116 +
            C32282 * C1129 - C819 * C1117) *
               C10045 +
           (C32317 * C384 - C817 * C370 + C32305 * C1143 - C818 * C1130 +
            C32282 * C1144 - C819 * C1131) *
               C32285) *
              C31911 * C31970 * C240 +
          ((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
            C819 * C979 - C32282 * C985) *
               C10043 +
           (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
            C819 * C986 - C32282 * C997) *
               C10040 +
           (C817 * C681 - C32317 * C686 + C818 * C1113 - C32305 * C1122 +
            C819 * C1643 - C32282 * C1646) *
               C10044 +
           (C817 * C687 - C32317 * C696 + C818 * C1123 - C32305 * C1140 +
            C819 * C1647 - C32282 * C1652) *
               C10041 +
           (C817 * C1116 - C32317 * C1128 + C818 * C1117 - C32305 * C1129 +
            C819 * C6245 - C32282 * C6249) *
               C10045 +
           (C817 * C1130 - C32317 * C1143 + C818 * C1131 - C32305 * C1144 +
            C819 * C6251 - C32282 * C6254) *
               C32285) *
              C31911 * C31970 * C241 +
          ((C32317 * C264 - C817 * C249 + C32305 * C985 - C818 * C979 +
            C32282 * C991 - C819 * C982) *
               C10043 +
           (C32317 * C279 - C817 * C265 + C32305 * C997 - C818 * C986 +
            C32282 * C1000 - C819 * C992) *
               C10040 +
           (C32317 * C1122 - C817 * C1113 + C32305 * C1646 - C818 * C1643 +
            C32282 * C6247 - C819 * C6244) *
               C10044 +
           (C32317 * C1140 - C817 * C1123 + C32305 * C1652 - C818 * C1647 +
            C32282 * C6253 - C819 * C6248) *
               C10041 +
           (C32317 * C1129 - C817 * C1117 + C32305 * C6249 - C818 * C6245 +
            C32282 * C6250 - C819 * C6246) *
               C10045 +
           (C32317 * C1144 - C817 * C1131 + C32305 * C6254 - C818 * C6251 +
            C32282 * C6255 - C819 * C6252) *
               C32285) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                 C20326 +
             (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                 C20324 +
             (C4510 - C4511 + C4512 - C4513) * C20327 +
             (C4514 - C4515 + C4516 - C4517) * C32097) *
                C31916 +
            ((C2665 - C2666 + C2667 - C2668) * C20326 +
             (C2669 - C2670 + C2671 - C2672) * C20324 + C4958 * C20327 +
             C4959 * C32097) *
                C31924 +
            C22825 * C17320) *
               C31970 * C471 +
           (((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                 C20326 +
             (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                 C20324 +
             (C5158 - C5159 + C5160 - C5161) * C20327 +
             (C5162 - C5163 + C5164 - C5165) * C32097) *
                C31916 +
            ((C3041 - C3042 + C3043 - C3044) * C20326 +
             (C3045 - C3046 + C3047 - C3048) * C20324 +
             (C4736 - C4737 + C4738 - C4739) * C20327 +
             (C4740 - C4741 + C4742 - C4743) * C32097) *
                C31924 +
            ((C3049 - C3050 + C3051 - C3052) * C20326 +
             (C3053 - C3054 + C3055 - C3056) * C20324 +
             (C4744 - C4745 + C4746 - C4747) * C20327 +
             (C4748 - C4749 + C4750 - C4751) * C32097) *
                C17320) *
               C31970 * C472) *
              C473 +
          ((((C2666 - C2665 + C2668 - C2667) * C20326 +
             (C2670 - C2669 + C2672 - C2671) * C20324 + C4960 * C20327 +
             C4961 * C32097) *
                C31916 +
            ((C2674 - C2673 + C2676 - C2675) * C20326 +
             (C2678 - C2677 + C2680 - C2679) * C20324 + C4962 * C20327 +
             C4963 * C32097) *
                C31924 +
            ((C2682 - C2681 + C2684 - C2683) * C20326 +
             (C2686 - C2685 + C2688 - C2687) * C20324 +
             (C3211 - C3212 + C3213 - C3214) * C20327 +
             (C3215 - C3216 + C3217 - C3218) * C32097) *
                C17320) *
               C31970 * C471 +
           (((C3042 - C3041 + C3044 - C3043) * C20326 +
             (C3046 - C3045 + C3048 - C3047) * C20324 +
             (C4737 - C4736 + C4739 - C4738) * C20327 +
             (C4741 - C4740 + C4743 - C4742) * C32097) *
                C31916 +
            ((C3050 - C3049 + C3052 - C3051) * C20326 +
             (C3054 - C3053 + C3056 - C3055) * C20324 +
             (C4745 - C4744 + C4747 - C4746) * C20327 +
             (C4749 - C4748 + C4751 - C4750) * C32097) *
                C31924 +
            ((C3058 - C3057 + C3060 - C3059) * C20326 +
             (C3062 - C3061 + C3064 - C3063) * C20324 +
             (C32251 * C692 - C2662 * C684 + C32055 * C1470 - C2663 * C1469) *
                 C20327 +
             (C32251 * C699 - C2662 * C693 + C32055 * C1472 - C2663 * C1471) *
                 C32097) *
                C17320) *
               C31970 * C472) *
              C474)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                 C20326 +
             (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                 C20324 +
             (C4510 - C4511 + C4512 - C4513) * C20327 +
             (C4514 - C4515 + C4516 - C4517) * C32097) *
                C31916 +
            ((C2665 - C2666 + C2667 - C2668) * C20326 +
             (C2669 - C2670 + C2671 - C2672) * C20324 + C4958 * C20327 +
             C4959 * C32097) *
                C31924 +
            C22825 * C17320) *
               C577 +
           (((C4511 - C4510 + C4513 - C4512) * C20326 +
             (C4515 - C4514 + C4517 - C4516) * C20324 +
             (C4518 - C4519 + C4520 - C4521) * C20327 +
             (C4522 - C4523 + C4524 - C4525) * C32097) *
                C31916 +
            (C4960 * C20326 + C4961 * C20324 + C12918 * C20327 +
             C12919 * C32097) *
                C31924 +
            (C4962 * C20326 + C4963 * C20324 +
             (C4534 - C4535 + C4536 - C4537) * C20327 +
             (C4538 - C4539 + C4540 - C4541) * C32097) *
                C17320) *
               C578) *
              C471 +
          ((((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                 C20326 +
             (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                 C20324 +
             (C5158 - C5159 + C5160 - C5161) * C20327 +
             (C5162 - C5163 + C5164 - C5165) * C32097) *
                C31916 +
            ((C3041 - C3042 + C3043 - C3044) * C20326 +
             (C3045 - C3046 + C3047 - C3048) * C20324 +
             (C4736 - C4737 + C4738 - C4739) * C20327 +
             (C4740 - C4741 + C4742 - C4743) * C32097) *
                C31924 +
            ((C3049 - C3050 + C3051 - C3052) * C20326 +
             (C3053 - C3054 + C3055 - C3056) * C20324 +
             (C4744 - C4745 + C4746 - C4747) * C20327 +
             (C4748 - C4749 + C4750 - C4751) * C32097) *
                C17320) *
               C577 +
           (((C5159 - C5158 + C5161 - C5160) * C20326 +
             (C5163 - C5162 + C5165 - C5164) * C20324 +
             (C13115 - C13114 + C13117 - C13116) * C20327 +
             (C13119 - C13118 + C13121 - C13120) * C32097) *
                C31916 +
            ((C4737 - C4736 + C4739 - C4738) * C20326 +
             (C4741 - C4740 + C4743 - C4742) * C20324 +
             (C12713 - C12712 + C12715 - C12714) * C20327 +
             (C12717 - C12716 + C12719 - C12718) * C32097) *
                C31924 +
            ((C4745 - C4744 + C4747 - C4746) * C20326 +
             (C4749 - C4748 + C4751 - C4750) * C20324 +
             (C32251 * C1136 - C2662 * C1120 + C32055 * C1137 - C2663 * C1121) *
                 C20327 +
             (C32251 * C1147 - C2662 * C1138 + C32055 * C1148 - C2663 * C1139) *
                 C32097) *
                C17320) *
               C578) *
              C472) *
         C31944) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C20326 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C20324 +
            (C4510 - C4511 + C4512 - C4513) * C20327 +
            (C4514 - C4515 + C4516 - C4517) * C32097) *
               C31916 +
           ((C2665 - C2666 + C2667 - C2668) * C20326 +
            (C2669 - C2670 + C2671 - C2672) * C20324 + C4958 * C20327 +
            C4959 * C32097) *
               C31924 +
           C22825 * C17320) *
              C31970 * C240 +
          (((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                C20326 +
            (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                C20324 +
            (C5158 - C5159 + C5160 - C5161) * C20327 +
            (C5162 - C5163 + C5164 - C5165) * C32097) *
               C31916 +
           ((C3041 - C3042 + C3043 - C3044) * C20326 +
            (C3045 - C3046 + C3047 - C3048) * C20324 +
            (C4736 - C4737 + C4738 - C4739) * C20327 +
            (C4740 - C4741 + C4742 - C4743) * C32097) *
               C31924 +
           ((C3049 - C3050 + C3051 - C3052) * C20326 +
            (C3053 - C3054 + C3055 - C3056) * C20324 +
            (C4744 - C4745 + C4746 - C4747) * C20327 +
            (C4748 - C4749 + C4750 - C4751) * C32097) *
               C17320) *
              C31970 * C241 +
          (((C32251 * C264 - C2662 * C249 + C32055 * C985 - C2663 * C979) *
                C20326 +
            (C32251 * C279 - C2662 * C265 + C32055 * C997 - C2663 * C986) *
                C20324 +
            (C32251 * C1122 - C2662 * C1113 + C32055 * C1646 - C2663 * C1643) *
                C20327 +
            (C32251 * C1140 - C2662 * C1123 + C32055 * C1652 - C2663 * C1647) *
                C32097) *
               C31916 +
           ((C32251 * C266 - C2662 * C250 + C32055 * C987 - C2663 * C980) *
                C20326 +
            (C32251 * C280 - C2662 * C267 + C32055 * C998 - C2663 * C988) *
                C20324 +
            (C32251 * C1124 - C2662 * C1114 + C32055 * C1648 - C2663 * C1644) *
                C20327 +
            (C32251 * C1141 - C2662 * C1125 + C32055 * C1653 - C2663 * C1649) *
                C32097) *
               C31924 +
           ((C32251 * C268 - C2662 * C251 + C32055 * C989 - C2663 * C981) *
                C20326 +
            (C32251 * C281 - C2662 * C269 + C32055 * C999 - C2663 * C990) *
                C20324 +
            (C32251 * C1126 - C2662 * C1115 + C32055 * C1650 - C2663 * C1645) *
                C20327 +
            (C32251 * C1142 - C2662 * C1127 + C32055 * C1654 - C2663 * C1651) *
                C32097) *
               C17320) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C20326 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C20324 +
            (C4510 - C4511 + C4512 - C4513) * C20327 +
            (C4514 - C4515 + C4516 - C4517) * C32097) *
               C31916 +
           ((C2665 - C2666 + C2667 - C2668) * C20326 +
            (C2669 - C2670 + C2671 - C2672) * C20324 + C4958 * C20327 +
            C4959 * C32097) *
               C31924 +
           C22825 * C17320) *
              C31970 * C31956 * C110 +
          (((C2666 - C2665 + C2668 - C2667) * C20326 +
            (C2670 - C2669 + C2672 - C2671) * C20324 + C4960 * C20327 +
            C4961 * C32097) *
               C31916 +
           ((C2674 - C2673 + C2676 - C2675) * C20326 +
            (C2678 - C2677 + C2680 - C2679) * C20324 + C4962 * C20327 +
            C4963 * C32097) *
               C31924 +
           ((C2682 - C2681 + C2684 - C2683) * C20326 +
            (C2686 - C2685 + C2688 - C2687) * C20324 +
            (C3211 - C3212 + C3213 - C3214) * C20327 +
            (C3215 - C3216 + C3217 - C3218) * C32097) *
               C17320) *
              C31970 * C31956 * C111 +
          (C22825 * C31916 +
           (C2707 * C20326 + C2708 * C20324 +
            (C3212 - C3211 + C3214 - C3213) * C20327 +
            (C3216 - C3215 + C3218 - C3217) * C32097) *
               C31924 +
           ((C2690 - C2689 + C2692 - C2691) * C20326 +
            (C2694 - C2693 + C2696 - C2695) * C20324 +
            (C32251 * C367 - C2662 * C353 + C32055 * C694 - C2663 * C685) *
                C20327 +
            (C32251 * C383 - C2662 * C368 + C32055 * C700 - C2663 * C695) *
                C32097) *
               C17320) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C20326 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C20324 +
            (C4510 - C4511 + C4512 - C4513) * C20327 +
            (C4514 - C4515 + C4516 - C4517) * C32097) *
               C31916 +
           ((C2665 - C2666 + C2667 - C2668) * C20326 +
            (C2669 - C2670 + C2671 - C2672) * C20324 + C4958 * C20327 +
            C4959 * C32097) *
               C31924 +
           C22825 * C17320) *
              C346 +
          (((C4511 - C4510 + C4513 - C4512) * C20326 +
            (C4515 - C4514 + C4517 - C4516) * C20324 +
            (C4518 - C4519 + C4520 - C4521) * C20327 +
            (C4522 - C4523 + C4524 - C4525) * C32097) *
               C31916 +
           (C4960 * C20326 + C4961 * C20324 + C12918 * C20327 +
            C12919 * C32097) *
               C31924 +
           (C4962 * C20326 + C4963 * C20324 +
            (C4534 - C4535 + C4536 - C4537) * C20327 +
            (C4538 - C4539 + C4540 - C4541) * C32097) *
               C17320) *
              C347 +
          ((C12514 * C20326 + C12515 * C20324 + C14128 * C20327 +
            C14129 * C32097) *
               C31916 +
           (C12516 * C20326 + C12517 * C20324 +
            (C12507 - C12506 + C12509 - C12508) * C20327 +
            (C12511 - C12510 + C12513 - C12512) * C32097) *
               C31924 +
           ((C4535 - C4534 + C4537 - C4536) * C20326 +
            (C4539 - C4538 + C4541 - C4540) * C20324 +
            (C32251 * C2028 - C2662 * C2020 + C32055 * C2545 - C2663 * C2540) *
                C20327 +
            (C32251 * C2038 - C2662 * C2029 + C32055 * C2549 - C2663 * C2546) *
                C32097) *
               C17320) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                 C20326 +
             (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                 C20324 +
             (C4510 - C4511 + C4512 - C4513) * C20327 +
             (C4514 - C4515 + C4516 - C4517) * C32097) *
                C31916 +
            ((C2665 - C2666 + C2667 - C2668) * C20326 +
             (C2669 - C2670 + C2671 - C2672) * C20324 + C4958 * C20327 +
             C4959 * C32097) *
                C31924 +
            C22825 * C17320) *
               C577 +
           (((C4511 - C4510 + C4513 - C4512) * C20326 +
             (C4515 - C4514 + C4517 - C4516) * C20324 +
             (C4518 - C4519 + C4520 - C4521) * C20327 +
             (C4522 - C4523 + C4524 - C4525) * C32097) *
                C31916 +
            (C4960 * C20326 + C4961 * C20324 + C12918 * C20327 +
             C12919 * C32097) *
                C31924 +
            (C4962 * C20326 + C4963 * C20324 +
             (C4534 - C4535 + C4536 - C4537) * C20327 +
             (C4538 - C4539 + C4540 - C4541) * C32097) *
                C17320) *
               C578) *
              C31956 * C473 +
          ((((C2666 - C2665 + C2668 - C2667) * C20326 +
             (C2670 - C2669 + C2672 - C2671) * C20324 + C4960 * C20327 +
             C4961 * C32097) *
                C31916 +
            ((C2674 - C2673 + C2676 - C2675) * C20326 +
             (C2678 - C2677 + C2680 - C2679) * C20324 + C4962 * C20327 +
             C4963 * C32097) *
                C31924 +
            ((C2682 - C2681 + C2684 - C2683) * C20326 +
             (C2686 - C2685 + C2688 - C2687) * C20324 +
             (C3211 - C3212 + C3213 - C3214) * C20327 +
             (C3215 - C3216 + C3217 - C3218) * C32097) *
                C17320) *
               C577 +
           ((C4958 * C20326 + C4959 * C20324 + C12516 * C20327 +
             C12517 * C32097) *
                C31916 +
            (C4212 * C20326 + C4213 * C20324 +
             (C4535 - C4534 + C4537 - C4536) * C20327 +
             (C4539 - C4538 + C4541 - C4540) * C32097) *
                C31924 +
            ((C3212 - C3211 + C3214 - C3213) * C20326 +
             (C3216 - C3215 + C3218 - C3217) * C20324 +
             (C32251 * C375 - C2662 * C357 + C32055 * C2213 - C2663 * C2212) *
                 C20327 +
             (C32251 * C387 - C2662 * C376 + C32055 * C2215 - C2663 * C2214) *
                 C32097) *
                C17320) *
               C578) *
              C31956 * C474)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C20326 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C20324 +
            (C4510 - C4511 + C4512 - C4513) * C20327 +
            (C4514 - C4515 + C4516 - C4517) * C32097) *
               C31916 +
           ((C2665 - C2666 + C2667 - C2668) * C20326 +
            (C2669 - C2670 + C2671 - C2672) * C20324 + C4958 * C20327 +
            C4959 * C32097) *
               C31924 +
           C22825 * C17320) *
              C31970 * C31956 * C110 +
          (((C2666 - C2665 + C2668 - C2667) * C20326 +
            (C2670 - C2669 + C2672 - C2671) * C20324 + C4960 * C20327 +
            C4961 * C32097) *
               C31916 +
           ((C2674 - C2673 + C2676 - C2675) * C20326 +
            (C2678 - C2677 + C2680 - C2679) * C20324 + C4962 * C20327 +
            C4963 * C32097) *
               C31924 +
           ((C2682 - C2681 + C2684 - C2683) * C20326 +
            (C2686 - C2685 + C2688 - C2687) * C20324 +
            (C3211 - C3212 + C3213 - C3214) * C20327 +
            (C3215 - C3216 + C3217 - C3218) * C32097) *
               C17320) *
              C31970 * C31956 * C111 +
          (C22825 * C31916 +
           (C2707 * C20326 + C2708 * C20324 +
            (C3212 - C3211 + C3214 - C3213) * C20327 +
            (C3216 - C3215 + C3218 - C3217) * C32097) *
               C31924 +
           ((C2690 - C2689 + C2692 - C2691) * C20326 +
            (C2694 - C2693 + C2696 - C2695) * C20324 +
            (C32251 * C367 - C2662 * C353 + C32055 * C694 - C2663 * C685) *
                C20327 +
            (C32251 * C383 - C2662 * C368 + C32055 * C700 - C2663 * C695) *
                C32097) *
               C17320) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C20326 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C20324 +
            (C4510 - C4511 + C4512 - C4513) * C20327 +
            (C4514 - C4515 + C4516 - C4517) * C32097) *
               C31916 +
           ((C2665 - C2666 + C2667 - C2668) * C20326 +
            (C2669 - C2670 + C2671 - C2672) * C20324 + C4958 * C20327 +
            C4959 * C32097) *
               C31924 +
           C22825 * C17320) *
              C31970 * C240 +
          (((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                C20326 +
            (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                C20324 +
            (C5158 - C5159 + C5160 - C5161) * C20327 +
            (C5162 - C5163 + C5164 - C5165) * C32097) *
               C31916 +
           ((C3041 - C3042 + C3043 - C3044) * C20326 +
            (C3045 - C3046 + C3047 - C3048) * C20324 +
            (C4736 - C4737 + C4738 - C4739) * C20327 +
            (C4740 - C4741 + C4742 - C4743) * C32097) *
               C31924 +
           ((C3049 - C3050 + C3051 - C3052) * C20326 +
            (C3053 - C3054 + C3055 - C3056) * C20324 +
            (C4744 - C4745 + C4746 - C4747) * C20327 +
            (C4748 - C4749 + C4750 - C4751) * C32097) *
               C17320) *
              C31970 * C241 +
          (((C32251 * C264 - C2662 * C249 + C32055 * C985 - C2663 * C979) *
                C20326 +
            (C32251 * C279 - C2662 * C265 + C32055 * C997 - C2663 * C986) *
                C20324 +
            (C32251 * C1122 - C2662 * C1113 + C32055 * C1646 - C2663 * C1643) *
                C20327 +
            (C32251 * C1140 - C2662 * C1123 + C32055 * C1652 - C2663 * C1647) *
                C32097) *
               C31916 +
           ((C32251 * C266 - C2662 * C250 + C32055 * C987 - C2663 * C980) *
                C20326 +
            (C32251 * C280 - C2662 * C267 + C32055 * C998 - C2663 * C988) *
                C20324 +
            (C32251 * C1124 - C2662 * C1114 + C32055 * C1648 - C2663 * C1644) *
                C20327 +
            (C32251 * C1141 - C2662 * C1125 + C32055 * C1653 - C2663 * C1649) *
                C32097) *
               C31924 +
           ((C32251 * C268 - C2662 * C251 + C32055 * C989 - C2663 * C981) *
                C20326 +
            (C32251 * C281 - C2662 * C269 + C32055 * C999 - C2663 * C990) *
                C20324 +
            (C32251 * C1126 - C2662 * C1115 + C32055 * C1650 - C2663 * C1645) *
                C20327 +
            (C32251 * C1142 - C2662 * C1127 + C32055 * C1654 - C2663 * C1651) *
                C32097) *
               C17320) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                 C31010 +
             (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                 C32093 +
             (C4510 - C4511 + C4512 - C4513) * C31002 +
             (C4514 - C4515 + C4516 - C4517) * C32100 + C12514 * C31016 +
             C12515 * C23811) *
                C15419 +
            ((C2665 - C2666 + C2667 - C2668) * C31010 +
             (C2669 - C2670 + C2671 - C2672) * C32093 + C4958 * C31002 +
             C4959 * C32100 + C12516 * C31016 + C12517 * C23811) *
                C31921) *
               C31970 * C471 +
           (((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                 C31010 +
             (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                 C32093 +
             (C5158 - C5159 + C5160 - C5161) * C31002 +
             (C5162 - C5163 + C5164 - C5165) * C32100 +
             (C13114 - C13115 + C13116 - C13117) * C31016 +
             (C13118 - C13119 + C13120 - C13121) * C23811) *
                C15419 +
            ((C3041 - C3042 + C3043 - C3044) * C31010 +
             (C3045 - C3046 + C3047 - C3048) * C32093 +
             (C4736 - C4737 + C4738 - C4739) * C31002 +
             (C4740 - C4741 + C4742 - C4743) * C32100 +
             (C12712 - C12713 + C12714 - C12715) * C31016 +
             (C12716 - C12717 + C12718 - C12719) * C23811) *
                C31921) *
               C31970 * C472) *
              C473 +
          ((((C2666 - C2665 + C2668 - C2667) * C31010 +
             (C2670 - C2669 + C2672 - C2671) * C32093 + C4960 * C31002 +
             C4961 * C32100 + C12918 * C31016 + C12919 * C23811) *
                C15419 +
            ((C2674 - C2673 + C2676 - C2675) * C31010 +
             (C2678 - C2677 + C2680 - C2679) * C32093 + C4962 * C31002 +
             C4963 * C32100 + (C4534 - C4535 + C4536 - C4537) * C31016 +
             (C4538 - C4539 + C4540 - C4541) * C23811) *
                C31921) *
               C31970 * C471 +
           (((C3042 - C3041 + C3044 - C3043) * C31010 +
             (C3046 - C3045 + C3048 - C3047) * C32093 +
             (C4737 - C4736 + C4739 - C4738) * C31002 +
             (C4741 - C4740 + C4743 - C4742) * C32100 +
             (C12713 - C12712 + C12715 - C12714) * C31016 +
             (C12717 - C12716 + C12719 - C12718) * C23811) *
                C15419 +
            ((C3050 - C3049 + C3052 - C3051) * C31010 +
             (C3054 - C3053 + C3056 - C3055) * C32093 +
             (C4745 - C4744 + C4747 - C4746) * C31002 +
             (C4749 - C4748 + C4751 - C4750) * C32100 +
             (C32251 * C1136 - C2662 * C1120 + C32055 * C1137 - C2663 * C1121) *
                 C31016 +
             (C32251 * C1147 - C2662 * C1138 + C32055 * C1148 - C2663 * C1139) *
                 C23811) *
                C31921) *
               C31970 * C472) *
              C474)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                 C31010 +
             (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                 C32093 +
             (C4510 - C4511 + C4512 - C4513) * C31002 +
             (C4514 - C4515 + C4516 - C4517) * C32100 + C12514 * C31016 +
             C12515 * C23811) *
                C15419 +
            ((C2665 - C2666 + C2667 - C2668) * C31010 +
             (C2669 - C2670 + C2671 - C2672) * C32093 + C4958 * C31002 +
             C4959 * C32100 + C12516 * C31016 + C12517 * C23811) *
                C31921) *
               C577 +
           (((C4511 - C4510 + C4513 - C4512) * C31010 +
             (C4515 - C4514 + C4517 - C4516) * C32093 +
             (C4518 - C4519 + C4520 - C4521) * C31002 +
             (C4522 - C4523 + C4524 - C4525) * C32100 +
             (C12498 - C12499 + C12500 - C12501) * C31016 +
             (C12502 - C12503 + C12504 - C12505) * C23811) *
                C15419 +
            (C4960 * C31010 + C4961 * C32093 + C12918 * C31002 +
             C12919 * C32100 + (C12506 - C12507 + C12508 - C12509) * C31016 +
             (C12510 - C12511 + C12512 - C12513) * C23811) *
                C31921) *
               C578) *
              C471 +
          ((((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                 C31010 +
             (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                 C32093 +
             (C5158 - C5159 + C5160 - C5161) * C31002 +
             (C5162 - C5163 + C5164 - C5165) * C32100 +
             (C13114 - C13115 + C13116 - C13117) * C31016 +
             (C13118 - C13119 + C13120 - C13121) * C23811) *
                C15419 +
            ((C3041 - C3042 + C3043 - C3044) * C31010 +
             (C3045 - C3046 + C3047 - C3048) * C32093 +
             (C4736 - C4737 + C4738 - C4739) * C31002 +
             (C4740 - C4741 + C4742 - C4743) * C32100 +
             (C12712 - C12713 + C12714 - C12715) * C31016 +
             (C12716 - C12717 + C12718 - C12719) * C23811) *
                C31921) *
               C577 +
           (((C5159 - C5158 + C5161 - C5160) * C31010 +
             (C5163 - C5162 + C5165 - C5164) * C32093 +
             (C13115 - C13114 + C13117 - C13116) * C31002 +
             (C13119 - C13118 + C13121 - C13120) * C32100 +
             (C14521 - C14520 + C14523 - C14522) * C31016 +
             (C14525 - C14524 + C14527 - C14526) * C23811) *
                C15419 +
            ((C4737 - C4736 + C4739 - C4738) * C31010 +
             (C4741 - C4740 + C4743 - C4742) * C32093 +
             (C12713 - C12712 + C12715 - C12714) * C31002 +
             (C12717 - C12716 + C12719 - C12718) * C32100 +
             (C32251 * C2543 - C2662 * C2539 + C32055 * C7199 - C2663 * C7198) *
                 C31016 +
             (C32251 * C2548 - C2662 * C2544 + C32055 * C7201 - C2663 * C7200) *
                 C23811) *
                C31921) *
               C578) *
              C472) *
         C31944) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C31010 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C32093 +
            (C4510 - C4511 + C4512 - C4513) * C31002 +
            (C4514 - C4515 + C4516 - C4517) * C32100 + C12514 * C31016 +
            C12515 * C23811) *
               C15419 +
           ((C2665 - C2666 + C2667 - C2668) * C31010 +
            (C2669 - C2670 + C2671 - C2672) * C32093 + C4958 * C31002 +
            C4959 * C32100 + C12516 * C31016 + C12517 * C23811) *
               C31921) *
              C31970 * C240 +
          (((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                C31010 +
            (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                C32093 +
            (C5158 - C5159 + C5160 - C5161) * C31002 +
            (C5162 - C5163 + C5164 - C5165) * C32100 +
            (C13114 - C13115 + C13116 - C13117) * C31016 +
            (C13118 - C13119 + C13120 - C13121) * C23811) *
               C15419 +
           ((C3041 - C3042 + C3043 - C3044) * C31010 +
            (C3045 - C3046 + C3047 - C3048) * C32093 +
            (C4736 - C4737 + C4738 - C4739) * C31002 +
            (C4740 - C4741 + C4742 - C4743) * C32100 +
            (C12712 - C12713 + C12714 - C12715) * C31016 +
            (C12716 - C12717 + C12718 - C12719) * C23811) *
               C31921) *
              C31970 * C241 +
          (((C32251 * C264 - C2662 * C249 + C32055 * C985 - C2663 * C979) *
                C31010 +
            (C32251 * C279 - C2662 * C265 + C32055 * C997 - C2663 * C986) *
                C32093 +
            (C32251 * C1122 - C2662 * C1113 + C32055 * C1646 - C2663 * C1643) *
                C31002 +
            (C32251 * C1140 - C2662 * C1123 + C32055 * C1652 - C2663 * C1647) *
                C32100 +
            (C32251 * C1129 - C2662 * C1117 + C32055 * C6249 - C2663 * C6245) *
                C31016 +
            (C32251 * C1144 - C2662 * C1131 + C32055 * C6254 - C2663 * C6251) *
                C23811) *
               C15419 +
           ((C32251 * C266 - C2662 * C250 + C32055 * C987 - C2663 * C980) *
                C31010 +
            (C32251 * C280 - C2662 * C267 + C32055 * C998 - C2663 * C988) *
                C32093 +
            (C32251 * C1124 - C2662 * C1114 + C32055 * C1648 - C2663 * C1644) *
                C31002 +
            (C32251 * C1141 - C2662 * C1125 + C32055 * C1653 - C2663 * C1649) *
                C32100 +
            (C32251 * C1133 - C2662 * C1119 + C32055 * C7049 - C2663 * C7048) *
                C31016 +
            (C32251 * C1146 - C2662 * C1135 + C32055 * C7051 - C2663 * C7050) *
                C23811) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C31010 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C32093 +
            (C4510 - C4511 + C4512 - C4513) * C31002 +
            (C4514 - C4515 + C4516 - C4517) * C32100 + C12514 * C31016 +
            C12515 * C23811) *
               C15419 +
           ((C2665 - C2666 + C2667 - C2668) * C31010 +
            (C2669 - C2670 + C2671 - C2672) * C32093 + C4958 * C31002 +
            C4959 * C32100 + C12516 * C31016 + C12517 * C23811) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C2666 - C2665 + C2668 - C2667) * C31010 +
            (C2670 - C2669 + C2672 - C2671) * C32093 + C4960 * C31002 +
            C4961 * C32100 + C12918 * C31016 + C12919 * C23811) *
               C15419 +
           ((C2674 - C2673 + C2676 - C2675) * C31010 +
            (C2678 - C2677 + C2680 - C2679) * C32093 + C4962 * C31002 +
            C4963 * C32100 + (C4534 - C4535 + C4536 - C4537) * C31016 +
            (C4538 - C4539 + C4540 - C4541) * C23811) *
               C31921) *
              C31970 * C31956 * C111 +
          ((C2705 * C31010 + C2706 * C32093 + C4212 * C31002 + C4213 * C32100 +
            (C4535 - C4534 + C4537 - C4536) * C31016 +
            (C4539 - C4538 + C4541 - C4540) * C23811) *
               C15419 +
           (C2707 * C31010 + C2708 * C32093 +
            (C3212 - C3211 + C3214 - C3213) * C31002 +
            (C3216 - C3215 + C3218 - C3217) * C32100 +
            (C32251 * C375 - C2662 * C357 + C32055 * C2213 - C2663 * C2212) *
                C31016 +
            (C32251 * C387 - C2662 * C376 + C32055 * C2215 - C2663 * C2214) *
                C23811) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C31010 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C32093 +
            (C4510 - C4511 + C4512 - C4513) * C31002 +
            (C4514 - C4515 + C4516 - C4517) * C32100 + C12514 * C31016 +
            C12515 * C23811) *
               C15419 +
           ((C2665 - C2666 + C2667 - C2668) * C31010 +
            (C2669 - C2670 + C2671 - C2672) * C32093 + C4958 * C31002 +
            C4959 * C32100 + C12516 * C31016 + C12517 * C23811) *
               C31921) *
              C346 +
          (((C4511 - C4510 + C4513 - C4512) * C31010 +
            (C4515 - C4514 + C4517 - C4516) * C32093 +
            (C4518 - C4519 + C4520 - C4521) * C31002 +
            (C4522 - C4523 + C4524 - C4525) * C32100 +
            (C12498 - C12499 + C12500 - C12501) * C31016 +
            (C12502 - C12503 + C12504 - C12505) * C23811) *
               C15419 +
           (C4960 * C31010 + C4961 * C32093 + C12918 * C31002 +
            C12919 * C32100 + (C12506 - C12507 + C12508 - C12509) * C31016 +
            (C12510 - C12511 + C12512 - C12513) * C23811) *
               C31921) *
              C347 +
          ((C12514 * C31010 + C12515 * C32093 + C14128 * C31002 +
            C14129 * C32100 + (C14121 - C14120 + C14123 - C14122) * C31016 +
            (C14125 - C14124 + C14127 - C14126) * C23811) *
               C15419 +
           (C12516 * C31010 + C12517 * C32093 +
            (C12507 - C12506 + C12509 - C12508) * C31002 +
            (C12511 - C12510 + C12513 - C12512) * C32100 +
            (C32251 * C2032 - C2662 * C2022 + C32055 * C11864 -
             C2663 * C11863) *
                C31016 +
            (C32251 * C2040 - C2662 * C2033 + C32055 * C11866 -
             C2663 * C11865) *
                C23811) *
               C31921) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                 C31010 +
             (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                 C32093 +
             (C4510 - C4511 + C4512 - C4513) * C31002 +
             (C4514 - C4515 + C4516 - C4517) * C32100 + C12514 * C31016 +
             C12515 * C23811) *
                C15419 +
            ((C2665 - C2666 + C2667 - C2668) * C31010 +
             (C2669 - C2670 + C2671 - C2672) * C32093 + C4958 * C31002 +
             C4959 * C32100 + C12516 * C31016 + C12517 * C23811) *
                C31921) *
               C577 +
           (((C4511 - C4510 + C4513 - C4512) * C31010 +
             (C4515 - C4514 + C4517 - C4516) * C32093 +
             (C4518 - C4519 + C4520 - C4521) * C31002 +
             (C4522 - C4523 + C4524 - C4525) * C32100 +
             (C12498 - C12499 + C12500 - C12501) * C31016 +
             (C12502 - C12503 + C12504 - C12505) * C23811) *
                C15419 +
            (C4960 * C31010 + C4961 * C32093 + C12918 * C31002 +
             C12919 * C32100 + (C12506 - C12507 + C12508 - C12509) * C31016 +
             (C12510 - C12511 + C12512 - C12513) * C23811) *
                C31921) *
               C578) *
              C31956 * C473 +
          ((((C2666 - C2665 + C2668 - C2667) * C31010 +
             (C2670 - C2669 + C2672 - C2671) * C32093 + C4960 * C31002 +
             C4961 * C32100 + C12918 * C31016 + C12919 * C23811) *
                C15419 +
            ((C2674 - C2673 + C2676 - C2675) * C31010 +
             (C2678 - C2677 + C2680 - C2679) * C32093 + C4962 * C31002 +
             C4963 * C32100 + (C4534 - C4535 + C4536 - C4537) * C31016 +
             (C4538 - C4539 + C4540 - C4541) * C23811) *
                C31921) *
               C577 +
           ((C4958 * C31010 + C4959 * C32093 + C12516 * C31002 +
             C12517 * C32100 + (C12507 - C12506 + C12509 - C12508) * C31016 +
             (C12511 - C12510 + C12513 - C12512) * C23811) *
                C15419 +
            (C4212 * C31010 + C4213 * C32093 +
             (C4535 - C4534 + C4537 - C4536) * C31002 +
             (C4539 - C4538 + C4541 - C4540) * C32100 +
             (C32251 * C2028 - C2662 * C2020 + C32055 * C2545 - C2663 * C2540) *
                 C31016 +
             (C32251 * C2038 - C2662 * C2029 + C32055 * C2549 - C2663 * C2546) *
                 C23811) *
                C31921) *
               C578) *
              C31956 * C474)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C31010 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C32093 +
            (C4510 - C4511 + C4512 - C4513) * C31002 +
            (C4514 - C4515 + C4516 - C4517) * C32100 + C12514 * C31016 +
            C12515 * C23811) *
               C15419 +
           ((C2665 - C2666 + C2667 - C2668) * C31010 +
            (C2669 - C2670 + C2671 - C2672) * C32093 + C4958 * C31002 +
            C4959 * C32100 + C12516 * C31016 + C12517 * C23811) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C2666 - C2665 + C2668 - C2667) * C31010 +
            (C2670 - C2669 + C2672 - C2671) * C32093 + C4960 * C31002 +
            C4961 * C32100 + C12918 * C31016 + C12919 * C23811) *
               C15419 +
           ((C2674 - C2673 + C2676 - C2675) * C31010 +
            (C2678 - C2677 + C2680 - C2679) * C32093 + C4962 * C31002 +
            C4963 * C32100 + (C4534 - C4535 + C4536 - C4537) * C31016 +
            (C4538 - C4539 + C4540 - C4541) * C23811) *
               C31921) *
              C31970 * C31956 * C111 +
          ((C2705 * C31010 + C2706 * C32093 + C4212 * C31002 + C4213 * C32100 +
            (C4535 - C4534 + C4537 - C4536) * C31016 +
            (C4539 - C4538 + C4541 - C4540) * C23811) *
               C15419 +
           (C2707 * C31010 + C2708 * C32093 +
            (C3212 - C3211 + C3214 - C3213) * C31002 +
            (C3216 - C3215 + C3218 - C3217) * C32100 +
            (C32251 * C375 - C2662 * C357 + C32055 * C2213 - C2663 * C2212) *
                C31016 +
            (C32251 * C387 - C2662 * C376 + C32055 * C2215 - C2663 * C2214) *
                C23811) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C31010 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C32093 +
            (C4510 - C4511 + C4512 - C4513) * C31002 +
            (C4514 - C4515 + C4516 - C4517) * C32100 + C12514 * C31016 +
            C12515 * C23811) *
               C15419 +
           ((C2665 - C2666 + C2667 - C2668) * C31010 +
            (C2669 - C2670 + C2671 - C2672) * C32093 + C4958 * C31002 +
            C4959 * C32100 + C12516 * C31016 + C12517 * C23811) *
               C31921) *
              C31970 * C240 +
          (((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                C31010 +
            (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                C32093 +
            (C5158 - C5159 + C5160 - C5161) * C31002 +
            (C5162 - C5163 + C5164 - C5165) * C32100 +
            (C13114 - C13115 + C13116 - C13117) * C31016 +
            (C13118 - C13119 + C13120 - C13121) * C23811) *
               C15419 +
           ((C3041 - C3042 + C3043 - C3044) * C31010 +
            (C3045 - C3046 + C3047 - C3048) * C32093 +
            (C4736 - C4737 + C4738 - C4739) * C31002 +
            (C4740 - C4741 + C4742 - C4743) * C32100 +
            (C12712 - C12713 + C12714 - C12715) * C31016 +
            (C12716 - C12717 + C12718 - C12719) * C23811) *
               C31921) *
              C31970 * C241 +
          (((C32251 * C264 - C2662 * C249 + C32055 * C985 - C2663 * C979) *
                C31010 +
            (C32251 * C279 - C2662 * C265 + C32055 * C997 - C2663 * C986) *
                C32093 +
            (C32251 * C1122 - C2662 * C1113 + C32055 * C1646 - C2663 * C1643) *
                C31002 +
            (C32251 * C1140 - C2662 * C1123 + C32055 * C1652 - C2663 * C1647) *
                C32100 +
            (C32251 * C1129 - C2662 * C1117 + C32055 * C6249 - C2663 * C6245) *
                C31016 +
            (C32251 * C1144 - C2662 * C1131 + C32055 * C6254 - C2663 * C6251) *
                C23811) *
               C15419 +
           ((C32251 * C266 - C2662 * C250 + C32055 * C987 - C2663 * C980) *
                C31010 +
            (C32251 * C280 - C2662 * C267 + C32055 * C998 - C2663 * C988) *
                C32093 +
            (C32251 * C1124 - C2662 * C1114 + C32055 * C1648 - C2663 * C1644) *
                C31002 +
            (C32251 * C1141 - C2662 * C1125 + C32055 * C1653 - C2663 * C1649) *
                C32100 +
            (C32251 * C1133 - C2662 * C1119 + C32055 * C7049 - C2663 * C7048) *
                C31016 +
            (C32251 * C1146 - C2662 * C1135 + C32055 * C7051 - C2663 * C7050) *
                C23811) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
              C32282 * C264 - C819 * C249) *
                 C20326 +
             (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
              C32282 * C279 - C819 * C265) *
                 C20324 +
             (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C20327 +
             (C11052 - C11053 + C11054 - C11055 + C11056 - C11057) * C32097) *
                C15419 +
            ((C821 - C822 + C823 - C824 + C825 - C826) * C20326 +
             (C827 - C828 + C829 - C830 + C831 - C832) * C20324 +
             (C1475 - C1474 + C1477 - C1476 + C1479 - C1478) * C20327 +
             (C1481 - C1480 + C1483 - C1482 + C1485 - C1484) * C32097) *
                C31921) *
               C31970 * C471 +
           (((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
              C819 * C979 - C32282 * C985) *
                 C20326 +
             (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
              C819 * C986 - C32282 * C997) *
                 C20324 +
             (C11542 - C11543 + C11544 - C11545 + C11546 - C11547) * C20327 +
             (C11548 - C11549 + C11550 - C11551 + C11552 - C11553) * C32097) *
                C15419 +
            ((C1300 - C1301 + C1302 - C1303 + C1304 - C1305) * C20326 +
             (C1306 - C1307 + C1308 - C1309 + C1310 - C1311) * C20324 +
             (C21561 - C21562 + C21563 - C21564 + C21565 - C21566) * C20327 +
             (C21567 - C21568 + C21569 - C21570 + C21571 - C21572) * C32097) *
                C31921) *
               C31970 * C472) *
              C473 +
          ((((C822 - C821 + C824 - C823 + C826 - C825) * C20326 +
             (C828 - C827 + C830 - C829 + C832 - C831) * C20324 +
             (C1474 - C1475 + C1476 - C1477 + C1478 - C1479) * C20327 +
             (C1480 - C1481 + C1482 - C1483 + C1484 - C1485) * C32097) *
                C15419 +
            ((C834 - C833 + C836 - C835 + C838 - C837) * C20326 +
             (C840 - C839 + C842 - C841 + C844 - C843) * C20324 +
             (C1486 - C1487 + C1488 - C1489 + C1490 - C1491) * C20327 +
             (C1492 - C1493 + C1494 - C1495 + C1496 - C1497) * C32097) *
                C31921) *
               C31970 * C471 +
           (((C1301 - C1300 + C1303 - C1302 + C1305 - C1304) * C20326 +
             (C1307 - C1306 + C1309 - C1308 + C1311 - C1310) * C20324 +
             (C21562 - C21561 + C21564 - C21563 + C21566 - C21565) * C20327 +
             (C21568 - C21567 + C21570 - C21569 + C21572 - C21571) * C32097) *
                C15419 +
            ((C1313 - C1312 + C1315 - C1314 + C1317 - C1316) * C20326 +
             (C1319 - C1318 + C1321 - C1320 + C1323 - C1322) * C20324 +
             (C32317 * C690 - C817 * C683 + C32305 * C1126 - C818 * C1115 +
              C32282 * C1650 - C819 * C1645) *
                 C20327 +
             (C32317 * C698 - C817 * C691 + C32305 * C1142 - C818 * C1127 +
              C32282 * C1654 - C819 * C1651) *
                 C32097) *
                C31921) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C20326 +
             (C31993 * C136 - C113 * C123) * C20324 + (C2043 - C2044) * C20327 +
             (C2045 - C2046) * C32097) *
                C32323 +
            ((C144 - C145) * C20326 + (C146 - C147) * C20324 + C2383 * C20327 +
             C2384 * C32097) *
                C32316 +
            C20341 * C32303 + C20342 * C32286) *
               C31970 * C471 +
           (((C113 * C244 - C31993 * C254) * C20326 +
             (C113 * C255 - C31993 * C274) * C20324 + (C2551 - C2552) * C20327 +
             (C2553 - C2554) * C32097) *
                C32323 +
            ((C480 - C481) * C20326 + (C482 - C483) * C20324 +
             (C2217 - C2218) * C20327 + (C2219 - C2220) * C32097) *
                C32316 +
            ((C484 - C485) * C20326 + (C486 - C487) * C20324 +
             (C2225 - C2226) * C20327 + (C2227 - C2228) * C32097) *
                C32303 +
            ((C488 - C489) * C20326 + (C490 - C491) * C20324 +
             (C3793 - C3794) * C20327 + (C3795 - C3796) * C32097) *
                C32286) *
               C31970 * C472) *
              C473 +
          ((((C145 - C144) * C20326 + (C147 - C146) * C20324 + C2385 * C20327 +
             C2386 * C32097) *
                C32323 +
            ((C149 - C148) * C20326 + (C151 - C150) * C20324 + C2389 * C20327 +
             C2390 * C32097) *
                C32316 +
            ((C153 - C152) * C20326 + (C155 - C154) * C20324 + C3927 * C20327 +
             C3928 * C32097) *
                C32303 +
            ((C157 - C156) * C20326 + (C159 - C158) * C20324 +
             (C596 - C597) * C20327 + (C598 - C599) * C32097) *
                C32286) *
               C31970 * C471 +
           (((C481 - C480) * C20326 + (C483 - C482) * C20324 +
             (C2218 - C2217) * C20327 + (C2220 - C2219) * C32097) *
                C32323 +
            ((C485 - C484) * C20326 + (C487 - C486) * C20324 +
             (C2226 - C2225) * C20327 + (C2228 - C2227) * C32097) *
                C32316 +
            ((C489 - C488) * C20326 + (C491 - C490) * C20324 +
             (C3794 - C3793) * C20327 + (C3796 - C3795) * C32097) *
                C32303 +
            ((C493 - C492) * C20326 + (C495 - C494) * C20324 +
             (C31993 * C694 - C113 * C685) * C20327 +
             (C31993 * C700 - C113 * C695) * C32097) *
                C32286) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C22082 +
             (C31993 * C136 - C113 * C123) * C32325 + (C2043 - C2044) * C22083 +
             (C2045 - C2046) * C32322 + C2065 * C22084 + C2066 * C32313 +
             C11770 * C22085 + C11771 * C32298) *
                C15419 +
            ((C144 - C145) * C22082 + (C146 - C147) * C32325 + C2383 * C22083 +
             C2384 * C32322 + C2051 * C22084 + C2052 * C32313 +
             C13424 * C22085 + C13425 * C32298) *
                C31921) *
               C31970 * C471 +
           (((C113 * C244 - C31993 * C254) * C22082 +
             (C113 * C255 - C31993 * C274) * C32325 + (C2551 - C2552) * C22083 +
             (C2553 - C2554) * C32322 + (C2555 - C2556) * C22084 +
             (C2557 - C2558) * C32313 + (C12044 - C12045) * C22085 +
             (C12046 - C12047) * C32298) *
                C15419 +
            ((C480 - C481) * C22082 + (C482 - C483) * C32325 +
             (C2217 - C2218) * C22083 + (C2219 - C2220) * C32322 +
             (C2221 - C2222) * C22084 + (C2223 - C2224) * C32313 +
             (C13556 - C13557) * C22085 + (C13558 - C13559) * C32298) *
                C31921) *
               C31970 * C472) *
              C473 +
          ((((C145 - C144) * C22082 + (C147 - C146) * C32325 + C2385 * C22083 +
             C2386 * C32322 + C2387 * C22084 + C2388 * C32313 +
             C13690 * C22085 + C13691 * C32298) *
                C15419 +
            ((C149 - C148) * C22082 + (C151 - C150) * C32325 + C2389 * C22083 +
             C2390 * C32322 + C2391 * C22084 + C2392 * C32313 +
             (C2061 - C2062) * C22085 + (C2063 - C2064) * C32298) *
                C31921) *
               C31970 * C471 +
           (((C481 - C480) * C22082 + (C483 - C482) * C32325 +
             (C2218 - C2217) * C22083 + (C2220 - C2219) * C32322 +
             (C2222 - C2221) * C22084 + (C2224 - C2223) * C32313 +
             (C13557 - C13556) * C22085 + (C13559 - C13558) * C32298) *
                C15419 +
            ((C485 - C484) * C22082 + (C487 - C486) * C32325 +
             (C2226 - C2225) * C22083 + (C2228 - C2227) * C32322 +
             (C2230 - C2229) * C22084 + (C2232 - C2231) * C32313 +
             (C31993 * C2545 - C113 * C2540) * C22085 +
             (C31993 * C2549 - C113 * C2546) * C32298) *
                C31921) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
              C32282 * C264 - C819 * C249) *
                 C20326 +
             (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
              C32282 * C279 - C819 * C265) *
                 C20324 +
             (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C20327 +
             (C11052 - C11053 + C11054 - C11055 + C11056 - C11057) * C32097) *
                C15419 +
            ((C821 - C822 + C823 - C824 + C825 - C826) * C20326 +
             (C827 - C828 + C829 - C830 + C831 - C832) * C20324 +
             C21783 * C20327 + C21784 * C32097) *
                C31921) *
               C577 +
           (((C11047 - C11046 + C11049 - C11048 + C11051 - C11050) * C20326 +
             (C11053 - C11052 + C11055 - C11054 + C11057 - C11056) * C20324 +
             (C11059 - C11058 + C11061 - C11060 + C11063 - C11062) * C20327 +
             (C11065 - C11064 + C11067 - C11066 + C11069 - C11068) * C32097) *
                C15419 +
            (C21785 * C20326 + C21786 * C20324 +
             (C11384 - C11385 + C11386 - C11387 + C11388 - C11389) * C20327 +
             (C11390 - C11391 + C11392 - C11393 + C11394 - C11395) * C32097) *
                C31921) *
               C578) *
              C471 +
          ((((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
              C819 * C979 - C32282 * C985) *
                 C20326 +
             (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
              C819 * C986 - C32282 * C997) *
                 C20324 +
             (C11542 - C11543 + C11544 - C11545 + C11546 - C11547) * C20327 +
             (C11548 - C11549 + C11550 - C11551 + C11552 - C11553) * C32097) *
                C15419 +
            ((C1300 - C1301 + C1302 - C1303 + C1304 - C1305) * C20326 +
             (C1306 - C1307 + C1308 - C1309 + C1310 - C1311) * C20324 +
             (C21561 - C21562 + C21563 - C21564 + C21565 - C21566) * C20327 +
             (C21567 - C21568 + C21569 - C21570 + C21571 - C21572) * C32097) *
                C31921) *
               C577 +
           (((C11543 - C11542 + C11545 - C11544 + C11547 - C11546) * C20326 +
             (C11549 - C11548 + C11551 - C11550 + C11553 - C11552) * C20324 +
             (C11555 - C11554 + C11557 - C11556 + C11559 - C11558) * C20327 +
             (C11561 - C11560 + C11563 - C11562 + C11565 - C11564) * C32097) *
                C15419 +
            ((C21562 - C21561 + C21564 - C21563 + C21566 - C21565) * C20326 +
             (C21568 - C21567 + C21570 - C21569 + C21572 - C21571) * C20324 +
             (C32317 * C1132 - C817 * C1118 + C32305 * C1133 - C818 * C1119 +
              C32282 * C7049 - C819 * C7048) *
                 C20327 +
             (C32317 * C1145 - C817 * C1134 + C32305 * C1146 - C818 * C1135 +
              C32282 * C7051 - C819 * C7050) *
                 C32097) *
                C31921) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C20326 +
             (C31993 * C136 - C113 * C123) * C20324 + (C2043 - C2044) * C20327 +
             (C2045 - C2046) * C32097) *
                C32323 +
            ((C144 - C145) * C20326 + (C146 - C147) * C20324 + C2383 * C20327 +
             C2384 * C32097) *
                C32316 +
            C20341 * C32303 + C20342 * C32286) *
               C577 +
           (((C2044 - C2043) * C20326 + (C2046 - C2045) * C20324 +
             (C2048 - C2047) * C20327 + (C2050 - C2049) * C32097) *
                C32323 +
            (C2385 * C20326 + C2386 * C20324 + C2387 * C20327 +
             C2388 * C32097) *
                C32316 +
            (C2389 * C20326 + C2390 * C20324 + C2391 * C20327 +
             C2392 * C32097) *
                C32303 +
            (C3927 * C20326 + C3928 * C20324 + (C1784 - C1785) * C20327 +
             (C1786 - C1787) * C32097) *
                C32286) *
               C578) *
              C471 +
          ((((C113 * C244 - C31993 * C254) * C20326 +
             (C113 * C255 - C31993 * C274) * C20324 + (C2551 - C2552) * C20327 +
             (C2553 - C2554) * C32097) *
                C32323 +
            ((C480 - C481) * C20326 + (C482 - C483) * C20324 +
             (C2217 - C2218) * C20327 + (C2219 - C2220) * C32097) *
                C32316 +
            ((C484 - C485) * C20326 + (C486 - C487) * C20324 +
             (C2225 - C2226) * C20327 + (C2227 - C2228) * C32097) *
                C32303 +
            ((C488 - C489) * C20326 + (C490 - C491) * C20324 +
             (C3793 - C3794) * C20327 + (C3795 - C3796) * C32097) *
                C32286) *
               C577 +
           (((C2552 - C2551) * C20326 + (C2554 - C2553) * C20324 +
             (C2556 - C2555) * C20327 + (C2558 - C2557) * C32097) *
                C32323 +
            ((C2218 - C2217) * C20326 + (C2220 - C2219) * C20324 +
             (C2222 - C2221) * C20327 + (C2224 - C2223) * C32097) *
                C32316 +
            ((C2226 - C2225) * C20326 + (C2228 - C2227) * C20324 +
             (C2230 - C2229) * C20327 + (C2232 - C2231) * C32097) *
                C32303 +
            ((C3794 - C3793) * C20326 + (C3796 - C3795) * C20324 +
             (C31993 * C2213 - C113 * C2212) * C20327 +
             (C31993 * C2215 - C113 * C2214) * C32097) *
                C32286) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C22082 +
             (C31993 * C136 - C113 * C123) * C32325 + (C2043 - C2044) * C22083 +
             (C2045 - C2046) * C32322 + C2065 * C22084 + C2066 * C32313 +
             C11770 * C22085 + C11771 * C32298) *
                C15419 +
            ((C144 - C145) * C22082 + (C146 - C147) * C32325 + C2383 * C22083 +
             C2384 * C32322 + C2051 * C22084 + C2052 * C32313 +
             C13424 * C22085 + C13425 * C32298) *
                C31921) *
               C577 +
           (((C2044 - C2043) * C22082 + (C2046 - C2045) * C32325 +
             (C2048 - C2047) * C22083 + (C2050 - C2049) * C32322 +
             (C2053 - C2054) * C22084 + (C2055 - C2056) * C32313 +
             (C11773 - C11772) * C22085 + (C11775 - C11774) * C32298) *
                C15419 +
            (C2385 * C22082 + C2386 * C32325 + C2387 * C22083 + C2388 * C32322 +
             C13690 * C22084 + C13691 * C32313 + (C11954 - C11955) * C22085 +
             (C11956 - C11957) * C32298) *
                C31921) *
               C578) *
              C471 +
          ((((C113 * C244 - C31993 * C254) * C22082 +
             (C113 * C255 - C31993 * C274) * C32325 + (C2551 - C2552) * C22083 +
             (C2553 - C2554) * C32322 + (C2555 - C2556) * C22084 +
             (C2557 - C2558) * C32313 + (C12044 - C12045) * C22085 +
             (C12046 - C12047) * C32298) *
                C15419 +
            ((C480 - C481) * C22082 + (C482 - C483) * C32325 +
             (C2217 - C2218) * C22083 + (C2219 - C2220) * C32322 +
             (C2221 - C2222) * C22084 + (C2223 - C2224) * C32313 +
             (C13556 - C13557) * C22085 + (C13558 - C13559) * C32298) *
                C31921) *
               C577 +
           (((C2552 - C2551) * C22082 + (C2554 - C2553) * C32325 +
             (C2556 - C2555) * C22083 + (C2558 - C2557) * C32322 +
             (C12045 - C12044) * C22084 + (C12047 - C12046) * C32313 +
             (C12049 - C12048) * C22085 + (C12051 - C12050) * C32298) *
                C15419 +
            ((C2218 - C2217) * C22082 + (C2220 - C2219) * C32325 +
             (C2222 - C2221) * C22083 + (C2224 - C2223) * C32322 +
             (C13557 - C13556) * C22084 + (C13559 - C13558) * C32313 +
             (C31993 * C11864 - C113 * C11863) * C22085 +
             (C31993 * C11866 - C113 * C11865) * C32298) *
                C31921) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C31993 * C122 - C113 * C115) * C20326 +
                (C31993 * C136 - C113 * C123) * C20324 +
                (C2043 - C2044) * C20327 + (C2045 - C2046) * C32097) *
                   C32323 +
               ((C144 - C145) * C20326 + (C146 - C147) * C20324 +
                C2383 * C20327 + C2384 * C32097) *
                   C32316 +
               C20341 * C32303 + C20342 * C32286) *
                  C31970 * C31956 * C110 +
              (((C145 - C144) * C20326 + (C147 - C146) * C20324 +
                C2385 * C20327 + C2386 * C32097) *
                   C32323 +
               ((C149 - C148) * C20326 + (C151 - C150) * C20324 +
                C2389 * C20327 + C2390 * C32097) *
                   C32316 +
               ((C153 - C152) * C20326 + (C155 - C154) * C20324 +
                C3927 * C20327 + C3928 * C32097) *
                   C32303 +
               ((C157 - C156) * C20326 + (C159 - C158) * C20324 +
                (C596 - C597) * C20327 + (C598 - C599) * C32097) *
                   C32286) *
                  C31970 * C31956 * C111 +
              (C20341 * C32323 + C20342 * C32316 +
               (C168 * C20326 + C169 * C20324 + (C597 - C596) * C20327 +
                (C599 - C598) * C32097) *
                   C32303 +
               ((C161 - C160) * C20326 + (C163 - C162) * C20324 +
                (C31993 * C580 - C113 * C579) * C20327 +
                (C31993 * C582 - C113 * C581) * C32097) *
                   C32286) *
                  C31970 * C31956 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C31993 * C122 - C113 * C115) * C20326 +
                (C31993 * C136 - C113 * C123) * C20324 +
                (C2043 - C2044) * C20327 + (C2045 - C2046) * C32097) *
                   C32323 +
               ((C144 - C145) * C20326 + (C146 - C147) * C20324 +
                C2383 * C20327 + C2384 * C32097) *
                   C32316 +
               C20341 * C32303 + C20342 * C32286) *
                  C31970 * C240 +
              (((C113 * C244 - C31993 * C254) * C20326 +
                (C113 * C255 - C31993 * C274) * C20324 +
                (C2551 - C2552) * C20327 + (C2553 - C2554) * C32097) *
                   C32323 +
               ((C480 - C481) * C20326 + (C482 - C483) * C20324 +
                (C2217 - C2218) * C20327 + (C2219 - C2220) * C32097) *
                   C32316 +
               ((C484 - C485) * C20326 + (C486 - C487) * C20324 +
                (C2225 - C2226) * C20327 + (C2227 - C2228) * C32097) *
                   C32303 +
               ((C488 - C489) * C20326 + (C490 - C491) * C20324 +
                (C3793 - C3794) * C20327 + (C3795 - C3796) * C32097) *
                   C32286) *
                  C31970 * C241 +
              (((C31993 * C264 - C113 * C249) * C20326 +
                (C31993 * C279 - C113 * C265) * C20324 +
                (C31993 * C1122 - C113 * C1113) * C20327 +
                (C31993 * C1140 - C113 * C1123) * C32097) *
                   C32323 +
               ((C31993 * C266 - C113 * C250) * C20326 +
                (C31993 * C280 - C113 * C267) * C20324 +
                (C31993 * C1124 - C113 * C1114) * C20327 +
                (C31993 * C1141 - C113 * C1125) * C32097) *
                   C32316 +
               ((C31993 * C268 - C113 * C251) * C20326 +
                (C31993 * C281 - C113 * C269) * C20324 +
                (C31993 * C1126 - C113 * C1115) * C20327 +
                (C31993 * C1142 - C113 * C1127) * C32097) *
                   C32303 +
               ((C31993 * C270 - C113 * C252) * C20326 +
                (C31993 * C282 - C113 * C271) * C20324 +
                (C31993 * C1470 - C113 * C1469) * C20327 +
                (C31993 * C1472 - C113 * C1471) * C32097) *
                   C32286) *
                  C31970 * C242) *
             C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C20326 +
            (C31993 * C136 - C113 * C123) * C20324 + (C2043 - C2044) * C20327 +
            (C2045 - C2046) * C32097) *
               C32323 +
           ((C144 - C145) * C20326 + (C146 - C147) * C20324 + C2383 * C20327 +
            C2384 * C32097) *
               C32316 +
           C20341 * C32303 + C20342 * C32286) *
              C346 +
          (((C2044 - C2043) * C20326 + (C2046 - C2045) * C20324 +
            (C2048 - C2047) * C20327 + (C2050 - C2049) * C32097) *
               C32323 +
           (C2385 * C20326 + C2386 * C20324 + C2387 * C20327 + C2388 * C32097) *
               C32316 +
           (C2389 * C20326 + C2390 * C20324 + C2391 * C20327 + C2392 * C32097) *
               C32303 +
           (C3927 * C20326 + C3928 * C20324 + (C1784 - C1785) * C20327 +
            (C1786 - C1787) * C32097) *
               C32286) *
              C347 +
          ((C2065 * C20326 + C2066 * C20324 + C11770 * C20327 +
            C11771 * C32097) *
               C32323 +
           (C2051 * C20326 + C2052 * C20324 + C13424 * C20327 +
            C13425 * C32097) *
               C32316 +
           (C1791 * C20326 + C1792 * C20324 + (C2062 - C2061) * C20327 +
            (C2064 - C2063) * C32097) *
               C32303 +
           ((C1785 - C1784) * C20326 + (C1787 - C1786) * C20324 +
            (C31993 * C2379 - C113 * C2378) * C20327 +
            (C31993 * C2381 - C113 * C2380) * C32097) *
               C32286) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C20326 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C20324 +
            (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C20327 +
            (C11052 - C11053 + C11054 - C11055 + C11056 - C11057) * C32097) *
               C15419 +
           ((C821 - C822 + C823 - C824 + C825 - C826) * C20326 +
            (C827 - C828 + C829 - C830 + C831 - C832) * C20324 +
            (C1475 - C1474 + C1477 - C1476 + C1479 - C1478) * C20327 +
            (C1481 - C1480 + C1483 - C1482 + C1485 - C1484) * C32097) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C822 - C821 + C824 - C823 + C826 - C825) * C20326 +
            (C828 - C827 + C830 - C829 + C832 - C831) * C20324 +
            (C1474 - C1475 + C1476 - C1477 + C1478 - C1479) * C20327 +
            (C1480 - C1481 + C1482 - C1483 + C1484 - C1485) * C32097) *
               C15419 +
           ((C834 - C833 + C836 - C835 + C838 - C837) * C20326 +
            (C840 - C839 + C842 - C841 + C844 - C843) * C20324 +
            (C1486 - C1487 + C1488 - C1489 + C1490 - C1491) * C20327 +
            (C1492 - C1493 + C1494 - C1495 + C1496 - C1497) * C32097) *
               C31921) *
              C31970 * C31956 * C111 +
          ((C865 * C20326 + C866 * C20324 +
            (C1487 - C1486 + C1489 - C1488 + C1491 - C1490) * C20327 +
            (C1493 - C1492 + C1495 - C1494 + C1497 - C1496) * C32097) *
               C15419 +
           ((C846 - C845 + C848 - C847 + C850 - C849) * C20326 +
            (C852 - C851 + C854 - C853 + C856 - C855) * C20324 +
            (C32317 * C365 - C817 * C352 + C32305 * C692 - C818 * C684 +
             C32282 * C1470 - C819 * C1469) *
                C20327 +
            (C32317 * C382 - C817 * C366 + C32305 * C699 - C818 * C693 +
             C32282 * C1472 - C819 * C1471) *
                C32097) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C20326 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C20324 +
            (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C20327 +
            (C11052 - C11053 + C11054 - C11055 + C11056 - C11057) * C32097) *
               C15419 +
           ((C821 - C822 + C823 - C824 + C825 - C826) * C20326 +
            (C827 - C828 + C829 - C830 + C831 - C832) * C20324 +
            (C1475 - C1474 + C1477 - C1476 + C1479 - C1478) * C20327 +
            (C1481 - C1480 + C1483 - C1482 + C1485 - C1484) * C32097) *
               C31921) *
              C31970 * C240 +
          (((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
             C819 * C979 - C32282 * C985) *
                C20326 +
            (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
             C819 * C986 - C32282 * C997) *
                C20324 +
            (C11542 - C11543 + C11544 - C11545 + C11546 - C11547) * C20327 +
            (C11548 - C11549 + C11550 - C11551 + C11552 - C11553) * C32097) *
               C15419 +
           ((C1300 - C1301 + C1302 - C1303 + C1304 - C1305) * C20326 +
            (C1306 - C1307 + C1308 - C1309 + C1310 - C1311) * C20324 +
            (C817 * C682 - C32317 * C688 + C818 * C1114 - C32305 * C1124 +
             C819 * C1644 - C32282 * C1648) *
                C20327 +
            (C817 * C689 - C32317 * C697 + C818 * C1125 - C32305 * C1141 +
             C819 * C1649 - C32282 * C1653) *
                C32097) *
               C31921) *
              C31970 * C241 +
          (((C32317 * C264 - C817 * C249 + C32305 * C985 - C818 * C979 +
             C32282 * C991 - C819 * C982) *
                C20326 +
            (C32317 * C279 - C817 * C265 + C32305 * C997 - C818 * C986 +
             C32282 * C1000 - C819 * C992) *
                C20324 +
            (C32317 * C1122 - C817 * C1113 + C32305 * C1646 - C818 * C1643 +
             C32282 * C6247 - C819 * C6244) *
                C20327 +
            (C32317 * C1140 - C817 * C1123 + C32305 * C1652 - C818 * C1647 +
             C32282 * C6253 - C819 * C6248) *
                C32097) *
               C15419 +
           ((C32317 * C266 - C817 * C250 + C32305 * C987 - C818 * C980 +
             C32282 * C993 - C819 * C983) *
                C20326 +
            (C32317 * C280 - C817 * C267 + C32305 * C998 - C818 * C988 +
             C32282 * C1001 - C819 * C994) *
                C20324 +
            (C32317 * C1124 - C817 * C1114 + C32305 * C1648 - C818 * C1644 +
             C32282 * C6425 - C819 * C6424) *
                C20327 +
            (C32317 * C1141 - C817 * C1125 + C32305 * C1653 - C818 * C1649 +
             C32282 * C6427 - C819 * C6426) *
                C32097) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C20326 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C20324 +
            (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C20327 +
            (C11052 - C11053 + C11054 - C11055 + C11056 - C11057) * C32097) *
               C15419 +
           ((C821 - C822 + C823 - C824 + C825 - C826) * C20326 +
            (C827 - C828 + C829 - C830 + C831 - C832) * C20324 +
            (C1475 - C1474 + C1477 - C1476 + C1479 - C1478) * C20327 +
            (C1481 - C1480 + C1483 - C1482 + C1485 - C1484) * C32097) *
               C31921) *
              C346 +
          (((C11047 - C11046 + C11049 - C11048 + C11051 - C11050) * C20326 +
            (C11053 - C11052 + C11055 - C11054 + C11057 - C11056) * C20324 +
            (C11059 - C11058 + C11061 - C11060 + C11063 - C11062) * C20327 +
            (C11065 - C11064 + C11067 - C11066 + C11069 - C11068) * C32097) *
               C15419 +
           ((C1474 - C1475 + C1476 - C1477 + C1478 - C1479) * C20326 +
            (C1480 - C1481 + C1482 - C1483 + C1484 - C1485) * C20324 +
            (C11384 - C11385 + C11386 - C11387 + C11388 - C11389) * C20327 +
            (C11390 - C11391 + C11392 - C11393 + C11394 - C11395) * C32097) *
               C31921) *
              C347 +
          ((C11090 * C20326 + C11091 * C20324 +
            (C11071 - C11070 + C11073 - C11072 + C11075 - C11074) * C20327 +
            (C11077 - C11076 + C11079 - C11078 + C11081 - C11080) * C32097) *
               C15419 +
           ((C11385 - C11384 + C11387 - C11386 + C11389 - C11388) * C20326 +
            (C11391 - C11390 + C11393 - C11392 + C11395 - C11394) * C20324 +
            (C32317 * C2026 - C817 * C2019 + C32305 * C2543 - C818 * C2539 +
             C32282 * C7199 - C819 * C7198) *
                C20327 +
            (C32317 * C2037 - C817 * C2027 + C32305 * C2548 - C818 * C2544 +
             C32282 * C7201 - C819 * C7200) *
                C32097) *
               C31921) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C22082 +
            (C31993 * C136 - C113 * C123) * C32325 + (C2043 - C2044) * C22083 +
            (C2045 - C2046) * C32322 + C2065 * C22084 + C2066 * C32313 +
            C11770 * C22085 + C11771 * C32298) *
               C15419 +
           ((C144 - C145) * C22082 + (C146 - C147) * C32325 + C2383 * C22083 +
            C2384 * C32322 + C2051 * C22084 + C2052 * C32313 + C13424 * C22085 +
            C13425 * C32298) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C145 - C144) * C22082 + (C147 - C146) * C32325 + C2385 * C22083 +
            C2386 * C32322 + C2387 * C22084 + C2388 * C32313 + C13690 * C22085 +
            C13691 * C32298) *
               C15419 +
           ((C149 - C148) * C22082 + (C151 - C150) * C32325 + C2389 * C22083 +
            C2390 * C32322 + C2391 * C22084 + C2392 * C32313 +
            (C2061 - C2062) * C22085 + (C2063 - C2064) * C32298) *
               C31921) *
              C31970 * C31956 * C111 +
          ((C164 * C22082 + C165 * C32325 + C1778 * C22083 + C1779 * C32322 +
            C1791 * C22084 + C1792 * C32313 + (C2062 - C2061) * C22085 +
            (C2064 - C2063) * C32298) *
               C15419 +
           (C166 * C22082 + C167 * C32325 + C3457 * C22083 + C3458 * C32322 +
            (C1785 - C1784) * C22084 + (C1787 - C1786) * C32313 +
            (C31993 * C2379 - C113 * C2378) * C22085 +
            (C31993 * C2381 - C113 * C2380) * C32298) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C22082 +
            (C31993 * C136 - C113 * C123) * C32325 + (C2043 - C2044) * C22083 +
            (C2045 - C2046) * C32322 + C2065 * C22084 + C2066 * C32313 +
            C11770 * C22085 + C11771 * C32298) *
               C15419 +
           ((C144 - C145) * C22082 + (C146 - C147) * C32325 + C2383 * C22083 +
            C2384 * C32322 + C2051 * C22084 + C2052 * C32313 + C13424 * C22085 +
            C13425 * C32298) *
               C31921) *
              C31970 * C240 +
          (((C113 * C244 - C31993 * C254) * C22082 +
            (C113 * C255 - C31993 * C274) * C32325 + (C2551 - C2552) * C22083 +
            (C2553 - C2554) * C32322 + (C2555 - C2556) * C22084 +
            (C2557 - C2558) * C32313 + (C12044 - C12045) * C22085 +
            (C12046 - C12047) * C32298) *
               C15419 +
           ((C480 - C481) * C22082 + (C482 - C483) * C32325 +
            (C2217 - C2218) * C22083 + (C2219 - C2220) * C32322 +
            (C2221 - C2222) * C22084 + (C2223 - C2224) * C32313 +
            (C13556 - C13557) * C22085 + (C13558 - C13559) * C32298) *
               C31921) *
              C31970 * C241 +
          (((C31993 * C264 - C113 * C249) * C22082 +
            (C31993 * C279 - C113 * C265) * C32325 +
            (C31993 * C1122 - C113 * C1113) * C22083 +
            (C31993 * C1140 - C113 * C1123) * C32322 +
            (C31993 * C1129 - C113 * C1117) * C22084 +
            (C31993 * C1144 - C113 * C1131) * C32313 +
            (C31993 * C6847 - C113 * C6844) * C22085 +
            (C31993 * C6853 - C113 * C6848) * C32298) *
               C15419 +
           ((C31993 * C266 - C113 * C250) * C22082 +
            (C31993 * C280 - C113 * C267) * C32325 +
            (C31993 * C1124 - C113 * C1114) * C22083 +
            (C31993 * C1141 - C113 * C1125) * C32322 +
            (C31993 * C1133 - C113 * C1119) * C22084 +
            (C31993 * C1146 - C113 * C1135) * C32313 +
            (C31993 * C7199 - C113 * C7198) * C22085 +
            (C31993 * C7201 - C113 * C7200) * C32298) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C22082 +
            (C31993 * C136 - C113 * C123) * C32325 + (C2043 - C2044) * C22083 +
            (C2045 - C2046) * C32322 + C2065 * C22084 + C2066 * C32313 +
            C11770 * C22085 + C11771 * C32298) *
               C15419 +
           ((C144 - C145) * C22082 + (C146 - C147) * C32325 + C2383 * C22083 +
            C2384 * C32322 + C2051 * C22084 + C2052 * C32313 + C13424 * C22085 +
            C13425 * C32298) *
               C31921) *
              C346 +
          (((C2044 - C2043) * C22082 + (C2046 - C2045) * C32325 +
            (C2048 - C2047) * C22083 + (C2050 - C2049) * C32322 +
            (C2053 - C2054) * C22084 + (C2055 - C2056) * C32313 +
            (C11773 - C11772) * C22085 + (C11775 - C11774) * C32298) *
               C15419 +
           (C2385 * C22082 + C2386 * C32325 + C2387 * C22083 + C2388 * C32322 +
            C13690 * C22084 + C13691 * C32313 + (C11954 - C11955) * C22085 +
            (C11956 - C11957) * C32298) *
               C31921) *
              C347 +
          ((C2065 * C22082 + C2066 * C32325 + C11770 * C22083 +
            C11771 * C32322 + C11780 * C22084 + C11781 * C32313 +
            (C11777 - C11776) * C22085 + (C11779 - C11778) * C32298) *
               C15419 +
           (C2051 * C22082 + C2052 * C32325 + C13424 * C22083 +
            C13425 * C32322 + (C11955 - C11954) * C22084 +
            (C11957 - C11956) * C32313 +
            (C31993 * C11950 - C113 * C11949) * C22085 +
            (C31993 * C11952 - C113 * C11951) * C32298) *
               C31921) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
              C32282 * C264 - C819 * C249) *
                 C20326 +
             (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
              C32282 * C279 - C819 * C265) *
                 C20324 +
             (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C20327 +
             (C11052 - C11053 + C11054 - C11055 + C11056 - C11057) * C32097) *
                C15419 +
            ((C821 - C822 + C823 - C824 + C825 - C826) * C20326 +
             (C827 - C828 + C829 - C830 + C831 - C832) * C20324 +
             C21783 * C20327 + C21784 * C32097) *
                C31921) *
               C577 +
           (((C11047 - C11046 + C11049 - C11048 + C11051 - C11050) * C20326 +
             (C11053 - C11052 + C11055 - C11054 + C11057 - C11056) * C20324 +
             (C11059 - C11058 + C11061 - C11060 + C11063 - C11062) * C20327 +
             (C11065 - C11064 + C11067 - C11066 + C11069 - C11068) * C32097) *
                C15419 +
            (C21785 * C20326 + C21786 * C20324 +
             (C11384 - C11385 + C11386 - C11387 + C11388 - C11389) * C20327 +
             (C11390 - C11391 + C11392 - C11393 + C11394 - C11395) * C32097) *
                C31921) *
               C578) *
              C31956 * C473 +
          ((((C822 - C821 + C824 - C823 + C826 - C825) * C20326 +
             (C828 - C827 + C830 - C829 + C832 - C831) * C20324 +
             C21785 * C20327 + C21786 * C32097) *
                C15419 +
            ((C834 - C833 + C836 - C835 + C838 - C837) * C20326 +
             (C840 - C839 + C842 - C841 + C844 - C843) * C20324 +
             (C1486 - C1487 + C1488 - C1489 + C1490 - C1491) * C20327 +
             (C1492 - C1493 + C1494 - C1495 + C1496 - C1497) * C32097) *
                C31921) *
               C577 +
           ((C21783 * C20326 + C21784 * C20324 +
             (C11385 - C11384 + C11387 - C11386 + C11389 - C11388) * C20327 +
             (C11391 - C11390 + C11393 - C11392 + C11395 - C11394) * C32097) *
                C15419 +
            ((C1487 - C1486 + C1489 - C1488 + C1491 - C1490) * C20326 +
             (C1493 - C1492 + C1495 - C1494 + C1497 - C1496) * C20324 +
             (C32317 * C373 - C817 * C356 + C32305 * C1136 - C818 * C1120 +
              C32282 * C1137 - C819 * C1121) *
                 C20327 +
             (C32317 * C386 - C817 * C374 + C32305 * C1147 - C818 * C1138 +
              C32282 * C1148 - C819 * C1139) *
                 C32097) *
                C31921) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C20326 +
             (C31993 * C136 - C113 * C123) * C20324 + (C2043 - C2044) * C20327 +
             (C2045 - C2046) * C32097) *
                C32323 +
            ((C144 - C145) * C20326 + (C146 - C147) * C20324 + C2383 * C20327 +
             C2384 * C32097) *
                C32316 +
            C20341 * C32303 + C20342 * C32286) *
               C577 +
           (((C2044 - C2043) * C20326 + (C2046 - C2045) * C20324 +
             (C2048 - C2047) * C20327 + (C2050 - C2049) * C32097) *
                C32323 +
            (C2385 * C20326 + C2386 * C20324 + C2387 * C20327 +
             C2388 * C32097) *
                C32316 +
            (C2389 * C20326 + C2390 * C20324 + C2391 * C20327 +
             C2392 * C32097) *
                C32303 +
            (C3927 * C20326 + C3928 * C20324 + (C1784 - C1785) * C20327 +
             (C1786 - C1787) * C32097) *
                C32286) *
               C578) *
              C31956 * C473 +
          ((((C145 - C144) * C20326 + (C147 - C146) * C20324 + C2385 * C20327 +
             C2386 * C32097) *
                C32323 +
            ((C149 - C148) * C20326 + (C151 - C150) * C20324 + C2389 * C20327 +
             C2390 * C32097) *
                C32316 +
            ((C153 - C152) * C20326 + (C155 - C154) * C20324 + C3927 * C20327 +
             C3928 * C32097) *
                C32303 +
            ((C157 - C156) * C20326 + (C159 - C158) * C20324 +
             (C596 - C597) * C20327 + (C598 - C599) * C32097) *
                C32286) *
               C577 +
           ((C2383 * C20326 + C2384 * C20324 + C2051 * C20327 +
             C2052 * C32097) *
                C32323 +
            (C1778 * C20326 + C1779 * C20324 + C1791 * C20327 +
             C1792 * C32097) *
                C32316 +
            (C3457 * C20326 + C3458 * C20324 + (C1785 - C1784) * C20327 +
             (C1787 - C1786) * C32097) *
                C32303 +
            ((C597 - C596) * C20326 + (C599 - C598) * C20324 +
             (C31993 * C377 - C113 * C358) * C20327 +
             (C31993 * C388 - C113 * C378) * C32097) *
                C32286) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C22082 +
             (C31993 * C136 - C113 * C123) * C32325 + (C2043 - C2044) * C22083 +
             (C2045 - C2046) * C32322 + C2065 * C22084 + C2066 * C32313 +
             C11770 * C22085 + C11771 * C32298) *
                C15419 +
            ((C144 - C145) * C22082 + (C146 - C147) * C32325 + C2383 * C22083 +
             C2384 * C32322 + C2051 * C22084 + C2052 * C32313 +
             C13424 * C22085 + C13425 * C32298) *
                C31921) *
               C577 +
           (((C2044 - C2043) * C22082 + (C2046 - C2045) * C32325 +
             (C2048 - C2047) * C22083 + (C2050 - C2049) * C32322 +
             (C2053 - C2054) * C22084 + (C2055 - C2056) * C32313 +
             (C11773 - C11772) * C22085 + (C11775 - C11774) * C32298) *
                C15419 +
            (C2385 * C22082 + C2386 * C32325 + C2387 * C22083 + C2388 * C32322 +
             C13690 * C22084 + C13691 * C32313 + (C11954 - C11955) * C22085 +
             (C11956 - C11957) * C32298) *
                C31921) *
               C578) *
              C31956 * C473 +
          ((((C145 - C144) * C22082 + (C147 - C146) * C32325 + C2385 * C22083 +
             C2386 * C32322 + C2387 * C22084 + C2388 * C32313 +
             C13690 * C22085 + C13691 * C32298) *
                C15419 +
            ((C149 - C148) * C22082 + (C151 - C150) * C32325 + C2389 * C22083 +
             C2390 * C32322 + C2391 * C22084 + C2392 * C32313 +
             (C2061 - C2062) * C22085 + (C2063 - C2064) * C32298) *
                C31921) *
               C577 +
           ((C2383 * C22082 + C2384 * C32325 + C2051 * C22083 + C2052 * C32322 +
             C13424 * C22084 + C13425 * C32313 + (C11955 - C11954) * C22085 +
             (C11957 - C11956) * C32298) *
                C15419 +
            (C1778 * C22082 + C1779 * C32325 + C1791 * C22083 + C1792 * C32322 +
             (C2062 - C2061) * C22084 + (C2064 - C2063) * C32313 +
             (C31993 * C2034 - C113 * C2023) * C22085 +
             (C31993 * C2041 - C113 * C2035) * C32298) *
                C31921) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C20326 +
            (C31993 * C136 - C113 * C123) * C20324 + (C2043 - C2044) * C20327 +
            (C2045 - C2046) * C32097) *
               C32323 +
           ((C144 - C145) * C20326 + (C146 - C147) * C20324 + C2383 * C20327 +
            C2384 * C32097) *
               C32316 +
           C20341 * C32303 + C20342 * C32286) *
              C31970 * C240 +
          (((C113 * C244 - C31993 * C254) * C20326 +
            (C113 * C255 - C31993 * C274) * C20324 + (C2551 - C2552) * C20327 +
            (C2553 - C2554) * C32097) *
               C32323 +
           ((C480 - C481) * C20326 + (C482 - C483) * C20324 +
            (C2217 - C2218) * C20327 + (C2219 - C2220) * C32097) *
               C32316 +
           ((C484 - C485) * C20326 + (C486 - C487) * C20324 +
            (C2225 - C2226) * C20327 + (C2227 - C2228) * C32097) *
               C32303 +
           ((C488 - C489) * C20326 + (C490 - C491) * C20324 +
            (C3793 - C3794) * C20327 + (C3795 - C3796) * C32097) *
               C32286) *
              C31970 * C241 +
          (((C31993 * C264 - C113 * C249) * C20326 +
            (C31993 * C279 - C113 * C265) * C20324 +
            (C31993 * C1122 - C113 * C1113) * C20327 +
            (C31993 * C1140 - C113 * C1123) * C32097) *
               C32323 +
           ((C31993 * C266 - C113 * C250) * C20326 +
            (C31993 * C280 - C113 * C267) * C20324 +
            (C31993 * C1124 - C113 * C1114) * C20327 +
            (C31993 * C1141 - C113 * C1125) * C32097) *
               C32316 +
           ((C31993 * C268 - C113 * C251) * C20326 +
            (C31993 * C281 - C113 * C269) * C20324 +
            (C31993 * C1126 - C113 * C1115) * C20327 +
            (C31993 * C1142 - C113 * C1127) * C32097) *
               C32303 +
           ((C31993 * C270 - C113 * C252) * C20326 +
            (C31993 * C282 - C113 * C271) * C20324 +
            (C31993 * C1470 - C113 * C1469) * C20327 +
            (C31993 * C1472 - C113 * C1471) * C32097) *
               C32286) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C20326 +
            (C31993 * C136 - C113 * C123) * C20324 + (C2043 - C2044) * C20327 +
            (C2045 - C2046) * C32097) *
               C32323 +
           ((C144 - C145) * C20326 + (C146 - C147) * C20324 + C2383 * C20327 +
            C2384 * C32097) *
               C32316 +
           C20341 * C32303 + C20342 * C32286) *
              C31970 * C31956 * C110 +
          (((C145 - C144) * C20326 + (C147 - C146) * C20324 + C2385 * C20327 +
            C2386 * C32097) *
               C32323 +
           ((C149 - C148) * C20326 + (C151 - C150) * C20324 + C2389 * C20327 +
            C2390 * C32097) *
               C32316 +
           ((C153 - C152) * C20326 + (C155 - C154) * C20324 + C3927 * C20327 +
            C3928 * C32097) *
               C32303 +
           ((C157 - C156) * C20326 + (C159 - C158) * C20324 +
            (C596 - C597) * C20327 + (C598 - C599) * C32097) *
               C32286) *
              C31970 * C31956 * C111 +
          (C20341 * C32323 + C20342 * C32316 +
           (C168 * C20326 + C169 * C20324 + (C597 - C596) * C20327 +
            (C599 - C598) * C32097) *
               C32303 +
           ((C161 - C160) * C20326 + (C163 - C162) * C20324 +
            (C31993 * C580 - C113 * C579) * C20327 +
            (C31993 * C582 - C113 * C581) * C32097) *
               C32286) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C20326 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C20324 +
            (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C20327 +
            (C11052 - C11053 + C11054 - C11055 + C11056 - C11057) * C32097) *
               C15419 +
           ((C821 - C822 + C823 - C824 + C825 - C826) * C20326 +
            (C827 - C828 + C829 - C830 + C831 - C832) * C20324 +
            (C1475 - C1474 + C1477 - C1476 + C1479 - C1478) * C20327 +
            (C1481 - C1480 + C1483 - C1482 + C1485 - C1484) * C32097) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C822 - C821 + C824 - C823 + C826 - C825) * C20326 +
            (C828 - C827 + C830 - C829 + C832 - C831) * C20324 +
            (C1474 - C1475 + C1476 - C1477 + C1478 - C1479) * C20327 +
            (C1480 - C1481 + C1482 - C1483 + C1484 - C1485) * C32097) *
               C15419 +
           ((C834 - C833 + C836 - C835 + C838 - C837) * C20326 +
            (C840 - C839 + C842 - C841 + C844 - C843) * C20324 +
            (C1486 - C1487 + C1488 - C1489 + C1490 - C1491) * C20327 +
            (C1492 - C1493 + C1494 - C1495 + C1496 - C1497) * C32097) *
               C31921) *
              C31970 * C31956 * C111 +
          ((C865 * C20326 + C866 * C20324 +
            (C1487 - C1486 + C1489 - C1488 + C1491 - C1490) * C20327 +
            (C1493 - C1492 + C1495 - C1494 + C1497 - C1496) * C32097) *
               C15419 +
           ((C846 - C845 + C848 - C847 + C850 - C849) * C20326 +
            (C852 - C851 + C854 - C853 + C856 - C855) * C20324 +
            (C32317 * C365 - C817 * C352 + C32305 * C692 - C818 * C684 +
             C32282 * C1470 - C819 * C1469) *
                C20327 +
            (C32317 * C382 - C817 * C366 + C32305 * C699 - C818 * C693 +
             C32282 * C1472 - C819 * C1471) *
                C32097) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C20326 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C20324 +
            (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C20327 +
            (C11052 - C11053 + C11054 - C11055 + C11056 - C11057) * C32097) *
               C15419 +
           ((C821 - C822 + C823 - C824 + C825 - C826) * C20326 +
            (C827 - C828 + C829 - C830 + C831 - C832) * C20324 +
            (C1475 - C1474 + C1477 - C1476 + C1479 - C1478) * C20327 +
            (C1481 - C1480 + C1483 - C1482 + C1485 - C1484) * C32097) *
               C31921) *
              C31970 * C240 +
          (((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
             C819 * C979 - C32282 * C985) *
                C20326 +
            (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
             C819 * C986 - C32282 * C997) *
                C20324 +
            (C11542 - C11543 + C11544 - C11545 + C11546 - C11547) * C20327 +
            (C11548 - C11549 + C11550 - C11551 + C11552 - C11553) * C32097) *
               C15419 +
           ((C1300 - C1301 + C1302 - C1303 + C1304 - C1305) * C20326 +
            (C1306 - C1307 + C1308 - C1309 + C1310 - C1311) * C20324 +
            (C817 * C682 - C32317 * C688 + C818 * C1114 - C32305 * C1124 +
             C819 * C1644 - C32282 * C1648) *
                C20327 +
            (C817 * C689 - C32317 * C697 + C818 * C1125 - C32305 * C1141 +
             C819 * C1649 - C32282 * C1653) *
                C32097) *
               C31921) *
              C31970 * C241 +
          (((C32317 * C264 - C817 * C249 + C32305 * C985 - C818 * C979 +
             C32282 * C991 - C819 * C982) *
                C20326 +
            (C32317 * C279 - C817 * C265 + C32305 * C997 - C818 * C986 +
             C32282 * C1000 - C819 * C992) *
                C20324 +
            (C32317 * C1122 - C817 * C1113 + C32305 * C1646 - C818 * C1643 +
             C32282 * C6247 - C819 * C6244) *
                C20327 +
            (C32317 * C1140 - C817 * C1123 + C32305 * C1652 - C818 * C1647 +
             C32282 * C6253 - C819 * C6248) *
                C32097) *
               C15419 +
           ((C32317 * C266 - C817 * C250 + C32305 * C987 - C818 * C980 +
             C32282 * C993 - C819 * C983) *
                C20326 +
            (C32317 * C280 - C817 * C267 + C32305 * C998 - C818 * C988 +
             C32282 * C1001 - C819 * C994) *
                C20324 +
            (C32317 * C1124 - C817 * C1114 + C32305 * C1648 - C818 * C1644 +
             C32282 * C6425 - C819 * C6424) *
                C20327 +
            (C32317 * C1141 - C817 * C1125 + C32305 * C1653 - C818 * C1649 +
             C32282 * C6427 - C819 * C6426) *
                C32097) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C22082 +
            (C31993 * C136 - C113 * C123) * C32325 + (C2043 - C2044) * C22083 +
            (C2045 - C2046) * C32322 + C2065 * C22084 + C2066 * C32313 +
            C11770 * C22085 + C11771 * C32298) *
               C15419 +
           ((C144 - C145) * C22082 + (C146 - C147) * C32325 + C2383 * C22083 +
            C2384 * C32322 + C2051 * C22084 + C2052 * C32313 + C13424 * C22085 +
            C13425 * C32298) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C145 - C144) * C22082 + (C147 - C146) * C32325 + C2385 * C22083 +
            C2386 * C32322 + C2387 * C22084 + C2388 * C32313 + C13690 * C22085 +
            C13691 * C32298) *
               C15419 +
           ((C149 - C148) * C22082 + (C151 - C150) * C32325 + C2389 * C22083 +
            C2390 * C32322 + C2391 * C22084 + C2392 * C32313 +
            (C2061 - C2062) * C22085 + (C2063 - C2064) * C32298) *
               C31921) *
              C31970 * C31956 * C111 +
          ((C164 * C22082 + C165 * C32325 + C1778 * C22083 + C1779 * C32322 +
            C1791 * C22084 + C1792 * C32313 + (C2062 - C2061) * C22085 +
            (C2064 - C2063) * C32298) *
               C15419 +
           (C166 * C22082 + C167 * C32325 + C3457 * C22083 + C3458 * C32322 +
            (C1785 - C1784) * C22084 + (C1787 - C1786) * C32313 +
            (C31993 * C2379 - C113 * C2378) * C22085 +
            (C31993 * C2381 - C113 * C2380) * C32298) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C22082 +
            (C31993 * C136 - C113 * C123) * C32325 + (C2043 - C2044) * C22083 +
            (C2045 - C2046) * C32322 + C2065 * C22084 + C2066 * C32313 +
            C11770 * C22085 + C11771 * C32298) *
               C15419 +
           ((C144 - C145) * C22082 + (C146 - C147) * C32325 + C2383 * C22083 +
            C2384 * C32322 + C2051 * C22084 + C2052 * C32313 + C13424 * C22085 +
            C13425 * C32298) *
               C31921) *
              C31970 * C240 +
          (((C113 * C244 - C31993 * C254) * C22082 +
            (C113 * C255 - C31993 * C274) * C32325 + (C2551 - C2552) * C22083 +
            (C2553 - C2554) * C32322 + (C2555 - C2556) * C22084 +
            (C2557 - C2558) * C32313 + (C12044 - C12045) * C22085 +
            (C12046 - C12047) * C32298) *
               C15419 +
           ((C480 - C481) * C22082 + (C482 - C483) * C32325 +
            (C2217 - C2218) * C22083 + (C2219 - C2220) * C32322 +
            (C2221 - C2222) * C22084 + (C2223 - C2224) * C32313 +
            (C13556 - C13557) * C22085 + (C13558 - C13559) * C32298) *
               C31921) *
              C31970 * C241 +
          (((C31993 * C264 - C113 * C249) * C22082 +
            (C31993 * C279 - C113 * C265) * C32325 +
            (C31993 * C1122 - C113 * C1113) * C22083 +
            (C31993 * C1140 - C113 * C1123) * C32322 +
            (C31993 * C1129 - C113 * C1117) * C22084 +
            (C31993 * C1144 - C113 * C1131) * C32313 +
            (C31993 * C6847 - C113 * C6844) * C22085 +
            (C31993 * C6853 - C113 * C6848) * C32298) *
               C15419 +
           ((C31993 * C266 - C113 * C250) * C22082 +
            (C31993 * C280 - C113 * C267) * C32325 +
            (C31993 * C1124 - C113 * C1114) * C22083 +
            (C31993 * C1141 - C113 * C1125) * C32322 +
            (C31993 * C1133 - C113 * C1119) * C22084 +
            (C31993 * C1146 - C113 * C1135) * C32313 +
            (C31993 * C7199 - C113 * C7198) * C22085 +
            (C31993 * C7201 - C113 * C7200) * C32298) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C31010 +
             (C31993 * C136 - C113 * C123) * C32093 + (C2043 - C2044) * C31002 +
             (C2045 - C2046) * C32100 + C2065 * C31016 + C2066 * C23811) *
                C31916 +
            ((C144 - C145) * C31010 + (C146 - C147) * C32093 + C2383 * C31002 +
             C2384 * C32100 + C2051 * C31016 + C2052 * C23811) *
                C31924 +
            C23826 * C17320) *
               C31970 * C471 +
           (((C113 * C244 - C31993 * C254) * C31010 +
             (C113 * C255 - C31993 * C274) * C32093 + (C2551 - C2552) * C31002 +
             (C2553 - C2554) * C32100 + (C2555 - C2556) * C31016 +
             (C2557 - C2558) * C23811) *
                C31916 +
            ((C480 - C481) * C31010 + (C482 - C483) * C32093 +
             (C2217 - C2218) * C31002 + (C2219 - C2220) * C32100 +
             (C2221 - C2222) * C31016 + (C2223 - C2224) * C23811) *
                C31924 +
            ((C484 - C485) * C31010 + (C486 - C487) * C32093 +
             (C2225 - C2226) * C31002 + (C2227 - C2228) * C32100 +
             (C2229 - C2230) * C31016 + (C2231 - C2232) * C23811) *
                C17320) *
               C31970 * C472) *
              C473 +
          ((((C145 - C144) * C31010 + (C147 - C146) * C32093 + C2385 * C31002 +
             C2386 * C32100 + C2387 * C31016 + C2388 * C23811) *
                C31916 +
            ((C149 - C148) * C31010 + (C151 - C150) * C32093 + C2389 * C31002 +
             C2390 * C32100 + C2391 * C31016 + C2392 * C23811) *
                C31924 +
            ((C153 - C152) * C31010 + (C155 - C154) * C32093 + C3927 * C31002 +
             C3928 * C32100 + (C1784 - C1785) * C31016 +
             (C1786 - C1787) * C23811) *
                C17320) *
               C31970 * C471 +
           (((C481 - C480) * C31010 + (C483 - C482) * C32093 +
             (C2218 - C2217) * C31002 + (C2220 - C2219) * C32100 +
             (C2222 - C2221) * C31016 + (C2224 - C2223) * C23811) *
                C31916 +
            ((C485 - C484) * C31010 + (C487 - C486) * C32093 +
             (C2226 - C2225) * C31002 + (C2228 - C2227) * C32100 +
             (C2230 - C2229) * C31016 + (C2232 - C2231) * C23811) *
                C31924 +
            ((C489 - C488) * C31010 + (C491 - C490) * C32093 +
             (C3794 - C3793) * C31002 + (C3796 - C3795) * C32100 +
             (C31993 * C2213 - C113 * C2212) * C31016 +
             (C31993 * C2215 - C113 * C2214) * C23811) *
                C17320) *
               C31970 * C472) *
              C474)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C31010 +
             (C31993 * C136 - C113 * C123) * C32093 + (C2043 - C2044) * C31002 +
             (C2045 - C2046) * C32100 + C2065 * C31016 + C2066 * C23811) *
                C31916 +
            ((C144 - C145) * C31010 + (C146 - C147) * C32093 + C2383 * C31002 +
             C2384 * C32100 + C2051 * C31016 + C2052 * C23811) *
                C31924 +
            C23826 * C17320) *
               C577 +
           (((C2044 - C2043) * C31010 + (C2046 - C2045) * C32093 +
             (C2048 - C2047) * C31002 + (C2050 - C2049) * C32100 +
             (C2053 - C2054) * C31016 + (C2055 - C2056) * C23811) *
                C31916 +
            (C2385 * C31010 + C2386 * C32093 + C2387 * C31002 + C2388 * C32100 +
             C13690 * C31016 + C13691 * C23811) *
                C31924 +
            (C2389 * C31010 + C2390 * C32093 + C2391 * C31002 + C2392 * C32100 +
             (C2061 - C2062) * C31016 + (C2063 - C2064) * C23811) *
                C17320) *
               C578) *
              C471 +
          ((((C113 * C244 - C31993 * C254) * C31010 +
             (C113 * C255 - C31993 * C274) * C32093 + (C2551 - C2552) * C31002 +
             (C2553 - C2554) * C32100 + (C2555 - C2556) * C31016 +
             (C2557 - C2558) * C23811) *
                C31916 +
            ((C480 - C481) * C31010 + (C482 - C483) * C32093 +
             (C2217 - C2218) * C31002 + (C2219 - C2220) * C32100 +
             (C2221 - C2222) * C31016 + (C2223 - C2224) * C23811) *
                C31924 +
            ((C484 - C485) * C31010 + (C486 - C487) * C32093 +
             (C2225 - C2226) * C31002 + (C2227 - C2228) * C32100 +
             (C2229 - C2230) * C31016 + (C2231 - C2232) * C23811) *
                C17320) *
               C577 +
           (((C2552 - C2551) * C31010 + (C2554 - C2553) * C32093 +
             (C2556 - C2555) * C31002 + (C2558 - C2557) * C32100 +
             (C12045 - C12044) * C31016 + (C12047 - C12046) * C23811) *
                C31916 +
            ((C2218 - C2217) * C31010 + (C2220 - C2219) * C32093 +
             (C2222 - C2221) * C31002 + (C2224 - C2223) * C32100 +
             (C13557 - C13556) * C31016 + (C13559 - C13558) * C23811) *
                C31924 +
            ((C2226 - C2225) * C31010 + (C2228 - C2227) * C32093 +
             (C2230 - C2229) * C31002 + (C2232 - C2231) * C32100 +
             (C31993 * C2545 - C113 * C2540) * C31016 +
             (C31993 * C2549 - C113 * C2546) * C23811) *
                C17320) *
               C578) *
              C472) *
         C31944) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C31010 +
            (C31993 * C136 - C113 * C123) * C32093 + (C2043 - C2044) * C31002 +
            (C2045 - C2046) * C32100 + C2065 * C31016 + C2066 * C23811) *
               C31916 +
           ((C144 - C145) * C31010 + (C146 - C147) * C32093 + C2383 * C31002 +
            C2384 * C32100 + C2051 * C31016 + C2052 * C23811) *
               C31924 +
           C23826 * C17320) *
              C31970 * C240 +
          (((C113 * C244 - C31993 * C254) * C31010 +
            (C113 * C255 - C31993 * C274) * C32093 + (C2551 - C2552) * C31002 +
            (C2553 - C2554) * C32100 + (C2555 - C2556) * C31016 +
            (C2557 - C2558) * C23811) *
               C31916 +
           ((C480 - C481) * C31010 + (C482 - C483) * C32093 +
            (C2217 - C2218) * C31002 + (C2219 - C2220) * C32100 +
            (C2221 - C2222) * C31016 + (C2223 - C2224) * C23811) *
               C31924 +
           ((C484 - C485) * C31010 + (C486 - C487) * C32093 +
            (C2225 - C2226) * C31002 + (C2227 - C2228) * C32100 +
            (C2229 - C2230) * C31016 + (C2231 - C2232) * C23811) *
               C17320) *
              C31970 * C241 +
          (((C31993 * C264 - C113 * C249) * C31010 +
            (C31993 * C279 - C113 * C265) * C32093 +
            (C31993 * C1122 - C113 * C1113) * C31002 +
            (C31993 * C1140 - C113 * C1123) * C32100 +
            (C31993 * C1129 - C113 * C1117) * C31016 +
            (C31993 * C1144 - C113 * C1131) * C23811) *
               C31916 +
           ((C31993 * C266 - C113 * C250) * C31010 +
            (C31993 * C280 - C113 * C267) * C32093 +
            (C31993 * C1124 - C113 * C1114) * C31002 +
            (C31993 * C1141 - C113 * C1125) * C32100 +
            (C31993 * C1133 - C113 * C1119) * C31016 +
            (C31993 * C1146 - C113 * C1135) * C23811) *
               C31924 +
           ((C31993 * C268 - C113 * C251) * C31010 +
            (C31993 * C281 - C113 * C269) * C32093 +
            (C31993 * C1126 - C113 * C1115) * C31002 +
            (C31993 * C1142 - C113 * C1127) * C32100 +
            (C31993 * C1137 - C113 * C1121) * C31016 +
            (C31993 * C1148 - C113 * C1139) * C23811) *
               C17320) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C31010 +
            (C31993 * C136 - C113 * C123) * C32093 + (C2043 - C2044) * C31002 +
            (C2045 - C2046) * C32100 + C2065 * C31016 + C2066 * C23811) *
               C31916 +
           ((C144 - C145) * C31010 + (C146 - C147) * C32093 + C2383 * C31002 +
            C2384 * C32100 + C2051 * C31016 + C2052 * C23811) *
               C31924 +
           C23826 * C17320) *
              C31970 * C31956 * C110 +
          (((C145 - C144) * C31010 + (C147 - C146) * C32093 + C2385 * C31002 +
            C2386 * C32100 + C2387 * C31016 + C2388 * C23811) *
               C31916 +
           ((C149 - C148) * C31010 + (C151 - C150) * C32093 + C2389 * C31002 +
            C2390 * C32100 + C2391 * C31016 + C2392 * C23811) *
               C31924 +
           ((C153 - C152) * C31010 + (C155 - C154) * C32093 + C3927 * C31002 +
            C3928 * C32100 + (C1784 - C1785) * C31016 +
            (C1786 - C1787) * C23811) *
               C17320) *
              C31970 * C31956 * C111 +
          (C23826 * C31916 +
           (C166 * C31010 + C167 * C32093 + C3457 * C31002 + C3458 * C32100 +
            (C1785 - C1784) * C31016 + (C1787 - C1786) * C23811) *
               C31924 +
           (C168 * C31010 + C169 * C32093 + (C597 - C596) * C31002 +
            (C599 - C598) * C32100 + (C31993 * C377 - C113 * C358) * C31016 +
            (C31993 * C388 - C113 * C378) * C23811) *
               C17320) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C31010 +
            (C31993 * C136 - C113 * C123) * C32093 + (C2043 - C2044) * C31002 +
            (C2045 - C2046) * C32100 + C2065 * C31016 + C2066 * C23811) *
               C31916 +
           ((C144 - C145) * C31010 + (C146 - C147) * C32093 + C2383 * C31002 +
            C2384 * C32100 + C2051 * C31016 + C2052 * C23811) *
               C31924 +
           C23826 * C17320) *
              C346 +
          (((C2044 - C2043) * C31010 + (C2046 - C2045) * C32093 +
            (C2048 - C2047) * C31002 + (C2050 - C2049) * C32100 +
            (C2053 - C2054) * C31016 + (C2055 - C2056) * C23811) *
               C31916 +
           (C2385 * C31010 + C2386 * C32093 + C2387 * C31002 + C2388 * C32100 +
            C13690 * C31016 + C13691 * C23811) *
               C31924 +
           (C2389 * C31010 + C2390 * C32093 + C2391 * C31002 + C2392 * C32100 +
            (C2061 - C2062) * C31016 + (C2063 - C2064) * C23811) *
               C17320) *
              C347 +
          ((C2065 * C31010 + C2066 * C32093 + C11770 * C31002 +
            C11771 * C32100 + C11780 * C31016 + C11781 * C23811) *
               C31916 +
           (C2051 * C31010 + C2052 * C32093 + C13424 * C31002 +
            C13425 * C32100 + (C11955 - C11954) * C31016 +
            (C11957 - C11956) * C23811) *
               C31924 +
           (C1791 * C31010 + C1792 * C32093 + (C2062 - C2061) * C31002 +
            (C2064 - C2063) * C32100 +
            (C31993 * C2034 - C113 * C2023) * C31016 +
            (C31993 * C2041 - C113 * C2035) * C23811) *
               C17320) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C31010 +
             (C31993 * C136 - C113 * C123) * C32093 + (C2043 - C2044) * C31002 +
             (C2045 - C2046) * C32100 + C2065 * C31016 + C2066 * C23811) *
                C31916 +
            ((C144 - C145) * C31010 + (C146 - C147) * C32093 + C2383 * C31002 +
             C2384 * C32100 + C2051 * C31016 + C2052 * C23811) *
                C31924 +
            C23826 * C17320) *
               C577 +
           (((C2044 - C2043) * C31010 + (C2046 - C2045) * C32093 +
             (C2048 - C2047) * C31002 + (C2050 - C2049) * C32100 +
             (C2053 - C2054) * C31016 + (C2055 - C2056) * C23811) *
                C31916 +
            (C2385 * C31010 + C2386 * C32093 + C2387 * C31002 + C2388 * C32100 +
             C13690 * C31016 + C13691 * C23811) *
                C31924 +
            (C2389 * C31010 + C2390 * C32093 + C2391 * C31002 + C2392 * C32100 +
             (C2061 - C2062) * C31016 + (C2063 - C2064) * C23811) *
                C17320) *
               C578) *
              C31956 * C473 +
          ((((C145 - C144) * C31010 + (C147 - C146) * C32093 + C2385 * C31002 +
             C2386 * C32100 + C2387 * C31016 + C2388 * C23811) *
                C31916 +
            ((C149 - C148) * C31010 + (C151 - C150) * C32093 + C2389 * C31002 +
             C2390 * C32100 + C2391 * C31016 + C2392 * C23811) *
                C31924 +
            ((C153 - C152) * C31010 + (C155 - C154) * C32093 + C3927 * C31002 +
             C3928 * C32100 + (C1784 - C1785) * C31016 +
             (C1786 - C1787) * C23811) *
                C17320) *
               C577 +
           ((C2383 * C31010 + C2384 * C32093 + C2051 * C31002 + C2052 * C32100 +
             C13424 * C31016 + C13425 * C23811) *
                C31916 +
            (C1778 * C31010 + C1779 * C32093 + C1791 * C31002 + C1792 * C32100 +
             (C2062 - C2061) * C31016 + (C2064 - C2063) * C23811) *
                C31924 +
            (C3457 * C31010 + C3458 * C32093 + (C1785 - C1784) * C31002 +
             (C1787 - C1786) * C32100 +
             (C31993 * C2379 - C113 * C2378) * C31016 +
             (C31993 * C2381 - C113 * C2380) * C23811) *
                C17320) *
               C578) *
              C31956 * C474)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C31010 +
            (C31993 * C136 - C113 * C123) * C32093 + (C2043 - C2044) * C31002 +
            (C2045 - C2046) * C32100 + C2065 * C31016 + C2066 * C23811) *
               C31916 +
           ((C144 - C145) * C31010 + (C146 - C147) * C32093 + C2383 * C31002 +
            C2384 * C32100 + C2051 * C31016 + C2052 * C23811) *
               C31924 +
           C23826 * C17320) *
              C31970 * C31956 * C110 +
          (((C145 - C144) * C31010 + (C147 - C146) * C32093 + C2385 * C31002 +
            C2386 * C32100 + C2387 * C31016 + C2388 * C23811) *
               C31916 +
           ((C149 - C148) * C31010 + (C151 - C150) * C32093 + C2389 * C31002 +
            C2390 * C32100 + C2391 * C31016 + C2392 * C23811) *
               C31924 +
           ((C153 - C152) * C31010 + (C155 - C154) * C32093 + C3927 * C31002 +
            C3928 * C32100 + (C1784 - C1785) * C31016 +
            (C1786 - C1787) * C23811) *
               C17320) *
              C31970 * C31956 * C111 +
          (C23826 * C31916 +
           (C166 * C31010 + C167 * C32093 + C3457 * C31002 + C3458 * C32100 +
            (C1785 - C1784) * C31016 + (C1787 - C1786) * C23811) *
               C31924 +
           (C168 * C31010 + C169 * C32093 + (C597 - C596) * C31002 +
            (C599 - C598) * C32100 + (C31993 * C377 - C113 * C358) * C31016 +
            (C31993 * C388 - C113 * C378) * C23811) *
               C17320) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C31010 +
            (C31993 * C136 - C113 * C123) * C32093 + (C2043 - C2044) * C31002 +
            (C2045 - C2046) * C32100 + C2065 * C31016 + C2066 * C23811) *
               C31916 +
           ((C144 - C145) * C31010 + (C146 - C147) * C32093 + C2383 * C31002 +
            C2384 * C32100 + C2051 * C31016 + C2052 * C23811) *
               C31924 +
           C23826 * C17320) *
              C31970 * C240 +
          (((C113 * C244 - C31993 * C254) * C31010 +
            (C113 * C255 - C31993 * C274) * C32093 + (C2551 - C2552) * C31002 +
            (C2553 - C2554) * C32100 + (C2555 - C2556) * C31016 +
            (C2557 - C2558) * C23811) *
               C31916 +
           ((C480 - C481) * C31010 + (C482 - C483) * C32093 +
            (C2217 - C2218) * C31002 + (C2219 - C2220) * C32100 +
            (C2221 - C2222) * C31016 + (C2223 - C2224) * C23811) *
               C31924 +
           ((C484 - C485) * C31010 + (C486 - C487) * C32093 +
            (C2225 - C2226) * C31002 + (C2227 - C2228) * C32100 +
            (C2229 - C2230) * C31016 + (C2231 - C2232) * C23811) *
               C17320) *
              C31970 * C241 +
          (((C31993 * C264 - C113 * C249) * C31010 +
            (C31993 * C279 - C113 * C265) * C32093 +
            (C31993 * C1122 - C113 * C1113) * C31002 +
            (C31993 * C1140 - C113 * C1123) * C32100 +
            (C31993 * C1129 - C113 * C1117) * C31016 +
            (C31993 * C1144 - C113 * C1131) * C23811) *
               C31916 +
           ((C31993 * C266 - C113 * C250) * C31010 +
            (C31993 * C280 - C113 * C267) * C32093 +
            (C31993 * C1124 - C113 * C1114) * C31002 +
            (C31993 * C1141 - C113 * C1125) * C32100 +
            (C31993 * C1133 - C113 * C1119) * C31016 +
            (C31993 * C1146 - C113 * C1135) * C23811) *
               C31924 +
           ((C31993 * C268 - C113 * C251) * C31010 +
            (C31993 * C281 - C113 * C269) * C32093 +
            (C31993 * C1126 - C113 * C1115) * C31002 +
            (C31993 * C1142 - C113 * C1127) * C32100 +
            (C31993 * C1137 - C113 * C1121) * C31016 +
            (C31993 * C1148 - C113 * C1139) * C23811) *
               C17320) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C20326 +
             (C31993 * C136 - C113 * C123) * C20324 + (C2043 - C2044) * C20327 +
             (C2045 - C2046) * C32097) *
                C32323 +
            ((C144 - C145) * C20326 + (C146 - C147) * C20324 + C2383 * C20327 +
             C2384 * C32097) *
                C32316 +
            C20341 * C32303 + C20342 * C32286) *
               C31970 * C471 +
           (((C113 * C244 - C31993 * C254) * C20326 +
             (C113 * C255 - C31993 * C274) * C20324 + (C2551 - C2552) * C20327 +
             (C2553 - C2554) * C32097) *
                C32323 +
            ((C480 - C481) * C20326 + (C482 - C483) * C20324 +
             (C2217 - C2218) * C20327 + (C2219 - C2220) * C32097) *
                C32316 +
            ((C484 - C485) * C20326 + (C486 - C487) * C20324 +
             (C2225 - C2226) * C20327 + (C2227 - C2228) * C32097) *
                C32303 +
            ((C488 - C489) * C20326 + (C490 - C491) * C20324 +
             (C3793 - C3794) * C20327 + (C3795 - C3796) * C32097) *
                C32286) *
               C31970 * C472) *
              C473 +
          ((((C145 - C144) * C20326 + (C147 - C146) * C20324 + C2385 * C20327 +
             C2386 * C32097) *
                C32323 +
            ((C149 - C148) * C20326 + (C151 - C150) * C20324 + C2389 * C20327 +
             C2390 * C32097) *
                C32316 +
            ((C153 - C152) * C20326 + (C155 - C154) * C20324 + C3927 * C20327 +
             C3928 * C32097) *
                C32303 +
            ((C157 - C156) * C20326 + (C159 - C158) * C20324 +
             (C596 - C597) * C20327 + (C598 - C599) * C32097) *
                C32286) *
               C31970 * C471 +
           (((C481 - C480) * C20326 + (C483 - C482) * C20324 +
             (C2218 - C2217) * C20327 + (C2220 - C2219) * C32097) *
                C32323 +
            ((C485 - C484) * C20326 + (C487 - C486) * C20324 +
             (C2226 - C2225) * C20327 + (C2228 - C2227) * C32097) *
                C32316 +
            ((C489 - C488) * C20326 + (C491 - C490) * C20324 +
             (C3794 - C3793) * C20327 + (C3796 - C3795) * C32097) *
                C32303 +
            ((C493 - C492) * C20326 + (C495 - C494) * C20324 +
             (C31993 * C694 - C113 * C685) * C20327 +
             (C31993 * C700 - C113 * C695) * C32097) *
                C32286) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
              C32282 * C264 - C819 * C249) *
                 C20326 +
             (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
              C32282 * C279 - C819 * C265) *
                 C20324 +
             (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C20327 +
             (C11052 - C11053 + C11054 - C11055 + C11056 - C11057) * C32097) *
                C15419 +
            ((C821 - C822 + C823 - C824 + C825 - C826) * C20326 +
             (C827 - C828 + C829 - C830 + C831 - C832) * C20324 +
             (C1475 - C1474 + C1477 - C1476 + C1479 - C1478) * C20327 +
             (C1481 - C1480 + C1483 - C1482 + C1485 - C1484) * C32097) *
                C31921) *
               C31970 * C471 +
           (((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
              C819 * C979 - C32282 * C985) *
                 C20326 +
             (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
              C819 * C986 - C32282 * C997) *
                 C20324 +
             (C11542 - C11543 + C11544 - C11545 + C11546 - C11547) * C20327 +
             (C11548 - C11549 + C11550 - C11551 + C11552 - C11553) * C32097) *
                C15419 +
            ((C1300 - C1301 + C1302 - C1303 + C1304 - C1305) * C20326 +
             (C1306 - C1307 + C1308 - C1309 + C1310 - C1311) * C20324 +
             (C21561 - C21562 + C21563 - C21564 + C21565 - C21566) * C20327 +
             (C21567 - C21568 + C21569 - C21570 + C21571 - C21572) * C32097) *
                C31921) *
               C31970 * C472) *
              C473 +
          ((((C822 - C821 + C824 - C823 + C826 - C825) * C20326 +
             (C828 - C827 + C830 - C829 + C832 - C831) * C20324 +
             (C1474 - C1475 + C1476 - C1477 + C1478 - C1479) * C20327 +
             (C1480 - C1481 + C1482 - C1483 + C1484 - C1485) * C32097) *
                C15419 +
            ((C834 - C833 + C836 - C835 + C838 - C837) * C20326 +
             (C840 - C839 + C842 - C841 + C844 - C843) * C20324 +
             (C1486 - C1487 + C1488 - C1489 + C1490 - C1491) * C20327 +
             (C1492 - C1493 + C1494 - C1495 + C1496 - C1497) * C32097) *
                C31921) *
               C31970 * C471 +
           (((C1301 - C1300 + C1303 - C1302 + C1305 - C1304) * C20326 +
             (C1307 - C1306 + C1309 - C1308 + C1311 - C1310) * C20324 +
             (C21562 - C21561 + C21564 - C21563 + C21566 - C21565) * C20327 +
             (C21568 - C21567 + C21570 - C21569 + C21572 - C21571) * C32097) *
                C15419 +
            ((C1313 - C1312 + C1315 - C1314 + C1317 - C1316) * C20326 +
             (C1319 - C1318 + C1321 - C1320 + C1323 - C1322) * C20324 +
             (C32317 * C690 - C817 * C683 + C32305 * C1126 - C818 * C1115 +
              C32282 * C1650 - C819 * C1645) *
                 C20327 +
             (C32317 * C698 - C817 * C691 + C32305 * C1142 - C818 * C1127 +
              C32282 * C1654 - C819 * C1651) *
                 C32097) *
                C31921) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C20326 +
             (C31993 * C136 - C113 * C123) * C20324 + (C2043 - C2044) * C20327 +
             (C2045 - C2046) * C32097) *
                C32323 +
            ((C144 - C145) * C20326 + (C146 - C147) * C20324 + C2383 * C20327 +
             C2384 * C32097) *
                C32316 +
            C20341 * C32303 + C20342 * C32286) *
               C577 +
           (((C2044 - C2043) * C20326 + (C2046 - C2045) * C20324 +
             (C2048 - C2047) * C20327 + (C2050 - C2049) * C32097) *
                C32323 +
            (C2385 * C20326 + C2386 * C20324 + C2387 * C20327 +
             C2388 * C32097) *
                C32316 +
            (C2389 * C20326 + C2390 * C20324 + C2391 * C20327 +
             C2392 * C32097) *
                C32303 +
            (C3927 * C20326 + C3928 * C20324 + (C1784 - C1785) * C20327 +
             (C1786 - C1787) * C32097) *
                C32286) *
               C578) *
              C471 +
          ((((C113 * C244 - C31993 * C254) * C20326 +
             (C113 * C255 - C31993 * C274) * C20324 + (C2551 - C2552) * C20327 +
             (C2553 - C2554) * C32097) *
                C32323 +
            ((C480 - C481) * C20326 + (C482 - C483) * C20324 +
             (C2217 - C2218) * C20327 + (C2219 - C2220) * C32097) *
                C32316 +
            ((C484 - C485) * C20326 + (C486 - C487) * C20324 +
             (C2225 - C2226) * C20327 + (C2227 - C2228) * C32097) *
                C32303 +
            ((C488 - C489) * C20326 + (C490 - C491) * C20324 +
             (C3793 - C3794) * C20327 + (C3795 - C3796) * C32097) *
                C32286) *
               C577 +
           (((C2552 - C2551) * C20326 + (C2554 - C2553) * C20324 +
             (C2556 - C2555) * C20327 + (C2558 - C2557) * C32097) *
                C32323 +
            ((C2218 - C2217) * C20326 + (C2220 - C2219) * C20324 +
             (C2222 - C2221) * C20327 + (C2224 - C2223) * C32097) *
                C32316 +
            ((C2226 - C2225) * C20326 + (C2228 - C2227) * C20324 +
             (C2230 - C2229) * C20327 + (C2232 - C2231) * C32097) *
                C32303 +
            ((C3794 - C3793) * C20326 + (C3796 - C3795) * C20324 +
             (C31993 * C2213 - C113 * C2212) * C20327 +
             (C31993 * C2215 - C113 * C2214) * C32097) *
                C32286) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
              C32282 * C264 - C819 * C249) *
                 C20326 +
             (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
              C32282 * C279 - C819 * C265) *
                 C20324 +
             (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C20327 +
             (C11052 - C11053 + C11054 - C11055 + C11056 - C11057) * C32097) *
                C15419 +
            ((C821 - C822 + C823 - C824 + C825 - C826) * C20326 +
             (C827 - C828 + C829 - C830 + C831 - C832) * C20324 +
             C21783 * C20327 + C21784 * C32097) *
                C31921) *
               C577 +
           (((C11047 - C11046 + C11049 - C11048 + C11051 - C11050) * C20326 +
             (C11053 - C11052 + C11055 - C11054 + C11057 - C11056) * C20324 +
             (C11059 - C11058 + C11061 - C11060 + C11063 - C11062) * C20327 +
             (C11065 - C11064 + C11067 - C11066 + C11069 - C11068) * C32097) *
                C15419 +
            (C21785 * C20326 + C21786 * C20324 +
             (C11384 - C11385 + C11386 - C11387 + C11388 - C11389) * C20327 +
             (C11390 - C11391 + C11392 - C11393 + C11394 - C11395) * C32097) *
                C31921) *
               C578) *
              C471 +
          ((((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
              C819 * C979 - C32282 * C985) *
                 C20326 +
             (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
              C819 * C986 - C32282 * C997) *
                 C20324 +
             (C11542 - C11543 + C11544 - C11545 + C11546 - C11547) * C20327 +
             (C11548 - C11549 + C11550 - C11551 + C11552 - C11553) * C32097) *
                C15419 +
            ((C1300 - C1301 + C1302 - C1303 + C1304 - C1305) * C20326 +
             (C1306 - C1307 + C1308 - C1309 + C1310 - C1311) * C20324 +
             (C21561 - C21562 + C21563 - C21564 + C21565 - C21566) * C20327 +
             (C21567 - C21568 + C21569 - C21570 + C21571 - C21572) * C32097) *
                C31921) *
               C577 +
           (((C11543 - C11542 + C11545 - C11544 + C11547 - C11546) * C20326 +
             (C11549 - C11548 + C11551 - C11550 + C11553 - C11552) * C20324 +
             (C11555 - C11554 + C11557 - C11556 + C11559 - C11558) * C20327 +
             (C11561 - C11560 + C11563 - C11562 + C11565 - C11564) * C32097) *
                C15419 +
            ((C21562 - C21561 + C21564 - C21563 + C21566 - C21565) * C20326 +
             (C21568 - C21567 + C21570 - C21569 + C21572 - C21571) * C20324 +
             (C32317 * C1132 - C817 * C1118 + C32305 * C1133 - C818 * C1119 +
              C32282 * C7049 - C819 * C7048) *
                 C20327 +
             (C32317 * C1145 - C817 * C1134 + C32305 * C1146 - C818 * C1135 +
              C32282 * C7051 - C819 * C7050) *
                 C32097) *
                C31921) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C20326 +
            (C31993 * C136 - C113 * C123) * C20324 + (C2043 - C2044) * C20327 +
            (C2045 - C2046) * C32097) *
               C32323 +
           ((C144 - C145) * C20326 + (C146 - C147) * C20324 + C2383 * C20327 +
            C2384 * C32097) *
               C32316 +
           C20341 * C32303 + C20342 * C32286) *
              C31970 * C240 +
          (((C113 * C244 - C31993 * C254) * C20326 +
            (C113 * C255 - C31993 * C274) * C20324 + (C2551 - C2552) * C20327 +
            (C2553 - C2554) * C32097) *
               C32323 +
           ((C480 - C481) * C20326 + (C482 - C483) * C20324 +
            (C2217 - C2218) * C20327 + (C2219 - C2220) * C32097) *
               C32316 +
           ((C484 - C485) * C20326 + (C486 - C487) * C20324 +
            (C2225 - C2226) * C20327 + (C2227 - C2228) * C32097) *
               C32303 +
           ((C488 - C489) * C20326 + (C490 - C491) * C20324 +
            (C3793 - C3794) * C20327 + (C3795 - C3796) * C32097) *
               C32286) *
              C31970 * C241 +
          (((C31993 * C264 - C113 * C249) * C20326 +
            (C31993 * C279 - C113 * C265) * C20324 +
            (C31993 * C1122 - C113 * C1113) * C20327 +
            (C31993 * C1140 - C113 * C1123) * C32097) *
               C32323 +
           ((C31993 * C266 - C113 * C250) * C20326 +
            (C31993 * C280 - C113 * C267) * C20324 +
            (C31993 * C1124 - C113 * C1114) * C20327 +
            (C31993 * C1141 - C113 * C1125) * C32097) *
               C32316 +
           ((C31993 * C268 - C113 * C251) * C20326 +
            (C31993 * C281 - C113 * C269) * C20324 +
            (C31993 * C1126 - C113 * C1115) * C20327 +
            (C31993 * C1142 - C113 * C1127) * C32097) *
               C32303 +
           ((C31993 * C270 - C113 * C252) * C20326 +
            (C31993 * C282 - C113 * C271) * C20324 +
            (C31993 * C1470 - C113 * C1469) * C20327 +
            (C31993 * C1472 - C113 * C1471) * C32097) *
               C32286) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C20326 +
            (C31993 * C136 - C113 * C123) * C20324 + (C2043 - C2044) * C20327 +
            (C2045 - C2046) * C32097) *
               C32323 +
           ((C144 - C145) * C20326 + (C146 - C147) * C20324 + C2383 * C20327 +
            C2384 * C32097) *
               C32316 +
           C20341 * C32303 + C20342 * C32286) *
              C31970 * C31956 * C110 +
          (((C145 - C144) * C20326 + (C147 - C146) * C20324 + C2385 * C20327 +
            C2386 * C32097) *
               C32323 +
           ((C149 - C148) * C20326 + (C151 - C150) * C20324 + C2389 * C20327 +
            C2390 * C32097) *
               C32316 +
           ((C153 - C152) * C20326 + (C155 - C154) * C20324 + C3927 * C20327 +
            C3928 * C32097) *
               C32303 +
           ((C157 - C156) * C20326 + (C159 - C158) * C20324 +
            (C596 - C597) * C20327 + (C598 - C599) * C32097) *
               C32286) *
              C31970 * C31956 * C111 +
          (C20341 * C32323 + C20342 * C32316 +
           (C168 * C20326 + C169 * C20324 + (C597 - C596) * C20327 +
            (C599 - C598) * C32097) *
               C32303 +
           ((C161 - C160) * C20326 + (C163 - C162) * C20324 +
            (C31993 * C580 - C113 * C579) * C20327 +
            (C31993 * C582 - C113 * C581) * C32097) *
               C32286) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C20326 +
            (C31993 * C136 - C113 * C123) * C20324 + (C2043 - C2044) * C20327 +
            (C2045 - C2046) * C32097) *
               C32323 +
           ((C144 - C145) * C20326 + (C146 - C147) * C20324 + C2383 * C20327 +
            C2384 * C32097) *
               C32316 +
           C20341 * C32303 + C20342 * C32286) *
              C346 +
          (((C2044 - C2043) * C20326 + (C2046 - C2045) * C20324 +
            (C2048 - C2047) * C20327 + (C2050 - C2049) * C32097) *
               C32323 +
           (C2385 * C20326 + C2386 * C20324 + C2387 * C20327 + C2388 * C32097) *
               C32316 +
           (C2389 * C20326 + C2390 * C20324 + C2391 * C20327 + C2392 * C32097) *
               C32303 +
           (C3927 * C20326 + C3928 * C20324 + (C1784 - C1785) * C20327 +
            (C1786 - C1787) * C32097) *
               C32286) *
              C347 +
          ((C2065 * C20326 + C2066 * C20324 + C11770 * C20327 +
            C11771 * C32097) *
               C32323 +
           (C2051 * C20326 + C2052 * C20324 + C13424 * C20327 +
            C13425 * C32097) *
               C32316 +
           (C1791 * C20326 + C1792 * C20324 + (C2062 - C2061) * C20327 +
            (C2064 - C2063) * C32097) *
               C32303 +
           ((C1785 - C1784) * C20326 + (C1787 - C1786) * C20324 +
            (C31993 * C2379 - C113 * C2378) * C20327 +
            (C31993 * C2381 - C113 * C2380) * C32097) *
               C32286) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C20326 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C20324 +
            (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C20327 +
            (C11052 - C11053 + C11054 - C11055 + C11056 - C11057) * C32097) *
               C15419 +
           ((C821 - C822 + C823 - C824 + C825 - C826) * C20326 +
            (C827 - C828 + C829 - C830 + C831 - C832) * C20324 +
            (C1475 - C1474 + C1477 - C1476 + C1479 - C1478) * C20327 +
            (C1481 - C1480 + C1483 - C1482 + C1485 - C1484) * C32097) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C822 - C821 + C824 - C823 + C826 - C825) * C20326 +
            (C828 - C827 + C830 - C829 + C832 - C831) * C20324 +
            (C1474 - C1475 + C1476 - C1477 + C1478 - C1479) * C20327 +
            (C1480 - C1481 + C1482 - C1483 + C1484 - C1485) * C32097) *
               C15419 +
           ((C834 - C833 + C836 - C835 + C838 - C837) * C20326 +
            (C840 - C839 + C842 - C841 + C844 - C843) * C20324 +
            (C1486 - C1487 + C1488 - C1489 + C1490 - C1491) * C20327 +
            (C1492 - C1493 + C1494 - C1495 + C1496 - C1497) * C32097) *
               C31921) *
              C31970 * C31956 * C111 +
          ((C865 * C20326 + C866 * C20324 +
            (C1487 - C1486 + C1489 - C1488 + C1491 - C1490) * C20327 +
            (C1493 - C1492 + C1495 - C1494 + C1497 - C1496) * C32097) *
               C15419 +
           ((C846 - C845 + C848 - C847 + C850 - C849) * C20326 +
            (C852 - C851 + C854 - C853 + C856 - C855) * C20324 +
            (C32317 * C365 - C817 * C352 + C32305 * C692 - C818 * C684 +
             C32282 * C1470 - C819 * C1469) *
                C20327 +
            (C32317 * C382 - C817 * C366 + C32305 * C699 - C818 * C693 +
             C32282 * C1472 - C819 * C1471) *
                C32097) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C20326 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C20324 +
            (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C20327 +
            (C11052 - C11053 + C11054 - C11055 + C11056 - C11057) * C32097) *
               C15419 +
           ((C821 - C822 + C823 - C824 + C825 - C826) * C20326 +
            (C827 - C828 + C829 - C830 + C831 - C832) * C20324 +
            (C1475 - C1474 + C1477 - C1476 + C1479 - C1478) * C20327 +
            (C1481 - C1480 + C1483 - C1482 + C1485 - C1484) * C32097) *
               C31921) *
              C31970 * C240 +
          (((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
             C819 * C979 - C32282 * C985) *
                C20326 +
            (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
             C819 * C986 - C32282 * C997) *
                C20324 +
            (C11542 - C11543 + C11544 - C11545 + C11546 - C11547) * C20327 +
            (C11548 - C11549 + C11550 - C11551 + C11552 - C11553) * C32097) *
               C15419 +
           ((C1300 - C1301 + C1302 - C1303 + C1304 - C1305) * C20326 +
            (C1306 - C1307 + C1308 - C1309 + C1310 - C1311) * C20324 +
            (C817 * C682 - C32317 * C688 + C818 * C1114 - C32305 * C1124 +
             C819 * C1644 - C32282 * C1648) *
                C20327 +
            (C817 * C689 - C32317 * C697 + C818 * C1125 - C32305 * C1141 +
             C819 * C1649 - C32282 * C1653) *
                C32097) *
               C31921) *
              C31970 * C241 +
          (((C32317 * C264 - C817 * C249 + C32305 * C985 - C818 * C979 +
             C32282 * C991 - C819 * C982) *
                C20326 +
            (C32317 * C279 - C817 * C265 + C32305 * C997 - C818 * C986 +
             C32282 * C1000 - C819 * C992) *
                C20324 +
            (C32317 * C1122 - C817 * C1113 + C32305 * C1646 - C818 * C1643 +
             C32282 * C6247 - C819 * C6244) *
                C20327 +
            (C32317 * C1140 - C817 * C1123 + C32305 * C1652 - C818 * C1647 +
             C32282 * C6253 - C819 * C6248) *
                C32097) *
               C15419 +
           ((C32317 * C266 - C817 * C250 + C32305 * C987 - C818 * C980 +
             C32282 * C993 - C819 * C983) *
                C20326 +
            (C32317 * C280 - C817 * C267 + C32305 * C998 - C818 * C988 +
             C32282 * C1001 - C819 * C994) *
                C20324 +
            (C32317 * C1124 - C817 * C1114 + C32305 * C1648 - C818 * C1644 +
             C32282 * C6425 - C819 * C6424) *
                C20327 +
            (C32317 * C1141 - C817 * C1125 + C32305 * C1653 - C818 * C1649 +
             C32282 * C6427 - C819 * C6426) *
                C32097) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C20326 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C20324 +
            (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C20327 +
            (C11052 - C11053 + C11054 - C11055 + C11056 - C11057) * C32097) *
               C15419 +
           ((C821 - C822 + C823 - C824 + C825 - C826) * C20326 +
            (C827 - C828 + C829 - C830 + C831 - C832) * C20324 +
            (C1475 - C1474 + C1477 - C1476 + C1479 - C1478) * C20327 +
            (C1481 - C1480 + C1483 - C1482 + C1485 - C1484) * C32097) *
               C31921) *
              C346 +
          (((C11047 - C11046 + C11049 - C11048 + C11051 - C11050) * C20326 +
            (C11053 - C11052 + C11055 - C11054 + C11057 - C11056) * C20324 +
            (C11059 - C11058 + C11061 - C11060 + C11063 - C11062) * C20327 +
            (C11065 - C11064 + C11067 - C11066 + C11069 - C11068) * C32097) *
               C15419 +
           ((C1474 - C1475 + C1476 - C1477 + C1478 - C1479) * C20326 +
            (C1480 - C1481 + C1482 - C1483 + C1484 - C1485) * C20324 +
            (C11384 - C11385 + C11386 - C11387 + C11388 - C11389) * C20327 +
            (C11390 - C11391 + C11392 - C11393 + C11394 - C11395) * C32097) *
               C31921) *
              C347 +
          ((C11090 * C20326 + C11091 * C20324 +
            (C11071 - C11070 + C11073 - C11072 + C11075 - C11074) * C20327 +
            (C11077 - C11076 + C11079 - C11078 + C11081 - C11080) * C32097) *
               C15419 +
           ((C11385 - C11384 + C11387 - C11386 + C11389 - C11388) * C20326 +
            (C11391 - C11390 + C11393 - C11392 + C11395 - C11394) * C20324 +
            (C32317 * C2026 - C817 * C2019 + C32305 * C2543 - C818 * C2539 +
             C32282 * C7199 - C819 * C7198) *
                C20327 +
            (C32317 * C2037 - C817 * C2027 + C32305 * C2548 - C818 * C2544 +
             C32282 * C7201 - C819 * C7200) *
                C32097) *
               C31921) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C20326 +
             (C31993 * C136 - C113 * C123) * C20324 + (C2043 - C2044) * C20327 +
             (C2045 - C2046) * C32097) *
                C32323 +
            ((C144 - C145) * C20326 + (C146 - C147) * C20324 + C2383 * C20327 +
             C2384 * C32097) *
                C32316 +
            C20341 * C32303 + C20342 * C32286) *
               C577 +
           (((C2044 - C2043) * C20326 + (C2046 - C2045) * C20324 +
             (C2048 - C2047) * C20327 + (C2050 - C2049) * C32097) *
                C32323 +
            (C2385 * C20326 + C2386 * C20324 + C2387 * C20327 +
             C2388 * C32097) *
                C32316 +
            (C2389 * C20326 + C2390 * C20324 + C2391 * C20327 +
             C2392 * C32097) *
                C32303 +
            (C3927 * C20326 + C3928 * C20324 + (C1784 - C1785) * C20327 +
             (C1786 - C1787) * C32097) *
                C32286) *
               C578) *
              C31956 * C473 +
          ((((C145 - C144) * C20326 + (C147 - C146) * C20324 + C2385 * C20327 +
             C2386 * C32097) *
                C32323 +
            ((C149 - C148) * C20326 + (C151 - C150) * C20324 + C2389 * C20327 +
             C2390 * C32097) *
                C32316 +
            ((C153 - C152) * C20326 + (C155 - C154) * C20324 + C3927 * C20327 +
             C3928 * C32097) *
                C32303 +
            ((C157 - C156) * C20326 + (C159 - C158) * C20324 +
             (C596 - C597) * C20327 + (C598 - C599) * C32097) *
                C32286) *
               C577 +
           ((C2383 * C20326 + C2384 * C20324 + C2051 * C20327 +
             C2052 * C32097) *
                C32323 +
            (C1778 * C20326 + C1779 * C20324 + C1791 * C20327 +
             C1792 * C32097) *
                C32316 +
            (C3457 * C20326 + C3458 * C20324 + (C1785 - C1784) * C20327 +
             (C1787 - C1786) * C32097) *
                C32303 +
            ((C597 - C596) * C20326 + (C599 - C598) * C20324 +
             (C31993 * C377 - C113 * C358) * C20327 +
             (C31993 * C388 - C113 * C378) * C32097) *
                C32286) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
              C32282 * C264 - C819 * C249) *
                 C20326 +
             (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
              C32282 * C279 - C819 * C265) *
                 C20324 +
             (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C20327 +
             (C11052 - C11053 + C11054 - C11055 + C11056 - C11057) * C32097) *
                C15419 +
            ((C821 - C822 + C823 - C824 + C825 - C826) * C20326 +
             (C827 - C828 + C829 - C830 + C831 - C832) * C20324 +
             C21783 * C20327 + C21784 * C32097) *
                C31921) *
               C577 +
           (((C11047 - C11046 + C11049 - C11048 + C11051 - C11050) * C20326 +
             (C11053 - C11052 + C11055 - C11054 + C11057 - C11056) * C20324 +
             (C11059 - C11058 + C11061 - C11060 + C11063 - C11062) * C20327 +
             (C11065 - C11064 + C11067 - C11066 + C11069 - C11068) * C32097) *
                C15419 +
            (C21785 * C20326 + C21786 * C20324 +
             (C11384 - C11385 + C11386 - C11387 + C11388 - C11389) * C20327 +
             (C11390 - C11391 + C11392 - C11393 + C11394 - C11395) * C32097) *
                C31921) *
               C578) *
              C31956 * C473 +
          ((((C822 - C821 + C824 - C823 + C826 - C825) * C20326 +
             (C828 - C827 + C830 - C829 + C832 - C831) * C20324 +
             C21785 * C20327 + C21786 * C32097) *
                C15419 +
            ((C834 - C833 + C836 - C835 + C838 - C837) * C20326 +
             (C840 - C839 + C842 - C841 + C844 - C843) * C20324 +
             (C1486 - C1487 + C1488 - C1489 + C1490 - C1491) * C20327 +
             (C1492 - C1493 + C1494 - C1495 + C1496 - C1497) * C32097) *
                C31921) *
               C577 +
           ((C21783 * C20326 + C21784 * C20324 +
             (C11385 - C11384 + C11387 - C11386 + C11389 - C11388) * C20327 +
             (C11391 - C11390 + C11393 - C11392 + C11395 - C11394) * C32097) *
                C15419 +
            ((C1487 - C1486 + C1489 - C1488 + C1491 - C1490) * C20326 +
             (C1493 - C1492 + C1495 - C1494 + C1497 - C1496) * C20324 +
             (C32317 * C373 - C817 * C356 + C32305 * C1136 - C818 * C1120 +
              C32282 * C1137 - C819 * C1121) *
                 C20327 +
             (C32317 * C386 - C817 * C374 + C32305 * C1147 - C818 * C1138 +
              C32282 * C1148 - C819 * C1139) *
                 C32097) *
                C31921) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C20326 +
            (C31993 * C136 - C113 * C123) * C20324 + (C2043 - C2044) * C20327 +
            (C2045 - C2046) * C32097) *
               C32323 +
           ((C144 - C145) * C20326 + (C146 - C147) * C20324 + C2383 * C20327 +
            C2384 * C32097) *
               C32316 +
           C20341 * C32303 + C20342 * C32286) *
              C31970 * C31956 * C110 +
          (((C145 - C144) * C20326 + (C147 - C146) * C20324 + C2385 * C20327 +
            C2386 * C32097) *
               C32323 +
           ((C149 - C148) * C20326 + (C151 - C150) * C20324 + C2389 * C20327 +
            C2390 * C32097) *
               C32316 +
           ((C153 - C152) * C20326 + (C155 - C154) * C20324 + C3927 * C20327 +
            C3928 * C32097) *
               C32303 +
           ((C157 - C156) * C20326 + (C159 - C158) * C20324 +
            (C596 - C597) * C20327 + (C598 - C599) * C32097) *
               C32286) *
              C31970 * C31956 * C111 +
          (C20341 * C32323 + C20342 * C32316 +
           (C168 * C20326 + C169 * C20324 + (C597 - C596) * C20327 +
            (C599 - C598) * C32097) *
               C32303 +
           ((C161 - C160) * C20326 + (C163 - C162) * C20324 +
            (C31993 * C580 - C113 * C579) * C20327 +
            (C31993 * C582 - C113 * C581) * C32097) *
               C32286) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C20326 +
            (C31993 * C136 - C113 * C123) * C20324 + (C2043 - C2044) * C20327 +
            (C2045 - C2046) * C32097) *
               C32323 +
           ((C144 - C145) * C20326 + (C146 - C147) * C20324 + C2383 * C20327 +
            C2384 * C32097) *
               C32316 +
           C20341 * C32303 + C20342 * C32286) *
              C31970 * C240 +
          (((C113 * C244 - C31993 * C254) * C20326 +
            (C113 * C255 - C31993 * C274) * C20324 + (C2551 - C2552) * C20327 +
            (C2553 - C2554) * C32097) *
               C32323 +
           ((C480 - C481) * C20326 + (C482 - C483) * C20324 +
            (C2217 - C2218) * C20327 + (C2219 - C2220) * C32097) *
               C32316 +
           ((C484 - C485) * C20326 + (C486 - C487) * C20324 +
            (C2225 - C2226) * C20327 + (C2227 - C2228) * C32097) *
               C32303 +
           ((C488 - C489) * C20326 + (C490 - C491) * C20324 +
            (C3793 - C3794) * C20327 + (C3795 - C3796) * C32097) *
               C32286) *
              C31970 * C241 +
          (((C31993 * C264 - C113 * C249) * C20326 +
            (C31993 * C279 - C113 * C265) * C20324 +
            (C31993 * C1122 - C113 * C1113) * C20327 +
            (C31993 * C1140 - C113 * C1123) * C32097) *
               C32323 +
           ((C31993 * C266 - C113 * C250) * C20326 +
            (C31993 * C280 - C113 * C267) * C20324 +
            (C31993 * C1124 - C113 * C1114) * C20327 +
            (C31993 * C1141 - C113 * C1125) * C32097) *
               C32316 +
           ((C31993 * C268 - C113 * C251) * C20326 +
            (C31993 * C281 - C113 * C269) * C20324 +
            (C31993 * C1126 - C113 * C1115) * C20327 +
            (C31993 * C1142 - C113 * C1127) * C32097) *
               C32303 +
           ((C31993 * C270 - C113 * C252) * C20326 +
            (C31993 * C282 - C113 * C271) * C20324 +
            (C31993 * C1470 - C113 * C1469) * C20327 +
            (C31993 * C1472 - C113 * C1471) * C32097) *
               C32286) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C20326 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C20324 +
            (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C20327 +
            (C11052 - C11053 + C11054 - C11055 + C11056 - C11057) * C32097) *
               C15419 +
           ((C821 - C822 + C823 - C824 + C825 - C826) * C20326 +
            (C827 - C828 + C829 - C830 + C831 - C832) * C20324 +
            (C1475 - C1474 + C1477 - C1476 + C1479 - C1478) * C20327 +
            (C1481 - C1480 + C1483 - C1482 + C1485 - C1484) * C32097) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C822 - C821 + C824 - C823 + C826 - C825) * C20326 +
            (C828 - C827 + C830 - C829 + C832 - C831) * C20324 +
            (C1474 - C1475 + C1476 - C1477 + C1478 - C1479) * C20327 +
            (C1480 - C1481 + C1482 - C1483 + C1484 - C1485) * C32097) *
               C15419 +
           ((C834 - C833 + C836 - C835 + C838 - C837) * C20326 +
            (C840 - C839 + C842 - C841 + C844 - C843) * C20324 +
            (C1486 - C1487 + C1488 - C1489 + C1490 - C1491) * C20327 +
            (C1492 - C1493 + C1494 - C1495 + C1496 - C1497) * C32097) *
               C31921) *
              C31970 * C31956 * C111 +
          ((C865 * C20326 + C866 * C20324 +
            (C1487 - C1486 + C1489 - C1488 + C1491 - C1490) * C20327 +
            (C1493 - C1492 + C1495 - C1494 + C1497 - C1496) * C32097) *
               C15419 +
           ((C846 - C845 + C848 - C847 + C850 - C849) * C20326 +
            (C852 - C851 + C854 - C853 + C856 - C855) * C20324 +
            (C32317 * C365 - C817 * C352 + C32305 * C692 - C818 * C684 +
             C32282 * C1470 - C819 * C1469) *
                C20327 +
            (C32317 * C382 - C817 * C366 + C32305 * C699 - C818 * C693 +
             C32282 * C1472 - C819 * C1471) *
                C32097) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C20326 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C20324 +
            (C11046 - C11047 + C11048 - C11049 + C11050 - C11051) * C20327 +
            (C11052 - C11053 + C11054 - C11055 + C11056 - C11057) * C32097) *
               C15419 +
           ((C821 - C822 + C823 - C824 + C825 - C826) * C20326 +
            (C827 - C828 + C829 - C830 + C831 - C832) * C20324 +
            (C1475 - C1474 + C1477 - C1476 + C1479 - C1478) * C20327 +
            (C1481 - C1480 + C1483 - C1482 + C1485 - C1484) * C32097) *
               C31921) *
              C31970 * C240 +
          (((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
             C819 * C979 - C32282 * C985) *
                C20326 +
            (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
             C819 * C986 - C32282 * C997) *
                C20324 +
            (C11542 - C11543 + C11544 - C11545 + C11546 - C11547) * C20327 +
            (C11548 - C11549 + C11550 - C11551 + C11552 - C11553) * C32097) *
               C15419 +
           ((C1300 - C1301 + C1302 - C1303 + C1304 - C1305) * C20326 +
            (C1306 - C1307 + C1308 - C1309 + C1310 - C1311) * C20324 +
            (C817 * C682 - C32317 * C688 + C818 * C1114 - C32305 * C1124 +
             C819 * C1644 - C32282 * C1648) *
                C20327 +
            (C817 * C689 - C32317 * C697 + C818 * C1125 - C32305 * C1141 +
             C819 * C1649 - C32282 * C1653) *
                C32097) *
               C31921) *
              C31970 * C241 +
          (((C32317 * C264 - C817 * C249 + C32305 * C985 - C818 * C979 +
             C32282 * C991 - C819 * C982) *
                C20326 +
            (C32317 * C279 - C817 * C265 + C32305 * C997 - C818 * C986 +
             C32282 * C1000 - C819 * C992) *
                C20324 +
            (C32317 * C1122 - C817 * C1113 + C32305 * C1646 - C818 * C1643 +
             C32282 * C6247 - C819 * C6244) *
                C20327 +
            (C32317 * C1140 - C817 * C1123 + C32305 * C1652 - C818 * C1647 +
             C32282 * C6253 - C819 * C6248) *
                C32097) *
               C15419 +
           ((C32317 * C266 - C817 * C250 + C32305 * C987 - C818 * C980 +
             C32282 * C993 - C819 * C983) *
                C20326 +
            (C32317 * C280 - C817 * C267 + C32305 * C998 - C818 * C988 +
             C32282 * C1001 - C819 * C994) *
                C20324 +
            (C32317 * C1124 - C817 * C1114 + C32305 * C1648 - C818 * C1644 +
             C32282 * C6425 - C819 * C6424) *
                C20327 +
            (C32317 * C1141 - C817 * C1125 + C32305 * C1653 - C818 * C1649 +
             C32282 * C6427 - C819 * C6426) *
                C32097) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                 C114 +
             (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                 C32010) *
                C2658 +
            ((C2665 - C2666 + C2667 - C2668) * C114 +
             (C2669 - C2670 + C2671 - C2672) * C32010) *
                C2659 +
            C2713 * C2660 + C2714 * C32286) *
               C31970 * C471 +
           (((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                 C114 +
             (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                 C32010) *
                C2658 +
            ((C3041 - C3042 + C3043 - C3044) * C114 +
             (C3045 - C3046 + C3047 - C3048) * C32010) *
                C2659 +
            ((C3049 - C3050 + C3051 - C3052) * C114 +
             (C3053 - C3054 + C3055 - C3056) * C32010) *
                C2660 +
            ((C3057 - C3058 + C3059 - C3060) * C114 +
             (C3061 - C3062 + C3063 - C3064) * C32010) *
                C32286) *
               C31970 * C472) *
              C473 +
          ((((C2666 - C2665 + C2668 - C2667) * C114 +
             (C2670 - C2669 + C2672 - C2671) * C32010) *
                C2658 +
            ((C2674 - C2673 + C2676 - C2675) * C114 +
             (C2678 - C2677 + C2680 - C2679) * C32010) *
                C2659 +
            ((C2682 - C2681 + C2684 - C2683) * C114 +
             (C2686 - C2685 + C2688 - C2687) * C32010) *
                C2660 +
            ((C2689 - C2690 + C2691 - C2692) * C114 +
             (C2693 - C2694 + C2695 - C2696) * C32010) *
                C32286) *
               C31970 * C471 +
           (((C3042 - C3041 + C3044 - C3043) * C114 +
             (C3046 - C3045 + C3048 - C3047) * C32010) *
                C2658 +
            ((C3050 - C3049 + C3052 - C3051) * C114 +
             (C3054 - C3053 + C3056 - C3055) * C32010) *
                C2659 +
            ((C3058 - C3057 + C3060 - C3059) * C114 +
             (C3062 - C3061 + C3064 - C3063) * C32010) *
                C2660 +
            ((C32251 * C262 - C2662 * C248 + C32055 * C272 - C2663 * C253) *
                 C114 +
             (C32251 * C278 - C2662 * C263 + C32055 * C283 - C2663 * C273) *
                 C32010) *
                C32286) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
              C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
                 C114 +
             (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
              C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
                 C32010) *
                C32232 +
            ((C7497 - C7498 + C7499 - C7500 + C7501 - C7502 + C7503 - C7504) *
                 C114 +
             (C7505 - C7506 + C7507 - C7508 + C7509 - C7510 + C7511 - C7512) *
                 C32010) *
                C31921) *
               C31970 * C471 +
           (((C7492 * C244 - C7486 * C254 + C7493 * C249 - C7487 * C264 +
              C7494 * C979 - C7488 * C985 + C7495 * C982 - C32292 * C991) *
                 C114 +
             (C7492 * C255 - C7486 * C274 + C7493 * C265 - C7487 * C279 +
              C7494 * C986 - C7488 * C997 + C7495 * C992 - C32292 * C1000) *
                 C32010) *
                C32232 +
            ((C7855 - C7856 + C7857 - C7858 + C7859 - C7860 + C7861 - C7862) *
                 C114 +
             (C7863 - C7864 + C7865 - C7866 + C7867 - C7868 + C7869 - C7870) *
                 C32010) *
                C31921) *
               C31970 * C472) *
              C473 +
          ((((C7498 - C7497 + C7500 - C7499 + C7502 - C7501 + C7504 - C7503) *
                 C114 +
             (C7506 - C7505 + C7508 - C7507 + C7510 - C7509 + C7512 - C7511) *
                 C32010) *
                C32232 +
            ((C7513 - C7514 + C7515 - C7516 + C7517 - C7518 + C7519 - C7520) *
                 C114 +
             (C7521 - C7522 + C7523 - C7524 + C7525 - C7526 + C7527 - C7528) *
                 C32010) *
                C31921) *
               C31970 * C471 +
           (((C7856 - C7855 + C7858 - C7857 + C7860 - C7859 + C7862 - C7861) *
                 C114 +
             (C7864 - C7863 + C7866 - C7865 + C7868 - C7867 + C7870 - C7869) *
                 C32010) *
                C32232 +
            ((C7486 * C258 - C7492 * C246 + C7487 * C268 - C7493 * C251 +
              C7488 * C989 - C7494 * C981 + C32292 * C995 - C7495 * C984) *
                 C114 +
             (C7486 * C276 - C7492 * C259 + C7487 * C281 - C7493 * C269 +
              C7488 * C999 - C7494 * C990 + C32292 * C1002 - C7495 * C996) *
                 C32010) *
                C31921) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                 C114 +
             (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                 C32010) *
                C2658 +
            ((C2665 - C2666 + C2667 - C2668) * C114 +
             (C2669 - C2670 + C2671 - C2672) * C32010) *
                C2659 +
            C2713 * C2660 + C2714 * C32286) *
               C577 +
           (((C2662 * C349 - C32251 * C359 + C2663 * C681 - C32055 * C686) *
                 C114 +
             (C2662 * C360 - C32251 * C379 + C2663 * C687 - C32055 * C696) *
                 C32010) *
                C2658 +
            ((C3195 - C3196 + C3197 - C3198) * C114 +
             (C3199 - C3200 + C3201 - C3202) * C32010) *
                C2659 +
            ((C3203 - C3204 + C3205 - C3206) * C114 +
             (C3207 - C3208 + C3209 - C3210) * C32010) *
                C2660 +
            ((C3211 - C3212 + C3213 - C3214) * C114 +
             (C3215 - C3216 + C3217 - C3218) * C32010) *
                C32286) *
               C578) *
              C471 +
          ((((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                 C114 +
             (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                 C32010) *
                C2658 +
            ((C3041 - C3042 + C3043 - C3044) * C114 +
             (C3045 - C3046 + C3047 - C3048) * C32010) *
                C2659 +
            ((C3049 - C3050 + C3051 - C3052) * C114 +
             (C3053 - C3054 + C3055 - C3056) * C32010) *
                C2660 +
            ((C3057 - C3058 + C3059 - C3060) * C114 +
             (C3061 - C3062 + C3063 - C3064) * C32010) *
                C32286) *
               C577 +
           (((C32251 * C686 - C2662 * C681 + C32055 * C1122 - C2663 * C1113) *
                 C114 +
             (C32251 * C696 - C2662 * C687 + C32055 * C1140 - C2663 * C1123) *
                 C32010) *
                C2658 +
            ((C32251 * C688 - C2662 * C682 + C32055 * C1124 - C2663 * C1114) *
                 C114 +
             (C32251 * C697 - C2662 * C689 + C32055 * C1141 - C2663 * C1125) *
                 C32010) *
                C2659 +
            ((C32251 * C690 - C2662 * C683 + C32055 * C1126 - C2663 * C1115) *
                 C114 +
             (C32251 * C698 - C2662 * C691 + C32055 * C1142 - C2663 * C1127) *
                 C32010) *
                C2660 +
            ((C32251 * C692 - C2662 * C684 + C32055 * C1470 - C2663 * C1469) *
                 C114 +
             (C32251 * C699 - C2662 * C693 + C32055 * C1472 - C2663 * C1471) *
                 C32010) *
                C32286) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
              C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
                 C114 +
             (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
              C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
                 C32010) *
                C32232 +
            ((C7497 - C7498 + C7499 - C7500 + C7501 - C7502 + C7503 - C7504) *
                 C114 +
             (C7505 - C7506 + C7507 - C7508 + C7509 - C7510 + C7511 - C7512) *
                 C32010) *
                C31921) *
               C577 +
           (((C7492 * C349 - C7486 * C359 + C7493 * C681 - C7487 * C686 +
              C7494 * C1113 - C7488 * C1122 + C7495 * C1643 - C32292 * C1646) *
                 C114 +
             (C7492 * C360 - C7486 * C379 + C7493 * C687 - C7487 * C696 +
              C7494 * C1123 - C7488 * C1140 + C7495 * C1647 - C32292 * C1652) *
                 C32010) *
                C32232 +
            ((C8001 - C8002 + C8003 - C8004 + C8005 - C8006 + C8007 - C8008) *
                 C114 +
             (C8009 - C8010 + C8011 - C8012 + C8013 - C8014 + C8015 - C8016) *
                 C32010) *
                C31921) *
               C578) *
              C471 +
          ((((C7492 * C244 - C7486 * C254 + C7493 * C249 - C7487 * C264 +
              C7494 * C979 - C7488 * C985 + C7495 * C982 - C32292 * C991) *
                 C114 +
             (C7492 * C255 - C7486 * C274 + C7493 * C265 - C7487 * C279 +
              C7494 * C986 - C7488 * C997 + C7495 * C992 - C32292 * C1000) *
                 C32010) *
                C32232 +
            ((C7855 - C7856 + C7857 - C7858 + C7859 - C7860 + C7861 - C7862) *
                 C114 +
             (C7863 - C7864 + C7865 - C7866 + C7867 - C7868 + C7869 - C7870) *
                 C32010) *
                C31921) *
               C577 +
           (((C7486 * C686 - C7492 * C681 + C7487 * C1122 - C7493 * C1113 +
              C7488 * C1646 - C7494 * C1643 + C32292 * C6247 - C7495 * C6244) *
                 C114 +
             (C7486 * C696 - C7492 * C687 + C7487 * C1140 - C7493 * C1123 +
              C7488 * C1652 - C7494 * C1647 + C32292 * C6253 - C7495 * C6248) *
                 C32010) *
                C32232 +
            ((C7486 * C688 - C7492 * C682 + C7487 * C1124 - C7493 * C1114 +
              C7488 * C1648 - C7494 * C1644 + C32292 * C6425 - C7495 * C6424) *
                 C114 +
             (C7486 * C697 - C7492 * C689 + C7487 * C1141 - C7493 * C1125 +
              C7488 * C1653 - C7494 * C1649 + C32292 * C6427 - C7495 * C6426) *
                 C32010) *
                C31921) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C114 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C32010) *
               C2658 +
           ((C2665 - C2666 + C2667 - C2668) * C114 +
            (C2669 - C2670 + C2671 - C2672) * C32010) *
               C2659 +
           C2713 * C2660 + C2714 * C32286) *
              C31970 * C240 +
          (((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                C114 +
            (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                C32010) *
               C2658 +
           ((C2662 * C245 - C32251 * C256 + C2663 * C250 - C32055 * C266) *
                C114 +
            (C2662 * C257 - C32251 * C275 + C2663 * C267 - C32055 * C280) *
                C32010) *
               C2659 +
           ((C2662 * C246 - C32251 * C258 + C2663 * C251 - C32055 * C268) *
                C114 +
            (C2662 * C259 - C32251 * C276 + C2663 * C269 - C32055 * C281) *
                C32010) *
               C2660 +
           ((C2662 * C247 - C32251 * C260 + C2663 * C252 - C32055 * C270) *
                C114 +
            (C2662 * C261 - C32251 * C277 + C2663 * C271 - C32055 * C282) *
                C32010) *
               C32286) *
              C31970 * C241 +
          (((C32251 * C264 - C2662 * C249 + C32055 * C985 - C2663 * C979) *
                C114 +
            (C32251 * C279 - C2662 * C265 + C32055 * C997 - C2663 * C986) *
                C32010) *
               C2658 +
           ((C32251 * C266 - C2662 * C250 + C32055 * C987 - C2663 * C980) *
                C114 +
            (C32251 * C280 - C2662 * C267 + C32055 * C998 - C2663 * C988) *
                C32010) *
               C2659 +
           ((C32251 * C268 - C2662 * C251 + C32055 * C989 - C2663 * C981) *
                C114 +
            (C32251 * C281 - C2662 * C269 + C32055 * C999 - C2663 * C990) *
                C32010) *
               C2660 +
           ((C32251 * C270 - C2662 * C252 + C32055 * C1296 - C2663 * C1295) *
                C114 +
            (C32251 * C282 - C2662 * C271 + C32055 * C1298 - C2663 * C1297) *
                C32010) *
               C32286) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C114 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C32010) *
               C2658 +
           ((C2665 - C2666 + C2667 - C2668) * C114 +
            (C2669 - C2670 + C2671 - C2672) * C32010) *
               C2659 +
           C2713 * C2660 + C2714 * C32286) *
              C31970 * C31956 * C110 +
          (((C2666 - C2665 + C2668 - C2667) * C114 +
            (C2670 - C2669 + C2672 - C2671) * C32010) *
               C2658 +
           ((C2674 - C2673 + C2676 - C2675) * C114 +
            (C2678 - C2677 + C2680 - C2679) * C32010) *
               C2659 +
           ((C2682 - C2681 + C2684 - C2683) * C114 +
            (C2686 - C2685 + C2688 - C2687) * C32010) *
               C2660 +
           ((C2689 - C2690 + C2691 - C2692) * C114 +
            (C2693 - C2694 + C2695 - C2696) * C32010) *
               C32286) *
              C31970 * C31956 * C111 +
          (C2713 * C2658 + C2714 * C2659 +
           ((C2690 - C2689 + C2692 - C2691) * C114 +
            (C2694 - C2693 + C2696 - C2695) * C32010) *
               C2660 +
           ((C32251 * C132 - C2662 * C120 + C32055 * C476 - C2663 * C475) *
                C114 +
            (C32251 * C141 - C2662 * C133 + C32055 * C478 - C2663 * C477) *
                C32010) *
               C32286) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C114 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C32010) *
               C2658 +
           ((C2665 - C2666 + C2667 - C2668) * C114 +
            (C2669 - C2670 + C2671 - C2672) * C32010) *
               C2659 +
           C2713 * C2660 + C2714 * C32286) *
              C346 +
          (((C2662 * C349 - C32251 * C359 + C2663 * C681 - C32055 * C686) *
                C114 +
            (C2662 * C360 - C32251 * C379 + C2663 * C687 - C32055 * C696) *
                C32010) *
               C2658 +
           ((C2662 * C350 - C32251 * C361 + C2663 * C682 - C32055 * C688) *
                C114 +
            (C2662 * C362 - C32251 * C380 + C2663 * C689 - C32055 * C697) *
                C32010) *
               C2659 +
           ((C2662 * C351 - C32251 * C363 + C2663 * C683 - C32055 * C690) *
                C114 +
            (C2662 * C364 - C32251 * C381 + C2663 * C691 - C32055 * C698) *
                C32010) *
               C2660 +
           ((C2662 * C352 - C32251 * C365 + C2663 * C684 - C32055 * C692) *
                C114 +
            (C2662 * C366 - C32251 * C382 + C2663 * C693 - C32055 * C699) *
                C32010) *
               C32286) *
              C347 +
          (((C32251 * C369 - C2662 * C354 + C32055 * C1128 - C2663 * C1116) *
                C114 +
            (C32251 * C384 - C2662 * C370 + C32055 * C1143 - C2663 * C1130) *
                C32010) *
               C2658 +
           ((C32251 * C371 - C2662 * C355 + C32055 * C1132 - C2663 * C1118) *
                C114 +
            (C32251 * C385 - C2662 * C372 + C32055 * C1145 - C2663 * C1134) *
                C32010) *
               C2659 +
           ((C32251 * C373 - C2662 * C356 + C32055 * C1136 - C2663 * C1120) *
                C114 +
            (C32251 * C386 - C2662 * C374 + C32055 * C1147 - C2663 * C1138) *
                C32010) *
               C2660 +
           ((C32251 * C375 - C2662 * C357 + C32055 * C2213 - C2663 * C2212) *
                C114 +
            (C32251 * C387 - C2662 * C376 + C32055 * C2215 - C2663 * C2214) *
                C32010) *
               C32286) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
             C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
                C114 +
            (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
             C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
                C32010) *
               C32232 +
           ((C7497 - C7498 + C7499 - C7500 + C7501 - C7502 + C7503 - C7504) *
                C114 +
            (C7505 - C7506 + C7507 - C7508 + C7509 - C7510 + C7511 - C7512) *
                C32010) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C7498 - C7497 + C7500 - C7499 + C7502 - C7501 + C7504 - C7503) *
                C114 +
            (C7506 - C7505 + C7508 - C7507 + C7510 - C7509 + C7512 - C7511) *
                C32010) *
               C32232 +
           ((C7513 - C7514 + C7515 - C7516 + C7517 - C7518 + C7519 - C7520) *
                C114 +
            (C7521 - C7522 + C7523 - C7524 + C7525 - C7526 + C7527 - C7528) *
                C32010) *
               C31921) *
              C31970 * C31956 * C111 +
          (((C7514 - C7513 + C7516 - C7515 + C7518 - C7517 + C7520 - C7519) *
                C114 +
            (C7522 - C7521 + C7524 - C7523 + C7526 - C7525 + C7528 - C7527) *
                C32010) *
               C32232 +
           ((C7486 * C128 - C7492 * C118 + C7487 * C260 - C7493 * C247 +
             C7488 * C270 - C7494 * C252 + C32292 * C1296 - C7495 * C1295) *
                C114 +
            (C7486 * C139 - C7492 * C129 + C7487 * C277 - C7493 * C261 +
             C7488 * C282 - C7494 * C271 + C32292 * C1298 - C7495 * C1297) *
                C32010) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
             C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
                C114 +
            (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
             C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
                C32010) *
               C32232 +
           ((C7497 - C7498 + C7499 - C7500 + C7501 - C7502 + C7503 - C7504) *
                C114 +
            (C7505 - C7506 + C7507 - C7508 + C7509 - C7510 + C7511 - C7512) *
                C32010) *
               C31921) *
              C31970 * C240 +
          (((C7492 * C244 - C7486 * C254 + C7493 * C249 - C7487 * C264 +
             C7494 * C979 - C7488 * C985 + C7495 * C982 - C32292 * C991) *
                C114 +
            (C7492 * C255 - C7486 * C274 + C7493 * C265 - C7487 * C279 +
             C7494 * C986 - C7488 * C997 + C7495 * C992 - C32292 * C1000) *
                C32010) *
               C32232 +
           ((C7492 * C245 - C7486 * C256 + C7493 * C250 - C7487 * C266 +
             C7494 * C980 - C7488 * C987 + C7495 * C983 - C32292 * C993) *
                C114 +
            (C7492 * C257 - C7486 * C275 + C7493 * C267 - C7487 * C280 +
             C7494 * C988 - C7488 * C998 + C7495 * C994 - C32292 * C1001) *
                C32010) *
               C31921) *
              C31970 * C241 +
          (((C7486 * C264 - C7492 * C249 + C7487 * C985 - C7493 * C979 +
             C7488 * C991 - C7494 * C982 + C32292 * C6176 - C7495 * C6174) *
                C114 +
            (C7486 * C279 - C7492 * C265 + C7487 * C997 - C7493 * C986 +
             C7488 * C1000 - C7494 * C992 + C32292 * C6180 - C7495 * C6177) *
                C32010) *
               C32232 +
           ((C7486 * C266 - C7492 * C250 + C7487 * C987 - C7493 * C980 +
             C7488 * C993 - C7494 * C983 + C32292 * C6339 - C7495 * C6338) *
                C114 +
            (C7486 * C280 - C7492 * C267 + C7487 * C998 - C7493 * C988 +
             C7488 * C1001 - C7494 * C994 + C32292 * C6341 - C7495 * C6340) *
                C32010) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
             C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
                C114 +
            (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
             C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
                C32010) *
               C32232 +
           ((C7497 - C7498 + C7499 - C7500 + C7501 - C7502 + C7503 - C7504) *
                C114 +
            (C7505 - C7506 + C7507 - C7508 + C7509 - C7510 + C7511 - C7512) *
                C32010) *
               C31921) *
              C346 +
          (((C7492 * C349 - C7486 * C359 + C7493 * C681 - C7487 * C686 +
             C7494 * C1113 - C7488 * C1122 + C7495 * C1643 - C32292 * C1646) *
                C114 +
            (C7492 * C360 - C7486 * C379 + C7493 * C687 - C7487 * C696 +
             C7494 * C1123 - C7488 * C1140 + C7495 * C1647 - C32292 * C1652) *
                C32010) *
               C32232 +
           ((C7492 * C350 - C7486 * C361 + C7493 * C682 - C7487 * C688 +
             C7494 * C1114 - C7488 * C1124 + C7495 * C1644 - C32292 * C1648) *
                C114 +
            (C7492 * C362 - C7486 * C380 + C7493 * C689 - C7487 * C697 +
             C7494 * C1125 - C7488 * C1141 + C7495 * C1649 - C32292 * C1653) *
                C32010) *
               C31921) *
              C347 +
          (((C7486 * C369 - C7492 * C354 + C7487 * C1128 - C7493 * C1116 +
             C7488 * C1129 - C7494 * C1117 + C32292 * C6249 - C7495 * C6245) *
                C114 +
            (C7486 * C384 - C7492 * C370 + C7487 * C1143 - C7493 * C1130 +
             C7488 * C1144 - C7494 * C1131 + C32292 * C6254 - C7495 * C6251) *
                C32010) *
               C32232 +
           ((C7486 * C371 - C7492 * C355 + C7487 * C1132 - C7493 * C1118 +
             C7488 * C1133 - C7494 * C1119 + C32292 * C7049 - C7495 * C7048) *
                C114 +
            (C7486 * C385 - C7492 * C372 + C7487 * C1145 - C7493 * C1134 +
             C7488 * C1146 - C7494 * C1135 + C32292 * C7051 - C7495 * C7050) *
                C32010) *
               C31921) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                 C114 +
             (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                 C32010) *
                C2658 +
            ((C2665 - C2666 + C2667 - C2668) * C114 +
             (C2669 - C2670 + C2671 - C2672) * C32010) *
                C2659 +
            C2713 * C2660 + C2714 * C32286) *
               C577 +
           (((C2662 * C349 - C32251 * C359 + C2663 * C681 - C32055 * C686) *
                 C114 +
             (C2662 * C360 - C32251 * C379 + C2663 * C687 - C32055 * C696) *
                 C32010) *
                C2658 +
            ((C3195 - C3196 + C3197 - C3198) * C114 +
             (C3199 - C3200 + C3201 - C3202) * C32010) *
                C2659 +
            ((C3203 - C3204 + C3205 - C3206) * C114 +
             (C3207 - C3208 + C3209 - C3210) * C32010) *
                C2660 +
            ((C3211 - C3212 + C3213 - C3214) * C114 +
             (C3215 - C3216 + C3217 - C3218) * C32010) *
                C32286) *
               C578) *
              C31956 * C473 +
          ((((C2666 - C2665 + C2668 - C2667) * C114 +
             (C2670 - C2669 + C2672 - C2671) * C32010) *
                C2658 +
            ((C2674 - C2673 + C2676 - C2675) * C114 +
             (C2678 - C2677 + C2680 - C2679) * C32010) *
                C2659 +
            ((C2682 - C2681 + C2684 - C2683) * C114 +
             (C2686 - C2685 + C2688 - C2687) * C32010) *
                C2660 +
            ((C2689 - C2690 + C2691 - C2692) * C114 +
             (C2693 - C2694 + C2695 - C2696) * C32010) *
                C32286) *
               C577 +
           (((C3196 - C3195 + C3198 - C3197) * C114 +
             (C3200 - C3199 + C3202 - C3201) * C32010) *
                C2658 +
            ((C3204 - C3203 + C3206 - C3205) * C114 +
             (C3208 - C3207 + C3210 - C3209) * C32010) *
                C2659 +
            ((C3212 - C3211 + C3214 - C3213) * C114 +
             (C3216 - C3215 + C3218 - C3217) * C32010) *
                C2660 +
            ((C32251 * C367 - C2662 * C353 + C32055 * C694 - C2663 * C685) *
                 C114 +
             (C32251 * C383 - C2662 * C368 + C32055 * C700 - C2663 * C695) *
                 C32010) *
                C32286) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
              C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
                 C114 +
             (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
              C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
                 C32010) *
                C32232 +
            ((C7497 - C7498 + C7499 - C7500 + C7501 - C7502 + C7503 - C7504) *
                 C114 +
             (C7505 - C7506 + C7507 - C7508 + C7509 - C7510 + C7511 - C7512) *
                 C32010) *
                C31921) *
               C577 +
           (((C7492 * C349 - C7486 * C359 + C7493 * C681 - C7487 * C686 +
              C7494 * C1113 - C7488 * C1122 + C7495 * C1643 - C32292 * C1646) *
                 C114 +
             (C7492 * C360 - C7486 * C379 + C7493 * C687 - C7487 * C696 +
              C7494 * C1123 - C7488 * C1140 + C7495 * C1647 - C32292 * C1652) *
                 C32010) *
                C32232 +
            ((C8001 - C8002 + C8003 - C8004 + C8005 - C8006 + C8007 - C8008) *
                 C114 +
             (C8009 - C8010 + C8011 - C8012 + C8013 - C8014 + C8015 - C8016) *
                 C32010) *
                C31921) *
               C578) *
              C31956 * C473 +
          ((((C7498 - C7497 + C7500 - C7499 + C7502 - C7501 + C7504 - C7503) *
                 C114 +
             (C7506 - C7505 + C7508 - C7507 + C7510 - C7509 + C7512 - C7511) *
                 C32010) *
                C32232 +
            ((C7513 - C7514 + C7515 - C7516 + C7517 - C7518 + C7519 - C7520) *
                 C114 +
             (C7521 - C7522 + C7523 - C7524 + C7525 - C7526 + C7527 - C7528) *
                 C32010) *
                C31921) *
               C577 +
           (((C8002 - C8001 + C8004 - C8003 + C8006 - C8005 + C8008 - C8007) *
                 C114 +
             (C8010 - C8009 + C8012 - C8011 + C8014 - C8013 + C8016 - C8015) *
                 C32010) *
                C32232 +
            ((C7486 * C363 - C7492 * C351 + C7487 * C690 - C7493 * C683 +
              C7488 * C1126 - C7494 * C1115 + C32292 * C1650 - C7495 * C1645) *
                 C114 +
             (C7486 * C381 - C7492 * C364 + C7487 * C698 - C7493 * C691 +
              C7488 * C1142 - C7494 * C1127 + C32292 * C1654 - C7495 * C1651) *
                 C32010) *
                C31921) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C114 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C32010) *
               C2658 +
           ((C2665 - C2666 + C2667 - C2668) * C114 +
            (C2669 - C2670 + C2671 - C2672) * C32010) *
               C2659 +
           C2713 * C2660 + C2714 * C32286) *
              C31970 * C31956 * C110 +
          (((C2666 - C2665 + C2668 - C2667) * C114 +
            (C2670 - C2669 + C2672 - C2671) * C32010) *
               C2658 +
           ((C2674 - C2673 + C2676 - C2675) * C114 +
            (C2678 - C2677 + C2680 - C2679) * C32010) *
               C2659 +
           ((C2682 - C2681 + C2684 - C2683) * C114 +
            (C2686 - C2685 + C2688 - C2687) * C32010) *
               C2660 +
           ((C2689 - C2690 + C2691 - C2692) * C114 +
            (C2693 - C2694 + C2695 - C2696) * C32010) *
               C32286) *
              C31970 * C31956 * C111 +
          (C2713 * C2658 + C2714 * C2659 +
           ((C2690 - C2689 + C2692 - C2691) * C114 +
            (C2694 - C2693 + C2696 - C2695) * C32010) *
               C2660 +
           ((C32251 * C132 - C2662 * C120 + C32055 * C476 - C2663 * C475) *
                C114 +
            (C32251 * C141 - C2662 * C133 + C32055 * C478 - C2663 * C477) *
                C32010) *
               C32286) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C114 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C32010) *
               C2658 +
           ((C2665 - C2666 + C2667 - C2668) * C114 +
            (C2669 - C2670 + C2671 - C2672) * C32010) *
               C2659 +
           C2713 * C2660 + C2714 * C32286) *
              C31970 * C240 +
          (((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                C114 +
            (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                C32010) *
               C2658 +
           ((C2662 * C245 - C32251 * C256 + C2663 * C250 - C32055 * C266) *
                C114 +
            (C2662 * C257 - C32251 * C275 + C2663 * C267 - C32055 * C280) *
                C32010) *
               C2659 +
           ((C2662 * C246 - C32251 * C258 + C2663 * C251 - C32055 * C268) *
                C114 +
            (C2662 * C259 - C32251 * C276 + C2663 * C269 - C32055 * C281) *
                C32010) *
               C2660 +
           ((C2662 * C247 - C32251 * C260 + C2663 * C252 - C32055 * C270) *
                C114 +
            (C2662 * C261 - C32251 * C277 + C2663 * C271 - C32055 * C282) *
                C32010) *
               C32286) *
              C31970 * C241 +
          (((C32251 * C264 - C2662 * C249 + C32055 * C985 - C2663 * C979) *
                C114 +
            (C32251 * C279 - C2662 * C265 + C32055 * C997 - C2663 * C986) *
                C32010) *
               C2658 +
           ((C32251 * C266 - C2662 * C250 + C32055 * C987 - C2663 * C980) *
                C114 +
            (C32251 * C280 - C2662 * C267 + C32055 * C998 - C2663 * C988) *
                C32010) *
               C2659 +
           ((C32251 * C268 - C2662 * C251 + C32055 * C989 - C2663 * C981) *
                C114 +
            (C32251 * C281 - C2662 * C269 + C32055 * C999 - C2663 * C990) *
                C32010) *
               C2660 +
           ((C32251 * C270 - C2662 * C252 + C32055 * C1296 - C2663 * C1295) *
                C114 +
            (C32251 * C282 - C2662 * C271 + C32055 * C1298 - C2663 * C1297) *
                C32010) *
               C32286) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
             C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
                C114 +
            (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
             C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
                C32010) *
               C32232 +
           ((C7497 - C7498 + C7499 - C7500 + C7501 - C7502 + C7503 - C7504) *
                C114 +
            (C7505 - C7506 + C7507 - C7508 + C7509 - C7510 + C7511 - C7512) *
                C32010) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C7498 - C7497 + C7500 - C7499 + C7502 - C7501 + C7504 - C7503) *
                C114 +
            (C7506 - C7505 + C7508 - C7507 + C7510 - C7509 + C7512 - C7511) *
                C32010) *
               C32232 +
           ((C7513 - C7514 + C7515 - C7516 + C7517 - C7518 + C7519 - C7520) *
                C114 +
            (C7521 - C7522 + C7523 - C7524 + C7525 - C7526 + C7527 - C7528) *
                C32010) *
               C31921) *
              C31970 * C31956 * C111 +
          (((C7514 - C7513 + C7516 - C7515 + C7518 - C7517 + C7520 - C7519) *
                C114 +
            (C7522 - C7521 + C7524 - C7523 + C7526 - C7525 + C7528 - C7527) *
                C32010) *
               C32232 +
           ((C7486 * C128 - C7492 * C118 + C7487 * C260 - C7493 * C247 +
             C7488 * C270 - C7494 * C252 + C32292 * C1296 - C7495 * C1295) *
                C114 +
            (C7486 * C139 - C7492 * C129 + C7487 * C277 - C7493 * C261 +
             C7488 * C282 - C7494 * C271 + C32292 * C1298 - C7495 * C1297) *
                C32010) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
             C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
                C114 +
            (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
             C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
                C32010) *
               C32232 +
           ((C7497 - C7498 + C7499 - C7500 + C7501 - C7502 + C7503 - C7504) *
                C114 +
            (C7505 - C7506 + C7507 - C7508 + C7509 - C7510 + C7511 - C7512) *
                C32010) *
               C31921) *
              C31970 * C240 +
          (((C7492 * C244 - C7486 * C254 + C7493 * C249 - C7487 * C264 +
             C7494 * C979 - C7488 * C985 + C7495 * C982 - C32292 * C991) *
                C114 +
            (C7492 * C255 - C7486 * C274 + C7493 * C265 - C7487 * C279 +
             C7494 * C986 - C7488 * C997 + C7495 * C992 - C32292 * C1000) *
                C32010) *
               C32232 +
           ((C7492 * C245 - C7486 * C256 + C7493 * C250 - C7487 * C266 +
             C7494 * C980 - C7488 * C987 + C7495 * C983 - C32292 * C993) *
                C114 +
            (C7492 * C257 - C7486 * C275 + C7493 * C267 - C7487 * C280 +
             C7494 * C988 - C7488 * C998 + C7495 * C994 - C32292 * C1001) *
                C32010) *
               C31921) *
              C31970 * C241 +
          (((C7486 * C264 - C7492 * C249 + C7487 * C985 - C7493 * C979 +
             C7488 * C991 - C7494 * C982 + C32292 * C6176 - C7495 * C6174) *
                C114 +
            (C7486 * C279 - C7492 * C265 + C7487 * C997 - C7493 * C986 +
             C7488 * C1000 - C7494 * C992 + C32292 * C6180 - C7495 * C6177) *
                C32010) *
               C32232 +
           ((C7486 * C266 - C7492 * C250 + C7487 * C987 - C7493 * C980 +
             C7488 * C993 - C7494 * C983 + C32292 * C6339 - C7495 * C6338) *
                C114 +
            (C7486 * C280 - C7492 * C267 + C7487 * C998 - C7493 * C988 +
             C7488 * C1001 - C7494 * C994 + C32292 * C6341 - C7495 * C6340) *
                C32010) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                 C3448 +
             (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                 C32252 +
             (C4510 - C4511 + C4512 - C4513) * C3449 +
             (C4514 - C4515 + C4516 - C4517) * C32097) *
                C814 +
            ((C2665 - C2666 + C2667 - C2668) * C3448 +
             (C2669 - C2670 + C2671 - C2672) * C32252 +
             (C3196 - C3195 + C3198 - C3197) * C3449 +
             (C3200 - C3199 + C3202 - C3201) * C32097) *
                C815 +
            C4217 * C32271) *
               C31970 * C471 +
           (((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                 C3448 +
             (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                 C32252 +
             (C2662 * C681 - C32251 * C686 + C2663 * C1113 - C32055 * C1122) *
                 C3449 +
             (C2662 * C687 - C32251 * C696 + C2663 * C1123 - C32055 * C1140) *
                 C32097) *
                C814 +
            ((C3041 - C3042 + C3043 - C3044) * C3448 +
             (C3045 - C3046 + C3047 - C3048) * C32252 +
             (C4736 - C4737 + C4738 - C4739) * C3449 +
             (C4740 - C4741 + C4742 - C4743) * C32097) *
                C815 +
            ((C3049 - C3050 + C3051 - C3052) * C3448 +
             (C3053 - C3054 + C3055 - C3056) * C32252 +
             (C4744 - C4745 + C4746 - C4747) * C3449 +
             (C4748 - C4749 + C4750 - C4751) * C32097) *
                C32271) *
               C31970 * C472) *
              C473 +
          ((((C2666 - C2665 + C2668 - C2667) * C3448 +
             (C2670 - C2669 + C2672 - C2671) * C32252 +
             (C3195 - C3196 + C3197 - C3198) * C3449 +
             (C3199 - C3200 + C3201 - C3202) * C32097) *
                C814 +
            ((C2674 - C2673 + C2676 - C2675) * C3448 +
             (C2678 - C2677 + C2680 - C2679) * C32252 +
             (C3203 - C3204 + C3205 - C3206) * C3449 +
             (C3207 - C3208 + C3209 - C3210) * C32097) *
                C815 +
            ((C2682 - C2681 + C2684 - C2683) * C3448 +
             (C2686 - C2685 + C2688 - C2687) * C32252 +
             (C3211 - C3212 + C3213 - C3214) * C3449 +
             (C3215 - C3216 + C3217 - C3218) * C32097) *
                C32271) *
               C31970 * C471 +
           (((C3042 - C3041 + C3044 - C3043) * C3448 +
             (C3046 - C3045 + C3048 - C3047) * C32252 +
             (C4737 - C4736 + C4739 - C4738) * C3449 +
             (C4741 - C4740 + C4743 - C4742) * C32097) *
                C814 +
            ((C3050 - C3049 + C3052 - C3051) * C3448 +
             (C3054 - C3053 + C3056 - C3055) * C32252 +
             (C4745 - C4744 + C4747 - C4746) * C3449 +
             (C4749 - C4748 + C4751 - C4750) * C32097) *
                C815 +
            ((C3058 - C3057 + C3060 - C3059) * C3448 +
             (C3062 - C3061 + C3064 - C3063) * C32252 +
             (C32251 * C692 - C2662 * C684 + C32055 * C1470 - C2663 * C1469) *
                 C3449 +
             (C32251 * C699 - C2662 * C693 + C32055 * C1472 - C2663 * C1471) *
                 C32097) *
                C32271) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
             C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
                C3448 +
            (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
             C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
                C32252 +
            (C9493 - C9494 + C9495 - C9496 + C9497 - C9498 + C9499 - C9500) *
                C3449 +
            (C9501 - C9502 + C9503 - C9504 + C9505 - C9506 + C9507 - C9508) *
                C32097) *
               C31911 * C31970 * C471 +
           ((C7492 * C244 - C7486 * C254 + C7493 * C249 - C7487 * C264 +
             C7494 * C979 - C7488 * C985 + C7495 * C982 - C32292 * C991) *
                C3448 +
            (C7492 * C255 - C7486 * C274 + C7493 * C265 - C7487 * C279 +
             C7494 * C986 - C7488 * C997 + C7495 * C992 - C32292 * C1000) *
                C32252 +
            (C7492 * C681 - C7486 * C686 + C7493 * C1113 - C7487 * C1122 +
             C7494 * C1643 - C7488 * C1646 + C7495 * C6244 - C32292 * C6247) *
                C3449 +
            (C7492 * C687 - C7486 * C696 + C7493 * C1123 - C7487 * C1140 +
             C7494 * C1647 - C7488 * C1652 + C7495 * C6248 - C32292 * C6253) *
                C32097) *
               C31911 * C31970 * C472) *
              C473 +
          (((C7498 - C7497 + C7500 - C7499 + C7502 - C7501 + C7504 - C7503) *
                C3448 +
            (C7506 - C7505 + C7508 - C7507 + C7510 - C7509 + C7512 - C7511) *
                C32252 +
            (C8001 - C8002 + C8003 - C8004 + C8005 - C8006 + C8007 - C8008) *
                C3449 +
            (C8009 - C8010 + C8011 - C8012 + C8013 - C8014 + C8015 - C8016) *
                C32097) *
               C31911 * C31970 * C471 +
           ((C7856 - C7855 + C7858 - C7857 + C7860 - C7859 + C7862 - C7861) *
                C3448 +
            (C7864 - C7863 + C7866 - C7865 + C7868 - C7867 + C7870 - C7869) *
                C32252 +
            (C7486 * C688 - C7492 * C682 + C7487 * C1124 - C7493 * C1114 +
             C7488 * C1648 - C7494 * C1644 + C32292 * C6425 - C7495 * C6424) *
                C3449 +
            (C7486 * C697 - C7492 * C689 + C7487 * C1141 - C7493 * C1125 +
             C7488 * C1653 - C7494 * C1649 + C32292 * C6427 - C7495 * C6426) *
                C32097) *
               C31911 * C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                 C3448 +
             (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                 C32252 +
             (C4510 - C4511 + C4512 - C4513) * C3449 +
             (C4514 - C4515 + C4516 - C4517) * C32097) *
                C814 +
            ((C2665 - C2666 + C2667 - C2668) * C3448 +
             (C2669 - C2670 + C2671 - C2672) * C32252 + C4958 * C3449 +
             C4959 * C32097) *
                C815 +
            C4217 * C32271) *
               C577 +
           (((C4511 - C4510 + C4513 - C4512) * C3448 +
             (C4515 - C4514 + C4517 - C4516) * C32252 +
             (C4518 - C4519 + C4520 - C4521) * C3449 +
             (C4522 - C4523 + C4524 - C4525) * C32097) *
                C814 +
            (C4960 * C3448 + C4961 * C32252 +
             (C4526 - C4527 + C4528 - C4529) * C3449 +
             (C4530 - C4531 + C4532 - C4533) * C32097) *
                C815 +
            (C4962 * C3448 + C4963 * C32252 +
             (C4534 - C4535 + C4536 - C4537) * C3449 +
             (C4538 - C4539 + C4540 - C4541) * C32097) *
                C32271) *
               C578) *
              C471 +
          ((((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                 C3448 +
             (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                 C32252 +
             (C5158 - C5159 + C5160 - C5161) * C3449 +
             (C5162 - C5163 + C5164 - C5165) * C32097) *
                C814 +
            ((C3041 - C3042 + C3043 - C3044) * C3448 +
             (C3045 - C3046 + C3047 - C3048) * C32252 +
             (C4736 - C4737 + C4738 - C4739) * C3449 +
             (C4740 - C4741 + C4742 - C4743) * C32097) *
                C815 +
            ((C3049 - C3050 + C3051 - C3052) * C3448 +
             (C3053 - C3054 + C3055 - C3056) * C32252 +
             (C4744 - C4745 + C4746 - C4747) * C3449 +
             (C4748 - C4749 + C4750 - C4751) * C32097) *
                C32271) *
               C577 +
           (((C5159 - C5158 + C5161 - C5160) * C3448 +
             (C5163 - C5162 + C5165 - C5164) * C32252 +
             (C32251 * C1128 - C2662 * C1116 + C32055 * C1129 - C2663 * C1117) *
                 C3449 +
             (C32251 * C1143 - C2662 * C1130 + C32055 * C1144 - C2663 * C1131) *
                 C32097) *
                C814 +
            ((C4737 - C4736 + C4739 - C4738) * C3448 +
             (C4741 - C4740 + C4743 - C4742) * C32252 +
             (C32251 * C1132 - C2662 * C1118 + C32055 * C1133 - C2663 * C1119) *
                 C3449 +
             (C32251 * C1145 - C2662 * C1134 + C32055 * C1146 - C2663 * C1135) *
                 C32097) *
                C815 +
            ((C4745 - C4744 + C4747 - C4746) * C3448 +
             (C4749 - C4748 + C4751 - C4750) * C32252 +
             (C32251 * C1136 - C2662 * C1120 + C32055 * C1137 - C2663 * C1121) *
                 C3449 +
             (C32251 * C1147 - C2662 * C1138 + C32055 * C1148 - C2663 * C1139) *
                 C32097) *
                C32271) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
             C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
                C3448 +
            (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
             C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
                C32252 +
            (C9493 - C9494 + C9495 - C9496 + C9497 - C9498 + C9499 - C9500) *
                C3449 +
            (C9501 - C9502 + C9503 - C9504 + C9505 - C9506 + C9507 - C9508) *
                C32097) *
               C31911 * C577 +
           ((C9494 - C9493 + C9496 - C9495 + C9498 - C9497 + C9500 - C9499) *
                C3448 +
            (C9502 - C9501 + C9504 - C9503 + C9506 - C9505 + C9508 - C9507) *
                C32252 +
            (C9509 - C9510 + C9511 - C9512 + C9513 - C9514 + C9515 - C9516) *
                C3449 +
            (C9517 - C9518 + C9519 - C9520 + C9521 - C9522 + C9523 - C9524) *
                C32097) *
               C31911 * C578) *
              C471 +
          (((C7492 * C244 - C7486 * C254 + C7493 * C249 - C7487 * C264 +
             C7494 * C979 - C7488 * C985 + C7495 * C982 - C32292 * C991) *
                C3448 +
            (C7492 * C255 - C7486 * C274 + C7493 * C265 - C7487 * C279 +
             C7494 * C986 - C7488 * C997 + C7495 * C992 - C32292 * C1000) *
                C32252 +
            (C9915 - C9916 + C9917 - C9918 + C9919 - C9920 + C9921 - C9922) *
                C3449 +
            (C9923 - C9924 + C9925 - C9926 + C9927 - C9928 + C9929 - C9930) *
                C32097) *
               C31911 * C577 +
           ((C9916 - C9915 + C9918 - C9917 + C9920 - C9919 + C9922 - C9921) *
                C3448 +
            (C9924 - C9923 + C9926 - C9925 + C9928 - C9927 + C9930 - C9929) *
                C32252 +
            (C7486 * C1128 - C7492 * C1116 + C7487 * C1129 - C7493 * C1117 +
             C7488 * C6249 - C7494 * C6245 + C32292 * C6250 - C7495 * C6246) *
                C3449 +
            (C7486 * C1143 - C7492 * C1130 + C7487 * C1144 - C7493 * C1131 +
             C7488 * C6254 - C7494 * C6251 + C32292 * C6255 - C7495 * C6252) *
                C32097) *
               C31911 * C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C3448 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C32252 +
            (C32251 * C359 - C2662 * C349 + C32055 * C686 - C2663 * C681) *
                C3449 +
            (C32251 * C379 - C2662 * C360 + C32055 * C696 - C2663 * C687) *
                C32097) *
               C814 +
           ((C2665 - C2666 + C2667 - C2668) * C3448 +
            (C2669 - C2670 + C2671 - C2672) * C32252 +
            (C3196 - C3195 + C3198 - C3197) * C3449 +
            (C3200 - C3199 + C3202 - C3201) * C32097) *
               C815 +
           C4217 * C32271) *
              C31970 * C240 +
          (((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                C3448 +
            (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                C32252 +
            (C2662 * C681 - C32251 * C686 + C2663 * C1113 - C32055 * C1122) *
                C3449 +
            (C2662 * C687 - C32251 * C696 + C2663 * C1123 - C32055 * C1140) *
                C32097) *
               C814 +
           ((C3041 - C3042 + C3043 - C3044) * C3448 +
            (C3045 - C3046 + C3047 - C3048) * C32252 +
            (C2662 * C682 - C32251 * C688 + C2663 * C1114 - C32055 * C1124) *
                C3449 +
            (C2662 * C689 - C32251 * C697 + C2663 * C1125 - C32055 * C1141) *
                C32097) *
               C815 +
           ((C3049 - C3050 + C3051 - C3052) * C3448 +
            (C3053 - C3054 + C3055 - C3056) * C32252 +
            (C2662 * C683 - C32251 * C690 + C2663 * C1115 - C32055 * C1126) *
                C3449 +
            (C2662 * C691 - C32251 * C698 + C2663 * C1127 - C32055 * C1142) *
                C32097) *
               C32271) *
              C31970 * C241 +
          (((C32251 * C264 - C2662 * C249 + C32055 * C985 - C2663 * C979) *
                C3448 +
            (C32251 * C279 - C2662 * C265 + C32055 * C997 - C2663 * C986) *
                C32252 +
            (C32251 * C1122 - C2662 * C1113 + C32055 * C1646 - C2663 * C1643) *
                C3449 +
            (C32251 * C1140 - C2662 * C1123 + C32055 * C1652 - C2663 * C1647) *
                C32097) *
               C814 +
           ((C32251 * C266 - C2662 * C250 + C32055 * C987 - C2663 * C980) *
                C3448 +
            (C32251 * C280 - C2662 * C267 + C32055 * C998 - C2663 * C988) *
                C32252 +
            (C32251 * C1124 - C2662 * C1114 + C32055 * C1648 - C2663 * C1644) *
                C3449 +
            (C32251 * C1141 - C2662 * C1125 + C32055 * C1653 - C2663 * C1649) *
                C32097) *
               C815 +
           ((C32251 * C268 - C2662 * C251 + C32055 * C989 - C2663 * C981) *
                C3448 +
            (C32251 * C281 - C2662 * C269 + C32055 * C999 - C2663 * C990) *
                C32252 +
            (C32251 * C1126 - C2662 * C1115 + C32055 * C1650 - C2663 * C1645) *
                C3449 +
            (C32251 * C1142 - C2662 * C1127 + C32055 * C1654 - C2663 * C1651) *
                C32097) *
               C32271) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C3448 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C32252 +
            (C32251 * C359 - C2662 * C349 + C32055 * C686 - C2663 * C681) *
                C3449 +
            (C32251 * C379 - C2662 * C360 + C32055 * C696 - C2663 * C687) *
                C32097) *
               C814 +
           ((C2665 - C2666 + C2667 - C2668) * C3448 +
            (C2669 - C2670 + C2671 - C2672) * C32252 +
            (C3196 - C3195 + C3198 - C3197) * C3449 +
            (C3200 - C3199 + C3202 - C3201) * C32097) *
               C815 +
           C4217 * C32271) *
              C31970 * C31956 * C110 +
          (((C2666 - C2665 + C2668 - C2667) * C3448 +
            (C2670 - C2669 + C2672 - C2671) * C32252 +
            (C3195 - C3196 + C3197 - C3198) * C3449 +
            (C3199 - C3200 + C3201 - C3202) * C32097) *
               C814 +
           ((C2674 - C2673 + C2676 - C2675) * C3448 +
            (C2678 - C2677 + C2680 - C2679) * C32252 +
            (C3203 - C3204 + C3205 - C3206) * C3449 +
            (C3207 - C3208 + C3209 - C3210) * C32097) *
               C815 +
           ((C2682 - C2681 + C2684 - C2683) * C3448 +
            (C2686 - C2685 + C2688 - C2687) * C32252 +
            (C3211 - C3212 + C3213 - C3214) * C3449 +
            (C3215 - C3216 + C3217 - C3218) * C32097) *
               C32271) *
              C31970 * C31956 * C111 +
          (C4217 * C814 +
           (C2707 * C3448 + C2708 * C32252 +
            (C3212 - C3211 + C3214 - C3213) * C3449 +
            (C3216 - C3215 + C3218 - C3217) * C32097) *
               C815 +
           ((C2690 - C2689 + C2692 - C2691) * C3448 +
            (C2694 - C2693 + C2696 - C2695) * C32252 +
            (C32251 * C367 - C2662 * C353 + C32055 * C694 - C2663 * C685) *
                C3449 +
            (C32251 * C383 - C2662 * C368 + C32055 * C700 - C2663 * C695) *
                C32097) *
               C32271) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C3448 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C32252 +
            (C4510 - C4511 + C4512 - C4513) * C3449 +
            (C4514 - C4515 + C4516 - C4517) * C32097) *
               C814 +
           ((C2665 - C2666 + C2667 - C2668) * C3448 +
            (C2669 - C2670 + C2671 - C2672) * C32252 +
            (C3196 - C3195 + C3198 - C3197) * C3449 +
            (C3200 - C3199 + C3202 - C3201) * C32097) *
               C815 +
           C4217 * C32271) *
              C346 +
          (((C4511 - C4510 + C4513 - C4512) * C3448 +
            (C4515 - C4514 + C4517 - C4516) * C32252 +
            (C4518 - C4519 + C4520 - C4521) * C3449 +
            (C4522 - C4523 + C4524 - C4525) * C32097) *
               C814 +
           ((C3195 - C3196 + C3197 - C3198) * C3448 +
            (C3199 - C3200 + C3201 - C3202) * C32252 +
            (C4526 - C4527 + C4528 - C4529) * C3449 +
            (C4530 - C4531 + C4532 - C4533) * C32097) *
               C815 +
           ((C3203 - C3204 + C3205 - C3206) * C3448 +
            (C3207 - C3208 + C3209 - C3210) * C32252 +
            (C4534 - C4535 + C4536 - C4537) * C3449 +
            (C4538 - C4539 + C4540 - C4541) * C32097) *
               C32271) *
              C347 +
          (((C4519 - C4518 + C4521 - C4520) * C3448 +
            (C4523 - C4522 + C4525 - C4524) * C32252 +
            (C32251 * C2024 - C2662 * C2018 + C32055 * C2541 - C2663 * C2538) *
                C3449 +
            (C32251 * C2036 - C2662 * C2025 + C32055 * C2547 - C2663 * C2542) *
                C32097) *
               C814 +
           ((C4527 - C4526 + C4529 - C4528) * C3448 +
            (C4531 - C4530 + C4533 - C4532) * C32252 +
            (C32251 * C2026 - C2662 * C2019 + C32055 * C2543 - C2663 * C2539) *
                C3449 +
            (C32251 * C2037 - C2662 * C2027 + C32055 * C2548 - C2663 * C2544) *
                C32097) *
               C815 +
           ((C4535 - C4534 + C4537 - C4536) * C3448 +
            (C4539 - C4538 + C4541 - C4540) * C32252 +
            (C32251 * C2028 - C2662 * C2020 + C32055 * C2545 - C2663 * C2540) *
                C3449 +
            (C32251 * C2038 - C2662 * C2029 + C32055 * C2549 - C2663 * C2546) *
                C32097) *
               C32271) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
            C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
               C3448 +
           (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
            C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
               C32252 +
           (C7486 * C359 - C7492 * C349 + C7487 * C686 - C7493 * C681 +
            C7488 * C1122 - C7494 * C1113 + C32292 * C1646 - C7495 * C1643) *
               C3449 +
           (C7486 * C379 - C7492 * C360 + C7487 * C696 - C7493 * C687 +
            C7488 * C1140 - C7494 * C1123 + C32292 * C1652 - C7495 * C1647) *
               C32097) *
              C31911 * C31970 * C31956 * C110 +
          ((C7498 - C7497 + C7500 - C7499 + C7502 - C7501 + C7504 - C7503) *
               C3448 +
           (C7506 - C7505 + C7508 - C7507 + C7510 - C7509 + C7512 - C7511) *
               C32252 +
           (C8001 - C8002 + C8003 - C8004 + C8005 - C8006 + C8007 - C8008) *
               C3449 +
           (C8009 - C8010 + C8011 - C8012 + C8013 - C8014 + C8015 - C8016) *
               C32097) *
              C31911 * C31970 * C31956 * C111 +
          ((C7514 - C7513 + C7516 - C7515 + C7518 - C7517 + C7520 - C7519) *
               C3448 +
           (C7522 - C7521 + C7524 - C7523 + C7526 - C7525 + C7528 - C7527) *
               C32252 +
           (C7486 * C363 - C7492 * C351 + C7487 * C690 - C7493 * C683 +
            C7488 * C1126 - C7494 * C1115 + C32292 * C1650 - C7495 * C1645) *
               C3449 +
           (C7486 * C381 - C7492 * C364 + C7487 * C698 - C7493 * C691 +
            C7488 * C1142 - C7494 * C1127 + C32292 * C1654 - C7495 * C1651) *
               C32097) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
            C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
               C3448 +
           (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
            C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
               C32252 +
           (C7486 * C359 - C7492 * C349 + C7487 * C686 - C7493 * C681 +
            C7488 * C1122 - C7494 * C1113 + C32292 * C1646 - C7495 * C1643) *
               C3449 +
           (C7486 * C379 - C7492 * C360 + C7487 * C696 - C7493 * C687 +
            C7488 * C1140 - C7494 * C1123 + C32292 * C1652 - C7495 * C1647) *
               C32097) *
              C31911 * C31970 * C240 +
          ((C7492 * C244 - C7486 * C254 + C7493 * C249 - C7487 * C264 +
            C7494 * C979 - C7488 * C985 + C7495 * C982 - C32292 * C991) *
               C3448 +
           (C7492 * C255 - C7486 * C274 + C7493 * C265 - C7487 * C279 +
            C7494 * C986 - C7488 * C997 + C7495 * C992 - C32292 * C1000) *
               C32252 +
           (C7492 * C681 - C7486 * C686 + C7493 * C1113 - C7487 * C1122 +
            C7494 * C1643 - C7488 * C1646 + C7495 * C6244 - C32292 * C6247) *
               C3449 +
           (C7492 * C687 - C7486 * C696 + C7493 * C1123 - C7487 * C1140 +
            C7494 * C1647 - C7488 * C1652 + C7495 * C6248 - C32292 * C6253) *
               C32097) *
              C31911 * C31970 * C241 +
          ((C7486 * C264 - C7492 * C249 + C7487 * C985 - C7493 * C979 +
            C7488 * C991 - C7494 * C982 + C32292 * C6176 - C7495 * C6174) *
               C3448 +
           (C7486 * C279 - C7492 * C265 + C7487 * C997 - C7493 * C986 +
            C7488 * C1000 - C7494 * C992 + C32292 * C6180 - C7495 * C6177) *
               C32252 +
           (C7486 * C1122 - C7492 * C1113 + C7487 * C1646 - C7493 * C1643 +
            C7488 * C6247 - C7494 * C6244 + C32292 * C6511 - C7495 * C6510) *
               C3449 +
           (C7486 * C1140 - C7492 * C1123 + C7487 * C1652 - C7493 * C1647 +
            C7488 * C6253 - C7494 * C6248 + C32292 * C6513 - C7495 * C6512) *
               C32097) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
            C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
               C3448 +
           (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
            C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
               C32252 +
           (C9493 - C9494 + C9495 - C9496 + C9497 - C9498 + C9499 - C9500) *
               C3449 +
           (C9501 - C9502 + C9503 - C9504 + C9505 - C9506 + C9507 - C9508) *
               C32097) *
              C31911 * C346 +
          ((C9494 - C9493 + C9496 - C9495 + C9498 - C9497 + C9500 - C9499) *
               C3448 +
           (C9502 - C9501 + C9504 - C9503 + C9506 - C9505 + C9508 - C9507) *
               C32252 +
           (C9509 - C9510 + C9511 - C9512 + C9513 - C9514 + C9515 - C9516) *
               C3449 +
           (C9517 - C9518 + C9519 - C9520 + C9521 - C9522 + C9523 - C9524) *
               C32097) *
              C31911 * C347 +
          ((C9510 - C9509 + C9512 - C9511 + C9514 - C9513 + C9516 - C9515) *
               C3448 +
           (C9518 - C9517 + C9520 - C9519 + C9522 - C9521 + C9524 - C9523) *
               C32252 +
           (C7486 * C2024 - C7492 * C2018 + C7487 * C2541 - C7493 * C2538 +
            C7488 * C6847 - C7494 * C6844 + C32292 * C7361 - C7495 * C7360) *
               C3449 +
           (C7486 * C2036 - C7492 * C2025 + C7487 * C2547 - C7493 * C2542 +
            C7488 * C6853 - C7494 * C6848 + C32292 * C7363 - C7495 * C7362) *
               C32097) *
              C31911 * C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                 C3448 +
             (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                 C32252 +
             (C4510 - C4511 + C4512 - C4513) * C3449 +
             (C4514 - C4515 + C4516 - C4517) * C32097) *
                C814 +
            ((C2665 - C2666 + C2667 - C2668) * C3448 +
             (C2669 - C2670 + C2671 - C2672) * C32252 + C4958 * C3449 +
             C4959 * C32097) *
                C815 +
            C4217 * C32271) *
               C577 +
           (((C4511 - C4510 + C4513 - C4512) * C3448 +
             (C4515 - C4514 + C4517 - C4516) * C32252 +
             (C4518 - C4519 + C4520 - C4521) * C3449 +
             (C4522 - C4523 + C4524 - C4525) * C32097) *
                C814 +
            (C4960 * C3448 + C4961 * C32252 +
             (C4526 - C4527 + C4528 - C4529) * C3449 +
             (C4530 - C4531 + C4532 - C4533) * C32097) *
                C815 +
            (C4962 * C3448 + C4963 * C32252 +
             (C4534 - C4535 + C4536 - C4537) * C3449 +
             (C4538 - C4539 + C4540 - C4541) * C32097) *
                C32271) *
               C578) *
              C31956 * C473 +
          ((((C2666 - C2665 + C2668 - C2667) * C3448 +
             (C2670 - C2669 + C2672 - C2671) * C32252 + C4960 * C3449 +
             C4961 * C32097) *
                C814 +
            ((C2674 - C2673 + C2676 - C2675) * C3448 +
             (C2678 - C2677 + C2680 - C2679) * C32252 + C4962 * C3449 +
             C4963 * C32097) *
                C815 +
            ((C2682 - C2681 + C2684 - C2683) * C3448 +
             (C2686 - C2685 + C2688 - C2687) * C32252 +
             (C3211 - C3212 + C3213 - C3214) * C3449 +
             (C3215 - C3216 + C3217 - C3218) * C32097) *
                C32271) *
               C577 +
           ((C4958 * C3448 + C4959 * C32252 +
             (C4527 - C4526 + C4529 - C4528) * C3449 +
             (C4531 - C4530 + C4533 - C4532) * C32097) *
                C814 +
            (C4212 * C3448 + C4213 * C32252 +
             (C4535 - C4534 + C4537 - C4536) * C3449 +
             (C4539 - C4538 + C4541 - C4540) * C32097) *
                C815 +
            ((C3212 - C3211 + C3214 - C3213) * C3448 +
             (C3216 - C3215 + C3218 - C3217) * C32252 +
             (C32251 * C375 - C2662 * C357 + C32055 * C2213 - C2663 * C2212) *
                 C3449 +
             (C32251 * C387 - C2662 * C376 + C32055 * C2215 - C2663 * C2214) *
                 C32097) *
                C32271) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
             C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
                C3448 +
            (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
             C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
                C32252 +
            (C9493 - C9494 + C9495 - C9496 + C9497 - C9498 + C9499 - C9500) *
                C3449 +
            (C9501 - C9502 + C9503 - C9504 + C9505 - C9506 + C9507 - C9508) *
                C32097) *
               C31911 * C577 +
           ((C9494 - C9493 + C9496 - C9495 + C9498 - C9497 + C9500 - C9499) *
                C3448 +
            (C9502 - C9501 + C9504 - C9503 + C9506 - C9505 + C9508 - C9507) *
                C32252 +
            (C9509 - C9510 + C9511 - C9512 + C9513 - C9514 + C9515 - C9516) *
                C3449 +
            (C9517 - C9518 + C9519 - C9520 + C9521 - C9522 + C9523 - C9524) *
                C32097) *
               C31911 * C578) *
              C31956 * C473 +
          (((C7498 - C7497 + C7500 - C7499 + C7502 - C7501 + C7504 - C7503) *
                C3448 +
            (C7506 - C7505 + C7508 - C7507 + C7510 - C7509 + C7512 - C7511) *
                C32252 +
            (C8001 - C8002 + C8003 - C8004 + C8005 - C8006 + C8007 - C8008) *
                C3449 +
            (C8009 - C8010 + C8011 - C8012 + C8013 - C8014 + C8015 - C8016) *
                C32097) *
               C31911 * C577 +
           ((C8002 - C8001 + C8004 - C8003 + C8006 - C8005 + C8008 - C8007) *
                C3448 +
            (C8010 - C8009 + C8012 - C8011 + C8014 - C8013 + C8016 - C8015) *
                C32252 +
            (C7486 * C371 - C7492 * C355 + C7487 * C1132 - C7493 * C1118 +
             C7488 * C1133 - C7494 * C1119 + C32292 * C7049 - C7495 * C7048) *
                C3449 +
            (C7486 * C385 - C7492 * C372 + C7487 * C1145 - C7493 * C1134 +
             C7488 * C1146 - C7494 * C1135 + C32292 * C7051 - C7495 * C7050) *
                C32097) *
               C31911 * C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C3448 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C32252 +
            (C32251 * C359 - C2662 * C349 + C32055 * C686 - C2663 * C681) *
                C3449 +
            (C32251 * C379 - C2662 * C360 + C32055 * C696 - C2663 * C687) *
                C32097) *
               C814 +
           ((C2665 - C2666 + C2667 - C2668) * C3448 +
            (C2669 - C2670 + C2671 - C2672) * C32252 +
            (C3196 - C3195 + C3198 - C3197) * C3449 +
            (C3200 - C3199 + C3202 - C3201) * C32097) *
               C815 +
           C4217 * C32271) *
              C31970 * C31956 * C110 +
          (((C2666 - C2665 + C2668 - C2667) * C3448 +
            (C2670 - C2669 + C2672 - C2671) * C32252 +
            (C3195 - C3196 + C3197 - C3198) * C3449 +
            (C3199 - C3200 + C3201 - C3202) * C32097) *
               C814 +
           ((C2674 - C2673 + C2676 - C2675) * C3448 +
            (C2678 - C2677 + C2680 - C2679) * C32252 +
            (C3203 - C3204 + C3205 - C3206) * C3449 +
            (C3207 - C3208 + C3209 - C3210) * C32097) *
               C815 +
           ((C2682 - C2681 + C2684 - C2683) * C3448 +
            (C2686 - C2685 + C2688 - C2687) * C32252 +
            (C3211 - C3212 + C3213 - C3214) * C3449 +
            (C3215 - C3216 + C3217 - C3218) * C32097) *
               C32271) *
              C31970 * C31956 * C111 +
          (C4217 * C814 +
           (C2707 * C3448 + C2708 * C32252 +
            (C3212 - C3211 + C3214 - C3213) * C3449 +
            (C3216 - C3215 + C3218 - C3217) * C32097) *
               C815 +
           ((C2690 - C2689 + C2692 - C2691) * C3448 +
            (C2694 - C2693 + C2696 - C2695) * C32252 +
            (C32251 * C367 - C2662 * C353 + C32055 * C694 - C2663 * C685) *
                C3449 +
            (C32251 * C383 - C2662 * C368 + C32055 * C700 - C2663 * C695) *
                C32097) *
               C32271) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C32251 * C122 - C2662 * C115 + C32055 * C254 - C2663 * C244) *
                C3448 +
            (C32251 * C136 - C2662 * C123 + C32055 * C274 - C2663 * C255) *
                C32252 +
            (C32251 * C359 - C2662 * C349 + C32055 * C686 - C2663 * C681) *
                C3449 +
            (C32251 * C379 - C2662 * C360 + C32055 * C696 - C2663 * C687) *
                C32097) *
               C814 +
           ((C2665 - C2666 + C2667 - C2668) * C3448 +
            (C2669 - C2670 + C2671 - C2672) * C32252 +
            (C3196 - C3195 + C3198 - C3197) * C3449 +
            (C3200 - C3199 + C3202 - C3201) * C32097) *
               C815 +
           C4217 * C32271) *
              C31970 * C240 +
          (((C2662 * C244 - C32251 * C254 + C2663 * C249 - C32055 * C264) *
                C3448 +
            (C2662 * C255 - C32251 * C274 + C2663 * C265 - C32055 * C279) *
                C32252 +
            (C2662 * C681 - C32251 * C686 + C2663 * C1113 - C32055 * C1122) *
                C3449 +
            (C2662 * C687 - C32251 * C696 + C2663 * C1123 - C32055 * C1140) *
                C32097) *
               C814 +
           ((C3041 - C3042 + C3043 - C3044) * C3448 +
            (C3045 - C3046 + C3047 - C3048) * C32252 +
            (C2662 * C682 - C32251 * C688 + C2663 * C1114 - C32055 * C1124) *
                C3449 +
            (C2662 * C689 - C32251 * C697 + C2663 * C1125 - C32055 * C1141) *
                C32097) *
               C815 +
           ((C3049 - C3050 + C3051 - C3052) * C3448 +
            (C3053 - C3054 + C3055 - C3056) * C32252 +
            (C2662 * C683 - C32251 * C690 + C2663 * C1115 - C32055 * C1126) *
                C3449 +
            (C2662 * C691 - C32251 * C698 + C2663 * C1127 - C32055 * C1142) *
                C32097) *
               C32271) *
              C31970 * C241 +
          (((C32251 * C264 - C2662 * C249 + C32055 * C985 - C2663 * C979) *
                C3448 +
            (C32251 * C279 - C2662 * C265 + C32055 * C997 - C2663 * C986) *
                C32252 +
            (C32251 * C1122 - C2662 * C1113 + C32055 * C1646 - C2663 * C1643) *
                C3449 +
            (C32251 * C1140 - C2662 * C1123 + C32055 * C1652 - C2663 * C1647) *
                C32097) *
               C814 +
           ((C32251 * C266 - C2662 * C250 + C32055 * C987 - C2663 * C980) *
                C3448 +
            (C32251 * C280 - C2662 * C267 + C32055 * C998 - C2663 * C988) *
                C32252 +
            (C32251 * C1124 - C2662 * C1114 + C32055 * C1648 - C2663 * C1644) *
                C3449 +
            (C32251 * C1141 - C2662 * C1125 + C32055 * C1653 - C2663 * C1649) *
                C32097) *
               C815 +
           ((C32251 * C268 - C2662 * C251 + C32055 * C989 - C2663 * C981) *
                C3448 +
            (C32251 * C281 - C2662 * C269 + C32055 * C999 - C2663 * C990) *
                C32252 +
            (C32251 * C1126 - C2662 * C1115 + C32055 * C1650 - C2663 * C1645) *
                C3449 +
            (C32251 * C1142 - C2662 * C1127 + C32055 * C1654 - C2663 * C1651) *
                C32097) *
               C32271) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
            C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
               C3448 +
           (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
            C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
               C32252 +
           (C7486 * C359 - C7492 * C349 + C7487 * C686 - C7493 * C681 +
            C7488 * C1122 - C7494 * C1113 + C32292 * C1646 - C7495 * C1643) *
               C3449 +
           (C7486 * C379 - C7492 * C360 + C7487 * C696 - C7493 * C687 +
            C7488 * C1140 - C7494 * C1123 + C32292 * C1652 - C7495 * C1647) *
               C32097) *
              C31911 * C31970 * C31956 * C110 +
          ((C7498 - C7497 + C7500 - C7499 + C7502 - C7501 + C7504 - C7503) *
               C3448 +
           (C7506 - C7505 + C7508 - C7507 + C7510 - C7509 + C7512 - C7511) *
               C32252 +
           (C8001 - C8002 + C8003 - C8004 + C8005 - C8006 + C8007 - C8008) *
               C3449 +
           (C8009 - C8010 + C8011 - C8012 + C8013 - C8014 + C8015 - C8016) *
               C32097) *
              C31911 * C31970 * C31956 * C111 +
          ((C7514 - C7513 + C7516 - C7515 + C7518 - C7517 + C7520 - C7519) *
               C3448 +
           (C7522 - C7521 + C7524 - C7523 + C7526 - C7525 + C7528 - C7527) *
               C32252 +
           (C7486 * C363 - C7492 * C351 + C7487 * C690 - C7493 * C683 +
            C7488 * C1126 - C7494 * C1115 + C32292 * C1650 - C7495 * C1645) *
               C3449 +
           (C7486 * C381 - C7492 * C364 + C7487 * C698 - C7493 * C691 +
            C7488 * C1142 - C7494 * C1127 + C32292 * C1654 - C7495 * C1651) *
               C32097) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C7486 * C122 - C7492 * C115 + C7487 * C254 - C7493 * C244 +
            C7488 * C264 - C7494 * C249 + C32292 * C985 - C7495 * C979) *
               C3448 +
           (C7486 * C136 - C7492 * C123 + C7487 * C274 - C7493 * C255 +
            C7488 * C279 - C7494 * C265 + C32292 * C997 - C7495 * C986) *
               C32252 +
           (C7486 * C359 - C7492 * C349 + C7487 * C686 - C7493 * C681 +
            C7488 * C1122 - C7494 * C1113 + C32292 * C1646 - C7495 * C1643) *
               C3449 +
           (C7486 * C379 - C7492 * C360 + C7487 * C696 - C7493 * C687 +
            C7488 * C1140 - C7494 * C1123 + C32292 * C1652 - C7495 * C1647) *
               C32097) *
              C31911 * C31970 * C240 +
          ((C7492 * C244 - C7486 * C254 + C7493 * C249 - C7487 * C264 +
            C7494 * C979 - C7488 * C985 + C7495 * C982 - C32292 * C991) *
               C3448 +
           (C7492 * C255 - C7486 * C274 + C7493 * C265 - C7487 * C279 +
            C7494 * C986 - C7488 * C997 + C7495 * C992 - C32292 * C1000) *
               C32252 +
           (C7492 * C681 - C7486 * C686 + C7493 * C1113 - C7487 * C1122 +
            C7494 * C1643 - C7488 * C1646 + C7495 * C6244 - C32292 * C6247) *
               C3449 +
           (C7492 * C687 - C7486 * C696 + C7493 * C1123 - C7487 * C1140 +
            C7494 * C1647 - C7488 * C1652 + C7495 * C6248 - C32292 * C6253) *
               C32097) *
              C31911 * C31970 * C241 +
          ((C7486 * C264 - C7492 * C249 + C7487 * C985 - C7493 * C979 +
            C7488 * C991 - C7494 * C982 + C32292 * C6176 - C7495 * C6174) *
               C3448 +
           (C7486 * C279 - C7492 * C265 + C7487 * C997 - C7493 * C986 +
            C7488 * C1000 - C7494 * C992 + C32292 * C6180 - C7495 * C6177) *
               C32252 +
           (C7486 * C1122 - C7492 * C1113 + C7487 * C1646 - C7493 * C1643 +
            C7488 * C6247 - C7494 * C6244 + C32292 * C6511 - C7495 * C6510) *
               C3449 +
           (C7486 * C1140 - C7492 * C1123 + C7487 * C1652 - C7493 * C1647 +
            C7488 * C6253 - C7494 * C6248 + C32292 * C6513 - C7495 * C6512) *
               C32097) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
              C32282 * C264 - C819 * C249) *
                 C114 +
             (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
              C32282 * C279 - C819 * C265) *
                 C32010) *
                C814 +
            ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
             (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
                C815 +
            C869 * C32271) *
               C31970 * C471 +
           (((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
              C819 * C979 - C32282 * C985) *
                 C114 +
             (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
              C819 * C986 - C32282 * C997) *
                 C32010) *
                C814 +
            ((C1300 - C1301 + C1302 - C1303 + C1304 - C1305) * C114 +
             (C1306 - C1307 + C1308 - C1309 + C1310 - C1311) * C32010) *
                C815 +
            ((C1312 - C1313 + C1314 - C1315 + C1316 - C1317) * C114 +
             (C1318 - C1319 + C1320 - C1321 + C1322 - C1323) * C32010) *
                C32271) *
               C31970 * C472) *
              C473 +
          ((((C822 - C821 + C824 - C823 + C826 - C825) * C114 +
             (C828 - C827 + C830 - C829 + C832 - C831) * C32010) *
                C814 +
            ((C834 - C833 + C836 - C835 + C838 - C837) * C114 +
             (C840 - C839 + C842 - C841 + C844 - C843) * C32010) *
                C815 +
            ((C845 - C846 + C847 - C848 + C849 - C850) * C114 +
             (C851 - C852 + C853 - C854 + C855 - C856) * C32010) *
                C32271) *
               C31970 * C471 +
           (((C1301 - C1300 + C1303 - C1302 + C1305 - C1304) * C114 +
             (C1307 - C1306 + C1309 - C1308 + C1311 - C1310) * C32010) *
                C814 +
            ((C1313 - C1312 + C1315 - C1314 + C1317 - C1316) * C114 +
             (C1319 - C1318 + C1321 - C1320 + C1323 - C1322) * C32010) *
                C815 +
            ((C32317 * C260 - C817 * C247 + C32305 * C270 - C818 * C252 +
              C32282 * C1296 - C819 * C1295) *
                 C114 +
             (C32317 * C277 - C817 * C261 + C32305 * C282 - C818 * C271 +
              C32282 * C1298 - C819 * C1297) *
                 C32010) *
                C32271) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C114 +
             (C31993 * C136 - C113 * C123) * C32010) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C31970 * C471 +
           (((C113 * C244 - C31993 * C254) * C114 +
             (C113 * C255 - C31993 * C274) * C32010) *
                C103 +
            ((C480 - C481) * C114 + (C482 - C483) * C32010) * C104 +
            ((C484 - C485) * C114 + (C486 - C487) * C32010) * C105 +
            ((C488 - C489) * C114 + (C490 - C491) * C32010) * C106 +
            ((C492 - C493) * C114 + (C494 - C495) * C32010) * C107) *
               C31970 * C472) *
              C473 +
          ((((C145 - C144) * C114 + (C147 - C146) * C32010) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C32010) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C32010) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C32010) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C32010) * C107) *
               C31970 * C471 +
           (((C481 - C480) * C114 + (C483 - C482) * C32010) * C103 +
            ((C485 - C484) * C114 + (C487 - C486) * C32010) * C104 +
            ((C489 - C488) * C114 + (C491 - C490) * C32010) * C105 +
            ((C493 - C492) * C114 + (C495 - C494) * C32010) * C106 +
            ((C31993 * C476 - C113 * C475) * C114 +
             (C31993 * C478 - C113 * C477) * C32010) *
                C107) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C1768 +
             (C31993 * C136 - C113 * C123) * C32318 + (C2043 - C2044) * C1769 +
             (C2045 - C2046) * C32307 + C2065 * C1770 + C2066 * C32285) *
                C814 +
            ((C144 - C145) * C1768 + (C146 - C147) * C32318 +
             (C585 - C584) * C1769 + (C587 - C586) * C32307 + C2051 * C1770 +
             C2052 * C32285) *
                C815 +
            C1798 * C32271) *
               C31970 * C471 +
           (((C113 * C244 - C31993 * C254) * C1768 +
             (C113 * C255 - C31993 * C274) * C32318 +
             (C113 * C681 - C31993 * C686) * C1769 +
             (C113 * C687 - C31993 * C696) * C32307 +
             (C113 * C1116 - C31993 * C1128) * C1770 +
             (C113 * C1130 - C31993 * C1143) * C32285) *
                C814 +
            ((C480 - C481) * C1768 + (C482 - C483) * C32318 +
             (C2217 - C2218) * C1769 + (C2219 - C2220) * C32307 +
             (C2221 - C2222) * C1770 + (C2223 - C2224) * C32285) *
                C815 +
            ((C484 - C485) * C1768 + (C486 - C487) * C32318 +
             (C2225 - C2226) * C1769 + (C2227 - C2228) * C32307 +
             (C2229 - C2230) * C1770 + (C2231 - C2232) * C32285) *
                C32271) *
               C31970 * C472) *
              C473 +
          ((((C145 - C144) * C1768 + (C147 - C146) * C32318 +
             (C584 - C585) * C1769 + (C586 - C587) * C32307 +
             (C1773 - C1772) * C1770 + (C1775 - C1774) * C32285) *
                C814 +
            ((C149 - C148) * C1768 + (C151 - C150) * C32318 +
             (C588 - C589) * C1769 + (C590 - C591) * C32307 +
             (C1781 - C1780) * C1770 + (C1783 - C1782) * C32285) *
                C815 +
            ((C153 - C152) * C1768 + (C155 - C154) * C32318 +
             (C592 - C593) * C1769 + (C594 - C595) * C32307 +
             (C1784 - C1785) * C1770 + (C1786 - C1787) * C32285) *
                C32271) *
               C31970 * C471 +
           (((C481 - C480) * C1768 + (C483 - C482) * C32318 +
             (C2218 - C2217) * C1769 + (C2220 - C2219) * C32307 +
             (C2222 - C2221) * C1770 + (C2224 - C2223) * C32285) *
                C814 +
            ((C485 - C484) * C1768 + (C487 - C486) * C32318 +
             (C2226 - C2225) * C1769 + (C2228 - C2227) * C32307 +
             (C2230 - C2229) * C1770 + (C2232 - C2231) * C32285) *
                C815 +
            ((C489 - C488) * C1768 + (C491 - C490) * C32318 +
             (C31993 * C692 - C113 * C684) * C1769 +
             (C31993 * C699 - C113 * C693) * C32307 +
             (C31993 * C2213 - C113 * C2212) * C1770 +
             (C31993 * C2215 - C113 * C2214) * C32285) *
                C32271) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
              C32282 * C264 - C5283 * C249) *
                 C114 +
             (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
              C32282 * C279 - C5283 * C265) *
                 C32010) *
                C32314 +
            ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
             (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
                C32301 +
            C5333 * C32271) *
               C31970 * C471 +
           (((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
              C5283 * C979 - C32282 * C985) *
                 C114 +
             (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
              C5283 * C986 - C32282 * C997) *
                 C32010) *
                C32314 +
            ((C5700 - C5701 + C5702 - C5703 + C5704 - C5705) * C114 +
             (C5706 - C5707 + C5708 - C5709 + C5710 - C5711) * C32010) *
                C32301 +
            ((C5712 - C5713 + C5714 - C5715 + C5716 - C5717) * C114 +
             (C5718 - C5719 + C5720 - C5721 + C5722 - C5723) * C32010) *
                C32271) *
               C31970 * C472) *
              C473 +
          ((((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C114 +
             (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32010) *
                C32314 +
            ((C5298 - C5297 + C5300 - C5299 + C5302 - C5301) * C114 +
             (C5304 - C5303 + C5306 - C5305 + C5308 - C5307) * C32010) *
                C32301 +
            ((C5309 - C5310 + C5311 - C5312 + C5313 - C5314) * C114 +
             (C5315 - C5316 + C5317 - C5318 + C5319 - C5320) * C32010) *
                C32271) *
               C31970 * C471 +
           (((C5701 - C5700 + C5703 - C5702 + C5705 - C5704) * C114 +
             (C5707 - C5706 + C5709 - C5708 + C5711 - C5710) * C32010) *
                C32314 +
            ((C5713 - C5712 + C5715 - C5714 + C5717 - C5716) * C114 +
             (C5719 - C5718 + C5721 - C5720 + C5723 - C5722) * C32010) *
                C32301 +
            ((C5275 * C260 - C5281 * C247 + C5276 * C270 - C5282 * C252 +
              C32282 * C1296 - C5283 * C1295) *
                 C114 +
             (C5275 * C277 - C5281 * C261 + C5276 * C282 - C5282 * C271 +
              C32282 * C1298 - C5283 * C1297) *
                 C32010) *
                C32271) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
             C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
             C6105 * C991 - C6111 * C982) *
                C114 +
            (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
             C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
             C6105 * C1000 - C6111 * C992) *
                C32010) *
               C31911 * C31970 * C471 +
           ((C6107 * C244 - C6101 * C254 + C6108 * C249 - C6102 * C264 +
             C6109 * C979 - C6103 * C985 + C6110 * C982 - C6104 * C991 +
             C6111 * C6174 - C6105 * C6176) *
                C114 +
            (C6107 * C255 - C6101 * C274 + C6108 * C265 - C6102 * C279 +
             C6109 * C986 - C6103 * C997 + C6110 * C992 - C6104 * C1000 +
             C6111 * C6177 - C6105 * C6180) *
                C32010) *
               C31911 * C31970 * C472) *
              C473 +
          (((C6107 * C116 - C6101 * C124 + C6108 * C245 - C6102 * C256 +
             C6109 * C250 - C6103 * C266 + C6110 * C980 - C6104 * C987 +
             C6111 * C983 - C6105 * C993) *
                C114 +
            (C6107 * C125 - C6101 * C137 + C6108 * C257 - C6102 * C275 +
             C6109 * C267 - C6103 * C280 + C6110 * C988 - C6104 * C998 +
             C6111 * C994 - C6105 * C1001) *
                C32010) *
               C31911 * C31970 * C471 +
           ((C6101 * C256 - C6107 * C245 + C6102 * C266 - C6108 * C250 +
             C6103 * C987 - C6109 * C980 + C6104 * C993 - C6110 * C983 +
             C6105 * C6339 - C6111 * C6338) *
                C114 +
            (C6101 * C275 - C6107 * C257 + C6102 * C280 - C6108 * C267 +
             C6103 * C998 - C6109 * C988 + C6104 * C1001 - C6110 * C994 +
             C6105 * C6341 - C6111 * C6340) *
                C32010) *
               C31911 * C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C1768 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32318 +
            (C6857 - C6858 + C6859 - C6860 + C6861 - C6862) * C1769 +
            (C6863 - C6864 + C6865 - C6866 + C6867 - C6868) * C32307 +
            C6901 * C1770 + C6902 * C32285) *
               C31911 * C31970 * C471 +
           ((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
             C5283 * C979 - C32282 * C985) *
                C1768 +
            (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
             C5283 * C986 - C32282 * C997) *
                C32318 +
            (C5281 * C681 - C5275 * C686 + C5282 * C1113 - C5276 * C1122 +
             C5283 * C1643 - C32282 * C1646) *
                C1769 +
            (C5281 * C687 - C5275 * C696 + C5282 * C1123 - C5276 * C1140 +
             C5283 * C1647 - C32282 * C1652) *
                C32307 +
            (C5281 * C1116 - C5275 * C1128 + C5282 * C1117 - C5276 * C1129 +
             C5283 * C6245 - C32282 * C6249) *
                C1770 +
            (C5281 * C1130 - C5275 * C1143 + C5282 * C1131 - C5276 * C1144 +
             C5283 * C6251 - C32282 * C6254) *
                C32285) *
               C31911 * C31970 * C472) *
              C473 +
          (((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C1768 +
            (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32318 +
            (C5870 - C5871 + C5872 - C5873 + C5874 - C5875) * C1769 +
            (C5876 - C5877 + C5878 - C5879 + C5880 - C5881) * C32307 +
            (C5281 * C355 - C5275 * C371 + C5282 * C1118 - C5276 * C1132 +
             C5283 * C1119 - C32282 * C1133) *
                C1770 +
            (C5281 * C372 - C5275 * C385 + C5282 * C1134 - C5276 * C1145 +
             C5283 * C1135 - C32282 * C1146) *
                C32285) *
               C31911 * C31970 * C471 +
           ((C5701 - C5700 + C5703 - C5702 + C5705 - C5704) * C1768 +
            (C5707 - C5706 + C5709 - C5708 + C5711 - C5710) * C32318 +
            (C5275 * C688 - C5281 * C682 + C5276 * C1124 - C5282 * C1114 +
             C32282 * C1648 - C5283 * C1644) *
                C1769 +
            (C5275 * C697 - C5281 * C689 + C5276 * C1141 - C5282 * C1125 +
             C32282 * C1653 - C5283 * C1649) *
                C32307 +
            (C5275 * C1132 - C5281 * C1118 + C5276 * C1133 - C5282 * C1119 +
             C32282 * C7049 - C5283 * C7048) *
                C1770 +
            (C5275 * C1145 - C5281 * C1134 + C5276 * C1146 - C5282 * C1135 +
             C32282 * C7051 - C5283 * C7050) *
                C32285) *
               C31911 * C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
              C32282 * C264 - C819 * C249) *
                 C114 +
             (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
              C32282 * C279 - C819 * C265) *
                 C32010) *
                C814 +
            ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
             (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
                C815 +
            C869 * C32271) *
               C577 +
           (((C817 * C349 - C32317 * C359 + C818 * C681 - C32305 * C686 +
              C819 * C1113 - C32282 * C1122) *
                 C114 +
             (C817 * C360 - C32317 * C379 + C818 * C687 - C32305 * C696 +
              C819 * C1123 - C32282 * C1140) *
                 C32010) *
                C814 +
            ((C1474 - C1475 + C1476 - C1477 + C1478 - C1479) * C114 +
             (C1480 - C1481 + C1482 - C1483 + C1484 - C1485) * C32010) *
                C815 +
            ((C1486 - C1487 + C1488 - C1489 + C1490 - C1491) * C114 +
             (C1492 - C1493 + C1494 - C1495 + C1496 - C1497) * C32010) *
                C32271) *
               C578) *
              C471 +
          ((((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
              C819 * C979 - C32282 * C985) *
                 C114 +
             (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
              C819 * C986 - C32282 * C997) *
                 C32010) *
                C814 +
            ((C1300 - C1301 + C1302 - C1303 + C1304 - C1305) * C114 +
             (C1306 - C1307 + C1308 - C1309 + C1310 - C1311) * C32010) *
                C815 +
            ((C1312 - C1313 + C1314 - C1315 + C1316 - C1317) * C114 +
             (C1318 - C1319 + C1320 - C1321 + C1322 - C1323) * C32010) *
                C32271) *
               C577 +
           (((C32317 * C686 - C817 * C681 + C32305 * C1122 - C818 * C1113 +
              C32282 * C1646 - C819 * C1643) *
                 C114 +
             (C32317 * C696 - C817 * C687 + C32305 * C1140 - C818 * C1123 +
              C32282 * C1652 - C819 * C1647) *
                 C32010) *
                C814 +
            ((C32317 * C688 - C817 * C682 + C32305 * C1124 - C818 * C1114 +
              C32282 * C1648 - C819 * C1644) *
                 C114 +
             (C32317 * C697 - C817 * C689 + C32305 * C1141 - C818 * C1125 +
              C32282 * C1653 - C819 * C1649) *
                 C32010) *
                C815 +
            ((C32317 * C690 - C817 * C683 + C32305 * C1126 - C818 * C1115 +
              C32282 * C1650 - C819 * C1645) *
                 C114 +
             (C32317 * C698 - C817 * C691 + C32305 * C1142 - C818 * C1127 +
              C32282 * C1654 - C819 * C1651) *
                 C32010) *
                C32271) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C114 +
             (C31993 * C136 - C113 * C123) * C32010) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C577 +
           (((C113 * C349 - C31993 * C359) * C114 +
             (C113 * C360 - C31993 * C379) * C32010) *
                C103 +
            ((C584 - C585) * C114 + (C586 - C587) * C32010) * C104 +
            ((C588 - C589) * C114 + (C590 - C591) * C32010) * C105 +
            ((C592 - C593) * C114 + (C594 - C595) * C32010) * C106 +
            ((C596 - C597) * C114 + (C598 - C599) * C32010) * C107) *
               C578) *
              C471 +
          ((((C113 * C244 - C31993 * C254) * C114 +
             (C113 * C255 - C31993 * C274) * C32010) *
                C103 +
            ((C480 - C481) * C114 + (C482 - C483) * C32010) * C104 +
            ((C484 - C485) * C114 + (C486 - C487) * C32010) * C105 +
            ((C488 - C489) * C114 + (C490 - C491) * C32010) * C106 +
            ((C492 - C493) * C114 + (C494 - C495) * C32010) * C107) *
               C577 +
           (((C31993 * C686 - C113 * C681) * C114 +
             (C31993 * C696 - C113 * C687) * C32010) *
                C103 +
            ((C31993 * C688 - C113 * C682) * C114 +
             (C31993 * C697 - C113 * C689) * C32010) *
                C104 +
            ((C31993 * C690 - C113 * C683) * C114 +
             (C31993 * C698 - C113 * C691) * C32010) *
                C105 +
            ((C31993 * C692 - C113 * C684) * C114 +
             (C31993 * C699 - C113 * C693) * C32010) *
                C106 +
            ((C31993 * C694 - C113 * C685) * C114 +
             (C31993 * C700 - C113 * C695) * C32010) *
                C107) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C1768 +
             (C31993 * C136 - C113 * C123) * C32318 + (C2043 - C2044) * C1769 +
             (C2045 - C2046) * C32307 + C2065 * C1770 + C2066 * C32285) *
                C814 +
            ((C144 - C145) * C1768 + (C146 - C147) * C32318 + C2383 * C1769 +
             C2384 * C32307 + C2051 * C1770 + C2052 * C32285) *
                C815 +
            C1798 * C32271) *
               C577 +
           (((C2044 - C2043) * C1768 + (C2046 - C2045) * C32318 +
             (C2048 - C2047) * C1769 + (C2050 - C2049) * C32307 +
             (C2053 - C2054) * C1770 + (C2055 - C2056) * C32285) *
                C814 +
            (C2385 * C1768 + C2386 * C32318 + C2387 * C1769 + C2388 * C32307 +
             (C2057 - C2058) * C1770 + (C2059 - C2060) * C32285) *
                C815 +
            (C2389 * C1768 + C2390 * C32318 + C2391 * C1769 + C2392 * C32307 +
             (C2061 - C2062) * C1770 + (C2063 - C2064) * C32285) *
                C32271) *
               C578) *
              C471 +
          ((((C113 * C244 - C31993 * C254) * C1768 +
             (C113 * C255 - C31993 * C274) * C32318 + (C2551 - C2552) * C1769 +
             (C2553 - C2554) * C32307 + (C2555 - C2556) * C1770 +
             (C2557 - C2558) * C32285) *
                C814 +
            ((C480 - C481) * C1768 + (C482 - C483) * C32318 +
             (C2217 - C2218) * C1769 + (C2219 - C2220) * C32307 +
             (C2221 - C2222) * C1770 + (C2223 - C2224) * C32285) *
                C815 +
            ((C484 - C485) * C1768 + (C486 - C487) * C32318 +
             (C2225 - C2226) * C1769 + (C2227 - C2228) * C32307 +
             (C2229 - C2230) * C1770 + (C2231 - C2232) * C32285) *
                C32271) *
               C577 +
           (((C2552 - C2551) * C1768 + (C2554 - C2553) * C32318 +
             (C2556 - C2555) * C1769 + (C2558 - C2557) * C32307 +
             (C31993 * C2541 - C113 * C2538) * C1770 +
             (C31993 * C2547 - C113 * C2542) * C32285) *
                C814 +
            ((C2218 - C2217) * C1768 + (C2220 - C2219) * C32318 +
             (C2222 - C2221) * C1769 + (C2224 - C2223) * C32307 +
             (C31993 * C2543 - C113 * C2539) * C1770 +
             (C31993 * C2548 - C113 * C2544) * C32285) *
                C815 +
            ((C2226 - C2225) * C1768 + (C2228 - C2227) * C32318 +
             (C2230 - C2229) * C1769 + (C2232 - C2231) * C32307 +
             (C31993 * C2545 - C113 * C2540) * C1770 +
             (C31993 * C2549 - C113 * C2546) * C32285) *
                C32271) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
              C32282 * C264 - C5283 * C249) *
                 C114 +
             (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
              C32282 * C279 - C5283 * C265) *
                 C32010) *
                C32314 +
            ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
             (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
                C32301 +
            C5333 * C32271) *
               C577 +
           (((C5281 * C349 - C5275 * C359 + C5282 * C681 - C5276 * C686 +
              C5283 * C1113 - C32282 * C1122) *
                 C114 +
             (C5281 * C360 - C5275 * C379 + C5282 * C687 - C5276 * C696 +
              C5283 * C1123 - C32282 * C1140) *
                 C32010) *
                C32314 +
            ((C5870 - C5871 + C5872 - C5873 + C5874 - C5875) * C114 +
             (C5876 - C5877 + C5878 - C5879 + C5880 - C5881) * C32010) *
                C32301 +
            ((C5882 - C5883 + C5884 - C5885 + C5886 - C5887) * C114 +
             (C5888 - C5889 + C5890 - C5891 + C5892 - C5893) * C32010) *
                C32271) *
               C578) *
              C471 +
          ((((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
              C5283 * C979 - C32282 * C985) *
                 C114 +
             (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
              C5283 * C986 - C32282 * C997) *
                 C32010) *
                C32314 +
            ((C5700 - C5701 + C5702 - C5703 + C5704 - C5705) * C114 +
             (C5706 - C5707 + C5708 - C5709 + C5710 - C5711) * C32010) *
                C32301 +
            ((C5712 - C5713 + C5714 - C5715 + C5716 - C5717) * C114 +
             (C5718 - C5719 + C5720 - C5721 + C5722 - C5723) * C32010) *
                C32271) *
               C577 +
           (((C5275 * C686 - C5281 * C681 + C5276 * C1122 - C5282 * C1113 +
              C32282 * C1646 - C5283 * C1643) *
                 C114 +
             (C5275 * C696 - C5281 * C687 + C5276 * C1140 - C5282 * C1123 +
              C32282 * C1652 - C5283 * C1647) *
                 C32010) *
                C32314 +
            ((C5275 * C688 - C5281 * C682 + C5276 * C1124 - C5282 * C1114 +
              C32282 * C1648 - C5283 * C1644) *
                 C114 +
             (C5275 * C697 - C5281 * C689 + C5276 * C1141 - C5282 * C1125 +
              C32282 * C1653 - C5283 * C1649) *
                 C32010) *
                C32301 +
            ((C5275 * C690 - C5281 * C683 + C5276 * C1126 - C5282 * C1115 +
              C32282 * C1650 - C5283 * C1645) *
                 C114 +
             (C5275 * C698 - C5281 * C691 + C5276 * C1142 - C5282 * C1127 +
              C32282 * C1654 - C5283 * C1651) *
                 C32010) *
                C32271) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
             C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
             C6105 * C991 - C6111 * C982) *
                C114 +
            (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
             C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
             C6105 * C1000 - C6111 * C992) *
                C32010) *
               C31911 * C577 +
           ((C6107 * C349 - C6101 * C359 + C6108 * C681 - C6102 * C686 +
             C6109 * C1113 - C6103 * C1122 + C6110 * C1643 - C6104 * C1646 +
             C6111 * C6244 - C6105 * C6247) *
                C114 +
            (C6107 * C360 - C6101 * C379 + C6108 * C687 - C6102 * C696 +
             C6109 * C1123 - C6103 * C1140 + C6110 * C1647 - C6104 * C1652 +
             C6111 * C6248 - C6105 * C6253) *
                C32010) *
               C31911 * C578) *
              C471 +
          (((C6107 * C244 - C6101 * C254 + C6108 * C249 - C6102 * C264 +
             C6109 * C979 - C6103 * C985 + C6110 * C982 - C6104 * C991 +
             C6111 * C6174 - C6105 * C6176) *
                C114 +
            (C6107 * C255 - C6101 * C274 + C6108 * C265 - C6102 * C279 +
             C6109 * C986 - C6103 * C997 + C6110 * C992 - C6104 * C1000 +
             C6111 * C6177 - C6105 * C6180) *
                C32010) *
               C31911 * C577 +
           ((C6101 * C686 - C6107 * C681 + C6102 * C1122 - C6108 * C1113 +
             C6103 * C1646 - C6109 * C1643 + C6104 * C6247 - C6110 * C6244 +
             C6105 * C6511 - C6111 * C6510) *
                C114 +
            (C6101 * C696 - C6107 * C687 + C6102 * C1140 - C6108 * C1123 +
             C6103 * C1652 - C6109 * C1647 + C6104 * C6253 - C6110 * C6248 +
             C6105 * C6513 - C6111 * C6512) *
                C32010) *
               C31911 * C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C1768 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32318 +
            (C6857 - C6858 + C6859 - C6860 + C6861 - C6862) * C1769 +
            (C6863 - C6864 + C6865 - C6866 + C6867 - C6868) * C32307 +
            C6901 * C1770 + C6902 * C32285) *
               C31911 * C577 +
           ((C6858 - C6857 + C6860 - C6859 + C6862 - C6861) * C1768 +
            (C6864 - C6863 + C6866 - C6865 + C6868 - C6867) * C32318 +
            (C6870 - C6869 + C6872 - C6871 + C6874 - C6873) * C1769 +
            (C6876 - C6875 + C6878 - C6877 + C6880 - C6879) * C32307 +
            (C6881 - C6882 + C6883 - C6884 + C6885 - C6886) * C1770 +
            (C6887 - C6888 + C6889 - C6890 + C6891 - C6892) * C32285) *
               C31911 * C578) *
              C471 +
          (((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
             C5283 * C979 - C32282 * C985) *
                C1768 +
            (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
             C5283 * C986 - C32282 * C997) *
                C32318 +
            (C7365 - C7366 + C7367 - C7368 + C7369 - C7370) * C1769 +
            (C7371 - C7372 + C7373 - C7374 + C7375 - C7376) * C32307 +
            (C7377 - C7378 + C7379 - C7380 + C7381 - C7382) * C1770 +
            (C7383 - C7384 + C7385 - C7386 + C7387 - C7388) * C32285) *
               C31911 * C577 +
           ((C7366 - C7365 + C7368 - C7367 + C7370 - C7369) * C1768 +
            (C7372 - C7371 + C7374 - C7373 + C7376 - C7375) * C32318 +
            (C7378 - C7377 + C7380 - C7379 + C7382 - C7381) * C1769 +
            (C7384 - C7383 + C7386 - C7385 + C7388 - C7387) * C32307 +
            (C5275 * C2541 - C5281 * C2538 + C5276 * C6847 - C5282 * C6844 +
             C32282 * C7361 - C5283 * C7360) *
                C1770 +
            (C5275 * C2547 - C5281 * C2542 + C5276 * C6853 - C5282 * C6848 +
             C32282 * C7363 - C5283 * C7362) *
                C32285) *
               C31911 * C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             ((((C31993 * C122 - C113 * C115) * C114 +
                (C31993 * C136 - C113 * C123) * C32010) *
                   C103 +
               ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
               C176 * C105 + C177 * C106 + C178 * C107) *
                  C31970 * C31956 * C110 +
              (((C145 - C144) * C114 + (C147 - C146) * C32010) * C103 +
               ((C149 - C148) * C114 + (C151 - C150) * C32010) * C104 +
               ((C153 - C152) * C114 + (C155 - C154) * C32010) * C105 +
               ((C157 - C156) * C114 + (C159 - C158) * C32010) * C106 +
               ((C160 - C161) * C114 + (C162 - C163) * C32010) * C107) *
                  C31970 * C31956 * C111 +
              (C176 * C103 + C177 * C104 + C178 * C105 +
               ((C161 - C160) * C114 + (C163 - C162) * C32010) * C106 +
               ((C31993 * C134 - C113 * C121) * C114 +
                (C31993 * C142 - C113 * C135) * C32010) *
                   C107) *
                  C31970 * C31956 * C112) +
         std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             ((((C31993 * C122 - C113 * C115) * C114 +
                (C31993 * C136 - C113 * C123) * C32010) *
                   C103 +
               ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
               C176 * C105 + C177 * C106 + C178 * C107) *
                  C31970 * C240 +
              (((C113 * C244 - C31993 * C254) * C114 +
                (C113 * C255 - C31993 * C274) * C32010) *
                   C103 +
               ((C113 * C245 - C31993 * C256) * C114 +
                (C113 * C257 - C31993 * C275) * C32010) *
                   C104 +
               ((C113 * C246 - C31993 * C258) * C114 +
                (C113 * C259 - C31993 * C276) * C32010) *
                   C105 +
               ((C113 * C247 - C31993 * C260) * C114 +
                (C113 * C261 - C31993 * C277) * C32010) *
                   C106 +
               ((C113 * C248 - C31993 * C262) * C114 +
                (C113 * C263 - C31993 * C278) * C32010) *
                   C107) *
                  C31970 * C241 +
              (((C31993 * C264 - C113 * C249) * C114 +
                (C31993 * C279 - C113 * C265) * C32010) *
                   C103 +
               ((C31993 * C266 - C113 * C250) * C114 +
                (C31993 * C280 - C113 * C267) * C32010) *
                   C104 +
               ((C31993 * C268 - C113 * C251) * C114 +
                (C31993 * C281 - C113 * C269) * C32010) *
                   C105 +
               ((C31993 * C270 - C113 * C252) * C114 +
                (C31993 * C282 - C113 * C271) * C32010) *
                   C106 +
               ((C31993 * C272 - C113 * C253) * C114 +
                (C31993 * C283 - C113 * C273) * C32010) *
                   C107) *
                  C31970 * C242) *
             C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C114 +
            (C31993 * C136 - C113 * C123) * C32010) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C346 +
          (((C113 * C349 - C31993 * C359) * C114 +
            (C113 * C360 - C31993 * C379) * C32010) *
               C103 +
           ((C113 * C350 - C31993 * C361) * C114 +
            (C113 * C362 - C31993 * C380) * C32010) *
               C104 +
           ((C113 * C351 - C31993 * C363) * C114 +
            (C113 * C364 - C31993 * C381) * C32010) *
               C105 +
           ((C113 * C352 - C31993 * C365) * C114 +
            (C113 * C366 - C31993 * C382) * C32010) *
               C106 +
           ((C113 * C353 - C31993 * C367) * C114 +
            (C113 * C368 - C31993 * C383) * C32010) *
               C107) *
              C347 +
          (((C31993 * C369 - C113 * C354) * C114 +
            (C31993 * C384 - C113 * C370) * C32010) *
               C103 +
           ((C31993 * C371 - C113 * C355) * C114 +
            (C31993 * C385 - C113 * C372) * C32010) *
               C104 +
           ((C31993 * C373 - C113 * C356) * C114 +
            (C31993 * C386 - C113 * C374) * C32010) *
               C105 +
           ((C31993 * C375 - C113 * C357) * C114 +
            (C31993 * C387 - C113 * C376) * C32010) *
               C106 +
           ((C31993 * C377 - C113 * C358) * C114 +
            (C31993 * C388 - C113 * C378) * C32010) *
               C107) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C114 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C32010) *
               C814 +
           ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
            (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
               C815 +
           C869 * C32271) *
              C31970 * C31956 * C110 +
          (((C822 - C821 + C824 - C823 + C826 - C825) * C114 +
            (C828 - C827 + C830 - C829 + C832 - C831) * C32010) *
               C814 +
           ((C834 - C833 + C836 - C835 + C838 - C837) * C114 +
            (C840 - C839 + C842 - C841 + C844 - C843) * C32010) *
               C815 +
           ((C845 - C846 + C847 - C848 + C849 - C850) * C114 +
            (C851 - C852 + C853 - C854 + C855 - C856) * C32010) *
               C32271) *
              C31970 * C31956 * C111 +
          (C869 * C814 +
           ((C846 - C845 + C848 - C847 + C850 - C849) * C114 +
            (C852 - C851 + C854 - C853 + C856 - C855) * C32010) *
               C815 +
           ((C32317 * C130 - C817 * C119 + C32305 * C262 - C818 * C248 +
             C32282 * C272 - C819 * C253) *
                C114 +
            (C32317 * C140 - C817 * C131 + C32305 * C278 - C818 * C263 +
             C32282 * C283 - C819 * C273) *
                C32010) *
               C32271) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C114 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C32010) *
               C814 +
           ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
            (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
               C815 +
           C869 * C32271) *
              C31970 * C240 +
          (((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
             C819 * C979 - C32282 * C985) *
                C114 +
            (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
             C819 * C986 - C32282 * C997) *
                C32010) *
               C814 +
           ((C817 * C245 - C32317 * C256 + C818 * C250 - C32305 * C266 +
             C819 * C980 - C32282 * C987) *
                C114 +
            (C817 * C257 - C32317 * C275 + C818 * C267 - C32305 * C280 +
             C819 * C988 - C32282 * C998) *
                C32010) *
               C815 +
           ((C817 * C246 - C32317 * C258 + C818 * C251 - C32305 * C268 +
             C819 * C981 - C32282 * C989) *
                C114 +
            (C817 * C259 - C32317 * C276 + C818 * C269 - C32305 * C281 +
             C819 * C990 - C32282 * C999) *
                C32010) *
               C32271) *
              C31970 * C241 +
          (((C32317 * C264 - C817 * C249 + C32305 * C985 - C818 * C979 +
             C32282 * C991 - C819 * C982) *
                C114 +
            (C32317 * C279 - C817 * C265 + C32305 * C997 - C818 * C986 +
             C32282 * C1000 - C819 * C992) *
                C32010) *
               C814 +
           ((C32317 * C266 - C817 * C250 + C32305 * C987 - C818 * C980 +
             C32282 * C993 - C819 * C983) *
                C114 +
            (C32317 * C280 - C817 * C267 + C32305 * C998 - C818 * C988 +
             C32282 * C1001 - C819 * C994) *
                C32010) *
               C815 +
           ((C32317 * C268 - C817 * C251 + C32305 * C989 - C818 * C981 +
             C32282 * C995 - C819 * C984) *
                C114 +
            (C32317 * C281 - C817 * C269 + C32305 * C999 - C818 * C990 +
             C32282 * C1002 - C819 * C996) *
                C32010) *
               C32271) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C114 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C32010) *
               C814 +
           ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
            (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
               C815 +
           C869 * C32271) *
              C346 +
          (((C817 * C349 - C32317 * C359 + C818 * C681 - C32305 * C686 +
             C819 * C1113 - C32282 * C1122) *
                C114 +
            (C817 * C360 - C32317 * C379 + C818 * C687 - C32305 * C696 +
             C819 * C1123 - C32282 * C1140) *
                C32010) *
               C814 +
           ((C817 * C350 - C32317 * C361 + C818 * C682 - C32305 * C688 +
             C819 * C1114 - C32282 * C1124) *
                C114 +
            (C817 * C362 - C32317 * C380 + C818 * C689 - C32305 * C697 +
             C819 * C1125 - C32282 * C1141) *
                C32010) *
               C815 +
           ((C817 * C351 - C32317 * C363 + C818 * C683 - C32305 * C690 +
             C819 * C1115 - C32282 * C1126) *
                C114 +
            (C817 * C364 - C32317 * C381 + C818 * C691 - C32305 * C698 +
             C819 * C1127 - C32282 * C1142) *
                C32010) *
               C32271) *
              C347 +
          (((C32317 * C369 - C817 * C354 + C32305 * C1128 - C818 * C1116 +
             C32282 * C1129 - C819 * C1117) *
                C114 +
            (C32317 * C384 - C817 * C370 + C32305 * C1143 - C818 * C1130 +
             C32282 * C1144 - C819 * C1131) *
                C32010) *
               C814 +
           ((C32317 * C371 - C817 * C355 + C32305 * C1132 - C818 * C1118 +
             C32282 * C1133 - C819 * C1119) *
                C114 +
            (C32317 * C385 - C817 * C372 + C32305 * C1145 - C818 * C1134 +
             C32282 * C1146 - C819 * C1135) *
                C32010) *
               C815 +
           ((C32317 * C373 - C817 * C356 + C32305 * C1136 - C818 * C1120 +
             C32282 * C1137 - C819 * C1121) *
                C114 +
            (C32317 * C386 - C817 * C374 + C32305 * C1147 - C818 * C1138 +
             C32282 * C1148 - C819 * C1139) *
                C32010) *
               C32271) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C1768 +
            (C31993 * C136 - C113 * C123) * C32318 +
            (C31993 * C359 - C113 * C349) * C1769 +
            (C31993 * C379 - C113 * C360) * C32307 +
            (C31993 * C369 - C113 * C354) * C1770 +
            (C31993 * C384 - C113 * C370) * C32285) *
               C814 +
           ((C144 - C145) * C1768 + (C146 - C147) * C32318 +
            (C585 - C584) * C1769 + (C587 - C586) * C32307 +
            (C1772 - C1773) * C1770 + (C1774 - C1775) * C32285) *
               C815 +
           C1798 * C32271) *
              C31970 * C31956 * C110 +
          (((C145 - C144) * C1768 + (C147 - C146) * C32318 +
            (C584 - C585) * C1769 + (C586 - C587) * C32307 +
            (C1773 - C1772) * C1770 + (C1775 - C1774) * C32285) *
               C814 +
           ((C149 - C148) * C1768 + (C151 - C150) * C32318 +
            (C588 - C589) * C1769 + (C590 - C591) * C32307 +
            (C1781 - C1780) * C1770 + (C1783 - C1782) * C32285) *
               C815 +
           ((C153 - C152) * C1768 + (C155 - C154) * C32318 +
            (C592 - C593) * C1769 + (C594 - C595) * C32307 +
            (C1784 - C1785) * C1770 + (C1786 - C1787) * C32285) *
               C32271) *
              C31970 * C31956 * C111 +
          (C1798 * C814 +
           (C166 * C1768 + C167 * C32318 + (C593 - C592) * C1769 +
            (C595 - C594) * C32307 + (C1785 - C1784) * C1770 +
            (C1787 - C1786) * C32285) *
               C815 +
           (C168 * C1768 + C169 * C32318 + (C597 - C596) * C1769 +
            (C599 - C598) * C32307 + (C31993 * C377 - C113 * C358) * C1770 +
            (C31993 * C388 - C113 * C378) * C32285) *
               C32271) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C1768 +
            (C31993 * C136 - C113 * C123) * C32318 +
            (C31993 * C359 - C113 * C349) * C1769 +
            (C31993 * C379 - C113 * C360) * C32307 +
            (C31993 * C369 - C113 * C354) * C1770 +
            (C31993 * C384 - C113 * C370) * C32285) *
               C814 +
           ((C144 - C145) * C1768 + (C146 - C147) * C32318 +
            (C585 - C584) * C1769 + (C587 - C586) * C32307 +
            (C1772 - C1773) * C1770 + (C1774 - C1775) * C32285) *
               C815 +
           C1798 * C32271) *
              C31970 * C240 +
          (((C113 * C244 - C31993 * C254) * C1768 +
            (C113 * C255 - C31993 * C274) * C32318 +
            (C113 * C681 - C31993 * C686) * C1769 +
            (C113 * C687 - C31993 * C696) * C32307 +
            (C113 * C1116 - C31993 * C1128) * C1770 +
            (C113 * C1130 - C31993 * C1143) * C32285) *
               C814 +
           ((C480 - C481) * C1768 + (C482 - C483) * C32318 +
            (C113 * C682 - C31993 * C688) * C1769 +
            (C113 * C689 - C31993 * C697) * C32307 +
            (C113 * C1118 - C31993 * C1132) * C1770 +
            (C113 * C1134 - C31993 * C1145) * C32285) *
               C815 +
           ((C484 - C485) * C1768 + (C486 - C487) * C32318 +
            (C113 * C683 - C31993 * C690) * C1769 +
            (C113 * C691 - C31993 * C698) * C32307 +
            (C113 * C1120 - C31993 * C1136) * C1770 +
            (C113 * C1138 - C31993 * C1147) * C32285) *
               C32271) *
              C31970 * C241 +
          (((C31993 * C264 - C113 * C249) * C1768 +
            (C31993 * C279 - C113 * C265) * C32318 +
            (C31993 * C1122 - C113 * C1113) * C1769 +
            (C31993 * C1140 - C113 * C1123) * C32307 +
            (C31993 * C1129 - C113 * C1117) * C1770 +
            (C31993 * C1144 - C113 * C1131) * C32285) *
               C814 +
           ((C31993 * C266 - C113 * C250) * C1768 +
            (C31993 * C280 - C113 * C267) * C32318 +
            (C31993 * C1124 - C113 * C1114) * C1769 +
            (C31993 * C1141 - C113 * C1125) * C32307 +
            (C31993 * C1133 - C113 * C1119) * C1770 +
            (C31993 * C1146 - C113 * C1135) * C32285) *
               C815 +
           ((C31993 * C268 - C113 * C251) * C1768 +
            (C31993 * C281 - C113 * C269) * C32318 +
            (C31993 * C1126 - C113 * C1115) * C1769 +
            (C31993 * C1142 - C113 * C1127) * C32307 +
            (C31993 * C1137 - C113 * C1121) * C1770 +
            (C31993 * C1148 - C113 * C1139) * C32285) *
               C32271) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C1768 +
            (C31993 * C136 - C113 * C123) * C32318 + (C2043 - C2044) * C1769 +
            (C2045 - C2046) * C32307 + C2065 * C1770 + C2066 * C32285) *
               C814 +
           ((C144 - C145) * C1768 + (C146 - C147) * C32318 +
            (C585 - C584) * C1769 + (C587 - C586) * C32307 + C2051 * C1770 +
            C2052 * C32285) *
               C815 +
           C1798 * C32271) *
              C346 +
          (((C2044 - C2043) * C1768 + (C2046 - C2045) * C32318 +
            (C2048 - C2047) * C1769 + (C2050 - C2049) * C32307 +
            (C2053 - C2054) * C1770 + (C2055 - C2056) * C32285) *
               C814 +
           ((C584 - C585) * C1768 + (C586 - C587) * C32318 +
            (C1773 - C1772) * C1769 + (C1775 - C1774) * C32307 +
            (C2057 - C2058) * C1770 + (C2059 - C2060) * C32285) *
               C815 +
           ((C588 - C589) * C1768 + (C590 - C591) * C32318 +
            (C1781 - C1780) * C1769 + (C1783 - C1782) * C32307 +
            (C2061 - C2062) * C1770 + (C2063 - C2064) * C32285) *
               C32271) *
              C347 +
          ((C2065 * C1768 + C2066 * C32318 + (C2054 - C2053) * C1769 +
            (C2056 - C2055) * C32307 + (C31993 * C2030 - C113 * C2021) * C1770 +
            (C31993 * C2039 - C113 * C2031) * C32285) *
               C814 +
           (C2051 * C1768 + C2052 * C32318 + (C2058 - C2057) * C1769 +
            (C2060 - C2059) * C32307 + (C31993 * C2032 - C113 * C2022) * C1770 +
            (C31993 * C2040 - C113 * C2033) * C32285) *
               C815 +
           (C1791 * C1768 + C1792 * C32318 + (C2062 - C2061) * C1769 +
            (C2064 - C2063) * C32307 + (C31993 * C2034 - C113 * C2023) * C1770 +
            (C31993 * C2041 - C113 * C2035) * C32285) *
               C32271) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C114 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32010) *
               C32314 +
           ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
            (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
               C32301 +
           C5333 * C32271) *
              C31970 * C31956 * C110 +
          (((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C114 +
            (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32010) *
               C32314 +
           ((C5298 - C5297 + C5300 - C5299 + C5302 - C5301) * C114 +
            (C5304 - C5303 + C5306 - C5305 + C5308 - C5307) * C32010) *
               C32301 +
           ((C5309 - C5310 + C5311 - C5312 + C5313 - C5314) * C114 +
            (C5315 - C5316 + C5317 - C5318 + C5319 - C5320) * C32010) *
               C32271) *
              C31970 * C31956 * C111 +
          (C5333 * C32314 +
           ((C5310 - C5309 + C5312 - C5311 + C5314 - C5313) * C114 +
            (C5316 - C5315 + C5318 - C5317 + C5320 - C5319) * C32010) *
               C32301 +
           ((C5275 * C130 - C5281 * C119 + C5276 * C262 - C5282 * C248 +
             C32282 * C272 - C5283 * C253) *
                C114 +
            (C5275 * C140 - C5281 * C131 + C5276 * C278 - C5282 * C263 +
             C32282 * C283 - C5283 * C273) *
                C32010) *
               C32271) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C114 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32010) *
               C32314 +
           ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
            (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
               C32301 +
           C5333 * C32271) *
              C31970 * C240 +
          (((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
             C5283 * C979 - C32282 * C985) *
                C114 +
            (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
             C5283 * C986 - C32282 * C997) *
                C32010) *
               C32314 +
           ((C5281 * C245 - C5275 * C256 + C5282 * C250 - C5276 * C266 +
             C5283 * C980 - C32282 * C987) *
                C114 +
            (C5281 * C257 - C5275 * C275 + C5282 * C267 - C5276 * C280 +
             C5283 * C988 - C32282 * C998) *
                C32010) *
               C32301 +
           ((C5281 * C246 - C5275 * C258 + C5282 * C251 - C5276 * C268 +
             C5283 * C981 - C32282 * C989) *
                C114 +
            (C5281 * C259 - C5275 * C276 + C5282 * C269 - C5276 * C281 +
             C5283 * C990 - C32282 * C999) *
                C32010) *
               C32271) *
              C31970 * C241 +
          (((C5275 * C264 - C5281 * C249 + C5276 * C985 - C5282 * C979 +
             C32282 * C991 - C5283 * C982) *
                C114 +
            (C5275 * C279 - C5281 * C265 + C5276 * C997 - C5282 * C986 +
             C32282 * C1000 - C5283 * C992) *
                C32010) *
               C32314 +
           ((C5275 * C266 - C5281 * C250 + C5276 * C987 - C5282 * C980 +
             C32282 * C993 - C5283 * C983) *
                C114 +
            (C5275 * C280 - C5281 * C267 + C5276 * C998 - C5282 * C988 +
             C32282 * C1001 - C5283 * C994) *
                C32010) *
               C32301 +
           ((C5275 * C268 - C5281 * C251 + C5276 * C989 - C5282 * C981 +
             C32282 * C995 - C5283 * C984) *
                C114 +
            (C5275 * C281 - C5281 * C269 + C5276 * C999 - C5282 * C990 +
             C32282 * C1002 - C5283 * C996) *
                C32010) *
               C32271) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C114 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32010) *
               C32314 +
           ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
            (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
               C32301 +
           C5333 * C32271) *
              C346 +
          (((C5281 * C349 - C5275 * C359 + C5282 * C681 - C5276 * C686 +
             C5283 * C1113 - C32282 * C1122) *
                C114 +
            (C5281 * C360 - C5275 * C379 + C5282 * C687 - C5276 * C696 +
             C5283 * C1123 - C32282 * C1140) *
                C32010) *
               C32314 +
           ((C5281 * C350 - C5275 * C361 + C5282 * C682 - C5276 * C688 +
             C5283 * C1114 - C32282 * C1124) *
                C114 +
            (C5281 * C362 - C5275 * C380 + C5282 * C689 - C5276 * C697 +
             C5283 * C1125 - C32282 * C1141) *
                C32010) *
               C32301 +
           ((C5281 * C351 - C5275 * C363 + C5282 * C683 - C5276 * C690 +
             C5283 * C1115 - C32282 * C1126) *
                C114 +
            (C5281 * C364 - C5275 * C381 + C5282 * C691 - C5276 * C698 +
             C5283 * C1127 - C32282 * C1142) *
                C32010) *
               C32271) *
              C347 +
          (((C5275 * C369 - C5281 * C354 + C5276 * C1128 - C5282 * C1116 +
             C32282 * C1129 - C5283 * C1117) *
                C114 +
            (C5275 * C384 - C5281 * C370 + C5276 * C1143 - C5282 * C1130 +
             C32282 * C1144 - C5283 * C1131) *
                C32010) *
               C32314 +
           ((C5275 * C371 - C5281 * C355 + C5276 * C1132 - C5282 * C1118 +
             C32282 * C1133 - C5283 * C1119) *
                C114 +
            (C5275 * C385 - C5281 * C372 + C5276 * C1145 - C5282 * C1134 +
             C32282 * C1146 - C5283 * C1135) *
                C32010) *
               C32301 +
           ((C5275 * C373 - C5281 * C356 + C5276 * C1136 - C5282 * C1120 +
             C32282 * C1137 - C5283 * C1121) *
                C114 +
            (C5275 * C386 - C5281 * C374 + C5276 * C1147 - C5282 * C1138 +
             C32282 * C1148 - C5283 * C1139) *
                C32010) *
               C32271) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
            C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
            C6105 * C991 - C6111 * C982) *
               C114 +
           (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
            C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
            C6105 * C1000 - C6111 * C992) *
               C32010) *
              C31911 * C31970 * C31956 * C110 +
          ((C6107 * C116 - C6101 * C124 + C6108 * C245 - C6102 * C256 +
            C6109 * C250 - C6103 * C266 + C6110 * C980 - C6104 * C987 +
            C6111 * C983 - C6105 * C993) *
               C114 +
           (C6107 * C125 - C6101 * C137 + C6108 * C257 - C6102 * C275 +
            C6109 * C267 - C6103 * C280 + C6110 * C988 - C6104 * C998 +
            C6111 * C994 - C6105 * C1001) *
               C32010) *
              C31911 * C31970 * C31956 * C111 +
          ((C6101 * C126 - C6107 * C117 + C6102 * C258 - C6108 * C246 +
            C6103 * C268 - C6109 * C251 + C6104 * C989 - C6110 * C981 +
            C6105 * C995 - C6111 * C984) *
               C114 +
           (C6101 * C138 - C6107 * C127 + C6102 * C276 - C6108 * C259 +
            C6103 * C281 - C6109 * C269 + C6104 * C999 - C6110 * C990 +
            C6105 * C1002 - C6111 * C996) *
               C32010) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
            C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
            C6105 * C991 - C6111 * C982) *
               C114 +
           (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
            C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
            C6105 * C1000 - C6111 * C992) *
               C32010) *
              C31911 * C31970 * C240 +
          ((C6107 * C244 - C6101 * C254 + C6108 * C249 - C6102 * C264 +
            C6109 * C979 - C6103 * C985 + C6110 * C982 - C6104 * C991 +
            C6111 * C6174 - C6105 * C6176) *
               C114 +
           (C6107 * C255 - C6101 * C274 + C6108 * C265 - C6102 * C279 +
            C6109 * C986 - C6103 * C997 + C6110 * C992 - C6104 * C1000 +
            C6111 * C6177 - C6105 * C6180) *
               C32010) *
              C31911 * C31970 * C241 +
          ((C6101 * C264 - C6107 * C249 + C6102 * C985 - C6108 * C979 +
            C6103 * C991 - C6109 * C982 + C6104 * C6176 - C6110 * C6174 +
            C6105 * C6178 - C6111 * C6175) *
               C114 +
           (C6101 * C279 - C6107 * C265 + C6102 * C997 - C6108 * C986 +
            C6103 * C1000 - C6109 * C992 + C6104 * C6180 - C6110 * C6177 +
            C6105 * C6181 - C6111 * C6179) *
               C32010) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
            C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
            C6105 * C991 - C6111 * C982) *
               C114 +
           (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
            C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
            C6105 * C1000 - C6111 * C992) *
               C32010) *
              C31911 * C346 +
          ((C6107 * C349 - C6101 * C359 + C6108 * C681 - C6102 * C686 +
            C6109 * C1113 - C6103 * C1122 + C6110 * C1643 - C6104 * C1646 +
            C6111 * C6244 - C6105 * C6247) *
               C114 +
           (C6107 * C360 - C6101 * C379 + C6108 * C687 - C6102 * C696 +
            C6109 * C1123 - C6103 * C1140 + C6110 * C1647 - C6104 * C1652 +
            C6111 * C6248 - C6105 * C6253) *
               C32010) *
              C31911 * C347 +
          ((C6101 * C369 - C6107 * C354 + C6102 * C1128 - C6108 * C1116 +
            C6103 * C1129 - C6109 * C1117 + C6104 * C6249 - C6110 * C6245 +
            C6105 * C6250 - C6111 * C6246) *
               C114 +
           (C6101 * C384 - C6107 * C370 + C6102 * C1143 - C6108 * C1130 +
            C6103 * C1144 - C6109 * C1131 + C6104 * C6254 - C6110 * C6251 +
            C6105 * C6255 - C6111 * C6252) *
               C32010) *
              C31911 * C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
            C32282 * C264 - C5283 * C249) *
               C1768 +
           (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
            C32282 * C279 - C5283 * C265) *
               C32318 +
           (C5275 * C359 - C5281 * C349 + C5276 * C686 - C5282 * C681 +
            C32282 * C1122 - C5283 * C1113) *
               C1769 +
           (C5275 * C379 - C5281 * C360 + C5276 * C696 - C5282 * C687 +
            C32282 * C1140 - C5283 * C1123) *
               C32307 +
           (C5275 * C369 - C5281 * C354 + C5276 * C1128 - C5282 * C1116 +
            C32282 * C1129 - C5283 * C1117) *
               C1770 +
           (C5275 * C384 - C5281 * C370 + C5276 * C1143 - C5282 * C1130 +
            C32282 * C1144 - C5283 * C1131) *
               C32285) *
              C31911 * C31970 * C31956 * C110 +
          ((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C1768 +
           (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32318 +
           (C5870 - C5871 + C5872 - C5873 + C5874 - C5875) * C1769 +
           (C5876 - C5877 + C5878 - C5879 + C5880 - C5881) * C32307 +
           (C5281 * C355 - C5275 * C371 + C5282 * C1118 - C5276 * C1132 +
            C5283 * C1119 - C32282 * C1133) *
               C1770 +
           (C5281 * C372 - C5275 * C385 + C5282 * C1134 - C5276 * C1145 +
            C5283 * C1135 - C32282 * C1146) *
               C32285) *
              C31911 * C31970 * C31956 * C111 +
          (C5329 * C1768 + C5330 * C32318 +
           (C5883 - C5882 + C5885 - C5884 + C5887 - C5886) * C1769 +
           (C5889 - C5888 + C5891 - C5890 + C5893 - C5892) * C32307 +
           (C5275 * C373 - C5281 * C356 + C5276 * C1136 - C5282 * C1120 +
            C32282 * C1137 - C5283 * C1121) *
               C1770 +
           (C5275 * C386 - C5281 * C374 + C5276 * C1147 - C5282 * C1138 +
            C32282 * C1148 - C5283 * C1139) *
               C32285) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
            C32282 * C264 - C5283 * C249) *
               C1768 +
           (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
            C32282 * C279 - C5283 * C265) *
               C32318 +
           (C5275 * C359 - C5281 * C349 + C5276 * C686 - C5282 * C681 +
            C32282 * C1122 - C5283 * C1113) *
               C1769 +
           (C5275 * C379 - C5281 * C360 + C5276 * C696 - C5282 * C687 +
            C32282 * C1140 - C5283 * C1123) *
               C32307 +
           (C5275 * C369 - C5281 * C354 + C5276 * C1128 - C5282 * C1116 +
            C32282 * C1129 - C5283 * C1117) *
               C1770 +
           (C5275 * C384 - C5281 * C370 + C5276 * C1143 - C5282 * C1130 +
            C32282 * C1144 - C5283 * C1131) *
               C32285) *
              C31911 * C31970 * C240 +
          ((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
            C5283 * C979 - C32282 * C985) *
               C1768 +
           (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
            C5283 * C986 - C32282 * C997) *
               C32318 +
           (C5281 * C681 - C5275 * C686 + C5282 * C1113 - C5276 * C1122 +
            C5283 * C1643 - C32282 * C1646) *
               C1769 +
           (C5281 * C687 - C5275 * C696 + C5282 * C1123 - C5276 * C1140 +
            C5283 * C1647 - C32282 * C1652) *
               C32307 +
           (C5281 * C1116 - C5275 * C1128 + C5282 * C1117 - C5276 * C1129 +
            C5283 * C6245 - C32282 * C6249) *
               C1770 +
           (C5281 * C1130 - C5275 * C1143 + C5282 * C1131 - C5276 * C1144 +
            C5283 * C6251 - C32282 * C6254) *
               C32285) *
              C31911 * C31970 * C241 +
          ((C5275 * C264 - C5281 * C249 + C5276 * C985 - C5282 * C979 +
            C32282 * C991 - C5283 * C982) *
               C1768 +
           (C5275 * C279 - C5281 * C265 + C5276 * C997 - C5282 * C986 +
            C32282 * C1000 - C5283 * C992) *
               C32318 +
           (C5275 * C1122 - C5281 * C1113 + C5276 * C1646 - C5282 * C1643 +
            C32282 * C6247 - C5283 * C6244) *
               C1769 +
           (C5275 * C1140 - C5281 * C1123 + C5276 * C1652 - C5282 * C1647 +
            C32282 * C6253 - C5283 * C6248) *
               C32307 +
           (C5275 * C1129 - C5281 * C1117 + C5276 * C6249 - C5282 * C6245 +
            C32282 * C6250 - C5283 * C6246) *
               C1770 +
           (C5275 * C1144 - C5281 * C1131 + C5276 * C6254 - C5282 * C6251 +
            C32282 * C6255 - C5283 * C6252) *
               C32285) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
            C32282 * C264 - C5283 * C249) *
               C1768 +
           (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
            C32282 * C279 - C5283 * C265) *
               C32318 +
           (C6857 - C6858 + C6859 - C6860 + C6861 - C6862) * C1769 +
           (C6863 - C6864 + C6865 - C6866 + C6867 - C6868) * C32307 +
           C6901 * C1770 + C6902 * C32285) *
              C31911 * C346 +
          ((C6858 - C6857 + C6860 - C6859 + C6862 - C6861) * C1768 +
           (C6864 - C6863 + C6866 - C6865 + C6868 - C6867) * C32318 +
           (C6870 - C6869 + C6872 - C6871 + C6874 - C6873) * C1769 +
           (C6876 - C6875 + C6878 - C6877 + C6880 - C6879) * C32307 +
           (C6881 - C6882 + C6883 - C6884 + C6885 - C6886) * C1770 +
           (C6887 - C6888 + C6889 - C6890 + C6891 - C6892) * C32285) *
              C31911 * C347 +
          (C6901 * C1768 + C6902 * C32318 +
           (C6882 - C6881 + C6884 - C6883 + C6886 - C6885) * C1769 +
           (C6888 - C6887 + C6890 - C6889 + C6892 - C6891) * C32307 +
           (C5275 * C2030 - C5281 * C2021 + C5276 * C6849 - C5282 * C6845 +
            C32282 * C6850 - C5283 * C6846) *
               C1770 +
           (C5275 * C2039 - C5281 * C2031 + C5276 * C6854 - C5282 * C6851 +
            C32282 * C6855 - C5283 * C6852) *
               C32285) *
              C31911 * C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
              C32282 * C264 - C819 * C249) *
                 C114 +
             (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
              C32282 * C279 - C819 * C265) *
                 C32010) *
                C814 +
            ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
             (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
                C815 +
            C869 * C32271) *
               C577 +
           (((C817 * C349 - C32317 * C359 + C818 * C681 - C32305 * C686 +
              C819 * C1113 - C32282 * C1122) *
                 C114 +
             (C817 * C360 - C32317 * C379 + C818 * C687 - C32305 * C696 +
              C819 * C1123 - C32282 * C1140) *
                 C32010) *
                C814 +
            ((C1474 - C1475 + C1476 - C1477 + C1478 - C1479) * C114 +
             (C1480 - C1481 + C1482 - C1483 + C1484 - C1485) * C32010) *
                C815 +
            ((C1486 - C1487 + C1488 - C1489 + C1490 - C1491) * C114 +
             (C1492 - C1493 + C1494 - C1495 + C1496 - C1497) * C32010) *
                C32271) *
               C578) *
              C31956 * C473 +
          ((((C822 - C821 + C824 - C823 + C826 - C825) * C114 +
             (C828 - C827 + C830 - C829 + C832 - C831) * C32010) *
                C814 +
            ((C834 - C833 + C836 - C835 + C838 - C837) * C114 +
             (C840 - C839 + C842 - C841 + C844 - C843) * C32010) *
                C815 +
            ((C845 - C846 + C847 - C848 + C849 - C850) * C114 +
             (C851 - C852 + C853 - C854 + C855 - C856) * C32010) *
                C32271) *
               C577 +
           (((C1475 - C1474 + C1477 - C1476 + C1479 - C1478) * C114 +
             (C1481 - C1480 + C1483 - C1482 + C1485 - C1484) * C32010) *
                C814 +
            ((C1487 - C1486 + C1489 - C1488 + C1491 - C1490) * C114 +
             (C1493 - C1492 + C1495 - C1494 + C1497 - C1496) * C32010) *
                C815 +
            ((C32317 * C365 - C817 * C352 + C32305 * C692 - C818 * C684 +
              C32282 * C1470 - C819 * C1469) *
                 C114 +
             (C32317 * C382 - C817 * C366 + C32305 * C699 - C818 * C693 +
              C32282 * C1472 - C819 * C1471) *
                 C32010) *
                C32271) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C114 +
             (C31993 * C136 - C113 * C123) * C32010) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C577 +
           (((C113 * C349 - C31993 * C359) * C114 +
             (C113 * C360 - C31993 * C379) * C32010) *
                C103 +
            ((C584 - C585) * C114 + (C586 - C587) * C32010) * C104 +
            ((C588 - C589) * C114 + (C590 - C591) * C32010) * C105 +
            ((C592 - C593) * C114 + (C594 - C595) * C32010) * C106 +
            ((C596 - C597) * C114 + (C598 - C599) * C32010) * C107) *
               C578) *
              C31956 * C473 +
          ((((C145 - C144) * C114 + (C147 - C146) * C32010) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C32010) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C32010) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C32010) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C32010) * C107) *
               C577 +
           (((C585 - C584) * C114 + (C587 - C586) * C32010) * C103 +
            ((C589 - C588) * C114 + (C591 - C590) * C32010) * C104 +
            ((C593 - C592) * C114 + (C595 - C594) * C32010) * C105 +
            ((C597 - C596) * C114 + (C599 - C598) * C32010) * C106 +
            ((C31993 * C580 - C113 * C579) * C114 +
             (C31993 * C582 - C113 * C581) * C32010) *
                C107) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C1768 +
             (C31993 * C136 - C113 * C123) * C32318 + (C2043 - C2044) * C1769 +
             (C2045 - C2046) * C32307 + C2065 * C1770 + C2066 * C32285) *
                C814 +
            ((C144 - C145) * C1768 + (C146 - C147) * C32318 + C2383 * C1769 +
             C2384 * C32307 + C2051 * C1770 + C2052 * C32285) *
                C815 +
            C1798 * C32271) *
               C577 +
           (((C2044 - C2043) * C1768 + (C2046 - C2045) * C32318 +
             (C2048 - C2047) * C1769 + (C2050 - C2049) * C32307 +
             (C2053 - C2054) * C1770 + (C2055 - C2056) * C32285) *
                C814 +
            (C2385 * C1768 + C2386 * C32318 + C2387 * C1769 + C2388 * C32307 +
             (C2057 - C2058) * C1770 + (C2059 - C2060) * C32285) *
                C815 +
            (C2389 * C1768 + C2390 * C32318 + C2391 * C1769 + C2392 * C32307 +
             (C2061 - C2062) * C1770 + (C2063 - C2064) * C32285) *
                C32271) *
               C578) *
              C31956 * C473 +
          ((((C145 - C144) * C1768 + (C147 - C146) * C32318 + C2385 * C1769 +
             C2386 * C32307 + C2387 * C1770 + C2388 * C32285) *
                C814 +
            ((C149 - C148) * C1768 + (C151 - C150) * C32318 + C2389 * C1769 +
             C2390 * C32307 + C2391 * C1770 + C2392 * C32285) *
                C815 +
            ((C153 - C152) * C1768 + (C155 - C154) * C32318 +
             (C592 - C593) * C1769 + (C594 - C595) * C32307 +
             (C1784 - C1785) * C1770 + (C1786 - C1787) * C32285) *
                C32271) *
               C577 +
           ((C2383 * C1768 + C2384 * C32318 + C2051 * C1769 + C2052 * C32307 +
             (C2058 - C2057) * C1770 + (C2060 - C2059) * C32285) *
                C814 +
            (C1778 * C1768 + C1779 * C32318 + C1791 * C1769 + C1792 * C32307 +
             (C2062 - C2061) * C1770 + (C2064 - C2063) * C32285) *
                C815 +
            ((C593 - C592) * C1768 + (C595 - C594) * C32318 +
             (C1785 - C1784) * C1769 + (C1787 - C1786) * C32307 +
             (C31993 * C2379 - C113 * C2378) * C1770 +
             (C31993 * C2381 - C113 * C2380) * C32285) *
                C32271) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
              C32282 * C264 - C5283 * C249) *
                 C114 +
             (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
              C32282 * C279 - C5283 * C265) *
                 C32010) *
                C32314 +
            ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
             (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
                C32301 +
            C5333 * C32271) *
               C577 +
           (((C5281 * C349 - C5275 * C359 + C5282 * C681 - C5276 * C686 +
              C5283 * C1113 - C32282 * C1122) *
                 C114 +
             (C5281 * C360 - C5275 * C379 + C5282 * C687 - C5276 * C696 +
              C5283 * C1123 - C32282 * C1140) *
                 C32010) *
                C32314 +
            ((C5870 - C5871 + C5872 - C5873 + C5874 - C5875) * C114 +
             (C5876 - C5877 + C5878 - C5879 + C5880 - C5881) * C32010) *
                C32301 +
            ((C5882 - C5883 + C5884 - C5885 + C5886 - C5887) * C114 +
             (C5888 - C5889 + C5890 - C5891 + C5892 - C5893) * C32010) *
                C32271) *
               C578) *
              C31956 * C473 +
          ((((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C114 +
             (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32010) *
                C32314 +
            ((C5298 - C5297 + C5300 - C5299 + C5302 - C5301) * C114 +
             (C5304 - C5303 + C5306 - C5305 + C5308 - C5307) * C32010) *
                C32301 +
            ((C5309 - C5310 + C5311 - C5312 + C5313 - C5314) * C114 +
             (C5315 - C5316 + C5317 - C5318 + C5319 - C5320) * C32010) *
                C32271) *
               C577 +
           (((C5871 - C5870 + C5873 - C5872 + C5875 - C5874) * C114 +
             (C5877 - C5876 + C5879 - C5878 + C5881 - C5880) * C32010) *
                C32314 +
            ((C5883 - C5882 + C5885 - C5884 + C5887 - C5886) * C114 +
             (C5889 - C5888 + C5891 - C5890 + C5893 - C5892) * C32010) *
                C32301 +
            ((C5275 * C365 - C5281 * C352 + C5276 * C692 - C5282 * C684 +
              C32282 * C1470 - C5283 * C1469) *
                 C114 +
             (C5275 * C382 - C5281 * C366 + C5276 * C699 - C5282 * C693 +
              C32282 * C1472 - C5283 * C1471) *
                 C32010) *
                C32271) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
             C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
             C6105 * C991 - C6111 * C982) *
                C114 +
            (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
             C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
             C6105 * C1000 - C6111 * C992) *
                C32010) *
               C31911 * C577 +
           ((C6107 * C349 - C6101 * C359 + C6108 * C681 - C6102 * C686 +
             C6109 * C1113 - C6103 * C1122 + C6110 * C1643 - C6104 * C1646 +
             C6111 * C6244 - C6105 * C6247) *
                C114 +
            (C6107 * C360 - C6101 * C379 + C6108 * C687 - C6102 * C696 +
             C6109 * C1123 - C6103 * C1140 + C6110 * C1647 - C6104 * C1652 +
             C6111 * C6248 - C6105 * C6253) *
                C32010) *
               C31911 * C578) *
              C31956 * C473 +
          (((C6107 * C116 - C6101 * C124 + C6108 * C245 - C6102 * C256 +
             C6109 * C250 - C6103 * C266 + C6110 * C980 - C6104 * C987 +
             C6111 * C983 - C6105 * C993) *
                C114 +
            (C6107 * C125 - C6101 * C137 + C6108 * C257 - C6102 * C275 +
             C6109 * C267 - C6103 * C280 + C6110 * C988 - C6104 * C998 +
             C6111 * C994 - C6105 * C1001) *
                C32010) *
               C31911 * C577 +
           ((C6101 * C361 - C6107 * C350 + C6102 * C688 - C6108 * C682 +
             C6103 * C1124 - C6109 * C1114 + C6104 * C1648 - C6110 * C1644 +
             C6105 * C6425 - C6111 * C6424) *
                C114 +
            (C6101 * C380 - C6107 * C362 + C6102 * C697 - C6108 * C689 +
             C6103 * C1141 - C6109 * C1125 + C6104 * C1653 - C6110 * C1649 +
             C6105 * C6427 - C6111 * C6426) *
                C32010) *
               C31911 * C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C1768 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32318 +
            (C6857 - C6858 + C6859 - C6860 + C6861 - C6862) * C1769 +
            (C6863 - C6864 + C6865 - C6866 + C6867 - C6868) * C32307 +
            C6901 * C1770 + C6902 * C32285) *
               C31911 * C577 +
           ((C6858 - C6857 + C6860 - C6859 + C6862 - C6861) * C1768 +
            (C6864 - C6863 + C6866 - C6865 + C6868 - C6867) * C32318 +
            (C6870 - C6869 + C6872 - C6871 + C6874 - C6873) * C1769 +
            (C6876 - C6875 + C6878 - C6877 + C6880 - C6879) * C32307 +
            (C6881 - C6882 + C6883 - C6884 + C6885 - C6886) * C1770 +
            (C6887 - C6888 + C6889 - C6890 + C6891 - C6892) * C32285) *
               C31911 * C578) *
              C31956 * C473 +
          (((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C1768 +
            (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32318 +
            (C5870 - C5871 + C5872 - C5873 + C5874 - C5875) * C1769 +
            (C5876 - C5877 + C5878 - C5879 + C5880 - C5881) * C32307 +
            (C7203 - C7204 + C7205 - C7206 + C7207 - C7208) * C1770 +
            (C7209 - C7210 + C7211 - C7212 + C7213 - C7214) * C32285) *
               C31911 * C577 +
           ((C5871 - C5870 + C5873 - C5872 + C5875 - C5874) * C1768 +
            (C5877 - C5876 + C5879 - C5878 + C5881 - C5880) * C32318 +
            (C7204 - C7203 + C7206 - C7205 + C7208 - C7207) * C1769 +
            (C7210 - C7209 + C7212 - C7211 + C7214 - C7213) * C32307 +
            (C5275 * C2026 - C5281 * C2019 + C5276 * C2543 - C5282 * C2539 +
             C32282 * C7199 - C5283 * C7198) *
                C1770 +
            (C5275 * C2037 - C5281 * C2027 + C5276 * C2548 - C5282 * C2544 +
             C32282 * C7201 - C5283 * C7200) *
                C32285) *
               C31911 * C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C114 +
            (C31993 * C136 - C113 * C123) * C32010) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C31970 * C240 +
          (((C113 * C244 - C31993 * C254) * C114 +
            (C113 * C255 - C31993 * C274) * C32010) *
               C103 +
           ((C113 * C245 - C31993 * C256) * C114 +
            (C113 * C257 - C31993 * C275) * C32010) *
               C104 +
           ((C113 * C246 - C31993 * C258) * C114 +
            (C113 * C259 - C31993 * C276) * C32010) *
               C105 +
           ((C113 * C247 - C31993 * C260) * C114 +
            (C113 * C261 - C31993 * C277) * C32010) *
               C106 +
           ((C113 * C248 - C31993 * C262) * C114 +
            (C113 * C263 - C31993 * C278) * C32010) *
               C107) *
              C31970 * C241 +
          (((C31993 * C264 - C113 * C249) * C114 +
            (C31993 * C279 - C113 * C265) * C32010) *
               C103 +
           ((C31993 * C266 - C113 * C250) * C114 +
            (C31993 * C280 - C113 * C267) * C32010) *
               C104 +
           ((C31993 * C268 - C113 * C251) * C114 +
            (C31993 * C281 - C113 * C269) * C32010) *
               C105 +
           ((C31993 * C270 - C113 * C252) * C114 +
            (C31993 * C282 - C113 * C271) * C32010) *
               C106 +
           ((C31993 * C272 - C113 * C253) * C114 +
            (C31993 * C283 - C113 * C273) * C32010) *
               C107) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C114 +
            (C31993 * C136 - C113 * C123) * C32010) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C31970 * C31956 * C110 +
          (((C145 - C144) * C114 + (C147 - C146) * C32010) * C103 +
           ((C149 - C148) * C114 + (C151 - C150) * C32010) * C104 +
           ((C153 - C152) * C114 + (C155 - C154) * C32010) * C105 +
           ((C157 - C156) * C114 + (C159 - C158) * C32010) * C106 +
           ((C160 - C161) * C114 + (C162 - C163) * C32010) * C107) *
              C31970 * C31956 * C111 +
          (C176 * C103 + C177 * C104 + C178 * C105 +
           ((C161 - C160) * C114 + (C163 - C162) * C32010) * C106 +
           ((C31993 * C134 - C113 * C121) * C114 +
            (C31993 * C142 - C113 * C135) * C32010) *
               C107) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C114 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C32010) *
               C814 +
           ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
            (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
               C815 +
           C869 * C32271) *
              C31970 * C31956 * C110 +
          (((C822 - C821 + C824 - C823 + C826 - C825) * C114 +
            (C828 - C827 + C830 - C829 + C832 - C831) * C32010) *
               C814 +
           ((C834 - C833 + C836 - C835 + C838 - C837) * C114 +
            (C840 - C839 + C842 - C841 + C844 - C843) * C32010) *
               C815 +
           ((C845 - C846 + C847 - C848 + C849 - C850) * C114 +
            (C851 - C852 + C853 - C854 + C855 - C856) * C32010) *
               C32271) *
              C31970 * C31956 * C111 +
          (C869 * C814 +
           ((C846 - C845 + C848 - C847 + C850 - C849) * C114 +
            (C852 - C851 + C854 - C853 + C856 - C855) * C32010) *
               C815 +
           ((C32317 * C130 - C817 * C119 + C32305 * C262 - C818 * C248 +
             C32282 * C272 - C819 * C253) *
                C114 +
            (C32317 * C140 - C817 * C131 + C32305 * C278 - C818 * C263 +
             C32282 * C283 - C819 * C273) *
                C32010) *
               C32271) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C114 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C32010) *
               C814 +
           ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
            (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
               C815 +
           C869 * C32271) *
              C31970 * C240 +
          (((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
             C819 * C979 - C32282 * C985) *
                C114 +
            (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
             C819 * C986 - C32282 * C997) *
                C32010) *
               C814 +
           ((C817 * C245 - C32317 * C256 + C818 * C250 - C32305 * C266 +
             C819 * C980 - C32282 * C987) *
                C114 +
            (C817 * C257 - C32317 * C275 + C818 * C267 - C32305 * C280 +
             C819 * C988 - C32282 * C998) *
                C32010) *
               C815 +
           ((C817 * C246 - C32317 * C258 + C818 * C251 - C32305 * C268 +
             C819 * C981 - C32282 * C989) *
                C114 +
            (C817 * C259 - C32317 * C276 + C818 * C269 - C32305 * C281 +
             C819 * C990 - C32282 * C999) *
                C32010) *
               C32271) *
              C31970 * C241 +
          (((C32317 * C264 - C817 * C249 + C32305 * C985 - C818 * C979 +
             C32282 * C991 - C819 * C982) *
                C114 +
            (C32317 * C279 - C817 * C265 + C32305 * C997 - C818 * C986 +
             C32282 * C1000 - C819 * C992) *
                C32010) *
               C814 +
           ((C32317 * C266 - C817 * C250 + C32305 * C987 - C818 * C980 +
             C32282 * C993 - C819 * C983) *
                C114 +
            (C32317 * C280 - C817 * C267 + C32305 * C998 - C818 * C988 +
             C32282 * C1001 - C819 * C994) *
                C32010) *
               C815 +
           ((C32317 * C268 - C817 * C251 + C32305 * C989 - C818 * C981 +
             C32282 * C995 - C819 * C984) *
                C114 +
            (C32317 * C281 - C817 * C269 + C32305 * C999 - C818 * C990 +
             C32282 * C1002 - C819 * C996) *
                C32010) *
               C32271) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C1768 +
            (C31993 * C136 - C113 * C123) * C32318 +
            (C31993 * C359 - C113 * C349) * C1769 +
            (C31993 * C379 - C113 * C360) * C32307 +
            (C31993 * C369 - C113 * C354) * C1770 +
            (C31993 * C384 - C113 * C370) * C32285) *
               C814 +
           ((C144 - C145) * C1768 + (C146 - C147) * C32318 +
            (C585 - C584) * C1769 + (C587 - C586) * C32307 +
            (C1772 - C1773) * C1770 + (C1774 - C1775) * C32285) *
               C815 +
           C1798 * C32271) *
              C31970 * C31956 * C110 +
          (((C145 - C144) * C1768 + (C147 - C146) * C32318 +
            (C584 - C585) * C1769 + (C586 - C587) * C32307 +
            (C1773 - C1772) * C1770 + (C1775 - C1774) * C32285) *
               C814 +
           ((C149 - C148) * C1768 + (C151 - C150) * C32318 +
            (C588 - C589) * C1769 + (C590 - C591) * C32307 +
            (C1781 - C1780) * C1770 + (C1783 - C1782) * C32285) *
               C815 +
           ((C153 - C152) * C1768 + (C155 - C154) * C32318 +
            (C592 - C593) * C1769 + (C594 - C595) * C32307 +
            (C1784 - C1785) * C1770 + (C1786 - C1787) * C32285) *
               C32271) *
              C31970 * C31956 * C111 +
          (C1798 * C814 +
           (C166 * C1768 + C167 * C32318 + (C593 - C592) * C1769 +
            (C595 - C594) * C32307 + (C1785 - C1784) * C1770 +
            (C1787 - C1786) * C32285) *
               C815 +
           (C168 * C1768 + C169 * C32318 + (C597 - C596) * C1769 +
            (C599 - C598) * C32307 + (C31993 * C377 - C113 * C358) * C1770 +
            (C31993 * C388 - C113 * C378) * C32285) *
               C32271) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C1768 +
            (C31993 * C136 - C113 * C123) * C32318 +
            (C31993 * C359 - C113 * C349) * C1769 +
            (C31993 * C379 - C113 * C360) * C32307 +
            (C31993 * C369 - C113 * C354) * C1770 +
            (C31993 * C384 - C113 * C370) * C32285) *
               C814 +
           ((C144 - C145) * C1768 + (C146 - C147) * C32318 +
            (C585 - C584) * C1769 + (C587 - C586) * C32307 +
            (C1772 - C1773) * C1770 + (C1774 - C1775) * C32285) *
               C815 +
           C1798 * C32271) *
              C31970 * C240 +
          (((C113 * C244 - C31993 * C254) * C1768 +
            (C113 * C255 - C31993 * C274) * C32318 +
            (C113 * C681 - C31993 * C686) * C1769 +
            (C113 * C687 - C31993 * C696) * C32307 +
            (C113 * C1116 - C31993 * C1128) * C1770 +
            (C113 * C1130 - C31993 * C1143) * C32285) *
               C814 +
           ((C480 - C481) * C1768 + (C482 - C483) * C32318 +
            (C113 * C682 - C31993 * C688) * C1769 +
            (C113 * C689 - C31993 * C697) * C32307 +
            (C113 * C1118 - C31993 * C1132) * C1770 +
            (C113 * C1134 - C31993 * C1145) * C32285) *
               C815 +
           ((C484 - C485) * C1768 + (C486 - C487) * C32318 +
            (C113 * C683 - C31993 * C690) * C1769 +
            (C113 * C691 - C31993 * C698) * C32307 +
            (C113 * C1120 - C31993 * C1136) * C1770 +
            (C113 * C1138 - C31993 * C1147) * C32285) *
               C32271) *
              C31970 * C241 +
          (((C31993 * C264 - C113 * C249) * C1768 +
            (C31993 * C279 - C113 * C265) * C32318 +
            (C31993 * C1122 - C113 * C1113) * C1769 +
            (C31993 * C1140 - C113 * C1123) * C32307 +
            (C31993 * C1129 - C113 * C1117) * C1770 +
            (C31993 * C1144 - C113 * C1131) * C32285) *
               C814 +
           ((C31993 * C266 - C113 * C250) * C1768 +
            (C31993 * C280 - C113 * C267) * C32318 +
            (C31993 * C1124 - C113 * C1114) * C1769 +
            (C31993 * C1141 - C113 * C1125) * C32307 +
            (C31993 * C1133 - C113 * C1119) * C1770 +
            (C31993 * C1146 - C113 * C1135) * C32285) *
               C815 +
           ((C31993 * C268 - C113 * C251) * C1768 +
            (C31993 * C281 - C113 * C269) * C32318 +
            (C31993 * C1126 - C113 * C1115) * C1769 +
            (C31993 * C1142 - C113 * C1127) * C32307 +
            (C31993 * C1137 - C113 * C1121) * C1770 +
            (C31993 * C1148 - C113 * C1139) * C32285) *
               C32271) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C114 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32010) *
               C32314 +
           ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
            (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
               C32301 +
           C5333 * C32271) *
              C31970 * C31956 * C110 +
          (((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C114 +
            (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32010) *
               C32314 +
           ((C5298 - C5297 + C5300 - C5299 + C5302 - C5301) * C114 +
            (C5304 - C5303 + C5306 - C5305 + C5308 - C5307) * C32010) *
               C32301 +
           ((C5309 - C5310 + C5311 - C5312 + C5313 - C5314) * C114 +
            (C5315 - C5316 + C5317 - C5318 + C5319 - C5320) * C32010) *
               C32271) *
              C31970 * C31956 * C111 +
          (C5333 * C32314 +
           ((C5310 - C5309 + C5312 - C5311 + C5314 - C5313) * C114 +
            (C5316 - C5315 + C5318 - C5317 + C5320 - C5319) * C32010) *
               C32301 +
           ((C5275 * C130 - C5281 * C119 + C5276 * C262 - C5282 * C248 +
             C32282 * C272 - C5283 * C253) *
                C114 +
            (C5275 * C140 - C5281 * C131 + C5276 * C278 - C5282 * C263 +
             C32282 * C283 - C5283 * C273) *
                C32010) *
               C32271) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C114 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32010) *
               C32314 +
           ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
            (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
               C32301 +
           C5333 * C32271) *
              C31970 * C240 +
          (((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
             C5283 * C979 - C32282 * C985) *
                C114 +
            (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
             C5283 * C986 - C32282 * C997) *
                C32010) *
               C32314 +
           ((C5281 * C245 - C5275 * C256 + C5282 * C250 - C5276 * C266 +
             C5283 * C980 - C32282 * C987) *
                C114 +
            (C5281 * C257 - C5275 * C275 + C5282 * C267 - C5276 * C280 +
             C5283 * C988 - C32282 * C998) *
                C32010) *
               C32301 +
           ((C5281 * C246 - C5275 * C258 + C5282 * C251 - C5276 * C268 +
             C5283 * C981 - C32282 * C989) *
                C114 +
            (C5281 * C259 - C5275 * C276 + C5282 * C269 - C5276 * C281 +
             C5283 * C990 - C32282 * C999) *
                C32010) *
               C32271) *
              C31970 * C241 +
          (((C5275 * C264 - C5281 * C249 + C5276 * C985 - C5282 * C979 +
             C32282 * C991 - C5283 * C982) *
                C114 +
            (C5275 * C279 - C5281 * C265 + C5276 * C997 - C5282 * C986 +
             C32282 * C1000 - C5283 * C992) *
                C32010) *
               C32314 +
           ((C5275 * C266 - C5281 * C250 + C5276 * C987 - C5282 * C980 +
             C32282 * C993 - C5283 * C983) *
                C114 +
            (C5275 * C280 - C5281 * C267 + C5276 * C998 - C5282 * C988 +
             C32282 * C1001 - C5283 * C994) *
                C32010) *
               C32301 +
           ((C5275 * C268 - C5281 * C251 + C5276 * C989 - C5282 * C981 +
             C32282 * C995 - C5283 * C984) *
                C114 +
            (C5275 * C281 - C5281 * C269 + C5276 * C999 - C5282 * C990 +
             C32282 * C1002 - C5283 * C996) *
                C32010) *
               C32271) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
            C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
            C6105 * C991 - C6111 * C982) *
               C114 +
           (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
            C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
            C6105 * C1000 - C6111 * C992) *
               C32010) *
              C31911 * C31970 * C31956 * C110 +
          ((C6107 * C116 - C6101 * C124 + C6108 * C245 - C6102 * C256 +
            C6109 * C250 - C6103 * C266 + C6110 * C980 - C6104 * C987 +
            C6111 * C983 - C6105 * C993) *
               C114 +
           (C6107 * C125 - C6101 * C137 + C6108 * C257 - C6102 * C275 +
            C6109 * C267 - C6103 * C280 + C6110 * C988 - C6104 * C998 +
            C6111 * C994 - C6105 * C1001) *
               C32010) *
              C31911 * C31970 * C31956 * C111 +
          ((C6101 * C126 - C6107 * C117 + C6102 * C258 - C6108 * C246 +
            C6103 * C268 - C6109 * C251 + C6104 * C989 - C6110 * C981 +
            C6105 * C995 - C6111 * C984) *
               C114 +
           (C6101 * C138 - C6107 * C127 + C6102 * C276 - C6108 * C259 +
            C6103 * C281 - C6109 * C269 + C6104 * C999 - C6110 * C990 +
            C6105 * C1002 - C6111 * C996) *
               C32010) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
            C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
            C6105 * C991 - C6111 * C982) *
               C114 +
           (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
            C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
            C6105 * C1000 - C6111 * C992) *
               C32010) *
              C31911 * C31970 * C240 +
          ((C6107 * C244 - C6101 * C254 + C6108 * C249 - C6102 * C264 +
            C6109 * C979 - C6103 * C985 + C6110 * C982 - C6104 * C991 +
            C6111 * C6174 - C6105 * C6176) *
               C114 +
           (C6107 * C255 - C6101 * C274 + C6108 * C265 - C6102 * C279 +
            C6109 * C986 - C6103 * C997 + C6110 * C992 - C6104 * C1000 +
            C6111 * C6177 - C6105 * C6180) *
               C32010) *
              C31911 * C31970 * C241 +
          ((C6101 * C264 - C6107 * C249 + C6102 * C985 - C6108 * C979 +
            C6103 * C991 - C6109 * C982 + C6104 * C6176 - C6110 * C6174 +
            C6105 * C6178 - C6111 * C6175) *
               C114 +
           (C6101 * C279 - C6107 * C265 + C6102 * C997 - C6108 * C986 +
            C6103 * C1000 - C6109 * C992 + C6104 * C6180 - C6110 * C6177 +
            C6105 * C6181 - C6111 * C6179) *
               C32010) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
            C32282 * C264 - C5283 * C249) *
               C1768 +
           (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
            C32282 * C279 - C5283 * C265) *
               C32318 +
           (C5275 * C359 - C5281 * C349 + C5276 * C686 - C5282 * C681 +
            C32282 * C1122 - C5283 * C1113) *
               C1769 +
           (C5275 * C379 - C5281 * C360 + C5276 * C696 - C5282 * C687 +
            C32282 * C1140 - C5283 * C1123) *
               C32307 +
           (C5275 * C369 - C5281 * C354 + C5276 * C1128 - C5282 * C1116 +
            C32282 * C1129 - C5283 * C1117) *
               C1770 +
           (C5275 * C384 - C5281 * C370 + C5276 * C1143 - C5282 * C1130 +
            C32282 * C1144 - C5283 * C1131) *
               C32285) *
              C31911 * C31970 * C31956 * C110 +
          ((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C1768 +
           (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32318 +
           (C5870 - C5871 + C5872 - C5873 + C5874 - C5875) * C1769 +
           (C5876 - C5877 + C5878 - C5879 + C5880 - C5881) * C32307 +
           (C5281 * C355 - C5275 * C371 + C5282 * C1118 - C5276 * C1132 +
            C5283 * C1119 - C32282 * C1133) *
               C1770 +
           (C5281 * C372 - C5275 * C385 + C5282 * C1134 - C5276 * C1145 +
            C5283 * C1135 - C32282 * C1146) *
               C32285) *
              C31911 * C31970 * C31956 * C111 +
          (C5329 * C1768 + C5330 * C32318 +
           (C5883 - C5882 + C5885 - C5884 + C5887 - C5886) * C1769 +
           (C5889 - C5888 + C5891 - C5890 + C5893 - C5892) * C32307 +
           (C5275 * C373 - C5281 * C356 + C5276 * C1136 - C5282 * C1120 +
            C32282 * C1137 - C5283 * C1121) *
               C1770 +
           (C5275 * C386 - C5281 * C374 + C5276 * C1147 - C5282 * C1138 +
            C32282 * C1148 - C5283 * C1139) *
               C32285) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
            C32282 * C264 - C5283 * C249) *
               C1768 +
           (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
            C32282 * C279 - C5283 * C265) *
               C32318 +
           (C5275 * C359 - C5281 * C349 + C5276 * C686 - C5282 * C681 +
            C32282 * C1122 - C5283 * C1113) *
               C1769 +
           (C5275 * C379 - C5281 * C360 + C5276 * C696 - C5282 * C687 +
            C32282 * C1140 - C5283 * C1123) *
               C32307 +
           (C5275 * C369 - C5281 * C354 + C5276 * C1128 - C5282 * C1116 +
            C32282 * C1129 - C5283 * C1117) *
               C1770 +
           (C5275 * C384 - C5281 * C370 + C5276 * C1143 - C5282 * C1130 +
            C32282 * C1144 - C5283 * C1131) *
               C32285) *
              C31911 * C31970 * C240 +
          ((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
            C5283 * C979 - C32282 * C985) *
               C1768 +
           (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
            C5283 * C986 - C32282 * C997) *
               C32318 +
           (C5281 * C681 - C5275 * C686 + C5282 * C1113 - C5276 * C1122 +
            C5283 * C1643 - C32282 * C1646) *
               C1769 +
           (C5281 * C687 - C5275 * C696 + C5282 * C1123 - C5276 * C1140 +
            C5283 * C1647 - C32282 * C1652) *
               C32307 +
           (C5281 * C1116 - C5275 * C1128 + C5282 * C1117 - C5276 * C1129 +
            C5283 * C6245 - C32282 * C6249) *
               C1770 +
           (C5281 * C1130 - C5275 * C1143 + C5282 * C1131 - C5276 * C1144 +
            C5283 * C6251 - C32282 * C6254) *
               C32285) *
              C31911 * C31970 * C241 +
          ((C5275 * C264 - C5281 * C249 + C5276 * C985 - C5282 * C979 +
            C32282 * C991 - C5283 * C982) *
               C1768 +
           (C5275 * C279 - C5281 * C265 + C5276 * C997 - C5282 * C986 +
            C32282 * C1000 - C5283 * C992) *
               C32318 +
           (C5275 * C1122 - C5281 * C1113 + C5276 * C1646 - C5282 * C1643 +
            C32282 * C6247 - C5283 * C6244) *
               C1769 +
           (C5275 * C1140 - C5281 * C1123 + C5276 * C1652 - C5282 * C1647 +
            C32282 * C6253 - C5283 * C6248) *
               C32307 +
           (C5275 * C1129 - C5281 * C1117 + C5276 * C6249 - C5282 * C6245 +
            C32282 * C6250 - C5283 * C6246) *
               C1770 +
           (C5275 * C1144 - C5281 * C1131 + C5276 * C6254 - C5282 * C6251 +
            C32282 * C6255 - C5283 * C6252) *
               C32285) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C3448 +
             (C31993 * C136 - C113 * C123) * C32252 + (C2043 - C2044) * C3449 +
             (C2045 - C2046) * C32097) *
                C2658 +
            ((C144 - C145) * C3448 + (C146 - C147) * C32252 + C2383 * C3449 +
             C2384 * C32097) *
                C2659 +
            C3465 * C2660 + C3466 * C32286) *
               C31970 * C471 +
           (((C113 * C244 - C31993 * C254) * C3448 +
             (C113 * C255 - C31993 * C274) * C32252 + (C2551 - C2552) * C3449 +
             (C2553 - C2554) * C32097) *
                C2658 +
            ((C480 - C481) * C3448 + (C482 - C483) * C32252 +
             (C2217 - C2218) * C3449 + (C2219 - C2220) * C32097) *
                C2659 +
            ((C484 - C485) * C3448 + (C486 - C487) * C32252 +
             (C2225 - C2226) * C3449 + (C2227 - C2228) * C32097) *
                C2660 +
            ((C488 - C489) * C3448 + (C490 - C491) * C32252 +
             (C3793 - C3794) * C3449 + (C3795 - C3796) * C32097) *
                C32286) *
               C31970 * C472) *
              C473 +
          ((((C145 - C144) * C3448 + (C147 - C146) * C32252 + C2385 * C3449 +
             C2386 * C32097) *
                C2658 +
            ((C149 - C148) * C3448 + (C151 - C150) * C32252 + C2389 * C3449 +
             C2390 * C32097) *
                C2659 +
            ((C153 - C152) * C3448 + (C155 - C154) * C32252 +
             (C592 - C593) * C3449 + (C594 - C595) * C32097) *
                C2660 +
            ((C157 - C156) * C3448 + (C159 - C158) * C32252 +
             (C596 - C597) * C3449 + (C598 - C599) * C32097) *
                C32286) *
               C31970 * C471 +
           (((C481 - C480) * C3448 + (C483 - C482) * C32252 +
             (C2218 - C2217) * C3449 + (C2220 - C2219) * C32097) *
                C2658 +
            ((C485 - C484) * C3448 + (C487 - C486) * C32252 +
             (C2226 - C2225) * C3449 + (C2228 - C2227) * C32097) *
                C2659 +
            ((C489 - C488) * C3448 + (C491 - C490) * C32252 +
             (C3794 - C3793) * C3449 + (C3796 - C3795) * C32097) *
                C2660 +
            ((C493 - C492) * C3448 + (C495 - C494) * C32252 +
             (C31993 * C694 - C113 * C685) * C3449 +
             (C31993 * C700 - C113 * C695) * C32097) *
                C32286) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
              C32282 * C264 - C5283 * C249) *
                 C3448 +
             (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
              C32282 * C279 - C5283 * C265) *
                 C32252 +
             (C6857 - C6858 + C6859 - C6860 + C6861 - C6862) * C3449 +
             (C6863 - C6864 + C6865 - C6866 + C6867 - C6868) * C32097) *
                C32232 +
            ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C3448 +
             (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32252 +
             (C5871 - C5870 + C5873 - C5872 + C5875 - C5874) * C3449 +
             (C5877 - C5876 + C5879 - C5878 + C5881 - C5880) * C32097) *
                C31921) *
               C31970 * C471 +
           (((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
              C5283 * C979 - C32282 * C985) *
                 C3448 +
             (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
              C5283 * C986 - C32282 * C997) *
                 C32252 +
             (C7365 - C7366 + C7367 - C7368 + C7369 - C7370) * C3449 +
             (C7371 - C7372 + C7373 - C7374 + C7375 - C7376) * C32097) *
                C32232 +
            ((C5700 - C5701 + C5702 - C5703 + C5704 - C5705) * C3448 +
             (C5706 - C5707 + C5708 - C5709 + C5710 - C5711) * C32252 +
             (C8779 - C8780 + C8781 - C8782 + C8783 - C8784) * C3449 +
             (C8785 - C8786 + C8787 - C8788 + C8789 - C8790) * C32097) *
                C31921) *
               C31970 * C472) *
              C473 +
          ((((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C3448 +
             (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32252 +
             (C5870 - C5871 + C5872 - C5873 + C5874 - C5875) * C3449 +
             (C5876 - C5877 + C5878 - C5879 + C5880 - C5881) * C32097) *
                C32232 +
            ((C5298 - C5297 + C5300 - C5299 + C5302 - C5301) * C3448 +
             (C5304 - C5303 + C5306 - C5305 + C5308 - C5307) * C32252 +
             (C5882 - C5883 + C5884 - C5885 + C5886 - C5887) * C3449 +
             (C5888 - C5889 + C5890 - C5891 + C5892 - C5893) * C32097) *
                C31921) *
               C31970 * C471 +
           (((C5701 - C5700 + C5703 - C5702 + C5705 - C5704) * C3448 +
             (C5707 - C5706 + C5709 - C5708 + C5711 - C5710) * C32252 +
             (C8780 - C8779 + C8782 - C8781 + C8784 - C8783) * C3449 +
             (C8786 - C8785 + C8788 - C8787 + C8790 - C8789) * C32097) *
                C32232 +
            ((C5713 - C5712 + C5715 - C5714 + C5717 - C5716) * C3448 +
             (C5719 - C5718 + C5721 - C5720 + C5723 - C5722) * C32252 +
             (C5275 * C690 - C5281 * C683 + C5276 * C1126 - C5282 * C1115 +
              C32282 * C1650 - C5283 * C1645) *
                 C3449 +
             (C5275 * C698 - C5281 * C691 + C5276 * C1142 - C5282 * C1127 +
              C32282 * C1654 - C5283 * C1651) *
                 C32097) *
                C31921) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C3448 +
             (C31993 * C136 - C113 * C123) * C32252 + (C2043 - C2044) * C3449 +
             (C2045 - C2046) * C32097) *
                C2658 +
            ((C144 - C145) * C3448 + (C146 - C147) * C32252 + C2383 * C3449 +
             C2384 * C32097) *
                C2659 +
            C3465 * C2660 + C3466 * C32286) *
               C577 +
           (((C2044 - C2043) * C3448 + (C2046 - C2045) * C32252 +
             (C2048 - C2047) * C3449 + (C2050 - C2049) * C32097) *
                C2658 +
            (C2385 * C3448 + C2386 * C32252 + C2387 * C3449 + C2388 * C32097) *
                C2659 +
            (C2389 * C3448 + C2390 * C32252 + C2391 * C3449 + C2392 * C32097) *
                C2660 +
            (C3927 * C3448 + C3928 * C32252 + (C1784 - C1785) * C3449 +
             (C1786 - C1787) * C32097) *
                C32286) *
               C578) *
              C471 +
          ((((C113 * C244 - C31993 * C254) * C3448 +
             (C113 * C255 - C31993 * C274) * C32252 + (C2551 - C2552) * C3449 +
             (C2553 - C2554) * C32097) *
                C2658 +
            ((C480 - C481) * C3448 + (C482 - C483) * C32252 +
             (C2217 - C2218) * C3449 + (C2219 - C2220) * C32097) *
                C2659 +
            ((C484 - C485) * C3448 + (C486 - C487) * C32252 +
             (C2225 - C2226) * C3449 + (C2227 - C2228) * C32097) *
                C2660 +
            ((C488 - C489) * C3448 + (C490 - C491) * C32252 +
             (C3793 - C3794) * C3449 + (C3795 - C3796) * C32097) *
                C32286) *
               C577 +
           (((C2552 - C2551) * C3448 + (C2554 - C2553) * C32252 +
             (C2556 - C2555) * C3449 + (C2558 - C2557) * C32097) *
                C2658 +
            ((C2218 - C2217) * C3448 + (C2220 - C2219) * C32252 +
             (C2222 - C2221) * C3449 + (C2224 - C2223) * C32097) *
                C2659 +
            ((C2226 - C2225) * C3448 + (C2228 - C2227) * C32252 +
             (C2230 - C2229) * C3449 + (C2232 - C2231) * C32097) *
                C2660 +
            ((C3794 - C3793) * C3448 + (C3796 - C3795) * C32252 +
             (C31993 * C2213 - C113 * C2212) * C3449 +
             (C31993 * C2215 - C113 * C2214) * C32097) *
                C32286) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
              C32282 * C264 - C5283 * C249) *
                 C3448 +
             (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
              C32282 * C279 - C5283 * C265) *
                 C32252 +
             (C6857 - C6858 + C6859 - C6860 + C6861 - C6862) * C3449 +
             (C6863 - C6864 + C6865 - C6866 + C6867 - C6868) * C32097) *
                C32232 +
            ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C3448 +
             (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32252 +
             C9001 * C3449 + C9002 * C32097) *
                C31921) *
               C577 +
           (((C6858 - C6857 + C6860 - C6859 + C6862 - C6861) * C3448 +
             (C6864 - C6863 + C6866 - C6865 + C6868 - C6867) * C32252 +
             (C6870 - C6869 + C6872 - C6871 + C6874 - C6873) * C3449 +
             (C6876 - C6875 + C6878 - C6877 + C6880 - C6879) * C32097) *
                C32232 +
            (C9003 * C3448 + C9004 * C32252 +
             (C7203 - C7204 + C7205 - C7206 + C7207 - C7208) * C3449 +
             (C7209 - C7210 + C7211 - C7212 + C7213 - C7214) * C32097) *
                C31921) *
               C578) *
              C471 +
          ((((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
              C5283 * C979 - C32282 * C985) *
                 C3448 +
             (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
              C5283 * C986 - C32282 * C997) *
                 C32252 +
             (C7365 - C7366 + C7367 - C7368 + C7369 - C7370) * C3449 +
             (C7371 - C7372 + C7373 - C7374 + C7375 - C7376) * C32097) *
                C32232 +
            ((C5700 - C5701 + C5702 - C5703 + C5704 - C5705) * C3448 +
             (C5706 - C5707 + C5708 - C5709 + C5710 - C5711) * C32252 +
             (C8779 - C8780 + C8781 - C8782 + C8783 - C8784) * C3449 +
             (C8785 - C8786 + C8787 - C8788 + C8789 - C8790) * C32097) *
                C31921) *
               C577 +
           (((C7366 - C7365 + C7368 - C7367 + C7370 - C7369) * C3448 +
             (C7372 - C7371 + C7374 - C7373 + C7376 - C7375) * C32252 +
             (C7378 - C7377 + C7380 - C7379 + C7382 - C7381) * C3449 +
             (C7384 - C7383 + C7386 - C7385 + C7388 - C7387) * C32097) *
                C32232 +
            ((C8780 - C8779 + C8782 - C8781 + C8784 - C8783) * C3448 +
             (C8786 - C8785 + C8788 - C8787 + C8790 - C8789) * C32252 +
             (C5275 * C1132 - C5281 * C1118 + C5276 * C1133 - C5282 * C1119 +
              C32282 * C7049 - C5283 * C7048) *
                 C3449 +
             (C5275 * C1145 - C5281 * C1134 + C5276 * C1146 - C5282 * C1135 +
              C32282 * C7051 - C5283 * C7050) *
                 C32097) *
                C31921) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C3448 +
            (C31993 * C136 - C113 * C123) * C32252 + (C2043 - C2044) * C3449 +
            (C2045 - C2046) * C32097) *
               C2658 +
           ((C144 - C145) * C3448 + (C146 - C147) * C32252 + C2383 * C3449 +
            C2384 * C32097) *
               C2659 +
           C3465 * C2660 + C3466 * C32286) *
              C31970 * C240 +
          (((C113 * C244 - C31993 * C254) * C3448 +
            (C113 * C255 - C31993 * C274) * C32252 + (C2551 - C2552) * C3449 +
            (C2553 - C2554) * C32097) *
               C2658 +
           ((C480 - C481) * C3448 + (C482 - C483) * C32252 +
            (C2217 - C2218) * C3449 + (C2219 - C2220) * C32097) *
               C2659 +
           ((C484 - C485) * C3448 + (C486 - C487) * C32252 +
            (C2225 - C2226) * C3449 + (C2227 - C2228) * C32097) *
               C2660 +
           ((C488 - C489) * C3448 + (C490 - C491) * C32252 +
            (C113 * C684 - C31993 * C692) * C3449 +
            (C113 * C693 - C31993 * C699) * C32097) *
               C32286) *
              C31970 * C241 +
          (((C31993 * C264 - C113 * C249) * C3448 +
            (C31993 * C279 - C113 * C265) * C32252 +
            (C31993 * C1122 - C113 * C1113) * C3449 +
            (C31993 * C1140 - C113 * C1123) * C32097) *
               C2658 +
           ((C31993 * C266 - C113 * C250) * C3448 +
            (C31993 * C280 - C113 * C267) * C32252 +
            (C31993 * C1124 - C113 * C1114) * C3449 +
            (C31993 * C1141 - C113 * C1125) * C32097) *
               C2659 +
           ((C31993 * C268 - C113 * C251) * C3448 +
            (C31993 * C281 - C113 * C269) * C32252 +
            (C31993 * C1126 - C113 * C1115) * C3449 +
            (C31993 * C1142 - C113 * C1127) * C32097) *
               C2660 +
           ((C31993 * C270 - C113 * C252) * C3448 +
            (C31993 * C282 - C113 * C271) * C32252 +
            (C31993 * C1470 - C113 * C1469) * C3449 +
            (C31993 * C1472 - C113 * C1471) * C32097) *
               C32286) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C3448 +
            (C31993 * C136 - C113 * C123) * C32252 + (C2043 - C2044) * C3449 +
            (C2045 - C2046) * C32097) *
               C2658 +
           ((C144 - C145) * C3448 + (C146 - C147) * C32252 + C2383 * C3449 +
            C2384 * C32097) *
               C2659 +
           C3465 * C2660 + C3466 * C32286) *
              C31970 * C31956 * C110 +
          (((C145 - C144) * C3448 + (C147 - C146) * C32252 + C2385 * C3449 +
            C2386 * C32097) *
               C2658 +
           ((C149 - C148) * C3448 + (C151 - C150) * C32252 + C2389 * C3449 +
            C2390 * C32097) *
               C2659 +
           ((C153 - C152) * C3448 + (C155 - C154) * C32252 +
            (C592 - C593) * C3449 + (C594 - C595) * C32097) *
               C2660 +
           ((C157 - C156) * C3448 + (C159 - C158) * C32252 +
            (C596 - C597) * C3449 + (C598 - C599) * C32097) *
               C32286) *
              C31970 * C31956 * C111 +
          (C3465 * C2658 + C3466 * C2659 +
           (C168 * C3448 + C169 * C32252 + (C597 - C596) * C3449 +
            (C599 - C598) * C32097) *
               C2660 +
           ((C161 - C160) * C3448 + (C163 - C162) * C32252 +
            (C31993 * C580 - C113 * C579) * C3449 +
            (C31993 * C582 - C113 * C581) * C32097) *
               C32286) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C3448 +
            (C31993 * C136 - C113 * C123) * C32252 + (C2043 - C2044) * C3449 +
            (C2045 - C2046) * C32097) *
               C2658 +
           ((C144 - C145) * C3448 + (C146 - C147) * C32252 + C2383 * C3449 +
            C2384 * C32097) *
               C2659 +
           C3465 * C2660 + C3466 * C32286) *
              C346 +
          (((C2044 - C2043) * C3448 + (C2046 - C2045) * C32252 +
            (C2048 - C2047) * C3449 + (C2050 - C2049) * C32097) *
               C2658 +
           (C2385 * C3448 + C2386 * C32252 + C2387 * C3449 + C2388 * C32097) *
               C2659 +
           (C2389 * C3448 + C2390 * C32252 + C2391 * C3449 + C2392 * C32097) *
               C2660 +
           ((C592 - C593) * C3448 + (C594 - C595) * C32252 +
            (C1784 - C1785) * C3449 + (C1786 - C1787) * C32097) *
               C32286) *
              C347 +
          ((C2065 * C3448 + C2066 * C32252 + (C2054 - C2053) * C3449 +
            (C2056 - C2055) * C32097) *
               C2658 +
           (C2051 * C3448 + C2052 * C32252 + (C2058 - C2057) * C3449 +
            (C2060 - C2059) * C32097) *
               C2659 +
           (C1791 * C3448 + C1792 * C32252 + (C2062 - C2061) * C3449 +
            (C2064 - C2063) * C32097) *
               C2660 +
           ((C1785 - C1784) * C3448 + (C1787 - C1786) * C32252 +
            (C31993 * C2379 - C113 * C2378) * C3449 +
            (C31993 * C2381 - C113 * C2380) * C32097) *
               C32286) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C3448 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32252 +
            (C6857 - C6858 + C6859 - C6860 + C6861 - C6862) * C3449 +
            (C6863 - C6864 + C6865 - C6866 + C6867 - C6868) * C32097) *
               C32232 +
           ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C3448 +
            (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32252 +
            (C5871 - C5870 + C5873 - C5872 + C5875 - C5874) * C3449 +
            (C5877 - C5876 + C5879 - C5878 + C5881 - C5880) * C32097) *
               C31921) *
              C31970 * C31956 * C110 +
          (((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C3448 +
            (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32252 +
            (C5870 - C5871 + C5872 - C5873 + C5874 - C5875) * C3449 +
            (C5876 - C5877 + C5878 - C5879 + C5880 - C5881) * C32097) *
               C32232 +
           ((C5298 - C5297 + C5300 - C5299 + C5302 - C5301) * C3448 +
            (C5304 - C5303 + C5306 - C5305 + C5308 - C5307) * C32252 +
            (C5882 - C5883 + C5884 - C5885 + C5886 - C5887) * C3449 +
            (C5888 - C5889 + C5890 - C5891 + C5892 - C5893) * C32097) *
               C31921) *
              C31970 * C31956 * C111 +
          ((C5329 * C3448 + C5330 * C32252 +
            (C5883 - C5882 + C5885 - C5884 + C5887 - C5886) * C3449 +
            (C5889 - C5888 + C5891 - C5890 + C5893 - C5892) * C32097) *
               C32232 +
           ((C5310 - C5309 + C5312 - C5311 + C5314 - C5313) * C3448 +
            (C5316 - C5315 + C5318 - C5317 + C5320 - C5319) * C32252 +
            (C5275 * C365 - C5281 * C352 + C5276 * C692 - C5282 * C684 +
             C32282 * C1470 - C5283 * C1469) *
                C3449 +
            (C5275 * C382 - C5281 * C366 + C5276 * C699 - C5282 * C693 +
             C32282 * C1472 - C5283 * C1471) *
                C32097) *
               C31921) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C3448 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32252 +
            (C6857 - C6858 + C6859 - C6860 + C6861 - C6862) * C3449 +
            (C6863 - C6864 + C6865 - C6866 + C6867 - C6868) * C32097) *
               C32232 +
           ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C3448 +
            (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32252 +
            (C5871 - C5870 + C5873 - C5872 + C5875 - C5874) * C3449 +
            (C5877 - C5876 + C5879 - C5878 + C5881 - C5880) * C32097) *
               C31921) *
              C31970 * C240 +
          (((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
             C5283 * C979 - C32282 * C985) *
                C3448 +
            (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
             C5283 * C986 - C32282 * C997) *
                C32252 +
            (C7365 - C7366 + C7367 - C7368 + C7369 - C7370) * C3449 +
            (C7371 - C7372 + C7373 - C7374 + C7375 - C7376) * C32097) *
               C32232 +
           ((C5700 - C5701 + C5702 - C5703 + C5704 - C5705) * C3448 +
            (C5706 - C5707 + C5708 - C5709 + C5710 - C5711) * C32252 +
            (C5281 * C682 - C5275 * C688 + C5282 * C1114 - C5276 * C1124 +
             C5283 * C1644 - C32282 * C1648) *
                C3449 +
            (C5281 * C689 - C5275 * C697 + C5282 * C1125 - C5276 * C1141 +
             C5283 * C1649 - C32282 * C1653) *
                C32097) *
               C31921) *
              C31970 * C241 +
          (((C5275 * C264 - C5281 * C249 + C5276 * C985 - C5282 * C979 +
             C32282 * C991 - C5283 * C982) *
                C3448 +
            (C5275 * C279 - C5281 * C265 + C5276 * C997 - C5282 * C986 +
             C32282 * C1000 - C5283 * C992) *
                C32252 +
            (C5275 * C1122 - C5281 * C1113 + C5276 * C1646 - C5282 * C1643 +
             C32282 * C6247 - C5283 * C6244) *
                C3449 +
            (C5275 * C1140 - C5281 * C1123 + C5276 * C1652 - C5282 * C1647 +
             C32282 * C6253 - C5283 * C6248) *
                C32097) *
               C32232 +
           ((C5275 * C266 - C5281 * C250 + C5276 * C987 - C5282 * C980 +
             C32282 * C993 - C5283 * C983) *
                C3448 +
            (C5275 * C280 - C5281 * C267 + C5276 * C998 - C5282 * C988 +
             C32282 * C1001 - C5283 * C994) *
                C32252 +
            (C5275 * C1124 - C5281 * C1114 + C5276 * C1648 - C5282 * C1644 +
             C32282 * C6425 - C5283 * C6424) *
                C3449 +
            (C5275 * C1141 - C5281 * C1125 + C5276 * C1653 - C5282 * C1649 +
             C32282 * C6427 - C5283 * C6426) *
                C32097) *
               C31921) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C3448 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32252 +
            (C6857 - C6858 + C6859 - C6860 + C6861 - C6862) * C3449 +
            (C6863 - C6864 + C6865 - C6866 + C6867 - C6868) * C32097) *
               C32232 +
           ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C3448 +
            (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32252 +
            (C5871 - C5870 + C5873 - C5872 + C5875 - C5874) * C3449 +
            (C5877 - C5876 + C5879 - C5878 + C5881 - C5880) * C32097) *
               C31921) *
              C346 +
          (((C6858 - C6857 + C6860 - C6859 + C6862 - C6861) * C3448 +
            (C6864 - C6863 + C6866 - C6865 + C6868 - C6867) * C32252 +
            (C6870 - C6869 + C6872 - C6871 + C6874 - C6873) * C3449 +
            (C6876 - C6875 + C6878 - C6877 + C6880 - C6879) * C32097) *
               C32232 +
           ((C5870 - C5871 + C5872 - C5873 + C5874 - C5875) * C3448 +
            (C5876 - C5877 + C5878 - C5879 + C5880 - C5881) * C32252 +
            (C7203 - C7204 + C7205 - C7206 + C7207 - C7208) * C3449 +
            (C7209 - C7210 + C7211 - C7212 + C7213 - C7214) * C32097) *
               C31921) *
              C347 +
          ((C6901 * C3448 + C6902 * C32252 +
            (C6882 - C6881 + C6884 - C6883 + C6886 - C6885) * C3449 +
            (C6888 - C6887 + C6890 - C6889 + C6892 - C6891) * C32097) *
               C32232 +
           ((C7204 - C7203 + C7206 - C7205 + C7208 - C7207) * C3448 +
            (C7210 - C7209 + C7212 - C7211 + C7214 - C7213) * C32252 +
            (C5275 * C2026 - C5281 * C2019 + C5276 * C2543 - C5282 * C2539 +
             C32282 * C7199 - C5283 * C7198) *
                C3449 +
            (C5275 * C2037 - C5281 * C2027 + C5276 * C2548 - C5282 * C2544 +
             C32282 * C7201 - C5283 * C7200) *
                C32097) *
               C31921) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C3448 +
             (C31993 * C136 - C113 * C123) * C32252 + (C2043 - C2044) * C3449 +
             (C2045 - C2046) * C32097) *
                C2658 +
            ((C144 - C145) * C3448 + (C146 - C147) * C32252 + C2383 * C3449 +
             C2384 * C32097) *
                C2659 +
            C3465 * C2660 + C3466 * C32286) *
               C577 +
           (((C2044 - C2043) * C3448 + (C2046 - C2045) * C32252 +
             (C2048 - C2047) * C3449 + (C2050 - C2049) * C32097) *
                C2658 +
            (C2385 * C3448 + C2386 * C32252 + C2387 * C3449 + C2388 * C32097) *
                C2659 +
            (C2389 * C3448 + C2390 * C32252 + C2391 * C3449 + C2392 * C32097) *
                C2660 +
            (C3927 * C3448 + C3928 * C32252 + (C1784 - C1785) * C3449 +
             (C1786 - C1787) * C32097) *
                C32286) *
               C578) *
              C31956 * C473 +
          ((((C145 - C144) * C3448 + (C147 - C146) * C32252 + C2385 * C3449 +
             C2386 * C32097) *
                C2658 +
            ((C149 - C148) * C3448 + (C151 - C150) * C32252 + C2389 * C3449 +
             C2390 * C32097) *
                C2659 +
            ((C153 - C152) * C3448 + (C155 - C154) * C32252 + C3927 * C3449 +
             C3928 * C32097) *
                C2660 +
            ((C157 - C156) * C3448 + (C159 - C158) * C32252 +
             (C596 - C597) * C3449 + (C598 - C599) * C32097) *
                C32286) *
               C577 +
           ((C2383 * C3448 + C2384 * C32252 + C2051 * C3449 + C2052 * C32097) *
                C2658 +
            (C1778 * C3448 + C1779 * C32252 + C1791 * C3449 + C1792 * C32097) *
                C2659 +
            (C3457 * C3448 + C3458 * C32252 + (C1785 - C1784) * C3449 +
             (C1787 - C1786) * C32097) *
                C2660 +
            ((C597 - C596) * C3448 + (C599 - C598) * C32252 +
             (C31993 * C377 - C113 * C358) * C3449 +
             (C31993 * C388 - C113 * C378) * C32097) *
                C32286) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
              C32282 * C264 - C5283 * C249) *
                 C3448 +
             (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
              C32282 * C279 - C5283 * C265) *
                 C32252 +
             (C6857 - C6858 + C6859 - C6860 + C6861 - C6862) * C3449 +
             (C6863 - C6864 + C6865 - C6866 + C6867 - C6868) * C32097) *
                C32232 +
            ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C3448 +
             (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32252 +
             C9001 * C3449 + C9002 * C32097) *
                C31921) *
               C577 +
           (((C6858 - C6857 + C6860 - C6859 + C6862 - C6861) * C3448 +
             (C6864 - C6863 + C6866 - C6865 + C6868 - C6867) * C32252 +
             (C6870 - C6869 + C6872 - C6871 + C6874 - C6873) * C3449 +
             (C6876 - C6875 + C6878 - C6877 + C6880 - C6879) * C32097) *
                C32232 +
            (C9003 * C3448 + C9004 * C32252 +
             (C7203 - C7204 + C7205 - C7206 + C7207 - C7208) * C3449 +
             (C7209 - C7210 + C7211 - C7212 + C7213 - C7214) * C32097) *
                C31921) *
               C578) *
              C31956 * C473 +
          ((((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C3448 +
             (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32252 +
             C9003 * C3449 + C9004 * C32097) *
                C32232 +
            ((C5298 - C5297 + C5300 - C5299 + C5302 - C5301) * C3448 +
             (C5304 - C5303 + C5306 - C5305 + C5308 - C5307) * C32252 +
             (C5882 - C5883 + C5884 - C5885 + C5886 - C5887) * C3449 +
             (C5888 - C5889 + C5890 - C5891 + C5892 - C5893) * C32097) *
                C31921) *
               C577 +
           ((C9001 * C3448 + C9002 * C32252 +
             (C7204 - C7203 + C7206 - C7205 + C7208 - C7207) * C3449 +
             (C7210 - C7209 + C7212 - C7211 + C7214 - C7213) * C32097) *
                C32232 +
            ((C5883 - C5882 + C5885 - C5884 + C5887 - C5886) * C3448 +
             (C5889 - C5888 + C5891 - C5890 + C5893 - C5892) * C32252 +
             (C5275 * C373 - C5281 * C356 + C5276 * C1136 - C5282 * C1120 +
              C32282 * C1137 - C5283 * C1121) *
                 C3449 +
             (C5275 * C386 - C5281 * C374 + C5276 * C1147 - C5282 * C1138 +
              C32282 * C1148 - C5283 * C1139) *
                 C32097) *
                C31921) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] += (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C31993 * C122 - C113 * C115) * C3448 +
                     (C31993 * C136 - C113 * C123) * C32252 +
                     (C2043 - C2044) * C3449 + (C2045 - C2046) * C32097) *
                        C2658 +
                    ((C144 - C145) * C3448 + (C146 - C147) * C32252 +
                     C2383 * C3449 + C2384 * C32097) *
                        C2659 +
                    C3465 * C2660 + C3466 * C32286) *
                       C31970 * C31956 * C110 +
                   (((C145 - C144) * C3448 + (C147 - C146) * C32252 +
                     C2385 * C3449 + C2386 * C32097) *
                        C2658 +
                    ((C149 - C148) * C3448 + (C151 - C150) * C32252 +
                     C2389 * C3449 + C2390 * C32097) *
                        C2659 +
                    ((C153 - C152) * C3448 + (C155 - C154) * C32252 +
                     (C592 - C593) * C3449 + (C594 - C595) * C32097) *
                        C2660 +
                    ((C157 - C156) * C3448 + (C159 - C158) * C32252 +
                     (C596 - C597) * C3449 + (C598 - C599) * C32097) *
                        C32286) *
                       C31970 * C31956 * C111 +
                   (C3465 * C2658 + C3466 * C2659 +
                    (C168 * C3448 + C169 * C32252 + (C597 - C596) * C3449 +
                     (C599 - C598) * C32097) *
                        C2660 +
                    ((C161 - C160) * C3448 + (C163 - C162) * C32252 +
                     (C31993 * C580 - C113 * C579) * C3449 +
                     (C31993 * C582 - C113 * C581) * C32097) *
                        C32286) *
                       C31970 * C31956 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C31993 * C122 - C113 * C115) * C3448 +
                     (C31993 * C136 - C113 * C123) * C32252 +
                     (C2043 - C2044) * C3449 + (C2045 - C2046) * C32097) *
                        C2658 +
                    ((C144 - C145) * C3448 + (C146 - C147) * C32252 +
                     C2383 * C3449 + C2384 * C32097) *
                        C2659 +
                    C3465 * C2660 + C3466 * C32286) *
                       C31970 * C240 +
                   (((C113 * C244 - C31993 * C254) * C3448 +
                     (C113 * C255 - C31993 * C274) * C32252 +
                     (C2551 - C2552) * C3449 + (C2553 - C2554) * C32097) *
                        C2658 +
                    ((C480 - C481) * C3448 + (C482 - C483) * C32252 +
                     (C2217 - C2218) * C3449 + (C2219 - C2220) * C32097) *
                        C2659 +
                    ((C484 - C485) * C3448 + (C486 - C487) * C32252 +
                     (C2225 - C2226) * C3449 + (C2227 - C2228) * C32097) *
                        C2660 +
                    ((C488 - C489) * C3448 + (C490 - C491) * C32252 +
                     (C113 * C684 - C31993 * C692) * C3449 +
                     (C113 * C693 - C31993 * C699) * C32097) *
                        C32286) *
                       C31970 * C241 +
                   (((C31993 * C264 - C113 * C249) * C3448 +
                     (C31993 * C279 - C113 * C265) * C32252 +
                     (C31993 * C1122 - C113 * C1113) * C3449 +
                     (C31993 * C1140 - C113 * C1123) * C32097) *
                        C2658 +
                    ((C31993 * C266 - C113 * C250) * C3448 +
                     (C31993 * C280 - C113 * C267) * C32252 +
                     (C31993 * C1124 - C113 * C1114) * C3449 +
                     (C31993 * C1141 - C113 * C1125) * C32097) *
                        C2659 +
                    ((C31993 * C268 - C113 * C251) * C3448 +
                     (C31993 * C281 - C113 * C269) * C32252 +
                     (C31993 * C1126 - C113 * C1115) * C3449 +
                     (C31993 * C1142 - C113 * C1127) * C32097) *
                        C2660 +
                    ((C31993 * C270 - C113 * C252) * C3448 +
                     (C31993 * C282 - C113 * C271) * C32252 +
                     (C31993 * C1470 - C113 * C1469) * C3449 +
                     (C31993 * C1472 - C113 * C1471) * C32097) *
                        C32286) *
                       C31970 * C242) *
                  C31944) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C5275 * C122 - C5281 * C115 + C5276 * C254 -
                      C5282 * C244 + C32282 * C264 - C5283 * C249) *
                         C3448 +
                     (C5275 * C136 - C5281 * C123 + C5276 * C274 -
                      C5282 * C255 + C32282 * C279 - C5283 * C265) *
                         C32252 +
                     (C6857 - C6858 + C6859 - C6860 + C6861 - C6862) * C3449 +
                     (C6863 - C6864 + C6865 - C6866 + C6867 - C6868) * C32097) *
                        C32232 +
                    ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C3448 +
                     (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32252 +
                     (C5871 - C5870 + C5873 - C5872 + C5875 - C5874) * C3449 +
                     (C5877 - C5876 + C5879 - C5878 + C5881 - C5880) * C32097) *
                        C31921) *
                       C31970 * C31956 * C110 +
                   (((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C3448 +
                     (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32252 +
                     (C5870 - C5871 + C5872 - C5873 + C5874 - C5875) * C3449 +
                     (C5876 - C5877 + C5878 - C5879 + C5880 - C5881) * C32097) *
                        C32232 +
                    ((C5298 - C5297 + C5300 - C5299 + C5302 - C5301) * C3448 +
                     (C5304 - C5303 + C5306 - C5305 + C5308 - C5307) * C32252 +
                     (C5882 - C5883 + C5884 - C5885 + C5886 - C5887) * C3449 +
                     (C5888 - C5889 + C5890 - C5891 + C5892 - C5893) * C32097) *
                        C31921) *
                       C31970 * C31956 * C111 +
                   ((C5329 * C3448 + C5330 * C32252 +
                     (C5883 - C5882 + C5885 - C5884 + C5887 - C5886) * C3449 +
                     (C5889 - C5888 + C5891 - C5890 + C5893 - C5892) * C32097) *
                        C32232 +
                    ((C5310 - C5309 + C5312 - C5311 + C5314 - C5313) * C3448 +
                     (C5316 - C5315 + C5318 - C5317 + C5320 - C5319) * C32252 +
                     (C5275 * C365 - C5281 * C352 + C5276 * C692 -
                      C5282 * C684 + C32282 * C1470 - C5283 * C1469) *
                         C3449 +
                     (C5275 * C382 - C5281 * C366 + C5276 * C699 -
                      C5282 * C693 + C32282 * C1472 - C5283 * C1471) *
                         C32097) *
                        C31921) *
                       C31970 * C31956 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C5275 * C122 - C5281 * C115 + C5276 * C254 -
                      C5282 * C244 + C32282 * C264 - C5283 * C249) *
                         C3448 +
                     (C5275 * C136 - C5281 * C123 + C5276 * C274 -
                      C5282 * C255 + C32282 * C279 - C5283 * C265) *
                         C32252 +
                     (C6857 - C6858 + C6859 - C6860 + C6861 - C6862) * C3449 +
                     (C6863 - C6864 + C6865 - C6866 + C6867 - C6868) * C32097) *
                        C32232 +
                    ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C3448 +
                     (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32252 +
                     (C5871 - C5870 + C5873 - C5872 + C5875 - C5874) * C3449 +
                     (C5877 - C5876 + C5879 - C5878 + C5881 - C5880) * C32097) *
                        C31921) *
                       C31970 * C240 +
                   (((C5281 * C244 - C5275 * C254 + C5282 * C249 -
                      C5276 * C264 + C5283 * C979 - C32282 * C985) *
                         C3448 +
                     (C5281 * C255 - C5275 * C274 + C5282 * C265 -
                      C5276 * C279 + C5283 * C986 - C32282 * C997) *
                         C32252 +
                     (C7365 - C7366 + C7367 - C7368 + C7369 - C7370) * C3449 +
                     (C7371 - C7372 + C7373 - C7374 + C7375 - C7376) * C32097) *
                        C32232 +
                    ((C5700 - C5701 + C5702 - C5703 + C5704 - C5705) * C3448 +
                     (C5706 - C5707 + C5708 - C5709 + C5710 - C5711) * C32252 +
                     (C5281 * C682 - C5275 * C688 + C5282 * C1114 -
                      C5276 * C1124 + C5283 * C1644 - C32282 * C1648) *
                         C3449 +
                     (C5281 * C689 - C5275 * C697 + C5282 * C1125 -
                      C5276 * C1141 + C5283 * C1649 - C32282 * C1653) *
                         C32097) *
                        C31921) *
                       C31970 * C241 +
                   (((C5275 * C264 - C5281 * C249 + C5276 * C985 -
                      C5282 * C979 + C32282 * C991 - C5283 * C982) *
                         C3448 +
                     (C5275 * C279 - C5281 * C265 + C5276 * C997 -
                      C5282 * C986 + C32282 * C1000 - C5283 * C992) *
                         C32252 +
                     (C5275 * C1122 - C5281 * C1113 + C5276 * C1646 -
                      C5282 * C1643 + C32282 * C6247 - C5283 * C6244) *
                         C3449 +
                     (C5275 * C1140 - C5281 * C1123 + C5276 * C1652 -
                      C5282 * C1647 + C32282 * C6253 - C5283 * C6248) *
                         C32097) *
                        C32232 +
                    ((C5275 * C266 - C5281 * C250 + C5276 * C987 -
                      C5282 * C980 + C32282 * C993 - C5283 * C983) *
                         C3448 +
                     (C5275 * C280 - C5281 * C267 + C5276 * C998 -
                      C5282 * C988 + C32282 * C1001 - C5283 * C994) *
                         C32252 +
                     (C5275 * C1124 - C5281 * C1114 + C5276 * C1648 -
                      C5282 * C1644 + C32282 * C6425 - C5283 * C6424) *
                         C3449 +
                     (C5275 * C1141 - C5281 * C1125 + C5276 * C1653 -
                      C5282 * C1649 + C32282 * C6427 - C5283 * C6426) *
                         C32097) *
                        C31921) *
                       C31970 * C242) *
                  C31944) /
                     (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C114 +
             (C31993 * C136 - C113 * C123) * C32010) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C31970 * C471 +
           (((C113 * C244 - C31993 * C254) * C114 +
             (C113 * C255 - C31993 * C274) * C32010) *
                C103 +
            ((C480 - C481) * C114 + (C482 - C483) * C32010) * C104 +
            ((C484 - C485) * C114 + (C486 - C487) * C32010) * C105 +
            ((C488 - C489) * C114 + (C490 - C491) * C32010) * C106 +
            ((C492 - C493) * C114 + (C494 - C495) * C32010) * C107) *
               C31970 * C472) *
              C473 +
          ((((C145 - C144) * C114 + (C147 - C146) * C32010) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C32010) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C32010) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C32010) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C32010) * C107) *
               C31970 * C471 +
           (((C481 - C480) * C114 + (C483 - C482) * C32010) * C103 +
            ((C485 - C484) * C114 + (C487 - C486) * C32010) * C104 +
            ((C489 - C488) * C114 + (C491 - C490) * C32010) * C105 +
            ((C493 - C492) * C114 + (C495 - C494) * C32010) * C106 +
            ((C31993 * C476 - C113 * C475) * C114 +
             (C31993 * C478 - C113 * C477) * C32010) *
                C107) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
              C32282 * C264 - C819 * C249) *
                 C114 +
             (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
              C32282 * C279 - C819 * C265) *
                 C32010) *
                C814 +
            ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
             (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
                C815 +
            C869 * C32271) *
               C31970 * C471 +
           (((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
              C819 * C979 - C32282 * C985) *
                 C114 +
             (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
              C819 * C986 - C32282 * C997) *
                 C32010) *
                C814 +
            ((C1300 - C1301 + C1302 - C1303 + C1304 - C1305) * C114 +
             (C1306 - C1307 + C1308 - C1309 + C1310 - C1311) * C32010) *
                C815 +
            ((C1312 - C1313 + C1314 - C1315 + C1316 - C1317) * C114 +
             (C1318 - C1319 + C1320 - C1321 + C1322 - C1323) * C32010) *
                C32271) *
               C31970 * C472) *
              C473 +
          ((((C822 - C821 + C824 - C823 + C826 - C825) * C114 +
             (C828 - C827 + C830 - C829 + C832 - C831) * C32010) *
                C814 +
            ((C834 - C833 + C836 - C835 + C838 - C837) * C114 +
             (C840 - C839 + C842 - C841 + C844 - C843) * C32010) *
                C815 +
            ((C845 - C846 + C847 - C848 + C849 - C850) * C114 +
             (C851 - C852 + C853 - C854 + C855 - C856) * C32010) *
                C32271) *
               C31970 * C471 +
           (((C1301 - C1300 + C1303 - C1302 + C1305 - C1304) * C114 +
             (C1307 - C1306 + C1309 - C1308 + C1311 - C1310) * C32010) *
                C814 +
            ((C1313 - C1312 + C1315 - C1314 + C1317 - C1316) * C114 +
             (C1319 - C1318 + C1321 - C1320 + C1323 - C1322) * C32010) *
                C815 +
            ((C32317 * C260 - C817 * C247 + C32305 * C270 - C818 * C252 +
              C32282 * C1296 - C819 * C1295) *
                 C114 +
             (C32317 * C277 - C817 * C261 + C32305 * C282 - C818 * C271 +
              C32282 * C1298 - C819 * C1297) *
                 C32010) *
                C32271) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
              C32282 * C264 - C5283 * C249) *
                 C114 +
             (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
              C32282 * C279 - C5283 * C265) *
                 C32010) *
                C32314 +
            ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
             (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
                C32301 +
            C5333 * C32271) *
               C31970 * C471 +
           (((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
              C5283 * C979 - C32282 * C985) *
                 C114 +
             (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
              C5283 * C986 - C32282 * C997) *
                 C32010) *
                C32314 +
            ((C5700 - C5701 + C5702 - C5703 + C5704 - C5705) * C114 +
             (C5706 - C5707 + C5708 - C5709 + C5710 - C5711) * C32010) *
                C32301 +
            ((C5712 - C5713 + C5714 - C5715 + C5716 - C5717) * C114 +
             (C5718 - C5719 + C5720 - C5721 + C5722 - C5723) * C32010) *
                C32271) *
               C31970 * C472) *
              C473 +
          ((((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C114 +
             (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32010) *
                C32314 +
            ((C5298 - C5297 + C5300 - C5299 + C5302 - C5301) * C114 +
             (C5304 - C5303 + C5306 - C5305 + C5308 - C5307) * C32010) *
                C32301 +
            ((C5309 - C5310 + C5311 - C5312 + C5313 - C5314) * C114 +
             (C5315 - C5316 + C5317 - C5318 + C5319 - C5320) * C32010) *
                C32271) *
               C31970 * C471 +
           (((C5701 - C5700 + C5703 - C5702 + C5705 - C5704) * C114 +
             (C5707 - C5706 + C5709 - C5708 + C5711 - C5710) * C32010) *
                C32314 +
            ((C5713 - C5712 + C5715 - C5714 + C5717 - C5716) * C114 +
             (C5719 - C5718 + C5721 - C5720 + C5723 - C5722) * C32010) *
                C32301 +
            ((C5275 * C260 - C5281 * C247 + C5276 * C270 - C5282 * C252 +
              C32282 * C1296 - C5283 * C1295) *
                 C114 +
             (C5275 * C277 - C5281 * C261 + C5276 * C282 - C5282 * C271 +
              C32282 * C1298 - C5283 * C1297) *
                 C32010) *
                C32271) *
               C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
             C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
             C6105 * C991 - C6111 * C982) *
                C114 +
            (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
             C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
             C6105 * C1000 - C6111 * C992) *
                C32010) *
               C31911 * C31970 * C471 +
           ((C6107 * C244 - C6101 * C254 + C6108 * C249 - C6102 * C264 +
             C6109 * C979 - C6103 * C985 + C6110 * C982 - C6104 * C991 +
             C6111 * C6174 - C6105 * C6176) *
                C114 +
            (C6107 * C255 - C6101 * C274 + C6108 * C265 - C6102 * C279 +
             C6109 * C986 - C6103 * C997 + C6110 * C992 - C6104 * C1000 +
             C6111 * C6177 - C6105 * C6180) *
                C32010) *
               C31911 * C31970 * C472) *
              C473 +
          (((C6107 * C116 - C6101 * C124 + C6108 * C245 - C6102 * C256 +
             C6109 * C250 - C6103 * C266 + C6110 * C980 - C6104 * C987 +
             C6111 * C983 - C6105 * C993) *
                C114 +
            (C6107 * C125 - C6101 * C137 + C6108 * C257 - C6102 * C275 +
             C6109 * C267 - C6103 * C280 + C6110 * C988 - C6104 * C998 +
             C6111 * C994 - C6105 * C1001) *
                C32010) *
               C31911 * C31970 * C471 +
           ((C6101 * C256 - C6107 * C245 + C6102 * C266 - C6108 * C250 +
             C6103 * C987 - C6109 * C980 + C6104 * C993 - C6110 * C983 +
             C6105 * C6339 - C6111 * C6338) *
                C114 +
            (C6101 * C275 - C6107 * C257 + C6102 * C280 - C6108 * C267 +
             C6103 * C998 - C6109 * C988 + C6104 * C1001 - C6110 * C994 +
             C6105 * C6341 - C6111 * C6340) *
                C32010) *
               C31911 * C31970 * C472) *
              C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C114 +
             (C31993 * C136 - C113 * C123) * C32010) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C577 +
           (((C113 * C349 - C31993 * C359) * C114 +
             (C113 * C360 - C31993 * C379) * C32010) *
                C103 +
            ((C584 - C585) * C114 + (C586 - C587) * C32010) * C104 +
            ((C588 - C589) * C114 + (C590 - C591) * C32010) * C105 +
            ((C592 - C593) * C114 + (C594 - C595) * C32010) * C106 +
            ((C596 - C597) * C114 + (C598 - C599) * C32010) * C107) *
               C578) *
              C471 +
          ((((C113 * C244 - C31993 * C254) * C114 +
             (C113 * C255 - C31993 * C274) * C32010) *
                C103 +
            ((C480 - C481) * C114 + (C482 - C483) * C32010) * C104 +
            ((C484 - C485) * C114 + (C486 - C487) * C32010) * C105 +
            ((C488 - C489) * C114 + (C490 - C491) * C32010) * C106 +
            ((C492 - C493) * C114 + (C494 - C495) * C32010) * C107) *
               C577 +
           (((C31993 * C686 - C113 * C681) * C114 +
             (C31993 * C696 - C113 * C687) * C32010) *
                C103 +
            ((C31993 * C688 - C113 * C682) * C114 +
             (C31993 * C697 - C113 * C689) * C32010) *
                C104 +
            ((C31993 * C690 - C113 * C683) * C114 +
             (C31993 * C698 - C113 * C691) * C32010) *
                C105 +
            ((C31993 * C692 - C113 * C684) * C114 +
             (C31993 * C699 - C113 * C693) * C32010) *
                C106 +
            ((C31993 * C694 - C113 * C685) * C114 +
             (C31993 * C700 - C113 * C695) * C32010) *
                C107) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
              C32282 * C264 - C819 * C249) *
                 C114 +
             (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
              C32282 * C279 - C819 * C265) *
                 C32010) *
                C814 +
            ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
             (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
                C815 +
            C869 * C32271) *
               C577 +
           (((C817 * C349 - C32317 * C359 + C818 * C681 - C32305 * C686 +
              C819 * C1113 - C32282 * C1122) *
                 C114 +
             (C817 * C360 - C32317 * C379 + C818 * C687 - C32305 * C696 +
              C819 * C1123 - C32282 * C1140) *
                 C32010) *
                C814 +
            ((C1474 - C1475 + C1476 - C1477 + C1478 - C1479) * C114 +
             (C1480 - C1481 + C1482 - C1483 + C1484 - C1485) * C32010) *
                C815 +
            ((C1486 - C1487 + C1488 - C1489 + C1490 - C1491) * C114 +
             (C1492 - C1493 + C1494 - C1495 + C1496 - C1497) * C32010) *
                C32271) *
               C578) *
              C471 +
          ((((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
              C819 * C979 - C32282 * C985) *
                 C114 +
             (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
              C819 * C986 - C32282 * C997) *
                 C32010) *
                C814 +
            ((C1300 - C1301 + C1302 - C1303 + C1304 - C1305) * C114 +
             (C1306 - C1307 + C1308 - C1309 + C1310 - C1311) * C32010) *
                C815 +
            ((C1312 - C1313 + C1314 - C1315 + C1316 - C1317) * C114 +
             (C1318 - C1319 + C1320 - C1321 + C1322 - C1323) * C32010) *
                C32271) *
               C577 +
           (((C32317 * C686 - C817 * C681 + C32305 * C1122 - C818 * C1113 +
              C32282 * C1646 - C819 * C1643) *
                 C114 +
             (C32317 * C696 - C817 * C687 + C32305 * C1140 - C818 * C1123 +
              C32282 * C1652 - C819 * C1647) *
                 C32010) *
                C814 +
            ((C32317 * C688 - C817 * C682 + C32305 * C1124 - C818 * C1114 +
              C32282 * C1648 - C819 * C1644) *
                 C114 +
             (C32317 * C697 - C817 * C689 + C32305 * C1141 - C818 * C1125 +
              C32282 * C1653 - C819 * C1649) *
                 C32010) *
                C815 +
            ((C32317 * C690 - C817 * C683 + C32305 * C1126 - C818 * C1115 +
              C32282 * C1650 - C819 * C1645) *
                 C114 +
             (C32317 * C698 - C817 * C691 + C32305 * C1142 - C818 * C1127 +
              C32282 * C1654 - C819 * C1651) *
                 C32010) *
                C32271) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
              C32282 * C264 - C5283 * C249) *
                 C114 +
             (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
              C32282 * C279 - C5283 * C265) *
                 C32010) *
                C32314 +
            ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
             (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
                C32301 +
            C5333 * C32271) *
               C577 +
           (((C5281 * C349 - C5275 * C359 + C5282 * C681 - C5276 * C686 +
              C5283 * C1113 - C32282 * C1122) *
                 C114 +
             (C5281 * C360 - C5275 * C379 + C5282 * C687 - C5276 * C696 +
              C5283 * C1123 - C32282 * C1140) *
                 C32010) *
                C32314 +
            ((C5870 - C5871 + C5872 - C5873 + C5874 - C5875) * C114 +
             (C5876 - C5877 + C5878 - C5879 + C5880 - C5881) * C32010) *
                C32301 +
            ((C5882 - C5883 + C5884 - C5885 + C5886 - C5887) * C114 +
             (C5888 - C5889 + C5890 - C5891 + C5892 - C5893) * C32010) *
                C32271) *
               C578) *
              C471 +
          ((((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
              C5283 * C979 - C32282 * C985) *
                 C114 +
             (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
              C5283 * C986 - C32282 * C997) *
                 C32010) *
                C32314 +
            ((C5700 - C5701 + C5702 - C5703 + C5704 - C5705) * C114 +
             (C5706 - C5707 + C5708 - C5709 + C5710 - C5711) * C32010) *
                C32301 +
            ((C5712 - C5713 + C5714 - C5715 + C5716 - C5717) * C114 +
             (C5718 - C5719 + C5720 - C5721 + C5722 - C5723) * C32010) *
                C32271) *
               C577 +
           (((C5275 * C686 - C5281 * C681 + C5276 * C1122 - C5282 * C1113 +
              C32282 * C1646 - C5283 * C1643) *
                 C114 +
             (C5275 * C696 - C5281 * C687 + C5276 * C1140 - C5282 * C1123 +
              C32282 * C1652 - C5283 * C1647) *
                 C32010) *
                C32314 +
            ((C5275 * C688 - C5281 * C682 + C5276 * C1124 - C5282 * C1114 +
              C32282 * C1648 - C5283 * C1644) *
                 C114 +
             (C5275 * C697 - C5281 * C689 + C5276 * C1141 - C5282 * C1125 +
              C32282 * C1653 - C5283 * C1649) *
                 C32010) *
                C32301 +
            ((C5275 * C690 - C5281 * C683 + C5276 * C1126 - C5282 * C1115 +
              C32282 * C1650 - C5283 * C1645) *
                 C114 +
             (C5275 * C698 - C5281 * C691 + C5276 * C1142 - C5282 * C1127 +
              C32282 * C1654 - C5283 * C1651) *
                 C32010) *
                C32271) *
               C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
             C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
             C6105 * C991 - C6111 * C982) *
                C114 +
            (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
             C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
             C6105 * C1000 - C6111 * C992) *
                C32010) *
               C31911 * C577 +
           ((C6107 * C349 - C6101 * C359 + C6108 * C681 - C6102 * C686 +
             C6109 * C1113 - C6103 * C1122 + C6110 * C1643 - C6104 * C1646 +
             C6111 * C6244 - C6105 * C6247) *
                C114 +
            (C6107 * C360 - C6101 * C379 + C6108 * C687 - C6102 * C696 +
             C6109 * C1123 - C6103 * C1140 + C6110 * C1647 - C6104 * C1652 +
             C6111 * C6248 - C6105 * C6253) *
                C32010) *
               C31911 * C578) *
              C471 +
          (((C6107 * C244 - C6101 * C254 + C6108 * C249 - C6102 * C264 +
             C6109 * C979 - C6103 * C985 + C6110 * C982 - C6104 * C991 +
             C6111 * C6174 - C6105 * C6176) *
                C114 +
            (C6107 * C255 - C6101 * C274 + C6108 * C265 - C6102 * C279 +
             C6109 * C986 - C6103 * C997 + C6110 * C992 - C6104 * C1000 +
             C6111 * C6177 - C6105 * C6180) *
                C32010) *
               C31911 * C577 +
           ((C6101 * C686 - C6107 * C681 + C6102 * C1122 - C6108 * C1113 +
             C6103 * C1646 - C6109 * C1643 + C6104 * C6247 - C6110 * C6244 +
             C6105 * C6511 - C6111 * C6510) *
                C114 +
            (C6101 * C696 - C6107 * C687 + C6102 * C1140 - C6108 * C1123 +
             C6103 * C1652 - C6109 * C1647 + C6104 * C6253 - C6110 * C6248 +
             C6105 * C6513 - C6111 * C6512) *
                C32010) *
               C31911 * C578) *
              C472) *
         C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C114 +
            (C31993 * C136 - C113 * C123) * C32010) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C31970 * C240 +
          (((C113 * C244 - C31993 * C254) * C114 +
            (C113 * C255 - C31993 * C274) * C32010) *
               C103 +
           ((C113 * C245 - C31993 * C256) * C114 +
            (C113 * C257 - C31993 * C275) * C32010) *
               C104 +
           ((C113 * C246 - C31993 * C258) * C114 +
            (C113 * C259 - C31993 * C276) * C32010) *
               C105 +
           ((C113 * C247 - C31993 * C260) * C114 +
            (C113 * C261 - C31993 * C277) * C32010) *
               C106 +
           ((C113 * C248 - C31993 * C262) * C114 +
            (C113 * C263 - C31993 * C278) * C32010) *
               C107) *
              C31970 * C241 +
          (((C31993 * C264 - C113 * C249) * C114 +
            (C31993 * C279 - C113 * C265) * C32010) *
               C103 +
           ((C31993 * C266 - C113 * C250) * C114 +
            (C31993 * C280 - C113 * C267) * C32010) *
               C104 +
           ((C31993 * C268 - C113 * C251) * C114 +
            (C31993 * C281 - C113 * C269) * C32010) *
               C105 +
           ((C31993 * C270 - C113 * C252) * C114 +
            (C31993 * C282 - C113 * C271) * C32010) *
               C106 +
           ((C31993 * C272 - C113 * C253) * C114 +
            (C31993 * C283 - C113 * C273) * C32010) *
               C107) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C114 +
            (C31993 * C136 - C113 * C123) * C32010) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C31970 * C31956 * C110 +
          (((C145 - C144) * C114 + (C147 - C146) * C32010) * C103 +
           ((C149 - C148) * C114 + (C151 - C150) * C32010) * C104 +
           ((C153 - C152) * C114 + (C155 - C154) * C32010) * C105 +
           ((C157 - C156) * C114 + (C159 - C158) * C32010) * C106 +
           ((C160 - C161) * C114 + (C162 - C163) * C32010) * C107) *
              C31970 * C31956 * C111 +
          (C176 * C103 + C177 * C104 + C178 * C105 +
           ((C161 - C160) * C114 + (C163 - C162) * C32010) * C106 +
           ((C31993 * C134 - C113 * C121) * C114 +
            (C31993 * C142 - C113 * C135) * C32010) *
               C107) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31993 * C122 - C113 * C115) * C114 +
            (C31993 * C136 - C113 * C123) * C32010) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C346 +
          (((C113 * C349 - C31993 * C359) * C114 +
            (C113 * C360 - C31993 * C379) * C32010) *
               C103 +
           ((C113 * C350 - C31993 * C361) * C114 +
            (C113 * C362 - C31993 * C380) * C32010) *
               C104 +
           ((C113 * C351 - C31993 * C363) * C114 +
            (C113 * C364 - C31993 * C381) * C32010) *
               C105 +
           ((C113 * C352 - C31993 * C365) * C114 +
            (C113 * C366 - C31993 * C382) * C32010) *
               C106 +
           ((C113 * C353 - C31993 * C367) * C114 +
            (C113 * C368 - C31993 * C383) * C32010) *
               C107) *
              C347 +
          (((C31993 * C369 - C113 * C354) * C114 +
            (C31993 * C384 - C113 * C370) * C32010) *
               C103 +
           ((C31993 * C371 - C113 * C355) * C114 +
            (C31993 * C385 - C113 * C372) * C32010) *
               C104 +
           ((C31993 * C373 - C113 * C356) * C114 +
            (C31993 * C386 - C113 * C374) * C32010) *
               C105 +
           ((C31993 * C375 - C113 * C357) * C114 +
            (C31993 * C387 - C113 * C376) * C32010) *
               C106 +
           ((C31993 * C377 - C113 * C358) * C114 +
            (C31993 * C388 - C113 * C378) * C32010) *
               C107) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C114 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C32010) *
               C814 +
           ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
            (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
               C815 +
           C869 * C32271) *
              C31970 * C31956 * C110 +
          (((C822 - C821 + C824 - C823 + C826 - C825) * C114 +
            (C828 - C827 + C830 - C829 + C832 - C831) * C32010) *
               C814 +
           ((C834 - C833 + C836 - C835 + C838 - C837) * C114 +
            (C840 - C839 + C842 - C841 + C844 - C843) * C32010) *
               C815 +
           ((C845 - C846 + C847 - C848 + C849 - C850) * C114 +
            (C851 - C852 + C853 - C854 + C855 - C856) * C32010) *
               C32271) *
              C31970 * C31956 * C111 +
          (C869 * C814 +
           ((C846 - C845 + C848 - C847 + C850 - C849) * C114 +
            (C852 - C851 + C854 - C853 + C856 - C855) * C32010) *
               C815 +
           ((C32317 * C130 - C817 * C119 + C32305 * C262 - C818 * C248 +
             C32282 * C272 - C819 * C253) *
                C114 +
            (C32317 * C140 - C817 * C131 + C32305 * C278 - C818 * C263 +
             C32282 * C283 - C819 * C273) *
                C32010) *
               C32271) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C114 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C32010) *
               C814 +
           ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
            (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
               C815 +
           C869 * C32271) *
              C31970 * C240 +
          (((C817 * C244 - C32317 * C254 + C818 * C249 - C32305 * C264 +
             C819 * C979 - C32282 * C985) *
                C114 +
            (C817 * C255 - C32317 * C274 + C818 * C265 - C32305 * C279 +
             C819 * C986 - C32282 * C997) *
                C32010) *
               C814 +
           ((C817 * C245 - C32317 * C256 + C818 * C250 - C32305 * C266 +
             C819 * C980 - C32282 * C987) *
                C114 +
            (C817 * C257 - C32317 * C275 + C818 * C267 - C32305 * C280 +
             C819 * C988 - C32282 * C998) *
                C32010) *
               C815 +
           ((C817 * C246 - C32317 * C258 + C818 * C251 - C32305 * C268 +
             C819 * C981 - C32282 * C989) *
                C114 +
            (C817 * C259 - C32317 * C276 + C818 * C269 - C32305 * C281 +
             C819 * C990 - C32282 * C999) *
                C32010) *
               C32271) *
              C31970 * C241 +
          (((C32317 * C264 - C817 * C249 + C32305 * C985 - C818 * C979 +
             C32282 * C991 - C819 * C982) *
                C114 +
            (C32317 * C279 - C817 * C265 + C32305 * C997 - C818 * C986 +
             C32282 * C1000 - C819 * C992) *
                C32010) *
               C814 +
           ((C32317 * C266 - C817 * C250 + C32305 * C987 - C818 * C980 +
             C32282 * C993 - C819 * C983) *
                C114 +
            (C32317 * C280 - C817 * C267 + C32305 * C998 - C818 * C988 +
             C32282 * C1001 - C819 * C994) *
                C32010) *
               C815 +
           ((C32317 * C268 - C817 * C251 + C32305 * C989 - C818 * C981 +
             C32282 * C995 - C819 * C984) *
                C114 +
            (C32317 * C281 - C817 * C269 + C32305 * C999 - C818 * C990 +
             C32282 * C1002 - C819 * C996) *
                C32010) *
               C32271) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
             C32282 * C264 - C819 * C249) *
                C114 +
            (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
             C32282 * C279 - C819 * C265) *
                C32010) *
               C814 +
           ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
            (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
               C815 +
           C869 * C32271) *
              C346 +
          (((C817 * C349 - C32317 * C359 + C818 * C681 - C32305 * C686 +
             C819 * C1113 - C32282 * C1122) *
                C114 +
            (C817 * C360 - C32317 * C379 + C818 * C687 - C32305 * C696 +
             C819 * C1123 - C32282 * C1140) *
                C32010) *
               C814 +
           ((C817 * C350 - C32317 * C361 + C818 * C682 - C32305 * C688 +
             C819 * C1114 - C32282 * C1124) *
                C114 +
            (C817 * C362 - C32317 * C380 + C818 * C689 - C32305 * C697 +
             C819 * C1125 - C32282 * C1141) *
                C32010) *
               C815 +
           ((C817 * C351 - C32317 * C363 + C818 * C683 - C32305 * C690 +
             C819 * C1115 - C32282 * C1126) *
                C114 +
            (C817 * C364 - C32317 * C381 + C818 * C691 - C32305 * C698 +
             C819 * C1127 - C32282 * C1142) *
                C32010) *
               C32271) *
              C347 +
          (((C32317 * C369 - C817 * C354 + C32305 * C1128 - C818 * C1116 +
             C32282 * C1129 - C819 * C1117) *
                C114 +
            (C32317 * C384 - C817 * C370 + C32305 * C1143 - C818 * C1130 +
             C32282 * C1144 - C819 * C1131) *
                C32010) *
               C814 +
           ((C32317 * C371 - C817 * C355 + C32305 * C1132 - C818 * C1118 +
             C32282 * C1133 - C819 * C1119) *
                C114 +
            (C32317 * C385 - C817 * C372 + C32305 * C1145 - C818 * C1134 +
             C32282 * C1146 - C819 * C1135) *
                C32010) *
               C815 +
           ((C32317 * C373 - C817 * C356 + C32305 * C1136 - C818 * C1120 +
             C32282 * C1137 - C819 * C1121) *
                C114 +
            (C32317 * C386 - C817 * C374 + C32305 * C1147 - C818 * C1138 +
             C32282 * C1148 - C819 * C1139) *
                C32010) *
               C32271) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C114 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32010) *
               C32314 +
           ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
            (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
               C32301 +
           C5333 * C32271) *
              C31970 * C31956 * C110 +
          (((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C114 +
            (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32010) *
               C32314 +
           ((C5298 - C5297 + C5300 - C5299 + C5302 - C5301) * C114 +
            (C5304 - C5303 + C5306 - C5305 + C5308 - C5307) * C32010) *
               C32301 +
           ((C5309 - C5310 + C5311 - C5312 + C5313 - C5314) * C114 +
            (C5315 - C5316 + C5317 - C5318 + C5319 - C5320) * C32010) *
               C32271) *
              C31970 * C31956 * C111 +
          (C5333 * C32314 +
           ((C5310 - C5309 + C5312 - C5311 + C5314 - C5313) * C114 +
            (C5316 - C5315 + C5318 - C5317 + C5320 - C5319) * C32010) *
               C32301 +
           ((C5275 * C130 - C5281 * C119 + C5276 * C262 - C5282 * C248 +
             C32282 * C272 - C5283 * C253) *
                C114 +
            (C5275 * C140 - C5281 * C131 + C5276 * C278 - C5282 * C263 +
             C32282 * C283 - C5283 * C273) *
                C32010) *
               C32271) *
              C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C114 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32010) *
               C32314 +
           ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
            (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
               C32301 +
           C5333 * C32271) *
              C31970 * C240 +
          (((C5281 * C244 - C5275 * C254 + C5282 * C249 - C5276 * C264 +
             C5283 * C979 - C32282 * C985) *
                C114 +
            (C5281 * C255 - C5275 * C274 + C5282 * C265 - C5276 * C279 +
             C5283 * C986 - C32282 * C997) *
                C32010) *
               C32314 +
           ((C5281 * C245 - C5275 * C256 + C5282 * C250 - C5276 * C266 +
             C5283 * C980 - C32282 * C987) *
                C114 +
            (C5281 * C257 - C5275 * C275 + C5282 * C267 - C5276 * C280 +
             C5283 * C988 - C32282 * C998) *
                C32010) *
               C32301 +
           ((C5281 * C246 - C5275 * C258 + C5282 * C251 - C5276 * C268 +
             C5283 * C981 - C32282 * C989) *
                C114 +
            (C5281 * C259 - C5275 * C276 + C5282 * C269 - C5276 * C281 +
             C5283 * C990 - C32282 * C999) *
                C32010) *
               C32271) *
              C31970 * C241 +
          (((C5275 * C264 - C5281 * C249 + C5276 * C985 - C5282 * C979 +
             C32282 * C991 - C5283 * C982) *
                C114 +
            (C5275 * C279 - C5281 * C265 + C5276 * C997 - C5282 * C986 +
             C32282 * C1000 - C5283 * C992) *
                C32010) *
               C32314 +
           ((C5275 * C266 - C5281 * C250 + C5276 * C987 - C5282 * C980 +
             C32282 * C993 - C5283 * C983) *
                C114 +
            (C5275 * C280 - C5281 * C267 + C5276 * C998 - C5282 * C988 +
             C32282 * C1001 - C5283 * C994) *
                C32010) *
               C32301 +
           ((C5275 * C268 - C5281 * C251 + C5276 * C989 - C5282 * C981 +
             C32282 * C995 - C5283 * C984) *
                C114 +
            (C5275 * C281 - C5281 * C269 + C5276 * C999 - C5282 * C990 +
             C32282 * C1002 - C5283 * C996) *
                C32010) *
               C32271) *
              C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
             C32282 * C264 - C5283 * C249) *
                C114 +
            (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
             C32282 * C279 - C5283 * C265) *
                C32010) *
               C32314 +
           ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
            (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
               C32301 +
           C5333 * C32271) *
              C346 +
          (((C5281 * C349 - C5275 * C359 + C5282 * C681 - C5276 * C686 +
             C5283 * C1113 - C32282 * C1122) *
                C114 +
            (C5281 * C360 - C5275 * C379 + C5282 * C687 - C5276 * C696 +
             C5283 * C1123 - C32282 * C1140) *
                C32010) *
               C32314 +
           ((C5281 * C350 - C5275 * C361 + C5282 * C682 - C5276 * C688 +
             C5283 * C1114 - C32282 * C1124) *
                C114 +
            (C5281 * C362 - C5275 * C380 + C5282 * C689 - C5276 * C697 +
             C5283 * C1125 - C32282 * C1141) *
                C32010) *
               C32301 +
           ((C5281 * C351 - C5275 * C363 + C5282 * C683 - C5276 * C690 +
             C5283 * C1115 - C32282 * C1126) *
                C114 +
            (C5281 * C364 - C5275 * C381 + C5282 * C691 - C5276 * C698 +
             C5283 * C1127 - C32282 * C1142) *
                C32010) *
               C32271) *
              C347 +
          (((C5275 * C369 - C5281 * C354 + C5276 * C1128 - C5282 * C1116 +
             C32282 * C1129 - C5283 * C1117) *
                C114 +
            (C5275 * C384 - C5281 * C370 + C5276 * C1143 - C5282 * C1130 +
             C32282 * C1144 - C5283 * C1131) *
                C32010) *
               C32314 +
           ((C5275 * C371 - C5281 * C355 + C5276 * C1132 - C5282 * C1118 +
             C32282 * C1133 - C5283 * C1119) *
                C114 +
            (C5275 * C385 - C5281 * C372 + C5276 * C1145 - C5282 * C1134 +
             C32282 * C1146 - C5283 * C1135) *
                C32010) *
               C32301 +
           ((C5275 * C373 - C5281 * C356 + C5276 * C1136 - C5282 * C1120 +
             C32282 * C1137 - C5283 * C1121) *
                C114 +
            (C5275 * C386 - C5281 * C374 + C5276 * C1147 - C5282 * C1138 +
             C32282 * C1148 - C5283 * C1139) *
                C32010) *
               C32271) *
              C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
            C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
            C6105 * C991 - C6111 * C982) *
               C114 +
           (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
            C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
            C6105 * C1000 - C6111 * C992) *
               C32010) *
              C31911 * C31970 * C31956 * C110 +
          ((C6107 * C116 - C6101 * C124 + C6108 * C245 - C6102 * C256 +
            C6109 * C250 - C6103 * C266 + C6110 * C980 - C6104 * C987 +
            C6111 * C983 - C6105 * C993) *
               C114 +
           (C6107 * C125 - C6101 * C137 + C6108 * C257 - C6102 * C275 +
            C6109 * C267 - C6103 * C280 + C6110 * C988 - C6104 * C998 +
            C6111 * C994 - C6105 * C1001) *
               C32010) *
              C31911 * C31970 * C31956 * C111 +
          ((C6101 * C126 - C6107 * C117 + C6102 * C258 - C6108 * C246 +
            C6103 * C268 - C6109 * C251 + C6104 * C989 - C6110 * C981 +
            C6105 * C995 - C6111 * C984) *
               C114 +
           (C6101 * C138 - C6107 * C127 + C6102 * C276 - C6108 * C259 +
            C6103 * C281 - C6109 * C269 + C6104 * C999 - C6110 * C990 +
            C6105 * C1002 - C6111 * C996) *
               C32010) *
              C31911 * C31970 * C31956 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
            C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
            C6105 * C991 - C6111 * C982) *
               C114 +
           (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
            C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
            C6105 * C1000 - C6111 * C992) *
               C32010) *
              C31911 * C31970 * C240 +
          ((C6107 * C244 - C6101 * C254 + C6108 * C249 - C6102 * C264 +
            C6109 * C979 - C6103 * C985 + C6110 * C982 - C6104 * C991 +
            C6111 * C6174 - C6105 * C6176) *
               C114 +
           (C6107 * C255 - C6101 * C274 + C6108 * C265 - C6102 * C279 +
            C6109 * C986 - C6103 * C997 + C6110 * C992 - C6104 * C1000 +
            C6111 * C6177 - C6105 * C6180) *
               C32010) *
              C31911 * C31970 * C241 +
          ((C6101 * C264 - C6107 * C249 + C6102 * C985 - C6108 * C979 +
            C6103 * C991 - C6109 * C982 + C6104 * C6176 - C6110 * C6174 +
            C6105 * C6178 - C6111 * C6175) *
               C114 +
           (C6101 * C279 - C6107 * C265 + C6102 * C997 - C6108 * C986 +
            C6103 * C1000 - C6109 * C992 + C6104 * C6180 - C6110 * C6177 +
            C6105 * C6181 - C6111 * C6179) *
               C32010) *
              C31911 * C31970 * C242) *
         C31944) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
            C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
            C6105 * C991 - C6111 * C982) *
               C114 +
           (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
            C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
            C6105 * C1000 - C6111 * C992) *
               C32010) *
              C31911 * C346 +
          ((C6107 * C349 - C6101 * C359 + C6108 * C681 - C6102 * C686 +
            C6109 * C1113 - C6103 * C1122 + C6110 * C1643 - C6104 * C1646 +
            C6111 * C6244 - C6105 * C6247) *
               C114 +
           (C6107 * C360 - C6101 * C379 + C6108 * C687 - C6102 * C696 +
            C6109 * C1123 - C6103 * C1140 + C6110 * C1647 - C6104 * C1652 +
            C6111 * C6248 - C6105 * C6253) *
               C32010) *
              C31911 * C347 +
          ((C6101 * C369 - C6107 * C354 + C6102 * C1128 - C6108 * C1116 +
            C6103 * C1129 - C6109 * C1117 + C6104 * C6249 - C6110 * C6245 +
            C6105 * C6250 - C6111 * C6246) *
               C114 +
           (C6101 * C384 - C6107 * C370 + C6102 * C1143 - C6108 * C1130 +
            C6103 * C1144 - C6109 * C1131 + C6104 * C6254 - C6110 * C6251 +
            C6105 * C6255 - C6111 * C6252) *
               C32010) *
              C31911 * C348) *
         C31956 * C31944) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C31993 * C122 - C113 * C115) * C114 +
             (C31993 * C136 - C113 * C123) * C32010) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C577 +
           (((C113 * C349 - C31993 * C359) * C114 +
             (C113 * C360 - C31993 * C379) * C32010) *
                C103 +
            ((C584 - C585) * C114 + (C586 - C587) * C32010) * C104 +
            ((C588 - C589) * C114 + (C590 - C591) * C32010) * C105 +
            ((C592 - C593) * C114 + (C594 - C595) * C32010) * C106 +
            ((C596 - C597) * C114 + (C598 - C599) * C32010) * C107) *
               C578) *
              C31956 * C473 +
          ((((C145 - C144) * C114 + (C147 - C146) * C32010) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C32010) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C32010) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C32010) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C32010) * C107) *
               C577 +
           (((C585 - C584) * C114 + (C587 - C586) * C32010) * C103 +
            ((C589 - C588) * C114 + (C591 - C590) * C32010) * C104 +
            ((C593 - C592) * C114 + (C595 - C594) * C32010) * C105 +
            ((C597 - C596) * C114 + (C599 - C598) * C32010) * C106 +
            ((C31993 * C580 - C113 * C579) * C114 +
             (C31993 * C582 - C113 * C581) * C32010) *
                C107) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C32317 * C122 - C817 * C115 + C32305 * C254 - C818 * C244 +
              C32282 * C264 - C819 * C249) *
                 C114 +
             (C32317 * C136 - C817 * C123 + C32305 * C274 - C818 * C255 +
              C32282 * C279 - C819 * C265) *
                 C32010) *
                C814 +
            ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
             (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
                C815 +
            C869 * C32271) *
               C577 +
           (((C817 * C349 - C32317 * C359 + C818 * C681 - C32305 * C686 +
              C819 * C1113 - C32282 * C1122) *
                 C114 +
             (C817 * C360 - C32317 * C379 + C818 * C687 - C32305 * C696 +
              C819 * C1123 - C32282 * C1140) *
                 C32010) *
                C814 +
            ((C1474 - C1475 + C1476 - C1477 + C1478 - C1479) * C114 +
             (C1480 - C1481 + C1482 - C1483 + C1484 - C1485) * C32010) *
                C815 +
            ((C1486 - C1487 + C1488 - C1489 + C1490 - C1491) * C114 +
             (C1492 - C1493 + C1494 - C1495 + C1496 - C1497) * C32010) *
                C32271) *
               C578) *
              C31956 * C473 +
          ((((C822 - C821 + C824 - C823 + C826 - C825) * C114 +
             (C828 - C827 + C830 - C829 + C832 - C831) * C32010) *
                C814 +
            ((C834 - C833 + C836 - C835 + C838 - C837) * C114 +
             (C840 - C839 + C842 - C841 + C844 - C843) * C32010) *
                C815 +
            ((C845 - C846 + C847 - C848 + C849 - C850) * C114 +
             (C851 - C852 + C853 - C854 + C855 - C856) * C32010) *
                C32271) *
               C577 +
           (((C1475 - C1474 + C1477 - C1476 + C1479 - C1478) * C114 +
             (C1481 - C1480 + C1483 - C1482 + C1485 - C1484) * C32010) *
                C814 +
            ((C1487 - C1486 + C1489 - C1488 + C1491 - C1490) * C114 +
             (C1493 - C1492 + C1495 - C1494 + C1497 - C1496) * C32010) *
                C815 +
            ((C32317 * C365 - C817 * C352 + C32305 * C692 - C818 * C684 +
              C32282 * C1470 - C819 * C1469) *
                 C114 +
             (C32317 * C382 - C817 * C366 + C32305 * C699 - C818 * C693 +
              C32282 * C1472 - C819 * C1471) *
                 C32010) *
                C32271) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C5275 * C122 - C5281 * C115 + C5276 * C254 - C5282 * C244 +
              C32282 * C264 - C5283 * C249) *
                 C114 +
             (C5275 * C136 - C5281 * C123 + C5276 * C274 - C5282 * C255 +
              C32282 * C279 - C5283 * C265) *
                 C32010) *
                C32314 +
            ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
             (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
                C32301 +
            C5333 * C32271) *
               C577 +
           (((C5281 * C349 - C5275 * C359 + C5282 * C681 - C5276 * C686 +
              C5283 * C1113 - C32282 * C1122) *
                 C114 +
             (C5281 * C360 - C5275 * C379 + C5282 * C687 - C5276 * C696 +
              C5283 * C1123 - C32282 * C1140) *
                 C32010) *
                C32314 +
            ((C5870 - C5871 + C5872 - C5873 + C5874 - C5875) * C114 +
             (C5876 - C5877 + C5878 - C5879 + C5880 - C5881) * C32010) *
                C32301 +
            ((C5882 - C5883 + C5884 - C5885 + C5886 - C5887) * C114 +
             (C5888 - C5889 + C5890 - C5891 + C5892 - C5893) * C32010) *
                C32271) *
               C578) *
              C31956 * C473 +
          ((((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C114 +
             (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32010) *
                C32314 +
            ((C5298 - C5297 + C5300 - C5299 + C5302 - C5301) * C114 +
             (C5304 - C5303 + C5306 - C5305 + C5308 - C5307) * C32010) *
                C32301 +
            ((C5309 - C5310 + C5311 - C5312 + C5313 - C5314) * C114 +
             (C5315 - C5316 + C5317 - C5318 + C5319 - C5320) * C32010) *
                C32271) *
               C577 +
           (((C5871 - C5870 + C5873 - C5872 + C5875 - C5874) * C114 +
             (C5877 - C5876 + C5879 - C5878 + C5881 - C5880) * C32010) *
                C32314 +
            ((C5883 - C5882 + C5885 - C5884 + C5887 - C5886) * C114 +
             (C5889 - C5888 + C5891 - C5890 + C5893 - C5892) * C32010) *
                C32301 +
            ((C5275 * C365 - C5281 * C352 + C5276 * C692 - C5282 * C684 +
              C32282 * C1470 - C5283 * C1469) *
                 C114 +
             (C5275 * C382 - C5281 * C366 + C5276 * C699 - C5282 * C693 +
              C32282 * C1472 - C5283 * C1471) *
                 C32010) *
                C32271) *
               C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
             C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
             C6105 * C991 - C6111 * C982) *
                C114 +
            (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
             C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
             C6105 * C1000 - C6111 * C992) *
                C32010) *
               C31911 * C577 +
           ((C6107 * C349 - C6101 * C359 + C6108 * C681 - C6102 * C686 +
             C6109 * C1113 - C6103 * C1122 + C6110 * C1643 - C6104 * C1646 +
             C6111 * C6244 - C6105 * C6247) *
                C114 +
            (C6107 * C360 - C6101 * C379 + C6108 * C687 - C6102 * C696 +
             C6109 * C1123 - C6103 * C1140 + C6110 * C1647 - C6104 * C1652 +
             C6111 * C6248 - C6105 * C6253) *
                C32010) *
               C31911 * C578) *
              C31956 * C473 +
          (((C6107 * C116 - C6101 * C124 + C6108 * C245 - C6102 * C256 +
             C6109 * C250 - C6103 * C266 + C6110 * C980 - C6104 * C987 +
             C6111 * C983 - C6105 * C993) *
                C114 +
            (C6107 * C125 - C6101 * C137 + C6108 * C257 - C6102 * C275 +
             C6109 * C267 - C6103 * C280 + C6110 * C988 - C6104 * C998 +
             C6111 * C994 - C6105 * C1001) *
                C32010) *
               C31911 * C577 +
           ((C6101 * C361 - C6107 * C350 + C6102 * C688 - C6108 * C682 +
             C6103 * C1124 - C6109 * C1114 + C6104 * C1648 - C6110 * C1644 +
             C6105 * C6425 - C6111 * C6424) *
                C114 +
            (C6101 * C380 - C6107 * C362 + C6102 * C697 - C6108 * C689 +
             C6103 * C1141 - C6109 * C1125 + C6104 * C1653 - C6110 * C1649 +
             C6105 * C6427 - C6111 * C6426) *
                C32010) *
               C31911 * C578) *
              C31956 * C474)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] += (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  ((((C31993 * C122 - C113 * C115) * C114 +
                     (C31993 * C136 - C113 * C123) * C32010) *
                        C103 +
                    ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
                    C176 * C105 + C177 * C106 + C178 * C107) *
                       C31970 * C31956 * C110 +
                   (((C145 - C144) * C114 + (C147 - C146) * C32010) * C103 +
                    ((C149 - C148) * C114 + (C151 - C150) * C32010) * C104 +
                    ((C153 - C152) * C114 + (C155 - C154) * C32010) * C105 +
                    ((C157 - C156) * C114 + (C159 - C158) * C32010) * C106 +
                    ((C160 - C161) * C114 + (C162 - C163) * C32010) * C107) *
                       C31970 * C31956 * C111 +
                   (C176 * C103 + C177 * C104 + C178 * C105 +
                    ((C161 - C160) * C114 + (C163 - C162) * C32010) * C106 +
                    ((C31993 * C134 - C113 * C121) * C114 +
                     (C31993 * C142 - C113 * C135) * C32010) *
                        C107) *
                       C31970 * C31956 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  ((((C31993 * C122 - C113 * C115) * C114 +
                     (C31993 * C136 - C113 * C123) * C32010) *
                        C103 +
                    ((C144 - C145) * C114 + (C146 - C147) * C32010) * C104 +
                    C176 * C105 + C177 * C106 + C178 * C107) *
                       C31970 * C240 +
                   (((C113 * C244 - C31993 * C254) * C114 +
                     (C113 * C255 - C31993 * C274) * C32010) *
                        C103 +
                    ((C113 * C245 - C31993 * C256) * C114 +
                     (C113 * C257 - C31993 * C275) * C32010) *
                        C104 +
                    ((C113 * C246 - C31993 * C258) * C114 +
                     (C113 * C259 - C31993 * C276) * C32010) *
                        C105 +
                    ((C113 * C247 - C31993 * C260) * C114 +
                     (C113 * C261 - C31993 * C277) * C32010) *
                        C106 +
                    ((C113 * C248 - C31993 * C262) * C114 +
                     (C113 * C263 - C31993 * C278) * C32010) *
                        C107) *
                       C31970 * C241 +
                   (((C31993 * C264 - C113 * C249) * C114 +
                     (C31993 * C279 - C113 * C265) * C32010) *
                        C103 +
                    ((C31993 * C266 - C113 * C250) * C114 +
                     (C31993 * C280 - C113 * C267) * C32010) *
                        C104 +
                    ((C31993 * C268 - C113 * C251) * C114 +
                     (C31993 * C281 - C113 * C269) * C32010) *
                        C105 +
                    ((C31993 * C270 - C113 * C252) * C114 +
                     (C31993 * C282 - C113 * C271) * C32010) *
                        C106 +
                    ((C31993 * C272 - C113 * C253) * C114 +
                     (C31993 * C283 - C113 * C273) * C32010) *
                        C107) *
                       C31970 * C242) *
                  C31944) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  ((((C32317 * C122 - C817 * C115 + C32305 * C254 -
                      C818 * C244 + C32282 * C264 - C819 * C249) *
                         C114 +
                     (C32317 * C136 - C817 * C123 + C32305 * C274 -
                      C818 * C255 + C32282 * C279 - C819 * C265) *
                         C32010) *
                        C814 +
                    ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
                     (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
                        C815 +
                    C869 * C32271) *
                       C31970 * C31956 * C110 +
                   (((C822 - C821 + C824 - C823 + C826 - C825) * C114 +
                     (C828 - C827 + C830 - C829 + C832 - C831) * C32010) *
                        C814 +
                    ((C834 - C833 + C836 - C835 + C838 - C837) * C114 +
                     (C840 - C839 + C842 - C841 + C844 - C843) * C32010) *
                        C815 +
                    ((C845 - C846 + C847 - C848 + C849 - C850) * C114 +
                     (C851 - C852 + C853 - C854 + C855 - C856) * C32010) *
                        C32271) *
                       C31970 * C31956 * C111 +
                   (C869 * C814 +
                    ((C846 - C845 + C848 - C847 + C850 - C849) * C114 +
                     (C852 - C851 + C854 - C853 + C856 - C855) * C32010) *
                        C815 +
                    ((C32317 * C130 - C817 * C119 + C32305 * C262 -
                      C818 * C248 + C32282 * C272 - C819 * C253) *
                         C114 +
                     (C32317 * C140 - C817 * C131 + C32305 * C278 -
                      C818 * C263 + C32282 * C283 - C819 * C273) *
                         C32010) *
                        C32271) *
                       C31970 * C31956 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  ((((C32317 * C122 - C817 * C115 + C32305 * C254 -
                      C818 * C244 + C32282 * C264 - C819 * C249) *
                         C114 +
                     (C32317 * C136 - C817 * C123 + C32305 * C274 -
                      C818 * C255 + C32282 * C279 - C819 * C265) *
                         C32010) *
                        C814 +
                    ((C821 - C822 + C823 - C824 + C825 - C826) * C114 +
                     (C827 - C828 + C829 - C830 + C831 - C832) * C32010) *
                        C815 +
                    C869 * C32271) *
                       C31970 * C240 +
                   (((C817 * C244 - C32317 * C254 + C818 * C249 -
                      C32305 * C264 + C819 * C979 - C32282 * C985) *
                         C114 +
                     (C817 * C255 - C32317 * C274 + C818 * C265 -
                      C32305 * C279 + C819 * C986 - C32282 * C997) *
                         C32010) *
                        C814 +
                    ((C817 * C245 - C32317 * C256 + C818 * C250 -
                      C32305 * C266 + C819 * C980 - C32282 * C987) *
                         C114 +
                     (C817 * C257 - C32317 * C275 + C818 * C267 -
                      C32305 * C280 + C819 * C988 - C32282 * C998) *
                         C32010) *
                        C815 +
                    ((C817 * C246 - C32317 * C258 + C818 * C251 -
                      C32305 * C268 + C819 * C981 - C32282 * C989) *
                         C114 +
                     (C817 * C259 - C32317 * C276 + C818 * C269 -
                      C32305 * C281 + C819 * C990 - C32282 * C999) *
                         C32010) *
                        C32271) *
                       C31970 * C241 +
                   (((C32317 * C264 - C817 * C249 + C32305 * C985 -
                      C818 * C979 + C32282 * C991 - C819 * C982) *
                         C114 +
                     (C32317 * C279 - C817 * C265 + C32305 * C997 -
                      C818 * C986 + C32282 * C1000 - C819 * C992) *
                         C32010) *
                        C814 +
                    ((C32317 * C266 - C817 * C250 + C32305 * C987 -
                      C818 * C980 + C32282 * C993 - C819 * C983) *
                         C114 +
                     (C32317 * C280 - C817 * C267 + C32305 * C998 -
                      C818 * C988 + C32282 * C1001 - C819 * C994) *
                         C32010) *
                        C815 +
                    ((C32317 * C268 - C817 * C251 + C32305 * C989 -
                      C818 * C981 + C32282 * C995 - C819 * C984) *
                         C114 +
                     (C32317 * C281 - C817 * C269 + C32305 * C999 -
                      C818 * C990 + C32282 * C1002 - C819 * C996) *
                         C32010) *
                        C32271) *
                       C31970 * C242) *
                  C31944) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  ((((C5275 * C122 - C5281 * C115 + C5276 * C254 -
                      C5282 * C244 + C32282 * C264 - C5283 * C249) *
                         C114 +
                     (C5275 * C136 - C5281 * C123 + C5276 * C274 -
                      C5282 * C255 + C32282 * C279 - C5283 * C265) *
                         C32010) *
                        C32314 +
                    ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
                     (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
                        C32301 +
                    C5333 * C32271) *
                       C31970 * C31956 * C110 +
                   (((C5286 - C5285 + C5288 - C5287 + C5290 - C5289) * C114 +
                     (C5292 - C5291 + C5294 - C5293 + C5296 - C5295) * C32010) *
                        C32314 +
                    ((C5298 - C5297 + C5300 - C5299 + C5302 - C5301) * C114 +
                     (C5304 - C5303 + C5306 - C5305 + C5308 - C5307) * C32010) *
                        C32301 +
                    ((C5309 - C5310 + C5311 - C5312 + C5313 - C5314) * C114 +
                     (C5315 - C5316 + C5317 - C5318 + C5319 - C5320) * C32010) *
                        C32271) *
                       C31970 * C31956 * C111 +
                   (C5333 * C32314 +
                    ((C5310 - C5309 + C5312 - C5311 + C5314 - C5313) * C114 +
                     (C5316 - C5315 + C5318 - C5317 + C5320 - C5319) * C32010) *
                        C32301 +
                    ((C5275 * C130 - C5281 * C119 + C5276 * C262 -
                      C5282 * C248 + C32282 * C272 - C5283 * C253) *
                         C114 +
                     (C5275 * C140 - C5281 * C131 + C5276 * C278 -
                      C5282 * C263 + C32282 * C283 - C5283 * C273) *
                         C32010) *
                        C32271) *
                       C31970 * C31956 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  ((((C5275 * C122 - C5281 * C115 + C5276 * C254 -
                      C5282 * C244 + C32282 * C264 - C5283 * C249) *
                         C114 +
                     (C5275 * C136 - C5281 * C123 + C5276 * C274 -
                      C5282 * C255 + C32282 * C279 - C5283 * C265) *
                         C32010) *
                        C32314 +
                    ((C5285 - C5286 + C5287 - C5288 + C5289 - C5290) * C114 +
                     (C5291 - C5292 + C5293 - C5294 + C5295 - C5296) * C32010) *
                        C32301 +
                    C5333 * C32271) *
                       C31970 * C240 +
                   (((C5281 * C244 - C5275 * C254 + C5282 * C249 -
                      C5276 * C264 + C5283 * C979 - C32282 * C985) *
                         C114 +
                     (C5281 * C255 - C5275 * C274 + C5282 * C265 -
                      C5276 * C279 + C5283 * C986 - C32282 * C997) *
                         C32010) *
                        C32314 +
                    ((C5281 * C245 - C5275 * C256 + C5282 * C250 -
                      C5276 * C266 + C5283 * C980 - C32282 * C987) *
                         C114 +
                     (C5281 * C257 - C5275 * C275 + C5282 * C267 -
                      C5276 * C280 + C5283 * C988 - C32282 * C998) *
                         C32010) *
                        C32301 +
                    ((C5281 * C246 - C5275 * C258 + C5282 * C251 -
                      C5276 * C268 + C5283 * C981 - C32282 * C989) *
                         C114 +
                     (C5281 * C259 - C5275 * C276 + C5282 * C269 -
                      C5276 * C281 + C5283 * C990 - C32282 * C999) *
                         C32010) *
                        C32271) *
                       C31970 * C241 +
                   (((C5275 * C264 - C5281 * C249 + C5276 * C985 -
                      C5282 * C979 + C32282 * C991 - C5283 * C982) *
                         C114 +
                     (C5275 * C279 - C5281 * C265 + C5276 * C997 -
                      C5282 * C986 + C32282 * C1000 - C5283 * C992) *
                         C32010) *
                        C32314 +
                    ((C5275 * C266 - C5281 * C250 + C5276 * C987 -
                      C5282 * C980 + C32282 * C993 - C5283 * C983) *
                         C114 +
                     (C5275 * C280 - C5281 * C267 + C5276 * C998 -
                      C5282 * C988 + C32282 * C1001 - C5283 * C994) *
                         C32010) *
                        C32301 +
                    ((C5275 * C268 - C5281 * C251 + C5276 * C989 -
                      C5282 * C981 + C32282 * C995 - C5283 * C984) *
                         C114 +
                     (C5275 * C281 - C5281 * C269 + C5276 * C999 -
                      C5282 * C990 + C32282 * C1002 - C5283 * C996) *
                         C32010) *
                        C32271) *
                       C31970 * C242) *
                  C31944) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  (((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
                     C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
                     C6105 * C991 - C6111 * C982) *
                        C114 +
                    (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
                     C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
                     C6105 * C1000 - C6111 * C992) *
                        C32010) *
                       C31911 * C31970 * C31956 * C110 +
                   ((C6107 * C116 - C6101 * C124 + C6108 * C245 - C6102 * C256 +
                     C6109 * C250 - C6103 * C266 + C6110 * C980 - C6104 * C987 +
                     C6111 * C983 - C6105 * C993) *
                        C114 +
                    (C6107 * C125 - C6101 * C137 + C6108 * C257 - C6102 * C275 +
                     C6109 * C267 - C6103 * C280 + C6110 * C988 - C6104 * C998 +
                     C6111 * C994 - C6105 * C1001) *
                        C32010) *
                       C31911 * C31970 * C31956 * C111 +
                   ((C6101 * C126 - C6107 * C117 + C6102 * C258 - C6108 * C246 +
                     C6103 * C268 - C6109 * C251 + C6104 * C989 - C6110 * C981 +
                     C6105 * C995 - C6111 * C984) *
                        C114 +
                    (C6101 * C138 - C6107 * C127 + C6102 * C276 - C6108 * C259 +
                     C6103 * C281 - C6109 * C269 + C6104 * C999 - C6110 * C990 +
                     C6105 * C1002 - C6111 * C996) *
                        C32010) *
                       C31911 * C31970 * C31956 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  (((C6101 * C122 - C6107 * C115 + C6102 * C254 - C6108 * C244 +
                     C6103 * C264 - C6109 * C249 + C6104 * C985 - C6110 * C979 +
                     C6105 * C991 - C6111 * C982) *
                        C114 +
                    (C6101 * C136 - C6107 * C123 + C6102 * C274 - C6108 * C255 +
                     C6103 * C279 - C6109 * C265 + C6104 * C997 - C6110 * C986 +
                     C6105 * C1000 - C6111 * C992) *
                        C32010) *
                       C31911 * C31970 * C240 +
                   ((C6107 * C244 - C6101 * C254 + C6108 * C249 - C6102 * C264 +
                     C6109 * C979 - C6103 * C985 + C6110 * C982 - C6104 * C991 +
                     C6111 * C6174 - C6105 * C6176) *
                        C114 +
                    (C6107 * C255 - C6101 * C274 + C6108 * C265 - C6102 * C279 +
                     C6109 * C986 - C6103 * C997 + C6110 * C992 -
                     C6104 * C1000 + C6111 * C6177 - C6105 * C6180) *
                        C32010) *
                       C31911 * C31970 * C241 +
                   ((C6101 * C264 - C6107 * C249 + C6102 * C985 - C6108 * C979 +
                     C6103 * C991 - C6109 * C982 + C6104 * C6176 -
                     C6110 * C6174 + C6105 * C6178 - C6111 * C6175) *
                        C114 +
                    (C6101 * C279 - C6107 * C265 + C6102 * C997 - C6108 * C986 +
                     C6103 * C1000 - C6109 * C992 + C6104 * C6180 -
                     C6110 * C6177 + C6105 * C6181 - C6111 * C6179) *
                        C32010) *
                       C31911 * C31970 * C242) *
                  C31944) /
                     (p * q * std::sqrt(p + q));
}
